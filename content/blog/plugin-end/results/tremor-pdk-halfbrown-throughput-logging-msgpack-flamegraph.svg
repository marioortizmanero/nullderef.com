<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1125.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1125.00"> </text><svg id="frames" x="10" width="1180" total_samples="113905"><g><title>std::sync::condvar::Condvar::wait_timeout (40 samples, 0.04%)</title><rect x="0.0035%" y="789" width="0.0351%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="40"/><text x="0.2535%" y="799.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait_timeout (39 samples, 0.03%)</title><rect x="0.0044%" y="773" width="0.0342%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="39"/><text x="0.2544%" y="783.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::wait_timeout (39 samples, 0.03%)</title><rect x="0.0044%" y="757" width="0.0342%" height="15" fill="rgb(221,193,54)" fg:x="5" fg:w="39"/><text x="0.2544%" y="767.50"></text></g><g><title>__pthread_cond_timedwait (31 samples, 0.03%)</title><rect x="0.0114%" y="741" width="0.0272%" height="15" fill="rgb(248,212,6)" fg:x="13" fg:w="31"/><text x="0.2614%" y="751.50"></text></g><g><title>async-io (46 samples, 0.04%)</title><rect x="0.0000%" y="1077" width="0.0404%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="46"/><text x="0.2500%" y="1087.50"></text></g><g><title>clone (44 samples, 0.04%)</title><rect x="0.0018%" y="1061" width="0.0386%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="44"/><text x="0.2518%" y="1071.50"></text></g><g><title>start_thread (44 samples, 0.04%)</title><rect x="0.0018%" y="1045" width="0.0386%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="44"/><text x="0.2518%" y="1055.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (44 samples, 0.04%)</title><rect x="0.0018%" y="1029" width="0.0386%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="44"/><text x="0.2518%" y="1039.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (44 samples, 0.04%)</title><rect x="0.0018%" y="1013" width="0.0386%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="44"/><text x="0.2518%" y="1023.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (44 samples, 0.04%)</title><rect x="0.0018%" y="997" width="0.0386%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="44"/><text x="0.2518%" y="1007.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (44 samples, 0.04%)</title><rect x="0.0018%" y="981" width="0.0386%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="44"/><text x="0.2518%" y="991.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (44 samples, 0.04%)</title><rect x="0.0018%" y="965" width="0.0386%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="44"/><text x="0.2518%" y="975.50"></text></g><g><title>std::panic::catch_unwind (44 samples, 0.04%)</title><rect x="0.0018%" y="949" width="0.0386%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="44"/><text x="0.2518%" y="959.50"></text></g><g><title>std::panicking::try (44 samples, 0.04%)</title><rect x="0.0018%" y="933" width="0.0386%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="44"/><text x="0.2518%" y="943.50"></text></g><g><title>std::panicking::try::do_call (44 samples, 0.04%)</title><rect x="0.0018%" y="917" width="0.0386%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="44"/><text x="0.2518%" y="927.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (44 samples, 0.04%)</title><rect x="0.0018%" y="901" width="0.0386%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="44"/><text x="0.2518%" y="911.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (44 samples, 0.04%)</title><rect x="0.0018%" y="885" width="0.0386%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="44"/><text x="0.2518%" y="895.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (44 samples, 0.04%)</title><rect x="0.0018%" y="869" width="0.0386%" height="15" fill="rgb(210,31,41)" fg:x="2" fg:w="44"/><text x="0.2518%" y="879.50"></text></g><g><title>async_io::driver::UNPARKER::{{closure}}::{{closure}} (44 samples, 0.04%)</title><rect x="0.0018%" y="853" width="0.0386%" height="15" fill="rgb(221,200,47)" fg:x="2" fg:w="44"/><text x="0.2518%" y="863.50"></text></g><g><title>async_io::driver::main_loop (44 samples, 0.04%)</title><rect x="0.0018%" y="837" width="0.0386%" height="15" fill="rgb(226,26,5)" fg:x="2" fg:w="44"/><text x="0.2518%" y="847.50"></text></g><g><title>parking::Parker::park_timeout (43 samples, 0.04%)</title><rect x="0.0026%" y="821" width="0.0378%" height="15" fill="rgb(249,33,26)" fg:x="3" fg:w="43"/><text x="0.2526%" y="831.50"></text></g><g><title>parking::Inner::park (43 samples, 0.04%)</title><rect x="0.0026%" y="805" width="0.0378%" height="15" fill="rgb(235,183,28)" fg:x="3" fg:w="43"/><text x="0.2526%" y="815.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (24 samples, 0.02%)</title><rect x="0.0474%" y="1061" width="0.0211%" height="15" fill="rgb(221,5,38)" fg:x="54" fg:w="24"/><text x="0.2974%" y="1071.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (13 samples, 0.01%)</title><rect x="0.0790%" y="1061" width="0.0114%" height="15" fill="rgb(247,18,42)" fg:x="90" fg:w="13"/><text x="0.3290%" y="1071.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_key (35 samples, 0.03%)</title><rect x="0.2713%" y="1013" width="0.0307%" height="15" fill="rgb(241,131,45)" fg:x="309" fg:w="35"/><text x="0.5213%" y="1023.50"></text></g><g><title>serde::de::MapAccess::next_key (35 samples, 0.03%)</title><rect x="0.2713%" y="997" width="0.0307%" height="15" fill="rgb(249,31,29)" fg:x="309" fg:w="35"/><text x="0.5213%" y="1007.50"></text></g><g><title>&lt;rmp_serde::decode::MapAccess&lt;R,C&gt; as serde::de::MapAccess&gt;::next_key_seed (35 samples, 0.03%)</title><rect x="0.2713%" y="981" width="0.0307%" height="15" fill="rgb(225,111,53)" fg:x="309" fg:w="35"/><text x="0.5213%" y="991.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (35 samples, 0.03%)</title><rect x="0.2713%" y="965" width="0.0307%" height="15" fill="rgb(238,160,17)" fg:x="309" fg:w="35"/><text x="0.5213%" y="975.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for &amp;str&gt;::deserialize (35 samples, 0.03%)</title><rect x="0.2713%" y="949" width="0.0307%" height="15" fill="rgb(214,148,48)" fg:x="309" fg:w="35"/><text x="0.5213%" y="959.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_str (35 samples, 0.03%)</title><rect x="0.2713%" y="933" width="0.0307%" height="15" fill="rgb(232,36,49)" fg:x="309" fg:w="35"/><text x="0.5213%" y="943.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_value (26 samples, 0.02%)</title><rect x="0.3020%" y="1013" width="0.0228%" height="15" fill="rgb(209,103,24)" fg:x="344" fg:w="26"/><text x="0.5520%" y="1023.50"></text></g><g><title>serde::de::MapAccess::next_value (26 samples, 0.02%)</title><rect x="0.3020%" y="997" width="0.0228%" height="15" fill="rgb(229,88,8)" fg:x="344" fg:w="26"/><text x="0.5520%" y="1007.50"></text></g><g><title>&lt;rmp_serde::decode::MapAccess&lt;R,C&gt; as serde::de::MapAccess&gt;::next_value_seed (26 samples, 0.02%)</title><rect x="0.3020%" y="981" width="0.0228%" height="15" fill="rgb(213,181,19)" fg:x="344" fg:w="26"/><text x="0.5520%" y="991.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (26 samples, 0.02%)</title><rect x="0.3020%" y="965" width="0.0228%" height="15" fill="rgb(254,191,54)" fg:x="344" fg:w="26"/><text x="0.5520%" y="975.50"></text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (26 samples, 0.02%)</title><rect x="0.3020%" y="949" width="0.0228%" height="15" fill="rgb(241,83,37)" fg:x="344" fg:w="26"/><text x="0.5520%" y="959.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::insert (23 samples, 0.02%)</title><rect x="0.3248%" y="1013" width="0.0202%" height="15" fill="rgb(233,36,39)" fg:x="370" fg:w="23"/><text x="0.5748%" y="1023.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_map (85 samples, 0.07%)</title><rect x="0.2713%" y="1029" width="0.0746%" height="15" fill="rgb(226,3,54)" fg:x="309" fg:w="85"/><text x="0.5213%" y="1039.50"></text></g><g><title>&lt;&amp;mut A as serde::de::SeqAccess&gt;::next_element (18 samples, 0.02%)</title><rect x="0.3459%" y="1013" width="0.0158%" height="15" fill="rgb(245,192,40)" fg:x="394" fg:w="18"/><text x="0.5959%" y="1023.50"></text></g><g><title>serde::de::SeqAccess::next_element (18 samples, 0.02%)</title><rect x="0.3459%" y="997" width="0.0158%" height="15" fill="rgb(238,167,29)" fg:x="394" fg:w="18"/><text x="0.5959%" y="1007.50"></text></g><g><title>&lt;rmp_serde::decode::SeqAccess&lt;R,C&gt; as serde::de::SeqAccess&gt;::next_element_seed (18 samples, 0.02%)</title><rect x="0.3459%" y="981" width="0.0158%" height="15" fill="rgb(232,182,51)" fg:x="394" fg:w="18"/><text x="0.5959%" y="991.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (18 samples, 0.02%)</title><rect x="0.3459%" y="965" width="0.0158%" height="15" fill="rgb(231,60,39)" fg:x="394" fg:w="18"/><text x="0.5959%" y="975.50"></text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (18 samples, 0.02%)</title><rect x="0.3459%" y="949" width="0.0158%" height="15" fill="rgb(208,69,12)" fg:x="394" fg:w="18"/><text x="0.5959%" y="959.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_seq (26 samples, 0.02%)</title><rect x="0.3459%" y="1029" width="0.0228%" height="15" fill="rgb(235,93,37)" fg:x="394" fg:w="26"/><text x="0.5959%" y="1039.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (354 samples, 0.31%)</title><rect x="0.1080%" y="1045" width="0.3108%" height="15" fill="rgb(213,116,39)" fg:x="123" fg:w="354"/><text x="0.3580%" y="1055.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::read_str_data (57 samples, 0.05%)</title><rect x="0.3687%" y="1029" width="0.0500%" height="15" fill="rgb(222,207,29)" fg:x="420" fg:w="57"/><text x="0.6187%" y="1039.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (31 samples, 0.03%)</title><rect x="0.4188%" y="1045" width="0.0272%" height="15" fill="rgb(206,96,30)" fg:x="477" fg:w="31"/><text x="0.6688%" y="1055.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (12 samples, 0.01%)</title><rect x="0.4460%" y="1045" width="0.0105%" height="15" fill="rgb(218,138,4)" fg:x="508" fg:w="12"/><text x="0.6960%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (12 samples, 0.01%)</title><rect x="0.4750%" y="1029" width="0.0105%" height="15" fill="rgb(250,191,14)" fg:x="541" fg:w="12"/><text x="0.7250%" y="1039.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (56 samples, 0.05%)</title><rect x="0.4592%" y="1045" width="0.0492%" height="15" fill="rgb(239,60,40)" fg:x="523" fg:w="56"/><text x="0.7092%" y="1055.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (26 samples, 0.02%)</title><rect x="0.4855%" y="1029" width="0.0228%" height="15" fill="rgb(206,27,48)" fg:x="553" fg:w="26"/><text x="0.7355%" y="1039.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (26 samples, 0.02%)</title><rect x="0.4855%" y="1013" width="0.0228%" height="15" fill="rgb(225,35,8)" fg:x="553" fg:w="26"/><text x="0.7355%" y="1023.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (26 samples, 0.02%)</title><rect x="0.4855%" y="997" width="0.0228%" height="15" fill="rgb(250,213,24)" fg:x="553" fg:w="26"/><text x="0.7355%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (13 samples, 0.01%)</title><rect x="0.4969%" y="981" width="0.0114%" height="15" fill="rgb(247,123,22)" fg:x="566" fg:w="13"/><text x="0.7469%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="0.4969%" y="965" width="0.0114%" height="15" fill="rgb(231,138,38)" fg:x="566" fg:w="13"/><text x="0.7469%" y="975.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="0.4969%" y="949" width="0.0114%" height="15" fill="rgb(231,145,46)" fg:x="566" fg:w="13"/><text x="0.7469%" y="959.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (191 samples, 0.17%)</title><rect x="0.5083%" y="1045" width="0.1677%" height="15" fill="rgb(251,118,11)" fg:x="579" fg:w="191"/><text x="0.7583%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (45 samples, 0.04%)</title><rect x="0.6365%" y="1029" width="0.0395%" height="15" fill="rgb(217,147,25)" fg:x="725" fg:w="45"/><text x="0.8865%" y="1039.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (45 samples, 0.04%)</title><rect x="0.6365%" y="1013" width="0.0395%" height="15" fill="rgb(247,81,37)" fg:x="725" fg:w="45"/><text x="0.8865%" y="1023.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (33 samples, 0.03%)</title><rect x="0.6470%" y="997" width="0.0290%" height="15" fill="rgb(209,12,38)" fg:x="737" fg:w="33"/><text x="0.8970%" y="1007.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (33 samples, 0.03%)</title><rect x="0.6470%" y="981" width="0.0290%" height="15" fill="rgb(227,1,9)" fg:x="737" fg:w="33"/><text x="0.8970%" y="991.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (33 samples, 0.03%)</title><rect x="0.6470%" y="965" width="0.0290%" height="15" fill="rgb(248,47,43)" fg:x="737" fg:w="33"/><text x="0.8970%" y="975.50"></text></g><g><title>alloc::alloc::exchange_malloc (33 samples, 0.03%)</title><rect x="0.6470%" y="949" width="0.0290%" height="15" fill="rgb(221,10,30)" fg:x="737" fg:w="33"/><text x="0.8970%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (33 samples, 0.03%)</title><rect x="0.6470%" y="933" width="0.0290%" height="15" fill="rgb(210,229,1)" fg:x="737" fg:w="33"/><text x="0.8970%" y="943.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (33 samples, 0.03%)</title><rect x="0.6470%" y="917" width="0.0290%" height="15" fill="rgb(222,148,37)" fg:x="737" fg:w="33"/><text x="0.8970%" y="927.50"></text></g><g><title>alloc::alloc::alloc (33 samples, 0.03%)</title><rect x="0.6470%" y="901" width="0.0290%" height="15" fill="rgb(234,67,33)" fg:x="737" fg:w="33"/><text x="0.8970%" y="911.50"></text></g><g><title>__rg_alloc (33 samples, 0.03%)</title><rect x="0.6470%" y="885" width="0.0290%" height="15" fill="rgb(247,98,35)" fg:x="737" fg:w="33"/><text x="0.8970%" y="895.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (33 samples, 0.03%)</title><rect x="0.6470%" y="869" width="0.0290%" height="15" fill="rgb(247,138,52)" fg:x="737" fg:w="33"/><text x="0.8970%" y="879.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (18 samples, 0.02%)</title><rect x="0.6821%" y="1029" width="0.0158%" height="15" fill="rgb(213,79,30)" fg:x="777" fg:w="18"/><text x="0.9321%" y="1039.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::size_hint (18 samples, 0.02%)</title><rect x="0.6821%" y="1013" width="0.0158%" height="15" fill="rgb(246,177,23)" fg:x="777" fg:w="18"/><text x="0.9321%" y="1023.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (18 samples, 0.02%)</title><rect x="0.6821%" y="997" width="0.0158%" height="15" fill="rgb(230,62,27)" fg:x="777" fg:w="18"/><text x="0.9321%" y="1007.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (18 samples, 0.02%)</title><rect x="0.6821%" y="981" width="0.0158%" height="15" fill="rgb(216,154,8)" fg:x="777" fg:w="18"/><text x="0.9321%" y="991.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (28 samples, 0.02%)</title><rect x="0.6760%" y="1045" width="0.0246%" height="15" fill="rgb(244,35,45)" fg:x="770" fg:w="28"/><text x="0.9260%" y="1055.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 0.03%)</title><rect x="0.7120%" y="1045" width="0.0334%" height="15" fill="rgb(251,115,12)" fg:x="811" fg:w="38"/><text x="0.9620%" y="1055.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (74 samples, 0.06%)</title><rect x="0.7454%" y="1045" width="0.0650%" height="15" fill="rgb(240,54,50)" fg:x="849" fg:w="74"/><text x="0.9954%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event),alloc::alloc::Global&gt;&gt; (13 samples, 0.01%)</title><rect x="0.7989%" y="1029" width="0.0114%" height="15" fill="rgb(233,84,52)" fg:x="910" fg:w="13"/><text x="1.0489%" y="1039.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="0.7989%" y="1013" width="0.0114%" height="15" fill="rgb(207,117,47)" fg:x="910" fg:w="13"/><text x="1.0489%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (13 samples, 0.01%)</title><rect x="0.7989%" y="997" width="0.0114%" height="15" fill="rgb(249,43,39)" fg:x="910" fg:w="13"/><text x="1.0489%" y="1007.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="0.7989%" y="981" width="0.0114%" height="15" fill="rgb(209,38,44)" fg:x="910" fg:w="13"/><text x="1.0489%" y="991.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.01%)</title><rect x="0.7989%" y="965" width="0.0114%" height="15" fill="rgb(236,212,23)" fg:x="910" fg:w="13"/><text x="1.0489%" y="975.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.01%)</title><rect x="0.7989%" y="949" width="0.0114%" height="15" fill="rgb(242,79,21)" fg:x="910" fg:w="13"/><text x="1.0489%" y="959.50"></text></g><g><title>__rg_dealloc (13 samples, 0.01%)</title><rect x="0.7989%" y="933" width="0.0114%" height="15" fill="rgb(211,96,35)" fg:x="910" fg:w="13"/><text x="1.0489%" y="943.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (13 samples, 0.01%)</title><rect x="0.7989%" y="917" width="0.0114%" height="15" fill="rgb(253,215,40)" fg:x="910" fg:w="13"/><text x="1.0489%" y="927.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (130 samples, 0.11%)</title><rect x="0.8103%" y="1045" width="0.1141%" height="15" fill="rgb(211,81,21)" fg:x="923" fg:w="130"/><text x="1.0603%" y="1055.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (30 samples, 0.03%)</title><rect x="0.9245%" y="1045" width="0.0263%" height="15" fill="rgb(208,190,38)" fg:x="1053" fg:w="30"/><text x="1.1745%" y="1055.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (27 samples, 0.02%)</title><rect x="0.9508%" y="1045" width="0.0237%" height="15" fill="rgb(235,213,38)" fg:x="1083" fg:w="27"/><text x="1.2008%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (19 samples, 0.02%)</title><rect x="1.1466%" y="1013" width="0.0167%" height="15" fill="rgb(237,122,38)" fg:x="1306" fg:w="19"/><text x="1.3966%" y="1023.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (19 samples, 0.02%)</title><rect x="1.1466%" y="997" width="0.0167%" height="15" fill="rgb(244,218,35)" fg:x="1306" fg:w="19"/><text x="1.3966%" y="1007.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (41 samples, 0.04%)</title><rect x="1.1290%" y="1029" width="0.0360%" height="15" fill="rgb(240,68,47)" fg:x="1286" fg:w="41"/><text x="1.3790%" y="1039.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (20 samples, 0.02%)</title><rect x="1.1650%" y="1029" width="0.0176%" height="15" fill="rgb(210,16,53)" fg:x="1327" fg:w="20"/><text x="1.4150%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (32 samples, 0.03%)</title><rect x="1.1931%" y="997" width="0.0281%" height="15" fill="rgb(235,124,12)" fg:x="1359" fg:w="32"/><text x="1.4431%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (32 samples, 0.03%)</title><rect x="1.1931%" y="981" width="0.0281%" height="15" fill="rgb(224,169,11)" fg:x="1359" fg:w="32"/><text x="1.4431%" y="991.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (32 samples, 0.03%)</title><rect x="1.1931%" y="965" width="0.0281%" height="15" fill="rgb(250,166,2)" fg:x="1359" fg:w="32"/><text x="1.4431%" y="975.50"></text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (43 samples, 0.04%)</title><rect x="1.1931%" y="1029" width="0.0378%" height="15" fill="rgb(242,216,29)" fg:x="1359" fg:w="43"/><text x="1.4431%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (43 samples, 0.04%)</title><rect x="1.1931%" y="1013" width="0.0378%" height="15" fill="rgb(230,116,27)" fg:x="1359" fg:w="43"/><text x="1.4431%" y="1023.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (14 samples, 0.01%)</title><rect x="1.2309%" y="1029" width="0.0123%" height="15" fill="rgb(228,99,48)" fg:x="1402" fg:w="14"/><text x="1.4809%" y="1039.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (14 samples, 0.01%)</title><rect x="1.2431%" y="1029" width="0.0123%" height="15" fill="rgb(253,11,6)" fg:x="1416" fg:w="14"/><text x="1.4931%" y="1039.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (355 samples, 0.31%)</title><rect x="0.9745%" y="1045" width="0.3117%" height="15" fill="rgb(247,143,39)" fg:x="1110" fg:w="355"/><text x="1.2245%" y="1055.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (22 samples, 0.02%)</title><rect x="1.2668%" y="1029" width="0.0193%" height="15" fill="rgb(236,97,10)" fg:x="1443" fg:w="22"/><text x="1.5168%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (17 samples, 0.01%)</title><rect x="1.3151%" y="1029" width="0.0149%" height="15" fill="rgb(233,208,19)" fg:x="1498" fg:w="17"/><text x="1.5651%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (17 samples, 0.01%)</title><rect x="1.3151%" y="1013" width="0.0149%" height="15" fill="rgb(216,164,2)" fg:x="1498" fg:w="17"/><text x="1.5651%" y="1023.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.01%)</title><rect x="1.3151%" y="997" width="0.0149%" height="15" fill="rgb(220,129,5)" fg:x="1498" fg:w="17"/><text x="1.5651%" y="1007.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (17 samples, 0.01%)</title><rect x="1.3151%" y="981" width="0.0149%" height="15" fill="rgb(242,17,10)" fg:x="1498" fg:w="17"/><text x="1.5651%" y="991.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (17 samples, 0.01%)</title><rect x="1.3151%" y="965" width="0.0149%" height="15" fill="rgb(242,107,0)" fg:x="1498" fg:w="17"/><text x="1.5651%" y="975.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (55 samples, 0.05%)</title><rect x="1.2862%" y="1045" width="0.0483%" height="15" fill="rgb(251,28,31)" fg:x="1465" fg:w="55"/><text x="1.5362%" y="1055.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (15 samples, 0.01%)</title><rect x="1.3494%" y="1045" width="0.0132%" height="15" fill="rgb(233,223,10)" fg:x="1537" fg:w="15"/><text x="1.5994%" y="1055.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeSeq&gt;::end (32 samples, 0.03%)</title><rect x="1.3713%" y="1045" width="0.0281%" height="15" fill="rgb(215,21,27)" fg:x="1562" fg:w="32"/><text x="1.6213%" y="1055.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (47 samples, 0.04%)</title><rect x="1.3994%" y="1045" width="0.0413%" height="15" fill="rgb(232,23,21)" fg:x="1594" fg:w="47"/><text x="1.6494%" y="1055.50"></text></g><g><title>&lt;tremor_pipeline::op::grouper::bucket::Grouper as tremor_pipeline::op::Operator&gt;::on_event (51 samples, 0.04%)</title><rect x="1.4407%" y="1045" width="0.0448%" height="15" fill="rgb(244,5,23)" fg:x="1641" fg:w="51"/><text x="1.6907%" y="1055.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (12 samples, 0.01%)</title><rect x="1.4863%" y="1045" width="0.0105%" height="15" fill="rgb(226,81,46)" fg:x="1693" fg:w="12"/><text x="1.7363%" y="1055.50"></text></g><g><title>&lt;tremor_runtime::codec::msgpack::MsgPack as tremor_runtime::codec::Codec&gt;::encode (14 samples, 0.01%)</title><rect x="1.4977%" y="1045" width="0.0123%" height="15" fill="rgb(247,70,30)" fg:x="1706" fg:w="14"/><text x="1.7477%" y="1055.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (70 samples, 0.06%)</title><rect x="1.5127%" y="1045" width="0.0615%" height="15" fill="rgb(212,68,19)" fg:x="1723" fg:w="70"/><text x="1.7627%" y="1055.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (24 samples, 0.02%)</title><rect x="1.5530%" y="1029" width="0.0211%" height="15" fill="rgb(240,187,13)" fg:x="1769" fg:w="24"/><text x="1.8030%" y="1039.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (20 samples, 0.02%)</title><rect x="1.5566%" y="1013" width="0.0176%" height="15" fill="rgb(223,113,26)" fg:x="1773" fg:w="20"/><text x="1.8066%" y="1023.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (28 samples, 0.02%)</title><rect x="1.5741%" y="1045" width="0.0246%" height="15" fill="rgb(206,192,2)" fg:x="1793" fg:w="28"/><text x="1.8241%" y="1055.50"></text></g><g><title>value_trait::Builder::object (26 samples, 0.02%)</title><rect x="1.5759%" y="1029" width="0.0228%" height="15" fill="rgb(241,108,4)" fg:x="1795" fg:w="26"/><text x="1.8259%" y="1039.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (26 samples, 0.02%)</title><rect x="1.5759%" y="1013" width="0.0228%" height="15" fill="rgb(247,173,49)" fg:x="1795" fg:w="26"/><text x="1.8259%" y="1023.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (26 samples, 0.02%)</title><rect x="1.5759%" y="997" width="0.0228%" height="15" fill="rgb(224,114,35)" fg:x="1795" fg:w="26"/><text x="1.8259%" y="1007.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (20 samples, 0.02%)</title><rect x="1.5811%" y="981" width="0.0176%" height="15" fill="rgb(245,159,27)" fg:x="1801" fg:w="20"/><text x="1.8311%" y="991.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (14 samples, 0.01%)</title><rect x="1.5987%" y="1045" width="0.0123%" height="15" fill="rgb(245,172,44)" fg:x="1821" fg:w="14"/><text x="1.8487%" y="1055.50"></text></g><g><title>[libc-2.31.so] (130 samples, 0.11%)</title><rect x="1.6136%" y="1045" width="0.1141%" height="15" fill="rgb(236,23,11)" fg:x="1838" fg:w="130"/><text x="1.8636%" y="1055.50"></text></g><g><title>[tremor-pdk-halfbrown] (37 samples, 0.03%)</title><rect x="1.7278%" y="1045" width="0.0325%" height="15" fill="rgb(205,117,38)" fg:x="1968" fg:w="37"/><text x="1.9778%" y="1055.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (37 samples, 0.03%)</title><rect x="1.7278%" y="1029" width="0.0325%" height="15" fill="rgb(237,72,25)" fg:x="1968" fg:w="37"/><text x="1.9778%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (37 samples, 0.03%)</title><rect x="1.7278%" y="1013" width="0.0325%" height="15" fill="rgb(244,70,9)" fg:x="1968" fg:w="37"/><text x="1.9778%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (37 samples, 0.03%)</title><rect x="1.7278%" y="997" width="0.0325%" height="15" fill="rgb(217,125,39)" fg:x="1968" fg:w="37"/><text x="1.9778%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (37 samples, 0.03%)</title><rect x="1.7278%" y="981" width="0.0325%" height="15" fill="rgb(235,36,10)" fg:x="1968" fg:w="37"/><text x="1.9778%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (37 samples, 0.03%)</title><rect x="1.7278%" y="965" width="0.0325%" height="15" fill="rgb(251,123,47)" fg:x="1968" fg:w="37"/><text x="1.9778%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (37 samples, 0.03%)</title><rect x="1.7278%" y="949" width="0.0325%" height="15" fill="rgb(221,13,13)" fg:x="1968" fg:w="37"/><text x="1.9778%" y="959.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.03%)</title><rect x="1.7278%" y="933" width="0.0325%" height="15" fill="rgb(238,131,9)" fg:x="1968" fg:w="37"/><text x="1.9778%" y="943.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (37 samples, 0.03%)</title><rect x="1.7278%" y="917" width="0.0325%" height="15" fill="rgb(211,50,8)" fg:x="1968" fg:w="37"/><text x="1.9778%" y="927.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::drop (37 samples, 0.03%)</title><rect x="1.7278%" y="901" width="0.0325%" height="15" fill="rgb(245,182,24)" fg:x="1968" fg:w="37"/><text x="1.9778%" y="911.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (37 samples, 0.03%)</title><rect x="1.7278%" y="885" width="0.0325%" height="15" fill="rgb(242,14,37)" fg:x="1968" fg:w="37"/><text x="1.9778%" y="895.50"></text></g><g><title>__GI___pthread_mutex_lock (25 samples, 0.02%)</title><rect x="1.7602%" y="1045" width="0.0219%" height="15" fill="rgb(246,228,12)" fg:x="2005" fg:w="25"/><text x="2.0102%" y="1055.50"></text></g><g><title>__GI___pthread_rwlock_rdlock (19 samples, 0.02%)</title><rect x="1.7927%" y="1045" width="0.0167%" height="15" fill="rgb(213,55,15)" fg:x="2042" fg:w="19"/><text x="2.0427%" y="1055.50"></text></g><g><title>__GI___pthread_rwlock_unlock (12 samples, 0.01%)</title><rect x="1.8094%" y="1045" width="0.0105%" height="15" fill="rgb(209,9,3)" fg:x="2061" fg:w="12"/><text x="2.0594%" y="1055.50"></text></g><g><title>__clock_gettime (23 samples, 0.02%)</title><rect x="1.8199%" y="1045" width="0.0202%" height="15" fill="rgb(230,59,30)" fg:x="2073" fg:w="23"/><text x="2.0699%" y="1055.50"></text></g><g><title>__pthread_cond_signal (13 samples, 0.01%)</title><rect x="1.8419%" y="1045" width="0.0114%" height="15" fill="rgb(209,121,21)" fg:x="2098" fg:w="13"/><text x="2.0919%" y="1055.50"></text></g><g><title>__pthread_cond_wait (19 samples, 0.02%)</title><rect x="1.8533%" y="1045" width="0.0167%" height="15" fill="rgb(220,109,13)" fg:x="2111" fg:w="19"/><text x="2.1033%" y="1055.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (43 samples, 0.04%)</title><rect x="1.8700%" y="1045" width="0.0378%" height="15" fill="rgb(232,18,1)" fg:x="2130" fg:w="43"/><text x="2.1200%" y="1055.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (22 samples, 0.02%)</title><rect x="1.8884%" y="1029" width="0.0193%" height="15" fill="rgb(215,41,42)" fg:x="2151" fg:w="22"/><text x="2.1384%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (22 samples, 0.02%)</title><rect x="1.8884%" y="1013" width="0.0193%" height="15" fill="rgb(224,123,36)" fg:x="2151" fg:w="22"/><text x="2.1384%" y="1023.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (22 samples, 0.02%)</title><rect x="1.8884%" y="997" width="0.0193%" height="15" fill="rgb(240,125,3)" fg:x="2151" fg:w="22"/><text x="2.1384%" y="1007.50"></text></g><g><title>abi_stable::erased_types::iterator::next (95 samples, 0.08%)</title><rect x="1.9077%" y="1045" width="0.0834%" height="15" fill="rgb(205,98,50)" fg:x="2173" fg:w="95"/><text x="2.1577%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (41 samples, 0.04%)</title><rect x="2.0763%" y="1029" width="0.0360%" height="15" fill="rgb(205,185,37)" fg:x="2365" fg:w="41"/><text x="2.3263%" y="1039.50"></text></g><g><title>alloc::alloc::box_free (41 samples, 0.04%)</title><rect x="2.0763%" y="1013" width="0.0360%" height="15" fill="rgb(238,207,15)" fg:x="2365" fg:w="41"/><text x="2.3263%" y="1023.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (41 samples, 0.04%)</title><rect x="2.0763%" y="997" width="0.0360%" height="15" fill="rgb(213,199,42)" fg:x="2365" fg:w="41"/><text x="2.3263%" y="1007.50"></text></g><g><title>alloc::alloc::dealloc (41 samples, 0.04%)</title><rect x="2.0763%" y="981" width="0.0360%" height="15" fill="rgb(235,201,11)" fg:x="2365" fg:w="41"/><text x="2.3263%" y="991.50"></text></g><g><title>__rg_dealloc (41 samples, 0.04%)</title><rect x="2.0763%" y="965" width="0.0360%" height="15" fill="rgb(207,46,11)" fg:x="2365" fg:w="41"/><text x="2.3263%" y="975.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (41 samples, 0.04%)</title><rect x="2.0763%" y="949" width="0.0360%" height="15" fill="rgb(241,35,35)" fg:x="2365" fg:w="41"/><text x="2.3263%" y="959.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (138 samples, 0.12%)</title><rect x="1.9973%" y="1045" width="0.1212%" height="15" fill="rgb(243,32,47)" fg:x="2275" fg:w="138"/><text x="2.2473%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (48 samples, 0.04%)</title><rect x="2.1184%" y="1045" width="0.0421%" height="15" fill="rgb(247,202,23)" fg:x="2413" fg:w="48"/><text x="2.3684%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (64 samples, 0.06%)</title><rect x="2.1606%" y="1045" width="0.0562%" height="15" fill="rgb(219,102,11)" fg:x="2461" fg:w="64"/><text x="2.4106%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (15 samples, 0.01%)</title><rect x="2.2168%" y="1045" width="0.0132%" height="15" fill="rgb(243,110,44)" fg:x="2525" fg:w="15"/><text x="2.4668%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (32 samples, 0.03%)</title><rect x="2.2299%" y="1045" width="0.0281%" height="15" fill="rgb(222,74,54)" fg:x="2540" fg:w="32"/><text x="2.4799%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck (24 samples, 0.02%)</title><rect x="2.2580%" y="1045" width="0.0211%" height="15" fill="rgb(216,99,12)" fg:x="2572" fg:w="24"/><text x="2.5080%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (12 samples, 0.01%)</title><rect x="2.2686%" y="1029" width="0.0105%" height="15" fill="rgb(226,22,26)" fg:x="2584" fg:w="12"/><text x="2.5186%" y="1039.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (104 samples, 0.09%)</title><rect x="2.2791%" y="1045" width="0.0913%" height="15" fill="rgb(217,163,10)" fg:x="2596" fg:w="104"/><text x="2.5291%" y="1055.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write (99 samples, 0.09%)</title><rect x="2.3871%" y="981" width="0.0869%" height="15" fill="rgb(213,25,53)" fg:x="2719" fg:w="99"/><text x="2.6371%" y="991.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash (123 samples, 0.11%)</title><rect x="2.3704%" y="1045" width="0.1080%" height="15" fill="rgb(252,105,26)" fg:x="2700" fg:w="123"/><text x="2.6204%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash::{{closure}} (104 samples, 0.09%)</title><rect x="2.3871%" y="1029" width="0.0913%" height="15" fill="rgb(220,39,43)" fg:x="2719" fg:w="104"/><text x="2.6371%" y="1039.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (104 samples, 0.09%)</title><rect x="2.3871%" y="1013" width="0.0913%" height="15" fill="rgb(229,68,48)" fg:x="2719" fg:w="104"/><text x="2.6371%" y="1023.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (104 samples, 0.09%)</title><rect x="2.3871%" y="997" width="0.0913%" height="15" fill="rgb(252,8,32)" fg:x="2719" fg:w="104"/><text x="2.6371%" y="1007.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (15 samples, 0.01%)</title><rect x="2.4784%" y="1045" width="0.0132%" height="15" fill="rgb(223,20,43)" fg:x="2823" fg:w="15"/><text x="2.7284%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (16 samples, 0.01%)</title><rect x="2.4915%" y="1045" width="0.0140%" height="15" fill="rgb(229,81,49)" fg:x="2838" fg:w="16"/><text x="2.7415%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (74 samples, 0.06%)</title><rect x="2.5056%" y="1045" width="0.0650%" height="15" fill="rgb(236,28,36)" fg:x="2854" fg:w="74"/><text x="2.7556%" y="1055.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut::{{closure}} (28 samples, 0.02%)</title><rect x="2.5460%" y="1029" width="0.0246%" height="15" fill="rgb(249,185,26)" fg:x="2900" fg:w="28"/><text x="2.7960%" y="1039.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (28 samples, 0.02%)</title><rect x="2.5460%" y="1013" width="0.0246%" height="15" fill="rgb(249,174,33)" fg:x="2900" fg:w="28"/><text x="2.7960%" y="1023.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (28 samples, 0.02%)</title><rect x="2.5460%" y="997" width="0.0246%" height="15" fill="rgb(233,201,37)" fg:x="2900" fg:w="28"/><text x="2.7960%" y="1007.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (28 samples, 0.02%)</title><rect x="2.5460%" y="981" width="0.0246%" height="15" fill="rgb(221,78,26)" fg:x="2900" fg:w="28"/><text x="2.7960%" y="991.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (19 samples, 0.02%)</title><rect x="2.5539%" y="965" width="0.0167%" height="15" fill="rgb(250,127,30)" fg:x="2909" fg:w="19"/><text x="2.8039%" y="975.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (16 samples, 0.01%)</title><rect x="2.5714%" y="1045" width="0.0140%" height="15" fill="rgb(230,49,44)" fg:x="2929" fg:w="16"/><text x="2.8214%" y="1055.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (36 samples, 0.03%)</title><rect x="2.6268%" y="981" width="0.0316%" height="15" fill="rgb(229,67,23)" fg:x="2992" fg:w="36"/><text x="2.8768%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (36 samples, 0.03%)</title><rect x="2.6268%" y="965" width="0.0316%" height="15" fill="rgb(249,83,47)" fg:x="2992" fg:w="36"/><text x="2.8768%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (36 samples, 0.03%)</title><rect x="2.6268%" y="949" width="0.0316%" height="15" fill="rgb(215,43,3)" fg:x="2992" fg:w="36"/><text x="2.8768%" y="959.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (36 samples, 0.03%)</title><rect x="2.6268%" y="933" width="0.0316%" height="15" fill="rgb(238,154,13)" fg:x="2992" fg:w="36"/><text x="2.8768%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (38 samples, 0.03%)</title><rect x="2.6268%" y="997" width="0.0334%" height="15" fill="rgb(219,56,2)" fg:x="2992" fg:w="38"/><text x="2.8768%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.02%)</title><rect x="2.6601%" y="981" width="0.0219%" height="15" fill="rgb(233,0,4)" fg:x="3030" fg:w="25"/><text x="2.9101%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (25 samples, 0.02%)</title><rect x="2.6601%" y="965" width="0.0219%" height="15" fill="rgb(235,30,7)" fg:x="3030" fg:w="25"/><text x="2.9101%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (25 samples, 0.02%)</title><rect x="2.6601%" y="949" width="0.0219%" height="15" fill="rgb(250,79,13)" fg:x="3030" fg:w="25"/><text x="2.9101%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (25 samples, 0.02%)</title><rect x="2.6601%" y="933" width="0.0219%" height="15" fill="rgb(211,146,34)" fg:x="3030" fg:w="25"/><text x="2.9101%" y="943.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (25 samples, 0.02%)</title><rect x="2.6601%" y="917" width="0.0219%" height="15" fill="rgb(228,22,38)" fg:x="3030" fg:w="25"/><text x="2.9101%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (36 samples, 0.03%)</title><rect x="2.6601%" y="997" width="0.0316%" height="15" fill="rgb(235,168,5)" fg:x="3030" fg:w="36"/><text x="2.9101%" y="1007.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (164 samples, 0.14%)</title><rect x="2.5855%" y="1045" width="0.1440%" height="15" fill="rgb(221,155,16)" fg:x="2945" fg:w="164"/><text x="2.8355%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (117 samples, 0.10%)</title><rect x="2.6268%" y="1029" width="0.1027%" height="15" fill="rgb(215,215,53)" fg:x="2992" fg:w="117"/><text x="2.8768%" y="1039.50"></text></g><g><title>core::mem::drop (117 samples, 0.10%)</title><rect x="2.6268%" y="1013" width="0.1027%" height="15" fill="rgb(223,4,10)" fg:x="2992" fg:w="117"/><text x="2.8768%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;tremor_value::value::Value&gt;&gt; (43 samples, 0.04%)</title><rect x="2.6917%" y="997" width="0.0378%" height="15" fill="rgb(234,103,6)" fg:x="3066" fg:w="43"/><text x="2.9417%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (43 samples, 0.04%)</title><rect x="2.6917%" y="981" width="0.0378%" height="15" fill="rgb(227,97,0)" fg:x="3066" fg:w="43"/><text x="2.9417%" y="991.50"></text></g><g><title>async_executor::Ticker::sleep (40 samples, 0.04%)</title><rect x="2.7655%" y="1045" width="0.0351%" height="15" fill="rgb(234,150,53)" fg:x="3150" fg:w="40"/><text x="3.0155%" y="1055.50"></text></g><g><title>async_executor::steal (252 samples, 0.22%)</title><rect x="2.8041%" y="1045" width="0.2212%" height="15" fill="rgb(228,201,54)" fg:x="3194" fg:w="252"/><text x="3.0541%" y="1055.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (18 samples, 0.02%)</title><rect x="3.0306%" y="1045" width="0.0158%" height="15" fill="rgb(222,22,37)" fg:x="3452" fg:w="18"/><text x="3.2806%" y="1055.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (228 samples, 0.20%)</title><rect x="3.0666%" y="1045" width="0.2002%" height="15" fill="rgb(237,53,32)" fg:x="3493" fg:w="228"/><text x="3.3166%" y="1055.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (17 samples, 0.01%)</title><rect x="3.2668%" y="1045" width="0.0149%" height="15" fill="rgb(233,25,53)" fg:x="3721" fg:w="17"/><text x="3.5168%" y="1055.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (38 samples, 0.03%)</title><rect x="3.2817%" y="1045" width="0.0334%" height="15" fill="rgb(210,40,34)" fg:x="3738" fg:w="38"/><text x="3.5317%" y="1055.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (13 samples, 0.01%)</title><rect x="3.3168%" y="1045" width="0.0114%" height="15" fill="rgb(241,220,44)" fg:x="3778" fg:w="13"/><text x="3.5668%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (65 samples, 0.06%)</title><rect x="3.3282%" y="1045" width="0.0571%" height="15" fill="rgb(235,28,35)" fg:x="3791" fg:w="65"/><text x="3.5782%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tremor_value::value::Value]&gt; (43 samples, 0.04%)</title><rect x="3.3853%" y="1045" width="0.0378%" height="15" fill="rgb(210,56,17)" fg:x="3856" fg:w="43"/><text x="3.6353%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}}&gt;&gt; (13 samples, 0.01%)</title><rect x="3.4292%" y="1045" width="0.0114%" height="15" fill="rgb(224,130,29)" fg:x="3906" fg:w="13"/><text x="3.6792%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt;&gt; (15 samples, 0.01%)</title><rect x="3.4573%" y="1045" width="0.0132%" height="15" fill="rgb(235,212,8)" fg:x="3938" fg:w="15"/><text x="3.7073%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::send_events::{{closure}}&gt;&gt; (16 samples, 0.01%)</title><rect x="3.4704%" y="1045" width="0.0140%" height="15" fill="rgb(223,33,50)" fg:x="3953" fg:w="16"/><text x="3.7204%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (44 samples, 0.04%)</title><rect x="3.4950%" y="1045" width="0.0386%" height="15" fill="rgb(219,149,13)" fg:x="3981" fg:w="44"/><text x="3.7450%" y="1055.50"></text></g><g><title>core::str::converts::from_utf8 (20 samples, 0.02%)</title><rect x="3.5433%" y="1045" width="0.0176%" height="15" fill="rgb(250,156,29)" fg:x="4036" fg:w="20"/><text x="3.7933%" y="1055.50"></text></g><g><title>event_listener::Event::notify (45 samples, 0.04%)</title><rect x="3.5714%" y="1045" width="0.0395%" height="15" fill="rgb(216,193,19)" fg:x="4068" fg:w="45"/><text x="3.8214%" y="1055.50"></text></g><g><title>event_listener::full_fence (27 samples, 0.02%)</title><rect x="3.5872%" y="1029" width="0.0237%" height="15" fill="rgb(216,135,14)" fg:x="4086" fg:w="27"/><text x="3.8372%" y="1039.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (14 samples, 0.01%)</title><rect x="3.6170%" y="1045" width="0.0123%" height="15" fill="rgb(241,47,5)" fg:x="4120" fg:w="14"/><text x="3.8670%" y="1055.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (23 samples, 0.02%)</title><rect x="3.6293%" y="1045" width="0.0202%" height="15" fill="rgb(233,42,35)" fg:x="4134" fg:w="23"/><text x="3.8793%" y="1055.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (65 samples, 0.06%)</title><rect x="3.6495%" y="1045" width="0.0571%" height="15" fill="rgb(231,13,6)" fg:x="4157" fg:w="65"/><text x="3.8995%" y="1055.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert_hashed_nocheck (26 samples, 0.02%)</title><rect x="3.7066%" y="1045" width="0.0228%" height="15" fill="rgb(207,181,40)" fg:x="4222" fg:w="26"/><text x="3.9566%" y="1055.50"></text></g><g><title>hashbrown::raw::inner::RawIter&lt;T&gt;::drop_elements (13 samples, 0.01%)</title><rect x="3.7294%" y="1045" width="0.0114%" height="15" fill="rgb(254,173,49)" fg:x="4248" fg:w="13"/><text x="3.9794%" y="1055.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (257 samples, 0.23%)</title><rect x="3.7408%" y="1045" width="0.2256%" height="15" fill="rgb(221,1,38)" fg:x="4261" fg:w="257"/><text x="3.9908%" y="1055.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (28 samples, 0.02%)</title><rect x="4.0200%" y="1029" width="0.0246%" height="15" fill="rgb(206,124,46)" fg:x="4579" fg:w="28"/><text x="4.2700%" y="1039.50"></text></g><g><title>core::intrinsics::write_bytes (28 samples, 0.02%)</title><rect x="4.0200%" y="1013" width="0.0246%" height="15" fill="rgb(249,21,11)" fg:x="4579" fg:w="28"/><text x="4.2700%" y="1023.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (20 samples, 0.02%)</title><rect x="4.0270%" y="997" width="0.0176%" height="15" fill="rgb(222,201,40)" fg:x="4587" fg:w="20"/><text x="4.2770%" y="1007.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (98 samples, 0.09%)</title><rect x="3.9665%" y="1045" width="0.0860%" height="15" fill="rgb(235,61,29)" fg:x="4518" fg:w="98"/><text x="4.2165%" y="1055.50"></text></g><g><title>parking::Unparker::unpark (17 samples, 0.01%)</title><rect x="4.0551%" y="1045" width="0.0149%" height="15" fill="rgb(219,207,3)" fg:x="4619" fg:w="17"/><text x="4.3051%" y="1055.50"></text></g><g><title>rmp::encode::str::write_str (64 samples, 0.06%)</title><rect x="4.0744%" y="1045" width="0.0562%" height="15" fill="rgb(222,56,46)" fg:x="4641" fg:w="64"/><text x="4.3244%" y="1055.50"></text></g><g><title>rmp::encode::uint::write_uint (69 samples, 0.06%)</title><rect x="4.1306%" y="1045" width="0.0606%" height="15" fill="rgb(239,76,54)" fg:x="4705" fg:w="69"/><text x="4.3806%" y="1055.50"></text></g><g><title>rmp::encode::write_marker (100 samples, 0.09%)</title><rect x="4.2000%" y="1045" width="0.0878%" height="15" fill="rgb(231,124,27)" fg:x="4784" fg:w="100"/><text x="4.4500%" y="1055.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (146 samples, 0.13%)</title><rect x="4.2878%" y="1045" width="0.1282%" height="15" fill="rgb(249,195,6)" fg:x="4884" fg:w="146"/><text x="4.5378%" y="1055.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeMap&gt;::serialize_value (50 samples, 0.04%)</title><rect x="4.3721%" y="1029" width="0.0439%" height="15" fill="rgb(237,174,47)" fg:x="4980" fg:w="50"/><text x="4.6221%" y="1039.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeSeq&gt;::serialize_element (50 samples, 0.04%)</title><rect x="4.3721%" y="1013" width="0.0439%" height="15" fill="rgb(206,201,31)" fg:x="4980" fg:w="50"/><text x="4.6221%" y="1023.50"></text></g><g><title>sn_rust_alloc (72 samples, 0.06%)</title><rect x="4.4160%" y="1045" width="0.0632%" height="15" fill="rgb(231,57,52)" fg:x="5030" fg:w="72"/><text x="4.6660%" y="1055.50"></text></g><g><title>sn_rust_dealloc (14 samples, 0.01%)</title><rect x="4.4792%" y="1045" width="0.0123%" height="15" fill="rgb(248,177,22)" fg:x="5102" fg:w="14"/><text x="4.7292%" y="1055.50"></text></g><g><title>sn_rust_realloc (13 samples, 0.01%)</title><rect x="4.4915%" y="1045" width="0.0114%" height="15" fill="rgb(215,211,37)" fg:x="5116" fg:w="13"/><text x="4.7415%" y="1055.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (18 samples, 0.02%)</title><rect x="4.5169%" y="1045" width="0.0158%" height="15" fill="rgb(241,128,51)" fg:x="5145" fg:w="18"/><text x="4.7669%" y="1055.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (20 samples, 0.02%)</title><rect x="4.5327%" y="1045" width="0.0176%" height="15" fill="rgb(227,165,31)" fg:x="5163" fg:w="20"/><text x="4.7827%" y="1055.50"></text></g><g><title>tremor_common::time::nanotime (23 samples, 0.02%)</title><rect x="4.5503%" y="1045" width="0.0202%" height="15" fill="rgb(228,167,24)" fg:x="5183" fg:w="23"/><text x="4.8003%" y="1055.50"></text></g><g><title>std::time::SystemTime::now (23 samples, 0.02%)</title><rect x="4.5503%" y="1029" width="0.0202%" height="15" fill="rgb(228,143,12)" fg:x="5183" fg:w="23"/><text x="4.8003%" y="1039.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (23 samples, 0.02%)</title><rect x="4.5503%" y="1013" width="0.0202%" height="15" fill="rgb(249,149,8)" fg:x="5183" fg:w="23"/><text x="4.8003%" y="1023.50"></text></g><g><title>std::sys::unix::time::inner::now (23 samples, 0.02%)</title><rect x="4.5503%" y="997" width="0.0202%" height="15" fill="rgb(243,35,44)" fg:x="5183" fg:w="23"/><text x="4.8003%" y="1007.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_input (19 samples, 0.02%)</title><rect x="4.5705%" y="1045" width="0.0167%" height="15" fill="rgb(246,89,9)" fg:x="5206" fg:w="19"/><text x="4.8205%" y="1055.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (31 samples, 0.03%)</title><rect x="4.5933%" y="1045" width="0.0272%" height="15" fill="rgb(233,213,13)" fg:x="5232" fg:w="31"/><text x="4.8433%" y="1055.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event (12 samples, 0.01%)</title><rect x="4.6100%" y="1029" width="0.0105%" height="15" fill="rgb(233,141,41)" fg:x="5251" fg:w="12"/><text x="4.8600%" y="1039.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (12 samples, 0.01%)</title><rect x="4.6100%" y="1013" width="0.0105%" height="15" fill="rgb(239,167,4)" fg:x="5251" fg:w="12"/><text x="4.8600%" y="1023.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (12 samples, 0.01%)</title><rect x="4.6100%" y="997" width="0.0105%" height="15" fill="rgb(209,217,16)" fg:x="5251" fg:w="12"/><text x="4.8600%" y="1007.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (12 samples, 0.01%)</title><rect x="4.6100%" y="981" width="0.0105%" height="15" fill="rgb(219,88,35)" fg:x="5251" fg:w="12"/><text x="4.8600%" y="991.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::pull_data (15 samples, 0.01%)</title><rect x="4.6205%" y="1045" width="0.0132%" height="15" fill="rgb(220,193,23)" fg:x="5263" fg:w="15"/><text x="4.8705%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (14 samples, 0.01%)</title><rect x="4.6793%" y="981" width="0.0123%" height="15" fill="rgb(230,90,52)" fg:x="5330" fg:w="14"/><text x="4.9293%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (14 samples, 0.01%)</title><rect x="4.6793%" y="965" width="0.0123%" height="15" fill="rgb(252,106,19)" fg:x="5330" fg:w="14"/><text x="4.9293%" y="975.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (14 samples, 0.01%)</title><rect x="4.6793%" y="949" width="0.0123%" height="15" fill="rgb(206,74,20)" fg:x="5330" fg:w="14"/><text x="4.9293%" y="959.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (70 samples, 0.06%)</title><rect x="4.6337%" y="1045" width="0.0615%" height="15" fill="rgb(230,138,44)" fg:x="5278" fg:w="70"/><text x="4.8837%" y="1055.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (43 samples, 0.04%)</title><rect x="4.6574%" y="1029" width="0.0378%" height="15" fill="rgb(235,182,43)" fg:x="5305" fg:w="43"/><text x="4.9074%" y="1039.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (39 samples, 0.03%)</title><rect x="4.6609%" y="1013" width="0.0342%" height="15" fill="rgb(242,16,51)" fg:x="5309" fg:w="39"/><text x="4.9109%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (18 samples, 0.02%)</title><rect x="4.6793%" y="997" width="0.0158%" height="15" fill="rgb(248,9,4)" fg:x="5330" fg:w="18"/><text x="4.9293%" y="1007.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (31 samples, 0.03%)</title><rect x="4.7022%" y="1045" width="0.0272%" height="15" fill="rgb(210,31,22)" fg:x="5356" fg:w="31"/><text x="4.9522%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (25 samples, 0.02%)</title><rect x="4.7970%" y="1029" width="0.0219%" height="15" fill="rgb(239,54,39)" fg:x="5464" fg:w="25"/><text x="5.0470%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (25 samples, 0.02%)</title><rect x="4.7970%" y="1013" width="0.0219%" height="15" fill="rgb(230,99,41)" fg:x="5464" fg:w="25"/><text x="5.0470%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (25 samples, 0.02%)</title><rect x="4.7970%" y="997" width="0.0219%" height="15" fill="rgb(253,106,12)" fg:x="5464" fg:w="25"/><text x="5.0470%" y="1007.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (25 samples, 0.02%)</title><rect x="4.7970%" y="981" width="0.0219%" height="15" fill="rgb(213,46,41)" fg:x="5464" fg:w="25"/><text x="5.0470%" y="991.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (86 samples, 0.08%)</title><rect x="4.7627%" y="1045" width="0.0755%" height="15" fill="rgb(215,133,35)" fg:x="5425" fg:w="86"/><text x="5.0127%" y="1055.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (22 samples, 0.02%)</title><rect x="4.8189%" y="1029" width="0.0193%" height="15" fill="rgb(213,28,5)" fg:x="5489" fg:w="22"/><text x="5.0689%" y="1039.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (22 samples, 0.02%)</title><rect x="4.8189%" y="1013" width="0.0193%" height="15" fill="rgb(215,77,49)" fg:x="5489" fg:w="22"/><text x="5.0689%" y="1023.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (67 samples, 0.06%)</title><rect x="4.8382%" y="1045" width="0.0588%" height="15" fill="rgb(248,100,22)" fg:x="5511" fg:w="67"/><text x="5.0882%" y="1055.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (16 samples, 0.01%)</title><rect x="4.8971%" y="1045" width="0.0140%" height="15" fill="rgb(208,67,9)" fg:x="5578" fg:w="16"/><text x="5.1471%" y="1055.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (144 samples, 0.13%)</title><rect x="4.9111%" y="1045" width="0.1264%" height="15" fill="rgb(219,133,21)" fg:x="5594" fg:w="144"/><text x="5.1611%" y="1055.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (102 samples, 0.09%)</title><rect x="5.0375%" y="1045" width="0.0895%" height="15" fill="rgb(246,46,29)" fg:x="5738" fg:w="102"/><text x="5.2875%" y="1055.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::invoke2 (17 samples, 0.01%)</title><rect x="5.1271%" y="1045" width="0.0149%" height="15" fill="rgb(246,185,52)" fg:x="5840" fg:w="17"/><text x="5.3771%" y="1055.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (141 samples, 0.12%)</title><rect x="5.1420%" y="1045" width="0.1238%" height="15" fill="rgb(252,136,11)" fg:x="5857" fg:w="141"/><text x="5.3920%" y="1055.50"></text></g><g><title>tremor_script::interpreter::resolve (60 samples, 0.05%)</title><rect x="5.2658%" y="1045" width="0.0527%" height="15" fill="rgb(219,138,53)" fg:x="5998" fg:w="60"/><text x="5.5158%" y="1055.50"></text></g><g><title>tremor_script::interpreter::resolve_value (28 samples, 0.02%)</title><rect x="5.3185%" y="1045" width="0.0246%" height="15" fill="rgb(211,51,23)" fg:x="6058" fg:w="28"/><text x="5.5685%" y="1055.50"></text></g><g><title>tremor_script::interpreter::test_guard (34 samples, 0.03%)</title><rect x="5.3430%" y="1045" width="0.0298%" height="15" fill="rgb(247,221,28)" fg:x="6086" fg:w="34"/><text x="5.5930%" y="1055.50"></text></g><g><title>tremor_script::interpreter::test_predicate_expr (138 samples, 0.12%)</title><rect x="5.3729%" y="1045" width="0.1212%" height="15" fill="rgb(251,222,45)" fg:x="6120" fg:w="138"/><text x="5.6229%" y="1055.50"></text></g><g><title>tremor_script::interpreter::val_eq (48 samples, 0.04%)</title><rect x="5.4941%" y="1045" width="0.0421%" height="15" fill="rgb(217,162,53)" fg:x="6258" fg:w="48"/><text x="5.7441%" y="1055.50"></text></g><g><title>tremor_script::srs::EventPayload::try_new (13 samples, 0.01%)</title><rect x="5.5441%" y="1045" width="0.0114%" height="15" fill="rgb(229,93,14)" fg:x="6315" fg:w="13"/><text x="5.7941%" y="1055.50"></text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (272 samples, 0.24%)</title><rect x="5.5555%" y="1045" width="0.2388%" height="15" fill="rgb(209,67,49)" fg:x="6328" fg:w="272"/><text x="5.8055%" y="1055.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_bool (49 samples, 0.04%)</title><rect x="5.7513%" y="1029" width="0.0430%" height="15" fill="rgb(213,87,29)" fg:x="6551" fg:w="49"/><text x="6.0013%" y="1039.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (49 samples, 0.04%)</title><rect x="5.7513%" y="1013" width="0.0430%" height="15" fill="rgb(205,151,52)" fg:x="6551" fg:w="49"/><text x="6.0013%" y="1023.50"></text></g><g><title>rmp::encode::write_marker (49 samples, 0.04%)</title><rect x="5.7513%" y="997" width="0.0430%" height="15" fill="rgb(253,215,39)" fg:x="6551" fg:w="49"/><text x="6.0013%" y="1007.50"></text></g><g><title>[anon] (6,494 samples, 5.70%)</title><rect x="0.1080%" y="1061" width="5.7012%" height="15" fill="rgb(221,220,41)" fg:x="123" fg:w="6494"/><text x="0.3580%" y="1071.50">[anon]</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (36 samples, 0.03%)</title><rect x="5.8408%" y="1045" width="0.0316%" height="15" fill="rgb(218,133,21)" fg:x="6653" fg:w="36"/><text x="6.0908%" y="1055.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (21 samples, 0.02%)</title><rect x="5.8540%" y="1029" width="0.0184%" height="15" fill="rgb(221,193,43)" fg:x="6668" fg:w="21"/><text x="6.1040%" y="1039.50"></text></g><g><title>[libc-2.31.so] (129 samples, 0.11%)</title><rect x="5.8092%" y="1061" width="0.1133%" height="15" fill="rgb(240,128,52)" fg:x="6617" fg:w="129"/><text x="6.0592%" y="1071.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_output (23 samples, 0.02%)</title><rect x="5.9023%" y="1045" width="0.0202%" height="15" fill="rgb(253,114,12)" fg:x="6723" fg:w="23"/><text x="6.1523%" y="1055.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (16 samples, 0.01%)</title><rect x="5.9277%" y="1045" width="0.0140%" height="15" fill="rgb(215,223,47)" fg:x="6752" fg:w="16"/><text x="6.1777%" y="1055.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (43 samples, 0.04%)</title><rect x="5.9515%" y="1045" width="0.0378%" height="15" fill="rgb(248,225,23)" fg:x="6779" fg:w="43"/><text x="6.2015%" y="1055.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (31 samples, 0.03%)</title><rect x="6.0059%" y="1045" width="0.0272%" height="15" fill="rgb(250,108,0)" fg:x="6841" fg:w="31"/><text x="6.2559%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (19 samples, 0.02%)</title><rect x="6.0331%" y="1045" width="0.0167%" height="15" fill="rgb(228,208,7)" fg:x="6872" fg:w="19"/><text x="6.2831%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (13 samples, 0.01%)</title><rect x="6.0515%" y="1045" width="0.0114%" height="15" fill="rgb(244,45,10)" fg:x="6893" fg:w="13"/><text x="6.3015%" y="1055.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (35 samples, 0.03%)</title><rect x="6.0902%" y="1045" width="0.0307%" height="15" fill="rgb(207,125,25)" fg:x="6937" fg:w="35"/><text x="6.3402%" y="1055.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (17 samples, 0.01%)</title><rect x="6.1209%" y="1045" width="0.0149%" height="15" fill="rgb(210,195,18)" fg:x="6972" fg:w="17"/><text x="6.3709%" y="1055.50"></text></g><g><title>tremor_script::ast::Script::run (24 samples, 0.02%)</title><rect x="6.1534%" y="1045" width="0.0211%" height="15" fill="rgb(249,80,12)" fg:x="7009" fg:w="24"/><text x="6.4034%" y="1055.50"></text></g><g><title>[tremor-pdk-halfbrown] (317 samples, 0.28%)</title><rect x="5.9225%" y="1061" width="0.2783%" height="15" fill="rgb(221,65,9)" fg:x="6746" fg:w="317"/><text x="6.1725%" y="1071.50"></text></g><g><title>window::TimeWindow::add_t (19 samples, 0.02%)</title><rect x="6.1841%" y="1045" width="0.0167%" height="15" fill="rgb(235,49,36)" fg:x="7044" fg:w="19"/><text x="6.4341%" y="1055.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (178 samples, 0.16%)</title><rect x="6.2008%" y="1045" width="0.1563%" height="15" fill="rgb(225,32,20)" fg:x="7063" fg:w="178"/><text x="6.4508%" y="1055.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::read_str_data (20 samples, 0.02%)</title><rect x="6.3395%" y="1029" width="0.0176%" height="15" fill="rgb(215,141,46)" fg:x="7221" fg:w="20"/><text x="6.5895%" y="1039.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (17 samples, 0.01%)</title><rect x="6.3571%" y="1045" width="0.0149%" height="15" fill="rgb(250,160,47)" fg:x="7241" fg:w="17"/><text x="6.6071%" y="1055.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (39 samples, 0.03%)</title><rect x="6.3720%" y="1045" width="0.0342%" height="15" fill="rgb(216,222,40)" fg:x="7258" fg:w="39"/><text x="6.6220%" y="1055.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (23 samples, 0.02%)</title><rect x="6.4141%" y="1045" width="0.0202%" height="15" fill="rgb(234,217,39)" fg:x="7306" fg:w="23"/><text x="6.6641%" y="1055.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (23 samples, 0.02%)</title><rect x="6.4536%" y="1029" width="0.0202%" height="15" fill="rgb(207,178,40)" fg:x="7351" fg:w="23"/><text x="6.7036%" y="1039.50"></text></g><g><title>async_task::runnable::Runnable::run (23 samples, 0.02%)</title><rect x="6.4536%" y="1013" width="0.0202%" height="15" fill="rgb(221,136,13)" fg:x="7351" fg:w="23"/><text x="6.7036%" y="1023.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (23 samples, 0.02%)</title><rect x="6.4536%" y="997" width="0.0202%" height="15" fill="rgb(249,199,10)" fg:x="7351" fg:w="23"/><text x="6.7036%" y="1007.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (23 samples, 0.02%)</title><rect x="6.4536%" y="981" width="0.0202%" height="15" fill="rgb(249,222,13)" fg:x="7351" fg:w="23"/><text x="6.7036%" y="991.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (23 samples, 0.02%)</title><rect x="6.4536%" y="965" width="0.0202%" height="15" fill="rgb(244,185,38)" fg:x="7351" fg:w="23"/><text x="6.7036%" y="975.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (23 samples, 0.02%)</title><rect x="6.4536%" y="949" width="0.0202%" height="15" fill="rgb(236,202,9)" fg:x="7351" fg:w="23"/><text x="6.7036%" y="959.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (23 samples, 0.02%)</title><rect x="6.4536%" y="933" width="0.0202%" height="15" fill="rgb(250,229,37)" fg:x="7351" fg:w="23"/><text x="6.7036%" y="943.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (23 samples, 0.02%)</title><rect x="6.4536%" y="917" width="0.0202%" height="15" fill="rgb(206,174,23)" fg:x="7351" fg:w="23"/><text x="6.7036%" y="927.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (23 samples, 0.02%)</title><rect x="6.4536%" y="901" width="0.0202%" height="15" fill="rgb(211,33,43)" fg:x="7351" fg:w="23"/><text x="6.7036%" y="911.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (23 samples, 0.02%)</title><rect x="6.4536%" y="885" width="0.0202%" height="15" fill="rgb(245,58,50)" fg:x="7351" fg:w="23"/><text x="6.7036%" y="895.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (23 samples, 0.02%)</title><rect x="6.4536%" y="869" width="0.0202%" height="15" fill="rgb(244,68,36)" fg:x="7351" fg:w="23"/><text x="6.7036%" y="879.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (23 samples, 0.02%)</title><rect x="6.4536%" y="853" width="0.0202%" height="15" fill="rgb(232,229,15)" fg:x="7351" fg:w="23"/><text x="6.7036%" y="863.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (23 samples, 0.02%)</title><rect x="6.4536%" y="837" width="0.0202%" height="15" fill="rgb(254,30,23)" fg:x="7351" fg:w="23"/><text x="6.7036%" y="847.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (23 samples, 0.02%)</title><rect x="6.4536%" y="821" width="0.0202%" height="15" fill="rgb(235,160,14)" fg:x="7351" fg:w="23"/><text x="6.7036%" y="831.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (23 samples, 0.02%)</title><rect x="6.4536%" y="805" width="0.0202%" height="15" fill="rgb(212,155,44)" fg:x="7351" fg:w="23"/><text x="6.7036%" y="815.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (23 samples, 0.02%)</title><rect x="6.4536%" y="789" width="0.0202%" height="15" fill="rgb(226,2,50)" fg:x="7351" fg:w="23"/><text x="6.7036%" y="799.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (23 samples, 0.02%)</title><rect x="6.4536%" y="773" width="0.0202%" height="15" fill="rgb(234,177,6)" fg:x="7351" fg:w="23"/><text x="6.7036%" y="783.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (23 samples, 0.02%)</title><rect x="6.4536%" y="757" width="0.0202%" height="15" fill="rgb(217,24,9)" fg:x="7351" fg:w="23"/><text x="6.7036%" y="767.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (23 samples, 0.02%)</title><rect x="6.4536%" y="741" width="0.0202%" height="15" fill="rgb(220,13,46)" fg:x="7351" fg:w="23"/><text x="6.7036%" y="751.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (23 samples, 0.02%)</title><rect x="6.4536%" y="725" width="0.0202%" height="15" fill="rgb(239,221,27)" fg:x="7351" fg:w="23"/><text x="6.7036%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (23 samples, 0.02%)</title><rect x="6.4536%" y="709" width="0.0202%" height="15" fill="rgb(222,198,25)" fg:x="7351" fg:w="23"/><text x="6.7036%" y="719.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="6.4536%" y="693" width="0.0202%" height="15" fill="rgb(211,99,13)" fg:x="7351" fg:w="23"/><text x="6.7036%" y="703.50"></text></g><g><title>[libc-2.31.so] (277 samples, 0.24%)</title><rect x="6.5414%" y="821" width="0.2432%" height="15" fill="rgb(232,111,31)" fg:x="7451" fg:w="277"/><text x="6.7914%" y="831.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (302 samples, 0.27%)</title><rect x="6.5230%" y="837" width="0.2651%" height="15" fill="rgb(245,82,37)" fg:x="7430" fg:w="302"/><text x="6.7730%" y="847.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (481 samples, 0.42%)</title><rect x="6.4861%" y="853" width="0.4223%" height="15" fill="rgb(227,149,46)" fg:x="7388" fg:w="481"/><text x="6.7361%" y="863.50"></text></g><g><title>[libc-2.31.so] (137 samples, 0.12%)</title><rect x="6.7881%" y="837" width="0.1203%" height="15" fill="rgb(218,36,50)" fg:x="7732" fg:w="137"/><text x="7.0381%" y="847.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (498 samples, 0.44%)</title><rect x="6.4791%" y="885" width="0.4372%" height="15" fill="rgb(226,80,48)" fg:x="7380" fg:w="498"/><text x="6.7291%" y="895.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (498 samples, 0.44%)</title><rect x="6.4791%" y="869" width="0.4372%" height="15" fill="rgb(238,224,15)" fg:x="7380" fg:w="498"/><text x="6.7291%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (20 samples, 0.02%)</title><rect x="7.0805%" y="533" width="0.0176%" height="15" fill="rgb(241,136,10)" fg:x="8065" fg:w="20"/><text x="7.3305%" y="543.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (20 samples, 0.02%)</title><rect x="7.0805%" y="517" width="0.0176%" height="15" fill="rgb(208,32,45)" fg:x="8065" fg:w="20"/><text x="7.3305%" y="527.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (20 samples, 0.02%)</title><rect x="7.0805%" y="501" width="0.0176%" height="15" fill="rgb(207,135,9)" fg:x="8065" fg:w="20"/><text x="7.3305%" y="511.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (727 samples, 0.64%)</title><rect x="6.4791%" y="901" width="0.6383%" height="15" fill="rgb(206,86,44)" fg:x="7380" fg:w="727"/><text x="6.7291%" y="911.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (229 samples, 0.20%)</title><rect x="6.9163%" y="885" width="0.2010%" height="15" fill="rgb(245,177,15)" fg:x="7878" fg:w="229"/><text x="7.1663%" y="895.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (229 samples, 0.20%)</title><rect x="6.9163%" y="869" width="0.2010%" height="15" fill="rgb(206,64,50)" fg:x="7878" fg:w="229"/><text x="7.1663%" y="879.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (229 samples, 0.20%)</title><rect x="6.9163%" y="853" width="0.2010%" height="15" fill="rgb(234,36,40)" fg:x="7878" fg:w="229"/><text x="7.1663%" y="863.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (229 samples, 0.20%)</title><rect x="6.9163%" y="837" width="0.2010%" height="15" fill="rgb(213,64,8)" fg:x="7878" fg:w="229"/><text x="7.1663%" y="847.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (229 samples, 0.20%)</title><rect x="6.9163%" y="821" width="0.2010%" height="15" fill="rgb(210,75,36)" fg:x="7878" fg:w="229"/><text x="7.1663%" y="831.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (229 samples, 0.20%)</title><rect x="6.9163%" y="805" width="0.2010%" height="15" fill="rgb(229,88,21)" fg:x="7878" fg:w="229"/><text x="7.1663%" y="815.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (229 samples, 0.20%)</title><rect x="6.9163%" y="789" width="0.2010%" height="15" fill="rgb(252,204,47)" fg:x="7878" fg:w="229"/><text x="7.1663%" y="799.50"></text></g><g><title>std::panic::catch_unwind (229 samples, 0.20%)</title><rect x="6.9163%" y="773" width="0.2010%" height="15" fill="rgb(208,77,27)" fg:x="7878" fg:w="229"/><text x="7.1663%" y="783.50"></text></g><g><title>std::panicking::try (229 samples, 0.20%)</title><rect x="6.9163%" y="757" width="0.2010%" height="15" fill="rgb(221,76,26)" fg:x="7878" fg:w="229"/><text x="7.1663%" y="767.50"></text></g><g><title>std::panicking::try::do_call (229 samples, 0.20%)</title><rect x="6.9163%" y="741" width="0.2010%" height="15" fill="rgb(225,139,18)" fg:x="7878" fg:w="229"/><text x="7.1663%" y="751.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (229 samples, 0.20%)</title><rect x="6.9163%" y="725" width="0.2010%" height="15" fill="rgb(230,137,11)" fg:x="7878" fg:w="229"/><text x="7.1663%" y="735.50"></text></g><g><title>core::ops::function::FnOnce::call_once (229 samples, 0.20%)</title><rect x="6.9163%" y="709" width="0.2010%" height="15" fill="rgb(212,28,1)" fg:x="7878" fg:w="229"/><text x="7.1663%" y="719.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (229 samples, 0.20%)</title><rect x="6.9163%" y="693" width="0.2010%" height="15" fill="rgb(248,164,17)" fg:x="7878" fg:w="229"/><text x="7.1663%" y="703.50"></text></g><g><title>async_ffi::FfiContext::with_context (229 samples, 0.20%)</title><rect x="6.9163%" y="677" width="0.2010%" height="15" fill="rgb(222,171,42)" fg:x="7878" fg:w="229"/><text x="7.1663%" y="687.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (229 samples, 0.20%)</title><rect x="6.9163%" y="661" width="0.2010%" height="15" fill="rgb(243,84,45)" fg:x="7878" fg:w="229"/><text x="7.1663%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (229 samples, 0.20%)</title><rect x="6.9163%" y="645" width="0.2010%" height="15" fill="rgb(252,49,23)" fg:x="7878" fg:w="229"/><text x="7.1663%" y="655.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (229 samples, 0.20%)</title><rect x="6.9163%" y="629" width="0.2010%" height="15" fill="rgb(215,19,7)" fg:x="7878" fg:w="229"/><text x="7.1663%" y="639.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (229 samples, 0.20%)</title><rect x="6.9163%" y="613" width="0.2010%" height="15" fill="rgb(238,81,41)" fg:x="7878" fg:w="229"/><text x="7.1663%" y="623.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (229 samples, 0.20%)</title><rect x="6.9163%" y="597" width="0.2010%" height="15" fill="rgb(210,199,37)" fg:x="7878" fg:w="229"/><text x="7.1663%" y="607.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (229 samples, 0.20%)</title><rect x="6.9163%" y="581" width="0.2010%" height="15" fill="rgb(244,192,49)" fg:x="7878" fg:w="229"/><text x="7.1663%" y="591.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (229 samples, 0.20%)</title><rect x="6.9163%" y="565" width="0.2010%" height="15" fill="rgb(226,211,11)" fg:x="7878" fg:w="229"/><text x="7.1663%" y="575.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (229 samples, 0.20%)</title><rect x="6.9163%" y="549" width="0.2010%" height="15" fill="rgb(236,162,54)" fg:x="7878" fg:w="229"/><text x="7.1663%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (12 samples, 0.01%)</title><rect x="7.1068%" y="533" width="0.0105%" height="15" fill="rgb(220,229,9)" fg:x="8095" fg:w="12"/><text x="7.3568%" y="543.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::iter::traits::collect::FromIterator&lt;T&gt; for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::from_iter (12 samples, 0.01%)</title><rect x="7.1068%" y="517" width="0.0105%" height="15" fill="rgb(250,87,22)" fg:x="8095" fg:w="12"/><text x="7.3568%" y="527.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (12 samples, 0.01%)</title><rect x="7.1068%" y="501" width="0.0105%" height="15" fill="rgb(239,43,17)" fg:x="8095" fg:w="12"/><text x="7.3568%" y="511.50"></text></g><g><title>event_listener::Inner::lock (45 samples, 0.04%)</title><rect x="7.1173%" y="709" width="0.0395%" height="15" fill="rgb(231,177,25)" fg:x="8107" fg:w="45"/><text x="7.3673%" y="719.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (45 samples, 0.04%)</title><rect x="7.1173%" y="693" width="0.0395%" height="15" fill="rgb(219,179,1)" fg:x="8107" fg:w="45"/><text x="7.3673%" y="703.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (45 samples, 0.04%)</title><rect x="7.1173%" y="677" width="0.0395%" height="15" fill="rgb(238,219,53)" fg:x="8107" fg:w="45"/><text x="7.3673%" y="687.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (45 samples, 0.04%)</title><rect x="7.1173%" y="661" width="0.0395%" height="15" fill="rgb(232,167,36)" fg:x="8107" fg:w="45"/><text x="7.3673%" y="671.50"></text></g><g><title>__GI___pthread_mutex_lock (45 samples, 0.04%)</title><rect x="7.1173%" y="645" width="0.0395%" height="15" fill="rgb(244,19,51)" fg:x="8107" fg:w="45"/><text x="7.3673%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (27 samples, 0.02%)</title><rect x="7.1691%" y="613" width="0.0237%" height="15" fill="rgb(224,6,22)" fg:x="8166" fg:w="27"/><text x="7.4191%" y="623.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.02%)</title><rect x="7.1691%" y="597" width="0.0237%" height="15" fill="rgb(224,145,5)" fg:x="8166" fg:w="27"/><text x="7.4191%" y="607.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (27 samples, 0.02%)</title><rect x="7.1691%" y="581" width="0.0237%" height="15" fill="rgb(234,130,49)" fg:x="8166" fg:w="27"/><text x="7.4191%" y="591.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (27 samples, 0.02%)</title><rect x="7.1691%" y="565" width="0.0237%" height="15" fill="rgb(254,6,2)" fg:x="8166" fg:w="27"/><text x="7.4191%" y="575.50"></text></g><g><title>__GI___pthread_mutex_unlock (27 samples, 0.02%)</title><rect x="7.1691%" y="549" width="0.0237%" height="15" fill="rgb(208,96,46)" fg:x="8166" fg:w="27"/><text x="7.4191%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (12 samples, 0.01%)</title><rect x="7.1928%" y="613" width="0.0105%" height="15" fill="rgb(239,3,39)" fg:x="8193" fg:w="12"/><text x="7.4428%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (12 samples, 0.01%)</title><rect x="7.1928%" y="597" width="0.0105%" height="15" fill="rgb(233,210,1)" fg:x="8193" fg:w="12"/><text x="7.4428%" y="607.50"></text></g><g><title>async_io::reactor::Reactor::notify (15 samples, 0.01%)</title><rect x="7.2034%" y="565" width="0.0132%" height="15" fill="rgb(244,137,37)" fg:x="8205" fg:w="15"/><text x="7.4534%" y="575.50"></text></g><g><title>polling::Poller::notify (14 samples, 0.01%)</title><rect x="7.2042%" y="549" width="0.0123%" height="15" fill="rgb(240,136,2)" fg:x="8206" fg:w="14"/><text x="7.4542%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (13 samples, 0.01%)</title><rect x="7.2288%" y="533" width="0.0114%" height="15" fill="rgb(239,18,37)" fg:x="8234" fg:w="13"/><text x="7.4788%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_swap (13 samples, 0.01%)</title><rect x="7.2288%" y="517" width="0.0114%" height="15" fill="rgb(218,185,22)" fg:x="8234" fg:w="13"/><text x="7.4788%" y="527.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (15 samples, 0.01%)</title><rect x="7.2402%" y="533" width="0.0132%" height="15" fill="rgb(225,218,4)" fg:x="8247" fg:w="15"/><text x="7.4902%" y="543.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (15 samples, 0.01%)</title><rect x="7.2402%" y="517" width="0.0132%" height="15" fill="rgb(230,182,32)" fg:x="8247" fg:w="15"/><text x="7.4902%" y="527.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (15 samples, 0.01%)</title><rect x="7.2402%" y="501" width="0.0132%" height="15" fill="rgb(242,56,43)" fg:x="8247" fg:w="15"/><text x="7.4902%" y="511.50"></text></g><g><title>__pthread_cond_signal (15 samples, 0.01%)</title><rect x="7.2402%" y="485" width="0.0132%" height="15" fill="rgb(233,99,24)" fg:x="8247" fg:w="15"/><text x="7.4902%" y="495.50"></text></g><g><title>parking::Unparker::unpark (58 samples, 0.05%)</title><rect x="7.2192%" y="565" width="0.0509%" height="15" fill="rgb(234,209,42)" fg:x="8223" fg:w="58"/><text x="7.4692%" y="575.50"></text></g><g><title>parking::Inner::unpark (52 samples, 0.05%)</title><rect x="7.2244%" y="549" width="0.0457%" height="15" fill="rgb(227,7,12)" fg:x="8229" fg:w="52"/><text x="7.4744%" y="559.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (19 samples, 0.02%)</title><rect x="7.2534%" y="533" width="0.0167%" height="15" fill="rgb(245,203,43)" fg:x="8262" fg:w="19"/><text x="7.5034%" y="543.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (19 samples, 0.02%)</title><rect x="7.2534%" y="517" width="0.0167%" height="15" fill="rgb(238,205,33)" fg:x="8262" fg:w="19"/><text x="7.5034%" y="527.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (17 samples, 0.01%)</title><rect x="7.2552%" y="501" width="0.0149%" height="15" fill="rgb(231,56,7)" fg:x="8264" fg:w="17"/><text x="7.5052%" y="511.50"></text></g><g><title>__GI___pthread_mutex_lock (17 samples, 0.01%)</title><rect x="7.2552%" y="485" width="0.0149%" height="15" fill="rgb(244,186,29)" fg:x="8264" fg:w="17"/><text x="7.5052%" y="495.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (78 samples, 0.07%)</title><rect x="7.2034%" y="581" width="0.0685%" height="15" fill="rgb(234,111,31)" fg:x="8205" fg:w="78"/><text x="7.4534%" y="591.50"></text></g><g><title>core::task::wake::Waker::wake (103 samples, 0.09%)</title><rect x="7.2034%" y="613" width="0.0904%" height="15" fill="rgb(241,149,10)" fg:x="8205" fg:w="103"/><text x="7.4534%" y="623.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (103 samples, 0.09%)</title><rect x="7.2034%" y="597" width="0.0904%" height="15" fill="rgb(249,206,44)" fg:x="8205" fg:w="103"/><text x="7.4534%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (25 samples, 0.02%)</title><rect x="7.2718%" y="581" width="0.0219%" height="15" fill="rgb(251,153,30)" fg:x="8283" fg:w="25"/><text x="7.5218%" y="591.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.02%)</title><rect x="7.2718%" y="565" width="0.0219%" height="15" fill="rgb(239,152,38)" fg:x="8283" fg:w="25"/><text x="7.5218%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (24 samples, 0.02%)</title><rect x="7.2727%" y="549" width="0.0211%" height="15" fill="rgb(249,139,47)" fg:x="8284" fg:w="24"/><text x="7.5227%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_sub (24 samples, 0.02%)</title><rect x="7.2727%" y="533" width="0.0211%" height="15" fill="rgb(244,64,35)" fg:x="8284" fg:w="24"/><text x="7.5227%" y="543.50"></text></g><g><title>async_executor::State::notify (170 samples, 0.15%)</title><rect x="7.1665%" y="629" width="0.1492%" height="15" fill="rgb(216,46,15)" fg:x="8163" fg:w="170"/><text x="7.4165%" y="639.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (25 samples, 0.02%)</title><rect x="7.2938%" y="613" width="0.0219%" height="15" fill="rgb(250,74,19)" fg:x="8308" fg:w="25"/><text x="7.5438%" y="623.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (25 samples, 0.02%)</title><rect x="7.2938%" y="597" width="0.0219%" height="15" fill="rgb(249,42,33)" fg:x="8308" fg:w="25"/><text x="7.5438%" y="607.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (20 samples, 0.02%)</title><rect x="7.2982%" y="581" width="0.0176%" height="15" fill="rgb(242,149,17)" fg:x="8313" fg:w="20"/><text x="7.5482%" y="591.50"></text></g><g><title>__GI___pthread_mutex_lock (20 samples, 0.02%)</title><rect x="7.2982%" y="565" width="0.0176%" height="15" fill="rgb(244,29,21)" fg:x="8313" fg:w="20"/><text x="7.5482%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (28 samples, 0.02%)</title><rect x="7.3201%" y="597" width="0.0246%" height="15" fill="rgb(220,130,37)" fg:x="8338" fg:w="28"/><text x="7.5701%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (28 samples, 0.02%)</title><rect x="7.3201%" y="581" width="0.0246%" height="15" fill="rgb(211,67,2)" fg:x="8338" fg:w="28"/><text x="7.5701%" y="591.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (219 samples, 0.19%)</title><rect x="7.1665%" y="645" width="0.1923%" height="15" fill="rgb(235,68,52)" fg:x="8163" fg:w="219"/><text x="7.4165%" y="655.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (49 samples, 0.04%)</title><rect x="7.3157%" y="629" width="0.0430%" height="15" fill="rgb(246,142,3)" fg:x="8333" fg:w="49"/><text x="7.5657%" y="639.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (49 samples, 0.04%)</title><rect x="7.3157%" y="613" width="0.0430%" height="15" fill="rgb(241,25,7)" fg:x="8333" fg:w="49"/><text x="7.5657%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (15 samples, 0.01%)</title><rect x="7.3456%" y="597" width="0.0132%" height="15" fill="rgb(242,119,39)" fg:x="8367" fg:w="15"/><text x="7.5956%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_or (15 samples, 0.01%)</title><rect x="7.3456%" y="581" width="0.0132%" height="15" fill="rgb(241,98,45)" fg:x="8367" fg:w="15"/><text x="7.5956%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (40 samples, 0.04%)</title><rect x="7.3588%" y="645" width="0.0351%" height="15" fill="rgb(254,28,30)" fg:x="8382" fg:w="40"/><text x="7.6088%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (40 samples, 0.04%)</title><rect x="7.3588%" y="629" width="0.0351%" height="15" fill="rgb(241,142,54)" fg:x="8382" fg:w="40"/><text x="7.6088%" y="639.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (317 samples, 0.28%)</title><rect x="7.1173%" y="741" width="0.2783%" height="15" fill="rgb(222,85,15)" fg:x="8107" fg:w="317"/><text x="7.3673%" y="751.50"></text></g><g><title>event_listener::Event::notify (317 samples, 0.28%)</title><rect x="7.1173%" y="725" width="0.2783%" height="15" fill="rgb(210,85,47)" fg:x="8107" fg:w="317"/><text x="7.3673%" y="735.50"></text></g><g><title>event_listener::List::notify (272 samples, 0.24%)</title><rect x="7.1568%" y="709" width="0.2388%" height="15" fill="rgb(224,206,25)" fg:x="8152" fg:w="272"/><text x="7.4068%" y="719.50"></text></g><g><title>core::task::wake::Waker::wake (272 samples, 0.24%)</title><rect x="7.1568%" y="693" width="0.2388%" height="15" fill="rgb(243,201,19)" fg:x="8152" fg:w="272"/><text x="7.4068%" y="703.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (272 samples, 0.24%)</title><rect x="7.1568%" y="677" width="0.2388%" height="15" fill="rgb(236,59,4)" fg:x="8152" fg:w="272"/><text x="7.4068%" y="687.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (262 samples, 0.23%)</title><rect x="7.1656%" y="661" width="0.2300%" height="15" fill="rgb(254,179,45)" fg:x="8162" fg:w="262"/><text x="7.4156%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (318 samples, 0.28%)</title><rect x="7.1173%" y="821" width="0.2792%" height="15" fill="rgb(226,14,10)" fg:x="8107" fg:w="318"/><text x="7.3673%" y="831.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (318 samples, 0.28%)</title><rect x="7.1173%" y="805" width="0.2792%" height="15" fill="rgb(244,27,41)" fg:x="8107" fg:w="318"/><text x="7.3673%" y="815.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (318 samples, 0.28%)</title><rect x="7.1173%" y="789" width="0.2792%" height="15" fill="rgb(235,35,32)" fg:x="8107" fg:w="318"/><text x="7.3673%" y="799.50"></text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (318 samples, 0.28%)</title><rect x="7.1173%" y="773" width="0.2792%" height="15" fill="rgb(218,68,31)" fg:x="8107" fg:w="318"/><text x="7.3673%" y="783.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (318 samples, 0.28%)</title><rect x="7.1173%" y="757" width="0.2792%" height="15" fill="rgb(207,120,37)" fg:x="8107" fg:w="318"/><text x="7.3673%" y="767.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.02%)</title><rect x="7.6555%" y="805" width="0.0211%" height="15" fill="rgb(227,98,0)" fg:x="8720" fg:w="24"/><text x="7.9055%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (55 samples, 0.05%)</title><rect x="7.8407%" y="677" width="0.0483%" height="15" fill="rgb(207,7,3)" fg:x="8931" fg:w="55"/><text x="8.0907%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (55 samples, 0.05%)</title><rect x="7.8407%" y="661" width="0.0483%" height="15" fill="rgb(206,98,19)" fg:x="8931" fg:w="55"/><text x="8.0907%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (55 samples, 0.05%)</title><rect x="7.8407%" y="645" width="0.0483%" height="15" fill="rgb(217,5,26)" fg:x="8931" fg:w="55"/><text x="8.0907%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (55 samples, 0.05%)</title><rect x="7.8407%" y="629" width="0.0483%" height="15" fill="rgb(235,190,38)" fg:x="8931" fg:w="55"/><text x="8.0907%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (55 samples, 0.05%)</title><rect x="7.8407%" y="613" width="0.0483%" height="15" fill="rgb(247,86,24)" fg:x="8931" fg:w="55"/><text x="8.0907%" y="623.50"></text></g><g><title>alloc::alloc::alloc (47 samples, 0.04%)</title><rect x="7.8478%" y="597" width="0.0413%" height="15" fill="rgb(205,101,16)" fg:x="8939" fg:w="47"/><text x="8.0978%" y="607.50"></text></g><g><title>__rg_alloc (47 samples, 0.04%)</title><rect x="7.8478%" y="581" width="0.0413%" height="15" fill="rgb(246,168,33)" fg:x="8939" fg:w="47"/><text x="8.0978%" y="591.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (47 samples, 0.04%)</title><rect x="7.8478%" y="565" width="0.0413%" height="15" fill="rgb(231,114,1)" fg:x="8939" fg:w="47"/><text x="8.0978%" y="575.50"></text></g><g><title>sn_rust_alloc (35 samples, 0.03%)</title><rect x="7.8583%" y="549" width="0.0307%" height="15" fill="rgb(207,184,53)" fg:x="8951" fg:w="35"/><text x="8.1083%" y="559.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (78 samples, 0.07%)</title><rect x="7.8346%" y="789" width="0.0685%" height="15" fill="rgb(224,95,51)" fg:x="8924" fg:w="78"/><text x="8.0846%" y="799.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (73 samples, 0.06%)</title><rect x="7.8390%" y="773" width="0.0641%" height="15" fill="rgb(212,188,45)" fg:x="8929" fg:w="73"/><text x="8.0890%" y="783.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (72 samples, 0.06%)</title><rect x="7.8399%" y="757" width="0.0632%" height="15" fill="rgb(223,154,38)" fg:x="8930" fg:w="72"/><text x="8.0899%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (71 samples, 0.06%)</title><rect x="7.8407%" y="741" width="0.0623%" height="15" fill="rgb(251,22,52)" fg:x="8931" fg:w="71"/><text x="8.0907%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (71 samples, 0.06%)</title><rect x="7.8407%" y="725" width="0.0623%" height="15" fill="rgb(229,209,22)" fg:x="8931" fg:w="71"/><text x="8.0907%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (71 samples, 0.06%)</title><rect x="7.8407%" y="709" width="0.0623%" height="15" fill="rgb(234,138,34)" fg:x="8931" fg:w="71"/><text x="8.0907%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (71 samples, 0.06%)</title><rect x="7.8407%" y="693" width="0.0623%" height="15" fill="rgb(212,95,11)" fg:x="8931" fg:w="71"/><text x="8.0907%" y="703.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (16 samples, 0.01%)</title><rect x="7.8890%" y="677" width="0.0140%" height="15" fill="rgb(240,179,47)" fg:x="8986" fg:w="16"/><text x="8.1390%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (16 samples, 0.01%)</title><rect x="7.8890%" y="661" width="0.0140%" height="15" fill="rgb(240,163,11)" fg:x="8986" fg:w="16"/><text x="8.1390%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (30 samples, 0.03%)</title><rect x="7.9206%" y="581" width="0.0263%" height="15" fill="rgb(236,37,12)" fg:x="9022" fg:w="30"/><text x="8.1706%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (30 samples, 0.03%)</title><rect x="7.9206%" y="565" width="0.0263%" height="15" fill="rgb(232,164,16)" fg:x="9022" fg:w="30"/><text x="8.1706%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (30 samples, 0.03%)</title><rect x="7.9206%" y="549" width="0.0263%" height="15" fill="rgb(244,205,15)" fg:x="9022" fg:w="30"/><text x="8.1706%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (29 samples, 0.03%)</title><rect x="7.9215%" y="533" width="0.0255%" height="15" fill="rgb(223,117,47)" fg:x="9023" fg:w="29"/><text x="8.1715%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (29 samples, 0.03%)</title><rect x="7.9215%" y="517" width="0.0255%" height="15" fill="rgb(244,107,35)" fg:x="9023" fg:w="29"/><text x="8.1715%" y="527.50"></text></g><g><title>alloc::alloc::alloc (29 samples, 0.03%)</title><rect x="7.9215%" y="501" width="0.0255%" height="15" fill="rgb(205,140,8)" fg:x="9023" fg:w="29"/><text x="8.1715%" y="511.50"></text></g><g><title>__rg_alloc (29 samples, 0.03%)</title><rect x="7.9215%" y="485" width="0.0255%" height="15" fill="rgb(228,84,46)" fg:x="9023" fg:w="29"/><text x="8.1715%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (29 samples, 0.03%)</title><rect x="7.9215%" y="469" width="0.0255%" height="15" fill="rgb(254,188,9)" fg:x="9023" fg:w="29"/><text x="8.1715%" y="479.50"></text></g><g><title>sn_rust_alloc (27 samples, 0.02%)</title><rect x="7.9233%" y="453" width="0.0237%" height="15" fill="rgb(206,112,54)" fg:x="9025" fg:w="27"/><text x="8.1733%" y="463.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (18 samples, 0.02%)</title><rect x="7.9312%" y="437" width="0.0158%" height="15" fill="rgb(216,84,49)" fg:x="9034" fg:w="18"/><text x="8.1812%" y="447.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (49 samples, 0.04%)</title><rect x="7.9206%" y="693" width="0.0430%" height="15" fill="rgb(214,194,35)" fg:x="9022" fg:w="49"/><text x="8.1706%" y="703.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (49 samples, 0.04%)</title><rect x="7.9206%" y="677" width="0.0430%" height="15" fill="rgb(249,28,3)" fg:x="9022" fg:w="49"/><text x="8.1706%" y="687.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (49 samples, 0.04%)</title><rect x="7.9206%" y="661" width="0.0430%" height="15" fill="rgb(222,56,52)" fg:x="9022" fg:w="49"/><text x="8.1706%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (49 samples, 0.04%)</title><rect x="7.9206%" y="645" width="0.0430%" height="15" fill="rgb(245,217,50)" fg:x="9022" fg:w="49"/><text x="8.1706%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (49 samples, 0.04%)</title><rect x="7.9206%" y="629" width="0.0430%" height="15" fill="rgb(213,201,24)" fg:x="9022" fg:w="49"/><text x="8.1706%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (49 samples, 0.04%)</title><rect x="7.9206%" y="613" width="0.0430%" height="15" fill="rgb(248,116,28)" fg:x="9022" fg:w="49"/><text x="8.1706%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (49 samples, 0.04%)</title><rect x="7.9206%" y="597" width="0.0430%" height="15" fill="rgb(219,72,43)" fg:x="9022" fg:w="49"/><text x="8.1706%" y="607.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (19 samples, 0.02%)</title><rect x="7.9470%" y="581" width="0.0167%" height="15" fill="rgb(209,138,14)" fg:x="9052" fg:w="19"/><text x="8.1970%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (19 samples, 0.02%)</title><rect x="7.9470%" y="565" width="0.0167%" height="15" fill="rgb(222,18,33)" fg:x="9052" fg:w="19"/><text x="8.1970%" y="575.50"></text></g><g><title>[libc-2.31.so] (16 samples, 0.01%)</title><rect x="7.9496%" y="549" width="0.0140%" height="15" fill="rgb(213,199,7)" fg:x="9055" fg:w="16"/><text x="8.1996%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (27 samples, 0.02%)</title><rect x="7.9742%" y="645" width="0.0237%" height="15" fill="rgb(250,110,10)" fg:x="9083" fg:w="27"/><text x="8.2242%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (27 samples, 0.02%)</title><rect x="7.9742%" y="629" width="0.0237%" height="15" fill="rgb(248,123,6)" fg:x="9083" fg:w="27"/><text x="8.2242%" y="639.50"></text></g><g><title>alloc::alloc::alloc (27 samples, 0.02%)</title><rect x="7.9742%" y="613" width="0.0237%" height="15" fill="rgb(206,91,31)" fg:x="9083" fg:w="27"/><text x="8.2242%" y="623.50"></text></g><g><title>__rg_alloc (27 samples, 0.02%)</title><rect x="7.9742%" y="597" width="0.0237%" height="15" fill="rgb(211,154,13)" fg:x="9083" fg:w="27"/><text x="8.2242%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (27 samples, 0.02%)</title><rect x="7.9742%" y="581" width="0.0237%" height="15" fill="rgb(225,148,7)" fg:x="9083" fg:w="27"/><text x="8.2242%" y="591.50"></text></g><g><title>sn_rust_alloc (27 samples, 0.02%)</title><rect x="7.9742%" y="565" width="0.0237%" height="15" fill="rgb(220,160,43)" fg:x="9083" fg:w="27"/><text x="8.2242%" y="575.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (13 samples, 0.01%)</title><rect x="7.9865%" y="549" width="0.0114%" height="15" fill="rgb(213,52,39)" fg:x="9097" fg:w="13"/><text x="8.2365%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (29 samples, 0.03%)</title><rect x="7.9733%" y="693" width="0.0255%" height="15" fill="rgb(243,137,7)" fg:x="9082" fg:w="29"/><text x="8.2233%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (28 samples, 0.02%)</title><rect x="7.9742%" y="677" width="0.0246%" height="15" fill="rgb(230,79,13)" fg:x="9083" fg:w="28"/><text x="8.2242%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (28 samples, 0.02%)</title><rect x="7.9742%" y="661" width="0.0246%" height="15" fill="rgb(247,105,23)" fg:x="9083" fg:w="28"/><text x="8.2242%" y="671.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (364 samples, 0.32%)</title><rect x="7.6818%" y="805" width="0.3196%" height="15" fill="rgb(223,179,41)" fg:x="8750" fg:w="364"/><text x="7.9318%" y="815.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (112 samples, 0.10%)</title><rect x="7.9031%" y="789" width="0.0983%" height="15" fill="rgb(218,9,34)" fg:x="9002" fg:w="112"/><text x="8.1531%" y="799.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (96 samples, 0.08%)</title><rect x="7.9171%" y="773" width="0.0843%" height="15" fill="rgb(222,106,8)" fg:x="9018" fg:w="96"/><text x="8.1671%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (96 samples, 0.08%)</title><rect x="7.9171%" y="757" width="0.0843%" height="15" fill="rgb(211,220,0)" fg:x="9018" fg:w="96"/><text x="8.1671%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (96 samples, 0.08%)</title><rect x="7.9171%" y="741" width="0.0843%" height="15" fill="rgb(229,52,16)" fg:x="9018" fg:w="96"/><text x="8.1671%" y="751.50"></text></g><g><title>alloc::slice::hack::to_vec (96 samples, 0.08%)</title><rect x="7.9171%" y="725" width="0.0843%" height="15" fill="rgb(212,155,18)" fg:x="9018" fg:w="96"/><text x="8.1671%" y="735.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (96 samples, 0.08%)</title><rect x="7.9171%" y="709" width="0.0843%" height="15" fill="rgb(242,21,14)" fg:x="9018" fg:w="96"/><text x="8.1671%" y="719.50"></text></g><g><title>[libc-2.31.so] (49 samples, 0.04%)</title><rect x="8.0014%" y="805" width="0.0430%" height="15" fill="rgb(222,19,48)" fg:x="9114" fg:w="49"/><text x="8.2514%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (156 samples, 0.14%)</title><rect x="8.0479%" y="805" width="0.1370%" height="15" fill="rgb(232,45,27)" fg:x="9167" fg:w="156"/><text x="8.2979%" y="815.50"></text></g><g><title>core::ptr::write (147 samples, 0.13%)</title><rect x="8.0558%" y="789" width="0.1291%" height="15" fill="rgb(249,103,42)" fg:x="9176" fg:w="147"/><text x="8.3058%" y="799.50"></text></g><g><title>[libc-2.31.so] (147 samples, 0.13%)</title><rect x="8.0558%" y="773" width="0.1291%" height="15" fill="rgb(246,81,33)" fg:x="9176" fg:w="147"/><text x="8.3058%" y="783.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (258 samples, 0.23%)</title><rect x="8.2068%" y="645" width="0.2265%" height="15" fill="rgb(252,33,42)" fg:x="9348" fg:w="258"/><text x="8.4568%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (285 samples, 0.25%)</title><rect x="8.1884%" y="741" width="0.2502%" height="15" fill="rgb(209,212,41)" fg:x="9327" fg:w="285"/><text x="8.4384%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (285 samples, 0.25%)</title><rect x="8.1884%" y="725" width="0.2502%" height="15" fill="rgb(207,154,6)" fg:x="9327" fg:w="285"/><text x="8.4384%" y="735.50"></text></g><g><title>alloc::alloc::alloc (281 samples, 0.25%)</title><rect x="8.1919%" y="709" width="0.2467%" height="15" fill="rgb(223,64,47)" fg:x="9331" fg:w="281"/><text x="8.4419%" y="719.50"></text></g><g><title>__rg_alloc (281 samples, 0.25%)</title><rect x="8.1919%" y="693" width="0.2467%" height="15" fill="rgb(211,161,38)" fg:x="9331" fg:w="281"/><text x="8.4419%" y="703.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (281 samples, 0.25%)</title><rect x="8.1919%" y="677" width="0.2467%" height="15" fill="rgb(219,138,40)" fg:x="9331" fg:w="281"/><text x="8.4419%" y="687.50"></text></g><g><title>sn_rust_alloc (281 samples, 0.25%)</title><rect x="8.1919%" y="661" width="0.2467%" height="15" fill="rgb(241,228,46)" fg:x="9331" fg:w="281"/><text x="8.4419%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (291 samples, 0.26%)</title><rect x="8.1849%" y="805" width="0.2555%" height="15" fill="rgb(223,209,38)" fg:x="9323" fg:w="291"/><text x="8.4349%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (291 samples, 0.26%)</title><rect x="8.1849%" y="789" width="0.2555%" height="15" fill="rgb(236,164,45)" fg:x="9323" fg:w="291"/><text x="8.4349%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (290 samples, 0.25%)</title><rect x="8.1858%" y="773" width="0.2546%" height="15" fill="rgb(231,15,5)" fg:x="9324" fg:w="290"/><text x="8.4358%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (290 samples, 0.25%)</title><rect x="8.1858%" y="757" width="0.2546%" height="15" fill="rgb(252,35,15)" fg:x="9324" fg:w="290"/><text x="8.4358%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (23 samples, 0.02%)</title><rect x="8.4483%" y="709" width="0.0202%" height="15" fill="rgb(248,181,18)" fg:x="9623" fg:w="23"/><text x="8.6983%" y="719.50"></text></g><g><title>alloc::alloc::dealloc (22 samples, 0.02%)</title><rect x="8.4491%" y="693" width="0.0193%" height="15" fill="rgb(233,39,42)" fg:x="9624" fg:w="22"/><text x="8.6991%" y="703.50"></text></g><g><title>__rg_dealloc (22 samples, 0.02%)</title><rect x="8.4491%" y="677" width="0.0193%" height="15" fill="rgb(238,110,33)" fg:x="9624" fg:w="22"/><text x="8.6991%" y="687.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (22 samples, 0.02%)</title><rect x="8.4491%" y="661" width="0.0193%" height="15" fill="rgb(233,195,10)" fg:x="9624" fg:w="22"/><text x="8.6991%" y="671.50"></text></g><g><title>sn_rust_dealloc (21 samples, 0.02%)</title><rect x="8.4500%" y="645" width="0.0184%" height="15" fill="rgb(254,105,3)" fg:x="9625" fg:w="21"/><text x="8.7000%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (36 samples, 0.03%)</title><rect x="8.4404%" y="805" width="0.0316%" height="15" fill="rgb(221,225,9)" fg:x="9614" fg:w="36"/><text x="8.6904%" y="815.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (36 samples, 0.03%)</title><rect x="8.4404%" y="789" width="0.0316%" height="15" fill="rgb(224,227,45)" fg:x="9614" fg:w="36"/><text x="8.6904%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (33 samples, 0.03%)</title><rect x="8.4430%" y="773" width="0.0290%" height="15" fill="rgb(229,198,43)" fg:x="9617" fg:w="33"/><text x="8.6930%" y="783.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.03%)</title><rect x="8.4430%" y="757" width="0.0290%" height="15" fill="rgb(206,209,35)" fg:x="9617" fg:w="33"/><text x="8.6930%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (27 samples, 0.02%)</title><rect x="8.4483%" y="741" width="0.0237%" height="15" fill="rgb(245,195,53)" fg:x="9623" fg:w="27"/><text x="8.6983%" y="751.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.02%)</title><rect x="8.4483%" y="725" width="0.0237%" height="15" fill="rgb(240,92,26)" fg:x="9623" fg:w="27"/><text x="8.6983%" y="735.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (1,549 samples, 1.36%)</title><rect x="7.1173%" y="901" width="1.3599%" height="15" fill="rgb(207,40,23)" fg:x="8107" fg:w="1549"/><text x="7.3673%" y="911.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,549 samples, 1.36%)</title><rect x="7.1173%" y="885" width="1.3599%" height="15" fill="rgb(223,111,35)" fg:x="8107" fg:w="1549"/><text x="7.3673%" y="895.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (1,549 samples, 1.36%)</title><rect x="7.1173%" y="869" width="1.3599%" height="15" fill="rgb(229,147,28)" fg:x="8107" fg:w="1549"/><text x="7.3673%" y="879.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,549 samples, 1.36%)</title><rect x="7.1173%" y="853" width="1.3599%" height="15" fill="rgb(211,29,28)" fg:x="8107" fg:w="1549"/><text x="7.3673%" y="863.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (1,549 samples, 1.36%)</title><rect x="7.1173%" y="837" width="1.3599%" height="15" fill="rgb(228,72,33)" fg:x="8107" fg:w="1549"/><text x="7.3673%" y="847.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (1,231 samples, 1.08%)</title><rect x="7.3965%" y="821" width="1.0807%" height="15" fill="rgb(205,214,31)" fg:x="8425" fg:w="1231"/><text x="7.6465%" y="831.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (38 samples, 0.03%)</title><rect x="8.5334%" y="837" width="0.0334%" height="15" fill="rgb(224,111,15)" fg:x="9720" fg:w="38"/><text x="8.7834%" y="847.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (25 samples, 0.02%)</title><rect x="8.5448%" y="821" width="0.0219%" height="15" fill="rgb(253,21,26)" fg:x="9733" fg:w="25"/><text x="8.7948%" y="831.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (313 samples, 0.27%)</title><rect x="8.4913%" y="853" width="0.2748%" height="15" fill="rgb(245,139,43)" fg:x="9672" fg:w="313"/><text x="8.7413%" y="863.50"></text></g><g><title>[libc-2.31.so] (227 samples, 0.20%)</title><rect x="8.5668%" y="837" width="0.1993%" height="15" fill="rgb(252,170,7)" fg:x="9758" fg:w="227"/><text x="8.8168%" y="847.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (444 samples, 0.39%)</title><rect x="8.4772%" y="885" width="0.3898%" height="15" fill="rgb(231,118,14)" fg:x="9656" fg:w="444"/><text x="8.7272%" y="895.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (444 samples, 0.39%)</title><rect x="8.4772%" y="869" width="0.3898%" height="15" fill="rgb(238,83,0)" fg:x="9656" fg:w="444"/><text x="8.7272%" y="879.50"></text></g><g><title>[libc-2.31.so] (115 samples, 0.10%)</title><rect x="8.7661%" y="853" width="0.1010%" height="15" fill="rgb(221,39,39)" fg:x="9985" fg:w="115"/><text x="9.0161%" y="863.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (326 samples, 0.29%)</title><rect x="8.9899%" y="757" width="0.2862%" height="15" fill="rgb(222,119,46)" fg:x="10240" fg:w="326"/><text x="9.2399%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (12 samples, 0.01%)</title><rect x="9.2656%" y="741" width="0.0105%" height="15" fill="rgb(222,165,49)" fg:x="10554" fg:w="12"/><text x="9.5156%" y="751.50"></text></g><g><title>[libc-2.31.so] (15 samples, 0.01%)</title><rect x="9.2841%" y="741" width="0.0132%" height="15" fill="rgb(219,113,52)" fg:x="10575" fg:w="15"/><text x="9.5341%" y="751.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;tremor_pipeline::event::Event&gt;&gt;::from (27 samples, 0.02%)</title><rect x="9.2762%" y="757" width="0.0237%" height="15" fill="rgb(214,7,15)" fg:x="10566" fg:w="27"/><text x="9.5262%" y="767.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (365 samples, 0.32%)</title><rect x="8.9847%" y="773" width="0.3204%" height="15" fill="rgb(235,32,4)" fg:x="10234" fg:w="365"/><text x="9.2347%" y="783.50"></text></g><g><title>[libc-2.31.so] (262 samples, 0.23%)</title><rect x="9.3051%" y="773" width="0.2300%" height="15" fill="rgb(238,90,54)" fg:x="10599" fg:w="262"/><text x="9.5551%" y="783.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (12 samples, 0.01%)</title><rect x="9.5527%" y="661" width="0.0105%" height="15" fill="rgb(213,208,19)" fg:x="10881" fg:w="12"/><text x="9.8027%" y="671.50"></text></g><g><title>alloc::alloc::exchange_malloc (37 samples, 0.03%)</title><rect x="9.5351%" y="773" width="0.0325%" height="15" fill="rgb(233,156,4)" fg:x="10861" fg:w="37"/><text x="9.7851%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (37 samples, 0.03%)</title><rect x="9.5351%" y="757" width="0.0325%" height="15" fill="rgb(207,194,5)" fg:x="10861" fg:w="37"/><text x="9.7851%" y="767.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (37 samples, 0.03%)</title><rect x="9.5351%" y="741" width="0.0325%" height="15" fill="rgb(206,111,30)" fg:x="10861" fg:w="37"/><text x="9.7851%" y="751.50"></text></g><g><title>alloc::alloc::alloc (37 samples, 0.03%)</title><rect x="9.5351%" y="725" width="0.0325%" height="15" fill="rgb(243,70,54)" fg:x="10861" fg:w="37"/><text x="9.7851%" y="735.50"></text></g><g><title>__rg_alloc (37 samples, 0.03%)</title><rect x="9.5351%" y="709" width="0.0325%" height="15" fill="rgb(242,28,8)" fg:x="10861" fg:w="37"/><text x="9.7851%" y="719.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (37 samples, 0.03%)</title><rect x="9.5351%" y="693" width="0.0325%" height="15" fill="rgb(219,106,18)" fg:x="10861" fg:w="37"/><text x="9.7851%" y="703.50"></text></g><g><title>sn_rust_alloc (37 samples, 0.03%)</title><rect x="9.5351%" y="677" width="0.0325%" height="15" fill="rgb(244,222,10)" fg:x="10861" fg:w="37"/><text x="9.7851%" y="687.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (21 samples, 0.02%)</title><rect x="9.5738%" y="773" width="0.0184%" height="15" fill="rgb(236,179,52)" fg:x="10905" fg:w="21"/><text x="9.8238%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.01%)</title><rect x="9.6045%" y="693" width="0.0105%" height="15" fill="rgb(213,23,39)" fg:x="10940" fg:w="12"/><text x="9.8545%" y="703.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.01%)</title><rect x="9.6045%" y="677" width="0.0105%" height="15" fill="rgb(238,48,10)" fg:x="10940" fg:w="12"/><text x="9.8545%" y="687.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (269 samples, 0.24%)</title><rect x="9.5922%" y="773" width="0.2362%" height="15" fill="rgb(251,196,23)" fg:x="10926" fg:w="269"/><text x="9.8422%" y="783.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (257 samples, 0.23%)</title><rect x="9.6027%" y="757" width="0.2256%" height="15" fill="rgb(250,152,24)" fg:x="10938" fg:w="257"/><text x="9.8527%" y="767.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (257 samples, 0.23%)</title><rect x="9.6027%" y="741" width="0.2256%" height="15" fill="rgb(209,150,17)" fg:x="10938" fg:w="257"/><text x="9.8527%" y="751.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_hash (257 samples, 0.23%)</title><rect x="9.6027%" y="725" width="0.2256%" height="15" fill="rgb(234,202,34)" fg:x="10938" fg:w="257"/><text x="9.8527%" y="735.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::search (257 samples, 0.23%)</title><rect x="9.6027%" y="709" width="0.2256%" height="15" fill="rgb(253,148,53)" fg:x="10938" fg:w="257"/><text x="9.8527%" y="719.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (243 samples, 0.21%)</title><rect x="9.6150%" y="693" width="0.2133%" height="15" fill="rgb(218,129,16)" fg:x="10952" fg:w="243"/><text x="9.8650%" y="703.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (236 samples, 0.21%)</title><rect x="9.6212%" y="677" width="0.2072%" height="15" fill="rgb(216,85,19)" fg:x="10959" fg:w="236"/><text x="9.8712%" y="687.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (236 samples, 0.21%)</title><rect x="9.6212%" y="661" width="0.2072%" height="15" fill="rgb(235,228,7)" fg:x="10959" fg:w="236"/><text x="9.8712%" y="671.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (236 samples, 0.21%)</title><rect x="9.6212%" y="645" width="0.2072%" height="15" fill="rgb(245,175,0)" fg:x="10959" fg:w="236"/><text x="9.8712%" y="655.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (236 samples, 0.21%)</title><rect x="9.6212%" y="629" width="0.2072%" height="15" fill="rgb(208,168,36)" fg:x="10959" fg:w="236"/><text x="9.8712%" y="639.50"></text></g><g><title>[libc-2.31.so] (184 samples, 0.16%)</title><rect x="9.6668%" y="613" width="0.1615%" height="15" fill="rgb(246,171,24)" fg:x="11011" fg:w="184"/><text x="9.9168%" y="623.50"></text></g><g><title>ahash::operations::folded_multiply (18 samples, 0.02%)</title><rect x="9.8336%" y="693" width="0.0158%" height="15" fill="rgb(215,142,24)" fg:x="11201" fg:w="18"/><text x="10.0836%" y="703.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (22 samples, 0.02%)</title><rect x="9.8336%" y="709" width="0.0193%" height="15" fill="rgb(250,187,7)" fg:x="11201" fg:w="22"/><text x="10.0836%" y="719.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (17 samples, 0.01%)</title><rect x="9.8670%" y="661" width="0.0149%" height="15" fill="rgb(228,66,33)" fg:x="11239" fg:w="17"/><text x="10.1170%" y="671.50"></text></g><g><title>ahash::operations::folded_multiply (14 samples, 0.01%)</title><rect x="9.8696%" y="645" width="0.0123%" height="15" fill="rgb(234,215,21)" fg:x="11242" fg:w="14"/><text x="10.1196%" y="655.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (12 samples, 0.01%)</title><rect x="9.8714%" y="629" width="0.0105%" height="15" fill="rgb(222,191,20)" fg:x="11244" fg:w="12"/><text x="10.1214%" y="639.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (41 samples, 0.04%)</title><rect x="9.8582%" y="677" width="0.0360%" height="15" fill="rgb(245,79,54)" fg:x="11229" fg:w="41"/><text x="10.1082%" y="687.50"></text></g><g><title>hashbrown::map::make_hash (86 samples, 0.08%)</title><rect x="9.8319%" y="725" width="0.0755%" height="15" fill="rgb(240,10,37)" fg:x="11199" fg:w="86"/><text x="10.0819%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (58 samples, 0.05%)</title><rect x="9.8565%" y="709" width="0.0509%" height="15" fill="rgb(214,192,32)" fg:x="11227" fg:w="58"/><text x="10.1065%" y="719.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (56 samples, 0.05%)</title><rect x="9.8582%" y="693" width="0.0492%" height="15" fill="rgb(209,36,54)" fg:x="11229" fg:w="56"/><text x="10.1082%" y="703.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u8 (15 samples, 0.01%)</title><rect x="9.8942%" y="677" width="0.0132%" height="15" fill="rgb(220,10,11)" fg:x="11270" fg:w="15"/><text x="10.1442%" y="687.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (15 samples, 0.01%)</title><rect x="9.8942%" y="661" width="0.0132%" height="15" fill="rgb(221,106,17)" fg:x="11270" fg:w="15"/><text x="10.1442%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.02%)</title><rect x="9.9355%" y="677" width="0.0176%" height="15" fill="rgb(251,142,44)" fg:x="11317" fg:w="20"/><text x="10.1855%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.02%)</title><rect x="9.9355%" y="693" width="0.0219%" height="15" fill="rgb(238,13,15)" fg:x="11317" fg:w="25"/><text x="10.1855%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;core::ops::range::RangeFull&gt;&gt;::index (14 samples, 0.01%)</title><rect x="9.9574%" y="661" width="0.0123%" height="15" fill="rgb(208,107,27)" fg:x="11342" fg:w="14"/><text x="10.2074%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (14 samples, 0.01%)</title><rect x="9.9574%" y="645" width="0.0123%" height="15" fill="rgb(205,136,37)" fg:x="11342" fg:w="14"/><text x="10.2074%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (14 samples, 0.01%)</title><rect x="9.9574%" y="629" width="0.0123%" height="15" fill="rgb(250,205,27)" fg:x="11342" fg:w="14"/><text x="10.2074%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (204 samples, 0.18%)</title><rect x="9.9574%" y="677" width="0.1791%" height="15" fill="rgb(210,80,43)" fg:x="11342" fg:w="204"/><text x="10.2074%" y="687.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (190 samples, 0.17%)</title><rect x="9.9697%" y="661" width="0.1668%" height="15" fill="rgb(247,160,36)" fg:x="11356" fg:w="190"/><text x="10.2197%" y="671.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (190 samples, 0.17%)</title><rect x="9.9697%" y="645" width="0.1668%" height="15" fill="rgb(234,13,49)" fg:x="11356" fg:w="190"/><text x="10.2197%" y="655.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (190 samples, 0.17%)</title><rect x="9.9697%" y="629" width="0.1668%" height="15" fill="rgb(234,122,0)" fg:x="11356" fg:w="190"/><text x="10.2197%" y="639.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (190 samples, 0.17%)</title><rect x="9.9697%" y="613" width="0.1668%" height="15" fill="rgb(207,146,38)" fg:x="11356" fg:w="190"/><text x="10.2197%" y="623.50"></text></g><g><title>[libc-2.31.so] (107 samples, 0.09%)</title><rect x="10.0426%" y="597" width="0.0939%" height="15" fill="rgb(207,177,25)" fg:x="11439" fg:w="107"/><text x="10.2926%" y="607.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (345 samples, 0.30%)</title><rect x="9.9574%" y="693" width="0.3029%" height="15" fill="rgb(211,178,42)" fg:x="11342" fg:w="345"/><text x="10.2074%" y="703.50"></text></g><g><title>&lt;lru::KeyRef&lt;K&gt; as core::borrow::Borrow&lt;K&gt;&gt;::borrow (141 samples, 0.12%)</title><rect x="10.1365%" y="677" width="0.1238%" height="15" fill="rgb(230,69,54)" fg:x="11546" fg:w="141"/><text x="10.3865%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (580 samples, 0.51%)</title><rect x="9.8319%" y="757" width="0.5092%" height="15" fill="rgb(214,135,41)" fg:x="11199" fg:w="580"/><text x="10.0819%" y="767.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (580 samples, 0.51%)</title><rect x="9.8319%" y="741" width="0.5092%" height="15" fill="rgb(237,67,25)" fg:x="11199" fg:w="580"/><text x="10.0819%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (494 samples, 0.43%)</title><rect x="9.9074%" y="725" width="0.4337%" height="15" fill="rgb(222,189,50)" fg:x="11285" fg:w="494"/><text x="10.1574%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (494 samples, 0.43%)</title><rect x="9.9074%" y="709" width="0.4337%" height="15" fill="rgb(245,148,34)" fg:x="11285" fg:w="494"/><text x="10.1574%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (92 samples, 0.08%)</title><rect x="10.2603%" y="693" width="0.0808%" height="15" fill="rgb(222,29,6)" fg:x="11687" fg:w="92"/><text x="10.5103%" y="703.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (92 samples, 0.08%)</title><rect x="10.2603%" y="677" width="0.0808%" height="15" fill="rgb(221,189,43)" fg:x="11687" fg:w="92"/><text x="10.5103%" y="687.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (92 samples, 0.08%)</title><rect x="10.2603%" y="661" width="0.0808%" height="15" fill="rgb(207,36,27)" fg:x="11687" fg:w="92"/><text x="10.5103%" y="671.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (85 samples, 0.07%)</title><rect x="10.2665%" y="645" width="0.0746%" height="15" fill="rgb(217,90,24)" fg:x="11694" fg:w="85"/><text x="10.5165%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (85 samples, 0.07%)</title><rect x="10.2665%" y="629" width="0.0746%" height="15" fill="rgb(224,66,35)" fg:x="11694" fg:w="85"/><text x="10.5165%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (85 samples, 0.07%)</title><rect x="10.2665%" y="613" width="0.0746%" height="15" fill="rgb(221,13,50)" fg:x="11694" fg:w="85"/><text x="10.5165%" y="623.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::get_mut (607 samples, 0.53%)</title><rect x="9.8284%" y="773" width="0.5329%" height="15" fill="rgb(236,68,49)" fg:x="11195" fg:w="607"/><text x="10.0784%" y="783.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::detach (13 samples, 0.01%)</title><rect x="10.3499%" y="757" width="0.0114%" height="15" fill="rgb(229,146,28)" fg:x="11789" fg:w="13"/><text x="10.5999%" y="767.50"></text></g><g><title>sn_rust_dealloc (16 samples, 0.01%)</title><rect x="10.3613%" y="773" width="0.0140%" height="15" fill="rgb(225,31,38)" fg:x="11802" fg:w="16"/><text x="10.6113%" y="783.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (12 samples, 0.01%)</title><rect x="10.3753%" y="773" width="0.0105%" height="15" fill="rgb(250,208,3)" fg:x="11818" fg:w="12"/><text x="10.6253%" y="783.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (29 samples, 0.03%)</title><rect x="10.4649%" y="565" width="0.0255%" height="15" fill="rgb(246,54,23)" fg:x="11920" fg:w="29"/><text x="10.7149%" y="575.50"></text></g><g><title>tremor_value::value::serialize::&lt;impl value_trait::Writable for tremor_value::value::Value&gt;::encode (136 samples, 0.12%)</title><rect x="10.3858%" y="773" width="0.1194%" height="15" fill="rgb(243,76,11)" fg:x="11830" fg:w="136"/><text x="10.6358%" y="783.50"></text></g><g><title>value_trait::generator::DumpGenerator&lt;VT&gt;::new (95 samples, 0.08%)</title><rect x="10.4218%" y="757" width="0.0834%" height="15" fill="rgb(245,21,50)" fg:x="11871" fg:w="95"/><text x="10.6718%" y="767.50"></text></g><g><title>&lt;value_trait::generator::DumpGenerator&lt;VT&gt; as core::default::Default&gt;::default (95 samples, 0.08%)</title><rect x="10.4218%" y="741" width="0.0834%" height="15" fill="rgb(228,9,43)" fg:x="11871" fg:w="95"/><text x="10.6718%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (88 samples, 0.08%)</title><rect x="10.4280%" y="725" width="0.0773%" height="15" fill="rgb(208,100,47)" fg:x="11878" fg:w="88"/><text x="10.6780%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (88 samples, 0.08%)</title><rect x="10.4280%" y="709" width="0.0773%" height="15" fill="rgb(232,26,8)" fg:x="11878" fg:w="88"/><text x="10.6780%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (88 samples, 0.08%)</title><rect x="10.4280%" y="693" width="0.0773%" height="15" fill="rgb(216,166,38)" fg:x="11878" fg:w="88"/><text x="10.6780%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (88 samples, 0.08%)</title><rect x="10.4280%" y="677" width="0.0773%" height="15" fill="rgb(251,202,51)" fg:x="11878" fg:w="88"/><text x="10.6780%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (88 samples, 0.08%)</title><rect x="10.4280%" y="661" width="0.0773%" height="15" fill="rgb(254,216,34)" fg:x="11878" fg:w="88"/><text x="10.6780%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (88 samples, 0.08%)</title><rect x="10.4280%" y="645" width="0.0773%" height="15" fill="rgb(251,32,27)" fg:x="11878" fg:w="88"/><text x="10.6780%" y="655.50"></text></g><g><title>alloc::alloc::alloc (85 samples, 0.07%)</title><rect x="10.4306%" y="629" width="0.0746%" height="15" fill="rgb(208,127,28)" fg:x="11881" fg:w="85"/><text x="10.6806%" y="639.50"></text></g><g><title>__rg_alloc (85 samples, 0.07%)</title><rect x="10.4306%" y="613" width="0.0746%" height="15" fill="rgb(224,137,22)" fg:x="11881" fg:w="85"/><text x="10.6806%" y="623.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (85 samples, 0.07%)</title><rect x="10.4306%" y="597" width="0.0746%" height="15" fill="rgb(254,70,32)" fg:x="11881" fg:w="85"/><text x="10.6806%" y="607.50"></text></g><g><title>sn_rust_alloc (82 samples, 0.07%)</title><rect x="10.4333%" y="581" width="0.0720%" height="15" fill="rgb(229,75,37)" fg:x="11884" fg:w="82"/><text x="10.6833%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (17 samples, 0.01%)</title><rect x="10.4903%" y="565" width="0.0149%" height="15" fill="rgb(252,64,23)" fg:x="11949" fg:w="17"/><text x="10.7403%" y="575.50"></text></g><g><title>hashbrown::map::make_hash (120 samples, 0.11%)</title><rect x="10.5790%" y="581" width="0.1054%" height="15" fill="rgb(232,162,48)" fg:x="12050" fg:w="120"/><text x="10.8290%" y="591.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (116 samples, 0.10%)</title><rect x="10.5825%" y="565" width="0.1018%" height="15" fill="rgb(246,160,12)" fg:x="12054" fg:w="116"/><text x="10.8325%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_query::MapQuery&lt;K&gt; as core::hash::Hash&gt;::hash (113 samples, 0.10%)</title><rect x="10.5851%" y="549" width="0.0992%" height="15" fill="rgb(247,166,0)" fg:x="12057" fg:w="113"/><text x="10.8351%" y="559.50"></text></g><g><title>hashbrown::raw::inner::h2 (12 samples, 0.01%)</title><rect x="10.7019%" y="533" width="0.0105%" height="15" fill="rgb(249,219,21)" fg:x="12190" fg:w="12"/><text x="10.9519%" y="543.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (13 samples, 0.01%)</title><rect x="10.7124%" y="533" width="0.0114%" height="15" fill="rgb(205,209,3)" fg:x="12202" fg:w="13"/><text x="10.9624%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (13 samples, 0.01%)</title><rect x="10.7124%" y="517" width="0.0114%" height="15" fill="rgb(243,44,1)" fg:x="12202" fg:w="13"/><text x="10.9624%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13 samples, 0.01%)</title><rect x="10.7124%" y="501" width="0.0114%" height="15" fill="rgb(206,159,16)" fg:x="12202" fg:w="13"/><text x="10.9624%" y="511.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (23 samples, 0.02%)</title><rect x="10.7238%" y="533" width="0.0202%" height="15" fill="rgb(244,77,30)" fg:x="12215" fg:w="23"/><text x="10.9738%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (23 samples, 0.02%)</title><rect x="10.7238%" y="517" width="0.0202%" height="15" fill="rgb(218,69,12)" fg:x="12215" fg:w="23"/><text x="10.9738%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (87 samples, 0.08%)</title><rect x="10.6843%" y="581" width="0.0764%" height="15" fill="rgb(212,87,7)" fg:x="12170" fg:w="87"/><text x="10.9343%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (87 samples, 0.08%)</title><rect x="10.6843%" y="565" width="0.0764%" height="15" fill="rgb(245,114,25)" fg:x="12170" fg:w="87"/><text x="10.9343%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (87 samples, 0.08%)</title><rect x="10.6843%" y="549" width="0.0764%" height="15" fill="rgb(210,61,42)" fg:x="12170" fg:w="87"/><text x="10.9343%" y="559.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty (19 samples, 0.02%)</title><rect x="10.7440%" y="533" width="0.0167%" height="15" fill="rgb(211,52,33)" fg:x="12238" fg:w="19"/><text x="10.9940%" y="543.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (19 samples, 0.02%)</title><rect x="10.7440%" y="517" width="0.0167%" height="15" fill="rgb(234,58,33)" fg:x="12238" fg:w="19"/><text x="10.9940%" y="527.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (19 samples, 0.02%)</title><rect x="10.7440%" y="501" width="0.0167%" height="15" fill="rgb(220,115,36)" fg:x="12238" fg:w="19"/><text x="10.9940%" y="511.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (222 samples, 0.19%)</title><rect x="10.5667%" y="693" width="0.1949%" height="15" fill="rgb(243,153,54)" fg:x="12036" fg:w="222"/><text x="10.8167%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (216 samples, 0.19%)</title><rect x="10.5720%" y="677" width="0.1896%" height="15" fill="rgb(251,47,18)" fg:x="12042" fg:w="216"/><text x="10.8220%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (216 samples, 0.19%)</title><rect x="10.5720%" y="661" width="0.1896%" height="15" fill="rgb(242,102,42)" fg:x="12042" fg:w="216"/><text x="10.8220%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem::{{closure}} (216 samples, 0.19%)</title><rect x="10.5720%" y="645" width="0.1896%" height="15" fill="rgb(234,31,38)" fg:x="12042" fg:w="216"/><text x="10.8220%" y="655.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (211 samples, 0.19%)</title><rect x="10.5764%" y="629" width="0.1852%" height="15" fill="rgb(221,117,51)" fg:x="12047" fg:w="211"/><text x="10.8264%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (210 samples, 0.18%)</title><rect x="10.5772%" y="613" width="0.1844%" height="15" fill="rgb(212,20,18)" fg:x="12048" fg:w="210"/><text x="10.8272%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (208 samples, 0.18%)</title><rect x="10.5790%" y="597" width="0.1826%" height="15" fill="rgb(245,133,36)" fg:x="12050" fg:w="208"/><text x="10.8290%" y="607.50"></text></g><g><title>value_trait::ValueAccess::get (298 samples, 0.26%)</title><rect x="10.5052%" y="773" width="0.2616%" height="15" fill="rgb(212,6,19)" fg:x="11966" fg:w="298"/><text x="10.7552%" y="783.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (298 samples, 0.26%)</title><rect x="10.5052%" y="757" width="0.2616%" height="15" fill="rgb(218,1,36)" fg:x="11966" fg:w="298"/><text x="10.7552%" y="767.50"></text></g><g><title>value_trait::ValueAccess::get::{{closure}} (298 samples, 0.26%)</title><rect x="10.5052%" y="741" width="0.2616%" height="15" fill="rgb(246,84,54)" fg:x="11966" fg:w="298"/><text x="10.7552%" y="751.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;MapK,MapE,S&gt; as value_trait::object::Object&gt;::get (298 samples, 0.26%)</title><rect x="10.5052%" y="725" width="0.2616%" height="15" fill="rgb(242,110,6)" fg:x="11966" fg:w="298"/><text x="10.7552%" y="735.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::get (298 samples, 0.26%)</title><rect x="10.5052%" y="709" width="0.2616%" height="15" fill="rgb(214,47,5)" fg:x="11966" fg:w="298"/><text x="10.7552%" y="719.50"></text></g><g><title>abi_stable::std_types::map::_::&lt;impl abi_stable::std_types::map::VTable_Ref&lt;K,V,S&gt;&gt;::get_elem (16 samples, 0.01%)</title><rect x="10.8845%" y="677" width="0.0140%" height="15" fill="rgb(218,159,25)" fg:x="12398" fg:w="16"/><text x="11.1345%" y="687.50"></text></g><g><title>hashbrown::map::make_hash (116 samples, 0.10%)</title><rect x="10.9117%" y="565" width="0.1018%" height="15" fill="rgb(215,211,28)" fg:x="12429" fg:w="116"/><text x="11.1617%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (112 samples, 0.10%)</title><rect x="10.9152%" y="549" width="0.0983%" height="15" fill="rgb(238,59,32)" fg:x="12433" fg:w="112"/><text x="11.1652%" y="559.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_query::MapQuery&lt;K&gt; as core::hash::Hash&gt;::hash (108 samples, 0.09%)</title><rect x="10.9187%" y="533" width="0.0948%" height="15" fill="rgb(226,82,3)" fg:x="12437" fg:w="108"/><text x="11.1687%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.02%)</title><rect x="11.0197%" y="517" width="0.0193%" height="15" fill="rgb(240,164,32)" fg:x="12552" fg:w="22"/><text x="11.2697%" y="527.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (22 samples, 0.02%)</title><rect x="11.0197%" y="501" width="0.0193%" height="15" fill="rgb(232,46,7)" fg:x="12552" fg:w="22"/><text x="11.2697%" y="511.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (24 samples, 0.02%)</title><rect x="11.0390%" y="501" width="0.0211%" height="15" fill="rgb(229,129,53)" fg:x="12574" fg:w="24"/><text x="11.2890%" y="511.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (16 samples, 0.01%)</title><rect x="11.0460%" y="485" width="0.0140%" height="15" fill="rgb(234,188,29)" fg:x="12582" fg:w="16"/><text x="11.2960%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (44 samples, 0.04%)</title><rect x="11.0390%" y="517" width="0.0386%" height="15" fill="rgb(246,141,4)" fg:x="12574" fg:w="44"/><text x="11.2890%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::bucket (17 samples, 0.01%)</title><rect x="11.0627%" y="501" width="0.0149%" height="15" fill="rgb(229,23,39)" fg:x="12601" fg:w="17"/><text x="11.3127%" y="511.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::from_base_index (17 samples, 0.01%)</title><rect x="11.0627%" y="485" width="0.0149%" height="15" fill="rgb(206,12,3)" fg:x="12601" fg:w="17"/><text x="11.3127%" y="495.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (238 samples, 0.21%)</title><rect x="10.8986%" y="677" width="0.2089%" height="15" fill="rgb(252,226,20)" fg:x="12414" fg:w="238"/><text x="11.1486%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (236 samples, 0.21%)</title><rect x="10.9003%" y="661" width="0.2072%" height="15" fill="rgb(216,123,35)" fg:x="12416" fg:w="236"/><text x="11.1503%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (235 samples, 0.21%)</title><rect x="10.9012%" y="645" width="0.2063%" height="15" fill="rgb(212,68,40)" fg:x="12417" fg:w="235"/><text x="11.1512%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem::{{closure}} (235 samples, 0.21%)</title><rect x="10.9012%" y="629" width="0.2063%" height="15" fill="rgb(254,125,32)" fg:x="12417" fg:w="235"/><text x="11.1512%" y="639.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (230 samples, 0.20%)</title><rect x="10.9056%" y="613" width="0.2019%" height="15" fill="rgb(253,97,22)" fg:x="12422" fg:w="230"/><text x="11.1556%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (223 samples, 0.20%)</title><rect x="10.9117%" y="597" width="0.1958%" height="15" fill="rgb(241,101,14)" fg:x="12429" fg:w="223"/><text x="11.1617%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (223 samples, 0.20%)</title><rect x="10.9117%" y="581" width="0.1958%" height="15" fill="rgb(238,103,29)" fg:x="12429" fg:w="223"/><text x="11.1617%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (107 samples, 0.09%)</title><rect x="11.0136%" y="565" width="0.0939%" height="15" fill="rgb(233,195,47)" fg:x="12545" fg:w="107"/><text x="11.2636%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (107 samples, 0.09%)</title><rect x="11.0136%" y="549" width="0.0939%" height="15" fill="rgb(246,218,30)" fg:x="12545" fg:w="107"/><text x="11.2636%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (107 samples, 0.09%)</title><rect x="11.0136%" y="533" width="0.0939%" height="15" fill="rgb(219,145,47)" fg:x="12545" fg:w="107"/><text x="11.2636%" y="543.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (12 samples, 0.01%)</title><rect x="11.0970%" y="517" width="0.0105%" height="15" fill="rgb(243,12,26)" fg:x="12640" fg:w="12"/><text x="11.3470%" y="527.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (12 samples, 0.01%)</title><rect x="11.0970%" y="501" width="0.0105%" height="15" fill="rgb(214,87,16)" fg:x="12640" fg:w="12"/><text x="11.3470%" y="511.50"></text></g><g><title>value_trait::ValueAccess::get_str (394 samples, 0.35%)</title><rect x="10.7669%" y="773" width="0.3459%" height="15" fill="rgb(208,99,42)" fg:x="12264" fg:w="394"/><text x="11.0169%" y="783.50"></text></g><g><title>value_trait::ValueAccess::get (383 samples, 0.34%)</title><rect x="10.7765%" y="757" width="0.3362%" height="15" fill="rgb(253,99,2)" fg:x="12275" fg:w="383"/><text x="11.0265%" y="767.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (381 samples, 0.33%)</title><rect x="10.7783%" y="741" width="0.3345%" height="15" fill="rgb(220,168,23)" fg:x="12277" fg:w="381"/><text x="11.0283%" y="751.50"></text></g><g><title>value_trait::ValueAccess::get::{{closure}} (377 samples, 0.33%)</title><rect x="10.7818%" y="725" width="0.3310%" height="15" fill="rgb(242,38,24)" fg:x="12281" fg:w="377"/><text x="11.0318%" y="735.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;MapK,MapE,S&gt; as value_trait::object::Object&gt;::get (377 samples, 0.33%)</title><rect x="10.7818%" y="709" width="0.3310%" height="15" fill="rgb(225,182,9)" fg:x="12281" fg:w="377"/><text x="11.0318%" y="719.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::get (377 samples, 0.33%)</title><rect x="10.7818%" y="693" width="0.3310%" height="15" fill="rgb(243,178,37)" fg:x="12281" fg:w="377"/><text x="11.0318%" y="703.50"></text></g><g><title>&lt;u64 as core::ops::arith::Add&gt;::add (34 samples, 0.03%)</title><rect x="11.1365%" y="725" width="0.0298%" height="15" fill="rgb(232,139,19)" fg:x="12685" fg:w="34"/><text x="11.3865%" y="735.50"></text></g><g><title>window::SlidingWindow&lt;T&gt;::add (49 samples, 0.04%)</title><rect x="11.1268%" y="741" width="0.0430%" height="15" fill="rgb(225,201,24)" fg:x="12674" fg:w="49"/><text x="11.3768%" y="751.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (2,624 samples, 2.30%)</title><rect x="8.8670%" y="869" width="2.3037%" height="15" fill="rgb(221,47,46)" fg:x="10100" fg:w="2624"/><text x="9.1170%" y="879.50">t..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (2,624 samples, 2.30%)</title><rect x="8.8670%" y="853" width="2.3037%" height="15" fill="rgb(249,23,13)" fg:x="10100" fg:w="2624"/><text x="9.1170%" y="863.50">t..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (2,624 samples, 2.30%)</title><rect x="8.8670%" y="837" width="2.3037%" height="15" fill="rgb(219,9,5)" fg:x="10100" fg:w="2624"/><text x="9.1170%" y="847.50">t..</text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (2,624 samples, 2.30%)</title><rect x="8.8670%" y="821" width="2.3037%" height="15" fill="rgb(254,171,16)" fg:x="10100" fg:w="2624"/><text x="9.1170%" y="831.50">&lt;..</text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (2,624 samples, 2.30%)</title><rect x="8.8670%" y="805" width="2.3037%" height="15" fill="rgb(230,171,20)" fg:x="10100" fg:w="2624"/><text x="9.1170%" y="815.50">&lt;..</text></g><g><title>&lt;tremor_pipeline::op::grouper::bucket::Grouper as tremor_pipeline::op::Operator&gt;::on_event (2,624 samples, 2.30%)</title><rect x="8.8670%" y="789" width="2.3037%" height="15" fill="rgb(210,71,41)" fg:x="10100" fg:w="2624"/><text x="9.1170%" y="799.50">&lt;..</text></g><g><title>window::TimeWindow::inc_t (66 samples, 0.06%)</title><rect x="11.1128%" y="773" width="0.0579%" height="15" fill="rgb(206,173,20)" fg:x="12658" fg:w="66"/><text x="11.3628%" y="783.50"></text></g><g><title>window::TimeWindow::add_t (64 samples, 0.06%)</title><rect x="11.1145%" y="757" width="0.0562%" height="15" fill="rgb(233,88,34)" fg:x="12660" fg:w="64"/><text x="11.3645%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (24 samples, 0.02%)</title><rect x="11.1716%" y="853" width="0.0211%" height="15" fill="rgb(223,209,46)" fg:x="12725" fg:w="24"/><text x="11.4216%" y="863.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.02%)</title><rect x="11.1716%" y="837" width="0.0211%" height="15" fill="rgb(250,43,18)" fg:x="12725" fg:w="24"/><text x="11.4216%" y="847.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (69 samples, 0.06%)</title><rect x="11.2041%" y="821" width="0.0606%" height="15" fill="rgb(208,13,10)" fg:x="12762" fg:w="69"/><text x="11.4541%" y="831.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (62 samples, 0.05%)</title><rect x="11.2102%" y="805" width="0.0544%" height="15" fill="rgb(212,200,36)" fg:x="12769" fg:w="62"/><text x="11.4602%" y="815.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (62 samples, 0.05%)</title><rect x="11.2102%" y="789" width="0.0544%" height="15" fill="rgb(225,90,30)" fg:x="12769" fg:w="62"/><text x="11.4602%" y="799.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (62 samples, 0.05%)</title><rect x="11.2102%" y="773" width="0.0544%" height="15" fill="rgb(236,182,39)" fg:x="12769" fg:w="62"/><text x="11.4602%" y="783.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (62 samples, 0.05%)</title><rect x="11.2102%" y="757" width="0.0544%" height="15" fill="rgb(212,144,35)" fg:x="12769" fg:w="62"/><text x="11.4602%" y="767.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (62 samples, 0.05%)</title><rect x="11.2102%" y="741" width="0.0544%" height="15" fill="rgb(228,63,44)" fg:x="12769" fg:w="62"/><text x="11.4602%" y="751.50"></text></g><g><title>[libc-2.31.so] (48 samples, 0.04%)</title><rect x="11.2225%" y="725" width="0.0421%" height="15" fill="rgb(228,109,6)" fg:x="12783" fg:w="48"/><text x="11.4725%" y="735.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (5,456 samples, 4.79%)</title><rect x="6.4791%" y="1029" width="4.7900%" height="15" fill="rgb(238,117,24)" fg:x="7380" fg:w="5456"/><text x="6.7291%" y="1039.50">async_..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (5,456 samples, 4.79%)</title><rect x="6.4791%" y="1013" width="4.7900%" height="15" fill="rgb(242,26,26)" fg:x="7380" fg:w="5456"/><text x="6.7291%" y="1023.50">&lt;async..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (5,456 samples, 4.79%)</title><rect x="6.4791%" y="997" width="4.7900%" height="15" fill="rgb(221,92,48)" fg:x="7380" fg:w="5456"/><text x="6.7291%" y="1007.50">async_..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (5,456 samples, 4.79%)</title><rect x="6.4791%" y="981" width="4.7900%" height="15" fill="rgb(209,209,32)" fg:x="7380" fg:w="5456"/><text x="6.7291%" y="991.50">std::t..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (5,456 samples, 4.79%)</title><rect x="6.4791%" y="965" width="4.7900%" height="15" fill="rgb(221,70,22)" fg:x="7380" fg:w="5456"/><text x="6.7291%" y="975.50">std::t..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (5,456 samples, 4.79%)</title><rect x="6.4791%" y="949" width="4.7900%" height="15" fill="rgb(248,145,5)" fg:x="7380" fg:w="5456"/><text x="6.7291%" y="959.50">async_..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (5,456 samples, 4.79%)</title><rect x="6.4791%" y="933" width="4.7900%" height="15" fill="rgb(226,116,26)" fg:x="7380" fg:w="5456"/><text x="6.7291%" y="943.50">&lt;async..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,456 samples, 4.79%)</title><rect x="6.4791%" y="917" width="4.7900%" height="15" fill="rgb(244,5,17)" fg:x="7380" fg:w="5456"/><text x="6.7291%" y="927.50">&lt;core:..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (3,180 samples, 2.79%)</title><rect x="8.4772%" y="901" width="2.7918%" height="15" fill="rgb(252,159,33)" fg:x="9656" fg:w="3180"/><text x="8.7272%" y="911.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,736 samples, 2.40%)</title><rect x="8.8670%" y="885" width="2.4020%" height="15" fill="rgb(206,71,0)" fg:x="10100" fg:w="2736"/><text x="9.1170%" y="895.50">&lt;c..</text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (112 samples, 0.10%)</title><rect x="11.1707%" y="869" width="0.0983%" height="15" fill="rgb(233,118,54)" fg:x="12724" fg:w="112"/><text x="11.4207%" y="879.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (87 samples, 0.08%)</title><rect x="11.1927%" y="853" width="0.0764%" height="15" fill="rgb(234,83,48)" fg:x="12749" fg:w="87"/><text x="11.4427%" y="863.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get_mut (82 samples, 0.07%)</title><rect x="11.1971%" y="837" width="0.0720%" height="15" fill="rgb(228,3,54)" fg:x="12754" fg:w="82"/><text x="11.4471%" y="847.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (69 samples, 0.06%)</title><rect x="11.2998%" y="677" width="0.0606%" height="15" fill="rgb(226,155,13)" fg:x="12871" fg:w="69"/><text x="11.5498%" y="687.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (99 samples, 0.09%)</title><rect x="11.2743%" y="837" width="0.0869%" height="15" fill="rgb(241,28,37)" fg:x="12842" fg:w="99"/><text x="11.5243%" y="847.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (99 samples, 0.09%)</title><rect x="11.2743%" y="821" width="0.0869%" height="15" fill="rgb(233,93,10)" fg:x="12842" fg:w="99"/><text x="11.5243%" y="831.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (93 samples, 0.08%)</title><rect x="11.2796%" y="805" width="0.0816%" height="15" fill="rgb(225,113,19)" fg:x="12848" fg:w="93"/><text x="11.5296%" y="815.50"></text></g><g><title>alloc::alloc::exchange_malloc (87 samples, 0.08%)</title><rect x="11.2848%" y="789" width="0.0764%" height="15" fill="rgb(241,2,18)" fg:x="12854" fg:w="87"/><text x="11.5348%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (87 samples, 0.08%)</title><rect x="11.2848%" y="773" width="0.0764%" height="15" fill="rgb(228,207,21)" fg:x="12854" fg:w="87"/><text x="11.5348%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (87 samples, 0.08%)</title><rect x="11.2848%" y="757" width="0.0764%" height="15" fill="rgb(213,211,35)" fg:x="12854" fg:w="87"/><text x="11.5348%" y="767.50"></text></g><g><title>alloc::alloc::alloc (87 samples, 0.08%)</title><rect x="11.2848%" y="741" width="0.0764%" height="15" fill="rgb(209,83,10)" fg:x="12854" fg:w="87"/><text x="11.5348%" y="751.50"></text></g><g><title>__rg_alloc (87 samples, 0.08%)</title><rect x="11.2848%" y="725" width="0.0764%" height="15" fill="rgb(209,164,1)" fg:x="12854" fg:w="87"/><text x="11.5348%" y="735.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (87 samples, 0.08%)</title><rect x="11.2848%" y="709" width="0.0764%" height="15" fill="rgb(213,184,43)" fg:x="12854" fg:w="87"/><text x="11.5348%" y="719.50"></text></g><g><title>sn_rust_alloc (87 samples, 0.08%)</title><rect x="11.2848%" y="693" width="0.0764%" height="15" fill="rgb(231,61,34)" fg:x="12854" fg:w="87"/><text x="11.5348%" y="703.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::default::Default&gt;::default (115 samples, 0.10%)</title><rect x="11.2726%" y="901" width="0.1010%" height="15" fill="rgb(235,75,3)" fg:x="12840" fg:w="115"/><text x="11.5226%" y="911.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (115 samples, 0.10%)</title><rect x="11.2726%" y="885" width="0.1010%" height="15" fill="rgb(220,106,47)" fg:x="12840" fg:w="115"/><text x="11.5226%" y="895.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (115 samples, 0.10%)</title><rect x="11.2726%" y="869" width="0.1010%" height="15" fill="rgb(210,196,33)" fg:x="12840" fg:w="115"/><text x="11.5226%" y="879.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (115 samples, 0.10%)</title><rect x="11.2726%" y="853" width="0.1010%" height="15" fill="rgb(229,154,42)" fg:x="12840" fg:w="115"/><text x="11.5226%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (14 samples, 0.01%)</title><rect x="11.3612%" y="837" width="0.0123%" height="15" fill="rgb(228,114,26)" fg:x="12941" fg:w="14"/><text x="11.6112%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (13 samples, 0.01%)</title><rect x="11.3621%" y="821" width="0.0114%" height="15" fill="rgb(208,144,1)" fg:x="12942" fg:w="13"/><text x="11.6121%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (13 samples, 0.01%)</title><rect x="11.3621%" y="805" width="0.0114%" height="15" fill="rgb(239,112,37)" fg:x="12942" fg:w="13"/><text x="11.6121%" y="815.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (13 samples, 0.01%)</title><rect x="11.3621%" y="789" width="0.0114%" height="15" fill="rgb(210,96,50)" fg:x="12942" fg:w="13"/><text x="11.6121%" y="799.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (13 samples, 0.01%)</title><rect x="11.3621%" y="773" width="0.0114%" height="15" fill="rgb(222,178,2)" fg:x="12942" fg:w="13"/><text x="11.6121%" y="783.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (198 samples, 0.17%)</title><rect x="11.5043%" y="613" width="0.1738%" height="15" fill="rgb(226,74,18)" fg:x="13104" fg:w="198"/><text x="11.7543%" y="623.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (295 samples, 0.26%)</title><rect x="11.4218%" y="773" width="0.2590%" height="15" fill="rgb(225,67,54)" fg:x="13010" fg:w="295"/><text x="11.6718%" y="783.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (295 samples, 0.26%)</title><rect x="11.4218%" y="757" width="0.2590%" height="15" fill="rgb(251,92,32)" fg:x="13010" fg:w="295"/><text x="11.6718%" y="767.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (276 samples, 0.24%)</title><rect x="11.4385%" y="741" width="0.2423%" height="15" fill="rgb(228,149,22)" fg:x="13029" fg:w="276"/><text x="11.6885%" y="751.50"></text></g><g><title>alloc::alloc::exchange_malloc (266 samples, 0.23%)</title><rect x="11.4473%" y="725" width="0.2335%" height="15" fill="rgb(243,54,13)" fg:x="13039" fg:w="266"/><text x="11.6973%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (266 samples, 0.23%)</title><rect x="11.4473%" y="709" width="0.2335%" height="15" fill="rgb(243,180,28)" fg:x="13039" fg:w="266"/><text x="11.6973%" y="719.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (266 samples, 0.23%)</title><rect x="11.4473%" y="693" width="0.2335%" height="15" fill="rgb(208,167,24)" fg:x="13039" fg:w="266"/><text x="11.6973%" y="703.50"></text></g><g><title>alloc::alloc::alloc (264 samples, 0.23%)</title><rect x="11.4490%" y="677" width="0.2318%" height="15" fill="rgb(245,73,45)" fg:x="13041" fg:w="264"/><text x="11.6990%" y="687.50"></text></g><g><title>__rg_alloc (264 samples, 0.23%)</title><rect x="11.4490%" y="661" width="0.2318%" height="15" fill="rgb(237,203,48)" fg:x="13041" fg:w="264"/><text x="11.6990%" y="671.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (264 samples, 0.23%)</title><rect x="11.4490%" y="645" width="0.2318%" height="15" fill="rgb(211,197,16)" fg:x="13041" fg:w="264"/><text x="11.6990%" y="655.50"></text></g><g><title>sn_rust_alloc (264 samples, 0.23%)</title><rect x="11.4490%" y="629" width="0.2318%" height="15" fill="rgb(243,99,51)" fg:x="13041" fg:w="264"/><text x="11.6990%" y="639.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (327 samples, 0.29%)</title><rect x="11.4078%" y="821" width="0.2871%" height="15" fill="rgb(215,123,29)" fg:x="12994" fg:w="327"/><text x="11.6578%" y="831.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (325 samples, 0.29%)</title><rect x="11.4095%" y="805" width="0.2853%" height="15" fill="rgb(239,186,37)" fg:x="12996" fg:w="325"/><text x="11.6595%" y="815.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (325 samples, 0.29%)</title><rect x="11.4095%" y="789" width="0.2853%" height="15" fill="rgb(252,136,39)" fg:x="12996" fg:w="325"/><text x="11.6595%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (16 samples, 0.01%)</title><rect x="11.6808%" y="773" width="0.0140%" height="15" fill="rgb(223,213,32)" fg:x="13305" fg:w="16"/><text x="11.9308%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (15 samples, 0.01%)</title><rect x="11.6817%" y="757" width="0.0132%" height="15" fill="rgb(233,115,5)" fg:x="13306" fg:w="15"/><text x="11.9317%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (15 samples, 0.01%)</title><rect x="11.6817%" y="741" width="0.0132%" height="15" fill="rgb(207,226,44)" fg:x="13306" fg:w="15"/><text x="11.9317%" y="751.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (15 samples, 0.01%)</title><rect x="11.6817%" y="725" width="0.0132%" height="15" fill="rgb(208,126,0)" fg:x="13306" fg:w="15"/><text x="11.9317%" y="735.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (15 samples, 0.01%)</title><rect x="11.6817%" y="709" width="0.0132%" height="15" fill="rgb(244,66,21)" fg:x="13306" fg:w="15"/><text x="11.9317%" y="719.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (335 samples, 0.29%)</title><rect x="11.4078%" y="837" width="0.2941%" height="15" fill="rgb(222,97,12)" fg:x="12994" fg:w="335"/><text x="11.6578%" y="847.50"></text></g><g><title>&lt;tremor_pipeline::event::Event as core::default::Default&gt;::default (775 samples, 0.68%)</title><rect x="11.2726%" y="917" width="0.6804%" height="15" fill="rgb(219,213,19)" fg:x="12840" fg:w="775"/><text x="11.5226%" y="927.50"></text></g><g><title>&lt;tremor_script::srs::EventPayload as core::default::Default&gt;::default (660 samples, 0.58%)</title><rect x="11.3735%" y="901" width="0.5794%" height="15" fill="rgb(252,169,30)" fg:x="12955" fg:w="660"/><text x="11.6235%" y="911.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (660 samples, 0.58%)</title><rect x="11.3735%" y="885" width="0.5794%" height="15" fill="rgb(206,32,51)" fg:x="12955" fg:w="660"/><text x="11.6235%" y="895.50"></text></g><g><title>value_trait::Builder::object (621 samples, 0.55%)</title><rect x="11.4078%" y="869" width="0.5452%" height="15" fill="rgb(250,172,42)" fg:x="12994" fg:w="621"/><text x="11.6578%" y="879.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (621 samples, 0.55%)</title><rect x="11.4078%" y="853" width="0.5452%" height="15" fill="rgb(209,34,43)" fg:x="12994" fg:w="621"/><text x="11.6578%" y="863.50"></text></g><g><title>tremor_value::value::Value::Object (286 samples, 0.25%)</title><rect x="11.7019%" y="837" width="0.2511%" height="15" fill="rgb(223,11,35)" fg:x="13329" fg:w="286"/><text x="11.9519%" y="847.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (806 samples, 0.71%)</title><rect x="11.2726%" y="933" width="0.7076%" height="15" fill="rgb(251,219,26)" fg:x="12840" fg:w="806"/><text x="11.5226%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (31 samples, 0.03%)</title><rect x="11.9529%" y="917" width="0.0272%" height="15" fill="rgb(231,119,3)" fg:x="13615" fg:w="31"/><text x="12.2029%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (13 samples, 0.01%)</title><rect x="11.9687%" y="901" width="0.0114%" height="15" fill="rgb(216,97,11)" fg:x="13633" fg:w="13"/><text x="12.2187%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (13 samples, 0.01%)</title><rect x="11.9687%" y="885" width="0.0114%" height="15" fill="rgb(223,59,9)" fg:x="13633" fg:w="13"/><text x="12.2187%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (13 samples, 0.01%)</title><rect x="11.9687%" y="869" width="0.0114%" height="15" fill="rgb(233,93,31)" fg:x="13633" fg:w="13"/><text x="12.2187%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="11.9687%" y="853" width="0.0114%" height="15" fill="rgb(239,81,33)" fg:x="13633" fg:w="13"/><text x="12.2187%" y="863.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (13 samples, 0.01%)</title><rect x="11.9687%" y="837" width="0.0114%" height="15" fill="rgb(213,120,34)" fg:x="13633" fg:w="13"/><text x="12.2187%" y="847.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (13 samples, 0.01%)</title><rect x="11.9687%" y="821" width="0.0114%" height="15" fill="rgb(243,49,53)" fg:x="13633" fg:w="13"/><text x="12.2187%" y="831.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (45 samples, 0.04%)</title><rect x="12.0820%" y="917" width="0.0395%" height="15" fill="rgb(247,216,33)" fg:x="13762" fg:w="45"/><text x="12.3320%" y="927.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (14 samples, 0.01%)</title><rect x="12.1461%" y="773" width="0.0123%" height="15" fill="rgb(226,26,14)" fg:x="13835" fg:w="14"/><text x="12.3961%" y="783.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::new (43 samples, 0.04%)</title><rect x="12.1215%" y="917" width="0.0378%" height="15" fill="rgb(215,49,53)" fg:x="13807" fg:w="43"/><text x="12.3715%" y="927.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (42 samples, 0.04%)</title><rect x="12.1224%" y="901" width="0.0369%" height="15" fill="rgb(245,162,40)" fg:x="13808" fg:w="42"/><text x="12.3724%" y="911.50"></text></g><g><title>alloc::alloc::exchange_malloc (32 samples, 0.03%)</title><rect x="12.1312%" y="885" width="0.0281%" height="15" fill="rgb(229,68,17)" fg:x="13818" fg:w="32"/><text x="12.3812%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (32 samples, 0.03%)</title><rect x="12.1312%" y="869" width="0.0281%" height="15" fill="rgb(213,182,10)" fg:x="13818" fg:w="32"/><text x="12.3812%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (32 samples, 0.03%)</title><rect x="12.1312%" y="853" width="0.0281%" height="15" fill="rgb(245,125,30)" fg:x="13818" fg:w="32"/><text x="12.3812%" y="863.50"></text></g><g><title>alloc::alloc::alloc (30 samples, 0.03%)</title><rect x="12.1329%" y="837" width="0.0263%" height="15" fill="rgb(232,202,2)" fg:x="13820" fg:w="30"/><text x="12.3829%" y="847.50"></text></g><g><title>__rg_alloc (30 samples, 0.03%)</title><rect x="12.1329%" y="821" width="0.0263%" height="15" fill="rgb(237,140,51)" fg:x="13820" fg:w="30"/><text x="12.3829%" y="831.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (30 samples, 0.03%)</title><rect x="12.1329%" y="805" width="0.0263%" height="15" fill="rgb(236,157,25)" fg:x="13820" fg:w="30"/><text x="12.3829%" y="815.50"></text></g><g><title>sn_rust_alloc (25 samples, 0.02%)</title><rect x="12.1373%" y="789" width="0.0219%" height="15" fill="rgb(219,209,0)" fg:x="13825" fg:w="25"/><text x="12.3873%" y="799.50"></text></g><g><title>alloc::alloc::exchange_malloc (26 samples, 0.02%)</title><rect x="12.1593%" y="917" width="0.0228%" height="15" fill="rgb(240,116,54)" fg:x="13850" fg:w="26"/><text x="12.4093%" y="927.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (26 samples, 0.02%)</title><rect x="12.1593%" y="901" width="0.0228%" height="15" fill="rgb(216,10,36)" fg:x="13850" fg:w="26"/><text x="12.4093%" y="911.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (26 samples, 0.02%)</title><rect x="12.1593%" y="885" width="0.0228%" height="15" fill="rgb(222,72,44)" fg:x="13850" fg:w="26"/><text x="12.4093%" y="895.50"></text></g><g><title>alloc::alloc::alloc (22 samples, 0.02%)</title><rect x="12.1628%" y="869" width="0.0193%" height="15" fill="rgb(232,159,9)" fg:x="13854" fg:w="22"/><text x="12.4128%" y="879.50"></text></g><g><title>__rg_alloc (22 samples, 0.02%)</title><rect x="12.1628%" y="853" width="0.0193%" height="15" fill="rgb(210,39,32)" fg:x="13854" fg:w="22"/><text x="12.4128%" y="863.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (22 samples, 0.02%)</title><rect x="12.1628%" y="837" width="0.0193%" height="15" fill="rgb(216,194,45)" fg:x="13854" fg:w="22"/><text x="12.4128%" y="847.50"></text></g><g><title>sn_rust_alloc (19 samples, 0.02%)</title><rect x="12.1654%" y="821" width="0.0167%" height="15" fill="rgb(218,18,35)" fg:x="13857" fg:w="19"/><text x="12.4154%" y="831.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (61 samples, 0.05%)</title><rect x="12.2804%" y="885" width="0.0536%" height="15" fill="rgb(207,83,51)" fg:x="13988" fg:w="61"/><text x="12.5304%" y="895.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (41 samples, 0.04%)</title><rect x="12.3340%" y="885" width="0.0360%" height="15" fill="rgb(225,63,43)" fg:x="14049" fg:w="41"/><text x="12.5840%" y="895.50"></text></g><g><title>core::str::converts::from_utf8 (667 samples, 0.59%)</title><rect x="14.0240%" y="677" width="0.5856%" height="15" fill="rgb(207,57,36)" fg:x="15974" fg:w="667"/><text x="14.2740%" y="687.50"></text></g><g><title>core::str::validations::run_utf8_validation (629 samples, 0.55%)</title><rect x="14.0573%" y="661" width="0.5522%" height="15" fill="rgb(216,99,33)" fg:x="16012" fg:w="629"/><text x="14.3073%" y="671.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::read_str_data (2,337 samples, 2.05%)</title><rect x="12.6535%" y="693" width="2.0517%" height="15" fill="rgb(225,42,16)" fg:x="14413" fg:w="2337"/><text x="12.9035%" y="703.50">r..</text></g><g><title>rmp_serde::decode::read_bin_data (109 samples, 0.10%)</title><rect x="14.6095%" y="677" width="0.0957%" height="15" fill="rgb(220,201,45)" fg:x="16641" fg:w="109"/><text x="14.8595%" y="687.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as rmp_serde::decode::ReadSlice&gt;::read_slice (109 samples, 0.10%)</title><rect x="14.6095%" y="661" width="0.0957%" height="15" fill="rgb(225,33,4)" fg:x="16641" fg:w="109"/><text x="14.8595%" y="671.50"></text></g><g><title>rmp::decode::RmpRead::read_u8 (66 samples, 0.06%)</title><rect x="14.7052%" y="629" width="0.0579%" height="15" fill="rgb(224,33,50)" fg:x="16750" fg:w="66"/><text x="14.9552%" y="639.50"></text></g><g><title>&lt;T as rmp::decode::RmpRead&gt;::read_exact_buf (66 samples, 0.06%)</title><rect x="14.7052%" y="613" width="0.0579%" height="15" fill="rgb(246,198,51)" fg:x="16750" fg:w="66"/><text x="14.9552%" y="623.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as std::io::Read&gt;::read_exact (66 samples, 0.06%)</title><rect x="14.7052%" y="597" width="0.0579%" height="15" fill="rgb(205,22,4)" fg:x="16750" fg:w="66"/><text x="14.9552%" y="607.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_exact (66 samples, 0.06%)</title><rect x="14.7052%" y="581" width="0.0579%" height="15" fill="rgb(206,3,8)" fg:x="16750" fg:w="66"/><text x="14.9552%" y="591.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (198 samples, 0.17%)</title><rect x="14.7052%" y="677" width="0.1738%" height="15" fill="rgb(251,23,15)" fg:x="16750" fg:w="198"/><text x="14.9552%" y="687.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker::{{closure}} (198 samples, 0.17%)</title><rect x="14.7052%" y="661" width="0.1738%" height="15" fill="rgb(252,88,28)" fg:x="16750" fg:w="198"/><text x="14.9552%" y="671.50"></text></g><g><title>rmp::decode::read_marker (198 samples, 0.17%)</title><rect x="14.7052%" y="645" width="0.1738%" height="15" fill="rgb(212,127,14)" fg:x="16750" fg:w="198"/><text x="14.9552%" y="655.50"></text></g><g><title>rmp::marker::Marker::from_u8 (132 samples, 0.12%)</title><rect x="14.7632%" y="629" width="0.1159%" height="15" fill="rgb(247,145,37)" fg:x="16816" fg:w="132"/><text x="15.0132%" y="639.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2,658 samples, 2.33%)</title><rect x="12.5473%" y="757" width="2.3335%" height="15" fill="rgb(209,117,53)" fg:x="14292" fg:w="2658"/><text x="12.7973%" y="767.50">&lt;..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for &amp;str&gt;::deserialize (2,658 samples, 2.33%)</title><rect x="12.5473%" y="741" width="2.3335%" height="15" fill="rgb(212,90,42)" fg:x="14292" fg:w="2658"/><text x="12.7973%" y="751.50">s..</text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_str (2,658 samples, 2.33%)</title><rect x="12.5473%" y="725" width="2.3335%" height="15" fill="rgb(218,164,37)" fg:x="14292" fg:w="2658"/><text x="12.7973%" y="735.50">&lt;..</text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (2,658 samples, 2.33%)</title><rect x="12.5473%" y="709" width="2.3335%" height="15" fill="rgb(246,65,34)" fg:x="14292" fg:w="2658"/><text x="12.7973%" y="719.50">&lt;..</text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker (200 samples, 0.18%)</title><rect x="14.7052%" y="693" width="0.1756%" height="15" fill="rgb(231,100,33)" fg:x="16750" fg:w="200"/><text x="14.9552%" y="703.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_key (2,740 samples, 2.41%)</title><rect x="12.5429%" y="805" width="2.4055%" height="15" fill="rgb(228,126,14)" fg:x="14287" fg:w="2740"/><text x="12.7929%" y="815.50">&lt;&amp;..</text></g><g><title>serde::de::MapAccess::next_key (2,740 samples, 2.41%)</title><rect x="12.5429%" y="789" width="2.4055%" height="15" fill="rgb(215,173,21)" fg:x="14287" fg:w="2740"/><text x="12.7929%" y="799.50">se..</text></g><g><title>&lt;rmp_serde::decode::MapAccess&lt;R,C&gt; as serde::de::MapAccess&gt;::next_key_seed (2,740 samples, 2.41%)</title><rect x="12.5429%" y="773" width="2.4055%" height="15" fill="rgb(210,6,40)" fg:x="14287" fg:w="2740"/><text x="12.7929%" y="783.50">&lt;r..</text></g><g><title>core::result::Result&lt;T,E&gt;::map (77 samples, 0.07%)</title><rect x="14.8808%" y="757" width="0.0676%" height="15" fill="rgb(212,48,18)" fg:x="16950" fg:w="77"/><text x="15.1308%" y="767.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_value (23 samples, 0.02%)</title><rect x="14.9484%" y="805" width="0.0202%" height="15" fill="rgb(230,214,11)" fg:x="17027" fg:w="23"/><text x="15.1984%" y="815.50"></text></g><g><title>serde::de::MapAccess::next_value (23 samples, 0.02%)</title><rect x="14.9484%" y="789" width="0.0202%" height="15" fill="rgb(254,105,39)" fg:x="17027" fg:w="23"/><text x="15.1984%" y="799.50"></text></g><g><title>&lt;rmp_serde::decode::MapAccess&lt;R,C&gt; as serde::de::MapAccess&gt;::next_value_seed (23 samples, 0.02%)</title><rect x="14.9484%" y="773" width="0.0202%" height="15" fill="rgb(245,158,5)" fg:x="17027" fg:w="23"/><text x="15.1984%" y="783.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (23 samples, 0.02%)</title><rect x="14.9484%" y="757" width="0.0202%" height="15" fill="rgb(249,208,11)" fg:x="17027" fg:w="23"/><text x="15.1984%" y="767.50"></text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (23 samples, 0.02%)</title><rect x="14.9484%" y="741" width="0.0202%" height="15" fill="rgb(210,39,28)" fg:x="17027" fg:w="23"/><text x="15.1984%" y="751.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (23 samples, 0.02%)</title><rect x="14.9484%" y="725" width="0.0202%" height="15" fill="rgb(211,56,53)" fg:x="17027" fg:w="23"/><text x="15.1984%" y="735.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (525 samples, 0.46%)</title><rect x="14.9712%" y="805" width="0.4609%" height="15" fill="rgb(226,201,30)" fg:x="17053" fg:w="525"/><text x="15.2212%" y="815.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::insert (1,100 samples, 0.97%)</title><rect x="15.4322%" y="805" width="0.9657%" height="15" fill="rgb(239,101,34)" fg:x="17578" fg:w="1100"/><text x="15.6822%" y="815.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (35 samples, 0.03%)</title><rect x="16.3671%" y="789" width="0.0307%" height="15" fill="rgb(226,209,5)" fg:x="18643" fg:w="35"/><text x="16.6171%" y="799.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (15 samples, 0.01%)</title><rect x="16.3979%" y="805" width="0.0132%" height="15" fill="rgb(250,105,47)" fg:x="18678" fg:w="15"/><text x="16.6479%" y="815.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (15 samples, 0.01%)</title><rect x="16.3979%" y="789" width="0.0132%" height="15" fill="rgb(230,72,3)" fg:x="18678" fg:w="15"/><text x="16.6479%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (12 samples, 0.01%)</title><rect x="16.4005%" y="773" width="0.0105%" height="15" fill="rgb(232,218,39)" fg:x="18681" fg:w="12"/><text x="16.6505%" y="783.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_map (4,568 samples, 4.01%)</title><rect x="12.4139%" y="821" width="4.0104%" height="15" fill="rgb(248,166,6)" fg:x="14140" fg:w="4568"/><text x="12.6639%" y="831.50">&lt;tre..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_value::value::Value&gt;&gt; (15 samples, 0.01%)</title><rect x="16.4110%" y="805" width="0.0132%" height="15" fill="rgb(247,89,20)" fg:x="18693" fg:w="15"/><text x="16.6610%" y="815.50"></text></g><g><title>rmp::decode::RmpRead::read_u8 (15 samples, 0.01%)</title><rect x="16.4242%" y="757" width="0.0132%" height="15" fill="rgb(248,130,54)" fg:x="18708" fg:w="15"/><text x="16.6742%" y="767.50"></text></g><g><title>&lt;T as rmp::decode::RmpRead&gt;::read_exact_buf (15 samples, 0.01%)</title><rect x="16.4242%" y="741" width="0.0132%" height="15" fill="rgb(234,196,4)" fg:x="18708" fg:w="15"/><text x="16.6742%" y="751.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as std::io::Read&gt;::read_exact (15 samples, 0.01%)</title><rect x="16.4242%" y="725" width="0.0132%" height="15" fill="rgb(250,143,31)" fg:x="18708" fg:w="15"/><text x="16.6742%" y="735.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_exact (15 samples, 0.01%)</title><rect x="16.4242%" y="709" width="0.0132%" height="15" fill="rgb(211,110,34)" fg:x="18708" fg:w="15"/><text x="16.6742%" y="719.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (21 samples, 0.02%)</title><rect x="16.4242%" y="805" width="0.0184%" height="15" fill="rgb(215,124,48)" fg:x="18708" fg:w="21"/><text x="16.6742%" y="815.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker::{{closure}} (21 samples, 0.02%)</title><rect x="16.4242%" y="789" width="0.0184%" height="15" fill="rgb(216,46,13)" fg:x="18708" fg:w="21"/><text x="16.6742%" y="799.50"></text></g><g><title>rmp::decode::read_marker (21 samples, 0.02%)</title><rect x="16.4242%" y="773" width="0.0184%" height="15" fill="rgb(205,184,25)" fg:x="18708" fg:w="21"/><text x="16.6742%" y="783.50"></text></g><g><title>&lt;tremor_runtime::codec::msgpack::MsgPack as tremor_runtime::codec::Codec&gt;::decode (4,818 samples, 4.23%)</title><rect x="12.2760%" y="901" width="4.2298%" height="15" fill="rgb(228,1,10)" fg:x="13983" fg:w="4818"/><text x="12.5260%" y="911.50">&lt;trem..</text></g><g><title>rmp_serde::decode::from_slice (4,711 samples, 4.14%)</title><rect x="12.3700%" y="885" width="4.1359%" height="15" fill="rgb(213,116,27)" fg:x="14090" fg:w="4711"/><text x="12.6200%" y="895.50">rmp_s..</text></g><g><title>rmp_serde::decode::from_read_ref (4,711 samples, 4.14%)</title><rect x="12.3700%" y="869" width="4.1359%" height="15" fill="rgb(241,95,50)" fg:x="14090" fg:w="4711"/><text x="12.6200%" y="879.50">rmp_s..</text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (4,706 samples, 4.13%)</title><rect x="12.3743%" y="853" width="4.1315%" height="15" fill="rgb(238,48,32)" fg:x="14095" fg:w="4706"/><text x="12.6243%" y="863.50">tremo..</text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (4,706 samples, 4.13%)</title><rect x="12.3743%" y="837" width="4.1315%" height="15" fill="rgb(235,113,49)" fg:x="14095" fg:w="4706"/><text x="12.6243%" y="847.50">&lt;&amp;mut..</text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker (93 samples, 0.08%)</title><rect x="16.4242%" y="821" width="0.0816%" height="15" fill="rgb(205,127,43)" fg:x="18708" fg:w="93"/><text x="16.6742%" y="831.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (72 samples, 0.06%)</title><rect x="16.4426%" y="805" width="0.0632%" height="15" fill="rgb(250,162,2)" fg:x="18729" fg:w="72"/><text x="16.6926%" y="815.50"></text></g><g><title>core::mem::replace (72 samples, 0.06%)</title><rect x="16.4426%" y="789" width="0.0632%" height="15" fill="rgb(220,13,41)" fg:x="18729" fg:w="72"/><text x="16.6926%" y="799.50"></text></g><g><title>core::ptr::read (72 samples, 0.06%)</title><rect x="16.4426%" y="773" width="0.0632%" height="15" fill="rgb(249,221,25)" fg:x="18729" fg:w="72"/><text x="16.6926%" y="783.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (47 samples, 0.04%)</title><rect x="16.5252%" y="789" width="0.0413%" height="15" fill="rgb(215,208,19)" fg:x="18823" fg:w="47"/><text x="16.7752%" y="799.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (46 samples, 0.04%)</title><rect x="16.5261%" y="773" width="0.0404%" height="15" fill="rgb(236,175,2)" fg:x="18824" fg:w="46"/><text x="16.7761%" y="783.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (46 samples, 0.04%)</title><rect x="16.5261%" y="757" width="0.0404%" height="15" fill="rgb(241,52,2)" fg:x="18824" fg:w="46"/><text x="16.7761%" y="767.50"></text></g><g><title>alloc::alloc::exchange_malloc (39 samples, 0.03%)</title><rect x="16.5322%" y="741" width="0.0342%" height="15" fill="rgb(248,140,14)" fg:x="18831" fg:w="39"/><text x="16.7822%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (39 samples, 0.03%)</title><rect x="16.5322%" y="725" width="0.0342%" height="15" fill="rgb(253,22,42)" fg:x="18831" fg:w="39"/><text x="16.7822%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (39 samples, 0.03%)</title><rect x="16.5322%" y="709" width="0.0342%" height="15" fill="rgb(234,61,47)" fg:x="18831" fg:w="39"/><text x="16.7822%" y="719.50"></text></g><g><title>alloc::alloc::alloc (39 samples, 0.03%)</title><rect x="16.5322%" y="693" width="0.0342%" height="15" fill="rgb(208,226,15)" fg:x="18831" fg:w="39"/><text x="16.7822%" y="703.50"></text></g><g><title>__rg_alloc (39 samples, 0.03%)</title><rect x="16.5322%" y="677" width="0.0342%" height="15" fill="rgb(217,221,4)" fg:x="18831" fg:w="39"/><text x="16.7822%" y="687.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (39 samples, 0.03%)</title><rect x="16.5322%" y="661" width="0.0342%" height="15" fill="rgb(212,174,34)" fg:x="18831" fg:w="39"/><text x="16.7822%" y="671.50"></text></g><g><title>sn_rust_alloc (38 samples, 0.03%)</title><rect x="16.5331%" y="645" width="0.0334%" height="15" fill="rgb(253,83,4)" fg:x="18832" fg:w="38"/><text x="16.7831%" y="655.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (18 samples, 0.02%)</title><rect x="16.5506%" y="629" width="0.0158%" height="15" fill="rgb(250,195,49)" fg:x="18852" fg:w="18"/><text x="16.8006%" y="639.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (56 samples, 0.05%)</title><rect x="16.5217%" y="869" width="0.0492%" height="15" fill="rgb(241,192,25)" fg:x="18819" fg:w="56"/><text x="16.7717%" y="879.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (55 samples, 0.05%)</title><rect x="16.5225%" y="853" width="0.0483%" height="15" fill="rgb(208,124,10)" fg:x="18820" fg:w="55"/><text x="16.7725%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (55 samples, 0.05%)</title><rect x="16.5225%" y="837" width="0.0483%" height="15" fill="rgb(222,33,0)" fg:x="18820" fg:w="55"/><text x="16.7725%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (52 samples, 0.05%)</title><rect x="16.5252%" y="821" width="0.0457%" height="15" fill="rgb(234,209,28)" fg:x="18823" fg:w="52"/><text x="16.7752%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (52 samples, 0.05%)</title><rect x="16.5252%" y="805" width="0.0457%" height="15" fill="rgb(224,11,23)" fg:x="18823" fg:w="52"/><text x="16.7752%" y="815.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (106 samples, 0.09%)</title><rect x="16.6551%" y="629" width="0.0931%" height="15" fill="rgb(232,99,1)" fg:x="18971" fg:w="106"/><text x="16.9051%" y="639.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (126 samples, 0.11%)</title><rect x="16.6402%" y="789" width="0.1106%" height="15" fill="rgb(237,95,45)" fg:x="18954" fg:w="126"/><text x="16.8902%" y="799.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (126 samples, 0.11%)</title><rect x="16.6402%" y="773" width="0.1106%" height="15" fill="rgb(208,109,11)" fg:x="18954" fg:w="126"/><text x="16.8902%" y="783.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (122 samples, 0.11%)</title><rect x="16.6437%" y="757" width="0.1071%" height="15" fill="rgb(216,190,48)" fg:x="18958" fg:w="122"/><text x="16.8937%" y="767.50"></text></g><g><title>alloc::alloc::exchange_malloc (121 samples, 0.11%)</title><rect x="16.6446%" y="741" width="0.1062%" height="15" fill="rgb(251,171,36)" fg:x="18959" fg:w="121"/><text x="16.8946%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (121 samples, 0.11%)</title><rect x="16.6446%" y="725" width="0.1062%" height="15" fill="rgb(230,62,22)" fg:x="18959" fg:w="121"/><text x="16.8946%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (121 samples, 0.11%)</title><rect x="16.6446%" y="709" width="0.1062%" height="15" fill="rgb(225,114,35)" fg:x="18959" fg:w="121"/><text x="16.8946%" y="719.50"></text></g><g><title>alloc::alloc::alloc (121 samples, 0.11%)</title><rect x="16.6446%" y="693" width="0.1062%" height="15" fill="rgb(215,118,42)" fg:x="18959" fg:w="121"/><text x="16.8946%" y="703.50"></text></g><g><title>__rg_alloc (121 samples, 0.11%)</title><rect x="16.6446%" y="677" width="0.1062%" height="15" fill="rgb(243,119,21)" fg:x="18959" fg:w="121"/><text x="16.8946%" y="687.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (121 samples, 0.11%)</title><rect x="16.6446%" y="661" width="0.1062%" height="15" fill="rgb(252,177,53)" fg:x="18959" fg:w="121"/><text x="16.8946%" y="671.50"></text></g><g><title>sn_rust_alloc (121 samples, 0.11%)</title><rect x="16.6446%" y="645" width="0.1062%" height="15" fill="rgb(237,209,29)" fg:x="18959" fg:w="121"/><text x="16.8946%" y="655.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (137 samples, 0.12%)</title><rect x="16.6332%" y="837" width="0.1203%" height="15" fill="rgb(212,65,23)" fg:x="18946" fg:w="137"/><text x="16.8832%" y="847.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (135 samples, 0.12%)</title><rect x="16.6349%" y="821" width="0.1185%" height="15" fill="rgb(230,222,46)" fg:x="18948" fg:w="135"/><text x="16.8849%" y="831.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (135 samples, 0.12%)</title><rect x="16.6349%" y="805" width="0.1185%" height="15" fill="rgb(215,135,32)" fg:x="18948" fg:w="135"/><text x="16.8849%" y="815.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (15 samples, 0.01%)</title><rect x="16.7719%" y="821" width="0.0132%" height="15" fill="rgb(246,101,22)" fg:x="19104" fg:w="15"/><text x="17.0219%" y="831.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (15 samples, 0.01%)</title><rect x="16.7719%" y="805" width="0.0132%" height="15" fill="rgb(206,107,13)" fg:x="19104" fg:w="15"/><text x="17.0219%" y="815.50"></text></g><g><title>sn_rust_dealloc (73 samples, 0.06%)</title><rect x="16.7947%" y="709" width="0.0641%" height="15" fill="rgb(250,100,44)" fg:x="19130" fg:w="73"/><text x="17.0447%" y="719.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (403 samples, 0.35%)</title><rect x="16.5059%" y="901" width="0.3538%" height="15" fill="rgb(231,147,38)" fg:x="18801" fg:w="403"/><text x="16.7559%" y="911.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (385 samples, 0.34%)</title><rect x="16.5217%" y="885" width="0.3380%" height="15" fill="rgb(229,8,40)" fg:x="18819" fg:w="385"/><text x="16.7717%" y="895.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (329 samples, 0.29%)</title><rect x="16.5708%" y="869" width="0.2888%" height="15" fill="rgb(221,135,30)" fg:x="18875" fg:w="329"/><text x="16.8208%" y="879.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (258 samples, 0.23%)</title><rect x="16.6332%" y="853" width="0.2265%" height="15" fill="rgb(249,193,18)" fg:x="18946" fg:w="258"/><text x="16.8832%" y="863.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (121 samples, 0.11%)</title><rect x="16.7534%" y="837" width="0.1062%" height="15" fill="rgb(209,133,39)" fg:x="19083" fg:w="121"/><text x="17.0034%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (81 samples, 0.07%)</title><rect x="16.7886%" y="821" width="0.0711%" height="15" fill="rgb(232,100,14)" fg:x="19123" fg:w="81"/><text x="17.0386%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt; (81 samples, 0.07%)</title><rect x="16.7886%" y="805" width="0.0711%" height="15" fill="rgb(224,185,1)" fg:x="19123" fg:w="81"/><text x="17.0386%" y="815.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (81 samples, 0.07%)</title><rect x="16.7886%" y="789" width="0.0711%" height="15" fill="rgb(223,139,8)" fg:x="19123" fg:w="81"/><text x="17.0386%" y="799.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (79 samples, 0.07%)</title><rect x="16.7903%" y="773" width="0.0694%" height="15" fill="rgb(232,213,38)" fg:x="19125" fg:w="79"/><text x="17.0403%" y="783.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (79 samples, 0.07%)</title><rect x="16.7903%" y="757" width="0.0694%" height="15" fill="rgb(207,94,22)" fg:x="19125" fg:w="79"/><text x="17.0403%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (79 samples, 0.07%)</title><rect x="16.7903%" y="741" width="0.0694%" height="15" fill="rgb(219,183,54)" fg:x="19125" fg:w="79"/><text x="17.0403%" y="751.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (79 samples, 0.07%)</title><rect x="16.7903%" y="725" width="0.0694%" height="15" fill="rgb(216,185,54)" fg:x="19125" fg:w="79"/><text x="17.0403%" y="735.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,977 samples, 10.51%)</title><rect x="6.4343%" y="1045" width="10.5149%" height="15" fill="rgb(254,217,39)" fg:x="7329" fg:w="11977"/><text x="6.6843%" y="1055.50">&lt;core::future::..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (6,466 samples, 5.68%)</title><rect x="11.2726%" y="1029" width="5.6767%" height="15" fill="rgb(240,178,23)" fg:x="12840" fg:w="6466"/><text x="11.5226%" y="1039.50">tremor_..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,466 samples, 5.68%)</title><rect x="11.2726%" y="1013" width="5.6767%" height="15" fill="rgb(218,11,47)" fg:x="12840" fg:w="6466"/><text x="11.5226%" y="1023.50">&lt;core::..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (6,466 samples, 5.68%)</title><rect x="11.2726%" y="997" width="5.6767%" height="15" fill="rgb(218,51,51)" fg:x="12840" fg:w="6466"/><text x="11.5226%" y="1007.50">tremor_..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,466 samples, 5.68%)</title><rect x="11.2726%" y="981" width="5.6767%" height="15" fill="rgb(238,126,27)" fg:x="12840" fg:w="6466"/><text x="11.5226%" y="991.50">&lt;core::..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (6,466 samples, 5.68%)</title><rect x="11.2726%" y="965" width="5.6767%" height="15" fill="rgb(249,202,22)" fg:x="12840" fg:w="6466"/><text x="11.5226%" y="975.50">tremor_..</text></g><g><title>tremor_runtime::connectors::source::build_events (6,466 samples, 5.68%)</title><rect x="11.2726%" y="949" width="5.6767%" height="15" fill="rgb(254,195,49)" fg:x="12840" fg:w="6466"/><text x="11.5226%" y="959.50">tremor_..</text></g><g><title>tremor_script::srs::EventPayload::try_new (5,660 samples, 4.97%)</title><rect x="11.9802%" y="933" width="4.9691%" height="15" fill="rgb(208,123,14)" fg:x="13646" fg:w="5660"/><text x="12.2302%" y="943.50">tremor..</text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (5,425 samples, 4.76%)</title><rect x="12.1865%" y="917" width="4.7627%" height="15" fill="rgb(224,200,8)" fg:x="13881" fg:w="5425"/><text x="12.4365%" y="927.50">tremor..</text></g><g><title>tremor_script::srs::ValueAndMeta::from_parts (102 samples, 0.09%)</title><rect x="16.8597%" y="901" width="0.0895%" height="15" fill="rgb(217,61,36)" fg:x="19204" fg:w="102"/><text x="17.1097%" y="911.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (15 samples, 0.01%)</title><rect x="16.9492%" y="1045" width="0.0132%" height="15" fill="rgb(206,35,45)" fg:x="19306" fg:w="15"/><text x="17.1992%" y="1055.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (12 samples, 0.01%)</title><rect x="16.9624%" y="1045" width="0.0105%" height="15" fill="rgb(217,65,33)" fg:x="19321" fg:w="12"/><text x="17.2124%" y="1055.50"></text></g><g><title>sn_rust_dealloc (16 samples, 0.01%)</title><rect x="17.0335%" y="741" width="0.0140%" height="15" fill="rgb(222,158,48)" fg:x="19402" fg:w="16"/><text x="17.2835%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (31 samples, 0.03%)</title><rect x="17.0317%" y="789" width="0.0272%" height="15" fill="rgb(254,2,54)" fg:x="19400" fg:w="31"/><text x="17.2817%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (31 samples, 0.03%)</title><rect x="17.0317%" y="773" width="0.0272%" height="15" fill="rgb(250,143,38)" fg:x="19400" fg:w="31"/><text x="17.2817%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (31 samples, 0.03%)</title><rect x="17.0317%" y="757" width="0.0272%" height="15" fill="rgb(248,25,0)" fg:x="19400" fg:w="31"/><text x="17.2817%" y="767.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (13 samples, 0.01%)</title><rect x="17.0475%" y="741" width="0.0114%" height="15" fill="rgb(206,152,27)" fg:x="19418" fg:w="13"/><text x="17.2975%" y="751.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (34 samples, 0.03%)</title><rect x="17.0300%" y="805" width="0.0298%" height="15" fill="rgb(240,77,30)" fg:x="19398" fg:w="34"/><text x="17.2800%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (44 samples, 0.04%)</title><rect x="17.0273%" y="869" width="0.0386%" height="15" fill="rgb(231,5,3)" fg:x="19395" fg:w="44"/><text x="17.2773%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (43 samples, 0.04%)</title><rect x="17.0282%" y="853" width="0.0378%" height="15" fill="rgb(207,226,32)" fg:x="19396" fg:w="43"/><text x="17.2782%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (43 samples, 0.04%)</title><rect x="17.0282%" y="837" width="0.0378%" height="15" fill="rgb(222,207,47)" fg:x="19396" fg:w="43"/><text x="17.2782%" y="847.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (43 samples, 0.04%)</title><rect x="17.0282%" y="821" width="0.0378%" height="15" fill="rgb(229,115,45)" fg:x="19396" fg:w="43"/><text x="17.2782%" y="831.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (19 samples, 0.02%)</title><rect x="17.0695%" y="725" width="0.0167%" height="15" fill="rgb(224,191,6)" fg:x="19443" fg:w="19"/><text x="17.3195%" y="735.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck::{{closure}}::{{closure}} (31 samples, 0.03%)</title><rect x="17.0695%" y="741" width="0.0272%" height="15" fill="rgb(230,227,24)" fg:x="19443" fg:w="31"/><text x="17.3195%" y="751.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (12 samples, 0.01%)</title><rect x="17.0862%" y="725" width="0.0105%" height="15" fill="rgb(228,80,19)" fg:x="19462" fg:w="12"/><text x="17.3362%" y="735.50"></text></g><g><title>hashbrown::map::RawEntryBuilderMut&lt;K,V,S,A&gt;::from_key_hashed_nocheck (12 samples, 0.01%)</title><rect x="17.0862%" y="709" width="0.0105%" height="15" fill="rgb(247,229,0)" fg:x="19462" fg:w="12"/><text x="17.3362%" y="719.50"></text></g><g><title>hashbrown::map::RawEntryBuilderMut&lt;K,V,S,A&gt;::from_hash (12 samples, 0.01%)</title><rect x="17.0862%" y="693" width="0.0105%" height="15" fill="rgb(237,194,15)" fg:x="19462" fg:w="12"/><text x="17.3362%" y="703.50"></text></g><g><title>hashbrown::map::RawEntryBuilderMut&lt;K,V,S,A&gt;::search (12 samples, 0.01%)</title><rect x="17.0862%" y="677" width="0.0105%" height="15" fill="rgb(219,203,20)" fg:x="19462" fg:w="12"/><text x="17.3362%" y="687.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (12 samples, 0.01%)</title><rect x="17.0862%" y="661" width="0.0105%" height="15" fill="rgb(234,128,8)" fg:x="19462" fg:w="12"/><text x="17.3362%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (12 samples, 0.01%)</title><rect x="17.0862%" y="645" width="0.0105%" height="15" fill="rgb(248,202,8)" fg:x="19462" fg:w="12"/><text x="17.3362%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_mut_key_hashed_nocheck (34 samples, 0.03%)</title><rect x="17.0686%" y="837" width="0.0298%" height="15" fill="rgb(206,104,37)" fg:x="19442" fg:w="34"/><text x="17.3186%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck (33 samples, 0.03%)</title><rect x="17.0695%" y="821" width="0.0290%" height="15" fill="rgb(223,8,27)" fg:x="19443" fg:w="33"/><text x="17.3195%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (33 samples, 0.03%)</title><rect x="17.0695%" y="805" width="0.0290%" height="15" fill="rgb(216,217,28)" fg:x="19443" fg:w="33"/><text x="17.3195%" y="815.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (33 samples, 0.03%)</title><rect x="17.0695%" y="789" width="0.0290%" height="15" fill="rgb(249,199,1)" fg:x="19443" fg:w="33"/><text x="17.3195%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck::{{closure}} (33 samples, 0.03%)</title><rect x="17.0695%" y="773" width="0.0290%" height="15" fill="rgb(240,85,17)" fg:x="19443" fg:w="33"/><text x="17.3195%" y="783.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (33 samples, 0.03%)</title><rect x="17.0695%" y="757" width="0.0290%" height="15" fill="rgb(206,108,45)" fg:x="19443" fg:w="33"/><text x="17.3195%" y="767.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (89 samples, 0.08%)</title><rect x="17.1213%" y="821" width="0.0781%" height="15" fill="rgb(245,210,41)" fg:x="19502" fg:w="89"/><text x="17.3713%" y="831.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (49 samples, 0.04%)</title><rect x="17.1564%" y="805" width="0.0430%" height="15" fill="rgb(206,13,37)" fg:x="19542" fg:w="49"/><text x="17.4064%" y="815.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}} (49 samples, 0.04%)</title><rect x="17.1564%" y="789" width="0.0430%" height="15" fill="rgb(250,61,18)" fg:x="19542" fg:w="49"/><text x="17.4064%" y="799.50"></text></g><g><title>abi_stable::traits::ErasedType::run_downcast_as_mut (35 samples, 0.03%)</title><rect x="17.1687%" y="773" width="0.0307%" height="15" fill="rgb(235,172,48)" fg:x="19556" fg:w="35"/><text x="17.4187%" y="783.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}}::{{closure}} (34 samples, 0.03%)</title><rect x="17.1696%" y="757" width="0.0298%" height="15" fill="rgb(249,201,17)" fg:x="19557" fg:w="34"/><text x="17.4196%" y="767.50"></text></g><g><title>halfbrown::raw_entry::RawVacantEntryMut&lt;K,V,S&gt;::insert (30 samples, 0.03%)</title><rect x="17.1731%" y="741" width="0.0263%" height="15" fill="rgb(219,208,6)" fg:x="19561" fg:w="30"/><text x="17.4231%" y="751.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert (14 samples, 0.01%)</title><rect x="17.1871%" y="725" width="0.0123%" height="15" fill="rgb(248,31,23)" fg:x="19577" fg:w="14"/><text x="17.4371%" y="735.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (17 samples, 0.01%)</title><rect x="17.2161%" y="709" width="0.0149%" height="15" fill="rgb(245,15,42)" fg:x="19610" fg:w="17"/><text x="17.4661%" y="719.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (17 samples, 0.01%)</title><rect x="17.2161%" y="693" width="0.0149%" height="15" fill="rgb(222,217,39)" fg:x="19610" fg:w="17"/><text x="17.4661%" y="703.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (16 samples, 0.01%)</title><rect x="17.2170%" y="677" width="0.0140%" height="15" fill="rgb(210,219,27)" fg:x="19611" fg:w="16"/><text x="17.4670%" y="687.50"></text></g><g><title>alloc::alloc::exchange_malloc (14 samples, 0.01%)</title><rect x="17.2187%" y="661" width="0.0123%" height="15" fill="rgb(252,166,36)" fg:x="19613" fg:w="14"/><text x="17.4687%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 0.01%)</title><rect x="17.2187%" y="645" width="0.0123%" height="15" fill="rgb(245,132,34)" fg:x="19613" fg:w="14"/><text x="17.4687%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.01%)</title><rect x="17.2187%" y="629" width="0.0123%" height="15" fill="rgb(236,54,3)" fg:x="19613" fg:w="14"/><text x="17.4687%" y="639.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.01%)</title><rect x="17.2205%" y="613" width="0.0105%" height="15" fill="rgb(241,173,43)" fg:x="19615" fg:w="12"/><text x="17.4705%" y="623.50"></text></g><g><title>__rg_alloc (12 samples, 0.01%)</title><rect x="17.2205%" y="597" width="0.0105%" height="15" fill="rgb(215,190,9)" fg:x="19615" fg:w="12"/><text x="17.4705%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (12 samples, 0.01%)</title><rect x="17.2205%" y="581" width="0.0105%" height="15" fill="rgb(242,101,16)" fg:x="19615" fg:w="12"/><text x="17.4705%" y="591.50"></text></g><g><title>sn_rust_alloc (12 samples, 0.01%)</title><rect x="17.2205%" y="565" width="0.0105%" height="15" fill="rgb(223,190,21)" fg:x="19615" fg:w="12"/><text x="17.4705%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (23 samples, 0.02%)</title><rect x="17.2126%" y="757" width="0.0202%" height="15" fill="rgb(215,228,25)" fg:x="19606" fg:w="23"/><text x="17.4626%" y="767.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (23 samples, 0.02%)</title><rect x="17.2126%" y="741" width="0.0202%" height="15" fill="rgb(225,36,22)" fg:x="19606" fg:w="23"/><text x="17.4626%" y="751.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (23 samples, 0.02%)</title><rect x="17.2126%" y="725" width="0.0202%" height="15" fill="rgb(251,106,46)" fg:x="19606" fg:w="23"/><text x="17.4626%" y="735.50"></text></g><g><title>core::mem::swap (41 samples, 0.04%)</title><rect x="17.2451%" y="581" width="0.0360%" height="15" fill="rgb(208,90,1)" fg:x="19643" fg:w="41"/><text x="17.4951%" y="591.50"></text></g><g><title>core::mem::swap_simple (41 samples, 0.04%)</title><rect x="17.2451%" y="565" width="0.0360%" height="15" fill="rgb(243,10,4)" fg:x="19643" fg:w="41"/><text x="17.4951%" y="575.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (82 samples, 0.07%)</title><rect x="17.3276%" y="437" width="0.0720%" height="15" fill="rgb(212,137,27)" fg:x="19737" fg:w="82"/><text x="17.5776%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (137 samples, 0.12%)</title><rect x="17.2925%" y="549" width="0.1203%" height="15" fill="rgb(231,220,49)" fg:x="19697" fg:w="137"/><text x="17.5425%" y="559.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (130 samples, 0.11%)</title><rect x="17.2986%" y="533" width="0.1141%" height="15" fill="rgb(237,96,20)" fg:x="19704" fg:w="130"/><text x="17.5486%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (130 samples, 0.11%)</title><rect x="17.2986%" y="517" width="0.1141%" height="15" fill="rgb(239,229,30)" fg:x="19704" fg:w="130"/><text x="17.5486%" y="527.50"></text></g><g><title>alloc::alloc::alloc (130 samples, 0.11%)</title><rect x="17.2986%" y="501" width="0.1141%" height="15" fill="rgb(219,65,33)" fg:x="19704" fg:w="130"/><text x="17.5486%" y="511.50"></text></g><g><title>__rg_alloc (130 samples, 0.11%)</title><rect x="17.2986%" y="485" width="0.1141%" height="15" fill="rgb(243,134,7)" fg:x="19704" fg:w="130"/><text x="17.5486%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (130 samples, 0.11%)</title><rect x="17.2986%" y="469" width="0.1141%" height="15" fill="rgb(216,177,54)" fg:x="19704" fg:w="130"/><text x="17.5486%" y="479.50"></text></g><g><title>sn_rust_alloc (130 samples, 0.11%)</title><rect x="17.2986%" y="453" width="0.1141%" height="15" fill="rgb(211,160,20)" fg:x="19704" fg:w="130"/><text x="17.5486%" y="463.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (15 samples, 0.01%)</title><rect x="17.3996%" y="437" width="0.0132%" height="15" fill="rgb(239,85,39)" fg:x="19819" fg:w="15"/><text x="17.6496%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (154 samples, 0.14%)</title><rect x="17.2811%" y="581" width="0.1352%" height="15" fill="rgb(232,125,22)" fg:x="19684" fg:w="154"/><text x="17.5311%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (151 samples, 0.13%)</title><rect x="17.2837%" y="565" width="0.1326%" height="15" fill="rgb(244,57,34)" fg:x="19687" fg:w="151"/><text x="17.5337%" y="575.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (233 samples, 0.20%)</title><rect x="17.2126%" y="773" width="0.2046%" height="15" fill="rgb(214,203,32)" fg:x="19606" fg:w="233"/><text x="17.4626%" y="783.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (210 samples, 0.18%)</title><rect x="17.2328%" y="757" width="0.1844%" height="15" fill="rgb(207,58,43)" fg:x="19629" fg:w="210"/><text x="17.4828%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (209 samples, 0.18%)</title><rect x="17.2337%" y="741" width="0.1835%" height="15" fill="rgb(215,193,15)" fg:x="19630" fg:w="209"/><text x="17.4837%" y="751.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (209 samples, 0.18%)</title><rect x="17.2337%" y="725" width="0.1835%" height="15" fill="rgb(232,15,44)" fg:x="19630" fg:w="209"/><text x="17.4837%" y="735.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (209 samples, 0.18%)</title><rect x="17.2337%" y="709" width="0.1835%" height="15" fill="rgb(212,3,48)" fg:x="19630" fg:w="209"/><text x="17.4837%" y="719.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (209 samples, 0.18%)</title><rect x="17.2337%" y="693" width="0.1835%" height="15" fill="rgb(218,128,7)" fg:x="19630" fg:w="209"/><text x="17.4837%" y="703.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (209 samples, 0.18%)</title><rect x="17.2337%" y="677" width="0.1835%" height="15" fill="rgb(226,216,39)" fg:x="19630" fg:w="209"/><text x="17.4837%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (209 samples, 0.18%)</title><rect x="17.2337%" y="661" width="0.1835%" height="15" fill="rgb(243,47,51)" fg:x="19630" fg:w="209"/><text x="17.4837%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (209 samples, 0.18%)</title><rect x="17.2337%" y="645" width="0.1835%" height="15" fill="rgb(241,183,40)" fg:x="19630" fg:w="209"/><text x="17.4837%" y="655.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (208 samples, 0.18%)</title><rect x="17.2345%" y="629" width="0.1826%" height="15" fill="rgb(231,217,32)" fg:x="19631" fg:w="208"/><text x="17.4845%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (203 samples, 0.18%)</title><rect x="17.2389%" y="613" width="0.1782%" height="15" fill="rgb(229,61,38)" fg:x="19636" fg:w="203"/><text x="17.4889%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (200 samples, 0.18%)</title><rect x="17.2416%" y="597" width="0.1756%" height="15" fill="rgb(225,210,5)" fg:x="19639" fg:w="200"/><text x="17.4916%" y="607.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (484 samples, 0.42%)</title><rect x="16.9931%" y="901" width="0.4249%" height="15" fill="rgb(231,79,45)" fg:x="19356" fg:w="484"/><text x="17.2431%" y="911.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (484 samples, 0.42%)</title><rect x="16.9931%" y="885" width="0.4249%" height="15" fill="rgb(224,100,7)" fg:x="19356" fg:w="484"/><text x="17.2431%" y="895.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (400 samples, 0.35%)</title><rect x="17.0669%" y="869" width="0.3512%" height="15" fill="rgb(241,198,18)" fg:x="19440" fg:w="400"/><text x="17.3169%" y="879.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (398 samples, 0.35%)</title><rect x="17.0686%" y="853" width="0.3494%" height="15" fill="rgb(252,97,53)" fg:x="19442" fg:w="398"/><text x="17.3186%" y="863.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (364 samples, 0.32%)</title><rect x="17.0985%" y="837" width="0.3196%" height="15" fill="rgb(220,88,7)" fg:x="19476" fg:w="364"/><text x="17.3485%" y="847.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut::{{closure}} (249 samples, 0.22%)</title><rect x="17.1994%" y="821" width="0.2186%" height="15" fill="rgb(213,176,14)" fg:x="19591" fg:w="249"/><text x="17.4494%" y="831.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (234 samples, 0.21%)</title><rect x="17.2126%" y="805" width="0.2054%" height="15" fill="rgb(246,73,7)" fg:x="19606" fg:w="234"/><text x="17.4626%" y="815.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (234 samples, 0.21%)</title><rect x="17.2126%" y="789" width="0.2054%" height="15" fill="rgb(245,64,36)" fg:x="19606" fg:w="234"/><text x="17.4626%" y="799.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (549 samples, 0.48%)</title><rect x="16.9931%" y="933" width="0.4820%" height="15" fill="rgb(245,80,10)" fg:x="19356" fg:w="549"/><text x="17.2431%" y="943.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (549 samples, 0.48%)</title><rect x="16.9931%" y="917" width="0.4820%" height="15" fill="rgb(232,107,50)" fg:x="19356" fg:w="549"/><text x="17.2431%" y="927.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (65 samples, 0.06%)</title><rect x="17.4180%" y="901" width="0.0571%" height="15" fill="rgb(253,3,0)" fg:x="19840" fg:w="65"/><text x="17.6680%" y="911.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (554 samples, 0.49%)</title><rect x="16.9931%" y="949" width="0.4864%" height="15" fill="rgb(212,99,53)" fg:x="19356" fg:w="554"/><text x="17.2431%" y="959.50"></text></g><g><title>abi_stable::std_types::map::map_key::MapKey&lt;K&gt;::as_mut (13 samples, 0.01%)</title><rect x="17.6814%" y="741" width="0.0114%" height="15" fill="rgb(249,111,54)" fg:x="20140" fg:w="13"/><text x="17.9314%" y="751.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::take_manuallydrop (15 samples, 0.01%)</title><rect x="17.6928%" y="741" width="0.0132%" height="15" fill="rgb(249,55,30)" fg:x="20153" fg:w="15"/><text x="17.9428%" y="751.50"></text></g><g><title>core::ptr::read (15 samples, 0.01%)</title><rect x="17.6928%" y="725" width="0.0132%" height="15" fill="rgb(237,47,42)" fg:x="20153" fg:w="15"/><text x="17.9428%" y="735.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (28 samples, 0.02%)</title><rect x="18.2521%" y="645" width="0.0246%" height="15" fill="rgb(211,20,18)" fg:x="20790" fg:w="28"/><text x="18.5021%" y="655.50"></text></g><g><title>core::ptr::write (28 samples, 0.02%)</title><rect x="18.2521%" y="629" width="0.0246%" height="15" fill="rgb(231,203,46)" fg:x="20790" fg:w="28"/><text x="18.5021%" y="639.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::write (34 samples, 0.03%)</title><rect x="18.2521%" y="661" width="0.0298%" height="15" fill="rgb(237,142,3)" fg:x="20790" fg:w="34"/><text x="18.5021%" y="671.50"></text></g><g><title>core::mem::swap (168 samples, 0.15%)</title><rect x="18.3855%" y="597" width="0.1475%" height="15" fill="rgb(241,107,1)" fg:x="20942" fg:w="168"/><text x="18.6355%" y="607.50"></text></g><g><title>core::mem::swap_simple (168 samples, 0.15%)</title><rect x="18.3855%" y="581" width="0.1475%" height="15" fill="rgb(229,83,13)" fg:x="20942" fg:w="168"/><text x="18.6355%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (16 samples, 0.01%)</title><rect x="18.5584%" y="565" width="0.0140%" height="15" fill="rgb(241,91,40)" fg:x="21139" fg:w="16"/><text x="18.8084%" y="575.50"></text></g><g><title>core::intrinsics::write_bytes (16 samples, 0.01%)</title><rect x="18.5584%" y="549" width="0.0140%" height="15" fill="rgb(225,3,45)" fg:x="21139" fg:w="16"/><text x="18.8084%" y="559.50"></text></g><g><title>[libc-2.31.so] (15 samples, 0.01%)</title><rect x="18.5593%" y="533" width="0.0132%" height="15" fill="rgb(244,223,14)" fg:x="21140" fg:w="15"/><text x="18.8093%" y="543.50"></text></g><g><title>hashbrown::raw::inner::TableLayout::calculate_layout_for (15 samples, 0.01%)</title><rect x="18.5760%" y="549" width="0.0132%" height="15" fill="rgb(224,124,37)" fg:x="21159" fg:w="15"/><text x="18.8260%" y="559.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (38 samples, 0.03%)</title><rect x="18.5892%" y="549" width="0.0334%" height="15" fill="rgb(251,171,30)" fg:x="21174" fg:w="38"/><text x="18.8392%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (38 samples, 0.03%)</title><rect x="18.5892%" y="533" width="0.0334%" height="15" fill="rgb(236,46,54)" fg:x="21174" fg:w="38"/><text x="18.8392%" y="543.50"></text></g><g><title>alloc::alloc::alloc (38 samples, 0.03%)</title><rect x="18.5892%" y="517" width="0.0334%" height="15" fill="rgb(245,213,5)" fg:x="21174" fg:w="38"/><text x="18.8392%" y="527.50"></text></g><g><title>__rg_alloc (38 samples, 0.03%)</title><rect x="18.5892%" y="501" width="0.0334%" height="15" fill="rgb(230,144,27)" fg:x="21174" fg:w="38"/><text x="18.8392%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (38 samples, 0.03%)</title><rect x="18.5892%" y="485" width="0.0334%" height="15" fill="rgb(220,86,6)" fg:x="21174" fg:w="38"/><text x="18.8392%" y="495.50"></text></g><g><title>sn_rust_alloc (37 samples, 0.03%)</title><rect x="18.5901%" y="469" width="0.0325%" height="15" fill="rgb(240,20,13)" fg:x="21175" fg:w="37"/><text x="18.8401%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (61 samples, 0.05%)</title><rect x="18.5725%" y="565" width="0.0536%" height="15" fill="rgb(217,89,34)" fg:x="21155" fg:w="61"/><text x="18.8225%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (110 samples, 0.10%)</title><rect x="18.5339%" y="597" width="0.0966%" height="15" fill="rgb(229,13,5)" fg:x="21111" fg:w="110"/><text x="18.7839%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (100 samples, 0.09%)</title><rect x="18.5426%" y="581" width="0.0878%" height="15" fill="rgb(244,67,35)" fg:x="21121" fg:w="100"/><text x="18.7926%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (325 samples, 0.29%)</title><rect x="18.3469%" y="613" width="0.2853%" height="15" fill="rgb(221,40,2)" fg:x="20898" fg:w="325"/><text x="18.5969%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (399 samples, 0.35%)</title><rect x="18.2898%" y="661" width="0.3503%" height="15" fill="rgb(237,157,21)" fg:x="20833" fg:w="399"/><text x="18.5398%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (388 samples, 0.34%)</title><rect x="18.2995%" y="645" width="0.3406%" height="15" fill="rgb(222,94,11)" fg:x="20844" fg:w="388"/><text x="18.5495%" y="655.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (345 samples, 0.30%)</title><rect x="18.3372%" y="629" width="0.3029%" height="15" fill="rgb(249,113,6)" fg:x="20887" fg:w="345"/><text x="18.5872%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (18 samples, 0.02%)</title><rect x="18.6603%" y="645" width="0.0158%" height="15" fill="rgb(238,137,36)" fg:x="21255" fg:w="18"/><text x="18.9103%" y="655.50"></text></g><g><title>hashbrown::raw::inner::is_full (18 samples, 0.02%)</title><rect x="18.6814%" y="645" width="0.0158%" height="15" fill="rgb(210,102,26)" fg:x="21279" fg:w="18"/><text x="18.9314%" y="655.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_insert_slot (92 samples, 0.08%)</title><rect x="18.6401%" y="661" width="0.0808%" height="15" fill="rgb(218,30,30)" fg:x="21232" fg:w="92"/><text x="18.8901%" y="671.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (20 samples, 0.02%)</title><rect x="18.7033%" y="645" width="0.0176%" height="15" fill="rgb(214,67,26)" fg:x="21304" fg:w="20"/><text x="18.9533%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (20 samples, 0.02%)</title><rect x="18.7033%" y="629" width="0.0176%" height="15" fill="rgb(251,9,53)" fg:x="21304" fg:w="20"/><text x="18.9533%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl (14 samples, 0.01%)</title><rect x="18.7323%" y="629" width="0.0123%" height="15" fill="rgb(228,204,25)" fg:x="21337" fg:w="14"/><text x="18.9823%" y="639.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert_hashed_nocheck (917 samples, 0.81%)</title><rect x="17.9421%" y="709" width="0.8051%" height="15" fill="rgb(207,153,8)" fg:x="20437" fg:w="917"/><text x="18.1921%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_entry (736 samples, 0.65%)</title><rect x="18.1010%" y="693" width="0.6462%" height="15" fill="rgb(242,9,16)" fg:x="20618" fg:w="736"/><text x="18.3510%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (576 samples, 0.51%)</title><rect x="18.2415%" y="677" width="0.5057%" height="15" fill="rgb(217,211,10)" fg:x="20778" fg:w="576"/><text x="18.4915%" y="687.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::record_item_insert_at (30 samples, 0.03%)</title><rect x="18.7209%" y="661" width="0.0263%" height="15" fill="rgb(219,228,52)" fg:x="21324" fg:w="30"/><text x="18.9709%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl_h2 (17 samples, 0.01%)</title><rect x="18.7323%" y="645" width="0.0149%" height="15" fill="rgb(231,92,29)" fg:x="21337" fg:w="17"/><text x="18.9823%" y="655.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (17 samples, 0.01%)</title><rect x="18.8262%" y="597" width="0.0149%" height="15" fill="rgb(232,8,23)" fg:x="21444" fg:w="17"/><text x="19.0762%" y="607.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (70 samples, 0.06%)</title><rect x="18.7867%" y="645" width="0.0615%" height="15" fill="rgb(216,211,34)" fg:x="21399" fg:w="70"/><text x="19.0367%" y="655.50"></text></g><g><title>fxhash::write (65 samples, 0.06%)</title><rect x="18.7911%" y="629" width="0.0571%" height="15" fill="rgb(236,151,0)" fg:x="21404" fg:w="65"/><text x="19.0411%" y="639.50"></text></g><g><title>fxhash::write64 (65 samples, 0.06%)</title><rect x="18.7911%" y="613" width="0.0571%" height="15" fill="rgb(209,168,3)" fg:x="21404" fg:w="65"/><text x="19.0411%" y="623.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (1,573 samples, 1.38%)</title><rect x="17.4795%" y="821" width="1.3810%" height="15" fill="rgb(208,129,28)" fg:x="19910" fg:w="1573"/><text x="17.7295%" y="831.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (1,573 samples, 1.38%)</title><rect x="17.4795%" y="805" width="1.3810%" height="15" fill="rgb(229,78,22)" fg:x="19910" fg:w="1573"/><text x="17.7295%" y="815.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}} (1,565 samples, 1.37%)</title><rect x="17.4865%" y="789" width="1.3740%" height="15" fill="rgb(228,187,13)" fg:x="19918" fg:w="1565"/><text x="17.7365%" y="799.50"></text></g><g><title>abi_stable::traits::ErasedType::run_downcast_as_mut (1,416 samples, 1.24%)</title><rect x="17.6173%" y="773" width="1.2431%" height="15" fill="rgb(240,119,24)" fg:x="20067" fg:w="1416"/><text x="17.8673%" y="783.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}}::{{closure}} (1,352 samples, 1.19%)</title><rect x="17.6735%" y="757" width="1.1870%" height="15" fill="rgb(209,194,42)" fg:x="20131" fg:w="1352"/><text x="17.9235%" y="767.50"></text></g><g><title>halfbrown::raw_entry::RawVacantEntryMut&lt;K,V,S&gt;::insert (1,315 samples, 1.15%)</title><rect x="17.7060%" y="741" width="1.1545%" height="15" fill="rgb(247,200,46)" fg:x="20168" fg:w="1315"/><text x="17.9560%" y="751.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert (1,140 samples, 1.00%)</title><rect x="17.8596%" y="725" width="1.0008%" height="15" fill="rgb(218,76,16)" fg:x="20343" fg:w="1140"/><text x="18.1096%" y="735.50"></text></g><g><title>hashbrown::map::make_insert_hash (129 samples, 0.11%)</title><rect x="18.7472%" y="709" width="0.1133%" height="15" fill="rgb(225,21,48)" fg:x="21354" fg:w="129"/><text x="18.9972%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (105 samples, 0.09%)</title><rect x="18.7683%" y="693" width="0.0922%" height="15" fill="rgb(239,223,50)" fg:x="21378" fg:w="105"/><text x="19.0183%" y="703.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::hash::Hash&gt;::hash (105 samples, 0.09%)</title><rect x="18.7683%" y="677" width="0.0922%" height="15" fill="rgb(244,45,21)" fg:x="21378" fg:w="105"/><text x="19.0183%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (92 samples, 0.08%)</title><rect x="18.7797%" y="661" width="0.0808%" height="15" fill="rgb(232,33,43)" fg:x="21391" fg:w="92"/><text x="19.0297%" y="671.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (14 samples, 0.01%)</title><rect x="18.8482%" y="645" width="0.0123%" height="15" fill="rgb(209,8,3)" fg:x="21469" fg:w="14"/><text x="19.0982%" y="655.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (14 samples, 0.01%)</title><rect x="18.8482%" y="629" width="0.0123%" height="15" fill="rgb(214,25,53)" fg:x="21469" fg:w="14"/><text x="19.0982%" y="639.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (25 samples, 0.02%)</title><rect x="19.1221%" y="549" width="0.0219%" height="15" fill="rgb(254,186,54)" fg:x="21781" fg:w="25"/><text x="19.3721%" y="559.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (304 samples, 0.27%)</title><rect x="18.8850%" y="709" width="0.2669%" height="15" fill="rgb(208,174,49)" fg:x="21511" fg:w="304"/><text x="19.1350%" y="719.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (304 samples, 0.27%)</title><rect x="18.8850%" y="693" width="0.2669%" height="15" fill="rgb(233,191,51)" fg:x="21511" fg:w="304"/><text x="19.1350%" y="703.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (273 samples, 0.24%)</title><rect x="18.9123%" y="677" width="0.2397%" height="15" fill="rgb(222,134,10)" fg:x="21542" fg:w="273"/><text x="19.1623%" y="687.50"></text></g><g><title>alloc::alloc::exchange_malloc (254 samples, 0.22%)</title><rect x="18.9289%" y="661" width="0.2230%" height="15" fill="rgb(230,226,20)" fg:x="21561" fg:w="254"/><text x="19.1789%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (254 samples, 0.22%)</title><rect x="18.9289%" y="645" width="0.2230%" height="15" fill="rgb(251,111,25)" fg:x="21561" fg:w="254"/><text x="19.1789%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (254 samples, 0.22%)</title><rect x="18.9289%" y="629" width="0.2230%" height="15" fill="rgb(224,40,46)" fg:x="21561" fg:w="254"/><text x="19.1789%" y="639.50"></text></g><g><title>alloc::alloc::alloc (244 samples, 0.21%)</title><rect x="18.9377%" y="613" width="0.2142%" height="15" fill="rgb(236,108,47)" fg:x="21571" fg:w="244"/><text x="19.1877%" y="623.50"></text></g><g><title>__rg_alloc (244 samples, 0.21%)</title><rect x="18.9377%" y="597" width="0.2142%" height="15" fill="rgb(234,93,0)" fg:x="21571" fg:w="244"/><text x="19.1877%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (244 samples, 0.21%)</title><rect x="18.9377%" y="581" width="0.2142%" height="15" fill="rgb(224,213,32)" fg:x="21571" fg:w="244"/><text x="19.1877%" y="591.50"></text></g><g><title>sn_rust_alloc (231 samples, 0.20%)</title><rect x="18.9491%" y="565" width="0.2028%" height="15" fill="rgb(251,11,48)" fg:x="21584" fg:w="231"/><text x="19.1991%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (360 samples, 0.32%)</title><rect x="18.8605%" y="757" width="0.3161%" height="15" fill="rgb(236,173,5)" fg:x="21483" fg:w="360"/><text x="19.1105%" y="767.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (360 samples, 0.32%)</title><rect x="18.8605%" y="741" width="0.3161%" height="15" fill="rgb(230,95,12)" fg:x="21483" fg:w="360"/><text x="19.1105%" y="751.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (360 samples, 0.32%)</title><rect x="18.8605%" y="725" width="0.3161%" height="15" fill="rgb(232,209,1)" fg:x="21483" fg:w="360"/><text x="19.1105%" y="735.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (28 samples, 0.02%)</title><rect x="19.1519%" y="709" width="0.0246%" height="15" fill="rgb(232,6,1)" fg:x="21815" fg:w="28"/><text x="19.4019%" y="719.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (22 samples, 0.02%)</title><rect x="19.1572%" y="693" width="0.0193%" height="15" fill="rgb(210,224,50)" fg:x="21821" fg:w="22"/><text x="19.4072%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (17 samples, 0.01%)</title><rect x="19.1616%" y="677" width="0.0149%" height="15" fill="rgb(228,127,35)" fg:x="21826" fg:w="17"/><text x="19.4116%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (17 samples, 0.01%)</title><rect x="19.1616%" y="661" width="0.0149%" height="15" fill="rgb(245,102,45)" fg:x="21826" fg:w="17"/><text x="19.4116%" y="671.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (17 samples, 0.01%)</title><rect x="19.1616%" y="645" width="0.0149%" height="15" fill="rgb(214,1,49)" fg:x="21826" fg:w="17"/><text x="19.4116%" y="655.50"></text></g><g><title>core::mem::swap (595 samples, 0.52%)</title><rect x="19.2678%" y="581" width="0.5224%" height="15" fill="rgb(226,163,40)" fg:x="21947" fg:w="595"/><text x="19.5178%" y="591.50"></text></g><g><title>core::mem::swap_simple (595 samples, 0.52%)</title><rect x="19.2678%" y="565" width="0.5224%" height="15" fill="rgb(239,212,28)" fg:x="21947" fg:w="595"/><text x="19.5178%" y="575.50"></text></g><g><title>core::ptr::read (13 samples, 0.01%)</title><rect x="19.7788%" y="549" width="0.0114%" height="15" fill="rgb(220,20,13)" fg:x="22529" fg:w="13"/><text x="20.0288%" y="559.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (15 samples, 0.01%)</title><rect x="19.8086%" y="565" width="0.0132%" height="15" fill="rgb(210,164,35)" fg:x="22563" fg:w="15"/><text x="20.0586%" y="575.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (86 samples, 0.08%)</title><rect x="19.8639%" y="549" width="0.0755%" height="15" fill="rgb(248,109,41)" fg:x="22626" fg:w="86"/><text x="20.1139%" y="559.50"></text></g><g><title>core::intrinsics::write_bytes (86 samples, 0.08%)</title><rect x="19.8639%" y="533" width="0.0755%" height="15" fill="rgb(238,23,50)" fg:x="22626" fg:w="86"/><text x="20.1139%" y="543.50"></text></g><g><title>[libc-2.31.so] (55 samples, 0.05%)</title><rect x="19.8911%" y="517" width="0.0483%" height="15" fill="rgb(211,48,49)" fg:x="22657" fg:w="55"/><text x="20.1411%" y="527.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (24 samples, 0.02%)</title><rect x="19.9605%" y="517" width="0.0211%" height="15" fill="rgb(223,36,21)" fg:x="22736" fg:w="24"/><text x="20.2105%" y="527.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (24 samples, 0.02%)</title><rect x="19.9605%" y="501" width="0.0211%" height="15" fill="rgb(207,123,46)" fg:x="22736" fg:w="24"/><text x="20.2105%" y="511.50"></text></g><g><title>hashbrown::raw::inner::TableLayout::calculate_layout_for (52 samples, 0.05%)</title><rect x="19.9464%" y="533" width="0.0457%" height="15" fill="rgb(240,218,32)" fg:x="22720" fg:w="52"/><text x="20.1964%" y="543.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (12 samples, 0.01%)</title><rect x="19.9816%" y="517" width="0.0105%" height="15" fill="rgb(252,5,43)" fg:x="22760" fg:w="12"/><text x="20.2316%" y="527.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (12 samples, 0.01%)</title><rect x="19.9816%" y="501" width="0.0105%" height="15" fill="rgb(252,84,19)" fg:x="22760" fg:w="12"/><text x="20.2316%" y="511.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (807 samples, 0.71%)</title><rect x="20.4398%" y="437" width="0.7085%" height="15" fill="rgb(243,152,39)" fg:x="23282" fg:w="807"/><text x="20.6898%" y="447.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (1,415 samples, 1.24%)</title><rect x="19.9921%" y="533" width="1.2423%" height="15" fill="rgb(234,160,15)" fg:x="22772" fg:w="1415"/><text x="20.2421%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (1,415 samples, 1.24%)</title><rect x="19.9921%" y="517" width="1.2423%" height="15" fill="rgb(237,34,20)" fg:x="22772" fg:w="1415"/><text x="20.2421%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1,415 samples, 1.24%)</title><rect x="19.9921%" y="501" width="1.2423%" height="15" fill="rgb(229,97,13)" fg:x="22772" fg:w="1415"/><text x="20.2421%" y="511.50"></text></g><g><title>__rg_alloc (1,415 samples, 1.24%)</title><rect x="19.9921%" y="485" width="1.2423%" height="15" fill="rgb(234,71,50)" fg:x="22772" fg:w="1415"/><text x="20.2421%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1,415 samples, 1.24%)</title><rect x="19.9921%" y="469" width="1.2423%" height="15" fill="rgb(253,155,4)" fg:x="22772" fg:w="1415"/><text x="20.2421%" y="479.50"></text></g><g><title>sn_rust_alloc (1,403 samples, 1.23%)</title><rect x="20.0026%" y="453" width="1.2317%" height="15" fill="rgb(222,185,37)" fg:x="22784" fg:w="1403"/><text x="20.2526%" y="463.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (98 samples, 0.09%)</title><rect x="21.1483%" y="437" width="0.0860%" height="15" fill="rgb(251,177,13)" fg:x="24089" fg:w="98"/><text x="21.3983%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (1,489 samples, 1.31%)</title><rect x="19.9394%" y="549" width="1.3072%" height="15" fill="rgb(250,179,40)" fg:x="22712" fg:w="1489"/><text x="20.1894%" y="559.50"></text></g><g><title>hashbrown::raw::inner::bucket_mask_to_capacity (14 samples, 0.01%)</title><rect x="21.2344%" y="533" width="0.0123%" height="15" fill="rgb(242,44,2)" fg:x="24187" fg:w="14"/><text x="21.4844%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (1,762 samples, 1.55%)</title><rect x="19.7981%" y="581" width="1.5469%" height="15" fill="rgb(216,177,13)" fg:x="22551" fg:w="1762"/><text x="20.0481%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (1,735 samples, 1.52%)</title><rect x="19.8218%" y="565" width="1.5232%" height="15" fill="rgb(216,106,43)" fg:x="22578" fg:w="1735"/><text x="20.0718%" y="575.50"></text></g><g><title>hashbrown::raw::inner::capacity_to_buckets (112 samples, 0.10%)</title><rect x="21.2467%" y="549" width="0.0983%" height="15" fill="rgb(216,183,2)" fg:x="24201" fg:w="112"/><text x="21.4967%" y="559.50"></text></g><g><title>core::num::&lt;impl usize&gt;::next_power_of_two (50 samples, 0.04%)</title><rect x="21.3011%" y="533" width="0.0439%" height="15" fill="rgb(249,75,3)" fg:x="24263" fg:w="50"/><text x="21.5511%" y="543.50"></text></g><g><title>core::num::&lt;impl usize&gt;::one_less_than_next_power_of_two (50 samples, 0.04%)</title><rect x="21.3011%" y="517" width="0.0439%" height="15" fill="rgb(219,67,39)" fg:x="24263" fg:w="50"/><text x="21.5511%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (2,426 samples, 2.13%)</title><rect x="19.2222%" y="597" width="2.1298%" height="15" fill="rgb(253,228,2)" fg:x="21895" fg:w="2426"/><text x="19.4722%" y="607.50">h..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (4,430 samples, 3.89%)</title><rect x="17.4795%" y="901" width="3.8892%" height="15" fill="rgb(235,138,27)" fg:x="19910" fg:w="4430"/><text x="17.7295%" y="911.50">trem..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (4,430 samples, 3.89%)</title><rect x="17.4795%" y="885" width="3.8892%" height="15" fill="rgb(236,97,51)" fg:x="19910" fg:w="4430"/><text x="17.7295%" y="895.50">trem..</text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (4,430 samples, 3.89%)</title><rect x="17.4795%" y="869" width="3.8892%" height="15" fill="rgb(240,80,30)" fg:x="19910" fg:w="4430"/><text x="17.7295%" y="879.50">trem..</text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (4,430 samples, 3.89%)</title><rect x="17.4795%" y="853" width="3.8892%" height="15" fill="rgb(230,178,19)" fg:x="19910" fg:w="4430"/><text x="17.7295%" y="863.50">trem..</text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (4,430 samples, 3.89%)</title><rect x="17.4795%" y="837" width="3.8892%" height="15" fill="rgb(210,190,27)" fg:x="19910" fg:w="4430"/><text x="17.7295%" y="847.50">abi_..</text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut::{{closure}} (2,857 samples, 2.51%)</title><rect x="18.8605%" y="821" width="2.5082%" height="15" fill="rgb(222,107,31)" fg:x="21483" fg:w="2857"/><text x="19.1105%" y="831.50">tr..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (2,857 samples, 2.51%)</title><rect x="18.8605%" y="805" width="2.5082%" height="15" fill="rgb(216,127,34)" fg:x="21483" fg:w="2857"/><text x="19.1105%" y="815.50">tr..</text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (2,857 samples, 2.51%)</title><rect x="18.8605%" y="789" width="2.5082%" height="15" fill="rgb(234,116,52)" fg:x="21483" fg:w="2857"/><text x="19.1105%" y="799.50">&lt;t..</text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (2,857 samples, 2.51%)</title><rect x="18.8605%" y="773" width="2.5082%" height="15" fill="rgb(222,124,15)" fg:x="21483" fg:w="2857"/><text x="19.1105%" y="783.50">ab..</text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (2,497 samples, 2.19%)</title><rect x="19.1765%" y="757" width="2.1922%" height="15" fill="rgb(231,179,28)" fg:x="21843" fg:w="2497"/><text x="19.4265%" y="767.50">a..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (2,497 samples, 2.19%)</title><rect x="19.1765%" y="741" width="2.1922%" height="15" fill="rgb(226,93,45)" fg:x="21843" fg:w="2497"/><text x="19.4265%" y="751.50">a..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (2,497 samples, 2.19%)</title><rect x="19.1765%" y="725" width="2.1922%" height="15" fill="rgb(215,8,51)" fg:x="21843" fg:w="2497"/><text x="19.4265%" y="735.50">a..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (2,497 samples, 2.19%)</title><rect x="19.1765%" y="709" width="2.1922%" height="15" fill="rgb(223,106,5)" fg:x="21843" fg:w="2497"/><text x="19.4265%" y="719.50">a..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (2,497 samples, 2.19%)</title><rect x="19.1765%" y="693" width="2.1922%" height="15" fill="rgb(250,191,5)" fg:x="21843" fg:w="2497"/><text x="19.4265%" y="703.50">a..</text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (2,497 samples, 2.19%)</title><rect x="19.1765%" y="677" width="2.1922%" height="15" fill="rgb(242,132,44)" fg:x="21843" fg:w="2497"/><text x="19.4265%" y="687.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (2,497 samples, 2.19%)</title><rect x="19.1765%" y="661" width="2.1922%" height="15" fill="rgb(251,152,29)" fg:x="21843" fg:w="2497"/><text x="19.4265%" y="671.50">h..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (2,497 samples, 2.19%)</title><rect x="19.1765%" y="645" width="2.1922%" height="15" fill="rgb(218,179,5)" fg:x="21843" fg:w="2497"/><text x="19.4265%" y="655.50">h..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (2,497 samples, 2.19%)</title><rect x="19.1765%" y="629" width="2.1922%" height="15" fill="rgb(227,67,19)" fg:x="21843" fg:w="2497"/><text x="19.4265%" y="639.50">h..</text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (2,486 samples, 2.18%)</title><rect x="19.1862%" y="613" width="2.1825%" height="15" fill="rgb(233,119,31)" fg:x="21854" fg:w="2486"/><text x="19.4362%" y="623.50">h..</text></g><g><title>hashbrown::raw::inner::bucket_mask_to_capacity (19 samples, 0.02%)</title><rect x="21.3520%" y="597" width="0.0167%" height="15" fill="rgb(241,120,22)" fg:x="24321" fg:w="19"/><text x="21.6020%" y="607.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (5,064 samples, 4.45%)</title><rect x="16.9931%" y="1045" width="4.4458%" height="15" fill="rgb(224,102,30)" fg:x="19356" fg:w="5064"/><text x="17.2431%" y="1055.50">&lt;trem..</text></g><g><title>tremor_script::srs::EventPayload::rent_mut (5,064 samples, 4.45%)</title><rect x="16.9931%" y="1029" width="4.4458%" height="15" fill="rgb(210,164,37)" fg:x="19356" fg:w="5064"/><text x="17.2431%" y="1039.50">tremo..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (5,064 samples, 4.45%)</title><rect x="16.9931%" y="1013" width="4.4458%" height="15" fill="rgb(226,191,16)" fg:x="19356" fg:w="5064"/><text x="17.2431%" y="1023.50">&lt;trem..</text></g><g><title>tremor_script::script::Script::run (5,064 samples, 4.45%)</title><rect x="16.9931%" y="997" width="4.4458%" height="15" fill="rgb(214,40,45)" fg:x="19356" fg:w="5064"/><text x="17.2431%" y="1007.50">tremo..</text></g><g><title>tremor_script::ast::Script::run (5,064 samples, 4.45%)</title><rect x="16.9931%" y="981" width="4.4458%" height="15" fill="rgb(244,29,26)" fg:x="19356" fg:w="5064"/><text x="17.2431%" y="991.50">tremo..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (5,064 samples, 4.45%)</title><rect x="16.9931%" y="965" width="4.4458%" height="15" fill="rgb(216,16,5)" fg:x="19356" fg:w="5064"/><text x="17.2431%" y="975.50">tremo..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (4,510 samples, 3.96%)</title><rect x="17.4795%" y="949" width="3.9594%" height="15" fill="rgb(249,76,35)" fg:x="19910" fg:w="4510"/><text x="17.7295%" y="959.50">trem..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (4,510 samples, 3.96%)</title><rect x="17.4795%" y="933" width="3.9594%" height="15" fill="rgb(207,11,44)" fg:x="19910" fg:w="4510"/><text x="17.7295%" y="943.50">trem..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (4,510 samples, 3.96%)</title><rect x="17.4795%" y="917" width="3.9594%" height="15" fill="rgb(228,190,49)" fg:x="19910" fg:w="4510"/><text x="17.7295%" y="927.50">trem..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (80 samples, 0.07%)</title><rect x="21.3687%" y="901" width="0.0702%" height="15" fill="rgb(214,173,12)" fg:x="24340" fg:w="80"/><text x="21.6187%" y="911.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (80 samples, 0.07%)</title><rect x="21.3687%" y="885" width="0.0702%" height="15" fill="rgb(218,26,35)" fg:x="24340" fg:w="80"/><text x="21.6187%" y="895.50"></text></g><g><title>&lt;tremor_runtime::codec::msgpack::MsgPack as tremor_runtime::codec::Codec&gt;::decode (41 samples, 0.04%)</title><rect x="21.4389%" y="1045" width="0.0360%" height="15" fill="rgb(220,200,19)" fg:x="24420" fg:w="41"/><text x="21.6889%" y="1055.50"></text></g><g><title>&lt;tremor_runtime::codec::msgpack::MsgPack as tremor_runtime::codec::Codec&gt;::encode (13 samples, 0.01%)</title><rect x="21.4749%" y="1045" width="0.0114%" height="15" fill="rgb(239,95,49)" fg:x="24461" fg:w="13"/><text x="21.7249%" y="1055.50"></text></g><g><title>[libc-2.31.so] (103 samples, 0.09%)</title><rect x="21.4951%" y="1045" width="0.0904%" height="15" fill="rgb(235,85,53)" fg:x="24484" fg:w="103"/><text x="21.7451%" y="1055.50"></text></g><g><title>__clock_gettime (41 samples, 0.04%)</title><rect x="21.5943%" y="1045" width="0.0360%" height="15" fill="rgb(233,133,31)" fg:x="24597" fg:w="41"/><text x="21.8443%" y="1055.50"></text></g><g><title>__vdso_clock_gettime (15 samples, 0.01%)</title><rect x="21.6312%" y="1045" width="0.0132%" height="15" fill="rgb(218,25,20)" fg:x="24639" fg:w="15"/><text x="21.8812%" y="1055.50"></text></g><g><title>abi_stable::std_types::arc::vtable_mod::destructor_arc (24 samples, 0.02%)</title><rect x="21.6584%" y="1045" width="0.0211%" height="15" fill="rgb(252,210,38)" fg:x="24670" fg:w="24"/><text x="21.9084%" y="1055.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (12 samples, 0.01%)</title><rect x="21.6795%" y="1045" width="0.0105%" height="15" fill="rgb(242,134,21)" fg:x="24694" fg:w="12"/><text x="21.9295%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (101 samples, 0.09%)</title><rect x="21.6997%" y="1045" width="0.0887%" height="15" fill="rgb(213,28,48)" fg:x="24717" fg:w="101"/><text x="21.9497%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (17 samples, 0.01%)</title><rect x="21.7883%" y="1045" width="0.0149%" height="15" fill="rgb(250,196,2)" fg:x="24818" fg:w="17"/><text x="22.0383%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (24 samples, 0.02%)</title><rect x="21.8068%" y="1045" width="0.0211%" height="15" fill="rgb(227,5,17)" fg:x="24839" fg:w="24"/><text x="22.0568%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (16 samples, 0.01%)</title><rect x="21.8278%" y="1045" width="0.0140%" height="15" fill="rgb(221,226,24)" fg:x="24863" fg:w="16"/><text x="22.0778%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (28 samples, 0.02%)</title><rect x="21.8489%" y="1045" width="0.0246%" height="15" fill="rgb(211,5,48)" fg:x="24887" fg:w="28"/><text x="22.0989%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (12 samples, 0.01%)</title><rect x="21.8630%" y="1029" width="0.0105%" height="15" fill="rgb(219,150,6)" fg:x="24903" fg:w="12"/><text x="22.1130%" y="1039.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (12 samples, 0.01%)</title><rect x="21.8630%" y="1013" width="0.0105%" height="15" fill="rgb(251,46,16)" fg:x="24903" fg:w="12"/><text x="22.1130%" y="1023.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (12 samples, 0.01%)</title><rect x="21.8630%" y="997" width="0.0105%" height="15" fill="rgb(220,204,40)" fg:x="24903" fg:w="12"/><text x="22.1130%" y="1007.50"></text></g><g><title>alloc::slice::hack::to_vec (12 samples, 0.01%)</title><rect x="21.8630%" y="981" width="0.0105%" height="15" fill="rgb(211,85,2)" fg:x="24903" fg:w="12"/><text x="22.1130%" y="991.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (12 samples, 0.01%)</title><rect x="21.8630%" y="965" width="0.0105%" height="15" fill="rgb(229,17,7)" fg:x="24903" fg:w="12"/><text x="22.1130%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (30 samples, 0.03%)</title><rect x="21.9121%" y="997" width="0.0263%" height="15" fill="rgb(239,72,28)" fg:x="24959" fg:w="30"/><text x="22.1621%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.03%)</title><rect x="21.9121%" y="981" width="0.0263%" height="15" fill="rgb(230,47,54)" fg:x="24959" fg:w="30"/><text x="22.1621%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::vec::private::RVec&lt;u8&gt;]&gt; (30 samples, 0.03%)</title><rect x="21.9121%" y="965" width="0.0263%" height="15" fill="rgb(214,50,8)" fg:x="24959" fg:w="30"/><text x="22.1621%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (30 samples, 0.03%)</title><rect x="21.9121%" y="949" width="0.0263%" height="15" fill="rgb(216,198,43)" fg:x="24959" fg:w="30"/><text x="22.1621%" y="959.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (30 samples, 0.03%)</title><rect x="21.9121%" y="933" width="0.0263%" height="15" fill="rgb(234,20,35)" fg:x="24959" fg:w="30"/><text x="22.1621%" y="943.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (81 samples, 0.07%)</title><rect x="21.8735%" y="1045" width="0.0711%" height="15" fill="rgb(254,45,19)" fg:x="24915" fg:w="81"/><text x="22.1235%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (37 samples, 0.03%)</title><rect x="21.9121%" y="1029" width="0.0325%" height="15" fill="rgb(219,14,44)" fg:x="24959" fg:w="37"/><text x="22.1621%" y="1039.50"></text></g><g><title>core::mem::drop (37 samples, 0.03%)</title><rect x="21.9121%" y="1013" width="0.0325%" height="15" fill="rgb(217,220,26)" fg:x="24959" fg:w="37"/><text x="22.1621%" y="1023.50"></text></g><g><title>alloc::raw_vec::finish_grow (28 samples, 0.02%)</title><rect x="21.9490%" y="1045" width="0.0246%" height="15" fill="rgb(213,158,28)" fg:x="25001" fg:w="28"/><text x="22.1990%" y="1055.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (15 samples, 0.01%)</title><rect x="21.9604%" y="1029" width="0.0132%" height="15" fill="rgb(252,51,52)" fg:x="25014" fg:w="15"/><text x="22.2104%" y="1039.50"></text></g><g><title>alloc::alloc::Global::grow_impl (15 samples, 0.01%)</title><rect x="21.9604%" y="1013" width="0.0132%" height="15" fill="rgb(246,89,16)" fg:x="25014" fg:w="15"/><text x="22.2104%" y="1023.50"></text></g><g><title>alloc::alloc::realloc (15 samples, 0.01%)</title><rect x="21.9604%" y="997" width="0.0132%" height="15" fill="rgb(216,158,49)" fg:x="25014" fg:w="15"/><text x="22.2104%" y="1007.50"></text></g><g><title>__rg_realloc (15 samples, 0.01%)</title><rect x="21.9604%" y="981" width="0.0132%" height="15" fill="rgb(236,107,19)" fg:x="25014" fg:w="15"/><text x="22.2104%" y="991.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (15 samples, 0.01%)</title><rect x="21.9604%" y="965" width="0.0132%" height="15" fill="rgb(228,185,30)" fg:x="25014" fg:w="15"/><text x="22.2104%" y="975.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (27 samples, 0.02%)</title><rect x="21.9824%" y="1045" width="0.0237%" height="15" fill="rgb(246,134,8)" fg:x="25039" fg:w="27"/><text x="22.2324%" y="1055.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (43 samples, 0.04%)</title><rect x="22.1755%" y="661" width="0.0378%" height="15" fill="rgb(214,143,50)" fg:x="25259" fg:w="43"/><text x="22.4255%" y="671.50"></text></g><g><title>[libc-2.31.so] (32 samples, 0.03%)</title><rect x="22.1852%" y="645" width="0.0281%" height="15" fill="rgb(228,75,8)" fg:x="25270" fg:w="32"/><text x="22.4352%" y="655.50"></text></g><g><title>&lt;abi_stable::sabi_types::constructor::Constructor&lt;T&gt; as core::cmp::PartialEq&gt;::eq (26 samples, 0.02%)</title><rect x="22.2273%" y="613" width="0.0228%" height="15" fill="rgb(207,175,4)" fg:x="25318" fg:w="26"/><text x="22.4773%" y="623.50"></text></g><g><title>abi_stable::sabi_types::constructor::Constructor&lt;T&gt;::get (16 samples, 0.01%)</title><rect x="22.2361%" y="597" width="0.0140%" height="15" fill="rgb(205,108,24)" fg:x="25328" fg:w="16"/><text x="22.4861%" y="607.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (81 samples, 0.07%)</title><rect x="22.2132%" y="661" width="0.0711%" height="15" fill="rgb(244,120,49)" fg:x="25302" fg:w="81"/><text x="22.4632%" y="671.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::convert::From&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from (76 samples, 0.07%)</title><rect x="22.2176%" y="645" width="0.0667%" height="15" fill="rgb(223,47,38)" fg:x="25307" fg:w="76"/><text x="22.4676%" y="655.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::into_vec (72 samples, 0.06%)</title><rect x="22.2211%" y="629" width="0.0632%" height="15" fill="rgb(229,179,11)" fg:x="25311" fg:w="72"/><text x="22.4711%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::from_raw_parts (39 samples, 0.03%)</title><rect x="22.2501%" y="613" width="0.0342%" height="15" fill="rgb(231,122,1)" fg:x="25344" fg:w="39"/><text x="22.5001%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (39 samples, 0.03%)</title><rect x="22.2501%" y="597" width="0.0342%" height="15" fill="rgb(245,119,9)" fg:x="25344" fg:w="39"/><text x="22.5001%" y="607.50"></text></g><g><title>[libc-2.31.so] (126 samples, 0.11%)</title><rect x="22.2861%" y="645" width="0.1106%" height="15" fill="rgb(241,163,25)" fg:x="25385" fg:w="126"/><text x="22.5361%" y="655.50"></text></g><g><title>[libc-2.31.so] (53 samples, 0.05%)</title><rect x="22.4643%" y="629" width="0.0465%" height="15" fill="rgb(217,214,3)" fg:x="25588" fg:w="53"/><text x="22.7143%" y="639.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (109 samples, 0.10%)</title><rect x="22.5592%" y="341" width="0.0957%" height="15" fill="rgb(240,86,28)" fg:x="25696" fg:w="109"/><text x="22.8092%" y="351.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (144 samples, 0.13%)</title><rect x="22.5302%" y="501" width="0.1264%" height="15" fill="rgb(215,47,9)" fg:x="25663" fg:w="144"/><text x="22.7802%" y="511.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (144 samples, 0.13%)</title><rect x="22.5302%" y="485" width="0.1264%" height="15" fill="rgb(252,25,45)" fg:x="25663" fg:w="144"/><text x="22.7802%" y="495.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (141 samples, 0.12%)</title><rect x="22.5328%" y="469" width="0.1238%" height="15" fill="rgb(251,164,9)" fg:x="25666" fg:w="141"/><text x="22.7828%" y="479.50"></text></g><g><title>alloc::alloc::exchange_malloc (140 samples, 0.12%)</title><rect x="22.5337%" y="453" width="0.1229%" height="15" fill="rgb(233,194,0)" fg:x="25667" fg:w="140"/><text x="22.7837%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (139 samples, 0.12%)</title><rect x="22.5346%" y="437" width="0.1220%" height="15" fill="rgb(249,111,24)" fg:x="25668" fg:w="139"/><text x="22.7846%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (139 samples, 0.12%)</title><rect x="22.5346%" y="421" width="0.1220%" height="15" fill="rgb(250,223,3)" fg:x="25668" fg:w="139"/><text x="22.7846%" y="431.50"></text></g><g><title>alloc::alloc::alloc (139 samples, 0.12%)</title><rect x="22.5346%" y="405" width="0.1220%" height="15" fill="rgb(236,178,37)" fg:x="25668" fg:w="139"/><text x="22.7846%" y="415.50"></text></g><g><title>__rg_alloc (139 samples, 0.12%)</title><rect x="22.5346%" y="389" width="0.1220%" height="15" fill="rgb(241,158,50)" fg:x="25668" fg:w="139"/><text x="22.7846%" y="399.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (139 samples, 0.12%)</title><rect x="22.5346%" y="373" width="0.1220%" height="15" fill="rgb(213,121,41)" fg:x="25668" fg:w="139"/><text x="22.7846%" y="383.50"></text></g><g><title>sn_rust_alloc (136 samples, 0.12%)</title><rect x="22.5372%" y="357" width="0.1194%" height="15" fill="rgb(240,92,3)" fg:x="25671" fg:w="136"/><text x="22.7872%" y="367.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (166 samples, 0.15%)</title><rect x="22.5223%" y="549" width="0.1457%" height="15" fill="rgb(205,123,3)" fg:x="25654" fg:w="166"/><text x="22.7723%" y="559.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (163 samples, 0.14%)</title><rect x="22.5249%" y="533" width="0.1431%" height="15" fill="rgb(205,97,47)" fg:x="25657" fg:w="163"/><text x="22.7749%" y="543.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (163 samples, 0.14%)</title><rect x="22.5249%" y="517" width="0.1431%" height="15" fill="rgb(247,152,14)" fg:x="25657" fg:w="163"/><text x="22.7749%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (13 samples, 0.01%)</title><rect x="22.6566%" y="501" width="0.0114%" height="15" fill="rgb(248,195,53)" fg:x="25807" fg:w="13"/><text x="22.9066%" y="511.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (13 samples, 0.01%)</title><rect x="22.6566%" y="485" width="0.0114%" height="15" fill="rgb(226,201,16)" fg:x="25807" fg:w="13"/><text x="22.9066%" y="495.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (13 samples, 0.01%)</title><rect x="22.6566%" y="469" width="0.0114%" height="15" fill="rgb(205,98,0)" fg:x="25807" fg:w="13"/><text x="22.9066%" y="479.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (13 samples, 0.01%)</title><rect x="22.6566%" y="453" width="0.0114%" height="15" fill="rgb(214,191,48)" fg:x="25807" fg:w="13"/><text x="22.9066%" y="463.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (13 samples, 0.01%)</title><rect x="22.6566%" y="437" width="0.0114%" height="15" fill="rgb(237,112,39)" fg:x="25807" fg:w="13"/><text x="22.9066%" y="447.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (172 samples, 0.15%)</title><rect x="22.5223%" y="565" width="0.1510%" height="15" fill="rgb(247,203,27)" fg:x="25654" fg:w="172"/><text x="22.7723%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (357 samples, 0.31%)</title><rect x="22.5170%" y="629" width="0.3134%" height="15" fill="rgb(235,124,28)" fg:x="25648" fg:w="357"/><text x="22.7670%" y="639.50"></text></g><g><title>core::ops::function::FnOnce::call_once (355 samples, 0.31%)</title><rect x="22.5188%" y="613" width="0.3117%" height="15" fill="rgb(208,207,46)" fg:x="25650" fg:w="355"/><text x="22.7688%" y="623.50"></text></g><g><title>value_trait::Builder::object (354 samples, 0.31%)</title><rect x="22.5196%" y="597" width="0.3108%" height="15" fill="rgb(234,176,4)" fg:x="25651" fg:w="354"/><text x="22.7696%" y="607.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (351 samples, 0.31%)</title><rect x="22.5223%" y="581" width="0.3082%" height="15" fill="rgb(230,133,28)" fg:x="25654" fg:w="351"/><text x="22.7723%" y="591.50"></text></g><g><title>tremor_value::value::Value::Object (179 samples, 0.16%)</title><rect x="22.6733%" y="565" width="0.1571%" height="15" fill="rgb(211,137,40)" fg:x="25826" fg:w="179"/><text x="22.9233%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (63 samples, 0.06%)</title><rect x="22.8339%" y="613" width="0.0553%" height="15" fill="rgb(254,35,13)" fg:x="26009" fg:w="63"/><text x="23.0839%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (63 samples, 0.06%)</title><rect x="22.8339%" y="597" width="0.0553%" height="15" fill="rgb(225,49,51)" fg:x="26009" fg:w="63"/><text x="23.0839%" y="607.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (63 samples, 0.06%)</title><rect x="22.8339%" y="581" width="0.0553%" height="15" fill="rgb(251,10,15)" fg:x="26009" fg:w="63"/><text x="23.0839%" y="591.50"></text></g><g><title>sn_rust_dealloc (53 samples, 0.05%)</title><rect x="22.8427%" y="565" width="0.0465%" height="15" fill="rgb(228,207,15)" fg:x="26019" fg:w="53"/><text x="23.0927%" y="575.50"></text></g><g><title>sn_rust_dealloc (27 samples, 0.02%)</title><rect x="22.9068%" y="437" width="0.0237%" height="15" fill="rgb(241,99,19)" fg:x="26092" fg:w="27"/><text x="23.1568%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (42 samples, 0.04%)</title><rect x="22.8945%" y="517" width="0.0369%" height="15" fill="rgb(207,104,49)" fg:x="26078" fg:w="42"/><text x="23.1445%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (42 samples, 0.04%)</title><rect x="22.8945%" y="501" width="0.0369%" height="15" fill="rgb(234,99,18)" fg:x="26078" fg:w="42"/><text x="23.1445%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (36 samples, 0.03%)</title><rect x="22.8998%" y="485" width="0.0316%" height="15" fill="rgb(213,191,49)" fg:x="26084" fg:w="36"/><text x="23.1498%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (36 samples, 0.03%)</title><rect x="22.8998%" y="469" width="0.0316%" height="15" fill="rgb(210,226,19)" fg:x="26084" fg:w="36"/><text x="23.1498%" y="479.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (36 samples, 0.03%)</title><rect x="22.8998%" y="453" width="0.0316%" height="15" fill="rgb(229,97,18)" fg:x="26084" fg:w="36"/><text x="23.1498%" y="463.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (51 samples, 0.04%)</title><rect x="22.8892%" y="581" width="0.0448%" height="15" fill="rgb(211,167,15)" fg:x="26072" fg:w="51"/><text x="23.1392%" y="591.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (51 samples, 0.04%)</title><rect x="22.8892%" y="565" width="0.0448%" height="15" fill="rgb(210,169,34)" fg:x="26072" fg:w="51"/><text x="23.1392%" y="575.50"></text></g><g><title>core::mem::drop (45 samples, 0.04%)</title><rect x="22.8945%" y="549" width="0.0395%" height="15" fill="rgb(241,121,31)" fg:x="26078" fg:w="45"/><text x="23.1445%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (45 samples, 0.04%)</title><rect x="22.8945%" y="533" width="0.0395%" height="15" fill="rgb(232,40,11)" fg:x="26078" fg:w="45"/><text x="23.1445%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (131 samples, 0.12%)</title><rect x="22.8339%" y="629" width="0.1150%" height="15" fill="rgb(205,86,26)" fg:x="26009" fg:w="131"/><text x="23.0839%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (68 samples, 0.06%)</title><rect x="22.8892%" y="613" width="0.0597%" height="15" fill="rgb(231,126,28)" fg:x="26072" fg:w="68"/><text x="23.1392%" y="623.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (68 samples, 0.06%)</title><rect x="22.8892%" y="597" width="0.0597%" height="15" fill="rgb(219,221,18)" fg:x="26072" fg:w="68"/><text x="23.1392%" y="607.50"></text></g><g><title>sn_rust_dealloc (17 samples, 0.01%)</title><rect x="22.9340%" y="581" width="0.0149%" height="15" fill="rgb(211,40,0)" fg:x="26123" fg:w="17"/><text x="23.1840%" y="591.50"></text></g><g><title>sn_rust_dealloc (18 samples, 0.02%)</title><rect x="22.9621%" y="565" width="0.0158%" height="15" fill="rgb(239,85,43)" fg:x="26155" fg:w="18"/><text x="23.2121%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (35 samples, 0.03%)</title><rect x="22.9489%" y="629" width="0.0307%" height="15" fill="rgb(231,55,21)" fg:x="26140" fg:w="35"/><text x="23.1989%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (29 samples, 0.03%)</title><rect x="22.9542%" y="613" width="0.0255%" height="15" fill="rgb(225,184,43)" fg:x="26146" fg:w="29"/><text x="23.2042%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (29 samples, 0.03%)</title><rect x="22.9542%" y="597" width="0.0255%" height="15" fill="rgb(251,158,41)" fg:x="26146" fg:w="29"/><text x="23.2042%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (29 samples, 0.03%)</title><rect x="22.9542%" y="581" width="0.0255%" height="15" fill="rgb(234,159,37)" fg:x="26146" fg:w="29"/><text x="23.2042%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (41 samples, 0.04%)</title><rect x="23.0043%" y="597" width="0.0360%" height="15" fill="rgb(216,204,22)" fg:x="26203" fg:w="41"/><text x="23.2543%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (12 samples, 0.01%)</title><rect x="23.0543%" y="565" width="0.0105%" height="15" fill="rgb(214,17,3)" fg:x="26260" fg:w="12"/><text x="23.3043%" y="575.50"></text></g><g><title>core::cmp::PartialOrd::ge (12 samples, 0.01%)</title><rect x="23.0543%" y="549" width="0.0105%" height="15" fill="rgb(212,111,17)" fg:x="26260" fg:w="12"/><text x="23.3043%" y="559.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (12 samples, 0.01%)</title><rect x="23.0543%" y="533" width="0.0105%" height="15" fill="rgb(221,157,24)" fg:x="26260" fg:w="12"/><text x="23.3043%" y="543.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (12 samples, 0.01%)</title><rect x="23.0543%" y="517" width="0.0105%" height="15" fill="rgb(252,16,13)" fg:x="26260" fg:w="12"/><text x="23.3043%" y="527.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (12 samples, 0.01%)</title><rect x="23.0543%" y="501" width="0.0105%" height="15" fill="rgb(221,62,2)" fg:x="26260" fg:w="12"/><text x="23.3043%" y="511.50"></text></g><g><title>std::time::SystemTime::duration_since (79 samples, 0.07%)</title><rect x="23.0043%" y="613" width="0.0694%" height="15" fill="rgb(247,87,22)" fg:x="26203" fg:w="79"/><text x="23.2543%" y="623.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (38 samples, 0.03%)</title><rect x="23.0403%" y="597" width="0.0334%" height="15" fill="rgb(215,73,9)" fg:x="26244" fg:w="38"/><text x="23.2903%" y="607.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (38 samples, 0.03%)</title><rect x="23.0403%" y="581" width="0.0334%" height="15" fill="rgb(207,175,33)" fg:x="26244" fg:w="38"/><text x="23.2903%" y="591.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,067 samples, 0.94%)</title><rect x="22.2844%" y="661" width="0.9367%" height="15" fill="rgb(243,129,54)" fg:x="25383" fg:w="1067"/><text x="22.5344%" y="671.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (939 samples, 0.82%)</title><rect x="22.3967%" y="645" width="0.8244%" height="15" fill="rgb(227,119,45)" fg:x="25511" fg:w="939"/><text x="22.6467%" y="655.50"></text></g><g><title>tremor_common::time::nanotime (275 samples, 0.24%)</title><rect x="22.9797%" y="629" width="0.2414%" height="15" fill="rgb(205,109,36)" fg:x="26175" fg:w="275"/><text x="23.2297%" y="639.50"></text></g><g><title>std::time::SystemTime::now (168 samples, 0.15%)</title><rect x="23.0736%" y="613" width="0.1475%" height="15" fill="rgb(205,6,39)" fg:x="26282" fg:w="168"/><text x="23.3236%" y="623.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (168 samples, 0.15%)</title><rect x="23.0736%" y="597" width="0.1475%" height="15" fill="rgb(221,32,16)" fg:x="26282" fg:w="168"/><text x="23.3236%" y="607.50"></text></g><g><title>std::sys::unix::time::inner::now (168 samples, 0.15%)</title><rect x="23.0736%" y="581" width="0.1475%" height="15" fill="rgb(228,144,50)" fg:x="26282" fg:w="168"/><text x="23.3236%" y="591.50"></text></g><g><title>__clock_gettime (132 samples, 0.12%)</title><rect x="23.1052%" y="565" width="0.1159%" height="15" fill="rgb(229,201,53)" fg:x="26318" fg:w="132"/><text x="23.3552%" y="575.50"></text></g><g><title>__vdso_clock_gettime (119 samples, 0.10%)</title><rect x="23.1166%" y="549" width="0.1045%" height="15" fill="rgb(249,153,27)" fg:x="26331" fg:w="119"/><text x="23.3666%" y="559.50"></text></g><g><title>[[vdso]] (110 samples, 0.10%)</title><rect x="23.1245%" y="533" width="0.0966%" height="15" fill="rgb(227,106,25)" fg:x="26340" fg:w="110"/><text x="23.3745%" y="543.50"></text></g><g><title>[libc-2.31.so] (200 samples, 0.18%)</title><rect x="23.2211%" y="661" width="0.1756%" height="15" fill="rgb(230,65,29)" fg:x="26450" fg:w="200"/><text x="23.4711%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,632 samples, 1.43%)</title><rect x="22.0148%" y="693" width="1.4328%" height="15" fill="rgb(221,57,46)" fg:x="25076" fg:w="1632"/><text x="22.2648%" y="703.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (1,632 samples, 1.43%)</title><rect x="22.0148%" y="677" width="1.4328%" height="15" fill="rgb(229,161,17)" fg:x="25076" fg:w="1632"/><text x="22.2648%" y="687.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data (45 samples, 0.04%)</title><rect x="23.4081%" y="661" width="0.0395%" height="15" fill="rgb(222,213,11)" fg:x="26663" fg:w="45"/><text x="23.6581%" y="671.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (136 samples, 0.12%)</title><rect x="23.4502%" y="533" width="0.1194%" height="15" fill="rgb(235,35,13)" fg:x="26711" fg:w="136"/><text x="23.7002%" y="543.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (136 samples, 0.12%)</title><rect x="23.4502%" y="517" width="0.1194%" height="15" fill="rgb(233,158,34)" fg:x="26711" fg:w="136"/><text x="23.7002%" y="527.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (136 samples, 0.12%)</title><rect x="23.4502%" y="501" width="0.1194%" height="15" fill="rgb(215,151,48)" fg:x="26711" fg:w="136"/><text x="23.7002%" y="511.50"></text></g><g><title>[libc-2.31.so] (129 samples, 0.11%)</title><rect x="23.4564%" y="485" width="0.1133%" height="15" fill="rgb(229,84,14)" fg:x="26718" fg:w="129"/><text x="23.7064%" y="495.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (230 samples, 0.20%)</title><rect x="23.4476%" y="613" width="0.2019%" height="15" fill="rgb(229,68,14)" fg:x="26708" fg:w="230"/><text x="23.6976%" y="623.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (230 samples, 0.20%)</title><rect x="23.4476%" y="597" width="0.2019%" height="15" fill="rgb(243,106,26)" fg:x="26708" fg:w="230"/><text x="23.6976%" y="607.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (230 samples, 0.20%)</title><rect x="23.4476%" y="581" width="0.2019%" height="15" fill="rgb(206,45,38)" fg:x="26708" fg:w="230"/><text x="23.6976%" y="591.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (230 samples, 0.20%)</title><rect x="23.4476%" y="565" width="0.2019%" height="15" fill="rgb(226,6,15)" fg:x="26708" fg:w="230"/><text x="23.6976%" y="575.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (230 samples, 0.20%)</title><rect x="23.4476%" y="549" width="0.2019%" height="15" fill="rgb(232,22,54)" fg:x="26708" fg:w="230"/><text x="23.6976%" y="559.50"></text></g><g><title>std::panic::catch_unwind (91 samples, 0.08%)</title><rect x="23.5696%" y="533" width="0.0799%" height="15" fill="rgb(229,222,32)" fg:x="26847" fg:w="91"/><text x="23.8196%" y="543.50"></text></g><g><title>std::panicking::try (91 samples, 0.08%)</title><rect x="23.5696%" y="517" width="0.0799%" height="15" fill="rgb(228,62,29)" fg:x="26847" fg:w="91"/><text x="23.8196%" y="527.50"></text></g><g><title>std::panicking::try::do_call (91 samples, 0.08%)</title><rect x="23.5696%" y="501" width="0.0799%" height="15" fill="rgb(251,103,34)" fg:x="26847" fg:w="91"/><text x="23.8196%" y="511.50"></text></g><g><title>[libc-2.31.so] (52 samples, 0.05%)</title><rect x="23.6039%" y="485" width="0.0457%" height="15" fill="rgb(233,12,30)" fg:x="26886" fg:w="52"/><text x="23.8539%" y="495.50"></text></g><g><title>async_global_executor::reactor::block_on (1,911 samples, 1.68%)</title><rect x="22.0148%" y="1045" width="1.6777%" height="15" fill="rgb(238,52,0)" fg:x="25076" fg:w="1911"/><text x="22.2648%" y="1055.50"></text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (1,911 samples, 1.68%)</title><rect x="22.0148%" y="1029" width="1.6777%" height="15" fill="rgb(223,98,5)" fg:x="25076" fg:w="1911"/><text x="22.2648%" y="1039.50"></text></g><g><title>async_io::driver::block_on (1,911 samples, 1.68%)</title><rect x="22.0148%" y="1013" width="1.6777%" height="15" fill="rgb(228,75,37)" fg:x="25076" fg:w="1911"/><text x="22.2648%" y="1023.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,911 samples, 1.68%)</title><rect x="22.0148%" y="997" width="1.6777%" height="15" fill="rgb(205,115,49)" fg:x="25076" fg:w="1911"/><text x="22.2648%" y="1007.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,911 samples, 1.68%)</title><rect x="22.0148%" y="981" width="1.6777%" height="15" fill="rgb(250,154,43)" fg:x="25076" fg:w="1911"/><text x="22.2648%" y="991.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (1,911 samples, 1.68%)</title><rect x="22.0148%" y="965" width="1.6777%" height="15" fill="rgb(226,43,29)" fg:x="25076" fg:w="1911"/><text x="22.2648%" y="975.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,911 samples, 1.68%)</title><rect x="22.0148%" y="949" width="1.6777%" height="15" fill="rgb(249,228,39)" fg:x="25076" fg:w="1911"/><text x="22.2648%" y="959.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,911 samples, 1.68%)</title><rect x="22.0148%" y="933" width="1.6777%" height="15" fill="rgb(216,79,43)" fg:x="25076" fg:w="1911"/><text x="22.2648%" y="943.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (1,911 samples, 1.68%)</title><rect x="22.0148%" y="917" width="1.6777%" height="15" fill="rgb(228,95,12)" fg:x="25076" fg:w="1911"/><text x="22.2648%" y="927.50"></text></g><g><title>async_task::runnable::Runnable::run (1,911 samples, 1.68%)</title><rect x="22.0148%" y="901" width="1.6777%" height="15" fill="rgb(249,221,15)" fg:x="25076" fg:w="1911"/><text x="22.2648%" y="911.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (1,911 samples, 1.68%)</title><rect x="22.0148%" y="885" width="1.6777%" height="15" fill="rgb(233,34,13)" fg:x="25076" fg:w="1911"/><text x="22.2648%" y="895.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,911 samples, 1.68%)</title><rect x="22.0148%" y="869" width="1.6777%" height="15" fill="rgb(214,103,39)" fg:x="25076" fg:w="1911"/><text x="22.2648%" y="879.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,911 samples, 1.68%)</title><rect x="22.0148%" y="853" width="1.6777%" height="15" fill="rgb(251,126,39)" fg:x="25076" fg:w="1911"/><text x="22.2648%" y="863.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (1,911 samples, 1.68%)</title><rect x="22.0148%" y="837" width="1.6777%" height="15" fill="rgb(214,216,36)" fg:x="25076" fg:w="1911"/><text x="22.2648%" y="847.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (1,911 samples, 1.68%)</title><rect x="22.0148%" y="821" width="1.6777%" height="15" fill="rgb(220,221,8)" fg:x="25076" fg:w="1911"/><text x="22.2648%" y="831.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (1,911 samples, 1.68%)</title><rect x="22.0148%" y="805" width="1.6777%" height="15" fill="rgb(240,216,3)" fg:x="25076" fg:w="1911"/><text x="22.2648%" y="815.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,911 samples, 1.68%)</title><rect x="22.0148%" y="789" width="1.6777%" height="15" fill="rgb(232,218,17)" fg:x="25076" fg:w="1911"/><text x="22.2648%" y="799.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,911 samples, 1.68%)</title><rect x="22.0148%" y="773" width="1.6777%" height="15" fill="rgb(229,163,45)" fg:x="25076" fg:w="1911"/><text x="22.2648%" y="783.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (1,911 samples, 1.68%)</title><rect x="22.0148%" y="757" width="1.6777%" height="15" fill="rgb(231,110,42)" fg:x="25076" fg:w="1911"/><text x="22.2648%" y="767.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,911 samples, 1.68%)</title><rect x="22.0148%" y="741" width="1.6777%" height="15" fill="rgb(208,170,48)" fg:x="25076" fg:w="1911"/><text x="22.2648%" y="751.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,911 samples, 1.68%)</title><rect x="22.0148%" y="725" width="1.6777%" height="15" fill="rgb(239,116,25)" fg:x="25076" fg:w="1911"/><text x="22.2648%" y="735.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (1,911 samples, 1.68%)</title><rect x="22.0148%" y="709" width="1.6777%" height="15" fill="rgb(219,200,50)" fg:x="25076" fg:w="1911"/><text x="22.2648%" y="719.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (279 samples, 0.24%)</title><rect x="23.4476%" y="693" width="0.2449%" height="15" fill="rgb(245,200,0)" fg:x="26708" fg:w="279"/><text x="23.6976%" y="703.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (279 samples, 0.24%)</title><rect x="23.4476%" y="677" width="0.2449%" height="15" fill="rgb(245,119,33)" fg:x="26708" fg:w="279"/><text x="23.6976%" y="687.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (279 samples, 0.24%)</title><rect x="23.4476%" y="661" width="0.2449%" height="15" fill="rgb(231,125,12)" fg:x="26708" fg:w="279"/><text x="23.6976%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (279 samples, 0.24%)</title><rect x="23.4476%" y="645" width="0.2449%" height="15" fill="rgb(216,96,41)" fg:x="26708" fg:w="279"/><text x="23.6976%" y="655.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (279 samples, 0.24%)</title><rect x="23.4476%" y="629" width="0.2449%" height="15" fill="rgb(248,43,45)" fg:x="26708" fg:w="279"/><text x="23.6976%" y="639.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_TO&lt;_ErasedPtr&gt;::pull_data (49 samples, 0.04%)</title><rect x="23.6495%" y="613" width="0.0430%" height="15" fill="rgb(217,222,7)" fg:x="26938" fg:w="49"/><text x="23.8995%" y="623.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::pull_data (49 samples, 0.04%)</title><rect x="23.6495%" y="597" width="0.0430%" height="15" fill="rgb(233,28,6)" fg:x="26938" fg:w="49"/><text x="23.8995%" y="607.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data (49 samples, 0.04%)</title><rect x="23.6495%" y="581" width="0.0430%" height="15" fill="rgb(231,218,15)" fg:x="26938" fg:w="49"/><text x="23.8995%" y="591.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (49 samples, 0.04%)</title><rect x="23.6495%" y="565" width="0.0430%" height="15" fill="rgb(226,171,48)" fg:x="26938" fg:w="49"/><text x="23.8995%" y="575.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (49 samples, 0.04%)</title><rect x="23.6495%" y="549" width="0.0430%" height="15" fill="rgb(235,201,9)" fg:x="26938" fg:w="49"/><text x="23.8995%" y="559.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (49 samples, 0.04%)</title><rect x="23.6495%" y="533" width="0.0430%" height="15" fill="rgb(217,80,15)" fg:x="26938" fg:w="49"/><text x="23.8995%" y="543.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (49 samples, 0.04%)</title><rect x="23.6495%" y="517" width="0.0430%" height="15" fill="rgb(219,152,8)" fg:x="26938" fg:w="49"/><text x="23.8995%" y="527.50"></text></g><g><title>alloc::alloc::exchange_malloc (49 samples, 0.04%)</title><rect x="23.6495%" y="501" width="0.0430%" height="15" fill="rgb(243,107,38)" fg:x="26938" fg:w="49"/><text x="23.8995%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (49 samples, 0.04%)</title><rect x="23.6495%" y="485" width="0.0430%" height="15" fill="rgb(231,17,5)" fg:x="26938" fg:w="49"/><text x="23.8995%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (49 samples, 0.04%)</title><rect x="23.6495%" y="469" width="0.0430%" height="15" fill="rgb(209,25,54)" fg:x="26938" fg:w="49"/><text x="23.8995%" y="479.50"></text></g><g><title>alloc::alloc::alloc (49 samples, 0.04%)</title><rect x="23.6495%" y="453" width="0.0430%" height="15" fill="rgb(219,0,2)" fg:x="26938" fg:w="49"/><text x="23.8995%" y="463.50"></text></g><g><title>__rg_alloc (49 samples, 0.04%)</title><rect x="23.6495%" y="437" width="0.0430%" height="15" fill="rgb(246,9,5)" fg:x="26938" fg:w="49"/><text x="23.8995%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (49 samples, 0.04%)</title><rect x="23.6495%" y="421" width="0.0430%" height="15" fill="rgb(226,159,4)" fg:x="26938" fg:w="49"/><text x="23.8995%" y="431.50"></text></g><g><title>sn_rust_alloc (49 samples, 0.04%)</title><rect x="23.6495%" y="405" width="0.0430%" height="15" fill="rgb(219,175,34)" fg:x="26938" fg:w="49"/><text x="23.8995%" y="415.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (49 samples, 0.04%)</title><rect x="23.6495%" y="389" width="0.0430%" height="15" fill="rgb(236,10,46)" fg:x="26938" fg:w="49"/><text x="23.8995%" y="399.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (60 samples, 0.05%)</title><rect x="23.7084%" y="485" width="0.0527%" height="15" fill="rgb(240,211,16)" fg:x="27005" fg:w="60"/><text x="23.9584%" y="495.50"></text></g><g><title>[libc-2.31.so] (80 samples, 0.07%)</title><rect x="23.7628%" y="469" width="0.0702%" height="15" fill="rgb(205,3,43)" fg:x="27067" fg:w="80"/><text x="24.0128%" y="479.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (148 samples, 0.13%)</title><rect x="23.7610%" y="485" width="0.1299%" height="15" fill="rgb(245,7,22)" fg:x="27065" fg:w="148"/><text x="24.0110%" y="495.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (66 samples, 0.06%)</title><rect x="23.8330%" y="469" width="0.0579%" height="15" fill="rgb(239,132,32)" fg:x="27147" fg:w="66"/><text x="24.0830%" y="479.50"></text></g><g><title>[libc-2.31.so] (64 samples, 0.06%)</title><rect x="23.8348%" y="453" width="0.0562%" height="15" fill="rgb(228,202,34)" fg:x="27149" fg:w="64"/><text x="24.0848%" y="463.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (48 samples, 0.04%)</title><rect x="23.8945%" y="453" width="0.0421%" height="15" fill="rgb(254,200,22)" fg:x="27217" fg:w="48"/><text x="24.1445%" y="463.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (46 samples, 0.04%)</title><rect x="23.8962%" y="437" width="0.0404%" height="15" fill="rgb(219,10,39)" fg:x="27219" fg:w="46"/><text x="24.1462%" y="447.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (46 samples, 0.04%)</title><rect x="23.8962%" y="421" width="0.0404%" height="15" fill="rgb(226,210,39)" fg:x="27219" fg:w="46"/><text x="24.1462%" y="431.50"></text></g><g><title>[libc-2.31.so] (43 samples, 0.04%)</title><rect x="23.8989%" y="405" width="0.0378%" height="15" fill="rgb(208,219,16)" fg:x="27222" fg:w="43"/><text x="24.1489%" y="415.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (128 samples, 0.11%)</title><rect x="23.8910%" y="485" width="0.1124%" height="15" fill="rgb(216,158,51)" fg:x="27213" fg:w="128"/><text x="24.1410%" y="495.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (128 samples, 0.11%)</title><rect x="23.8910%" y="469" width="0.1124%" height="15" fill="rgb(233,14,44)" fg:x="27213" fg:w="128"/><text x="24.1410%" y="479.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (71 samples, 0.06%)</title><rect x="23.9410%" y="453" width="0.0623%" height="15" fill="rgb(237,97,39)" fg:x="27270" fg:w="71"/><text x="24.1910%" y="463.50"></text></g><g><title>[libc-2.31.so] (69 samples, 0.06%)</title><rect x="23.9428%" y="437" width="0.0606%" height="15" fill="rgb(218,198,43)" fg:x="27272" fg:w="69"/><text x="24.1928%" y="447.50"></text></g><g><title>[libc-2.31.so] (135 samples, 0.12%)</title><rect x="24.0033%" y="485" width="0.1185%" height="15" fill="rgb(231,104,20)" fg:x="27341" fg:w="135"/><text x="24.2533%" y="495.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (58 samples, 0.05%)</title><rect x="24.1219%" y="485" width="0.0509%" height="15" fill="rgb(254,36,13)" fg:x="27476" fg:w="58"/><text x="24.3719%" y="495.50"></text></g><g><title>[libc-2.31.so] (54 samples, 0.05%)</title><rect x="24.1254%" y="469" width="0.0474%" height="15" fill="rgb(248,14,50)" fg:x="27480" fg:w="54"/><text x="24.3754%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (34 samples, 0.03%)</title><rect x="24.1728%" y="485" width="0.0298%" height="15" fill="rgb(217,107,29)" fg:x="27534" fg:w="34"/><text x="24.4228%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (34 samples, 0.03%)</title><rect x="24.1728%" y="469" width="0.0298%" height="15" fill="rgb(251,169,33)" fg:x="27534" fg:w="34"/><text x="24.4228%" y="479.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 0.03%)</title><rect x="24.1728%" y="453" width="0.0298%" height="15" fill="rgb(217,108,32)" fg:x="27534" fg:w="34"/><text x="24.4228%" y="463.50"></text></g><g><title>sn_rust_dealloc (27 samples, 0.02%)</title><rect x="24.1789%" y="437" width="0.0237%" height="15" fill="rgb(219,66,42)" fg:x="27541" fg:w="27"/><text x="24.4289%" y="447.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::pull_data (31 samples, 0.03%)</title><rect x="24.2035%" y="469" width="0.0272%" height="15" fill="rgb(206,180,7)" fg:x="27569" fg:w="31"/><text x="24.4535%" y="479.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data (25 samples, 0.02%)</title><rect x="24.2088%" y="453" width="0.0219%" height="15" fill="rgb(208,226,31)" fg:x="27575" fg:w="25"/><text x="24.4588%" y="463.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (25 samples, 0.02%)</title><rect x="24.2088%" y="437" width="0.0219%" height="15" fill="rgb(218,26,49)" fg:x="27575" fg:w="25"/><text x="24.4588%" y="447.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (25 samples, 0.02%)</title><rect x="24.2088%" y="421" width="0.0219%" height="15" fill="rgb(233,197,48)" fg:x="27575" fg:w="25"/><text x="24.4588%" y="431.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (25 samples, 0.02%)</title><rect x="24.2088%" y="405" width="0.0219%" height="15" fill="rgb(252,181,51)" fg:x="27575" fg:w="25"/><text x="24.4588%" y="415.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (22 samples, 0.02%)</title><rect x="24.2114%" y="389" width="0.0193%" height="15" fill="rgb(253,90,19)" fg:x="27578" fg:w="22"/><text x="24.4614%" y="399.50"></text></g><g><title>alloc::alloc::exchange_malloc (22 samples, 0.02%)</title><rect x="24.2114%" y="373" width="0.0193%" height="15" fill="rgb(215,171,30)" fg:x="27578" fg:w="22"/><text x="24.4614%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (22 samples, 0.02%)</title><rect x="24.2114%" y="357" width="0.0193%" height="15" fill="rgb(214,222,9)" fg:x="27578" fg:w="22"/><text x="24.4614%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (22 samples, 0.02%)</title><rect x="24.2114%" y="341" width="0.0193%" height="15" fill="rgb(223,3,22)" fg:x="27578" fg:w="22"/><text x="24.4614%" y="351.50"></text></g><g><title>alloc::alloc::alloc (22 samples, 0.02%)</title><rect x="24.2114%" y="325" width="0.0193%" height="15" fill="rgb(225,196,46)" fg:x="27578" fg:w="22"/><text x="24.4614%" y="335.50"></text></g><g><title>__rg_alloc (22 samples, 0.02%)</title><rect x="24.2114%" y="309" width="0.0193%" height="15" fill="rgb(209,110,37)" fg:x="27578" fg:w="22"/><text x="24.4614%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (22 samples, 0.02%)</title><rect x="24.2114%" y="293" width="0.0193%" height="15" fill="rgb(249,89,12)" fg:x="27578" fg:w="22"/><text x="24.4614%" y="303.50"></text></g><g><title>sn_rust_alloc (22 samples, 0.02%)</title><rect x="24.2114%" y="277" width="0.0193%" height="15" fill="rgb(226,27,33)" fg:x="27578" fg:w="22"/><text x="24.4614%" y="287.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (610 samples, 0.54%)</title><rect x="23.6969%" y="581" width="0.5355%" height="15" fill="rgb(213,82,22)" fg:x="26992" fg:w="610"/><text x="23.9469%" y="591.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (610 samples, 0.54%)</title><rect x="23.6969%" y="565" width="0.5355%" height="15" fill="rgb(248,140,0)" fg:x="26992" fg:w="610"/><text x="23.9469%" y="575.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (610 samples, 0.54%)</title><rect x="23.6969%" y="549" width="0.5355%" height="15" fill="rgb(228,106,3)" fg:x="26992" fg:w="610"/><text x="23.9469%" y="559.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (610 samples, 0.54%)</title><rect x="23.6969%" y="533" width="0.5355%" height="15" fill="rgb(209,23,37)" fg:x="26992" fg:w="610"/><text x="23.9469%" y="543.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (610 samples, 0.54%)</title><rect x="23.6969%" y="517" width="0.5355%" height="15" fill="rgb(241,93,50)" fg:x="26992" fg:w="610"/><text x="23.9469%" y="527.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (605 samples, 0.53%)</title><rect x="23.7013%" y="501" width="0.5311%" height="15" fill="rgb(253,46,43)" fg:x="26997" fg:w="605"/><text x="23.9513%" y="511.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_TO&lt;_ErasedPtr&gt;::pull_data (34 samples, 0.03%)</title><rect x="24.2026%" y="485" width="0.0298%" height="15" fill="rgb(226,206,43)" fg:x="27568" fg:w="34"/><text x="24.4526%" y="495.50"></text></g><g><title>async_global_executor::threading::thread_main_loop (618 samples, 0.54%)</title><rect x="23.6926%" y="1045" width="0.5426%" height="15" fill="rgb(217,54,7)" fg:x="26987" fg:w="618"/><text x="23.9426%" y="1055.50"></text></g><g><title>std::panic::catch_unwind (618 samples, 0.54%)</title><rect x="23.6926%" y="1029" width="0.5426%" height="15" fill="rgb(223,5,52)" fg:x="26987" fg:w="618"/><text x="23.9426%" y="1039.50"></text></g><g><title>std::panicking::try (618 samples, 0.54%)</title><rect x="23.6926%" y="1013" width="0.5426%" height="15" fill="rgb(206,52,46)" fg:x="26987" fg:w="618"/><text x="23.9426%" y="1023.50"></text></g><g><title>std::panicking::try::do_call (618 samples, 0.54%)</title><rect x="23.6926%" y="997" width="0.5426%" height="15" fill="rgb(253,136,11)" fg:x="26987" fg:w="618"/><text x="23.9426%" y="1007.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (618 samples, 0.54%)</title><rect x="23.6926%" y="981" width="0.5426%" height="15" fill="rgb(208,106,33)" fg:x="26987" fg:w="618"/><text x="23.9426%" y="991.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (618 samples, 0.54%)</title><rect x="23.6926%" y="965" width="0.5426%" height="15" fill="rgb(206,54,4)" fg:x="26987" fg:w="618"/><text x="23.9426%" y="975.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (618 samples, 0.54%)</title><rect x="23.6926%" y="949" width="0.5426%" height="15" fill="rgb(213,3,15)" fg:x="26987" fg:w="618"/><text x="23.9426%" y="959.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (618 samples, 0.54%)</title><rect x="23.6926%" y="933" width="0.5426%" height="15" fill="rgb(252,211,39)" fg:x="26987" fg:w="618"/><text x="23.9426%" y="943.50"></text></g><g><title>async_global_executor::reactor::block_on (618 samples, 0.54%)</title><rect x="23.6926%" y="917" width="0.5426%" height="15" fill="rgb(223,6,36)" fg:x="26987" fg:w="618"/><text x="23.9426%" y="927.50"></text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (618 samples, 0.54%)</title><rect x="23.6926%" y="901" width="0.5426%" height="15" fill="rgb(252,169,45)" fg:x="26987" fg:w="618"/><text x="23.9426%" y="911.50"></text></g><g><title>async_io::driver::block_on (618 samples, 0.54%)</title><rect x="23.6926%" y="885" width="0.5426%" height="15" fill="rgb(212,48,26)" fg:x="26987" fg:w="618"/><text x="23.9426%" y="895.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (618 samples, 0.54%)</title><rect x="23.6926%" y="869" width="0.5426%" height="15" fill="rgb(251,102,48)" fg:x="26987" fg:w="618"/><text x="23.9426%" y="879.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (618 samples, 0.54%)</title><rect x="23.6926%" y="853" width="0.5426%" height="15" fill="rgb(243,208,16)" fg:x="26987" fg:w="618"/><text x="23.9426%" y="863.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (618 samples, 0.54%)</title><rect x="23.6926%" y="837" width="0.5426%" height="15" fill="rgb(219,96,24)" fg:x="26987" fg:w="618"/><text x="23.9426%" y="847.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (618 samples, 0.54%)</title><rect x="23.6926%" y="821" width="0.5426%" height="15" fill="rgb(219,33,29)" fg:x="26987" fg:w="618"/><text x="23.9426%" y="831.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (618 samples, 0.54%)</title><rect x="23.6926%" y="805" width="0.5426%" height="15" fill="rgb(223,176,5)" fg:x="26987" fg:w="618"/><text x="23.9426%" y="815.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (618 samples, 0.54%)</title><rect x="23.6926%" y="789" width="0.5426%" height="15" fill="rgb(228,140,14)" fg:x="26987" fg:w="618"/><text x="23.9426%" y="799.50"></text></g><g><title>async_task::runnable::Runnable::run (618 samples, 0.54%)</title><rect x="23.6926%" y="773" width="0.5426%" height="15" fill="rgb(217,179,31)" fg:x="26987" fg:w="618"/><text x="23.9426%" y="783.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (618 samples, 0.54%)</title><rect x="23.6926%" y="757" width="0.5426%" height="15" fill="rgb(230,9,30)" fg:x="26987" fg:w="618"/><text x="23.9426%" y="767.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (618 samples, 0.54%)</title><rect x="23.6926%" y="741" width="0.5426%" height="15" fill="rgb(230,136,20)" fg:x="26987" fg:w="618"/><text x="23.9426%" y="751.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (618 samples, 0.54%)</title><rect x="23.6926%" y="725" width="0.5426%" height="15" fill="rgb(215,210,22)" fg:x="26987" fg:w="618"/><text x="23.9426%" y="735.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (618 samples, 0.54%)</title><rect x="23.6926%" y="709" width="0.5426%" height="15" fill="rgb(218,43,5)" fg:x="26987" fg:w="618"/><text x="23.9426%" y="719.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (618 samples, 0.54%)</title><rect x="23.6926%" y="693" width="0.5426%" height="15" fill="rgb(216,11,5)" fg:x="26987" fg:w="618"/><text x="23.9426%" y="703.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (618 samples, 0.54%)</title><rect x="23.6926%" y="677" width="0.5426%" height="15" fill="rgb(209,82,29)" fg:x="26987" fg:w="618"/><text x="23.9426%" y="687.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (618 samples, 0.54%)</title><rect x="23.6926%" y="661" width="0.5426%" height="15" fill="rgb(244,115,12)" fg:x="26987" fg:w="618"/><text x="23.9426%" y="671.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (618 samples, 0.54%)</title><rect x="23.6926%" y="645" width="0.5426%" height="15" fill="rgb(222,82,18)" fg:x="26987" fg:w="618"/><text x="23.9426%" y="655.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (618 samples, 0.54%)</title><rect x="23.6926%" y="629" width="0.5426%" height="15" fill="rgb(249,227,8)" fg:x="26987" fg:w="618"/><text x="23.9426%" y="639.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (618 samples, 0.54%)</title><rect x="23.6926%" y="613" width="0.5426%" height="15" fill="rgb(253,141,45)" fg:x="26987" fg:w="618"/><text x="23.9426%" y="623.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (618 samples, 0.54%)</title><rect x="23.6926%" y="597" width="0.5426%" height="15" fill="rgb(234,184,4)" fg:x="26987" fg:w="618"/><text x="23.9426%" y="607.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (274 samples, 0.24%)</title><rect x="24.5108%" y="725" width="0.2406%" height="15" fill="rgb(218,194,23)" fg:x="27919" fg:w="274"/><text x="24.7608%" y="735.50"></text></g><g><title>[libc-2.31.so] (237 samples, 0.21%)</title><rect x="24.5433%" y="709" width="0.2081%" height="15" fill="rgb(235,66,41)" fg:x="27956" fg:w="237"/><text x="24.7933%" y="719.50"></text></g><g><title>[libc-2.31.so] (104 samples, 0.09%)</title><rect x="24.7768%" y="709" width="0.0913%" height="15" fill="rgb(245,217,1)" fg:x="28222" fg:w="104"/><text x="25.0268%" y="719.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (405 samples, 0.36%)</title><rect x="24.9857%" y="693" width="0.3556%" height="15" fill="rgb(229,91,1)" fg:x="28460" fg:w="405"/><text x="25.2357%" y="703.50"></text></g><g><title>[libc-2.31.so] (99 samples, 0.09%)</title><rect x="25.3474%" y="677" width="0.0869%" height="15" fill="rgb(207,101,30)" fg:x="28872" fg:w="99"/><text x="25.5974%" y="687.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (211 samples, 0.19%)</title><rect x="25.3413%" y="693" width="0.1852%" height="15" fill="rgb(223,82,49)" fg:x="28865" fg:w="211"/><text x="25.5913%" y="703.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (105 samples, 0.09%)</title><rect x="25.4344%" y="677" width="0.0922%" height="15" fill="rgb(218,167,17)" fg:x="28971" fg:w="105"/><text x="25.6844%" y="687.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (77 samples, 0.07%)</title><rect x="25.5265%" y="661" width="0.0676%" height="15" fill="rgb(208,103,14)" fg:x="29076" fg:w="77"/><text x="25.7765%" y="671.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (73 samples, 0.06%)</title><rect x="25.5300%" y="645" width="0.0641%" height="15" fill="rgb(238,20,8)" fg:x="29080" fg:w="73"/><text x="25.7800%" y="655.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (73 samples, 0.06%)</title><rect x="25.5300%" y="629" width="0.0641%" height="15" fill="rgb(218,80,54)" fg:x="29080" fg:w="73"/><text x="25.7800%" y="639.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (14 samples, 0.01%)</title><rect x="25.6161%" y="613" width="0.0123%" height="15" fill="rgb(240,144,17)" fg:x="29178" fg:w="14"/><text x="25.8661%" y="623.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (14 samples, 0.01%)</title><rect x="25.6161%" y="597" width="0.0123%" height="15" fill="rgb(245,27,50)" fg:x="29178" fg:w="14"/><text x="25.8661%" y="607.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (14 samples, 0.01%)</title><rect x="25.6161%" y="581" width="0.0123%" height="15" fill="rgb(251,51,7)" fg:x="29178" fg:w="14"/><text x="25.8661%" y="591.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (2,482 samples, 2.18%)</title><rect x="25.6003%" y="645" width="2.1790%" height="15" fill="rgb(245,217,29)" fg:x="29160" fg:w="2482"/><text x="25.8503%" y="655.50">&lt;..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (2,474 samples, 2.17%)</title><rect x="25.6073%" y="629" width="2.1720%" height="15" fill="rgb(221,176,29)" fg:x="29168" fg:w="2474"/><text x="25.8573%" y="639.50">a..</text></g><g><title>std::panic::catch_unwind (2,450 samples, 2.15%)</title><rect x="25.6284%" y="613" width="2.1509%" height="15" fill="rgb(212,180,24)" fg:x="29192" fg:w="2450"/><text x="25.8784%" y="623.50">s..</text></g><g><title>std::panicking::try (2,450 samples, 2.15%)</title><rect x="25.6284%" y="597" width="2.1509%" height="15" fill="rgb(254,24,2)" fg:x="29192" fg:w="2450"/><text x="25.8784%" y="607.50">s..</text></g><g><title>std::panicking::try::do_call (2,450 samples, 2.15%)</title><rect x="25.6284%" y="581" width="2.1509%" height="15" fill="rgb(230,100,2)" fg:x="29192" fg:w="2450"/><text x="25.8784%" y="591.50">s..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (2,494 samples, 2.19%)</title><rect x="25.5941%" y="661" width="2.1895%" height="15" fill="rgb(219,142,25)" fg:x="29153" fg:w="2494"/><text x="25.8441%" y="671.50">&lt;..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,649 samples, 2.33%)</title><rect x="25.5265%" y="693" width="2.3256%" height="15" fill="rgb(240,73,43)" fg:x="29076" fg:w="2649"/><text x="25.7765%" y="703.50">&lt;..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,649 samples, 2.33%)</title><rect x="25.5265%" y="677" width="2.3256%" height="15" fill="rgb(214,114,15)" fg:x="29076" fg:w="2649"/><text x="25.7765%" y="687.50">&lt;..</text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (78 samples, 0.07%)</title><rect x="27.7837%" y="661" width="0.0685%" height="15" fill="rgb(207,130,4)" fg:x="31647" fg:w="78"/><text x="28.0337%" y="671.50"></text></g><g><title>[libc-2.31.so] (339 samples, 0.30%)</title><rect x="27.8522%" y="693" width="0.2976%" height="15" fill="rgb(221,25,40)" fg:x="31725" fg:w="339"/><text x="28.1022%" y="703.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (28 samples, 0.02%)</title><rect x="28.1498%" y="693" width="0.0246%" height="15" fill="rgb(241,184,7)" fg:x="32064" fg:w="28"/><text x="28.3998%" y="703.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn (17 samples, 0.01%)</title><rect x="28.1814%" y="645" width="0.0149%" height="15" fill="rgb(235,159,4)" fg:x="32100" fg:w="17"/><text x="28.4314%" y="655.50"></text></g><g><title>async_ffi::DropBomb::with (13 samples, 0.01%)</title><rect x="28.1849%" y="629" width="0.0114%" height="15" fill="rgb(214,87,48)" fg:x="32104" fg:w="13"/><text x="28.4349%" y="639.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn::{{closure}} (12 samples, 0.01%)</title><rect x="28.1858%" y="613" width="0.0105%" height="15" fill="rgb(246,198,24)" fg:x="32105" fg:w="12"/><text x="28.4358%" y="623.50"></text></g><g><title>core::mem::drop (12 samples, 0.01%)</title><rect x="28.1858%" y="597" width="0.0105%" height="15" fill="rgb(209,66,40)" fg:x="32105" fg:w="12"/><text x="28.4358%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}}&gt;&gt;&gt; (12 samples, 0.01%)</title><rect x="28.1858%" y="581" width="0.0105%" height="15" fill="rgb(233,147,39)" fg:x="32105" fg:w="12"/><text x="28.4358%" y="591.50"></text></g><g><title>sn_rust_dealloc (17 samples, 0.01%)</title><rect x="28.1963%" y="645" width="0.0149%" height="15" fill="rgb(231,145,52)" fg:x="32117" fg:w="17"/><text x="28.4463%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (44 samples, 0.04%)</title><rect x="28.1744%" y="693" width="0.0386%" height="15" fill="rgb(206,20,26)" fg:x="32092" fg:w="44"/><text x="28.4244%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (44 samples, 0.04%)</title><rect x="28.1744%" y="677" width="0.0386%" height="15" fill="rgb(238,220,4)" fg:x="32092" fg:w="44"/><text x="28.4244%" y="687.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (44 samples, 0.04%)</title><rect x="28.1744%" y="661" width="0.0386%" height="15" fill="rgb(252,195,42)" fg:x="32092" fg:w="44"/><text x="28.4244%" y="671.50"></text></g><g><title>[libc-2.31.so] (60 samples, 0.05%)</title><rect x="28.3543%" y="677" width="0.0527%" height="15" fill="rgb(209,10,6)" fg:x="32297" fg:w="60"/><text x="28.6043%" y="687.50"></text></g><g><title>[libc-2.31.so] (126 samples, 0.11%)</title><rect x="28.4272%" y="597" width="0.1106%" height="15" fill="rgb(229,3,52)" fg:x="32380" fg:w="126"/><text x="28.6772%" y="607.50"></text></g><g><title>[libc-2.31.so] (85 samples, 0.07%)</title><rect x="28.5431%" y="581" width="0.0746%" height="15" fill="rgb(253,49,37)" fg:x="32512" fg:w="85"/><text x="28.7931%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (22 samples, 0.02%)</title><rect x="28.7345%" y="469" width="0.0193%" height="15" fill="rgb(240,103,49)" fg:x="32730" fg:w="22"/><text x="28.9845%" y="479.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (398 samples, 0.35%)</title><rect x="28.4070%" y="677" width="0.3494%" height="15" fill="rgb(250,182,30)" fg:x="32357" fg:w="398"/><text x="28.6570%" y="687.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event (383 samples, 0.34%)</title><rect x="28.4202%" y="661" width="0.3362%" height="15" fill="rgb(248,8,30)" fg:x="32372" fg:w="383"/><text x="28.6702%" y="671.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (383 samples, 0.34%)</title><rect x="28.4202%" y="645" width="0.3362%" height="15" fill="rgb(237,120,30)" fg:x="32372" fg:w="383"/><text x="28.6702%" y="655.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (383 samples, 0.34%)</title><rect x="28.4202%" y="629" width="0.3362%" height="15" fill="rgb(221,146,34)" fg:x="32372" fg:w="383"/><text x="28.6702%" y="639.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (383 samples, 0.34%)</title><rect x="28.4202%" y="613" width="0.3362%" height="15" fill="rgb(242,55,13)" fg:x="32372" fg:w="383"/><text x="28.6702%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (249 samples, 0.22%)</title><rect x="28.5378%" y="597" width="0.2186%" height="15" fill="rgb(242,112,31)" fg:x="32506" fg:w="249"/><text x="28.7878%" y="607.50"></text></g><g><title>alloc::alloc::exchange_malloc (158 samples, 0.14%)</title><rect x="28.6177%" y="581" width="0.1387%" height="15" fill="rgb(249,192,27)" fg:x="32597" fg:w="158"/><text x="28.8677%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (158 samples, 0.14%)</title><rect x="28.6177%" y="565" width="0.1387%" height="15" fill="rgb(208,204,44)" fg:x="32597" fg:w="158"/><text x="28.8677%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (158 samples, 0.14%)</title><rect x="28.6177%" y="549" width="0.1387%" height="15" fill="rgb(208,93,54)" fg:x="32597" fg:w="158"/><text x="28.8677%" y="559.50"></text></g><g><title>alloc::alloc::alloc (155 samples, 0.14%)</title><rect x="28.6203%" y="533" width="0.1361%" height="15" fill="rgb(242,1,31)" fg:x="32600" fg:w="155"/><text x="28.8703%" y="543.50"></text></g><g><title>__rg_alloc (155 samples, 0.14%)</title><rect x="28.6203%" y="517" width="0.1361%" height="15" fill="rgb(241,83,25)" fg:x="32600" fg:w="155"/><text x="28.8703%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (155 samples, 0.14%)</title><rect x="28.6203%" y="501" width="0.1361%" height="15" fill="rgb(205,169,50)" fg:x="32600" fg:w="155"/><text x="28.8703%" y="511.50"></text></g><g><title>sn_rust_alloc (151 samples, 0.13%)</title><rect x="28.6239%" y="485" width="0.1326%" height="15" fill="rgb(239,186,37)" fg:x="32604" fg:w="151"/><text x="28.8739%" y="495.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (4,438 samples, 3.90%)</title><rect x="24.8681%" y="709" width="3.8962%" height="15" fill="rgb(205,221,10)" fg:x="28326" fg:w="4438"/><text x="25.1181%" y="719.50">trem..</text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_TO&lt;_ErasedPtr&gt;::on_event (628 samples, 0.55%)</title><rect x="28.2130%" y="693" width="0.5513%" height="15" fill="rgb(218,196,15)" fg:x="32136" fg:w="628"/><text x="28.4630%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (14 samples, 0.01%)</title><rect x="28.8916%" y="677" width="0.0123%" height="15" fill="rgb(218,196,35)" fg:x="32909" fg:w="14"/><text x="29.1416%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (14 samples, 0.01%)</title><rect x="28.8916%" y="661" width="0.0123%" height="15" fill="rgb(233,63,24)" fg:x="32909" fg:w="14"/><text x="29.1416%" y="671.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (14 samples, 0.01%)</title><rect x="28.8916%" y="645" width="0.0123%" height="15" fill="rgb(225,8,4)" fg:x="32909" fg:w="14"/><text x="29.1416%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (20 samples, 0.02%)</title><rect x="28.9206%" y="597" width="0.0176%" height="15" fill="rgb(234,105,35)" fg:x="32942" fg:w="20"/><text x="29.1706%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (20 samples, 0.02%)</title><rect x="28.9206%" y="581" width="0.0176%" height="15" fill="rgb(236,21,32)" fg:x="32942" fg:w="20"/><text x="29.1706%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (20 samples, 0.02%)</title><rect x="28.9206%" y="565" width="0.0176%" height="15" fill="rgb(228,109,6)" fg:x="32942" fg:w="20"/><text x="29.1706%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (40 samples, 0.04%)</title><rect x="28.9074%" y="613" width="0.0351%" height="15" fill="rgb(229,215,31)" fg:x="32927" fg:w="40"/><text x="29.1574%" y="623.50"></text></g><g><title>sn_rust_dealloc (97 samples, 0.09%)</title><rect x="28.9425%" y="613" width="0.0852%" height="15" fill="rgb(221,52,54)" fg:x="32967" fg:w="97"/><text x="29.1925%" y="623.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,863 samples, 4.27%)</title><rect x="24.7601%" y="725" width="4.2693%" height="15" fill="rgb(252,129,43)" fg:x="28203" fg:w="4863"/><text x="25.0101%" y="735.50">&lt;core..</text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (302 samples, 0.27%)</title><rect x="28.7643%" y="709" width="0.2651%" height="15" fill="rgb(248,183,27)" fg:x="32764" fg:w="302"/><text x="29.0143%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (157 samples, 0.14%)</title><rect x="28.8916%" y="693" width="0.1378%" height="15" fill="rgb(250,0,22)" fg:x="32909" fg:w="157"/><text x="29.1416%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (143 samples, 0.13%)</title><rect x="28.9039%" y="677" width="0.1255%" height="15" fill="rgb(213,166,10)" fg:x="32923" fg:w="143"/><text x="29.1539%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (143 samples, 0.13%)</title><rect x="28.9039%" y="661" width="0.1255%" height="15" fill="rgb(207,163,36)" fg:x="32923" fg:w="143"/><text x="29.1539%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (143 samples, 0.13%)</title><rect x="28.9039%" y="645" width="0.1255%" height="15" fill="rgb(208,122,22)" fg:x="32923" fg:w="143"/><text x="29.1539%" y="655.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (143 samples, 0.13%)</title><rect x="28.9039%" y="629" width="0.1255%" height="15" fill="rgb(207,104,49)" fg:x="32923" fg:w="143"/><text x="29.1539%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (45 samples, 0.04%)</title><rect x="29.0532%" y="613" width="0.0395%" height="15" fill="rgb(248,211,50)" fg:x="33093" fg:w="45"/><text x="29.3032%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (43 samples, 0.04%)</title><rect x="29.0549%" y="597" width="0.0378%" height="15" fill="rgb(217,13,45)" fg:x="33095" fg:w="43"/><text x="29.3049%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (43 samples, 0.04%)</title><rect x="29.0549%" y="581" width="0.0378%" height="15" fill="rgb(211,216,49)" fg:x="33095" fg:w="43"/><text x="29.3049%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (31 samples, 0.03%)</title><rect x="29.0654%" y="565" width="0.0272%" height="15" fill="rgb(221,58,53)" fg:x="33107" fg:w="31"/><text x="29.3154%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (31 samples, 0.03%)</title><rect x="29.0654%" y="549" width="0.0272%" height="15" fill="rgb(220,112,41)" fg:x="33107" fg:w="31"/><text x="29.3154%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (31 samples, 0.03%)</title><rect x="29.0654%" y="533" width="0.0272%" height="15" fill="rgb(236,38,28)" fg:x="33107" fg:w="31"/><text x="29.3154%" y="543.50"></text></g><g><title>alloc::alloc::alloc (31 samples, 0.03%)</title><rect x="29.0654%" y="517" width="0.0272%" height="15" fill="rgb(227,195,22)" fg:x="33107" fg:w="31"/><text x="29.3154%" y="527.50"></text></g><g><title>__rg_alloc (31 samples, 0.03%)</title><rect x="29.0654%" y="501" width="0.0272%" height="15" fill="rgb(214,55,33)" fg:x="33107" fg:w="31"/><text x="29.3154%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (31 samples, 0.03%)</title><rect x="29.0654%" y="485" width="0.0272%" height="15" fill="rgb(248,80,13)" fg:x="33107" fg:w="31"/><text x="29.3154%" y="495.50"></text></g><g><title>sn_rust_alloc (26 samples, 0.02%)</title><rect x="29.0698%" y="469" width="0.0228%" height="15" fill="rgb(238,52,6)" fg:x="33112" fg:w="26"/><text x="29.3198%" y="479.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (75 samples, 0.07%)</title><rect x="29.0435%" y="693" width="0.0658%" height="15" fill="rgb(224,198,47)" fg:x="33082" fg:w="75"/><text x="29.2935%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (71 samples, 0.06%)</title><rect x="29.0470%" y="677" width="0.0623%" height="15" fill="rgb(233,171,20)" fg:x="33086" fg:w="71"/><text x="29.2970%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (68 samples, 0.06%)</title><rect x="29.0496%" y="661" width="0.0597%" height="15" fill="rgb(241,30,25)" fg:x="33089" fg:w="68"/><text x="29.2996%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (64 samples, 0.06%)</title><rect x="29.0532%" y="645" width="0.0562%" height="15" fill="rgb(207,171,38)" fg:x="33093" fg:w="64"/><text x="29.3032%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (64 samples, 0.06%)</title><rect x="29.0532%" y="629" width="0.0562%" height="15" fill="rgb(234,70,1)" fg:x="33093" fg:w="64"/><text x="29.3032%" y="639.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::iter (19 samples, 0.02%)</title><rect x="29.0927%" y="613" width="0.0167%" height="15" fill="rgb(232,178,18)" fg:x="33138" fg:w="19"/><text x="29.3427%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (18 samples, 0.02%)</title><rect x="29.0935%" y="597" width="0.0158%" height="15" fill="rgb(241,78,40)" fg:x="33139" fg:w="18"/><text x="29.3435%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (18 samples, 0.02%)</title><rect x="29.0935%" y="581" width="0.0158%" height="15" fill="rgb(222,35,25)" fg:x="33139" fg:w="18"/><text x="29.3435%" y="591.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (49 samples, 0.04%)</title><rect x="29.2744%" y="613" width="0.0430%" height="15" fill="rgb(207,92,16)" fg:x="33345" fg:w="49"/><text x="29.5244%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (49 samples, 0.04%)</title><rect x="29.2744%" y="597" width="0.0430%" height="15" fill="rgb(216,59,51)" fg:x="33345" fg:w="49"/><text x="29.5244%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (39 samples, 0.03%)</title><rect x="29.2832%" y="581" width="0.0342%" height="15" fill="rgb(213,80,28)" fg:x="33355" fg:w="39"/><text x="29.5332%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (32 samples, 0.03%)</title><rect x="29.2893%" y="565" width="0.0281%" height="15" fill="rgb(220,93,7)" fg:x="33362" fg:w="32"/><text x="29.5393%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (28 samples, 0.02%)</title><rect x="29.2928%" y="549" width="0.0246%" height="15" fill="rgb(225,24,44)" fg:x="33366" fg:w="28"/><text x="29.5428%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (28 samples, 0.02%)</title><rect x="29.2928%" y="533" width="0.0246%" height="15" fill="rgb(243,74,40)" fg:x="33366" fg:w="28"/><text x="29.5428%" y="543.50"></text></g><g><title>alloc::alloc::alloc (28 samples, 0.02%)</title><rect x="29.2928%" y="517" width="0.0246%" height="15" fill="rgb(228,39,7)" fg:x="33366" fg:w="28"/><text x="29.5428%" y="527.50"></text></g><g><title>__rg_alloc (28 samples, 0.02%)</title><rect x="29.2928%" y="501" width="0.0246%" height="15" fill="rgb(227,79,8)" fg:x="33366" fg:w="28"/><text x="29.5428%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (28 samples, 0.02%)</title><rect x="29.2928%" y="485" width="0.0246%" height="15" fill="rgb(236,58,11)" fg:x="33366" fg:w="28"/><text x="29.5428%" y="495.50"></text></g><g><title>sn_rust_alloc (28 samples, 0.02%)</title><rect x="29.2928%" y="469" width="0.0246%" height="15" fill="rgb(249,63,35)" fg:x="33366" fg:w="28"/><text x="29.5428%" y="479.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (72 samples, 0.06%)</title><rect x="29.2665%" y="661" width="0.0632%" height="15" fill="rgb(252,114,16)" fg:x="33336" fg:w="72"/><text x="29.5165%" y="671.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (72 samples, 0.06%)</title><rect x="29.2665%" y="645" width="0.0632%" height="15" fill="rgb(254,151,24)" fg:x="33336" fg:w="72"/><text x="29.5165%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (72 samples, 0.06%)</title><rect x="29.2665%" y="629" width="0.0632%" height="15" fill="rgb(253,54,39)" fg:x="33336" fg:w="72"/><text x="29.5165%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (14 samples, 0.01%)</title><rect x="29.3174%" y="613" width="0.0123%" height="15" fill="rgb(243,25,45)" fg:x="33394" fg:w="14"/><text x="29.5674%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::next (15 samples, 0.01%)</title><rect x="29.3517%" y="613" width="0.0132%" height="15" fill="rgb(234,134,9)" fg:x="33433" fg:w="15"/><text x="29.6017%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.02%)</title><rect x="29.3446%" y="645" width="0.0211%" height="15" fill="rgb(227,166,31)" fg:x="33425" fg:w="24"/><text x="29.5946%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (24 samples, 0.02%)</title><rect x="29.3446%" y="629" width="0.0211%" height="15" fill="rgb(245,143,41)" fg:x="33425" fg:w="24"/><text x="29.5946%" y="639.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint (14 samples, 0.01%)</title><rect x="29.3745%" y="613" width="0.0123%" height="15" fill="rgb(238,181,32)" fg:x="33459" fg:w="14"/><text x="29.6245%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (28 samples, 0.02%)</title><rect x="29.3657%" y="645" width="0.0246%" height="15" fill="rgb(224,113,18)" fg:x="33449" fg:w="28"/><text x="29.6157%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (28 samples, 0.02%)</title><rect x="29.3657%" y="629" width="0.0246%" height="15" fill="rgb(240,229,28)" fg:x="33449" fg:w="28"/><text x="29.6157%" y="639.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (450 samples, 0.40%)</title><rect x="29.0295%" y="725" width="0.3951%" height="15" fill="rgb(250,185,3)" fg:x="33066" fg:w="450"/><text x="29.2795%" y="735.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (439 samples, 0.39%)</title><rect x="29.0391%" y="709" width="0.3854%" height="15" fill="rgb(212,59,25)" fg:x="33077" fg:w="439"/><text x="29.2891%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (359 samples, 0.32%)</title><rect x="29.1093%" y="693" width="0.3152%" height="15" fill="rgb(221,87,20)" fg:x="33157" fg:w="359"/><text x="29.3593%" y="703.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (185 samples, 0.16%)</title><rect x="29.2621%" y="677" width="0.1624%" height="15" fill="rgb(213,74,28)" fg:x="33331" fg:w="185"/><text x="29.5121%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (108 samples, 0.09%)</title><rect x="29.3297%" y="661" width="0.0948%" height="15" fill="rgb(224,132,34)" fg:x="33408" fg:w="108"/><text x="29.5797%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (36 samples, 0.03%)</title><rect x="29.3929%" y="645" width="0.0316%" height="15" fill="rgb(222,101,24)" fg:x="33480" fg:w="36"/><text x="29.6429%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (36 samples, 0.03%)</title><rect x="29.3929%" y="629" width="0.0316%" height="15" fill="rgb(254,142,4)" fg:x="33480" fg:w="36"/><text x="29.6429%" y="639.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (36 samples, 0.03%)</title><rect x="29.3929%" y="613" width="0.0316%" height="15" fill="rgb(230,229,49)" fg:x="33480" fg:w="36"/><text x="29.6429%" y="623.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (34 samples, 0.03%)</title><rect x="29.3947%" y="597" width="0.0298%" height="15" fill="rgb(238,70,47)" fg:x="33482" fg:w="34"/><text x="29.6447%" y="607.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (34 samples, 0.03%)</title><rect x="29.3947%" y="581" width="0.0298%" height="15" fill="rgb(231,160,17)" fg:x="33482" fg:w="34"/><text x="29.6447%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (34 samples, 0.03%)</title><rect x="29.3947%" y="565" width="0.0298%" height="15" fill="rgb(218,68,53)" fg:x="33482" fg:w="34"/><text x="29.6447%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (34 samples, 0.03%)</title><rect x="29.3947%" y="549" width="0.0298%" height="15" fill="rgb(236,111,10)" fg:x="33482" fg:w="34"/><text x="29.6447%" y="559.50"></text></g><g><title>sn_rust_dealloc (23 samples, 0.02%)</title><rect x="29.4043%" y="533" width="0.0202%" height="15" fill="rgb(224,34,41)" fg:x="33493" fg:w="23"/><text x="29.6543%" y="543.50"></text></g><g><title>&lt;tremor_pipeline::EventId as core::clone::Clone&gt;::clone (32 samples, 0.03%)</title><rect x="29.4324%" y="709" width="0.0281%" height="15" fill="rgb(241,118,19)" fg:x="33525" fg:w="32"/><text x="29.6824%" y="719.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (26 samples, 0.02%)</title><rect x="29.4377%" y="693" width="0.0228%" height="15" fill="rgb(238,129,25)" fg:x="33531" fg:w="26"/><text x="29.6877%" y="703.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (16 samples, 0.01%)</title><rect x="29.4465%" y="677" width="0.0140%" height="15" fill="rgb(238,22,31)" fg:x="33541" fg:w="16"/><text x="29.6965%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (16 samples, 0.01%)</title><rect x="29.4465%" y="661" width="0.0140%" height="15" fill="rgb(222,174,48)" fg:x="33541" fg:w="16"/><text x="29.6965%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (16 samples, 0.01%)</title><rect x="29.4465%" y="645" width="0.0140%" height="15" fill="rgb(206,152,40)" fg:x="33541" fg:w="16"/><text x="29.6965%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (16 samples, 0.01%)</title><rect x="29.4465%" y="629" width="0.0140%" height="15" fill="rgb(218,99,54)" fg:x="33541" fg:w="16"/><text x="29.6965%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (16 samples, 0.01%)</title><rect x="29.4465%" y="613" width="0.0140%" height="15" fill="rgb(220,174,26)" fg:x="33541" fg:w="16"/><text x="29.6965%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (14 samples, 0.01%)</title><rect x="29.4482%" y="597" width="0.0123%" height="15" fill="rgb(245,116,9)" fg:x="33543" fg:w="14"/><text x="29.6982%" y="607.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (37 samples, 0.03%)</title><rect x="29.5018%" y="597" width="0.0325%" height="15" fill="rgb(209,72,35)" fg:x="33604" fg:w="37"/><text x="29.7518%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (33 samples, 0.03%)</title><rect x="29.5053%" y="581" width="0.0290%" height="15" fill="rgb(226,126,21)" fg:x="33608" fg:w="33"/><text x="29.7553%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (33 samples, 0.03%)</title><rect x="29.5053%" y="565" width="0.0290%" height="15" fill="rgb(227,192,1)" fg:x="33608" fg:w="33"/><text x="29.7553%" y="575.50"></text></g><g><title>alloc::alloc::exchange_malloc (27 samples, 0.02%)</title><rect x="29.5106%" y="549" width="0.0237%" height="15" fill="rgb(237,180,29)" fg:x="33614" fg:w="27"/><text x="29.7606%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (27 samples, 0.02%)</title><rect x="29.5106%" y="533" width="0.0237%" height="15" fill="rgb(230,197,35)" fg:x="33614" fg:w="27"/><text x="29.7606%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (27 samples, 0.02%)</title><rect x="29.5106%" y="517" width="0.0237%" height="15" fill="rgb(246,193,31)" fg:x="33614" fg:w="27"/><text x="29.7606%" y="527.50"></text></g><g><title>alloc::alloc::alloc (27 samples, 0.02%)</title><rect x="29.5106%" y="501" width="0.0237%" height="15" fill="rgb(241,36,4)" fg:x="33614" fg:w="27"/><text x="29.7606%" y="511.50"></text></g><g><title>__rg_alloc (27 samples, 0.02%)</title><rect x="29.5106%" y="485" width="0.0237%" height="15" fill="rgb(241,130,17)" fg:x="33614" fg:w="27"/><text x="29.7606%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (27 samples, 0.02%)</title><rect x="29.5106%" y="469" width="0.0237%" height="15" fill="rgb(206,137,32)" fg:x="33614" fg:w="27"/><text x="29.7606%" y="479.50"></text></g><g><title>sn_rust_alloc (23 samples, 0.02%)</title><rect x="29.5141%" y="453" width="0.0202%" height="15" fill="rgb(237,228,51)" fg:x="33618" fg:w="23"/><text x="29.7641%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (14 samples, 0.01%)</title><rect x="29.8714%" y="533" width="0.0123%" height="15" fill="rgb(243,6,42)" fg:x="34025" fg:w="14"/><text x="30.1214%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (14 samples, 0.01%)</title><rect x="29.8714%" y="517" width="0.0123%" height="15" fill="rgb(251,74,28)" fg:x="34025" fg:w="14"/><text x="30.1214%" y="527.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (65 samples, 0.06%)</title><rect x="29.8837%" y="533" width="0.0571%" height="15" fill="rgb(218,20,49)" fg:x="34039" fg:w="65"/><text x="30.1337%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (65 samples, 0.06%)</title><rect x="29.8837%" y="517" width="0.0571%" height="15" fill="rgb(238,28,14)" fg:x="34039" fg:w="65"/><text x="30.1337%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (106 samples, 0.09%)</title><rect x="29.8714%" y="549" width="0.0931%" height="15" fill="rgb(229,40,46)" fg:x="34025" fg:w="106"/><text x="30.1214%" y="559.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_full (27 samples, 0.02%)</title><rect x="29.9407%" y="533" width="0.0237%" height="15" fill="rgb(244,195,20)" fg:x="34104" fg:w="27"/><text x="30.1907%" y="543.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (20 samples, 0.02%)</title><rect x="29.9469%" y="517" width="0.0176%" height="15" fill="rgb(253,56,35)" fg:x="34111" fg:w="20"/><text x="30.1969%" y="527.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (20 samples, 0.02%)</title><rect x="29.9469%" y="501" width="0.0176%" height="15" fill="rgb(210,149,44)" fg:x="34111" fg:w="20"/><text x="30.1969%" y="511.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (532 samples, 0.47%)</title><rect x="29.5009%" y="677" width="0.4671%" height="15" fill="rgb(240,135,12)" fg:x="33603" fg:w="532"/><text x="29.7509%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (531 samples, 0.47%)</title><rect x="29.5018%" y="661" width="0.4662%" height="15" fill="rgb(251,24,50)" fg:x="33604" fg:w="531"/><text x="29.7518%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (531 samples, 0.47%)</title><rect x="29.5018%" y="645" width="0.4662%" height="15" fill="rgb(243,200,47)" fg:x="33604" fg:w="531"/><text x="29.7518%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (531 samples, 0.47%)</title><rect x="29.5018%" y="629" width="0.4662%" height="15" fill="rgb(224,166,26)" fg:x="33604" fg:w="531"/><text x="29.7518%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (531 samples, 0.47%)</title><rect x="29.5018%" y="613" width="0.4662%" height="15" fill="rgb(233,0,47)" fg:x="33604" fg:w="531"/><text x="29.7518%" y="623.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::iter (494 samples, 0.43%)</title><rect x="29.5343%" y="597" width="0.4337%" height="15" fill="rgb(253,80,5)" fg:x="33641" fg:w="494"/><text x="29.7843%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (123 samples, 0.11%)</title><rect x="29.8600%" y="581" width="0.1080%" height="15" fill="rgb(214,133,25)" fg:x="34012" fg:w="123"/><text x="30.1100%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (123 samples, 0.11%)</title><rect x="29.8600%" y="565" width="0.1080%" height="15" fill="rgb(209,27,14)" fg:x="34012" fg:w="123"/><text x="30.1100%" y="575.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (51 samples, 0.04%)</title><rect x="30.1005%" y="597" width="0.0448%" height="15" fill="rgb(219,102,51)" fg:x="34286" fg:w="51"/><text x="30.3505%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (51 samples, 0.04%)</title><rect x="30.1005%" y="581" width="0.0448%" height="15" fill="rgb(237,18,16)" fg:x="34286" fg:w="51"/><text x="30.3505%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (42 samples, 0.04%)</title><rect x="30.1084%" y="565" width="0.0369%" height="15" fill="rgb(241,85,17)" fg:x="34295" fg:w="42"/><text x="30.3584%" y="575.50"></text></g><g><title>alloc::alloc::exchange_malloc (35 samples, 0.03%)</title><rect x="30.1146%" y="549" width="0.0307%" height="15" fill="rgb(236,90,42)" fg:x="34302" fg:w="35"/><text x="30.3646%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (30 samples, 0.03%)</title><rect x="30.1190%" y="533" width="0.0263%" height="15" fill="rgb(249,57,21)" fg:x="34307" fg:w="30"/><text x="30.3690%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (30 samples, 0.03%)</title><rect x="30.1190%" y="517" width="0.0263%" height="15" fill="rgb(243,12,36)" fg:x="34307" fg:w="30"/><text x="30.3690%" y="527.50"></text></g><g><title>alloc::alloc::alloc (30 samples, 0.03%)</title><rect x="30.1190%" y="501" width="0.0263%" height="15" fill="rgb(253,128,47)" fg:x="34307" fg:w="30"/><text x="30.3690%" y="511.50"></text></g><g><title>__rg_alloc (30 samples, 0.03%)</title><rect x="30.1190%" y="485" width="0.0263%" height="15" fill="rgb(207,33,20)" fg:x="34307" fg:w="30"/><text x="30.3690%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (30 samples, 0.03%)</title><rect x="30.1190%" y="469" width="0.0263%" height="15" fill="rgb(233,215,35)" fg:x="34307" fg:w="30"/><text x="30.3690%" y="479.50"></text></g><g><title>sn_rust_alloc (30 samples, 0.03%)</title><rect x="30.1190%" y="453" width="0.0263%" height="15" fill="rgb(249,188,52)" fg:x="34307" fg:w="30"/><text x="30.3690%" y="463.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (74 samples, 0.06%)</title><rect x="30.0926%" y="645" width="0.0650%" height="15" fill="rgb(225,12,32)" fg:x="34277" fg:w="74"/><text x="30.3426%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (74 samples, 0.06%)</title><rect x="30.0926%" y="629" width="0.0650%" height="15" fill="rgb(247,98,14)" fg:x="34277" fg:w="74"/><text x="30.3426%" y="639.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (74 samples, 0.06%)</title><rect x="30.0926%" y="613" width="0.0650%" height="15" fill="rgb(247,219,48)" fg:x="34277" fg:w="74"/><text x="30.3426%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (14 samples, 0.01%)</title><rect x="30.1453%" y="597" width="0.0123%" height="15" fill="rgb(253,60,48)" fg:x="34337" fg:w="14"/><text x="30.3953%" y="607.50"></text></g><g><title>abi_stable::erased_types::iterator::next (15 samples, 0.01%)</title><rect x="30.1857%" y="597" width="0.0132%" height="15" fill="rgb(245,15,52)" fg:x="34383" fg:w="15"/><text x="30.4357%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (30 samples, 0.03%)</title><rect x="30.1778%" y="629" width="0.0263%" height="15" fill="rgb(220,133,28)" fg:x="34374" fg:w="30"/><text x="30.4278%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (30 samples, 0.03%)</title><rect x="30.1778%" y="613" width="0.0263%" height="15" fill="rgb(217,180,4)" fg:x="34374" fg:w="30"/><text x="30.4278%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint (15 samples, 0.01%)</title><rect x="30.2129%" y="597" width="0.0132%" height="15" fill="rgb(251,24,1)" fg:x="34414" fg:w="15"/><text x="30.4629%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (42 samples, 0.04%)</title><rect x="30.2041%" y="629" width="0.0369%" height="15" fill="rgb(212,185,49)" fg:x="34404" fg:w="42"/><text x="30.4541%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (42 samples, 0.04%)</title><rect x="30.2041%" y="613" width="0.0369%" height="15" fill="rgb(215,175,22)" fg:x="34404" fg:w="42"/><text x="30.4541%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (17 samples, 0.01%)</title><rect x="30.2261%" y="597" width="0.0149%" height="15" fill="rgb(250,205,14)" fg:x="34429" fg:w="17"/><text x="30.4761%" y="607.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (17 samples, 0.01%)</title><rect x="30.2261%" y="581" width="0.0149%" height="15" fill="rgb(225,211,22)" fg:x="34429" fg:w="17"/><text x="30.4761%" y="591.50"></text></g><g><title>sn_rust_dealloc (85 samples, 0.07%)</title><rect x="30.2708%" y="517" width="0.0746%" height="15" fill="rgb(251,179,42)" fg:x="34480" fg:w="85"/><text x="30.5208%" y="527.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::ContraflowData as core::convert::From&lt;&amp;tremor_pipeline::event::Event&gt;&gt;::from (1,050 samples, 0.92%)</title><rect x="29.4245%" y="725" width="0.9218%" height="15" fill="rgb(208,216,51)" fg:x="33516" fg:w="1050"/><text x="29.6745%" y="735.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (1,009 samples, 0.89%)</title><rect x="29.4605%" y="709" width="0.8858%" height="15" fill="rgb(235,36,11)" fg:x="33557" fg:w="1009"/><text x="29.7105%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (965 samples, 0.85%)</title><rect x="29.4991%" y="693" width="0.8472%" height="15" fill="rgb(213,189,28)" fg:x="33601" fg:w="965"/><text x="29.7491%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (431 samples, 0.38%)</title><rect x="29.9680%" y="677" width="0.3784%" height="15" fill="rgb(227,203,42)" fg:x="34135" fg:w="431"/><text x="30.2180%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (297 samples, 0.26%)</title><rect x="30.0856%" y="661" width="0.2607%" height="15" fill="rgb(244,72,36)" fg:x="34269" fg:w="297"/><text x="30.3356%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (215 samples, 0.19%)</title><rect x="30.1576%" y="645" width="0.1888%" height="15" fill="rgb(213,53,17)" fg:x="34351" fg:w="215"/><text x="30.4076%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (109 samples, 0.10%)</title><rect x="30.2506%" y="629" width="0.0957%" height="15" fill="rgb(207,167,3)" fg:x="34457" fg:w="109"/><text x="30.5006%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (109 samples, 0.10%)</title><rect x="30.2506%" y="613" width="0.0957%" height="15" fill="rgb(216,98,30)" fg:x="34457" fg:w="109"/><text x="30.5006%" y="623.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (109 samples, 0.10%)</title><rect x="30.2506%" y="597" width="0.0957%" height="15" fill="rgb(236,123,15)" fg:x="34457" fg:w="109"/><text x="30.5006%" y="607.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (104 samples, 0.09%)</title><rect x="30.2550%" y="581" width="0.0913%" height="15" fill="rgb(248,81,50)" fg:x="34462" fg:w="104"/><text x="30.5050%" y="591.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (103 samples, 0.09%)</title><rect x="30.2559%" y="565" width="0.0904%" height="15" fill="rgb(214,120,4)" fg:x="34463" fg:w="103"/><text x="30.5059%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (103 samples, 0.09%)</title><rect x="30.2559%" y="549" width="0.0904%" height="15" fill="rgb(208,179,34)" fg:x="34463" fg:w="103"/><text x="30.5059%" y="559.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (103 samples, 0.09%)</title><rect x="30.2559%" y="533" width="0.0904%" height="15" fill="rgb(227,140,7)" fg:x="34463" fg:w="103"/><text x="30.5059%" y="543.50"></text></g><g><title>[libc-2.31.so] (731 samples, 0.64%)</title><rect x="30.3463%" y="725" width="0.6418%" height="15" fill="rgb(214,22,6)" fg:x="34566" fg:w="731"/><text x="30.5963%" y="735.50"></text></g><g><title>sn_rust_dealloc (89 samples, 0.08%)</title><rect x="30.9978%" y="565" width="0.0781%" height="15" fill="rgb(207,137,27)" fg:x="35308" fg:w="89"/><text x="31.2478%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (102 samples, 0.09%)</title><rect x="30.9881%" y="725" width="0.0895%" height="15" fill="rgb(210,8,46)" fg:x="35297" fg:w="102"/><text x="31.2381%" y="735.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (102 samples, 0.09%)</title><rect x="30.9881%" y="709" width="0.0895%" height="15" fill="rgb(240,16,54)" fg:x="35297" fg:w="102"/><text x="31.2381%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (97 samples, 0.09%)</title><rect x="30.9925%" y="693" width="0.0852%" height="15" fill="rgb(211,209,29)" fg:x="35302" fg:w="97"/><text x="31.2425%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (97 samples, 0.09%)</title><rect x="30.9925%" y="677" width="0.0852%" height="15" fill="rgb(226,228,24)" fg:x="35302" fg:w="97"/><text x="31.2425%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (97 samples, 0.09%)</title><rect x="30.9925%" y="661" width="0.0852%" height="15" fill="rgb(222,84,9)" fg:x="35302" fg:w="97"/><text x="31.2425%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (97 samples, 0.09%)</title><rect x="30.9925%" y="645" width="0.0852%" height="15" fill="rgb(234,203,30)" fg:x="35302" fg:w="97"/><text x="31.2425%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (97 samples, 0.09%)</title><rect x="30.9925%" y="629" width="0.0852%" height="15" fill="rgb(238,109,14)" fg:x="35302" fg:w="97"/><text x="31.2425%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (97 samples, 0.09%)</title><rect x="30.9925%" y="613" width="0.0852%" height="15" fill="rgb(233,206,34)" fg:x="35302" fg:w="97"/><text x="31.2425%" y="623.50"></text></g><g><title>__rg_dealloc (97 samples, 0.09%)</title><rect x="30.9925%" y="597" width="0.0852%" height="15" fill="rgb(220,167,47)" fg:x="35302" fg:w="97"/><text x="31.2425%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (97 samples, 0.09%)</title><rect x="30.9925%" y="581" width="0.0852%" height="15" fill="rgb(238,105,10)" fg:x="35302" fg:w="97"/><text x="31.2425%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt;&gt; (29 samples, 0.03%)</title><rect x="31.0777%" y="725" width="0.0255%" height="15" fill="rgb(213,227,17)" fg:x="35399" fg:w="29"/><text x="31.3277%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt; (29 samples, 0.03%)</title><rect x="31.0777%" y="709" width="0.0255%" height="15" fill="rgb(217,132,38)" fg:x="35399" fg:w="29"/><text x="31.3277%" y="719.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (26 samples, 0.02%)</title><rect x="31.1268%" y="709" width="0.0228%" height="15" fill="rgb(242,146,4)" fg:x="35455" fg:w="26"/><text x="31.3768%" y="719.50"></text></g><g><title>core::time::Duration::as_nanos (27 samples, 0.02%)</title><rect x="31.1496%" y="709" width="0.0237%" height="15" fill="rgb(212,61,9)" fg:x="35481" fg:w="27"/><text x="31.3996%" y="719.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (127 samples, 0.11%)</title><rect x="31.1733%" y="693" width="0.1115%" height="15" fill="rgb(247,126,22)" fg:x="35508" fg:w="127"/><text x="31.4233%" y="703.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (39 samples, 0.03%)</title><rect x="31.3235%" y="661" width="0.0342%" height="15" fill="rgb(220,196,2)" fg:x="35679" fg:w="39"/><text x="31.5735%" y="671.50"></text></g><g><title>core::cmp::PartialOrd::ge (39 samples, 0.03%)</title><rect x="31.3235%" y="645" width="0.0342%" height="15" fill="rgb(208,46,4)" fg:x="35679" fg:w="39"/><text x="31.5735%" y="655.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (38 samples, 0.03%)</title><rect x="31.3243%" y="629" width="0.0334%" height="15" fill="rgb(252,104,46)" fg:x="35680" fg:w="38"/><text x="31.5743%" y="639.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (38 samples, 0.03%)</title><rect x="31.3243%" y="613" width="0.0334%" height="15" fill="rgb(237,152,48)" fg:x="35680" fg:w="38"/><text x="31.5743%" y="623.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (38 samples, 0.03%)</title><rect x="31.3243%" y="597" width="0.0334%" height="15" fill="rgb(221,59,37)" fg:x="35680" fg:w="38"/><text x="31.5743%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (20 samples, 0.02%)</title><rect x="31.3402%" y="581" width="0.0176%" height="15" fill="rgb(209,202,51)" fg:x="35698" fg:w="20"/><text x="31.5902%" y="591.50"></text></g><g><title>std::time::SystemTime::duration_since (235 samples, 0.21%)</title><rect x="31.1733%" y="709" width="0.2063%" height="15" fill="rgb(228,81,30)" fg:x="35508" fg:w="235"/><text x="31.4233%" y="719.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (108 samples, 0.09%)</title><rect x="31.2848%" y="693" width="0.0948%" height="15" fill="rgb(227,42,39)" fg:x="35635" fg:w="108"/><text x="31.5348%" y="703.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (108 samples, 0.09%)</title><rect x="31.2848%" y="677" width="0.0948%" height="15" fill="rgb(221,26,2)" fg:x="35635" fg:w="108"/><text x="31.5348%" y="687.50"></text></g><g><title>core::time::Duration::new (25 samples, 0.02%)</title><rect x="31.3577%" y="661" width="0.0219%" height="15" fill="rgb(254,61,31)" fg:x="35718" fg:w="25"/><text x="31.6077%" y="671.50"></text></g><g><title>tremor_common::time::nanotime (913 samples, 0.80%)</title><rect x="31.1031%" y="725" width="0.8015%" height="15" fill="rgb(222,173,38)" fg:x="35428" fg:w="913"/><text x="31.3531%" y="735.50"></text></g><g><title>std::time::SystemTime::now (598 samples, 0.52%)</title><rect x="31.3797%" y="709" width="0.5250%" height="15" fill="rgb(218,50,12)" fg:x="35743" fg:w="598"/><text x="31.6297%" y="719.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (598 samples, 0.52%)</title><rect x="31.3797%" y="693" width="0.5250%" height="15" fill="rgb(223,88,40)" fg:x="35743" fg:w="598"/><text x="31.6297%" y="703.50"></text></g><g><title>std::sys::unix::time::inner::now (598 samples, 0.52%)</title><rect x="31.3797%" y="677" width="0.5250%" height="15" fill="rgb(237,54,19)" fg:x="35743" fg:w="598"/><text x="31.6297%" y="687.50"></text></g><g><title>__clock_gettime (481 samples, 0.42%)</title><rect x="31.4824%" y="661" width="0.4223%" height="15" fill="rgb(251,129,25)" fg:x="35860" fg:w="481"/><text x="31.7324%" y="671.50"></text></g><g><title>__vdso_clock_gettime (426 samples, 0.37%)</title><rect x="31.5307%" y="645" width="0.3740%" height="15" fill="rgb(238,97,19)" fg:x="35915" fg:w="426"/><text x="31.7807%" y="655.50"></text></g><g><title>[[vdso]] (374 samples, 0.33%)</title><rect x="31.5763%" y="629" width="0.3283%" height="15" fill="rgb(240,169,18)" fg:x="35967" fg:w="374"/><text x="31.8263%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.02%)</title><rect x="31.9213%" y="581" width="0.0176%" height="15" fill="rgb(230,187,49)" fg:x="36360" fg:w="20"/><text x="32.1713%" y="591.50"></text></g><g><title>&lt;halfbrown::iter::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.01%)</title><rect x="31.9284%" y="565" width="0.0105%" height="15" fill="rgb(209,44,26)" fg:x="36368" fg:w="12"/><text x="32.1784%" y="575.50"></text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.01%)</title><rect x="31.9284%" y="549" width="0.0105%" height="15" fill="rgb(244,0,6)" fg:x="36368" fg:w="12"/><text x="32.1784%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.01%)</title><rect x="31.9284%" y="533" width="0.0105%" height="15" fill="rgb(248,18,21)" fg:x="36368" fg:w="12"/><text x="32.1784%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.01%)</title><rect x="31.9284%" y="517" width="0.0105%" height="15" fill="rgb(245,180,19)" fg:x="36368" fg:w="12"/><text x="32.1784%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 0.03%)</title><rect x="31.9117%" y="677" width="0.0298%" height="15" fill="rgb(252,118,36)" fg:x="36349" fg:w="34"/><text x="32.1617%" y="687.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 0.03%)</title><rect x="31.9117%" y="661" width="0.0298%" height="15" fill="rgb(210,224,19)" fg:x="36349" fg:w="34"/><text x="32.1617%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 0.03%)</title><rect x="31.9117%" y="645" width="0.0298%" height="15" fill="rgb(218,30,24)" fg:x="36349" fg:w="34"/><text x="32.1617%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (34 samples, 0.03%)</title><rect x="31.9117%" y="629" width="0.0298%" height="15" fill="rgb(219,75,50)" fg:x="36349" fg:w="34"/><text x="32.1617%" y="639.50"></text></g><g><title>abi_stable::erased_types::iterator::next (30 samples, 0.03%)</title><rect x="31.9152%" y="613" width="0.0263%" height="15" fill="rgb(234,72,50)" fg:x="36353" fg:w="30"/><text x="32.1652%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (23 samples, 0.02%)</title><rect x="31.9213%" y="597" width="0.0202%" height="15" fill="rgb(219,100,48)" fg:x="36360" fg:w="23"/><text x="32.1713%" y="607.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint (13 samples, 0.01%)</title><rect x="31.9503%" y="613" width="0.0114%" height="15" fill="rgb(253,5,41)" fg:x="36393" fg:w="13"/><text x="32.2003%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (31 samples, 0.03%)</title><rect x="31.9415%" y="677" width="0.0272%" height="15" fill="rgb(247,181,11)" fg:x="36383" fg:w="31"/><text x="32.1915%" y="687.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::size_hint (31 samples, 0.03%)</title><rect x="31.9415%" y="661" width="0.0272%" height="15" fill="rgb(222,223,25)" fg:x="36383" fg:w="31"/><text x="32.1915%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (31 samples, 0.03%)</title><rect x="31.9415%" y="645" width="0.0272%" height="15" fill="rgb(214,198,28)" fg:x="36383" fg:w="31"/><text x="32.1915%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (31 samples, 0.03%)</title><rect x="31.9415%" y="629" width="0.0272%" height="15" fill="rgb(230,46,43)" fg:x="36383" fg:w="31"/><text x="32.1915%" y="639.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;abi_stable::std_types::tuple::Tuple2&lt;K,V&gt;&gt;&gt;::extend (109 samples, 0.10%)</title><rect x="31.9047%" y="709" width="0.0957%" height="15" fill="rgb(233,65,53)" fg:x="36341" fg:w="109"/><text x="32.1547%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (106 samples, 0.09%)</title><rect x="31.9073%" y="693" width="0.0931%" height="15" fill="rgb(221,121,27)" fg:x="36344" fg:w="106"/><text x="32.1573%" y="703.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (36 samples, 0.03%)</title><rect x="31.9687%" y="677" width="0.0316%" height="15" fill="rgb(247,70,47)" fg:x="36414" fg:w="36"/><text x="32.2187%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (31 samples, 0.03%)</title><rect x="31.9731%" y="661" width="0.0272%" height="15" fill="rgb(228,85,35)" fg:x="36419" fg:w="31"/><text x="32.2231%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (26 samples, 0.02%)</title><rect x="31.9775%" y="645" width="0.0228%" height="15" fill="rgb(209,50,18)" fg:x="36424" fg:w="26"/><text x="32.2275%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (24 samples, 0.02%)</title><rect x="31.9793%" y="629" width="0.0211%" height="15" fill="rgb(250,19,35)" fg:x="36426" fg:w="24"/><text x="32.2293%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (24 samples, 0.02%)</title><rect x="31.9793%" y="613" width="0.0211%" height="15" fill="rgb(253,107,29)" fg:x="36426" fg:w="24"/><text x="32.2293%" y="623.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (24 samples, 0.02%)</title><rect x="31.9793%" y="597" width="0.0211%" height="15" fill="rgb(252,179,29)" fg:x="36426" fg:w="24"/><text x="32.2293%" y="607.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (163 samples, 0.14%)</title><rect x="32.0179%" y="629" width="0.1431%" height="15" fill="rgb(238,194,6)" fg:x="36470" fg:w="163"/><text x="32.2679%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (163 samples, 0.14%)</title><rect x="32.0179%" y="613" width="0.1431%" height="15" fill="rgb(238,164,29)" fg:x="36470" fg:w="163"/><text x="32.2679%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (152 samples, 0.13%)</title><rect x="32.0276%" y="597" width="0.1334%" height="15" fill="rgb(224,25,9)" fg:x="36481" fg:w="152"/><text x="32.2776%" y="607.50"></text></g><g><title>alloc::alloc::exchange_malloc (127 samples, 0.11%)</title><rect x="32.0495%" y="581" width="0.1115%" height="15" fill="rgb(244,153,23)" fg:x="36506" fg:w="127"/><text x="32.2995%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (123 samples, 0.11%)</title><rect x="32.0530%" y="565" width="0.1080%" height="15" fill="rgb(212,203,14)" fg:x="36510" fg:w="123"/><text x="32.3030%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (123 samples, 0.11%)</title><rect x="32.0530%" y="549" width="0.1080%" height="15" fill="rgb(220,164,20)" fg:x="36510" fg:w="123"/><text x="32.3030%" y="559.50"></text></g><g><title>alloc::alloc::alloc (123 samples, 0.11%)</title><rect x="32.0530%" y="533" width="0.1080%" height="15" fill="rgb(222,203,48)" fg:x="36510" fg:w="123"/><text x="32.3030%" y="543.50"></text></g><g><title>__rg_alloc (123 samples, 0.11%)</title><rect x="32.0530%" y="517" width="0.1080%" height="15" fill="rgb(215,159,22)" fg:x="36510" fg:w="123"/><text x="32.3030%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (123 samples, 0.11%)</title><rect x="32.0530%" y="501" width="0.1080%" height="15" fill="rgb(216,183,47)" fg:x="36510" fg:w="123"/><text x="32.3030%" y="511.50"></text></g><g><title>sn_rust_alloc (123 samples, 0.11%)</title><rect x="32.0530%" y="485" width="0.1080%" height="15" fill="rgb(229,195,25)" fg:x="36510" fg:w="123"/><text x="32.3030%" y="495.50"></text></g><g><title>sn_rust_dealloc (55 samples, 0.05%)</title><rect x="32.1812%" y="565" width="0.0483%" height="15" fill="rgb(224,132,51)" fg:x="36656" fg:w="55"/><text x="32.4312%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::pointer_trait::OwnedPointer for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop_allocation (75 samples, 0.07%)</title><rect x="32.1672%" y="581" width="0.0658%" height="15" fill="rgb(240,63,7)" fg:x="36640" fg:w="75"/><text x="32.4172%" y="591.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (117 samples, 0.10%)</title><rect x="32.1672%" y="629" width="0.1027%" height="15" fill="rgb(249,182,41)" fg:x="36640" fg:w="117"/><text x="32.4172%" y="639.50"></text></g><g><title>core::ops::function::FnOnce::call_once (117 samples, 0.10%)</title><rect x="32.1672%" y="613" width="0.1027%" height="15" fill="rgb(243,47,26)" fg:x="36640" fg:w="117"/><text x="32.4172%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::into_inner (117 samples, 0.10%)</title><rect x="32.1672%" y="597" width="0.1027%" height="15" fill="rgb(233,48,2)" fg:x="36640" fg:w="117"/><text x="32.4172%" y="607.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (42 samples, 0.04%)</title><rect x="32.2330%" y="581" width="0.0369%" height="15" fill="rgb(244,165,34)" fg:x="36715" fg:w="42"/><text x="32.4830%" y="591.50"></text></g><g><title>core::ptr::read (42 samples, 0.04%)</title><rect x="32.2330%" y="565" width="0.0369%" height="15" fill="rgb(207,89,7)" fg:x="36715" fg:w="42"/><text x="32.4830%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (330 samples, 0.29%)</title><rect x="32.0004%" y="709" width="0.2897%" height="15" fill="rgb(244,117,36)" fg:x="36450" fg:w="330"/><text x="32.2504%" y="719.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (318 samples, 0.28%)</title><rect x="32.0109%" y="693" width="0.2792%" height="15" fill="rgb(226,144,34)" fg:x="36462" fg:w="318"/><text x="32.2609%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val (317 samples, 0.28%)</title><rect x="32.0118%" y="677" width="0.2783%" height="15" fill="rgb(213,23,19)" fg:x="36463" fg:w="317"/><text x="32.2618%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val::{{closure}} (314 samples, 0.28%)</title><rect x="32.0144%" y="661" width="0.2757%" height="15" fill="rgb(217,75,12)" fg:x="36466" fg:w="314"/><text x="32.2644%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val::{{closure}} (314 samples, 0.28%)</title><rect x="32.0144%" y="645" width="0.2757%" height="15" fill="rgb(224,159,17)" fg:x="36466" fg:w="314"/><text x="32.2644%" y="655.50"></text></g><g><title>halfbrown::iter::&lt;impl core::iter::traits::collect::IntoIterator for halfbrown::HashMap&lt;K,V,S&gt;&gt;::into_iter (23 samples, 0.02%)</title><rect x="32.2699%" y="629" width="0.0202%" height="15" fill="rgb(217,118,1)" fg:x="36757" fg:w="23"/><text x="32.5199%" y="639.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (18 samples, 0.02%)</title><rect x="32.2743%" y="613" width="0.0158%" height="15" fill="rgb(232,180,48)" fg:x="36762" fg:w="18"/><text x="32.5243%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (18 samples, 0.02%)</title><rect x="32.2743%" y="597" width="0.0158%" height="15" fill="rgb(230,27,33)" fg:x="36762" fg:w="18"/><text x="32.5243%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (19 samples, 0.02%)</title><rect x="32.3059%" y="597" width="0.0167%" height="15" fill="rgb(205,31,21)" fg:x="36798" fg:w="19"/><text x="32.5559%" y="607.50"></text></g><g><title>sn_rust_dealloc (55 samples, 0.05%)</title><rect x="32.3225%" y="597" width="0.0483%" height="15" fill="rgb(253,59,4)" fg:x="36817" fg:w="55"/><text x="32.5725%" y="607.50"></text></g><g><title>tremor_pipeline::OpMeta::merge (532 samples, 0.47%)</title><rect x="31.9047%" y="725" width="0.4671%" height="15" fill="rgb(224,201,9)" fg:x="36341" fg:w="532"/><text x="32.1547%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (93 samples, 0.08%)</title><rect x="32.2901%" y="709" width="0.0816%" height="15" fill="rgb(229,206,30)" fg:x="36780" fg:w="93"/><text x="32.5401%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::ValIterInterface&lt;u32,u32&gt;&gt;&gt; (93 samples, 0.08%)</title><rect x="32.2901%" y="693" width="0.0816%" height="15" fill="rgb(212,67,47)" fg:x="36780" fg:w="93"/><text x="32.5401%" y="703.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (93 samples, 0.08%)</title><rect x="32.2901%" y="677" width="0.0816%" height="15" fill="rgb(211,96,50)" fg:x="36780" fg:w="93"/><text x="32.5401%" y="687.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (82 samples, 0.07%)</title><rect x="32.2997%" y="661" width="0.0720%" height="15" fill="rgb(252,114,18)" fg:x="36791" fg:w="82"/><text x="32.5497%" y="671.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (82 samples, 0.07%)</title><rect x="32.2997%" y="645" width="0.0720%" height="15" fill="rgb(223,58,37)" fg:x="36791" fg:w="82"/><text x="32.5497%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (82 samples, 0.07%)</title><rect x="32.2997%" y="629" width="0.0720%" height="15" fill="rgb(237,70,4)" fg:x="36791" fg:w="82"/><text x="32.5497%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (82 samples, 0.07%)</title><rect x="32.2997%" y="613" width="0.0720%" height="15" fill="rgb(244,85,46)" fg:x="36791" fg:w="82"/><text x="32.5497%" y="623.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (9,286 samples, 8.15%)</title><rect x="24.2351%" y="741" width="8.1524%" height="15" fill="rgb(223,39,52)" fg:x="27605" fg:w="9286"/><text x="24.4851%" y="751.50">tremor_runt..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (140 samples, 0.12%)</title><rect x="32.4314%" y="629" width="0.1229%" height="15" fill="rgb(218,200,14)" fg:x="36941" fg:w="140"/><text x="32.6814%" y="639.50"></text></g><g><title>core::ptr::read (133 samples, 0.12%)</title><rect x="32.4376%" y="613" width="0.1168%" height="15" fill="rgb(208,171,16)" fg:x="36948" fg:w="133"/><text x="32.6876%" y="623.50"></text></g><g><title>[libc-2.31.so] (133 samples, 0.12%)</title><rect x="32.4376%" y="597" width="0.1168%" height="15" fill="rgb(234,200,18)" fg:x="36948" fg:w="133"/><text x="32.6876%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (63 samples, 0.06%)</title><rect x="32.5578%" y="501" width="0.0553%" height="15" fill="rgb(228,45,11)" fg:x="37085" fg:w="63"/><text x="32.8078%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (63 samples, 0.06%)</title><rect x="32.5578%" y="485" width="0.0553%" height="15" fill="rgb(237,182,11)" fg:x="37085" fg:w="63"/><text x="32.8078%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (63 samples, 0.06%)</title><rect x="32.5578%" y="469" width="0.0553%" height="15" fill="rgb(241,175,49)" fg:x="37085" fg:w="63"/><text x="32.8078%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (62 samples, 0.05%)</title><rect x="32.5587%" y="453" width="0.0544%" height="15" fill="rgb(247,38,35)" fg:x="37086" fg:w="62"/><text x="32.8087%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (62 samples, 0.05%)</title><rect x="32.5587%" y="437" width="0.0544%" height="15" fill="rgb(228,39,49)" fg:x="37086" fg:w="62"/><text x="32.8087%" y="447.50"></text></g><g><title>alloc::alloc::alloc (62 samples, 0.05%)</title><rect x="32.5587%" y="421" width="0.0544%" height="15" fill="rgb(226,101,26)" fg:x="37086" fg:w="62"/><text x="32.8087%" y="431.50"></text></g><g><title>__rg_alloc (62 samples, 0.05%)</title><rect x="32.5587%" y="405" width="0.0544%" height="15" fill="rgb(206,141,19)" fg:x="37086" fg:w="62"/><text x="32.8087%" y="415.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (62 samples, 0.05%)</title><rect x="32.5587%" y="389" width="0.0544%" height="15" fill="rgb(211,200,13)" fg:x="37086" fg:w="62"/><text x="32.8087%" y="399.50"></text></g><g><title>sn_rust_alloc (62 samples, 0.05%)</title><rect x="32.5587%" y="373" width="0.0544%" height="15" fill="rgb(241,121,6)" fg:x="37086" fg:w="62"/><text x="32.8087%" y="383.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (81 samples, 0.07%)</title><rect x="32.5578%" y="629" width="0.0711%" height="15" fill="rgb(234,221,29)" fg:x="37085" fg:w="81"/><text x="32.8078%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (81 samples, 0.07%)</title><rect x="32.5578%" y="613" width="0.0711%" height="15" fill="rgb(229,136,5)" fg:x="37085" fg:w="81"/><text x="32.8078%" y="623.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (81 samples, 0.07%)</title><rect x="32.5578%" y="597" width="0.0711%" height="15" fill="rgb(238,36,11)" fg:x="37085" fg:w="81"/><text x="32.8078%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (81 samples, 0.07%)</title><rect x="32.5578%" y="581" width="0.0711%" height="15" fill="rgb(251,55,41)" fg:x="37085" fg:w="81"/><text x="32.8078%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (81 samples, 0.07%)</title><rect x="32.5578%" y="565" width="0.0711%" height="15" fill="rgb(242,34,40)" fg:x="37085" fg:w="81"/><text x="32.8078%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (81 samples, 0.07%)</title><rect x="32.5578%" y="549" width="0.0711%" height="15" fill="rgb(215,42,17)" fg:x="37085" fg:w="81"/><text x="32.8078%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (81 samples, 0.07%)</title><rect x="32.5578%" y="533" width="0.0711%" height="15" fill="rgb(207,44,46)" fg:x="37085" fg:w="81"/><text x="32.8078%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (81 samples, 0.07%)</title><rect x="32.5578%" y="517" width="0.0711%" height="15" fill="rgb(211,206,28)" fg:x="37085" fg:w="81"/><text x="32.8078%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (18 samples, 0.02%)</title><rect x="32.6131%" y="501" width="0.0158%" height="15" fill="rgb(237,167,16)" fg:x="37148" fg:w="18"/><text x="32.8631%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (18 samples, 0.02%)</title><rect x="32.6131%" y="485" width="0.0158%" height="15" fill="rgb(233,66,6)" fg:x="37148" fg:w="18"/><text x="32.8631%" y="495.50"></text></g><g><title>[libc-2.31.so] (14 samples, 0.01%)</title><rect x="32.6167%" y="469" width="0.0123%" height="15" fill="rgb(246,123,29)" fg:x="37152" fg:w="14"/><text x="32.8667%" y="479.50"></text></g><g><title>[libc-2.31.so] (242 samples, 0.21%)</title><rect x="32.6289%" y="629" width="0.2125%" height="15" fill="rgb(209,62,40)" fg:x="37166" fg:w="242"/><text x="32.8789%" y="639.50"></text></g><g><title>[libc-2.31.so] (120 samples, 0.11%)</title><rect x="32.8467%" y="613" width="0.1054%" height="15" fill="rgb(218,4,25)" fg:x="37414" fg:w="120"/><text x="33.0967%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (164 samples, 0.14%)</title><rect x="32.8414%" y="629" width="0.1440%" height="15" fill="rgb(253,91,49)" fg:x="37408" fg:w="164"/><text x="33.0914%" y="639.50"></text></g><g><title>alloc::alloc::exchange_malloc (38 samples, 0.03%)</title><rect x="32.9520%" y="613" width="0.0334%" height="15" fill="rgb(228,155,29)" fg:x="37534" fg:w="38"/><text x="33.2020%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (38 samples, 0.03%)</title><rect x="32.9520%" y="597" width="0.0334%" height="15" fill="rgb(243,57,37)" fg:x="37534" fg:w="38"/><text x="33.2020%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (38 samples, 0.03%)</title><rect x="32.9520%" y="581" width="0.0334%" height="15" fill="rgb(244,167,17)" fg:x="37534" fg:w="38"/><text x="33.2020%" y="591.50"></text></g><g><title>alloc::alloc::alloc (38 samples, 0.03%)</title><rect x="32.9520%" y="565" width="0.0334%" height="15" fill="rgb(207,181,38)" fg:x="37534" fg:w="38"/><text x="33.2020%" y="575.50"></text></g><g><title>__rg_alloc (38 samples, 0.03%)</title><rect x="32.9520%" y="549" width="0.0334%" height="15" fill="rgb(211,8,23)" fg:x="37534" fg:w="38"/><text x="33.2020%" y="559.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (38 samples, 0.03%)</title><rect x="32.9520%" y="533" width="0.0334%" height="15" fill="rgb(235,11,44)" fg:x="37534" fg:w="38"/><text x="33.2020%" y="543.50"></text></g><g><title>sn_rust_alloc (38 samples, 0.03%)</title><rect x="32.9520%" y="517" width="0.0334%" height="15" fill="rgb(248,18,52)" fg:x="37534" fg:w="38"/><text x="33.2020%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (29 samples, 0.03%)</title><rect x="32.9854%" y="629" width="0.0255%" height="15" fill="rgb(208,4,7)" fg:x="37572" fg:w="29"/><text x="33.2354%" y="639.50"></text></g><g><title>sn_rust_dealloc (25 samples, 0.02%)</title><rect x="32.9889%" y="613" width="0.0219%" height="15" fill="rgb(240,17,39)" fg:x="37576" fg:w="25"/><text x="33.2389%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::eq_ignore_ascii_case (13 samples, 0.01%)</title><rect x="33.0170%" y="629" width="0.0114%" height="15" fill="rgb(207,170,3)" fg:x="37608" fg:w="13"/><text x="33.2670%" y="639.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case (13 samples, 0.01%)</title><rect x="33.0170%" y="613" width="0.0114%" height="15" fill="rgb(236,100,52)" fg:x="37608" fg:w="13"/><text x="33.2670%" y="623.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (758 samples, 0.67%)</title><rect x="32.3875%" y="661" width="0.6655%" height="15" fill="rgb(246,78,51)" fg:x="36891" fg:w="758"/><text x="32.6375%" y="671.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (758 samples, 0.67%)</title><rect x="32.3875%" y="645" width="0.6655%" height="15" fill="rgb(211,17,15)" fg:x="36891" fg:w="758"/><text x="32.6375%" y="655.50"></text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (24 samples, 0.02%)</title><rect x="33.0319%" y="629" width="0.0211%" height="15" fill="rgb(209,59,46)" fg:x="37625" fg:w="24"/><text x="33.2819%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (24 samples, 0.02%)</title><rect x="33.0319%" y="613" width="0.0211%" height="15" fill="rgb(210,92,25)" fg:x="37625" fg:w="24"/><text x="33.2819%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (24 samples, 0.02%)</title><rect x="33.0319%" y="597" width="0.0211%" height="15" fill="rgb(238,174,52)" fg:x="37625" fg:w="24"/><text x="33.2819%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (19 samples, 0.02%)</title><rect x="33.0363%" y="581" width="0.0167%" height="15" fill="rgb(230,73,7)" fg:x="37630" fg:w="19"/><text x="33.2863%" y="591.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (780 samples, 0.68%)</title><rect x="32.3875%" y="725" width="0.6848%" height="15" fill="rgb(243,124,40)" fg:x="36891" fg:w="780"/><text x="32.6375%" y="735.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (780 samples, 0.68%)</title><rect x="32.3875%" y="709" width="0.6848%" height="15" fill="rgb(244,170,11)" fg:x="36891" fg:w="780"/><text x="32.6375%" y="719.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (780 samples, 0.68%)</title><rect x="32.3875%" y="693" width="0.6848%" height="15" fill="rgb(207,114,54)" fg:x="36891" fg:w="780"/><text x="32.6375%" y="703.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (780 samples, 0.68%)</title><rect x="32.3875%" y="677" width="0.6848%" height="15" fill="rgb(205,42,20)" fg:x="36891" fg:w="780"/><text x="32.6375%" y="687.50"></text></g><g><title>tremor_runtime::connectors::source::Streams::get_or_create_stream (21 samples, 0.02%)</title><rect x="33.0539%" y="661" width="0.0184%" height="15" fill="rgb(230,30,28)" fg:x="37650" fg:w="21"/><text x="33.3039%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (15 samples, 0.01%)</title><rect x="33.0591%" y="645" width="0.0132%" height="15" fill="rgb(205,73,54)" fg:x="37656" fg:w="15"/><text x="33.3091%" y="655.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (13 samples, 0.01%)</title><rect x="33.0609%" y="629" width="0.0114%" height="15" fill="rgb(254,227,23)" fg:x="37658" fg:w="13"/><text x="33.3109%" y="639.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (13 samples, 0.01%)</title><rect x="33.0609%" y="613" width="0.0114%" height="15" fill="rgb(228,202,34)" fg:x="37658" fg:w="13"/><text x="33.3109%" y="623.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (13 samples, 0.01%)</title><rect x="33.0609%" y="597" width="0.0114%" height="15" fill="rgb(222,225,37)" fg:x="37658" fg:w="13"/><text x="33.3109%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (138 samples, 0.12%)</title><rect x="33.4603%" y="277" width="0.1212%" height="15" fill="rgb(221,14,54)" fg:x="38113" fg:w="138"/><text x="33.7103%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (138 samples, 0.12%)</title><rect x="33.4603%" y="261" width="0.1212%" height="15" fill="rgb(254,102,2)" fg:x="38113" fg:w="138"/><text x="33.7103%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (138 samples, 0.12%)</title><rect x="33.4603%" y="245" width="0.1212%" height="15" fill="rgb(232,104,17)" fg:x="38113" fg:w="138"/><text x="33.7103%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (137 samples, 0.12%)</title><rect x="33.4612%" y="229" width="0.1203%" height="15" fill="rgb(250,220,14)" fg:x="38114" fg:w="137"/><text x="33.7112%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (137 samples, 0.12%)</title><rect x="33.4612%" y="213" width="0.1203%" height="15" fill="rgb(241,158,9)" fg:x="38114" fg:w="137"/><text x="33.7112%" y="223.50"></text></g><g><title>alloc::alloc::alloc (137 samples, 0.12%)</title><rect x="33.4612%" y="197" width="0.1203%" height="15" fill="rgb(246,9,43)" fg:x="38114" fg:w="137"/><text x="33.7112%" y="207.50"></text></g><g><title>__rg_alloc (137 samples, 0.12%)</title><rect x="33.4612%" y="181" width="0.1203%" height="15" fill="rgb(206,73,33)" fg:x="38114" fg:w="137"/><text x="33.7112%" y="191.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (137 samples, 0.12%)</title><rect x="33.4612%" y="165" width="0.1203%" height="15" fill="rgb(222,79,8)" fg:x="38114" fg:w="137"/><text x="33.7112%" y="175.50"></text></g><g><title>sn_rust_alloc (133 samples, 0.12%)</title><rect x="33.4647%" y="149" width="0.1168%" height="15" fill="rgb(234,8,54)" fg:x="38118" fg:w="133"/><text x="33.7147%" y="159.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (13 samples, 0.01%)</title><rect x="33.5701%" y="133" width="0.0114%" height="15" fill="rgb(209,134,38)" fg:x="38238" fg:w="13"/><text x="33.8201%" y="143.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (172 samples, 0.15%)</title><rect x="33.4524%" y="389" width="0.1510%" height="15" fill="rgb(230,127,29)" fg:x="38104" fg:w="172"/><text x="33.7024%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (171 samples, 0.15%)</title><rect x="33.4533%" y="373" width="0.1501%" height="15" fill="rgb(242,44,41)" fg:x="38105" fg:w="171"/><text x="33.7033%" y="383.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (166 samples, 0.15%)</title><rect x="33.4577%" y="357" width="0.1457%" height="15" fill="rgb(222,56,43)" fg:x="38110" fg:w="166"/><text x="33.7077%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (163 samples, 0.14%)</title><rect x="33.4603%" y="341" width="0.1431%" height="15" fill="rgb(238,39,47)" fg:x="38113" fg:w="163"/><text x="33.7103%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (163 samples, 0.14%)</title><rect x="33.4603%" y="325" width="0.1431%" height="15" fill="rgb(226,79,43)" fg:x="38113" fg:w="163"/><text x="33.7103%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (163 samples, 0.14%)</title><rect x="33.4603%" y="309" width="0.1431%" height="15" fill="rgb(242,105,53)" fg:x="38113" fg:w="163"/><text x="33.7103%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (163 samples, 0.14%)</title><rect x="33.4603%" y="293" width="0.1431%" height="15" fill="rgb(251,132,46)" fg:x="38113" fg:w="163"/><text x="33.7103%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (25 samples, 0.02%)</title><rect x="33.5815%" y="277" width="0.0219%" height="15" fill="rgb(231,77,14)" fg:x="38251" fg:w="25"/><text x="33.8315%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (25 samples, 0.02%)</title><rect x="33.5815%" y="261" width="0.0219%" height="15" fill="rgb(240,135,9)" fg:x="38251" fg:w="25"/><text x="33.8315%" y="271.50"></text></g><g><title>[libc-2.31.so] (19 samples, 0.02%)</title><rect x="33.5868%" y="245" width="0.0167%" height="15" fill="rgb(248,109,14)" fg:x="38257" fg:w="19"/><text x="33.8368%" y="255.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (12 samples, 0.01%)</title><rect x="33.6052%" y="373" width="0.0105%" height="15" fill="rgb(227,146,52)" fg:x="38278" fg:w="12"/><text x="33.8552%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (78 samples, 0.07%)</title><rect x="33.6289%" y="181" width="0.0685%" height="15" fill="rgb(232,54,3)" fg:x="38305" fg:w="78"/><text x="33.8789%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (78 samples, 0.07%)</title><rect x="33.6289%" y="165" width="0.0685%" height="15" fill="rgb(229,201,43)" fg:x="38305" fg:w="78"/><text x="33.8789%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (78 samples, 0.07%)</title><rect x="33.6289%" y="149" width="0.0685%" height="15" fill="rgb(252,161,33)" fg:x="38305" fg:w="78"/><text x="33.8789%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (78 samples, 0.07%)</title><rect x="33.6289%" y="133" width="0.0685%" height="15" fill="rgb(226,146,40)" fg:x="38305" fg:w="78"/><text x="33.8789%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (78 samples, 0.07%)</title><rect x="33.6289%" y="117" width="0.0685%" height="15" fill="rgb(219,47,25)" fg:x="38305" fg:w="78"/><text x="33.8789%" y="127.50"></text></g><g><title>alloc::alloc::alloc (78 samples, 0.07%)</title><rect x="33.6289%" y="101" width="0.0685%" height="15" fill="rgb(250,135,13)" fg:x="38305" fg:w="78"/><text x="33.8789%" y="111.50"></text></g><g><title>__rg_alloc (78 samples, 0.07%)</title><rect x="33.6289%" y="85" width="0.0685%" height="15" fill="rgb(219,229,18)" fg:x="38305" fg:w="78"/><text x="33.8789%" y="95.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (78 samples, 0.07%)</title><rect x="33.6289%" y="69" width="0.0685%" height="15" fill="rgb(217,152,27)" fg:x="38305" fg:w="78"/><text x="33.8789%" y="79.50"></text></g><g><title>sn_rust_alloc (77 samples, 0.07%)</title><rect x="33.6298%" y="53" width="0.0676%" height="15" fill="rgb(225,71,47)" fg:x="38306" fg:w="77"/><text x="33.8798%" y="63.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (19 samples, 0.02%)</title><rect x="33.6807%" y="37" width="0.0167%" height="15" fill="rgb(220,139,14)" fg:x="38364" fg:w="19"/><text x="33.9307%" y="47.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (106 samples, 0.09%)</title><rect x="33.6219%" y="293" width="0.0931%" height="15" fill="rgb(247,54,32)" fg:x="38297" fg:w="106"/><text x="33.8719%" y="303.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (106 samples, 0.09%)</title><rect x="33.6219%" y="277" width="0.0931%" height="15" fill="rgb(252,131,39)" fg:x="38297" fg:w="106"/><text x="33.8719%" y="287.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (106 samples, 0.09%)</title><rect x="33.6219%" y="261" width="0.0931%" height="15" fill="rgb(210,108,39)" fg:x="38297" fg:w="106"/><text x="33.8719%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (98 samples, 0.09%)</title><rect x="33.6289%" y="245" width="0.0860%" height="15" fill="rgb(205,23,29)" fg:x="38305" fg:w="98"/><text x="33.8789%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (98 samples, 0.09%)</title><rect x="33.6289%" y="229" width="0.0860%" height="15" fill="rgb(246,139,46)" fg:x="38305" fg:w="98"/><text x="33.8789%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (98 samples, 0.09%)</title><rect x="33.6289%" y="213" width="0.0860%" height="15" fill="rgb(250,81,26)" fg:x="38305" fg:w="98"/><text x="33.8789%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (98 samples, 0.09%)</title><rect x="33.6289%" y="197" width="0.0860%" height="15" fill="rgb(214,104,7)" fg:x="38305" fg:w="98"/><text x="33.8789%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (20 samples, 0.02%)</title><rect x="33.6974%" y="181" width="0.0176%" height="15" fill="rgb(233,189,8)" fg:x="38383" fg:w="20"/><text x="33.9474%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (20 samples, 0.02%)</title><rect x="33.6974%" y="165" width="0.0176%" height="15" fill="rgb(228,141,17)" fg:x="38383" fg:w="20"/><text x="33.9474%" y="175.50"></text></g><g><title>[libc-2.31.so] (17 samples, 0.01%)</title><rect x="33.7000%" y="149" width="0.0149%" height="15" fill="rgb(247,157,1)" fg:x="38386" fg:w="17"/><text x="33.9500%" y="159.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (12 samples, 0.01%)</title><rect x="33.7659%" y="149" width="0.0105%" height="15" fill="rgb(249,225,5)" fg:x="38461" fg:w="12"/><text x="34.0159%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (60 samples, 0.05%)</title><rect x="33.7246%" y="245" width="0.0527%" height="15" fill="rgb(242,55,13)" fg:x="38414" fg:w="60"/><text x="33.9746%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (60 samples, 0.05%)</title><rect x="33.7246%" y="229" width="0.0527%" height="15" fill="rgb(230,49,50)" fg:x="38414" fg:w="60"/><text x="33.9746%" y="239.50"></text></g><g><title>alloc::alloc::alloc (57 samples, 0.05%)</title><rect x="33.7272%" y="213" width="0.0500%" height="15" fill="rgb(241,111,38)" fg:x="38417" fg:w="57"/><text x="33.9772%" y="223.50"></text></g><g><title>__rg_alloc (57 samples, 0.05%)</title><rect x="33.7272%" y="197" width="0.0500%" height="15" fill="rgb(252,155,4)" fg:x="38417" fg:w="57"/><text x="33.9772%" y="207.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (57 samples, 0.05%)</title><rect x="33.7272%" y="181" width="0.0500%" height="15" fill="rgb(212,69,32)" fg:x="38417" fg:w="57"/><text x="33.9772%" y="191.50"></text></g><g><title>sn_rust_alloc (54 samples, 0.05%)</title><rect x="33.7299%" y="165" width="0.0474%" height="15" fill="rgb(243,107,47)" fg:x="38420" fg:w="54"/><text x="33.9799%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (65 samples, 0.06%)</title><rect x="33.7220%" y="293" width="0.0571%" height="15" fill="rgb(247,130,12)" fg:x="38411" fg:w="65"/><text x="33.9720%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (62 samples, 0.05%)</title><rect x="33.7246%" y="277" width="0.0544%" height="15" fill="rgb(233,74,16)" fg:x="38414" fg:w="62"/><text x="33.9746%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (62 samples, 0.05%)</title><rect x="33.7246%" y="261" width="0.0544%" height="15" fill="rgb(208,58,18)" fg:x="38414" fg:w="62"/><text x="33.9746%" y="271.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (632 samples, 0.55%)</title><rect x="33.2321%" y="405" width="0.5548%" height="15" fill="rgb(242,225,1)" fg:x="37853" fg:w="632"/><text x="33.4821%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (209 samples, 0.18%)</title><rect x="33.6034%" y="389" width="0.1835%" height="15" fill="rgb(249,39,40)" fg:x="38276" fg:w="209"/><text x="33.8534%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (195 samples, 0.17%)</title><rect x="33.6157%" y="373" width="0.1712%" height="15" fill="rgb(207,72,44)" fg:x="38290" fg:w="195"/><text x="33.8657%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (195 samples, 0.17%)</title><rect x="33.6157%" y="357" width="0.1712%" height="15" fill="rgb(215,193,12)" fg:x="38290" fg:w="195"/><text x="33.8657%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (195 samples, 0.17%)</title><rect x="33.6157%" y="341" width="0.1712%" height="15" fill="rgb(248,41,39)" fg:x="38290" fg:w="195"/><text x="33.8657%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (195 samples, 0.17%)</title><rect x="33.6157%" y="325" width="0.1712%" height="15" fill="rgb(253,85,4)" fg:x="38290" fg:w="195"/><text x="33.8657%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (195 samples, 0.17%)</title><rect x="33.6157%" y="309" width="0.1712%" height="15" fill="rgb(243,70,31)" fg:x="38290" fg:w="195"/><text x="33.8657%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (14 samples, 0.01%)</title><rect x="33.8150%" y="325" width="0.0123%" height="15" fill="rgb(253,195,26)" fg:x="38517" fg:w="14"/><text x="34.0650%" y="335.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (35 samples, 0.03%)</title><rect x="33.8343%" y="309" width="0.0307%" height="15" fill="rgb(243,42,11)" fg:x="38539" fg:w="35"/><text x="34.0843%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (13 samples, 0.01%)</title><rect x="33.8774%" y="277" width="0.0114%" height="15" fill="rgb(239,66,17)" fg:x="38588" fg:w="13"/><text x="34.1274%" y="287.50"></text></g><g><title>core::cmp::PartialOrd::ge (13 samples, 0.01%)</title><rect x="33.8774%" y="261" width="0.0114%" height="15" fill="rgb(217,132,21)" fg:x="38588" fg:w="13"/><text x="34.1274%" y="271.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (13 samples, 0.01%)</title><rect x="33.8774%" y="245" width="0.0114%" height="15" fill="rgb(252,202,21)" fg:x="38588" fg:w="13"/><text x="34.1274%" y="255.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (13 samples, 0.01%)</title><rect x="33.8774%" y="229" width="0.0114%" height="15" fill="rgb(233,98,36)" fg:x="38588" fg:w="13"/><text x="34.1274%" y="239.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (13 samples, 0.01%)</title><rect x="33.8774%" y="213" width="0.0114%" height="15" fill="rgb(216,153,54)" fg:x="38588" fg:w="13"/><text x="34.1274%" y="223.50"></text></g><g><title>std::time::SystemTime::duration_since (69 samples, 0.06%)</title><rect x="33.8343%" y="325" width="0.0606%" height="15" fill="rgb(250,99,7)" fg:x="38539" fg:w="69"/><text x="34.0843%" y="335.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (34 samples, 0.03%)</title><rect x="33.8651%" y="309" width="0.0298%" height="15" fill="rgb(207,56,50)" fg:x="38574" fg:w="34"/><text x="34.1151%" y="319.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (34 samples, 0.03%)</title><rect x="33.8651%" y="293" width="0.0298%" height="15" fill="rgb(244,61,34)" fg:x="38574" fg:w="34"/><text x="34.1151%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (306 samples, 0.27%)</title><rect x="33.7869%" y="405" width="0.2686%" height="15" fill="rgb(241,50,38)" fg:x="38485" fg:w="306"/><text x="34.0369%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (306 samples, 0.27%)</title><rect x="33.7869%" y="389" width="0.2686%" height="15" fill="rgb(212,166,30)" fg:x="38485" fg:w="306"/><text x="34.0369%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any::check::{{closure}} (283 samples, 0.25%)</title><rect x="33.8071%" y="373" width="0.2485%" height="15" fill="rgb(249,127,32)" fg:x="38508" fg:w="283"/><text x="34.0571%" y="383.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}}::{{closure}} (283 samples, 0.25%)</title><rect x="33.8071%" y="357" width="0.2485%" height="15" fill="rgb(209,103,0)" fg:x="38508" fg:w="283"/><text x="34.0571%" y="367.50"></text></g><g><title>tremor_common::time::nanotime (280 samples, 0.25%)</title><rect x="33.8098%" y="341" width="0.2458%" height="15" fill="rgb(238,209,51)" fg:x="38511" fg:w="280"/><text x="34.0598%" y="351.50"></text></g><g><title>std::time::SystemTime::now (183 samples, 0.16%)</title><rect x="33.8949%" y="325" width="0.1607%" height="15" fill="rgb(237,56,23)" fg:x="38608" fg:w="183"/><text x="34.1449%" y="335.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (183 samples, 0.16%)</title><rect x="33.8949%" y="309" width="0.1607%" height="15" fill="rgb(215,153,46)" fg:x="38608" fg:w="183"/><text x="34.1449%" y="319.50"></text></g><g><title>std::sys::unix::time::inner::now (183 samples, 0.16%)</title><rect x="33.8949%" y="293" width="0.1607%" height="15" fill="rgb(224,49,31)" fg:x="38608" fg:w="183"/><text x="34.1449%" y="303.50"></text></g><g><title>__clock_gettime (153 samples, 0.13%)</title><rect x="33.9213%" y="277" width="0.1343%" height="15" fill="rgb(250,18,42)" fg:x="38638" fg:w="153"/><text x="34.1713%" y="287.50"></text></g><g><title>__vdso_clock_gettime (126 samples, 0.11%)</title><rect x="33.9450%" y="261" width="0.1106%" height="15" fill="rgb(215,176,39)" fg:x="38665" fg:w="126"/><text x="34.1950%" y="271.50"></text></g><g><title>[[vdso]] (115 samples, 0.10%)</title><rect x="33.9546%" y="245" width="0.1010%" height="15" fill="rgb(223,77,29)" fg:x="38676" fg:w="115"/><text x="34.2046%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (42 samples, 0.04%)</title><rect x="34.0670%" y="373" width="0.0369%" height="15" fill="rgb(234,94,52)" fg:x="38804" fg:w="42"/><text x="34.3170%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (13 samples, 0.01%)</title><rect x="34.0924%" y="357" width="0.0114%" height="15" fill="rgb(220,154,50)" fg:x="38833" fg:w="13"/><text x="34.3424%" y="367.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (304 samples, 0.27%)</title><rect x="34.2452%" y="181" width="0.2669%" height="15" fill="rgb(212,11,10)" fg:x="39007" fg:w="304"/><text x="34.4952%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (469 samples, 0.41%)</title><rect x="34.1039%" y="325" width="0.4117%" height="15" fill="rgb(205,166,19)" fg:x="38846" fg:w="469"/><text x="34.3539%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (466 samples, 0.41%)</title><rect x="34.1065%" y="309" width="0.4091%" height="15" fill="rgb(244,198,16)" fg:x="38849" fg:w="466"/><text x="34.3565%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (466 samples, 0.41%)</title><rect x="34.1065%" y="293" width="0.4091%" height="15" fill="rgb(219,69,12)" fg:x="38849" fg:w="466"/><text x="34.3565%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (463 samples, 0.41%)</title><rect x="34.1091%" y="277" width="0.4065%" height="15" fill="rgb(245,30,7)" fg:x="38852" fg:w="463"/><text x="34.3591%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (463 samples, 0.41%)</title><rect x="34.1091%" y="261" width="0.4065%" height="15" fill="rgb(218,221,48)" fg:x="38852" fg:w="463"/><text x="34.3591%" y="271.50"></text></g><g><title>alloc::alloc::alloc (463 samples, 0.41%)</title><rect x="34.1091%" y="245" width="0.4065%" height="15" fill="rgb(216,66,15)" fg:x="38852" fg:w="463"/><text x="34.3591%" y="255.50"></text></g><g><title>__rg_alloc (463 samples, 0.41%)</title><rect x="34.1091%" y="229" width="0.4065%" height="15" fill="rgb(226,122,50)" fg:x="38852" fg:w="463"/><text x="34.3591%" y="239.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (463 samples, 0.41%)</title><rect x="34.1091%" y="213" width="0.4065%" height="15" fill="rgb(239,156,16)" fg:x="38852" fg:w="463"/><text x="34.3591%" y="223.50"></text></g><g><title>sn_rust_alloc (461 samples, 0.40%)</title><rect x="34.1109%" y="197" width="0.4047%" height="15" fill="rgb(224,27,38)" fg:x="38854" fg:w="461"/><text x="34.3609%" y="207.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (2,537 samples, 2.23%)</title><rect x="32.3875%" y="741" width="2.2273%" height="15" fill="rgb(224,39,27)" fg:x="36891" fg:w="2537"/><text x="32.6375%" y="751.50">t..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1,757 samples, 1.54%)</title><rect x="33.0723%" y="725" width="1.5425%" height="15" fill="rgb(215,92,29)" fg:x="37671" fg:w="1757"/><text x="33.3223%" y="735.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (1,757 samples, 1.54%)</title><rect x="33.0723%" y="709" width="1.5425%" height="15" fill="rgb(207,159,16)" fg:x="37671" fg:w="1757"/><text x="33.3223%" y="719.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,757 samples, 1.54%)</title><rect x="33.0723%" y="693" width="1.5425%" height="15" fill="rgb(238,163,47)" fg:x="37671" fg:w="1757"/><text x="33.3223%" y="703.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,757 samples, 1.54%)</title><rect x="33.0723%" y="677" width="1.5425%" height="15" fill="rgb(219,91,49)" fg:x="37671" fg:w="1757"/><text x="33.3223%" y="687.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (1,757 samples, 1.54%)</title><rect x="33.0723%" y="661" width="1.5425%" height="15" fill="rgb(227,167,31)" fg:x="37671" fg:w="1757"/><text x="33.3223%" y="671.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,757 samples, 1.54%)</title><rect x="33.0723%" y="645" width="1.5425%" height="15" fill="rgb(234,80,54)" fg:x="37671" fg:w="1757"/><text x="33.3223%" y="655.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,757 samples, 1.54%)</title><rect x="33.0723%" y="629" width="1.5425%" height="15" fill="rgb(212,114,2)" fg:x="37671" fg:w="1757"/><text x="33.3223%" y="639.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (1,757 samples, 1.54%)</title><rect x="33.0723%" y="613" width="1.5425%" height="15" fill="rgb(234,50,24)" fg:x="37671" fg:w="1757"/><text x="33.3223%" y="623.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,757 samples, 1.54%)</title><rect x="33.0723%" y="597" width="1.5425%" height="15" fill="rgb(221,68,8)" fg:x="37671" fg:w="1757"/><text x="33.3223%" y="607.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (1,757 samples, 1.54%)</title><rect x="33.0723%" y="581" width="1.5425%" height="15" fill="rgb(254,180,31)" fg:x="37671" fg:w="1757"/><text x="33.3223%" y="591.50"></text></g><g><title>std::panic::catch_unwind (1,757 samples, 1.54%)</title><rect x="33.0723%" y="565" width="1.5425%" height="15" fill="rgb(247,130,50)" fg:x="37671" fg:w="1757"/><text x="33.3223%" y="575.50"></text></g><g><title>std::panicking::try (1,757 samples, 1.54%)</title><rect x="33.0723%" y="549" width="1.5425%" height="15" fill="rgb(211,109,4)" fg:x="37671" fg:w="1757"/><text x="33.3223%" y="559.50"></text></g><g><title>std::panicking::try::do_call (1,757 samples, 1.54%)</title><rect x="33.0723%" y="533" width="1.5425%" height="15" fill="rgb(238,50,21)" fg:x="37671" fg:w="1757"/><text x="33.3223%" y="543.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,757 samples, 1.54%)</title><rect x="33.0723%" y="517" width="1.5425%" height="15" fill="rgb(225,57,45)" fg:x="37671" fg:w="1757"/><text x="33.3223%" y="527.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1,757 samples, 1.54%)</title><rect x="33.0723%" y="501" width="1.5425%" height="15" fill="rgb(209,196,50)" fg:x="37671" fg:w="1757"/><text x="33.3223%" y="511.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (1,757 samples, 1.54%)</title><rect x="33.0723%" y="485" width="1.5425%" height="15" fill="rgb(242,140,13)" fg:x="37671" fg:w="1757"/><text x="33.3223%" y="495.50"></text></g><g><title>async_ffi::FfiContext::with_context (1,757 samples, 1.54%)</title><rect x="33.0723%" y="469" width="1.5425%" height="15" fill="rgb(217,111,7)" fg:x="37671" fg:w="1757"/><text x="33.3223%" y="479.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (1,757 samples, 1.54%)</title><rect x="33.0723%" y="453" width="1.5425%" height="15" fill="rgb(253,193,51)" fg:x="37671" fg:w="1757"/><text x="33.3223%" y="463.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,757 samples, 1.54%)</title><rect x="33.0723%" y="437" width="1.5425%" height="15" fill="rgb(252,70,29)" fg:x="37671" fg:w="1757"/><text x="33.3223%" y="447.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (1,711 samples, 1.50%)</title><rect x="33.1127%" y="421" width="1.5021%" height="15" fill="rgb(232,127,12)" fg:x="37717" fg:w="1711"/><text x="33.3627%" y="431.50"></text></g><g><title>tremor_runtime::connectors::impls::bench::Acc::next (633 samples, 0.56%)</title><rect x="34.0591%" y="405" width="0.5557%" height="15" fill="rgb(211,180,21)" fg:x="38795" fg:w="633"/><text x="34.3091%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (624 samples, 0.55%)</title><rect x="34.0670%" y="389" width="0.5478%" height="15" fill="rgb(229,72,13)" fg:x="38804" fg:w="624"/><text x="34.3170%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (582 samples, 0.51%)</title><rect x="34.1039%" y="373" width="0.5110%" height="15" fill="rgb(240,211,49)" fg:x="38846" fg:w="582"/><text x="34.3539%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (582 samples, 0.51%)</title><rect x="34.1039%" y="357" width="0.5110%" height="15" fill="rgb(219,149,40)" fg:x="38846" fg:w="582"/><text x="34.3539%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (582 samples, 0.51%)</title><rect x="34.1039%" y="341" width="0.5110%" height="15" fill="rgb(210,127,46)" fg:x="38846" fg:w="582"/><text x="34.3539%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (113 samples, 0.10%)</title><rect x="34.5156%" y="325" width="0.0992%" height="15" fill="rgb(220,106,7)" fg:x="39315" fg:w="113"/><text x="34.7656%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (113 samples, 0.10%)</title><rect x="34.5156%" y="309" width="0.0992%" height="15" fill="rgb(249,31,22)" fg:x="39315" fg:w="113"/><text x="34.7656%" y="319.50"></text></g><g><title>[libc-2.31.so] (113 samples, 0.10%)</title><rect x="34.5156%" y="293" width="0.0992%" height="15" fill="rgb(253,1,49)" fg:x="39315" fg:w="113"/><text x="34.7656%" y="303.50"></text></g><g><title>[libc-2.31.so] (242 samples, 0.21%)</title><rect x="34.9036%" y="709" width="0.2125%" height="15" fill="rgb(227,144,33)" fg:x="39757" fg:w="242"/><text x="35.1536%" y="719.50"></text></g><g><title>[libc-2.31.so] (375 samples, 0.33%)</title><rect x="35.1802%" y="693" width="0.3292%" height="15" fill="rgb(249,163,44)" fg:x="40072" fg:w="375"/><text x="35.4302%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (147 samples, 0.13%)</title><rect x="35.5094%" y="693" width="0.1291%" height="15" fill="rgb(234,15,39)" fg:x="40447" fg:w="147"/><text x="35.7594%" y="703.50"></text></g><g><title>core::ptr::write (142 samples, 0.12%)</title><rect x="35.5138%" y="677" width="0.1247%" height="15" fill="rgb(207,66,16)" fg:x="40452" fg:w="142"/><text x="35.7638%" y="687.50"></text></g><g><title>[libc-2.31.so] (139 samples, 0.12%)</title><rect x="35.5164%" y="661" width="0.1220%" height="15" fill="rgb(233,112,24)" fg:x="40455" fg:w="139"/><text x="35.7664%" y="671.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (345 samples, 0.30%)</title><rect x="35.6472%" y="693" width="0.3029%" height="15" fill="rgb(230,90,22)" fg:x="40604" fg:w="345"/><text x="35.8972%" y="703.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (342 samples, 0.30%)</title><rect x="35.6499%" y="677" width="0.3003%" height="15" fill="rgb(229,61,13)" fg:x="40607" fg:w="342"/><text x="35.8999%" y="687.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (333 samples, 0.29%)</title><rect x="35.6578%" y="661" width="0.2923%" height="15" fill="rgb(225,57,24)" fg:x="40616" fg:w="333"/><text x="35.9078%" y="671.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (333 samples, 0.29%)</title><rect x="35.6578%" y="645" width="0.2923%" height="15" fill="rgb(208,169,48)" fg:x="40616" fg:w="333"/><text x="35.9078%" y="655.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (333 samples, 0.29%)</title><rect x="35.6578%" y="629" width="0.2923%" height="15" fill="rgb(244,218,51)" fg:x="40616" fg:w="333"/><text x="35.9078%" y="639.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (333 samples, 0.29%)</title><rect x="35.6578%" y="613" width="0.2923%" height="15" fill="rgb(214,148,10)" fg:x="40616" fg:w="333"/><text x="35.9078%" y="623.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (333 samples, 0.29%)</title><rect x="35.6578%" y="597" width="0.2923%" height="15" fill="rgb(225,174,27)" fg:x="40616" fg:w="333"/><text x="35.9078%" y="607.50"></text></g><g><title>[libc-2.31.so] (307 samples, 0.27%)</title><rect x="35.6806%" y="581" width="0.2695%" height="15" fill="rgb(230,96,26)" fg:x="40642" fg:w="307"/><text x="35.9306%" y="591.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.02%)</title><rect x="36.3355%" y="661" width="0.0202%" height="15" fill="rgb(232,10,30)" fg:x="41388" fg:w="23"/><text x="36.5855%" y="671.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (14 samples, 0.01%)</title><rect x="36.3434%" y="645" width="0.0123%" height="15" fill="rgb(222,8,50)" fg:x="41397" fg:w="14"/><text x="36.5934%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (14 samples, 0.01%)</title><rect x="36.3434%" y="629" width="0.0123%" height="15" fill="rgb(213,81,27)" fg:x="41397" fg:w="14"/><text x="36.5934%" y="639.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (236 samples, 0.21%)</title><rect x="36.3557%" y="661" width="0.2072%" height="15" fill="rgb(245,50,10)" fg:x="41411" fg:w="236"/><text x="36.6057%" y="671.50"></text></g><g><title>[libc-2.31.so] (205 samples, 0.18%)</title><rect x="36.3830%" y="645" width="0.1800%" height="15" fill="rgb(216,100,18)" fg:x="41442" fg:w="205"/><text x="36.6330%" y="655.50"></text></g><g><title>[libc-2.31.so] (592 samples, 0.52%)</title><rect x="36.5629%" y="661" width="0.5197%" height="15" fill="rgb(236,147,54)" fg:x="41647" fg:w="592"/><text x="36.8129%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (284 samples, 0.25%)</title><rect x="37.0897%" y="661" width="0.2493%" height="15" fill="rgb(205,143,26)" fg:x="42247" fg:w="284"/><text x="37.3397%" y="671.50"></text></g><g><title>core::ptr::read (263 samples, 0.23%)</title><rect x="37.1081%" y="645" width="0.2309%" height="15" fill="rgb(236,26,9)" fg:x="42268" fg:w="263"/><text x="37.3581%" y="655.50"></text></g><g><title>[libc-2.31.so] (221 samples, 0.19%)</title><rect x="37.1450%" y="629" width="0.1940%" height="15" fill="rgb(221,165,53)" fg:x="42310" fg:w="221"/><text x="37.3950%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (177 samples, 0.16%)</title><rect x="37.3390%" y="661" width="0.1554%" height="15" fill="rgb(214,110,17)" fg:x="42531" fg:w="177"/><text x="37.5890%" y="671.50"></text></g><g><title>core::ptr::write (161 samples, 0.14%)</title><rect x="37.3531%" y="645" width="0.1413%" height="15" fill="rgb(237,197,12)" fg:x="42547" fg:w="161"/><text x="37.6031%" y="655.50"></text></g><g><title>[libc-2.31.so] (160 samples, 0.14%)</title><rect x="37.3539%" y="629" width="0.1405%" height="15" fill="rgb(205,84,17)" fg:x="42548" fg:w="160"/><text x="37.6039%" y="639.50"></text></g><g><title>alloc::vec::into_iter::IntoIter&lt;T,A&gt;::as_raw_mut_slice (25 samples, 0.02%)</title><rect x="37.5041%" y="629" width="0.0219%" height="15" fill="rgb(237,18,45)" fg:x="42719" fg:w="25"/><text x="37.7541%" y="639.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (15 samples, 0.01%)</title><rect x="37.5128%" y="613" width="0.0132%" height="15" fill="rgb(221,87,14)" fg:x="42729" fg:w="15"/><text x="37.7628%" y="623.50"></text></g><g><title>core::iter::traits::exact_size::ExactSizeIterator::len (15 samples, 0.01%)</title><rect x="37.5128%" y="597" width="0.0132%" height="15" fill="rgb(238,186,15)" fg:x="42729" fg:w="15"/><text x="37.7628%" y="607.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (15 samples, 0.01%)</title><rect x="37.5128%" y="581" width="0.0132%" height="15" fill="rgb(208,115,11)" fg:x="42729" fg:w="15"/><text x="37.7628%" y="591.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (15 samples, 0.01%)</title><rect x="37.5128%" y="565" width="0.0132%" height="15" fill="rgb(254,175,0)" fg:x="42729" fg:w="15"/><text x="37.7628%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;tremor_pipeline::event::Event&gt;&gt; (50 samples, 0.04%)</title><rect x="37.4944%" y="661" width="0.0439%" height="15" fill="rgb(227,24,42)" fg:x="42708" fg:w="50"/><text x="37.7444%" y="671.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 0.04%)</title><rect x="37.5032%" y="645" width="0.0351%" height="15" fill="rgb(223,211,37)" fg:x="42718" fg:w="40"/><text x="37.7532%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (15 samples, 0.01%)</title><rect x="37.5383%" y="661" width="0.0132%" height="15" fill="rgb(235,49,27)" fg:x="42758" fg:w="15"/><text x="37.7883%" y="671.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="37.5383%" y="645" width="0.0132%" height="15" fill="rgb(254,97,51)" fg:x="42758" fg:w="15"/><text x="37.7883%" y="655.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (19 samples, 0.02%)</title><rect x="37.5515%" y="661" width="0.0167%" height="15" fill="rgb(249,51,40)" fg:x="42773" fg:w="19"/><text x="37.8015%" y="671.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (19 samples, 0.02%)</title><rect x="37.5515%" y="645" width="0.0167%" height="15" fill="rgb(210,128,45)" fg:x="42773" fg:w="19"/><text x="37.8015%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (19 samples, 0.02%)</title><rect x="37.5515%" y="629" width="0.0167%" height="15" fill="rgb(224,137,50)" fg:x="42773" fg:w="19"/><text x="37.8015%" y="639.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (19 samples, 0.02%)</title><rect x="37.5515%" y="613" width="0.0167%" height="15" fill="rgb(242,15,9)" fg:x="42773" fg:w="19"/><text x="37.8015%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (12 samples, 0.01%)</title><rect x="37.7745%" y="645" width="0.0105%" height="15" fill="rgb(233,187,41)" fg:x="43027" fg:w="12"/><text x="38.0245%" y="655.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (193 samples, 0.17%)</title><rect x="37.7850%" y="645" width="0.1694%" height="15" fill="rgb(227,2,29)" fg:x="43039" fg:w="193"/><text x="38.0350%" y="655.50"></text></g><g><title>core::ptr::read (154 samples, 0.14%)</title><rect x="37.8192%" y="629" width="0.1352%" height="15" fill="rgb(222,70,3)" fg:x="43078" fg:w="154"/><text x="38.0692%" y="639.50"></text></g><g><title>[libc-2.31.so] (105 samples, 0.09%)</title><rect x="37.8623%" y="613" width="0.0922%" height="15" fill="rgb(213,11,42)" fg:x="43127" fg:w="105"/><text x="38.1123%" y="623.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::clone::Clone&gt;::clone (24 samples, 0.02%)</title><rect x="37.9544%" y="645" width="0.0211%" height="15" fill="rgb(225,150,9)" fg:x="43232" fg:w="24"/><text x="38.2044%" y="655.50"></text></g><g><title>[libc-2.31.so] (303 samples, 0.27%)</title><rect x="37.9755%" y="645" width="0.2660%" height="15" fill="rgb(230,162,45)" fg:x="43256" fg:w="303"/><text x="38.2255%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (318 samples, 0.28%)</title><rect x="38.2415%" y="645" width="0.2792%" height="15" fill="rgb(222,14,52)" fg:x="43559" fg:w="318"/><text x="38.4915%" y="655.50"></text></g><g><title>core::ptr::write (311 samples, 0.27%)</title><rect x="38.2477%" y="629" width="0.2730%" height="15" fill="rgb(254,198,14)" fg:x="43566" fg:w="311"/><text x="38.4977%" y="639.50"></text></g><g><title>[libc-2.31.so] (310 samples, 0.27%)</title><rect x="38.2485%" y="613" width="0.2722%" height="15" fill="rgb(220,217,30)" fg:x="43567" fg:w="310"/><text x="38.4985%" y="623.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (14 samples, 0.01%)</title><rect x="38.5207%" y="645" width="0.0123%" height="15" fill="rgb(215,146,41)" fg:x="43877" fg:w="14"/><text x="38.7707%" y="655.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue_events::{{closure}} (14 samples, 0.01%)</title><rect x="38.5207%" y="629" width="0.0123%" height="15" fill="rgb(217,27,36)" fg:x="43877" fg:w="14"/><text x="38.7707%" y="639.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_last (12 samples, 0.01%)</title><rect x="38.5225%" y="613" width="0.0105%" height="15" fill="rgb(219,218,39)" fg:x="43879" fg:w="12"/><text x="38.7725%" y="623.50"></text></g><g><title>alloc::vec::into_iter::IntoIter&lt;T,A&gt;::as_raw_mut_slice (13 samples, 0.01%)</title><rect x="38.5541%" y="613" width="0.0114%" height="15" fill="rgb(219,4,42)" fg:x="43915" fg:w="13"/><text x="38.8041%" y="623.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (13 samples, 0.01%)</title><rect x="38.5541%" y="597" width="0.0114%" height="15" fill="rgb(249,119,36)" fg:x="43915" fg:w="13"/><text x="38.8041%" y="607.50"></text></g><g><title>core::iter::traits::exact_size::ExactSizeIterator::len (13 samples, 0.01%)</title><rect x="38.5541%" y="581" width="0.0114%" height="15" fill="rgb(209,23,33)" fg:x="43915" fg:w="13"/><text x="38.8041%" y="591.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (13 samples, 0.01%)</title><rect x="38.5541%" y="565" width="0.0114%" height="15" fill="rgb(211,10,0)" fg:x="43915" fg:w="13"/><text x="38.8041%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (13 samples, 0.01%)</title><rect x="38.5541%" y="549" width="0.0114%" height="15" fill="rgb(208,99,37)" fg:x="43915" fg:w="13"/><text x="38.8041%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (18 samples, 0.02%)</title><rect x="38.5672%" y="549" width="0.0158%" height="15" fill="rgb(213,132,31)" fg:x="43930" fg:w="18"/><text x="38.8172%" y="559.50"></text></g><g><title>alloc::alloc::dealloc (18 samples, 0.02%)</title><rect x="38.5672%" y="533" width="0.0158%" height="15" fill="rgb(243,129,40)" fg:x="43930" fg:w="18"/><text x="38.8172%" y="543.50"></text></g><g><title>__rg_dealloc (18 samples, 0.02%)</title><rect x="38.5672%" y="517" width="0.0158%" height="15" fill="rgb(210,66,33)" fg:x="43930" fg:w="18"/><text x="38.8172%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (18 samples, 0.02%)</title><rect x="38.5672%" y="501" width="0.0158%" height="15" fill="rgb(209,189,4)" fg:x="43930" fg:w="18"/><text x="38.8172%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event),alloc::alloc::Global&gt;&gt; (27 samples, 0.02%)</title><rect x="38.5655%" y="613" width="0.0237%" height="15" fill="rgb(214,107,37)" fg:x="43928" fg:w="27"/><text x="38.8155%" y="623.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.02%)</title><rect x="38.5655%" y="597" width="0.0237%" height="15" fill="rgb(245,88,54)" fg:x="43928" fg:w="27"/><text x="38.8155%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (25 samples, 0.02%)</title><rect x="38.5672%" y="581" width="0.0219%" height="15" fill="rgb(205,146,20)" fg:x="43930" fg:w="25"/><text x="38.8172%" y="591.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.02%)</title><rect x="38.5672%" y="565" width="0.0219%" height="15" fill="rgb(220,161,25)" fg:x="43930" fg:w="25"/><text x="38.8172%" y="575.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (68 samples, 0.06%)</title><rect x="38.5418%" y="629" width="0.0597%" height="15" fill="rgb(215,152,15)" fg:x="43901" fg:w="68"/><text x="38.7918%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)]&gt; (14 samples, 0.01%)</title><rect x="38.5892%" y="613" width="0.0123%" height="15" fill="rgb(233,192,44)" fg:x="43955" fg:w="14"/><text x="38.8392%" y="623.50"></text></g><g><title>sn_rust_dealloc (101 samples, 0.09%)</title><rect x="38.6015%" y="629" width="0.0887%" height="15" fill="rgb(240,170,46)" fg:x="43969" fg:w="101"/><text x="38.8515%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (180 samples, 0.16%)</title><rect x="38.5400%" y="645" width="0.1580%" height="15" fill="rgb(207,104,33)" fg:x="43899" fg:w="180"/><text x="38.7900%" y="655.50"></text></g><g><title>core::slice::iter::&lt;impl core::iter::traits::collect::IntoIterator for &amp;[T]&gt;::into_iter (13 samples, 0.01%)</title><rect x="38.7042%" y="645" width="0.0114%" height="15" fill="rgb(219,21,39)" fg:x="44086" fg:w="13"/><text x="38.9542%" y="655.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (13 samples, 0.01%)</title><rect x="38.7042%" y="629" width="0.0114%" height="15" fill="rgb(214,133,29)" fg:x="44086" fg:w="13"/><text x="38.9542%" y="639.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (13 samples, 0.01%)</title><rect x="38.7042%" y="613" width="0.0114%" height="15" fill="rgb(226,93,6)" fg:x="44086" fg:w="13"/><text x="38.9542%" y="623.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (65 samples, 0.06%)</title><rect x="38.7305%" y="613" width="0.0571%" height="15" fill="rgb(252,222,34)" fg:x="44116" fg:w="65"/><text x="38.9805%" y="623.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (44 samples, 0.04%)</title><rect x="38.7490%" y="597" width="0.0386%" height="15" fill="rgb(252,92,48)" fg:x="44137" fg:w="44"/><text x="38.9990%" y="607.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (44 samples, 0.04%)</title><rect x="38.7490%" y="581" width="0.0386%" height="15" fill="rgb(245,223,24)" fg:x="44137" fg:w="44"/><text x="38.9990%" y="591.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (129 samples, 0.11%)</title><rect x="38.8051%" y="581" width="0.1133%" height="15" fill="rgb(205,176,3)" fg:x="44201" fg:w="129"/><text x="39.0551%" y="591.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (123 samples, 0.11%)</title><rect x="38.8104%" y="565" width="0.1080%" height="15" fill="rgb(235,151,15)" fg:x="44207" fg:w="123"/><text x="39.0604%" y="575.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (123 samples, 0.11%)</title><rect x="38.8104%" y="549" width="0.1080%" height="15" fill="rgb(237,209,11)" fg:x="44207" fg:w="123"/><text x="39.0604%" y="559.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (123 samples, 0.11%)</title><rect x="38.8104%" y="533" width="0.1080%" height="15" fill="rgb(243,227,24)" fg:x="44207" fg:w="123"/><text x="39.0604%" y="543.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (123 samples, 0.11%)</title><rect x="38.8104%" y="517" width="0.1080%" height="15" fill="rgb(239,193,16)" fg:x="44207" fg:w="123"/><text x="39.0604%" y="527.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (123 samples, 0.11%)</title><rect x="38.8104%" y="501" width="0.1080%" height="15" fill="rgb(231,27,9)" fg:x="44207" fg:w="123"/><text x="39.0604%" y="511.50"></text></g><g><title>[libc-2.31.so] (101 samples, 0.09%)</title><rect x="38.8297%" y="485" width="0.0887%" height="15" fill="rgb(219,169,10)" fg:x="44229" fg:w="101"/><text x="39.0797%" y="495.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (246 samples, 0.22%)</title><rect x="38.7156%" y="645" width="0.2160%" height="15" fill="rgb(244,229,43)" fg:x="44099" fg:w="246"/><text x="38.9656%" y="655.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (237 samples, 0.21%)</title><rect x="38.7235%" y="629" width="0.2081%" height="15" fill="rgb(254,38,20)" fg:x="44108" fg:w="237"/><text x="38.9735%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (164 samples, 0.14%)</title><rect x="38.7876%" y="613" width="0.1440%" height="15" fill="rgb(250,47,30)" fg:x="44181" fg:w="164"/><text x="39.0376%" y="623.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (A,B)&gt;::eq (164 samples, 0.14%)</title><rect x="38.7876%" y="597" width="0.1440%" height="15" fill="rgb(224,124,36)" fg:x="44181" fg:w="164"/><text x="39.0376%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (15 samples, 0.01%)</title><rect x="38.9184%" y="581" width="0.0132%" height="15" fill="rgb(246,68,51)" fg:x="44330" fg:w="15"/><text x="39.1684%" y="591.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (65 samples, 0.06%)</title><rect x="38.9500%" y="613" width="0.0571%" height="15" fill="rgb(253,43,49)" fg:x="44366" fg:w="65"/><text x="39.2000%" y="623.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (17 samples, 0.01%)</title><rect x="39.0202%" y="597" width="0.0149%" height="15" fill="rgb(219,54,36)" fg:x="44446" fg:w="17"/><text x="39.2702%" y="607.50"></text></g><g><title>&lt;halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt; as core::convert::From&lt;halfbrown::vecmap::raw_entry::RawEntryMut&lt;K,V,S&gt;&gt;&gt;::from (17 samples, 0.01%)</title><rect x="39.0202%" y="581" width="0.0149%" height="15" fill="rgb(227,133,34)" fg:x="44446" fg:w="17"/><text x="39.2702%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.01%)</title><rect x="39.0510%" y="533" width="0.0105%" height="15" fill="rgb(247,227,15)" fg:x="44481" fg:w="12"/><text x="39.3010%" y="543.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.01%)</title><rect x="39.0510%" y="517" width="0.0105%" height="15" fill="rgb(229,96,14)" fg:x="44481" fg:w="12"/><text x="39.3010%" y="527.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (176 samples, 0.15%)</title><rect x="39.0071%" y="613" width="0.1545%" height="15" fill="rgb(220,79,17)" fg:x="44431" fg:w="176"/><text x="39.2571%" y="623.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (144 samples, 0.13%)</title><rect x="39.0352%" y="597" width="0.1264%" height="15" fill="rgb(205,131,53)" fg:x="44463" fg:w="144"/><text x="39.2852%" y="607.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (144 samples, 0.13%)</title><rect x="39.0352%" y="581" width="0.1264%" height="15" fill="rgb(209,50,29)" fg:x="44463" fg:w="144"/><text x="39.2852%" y="591.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_hash (144 samples, 0.13%)</title><rect x="39.0352%" y="565" width="0.1264%" height="15" fill="rgb(245,86,46)" fg:x="44463" fg:w="144"/><text x="39.2852%" y="575.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::search (144 samples, 0.13%)</title><rect x="39.0352%" y="549" width="0.1264%" height="15" fill="rgb(235,66,46)" fg:x="44463" fg:w="144"/><text x="39.2852%" y="559.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (114 samples, 0.10%)</title><rect x="39.0615%" y="533" width="0.1001%" height="15" fill="rgb(232,148,31)" fg:x="44493" fg:w="114"/><text x="39.3115%" y="543.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (114 samples, 0.10%)</title><rect x="39.0615%" y="517" width="0.1001%" height="15" fill="rgb(217,149,8)" fg:x="44493" fg:w="114"/><text x="39.3115%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (106 samples, 0.09%)</title><rect x="39.0685%" y="501" width="0.0931%" height="15" fill="rgb(209,183,11)" fg:x="44501" fg:w="106"/><text x="39.3185%" y="511.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (106 samples, 0.09%)</title><rect x="39.0685%" y="485" width="0.0931%" height="15" fill="rgb(208,55,20)" fg:x="44501" fg:w="106"/><text x="39.3185%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (106 samples, 0.09%)</title><rect x="39.0685%" y="469" width="0.0931%" height="15" fill="rgb(218,39,14)" fg:x="44501" fg:w="106"/><text x="39.3185%" y="479.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (106 samples, 0.09%)</title><rect x="39.0685%" y="453" width="0.0931%" height="15" fill="rgb(216,169,33)" fg:x="44501" fg:w="106"/><text x="39.3185%" y="463.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (106 samples, 0.09%)</title><rect x="39.0685%" y="437" width="0.0931%" height="15" fill="rgb(233,80,24)" fg:x="44501" fg:w="106"/><text x="39.3185%" y="447.50"></text></g><g><title>[libc-2.31.so] (57 samples, 0.05%)</title><rect x="39.1115%" y="421" width="0.0500%" height="15" fill="rgb(213,179,31)" fg:x="44550" fg:w="57"/><text x="39.3615%" y="431.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue_events (1,866 samples, 1.64%)</title><rect x="37.5681%" y="661" width="1.6382%" height="15" fill="rgb(209,19,5)" fg:x="42792" fg:w="1866"/><text x="37.8181%" y="671.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_input (313 samples, 0.27%)</title><rect x="38.9316%" y="645" width="0.2748%" height="15" fill="rgb(219,18,35)" fg:x="44345" fg:w="313"/><text x="39.1816%" y="655.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_input_n (307 samples, 0.27%)</title><rect x="38.9368%" y="629" width="0.2695%" height="15" fill="rgb(209,169,16)" fg:x="44351" fg:w="307"/><text x="39.1868%" y="639.50"></text></g><g><title>halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt;::or_insert_with (51 samples, 0.04%)</title><rect x="39.1616%" y="613" width="0.0448%" height="15" fill="rgb(245,90,51)" fg:x="44607" fg:w="51"/><text x="39.4116%" y="623.50"></text></g><g><title>halfbrown::raw_entry::RawOccupiedEntryMut&lt;K,V,S&gt;::into_key_value (36 samples, 0.03%)</title><rect x="39.1748%" y="597" width="0.0316%" height="15" fill="rgb(220,99,45)" fg:x="44622" fg:w="36"/><text x="39.4248%" y="607.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (24 samples, 0.02%)</title><rect x="39.2213%" y="629" width="0.0211%" height="15" fill="rgb(249,89,25)" fg:x="44675" fg:w="24"/><text x="39.4713%" y="639.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (23 samples, 0.02%)</title><rect x="39.2520%" y="613" width="0.0202%" height="15" fill="rgb(239,193,0)" fg:x="44710" fg:w="23"/><text x="39.5020%" y="623.50"></text></g><g><title>&lt;halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt; as core::convert::From&lt;halfbrown::vecmap::raw_entry::RawEntryMut&lt;K,V,S&gt;&gt;&gt;::from (23 samples, 0.02%)</title><rect x="39.2520%" y="597" width="0.0202%" height="15" fill="rgb(231,126,1)" fg:x="44710" fg:w="23"/><text x="39.5020%" y="607.50"></text></g><g><title>halfbrown::raw_entry::RawEntryMut::Occupied (13 samples, 0.01%)</title><rect x="39.2608%" y="581" width="0.0114%" height="15" fill="rgb(243,166,3)" fg:x="44720" fg:w="13"/><text x="39.5108%" y="591.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (150 samples, 0.13%)</title><rect x="39.2424%" y="629" width="0.1317%" height="15" fill="rgb(223,22,34)" fg:x="44699" fg:w="150"/><text x="39.4924%" y="639.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (116 samples, 0.10%)</title><rect x="39.2722%" y="613" width="0.1018%" height="15" fill="rgb(251,52,51)" fg:x="44733" fg:w="116"/><text x="39.5222%" y="623.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (116 samples, 0.10%)</title><rect x="39.2722%" y="597" width="0.1018%" height="15" fill="rgb(221,165,28)" fg:x="44733" fg:w="116"/><text x="39.5222%" y="607.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_hash (116 samples, 0.10%)</title><rect x="39.2722%" y="581" width="0.1018%" height="15" fill="rgb(218,121,47)" fg:x="44733" fg:w="116"/><text x="39.5222%" y="591.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::search (116 samples, 0.10%)</title><rect x="39.2722%" y="565" width="0.1018%" height="15" fill="rgb(209,120,9)" fg:x="44733" fg:w="116"/><text x="39.5222%" y="575.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (101 samples, 0.09%)</title><rect x="39.2854%" y="549" width="0.0887%" height="15" fill="rgb(236,68,12)" fg:x="44748" fg:w="101"/><text x="39.5354%" y="559.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (101 samples, 0.09%)</title><rect x="39.2854%" y="533" width="0.0887%" height="15" fill="rgb(225,194,26)" fg:x="44748" fg:w="101"/><text x="39.5354%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (96 samples, 0.08%)</title><rect x="39.2898%" y="517" width="0.0843%" height="15" fill="rgb(231,84,39)" fg:x="44753" fg:w="96"/><text x="39.5398%" y="527.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (96 samples, 0.08%)</title><rect x="39.2898%" y="501" width="0.0843%" height="15" fill="rgb(210,11,45)" fg:x="44753" fg:w="96"/><text x="39.5398%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (96 samples, 0.08%)</title><rect x="39.2898%" y="485" width="0.0843%" height="15" fill="rgb(224,54,52)" fg:x="44753" fg:w="96"/><text x="39.5398%" y="495.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (96 samples, 0.08%)</title><rect x="39.2898%" y="469" width="0.0843%" height="15" fill="rgb(238,102,14)" fg:x="44753" fg:w="96"/><text x="39.5398%" y="479.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (96 samples, 0.08%)</title><rect x="39.2898%" y="453" width="0.0843%" height="15" fill="rgb(243,160,52)" fg:x="44753" fg:w="96"/><text x="39.5398%" y="463.50"></text></g><g><title>[libc-2.31.so] (50 samples, 0.04%)</title><rect x="39.3301%" y="437" width="0.0439%" height="15" fill="rgb(216,114,19)" fg:x="44799" fg:w="50"/><text x="39.5801%" y="447.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (4,882 samples, 4.29%)</title><rect x="35.1161%" y="709" width="4.2860%" height="15" fill="rgb(244,166,37)" fg:x="39999" fg:w="4882"/><text x="35.3661%" y="719.50">tremo..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (3,932 samples, 3.45%)</title><rect x="35.9501%" y="693" width="3.4520%" height="15" fill="rgb(246,29,44)" fg:x="40949" fg:w="3932"/><text x="36.2001%" y="703.50">tre..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (3,924 samples, 3.44%)</title><rect x="35.9572%" y="677" width="3.4450%" height="15" fill="rgb(215,56,53)" fg:x="40957" fg:w="3924"/><text x="36.2072%" y="687.50">tre..</text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_output (223 samples, 0.20%)</title><rect x="39.2064%" y="661" width="0.1958%" height="15" fill="rgb(217,60,2)" fg:x="44658" fg:w="223"/><text x="39.4564%" y="671.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_output_n (223 samples, 0.20%)</title><rect x="39.2064%" y="645" width="0.1958%" height="15" fill="rgb(207,26,24)" fg:x="44658" fg:w="223"/><text x="39.4564%" y="655.50"></text></g><g><title>halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt;::or_insert_with (32 samples, 0.03%)</title><rect x="39.3740%" y="629" width="0.0281%" height="15" fill="rgb(252,210,15)" fg:x="44849" fg:w="32"/><text x="39.6240%" y="639.50"></text></g><g><title>halfbrown::raw_entry::RawOccupiedEntryMut&lt;K,V,S&gt;::into_key_value (15 samples, 0.01%)</title><rect x="39.3890%" y="613" width="0.0132%" height="15" fill="rgb(253,209,26)" fg:x="44866" fg:w="15"/><text x="39.6390%" y="623.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,158 samples, 4.53%)</title><rect x="34.8896%" y="725" width="4.5283%" height="15" fill="rgb(238,170,14)" fg:x="39741" fg:w="5158"/><text x="35.1396%" y="735.50">&lt;core..</text></g><g><title>tremor_runtime::pipeline::handle_insights::{{closure}} (18 samples, 0.02%)</title><rect x="39.4021%" y="709" width="0.0158%" height="15" fill="rgb(216,178,15)" fg:x="44881" fg:w="18"/><text x="39.6521%" y="719.50"></text></g><g><title>[libc-2.31.so] (670 samples, 0.59%)</title><rect x="39.4179%" y="725" width="0.5882%" height="15" fill="rgb(250,197,2)" fg:x="44899" fg:w="670"/><text x="39.6679%" y="735.50"></text></g><g><title>sn_rust_dealloc (136 samples, 0.12%)</title><rect x="40.0140%" y="565" width="0.1194%" height="15" fill="rgb(212,70,42)" fg:x="45578" fg:w="136"/><text x="40.2640%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (147 samples, 0.13%)</title><rect x="40.0061%" y="725" width="0.1291%" height="15" fill="rgb(227,213,9)" fg:x="45569" fg:w="147"/><text x="40.2561%" y="735.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (147 samples, 0.13%)</title><rect x="40.0061%" y="709" width="0.1291%" height="15" fill="rgb(245,99,25)" fg:x="45569" fg:w="147"/><text x="40.2561%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (138 samples, 0.12%)</title><rect x="40.0140%" y="693" width="0.1212%" height="15" fill="rgb(250,82,29)" fg:x="45578" fg:w="138"/><text x="40.2640%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (138 samples, 0.12%)</title><rect x="40.0140%" y="677" width="0.1212%" height="15" fill="rgb(241,226,54)" fg:x="45578" fg:w="138"/><text x="40.2640%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (138 samples, 0.12%)</title><rect x="40.0140%" y="661" width="0.1212%" height="15" fill="rgb(221,99,41)" fg:x="45578" fg:w="138"/><text x="40.2640%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (138 samples, 0.12%)</title><rect x="40.0140%" y="645" width="0.1212%" height="15" fill="rgb(213,90,21)" fg:x="45578" fg:w="138"/><text x="40.2640%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (138 samples, 0.12%)</title><rect x="40.0140%" y="629" width="0.1212%" height="15" fill="rgb(205,208,24)" fg:x="45578" fg:w="138"/><text x="40.2640%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (138 samples, 0.12%)</title><rect x="40.0140%" y="613" width="0.1212%" height="15" fill="rgb(246,31,12)" fg:x="45578" fg:w="138"/><text x="40.2640%" y="623.50"></text></g><g><title>__rg_dealloc (138 samples, 0.12%)</title><rect x="40.0140%" y="597" width="0.1212%" height="15" fill="rgb(213,154,6)" fg:x="45578" fg:w="138"/><text x="40.2640%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (138 samples, 0.12%)</title><rect x="40.0140%" y="581" width="0.1212%" height="15" fill="rgb(222,163,29)" fg:x="45578" fg:w="138"/><text x="40.2640%" y="591.50"></text></g><g><title>async_io::driver::block_on (18,116 samples, 15.90%)</title><rect x="24.2351%" y="1045" width="15.9045%" height="15" fill="rgb(227,201,8)" fg:x="27605" fg:w="18116"/><text x="24.4851%" y="1055.50">async_io::driver::block_..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (18,116 samples, 15.90%)</title><rect x="24.2351%" y="1029" width="15.9045%" height="15" fill="rgb(233,9,32)" fg:x="27605" fg:w="18116"/><text x="24.4851%" y="1039.50">&lt;futures_lite::future::O..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,116 samples, 15.90%)</title><rect x="24.2351%" y="1013" width="15.9045%" height="15" fill="rgb(217,54,24)" fg:x="27605" fg:w="18116"/><text x="24.4851%" y="1023.50">&lt;core::future::from_gene..</text></g><g><title>async_executor::Executor::run::{{closure}} (18,116 samples, 15.90%)</title><rect x="24.2351%" y="997" width="15.9045%" height="15" fill="rgb(235,192,0)" fg:x="27605" fg:w="18116"/><text x="24.4851%" y="1007.50">async_executor::Executor..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (18,116 samples, 15.90%)</title><rect x="24.2351%" y="981" width="15.9045%" height="15" fill="rgb(235,45,9)" fg:x="27605" fg:w="18116"/><text x="24.4851%" y="991.50">&lt;futures_lite::future::O..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,116 samples, 15.90%)</title><rect x="24.2351%" y="965" width="15.9045%" height="15" fill="rgb(246,42,40)" fg:x="27605" fg:w="18116"/><text x="24.4851%" y="975.50">&lt;core::future::from_gene..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (18,116 samples, 15.90%)</title><rect x="24.2351%" y="949" width="15.9045%" height="15" fill="rgb(248,111,24)" fg:x="27605" fg:w="18116"/><text x="24.4851%" y="959.50">async_executor::Executor..</text></g><g><title>async_task::runnable::Runnable::run (18,116 samples, 15.90%)</title><rect x="24.2351%" y="933" width="15.9045%" height="15" fill="rgb(249,65,22)" fg:x="27605" fg:w="18116"/><text x="24.4851%" y="943.50">async_task::runnable::Ru..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (18,116 samples, 15.90%)</title><rect x="24.2351%" y="917" width="15.9045%" height="15" fill="rgb(238,111,51)" fg:x="27605" fg:w="18116"/><text x="24.4851%" y="927.50">async_task::raw::RawTask..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (18,116 samples, 15.90%)</title><rect x="24.2351%" y="901" width="15.9045%" height="15" fill="rgb(250,118,22)" fg:x="27605" fg:w="18116"/><text x="24.4851%" y="911.50">&lt;core::pin::Pin&lt;P&gt; as co..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,116 samples, 15.90%)</title><rect x="24.2351%" y="885" width="15.9045%" height="15" fill="rgb(234,84,26)" fg:x="27605" fg:w="18116"/><text x="24.4851%" y="895.50">&lt;core::future::from_gene..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (18,116 samples, 15.90%)</title><rect x="24.2351%" y="869" width="15.9045%" height="15" fill="rgb(243,172,12)" fg:x="27605" fg:w="18116"/><text x="24.4851%" y="879.50">async_executor::Executor..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (18,116 samples, 15.90%)</title><rect x="24.2351%" y="853" width="15.9045%" height="15" fill="rgb(236,150,49)" fg:x="27605" fg:w="18116"/><text x="24.4851%" y="863.50">&lt;async_std::task::builde..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (18,116 samples, 15.90%)</title><rect x="24.2351%" y="837" width="15.9045%" height="15" fill="rgb(225,197,26)" fg:x="27605" fg:w="18116"/><text x="24.4851%" y="847.50">async_std::task::task_lo..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (18,116 samples, 15.90%)</title><rect x="24.2351%" y="821" width="15.9045%" height="15" fill="rgb(214,17,42)" fg:x="27605" fg:w="18116"/><text x="24.4851%" y="831.50">std::thread::local::Loca..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (18,116 samples, 15.90%)</title><rect x="24.2351%" y="805" width="15.9045%" height="15" fill="rgb(224,165,40)" fg:x="27605" fg:w="18116"/><text x="24.4851%" y="815.50">std::thread::local::Loca..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (18,116 samples, 15.90%)</title><rect x="24.2351%" y="789" width="15.9045%" height="15" fill="rgb(246,100,4)" fg:x="27605" fg:w="18116"/><text x="24.4851%" y="799.50">async_std::task::task_lo..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (18,116 samples, 15.90%)</title><rect x="24.2351%" y="773" width="15.9045%" height="15" fill="rgb(222,103,0)" fg:x="27605" fg:w="18116"/><text x="24.4851%" y="783.50">&lt;async_std::task::builde..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,116 samples, 15.90%)</title><rect x="24.2351%" y="757" width="15.9045%" height="15" fill="rgb(227,189,26)" fg:x="27605" fg:w="18116"/><text x="24.4851%" y="767.50">&lt;core::future::from_gene..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (6,293 samples, 5.52%)</title><rect x="34.6148%" y="741" width="5.5248%" height="15" fill="rgb(214,202,17)" fg:x="39428" fg:w="6293"/><text x="34.8648%" y="751.50">tremor_..</text></g><g><title>abi_stable::std_types::boxed::destroy_box (20 samples, 0.02%)</title><rect x="40.3362%" y="581" width="0.0176%" height="15" fill="rgb(229,111,3)" fg:x="45945" fg:w="20"/><text x="40.5862%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (15 samples, 0.01%)</title><rect x="40.3714%" y="581" width="0.0132%" height="15" fill="rgb(229,172,15)" fg:x="45985" fg:w="15"/><text x="40.6214%" y="591.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (15 samples, 0.01%)</title><rect x="40.3714%" y="565" width="0.0132%" height="15" fill="rgb(230,224,35)" fg:x="45985" fg:w="15"/><text x="40.6214%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15 samples, 0.01%)</title><rect x="40.3714%" y="549" width="0.0132%" height="15" fill="rgb(251,141,6)" fg:x="45985" fg:w="15"/><text x="40.6214%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (15 samples, 0.01%)</title><rect x="40.3714%" y="533" width="0.0132%" height="15" fill="rgb(225,208,6)" fg:x="45985" fg:w="15"/><text x="40.6214%" y="543.50"></text></g><g><title>sn_rust_dealloc (110 samples, 0.10%)</title><rect x="40.4153%" y="421" width="0.0966%" height="15" fill="rgb(246,181,16)" fg:x="46035" fg:w="110"/><text x="40.6653%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (149 samples, 0.13%)</title><rect x="40.4038%" y="485" width="0.1308%" height="15" fill="rgb(227,129,36)" fg:x="46022" fg:w="149"/><text x="40.6538%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::vec::private::RVec&lt;u8&gt;]&gt; (149 samples, 0.13%)</title><rect x="40.4038%" y="469" width="0.1308%" height="15" fill="rgb(248,117,24)" fg:x="46022" fg:w="149"/><text x="40.6538%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (146 samples, 0.13%)</title><rect x="40.4065%" y="453" width="0.1282%" height="15" fill="rgb(214,185,35)" fg:x="46025" fg:w="146"/><text x="40.6565%" y="463.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (146 samples, 0.13%)</title><rect x="40.4065%" y="437" width="0.1282%" height="15" fill="rgb(236,150,34)" fg:x="46025" fg:w="146"/><text x="40.6565%" y="447.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (26 samples, 0.02%)</title><rect x="40.5118%" y="421" width="0.0228%" height="15" fill="rgb(243,228,27)" fg:x="46145" fg:w="26"/><text x="40.7618%" y="431.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (173 samples, 0.15%)</title><rect x="40.3916%" y="549" width="0.1519%" height="15" fill="rgb(245,77,44)" fg:x="46008" fg:w="173"/><text x="40.6416%" y="559.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (166 samples, 0.15%)</title><rect x="40.3977%" y="533" width="0.1457%" height="15" fill="rgb(235,214,42)" fg:x="46015" fg:w="166"/><text x="40.6477%" y="543.50"></text></g><g><title>core::mem::drop (159 samples, 0.14%)</title><rect x="40.4038%" y="517" width="0.1396%" height="15" fill="rgb(221,74,3)" fg:x="46022" fg:w="159"/><text x="40.6538%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (159 samples, 0.14%)</title><rect x="40.4038%" y="501" width="0.1396%" height="15" fill="rgb(206,121,29)" fg:x="46022" fg:w="159"/><text x="40.6538%" y="511.50"></text></g><g><title>sn_rust_dealloc (23 samples, 0.02%)</title><rect x="40.5434%" y="549" width="0.0202%" height="15" fill="rgb(249,131,53)" fg:x="46181" fg:w="23"/><text x="40.7934%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (201 samples, 0.18%)</title><rect x="40.3889%" y="581" width="0.1765%" height="15" fill="rgb(236,170,29)" fg:x="46005" fg:w="201"/><text x="40.6389%" y="591.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (201 samples, 0.18%)</title><rect x="40.3889%" y="565" width="0.1765%" height="15" fill="rgb(247,96,15)" fg:x="46005" fg:w="201"/><text x="40.6389%" y="575.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (13 samples, 0.01%)</title><rect x="40.5689%" y="485" width="0.0114%" height="15" fill="rgb(211,210,7)" fg:x="46210" fg:w="13"/><text x="40.8189%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (13 samples, 0.01%)</title><rect x="40.5689%" y="469" width="0.0114%" height="15" fill="rgb(240,88,50)" fg:x="46210" fg:w="13"/><text x="40.8189%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (79 samples, 0.07%)</title><rect x="40.5689%" y="533" width="0.0694%" height="15" fill="rgb(209,229,26)" fg:x="46210" fg:w="79"/><text x="40.8189%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (79 samples, 0.07%)</title><rect x="40.5689%" y="517" width="0.0694%" height="15" fill="rgb(210,68,23)" fg:x="46210" fg:w="79"/><text x="40.8189%" y="527.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (79 samples, 0.07%)</title><rect x="40.5689%" y="501" width="0.0694%" height="15" fill="rgb(229,180,13)" fg:x="46210" fg:w="79"/><text x="40.8189%" y="511.50"></text></g><g><title>sn_rust_dealloc (66 samples, 0.06%)</title><rect x="40.5803%" y="485" width="0.0579%" height="15" fill="rgb(236,53,44)" fg:x="46223" fg:w="66"/><text x="40.8303%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (24 samples, 0.02%)</title><rect x="40.9684%" y="357" width="0.0211%" height="15" fill="rgb(244,214,29)" fg:x="46665" fg:w="24"/><text x="41.2184%" y="367.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (24 samples, 0.02%)</title><rect x="40.9684%" y="341" width="0.0211%" height="15" fill="rgb(220,75,29)" fg:x="46665" fg:w="24"/><text x="41.2184%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (530 samples, 0.47%)</title><rect x="40.6462%" y="437" width="0.4653%" height="15" fill="rgb(214,183,37)" fg:x="46298" fg:w="530"/><text x="40.8962%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (530 samples, 0.47%)</title><rect x="40.6462%" y="421" width="0.4653%" height="15" fill="rgb(239,117,29)" fg:x="46298" fg:w="530"/><text x="40.8962%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (518 samples, 0.45%)</title><rect x="40.6567%" y="405" width="0.4548%" height="15" fill="rgb(237,171,35)" fg:x="46310" fg:w="518"/><text x="40.9067%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (518 samples, 0.45%)</title><rect x="40.6567%" y="389" width="0.4548%" height="15" fill="rgb(229,178,53)" fg:x="46310" fg:w="518"/><text x="40.9067%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (518 samples, 0.45%)</title><rect x="40.6567%" y="373" width="0.4548%" height="15" fill="rgb(210,102,19)" fg:x="46310" fg:w="518"/><text x="40.9067%" y="383.50"></text></g><g><title>sn_rust_dealloc (139 samples, 0.12%)</title><rect x="40.9894%" y="357" width="0.1220%" height="15" fill="rgb(235,127,22)" fg:x="46689" fg:w="139"/><text x="41.2394%" y="367.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (547 samples, 0.48%)</title><rect x="40.6383%" y="501" width="0.4802%" height="15" fill="rgb(244,31,31)" fg:x="46289" fg:w="547"/><text x="40.8883%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (545 samples, 0.48%)</title><rect x="40.6400%" y="485" width="0.4785%" height="15" fill="rgb(231,43,21)" fg:x="46291" fg:w="545"/><text x="40.8900%" y="495.50"></text></g><g><title>core::mem::drop (538 samples, 0.47%)</title><rect x="40.6462%" y="469" width="0.4723%" height="15" fill="rgb(217,131,35)" fg:x="46298" fg:w="538"/><text x="40.8962%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (538 samples, 0.47%)</title><rect x="40.6462%" y="453" width="0.4723%" height="15" fill="rgb(221,149,4)" fg:x="46298" fg:w="538"/><text x="40.8962%" y="463.50"></text></g><g><title>sn_rust_dealloc (41 samples, 0.04%)</title><rect x="41.1185%" y="501" width="0.0360%" height="15" fill="rgb(232,170,28)" fg:x="46836" fg:w="41"/><text x="41.3685%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (673 samples, 0.59%)</title><rect x="40.5654%" y="565" width="0.5908%" height="15" fill="rgb(238,56,10)" fg:x="46206" fg:w="673"/><text x="40.8154%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (669 samples, 0.59%)</title><rect x="40.5689%" y="549" width="0.5873%" height="15" fill="rgb(235,196,14)" fg:x="46210" fg:w="669"/><text x="40.8189%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (590 samples, 0.52%)</title><rect x="40.6383%" y="533" width="0.5180%" height="15" fill="rgb(216,45,48)" fg:x="46289" fg:w="590"/><text x="40.8883%" y="543.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (590 samples, 0.52%)</title><rect x="40.6383%" y="517" width="0.5180%" height="15" fill="rgb(238,213,17)" fg:x="46289" fg:w="590"/><text x="40.8883%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (12 samples, 0.01%)</title><rect x="41.1562%" y="565" width="0.0105%" height="15" fill="rgb(212,13,2)" fg:x="46879" fg:w="12"/><text x="41.4062%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (12 samples, 0.01%)</title><rect x="41.1562%" y="549" width="0.0105%" height="15" fill="rgb(240,114,20)" fg:x="46879" fg:w="12"/><text x="41.4062%" y="559.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (12 samples, 0.01%)</title><rect x="41.1562%" y="533" width="0.0105%" height="15" fill="rgb(228,41,40)" fg:x="46879" fg:w="12"/><text x="41.4062%" y="543.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::next_n (22 samples, 0.02%)</title><rect x="41.4793%" y="389" width="0.0193%" height="15" fill="rgb(244,132,35)" fg:x="47247" fg:w="22"/><text x="41.7293%" y="399.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (17 samples, 0.01%)</title><rect x="41.4837%" y="373" width="0.0149%" height="15" fill="rgb(253,189,4)" fg:x="47252" fg:w="17"/><text x="41.7337%" y="383.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (13 samples, 0.01%)</title><rect x="41.4986%" y="389" width="0.0114%" height="15" fill="rgb(224,37,19)" fg:x="47269" fg:w="13"/><text x="41.7486%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (70 samples, 0.06%)</title><rect x="41.4705%" y="421" width="0.0615%" height="15" fill="rgb(235,223,18)" fg:x="47237" fg:w="70"/><text x="41.7205%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (70 samples, 0.06%)</title><rect x="41.4705%" y="405" width="0.0615%" height="15" fill="rgb(235,163,25)" fg:x="47237" fg:w="70"/><text x="41.7205%" y="415.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (25 samples, 0.02%)</title><rect x="41.5100%" y="389" width="0.0219%" height="15" fill="rgb(217,145,28)" fg:x="47282" fg:w="25"/><text x="41.7600%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;&gt; (490 samples, 0.43%)</title><rect x="41.5478%" y="373" width="0.4302%" height="15" fill="rgb(223,223,32)" fg:x="47325" fg:w="490"/><text x="41.7978%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt; (25 samples, 0.02%)</title><rect x="41.9560%" y="357" width="0.0219%" height="15" fill="rgb(227,189,39)" fg:x="47790" fg:w="25"/><text x="42.2060%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (569 samples, 0.50%)</title><rect x="41.5478%" y="389" width="0.4995%" height="15" fill="rgb(248,10,22)" fg:x="47325" fg:w="569"/><text x="41.7978%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (79 samples, 0.07%)</title><rect x="41.9780%" y="373" width="0.0694%" height="15" fill="rgb(248,46,39)" fg:x="47815" fg:w="79"/><text x="42.2280%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (634 samples, 0.56%)</title><rect x="41.5320%" y="405" width="0.5566%" height="15" fill="rgb(248,113,48)" fg:x="47307" fg:w="634"/><text x="41.7820%" y="415.50"></text></g><g><title>sn_rust_dealloc (47 samples, 0.04%)</title><rect x="42.0473%" y="389" width="0.0413%" height="15" fill="rgb(245,16,25)" fg:x="47894" fg:w="47"/><text x="42.2973%" y="399.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::drop (648 samples, 0.57%)</title><rect x="41.5320%" y="421" width="0.5689%" height="15" fill="rgb(249,152,16)" fg:x="47307" fg:w="648"/><text x="41.7820%" y="431.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::as_ptr (14 samples, 0.01%)</title><rect x="42.0886%" y="405" width="0.0123%" height="15" fill="rgb(250,16,1)" fg:x="47941" fg:w="14"/><text x="42.3386%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (14 samples, 0.01%)</title><rect x="42.0886%" y="389" width="0.0123%" height="15" fill="rgb(249,138,3)" fg:x="47941" fg:w="14"/><text x="42.3386%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (14 samples, 0.01%)</title><rect x="42.0886%" y="373" width="0.0123%" height="15" fill="rgb(227,71,41)" fg:x="47941" fg:w="14"/><text x="42.3386%" y="383.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (456 samples, 0.40%)</title><rect x="42.1097%" y="389" width="0.4003%" height="15" fill="rgb(209,184,23)" fg:x="47965" fg:w="456"/><text x="42.3597%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (456 samples, 0.40%)</title><rect x="42.1097%" y="373" width="0.4003%" height="15" fill="rgb(223,215,31)" fg:x="47965" fg:w="456"/><text x="42.3597%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (480 samples, 0.42%)</title><rect x="42.1097%" y="405" width="0.4214%" height="15" fill="rgb(210,146,28)" fg:x="47965" fg:w="480"/><text x="42.3597%" y="415.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_full (24 samples, 0.02%)</title><rect x="42.5100%" y="389" width="0.0211%" height="15" fill="rgb(209,183,41)" fg:x="48421" fg:w="24"/><text x="42.7600%" y="399.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (18 samples, 0.02%)</title><rect x="42.5153%" y="373" width="0.0158%" height="15" fill="rgb(209,224,45)" fg:x="48427" fg:w="18"/><text x="42.7653%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (18 samples, 0.02%)</title><rect x="42.5153%" y="357" width="0.0158%" height="15" fill="rgb(224,209,51)" fg:x="48427" fg:w="18"/><text x="42.7653%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (1,220 samples, 1.07%)</title><rect x="41.4635%" y="437" width="1.0711%" height="15" fill="rgb(223,17,39)" fg:x="47229" fg:w="1220"/><text x="41.7135%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (484 samples, 0.42%)</title><rect x="42.1097%" y="421" width="0.4249%" height="15" fill="rgb(234,204,37)" fg:x="47965" fg:w="484"/><text x="42.3597%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (1,231 samples, 1.08%)</title><rect x="41.4635%" y="485" width="1.0807%" height="15" fill="rgb(236,120,5)" fg:x="47229" fg:w="1231"/><text x="41.7135%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (1,231 samples, 1.08%)</title><rect x="41.4635%" y="469" width="1.0807%" height="15" fill="rgb(248,97,27)" fg:x="47229" fg:w="1231"/><text x="41.7135%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,231 samples, 1.08%)</title><rect x="41.4635%" y="453" width="1.0807%" height="15" fill="rgb(240,66,17)" fg:x="47229" fg:w="1231"/><text x="41.7135%" y="463.50"></text></g><g><title>sn_rust_dealloc (43 samples, 0.04%)</title><rect x="42.5442%" y="485" width="0.0378%" height="15" fill="rgb(210,79,3)" fg:x="48460" fg:w="43"/><text x="42.7942%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (1,623 samples, 1.42%)</title><rect x="41.1773%" y="533" width="1.4249%" height="15" fill="rgb(214,176,27)" fg:x="46903" fg:w="1623"/><text x="41.4273%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (1,623 samples, 1.42%)</title><rect x="41.1773%" y="517" width="1.4249%" height="15" fill="rgb(235,185,3)" fg:x="46903" fg:w="1623"/><text x="41.4273%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (1,623 samples, 1.42%)</title><rect x="41.1773%" y="501" width="1.4249%" height="15" fill="rgb(227,24,12)" fg:x="46903" fg:w="1623"/><text x="41.4273%" y="511.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (23 samples, 0.02%)</title><rect x="42.5820%" y="485" width="0.0202%" height="15" fill="rgb(252,169,48)" fg:x="48503" fg:w="23"/><text x="42.8320%" y="495.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (1,628 samples, 1.43%)</title><rect x="41.1755%" y="549" width="1.4293%" height="15" fill="rgb(212,65,1)" fg:x="46901" fg:w="1628"/><text x="41.4255%" y="559.50"></text></g><g><title>abi_stable::std_types::arc::private::RArc&lt;T&gt;::data (198 samples, 0.17%)</title><rect x="42.6382%" y="389" width="0.1738%" height="15" fill="rgb(242,39,24)" fg:x="48567" fg:w="198"/><text x="42.8882%" y="399.50"></text></g><g><title>core::mem::drop (449 samples, 0.39%)</title><rect x="42.8269%" y="309" width="0.3942%" height="15" fill="rgb(249,32,23)" fg:x="48782" fg:w="449"/><text x="43.0769%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (449 samples, 0.39%)</title><rect x="42.8269%" y="293" width="0.3942%" height="15" fill="rgb(251,195,23)" fg:x="48782" fg:w="449"/><text x="43.0769%" y="303.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (449 samples, 0.39%)</title><rect x="42.8269%" y="277" width="0.3942%" height="15" fill="rgb(236,174,8)" fg:x="48782" fg:w="449"/><text x="43.0769%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (441 samples, 0.39%)</title><rect x="42.8339%" y="261" width="0.3872%" height="15" fill="rgb(220,197,8)" fg:x="48790" fg:w="441"/><text x="43.0839%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_sub (441 samples, 0.39%)</title><rect x="42.8339%" y="245" width="0.3872%" height="15" fill="rgb(240,108,37)" fg:x="48790" fg:w="441"/><text x="43.0839%" y="255.50"></text></g><g><title>sn_rust_dealloc (85 samples, 0.07%)</title><rect x="43.2369%" y="261" width="0.0746%" height="15" fill="rgb(232,176,24)" fg:x="49249" fg:w="85"/><text x="43.4869%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (594 samples, 0.52%)</title><rect x="42.8199%" y="325" width="0.5215%" height="15" fill="rgb(243,35,29)" fg:x="48774" fg:w="594"/><text x="43.0699%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (137 samples, 0.12%)</title><rect x="43.2211%" y="309" width="0.1203%" height="15" fill="rgb(210,37,18)" fg:x="49231" fg:w="137"/><text x="43.4711%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (137 samples, 0.12%)</title><rect x="43.2211%" y="293" width="0.1203%" height="15" fill="rgb(224,184,40)" fg:x="49231" fg:w="137"/><text x="43.4711%" y="303.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (137 samples, 0.12%)</title><rect x="43.2211%" y="277" width="0.1203%" height="15" fill="rgb(236,39,29)" fg:x="49231" fg:w="137"/><text x="43.4711%" y="287.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (34 samples, 0.03%)</title><rect x="43.3115%" y="261" width="0.0298%" height="15" fill="rgb(232,48,39)" fg:x="49334" fg:w="34"/><text x="43.5615%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (512 samples, 0.45%)</title><rect x="43.3414%" y="325" width="0.4495%" height="15" fill="rgb(236,34,42)" fg:x="49368" fg:w="512"/><text x="43.5914%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_sub (512 samples, 0.45%)</title><rect x="43.3414%" y="309" width="0.4495%" height="15" fill="rgb(243,106,37)" fg:x="49368" fg:w="512"/><text x="43.5914%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,380 samples, 1.21%)</title><rect x="42.6145%" y="453" width="1.2115%" height="15" fill="rgb(218,96,6)" fg:x="48540" fg:w="1380"/><text x="42.8645%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (1,380 samples, 1.21%)</title><rect x="42.6145%" y="437" width="1.2115%" height="15" fill="rgb(235,130,12)" fg:x="48540" fg:w="1380"/><text x="42.8645%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (1,363 samples, 1.20%)</title><rect x="42.6294%" y="421" width="1.1966%" height="15" fill="rgb(231,95,0)" fg:x="48557" fg:w="1363"/><text x="42.8794%" y="431.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (1,363 samples, 1.20%)</title><rect x="42.6294%" y="405" width="1.1966%" height="15" fill="rgb(228,12,23)" fg:x="48557" fg:w="1363"/><text x="42.8794%" y="415.50"></text></g><g><title>abi_stable::std_types::arc::vtable_mod::destructor_arc (1,155 samples, 1.01%)</title><rect x="42.8120%" y="389" width="1.0140%" height="15" fill="rgb(216,12,1)" fg:x="48765" fg:w="1155"/><text x="43.0620%" y="399.50"></text></g><g><title>core::mem::drop (1,146 samples, 1.01%)</title><rect x="42.8199%" y="373" width="1.0061%" height="15" fill="rgb(219,59,3)" fg:x="48774" fg:w="1146"/><text x="43.0699%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (1,146 samples, 1.01%)</title><rect x="42.8199%" y="357" width="1.0061%" height="15" fill="rgb(215,208,46)" fg:x="48774" fg:w="1146"/><text x="43.0699%" y="367.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1,146 samples, 1.01%)</title><rect x="42.8199%" y="341" width="1.0061%" height="15" fill="rgb(254,224,29)" fg:x="48774" fg:w="1146"/><text x="43.0699%" y="351.50"></text></g><g><title>sn_rust_dealloc (40 samples, 0.04%)</title><rect x="43.7909%" y="325" width="0.0351%" height="15" fill="rgb(232,14,29)" fg:x="49880" fg:w="40"/><text x="44.0409%" y="335.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (1,405 samples, 1.23%)</title><rect x="42.6048%" y="517" width="1.2335%" height="15" fill="rgb(208,45,52)" fg:x="48529" fg:w="1405"/><text x="42.8548%" y="527.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (1,399 samples, 1.23%)</title><rect x="42.6101%" y="501" width="1.2282%" height="15" fill="rgb(234,191,28)" fg:x="48535" fg:w="1399"/><text x="42.8601%" y="511.50"></text></g><g><title>core::mem::drop (1,394 samples, 1.22%)</title><rect x="42.6145%" y="485" width="1.2238%" height="15" fill="rgb(244,67,43)" fg:x="48540" fg:w="1394"/><text x="42.8645%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (1,394 samples, 1.22%)</title><rect x="42.6145%" y="469" width="1.2238%" height="15" fill="rgb(236,189,24)" fg:x="48540" fg:w="1394"/><text x="42.8645%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="43.8260%" y="453" width="0.0123%" height="15" fill="rgb(239,214,33)" fg:x="49920" fg:w="14"/><text x="44.0760%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="43.8260%" y="437" width="0.0123%" height="15" fill="rgb(226,176,41)" fg:x="49920" fg:w="14"/><text x="44.0760%" y="447.50"></text></g><g><title>sn_rust_dealloc (37 samples, 0.03%)</title><rect x="43.8383%" y="517" width="0.0325%" height="15" fill="rgb(248,47,8)" fg:x="49934" fg:w="37"/><text x="44.0883%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (1,443 samples, 1.27%)</title><rect x="42.6048%" y="549" width="1.2668%" height="15" fill="rgb(218,81,44)" fg:x="48529" fg:w="1443"/><text x="42.8548%" y="559.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (1,443 samples, 1.27%)</title><rect x="42.6048%" y="533" width="1.2668%" height="15" fill="rgb(213,98,6)" fg:x="48529" fg:w="1443"/><text x="42.8548%" y="543.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::next_n (53 samples, 0.05%)</title><rect x="43.9252%" y="309" width="0.0465%" height="15" fill="rgb(222,85,22)" fg:x="50033" fg:w="53"/><text x="44.1752%" y="319.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (45 samples, 0.04%)</title><rect x="43.9322%" y="293" width="0.0395%" height="15" fill="rgb(239,46,39)" fg:x="50041" fg:w="45"/><text x="44.1822%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (127 samples, 0.11%)</title><rect x="43.9191%" y="341" width="0.1115%" height="15" fill="rgb(237,12,29)" fg:x="50026" fg:w="127"/><text x="44.1691%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (127 samples, 0.11%)</title><rect x="43.9191%" y="325" width="0.1115%" height="15" fill="rgb(214,77,8)" fg:x="50026" fg:w="127"/><text x="44.1691%" y="335.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (63 samples, 0.06%)</title><rect x="43.9752%" y="309" width="0.0553%" height="15" fill="rgb(217,168,37)" fg:x="50090" fg:w="63"/><text x="44.2252%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (444 samples, 0.39%)</title><rect x="44.0841%" y="245" width="0.3898%" height="15" fill="rgb(221,217,23)" fg:x="50214" fg:w="444"/><text x="44.3341%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tremor_value::value::Value]&gt; (436 samples, 0.38%)</title><rect x="44.0911%" y="229" width="0.3828%" height="15" fill="rgb(243,229,36)" fg:x="50222" fg:w="436"/><text x="44.3411%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (396 samples, 0.35%)</title><rect x="44.1262%" y="213" width="0.3477%" height="15" fill="rgb(251,163,40)" fg:x="50262" fg:w="396"/><text x="44.3762%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt; (25 samples, 0.02%)</title><rect x="44.4520%" y="197" width="0.0219%" height="15" fill="rgb(237,222,12)" fg:x="50633" fg:w="25"/><text x="44.7020%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (12 samples, 0.01%)</title><rect x="44.4739%" y="213" width="0.0105%" height="15" fill="rgb(248,132,6)" fg:x="50658" fg:w="12"/><text x="44.7239%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (12 samples, 0.01%)</title><rect x="44.4739%" y="197" width="0.0105%" height="15" fill="rgb(227,167,50)" fg:x="50658" fg:w="12"/><text x="44.7239%" y="207.50"></text></g><g><title>__rg_dealloc (12 samples, 0.01%)</title><rect x="44.4739%" y="181" width="0.0105%" height="15" fill="rgb(242,84,37)" fg:x="50658" fg:w="12"/><text x="44.7239%" y="191.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (12 samples, 0.01%)</title><rect x="44.4739%" y="165" width="0.0105%" height="15" fill="rgb(212,4,50)" fg:x="50658" fg:w="12"/><text x="44.7239%" y="175.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (492 samples, 0.43%)</title><rect x="44.0709%" y="309" width="0.4319%" height="15" fill="rgb(230,228,32)" fg:x="50199" fg:w="492"/><text x="44.3209%" y="319.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (484 samples, 0.42%)</title><rect x="44.0780%" y="293" width="0.4249%" height="15" fill="rgb(248,217,23)" fg:x="50207" fg:w="484"/><text x="44.3280%" y="303.50"></text></g><g><title>core::mem::drop (477 samples, 0.42%)</title><rect x="44.0841%" y="277" width="0.4188%" height="15" fill="rgb(238,197,32)" fg:x="50214" fg:w="477"/><text x="44.3341%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;tremor_value::value::Value&gt;&gt; (477 samples, 0.42%)</title><rect x="44.0841%" y="261" width="0.4188%" height="15" fill="rgb(236,106,1)" fg:x="50214" fg:w="477"/><text x="44.3341%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;tremor_value::value::Value&gt;&gt; (33 samples, 0.03%)</title><rect x="44.4739%" y="245" width="0.0290%" height="15" fill="rgb(219,228,13)" fg:x="50658" fg:w="33"/><text x="44.7239%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.03%)</title><rect x="44.4739%" y="229" width="0.0290%" height="15" fill="rgb(238,30,35)" fg:x="50658" fg:w="33"/><text x="44.7239%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (21 samples, 0.02%)</title><rect x="44.4844%" y="213" width="0.0184%" height="15" fill="rgb(236,70,23)" fg:x="50670" fg:w="21"/><text x="44.7344%" y="223.50"></text></g><g><title>core::alloc::layout::Layout::array (14 samples, 0.01%)</title><rect x="44.4906%" y="197" width="0.0123%" height="15" fill="rgb(249,104,48)" fg:x="50677" fg:w="14"/><text x="44.7406%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (14 samples, 0.01%)</title><rect x="44.4906%" y="181" width="0.0123%" height="15" fill="rgb(254,117,50)" fg:x="50677" fg:w="14"/><text x="44.7406%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (14 samples, 0.01%)</title><rect x="44.4906%" y="165" width="0.0123%" height="15" fill="rgb(223,152,4)" fg:x="50677" fg:w="14"/><text x="44.7406%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;&gt; (177 samples, 0.16%)</title><rect x="44.5055%" y="293" width="0.1554%" height="15" fill="rgb(245,6,2)" fg:x="50694" fg:w="177"/><text x="44.7555%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt; (49 samples, 0.04%)</title><rect x="44.6179%" y="277" width="0.0430%" height="15" fill="rgb(249,150,24)" fg:x="50822" fg:w="49"/><text x="44.8679%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (378 samples, 0.33%)</title><rect x="44.5029%" y="309" width="0.3319%" height="15" fill="rgb(228,185,42)" fg:x="50691" fg:w="378"/><text x="44.7529%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (198 samples, 0.17%)</title><rect x="44.6609%" y="293" width="0.1738%" height="15" fill="rgb(226,39,33)" fg:x="50871" fg:w="198"/><text x="44.9109%" y="303.50"></text></g><g><title>sn_rust_dealloc (145 samples, 0.13%)</title><rect x="44.8347%" y="309" width="0.1273%" height="15" fill="rgb(221,166,19)" fg:x="51069" fg:w="145"/><text x="45.0847%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1,108 samples, 0.97%)</title><rect x="44.0306%" y="325" width="0.9727%" height="15" fill="rgb(209,109,2)" fg:x="50153" fg:w="1108"/><text x="44.2806%" y="335.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (47 samples, 0.04%)</title><rect x="44.9620%" y="309" width="0.0413%" height="15" fill="rgb(252,216,26)" fg:x="51214" fg:w="47"/><text x="45.2120%" y="319.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::drop (1,116 samples, 0.98%)</title><rect x="44.0306%" y="341" width="0.9798%" height="15" fill="rgb(227,173,36)" fg:x="50153" fg:w="1116"/><text x="44.2806%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (15 samples, 0.01%)</title><rect x="45.0103%" y="325" width="0.0132%" height="15" fill="rgb(209,90,7)" fg:x="51269" fg:w="15"/><text x="45.2603%" y="335.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (1,266 samples, 1.11%)</title><rect x="43.9191%" y="357" width="1.1115%" height="15" fill="rgb(250,194,11)" fg:x="50026" fg:w="1266"/><text x="44.1691%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (23 samples, 0.02%)</title><rect x="45.0103%" y="341" width="0.0202%" height="15" fill="rgb(220,72,50)" fg:x="51269" fg:w="23"/><text x="45.2603%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (1,276 samples, 1.12%)</title><rect x="43.9191%" y="405" width="1.1202%" height="15" fill="rgb(222,106,48)" fg:x="50026" fg:w="1276"/><text x="44.1691%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (1,276 samples, 1.12%)</title><rect x="43.9191%" y="389" width="1.1202%" height="15" fill="rgb(216,220,45)" fg:x="50026" fg:w="1276"/><text x="44.1691%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,276 samples, 1.12%)</title><rect x="43.9191%" y="373" width="1.1202%" height="15" fill="rgb(234,112,18)" fg:x="50026" fg:w="1276"/><text x="44.1691%" y="383.50"></text></g><g><title>sn_rust_dealloc (134 samples, 0.12%)</title><rect x="45.0393%" y="405" width="0.1176%" height="15" fill="rgb(206,179,9)" fg:x="51302" fg:w="134"/><text x="45.2893%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (2,362 samples, 2.07%)</title><rect x="43.9094%" y="453" width="2.0737%" height="15" fill="rgb(215,115,40)" fg:x="50015" fg:w="2362"/><text x="44.1594%" y="463.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (2,362 samples, 2.07%)</title><rect x="43.9094%" y="437" width="2.0737%" height="15" fill="rgb(222,69,34)" fg:x="50015" fg:w="2362"/><text x="44.1594%" y="447.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (2,362 samples, 2.07%)</title><rect x="43.9094%" y="421" width="2.0737%" height="15" fill="rgb(209,161,10)" fg:x="50015" fg:w="2362"/><text x="44.1594%" y="431.50">c..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (941 samples, 0.83%)</title><rect x="45.1569%" y="405" width="0.8261%" height="15" fill="rgb(217,6,38)" fg:x="51436" fg:w="941"/><text x="45.4069%" y="415.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (2,380 samples, 2.09%)</title><rect x="43.9050%" y="469" width="2.0895%" height="15" fill="rgb(229,229,48)" fg:x="50010" fg:w="2380"/><text x="44.1550%" y="479.50">a..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="45.9831%" y="453" width="0.0114%" height="15" fill="rgb(225,21,28)" fg:x="52377" fg:w="13"/><text x="46.2331%" y="463.50"></text></g><g><title>alloc::alloc::box_free (13 samples, 0.01%)</title><rect x="45.9831%" y="437" width="0.0114%" height="15" fill="rgb(206,33,13)" fg:x="52377" fg:w="13"/><text x="46.2331%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.01%)</title><rect x="45.9831%" y="421" width="0.0114%" height="15" fill="rgb(242,178,17)" fg:x="52377" fg:w="13"/><text x="46.2331%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.01%)</title><rect x="45.9831%" y="405" width="0.0114%" height="15" fill="rgb(220,162,5)" fg:x="52377" fg:w="13"/><text x="46.2331%" y="415.50"></text></g><g><title>__rg_dealloc (13 samples, 0.01%)</title><rect x="45.9831%" y="389" width="0.0114%" height="15" fill="rgb(210,33,43)" fg:x="52377" fg:w="13"/><text x="46.2331%" y="399.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (13 samples, 0.01%)</title><rect x="45.9831%" y="373" width="0.0114%" height="15" fill="rgb(216,116,54)" fg:x="52377" fg:w="13"/><text x="46.2331%" y="383.50"></text></g><g><title>sn_rust_dealloc (63 samples, 0.06%)</title><rect x="45.9945%" y="469" width="0.0553%" height="15" fill="rgb(249,92,24)" fg:x="52390" fg:w="63"/><text x="46.2445%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (2,489 samples, 2.19%)</title><rect x="43.8716%" y="549" width="2.1852%" height="15" fill="rgb(231,189,14)" fg:x="49972" fg:w="2489"/><text x="44.1216%" y="559.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (2,489 samples, 2.19%)</title><rect x="43.8716%" y="533" width="2.1852%" height="15" fill="rgb(230,8,41)" fg:x="49972" fg:w="2489"/><text x="44.1216%" y="543.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (2,464 samples, 2.16%)</title><rect x="43.8936%" y="517" width="2.1632%" height="15" fill="rgb(249,7,27)" fg:x="49997" fg:w="2464"/><text x="44.1436%" y="527.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (2,464 samples, 2.16%)</title><rect x="43.8936%" y="501" width="2.1632%" height="15" fill="rgb(232,86,5)" fg:x="49997" fg:w="2464"/><text x="44.1436%" y="511.50">c..</text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (2,464 samples, 2.16%)</title><rect x="43.8936%" y="485" width="2.1632%" height="15" fill="rgb(224,175,18)" fg:x="49997" fg:w="2464"/><text x="44.1436%" y="495.50">a..</text></g><g><title>sn_rust_dealloc (39 samples, 0.03%)</title><rect x="46.0568%" y="549" width="0.0342%" height="15" fill="rgb(220,129,12)" fg:x="52461" fg:w="39"/><text x="46.3068%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (6,311 samples, 5.54%)</title><rect x="40.5654%" y="581" width="5.5406%" height="15" fill="rgb(210,19,36)" fg:x="46206" fg:w="6311"/><text x="40.8154%" y="591.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (5,616 samples, 4.93%)</title><rect x="41.1755%" y="565" width="4.9304%" height="15" fill="rgb(219,96,14)" fg:x="46901" fg:w="5616"/><text x="41.4255%" y="575.50">core::..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (17 samples, 0.01%)</title><rect x="46.0910%" y="549" width="0.0149%" height="15" fill="rgb(249,106,1)" fg:x="52500" fg:w="17"/><text x="46.3410%" y="559.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::mut_at (42 samples, 0.04%)</title><rect x="46.2324%" y="533" width="0.0369%" height="15" fill="rgb(249,155,20)" fg:x="52661" fg:w="42"/><text x="46.4824%" y="543.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::index_for (38 samples, 0.03%)</title><rect x="46.2359%" y="517" width="0.0334%" height="15" fill="rgb(244,168,9)" fg:x="52665" fg:w="38"/><text x="46.4859%" y="527.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (187 samples, 0.16%)</title><rect x="46.1086%" y="581" width="0.1642%" height="15" fill="rgb(216,23,50)" fg:x="52520" fg:w="187"/><text x="46.3586%" y="591.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n (187 samples, 0.16%)</title><rect x="46.1086%" y="565" width="0.1642%" height="15" fill="rgb(224,219,20)" fg:x="52520" fg:w="187"/><text x="46.3586%" y="575.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n_inner (187 samples, 0.16%)</title><rect x="46.1086%" y="549" width="0.1642%" height="15" fill="rgb(222,156,15)" fg:x="52520" fg:w="187"/><text x="46.3586%" y="559.50"></text></g><g><title>sn_rust_dealloc (38 samples, 0.03%)</title><rect x="46.2728%" y="581" width="0.0334%" height="15" fill="rgb(231,97,17)" fg:x="52707" fg:w="38"/><text x="46.5228%" y="591.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (15 samples, 0.01%)</title><rect x="46.3061%" y="581" width="0.0132%" height="15" fill="rgb(218,70,48)" fg:x="52745" fg:w="15"/><text x="46.5561%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (13 samples, 0.01%)</title><rect x="46.3263%" y="565" width="0.0114%" height="15" fill="rgb(212,196,52)" fg:x="52768" fg:w="13"/><text x="46.5763%" y="575.50"></text></g><g><title>core::time::Duration::as_nanos (12 samples, 0.01%)</title><rect x="46.3377%" y="565" width="0.0105%" height="15" fill="rgb(243,203,18)" fg:x="52781" fg:w="12"/><text x="46.5877%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (50 samples, 0.04%)</title><rect x="46.3483%" y="549" width="0.0439%" height="15" fill="rgb(252,125,41)" fg:x="52793" fg:w="50"/><text x="46.5983%" y="559.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (26 samples, 0.02%)</title><rect x="46.4124%" y="517" width="0.0228%" height="15" fill="rgb(223,180,33)" fg:x="52866" fg:w="26"/><text x="46.6624%" y="527.50"></text></g><g><title>core::cmp::PartialOrd::ge (26 samples, 0.02%)</title><rect x="46.4124%" y="501" width="0.0228%" height="15" fill="rgb(254,159,46)" fg:x="52866" fg:w="26"/><text x="46.6624%" y="511.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (25 samples, 0.02%)</title><rect x="46.4132%" y="485" width="0.0219%" height="15" fill="rgb(254,38,10)" fg:x="52867" fg:w="25"/><text x="46.6632%" y="495.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (25 samples, 0.02%)</title><rect x="46.4132%" y="469" width="0.0219%" height="15" fill="rgb(208,217,32)" fg:x="52867" fg:w="25"/><text x="46.6632%" y="479.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (25 samples, 0.02%)</title><rect x="46.4132%" y="453" width="0.0219%" height="15" fill="rgb(221,120,13)" fg:x="52867" fg:w="25"/><text x="46.6632%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (12 samples, 0.01%)</title><rect x="46.4247%" y="437" width="0.0105%" height="15" fill="rgb(246,54,52)" fg:x="52880" fg:w="12"/><text x="46.6747%" y="447.50"></text></g><g><title>std::time::SystemTime::duration_since (108 samples, 0.09%)</title><rect x="46.3483%" y="565" width="0.0948%" height="15" fill="rgb(242,34,25)" fg:x="52793" fg:w="108"/><text x="46.5983%" y="575.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (58 samples, 0.05%)</title><rect x="46.3922%" y="549" width="0.0509%" height="15" fill="rgb(247,209,9)" fg:x="52843" fg:w="58"/><text x="46.6422%" y="559.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (58 samples, 0.05%)</title><rect x="46.3922%" y="533" width="0.0509%" height="15" fill="rgb(228,71,26)" fg:x="52843" fg:w="58"/><text x="46.6422%" y="543.50"></text></g><g><title>tremor_common::time::nanotime (422 samples, 0.37%)</title><rect x="46.3193%" y="581" width="0.3705%" height="15" fill="rgb(222,145,49)" fg:x="52760" fg:w="422"/><text x="46.5693%" y="591.50"></text></g><g><title>std::time::SystemTime::now (281 samples, 0.25%)</title><rect x="46.4431%" y="565" width="0.2467%" height="15" fill="rgb(218,121,17)" fg:x="52901" fg:w="281"/><text x="46.6931%" y="575.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (281 samples, 0.25%)</title><rect x="46.4431%" y="549" width="0.2467%" height="15" fill="rgb(244,50,7)" fg:x="52901" fg:w="281"/><text x="46.6931%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::now (281 samples, 0.25%)</title><rect x="46.4431%" y="533" width="0.2467%" height="15" fill="rgb(246,229,37)" fg:x="52901" fg:w="281"/><text x="46.6931%" y="543.50"></text></g><g><title>__clock_gettime (231 samples, 0.20%)</title><rect x="46.4870%" y="517" width="0.2028%" height="15" fill="rgb(225,18,5)" fg:x="52951" fg:w="231"/><text x="46.7370%" y="527.50"></text></g><g><title>__vdso_clock_gettime (224 samples, 0.20%)</title><rect x="46.4931%" y="501" width="0.1967%" height="15" fill="rgb(213,204,8)" fg:x="52958" fg:w="224"/><text x="46.7431%" y="511.50"></text></g><g><title>[[vdso]] (202 samples, 0.18%)</title><rect x="46.5124%" y="485" width="0.1773%" height="15" fill="rgb(238,103,6)" fg:x="52980" fg:w="202"/><text x="46.7624%" y="495.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (102 samples, 0.09%)</title><rect x="46.6986%" y="565" width="0.0895%" height="15" fill="rgb(222,25,35)" fg:x="53192" fg:w="102"/><text x="46.9486%" y="575.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (7,572 samples, 6.65%)</title><rect x="40.1440%" y="869" width="6.6476%" height="15" fill="rgb(213,203,35)" fg:x="45726" fg:w="7572"/><text x="40.3940%" y="879.50">tremor_ru..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,572 samples, 6.65%)</title><rect x="40.1440%" y="853" width="6.6476%" height="15" fill="rgb(221,79,53)" fg:x="45726" fg:w="7572"/><text x="40.3940%" y="863.50">&lt;core::fu..</text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (7,572 samples, 6.65%)</title><rect x="40.1440%" y="837" width="6.6476%" height="15" fill="rgb(243,200,35)" fg:x="45726" fg:w="7572"/><text x="40.3940%" y="847.50">tremor_ru..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,572 samples, 6.65%)</title><rect x="40.1440%" y="821" width="6.6476%" height="15" fill="rgb(248,60,25)" fg:x="45726" fg:w="7572"/><text x="40.3940%" y="831.50">&lt;async_ff..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,572 samples, 6.65%)</title><rect x="40.1440%" y="805" width="6.6476%" height="15" fill="rgb(227,53,46)" fg:x="45726" fg:w="7572"/><text x="40.3940%" y="815.50">&lt;async_ff..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (7,572 samples, 6.65%)</title><rect x="40.1440%" y="789" width="6.6476%" height="15" fill="rgb(216,120,32)" fg:x="45726" fg:w="7572"/><text x="40.3940%" y="799.50">&lt;core::ta..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (7,572 samples, 6.65%)</title><rect x="40.1440%" y="773" width="6.6476%" height="15" fill="rgb(220,134,1)" fg:x="45726" fg:w="7572"/><text x="40.3940%" y="783.50">&lt;async_ff..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (7,572 samples, 6.65%)</title><rect x="40.1440%" y="757" width="6.6476%" height="15" fill="rgb(237,168,5)" fg:x="45726" fg:w="7572"/><text x="40.3940%" y="767.50">async_ffi..</text></g><g><title>std::panic::catch_unwind (7,572 samples, 6.65%)</title><rect x="40.1440%" y="741" width="6.6476%" height="15" fill="rgb(231,100,33)" fg:x="45726" fg:w="7572"/><text x="40.3940%" y="751.50">std::pani..</text></g><g><title>std::panicking::try (7,572 samples, 6.65%)</title><rect x="40.1440%" y="725" width="6.6476%" height="15" fill="rgb(236,177,47)" fg:x="45726" fg:w="7572"/><text x="40.3940%" y="735.50">std::pani..</text></g><g><title>std::panicking::try::do_call (7,572 samples, 6.65%)</title><rect x="40.1440%" y="709" width="6.6476%" height="15" fill="rgb(235,7,49)" fg:x="45726" fg:w="7572"/><text x="40.3940%" y="719.50">std::pani..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (7,572 samples, 6.65%)</title><rect x="40.1440%" y="693" width="6.6476%" height="15" fill="rgb(232,119,22)" fg:x="45726" fg:w="7572"/><text x="40.3940%" y="703.50">&lt;core::pa..</text></g><g><title>core::ops::function::FnOnce::call_once (7,572 samples, 6.65%)</title><rect x="40.1440%" y="677" width="6.6476%" height="15" fill="rgb(254,73,53)" fg:x="45726" fg:w="7572"/><text x="40.3940%" y="687.50">core::ops..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (7,572 samples, 6.65%)</title><rect x="40.1440%" y="661" width="6.6476%" height="15" fill="rgb(251,35,20)" fg:x="45726" fg:w="7572"/><text x="40.3940%" y="671.50">async_ffi..</text></g><g><title>async_ffi::FfiContext::with_context (7,572 samples, 6.65%)</title><rect x="40.1440%" y="645" width="6.6476%" height="15" fill="rgb(241,119,20)" fg:x="45726" fg:w="7572"/><text x="40.3940%" y="655.50">async_ffi..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (7,572 samples, 6.65%)</title><rect x="40.1440%" y="629" width="6.6476%" height="15" fill="rgb(207,102,14)" fg:x="45726" fg:w="7572"/><text x="40.3940%" y="639.50">async_ffi..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,572 samples, 6.65%)</title><rect x="40.1440%" y="613" width="6.6476%" height="15" fill="rgb(248,201,50)" fg:x="45726" fg:w="7572"/><text x="40.3940%" y="623.50">&lt;core::fu..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (7,563 samples, 6.64%)</title><rect x="40.1519%" y="597" width="6.6397%" height="15" fill="rgb(222,185,44)" fg:x="45735" fg:w="7563"/><text x="40.4019%" y="607.50">&lt;tremor_r..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (116 samples, 0.10%)</title><rect x="46.6898%" y="581" width="0.1018%" height="15" fill="rgb(218,107,18)" fg:x="53182" fg:w="116"/><text x="46.9398%" y="591.50"></text></g><g><title>[libc-2.31.so] (74 samples, 0.06%)</title><rect x="46.7934%" y="741" width="0.0650%" height="15" fill="rgb(237,177,39)" fg:x="53300" fg:w="74"/><text x="47.0434%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (97 samples, 0.09%)</title><rect x="46.9207%" y="661" width="0.0852%" height="15" fill="rgb(246,69,6)" fg:x="53445" fg:w="97"/><text x="47.1707%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (97 samples, 0.09%)</title><rect x="46.9207%" y="645" width="0.0852%" height="15" fill="rgb(234,208,37)" fg:x="53445" fg:w="97"/><text x="47.1707%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (278 samples, 0.24%)</title><rect x="47.0058%" y="661" width="0.2441%" height="15" fill="rgb(225,4,6)" fg:x="53542" fg:w="278"/><text x="47.2558%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_load (277 samples, 0.24%)</title><rect x="47.0067%" y="645" width="0.2432%" height="15" fill="rgb(233,45,0)" fg:x="53543" fg:w="277"/><text x="47.2567%" y="655.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (409 samples, 0.36%)</title><rect x="46.8935%" y="693" width="0.3591%" height="15" fill="rgb(226,136,5)" fg:x="53414" fg:w="409"/><text x="47.1435%" y="703.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (400 samples, 0.35%)</title><rect x="46.9014%" y="677" width="0.3512%" height="15" fill="rgb(211,91,47)" fg:x="53423" fg:w="400"/><text x="47.1514%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (48 samples, 0.04%)</title><rect x="47.2560%" y="677" width="0.0421%" height="15" fill="rgb(242,88,51)" fg:x="53827" fg:w="48"/><text x="47.5060%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (47 samples, 0.04%)</title><rect x="47.2569%" y="661" width="0.0413%" height="15" fill="rgb(230,91,28)" fg:x="53828" fg:w="47"/><text x="47.5069%" y="671.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (47 samples, 0.04%)</title><rect x="47.2569%" y="645" width="0.0413%" height="15" fill="rgb(254,186,29)" fg:x="53828" fg:w="47"/><text x="47.5069%" y="655.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (47 samples, 0.04%)</title><rect x="47.2569%" y="629" width="0.0413%" height="15" fill="rgb(238,6,4)" fg:x="53828" fg:w="47"/><text x="47.5069%" y="639.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (45 samples, 0.04%)</title><rect x="47.2587%" y="613" width="0.0395%" height="15" fill="rgb(221,151,16)" fg:x="53830" fg:w="45"/><text x="47.5087%" y="623.50"></text></g><g><title>__GI___pthread_mutex_unlock (45 samples, 0.04%)</title><rect x="47.2587%" y="597" width="0.0395%" height="15" fill="rgb(251,143,52)" fg:x="53830" fg:w="45"/><text x="47.5087%" y="607.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (788 samples, 0.69%)</title><rect x="46.8864%" y="709" width="0.6918%" height="15" fill="rgb(206,90,15)" fg:x="53406" fg:w="788"/><text x="47.1364%" y="719.50"></text></g><g><title>event_listener::Event::notify (371 samples, 0.33%)</title><rect x="47.2525%" y="693" width="0.3257%" height="15" fill="rgb(218,35,8)" fg:x="53823" fg:w="371"/><text x="47.5025%" y="703.50"></text></g><g><title>event_listener::full_fence (305 samples, 0.27%)</title><rect x="47.3105%" y="677" width="0.2678%" height="15" fill="rgb(239,215,6)" fg:x="53889" fg:w="305"/><text x="47.5605%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (302 samples, 0.27%)</title><rect x="47.3131%" y="661" width="0.2651%" height="15" fill="rgb(245,116,39)" fg:x="53892" fg:w="302"/><text x="47.5631%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (302 samples, 0.27%)</title><rect x="47.3131%" y="645" width="0.2651%" height="15" fill="rgb(242,65,28)" fg:x="53892" fg:w="302"/><text x="47.5631%" y="655.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::capacity (12 samples, 0.01%)</title><rect x="47.5782%" y="709" width="0.0105%" height="15" fill="rgb(252,132,53)" fg:x="54194" fg:w="12"/><text x="47.8282%" y="719.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (872 samples, 0.77%)</title><rect x="46.8715%" y="725" width="0.7656%" height="15" fill="rgb(224,159,50)" fg:x="53389" fg:w="872"/><text x="47.1215%" y="735.50"></text></g><g><title>event_listener::Event::notify (52 samples, 0.05%)</title><rect x="47.5914%" y="709" width="0.0457%" height="15" fill="rgb(224,93,4)" fg:x="54209" fg:w="52"/><text x="47.8414%" y="719.50"></text></g><g><title>event_listener::full_fence (49 samples, 0.04%)</title><rect x="47.5940%" y="693" width="0.0430%" height="15" fill="rgb(208,81,34)" fg:x="54212" fg:w="49"/><text x="47.8440%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (45 samples, 0.04%)</title><rect x="47.5976%" y="677" width="0.0395%" height="15" fill="rgb(233,92,54)" fg:x="54216" fg:w="45"/><text x="47.8476%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (45 samples, 0.04%)</title><rect x="47.5976%" y="661" width="0.0395%" height="15" fill="rgb(237,21,14)" fg:x="54216" fg:w="45"/><text x="47.8476%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (964 samples, 0.85%)</title><rect x="46.7916%" y="757" width="0.8463%" height="15" fill="rgb(249,128,51)" fg:x="53298" fg:w="964"/><text x="47.0416%" y="767.50"></text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (888 samples, 0.78%)</title><rect x="46.8583%" y="741" width="0.7796%" height="15" fill="rgb(223,129,24)" fg:x="53374" fg:w="888"/><text x="47.1083%" y="751.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (296 samples, 0.26%)</title><rect x="47.6406%" y="757" width="0.2599%" height="15" fill="rgb(231,168,25)" fg:x="54265" fg:w="296"/><text x="47.8906%" y="767.50"></text></g><g><title>alloc::alloc::exchange_malloc (296 samples, 0.26%)</title><rect x="47.6406%" y="741" width="0.2599%" height="15" fill="rgb(224,39,20)" fg:x="54265" fg:w="296"/><text x="47.8906%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (296 samples, 0.26%)</title><rect x="47.6406%" y="725" width="0.2599%" height="15" fill="rgb(225,152,53)" fg:x="54265" fg:w="296"/><text x="47.8906%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (296 samples, 0.26%)</title><rect x="47.6406%" y="709" width="0.2599%" height="15" fill="rgb(252,17,24)" fg:x="54265" fg:w="296"/><text x="47.8906%" y="719.50"></text></g><g><title>alloc::alloc::alloc (296 samples, 0.26%)</title><rect x="47.6406%" y="693" width="0.2599%" height="15" fill="rgb(250,114,30)" fg:x="54265" fg:w="296"/><text x="47.8906%" y="703.50"></text></g><g><title>__rg_alloc (296 samples, 0.26%)</title><rect x="47.6406%" y="677" width="0.2599%" height="15" fill="rgb(229,5,4)" fg:x="54265" fg:w="296"/><text x="47.8906%" y="687.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (296 samples, 0.26%)</title><rect x="47.6406%" y="661" width="0.2599%" height="15" fill="rgb(225,176,49)" fg:x="54265" fg:w="296"/><text x="47.8906%" y="671.50"></text></g><g><title>sn_rust_alloc (296 samples, 0.26%)</title><rect x="47.6406%" y="645" width="0.2599%" height="15" fill="rgb(224,221,49)" fg:x="54265" fg:w="296"/><text x="47.8906%" y="655.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (296 samples, 0.26%)</title><rect x="47.6406%" y="629" width="0.2599%" height="15" fill="rgb(253,169,27)" fg:x="54265" fg:w="296"/><text x="47.8906%" y="639.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (1,269 samples, 1.11%)</title><rect x="46.7916%" y="869" width="1.1141%" height="15" fill="rgb(211,206,16)" fg:x="53298" fg:w="1269"/><text x="47.0416%" y="879.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,269 samples, 1.11%)</title><rect x="46.7916%" y="853" width="1.1141%" height="15" fill="rgb(244,87,35)" fg:x="53298" fg:w="1269"/><text x="47.0416%" y="863.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (1,269 samples, 1.11%)</title><rect x="46.7916%" y="837" width="1.1141%" height="15" fill="rgb(246,28,10)" fg:x="53298" fg:w="1269"/><text x="47.0416%" y="847.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,269 samples, 1.11%)</title><rect x="46.7916%" y="821" width="1.1141%" height="15" fill="rgb(229,12,44)" fg:x="53298" fg:w="1269"/><text x="47.0416%" y="831.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (1,269 samples, 1.11%)</title><rect x="46.7916%" y="805" width="1.1141%" height="15" fill="rgb(210,145,37)" fg:x="53298" fg:w="1269"/><text x="47.0416%" y="815.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,269 samples, 1.11%)</title><rect x="46.7916%" y="789" width="1.1141%" height="15" fill="rgb(227,112,52)" fg:x="53298" fg:w="1269"/><text x="47.0416%" y="799.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (1,269 samples, 1.11%)</title><rect x="46.7916%" y="773" width="1.1141%" height="15" fill="rgb(238,155,34)" fg:x="53298" fg:w="1269"/><text x="47.0416%" y="783.50"></text></g><g><title>[libc-2.31.so] (71 samples, 0.06%)</title><rect x="47.9127%" y="837" width="0.0623%" height="15" fill="rgb(239,226,36)" fg:x="54575" fg:w="71"/><text x="48.1627%" y="847.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (108 samples, 0.09%)</title><rect x="47.9751%" y="773" width="0.0948%" height="15" fill="rgb(230,16,23)" fg:x="54646" fg:w="108"/><text x="48.2251%" y="783.50"></text></g><g><title>[libc-2.31.so] (80 samples, 0.07%)</title><rect x="47.9996%" y="757" width="0.0702%" height="15" fill="rgb(236,171,36)" fg:x="54674" fg:w="80"/><text x="48.2496%" y="767.50"></text></g><g><title>[libc-2.31.so] (64 samples, 0.06%)</title><rect x="48.1401%" y="757" width="0.0562%" height="15" fill="rgb(221,22,14)" fg:x="54834" fg:w="64"/><text x="48.3901%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (41 samples, 0.04%)</title><rect x="48.5896%" y="677" width="0.0360%" height="15" fill="rgb(242,43,11)" fg:x="55346" fg:w="41"/><text x="48.8396%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)]&gt; (41 samples, 0.04%)</title><rect x="48.5896%" y="661" width="0.0360%" height="15" fill="rgb(232,69,23)" fg:x="55346" fg:w="41"/><text x="48.8396%" y="671.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (481 samples, 0.42%)</title><rect x="48.2112%" y="725" width="0.4223%" height="15" fill="rgb(216,180,54)" fg:x="54915" fg:w="481"/><text x="48.4612%" y="735.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (465 samples, 0.41%)</title><rect x="48.2253%" y="709" width="0.4082%" height="15" fill="rgb(216,5,24)" fg:x="54931" fg:w="465"/><text x="48.4753%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (50 samples, 0.04%)</title><rect x="48.5896%" y="693" width="0.0439%" height="15" fill="rgb(225,89,9)" fg:x="55346" fg:w="50"/><text x="48.8396%" y="703.50"></text></g><g><title>[libc-2.31.so] (111 samples, 0.10%)</title><rect x="48.6335%" y="725" width="0.0974%" height="15" fill="rgb(243,75,33)" fg:x="55396" fg:w="111"/><text x="48.8835%" y="735.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (14 samples, 0.01%)</title><rect x="48.7661%" y="613" width="0.0123%" height="15" fill="rgb(247,141,45)" fg:x="55547" fg:w="14"/><text x="49.0161%" y="623.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (659 samples, 0.58%)</title><rect x="48.2060%" y="741" width="0.5786%" height="15" fill="rgb(232,177,36)" fg:x="54909" fg:w="659"/><text x="48.4560%" y="751.50"></text></g><g><title>alloc::alloc::exchange_malloc (61 samples, 0.05%)</title><rect x="48.7310%" y="725" width="0.0536%" height="15" fill="rgb(219,125,36)" fg:x="55507" fg:w="61"/><text x="48.9810%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (61 samples, 0.05%)</title><rect x="48.7310%" y="709" width="0.0536%" height="15" fill="rgb(227,94,9)" fg:x="55507" fg:w="61"/><text x="48.9810%" y="719.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (61 samples, 0.05%)</title><rect x="48.7310%" y="693" width="0.0536%" height="15" fill="rgb(240,34,52)" fg:x="55507" fg:w="61"/><text x="48.9810%" y="703.50"></text></g><g><title>alloc::alloc::alloc (59 samples, 0.05%)</title><rect x="48.7327%" y="677" width="0.0518%" height="15" fill="rgb(216,45,12)" fg:x="55509" fg:w="59"/><text x="48.9827%" y="687.50"></text></g><g><title>__rg_alloc (59 samples, 0.05%)</title><rect x="48.7327%" y="661" width="0.0518%" height="15" fill="rgb(246,21,19)" fg:x="55509" fg:w="59"/><text x="48.9827%" y="671.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (59 samples, 0.05%)</title><rect x="48.7327%" y="645" width="0.0518%" height="15" fill="rgb(213,98,42)" fg:x="55509" fg:w="59"/><text x="48.9827%" y="655.50"></text></g><g><title>sn_rust_alloc (57 samples, 0.05%)</title><rect x="48.7345%" y="629" width="0.0500%" height="15" fill="rgb(250,136,47)" fg:x="55511" fg:w="57"/><text x="48.9845%" y="639.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (727 samples, 0.64%)</title><rect x="48.1972%" y="757" width="0.6383%" height="15" fill="rgb(251,124,27)" fg:x="54899" fg:w="727"/><text x="48.4472%" y="767.50"></text></g><g><title>[libc-2.31.so] (58 samples, 0.05%)</title><rect x="48.7845%" y="741" width="0.0509%" height="15" fill="rgb(229,180,14)" fg:x="55568" fg:w="58"/><text x="49.0345%" y="751.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (884 samples, 0.78%)</title><rect x="48.0699%" y="773" width="0.7761%" height="15" fill="rgb(245,216,25)" fg:x="54754" fg:w="884"/><text x="48.3199%" y="783.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (993 samples, 0.87%)</title><rect x="47.9751%" y="837" width="0.8718%" height="15" fill="rgb(251,43,5)" fg:x="54646" fg:w="993"/><text x="48.2251%" y="847.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (993 samples, 0.87%)</title><rect x="47.9751%" y="821" width="0.8718%" height="15" fill="rgb(250,128,24)" fg:x="54646" fg:w="993"/><text x="48.2251%" y="831.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (993 samples, 0.87%)</title><rect x="47.9751%" y="805" width="0.8718%" height="15" fill="rgb(217,117,27)" fg:x="54646" fg:w="993"/><text x="48.2251%" y="815.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (993 samples, 0.87%)</title><rect x="47.9751%" y="789" width="0.8718%" height="15" fill="rgb(245,147,4)" fg:x="54646" fg:w="993"/><text x="48.2251%" y="799.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="48.9197%" y="805" width="0.0114%" height="15" fill="rgb(242,201,35)" fg:x="55722" fg:w="13"/><text x="49.1697%" y="815.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (246 samples, 0.22%)</title><rect x="48.9197%" y="821" width="0.2160%" height="15" fill="rgb(218,181,1)" fg:x="55722" fg:w="246"/><text x="49.1697%" y="831.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (233 samples, 0.20%)</title><rect x="48.9311%" y="805" width="0.2046%" height="15" fill="rgb(222,6,29)" fg:x="55735" fg:w="233"/><text x="49.1811%" y="815.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (233 samples, 0.20%)</title><rect x="48.9311%" y="789" width="0.2046%" height="15" fill="rgb(208,186,3)" fg:x="55735" fg:w="233"/><text x="49.1811%" y="799.50"></text></g><g><title>core::ptr::read (233 samples, 0.20%)</title><rect x="48.9311%" y="773" width="0.2046%" height="15" fill="rgb(216,36,26)" fg:x="55735" fg:w="233"/><text x="49.1811%" y="783.50"></text></g><g><title>[libc-2.31.so] (233 samples, 0.20%)</title><rect x="48.9311%" y="757" width="0.2046%" height="15" fill="rgb(248,201,23)" fg:x="55735" fg:w="233"/><text x="49.1811%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (161 samples, 0.14%)</title><rect x="49.1366%" y="693" width="0.1413%" height="15" fill="rgb(251,170,31)" fg:x="55969" fg:w="161"/><text x="49.3866%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (161 samples, 0.14%)</title><rect x="49.1366%" y="677" width="0.1413%" height="15" fill="rgb(207,110,25)" fg:x="55969" fg:w="161"/><text x="49.3866%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (161 samples, 0.14%)</title><rect x="49.1366%" y="661" width="0.1413%" height="15" fill="rgb(250,54,15)" fg:x="55969" fg:w="161"/><text x="49.3866%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (161 samples, 0.14%)</title><rect x="49.1366%" y="645" width="0.1413%" height="15" fill="rgb(227,68,33)" fg:x="55969" fg:w="161"/><text x="49.3866%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (161 samples, 0.14%)</title><rect x="49.1366%" y="629" width="0.1413%" height="15" fill="rgb(238,34,41)" fg:x="55969" fg:w="161"/><text x="49.3866%" y="639.50"></text></g><g><title>alloc::alloc::alloc (161 samples, 0.14%)</title><rect x="49.1366%" y="613" width="0.1413%" height="15" fill="rgb(220,11,15)" fg:x="55969" fg:w="161"/><text x="49.3866%" y="623.50"></text></g><g><title>__rg_alloc (161 samples, 0.14%)</title><rect x="49.1366%" y="597" width="0.1413%" height="15" fill="rgb(246,111,35)" fg:x="55969" fg:w="161"/><text x="49.3866%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (161 samples, 0.14%)</title><rect x="49.1366%" y="581" width="0.1413%" height="15" fill="rgb(209,88,53)" fg:x="55969" fg:w="161"/><text x="49.3866%" y="591.50"></text></g><g><title>sn_rust_alloc (154 samples, 0.14%)</title><rect x="49.1427%" y="565" width="0.1352%" height="15" fill="rgb(231,185,47)" fg:x="55976" fg:w="154"/><text x="49.3927%" y="575.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (172 samples, 0.15%)</title><rect x="49.1366%" y="821" width="0.1510%" height="15" fill="rgb(233,154,1)" fg:x="55969" fg:w="172"/><text x="49.3866%" y="831.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (172 samples, 0.15%)</title><rect x="49.1366%" y="805" width="0.1510%" height="15" fill="rgb(225,15,46)" fg:x="55969" fg:w="172"/><text x="49.3866%" y="815.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (172 samples, 0.15%)</title><rect x="49.1366%" y="789" width="0.1510%" height="15" fill="rgb(211,135,41)" fg:x="55969" fg:w="172"/><text x="49.3866%" y="799.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (172 samples, 0.15%)</title><rect x="49.1366%" y="773" width="0.1510%" height="15" fill="rgb(208,54,0)" fg:x="55969" fg:w="172"/><text x="49.3866%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (172 samples, 0.15%)</title><rect x="49.1366%" y="757" width="0.1510%" height="15" fill="rgb(244,136,14)" fg:x="55969" fg:w="172"/><text x="49.3866%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (172 samples, 0.15%)</title><rect x="49.1366%" y="741" width="0.1510%" height="15" fill="rgb(241,56,14)" fg:x="55969" fg:w="172"/><text x="49.3866%" y="751.50"></text></g><g><title>alloc::slice::hack::to_vec (172 samples, 0.15%)</title><rect x="49.1366%" y="725" width="0.1510%" height="15" fill="rgb(205,80,24)" fg:x="55969" fg:w="172"/><text x="49.3866%" y="735.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (172 samples, 0.15%)</title><rect x="49.1366%" y="709" width="0.1510%" height="15" fill="rgb(220,57,4)" fg:x="55969" fg:w="172"/><text x="49.3866%" y="719.50"></text></g><g><title>[libc-2.31.so] (499 samples, 0.44%)</title><rect x="49.2876%" y="821" width="0.4381%" height="15" fill="rgb(226,193,50)" fg:x="56141" fg:w="499"/><text x="49.5376%" y="831.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,113 samples, 1.86%)</title><rect x="47.9057%" y="853" width="1.8551%" height="15" fill="rgb(231,168,22)" fg:x="54567" fg:w="2113"/><text x="48.1557%" y="863.50">&lt;..</text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (1,041 samples, 0.91%)</title><rect x="48.8468%" y="837" width="0.9139%" height="15" fill="rgb(254,215,14)" fg:x="55639" fg:w="1041"/><text x="49.0968%" y="847.50"></text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (23 samples, 0.02%)</title><rect x="49.7406%" y="821" width="0.0202%" height="15" fill="rgb(211,115,16)" fg:x="56657" fg:w="23"/><text x="49.9906%" y="831.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (23 samples, 0.02%)</title><rect x="49.7406%" y="805" width="0.0202%" height="15" fill="rgb(236,210,16)" fg:x="56657" fg:w="23"/><text x="49.9906%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (23 samples, 0.02%)</title><rect x="49.7406%" y="789" width="0.0202%" height="15" fill="rgb(221,94,12)" fg:x="56657" fg:w="23"/><text x="49.9906%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (12 samples, 0.01%)</title><rect x="49.7502%" y="773" width="0.0105%" height="15" fill="rgb(235,218,49)" fg:x="56668" fg:w="12"/><text x="50.0002%" y="783.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (10,959 samples, 9.62%)</title><rect x="40.1413%" y="1045" width="9.6212%" height="15" fill="rgb(217,114,14)" fg:x="45723" fg:w="10959"/><text x="40.3913%" y="1055.50">async_task::ra..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (10,956 samples, 9.62%)</title><rect x="40.1440%" y="1029" width="9.6185%" height="15" fill="rgb(216,145,22)" fg:x="45726" fg:w="10956"/><text x="40.3940%" y="1039.50">&lt;core::pin::Pi..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,956 samples, 9.62%)</title><rect x="40.1440%" y="1013" width="9.6185%" height="15" fill="rgb(217,112,39)" fg:x="45726" fg:w="10956"/><text x="40.3940%" y="1023.50">&lt;core::future:..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (10,956 samples, 9.62%)</title><rect x="40.1440%" y="997" width="9.6185%" height="15" fill="rgb(225,85,32)" fg:x="45726" fg:w="10956"/><text x="40.3940%" y="1007.50">async_executor..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (10,956 samples, 9.62%)</title><rect x="40.1440%" y="981" width="9.6185%" height="15" fill="rgb(245,209,47)" fg:x="45726" fg:w="10956"/><text x="40.3940%" y="991.50">&lt;async_std::ta..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (10,956 samples, 9.62%)</title><rect x="40.1440%" y="965" width="9.6185%" height="15" fill="rgb(218,220,15)" fg:x="45726" fg:w="10956"/><text x="40.3940%" y="975.50">async_std::tas..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (10,956 samples, 9.62%)</title><rect x="40.1440%" y="949" width="9.6185%" height="15" fill="rgb(222,202,31)" fg:x="45726" fg:w="10956"/><text x="40.3940%" y="959.50">std::thread::l..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (10,956 samples, 9.62%)</title><rect x="40.1440%" y="933" width="9.6185%" height="15" fill="rgb(243,203,4)" fg:x="45726" fg:w="10956"/><text x="40.3940%" y="943.50">std::thread::l..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (10,956 samples, 9.62%)</title><rect x="40.1440%" y="917" width="9.6185%" height="15" fill="rgb(237,92,17)" fg:x="45726" fg:w="10956"/><text x="40.3940%" y="927.50">async_std::tas..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (10,956 samples, 9.62%)</title><rect x="40.1440%" y="901" width="9.6185%" height="15" fill="rgb(231,119,7)" fg:x="45726" fg:w="10956"/><text x="40.3940%" y="911.50">&lt;async_std::ta..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,956 samples, 9.62%)</title><rect x="40.1440%" y="885" width="9.6185%" height="15" fill="rgb(237,82,41)" fg:x="45726" fg:w="10956"/><text x="40.3940%" y="895.50">&lt;core::future:..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (2,115 samples, 1.86%)</title><rect x="47.9057%" y="869" width="1.8568%" height="15" fill="rgb(226,81,48)" fg:x="54567" fg:w="2115"/><text x="48.1557%" y="879.50">t..</text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (15 samples, 0.01%)</title><rect x="49.7660%" y="1045" width="0.0132%" height="15" fill="rgb(234,70,51)" fg:x="56686" fg:w="15"/><text x="50.0160%" y="1055.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (12 samples, 0.01%)</title><rect x="49.7792%" y="1045" width="0.0105%" height="15" fill="rgb(251,86,4)" fg:x="56701" fg:w="12"/><text x="50.0292%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (72 samples, 0.06%)</title><rect x="49.7950%" y="1045" width="0.0632%" height="15" fill="rgb(244,144,28)" fg:x="56719" fg:w="72"/><text x="50.0450%" y="1055.50"></text></g><g><title>core::str::converts::from_utf8 (111 samples, 0.10%)</title><rect x="49.8802%" y="1045" width="0.0974%" height="15" fill="rgb(232,161,39)" fg:x="56816" fg:w="111"/><text x="50.1302%" y="1055.50"></text></g><g><title>event_listener::Event::notify (24 samples, 0.02%)</title><rect x="49.9776%" y="1045" width="0.0211%" height="15" fill="rgb(247,34,51)" fg:x="56927" fg:w="24"/><text x="50.2276%" y="1055.50"></text></g><g><title>event_listener::full_fence (14 samples, 0.01%)</title><rect x="49.9864%" y="1029" width="0.0123%" height="15" fill="rgb(225,132,2)" fg:x="56937" fg:w="14"/><text x="50.2364%" y="1039.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (32 samples, 0.03%)</title><rect x="49.9987%" y="1045" width="0.0281%" height="15" fill="rgb(209,159,44)" fg:x="56951" fg:w="32"/><text x="50.2487%" y="1055.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (58 samples, 0.05%)</title><rect x="50.0268%" y="1045" width="0.0509%" height="15" fill="rgb(251,214,1)" fg:x="56983" fg:w="58"/><text x="50.2768%" y="1055.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (17 samples, 0.01%)</title><rect x="50.0865%" y="1045" width="0.0149%" height="15" fill="rgb(247,84,47)" fg:x="57051" fg:w="17"/><text x="50.3365%" y="1055.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (18 samples, 0.02%)</title><rect x="50.1014%" y="1045" width="0.0158%" height="15" fill="rgb(240,111,43)" fg:x="57068" fg:w="18"/><text x="50.3514%" y="1055.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::get_mut (15 samples, 0.01%)</title><rect x="50.1172%" y="1045" width="0.0132%" height="15" fill="rgb(215,214,35)" fg:x="57086" fg:w="15"/><text x="50.3672%" y="1055.50"></text></g><g><title>parking::Inner::park (20 samples, 0.02%)</title><rect x="50.1304%" y="1045" width="0.0176%" height="15" fill="rgb(248,207,23)" fg:x="57101" fg:w="20"/><text x="50.3804%" y="1055.50"></text></g><g><title>polling::epoll::Poller::wait (17 samples, 0.01%)</title><rect x="50.1532%" y="1045" width="0.0149%" height="15" fill="rgb(214,186,4)" fg:x="57127" fg:w="17"/><text x="50.4032%" y="1055.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (91 samples, 0.08%)</title><rect x="50.2998%" y="1029" width="0.0799%" height="15" fill="rgb(220,133,22)" fg:x="57294" fg:w="91"/><text x="50.5498%" y="1039.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (91 samples, 0.08%)</title><rect x="50.2998%" y="1013" width="0.0799%" height="15" fill="rgb(239,134,19)" fg:x="57294" fg:w="91"/><text x="50.5498%" y="1023.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (91 samples, 0.08%)</title><rect x="50.2998%" y="997" width="0.0799%" height="15" fill="rgb(250,140,9)" fg:x="57294" fg:w="91"/><text x="50.5498%" y="1007.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (91 samples, 0.08%)</title><rect x="50.2998%" y="981" width="0.0799%" height="15" fill="rgb(225,59,14)" fg:x="57294" fg:w="91"/><text x="50.5498%" y="991.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (91 samples, 0.08%)</title><rect x="50.2998%" y="965" width="0.0799%" height="15" fill="rgb(214,152,51)" fg:x="57294" fg:w="91"/><text x="50.5498%" y="975.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (91 samples, 0.08%)</title><rect x="50.2998%" y="949" width="0.0799%" height="15" fill="rgb(251,227,43)" fg:x="57294" fg:w="91"/><text x="50.5498%" y="959.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (91 samples, 0.08%)</title><rect x="50.2998%" y="933" width="0.0799%" height="15" fill="rgb(241,96,17)" fg:x="57294" fg:w="91"/><text x="50.5498%" y="943.50"></text></g><g><title>rmp::encode::str::write_str (304 samples, 0.27%)</title><rect x="50.1681%" y="1045" width="0.2669%" height="15" fill="rgb(234,198,43)" fg:x="57144" fg:w="304"/><text x="50.4181%" y="1055.50"></text></g><g><title>rmp::encode::str::write_str_len (63 samples, 0.06%)</title><rect x="50.3797%" y="1029" width="0.0553%" height="15" fill="rgb(220,108,29)" fg:x="57385" fg:w="63"/><text x="50.6297%" y="1039.50"></text></g><g><title>rmp::encode::uint::write_uint (23 samples, 0.02%)</title><rect x="50.4350%" y="1045" width="0.0202%" height="15" fill="rgb(226,163,33)" fg:x="57448" fg:w="23"/><text x="50.6850%" y="1055.50"></text></g><g><title>rmp::encode::write_array_len (22 samples, 0.02%)</title><rect x="50.4552%" y="1045" width="0.0193%" height="15" fill="rgb(205,194,45)" fg:x="57471" fg:w="22"/><text x="50.7052%" y="1055.50"></text></g><g><title>rmp::encode::write_marker (103 samples, 0.09%)</title><rect x="50.4815%" y="1045" width="0.0904%" height="15" fill="rgb(206,143,44)" fg:x="57501" fg:w="103"/><text x="50.7315%" y="1055.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (75 samples, 0.07%)</title><rect x="50.5720%" y="1045" width="0.0658%" height="15" fill="rgb(236,136,36)" fg:x="57604" fg:w="75"/><text x="50.8220%" y="1055.50"></text></g><g><title>sn_rust_alloc (53 samples, 0.05%)</title><rect x="50.6378%" y="1045" width="0.0465%" height="15" fill="rgb(249,172,42)" fg:x="57679" fg:w="53"/><text x="50.8878%" y="1055.50"></text></g><g><title>sn_rust_dealloc (24 samples, 0.02%)</title><rect x="50.6843%" y="1045" width="0.0211%" height="15" fill="rgb(216,139,23)" fg:x="57732" fg:w="24"/><text x="50.9343%" y="1055.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (18 samples, 0.02%)</title><rect x="50.7151%" y="1045" width="0.0158%" height="15" fill="rgb(207,166,20)" fg:x="57767" fg:w="18"/><text x="50.9651%" y="1055.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (32 samples, 0.03%)</title><rect x="50.7405%" y="1045" width="0.0281%" height="15" fill="rgb(210,209,22)" fg:x="57796" fg:w="32"/><text x="50.9905%" y="1055.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (45 samples, 0.04%)</title><rect x="50.8125%" y="565" width="0.0395%" height="15" fill="rgb(232,118,20)" fg:x="57878" fg:w="45"/><text x="51.0625%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (45 samples, 0.04%)</title><rect x="50.8125%" y="549" width="0.0395%" height="15" fill="rgb(238,113,42)" fg:x="57878" fg:w="45"/><text x="51.0625%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (39 samples, 0.03%)</title><rect x="50.8178%" y="533" width="0.0342%" height="15" fill="rgb(231,42,5)" fg:x="57884" fg:w="39"/><text x="51.0678%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (39 samples, 0.03%)</title><rect x="50.8178%" y="517" width="0.0342%" height="15" fill="rgb(243,166,24)" fg:x="57884" fg:w="39"/><text x="51.0678%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (39 samples, 0.03%)</title><rect x="50.8178%" y="501" width="0.0342%" height="15" fill="rgb(237,226,12)" fg:x="57884" fg:w="39"/><text x="51.0678%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (39 samples, 0.03%)</title><rect x="50.8178%" y="485" width="0.0342%" height="15" fill="rgb(229,133,24)" fg:x="57884" fg:w="39"/><text x="51.0678%" y="495.50"></text></g><g><title>alloc::alloc::alloc (39 samples, 0.03%)</title><rect x="50.8178%" y="469" width="0.0342%" height="15" fill="rgb(238,33,43)" fg:x="57884" fg:w="39"/><text x="51.0678%" y="479.50"></text></g><g><title>__rg_alloc (39 samples, 0.03%)</title><rect x="50.8178%" y="453" width="0.0342%" height="15" fill="rgb(227,59,38)" fg:x="57884" fg:w="39"/><text x="51.0678%" y="463.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (39 samples, 0.03%)</title><rect x="50.8178%" y="437" width="0.0342%" height="15" fill="rgb(230,97,0)" fg:x="57884" fg:w="39"/><text x="51.0678%" y="447.50"></text></g><g><title>sn_rust_alloc (37 samples, 0.03%)</title><rect x="50.8195%" y="421" width="0.0325%" height="15" fill="rgb(250,173,50)" fg:x="57886" fg:w="37"/><text x="51.0695%" y="431.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_map::{{closure}} (15 samples, 0.01%)</title><rect x="50.9231%" y="485" width="0.0132%" height="15" fill="rgb(240,15,50)" fg:x="58004" fg:w="15"/><text x="51.1731%" y="495.50"></text></g><g><title>rmp::encode::write_map_len (15 samples, 0.01%)</title><rect x="50.9231%" y="469" width="0.0132%" height="15" fill="rgb(221,93,22)" fg:x="58004" fg:w="15"/><text x="51.1731%" y="479.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_map (16 samples, 0.01%)</title><rect x="50.9231%" y="517" width="0.0140%" height="15" fill="rgb(245,180,53)" fg:x="58004" fg:w="16"/><text x="51.1731%" y="527.50"></text></g><g><title>rmp_serde::encode::Serializer&lt;W,C&gt;::maybe_unknown_len_compound (16 samples, 0.01%)</title><rect x="50.9231%" y="501" width="0.0140%" height="15" fill="rgb(231,88,51)" fg:x="58004" fg:w="16"/><text x="51.1731%" y="511.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (102 samples, 0.09%)</title><rect x="50.9372%" y="517" width="0.0895%" height="15" fill="rgb(240,58,21)" fg:x="58020" fg:w="102"/><text x="51.1872%" y="527.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (39 samples, 0.03%)</title><rect x="51.0267%" y="517" width="0.0342%" height="15" fill="rgb(237,21,10)" fg:x="58122" fg:w="39"/><text x="51.2767%" y="527.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (37 samples, 0.03%)</title><rect x="51.0610%" y="517" width="0.0325%" height="15" fill="rgb(218,43,11)" fg:x="58161" fg:w="37"/><text x="51.3110%" y="527.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as abi_stable::traits::IntoReprRust&gt;::into_rust (53 samples, 0.05%)</title><rect x="51.1338%" y="501" width="0.0465%" height="15" fill="rgb(218,221,29)" fg:x="58244" fg:w="53"/><text x="51.3838%" y="511.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (53 samples, 0.05%)</title><rect x="51.1338%" y="485" width="0.0465%" height="15" fill="rgb(214,118,42)" fg:x="58244" fg:w="53"/><text x="51.3838%" y="495.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (53 samples, 0.05%)</title><rect x="51.1338%" y="469" width="0.0465%" height="15" fill="rgb(251,200,26)" fg:x="58244" fg:w="53"/><text x="51.3838%" y="479.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::next_n (19 samples, 0.02%)</title><rect x="51.3718%" y="389" width="0.0167%" height="15" fill="rgb(237,101,39)" fg:x="58515" fg:w="19"/><text x="51.6218%" y="399.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (13 samples, 0.01%)</title><rect x="51.3770%" y="373" width="0.0114%" height="15" fill="rgb(251,117,11)" fg:x="58521" fg:w="13"/><text x="51.6270%" y="383.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (37 samples, 0.03%)</title><rect x="51.3884%" y="389" width="0.0325%" height="15" fill="rgb(216,223,23)" fg:x="58534" fg:w="37"/><text x="51.6384%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (163 samples, 0.14%)</title><rect x="51.2848%" y="421" width="0.1431%" height="15" fill="rgb(251,54,12)" fg:x="58416" fg:w="163"/><text x="51.5348%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (118 samples, 0.10%)</title><rect x="51.3243%" y="405" width="0.1036%" height="15" fill="rgb(254,176,54)" fg:x="58461" fg:w="118"/><text x="51.5743%" y="415.50"></text></g><g><title>&lt;halfbrown::iter::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (296 samples, 0.26%)</title><rect x="51.2172%" y="453" width="0.2599%" height="15" fill="rgb(210,32,8)" fg:x="58339" fg:w="296"/><text x="51.4672%" y="463.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (227 samples, 0.20%)</title><rect x="51.2778%" y="437" width="0.1993%" height="15" fill="rgb(235,52,38)" fg:x="58408" fg:w="227"/><text x="51.5278%" y="447.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::as_ref (56 samples, 0.05%)</title><rect x="51.4279%" y="421" width="0.0492%" height="15" fill="rgb(231,4,44)" fg:x="58579" fg:w="56"/><text x="51.6779%" y="431.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::as_ptr (56 samples, 0.05%)</title><rect x="51.4279%" y="405" width="0.0492%" height="15" fill="rgb(249,2,32)" fg:x="58579" fg:w="56"/><text x="51.6779%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (56 samples, 0.05%)</title><rect x="51.4279%" y="389" width="0.0492%" height="15" fill="rgb(224,65,26)" fg:x="58579" fg:w="56"/><text x="51.6779%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (56 samples, 0.05%)</title><rect x="51.4279%" y="373" width="0.0492%" height="15" fill="rgb(250,73,40)" fg:x="58579" fg:w="56"/><text x="51.6779%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,218 samples, 1.07%)</title><rect x="51.2172%" y="469" width="1.0693%" height="15" fill="rgb(253,177,16)" fg:x="58339" fg:w="1218"/><text x="51.4672%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (922 samples, 0.81%)</title><rect x="51.4771%" y="453" width="0.8094%" height="15" fill="rgb(217,32,34)" fg:x="58635" fg:w="922"/><text x="51.7271%" y="463.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (922 samples, 0.81%)</title><rect x="51.4771%" y="437" width="0.8094%" height="15" fill="rgb(212,7,10)" fg:x="58635" fg:w="922"/><text x="51.7271%" y="447.50"></text></g><g><title>core::ops::function::FnMut::call_mut (922 samples, 0.81%)</title><rect x="51.4771%" y="421" width="0.8094%" height="15" fill="rgb(245,89,8)" fg:x="58635" fg:w="922"/><text x="51.7271%" y="431.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::map_iter_ref (922 samples, 0.81%)</title><rect x="51.4771%" y="405" width="0.8094%" height="15" fill="rgb(237,16,53)" fg:x="58635" fg:w="922"/><text x="51.7271%" y="415.50"></text></g><g><title>abi_stable::std_types::map::map_key::MapKey&lt;K&gt;::as_ref (922 samples, 0.81%)</title><rect x="51.4771%" y="389" width="0.8094%" height="15" fill="rgb(250,204,30)" fg:x="58635" fg:w="922"/><text x="51.7271%" y="399.50"></text></g><g><title>abi_stable::erased_types::iterator::next (1,298 samples, 1.14%)</title><rect x="51.1856%" y="501" width="1.1395%" height="15" fill="rgb(208,77,27)" fg:x="58303" fg:w="1298"/><text x="51.4356%" y="511.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (1,269 samples, 1.11%)</title><rect x="51.2111%" y="485" width="1.1141%" height="15" fill="rgb(250,204,28)" fg:x="58332" fg:w="1269"/><text x="51.4611%" y="495.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl abi_stable::traits::IntoReprC for core::option::Option&lt;T&gt;&gt;::into_c (44 samples, 0.04%)</title><rect x="52.2866%" y="469" width="0.0386%" height="15" fill="rgb(244,63,21)" fg:x="59557" fg:w="44"/><text x="52.5366%" y="479.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (44 samples, 0.04%)</title><rect x="52.2866%" y="453" width="0.0386%" height="15" fill="rgb(236,85,44)" fg:x="59557" fg:w="44"/><text x="52.5366%" y="463.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as core::convert::From&lt;core::option::Option&lt;T&gt;&gt;&gt;::from (44 samples, 0.04%)</title><rect x="52.2866%" y="437" width="0.0386%" height="15" fill="rgb(215,98,4)" fg:x="59557" fg:w="44"/><text x="52.5366%" y="447.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (47 samples, 0.04%)</title><rect x="52.3287%" y="469" width="0.0413%" height="15" fill="rgb(235,38,11)" fg:x="59605" fg:w="47"/><text x="52.5787%" y="479.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (47 samples, 0.04%)</title><rect x="52.3287%" y="453" width="0.0413%" height="15" fill="rgb(254,186,25)" fg:x="59605" fg:w="47"/><text x="52.5787%" y="463.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (1,463 samples, 1.28%)</title><rect x="51.0935%" y="517" width="1.2844%" height="15" fill="rgb(225,55,31)" fg:x="58198" fg:w="1463"/><text x="51.3435%" y="527.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (60 samples, 0.05%)</title><rect x="52.3252%" y="501" width="0.0527%" height="15" fill="rgb(211,15,21)" fg:x="59601" fg:w="60"/><text x="52.5752%" y="511.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (60 samples, 0.05%)</title><rect x="52.3252%" y="485" width="0.0527%" height="15" fill="rgb(215,187,41)" fg:x="59601" fg:w="60"/><text x="52.5752%" y="495.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::len (98 samples, 0.09%)</title><rect x="52.3779%" y="517" width="0.0860%" height="15" fill="rgb(248,69,32)" fg:x="59661" fg:w="98"/><text x="52.6279%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::len (92 samples, 0.08%)</title><rect x="52.3831%" y="501" width="0.0808%" height="15" fill="rgb(252,102,52)" fg:x="59667" fg:w="92"/><text x="52.6331%" y="511.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (92 samples, 0.08%)</title><rect x="52.3831%" y="485" width="0.0808%" height="15" fill="rgb(253,140,32)" fg:x="59667" fg:w="92"/><text x="52.6331%" y="495.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (88 samples, 0.08%)</title><rect x="52.3866%" y="469" width="0.0773%" height="15" fill="rgb(216,56,42)" fg:x="59671" fg:w="88"/><text x="52.6366%" y="479.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::len::{{closure}} (88 samples, 0.08%)</title><rect x="52.3866%" y="453" width="0.0773%" height="15" fill="rgb(216,184,14)" fg:x="59671" fg:w="88"/><text x="52.6366%" y="463.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::len (88 samples, 0.08%)</title><rect x="52.3866%" y="437" width="0.0773%" height="15" fill="rgb(237,187,27)" fg:x="59671" fg:w="88"/><text x="52.6366%" y="447.50"></text></g><g><title>sn_rust_dealloc (54 samples, 0.05%)</title><rect x="52.4788%" y="421" width="0.0474%" height="15" fill="rgb(219,65,3)" fg:x="59776" fg:w="54"/><text x="52.7288%" y="431.50"></text></g><g><title>&lt;tremor_runtime::codec::msgpack::MsgPack as tremor_runtime::codec::Codec&gt;::encode (1,984 samples, 1.74%)</title><rect x="50.7862%" y="597" width="1.7418%" height="15" fill="rgb(245,83,25)" fg:x="57848" fg:w="1984"/><text x="51.0362%" y="607.50"></text></g><g><title>rmp_serde::encode::to_vec (1,966 samples, 1.73%)</title><rect x="50.8020%" y="581" width="1.7260%" height="15" fill="rgb(214,205,45)" fg:x="57866" fg:w="1966"/><text x="51.0520%" y="591.50"></text></g><g><title>rmp_serde::encode::write (1,909 samples, 1.68%)</title><rect x="50.8520%" y="565" width="1.6760%" height="15" fill="rgb(241,20,18)" fg:x="57923" fg:w="1909"/><text x="51.1020%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1,905 samples, 1.67%)</title><rect x="50.8555%" y="549" width="1.6724%" height="15" fill="rgb(232,163,23)" fg:x="57927" fg:w="1905"/><text x="51.1055%" y="559.50"></text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (1,905 samples, 1.67%)</title><rect x="50.8555%" y="533" width="1.6724%" height="15" fill="rgb(214,5,46)" fg:x="57927" fg:w="1905"/><text x="51.1055%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt; (73 samples, 0.06%)</title><rect x="52.4639%" y="517" width="0.0641%" height="15" fill="rgb(229,78,17)" fg:x="59759" fg:w="73"/><text x="52.7139%" y="527.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (73 samples, 0.06%)</title><rect x="52.4639%" y="501" width="0.0641%" height="15" fill="rgb(248,89,10)" fg:x="59759" fg:w="73"/><text x="52.7139%" y="511.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (73 samples, 0.06%)</title><rect x="52.4639%" y="485" width="0.0641%" height="15" fill="rgb(248,54,15)" fg:x="59759" fg:w="73"/><text x="52.7139%" y="495.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (73 samples, 0.06%)</title><rect x="52.4639%" y="469" width="0.0641%" height="15" fill="rgb(223,116,6)" fg:x="59759" fg:w="73"/><text x="52.7139%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (73 samples, 0.06%)</title><rect x="52.4639%" y="453" width="0.0641%" height="15" fill="rgb(205,125,38)" fg:x="59759" fg:w="73"/><text x="52.7139%" y="463.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (73 samples, 0.06%)</title><rect x="52.4639%" y="437" width="0.0641%" height="15" fill="rgb(251,78,38)" fg:x="59759" fg:w="73"/><text x="52.7139%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (73 samples, 0.06%)</title><rect x="52.6210%" y="325" width="0.0641%" height="15" fill="rgb(253,78,28)" fg:x="59938" fg:w="73"/><text x="52.8710%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (73 samples, 0.06%)</title><rect x="52.6210%" y="309" width="0.0641%" height="15" fill="rgb(209,120,3)" fg:x="59938" fg:w="73"/><text x="52.8710%" y="319.50"></text></g><g><title>__rg_dealloc (73 samples, 0.06%)</title><rect x="52.6210%" y="293" width="0.0641%" height="15" fill="rgb(238,229,9)" fg:x="59938" fg:w="73"/><text x="52.8710%" y="303.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (73 samples, 0.06%)</title><rect x="52.6210%" y="277" width="0.0641%" height="15" fill="rgb(253,159,18)" fg:x="59938" fg:w="73"/><text x="52.8710%" y="287.50"></text></g><g><title>sn_rust_dealloc (63 samples, 0.06%)</title><rect x="52.6298%" y="261" width="0.0553%" height="15" fill="rgb(244,42,34)" fg:x="59948" fg:w="63"/><text x="52.8798%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (79 samples, 0.07%)</title><rect x="52.6184%" y="421" width="0.0694%" height="15" fill="rgb(224,8,7)" fg:x="59935" fg:w="79"/><text x="52.8684%" y="431.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (79 samples, 0.07%)</title><rect x="52.6184%" y="405" width="0.0694%" height="15" fill="rgb(210,201,45)" fg:x="59935" fg:w="79"/><text x="52.8684%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (76 samples, 0.07%)</title><rect x="52.6210%" y="389" width="0.0667%" height="15" fill="rgb(252,185,21)" fg:x="59938" fg:w="76"/><text x="52.8710%" y="399.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (76 samples, 0.07%)</title><rect x="52.6210%" y="373" width="0.0667%" height="15" fill="rgb(223,131,1)" fg:x="59938" fg:w="76"/><text x="52.8710%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (76 samples, 0.07%)</title><rect x="52.6210%" y="357" width="0.0667%" height="15" fill="rgb(245,141,16)" fg:x="59938" fg:w="76"/><text x="52.8710%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (76 samples, 0.07%)</title><rect x="52.6210%" y="341" width="0.0667%" height="15" fill="rgb(229,55,45)" fg:x="59938" fg:w="76"/><text x="52.8710%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (96 samples, 0.08%)</title><rect x="52.6061%" y="469" width="0.0843%" height="15" fill="rgb(208,92,15)" fg:x="59921" fg:w="96"/><text x="52.8561%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (92 samples, 0.08%)</title><rect x="52.6096%" y="453" width="0.0808%" height="15" fill="rgb(234,185,47)" fg:x="59925" fg:w="92"/><text x="52.8596%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (92 samples, 0.08%)</title><rect x="52.6096%" y="437" width="0.0808%" height="15" fill="rgb(253,104,50)" fg:x="59925" fg:w="92"/><text x="52.8596%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (116 samples, 0.10%)</title><rect x="52.5912%" y="485" width="0.1018%" height="15" fill="rgb(205,70,7)" fg:x="59904" fg:w="116"/><text x="52.8412%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (30 samples, 0.03%)</title><rect x="52.6930%" y="485" width="0.0263%" height="15" fill="rgb(240,178,43)" fg:x="60020" fg:w="30"/><text x="52.9430%" y="495.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (18 samples, 0.02%)</title><rect x="52.7036%" y="469" width="0.0158%" height="15" fill="rgb(214,112,2)" fg:x="60032" fg:w="18"/><text x="52.9536%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (18 samples, 0.02%)</title><rect x="52.7036%" y="453" width="0.0158%" height="15" fill="rgb(206,46,17)" fg:x="60032" fg:w="18"/><text x="52.9536%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (90 samples, 0.08%)</title><rect x="52.7264%" y="421" width="0.0790%" height="15" fill="rgb(225,220,16)" fg:x="60058" fg:w="90"/><text x="52.9764%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (90 samples, 0.08%)</title><rect x="52.7264%" y="405" width="0.0790%" height="15" fill="rgb(238,65,40)" fg:x="60058" fg:w="90"/><text x="52.9764%" y="415.50"></text></g><g><title>alloc::alloc::alloc (86 samples, 0.08%)</title><rect x="52.7299%" y="389" width="0.0755%" height="15" fill="rgb(230,151,21)" fg:x="60062" fg:w="86"/><text x="52.9799%" y="399.50"></text></g><g><title>__rg_alloc (86 samples, 0.08%)</title><rect x="52.7299%" y="373" width="0.0755%" height="15" fill="rgb(218,58,49)" fg:x="60062" fg:w="86"/><text x="52.9799%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (86 samples, 0.08%)</title><rect x="52.7299%" y="357" width="0.0755%" height="15" fill="rgb(219,179,14)" fg:x="60062" fg:w="86"/><text x="52.9799%" y="367.50"></text></g><g><title>sn_rust_alloc (83 samples, 0.07%)</title><rect x="52.7325%" y="341" width="0.0729%" height="15" fill="rgb(223,72,1)" fg:x="60065" fg:w="83"/><text x="52.9825%" y="351.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (2,309 samples, 2.03%)</title><rect x="50.7862%" y="965" width="2.0271%" height="15" fill="rgb(238,126,10)" fg:x="57848" fg:w="2309"/><text x="51.0362%" y="975.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,309 samples, 2.03%)</title><rect x="50.7862%" y="949" width="2.0271%" height="15" fill="rgb(224,206,38)" fg:x="57848" fg:w="2309"/><text x="51.0362%" y="959.50">&lt;..</text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (2,309 samples, 2.03%)</title><rect x="50.7862%" y="933" width="2.0271%" height="15" fill="rgb(212,201,54)" fg:x="57848" fg:w="2309"/><text x="51.0362%" y="943.50">t..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,309 samples, 2.03%)</title><rect x="50.7862%" y="917" width="2.0271%" height="15" fill="rgb(218,154,48)" fg:x="57848" fg:w="2309"/><text x="51.0362%" y="927.50">&lt;..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,309 samples, 2.03%)</title><rect x="50.7862%" y="901" width="2.0271%" height="15" fill="rgb(232,93,24)" fg:x="57848" fg:w="2309"/><text x="51.0362%" y="911.50">&lt;..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (2,309 samples, 2.03%)</title><rect x="50.7862%" y="885" width="2.0271%" height="15" fill="rgb(245,30,21)" fg:x="57848" fg:w="2309"/><text x="51.0362%" y="895.50">&lt;..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (2,309 samples, 2.03%)</title><rect x="50.7862%" y="869" width="2.0271%" height="15" fill="rgb(242,148,29)" fg:x="57848" fg:w="2309"/><text x="51.0362%" y="879.50">&lt;..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (2,309 samples, 2.03%)</title><rect x="50.7862%" y="853" width="2.0271%" height="15" fill="rgb(244,153,54)" fg:x="57848" fg:w="2309"/><text x="51.0362%" y="863.50">a..</text></g><g><title>std::panic::catch_unwind (2,309 samples, 2.03%)</title><rect x="50.7862%" y="837" width="2.0271%" height="15" fill="rgb(252,87,22)" fg:x="57848" fg:w="2309"/><text x="51.0362%" y="847.50">s..</text></g><g><title>std::panicking::try (2,309 samples, 2.03%)</title><rect x="50.7862%" y="821" width="2.0271%" height="15" fill="rgb(210,51,29)" fg:x="57848" fg:w="2309"/><text x="51.0362%" y="831.50">s..</text></g><g><title>std::panicking::try::do_call (2,309 samples, 2.03%)</title><rect x="50.7862%" y="805" width="2.0271%" height="15" fill="rgb(242,136,47)" fg:x="57848" fg:w="2309"/><text x="51.0362%" y="815.50">s..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2,309 samples, 2.03%)</title><rect x="50.7862%" y="789" width="2.0271%" height="15" fill="rgb(238,68,4)" fg:x="57848" fg:w="2309"/><text x="51.0362%" y="799.50">&lt;..</text></g><g><title>core::ops::function::FnOnce::call_once (2,309 samples, 2.03%)</title><rect x="50.7862%" y="773" width="2.0271%" height="15" fill="rgb(242,161,30)" fg:x="57848" fg:w="2309"/><text x="51.0362%" y="783.50">c..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (2,309 samples, 2.03%)</title><rect x="50.7862%" y="757" width="2.0271%" height="15" fill="rgb(218,58,44)" fg:x="57848" fg:w="2309"/><text x="51.0362%" y="767.50">a..</text></g><g><title>async_ffi::FfiContext::with_context (2,309 samples, 2.03%)</title><rect x="50.7862%" y="741" width="2.0271%" height="15" fill="rgb(252,125,32)" fg:x="57848" fg:w="2309"/><text x="51.0362%" y="751.50">a..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (2,309 samples, 2.03%)</title><rect x="50.7862%" y="725" width="2.0271%" height="15" fill="rgb(219,178,0)" fg:x="57848" fg:w="2309"/><text x="51.0362%" y="735.50">a..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,309 samples, 2.03%)</title><rect x="50.7862%" y="709" width="2.0271%" height="15" fill="rgb(213,152,7)" fg:x="57848" fg:w="2309"/><text x="51.0362%" y="719.50">&lt;..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (2,309 samples, 2.03%)</title><rect x="50.7862%" y="693" width="2.0271%" height="15" fill="rgb(249,109,34)" fg:x="57848" fg:w="2309"/><text x="51.0362%" y="703.50">&lt;..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (2,309 samples, 2.03%)</title><rect x="50.7862%" y="677" width="2.0271%" height="15" fill="rgb(232,96,21)" fg:x="57848" fg:w="2309"/><text x="51.0362%" y="687.50">t..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (2,309 samples, 2.03%)</title><rect x="50.7862%" y="661" width="2.0271%" height="15" fill="rgb(228,27,39)" fg:x="57848" fg:w="2309"/><text x="51.0362%" y="671.50">t..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (2,309 samples, 2.03%)</title><rect x="50.7862%" y="645" width="2.0271%" height="15" fill="rgb(211,182,52)" fg:x="57848" fg:w="2309"/><text x="51.0362%" y="655.50">t..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (2,309 samples, 2.03%)</title><rect x="50.7862%" y="629" width="2.0271%" height="15" fill="rgb(234,178,38)" fg:x="57848" fg:w="2309"/><text x="51.0362%" y="639.50">t..</text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (2,309 samples, 2.03%)</title><rect x="50.7862%" y="613" width="2.0271%" height="15" fill="rgb(221,111,3)" fg:x="57848" fg:w="2309"/><text x="51.0362%" y="623.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (325 samples, 0.29%)</title><rect x="52.5280%" y="597" width="0.2853%" height="15" fill="rgb(228,175,21)" fg:x="59832" fg:w="325"/><text x="52.7780%" y="607.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::iter::traits::collect::FromIterator&lt;T&gt; for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::from_iter (325 samples, 0.29%)</title><rect x="52.5280%" y="581" width="0.2853%" height="15" fill="rgb(228,174,43)" fg:x="59832" fg:w="325"/><text x="52.7780%" y="591.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (325 samples, 0.29%)</title><rect x="52.5280%" y="565" width="0.2853%" height="15" fill="rgb(211,191,0)" fg:x="59832" fg:w="325"/><text x="52.7780%" y="575.50"></text></g><g><title>core::ops::function::FnOnce::call_once (325 samples, 0.29%)</title><rect x="52.5280%" y="549" width="0.2853%" height="15" fill="rgb(253,117,3)" fg:x="59832" fg:w="325"/><text x="52.7780%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (325 samples, 0.29%)</title><rect x="52.5280%" y="533" width="0.2853%" height="15" fill="rgb(241,127,19)" fg:x="59832" fg:w="325"/><text x="52.7780%" y="543.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (325 samples, 0.29%)</title><rect x="52.5280%" y="517" width="0.2853%" height="15" fill="rgb(218,103,12)" fg:x="59832" fg:w="325"/><text x="52.7780%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (255 samples, 0.22%)</title><rect x="52.5894%" y="501" width="0.2239%" height="15" fill="rgb(236,214,43)" fg:x="59902" fg:w="255"/><text x="52.8394%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (107 samples, 0.09%)</title><rect x="52.7194%" y="485" width="0.0939%" height="15" fill="rgb(244,144,19)" fg:x="60050" fg:w="107"/><text x="52.9694%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (107 samples, 0.09%)</title><rect x="52.7194%" y="469" width="0.0939%" height="15" fill="rgb(246,188,10)" fg:x="60050" fg:w="107"/><text x="52.9694%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (105 samples, 0.09%)</title><rect x="52.7211%" y="453" width="0.0922%" height="15" fill="rgb(212,193,33)" fg:x="60052" fg:w="105"/><text x="52.9711%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (105 samples, 0.09%)</title><rect x="52.7211%" y="437" width="0.0922%" height="15" fill="rgb(241,51,29)" fg:x="60052" fg:w="105"/><text x="52.9711%" y="447.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::default::Default&gt;::default (143 samples, 0.13%)</title><rect x="52.9266%" y="837" width="0.1255%" height="15" fill="rgb(211,58,19)" fg:x="60286" fg:w="143"/><text x="53.1766%" y="847.50"></text></g><g><title>&lt;tremor_pipeline::event::Event as core::default::Default&gt;::default (223 samples, 0.20%)</title><rect x="52.9108%" y="853" width="0.1958%" height="15" fill="rgb(229,111,26)" fg:x="60268" fg:w="223"/><text x="53.1608%" y="863.50"></text></g><g><title>&lt;tremor_script::srs::EventPayload as core::default::Default&gt;::default (62 samples, 0.05%)</title><rect x="53.0521%" y="837" width="0.0544%" height="15" fill="rgb(213,115,40)" fg:x="60429" fg:w="62"/><text x="53.3021%" y="847.50"></text></g><g><title>sn_rust_dealloc (54 samples, 0.05%)</title><rect x="53.1390%" y="757" width="0.0474%" height="15" fill="rgb(209,56,44)" fg:x="60528" fg:w="54"/><text x="53.3890%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (83 samples, 0.07%)</title><rect x="53.1171%" y="837" width="0.0729%" height="15" fill="rgb(230,108,32)" fg:x="60503" fg:w="83"/><text x="53.3671%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (83 samples, 0.07%)</title><rect x="53.1171%" y="821" width="0.0729%" height="15" fill="rgb(216,165,31)" fg:x="60503" fg:w="83"/><text x="53.3671%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (68 samples, 0.06%)</title><rect x="53.1302%" y="805" width="0.0597%" height="15" fill="rgb(218,122,21)" fg:x="60518" fg:w="68"/><text x="53.3802%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (68 samples, 0.06%)</title><rect x="53.1302%" y="789" width="0.0597%" height="15" fill="rgb(223,224,47)" fg:x="60518" fg:w="68"/><text x="53.3802%" y="799.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (68 samples, 0.06%)</title><rect x="53.1302%" y="773" width="0.0597%" height="15" fill="rgb(238,102,44)" fg:x="60518" fg:w="68"/><text x="53.3802%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (99 samples, 0.09%)</title><rect x="53.1144%" y="853" width="0.0869%" height="15" fill="rgb(236,46,40)" fg:x="60500" fg:w="99"/><text x="53.3644%" y="863.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (453 samples, 0.40%)</title><rect x="52.8133%" y="869" width="0.3977%" height="15" fill="rgb(247,202,50)" fg:x="60157" fg:w="453"/><text x="53.0633%" y="879.50"></text></g><g><title>alloc::alloc::exchange_malloc (23 samples, 0.02%)</title><rect x="53.2312%" y="853" width="0.0202%" height="15" fill="rgb(209,99,20)" fg:x="60633" fg:w="23"/><text x="53.4812%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (23 samples, 0.02%)</title><rect x="53.2312%" y="837" width="0.0202%" height="15" fill="rgb(252,27,34)" fg:x="60633" fg:w="23"/><text x="53.4812%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (23 samples, 0.02%)</title><rect x="53.2312%" y="821" width="0.0202%" height="15" fill="rgb(215,206,23)" fg:x="60633" fg:w="23"/><text x="53.4812%" y="831.50"></text></g><g><title>alloc::alloc::alloc (23 samples, 0.02%)</title><rect x="53.2312%" y="805" width="0.0202%" height="15" fill="rgb(212,135,36)" fg:x="60633" fg:w="23"/><text x="53.4812%" y="815.50"></text></g><g><title>__rg_alloc (23 samples, 0.02%)</title><rect x="53.2312%" y="789" width="0.0202%" height="15" fill="rgb(240,189,1)" fg:x="60633" fg:w="23"/><text x="53.4812%" y="799.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (23 samples, 0.02%)</title><rect x="53.2312%" y="773" width="0.0202%" height="15" fill="rgb(242,56,20)" fg:x="60633" fg:w="23"/><text x="53.4812%" y="783.50"></text></g><g><title>sn_rust_alloc (19 samples, 0.02%)</title><rect x="53.2347%" y="757" width="0.0167%" height="15" fill="rgb(247,132,33)" fg:x="60637" fg:w="19"/><text x="53.4847%" y="767.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (508 samples, 0.45%)</title><rect x="52.8133%" y="949" width="0.4460%" height="15" fill="rgb(208,149,11)" fg:x="60157" fg:w="508"/><text x="53.0633%" y="959.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (508 samples, 0.45%)</title><rect x="52.8133%" y="933" width="0.4460%" height="15" fill="rgb(211,33,11)" fg:x="60157" fg:w="508"/><text x="53.0633%" y="943.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (508 samples, 0.45%)</title><rect x="52.8133%" y="917" width="0.4460%" height="15" fill="rgb(221,29,38)" fg:x="60157" fg:w="508"/><text x="53.0633%" y="927.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (508 samples, 0.45%)</title><rect x="52.8133%" y="901" width="0.4460%" height="15" fill="rgb(206,182,49)" fg:x="60157" fg:w="508"/><text x="53.0633%" y="911.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (508 samples, 0.45%)</title><rect x="52.8133%" y="885" width="0.4460%" height="15" fill="rgb(216,140,1)" fg:x="60157" fg:w="508"/><text x="53.0633%" y="895.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (55 samples, 0.05%)</title><rect x="53.2110%" y="869" width="0.0483%" height="15" fill="rgb(232,57,40)" fg:x="60610" fg:w="55"/><text x="53.4610%" y="879.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (509 samples, 0.45%)</title><rect x="52.8133%" y="965" width="0.4469%" height="15" fill="rgb(224,186,18)" fg:x="60157" fg:w="509"/><text x="53.0633%" y="975.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (84 samples, 0.07%)</title><rect x="53.3207%" y="837" width="0.0737%" height="15" fill="rgb(215,121,11)" fg:x="60735" fg:w="84"/><text x="53.5707%" y="847.50"></text></g><g><title>core::mem::replace (84 samples, 0.07%)</title><rect x="53.3207%" y="821" width="0.0737%" height="15" fill="rgb(245,147,10)" fg:x="60735" fg:w="84"/><text x="53.5707%" y="831.50"></text></g><g><title>core::ptr::read (84 samples, 0.07%)</title><rect x="53.3207%" y="805" width="0.0737%" height="15" fill="rgb(238,153,13)" fg:x="60735" fg:w="84"/><text x="53.5707%" y="815.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (128 samples, 0.11%)</title><rect x="53.2970%" y="853" width="0.1124%" height="15" fill="rgb(233,108,0)" fg:x="60708" fg:w="128"/><text x="53.5470%" y="863.50"></text></g><g><title>core::mem::drop (17 samples, 0.01%)</title><rect x="53.3945%" y="837" width="0.0149%" height="15" fill="rgb(212,157,17)" fg:x="60819" fg:w="17"/><text x="53.6445%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (17 samples, 0.01%)</title><rect x="53.3945%" y="821" width="0.0149%" height="15" fill="rgb(225,213,38)" fg:x="60819" fg:w="17"/><text x="53.6445%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (138 samples, 0.12%)</title><rect x="53.4094%" y="853" width="0.1212%" height="15" fill="rgb(248,16,11)" fg:x="60836" fg:w="138"/><text x="53.6594%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (136 samples, 0.12%)</title><rect x="53.4112%" y="837" width="0.1194%" height="15" fill="rgb(241,33,4)" fg:x="60838" fg:w="136"/><text x="53.6612%" y="847.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (136 samples, 0.12%)</title><rect x="53.4112%" y="821" width="0.1194%" height="15" fill="rgb(222,26,43)" fg:x="60838" fg:w="136"/><text x="53.6612%" y="831.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (128 samples, 0.11%)</title><rect x="53.4182%" y="805" width="0.1124%" height="15" fill="rgb(243,29,36)" fg:x="60846" fg:w="128"/><text x="53.6682%" y="815.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (128 samples, 0.11%)</title><rect x="53.4182%" y="789" width="0.1124%" height="15" fill="rgb(241,9,27)" fg:x="60846" fg:w="128"/><text x="53.6682%" y="799.50"></text></g><g><title>__GI___pthread_mutex_unlock (124 samples, 0.11%)</title><rect x="53.4217%" y="773" width="0.1089%" height="15" fill="rgb(205,117,26)" fg:x="60850" fg:w="124"/><text x="53.6717%" y="783.50"></text></g><g><title>core::task::wake::Waker::will_wake (14 samples, 0.01%)</title><rect x="53.5306%" y="853" width="0.0123%" height="15" fill="rgb(209,80,39)" fg:x="60974" fg:w="14"/><text x="53.7806%" y="863.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (14 samples, 0.01%)</title><rect x="53.5306%" y="837" width="0.0123%" height="15" fill="rgb(239,155,6)" fg:x="60974" fg:w="14"/><text x="53.7806%" y="847.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (963 samples, 0.85%)</title><rect x="53.2602%" y="949" width="0.8454%" height="15" fill="rgb(212,104,12)" fg:x="60666" fg:w="963"/><text x="53.5102%" y="959.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (963 samples, 0.85%)</title><rect x="53.2602%" y="933" width="0.8454%" height="15" fill="rgb(234,204,3)" fg:x="60666" fg:w="963"/><text x="53.5102%" y="943.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (963 samples, 0.85%)</title><rect x="53.2602%" y="917" width="0.8454%" height="15" fill="rgb(251,218,7)" fg:x="60666" fg:w="963"/><text x="53.5102%" y="927.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (963 samples, 0.85%)</title><rect x="53.2602%" y="901" width="0.8454%" height="15" fill="rgb(221,81,32)" fg:x="60666" fg:w="963"/><text x="53.5102%" y="911.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (963 samples, 0.85%)</title><rect x="53.2602%" y="885" width="0.8454%" height="15" fill="rgb(214,152,26)" fg:x="60666" fg:w="963"/><text x="53.5102%" y="895.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (963 samples, 0.85%)</title><rect x="53.2602%" y="869" width="0.8454%" height="15" fill="rgb(223,22,3)" fg:x="60666" fg:w="963"/><text x="53.5102%" y="879.50"></text></g><g><title>event_listener::Inner::lock (641 samples, 0.56%)</title><rect x="53.5429%" y="853" width="0.5627%" height="15" fill="rgb(207,174,7)" fg:x="60988" fg:w="641"/><text x="53.7929%" y="863.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (634 samples, 0.56%)</title><rect x="53.5490%" y="837" width="0.5566%" height="15" fill="rgb(224,19,52)" fg:x="60995" fg:w="634"/><text x="53.7990%" y="847.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (630 samples, 0.55%)</title><rect x="53.5525%" y="821" width="0.5531%" height="15" fill="rgb(228,24,14)" fg:x="60999" fg:w="630"/><text x="53.8025%" y="831.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (617 samples, 0.54%)</title><rect x="53.5639%" y="805" width="0.5417%" height="15" fill="rgb(230,153,43)" fg:x="61012" fg:w="617"/><text x="53.8139%" y="815.50"></text></g><g><title>__GI___pthread_mutex_lock (617 samples, 0.54%)</title><rect x="53.5639%" y="789" width="0.5417%" height="15" fill="rgb(231,106,12)" fg:x="61012" fg:w="617"/><text x="53.8139%" y="799.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write (69 samples, 0.06%)</title><rect x="54.1126%" y="533" width="0.0606%" height="15" fill="rgb(215,92,2)" fg:x="61637" fg:w="69"/><text x="54.3626%" y="543.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher (62 samples, 0.05%)</title><rect x="54.1188%" y="517" width="0.0544%" height="15" fill="rgb(249,143,25)" fg:x="61644" fg:w="62"/><text x="54.3688%" y="527.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher::{{closure}} (60 samples, 0.05%)</title><rect x="54.1205%" y="501" width="0.0527%" height="15" fill="rgb(252,7,35)" fg:x="61646" fg:w="60"/><text x="54.3705%" y="511.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (60 samples, 0.05%)</title><rect x="54.1205%" y="485" width="0.0527%" height="15" fill="rgb(216,69,40)" fg:x="61646" fg:w="60"/><text x="54.3705%" y="495.50"></text></g><g><title>fxhash::write (50 samples, 0.04%)</title><rect x="54.1293%" y="469" width="0.0439%" height="15" fill="rgb(240,36,33)" fg:x="61656" fg:w="50"/><text x="54.3793%" y="479.50"></text></g><g><title>fxhash::write64 (50 samples, 0.04%)</title><rect x="54.1293%" y="453" width="0.0439%" height="15" fill="rgb(231,128,14)" fg:x="61656" fg:w="50"/><text x="54.3793%" y="463.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (21 samples, 0.02%)</title><rect x="54.1548%" y="437" width="0.0184%" height="15" fill="rgb(245,143,14)" fg:x="61685" fg:w="21"/><text x="54.4048%" y="447.50"></text></g><g><title>hashbrown::map::make_hash (104 samples, 0.09%)</title><rect x="54.1056%" y="645" width="0.0913%" height="15" fill="rgb(222,130,28)" fg:x="61629" fg:w="104"/><text x="54.3556%" y="655.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (104 samples, 0.09%)</title><rect x="54.1056%" y="629" width="0.0913%" height="15" fill="rgb(212,10,48)" fg:x="61629" fg:w="104"/><text x="54.3556%" y="639.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_query::MapQuery&lt;K&gt; as core::hash::Hash&gt;::hash (104 samples, 0.09%)</title><rect x="54.1056%" y="613" width="0.0913%" height="15" fill="rgb(254,118,45)" fg:x="61629" fg:w="104"/><text x="54.3556%" y="623.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash (104 samples, 0.09%)</title><rect x="54.1056%" y="597" width="0.0913%" height="15" fill="rgb(228,6,45)" fg:x="61629" fg:w="104"/><text x="54.3556%" y="607.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash::{{closure}} (96 samples, 0.08%)</title><rect x="54.1126%" y="581" width="0.0843%" height="15" fill="rgb(241,18,35)" fg:x="61637" fg:w="96"/><text x="54.3626%" y="591.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (96 samples, 0.08%)</title><rect x="54.1126%" y="565" width="0.0843%" height="15" fill="rgb(227,214,53)" fg:x="61637" fg:w="96"/><text x="54.3626%" y="575.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (96 samples, 0.08%)</title><rect x="54.1126%" y="549" width="0.0843%" height="15" fill="rgb(224,107,51)" fg:x="61637" fg:w="96"/><text x="54.3626%" y="559.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write_u8 (27 samples, 0.02%)</title><rect x="54.1732%" y="533" width="0.0237%" height="15" fill="rgb(248,60,28)" fg:x="61706" fg:w="27"/><text x="54.4232%" y="543.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_u8_Hasher (27 samples, 0.02%)</title><rect x="54.1732%" y="517" width="0.0237%" height="15" fill="rgb(249,101,23)" fg:x="61706" fg:w="27"/><text x="54.4232%" y="527.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_u8_Hasher::{{closure}} (27 samples, 0.02%)</title><rect x="54.1732%" y="501" width="0.0237%" height="15" fill="rgb(228,51,19)" fg:x="61706" fg:w="27"/><text x="54.4232%" y="511.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (27 samples, 0.02%)</title><rect x="54.1732%" y="485" width="0.0237%" height="15" fill="rgb(213,20,6)" fg:x="61706" fg:w="27"/><text x="54.4232%" y="495.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (27 samples, 0.02%)</title><rect x="54.1732%" y="469" width="0.0237%" height="15" fill="rgb(212,124,10)" fg:x="61706" fg:w="27"/><text x="54.4232%" y="479.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (13 samples, 0.01%)</title><rect x="54.1855%" y="453" width="0.0114%" height="15" fill="rgb(248,3,40)" fg:x="61720" fg:w="13"/><text x="54.4355%" y="463.50"></text></g><g><title>value_trait::ValueAccess::get (115 samples, 0.10%)</title><rect x="54.1056%" y="837" width="0.1010%" height="15" fill="rgb(223,178,23)" fg:x="61629" fg:w="115"/><text x="54.3556%" y="847.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (115 samples, 0.10%)</title><rect x="54.1056%" y="821" width="0.1010%" height="15" fill="rgb(240,132,45)" fg:x="61629" fg:w="115"/><text x="54.3556%" y="831.50"></text></g><g><title>value_trait::ValueAccess::get::{{closure}} (115 samples, 0.10%)</title><rect x="54.1056%" y="805" width="0.1010%" height="15" fill="rgb(245,164,36)" fg:x="61629" fg:w="115"/><text x="54.3556%" y="815.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;MapK,MapE,S&gt; as value_trait::object::Object&gt;::get (115 samples, 0.10%)</title><rect x="54.1056%" y="789" width="0.1010%" height="15" fill="rgb(231,188,53)" fg:x="61629" fg:w="115"/><text x="54.3556%" y="799.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::get (115 samples, 0.10%)</title><rect x="54.1056%" y="773" width="0.1010%" height="15" fill="rgb(237,198,39)" fg:x="61629" fg:w="115"/><text x="54.3556%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (115 samples, 0.10%)</title><rect x="54.1056%" y="757" width="0.1010%" height="15" fill="rgb(223,120,35)" fg:x="61629" fg:w="115"/><text x="54.3556%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (115 samples, 0.10%)</title><rect x="54.1056%" y="741" width="0.1010%" height="15" fill="rgb(253,107,49)" fg:x="61629" fg:w="115"/><text x="54.3556%" y="751.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (115 samples, 0.10%)</title><rect x="54.1056%" y="725" width="0.1010%" height="15" fill="rgb(216,44,31)" fg:x="61629" fg:w="115"/><text x="54.3556%" y="735.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem::{{closure}} (115 samples, 0.10%)</title><rect x="54.1056%" y="709" width="0.1010%" height="15" fill="rgb(253,87,21)" fg:x="61629" fg:w="115"/><text x="54.3556%" y="719.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (115 samples, 0.10%)</title><rect x="54.1056%" y="693" width="0.1010%" height="15" fill="rgb(226,18,2)" fg:x="61629" fg:w="115"/><text x="54.3556%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (115 samples, 0.10%)</title><rect x="54.1056%" y="677" width="0.1010%" height="15" fill="rgb(216,8,46)" fg:x="61629" fg:w="115"/><text x="54.3556%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (115 samples, 0.10%)</title><rect x="54.1056%" y="661" width="0.1010%" height="15" fill="rgb(226,140,39)" fg:x="61629" fg:w="115"/><text x="54.3556%" y="671.50"></text></g><g><title>&lt;byteorder::LittleEndian as byteorder::ByteOrder&gt;::read_u32 (27 samples, 0.02%)</title><rect x="54.2645%" y="421" width="0.0237%" height="15" fill="rgb(221,194,54)" fg:x="61810" fg:w="27"/><text x="54.5145%" y="431.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (27 samples, 0.02%)</title><rect x="54.2645%" y="405" width="0.0237%" height="15" fill="rgb(213,92,11)" fg:x="61810" fg:w="27"/><text x="54.5145%" y="415.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (27 samples, 0.02%)</title><rect x="54.2645%" y="389" width="0.0237%" height="15" fill="rgb(229,162,46)" fg:x="61810" fg:w="27"/><text x="54.5145%" y="399.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (27 samples, 0.02%)</title><rect x="54.2645%" y="373" width="0.0237%" height="15" fill="rgb(214,111,36)" fg:x="61810" fg:w="27"/><text x="54.5145%" y="383.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (27 samples, 0.02%)</title><rect x="54.2645%" y="357" width="0.0237%" height="15" fill="rgb(207,6,21)" fg:x="61810" fg:w="27"/><text x="54.5145%" y="367.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write (111 samples, 0.10%)</title><rect x="54.2145%" y="517" width="0.0974%" height="15" fill="rgb(213,127,38)" fg:x="61753" fg:w="111"/><text x="54.4645%" y="527.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher (107 samples, 0.09%)</title><rect x="54.2180%" y="501" width="0.0939%" height="15" fill="rgb(238,118,32)" fg:x="61757" fg:w="107"/><text x="54.4680%" y="511.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher::{{closure}} (67 samples, 0.06%)</title><rect x="54.2531%" y="485" width="0.0588%" height="15" fill="rgb(240,139,39)" fg:x="61797" fg:w="67"/><text x="54.5031%" y="495.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (67 samples, 0.06%)</title><rect x="54.2531%" y="469" width="0.0588%" height="15" fill="rgb(235,10,37)" fg:x="61797" fg:w="67"/><text x="54.5031%" y="479.50"></text></g><g><title>fxhash::write (61 samples, 0.05%)</title><rect x="54.2584%" y="453" width="0.0536%" height="15" fill="rgb(249,171,38)" fg:x="61803" fg:w="61"/><text x="54.5084%" y="463.50"></text></g><g><title>fxhash::write64 (61 samples, 0.05%)</title><rect x="54.2584%" y="437" width="0.0536%" height="15" fill="rgb(242,144,32)" fg:x="61803" fg:w="61"/><text x="54.5084%" y="447.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (21 samples, 0.02%)</title><rect x="54.2935%" y="421" width="0.0184%" height="15" fill="rgb(217,117,21)" fg:x="61843" fg:w="21"/><text x="54.5435%" y="431.50"></text></g><g><title>hashbrown::map::make_hash (137 samples, 0.12%)</title><rect x="54.2066%" y="629" width="0.1203%" height="15" fill="rgb(249,87,1)" fg:x="61744" fg:w="137"/><text x="54.4566%" y="639.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (137 samples, 0.12%)</title><rect x="54.2066%" y="613" width="0.1203%" height="15" fill="rgb(248,196,48)" fg:x="61744" fg:w="137"/><text x="54.4566%" y="623.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_query::MapQuery&lt;K&gt; as core::hash::Hash&gt;::hash (137 samples, 0.12%)</title><rect x="54.2066%" y="597" width="0.1203%" height="15" fill="rgb(251,206,33)" fg:x="61744" fg:w="137"/><text x="54.4566%" y="607.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash (137 samples, 0.12%)</title><rect x="54.2066%" y="581" width="0.1203%" height="15" fill="rgb(232,141,28)" fg:x="61744" fg:w="137"/><text x="54.4566%" y="591.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash::{{closure}} (128 samples, 0.11%)</title><rect x="54.2145%" y="565" width="0.1124%" height="15" fill="rgb(209,167,14)" fg:x="61753" fg:w="128"/><text x="54.4645%" y="575.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (128 samples, 0.11%)</title><rect x="54.2145%" y="549" width="0.1124%" height="15" fill="rgb(225,11,50)" fg:x="61753" fg:w="128"/><text x="54.4645%" y="559.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (128 samples, 0.11%)</title><rect x="54.2145%" y="533" width="0.1124%" height="15" fill="rgb(209,50,20)" fg:x="61753" fg:w="128"/><text x="54.4645%" y="543.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write_u8 (17 samples, 0.01%)</title><rect x="54.3119%" y="517" width="0.0149%" height="15" fill="rgb(212,17,46)" fg:x="61864" fg:w="17"/><text x="54.5619%" y="527.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_u8_Hasher (17 samples, 0.01%)</title><rect x="54.3119%" y="501" width="0.0149%" height="15" fill="rgb(216,101,39)" fg:x="61864" fg:w="17"/><text x="54.5619%" y="511.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_u8_Hasher::{{closure}} (17 samples, 0.01%)</title><rect x="54.3119%" y="485" width="0.0149%" height="15" fill="rgb(212,228,48)" fg:x="61864" fg:w="17"/><text x="54.5619%" y="495.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (17 samples, 0.01%)</title><rect x="54.3119%" y="469" width="0.0149%" height="15" fill="rgb(250,6,50)" fg:x="61864" fg:w="17"/><text x="54.5619%" y="479.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (12 samples, 0.01%)</title><rect x="54.3163%" y="453" width="0.0105%" height="15" fill="rgb(250,160,48)" fg:x="61869" fg:w="12"/><text x="54.5663%" y="463.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (320 samples, 0.28%)</title><rect x="54.1056%" y="869" width="0.2809%" height="15" fill="rgb(244,216,33)" fg:x="61629" fg:w="320"/><text x="54.3556%" y="879.50"></text></g><g><title>&lt;tremor_pipeline::op::grouper::bucket::Grouper as tremor_pipeline::op::Operator&gt;::on_event (320 samples, 0.28%)</title><rect x="54.1056%" y="853" width="0.2809%" height="15" fill="rgb(207,157,5)" fg:x="61629" fg:w="320"/><text x="54.3556%" y="863.50"></text></g><g><title>value_trait::ValueAccess::get_str (205 samples, 0.18%)</title><rect x="54.2066%" y="837" width="0.1800%" height="15" fill="rgb(228,199,8)" fg:x="61744" fg:w="205"/><text x="54.4566%" y="847.50"></text></g><g><title>value_trait::ValueAccess::get (205 samples, 0.18%)</title><rect x="54.2066%" y="821" width="0.1800%" height="15" fill="rgb(227,80,20)" fg:x="61744" fg:w="205"/><text x="54.4566%" y="831.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (205 samples, 0.18%)</title><rect x="54.2066%" y="805" width="0.1800%" height="15" fill="rgb(222,9,33)" fg:x="61744" fg:w="205"/><text x="54.4566%" y="815.50"></text></g><g><title>value_trait::ValueAccess::get::{{closure}} (205 samples, 0.18%)</title><rect x="54.2066%" y="789" width="0.1800%" height="15" fill="rgb(239,44,28)" fg:x="61744" fg:w="205"/><text x="54.4566%" y="799.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;MapK,MapE,S&gt; as value_trait::object::Object&gt;::get (205 samples, 0.18%)</title><rect x="54.2066%" y="773" width="0.1800%" height="15" fill="rgb(249,187,43)" fg:x="61744" fg:w="205"/><text x="54.4566%" y="783.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::get (205 samples, 0.18%)</title><rect x="54.2066%" y="757" width="0.1800%" height="15" fill="rgb(216,141,28)" fg:x="61744" fg:w="205"/><text x="54.4566%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (205 samples, 0.18%)</title><rect x="54.2066%" y="741" width="0.1800%" height="15" fill="rgb(230,154,53)" fg:x="61744" fg:w="205"/><text x="54.4566%" y="751.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (205 samples, 0.18%)</title><rect x="54.2066%" y="725" width="0.1800%" height="15" fill="rgb(227,82,4)" fg:x="61744" fg:w="205"/><text x="54.4566%" y="735.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (205 samples, 0.18%)</title><rect x="54.2066%" y="709" width="0.1800%" height="15" fill="rgb(220,107,16)" fg:x="61744" fg:w="205"/><text x="54.4566%" y="719.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem::{{closure}} (205 samples, 0.18%)</title><rect x="54.2066%" y="693" width="0.1800%" height="15" fill="rgb(207,187,2)" fg:x="61744" fg:w="205"/><text x="54.4566%" y="703.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (205 samples, 0.18%)</title><rect x="54.2066%" y="677" width="0.1800%" height="15" fill="rgb(210,162,52)" fg:x="61744" fg:w="205"/><text x="54.4566%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (205 samples, 0.18%)</title><rect x="54.2066%" y="661" width="0.1800%" height="15" fill="rgb(217,216,49)" fg:x="61744" fg:w="205"/><text x="54.4566%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (205 samples, 0.18%)</title><rect x="54.2066%" y="645" width="0.1800%" height="15" fill="rgb(218,146,49)" fg:x="61744" fg:w="205"/><text x="54.4566%" y="655.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (68 samples, 0.06%)</title><rect x="54.3269%" y="629" width="0.0597%" height="15" fill="rgb(216,55,40)" fg:x="61881" fg:w="68"/><text x="54.5769%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (68 samples, 0.06%)</title><rect x="54.3269%" y="613" width="0.0597%" height="15" fill="rgb(208,196,21)" fg:x="61881" fg:w="68"/><text x="54.5769%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (68 samples, 0.06%)</title><rect x="54.3269%" y="597" width="0.0597%" height="15" fill="rgb(242,117,42)" fg:x="61881" fg:w="68"/><text x="54.5769%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (68 samples, 0.06%)</title><rect x="54.3269%" y="581" width="0.0597%" height="15" fill="rgb(210,11,23)" fg:x="61881" fg:w="68"/><text x="54.5769%" y="591.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (68 samples, 0.06%)</title><rect x="54.3269%" y="565" width="0.0597%" height="15" fill="rgb(217,110,2)" fg:x="61881" fg:w="68"/><text x="54.5769%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (68 samples, 0.06%)</title><rect x="54.3269%" y="549" width="0.0597%" height="15" fill="rgb(229,77,54)" fg:x="61881" fg:w="68"/><text x="54.5769%" y="559.50"></text></g><g><title>abi_stable::std_types::map::map_query::MapQuery&lt;K&gt;::is_equal (68 samples, 0.06%)</title><rect x="54.3269%" y="533" width="0.0597%" height="15" fill="rgb(218,53,16)" fg:x="61881" fg:w="68"/><text x="54.5769%" y="543.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (68 samples, 0.06%)</title><rect x="54.3269%" y="517" width="0.0597%" height="15" fill="rgb(215,38,13)" fg:x="61881" fg:w="68"/><text x="54.5769%" y="527.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (68 samples, 0.06%)</title><rect x="54.3269%" y="501" width="0.0597%" height="15" fill="rgb(235,42,18)" fg:x="61881" fg:w="68"/><text x="54.5769%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (65 samples, 0.06%)</title><rect x="54.3295%" y="485" width="0.0571%" height="15" fill="rgb(219,66,54)" fg:x="61884" fg:w="65"/><text x="54.5795%" y="495.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (65 samples, 0.06%)</title><rect x="54.3295%" y="469" width="0.0571%" height="15" fill="rgb(222,205,4)" fg:x="61884" fg:w="65"/><text x="54.5795%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (65 samples, 0.06%)</title><rect x="54.3295%" y="453" width="0.0571%" height="15" fill="rgb(227,213,46)" fg:x="61884" fg:w="65"/><text x="54.5795%" y="463.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (65 samples, 0.06%)</title><rect x="54.3295%" y="437" width="0.0571%" height="15" fill="rgb(250,145,42)" fg:x="61884" fg:w="65"/><text x="54.5795%" y="447.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (65 samples, 0.06%)</title><rect x="54.3295%" y="421" width="0.0571%" height="15" fill="rgb(219,15,2)" fg:x="61884" fg:w="65"/><text x="54.5795%" y="431.50"></text></g><g><title>[libc-2.31.so] (52 samples, 0.05%)</title><rect x="54.3409%" y="405" width="0.0457%" height="15" fill="rgb(231,181,52)" fg:x="61897" fg:w="52"/><text x="54.5909%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (48 samples, 0.04%)</title><rect x="54.4041%" y="821" width="0.0421%" height="15" fill="rgb(235,1,42)" fg:x="61969" fg:w="48"/><text x="54.6541%" y="831.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (4,354 samples, 3.82%)</title><rect x="50.7686%" y="1045" width="3.8225%" height="15" fill="rgb(249,88,27)" fg:x="57828" fg:w="4354"/><text x="51.0186%" y="1055.50">std:..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (4,347 samples, 3.82%)</title><rect x="50.7748%" y="1029" width="3.8163%" height="15" fill="rgb(235,145,16)" fg:x="57835" fg:w="4347"/><text x="51.0248%" y="1039.50">std:..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (4,336 samples, 3.81%)</title><rect x="50.7844%" y="1013" width="3.8067%" height="15" fill="rgb(237,114,19)" fg:x="57846" fg:w="4336"/><text x="51.0344%" y="1023.50">asyn..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (4,336 samples, 3.81%)</title><rect x="50.7844%" y="997" width="3.8067%" height="15" fill="rgb(238,51,50)" fg:x="57846" fg:w="4336"/><text x="51.0344%" y="1007.50">&lt;asy..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,336 samples, 3.81%)</title><rect x="50.7844%" y="981" width="3.8067%" height="15" fill="rgb(205,194,25)" fg:x="57846" fg:w="4336"/><text x="51.0344%" y="991.50">&lt;cor..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (1,516 samples, 1.33%)</title><rect x="53.2602%" y="965" width="1.3309%" height="15" fill="rgb(215,203,17)" fg:x="60666" fg:w="1516"/><text x="53.5102%" y="975.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (553 samples, 0.49%)</title><rect x="54.1056%" y="949" width="0.4855%" height="15" fill="rgb(233,112,49)" fg:x="61629" fg:w="553"/><text x="54.3556%" y="959.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (553 samples, 0.49%)</title><rect x="54.1056%" y="933" width="0.4855%" height="15" fill="rgb(241,130,26)" fg:x="61629" fg:w="553"/><text x="54.3556%" y="943.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (553 samples, 0.49%)</title><rect x="54.1056%" y="917" width="0.4855%" height="15" fill="rgb(252,223,19)" fg:x="61629" fg:w="553"/><text x="54.3556%" y="927.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (553 samples, 0.49%)</title><rect x="54.1056%" y="901" width="0.4855%" height="15" fill="rgb(211,95,25)" fg:x="61629" fg:w="553"/><text x="54.3556%" y="911.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (553 samples, 0.49%)</title><rect x="54.1056%" y="885" width="0.4855%" height="15" fill="rgb(251,182,27)" fg:x="61629" fg:w="553"/><text x="54.3556%" y="895.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (233 samples, 0.20%)</title><rect x="54.3866%" y="869" width="0.2046%" height="15" fill="rgb(238,24,4)" fg:x="61949" fg:w="233"/><text x="54.6366%" y="879.50"></text></g><g><title>tremor_script::srs::EventPayload::rent_mut (233 samples, 0.20%)</title><rect x="54.3866%" y="853" width="0.2046%" height="15" fill="rgb(224,220,25)" fg:x="61949" fg:w="233"/><text x="54.6366%" y="863.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (222 samples, 0.19%)</title><rect x="54.3962%" y="837" width="0.1949%" height="15" fill="rgb(239,133,26)" fg:x="61960" fg:w="222"/><text x="54.6462%" y="847.50"></text></g><g><title>tremor_script::script::Script::run (165 samples, 0.14%)</title><rect x="54.4462%" y="821" width="0.1449%" height="15" fill="rgb(211,94,48)" fg:x="62017" fg:w="165"/><text x="54.6962%" y="831.50"></text></g><g><title>tremor_script::ast::Script::run (163 samples, 0.14%)</title><rect x="54.4480%" y="805" width="0.1431%" height="15" fill="rgb(239,87,6)" fg:x="62019" fg:w="163"/><text x="54.6980%" y="815.50"></text></g><g><title>tremor_common::time::nanotime (25 samples, 0.02%)</title><rect x="54.5911%" y="1045" width="0.0219%" height="15" fill="rgb(227,62,0)" fg:x="62182" fg:w="25"/><text x="54.8411%" y="1055.50"></text></g><g><title>std::time::SystemTime::now (25 samples, 0.02%)</title><rect x="54.5911%" y="1029" width="0.0219%" height="15" fill="rgb(211,226,4)" fg:x="62182" fg:w="25"/><text x="54.8411%" y="1039.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (25 samples, 0.02%)</title><rect x="54.5911%" y="1013" width="0.0219%" height="15" fill="rgb(253,38,52)" fg:x="62182" fg:w="25"/><text x="54.8411%" y="1023.50"></text></g><g><title>std::sys::unix::time::inner::now (25 samples, 0.02%)</title><rect x="54.5911%" y="997" width="0.0219%" height="15" fill="rgb(229,126,40)" fg:x="62182" fg:w="25"/><text x="54.8411%" y="1007.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (23 samples, 0.02%)</title><rect x="54.6745%" y="933" width="0.0202%" height="15" fill="rgb(229,165,44)" fg:x="62277" fg:w="23"/><text x="54.9245%" y="943.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (18 samples, 0.02%)</title><rect x="54.6789%" y="917" width="0.0158%" height="15" fill="rgb(247,95,47)" fg:x="62282" fg:w="18"/><text x="54.9289%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (18 samples, 0.02%)</title><rect x="54.6789%" y="901" width="0.0158%" height="15" fill="rgb(216,140,30)" fg:x="62282" fg:w="18"/><text x="54.9289%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_add (18 samples, 0.02%)</title><rect x="54.6789%" y="885" width="0.0158%" height="15" fill="rgb(246,214,8)" fg:x="62282" fg:w="18"/><text x="54.9289%" y="895.50"></text></g><g><title>core::mem::drop (40 samples, 0.04%)</title><rect x="54.7070%" y="933" width="0.0351%" height="15" fill="rgb(227,224,15)" fg:x="62314" fg:w="40"/><text x="54.9570%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (40 samples, 0.04%)</title><rect x="54.7070%" y="917" width="0.0351%" height="15" fill="rgb(233,175,4)" fg:x="62314" fg:w="40"/><text x="54.9570%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (37 samples, 0.03%)</title><rect x="54.7096%" y="901" width="0.0325%" height="15" fill="rgb(221,66,45)" fg:x="62317" fg:w="37"/><text x="54.9596%" y="911.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.03%)</title><rect x="54.7096%" y="885" width="0.0325%" height="15" fill="rgb(221,178,18)" fg:x="62317" fg:w="37"/><text x="54.9596%" y="895.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (34 samples, 0.03%)</title><rect x="54.7123%" y="869" width="0.0298%" height="15" fill="rgb(213,81,29)" fg:x="62320" fg:w="34"/><text x="54.9623%" y="879.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (33 samples, 0.03%)</title><rect x="54.7131%" y="853" width="0.0290%" height="15" fill="rgb(220,89,49)" fg:x="62321" fg:w="33"/><text x="54.9631%" y="863.50"></text></g><g><title>__GI___pthread_mutex_unlock (33 samples, 0.03%)</title><rect x="54.7131%" y="837" width="0.0290%" height="15" fill="rgb(227,60,33)" fg:x="62321" fg:w="33"/><text x="54.9631%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (25 samples, 0.02%)</title><rect x="54.7421%" y="933" width="0.0219%" height="15" fill="rgb(205,113,12)" fg:x="62354" fg:w="25"/><text x="54.9921%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (23 samples, 0.02%)</title><rect x="54.7439%" y="917" width="0.0202%" height="15" fill="rgb(211,32,1)" fg:x="62356" fg:w="23"/><text x="54.9939%" y="927.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="54.7439%" y="901" width="0.0202%" height="15" fill="rgb(246,2,12)" fg:x="62356" fg:w="23"/><text x="54.9939%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (23 samples, 0.02%)</title><rect x="54.7439%" y="885" width="0.0202%" height="15" fill="rgb(243,37,27)" fg:x="62356" fg:w="23"/><text x="54.9939%" y="895.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (23 samples, 0.02%)</title><rect x="54.7439%" y="869" width="0.0202%" height="15" fill="rgb(248,211,31)" fg:x="62356" fg:w="23"/><text x="54.9939%" y="879.50"></text></g><g><title>__GI___pthread_mutex_unlock (21 samples, 0.02%)</title><rect x="54.7456%" y="853" width="0.0184%" height="15" fill="rgb(242,146,47)" fg:x="62358" fg:w="21"/><text x="54.9956%" y="863.50"></text></g><g><title>std::sync::poison::Flag::get (13 samples, 0.01%)</title><rect x="54.7676%" y="869" width="0.0114%" height="15" fill="rgb(206,70,20)" fg:x="62383" fg:w="13"/><text x="55.0176%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (13 samples, 0.01%)</title><rect x="54.7676%" y="853" width="0.0114%" height="15" fill="rgb(215,10,51)" fg:x="62383" fg:w="13"/><text x="55.0176%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_load (13 samples, 0.01%)</title><rect x="54.7676%" y="837" width="0.0114%" height="15" fill="rgb(243,178,53)" fg:x="62383" fg:w="13"/><text x="55.0176%" y="847.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (15 samples, 0.01%)</title><rect x="54.7676%" y="901" width="0.0132%" height="15" fill="rgb(233,221,20)" fg:x="62383" fg:w="15"/><text x="55.0176%" y="911.50"></text></g><g><title>std::sync::poison::Flag::borrow (15 samples, 0.01%)</title><rect x="54.7676%" y="885" width="0.0132%" height="15" fill="rgb(218,95,35)" fg:x="62383" fg:w="15"/><text x="55.0176%" y="895.50"></text></g><g><title>event_listener::Inner::lock (256 samples, 0.22%)</title><rect x="54.7667%" y="933" width="0.2247%" height="15" fill="rgb(229,13,5)" fg:x="62382" fg:w="256"/><text x="55.0167%" y="943.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (255 samples, 0.22%)</title><rect x="54.7676%" y="917" width="0.2239%" height="15" fill="rgb(252,164,30)" fg:x="62383" fg:w="255"/><text x="55.0176%" y="927.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (240 samples, 0.21%)</title><rect x="54.7807%" y="901" width="0.2107%" height="15" fill="rgb(232,68,36)" fg:x="62398" fg:w="240"/><text x="55.0307%" y="911.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (181 samples, 0.16%)</title><rect x="54.8325%" y="885" width="0.1589%" height="15" fill="rgb(219,59,54)" fg:x="62457" fg:w="181"/><text x="55.0825%" y="895.50"></text></g><g><title>__GI___pthread_mutex_lock (181 samples, 0.16%)</title><rect x="54.8325%" y="869" width="0.1589%" height="15" fill="rgb(250,92,33)" fg:x="62457" fg:w="181"/><text x="55.0825%" y="879.50"></text></g><g><title>__lll_lock_wait (24 samples, 0.02%)</title><rect x="54.9704%" y="853" width="0.0211%" height="15" fill="rgb(229,162,54)" fg:x="62614" fg:w="24"/><text x="55.2204%" y="863.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (437 samples, 0.38%)</title><rect x="54.6534%" y="949" width="0.3837%" height="15" fill="rgb(244,114,52)" fg:x="62253" fg:w="437"/><text x="54.9034%" y="959.50"></text></g><g><title>event_listener::List::remove (52 samples, 0.05%)</title><rect x="54.9914%" y="933" width="0.0457%" height="15" fill="rgb(212,211,43)" fg:x="62638" fg:w="52"/><text x="55.2414%" y="943.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (33 samples, 0.03%)</title><rect x="55.0081%" y="917" width="0.0290%" height="15" fill="rgb(226,147,8)" fg:x="62657" fg:w="33"/><text x="55.2581%" y="927.50"></text></g><g><title>core::mem::replace (33 samples, 0.03%)</title><rect x="55.0081%" y="901" width="0.0290%" height="15" fill="rgb(226,23,13)" fg:x="62657" fg:w="33"/><text x="55.2581%" y="911.50"></text></g><g><title>core::ptr::read (33 samples, 0.03%)</title><rect x="55.0081%" y="885" width="0.0290%" height="15" fill="rgb(240,63,4)" fg:x="62657" fg:w="33"/><text x="55.2581%" y="895.50"></text></g><g><title>[libc-2.31.so] (263 samples, 0.23%)</title><rect x="55.0371%" y="949" width="0.2309%" height="15" fill="rgb(221,1,32)" fg:x="62690" fg:w="263"/><text x="55.2871%" y="959.50"></text></g><g><title>[libc-2.31.so] (558 samples, 0.49%)</title><rect x="55.2934%" y="933" width="0.4899%" height="15" fill="rgb(242,117,10)" fg:x="62982" fg:w="558"/><text x="55.5434%" y="943.50"></text></g><g><title>[libc-2.31.so] (105 samples, 0.09%)</title><rect x="55.8825%" y="901" width="0.0922%" height="15" fill="rgb(249,172,44)" fg:x="63653" fg:w="105"/><text x="56.1325%" y="911.50"></text></g><g><title>concurrent_queue::full_fence (96 samples, 0.08%)</title><rect x="55.9747%" y="901" width="0.0843%" height="15" fill="rgb(244,46,45)" fg:x="63758" fg:w="96"/><text x="56.2247%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (91 samples, 0.08%)</title><rect x="55.9791%" y="885" width="0.0799%" height="15" fill="rgb(206,43,17)" fg:x="63763" fg:w="91"/><text x="56.2291%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (91 samples, 0.08%)</title><rect x="55.9791%" y="869" width="0.0799%" height="15" fill="rgb(239,218,39)" fg:x="63763" fg:w="91"/><text x="56.2291%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (91 samples, 0.08%)</title><rect x="55.9791%" y="853" width="0.0799%" height="15" fill="rgb(208,169,54)" fg:x="63763" fg:w="91"/><text x="56.2291%" y="863.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (479 samples, 0.42%)</title><rect x="56.0625%" y="901" width="0.4205%" height="15" fill="rgb(247,25,42)" fg:x="63858" fg:w="479"/><text x="56.3125%" y="911.50"></text></g><g><title>core::ptr::read (479 samples, 0.42%)</title><rect x="56.0625%" y="885" width="0.4205%" height="15" fill="rgb(226,23,31)" fg:x="63858" fg:w="479"/><text x="56.3125%" y="895.50"></text></g><g><title>[libc-2.31.so] (479 samples, 0.42%)</title><rect x="56.0625%" y="869" width="0.4205%" height="15" fill="rgb(247,16,28)" fg:x="63858" fg:w="479"/><text x="56.3125%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (229 samples, 0.20%)</title><rect x="56.4830%" y="901" width="0.2010%" height="15" fill="rgb(231,147,38)" fg:x="64337" fg:w="229"/><text x="56.7330%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (229 samples, 0.20%)</title><rect x="56.4830%" y="885" width="0.2010%" height="15" fill="rgb(253,81,48)" fg:x="64337" fg:w="229"/><text x="56.7330%" y="895.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (1,326 samples, 1.16%)</title><rect x="55.7833%" y="933" width="1.1641%" height="15" fill="rgb(249,222,43)" fg:x="63540" fg:w="1326"/><text x="56.0333%" y="943.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (1,295 samples, 1.14%)</title><rect x="55.8105%" y="917" width="1.1369%" height="15" fill="rgb(221,3,27)" fg:x="63571" fg:w="1295"/><text x="56.0605%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (300 samples, 0.26%)</title><rect x="56.6841%" y="901" width="0.2634%" height="15" fill="rgb(228,180,5)" fg:x="64566" fg:w="300"/><text x="56.9341%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_load (299 samples, 0.26%)</title><rect x="56.6850%" y="885" width="0.2625%" height="15" fill="rgb(227,131,42)" fg:x="64567" fg:w="299"/><text x="56.9350%" y="895.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (2,034 samples, 1.79%)</title><rect x="55.2680%" y="949" width="1.7857%" height="15" fill="rgb(212,3,39)" fg:x="62953" fg:w="2034"/><text x="55.5180%" y="959.50">a..</text></g><g><title>event_listener::Event::notify (121 samples, 0.11%)</title><rect x="56.9475%" y="933" width="0.1062%" height="15" fill="rgb(226,45,5)" fg:x="64866" fg:w="121"/><text x="57.1975%" y="943.50"></text></g><g><title>event_listener::full_fence (119 samples, 0.10%)</title><rect x="56.9492%" y="917" width="0.1045%" height="15" fill="rgb(215,167,45)" fg:x="64868" fg:w="119"/><text x="57.1992%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (119 samples, 0.10%)</title><rect x="56.9492%" y="901" width="0.1045%" height="15" fill="rgb(250,218,53)" fg:x="64868" fg:w="119"/><text x="57.1992%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (119 samples, 0.10%)</title><rect x="56.9492%" y="885" width="0.1045%" height="15" fill="rgb(207,140,0)" fg:x="64868" fg:w="119"/><text x="57.1992%" y="895.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="57.0642%" y="917" width="0.0202%" height="15" fill="rgb(238,133,51)" fg:x="64999" fg:w="23"/><text x="57.3142%" y="927.50"></text></g><g><title>event_listener::Inner::lock (17 samples, 0.01%)</title><rect x="57.0695%" y="901" width="0.0149%" height="15" fill="rgb(218,203,53)" fg:x="65005" fg:w="17"/><text x="57.3195%" y="911.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (17 samples, 0.01%)</title><rect x="57.0695%" y="885" width="0.0149%" height="15" fill="rgb(226,184,25)" fg:x="65005" fg:w="17"/><text x="57.3195%" y="895.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (15 samples, 0.01%)</title><rect x="57.0712%" y="869" width="0.0132%" height="15" fill="rgb(231,121,21)" fg:x="65007" fg:w="15"/><text x="57.3212%" y="879.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (12 samples, 0.01%)</title><rect x="57.0739%" y="853" width="0.0105%" height="15" fill="rgb(251,14,34)" fg:x="65010" fg:w="12"/><text x="57.3239%" y="863.50"></text></g><g><title>__GI___pthread_mutex_lock (12 samples, 0.01%)</title><rect x="57.0739%" y="837" width="0.0105%" height="15" fill="rgb(249,193,11)" fg:x="65010" fg:w="12"/><text x="57.3239%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (53 samples, 0.05%)</title><rect x="57.0598%" y="949" width="0.0465%" height="15" fill="rgb(220,172,37)" fg:x="64994" fg:w="53"/><text x="57.3098%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (49 samples, 0.04%)</title><rect x="57.0633%" y="933" width="0.0430%" height="15" fill="rgb(231,229,43)" fg:x="64998" fg:w="49"/><text x="57.3133%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (25 samples, 0.02%)</title><rect x="57.0844%" y="917" width="0.0219%" height="15" fill="rgb(250,161,5)" fg:x="65022" fg:w="25"/><text x="57.3344%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.02%)</title><rect x="57.0844%" y="901" width="0.0219%" height="15" fill="rgb(218,225,18)" fg:x="65022" fg:w="25"/><text x="57.3344%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (25 samples, 0.02%)</title><rect x="57.0844%" y="885" width="0.0219%" height="15" fill="rgb(245,45,42)" fg:x="65022" fg:w="25"/><text x="57.3344%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_sub (25 samples, 0.02%)</title><rect x="57.0844%" y="869" width="0.0219%" height="15" fill="rgb(211,115,1)" fg:x="65022" fg:w="25"/><text x="57.3344%" y="879.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (56 samples, 0.05%)</title><rect x="57.1090%" y="933" width="0.0492%" height="15" fill="rgb(248,133,52)" fg:x="65050" fg:w="56"/><text x="57.3590%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (56 samples, 0.05%)</title><rect x="57.1090%" y="917" width="0.0492%" height="15" fill="rgb(238,100,21)" fg:x="65050" fg:w="56"/><text x="57.3590%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_add (56 samples, 0.05%)</title><rect x="57.1090%" y="901" width="0.0492%" height="15" fill="rgb(247,144,11)" fg:x="65050" fg:w="56"/><text x="57.3590%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (26 samples, 0.02%)</title><rect x="57.1582%" y="933" width="0.0228%" height="15" fill="rgb(206,164,16)" fg:x="65106" fg:w="26"/><text x="57.4082%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (26 samples, 0.02%)</title><rect x="57.1582%" y="917" width="0.0228%" height="15" fill="rgb(222,34,3)" fg:x="65106" fg:w="26"/><text x="57.4082%" y="927.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (26 samples, 0.02%)</title><rect x="57.1582%" y="901" width="0.0228%" height="15" fill="rgb(248,82,4)" fg:x="65106" fg:w="26"/><text x="57.4082%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (25 samples, 0.02%)</title><rect x="57.1590%" y="885" width="0.0219%" height="15" fill="rgb(228,81,46)" fg:x="65107" fg:w="25"/><text x="57.4090%" y="895.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (25 samples, 0.02%)</title><rect x="57.1590%" y="869" width="0.0219%" height="15" fill="rgb(227,67,47)" fg:x="65107" fg:w="25"/><text x="57.4090%" y="879.50"></text></g><g><title>__GI___pthread_mutex_unlock (24 samples, 0.02%)</title><rect x="57.1599%" y="853" width="0.0211%" height="15" fill="rgb(215,93,53)" fg:x="65108" fg:w="24"/><text x="57.4099%" y="863.50"></text></g><g><title>event_listener::Inner::lock (50 samples, 0.04%)</title><rect x="57.1819%" y="933" width="0.0439%" height="15" fill="rgb(248,194,39)" fg:x="65133" fg:w="50"/><text x="57.4319%" y="943.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (50 samples, 0.04%)</title><rect x="57.1819%" y="917" width="0.0439%" height="15" fill="rgb(215,5,19)" fg:x="65133" fg:w="50"/><text x="57.4319%" y="927.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (50 samples, 0.04%)</title><rect x="57.1819%" y="901" width="0.0439%" height="15" fill="rgb(226,215,51)" fg:x="65133" fg:w="50"/><text x="57.4319%" y="911.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (50 samples, 0.04%)</title><rect x="57.1819%" y="885" width="0.0439%" height="15" fill="rgb(225,56,26)" fg:x="65133" fg:w="50"/><text x="57.4319%" y="895.50"></text></g><g><title>__GI___pthread_mutex_lock (49 samples, 0.04%)</title><rect x="57.1827%" y="869" width="0.0430%" height="15" fill="rgb(222,75,29)" fg:x="65134" fg:w="49"/><text x="57.4327%" y="879.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,980 samples, 2.62%)</title><rect x="54.6227%" y="1029" width="2.6162%" height="15" fill="rgb(236,139,6)" fg:x="62218" fg:w="2980"/><text x="54.8727%" y="1039.50">&lt;a..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (2,980 samples, 2.62%)</title><rect x="54.6227%" y="1013" width="2.6162%" height="15" fill="rgb(223,137,36)" fg:x="62218" fg:w="2980"/><text x="54.8727%" y="1023.50">&lt;t..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (2,980 samples, 2.62%)</title><rect x="54.6227%" y="997" width="2.6162%" height="15" fill="rgb(226,99,2)" fg:x="62218" fg:w="2980"/><text x="54.8727%" y="1007.50">&lt;a..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (2,980 samples, 2.62%)</title><rect x="54.6227%" y="981" width="2.6162%" height="15" fill="rgb(206,133,23)" fg:x="62218" fg:w="2980"/><text x="54.8727%" y="991.50">&lt;a..</text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (2,980 samples, 2.62%)</title><rect x="54.6227%" y="965" width="2.6162%" height="15" fill="rgb(243,173,15)" fg:x="62218" fg:w="2980"/><text x="54.8727%" y="975.50">&lt;a..</text></g><g><title>event_listener::Event::listen (151 samples, 0.13%)</title><rect x="57.1064%" y="949" width="0.1326%" height="15" fill="rgb(228,69,28)" fg:x="65047" fg:w="151"/><text x="57.3564%" y="959.50"></text></g><g><title>event_listener::full_fence (14 samples, 0.01%)</title><rect x="57.2266%" y="933" width="0.0123%" height="15" fill="rgb(212,51,22)" fg:x="65184" fg:w="14"/><text x="57.4766%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (13 samples, 0.01%)</title><rect x="57.2275%" y="917" width="0.0114%" height="15" fill="rgb(227,113,0)" fg:x="65185" fg:w="13"/><text x="57.4775%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (13 samples, 0.01%)</title><rect x="57.2275%" y="901" width="0.0114%" height="15" fill="rgb(252,84,27)" fg:x="65185" fg:w="13"/><text x="57.4775%" y="911.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (23 samples, 0.02%)</title><rect x="57.2433%" y="517" width="0.0202%" height="15" fill="rgb(223,145,39)" fg:x="65203" fg:w="23"/><text x="57.4933%" y="527.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (22 samples, 0.02%)</title><rect x="57.2442%" y="501" width="0.0193%" height="15" fill="rgb(239,219,30)" fg:x="65204" fg:w="22"/><text x="57.4942%" y="511.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (22 samples, 0.02%)</title><rect x="57.2442%" y="485" width="0.0193%" height="15" fill="rgb(224,196,39)" fg:x="65204" fg:w="22"/><text x="57.4942%" y="495.50"></text></g><g><title>alloc::alloc::exchange_malloc (17 samples, 0.01%)</title><rect x="57.2486%" y="469" width="0.0149%" height="15" fill="rgb(205,35,43)" fg:x="65209" fg:w="17"/><text x="57.4986%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.01%)</title><rect x="57.2486%" y="453" width="0.0149%" height="15" fill="rgb(228,201,21)" fg:x="65209" fg:w="17"/><text x="57.4986%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.01%)</title><rect x="57.2486%" y="437" width="0.0149%" height="15" fill="rgb(237,118,16)" fg:x="65209" fg:w="17"/><text x="57.4986%" y="447.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.01%)</title><rect x="57.2486%" y="421" width="0.0149%" height="15" fill="rgb(241,17,19)" fg:x="65209" fg:w="17"/><text x="57.4986%" y="431.50"></text></g><g><title>__rg_alloc (17 samples, 0.01%)</title><rect x="57.2486%" y="405" width="0.0149%" height="15" fill="rgb(214,10,25)" fg:x="65209" fg:w="17"/><text x="57.4986%" y="415.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (17 samples, 0.01%)</title><rect x="57.2486%" y="389" width="0.0149%" height="15" fill="rgb(238,37,29)" fg:x="65209" fg:w="17"/><text x="57.4986%" y="399.50"></text></g><g><title>sn_rust_alloc (12 samples, 0.01%)</title><rect x="57.2530%" y="373" width="0.0105%" height="15" fill="rgb(253,83,25)" fg:x="65214" fg:w="12"/><text x="57.5030%" y="383.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (138 samples, 0.12%)</title><rect x="57.2714%" y="453" width="0.1212%" height="15" fill="rgb(234,192,12)" fg:x="65235" fg:w="138"/><text x="57.5214%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (138 samples, 0.12%)</title><rect x="57.2714%" y="437" width="0.1212%" height="15" fill="rgb(241,216,45)" fg:x="65235" fg:w="138"/><text x="57.5214%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (158 samples, 0.14%)</title><rect x="57.2644%" y="469" width="0.1387%" height="15" fill="rgb(242,22,33)" fg:x="65227" fg:w="158"/><text x="57.5144%" y="479.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_full (12 samples, 0.01%)</title><rect x="57.3926%" y="453" width="0.0105%" height="15" fill="rgb(231,105,49)" fg:x="65373" fg:w="12"/><text x="57.6426%" y="463.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (184 samples, 0.16%)</title><rect x="57.2424%" y="597" width="0.1615%" height="15" fill="rgb(218,204,15)" fg:x="65202" fg:w="184"/><text x="57.4924%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (184 samples, 0.16%)</title><rect x="57.2424%" y="581" width="0.1615%" height="15" fill="rgb(235,138,41)" fg:x="65202" fg:w="184"/><text x="57.4924%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (183 samples, 0.16%)</title><rect x="57.2433%" y="565" width="0.1607%" height="15" fill="rgb(246,0,9)" fg:x="65203" fg:w="183"/><text x="57.4933%" y="575.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (183 samples, 0.16%)</title><rect x="57.2433%" y="549" width="0.1607%" height="15" fill="rgb(210,74,4)" fg:x="65203" fg:w="183"/><text x="57.4933%" y="559.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (183 samples, 0.16%)</title><rect x="57.2433%" y="533" width="0.1607%" height="15" fill="rgb(250,60,41)" fg:x="65203" fg:w="183"/><text x="57.4933%" y="543.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::iter (160 samples, 0.14%)</title><rect x="57.2635%" y="517" width="0.1405%" height="15" fill="rgb(220,115,12)" fg:x="65226" fg:w="160"/><text x="57.5135%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (160 samples, 0.14%)</title><rect x="57.2635%" y="501" width="0.1405%" height="15" fill="rgb(237,100,13)" fg:x="65226" fg:w="160"/><text x="57.5135%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (160 samples, 0.14%)</title><rect x="57.2635%" y="485" width="0.1405%" height="15" fill="rgb(213,55,26)" fg:x="65226" fg:w="160"/><text x="57.5135%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (17 samples, 0.01%)</title><rect x="57.4716%" y="549" width="0.0149%" height="15" fill="rgb(216,17,4)" fg:x="65463" fg:w="17"/><text x="57.7216%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (39 samples, 0.03%)</title><rect x="57.6568%" y="373" width="0.0342%" height="15" fill="rgb(220,153,47)" fg:x="65674" fg:w="39"/><text x="57.9068%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (39 samples, 0.03%)</title><rect x="57.6568%" y="357" width="0.0342%" height="15" fill="rgb(215,131,9)" fg:x="65674" fg:w="39"/><text x="57.9068%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (73 samples, 0.06%)</title><rect x="57.6322%" y="405" width="0.0641%" height="15" fill="rgb(233,46,42)" fg:x="65646" fg:w="73"/><text x="57.8822%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (46 samples, 0.04%)</title><rect x="57.6559%" y="389" width="0.0404%" height="15" fill="rgb(226,86,7)" fg:x="65673" fg:w="46"/><text x="57.9059%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (824 samples, 0.72%)</title><rect x="57.6963%" y="405" width="0.7234%" height="15" fill="rgb(239,226,21)" fg:x="65719" fg:w="824"/><text x="57.9463%" y="415.50"></text></g><g><title>[libc-2.31.so] (783 samples, 0.69%)</title><rect x="57.7323%" y="389" width="0.6874%" height="15" fill="rgb(244,137,22)" fg:x="65760" fg:w="783"/><text x="57.9823%" y="399.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (956 samples, 0.84%)</title><rect x="57.5857%" y="501" width="0.8393%" height="15" fill="rgb(211,139,35)" fg:x="65593" fg:w="956"/><text x="57.8357%" y="511.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (956 samples, 0.84%)</title><rect x="57.5857%" y="485" width="0.8393%" height="15" fill="rgb(214,62,50)" fg:x="65593" fg:w="956"/><text x="57.8357%" y="495.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (956 samples, 0.84%)</title><rect x="57.5857%" y="469" width="0.8393%" height="15" fill="rgb(212,113,44)" fg:x="65593" fg:w="956"/><text x="57.8357%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (956 samples, 0.84%)</title><rect x="57.5857%" y="453" width="0.8393%" height="15" fill="rgb(226,150,43)" fg:x="65593" fg:w="956"/><text x="57.8357%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (956 samples, 0.84%)</title><rect x="57.5857%" y="437" width="0.8393%" height="15" fill="rgb(250,71,37)" fg:x="65593" fg:w="956"/><text x="57.8357%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (956 samples, 0.84%)</title><rect x="57.5857%" y="421" width="0.8393%" height="15" fill="rgb(219,76,19)" fg:x="65593" fg:w="956"/><text x="57.8357%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (27 samples, 0.02%)</title><rect x="58.5470%" y="357" width="0.0237%" height="15" fill="rgb(250,39,11)" fg:x="66688" fg:w="27"/><text x="58.7970%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (14 samples, 0.01%)</title><rect x="58.5751%" y="325" width="0.0123%" height="15" fill="rgb(230,64,31)" fg:x="66720" fg:w="14"/><text x="58.8251%" y="335.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (36 samples, 0.03%)</title><rect x="58.6023%" y="293" width="0.0316%" height="15" fill="rgb(208,222,23)" fg:x="66751" fg:w="36"/><text x="58.8523%" y="303.50"></text></g><g><title>[libc-2.31.so] (79 samples, 0.07%)</title><rect x="58.8429%" y="181" width="0.0694%" height="15" fill="rgb(227,125,18)" fg:x="67025" fg:w="79"/><text x="59.0929%" y="191.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (21 samples, 0.02%)</title><rect x="58.9202%" y="181" width="0.0184%" height="15" fill="rgb(234,210,9)" fg:x="67113" fg:w="21"/><text x="59.1702%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (345 samples, 0.30%)</title><rect x="58.6541%" y="277" width="0.3029%" height="15" fill="rgb(217,127,24)" fg:x="66810" fg:w="345"/><text x="58.9041%" y="287.50"></text></g><g><title>alloc::alloc::Global::grow_impl (345 samples, 0.30%)</title><rect x="58.6541%" y="261" width="0.3029%" height="15" fill="rgb(239,141,48)" fg:x="66810" fg:w="345"/><text x="58.9041%" y="271.50"></text></g><g><title>alloc::alloc::realloc (345 samples, 0.30%)</title><rect x="58.6541%" y="245" width="0.3029%" height="15" fill="rgb(227,109,8)" fg:x="66810" fg:w="345"/><text x="58.9041%" y="255.50"></text></g><g><title>__rg_realloc (345 samples, 0.30%)</title><rect x="58.6541%" y="229" width="0.3029%" height="15" fill="rgb(235,184,23)" fg:x="66810" fg:w="345"/><text x="58.9041%" y="239.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (345 samples, 0.30%)</title><rect x="58.6541%" y="213" width="0.3029%" height="15" fill="rgb(227,226,48)" fg:x="66810" fg:w="345"/><text x="58.9041%" y="223.50"></text></g><g><title>sn_rust_realloc (345 samples, 0.30%)</title><rect x="58.6541%" y="197" width="0.3029%" height="15" fill="rgb(206,150,11)" fg:x="66810" fg:w="345"/><text x="58.9041%" y="207.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (21 samples, 0.02%)</title><rect x="58.9386%" y="181" width="0.0184%" height="15" fill="rgb(254,2,33)" fg:x="67134" fg:w="21"/><text x="59.1886%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (362 samples, 0.32%)</title><rect x="58.6419%" y="293" width="0.3178%" height="15" fill="rgb(243,160,20)" fg:x="66796" fg:w="362"/><text x="58.8919%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (449 samples, 0.39%)</title><rect x="58.5707%" y="357" width="0.3942%" height="15" fill="rgb(218,208,30)" fg:x="66715" fg:w="449"/><text x="58.8207%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (448 samples, 0.39%)</title><rect x="58.5716%" y="341" width="0.3933%" height="15" fill="rgb(224,120,49)" fg:x="66716" fg:w="448"/><text x="58.8216%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (430 samples, 0.38%)</title><rect x="58.5874%" y="325" width="0.3775%" height="15" fill="rgb(246,12,2)" fg:x="66734" fg:w="430"/><text x="58.8374%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (430 samples, 0.38%)</title><rect x="58.5874%" y="309" width="0.3775%" height="15" fill="rgb(236,117,3)" fg:x="66734" fg:w="430"/><text x="58.8374%" y="319.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (512 samples, 0.45%)</title><rect x="58.5295%" y="469" width="0.4495%" height="15" fill="rgb(216,128,52)" fg:x="66668" fg:w="512"/><text x="58.7795%" y="479.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (512 samples, 0.45%)</title><rect x="58.5295%" y="453" width="0.4495%" height="15" fill="rgb(246,145,19)" fg:x="66668" fg:w="512"/><text x="58.7795%" y="463.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (512 samples, 0.45%)</title><rect x="58.5295%" y="437" width="0.4495%" height="15" fill="rgb(222,11,46)" fg:x="66668" fg:w="512"/><text x="58.7795%" y="447.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (512 samples, 0.45%)</title><rect x="58.5295%" y="421" width="0.4495%" height="15" fill="rgb(245,82,36)" fg:x="66668" fg:w="512"/><text x="58.7795%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (512 samples, 0.45%)</title><rect x="58.5295%" y="405" width="0.4495%" height="15" fill="rgb(250,73,51)" fg:x="66668" fg:w="512"/><text x="58.7795%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (512 samples, 0.45%)</title><rect x="58.5295%" y="389" width="0.4495%" height="15" fill="rgb(221,189,23)" fg:x="66668" fg:w="512"/><text x="58.7795%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (512 samples, 0.45%)</title><rect x="58.5295%" y="373" width="0.4495%" height="15" fill="rgb(210,33,7)" fg:x="66668" fg:w="512"/><text x="58.7795%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (16 samples, 0.01%)</title><rect x="58.9649%" y="357" width="0.0140%" height="15" fill="rgb(210,107,22)" fg:x="67164" fg:w="16"/><text x="59.2149%" y="367.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeMap&gt;::serialize_key (1,928 samples, 1.69%)</title><rect x="57.4171%" y="581" width="1.6926%" height="15" fill="rgb(222,116,37)" fg:x="65401" fg:w="1928"/><text x="57.6671%" y="591.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeSeq&gt;::serialize_element (1,928 samples, 1.69%)</title><rect x="57.4171%" y="565" width="1.6926%" height="15" fill="rgb(254,17,48)" fg:x="65401" fg:w="1928"/><text x="57.6671%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for str&gt;::serialize (1,849 samples, 1.62%)</title><rect x="57.4865%" y="549" width="1.6233%" height="15" fill="rgb(224,36,32)" fg:x="65480" fg:w="1849"/><text x="57.7365%" y="559.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_str (1,849 samples, 1.62%)</title><rect x="57.4865%" y="533" width="1.6233%" height="15" fill="rgb(232,90,46)" fg:x="65480" fg:w="1849"/><text x="57.7365%" y="543.50"></text></g><g><title>rmp::encode::str::write_str (1,768 samples, 1.55%)</title><rect x="57.5576%" y="517" width="1.5522%" height="15" fill="rgb(241,66,40)" fg:x="65561" fg:w="1768"/><text x="57.8076%" y="527.50"></text></g><g><title>rmp::encode::str::write_str_len (780 samples, 0.68%)</title><rect x="58.4250%" y="501" width="0.6848%" height="15" fill="rgb(249,184,29)" fg:x="66549" fg:w="780"/><text x="58.6750%" y="511.50"></text></g><g><title>rmp::encode::write_marker (686 samples, 0.60%)</title><rect x="58.5075%" y="485" width="0.6023%" height="15" fill="rgb(231,181,1)" fg:x="66643" fg:w="686"/><text x="58.7575%" y="495.50"></text></g><g><title>rmp::marker::Marker::to_u8 (149 samples, 0.13%)</title><rect x="58.9790%" y="469" width="0.1308%" height="15" fill="rgb(224,94,2)" fg:x="67180" fg:w="149"/><text x="59.2290%" y="479.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_bool (37 samples, 0.03%)</title><rect x="59.3565%" y="533" width="0.0325%" height="15" fill="rgb(229,170,15)" fg:x="67610" fg:w="37"/><text x="59.6065%" y="543.50"></text></g><g><title>rmp::encode::write_bool (35 samples, 0.03%)</title><rect x="59.3582%" y="517" width="0.0307%" height="15" fill="rgb(240,127,35)" fg:x="67612" fg:w="35"/><text x="59.6082%" y="527.50"></text></g><g><title>rmp::encode::write_marker (32 samples, 0.03%)</title><rect x="59.3609%" y="501" width="0.0281%" height="15" fill="rgb(248,196,34)" fg:x="67615" fg:w="32"/><text x="59.6109%" y="511.50"></text></g><g><title>rmp::marker::Marker::to_u8 (18 samples, 0.02%)</title><rect x="59.3732%" y="485" width="0.0158%" height="15" fill="rgb(236,137,7)" fg:x="67629" fg:w="18"/><text x="59.6232%" y="495.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (15 samples, 0.01%)</title><rect x="59.4048%" y="453" width="0.0132%" height="15" fill="rgb(235,127,16)" fg:x="67665" fg:w="15"/><text x="59.6548%" y="463.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (15 samples, 0.01%)</title><rect x="59.4048%" y="437" width="0.0132%" height="15" fill="rgb(250,192,54)" fg:x="67665" fg:w="15"/><text x="59.6548%" y="447.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (15 samples, 0.01%)</title><rect x="59.4048%" y="421" width="0.0132%" height="15" fill="rgb(218,98,20)" fg:x="67665" fg:w="15"/><text x="59.6548%" y="431.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (15 samples, 0.01%)</title><rect x="59.4048%" y="405" width="0.0132%" height="15" fill="rgb(230,176,47)" fg:x="67665" fg:w="15"/><text x="59.6548%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (15 samples, 0.01%)</title><rect x="59.4048%" y="389" width="0.0132%" height="15" fill="rgb(244,2,33)" fg:x="67665" fg:w="15"/><text x="59.6548%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (15 samples, 0.01%)</title><rect x="59.4048%" y="373" width="0.0132%" height="15" fill="rgb(231,100,17)" fg:x="67665" fg:w="15"/><text x="59.6548%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (15 samples, 0.01%)</title><rect x="59.4048%" y="357" width="0.0132%" height="15" fill="rgb(245,23,12)" fg:x="67665" fg:w="15"/><text x="59.6548%" y="367.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_seq::{{closure}} (38 samples, 0.03%)</title><rect x="59.3890%" y="501" width="0.0334%" height="15" fill="rgb(249,55,22)" fg:x="67647" fg:w="38"/><text x="59.6390%" y="511.50"></text></g><g><title>rmp::encode::write_array_len (27 samples, 0.02%)</title><rect x="59.3986%" y="485" width="0.0237%" height="15" fill="rgb(207,134,9)" fg:x="67658" fg:w="27"/><text x="59.6486%" y="495.50"></text></g><g><title>rmp::encode::write_marker (22 samples, 0.02%)</title><rect x="59.4030%" y="469" width="0.0193%" height="15" fill="rgb(218,134,0)" fg:x="67663" fg:w="22"/><text x="59.6530%" y="479.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_seq (42 samples, 0.04%)</title><rect x="59.3890%" y="533" width="0.0369%" height="15" fill="rgb(213,212,33)" fg:x="67647" fg:w="42"/><text x="59.6390%" y="543.50"></text></g><g><title>rmp_serde::encode::Serializer&lt;W,C&gt;::maybe_unknown_len_compound (42 samples, 0.04%)</title><rect x="59.3890%" y="517" width="0.0369%" height="15" fill="rgb(252,106,18)" fg:x="67647" fg:w="42"/><text x="59.6390%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (34 samples, 0.03%)</title><rect x="59.5856%" y="373" width="0.0298%" height="15" fill="rgb(208,126,42)" fg:x="67871" fg:w="34"/><text x="59.8356%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (33 samples, 0.03%)</title><rect x="59.5865%" y="357" width="0.0290%" height="15" fill="rgb(246,175,29)" fg:x="67872" fg:w="33"/><text x="59.8365%" y="367.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (80 samples, 0.07%)</title><rect x="59.6207%" y="341" width="0.0702%" height="15" fill="rgb(215,13,50)" fg:x="67911" fg:w="80"/><text x="59.8707%" y="351.50"></text></g><g><title>[libc-2.31.so] (23 samples, 0.02%)</title><rect x="59.9043%" y="229" width="0.0202%" height="15" fill="rgb(216,172,15)" fg:x="68234" fg:w="23"/><text x="60.1543%" y="239.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (12 samples, 0.01%)</title><rect x="59.9271%" y="229" width="0.0105%" height="15" fill="rgb(212,103,13)" fg:x="68260" fg:w="12"/><text x="60.1771%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (272 samples, 0.24%)</title><rect x="59.7094%" y="325" width="0.2388%" height="15" fill="rgb(231,171,36)" fg:x="68012" fg:w="272"/><text x="59.9594%" y="335.50"></text></g><g><title>alloc::alloc::Global::grow_impl (272 samples, 0.24%)</title><rect x="59.7094%" y="309" width="0.2388%" height="15" fill="rgb(250,123,20)" fg:x="68012" fg:w="272"/><text x="59.9594%" y="319.50"></text></g><g><title>alloc::alloc::realloc (272 samples, 0.24%)</title><rect x="59.7094%" y="293" width="0.2388%" height="15" fill="rgb(212,53,50)" fg:x="68012" fg:w="272"/><text x="59.9594%" y="303.50"></text></g><g><title>__rg_realloc (272 samples, 0.24%)</title><rect x="59.7094%" y="277" width="0.2388%" height="15" fill="rgb(243,54,12)" fg:x="68012" fg:w="272"/><text x="59.9594%" y="287.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (272 samples, 0.24%)</title><rect x="59.7094%" y="261" width="0.2388%" height="15" fill="rgb(234,101,34)" fg:x="68012" fg:w="272"/><text x="59.9594%" y="271.50"></text></g><g><title>sn_rust_realloc (272 samples, 0.24%)</title><rect x="59.7094%" y="245" width="0.2388%" height="15" fill="rgb(254,67,22)" fg:x="68012" fg:w="272"/><text x="59.9594%" y="255.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (12 samples, 0.01%)</title><rect x="59.9377%" y="229" width="0.0105%" height="15" fill="rgb(250,35,47)" fg:x="68272" fg:w="12"/><text x="60.1877%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (286 samples, 0.25%)</title><rect x="59.6997%" y="341" width="0.2511%" height="15" fill="rgb(226,126,38)" fg:x="68001" fg:w="286"/><text x="59.9497%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (454 samples, 0.40%)</title><rect x="59.5637%" y="405" width="0.3986%" height="15" fill="rgb(216,138,53)" fg:x="67846" fg:w="454"/><text x="59.8137%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (444 samples, 0.39%)</title><rect x="59.5725%" y="389" width="0.3898%" height="15" fill="rgb(246,199,43)" fg:x="67856" fg:w="444"/><text x="59.8225%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (395 samples, 0.35%)</title><rect x="59.6155%" y="373" width="0.3468%" height="15" fill="rgb(232,125,11)" fg:x="67905" fg:w="395"/><text x="59.8655%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (395 samples, 0.35%)</title><rect x="59.6155%" y="357" width="0.3468%" height="15" fill="rgb(218,219,45)" fg:x="67905" fg:w="395"/><text x="59.8655%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (424 samples, 0.37%)</title><rect x="59.9622%" y="405" width="0.3722%" height="15" fill="rgb(216,102,54)" fg:x="68300" fg:w="424"/><text x="60.2122%" y="415.50"></text></g><g><title>[libc-2.31.so] (400 samples, 0.35%)</title><rect x="59.9833%" y="389" width="0.3512%" height="15" fill="rgb(250,228,7)" fg:x="68324" fg:w="400"/><text x="60.2333%" y="399.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (920 samples, 0.81%)</title><rect x="59.5321%" y="501" width="0.8077%" height="15" fill="rgb(226,125,25)" fg:x="67810" fg:w="920"/><text x="59.7821%" y="511.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (920 samples, 0.81%)</title><rect x="59.5321%" y="485" width="0.8077%" height="15" fill="rgb(224,165,27)" fg:x="67810" fg:w="920"/><text x="59.7821%" y="495.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (920 samples, 0.81%)</title><rect x="59.5321%" y="469" width="0.8077%" height="15" fill="rgb(233,86,3)" fg:x="67810" fg:w="920"/><text x="59.7821%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (920 samples, 0.81%)</title><rect x="59.5321%" y="453" width="0.8077%" height="15" fill="rgb(228,116,20)" fg:x="67810" fg:w="920"/><text x="59.7821%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (920 samples, 0.81%)</title><rect x="59.5321%" y="437" width="0.8077%" height="15" fill="rgb(209,192,17)" fg:x="67810" fg:w="920"/><text x="59.7821%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (920 samples, 0.81%)</title><rect x="59.5321%" y="421" width="0.8077%" height="15" fill="rgb(224,88,34)" fg:x="67810" fg:w="920"/><text x="59.7821%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (27 samples, 0.02%)</title><rect x="60.4232%" y="357" width="0.0237%" height="15" fill="rgb(233,38,6)" fg:x="68825" fg:w="27"/><text x="60.6732%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (23 samples, 0.02%)</title><rect x="60.4469%" y="357" width="0.0202%" height="15" fill="rgb(212,59,30)" fg:x="68852" fg:w="23"/><text x="60.6969%" y="367.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (66 samples, 0.06%)</title><rect x="60.4196%" y="469" width="0.0579%" height="15" fill="rgb(213,80,3)" fg:x="68821" fg:w="66"/><text x="60.6696%" y="479.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (66 samples, 0.06%)</title><rect x="60.4196%" y="453" width="0.0579%" height="15" fill="rgb(251,178,7)" fg:x="68821" fg:w="66"/><text x="60.6696%" y="463.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (66 samples, 0.06%)</title><rect x="60.4196%" y="437" width="0.0579%" height="15" fill="rgb(213,154,26)" fg:x="68821" fg:w="66"/><text x="60.6696%" y="447.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (66 samples, 0.06%)</title><rect x="60.4196%" y="421" width="0.0579%" height="15" fill="rgb(238,165,49)" fg:x="68821" fg:w="66"/><text x="60.6696%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (66 samples, 0.06%)</title><rect x="60.4196%" y="405" width="0.0579%" height="15" fill="rgb(248,91,46)" fg:x="68821" fg:w="66"/><text x="60.6696%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (66 samples, 0.06%)</title><rect x="60.4196%" y="389" width="0.0579%" height="15" fill="rgb(244,21,52)" fg:x="68821" fg:w="66"/><text x="60.6696%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (66 samples, 0.06%)</title><rect x="60.4196%" y="373" width="0.0579%" height="15" fill="rgb(247,122,20)" fg:x="68821" fg:w="66"/><text x="60.6696%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.01%)</title><rect x="60.4671%" y="357" width="0.0105%" height="15" fill="rgb(218,27,9)" fg:x="68875" fg:w="12"/><text x="60.7171%" y="367.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_str (1,264 samples, 1.11%)</title><rect x="59.4258%" y="533" width="1.1097%" height="15" fill="rgb(246,7,6)" fg:x="67689" fg:w="1264"/><text x="59.6758%" y="543.50"></text></g><g><title>rmp::encode::str::write_str (1,180 samples, 1.04%)</title><rect x="59.4996%" y="517" width="1.0360%" height="15" fill="rgb(227,135,54)" fg:x="67773" fg:w="1180"/><text x="59.7496%" y="527.50"></text></g><g><title>rmp::encode::str::write_str_len (223 samples, 0.20%)</title><rect x="60.3398%" y="501" width="0.1958%" height="15" fill="rgb(247,14,11)" fg:x="68730" fg:w="223"/><text x="60.5898%" y="511.50"></text></g><g><title>rmp::encode::write_marker (154 samples, 0.14%)</title><rect x="60.4003%" y="485" width="0.1352%" height="15" fill="rgb(206,149,34)" fg:x="68799" fg:w="154"/><text x="60.6503%" y="495.50"></text></g><g><title>rmp::marker::Marker::to_u8 (66 samples, 0.06%)</title><rect x="60.4776%" y="469" width="0.0579%" height="15" fill="rgb(227,228,4)" fg:x="68887" fg:w="66"/><text x="60.7276%" y="479.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_u64 (58 samples, 0.05%)</title><rect x="60.5355%" y="533" width="0.0509%" height="15" fill="rgb(238,218,28)" fg:x="68953" fg:w="58"/><text x="60.7855%" y="543.50"></text></g><g><title>rmp::encode::uint::write_uint (54 samples, 0.05%)</title><rect x="60.5390%" y="517" width="0.0474%" height="15" fill="rgb(252,86,40)" fg:x="68957" fg:w="54"/><text x="60.7890%" y="527.50"></text></g><g><title>rmp::encode::uint::write_pfix (51 samples, 0.04%)</title><rect x="60.5417%" y="501" width="0.0448%" height="15" fill="rgb(251,225,11)" fg:x="68960" fg:w="51"/><text x="60.7917%" y="511.50"></text></g><g><title>rmp::encode::write_marker (39 samples, 0.03%)</title><rect x="60.5522%" y="485" width="0.0342%" height="15" fill="rgb(206,46,49)" fg:x="68972" fg:w="39"/><text x="60.8022%" y="495.50"></text></g><g><title>rmp::marker::Marker::to_u8 (20 samples, 0.02%)</title><rect x="60.5689%" y="469" width="0.0176%" height="15" fill="rgb(245,128,24)" fg:x="68991" fg:w="20"/><text x="60.8189%" y="479.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (69 samples, 0.06%)</title><rect x="60.5900%" y="533" width="0.0606%" height="15" fill="rgb(219,177,34)" fg:x="69015" fg:w="69"/><text x="60.8400%" y="543.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.02%)</title><rect x="60.6505%" y="533" width="0.0158%" height="15" fill="rgb(218,60,48)" fg:x="69084" fg:w="18"/><text x="60.9005%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (36 samples, 0.03%)</title><rect x="60.7173%" y="517" width="0.0316%" height="15" fill="rgb(221,11,5)" fg:x="69160" fg:w="36"/><text x="60.9673%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (60 samples, 0.05%)</title><rect x="61.7655%" y="373" width="0.0527%" height="15" fill="rgb(220,148,13)" fg:x="70354" fg:w="60"/><text x="62.0155%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (44 samples, 0.04%)</title><rect x="61.7796%" y="357" width="0.0386%" height="15" fill="rgb(210,16,3)" fg:x="70370" fg:w="44"/><text x="62.0296%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (25 samples, 0.02%)</title><rect x="61.7962%" y="341" width="0.0219%" height="15" fill="rgb(236,80,2)" fg:x="70389" fg:w="25"/><text x="62.0462%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (22 samples, 0.02%)</title><rect x="61.7989%" y="325" width="0.0193%" height="15" fill="rgb(239,129,19)" fg:x="70392" fg:w="22"/><text x="62.0489%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (168 samples, 0.15%)</title><rect x="61.8182%" y="373" width="0.1475%" height="15" fill="rgb(220,106,35)" fg:x="70414" fg:w="168"/><text x="62.0682%" y="383.50"></text></g><g><title>[libc-2.31.so] (151 samples, 0.13%)</title><rect x="61.8331%" y="357" width="0.1326%" height="15" fill="rgb(252,139,45)" fg:x="70431" fg:w="151"/><text x="62.0831%" y="367.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (249 samples, 0.22%)</title><rect x="61.7506%" y="469" width="0.2186%" height="15" fill="rgb(229,8,36)" fg:x="70337" fg:w="249"/><text x="62.0006%" y="479.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (249 samples, 0.22%)</title><rect x="61.7506%" y="453" width="0.2186%" height="15" fill="rgb(230,126,33)" fg:x="70337" fg:w="249"/><text x="62.0006%" y="463.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (249 samples, 0.22%)</title><rect x="61.7506%" y="437" width="0.2186%" height="15" fill="rgb(239,140,21)" fg:x="70337" fg:w="249"/><text x="62.0006%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (249 samples, 0.22%)</title><rect x="61.7506%" y="421" width="0.2186%" height="15" fill="rgb(254,104,9)" fg:x="70337" fg:w="249"/><text x="62.0006%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (249 samples, 0.22%)</title><rect x="61.7506%" y="405" width="0.2186%" height="15" fill="rgb(239,52,14)" fg:x="70337" fg:w="249"/><text x="62.0006%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (249 samples, 0.22%)</title><rect x="61.7506%" y="389" width="0.2186%" height="15" fill="rgb(208,227,44)" fg:x="70337" fg:w="249"/><text x="62.0006%" y="399.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (40 samples, 0.04%)</title><rect x="62.0324%" y="437" width="0.0351%" height="15" fill="rgb(246,18,19)" fg:x="70658" fg:w="40"/><text x="62.2824%" y="447.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (40 samples, 0.04%)</title><rect x="62.0324%" y="421" width="0.0351%" height="15" fill="rgb(235,228,25)" fg:x="70658" fg:w="40"/><text x="62.2824%" y="431.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (40 samples, 0.04%)</title><rect x="62.0324%" y="405" width="0.0351%" height="15" fill="rgb(240,156,20)" fg:x="70658" fg:w="40"/><text x="62.2824%" y="415.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (40 samples, 0.04%)</title><rect x="62.0324%" y="389" width="0.0351%" height="15" fill="rgb(224,8,20)" fg:x="70658" fg:w="40"/><text x="62.2824%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (40 samples, 0.04%)</title><rect x="62.0324%" y="373" width="0.0351%" height="15" fill="rgb(214,12,52)" fg:x="70658" fg:w="40"/><text x="62.2824%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (40 samples, 0.04%)</title><rect x="62.0324%" y="357" width="0.0351%" height="15" fill="rgb(211,220,47)" fg:x="70658" fg:w="40"/><text x="62.2824%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (40 samples, 0.04%)</title><rect x="62.0324%" y="341" width="0.0351%" height="15" fill="rgb(250,173,5)" fg:x="70658" fg:w="40"/><text x="62.2824%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (34 samples, 0.03%)</title><rect x="62.0377%" y="325" width="0.0298%" height="15" fill="rgb(250,125,52)" fg:x="70664" fg:w="34"/><text x="62.2877%" y="335.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_str (460 samples, 0.40%)</title><rect x="61.6979%" y="501" width="0.4038%" height="15" fill="rgb(209,133,18)" fg:x="70277" fg:w="460"/><text x="61.9479%" y="511.50"></text></g><g><title>rmp::encode::str::write_str (421 samples, 0.37%)</title><rect x="61.7321%" y="485" width="0.3696%" height="15" fill="rgb(216,173,22)" fg:x="70316" fg:w="421"/><text x="61.9821%" y="495.50"></text></g><g><title>rmp::encode::str::write_str_len (151 samples, 0.13%)</title><rect x="61.9692%" y="469" width="0.1326%" height="15" fill="rgb(205,3,22)" fg:x="70586" fg:w="151"/><text x="62.2192%" y="479.50"></text></g><g><title>rmp::encode::write_marker (108 samples, 0.09%)</title><rect x="62.0069%" y="453" width="0.0948%" height="15" fill="rgb(248,22,20)" fg:x="70629" fg:w="108"/><text x="62.2569%" y="463.50"></text></g><g><title>rmp::marker::Marker::to_u8 (39 samples, 0.03%)</title><rect x="62.0675%" y="437" width="0.0342%" height="15" fill="rgb(233,6,29)" fg:x="70698" fg:w="39"/><text x="62.3175%" y="447.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (32 samples, 0.03%)</title><rect x="62.1097%" y="485" width="0.0281%" height="15" fill="rgb(240,22,54)" fg:x="70746" fg:w="32"/><text x="62.3597%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (30 samples, 0.03%)</title><rect x="62.2659%" y="325" width="0.0263%" height="15" fill="rgb(231,133,32)" fg:x="70924" fg:w="30"/><text x="62.5159%" y="335.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (67 samples, 0.06%)</title><rect x="62.2659%" y="437" width="0.0588%" height="15" fill="rgb(248,193,4)" fg:x="70924" fg:w="67"/><text x="62.5159%" y="447.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (67 samples, 0.06%)</title><rect x="62.2659%" y="421" width="0.0588%" height="15" fill="rgb(211,178,46)" fg:x="70924" fg:w="67"/><text x="62.5159%" y="431.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (67 samples, 0.06%)</title><rect x="62.2659%" y="405" width="0.0588%" height="15" fill="rgb(224,5,42)" fg:x="70924" fg:w="67"/><text x="62.5159%" y="415.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (67 samples, 0.06%)</title><rect x="62.2659%" y="389" width="0.0588%" height="15" fill="rgb(239,176,25)" fg:x="70924" fg:w="67"/><text x="62.5159%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (67 samples, 0.06%)</title><rect x="62.2659%" y="373" width="0.0588%" height="15" fill="rgb(245,187,50)" fg:x="70924" fg:w="67"/><text x="62.5159%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (67 samples, 0.06%)</title><rect x="62.2659%" y="357" width="0.0588%" height="15" fill="rgb(248,24,15)" fg:x="70924" fg:w="67"/><text x="62.5159%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (67 samples, 0.06%)</title><rect x="62.2659%" y="341" width="0.0588%" height="15" fill="rgb(205,166,13)" fg:x="70924" fg:w="67"/><text x="62.5159%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (32 samples, 0.03%)</title><rect x="62.2967%" y="325" width="0.0281%" height="15" fill="rgb(208,114,23)" fg:x="70959" fg:w="32"/><text x="62.5467%" y="335.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_u64 (355 samples, 0.31%)</title><rect x="62.1018%" y="501" width="0.3117%" height="15" fill="rgb(239,127,18)" fg:x="70737" fg:w="355"/><text x="62.3518%" y="511.50"></text></g><g><title>rmp::encode::uint::write_uint (314 samples, 0.28%)</title><rect x="62.1377%" y="485" width="0.2757%" height="15" fill="rgb(219,154,28)" fg:x="70778" fg:w="314"/><text x="62.3877%" y="495.50"></text></g><g><title>rmp::encode::uint::write_pfix (252 samples, 0.22%)</title><rect x="62.1922%" y="469" width="0.2212%" height="15" fill="rgb(225,157,23)" fg:x="70840" fg:w="252"/><text x="62.4422%" y="479.50"></text></g><g><title>rmp::encode::write_marker (193 samples, 0.17%)</title><rect x="62.2440%" y="453" width="0.1694%" height="15" fill="rgb(219,8,6)" fg:x="70899" fg:w="193"/><text x="62.4940%" y="463.50"></text></g><g><title>rmp::marker::Marker::to_u8 (101 samples, 0.09%)</title><rect x="62.3247%" y="437" width="0.0887%" height="15" fill="rgb(212,47,6)" fg:x="70991" fg:w="101"/><text x="62.5747%" y="447.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeSeq&gt;::serialize_element (2,063 samples, 1.81%)</title><rect x="60.6751%" y="533" width="1.8112%" height="15" fill="rgb(224,190,4)" fg:x="69112" fg:w="2063"/><text x="60.9251%" y="543.50">&lt;..</text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (1,979 samples, 1.74%)</title><rect x="60.7489%" y="517" width="1.7374%" height="15" fill="rgb(239,183,29)" fg:x="69196" fg:w="1979"/><text x="60.9989%" y="527.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (83 samples, 0.07%)</title><rect x="62.4134%" y="501" width="0.0729%" height="15" fill="rgb(213,57,7)" fg:x="71092" fg:w="83"/><text x="62.6634%" y="511.50"></text></g><g><title>&lt;tremor_runtime::codec::msgpack::MsgPack as tremor_runtime::codec::Codec&gt;::encode (5,984 samples, 5.25%)</title><rect x="57.2389%" y="677" width="5.2535%" height="15" fill="rgb(216,148,1)" fg:x="65198" fg:w="5984"/><text x="57.4889%" y="687.50">&lt;tremo..</text></g><g><title>rmp_serde::encode::to_vec (5,984 samples, 5.25%)</title><rect x="57.2389%" y="661" width="5.2535%" height="15" fill="rgb(236,182,29)" fg:x="65198" fg:w="5984"/><text x="57.4889%" y="671.50">rmp_se..</text></g><g><title>rmp_serde::encode::write (5,984 samples, 5.25%)</title><rect x="57.2389%" y="645" width="5.2535%" height="15" fill="rgb(244,120,48)" fg:x="65198" fg:w="5984"/><text x="57.4889%" y="655.50">rmp_se..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5,984 samples, 5.25%)</title><rect x="57.2389%" y="629" width="5.2535%" height="15" fill="rgb(206,71,34)" fg:x="65198" fg:w="5984"/><text x="57.4889%" y="639.50">serde:..</text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (5,984 samples, 5.25%)</title><rect x="57.2389%" y="613" width="5.2535%" height="15" fill="rgb(242,32,6)" fg:x="65198" fg:w="5984"/><text x="57.4889%" y="623.50">tremor..</text></g><g><title>serde::ser::SerializeMap::serialize_entry (5,796 samples, 5.09%)</title><rect x="57.4040%" y="597" width="5.0885%" height="15" fill="rgb(241,35,3)" fg:x="65386" fg:w="5796"/><text x="57.6540%" y="607.50">serde:..</text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeMap&gt;::serialize_value (3,853 samples, 3.38%)</title><rect x="59.1098%" y="581" width="3.3826%" height="15" fill="rgb(222,62,19)" fg:x="67329" fg:w="3853"/><text x="59.3598%" y="591.50">&lt;rm..</text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeSeq&gt;::serialize_element (3,853 samples, 3.38%)</title><rect x="59.1098%" y="565" width="3.3826%" height="15" fill="rgb(223,110,41)" fg:x="67329" fg:w="3853"/><text x="59.3598%" y="575.50">&lt;rm..</text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (3,816 samples, 3.35%)</title><rect x="59.1423%" y="549" width="3.3502%" height="15" fill="rgb(208,224,4)" fg:x="67366" fg:w="3816"/><text x="59.3923%" y="559.50">tre..</text></g><g><title>alloc::alloc::exchange_malloc (34 samples, 0.03%)</title><rect x="62.5214%" y="661" width="0.0298%" height="15" fill="rgb(241,137,19)" fg:x="71215" fg:w="34"/><text x="62.7714%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (34 samples, 0.03%)</title><rect x="62.5214%" y="645" width="0.0298%" height="15" fill="rgb(244,24,17)" fg:x="71215" fg:w="34"/><text x="62.7714%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (34 samples, 0.03%)</title><rect x="62.5214%" y="629" width="0.0298%" height="15" fill="rgb(245,178,49)" fg:x="71215" fg:w="34"/><text x="62.7714%" y="639.50"></text></g><g><title>alloc::alloc::alloc (30 samples, 0.03%)</title><rect x="62.5249%" y="613" width="0.0263%" height="15" fill="rgb(219,160,38)" fg:x="71219" fg:w="30"/><text x="62.7749%" y="623.50"></text></g><g><title>__rg_alloc (30 samples, 0.03%)</title><rect x="62.5249%" y="597" width="0.0263%" height="15" fill="rgb(228,137,14)" fg:x="71219" fg:w="30"/><text x="62.7749%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (30 samples, 0.03%)</title><rect x="62.5249%" y="581" width="0.0263%" height="15" fill="rgb(237,134,11)" fg:x="71219" fg:w="30"/><text x="62.7749%" y="591.50"></text></g><g><title>sn_rust_alloc (30 samples, 0.03%)</title><rect x="62.5249%" y="565" width="0.0263%" height="15" fill="rgb(211,126,44)" fg:x="71219" fg:w="30"/><text x="62.7749%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (19 samples, 0.02%)</title><rect x="62.5644%" y="645" width="0.0167%" height="15" fill="rgb(226,171,33)" fg:x="71264" fg:w="19"/><text x="62.8144%" y="655.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (54 samples, 0.05%)</title><rect x="62.5908%" y="629" width="0.0474%" height="15" fill="rgb(253,99,13)" fg:x="71294" fg:w="54"/><text x="62.8408%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (25 samples, 0.02%)</title><rect x="62.6619%" y="597" width="0.0219%" height="15" fill="rgb(244,48,7)" fg:x="71375" fg:w="25"/><text x="62.9119%" y="607.50"></text></g><g><title>core::cmp::PartialOrd::ge (25 samples, 0.02%)</title><rect x="62.6619%" y="581" width="0.0219%" height="15" fill="rgb(244,217,54)" fg:x="71375" fg:w="25"/><text x="62.9119%" y="591.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (25 samples, 0.02%)</title><rect x="62.6619%" y="565" width="0.0219%" height="15" fill="rgb(224,15,18)" fg:x="71375" fg:w="25"/><text x="62.9119%" y="575.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (25 samples, 0.02%)</title><rect x="62.6619%" y="549" width="0.0219%" height="15" fill="rgb(244,99,12)" fg:x="71375" fg:w="25"/><text x="62.9119%" y="559.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (25 samples, 0.02%)</title><rect x="62.6619%" y="533" width="0.0219%" height="15" fill="rgb(233,226,8)" fg:x="71375" fg:w="25"/><text x="62.9119%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (13 samples, 0.01%)</title><rect x="62.6724%" y="517" width="0.0114%" height="15" fill="rgb(229,211,3)" fg:x="71387" fg:w="13"/><text x="62.9224%" y="527.50"></text></g><g><title>std::time::SystemTime::duration_since (116 samples, 0.10%)</title><rect x="62.5908%" y="645" width="0.1018%" height="15" fill="rgb(216,140,21)" fg:x="71294" fg:w="116"/><text x="62.8408%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (62 samples, 0.05%)</title><rect x="62.6382%" y="629" width="0.0544%" height="15" fill="rgb(234,122,30)" fg:x="71348" fg:w="62"/><text x="62.8882%" y="639.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (62 samples, 0.05%)</title><rect x="62.6382%" y="613" width="0.0544%" height="15" fill="rgb(236,25,46)" fg:x="71348" fg:w="62"/><text x="62.8882%" y="623.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (9,420 samples, 8.27%)</title><rect x="54.6227%" y="1045" width="8.2700%" height="15" fill="rgb(217,52,54)" fg:x="62218" fg:w="9420"/><text x="54.8727%" y="1055.50">tremor_runti..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,440 samples, 5.65%)</title><rect x="57.2389%" y="1029" width="5.6538%" height="15" fill="rgb(222,29,26)" fg:x="65198" fg:w="6440"/><text x="57.4889%" y="1039.50">&lt;core::..</text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (6,440 samples, 5.65%)</title><rect x="57.2389%" y="1013" width="5.6538%" height="15" fill="rgb(216,177,29)" fg:x="65198" fg:w="6440"/><text x="57.4889%" y="1023.50">tremor_..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,440 samples, 5.65%)</title><rect x="57.2389%" y="997" width="5.6538%" height="15" fill="rgb(247,136,51)" fg:x="65198" fg:w="6440"/><text x="57.4889%" y="1007.50">&lt;async_..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,440 samples, 5.65%)</title><rect x="57.2389%" y="981" width="5.6538%" height="15" fill="rgb(231,47,47)" fg:x="65198" fg:w="6440"/><text x="57.4889%" y="991.50">&lt;async_..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (6,440 samples, 5.65%)</title><rect x="57.2389%" y="965" width="5.6538%" height="15" fill="rgb(211,192,36)" fg:x="65198" fg:w="6440"/><text x="57.4889%" y="975.50">&lt;core::..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (6,440 samples, 5.65%)</title><rect x="57.2389%" y="949" width="5.6538%" height="15" fill="rgb(229,156,32)" fg:x="65198" fg:w="6440"/><text x="57.4889%" y="959.50">&lt;async_..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (6,440 samples, 5.65%)</title><rect x="57.2389%" y="933" width="5.6538%" height="15" fill="rgb(248,213,20)" fg:x="65198" fg:w="6440"/><text x="57.4889%" y="943.50">async_f..</text></g><g><title>std::panic::catch_unwind (6,440 samples, 5.65%)</title><rect x="57.2389%" y="917" width="5.6538%" height="15" fill="rgb(217,64,7)" fg:x="65198" fg:w="6440"/><text x="57.4889%" y="927.50">std::pa..</text></g><g><title>std::panicking::try (6,440 samples, 5.65%)</title><rect x="57.2389%" y="901" width="5.6538%" height="15" fill="rgb(232,142,8)" fg:x="65198" fg:w="6440"/><text x="57.4889%" y="911.50">std::pa..</text></g><g><title>std::panicking::try::do_call (6,440 samples, 5.65%)</title><rect x="57.2389%" y="885" width="5.6538%" height="15" fill="rgb(224,92,44)" fg:x="65198" fg:w="6440"/><text x="57.4889%" y="895.50">std::pa..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (6,440 samples, 5.65%)</title><rect x="57.2389%" y="869" width="5.6538%" height="15" fill="rgb(214,169,17)" fg:x="65198" fg:w="6440"/><text x="57.4889%" y="879.50">&lt;core::..</text></g><g><title>core::ops::function::FnOnce::call_once (6,440 samples, 5.65%)</title><rect x="57.2389%" y="853" width="5.6538%" height="15" fill="rgb(210,59,37)" fg:x="65198" fg:w="6440"/><text x="57.4889%" y="863.50">core::o..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (6,440 samples, 5.65%)</title><rect x="57.2389%" y="837" width="5.6538%" height="15" fill="rgb(214,116,48)" fg:x="65198" fg:w="6440"/><text x="57.4889%" y="847.50">async_f..</text></g><g><title>async_ffi::FfiContext::with_context (6,440 samples, 5.65%)</title><rect x="57.2389%" y="821" width="5.6538%" height="15" fill="rgb(244,191,6)" fg:x="65198" fg:w="6440"/><text x="57.4889%" y="831.50">async_f..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (6,440 samples, 5.65%)</title><rect x="57.2389%" y="805" width="5.6538%" height="15" fill="rgb(241,50,52)" fg:x="65198" fg:w="6440"/><text x="57.4889%" y="815.50">async_f..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,440 samples, 5.65%)</title><rect x="57.2389%" y="789" width="5.6538%" height="15" fill="rgb(236,75,39)" fg:x="65198" fg:w="6440"/><text x="57.4889%" y="799.50">&lt;core::..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (6,440 samples, 5.65%)</title><rect x="57.2389%" y="773" width="5.6538%" height="15" fill="rgb(236,99,0)" fg:x="65198" fg:w="6440"/><text x="57.4889%" y="783.50">&lt;tremor..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (6,440 samples, 5.65%)</title><rect x="57.2389%" y="757" width="5.6538%" height="15" fill="rgb(207,202,15)" fg:x="65198" fg:w="6440"/><text x="57.4889%" y="767.50">tremor_..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (6,440 samples, 5.65%)</title><rect x="57.2389%" y="741" width="5.6538%" height="15" fill="rgb(233,207,14)" fg:x="65198" fg:w="6440"/><text x="57.4889%" y="751.50">tremor_..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (6,440 samples, 5.65%)</title><rect x="57.2389%" y="725" width="5.6538%" height="15" fill="rgb(226,27,51)" fg:x="65198" fg:w="6440"/><text x="57.4889%" y="735.50">tremor_..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (6,440 samples, 5.65%)</title><rect x="57.2389%" y="709" width="5.6538%" height="15" fill="rgb(206,104,42)" fg:x="65198" fg:w="6440"/><text x="57.4889%" y="719.50">tremor_..</text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (6,440 samples, 5.65%)</title><rect x="57.2389%" y="693" width="5.6538%" height="15" fill="rgb(212,225,4)" fg:x="65198" fg:w="6440"/><text x="57.4889%" y="703.50">&lt;tremor..</text></g><g><title>tremor_runtime::postprocessor::postprocess (456 samples, 0.40%)</title><rect x="62.4924%" y="677" width="0.4003%" height="15" fill="rgb(233,96,42)" fg:x="71182" fg:w="456"/><text x="62.7424%" y="687.50"></text></g><g><title>tremor_common::time::nanotime (379 samples, 0.33%)</title><rect x="62.5600%" y="661" width="0.3327%" height="15" fill="rgb(229,21,32)" fg:x="71259" fg:w="379"/><text x="62.8100%" y="671.50"></text></g><g><title>std::time::SystemTime::now (228 samples, 0.20%)</title><rect x="62.6926%" y="645" width="0.2002%" height="15" fill="rgb(226,216,24)" fg:x="71410" fg:w="228"/><text x="62.9426%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (228 samples, 0.20%)</title><rect x="62.6926%" y="629" width="0.2002%" height="15" fill="rgb(221,163,17)" fg:x="71410" fg:w="228"/><text x="62.9426%" y="639.50"></text></g><g><title>std::sys::unix::time::inner::now (228 samples, 0.20%)</title><rect x="62.6926%" y="613" width="0.2002%" height="15" fill="rgb(216,216,42)" fg:x="71410" fg:w="228"/><text x="62.9426%" y="623.50"></text></g><g><title>__clock_gettime (189 samples, 0.17%)</title><rect x="62.7268%" y="597" width="0.1659%" height="15" fill="rgb(240,118,7)" fg:x="71449" fg:w="189"/><text x="62.9768%" y="607.50"></text></g><g><title>__vdso_clock_gettime (181 samples, 0.16%)</title><rect x="62.7339%" y="581" width="0.1589%" height="15" fill="rgb(221,67,37)" fg:x="71457" fg:w="181"/><text x="62.9839%" y="591.50"></text></g><g><title>[[vdso]] (160 samples, 0.14%)</title><rect x="62.7523%" y="565" width="0.1405%" height="15" fill="rgb(241,32,44)" fg:x="71478" fg:w="160"/><text x="63.0023%" y="575.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_u8 (27 samples, 0.02%)</title><rect x="64.7127%" y="645" width="0.0237%" height="15" fill="rgb(235,204,43)" fg:x="73711" fg:w="27"/><text x="64.9627%" y="655.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;u8&gt; for u64&gt;::from (27 samples, 0.02%)</title><rect x="64.7127%" y="629" width="0.0237%" height="15" fill="rgb(213,116,10)" fg:x="73711" fg:w="27"/><text x="64.9627%" y="639.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_borrowed_str (14 samples, 0.01%)</title><rect x="64.7645%" y="629" width="0.0123%" height="15" fill="rgb(239,15,48)" fg:x="73770" fg:w="14"/><text x="65.0145%" y="639.50"></text></g><g><title>core::str::converts::from_utf8 (136 samples, 0.12%)</title><rect x="64.7768%" y="629" width="0.1194%" height="15" fill="rgb(207,123,36)" fg:x="73784" fg:w="136"/><text x="65.0268%" y="639.50"></text></g><g><title>core::str::validations::run_utf8_validation (119 samples, 0.10%)</title><rect x="64.7917%" y="613" width="0.1045%" height="15" fill="rgb(209,103,30)" fg:x="73801" fg:w="119"/><text x="65.0417%" y="623.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::read_str_data (214 samples, 0.19%)</title><rect x="64.7364%" y="645" width="0.1879%" height="15" fill="rgb(238,100,19)" fg:x="73738" fg:w="214"/><text x="64.9864%" y="655.50"></text></g><g><title>rmp_serde::decode::read_bin_data (32 samples, 0.03%)</title><rect x="64.8962%" y="629" width="0.0281%" height="15" fill="rgb(244,30,14)" fg:x="73920" fg:w="32"/><text x="65.1462%" y="639.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as rmp_serde::decode::ReadSlice&gt;::read_slice (32 samples, 0.03%)</title><rect x="64.8962%" y="613" width="0.0281%" height="15" fill="rgb(249,174,6)" fg:x="73920" fg:w="32"/><text x="65.1462%" y="623.50"></text></g><g><title>rmp::decode::RmpRead::read_u8 (74 samples, 0.06%)</title><rect x="64.9243%" y="581" width="0.0650%" height="15" fill="rgb(235,213,41)" fg:x="73952" fg:w="74"/><text x="65.1743%" y="591.50"></text></g><g><title>&lt;T as rmp::decode::RmpRead&gt;::read_exact_buf (74 samples, 0.06%)</title><rect x="64.9243%" y="565" width="0.0650%" height="15" fill="rgb(213,118,6)" fg:x="73952" fg:w="74"/><text x="65.1743%" y="575.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as std::io::Read&gt;::read_exact (74 samples, 0.06%)</title><rect x="64.9243%" y="549" width="0.0650%" height="15" fill="rgb(235,44,51)" fg:x="73952" fg:w="74"/><text x="65.1743%" y="559.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_exact (74 samples, 0.06%)</title><rect x="64.9243%" y="533" width="0.0650%" height="15" fill="rgb(217,9,53)" fg:x="73952" fg:w="74"/><text x="65.1743%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (112 samples, 0.10%)</title><rect x="64.9243%" y="629" width="0.0983%" height="15" fill="rgb(237,172,34)" fg:x="73952" fg:w="112"/><text x="65.1743%" y="639.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker::{{closure}} (112 samples, 0.10%)</title><rect x="64.9243%" y="613" width="0.0983%" height="15" fill="rgb(206,206,11)" fg:x="73952" fg:w="112"/><text x="65.1743%" y="623.50"></text></g><g><title>rmp::decode::read_marker (112 samples, 0.10%)</title><rect x="64.9243%" y="597" width="0.0983%" height="15" fill="rgb(214,149,29)" fg:x="73952" fg:w="112"/><text x="65.1743%" y="607.50"></text></g><g><title>rmp::marker::Marker::from_u8 (38 samples, 0.03%)</title><rect x="64.9892%" y="581" width="0.0334%" height="15" fill="rgb(208,123,3)" fg:x="74026" fg:w="38"/><text x="65.2392%" y="591.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (614 samples, 0.54%)</title><rect x="64.5099%" y="693" width="0.5390%" height="15" fill="rgb(229,126,4)" fg:x="73480" fg:w="614"/><text x="64.7599%" y="703.50"></text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (614 samples, 0.54%)</title><rect x="64.5099%" y="677" width="0.5390%" height="15" fill="rgb(222,92,36)" fg:x="73480" fg:w="614"/><text x="64.7599%" y="687.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (602 samples, 0.53%)</title><rect x="64.5204%" y="661" width="0.5285%" height="15" fill="rgb(216,39,41)" fg:x="73492" fg:w="602"/><text x="64.7704%" y="671.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker (142 samples, 0.12%)</title><rect x="64.9243%" y="645" width="0.1247%" height="15" fill="rgb(253,127,28)" fg:x="73952" fg:w="142"/><text x="65.1743%" y="655.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (30 samples, 0.03%)</title><rect x="65.0226%" y="629" width="0.0263%" height="15" fill="rgb(249,152,51)" fg:x="74064" fg:w="30"/><text x="65.2726%" y="639.50"></text></g><g><title>core::mem::replace (30 samples, 0.03%)</title><rect x="65.0226%" y="613" width="0.0263%" height="15" fill="rgb(209,123,42)" fg:x="74064" fg:w="30"/><text x="65.2726%" y="623.50"></text></g><g><title>core::ptr::write (29 samples, 0.03%)</title><rect x="65.0235%" y="597" width="0.0255%" height="15" fill="rgb(241,118,22)" fg:x="74065" fg:w="29"/><text x="65.2735%" y="607.50"></text></g><g><title>&lt;&amp;mut A as serde::de::SeqAccess&gt;::next_element (2,051 samples, 1.80%)</title><rect x="63.8330%" y="741" width="1.8006%" height="15" fill="rgb(208,25,7)" fg:x="72709" fg:w="2051"/><text x="64.0830%" y="751.50">&lt;..</text></g><g><title>serde::de::SeqAccess::next_element (2,051 samples, 1.80%)</title><rect x="63.8330%" y="725" width="1.8006%" height="15" fill="rgb(243,144,39)" fg:x="72709" fg:w="2051"/><text x="64.0830%" y="735.50">s..</text></g><g><title>&lt;rmp_serde::decode::SeqAccess&lt;R,C&gt; as serde::de::SeqAccess&gt;::next_element_seed (2,051 samples, 1.80%)</title><rect x="63.8330%" y="709" width="1.8006%" height="15" fill="rgb(250,50,5)" fg:x="72709" fg:w="2051"/><text x="64.0830%" y="719.50">&lt;..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (666 samples, 0.58%)</title><rect x="65.0489%" y="693" width="0.5847%" height="15" fill="rgb(207,67,11)" fg:x="74094" fg:w="666"/><text x="65.2989%" y="703.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (767 samples, 0.67%)</title><rect x="65.6380%" y="741" width="0.6734%" height="15" fill="rgb(245,204,40)" fg:x="74765" fg:w="767"/><text x="65.8880%" y="751.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (52 samples, 0.05%)</title><rect x="66.3114%" y="725" width="0.0457%" height="15" fill="rgb(238,228,24)" fg:x="75532" fg:w="52"/><text x="66.5614%" y="735.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::push (752 samples, 0.66%)</title><rect x="66.3114%" y="741" width="0.6602%" height="15" fill="rgb(217,116,22)" fg:x="75532" fg:w="752"/><text x="66.5614%" y="751.50"></text></g><g><title>core::ptr::write (700 samples, 0.61%)</title><rect x="66.3571%" y="725" width="0.6145%" height="15" fill="rgb(234,98,12)" fg:x="75584" fg:w="700"/><text x="66.6071%" y="735.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (12 samples, 0.01%)</title><rect x="66.9716%" y="725" width="0.0105%" height="15" fill="rgb(242,170,50)" fg:x="76284" fg:w="12"/><text x="67.2216%" y="735.50"></text></g><g><title>&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt; as core::convert::From&lt;alloc::vec::Vec&lt;T&gt;&gt;&gt;::from (12 samples, 0.01%)</title><rect x="66.9716%" y="709" width="0.0105%" height="15" fill="rgb(235,7,5)" fg:x="76284" fg:w="12"/><text x="67.2216%" y="719.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (316 samples, 0.28%)</title><rect x="67.0322%" y="565" width="0.2774%" height="15" fill="rgb(241,114,28)" fg:x="76353" fg:w="316"/><text x="67.2822%" y="575.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_seq (4,728 samples, 4.15%)</title><rect x="63.1676%" y="757" width="4.1508%" height="15" fill="rgb(246,112,42)" fg:x="71951" fg:w="4728"/><text x="63.4176%" y="767.50">&lt;trem..</text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::with_capacity (395 samples, 0.35%)</title><rect x="66.9716%" y="741" width="0.3468%" height="15" fill="rgb(248,228,14)" fg:x="76284" fg:w="395"/><text x="67.2216%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (383 samples, 0.34%)</title><rect x="66.9821%" y="725" width="0.3362%" height="15" fill="rgb(208,133,18)" fg:x="76296" fg:w="383"/><text x="67.2321%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (383 samples, 0.34%)</title><rect x="66.9821%" y="709" width="0.3362%" height="15" fill="rgb(207,35,49)" fg:x="76296" fg:w="383"/><text x="67.2321%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (383 samples, 0.34%)</title><rect x="66.9821%" y="693" width="0.3362%" height="15" fill="rgb(205,68,36)" fg:x="76296" fg:w="383"/><text x="67.2321%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (383 samples, 0.34%)</title><rect x="66.9821%" y="677" width="0.3362%" height="15" fill="rgb(245,62,40)" fg:x="76296" fg:w="383"/><text x="67.2321%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (380 samples, 0.33%)</title><rect x="66.9848%" y="661" width="0.3336%" height="15" fill="rgb(228,27,24)" fg:x="76299" fg:w="380"/><text x="67.2348%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (380 samples, 0.33%)</title><rect x="66.9848%" y="645" width="0.3336%" height="15" fill="rgb(253,19,12)" fg:x="76299" fg:w="380"/><text x="67.2348%" y="655.50"></text></g><g><title>alloc::alloc::alloc (373 samples, 0.33%)</title><rect x="66.9909%" y="629" width="0.3275%" height="15" fill="rgb(232,28,20)" fg:x="76306" fg:w="373"/><text x="67.2409%" y="639.50"></text></g><g><title>__rg_alloc (373 samples, 0.33%)</title><rect x="66.9909%" y="613" width="0.3275%" height="15" fill="rgb(218,35,51)" fg:x="76306" fg:w="373"/><text x="67.2409%" y="623.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (373 samples, 0.33%)</title><rect x="66.9909%" y="597" width="0.3275%" height="15" fill="rgb(212,90,40)" fg:x="76306" fg:w="373"/><text x="67.2409%" y="607.50"></text></g><g><title>sn_rust_alloc (373 samples, 0.33%)</title><rect x="66.9909%" y="581" width="0.3275%" height="15" fill="rgb(220,172,12)" fg:x="76306" fg:w="373"/><text x="67.2409%" y="591.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_borrowed_str (20 samples, 0.02%)</title><rect x="67.3790%" y="741" width="0.0176%" height="15" fill="rgb(226,159,20)" fg:x="76748" fg:w="20"/><text x="67.6290%" y="751.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (18 samples, 0.02%)</title><rect x="67.8680%" y="709" width="0.0158%" height="15" fill="rgb(234,205,16)" fg:x="77305" fg:w="18"/><text x="68.1180%" y="719.50"></text></g><g><title>core::str::converts::from_utf8 (569 samples, 0.50%)</title><rect x="67.3965%" y="741" width="0.4995%" height="15" fill="rgb(207,9,39)" fg:x="76768" fg:w="569"/><text x="67.6465%" y="751.50"></text></g><g><title>core::str::validations::run_utf8_validation (527 samples, 0.46%)</title><rect x="67.4334%" y="725" width="0.4627%" height="15" fill="rgb(249,143,15)" fg:x="76810" fg:w="527"/><text x="67.6834%" y="735.50"></text></g><g><title>core::str::validations::contains_nonascii (14 samples, 0.01%)</title><rect x="67.8838%" y="709" width="0.0123%" height="15" fill="rgb(253,133,29)" fg:x="77323" fg:w="14"/><text x="68.1338%" y="719.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::read_str_data (732 samples, 0.64%)</title><rect x="67.3210%" y="757" width="0.6426%" height="15" fill="rgb(221,187,0)" fg:x="76682" fg:w="732"/><text x="67.5710%" y="767.50"></text></g><g><title>rmp_serde::decode::read_bin_data (77 samples, 0.07%)</title><rect x="67.8961%" y="741" width="0.0676%" height="15" fill="rgb(205,204,26)" fg:x="77337" fg:w="77"/><text x="68.1461%" y="751.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as rmp_serde::decode::ReadSlice&gt;::read_slice (75 samples, 0.07%)</title><rect x="67.8978%" y="725" width="0.0658%" height="15" fill="rgb(224,68,54)" fg:x="77339" fg:w="75"/><text x="68.1478%" y="735.50"></text></g><g><title>rmp::decode::RmpRead::read_u8 (64 samples, 0.06%)</title><rect x="67.9637%" y="693" width="0.0562%" height="15" fill="rgb(209,67,4)" fg:x="77414" fg:w="64"/><text x="68.2137%" y="703.50"></text></g><g><title>&lt;T as rmp::decode::RmpRead&gt;::read_exact_buf (64 samples, 0.06%)</title><rect x="67.9637%" y="677" width="0.0562%" height="15" fill="rgb(228,229,18)" fg:x="77414" fg:w="64"/><text x="68.2137%" y="687.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as std::io::Read&gt;::read_exact (64 samples, 0.06%)</title><rect x="67.9637%" y="661" width="0.0562%" height="15" fill="rgb(231,89,13)" fg:x="77414" fg:w="64"/><text x="68.2137%" y="671.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_exact (64 samples, 0.06%)</title><rect x="67.9637%" y="645" width="0.0562%" height="15" fill="rgb(210,182,18)" fg:x="77414" fg:w="64"/><text x="68.2137%" y="655.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (193 samples, 0.17%)</title><rect x="67.9637%" y="741" width="0.1694%" height="15" fill="rgb(240,105,2)" fg:x="77414" fg:w="193"/><text x="68.2137%" y="751.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker::{{closure}} (193 samples, 0.17%)</title><rect x="67.9637%" y="725" width="0.1694%" height="15" fill="rgb(207,170,50)" fg:x="77414" fg:w="193"/><text x="68.2137%" y="735.50"></text></g><g><title>rmp::decode::read_marker (193 samples, 0.17%)</title><rect x="67.9637%" y="709" width="0.1694%" height="15" fill="rgb(232,133,24)" fg:x="77414" fg:w="193"/><text x="68.2137%" y="719.50"></text></g><g><title>rmp::marker::Marker::from_u8 (129 samples, 0.11%)</title><rect x="68.0198%" y="693" width="0.1133%" height="15" fill="rgb(235,166,27)" fg:x="77478" fg:w="129"/><text x="68.2698%" y="703.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker (230 samples, 0.20%)</title><rect x="67.9637%" y="757" width="0.2019%" height="15" fill="rgb(209,19,13)" fg:x="77414" fg:w="230"/><text x="68.2137%" y="767.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (37 samples, 0.03%)</title><rect x="68.1331%" y="741" width="0.0325%" height="15" fill="rgb(226,79,39)" fg:x="77607" fg:w="37"/><text x="68.3831%" y="751.50"></text></g><g><title>core::mem::replace (37 samples, 0.03%)</title><rect x="68.1331%" y="725" width="0.0325%" height="15" fill="rgb(222,163,10)" fg:x="77607" fg:w="37"/><text x="68.3831%" y="735.50"></text></g><g><title>core::ptr::write (36 samples, 0.03%)</title><rect x="68.1340%" y="709" width="0.0316%" height="15" fill="rgb(214,44,19)" fg:x="77608" fg:w="36"/><text x="68.3840%" y="719.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_value (6,019 samples, 5.28%)</title><rect x="62.8972%" y="853" width="5.2842%" height="15" fill="rgb(210,217,13)" fg:x="71643" fg:w="6019"/><text x="63.1472%" y="863.50">&lt;&amp;mut ..</text></g><g><title>serde::de::MapAccess::next_value (6,019 samples, 5.28%)</title><rect x="62.8972%" y="837" width="5.2842%" height="15" fill="rgb(237,61,54)" fg:x="71643" fg:w="6019"/><text x="63.1472%" y="847.50">serde:..</text></g><g><title>&lt;rmp_serde::decode::MapAccess&lt;R,C&gt; as serde::de::MapAccess&gt;::next_value_seed (6,019 samples, 5.28%)</title><rect x="62.8972%" y="821" width="5.2842%" height="15" fill="rgb(226,184,24)" fg:x="71643" fg:w="6019"/><text x="63.1472%" y="831.50">&lt;rmp_s..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6,019 samples, 5.28%)</title><rect x="62.8972%" y="805" width="5.2842%" height="15" fill="rgb(223,226,4)" fg:x="71643" fg:w="6019"/><text x="63.1472%" y="815.50">&lt;core:..</text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (6,019 samples, 5.28%)</title><rect x="62.8972%" y="789" width="5.2842%" height="15" fill="rgb(210,26,41)" fg:x="71643" fg:w="6019"/><text x="63.1472%" y="799.50">tremor..</text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (6,019 samples, 5.28%)</title><rect x="62.8972%" y="773" width="5.2842%" height="15" fill="rgb(220,221,6)" fg:x="71643" fg:w="6019"/><text x="63.1472%" y="783.50">&lt;&amp;mut ..</text></g><g><title>abi_stable::std_types::option::&lt;impl abi_stable::traits::IntoReprC for core::option::Option&lt;T&gt;&gt;::into_c (30 samples, 0.03%)</title><rect x="69.1638%" y="773" width="0.0263%" height="15" fill="rgb(225,89,49)" fg:x="78781" fg:w="30"/><text x="69.4138%" y="783.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (30 samples, 0.03%)</title><rect x="69.1638%" y="757" width="0.0263%" height="15" fill="rgb(218,70,45)" fg:x="78781" fg:w="30"/><text x="69.4138%" y="767.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as core::convert::From&lt;core::option::Option&lt;T&gt;&gt;&gt;::from (30 samples, 0.03%)</title><rect x="69.1638%" y="741" width="0.0263%" height="15" fill="rgb(238,166,21)" fg:x="78781" fg:w="30"/><text x="69.4138%" y="751.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (35 samples, 0.03%)</title><rect x="69.7985%" y="693" width="0.0307%" height="15" fill="rgb(224,141,44)" fg:x="79504" fg:w="35"/><text x="70.0485%" y="703.50"></text></g><g><title>&lt;byteorder::LittleEndian as byteorder::ByteOrder&gt;::read_u32 (32 samples, 0.03%)</title><rect x="69.9311%" y="629" width="0.0281%" height="15" fill="rgb(230,12,49)" fg:x="79655" fg:w="32"/><text x="70.1811%" y="639.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (32 samples, 0.03%)</title><rect x="69.9311%" y="613" width="0.0281%" height="15" fill="rgb(212,174,12)" fg:x="79655" fg:w="32"/><text x="70.1811%" y="623.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (32 samples, 0.03%)</title><rect x="69.9311%" y="597" width="0.0281%" height="15" fill="rgb(246,67,9)" fg:x="79655" fg:w="32"/><text x="70.1811%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (32 samples, 0.03%)</title><rect x="69.9311%" y="581" width="0.0281%" height="15" fill="rgb(239,35,23)" fg:x="79655" fg:w="32"/><text x="70.1811%" y="591.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (32 samples, 0.03%)</title><rect x="69.9311%" y="565" width="0.0281%" height="15" fill="rgb(211,167,0)" fg:x="79655" fg:w="32"/><text x="70.1811%" y="575.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (55 samples, 0.05%)</title><rect x="69.9592%" y="629" width="0.0483%" height="15" fill="rgb(225,119,45)" fg:x="79687" fg:w="55"/><text x="70.2092%" y="639.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (16 samples, 0.01%)</title><rect x="69.9934%" y="613" width="0.0140%" height="15" fill="rgb(210,162,6)" fg:x="79726" fg:w="16"/><text x="70.2434%" y="623.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (16 samples, 0.01%)</title><rect x="69.9934%" y="597" width="0.0140%" height="15" fill="rgb(208,118,35)" fg:x="79726" fg:w="16"/><text x="70.2434%" y="607.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitXor&gt;::bitxor (45 samples, 0.04%)</title><rect x="70.0075%" y="613" width="0.0395%" height="15" fill="rgb(239,4,53)" fg:x="79742" fg:w="45"/><text x="70.2575%" y="623.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (36 samples, 0.03%)</title><rect x="70.0470%" y="613" width="0.0316%" height="15" fill="rgb(213,130,21)" fg:x="79787" fg:w="36"/><text x="70.2970%" y="623.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (437 samples, 0.38%)</title><rect x="69.8442%" y="677" width="0.3837%" height="15" fill="rgb(235,148,0)" fg:x="79556" fg:w="437"/><text x="70.0942%" y="687.50"></text></g><g><title>fxhash::write (437 samples, 0.38%)</title><rect x="69.8442%" y="661" width="0.3837%" height="15" fill="rgb(244,224,18)" fg:x="79556" fg:w="437"/><text x="70.0942%" y="671.50"></text></g><g><title>fxhash::write64 (437 samples, 0.38%)</title><rect x="69.8442%" y="645" width="0.3837%" height="15" fill="rgb(211,214,4)" fg:x="79556" fg:w="437"/><text x="70.0942%" y="655.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (251 samples, 0.22%)</title><rect x="70.0075%" y="629" width="0.2204%" height="15" fill="rgb(206,119,25)" fg:x="79742" fg:w="251"/><text x="70.2575%" y="639.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (170 samples, 0.15%)</title><rect x="70.0786%" y="613" width="0.1492%" height="15" fill="rgb(243,93,47)" fg:x="79823" fg:w="170"/><text x="70.3286%" y="623.50"></text></g><g><title>&lt;usize as core::ops::bit::BitXor&gt;::bitxor (18 samples, 0.02%)</title><rect x="70.2752%" y="645" width="0.0158%" height="15" fill="rgb(224,194,6)" fg:x="80047" fg:w="18"/><text x="70.5252%" y="655.50"></text></g><g><title>core::num::&lt;impl usize&gt;::rotate_left (18 samples, 0.02%)</title><rect x="70.2910%" y="645" width="0.0158%" height="15" fill="rgb(243,229,6)" fg:x="80065" fg:w="18"/><text x="70.5410%" y="655.50"></text></g><g><title>hashbrown::map::make_insert_hash (753 samples, 0.66%)</title><rect x="69.7362%" y="741" width="0.6611%" height="15" fill="rgb(207,23,50)" fg:x="79433" fg:w="753"/><text x="69.9862%" y="751.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (682 samples, 0.60%)</title><rect x="69.7985%" y="725" width="0.5987%" height="15" fill="rgb(253,192,32)" fg:x="79504" fg:w="682"/><text x="70.0485%" y="735.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::hash::Hash&gt;::hash (682 samples, 0.60%)</title><rect x="69.7985%" y="709" width="0.5987%" height="15" fill="rgb(213,21,6)" fg:x="79504" fg:w="682"/><text x="70.0485%" y="719.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (647 samples, 0.57%)</title><rect x="69.8292%" y="693" width="0.5680%" height="15" fill="rgb(243,151,13)" fg:x="79539" fg:w="647"/><text x="70.0792%" y="703.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (193 samples, 0.17%)</title><rect x="70.2278%" y="677" width="0.1694%" height="15" fill="rgb(233,165,41)" fg:x="79993" fg:w="193"/><text x="70.4778%" y="687.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (193 samples, 0.17%)</title><rect x="70.2278%" y="661" width="0.1694%" height="15" fill="rgb(246,176,45)" fg:x="79993" fg:w="193"/><text x="70.4778%" y="671.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (103 samples, 0.09%)</title><rect x="70.3068%" y="645" width="0.0904%" height="15" fill="rgb(217,170,52)" fg:x="80083" fg:w="103"/><text x="70.5568%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.01%)</title><rect x="70.4025%" y="693" width="0.0105%" height="15" fill="rgb(214,203,54)" fg:x="80192" fg:w="12"/><text x="70.6525%" y="703.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (12 samples, 0.01%)</title><rect x="70.4025%" y="677" width="0.0105%" height="15" fill="rgb(248,215,49)" fg:x="80192" fg:w="12"/><text x="70.6525%" y="687.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (17 samples, 0.01%)</title><rect x="70.4245%" y="645" width="0.0149%" height="15" fill="rgb(208,46,10)" fg:x="80217" fg:w="17"/><text x="70.6745%" y="655.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (17 samples, 0.01%)</title><rect x="70.4245%" y="629" width="0.0149%" height="15" fill="rgb(254,5,31)" fg:x="80217" fg:w="17"/><text x="70.6745%" y="639.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (17 samples, 0.01%)</title><rect x="70.4245%" y="613" width="0.0149%" height="15" fill="rgb(222,104,33)" fg:x="80217" fg:w="17"/><text x="70.6745%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (33 samples, 0.03%)</title><rect x="70.4131%" y="693" width="0.0290%" height="15" fill="rgb(248,49,16)" fg:x="80204" fg:w="33"/><text x="70.6631%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::bucket (20 samples, 0.02%)</title><rect x="70.4245%" y="677" width="0.0176%" height="15" fill="rgb(232,198,41)" fg:x="80217" fg:w="20"/><text x="70.6745%" y="687.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::from_base_index (20 samples, 0.02%)</title><rect x="70.4245%" y="661" width="0.0176%" height="15" fill="rgb(214,125,3)" fg:x="80217" fg:w="20"/><text x="70.6745%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (156 samples, 0.14%)</title><rect x="70.4420%" y="693" width="0.1370%" height="15" fill="rgb(229,220,28)" fg:x="80237" fg:w="156"/><text x="70.6920%" y="703.50"></text></g><g><title>hashbrown::raw::inner::h2 (32 samples, 0.03%)</title><rect x="70.5790%" y="693" width="0.0281%" height="15" fill="rgb(222,64,37)" fg:x="80393" fg:w="32"/><text x="70.8290%" y="703.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (69 samples, 0.06%)</title><rect x="70.6071%" y="693" width="0.0606%" height="15" fill="rgb(249,184,13)" fg:x="80425" fg:w="69"/><text x="70.8571%" y="703.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (69 samples, 0.06%)</title><rect x="70.6071%" y="677" width="0.0606%" height="15" fill="rgb(252,176,6)" fg:x="80425" fg:w="69"/><text x="70.8571%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (69 samples, 0.06%)</title><rect x="70.6071%" y="661" width="0.0606%" height="15" fill="rgb(228,153,7)" fg:x="80425" fg:w="69"/><text x="70.8571%" y="671.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (147 samples, 0.13%)</title><rect x="70.6677%" y="693" width="0.1291%" height="15" fill="rgb(242,193,5)" fg:x="80494" fg:w="147"/><text x="70.9177%" y="703.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (147 samples, 0.13%)</title><rect x="70.6677%" y="677" width="0.1291%" height="15" fill="rgb(232,140,9)" fg:x="80494" fg:w="147"/><text x="70.9177%" y="687.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get_mut (526 samples, 0.46%)</title><rect x="70.3973%" y="741" width="0.4618%" height="15" fill="rgb(213,222,16)" fg:x="80186" fg:w="526"/><text x="70.6473%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (526 samples, 0.46%)</title><rect x="70.3973%" y="725" width="0.4618%" height="15" fill="rgb(222,75,50)" fg:x="80186" fg:w="526"/><text x="70.6473%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (526 samples, 0.46%)</title><rect x="70.3973%" y="709" width="0.4618%" height="15" fill="rgb(205,180,2)" fg:x="80186" fg:w="526"/><text x="70.6473%" y="719.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty (71 samples, 0.06%)</title><rect x="70.7967%" y="693" width="0.0623%" height="15" fill="rgb(216,34,7)" fg:x="80641" fg:w="71"/><text x="71.0467%" y="703.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (71 samples, 0.06%)</title><rect x="70.7967%" y="677" width="0.0623%" height="15" fill="rgb(253,16,32)" fg:x="80641" fg:w="71"/><text x="71.0467%" y="687.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (71 samples, 0.06%)</title><rect x="70.7967%" y="661" width="0.0623%" height="15" fill="rgb(208,97,28)" fg:x="80641" fg:w="71"/><text x="71.0467%" y="671.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::write (258 samples, 0.23%)</title><rect x="70.9117%" y="725" width="0.2265%" height="15" fill="rgb(225,92,11)" fg:x="80772" fg:w="258"/><text x="71.1617%" y="735.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (258 samples, 0.23%)</title><rect x="70.9117%" y="709" width="0.2265%" height="15" fill="rgb(243,38,12)" fg:x="80772" fg:w="258"/><text x="71.1617%" y="719.50"></text></g><g><title>core::ptr::write (258 samples, 0.23%)</title><rect x="70.9117%" y="693" width="0.2265%" height="15" fill="rgb(208,139,16)" fg:x="80772" fg:w="258"/><text x="71.1617%" y="703.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (48 samples, 0.04%)</title><rect x="71.3568%" y="709" width="0.0421%" height="15" fill="rgb(227,24,9)" fg:x="81279" fg:w="48"/><text x="71.6068%" y="719.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (14 samples, 0.01%)</title><rect x="71.3990%" y="709" width="0.0123%" height="15" fill="rgb(206,62,11)" fg:x="81327" fg:w="14"/><text x="71.6490%" y="719.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (14 samples, 0.01%)</title><rect x="71.3990%" y="693" width="0.0123%" height="15" fill="rgb(228,134,27)" fg:x="81327" fg:w="14"/><text x="71.6490%" y="703.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.01%)</title><rect x="71.3990%" y="677" width="0.0123%" height="15" fill="rgb(205,55,33)" fg:x="81327" fg:w="14"/><text x="71.6490%" y="687.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_insert_slot (315 samples, 0.28%)</title><rect x="71.1470%" y="725" width="0.2765%" height="15" fill="rgb(243,75,43)" fg:x="81040" fg:w="315"/><text x="71.3970%" y="735.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (14 samples, 0.01%)</title><rect x="71.4113%" y="709" width="0.0123%" height="15" fill="rgb(223,27,42)" fg:x="81341" fg:w="14"/><text x="71.6613%" y="719.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (14 samples, 0.01%)</title><rect x="71.4113%" y="693" width="0.0123%" height="15" fill="rgb(232,189,33)" fg:x="81341" fg:w="14"/><text x="71.6613%" y="703.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::insert (3,803 samples, 3.34%)</title><rect x="68.1814%" y="853" width="3.3387%" height="15" fill="rgb(210,9,39)" fg:x="77662" fg:w="3803"/><text x="68.4314%" y="863.50">abi..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (3,803 samples, 3.34%)</title><rect x="68.1814%" y="837" width="3.3387%" height="15" fill="rgb(242,85,26)" fg:x="77662" fg:w="3803"/><text x="68.4314%" y="847.50">abi..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (3,393 samples, 2.98%)</title><rect x="68.5413%" y="821" width="2.9788%" height="15" fill="rgb(248,44,4)" fg:x="78072" fg:w="3393"/><text x="68.7913%" y="831.50">abi..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (3,393 samples, 2.98%)</title><rect x="68.5413%" y="805" width="2.9788%" height="15" fill="rgb(250,96,46)" fg:x="78072" fg:w="3393"/><text x="68.7913%" y="815.50">abi..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem::{{closure}} (3,172 samples, 2.78%)</title><rect x="68.7353%" y="789" width="2.7848%" height="15" fill="rgb(229,116,26)" fg:x="78293" fg:w="3172"/><text x="68.9853%" y="799.50">ab..</text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::insert (2,654 samples, 2.33%)</title><rect x="69.1901%" y="773" width="2.3300%" height="15" fill="rgb(246,94,34)" fg:x="78811" fg:w="2654"/><text x="69.4401%" y="783.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,195 samples, 1.93%)</title><rect x="69.5931%" y="757" width="1.9270%" height="15" fill="rgb(251,73,21)" fg:x="79270" fg:w="2195"/><text x="69.8431%" y="767.50">h..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (753 samples, 0.66%)</title><rect x="70.8590%" y="741" width="0.6611%" height="15" fill="rgb(254,121,25)" fg:x="80712" fg:w="753"/><text x="71.1090%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::record_item_insert_at (110 samples, 0.10%)</title><rect x="71.4236%" y="725" width="0.0966%" height="15" fill="rgb(215,161,49)" fg:x="81355" fg:w="110"/><text x="71.6736%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl_h2 (45 samples, 0.04%)</title><rect x="71.4806%" y="709" width="0.0395%" height="15" fill="rgb(221,43,13)" fg:x="81420" fg:w="45"/><text x="71.7306%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl (45 samples, 0.04%)</title><rect x="71.4806%" y="693" width="0.0395%" height="15" fill="rgb(249,5,37)" fg:x="81420" fg:w="45"/><text x="71.7306%" y="703.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (105 samples, 0.09%)</title><rect x="71.5631%" y="629" width="0.0922%" height="15" fill="rgb(226,25,44)" fg:x="81514" fg:w="105"/><text x="71.8131%" y="639.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (152 samples, 0.13%)</title><rect x="71.5254%" y="789" width="0.1334%" height="15" fill="rgb(238,189,16)" fg:x="81471" fg:w="152"/><text x="71.7754%" y="799.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (152 samples, 0.13%)</title><rect x="71.5254%" y="773" width="0.1334%" height="15" fill="rgb(251,186,8)" fg:x="81471" fg:w="152"/><text x="71.7754%" y="783.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (142 samples, 0.12%)</title><rect x="71.5342%" y="757" width="0.1247%" height="15" fill="rgb(254,34,31)" fg:x="81481" fg:w="142"/><text x="71.7842%" y="767.50"></text></g><g><title>alloc::alloc::exchange_malloc (142 samples, 0.12%)</title><rect x="71.5342%" y="741" width="0.1247%" height="15" fill="rgb(225,215,27)" fg:x="81481" fg:w="142"/><text x="71.7842%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (140 samples, 0.12%)</title><rect x="71.5359%" y="725" width="0.1229%" height="15" fill="rgb(221,192,48)" fg:x="81483" fg:w="140"/><text x="71.7859%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (140 samples, 0.12%)</title><rect x="71.5359%" y="709" width="0.1229%" height="15" fill="rgb(219,137,20)" fg:x="81483" fg:w="140"/><text x="71.7859%" y="719.50"></text></g><g><title>alloc::alloc::alloc (140 samples, 0.12%)</title><rect x="71.5359%" y="693" width="0.1229%" height="15" fill="rgb(219,84,11)" fg:x="81483" fg:w="140"/><text x="71.7859%" y="703.50"></text></g><g><title>__rg_alloc (140 samples, 0.12%)</title><rect x="71.5359%" y="677" width="0.1229%" height="15" fill="rgb(224,10,23)" fg:x="81483" fg:w="140"/><text x="71.7859%" y="687.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (140 samples, 0.12%)</title><rect x="71.5359%" y="661" width="0.1229%" height="15" fill="rgb(248,22,39)" fg:x="81483" fg:w="140"/><text x="71.7859%" y="671.50"></text></g><g><title>sn_rust_alloc (140 samples, 0.12%)</title><rect x="71.5359%" y="645" width="0.1229%" height="15" fill="rgb(212,154,20)" fg:x="81483" fg:w="140"/><text x="71.7859%" y="655.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (172 samples, 0.15%)</title><rect x="71.5201%" y="837" width="0.1510%" height="15" fill="rgb(236,199,50)" fg:x="81465" fg:w="172"/><text x="71.7701%" y="847.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (172 samples, 0.15%)</title><rect x="71.5201%" y="821" width="0.1510%" height="15" fill="rgb(211,9,17)" fg:x="81465" fg:w="172"/><text x="71.7701%" y="831.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (172 samples, 0.15%)</title><rect x="71.5201%" y="805" width="0.1510%" height="15" fill="rgb(243,216,36)" fg:x="81465" fg:w="172"/><text x="71.7701%" y="815.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (14 samples, 0.01%)</title><rect x="71.6588%" y="789" width="0.0123%" height="15" fill="rgb(250,2,10)" fg:x="81623" fg:w="14"/><text x="71.9088%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (12 samples, 0.01%)</title><rect x="71.6606%" y="773" width="0.0105%" height="15" fill="rgb(226,50,48)" fg:x="81625" fg:w="12"/><text x="71.9106%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (12 samples, 0.01%)</title><rect x="71.6606%" y="757" width="0.0105%" height="15" fill="rgb(243,81,16)" fg:x="81625" fg:w="12"/><text x="71.9106%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (12 samples, 0.01%)</title><rect x="71.6606%" y="741" width="0.0105%" height="15" fill="rgb(250,14,2)" fg:x="81625" fg:w="12"/><text x="71.9106%" y="751.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (12 samples, 0.01%)</title><rect x="71.6606%" y="725" width="0.0105%" height="15" fill="rgb(233,135,29)" fg:x="81625" fg:w="12"/><text x="71.9106%" y="735.50"></text></g><g><title>core::mem::swap (244 samples, 0.21%)</title><rect x="71.6922%" y="661" width="0.2142%" height="15" fill="rgb(224,64,43)" fg:x="81661" fg:w="244"/><text x="71.9422%" y="671.50"></text></g><g><title>core::mem::swap_simple (244 samples, 0.21%)</title><rect x="71.6922%" y="645" width="0.2142%" height="15" fill="rgb(238,84,13)" fg:x="81661" fg:w="244"/><text x="71.9422%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (31 samples, 0.03%)</title><rect x="71.9205%" y="629" width="0.0272%" height="15" fill="rgb(253,48,26)" fg:x="81921" fg:w="31"/><text x="72.1705%" y="639.50"></text></g><g><title>core::intrinsics::write_bytes (31 samples, 0.03%)</title><rect x="71.9205%" y="613" width="0.0272%" height="15" fill="rgb(205,223,31)" fg:x="81921" fg:w="31"/><text x="72.1705%" y="623.50"></text></g><g><title>[libc-2.31.so] (28 samples, 0.02%)</title><rect x="71.9231%" y="597" width="0.0246%" height="15" fill="rgb(221,41,32)" fg:x="81924" fg:w="28"/><text x="72.1731%" y="607.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (1,211 samples, 1.06%)</title><rect x="72.0767%" y="517" width="1.0632%" height="15" fill="rgb(213,158,31)" fg:x="82099" fg:w="1211"/><text x="72.3267%" y="527.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (13 samples, 0.01%)</title><rect x="73.1285%" y="501" width="0.0114%" height="15" fill="rgb(245,126,43)" fg:x="83297" fg:w="13"/><text x="73.3785%" y="511.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (22 samples, 0.02%)</title><rect x="73.1399%" y="517" width="0.0193%" height="15" fill="rgb(227,7,22)" fg:x="83310" fg:w="22"/><text x="73.3899%" y="527.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (1,374 samples, 1.21%)</title><rect x="71.9608%" y="613" width="1.2063%" height="15" fill="rgb(252,90,44)" fg:x="81967" fg:w="1374"/><text x="72.2108%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (1,374 samples, 1.21%)</title><rect x="71.9608%" y="597" width="1.2063%" height="15" fill="rgb(253,91,0)" fg:x="81967" fg:w="1374"/><text x="72.2108%" y="607.50"></text></g><g><title>alloc::alloc::alloc (1,374 samples, 1.21%)</title><rect x="71.9608%" y="581" width="1.2063%" height="15" fill="rgb(252,175,49)" fg:x="81967" fg:w="1374"/><text x="72.2108%" y="591.50"></text></g><g><title>__rg_alloc (1,374 samples, 1.21%)</title><rect x="71.9608%" y="565" width="1.2063%" height="15" fill="rgb(246,150,1)" fg:x="81967" fg:w="1374"/><text x="72.2108%" y="575.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1,374 samples, 1.21%)</title><rect x="71.9608%" y="549" width="1.2063%" height="15" fill="rgb(241,192,25)" fg:x="81967" fg:w="1374"/><text x="72.2108%" y="559.50"></text></g><g><title>sn_rust_alloc (1,374 samples, 1.21%)</title><rect x="71.9608%" y="533" width="1.2063%" height="15" fill="rgb(239,187,11)" fg:x="81967" fg:w="1374"/><text x="72.2108%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (1,394 samples, 1.22%)</title><rect x="71.9477%" y="629" width="1.2238%" height="15" fill="rgb(218,202,51)" fg:x="81952" fg:w="1394"/><text x="72.1977%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (1,460 samples, 1.28%)</title><rect x="71.9064%" y="661" width="1.2818%" height="15" fill="rgb(225,176,8)" fg:x="81905" fg:w="1460"/><text x="72.1564%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (1,452 samples, 1.27%)</title><rect x="71.9134%" y="645" width="1.2747%" height="15" fill="rgb(219,122,41)" fg:x="81913" fg:w="1452"/><text x="72.1634%" y="655.50"></text></g><g><title>hashbrown::raw::inner::capacity_to_buckets (19 samples, 0.02%)</title><rect x="73.1715%" y="629" width="0.0167%" height="15" fill="rgb(248,140,20)" fg:x="83346" fg:w="19"/><text x="73.4215%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (1,723 samples, 1.51%)</title><rect x="71.6808%" y="677" width="1.5127%" height="15" fill="rgb(245,41,37)" fg:x="81648" fg:w="1723"/><text x="71.9308%" y="687.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (11,735 samples, 10.30%)</title><rect x="62.8936%" y="1045" width="10.3024%" height="15" fill="rgb(235,82,39)" fg:x="71639" fg:w="11735"/><text x="63.1436%" y="1055.50">tremor_runtime:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,732 samples, 10.30%)</title><rect x="62.8963%" y="1029" width="10.2998%" height="15" fill="rgb(230,108,42)" fg:x="71642" fg:w="11732"/><text x="63.1463%" y="1039.50">&lt;core::future::..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (11,732 samples, 10.30%)</title><rect x="62.8963%" y="1013" width="10.2998%" height="15" fill="rgb(215,150,50)" fg:x="71642" fg:w="11732"/><text x="63.1463%" y="1023.50">tremor_runtime:..</text></g><g><title>tremor_runtime::connectors::source::build_events (11,731 samples, 10.30%)</title><rect x="62.8972%" y="997" width="10.2989%" height="15" fill="rgb(233,212,5)" fg:x="71643" fg:w="11731"/><text x="63.1472%" y="1007.50">tremor_runtime:..</text></g><g><title>tremor_script::srs::EventPayload::try_new (11,731 samples, 10.30%)</title><rect x="62.8972%" y="981" width="10.2989%" height="15" fill="rgb(245,80,22)" fg:x="71643" fg:w="11731"/><text x="63.1472%" y="991.50">tremor_script::..</text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (11,731 samples, 10.30%)</title><rect x="62.8972%" y="965" width="10.2989%" height="15" fill="rgb(238,129,16)" fg:x="71643" fg:w="11731"/><text x="63.1472%" y="975.50">tremor_runtime:..</text></g><g><title>&lt;tremor_runtime::codec::msgpack::MsgPack as tremor_runtime::codec::Codec&gt;::decode (11,731 samples, 10.30%)</title><rect x="62.8972%" y="949" width="10.2989%" height="15" fill="rgb(240,19,0)" fg:x="71643" fg:w="11731"/><text x="63.1472%" y="959.50">&lt;tremor_runtime..</text></g><g><title>rmp_serde::decode::from_slice (11,731 samples, 10.30%)</title><rect x="62.8972%" y="933" width="10.2989%" height="15" fill="rgb(232,42,35)" fg:x="71643" fg:w="11731"/><text x="63.1472%" y="943.50">rmp_serde::deco..</text></g><g><title>rmp_serde::decode::from_read_ref (11,731 samples, 10.30%)</title><rect x="62.8972%" y="917" width="10.2989%" height="15" fill="rgb(223,130,24)" fg:x="71643" fg:w="11731"/><text x="63.1472%" y="927.50">rmp_serde::deco..</text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (11,731 samples, 10.30%)</title><rect x="62.8972%" y="901" width="10.2989%" height="15" fill="rgb(237,16,22)" fg:x="71643" fg:w="11731"/><text x="63.1472%" y="911.50">tremor_value::s..</text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (11,731 samples, 10.30%)</title><rect x="62.8972%" y="885" width="10.2989%" height="15" fill="rgb(248,192,20)" fg:x="71643" fg:w="11731"/><text x="63.1472%" y="895.50">&lt;&amp;mut rmp_serde..</text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_map (11,731 samples, 10.30%)</title><rect x="62.8972%" y="869" width="10.2989%" height="15" fill="rgb(233,167,2)" fg:x="71643" fg:w="11731"/><text x="63.1472%" y="879.50">&lt;tremor_value::..</text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (1,909 samples, 1.68%)</title><rect x="71.5201%" y="853" width="1.6760%" height="15" fill="rgb(252,71,44)" fg:x="81465" fg:w="1909"/><text x="71.7701%" y="863.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (1,737 samples, 1.52%)</title><rect x="71.6711%" y="837" width="1.5250%" height="15" fill="rgb(238,37,47)" fg:x="81637" fg:w="1737"/><text x="71.9211%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (1,737 samples, 1.52%)</title><rect x="71.6711%" y="821" width="1.5250%" height="15" fill="rgb(214,202,54)" fg:x="81637" fg:w="1737"/><text x="71.9211%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (1,737 samples, 1.52%)</title><rect x="71.6711%" y="805" width="1.5250%" height="15" fill="rgb(254,165,40)" fg:x="81637" fg:w="1737"/><text x="71.9211%" y="815.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (1,737 samples, 1.52%)</title><rect x="71.6711%" y="789" width="1.5250%" height="15" fill="rgb(246,173,38)" fg:x="81637" fg:w="1737"/><text x="71.9211%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (1,737 samples, 1.52%)</title><rect x="71.6711%" y="773" width="1.5250%" height="15" fill="rgb(215,3,27)" fg:x="81637" fg:w="1737"/><text x="71.9211%" y="783.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (1,737 samples, 1.52%)</title><rect x="71.6711%" y="757" width="1.5250%" height="15" fill="rgb(239,169,51)" fg:x="81637" fg:w="1737"/><text x="71.9211%" y="767.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (1,737 samples, 1.52%)</title><rect x="71.6711%" y="741" width="1.5250%" height="15" fill="rgb(212,5,25)" fg:x="81637" fg:w="1737"/><text x="71.9211%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (1,737 samples, 1.52%)</title><rect x="71.6711%" y="725" width="1.5250%" height="15" fill="rgb(243,45,17)" fg:x="81637" fg:w="1737"/><text x="71.9211%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (1,737 samples, 1.52%)</title><rect x="71.6711%" y="709" width="1.5250%" height="15" fill="rgb(242,97,9)" fg:x="81637" fg:w="1737"/><text x="71.9211%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (1,736 samples, 1.52%)</title><rect x="71.6720%" y="693" width="1.5241%" height="15" fill="rgb(228,71,31)" fg:x="81638" fg:w="1736"/><text x="71.9220%" y="703.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (85 samples, 0.07%)</title><rect x="73.3796%" y="885" width="0.0746%" height="15" fill="rgb(252,184,16)" fg:x="83583" fg:w="85"/><text x="73.6296%" y="895.50"></text></g><g><title>core::mem::replace (85 samples, 0.07%)</title><rect x="73.3796%" y="869" width="0.0746%" height="15" fill="rgb(236,169,46)" fg:x="83583" fg:w="85"/><text x="73.6296%" y="879.50"></text></g><g><title>core::ptr::read (84 samples, 0.07%)</title><rect x="73.3804%" y="853" width="0.0737%" height="15" fill="rgb(207,17,47)" fg:x="83584" fg:w="84"/><text x="73.6304%" y="863.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (132 samples, 0.12%)</title><rect x="73.3585%" y="901" width="0.1159%" height="15" fill="rgb(206,201,28)" fg:x="83559" fg:w="132"/><text x="73.6085%" y="911.50"></text></g><g><title>core::mem::drop (23 samples, 0.02%)</title><rect x="73.4542%" y="885" width="0.0202%" height="15" fill="rgb(224,184,23)" fg:x="83668" fg:w="23"/><text x="73.7042%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (23 samples, 0.02%)</title><rect x="73.4542%" y="869" width="0.0202%" height="15" fill="rgb(208,139,48)" fg:x="83668" fg:w="23"/><text x="73.7042%" y="879.50"></text></g><g><title>core::mem::drop (21 samples, 0.02%)</title><rect x="73.4744%" y="901" width="0.0184%" height="15" fill="rgb(208,130,10)" fg:x="83691" fg:w="21"/><text x="73.7244%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (21 samples, 0.02%)</title><rect x="73.4744%" y="885" width="0.0184%" height="15" fill="rgb(211,213,45)" fg:x="83691" fg:w="21"/><text x="73.7244%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (20 samples, 0.02%)</title><rect x="73.4753%" y="869" width="0.0176%" height="15" fill="rgb(235,100,30)" fg:x="83692" fg:w="20"/><text x="73.7253%" y="879.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.02%)</title><rect x="73.4753%" y="853" width="0.0176%" height="15" fill="rgb(206,144,31)" fg:x="83692" fg:w="20"/><text x="73.7253%" y="863.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (20 samples, 0.02%)</title><rect x="73.4753%" y="837" width="0.0176%" height="15" fill="rgb(224,200,26)" fg:x="83692" fg:w="20"/><text x="73.7253%" y="847.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (19 samples, 0.02%)</title><rect x="73.4761%" y="821" width="0.0167%" height="15" fill="rgb(247,104,53)" fg:x="83693" fg:w="19"/><text x="73.7261%" y="831.50"></text></g><g><title>__GI___pthread_mutex_unlock (19 samples, 0.02%)</title><rect x="73.4761%" y="805" width="0.0167%" height="15" fill="rgb(220,14,17)" fg:x="83693" fg:w="19"/><text x="73.7261%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (145 samples, 0.13%)</title><rect x="73.4928%" y="901" width="0.1273%" height="15" fill="rgb(230,140,40)" fg:x="83712" fg:w="145"/><text x="73.7428%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (139 samples, 0.12%)</title><rect x="73.4981%" y="885" width="0.1220%" height="15" fill="rgb(229,2,41)" fg:x="83718" fg:w="139"/><text x="73.7481%" y="895.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (139 samples, 0.12%)</title><rect x="73.4981%" y="869" width="0.1220%" height="15" fill="rgb(232,89,16)" fg:x="83718" fg:w="139"/><text x="73.7481%" y="879.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (129 samples, 0.11%)</title><rect x="73.5069%" y="853" width="0.1133%" height="15" fill="rgb(247,59,52)" fg:x="83728" fg:w="129"/><text x="73.7569%" y="863.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (129 samples, 0.11%)</title><rect x="73.5069%" y="837" width="0.1133%" height="15" fill="rgb(226,110,21)" fg:x="83728" fg:w="129"/><text x="73.7569%" y="847.50"></text></g><g><title>__GI___pthread_mutex_unlock (125 samples, 0.11%)</title><rect x="73.5104%" y="821" width="0.1097%" height="15" fill="rgb(224,176,43)" fg:x="83732" fg:w="125"/><text x="73.7604%" y="831.50"></text></g><g><title>core::task::wake::Waker::will_wake (14 samples, 0.01%)</title><rect x="73.6201%" y="901" width="0.0123%" height="15" fill="rgb(221,73,6)" fg:x="83857" fg:w="14"/><text x="73.8701%" y="911.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (14 samples, 0.01%)</title><rect x="73.6201%" y="885" width="0.0123%" height="15" fill="rgb(232,78,19)" fg:x="83857" fg:w="14"/><text x="73.8701%" y="895.50"></text></g><g><title>std::sync::poison::Flag::get (13 samples, 0.01%)</title><rect x="73.6403%" y="837" width="0.0114%" height="15" fill="rgb(233,112,48)" fg:x="83880" fg:w="13"/><text x="73.8903%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (13 samples, 0.01%)</title><rect x="73.6403%" y="821" width="0.0114%" height="15" fill="rgb(243,131,47)" fg:x="83880" fg:w="13"/><text x="73.8903%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_load (13 samples, 0.01%)</title><rect x="73.6403%" y="805" width="0.0114%" height="15" fill="rgb(226,51,1)" fg:x="83880" fg:w="13"/><text x="73.8903%" y="815.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (17 samples, 0.01%)</title><rect x="73.6403%" y="869" width="0.0149%" height="15" fill="rgb(247,58,7)" fg:x="83880" fg:w="17"/><text x="73.8903%" y="879.50"></text></g><g><title>std::sync::poison::Flag::borrow (17 samples, 0.01%)</title><rect x="73.6403%" y="853" width="0.0149%" height="15" fill="rgb(209,7,32)" fg:x="83880" fg:w="17"/><text x="73.8903%" y="863.50"></text></g><g><title>event_listener::Inner::lock (340 samples, 0.30%)</title><rect x="73.6324%" y="901" width="0.2985%" height="15" fill="rgb(209,39,41)" fg:x="83871" fg:w="340"/><text x="73.8824%" y="911.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (331 samples, 0.29%)</title><rect x="73.6403%" y="885" width="0.2906%" height="15" fill="rgb(226,182,46)" fg:x="83880" fg:w="331"/><text x="73.8903%" y="895.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (314 samples, 0.28%)</title><rect x="73.6552%" y="869" width="0.2757%" height="15" fill="rgb(230,219,10)" fg:x="83897" fg:w="314"/><text x="73.9052%" y="879.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (298 samples, 0.26%)</title><rect x="73.6693%" y="853" width="0.2616%" height="15" fill="rgb(227,175,30)" fg:x="83913" fg:w="298"/><text x="73.9193%" y="863.50"></text></g><g><title>__GI___pthread_mutex_lock (298 samples, 0.26%)</title><rect x="73.6693%" y="837" width="0.2616%" height="15" fill="rgb(217,2,50)" fg:x="83913" fg:w="298"/><text x="73.9193%" y="847.50"></text></g><g><title>__lll_lock_wait (56 samples, 0.05%)</title><rect x="73.8817%" y="821" width="0.0492%" height="15" fill="rgb(229,160,0)" fg:x="84155" fg:w="56"/><text x="74.1317%" y="831.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (750 samples, 0.66%)</title><rect x="73.3137%" y="917" width="0.6584%" height="15" fill="rgb(207,78,37)" fg:x="83508" fg:w="750"/><text x="73.5637%" y="927.50"></text></g><g><title>event_listener::List::remove (47 samples, 0.04%)</title><rect x="73.9309%" y="901" width="0.0413%" height="15" fill="rgb(225,57,0)" fg:x="84211" fg:w="47"/><text x="74.1809%" y="911.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (34 samples, 0.03%)</title><rect x="73.9423%" y="885" width="0.0298%" height="15" fill="rgb(232,154,2)" fg:x="84224" fg:w="34"/><text x="74.1923%" y="895.50"></text></g><g><title>core::mem::replace (34 samples, 0.03%)</title><rect x="73.9423%" y="869" width="0.0298%" height="15" fill="rgb(241,212,25)" fg:x="84224" fg:w="34"/><text x="74.1923%" y="879.50"></text></g><g><title>core::ptr::read (34 samples, 0.03%)</title><rect x="73.9423%" y="853" width="0.0298%" height="15" fill="rgb(226,69,20)" fg:x="84224" fg:w="34"/><text x="74.1923%" y="863.50"></text></g><g><title>concurrent_queue::full_fence (24 samples, 0.02%)</title><rect x="74.0424%" y="869" width="0.0211%" height="15" fill="rgb(247,184,54)" fg:x="84338" fg:w="24"/><text x="74.2924%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (17 samples, 0.01%)</title><rect x="74.0485%" y="853" width="0.0149%" height="15" fill="rgb(210,145,0)" fg:x="84345" fg:w="17"/><text x="74.2985%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (17 samples, 0.01%)</title><rect x="74.0485%" y="837" width="0.0149%" height="15" fill="rgb(253,82,12)" fg:x="84345" fg:w="17"/><text x="74.2985%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (17 samples, 0.01%)</title><rect x="74.0485%" y="821" width="0.0149%" height="15" fill="rgb(245,42,11)" fg:x="84345" fg:w="17"/><text x="74.2985%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (62 samples, 0.05%)</title><rect x="74.0644%" y="869" width="0.0544%" height="15" fill="rgb(219,147,32)" fg:x="84363" fg:w="62"/><text x="74.3144%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (62 samples, 0.05%)</title><rect x="74.0644%" y="853" width="0.0544%" height="15" fill="rgb(246,12,7)" fg:x="84363" fg:w="62"/><text x="74.3144%" y="863.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (429 samples, 0.38%)</title><rect x="73.9783%" y="901" width="0.3766%" height="15" fill="rgb(243,50,9)" fg:x="84265" fg:w="429"/><text x="74.2283%" y="911.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (408 samples, 0.36%)</title><rect x="73.9968%" y="885" width="0.3582%" height="15" fill="rgb(219,149,6)" fg:x="84286" fg:w="408"/><text x="74.2468%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (269 samples, 0.24%)</title><rect x="74.1188%" y="869" width="0.2362%" height="15" fill="rgb(241,51,42)" fg:x="84425" fg:w="269"/><text x="74.3688%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_load (269 samples, 0.24%)</title><rect x="74.1188%" y="853" width="0.2362%" height="15" fill="rgb(226,128,27)" fg:x="84425" fg:w="269"/><text x="74.3688%" y="863.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (971 samples, 0.85%)</title><rect x="73.9722%" y="917" width="0.8525%" height="15" fill="rgb(244,144,4)" fg:x="84258" fg:w="971"/><text x="74.2222%" y="927.50"></text></g><g><title>event_listener::Event::notify (535 samples, 0.47%)</title><rect x="74.3549%" y="901" width="0.4697%" height="15" fill="rgb(221,4,13)" fg:x="84694" fg:w="535"/><text x="74.6049%" y="911.50"></text></g><g><title>event_listener::full_fence (528 samples, 0.46%)</title><rect x="74.3611%" y="885" width="0.4635%" height="15" fill="rgb(208,170,28)" fg:x="84701" fg:w="528"/><text x="74.6111%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (528 samples, 0.46%)</title><rect x="74.3611%" y="869" width="0.4635%" height="15" fill="rgb(226,131,13)" fg:x="84701" fg:w="528"/><text x="74.6111%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (528 samples, 0.46%)</title><rect x="74.3611%" y="853" width="0.4635%" height="15" fill="rgb(215,72,41)" fg:x="84701" fg:w="528"/><text x="74.6111%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (16 samples, 0.01%)</title><rect x="74.8360%" y="869" width="0.0140%" height="15" fill="rgb(243,108,20)" fg:x="85242" fg:w="16"/><text x="75.0860%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (16 samples, 0.01%)</title><rect x="74.8360%" y="853" width="0.0140%" height="15" fill="rgb(230,189,17)" fg:x="85242" fg:w="16"/><text x="75.0860%" y="863.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="74.8360%" y="837" width="0.0140%" height="15" fill="rgb(220,50,17)" fg:x="85242" fg:w="16"/><text x="75.0860%" y="847.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (16 samples, 0.01%)</title><rect x="74.8360%" y="821" width="0.0140%" height="15" fill="rgb(248,152,48)" fg:x="85242" fg:w="16"/><text x="75.0860%" y="831.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (15 samples, 0.01%)</title><rect x="74.8369%" y="805" width="0.0132%" height="15" fill="rgb(244,91,11)" fg:x="85243" fg:w="15"/><text x="75.0869%" y="815.50"></text></g><g><title>__GI___pthread_mutex_unlock (15 samples, 0.01%)</title><rect x="74.8369%" y="789" width="0.0132%" height="15" fill="rgb(220,157,5)" fg:x="85243" fg:w="15"/><text x="75.0869%" y="799.50"></text></g><g><title>event_listener::Inner::lock (19 samples, 0.02%)</title><rect x="74.8501%" y="869" width="0.0167%" height="15" fill="rgb(253,137,8)" fg:x="85258" fg:w="19"/><text x="75.1001%" y="879.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (18 samples, 0.02%)</title><rect x="74.8510%" y="853" width="0.0158%" height="15" fill="rgb(217,137,51)" fg:x="85259" fg:w="18"/><text x="75.1010%" y="863.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (18 samples, 0.02%)</title><rect x="74.8510%" y="837" width="0.0158%" height="15" fill="rgb(218,209,53)" fg:x="85259" fg:w="18"/><text x="75.1010%" y="847.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (16 samples, 0.01%)</title><rect x="74.8527%" y="821" width="0.0140%" height="15" fill="rgb(249,137,25)" fg:x="85261" fg:w="16"/><text x="75.1027%" y="831.50"></text></g><g><title>__GI___pthread_mutex_lock (16 samples, 0.01%)</title><rect x="74.8527%" y="805" width="0.0140%" height="15" fill="rgb(239,155,26)" fg:x="85261" fg:w="16"/><text x="75.1027%" y="815.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (37 samples, 0.03%)</title><rect x="74.8360%" y="885" width="0.0325%" height="15" fill="rgb(227,85,46)" fg:x="85242" fg:w="37"/><text x="75.0860%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (63 samples, 0.06%)</title><rect x="74.8290%" y="917" width="0.0553%" height="15" fill="rgb(251,107,43)" fg:x="85234" fg:w="63"/><text x="75.0790%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (55 samples, 0.05%)</title><rect x="74.8360%" y="901" width="0.0483%" height="15" fill="rgb(234,170,33)" fg:x="85242" fg:w="55"/><text x="75.0860%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (18 samples, 0.02%)</title><rect x="74.8685%" y="885" width="0.0158%" height="15" fill="rgb(206,29,35)" fg:x="85279" fg:w="18"/><text x="75.1185%" y="895.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.02%)</title><rect x="74.8685%" y="869" width="0.0158%" height="15" fill="rgb(227,138,25)" fg:x="85279" fg:w="18"/><text x="75.1185%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (16 samples, 0.01%)</title><rect x="74.8703%" y="853" width="0.0140%" height="15" fill="rgb(249,131,35)" fg:x="85281" fg:w="16"/><text x="75.1203%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_sub (16 samples, 0.01%)</title><rect x="74.8703%" y="837" width="0.0140%" height="15" fill="rgb(239,6,40)" fg:x="85281" fg:w="16"/><text x="75.1203%" y="847.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (33 samples, 0.03%)</title><rect x="74.8870%" y="901" width="0.0290%" height="15" fill="rgb(246,136,47)" fg:x="85300" fg:w="33"/><text x="75.1370%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (33 samples, 0.03%)</title><rect x="74.8870%" y="885" width="0.0290%" height="15" fill="rgb(253,58,26)" fg:x="85300" fg:w="33"/><text x="75.1370%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_add (33 samples, 0.03%)</title><rect x="74.8870%" y="869" width="0.0290%" height="15" fill="rgb(237,141,10)" fg:x="85300" fg:w="33"/><text x="75.1370%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (20 samples, 0.02%)</title><rect x="74.9159%" y="901" width="0.0176%" height="15" fill="rgb(234,156,12)" fg:x="85333" fg:w="20"/><text x="75.1659%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (19 samples, 0.02%)</title><rect x="74.9168%" y="885" width="0.0167%" height="15" fill="rgb(243,224,36)" fg:x="85334" fg:w="19"/><text x="75.1668%" y="895.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.02%)</title><rect x="74.9168%" y="869" width="0.0167%" height="15" fill="rgb(205,229,51)" fg:x="85334" fg:w="19"/><text x="75.1668%" y="879.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (15 samples, 0.01%)</title><rect x="74.9203%" y="853" width="0.0132%" height="15" fill="rgb(223,189,4)" fg:x="85338" fg:w="15"/><text x="75.1703%" y="863.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (15 samples, 0.01%)</title><rect x="74.9203%" y="837" width="0.0132%" height="15" fill="rgb(249,167,54)" fg:x="85338" fg:w="15"/><text x="75.1703%" y="847.50"></text></g><g><title>__GI___pthread_mutex_unlock (15 samples, 0.01%)</title><rect x="74.9203%" y="821" width="0.0132%" height="15" fill="rgb(218,34,28)" fg:x="85338" fg:w="15"/><text x="75.1703%" y="831.50"></text></g><g><title>event_listener::Inner::lock (13 samples, 0.01%)</title><rect x="74.9335%" y="901" width="0.0114%" height="15" fill="rgb(232,109,42)" fg:x="85353" fg:w="13"/><text x="75.1835%" y="911.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (13 samples, 0.01%)</title><rect x="74.9335%" y="885" width="0.0114%" height="15" fill="rgb(248,214,46)" fg:x="85353" fg:w="13"/><text x="75.1835%" y="895.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (13 samples, 0.01%)</title><rect x="74.9335%" y="869" width="0.0114%" height="15" fill="rgb(244,216,40)" fg:x="85353" fg:w="13"/><text x="75.1835%" y="879.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (13 samples, 0.01%)</title><rect x="74.9335%" y="853" width="0.0114%" height="15" fill="rgb(231,226,31)" fg:x="85353" fg:w="13"/><text x="75.1835%" y="863.50"></text></g><g><title>__GI___pthread_mutex_lock (13 samples, 0.01%)</title><rect x="74.9335%" y="837" width="0.0114%" height="15" fill="rgb(238,38,43)" fg:x="85353" fg:w="13"/><text x="75.1835%" y="847.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (1,942 samples, 1.70%)</title><rect x="73.2628%" y="933" width="1.7049%" height="15" fill="rgb(208,88,43)" fg:x="83450" fg:w="1942"/><text x="73.5128%" y="943.50"></text></g><g><title>event_listener::Event::listen (95 samples, 0.08%)</title><rect x="74.8843%" y="917" width="0.0834%" height="15" fill="rgb(205,136,37)" fg:x="85297" fg:w="95"/><text x="75.1343%" y="927.50"></text></g><g><title>event_listener::full_fence (22 samples, 0.02%)</title><rect x="74.9484%" y="901" width="0.0193%" height="15" fill="rgb(237,34,14)" fg:x="85370" fg:w="22"/><text x="75.1984%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (21 samples, 0.02%)</title><rect x="74.9493%" y="885" width="0.0184%" height="15" fill="rgb(236,193,44)" fg:x="85371" fg:w="21"/><text x="75.1993%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (21 samples, 0.02%)</title><rect x="74.9493%" y="869" width="0.0184%" height="15" fill="rgb(231,48,10)" fg:x="85371" fg:w="21"/><text x="75.1993%" y="879.50"></text></g><g><title>[libc-2.31.so] (69 samples, 0.06%)</title><rect x="74.9704%" y="917" width="0.0606%" height="15" fill="rgb(213,141,34)" fg:x="85395" fg:w="69"/><text x="75.2204%" y="927.50"></text></g><g><title>[libc-2.31.so] (494 samples, 0.43%)</title><rect x="75.0362%" y="885" width="0.4337%" height="15" fill="rgb(249,130,34)" fg:x="85470" fg:w="494"/><text x="75.2862%" y="895.50"></text></g><g><title>sn_rust_dealloc (27 samples, 0.02%)</title><rect x="75.4708%" y="805" width="0.0237%" height="15" fill="rgb(219,42,41)" fg:x="85965" fg:w="27"/><text x="75.7208%" y="815.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (2,701 samples, 2.37%)</title><rect x="73.2251%" y="965" width="2.3713%" height="15" fill="rgb(224,100,54)" fg:x="83407" fg:w="2701"/><text x="73.4751%" y="975.50">&lt;a..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (2,695 samples, 2.37%)</title><rect x="73.2303%" y="949" width="2.3660%" height="15" fill="rgb(229,200,27)" fg:x="83413" fg:w="2695"/><text x="73.4803%" y="959.50">&lt;a..</text></g><g><title>core::option::Option&lt;T&gt;::map (716 samples, 0.63%)</title><rect x="74.9677%" y="933" width="0.6286%" height="15" fill="rgb(217,118,10)" fg:x="85392" fg:w="716"/><text x="75.2177%" y="943.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (644 samples, 0.57%)</title><rect x="75.0309%" y="917" width="0.5654%" height="15" fill="rgb(206,22,3)" fg:x="85464" fg:w="644"/><text x="75.2809%" y="927.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}}::{{closure}} (644 samples, 0.57%)</title><rect x="75.0309%" y="901" width="0.5654%" height="15" fill="rgb(232,163,46)" fg:x="85464" fg:w="644"/><text x="75.2809%" y="911.50"></text></g><g><title>alloc::alloc::box_free (144 samples, 0.13%)</title><rect x="75.4699%" y="885" width="0.1264%" height="15" fill="rgb(206,95,13)" fg:x="85964" fg:w="144"/><text x="75.7199%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (144 samples, 0.13%)</title><rect x="75.4699%" y="869" width="0.1264%" height="15" fill="rgb(253,154,18)" fg:x="85964" fg:w="144"/><text x="75.7199%" y="879.50"></text></g><g><title>alloc::alloc::dealloc (144 samples, 0.13%)</title><rect x="75.4699%" y="853" width="0.1264%" height="15" fill="rgb(219,32,23)" fg:x="85964" fg:w="144"/><text x="75.7199%" y="863.50"></text></g><g><title>__rg_dealloc (144 samples, 0.13%)</title><rect x="75.4699%" y="837" width="0.1264%" height="15" fill="rgb(230,191,45)" fg:x="85964" fg:w="144"/><text x="75.7199%" y="847.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (144 samples, 0.13%)</title><rect x="75.4699%" y="821" width="0.1264%" height="15" fill="rgb(229,64,36)" fg:x="85964" fg:w="144"/><text x="75.7199%" y="831.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (116 samples, 0.10%)</title><rect x="75.4945%" y="805" width="0.1018%" height="15" fill="rgb(205,129,25)" fg:x="85992" fg:w="116"/><text x="75.7445%" y="815.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,235 samples, 2.84%)</title><rect x="73.2075%" y="1029" width="2.8401%" height="15" fill="rgb(254,112,7)" fg:x="83387" fg:w="3235"/><text x="73.4575%" y="1039.50">&lt;a..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (3,227 samples, 2.83%)</title><rect x="73.2145%" y="1013" width="2.8331%" height="15" fill="rgb(226,53,48)" fg:x="83395" fg:w="3227"/><text x="73.4645%" y="1023.50">&lt;t..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (3,227 samples, 2.83%)</title><rect x="73.2145%" y="997" width="2.8331%" height="15" fill="rgb(214,153,38)" fg:x="83395" fg:w="3227"/><text x="73.4645%" y="1007.50">&lt;a..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (3,227 samples, 2.83%)</title><rect x="73.2145%" y="981" width="2.8331%" height="15" fill="rgb(243,101,7)" fg:x="83395" fg:w="3227"/><text x="73.4645%" y="991.50">&lt;t..</text></g><g><title>[libc-2.31.so] (514 samples, 0.45%)</title><rect x="75.5963%" y="965" width="0.4513%" height="15" fill="rgb(240,140,22)" fg:x="86108" fg:w="514"/><text x="75.8463%" y="975.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (74 samples, 0.06%)</title><rect x="76.0476%" y="949" width="0.0650%" height="15" fill="rgb(235,114,2)" fg:x="86622" fg:w="74"/><text x="76.2976%" y="959.50"></text></g><g><title>&lt;tremor_pipeline::op::grouper::bucket::Grouper as tremor_pipeline::op::Operator&gt;::on_event (74 samples, 0.06%)</title><rect x="76.0476%" y="933" width="0.0650%" height="15" fill="rgb(242,59,12)" fg:x="86622" fg:w="74"/><text x="76.2976%" y="943.50"></text></g><g><title>tremor_value::value::serialize::&lt;impl value_trait::Writable for tremor_value::value::Value&gt;::encode (74 samples, 0.06%)</title><rect x="76.0476%" y="917" width="0.0650%" height="15" fill="rgb(252,134,9)" fg:x="86622" fg:w="74"/><text x="76.2976%" y="927.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (74 samples, 0.06%)</title><rect x="76.0476%" y="901" width="0.0650%" height="15" fill="rgb(236,4,44)" fg:x="86622" fg:w="74"/><text x="76.2976%" y="911.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string (44 samples, 0.04%)</title><rect x="76.0739%" y="885" width="0.0386%" height="15" fill="rgb(254,172,41)" fg:x="86652" fg:w="44"/><text x="76.3239%" y="895.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (39 samples, 0.03%)</title><rect x="76.0783%" y="869" width="0.0342%" height="15" fill="rgb(244,63,20)" fg:x="86657" fg:w="39"/><text x="76.3283%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (26 samples, 0.02%)</title><rect x="76.2425%" y="821" width="0.0228%" height="15" fill="rgb(250,73,31)" fg:x="86844" fg:w="26"/><text x="76.4925%" y="831.50"></text></g><g><title>tremor_script::interpreter::LocalStack::with_size (180 samples, 0.16%)</title><rect x="76.1196%" y="869" width="0.1580%" height="15" fill="rgb(241,38,36)" fg:x="86704" fg:w="180"/><text x="76.3696%" y="879.50"></text></g><g><title>alloc::vec::from_elem (180 samples, 0.16%)</title><rect x="76.1196%" y="853" width="0.1580%" height="15" fill="rgb(245,211,2)" fg:x="86704" fg:w="180"/><text x="76.3696%" y="863.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (180 samples, 0.16%)</title><rect x="76.1196%" y="837" width="0.1580%" height="15" fill="rgb(206,120,28)" fg:x="86704" fg:w="180"/><text x="76.3696%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (14 samples, 0.01%)</title><rect x="76.2653%" y="821" width="0.0123%" height="15" fill="rgb(211,59,34)" fg:x="86870" fg:w="14"/><text x="76.5153%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (12 samples, 0.01%)</title><rect x="76.4813%" y="629" width="0.0105%" height="15" fill="rgb(233,168,5)" fg:x="87116" fg:w="12"/><text x="76.7313%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (12 samples, 0.01%)</title><rect x="76.4813%" y="613" width="0.0105%" height="15" fill="rgb(234,33,13)" fg:x="87116" fg:w="12"/><text x="76.7313%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (12 samples, 0.01%)</title><rect x="76.4813%" y="597" width="0.0105%" height="15" fill="rgb(231,150,26)" fg:x="87116" fg:w="12"/><text x="76.7313%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.01%)</title><rect x="76.4813%" y="581" width="0.0105%" height="15" fill="rgb(217,191,4)" fg:x="87116" fg:w="12"/><text x="76.7313%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.01%)</title><rect x="76.4813%" y="565" width="0.0105%" height="15" fill="rgb(246,198,38)" fg:x="87116" fg:w="12"/><text x="76.7313%" y="575.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.01%)</title><rect x="76.4813%" y="549" width="0.0105%" height="15" fill="rgb(245,64,37)" fg:x="87116" fg:w="12"/><text x="76.7313%" y="559.50"></text></g><g><title>__rg_alloc (12 samples, 0.01%)</title><rect x="76.4813%" y="533" width="0.0105%" height="15" fill="rgb(250,30,36)" fg:x="87116" fg:w="12"/><text x="76.7313%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (12 samples, 0.01%)</title><rect x="76.4813%" y="517" width="0.0105%" height="15" fill="rgb(217,86,53)" fg:x="87116" fg:w="12"/><text x="76.7313%" y="527.50"></text></g><g><title>sn_rust_alloc (12 samples, 0.01%)</title><rect x="76.4813%" y="501" width="0.0105%" height="15" fill="rgb(228,157,16)" fg:x="87116" fg:w="12"/><text x="76.7313%" y="511.50"></text></g><g><title>alloc::borrow::Cow&lt;B&gt;::into_owned (24 samples, 0.02%)</title><rect x="76.4734%" y="805" width="0.0211%" height="15" fill="rgb(217,59,31)" fg:x="87107" fg:w="24"/><text x="76.7234%" y="815.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (22 samples, 0.02%)</title><rect x="76.4751%" y="789" width="0.0193%" height="15" fill="rgb(237,138,41)" fg:x="87109" fg:w="22"/><text x="76.7251%" y="799.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (18 samples, 0.02%)</title><rect x="76.4786%" y="773" width="0.0158%" height="15" fill="rgb(227,91,49)" fg:x="87113" fg:w="18"/><text x="76.7286%" y="783.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::clone::Clone&gt;::clone (15 samples, 0.01%)</title><rect x="76.4813%" y="757" width="0.0132%" height="15" fill="rgb(247,21,44)" fg:x="87116" fg:w="15"/><text x="76.7313%" y="767.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (15 samples, 0.01%)</title><rect x="76.4813%" y="741" width="0.0132%" height="15" fill="rgb(219,210,51)" fg:x="87116" fg:w="15"/><text x="76.7313%" y="751.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (15 samples, 0.01%)</title><rect x="76.4813%" y="725" width="0.0132%" height="15" fill="rgb(209,140,6)" fg:x="87116" fg:w="15"/><text x="76.7313%" y="735.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (15 samples, 0.01%)</title><rect x="76.4813%" y="709" width="0.0132%" height="15" fill="rgb(221,188,24)" fg:x="87116" fg:w="15"/><text x="76.7313%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (15 samples, 0.01%)</title><rect x="76.4813%" y="693" width="0.0132%" height="15" fill="rgb(232,154,20)" fg:x="87116" fg:w="15"/><text x="76.7313%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (15 samples, 0.01%)</title><rect x="76.4813%" y="677" width="0.0132%" height="15" fill="rgb(244,137,50)" fg:x="87116" fg:w="15"/><text x="76.7313%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (15 samples, 0.01%)</title><rect x="76.4813%" y="661" width="0.0132%" height="15" fill="rgb(225,185,43)" fg:x="87116" fg:w="15"/><text x="76.7313%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (15 samples, 0.01%)</title><rect x="76.4813%" y="645" width="0.0132%" height="15" fill="rgb(213,205,38)" fg:x="87116" fg:w="15"/><text x="76.7313%" y="655.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (21 samples, 0.02%)</title><rect x="76.4944%" y="805" width="0.0184%" height="15" fill="rgb(236,73,12)" fg:x="87131" fg:w="21"/><text x="76.7444%" y="815.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (153 samples, 0.13%)</title><rect x="76.3979%" y="837" width="0.1343%" height="15" fill="rgb(235,219,13)" fg:x="87021" fg:w="153"/><text x="76.6479%" y="847.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (126 samples, 0.11%)</title><rect x="76.4216%" y="821" width="0.1106%" height="15" fill="rgb(218,59,36)" fg:x="87048" fg:w="126"/><text x="76.6716%" y="831.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (22 samples, 0.02%)</title><rect x="76.5129%" y="805" width="0.0193%" height="15" fill="rgb(205,110,39)" fg:x="87152" fg:w="22"/><text x="76.7629%" y="815.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (21 samples, 0.02%)</title><rect x="76.5726%" y="805" width="0.0184%" height="15" fill="rgb(218,206,42)" fg:x="87220" fg:w="21"/><text x="76.8226%" y="815.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (15 samples, 0.01%)</title><rect x="76.5910%" y="805" width="0.0132%" height="15" fill="rgb(248,125,24)" fg:x="87241" fg:w="15"/><text x="76.8410%" y="815.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (96 samples, 0.08%)</title><rect x="76.6095%" y="677" width="0.0843%" height="15" fill="rgb(242,28,27)" fg:x="87262" fg:w="96"/><text x="76.8595%" y="687.50"></text></g><g><title>tremor_value::value::cmp::&lt;impl core::cmp::PartialEq for tremor_value::value::Value&gt;::eq (96 samples, 0.08%)</title><rect x="76.6095%" y="661" width="0.0843%" height="15" fill="rgb(216,228,15)" fg:x="87262" fg:w="96"/><text x="76.8595%" y="671.50"></text></g><g><title>[libc-2.31.so] (24 samples, 0.02%)</title><rect x="76.6727%" y="645" width="0.0211%" height="15" fill="rgb(235,116,46)" fg:x="87334" fg:w="24"/><text x="76.9227%" y="655.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (104 samples, 0.09%)</title><rect x="76.6077%" y="757" width="0.0913%" height="15" fill="rgb(224,18,32)" fg:x="87260" fg:w="104"/><text x="76.8577%" y="767.50"></text></g><g><title>tremor_script::std_lib::array::load::&lt;impl tremor_script::registry::TremorFn for tremor_script::std_lib::array::load::contains::Func&gt;::invoke::{{closure}} (104 samples, 0.09%)</title><rect x="76.6077%" y="741" width="0.0913%" height="15" fill="rgb(252,5,12)" fg:x="87260" fg:w="104"/><text x="76.8577%" y="751.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (103 samples, 0.09%)</title><rect x="76.6086%" y="725" width="0.0904%" height="15" fill="rgb(251,36,5)" fg:x="87261" fg:w="103"/><text x="76.8586%" y="735.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (103 samples, 0.09%)</title><rect x="76.6086%" y="709" width="0.0904%" height="15" fill="rgb(217,53,14)" fg:x="87261" fg:w="103"/><text x="76.8586%" y="719.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (102 samples, 0.09%)</title><rect x="76.6095%" y="693" width="0.0895%" height="15" fill="rgb(215,86,45)" fg:x="87262" fg:w="102"/><text x="76.8595%" y="703.50"></text></g><g><title>tremor_script::ast::Invocable::invoke (109 samples, 0.10%)</title><rect x="76.6042%" y="805" width="0.0957%" height="15" fill="rgb(242,169,11)" fg:x="87256" fg:w="109"/><text x="76.8542%" y="815.50"></text></g><g><title>tremor_script::registry::TremorFnWrapper::invoke (107 samples, 0.09%)</title><rect x="76.6059%" y="789" width="0.0939%" height="15" fill="rgb(211,213,45)" fg:x="87258" fg:w="107"/><text x="76.8559%" y="799.50"></text></g><g><title>tremor_script::std_lib::array::load::&lt;impl tremor_script::registry::TremorFn for tremor_script::std_lib::array::load::contains::Func&gt;::invoke (106 samples, 0.09%)</title><rect x="76.6068%" y="773" width="0.0931%" height="15" fill="rgb(205,88,11)" fg:x="87259" fg:w="106"/><text x="76.8568%" y="783.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (216 samples, 0.19%)</title><rect x="76.5357%" y="837" width="0.1896%" height="15" fill="rgb(252,69,26)" fg:x="87178" fg:w="216"/><text x="76.7857%" y="847.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::invoke2 (202 samples, 0.18%)</title><rect x="76.5480%" y="821" width="0.1773%" height="15" fill="rgb(246,123,37)" fg:x="87192" fg:w="202"/><text x="76.7980%" y="831.50"></text></g><g><title>tremor_script::interpreter::imut_expr::eval_for_fn_arg (29 samples, 0.03%)</title><rect x="76.6999%" y="805" width="0.0255%" height="15" fill="rgb(212,205,5)" fg:x="87365" fg:w="29"/><text x="76.9499%" y="815.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (12 samples, 0.01%)</title><rect x="76.7148%" y="789" width="0.0105%" height="15" fill="rgb(253,148,0)" fg:x="87382" fg:w="12"/><text x="76.9648%" y="799.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (447 samples, 0.39%)</title><rect x="76.3610%" y="853" width="0.3924%" height="15" fill="rgb(239,22,4)" fg:x="86979" fg:w="447"/><text x="76.6110%" y="863.50"></text></g><g><title>tremor_script::interpreter::test_predicate_expr (32 samples, 0.03%)</title><rect x="76.7253%" y="837" width="0.0281%" height="15" fill="rgb(226,26,53)" fg:x="87394" fg:w="32"/><text x="76.9753%" y="847.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (12 samples, 0.01%)</title><rect x="76.9308%" y="837" width="0.0105%" height="15" fill="rgb(225,229,45)" fg:x="87628" fg:w="12"/><text x="77.1808%" y="847.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.02%)</title><rect x="76.9475%" y="837" width="0.0219%" height="15" fill="rgb(220,60,37)" fg:x="87647" fg:w="25"/><text x="77.1975%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::borrow::Cow&lt;tremor_value::value::Value&gt;&gt;&gt; (26 samples, 0.02%)</title><rect x="76.9729%" y="837" width="0.0228%" height="15" fill="rgb(217,180,35)" fg:x="87676" fg:w="26"/><text x="77.2229%" y="847.50"></text></g><g><title>tremor_script::ast::ClauseGroup&lt;Ex&gt;::precondition (43 samples, 0.04%)</title><rect x="76.9957%" y="837" width="0.0378%" height="15" fill="rgb(229,7,53)" fg:x="87702" fg:w="43"/><text x="77.2457%" y="847.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (43 samples, 0.04%)</title><rect x="76.9957%" y="821" width="0.0378%" height="15" fill="rgb(254,137,3)" fg:x="87702" fg:w="43"/><text x="77.2457%" y="831.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.02%)</title><rect x="77.2740%" y="821" width="0.0158%" height="15" fill="rgb(215,140,41)" fg:x="88019" fg:w="18"/><text x="77.5240%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (133 samples, 0.12%)</title><rect x="77.9922%" y="629" width="0.1168%" height="15" fill="rgb(250,80,15)" fg:x="88837" fg:w="133"/><text x="78.2422%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (133 samples, 0.12%)</title><rect x="77.9922%" y="613" width="0.1168%" height="15" fill="rgb(252,191,6)" fg:x="88837" fg:w="133"/><text x="78.2422%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (133 samples, 0.12%)</title><rect x="77.9922%" y="597" width="0.1168%" height="15" fill="rgb(246,217,18)" fg:x="88837" fg:w="133"/><text x="78.2422%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (132 samples, 0.12%)</title><rect x="77.9931%" y="581" width="0.1159%" height="15" fill="rgb(223,93,7)" fg:x="88838" fg:w="132"/><text x="78.2431%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (132 samples, 0.12%)</title><rect x="77.9931%" y="565" width="0.1159%" height="15" fill="rgb(225,55,52)" fg:x="88838" fg:w="132"/><text x="78.2431%" y="575.50"></text></g><g><title>alloc::alloc::alloc (132 samples, 0.12%)</title><rect x="77.9931%" y="549" width="0.1159%" height="15" fill="rgb(240,31,24)" fg:x="88838" fg:w="132"/><text x="78.2431%" y="559.50"></text></g><g><title>__rg_alloc (132 samples, 0.12%)</title><rect x="77.9931%" y="533" width="0.1159%" height="15" fill="rgb(205,56,52)" fg:x="88838" fg:w="132"/><text x="78.2431%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (132 samples, 0.12%)</title><rect x="77.9931%" y="517" width="0.1159%" height="15" fill="rgb(246,146,12)" fg:x="88838" fg:w="132"/><text x="78.2431%" y="527.50"></text></g><g><title>sn_rust_alloc (131 samples, 0.12%)</title><rect x="77.9939%" y="501" width="0.1150%" height="15" fill="rgb(239,84,36)" fg:x="88839" fg:w="131"/><text x="78.2439%" y="511.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::clone::Clone&gt;::clone (168 samples, 0.15%)</title><rect x="77.9869%" y="757" width="0.1475%" height="15" fill="rgb(207,41,40)" fg:x="88831" fg:w="168"/><text x="78.2369%" y="767.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (162 samples, 0.14%)</title><rect x="77.9922%" y="741" width="0.1422%" height="15" fill="rgb(241,179,25)" fg:x="88837" fg:w="162"/><text x="78.2422%" y="751.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (162 samples, 0.14%)</title><rect x="77.9922%" y="725" width="0.1422%" height="15" fill="rgb(210,0,34)" fg:x="88837" fg:w="162"/><text x="78.2422%" y="735.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (162 samples, 0.14%)</title><rect x="77.9922%" y="709" width="0.1422%" height="15" fill="rgb(225,217,29)" fg:x="88837" fg:w="162"/><text x="78.2422%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (162 samples, 0.14%)</title><rect x="77.9922%" y="693" width="0.1422%" height="15" fill="rgb(216,191,38)" fg:x="88837" fg:w="162"/><text x="78.2422%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (162 samples, 0.14%)</title><rect x="77.9922%" y="677" width="0.1422%" height="15" fill="rgb(232,140,52)" fg:x="88837" fg:w="162"/><text x="78.2422%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (162 samples, 0.14%)</title><rect x="77.9922%" y="661" width="0.1422%" height="15" fill="rgb(223,158,51)" fg:x="88837" fg:w="162"/><text x="78.2422%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (162 samples, 0.14%)</title><rect x="77.9922%" y="645" width="0.1422%" height="15" fill="rgb(235,29,51)" fg:x="88837" fg:w="162"/><text x="78.2422%" y="655.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (29 samples, 0.03%)</title><rect x="78.1090%" y="629" width="0.0255%" height="15" fill="rgb(215,181,18)" fg:x="88970" fg:w="29"/><text x="78.3590%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (29 samples, 0.03%)</title><rect x="78.1090%" y="613" width="0.0255%" height="15" fill="rgb(227,125,34)" fg:x="88970" fg:w="29"/><text x="78.3590%" y="623.50"></text></g><g><title>[libc-2.31.so] (24 samples, 0.02%)</title><rect x="78.1133%" y="597" width="0.0211%" height="15" fill="rgb(230,197,49)" fg:x="88975" fg:w="24"/><text x="78.3633%" y="607.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (223 samples, 0.20%)</title><rect x="77.9404%" y="789" width="0.1958%" height="15" fill="rgb(239,141,16)" fg:x="88778" fg:w="223"/><text x="78.1904%" y="799.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (219 samples, 0.19%)</title><rect x="77.9439%" y="773" width="0.1923%" height="15" fill="rgb(225,105,43)" fg:x="88782" fg:w="219"/><text x="78.1939%" y="783.50"></text></g><g><title>alloc::borrow::Cow&lt;B&gt;::into_owned (260 samples, 0.23%)</title><rect x="77.9211%" y="805" width="0.2283%" height="15" fill="rgb(214,131,14)" fg:x="88756" fg:w="260"/><text x="78.1711%" y="815.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (324 samples, 0.28%)</title><rect x="78.1625%" y="805" width="0.2844%" height="15" fill="rgb(229,177,11)" fg:x="89031" fg:w="324"/><text x="78.4125%" y="815.50"></text></g><g><title>tremor_script::ast::Path::segments (34 samples, 0.03%)</title><rect x="78.5892%" y="789" width="0.0298%" height="15" fill="rgb(231,180,14)" fg:x="89517" fg:w="34"/><text x="78.8392%" y="799.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 0.03%)</title><rect x="78.8877%" y="773" width="0.0298%" height="15" fill="rgb(232,88,2)" fg:x="89857" fg:w="34"/><text x="79.1377%" y="783.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::free_buckets (23 samples, 0.02%)</title><rect x="79.0097%" y="597" width="0.0202%" height="15" fill="rgb(205,220,8)" fg:x="89996" fg:w="23"/><text x="79.2597%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::free_buckets (23 samples, 0.02%)</title><rect x="79.0097%" y="581" width="0.0202%" height="15" fill="rgb(225,23,53)" fg:x="89996" fg:w="23"/><text x="79.2597%" y="591.50"></text></g><g><title>hashbrown::raw::inner::TableLayout::calculate_layout_for (12 samples, 0.01%)</title><rect x="79.0194%" y="565" width="0.0105%" height="15" fill="rgb(213,62,29)" fg:x="90007" fg:w="12"/><text x="79.2694%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (33 samples, 0.03%)</title><rect x="79.0088%" y="645" width="0.0290%" height="15" fill="rgb(227,75,7)" fg:x="89995" fg:w="33"/><text x="79.2588%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (33 samples, 0.03%)</title><rect x="79.0088%" y="629" width="0.0290%" height="15" fill="rgb(207,105,14)" fg:x="89995" fg:w="33"/><text x="79.2588%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.03%)</title><rect x="79.0088%" y="613" width="0.0290%" height="15" fill="rgb(245,62,29)" fg:x="89995" fg:w="33"/><text x="79.2588%" y="623.50"></text></g><g><title>sn_rust_dealloc (272 samples, 0.24%)</title><rect x="79.0378%" y="645" width="0.2388%" height="15" fill="rgb(236,202,4)" fg:x="90028" fg:w="272"/><text x="79.2878%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (423 samples, 0.37%)</title><rect x="79.0027%" y="693" width="0.3714%" height="15" fill="rgb(250,67,1)" fg:x="89988" fg:w="423"/><text x="79.2527%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (423 samples, 0.37%)</title><rect x="79.0027%" y="677" width="0.3714%" height="15" fill="rgb(253,115,44)" fg:x="89988" fg:w="423"/><text x="79.2527%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (423 samples, 0.37%)</title><rect x="79.0027%" y="661" width="0.3714%" height="15" fill="rgb(251,139,18)" fg:x="89988" fg:w="423"/><text x="79.2527%" y="671.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (111 samples, 0.10%)</title><rect x="79.2766%" y="645" width="0.0974%" height="15" fill="rgb(218,22,32)" fg:x="90300" fg:w="111"/><text x="79.5266%" y="655.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (451 samples, 0.40%)</title><rect x="78.9895%" y="709" width="0.3959%" height="15" fill="rgb(243,53,5)" fg:x="89973" fg:w="451"/><text x="79.2395%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="79.3740%" y="693" width="0.0114%" height="15" fill="rgb(227,56,16)" fg:x="90411" fg:w="13"/><text x="79.6240%" y="703.50"></text></g><g><title>alloc::alloc::box_free (13 samples, 0.01%)</title><rect x="79.3740%" y="677" width="0.0114%" height="15" fill="rgb(245,53,0)" fg:x="90411" fg:w="13"/><text x="79.6240%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.01%)</title><rect x="79.3740%" y="661" width="0.0114%" height="15" fill="rgb(216,170,35)" fg:x="90411" fg:w="13"/><text x="79.6240%" y="671.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.01%)</title><rect x="79.3740%" y="645" width="0.0114%" height="15" fill="rgb(211,200,8)" fg:x="90411" fg:w="13"/><text x="79.6240%" y="655.50"></text></g><g><title>__rg_dealloc (13 samples, 0.01%)</title><rect x="79.3740%" y="629" width="0.0114%" height="15" fill="rgb(228,204,44)" fg:x="90411" fg:w="13"/><text x="79.6240%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (13 samples, 0.01%)</title><rect x="79.3740%" y="613" width="0.0114%" height="15" fill="rgb(214,121,17)" fg:x="90411" fg:w="13"/><text x="79.6240%" y="623.50"></text></g><g><title>sn_rust_dealloc (100 samples, 0.09%)</title><rect x="79.3855%" y="709" width="0.0878%" height="15" fill="rgb(233,64,38)" fg:x="90424" fg:w="100"/><text x="79.6355%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (640 samples, 0.56%)</title><rect x="78.9175%" y="773" width="0.5619%" height="15" fill="rgb(253,54,19)" fg:x="89891" fg:w="640"/><text x="79.1675%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (593 samples, 0.52%)</title><rect x="78.9588%" y="757" width="0.5206%" height="15" fill="rgb(253,94,18)" fg:x="89938" fg:w="593"/><text x="79.2088%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (593 samples, 0.52%)</title><rect x="78.9588%" y="741" width="0.5206%" height="15" fill="rgb(227,57,52)" fg:x="89938" fg:w="593"/><text x="79.2088%" y="751.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (593 samples, 0.52%)</title><rect x="78.9588%" y="725" width="0.5206%" height="15" fill="rgb(230,228,50)" fg:x="89938" fg:w="593"/><text x="79.2088%" y="735.50"></text></g><g><title>tremor_script::ast::Path::segments (12 samples, 0.01%)</title><rect x="79.4794%" y="773" width="0.0105%" height="15" fill="rgb(217,205,27)" fg:x="90531" fg:w="12"/><text x="79.7294%" y="783.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::new (23 samples, 0.02%)</title><rect x="79.5531%" y="661" width="0.0202%" height="15" fill="rgb(252,71,50)" fg:x="90615" fg:w="23"/><text x="79.8031%" y="671.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (118 samples, 0.10%)</title><rect x="79.5751%" y="629" width="0.1036%" height="15" fill="rgb(209,86,4)" fg:x="90640" fg:w="118"/><text x="79.8251%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (16 samples, 0.01%)</title><rect x="79.6901%" y="533" width="0.0140%" height="15" fill="rgb(229,94,0)" fg:x="90771" fg:w="16"/><text x="79.9401%" y="543.50"></text></g><g><title>hashbrown::raw::inner::h2 (24 samples, 0.02%)</title><rect x="79.7041%" y="533" width="0.0211%" height="15" fill="rgb(252,223,21)" fg:x="90787" fg:w="24"/><text x="79.9541%" y="543.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (22 samples, 0.02%)</title><rect x="79.7252%" y="533" width="0.0193%" height="15" fill="rgb(230,210,4)" fg:x="90811" fg:w="22"/><text x="79.9752%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (22 samples, 0.02%)</title><rect x="79.7252%" y="517" width="0.0193%" height="15" fill="rgb(240,149,38)" fg:x="90811" fg:w="22"/><text x="79.9752%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (22 samples, 0.02%)</title><rect x="79.7252%" y="501" width="0.0193%" height="15" fill="rgb(254,105,20)" fg:x="90811" fg:w="22"/><text x="79.9752%" y="511.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (15 samples, 0.01%)</title><rect x="79.7445%" y="533" width="0.0132%" height="15" fill="rgb(253,87,46)" fg:x="90833" fg:w="15"/><text x="79.9945%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (15 samples, 0.01%)</title><rect x="79.7445%" y="517" width="0.0132%" height="15" fill="rgb(253,116,33)" fg:x="90833" fg:w="15"/><text x="79.9945%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck::{{closure}}::{{closure}} (232 samples, 0.20%)</title><rect x="79.5733%" y="645" width="0.2037%" height="15" fill="rgb(229,198,5)" fg:x="90638" fg:w="232"/><text x="79.8233%" y="655.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (112 samples, 0.10%)</title><rect x="79.6787%" y="629" width="0.0983%" height="15" fill="rgb(242,38,37)" fg:x="90758" fg:w="112"/><text x="79.9287%" y="639.50"></text></g><g><title>hashbrown::map::RawEntryBuilderMut&lt;K,V,S,A&gt;::from_key_hashed_nocheck (104 samples, 0.09%)</title><rect x="79.6857%" y="613" width="0.0913%" height="15" fill="rgb(242,69,53)" fg:x="90766" fg:w="104"/><text x="79.9357%" y="623.50"></text></g><g><title>hashbrown::map::RawEntryBuilderMut&lt;K,V,S,A&gt;::from_hash (104 samples, 0.09%)</title><rect x="79.6857%" y="597" width="0.0913%" height="15" fill="rgb(249,80,16)" fg:x="90766" fg:w="104"/><text x="79.9357%" y="607.50"></text></g><g><title>hashbrown::map::RawEntryBuilderMut&lt;K,V,S,A&gt;::search (104 samples, 0.09%)</title><rect x="79.6857%" y="581" width="0.0913%" height="15" fill="rgb(206,128,11)" fg:x="90766" fg:w="104"/><text x="79.9357%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (104 samples, 0.09%)</title><rect x="79.6857%" y="565" width="0.0913%" height="15" fill="rgb(212,35,20)" fg:x="90766" fg:w="104"/><text x="79.9357%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (104 samples, 0.09%)</title><rect x="79.6857%" y="549" width="0.0913%" height="15" fill="rgb(236,79,13)" fg:x="90766" fg:w="104"/><text x="79.9357%" y="559.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty (22 samples, 0.02%)</title><rect x="79.7577%" y="533" width="0.0193%" height="15" fill="rgb(233,123,3)" fg:x="90848" fg:w="22"/><text x="80.0077%" y="543.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (22 samples, 0.02%)</title><rect x="79.7577%" y="517" width="0.0193%" height="15" fill="rgb(214,93,52)" fg:x="90848" fg:w="22"/><text x="80.0077%" y="527.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (22 samples, 0.02%)</title><rect x="79.7577%" y="501" width="0.0193%" height="15" fill="rgb(251,37,40)" fg:x="90848" fg:w="22"/><text x="80.0077%" y="511.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_mut_key_hashed_nocheck (328 samples, 0.29%)</title><rect x="79.5040%" y="741" width="0.2880%" height="15" fill="rgb(227,80,54)" fg:x="90559" fg:w="328"/><text x="79.7540%" y="751.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck (308 samples, 0.27%)</title><rect x="79.5215%" y="725" width="0.2704%" height="15" fill="rgb(254,48,11)" fg:x="90579" fg:w="308"/><text x="79.7715%" y="735.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (281 samples, 0.25%)</title><rect x="79.5452%" y="709" width="0.2467%" height="15" fill="rgb(235,193,26)" fg:x="90606" fg:w="281"/><text x="79.7952%" y="719.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (278 samples, 0.24%)</title><rect x="79.5479%" y="693" width="0.2441%" height="15" fill="rgb(229,99,21)" fg:x="90609" fg:w="278"/><text x="79.7979%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck::{{closure}} (278 samples, 0.24%)</title><rect x="79.5479%" y="677" width="0.2441%" height="15" fill="rgb(211,140,41)" fg:x="90609" fg:w="278"/><text x="79.7979%" y="687.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (249 samples, 0.22%)</title><rect x="79.5733%" y="661" width="0.2186%" height="15" fill="rgb(240,227,30)" fg:x="90638" fg:w="249"/><text x="79.8233%" y="671.50"></text></g><g><title>core::mem::replace (17 samples, 0.01%)</title><rect x="79.7770%" y="645" width="0.0149%" height="15" fill="rgb(215,224,45)" fg:x="90870" fg:w="17"/><text x="80.0270%" y="655.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (13 samples, 0.01%)</title><rect x="80.5338%" y="709" width="0.0114%" height="15" fill="rgb(206,123,31)" fg:x="91732" fg:w="13"/><text x="80.7838%" y="719.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (445 samples, 0.39%)</title><rect x="80.1554%" y="725" width="0.3907%" height="15" fill="rgb(210,138,16)" fg:x="91301" fg:w="445"/><text x="80.4054%" y="735.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::clone::Clone&gt;::clone (15 samples, 0.01%)</title><rect x="80.6821%" y="709" width="0.0132%" height="15" fill="rgb(228,57,28)" fg:x="91901" fg:w="15"/><text x="80.9321%" y="719.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (47 samples, 0.04%)</title><rect x="80.6953%" y="677" width="0.0413%" height="15" fill="rgb(242,170,10)" fg:x="91916" fg:w="47"/><text x="80.9453%" y="687.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (47 samples, 0.04%)</title><rect x="80.6953%" y="661" width="0.0413%" height="15" fill="rgb(228,214,39)" fg:x="91916" fg:w="47"/><text x="80.9453%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (37 samples, 0.03%)</title><rect x="80.7041%" y="645" width="0.0325%" height="15" fill="rgb(218,179,33)" fg:x="91926" fg:w="37"/><text x="80.9541%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (37 samples, 0.03%)</title><rect x="80.7041%" y="629" width="0.0325%" height="15" fill="rgb(235,193,39)" fg:x="91926" fg:w="37"/><text x="80.9541%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (27 samples, 0.02%)</title><rect x="80.7129%" y="613" width="0.0237%" height="15" fill="rgb(219,221,36)" fg:x="91936" fg:w="27"/><text x="80.9629%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (27 samples, 0.02%)</title><rect x="80.7129%" y="597" width="0.0237%" height="15" fill="rgb(248,218,19)" fg:x="91936" fg:w="27"/><text x="80.9629%" y="607.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (27 samples, 0.02%)</title><rect x="80.7129%" y="581" width="0.0237%" height="15" fill="rgb(205,50,9)" fg:x="91936" fg:w="27"/><text x="80.9629%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (26 samples, 0.02%)</title><rect x="80.7138%" y="565" width="0.0228%" height="15" fill="rgb(238,81,28)" fg:x="91937" fg:w="26"/><text x="80.9638%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (26 samples, 0.02%)</title><rect x="80.7138%" y="549" width="0.0228%" height="15" fill="rgb(235,110,19)" fg:x="91937" fg:w="26"/><text x="80.9638%" y="559.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (2,636 samples, 2.31%)</title><rect x="78.4470%" y="805" width="2.3142%" height="15" fill="rgb(214,7,14)" fg:x="89355" fg:w="2636"/><text x="78.6970%" y="815.50">t..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (2,440 samples, 2.14%)</title><rect x="78.6190%" y="789" width="2.1421%" height="15" fill="rgb(211,77,3)" fg:x="89551" fg:w="2440"/><text x="78.8690%" y="799.50">t..</text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (1,448 samples, 1.27%)</title><rect x="79.4899%" y="773" width="1.2712%" height="15" fill="rgb(229,5,9)" fg:x="90543" fg:w="1448"/><text x="79.7399%" y="783.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (1,437 samples, 1.26%)</title><rect x="79.4996%" y="757" width="1.2616%" height="15" fill="rgb(225,90,11)" fg:x="90554" fg:w="1437"/><text x="79.7496%" y="767.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (1,104 samples, 0.97%)</title><rect x="79.7919%" y="741" width="0.9692%" height="15" fill="rgb(242,56,8)" fg:x="90887" fg:w="1104"/><text x="80.0419%" y="751.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut::{{closure}} (245 samples, 0.22%)</title><rect x="80.5461%" y="725" width="0.2151%" height="15" fill="rgb(249,212,39)" fg:x="91746" fg:w="245"/><text x="80.7961%" y="735.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (75 samples, 0.07%)</title><rect x="80.6953%" y="709" width="0.0658%" height="15" fill="rgb(236,90,9)" fg:x="91916" fg:w="75"/><text x="80.9453%" y="719.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (75 samples, 0.07%)</title><rect x="80.6953%" y="693" width="0.0658%" height="15" fill="rgb(206,88,35)" fg:x="91916" fg:w="75"/><text x="80.9453%" y="703.50"></text></g><g><title>tremor_value::value::Value::Object (28 samples, 0.02%)</title><rect x="80.7366%" y="677" width="0.0246%" height="15" fill="rgb(205,126,30)" fg:x="91963" fg:w="28"/><text x="80.9866%" y="687.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (5,163 samples, 4.53%)</title><rect x="77.0335%" y="837" width="4.5327%" height="15" fill="rgb(230,176,12)" fg:x="87745" fg:w="5163"/><text x="77.2835%" y="847.50">tremo..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (4,864 samples, 4.27%)</title><rect x="77.2960%" y="821" width="4.2702%" height="15" fill="rgb(243,19,9)" fg:x="88044" fg:w="4864"/><text x="77.5460%" y="831.50">tremo..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (917 samples, 0.81%)</title><rect x="80.7612%" y="805" width="0.8051%" height="15" fill="rgb(245,171,17)" fg:x="91991" fg:w="917"/><text x="81.0112%" y="815.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::ValueAccess&gt;::as_str (64 samples, 0.06%)</title><rect x="81.5100%" y="789" width="0.0562%" height="15" fill="rgb(227,52,21)" fg:x="92844" fg:w="64"/><text x="81.7600%" y="799.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (90 samples, 0.08%)</title><rect x="81.7181%" y="789" width="0.0790%" height="15" fill="rgb(238,69,14)" fg:x="93081" fg:w="90"/><text x="81.9681%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (90 samples, 0.08%)</title><rect x="81.7181%" y="773" width="0.0790%" height="15" fill="rgb(241,156,39)" fg:x="93081" fg:w="90"/><text x="81.9681%" y="783.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 0.02%)</title><rect x="81.7971%" y="789" width="0.0237%" height="15" fill="rgb(212,227,28)" fg:x="93171" fg:w="27"/><text x="82.0471%" y="799.50"></text></g><g><title>tremor_script::ast::Path::segments (29 samples, 0.03%)</title><rect x="81.8278%" y="789" width="0.0255%" height="15" fill="rgb(209,118,27)" fg:x="93206" fg:w="29"/><text x="82.0778%" y="799.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry (112 samples, 0.10%)</title><rect x="82.0701%" y="645" width="0.0983%" height="15" fill="rgb(226,102,5)" fg:x="93482" fg:w="112"/><text x="82.3201%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.02%)</title><rect x="82.1790%" y="533" width="0.0228%" height="15" fill="rgb(223,34,3)" fg:x="93606" fg:w="26"/><text x="82.4290%" y="543.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (26 samples, 0.02%)</title><rect x="82.1790%" y="517" width="0.0228%" height="15" fill="rgb(221,81,38)" fg:x="93606" fg:w="26"/><text x="82.4290%" y="527.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search::{{closure}} (1,085 samples, 0.95%)</title><rect x="82.2018%" y="517" width="0.9525%" height="15" fill="rgb(236,219,28)" fg:x="93632" fg:w="1085"/><text x="82.4518%" y="527.50"></text></g><g><title>hashbrown::map::equivalent::{{closure}} (1,076 samples, 0.94%)</title><rect x="82.2097%" y="501" width="0.9446%" height="15" fill="rgb(213,200,14)" fg:x="93641" fg:w="1076"/><text x="82.4597%" y="511.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (1,076 samples, 0.94%)</title><rect x="82.2097%" y="485" width="0.9446%" height="15" fill="rgb(240,33,19)" fg:x="93641" fg:w="1076"/><text x="82.4597%" y="495.50"></text></g><g><title>abi_stable::std_types::map::map_query::MapQuery&lt;K&gt;::is_equal (591 samples, 0.52%)</title><rect x="82.6355%" y="469" width="0.5189%" height="15" fill="rgb(233,113,27)" fg:x="94126" fg:w="591"/><text x="82.8855%" y="479.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (591 samples, 0.52%)</title><rect x="82.6355%" y="453" width="0.5189%" height="15" fill="rgb(220,221,18)" fg:x="94126" fg:w="591"/><text x="82.8855%" y="463.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (591 samples, 0.52%)</title><rect x="82.6355%" y="437" width="0.5189%" height="15" fill="rgb(238,92,8)" fg:x="94126" fg:w="591"/><text x="82.8855%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (584 samples, 0.51%)</title><rect x="82.6417%" y="421" width="0.5127%" height="15" fill="rgb(222,164,16)" fg:x="94133" fg:w="584"/><text x="82.8917%" y="431.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (584 samples, 0.51%)</title><rect x="82.6417%" y="405" width="0.5127%" height="15" fill="rgb(241,119,3)" fg:x="94133" fg:w="584"/><text x="82.8917%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (584 samples, 0.51%)</title><rect x="82.6417%" y="389" width="0.5127%" height="15" fill="rgb(241,44,8)" fg:x="94133" fg:w="584"/><text x="82.8917%" y="399.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (584 samples, 0.51%)</title><rect x="82.6417%" y="373" width="0.5127%" height="15" fill="rgb(230,36,40)" fg:x="94133" fg:w="584"/><text x="82.8917%" y="383.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (584 samples, 0.51%)</title><rect x="82.6417%" y="357" width="0.5127%" height="15" fill="rgb(243,16,36)" fg:x="94133" fg:w="584"/><text x="82.8917%" y="367.50"></text></g><g><title>[libc-2.31.so] (574 samples, 0.50%)</title><rect x="82.6505%" y="341" width="0.5039%" height="15" fill="rgb(231,4,26)" fg:x="94143" fg:w="574"/><text x="82.9005%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (1,103 samples, 0.97%)</title><rect x="82.2018%" y="533" width="0.9684%" height="15" fill="rgb(240,9,31)" fg:x="93632" fg:w="1103"/><text x="82.4518%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::bucket (18 samples, 0.02%)</title><rect x="83.1544%" y="517" width="0.0158%" height="15" fill="rgb(207,173,15)" fg:x="94717" fg:w="18"/><text x="83.4044%" y="527.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::from_base_index (18 samples, 0.02%)</title><rect x="83.1544%" y="501" width="0.0158%" height="15" fill="rgb(224,192,53)" fg:x="94717" fg:w="18"/><text x="83.4044%" y="511.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (14 samples, 0.01%)</title><rect x="83.1579%" y="485" width="0.0123%" height="15" fill="rgb(223,67,28)" fg:x="94721" fg:w="14"/><text x="83.4079%" y="495.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (441 samples, 0.39%)</title><rect x="83.1825%" y="533" width="0.3872%" height="15" fill="rgb(211,20,47)" fg:x="94749" fg:w="441"/><text x="83.4325%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (441 samples, 0.39%)</title><rect x="83.1825%" y="517" width="0.3872%" height="15" fill="rgb(240,228,2)" fg:x="94749" fg:w="441"/><text x="83.4325%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (441 samples, 0.39%)</title><rect x="83.1825%" y="501" width="0.3872%" height="15" fill="rgb(248,151,12)" fg:x="94749" fg:w="441"/><text x="83.4325%" y="511.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (1,734 samples, 1.52%)</title><rect x="82.0552%" y="709" width="1.5223%" height="15" fill="rgb(244,8,39)" fg:x="93465" fg:w="1734"/><text x="82.3052%" y="719.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (1,730 samples, 1.52%)</title><rect x="82.0587%" y="693" width="1.5188%" height="15" fill="rgb(222,26,8)" fg:x="93469" fg:w="1730"/><text x="82.3087%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (1,729 samples, 1.52%)</title><rect x="82.0596%" y="677" width="1.5179%" height="15" fill="rgb(213,106,44)" fg:x="93470" fg:w="1729"/><text x="82.3096%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck::{{closure}} (1,729 samples, 1.52%)</title><rect x="82.0596%" y="661" width="1.5179%" height="15" fill="rgb(214,129,20)" fg:x="93470" fg:w="1729"/><text x="82.3096%" y="671.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_key_hashed_nocheck (1,605 samples, 1.41%)</title><rect x="82.1685%" y="645" width="1.4091%" height="15" fill="rgb(212,32,13)" fg:x="93594" fg:w="1605"/><text x="82.4185%" y="655.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_key_hashed_nocheck (1,604 samples, 1.41%)</title><rect x="82.1694%" y="629" width="1.4082%" height="15" fill="rgb(208,168,33)" fg:x="93595" fg:w="1604"/><text x="82.4194%" y="639.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_hash (1,604 samples, 1.41%)</title><rect x="82.1694%" y="613" width="1.4082%" height="15" fill="rgb(231,207,8)" fg:x="93595" fg:w="1604"/><text x="82.4194%" y="623.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search (1,604 samples, 1.41%)</title><rect x="82.1694%" y="597" width="1.4082%" height="15" fill="rgb(235,219,23)" fg:x="93595" fg:w="1604"/><text x="82.4194%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (1,600 samples, 1.40%)</title><rect x="82.1729%" y="581" width="1.4047%" height="15" fill="rgb(226,216,26)" fg:x="93599" fg:w="1600"/><text x="82.4229%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (1,600 samples, 1.40%)</title><rect x="82.1729%" y="565" width="1.4047%" height="15" fill="rgb(239,137,16)" fg:x="93599" fg:w="1600"/><text x="82.4229%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (1,600 samples, 1.40%)</title><rect x="82.1729%" y="549" width="1.4047%" height="15" fill="rgb(207,12,36)" fg:x="93599" fg:w="1600"/><text x="82.4229%" y="559.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_key_hashed_nocheck (1,968 samples, 1.73%)</title><rect x="81.8559%" y="725" width="1.7278%" height="15" fill="rgb(210,214,24)" fg:x="93238" fg:w="1968"/><text x="82.1059%" y="735.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (2,305 samples, 2.02%)</title><rect x="81.5662%" y="837" width="2.0236%" height="15" fill="rgb(206,56,30)" fg:x="92908" fg:w="2305"/><text x="81.8162%" y="847.50">t..</text></g><g><title>tremor_script::interpreter::resolve (2,246 samples, 1.97%)</title><rect x="81.6180%" y="821" width="1.9718%" height="15" fill="rgb(228,143,26)" fg:x="92967" fg:w="2246"/><text x="81.8680%" y="831.50">t..</text></g><g><title>tremor_script::interpreter::resolve_value (2,204 samples, 1.93%)</title><rect x="81.6549%" y="805" width="1.9349%" height="15" fill="rgb(216,218,46)" fg:x="93009" fg:w="2204"/><text x="81.9049%" y="815.50">t..</text></g><g><title>tremor_value::known_key::KnownKey::lookup (1,978 samples, 1.74%)</title><rect x="81.8533%" y="789" width="1.7365%" height="15" fill="rgb(206,6,19)" fg:x="93235" fg:w="1978"/><text x="82.1033%" y="799.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (1,976 samples, 1.73%)</title><rect x="81.8551%" y="773" width="1.7348%" height="15" fill="rgb(239,177,51)" fg:x="93237" fg:w="1976"/><text x="82.1051%" y="783.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (1,976 samples, 1.73%)</title><rect x="81.8551%" y="757" width="1.7348%" height="15" fill="rgb(216,55,25)" fg:x="93237" fg:w="1976"/><text x="82.1051%" y="767.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (1,976 samples, 1.73%)</title><rect x="81.8551%" y="741" width="1.7348%" height="15" fill="rgb(231,163,29)" fg:x="93237" fg:w="1976"/><text x="82.1051%" y="751.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::borrow::Borrow&lt;B&gt;&gt;::borrow (68 samples, 0.06%)</title><rect x="84.1701%" y="821" width="0.0597%" height="15" fill="rgb(232,149,50)" fg:x="95874" fg:w="68"/><text x="84.4201%" y="831.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::ops::deref::Deref&gt;::deref (68 samples, 0.06%)</title><rect x="84.1701%" y="805" width="0.0597%" height="15" fill="rgb(223,142,48)" fg:x="95874" fg:w="68"/><text x="84.4201%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::borrow::Cow&lt;tremor_value::value::Value&gt;&gt; (15 samples, 0.01%)</title><rect x="84.2298%" y="821" width="0.0132%" height="15" fill="rgb(245,83,23)" fg:x="95942" fg:w="15"/><text x="84.4798%" y="831.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (74 samples, 0.06%)</title><rect x="84.2430%" y="821" width="0.0650%" height="15" fill="rgb(224,63,2)" fg:x="95957" fg:w="74"/><text x="84.4930%" y="831.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (52 samples, 0.05%)</title><rect x="84.3141%" y="805" width="0.0457%" height="15" fill="rgb(218,65,53)" fg:x="96038" fg:w="52"/><text x="84.5641%" y="815.50"></text></g><g><title>tremor_script::interpreter::test_guard (64 samples, 0.06%)</title><rect x="84.3080%" y="821" width="0.0562%" height="15" fill="rgb(221,84,29)" fg:x="96031" fg:w="64"/><text x="84.5580%" y="831.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (9,944 samples, 8.73%)</title><rect x="76.0476%" y="1013" width="8.7301%" height="15" fill="rgb(234,0,32)" fg:x="86622" fg:w="9944"/><text x="76.2976%" y="1023.50">tremor_pipel..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (9,944 samples, 8.73%)</title><rect x="76.0476%" y="997" width="8.7301%" height="15" fill="rgb(206,20,16)" fg:x="86622" fg:w="9944"/><text x="76.2976%" y="1007.50">tremor_pipel..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (9,944 samples, 8.73%)</title><rect x="76.0476%" y="981" width="8.7301%" height="15" fill="rgb(244,172,18)" fg:x="86622" fg:w="9944"/><text x="76.2976%" y="991.50">tremor_pipel..</text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (9,944 samples, 8.73%)</title><rect x="76.0476%" y="965" width="8.7301%" height="15" fill="rgb(254,133,1)" fg:x="86622" fg:w="9944"/><text x="76.2976%" y="975.50">&lt;tremor_pipe..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (9,870 samples, 8.67%)</title><rect x="76.1125%" y="949" width="8.6651%" height="15" fill="rgb(222,206,41)" fg:x="86696" fg:w="9870"/><text x="76.3625%" y="959.50">&lt;tremor_pipe..</text></g><g><title>tremor_script::srs::EventPayload::rent_mut (9,870 samples, 8.67%)</title><rect x="76.1125%" y="933" width="8.6651%" height="15" fill="rgb(212,3,42)" fg:x="86696" fg:w="9870"/><text x="76.3625%" y="943.50">tremor_scrip..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (9,870 samples, 8.67%)</title><rect x="76.1125%" y="917" width="8.6651%" height="15" fill="rgb(241,11,4)" fg:x="86696" fg:w="9870"/><text x="76.3625%" y="927.50">&lt;tremor_pipe..</text></g><g><title>tremor_script::script::Script::run (9,870 samples, 8.67%)</title><rect x="76.1125%" y="901" width="8.6651%" height="15" fill="rgb(205,19,26)" fg:x="86696" fg:w="9870"/><text x="76.3625%" y="911.50">tremor_scrip..</text></g><g><title>tremor_script::ast::Script::run (9,870 samples, 8.67%)</title><rect x="76.1125%" y="885" width="8.6651%" height="15" fill="rgb(210,179,32)" fg:x="86696" fg:w="9870"/><text x="76.3625%" y="895.50">tremor_scrip..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (9,682 samples, 8.50%)</title><rect x="76.2776%" y="869" width="8.5001%" height="15" fill="rgb(227,116,49)" fg:x="86884" fg:w="9682"/><text x="76.5276%" y="879.50">tremor_scrip..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (9,140 samples, 8.02%)</title><rect x="76.7534%" y="853" width="8.0242%" height="15" fill="rgb(211,146,6)" fg:x="87426" fg:w="9140"/><text x="77.0034%" y="863.50">tremor_scri..</text></g><g><title>tremor_script::interpreter::test_predicate_expr (1,353 samples, 1.19%)</title><rect x="83.5898%" y="837" width="1.1878%" height="15" fill="rgb(219,44,39)" fg:x="95213" fg:w="1353"/><text x="83.8398%" y="847.50"></text></g><g><title>tremor_script::interpreter::val_eq (471 samples, 0.41%)</title><rect x="84.3642%" y="821" width="0.4135%" height="15" fill="rgb(234,128,11)" fg:x="96095" fg:w="471"/><text x="84.6142%" y="831.50"></text></g><g><title>[libc-2.31.so] (309 samples, 0.27%)</title><rect x="84.5064%" y="805" width="0.2713%" height="15" fill="rgb(220,183,53)" fg:x="96257" fg:w="309"/><text x="84.7564%" y="815.50"></text></g><g><title>[libc-2.31.so] (68 samples, 0.06%)</title><rect x="84.7777%" y="981" width="0.0597%" height="15" fill="rgb(213,219,32)" fg:x="96566" fg:w="68"/><text x="85.0277%" y="991.50"></text></g><g><title>[libc-2.31.so] (186 samples, 0.16%)</title><rect x="84.9673%" y="917" width="0.1633%" height="15" fill="rgb(232,156,16)" fg:x="96782" fg:w="186"/><text x="85.2173%" y="927.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (85 samples, 0.07%)</title><rect x="85.1525%" y="901" width="0.0746%" height="15" fill="rgb(246,135,34)" fg:x="96993" fg:w="85"/><text x="85.4025%" y="911.50"></text></g><g><title>core::ptr::write (85 samples, 0.07%)</title><rect x="85.1525%" y="885" width="0.0746%" height="15" fill="rgb(241,99,0)" fg:x="96993" fg:w="85"/><text x="85.4025%" y="895.50"></text></g><g><title>[libc-2.31.so] (82 samples, 0.07%)</title><rect x="85.1552%" y="869" width="0.0720%" height="15" fill="rgb(222,103,45)" fg:x="96996" fg:w="82"/><text x="85.4052%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (214 samples, 0.19%)</title><rect x="85.2272%" y="901" width="0.1879%" height="15" fill="rgb(212,57,4)" fg:x="97078" fg:w="214"/><text x="85.4772%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (214 samples, 0.19%)</title><rect x="85.2272%" y="885" width="0.1879%" height="15" fill="rgb(215,68,47)" fg:x="97078" fg:w="214"/><text x="85.4772%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (122 samples, 0.11%)</title><rect x="85.4150%" y="901" width="0.1071%" height="15" fill="rgb(230,84,2)" fg:x="97292" fg:w="122"/><text x="85.6650%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_load (120 samples, 0.11%)</title><rect x="85.4168%" y="885" width="0.1054%" height="15" fill="rgb(220,102,14)" fg:x="97294" fg:w="120"/><text x="85.6668%" y="895.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (685 samples, 0.60%)</title><rect x="84.9234%" y="933" width="0.6014%" height="15" fill="rgb(240,10,32)" fg:x="96732" fg:w="685"/><text x="85.1734%" y="943.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (449 samples, 0.39%)</title><rect x="85.1306%" y="917" width="0.3942%" height="15" fill="rgb(215,47,27)" fg:x="96968" fg:w="449"/><text x="85.3806%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (74 samples, 0.06%)</title><rect x="85.5353%" y="917" width="0.0650%" height="15" fill="rgb(233,188,43)" fg:x="97429" fg:w="74"/><text x="85.7853%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (69 samples, 0.06%)</title><rect x="85.5397%" y="901" width="0.0606%" height="15" fill="rgb(253,190,1)" fg:x="97434" fg:w="69"/><text x="85.7897%" y="911.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (69 samples, 0.06%)</title><rect x="85.5397%" y="885" width="0.0606%" height="15" fill="rgb(206,114,52)" fg:x="97434" fg:w="69"/><text x="85.7897%" y="895.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (66 samples, 0.06%)</title><rect x="85.5423%" y="869" width="0.0579%" height="15" fill="rgb(233,120,37)" fg:x="97437" fg:w="66"/><text x="85.7923%" y="879.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (65 samples, 0.06%)</title><rect x="85.5432%" y="853" width="0.0571%" height="15" fill="rgb(214,52,39)" fg:x="97438" fg:w="65"/><text x="85.7932%" y="863.50"></text></g><g><title>__GI___pthread_mutex_unlock (65 samples, 0.06%)</title><rect x="85.5432%" y="837" width="0.0571%" height="15" fill="rgb(223,80,29)" fg:x="97438" fg:w="65"/><text x="85.7932%" y="847.50"></text></g><g><title>event_listener::Inner::lock (87 samples, 0.08%)</title><rect x="85.6064%" y="917" width="0.0764%" height="15" fill="rgb(230,101,40)" fg:x="97510" fg:w="87"/><text x="85.8564%" y="927.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (86 samples, 0.08%)</title><rect x="85.6073%" y="901" width="0.0755%" height="15" fill="rgb(219,211,8)" fg:x="97511" fg:w="86"/><text x="85.8573%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (84 samples, 0.07%)</title><rect x="85.6091%" y="885" width="0.0737%" height="15" fill="rgb(252,126,28)" fg:x="97513" fg:w="84"/><text x="85.8591%" y="895.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (80 samples, 0.07%)</title><rect x="85.6126%" y="869" width="0.0702%" height="15" fill="rgb(215,56,38)" fg:x="97517" fg:w="80"/><text x="85.8626%" y="879.50"></text></g><g><title>__GI___pthread_mutex_lock (80 samples, 0.07%)</title><rect x="85.6126%" y="853" width="0.0702%" height="15" fill="rgb(249,55,44)" fg:x="97517" fg:w="80"/><text x="85.8626%" y="863.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_waker (26 samples, 0.02%)</title><rect x="85.6881%" y="869" width="0.0228%" height="15" fill="rgb(220,221,32)" fg:x="97603" fg:w="26"/><text x="85.9381%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (26 samples, 0.02%)</title><rect x="85.6881%" y="853" width="0.0228%" height="15" fill="rgb(212,216,41)" fg:x="97603" fg:w="26"/><text x="85.9381%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_sub (26 samples, 0.02%)</title><rect x="85.6881%" y="837" width="0.0228%" height="15" fill="rgb(228,213,43)" fg:x="97603" fg:w="26"/><text x="85.9381%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (81 samples, 0.07%)</title><rect x="85.7153%" y="821" width="0.0711%" height="15" fill="rgb(211,31,26)" fg:x="97634" fg:w="81"/><text x="85.9653%" y="831.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (81 samples, 0.07%)</title><rect x="85.7153%" y="805" width="0.0711%" height="15" fill="rgb(229,202,19)" fg:x="97634" fg:w="81"/><text x="85.9653%" y="815.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (80 samples, 0.07%)</title><rect x="85.7162%" y="789" width="0.0702%" height="15" fill="rgb(229,105,46)" fg:x="97635" fg:w="80"/><text x="85.9662%" y="799.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (80 samples, 0.07%)</title><rect x="85.7162%" y="773" width="0.0702%" height="15" fill="rgb(235,108,1)" fg:x="97635" fg:w="80"/><text x="85.9662%" y="783.50"></text></g><g><title>__GI___pthread_mutex_unlock (80 samples, 0.07%)</title><rect x="85.7162%" y="757" width="0.0702%" height="15" fill="rgb(245,111,35)" fg:x="97635" fg:w="80"/><text x="85.9662%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (21 samples, 0.02%)</title><rect x="85.7864%" y="821" width="0.0184%" height="15" fill="rgb(219,185,31)" fg:x="97715" fg:w="21"/><text x="86.0364%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (21 samples, 0.02%)</title><rect x="85.7864%" y="805" width="0.0184%" height="15" fill="rgb(214,4,43)" fg:x="97715" fg:w="21"/><text x="86.0364%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (53 samples, 0.05%)</title><rect x="85.8443%" y="741" width="0.0465%" height="15" fill="rgb(235,227,40)" fg:x="97781" fg:w="53"/><text x="86.0943%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_swap (53 samples, 0.05%)</title><rect x="85.8443%" y="725" width="0.0465%" height="15" fill="rgb(230,88,30)" fg:x="97781" fg:w="53"/><text x="86.0943%" y="735.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (64 samples, 0.06%)</title><rect x="85.8909%" y="741" width="0.0562%" height="15" fill="rgb(216,217,1)" fg:x="97834" fg:w="64"/><text x="86.1409%" y="751.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (64 samples, 0.06%)</title><rect x="85.8909%" y="725" width="0.0562%" height="15" fill="rgb(248,139,50)" fg:x="97834" fg:w="64"/><text x="86.1409%" y="735.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (64 samples, 0.06%)</title><rect x="85.8909%" y="709" width="0.0562%" height="15" fill="rgb(233,1,21)" fg:x="97834" fg:w="64"/><text x="86.1409%" y="719.50"></text></g><g><title>__pthread_cond_signal (64 samples, 0.06%)</title><rect x="85.8909%" y="693" width="0.0562%" height="15" fill="rgb(215,183,12)" fg:x="97834" fg:w="64"/><text x="86.1409%" y="703.50"></text></g><g><title>parking::Unparker::unpark (184 samples, 0.16%)</title><rect x="85.8259%" y="773" width="0.1615%" height="15" fill="rgb(229,104,42)" fg:x="97760" fg:w="184"/><text x="86.0759%" y="783.50"></text></g><g><title>parking::Inner::unpark (169 samples, 0.15%)</title><rect x="85.8391%" y="757" width="0.1484%" height="15" fill="rgb(243,34,48)" fg:x="97775" fg:w="169"/><text x="86.0891%" y="767.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (46 samples, 0.04%)</title><rect x="85.9471%" y="741" width="0.0404%" height="15" fill="rgb(239,11,44)" fg:x="97898" fg:w="46"/><text x="86.1971%" y="751.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (44 samples, 0.04%)</title><rect x="85.9488%" y="725" width="0.0386%" height="15" fill="rgb(231,98,35)" fg:x="97900" fg:w="44"/><text x="86.1988%" y="735.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (44 samples, 0.04%)</title><rect x="85.9488%" y="709" width="0.0386%" height="15" fill="rgb(233,28,25)" fg:x="97900" fg:w="44"/><text x="86.1988%" y="719.50"></text></g><g><title>__GI___pthread_mutex_lock (44 samples, 0.04%)</title><rect x="85.9488%" y="693" width="0.0386%" height="15" fill="rgb(234,123,11)" fg:x="97900" fg:w="44"/><text x="86.1988%" y="703.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (207 samples, 0.18%)</title><rect x="85.8066%" y="789" width="0.1817%" height="15" fill="rgb(220,69,3)" fg:x="97738" fg:w="207"/><text x="86.0566%" y="799.50"></text></g><g><title>core::task::wake::Waker::wake (251 samples, 0.22%)</title><rect x="85.8048%" y="821" width="0.2204%" height="15" fill="rgb(214,64,36)" fg:x="97736" fg:w="251"/><text x="86.0548%" y="831.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (251 samples, 0.22%)</title><rect x="85.8048%" y="805" width="0.2204%" height="15" fill="rgb(211,138,32)" fg:x="97736" fg:w="251"/><text x="86.0548%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (42 samples, 0.04%)</title><rect x="85.9883%" y="789" width="0.0369%" height="15" fill="rgb(213,118,47)" fg:x="97945" fg:w="42"/><text x="86.2383%" y="799.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (42 samples, 0.04%)</title><rect x="85.9883%" y="773" width="0.0369%" height="15" fill="rgb(243,124,49)" fg:x="97945" fg:w="42"/><text x="86.2383%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (42 samples, 0.04%)</title><rect x="85.9883%" y="757" width="0.0369%" height="15" fill="rgb(221,30,28)" fg:x="97945" fg:w="42"/><text x="86.2383%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_sub (42 samples, 0.04%)</title><rect x="85.9883%" y="741" width="0.0369%" height="15" fill="rgb(246,37,13)" fg:x="97945" fg:w="42"/><text x="86.2383%" y="751.50"></text></g><g><title>async_executor::State::notify (417 samples, 0.37%)</title><rect x="85.7127%" y="837" width="0.3661%" height="15" fill="rgb(249,66,14)" fg:x="97631" fg:w="417"/><text x="85.9627%" y="847.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (61 samples, 0.05%)</title><rect x="86.0252%" y="821" width="0.0536%" height="15" fill="rgb(213,166,5)" fg:x="97987" fg:w="61"/><text x="86.2752%" y="831.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (57 samples, 0.05%)</title><rect x="86.0287%" y="805" width="0.0500%" height="15" fill="rgb(221,66,24)" fg:x="97991" fg:w="57"/><text x="86.2787%" y="815.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (52 samples, 0.05%)</title><rect x="86.0331%" y="789" width="0.0457%" height="15" fill="rgb(210,132,17)" fg:x="97996" fg:w="52"/><text x="86.2831%" y="799.50"></text></g><g><title>__GI___pthread_mutex_lock (52 samples, 0.05%)</title><rect x="86.0331%" y="773" width="0.0457%" height="15" fill="rgb(243,202,5)" fg:x="97996" fg:w="52"/><text x="86.2831%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (57 samples, 0.05%)</title><rect x="86.0858%" y="805" width="0.0500%" height="15" fill="rgb(233,70,48)" fg:x="98056" fg:w="57"/><text x="86.3358%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (57 samples, 0.05%)</title><rect x="86.0858%" y="789" width="0.0500%" height="15" fill="rgb(238,41,26)" fg:x="98056" fg:w="57"/><text x="86.3358%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (26 samples, 0.02%)</title><rect x="86.1376%" y="805" width="0.0228%" height="15" fill="rgb(241,19,31)" fg:x="98115" fg:w="26"/><text x="86.3876%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_or (26 samples, 0.02%)</title><rect x="86.1376%" y="789" width="0.0228%" height="15" fill="rgb(214,76,10)" fg:x="98115" fg:w="26"/><text x="86.3876%" y="799.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (513 samples, 0.45%)</title><rect x="85.7127%" y="853" width="0.4504%" height="15" fill="rgb(254,202,22)" fg:x="97631" fg:w="513"/><text x="85.9627%" y="863.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (96 samples, 0.08%)</title><rect x="86.0787%" y="837" width="0.0843%" height="15" fill="rgb(214,72,24)" fg:x="98048" fg:w="96"/><text x="86.3287%" y="847.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (91 samples, 0.08%)</title><rect x="86.0831%" y="821" width="0.0799%" height="15" fill="rgb(221,92,46)" fg:x="98053" fg:w="91"/><text x="86.3331%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (81 samples, 0.07%)</title><rect x="86.1630%" y="853" width="0.0711%" height="15" fill="rgb(246,13,50)" fg:x="98144" fg:w="81"/><text x="86.4130%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (81 samples, 0.07%)</title><rect x="86.1630%" y="837" width="0.0711%" height="15" fill="rgb(240,165,38)" fg:x="98144" fg:w="81"/><text x="86.4130%" y="847.50"></text></g><g><title>event_listener::List::notify (633 samples, 0.56%)</title><rect x="85.6828%" y="917" width="0.5557%" height="15" fill="rgb(241,24,51)" fg:x="97597" fg:w="633"/><text x="85.9328%" y="927.50"></text></g><g><title>core::task::wake::Waker::wake (627 samples, 0.55%)</title><rect x="85.6881%" y="901" width="0.5505%" height="15" fill="rgb(227,51,44)" fg:x="97603" fg:w="627"/><text x="85.9381%" y="911.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (627 samples, 0.55%)</title><rect x="85.6881%" y="885" width="0.5505%" height="15" fill="rgb(231,121,3)" fg:x="97603" fg:w="627"/><text x="85.9381%" y="895.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (601 samples, 0.53%)</title><rect x="85.7109%" y="869" width="0.5276%" height="15" fill="rgb(245,3,41)" fg:x="97629" fg:w="601"/><text x="85.9609%" y="879.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (2,211 samples, 1.94%)</title><rect x="84.9120%" y="949" width="1.9411%" height="15" fill="rgb(214,13,26)" fg:x="96719" fg:w="2211"/><text x="85.1620%" y="959.50">a..</text></g><g><title>event_listener::Event::notify (1,513 samples, 1.33%)</title><rect x="85.5248%" y="933" width="1.3283%" height="15" fill="rgb(252,75,11)" fg:x="97417" fg:w="1513"/><text x="85.7748%" y="943.50"></text></g><g><title>event_listener::full_fence (700 samples, 0.61%)</title><rect x="86.2385%" y="917" width="0.6145%" height="15" fill="rgb(218,226,17)" fg:x="98230" fg:w="700"/><text x="86.4885%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (690 samples, 0.61%)</title><rect x="86.2473%" y="901" width="0.6058%" height="15" fill="rgb(248,89,38)" fg:x="98240" fg:w="690"/><text x="86.4973%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (690 samples, 0.61%)</title><rect x="86.2473%" y="885" width="0.6058%" height="15" fill="rgb(237,73,46)" fg:x="98240" fg:w="690"/><text x="86.4973%" y="895.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (2,339 samples, 2.05%)</title><rect x="84.8813%" y="965" width="2.0535%" height="15" fill="rgb(242,78,33)" fg:x="96684" fg:w="2339"/><text x="85.1313%" y="975.50">&lt;..</text></g><g><title>event_listener::Event::notify (80 samples, 0.07%)</title><rect x="86.8645%" y="949" width="0.0702%" height="15" fill="rgb(235,60,3)" fg:x="98943" fg:w="80"/><text x="87.1145%" y="959.50"></text></g><g><title>event_listener::full_fence (77 samples, 0.07%)</title><rect x="86.8671%" y="933" width="0.0676%" height="15" fill="rgb(216,172,19)" fg:x="98946" fg:w="77"/><text x="87.1171%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (77 samples, 0.07%)</title><rect x="86.8671%" y="917" width="0.0676%" height="15" fill="rgb(227,6,42)" fg:x="98946" fg:w="77"/><text x="87.1171%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (77 samples, 0.07%)</title><rect x="86.8671%" y="901" width="0.0676%" height="15" fill="rgb(223,207,42)" fg:x="98946" fg:w="77"/><text x="87.1171%" y="911.50"></text></g><g><title>[libc-2.31.so] (298 samples, 0.26%)</title><rect x="86.9365%" y="965" width="0.2616%" height="15" fill="rgb(246,138,30)" fg:x="99025" fg:w="298"/><text x="87.1865%" y="975.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (15,944 samples, 14.00%)</title><rect x="73.2049%" y="1045" width="13.9976%" height="15" fill="rgb(251,199,47)" fg:x="83384" fg:w="15944"/><text x="73.4549%" y="1055.50">tremor_runtime::pipel..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,706 samples, 11.15%)</title><rect x="76.0476%" y="1029" width="11.1549%" height="15" fill="rgb(228,218,44)" fg:x="86622" fg:w="12706"/><text x="76.2976%" y="1039.50">&lt;core::future::f..</text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (2,762 samples, 2.42%)</title><rect x="84.7777%" y="1013" width="2.4248%" height="15" fill="rgb(220,68,6)" fg:x="96566" fg:w="2762"/><text x="85.0277%" y="1023.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,762 samples, 2.42%)</title><rect x="84.7777%" y="997" width="2.4248%" height="15" fill="rgb(240,60,26)" fg:x="96566" fg:w="2762"/><text x="85.0277%" y="1007.50">&lt;c..</text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (2,694 samples, 2.37%)</title><rect x="84.8374%" y="981" width="2.3651%" height="15" fill="rgb(211,200,19)" fg:x="96634" fg:w="2694"/><text x="85.0874%" y="991.50">tr..</text></g><g><title>tremor_runtime::postprocessor::postprocess (23 samples, 0.02%)</title><rect x="87.2025%" y="1045" width="0.0202%" height="15" fill="rgb(242,145,30)" fg:x="99328" fg:w="23"/><text x="87.4525%" y="1055.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search::{{closure}} (62 samples, 0.05%)</title><rect x="87.5370%" y="629" width="0.0544%" height="15" fill="rgb(225,64,13)" fg:x="99709" fg:w="62"/><text x="87.7870%" y="639.50"></text></g><g><title>hashbrown::map::equivalent::{{closure}} (56 samples, 0.05%)</title><rect x="87.5423%" y="613" width="0.0492%" height="15" fill="rgb(218,103,35)" fg:x="99715" fg:w="56"/><text x="87.7923%" y="623.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (56 samples, 0.05%)</title><rect x="87.5423%" y="597" width="0.0492%" height="15" fill="rgb(216,93,46)" fg:x="99715" fg:w="56"/><text x="87.7923%" y="607.50"></text></g><g><title>abi_stable::std_types::map::map_query::MapQuery&lt;K&gt;::is_equal (36 samples, 0.03%)</title><rect x="87.5598%" y="581" width="0.0316%" height="15" fill="rgb(225,159,27)" fg:x="99735" fg:w="36"/><text x="87.8098%" y="591.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (33 samples, 0.03%)</title><rect x="87.5624%" y="565" width="0.0290%" height="15" fill="rgb(225,204,11)" fg:x="99738" fg:w="33"/><text x="87.8124%" y="575.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (33 samples, 0.03%)</title><rect x="87.5624%" y="549" width="0.0290%" height="15" fill="rgb(205,56,4)" fg:x="99738" fg:w="33"/><text x="87.8124%" y="559.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (31 samples, 0.03%)</title><rect x="87.5642%" y="533" width="0.0272%" height="15" fill="rgb(206,6,35)" fg:x="99740" fg:w="31"/><text x="87.8142%" y="543.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (31 samples, 0.03%)</title><rect x="87.5642%" y="517" width="0.0272%" height="15" fill="rgb(247,73,52)" fg:x="99740" fg:w="31"/><text x="87.8142%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (31 samples, 0.03%)</title><rect x="87.5642%" y="501" width="0.0272%" height="15" fill="rgb(246,97,4)" fg:x="99740" fg:w="31"/><text x="87.8142%" y="511.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (31 samples, 0.03%)</title><rect x="87.5642%" y="485" width="0.0272%" height="15" fill="rgb(212,37,15)" fg:x="99740" fg:w="31"/><text x="87.8142%" y="495.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (31 samples, 0.03%)</title><rect x="87.5642%" y="469" width="0.0272%" height="15" fill="rgb(208,130,40)" fg:x="99740" fg:w="31"/><text x="87.8142%" y="479.50"></text></g><g><title>[libc-2.31.so] (27 samples, 0.02%)</title><rect x="87.5677%" y="453" width="0.0237%" height="15" fill="rgb(236,55,29)" fg:x="99744" fg:w="27"/><text x="87.8177%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (67 samples, 0.06%)</title><rect x="87.5370%" y="645" width="0.0588%" height="15" fill="rgb(209,156,45)" fg:x="99709" fg:w="67"/><text x="87.7870%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (118 samples, 0.10%)</title><rect x="87.5036%" y="821" width="0.1036%" height="15" fill="rgb(249,107,4)" fg:x="99671" fg:w="118"/><text x="87.7536%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (113 samples, 0.10%)</title><rect x="87.5080%" y="805" width="0.0992%" height="15" fill="rgb(227,7,13)" fg:x="99676" fg:w="113"/><text x="87.7580%" y="815.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (113 samples, 0.10%)</title><rect x="87.5080%" y="789" width="0.0992%" height="15" fill="rgb(250,129,14)" fg:x="99676" fg:w="113"/><text x="87.7580%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck::{{closure}} (113 samples, 0.10%)</title><rect x="87.5080%" y="773" width="0.0992%" height="15" fill="rgb(229,92,13)" fg:x="99676" fg:w="113"/><text x="87.7580%" y="783.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_key_hashed_nocheck (92 samples, 0.08%)</title><rect x="87.5264%" y="757" width="0.0808%" height="15" fill="rgb(245,98,39)" fg:x="99697" fg:w="92"/><text x="87.7764%" y="767.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_key_hashed_nocheck (92 samples, 0.08%)</title><rect x="87.5264%" y="741" width="0.0808%" height="15" fill="rgb(234,135,48)" fg:x="99697" fg:w="92"/><text x="87.7764%" y="751.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_hash (92 samples, 0.08%)</title><rect x="87.5264%" y="725" width="0.0808%" height="15" fill="rgb(230,98,28)" fg:x="99697" fg:w="92"/><text x="87.7764%" y="735.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search (92 samples, 0.08%)</title><rect x="87.5264%" y="709" width="0.0808%" height="15" fill="rgb(223,121,0)" fg:x="99697" fg:w="92"/><text x="87.7764%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (90 samples, 0.08%)</title><rect x="87.5282%" y="693" width="0.0790%" height="15" fill="rgb(234,173,33)" fg:x="99699" fg:w="90"/><text x="87.7782%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (90 samples, 0.08%)</title><rect x="87.5282%" y="677" width="0.0790%" height="15" fill="rgb(245,47,8)" fg:x="99699" fg:w="90"/><text x="87.7782%" y="687.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (90 samples, 0.08%)</title><rect x="87.5282%" y="661" width="0.0790%" height="15" fill="rgb(205,17,20)" fg:x="99699" fg:w="90"/><text x="87.7782%" y="671.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_key_hashed_nocheck (327 samples, 0.29%)</title><rect x="87.3236%" y="837" width="0.2871%" height="15" fill="rgb(232,151,16)" fg:x="99466" fg:w="327"/><text x="87.5736%" y="847.50"></text></g><g><title>tremor_script::ast::Script::run (445 samples, 0.39%)</title><rect x="87.2244%" y="1045" width="0.3907%" height="15" fill="rgb(208,30,32)" fg:x="99353" fg:w="445"/><text x="87.4744%" y="1055.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (443 samples, 0.39%)</title><rect x="87.2262%" y="1029" width="0.3889%" height="15" fill="rgb(254,26,3)" fg:x="99355" fg:w="443"/><text x="87.4762%" y="1039.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (443 samples, 0.39%)</title><rect x="87.2262%" y="1013" width="0.3889%" height="15" fill="rgb(240,177,30)" fg:x="99355" fg:w="443"/><text x="87.4762%" y="1023.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (443 samples, 0.39%)</title><rect x="87.2262%" y="997" width="0.3889%" height="15" fill="rgb(248,76,44)" fg:x="99355" fg:w="443"/><text x="87.4762%" y="1007.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (443 samples, 0.39%)</title><rect x="87.2262%" y="981" width="0.3889%" height="15" fill="rgb(241,186,54)" fg:x="99355" fg:w="443"/><text x="87.4762%" y="991.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (443 samples, 0.39%)</title><rect x="87.2262%" y="965" width="0.3889%" height="15" fill="rgb(249,171,29)" fg:x="99355" fg:w="443"/><text x="87.4762%" y="975.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (443 samples, 0.39%)</title><rect x="87.2262%" y="949" width="0.3889%" height="15" fill="rgb(237,151,44)" fg:x="99355" fg:w="443"/><text x="87.4762%" y="959.50"></text></g><g><title>tremor_script::interpreter::resolve (443 samples, 0.39%)</title><rect x="87.2262%" y="933" width="0.3889%" height="15" fill="rgb(228,174,30)" fg:x="99355" fg:w="443"/><text x="87.4762%" y="943.50"></text></g><g><title>tremor_script::interpreter::resolve_value (443 samples, 0.39%)</title><rect x="87.2262%" y="917" width="0.3889%" height="15" fill="rgb(252,14,37)" fg:x="99355" fg:w="443"/><text x="87.4762%" y="927.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup (333 samples, 0.29%)</title><rect x="87.3228%" y="901" width="0.2923%" height="15" fill="rgb(207,111,40)" fg:x="99465" fg:w="333"/><text x="87.5728%" y="911.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (333 samples, 0.29%)</title><rect x="87.3228%" y="885" width="0.2923%" height="15" fill="rgb(248,171,54)" fg:x="99465" fg:w="333"/><text x="87.5728%" y="895.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (333 samples, 0.29%)</title><rect x="87.3228%" y="869" width="0.2923%" height="15" fill="rgb(211,127,2)" fg:x="99465" fg:w="333"/><text x="87.5728%" y="879.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (333 samples, 0.29%)</title><rect x="87.3228%" y="853" width="0.2923%" height="15" fill="rgb(236,87,47)" fg:x="99465" fg:w="333"/><text x="87.5728%" y="863.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (43 samples, 0.04%)</title><rect x="87.6151%" y="1045" width="0.0378%" height="15" fill="rgb(223,190,45)" fg:x="99798" fg:w="43"/><text x="87.8651%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_key_hashed_nocheck (31 samples, 0.03%)</title><rect x="87.6968%" y="853" width="0.0272%" height="15" fill="rgb(215,5,16)" fg:x="99891" fg:w="31"/><text x="87.9468%" y="863.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (67 samples, 0.06%)</title><rect x="87.6660%" y="1045" width="0.0588%" height="15" fill="rgb(252,82,33)" fg:x="99856" fg:w="67"/><text x="87.9160%" y="1055.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (51 samples, 0.04%)</title><rect x="87.6801%" y="1029" width="0.0448%" height="15" fill="rgb(247,213,44)" fg:x="99872" fg:w="51"/><text x="87.9301%" y="1039.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (51 samples, 0.04%)</title><rect x="87.6801%" y="1013" width="0.0448%" height="15" fill="rgb(205,196,44)" fg:x="99872" fg:w="51"/><text x="87.9301%" y="1023.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (51 samples, 0.04%)</title><rect x="87.6801%" y="997" width="0.0448%" height="15" fill="rgb(237,96,54)" fg:x="99872" fg:w="51"/><text x="87.9301%" y="1007.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (51 samples, 0.04%)</title><rect x="87.6801%" y="981" width="0.0448%" height="15" fill="rgb(230,113,34)" fg:x="99872" fg:w="51"/><text x="87.9301%" y="991.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (51 samples, 0.04%)</title><rect x="87.6801%" y="965" width="0.0448%" height="15" fill="rgb(221,224,12)" fg:x="99872" fg:w="51"/><text x="87.9301%" y="975.50"></text></g><g><title>tremor_script::interpreter::resolve (51 samples, 0.04%)</title><rect x="87.6801%" y="949" width="0.0448%" height="15" fill="rgb(219,112,44)" fg:x="99872" fg:w="51"/><text x="87.9301%" y="959.50"></text></g><g><title>tremor_script::interpreter::resolve_value (51 samples, 0.04%)</title><rect x="87.6801%" y="933" width="0.0448%" height="15" fill="rgb(210,31,13)" fg:x="99872" fg:w="51"/><text x="87.9301%" y="943.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup (32 samples, 0.03%)</title><rect x="87.6968%" y="917" width="0.0281%" height="15" fill="rgb(230,25,16)" fg:x="99891" fg:w="32"/><text x="87.9468%" y="927.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (32 samples, 0.03%)</title><rect x="87.6968%" y="901" width="0.0281%" height="15" fill="rgb(246,108,53)" fg:x="99891" fg:w="32"/><text x="87.9468%" y="911.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (32 samples, 0.03%)</title><rect x="87.6968%" y="885" width="0.0281%" height="15" fill="rgb(241,172,50)" fg:x="99891" fg:w="32"/><text x="87.9468%" y="895.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (32 samples, 0.03%)</title><rect x="87.6968%" y="869" width="0.0281%" height="15" fill="rgb(235,141,10)" fg:x="99891" fg:w="32"/><text x="87.9468%" y="879.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (12 samples, 0.01%)</title><rect x="87.7249%" y="1045" width="0.0105%" height="15" fill="rgb(220,174,43)" fg:x="99923" fg:w="12"/><text x="87.9749%" y="1055.50"></text></g><g><title>tremor_script::interpreter::val_eq (53 samples, 0.05%)</title><rect x="87.7398%" y="1045" width="0.0465%" height="15" fill="rgb(215,181,40)" fg:x="99940" fg:w="53"/><text x="87.9898%" y="1055.50"></text></g><g><title>core::mem::swap (24 samples, 0.02%)</title><rect x="87.8249%" y="613" width="0.0211%" height="15" fill="rgb(230,97,2)" fg:x="100037" fg:w="24"/><text x="88.0749%" y="623.50"></text></g><g><title>core::mem::swap_simple (24 samples, 0.02%)</title><rect x="87.8249%" y="597" width="0.0211%" height="15" fill="rgb(211,25,27)" fg:x="100037" fg:w="24"/><text x="88.0749%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (30 samples, 0.03%)</title><rect x="87.8241%" y="629" width="0.0263%" height="15" fill="rgb(230,87,26)" fg:x="100036" fg:w="30"/><text x="88.0741%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (36 samples, 0.03%)</title><rect x="87.8206%" y="677" width="0.0316%" height="15" fill="rgb(227,160,17)" fg:x="100032" fg:w="36"/><text x="88.0706%" y="687.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (34 samples, 0.03%)</title><rect x="87.8223%" y="661" width="0.0298%" height="15" fill="rgb(244,85,34)" fg:x="100034" fg:w="34"/><text x="88.0723%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (33 samples, 0.03%)</title><rect x="87.8232%" y="645" width="0.0290%" height="15" fill="rgb(207,70,0)" fg:x="100035" fg:w="33"/><text x="88.0732%" y="655.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (88 samples, 0.08%)</title><rect x="87.7863%" y="917" width="0.0773%" height="15" fill="rgb(223,129,7)" fg:x="99993" fg:w="88"/><text x="88.0363%" y="927.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (88 samples, 0.08%)</title><rect x="87.7863%" y="901" width="0.0773%" height="15" fill="rgb(246,105,7)" fg:x="99993" fg:w="88"/><text x="88.0363%" y="911.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (88 samples, 0.08%)</title><rect x="87.7863%" y="885" width="0.0773%" height="15" fill="rgb(215,154,42)" fg:x="99993" fg:w="88"/><text x="88.0363%" y="895.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (88 samples, 0.08%)</title><rect x="87.7863%" y="869" width="0.0773%" height="15" fill="rgb(220,215,30)" fg:x="99993" fg:w="88"/><text x="88.0363%" y="879.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (88 samples, 0.08%)</title><rect x="87.7863%" y="853" width="0.0773%" height="15" fill="rgb(228,81,51)" fg:x="99993" fg:w="88"/><text x="88.0363%" y="863.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (88 samples, 0.08%)</title><rect x="87.7863%" y="837" width="0.0773%" height="15" fill="rgb(247,71,54)" fg:x="99993" fg:w="88"/><text x="88.0363%" y="847.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (88 samples, 0.08%)</title><rect x="87.7863%" y="821" width="0.0773%" height="15" fill="rgb(234,176,34)" fg:x="99993" fg:w="88"/><text x="88.0363%" y="831.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}} (88 samples, 0.08%)</title><rect x="87.7863%" y="805" width="0.0773%" height="15" fill="rgb(241,103,54)" fg:x="99993" fg:w="88"/><text x="88.0363%" y="815.50"></text></g><g><title>abi_stable::traits::ErasedType::run_downcast_as_mut (88 samples, 0.08%)</title><rect x="87.7863%" y="789" width="0.0773%" height="15" fill="rgb(228,22,34)" fg:x="99993" fg:w="88"/><text x="88.0363%" y="799.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}}::{{closure}} (88 samples, 0.08%)</title><rect x="87.7863%" y="773" width="0.0773%" height="15" fill="rgb(241,179,48)" fg:x="99993" fg:w="88"/><text x="88.0363%" y="783.50"></text></g><g><title>halfbrown::raw_entry::RawVacantEntryMut&lt;K,V,S&gt;::insert (88 samples, 0.08%)</title><rect x="87.7863%" y="757" width="0.0773%" height="15" fill="rgb(235,167,37)" fg:x="99993" fg:w="88"/><text x="88.0363%" y="767.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert (88 samples, 0.08%)</title><rect x="87.7863%" y="741" width="0.0773%" height="15" fill="rgb(213,109,30)" fg:x="99993" fg:w="88"/><text x="88.0363%" y="751.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert_hashed_nocheck (88 samples, 0.08%)</title><rect x="87.7863%" y="725" width="0.0773%" height="15" fill="rgb(222,172,16)" fg:x="99993" fg:w="88"/><text x="88.0363%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_entry (69 samples, 0.06%)</title><rect x="87.8030%" y="709" width="0.0606%" height="15" fill="rgb(233,192,5)" fg:x="100012" fg:w="69"/><text x="88.0530%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (55 samples, 0.05%)</title><rect x="87.8153%" y="693" width="0.0483%" height="15" fill="rgb(247,189,41)" fg:x="100026" fg:w="55"/><text x="88.0653%" y="703.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (100 samples, 0.09%)</title><rect x="87.7863%" y="949" width="0.0878%" height="15" fill="rgb(218,134,47)" fg:x="99993" fg:w="100"/><text x="88.0363%" y="959.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (100 samples, 0.09%)</title><rect x="87.7863%" y="933" width="0.0878%" height="15" fill="rgb(216,29,3)" fg:x="99993" fg:w="100"/><text x="88.0363%" y="943.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (12 samples, 0.01%)</title><rect x="87.8636%" y="917" width="0.0105%" height="15" fill="rgb(246,140,12)" fg:x="100081" fg:w="12"/><text x="88.1136%" y="927.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (12 samples, 0.01%)</title><rect x="87.8636%" y="901" width="0.0105%" height="15" fill="rgb(230,136,11)" fg:x="100081" fg:w="12"/><text x="88.1136%" y="911.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (15 samples, 0.01%)</title><rect x="87.9110%" y="597" width="0.0132%" height="15" fill="rgb(247,22,47)" fg:x="100135" fg:w="15"/><text x="88.1610%" y="607.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search::{{closure}} (15 samples, 0.01%)</title><rect x="87.9110%" y="581" width="0.0132%" height="15" fill="rgb(218,84,22)" fg:x="100135" fg:w="15"/><text x="88.1610%" y="591.50"></text></g><g><title>hashbrown::map::equivalent::{{closure}} (13 samples, 0.01%)</title><rect x="87.9127%" y="565" width="0.0114%" height="15" fill="rgb(216,87,39)" fg:x="100137" fg:w="13"/><text x="88.1627%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (13 samples, 0.01%)</title><rect x="87.9127%" y="549" width="0.0114%" height="15" fill="rgb(221,178,8)" fg:x="100137" fg:w="13"/><text x="88.1627%" y="559.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (161 samples, 0.14%)</title><rect x="87.7863%" y="965" width="0.1413%" height="15" fill="rgb(230,42,11)" fg:x="99993" fg:w="161"/><text x="88.0363%" y="975.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (61 samples, 0.05%)</title><rect x="87.8741%" y="949" width="0.0536%" height="15" fill="rgb(237,229,4)" fg:x="100093" fg:w="61"/><text x="88.1241%" y="959.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::invoke2 (61 samples, 0.05%)</title><rect x="87.8741%" y="933" width="0.0536%" height="15" fill="rgb(222,31,33)" fg:x="100093" fg:w="61"/><text x="88.1241%" y="943.50"></text></g><g><title>tremor_script::interpreter::imut_expr::eval_for_fn_arg (61 samples, 0.05%)</title><rect x="87.8741%" y="917" width="0.0536%" height="15" fill="rgb(210,17,39)" fg:x="100093" fg:w="61"/><text x="88.1241%" y="927.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (61 samples, 0.05%)</title><rect x="87.8741%" y="901" width="0.0536%" height="15" fill="rgb(244,93,20)" fg:x="100093" fg:w="61"/><text x="88.1241%" y="911.50"></text></g><g><title>tremor_script::interpreter::resolve (61 samples, 0.05%)</title><rect x="87.8741%" y="885" width="0.0536%" height="15" fill="rgb(210,40,47)" fg:x="100093" fg:w="61"/><text x="88.1241%" y="895.50"></text></g><g><title>tremor_script::interpreter::resolve_value (61 samples, 0.05%)</title><rect x="87.8741%" y="869" width="0.0536%" height="15" fill="rgb(239,211,47)" fg:x="100093" fg:w="61"/><text x="88.1241%" y="879.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup (47 samples, 0.04%)</title><rect x="87.8864%" y="853" width="0.0413%" height="15" fill="rgb(251,223,49)" fg:x="100107" fg:w="47"/><text x="88.1364%" y="863.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (47 samples, 0.04%)</title><rect x="87.8864%" y="837" width="0.0413%" height="15" fill="rgb(221,149,5)" fg:x="100107" fg:w="47"/><text x="88.1364%" y="847.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (47 samples, 0.04%)</title><rect x="87.8864%" y="821" width="0.0413%" height="15" fill="rgb(219,224,51)" fg:x="100107" fg:w="47"/><text x="88.1364%" y="831.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (47 samples, 0.04%)</title><rect x="87.8864%" y="805" width="0.0413%" height="15" fill="rgb(223,7,8)" fg:x="100107" fg:w="47"/><text x="88.1364%" y="815.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_key_hashed_nocheck (47 samples, 0.04%)</title><rect x="87.8864%" y="789" width="0.0413%" height="15" fill="rgb(241,217,22)" fg:x="100107" fg:w="47"/><text x="88.1364%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (21 samples, 0.02%)</title><rect x="87.9092%" y="773" width="0.0184%" height="15" fill="rgb(248,209,0)" fg:x="100133" fg:w="21"/><text x="88.1592%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (20 samples, 0.02%)</title><rect x="87.9101%" y="757" width="0.0176%" height="15" fill="rgb(217,205,4)" fg:x="100134" fg:w="20"/><text x="88.1601%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (20 samples, 0.02%)</title><rect x="87.9101%" y="741" width="0.0176%" height="15" fill="rgb(228,124,39)" fg:x="100134" fg:w="20"/><text x="88.1601%" y="751.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck::{{closure}} (20 samples, 0.02%)</title><rect x="87.9101%" y="725" width="0.0176%" height="15" fill="rgb(250,116,42)" fg:x="100134" fg:w="20"/><text x="88.1601%" y="735.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_key_hashed_nocheck (19 samples, 0.02%)</title><rect x="87.9110%" y="709" width="0.0167%" height="15" fill="rgb(223,202,9)" fg:x="100135" fg:w="19"/><text x="88.1610%" y="719.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_key_hashed_nocheck (19 samples, 0.02%)</title><rect x="87.9110%" y="693" width="0.0167%" height="15" fill="rgb(242,222,40)" fg:x="100135" fg:w="19"/><text x="88.1610%" y="703.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_hash (19 samples, 0.02%)</title><rect x="87.9110%" y="677" width="0.0167%" height="15" fill="rgb(229,99,46)" fg:x="100135" fg:w="19"/><text x="88.1610%" y="687.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search (19 samples, 0.02%)</title><rect x="87.9110%" y="661" width="0.0167%" height="15" fill="rgb(225,56,46)" fg:x="100135" fg:w="19"/><text x="88.1610%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (19 samples, 0.02%)</title><rect x="87.9110%" y="645" width="0.0167%" height="15" fill="rgb(227,94,5)" fg:x="100135" fg:w="19"/><text x="88.1610%" y="655.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (19 samples, 0.02%)</title><rect x="87.9110%" y="629" width="0.0167%" height="15" fill="rgb(205,112,38)" fg:x="100135" fg:w="19"/><text x="88.1610%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (19 samples, 0.02%)</title><rect x="87.9110%" y="613" width="0.0167%" height="15" fill="rgb(231,133,46)" fg:x="100135" fg:w="19"/><text x="88.1610%" y="623.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (26 samples, 0.02%)</title><rect x="87.9277%" y="917" width="0.0228%" height="15" fill="rgb(217,16,9)" fg:x="100154" fg:w="26"/><text x="88.1777%" y="927.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (26 samples, 0.02%)</title><rect x="87.9277%" y="901" width="0.0228%" height="15" fill="rgb(249,173,9)" fg:x="100154" fg:w="26"/><text x="88.1777%" y="911.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (26 samples, 0.02%)</title><rect x="87.9277%" y="885" width="0.0228%" height="15" fill="rgb(205,163,53)" fg:x="100154" fg:w="26"/><text x="88.1777%" y="895.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (26 samples, 0.02%)</title><rect x="87.9277%" y="869" width="0.0228%" height="15" fill="rgb(217,54,41)" fg:x="100154" fg:w="26"/><text x="88.1777%" y="879.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (26 samples, 0.02%)</title><rect x="87.9277%" y="853" width="0.0228%" height="15" fill="rgb(228,216,12)" fg:x="100154" fg:w="26"/><text x="88.1777%" y="863.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (26 samples, 0.02%)</title><rect x="87.9277%" y="837" width="0.0228%" height="15" fill="rgb(244,228,15)" fg:x="100154" fg:w="26"/><text x="88.1777%" y="847.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (26 samples, 0.02%)</title><rect x="87.9277%" y="821" width="0.0228%" height="15" fill="rgb(221,176,53)" fg:x="100154" fg:w="26"/><text x="88.1777%" y="831.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}} (26 samples, 0.02%)</title><rect x="87.9277%" y="805" width="0.0228%" height="15" fill="rgb(205,94,34)" fg:x="100154" fg:w="26"/><text x="88.1777%" y="815.50"></text></g><g><title>abi_stable::traits::ErasedType::run_downcast_as_mut (26 samples, 0.02%)</title><rect x="87.9277%" y="789" width="0.0228%" height="15" fill="rgb(213,110,48)" fg:x="100154" fg:w="26"/><text x="88.1777%" y="799.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}}::{{closure}} (26 samples, 0.02%)</title><rect x="87.9277%" y="773" width="0.0228%" height="15" fill="rgb(236,142,28)" fg:x="100154" fg:w="26"/><text x="88.1777%" y="783.50"></text></g><g><title>halfbrown::raw_entry::RawVacantEntryMut&lt;K,V,S&gt;::insert (26 samples, 0.02%)</title><rect x="87.9277%" y="757" width="0.0228%" height="15" fill="rgb(225,135,29)" fg:x="100154" fg:w="26"/><text x="88.1777%" y="767.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert (26 samples, 0.02%)</title><rect x="87.9277%" y="741" width="0.0228%" height="15" fill="rgb(252,45,31)" fg:x="100154" fg:w="26"/><text x="88.1777%" y="751.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert_hashed_nocheck (26 samples, 0.02%)</title><rect x="87.9277%" y="725" width="0.0228%" height="15" fill="rgb(211,187,50)" fg:x="100154" fg:w="26"/><text x="88.1777%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_entry (26 samples, 0.02%)</title><rect x="87.9277%" y="709" width="0.0228%" height="15" fill="rgb(229,109,7)" fg:x="100154" fg:w="26"/><text x="88.1777%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (26 samples, 0.02%)</title><rect x="87.9277%" y="693" width="0.0228%" height="15" fill="rgb(251,131,51)" fg:x="100154" fg:w="26"/><text x="88.1777%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (26 samples, 0.02%)</title><rect x="87.9277%" y="677" width="0.0228%" height="15" fill="rgb(251,180,35)" fg:x="100154" fg:w="26"/><text x="88.1777%" y="687.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (26 samples, 0.02%)</title><rect x="87.9277%" y="661" width="0.0228%" height="15" fill="rgb(211,46,32)" fg:x="100154" fg:w="26"/><text x="88.1777%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (26 samples, 0.02%)</title><rect x="87.9277%" y="645" width="0.0228%" height="15" fill="rgb(248,123,17)" fg:x="100154" fg:w="26"/><text x="88.1777%" y="655.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (26 samples, 0.02%)</title><rect x="87.9277%" y="629" width="0.0228%" height="15" fill="rgb(227,141,18)" fg:x="100154" fg:w="26"/><text x="88.1777%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (26 samples, 0.02%)</title><rect x="87.9277%" y="613" width="0.0228%" height="15" fill="rgb(216,102,9)" fg:x="100154" fg:w="26"/><text x="88.1777%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (26 samples, 0.02%)</title><rect x="87.9277%" y="597" width="0.0228%" height="15" fill="rgb(253,47,13)" fg:x="100154" fg:w="26"/><text x="88.1777%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (26 samples, 0.02%)</title><rect x="87.9277%" y="581" width="0.0228%" height="15" fill="rgb(226,93,23)" fg:x="100154" fg:w="26"/><text x="88.1777%" y="591.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (26 samples, 0.02%)</title><rect x="87.9277%" y="565" width="0.0228%" height="15" fill="rgb(247,104,17)" fg:x="100154" fg:w="26"/><text x="88.1777%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (26 samples, 0.02%)</title><rect x="87.9277%" y="549" width="0.0228%" height="15" fill="rgb(233,203,26)" fg:x="100154" fg:w="26"/><text x="88.1777%" y="559.50"></text></g><g><title>alloc::alloc::alloc (26 samples, 0.02%)</title><rect x="87.9277%" y="533" width="0.0228%" height="15" fill="rgb(244,98,49)" fg:x="100154" fg:w="26"/><text x="88.1777%" y="543.50"></text></g><g><title>__rg_alloc (26 samples, 0.02%)</title><rect x="87.9277%" y="517" width="0.0228%" height="15" fill="rgb(235,134,22)" fg:x="100154" fg:w="26"/><text x="88.1777%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (26 samples, 0.02%)</title><rect x="87.9277%" y="501" width="0.0228%" height="15" fill="rgb(221,70,32)" fg:x="100154" fg:w="26"/><text x="88.1777%" y="511.50"></text></g><g><title>sn_rust_alloc (26 samples, 0.02%)</title><rect x="87.9277%" y="485" width="0.0228%" height="15" fill="rgb(238,15,50)" fg:x="100154" fg:w="26"/><text x="88.1777%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (26 samples, 0.02%)</title><rect x="87.9277%" y="469" width="0.0228%" height="15" fill="rgb(215,221,48)" fg:x="100154" fg:w="26"/><text x="88.1777%" y="479.50"></text></g><g><title>tremor_script::srs::EventPayload::rent_mut (217 samples, 0.19%)</title><rect x="87.7863%" y="1045" width="0.1905%" height="15" fill="rgb(236,73,3)" fg:x="99993" fg:w="217"/><text x="88.0363%" y="1055.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (217 samples, 0.19%)</title><rect x="87.7863%" y="1029" width="0.1905%" height="15" fill="rgb(250,107,11)" fg:x="99993" fg:w="217"/><text x="88.0363%" y="1039.50"></text></g><g><title>tremor_script::script::Script::run (217 samples, 0.19%)</title><rect x="87.7863%" y="1013" width="0.1905%" height="15" fill="rgb(242,39,14)" fg:x="99993" fg:w="217"/><text x="88.0363%" y="1023.50"></text></g><g><title>tremor_script::ast::Script::run (217 samples, 0.19%)</title><rect x="87.7863%" y="997" width="0.1905%" height="15" fill="rgb(248,164,37)" fg:x="99993" fg:w="217"/><text x="88.0363%" y="1007.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (217 samples, 0.19%)</title><rect x="87.7863%" y="981" width="0.1905%" height="15" fill="rgb(217,60,12)" fg:x="99993" fg:w="217"/><text x="88.0363%" y="991.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (56 samples, 0.05%)</title><rect x="87.9277%" y="965" width="0.0492%" height="15" fill="rgb(240,125,29)" fg:x="100154" fg:w="56"/><text x="88.1777%" y="975.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (56 samples, 0.05%)</title><rect x="87.9277%" y="949" width="0.0492%" height="15" fill="rgb(208,207,28)" fg:x="100154" fg:w="56"/><text x="88.1777%" y="959.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (56 samples, 0.05%)</title><rect x="87.9277%" y="933" width="0.0492%" height="15" fill="rgb(209,159,27)" fg:x="100154" fg:w="56"/><text x="88.1777%" y="943.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (30 samples, 0.03%)</title><rect x="87.9505%" y="917" width="0.0263%" height="15" fill="rgb(251,176,53)" fg:x="100180" fg:w="30"/><text x="88.2005%" y="927.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (30 samples, 0.03%)</title><rect x="87.9505%" y="901" width="0.0263%" height="15" fill="rgb(211,85,7)" fg:x="100180" fg:w="30"/><text x="88.2005%" y="911.50"></text></g><g><title>tremor_script::interpreter::resolve (30 samples, 0.03%)</title><rect x="87.9505%" y="885" width="0.0263%" height="15" fill="rgb(216,64,54)" fg:x="100180" fg:w="30"/><text x="88.2005%" y="895.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_str (18 samples, 0.02%)</title><rect x="88.1770%" y="1029" width="0.0158%" height="15" fill="rgb(217,54,24)" fg:x="100438" fg:w="18"/><text x="88.4270%" y="1039.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_u64 (18 samples, 0.02%)</title><rect x="88.1928%" y="1029" width="0.0158%" height="15" fill="rgb(208,206,53)" fg:x="100456" fg:w="18"/><text x="88.4428%" y="1039.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeSeq&gt;::serialize_element (42 samples, 0.04%)</title><rect x="88.2086%" y="1029" width="0.0369%" height="15" fill="rgb(251,74,39)" fg:x="100474" fg:w="42"/><text x="88.4586%" y="1039.50"></text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (312 samples, 0.27%)</title><rect x="87.9847%" y="1045" width="0.2739%" height="15" fill="rgb(226,47,5)" fg:x="100219" fg:w="312"/><text x="88.2347%" y="1055.50"></text></g><g><title>[unknown] (93,498 samples, 82.08%)</title><rect x="6.2008%" y="1061" width="82.0842%" height="15" fill="rgb(234,111,33)" fg:x="7063" fg:w="93498"/><text x="6.4508%" y="1071.50">[unknown]</text></g><g><title>window::TimeWindow::add_t (22 samples, 0.02%)</title><rect x="88.2657%" y="1045" width="0.0193%" height="15" fill="rgb(251,14,10)" fg:x="100539" fg:w="22"/><text x="88.5157%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck (16 samples, 0.01%)</title><rect x="88.3183%" y="1061" width="0.0140%" height="15" fill="rgb(232,43,0)" fg:x="100599" fg:w="16"/><text x="88.5683%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (20 samples, 0.02%)</title><rect x="88.3631%" y="1045" width="0.0176%" height="15" fill="rgb(222,68,43)" fg:x="100650" fg:w="20"/><text x="88.6131%" y="1055.50"></text></g><g><title>anon.2df61c595d7e03cc178280752e6f613c.270.llvm.3319559067924046615 (32 samples, 0.03%)</title><rect x="88.3631%" y="1061" width="0.0281%" height="15" fill="rgb(217,24,23)" fg:x="100650" fg:w="32"/><text x="88.6131%" y="1071.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (16 samples, 0.01%)</title><rect x="88.3921%" y="1045" width="0.0140%" height="15" fill="rgb(229,209,14)" fg:x="100683" fg:w="16"/><text x="88.6421%" y="1055.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (13 samples, 0.01%)</title><rect x="88.3947%" y="1029" width="0.0114%" height="15" fill="rgb(250,149,48)" fg:x="100686" fg:w="13"/><text x="88.6447%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="88.3947%" y="1013" width="0.0114%" height="15" fill="rgb(210,120,37)" fg:x="100686" fg:w="13"/><text x="88.6447%" y="1023.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (13 samples, 0.01%)</title><rect x="88.3947%" y="997" width="0.0114%" height="15" fill="rgb(210,21,8)" fg:x="100686" fg:w="13"/><text x="88.6447%" y="1007.50"></text></g><g><title>anon.2df61c595d7e03cc178280752e6f613c.34.llvm.3319559067924046615 (22 samples, 0.02%)</title><rect x="88.3921%" y="1061" width="0.0193%" height="15" fill="rgb(243,145,7)" fg:x="100683" fg:w="22"/><text x="88.6421%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (13 samples, 0.01%)</title><rect x="88.4237%" y="1045" width="0.0114%" height="15" fill="rgb(238,178,32)" fg:x="100719" fg:w="13"/><text x="88.6737%" y="1055.50"></text></g><g><title>anon.721695a4fa8e1a5c50b311b0da0a9e88.35.llvm.6249933525401338342 (28 samples, 0.02%)</title><rect x="88.4219%" y="1061" width="0.0246%" height="15" fill="rgb(222,4,10)" fg:x="100717" fg:w="28"/><text x="88.6719%" y="1071.50"></text></g><g><title>anon.83ac5d38449a157d082c7cd70222d9fa.37.llvm.2321870770912432649 (38 samples, 0.03%)</title><rect x="88.4491%" y="1061" width="0.0334%" height="15" fill="rgb(239,7,37)" fg:x="100748" fg:w="38"/><text x="88.6991%" y="1071.50"></text></g><g><title>anon.83ac5d38449a157d082c7cd70222d9fa.47.llvm.2321870770912432649 (35 samples, 0.03%)</title><rect x="88.4834%" y="1061" width="0.0307%" height="15" fill="rgb(215,31,37)" fg:x="100787" fg:w="35"/><text x="88.7334%" y="1071.50"></text></g><g><title>anon.bad05d1a978d454772d4e6b7cf31350e.42.llvm.1074922121173280541 (17 samples, 0.01%)</title><rect x="88.5238%" y="1061" width="0.0149%" height="15" fill="rgb(224,83,33)" fg:x="100833" fg:w="17"/><text x="88.7738%" y="1071.50"></text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (20 samples, 0.02%)</title><rect x="88.5817%" y="1045" width="0.0176%" height="15" fill="rgb(239,55,3)" fg:x="100899" fg:w="20"/><text x="88.8317%" y="1055.50"></text></g><g><title>anon.bad05d1a978d454772d4e6b7cf31350e.43.llvm.1074922121173280541 (72 samples, 0.06%)</title><rect x="88.5387%" y="1061" width="0.0632%" height="15" fill="rgb(247,92,11)" fg:x="100850" fg:w="72"/><text x="88.7887%" y="1071.50"></text></g><g><title>anon.c6676277d9159002154b1ad830e38ffe.16.llvm.16537282876649417011 (27 samples, 0.02%)</title><rect x="88.6019%" y="1061" width="0.0237%" height="15" fill="rgb(239,200,7)" fg:x="100922" fg:w="27"/><text x="88.8519%" y="1071.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (15 samples, 0.01%)</title><rect x="88.6555%" y="1029" width="0.0132%" height="15" fill="rgb(227,115,8)" fg:x="100983" fg:w="15"/><text x="88.9055%" y="1039.50"></text></g><g><title>async_task::runnable::Runnable::run (15 samples, 0.01%)</title><rect x="88.6555%" y="1013" width="0.0132%" height="15" fill="rgb(215,189,27)" fg:x="100983" fg:w="15"/><text x="88.9055%" y="1023.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (52 samples, 0.05%)</title><rect x="88.6335%" y="1045" width="0.0457%" height="15" fill="rgb(251,216,39)" fg:x="100958" fg:w="52"/><text x="88.8835%" y="1055.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (18 samples, 0.02%)</title><rect x="88.7283%" y="997" width="0.0158%" height="15" fill="rgb(207,29,47)" fg:x="101066" fg:w="18"/><text x="88.9783%" y="1007.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (79 samples, 0.07%)</title><rect x="88.6809%" y="1045" width="0.0694%" height="15" fill="rgb(210,71,34)" fg:x="101012" fg:w="79"/><text x="88.9309%" y="1055.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (57 samples, 0.05%)</title><rect x="88.7002%" y="1029" width="0.0500%" height="15" fill="rgb(253,217,51)" fg:x="101034" fg:w="57"/><text x="88.9502%" y="1039.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (49 samples, 0.04%)</title><rect x="88.7073%" y="1013" width="0.0430%" height="15" fill="rgb(222,117,46)" fg:x="101042" fg:w="49"/><text x="88.9573%" y="1023.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (26 samples, 0.02%)</title><rect x="88.7687%" y="1045" width="0.0228%" height="15" fill="rgb(226,132,6)" fg:x="101112" fg:w="26"/><text x="89.0187%" y="1055.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (84 samples, 0.07%)</title><rect x="88.8547%" y="1029" width="0.0737%" height="15" fill="rgb(254,145,51)" fg:x="101210" fg:w="84"/><text x="89.1047%" y="1039.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (77 samples, 0.07%)</title><rect x="88.8609%" y="1013" width="0.0676%" height="15" fill="rgb(231,199,27)" fg:x="101217" fg:w="77"/><text x="89.1109%" y="1023.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (68 samples, 0.06%)</title><rect x="88.8688%" y="997" width="0.0597%" height="15" fill="rgb(245,158,14)" fg:x="101226" fg:w="68"/><text x="89.1188%" y="1007.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (68 samples, 0.06%)</title><rect x="88.8688%" y="981" width="0.0597%" height="15" fill="rgb(240,113,14)" fg:x="101226" fg:w="68"/><text x="89.1188%" y="991.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue_events (45 samples, 0.04%)</title><rect x="88.8890%" y="965" width="0.0395%" height="15" fill="rgb(210,20,13)" fg:x="101249" fg:w="45"/><text x="89.1390%" y="975.50"></text></g><g><title>async_io::reactor::Reactor::get::REACTOR (342 samples, 0.30%)</title><rect x="88.6291%" y="1061" width="0.3003%" height="15" fill="rgb(241,144,13)" fg:x="100953" fg:w="342"/><text x="88.8791%" y="1071.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (133 samples, 0.12%)</title><rect x="88.8126%" y="1045" width="0.1168%" height="15" fill="rgb(235,43,34)" fg:x="101162" fg:w="133"/><text x="89.0626%" y="1055.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (23 samples, 0.02%)</title><rect x="89.3042%" y="453" width="0.0202%" height="15" fill="rgb(208,36,20)" fg:x="101722" fg:w="23"/><text x="89.5542%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::nth (12 samples, 0.01%)</title><rect x="89.3622%" y="389" width="0.0105%" height="15" fill="rgb(239,204,10)" fg:x="101788" fg:w="12"/><text x="89.6122%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (24 samples, 0.02%)</title><rect x="89.4605%" y="357" width="0.0211%" height="15" fill="rgb(217,84,43)" fg:x="101900" fg:w="24"/><text x="89.7105%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (24 samples, 0.02%)</title><rect x="89.4605%" y="341" width="0.0211%" height="15" fill="rgb(241,170,50)" fg:x="101900" fg:w="24"/><text x="89.7105%" y="351.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (20 samples, 0.02%)</title><rect x="89.4640%" y="325" width="0.0176%" height="15" fill="rgb(226,205,29)" fg:x="101904" fg:w="20"/><text x="89.7140%" y="335.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (19 samples, 0.02%)</title><rect x="89.4649%" y="309" width="0.0167%" height="15" fill="rgb(233,113,1)" fg:x="101905" fg:w="19"/><text x="89.7149%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (19 samples, 0.02%)</title><rect x="89.4649%" y="293" width="0.0167%" height="15" fill="rgb(253,98,13)" fg:x="101905" fg:w="19"/><text x="89.7149%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (75 samples, 0.07%)</title><rect x="89.4816%" y="357" width="0.0658%" height="15" fill="rgb(211,115,12)" fg:x="101924" fg:w="75"/><text x="89.7316%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (317 samples, 0.28%)</title><rect x="89.3244%" y="405" width="0.2783%" height="15" fill="rgb(208,12,16)" fg:x="101745" fg:w="317"/><text x="89.5744%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (262 samples, 0.23%)</title><rect x="89.3727%" y="389" width="0.2300%" height="15" fill="rgb(237,193,54)" fg:x="101800" fg:w="262"/><text x="89.6227%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (206 samples, 0.18%)</title><rect x="89.4219%" y="373" width="0.1809%" height="15" fill="rgb(243,22,42)" fg:x="101856" fg:w="206"/><text x="89.6719%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (63 samples, 0.06%)</title><rect x="89.5474%" y="357" width="0.0553%" height="15" fill="rgb(233,151,36)" fg:x="101999" fg:w="63"/><text x="89.7974%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (63 samples, 0.06%)</title><rect x="89.5474%" y="341" width="0.0553%" height="15" fill="rgb(237,57,45)" fg:x="101999" fg:w="63"/><text x="89.7974%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (34 samples, 0.03%)</title><rect x="89.5729%" y="325" width="0.0298%" height="15" fill="rgb(221,88,17)" fg:x="102028" fg:w="34"/><text x="89.8229%" y="335.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (34 samples, 0.03%)</title><rect x="89.5729%" y="309" width="0.0298%" height="15" fill="rgb(230,79,15)" fg:x="102028" fg:w="34"/><text x="89.8229%" y="319.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (18 samples, 0.02%)</title><rect x="89.5869%" y="293" width="0.0158%" height="15" fill="rgb(213,57,13)" fg:x="102044" fg:w="18"/><text x="89.8369%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (18 samples, 0.02%)</title><rect x="89.5869%" y="277" width="0.0158%" height="15" fill="rgb(222,116,39)" fg:x="102044" fg:w="18"/><text x="89.8369%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (339 samples, 0.30%)</title><rect x="89.3244%" y="453" width="0.2976%" height="15" fill="rgb(245,107,2)" fg:x="101745" fg:w="339"/><text x="89.5744%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (339 samples, 0.30%)</title><rect x="89.3244%" y="437" width="0.2976%" height="15" fill="rgb(238,1,10)" fg:x="101745" fg:w="339"/><text x="89.5744%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (339 samples, 0.30%)</title><rect x="89.3244%" y="421" width="0.2976%" height="15" fill="rgb(249,4,48)" fg:x="101745" fg:w="339"/><text x="89.5744%" y="431.50"></text></g><g><title>core::ops::control_flow::ControlFlow&lt;R,&lt;R as core::ops::try_trait::Try&gt;::Output&gt;::into_try (22 samples, 0.02%)</title><rect x="89.6027%" y="405" width="0.0193%" height="15" fill="rgb(223,151,18)" fg:x="102062" fg:w="22"/><text x="89.8527%" y="415.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::len (810 samples, 0.71%)</title><rect x="89.9214%" y="421" width="0.7111%" height="15" fill="rgb(227,65,43)" fg:x="102425" fg:w="810"/><text x="90.1714%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (602 samples, 0.53%)</title><rect x="90.1040%" y="405" width="0.5285%" height="15" fill="rgb(218,40,45)" fg:x="102633" fg:w="602"/><text x="90.3540%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (602 samples, 0.53%)</title><rect x="90.1040%" y="389" width="0.5285%" height="15" fill="rgb(252,121,31)" fg:x="102633" fg:w="602"/><text x="90.3540%" y="399.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::len (1,092 samples, 0.96%)</title><rect x="89.6835%" y="437" width="0.9587%" height="15" fill="rgb(219,158,43)" fg:x="102154" fg:w="1092"/><text x="89.9335%" y="447.50"></text></g><g><title>async_executor::steal (1,163 samples, 1.02%)</title><rect x="89.6221%" y="453" width="1.0210%" height="15" fill="rgb(231,162,42)" fg:x="102084" fg:w="1163"/><text x="89.8721%" y="463.50"></text></g><g><title>concurrent_queue::full_fence (1,130 samples, 0.99%)</title><rect x="91.1654%" y="421" width="0.9921%" height="15" fill="rgb(217,179,25)" fg:x="103842" fg:w="1130"/><text x="91.4154%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (1,091 samples, 0.96%)</title><rect x="91.1997%" y="405" width="0.9578%" height="15" fill="rgb(206,212,31)" fg:x="103881" fg:w="1091"/><text x="91.4497%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1,091 samples, 0.96%)</title><rect x="91.1997%" y="389" width="0.9578%" height="15" fill="rgb(235,144,12)" fg:x="103881" fg:w="1091"/><text x="91.4497%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1,091 samples, 0.96%)</title><rect x="91.1997%" y="373" width="0.9578%" height="15" fill="rgb(213,51,10)" fg:x="103881" fg:w="1091"/><text x="91.4497%" y="383.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (1,651 samples, 1.45%)</title><rect x="90.8090%" y="437" width="1.4495%" height="15" fill="rgb(231,145,14)" fg:x="103436" fg:w="1651"/><text x="91.0590%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (114 samples, 0.10%)</title><rect x="92.1584%" y="421" width="0.1001%" height="15" fill="rgb(235,15,28)" fg:x="104973" fg:w="114"/><text x="92.4084%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (103 samples, 0.09%)</title><rect x="92.1680%" y="405" width="0.0904%" height="15" fill="rgb(237,206,10)" fg:x="104984" fg:w="103"/><text x="92.4180%" y="415.50"></text></g><g><title>concurrent_queue::full_fence (157 samples, 0.14%)</title><rect x="92.3015%" y="421" width="0.1378%" height="15" fill="rgb(236,227,27)" fg:x="105136" fg:w="157"/><text x="92.5515%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (156 samples, 0.14%)</title><rect x="92.3024%" y="405" width="0.1370%" height="15" fill="rgb(246,83,35)" fg:x="105137" fg:w="156"/><text x="92.5524%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (156 samples, 0.14%)</title><rect x="92.3024%" y="389" width="0.1370%" height="15" fill="rgb(220,136,24)" fg:x="105137" fg:w="156"/><text x="92.5524%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (156 samples, 0.14%)</title><rect x="92.3024%" y="373" width="0.1370%" height="15" fill="rgb(217,3,25)" fg:x="105137" fg:w="156"/><text x="92.5524%" y="383.50"></text></g><g><title>concurrent_queue::unbounded::Slot&lt;T&gt;::wait_write (26 samples, 0.02%)</title><rect x="92.4446%" y="421" width="0.0228%" height="15" fill="rgb(239,24,14)" fg:x="105299" fg:w="26"/><text x="92.6946%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (26 samples, 0.02%)</title><rect x="92.4446%" y="405" width="0.0228%" height="15" fill="rgb(244,16,53)" fg:x="105299" fg:w="26"/><text x="92.6946%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (26 samples, 0.02%)</title><rect x="92.4446%" y="389" width="0.0228%" height="15" fill="rgb(208,175,44)" fg:x="105299" fg:w="26"/><text x="92.6946%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (16 samples, 0.01%)</title><rect x="92.4736%" y="421" width="0.0140%" height="15" fill="rgb(252,18,48)" fg:x="105332" fg:w="16"/><text x="92.7236%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (16 samples, 0.01%)</title><rect x="92.4736%" y="405" width="0.0140%" height="15" fill="rgb(234,199,32)" fg:x="105332" fg:w="16"/><text x="92.7236%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (57 samples, 0.05%)</title><rect x="92.4876%" y="421" width="0.0500%" height="15" fill="rgb(225,77,54)" fg:x="105348" fg:w="57"/><text x="92.7376%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (57 samples, 0.05%)</title><rect x="92.4876%" y="405" width="0.0500%" height="15" fill="rgb(225,42,25)" fg:x="105348" fg:w="57"/><text x="92.7376%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (90 samples, 0.08%)</title><rect x="92.5376%" y="421" width="0.0790%" height="15" fill="rgb(242,227,46)" fg:x="105405" fg:w="90"/><text x="92.7876%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_or (90 samples, 0.08%)</title><rect x="92.5376%" y="405" width="0.0790%" height="15" fill="rgb(246,197,35)" fg:x="105405" fg:w="90"/><text x="92.7876%" y="415.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (2,359 samples, 2.07%)</title><rect x="90.6431%" y="453" width="2.0710%" height="15" fill="rgb(215,159,26)" fg:x="103247" fg:w="2359"/><text x="90.8931%" y="463.50">c..</text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (519 samples, 0.46%)</title><rect x="92.2585%" y="437" width="0.4556%" height="15" fill="rgb(212,194,50)" fg:x="105087" fg:w="519"/><text x="92.5085%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (111 samples, 0.10%)</title><rect x="92.6167%" y="421" width="0.0974%" height="15" fill="rgb(246,132,1)" fg:x="105495" fg:w="111"/><text x="92.8667%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (111 samples, 0.10%)</title><rect x="92.6167%" y="405" width="0.0974%" height="15" fill="rgb(217,71,7)" fg:x="105495" fg:w="111"/><text x="92.8667%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (119 samples, 0.10%)</title><rect x="92.7264%" y="389" width="0.1045%" height="15" fill="rgb(252,59,32)" fg:x="105620" fg:w="119"/><text x="92.9764%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_sub (119 samples, 0.10%)</title><rect x="92.7264%" y="373" width="0.1045%" height="15" fill="rgb(253,204,25)" fg:x="105620" fg:w="119"/><text x="92.9764%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (289 samples, 0.25%)</title><rect x="92.7141%" y="453" width="0.2537%" height="15" fill="rgb(232,21,16)" fg:x="105606" fg:w="289"/><text x="92.9641%" y="463.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (289 samples, 0.25%)</title><rect x="92.7141%" y="437" width="0.2537%" height="15" fill="rgb(248,90,29)" fg:x="105606" fg:w="289"/><text x="92.9641%" y="447.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read_unlock (283 samples, 0.25%)</title><rect x="92.7194%" y="421" width="0.2485%" height="15" fill="rgb(249,223,7)" fg:x="105612" fg:w="283"/><text x="92.9694%" y="431.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read_unlock (275 samples, 0.24%)</title><rect x="92.7264%" y="405" width="0.2414%" height="15" fill="rgb(231,119,42)" fg:x="105620" fg:w="275"/><text x="92.9764%" y="415.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::raw_unlock (156 samples, 0.14%)</title><rect x="92.8309%" y="389" width="0.1370%" height="15" fill="rgb(215,41,35)" fg:x="105739" fg:w="156"/><text x="93.0809%" y="399.50"></text></g><g><title>__GI___pthread_rwlock_unlock (156 samples, 0.14%)</title><rect x="92.8309%" y="373" width="0.1370%" height="15" fill="rgb(220,44,45)" fg:x="105739" fg:w="156"/><text x="93.0809%" y="383.50"></text></g><g><title>fastrand::usize (24 samples, 0.02%)</title><rect x="92.9678%" y="453" width="0.0211%" height="15" fill="rgb(253,197,36)" fg:x="105895" fg:w="24"/><text x="93.2178%" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (23 samples, 0.02%)</title><rect x="92.9687%" y="437" width="0.0202%" height="15" fill="rgb(245,225,54)" fg:x="105896" fg:w="23"/><text x="93.2187%" y="447.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (19 samples, 0.02%)</title><rect x="92.9722%" y="421" width="0.0167%" height="15" fill="rgb(239,94,37)" fg:x="105900" fg:w="19"/><text x="93.2222%" y="431.50"></text></g><g><title>fastrand::usize::{{closure}} (16 samples, 0.01%)</title><rect x="92.9748%" y="405" width="0.0140%" height="15" fill="rgb(242,217,10)" fg:x="105903" fg:w="16"/><text x="93.2248%" y="415.50"></text></g><g><title>fastrand::Rng::usize (16 samples, 0.01%)</title><rect x="92.9748%" y="389" width="0.0140%" height="15" fill="rgb(250,193,7)" fg:x="105903" fg:w="16"/><text x="93.2248%" y="399.50"></text></g><g><title>fastrand::Rng::gen_mod_u64 (13 samples, 0.01%)</title><rect x="92.9775%" y="373" width="0.0114%" height="15" fill="rgb(230,104,19)" fg:x="105906" fg:w="13"/><text x="93.2275%" y="383.50"></text></g><g><title>__GI___pthread_rwlock_rdlock (274 samples, 0.24%)</title><rect x="93.0161%" y="405" width="0.2406%" height="15" fill="rgb(230,181,4)" fg:x="105950" fg:w="274"/><text x="93.2661%" y="415.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (4,840 samples, 4.25%)</title><rect x="89.1006%" y="469" width="4.2492%" height="15" fill="rgb(216,219,49)" fg:x="101490" fg:w="4840"/><text x="89.3506%" y="479.50">async..</text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (411 samples, 0.36%)</title><rect x="92.9889%" y="453" width="0.3608%" height="15" fill="rgb(254,144,0)" fg:x="105919" fg:w="411"/><text x="93.2389%" y="463.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read (401 samples, 0.35%)</title><rect x="92.9977%" y="437" width="0.3520%" height="15" fill="rgb(205,209,38)" fg:x="105929" fg:w="401"/><text x="93.2477%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read (391 samples, 0.34%)</title><rect x="93.0065%" y="421" width="0.3433%" height="15" fill="rgb(240,21,42)" fg:x="105939" fg:w="391"/><text x="93.2565%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (106 samples, 0.09%)</title><rect x="93.2567%" y="405" width="0.0931%" height="15" fill="rgb(241,132,3)" fg:x="106224" fg:w="106"/><text x="93.5067%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_add (106 samples, 0.09%)</title><rect x="93.2567%" y="389" width="0.0931%" height="15" fill="rgb(225,14,2)" fg:x="106224" fg:w="106"/><text x="93.5067%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (31 samples, 0.03%)</title><rect x="93.3550%" y="453" width="0.0272%" height="15" fill="rgb(210,141,35)" fg:x="106336" fg:w="31"/><text x="93.6050%" y="463.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.03%)</title><rect x="93.3550%" y="437" width="0.0272%" height="15" fill="rgb(251,14,44)" fg:x="106336" fg:w="31"/><text x="93.6050%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (28 samples, 0.02%)</title><rect x="93.3576%" y="421" width="0.0246%" height="15" fill="rgb(247,48,18)" fg:x="106339" fg:w="28"/><text x="93.6076%" y="431.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (28 samples, 0.02%)</title><rect x="93.3576%" y="405" width="0.0246%" height="15" fill="rgb(225,0,40)" fg:x="106339" fg:w="28"/><text x="93.6076%" y="415.50"></text></g><g><title>__GI___pthread_mutex_unlock (28 samples, 0.02%)</title><rect x="93.3576%" y="389" width="0.0246%" height="15" fill="rgb(221,31,33)" fg:x="106339" fg:w="28"/><text x="93.6076%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (42 samples, 0.04%)</title><rect x="93.3822%" y="453" width="0.0369%" height="15" fill="rgb(237,42,40)" fg:x="106367" fg:w="42"/><text x="93.6322%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (42 samples, 0.04%)</title><rect x="93.3822%" y="437" width="0.0369%" height="15" fill="rgb(233,51,29)" fg:x="106367" fg:w="42"/><text x="93.6322%" y="447.50"></text></g><g><title>async_io::reactor::Reactor::notify (35 samples, 0.03%)</title><rect x="93.4217%" y="405" width="0.0307%" height="15" fill="rgb(226,58,20)" fg:x="106412" fg:w="35"/><text x="93.6717%" y="415.50"></text></g><g><title>polling::Poller::notify (35 samples, 0.03%)</title><rect x="93.4217%" y="389" width="0.0307%" height="15" fill="rgb(208,98,7)" fg:x="106412" fg:w="35"/><text x="93.6717%" y="399.50"></text></g><g><title>polling::epoll::Poller::notify (23 samples, 0.02%)</title><rect x="93.4322%" y="373" width="0.0202%" height="15" fill="rgb(228,143,44)" fg:x="106424" fg:w="23"/><text x="93.6822%" y="383.50"></text></g><g><title>__libc_write (19 samples, 0.02%)</title><rect x="93.4358%" y="357" width="0.0167%" height="15" fill="rgb(246,55,38)" fg:x="106428" fg:w="19"/><text x="93.6858%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (83 samples, 0.07%)</title><rect x="93.4876%" y="373" width="0.0729%" height="15" fill="rgb(247,87,16)" fg:x="106487" fg:w="83"/><text x="93.7376%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_swap (83 samples, 0.07%)</title><rect x="93.4876%" y="357" width="0.0729%" height="15" fill="rgb(234,129,42)" fg:x="106487" fg:w="83"/><text x="93.7376%" y="367.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (98 samples, 0.09%)</title><rect x="93.5604%" y="373" width="0.0860%" height="15" fill="rgb(220,82,16)" fg:x="106570" fg:w="98"/><text x="93.8104%" y="383.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (98 samples, 0.09%)</title><rect x="93.5604%" y="357" width="0.0860%" height="15" fill="rgb(211,88,4)" fg:x="106570" fg:w="98"/><text x="93.8104%" y="367.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (98 samples, 0.09%)</title><rect x="93.5604%" y="341" width="0.0860%" height="15" fill="rgb(248,151,21)" fg:x="106570" fg:w="98"/><text x="93.8104%" y="351.50"></text></g><g><title>__pthread_cond_signal (98 samples, 0.09%)</title><rect x="93.5604%" y="325" width="0.0860%" height="15" fill="rgb(238,163,6)" fg:x="106570" fg:w="98"/><text x="93.8104%" y="335.50"></text></g><g><title>parking::Unparker::unpark (314 samples, 0.28%)</title><rect x="93.4568%" y="405" width="0.2757%" height="15" fill="rgb(209,183,11)" fg:x="106452" fg:w="314"/><text x="93.7068%" y="415.50"></text></g><g><title>parking::Inner::unpark (290 samples, 0.25%)</title><rect x="93.4779%" y="389" width="0.2546%" height="15" fill="rgb(219,37,20)" fg:x="106476" fg:w="290"/><text x="93.7279%" y="399.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (98 samples, 0.09%)</title><rect x="93.6465%" y="373" width="0.0860%" height="15" fill="rgb(210,158,4)" fg:x="106668" fg:w="98"/><text x="93.8965%" y="383.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (97 samples, 0.09%)</title><rect x="93.6473%" y="357" width="0.0852%" height="15" fill="rgb(221,167,53)" fg:x="106669" fg:w="97"/><text x="93.8973%" y="367.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (96 samples, 0.08%)</title><rect x="93.6482%" y="341" width="0.0843%" height="15" fill="rgb(237,151,45)" fg:x="106670" fg:w="96"/><text x="93.8982%" y="351.50"></text></g><g><title>__GI___pthread_mutex_lock (96 samples, 0.08%)</title><rect x="93.6482%" y="325" width="0.0843%" height="15" fill="rgb(231,39,3)" fg:x="106670" fg:w="96"/><text x="93.8982%" y="335.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (368 samples, 0.32%)</title><rect x="93.4208%" y="421" width="0.3231%" height="15" fill="rgb(212,167,28)" fg:x="106411" fg:w="368"/><text x="93.6708%" y="431.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (13 samples, 0.01%)</title><rect x="93.7325%" y="405" width="0.0114%" height="15" fill="rgb(232,178,8)" fg:x="106766" fg:w="13"/><text x="93.9825%" y="415.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (13 samples, 0.01%)</title><rect x="93.7325%" y="389" width="0.0114%" height="15" fill="rgb(225,151,20)" fg:x="106766" fg:w="13"/><text x="93.9825%" y="399.50"></text></g><g><title>core::task::wake::Waker::wake (429 samples, 0.38%)</title><rect x="93.4191%" y="453" width="0.3766%" height="15" fill="rgb(238,3,37)" fg:x="106409" fg:w="429"/><text x="93.6691%" y="463.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (429 samples, 0.38%)</title><rect x="93.4191%" y="437" width="0.3766%" height="15" fill="rgb(251,147,42)" fg:x="106409" fg:w="429"/><text x="93.6691%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (59 samples, 0.05%)</title><rect x="93.7439%" y="421" width="0.0518%" height="15" fill="rgb(208,173,10)" fg:x="106779" fg:w="59"/><text x="93.9939%" y="431.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (59 samples, 0.05%)</title><rect x="93.7439%" y="405" width="0.0518%" height="15" fill="rgb(246,225,4)" fg:x="106779" fg:w="59"/><text x="93.9939%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (57 samples, 0.05%)</title><rect x="93.7457%" y="389" width="0.0500%" height="15" fill="rgb(248,102,6)" fg:x="106781" fg:w="57"/><text x="93.9957%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_sub (57 samples, 0.05%)</title><rect x="93.7457%" y="373" width="0.0500%" height="15" fill="rgb(232,6,21)" fg:x="106781" fg:w="57"/><text x="93.9957%" y="383.50"></text></g><g><title>async_executor::State::notify (529 samples, 0.46%)</title><rect x="93.3497%" y="469" width="0.4644%" height="15" fill="rgb(221,179,22)" fg:x="106330" fg:w="529"/><text x="93.5997%" y="479.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (21 samples, 0.02%)</title><rect x="93.7957%" y="453" width="0.0184%" height="15" fill="rgb(252,50,20)" fg:x="106838" fg:w="21"/><text x="94.0457%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (20 samples, 0.02%)</title><rect x="93.7966%" y="437" width="0.0176%" height="15" fill="rgb(222,56,38)" fg:x="106839" fg:w="20"/><text x="94.0466%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (18 samples, 0.02%)</title><rect x="93.7983%" y="421" width="0.0158%" height="15" fill="rgb(206,193,29)" fg:x="106841" fg:w="18"/><text x="94.0483%" y="431.50"></text></g><g><title>__GI___pthread_mutex_lock (18 samples, 0.02%)</title><rect x="93.7983%" y="405" width="0.0158%" height="15" fill="rgb(239,192,45)" fg:x="106841" fg:w="18"/><text x="94.0483%" y="415.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (121 samples, 0.11%)</title><rect x="93.8212%" y="437" width="0.1062%" height="15" fill="rgb(254,18,36)" fg:x="106867" fg:w="121"/><text x="94.0712%" y="447.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (121 samples, 0.11%)</title><rect x="93.8212%" y="421" width="0.1062%" height="15" fill="rgb(221,127,11)" fg:x="106867" fg:w="121"/><text x="94.0712%" y="431.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (120 samples, 0.11%)</title><rect x="93.8220%" y="405" width="0.1054%" height="15" fill="rgb(234,146,35)" fg:x="106868" fg:w="120"/><text x="94.0720%" y="415.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (120 samples, 0.11%)</title><rect x="93.8220%" y="389" width="0.1054%" height="15" fill="rgb(254,201,37)" fg:x="106868" fg:w="120"/><text x="94.0720%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (120 samples, 0.11%)</title><rect x="93.8220%" y="373" width="0.1054%" height="15" fill="rgb(211,202,23)" fg:x="106868" fg:w="120"/><text x="94.0720%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_add (120 samples, 0.11%)</title><rect x="93.8220%" y="357" width="0.1054%" height="15" fill="rgb(237,91,2)" fg:x="106868" fg:w="120"/><text x="94.0720%" y="367.50"></text></g><g><title>async_executor::Sleepers::insert (145 samples, 0.13%)</title><rect x="93.8194%" y="453" width="0.1273%" height="15" fill="rgb(226,228,36)" fg:x="106865" fg:w="145"/><text x="94.0694%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (20 samples, 0.02%)</title><rect x="93.9292%" y="437" width="0.0176%" height="15" fill="rgb(213,63,50)" fg:x="106990" fg:w="20"/><text x="94.1792%" y="447.50"></text></g><g><title>core::ptr::write (17 samples, 0.01%)</title><rect x="93.9318%" y="421" width="0.0149%" height="15" fill="rgb(235,194,19)" fg:x="106993" fg:w="17"/><text x="94.1818%" y="431.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="93.9950%" y="437" width="0.0114%" height="15" fill="rgb(207,204,18)" fg:x="107065" fg:w="13"/><text x="94.2450%" y="447.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (42 samples, 0.04%)</title><rect x="94.0064%" y="437" width="0.0369%" height="15" fill="rgb(248,8,7)" fg:x="107078" fg:w="42"/><text x="94.2564%" y="447.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (42 samples, 0.04%)</title><rect x="94.0064%" y="421" width="0.0369%" height="15" fill="rgb(223,145,47)" fg:x="107078" fg:w="42"/><text x="94.2564%" y="431.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (42 samples, 0.04%)</title><rect x="94.0064%" y="405" width="0.0369%" height="15" fill="rgb(228,84,11)" fg:x="107078" fg:w="42"/><text x="94.2564%" y="415.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (42 samples, 0.04%)</title><rect x="94.0064%" y="389" width="0.0369%" height="15" fill="rgb(218,76,45)" fg:x="107078" fg:w="42"/><text x="94.2564%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (42 samples, 0.04%)</title><rect x="94.0064%" y="373" width="0.0369%" height="15" fill="rgb(223,80,15)" fg:x="107078" fg:w="42"/><text x="94.2564%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_add (42 samples, 0.04%)</title><rect x="94.0064%" y="357" width="0.0369%" height="15" fill="rgb(219,218,33)" fg:x="107078" fg:w="42"/><text x="94.2564%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (13 samples, 0.01%)</title><rect x="94.0433%" y="437" width="0.0114%" height="15" fill="rgb(208,51,11)" fg:x="107120" fg:w="13"/><text x="94.2933%" y="447.50"></text></g><g><title>async_executor::Sleepers::update (126 samples, 0.11%)</title><rect x="93.9529%" y="453" width="0.1106%" height="15" fill="rgb(229,165,39)" fg:x="107017" fg:w="126"/><text x="94.2029%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (157 samples, 0.14%)</title><rect x="94.0635%" y="453" width="0.1378%" height="15" fill="rgb(241,100,24)" fg:x="107143" fg:w="157"/><text x="94.3135%" y="463.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (157 samples, 0.14%)</title><rect x="94.0635%" y="437" width="0.1378%" height="15" fill="rgb(228,14,23)" fg:x="107143" fg:w="157"/><text x="94.3135%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (150 samples, 0.13%)</title><rect x="94.0696%" y="421" width="0.1317%" height="15" fill="rgb(247,116,52)" fg:x="107150" fg:w="150"/><text x="94.3196%" y="431.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (150 samples, 0.13%)</title><rect x="94.0696%" y="405" width="0.1317%" height="15" fill="rgb(216,149,33)" fg:x="107150" fg:w="150"/><text x="94.3196%" y="415.50"></text></g><g><title>__GI___pthread_mutex_unlock (149 samples, 0.13%)</title><rect x="94.0705%" y="389" width="0.1308%" height="15" fill="rgb(238,142,29)" fg:x="107151" fg:w="149"/><text x="94.3205%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (191 samples, 0.17%)</title><rect x="94.2013%" y="453" width="0.1677%" height="15" fill="rgb(224,83,40)" fg:x="107300" fg:w="191"/><text x="94.4513%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_swap (191 samples, 0.17%)</title><rect x="94.2013%" y="437" width="0.1677%" height="15" fill="rgb(234,165,11)" fg:x="107300" fg:w="191"/><text x="94.4513%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (106 samples, 0.09%)</title><rect x="94.3690%" y="453" width="0.0931%" height="15" fill="rgb(215,96,23)" fg:x="107491" fg:w="106"/><text x="94.6190%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_store (106 samples, 0.09%)</title><rect x="94.3690%" y="437" width="0.0931%" height="15" fill="rgb(233,179,26)" fg:x="107491" fg:w="106"/><text x="94.6190%" y="447.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (14 samples, 0.01%)</title><rect x="94.4621%" y="437" width="0.0123%" height="15" fill="rgb(225,129,33)" fg:x="107597" fg:w="14"/><text x="94.7121%" y="447.50"></text></g><g><title>std::sync::poison::Flag::borrow (14 samples, 0.01%)</title><rect x="94.4621%" y="421" width="0.0123%" height="15" fill="rgb(237,49,13)" fg:x="107597" fg:w="14"/><text x="94.7121%" y="431.50"></text></g><g><title>async_executor::Ticker::sleep (1,208 samples, 1.06%)</title><rect x="93.8141%" y="469" width="1.0605%" height="15" fill="rgb(211,3,31)" fg:x="106859" fg:w="1208"/><text x="94.0641%" y="479.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (470 samples, 0.41%)</title><rect x="94.4621%" y="453" width="0.4126%" height="15" fill="rgb(216,152,19)" fg:x="107597" fg:w="470"/><text x="94.7121%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (456 samples, 0.40%)</title><rect x="94.4743%" y="437" width="0.4003%" height="15" fill="rgb(251,121,35)" fg:x="107611" fg:w="456"/><text x="94.7243%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (451 samples, 0.40%)</title><rect x="94.4787%" y="421" width="0.3959%" height="15" fill="rgb(210,217,47)" fg:x="107616" fg:w="451"/><text x="94.7287%" y="431.50"></text></g><g><title>__GI___pthread_mutex_lock (451 samples, 0.40%)</title><rect x="94.4787%" y="405" width="0.3959%" height="15" fill="rgb(244,116,22)" fg:x="107616" fg:w="451"/><text x="94.7287%" y="415.50"></text></g><g><title>__lll_lock_wait (22 samples, 0.02%)</title><rect x="94.8554%" y="389" width="0.0193%" height="15" fill="rgb(228,17,21)" fg:x="108045" fg:w="22"/><text x="95.1054%" y="399.50"></text></g><g><title>async_executor::Sleepers::remove (52 samples, 0.05%)</title><rect x="94.8799%" y="453" width="0.0457%" height="15" fill="rgb(240,149,34)" fg:x="108073" fg:w="52"/><text x="95.1299%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,core::task::wake::Waker)&gt; (24 samples, 0.02%)</title><rect x="94.9045%" y="437" width="0.0211%" height="15" fill="rgb(208,125,47)" fg:x="108101" fg:w="24"/><text x="95.1545%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (24 samples, 0.02%)</title><rect x="94.9045%" y="421" width="0.0211%" height="15" fill="rgb(249,186,39)" fg:x="108101" fg:w="24"/><text x="95.1545%" y="431.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (24 samples, 0.02%)</title><rect x="94.9045%" y="405" width="0.0211%" height="15" fill="rgb(240,220,33)" fg:x="108101" fg:w="24"/><text x="95.1545%" y="415.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::drop_waker (24 samples, 0.02%)</title><rect x="94.9045%" y="389" width="0.0211%" height="15" fill="rgb(243,110,23)" fg:x="108101" fg:w="24"/><text x="95.1545%" y="399.50"></text></g><g><title>core::mem::drop (24 samples, 0.02%)</title><rect x="94.9045%" y="373" width="0.0211%" height="15" fill="rgb(219,163,46)" fg:x="108101" fg:w="24"/><text x="95.1545%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (24 samples, 0.02%)</title><rect x="94.9045%" y="357" width="0.0211%" height="15" fill="rgb(216,126,30)" fg:x="108101" fg:w="24"/><text x="95.1545%" y="367.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.02%)</title><rect x="94.9045%" y="341" width="0.0211%" height="15" fill="rgb(208,139,11)" fg:x="108101" fg:w="24"/><text x="95.1545%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (24 samples, 0.02%)</title><rect x="94.9045%" y="325" width="0.0211%" height="15" fill="rgb(213,118,36)" fg:x="108101" fg:w="24"/><text x="95.1545%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_sub (24 samples, 0.02%)</title><rect x="94.9045%" y="309" width="0.0211%" height="15" fill="rgb(226,43,17)" fg:x="108101" fg:w="24"/><text x="95.1545%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (44 samples, 0.04%)</title><rect x="94.9256%" y="453" width="0.0386%" height="15" fill="rgb(254,217,4)" fg:x="108125" fg:w="44"/><text x="95.1756%" y="463.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (44 samples, 0.04%)</title><rect x="94.9256%" y="437" width="0.0386%" height="15" fill="rgb(210,134,47)" fg:x="108125" fg:w="44"/><text x="95.1756%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (43 samples, 0.04%)</title><rect x="94.9265%" y="421" width="0.0378%" height="15" fill="rgb(237,24,49)" fg:x="108126" fg:w="43"/><text x="95.1765%" y="431.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (43 samples, 0.04%)</title><rect x="94.9265%" y="405" width="0.0378%" height="15" fill="rgb(251,39,46)" fg:x="108126" fg:w="43"/><text x="95.1765%" y="415.50"></text></g><g><title>__GI___pthread_mutex_unlock (42 samples, 0.04%)</title><rect x="94.9274%" y="389" width="0.0369%" height="15" fill="rgb(251,220,3)" fg:x="108127" fg:w="42"/><text x="95.1774%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (52 samples, 0.05%)</title><rect x="94.9642%" y="453" width="0.0457%" height="15" fill="rgb(228,105,12)" fg:x="108169" fg:w="52"/><text x="95.2142%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_swap (52 samples, 0.05%)</title><rect x="94.9642%" y="437" width="0.0457%" height="15" fill="rgb(215,196,1)" fg:x="108169" fg:w="52"/><text x="95.2142%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (79 samples, 0.07%)</title><rect x="95.0099%" y="453" width="0.0694%" height="15" fill="rgb(214,33,39)" fg:x="108221" fg:w="79"/><text x="95.2599%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_swap (79 samples, 0.07%)</title><rect x="95.0099%" y="437" width="0.0694%" height="15" fill="rgb(220,19,52)" fg:x="108221" fg:w="79"/><text x="95.2599%" y="447.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,907 samples, 6.06%)</title><rect x="89.0795%" y="533" width="6.0638%" height="15" fill="rgb(221,78,38)" fg:x="101466" fg:w="6907"/><text x="89.3295%" y="543.50">&lt;core::f..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (6,907 samples, 6.06%)</title><rect x="89.0795%" y="517" width="6.0638%" height="15" fill="rgb(253,30,16)" fg:x="101466" fg:w="6907"/><text x="89.3295%" y="527.50">async_ex..</text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (6,894 samples, 6.05%)</title><rect x="89.0909%" y="501" width="6.0524%" height="15" fill="rgb(242,65,0)" fg:x="101479" fg:w="6894"/><text x="89.3409%" y="511.50">&lt;futures..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (6,885 samples, 6.04%)</title><rect x="89.0988%" y="485" width="6.0445%" height="15" fill="rgb(235,201,12)" fg:x="101488" fg:w="6885"/><text x="89.3488%" y="495.50">async_ex..</text></g><g><title>async_executor::Ticker::wake (306 samples, 0.27%)</title><rect x="94.8747%" y="469" width="0.2686%" height="15" fill="rgb(233,161,9)" fg:x="108067" fg:w="306"/><text x="95.1247%" y="479.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (73 samples, 0.06%)</title><rect x="95.0792%" y="453" width="0.0641%" height="15" fill="rgb(241,207,41)" fg:x="108300" fg:w="73"/><text x="95.3292%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (73 samples, 0.06%)</title><rect x="95.0792%" y="437" width="0.0641%" height="15" fill="rgb(212,69,46)" fg:x="108300" fg:w="73"/><text x="95.3292%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (67 samples, 0.06%)</title><rect x="95.0845%" y="421" width="0.0588%" height="15" fill="rgb(239,69,45)" fg:x="108306" fg:w="67"/><text x="95.3345%" y="431.50"></text></g><g><title>__GI___pthread_mutex_lock (67 samples, 0.06%)</title><rect x="95.0845%" y="405" width="0.0588%" height="15" fill="rgb(242,117,48)" fg:x="108306" fg:w="67"/><text x="95.3345%" y="415.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,959 samples, 6.11%)</title><rect x="89.0532%" y="565" width="6.1095%" height="15" fill="rgb(228,41,36)" fg:x="101436" fg:w="6959"/><text x="89.3032%" y="575.50">&lt;core::f..</text></g><g><title>async_executor::Runner::runnable::{{closure}} (6,958 samples, 6.11%)</title><rect x="89.0540%" y="549" width="6.1086%" height="15" fill="rgb(212,3,32)" fg:x="101437" fg:w="6958"/><text x="89.3040%" y="559.50">async_ex..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (21 samples, 0.02%)</title><rect x="95.1442%" y="533" width="0.0184%" height="15" fill="rgb(233,41,49)" fg:x="108374" fg:w="21"/><text x="95.3942%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_add (21 samples, 0.02%)</title><rect x="95.1442%" y="517" width="0.0184%" height="15" fill="rgb(252,170,49)" fg:x="108374" fg:w="21"/><text x="95.3942%" y="527.50"></text></g><g><title>[libc-2.31.so] (57 samples, 0.05%)</title><rect x="95.3057%" y="421" width="0.0500%" height="15" fill="rgb(229,53,26)" fg:x="108558" fg:w="57"/><text x="95.5557%" y="431.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (115 samples, 0.10%)</title><rect x="95.5252%" y="357" width="0.1010%" height="15" fill="rgb(217,157,12)" fg:x="108808" fg:w="115"/><text x="95.7752%" y="367.50"></text></g><g><title>[libc-2.31.so] (104 samples, 0.09%)</title><rect x="95.5349%" y="341" width="0.0913%" height="15" fill="rgb(227,17,9)" fg:x="108819" fg:w="104"/><text x="95.7849%" y="351.50"></text></g><g><title>[libc-2.31.so] (182 samples, 0.16%)</title><rect x="95.6683%" y="341" width="0.1598%" height="15" fill="rgb(218,84,12)" fg:x="108971" fg:w="182"/><text x="95.9183%" y="351.50"></text></g><g><title>alloc::alloc::box_free (17 samples, 0.01%)</title><rect x="95.8281%" y="309" width="0.0149%" height="15" fill="rgb(212,79,24)" fg:x="109153" fg:w="17"/><text x="96.0781%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (17 samples, 0.01%)</title><rect x="95.8281%" y="293" width="0.0149%" height="15" fill="rgb(217,222,37)" fg:x="109153" fg:w="17"/><text x="96.0781%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (17 samples, 0.01%)</title><rect x="95.8281%" y="277" width="0.0149%" height="15" fill="rgb(246,208,8)" fg:x="109153" fg:w="17"/><text x="96.0781%" y="287.50"></text></g><g><title>__rg_dealloc (17 samples, 0.01%)</title><rect x="95.8281%" y="261" width="0.0149%" height="15" fill="rgb(244,133,10)" fg:x="109153" fg:w="17"/><text x="96.0781%" y="271.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (17 samples, 0.01%)</title><rect x="95.8281%" y="245" width="0.0149%" height="15" fill="rgb(209,219,41)" fg:x="109153" fg:w="17"/><text x="96.0781%" y="255.50"></text></g><g><title>sn_rust_dealloc (16 samples, 0.01%)</title><rect x="95.8290%" y="229" width="0.0140%" height="15" fill="rgb(253,175,45)" fg:x="109154" fg:w="16"/><text x="96.0790%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt;&gt; (18 samples, 0.02%)</title><rect x="95.8281%" y="341" width="0.0158%" height="15" fill="rgb(235,100,37)" fg:x="109153" fg:w="18"/><text x="96.0781%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt; (18 samples, 0.02%)</title><rect x="95.8281%" y="325" width="0.0158%" height="15" fill="rgb(225,87,19)" fg:x="109153" fg:w="18"/><text x="96.0781%" y="335.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (43 samples, 0.04%)</title><rect x="95.8825%" y="277" width="0.0378%" height="15" fill="rgb(217,152,17)" fg:x="109215" fg:w="43"/><text x="96.1325%" y="287.50"></text></g><g><title>core::mem::replace (43 samples, 0.04%)</title><rect x="95.8825%" y="261" width="0.0378%" height="15" fill="rgb(235,72,13)" fg:x="109215" fg:w="43"/><text x="96.1325%" y="271.50"></text></g><g><title>core::ptr::read (43 samples, 0.04%)</title><rect x="95.8825%" y="245" width="0.0378%" height="15" fill="rgb(233,140,18)" fg:x="109215" fg:w="43"/><text x="96.1325%" y="255.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (62 samples, 0.05%)</title><rect x="95.8702%" y="293" width="0.0544%" height="15" fill="rgb(207,212,28)" fg:x="109201" fg:w="62"/><text x="96.1202%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (66 samples, 0.06%)</title><rect x="95.9247%" y="293" width="0.0579%" height="15" fill="rgb(220,130,25)" fg:x="109263" fg:w="66"/><text x="96.1747%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (66 samples, 0.06%)</title><rect x="95.9247%" y="277" width="0.0579%" height="15" fill="rgb(205,55,34)" fg:x="109263" fg:w="66"/><text x="96.1747%" y="287.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (66 samples, 0.06%)</title><rect x="95.9247%" y="261" width="0.0579%" height="15" fill="rgb(237,54,35)" fg:x="109263" fg:w="66"/><text x="96.1747%" y="271.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (63 samples, 0.06%)</title><rect x="95.9273%" y="245" width="0.0553%" height="15" fill="rgb(208,67,23)" fg:x="109266" fg:w="63"/><text x="96.1773%" y="255.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (63 samples, 0.06%)</title><rect x="95.9273%" y="229" width="0.0553%" height="15" fill="rgb(206,207,50)" fg:x="109266" fg:w="63"/><text x="96.1773%" y="239.50"></text></g><g><title>__GI___pthread_mutex_unlock (61 samples, 0.05%)</title><rect x="95.9291%" y="213" width="0.0536%" height="15" fill="rgb(213,211,42)" fg:x="109268" fg:w="61"/><text x="96.1791%" y="223.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (347 samples, 0.30%)</title><rect x="95.8571%" y="309" width="0.3046%" height="15" fill="rgb(252,197,50)" fg:x="109186" fg:w="347"/><text x="96.1071%" y="319.50"></text></g><g><title>event_listener::Inner::lock (199 samples, 0.17%)</title><rect x="95.9870%" y="293" width="0.1747%" height="15" fill="rgb(251,211,41)" fg:x="109334" fg:w="199"/><text x="96.2370%" y="303.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (194 samples, 0.17%)</title><rect x="95.9914%" y="277" width="0.1703%" height="15" fill="rgb(229,211,5)" fg:x="109339" fg:w="194"/><text x="96.2414%" y="287.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (192 samples, 0.17%)</title><rect x="95.9932%" y="261" width="0.1686%" height="15" fill="rgb(239,36,31)" fg:x="109341" fg:w="192"/><text x="96.2432%" y="271.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (189 samples, 0.17%)</title><rect x="95.9958%" y="245" width="0.1659%" height="15" fill="rgb(248,67,31)" fg:x="109344" fg:w="189"/><text x="96.2458%" y="255.50"></text></g><g><title>__GI___pthread_mutex_lock (189 samples, 0.17%)</title><rect x="95.9958%" y="229" width="0.1659%" height="15" fill="rgb(249,55,44)" fg:x="109344" fg:w="189"/><text x="96.2458%" y="239.50"></text></g><g><title>concurrent_queue::full_fence (84 samples, 0.07%)</title><rect x="96.1802%" y="261" width="0.0737%" height="15" fill="rgb(216,82,12)" fg:x="109554" fg:w="84"/><text x="96.4302%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (84 samples, 0.07%)</title><rect x="96.1802%" y="245" width="0.0737%" height="15" fill="rgb(242,174,1)" fg:x="109554" fg:w="84"/><text x="96.4302%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (84 samples, 0.07%)</title><rect x="96.1802%" y="229" width="0.0737%" height="15" fill="rgb(208,120,29)" fg:x="109554" fg:w="84"/><text x="96.4302%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (84 samples, 0.07%)</title><rect x="96.1802%" y="213" width="0.0737%" height="15" fill="rgb(221,105,43)" fg:x="109554" fg:w="84"/><text x="96.4302%" y="223.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (726 samples, 0.64%)</title><rect x="95.6262%" y="357" width="0.6374%" height="15" fill="rgb(234,124,22)" fg:x="108923" fg:w="726"/><text x="95.8762%" y="367.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (478 samples, 0.42%)</title><rect x="95.8439%" y="341" width="0.4196%" height="15" fill="rgb(212,23,30)" fg:x="109171" fg:w="478"/><text x="96.0939%" y="351.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (478 samples, 0.42%)</title><rect x="95.8439%" y="325" width="0.4196%" height="15" fill="rgb(219,122,53)" fg:x="109171" fg:w="478"/><text x="96.0939%" y="335.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (116 samples, 0.10%)</title><rect x="96.1617%" y="309" width="0.1018%" height="15" fill="rgb(248,84,24)" fg:x="109533" fg:w="116"/><text x="96.4117%" y="319.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (111 samples, 0.10%)</title><rect x="96.1661%" y="293" width="0.0974%" height="15" fill="rgb(245,115,18)" fg:x="109538" fg:w="111"/><text x="96.4161%" y="303.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (108 samples, 0.09%)</title><rect x="96.1687%" y="277" width="0.0948%" height="15" fill="rgb(227,176,51)" fg:x="109541" fg:w="108"/><text x="96.4187%" y="287.50"></text></g><g><title>[libc-2.31.so] (145 samples, 0.13%)</title><rect x="96.2636%" y="357" width="0.1273%" height="15" fill="rgb(229,63,42)" fg:x="109649" fg:w="145"/><text x="96.5136%" y="367.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (118 samples, 0.10%)</title><rect x="96.3909%" y="357" width="0.1036%" height="15" fill="rgb(247,202,24)" fg:x="109794" fg:w="118"/><text x="96.6409%" y="367.50"></text></g><g><title>alloc::alloc::exchange_malloc (55 samples, 0.05%)</title><rect x="96.4462%" y="341" width="0.0483%" height="15" fill="rgb(244,173,20)" fg:x="109857" fg:w="55"/><text x="96.6962%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (55 samples, 0.05%)</title><rect x="96.4462%" y="325" width="0.0483%" height="15" fill="rgb(242,81,47)" fg:x="109857" fg:w="55"/><text x="96.6962%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (55 samples, 0.05%)</title><rect x="96.4462%" y="309" width="0.0483%" height="15" fill="rgb(231,185,54)" fg:x="109857" fg:w="55"/><text x="96.6962%" y="319.50"></text></g><g><title>alloc::alloc::alloc (53 samples, 0.05%)</title><rect x="96.4479%" y="293" width="0.0465%" height="15" fill="rgb(243,55,32)" fg:x="109859" fg:w="53"/><text x="96.6979%" y="303.50"></text></g><g><title>__rg_alloc (53 samples, 0.05%)</title><rect x="96.4479%" y="277" width="0.0465%" height="15" fill="rgb(208,167,19)" fg:x="109859" fg:w="53"/><text x="96.6979%" y="287.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (53 samples, 0.05%)</title><rect x="96.4479%" y="261" width="0.0465%" height="15" fill="rgb(231,72,35)" fg:x="109859" fg:w="53"/><text x="96.6979%" y="271.50"></text></g><g><title>sn_rust_alloc (43 samples, 0.04%)</title><rect x="96.4567%" y="245" width="0.0378%" height="15" fill="rgb(250,173,51)" fg:x="109869" fg:w="43"/><text x="96.7067%" y="255.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (26 samples, 0.02%)</title><rect x="96.4716%" y="229" width="0.0228%" height="15" fill="rgb(209,5,22)" fg:x="109886" fg:w="26"/><text x="96.7216%" y="239.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (1,265 samples, 1.11%)</title><rect x="95.3997%" y="373" width="1.1106%" height="15" fill="rgb(250,174,19)" fg:x="108665" fg:w="1265"/><text x="95.6497%" y="383.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,304 samples, 1.14%)</title><rect x="95.3672%" y="405" width="1.1448%" height="15" fill="rgb(217,3,49)" fg:x="108628" fg:w="1304"/><text x="95.6172%" y="415.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,304 samples, 1.14%)</title><rect x="95.3672%" y="389" width="1.1448%" height="15" fill="rgb(218,225,5)" fg:x="108628" fg:w="1304"/><text x="95.6172%" y="399.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,453 samples, 1.28%)</title><rect x="95.2425%" y="533" width="1.2756%" height="15" fill="rgb(236,89,11)" fg:x="108486" fg:w="1453"/><text x="95.4925%" y="543.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,453 samples, 1.28%)</title><rect x="95.2425%" y="517" width="1.2756%" height="15" fill="rgb(206,33,28)" fg:x="108486" fg:w="1453"/><text x="95.4925%" y="527.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (1,445 samples, 1.27%)</title><rect x="95.2496%" y="501" width="1.2686%" height="15" fill="rgb(241,56,42)" fg:x="108494" fg:w="1445"/><text x="95.4996%" y="511.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (1,384 samples, 1.22%)</title><rect x="95.3031%" y="485" width="1.2150%" height="15" fill="rgb(222,44,11)" fg:x="108555" fg:w="1384"/><text x="95.5531%" y="495.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (1,384 samples, 1.22%)</title><rect x="95.3031%" y="469" width="1.2150%" height="15" fill="rgb(234,111,20)" fg:x="108555" fg:w="1384"/><text x="95.5531%" y="479.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,383 samples, 1.21%)</title><rect x="95.3040%" y="453" width="1.2142%" height="15" fill="rgb(237,77,6)" fg:x="108556" fg:w="1383"/><text x="95.5540%" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,381 samples, 1.21%)</title><rect x="95.3057%" y="437" width="1.2124%" height="15" fill="rgb(235,111,23)" fg:x="108558" fg:w="1381"/><text x="95.5557%" y="447.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (1,313 samples, 1.15%)</title><rect x="95.3654%" y="421" width="1.1527%" height="15" fill="rgb(251,135,29)" fg:x="108626" fg:w="1313"/><text x="95.6154%" y="431.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_ref (34 samples, 0.03%)</title><rect x="96.5182%" y="533" width="0.0298%" height="15" fill="rgb(217,57,1)" fg:x="109939" fg:w="34"/><text x="96.7682%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (32 samples, 0.03%)</title><rect x="96.5199%" y="517" width="0.0281%" height="15" fill="rgb(249,119,31)" fg:x="109941" fg:w="32"/><text x="96.7699%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_sub (32 samples, 0.03%)</title><rect x="96.5199%" y="501" width="0.0281%" height="15" fill="rgb(233,164,33)" fg:x="109941" fg:w="32"/><text x="96.7699%" y="511.50"></text></g><g><title>async_executor::State::notify (12 samples, 0.01%)</title><rect x="96.5489%" y="501" width="0.0105%" height="15" fill="rgb(250,217,43)" fg:x="109974" fg:w="12"/><text x="96.7989%" y="511.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::schedule (15 samples, 0.01%)</title><rect x="96.5489%" y="533" width="0.0132%" height="15" fill="rgb(232,154,50)" fg:x="109974" fg:w="15"/><text x="96.7989%" y="543.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (15 samples, 0.01%)</title><rect x="96.5489%" y="517" width="0.0132%" height="15" fill="rgb(227,190,8)" fg:x="109974" fg:w="15"/><text x="96.7989%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (174 samples, 0.15%)</title><rect x="96.5620%" y="533" width="0.1528%" height="15" fill="rgb(209,217,32)" fg:x="109989" fg:w="174"/><text x="96.8120%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (174 samples, 0.15%)</title><rect x="96.5620%" y="517" width="0.1528%" height="15" fill="rgb(243,203,50)" fg:x="109989" fg:w="174"/><text x="96.8120%" y="527.50"></text></g><g><title>async_task::runnable::Runnable::run (1,769 samples, 1.55%)</title><rect x="95.1635%" y="565" width="1.5530%" height="15" fill="rgb(232,152,27)" fg:x="108396" fg:w="1769"/><text x="95.4135%" y="575.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (1,724 samples, 1.51%)</title><rect x="95.2030%" y="549" width="1.5135%" height="15" fill="rgb(240,34,29)" fg:x="108441" fg:w="1724"/><text x="95.4530%" y="559.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (8,836 samples, 7.76%)</title><rect x="89.0163%" y="629" width="7.7573%" height="15" fill="rgb(215,185,52)" fg:x="101394" fg:w="8836"/><text x="89.2663%" y="639.50">async_execu..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (8,807 samples, 7.73%)</title><rect x="89.0417%" y="613" width="7.7319%" height="15" fill="rgb(240,89,49)" fg:x="101423" fg:w="8807"/><text x="89.2917%" y="623.50">&lt;futures_li..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,807 samples, 7.73%)</title><rect x="89.0417%" y="597" width="7.7319%" height="15" fill="rgb(225,12,52)" fg:x="101423" fg:w="8807"/><text x="89.2917%" y="607.50">&lt;core::futu..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (8,807 samples, 7.73%)</title><rect x="89.0417%" y="581" width="7.7319%" height="15" fill="rgb(239,128,45)" fg:x="101423" fg:w="8807"/><text x="89.2917%" y="591.50">async_execu..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (65 samples, 0.06%)</title><rect x="96.7166%" y="565" width="0.0571%" height="15" fill="rgb(211,78,47)" fg:x="110165" fg:w="65"/><text x="96.9666%" y="575.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (65 samples, 0.06%)</title><rect x="96.7166%" y="549" width="0.0571%" height="15" fill="rgb(232,31,21)" fg:x="110165" fg:w="65"/><text x="96.9666%" y="559.50"></text></g><g><title>concurrent_queue::full_fence (32 samples, 0.03%)</title><rect x="96.8851%" y="389" width="0.0281%" height="15" fill="rgb(222,168,14)" fg:x="110357" fg:w="32"/><text x="97.1351%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (32 samples, 0.03%)</title><rect x="96.8851%" y="373" width="0.0281%" height="15" fill="rgb(209,128,24)" fg:x="110357" fg:w="32"/><text x="97.1351%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (32 samples, 0.03%)</title><rect x="96.8851%" y="357" width="0.0281%" height="15" fill="rgb(249,35,13)" fg:x="110357" fg:w="32"/><text x="97.1351%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (32 samples, 0.03%)</title><rect x="96.8851%" y="341" width="0.0281%" height="15" fill="rgb(218,7,2)" fg:x="110357" fg:w="32"/><text x="97.1351%" y="351.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (122 samples, 0.11%)</title><rect x="96.8711%" y="405" width="0.1071%" height="15" fill="rgb(238,107,27)" fg:x="110341" fg:w="122"/><text x="97.1211%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (74 samples, 0.06%)</title><rect x="96.9132%" y="389" width="0.0650%" height="15" fill="rgb(217,88,38)" fg:x="110389" fg:w="74"/><text x="97.1632%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_load (74 samples, 0.06%)</title><rect x="96.9132%" y="373" width="0.0650%" height="15" fill="rgb(230,207,0)" fg:x="110389" fg:w="74"/><text x="97.1632%" y="383.50"></text></g><g><title>concurrent_queue::full_fence (28 samples, 0.02%)</title><rect x="96.9870%" y="389" width="0.0246%" height="15" fill="rgb(249,64,54)" fg:x="110473" fg:w="28"/><text x="97.2370%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (27 samples, 0.02%)</title><rect x="96.9878%" y="373" width="0.0237%" height="15" fill="rgb(231,7,11)" fg:x="110474" fg:w="27"/><text x="97.2378%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (27 samples, 0.02%)</title><rect x="96.9878%" y="357" width="0.0237%" height="15" fill="rgb(205,149,21)" fg:x="110474" fg:w="27"/><text x="97.2378%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (27 samples, 0.02%)</title><rect x="96.9878%" y="341" width="0.0237%" height="15" fill="rgb(215,126,34)" fg:x="110474" fg:w="27"/><text x="97.2378%" y="351.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (183 samples, 0.16%)</title><rect x="96.8614%" y="421" width="0.1607%" height="15" fill="rgb(241,132,45)" fg:x="110330" fg:w="183"/><text x="97.1114%" y="431.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (50 samples, 0.04%)</title><rect x="96.9782%" y="405" width="0.0439%" height="15" fill="rgb(252,69,32)" fg:x="110463" fg:w="50"/><text x="97.2282%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (38 samples, 0.03%)</title><rect x="97.0247%" y="357" width="0.0334%" height="15" fill="rgb(232,204,19)" fg:x="110516" fg:w="38"/><text x="97.2747%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_sub (38 samples, 0.03%)</title><rect x="97.0247%" y="341" width="0.0334%" height="15" fill="rgb(249,15,47)" fg:x="110516" fg:w="38"/><text x="97.2747%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (83 samples, 0.07%)</title><rect x="97.0221%" y="421" width="0.0729%" height="15" fill="rgb(209,227,23)" fg:x="110513" fg:w="83"/><text x="97.2721%" y="431.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (83 samples, 0.07%)</title><rect x="97.0221%" y="405" width="0.0729%" height="15" fill="rgb(248,92,24)" fg:x="110513" fg:w="83"/><text x="97.2721%" y="415.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read_unlock (81 samples, 0.07%)</title><rect x="97.0238%" y="389" width="0.0711%" height="15" fill="rgb(247,59,2)" fg:x="110515" fg:w="81"/><text x="97.2738%" y="399.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read_unlock (80 samples, 0.07%)</title><rect x="97.0247%" y="373" width="0.0702%" height="15" fill="rgb(221,30,5)" fg:x="110516" fg:w="80"/><text x="97.2747%" y="383.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::raw_unlock (42 samples, 0.04%)</title><rect x="97.0581%" y="357" width="0.0369%" height="15" fill="rgb(208,108,53)" fg:x="110554" fg:w="42"/><text x="97.3081%" y="367.50"></text></g><g><title>__GI___pthread_rwlock_unlock (42 samples, 0.04%)</title><rect x="97.0581%" y="341" width="0.0369%" height="15" fill="rgb(211,183,26)" fg:x="110554" fg:w="42"/><text x="97.3081%" y="351.50"></text></g><g><title>fastrand::usize (17 samples, 0.01%)</title><rect x="97.0949%" y="421" width="0.0149%" height="15" fill="rgb(232,132,4)" fg:x="110596" fg:w="17"/><text x="97.3449%" y="431.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (15 samples, 0.01%)</title><rect x="97.0967%" y="405" width="0.0132%" height="15" fill="rgb(253,128,37)" fg:x="110598" fg:w="15"/><text x="97.3467%" y="415.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (13 samples, 0.01%)</title><rect x="97.0985%" y="389" width="0.0114%" height="15" fill="rgb(221,58,24)" fg:x="110600" fg:w="13"/><text x="97.3485%" y="399.50"></text></g><g><title>__GI___pthread_rwlock_rdlock (37 samples, 0.03%)</title><rect x="97.1134%" y="373" width="0.0325%" height="15" fill="rgb(230,54,45)" fg:x="110617" fg:w="37"/><text x="97.3634%" y="383.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (380 samples, 0.33%)</title><rect x="96.8403%" y="437" width="0.3336%" height="15" fill="rgb(254,21,18)" fg:x="110306" fg:w="380"/><text x="97.0903%" y="447.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (73 samples, 0.06%)</title><rect x="97.1099%" y="421" width="0.0641%" height="15" fill="rgb(221,108,0)" fg:x="110613" fg:w="73"/><text x="97.3599%" y="431.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read (72 samples, 0.06%)</title><rect x="97.1108%" y="405" width="0.0632%" height="15" fill="rgb(206,95,1)" fg:x="110614" fg:w="72"/><text x="97.3608%" y="415.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read (72 samples, 0.06%)</title><rect x="97.1108%" y="389" width="0.0632%" height="15" fill="rgb(237,52,5)" fg:x="110614" fg:w="72"/><text x="97.3608%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (32 samples, 0.03%)</title><rect x="97.1459%" y="373" width="0.0281%" height="15" fill="rgb(218,150,34)" fg:x="110654" fg:w="32"/><text x="97.3959%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_add (32 samples, 0.03%)</title><rect x="97.1459%" y="357" width="0.0281%" height="15" fill="rgb(235,194,28)" fg:x="110654" fg:w="32"/><text x="97.3959%" y="367.50"></text></g><g><title>async_executor::Sleepers::update (24 samples, 0.02%)</title><rect x="97.1801%" y="421" width="0.0211%" height="15" fill="rgb(245,92,18)" fg:x="110693" fg:w="24"/><text x="97.4301%" y="431.50"></text></g><g><title>core::task::wake::Waker::will_wake (15 samples, 0.01%)</title><rect x="97.1880%" y="405" width="0.0132%" height="15" fill="rgb(253,203,53)" fg:x="110702" fg:w="15"/><text x="97.4380%" y="415.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (15 samples, 0.01%)</title><rect x="97.1880%" y="389" width="0.0132%" height="15" fill="rgb(249,185,47)" fg:x="110702" fg:w="15"/><text x="97.4380%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (12 samples, 0.01%)</title><rect x="97.1906%" y="373" width="0.0105%" height="15" fill="rgb(252,194,52)" fg:x="110705" fg:w="12"/><text x="97.4406%" y="383.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (12 samples, 0.01%)</title><rect x="97.1906%" y="357" width="0.0105%" height="15" fill="rgb(210,53,36)" fg:x="110705" fg:w="12"/><text x="97.4406%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (40 samples, 0.04%)</title><rect x="97.2012%" y="421" width="0.0351%" height="15" fill="rgb(237,37,25)" fg:x="110717" fg:w="40"/><text x="97.4512%" y="431.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 0.04%)</title><rect x="97.2012%" y="405" width="0.0351%" height="15" fill="rgb(242,116,27)" fg:x="110717" fg:w="40"/><text x="97.4512%" y="415.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (36 samples, 0.03%)</title><rect x="97.2047%" y="389" width="0.0316%" height="15" fill="rgb(213,185,26)" fg:x="110721" fg:w="36"/><text x="97.4547%" y="399.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (36 samples, 0.03%)</title><rect x="97.2047%" y="373" width="0.0316%" height="15" fill="rgb(225,204,8)" fg:x="110721" fg:w="36"/><text x="97.4547%" y="383.50"></text></g><g><title>__GI___pthread_mutex_unlock (33 samples, 0.03%)</title><rect x="97.2073%" y="357" width="0.0290%" height="15" fill="rgb(254,111,37)" fg:x="110724" fg:w="33"/><text x="97.4573%" y="367.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (512 samples, 0.45%)</title><rect x="96.8237%" y="549" width="0.4495%" height="15" fill="rgb(242,35,9)" fg:x="110287" fg:w="512"/><text x="97.0737%" y="559.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (504 samples, 0.44%)</title><rect x="96.8307%" y="533" width="0.4425%" height="15" fill="rgb(232,138,49)" fg:x="110295" fg:w="504"/><text x="97.0807%" y="543.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}} (504 samples, 0.44%)</title><rect x="96.8307%" y="517" width="0.4425%" height="15" fill="rgb(247,56,4)" fg:x="110295" fg:w="504"/><text x="97.0807%" y="527.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (500 samples, 0.44%)</title><rect x="96.8342%" y="501" width="0.4390%" height="15" fill="rgb(226,179,17)" fg:x="110299" fg:w="500"/><text x="97.0842%" y="511.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (500 samples, 0.44%)</title><rect x="96.8342%" y="485" width="0.4390%" height="15" fill="rgb(216,163,45)" fg:x="110299" fg:w="500"/><text x="97.0842%" y="495.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (497 samples, 0.44%)</title><rect x="96.8368%" y="469" width="0.4363%" height="15" fill="rgb(211,157,3)" fg:x="110302" fg:w="497"/><text x="97.0868%" y="479.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (493 samples, 0.43%)</title><rect x="96.8403%" y="453" width="0.4328%" height="15" fill="rgb(234,44,20)" fg:x="110306" fg:w="493"/><text x="97.0903%" y="463.50"></text></g><g><title>async_executor::Ticker::sleep (113 samples, 0.10%)</title><rect x="97.1740%" y="437" width="0.0992%" height="15" fill="rgb(254,138,23)" fg:x="110686" fg:w="113"/><text x="97.4240%" y="447.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (42 samples, 0.04%)</title><rect x="97.2363%" y="421" width="0.0369%" height="15" fill="rgb(206,119,39)" fg:x="110757" fg:w="42"/><text x="97.4863%" y="431.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (37 samples, 0.03%)</title><rect x="97.2407%" y="405" width="0.0325%" height="15" fill="rgb(231,105,52)" fg:x="110762" fg:w="37"/><text x="97.4907%" y="415.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (37 samples, 0.03%)</title><rect x="97.2407%" y="389" width="0.0325%" height="15" fill="rgb(250,20,5)" fg:x="110762" fg:w="37"/><text x="97.4907%" y="399.50"></text></g><g><title>__GI___pthread_mutex_lock (37 samples, 0.03%)</title><rect x="97.2407%" y="373" width="0.0325%" height="15" fill="rgb(215,198,30)" fg:x="110762" fg:w="37"/><text x="97.4907%" y="383.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (21 samples, 0.02%)</title><rect x="97.3416%" y="485" width="0.0184%" height="15" fill="rgb(246,142,8)" fg:x="110877" fg:w="21"/><text x="97.5916%" y="495.50"></text></g><g><title>core::mem::replace (21 samples, 0.02%)</title><rect x="97.3416%" y="469" width="0.0184%" height="15" fill="rgb(243,26,38)" fg:x="110877" fg:w="21"/><text x="97.5916%" y="479.50"></text></g><g><title>core::ptr::read (20 samples, 0.02%)</title><rect x="97.3425%" y="453" width="0.0176%" height="15" fill="rgb(205,133,28)" fg:x="110878" fg:w="20"/><text x="97.5925%" y="463.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (42 samples, 0.04%)</title><rect x="97.3320%" y="501" width="0.0369%" height="15" fill="rgb(212,34,0)" fg:x="110866" fg:w="42"/><text x="97.5820%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (39 samples, 0.03%)</title><rect x="97.3689%" y="501" width="0.0342%" height="15" fill="rgb(251,226,22)" fg:x="110908" fg:w="39"/><text x="97.6189%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (37 samples, 0.03%)</title><rect x="97.3706%" y="485" width="0.0325%" height="15" fill="rgb(252,119,9)" fg:x="110910" fg:w="37"/><text x="97.6206%" y="495.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.03%)</title><rect x="97.3706%" y="469" width="0.0325%" height="15" fill="rgb(213,150,50)" fg:x="110910" fg:w="37"/><text x="97.6206%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (34 samples, 0.03%)</title><rect x="97.3732%" y="453" width="0.0298%" height="15" fill="rgb(212,24,39)" fg:x="110913" fg:w="34"/><text x="97.6232%" y="463.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (34 samples, 0.03%)</title><rect x="97.3732%" y="437" width="0.0298%" height="15" fill="rgb(213,46,39)" fg:x="110913" fg:w="34"/><text x="97.6232%" y="447.50"></text></g><g><title>__GI___pthread_mutex_unlock (34 samples, 0.03%)</title><rect x="97.3732%" y="421" width="0.0298%" height="15" fill="rgb(239,106,12)" fg:x="110913" fg:w="34"/><text x="97.6232%" y="431.50"></text></g><g><title>core::task::wake::Waker::will_wake (14 samples, 0.01%)</title><rect x="97.4031%" y="501" width="0.0123%" height="15" fill="rgb(249,229,21)" fg:x="110947" fg:w="14"/><text x="97.6531%" y="511.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (14 samples, 0.01%)</title><rect x="97.4031%" y="485" width="0.0123%" height="15" fill="rgb(212,158,3)" fg:x="110947" fg:w="14"/><text x="97.6531%" y="495.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (277 samples, 0.24%)</title><rect x="97.3136%" y="517" width="0.2432%" height="15" fill="rgb(253,26,48)" fg:x="110845" fg:w="277"/><text x="97.5636%" y="527.50"></text></g><g><title>event_listener::Inner::lock (161 samples, 0.14%)</title><rect x="97.4154%" y="501" width="0.1413%" height="15" fill="rgb(238,178,20)" fg:x="110961" fg:w="161"/><text x="97.6654%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (158 samples, 0.14%)</title><rect x="97.4180%" y="485" width="0.1387%" height="15" fill="rgb(208,86,15)" fg:x="110964" fg:w="158"/><text x="97.6680%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (158 samples, 0.14%)</title><rect x="97.4180%" y="469" width="0.1387%" height="15" fill="rgb(239,42,53)" fg:x="110964" fg:w="158"/><text x="97.6680%" y="479.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (132 samples, 0.12%)</title><rect x="97.4408%" y="453" width="0.1159%" height="15" fill="rgb(245,226,8)" fg:x="110990" fg:w="132"/><text x="97.6908%" y="463.50"></text></g><g><title>__GI___pthread_mutex_lock (132 samples, 0.12%)</title><rect x="97.4408%" y="437" width="0.1159%" height="15" fill="rgb(216,176,32)" fg:x="110990" fg:w="132"/><text x="97.6908%" y="447.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (85 samples, 0.07%)</title><rect x="97.5567%" y="517" width="0.0746%" height="15" fill="rgb(231,186,21)" fg:x="111122" fg:w="85"/><text x="97.8067%" y="527.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (85 samples, 0.07%)</title><rect x="97.5567%" y="501" width="0.0746%" height="15" fill="rgb(205,95,49)" fg:x="111122" fg:w="85"/><text x="97.8067%" y="511.50"></text></g><g><title>concurrent_queue::single::Single&lt;T&gt;::pop (56 samples, 0.05%)</title><rect x="97.5822%" y="485" width="0.0492%" height="15" fill="rgb(217,145,8)" fg:x="111151" fg:w="56"/><text x="97.8322%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (51 samples, 0.04%)</title><rect x="97.5866%" y="469" width="0.0448%" height="15" fill="rgb(239,144,48)" fg:x="111156" fg:w="51"/><text x="97.8366%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (51 samples, 0.04%)</title><rect x="97.5866%" y="453" width="0.0448%" height="15" fill="rgb(214,189,23)" fg:x="111156" fg:w="51"/><text x="97.8366%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (51 samples, 0.04%)</title><rect x="97.5866%" y="437" width="0.0448%" height="15" fill="rgb(229,157,17)" fg:x="111156" fg:w="51"/><text x="97.8366%" y="447.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (930 samples, 0.82%)</title><rect x="96.8193%" y="581" width="0.8165%" height="15" fill="rgb(230,5,48)" fg:x="110282" fg:w="930"/><text x="97.0693%" y="591.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (928 samples, 0.81%)</title><rect x="96.8210%" y="565" width="0.8147%" height="15" fill="rgb(224,156,48)" fg:x="110284" fg:w="928"/><text x="97.0710%" y="575.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}} (413 samples, 0.36%)</title><rect x="97.2732%" y="549" width="0.3626%" height="15" fill="rgb(223,14,29)" fg:x="110799" fg:w="413"/><text x="97.5232%" y="559.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (385 samples, 0.34%)</title><rect x="97.2977%" y="533" width="0.3380%" height="15" fill="rgb(229,96,36)" fg:x="110827" fg:w="385"/><text x="97.5477%" y="543.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (9,873 samples, 8.67%)</title><rect x="88.9715%" y="661" width="8.6677%" height="15" fill="rgb(231,102,53)" fg:x="101343" fg:w="9873"/><text x="89.2215%" y="671.50">&lt;futures_lit..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,823 samples, 8.62%)</title><rect x="89.0154%" y="645" width="8.6239%" height="15" fill="rgb(210,77,38)" fg:x="101393" fg:w="9823"/><text x="89.2654%" y="655.50">&lt;core::futur..</text></g><g><title>async_executor::LocalExecutor::run::{{closure}} (986 samples, 0.87%)</title><rect x="96.7736%" y="629" width="0.8656%" height="15" fill="rgb(235,131,6)" fg:x="110230" fg:w="986"/><text x="97.0236%" y="639.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (937 samples, 0.82%)</title><rect x="96.8166%" y="613" width="0.8226%" height="15" fill="rgb(252,55,38)" fg:x="110279" fg:w="937"/><text x="97.0666%" y="623.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (937 samples, 0.82%)</title><rect x="96.8166%" y="597" width="0.8226%" height="15" fill="rgb(246,38,14)" fg:x="110279" fg:w="937"/><text x="97.0666%" y="607.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (14 samples, 0.01%)</title><rect x="97.6410%" y="581" width="0.0123%" height="15" fill="rgb(242,27,5)" fg:x="111218" fg:w="14"/><text x="97.8910%" y="591.50"></text></g><g><title>once_cell::imp::initialize_or_wait (14 samples, 0.01%)</title><rect x="97.6410%" y="565" width="0.0123%" height="15" fill="rgb(228,65,35)" fg:x="111218" fg:w="14"/><text x="97.8910%" y="575.50"></text></g><g><title>once_cell::imp::wait (14 samples, 0.01%)</title><rect x="97.6410%" y="549" width="0.0123%" height="15" fill="rgb(245,93,11)" fg:x="111218" fg:w="14"/><text x="97.8910%" y="559.50"></text></g><g><title>std::thread::park (14 samples, 0.01%)</title><rect x="97.6410%" y="533" width="0.0123%" height="15" fill="rgb(213,1,31)" fg:x="111218" fg:w="14"/><text x="97.8910%" y="543.50"></text></g><g><title>std::sys_common::thread_parker::futex::Parker::park (14 samples, 0.01%)</title><rect x="97.6410%" y="517" width="0.0123%" height="15" fill="rgb(237,205,14)" fg:x="111218" fg:w="14"/><text x="97.8910%" y="527.50"></text></g><g><title>std::sys::unix::futex::futex_wait (12 samples, 0.01%)</title><rect x="97.6428%" y="501" width="0.0105%" height="15" fill="rgb(232,118,45)" fg:x="111220" fg:w="12"/><text x="97.8928%" y="511.50"></text></g><g><title>syscall (12 samples, 0.01%)</title><rect x="97.6428%" y="485" width="0.0105%" height="15" fill="rgb(218,5,6)" fg:x="111220" fg:w="12"/><text x="97.8928%" y="495.50"></text></g><g><title>async_io::reactor::Reactor::get (21 samples, 0.02%)</title><rect x="97.6410%" y="661" width="0.0184%" height="15" fill="rgb(251,87,51)" fg:x="111218" fg:w="21"/><text x="97.8910%" y="671.50"></text></g><g><title>&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (21 samples, 0.02%)</title><rect x="97.6410%" y="645" width="0.0184%" height="15" fill="rgb(207,225,20)" fg:x="111218" fg:w="21"/><text x="97.8910%" y="655.50"></text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (21 samples, 0.02%)</title><rect x="97.6410%" y="629" width="0.0184%" height="15" fill="rgb(222,78,54)" fg:x="111218" fg:w="21"/><text x="97.8910%" y="639.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (21 samples, 0.02%)</title><rect x="97.6410%" y="613" width="0.0184%" height="15" fill="rgb(232,85,16)" fg:x="111218" fg:w="21"/><text x="97.8910%" y="623.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (21 samples, 0.02%)</title><rect x="97.6410%" y="597" width="0.0184%" height="15" fill="rgb(244,25,33)" fg:x="111218" fg:w="21"/><text x="97.8910%" y="607.50"></text></g><g><title>async_io::reactor::Reactor::try_lock (206 samples, 0.18%)</title><rect x="97.6595%" y="661" width="0.1809%" height="15" fill="rgb(233,24,36)" fg:x="111239" fg:w="206"/><text x="97.9095%" y="671.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (206 samples, 0.18%)</title><rect x="97.6595%" y="645" width="0.1809%" height="15" fill="rgb(253,49,54)" fg:x="111239" fg:w="206"/><text x="97.9095%" y="655.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (203 samples, 0.18%)</title><rect x="97.6621%" y="629" width="0.1782%" height="15" fill="rgb(245,12,22)" fg:x="111242" fg:w="203"/><text x="97.9121%" y="639.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::try_lock (183 samples, 0.16%)</title><rect x="97.6796%" y="613" width="0.1607%" height="15" fill="rgb(253,141,28)" fg:x="111262" fg:w="183"/><text x="97.9296%" y="623.50"></text></g><g><title>__GI___pthread_mutex_trylock (183 samples, 0.16%)</title><rect x="97.6796%" y="597" width="0.1607%" height="15" fill="rgb(225,207,27)" fg:x="111262" fg:w="183"/><text x="97.9296%" y="607.50"></text></g><g><title>sn_rust_dealloc (16 samples, 0.01%)</title><rect x="97.8684%" y="485" width="0.0140%" height="15" fill="rgb(220,84,2)" fg:x="111477" fg:w="16"/><text x="98.1184%" y="495.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (20 samples, 0.02%)</title><rect x="97.8658%" y="581" width="0.0176%" height="15" fill="rgb(224,37,37)" fg:x="111474" fg:w="20"/><text x="98.1158%" y="591.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (19 samples, 0.02%)</title><rect x="97.8666%" y="565" width="0.0167%" height="15" fill="rgb(220,143,18)" fg:x="111475" fg:w="19"/><text x="98.1166%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (19 samples, 0.02%)</title><rect x="97.8666%" y="549" width="0.0167%" height="15" fill="rgb(210,88,33)" fg:x="111475" fg:w="19"/><text x="98.1166%" y="559.50"></text></g><g><title>alloc::alloc::dealloc (19 samples, 0.02%)</title><rect x="97.8666%" y="533" width="0.0167%" height="15" fill="rgb(219,87,51)" fg:x="111475" fg:w="19"/><text x="98.1166%" y="543.50"></text></g><g><title>__rg_dealloc (19 samples, 0.02%)</title><rect x="97.8666%" y="517" width="0.0167%" height="15" fill="rgb(211,7,35)" fg:x="111475" fg:w="19"/><text x="98.1166%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (19 samples, 0.02%)</title><rect x="97.8666%" y="501" width="0.0167%" height="15" fill="rgb(232,77,2)" fg:x="111475" fg:w="19"/><text x="98.1166%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.02%)</title><rect x="97.8640%" y="629" width="0.0202%" height="15" fill="rgb(249,94,25)" fg:x="111472" fg:w="23"/><text x="98.1140%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V&gt;::dying_next (21 samples, 0.02%)</title><rect x="97.8658%" y="613" width="0.0184%" height="15" fill="rgb(215,112,2)" fg:x="111474" fg:w="21"/><text x="98.1158%" y="623.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (21 samples, 0.02%)</title><rect x="97.8658%" y="597" width="0.0184%" height="15" fill="rgb(226,115,48)" fg:x="111474" fg:w="21"/><text x="98.1158%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="97.8842%" y="629" width="0.0132%" height="15" fill="rgb(249,196,10)" fg:x="111495" fg:w="15"/><text x="98.1342%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="97.8842%" y="613" width="0.0132%" height="15" fill="rgb(237,109,14)" fg:x="111495" fg:w="15"/><text x="98.1342%" y="623.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Immut,K,V&gt;::next_unchecked (14 samples, 0.01%)</title><rect x="97.8851%" y="597" width="0.0123%" height="15" fill="rgb(217,103,53)" fg:x="111496" fg:w="14"/><text x="98.1351%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::Edge&gt;::move_suffix (15 samples, 0.01%)</title><rect x="97.9123%" y="597" width="0.0132%" height="15" fill="rgb(244,137,9)" fg:x="111527" fg:w="15"/><text x="98.1623%" y="607.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (14 samples, 0.01%)</title><rect x="97.9255%" y="597" width="0.0123%" height="15" fill="rgb(227,201,3)" fg:x="111542" fg:w="14"/><text x="98.1755%" y="607.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (14 samples, 0.01%)</title><rect x="97.9255%" y="581" width="0.0123%" height="15" fill="rgb(243,94,6)" fg:x="111542" fg:w="14"/><text x="98.1755%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::split_off (86 samples, 0.08%)</title><rect x="97.9035%" y="629" width="0.0755%" height="15" fill="rgb(235,118,5)" fg:x="111517" fg:w="86"/><text x="98.1535%" y="639.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::split_off (82 samples, 0.07%)</title><rect x="97.9070%" y="613" width="0.0720%" height="15" fill="rgb(247,10,30)" fg:x="111521" fg:w="82"/><text x="98.1570%" y="623.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::new_pillar (47 samples, 0.04%)</title><rect x="97.9378%" y="597" width="0.0413%" height="15" fill="rgb(205,26,28)" fg:x="111556" fg:w="47"/><text x="98.1878%" y="607.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (47 samples, 0.04%)</title><rect x="97.9378%" y="581" width="0.0413%" height="15" fill="rgb(206,99,35)" fg:x="111556" fg:w="47"/><text x="98.1878%" y="591.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (47 samples, 0.04%)</title><rect x="97.9378%" y="565" width="0.0413%" height="15" fill="rgb(238,130,40)" fg:x="111556" fg:w="47"/><text x="98.1878%" y="575.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (47 samples, 0.04%)</title><rect x="97.9378%" y="549" width="0.0413%" height="15" fill="rgb(224,126,31)" fg:x="111556" fg:w="47"/><text x="98.1878%" y="559.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new_uninit (47 samples, 0.04%)</title><rect x="97.9378%" y="533" width="0.0413%" height="15" fill="rgb(254,105,17)" fg:x="111556" fg:w="47"/><text x="98.1878%" y="543.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (47 samples, 0.04%)</title><rect x="97.9378%" y="517" width="0.0413%" height="15" fill="rgb(216,87,36)" fg:x="111556" fg:w="47"/><text x="98.1878%" y="527.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (47 samples, 0.04%)</title><rect x="97.9378%" y="501" width="0.0413%" height="15" fill="rgb(240,21,12)" fg:x="111556" fg:w="47"/><text x="98.1878%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (47 samples, 0.04%)</title><rect x="97.9378%" y="485" width="0.0413%" height="15" fill="rgb(245,192,34)" fg:x="111556" fg:w="47"/><text x="98.1878%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (47 samples, 0.04%)</title><rect x="97.9378%" y="469" width="0.0413%" height="15" fill="rgb(226,100,49)" fg:x="111556" fg:w="47"/><text x="98.1878%" y="479.50"></text></g><g><title>alloc::alloc::alloc (47 samples, 0.04%)</title><rect x="97.9378%" y="453" width="0.0413%" height="15" fill="rgb(245,188,27)" fg:x="111556" fg:w="47"/><text x="98.1878%" y="463.50"></text></g><g><title>__rg_alloc (47 samples, 0.04%)</title><rect x="97.9378%" y="437" width="0.0413%" height="15" fill="rgb(212,170,8)" fg:x="111556" fg:w="47"/><text x="98.1878%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (47 samples, 0.04%)</title><rect x="97.9378%" y="421" width="0.0413%" height="15" fill="rgb(217,113,29)" fg:x="111556" fg:w="47"/><text x="98.1878%" y="431.50"></text></g><g><title>sn_rust_alloc (47 samples, 0.04%)</title><rect x="97.9378%" y="405" width="0.0413%" height="15" fill="rgb(237,30,3)" fg:x="111556" fg:w="47"/><text x="98.1878%" y="415.50"></text></g><g><title>async_io::reactor::Reactor::process_timer_ops (46 samples, 0.04%)</title><rect x="97.9790%" y="629" width="0.0404%" height="15" fill="rgb(227,19,28)" fg:x="111603" fg:w="46"/><text x="98.2290%" y="639.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (35 samples, 0.03%)</title><rect x="97.9887%" y="613" width="0.0307%" height="15" fill="rgb(239,172,45)" fg:x="111614" fg:w="35"/><text x="98.2387%" y="623.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (35 samples, 0.03%)</title><rect x="97.9887%" y="597" width="0.0307%" height="15" fill="rgb(254,55,39)" fg:x="111614" fg:w="35"/><text x="98.2387%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (13 samples, 0.01%)</title><rect x="98.0080%" y="581" width="0.0114%" height="15" fill="rgb(249,208,12)" fg:x="111636" fg:w="13"/><text x="98.2580%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_load (13 samples, 0.01%)</title><rect x="98.0080%" y="565" width="0.0114%" height="15" fill="rgb(240,52,13)" fg:x="111636" fg:w="13"/><text x="98.2580%" y="575.50"></text></g><g><title>core::mem::drop (97 samples, 0.09%)</title><rect x="98.0194%" y="629" width="0.0852%" height="15" fill="rgb(252,149,13)" fg:x="111649" fg:w="97"/><text x="98.2694%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::collections::btree::map::BTreeMap&lt;(std::time::Instant,usize),core::task::wake::Waker&gt;&gt;&gt; (97 samples, 0.09%)</title><rect x="98.0194%" y="613" width="0.0852%" height="15" fill="rgb(232,81,48)" fg:x="111649" fg:w="97"/><text x="98.2694%" y="623.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (97 samples, 0.09%)</title><rect x="98.0194%" y="597" width="0.0852%" height="15" fill="rgb(222,144,2)" fg:x="111649" fg:w="97"/><text x="98.2694%" y="607.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (95 samples, 0.08%)</title><rect x="98.0212%" y="581" width="0.0834%" height="15" fill="rgb(216,81,32)" fg:x="111651" fg:w="95"/><text x="98.2712%" y="591.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (88 samples, 0.08%)</title><rect x="98.0273%" y="565" width="0.0773%" height="15" fill="rgb(244,78,51)" fg:x="111658" fg:w="88"/><text x="98.2773%" y="575.50"></text></g><g><title>__GI___pthread_mutex_unlock (88 samples, 0.08%)</title><rect x="98.0273%" y="549" width="0.0773%" height="15" fill="rgb(217,66,21)" fg:x="111658" fg:w="88"/><text x="98.2773%" y="559.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (14 samples, 0.01%)</title><rect x="98.1063%" y="629" width="0.0123%" height="15" fill="rgb(247,101,42)" fg:x="111748" fg:w="14"/><text x="98.3563%" y="639.50"></text></g><g><title>async_io::reactor::Reactor::process_timers::{{closure}} (12 samples, 0.01%)</title><rect x="98.1081%" y="613" width="0.0105%" height="15" fill="rgb(227,81,39)" fg:x="111750" fg:w="12"/><text x="98.3581%" y="623.50"></text></g><g><title>std::time::Instant::duration_since (12 samples, 0.01%)</title><rect x="98.1081%" y="597" width="0.0105%" height="15" fill="rgb(220,223,44)" fg:x="111750" fg:w="12"/><text x="98.3581%" y="607.50"></text></g><g><title>std::time::Instant::checked_duration_since (12 samples, 0.01%)</title><rect x="98.1081%" y="581" width="0.0105%" height="15" fill="rgb(205,218,2)" fg:x="111750" fg:w="12"/><text x="98.3581%" y="591.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (12 samples, 0.01%)</title><rect x="98.1081%" y="565" width="0.0105%" height="15" fill="rgb(212,207,28)" fg:x="111750" fg:w="12"/><text x="98.3581%" y="575.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (37 samples, 0.03%)</title><rect x="98.1204%" y="629" width="0.0325%" height="15" fill="rgb(224,12,41)" fg:x="111764" fg:w="37"/><text x="98.3704%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (36 samples, 0.03%)</title><rect x="98.1212%" y="613" width="0.0316%" height="15" fill="rgb(216,118,12)" fg:x="111765" fg:w="36"/><text x="98.3712%" y="623.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (36 samples, 0.03%)</title><rect x="98.1212%" y="597" width="0.0316%" height="15" fill="rgb(252,97,46)" fg:x="111765" fg:w="36"/><text x="98.3712%" y="607.50"></text></g><g><title>__GI___pthread_mutex_lock (36 samples, 0.03%)</title><rect x="98.1212%" y="581" width="0.0316%" height="15" fill="rgb(244,206,19)" fg:x="111765" fg:w="36"/><text x="98.3712%" y="591.50"></text></g><g><title>async_io::reactor::Reactor::process_timers (375 samples, 0.33%)</title><rect x="97.8579%" y="645" width="0.3292%" height="15" fill="rgb(231,84,31)" fg:x="111465" fg:w="375"/><text x="98.1079%" y="655.50"></text></g><g><title>std::time::Instant::now (39 samples, 0.03%)</title><rect x="98.1528%" y="629" width="0.0342%" height="15" fill="rgb(244,133,0)" fg:x="111801" fg:w="39"/><text x="98.4028%" y="639.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (39 samples, 0.03%)</title><rect x="98.1528%" y="613" width="0.0342%" height="15" fill="rgb(223,15,50)" fg:x="111801" fg:w="39"/><text x="98.4028%" y="623.50"></text></g><g><title>std::sys::unix::time::inner::now (39 samples, 0.03%)</title><rect x="98.1528%" y="597" width="0.0342%" height="15" fill="rgb(250,118,49)" fg:x="111801" fg:w="39"/><text x="98.4028%" y="607.50"></text></g><g><title>__clock_gettime (38 samples, 0.03%)</title><rect x="98.1537%" y="581" width="0.0334%" height="15" fill="rgb(248,25,38)" fg:x="111802" fg:w="38"/><text x="98.4037%" y="591.50"></text></g><g><title>__vdso_clock_gettime (27 samples, 0.02%)</title><rect x="98.1634%" y="565" width="0.0237%" height="15" fill="rgb(215,70,14)" fg:x="111813" fg:w="27"/><text x="98.4134%" y="575.50"></text></g><g><title>[[vdso]] (26 samples, 0.02%)</title><rect x="98.1643%" y="549" width="0.0228%" height="15" fill="rgb(215,28,15)" fg:x="111814" fg:w="26"/><text x="98.4143%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (20 samples, 0.02%)</title><rect x="98.1871%" y="645" width="0.0176%" height="15" fill="rgb(243,6,28)" fg:x="111840" fg:w="20"/><text x="98.4371%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_add (20 samples, 0.02%)</title><rect x="98.1871%" y="629" width="0.0176%" height="15" fill="rgb(222,130,1)" fg:x="111840" fg:w="20"/><text x="98.4371%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;polling::epoll::Events&gt;&gt; (49 samples, 0.04%)</title><rect x="98.2310%" y="629" width="0.0430%" height="15" fill="rgb(236,166,44)" fg:x="111890" fg:w="49"/><text x="98.4810%" y="639.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (49 samples, 0.04%)</title><rect x="98.2310%" y="613" width="0.0430%" height="15" fill="rgb(221,108,14)" fg:x="111890" fg:w="49"/><text x="98.4810%" y="623.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (48 samples, 0.04%)</title><rect x="98.2319%" y="597" width="0.0421%" height="15" fill="rgb(252,3,45)" fg:x="111891" fg:w="48"/><text x="98.4819%" y="607.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (48 samples, 0.04%)</title><rect x="98.2319%" y="581" width="0.0421%" height="15" fill="rgb(237,68,30)" fg:x="111891" fg:w="48"/><text x="98.4819%" y="591.50"></text></g><g><title>__GI___pthread_mutex_unlock (48 samples, 0.04%)</title><rect x="98.2319%" y="565" width="0.0421%" height="15" fill="rgb(211,79,22)" fg:x="111891" fg:w="48"/><text x="98.4819%" y="575.50"></text></g><g><title>__libc_read (82 samples, 0.07%)</title><rect x="98.3390%" y="613" width="0.0720%" height="15" fill="rgb(252,185,21)" fg:x="112013" fg:w="82"/><text x="98.5890%" y="623.50"></text></g><g><title>__pthread_enable_asynccancel (39 samples, 0.03%)</title><rect x="98.3767%" y="597" width="0.0342%" height="15" fill="rgb(225,189,26)" fg:x="112056" fg:w="39"/><text x="98.6267%" y="607.50"></text></g><g><title>epoll_wait (105 samples, 0.09%)</title><rect x="98.4110%" y="613" width="0.0922%" height="15" fill="rgb(241,30,40)" fg:x="112095" fg:w="105"/><text x="98.6610%" y="623.50"></text></g><g><title>[libc-2.31.so] (27 samples, 0.02%)</title><rect x="98.4794%" y="597" width="0.0237%" height="15" fill="rgb(235,215,44)" fg:x="112173" fg:w="27"/><text x="98.7294%" y="607.50"></text></g><g><title>polling::epoll::Poller::modify (55 samples, 0.05%)</title><rect x="98.5040%" y="613" width="0.0483%" height="15" fill="rgb(205,8,29)" fg:x="112201" fg:w="55"/><text x="98.7540%" y="623.50"></text></g><g><title>polling::epoll::Poller::ctl (52 samples, 0.05%)</title><rect x="98.5067%" y="597" width="0.0457%" height="15" fill="rgb(241,137,42)" fg:x="112204" fg:w="52"/><text x="98.7567%" y="607.50"></text></g><g><title>epoll_ctl (46 samples, 0.04%)</title><rect x="98.5119%" y="581" width="0.0404%" height="15" fill="rgb(237,155,2)" fg:x="112210" fg:w="46"/><text x="98.7619%" y="591.50"></text></g><g><title>polling::epoll::Poller::wait (331 samples, 0.29%)</title><rect x="98.2793%" y="629" width="0.2906%" height="15" fill="rgb(245,29,42)" fg:x="111945" fg:w="331"/><text x="98.5293%" y="639.50"></text></g><g><title>syscall (19 samples, 0.02%)</title><rect x="98.5532%" y="613" width="0.0167%" height="15" fill="rgb(234,101,35)" fg:x="112257" fg:w="19"/><text x="98.8032%" y="623.50"></text></g><g><title>async_io::reactor::ReactorLock::react (847 samples, 0.74%)</title><rect x="97.8403%" y="661" width="0.7436%" height="15" fill="rgb(228,64,37)" fg:x="111445" fg:w="847"/><text x="98.0903%" y="671.50"></text></g><g><title>polling::Poller::wait (432 samples, 0.38%)</title><rect x="98.2046%" y="645" width="0.3793%" height="15" fill="rgb(217,214,36)" fg:x="111860" fg:w="432"/><text x="98.4546%" y="655.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (16 samples, 0.01%)</title><rect x="98.5699%" y="629" width="0.0140%" height="15" fill="rgb(243,70,3)" fg:x="112276" fg:w="16"/><text x="98.8199%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (16 samples, 0.01%)</title><rect x="98.5699%" y="613" width="0.0140%" height="15" fill="rgb(253,158,52)" fg:x="112276" fg:w="16"/><text x="98.8199%" y="623.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::try_lock (14 samples, 0.01%)</title><rect x="98.5716%" y="597" width="0.0123%" height="15" fill="rgb(234,111,54)" fg:x="112278" fg:w="14"/><text x="98.8216%" y="607.50"></text></g><g><title>__GI___pthread_mutex_trylock (14 samples, 0.01%)</title><rect x="98.5716%" y="581" width="0.0123%" height="15" fill="rgb(217,70,32)" fg:x="112278" fg:w="14"/><text x="98.8216%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (12 samples, 0.01%)</title><rect x="98.5839%" y="613" width="0.0105%" height="15" fill="rgb(234,18,33)" fg:x="112292" fg:w="12"/><text x="98.8339%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_store (12 samples, 0.01%)</title><rect x="98.5839%" y="597" width="0.0105%" height="15" fill="rgb(234,12,49)" fg:x="112292" fg:w="12"/><text x="98.8339%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_io::driver::CallOnDrop&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (16 samples, 0.01%)</title><rect x="98.5839%" y="661" width="0.0140%" height="15" fill="rgb(236,10,21)" fg:x="112292" fg:w="16"/><text x="98.8339%" y="671.50"></text></g><g><title>&lt;async_io::driver::CallOnDrop&lt;F&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="98.5839%" y="645" width="0.0140%" height="15" fill="rgb(248,182,45)" fg:x="112292" fg:w="16"/><text x="98.8339%" y="655.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (16 samples, 0.01%)</title><rect x="98.5839%" y="629" width="0.0140%" height="15" fill="rgb(217,95,36)" fg:x="112292" fg:w="16"/><text x="98.8339%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_io::reactor::ReactorLock&gt; (23 samples, 0.02%)</title><rect x="98.5980%" y="661" width="0.0202%" height="15" fill="rgb(212,110,31)" fg:x="112308" fg:w="23"/><text x="98.8480%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::vec::Vec&lt;polling::Event&gt;&gt;&gt; (23 samples, 0.02%)</title><rect x="98.5980%" y="645" width="0.0202%" height="15" fill="rgb(206,32,53)" fg:x="112308" fg:w="23"/><text x="98.8480%" y="655.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="98.5980%" y="629" width="0.0202%" height="15" fill="rgb(246,141,37)" fg:x="112308" fg:w="23"/><text x="98.8480%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (22 samples, 0.02%)</title><rect x="98.5988%" y="613" width="0.0193%" height="15" fill="rgb(219,16,7)" fg:x="112309" fg:w="22"/><text x="98.8488%" y="623.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (21 samples, 0.02%)</title><rect x="98.5997%" y="597" width="0.0184%" height="15" fill="rgb(230,205,45)" fg:x="112310" fg:w="21"/><text x="98.8497%" y="607.50"></text></g><g><title>__GI___pthread_mutex_unlock (21 samples, 0.02%)</title><rect x="98.5997%" y="581" width="0.0184%" height="15" fill="rgb(231,43,49)" fg:x="112310" fg:w="21"/><text x="98.8497%" y="591.50"></text></g><g><title>__GI___pthread_mutex_unlock (61 samples, 0.05%)</title><rect x="98.6498%" y="629" width="0.0536%" height="15" fill="rgb(212,106,34)" fg:x="112367" fg:w="61"/><text x="98.8998%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (107 samples, 0.09%)</title><rect x="98.7042%" y="629" width="0.0939%" height="15" fill="rgb(206,83,17)" fg:x="112429" fg:w="107"/><text x="98.9542%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (107 samples, 0.09%)</title><rect x="98.7042%" y="613" width="0.0939%" height="15" fill="rgb(244,154,49)" fg:x="112429" fg:w="107"/><text x="98.9542%" y="623.50"></text></g><g><title>std::sync::poison::Flag::get (84 samples, 0.07%)</title><rect x="98.7981%" y="613" width="0.0737%" height="15" fill="rgb(244,149,49)" fg:x="112536" fg:w="84"/><text x="99.0481%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (84 samples, 0.07%)</title><rect x="98.7981%" y="597" width="0.0737%" height="15" fill="rgb(227,134,18)" fg:x="112536" fg:w="84"/><text x="99.0481%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_load (82 samples, 0.07%)</title><rect x="98.7999%" y="581" width="0.0720%" height="15" fill="rgb(237,116,36)" fg:x="112538" fg:w="82"/><text x="99.0499%" y="591.50"></text></g><g><title>__pthread_disable_asynccancel (48 samples, 0.04%)</title><rect x="99.2757%" y="565" width="0.0421%" height="15" fill="rgb(205,129,40)" fg:x="113080" fg:w="48"/><text x="99.5257%" y="575.50"></text></g><g><title>__pthread_enable_asynccancel (19 samples, 0.02%)</title><rect x="99.3179%" y="565" width="0.0167%" height="15" fill="rgb(236,178,4)" fg:x="113128" fg:w="19"/><text x="99.5679%" y="575.50"></text></g><g><title>__pthread_mutex_cond_lock (38 samples, 0.03%)</title><rect x="99.3345%" y="565" width="0.0334%" height="15" fill="rgb(251,76,53)" fg:x="113147" fg:w="38"/><text x="99.5845%" y="575.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::wait (577 samples, 0.51%)</title><rect x="98.8719%" y="597" width="0.5066%" height="15" fill="rgb(242,92,40)" fg:x="112620" fg:w="577"/><text x="99.1219%" y="607.50"></text></g><g><title>__pthread_cond_wait (577 samples, 0.51%)</title><rect x="98.8719%" y="581" width="0.5066%" height="15" fill="rgb(209,45,30)" fg:x="112620" fg:w="577"/><text x="99.1219%" y="591.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (12 samples, 0.01%)</title><rect x="99.3679%" y="565" width="0.0105%" height="15" fill="rgb(218,157,36)" fg:x="113185" fg:w="12"/><text x="99.6179%" y="575.50"></text></g><g><title>std::sync::condvar::Condvar::wait (672 samples, 0.59%)</title><rect x="98.7981%" y="629" width="0.5900%" height="15" fill="rgb(222,186,16)" fg:x="112536" fg:w="672"/><text x="99.0481%" y="639.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (588 samples, 0.52%)</title><rect x="98.8719%" y="613" width="0.5162%" height="15" fill="rgb(254,72,35)" fg:x="112620" fg:w="588"/><text x="99.1219%" y="623.50"></text></g><g><title>parking::Parker::park (886 samples, 0.78%)</title><rect x="98.6331%" y="661" width="0.7778%" height="15" fill="rgb(224,25,35)" fg:x="112348" fg:w="886"/><text x="98.8831%" y="671.50"></text></g><g><title>parking::Inner::park (878 samples, 0.77%)</title><rect x="98.6401%" y="645" width="0.7708%" height="15" fill="rgb(206,135,52)" fg:x="112356" fg:w="878"/><text x="98.8901%" y="655.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (26 samples, 0.02%)</title><rect x="99.3881%" y="629" width="0.0228%" height="15" fill="rgb(229,174,47)" fg:x="113208" fg:w="26"/><text x="99.6381%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (25 samples, 0.02%)</title><rect x="99.3890%" y="613" width="0.0219%" height="15" fill="rgb(242,184,21)" fg:x="113209" fg:w="25"/><text x="99.6390%" y="623.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (25 samples, 0.02%)</title><rect x="99.3890%" y="597" width="0.0219%" height="15" fill="rgb(213,22,45)" fg:x="113209" fg:w="25"/><text x="99.6390%" y="607.50"></text></g><g><title>__GI___pthread_mutex_lock (25 samples, 0.02%)</title><rect x="99.3890%" y="581" width="0.0219%" height="15" fill="rgb(237,81,54)" fg:x="113209" fg:w="25"/><text x="99.6390%" y="591.50"></text></g><g><title>parking::Parker::park_timeout (158 samples, 0.14%)</title><rect x="99.4109%" y="661" width="0.1387%" height="15" fill="rgb(248,177,18)" fg:x="113234" fg:w="158"/><text x="99.6609%" y="671.50"></text></g><g><title>parking::Inner::park (124 samples, 0.11%)</title><rect x="99.4408%" y="645" width="0.1089%" height="15" fill="rgb(254,31,16)" fg:x="113268" fg:w="124"/><text x="99.6908%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (120 samples, 0.11%)</title><rect x="99.4443%" y="629" width="0.1054%" height="15" fill="rgb(235,20,31)" fg:x="113272" fg:w="120"/><text x="99.6943%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (120 samples, 0.11%)</title><rect x="99.4443%" y="613" width="0.1054%" height="15" fill="rgb(240,56,43)" fg:x="113272" fg:w="120"/><text x="99.6943%" y="623.50"></text></g><g><title>clone (12,124 samples, 10.64%)</title><rect x="88.9311%" y="1061" width="10.6440%" height="15" fill="rgb(237,197,51)" fg:x="101297" fg:w="12124"/><text x="89.1811%" y="1071.50">clone</text></g><g><title>start_thread (12,116 samples, 10.64%)</title><rect x="88.9382%" y="1045" width="10.6369%" height="15" fill="rgb(241,162,44)" fg:x="101305" fg:w="12116"/><text x="89.1882%" y="1055.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (12,114 samples, 10.64%)</title><rect x="88.9399%" y="1029" width="10.6352%" height="15" fill="rgb(224,23,20)" fg:x="101307" fg:w="12114"/><text x="89.1899%" y="1039.50">std::sys::unix::..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (12,114 samples, 10.64%)</title><rect x="88.9399%" y="1013" width="10.6352%" height="15" fill="rgb(250,109,34)" fg:x="101307" fg:w="12114"/><text x="89.1899%" y="1023.50">&lt;alloc::boxed::B..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (12,114 samples, 10.64%)</title><rect x="88.9399%" y="997" width="10.6352%" height="15" fill="rgb(214,175,50)" fg:x="101307" fg:w="12114"/><text x="89.1899%" y="1007.50">&lt;alloc::boxed::B..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (12,114 samples, 10.64%)</title><rect x="88.9399%" y="981" width="10.6352%" height="15" fill="rgb(213,182,5)" fg:x="101307" fg:w="12114"/><text x="89.1899%" y="991.50">core::ops::funct..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (12,114 samples, 10.64%)</title><rect x="88.9399%" y="965" width="10.6352%" height="15" fill="rgb(209,199,19)" fg:x="101307" fg:w="12114"/><text x="89.1899%" y="975.50">std::thread::Bui..</text></g><g><title>std::panic::catch_unwind (12,114 samples, 10.64%)</title><rect x="88.9399%" y="949" width="10.6352%" height="15" fill="rgb(236,224,42)" fg:x="101307" fg:w="12114"/><text x="89.1899%" y="959.50">std::panic::catc..</text></g><g><title>std::panicking::try (12,114 samples, 10.64%)</title><rect x="88.9399%" y="933" width="10.6352%" height="15" fill="rgb(246,226,29)" fg:x="101307" fg:w="12114"/><text x="89.1899%" y="943.50">std::panicking::..</text></g><g><title>std::panicking::try::do_call (12,114 samples, 10.64%)</title><rect x="88.9399%" y="917" width="10.6352%" height="15" fill="rgb(227,223,11)" fg:x="101307" fg:w="12114"/><text x="89.1899%" y="927.50">std::panicking::..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (12,114 samples, 10.64%)</title><rect x="88.9399%" y="901" width="10.6352%" height="15" fill="rgb(219,7,51)" fg:x="101307" fg:w="12114"/><text x="89.1899%" y="911.50">&lt;core::panic::un..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (12,114 samples, 10.64%)</title><rect x="88.9399%" y="885" width="10.6352%" height="15" fill="rgb(245,167,10)" fg:x="101307" fg:w="12114"/><text x="89.1899%" y="895.50">std::thread::Bui..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (12,114 samples, 10.64%)</title><rect x="88.9399%" y="869" width="10.6352%" height="15" fill="rgb(237,224,16)" fg:x="101307" fg:w="12114"/><text x="89.1899%" y="879.50">std::sys_common:..</text></g><g><title>core::ops::function::FnOnce::call_once (12,114 samples, 10.64%)</title><rect x="88.9399%" y="853" width="10.6352%" height="15" fill="rgb(226,132,13)" fg:x="101307" fg:w="12114"/><text x="89.1899%" y="863.50">core::ops::funct..</text></g><g><title>async_global_executor::threading::thread_main_loop (12,114 samples, 10.64%)</title><rect x="88.9399%" y="837" width="10.6352%" height="15" fill="rgb(214,140,3)" fg:x="101307" fg:w="12114"/><text x="89.1899%" y="847.50">async_global_exe..</text></g><g><title>std::panic::catch_unwind (12,108 samples, 10.63%)</title><rect x="88.9452%" y="821" width="10.6299%" height="15" fill="rgb(221,177,4)" fg:x="101313" fg:w="12108"/><text x="89.1952%" y="831.50">std::panic::catc..</text></g><g><title>std::panicking::try (12,108 samples, 10.63%)</title><rect x="88.9452%" y="805" width="10.6299%" height="15" fill="rgb(238,139,3)" fg:x="101313" fg:w="12108"/><text x="89.1952%" y="815.50">std::panicking::..</text></g><g><title>std::panicking::try::do_call (12,108 samples, 10.63%)</title><rect x="88.9452%" y="789" width="10.6299%" height="15" fill="rgb(216,17,39)" fg:x="101313" fg:w="12108"/><text x="89.1952%" y="799.50">std::panicking::..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (12,108 samples, 10.63%)</title><rect x="88.9452%" y="773" width="10.6299%" height="15" fill="rgb(238,120,9)" fg:x="101313" fg:w="12108"/><text x="89.1952%" y="783.50">async_global_exe..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (12,108 samples, 10.63%)</title><rect x="88.9452%" y="757" width="10.6299%" height="15" fill="rgb(244,92,53)" fg:x="101313" fg:w="12108"/><text x="89.1952%" y="767.50">std::thread::loc..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (12,108 samples, 10.63%)</title><rect x="88.9452%" y="741" width="10.6299%" height="15" fill="rgb(224,148,33)" fg:x="101313" fg:w="12108"/><text x="89.1952%" y="751.50">std::thread::loc..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (12,108 samples, 10.63%)</title><rect x="88.9452%" y="725" width="10.6299%" height="15" fill="rgb(243,6,36)" fg:x="101313" fg:w="12108"/><text x="89.1952%" y="735.50">async_global_exe..</text></g><g><title>async_global_executor::reactor::block_on (12,108 samples, 10.63%)</title><rect x="88.9452%" y="709" width="10.6299%" height="15" fill="rgb(230,102,11)" fg:x="101313" fg:w="12108"/><text x="89.1952%" y="719.50">async_global_exe..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (12,108 samples, 10.63%)</title><rect x="88.9452%" y="693" width="10.6299%" height="15" fill="rgb(234,148,36)" fg:x="101313" fg:w="12108"/><text x="89.1952%" y="703.50">async_global_exe..</text></g><g><title>async_io::driver::block_on (12,108 samples, 10.63%)</title><rect x="88.9452%" y="677" width="10.6299%" height="15" fill="rgb(251,153,25)" fg:x="101313" fg:w="12108"/><text x="89.1952%" y="687.50">async_io::driver..</text></g><g><title>std::time::Instant::now (20 samples, 0.02%)</title><rect x="99.5575%" y="661" width="0.0176%" height="15" fill="rgb(215,129,8)" fg:x="113401" fg:w="20"/><text x="99.8075%" y="671.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (20 samples, 0.02%)</title><rect x="99.5575%" y="645" width="0.0176%" height="15" fill="rgb(224,128,35)" fg:x="113401" fg:w="20"/><text x="99.8075%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::now (20 samples, 0.02%)</title><rect x="99.5575%" y="629" width="0.0176%" height="15" fill="rgb(237,56,52)" fg:x="113401" fg:w="20"/><text x="99.8075%" y="639.50"></text></g><g><title>__clock_gettime (15 samples, 0.01%)</title><rect x="99.5619%" y="613" width="0.0132%" height="15" fill="rgb(234,213,19)" fg:x="113406" fg:w="15"/><text x="99.8119%" y="623.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (21 samples, 0.02%)</title><rect x="99.6067%" y="1061" width="0.0184%" height="15" fill="rgb(252,82,23)" fg:x="113457" fg:w="21"/><text x="99.8567%" y="1071.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (14 samples, 0.01%)</title><rect x="99.6251%" y="1061" width="0.0123%" height="15" fill="rgb(254,201,21)" fg:x="113478" fg:w="14"/><text x="99.8751%" y="1071.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (15 samples, 0.01%)</title><rect x="99.6374%" y="1061" width="0.0132%" height="15" fill="rgb(250,186,11)" fg:x="113492" fg:w="15"/><text x="99.8874%" y="1071.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (118 samples, 0.10%)</title><rect x="99.6620%" y="1061" width="0.1036%" height="15" fill="rgb(211,174,5)" fg:x="113520" fg:w="118"/><text x="99.9120%" y="1071.50"></text></g><g><title>async-std/runti (113,592 samples, 99.73%)</title><rect x="0.0448%" y="1077" width="99.7252%" height="15" fill="rgb(214,121,10)" fg:x="51" fg:w="113592"/><text x="0.2948%" y="1087.50">async-std/runti</text></g><g><title>blocking-2 (13 samples, 0.01%)</title><rect x="99.7700%" y="1077" width="0.0114%" height="15" fill="rgb(241,66,2)" fg:x="113643" fg:w="13"/><text x="100.0200%" y="1087.50"></text></g><g><title>clone (13 samples, 0.01%)</title><rect x="99.7700%" y="1061" width="0.0114%" height="15" fill="rgb(220,167,19)" fg:x="113643" fg:w="13"/><text x="100.0200%" y="1071.50"></text></g><g><title>start_thread (13 samples, 0.01%)</title><rect x="99.7700%" y="1045" width="0.0114%" height="15" fill="rgb(231,54,50)" fg:x="113643" fg:w="13"/><text x="100.0200%" y="1055.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (12 samples, 0.01%)</title><rect x="99.7709%" y="1029" width="0.0105%" height="15" fill="rgb(239,217,53)" fg:x="113644" fg:w="12"/><text x="100.0209%" y="1039.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (12 samples, 0.01%)</title><rect x="99.7709%" y="1013" width="0.0105%" height="15" fill="rgb(248,8,0)" fg:x="113644" fg:w="12"/><text x="100.0209%" y="1023.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (12 samples, 0.01%)</title><rect x="99.7709%" y="997" width="0.0105%" height="15" fill="rgb(229,118,37)" fg:x="113644" fg:w="12"/><text x="100.0209%" y="1007.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (12 samples, 0.01%)</title><rect x="99.7709%" y="981" width="0.0105%" height="15" fill="rgb(253,223,43)" fg:x="113644" fg:w="12"/><text x="100.0209%" y="991.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (12 samples, 0.01%)</title><rect x="99.7709%" y="965" width="0.0105%" height="15" fill="rgb(211,77,36)" fg:x="113644" fg:w="12"/><text x="100.0209%" y="975.50"></text></g><g><title>std::panic::catch_unwind (12 samples, 0.01%)</title><rect x="99.7709%" y="949" width="0.0105%" height="15" fill="rgb(219,3,53)" fg:x="113644" fg:w="12"/><text x="100.0209%" y="959.50"></text></g><g><title>std::panicking::try (12 samples, 0.01%)</title><rect x="99.7709%" y="933" width="0.0105%" height="15" fill="rgb(244,45,42)" fg:x="113644" fg:w="12"/><text x="100.0209%" y="943.50"></text></g><g><title>std::panicking::try::do_call (12 samples, 0.01%)</title><rect x="99.7709%" y="917" width="0.0105%" height="15" fill="rgb(225,95,27)" fg:x="113644" fg:w="12"/><text x="100.0209%" y="927.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (12 samples, 0.01%)</title><rect x="99.7709%" y="901" width="0.0105%" height="15" fill="rgb(207,74,8)" fg:x="113644" fg:w="12"/><text x="100.0209%" y="911.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (12 samples, 0.01%)</title><rect x="99.7709%" y="885" width="0.0105%" height="15" fill="rgb(243,63,36)" fg:x="113644" fg:w="12"/><text x="100.0209%" y="895.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (12 samples, 0.01%)</title><rect x="99.7709%" y="869" width="0.0105%" height="15" fill="rgb(211,180,12)" fg:x="113644" fg:w="12"/><text x="100.0209%" y="879.50"></text></g><g><title>blocking::Executor::grow_pool::{{closure}} (12 samples, 0.01%)</title><rect x="99.7709%" y="853" width="0.0105%" height="15" fill="rgb(254,166,49)" fg:x="113644" fg:w="12"/><text x="100.0209%" y="863.50"></text></g><g><title>blocking::Executor::main_loop (12 samples, 0.01%)</title><rect x="99.7709%" y="837" width="0.0105%" height="15" fill="rgb(205,19,0)" fg:x="113644" fg:w="12"/><text x="100.0209%" y="847.50"></text></g><g><title>std::panic::catch_unwind (68 samples, 0.06%)</title><rect x="99.7972%" y="949" width="0.0597%" height="15" fill="rgb(224,172,32)" fg:x="113674" fg:w="68"/><text x="100.0472%" y="959.50"></text></g><g><title>std::panicking::try (68 samples, 0.06%)</title><rect x="99.7972%" y="933" width="0.0597%" height="15" fill="rgb(254,136,30)" fg:x="113674" fg:w="68"/><text x="100.0472%" y="943.50"></text></g><g><title>std::panicking::try::do_call (68 samples, 0.06%)</title><rect x="99.7972%" y="917" width="0.0597%" height="15" fill="rgb(246,19,35)" fg:x="113674" fg:w="68"/><text x="100.0472%" y="927.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (68 samples, 0.06%)</title><rect x="99.7972%" y="901" width="0.0597%" height="15" fill="rgb(219,24,36)" fg:x="113674" fg:w="68"/><text x="100.0472%" y="911.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (68 samples, 0.06%)</title><rect x="99.7972%" y="885" width="0.0597%" height="15" fill="rgb(251,55,1)" fg:x="113674" fg:w="68"/><text x="100.0472%" y="895.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (68 samples, 0.06%)</title><rect x="99.7972%" y="869" width="0.0597%" height="15" fill="rgb(218,117,39)" fg:x="113674" fg:w="68"/><text x="100.0472%" y="879.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (68 samples, 0.06%)</title><rect x="99.7972%" y="853" width="0.0597%" height="15" fill="rgb(248,169,11)" fg:x="113674" fg:w="68"/><text x="100.0472%" y="863.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (68 samples, 0.06%)</title><rect x="99.7972%" y="837" width="0.0597%" height="15" fill="rgb(244,40,44)" fg:x="113674" fg:w="68"/><text x="100.0472%" y="847.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (68 samples, 0.06%)</title><rect x="99.7972%" y="821" width="0.0597%" height="15" fill="rgb(234,62,37)" fg:x="113674" fg:w="68"/><text x="100.0472%" y="831.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (68 samples, 0.06%)</title><rect x="99.7972%" y="805" width="0.0597%" height="15" fill="rgb(207,117,42)" fg:x="113674" fg:w="68"/><text x="100.0472%" y="815.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (67 samples, 0.06%)</title><rect x="99.7981%" y="789" width="0.0588%" height="15" fill="rgb(213,43,2)" fg:x="113675" fg:w="67"/><text x="100.0481%" y="799.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (67 samples, 0.06%)</title><rect x="99.7981%" y="773" width="0.0588%" height="15" fill="rgb(244,202,51)" fg:x="113675" fg:w="67"/><text x="100.0481%" y="783.50"></text></g><g><title>__GI___pthread_mutex_lock (67 samples, 0.06%)</title><rect x="99.7981%" y="757" width="0.0588%" height="15" fill="rgb(253,174,46)" fg:x="113675" fg:w="67"/><text x="100.0481%" y="767.50"></text></g><g><title>__lll_lock_wait (65 samples, 0.06%)</title><rect x="99.7998%" y="741" width="0.0571%" height="15" fill="rgb(251,23,1)" fg:x="113677" fg:w="65"/><text x="100.0498%" y="751.50"></text></g><g><title>tokio-runtime-w (69 samples, 0.06%)</title><rect x="99.7972%" y="1077" width="0.0606%" height="15" fill="rgb(253,26,1)" fg:x="113674" fg:w="69"/><text x="100.0472%" y="1087.50"></text></g><g><title>clone (69 samples, 0.06%)</title><rect x="99.7972%" y="1061" width="0.0606%" height="15" fill="rgb(216,89,31)" fg:x="113674" fg:w="69"/><text x="100.0472%" y="1071.50"></text></g><g><title>start_thread (69 samples, 0.06%)</title><rect x="99.7972%" y="1045" width="0.0606%" height="15" fill="rgb(209,109,5)" fg:x="113674" fg:w="69"/><text x="100.0472%" y="1055.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (69 samples, 0.06%)</title><rect x="99.7972%" y="1029" width="0.0606%" height="15" fill="rgb(229,63,13)" fg:x="113674" fg:w="69"/><text x="100.0472%" y="1039.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (69 samples, 0.06%)</title><rect x="99.7972%" y="1013" width="0.0606%" height="15" fill="rgb(238,137,54)" fg:x="113674" fg:w="69"/><text x="100.0472%" y="1023.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (69 samples, 0.06%)</title><rect x="99.7972%" y="997" width="0.0606%" height="15" fill="rgb(228,1,9)" fg:x="113674" fg:w="69"/><text x="100.0472%" y="1007.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (69 samples, 0.06%)</title><rect x="99.7972%" y="981" width="0.0606%" height="15" fill="rgb(249,120,48)" fg:x="113674" fg:w="69"/><text x="100.0472%" y="991.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (69 samples, 0.06%)</title><rect x="99.7972%" y="965" width="0.0606%" height="15" fill="rgb(209,72,36)" fg:x="113674" fg:w="69"/><text x="100.0472%" y="975.50"></text></g><g><title>all (113,905 samples, 100%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(247,98,49)" fg:x="0" fg:w="113905"/><text x="0.2500%" y="1103.50"></text></g><g><title>tremor-pdk-half (162 samples, 0.14%)</title><rect x="99.8578%" y="1077" width="0.1422%" height="15" fill="rgb(233,75,36)" fg:x="113743" fg:w="162"/><text x="100.1078%" y="1087.50"></text></g><g><title>clone (150 samples, 0.13%)</title><rect x="99.8683%" y="1061" width="0.1317%" height="15" fill="rgb(225,14,24)" fg:x="113755" fg:w="150"/><text x="100.1183%" y="1071.50"></text></g><g><title>start_thread (22 samples, 0.02%)</title><rect x="99.9807%" y="1045" width="0.0193%" height="15" fill="rgb(237,193,20)" fg:x="113883" fg:w="22"/><text x="100.2307%" y="1055.50"></text></g></svg></svg>