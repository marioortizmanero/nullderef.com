<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="966" onload="init(evt)" viewBox="0 0 1200 966" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="966" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="949.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="949.00"> </text><svg id="frames" x="10" width="1180" total_samples="123170"><g><title>async-io (54 samples, 0.04%)</title><rect x="0.0008%" y="901" width="0.0438%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="54"/><text x="0.2508%" y="911.50"></text></g><g><title>clone (53 samples, 0.04%)</title><rect x="0.0016%" y="885" width="0.0430%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="53"/><text x="0.2516%" y="895.50"></text></g><g><title>start_thread (53 samples, 0.04%)</title><rect x="0.0016%" y="869" width="0.0430%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="53"/><text x="0.2516%" y="879.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (53 samples, 0.04%)</title><rect x="0.0016%" y="853" width="0.0430%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="53"/><text x="0.2516%" y="863.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (53 samples, 0.04%)</title><rect x="0.0016%" y="837" width="0.0430%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="53"/><text x="0.2516%" y="847.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (53 samples, 0.04%)</title><rect x="0.0016%" y="821" width="0.0430%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="53"/><text x="0.2516%" y="831.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (53 samples, 0.04%)</title><rect x="0.0016%" y="805" width="0.0430%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="53"/><text x="0.2516%" y="815.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (53 samples, 0.04%)</title><rect x="0.0016%" y="789" width="0.0430%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="53"/><text x="0.2516%" y="799.50"></text></g><g><title>std::panic::catch_unwind (53 samples, 0.04%)</title><rect x="0.0016%" y="773" width="0.0430%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="53"/><text x="0.2516%" y="783.50"></text></g><g><title>std::panicking::try (53 samples, 0.04%)</title><rect x="0.0016%" y="757" width="0.0430%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="53"/><text x="0.2516%" y="767.50"></text></g><g><title>std::panicking::try::do_call (53 samples, 0.04%)</title><rect x="0.0016%" y="741" width="0.0430%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="53"/><text x="0.2516%" y="751.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (53 samples, 0.04%)</title><rect x="0.0016%" y="725" width="0.0430%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="53"/><text x="0.2516%" y="735.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (53 samples, 0.04%)</title><rect x="0.0016%" y="709" width="0.0430%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="53"/><text x="0.2516%" y="719.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (53 samples, 0.04%)</title><rect x="0.0016%" y="693" width="0.0430%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="53"/><text x="0.2516%" y="703.50"></text></g><g><title>async_io::driver::UNPARKER::{{closure}}::{{closure}} (53 samples, 0.04%)</title><rect x="0.0016%" y="677" width="0.0430%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="53"/><text x="0.2516%" y="687.50"></text></g><g><title>async_io::driver::main_loop (53 samples, 0.04%)</title><rect x="0.0016%" y="661" width="0.0430%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="53"/><text x="0.2516%" y="671.50"></text></g><g><title>parking::Parker::park_timeout (40 samples, 0.03%)</title><rect x="0.0122%" y="645" width="0.0325%" height="15" fill="rgb(225,20,46)" fg:x="15" fg:w="40"/><text x="0.2622%" y="655.50"></text></g><g><title>parking::Inner::park (40 samples, 0.03%)</title><rect x="0.0122%" y="629" width="0.0325%" height="15" fill="rgb(210,31,41)" fg:x="15" fg:w="40"/><text x="0.2622%" y="639.50"></text></g><g><title>std::sync::condvar::Condvar::wait_timeout (36 samples, 0.03%)</title><rect x="0.0154%" y="613" width="0.0292%" height="15" fill="rgb(221,200,47)" fg:x="19" fg:w="36"/><text x="0.2654%" y="623.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait_timeout (36 samples, 0.03%)</title><rect x="0.0154%" y="597" width="0.0292%" height="15" fill="rgb(226,26,5)" fg:x="19" fg:w="36"/><text x="0.2654%" y="607.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::wait_timeout (36 samples, 0.03%)</title><rect x="0.0154%" y="581" width="0.0292%" height="15" fill="rgb(249,33,26)" fg:x="19" fg:w="36"/><text x="0.2654%" y="591.50"></text></g><g><title>__pthread_cond_timedwait (32 samples, 0.03%)</title><rect x="0.0187%" y="565" width="0.0260%" height="15" fill="rgb(235,183,28)" fg:x="23" fg:w="32"/><text x="0.2687%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (26 samples, 0.02%)</title><rect x="0.0455%" y="885" width="0.0211%" height="15" fill="rgb(221,5,38)" fg:x="56" fg:w="26"/><text x="0.2955%" y="895.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (13 samples, 0.01%)</title><rect x="0.0666%" y="885" width="0.0106%" height="15" fill="rgb(247,18,42)" fg:x="82" fg:w="13"/><text x="0.3166%" y="895.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (22 samples, 0.02%)</title><rect x="0.0771%" y="885" width="0.0179%" height="15" fill="rgb(241,131,45)" fg:x="95" fg:w="22"/><text x="0.3271%" y="895.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (32 samples, 0.03%)</title><rect x="0.0950%" y="885" width="0.0260%" height="15" fill="rgb(249,31,29)" fg:x="117" fg:w="32"/><text x="0.3450%" y="895.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (39 samples, 0.03%)</title><rect x="0.1299%" y="885" width="0.0317%" height="15" fill="rgb(225,111,53)" fg:x="160" fg:w="39"/><text x="0.3799%" y="895.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (25 samples, 0.02%)</title><rect x="0.2013%" y="853" width="0.0203%" height="15" fill="rgb(238,160,17)" fg:x="248" fg:w="25"/><text x="0.4513%" y="863.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (17 samples, 0.01%)</title><rect x="0.2216%" y="821" width="0.0138%" height="15" fill="rgb(214,148,48)" fg:x="273" fg:w="17"/><text x="0.4716%" y="831.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (17 samples, 0.01%)</title><rect x="0.2216%" y="805" width="0.0138%" height="15" fill="rgb(232,36,49)" fg:x="273" fg:w="17"/><text x="0.4716%" y="815.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (17 samples, 0.01%)</title><rect x="0.2216%" y="789" width="0.0138%" height="15" fill="rgb(209,103,24)" fg:x="273" fg:w="17"/><text x="0.4716%" y="799.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (17 samples, 0.01%)</title><rect x="0.2216%" y="773" width="0.0138%" height="15" fill="rgb(229,88,8)" fg:x="273" fg:w="17"/><text x="0.4716%" y="783.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (17 samples, 0.01%)</title><rect x="0.2216%" y="757" width="0.0138%" height="15" fill="rgb(213,181,19)" fg:x="273" fg:w="17"/><text x="0.4716%" y="767.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (17 samples, 0.01%)</title><rect x="0.2216%" y="741" width="0.0138%" height="15" fill="rgb(254,191,54)" fg:x="273" fg:w="17"/><text x="0.4716%" y="751.50"></text></g><g><title>alloc::alloc::exchange_malloc (17 samples, 0.01%)</title><rect x="0.2216%" y="725" width="0.0138%" height="15" fill="rgb(241,83,37)" fg:x="273" fg:w="17"/><text x="0.4716%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.01%)</title><rect x="0.2216%" y="709" width="0.0138%" height="15" fill="rgb(233,36,39)" fg:x="273" fg:w="17"/><text x="0.4716%" y="719.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.01%)</title><rect x="0.2216%" y="693" width="0.0138%" height="15" fill="rgb(226,3,54)" fg:x="273" fg:w="17"/><text x="0.4716%" y="703.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.01%)</title><rect x="0.2216%" y="677" width="0.0138%" height="15" fill="rgb(245,192,40)" fg:x="273" fg:w="17"/><text x="0.4716%" y="687.50"></text></g><g><title>__rg_alloc (17 samples, 0.01%)</title><rect x="0.2216%" y="661" width="0.0138%" height="15" fill="rgb(238,167,29)" fg:x="273" fg:w="17"/><text x="0.4716%" y="671.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (17 samples, 0.01%)</title><rect x="0.2216%" y="645" width="0.0138%" height="15" fill="rgb(232,182,51)" fg:x="273" fg:w="17"/><text x="0.4716%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (23 samples, 0.02%)</title><rect x="0.2371%" y="805" width="0.0187%" height="15" fill="rgb(231,60,39)" fg:x="292" fg:w="23"/><text x="0.4871%" y="815.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (23 samples, 0.02%)</title><rect x="0.2371%" y="789" width="0.0187%" height="15" fill="rgb(208,69,12)" fg:x="292" fg:w="23"/><text x="0.4871%" y="799.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (129 samples, 0.10%)</title><rect x="0.1713%" y="869" width="0.1047%" height="15" fill="rgb(235,93,37)" fg:x="211" fg:w="129"/><text x="0.4213%" y="879.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (67 samples, 0.05%)</title><rect x="0.2216%" y="853" width="0.0544%" height="15" fill="rgb(213,116,39)" fg:x="273" fg:w="67"/><text x="0.4716%" y="863.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (67 samples, 0.05%)</title><rect x="0.2216%" y="837" width="0.0544%" height="15" fill="rgb(222,207,29)" fg:x="273" fg:w="67"/><text x="0.4716%" y="847.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (50 samples, 0.04%)</title><rect x="0.2354%" y="821" width="0.0406%" height="15" fill="rgb(206,96,30)" fg:x="290" fg:w="50"/><text x="0.4854%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (25 samples, 0.02%)</title><rect x="0.2557%" y="805" width="0.0203%" height="15" fill="rgb(218,138,4)" fg:x="315" fg:w="25"/><text x="0.5057%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (25 samples, 0.02%)</title><rect x="0.2557%" y="789" width="0.0203%" height="15" fill="rgb(250,191,14)" fg:x="315" fg:w="25"/><text x="0.5057%" y="799.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.02%)</title><rect x="0.2557%" y="773" width="0.0203%" height="15" fill="rgb(239,60,40)" fg:x="315" fg:w="25"/><text x="0.5057%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (35 samples, 0.03%)</title><rect x="0.2842%" y="853" width="0.0284%" height="15" fill="rgb(206,27,48)" fg:x="350" fg:w="35"/><text x="0.5342%" y="863.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::size_hint (35 samples, 0.03%)</title><rect x="0.2842%" y="837" width="0.0284%" height="15" fill="rgb(225,35,8)" fg:x="350" fg:w="35"/><text x="0.5342%" y="847.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (35 samples, 0.03%)</title><rect x="0.2842%" y="821" width="0.0284%" height="15" fill="rgb(250,213,24)" fg:x="350" fg:w="35"/><text x="0.5342%" y="831.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (35 samples, 0.03%)</title><rect x="0.2842%" y="805" width="0.0284%" height="15" fill="rgb(247,123,22)" fg:x="350" fg:w="35"/><text x="0.5342%" y="815.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (55 samples, 0.04%)</title><rect x="0.2760%" y="869" width="0.0447%" height="15" fill="rgb(231,138,38)" fg:x="340" fg:w="55"/><text x="0.5260%" y="879.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (42 samples, 0.03%)</title><rect x="0.3321%" y="869" width="0.0341%" height="15" fill="rgb(231,145,46)" fg:x="409" fg:w="42"/><text x="0.5821%" y="879.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (26 samples, 0.02%)</title><rect x="0.5082%" y="853" width="0.0211%" height="15" fill="rgb(251,118,11)" fg:x="626" fg:w="26"/><text x="0.7582%" y="863.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (195 samples, 0.16%)</title><rect x="0.3718%" y="869" width="0.1583%" height="15" fill="rgb(217,147,25)" fg:x="458" fg:w="195"/><text x="0.6218%" y="879.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (54 samples, 0.04%)</title><rect x="0.5302%" y="869" width="0.0438%" height="15" fill="rgb(247,81,37)" fg:x="653" fg:w="54"/><text x="0.7802%" y="879.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (19 samples, 0.02%)</title><rect x="0.6235%" y="853" width="0.0154%" height="15" fill="rgb(209,12,38)" fg:x="768" fg:w="19"/><text x="0.8735%" y="863.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (89 samples, 0.07%)</title><rect x="0.5740%" y="869" width="0.0723%" height="15" fill="rgb(227,1,9)" fg:x="707" fg:w="89"/><text x="0.8240%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="0.9743%" y="837" width="0.0130%" height="15" fill="rgb(248,47,43)" fg:x="1200" fg:w="16"/><text x="1.2243%" y="847.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (16 samples, 0.01%)</title><rect x="0.9743%" y="821" width="0.0130%" height="15" fill="rgb(221,10,30)" fg:x="1200" fg:w="16"/><text x="1.2243%" y="831.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (68 samples, 0.06%)</title><rect x="0.9426%" y="853" width="0.0552%" height="15" fill="rgb(210,229,1)" fg:x="1161" fg:w="68"/><text x="1.1926%" y="863.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (13 samples, 0.01%)</title><rect x="0.9873%" y="837" width="0.0106%" height="15" fill="rgb(222,148,37)" fg:x="1216" fg:w="13"/><text x="1.2373%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (52 samples, 0.04%)</title><rect x="1.0092%" y="821" width="0.0422%" height="15" fill="rgb(234,67,33)" fg:x="1243" fg:w="52"/><text x="1.2592%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (52 samples, 0.04%)</title><rect x="1.0092%" y="805" width="0.0422%" height="15" fill="rgb(247,98,35)" fg:x="1243" fg:w="52"/><text x="1.2592%" y="815.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (52 samples, 0.04%)</title><rect x="1.0092%" y="789" width="0.0422%" height="15" fill="rgb(247,138,52)" fg:x="1243" fg:w="52"/><text x="1.2592%" y="799.50"></text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (75 samples, 0.06%)</title><rect x="1.0092%" y="853" width="0.0609%" height="15" fill="rgb(213,79,30)" fg:x="1243" fg:w="75"/><text x="1.2592%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (75 samples, 0.06%)</title><rect x="1.0092%" y="837" width="0.0609%" height="15" fill="rgb(246,177,23)" fg:x="1243" fg:w="75"/><text x="1.2592%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (23 samples, 0.02%)</title><rect x="1.0514%" y="821" width="0.0187%" height="15" fill="rgb(230,62,27)" fg:x="1295" fg:w="23"/><text x="1.3014%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (23 samples, 0.02%)</title><rect x="1.0514%" y="805" width="0.0187%" height="15" fill="rgb(216,154,8)" fg:x="1295" fg:w="23"/><text x="1.3014%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (23 samples, 0.02%)</title><rect x="1.0514%" y="789" width="0.0187%" height="15" fill="rgb(244,35,45)" fg:x="1295" fg:w="23"/><text x="1.3014%" y="799.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (23 samples, 0.02%)</title><rect x="1.0514%" y="773" width="0.0187%" height="15" fill="rgb(251,115,12)" fg:x="1295" fg:w="23"/><text x="1.3014%" y="783.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (16 samples, 0.01%)</title><rect x="1.0944%" y="837" width="0.0130%" height="15" fill="rgb(240,54,50)" fg:x="1348" fg:w="16"/><text x="1.3444%" y="847.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (53 samples, 0.04%)</title><rect x="1.0701%" y="853" width="0.0430%" height="15" fill="rgb(233,84,52)" fg:x="1318" fg:w="53"/><text x="1.3201%" y="863.50"></text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (13 samples, 0.01%)</title><rect x="1.1131%" y="853" width="0.0106%" height="15" fill="rgb(207,117,47)" fg:x="1371" fg:w="13"/><text x="1.3631%" y="863.50"></text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (26 samples, 0.02%)</title><rect x="1.1237%" y="853" width="0.0211%" height="15" fill="rgb(249,43,39)" fg:x="1384" fg:w="26"/><text x="1.3737%" y="863.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (17 samples, 0.01%)</title><rect x="1.1829%" y="837" width="0.0138%" height="15" fill="rgb(209,38,44)" fg:x="1457" fg:w="17"/><text x="1.4329%" y="847.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (17 samples, 0.01%)</title><rect x="1.1829%" y="821" width="0.0138%" height="15" fill="rgb(236,212,23)" fg:x="1457" fg:w="17"/><text x="1.4329%" y="831.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (17 samples, 0.01%)</title><rect x="1.1829%" y="805" width="0.0138%" height="15" fill="rgb(242,79,21)" fg:x="1457" fg:w="17"/><text x="1.4329%" y="815.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (17 samples, 0.01%)</title><rect x="1.1829%" y="789" width="0.0138%" height="15" fill="rgb(211,96,35)" fg:x="1457" fg:w="17"/><text x="1.4329%" y="799.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (17 samples, 0.01%)</title><rect x="1.1829%" y="773" width="0.0138%" height="15" fill="rgb(253,215,40)" fg:x="1457" fg:w="17"/><text x="1.4329%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (17 samples, 0.01%)</title><rect x="1.1829%" y="757" width="0.0138%" height="15" fill="rgb(211,81,21)" fg:x="1457" fg:w="17"/><text x="1.4329%" y="767.50"></text></g><g><title>alloc::slice::hack::to_vec (17 samples, 0.01%)</title><rect x="1.1829%" y="741" width="0.0138%" height="15" fill="rgb(208,190,38)" fg:x="1457" fg:w="17"/><text x="1.4329%" y="751.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (17 samples, 0.01%)</title><rect x="1.1829%" y="725" width="0.0138%" height="15" fill="rgb(235,213,38)" fg:x="1457" fg:w="17"/><text x="1.4329%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (17 samples, 0.01%)</title><rect x="1.1829%" y="709" width="0.0138%" height="15" fill="rgb(237,122,38)" fg:x="1457" fg:w="17"/><text x="1.4329%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (17 samples, 0.01%)</title><rect x="1.1829%" y="693" width="0.0138%" height="15" fill="rgb(244,218,35)" fg:x="1457" fg:w="17"/><text x="1.4329%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (17 samples, 0.01%)</title><rect x="1.1829%" y="677" width="0.0138%" height="15" fill="rgb(240,68,47)" fg:x="1457" fg:w="17"/><text x="1.4329%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.01%)</title><rect x="1.1829%" y="661" width="0.0138%" height="15" fill="rgb(210,16,53)" fg:x="1457" fg:w="17"/><text x="1.4329%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.01%)</title><rect x="1.1829%" y="645" width="0.0138%" height="15" fill="rgb(235,124,12)" fg:x="1457" fg:w="17"/><text x="1.4329%" y="655.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.01%)</title><rect x="1.1829%" y="629" width="0.0138%" height="15" fill="rgb(224,169,11)" fg:x="1457" fg:w="17"/><text x="1.4329%" y="639.50"></text></g><g><title>__rg_alloc (17 samples, 0.01%)</title><rect x="1.1829%" y="613" width="0.0138%" height="15" fill="rgb(250,166,2)" fg:x="1457" fg:w="17"/><text x="1.4329%" y="623.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (17 samples, 0.01%)</title><rect x="1.1829%" y="597" width="0.0138%" height="15" fill="rgb(242,216,29)" fg:x="1457" fg:w="17"/><text x="1.4329%" y="607.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (688 samples, 0.56%)</title><rect x="0.6463%" y="869" width="0.5586%" height="15" fill="rgb(230,116,27)" fg:x="796" fg:w="688"/><text x="0.8963%" y="879.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (74 samples, 0.06%)</title><rect x="1.1448%" y="853" width="0.0601%" height="15" fill="rgb(228,99,48)" fg:x="1410" fg:w="74"/><text x="1.3948%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (32 samples, 0.03%)</title><rect x="1.2795%" y="853" width="0.0260%" height="15" fill="rgb(253,11,6)" fg:x="1576" fg:w="32"/><text x="1.5295%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (32 samples, 0.03%)</title><rect x="1.2795%" y="837" width="0.0260%" height="15" fill="rgb(247,143,39)" fg:x="1576" fg:w="32"/><text x="1.5295%" y="847.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.03%)</title><rect x="1.2795%" y="821" width="0.0260%" height="15" fill="rgb(236,97,10)" fg:x="1576" fg:w="32"/><text x="1.5295%" y="831.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (32 samples, 0.03%)</title><rect x="1.2795%" y="805" width="0.0260%" height="15" fill="rgb(233,208,19)" fg:x="1576" fg:w="32"/><text x="1.5295%" y="815.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (32 samples, 0.03%)</title><rect x="1.2795%" y="789" width="0.0260%" height="15" fill="rgb(216,164,2)" fg:x="1576" fg:w="32"/><text x="1.5295%" y="799.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (137 samples, 0.11%)</title><rect x="1.2048%" y="869" width="0.1112%" height="15" fill="rgb(220,129,5)" fg:x="1484" fg:w="137"/><text x="1.4548%" y="879.50"></text></g><g><title>event_listener::Inner::lock (13 samples, 0.01%)</title><rect x="1.3055%" y="853" width="0.0106%" height="15" fill="rgb(242,17,10)" fg:x="1608" fg:w="13"/><text x="1.5555%" y="863.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (13 samples, 0.01%)</title><rect x="1.3055%" y="837" width="0.0106%" height="15" fill="rgb(242,107,0)" fg:x="1608" fg:w="13"/><text x="1.5555%" y="847.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (13 samples, 0.01%)</title><rect x="1.3055%" y="821" width="0.0106%" height="15" fill="rgb(251,28,31)" fg:x="1608" fg:w="13"/><text x="1.5555%" y="831.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (13 samples, 0.01%)</title><rect x="1.3055%" y="805" width="0.0106%" height="15" fill="rgb(233,223,10)" fg:x="1608" fg:w="13"/><text x="1.5555%" y="815.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (36 samples, 0.03%)</title><rect x="1.3218%" y="869" width="0.0292%" height="15" fill="rgb(215,21,27)" fg:x="1628" fg:w="36"/><text x="1.5718%" y="879.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (13 samples, 0.01%)</title><rect x="1.3404%" y="853" width="0.0106%" height="15" fill="rgb(232,23,21)" fg:x="1651" fg:w="13"/><text x="1.5904%" y="863.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (36 samples, 0.03%)</title><rect x="1.3510%" y="869" width="0.0292%" height="15" fill="rgb(244,5,23)" fg:x="1664" fg:w="36"/><text x="1.6010%" y="879.50"></text></g><g><title>&lt;tremor_runtime::codec::binary::Binary as tremor_runtime::codec::Codec&gt;::encode (33 samples, 0.03%)</title><rect x="1.3859%" y="869" width="0.0268%" height="15" fill="rgb(226,81,46)" fg:x="1707" fg:w="33"/><text x="1.6359%" y="879.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (13 samples, 0.01%)</title><rect x="1.4127%" y="869" width="0.0106%" height="15" fill="rgb(247,70,30)" fg:x="1740" fg:w="13"/><text x="1.6627%" y="879.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (114 samples, 0.09%)</title><rect x="1.4232%" y="869" width="0.0926%" height="15" fill="rgb(212,68,19)" fg:x="1753" fg:w="114"/><text x="1.6732%" y="879.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (42 samples, 0.03%)</title><rect x="1.4817%" y="853" width="0.0341%" height="15" fill="rgb(240,187,13)" fg:x="1825" fg:w="42"/><text x="1.7317%" y="863.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (23 samples, 0.02%)</title><rect x="1.4971%" y="837" width="0.0187%" height="15" fill="rgb(223,113,26)" fg:x="1844" fg:w="23"/><text x="1.7471%" y="847.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (29 samples, 0.02%)</title><rect x="1.5158%" y="869" width="0.0235%" height="15" fill="rgb(206,192,2)" fg:x="1867" fg:w="29"/><text x="1.7658%" y="879.50"></text></g><g><title>[[vdso]] (14 samples, 0.01%)</title><rect x="1.5393%" y="869" width="0.0114%" height="15" fill="rgb(241,108,4)" fg:x="1896" fg:w="14"/><text x="1.7893%" y="879.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (33 samples, 0.03%)</title><rect x="1.7098%" y="853" width="0.0268%" height="15" fill="rgb(247,173,49)" fg:x="2106" fg:w="33"/><text x="1.9598%" y="863.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (33 samples, 0.03%)</title><rect x="1.7098%" y="837" width="0.0268%" height="15" fill="rgb(224,114,35)" fg:x="2106" fg:w="33"/><text x="1.9598%" y="847.50"></text></g><g><title>[libc-2.31.so] (231 samples, 0.19%)</title><rect x="1.5507%" y="869" width="0.1875%" height="15" fill="rgb(245,159,27)" fg:x="1910" fg:w="231"/><text x="1.8007%" y="879.50"></text></g><g><title>__GI___pthread_mutex_lock (61 samples, 0.05%)</title><rect x="1.7382%" y="869" width="0.0495%" height="15" fill="rgb(245,172,44)" fg:x="2141" fg:w="61"/><text x="1.9882%" y="879.50"></text></g><g><title>__GI___pthread_rwlock_rdlock (20 samples, 0.02%)</title><rect x="1.8000%" y="869" width="0.0162%" height="15" fill="rgb(236,23,11)" fg:x="2217" fg:w="20"/><text x="2.0500%" y="879.50"></text></g><g><title>__GI___pthread_rwlock_unlock (22 samples, 0.02%)</title><rect x="1.8162%" y="869" width="0.0179%" height="15" fill="rgb(205,117,38)" fg:x="2237" fg:w="22"/><text x="2.0662%" y="879.50"></text></g><g><title>__clock_gettime (41 samples, 0.03%)</title><rect x="1.8341%" y="869" width="0.0333%" height="15" fill="rgb(237,72,25)" fg:x="2259" fg:w="41"/><text x="2.0841%" y="879.50"></text></g><g><title>__pthread_cond_wait (28 samples, 0.02%)</title><rect x="1.8795%" y="869" width="0.0227%" height="15" fill="rgb(244,70,9)" fg:x="2315" fg:w="28"/><text x="2.1295%" y="879.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (55 samples, 0.04%)</title><rect x="1.9096%" y="869" width="0.0447%" height="15" fill="rgb(217,125,39)" fg:x="2352" fg:w="55"/><text x="2.1596%" y="879.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (42 samples, 0.03%)</title><rect x="1.9201%" y="853" width="0.0341%" height="15" fill="rgb(235,36,10)" fg:x="2365" fg:w="42"/><text x="2.1701%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (42 samples, 0.03%)</title><rect x="1.9201%" y="837" width="0.0341%" height="15" fill="rgb(251,123,47)" fg:x="2365" fg:w="42"/><text x="2.1701%" y="847.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (42 samples, 0.03%)</title><rect x="1.9201%" y="821" width="0.0341%" height="15" fill="rgb(221,13,13)" fg:x="2365" fg:w="42"/><text x="2.1701%" y="831.50"></text></g><g><title>abi_stable::erased_types::iterator::next (52 samples, 0.04%)</title><rect x="1.9542%" y="869" width="0.0422%" height="15" fill="rgb(238,131,9)" fg:x="2407" fg:w="52"/><text x="2.2042%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (24 samples, 0.02%)</title><rect x="2.0622%" y="853" width="0.0195%" height="15" fill="rgb(211,50,8)" fg:x="2540" fg:w="24"/><text x="2.3122%" y="863.50"></text></g><g><title>alloc::alloc::box_free (24 samples, 0.02%)</title><rect x="2.0622%" y="837" width="0.0195%" height="15" fill="rgb(245,182,24)" fg:x="2540" fg:w="24"/><text x="2.3122%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (24 samples, 0.02%)</title><rect x="2.0622%" y="821" width="0.0195%" height="15" fill="rgb(242,14,37)" fg:x="2540" fg:w="24"/><text x="2.3122%" y="831.50"></text></g><g><title>alloc::alloc::dealloc (24 samples, 0.02%)</title><rect x="2.0622%" y="805" width="0.0195%" height="15" fill="rgb(246,228,12)" fg:x="2540" fg:w="24"/><text x="2.3122%" y="815.50"></text></g><g><title>__rg_dealloc (24 samples, 0.02%)</title><rect x="2.0622%" y="789" width="0.0195%" height="15" fill="rgb(213,55,15)" fg:x="2540" fg:w="24"/><text x="2.3122%" y="799.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (24 samples, 0.02%)</title><rect x="2.0622%" y="773" width="0.0195%" height="15" fill="rgb(209,9,3)" fg:x="2540" fg:w="24"/><text x="2.3122%" y="783.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (99 samples, 0.08%)</title><rect x="2.0062%" y="869" width="0.0804%" height="15" fill="rgb(230,59,30)" fg:x="2471" fg:w="99"/><text x="2.2562%" y="879.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (59 samples, 0.05%)</title><rect x="2.0865%" y="869" width="0.0479%" height="15" fill="rgb(209,121,21)" fg:x="2570" fg:w="59"/><text x="2.3365%" y="879.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (14 samples, 0.01%)</title><rect x="2.1231%" y="853" width="0.0114%" height="15" fill="rgb(220,109,13)" fg:x="2615" fg:w="14"/><text x="2.3731%" y="863.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (14 samples, 0.01%)</title><rect x="2.1231%" y="837" width="0.0114%" height="15" fill="rgb(232,18,1)" fg:x="2615" fg:w="14"/><text x="2.3731%" y="847.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (14 samples, 0.01%)</title><rect x="2.1231%" y="821" width="0.0114%" height="15" fill="rgb(215,41,42)" fg:x="2615" fg:w="14"/><text x="2.3731%" y="831.50"></text></g><g><title>alloc::alloc::exchange_malloc (14 samples, 0.01%)</title><rect x="2.1231%" y="805" width="0.0114%" height="15" fill="rgb(224,123,36)" fg:x="2615" fg:w="14"/><text x="2.3731%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 0.01%)</title><rect x="2.1231%" y="789" width="0.0114%" height="15" fill="rgb(240,125,3)" fg:x="2615" fg:w="14"/><text x="2.3731%" y="799.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.01%)</title><rect x="2.1231%" y="773" width="0.0114%" height="15" fill="rgb(205,98,50)" fg:x="2615" fg:w="14"/><text x="2.3731%" y="783.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.01%)</title><rect x="2.1231%" y="757" width="0.0114%" height="15" fill="rgb(205,185,37)" fg:x="2615" fg:w="14"/><text x="2.3731%" y="767.50"></text></g><g><title>__rg_alloc (14 samples, 0.01%)</title><rect x="2.1231%" y="741" width="0.0114%" height="15" fill="rgb(238,207,15)" fg:x="2615" fg:w="14"/><text x="2.3731%" y="751.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (14 samples, 0.01%)</title><rect x="2.1231%" y="725" width="0.0114%" height="15" fill="rgb(213,199,42)" fg:x="2615" fg:w="14"/><text x="2.3731%" y="735.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (46 samples, 0.04%)</title><rect x="2.1344%" y="869" width="0.0373%" height="15" fill="rgb(235,201,11)" fg:x="2629" fg:w="46"/><text x="2.3844%" y="879.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (16 samples, 0.01%)</title><rect x="2.1588%" y="853" width="0.0130%" height="15" fill="rgb(207,46,11)" fg:x="2659" fg:w="16"/><text x="2.4088%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (16 samples, 0.01%)</title><rect x="2.1588%" y="837" width="0.0130%" height="15" fill="rgb(241,35,35)" fg:x="2659" fg:w="16"/><text x="2.4088%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (16 samples, 0.01%)</title><rect x="2.1588%" y="821" width="0.0130%" height="15" fill="rgb(243,32,47)" fg:x="2659" fg:w="16"/><text x="2.4088%" y="831.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (16 samples, 0.01%)</title><rect x="2.1588%" y="805" width="0.0130%" height="15" fill="rgb(247,202,23)" fg:x="2659" fg:w="16"/><text x="2.4088%" y="815.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (16 samples, 0.01%)</title><rect x="2.1588%" y="789" width="0.0130%" height="15" fill="rgb(219,102,11)" fg:x="2659" fg:w="16"/><text x="2.4088%" y="799.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (16 samples, 0.01%)</title><rect x="2.1588%" y="773" width="0.0130%" height="15" fill="rgb(243,110,44)" fg:x="2659" fg:w="16"/><text x="2.4088%" y="783.50"></text></g><g><title>alloc::alloc::exchange_malloc (16 samples, 0.01%)</title><rect x="2.1588%" y="757" width="0.0130%" height="15" fill="rgb(222,74,54)" fg:x="2659" fg:w="16"/><text x="2.4088%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16 samples, 0.01%)</title><rect x="2.1588%" y="741" width="0.0130%" height="15" fill="rgb(216,99,12)" fg:x="2659" fg:w="16"/><text x="2.4088%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 0.01%)</title><rect x="2.1588%" y="725" width="0.0130%" height="15" fill="rgb(226,22,26)" fg:x="2659" fg:w="16"/><text x="2.4088%" y="735.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.01%)</title><rect x="2.1588%" y="709" width="0.0130%" height="15" fill="rgb(217,163,10)" fg:x="2659" fg:w="16"/><text x="2.4088%" y="719.50"></text></g><g><title>__rg_alloc (16 samples, 0.01%)</title><rect x="2.1588%" y="693" width="0.0130%" height="15" fill="rgb(213,25,53)" fg:x="2659" fg:w="16"/><text x="2.4088%" y="703.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (16 samples, 0.01%)</title><rect x="2.1588%" y="677" width="0.0130%" height="15" fill="rgb(252,105,26)" fg:x="2659" fg:w="16"/><text x="2.4088%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (34 samples, 0.03%)</title><rect x="2.1718%" y="869" width="0.0276%" height="15" fill="rgb(220,39,43)" fg:x="2675" fg:w="34"/><text x="2.4218%" y="879.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val (14 samples, 0.01%)</title><rect x="2.1880%" y="853" width="0.0114%" height="15" fill="rgb(229,68,48)" fg:x="2695" fg:w="14"/><text x="2.4380%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val::{{closure}} (14 samples, 0.01%)</title><rect x="2.1880%" y="837" width="0.0114%" height="15" fill="rgb(252,8,32)" fg:x="2695" fg:w="14"/><text x="2.4380%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val::{{closure}} (14 samples, 0.01%)</title><rect x="2.1880%" y="821" width="0.0114%" height="15" fill="rgb(223,20,43)" fg:x="2695" fg:w="14"/><text x="2.4380%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (24 samples, 0.02%)</title><rect x="2.1994%" y="869" width="0.0195%" height="15" fill="rgb(229,81,49)" fg:x="2709" fg:w="24"/><text x="2.4494%" y="879.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (20 samples, 0.02%)</title><rect x="2.2026%" y="853" width="0.0162%" height="15" fill="rgb(236,28,36)" fg:x="2713" fg:w="20"/><text x="2.4526%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (93 samples, 0.08%)</title><rect x="2.3009%" y="805" width="0.0755%" height="15" fill="rgb(249,185,26)" fg:x="2834" fg:w="93"/><text x="2.5509%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (93 samples, 0.08%)</title><rect x="2.3009%" y="789" width="0.0755%" height="15" fill="rgb(249,174,33)" fg:x="2834" fg:w="93"/><text x="2.5509%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (93 samples, 0.08%)</title><rect x="2.3009%" y="773" width="0.0755%" height="15" fill="rgb(233,201,37)" fg:x="2834" fg:w="93"/><text x="2.5509%" y="783.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (93 samples, 0.08%)</title><rect x="2.3009%" y="757" width="0.0755%" height="15" fill="rgb(221,78,26)" fg:x="2834" fg:w="93"/><text x="2.5509%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (105 samples, 0.09%)</title><rect x="2.3009%" y="821" width="0.0852%" height="15" fill="rgb(250,127,30)" fg:x="2834" fg:w="105"/><text x="2.5509%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (65 samples, 0.05%)</title><rect x="2.3861%" y="805" width="0.0528%" height="15" fill="rgb(230,49,44)" fg:x="2939" fg:w="65"/><text x="2.6361%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (65 samples, 0.05%)</title><rect x="2.3861%" y="789" width="0.0528%" height="15" fill="rgb(229,67,23)" fg:x="2939" fg:w="65"/><text x="2.6361%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (65 samples, 0.05%)</title><rect x="2.3861%" y="773" width="0.0528%" height="15" fill="rgb(249,83,47)" fg:x="2939" fg:w="65"/><text x="2.6361%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (65 samples, 0.05%)</title><rect x="2.3861%" y="757" width="0.0528%" height="15" fill="rgb(215,43,3)" fg:x="2939" fg:w="65"/><text x="2.6361%" y="767.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (65 samples, 0.05%)</title><rect x="2.3861%" y="741" width="0.0528%" height="15" fill="rgb(238,154,13)" fg:x="2939" fg:w="65"/><text x="2.6361%" y="751.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (267 samples, 0.22%)</title><rect x="2.2303%" y="869" width="0.2168%" height="15" fill="rgb(219,56,2)" fg:x="2747" fg:w="267"/><text x="2.4803%" y="879.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (180 samples, 0.15%)</title><rect x="2.3009%" y="853" width="0.1461%" height="15" fill="rgb(233,0,4)" fg:x="2834" fg:w="180"/><text x="2.5509%" y="863.50"></text></g><g><title>core::mem::drop (180 samples, 0.15%)</title><rect x="2.3009%" y="837" width="0.1461%" height="15" fill="rgb(235,30,7)" fg:x="2834" fg:w="180"/><text x="2.5509%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (75 samples, 0.06%)</title><rect x="2.3861%" y="821" width="0.0609%" height="15" fill="rgb(250,79,13)" fg:x="2939" fg:w="75"/><text x="2.6361%" y="831.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (19 samples, 0.02%)</title><rect x="2.4478%" y="869" width="0.0154%" height="15" fill="rgb(211,146,34)" fg:x="3015" fg:w="19"/><text x="2.6978%" y="879.50"></text></g><g><title>async_executor::Ticker::sleep (57 samples, 0.05%)</title><rect x="2.4730%" y="869" width="0.0463%" height="15" fill="rgb(228,22,38)" fg:x="3046" fg:w="57"/><text x="2.7230%" y="879.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (13 samples, 0.01%)</title><rect x="2.5087%" y="853" width="0.0106%" height="15" fill="rgb(235,168,5)" fg:x="3090" fg:w="13"/><text x="2.7587%" y="863.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (13 samples, 0.01%)</title><rect x="2.5087%" y="837" width="0.0106%" height="15" fill="rgb(221,155,16)" fg:x="3090" fg:w="13"/><text x="2.7587%" y="847.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (13 samples, 0.01%)</title><rect x="2.5087%" y="821" width="0.0106%" height="15" fill="rgb(215,215,53)" fg:x="3090" fg:w="13"/><text x="2.7587%" y="831.50"></text></g><g><title>async_executor::Ticker::wake (22 samples, 0.02%)</title><rect x="2.5193%" y="869" width="0.0179%" height="15" fill="rgb(223,4,10)" fg:x="3103" fg:w="22"/><text x="2.7693%" y="879.50"></text></g><g><title>async_executor::steal (363 samples, 0.29%)</title><rect x="2.5371%" y="869" width="0.2947%" height="15" fill="rgb(234,103,6)" fg:x="3125" fg:w="363"/><text x="2.7871%" y="879.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn (14 samples, 0.01%)</title><rect x="2.8319%" y="869" width="0.0114%" height="15" fill="rgb(227,97,0)" fg:x="3488" fg:w="14"/><text x="3.0819%" y="879.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (17 samples, 0.01%)</title><rect x="2.8432%" y="869" width="0.0138%" height="15" fill="rgb(234,150,53)" fg:x="3502" fg:w="17"/><text x="3.0932%" y="879.50"></text></g><g><title>async_io::driver::block_on (16 samples, 0.01%)</title><rect x="2.8570%" y="869" width="0.0130%" height="15" fill="rgb(228,201,54)" fg:x="3519" fg:w="16"/><text x="3.1070%" y="879.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (351 samples, 0.28%)</title><rect x="2.8944%" y="869" width="0.2850%" height="15" fill="rgb(222,22,37)" fg:x="3565" fg:w="351"/><text x="3.1444%" y="879.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (42 samples, 0.03%)</title><rect x="3.1793%" y="869" width="0.0341%" height="15" fill="rgb(237,53,32)" fg:x="3916" fg:w="42"/><text x="3.4293%" y="879.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (48 samples, 0.04%)</title><rect x="3.2134%" y="869" width="0.0390%" height="15" fill="rgb(233,25,53)" fg:x="3958" fg:w="48"/><text x="3.4634%" y="879.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (40 samples, 0.03%)</title><rect x="3.2605%" y="869" width="0.0325%" height="15" fill="rgb(210,40,34)" fg:x="4016" fg:w="40"/><text x="3.5105%" y="879.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (22 samples, 0.02%)</title><rect x="3.2751%" y="853" width="0.0179%" height="15" fill="rgb(241,220,44)" fg:x="4034" fg:w="22"/><text x="3.5251%" y="863.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (22 samples, 0.02%)</title><rect x="3.2751%" y="837" width="0.0179%" height="15" fill="rgb(235,28,35)" fg:x="4034" fg:w="22"/><text x="3.5251%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_channel::Send&lt;tremor_runtime::connectors::sink::SinkMsg&gt;&gt; (23 samples, 0.02%)</title><rect x="3.2946%" y="869" width="0.0187%" height="15" fill="rgb(210,56,17)" fg:x="4058" fg:w="23"/><text x="3.5446%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}}&gt;&gt; (17 samples, 0.01%)</title><rect x="3.3174%" y="869" width="0.0138%" height="15" fill="rgb(224,130,29)" fg:x="4086" fg:w="17"/><text x="3.5674%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::route_events::{{closure}}&gt;&gt; (15 samples, 0.01%)</title><rect x="3.3328%" y="869" width="0.0122%" height="15" fill="rgb(235,212,8)" fg:x="4105" fg:w="15"/><text x="3.5828%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::OutputTarget::send_event::{{closure}}&gt;&gt; (23 samples, 0.02%)</title><rect x="3.3450%" y="869" width="0.0187%" height="15" fill="rgb(223,33,50)" fg:x="4120" fg:w="23"/><text x="3.5950%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt;&gt; (43 samples, 0.03%)</title><rect x="3.3636%" y="869" width="0.0349%" height="15" fill="rgb(219,149,13)" fg:x="4143" fg:w="43"/><text x="3.6136%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt; (22 samples, 0.02%)</title><rect x="3.3807%" y="853" width="0.0179%" height="15" fill="rgb(250,156,29)" fg:x="4164" fg:w="22"/><text x="3.6307%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::send_events::{{closure}}&gt;&gt; (42 samples, 0.03%)</title><rect x="3.3986%" y="869" width="0.0341%" height="15" fill="rgb(216,193,19)" fg:x="4186" fg:w="42"/><text x="3.6486%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (33 samples, 0.03%)</title><rect x="3.4643%" y="821" width="0.0268%" height="15" fill="rgb(216,135,14)" fg:x="4267" fg:w="33"/><text x="3.7143%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (33 samples, 0.03%)</title><rect x="3.4643%" y="805" width="0.0268%" height="15" fill="rgb(241,47,5)" fg:x="4267" fg:w="33"/><text x="3.7143%" y="815.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (33 samples, 0.03%)</title><rect x="3.4643%" y="789" width="0.0268%" height="15" fill="rgb(233,42,35)" fg:x="4267" fg:w="33"/><text x="3.7143%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (45 samples, 0.04%)</title><rect x="3.4643%" y="853" width="0.0365%" height="15" fill="rgb(231,13,6)" fg:x="4267" fg:w="45"/><text x="3.7143%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (45 samples, 0.04%)</title><rect x="3.4643%" y="837" width="0.0365%" height="15" fill="rgb(207,181,40)" fg:x="4267" fg:w="45"/><text x="3.7143%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (104 samples, 0.08%)</title><rect x="3.4481%" y="869" width="0.0844%" height="15" fill="rgb(254,173,49)" fg:x="4247" fg:w="104"/><text x="3.6981%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (27 samples, 0.02%)</title><rect x="3.5106%" y="853" width="0.0219%" height="15" fill="rgb(221,1,38)" fg:x="4324" fg:w="27"/><text x="3.7606%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="3.5211%" y="837" width="0.0114%" height="15" fill="rgb(206,124,46)" fg:x="4337" fg:w="14"/><text x="3.7711%" y="847.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (14 samples, 0.01%)</title><rect x="3.5211%" y="821" width="0.0114%" height="15" fill="rgb(249,21,11)" fg:x="4337" fg:w="14"/><text x="3.7711%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (22 samples, 0.02%)</title><rect x="3.5325%" y="869" width="0.0179%" height="15" fill="rgb(222,201,40)" fg:x="4351" fg:w="22"/><text x="3.7825%" y="879.50"></text></g><g><title>event_listener::Event::notify (115 samples, 0.09%)</title><rect x="3.5593%" y="869" width="0.0934%" height="15" fill="rgb(235,61,29)" fg:x="4384" fg:w="115"/><text x="3.8093%" y="879.50"></text></g><g><title>event_listener::full_fence (57 samples, 0.05%)</title><rect x="3.6064%" y="853" width="0.0463%" height="15" fill="rgb(219,207,3)" fg:x="4442" fg:w="57"/><text x="3.8564%" y="863.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (44 samples, 0.04%)</title><rect x="3.6584%" y="869" width="0.0357%" height="15" fill="rgb(222,56,46)" fg:x="4506" fg:w="44"/><text x="3.9084%" y="879.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get_mut (17 samples, 0.01%)</title><rect x="3.6803%" y="853" width="0.0138%" height="15" fill="rgb(239,76,54)" fg:x="4533" fg:w="17"/><text x="3.9303%" y="863.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (17 samples, 0.01%)</title><rect x="3.6803%" y="837" width="0.0138%" height="15" fill="rgb(231,124,27)" fg:x="4533" fg:w="17"/><text x="3.9303%" y="847.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (17 samples, 0.01%)</title><rect x="3.6803%" y="821" width="0.0138%" height="15" fill="rgb(249,195,6)" fg:x="4533" fg:w="17"/><text x="3.9303%" y="831.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (17 samples, 0.01%)</title><rect x="3.6803%" y="805" width="0.0138%" height="15" fill="rgb(237,174,47)" fg:x="4533" fg:w="17"/><text x="3.9303%" y="815.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (17 samples, 0.01%)</title><rect x="3.6803%" y="789" width="0.0138%" height="15" fill="rgb(206,201,31)" fg:x="4533" fg:w="17"/><text x="3.9303%" y="799.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (17 samples, 0.01%)</title><rect x="3.6803%" y="773" width="0.0138%" height="15" fill="rgb(231,57,52)" fg:x="4533" fg:w="17"/><text x="3.9303%" y="783.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (17 samples, 0.01%)</title><rect x="3.6803%" y="757" width="0.0138%" height="15" fill="rgb(248,177,22)" fg:x="4533" fg:w="17"/><text x="3.9303%" y="767.50"></text></g><g><title>hashbrown::raw::inner::RawIter&lt;T&gt;::drop_elements (27 samples, 0.02%)</title><rect x="3.6941%" y="869" width="0.0219%" height="15" fill="rgb(215,211,37)" fg:x="4550" fg:w="27"/><text x="3.9441%" y="879.50"></text></g><g><title>parking::Unparker::unpark (20 samples, 0.02%)</title><rect x="3.7160%" y="869" width="0.0162%" height="15" fill="rgb(241,128,51)" fg:x="4577" fg:w="20"/><text x="3.9660%" y="879.50"></text></g><g><title>sn_rust_alloc (74 samples, 0.06%)</title><rect x="3.7404%" y="869" width="0.0601%" height="15" fill="rgb(227,165,31)" fg:x="4607" fg:w="74"/><text x="3.9904%" y="879.50"></text></g><g><title>sn_rust_dealloc (23 samples, 0.02%)</title><rect x="3.8004%" y="869" width="0.0187%" height="15" fill="rgb(228,167,24)" fg:x="4681" fg:w="23"/><text x="4.0504%" y="879.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (21 samples, 0.02%)</title><rect x="3.8272%" y="869" width="0.0170%" height="15" fill="rgb(228,143,12)" fg:x="4714" fg:w="21"/><text x="4.0772%" y="879.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (38 samples, 0.03%)</title><rect x="3.8443%" y="869" width="0.0309%" height="15" fill="rgb(249,149,8)" fg:x="4735" fg:w="38"/><text x="4.0943%" y="879.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (72 samples, 0.06%)</title><rect x="3.8751%" y="869" width="0.0585%" height="15" fill="rgb(243,35,44)" fg:x="4773" fg:w="72"/><text x="4.1251%" y="879.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (52 samples, 0.04%)</title><rect x="3.8914%" y="853" width="0.0422%" height="15" fill="rgb(246,89,9)" fg:x="4793" fg:w="52"/><text x="4.1414%" y="863.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (36 samples, 0.03%)</title><rect x="3.9044%" y="837" width="0.0292%" height="15" fill="rgb(233,213,13)" fg:x="4809" fg:w="36"/><text x="4.1544%" y="847.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (36 samples, 0.03%)</title><rect x="3.9044%" y="821" width="0.0292%" height="15" fill="rgb(233,141,41)" fg:x="4809" fg:w="36"/><text x="4.1544%" y="831.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (36 samples, 0.03%)</title><rect x="3.9044%" y="805" width="0.0292%" height="15" fill="rgb(239,167,4)" fg:x="4809" fg:w="36"/><text x="4.1544%" y="815.50"></text></g><g><title>[tremor-pdk-hashbrown] (30 samples, 0.02%)</title><rect x="3.9092%" y="789" width="0.0244%" height="15" fill="rgb(209,217,16)" fg:x="4815" fg:w="30"/><text x="4.1592%" y="799.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (30 samples, 0.02%)</title><rect x="3.9092%" y="773" width="0.0244%" height="15" fill="rgb(219,88,35)" fg:x="4815" fg:w="30"/><text x="4.1592%" y="783.50"></text></g><g><title>tremor_common::time::nanotime (56 samples, 0.05%)</title><rect x="3.9336%" y="869" width="0.0455%" height="15" fill="rgb(220,193,23)" fg:x="4845" fg:w="56"/><text x="4.1836%" y="879.50"></text></g><g><title>std::time::SystemTime::now (56 samples, 0.05%)</title><rect x="3.9336%" y="853" width="0.0455%" height="15" fill="rgb(230,90,52)" fg:x="4845" fg:w="56"/><text x="4.1836%" y="863.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (56 samples, 0.05%)</title><rect x="3.9336%" y="837" width="0.0455%" height="15" fill="rgb(252,106,19)" fg:x="4845" fg:w="56"/><text x="4.1836%" y="847.50"></text></g><g><title>std::sys::unix::time::inner::now (56 samples, 0.05%)</title><rect x="3.9336%" y="821" width="0.0455%" height="15" fill="rgb(206,74,20)" fg:x="4845" fg:w="56"/><text x="4.1836%" y="831.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (64 samples, 0.05%)</title><rect x="3.9791%" y="869" width="0.0520%" height="15" fill="rgb(230,138,44)" fg:x="4901" fg:w="64"/><text x="4.2291%" y="879.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event (28 samples, 0.02%)</title><rect x="4.0083%" y="853" width="0.0227%" height="15" fill="rgb(235,182,43)" fg:x="4937" fg:w="28"/><text x="4.2583%" y="863.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (28 samples, 0.02%)</title><rect x="4.0083%" y="837" width="0.0227%" height="15" fill="rgb(242,16,51)" fg:x="4937" fg:w="28"/><text x="4.2583%" y="847.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (28 samples, 0.02%)</title><rect x="4.0083%" y="821" width="0.0227%" height="15" fill="rgb(248,9,4)" fg:x="4937" fg:w="28"/><text x="4.2583%" y="831.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (28 samples, 0.02%)</title><rect x="4.0083%" y="805" width="0.0227%" height="15" fill="rgb(210,31,22)" fg:x="4937" fg:w="28"/><text x="4.2583%" y="815.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (19 samples, 0.02%)</title><rect x="4.0156%" y="789" width="0.0154%" height="15" fill="rgb(239,54,39)" fg:x="4946" fg:w="19"/><text x="4.2656%" y="799.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::pull_data (19 samples, 0.02%)</title><rect x="4.0310%" y="869" width="0.0154%" height="15" fill="rgb(230,99,41)" fg:x="4965" fg:w="19"/><text x="4.2810%" y="879.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (17 samples, 0.01%)</title><rect x="4.0773%" y="853" width="0.0138%" height="15" fill="rgb(253,106,12)" fg:x="5022" fg:w="17"/><text x="4.3273%" y="863.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (17 samples, 0.01%)</title><rect x="4.0773%" y="837" width="0.0138%" height="15" fill="rgb(213,46,41)" fg:x="5022" fg:w="17"/><text x="4.3273%" y="847.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (17 samples, 0.01%)</title><rect x="4.0773%" y="821" width="0.0138%" height="15" fill="rgb(215,133,35)" fg:x="5022" fg:w="17"/><text x="4.3273%" y="831.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (17 samples, 0.01%)</title><rect x="4.0773%" y="805" width="0.0138%" height="15" fill="rgb(213,28,5)" fg:x="5022" fg:w="17"/><text x="4.3273%" y="815.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (17 samples, 0.01%)</title><rect x="4.0773%" y="789" width="0.0138%" height="15" fill="rgb(215,77,49)" fg:x="5022" fg:w="17"/><text x="4.3273%" y="799.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (17 samples, 0.01%)</title><rect x="4.0773%" y="773" width="0.0138%" height="15" fill="rgb(248,100,22)" fg:x="5022" fg:w="17"/><text x="4.3273%" y="783.50"></text></g><g><title>alloc::slice::hack::to_vec (17 samples, 0.01%)</title><rect x="4.0773%" y="757" width="0.0138%" height="15" fill="rgb(208,67,9)" fg:x="5022" fg:w="17"/><text x="4.3273%" y="767.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (17 samples, 0.01%)</title><rect x="4.0773%" y="741" width="0.0138%" height="15" fill="rgb(219,133,21)" fg:x="5022" fg:w="17"/><text x="4.3273%" y="751.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (62 samples, 0.05%)</title><rect x="4.0546%" y="869" width="0.0503%" height="15" fill="rgb(246,46,29)" fg:x="4994" fg:w="62"/><text x="4.3046%" y="879.50"></text></g><g><title>tremor_runtime::connectors::utils::metrics::SourceReporter::periodic_flush (22 samples, 0.02%)</title><rect x="4.1049%" y="869" width="0.0179%" height="15" fill="rgb(246,185,52)" fg:x="5056" fg:w="22"/><text x="4.3549%" y="879.50"></text></g><g><title>tremor_runtime::pipeline::maybe_send (22 samples, 0.02%)</title><rect x="4.1228%" y="869" width="0.0179%" height="15" fill="rgb(252,136,11)" fg:x="5078" fg:w="22"/><text x="4.3728%" y="879.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (17 samples, 0.01%)</title><rect x="4.1422%" y="869" width="0.0138%" height="15" fill="rgb(219,138,53)" fg:x="5102" fg:w="17"/><text x="4.3922%" y="879.50"></text></g><g><title>tremor_script::srs::EventPayload::try_new (24 samples, 0.02%)</title><rect x="4.1560%" y="869" width="0.0195%" height="15" fill="rgb(211,51,23)" fg:x="5119" fg:w="24"/><text x="4.4060%" y="879.50"></text></g><g><title>[anon] (4,949 samples, 4.02%)</title><rect x="0.1713%" y="885" width="4.0180%" height="15" fill="rgb(247,221,28)" fg:x="211" fg:w="4949"/><text x="0.4213%" y="895.50">[ano..</text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (19 samples, 0.02%)</title><rect x="4.2819%" y="837" width="0.0154%" height="15" fill="rgb(251,222,45)" fg:x="5274" fg:w="19"/><text x="4.5319%" y="847.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (15 samples, 0.01%)</title><rect x="4.2851%" y="821" width="0.0122%" height="15" fill="rgb(217,162,53)" fg:x="5278" fg:w="15"/><text x="4.5351%" y="831.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (15 samples, 0.01%)</title><rect x="4.2851%" y="805" width="0.0122%" height="15" fill="rgb(229,93,14)" fg:x="5278" fg:w="15"/><text x="4.5351%" y="815.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (15 samples, 0.01%)</title><rect x="4.2851%" y="789" width="0.0122%" height="15" fill="rgb(209,67,49)" fg:x="5278" fg:w="15"/><text x="4.5351%" y="799.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (15 samples, 0.01%)</title><rect x="4.2851%" y="773" width="0.0122%" height="15" fill="rgb(213,87,29)" fg:x="5278" fg:w="15"/><text x="4.5351%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (15 samples, 0.01%)</title><rect x="4.2851%" y="757" width="0.0122%" height="15" fill="rgb(205,151,52)" fg:x="5278" fg:w="15"/><text x="4.5351%" y="767.50"></text></g><g><title>alloc::slice::hack::to_vec (15 samples, 0.01%)</title><rect x="4.2851%" y="741" width="0.0122%" height="15" fill="rgb(253,215,39)" fg:x="5278" fg:w="15"/><text x="4.5351%" y="751.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (15 samples, 0.01%)</title><rect x="4.2851%" y="725" width="0.0122%" height="15" fill="rgb(221,220,41)" fg:x="5278" fg:w="15"/><text x="4.5351%" y="735.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (50 samples, 0.04%)</title><rect x="4.2730%" y="869" width="0.0406%" height="15" fill="rgb(218,133,21)" fg:x="5263" fg:w="50"/><text x="4.5230%" y="879.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (39 samples, 0.03%)</title><rect x="4.2819%" y="853" width="0.0317%" height="15" fill="rgb(221,193,43)" fg:x="5274" fg:w="39"/><text x="4.5319%" y="863.50"></text></g><g><title>tremor_runtime::connectors::impls::bench::Acc::next (15 samples, 0.01%)</title><rect x="4.3014%" y="837" width="0.0122%" height="15" fill="rgb(240,128,52)" fg:x="5298" fg:w="15"/><text x="4.5514%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (15 samples, 0.01%)</title><rect x="4.3014%" y="821" width="0.0122%" height="15" fill="rgb(253,114,12)" fg:x="5298" fg:w="15"/><text x="4.5514%" y="831.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (15 samples, 0.01%)</title><rect x="4.3014%" y="805" width="0.0122%" height="15" fill="rgb(215,223,47)" fg:x="5298" fg:w="15"/><text x="4.5514%" y="815.50"></text></g><g><title>alloc::slice::hack::to_vec (15 samples, 0.01%)</title><rect x="4.3014%" y="789" width="0.0122%" height="15" fill="rgb(248,225,23)" fg:x="5298" fg:w="15"/><text x="4.5514%" y="799.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (15 samples, 0.01%)</title><rect x="4.3014%" y="773" width="0.0122%" height="15" fill="rgb(250,108,0)" fg:x="5298" fg:w="15"/><text x="4.5514%" y="783.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (16 samples, 0.01%)</title><rect x="4.3136%" y="869" width="0.0130%" height="15" fill="rgb(228,208,7)" fg:x="5313" fg:w="16"/><text x="4.5636%" y="879.50"></text></g><g><title>__clock_gettime (16 samples, 0.01%)</title><rect x="4.3355%" y="869" width="0.0130%" height="15" fill="rgb(244,45,10)" fg:x="5340" fg:w="16"/><text x="4.5855%" y="879.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (26 samples, 0.02%)</title><rect x="4.3485%" y="869" width="0.0211%" height="15" fill="rgb(207,125,25)" fg:x="5356" fg:w="26"/><text x="4.5985%" y="879.50"></text></g><g><title>event_listener::Event::listen (18 samples, 0.01%)</title><rect x="4.3777%" y="869" width="0.0146%" height="15" fill="rgb(210,195,18)" fg:x="5392" fg:w="18"/><text x="4.6277%" y="879.50"></text></g><g><title>event_listener::Event::inner (17 samples, 0.01%)</title><rect x="4.3785%" y="853" width="0.0138%" height="15" fill="rgb(249,80,12)" fg:x="5393" fg:w="17"/><text x="4.6285%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (17 samples, 0.01%)</title><rect x="4.3785%" y="837" width="0.0138%" height="15" fill="rgb(221,65,9)" fg:x="5393" fg:w="17"/><text x="4.6285%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_load (17 samples, 0.01%)</title><rect x="4.3785%" y="821" width="0.0138%" height="15" fill="rgb(235,49,36)" fg:x="5393" fg:w="17"/><text x="4.6285%" y="831.50"></text></g><g><title>event_listener::Event::notify (18 samples, 0.01%)</title><rect x="4.3923%" y="869" width="0.0146%" height="15" fill="rgb(225,32,20)" fg:x="5410" fg:w="18"/><text x="4.6423%" y="879.50"></text></g><g><title>event_listener::full_fence (18 samples, 0.01%)</title><rect x="4.3923%" y="853" width="0.0146%" height="15" fill="rgb(215,141,46)" fg:x="5410" fg:w="18"/><text x="4.6423%" y="863.50"></text></g><g><title>[libc-2.31.so] (270 samples, 0.22%)</title><rect x="4.1893%" y="885" width="0.2192%" height="15" fill="rgb(250,160,47)" fg:x="5160" fg:w="270"/><text x="4.4393%" y="895.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (39 samples, 0.03%)</title><rect x="4.4102%" y="869" width="0.0317%" height="15" fill="rgb(216,222,40)" fg:x="5432" fg:w="39"/><text x="4.6602%" y="879.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (45 samples, 0.04%)</title><rect x="4.4483%" y="869" width="0.0365%" height="15" fill="rgb(234,217,39)" fg:x="5479" fg:w="45"/><text x="4.6983%" y="879.50"></text></g><g><title>hashbrown::raw::inner::RawIter&lt;T&gt;::drop_elements (44 samples, 0.04%)</title><rect x="4.5011%" y="869" width="0.0357%" height="15" fill="rgb(207,178,40)" fg:x="5544" fg:w="44"/><text x="4.7511%" y="879.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (19 samples, 0.02%)</title><rect x="4.5368%" y="869" width="0.0154%" height="15" fill="rgb(221,136,13)" fg:x="5588" fg:w="19"/><text x="4.7868%" y="879.50"></text></g><g><title>[tremor-pdk-hashbrown] (179 samples, 0.15%)</title><rect x="4.4085%" y="885" width="0.1453%" height="15" fill="rgb(249,199,10)" fg:x="5430" fg:w="179"/><text x="4.6585%" y="895.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (90 samples, 0.07%)</title><rect x="4.5717%" y="869" width="0.0731%" height="15" fill="rgb(249,222,13)" fg:x="5631" fg:w="90"/><text x="4.8217%" y="879.50"></text></g><g><title>[libc-2.31.so] (699 samples, 0.57%)</title><rect x="4.8242%" y="645" width="0.5675%" height="15" fill="rgb(244,185,38)" fg:x="5942" fg:w="699"/><text x="5.0742%" y="655.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (755 samples, 0.61%)</title><rect x="4.7869%" y="661" width="0.6130%" height="15" fill="rgb(236,202,9)" fg:x="5896" fg:w="755"/><text x="5.0369%" y="671.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (1,187 samples, 0.96%)</title><rect x="4.7309%" y="677" width="0.9637%" height="15" fill="rgb(250,229,37)" fg:x="5827" fg:w="1187"/><text x="4.9809%" y="687.50"></text></g><g><title>[libc-2.31.so] (363 samples, 0.29%)</title><rect x="5.3999%" y="661" width="0.2947%" height="15" fill="rgb(206,174,23)" fg:x="6651" fg:w="363"/><text x="5.6499%" y="671.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (1,225 samples, 0.99%)</title><rect x="4.7098%" y="725" width="0.9946%" height="15" fill="rgb(211,33,43)" fg:x="5801" fg:w="1225"/><text x="4.9598%" y="735.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,225 samples, 0.99%)</title><rect x="4.7098%" y="709" width="0.9946%" height="15" fill="rgb(245,58,50)" fg:x="5801" fg:w="1225"/><text x="4.9598%" y="719.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (1,225 samples, 0.99%)</title><rect x="4.7098%" y="693" width="0.9946%" height="15" fill="rgb(244,68,36)" fg:x="5801" fg:w="1225"/><text x="4.9598%" y="703.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (46 samples, 0.04%)</title><rect x="5.7124%" y="517" width="0.0373%" height="15" fill="rgb(232,229,15)" fg:x="7036" fg:w="46"/><text x="5.9624%" y="527.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (46 samples, 0.04%)</title><rect x="5.7124%" y="501" width="0.0373%" height="15" fill="rgb(254,30,23)" fg:x="7036" fg:w="46"/><text x="5.9624%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (46 samples, 0.04%)</title><rect x="5.7124%" y="485" width="0.0373%" height="15" fill="rgb(235,160,14)" fg:x="7036" fg:w="46"/><text x="5.9624%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (46 samples, 0.04%)</title><rect x="5.7124%" y="469" width="0.0373%" height="15" fill="rgb(212,155,44)" fg:x="7036" fg:w="46"/><text x="5.9624%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (46 samples, 0.04%)</title><rect x="5.7124%" y="453" width="0.0373%" height="15" fill="rgb(226,2,50)" fg:x="7036" fg:w="46"/><text x="5.9624%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (46 samples, 0.04%)</title><rect x="5.7124%" y="437" width="0.0373%" height="15" fill="rgb(234,177,6)" fg:x="7036" fg:w="46"/><text x="5.9624%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (46 samples, 0.04%)</title><rect x="5.7124%" y="421" width="0.0373%" height="15" fill="rgb(217,24,9)" fg:x="7036" fg:w="46"/><text x="5.9624%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (46 samples, 0.04%)</title><rect x="5.7124%" y="405" width="0.0373%" height="15" fill="rgb(220,13,46)" fg:x="7036" fg:w="46"/><text x="5.9624%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (46 samples, 0.04%)</title><rect x="5.7124%" y="389" width="0.0373%" height="15" fill="rgb(239,221,27)" fg:x="7036" fg:w="46"/><text x="5.9624%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (46 samples, 0.04%)</title><rect x="5.7124%" y="373" width="0.0373%" height="15" fill="rgb(222,198,25)" fg:x="7036" fg:w="46"/><text x="5.9624%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (46 samples, 0.04%)</title><rect x="5.7124%" y="357" width="0.0373%" height="15" fill="rgb(211,99,13)" fg:x="7036" fg:w="46"/><text x="5.9624%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (46 samples, 0.04%)</title><rect x="5.7124%" y="341" width="0.0373%" height="15" fill="rgb(232,111,31)" fg:x="7036" fg:w="46"/><text x="5.9624%" y="351.50"></text></g><g><title>alloc::alloc::alloc (46 samples, 0.04%)</title><rect x="5.7124%" y="325" width="0.0373%" height="15" fill="rgb(245,82,37)" fg:x="7036" fg:w="46"/><text x="5.9624%" y="335.50"></text></g><g><title>__rg_alloc (46 samples, 0.04%)</title><rect x="5.7124%" y="309" width="0.0373%" height="15" fill="rgb(227,149,46)" fg:x="7036" fg:w="46"/><text x="5.9624%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (46 samples, 0.04%)</title><rect x="5.7124%" y="293" width="0.0373%" height="15" fill="rgb(218,36,50)" fg:x="7036" fg:w="46"/><text x="5.9624%" y="303.50"></text></g><g><title>sn_rust_alloc (46 samples, 0.04%)</title><rect x="5.7124%" y="277" width="0.0373%" height="15" fill="rgb(226,80,48)" fg:x="7036" fg:w="46"/><text x="5.9624%" y="287.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (46 samples, 0.04%)</title><rect x="5.7124%" y="261" width="0.0373%" height="15" fill="rgb(238,224,15)" fg:x="7036" fg:w="46"/><text x="5.9624%" y="271.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (88 samples, 0.07%)</title><rect x="5.7043%" y="709" width="0.0714%" height="15" fill="rgb(241,136,10)" fg:x="7026" fg:w="88"/><text x="5.9543%" y="719.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (88 samples, 0.07%)</title><rect x="5.7043%" y="693" width="0.0714%" height="15" fill="rgb(208,32,45)" fg:x="7026" fg:w="88"/><text x="5.9543%" y="703.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (88 samples, 0.07%)</title><rect x="5.7043%" y="677" width="0.0714%" height="15" fill="rgb(207,135,9)" fg:x="7026" fg:w="88"/><text x="5.9543%" y="687.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (88 samples, 0.07%)</title><rect x="5.7043%" y="661" width="0.0714%" height="15" fill="rgb(206,86,44)" fg:x="7026" fg:w="88"/><text x="5.9543%" y="671.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (78 samples, 0.06%)</title><rect x="5.7124%" y="645" width="0.0633%" height="15" fill="rgb(245,177,15)" fg:x="7036" fg:w="78"/><text x="5.9624%" y="655.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (78 samples, 0.06%)</title><rect x="5.7124%" y="629" width="0.0633%" height="15" fill="rgb(206,64,50)" fg:x="7036" fg:w="78"/><text x="5.9624%" y="639.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (78 samples, 0.06%)</title><rect x="5.7124%" y="613" width="0.0633%" height="15" fill="rgb(234,36,40)" fg:x="7036" fg:w="78"/><text x="5.9624%" y="623.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (78 samples, 0.06%)</title><rect x="5.7124%" y="597" width="0.0633%" height="15" fill="rgb(213,64,8)" fg:x="7036" fg:w="78"/><text x="5.9624%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (78 samples, 0.06%)</title><rect x="5.7124%" y="581" width="0.0633%" height="15" fill="rgb(210,75,36)" fg:x="7036" fg:w="78"/><text x="5.9624%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (78 samples, 0.06%)</title><rect x="5.7124%" y="565" width="0.0633%" height="15" fill="rgb(229,88,21)" fg:x="7036" fg:w="78"/><text x="5.9624%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (78 samples, 0.06%)</title><rect x="5.7124%" y="549" width="0.0633%" height="15" fill="rgb(252,204,47)" fg:x="7036" fg:w="78"/><text x="5.9624%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (78 samples, 0.06%)</title><rect x="5.7124%" y="533" width="0.0633%" height="15" fill="rgb(208,77,27)" fg:x="7036" fg:w="78"/><text x="5.9624%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (32 samples, 0.03%)</title><rect x="5.7498%" y="517" width="0.0260%" height="15" fill="rgb(221,76,26)" fg:x="7082" fg:w="32"/><text x="5.9998%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (32 samples, 0.03%)</title><rect x="5.7498%" y="501" width="0.0260%" height="15" fill="rgb(225,139,18)" fg:x="7082" fg:w="32"/><text x="5.9998%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (32 samples, 0.03%)</title><rect x="5.7498%" y="485" width="0.0260%" height="15" fill="rgb(230,137,11)" fg:x="7082" fg:w="32"/><text x="5.9998%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (32 samples, 0.03%)</title><rect x="5.7498%" y="469" width="0.0260%" height="15" fill="rgb(212,28,1)" fg:x="7082" fg:w="32"/><text x="5.9998%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (32 samples, 0.03%)</title><rect x="5.7498%" y="453" width="0.0260%" height="15" fill="rgb(248,164,17)" fg:x="7082" fg:w="32"/><text x="5.9998%" y="463.50"></text></g><g><title>alloc::alloc::alloc (32 samples, 0.03%)</title><rect x="5.7498%" y="437" width="0.0260%" height="15" fill="rgb(222,171,42)" fg:x="7082" fg:w="32"/><text x="5.9998%" y="447.50"></text></g><g><title>__rg_alloc (32 samples, 0.03%)</title><rect x="5.7498%" y="421" width="0.0260%" height="15" fill="rgb(243,84,45)" fg:x="7082" fg:w="32"/><text x="5.9998%" y="431.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (32 samples, 0.03%)</title><rect x="5.7498%" y="405" width="0.0260%" height="15" fill="rgb(252,49,23)" fg:x="7082" fg:w="32"/><text x="5.9998%" y="415.50"></text></g><g><title>sn_rust_alloc (32 samples, 0.03%)</title><rect x="5.7498%" y="389" width="0.0260%" height="15" fill="rgb(215,19,7)" fg:x="7082" fg:w="32"/><text x="5.9998%" y="399.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (32 samples, 0.03%)</title><rect x="5.7498%" y="373" width="0.0260%" height="15" fill="rgb(238,81,41)" fg:x="7082" fg:w="32"/><text x="5.9998%" y="383.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (161 samples, 0.13%)</title><rect x="5.8107%" y="629" width="0.1307%" height="15" fill="rgb(210,199,37)" fg:x="7157" fg:w="161"/><text x="6.0607%" y="639.50"></text></g><g><title>[libc-2.31.so] (246 samples, 0.20%)</title><rect x="5.9414%" y="613" width="0.1997%" height="15" fill="rgb(244,192,49)" fg:x="7318" fg:w="246"/><text x="6.1914%" y="623.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (449 samples, 0.36%)</title><rect x="5.9414%" y="629" width="0.3645%" height="15" fill="rgb(226,211,11)" fg:x="7318" fg:w="449"/><text x="6.1914%" y="639.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (203 samples, 0.16%)</title><rect x="6.1411%" y="613" width="0.1648%" height="15" fill="rgb(236,162,54)" fg:x="7564" fg:w="203"/><text x="6.3911%" y="623.50"></text></g><g><title>[libc-2.31.so] (196 samples, 0.16%)</title><rect x="6.1468%" y="597" width="0.1591%" height="15" fill="rgb(220,229,9)" fg:x="7571" fg:w="196"/><text x="6.3968%" y="607.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (183 samples, 0.15%)</title><rect x="6.3092%" y="597" width="0.1486%" height="15" fill="rgb(250,87,22)" fg:x="7771" fg:w="183"/><text x="6.5592%" y="607.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (183 samples, 0.15%)</title><rect x="6.3092%" y="581" width="0.1486%" height="15" fill="rgb(239,43,17)" fg:x="7771" fg:w="183"/><text x="6.5592%" y="591.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (183 samples, 0.15%)</title><rect x="6.3092%" y="565" width="0.1486%" height="15" fill="rgb(231,177,25)" fg:x="7771" fg:w="183"/><text x="6.5592%" y="575.50"></text></g><g><title>[libc-2.31.so] (168 samples, 0.14%)</title><rect x="6.3213%" y="549" width="0.1364%" height="15" fill="rgb(219,179,1)" fg:x="7786" fg:w="168"/><text x="6.5713%" y="559.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (21 samples, 0.02%)</title><rect x="6.4577%" y="597" width="0.0170%" height="15" fill="rgb(238,219,53)" fg:x="7954" fg:w="21"/><text x="6.7077%" y="607.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (360 samples, 0.29%)</title><rect x="6.3059%" y="629" width="0.2923%" height="15" fill="rgb(232,167,36)" fg:x="7767" fg:w="360"/><text x="6.5559%" y="639.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (360 samples, 0.29%)</title><rect x="6.3059%" y="613" width="0.2923%" height="15" fill="rgb(244,19,51)" fg:x="7767" fg:w="360"/><text x="6.5559%" y="623.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (152 samples, 0.12%)</title><rect x="6.4748%" y="597" width="0.1234%" height="15" fill="rgb(224,6,22)" fg:x="7975" fg:w="152"/><text x="6.7248%" y="607.50"></text></g><g><title>[libc-2.31.so] (146 samples, 0.12%)</title><rect x="6.4797%" y="581" width="0.1185%" height="15" fill="rgb(224,145,5)" fg:x="7981" fg:w="146"/><text x="6.7297%" y="591.50"></text></g><g><title>[libc-2.31.so] (337 samples, 0.27%)</title><rect x="6.5982%" y="629" width="0.2736%" height="15" fill="rgb(234,130,49)" fg:x="8127" fg:w="337"/><text x="6.8482%" y="639.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (100 samples, 0.08%)</title><rect x="6.8718%" y="629" width="0.0812%" height="15" fill="rgb(254,6,2)" fg:x="8464" fg:w="100"/><text x="7.1218%" y="639.50"></text></g><g><title>[libc-2.31.so] (89 samples, 0.07%)</title><rect x="6.8807%" y="613" width="0.0723%" height="15" fill="rgb(208,96,46)" fg:x="8475" fg:w="89"/><text x="7.1307%" y="623.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn (21 samples, 0.02%)</title><rect x="6.9530%" y="581" width="0.0170%" height="15" fill="rgb(239,3,39)" fg:x="8564" fg:w="21"/><text x="7.2030%" y="591.50"></text></g><g><title>async_ffi::DropBomb::with (20 samples, 0.02%)</title><rect x="6.9538%" y="565" width="0.0162%" height="15" fill="rgb(233,210,1)" fg:x="8565" fg:w="20"/><text x="7.2038%" y="575.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn::{{closure}} (15 samples, 0.01%)</title><rect x="6.9579%" y="549" width="0.0122%" height="15" fill="rgb(244,137,37)" fg:x="8570" fg:w="15"/><text x="7.2079%" y="559.50"></text></g><g><title>core::mem::drop (15 samples, 0.01%)</title><rect x="6.9579%" y="533" width="0.0122%" height="15" fill="rgb(240,136,2)" fg:x="8570" fg:w="15"/><text x="7.2079%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}}&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="6.9579%" y="517" width="0.0122%" height="15" fill="rgb(239,18,37)" fg:x="8570" fg:w="15"/><text x="7.2079%" y="527.50"></text></g><g><title>sn_rust_dealloc (170 samples, 0.14%)</title><rect x="6.9700%" y="581" width="0.1380%" height="15" fill="rgb(218,185,22)" fg:x="8585" fg:w="170"/><text x="7.2200%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (195 samples, 0.16%)</title><rect x="6.9530%" y="629" width="0.1583%" height="15" fill="rgb(225,218,4)" fg:x="8564" fg:w="195"/><text x="7.2030%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (195 samples, 0.16%)</title><rect x="6.9530%" y="613" width="0.1583%" height="15" fill="rgb(230,182,32)" fg:x="8564" fg:w="195"/><text x="7.2030%" y="623.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (195 samples, 0.16%)</title><rect x="6.9530%" y="597" width="0.1583%" height="15" fill="rgb(242,56,43)" fg:x="8564" fg:w="195"/><text x="7.2030%" y="607.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (122 samples, 0.10%)</title><rect x="7.1819%" y="405" width="0.0991%" height="15" fill="rgb(233,99,24)" fg:x="8846" fg:w="122"/><text x="7.4319%" y="415.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::pull_data (202 samples, 0.16%)</title><rect x="7.1202%" y="613" width="0.1640%" height="15" fill="rgb(234,209,42)" fg:x="8770" fg:w="202"/><text x="7.3702%" y="623.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data (186 samples, 0.15%)</title><rect x="7.1332%" y="597" width="0.1510%" height="15" fill="rgb(227,7,12)" fg:x="8786" fg:w="186"/><text x="7.3832%" y="607.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (186 samples, 0.15%)</title><rect x="7.1332%" y="581" width="0.1510%" height="15" fill="rgb(245,203,43)" fg:x="8786" fg:w="186"/><text x="7.3832%" y="591.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (186 samples, 0.15%)</title><rect x="7.1332%" y="565" width="0.1510%" height="15" fill="rgb(238,205,33)" fg:x="8786" fg:w="186"/><text x="7.3832%" y="575.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (186 samples, 0.15%)</title><rect x="7.1332%" y="549" width="0.1510%" height="15" fill="rgb(231,56,7)" fg:x="8786" fg:w="186"/><text x="7.3832%" y="559.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (177 samples, 0.14%)</title><rect x="7.1405%" y="533" width="0.1437%" height="15" fill="rgb(244,186,29)" fg:x="8795" fg:w="177"/><text x="7.3905%" y="543.50"></text></g><g><title>alloc::alloc::exchange_malloc (177 samples, 0.14%)</title><rect x="7.1405%" y="517" width="0.1437%" height="15" fill="rgb(234,111,31)" fg:x="8795" fg:w="177"/><text x="7.3905%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (177 samples, 0.14%)</title><rect x="7.1405%" y="501" width="0.1437%" height="15" fill="rgb(241,149,10)" fg:x="8795" fg:w="177"/><text x="7.3905%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (177 samples, 0.14%)</title><rect x="7.1405%" y="485" width="0.1437%" height="15" fill="rgb(249,206,44)" fg:x="8795" fg:w="177"/><text x="7.3905%" y="495.50"></text></g><g><title>alloc::alloc::alloc (177 samples, 0.14%)</title><rect x="7.1405%" y="469" width="0.1437%" height="15" fill="rgb(251,153,30)" fg:x="8795" fg:w="177"/><text x="7.3905%" y="479.50"></text></g><g><title>__rg_alloc (177 samples, 0.14%)</title><rect x="7.1405%" y="453" width="0.1437%" height="15" fill="rgb(239,152,38)" fg:x="8795" fg:w="177"/><text x="7.3905%" y="463.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (177 samples, 0.14%)</title><rect x="7.1405%" y="437" width="0.1437%" height="15" fill="rgb(249,139,47)" fg:x="8795" fg:w="177"/><text x="7.3905%" y="447.50"></text></g><g><title>sn_rust_alloc (176 samples, 0.14%)</title><rect x="7.1413%" y="421" width="0.1429%" height="15" fill="rgb(244,64,35)" fg:x="8796" fg:w="176"/><text x="7.3913%" y="431.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,862 samples, 1.51%)</title><rect x="5.7758%" y="661" width="1.5117%" height="15" fill="rgb(216,46,15)" fg:x="7114" fg:w="1862"/><text x="6.0258%" y="671.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (1,853 samples, 1.50%)</title><rect x="5.7831%" y="645" width="1.5044%" height="15" fill="rgb(250,74,19)" fg:x="7123" fg:w="1853"/><text x="6.0331%" y="655.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_TO&lt;_ErasedPtr&gt;::pull_data (217 samples, 0.18%)</title><rect x="7.1113%" y="629" width="0.1762%" height="15" fill="rgb(249,42,33)" fg:x="8759" fg:w="217"/><text x="7.3613%" y="639.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1,868 samples, 1.52%)</title><rect x="5.7758%" y="709" width="1.5166%" height="15" fill="rgb(242,149,17)" fg:x="7114" fg:w="1868"/><text x="6.0258%" y="719.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (1,868 samples, 1.52%)</title><rect x="5.7758%" y="693" width="1.5166%" height="15" fill="rgb(244,29,21)" fg:x="7114" fg:w="1868"/><text x="6.0258%" y="703.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,868 samples, 1.52%)</title><rect x="5.7758%" y="677" width="1.5166%" height="15" fill="rgb(220,130,37)" fg:x="7114" fg:w="1868"/><text x="6.0258%" y="687.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (1,957 samples, 1.59%)</title><rect x="5.7043%" y="725" width="1.5889%" height="15" fill="rgb(211,67,2)" fg:x="7026" fg:w="1957"/><text x="5.9543%" y="735.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (77 samples, 0.06%)</title><rect x="7.3971%" y="661" width="0.0625%" height="15" fill="rgb(235,68,52)" fg:x="9111" fg:w="77"/><text x="7.6471%" y="671.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (65 samples, 0.05%)</title><rect x="7.4068%" y="645" width="0.0528%" height="15" fill="rgb(246,142,3)" fg:x="9123" fg:w="65"/><text x="7.6568%" y="655.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (13 samples, 0.01%)</title><rect x="7.4491%" y="629" width="0.0106%" height="15" fill="rgb(241,25,7)" fg:x="9175" fg:w="13"/><text x="7.6991%" y="639.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (811 samples, 0.66%)</title><rect x="7.3159%" y="677" width="0.6584%" height="15" fill="rgb(242,119,39)" fg:x="9011" fg:w="811"/><text x="7.5659%" y="687.50"></text></g><g><title>[libc-2.31.so] (634 samples, 0.51%)</title><rect x="7.4596%" y="661" width="0.5147%" height="15" fill="rgb(241,98,45)" fg:x="9188" fg:w="634"/><text x="7.7096%" y="671.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,204 samples, 0.98%)</title><rect x="7.2932%" y="709" width="0.9775%" height="15" fill="rgb(254,28,30)" fg:x="8983" fg:w="1204"/><text x="7.5432%" y="719.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (1,204 samples, 0.98%)</title><rect x="7.2932%" y="693" width="0.9775%" height="15" fill="rgb(241,142,54)" fg:x="8983" fg:w="1204"/><text x="7.5432%" y="703.50"></text></g><g><title>[libc-2.31.so] (365 samples, 0.30%)</title><rect x="7.9743%" y="677" width="0.2963%" height="15" fill="rgb(222,85,15)" fg:x="9822" fg:w="365"/><text x="8.2243%" y="687.50"></text></g><g><title>[libc-2.31.so] (193 samples, 0.16%)</title><rect x="8.3007%" y="693" width="0.1567%" height="15" fill="rgb(210,85,47)" fg:x="10224" fg:w="193"/><text x="8.5507%" y="703.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (20 samples, 0.02%)</title><rect x="8.6328%" y="677" width="0.0162%" height="15" fill="rgb(224,206,25)" fg:x="10633" fg:w="20"/><text x="8.8828%" y="687.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (14 samples, 0.01%)</title><rect x="8.6490%" y="677" width="0.0114%" height="15" fill="rgb(243,201,19)" fg:x="10653" fg:w="14"/><text x="8.8990%" y="687.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 0.02%)</title><rect x="8.6661%" y="661" width="0.0219%" height="15" fill="rgb(236,59,4)" fg:x="10674" fg:w="27"/><text x="8.9161%" y="671.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (246 samples, 0.20%)</title><rect x="8.6661%" y="677" width="0.1997%" height="15" fill="rgb(254,179,45)" fg:x="10674" fg:w="246"/><text x="8.9161%" y="687.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (219 samples, 0.18%)</title><rect x="8.6880%" y="661" width="0.1778%" height="15" fill="rgb(226,14,10)" fg:x="10701" fg:w="219"/><text x="8.9380%" y="671.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (216 samples, 0.18%)</title><rect x="8.6904%" y="645" width="0.1754%" height="15" fill="rgb(244,27,41)" fg:x="10704" fg:w="216"/><text x="8.9404%" y="655.50"></text></g><g><title>core::ptr::read (216 samples, 0.18%)</title><rect x="8.6904%" y="629" width="0.1754%" height="15" fill="rgb(235,35,32)" fg:x="10704" fg:w="216"/><text x="8.9404%" y="639.50"></text></g><g><title>[libc-2.31.so] (209 samples, 0.17%)</title><rect x="8.6961%" y="613" width="0.1697%" height="15" fill="rgb(218,68,31)" fg:x="10711" fg:w="209"/><text x="8.9461%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (493 samples, 0.40%)</title><rect x="8.8707%" y="549" width="0.4003%" height="15" fill="rgb(207,120,37)" fg:x="10926" fg:w="493"/><text x="9.1207%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (493 samples, 0.40%)</title><rect x="8.8707%" y="533" width="0.4003%" height="15" fill="rgb(227,98,0)" fg:x="10926" fg:w="493"/><text x="9.1207%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (493 samples, 0.40%)</title><rect x="8.8707%" y="517" width="0.4003%" height="15" fill="rgb(207,7,3)" fg:x="10926" fg:w="493"/><text x="9.1207%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (488 samples, 0.40%)</title><rect x="8.8747%" y="501" width="0.3962%" height="15" fill="rgb(206,98,19)" fg:x="10931" fg:w="488"/><text x="9.1247%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (488 samples, 0.40%)</title><rect x="8.8747%" y="485" width="0.3962%" height="15" fill="rgb(217,5,26)" fg:x="10931" fg:w="488"/><text x="9.1247%" y="495.50"></text></g><g><title>alloc::alloc::alloc (488 samples, 0.40%)</title><rect x="8.8747%" y="469" width="0.3962%" height="15" fill="rgb(235,190,38)" fg:x="10931" fg:w="488"/><text x="9.1247%" y="479.50"></text></g><g><title>__rg_alloc (488 samples, 0.40%)</title><rect x="8.8747%" y="453" width="0.3962%" height="15" fill="rgb(247,86,24)" fg:x="10931" fg:w="488"/><text x="9.1247%" y="463.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (488 samples, 0.40%)</title><rect x="8.8747%" y="437" width="0.3962%" height="15" fill="rgb(205,101,16)" fg:x="10931" fg:w="488"/><text x="9.1247%" y="447.50"></text></g><g><title>sn_rust_alloc (479 samples, 0.39%)</title><rect x="8.8820%" y="421" width="0.3889%" height="15" fill="rgb(246,168,33)" fg:x="10940" fg:w="479"/><text x="9.1320%" y="431.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (537 samples, 0.44%)</title><rect x="8.8707%" y="677" width="0.4360%" height="15" fill="rgb(231,114,1)" fg:x="10926" fg:w="537"/><text x="9.1207%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (537 samples, 0.44%)</title><rect x="8.8707%" y="661" width="0.4360%" height="15" fill="rgb(207,184,53)" fg:x="10926" fg:w="537"/><text x="9.1207%" y="671.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (537 samples, 0.44%)</title><rect x="8.8707%" y="645" width="0.4360%" height="15" fill="rgb(224,95,51)" fg:x="10926" fg:w="537"/><text x="9.1207%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (537 samples, 0.44%)</title><rect x="8.8707%" y="629" width="0.4360%" height="15" fill="rgb(212,188,45)" fg:x="10926" fg:w="537"/><text x="9.1207%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (537 samples, 0.44%)</title><rect x="8.8707%" y="613" width="0.4360%" height="15" fill="rgb(223,154,38)" fg:x="10926" fg:w="537"/><text x="9.1207%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (537 samples, 0.44%)</title><rect x="8.8707%" y="597" width="0.4360%" height="15" fill="rgb(251,22,52)" fg:x="10926" fg:w="537"/><text x="9.1207%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (537 samples, 0.44%)</title><rect x="8.8707%" y="581" width="0.4360%" height="15" fill="rgb(229,209,22)" fg:x="10926" fg:w="537"/><text x="9.1207%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (537 samples, 0.44%)</title><rect x="8.8707%" y="565" width="0.4360%" height="15" fill="rgb(234,138,34)" fg:x="10926" fg:w="537"/><text x="9.1207%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (44 samples, 0.04%)</title><rect x="9.2709%" y="549" width="0.0357%" height="15" fill="rgb(212,95,11)" fg:x="11419" fg:w="44"/><text x="9.5209%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (44 samples, 0.04%)</title><rect x="9.2709%" y="533" width="0.0357%" height="15" fill="rgb(240,179,47)" fg:x="11419" fg:w="44"/><text x="9.5209%" y="543.50"></text></g><g><title>[libc-2.31.so] (32 samples, 0.03%)</title><rect x="9.2807%" y="517" width="0.0260%" height="15" fill="rgb(240,163,11)" fg:x="11431" fg:w="32"/><text x="9.5307%" y="527.50"></text></g><g><title>[libc-2.31.so] (1,029 samples, 0.84%)</title><rect x="9.3066%" y="677" width="0.8354%" height="15" fill="rgb(236,37,12)" fg:x="11463" fg:w="1029"/><text x="9.5566%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::drain (16 samples, 0.01%)</title><rect x="10.1421%" y="677" width="0.0130%" height="15" fill="rgb(232,164,16)" fg:x="12492" fg:w="16"/><text x="10.3921%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (46 samples, 0.04%)</title><rect x="10.1551%" y="677" width="0.0373%" height="15" fill="rgb(244,205,15)" fg:x="12508" fg:w="46"/><text x="10.4051%" y="687.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (46 samples, 0.04%)</title><rect x="10.1551%" y="661" width="0.0373%" height="15" fill="rgb(223,117,47)" fg:x="12508" fg:w="46"/><text x="10.4051%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event),alloc::alloc::Global&gt;&gt; (16 samples, 0.01%)</title><rect x="10.1794%" y="645" width="0.0130%" height="15" fill="rgb(244,107,35)" fg:x="12538" fg:w="16"/><text x="10.4294%" y="655.50"></text></g><g><title>&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="10.1794%" y="629" width="0.0130%" height="15" fill="rgb(205,140,8)" fg:x="12538" fg:w="16"/><text x="10.4294%" y="639.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_last_mut (16 samples, 0.01%)</title><rect x="10.2078%" y="677" width="0.0130%" height="15" fill="rgb(228,84,46)" fg:x="12573" fg:w="16"/><text x="10.4578%" y="687.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (136 samples, 0.11%)</title><rect x="10.2395%" y="645" width="0.1104%" height="15" fill="rgb(254,188,9)" fg:x="12612" fg:w="136"/><text x="10.4895%" y="655.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (129 samples, 0.10%)</title><rect x="10.2452%" y="629" width="0.1047%" height="15" fill="rgb(206,112,54)" fg:x="12619" fg:w="129"/><text x="10.4952%" y="639.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (129 samples, 0.10%)</title><rect x="10.2452%" y="613" width="0.1047%" height="15" fill="rgb(216,84,49)" fg:x="12619" fg:w="129"/><text x="10.4952%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (129 samples, 0.10%)</title><rect x="10.2452%" y="597" width="0.1047%" height="15" fill="rgb(214,194,35)" fg:x="12619" fg:w="129"/><text x="10.4952%" y="607.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (129 samples, 0.10%)</title><rect x="10.2452%" y="581" width="0.1047%" height="15" fill="rgb(249,28,3)" fg:x="12619" fg:w="129"/><text x="10.4952%" y="591.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (129 samples, 0.10%)</title><rect x="10.2452%" y="565" width="0.1047%" height="15" fill="rgb(222,56,52)" fg:x="12619" fg:w="129"/><text x="10.4952%" y="575.50"></text></g><g><title>[libc-2.31.so] (82 samples, 0.07%)</title><rect x="10.2833%" y="549" width="0.0666%" height="15" fill="rgb(245,217,50)" fg:x="12666" fg:w="82"/><text x="10.5333%" y="559.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (183 samples, 0.15%)</title><rect x="10.2208%" y="677" width="0.1486%" height="15" fill="rgb(213,201,24)" fg:x="12589" fg:w="183"/><text x="10.4708%" y="687.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get_mut (167 samples, 0.14%)</title><rect x="10.2338%" y="661" width="0.1356%" height="15" fill="rgb(248,116,28)" fg:x="12605" fg:w="167"/><text x="10.4838%" y="671.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.02%)</title><rect x="10.3499%" y="645" width="0.0195%" height="15" fill="rgb(219,72,43)" fg:x="12748" fg:w="24"/><text x="10.5999%" y="655.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (7,039 samples, 5.71%)</title><rect x="4.7098%" y="853" width="5.7149%" height="15" fill="rgb(209,138,14)" fg:x="5801" fg:w="7039"/><text x="4.9598%" y="863.50">async_e..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (7,039 samples, 5.71%)</title><rect x="4.7098%" y="837" width="5.7149%" height="15" fill="rgb(222,18,33)" fg:x="5801" fg:w="7039"/><text x="4.9598%" y="847.50">&lt;async_..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (7,039 samples, 5.71%)</title><rect x="4.7098%" y="821" width="5.7149%" height="15" fill="rgb(213,199,7)" fg:x="5801" fg:w="7039"/><text x="4.9598%" y="831.50">async_s..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (7,039 samples, 5.71%)</title><rect x="4.7098%" y="805" width="5.7149%" height="15" fill="rgb(250,110,10)" fg:x="5801" fg:w="7039"/><text x="4.9598%" y="815.50">std::th..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (7,039 samples, 5.71%)</title><rect x="4.7098%" y="789" width="5.7149%" height="15" fill="rgb(248,123,6)" fg:x="5801" fg:w="7039"/><text x="4.9598%" y="799.50">std::th..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (7,039 samples, 5.71%)</title><rect x="4.7098%" y="773" width="5.7149%" height="15" fill="rgb(206,91,31)" fg:x="5801" fg:w="7039"/><text x="4.9598%" y="783.50">async_s..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (7,039 samples, 5.71%)</title><rect x="4.7098%" y="757" width="5.7149%" height="15" fill="rgb(211,154,13)" fg:x="5801" fg:w="7039"/><text x="4.9598%" y="767.50">&lt;async_..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,039 samples, 5.71%)</title><rect x="4.7098%" y="741" width="5.7149%" height="15" fill="rgb(225,148,7)" fg:x="5801" fg:w="7039"/><text x="4.9598%" y="751.50">&lt;core::..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (3,857 samples, 3.13%)</title><rect x="7.2932%" y="725" width="3.1314%" height="15" fill="rgb(220,160,43)" fg:x="8983" fg:w="3857"/><text x="7.5432%" y="735.50">tre..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,653 samples, 2.15%)</title><rect x="8.2707%" y="709" width="2.1539%" height="15" fill="rgb(213,52,39)" fg:x="10187" fg:w="2653"/><text x="8.5207%" y="719.50">&lt;..</text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (2,423 samples, 1.97%)</title><rect x="8.4574%" y="693" width="1.9672%" height="15" fill="rgb(243,137,7)" fg:x="10417" fg:w="2423"/><text x="8.7074%" y="703.50">t..</text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (68 samples, 0.06%)</title><rect x="10.3694%" y="677" width="0.0552%" height="15" fill="rgb(230,79,13)" fg:x="12772" fg:w="68"/><text x="10.6194%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (68 samples, 0.06%)</title><rect x="10.3694%" y="661" width="0.0552%" height="15" fill="rgb(247,105,23)" fg:x="12772" fg:w="68"/><text x="10.6194%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (68 samples, 0.06%)</title><rect x="10.3694%" y="645" width="0.0552%" height="15" fill="rgb(223,179,41)" fg:x="12772" fg:w="68"/><text x="10.6194%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (48 samples, 0.04%)</title><rect x="10.3856%" y="629" width="0.0390%" height="15" fill="rgb(218,9,34)" fg:x="12792" fg:w="48"/><text x="10.6356%" y="639.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (208 samples, 0.17%)</title><rect x="10.7096%" y="453" width="0.1689%" height="15" fill="rgb(222,106,8)" fg:x="13191" fg:w="208"/><text x="10.9596%" y="463.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (269 samples, 0.22%)</title><rect x="10.6625%" y="613" width="0.2184%" height="15" fill="rgb(211,220,0)" fg:x="13133" fg:w="269"/><text x="10.9125%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (269 samples, 0.22%)</title><rect x="10.6625%" y="597" width="0.2184%" height="15" fill="rgb(229,52,16)" fg:x="13133" fg:w="269"/><text x="10.9125%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (258 samples, 0.21%)</title><rect x="10.6714%" y="581" width="0.2095%" height="15" fill="rgb(212,155,18)" fg:x="13144" fg:w="258"/><text x="10.9214%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (245 samples, 0.20%)</title><rect x="10.6820%" y="565" width="0.1989%" height="15" fill="rgb(242,21,14)" fg:x="13157" fg:w="245"/><text x="10.9320%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (245 samples, 0.20%)</title><rect x="10.6820%" y="549" width="0.1989%" height="15" fill="rgb(222,19,48)" fg:x="13157" fg:w="245"/><text x="10.9320%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (245 samples, 0.20%)</title><rect x="10.6820%" y="533" width="0.1989%" height="15" fill="rgb(232,45,27)" fg:x="13157" fg:w="245"/><text x="10.9320%" y="543.50"></text></g><g><title>alloc::alloc::alloc (245 samples, 0.20%)</title><rect x="10.6820%" y="517" width="0.1989%" height="15" fill="rgb(249,103,42)" fg:x="13157" fg:w="245"/><text x="10.9320%" y="527.50"></text></g><g><title>__rg_alloc (245 samples, 0.20%)</title><rect x="10.6820%" y="501" width="0.1989%" height="15" fill="rgb(246,81,33)" fg:x="13157" fg:w="245"/><text x="10.9320%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (245 samples, 0.20%)</title><rect x="10.6820%" y="485" width="0.1989%" height="15" fill="rgb(252,33,42)" fg:x="13157" fg:w="245"/><text x="10.9320%" y="495.50"></text></g><g><title>sn_rust_alloc (239 samples, 0.19%)</title><rect x="10.6869%" y="469" width="0.1940%" height="15" fill="rgb(209,212,41)" fg:x="13163" fg:w="239"/><text x="10.9369%" y="479.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (293 samples, 0.24%)</title><rect x="10.6528%" y="661" width="0.2379%" height="15" fill="rgb(207,154,6)" fg:x="13121" fg:w="293"/><text x="10.9028%" y="671.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (293 samples, 0.24%)</title><rect x="10.6528%" y="645" width="0.2379%" height="15" fill="rgb(223,64,47)" fg:x="13121" fg:w="293"/><text x="10.9028%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (293 samples, 0.24%)</title><rect x="10.6528%" y="629" width="0.2379%" height="15" fill="rgb(211,161,38)" fg:x="13121" fg:w="293"/><text x="10.9028%" y="639.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as abi_stable::traits::IntoReprRust&gt;::into_rust (13 samples, 0.01%)</title><rect x="10.9207%" y="613" width="0.0106%" height="15" fill="rgb(219,138,40)" fg:x="13451" fg:w="13"/><text x="11.1707%" y="623.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (13 samples, 0.01%)</title><rect x="10.9207%" y="597" width="0.0106%" height="15" fill="rgb(241,228,46)" fg:x="13451" fg:w="13"/><text x="11.1707%" y="607.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (13 samples, 0.01%)</title><rect x="10.9207%" y="581" width="0.0106%" height="15" fill="rgb(223,209,38)" fg:x="13451" fg:w="13"/><text x="11.1707%" y="591.50"></text></g><g><title>abi_stable::erased_types::iterator::next (24 samples, 0.02%)</title><rect x="10.9320%" y="613" width="0.0195%" height="15" fill="rgb(236,164,45)" fg:x="13465" fg:w="24"/><text x="11.1820%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (23 samples, 0.02%)</title><rect x="10.9329%" y="597" width="0.0187%" height="15" fill="rgb(231,15,5)" fg:x="13466" fg:w="23"/><text x="11.1829%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.02%)</title><rect x="10.9329%" y="581" width="0.0187%" height="15" fill="rgb(252,35,15)" fg:x="13466" fg:w="23"/><text x="11.1829%" y="591.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.02%)</title><rect x="10.9329%" y="565" width="0.0187%" height="15" fill="rgb(248,181,18)" fg:x="13466" fg:w="23"/><text x="11.1829%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.02%)</title><rect x="10.9329%" y="549" width="0.0187%" height="15" fill="rgb(233,39,42)" fg:x="13466" fg:w="23"/><text x="11.1829%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.01%)</title><rect x="10.9402%" y="533" width="0.0114%" height="15" fill="rgb(238,110,33)" fg:x="13475" fg:w="14"/><text x="11.1902%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (47 samples, 0.04%)</title><rect x="10.9207%" y="645" width="0.0382%" height="15" fill="rgb(233,195,10)" fg:x="13451" fg:w="47"/><text x="11.1707%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (47 samples, 0.04%)</title><rect x="10.9207%" y="629" width="0.0382%" height="15" fill="rgb(254,105,3)" fg:x="13451" fg:w="47"/><text x="11.1707%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (34 samples, 0.03%)</title><rect x="10.9588%" y="645" width="0.0276%" height="15" fill="rgb(221,225,9)" fg:x="13498" fg:w="34"/><text x="11.2088%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (34 samples, 0.03%)</title><rect x="10.9588%" y="629" width="0.0276%" height="15" fill="rgb(224,227,45)" fg:x="13498" fg:w="34"/><text x="11.2088%" y="639.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (794 samples, 0.64%)</title><rect x="10.4271%" y="837" width="0.6446%" height="15" fill="rgb(229,198,43)" fg:x="12843" fg:w="794"/><text x="10.6771%" y="847.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (794 samples, 0.64%)</title><rect x="10.4271%" y="821" width="0.6446%" height="15" fill="rgb(206,209,35)" fg:x="12843" fg:w="794"/><text x="10.6771%" y="831.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (794 samples, 0.64%)</title><rect x="10.4271%" y="805" width="0.6446%" height="15" fill="rgb(245,195,53)" fg:x="12843" fg:w="794"/><text x="10.6771%" y="815.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (794 samples, 0.64%)</title><rect x="10.4271%" y="789" width="0.6446%" height="15" fill="rgb(240,92,26)" fg:x="12843" fg:w="794"/><text x="10.6771%" y="799.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (793 samples, 0.64%)</title><rect x="10.4279%" y="773" width="0.6438%" height="15" fill="rgb(207,40,23)" fg:x="12844" fg:w="793"/><text x="10.6779%" y="783.50"></text></g><g><title>tremor_script::srs::EventPayload::try_new (790 samples, 0.64%)</title><rect x="10.4303%" y="757" width="0.6414%" height="15" fill="rgb(223,111,35)" fg:x="12847" fg:w="790"/><text x="10.6803%" y="767.50"></text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (790 samples, 0.64%)</title><rect x="10.4303%" y="741" width="0.6414%" height="15" fill="rgb(229,147,28)" fg:x="12847" fg:w="790"/><text x="10.6803%" y="751.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (790 samples, 0.64%)</title><rect x="10.4303%" y="725" width="0.6414%" height="15" fill="rgb(211,29,28)" fg:x="12847" fg:w="790"/><text x="10.6803%" y="735.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (790 samples, 0.64%)</title><rect x="10.4303%" y="709" width="0.6414%" height="15" fill="rgb(228,72,33)" fg:x="12847" fg:w="790"/><text x="10.6803%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (790 samples, 0.64%)</title><rect x="10.4303%" y="693" width="0.6414%" height="15" fill="rgb(205,214,31)" fg:x="12847" fg:w="790"/><text x="10.6803%" y="703.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (516 samples, 0.42%)</title><rect x="10.6528%" y="677" width="0.4189%" height="15" fill="rgb(224,111,15)" fg:x="13121" fg:w="516"/><text x="10.9028%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (223 samples, 0.18%)</title><rect x="10.8906%" y="661" width="0.1811%" height="15" fill="rgb(253,21,26)" fg:x="13414" fg:w="223"/><text x="11.1406%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (100 samples, 0.08%)</title><rect x="10.9905%" y="645" width="0.0812%" height="15" fill="rgb(245,139,43)" fg:x="13537" fg:w="100"/><text x="11.2405%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt; (100 samples, 0.08%)</title><rect x="10.9905%" y="629" width="0.0812%" height="15" fill="rgb(252,170,7)" fg:x="13537" fg:w="100"/><text x="11.2405%" y="639.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (100 samples, 0.08%)</title><rect x="10.9905%" y="613" width="0.0812%" height="15" fill="rgb(231,118,14)" fg:x="13537" fg:w="100"/><text x="11.2405%" y="623.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (95 samples, 0.08%)</title><rect x="10.9946%" y="597" width="0.0771%" height="15" fill="rgb(238,83,0)" fg:x="13542" fg:w="95"/><text x="11.2446%" y="607.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (90 samples, 0.07%)</title><rect x="10.9986%" y="581" width="0.0731%" height="15" fill="rgb(221,39,39)" fg:x="13547" fg:w="90"/><text x="11.2486%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (90 samples, 0.07%)</title><rect x="10.9986%" y="565" width="0.0731%" height="15" fill="rgb(222,119,46)" fg:x="13547" fg:w="90"/><text x="11.2486%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (90 samples, 0.07%)</title><rect x="10.9986%" y="549" width="0.0731%" height="15" fill="rgb(222,165,49)" fg:x="13547" fg:w="90"/><text x="11.2486%" y="559.50"></text></g><g><title>sn_rust_dealloc (74 samples, 0.06%)</title><rect x="11.0116%" y="533" width="0.0601%" height="15" fill="rgb(219,113,52)" fg:x="13563" fg:w="74"/><text x="11.2616%" y="543.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::as_slice (21 samples, 0.02%)</title><rect x="12.0516%" y="453" width="0.0170%" height="15" fill="rgb(214,7,15)" fg:x="14844" fg:w="21"/><text x="12.3016%" y="463.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (29 samples, 0.02%)</title><rect x="12.3545%" y="245" width="0.0235%" height="15" fill="rgb(235,32,4)" fg:x="15217" fg:w="29"/><text x="12.6045%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (382 samples, 0.31%)</title><rect x="12.0687%" y="389" width="0.3101%" height="15" fill="rgb(238,90,54)" fg:x="14865" fg:w="382"/><text x="12.3187%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (382 samples, 0.31%)</title><rect x="12.0687%" y="373" width="0.3101%" height="15" fill="rgb(213,208,19)" fg:x="14865" fg:w="382"/><text x="12.3187%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (382 samples, 0.31%)</title><rect x="12.0687%" y="357" width="0.3101%" height="15" fill="rgb(233,156,4)" fg:x="14865" fg:w="382"/><text x="12.3187%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (380 samples, 0.31%)</title><rect x="12.0703%" y="341" width="0.3085%" height="15" fill="rgb(207,194,5)" fg:x="14867" fg:w="380"/><text x="12.3203%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (380 samples, 0.31%)</title><rect x="12.0703%" y="325" width="0.3085%" height="15" fill="rgb(206,111,30)" fg:x="14867" fg:w="380"/><text x="12.3203%" y="335.50"></text></g><g><title>alloc::alloc::alloc (379 samples, 0.31%)</title><rect x="12.0711%" y="309" width="0.3077%" height="15" fill="rgb(243,70,54)" fg:x="14868" fg:w="379"/><text x="12.3211%" y="319.50"></text></g><g><title>__rg_alloc (379 samples, 0.31%)</title><rect x="12.0711%" y="293" width="0.3077%" height="15" fill="rgb(242,28,8)" fg:x="14868" fg:w="379"/><text x="12.3211%" y="303.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (379 samples, 0.31%)</title><rect x="12.0711%" y="277" width="0.3077%" height="15" fill="rgb(219,106,18)" fg:x="14868" fg:w="379"/><text x="12.3211%" y="287.50"></text></g><g><title>sn_rust_alloc (359 samples, 0.29%)</title><rect x="12.0874%" y="261" width="0.2915%" height="15" fill="rgb(244,222,10)" fg:x="14888" fg:w="359"/><text x="12.3374%" y="271.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (473 samples, 0.38%)</title><rect x="12.0419%" y="501" width="0.3840%" height="15" fill="rgb(236,179,52)" fg:x="14832" fg:w="473"/><text x="12.2919%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (466 samples, 0.38%)</title><rect x="12.0476%" y="485" width="0.3783%" height="15" fill="rgb(213,23,39)" fg:x="14839" fg:w="466"/><text x="12.2976%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (461 samples, 0.37%)</title><rect x="12.0516%" y="469" width="0.3743%" height="15" fill="rgb(238,48,10)" fg:x="14844" fg:w="461"/><text x="12.3016%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (440 samples, 0.36%)</title><rect x="12.0687%" y="453" width="0.3572%" height="15" fill="rgb(251,196,23)" fg:x="14865" fg:w="440"/><text x="12.3187%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (440 samples, 0.36%)</title><rect x="12.0687%" y="437" width="0.3572%" height="15" fill="rgb(250,152,24)" fg:x="14865" fg:w="440"/><text x="12.3187%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (440 samples, 0.36%)</title><rect x="12.0687%" y="421" width="0.3572%" height="15" fill="rgb(209,150,17)" fg:x="14865" fg:w="440"/><text x="12.3187%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (440 samples, 0.36%)</title><rect x="12.0687%" y="405" width="0.3572%" height="15" fill="rgb(234,202,34)" fg:x="14865" fg:w="440"/><text x="12.3187%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (58 samples, 0.05%)</title><rect x="12.3788%" y="389" width="0.0471%" height="15" fill="rgb(253,148,53)" fg:x="15247" fg:w="58"/><text x="12.6288%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (58 samples, 0.05%)</title><rect x="12.3788%" y="373" width="0.0471%" height="15" fill="rgb(218,129,16)" fg:x="15247" fg:w="58"/><text x="12.6288%" y="383.50"></text></g><g><title>[libc-2.31.so] (43 samples, 0.03%)</title><rect x="12.3910%" y="357" width="0.0349%" height="15" fill="rgb(216,85,19)" fg:x="15262" fg:w="43"/><text x="12.6410%" y="367.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (32 samples, 0.03%)</title><rect x="12.4348%" y="485" width="0.0260%" height="15" fill="rgb(235,228,7)" fg:x="15316" fg:w="32"/><text x="12.6848%" y="495.50"></text></g><g><title>&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt; as core::convert::From&lt;alloc::vec::Vec&lt;T&gt;&gt;&gt;::from (28 samples, 0.02%)</title><rect x="12.4381%" y="469" width="0.0227%" height="15" fill="rgb(245,175,0)" fg:x="15320" fg:w="28"/><text x="12.6881%" y="479.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (55 samples, 0.04%)</title><rect x="12.5428%" y="149" width="0.0447%" height="15" fill="rgb(208,168,36)" fg:x="15449" fg:w="55"/><text x="12.7928%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (139 samples, 0.11%)</title><rect x="12.4763%" y="293" width="0.1129%" height="15" fill="rgb(246,171,24)" fg:x="15367" fg:w="139"/><text x="12.7263%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (139 samples, 0.11%)</title><rect x="12.4763%" y="277" width="0.1129%" height="15" fill="rgb(215,142,24)" fg:x="15367" fg:w="139"/><text x="12.7263%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (139 samples, 0.11%)</title><rect x="12.4763%" y="261" width="0.1129%" height="15" fill="rgb(250,187,7)" fg:x="15367" fg:w="139"/><text x="12.7263%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (137 samples, 0.11%)</title><rect x="12.4779%" y="245" width="0.1112%" height="15" fill="rgb(228,66,33)" fg:x="15369" fg:w="137"/><text x="12.7279%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (137 samples, 0.11%)</title><rect x="12.4779%" y="229" width="0.1112%" height="15" fill="rgb(234,215,21)" fg:x="15369" fg:w="137"/><text x="12.7279%" y="239.50"></text></g><g><title>alloc::alloc::alloc (136 samples, 0.11%)</title><rect x="12.4787%" y="213" width="0.1104%" height="15" fill="rgb(222,191,20)" fg:x="15370" fg:w="136"/><text x="12.7287%" y="223.50"></text></g><g><title>__rg_alloc (136 samples, 0.11%)</title><rect x="12.4787%" y="197" width="0.1104%" height="15" fill="rgb(245,79,54)" fg:x="15370" fg:w="136"/><text x="12.7287%" y="207.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (136 samples, 0.11%)</title><rect x="12.4787%" y="181" width="0.1104%" height="15" fill="rgb(240,10,37)" fg:x="15370" fg:w="136"/><text x="12.7287%" y="191.50"></text></g><g><title>sn_rust_alloc (132 samples, 0.11%)</title><rect x="12.4819%" y="165" width="0.1072%" height="15" fill="rgb(214,192,32)" fg:x="15374" fg:w="132"/><text x="12.7319%" y="175.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (188 samples, 0.15%)</title><rect x="12.4673%" y="405" width="0.1526%" height="15" fill="rgb(209,36,54)" fg:x="15356" fg:w="188"/><text x="12.7173%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (188 samples, 0.15%)</title><rect x="12.4673%" y="389" width="0.1526%" height="15" fill="rgb(220,10,11)" fg:x="15356" fg:w="188"/><text x="12.7173%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (188 samples, 0.15%)</title><rect x="12.4673%" y="373" width="0.1526%" height="15" fill="rgb(221,106,17)" fg:x="15356" fg:w="188"/><text x="12.7173%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (177 samples, 0.14%)</title><rect x="12.4763%" y="357" width="0.1437%" height="15" fill="rgb(251,142,44)" fg:x="15367" fg:w="177"/><text x="12.7263%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (177 samples, 0.14%)</title><rect x="12.4763%" y="341" width="0.1437%" height="15" fill="rgb(238,13,15)" fg:x="15367" fg:w="177"/><text x="12.7263%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (177 samples, 0.14%)</title><rect x="12.4763%" y="325" width="0.1437%" height="15" fill="rgb(208,107,27)" fg:x="15367" fg:w="177"/><text x="12.7263%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (177 samples, 0.14%)</title><rect x="12.4763%" y="309" width="0.1437%" height="15" fill="rgb(205,136,37)" fg:x="15367" fg:w="177"/><text x="12.7263%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (38 samples, 0.03%)</title><rect x="12.5891%" y="293" width="0.0309%" height="15" fill="rgb(250,205,27)" fg:x="15506" fg:w="38"/><text x="12.8391%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (38 samples, 0.03%)</title><rect x="12.5891%" y="277" width="0.0309%" height="15" fill="rgb(210,80,43)" fg:x="15506" fg:w="38"/><text x="12.8391%" y="287.50"></text></g><g><title>[libc-2.31.so] (29 samples, 0.02%)</title><rect x="12.5964%" y="261" width="0.0235%" height="15" fill="rgb(247,160,36)" fg:x="15515" fg:w="29"/><text x="12.8464%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.02%)</title><rect x="12.6200%" y="405" width="0.0227%" height="15" fill="rgb(234,13,49)" fg:x="15544" fg:w="28"/><text x="12.8700%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="12.6297%" y="389" width="0.0130%" height="15" fill="rgb(234,122,0)" fg:x="15556" fg:w="16"/><text x="12.8797%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="12.6297%" y="373" width="0.0130%" height="15" fill="rgb(207,146,38)" fg:x="15556" fg:w="16"/><text x="12.8797%" y="383.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (27 samples, 0.02%)</title><rect x="12.6971%" y="261" width="0.0219%" height="15" fill="rgb(207,177,25)" fg:x="15639" fg:w="27"/><text x="12.9471%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (87 samples, 0.07%)</title><rect x="12.6492%" y="357" width="0.0706%" height="15" fill="rgb(211,178,42)" fg:x="15580" fg:w="87"/><text x="12.8992%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (87 samples, 0.07%)</title><rect x="12.6492%" y="341" width="0.0706%" height="15" fill="rgb(230,69,54)" fg:x="15580" fg:w="87"/><text x="12.8992%" y="351.50"></text></g><g><title>alloc::alloc::alloc (82 samples, 0.07%)</title><rect x="12.6532%" y="325" width="0.0666%" height="15" fill="rgb(214,135,41)" fg:x="15585" fg:w="82"/><text x="12.9032%" y="335.50"></text></g><g><title>__rg_alloc (82 samples, 0.07%)</title><rect x="12.6532%" y="309" width="0.0666%" height="15" fill="rgb(237,67,25)" fg:x="15585" fg:w="82"/><text x="12.9032%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (82 samples, 0.07%)</title><rect x="12.6532%" y="293" width="0.0666%" height="15" fill="rgb(222,189,50)" fg:x="15585" fg:w="82"/><text x="12.9032%" y="303.50"></text></g><g><title>sn_rust_alloc (73 samples, 0.06%)</title><rect x="12.6606%" y="277" width="0.0593%" height="15" fill="rgb(245,148,34)" fg:x="15594" fg:w="73"/><text x="12.9106%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (100 samples, 0.08%)</title><rect x="12.6427%" y="405" width="0.0812%" height="15" fill="rgb(222,29,6)" fg:x="15572" fg:w="100"/><text x="12.8927%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (92 samples, 0.07%)</title><rect x="12.6492%" y="389" width="0.0747%" height="15" fill="rgb(221,189,43)" fg:x="15580" fg:w="92"/><text x="12.8992%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (92 samples, 0.07%)</title><rect x="12.6492%" y="373" width="0.0747%" height="15" fill="rgb(207,36,27)" fg:x="15580" fg:w="92"/><text x="12.8992%" y="383.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (1,647 samples, 1.34%)</title><rect x="11.3989%" y="517" width="1.3372%" height="15" fill="rgb(217,90,24)" fg:x="14040" fg:w="1647"/><text x="11.6489%" y="527.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (382 samples, 0.31%)</title><rect x="12.4259%" y="501" width="0.3101%" height="15" fill="rgb(224,66,35)" fg:x="15305" fg:w="382"/><text x="12.6759%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (339 samples, 0.28%)</title><rect x="12.4608%" y="485" width="0.2752%" height="15" fill="rgb(221,13,50)" fg:x="15348" fg:w="339"/><text x="12.7108%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (339 samples, 0.28%)</title><rect x="12.4608%" y="469" width="0.2752%" height="15" fill="rgb(236,68,49)" fg:x="15348" fg:w="339"/><text x="12.7108%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (339 samples, 0.28%)</title><rect x="12.4608%" y="453" width="0.2752%" height="15" fill="rgb(229,146,28)" fg:x="15348" fg:w="339"/><text x="12.7108%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (339 samples, 0.28%)</title><rect x="12.4608%" y="437" width="0.2752%" height="15" fill="rgb(225,31,38)" fg:x="15348" fg:w="339"/><text x="12.7108%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (339 samples, 0.28%)</title><rect x="12.4608%" y="421" width="0.2752%" height="15" fill="rgb(250,208,3)" fg:x="15348" fg:w="339"/><text x="12.7108%" y="431.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (15 samples, 0.01%)</title><rect x="12.7239%" y="405" width="0.0122%" height="15" fill="rgb(246,54,23)" fg:x="15672" fg:w="15"/><text x="12.9739%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (28 samples, 0.02%)</title><rect x="12.7767%" y="437" width="0.0227%" height="15" fill="rgb(243,76,11)" fg:x="15737" fg:w="28"/><text x="13.0267%" y="447.50"></text></g><g><title>core::time::Duration::as_nanos (33 samples, 0.03%)</title><rect x="12.7994%" y="437" width="0.0268%" height="15" fill="rgb(245,21,50)" fg:x="15765" fg:w="33"/><text x="13.0494%" y="447.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (90 samples, 0.07%)</title><rect x="12.8262%" y="421" width="0.0731%" height="15" fill="rgb(228,9,43)" fg:x="15798" fg:w="90"/><text x="13.0762%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (46 samples, 0.04%)</title><rect x="12.9350%" y="389" width="0.0373%" height="15" fill="rgb(208,100,47)" fg:x="15932" fg:w="46"/><text x="13.1850%" y="399.50"></text></g><g><title>core::cmp::PartialOrd::ge (46 samples, 0.04%)</title><rect x="12.9350%" y="373" width="0.0373%" height="15" fill="rgb(232,26,8)" fg:x="15932" fg:w="46"/><text x="13.1850%" y="383.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (45 samples, 0.04%)</title><rect x="12.9358%" y="357" width="0.0365%" height="15" fill="rgb(216,166,38)" fg:x="15933" fg:w="45"/><text x="13.1858%" y="367.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (45 samples, 0.04%)</title><rect x="12.9358%" y="341" width="0.0365%" height="15" fill="rgb(251,202,51)" fg:x="15933" fg:w="45"/><text x="13.1858%" y="351.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (45 samples, 0.04%)</title><rect x="12.9358%" y="325" width="0.0365%" height="15" fill="rgb(254,216,34)" fg:x="15933" fg:w="45"/><text x="13.1858%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (19 samples, 0.02%)</title><rect x="12.9569%" y="309" width="0.0154%" height="15" fill="rgb(251,32,27)" fg:x="15959" fg:w="19"/><text x="13.2069%" y="319.50"></text></g><g><title>std::time::SystemTime::duration_since (201 samples, 0.16%)</title><rect x="12.8262%" y="437" width="0.1632%" height="15" fill="rgb(208,127,28)" fg:x="15798" fg:w="201"/><text x="13.0762%" y="447.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (111 samples, 0.09%)</title><rect x="12.8992%" y="421" width="0.0901%" height="15" fill="rgb(224,137,22)" fg:x="15888" fg:w="111"/><text x="13.1492%" y="431.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (111 samples, 0.09%)</title><rect x="12.8992%" y="405" width="0.0901%" height="15" fill="rgb(254,70,32)" fg:x="15888" fg:w="111"/><text x="13.1492%" y="415.50"></text></g><g><title>core::time::Duration::new (21 samples, 0.02%)</title><rect x="12.9723%" y="389" width="0.0170%" height="15" fill="rgb(229,75,37)" fg:x="15978" fg:w="21"/><text x="13.2223%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (726 samples, 0.59%)</title><rect x="12.7361%" y="517" width="0.5894%" height="15" fill="rgb(252,64,23)" fg:x="15687" fg:w="726"/><text x="12.9861%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (726 samples, 0.59%)</title><rect x="12.7361%" y="501" width="0.5894%" height="15" fill="rgb(232,162,48)" fg:x="15687" fg:w="726"/><text x="12.9861%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any::check::{{closure}} (703 samples, 0.57%)</title><rect x="12.7547%" y="485" width="0.5708%" height="15" fill="rgb(246,160,12)" fg:x="15710" fg:w="703"/><text x="13.0047%" y="495.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}}::{{closure}} (703 samples, 0.57%)</title><rect x="12.7547%" y="469" width="0.5708%" height="15" fill="rgb(247,166,0)" fg:x="15710" fg:w="703"/><text x="13.0047%" y="479.50"></text></g><g><title>tremor_common::time::nanotime (697 samples, 0.57%)</title><rect x="12.7596%" y="453" width="0.5659%" height="15" fill="rgb(249,219,21)" fg:x="15716" fg:w="697"/><text x="13.0096%" y="463.50"></text></g><g><title>std::time::SystemTime::now (414 samples, 0.34%)</title><rect x="12.9894%" y="437" width="0.3361%" height="15" fill="rgb(205,209,3)" fg:x="15999" fg:w="414"/><text x="13.2394%" y="447.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (414 samples, 0.34%)</title><rect x="12.9894%" y="421" width="0.3361%" height="15" fill="rgb(243,44,1)" fg:x="15999" fg:w="414"/><text x="13.2394%" y="431.50"></text></g><g><title>std::sys::unix::time::inner::now (414 samples, 0.34%)</title><rect x="12.9894%" y="405" width="0.3361%" height="15" fill="rgb(206,159,16)" fg:x="15999" fg:w="414"/><text x="13.2394%" y="415.50"></text></g><g><title>__clock_gettime (329 samples, 0.27%)</title><rect x="13.0584%" y="389" width="0.2671%" height="15" fill="rgb(244,77,30)" fg:x="16084" fg:w="329"/><text x="13.3084%" y="399.50"></text></g><g><title>__vdso_clock_gettime (316 samples, 0.26%)</title><rect x="13.0689%" y="373" width="0.2566%" height="15" fill="rgb(218,69,12)" fg:x="16097" fg:w="316"/><text x="13.3189%" y="383.50"></text></g><g><title>[[vdso]] (284 samples, 0.23%)</title><rect x="13.0949%" y="357" width="0.2306%" height="15" fill="rgb(212,87,7)" fg:x="16129" fg:w="284"/><text x="13.3449%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (47 samples, 0.04%)</title><rect x="13.3523%" y="485" width="0.0382%" height="15" fill="rgb(245,114,25)" fg:x="16446" fg:w="47"/><text x="13.6023%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (19 samples, 0.02%)</title><rect x="13.3750%" y="469" width="0.0154%" height="15" fill="rgb(210,61,42)" fg:x="16474" fg:w="19"/><text x="13.6250%" y="479.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (1,002 samples, 0.81%)</title><rect x="13.6649%" y="293" width="0.8135%" height="15" fill="rgb(211,52,33)" fg:x="16831" fg:w="1002"/><text x="13.9149%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,365 samples, 1.11%)</title><rect x="13.3929%" y="437" width="1.1082%" height="15" fill="rgb(234,58,33)" fg:x="16496" fg:w="1365"/><text x="13.6429%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,351 samples, 1.10%)</title><rect x="13.4042%" y="421" width="1.0969%" height="15" fill="rgb(220,115,36)" fg:x="16510" fg:w="1351"/><text x="13.6542%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,351 samples, 1.10%)</title><rect x="13.4042%" y="405" width="1.0969%" height="15" fill="rgb(243,153,54)" fg:x="16510" fg:w="1351"/><text x="13.6542%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,346 samples, 1.09%)</title><rect x="13.4083%" y="389" width="1.0928%" height="15" fill="rgb(251,47,18)" fg:x="16515" fg:w="1346"/><text x="13.6583%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,346 samples, 1.09%)</title><rect x="13.4083%" y="373" width="1.0928%" height="15" fill="rgb(242,102,42)" fg:x="16515" fg:w="1346"/><text x="13.6583%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1,346 samples, 1.09%)</title><rect x="13.4083%" y="357" width="1.0928%" height="15" fill="rgb(234,31,38)" fg:x="16515" fg:w="1346"/><text x="13.6583%" y="367.50"></text></g><g><title>__rg_alloc (1,346 samples, 1.09%)</title><rect x="13.4083%" y="341" width="1.0928%" height="15" fill="rgb(221,117,51)" fg:x="16515" fg:w="1346"/><text x="13.6583%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1,346 samples, 1.09%)</title><rect x="13.4083%" y="325" width="1.0928%" height="15" fill="rgb(212,20,18)" fg:x="16515" fg:w="1346"/><text x="13.6583%" y="335.50"></text></g><g><title>sn_rust_alloc (1,337 samples, 1.09%)</title><rect x="13.4156%" y="309" width="1.0855%" height="15" fill="rgb(245,133,36)" fg:x="16524" fg:w="1337"/><text x="13.6656%" y="319.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (28 samples, 0.02%)</title><rect x="14.4784%" y="293" width="0.0227%" height="15" fill="rgb(212,6,19)" fg:x="17833" fg:w="28"/><text x="14.7284%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,744 samples, 1.42%)</title><rect x="13.3523%" y="501" width="1.4159%" height="15" fill="rgb(218,1,36)" fg:x="16446" fg:w="1744"/><text x="13.6023%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,697 samples, 1.38%)</title><rect x="13.3904%" y="485" width="1.3778%" height="15" fill="rgb(246,84,54)" fg:x="16493" fg:w="1697"/><text x="13.6404%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1,697 samples, 1.38%)</title><rect x="13.3904%" y="469" width="1.3778%" height="15" fill="rgb(242,110,6)" fg:x="16493" fg:w="1697"/><text x="13.6404%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,697 samples, 1.38%)</title><rect x="13.3904%" y="453" width="1.3778%" height="15" fill="rgb(214,47,5)" fg:x="16493" fg:w="1697"/><text x="13.6404%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (329 samples, 0.27%)</title><rect x="14.5011%" y="437" width="0.2671%" height="15" fill="rgb(218,159,25)" fg:x="17861" fg:w="329"/><text x="14.7511%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (329 samples, 0.27%)</title><rect x="14.5011%" y="421" width="0.2671%" height="15" fill="rgb(215,211,28)" fg:x="17861" fg:w="329"/><text x="14.7511%" y="431.50"></text></g><g><title>[libc-2.31.so] (329 samples, 0.27%)</title><rect x="14.5011%" y="405" width="0.2671%" height="15" fill="rgb(238,59,32)" fg:x="17861" fg:w="329"/><text x="14.7511%" y="415.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,563 samples, 3.70%)</title><rect x="11.0717%" y="549" width="3.7046%" height="15" fill="rgb(226,82,3)" fg:x="13637" fg:w="4563"/><text x="11.3217%" y="559.50">&lt;cor..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (4,470 samples, 3.63%)</title><rect x="11.1472%" y="533" width="3.6291%" height="15" fill="rgb(240,164,32)" fg:x="13730" fg:w="4470"/><text x="11.3972%" y="543.50">&lt;tre..</text></g><g><title>tremor_runtime::connectors::impls::bench::Acc::next (1,782 samples, 1.45%)</title><rect x="13.3295%" y="517" width="1.4468%" height="15" fill="rgb(232,46,7)" fg:x="16418" fg:w="1782"/><text x="13.5795%" y="527.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,485 samples, 10.14%)</title><rect x="4.6448%" y="869" width="10.1364%" height="15" fill="rgb(229,129,53)" fg:x="5721" fg:w="12485"/><text x="4.8948%" y="879.50">&lt;core::future::..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (5,363 samples, 4.35%)</title><rect x="10.4271%" y="853" width="4.3541%" height="15" fill="rgb(234,188,29)" fg:x="12843" fg:w="5363"/><text x="10.6771%" y="863.50">tremo..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (4,569 samples, 3.71%)</title><rect x="11.0717%" y="837" width="3.7095%" height="15" fill="rgb(246,141,4)" fg:x="13637" fg:w="4569"/><text x="11.3217%" y="847.50">&lt;fut..</text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (4,569 samples, 3.71%)</title><rect x="11.0717%" y="821" width="3.7095%" height="15" fill="rgb(229,23,39)" fg:x="13637" fg:w="4569"/><text x="11.3217%" y="831.50">futu..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (4,569 samples, 3.71%)</title><rect x="11.0717%" y="805" width="3.7095%" height="15" fill="rgb(206,12,3)" fg:x="13637" fg:w="4569"/><text x="11.3217%" y="815.50">&lt;cor..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,569 samples, 3.71%)</title><rect x="11.0717%" y="789" width="3.7095%" height="15" fill="rgb(252,226,20)" fg:x="13637" fg:w="4569"/><text x="11.3217%" y="799.50">&lt;cor..</text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (4,569 samples, 3.71%)</title><rect x="11.0717%" y="773" width="3.7095%" height="15" fill="rgb(216,123,35)" fg:x="13637" fg:w="4569"/><text x="11.3217%" y="783.50">trem..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,569 samples, 3.71%)</title><rect x="11.0717%" y="757" width="3.7095%" height="15" fill="rgb(212,68,40)" fg:x="13637" fg:w="4569"/><text x="11.3217%" y="767.50">&lt;asy..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,569 samples, 3.71%)</title><rect x="11.0717%" y="741" width="3.7095%" height="15" fill="rgb(254,125,32)" fg:x="13637" fg:w="4569"/><text x="11.3217%" y="751.50">&lt;asy..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (4,569 samples, 3.71%)</title><rect x="11.0717%" y="725" width="3.7095%" height="15" fill="rgb(253,97,22)" fg:x="13637" fg:w="4569"/><text x="11.3217%" y="735.50">&lt;cor..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (4,569 samples, 3.71%)</title><rect x="11.0717%" y="709" width="3.7095%" height="15" fill="rgb(241,101,14)" fg:x="13637" fg:w="4569"/><text x="11.3217%" y="719.50">&lt;asy..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (4,569 samples, 3.71%)</title><rect x="11.0717%" y="693" width="3.7095%" height="15" fill="rgb(238,103,29)" fg:x="13637" fg:w="4569"/><text x="11.3217%" y="703.50">asyn..</text></g><g><title>std::panic::catch_unwind (4,569 samples, 3.71%)</title><rect x="11.0717%" y="677" width="3.7095%" height="15" fill="rgb(233,195,47)" fg:x="13637" fg:w="4569"/><text x="11.3217%" y="687.50">std:..</text></g><g><title>std::panicking::try (4,569 samples, 3.71%)</title><rect x="11.0717%" y="661" width="3.7095%" height="15" fill="rgb(246,218,30)" fg:x="13637" fg:w="4569"/><text x="11.3217%" y="671.50">std:..</text></g><g><title>std::panicking::try::do_call (4,569 samples, 3.71%)</title><rect x="11.0717%" y="645" width="3.7095%" height="15" fill="rgb(219,145,47)" fg:x="13637" fg:w="4569"/><text x="11.3217%" y="655.50">std:..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (4,569 samples, 3.71%)</title><rect x="11.0717%" y="629" width="3.7095%" height="15" fill="rgb(243,12,26)" fg:x="13637" fg:w="4569"/><text x="11.3217%" y="639.50">&lt;cor..</text></g><g><title>core::ops::function::FnOnce::call_once (4,569 samples, 3.71%)</title><rect x="11.0717%" y="613" width="3.7095%" height="15" fill="rgb(214,87,16)" fg:x="13637" fg:w="4569"/><text x="11.3217%" y="623.50">core..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (4,569 samples, 3.71%)</title><rect x="11.0717%" y="597" width="3.7095%" height="15" fill="rgb(208,99,42)" fg:x="13637" fg:w="4569"/><text x="11.3217%" y="607.50">asyn..</text></g><g><title>async_ffi::FfiContext::with_context (4,569 samples, 3.71%)</title><rect x="11.0717%" y="581" width="3.7095%" height="15" fill="rgb(253,99,2)" fg:x="13637" fg:w="4569"/><text x="11.3217%" y="591.50">asyn..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (4,569 samples, 3.71%)</title><rect x="11.0717%" y="565" width="3.7095%" height="15" fill="rgb(220,168,23)" fg:x="13637" fg:w="4569"/><text x="11.3217%" y="575.50">asyn..</text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (41 samples, 0.03%)</title><rect x="14.7812%" y="869" width="0.0333%" height="15" fill="rgb(242,38,24)" fg:x="18206" fg:w="41"/><text x="15.0312%" y="879.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (17 samples, 0.01%)</title><rect x="14.8169%" y="869" width="0.0138%" height="15" fill="rgb(225,182,9)" fg:x="18250" fg:w="17"/><text x="15.0669%" y="879.50"></text></g><g><title>&lt;tremor_runtime::codec::binary::Binary as tremor_runtime::codec::Codec&gt;::encode (15 samples, 0.01%)</title><rect x="14.8340%" y="869" width="0.0122%" height="15" fill="rgb(243,178,37)" fg:x="18271" fg:w="15"/><text x="15.0840%" y="879.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (16 samples, 0.01%)</title><rect x="14.8461%" y="869" width="0.0130%" height="15" fill="rgb(232,139,19)" fg:x="18286" fg:w="16"/><text x="15.0961%" y="879.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (63 samples, 0.05%)</title><rect x="14.8591%" y="869" width="0.0511%" height="15" fill="rgb(225,201,24)" fg:x="18302" fg:w="63"/><text x="15.1091%" y="879.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (36 samples, 0.03%)</title><rect x="14.8811%" y="853" width="0.0292%" height="15" fill="rgb(221,47,46)" fg:x="18329" fg:w="36"/><text x="15.1311%" y="863.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (29 samples, 0.02%)</title><rect x="14.8867%" y="837" width="0.0235%" height="15" fill="rgb(249,23,13)" fg:x="18336" fg:w="29"/><text x="15.1367%" y="847.50"></text></g><g><title>[libc-2.31.so] (18 samples, 0.01%)</title><rect x="14.9111%" y="869" width="0.0146%" height="15" fill="rgb(219,9,5)" fg:x="18366" fg:w="18"/><text x="15.1611%" y="879.50"></text></g><g><title>__clock_gettime (75 samples, 0.06%)</title><rect x="14.9387%" y="869" width="0.0609%" height="15" fill="rgb(254,171,16)" fg:x="18400" fg:w="75"/><text x="15.1887%" y="879.50"></text></g><g><title>__vdso_clock_gettime (16 samples, 0.01%)</title><rect x="15.0061%" y="869" width="0.0130%" height="15" fill="rgb(230,171,20)" fg:x="18483" fg:w="16"/><text x="15.2561%" y="879.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (39 samples, 0.03%)</title><rect x="15.0191%" y="869" width="0.0317%" height="15" fill="rgb(210,71,41)" fg:x="18499" fg:w="39"/><text x="15.2691%" y="879.50"></text></g><g><title>abi_stable::erased_types::iterator::next (51 samples, 0.04%)</title><rect x="15.0507%" y="869" width="0.0414%" height="15" fill="rgb(206,173,20)" fg:x="18538" fg:w="51"/><text x="15.3007%" y="879.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint (14 samples, 0.01%)</title><rect x="15.0921%" y="869" width="0.0114%" height="15" fill="rgb(233,88,34)" fg:x="18589" fg:w="14"/><text x="15.3421%" y="879.50"></text></g><g><title>abi_stable::std_types::arc::vtable_mod::destructor_arc (29 samples, 0.02%)</title><rect x="15.1035%" y="869" width="0.0235%" height="15" fill="rgb(223,209,46)" fg:x="18603" fg:w="29"/><text x="15.3535%" y="879.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (20 samples, 0.02%)</title><rect x="15.1271%" y="869" width="0.0162%" height="15" fill="rgb(250,43,18)" fg:x="18632" fg:w="20"/><text x="15.3771%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (20 samples, 0.02%)</title><rect x="15.1271%" y="853" width="0.0162%" height="15" fill="rgb(208,13,10)" fg:x="18632" fg:w="20"/><text x="15.3771%" y="863.50"></text></g><g><title>alloc::alloc::box_free (20 samples, 0.02%)</title><rect x="15.1271%" y="837" width="0.0162%" height="15" fill="rgb(212,200,36)" fg:x="18632" fg:w="20"/><text x="15.3771%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (20 samples, 0.02%)</title><rect x="15.1271%" y="821" width="0.0162%" height="15" fill="rgb(225,90,30)" fg:x="18632" fg:w="20"/><text x="15.3771%" y="831.50"></text></g><g><title>alloc::alloc::dealloc (20 samples, 0.02%)</title><rect x="15.1271%" y="805" width="0.0162%" height="15" fill="rgb(236,182,39)" fg:x="18632" fg:w="20"/><text x="15.3771%" y="815.50"></text></g><g><title>__rg_dealloc (20 samples, 0.02%)</title><rect x="15.1271%" y="789" width="0.0162%" height="15" fill="rgb(212,144,35)" fg:x="18632" fg:w="20"/><text x="15.3771%" y="799.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (20 samples, 0.02%)</title><rect x="15.1271%" y="773" width="0.0162%" height="15" fill="rgb(228,63,44)" fg:x="18632" fg:w="20"/><text x="15.3771%" y="783.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (16 samples, 0.01%)</title><rect x="15.1433%" y="869" width="0.0130%" height="15" fill="rgb(228,109,6)" fg:x="18652" fg:w="16"/><text x="15.3933%" y="879.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (87 samples, 0.07%)</title><rect x="15.1563%" y="869" width="0.0706%" height="15" fill="rgb(238,117,24)" fg:x="18668" fg:w="87"/><text x="15.4063%" y="879.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (13 samples, 0.01%)</title><rect x="15.2302%" y="869" width="0.0106%" height="15" fill="rgb(242,26,26)" fg:x="18759" fg:w="13"/><text x="15.4802%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (17 samples, 0.01%)</title><rect x="15.3268%" y="661" width="0.0138%" height="15" fill="rgb(221,92,48)" fg:x="18878" fg:w="17"/><text x="15.5768%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (17 samples, 0.01%)</title><rect x="15.3268%" y="645" width="0.0138%" height="15" fill="rgb(209,209,32)" fg:x="18878" fg:w="17"/><text x="15.5768%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (17 samples, 0.01%)</title><rect x="15.3268%" y="629" width="0.0138%" height="15" fill="rgb(221,70,22)" fg:x="18878" fg:w="17"/><text x="15.5768%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.01%)</title><rect x="15.3268%" y="613" width="0.0138%" height="15" fill="rgb(248,145,5)" fg:x="18878" fg:w="17"/><text x="15.5768%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.01%)</title><rect x="15.3268%" y="597" width="0.0138%" height="15" fill="rgb(226,116,26)" fg:x="18878" fg:w="17"/><text x="15.5768%" y="607.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.01%)</title><rect x="15.3268%" y="581" width="0.0138%" height="15" fill="rgb(244,5,17)" fg:x="18878" fg:w="17"/><text x="15.5768%" y="591.50"></text></g><g><title>__rg_alloc (17 samples, 0.01%)</title><rect x="15.3268%" y="565" width="0.0138%" height="15" fill="rgb(252,159,33)" fg:x="18878" fg:w="17"/><text x="15.5768%" y="575.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (17 samples, 0.01%)</title><rect x="15.3268%" y="549" width="0.0138%" height="15" fill="rgb(206,71,0)" fg:x="18878" fg:w="17"/><text x="15.5768%" y="559.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (26 samples, 0.02%)</title><rect x="15.3268%" y="773" width="0.0211%" height="15" fill="rgb(233,118,54)" fg:x="18878" fg:w="26"/><text x="15.5768%" y="783.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (26 samples, 0.02%)</title><rect x="15.3268%" y="757" width="0.0211%" height="15" fill="rgb(234,83,48)" fg:x="18878" fg:w="26"/><text x="15.5768%" y="767.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (26 samples, 0.02%)</title><rect x="15.3268%" y="741" width="0.0211%" height="15" fill="rgb(228,3,54)" fg:x="18878" fg:w="26"/><text x="15.5768%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (26 samples, 0.02%)</title><rect x="15.3268%" y="725" width="0.0211%" height="15" fill="rgb(226,155,13)" fg:x="18878" fg:w="26"/><text x="15.5768%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (26 samples, 0.02%)</title><rect x="15.3268%" y="709" width="0.0211%" height="15" fill="rgb(241,28,37)" fg:x="18878" fg:w="26"/><text x="15.5768%" y="719.50"></text></g><g><title>alloc::slice::hack::to_vec (26 samples, 0.02%)</title><rect x="15.3268%" y="693" width="0.0211%" height="15" fill="rgb(233,93,10)" fg:x="18878" fg:w="26"/><text x="15.5768%" y="703.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (26 samples, 0.02%)</title><rect x="15.3268%" y="677" width="0.0211%" height="15" fill="rgb(225,113,19)" fg:x="18878" fg:w="26"/><text x="15.5768%" y="687.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (127 samples, 0.10%)</title><rect x="15.2480%" y="869" width="0.1031%" height="15" fill="rgb(241,2,18)" fg:x="18781" fg:w="127"/><text x="15.4980%" y="879.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (30 samples, 0.02%)</title><rect x="15.3268%" y="853" width="0.0244%" height="15" fill="rgb(228,207,21)" fg:x="18878" fg:w="30"/><text x="15.5768%" y="863.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (30 samples, 0.02%)</title><rect x="15.3268%" y="837" width="0.0244%" height="15" fill="rgb(213,211,35)" fg:x="18878" fg:w="30"/><text x="15.5768%" y="847.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (30 samples, 0.02%)</title><rect x="15.3268%" y="821" width="0.0244%" height="15" fill="rgb(209,83,10)" fg:x="18878" fg:w="30"/><text x="15.5768%" y="831.50"></text></g><g><title>alloc::slice::hack::to_vec (30 samples, 0.02%)</title><rect x="15.3268%" y="805" width="0.0244%" height="15" fill="rgb(209,164,1)" fg:x="18878" fg:w="30"/><text x="15.5768%" y="815.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (30 samples, 0.02%)</title><rect x="15.3268%" y="789" width="0.0244%" height="15" fill="rgb(213,184,43)" fg:x="18878" fg:w="30"/><text x="15.5768%" y="799.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (79 samples, 0.06%)</title><rect x="15.3511%" y="869" width="0.0641%" height="15" fill="rgb(231,61,34)" fg:x="18908" fg:w="79"/><text x="15.6011%" y="879.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (52 samples, 0.04%)</title><rect x="15.3731%" y="853" width="0.0422%" height="15" fill="rgb(235,75,3)" fg:x="18935" fg:w="52"/><text x="15.6231%" y="863.50"></text></g><g><title>core::mem::drop (52 samples, 0.04%)</title><rect x="15.3731%" y="837" width="0.0422%" height="15" fill="rgb(220,106,47)" fg:x="18935" fg:w="52"/><text x="15.6231%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (46 samples, 0.04%)</title><rect x="15.3779%" y="821" width="0.0373%" height="15" fill="rgb(210,196,33)" fg:x="18941" fg:w="46"/><text x="15.6279%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (46 samples, 0.04%)</title><rect x="15.3779%" y="805" width="0.0373%" height="15" fill="rgb(229,154,42)" fg:x="18941" fg:w="46"/><text x="15.6279%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::vec::private::RVec&lt;u8&gt;]&gt; (46 samples, 0.04%)</title><rect x="15.3779%" y="789" width="0.0373%" height="15" fill="rgb(228,114,26)" fg:x="18941" fg:w="46"/><text x="15.6279%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (46 samples, 0.04%)</title><rect x="15.3779%" y="773" width="0.0373%" height="15" fill="rgb(208,144,1)" fg:x="18941" fg:w="46"/><text x="15.6279%" y="783.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (46 samples, 0.04%)</title><rect x="15.3779%" y="757" width="0.0373%" height="15" fill="rgb(239,112,37)" fg:x="18941" fg:w="46"/><text x="15.6279%" y="767.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (25 samples, 0.02%)</title><rect x="15.4202%" y="869" width="0.0203%" height="15" fill="rgb(210,96,50)" fg:x="18993" fg:w="25"/><text x="15.6702%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (23 samples, 0.02%)</title><rect x="15.4218%" y="853" width="0.0187%" height="15" fill="rgb(222,178,2)" fg:x="18995" fg:w="23"/><text x="15.6718%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (23 samples, 0.02%)</title><rect x="15.4218%" y="837" width="0.0187%" height="15" fill="rgb(226,74,18)" fg:x="18995" fg:w="23"/><text x="15.6718%" y="847.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (23 samples, 0.02%)</title><rect x="15.4218%" y="821" width="0.0187%" height="15" fill="rgb(225,67,54)" fg:x="18995" fg:w="23"/><text x="15.6718%" y="831.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (55 samples, 0.04%)</title><rect x="15.4404%" y="869" width="0.0447%" height="15" fill="rgb(251,92,32)" fg:x="19018" fg:w="55"/><text x="15.6904%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (13 samples, 0.01%)</title><rect x="15.4745%" y="853" width="0.0106%" height="15" fill="rgb(228,149,22)" fg:x="19060" fg:w="13"/><text x="15.7245%" y="863.50"></text></g><g><title>[libc-2.31.so] (235 samples, 0.19%)</title><rect x="15.8935%" y="501" width="0.1908%" height="15" fill="rgb(243,54,13)" fg:x="19576" fg:w="235"/><text x="16.1435%" y="511.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (23 samples, 0.02%)</title><rect x="16.5081%" y="485" width="0.0187%" height="15" fill="rgb(243,180,28)" fg:x="20333" fg:w="23"/><text x="16.7581%" y="495.50"></text></g><g><title>&lt;abi_stable::sabi_types::constructor::Constructor&lt;T&gt; as core::cmp::PartialEq&gt;::eq (26 samples, 0.02%)</title><rect x="16.5625%" y="437" width="0.0211%" height="15" fill="rgb(208,167,24)" fg:x="20400" fg:w="26"/><text x="16.8125%" y="447.50"></text></g><g><title>abi_stable::sabi_types::constructor::Constructor&lt;T&gt;::get (19 samples, 0.02%)</title><rect x="16.5682%" y="421" width="0.0154%" height="15" fill="rgb(245,73,45)" fg:x="20407" fg:w="19"/><text x="16.8182%" y="431.50"></text></g><g><title>abi_stable::std_types::utypeid::new_utypeid (14 samples, 0.01%)</title><rect x="16.5722%" y="405" width="0.0114%" height="15" fill="rgb(237,203,48)" fg:x="20412" fg:w="14"/><text x="16.8222%" y="415.50"></text></g><g><title>abi_stable::std_types::utypeid::UTypeId::new (14 samples, 0.01%)</title><rect x="16.5722%" y="389" width="0.0114%" height="15" fill="rgb(211,197,16)" fg:x="20412" fg:w="14"/><text x="16.8222%" y="399.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (167 samples, 0.14%)</title><rect x="16.5268%" y="485" width="0.1356%" height="15" fill="rgb(243,99,51)" fg:x="20356" fg:w="167"/><text x="16.7768%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::convert::From&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from (152 samples, 0.12%)</title><rect x="16.5389%" y="469" width="0.1234%" height="15" fill="rgb(215,123,29)" fg:x="20371" fg:w="152"/><text x="16.7889%" y="479.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::into_vec (142 samples, 0.12%)</title><rect x="16.5470%" y="453" width="0.1153%" height="15" fill="rgb(239,186,37)" fg:x="20381" fg:w="142"/><text x="16.7970%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::from_raw_parts (97 samples, 0.08%)</title><rect x="16.5836%" y="437" width="0.0788%" height="15" fill="rgb(252,136,39)" fg:x="20426" fg:w="97"/><text x="16.8336%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (97 samples, 0.08%)</title><rect x="16.5836%" y="421" width="0.0788%" height="15" fill="rgb(223,213,32)" fg:x="20426" fg:w="97"/><text x="16.8336%" y="431.50"></text></g><g><title>[libc-2.31.so] (313 samples, 0.25%)</title><rect x="16.6623%" y="469" width="0.2541%" height="15" fill="rgb(233,115,5)" fg:x="20523" fg:w="313"/><text x="16.9123%" y="479.50"></text></g><g><title>[libc-2.31.so] (85 samples, 0.07%)</title><rect x="17.1568%" y="453" width="0.0690%" height="15" fill="rgb(207,226,44)" fg:x="21132" fg:w="85"/><text x="17.4068%" y="463.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (238 samples, 0.19%)</title><rect x="17.2891%" y="213" width="0.1932%" height="15" fill="rgb(208,126,0)" fg:x="21295" fg:w="238"/><text x="17.5391%" y="223.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (310 samples, 0.25%)</title><rect x="17.2347%" y="389" width="0.2517%" height="15" fill="rgb(244,66,21)" fg:x="21228" fg:w="310"/><text x="17.4847%" y="399.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (297 samples, 0.24%)</title><rect x="17.2453%" y="373" width="0.2411%" height="15" fill="rgb(222,97,12)" fg:x="21241" fg:w="297"/><text x="17.4953%" y="383.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (297 samples, 0.24%)</title><rect x="17.2453%" y="357" width="0.2411%" height="15" fill="rgb(219,213,19)" fg:x="21241" fg:w="297"/><text x="17.4953%" y="367.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (288 samples, 0.23%)</title><rect x="17.2526%" y="341" width="0.2338%" height="15" fill="rgb(252,169,30)" fg:x="21250" fg:w="288"/><text x="17.5026%" y="351.50"></text></g><g><title>alloc::alloc::exchange_malloc (279 samples, 0.23%)</title><rect x="17.2599%" y="325" width="0.2265%" height="15" fill="rgb(206,32,51)" fg:x="21259" fg:w="279"/><text x="17.5099%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (279 samples, 0.23%)</title><rect x="17.2599%" y="309" width="0.2265%" height="15" fill="rgb(250,172,42)" fg:x="21259" fg:w="279"/><text x="17.5099%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (279 samples, 0.23%)</title><rect x="17.2599%" y="293" width="0.2265%" height="15" fill="rgb(209,34,43)" fg:x="21259" fg:w="279"/><text x="17.5099%" y="303.50"></text></g><g><title>alloc::alloc::alloc (279 samples, 0.23%)</title><rect x="17.2599%" y="277" width="0.2265%" height="15" fill="rgb(223,11,35)" fg:x="21259" fg:w="279"/><text x="17.5099%" y="287.50"></text></g><g><title>__rg_alloc (279 samples, 0.23%)</title><rect x="17.2599%" y="261" width="0.2265%" height="15" fill="rgb(251,219,26)" fg:x="21259" fg:w="279"/><text x="17.5099%" y="271.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (279 samples, 0.23%)</title><rect x="17.2599%" y="245" width="0.2265%" height="15" fill="rgb(231,119,3)" fg:x="21259" fg:w="279"/><text x="17.5099%" y="255.50"></text></g><g><title>sn_rust_alloc (279 samples, 0.23%)</title><rect x="17.2599%" y="229" width="0.2265%" height="15" fill="rgb(216,97,11)" fg:x="21259" fg:w="279"/><text x="17.5099%" y="239.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (665 samples, 0.54%)</title><rect x="17.2307%" y="453" width="0.5399%" height="15" fill="rgb(223,59,9)" fg:x="21223" fg:w="665"/><text x="17.4807%" y="463.50"></text></g><g><title>core::ops::function::FnOnce::call_once (665 samples, 0.54%)</title><rect x="17.2307%" y="437" width="0.5399%" height="15" fill="rgb(233,93,31)" fg:x="21223" fg:w="665"/><text x="17.4807%" y="447.50"></text></g><g><title>value_trait::Builder::object (665 samples, 0.54%)</title><rect x="17.2307%" y="421" width="0.5399%" height="15" fill="rgb(239,81,33)" fg:x="21223" fg:w="665"/><text x="17.4807%" y="431.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (665 samples, 0.54%)</title><rect x="17.2307%" y="405" width="0.5399%" height="15" fill="rgb(213,120,34)" fg:x="21223" fg:w="665"/><text x="17.4807%" y="415.50"></text></g><g><title>tremor_value::value::Value::Object (350 samples, 0.28%)</title><rect x="17.4864%" y="389" width="0.2842%" height="15" fill="rgb(243,49,53)" fg:x="21538" fg:w="350"/><text x="17.7364%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.01%)</title><rect x="17.7787%" y="293" width="0.0106%" height="15" fill="rgb(247,216,33)" fg:x="21898" fg:w="13"/><text x="18.0287%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.01%)</title><rect x="17.7787%" y="277" width="0.0106%" height="15" fill="rgb(226,26,14)" fg:x="21898" fg:w="13"/><text x="18.0287%" y="287.50"></text></g><g><title>__rg_dealloc (13 samples, 0.01%)</title><rect x="17.7787%" y="261" width="0.0106%" height="15" fill="rgb(215,49,53)" fg:x="21898" fg:w="13"/><text x="18.0287%" y="271.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (13 samples, 0.01%)</title><rect x="17.7787%" y="245" width="0.0106%" height="15" fill="rgb(245,162,40)" fg:x="21898" fg:w="13"/><text x="18.0287%" y="255.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (33 samples, 0.03%)</title><rect x="17.7779%" y="389" width="0.0268%" height="15" fill="rgb(229,68,17)" fg:x="21897" fg:w="33"/><text x="18.0279%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (33 samples, 0.03%)</title><rect x="17.7779%" y="373" width="0.0268%" height="15" fill="rgb(213,182,10)" fg:x="21897" fg:w="33"/><text x="18.0279%" y="383.50"></text></g><g><title>core::mem::drop (32 samples, 0.03%)</title><rect x="17.7787%" y="357" width="0.0260%" height="15" fill="rgb(245,125,30)" fg:x="21898" fg:w="32"/><text x="18.0287%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (32 samples, 0.03%)</title><rect x="17.7787%" y="341" width="0.0260%" height="15" fill="rgb(232,202,2)" fg:x="21898" fg:w="32"/><text x="18.0287%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (32 samples, 0.03%)</title><rect x="17.7787%" y="325" width="0.0260%" height="15" fill="rgb(237,140,51)" fg:x="21898" fg:w="32"/><text x="18.0287%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.03%)</title><rect x="17.7787%" y="309" width="0.0260%" height="15" fill="rgb(236,157,25)" fg:x="21898" fg:w="32"/><text x="18.0287%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (19 samples, 0.02%)</title><rect x="17.7892%" y="293" width="0.0154%" height="15" fill="rgb(219,209,0)" fg:x="21911" fg:w="19"/><text x="18.0392%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (110 samples, 0.09%)</title><rect x="17.7779%" y="437" width="0.0893%" height="15" fill="rgb(240,116,54)" fg:x="21897" fg:w="110"/><text x="18.0279%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (110 samples, 0.09%)</title><rect x="17.7779%" y="421" width="0.0893%" height="15" fill="rgb(216,10,36)" fg:x="21897" fg:w="110"/><text x="18.0279%" y="431.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (110 samples, 0.09%)</title><rect x="17.7779%" y="405" width="0.0893%" height="15" fill="rgb(222,72,44)" fg:x="21897" fg:w="110"/><text x="18.0279%" y="415.50"></text></g><g><title>sn_rust_dealloc (77 samples, 0.06%)</title><rect x="17.8047%" y="389" width="0.0625%" height="15" fill="rgb(232,159,9)" fg:x="21930" fg:w="77"/><text x="18.0547%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (89 samples, 0.07%)</title><rect x="17.8737%" y="341" width="0.0723%" height="15" fill="rgb(210,39,32)" fg:x="22015" fg:w="89"/><text x="18.1237%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (89 samples, 0.07%)</title><rect x="17.8737%" y="325" width="0.0723%" height="15" fill="rgb(216,194,45)" fg:x="22015" fg:w="89"/><text x="18.1237%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (72 samples, 0.06%)</title><rect x="17.8875%" y="309" width="0.0585%" height="15" fill="rgb(218,18,35)" fg:x="22032" fg:w="72"/><text x="18.1375%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (72 samples, 0.06%)</title><rect x="17.8875%" y="293" width="0.0585%" height="15" fill="rgb(207,83,51)" fg:x="22032" fg:w="72"/><text x="18.1375%" y="303.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (72 samples, 0.06%)</title><rect x="17.8875%" y="277" width="0.0585%" height="15" fill="rgb(225,63,43)" fg:x="22032" fg:w="72"/><text x="18.1375%" y="287.50"></text></g><g><title>sn_rust_dealloc (54 samples, 0.04%)</title><rect x="17.9021%" y="261" width="0.0438%" height="15" fill="rgb(207,57,36)" fg:x="22050" fg:w="54"/><text x="18.1521%" y="271.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (107 samples, 0.09%)</title><rect x="17.8672%" y="405" width="0.0869%" height="15" fill="rgb(216,99,33)" fg:x="22007" fg:w="107"/><text x="18.1172%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (104 samples, 0.08%)</title><rect x="17.8696%" y="389" width="0.0844%" height="15" fill="rgb(225,42,16)" fg:x="22010" fg:w="104"/><text x="18.1196%" y="399.50"></text></g><g><title>core::mem::drop (99 samples, 0.08%)</title><rect x="17.8737%" y="373" width="0.0804%" height="15" fill="rgb(220,201,45)" fg:x="22015" fg:w="99"/><text x="18.1237%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (99 samples, 0.08%)</title><rect x="17.8737%" y="357" width="0.0804%" height="15" fill="rgb(225,33,4)" fg:x="22015" fg:w="99"/><text x="18.1237%" y="367.50"></text></g><g><title>sn_rust_dealloc (32 samples, 0.03%)</title><rect x="17.9540%" y="405" width="0.0260%" height="15" fill="rgb(224,33,50)" fg:x="22114" fg:w="32"/><text x="18.2040%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (250 samples, 0.20%)</title><rect x="17.7779%" y="453" width="0.2030%" height="15" fill="rgb(246,198,51)" fg:x="21897" fg:w="250"/><text x="18.0279%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (140 samples, 0.11%)</title><rect x="17.8672%" y="437" width="0.1137%" height="15" fill="rgb(205,22,4)" fg:x="22007" fg:w="140"/><text x="18.1172%" y="447.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (140 samples, 0.11%)</title><rect x="17.8672%" y="421" width="0.1137%" height="15" fill="rgb(206,3,8)" fg:x="22007" fg:w="140"/><text x="18.1172%" y="431.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (24 samples, 0.02%)</title><rect x="17.9979%" y="389" width="0.0195%" height="15" fill="rgb(251,23,15)" fg:x="22168" fg:w="24"/><text x="18.2479%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (76 samples, 0.06%)</title><rect x="17.9808%" y="453" width="0.0617%" height="15" fill="rgb(252,88,28)" fg:x="22147" fg:w="76"/><text x="18.2308%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (71 samples, 0.06%)</title><rect x="17.9849%" y="437" width="0.0576%" height="15" fill="rgb(212,127,14)" fg:x="22152" fg:w="71"/><text x="18.2349%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (71 samples, 0.06%)</title><rect x="17.9849%" y="421" width="0.0576%" height="15" fill="rgb(247,145,37)" fg:x="22152" fg:w="71"/><text x="18.2349%" y="431.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (71 samples, 0.06%)</title><rect x="17.9849%" y="405" width="0.0576%" height="15" fill="rgb(209,117,53)" fg:x="22152" fg:w="71"/><text x="18.2349%" y="415.50"></text></g><g><title>sn_rust_dealloc (31 samples, 0.03%)</title><rect x="18.0174%" y="389" width="0.0252%" height="15" fill="rgb(212,90,42)" fg:x="22192" fg:w="31"/><text x="18.2674%" y="399.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (26 samples, 0.02%)</title><rect x="18.0604%" y="437" width="0.0211%" height="15" fill="rgb(218,164,37)" fg:x="22245" fg:w="26"/><text x="18.3104%" y="447.50"></text></g><g><title>core::time::Duration::as_nanos (24 samples, 0.02%)</title><rect x="18.0815%" y="437" width="0.0195%" height="15" fill="rgb(246,65,34)" fg:x="22271" fg:w="24"/><text x="18.3315%" y="447.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (94 samples, 0.08%)</title><rect x="18.1010%" y="421" width="0.0763%" height="15" fill="rgb(231,100,33)" fg:x="22295" fg:w="94"/><text x="18.3510%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (44 samples, 0.04%)</title><rect x="18.2074%" y="389" width="0.0357%" height="15" fill="rgb(228,126,14)" fg:x="22426" fg:w="44"/><text x="18.4574%" y="399.50"></text></g><g><title>core::cmp::PartialOrd::ge (44 samples, 0.04%)</title><rect x="18.2074%" y="373" width="0.0357%" height="15" fill="rgb(215,173,21)" fg:x="22426" fg:w="44"/><text x="18.4574%" y="383.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (44 samples, 0.04%)</title><rect x="18.2074%" y="357" width="0.0357%" height="15" fill="rgb(210,6,40)" fg:x="22426" fg:w="44"/><text x="18.4574%" y="367.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (44 samples, 0.04%)</title><rect x="18.2074%" y="341" width="0.0357%" height="15" fill="rgb(212,48,18)" fg:x="22426" fg:w="44"/><text x="18.4574%" y="351.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (44 samples, 0.04%)</title><rect x="18.2074%" y="325" width="0.0357%" height="15" fill="rgb(230,214,11)" fg:x="22426" fg:w="44"/><text x="18.4574%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (24 samples, 0.02%)</title><rect x="18.2236%" y="309" width="0.0195%" height="15" fill="rgb(254,105,39)" fg:x="22446" fg:w="24"/><text x="18.4736%" y="319.50"></text></g><g><title>std::time::SystemTime::duration_since (196 samples, 0.16%)</title><rect x="18.1010%" y="437" width="0.1591%" height="15" fill="rgb(245,158,5)" fg:x="22295" fg:w="196"/><text x="18.3510%" y="447.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (102 samples, 0.08%)</title><rect x="18.1773%" y="421" width="0.0828%" height="15" fill="rgb(249,208,11)" fg:x="22389" fg:w="102"/><text x="18.4273%" y="431.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (102 samples, 0.08%)</title><rect x="18.1773%" y="405" width="0.0828%" height="15" fill="rgb(210,39,28)" fg:x="22389" fg:w="102"/><text x="18.4273%" y="415.50"></text></g><g><title>core::time::Duration::new (21 samples, 0.02%)</title><rect x="18.2431%" y="389" width="0.0170%" height="15" fill="rgb(211,56,53)" fg:x="22470" fg:w="21"/><text x="18.4931%" y="399.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,358 samples, 1.91%)</title><rect x="16.6623%" y="485" width="1.9144%" height="15" fill="rgb(226,201,30)" fg:x="20523" fg:w="2358"/><text x="16.9123%" y="495.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (2,045 samples, 1.66%)</title><rect x="16.9165%" y="469" width="1.6603%" height="15" fill="rgb(239,101,34)" fg:x="20836" fg:w="2045"/><text x="17.1665%" y="479.50"></text></g><g><title>tremor_common::time::nanotime (658 samples, 0.53%)</title><rect x="18.0425%" y="453" width="0.5342%" height="15" fill="rgb(226,209,5)" fg:x="22223" fg:w="658"/><text x="18.2925%" y="463.50"></text></g><g><title>std::time::SystemTime::now (390 samples, 0.32%)</title><rect x="18.2601%" y="437" width="0.3166%" height="15" fill="rgb(250,105,47)" fg:x="22491" fg:w="390"/><text x="18.5101%" y="447.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (390 samples, 0.32%)</title><rect x="18.2601%" y="421" width="0.3166%" height="15" fill="rgb(230,72,3)" fg:x="22491" fg:w="390"/><text x="18.5101%" y="431.50"></text></g><g><title>std::sys::unix::time::inner::now (390 samples, 0.32%)</title><rect x="18.2601%" y="405" width="0.3166%" height="15" fill="rgb(232,218,39)" fg:x="22491" fg:w="390"/><text x="18.5101%" y="415.50"></text></g><g><title>__clock_gettime (315 samples, 0.26%)</title><rect x="18.3210%" y="389" width="0.2557%" height="15" fill="rgb(248,166,6)" fg:x="22566" fg:w="315"/><text x="18.5710%" y="399.50"></text></g><g><title>__vdso_clock_gettime (296 samples, 0.24%)</title><rect x="18.3364%" y="373" width="0.2403%" height="15" fill="rgb(247,89,20)" fg:x="22585" fg:w="296"/><text x="18.5864%" y="383.50"></text></g><g><title>[[vdso]] (263 samples, 0.21%)</title><rect x="18.3632%" y="357" width="0.2135%" height="15" fill="rgb(248,130,54)" fg:x="22618" fg:w="263"/><text x="18.6132%" y="367.50"></text></g><g><title>[libc-2.31.so] (504 samples, 0.41%)</title><rect x="18.5768%" y="485" width="0.4092%" height="15" fill="rgb(234,196,4)" fg:x="22881" fg:w="504"/><text x="18.8268%" y="495.50"></text></g><g><title>abi_stable::std_types::option::ROption&lt;T&gt;::map (15 samples, 0.01%)</title><rect x="18.9860%" y="485" width="0.0122%" height="15" fill="rgb(250,143,31)" fg:x="23385" fg:w="15"/><text x="19.2360%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}}&gt;&gt; (13 samples, 0.01%)</title><rect x="18.9981%" y="485" width="0.0106%" height="15" fill="rgb(211,110,34)" fg:x="23400" fg:w="13"/><text x="19.2481%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}}&gt; (13 samples, 0.01%)</title><rect x="18.9981%" y="469" width="0.0106%" height="15" fill="rgb(215,124,48)" fg:x="23400" fg:w="13"/><text x="19.2481%" y="479.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,965 samples, 3.22%)</title><rect x="15.8935%" y="517" width="3.2191%" height="15" fill="rgb(216,46,13)" fg:x="19576" fg:w="3965"/><text x="16.1435%" y="527.50">&lt;co..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (3,730 samples, 3.03%)</title><rect x="16.0843%" y="501" width="3.0283%" height="15" fill="rgb(205,184,25)" fg:x="19811" fg:w="3730"/><text x="16.3343%" y="511.50">tre..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data (128 samples, 0.10%)</title><rect x="19.0087%" y="485" width="0.1039%" height="15" fill="rgb(228,1,10)" fg:x="23413" fg:w="128"/><text x="19.2587%" y="495.50"></text></g><g><title>[libc-2.31.so] (362 samples, 0.29%)</title><rect x="19.1199%" y="517" width="0.2939%" height="15" fill="rgb(213,116,27)" fg:x="23550" fg:w="362"/><text x="19.3699%" y="527.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (262 samples, 0.21%)</title><rect x="19.4138%" y="517" width="0.2127%" height="15" fill="rgb(241,95,50)" fg:x="23912" fg:w="262"/><text x="19.6638%" y="527.50"></text></g><g><title>alloc::alloc::exchange_malloc (108 samples, 0.09%)</title><rect x="19.5388%" y="501" width="0.0877%" height="15" fill="rgb(238,48,32)" fg:x="24066" fg:w="108"/><text x="19.7888%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (108 samples, 0.09%)</title><rect x="19.5388%" y="485" width="0.0877%" height="15" fill="rgb(235,113,49)" fg:x="24066" fg:w="108"/><text x="19.7888%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (108 samples, 0.09%)</title><rect x="19.5388%" y="469" width="0.0877%" height="15" fill="rgb(205,127,43)" fg:x="24066" fg:w="108"/><text x="19.7888%" y="479.50"></text></g><g><title>alloc::alloc::alloc (107 samples, 0.09%)</title><rect x="19.5397%" y="453" width="0.0869%" height="15" fill="rgb(250,162,2)" fg:x="24067" fg:w="107"/><text x="19.7897%" y="463.50"></text></g><g><title>__rg_alloc (107 samples, 0.09%)</title><rect x="19.5397%" y="437" width="0.0869%" height="15" fill="rgb(220,13,41)" fg:x="24067" fg:w="107"/><text x="19.7897%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (107 samples, 0.09%)</title><rect x="19.5397%" y="421" width="0.0869%" height="15" fill="rgb(249,221,25)" fg:x="24067" fg:w="107"/><text x="19.7897%" y="431.50"></text></g><g><title>sn_rust_alloc (97 samples, 0.08%)</title><rect x="19.5478%" y="405" width="0.0788%" height="15" fill="rgb(215,208,19)" fg:x="24077" fg:w="97"/><text x="19.7978%" y="415.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (60 samples, 0.05%)</title><rect x="19.5778%" y="389" width="0.0487%" height="15" fill="rgb(236,175,2)" fg:x="24114" fg:w="60"/><text x="19.8278%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}}&gt;&gt; (17 samples, 0.01%)</title><rect x="19.6314%" y="517" width="0.0138%" height="15" fill="rgb(241,52,2)" fg:x="24180" fg:w="17"/><text x="19.8814%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}}&gt; (17 samples, 0.01%)</title><rect x="19.6314%" y="501" width="0.0138%" height="15" fill="rgb(248,140,14)" fg:x="24180" fg:w="17"/><text x="19.8814%" y="511.50"></text></g><g><title>async_global_executor::reactor::block_on (5,139 samples, 4.17%)</title><rect x="15.4965%" y="869" width="4.1723%" height="15" fill="rgb(253,22,42)" fg:x="19087" fg:w="5139"/><text x="15.7465%" y="879.50">async..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (5,139 samples, 4.17%)</title><rect x="15.4965%" y="853" width="4.1723%" height="15" fill="rgb(234,61,47)" fg:x="19087" fg:w="5139"/><text x="15.7465%" y="863.50">async..</text></g><g><title>async_io::driver::block_on (5,139 samples, 4.17%)</title><rect x="15.4965%" y="837" width="4.1723%" height="15" fill="rgb(208,226,15)" fg:x="19087" fg:w="5139"/><text x="15.7465%" y="847.50">async..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (5,139 samples, 4.17%)</title><rect x="15.4965%" y="821" width="4.1723%" height="15" fill="rgb(217,221,4)" fg:x="19087" fg:w="5139"/><text x="15.7465%" y="831.50">&lt;futu..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,139 samples, 4.17%)</title><rect x="15.4965%" y="805" width="4.1723%" height="15" fill="rgb(212,174,34)" fg:x="19087" fg:w="5139"/><text x="15.7465%" y="815.50">&lt;core..</text></g><g><title>async_executor::Executor::run::{{closure}} (5,139 samples, 4.17%)</title><rect x="15.4965%" y="789" width="4.1723%" height="15" fill="rgb(253,83,4)" fg:x="19087" fg:w="5139"/><text x="15.7465%" y="799.50">async..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (5,139 samples, 4.17%)</title><rect x="15.4965%" y="773" width="4.1723%" height="15" fill="rgb(250,195,49)" fg:x="19087" fg:w="5139"/><text x="15.7465%" y="783.50">&lt;futu..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,139 samples, 4.17%)</title><rect x="15.4965%" y="757" width="4.1723%" height="15" fill="rgb(241,192,25)" fg:x="19087" fg:w="5139"/><text x="15.7465%" y="767.50">&lt;core..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (5,139 samples, 4.17%)</title><rect x="15.4965%" y="741" width="4.1723%" height="15" fill="rgb(208,124,10)" fg:x="19087" fg:w="5139"/><text x="15.7465%" y="751.50">async..</text></g><g><title>async_task::runnable::Runnable::run (5,139 samples, 4.17%)</title><rect x="15.4965%" y="725" width="4.1723%" height="15" fill="rgb(222,33,0)" fg:x="19087" fg:w="5139"/><text x="15.7465%" y="735.50">async..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (5,139 samples, 4.17%)</title><rect x="15.4965%" y="709" width="4.1723%" height="15" fill="rgb(234,209,28)" fg:x="19087" fg:w="5139"/><text x="15.7465%" y="719.50">async..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (5,139 samples, 4.17%)</title><rect x="15.4965%" y="693" width="4.1723%" height="15" fill="rgb(224,11,23)" fg:x="19087" fg:w="5139"/><text x="15.7465%" y="703.50">&lt;core..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,139 samples, 4.17%)</title><rect x="15.4965%" y="677" width="4.1723%" height="15" fill="rgb(232,99,1)" fg:x="19087" fg:w="5139"/><text x="15.7465%" y="687.50">&lt;core..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (5,139 samples, 4.17%)</title><rect x="15.4965%" y="661" width="4.1723%" height="15" fill="rgb(237,95,45)" fg:x="19087" fg:w="5139"/><text x="15.7465%" y="671.50">async..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (5,139 samples, 4.17%)</title><rect x="15.4965%" y="645" width="4.1723%" height="15" fill="rgb(208,109,11)" fg:x="19087" fg:w="5139"/><text x="15.7465%" y="655.50">&lt;asyn..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (5,139 samples, 4.17%)</title><rect x="15.4965%" y="629" width="4.1723%" height="15" fill="rgb(216,190,48)" fg:x="19087" fg:w="5139"/><text x="15.7465%" y="639.50">async..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (5,139 samples, 4.17%)</title><rect x="15.4965%" y="613" width="4.1723%" height="15" fill="rgb(251,171,36)" fg:x="19087" fg:w="5139"/><text x="15.7465%" y="623.50">std::..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (5,139 samples, 4.17%)</title><rect x="15.4965%" y="597" width="4.1723%" height="15" fill="rgb(230,62,22)" fg:x="19087" fg:w="5139"/><text x="15.7465%" y="607.50">std::..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (5,139 samples, 4.17%)</title><rect x="15.4965%" y="581" width="4.1723%" height="15" fill="rgb(225,114,35)" fg:x="19087" fg:w="5139"/><text x="15.7465%" y="591.50">async..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (5,139 samples, 4.17%)</title><rect x="15.4965%" y="565" width="4.1723%" height="15" fill="rgb(215,118,42)" fg:x="19087" fg:w="5139"/><text x="15.7465%" y="575.50">&lt;asyn..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,139 samples, 4.17%)</title><rect x="15.4965%" y="549" width="4.1723%" height="15" fill="rgb(243,119,21)" fg:x="19087" fg:w="5139"/><text x="15.7465%" y="559.50">&lt;core..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (5,139 samples, 4.17%)</title><rect x="15.4965%" y="533" width="4.1723%" height="15" fill="rgb(252,177,53)" fg:x="19087" fg:w="5139"/><text x="15.7465%" y="543.50">tremo..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::should_pull_data (15 samples, 0.01%)</title><rect x="19.6566%" y="517" width="0.0122%" height="15" fill="rgb(237,209,29)" fg:x="24211" fg:w="15"/><text x="19.9066%" y="527.50"></text></g><g><title>async_global_executor::threading::thread_main_loop (15 samples, 0.01%)</title><rect x="19.6688%" y="869" width="0.0122%" height="15" fill="rgb(212,65,23)" fg:x="24226" fg:w="15"/><text x="19.9188%" y="879.50"></text></g><g><title>std::panic::catch_unwind (15 samples, 0.01%)</title><rect x="19.6688%" y="853" width="0.0122%" height="15" fill="rgb(230,222,46)" fg:x="24226" fg:w="15"/><text x="19.9188%" y="863.50"></text></g><g><title>std::panicking::try (15 samples, 0.01%)</title><rect x="19.6688%" y="837" width="0.0122%" height="15" fill="rgb(215,135,32)" fg:x="24226" fg:w="15"/><text x="19.9188%" y="847.50"></text></g><g><title>std::panicking::try::do_call (15 samples, 0.01%)</title><rect x="19.6688%" y="821" width="0.0122%" height="15" fill="rgb(246,101,22)" fg:x="24226" fg:w="15"/><text x="19.9188%" y="831.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (15 samples, 0.01%)</title><rect x="19.6688%" y="805" width="0.0122%" height="15" fill="rgb(206,107,13)" fg:x="24226" fg:w="15"/><text x="19.9188%" y="815.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (15 samples, 0.01%)</title><rect x="19.6688%" y="789" width="0.0122%" height="15" fill="rgb(250,100,44)" fg:x="24226" fg:w="15"/><text x="19.9188%" y="799.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (15 samples, 0.01%)</title><rect x="19.6688%" y="773" width="0.0122%" height="15" fill="rgb(231,147,38)" fg:x="24226" fg:w="15"/><text x="19.9188%" y="783.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (15 samples, 0.01%)</title><rect x="19.6688%" y="757" width="0.0122%" height="15" fill="rgb(229,8,40)" fg:x="24226" fg:w="15"/><text x="19.9188%" y="767.50"></text></g><g><title>async_global_executor::reactor::block_on (15 samples, 0.01%)</title><rect x="19.6688%" y="741" width="0.0122%" height="15" fill="rgb(221,135,30)" fg:x="24226" fg:w="15"/><text x="19.9188%" y="751.50"></text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (15 samples, 0.01%)</title><rect x="19.6688%" y="725" width="0.0122%" height="15" fill="rgb(249,193,18)" fg:x="24226" fg:w="15"/><text x="19.9188%" y="735.50"></text></g><g><title>async_io::driver::block_on (15 samples, 0.01%)</title><rect x="19.6688%" y="709" width="0.0122%" height="15" fill="rgb(209,133,39)" fg:x="24226" fg:w="15"/><text x="19.9188%" y="719.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (15 samples, 0.01%)</title><rect x="19.6688%" y="693" width="0.0122%" height="15" fill="rgb(232,100,14)" fg:x="24226" fg:w="15"/><text x="19.9188%" y="703.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (15 samples, 0.01%)</title><rect x="19.6688%" y="677" width="0.0122%" height="15" fill="rgb(224,185,1)" fg:x="24226" fg:w="15"/><text x="19.9188%" y="687.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (15 samples, 0.01%)</title><rect x="19.6688%" y="661" width="0.0122%" height="15" fill="rgb(223,139,8)" fg:x="24226" fg:w="15"/><text x="19.9188%" y="671.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (15 samples, 0.01%)</title><rect x="19.6688%" y="645" width="0.0122%" height="15" fill="rgb(232,213,38)" fg:x="24226" fg:w="15"/><text x="19.9188%" y="655.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (15 samples, 0.01%)</title><rect x="19.6688%" y="629" width="0.0122%" height="15" fill="rgb(207,94,22)" fg:x="24226" fg:w="15"/><text x="19.9188%" y="639.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (15 samples, 0.01%)</title><rect x="19.6688%" y="613" width="0.0122%" height="15" fill="rgb(219,183,54)" fg:x="24226" fg:w="15"/><text x="19.9188%" y="623.50"></text></g><g><title>async_task::runnable::Runnable::run (15 samples, 0.01%)</title><rect x="19.6688%" y="597" width="0.0122%" height="15" fill="rgb(216,185,54)" fg:x="24226" fg:w="15"/><text x="19.9188%" y="607.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (15 samples, 0.01%)</title><rect x="19.6688%" y="581" width="0.0122%" height="15" fill="rgb(254,217,39)" fg:x="24226" fg:w="15"/><text x="19.9188%" y="591.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (15 samples, 0.01%)</title><rect x="19.6688%" y="565" width="0.0122%" height="15" fill="rgb(240,178,23)" fg:x="24226" fg:w="15"/><text x="19.9188%" y="575.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (15 samples, 0.01%)</title><rect x="19.6688%" y="549" width="0.0122%" height="15" fill="rgb(218,11,47)" fg:x="24226" fg:w="15"/><text x="19.9188%" y="559.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (15 samples, 0.01%)</title><rect x="19.6688%" y="533" width="0.0122%" height="15" fill="rgb(218,51,51)" fg:x="24226" fg:w="15"/><text x="19.9188%" y="543.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (15 samples, 0.01%)</title><rect x="19.6688%" y="517" width="0.0122%" height="15" fill="rgb(238,126,27)" fg:x="24226" fg:w="15"/><text x="19.9188%" y="527.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (15 samples, 0.01%)</title><rect x="19.6688%" y="501" width="0.0122%" height="15" fill="rgb(249,202,22)" fg:x="24226" fg:w="15"/><text x="19.9188%" y="511.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (15 samples, 0.01%)</title><rect x="19.6688%" y="485" width="0.0122%" height="15" fill="rgb(254,195,49)" fg:x="24226" fg:w="15"/><text x="19.9188%" y="495.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (15 samples, 0.01%)</title><rect x="19.6688%" y="469" width="0.0122%" height="15" fill="rgb(208,123,14)" fg:x="24226" fg:w="15"/><text x="19.9188%" y="479.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (15 samples, 0.01%)</title><rect x="19.6688%" y="453" width="0.0122%" height="15" fill="rgb(224,200,8)" fg:x="24226" fg:w="15"/><text x="19.9188%" y="463.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (15 samples, 0.01%)</title><rect x="19.6688%" y="437" width="0.0122%" height="15" fill="rgb(217,61,36)" fg:x="24226" fg:w="15"/><text x="19.9188%" y="447.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (15 samples, 0.01%)</title><rect x="19.6688%" y="421" width="0.0122%" height="15" fill="rgb(206,35,45)" fg:x="24226" fg:w="15"/><text x="19.9188%" y="431.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (726 samples, 0.59%)</title><rect x="20.0836%" y="549" width="0.5894%" height="15" fill="rgb(217,65,33)" fg:x="24737" fg:w="726"/><text x="20.3336%" y="559.50"></text></g><g><title>[libc-2.31.so] (623 samples, 0.51%)</title><rect x="20.1672%" y="533" width="0.5058%" height="15" fill="rgb(222,158,48)" fg:x="24840" fg:w="623"/><text x="20.4172%" y="543.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (28 samples, 0.02%)</title><rect x="20.6771%" y="549" width="0.0227%" height="15" fill="rgb(254,2,54)" fg:x="25468" fg:w="28"/><text x="20.9271%" y="559.50"></text></g><g><title>[libc-2.31.so] (290 samples, 0.24%)</title><rect x="20.7250%" y="533" width="0.2354%" height="15" fill="rgb(250,143,38)" fg:x="25527" fg:w="290"/><text x="20.9750%" y="543.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (895 samples, 0.73%)</title><rect x="21.2211%" y="517" width="0.7266%" height="15" fill="rgb(248,25,0)" fg:x="26138" fg:w="895"/><text x="21.4711%" y="527.50"></text></g><g><title>[libc-2.31.so] (256 samples, 0.21%)</title><rect x="21.9575%" y="501" width="0.2078%" height="15" fill="rgb(206,152,27)" fg:x="27045" fg:w="256"/><text x="22.2075%" y="511.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (482 samples, 0.39%)</title><rect x="21.9477%" y="517" width="0.3913%" height="15" fill="rgb(240,77,30)" fg:x="27033" fg:w="482"/><text x="22.1977%" y="527.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (214 samples, 0.17%)</title><rect x="22.1653%" y="501" width="0.1737%" height="15" fill="rgb(231,5,3)" fg:x="27301" fg:w="214"/><text x="22.4153%" y="511.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (249 samples, 0.20%)</title><rect x="22.3390%" y="485" width="0.2022%" height="15" fill="rgb(207,226,32)" fg:x="27515" fg:w="249"/><text x="22.5890%" y="495.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (239 samples, 0.19%)</title><rect x="22.3472%" y="469" width="0.1940%" height="15" fill="rgb(222,207,47)" fg:x="27525" fg:w="239"/><text x="22.5972%" y="479.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (239 samples, 0.19%)</title><rect x="22.3472%" y="453" width="0.1940%" height="15" fill="rgb(229,115,45)" fg:x="27525" fg:w="239"/><text x="22.5972%" y="463.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (49 samples, 0.04%)</title><rect x="22.6029%" y="437" width="0.0398%" height="15" fill="rgb(224,191,6)" fg:x="27840" fg:w="49"/><text x="22.8529%" y="447.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (49 samples, 0.04%)</title><rect x="22.6029%" y="421" width="0.0398%" height="15" fill="rgb(230,227,24)" fg:x="27840" fg:w="49"/><text x="22.8529%" y="431.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (49 samples, 0.04%)</title><rect x="22.6029%" y="405" width="0.0398%" height="15" fill="rgb(228,80,19)" fg:x="27840" fg:w="49"/><text x="22.8529%" y="415.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (5,284 samples, 4.29%)</title><rect x="22.5445%" y="469" width="4.2900%" height="15" fill="rgb(247,229,0)" fg:x="27768" fg:w="5284"/><text x="22.7945%" y="479.50">&lt;asyn..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (5,257 samples, 4.27%)</title><rect x="22.5664%" y="453" width="4.2681%" height="15" fill="rgb(237,194,15)" fg:x="27795" fg:w="5257"/><text x="22.8164%" y="463.50">async..</text></g><g><title>std::panic::catch_unwind (5,163 samples, 4.19%)</title><rect x="22.6427%" y="437" width="4.1918%" height="15" fill="rgb(219,203,20)" fg:x="27889" fg:w="5163"/><text x="22.8927%" y="447.50">std::..</text></g><g><title>std::panicking::try (5,163 samples, 4.19%)</title><rect x="22.6427%" y="421" width="4.1918%" height="15" fill="rgb(234,128,8)" fg:x="27889" fg:w="5163"/><text x="22.8927%" y="431.50">std::..</text></g><g><title>std::panicking::try::do_call (5,163 samples, 4.19%)</title><rect x="22.6427%" y="405" width="4.1918%" height="15" fill="rgb(248,202,8)" fg:x="27889" fg:w="5163"/><text x="22.8927%" y="415.50">std::..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (32 samples, 0.03%)</title><rect x="26.8085%" y="389" width="0.0260%" height="15" fill="rgb(206,104,37)" fg:x="33020" fg:w="32"/><text x="27.0585%" y="399.50"></text></g><g><title>core::ops::function::FnOnce::call_once (32 samples, 0.03%)</title><rect x="26.8085%" y="373" width="0.0260%" height="15" fill="rgb(223,8,27)" fg:x="33020" fg:w="32"/><text x="27.0585%" y="383.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (32 samples, 0.03%)</title><rect x="26.8085%" y="357" width="0.0260%" height="15" fill="rgb(216,217,28)" fg:x="33020" fg:w="32"/><text x="27.0585%" y="367.50"></text></g><g><title>async_ffi::FfiContext::with_context (32 samples, 0.03%)</title><rect x="26.8085%" y="341" width="0.0260%" height="15" fill="rgb(249,199,1)" fg:x="33020" fg:w="32"/><text x="27.0585%" y="351.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (5,302 samples, 4.30%)</title><rect x="22.5412%" y="485" width="4.3046%" height="15" fill="rgb(240,85,17)" fg:x="27764" fg:w="5302"/><text x="22.7912%" y="495.50">&lt;core..</text></g><g><title>core::task::wake::Context::waker (14 samples, 0.01%)</title><rect x="26.8345%" y="469" width="0.0114%" height="15" fill="rgb(206,108,45)" fg:x="33052" fg:w="14"/><text x="27.0845%" y="479.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,735 samples, 4.66%)</title><rect x="22.3390%" y="517" width="4.6562%" height="15" fill="rgb(245,210,41)" fg:x="27515" fg:w="5735"/><text x="22.5890%" y="527.50">&lt;asyn..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,735 samples, 4.66%)</title><rect x="22.3390%" y="501" width="4.6562%" height="15" fill="rgb(206,13,37)" fg:x="27515" fg:w="5735"/><text x="22.5890%" y="511.50">&lt;asyn..</text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (184 samples, 0.15%)</title><rect x="26.8458%" y="485" width="0.1494%" height="15" fill="rgb(250,61,18)" fg:x="33066" fg:w="184"/><text x="27.0958%" y="495.50"></text></g><g><title>[libc-2.31.so] (723 samples, 0.59%)</title><rect x="26.9952%" y="517" width="0.5870%" height="15" fill="rgb(235,172,48)" fg:x="33250" fg:w="723"/><text x="27.2452%" y="527.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (64 samples, 0.05%)</title><rect x="27.5822%" y="517" width="0.0520%" height="15" fill="rgb(249,201,17)" fg:x="33973" fg:w="64"/><text x="27.8322%" y="527.50"></text></g><g><title>alloc::alloc::box_free (20 samples, 0.02%)</title><rect x="27.6496%" y="389" width="0.0162%" height="15" fill="rgb(219,208,6)" fg:x="34056" fg:w="20"/><text x="27.8996%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (20 samples, 0.02%)</title><rect x="27.6496%" y="373" width="0.0162%" height="15" fill="rgb(248,31,23)" fg:x="34056" fg:w="20"/><text x="27.8996%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (20 samples, 0.02%)</title><rect x="27.6496%" y="357" width="0.0162%" height="15" fill="rgb(245,15,42)" fg:x="34056" fg:w="20"/><text x="27.8996%" y="367.50"></text></g><g><title>__rg_dealloc (20 samples, 0.02%)</title><rect x="27.6496%" y="341" width="0.0162%" height="15" fill="rgb(222,217,39)" fg:x="34056" fg:w="20"/><text x="27.8996%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (20 samples, 0.02%)</title><rect x="27.6496%" y="325" width="0.0162%" height="15" fill="rgb(210,219,27)" fg:x="34056" fg:w="20"/><text x="27.8996%" y="335.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn (38 samples, 0.03%)</title><rect x="27.6463%" y="469" width="0.0309%" height="15" fill="rgb(252,166,36)" fg:x="34052" fg:w="38"/><text x="27.8963%" y="479.50"></text></g><g><title>async_ffi::DropBomb::with (34 samples, 0.03%)</title><rect x="27.6496%" y="453" width="0.0276%" height="15" fill="rgb(245,132,34)" fg:x="34056" fg:w="34"/><text x="27.8996%" y="463.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn::{{closure}} (34 samples, 0.03%)</title><rect x="27.6496%" y="437" width="0.0276%" height="15" fill="rgb(236,54,3)" fg:x="34056" fg:w="34"/><text x="27.8996%" y="447.50"></text></g><g><title>core::mem::drop (34 samples, 0.03%)</title><rect x="27.6496%" y="421" width="0.0276%" height="15" fill="rgb(241,173,43)" fg:x="34056" fg:w="34"/><text x="27.8996%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}}&gt;&gt;&gt; (34 samples, 0.03%)</title><rect x="27.6496%" y="405" width="0.0276%" height="15" fill="rgb(215,190,9)" fg:x="34056" fg:w="34"/><text x="27.8996%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}}&gt;&gt; (14 samples, 0.01%)</title><rect x="27.6658%" y="389" width="0.0114%" height="15" fill="rgb(242,101,16)" fg:x="34076" fg:w="14"/><text x="27.9158%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}}&gt; (14 samples, 0.01%)</title><rect x="27.6658%" y="373" width="0.0114%" height="15" fill="rgb(223,190,21)" fg:x="34076" fg:w="14"/><text x="27.9158%" y="383.50"></text></g><g><title>sn_rust_dealloc (61 samples, 0.05%)</title><rect x="27.6772%" y="469" width="0.0495%" height="15" fill="rgb(215,228,25)" fg:x="34090" fg:w="61"/><text x="27.9272%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (121 samples, 0.10%)</title><rect x="27.6342%" y="517" width="0.0982%" height="15" fill="rgb(225,36,22)" fg:x="34037" fg:w="121"/><text x="27.8842%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (121 samples, 0.10%)</title><rect x="27.6342%" y="501" width="0.0982%" height="15" fill="rgb(251,106,46)" fg:x="34037" fg:w="121"/><text x="27.8842%" y="511.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (121 samples, 0.10%)</title><rect x="27.6342%" y="485" width="0.0982%" height="15" fill="rgb(208,90,1)" fg:x="34037" fg:w="121"/><text x="27.8842%" y="495.50"></text></g><g><title>[libc-2.31.so] (154 samples, 0.13%)</title><rect x="28.1026%" y="501" width="0.1250%" height="15" fill="rgb(243,10,4)" fg:x="34614" fg:w="154"/><text x="28.3526%" y="511.50"></text></g><g><title>[libc-2.31.so] (277 samples, 0.22%)</title><rect x="28.2715%" y="421" width="0.2249%" height="15" fill="rgb(212,137,27)" fg:x="34822" fg:w="277"/><text x="28.5215%" y="431.50"></text></g><g><title>[libc-2.31.so] (226 samples, 0.18%)</title><rect x="28.5110%" y="405" width="0.1835%" height="15" fill="rgb(231,220,49)" fg:x="35117" fg:w="226"/><text x="28.7610%" y="415.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (188 samples, 0.15%)</title><rect x="28.9648%" y="293" width="0.1526%" height="15" fill="rgb(237,96,20)" fg:x="35676" fg:w="188"/><text x="29.2148%" y="303.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (1,114 samples, 0.90%)</title><rect x="28.2277%" y="501" width="0.9044%" height="15" fill="rgb(239,229,30)" fg:x="34768" fg:w="1114"/><text x="28.4777%" y="511.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event (1,086 samples, 0.88%)</title><rect x="28.2504%" y="485" width="0.8817%" height="15" fill="rgb(219,65,33)" fg:x="34796" fg:w="1086"/><text x="28.5004%" y="495.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (1,086 samples, 0.88%)</title><rect x="28.2504%" y="469" width="0.8817%" height="15" fill="rgb(243,134,7)" fg:x="34796" fg:w="1086"/><text x="28.5004%" y="479.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (1,086 samples, 0.88%)</title><rect x="28.2504%" y="453" width="0.8817%" height="15" fill="rgb(216,177,54)" fg:x="34796" fg:w="1086"/><text x="28.5004%" y="463.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (1,086 samples, 0.88%)</title><rect x="28.2504%" y="437" width="0.8817%" height="15" fill="rgb(211,160,20)" fg:x="34796" fg:w="1086"/><text x="28.5004%" y="447.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (783 samples, 0.64%)</title><rect x="28.4964%" y="421" width="0.6357%" height="15" fill="rgb(239,85,39)" fg:x="35099" fg:w="783"/><text x="28.7464%" y="431.50"></text></g><g><title>alloc::alloc::exchange_malloc (539 samples, 0.44%)</title><rect x="28.6945%" y="405" width="0.4376%" height="15" fill="rgb(232,125,22)" fg:x="35343" fg:w="539"/><text x="28.9445%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (539 samples, 0.44%)</title><rect x="28.6945%" y="389" width="0.4376%" height="15" fill="rgb(244,57,34)" fg:x="35343" fg:w="539"/><text x="28.9445%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (539 samples, 0.44%)</title><rect x="28.6945%" y="373" width="0.4376%" height="15" fill="rgb(214,203,32)" fg:x="35343" fg:w="539"/><text x="28.9445%" y="383.50"></text></g><g><title>alloc::alloc::alloc (518 samples, 0.42%)</title><rect x="28.7115%" y="357" width="0.4206%" height="15" fill="rgb(207,58,43)" fg:x="35364" fg:w="518"/><text x="28.9615%" y="367.50"></text></g><g><title>__rg_alloc (518 samples, 0.42%)</title><rect x="28.7115%" y="341" width="0.4206%" height="15" fill="rgb(215,193,15)" fg:x="35364" fg:w="518"/><text x="28.9615%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (518 samples, 0.42%)</title><rect x="28.7115%" y="325" width="0.4206%" height="15" fill="rgb(232,15,44)" fg:x="35364" fg:w="518"/><text x="28.9615%" y="335.50"></text></g><g><title>sn_rust_alloc (507 samples, 0.41%)</title><rect x="28.7205%" y="309" width="0.4116%" height="15" fill="rgb(212,3,48)" fg:x="35375" fg:w="507"/><text x="28.9705%" y="319.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (18 samples, 0.01%)</title><rect x="29.1175%" y="293" width="0.0146%" height="15" fill="rgb(218,128,7)" fg:x="35864" fg:w="18"/><text x="29.3675%" y="303.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (10,089 samples, 8.19%)</title><rect x="20.9605%" y="533" width="8.1911%" height="15" fill="rgb(226,216,39)" fg:x="25817" fg:w="10089"/><text x="21.2105%" y="543.50">tremor_runt..</text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_TO&lt;_ErasedPtr&gt;::on_event (1,748 samples, 1.42%)</title><rect x="27.7324%" y="517" width="1.4192%" height="15" fill="rgb(243,47,51)" fg:x="34158" fg:w="1748"/><text x="27.9824%" y="527.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::_::&lt;impl tremor_runtime::connectors::sink::RawSink_trait::VTableInner_Ref&lt;_Self,_ErasedPtr&gt;&gt;::on_event (24 samples, 0.02%)</title><rect x="29.1321%" y="501" width="0.0195%" height="15" fill="rgb(241,183,40)" fg:x="35882" fg:w="24"/><text x="29.3821%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (32 samples, 0.03%)</title><rect x="29.4406%" y="501" width="0.0260%" height="15" fill="rgb(231,217,32)" fg:x="36262" fg:w="32"/><text x="29.6906%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (32 samples, 0.03%)</title><rect x="29.4406%" y="485" width="0.0260%" height="15" fill="rgb(229,61,38)" fg:x="36262" fg:w="32"/><text x="29.6906%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (32 samples, 0.03%)</title><rect x="29.4406%" y="469" width="0.0260%" height="15" fill="rgb(225,210,5)" fg:x="36262" fg:w="32"/><text x="29.6906%" y="479.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (16 samples, 0.01%)</title><rect x="29.4536%" y="453" width="0.0130%" height="15" fill="rgb(231,79,45)" fg:x="36278" fg:w="16"/><text x="29.7036%" y="463.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (16 samples, 0.01%)</title><rect x="29.4536%" y="437" width="0.0130%" height="15" fill="rgb(224,100,7)" fg:x="36278" fg:w="16"/><text x="29.7036%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (18 samples, 0.01%)</title><rect x="29.4958%" y="421" width="0.0146%" height="15" fill="rgb(241,198,18)" fg:x="36330" fg:w="18"/><text x="29.7458%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (18 samples, 0.01%)</title><rect x="29.4958%" y="405" width="0.0146%" height="15" fill="rgb(252,97,53)" fg:x="36330" fg:w="18"/><text x="29.7458%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value)&gt;&gt; (18 samples, 0.01%)</title><rect x="29.4958%" y="389" width="0.0146%" height="15" fill="rgb(220,88,7)" fg:x="36330" fg:w="18"/><text x="29.7458%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.01%)</title><rect x="29.4958%" y="373" width="0.0146%" height="15" fill="rgb(213,176,14)" fg:x="36330" fg:w="18"/><text x="29.7458%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::is_empty_singleton (14 samples, 0.01%)</title><rect x="29.4991%" y="357" width="0.0114%" height="15" fill="rgb(246,73,7)" fg:x="36334" fg:w="14"/><text x="29.7491%" y="367.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (54 samples, 0.04%)</title><rect x="29.4812%" y="437" width="0.0438%" height="15" fill="rgb(245,64,36)" fg:x="36312" fg:w="54"/><text x="29.7312%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (18 samples, 0.01%)</title><rect x="29.5104%" y="421" width="0.0146%" height="15" fill="rgb(245,80,10)" fg:x="36348" fg:w="18"/><text x="29.7604%" y="431.50"></text></g><g><title>alloc::alloc::box_free (18 samples, 0.01%)</title><rect x="29.5104%" y="405" width="0.0146%" height="15" fill="rgb(232,107,50)" fg:x="36348" fg:w="18"/><text x="29.7604%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (18 samples, 0.01%)</title><rect x="29.5104%" y="389" width="0.0146%" height="15" fill="rgb(253,3,0)" fg:x="36348" fg:w="18"/><text x="29.7604%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (18 samples, 0.01%)</title><rect x="29.5104%" y="373" width="0.0146%" height="15" fill="rgb(212,99,53)" fg:x="36348" fg:w="18"/><text x="29.7604%" y="383.50"></text></g><g><title>__rg_dealloc (18 samples, 0.01%)</title><rect x="29.5104%" y="357" width="0.0146%" height="15" fill="rgb(249,111,54)" fg:x="36348" fg:w="18"/><text x="29.7604%" y="367.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (18 samples, 0.01%)</title><rect x="29.5104%" y="341" width="0.0146%" height="15" fill="rgb(249,55,30)" fg:x="36348" fg:w="18"/><text x="29.7604%" y="351.50"></text></g><g><title>sn_rust_dealloc (173 samples, 0.14%)</title><rect x="29.5250%" y="437" width="0.1405%" height="15" fill="rgb(237,47,42)" fg:x="36366" fg:w="173"/><text x="29.7750%" y="447.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,062 samples, 8.98%)</title><rect x="20.6998%" y="549" width="8.9811%" height="15" fill="rgb(211,20,18)" fg:x="25496" fg:w="11062"/><text x="20.9498%" y="559.50">&lt;core::future..</text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (652 samples, 0.53%)</title><rect x="29.1516%" y="533" width="0.5293%" height="15" fill="rgb(231,203,46)" fg:x="35906" fg:w="652"/><text x="29.4016%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (296 samples, 0.24%)</title><rect x="29.4406%" y="517" width="0.2403%" height="15" fill="rgb(237,142,3)" fg:x="36262" fg:w="296"/><text x="29.6906%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (264 samples, 0.21%)</title><rect x="29.4666%" y="501" width="0.2143%" height="15" fill="rgb(241,107,1)" fg:x="36294" fg:w="264"/><text x="29.7166%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (264 samples, 0.21%)</title><rect x="29.4666%" y="485" width="0.2143%" height="15" fill="rgb(229,83,13)" fg:x="36294" fg:w="264"/><text x="29.7166%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (264 samples, 0.21%)</title><rect x="29.4666%" y="469" width="0.2143%" height="15" fill="rgb(241,91,40)" fg:x="36294" fg:w="264"/><text x="29.7166%" y="479.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (264 samples, 0.21%)</title><rect x="29.4666%" y="453" width="0.2143%" height="15" fill="rgb(225,3,45)" fg:x="36294" fg:w="264"/><text x="29.7166%" y="463.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (19 samples, 0.02%)</title><rect x="29.6655%" y="437" width="0.0154%" height="15" fill="rgb(244,223,14)" fg:x="36539" fg:w="19"/><text x="29.9155%" y="447.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_ptr (24 samples, 0.02%)</title><rect x="29.7248%" y="421" width="0.0195%" height="15" fill="rgb(224,124,37)" fg:x="36612" fg:w="24"/><text x="29.9748%" y="431.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (15 samples, 0.01%)</title><rect x="29.8011%" y="277" width="0.0122%" height="15" fill="rgb(251,171,30)" fg:x="36706" fg:w="15"/><text x="30.0511%" y="287.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (111 samples, 0.09%)</title><rect x="29.7248%" y="437" width="0.0901%" height="15" fill="rgb(236,46,54)" fg:x="36612" fg:w="111"/><text x="29.9748%" y="447.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (87 samples, 0.07%)</title><rect x="29.7443%" y="421" width="0.0706%" height="15" fill="rgb(245,213,5)" fg:x="36636" fg:w="87"/><text x="29.9943%" y="431.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (87 samples, 0.07%)</title><rect x="29.7443%" y="405" width="0.0706%" height="15" fill="rgb(230,144,27)" fg:x="36636" fg:w="87"/><text x="29.9943%" y="415.50"></text></g><g><title>alloc::alloc::exchange_malloc (72 samples, 0.06%)</title><rect x="29.7564%" y="389" width="0.0585%" height="15" fill="rgb(220,86,6)" fg:x="36651" fg:w="72"/><text x="30.0064%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (71 samples, 0.06%)</title><rect x="29.7572%" y="373" width="0.0576%" height="15" fill="rgb(240,20,13)" fg:x="36652" fg:w="71"/><text x="30.0072%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (71 samples, 0.06%)</title><rect x="29.7572%" y="357" width="0.0576%" height="15" fill="rgb(217,89,34)" fg:x="36652" fg:w="71"/><text x="30.0072%" y="367.50"></text></g><g><title>alloc::alloc::alloc (71 samples, 0.06%)</title><rect x="29.7572%" y="341" width="0.0576%" height="15" fill="rgb(229,13,5)" fg:x="36652" fg:w="71"/><text x="30.0072%" y="351.50"></text></g><g><title>__rg_alloc (71 samples, 0.06%)</title><rect x="29.7572%" y="325" width="0.0576%" height="15" fill="rgb(244,67,35)" fg:x="36652" fg:w="71"/><text x="30.0072%" y="335.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (71 samples, 0.06%)</title><rect x="29.7572%" y="309" width="0.0576%" height="15" fill="rgb(221,40,2)" fg:x="36652" fg:w="71"/><text x="30.0072%" y="319.50"></text></g><g><title>sn_rust_alloc (67 samples, 0.05%)</title><rect x="29.7605%" y="293" width="0.0544%" height="15" fill="rgb(237,157,21)" fg:x="36656" fg:w="67"/><text x="30.0105%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (14 samples, 0.01%)</title><rect x="29.8214%" y="389" width="0.0114%" height="15" fill="rgb(222,94,11)" fg:x="36731" fg:w="14"/><text x="30.0714%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (14 samples, 0.01%)</title><rect x="29.8214%" y="373" width="0.0114%" height="15" fill="rgb(249,113,6)" fg:x="36731" fg:w="14"/><text x="30.0714%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (31 samples, 0.03%)</title><rect x="29.8214%" y="405" width="0.0252%" height="15" fill="rgb(238,137,36)" fg:x="36731" fg:w="31"/><text x="30.0714%" y="415.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (174 samples, 0.14%)</title><rect x="29.7085%" y="517" width="0.1413%" height="15" fill="rgb(210,102,26)" fg:x="36592" fg:w="174"/><text x="29.9585%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (161 samples, 0.13%)</title><rect x="29.7191%" y="501" width="0.1307%" height="15" fill="rgb(218,30,30)" fg:x="36605" fg:w="161"/><text x="29.9691%" y="511.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (157 samples, 0.13%)</title><rect x="29.7223%" y="485" width="0.1275%" height="15" fill="rgb(214,67,26)" fg:x="36609" fg:w="157"/><text x="29.9723%" y="495.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (154 samples, 0.13%)</title><rect x="29.7248%" y="469" width="0.1250%" height="15" fill="rgb(251,9,53)" fg:x="36612" fg:w="154"/><text x="29.9748%" y="479.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (154 samples, 0.13%)</title><rect x="29.7248%" y="453" width="0.1250%" height="15" fill="rgb(228,204,25)" fg:x="36612" fg:w="154"/><text x="29.9748%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (43 samples, 0.03%)</title><rect x="29.8149%" y="437" width="0.0349%" height="15" fill="rgb(207,153,8)" fg:x="36723" fg:w="43"/><text x="30.0649%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (43 samples, 0.03%)</title><rect x="29.8149%" y="421" width="0.0349%" height="15" fill="rgb(242,9,16)" fg:x="36723" fg:w="43"/><text x="30.0649%" y="431.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (130 samples, 0.11%)</title><rect x="30.1640%" y="485" width="0.1055%" height="15" fill="rgb(217,211,10)" fg:x="37153" fg:w="130"/><text x="30.4140%" y="495.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (130 samples, 0.11%)</title><rect x="30.1640%" y="469" width="0.1055%" height="15" fill="rgb(219,228,52)" fg:x="37153" fg:w="130"/><text x="30.4140%" y="479.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (130 samples, 0.11%)</title><rect x="30.1640%" y="453" width="0.1055%" height="15" fill="rgb(231,92,29)" fg:x="37153" fg:w="130"/><text x="30.4140%" y="463.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (116 samples, 0.09%)</title><rect x="30.1754%" y="437" width="0.0942%" height="15" fill="rgb(232,8,23)" fg:x="37167" fg:w="116"/><text x="30.4254%" y="447.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (116 samples, 0.09%)</title><rect x="30.1754%" y="421" width="0.0942%" height="15" fill="rgb(216,211,34)" fg:x="37167" fg:w="116"/><text x="30.4254%" y="431.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (102 samples, 0.08%)</title><rect x="30.1867%" y="405" width="0.0828%" height="15" fill="rgb(236,151,0)" fg:x="37181" fg:w="102"/><text x="30.4367%" y="415.50"></text></g><g><title>alloc::alloc::exchange_malloc (80 samples, 0.06%)</title><rect x="30.2046%" y="389" width="0.0650%" height="15" fill="rgb(209,168,3)" fg:x="37203" fg:w="80"/><text x="30.4546%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (80 samples, 0.06%)</title><rect x="30.2046%" y="373" width="0.0650%" height="15" fill="rgb(208,129,28)" fg:x="37203" fg:w="80"/><text x="30.4546%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (80 samples, 0.06%)</title><rect x="30.2046%" y="357" width="0.0650%" height="15" fill="rgb(229,78,22)" fg:x="37203" fg:w="80"/><text x="30.4546%" y="367.50"></text></g><g><title>alloc::alloc::alloc (80 samples, 0.06%)</title><rect x="30.2046%" y="341" width="0.0650%" height="15" fill="rgb(228,187,13)" fg:x="37203" fg:w="80"/><text x="30.4546%" y="351.50"></text></g><g><title>__rg_alloc (80 samples, 0.06%)</title><rect x="30.2046%" y="325" width="0.0650%" height="15" fill="rgb(240,119,24)" fg:x="37203" fg:w="80"/><text x="30.4546%" y="335.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (80 samples, 0.06%)</title><rect x="30.2046%" y="309" width="0.0650%" height="15" fill="rgb(209,194,42)" fg:x="37203" fg:w="80"/><text x="30.4546%" y="319.50"></text></g><g><title>sn_rust_alloc (70 samples, 0.06%)</title><rect x="30.2127%" y="293" width="0.0568%" height="15" fill="rgb(247,200,46)" fg:x="37213" fg:w="70"/><text x="30.4627%" y="303.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (22 samples, 0.02%)</title><rect x="30.2517%" y="277" width="0.0179%" height="15" fill="rgb(218,76,16)" fg:x="37261" fg:w="22"/><text x="30.5017%" y="287.50"></text></g><g><title>abi_stable::erased_types::iterator::next (31 samples, 0.03%)</title><rect x="30.3207%" y="437" width="0.0252%" height="15" fill="rgb(225,21,48)" fg:x="37346" fg:w="31"/><text x="30.5707%" y="447.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (19 samples, 0.02%)</title><rect x="30.3304%" y="421" width="0.0154%" height="15" fill="rgb(239,223,50)" fg:x="37358" fg:w="19"/><text x="30.5804%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.02%)</title><rect x="30.3304%" y="405" width="0.0154%" height="15" fill="rgb(244,45,21)" fg:x="37358" fg:w="19"/><text x="30.5804%" y="415.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.02%)</title><rect x="30.3304%" y="389" width="0.0154%" height="15" fill="rgb(232,33,43)" fg:x="37358" fg:w="19"/><text x="30.5804%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.02%)</title><rect x="30.3304%" y="373" width="0.0154%" height="15" fill="rgb(209,8,3)" fg:x="37358" fg:w="19"/><text x="30.5804%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (57 samples, 0.05%)</title><rect x="30.3061%" y="469" width="0.0463%" height="15" fill="rgb(214,25,53)" fg:x="37328" fg:w="57"/><text x="30.5561%" y="479.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (57 samples, 0.05%)</title><rect x="30.3061%" y="453" width="0.0463%" height="15" fill="rgb(254,186,54)" fg:x="37328" fg:w="57"/><text x="30.5561%" y="463.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;::sabi_erased_ref (15 samples, 0.01%)</title><rect x="30.3580%" y="437" width="0.0122%" height="15" fill="rgb(208,174,49)" fg:x="37392" fg:w="15"/><text x="30.6080%" y="447.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint (13 samples, 0.01%)</title><rect x="30.3702%" y="437" width="0.0106%" height="15" fill="rgb(233,191,51)" fg:x="37407" fg:w="13"/><text x="30.6202%" y="447.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint::{{closure}} (13 samples, 0.01%)</title><rect x="30.3702%" y="421" width="0.0106%" height="15" fill="rgb(222,134,10)" fg:x="37407" fg:w="13"/><text x="30.6202%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (43 samples, 0.03%)</title><rect x="30.3524%" y="469" width="0.0349%" height="15" fill="rgb(230,226,20)" fg:x="37385" fg:w="43"/><text x="30.6024%" y="479.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (43 samples, 0.03%)</title><rect x="30.3524%" y="453" width="0.0349%" height="15" fill="rgb(251,111,25)" fg:x="37385" fg:w="43"/><text x="30.6024%" y="463.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (13 samples, 0.01%)</title><rect x="30.4254%" y="357" width="0.0106%" height="15" fill="rgb(224,40,46)" fg:x="37475" fg:w="13"/><text x="30.6754%" y="367.50"></text></g><g><title>sn_rust_dealloc (86 samples, 0.07%)</title><rect x="30.4360%" y="357" width="0.0698%" height="15" fill="rgb(236,108,47)" fg:x="37488" fg:w="86"/><text x="30.6860%" y="367.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (1,017 samples, 0.83%)</title><rect x="29.6809%" y="549" width="0.8257%" height="15" fill="rgb(234,93,0)" fg:x="36558" fg:w="1017"/><text x="29.9309%" y="559.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (991 samples, 0.80%)</title><rect x="29.7020%" y="533" width="0.8046%" height="15" fill="rgb(224,213,32)" fg:x="36584" fg:w="991"/><text x="29.9520%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (809 samples, 0.66%)</title><rect x="29.8498%" y="517" width="0.6568%" height="15" fill="rgb(251,11,48)" fg:x="36766" fg:w="809"/><text x="30.0998%" y="527.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (433 samples, 0.35%)</title><rect x="30.1551%" y="501" width="0.3515%" height="15" fill="rgb(236,173,5)" fg:x="37142" fg:w="433"/><text x="30.4051%" y="511.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (292 samples, 0.24%)</title><rect x="30.2695%" y="485" width="0.2371%" height="15" fill="rgb(230,95,12)" fg:x="37283" fg:w="292"/><text x="30.5195%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (136 samples, 0.11%)</title><rect x="30.3962%" y="469" width="0.1104%" height="15" fill="rgb(232,209,1)" fg:x="37439" fg:w="136"/><text x="30.6462%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (136 samples, 0.11%)</title><rect x="30.3962%" y="453" width="0.1104%" height="15" fill="rgb(232,6,1)" fg:x="37439" fg:w="136"/><text x="30.6462%" y="463.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (136 samples, 0.11%)</title><rect x="30.3962%" y="437" width="0.1104%" height="15" fill="rgb(210,224,50)" fg:x="37439" fg:w="136"/><text x="30.6462%" y="447.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (123 samples, 0.10%)</title><rect x="30.4068%" y="421" width="0.0999%" height="15" fill="rgb(228,127,35)" fg:x="37452" fg:w="123"/><text x="30.6568%" y="431.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (110 samples, 0.09%)</title><rect x="30.4173%" y="405" width="0.0893%" height="15" fill="rgb(245,102,45)" fg:x="37465" fg:w="110"/><text x="30.6673%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (110 samples, 0.09%)</title><rect x="30.4173%" y="389" width="0.0893%" height="15" fill="rgb(214,1,49)" fg:x="37465" fg:w="110"/><text x="30.6673%" y="399.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (110 samples, 0.09%)</title><rect x="30.4173%" y="373" width="0.0893%" height="15" fill="rgb(226,163,40)" fg:x="37465" fg:w="110"/><text x="30.6673%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="30.5894%" y="421" width="0.0106%" height="15" fill="rgb(239,212,28)" fg:x="37677" fg:w="13"/><text x="30.8394%" y="431.50"></text></g><g><title>&lt;tremor_pipeline::EventId as core::clone::Clone&gt;::clone (119 samples, 0.10%)</title><rect x="30.5180%" y="533" width="0.0966%" height="15" fill="rgb(220,20,13)" fg:x="37589" fg:w="119"/><text x="30.7680%" y="543.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (88 samples, 0.07%)</title><rect x="30.5432%" y="517" width="0.0714%" height="15" fill="rgb(210,164,35)" fg:x="37620" fg:w="88"/><text x="30.7932%" y="527.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (32 samples, 0.03%)</title><rect x="30.5886%" y="501" width="0.0260%" height="15" fill="rgb(248,109,41)" fg:x="37676" fg:w="32"/><text x="30.8386%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (32 samples, 0.03%)</title><rect x="30.5886%" y="485" width="0.0260%" height="15" fill="rgb(238,23,50)" fg:x="37676" fg:w="32"/><text x="30.8386%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (32 samples, 0.03%)</title><rect x="30.5886%" y="469" width="0.0260%" height="15" fill="rgb(211,48,49)" fg:x="37676" fg:w="32"/><text x="30.8386%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (32 samples, 0.03%)</title><rect x="30.5886%" y="453" width="0.0260%" height="15" fill="rgb(223,36,21)" fg:x="37676" fg:w="32"/><text x="30.8386%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (32 samples, 0.03%)</title><rect x="30.5886%" y="437" width="0.0260%" height="15" fill="rgb(207,123,46)" fg:x="37676" fg:w="32"/><text x="30.8386%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (18 samples, 0.01%)</title><rect x="30.6000%" y="421" width="0.0146%" height="15" fill="rgb(240,218,32)" fg:x="37690" fg:w="18"/><text x="30.8500%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (17 samples, 0.01%)</title><rect x="30.6008%" y="405" width="0.0138%" height="15" fill="rgb(252,5,43)" fg:x="37691" fg:w="17"/><text x="30.8508%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (17 samples, 0.01%)</title><rect x="30.6008%" y="389" width="0.0138%" height="15" fill="rgb(252,84,19)" fg:x="37691" fg:w="17"/><text x="30.8508%" y="399.50"></text></g><g><title>core::alloc::layout::Layout::array (14 samples, 0.01%)</title><rect x="30.6032%" y="373" width="0.0114%" height="15" fill="rgb(243,152,39)" fg:x="37694" fg:w="14"/><text x="30.8532%" y="383.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (107 samples, 0.09%)</title><rect x="30.6917%" y="421" width="0.0869%" height="15" fill="rgb(234,160,15)" fg:x="37803" fg:w="107"/><text x="30.9417%" y="431.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (103 samples, 0.08%)</title><rect x="30.6950%" y="405" width="0.0836%" height="15" fill="rgb(237,34,20)" fg:x="37807" fg:w="103"/><text x="30.9450%" y="415.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (103 samples, 0.08%)</title><rect x="30.6950%" y="389" width="0.0836%" height="15" fill="rgb(229,97,13)" fg:x="37807" fg:w="103"/><text x="30.9450%" y="399.50"></text></g><g><title>alloc::alloc::exchange_malloc (89 samples, 0.07%)</title><rect x="30.7063%" y="373" width="0.0723%" height="15" fill="rgb(234,71,50)" fg:x="37821" fg:w="89"/><text x="30.9563%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (86 samples, 0.07%)</title><rect x="30.7088%" y="357" width="0.0698%" height="15" fill="rgb(253,155,4)" fg:x="37824" fg:w="86"/><text x="30.9588%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (86 samples, 0.07%)</title><rect x="30.7088%" y="341" width="0.0698%" height="15" fill="rgb(222,185,37)" fg:x="37824" fg:w="86"/><text x="30.9588%" y="351.50"></text></g><g><title>alloc::alloc::alloc (86 samples, 0.07%)</title><rect x="30.7088%" y="325" width="0.0698%" height="15" fill="rgb(251,177,13)" fg:x="37824" fg:w="86"/><text x="30.9588%" y="335.50"></text></g><g><title>__rg_alloc (86 samples, 0.07%)</title><rect x="30.7088%" y="309" width="0.0698%" height="15" fill="rgb(250,179,40)" fg:x="37824" fg:w="86"/><text x="30.9588%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (86 samples, 0.07%)</title><rect x="30.7088%" y="293" width="0.0698%" height="15" fill="rgb(242,44,2)" fg:x="37824" fg:w="86"/><text x="30.9588%" y="303.50"></text></g><g><title>sn_rust_alloc (86 samples, 0.07%)</title><rect x="30.7088%" y="277" width="0.0698%" height="15" fill="rgb(216,177,13)" fg:x="37824" fg:w="86"/><text x="30.9588%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (22 samples, 0.02%)</title><rect x="30.8184%" y="373" width="0.0179%" height="15" fill="rgb(216,106,43)" fg:x="37959" fg:w="22"/><text x="31.0684%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (22 samples, 0.02%)</title><rect x="30.8184%" y="357" width="0.0179%" height="15" fill="rgb(216,183,2)" fg:x="37959" fg:w="22"/><text x="31.0684%" y="367.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (134 samples, 0.11%)</title><rect x="30.8362%" y="373" width="0.1088%" height="15" fill="rgb(249,75,3)" fg:x="37981" fg:w="134"/><text x="31.0862%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (134 samples, 0.11%)</title><rect x="30.8362%" y="357" width="0.1088%" height="15" fill="rgb(219,67,39)" fg:x="37981" fg:w="134"/><text x="31.0862%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (158 samples, 0.13%)</title><rect x="30.8184%" y="389" width="0.1283%" height="15" fill="rgb(253,228,2)" fg:x="37959" fg:w="158"/><text x="31.0684%" y="399.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (1,130 samples, 0.92%)</title><rect x="30.6787%" y="501" width="0.9174%" height="15" fill="rgb(235,138,27)" fg:x="37787" fg:w="1130"/><text x="30.9287%" y="511.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (1,121 samples, 0.91%)</title><rect x="30.6860%" y="485" width="0.9101%" height="15" fill="rgb(236,97,51)" fg:x="37796" fg:w="1121"/><text x="30.9360%" y="495.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (1,120 samples, 0.91%)</title><rect x="30.6869%" y="469" width="0.9093%" height="15" fill="rgb(240,80,30)" fg:x="37797" fg:w="1120"/><text x="30.9369%" y="479.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (1,114 samples, 0.90%)</title><rect x="30.6917%" y="453" width="0.9044%" height="15" fill="rgb(230,178,19)" fg:x="37803" fg:w="1114"/><text x="30.9417%" y="463.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (1,114 samples, 0.90%)</title><rect x="30.6917%" y="437" width="0.9044%" height="15" fill="rgb(210,190,27)" fg:x="37803" fg:w="1114"/><text x="30.9417%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (1,007 samples, 0.82%)</title><rect x="30.7786%" y="421" width="0.8176%" height="15" fill="rgb(222,107,31)" fg:x="37910" fg:w="1007"/><text x="31.0286%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (1,007 samples, 0.82%)</title><rect x="30.7786%" y="405" width="0.8176%" height="15" fill="rgb(216,127,34)" fg:x="37910" fg:w="1007"/><text x="31.0286%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::buckets (800 samples, 0.65%)</title><rect x="30.9467%" y="389" width="0.6495%" height="15" fill="rgb(234,116,52)" fg:x="38117" fg:w="800"/><text x="31.1967%" y="399.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (46 samples, 0.04%)</title><rect x="31.9225%" y="261" width="0.0373%" height="15" fill="rgb(222,124,15)" fg:x="39319" fg:w="46"/><text x="32.1725%" y="271.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (149 samples, 0.12%)</title><rect x="31.8414%" y="469" width="0.1210%" height="15" fill="rgb(231,179,28)" fg:x="39219" fg:w="149"/><text x="32.0914%" y="479.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (149 samples, 0.12%)</title><rect x="31.8414%" y="453" width="0.1210%" height="15" fill="rgb(226,93,45)" fg:x="39219" fg:w="149"/><text x="32.0914%" y="463.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (149 samples, 0.12%)</title><rect x="31.8414%" y="437" width="0.1210%" height="15" fill="rgb(215,8,51)" fg:x="39219" fg:w="149"/><text x="32.0914%" y="447.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (134 samples, 0.11%)</title><rect x="31.8535%" y="421" width="0.1088%" height="15" fill="rgb(223,106,5)" fg:x="39234" fg:w="134"/><text x="32.1035%" y="431.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (134 samples, 0.11%)</title><rect x="31.8535%" y="405" width="0.1088%" height="15" fill="rgb(250,191,5)" fg:x="39234" fg:w="134"/><text x="32.1035%" y="415.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (122 samples, 0.10%)</title><rect x="31.8633%" y="389" width="0.0991%" height="15" fill="rgb(242,132,44)" fg:x="39246" fg:w="122"/><text x="32.1133%" y="399.50"></text></g><g><title>alloc::alloc::exchange_malloc (103 samples, 0.08%)</title><rect x="31.8787%" y="373" width="0.0836%" height="15" fill="rgb(251,152,29)" fg:x="39265" fg:w="103"/><text x="32.1287%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (103 samples, 0.08%)</title><rect x="31.8787%" y="357" width="0.0836%" height="15" fill="rgb(218,179,5)" fg:x="39265" fg:w="103"/><text x="32.1287%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (103 samples, 0.08%)</title><rect x="31.8787%" y="341" width="0.0836%" height="15" fill="rgb(227,67,19)" fg:x="39265" fg:w="103"/><text x="32.1287%" y="351.50"></text></g><g><title>alloc::alloc::alloc (103 samples, 0.08%)</title><rect x="31.8787%" y="325" width="0.0836%" height="15" fill="rgb(233,119,31)" fg:x="39265" fg:w="103"/><text x="32.1287%" y="335.50"></text></g><g><title>__rg_alloc (103 samples, 0.08%)</title><rect x="31.8787%" y="309" width="0.0836%" height="15" fill="rgb(241,120,22)" fg:x="39265" fg:w="103"/><text x="32.1287%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (103 samples, 0.08%)</title><rect x="31.8787%" y="293" width="0.0836%" height="15" fill="rgb(224,102,30)" fg:x="39265" fg:w="103"/><text x="32.1287%" y="303.50"></text></g><g><title>sn_rust_alloc (88 samples, 0.07%)</title><rect x="31.8909%" y="277" width="0.0714%" height="15" fill="rgb(210,164,37)" fg:x="39280" fg:w="88"/><text x="32.1409%" y="287.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;::sabi_erased_mut (14 samples, 0.01%)</title><rect x="32.0054%" y="421" width="0.0114%" height="15" fill="rgb(226,191,16)" fg:x="39421" fg:w="14"/><text x="32.2554%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.02%)</title><rect x="32.0265%" y="389" width="0.0195%" height="15" fill="rgb(214,40,45)" fg:x="39447" fg:w="24"/><text x="32.2765%" y="399.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.02%)</title><rect x="32.0265%" y="373" width="0.0195%" height="15" fill="rgb(244,29,26)" fg:x="39447" fg:w="24"/><text x="32.2765%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.02%)</title><rect x="32.0265%" y="357" width="0.0195%" height="15" fill="rgb(216,16,5)" fg:x="39447" fg:w="24"/><text x="32.2765%" y="367.50"></text></g><g><title>abi_stable::erased_types::iterator::next (38 samples, 0.03%)</title><rect x="32.0167%" y="421" width="0.0309%" height="15" fill="rgb(249,76,35)" fg:x="39435" fg:w="38"/><text x="32.2667%" y="431.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (26 samples, 0.02%)</title><rect x="32.0265%" y="405" width="0.0211%" height="15" fill="rgb(207,11,44)" fg:x="39447" fg:w="26"/><text x="32.2765%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (69 samples, 0.06%)</title><rect x="31.9989%" y="453" width="0.0560%" height="15" fill="rgb(228,190,49)" fg:x="39413" fg:w="69"/><text x="32.2489%" y="463.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (69 samples, 0.06%)</title><rect x="31.9989%" y="437" width="0.0560%" height="15" fill="rgb(214,173,12)" fg:x="39413" fg:w="69"/><text x="32.2489%" y="447.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint (25 samples, 0.02%)</title><rect x="32.0654%" y="421" width="0.0203%" height="15" fill="rgb(218,26,35)" fg:x="39495" fg:w="25"/><text x="32.3154%" y="431.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint::{{closure}} (18 samples, 0.01%)</title><rect x="32.0711%" y="405" width="0.0146%" height="15" fill="rgb(220,200,19)" fg:x="39502" fg:w="18"/><text x="32.3211%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (45 samples, 0.04%)</title><rect x="32.0549%" y="453" width="0.0365%" height="15" fill="rgb(239,95,49)" fg:x="39482" fg:w="45"/><text x="32.3049%" y="463.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (45 samples, 0.04%)</title><rect x="32.0549%" y="437" width="0.0365%" height="15" fill="rgb(235,85,53)" fg:x="39482" fg:w="45"/><text x="32.3049%" y="447.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (19 samples, 0.02%)</title><rect x="32.1263%" y="341" width="0.0154%" height="15" fill="rgb(233,133,31)" fg:x="39570" fg:w="19"/><text x="32.3763%" y="351.50"></text></g><g><title>sn_rust_dealloc (194 samples, 0.16%)</title><rect x="32.1418%" y="341" width="0.1575%" height="15" fill="rgb(218,25,20)" fg:x="39589" fg:w="194"/><text x="32.3918%" y="351.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::ContraflowData as core::convert::From&lt;&amp;tremor_pipeline::event::Event&gt;&gt;::from (2,210 samples, 1.79%)</title><rect x="30.5066%" y="549" width="1.7943%" height="15" fill="rgb(252,210,38)" fg:x="37575" fg:w="2210"/><text x="30.7566%" y="559.50">&lt;..</text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (2,077 samples, 1.69%)</title><rect x="30.6146%" y="533" width="1.6863%" height="15" fill="rgb(242,134,21)" fg:x="37708" fg:w="2077"/><text x="30.8646%" y="543.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (2,015 samples, 1.64%)</title><rect x="30.6649%" y="517" width="1.6360%" height="15" fill="rgb(213,28,48)" fg:x="37770" fg:w="2015"/><text x="30.9149%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (868 samples, 0.70%)</title><rect x="31.5962%" y="501" width="0.7047%" height="15" fill="rgb(250,196,2)" fg:x="38917" fg:w="868"/><text x="31.8462%" y="511.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (576 samples, 0.47%)</title><rect x="31.8332%" y="485" width="0.4676%" height="15" fill="rgb(227,5,17)" fg:x="39209" fg:w="576"/><text x="32.0832%" y="495.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (417 samples, 0.34%)</title><rect x="31.9623%" y="469" width="0.3386%" height="15" fill="rgb(221,226,24)" fg:x="39368" fg:w="417"/><text x="32.2123%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (246 samples, 0.20%)</title><rect x="32.1012%" y="453" width="0.1997%" height="15" fill="rgb(211,5,48)" fg:x="39539" fg:w="246"/><text x="32.3512%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (246 samples, 0.20%)</title><rect x="32.1012%" y="437" width="0.1997%" height="15" fill="rgb(219,150,6)" fg:x="39539" fg:w="246"/><text x="32.3512%" y="447.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (246 samples, 0.20%)</title><rect x="32.1012%" y="421" width="0.1997%" height="15" fill="rgb(251,46,16)" fg:x="39539" fg:w="246"/><text x="32.3512%" y="431.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (238 samples, 0.19%)</title><rect x="32.1077%" y="405" width="0.1932%" height="15" fill="rgb(220,204,40)" fg:x="39547" fg:w="238"/><text x="32.3577%" y="415.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (230 samples, 0.19%)</title><rect x="32.1142%" y="389" width="0.1867%" height="15" fill="rgb(211,85,2)" fg:x="39555" fg:w="230"/><text x="32.3642%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (230 samples, 0.19%)</title><rect x="32.1142%" y="373" width="0.1867%" height="15" fill="rgb(229,17,7)" fg:x="39555" fg:w="230"/><text x="32.3642%" y="383.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (230 samples, 0.19%)</title><rect x="32.1142%" y="357" width="0.1867%" height="15" fill="rgb(239,72,28)" fg:x="39555" fg:w="230"/><text x="32.3642%" y="367.50"></text></g><g><title>[libc-2.31.so] (1,808 samples, 1.47%)</title><rect x="32.3009%" y="549" width="1.4679%" height="15" fill="rgb(230,47,54)" fg:x="39785" fg:w="1808"/><text x="32.5509%" y="559.50"></text></g><g><title>sn_rust_dealloc (335 samples, 0.27%)</title><rect x="33.7931%" y="389" width="0.2720%" height="15" fill="rgb(214,50,8)" fg:x="41623" fg:w="335"/><text x="34.0431%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (365 samples, 0.30%)</title><rect x="33.7720%" y="549" width="0.2963%" height="15" fill="rgb(216,198,43)" fg:x="41597" fg:w="365"/><text x="34.0220%" y="559.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (365 samples, 0.30%)</title><rect x="33.7720%" y="533" width="0.2963%" height="15" fill="rgb(234,20,35)" fg:x="41597" fg:w="365"/><text x="34.0220%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (355 samples, 0.29%)</title><rect x="33.7801%" y="517" width="0.2882%" height="15" fill="rgb(254,45,19)" fg:x="41607" fg:w="355"/><text x="34.0301%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (355 samples, 0.29%)</title><rect x="33.7801%" y="501" width="0.2882%" height="15" fill="rgb(219,14,44)" fg:x="41607" fg:w="355"/><text x="34.0301%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (355 samples, 0.29%)</title><rect x="33.7801%" y="485" width="0.2882%" height="15" fill="rgb(217,220,26)" fg:x="41607" fg:w="355"/><text x="34.0301%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (355 samples, 0.29%)</title><rect x="33.7801%" y="469" width="0.2882%" height="15" fill="rgb(213,158,28)" fg:x="41607" fg:w="355"/><text x="34.0301%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (355 samples, 0.29%)</title><rect x="33.7801%" y="453" width="0.2882%" height="15" fill="rgb(252,51,52)" fg:x="41607" fg:w="355"/><text x="34.0301%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (355 samples, 0.29%)</title><rect x="33.7801%" y="437" width="0.2882%" height="15" fill="rgb(246,89,16)" fg:x="41607" fg:w="355"/><text x="34.0301%" y="447.50"></text></g><g><title>__rg_dealloc (355 samples, 0.29%)</title><rect x="33.7801%" y="421" width="0.2882%" height="15" fill="rgb(216,158,49)" fg:x="41607" fg:w="355"/><text x="34.0301%" y="431.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (355 samples, 0.29%)</title><rect x="33.7801%" y="405" width="0.2882%" height="15" fill="rgb(236,107,19)" fg:x="41607" fg:w="355"/><text x="34.0301%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt;&gt; (43 samples, 0.03%)</title><rect x="34.0684%" y="549" width="0.0349%" height="15" fill="rgb(228,185,30)" fg:x="41962" fg:w="43"/><text x="34.3184%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt; (43 samples, 0.03%)</title><rect x="34.0684%" y="533" width="0.0349%" height="15" fill="rgb(246,134,8)" fg:x="41962" fg:w="43"/><text x="34.3184%" y="543.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (84 samples, 0.07%)</title><rect x="34.1585%" y="533" width="0.0682%" height="15" fill="rgb(214,143,50)" fg:x="42073" fg:w="84"/><text x="34.4085%" y="543.50"></text></g><g><title>core::time::Duration::as_nanos (83 samples, 0.07%)</title><rect x="34.2267%" y="533" width="0.0674%" height="15" fill="rgb(228,75,8)" fg:x="42157" fg:w="83"/><text x="34.4767%" y="543.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (319 samples, 0.26%)</title><rect x="34.2941%" y="517" width="0.2590%" height="15" fill="rgb(207,175,4)" fg:x="42240" fg:w="319"/><text x="34.5441%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (133 samples, 0.11%)</title><rect x="34.6757%" y="485" width="0.1080%" height="15" fill="rgb(205,108,24)" fg:x="42710" fg:w="133"/><text x="34.9257%" y="495.50"></text></g><g><title>core::cmp::PartialOrd::ge (133 samples, 0.11%)</title><rect x="34.6757%" y="469" width="0.1080%" height="15" fill="rgb(244,120,49)" fg:x="42710" fg:w="133"/><text x="34.9257%" y="479.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (132 samples, 0.11%)</title><rect x="34.6765%" y="453" width="0.1072%" height="15" fill="rgb(223,47,38)" fg:x="42711" fg:w="132"/><text x="34.9265%" y="463.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (132 samples, 0.11%)</title><rect x="34.6765%" y="437" width="0.1072%" height="15" fill="rgb(229,179,11)" fg:x="42711" fg:w="132"/><text x="34.9265%" y="447.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (132 samples, 0.11%)</title><rect x="34.6765%" y="421" width="0.1072%" height="15" fill="rgb(231,122,1)" fg:x="42711" fg:w="132"/><text x="34.9265%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (62 samples, 0.05%)</title><rect x="34.7333%" y="405" width="0.0503%" height="15" fill="rgb(245,119,9)" fg:x="42781" fg:w="62"/><text x="34.9833%" y="415.50"></text></g><g><title>std::time::SystemTime::duration_since (687 samples, 0.56%)</title><rect x="34.2941%" y="533" width="0.5578%" height="15" fill="rgb(241,163,25)" fg:x="42240" fg:w="687"/><text x="34.5441%" y="543.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (368 samples, 0.30%)</title><rect x="34.5531%" y="517" width="0.2988%" height="15" fill="rgb(217,214,3)" fg:x="42559" fg:w="368"/><text x="34.8031%" y="527.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (368 samples, 0.30%)</title><rect x="34.5531%" y="501" width="0.2988%" height="15" fill="rgb(240,86,28)" fg:x="42559" fg:w="368"/><text x="34.8031%" y="511.50"></text></g><g><title>core::time::Duration::new (84 samples, 0.07%)</title><rect x="34.7836%" y="485" width="0.0682%" height="15" fill="rgb(215,47,9)" fg:x="42843" fg:w="84"/><text x="35.0336%" y="495.50"></text></g><g><title>tremor_common::time::nanotime (2,412 samples, 1.96%)</title><rect x="34.1033%" y="549" width="1.9583%" height="15" fill="rgb(252,25,45)" fg:x="42005" fg:w="2412"/><text x="34.3533%" y="559.50">t..</text></g><g><title>std::time::SystemTime::now (1,490 samples, 1.21%)</title><rect x="34.8518%" y="533" width="1.2097%" height="15" fill="rgb(251,164,9)" fg:x="42927" fg:w="1490"/><text x="35.1018%" y="543.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (1,490 samples, 1.21%)</title><rect x="34.8518%" y="517" width="1.2097%" height="15" fill="rgb(233,194,0)" fg:x="42927" fg:w="1490"/><text x="35.1018%" y="527.50"></text></g><g><title>std::sys::unix::time::inner::now (1,490 samples, 1.21%)</title><rect x="34.8518%" y="501" width="1.2097%" height="15" fill="rgb(249,111,24)" fg:x="42927" fg:w="1490"/><text x="35.1018%" y="511.50"></text></g><g><title>__clock_gettime (1,217 samples, 0.99%)</title><rect x="35.0735%" y="485" width="0.9881%" height="15" fill="rgb(250,223,3)" fg:x="43200" fg:w="1217"/><text x="35.3235%" y="495.50"></text></g><g><title>__vdso_clock_gettime (1,144 samples, 0.93%)</title><rect x="35.1327%" y="469" width="0.9288%" height="15" fill="rgb(236,178,37)" fg:x="43273" fg:w="1144"/><text x="35.3827%" y="479.50"></text></g><g><title>[[vdso]] (1,010 samples, 0.82%)</title><rect x="35.2415%" y="453" width="0.8200%" height="15" fill="rgb(241,158,50)" fg:x="43407" fg:w="1010"/><text x="35.4915%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.02%)</title><rect x="36.1038%" y="405" width="0.0195%" height="15" fill="rgb(213,121,41)" fg:x="44469" fg:w="24"/><text x="36.3538%" y="415.50"></text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.02%)</title><rect x="36.1038%" y="389" width="0.0195%" height="15" fill="rgb(240,92,3)" fg:x="44469" fg:w="24"/><text x="36.3538%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.02%)</title><rect x="36.1038%" y="373" width="0.0195%" height="15" fill="rgb(205,123,3)" fg:x="44469" fg:w="24"/><text x="36.3538%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.02%)</title><rect x="36.1038%" y="357" width="0.0195%" height="15" fill="rgb(205,97,47)" fg:x="44469" fg:w="24"/><text x="36.3538%" y="367.50"></text></g><g><title>abi_stable::erased_types::iterator::next (44 samples, 0.04%)</title><rect x="36.0883%" y="437" width="0.0357%" height="15" fill="rgb(247,152,14)" fg:x="44450" fg:w="44"/><text x="36.3383%" y="447.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (25 samples, 0.02%)</title><rect x="36.1038%" y="421" width="0.0203%" height="15" fill="rgb(248,195,53)" fg:x="44469" fg:w="25"/><text x="36.3538%" y="431.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (13 samples, 0.01%)</title><rect x="36.1257%" y="405" width="0.0106%" height="15" fill="rgb(226,201,16)" fg:x="44496" fg:w="13"/><text x="36.3757%" y="415.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (13 samples, 0.01%)</title><rect x="36.1257%" y="389" width="0.0106%" height="15" fill="rgb(205,98,0)" fg:x="44496" fg:w="13"/><text x="36.3757%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (79 samples, 0.06%)</title><rect x="36.0770%" y="501" width="0.0641%" height="15" fill="rgb(214,191,48)" fg:x="44436" fg:w="79"/><text x="36.3270%" y="511.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (79 samples, 0.06%)</title><rect x="36.0770%" y="485" width="0.0641%" height="15" fill="rgb(237,112,39)" fg:x="44436" fg:w="79"/><text x="36.3270%" y="495.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (79 samples, 0.06%)</title><rect x="36.0770%" y="469" width="0.0641%" height="15" fill="rgb(247,203,27)" fg:x="44436" fg:w="79"/><text x="36.3270%" y="479.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (79 samples, 0.06%)</title><rect x="36.0770%" y="453" width="0.0641%" height="15" fill="rgb(235,124,28)" fg:x="44436" fg:w="79"/><text x="36.3270%" y="463.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (21 samples, 0.02%)</title><rect x="36.1241%" y="437" width="0.0170%" height="15" fill="rgb(208,207,46)" fg:x="44494" fg:w="21"/><text x="36.3741%" y="447.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (21 samples, 0.02%)</title><rect x="36.1241%" y="421" width="0.0170%" height="15" fill="rgb(234,176,4)" fg:x="44494" fg:w="21"/><text x="36.3741%" y="431.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint (19 samples, 0.02%)</title><rect x="36.1655%" y="437" width="0.0154%" height="15" fill="rgb(230,133,28)" fg:x="44545" fg:w="19"/><text x="36.4155%" y="447.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint::{{closure}} (13 samples, 0.01%)</title><rect x="36.1703%" y="421" width="0.0106%" height="15" fill="rgb(211,137,40)" fg:x="44551" fg:w="13"/><text x="36.4203%" y="431.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (13 samples, 0.01%)</title><rect x="36.1809%" y="405" width="0.0106%" height="15" fill="rgb(254,35,13)" fg:x="44564" fg:w="13"/><text x="36.4309%" y="415.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (13 samples, 0.01%)</title><rect x="36.1809%" y="389" width="0.0106%" height="15" fill="rgb(225,49,51)" fg:x="44564" fg:w="13"/><text x="36.4309%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (73 samples, 0.06%)</title><rect x="36.1411%" y="501" width="0.0593%" height="15" fill="rgb(251,10,15)" fg:x="44515" fg:w="73"/><text x="36.3911%" y="511.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::size_hint (73 samples, 0.06%)</title><rect x="36.1411%" y="485" width="0.0593%" height="15" fill="rgb(228,207,15)" fg:x="44515" fg:w="73"/><text x="36.3911%" y="495.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (73 samples, 0.06%)</title><rect x="36.1411%" y="469" width="0.0593%" height="15" fill="rgb(241,99,19)" fg:x="44515" fg:w="73"/><text x="36.3911%" y="479.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (73 samples, 0.06%)</title><rect x="36.1411%" y="453" width="0.0593%" height="15" fill="rgb(207,104,49)" fg:x="44515" fg:w="73"/><text x="36.3911%" y="463.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (24 samples, 0.02%)</title><rect x="36.1809%" y="437" width="0.0195%" height="15" fill="rgb(234,99,18)" fg:x="44564" fg:w="24"/><text x="36.4309%" y="447.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (24 samples, 0.02%)</title><rect x="36.1809%" y="421" width="0.0195%" height="15" fill="rgb(213,191,49)" fg:x="44564" fg:w="24"/><text x="36.4309%" y="431.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;abi_stable::std_types::tuple::Tuple2&lt;K,V&gt;&gt;&gt;::extend (201 samples, 0.16%)</title><rect x="36.0615%" y="533" width="0.1632%" height="15" fill="rgb(210,226,19)" fg:x="44417" fg:w="201"/><text x="36.3115%" y="543.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (197 samples, 0.16%)</title><rect x="36.0648%" y="517" width="0.1599%" height="15" fill="rgb(229,97,18)" fg:x="44421" fg:w="197"/><text x="36.3148%" y="527.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (30 samples, 0.02%)</title><rect x="36.2004%" y="501" width="0.0244%" height="15" fill="rgb(211,167,15)" fg:x="44588" fg:w="30"/><text x="36.4504%" y="511.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (22 samples, 0.02%)</title><rect x="36.2069%" y="485" width="0.0179%" height="15" fill="rgb(210,169,34)" fg:x="44596" fg:w="22"/><text x="36.4569%" y="495.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (22 samples, 0.02%)</title><rect x="36.2069%" y="469" width="0.0179%" height="15" fill="rgb(241,121,31)" fg:x="44596" fg:w="22"/><text x="36.4569%" y="479.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (13 samples, 0.01%)</title><rect x="36.2142%" y="453" width="0.0106%" height="15" fill="rgb(232,40,11)" fg:x="44605" fg:w="13"/><text x="36.4642%" y="463.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (13 samples, 0.01%)</title><rect x="36.2142%" y="437" width="0.0106%" height="15" fill="rgb(205,86,26)" fg:x="44605" fg:w="13"/><text x="36.4642%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (13 samples, 0.01%)</title><rect x="36.2142%" y="421" width="0.0106%" height="15" fill="rgb(231,126,28)" fg:x="44605" fg:w="13"/><text x="36.4642%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (13 samples, 0.01%)</title><rect x="36.2142%" y="405" width="0.0106%" height="15" fill="rgb(219,221,18)" fg:x="44605" fg:w="13"/><text x="36.4642%" y="415.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (31 samples, 0.03%)</title><rect x="36.2548%" y="453" width="0.0252%" height="15" fill="rgb(211,40,0)" fg:x="44655" fg:w="31"/><text x="36.5048%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (31 samples, 0.03%)</title><rect x="36.2548%" y="437" width="0.0252%" height="15" fill="rgb(239,85,43)" fg:x="44655" fg:w="31"/><text x="36.5048%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (19 samples, 0.02%)</title><rect x="36.2645%" y="421" width="0.0154%" height="15" fill="rgb(231,55,21)" fg:x="44667" fg:w="19"/><text x="36.5145%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (19 samples, 0.02%)</title><rect x="36.2645%" y="405" width="0.0154%" height="15" fill="rgb(225,184,43)" fg:x="44667" fg:w="19"/><text x="36.5145%" y="415.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (27 samples, 0.02%)</title><rect x="36.4659%" y="293" width="0.0219%" height="15" fill="rgb(251,158,41)" fg:x="44915" fg:w="27"/><text x="36.7159%" y="303.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (260 samples, 0.21%)</title><rect x="36.2799%" y="453" width="0.2111%" height="15" fill="rgb(234,159,37)" fg:x="44686" fg:w="260"/><text x="36.5299%" y="463.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (260 samples, 0.21%)</title><rect x="36.2799%" y="437" width="0.2111%" height="15" fill="rgb(216,204,22)" fg:x="44686" fg:w="260"/><text x="36.5299%" y="447.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (243 samples, 0.20%)</title><rect x="36.2937%" y="421" width="0.1973%" height="15" fill="rgb(214,17,3)" fg:x="44703" fg:w="243"/><text x="36.5437%" y="431.50"></text></g><g><title>alloc::alloc::exchange_malloc (208 samples, 0.17%)</title><rect x="36.3222%" y="405" width="0.1689%" height="15" fill="rgb(212,111,17)" fg:x="44738" fg:w="208"/><text x="36.5722%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (203 samples, 0.16%)</title><rect x="36.3262%" y="389" width="0.1648%" height="15" fill="rgb(221,157,24)" fg:x="44743" fg:w="203"/><text x="36.5762%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (203 samples, 0.16%)</title><rect x="36.3262%" y="373" width="0.1648%" height="15" fill="rgb(252,16,13)" fg:x="44743" fg:w="203"/><text x="36.5762%" y="383.50"></text></g><g><title>alloc::alloc::alloc (203 samples, 0.16%)</title><rect x="36.3262%" y="357" width="0.1648%" height="15" fill="rgb(221,62,2)" fg:x="44743" fg:w="203"/><text x="36.5762%" y="367.50"></text></g><g><title>__rg_alloc (203 samples, 0.16%)</title><rect x="36.3262%" y="341" width="0.1648%" height="15" fill="rgb(247,87,22)" fg:x="44743" fg:w="203"/><text x="36.5762%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (203 samples, 0.16%)</title><rect x="36.3262%" y="325" width="0.1648%" height="15" fill="rgb(215,73,9)" fg:x="44743" fg:w="203"/><text x="36.5762%" y="335.50"></text></g><g><title>sn_rust_alloc (186 samples, 0.15%)</title><rect x="36.3400%" y="309" width="0.1510%" height="15" fill="rgb(207,175,33)" fg:x="44760" fg:w="186"/><text x="36.5900%" y="319.50"></text></g><g><title>abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt;::new (14 samples, 0.01%)</title><rect x="36.4910%" y="453" width="0.0114%" height="15" fill="rgb(243,129,54)" fg:x="44946" fg:w="14"/><text x="36.7410%" y="463.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (29 samples, 0.02%)</title><rect x="36.5113%" y="389" width="0.0235%" height="15" fill="rgb(227,119,45)" fg:x="44971" fg:w="29"/><text x="36.7613%" y="399.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::pointer_trait::OwnedPointer for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop_allocation (129 samples, 0.10%)</title><rect x="36.5024%" y="405" width="0.1047%" height="15" fill="rgb(205,109,36)" fg:x="44960" fg:w="129"/><text x="36.7524%" y="415.50"></text></g><g><title>sn_rust_dealloc (89 samples, 0.07%)</title><rect x="36.5349%" y="389" width="0.0723%" height="15" fill="rgb(205,6,39)" fg:x="45000" fg:w="89"/><text x="36.7849%" y="399.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (541 samples, 0.44%)</title><rect x="36.2247%" y="533" width="0.4392%" height="15" fill="rgb(221,32,16)" fg:x="44618" fg:w="541"/><text x="36.4747%" y="543.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (537 samples, 0.44%)</title><rect x="36.2280%" y="517" width="0.4360%" height="15" fill="rgb(228,144,50)" fg:x="44622" fg:w="537"/><text x="36.4780%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val (524 samples, 0.43%)</title><rect x="36.2385%" y="501" width="0.4254%" height="15" fill="rgb(229,201,53)" fg:x="44635" fg:w="524"/><text x="36.4885%" y="511.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val::{{closure}} (517 samples, 0.42%)</title><rect x="36.2442%" y="485" width="0.4197%" height="15" fill="rgb(249,153,27)" fg:x="44642" fg:w="517"/><text x="36.4942%" y="495.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val::{{closure}} (517 samples, 0.42%)</title><rect x="36.2442%" y="469" width="0.4197%" height="15" fill="rgb(227,106,25)" fg:x="44642" fg:w="517"/><text x="36.4942%" y="479.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (199 samples, 0.16%)</title><rect x="36.5024%" y="453" width="0.1616%" height="15" fill="rgb(230,65,29)" fg:x="44960" fg:w="199"/><text x="36.7524%" y="463.50"></text></g><g><title>core::ops::function::FnOnce::call_once (199 samples, 0.16%)</title><rect x="36.5024%" y="437" width="0.1616%" height="15" fill="rgb(221,57,46)" fg:x="44960" fg:w="199"/><text x="36.7524%" y="447.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::into_inner (199 samples, 0.16%)</title><rect x="36.5024%" y="421" width="0.1616%" height="15" fill="rgb(229,161,17)" fg:x="44960" fg:w="199"/><text x="36.7524%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (70 samples, 0.06%)</title><rect x="36.6071%" y="405" width="0.0568%" height="15" fill="rgb(222,213,11)" fg:x="45089" fg:w="70"/><text x="36.8571%" y="415.50"></text></g><g><title>core::ptr::read (70 samples, 0.06%)</title><rect x="36.6071%" y="389" width="0.0568%" height="15" fill="rgb(235,35,13)" fg:x="45089" fg:w="70"/><text x="36.8571%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="36.7110%" y="405" width="0.0130%" height="15" fill="rgb(233,158,34)" fg:x="45217" fg:w="16"/><text x="36.9610%" y="415.50"></text></g><g><title>alloc::alloc::box_free (16 samples, 0.01%)</title><rect x="36.7110%" y="389" width="0.0130%" height="15" fill="rgb(215,151,48)" fg:x="45217" fg:w="16"/><text x="36.9610%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 0.01%)</title><rect x="36.7110%" y="373" width="0.0130%" height="15" fill="rgb(229,84,14)" fg:x="45217" fg:w="16"/><text x="36.9610%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 0.01%)</title><rect x="36.7110%" y="357" width="0.0130%" height="15" fill="rgb(229,68,14)" fg:x="45217" fg:w="16"/><text x="36.9610%" y="367.50"></text></g><g><title>__rg_dealloc (16 samples, 0.01%)</title><rect x="36.7110%" y="341" width="0.0130%" height="15" fill="rgb(243,106,26)" fg:x="45217" fg:w="16"/><text x="36.9610%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (16 samples, 0.01%)</title><rect x="36.7110%" y="325" width="0.0130%" height="15" fill="rgb(206,45,38)" fg:x="45217" fg:w="16"/><text x="36.9610%" y="335.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (49 samples, 0.04%)</title><rect x="36.6948%" y="421" width="0.0398%" height="15" fill="rgb(226,6,15)" fg:x="45197" fg:w="49"/><text x="36.9448%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="36.7240%" y="405" width="0.0106%" height="15" fill="rgb(232,22,54)" fg:x="45233" fg:w="13"/><text x="36.9740%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (13 samples, 0.01%)</title><rect x="36.7240%" y="389" width="0.0106%" height="15" fill="rgb(229,222,32)" fg:x="45233" fg:w="13"/><text x="36.9740%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawIntoIter&lt;(abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value)&gt;&gt; (13 samples, 0.01%)</title><rect x="36.7240%" y="373" width="0.0106%" height="15" fill="rgb(228,62,29)" fg:x="45233" fg:w="13"/><text x="36.9740%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="36.7240%" y="357" width="0.0106%" height="15" fill="rgb(251,103,34)" fg:x="45233" fg:w="13"/><text x="36.9740%" y="367.50"></text></g><g><title>sn_rust_dealloc (142 samples, 0.12%)</title><rect x="36.7346%" y="421" width="0.1153%" height="15" fill="rgb(233,12,30)" fg:x="45246" fg:w="142"/><text x="36.9846%" y="431.50"></text></g><g><title>tremor_pipeline::OpMeta::merge (972 samples, 0.79%)</title><rect x="36.0615%" y="549" width="0.7892%" height="15" fill="rgb(238,52,0)" fg:x="44417" fg:w="972"/><text x="36.3115%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (230 samples, 0.19%)</title><rect x="36.6640%" y="533" width="0.1867%" height="15" fill="rgb(223,98,5)" fg:x="45159" fg:w="230"/><text x="36.9140%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::ValIterInterface&lt;u32,u32&gt;&gt;&gt; (230 samples, 0.19%)</title><rect x="36.6640%" y="517" width="0.1867%" height="15" fill="rgb(228,75,37)" fg:x="45159" fg:w="230"/><text x="36.9140%" y="527.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (230 samples, 0.19%)</title><rect x="36.6640%" y="501" width="0.1867%" height="15" fill="rgb(205,115,49)" fg:x="45159" fg:w="230"/><text x="36.9140%" y="511.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (214 samples, 0.17%)</title><rect x="36.6770%" y="485" width="0.1737%" height="15" fill="rgb(250,154,43)" fg:x="45175" fg:w="214"/><text x="36.9270%" y="495.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (208 samples, 0.17%)</title><rect x="36.6818%" y="469" width="0.1689%" height="15" fill="rgb(226,43,29)" fg:x="45181" fg:w="208"/><text x="36.9318%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (208 samples, 0.17%)</title><rect x="36.6818%" y="453" width="0.1689%" height="15" fill="rgb(249,228,39)" fg:x="45181" fg:w="208"/><text x="36.9318%" y="463.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (208 samples, 0.17%)</title><rect x="36.6818%" y="437" width="0.1689%" height="15" fill="rgb(216,79,43)" fg:x="45181" fg:w="208"/><text x="36.9318%" y="447.50"></text></g><g><title>tremor_runtime::connectors::sink::handle_replies (21 samples, 0.02%)</title><rect x="36.8507%" y="549" width="0.0170%" height="15" fill="rgb(228,95,12)" fg:x="45389" fg:w="21"/><text x="37.1007%" y="559.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (21,181 samples, 17.20%)</title><rect x="19.6809%" y="565" width="17.1966%" height="15" fill="rgb(249,221,15)" fg:x="24241" fg:w="21181"/><text x="19.9309%" y="575.50">tremor_runtime::connectors:..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (425 samples, 0.35%)</title><rect x="37.0188%" y="453" width="0.3451%" height="15" fill="rgb(233,34,13)" fg:x="45596" fg:w="425"/><text x="37.2688%" y="463.50"></text></g><g><title>core::ptr::read (402 samples, 0.33%)</title><rect x="37.0374%" y="437" width="0.3264%" height="15" fill="rgb(214,103,39)" fg:x="45619" fg:w="402"/><text x="37.2874%" y="447.50"></text></g><g><title>[libc-2.31.so] (394 samples, 0.32%)</title><rect x="37.0439%" y="421" width="0.3199%" height="15" fill="rgb(251,126,39)" fg:x="45627" fg:w="394"/><text x="37.2939%" y="431.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (16 samples, 0.01%)</title><rect x="37.5424%" y="181" width="0.0130%" height="15" fill="rgb(214,216,36)" fg:x="46241" fg:w="16"/><text x="37.7924%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (228 samples, 0.19%)</title><rect x="37.3711%" y="325" width="0.1851%" height="15" fill="rgb(220,221,8)" fg:x="46030" fg:w="228"/><text x="37.6211%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (228 samples, 0.19%)</title><rect x="37.3711%" y="309" width="0.1851%" height="15" fill="rgb(240,216,3)" fg:x="46030" fg:w="228"/><text x="37.6211%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (228 samples, 0.19%)</title><rect x="37.3711%" y="293" width="0.1851%" height="15" fill="rgb(232,218,17)" fg:x="46030" fg:w="228"/><text x="37.6211%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (226 samples, 0.18%)</title><rect x="37.3727%" y="277" width="0.1835%" height="15" fill="rgb(229,163,45)" fg:x="46032" fg:w="226"/><text x="37.6227%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (226 samples, 0.18%)</title><rect x="37.3727%" y="261" width="0.1835%" height="15" fill="rgb(231,110,42)" fg:x="46032" fg:w="226"/><text x="37.6227%" y="271.50"></text></g><g><title>alloc::alloc::alloc (226 samples, 0.18%)</title><rect x="37.3727%" y="245" width="0.1835%" height="15" fill="rgb(208,170,48)" fg:x="46032" fg:w="226"/><text x="37.6227%" y="255.50"></text></g><g><title>__rg_alloc (226 samples, 0.18%)</title><rect x="37.3727%" y="229" width="0.1835%" height="15" fill="rgb(239,116,25)" fg:x="46032" fg:w="226"/><text x="37.6227%" y="239.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (226 samples, 0.18%)</title><rect x="37.3727%" y="213" width="0.1835%" height="15" fill="rgb(219,200,50)" fg:x="46032" fg:w="226"/><text x="37.6227%" y="223.50"></text></g><g><title>sn_rust_alloc (220 samples, 0.18%)</title><rect x="37.3776%" y="197" width="0.1786%" height="15" fill="rgb(245,200,0)" fg:x="46038" fg:w="220"/><text x="37.6276%" y="207.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (262 samples, 0.21%)</title><rect x="37.3711%" y="453" width="0.2127%" height="15" fill="rgb(245,119,33)" fg:x="46030" fg:w="262"/><text x="37.6211%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (262 samples, 0.21%)</title><rect x="37.3711%" y="437" width="0.2127%" height="15" fill="rgb(231,125,12)" fg:x="46030" fg:w="262"/><text x="37.6211%" y="447.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (262 samples, 0.21%)</title><rect x="37.3711%" y="421" width="0.2127%" height="15" fill="rgb(216,96,41)" fg:x="46030" fg:w="262"/><text x="37.6211%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (262 samples, 0.21%)</title><rect x="37.3711%" y="405" width="0.2127%" height="15" fill="rgb(248,43,45)" fg:x="46030" fg:w="262"/><text x="37.6211%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (262 samples, 0.21%)</title><rect x="37.3711%" y="389" width="0.2127%" height="15" fill="rgb(217,222,7)" fg:x="46030" fg:w="262"/><text x="37.6211%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (262 samples, 0.21%)</title><rect x="37.3711%" y="373" width="0.2127%" height="15" fill="rgb(233,28,6)" fg:x="46030" fg:w="262"/><text x="37.6211%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (262 samples, 0.21%)</title><rect x="37.3711%" y="357" width="0.2127%" height="15" fill="rgb(231,218,15)" fg:x="46030" fg:w="262"/><text x="37.6211%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (262 samples, 0.21%)</title><rect x="37.3711%" y="341" width="0.2127%" height="15" fill="rgb(226,171,48)" fg:x="46030" fg:w="262"/><text x="37.6211%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (34 samples, 0.03%)</title><rect x="37.5562%" y="325" width="0.0276%" height="15" fill="rgb(235,201,9)" fg:x="46258" fg:w="34"/><text x="37.8062%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (34 samples, 0.03%)</title><rect x="37.5562%" y="309" width="0.0276%" height="15" fill="rgb(217,80,15)" fg:x="46258" fg:w="34"/><text x="37.8062%" y="319.50"></text></g><g><title>[libc-2.31.so] (27 samples, 0.02%)</title><rect x="37.5619%" y="293" width="0.0219%" height="15" fill="rgb(219,152,8)" fg:x="46265" fg:w="27"/><text x="37.8119%" y="303.50"></text></g><g><title>[libc-2.31.so] (578 samples, 0.47%)</title><rect x="37.5838%" y="453" width="0.4693%" height="15" fill="rgb(243,107,38)" fg:x="46292" fg:w="578"/><text x="37.8338%" y="463.50"></text></g><g><title>[libc-2.31.so] (315 samples, 0.26%)</title><rect x="38.0580%" y="437" width="0.2557%" height="15" fill="rgb(231,17,5)" fg:x="46876" fg:w="315"/><text x="38.3080%" y="447.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (858 samples, 0.70%)</title><rect x="38.3754%" y="325" width="0.6966%" height="15" fill="rgb(209,25,54)" fg:x="47267" fg:w="858"/><text x="38.6254%" y="335.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (15 samples, 0.01%)</title><rect x="39.0720%" y="325" width="0.0122%" height="15" fill="rgb(219,0,2)" fg:x="48125" fg:w="15"/><text x="39.3220%" y="335.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1,271 samples, 1.03%)</title><rect x="38.0531%" y="453" width="1.0319%" height="15" fill="rgb(246,9,5)" fg:x="46870" fg:w="1271"/><text x="38.3031%" y="463.50"></text></g><g><title>alloc::alloc::exchange_malloc (950 samples, 0.77%)</title><rect x="38.3137%" y="437" width="0.7713%" height="15" fill="rgb(226,159,4)" fg:x="47191" fg:w="950"/><text x="38.5637%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (950 samples, 0.77%)</title><rect x="38.3137%" y="421" width="0.7713%" height="15" fill="rgb(219,175,34)" fg:x="47191" fg:w="950"/><text x="38.5637%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (950 samples, 0.77%)</title><rect x="38.3137%" y="405" width="0.7713%" height="15" fill="rgb(236,10,46)" fg:x="47191" fg:w="950"/><text x="38.5637%" y="415.50"></text></g><g><title>alloc::alloc::alloc (949 samples, 0.77%)</title><rect x="38.3145%" y="389" width="0.7705%" height="15" fill="rgb(240,211,16)" fg:x="47192" fg:w="949"/><text x="38.5645%" y="399.50"></text></g><g><title>__rg_alloc (949 samples, 0.77%)</title><rect x="38.3145%" y="373" width="0.7705%" height="15" fill="rgb(205,3,43)" fg:x="47192" fg:w="949"/><text x="38.5645%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (949 samples, 0.77%)</title><rect x="38.3145%" y="357" width="0.7705%" height="15" fill="rgb(245,7,22)" fg:x="47192" fg:w="949"/><text x="38.5645%" y="367.50"></text></g><g><title>sn_rust_alloc (949 samples, 0.77%)</title><rect x="38.3145%" y="341" width="0.7705%" height="15" fill="rgb(239,132,32)" fg:x="47192" fg:w="949"/><text x="38.5645%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.01%)</title><rect x="39.0988%" y="357" width="0.0114%" height="15" fill="rgb(228,202,34)" fg:x="48158" fg:w="14"/><text x="39.3488%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.01%)</title><rect x="39.0988%" y="341" width="0.0114%" height="15" fill="rgb(254,200,22)" fg:x="48158" fg:w="14"/><text x="39.3488%" y="351.50"></text></g><g><title>__rg_dealloc (14 samples, 0.01%)</title><rect x="39.0988%" y="325" width="0.0114%" height="15" fill="rgb(219,10,39)" fg:x="48158" fg:w="14"/><text x="39.3488%" y="335.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (14 samples, 0.01%)</title><rect x="39.0988%" y="309" width="0.0114%" height="15" fill="rgb(226,210,39)" fg:x="48158" fg:w="14"/><text x="39.3488%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event),alloc::alloc::Global&gt;&gt; (21 samples, 0.02%)</title><rect x="39.0988%" y="421" width="0.0170%" height="15" fill="rgb(208,219,16)" fg:x="48158" fg:w="21"/><text x="39.3488%" y="431.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.02%)</title><rect x="39.0988%" y="405" width="0.0170%" height="15" fill="rgb(216,158,51)" fg:x="48158" fg:w="21"/><text x="39.3488%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (21 samples, 0.02%)</title><rect x="39.0988%" y="389" width="0.0170%" height="15" fill="rgb(233,14,44)" fg:x="48158" fg:w="21"/><text x="39.3488%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.02%)</title><rect x="39.0988%" y="373" width="0.0170%" height="15" fill="rgb(237,97,39)" fg:x="48158" fg:w="21"/><text x="39.3488%" y="383.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (53 samples, 0.04%)</title><rect x="39.0850%" y="437" width="0.0430%" height="15" fill="rgb(218,198,43)" fg:x="48141" fg:w="53"/><text x="39.3350%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)]&gt; (15 samples, 0.01%)</title><rect x="39.1159%" y="421" width="0.0122%" height="15" fill="rgb(231,104,20)" fg:x="48179" fg:w="15"/><text x="39.3659%" y="431.50"></text></g><g><title>sn_rust_dealloc (59 samples, 0.05%)</title><rect x="39.1280%" y="437" width="0.0479%" height="15" fill="rgb(254,36,13)" fg:x="48194" fg:w="59"/><text x="39.3780%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (125 samples, 0.10%)</title><rect x="39.0850%" y="453" width="0.1015%" height="15" fill="rgb(248,14,50)" fg:x="48141" fg:w="125"/><text x="39.3350%" y="463.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (13 samples, 0.01%)</title><rect x="39.1759%" y="437" width="0.0106%" height="15" fill="rgb(217,107,29)" fg:x="48253" fg:w="13"/><text x="39.4259%" y="447.50"></text></g><g><title>core::str::&lt;impl str&gt;::eq_ignore_ascii_case (36 samples, 0.03%)</title><rect x="39.2035%" y="453" width="0.0292%" height="15" fill="rgb(251,169,33)" fg:x="48287" fg:w="36"/><text x="39.4535%" y="463.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case (36 samples, 0.03%)</title><rect x="39.2035%" y="437" width="0.0292%" height="15" fill="rgb(217,108,32)" fg:x="48287" fg:w="36"/><text x="39.4535%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (35 samples, 0.03%)</title><rect x="39.2044%" y="421" width="0.0284%" height="15" fill="rgb(219,66,42)" fg:x="48288" fg:w="35"/><text x="39.4544%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (35 samples, 0.03%)</title><rect x="39.2044%" y="405" width="0.0284%" height="15" fill="rgb(206,180,7)" fg:x="48288" fg:w="35"/><text x="39.4544%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::{{closure}} (23 samples, 0.02%)</title><rect x="39.2141%" y="389" width="0.0187%" height="15" fill="rgb(208,226,31)" fg:x="48300" fg:w="23"/><text x="39.4641%" y="399.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case::{{closure}} (23 samples, 0.02%)</title><rect x="39.2141%" y="373" width="0.0187%" height="15" fill="rgb(218,26,49)" fg:x="48300" fg:w="23"/><text x="39.4641%" y="383.50"></text></g><g><title>core::num::&lt;impl u8&gt;::eq_ignore_ascii_case (23 samples, 0.02%)</title><rect x="39.2141%" y="357" width="0.0187%" height="15" fill="rgb(233,197,48)" fg:x="48300" fg:w="23"/><text x="39.4641%" y="367.50"></text></g><g><title>core::num::&lt;impl u8&gt;::to_ascii_lowercase (23 samples, 0.02%)</title><rect x="39.2141%" y="341" width="0.0187%" height="15" fill="rgb(252,181,51)" fg:x="48300" fg:w="23"/><text x="39.4641%" y="351.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_uppercase (13 samples, 0.01%)</title><rect x="39.2222%" y="325" width="0.0106%" height="15" fill="rgb(253,90,19)" fg:x="48310" fg:w="13"/><text x="39.4722%" y="335.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,927 samples, 2.38%)</title><rect x="36.8775%" y="485" width="2.3764%" height="15" fill="rgb(215,171,30)" fg:x="45422" fg:w="2927"/><text x="37.1275%" y="495.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (2,926 samples, 2.38%)</title><rect x="36.8783%" y="469" width="2.3756%" height="15" fill="rgb(214,222,9)" fg:x="45423" fg:w="2926"/><text x="37.1283%" y="479.50">tr..</text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (23 samples, 0.02%)</title><rect x="39.2352%" y="453" width="0.0187%" height="15" fill="rgb(223,3,22)" fg:x="48326" fg:w="23"/><text x="39.4852%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (23 samples, 0.02%)</title><rect x="39.2352%" y="437" width="0.0187%" height="15" fill="rgb(225,196,46)" fg:x="48326" fg:w="23"/><text x="39.4852%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (23 samples, 0.02%)</title><rect x="39.2352%" y="421" width="0.0187%" height="15" fill="rgb(209,110,37)" fg:x="48326" fg:w="23"/><text x="39.4852%" y="431.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,987 samples, 2.43%)</title><rect x="36.8775%" y="549" width="2.4251%" height="15" fill="rgb(249,89,12)" fg:x="45422" fg:w="2987"/><text x="37.1275%" y="559.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (2,987 samples, 2.43%)</title><rect x="36.8775%" y="533" width="2.4251%" height="15" fill="rgb(226,27,33)" fg:x="45422" fg:w="2987"/><text x="37.1275%" y="543.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,987 samples, 2.43%)</title><rect x="36.8775%" y="517" width="2.4251%" height="15" fill="rgb(213,82,22)" fg:x="45422" fg:w="2987"/><text x="37.1275%" y="527.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (2,987 samples, 2.43%)</title><rect x="36.8775%" y="501" width="2.4251%" height="15" fill="rgb(248,140,0)" fg:x="45422" fg:w="2987"/><text x="37.1275%" y="511.50">tr..</text></g><g><title>tremor_runtime::connectors::source::Streams::get_or_create_stream (60 samples, 0.05%)</title><rect x="39.2539%" y="485" width="0.0487%" height="15" fill="rgb(228,106,3)" fg:x="48349" fg:w="60"/><text x="39.5039%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (35 samples, 0.03%)</title><rect x="39.2742%" y="469" width="0.0284%" height="15" fill="rgb(209,23,37)" fg:x="48374" fg:w="35"/><text x="39.5242%" y="479.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (25 samples, 0.02%)</title><rect x="39.2823%" y="453" width="0.0203%" height="15" fill="rgb(241,93,50)" fg:x="48384" fg:w="25"/><text x="39.5323%" y="463.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (25 samples, 0.02%)</title><rect x="39.2823%" y="437" width="0.0203%" height="15" fill="rgb(253,46,43)" fg:x="48384" fg:w="25"/><text x="39.5323%" y="447.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (25 samples, 0.02%)</title><rect x="39.2823%" y="421" width="0.0203%" height="15" fill="rgb(226,206,43)" fg:x="48384" fg:w="25"/><text x="39.5323%" y="431.50"></text></g><g><title>[libc-2.31.so] (633 samples, 0.51%)</title><rect x="39.4016%" y="533" width="0.5139%" height="15" fill="rgb(217,54,7)" fg:x="48531" fg:w="633"/><text x="39.6516%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt;&gt; (35 samples, 0.03%)</title><rect x="39.9229%" y="533" width="0.0284%" height="15" fill="rgb(223,5,52)" fg:x="49173" fg:w="35"/><text x="40.1729%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt; (35 samples, 0.03%)</title><rect x="39.9229%" y="517" width="0.0284%" height="15" fill="rgb(206,52,46)" fg:x="49173" fg:w="35"/><text x="40.1729%" y="527.50"></text></g><g><title>alloc::alloc::box_free (35 samples, 0.03%)</title><rect x="39.9229%" y="501" width="0.0284%" height="15" fill="rgb(253,136,11)" fg:x="49173" fg:w="35"/><text x="40.1729%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (35 samples, 0.03%)</title><rect x="39.9229%" y="485" width="0.0284%" height="15" fill="rgb(208,106,33)" fg:x="49173" fg:w="35"/><text x="40.1729%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (35 samples, 0.03%)</title><rect x="39.9229%" y="469" width="0.0284%" height="15" fill="rgb(206,54,4)" fg:x="49173" fg:w="35"/><text x="40.1729%" y="479.50"></text></g><g><title>__rg_dealloc (35 samples, 0.03%)</title><rect x="39.9229%" y="453" width="0.0284%" height="15" fill="rgb(213,3,15)" fg:x="49173" fg:w="35"/><text x="40.1729%" y="463.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (35 samples, 0.03%)</title><rect x="39.9229%" y="437" width="0.0284%" height="15" fill="rgb(252,211,39)" fg:x="49173" fg:w="35"/><text x="40.1729%" y="447.50"></text></g><g><title>sn_rust_dealloc (30 samples, 0.02%)</title><rect x="39.9269%" y="421" width="0.0244%" height="15" fill="rgb(223,6,36)" fg:x="49178" fg:w="30"/><text x="40.1769%" y="431.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (105 samples, 0.09%)</title><rect x="40.0495%" y="469" width="0.0852%" height="15" fill="rgb(252,169,45)" fg:x="49329" fg:w="105"/><text x="40.2995%" y="479.50"></text></g><g><title>core::mem::replace (105 samples, 0.09%)</title><rect x="40.0495%" y="453" width="0.0852%" height="15" fill="rgb(212,48,26)" fg:x="49329" fg:w="105"/><text x="40.2995%" y="463.50"></text></g><g><title>core::ptr::read (105 samples, 0.09%)</title><rect x="40.0495%" y="437" width="0.0852%" height="15" fill="rgb(251,102,48)" fg:x="49329" fg:w="105"/><text x="40.2995%" y="447.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (159 samples, 0.13%)</title><rect x="40.0268%" y="485" width="0.1291%" height="15" fill="rgb(243,208,16)" fg:x="49301" fg:w="159"/><text x="40.2768%" y="495.50"></text></g><g><title>core::mem::drop (26 samples, 0.02%)</title><rect x="40.1348%" y="469" width="0.0211%" height="15" fill="rgb(219,96,24)" fg:x="49434" fg:w="26"/><text x="40.3848%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (26 samples, 0.02%)</title><rect x="40.1348%" y="453" width="0.0211%" height="15" fill="rgb(219,33,29)" fg:x="49434" fg:w="26"/><text x="40.3848%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (181 samples, 0.15%)</title><rect x="40.1559%" y="485" width="0.1470%" height="15" fill="rgb(223,176,5)" fg:x="49460" fg:w="181"/><text x="40.4059%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (169 samples, 0.14%)</title><rect x="40.1656%" y="469" width="0.1372%" height="15" fill="rgb(228,140,14)" fg:x="49472" fg:w="169"/><text x="40.4156%" y="479.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (169 samples, 0.14%)</title><rect x="40.1656%" y="453" width="0.1372%" height="15" fill="rgb(217,179,31)" fg:x="49472" fg:w="169"/><text x="40.4156%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (160 samples, 0.13%)</title><rect x="40.1729%" y="437" width="0.1299%" height="15" fill="rgb(230,9,30)" fg:x="49481" fg:w="160"/><text x="40.4229%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (160 samples, 0.13%)</title><rect x="40.1729%" y="421" width="0.1299%" height="15" fill="rgb(230,136,20)" fg:x="49481" fg:w="160"/><text x="40.4229%" y="431.50"></text></g><g><title>__GI___pthread_mutex_unlock (153 samples, 0.12%)</title><rect x="40.1786%" y="405" width="0.1242%" height="15" fill="rgb(215,210,22)" fg:x="49488" fg:w="153"/><text x="40.4286%" y="415.50"></text></g><g><title>core::task::wake::Waker::will_wake (23 samples, 0.02%)</title><rect x="40.3028%" y="485" width="0.0187%" height="15" fill="rgb(218,43,5)" fg:x="49641" fg:w="23"/><text x="40.5528%" y="495.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (23 samples, 0.02%)</title><rect x="40.3028%" y="469" width="0.0187%" height="15" fill="rgb(216,11,5)" fg:x="49641" fg:w="23"/><text x="40.5528%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (15 samples, 0.01%)</title><rect x="40.3093%" y="453" width="0.0122%" height="15" fill="rgb(209,82,29)" fg:x="49649" fg:w="15"/><text x="40.5593%" y="463.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (15 samples, 0.01%)</title><rect x="40.3093%" y="437" width="0.0122%" height="15" fill="rgb(244,115,12)" fg:x="49649" fg:w="15"/><text x="40.5593%" y="447.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (779 samples, 0.63%)</title><rect x="39.9756%" y="501" width="0.6325%" height="15" fill="rgb(222,82,18)" fg:x="49238" fg:w="779"/><text x="40.2256%" y="511.50"></text></g><g><title>event_listener::Inner::lock (353 samples, 0.29%)</title><rect x="40.3215%" y="485" width="0.2866%" height="15" fill="rgb(249,227,8)" fg:x="49664" fg:w="353"/><text x="40.5715%" y="495.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (341 samples, 0.28%)</title><rect x="40.3312%" y="469" width="0.2769%" height="15" fill="rgb(253,141,45)" fg:x="49676" fg:w="341"/><text x="40.5812%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (335 samples, 0.27%)</title><rect x="40.3361%" y="453" width="0.2720%" height="15" fill="rgb(234,184,4)" fg:x="49682" fg:w="335"/><text x="40.5861%" y="463.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (334 samples, 0.27%)</title><rect x="40.3369%" y="437" width="0.2712%" height="15" fill="rgb(218,194,23)" fg:x="49683" fg:w="334"/><text x="40.5869%" y="447.50"></text></g><g><title>__GI___pthread_mutex_lock (334 samples, 0.27%)</title><rect x="40.3369%" y="421" width="0.2712%" height="15" fill="rgb(235,66,41)" fg:x="49683" fg:w="334"/><text x="40.5869%" y="431.50"></text></g><g><title>concurrent_queue::full_fence (243 samples, 0.20%)</title><rect x="40.6495%" y="453" width="0.1973%" height="15" fill="rgb(245,217,1)" fg:x="50068" fg:w="243"/><text x="40.8995%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (239 samples, 0.19%)</title><rect x="40.6528%" y="437" width="0.1940%" height="15" fill="rgb(229,91,1)" fg:x="50072" fg:w="239"/><text x="40.9028%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (239 samples, 0.19%)</title><rect x="40.6528%" y="421" width="0.1940%" height="15" fill="rgb(207,101,30)" fg:x="50072" fg:w="239"/><text x="40.9028%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (239 samples, 0.19%)</title><rect x="40.6528%" y="405" width="0.1940%" height="15" fill="rgb(223,82,49)" fg:x="50072" fg:w="239"/><text x="40.9028%" y="415.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (1,126 samples, 0.91%)</title><rect x="39.9513%" y="517" width="0.9142%" height="15" fill="rgb(218,167,17)" fg:x="49208" fg:w="1126"/><text x="40.2013%" y="527.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (317 samples, 0.26%)</title><rect x="40.6081%" y="501" width="0.2574%" height="15" fill="rgb(208,103,14)" fg:x="50017" fg:w="317"/><text x="40.8581%" y="511.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (292 samples, 0.24%)</title><rect x="40.6284%" y="485" width="0.2371%" height="15" fill="rgb(238,20,8)" fg:x="50042" fg:w="292"/><text x="40.8784%" y="495.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (288 samples, 0.23%)</title><rect x="40.6316%" y="469" width="0.2338%" height="15" fill="rgb(218,80,54)" fg:x="50046" fg:w="288"/><text x="40.8816%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (16 samples, 0.01%)</title><rect x="40.8525%" y="453" width="0.0130%" height="15" fill="rgb(240,144,17)" fg:x="50318" fg:w="16"/><text x="41.1025%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_load (16 samples, 0.01%)</title><rect x="40.8525%" y="437" width="0.0130%" height="15" fill="rgb(245,27,50)" fg:x="50318" fg:w="16"/><text x="41.1025%" y="447.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (4,918 samples, 3.99%)</title><rect x="36.8775%" y="565" width="3.9929%" height="15" fill="rgb(251,51,7)" fg:x="45422" fg:w="4918"/><text x="37.1275%" y="575.50">trem..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1,931 samples, 1.57%)</title><rect x="39.3026%" y="549" width="1.5678%" height="15" fill="rgb(245,217,29)" fg:x="48409" fg:w="1931"/><text x="39.5526%" y="559.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (1,132 samples, 0.92%)</title><rect x="39.9513%" y="533" width="0.9191%" height="15" fill="rgb(221,176,29)" fg:x="49208" fg:w="1132"/><text x="40.2013%" y="543.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (17 samples, 0.01%)</title><rect x="41.3721%" y="549" width="0.0138%" height="15" fill="rgb(212,180,24)" fg:x="50958" fg:w="17"/><text x="41.6221%" y="559.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17 samples, 0.01%)</title><rect x="41.3859%" y="549" width="0.0138%" height="15" fill="rgb(254,24,2)" fg:x="50975" fg:w="17"/><text x="41.6359%" y="559.50"></text></g><g><title>[libc-2.31.so] (428 samples, 0.35%)</title><rect x="41.4216%" y="533" width="0.3475%" height="15" fill="rgb(230,100,2)" fg:x="51019" fg:w="428"/><text x="41.6716%" y="543.50"></text></g><g><title>[libc-2.31.so] (795 samples, 0.65%)</title><rect x="41.9185%" y="517" width="0.6454%" height="15" fill="rgb(219,142,25)" fg:x="51631" fg:w="795"/><text x="42.1685%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (463 samples, 0.38%)</title><rect x="42.5639%" y="517" width="0.3759%" height="15" fill="rgb(240,73,43)" fg:x="52426" fg:w="463"/><text x="42.8139%" y="527.50"></text></g><g><title>core::ptr::write (449 samples, 0.36%)</title><rect x="42.5753%" y="501" width="0.3645%" height="15" fill="rgb(214,114,15)" fg:x="52440" fg:w="449"/><text x="42.8253%" y="511.50"></text></g><g><title>[libc-2.31.so] (444 samples, 0.36%)</title><rect x="42.5794%" y="485" width="0.3605%" height="15" fill="rgb(207,130,4)" fg:x="52445" fg:w="444"/><text x="42.8294%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (26 samples, 0.02%)</title><rect x="42.9398%" y="517" width="0.0211%" height="15" fill="rgb(221,25,40)" fg:x="52889" fg:w="26"/><text x="43.1898%" y="527.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (975 samples, 0.79%)</title><rect x="42.9642%" y="517" width="0.7916%" height="15" fill="rgb(241,184,7)" fg:x="52919" fg:w="975"/><text x="43.2142%" y="527.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (965 samples, 0.78%)</title><rect x="42.9723%" y="501" width="0.7835%" height="15" fill="rgb(235,159,4)" fg:x="52929" fg:w="965"/><text x="43.2223%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (938 samples, 0.76%)</title><rect x="42.9942%" y="485" width="0.7615%" height="15" fill="rgb(214,87,48)" fg:x="52956" fg:w="938"/><text x="43.2442%" y="495.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (938 samples, 0.76%)</title><rect x="42.9942%" y="469" width="0.7615%" height="15" fill="rgb(246,198,24)" fg:x="52956" fg:w="938"/><text x="43.2442%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (938 samples, 0.76%)</title><rect x="42.9942%" y="453" width="0.7615%" height="15" fill="rgb(209,66,40)" fg:x="52956" fg:w="938"/><text x="43.2442%" y="463.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (938 samples, 0.76%)</title><rect x="42.9942%" y="437" width="0.7615%" height="15" fill="rgb(233,147,39)" fg:x="52956" fg:w="938"/><text x="43.2442%" y="447.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (938 samples, 0.76%)</title><rect x="42.9942%" y="421" width="0.7615%" height="15" fill="rgb(231,145,52)" fg:x="52956" fg:w="938"/><text x="43.2442%" y="431.50"></text></g><g><title>[libc-2.31.so] (908 samples, 0.74%)</title><rect x="43.0186%" y="405" width="0.7372%" height="15" fill="rgb(206,20,26)" fg:x="52986" fg:w="908"/><text x="43.2686%" y="415.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::clone::Clone&gt;::clone (28 samples, 0.02%)</title><rect x="43.8475%" y="485" width="0.0227%" height="15" fill="rgb(238,220,4)" fg:x="54007" fg:w="28"/><text x="44.0975%" y="495.50"></text></g><g><title>[libc-2.31.so] (988 samples, 0.80%)</title><rect x="43.8703%" y="485" width="0.8021%" height="15" fill="rgb(252,195,42)" fg:x="54035" fg:w="988"/><text x="44.1203%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (328 samples, 0.27%)</title><rect x="44.6773%" y="485" width="0.2663%" height="15" fill="rgb(209,10,6)" fg:x="55029" fg:w="328"/><text x="44.9273%" y="495.50"></text></g><g><title>core::ptr::read (303 samples, 0.25%)</title><rect x="44.6976%" y="469" width="0.2460%" height="15" fill="rgb(229,3,52)" fg:x="55054" fg:w="303"/><text x="44.9476%" y="479.50"></text></g><g><title>[libc-2.31.so] (261 samples, 0.21%)</title><rect x="44.7317%" y="453" width="0.2119%" height="15" fill="rgb(253,49,37)" fg:x="55096" fg:w="261"/><text x="44.9817%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (411 samples, 0.33%)</title><rect x="44.9436%" y="485" width="0.3337%" height="15" fill="rgb(240,103,49)" fg:x="55357" fg:w="411"/><text x="45.1936%" y="495.50"></text></g><g><title>core::ptr::write (399 samples, 0.32%)</title><rect x="44.9533%" y="469" width="0.3239%" height="15" fill="rgb(250,182,30)" fg:x="55369" fg:w="399"/><text x="45.2033%" y="479.50"></text></g><g><title>[libc-2.31.so] (399 samples, 0.32%)</title><rect x="44.9533%" y="453" width="0.3239%" height="15" fill="rgb(248,8,30)" fg:x="55369" fg:w="399"/><text x="45.2033%" y="463.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (4,331 samples, 3.52%)</title><rect x="41.7691%" y="533" width="3.5163%" height="15" fill="rgb(237,120,30)" fg:x="51447" fg:w="4331"/><text x="42.0191%" y="543.50">tre..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (1,884 samples, 1.53%)</title><rect x="43.7558%" y="517" width="1.5296%" height="15" fill="rgb(221,146,34)" fg:x="53894" fg:w="1884"/><text x="44.0058%" y="527.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (1,867 samples, 1.52%)</title><rect x="43.7696%" y="501" width="1.5158%" height="15" fill="rgb(242,55,13)" fg:x="53911" fg:w="1867"/><text x="44.0196%" y="511.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,825 samples, 3.92%)</title><rect x="41.4021%" y="549" width="3.9174%" height="15" fill="rgb(242,112,31)" fg:x="50995" fg:w="4825"/><text x="41.6521%" y="559.50">&lt;cor..</text></g><g><title>tremor_runtime::pipeline::handle_insights::{{closure}} (42 samples, 0.03%)</title><rect x="45.2854%" y="533" width="0.0341%" height="15" fill="rgb(249,192,27)" fg:x="55778" fg:w="42"/><text x="45.5354%" y="543.50"></text></g><g><title>[libc-2.31.so] (1,691 samples, 1.37%)</title><rect x="45.3195%" y="549" width="1.3729%" height="15" fill="rgb(208,204,44)" fg:x="55820" fg:w="1691"/><text x="45.5695%" y="559.50"></text></g><g><title>sn_rust_dealloc (140 samples, 0.11%)</title><rect x="46.7046%" y="389" width="0.1137%" height="15" fill="rgb(208,93,54)" fg:x="57526" fg:w="140"/><text x="46.9546%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (162 samples, 0.13%)</title><rect x="46.6924%" y="549" width="0.1315%" height="15" fill="rgb(242,1,31)" fg:x="57511" fg:w="162"/><text x="46.9424%" y="559.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (162 samples, 0.13%)</title><rect x="46.6924%" y="533" width="0.1315%" height="15" fill="rgb(241,83,25)" fg:x="57511" fg:w="162"/><text x="46.9424%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (147 samples, 0.12%)</title><rect x="46.7046%" y="517" width="0.1193%" height="15" fill="rgb(205,169,50)" fg:x="57526" fg:w="147"/><text x="46.9546%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (147 samples, 0.12%)</title><rect x="46.7046%" y="501" width="0.1193%" height="15" fill="rgb(239,186,37)" fg:x="57526" fg:w="147"/><text x="46.9546%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (147 samples, 0.12%)</title><rect x="46.7046%" y="485" width="0.1193%" height="15" fill="rgb(205,221,10)" fg:x="57526" fg:w="147"/><text x="46.9546%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (147 samples, 0.12%)</title><rect x="46.7046%" y="469" width="0.1193%" height="15" fill="rgb(218,196,15)" fg:x="57526" fg:w="147"/><text x="46.9546%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (147 samples, 0.12%)</title><rect x="46.7046%" y="453" width="0.1193%" height="15" fill="rgb(218,196,35)" fg:x="57526" fg:w="147"/><text x="46.9546%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (147 samples, 0.12%)</title><rect x="46.7046%" y="437" width="0.1193%" height="15" fill="rgb(233,63,24)" fg:x="57526" fg:w="147"/><text x="46.9546%" y="447.50"></text></g><g><title>__rg_dealloc (147 samples, 0.12%)</title><rect x="46.7046%" y="421" width="0.1193%" height="15" fill="rgb(225,8,4)" fg:x="57526" fg:w="147"/><text x="46.9546%" y="431.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (147 samples, 0.12%)</title><rect x="46.7046%" y="405" width="0.1193%" height="15" fill="rgb(234,105,35)" fg:x="57526" fg:w="147"/><text x="46.9546%" y="415.50"></text></g><g><title>async_io::driver::block_on (33,450 samples, 27.16%)</title><rect x="19.6809%" y="869" width="27.1576%" height="15" fill="rgb(236,21,32)" fg:x="24241" fg:w="33450"/><text x="19.9309%" y="879.50">async_io::driver::block_on</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (33,450 samples, 27.16%)</title><rect x="19.6809%" y="853" width="27.1576%" height="15" fill="rgb(228,109,6)" fg:x="24241" fg:w="33450"/><text x="19.9309%" y="863.50">&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::fu..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (33,450 samples, 27.16%)</title><rect x="19.6809%" y="837" width="27.1576%" height="15" fill="rgb(229,215,31)" fg:x="24241" fg:w="33450"/><text x="19.9309%" y="847.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; ..</text></g><g><title>async_executor::Executor::run::{{closure}} (33,450 samples, 27.16%)</title><rect x="19.6809%" y="821" width="27.1576%" height="15" fill="rgb(221,52,54)" fg:x="24241" fg:w="33450"/><text x="19.9309%" y="831.50">async_executor::Executor::run::{{closure}}</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (33,450 samples, 27.16%)</title><rect x="19.6809%" y="805" width="27.1576%" height="15" fill="rgb(252,129,43)" fg:x="24241" fg:w="33450"/><text x="19.9309%" y="815.50">&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::fu..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (33,450 samples, 27.16%)</title><rect x="19.6809%" y="789" width="27.1576%" height="15" fill="rgb(248,183,27)" fg:x="24241" fg:w="33450"/><text x="19.9309%" y="799.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; ..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (33,450 samples, 27.16%)</title><rect x="19.6809%" y="773" width="27.1576%" height="15" fill="rgb(250,0,22)" fg:x="24241" fg:w="33450"/><text x="19.9309%" y="783.50">async_executor::Executor::run::{{closure}}::..</text></g><g><title>async_task::runnable::Runnable::run (33,450 samples, 27.16%)</title><rect x="19.6809%" y="757" width="27.1576%" height="15" fill="rgb(213,166,10)" fg:x="24241" fg:w="33450"/><text x="19.9309%" y="767.50">async_task::runnable::Runnable::run</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (33,450 samples, 27.16%)</title><rect x="19.6809%" y="741" width="27.1576%" height="15" fill="rgb(207,163,36)" fg:x="24241" fg:w="33450"/><text x="19.9309%" y="751.50">async_task::raw::RawTask&lt;F,T,S&gt;::run</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (33,450 samples, 27.16%)</title><rect x="19.6809%" y="725" width="27.1576%" height="15" fill="rgb(208,122,22)" fg:x="24241" fg:w="33450"/><text x="19.9309%" y="735.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (33,450 samples, 27.16%)</title><rect x="19.6809%" y="709" width="27.1576%" height="15" fill="rgb(207,104,49)" fg:x="24241" fg:w="33450"/><text x="19.9309%" y="719.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; ..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (33,450 samples, 27.16%)</title><rect x="19.6809%" y="693" width="27.1576%" height="15" fill="rgb(248,211,50)" fg:x="24241" fg:w="33450"/><text x="19.9309%" y="703.50">async_executor::Executor::spawn::{{closure}}</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (33,450 samples, 27.16%)</title><rect x="19.6809%" y="677" width="27.1576%" height="15" fill="rgb(217,13,45)" fg:x="24241" fg:w="33450"/><text x="19.9309%" y="687.50">&lt;async_std::task::builder::SupportTaskLocals..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (33,450 samples, 27.16%)</title><rect x="19.6809%" y="661" width="27.1576%" height="15" fill="rgb(211,216,49)" fg:x="24241" fg:w="33450"/><text x="19.9309%" y="671.50">async_std::task::task_locals_wrapper::TaskLo..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (33,450 samples, 27.16%)</title><rect x="19.6809%" y="645" width="27.1576%" height="15" fill="rgb(221,58,53)" fg:x="24241" fg:w="33450"/><text x="19.9309%" y="655.50">std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (33,450 samples, 27.16%)</title><rect x="19.6809%" y="629" width="27.1576%" height="15" fill="rgb(220,112,41)" fg:x="24241" fg:w="33450"/><text x="19.9309%" y="639.50">std::thread::local::LocalKey&lt;T&gt;::try_with</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (33,450 samples, 27.16%)</title><rect x="19.6809%" y="613" width="27.1576%" height="15" fill="rgb(236,38,28)" fg:x="24241" fg:w="33450"/><text x="19.9309%" y="623.50">async_std::task::task_locals_wrapper::TaskLo..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (33,450 samples, 27.16%)</title><rect x="19.6809%" y="597" width="27.1576%" height="15" fill="rgb(227,195,22)" fg:x="24241" fg:w="33450"/><text x="19.9309%" y="607.50">&lt;async_std::task::builder::SupportTaskLocals..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (33,450 samples, 27.16%)</title><rect x="19.6809%" y="581" width="27.1576%" height="15" fill="rgb(214,55,33)" fg:x="24241" fg:w="33450"/><text x="19.9309%" y="591.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; ..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (7,351 samples, 5.97%)</title><rect x="40.8703%" y="565" width="5.9682%" height="15" fill="rgb(248,80,13)" fg:x="50340" fg:w="7351"/><text x="41.1203%" y="575.50">tremor_r..</text></g><g><title>&lt;tremor_pipeline::event::ValueIter as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.01%)</title><rect x="47.2047%" y="405" width="0.0138%" height="15" fill="rgb(238,52,6)" fg:x="58142" fg:w="17"/><text x="47.4547%" y="415.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (34 samples, 0.03%)</title><rect x="47.2185%" y="405" width="0.0276%" height="15" fill="rgb(224,198,47)" fg:x="58159" fg:w="34"/><text x="47.4685%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::deref::Deref for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::deref (16 samples, 0.01%)</title><rect x="47.2461%" y="405" width="0.0130%" height="15" fill="rgb(233,171,20)" fg:x="58193" fg:w="16"/><text x="47.4961%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::as_slice (16 samples, 0.01%)</title><rect x="47.2461%" y="389" width="0.0130%" height="15" fill="rgb(241,30,25)" fg:x="58193" fg:w="16"/><text x="47.4961%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (35 samples, 0.03%)</title><rect x="47.2607%" y="405" width="0.0284%" height="15" fill="rgb(207,171,38)" fg:x="58211" fg:w="35"/><text x="47.5107%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (35 samples, 0.03%)</title><rect x="47.2607%" y="389" width="0.0284%" height="15" fill="rgb(234,70,1)" fg:x="58211" fg:w="35"/><text x="47.5107%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any::check::{{closure}} (15 samples, 0.01%)</title><rect x="47.2769%" y="373" width="0.0122%" height="15" fill="rgb(232,178,18)" fg:x="58231" fg:w="15"/><text x="47.5269%" y="383.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}}::{{closure}} (15 samples, 0.01%)</title><rect x="47.2769%" y="357" width="0.0122%" height="15" fill="rgb(241,78,40)" fg:x="58231" fg:w="15"/><text x="47.5269%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.02%)</title><rect x="47.2907%" y="341" width="0.0203%" height="15" fill="rgb(222,35,25)" fg:x="58248" fg:w="25"/><text x="47.5407%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (53 samples, 0.04%)</title><rect x="47.2891%" y="405" width="0.0430%" height="15" fill="rgb(207,92,16)" fg:x="58246" fg:w="53"/><text x="47.5391%" y="415.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (53 samples, 0.04%)</title><rect x="47.2891%" y="389" width="0.0430%" height="15" fill="rgb(216,59,51)" fg:x="58246" fg:w="53"/><text x="47.5391%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (53 samples, 0.04%)</title><rect x="47.2891%" y="373" width="0.0430%" height="15" fill="rgb(213,80,28)" fg:x="58246" fg:w="53"/><text x="47.5391%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (53 samples, 0.04%)</title><rect x="47.2891%" y="357" width="0.0430%" height="15" fill="rgb(220,93,7)" fg:x="58246" fg:w="53"/><text x="47.5391%" y="367.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (26 samples, 0.02%)</title><rect x="47.3110%" y="341" width="0.0211%" height="15" fill="rgb(225,24,44)" fg:x="58273" fg:w="26"/><text x="47.5610%" y="351.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (26 samples, 0.02%)</title><rect x="47.3110%" y="325" width="0.0211%" height="15" fill="rgb(243,74,40)" fg:x="58273" fg:w="26"/><text x="47.5610%" y="335.50"></text></g><g><title>sn_rust_dealloc (204 samples, 0.17%)</title><rect x="47.3825%" y="245" width="0.1656%" height="15" fill="rgb(228,39,7)" fg:x="58361" fg:w="204"/><text x="47.6325%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (295 samples, 0.24%)</title><rect x="47.3516%" y="309" width="0.2395%" height="15" fill="rgb(227,79,8)" fg:x="58323" fg:w="295"/><text x="47.6016%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::vec::private::RVec&lt;u8&gt;]&gt; (295 samples, 0.24%)</title><rect x="47.3516%" y="293" width="0.2395%" height="15" fill="rgb(236,58,11)" fg:x="58323" fg:w="295"/><text x="47.6016%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (272 samples, 0.22%)</title><rect x="47.3703%" y="277" width="0.2208%" height="15" fill="rgb(249,63,35)" fg:x="58346" fg:w="272"/><text x="47.6203%" y="287.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (272 samples, 0.22%)</title><rect x="47.3703%" y="261" width="0.2208%" height="15" fill="rgb(252,114,16)" fg:x="58346" fg:w="272"/><text x="47.6203%" y="271.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (53 samples, 0.04%)</title><rect x="47.5481%" y="245" width="0.0430%" height="15" fill="rgb(254,151,24)" fg:x="58565" fg:w="53"/><text x="47.7981%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.01%)</title><rect x="47.5911%" y="277" width="0.0106%" height="15" fill="rgb(253,54,39)" fg:x="58618" fg:w="13"/><text x="47.8411%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.01%)</title><rect x="47.5911%" y="261" width="0.0106%" height="15" fill="rgb(243,25,45)" fg:x="58618" fg:w="13"/><text x="47.8411%" y="271.50"></text></g><g><title>__rg_dealloc (13 samples, 0.01%)</title><rect x="47.5911%" y="245" width="0.0106%" height="15" fill="rgb(234,134,9)" fg:x="58618" fg:w="13"/><text x="47.8411%" y="255.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (13 samples, 0.01%)</title><rect x="47.5911%" y="229" width="0.0106%" height="15" fill="rgb(227,166,31)" fg:x="58618" fg:w="13"/><text x="47.8411%" y="239.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (322 samples, 0.26%)</title><rect x="47.3451%" y="373" width="0.2614%" height="15" fill="rgb(245,143,41)" fg:x="58315" fg:w="322"/><text x="47.5951%" y="383.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (318 samples, 0.26%)</title><rect x="47.3484%" y="357" width="0.2582%" height="15" fill="rgb(238,181,32)" fg:x="58319" fg:w="318"/><text x="47.5984%" y="367.50"></text></g><g><title>core::mem::drop (314 samples, 0.25%)</title><rect x="47.3516%" y="341" width="0.2549%" height="15" fill="rgb(224,113,18)" fg:x="58323" fg:w="314"/><text x="47.6016%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (314 samples, 0.25%)</title><rect x="47.3516%" y="325" width="0.2549%" height="15" fill="rgb(240,229,28)" fg:x="58323" fg:w="314"/><text x="47.6016%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (19 samples, 0.02%)</title><rect x="47.5911%" y="309" width="0.0154%" height="15" fill="rgb(250,185,3)" fg:x="58618" fg:w="19"/><text x="47.8411%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.02%)</title><rect x="47.5911%" y="293" width="0.0154%" height="15" fill="rgb(212,59,25)" fg:x="58618" fg:w="19"/><text x="47.8411%" y="303.50"></text></g><g><title>sn_rust_dealloc (42 samples, 0.03%)</title><rect x="47.6066%" y="373" width="0.0341%" height="15" fill="rgb(221,87,20)" fg:x="58637" fg:w="42"/><text x="47.8566%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (374 samples, 0.30%)</title><rect x="47.3403%" y="405" width="0.3036%" height="15" fill="rgb(213,74,28)" fg:x="58309" fg:w="374"/><text x="47.5903%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (374 samples, 0.30%)</title><rect x="47.3403%" y="389" width="0.3036%" height="15" fill="rgb(224,132,34)" fg:x="58309" fg:w="374"/><text x="47.5903%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::private::RVec&lt;T&gt;::buffer_mut (26 samples, 0.02%)</title><rect x="47.6577%" y="277" width="0.0211%" height="15" fill="rgb(222,101,24)" fg:x="58700" fg:w="26"/><text x="47.9077%" y="287.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (28 samples, 0.02%)</title><rect x="47.6569%" y="309" width="0.0227%" height="15" fill="rgb(254,142,4)" fg:x="58699" fg:w="28"/><text x="47.9069%" y="319.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (28 samples, 0.02%)</title><rect x="47.6569%" y="293" width="0.0227%" height="15" fill="rgb(230,229,49)" fg:x="58699" fg:w="28"/><text x="47.9069%" y="303.50"></text></g><g><title>sn_rust_dealloc (164 samples, 0.13%)</title><rect x="47.6796%" y="309" width="0.1331%" height="15" fill="rgb(238,70,47)" fg:x="58727" fg:w="164"/><text x="47.9296%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (205 samples, 0.17%)</title><rect x="47.6569%" y="357" width="0.1664%" height="15" fill="rgb(231,160,17)" fg:x="58699" fg:w="205"/><text x="47.9069%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (205 samples, 0.17%)</title><rect x="47.6569%" y="341" width="0.1664%" height="15" fill="rgb(218,68,53)" fg:x="58699" fg:w="205"/><text x="47.9069%" y="351.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (205 samples, 0.17%)</title><rect x="47.6569%" y="325" width="0.1664%" height="15" fill="rgb(236,111,10)" fg:x="58699" fg:w="205"/><text x="47.9069%" y="335.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (13 samples, 0.01%)</title><rect x="47.8128%" y="309" width="0.0106%" height="15" fill="rgb(224,34,41)" fg:x="58891" fg:w="13"/><text x="48.0628%" y="319.50"></text></g><g><title>sn_rust_dealloc (261 samples, 0.21%)</title><rect x="48.5045%" y="181" width="0.2119%" height="15" fill="rgb(241,118,19)" fg:x="59743" fg:w="261"/><text x="48.7545%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,125 samples, 0.91%)</title><rect x="47.8469%" y="261" width="0.9134%" height="15" fill="rgb(238,129,25)" fg:x="58933" fg:w="1125"/><text x="48.0969%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (1,125 samples, 0.91%)</title><rect x="47.8469%" y="245" width="0.9134%" height="15" fill="rgb(238,22,31)" fg:x="58933" fg:w="1125"/><text x="48.0969%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (1,089 samples, 0.88%)</title><rect x="47.8761%" y="229" width="0.8841%" height="15" fill="rgb(222,174,48)" fg:x="58969" fg:w="1089"/><text x="48.1261%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (1,089 samples, 0.88%)</title><rect x="47.8761%" y="213" width="0.8841%" height="15" fill="rgb(206,152,40)" fg:x="58969" fg:w="1089"/><text x="48.1261%" y="223.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (1,089 samples, 0.88%)</title><rect x="47.8761%" y="197" width="0.8841%" height="15" fill="rgb(218,99,54)" fg:x="58969" fg:w="1089"/><text x="48.1261%" y="207.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (54 samples, 0.04%)</title><rect x="48.7164%" y="181" width="0.0438%" height="15" fill="rgb(220,174,26)" fg:x="60004" fg:w="54"/><text x="48.9664%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (19 samples, 0.02%)</title><rect x="48.7603%" y="229" width="0.0154%" height="15" fill="rgb(245,116,9)" fg:x="60058" fg:w="19"/><text x="49.0103%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (19 samples, 0.02%)</title><rect x="48.7603%" y="213" width="0.0154%" height="15" fill="rgb(209,72,35)" fg:x="60058" fg:w="19"/><text x="49.0103%" y="223.50"></text></g><g><title>__rg_dealloc (19 samples, 0.02%)</title><rect x="48.7603%" y="197" width="0.0154%" height="15" fill="rgb(226,126,21)" fg:x="60058" fg:w="19"/><text x="49.0103%" y="207.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (19 samples, 0.02%)</title><rect x="48.7603%" y="181" width="0.0154%" height="15" fill="rgb(227,192,1)" fg:x="60058" fg:w="19"/><text x="49.0103%" y="191.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (1,183 samples, 0.96%)</title><rect x="47.8266%" y="325" width="0.9605%" height="15" fill="rgb(237,180,29)" fg:x="58908" fg:w="1183"/><text x="48.0766%" y="335.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (1,178 samples, 0.96%)</title><rect x="47.8306%" y="309" width="0.9564%" height="15" fill="rgb(230,197,35)" fg:x="58913" fg:w="1178"/><text x="48.0806%" y="319.50"></text></g><g><title>core::mem::drop (1,158 samples, 0.94%)</title><rect x="47.8469%" y="293" width="0.9402%" height="15" fill="rgb(246,193,31)" fg:x="58933" fg:w="1158"/><text x="48.0969%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (1,158 samples, 0.94%)</title><rect x="47.8469%" y="277" width="0.9402%" height="15" fill="rgb(241,36,4)" fg:x="58933" fg:w="1158"/><text x="48.0969%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::string::RString&gt;&gt; (33 samples, 0.03%)</title><rect x="48.7603%" y="261" width="0.0268%" height="15" fill="rgb(241,130,17)" fg:x="60058" fg:w="33"/><text x="49.0103%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.03%)</title><rect x="48.7603%" y="245" width="0.0268%" height="15" fill="rgb(206,137,32)" fg:x="60058" fg:w="33"/><text x="49.0103%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (14 samples, 0.01%)</title><rect x="48.7757%" y="229" width="0.0114%" height="15" fill="rgb(237,228,51)" fg:x="60077" fg:w="14"/><text x="49.0257%" y="239.50"></text></g><g><title>sn_rust_dealloc (90 samples, 0.07%)</title><rect x="48.7870%" y="325" width="0.0731%" height="15" fill="rgb(243,6,42)" fg:x="60091" fg:w="90"/><text x="49.0370%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (1,514 samples, 1.23%)</title><rect x="47.6439%" y="389" width="1.2292%" height="15" fill="rgb(251,74,28)" fg:x="58683" fg:w="1514"/><text x="47.8939%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (1,498 samples, 1.22%)</title><rect x="47.6569%" y="373" width="1.2162%" height="15" fill="rgb(218,20,49)" fg:x="58699" fg:w="1498"/><text x="47.9069%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (1,293 samples, 1.05%)</title><rect x="47.8233%" y="357" width="1.0498%" height="15" fill="rgb(238,28,14)" fg:x="58904" fg:w="1293"/><text x="48.0733%" y="367.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (1,293 samples, 1.05%)</title><rect x="47.8233%" y="341" width="1.0498%" height="15" fill="rgb(229,40,46)" fg:x="58904" fg:w="1293"/><text x="48.0733%" y="351.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (16 samples, 0.01%)</title><rect x="48.8601%" y="325" width="0.0130%" height="15" fill="rgb(244,195,20)" fg:x="60181" fg:w="16"/><text x="49.1101%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (34 samples, 0.03%)</title><rect x="48.8731%" y="389" width="0.0276%" height="15" fill="rgb(253,56,35)" fg:x="60197" fg:w="34"/><text x="49.1231%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (33 samples, 0.03%)</title><rect x="48.8739%" y="373" width="0.0268%" height="15" fill="rgb(210,149,44)" fg:x="60198" fg:w="33"/><text x="49.1239%" y="383.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (33 samples, 0.03%)</title><rect x="48.8739%" y="357" width="0.0268%" height="15" fill="rgb(240,135,12)" fg:x="60198" fg:w="33"/><text x="49.1239%" y="367.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (21 samples, 0.02%)</title><rect x="48.8837%" y="341" width="0.0170%" height="15" fill="rgb(251,24,50)" fg:x="60210" fg:w="21"/><text x="49.1337%" y="351.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (21 samples, 0.02%)</title><rect x="48.8837%" y="325" width="0.0170%" height="15" fill="rgb(243,200,47)" fg:x="60210" fg:w="21"/><text x="49.1337%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (14 samples, 0.01%)</title><rect x="48.9007%" y="389" width="0.0114%" height="15" fill="rgb(224,166,26)" fg:x="60231" fg:w="14"/><text x="49.1507%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="48.9007%" y="373" width="0.0114%" height="15" fill="rgb(233,0,47)" fg:x="60231" fg:w="14"/><text x="49.1507%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="48.9007%" y="357" width="0.0114%" height="15" fill="rgb(253,80,5)" fg:x="60231" fg:w="14"/><text x="49.1507%" y="367.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (14 samples, 0.01%)</title><rect x="48.9007%" y="341" width="0.0114%" height="15" fill="rgb(214,133,25)" fg:x="60231" fg:w="14"/><text x="49.1507%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (80 samples, 0.06%)</title><rect x="48.9218%" y="357" width="0.0650%" height="15" fill="rgb(209,27,14)" fg:x="60257" fg:w="80"/><text x="49.1718%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (80 samples, 0.06%)</title><rect x="48.9218%" y="341" width="0.0650%" height="15" fill="rgb(219,102,51)" fg:x="60257" fg:w="80"/><text x="49.1718%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (80 samples, 0.06%)</title><rect x="48.9218%" y="325" width="0.0650%" height="15" fill="rgb(237,18,16)" fg:x="60257" fg:w="80"/><text x="49.1718%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (80 samples, 0.06%)</title><rect x="48.9218%" y="309" width="0.0650%" height="15" fill="rgb(241,85,17)" fg:x="60257" fg:w="80"/><text x="49.1718%" y="319.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::is_empty_singleton (75 samples, 0.06%)</title><rect x="48.9259%" y="293" width="0.0609%" height="15" fill="rgb(236,90,42)" fg:x="60262" fg:w="75"/><text x="49.1759%" y="303.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (116 samples, 0.09%)</title><rect x="48.9121%" y="373" width="0.0942%" height="15" fill="rgb(249,57,21)" fg:x="60245" fg:w="116"/><text x="49.1621%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (24 samples, 0.02%)</title><rect x="48.9868%" y="357" width="0.0195%" height="15" fill="rgb(243,12,36)" fg:x="60337" fg:w="24"/><text x="49.2368%" y="367.50"></text></g><g><title>alloc::alloc::box_free (24 samples, 0.02%)</title><rect x="48.9868%" y="341" width="0.0195%" height="15" fill="rgb(253,128,47)" fg:x="60337" fg:w="24"/><text x="49.2368%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (24 samples, 0.02%)</title><rect x="48.9868%" y="325" width="0.0195%" height="15" fill="rgb(207,33,20)" fg:x="60337" fg:w="24"/><text x="49.2368%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (24 samples, 0.02%)</title><rect x="48.9868%" y="309" width="0.0195%" height="15" fill="rgb(233,215,35)" fg:x="60337" fg:w="24"/><text x="49.2368%" y="319.50"></text></g><g><title>__rg_dealloc (24 samples, 0.02%)</title><rect x="48.9868%" y="293" width="0.0195%" height="15" fill="rgb(249,188,52)" fg:x="60337" fg:w="24"/><text x="49.2368%" y="303.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (24 samples, 0.02%)</title><rect x="48.9868%" y="277" width="0.0195%" height="15" fill="rgb(225,12,32)" fg:x="60337" fg:w="24"/><text x="49.2368%" y="287.50"></text></g><g><title>abi_stable::std_types::arc::private::RArc&lt;T&gt;::data (627 samples, 0.51%)</title><rect x="49.0769%" y="213" width="0.5091%" height="15" fill="rgb(247,98,14)" fg:x="60448" fg:w="627"/><text x="49.3269%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (21 samples, 0.02%)</title><rect x="49.6095%" y="85" width="0.0170%" height="15" fill="rgb(247,219,48)" fg:x="61104" fg:w="21"/><text x="49.8595%" y="95.50"></text></g><g><title>alloc::alloc::dealloc (21 samples, 0.02%)</title><rect x="49.6095%" y="69" width="0.0170%" height="15" fill="rgb(253,60,48)" fg:x="61104" fg:w="21"/><text x="49.8595%" y="79.50"></text></g><g><title>__rg_dealloc (21 samples, 0.02%)</title><rect x="49.6095%" y="53" width="0.0170%" height="15" fill="rgb(245,15,52)" fg:x="61104" fg:w="21"/><text x="49.8595%" y="63.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (21 samples, 0.02%)</title><rect x="49.6095%" y="37" width="0.0170%" height="15" fill="rgb(220,133,28)" fg:x="61104" fg:w="21"/><text x="49.8595%" y="47.50"></text></g><g><title>core::mem::drop (1,219 samples, 0.99%)</title><rect x="49.6095%" y="133" width="0.9897%" height="15" fill="rgb(217,180,4)" fg:x="61104" fg:w="1219"/><text x="49.8595%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (1,219 samples, 0.99%)</title><rect x="49.6095%" y="117" width="0.9897%" height="15" fill="rgb(251,24,1)" fg:x="61104" fg:w="1219"/><text x="49.8595%" y="127.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1,219 samples, 0.99%)</title><rect x="49.6095%" y="101" width="0.9897%" height="15" fill="rgb(212,185,49)" fg:x="61104" fg:w="1219"/><text x="49.8595%" y="111.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1,191 samples, 0.97%)</title><rect x="49.6322%" y="85" width="0.9670%" height="15" fill="rgb(215,175,22)" fg:x="61132" fg:w="1191"/><text x="49.8822%" y="95.50"></text></g><g><title>core::sync::atomic::atomic_sub (1,191 samples, 0.97%)</title><rect x="49.6322%" y="69" width="0.9670%" height="15" fill="rgb(250,205,14)" fg:x="61132" fg:w="1191"/><text x="49.8822%" y="79.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (13 samples, 0.01%)</title><rect x="50.6203%" y="85" width="0.0106%" height="15" fill="rgb(225,211,22)" fg:x="62349" fg:w="13"/><text x="50.8703%" y="95.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (13 samples, 0.01%)</title><rect x="50.6203%" y="69" width="0.0106%" height="15" fill="rgb(251,179,42)" fg:x="62349" fg:w="13"/><text x="50.8703%" y="79.50"></text></g><g><title>sn_rust_dealloc (166 samples, 0.13%)</title><rect x="50.6308%" y="85" width="0.1348%" height="15" fill="rgb(208,216,51)" fg:x="62362" fg:w="166"/><text x="50.8808%" y="95.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1,890 samples, 1.53%)</title><rect x="49.6046%" y="149" width="1.5345%" height="15" fill="rgb(235,36,11)" fg:x="61098" fg:w="1890"/><text x="49.8546%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (665 samples, 0.54%)</title><rect x="50.5992%" y="133" width="0.5399%" height="15" fill="rgb(213,189,28)" fg:x="62323" fg:w="665"/><text x="50.8492%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (665 samples, 0.54%)</title><rect x="50.5992%" y="117" width="0.5399%" height="15" fill="rgb(227,203,42)" fg:x="62323" fg:w="665"/><text x="50.8492%" y="127.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (665 samples, 0.54%)</title><rect x="50.5992%" y="101" width="0.5399%" height="15" fill="rgb(244,72,36)" fg:x="62323" fg:w="665"/><text x="50.8492%" y="111.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (460 samples, 0.37%)</title><rect x="50.7656%" y="85" width="0.3735%" height="15" fill="rgb(213,53,17)" fg:x="62528" fg:w="460"/><text x="51.0156%" y="95.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1,387 samples, 1.13%)</title><rect x="51.1391%" y="149" width="1.1261%" height="15" fill="rgb(207,167,3)" fg:x="62988" fg:w="1387"/><text x="51.3891%" y="159.50"></text></g><g><title>core::sync::atomic::atomic_sub (1,387 samples, 1.13%)</title><rect x="51.1391%" y="133" width="1.1261%" height="15" fill="rgb(216,98,30)" fg:x="62988" fg:w="1387"/><text x="51.3891%" y="143.50"></text></g><g><title>sn_rust_dealloc (95 samples, 0.08%)</title><rect x="52.2652%" y="149" width="0.0771%" height="15" fill="rgb(236,123,15)" fg:x="64375" fg:w="95"/><text x="52.5152%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,113 samples, 3.34%)</title><rect x="49.0233%" y="277" width="3.3393%" height="15" fill="rgb(248,81,50)" fg:x="60382" fg:w="4113"/><text x="49.2733%" y="287.50">&lt;al..</text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (4,113 samples, 3.34%)</title><rect x="49.0233%" y="261" width="3.3393%" height="15" fill="rgb(214,120,4)" fg:x="60382" fg:w="4113"/><text x="49.2733%" y="271.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (4,080 samples, 3.31%)</title><rect x="49.0501%" y="245" width="3.3125%" height="15" fill="rgb(208,179,34)" fg:x="60415" fg:w="4080"/><text x="49.3001%" y="255.50">cor..</text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (4,080 samples, 3.31%)</title><rect x="49.0501%" y="229" width="3.3125%" height="15" fill="rgb(227,140,7)" fg:x="60415" fg:w="4080"/><text x="49.3001%" y="239.50">abi..</text></g><g><title>abi_stable::std_types::arc::vtable_mod::destructor_arc (3,420 samples, 2.78%)</title><rect x="49.5859%" y="213" width="2.7767%" height="15" fill="rgb(214,22,6)" fg:x="61075" fg:w="3420"/><text x="49.8359%" y="223.50">ab..</text></g><g><title>core::mem::drop (3,398 samples, 2.76%)</title><rect x="49.6038%" y="197" width="2.7588%" height="15" fill="rgb(207,137,27)" fg:x="61097" fg:w="3398"/><text x="49.8538%" y="207.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (3,398 samples, 2.76%)</title><rect x="49.6038%" y="181" width="2.7588%" height="15" fill="rgb(210,8,46)" fg:x="61097" fg:w="3398"/><text x="49.8538%" y="191.50">co..</text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3,398 samples, 2.76%)</title><rect x="49.6038%" y="165" width="2.7588%" height="15" fill="rgb(240,16,54)" fg:x="61097" fg:w="3398"/><text x="49.8538%" y="175.50">&lt;a..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (25 samples, 0.02%)</title><rect x="52.3423%" y="149" width="0.0203%" height="15" fill="rgb(211,209,29)" fg:x="64470" fg:w="25"/><text x="52.5923%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (18 samples, 0.01%)</title><rect x="52.3626%" y="245" width="0.0146%" height="15" fill="rgb(226,228,24)" fg:x="64495" fg:w="18"/><text x="52.6126%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (18 samples, 0.01%)</title><rect x="52.3626%" y="229" width="0.0146%" height="15" fill="rgb(222,84,9)" fg:x="64495" fg:w="18"/><text x="52.6126%" y="239.50"></text></g><g><title>__rg_dealloc (18 samples, 0.01%)</title><rect x="52.3626%" y="213" width="0.0146%" height="15" fill="rgb(234,203,30)" fg:x="64495" fg:w="18"/><text x="52.6126%" y="223.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (18 samples, 0.01%)</title><rect x="52.3626%" y="197" width="0.0146%" height="15" fill="rgb(238,109,14)" fg:x="64495" fg:w="18"/><text x="52.6126%" y="207.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (4,160 samples, 3.38%)</title><rect x="49.0063%" y="341" width="3.3774%" height="15" fill="rgb(233,206,34)" fg:x="60361" fg:w="4160"/><text x="49.2563%" y="351.50">abi..</text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (4,152 samples, 3.37%)</title><rect x="49.0127%" y="325" width="3.3710%" height="15" fill="rgb(220,167,47)" fg:x="60369" fg:w="4152"/><text x="49.2627%" y="335.50">abi..</text></g><g><title>core::mem::drop (4,139 samples, 3.36%)</title><rect x="49.0233%" y="309" width="3.3604%" height="15" fill="rgb(238,105,10)" fg:x="60382" fg:w="4139"/><text x="49.2733%" y="319.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (4,139 samples, 3.36%)</title><rect x="49.0233%" y="293" width="3.3604%" height="15" fill="rgb(213,227,17)" fg:x="60382" fg:w="4139"/><text x="49.2733%" y="303.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (26 samples, 0.02%)</title><rect x="52.3626%" y="277" width="0.0211%" height="15" fill="rgb(217,132,38)" fg:x="64495" fg:w="26"/><text x="52.6126%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (26 samples, 0.02%)</title><rect x="52.3626%" y="261" width="0.0211%" height="15" fill="rgb(242,146,4)" fg:x="64495" fg:w="26"/><text x="52.6126%" y="271.50"></text></g><g><title>sn_rust_dealloc (77 samples, 0.06%)</title><rect x="52.3837%" y="341" width="0.0625%" height="15" fill="rgb(212,61,9)" fg:x="64521" fg:w="77"/><text x="52.6337%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (4,241 samples, 3.44%)</title><rect x="49.0063%" y="373" width="3.4432%" height="15" fill="rgb(247,126,22)" fg:x="60361" fg:w="4241"/><text x="49.2563%" y="383.50">cor..</text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (4,241 samples, 3.44%)</title><rect x="49.0063%" y="357" width="3.4432%" height="15" fill="rgb(220,196,2)" fg:x="60361" fg:w="4241"/><text x="49.2563%" y="367.50">abi..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (52 samples, 0.04%)</title><rect x="52.4495%" y="373" width="0.0422%" height="15" fill="rgb(208,46,4)" fg:x="64602" fg:w="52"/><text x="52.6995%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (52 samples, 0.04%)</title><rect x="52.4495%" y="357" width="0.0422%" height="15" fill="rgb(252,104,46)" fg:x="64602" fg:w="52"/><text x="52.6995%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (22 samples, 0.02%)</title><rect x="52.4738%" y="341" width="0.0179%" height="15" fill="rgb(237,152,48)" fg:x="64632" fg:w="22"/><text x="52.7238%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (22 samples, 0.02%)</title><rect x="52.4738%" y="325" width="0.0179%" height="15" fill="rgb(221,59,37)" fg:x="64632" fg:w="22"/><text x="52.7238%" y="335.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (22 samples, 0.02%)</title><rect x="52.4738%" y="309" width="0.0179%" height="15" fill="rgb(209,202,51)" fg:x="64632" fg:w="22"/><text x="52.7238%" y="319.50"></text></g><g><title>sn_rust_dealloc (80 samples, 0.06%)</title><rect x="52.4917%" y="373" width="0.0650%" height="15" fill="rgb(228,81,30)" fg:x="64654" fg:w="80"/><text x="52.7417%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (6,134 samples, 4.98%)</title><rect x="47.6439%" y="405" width="4.9801%" height="15" fill="rgb(227,42,39)" fg:x="58683" fg:w="6134"/><text x="47.8939%" y="415.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (4,572 samples, 3.71%)</title><rect x="48.9121%" y="389" width="3.7119%" height="15" fill="rgb(221,26,2)" fg:x="60245" fg:w="4572"/><text x="49.1621%" y="399.50">core..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (83 samples, 0.07%)</title><rect x="52.5566%" y="373" width="0.0674%" height="15" fill="rgb(254,61,31)" fg:x="64734" fg:w="83"/><text x="52.8066%" y="383.50"></text></g><g><title>&lt;u64 as num_traits::ops::saturating::Saturating&gt;::saturating_add (14 samples, 0.01%)</title><rect x="52.7052%" y="357" width="0.0114%" height="15" fill="rgb(222,173,38)" fg:x="64917" fg:w="14"/><text x="52.9552%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::saturating_add (14 samples, 0.01%)</title><rect x="52.7052%" y="341" width="0.0114%" height="15" fill="rgb(218,50,12)" fg:x="64917" fg:w="14"/><text x="52.9552%" y="351.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::bucket_for (13 samples, 0.01%)</title><rect x="52.7580%" y="325" width="0.0106%" height="15" fill="rgb(223,88,40)" fg:x="64982" fg:w="13"/><text x="53.0080%" y="335.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::mut_at (59 samples, 0.05%)</title><rect x="52.7247%" y="357" width="0.0479%" height="15" fill="rgb(237,54,19)" fg:x="64941" fg:w="59"/><text x="52.9747%" y="367.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::index_for (48 samples, 0.04%)</title><rect x="52.7336%" y="341" width="0.0390%" height="15" fill="rgb(251,129,25)" fg:x="64952" fg:w="48"/><text x="52.9836%" y="351.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (181 samples, 0.15%)</title><rect x="52.6370%" y="405" width="0.1470%" height="15" fill="rgb(238,97,19)" fg:x="64833" fg:w="181"/><text x="52.8870%" y="415.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n (174 samples, 0.14%)</title><rect x="52.6427%" y="389" width="0.1413%" height="15" fill="rgb(240,169,18)" fg:x="64840" fg:w="174"/><text x="52.8927%" y="399.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n_inner (174 samples, 0.14%)</title><rect x="52.6427%" y="373" width="0.1413%" height="15" fill="rgb(230,187,49)" fg:x="64840" fg:w="174"/><text x="52.8927%" y="383.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::update_min_max (14 samples, 0.01%)</title><rect x="52.7726%" y="357" width="0.0114%" height="15" fill="rgb(209,44,26)" fg:x="65000" fg:w="14"/><text x="53.0226%" y="367.50"></text></g><g><title>sn_rust_dealloc (97 samples, 0.08%)</title><rect x="52.7840%" y="405" width="0.0788%" height="15" fill="rgb(244,0,6)" fg:x="65014" fg:w="97"/><text x="53.0340%" y="415.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (119 samples, 0.10%)</title><rect x="52.8627%" y="405" width="0.0966%" height="15" fill="rgb(248,18,21)" fg:x="65111" fg:w="119"/><text x="53.1127%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (47 samples, 0.04%)</title><rect x="52.9845%" y="389" width="0.0382%" height="15" fill="rgb(245,180,19)" fg:x="65261" fg:w="47"/><text x="53.2345%" y="399.50"></text></g><g><title>core::time::Duration::as_nanos (43 samples, 0.03%)</title><rect x="53.0227%" y="389" width="0.0349%" height="15" fill="rgb(252,118,36)" fg:x="65308" fg:w="43"/><text x="53.2727%" y="399.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (162 samples, 0.13%)</title><rect x="53.0576%" y="373" width="0.1315%" height="15" fill="rgb(210,224,19)" fg:x="65351" fg:w="162"/><text x="53.3076%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (72 samples, 0.06%)</title><rect x="53.2459%" y="341" width="0.0585%" height="15" fill="rgb(218,30,24)" fg:x="65583" fg:w="72"/><text x="53.4959%" y="351.50"></text></g><g><title>core::cmp::PartialOrd::ge (72 samples, 0.06%)</title><rect x="53.2459%" y="325" width="0.0585%" height="15" fill="rgb(219,75,50)" fg:x="65583" fg:w="72"/><text x="53.4959%" y="335.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (72 samples, 0.06%)</title><rect x="53.2459%" y="309" width="0.0585%" height="15" fill="rgb(234,72,50)" fg:x="65583" fg:w="72"/><text x="53.4959%" y="319.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (72 samples, 0.06%)</title><rect x="53.2459%" y="293" width="0.0585%" height="15" fill="rgb(219,100,48)" fg:x="65583" fg:w="72"/><text x="53.4959%" y="303.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (72 samples, 0.06%)</title><rect x="53.2459%" y="277" width="0.0585%" height="15" fill="rgb(253,5,41)" fg:x="65583" fg:w="72"/><text x="53.4959%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (41 samples, 0.03%)</title><rect x="53.2711%" y="261" width="0.0333%" height="15" fill="rgb(247,181,11)" fg:x="65614" fg:w="41"/><text x="53.5211%" y="271.50"></text></g><g><title>std::time::SystemTime::duration_since (346 samples, 0.28%)</title><rect x="53.0576%" y="389" width="0.2809%" height="15" fill="rgb(222,223,25)" fg:x="65351" fg:w="346"/><text x="53.3076%" y="399.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (184 samples, 0.15%)</title><rect x="53.1891%" y="373" width="0.1494%" height="15" fill="rgb(214,198,28)" fg:x="65513" fg:w="184"/><text x="53.4391%" y="383.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (184 samples, 0.15%)</title><rect x="53.1891%" y="357" width="0.1494%" height="15" fill="rgb(230,46,43)" fg:x="65513" fg:w="184"/><text x="53.4391%" y="367.50"></text></g><g><title>core::time::Duration::new (42 samples, 0.03%)</title><rect x="53.3044%" y="341" width="0.0341%" height="15" fill="rgb(233,65,53)" fg:x="65655" fg:w="42"/><text x="53.5544%" y="351.50"></text></g><g><title>tremor_common::time::nanotime (1,207 samples, 0.98%)</title><rect x="52.9593%" y="405" width="0.9799%" height="15" fill="rgb(221,121,27)" fg:x="65230" fg:w="1207"/><text x="53.2093%" y="415.50"></text></g><g><title>std::time::SystemTime::now (740 samples, 0.60%)</title><rect x="53.3385%" y="389" width="0.6008%" height="15" fill="rgb(247,70,47)" fg:x="65697" fg:w="740"/><text x="53.5885%" y="399.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (740 samples, 0.60%)</title><rect x="53.3385%" y="373" width="0.6008%" height="15" fill="rgb(228,85,35)" fg:x="65697" fg:w="740"/><text x="53.5885%" y="383.50"></text></g><g><title>std::sys::unix::time::inner::now (740 samples, 0.60%)</title><rect x="53.3385%" y="357" width="0.6008%" height="15" fill="rgb(209,50,18)" fg:x="65697" fg:w="740"/><text x="53.5885%" y="367.50"></text></g><g><title>__clock_gettime (604 samples, 0.49%)</title><rect x="53.4489%" y="341" width="0.4904%" height="15" fill="rgb(250,19,35)" fg:x="65833" fg:w="604"/><text x="53.6989%" y="351.50"></text></g><g><title>__vdso_clock_gettime (581 samples, 0.47%)</title><rect x="53.4676%" y="325" width="0.4717%" height="15" fill="rgb(253,107,29)" fg:x="65856" fg:w="581"/><text x="53.7176%" y="335.50"></text></g><g><title>[[vdso]] (512 samples, 0.42%)</title><rect x="53.5236%" y="309" width="0.4157%" height="15" fill="rgb(252,179,29)" fg:x="65925" fg:w="512"/><text x="53.7736%" y="319.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (215 samples, 0.17%)</title><rect x="53.9547%" y="389" width="0.1746%" height="15" fill="rgb(238,194,6)" fg:x="66456" fg:w="215"/><text x="54.2047%" y="399.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (8,975 samples, 7.29%)</title><rect x="46.8458%" y="661" width="7.2867%" height="15" fill="rgb(238,164,29)" fg:x="57700" fg:w="8975"/><text x="47.0958%" y="671.50">tremor_run..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,975 samples, 7.29%)</title><rect x="46.8458%" y="645" width="7.2867%" height="15" fill="rgb(224,25,9)" fg:x="57700" fg:w="8975"/><text x="47.0958%" y="655.50">&lt;async_ffi..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,975 samples, 7.29%)</title><rect x="46.8458%" y="629" width="7.2867%" height="15" fill="rgb(244,153,23)" fg:x="57700" fg:w="8975"/><text x="47.0958%" y="639.50">&lt;async_ffi..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (8,975 samples, 7.29%)</title><rect x="46.8458%" y="613" width="7.2867%" height="15" fill="rgb(212,203,14)" fg:x="57700" fg:w="8975"/><text x="47.0958%" y="623.50">&lt;core::tas..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (8,975 samples, 7.29%)</title><rect x="46.8458%" y="597" width="7.2867%" height="15" fill="rgb(220,164,20)" fg:x="57700" fg:w="8975"/><text x="47.0958%" y="607.50">&lt;async_ffi..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (8,975 samples, 7.29%)</title><rect x="46.8458%" y="581" width="7.2867%" height="15" fill="rgb(222,203,48)" fg:x="57700" fg:w="8975"/><text x="47.0958%" y="591.50">async_ffi:..</text></g><g><title>std::panic::catch_unwind (8,975 samples, 7.29%)</title><rect x="46.8458%" y="565" width="7.2867%" height="15" fill="rgb(215,159,22)" fg:x="57700" fg:w="8975"/><text x="47.0958%" y="575.50">std::panic..</text></g><g><title>std::panicking::try (8,975 samples, 7.29%)</title><rect x="46.8458%" y="549" width="7.2867%" height="15" fill="rgb(216,183,47)" fg:x="57700" fg:w="8975"/><text x="47.0958%" y="559.50">std::panic..</text></g><g><title>std::panicking::try::do_call (8,975 samples, 7.29%)</title><rect x="46.8458%" y="533" width="7.2867%" height="15" fill="rgb(229,195,25)" fg:x="57700" fg:w="8975"/><text x="47.0958%" y="543.50">std::panic..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (8,975 samples, 7.29%)</title><rect x="46.8458%" y="517" width="7.2867%" height="15" fill="rgb(224,132,51)" fg:x="57700" fg:w="8975"/><text x="47.0958%" y="527.50">&lt;core::pan..</text></g><g><title>core::ops::function::FnOnce::call_once (8,975 samples, 7.29%)</title><rect x="46.8458%" y="501" width="7.2867%" height="15" fill="rgb(240,63,7)" fg:x="57700" fg:w="8975"/><text x="47.0958%" y="511.50">core::ops:..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (8,975 samples, 7.29%)</title><rect x="46.8458%" y="485" width="7.2867%" height="15" fill="rgb(249,182,41)" fg:x="57700" fg:w="8975"/><text x="47.0958%" y="495.50">async_ffi:..</text></g><g><title>async_ffi::FfiContext::with_context (8,975 samples, 7.29%)</title><rect x="46.8458%" y="469" width="7.2867%" height="15" fill="rgb(243,47,26)" fg:x="57700" fg:w="8975"/><text x="47.0958%" y="479.50">async_ffi:..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (8,975 samples, 7.29%)</title><rect x="46.8458%" y="453" width="7.2867%" height="15" fill="rgb(233,48,2)" fg:x="57700" fg:w="8975"/><text x="47.0958%" y="463.50">async_ffi:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,975 samples, 7.29%)</title><rect x="46.8458%" y="437" width="7.2867%" height="15" fill="rgb(244,165,34)" fg:x="57700" fg:w="8975"/><text x="47.0958%" y="447.50">&lt;core::fut..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (8,936 samples, 7.26%)</title><rect x="46.8775%" y="421" width="7.2550%" height="15" fill="rgb(207,89,7)" fg:x="57739" fg:w="8936"/><text x="47.1275%" y="431.50">&lt;tremor_ru..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (238 samples, 0.19%)</title><rect x="53.9393%" y="405" width="0.1932%" height="15" fill="rgb(244,117,36)" fg:x="66437" fg:w="238"/><text x="54.1893%" y="415.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (8,976 samples, 7.29%)</title><rect x="46.8458%" y="693" width="7.2875%" height="15" fill="rgb(226,144,34)" fg:x="57700" fg:w="8976"/><text x="47.0958%" y="703.50">tremor_run..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,976 samples, 7.29%)</title><rect x="46.8458%" y="677" width="7.2875%" height="15" fill="rgb(213,23,19)" fg:x="57700" fg:w="8976"/><text x="47.0958%" y="687.50">&lt;core::fut..</text></g><g><title>[libc-2.31.so] (191 samples, 0.16%)</title><rect x="54.1447%" y="565" width="0.1551%" height="15" fill="rgb(217,75,12)" fg:x="66690" fg:w="191"/><text x="54.3947%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (312 samples, 0.25%)</title><rect x="54.4719%" y="485" width="0.2533%" height="15" fill="rgb(224,159,17)" fg:x="67093" fg:w="312"/><text x="54.7219%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (312 samples, 0.25%)</title><rect x="54.4719%" y="469" width="0.2533%" height="15" fill="rgb(217,118,1)" fg:x="67093" fg:w="312"/><text x="54.7219%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (457 samples, 0.37%)</title><rect x="54.7252%" y="485" width="0.3710%" height="15" fill="rgb(232,180,48)" fg:x="67405" fg:w="457"/><text x="54.9752%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_load (454 samples, 0.37%)</title><rect x="54.7276%" y="469" width="0.3686%" height="15" fill="rgb(230,27,33)" fg:x="67408" fg:w="454"/><text x="54.9776%" y="479.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (894 samples, 0.73%)</title><rect x="54.3728%" y="517" width="0.7258%" height="15" fill="rgb(205,31,21)" fg:x="66971" fg:w="894"/><text x="54.6228%" y="527.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (857 samples, 0.70%)</title><rect x="54.4029%" y="501" width="0.6958%" height="15" fill="rgb(253,59,4)" fg:x="67008" fg:w="857"/><text x="54.6529%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (124 samples, 0.10%)</title><rect x="55.1116%" y="501" width="0.1007%" height="15" fill="rgb(224,201,9)" fg:x="67881" fg:w="124"/><text x="55.3616%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (118 samples, 0.10%)</title><rect x="55.1165%" y="485" width="0.0958%" height="15" fill="rgb(229,206,30)" fg:x="67887" fg:w="118"/><text x="55.3665%" y="495.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (118 samples, 0.10%)</title><rect x="55.1165%" y="469" width="0.0958%" height="15" fill="rgb(212,67,47)" fg:x="67887" fg:w="118"/><text x="55.3665%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (114 samples, 0.09%)</title><rect x="55.1198%" y="453" width="0.0926%" height="15" fill="rgb(211,96,50)" fg:x="67891" fg:w="114"/><text x="55.3698%" y="463.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (113 samples, 0.09%)</title><rect x="55.1206%" y="437" width="0.0917%" height="15" fill="rgb(252,114,18)" fg:x="67892" fg:w="113"/><text x="55.3706%" y="447.50"></text></g><g><title>__GI___pthread_mutex_unlock (113 samples, 0.09%)</title><rect x="55.1206%" y="421" width="0.0917%" height="15" fill="rgb(223,58,37)" fg:x="67892" fg:w="113"/><text x="55.3706%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (33 samples, 0.03%)</title><rect x="55.2123%" y="501" width="0.0268%" height="15" fill="rgb(237,70,4)" fg:x="68005" fg:w="33"/><text x="55.4623%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_load (33 samples, 0.03%)</title><rect x="55.2123%" y="485" width="0.0268%" height="15" fill="rgb(244,85,46)" fg:x="68005" fg:w="33"/><text x="55.4623%" y="495.50"></text></g><g><title>event_listener::Inner::lock (138 samples, 0.11%)</title><rect x="55.2391%" y="501" width="0.1120%" height="15" fill="rgb(223,39,52)" fg:x="68038" fg:w="138"/><text x="55.4891%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (138 samples, 0.11%)</title><rect x="55.2391%" y="485" width="0.1120%" height="15" fill="rgb(218,200,14)" fg:x="68038" fg:w="138"/><text x="55.4891%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (128 samples, 0.10%)</title><rect x="55.2472%" y="469" width="0.1039%" height="15" fill="rgb(208,171,16)" fg:x="68048" fg:w="128"/><text x="55.4972%" y="479.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (124 samples, 0.10%)</title><rect x="55.2505%" y="453" width="0.1007%" height="15" fill="rgb(234,200,18)" fg:x="68052" fg:w="124"/><text x="55.5005%" y="463.50"></text></g><g><title>__GI___pthread_mutex_lock (124 samples, 0.10%)</title><rect x="55.2505%" y="437" width="0.1007%" height="15" fill="rgb(228,45,11)" fg:x="68052" fg:w="124"/><text x="55.5005%" y="447.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_waker (38 samples, 0.03%)</title><rect x="55.3601%" y="453" width="0.0309%" height="15" fill="rgb(237,182,11)" fg:x="68187" fg:w="38"/><text x="55.6101%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (37 samples, 0.03%)</title><rect x="55.3609%" y="437" width="0.0300%" height="15" fill="rgb(241,175,49)" fg:x="68188" fg:w="37"/><text x="55.6109%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_sub (37 samples, 0.03%)</title><rect x="55.3609%" y="421" width="0.0300%" height="15" fill="rgb(247,38,35)" fg:x="68188" fg:w="37"/><text x="55.6109%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (97 samples, 0.08%)</title><rect x="55.4023%" y="405" width="0.0788%" height="15" fill="rgb(228,39,49)" fg:x="68239" fg:w="97"/><text x="55.6523%" y="415.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (97 samples, 0.08%)</title><rect x="55.4023%" y="389" width="0.0788%" height="15" fill="rgb(226,101,26)" fg:x="68239" fg:w="97"/><text x="55.6523%" y="399.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (95 samples, 0.08%)</title><rect x="55.4039%" y="373" width="0.0771%" height="15" fill="rgb(206,141,19)" fg:x="68241" fg:w="95"/><text x="55.6539%" y="383.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (95 samples, 0.08%)</title><rect x="55.4039%" y="357" width="0.0771%" height="15" fill="rgb(211,200,13)" fg:x="68241" fg:w="95"/><text x="55.6539%" y="367.50"></text></g><g><title>__GI___pthread_mutex_unlock (95 samples, 0.08%)</title><rect x="55.4039%" y="341" width="0.0771%" height="15" fill="rgb(241,121,6)" fg:x="68241" fg:w="95"/><text x="55.6539%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (40 samples, 0.03%)</title><rect x="55.4810%" y="405" width="0.0325%" height="15" fill="rgb(234,221,29)" fg:x="68336" fg:w="40"/><text x="55.7310%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (40 samples, 0.03%)</title><rect x="55.4810%" y="389" width="0.0325%" height="15" fill="rgb(229,136,5)" fg:x="68336" fg:w="40"/><text x="55.7310%" y="399.50"></text></g><g><title>async_io::reactor::Reactor::notify (17 samples, 0.01%)</title><rect x="55.5176%" y="357" width="0.0138%" height="15" fill="rgb(238,36,11)" fg:x="68381" fg:w="17"/><text x="55.7676%" y="367.50"></text></g><g><title>polling::Poller::notify (15 samples, 0.01%)</title><rect x="55.5192%" y="341" width="0.0122%" height="15" fill="rgb(251,55,41)" fg:x="68383" fg:w="15"/><text x="55.7692%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (33 samples, 0.03%)</title><rect x="55.5549%" y="325" width="0.0268%" height="15" fill="rgb(242,34,40)" fg:x="68427" fg:w="33"/><text x="55.8049%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_swap (33 samples, 0.03%)</title><rect x="55.5549%" y="309" width="0.0268%" height="15" fill="rgb(215,42,17)" fg:x="68427" fg:w="33"/><text x="55.8049%" y="319.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (64 samples, 0.05%)</title><rect x="55.5817%" y="325" width="0.0520%" height="15" fill="rgb(207,44,46)" fg:x="68460" fg:w="64"/><text x="55.8317%" y="335.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (64 samples, 0.05%)</title><rect x="55.5817%" y="309" width="0.0520%" height="15" fill="rgb(211,206,28)" fg:x="68460" fg:w="64"/><text x="55.8317%" y="319.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (64 samples, 0.05%)</title><rect x="55.5817%" y="293" width="0.0520%" height="15" fill="rgb(237,167,16)" fg:x="68460" fg:w="64"/><text x="55.8317%" y="303.50"></text></g><g><title>__pthread_cond_signal (64 samples, 0.05%)</title><rect x="55.5817%" y="277" width="0.0520%" height="15" fill="rgb(233,66,6)" fg:x="68460" fg:w="64"/><text x="55.8317%" y="287.50"></text></g><g><title>parking::Unparker::unpark (160 samples, 0.13%)</title><rect x="55.5387%" y="357" width="0.1299%" height="15" fill="rgb(246,123,29)" fg:x="68407" fg:w="160"/><text x="55.7887%" y="367.50"></text></g><g><title>parking::Inner::unpark (154 samples, 0.13%)</title><rect x="55.5436%" y="341" width="0.1250%" height="15" fill="rgb(209,62,40)" fg:x="68413" fg:w="154"/><text x="55.7936%" y="351.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (43 samples, 0.03%)</title><rect x="55.6337%" y="325" width="0.0349%" height="15" fill="rgb(218,4,25)" fg:x="68524" fg:w="43"/><text x="55.8837%" y="335.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (43 samples, 0.03%)</title><rect x="55.6337%" y="309" width="0.0349%" height="15" fill="rgb(253,91,49)" fg:x="68524" fg:w="43"/><text x="55.8837%" y="319.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (42 samples, 0.03%)</title><rect x="55.6345%" y="293" width="0.0341%" height="15" fill="rgb(228,155,29)" fg:x="68525" fg:w="42"/><text x="55.8845%" y="303.50"></text></g><g><title>__GI___pthread_mutex_lock (42 samples, 0.03%)</title><rect x="55.6345%" y="277" width="0.0341%" height="15" fill="rgb(243,57,37)" fg:x="68525" fg:w="42"/><text x="55.8845%" y="287.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (199 samples, 0.16%)</title><rect x="55.5151%" y="373" width="0.1616%" height="15" fill="rgb(244,167,17)" fg:x="68378" fg:w="199"/><text x="55.7651%" y="383.50"></text></g><g><title>core::task::wake::Waker::wake (253 samples, 0.21%)</title><rect x="55.5135%" y="405" width="0.2054%" height="15" fill="rgb(207,181,38)" fg:x="68376" fg:w="253"/><text x="55.7635%" y="415.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (252 samples, 0.20%)</title><rect x="55.5143%" y="389" width="0.2046%" height="15" fill="rgb(211,8,23)" fg:x="68377" fg:w="252"/><text x="55.7643%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (52 samples, 0.04%)</title><rect x="55.6767%" y="373" width="0.0422%" height="15" fill="rgb(235,11,44)" fg:x="68577" fg:w="52"/><text x="55.9267%" y="383.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (52 samples, 0.04%)</title><rect x="55.6767%" y="357" width="0.0422%" height="15" fill="rgb(248,18,52)" fg:x="68577" fg:w="52"/><text x="55.9267%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (51 samples, 0.04%)</title><rect x="55.6775%" y="341" width="0.0414%" height="15" fill="rgb(208,4,7)" fg:x="68578" fg:w="51"/><text x="55.9275%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_sub (51 samples, 0.04%)</title><rect x="55.6775%" y="325" width="0.0414%" height="15" fill="rgb(240,17,39)" fg:x="68578" fg:w="51"/><text x="55.9275%" y="335.50"></text></g><g><title>async_executor::State::notify (497 samples, 0.40%)</title><rect x="55.3942%" y="421" width="0.4035%" height="15" fill="rgb(207,170,3)" fg:x="68229" fg:w="497"/><text x="55.6442%" y="431.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (97 samples, 0.08%)</title><rect x="55.7189%" y="405" width="0.0788%" height="15" fill="rgb(236,100,52)" fg:x="68629" fg:w="97"/><text x="55.9689%" y="415.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (95 samples, 0.08%)</title><rect x="55.7205%" y="389" width="0.0771%" height="15" fill="rgb(246,78,51)" fg:x="68631" fg:w="95"/><text x="55.9705%" y="399.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (90 samples, 0.07%)</title><rect x="55.7246%" y="373" width="0.0731%" height="15" fill="rgb(211,17,15)" fg:x="68636" fg:w="90"/><text x="55.9746%" y="383.50"></text></g><g><title>__GI___pthread_mutex_lock (90 samples, 0.07%)</title><rect x="55.7246%" y="357" width="0.0731%" height="15" fill="rgb(209,59,46)" fg:x="68636" fg:w="90"/><text x="55.9746%" y="367.50"></text></g><g><title>__lll_lock_wait (14 samples, 0.01%)</title><rect x="55.7863%" y="341" width="0.0114%" height="15" fill="rgb(210,92,25)" fg:x="68712" fg:w="14"/><text x="56.0363%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (69 samples, 0.06%)</title><rect x="55.8131%" y="389" width="0.0560%" height="15" fill="rgb(238,174,52)" fg:x="68745" fg:w="69"/><text x="56.0631%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (69 samples, 0.06%)</title><rect x="55.8131%" y="373" width="0.0560%" height="15" fill="rgb(230,73,7)" fg:x="68745" fg:w="69"/><text x="56.0631%" y="383.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (633 samples, 0.51%)</title><rect x="55.3942%" y="437" width="0.5139%" height="15" fill="rgb(243,124,40)" fg:x="68229" fg:w="633"/><text x="55.6442%" y="447.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (136 samples, 0.11%)</title><rect x="55.7977%" y="421" width="0.1104%" height="15" fill="rgb(244,170,11)" fg:x="68726" fg:w="136"/><text x="56.0477%" y="431.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (132 samples, 0.11%)</title><rect x="55.8009%" y="405" width="0.1072%" height="15" fill="rgb(207,114,54)" fg:x="68730" fg:w="132"/><text x="56.0509%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (48 samples, 0.04%)</title><rect x="55.8691%" y="389" width="0.0390%" height="15" fill="rgb(205,42,20)" fg:x="68814" fg:w="48"/><text x="56.1191%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_or (48 samples, 0.04%)</title><rect x="55.8691%" y="373" width="0.0390%" height="15" fill="rgb(230,30,28)" fg:x="68814" fg:w="48"/><text x="56.1191%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (108 samples, 0.09%)</title><rect x="55.9081%" y="437" width="0.0877%" height="15" fill="rgb(205,73,54)" fg:x="68862" fg:w="108"/><text x="56.1581%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (108 samples, 0.09%)</title><rect x="55.9081%" y="421" width="0.0877%" height="15" fill="rgb(254,227,23)" fg:x="68862" fg:w="108"/><text x="56.1581%" y="431.50"></text></g><g><title>event_listener::List::notify (811 samples, 0.66%)</title><rect x="55.3511%" y="501" width="0.6584%" height="15" fill="rgb(228,202,34)" fg:x="68176" fg:w="811"/><text x="55.6011%" y="511.50"></text></g><g><title>core::task::wake::Waker::wake (802 samples, 0.65%)</title><rect x="55.3584%" y="485" width="0.6511%" height="15" fill="rgb(222,225,37)" fg:x="68185" fg:w="802"/><text x="55.6084%" y="495.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (802 samples, 0.65%)</title><rect x="55.3584%" y="469" width="0.6511%" height="15" fill="rgb(221,14,54)" fg:x="68185" fg:w="802"/><text x="55.6084%" y="479.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (762 samples, 0.62%)</title><rect x="55.3909%" y="453" width="0.6187%" height="15" fill="rgb(254,102,2)" fg:x="68225" fg:w="762"/><text x="55.6409%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (17 samples, 0.01%)</title><rect x="55.9958%" y="437" width="0.0138%" height="15" fill="rgb(232,104,17)" fg:x="68970" fg:w="17"/><text x="56.2458%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (17 samples, 0.01%)</title><rect x="55.9958%" y="421" width="0.0138%" height="15" fill="rgb(250,220,14)" fg:x="68970" fg:w="17"/><text x="56.2458%" y="431.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (2,678 samples, 2.17%)</title><rect x="54.3582%" y="533" width="2.1742%" height="15" fill="rgb(241,158,9)" fg:x="66953" fg:w="2678"/><text x="54.6082%" y="543.50">a..</text></g><g><title>event_listener::Event::notify (1,766 samples, 1.43%)</title><rect x="55.0986%" y="517" width="1.4338%" height="15" fill="rgb(246,9,43)" fg:x="67865" fg:w="1766"/><text x="55.3486%" y="527.50"></text></g><g><title>event_listener::full_fence (644 samples, 0.52%)</title><rect x="56.0096%" y="501" width="0.5229%" height="15" fill="rgb(206,73,33)" fg:x="68987" fg:w="644"/><text x="56.2596%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (636 samples, 0.52%)</title><rect x="56.0161%" y="485" width="0.5164%" height="15" fill="rgb(222,79,8)" fg:x="68995" fg:w="636"/><text x="56.2661%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (636 samples, 0.52%)</title><rect x="56.0161%" y="469" width="0.5164%" height="15" fill="rgb(234,8,54)" fg:x="68995" fg:w="636"/><text x="56.2661%" y="479.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::capacity (26 samples, 0.02%)</title><rect x="56.5324%" y="533" width="0.0211%" height="15" fill="rgb(209,134,38)" fg:x="69631" fg:w="26"/><text x="56.7824%" y="543.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (2,881 samples, 2.34%)</title><rect x="54.3233%" y="549" width="2.3390%" height="15" fill="rgb(230,127,29)" fg:x="66910" fg:w="2881"/><text x="54.5733%" y="559.50">&lt;..</text></g><g><title>event_listener::Event::notify (130 samples, 0.11%)</title><rect x="56.5568%" y="533" width="0.1055%" height="15" fill="rgb(242,44,41)" fg:x="69661" fg:w="130"/><text x="56.8068%" y="543.50"></text></g><g><title>event_listener::full_fence (124 samples, 0.10%)</title><rect x="56.5617%" y="517" width="0.1007%" height="15" fill="rgb(222,56,43)" fg:x="69667" fg:w="124"/><text x="56.8117%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (115 samples, 0.09%)</title><rect x="56.5690%" y="501" width="0.0934%" height="15" fill="rgb(238,39,47)" fg:x="69676" fg:w="115"/><text x="56.8190%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (115 samples, 0.09%)</title><rect x="56.5690%" y="485" width="0.0934%" height="15" fill="rgb(226,79,43)" fg:x="69676" fg:w="115"/><text x="56.8190%" y="495.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,123 samples, 2.54%)</title><rect x="54.1333%" y="613" width="2.5355%" height="15" fill="rgb(242,105,53)" fg:x="66676" fg:w="3123"/><text x="54.3833%" y="623.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (3,123 samples, 2.54%)</title><rect x="54.1333%" y="597" width="2.5355%" height="15" fill="rgb(251,132,46)" fg:x="66676" fg:w="3123"/><text x="54.3833%" y="607.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,123 samples, 2.54%)</title><rect x="54.1333%" y="581" width="2.5355%" height="15" fill="rgb(231,77,14)" fg:x="66676" fg:w="3123"/><text x="54.3833%" y="591.50">&lt;c..</text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (2,918 samples, 2.37%)</title><rect x="54.2997%" y="565" width="2.3691%" height="15" fill="rgb(240,135,9)" fg:x="66881" fg:w="2918"/><text x="54.5497%" y="575.50">tr..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (48 samples, 0.04%)</title><rect x="57.2453%" y="597" width="0.0390%" height="15" fill="rgb(248,109,14)" fg:x="70509" fg:w="48"/><text x="57.4953%" y="607.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::as_slice (13 samples, 0.01%)</title><rect x="57.7251%" y="533" width="0.0106%" height="15" fill="rgb(227,146,52)" fg:x="71100" fg:w="13"/><text x="57.9751%" y="543.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (40 samples, 0.03%)</title><rect x="57.8217%" y="325" width="0.0325%" height="15" fill="rgb(232,54,3)" fg:x="71219" fg:w="40"/><text x="58.0717%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (147 samples, 0.12%)</title><rect x="57.7356%" y="469" width="0.1193%" height="15" fill="rgb(229,201,43)" fg:x="71113" fg:w="147"/><text x="57.9856%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (147 samples, 0.12%)</title><rect x="57.7356%" y="453" width="0.1193%" height="15" fill="rgb(252,161,33)" fg:x="71113" fg:w="147"/><text x="57.9856%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (147 samples, 0.12%)</title><rect x="57.7356%" y="437" width="0.1193%" height="15" fill="rgb(226,146,40)" fg:x="71113" fg:w="147"/><text x="57.9856%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (147 samples, 0.12%)</title><rect x="57.7356%" y="421" width="0.1193%" height="15" fill="rgb(219,47,25)" fg:x="71113" fg:w="147"/><text x="57.9856%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (147 samples, 0.12%)</title><rect x="57.7356%" y="405" width="0.1193%" height="15" fill="rgb(250,135,13)" fg:x="71113" fg:w="147"/><text x="57.9856%" y="415.50"></text></g><g><title>alloc::alloc::alloc (136 samples, 0.11%)</title><rect x="57.7446%" y="389" width="0.1104%" height="15" fill="rgb(219,229,18)" fg:x="71124" fg:w="136"/><text x="57.9946%" y="399.50"></text></g><g><title>__rg_alloc (136 samples, 0.11%)</title><rect x="57.7446%" y="373" width="0.1104%" height="15" fill="rgb(217,152,27)" fg:x="71124" fg:w="136"/><text x="57.9946%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (136 samples, 0.11%)</title><rect x="57.7446%" y="357" width="0.1104%" height="15" fill="rgb(225,71,47)" fg:x="71124" fg:w="136"/><text x="57.9946%" y="367.50"></text></g><g><title>sn_rust_alloc (114 samples, 0.09%)</title><rect x="57.7624%" y="341" width="0.0926%" height="15" fill="rgb(220,139,14)" fg:x="71146" fg:w="114"/><text x="58.0124%" y="351.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (242 samples, 0.20%)</title><rect x="57.7113%" y="581" width="0.1965%" height="15" fill="rgb(247,54,32)" fg:x="71083" fg:w="242"/><text x="57.9613%" y="591.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (230 samples, 0.19%)</title><rect x="57.7210%" y="565" width="0.1867%" height="15" fill="rgb(252,131,39)" fg:x="71095" fg:w="230"/><text x="57.9710%" y="575.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (225 samples, 0.18%)</title><rect x="57.7251%" y="549" width="0.1827%" height="15" fill="rgb(210,108,39)" fg:x="71100" fg:w="225"/><text x="57.9751%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (212 samples, 0.17%)</title><rect x="57.7356%" y="533" width="0.1721%" height="15" fill="rgb(205,23,29)" fg:x="71113" fg:w="212"/><text x="57.9856%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (212 samples, 0.17%)</title><rect x="57.7356%" y="517" width="0.1721%" height="15" fill="rgb(246,139,46)" fg:x="71113" fg:w="212"/><text x="57.9856%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (212 samples, 0.17%)</title><rect x="57.7356%" y="501" width="0.1721%" height="15" fill="rgb(250,81,26)" fg:x="71113" fg:w="212"/><text x="57.9856%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (212 samples, 0.17%)</title><rect x="57.7356%" y="485" width="0.1721%" height="15" fill="rgb(214,104,7)" fg:x="71113" fg:w="212"/><text x="57.9856%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (65 samples, 0.05%)</title><rect x="57.8550%" y="469" width="0.0528%" height="15" fill="rgb(233,189,8)" fg:x="71260" fg:w="65"/><text x="58.1050%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (65 samples, 0.05%)</title><rect x="57.8550%" y="453" width="0.0528%" height="15" fill="rgb(228,141,17)" fg:x="71260" fg:w="65"/><text x="58.1050%" y="463.50"></text></g><g><title>[libc-2.31.so] (44 samples, 0.04%)</title><rect x="57.8720%" y="437" width="0.0357%" height="15" fill="rgb(247,157,1)" fg:x="71281" fg:w="44"/><text x="58.1220%" y="447.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (28 samples, 0.02%)</title><rect x="57.9159%" y="565" width="0.0227%" height="15" fill="rgb(249,225,5)" fg:x="71335" fg:w="28"/><text x="58.1659%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt; as core::convert::From&lt;alloc::vec::Vec&lt;T&gt;&gt;&gt;::from (19 samples, 0.02%)</title><rect x="57.9232%" y="549" width="0.0154%" height="15" fill="rgb(242,55,13)" fg:x="71344" fg:w="19"/><text x="58.1732%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (44 samples, 0.04%)</title><rect x="57.9500%" y="373" width="0.0357%" height="15" fill="rgb(230,49,50)" fg:x="71377" fg:w="44"/><text x="58.2000%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (44 samples, 0.04%)</title><rect x="57.9500%" y="357" width="0.0357%" height="15" fill="rgb(241,111,38)" fg:x="71377" fg:w="44"/><text x="58.2000%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (44 samples, 0.04%)</title><rect x="57.9500%" y="341" width="0.0357%" height="15" fill="rgb(252,155,4)" fg:x="71377" fg:w="44"/><text x="58.2000%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (38 samples, 0.03%)</title><rect x="57.9549%" y="325" width="0.0309%" height="15" fill="rgb(212,69,32)" fg:x="71383" fg:w="38"/><text x="58.2049%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (38 samples, 0.03%)</title><rect x="57.9549%" y="309" width="0.0309%" height="15" fill="rgb(243,107,47)" fg:x="71383" fg:w="38"/><text x="58.2049%" y="319.50"></text></g><g><title>alloc::alloc::alloc (38 samples, 0.03%)</title><rect x="57.9549%" y="293" width="0.0309%" height="15" fill="rgb(247,130,12)" fg:x="71383" fg:w="38"/><text x="58.2049%" y="303.50"></text></g><g><title>__rg_alloc (38 samples, 0.03%)</title><rect x="57.9549%" y="277" width="0.0309%" height="15" fill="rgb(233,74,16)" fg:x="71383" fg:w="38"/><text x="58.2049%" y="287.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (38 samples, 0.03%)</title><rect x="57.9549%" y="261" width="0.0309%" height="15" fill="rgb(208,58,18)" fg:x="71383" fg:w="38"/><text x="58.2049%" y="271.50"></text></g><g><title>sn_rust_alloc (33 samples, 0.03%)</title><rect x="57.9589%" y="245" width="0.0268%" height="15" fill="rgb(242,225,1)" fg:x="71388" fg:w="33"/><text x="58.2089%" y="255.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (70 samples, 0.06%)</title><rect x="57.9484%" y="485" width="0.0568%" height="15" fill="rgb(249,39,40)" fg:x="71375" fg:w="70"/><text x="58.1984%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (70 samples, 0.06%)</title><rect x="57.9484%" y="469" width="0.0568%" height="15" fill="rgb(207,72,44)" fg:x="71375" fg:w="70"/><text x="58.1984%" y="479.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (70 samples, 0.06%)</title><rect x="57.9484%" y="453" width="0.0568%" height="15" fill="rgb(215,193,12)" fg:x="71375" fg:w="70"/><text x="58.1984%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (68 samples, 0.06%)</title><rect x="57.9500%" y="437" width="0.0552%" height="15" fill="rgb(248,41,39)" fg:x="71377" fg:w="68"/><text x="58.2000%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (68 samples, 0.06%)</title><rect x="57.9500%" y="421" width="0.0552%" height="15" fill="rgb(253,85,4)" fg:x="71377" fg:w="68"/><text x="58.2000%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (68 samples, 0.06%)</title><rect x="57.9500%" y="405" width="0.0552%" height="15" fill="rgb(243,70,31)" fg:x="71377" fg:w="68"/><text x="58.2000%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (68 samples, 0.06%)</title><rect x="57.9500%" y="389" width="0.0552%" height="15" fill="rgb(253,195,26)" fg:x="71377" fg:w="68"/><text x="58.2000%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (24 samples, 0.02%)</title><rect x="57.9857%" y="373" width="0.0195%" height="15" fill="rgb(243,42,11)" fg:x="71421" fg:w="24"/><text x="58.2357%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (24 samples, 0.02%)</title><rect x="57.9857%" y="357" width="0.0195%" height="15" fill="rgb(239,66,17)" fg:x="71421" fg:w="24"/><text x="58.2357%" y="367.50"></text></g><g><title>[libc-2.31.so] (20 samples, 0.02%)</title><rect x="57.9890%" y="341" width="0.0162%" height="15" fill="rgb(217,132,21)" fg:x="71425" fg:w="20"/><text x="58.2390%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="58.0052%" y="485" width="0.0130%" height="15" fill="rgb(252,202,21)" fg:x="71445" fg:w="16"/><text x="58.2552%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (31 samples, 0.03%)</title><rect x="58.0255%" y="437" width="0.0252%" height="15" fill="rgb(233,98,36)" fg:x="71470" fg:w="31"/><text x="58.2755%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (31 samples, 0.03%)</title><rect x="58.0255%" y="421" width="0.0252%" height="15" fill="rgb(216,153,54)" fg:x="71470" fg:w="31"/><text x="58.2755%" y="431.50"></text></g><g><title>alloc::alloc::alloc (27 samples, 0.02%)</title><rect x="58.0287%" y="405" width="0.0219%" height="15" fill="rgb(250,99,7)" fg:x="71474" fg:w="27"/><text x="58.2787%" y="415.50"></text></g><g><title>__rg_alloc (27 samples, 0.02%)</title><rect x="58.0287%" y="389" width="0.0219%" height="15" fill="rgb(207,56,50)" fg:x="71474" fg:w="27"/><text x="58.2787%" y="399.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (27 samples, 0.02%)</title><rect x="58.0287%" y="373" width="0.0219%" height="15" fill="rgb(244,61,34)" fg:x="71474" fg:w="27"/><text x="58.2787%" y="383.50"></text></g><g><title>sn_rust_alloc (26 samples, 0.02%)</title><rect x="58.0296%" y="357" width="0.0211%" height="15" fill="rgb(241,50,38)" fg:x="71475" fg:w="26"/><text x="58.2796%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (46 samples, 0.04%)</title><rect x="58.0182%" y="485" width="0.0373%" height="15" fill="rgb(212,166,30)" fg:x="71461" fg:w="46"/><text x="58.2682%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (37 samples, 0.03%)</title><rect x="58.0255%" y="469" width="0.0300%" height="15" fill="rgb(249,127,32)" fg:x="71470" fg:w="37"/><text x="58.2755%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (37 samples, 0.03%)</title><rect x="58.0255%" y="453" width="0.0300%" height="15" fill="rgb(209,103,0)" fg:x="71470" fg:w="37"/><text x="58.2755%" y="463.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (943 samples, 0.77%)</title><rect x="57.2915%" y="597" width="0.7656%" height="15" fill="rgb(238,209,51)" fg:x="70566" fg:w="943"/><text x="57.5415%" y="607.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (184 samples, 0.15%)</title><rect x="57.9078%" y="581" width="0.1494%" height="15" fill="rgb(237,56,23)" fg:x="71325" fg:w="184"/><text x="58.1578%" y="591.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (146 samples, 0.12%)</title><rect x="57.9386%" y="565" width="0.1185%" height="15" fill="rgb(215,153,46)" fg:x="71363" fg:w="146"/><text x="58.1886%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (146 samples, 0.12%)</title><rect x="57.9386%" y="549" width="0.1185%" height="15" fill="rgb(224,49,31)" fg:x="71363" fg:w="146"/><text x="58.1886%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (146 samples, 0.12%)</title><rect x="57.9386%" y="533" width="0.1185%" height="15" fill="rgb(250,18,42)" fg:x="71363" fg:w="146"/><text x="58.1886%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (146 samples, 0.12%)</title><rect x="57.9386%" y="517" width="0.1185%" height="15" fill="rgb(215,176,39)" fg:x="71363" fg:w="146"/><text x="58.1886%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (146 samples, 0.12%)</title><rect x="57.9386%" y="501" width="0.1185%" height="15" fill="rgb(223,77,29)" fg:x="71363" fg:w="146"/><text x="58.1886%" y="511.50"></text></g><g><title>[libc-2.31.so] (104 samples, 0.08%)</title><rect x="58.0572%" y="597" width="0.0844%" height="15" fill="rgb(234,94,52)" fg:x="71509" fg:w="104"/><text x="58.3072%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (268 samples, 0.22%)</title><rect x="58.1473%" y="597" width="0.2176%" height="15" fill="rgb(220,154,50)" fg:x="71620" fg:w="268"/><text x="58.3973%" y="607.50"></text></g><g><title>core::ptr::write (251 samples, 0.20%)</title><rect x="58.1611%" y="581" width="0.2038%" height="15" fill="rgb(212,11,10)" fg:x="71637" fg:w="251"/><text x="58.4111%" y="591.50"></text></g><g><title>[libc-2.31.so] (248 samples, 0.20%)</title><rect x="58.1635%" y="565" width="0.2013%" height="15" fill="rgb(205,166,19)" fg:x="71640" fg:w="248"/><text x="58.4135%" y="575.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (898 samples, 0.73%)</title><rect x="58.4184%" y="437" width="0.7291%" height="15" fill="rgb(244,198,16)" fg:x="71954" fg:w="898"/><text x="58.6684%" y="447.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (21 samples, 0.02%)</title><rect x="59.1475%" y="437" width="0.0170%" height="15" fill="rgb(219,69,12)" fg:x="72852" fg:w="21"/><text x="59.3975%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (976 samples, 0.79%)</title><rect x="58.3730%" y="533" width="0.7924%" height="15" fill="rgb(245,30,7)" fg:x="71898" fg:w="976"/><text x="58.6230%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (976 samples, 0.79%)</title><rect x="58.3730%" y="517" width="0.7924%" height="15" fill="rgb(218,221,48)" fg:x="71898" fg:w="976"/><text x="58.6230%" y="527.50"></text></g><g><title>alloc::alloc::alloc (969 samples, 0.79%)</title><rect x="58.3787%" y="501" width="0.7867%" height="15" fill="rgb(216,66,15)" fg:x="71905" fg:w="969"/><text x="58.6287%" y="511.50"></text></g><g><title>__rg_alloc (969 samples, 0.79%)</title><rect x="58.3787%" y="485" width="0.7867%" height="15" fill="rgb(226,122,50)" fg:x="71905" fg:w="969"/><text x="58.6287%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (969 samples, 0.79%)</title><rect x="58.3787%" y="469" width="0.7867%" height="15" fill="rgb(239,156,16)" fg:x="71905" fg:w="969"/><text x="58.6287%" y="479.50"></text></g><g><title>sn_rust_alloc (969 samples, 0.79%)</title><rect x="58.3787%" y="453" width="0.7867%" height="15" fill="rgb(224,27,38)" fg:x="71905" fg:w="969"/><text x="58.6287%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (989 samples, 0.80%)</title><rect x="58.3649%" y="597" width="0.8030%" height="15" fill="rgb(224,39,27)" fg:x="71888" fg:w="989"/><text x="58.6149%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (989 samples, 0.80%)</title><rect x="58.3649%" y="581" width="0.8030%" height="15" fill="rgb(215,92,29)" fg:x="71888" fg:w="989"/><text x="58.6149%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (980 samples, 0.80%)</title><rect x="58.3722%" y="565" width="0.7956%" height="15" fill="rgb(207,159,16)" fg:x="71897" fg:w="980"/><text x="58.6222%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (980 samples, 0.80%)</title><rect x="58.3722%" y="549" width="0.7956%" height="15" fill="rgb(238,163,47)" fg:x="71897" fg:w="980"/><text x="58.6222%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (45 samples, 0.04%)</title><rect x="59.1832%" y="501" width="0.0365%" height="15" fill="rgb(219,91,49)" fg:x="72896" fg:w="45"/><text x="59.4332%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (45 samples, 0.04%)</title><rect x="59.1832%" y="485" width="0.0365%" height="15" fill="rgb(227,167,31)" fg:x="72896" fg:w="45"/><text x="59.4332%" y="495.50"></text></g><g><title>__rg_dealloc (45 samples, 0.04%)</title><rect x="59.1832%" y="469" width="0.0365%" height="15" fill="rgb(234,80,54)" fg:x="72896" fg:w="45"/><text x="59.4332%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (45 samples, 0.04%)</title><rect x="59.1832%" y="453" width="0.0365%" height="15" fill="rgb(212,114,2)" fg:x="72896" fg:w="45"/><text x="59.4332%" y="463.50"></text></g><g><title>sn_rust_dealloc (45 samples, 0.04%)</title><rect x="59.1832%" y="437" width="0.0365%" height="15" fill="rgb(234,50,24)" fg:x="72896" fg:w="45"/><text x="59.4332%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (59 samples, 0.05%)</title><rect x="59.1776%" y="565" width="0.0479%" height="15" fill="rgb(221,68,8)" fg:x="72889" fg:w="59"/><text x="59.4276%" y="575.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (59 samples, 0.05%)</title><rect x="59.1776%" y="549" width="0.0479%" height="15" fill="rgb(254,180,31)" fg:x="72889" fg:w="59"/><text x="59.4276%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (52 samples, 0.04%)</title><rect x="59.1832%" y="533" width="0.0422%" height="15" fill="rgb(247,130,50)" fg:x="72896" fg:w="52"/><text x="59.4332%" y="543.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (52 samples, 0.04%)</title><rect x="59.1832%" y="517" width="0.0422%" height="15" fill="rgb(211,109,4)" fg:x="72896" fg:w="52"/><text x="59.4332%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (74 samples, 0.06%)</title><rect x="59.1678%" y="597" width="0.0601%" height="15" fill="rgb(238,50,21)" fg:x="72877" fg:w="74"/><text x="59.4178%" y="607.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (74 samples, 0.06%)</title><rect x="59.1678%" y="581" width="0.0601%" height="15" fill="rgb(225,57,45)" fg:x="72877" fg:w="74"/><text x="59.4178%" y="591.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (16 samples, 0.01%)</title><rect x="59.2279%" y="597" width="0.0130%" height="15" fill="rgb(209,196,50)" fg:x="72951" fg:w="16"/><text x="59.4779%" y="607.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (6,300 samples, 5.11%)</title><rect x="54.1333%" y="693" width="5.1149%" height="15" fill="rgb(242,140,13)" fg:x="66676" fg:w="6300"/><text x="54.3833%" y="703.50">tremor..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,300 samples, 5.11%)</title><rect x="54.1333%" y="677" width="5.1149%" height="15" fill="rgb(217,111,7)" fg:x="66676" fg:w="6300"/><text x="54.3833%" y="687.50">&lt;core:..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (6,300 samples, 5.11%)</title><rect x="54.1333%" y="661" width="5.1149%" height="15" fill="rgb(253,193,51)" fg:x="66676" fg:w="6300"/><text x="54.3833%" y="671.50">tremor..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,300 samples, 5.11%)</title><rect x="54.1333%" y="645" width="5.1149%" height="15" fill="rgb(252,70,29)" fg:x="66676" fg:w="6300"/><text x="54.3833%" y="655.50">&lt;core:..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (6,300 samples, 5.11%)</title><rect x="54.1333%" y="629" width="5.1149%" height="15" fill="rgb(232,127,12)" fg:x="66676" fg:w="6300"/><text x="54.3833%" y="639.50">tremor..</text></g><g><title>tremor_runtime::connectors::source::build_events (3,177 samples, 2.58%)</title><rect x="56.6688%" y="613" width="2.5794%" height="15" fill="rgb(211,180,21)" fg:x="69799" fg:w="3177"/><text x="56.9188%" y="623.50">tr..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (15,282 samples, 12.41%)</title><rect x="46.8426%" y="869" width="12.4072%" height="15" fill="rgb(229,72,13)" fg:x="57696" fg:w="15282"/><text x="47.0926%" y="879.50">async_task::raw::Ra..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (15,278 samples, 12.40%)</title><rect x="46.8458%" y="853" width="12.4040%" height="15" fill="rgb(240,211,49)" fg:x="57700" fg:w="15278"/><text x="47.0958%" y="863.50">&lt;core::pin::Pin&lt;P&gt; ..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (15,278 samples, 12.40%)</title><rect x="46.8458%" y="837" width="12.4040%" height="15" fill="rgb(219,149,40)" fg:x="57700" fg:w="15278"/><text x="47.0958%" y="847.50">&lt;core::future::from..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (15,278 samples, 12.40%)</title><rect x="46.8458%" y="821" width="12.4040%" height="15" fill="rgb(210,127,46)" fg:x="57700" fg:w="15278"/><text x="47.0958%" y="831.50">async_executor::Exe..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (15,278 samples, 12.40%)</title><rect x="46.8458%" y="805" width="12.4040%" height="15" fill="rgb(220,106,7)" fg:x="57700" fg:w="15278"/><text x="47.0958%" y="815.50">&lt;async_std::task::b..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (15,278 samples, 12.40%)</title><rect x="46.8458%" y="789" width="12.4040%" height="15" fill="rgb(249,31,22)" fg:x="57700" fg:w="15278"/><text x="47.0958%" y="799.50">async_std::task::ta..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (15,278 samples, 12.40%)</title><rect x="46.8458%" y="773" width="12.4040%" height="15" fill="rgb(253,1,49)" fg:x="57700" fg:w="15278"/><text x="47.0958%" y="783.50">std::thread::local:..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (15,278 samples, 12.40%)</title><rect x="46.8458%" y="757" width="12.4040%" height="15" fill="rgb(227,144,33)" fg:x="57700" fg:w="15278"/><text x="47.0958%" y="767.50">std::thread::local:..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (15,278 samples, 12.40%)</title><rect x="46.8458%" y="741" width="12.4040%" height="15" fill="rgb(249,163,44)" fg:x="57700" fg:w="15278"/><text x="47.0958%" y="751.50">async_std::task::ta..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (15,278 samples, 12.40%)</title><rect x="46.8458%" y="725" width="12.4040%" height="15" fill="rgb(234,15,39)" fg:x="57700" fg:w="15278"/><text x="47.0958%" y="735.50">&lt;async_std::task::b..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (15,278 samples, 12.40%)</title><rect x="46.8458%" y="709" width="12.4040%" height="15" fill="rgb(207,66,16)" fg:x="57700" fg:w="15278"/><text x="47.0958%" y="719.50">&lt;core::future::from..</text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (58 samples, 0.05%)</title><rect x="59.2596%" y="869" width="0.0471%" height="15" fill="rgb(233,112,24)" fg:x="72990" fg:w="58"/><text x="59.5096%" y="879.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (14 samples, 0.01%)</title><rect x="59.3066%" y="869" width="0.0114%" height="15" fill="rgb(230,90,22)" fg:x="73048" fg:w="14"/><text x="59.5566%" y="879.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (24 samples, 0.02%)</title><rect x="59.3180%" y="869" width="0.0195%" height="15" fill="rgb(229,61,13)" fg:x="73062" fg:w="24"/><text x="59.5680%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::route_events::{{closure}}&gt;&gt; (16 samples, 0.01%)</title><rect x="59.3521%" y="869" width="0.0130%" height="15" fill="rgb(225,57,24)" fg:x="73104" fg:w="16"/><text x="59.6021%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::OutputTarget::send_event::{{closure}}&gt;&gt; (16 samples, 0.01%)</title><rect x="59.3651%" y="869" width="0.0130%" height="15" fill="rgb(208,169,48)" fg:x="73120" fg:w="16"/><text x="59.6151%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;tremor_runtime::connectors::sink::SinkMsgWrapper&gt;&gt; (15 samples, 0.01%)</title><rect x="59.3781%" y="869" width="0.0122%" height="15" fill="rgb(244,218,51)" fg:x="73136" fg:w="15"/><text x="59.6281%" y="879.50"></text></g><g><title>event_listener::Event::notify (84 samples, 0.07%)</title><rect x="59.4065%" y="869" width="0.0682%" height="15" fill="rgb(214,148,10)" fg:x="73171" fg:w="84"/><text x="59.6565%" y="879.50"></text></g><g><title>event_listener::full_fence (36 samples, 0.03%)</title><rect x="59.4455%" y="853" width="0.0292%" height="15" fill="rgb(225,174,27)" fg:x="73219" fg:w="36"/><text x="59.6955%" y="863.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (25 samples, 0.02%)</title><rect x="59.4747%" y="869" width="0.0203%" height="15" fill="rgb(230,96,26)" fg:x="73255" fg:w="25"/><text x="59.7247%" y="879.50"></text></g><g><title>parking::Inner::park (25 samples, 0.02%)</title><rect x="59.4950%" y="869" width="0.0203%" height="15" fill="rgb(232,10,30)" fg:x="73280" fg:w="25"/><text x="59.7450%" y="879.50"></text></g><g><title>polling::epoll::Poller::wait (27 samples, 0.02%)</title><rect x="59.5242%" y="869" width="0.0219%" height="15" fill="rgb(222,8,50)" fg:x="73316" fg:w="27"/><text x="59.7742%" y="879.50"></text></g><g><title>sn_rust_alloc (81 samples, 0.07%)</title><rect x="59.5462%" y="869" width="0.0658%" height="15" fill="rgb(213,81,27)" fg:x="73343" fg:w="81"/><text x="59.7962%" y="879.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (77 samples, 0.06%)</title><rect x="59.6282%" y="869" width="0.0625%" height="15" fill="rgb(245,50,10)" fg:x="73444" fg:w="77"/><text x="59.8782%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (64 samples, 0.05%)</title><rect x="60.4839%" y="421" width="0.0520%" height="15" fill="rgb(216,100,18)" fg:x="74498" fg:w="64"/><text x="60.7339%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (64 samples, 0.05%)</title><rect x="60.4839%" y="405" width="0.0520%" height="15" fill="rgb(236,147,54)" fg:x="74498" fg:w="64"/><text x="60.7339%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (64 samples, 0.05%)</title><rect x="60.4839%" y="389" width="0.0520%" height="15" fill="rgb(205,143,26)" fg:x="74498" fg:w="64"/><text x="60.7339%" y="399.50"></text></g><g><title>[libc-2.31.so] (1,469 samples, 1.19%)</title><rect x="60.5756%" y="405" width="1.1927%" height="15" fill="rgb(236,26,9)" fg:x="74611" fg:w="1469"/><text x="60.8256%" y="415.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (166 samples, 0.13%)</title><rect x="61.8844%" y="389" width="0.1348%" height="15" fill="rgb(221,165,53)" fg:x="76223" fg:w="166"/><text x="62.1344%" y="399.50"></text></g><g><title>&lt;tremor_runtime::codec::binary::Binary as tremor_runtime::codec::Codec&gt;::encode (1,860 samples, 1.51%)</title><rect x="60.5423%" y="421" width="1.5101%" height="15" fill="rgb(214,110,17)" fg:x="74570" fg:w="1860"/><text x="60.7923%" y="431.50"></text></g><g><title>sn_rust_alloc (350 samples, 0.28%)</title><rect x="61.7683%" y="405" width="0.2842%" height="15" fill="rgb(237,197,12)" fg:x="76080" fg:w="350"/><text x="62.0183%" y="415.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (41 samples, 0.03%)</title><rect x="62.0192%" y="389" width="0.0333%" height="15" fill="rgb(205,84,17)" fg:x="76389" fg:w="41"/><text x="62.2692%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (13 samples, 0.01%)</title><rect x="62.2010%" y="293" width="0.0106%" height="15" fill="rgb(237,18,45)" fg:x="76613" fg:w="13"/><text x="62.4510%" y="303.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.02%)</title><rect x="62.2246%" y="245" width="0.0154%" height="15" fill="rgb(221,87,14)" fg:x="76642" fg:w="19"/><text x="62.4746%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (85 samples, 0.07%)</title><rect x="62.2554%" y="149" width="0.0690%" height="15" fill="rgb(238,186,15)" fg:x="76680" fg:w="85"/><text x="62.5054%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (85 samples, 0.07%)</title><rect x="62.2554%" y="133" width="0.0690%" height="15" fill="rgb(208,115,11)" fg:x="76680" fg:w="85"/><text x="62.5054%" y="143.50"></text></g><g><title>__rg_dealloc (85 samples, 0.07%)</title><rect x="62.2554%" y="117" width="0.0690%" height="15" fill="rgb(254,175,0)" fg:x="76680" fg:w="85"/><text x="62.5054%" y="127.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (85 samples, 0.07%)</title><rect x="62.2554%" y="101" width="0.0690%" height="15" fill="rgb(227,24,42)" fg:x="76680" fg:w="85"/><text x="62.5054%" y="111.50"></text></g><g><title>sn_rust_dealloc (67 samples, 0.05%)</title><rect x="62.2700%" y="85" width="0.0544%" height="15" fill="rgb(223,211,37)" fg:x="76698" fg:w="67"/><text x="62.5200%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (102 samples, 0.08%)</title><rect x="62.2473%" y="245" width="0.0828%" height="15" fill="rgb(235,49,27)" fg:x="76670" fg:w="102"/><text x="62.4973%" y="255.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (102 samples, 0.08%)</title><rect x="62.2473%" y="229" width="0.0828%" height="15" fill="rgb(254,97,51)" fg:x="76670" fg:w="102"/><text x="62.4973%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (92 samples, 0.07%)</title><rect x="62.2554%" y="213" width="0.0747%" height="15" fill="rgb(249,51,40)" fg:x="76680" fg:w="92"/><text x="62.5054%" y="223.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (92 samples, 0.07%)</title><rect x="62.2554%" y="197" width="0.0747%" height="15" fill="rgb(210,128,45)" fg:x="76680" fg:w="92"/><text x="62.5054%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (92 samples, 0.07%)</title><rect x="62.2554%" y="181" width="0.0747%" height="15" fill="rgb(224,137,50)" fg:x="76680" fg:w="92"/><text x="62.5054%" y="191.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (92 samples, 0.07%)</title><rect x="62.2554%" y="165" width="0.0747%" height="15" fill="rgb(242,15,9)" fg:x="76680" fg:w="92"/><text x="62.5054%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (150 samples, 0.12%)</title><rect x="62.2124%" y="293" width="0.1218%" height="15" fill="rgb(233,187,41)" fg:x="76627" fg:w="150"/><text x="62.4624%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (144 samples, 0.12%)</title><rect x="62.2173%" y="277" width="0.1169%" height="15" fill="rgb(227,2,29)" fg:x="76633" fg:w="144"/><text x="62.4673%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (144 samples, 0.12%)</title><rect x="62.2173%" y="261" width="0.1169%" height="15" fill="rgb(222,70,3)" fg:x="76633" fg:w="144"/><text x="62.4673%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (178 samples, 0.14%)</title><rect x="62.1929%" y="309" width="0.1445%" height="15" fill="rgb(213,11,42)" fg:x="76603" fg:w="178"/><text x="62.4429%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (110 samples, 0.09%)</title><rect x="62.3374%" y="309" width="0.0893%" height="15" fill="rgb(225,150,9)" fg:x="76781" fg:w="110"/><text x="62.5874%" y="319.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (71 samples, 0.06%)</title><rect x="62.3691%" y="293" width="0.0576%" height="15" fill="rgb(230,162,45)" fg:x="76820" fg:w="71"/><text x="62.6191%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (71 samples, 0.06%)</title><rect x="62.3691%" y="277" width="0.0576%" height="15" fill="rgb(222,14,52)" fg:x="76820" fg:w="71"/><text x="62.6191%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (254 samples, 0.21%)</title><rect x="62.4357%" y="245" width="0.2062%" height="15" fill="rgb(254,198,14)" fg:x="76902" fg:w="254"/><text x="62.6857%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (254 samples, 0.21%)</title><rect x="62.4357%" y="229" width="0.2062%" height="15" fill="rgb(220,217,30)" fg:x="76902" fg:w="254"/><text x="62.6857%" y="239.50"></text></g><g><title>alloc::alloc::alloc (243 samples, 0.20%)</title><rect x="62.4446%" y="213" width="0.1973%" height="15" fill="rgb(215,146,41)" fg:x="76913" fg:w="243"/><text x="62.6946%" y="223.50"></text></g><g><title>__rg_alloc (243 samples, 0.20%)</title><rect x="62.4446%" y="197" width="0.1973%" height="15" fill="rgb(217,27,36)" fg:x="76913" fg:w="243"/><text x="62.6946%" y="207.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (243 samples, 0.20%)</title><rect x="62.4446%" y="181" width="0.1973%" height="15" fill="rgb(219,218,39)" fg:x="76913" fg:w="243"/><text x="62.6946%" y="191.50"></text></g><g><title>sn_rust_alloc (234 samples, 0.19%)</title><rect x="62.4519%" y="165" width="0.1900%" height="15" fill="rgb(219,4,42)" fg:x="76922" fg:w="234"/><text x="62.7019%" y="175.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (3,620 samples, 2.94%)</title><rect x="59.7093%" y="789" width="2.9390%" height="15" fill="rgb(249,119,36)" fg:x="73544" fg:w="3620"/><text x="59.9593%" y="799.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,620 samples, 2.94%)</title><rect x="59.7093%" y="773" width="2.9390%" height="15" fill="rgb(209,23,33)" fg:x="73544" fg:w="3620"/><text x="59.9593%" y="783.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (3,620 samples, 2.94%)</title><rect x="59.7093%" y="757" width="2.9390%" height="15" fill="rgb(211,10,0)" fg:x="73544" fg:w="3620"/><text x="59.9593%" y="767.50">tr..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,620 samples, 2.94%)</title><rect x="59.7093%" y="741" width="2.9390%" height="15" fill="rgb(208,99,37)" fg:x="73544" fg:w="3620"/><text x="59.9593%" y="751.50">&lt;a..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,620 samples, 2.94%)</title><rect x="59.7093%" y="725" width="2.9390%" height="15" fill="rgb(213,132,31)" fg:x="73544" fg:w="3620"/><text x="59.9593%" y="735.50">&lt;a..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (3,620 samples, 2.94%)</title><rect x="59.7093%" y="709" width="2.9390%" height="15" fill="rgb(243,129,40)" fg:x="73544" fg:w="3620"/><text x="59.9593%" y="719.50">&lt;c..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (3,620 samples, 2.94%)</title><rect x="59.7093%" y="693" width="2.9390%" height="15" fill="rgb(210,66,33)" fg:x="73544" fg:w="3620"/><text x="59.9593%" y="703.50">&lt;a..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (3,620 samples, 2.94%)</title><rect x="59.7093%" y="677" width="2.9390%" height="15" fill="rgb(209,189,4)" fg:x="73544" fg:w="3620"/><text x="59.9593%" y="687.50">as..</text></g><g><title>std::panic::catch_unwind (3,620 samples, 2.94%)</title><rect x="59.7093%" y="661" width="2.9390%" height="15" fill="rgb(214,107,37)" fg:x="73544" fg:w="3620"/><text x="59.9593%" y="671.50">st..</text></g><g><title>std::panicking::try (3,620 samples, 2.94%)</title><rect x="59.7093%" y="645" width="2.9390%" height="15" fill="rgb(245,88,54)" fg:x="73544" fg:w="3620"/><text x="59.9593%" y="655.50">st..</text></g><g><title>std::panicking::try::do_call (3,620 samples, 2.94%)</title><rect x="59.7093%" y="629" width="2.9390%" height="15" fill="rgb(205,146,20)" fg:x="73544" fg:w="3620"/><text x="59.9593%" y="639.50">st..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3,620 samples, 2.94%)</title><rect x="59.7093%" y="613" width="2.9390%" height="15" fill="rgb(220,161,25)" fg:x="73544" fg:w="3620"/><text x="59.9593%" y="623.50">&lt;c..</text></g><g><title>core::ops::function::FnOnce::call_once (3,620 samples, 2.94%)</title><rect x="59.7093%" y="597" width="2.9390%" height="15" fill="rgb(215,152,15)" fg:x="73544" fg:w="3620"/><text x="59.9593%" y="607.50">co..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (3,620 samples, 2.94%)</title><rect x="59.7093%" y="581" width="2.9390%" height="15" fill="rgb(233,192,44)" fg:x="73544" fg:w="3620"/><text x="59.9593%" y="591.50">as..</text></g><g><title>async_ffi::FfiContext::with_context (3,620 samples, 2.94%)</title><rect x="59.7093%" y="565" width="2.9390%" height="15" fill="rgb(240,170,46)" fg:x="73544" fg:w="3620"/><text x="59.9593%" y="575.50">as..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (3,620 samples, 2.94%)</title><rect x="59.7093%" y="549" width="2.9390%" height="15" fill="rgb(207,104,33)" fg:x="73544" fg:w="3620"/><text x="59.9593%" y="559.50">as..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,620 samples, 2.94%)</title><rect x="59.7093%" y="533" width="2.9390%" height="15" fill="rgb(219,21,39)" fg:x="73544" fg:w="3620"/><text x="59.9593%" y="543.50">&lt;c..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (3,620 samples, 2.94%)</title><rect x="59.7093%" y="517" width="2.9390%" height="15" fill="rgb(214,133,29)" fg:x="73544" fg:w="3620"/><text x="59.9593%" y="527.50">&lt;t..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (3,620 samples, 2.94%)</title><rect x="59.7093%" y="501" width="2.9390%" height="15" fill="rgb(226,93,6)" fg:x="73544" fg:w="3620"/><text x="59.9593%" y="511.50">tr..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (3,620 samples, 2.94%)</title><rect x="59.7093%" y="485" width="2.9390%" height="15" fill="rgb(252,222,34)" fg:x="73544" fg:w="3620"/><text x="59.9593%" y="495.50">tr..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (3,620 samples, 2.94%)</title><rect x="59.7093%" y="469" width="2.9390%" height="15" fill="rgb(252,92,48)" fg:x="73544" fg:w="3620"/><text x="59.9593%" y="479.50">tr..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (3,620 samples, 2.94%)</title><rect x="59.7093%" y="453" width="2.9390%" height="15" fill="rgb(245,223,24)" fg:x="73544" fg:w="3620"/><text x="59.9593%" y="463.50">tr..</text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (3,620 samples, 2.94%)</title><rect x="59.7093%" y="437" width="2.9390%" height="15" fill="rgb(205,176,3)" fg:x="73544" fg:w="3620"/><text x="59.9593%" y="447.50">&lt;t..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (734 samples, 0.60%)</title><rect x="62.0524%" y="421" width="0.5959%" height="15" fill="rgb(235,151,15)" fg:x="76430" fg:w="734"/><text x="62.3024%" y="431.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::iter::traits::collect::FromIterator&lt;T&gt; for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::from_iter (734 samples, 0.60%)</title><rect x="62.0524%" y="405" width="0.5959%" height="15" fill="rgb(237,209,11)" fg:x="76430" fg:w="734"/><text x="62.3024%" y="415.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (734 samples, 0.60%)</title><rect x="62.0524%" y="389" width="0.5959%" height="15" fill="rgb(243,227,24)" fg:x="76430" fg:w="734"/><text x="62.3024%" y="399.50"></text></g><g><title>core::ops::function::FnOnce::call_once (726 samples, 0.59%)</title><rect x="62.0589%" y="373" width="0.5894%" height="15" fill="rgb(239,193,16)" fg:x="76438" fg:w="726"/><text x="62.3089%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (726 samples, 0.59%)</title><rect x="62.0589%" y="357" width="0.5894%" height="15" fill="rgb(231,27,9)" fg:x="76438" fg:w="726"/><text x="62.3089%" y="367.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (716 samples, 0.58%)</title><rect x="62.0671%" y="341" width="0.5813%" height="15" fill="rgb(219,169,10)" fg:x="76448" fg:w="716"/><text x="62.3171%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (568 samples, 0.46%)</title><rect x="62.1872%" y="325" width="0.4612%" height="15" fill="rgb(244,229,43)" fg:x="76596" fg:w="568"/><text x="62.4372%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (273 samples, 0.22%)</title><rect x="62.4267%" y="309" width="0.2216%" height="15" fill="rgb(254,38,20)" fg:x="76891" fg:w="273"/><text x="62.6767%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (273 samples, 0.22%)</title><rect x="62.4267%" y="293" width="0.2216%" height="15" fill="rgb(250,47,30)" fg:x="76891" fg:w="273"/><text x="62.6767%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (272 samples, 0.22%)</title><rect x="62.4275%" y="277" width="0.2208%" height="15" fill="rgb(224,124,36)" fg:x="76892" fg:w="272"/><text x="62.6775%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (272 samples, 0.22%)</title><rect x="62.4275%" y="261" width="0.2208%" height="15" fill="rgb(246,68,51)" fg:x="76892" fg:w="272"/><text x="62.6775%" y="271.50"></text></g><g><title>&lt;tremor_pipeline::EventId as core::default::Default&gt;::default (13 samples, 0.01%)</title><rect x="63.0608%" y="661" width="0.0106%" height="15" fill="rgb(253,43,49)" fg:x="77672" fg:w="13"/><text x="63.3108%" y="671.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (109 samples, 0.09%)</title><rect x="63.1388%" y="437" width="0.0885%" height="15" fill="rgb(219,54,36)" fg:x="77768" fg:w="109"/><text x="63.3888%" y="447.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::default::Default&gt;::default (197 samples, 0.16%)</title><rect x="63.0714%" y="661" width="0.1599%" height="15" fill="rgb(227,133,34)" fg:x="77685" fg:w="197"/><text x="63.3214%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (188 samples, 0.15%)</title><rect x="63.0787%" y="645" width="0.1526%" height="15" fill="rgb(247,227,15)" fg:x="77694" fg:w="188"/><text x="63.3287%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (188 samples, 0.15%)</title><rect x="63.0787%" y="629" width="0.1526%" height="15" fill="rgb(229,96,14)" fg:x="77694" fg:w="188"/><text x="63.3287%" y="639.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (188 samples, 0.15%)</title><rect x="63.0787%" y="613" width="0.1526%" height="15" fill="rgb(220,79,17)" fg:x="77694" fg:w="188"/><text x="63.3287%" y="623.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (188 samples, 0.15%)</title><rect x="63.0787%" y="597" width="0.1526%" height="15" fill="rgb(205,131,53)" fg:x="77694" fg:w="188"/><text x="63.3287%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (188 samples, 0.15%)</title><rect x="63.0787%" y="581" width="0.1526%" height="15" fill="rgb(209,50,29)" fg:x="77694" fg:w="188"/><text x="63.3287%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (181 samples, 0.15%)</title><rect x="63.0844%" y="565" width="0.1470%" height="15" fill="rgb(245,86,46)" fg:x="77701" fg:w="181"/><text x="63.3344%" y="575.50"></text></g><g><title>alloc::alloc::exchange_malloc (160 samples, 0.13%)</title><rect x="63.1014%" y="549" width="0.1299%" height="15" fill="rgb(235,66,46)" fg:x="77722" fg:w="160"/><text x="63.3514%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (160 samples, 0.13%)</title><rect x="63.1014%" y="533" width="0.1299%" height="15" fill="rgb(232,148,31)" fg:x="77722" fg:w="160"/><text x="63.3514%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (160 samples, 0.13%)</title><rect x="63.1014%" y="517" width="0.1299%" height="15" fill="rgb(217,149,8)" fg:x="77722" fg:w="160"/><text x="63.3514%" y="527.50"></text></g><g><title>alloc::alloc::alloc (160 samples, 0.13%)</title><rect x="63.1014%" y="501" width="0.1299%" height="15" fill="rgb(209,183,11)" fg:x="77722" fg:w="160"/><text x="63.3514%" y="511.50"></text></g><g><title>__rg_alloc (160 samples, 0.13%)</title><rect x="63.1014%" y="485" width="0.1299%" height="15" fill="rgb(208,55,20)" fg:x="77722" fg:w="160"/><text x="63.3514%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (160 samples, 0.13%)</title><rect x="63.1014%" y="469" width="0.1299%" height="15" fill="rgb(218,39,14)" fg:x="77722" fg:w="160"/><text x="63.3514%" y="479.50"></text></g><g><title>sn_rust_alloc (140 samples, 0.11%)</title><rect x="63.1176%" y="453" width="0.1137%" height="15" fill="rgb(216,169,33)" fg:x="77742" fg:w="140"/><text x="63.3676%" y="463.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (437 samples, 0.35%)</title><rect x="63.4935%" y="421" width="0.3548%" height="15" fill="rgb(233,80,24)" fg:x="78205" fg:w="437"/><text x="63.7435%" y="431.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (610 samples, 0.50%)</title><rect x="63.3596%" y="581" width="0.4953%" height="15" fill="rgb(213,179,31)" fg:x="78040" fg:w="610"/><text x="63.6096%" y="591.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (610 samples, 0.50%)</title><rect x="63.3596%" y="565" width="0.4953%" height="15" fill="rgb(209,19,5)" fg:x="78040" fg:w="610"/><text x="63.6096%" y="575.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (583 samples, 0.47%)</title><rect x="63.3815%" y="549" width="0.4733%" height="15" fill="rgb(219,18,35)" fg:x="78067" fg:w="583"/><text x="63.6315%" y="559.50"></text></g><g><title>alloc::alloc::exchange_malloc (570 samples, 0.46%)</title><rect x="63.3921%" y="533" width="0.4628%" height="15" fill="rgb(209,169,16)" fg:x="78080" fg:w="570"/><text x="63.6421%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (562 samples, 0.46%)</title><rect x="63.3986%" y="517" width="0.4563%" height="15" fill="rgb(245,90,51)" fg:x="78088" fg:w="562"/><text x="63.6486%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (562 samples, 0.46%)</title><rect x="63.3986%" y="501" width="0.4563%" height="15" fill="rgb(220,99,45)" fg:x="78088" fg:w="562"/><text x="63.6486%" y="511.50"></text></g><g><title>alloc::alloc::alloc (562 samples, 0.46%)</title><rect x="63.3986%" y="485" width="0.4563%" height="15" fill="rgb(249,89,25)" fg:x="78088" fg:w="562"/><text x="63.6486%" y="495.50"></text></g><g><title>__rg_alloc (562 samples, 0.46%)</title><rect x="63.3986%" y="469" width="0.4563%" height="15" fill="rgb(239,193,0)" fg:x="78088" fg:w="562"/><text x="63.6486%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (562 samples, 0.46%)</title><rect x="63.3986%" y="453" width="0.4563%" height="15" fill="rgb(231,126,1)" fg:x="78088" fg:w="562"/><text x="63.6486%" y="463.50"></text></g><g><title>sn_rust_alloc (559 samples, 0.45%)</title><rect x="63.4010%" y="437" width="0.4538%" height="15" fill="rgb(243,166,3)" fg:x="78091" fg:w="559"/><text x="63.6510%" y="447.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (669 samples, 0.54%)</title><rect x="63.3255%" y="597" width="0.5432%" height="15" fill="rgb(223,22,34)" fg:x="77998" fg:w="669"/><text x="63.5755%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (17 samples, 0.01%)</title><rect x="63.8548%" y="581" width="0.0138%" height="15" fill="rgb(251,52,51)" fg:x="78650" fg:w="17"/><text x="64.1048%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (17 samples, 0.01%)</title><rect x="63.8548%" y="565" width="0.0138%" height="15" fill="rgb(221,165,28)" fg:x="78650" fg:w="17"/><text x="64.1048%" y="575.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (1,298 samples, 1.05%)</title><rect x="63.2321%" y="645" width="1.0538%" height="15" fill="rgb(218,121,47)" fg:x="77883" fg:w="1298"/><text x="63.4821%" y="655.50"></text></g><g><title>value_trait::Builder::object (1,200 samples, 0.97%)</title><rect x="63.3117%" y="629" width="0.9743%" height="15" fill="rgb(209,120,9)" fg:x="77981" fg:w="1200"/><text x="63.5617%" y="639.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (1,200 samples, 0.97%)</title><rect x="63.3117%" y="613" width="0.9743%" height="15" fill="rgb(236,68,12)" fg:x="77981" fg:w="1200"/><text x="63.5617%" y="623.50"></text></g><g><title>tremor_value::value::Value::Object (514 samples, 0.42%)</title><rect x="63.8686%" y="597" width="0.4173%" height="15" fill="rgb(225,194,26)" fg:x="78667" fg:w="514"/><text x="64.1186%" y="607.50"></text></g><g><title>&lt;tremor_pipeline::event::Event as core::default::Default&gt;::default (1,588 samples, 1.29%)</title><rect x="63.0024%" y="677" width="1.2893%" height="15" fill="rgb(231,84,39)" fg:x="77600" fg:w="1588"/><text x="63.2524%" y="687.50"></text></g><g><title>&lt;tremor_script::srs::EventPayload as core::default::Default&gt;::default (1,306 samples, 1.06%)</title><rect x="63.2313%" y="661" width="1.0603%" height="15" fill="rgb(210,11,45)" fg:x="77882" fg:w="1306"/><text x="63.4813%" y="671.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (25 samples, 0.02%)</title><rect x="64.3144%" y="661" width="0.0203%" height="15" fill="rgb(224,54,52)" fg:x="79216" fg:w="25"/><text x="64.5644%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (20 samples, 0.02%)</title><rect x="64.3347%" y="661" width="0.0162%" height="15" fill="rgb(238,102,14)" fg:x="79241" fg:w="20"/><text x="64.5847%" y="671.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (20 samples, 0.02%)</title><rect x="64.3347%" y="645" width="0.0162%" height="15" fill="rgb(243,160,52)" fg:x="79241" fg:w="20"/><text x="64.5847%" y="655.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (13 samples, 0.01%)</title><rect x="64.3403%" y="629" width="0.0106%" height="15" fill="rgb(216,114,19)" fg:x="79248" fg:w="13"/><text x="64.5903%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (24 samples, 0.02%)</title><rect x="64.3785%" y="581" width="0.0195%" height="15" fill="rgb(244,166,37)" fg:x="79295" fg:w="24"/><text x="64.6285%" y="591.50"></text></g><g><title>sn_rust_dealloc (34 samples, 0.03%)</title><rect x="64.3980%" y="581" width="0.0276%" height="15" fill="rgb(246,29,44)" fg:x="79319" fg:w="34"/><text x="64.6480%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (101 samples, 0.08%)</title><rect x="64.3509%" y="661" width="0.0820%" height="15" fill="rgb(215,56,53)" fg:x="79261" fg:w="101"/><text x="64.6009%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (101 samples, 0.08%)</title><rect x="64.3509%" y="645" width="0.0820%" height="15" fill="rgb(217,60,2)" fg:x="79261" fg:w="101"/><text x="64.6009%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (83 samples, 0.07%)</title><rect x="64.3655%" y="629" width="0.0674%" height="15" fill="rgb(207,26,24)" fg:x="79279" fg:w="83"/><text x="64.6155%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (83 samples, 0.07%)</title><rect x="64.3655%" y="613" width="0.0674%" height="15" fill="rgb(252,210,15)" fg:x="79279" fg:w="83"/><text x="64.6155%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (83 samples, 0.07%)</title><rect x="64.3655%" y="597" width="0.0674%" height="15" fill="rgb(253,209,26)" fg:x="79279" fg:w="83"/><text x="64.6155%" y="607.50"></text></g><g><title>sn_rust_dealloc (33 samples, 0.03%)</title><rect x="64.4329%" y="661" width="0.0268%" height="15" fill="rgb(238,170,14)" fg:x="79362" fg:w="33"/><text x="64.6829%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (193 samples, 0.16%)</title><rect x="64.3038%" y="677" width="0.1567%" height="15" fill="rgb(216,178,15)" fg:x="79203" fg:w="193"/><text x="64.5538%" y="687.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (2,246 samples, 1.82%)</title><rect x="62.6508%" y="693" width="1.8235%" height="15" fill="rgb(250,197,2)" fg:x="77167" fg:w="2246"/><text x="62.9008%" y="703.50">t..</text></g><g><title>tremor_pipeline::EventIdGenerator::next_with_pull_id (17 samples, 0.01%)</title><rect x="64.4605%" y="677" width="0.0138%" height="15" fill="rgb(212,70,42)" fg:x="79396" fg:w="17"/><text x="64.7105%" y="687.50"></text></g><g><title>alloc::alloc::exchange_malloc (71 samples, 0.06%)</title><rect x="64.5068%" y="677" width="0.0576%" height="15" fill="rgb(227,213,9)" fg:x="79453" fg:w="71"/><text x="64.7568%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (71 samples, 0.06%)</title><rect x="64.5068%" y="661" width="0.0576%" height="15" fill="rgb(245,99,25)" fg:x="79453" fg:w="71"/><text x="64.7568%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (71 samples, 0.06%)</title><rect x="64.5068%" y="645" width="0.0576%" height="15" fill="rgb(250,82,29)" fg:x="79453" fg:w="71"/><text x="64.7568%" y="655.50"></text></g><g><title>alloc::alloc::alloc (70 samples, 0.06%)</title><rect x="64.5076%" y="629" width="0.0568%" height="15" fill="rgb(241,226,54)" fg:x="79454" fg:w="70"/><text x="64.7576%" y="639.50"></text></g><g><title>__rg_alloc (70 samples, 0.06%)</title><rect x="64.5076%" y="613" width="0.0568%" height="15" fill="rgb(221,99,41)" fg:x="79454" fg:w="70"/><text x="64.7576%" y="623.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (70 samples, 0.06%)</title><rect x="64.5076%" y="597" width="0.0568%" height="15" fill="rgb(213,90,21)" fg:x="79454" fg:w="70"/><text x="64.7576%" y="607.50"></text></g><g><title>sn_rust_alloc (65 samples, 0.05%)</title><rect x="64.5117%" y="581" width="0.0528%" height="15" fill="rgb(205,208,24)" fg:x="79459" fg:w="65"/><text x="64.7617%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (36 samples, 0.03%)</title><rect x="64.5352%" y="565" width="0.0292%" height="15" fill="rgb(246,31,12)" fg:x="79488" fg:w="36"/><text x="64.7852%" y="575.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (127 samples, 0.10%)</title><rect x="64.4743%" y="693" width="0.1031%" height="15" fill="rgb(213,154,6)" fg:x="79413" fg:w="127"/><text x="64.7243%" y="703.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (129 samples, 0.10%)</title><rect x="64.8315%" y="677" width="0.1047%" height="15" fill="rgb(222,163,29)" fg:x="79853" fg:w="129"/><text x="65.0815%" y="687.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::new (102 samples, 0.08%)</title><rect x="64.9363%" y="677" width="0.0828%" height="15" fill="rgb(227,201,8)" fg:x="79982" fg:w="102"/><text x="65.1863%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (102 samples, 0.08%)</title><rect x="64.9363%" y="661" width="0.0828%" height="15" fill="rgb(233,9,32)" fg:x="79982" fg:w="102"/><text x="65.1863%" y="671.50"></text></g><g><title>alloc::alloc::exchange_malloc (83 samples, 0.07%)</title><rect x="64.9517%" y="645" width="0.0674%" height="15" fill="rgb(217,54,24)" fg:x="80001" fg:w="83"/><text x="65.2017%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (83 samples, 0.07%)</title><rect x="64.9517%" y="629" width="0.0674%" height="15" fill="rgb(235,192,0)" fg:x="80001" fg:w="83"/><text x="65.2017%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (83 samples, 0.07%)</title><rect x="64.9517%" y="613" width="0.0674%" height="15" fill="rgb(235,45,9)" fg:x="80001" fg:w="83"/><text x="65.2017%" y="623.50"></text></g><g><title>alloc::alloc::alloc (82 samples, 0.07%)</title><rect x="64.9525%" y="597" width="0.0666%" height="15" fill="rgb(246,42,40)" fg:x="80002" fg:w="82"/><text x="65.2025%" y="607.50"></text></g><g><title>__rg_alloc (82 samples, 0.07%)</title><rect x="64.9525%" y="581" width="0.0666%" height="15" fill="rgb(248,111,24)" fg:x="80002" fg:w="82"/><text x="65.2025%" y="591.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (82 samples, 0.07%)</title><rect x="64.9525%" y="565" width="0.0666%" height="15" fill="rgb(249,65,22)" fg:x="80002" fg:w="82"/><text x="65.2025%" y="575.50"></text></g><g><title>sn_rust_alloc (73 samples, 0.06%)</title><rect x="64.9598%" y="549" width="0.0593%" height="15" fill="rgb(238,111,51)" fg:x="80011" fg:w="73"/><text x="65.2098%" y="559.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (45 samples, 0.04%)</title><rect x="64.9825%" y="533" width="0.0365%" height="15" fill="rgb(250,118,22)" fg:x="80039" fg:w="45"/><text x="65.2325%" y="543.50"></text></g><g><title>alloc::alloc::exchange_malloc (42 samples, 0.03%)</title><rect x="65.0191%" y="677" width="0.0341%" height="15" fill="rgb(234,84,26)" fg:x="80084" fg:w="42"/><text x="65.2691%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (42 samples, 0.03%)</title><rect x="65.0191%" y="661" width="0.0341%" height="15" fill="rgb(243,172,12)" fg:x="80084" fg:w="42"/><text x="65.2691%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (42 samples, 0.03%)</title><rect x="65.0191%" y="645" width="0.0341%" height="15" fill="rgb(236,150,49)" fg:x="80084" fg:w="42"/><text x="65.2691%" y="655.50"></text></g><g><title>alloc::alloc::alloc (39 samples, 0.03%)</title><rect x="65.0215%" y="629" width="0.0317%" height="15" fill="rgb(225,197,26)" fg:x="80087" fg:w="39"/><text x="65.2715%" y="639.50"></text></g><g><title>__rg_alloc (39 samples, 0.03%)</title><rect x="65.0215%" y="613" width="0.0317%" height="15" fill="rgb(214,17,42)" fg:x="80087" fg:w="39"/><text x="65.2715%" y="623.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (39 samples, 0.03%)</title><rect x="65.0215%" y="597" width="0.0317%" height="15" fill="rgb(224,165,40)" fg:x="80087" fg:w="39"/><text x="65.2715%" y="607.50"></text></g><g><title>sn_rust_alloc (31 samples, 0.03%)</title><rect x="65.0280%" y="581" width="0.0252%" height="15" fill="rgb(246,100,4)" fg:x="80095" fg:w="31"/><text x="65.2780%" y="591.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_ptr (18 samples, 0.01%)</title><rect x="65.4518%" y="533" width="0.0146%" height="15" fill="rgb(222,103,0)" fg:x="80617" fg:w="18"/><text x="65.7018%" y="543.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (47 samples, 0.04%)</title><rect x="65.5030%" y="389" width="0.0382%" height="15" fill="rgb(227,189,26)" fg:x="80680" fg:w="47"/><text x="65.7530%" y="399.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (113 samples, 0.09%)</title><rect x="65.4518%" y="549" width="0.0917%" height="15" fill="rgb(214,202,17)" fg:x="80617" fg:w="113"/><text x="65.7018%" y="559.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (95 samples, 0.08%)</title><rect x="65.4664%" y="533" width="0.0771%" height="15" fill="rgb(229,111,3)" fg:x="80635" fg:w="95"/><text x="65.7164%" y="543.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (95 samples, 0.08%)</title><rect x="65.4664%" y="517" width="0.0771%" height="15" fill="rgb(229,172,15)" fg:x="80635" fg:w="95"/><text x="65.7164%" y="527.50"></text></g><g><title>alloc::alloc::exchange_malloc (91 samples, 0.07%)</title><rect x="65.4697%" y="501" width="0.0739%" height="15" fill="rgb(230,224,35)" fg:x="80639" fg:w="91"/><text x="65.7197%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (90 samples, 0.07%)</title><rect x="65.4705%" y="485" width="0.0731%" height="15" fill="rgb(251,141,6)" fg:x="80640" fg:w="90"/><text x="65.7205%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (90 samples, 0.07%)</title><rect x="65.4705%" y="469" width="0.0731%" height="15" fill="rgb(225,208,6)" fg:x="80640" fg:w="90"/><text x="65.7205%" y="479.50"></text></g><g><title>alloc::alloc::alloc (90 samples, 0.07%)</title><rect x="65.4705%" y="453" width="0.0731%" height="15" fill="rgb(246,181,16)" fg:x="80640" fg:w="90"/><text x="65.7205%" y="463.50"></text></g><g><title>__rg_alloc (90 samples, 0.07%)</title><rect x="65.4705%" y="437" width="0.0731%" height="15" fill="rgb(227,129,36)" fg:x="80640" fg:w="90"/><text x="65.7205%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (90 samples, 0.07%)</title><rect x="65.4705%" y="421" width="0.0731%" height="15" fill="rgb(248,117,24)" fg:x="80640" fg:w="90"/><text x="65.7205%" y="431.50"></text></g><g><title>sn_rust_alloc (83 samples, 0.07%)</title><rect x="65.4762%" y="405" width="0.0674%" height="15" fill="rgb(214,185,35)" fg:x="80647" fg:w="83"/><text x="65.7262%" y="415.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (215 samples, 0.17%)</title><rect x="65.3812%" y="661" width="0.1746%" height="15" fill="rgb(236,150,34)" fg:x="80530" fg:w="215"/><text x="65.6312%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (143 samples, 0.12%)</title><rect x="65.4396%" y="645" width="0.1161%" height="15" fill="rgb(243,228,27)" fg:x="80602" fg:w="143"/><text x="65.6896%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (143 samples, 0.12%)</title><rect x="65.4396%" y="629" width="0.1161%" height="15" fill="rgb(245,77,44)" fg:x="80602" fg:w="143"/><text x="65.6896%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (132 samples, 0.11%)</title><rect x="65.4486%" y="613" width="0.1072%" height="15" fill="rgb(235,214,42)" fg:x="80613" fg:w="132"/><text x="65.6986%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (129 samples, 0.10%)</title><rect x="65.4510%" y="597" width="0.1047%" height="15" fill="rgb(221,74,3)" fg:x="80616" fg:w="129"/><text x="65.7010%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (128 samples, 0.10%)</title><rect x="65.4518%" y="581" width="0.1039%" height="15" fill="rgb(206,121,29)" fg:x="80617" fg:w="128"/><text x="65.7018%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (128 samples, 0.10%)</title><rect x="65.4518%" y="565" width="0.1039%" height="15" fill="rgb(249,131,53)" fg:x="80617" fg:w="128"/><text x="65.7018%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (15 samples, 0.01%)</title><rect x="65.5436%" y="549" width="0.0122%" height="15" fill="rgb(236,170,29)" fg:x="80730" fg:w="15"/><text x="65.7936%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (15 samples, 0.01%)</title><rect x="65.5436%" y="533" width="0.0122%" height="15" fill="rgb(247,96,15)" fg:x="80730" fg:w="15"/><text x="65.7936%" y="543.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,865 samples, 3.14%)</title><rect x="62.6484%" y="773" width="3.1379%" height="15" fill="rgb(211,210,7)" fg:x="77164" fg:w="3865"/><text x="62.8984%" y="783.50">&lt;co..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (3,865 samples, 3.14%)</title><rect x="62.6484%" y="757" width="3.1379%" height="15" fill="rgb(240,88,50)" fg:x="77164" fg:w="3865"/><text x="62.8984%" y="767.50">tre..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,865 samples, 3.14%)</title><rect x="62.6484%" y="741" width="3.1379%" height="15" fill="rgb(209,229,26)" fg:x="77164" fg:w="3865"/><text x="62.8984%" y="751.50">&lt;co..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (3,865 samples, 3.14%)</title><rect x="62.6484%" y="725" width="3.1379%" height="15" fill="rgb(210,68,23)" fg:x="77164" fg:w="3865"/><text x="62.8984%" y="735.50">tre..</text></g><g><title>tremor_runtime::connectors::source::build_events (3,862 samples, 3.14%)</title><rect x="62.6508%" y="709" width="3.1355%" height="15" fill="rgb(229,180,13)" fg:x="77167" fg:w="3862"/><text x="62.9008%" y="719.50">tre..</text></g><g><title>tremor_script::srs::EventPayload::try_new (1,489 samples, 1.21%)</title><rect x="64.5774%" y="693" width="1.2089%" height="15" fill="rgb(236,53,44)" fg:x="79540" fg:w="1489"/><text x="64.8274%" y="703.50"></text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (894 samples, 0.73%)</title><rect x="65.0605%" y="677" width="0.7258%" height="15" fill="rgb(244,214,29)" fg:x="80135" fg:w="894"/><text x="65.3105%" y="687.50"></text></g><g><title>tremor_script::srs::ValueAndMeta::from_parts (284 samples, 0.23%)</title><rect x="65.5557%" y="661" width="0.2306%" height="15" fill="rgb(220,75,29)" fg:x="80745" fg:w="284"/><text x="65.8057%" y="671.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (180 samples, 0.15%)</title><rect x="65.7952%" y="613" width="0.1461%" height="15" fill="rgb(214,183,37)" fg:x="81040" fg:w="180"/><text x="66.0452%" y="623.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (180 samples, 0.15%)</title><rect x="65.7952%" y="597" width="0.1461%" height="15" fill="rgb(239,117,29)" fg:x="81040" fg:w="180"/><text x="66.0452%" y="607.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (180 samples, 0.15%)</title><rect x="65.7952%" y="581" width="0.1461%" height="15" fill="rgb(237,171,35)" fg:x="81040" fg:w="180"/><text x="66.0452%" y="591.50"></text></g><g><title>[libc-2.31.so] (161 samples, 0.13%)</title><rect x="65.8107%" y="565" width="0.1307%" height="15" fill="rgb(229,178,53)" fg:x="81059" fg:w="161"/><text x="66.0607%" y="575.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (17 samples, 0.01%)</title><rect x="66.0421%" y="565" width="0.0138%" height="15" fill="rgb(210,102,19)" fg:x="81344" fg:w="17"/><text x="66.2921%" y="575.50"></text></g><g><title>core::ops::function::FnOnce::call_once (17 samples, 0.01%)</title><rect x="66.0421%" y="549" width="0.0138%" height="15" fill="rgb(235,127,22)" fg:x="81344" fg:w="17"/><text x="66.2921%" y="559.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (17 samples, 0.01%)</title><rect x="66.0421%" y="533" width="0.0138%" height="15" fill="rgb(244,31,31)" fg:x="81344" fg:w="17"/><text x="66.2921%" y="543.50"></text></g><g><title>async_ffi::FfiContext::with_context (16 samples, 0.01%)</title><rect x="66.0429%" y="517" width="0.0130%" height="15" fill="rgb(231,43,21)" fg:x="81345" fg:w="16"/><text x="66.2929%" y="527.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (4,507 samples, 3.66%)</title><rect x="62.6484%" y="789" width="3.6592%" height="15" fill="rgb(217,131,35)" fg:x="77164" fg:w="4507"/><text x="62.8984%" y="799.50">trem..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (642 samples, 0.52%)</title><rect x="65.7863%" y="773" width="0.5212%" height="15" fill="rgb(221,149,4)" fg:x="81029" fg:w="642"/><text x="66.0363%" y="783.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (642 samples, 0.52%)</title><rect x="65.7863%" y="757" width="0.5212%" height="15" fill="rgb(232,170,28)" fg:x="81029" fg:w="642"/><text x="66.0363%" y="767.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (642 samples, 0.52%)</title><rect x="65.7863%" y="741" width="0.5212%" height="15" fill="rgb(238,56,10)" fg:x="81029" fg:w="642"/><text x="66.0363%" y="751.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (642 samples, 0.52%)</title><rect x="65.7863%" y="725" width="0.5212%" height="15" fill="rgb(235,196,14)" fg:x="81029" fg:w="642"/><text x="66.0363%" y="735.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (642 samples, 0.52%)</title><rect x="65.7863%" y="709" width="0.5212%" height="15" fill="rgb(216,45,48)" fg:x="81029" fg:w="642"/><text x="66.0363%" y="719.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (642 samples, 0.52%)</title><rect x="65.7863%" y="693" width="0.5212%" height="15" fill="rgb(238,213,17)" fg:x="81029" fg:w="642"/><text x="66.0363%" y="703.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (642 samples, 0.52%)</title><rect x="65.7863%" y="677" width="0.5212%" height="15" fill="rgb(212,13,2)" fg:x="81029" fg:w="642"/><text x="66.0363%" y="687.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (642 samples, 0.52%)</title><rect x="65.7863%" y="661" width="0.5212%" height="15" fill="rgb(240,114,20)" fg:x="81029" fg:w="642"/><text x="66.0363%" y="671.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (642 samples, 0.52%)</title><rect x="65.7863%" y="645" width="0.5212%" height="15" fill="rgb(228,41,40)" fg:x="81029" fg:w="642"/><text x="66.0363%" y="655.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (642 samples, 0.52%)</title><rect x="65.7863%" y="629" width="0.5212%" height="15" fill="rgb(244,132,35)" fg:x="81029" fg:w="642"/><text x="66.0363%" y="639.50"></text></g><g><title>std::panic::catch_unwind (451 samples, 0.37%)</title><rect x="65.9414%" y="613" width="0.3662%" height="15" fill="rgb(253,189,4)" fg:x="81220" fg:w="451"/><text x="66.1914%" y="623.50"></text></g><g><title>std::panicking::try (451 samples, 0.37%)</title><rect x="65.9414%" y="597" width="0.3662%" height="15" fill="rgb(224,37,19)" fg:x="81220" fg:w="451"/><text x="66.1914%" y="607.50"></text></g><g><title>std::panicking::try::do_call (451 samples, 0.37%)</title><rect x="65.9414%" y="581" width="0.3662%" height="15" fill="rgb(235,223,18)" fg:x="81220" fg:w="451"/><text x="66.1914%" y="591.50"></text></g><g><title>[libc-2.31.so] (310 samples, 0.25%)</title><rect x="66.0559%" y="565" width="0.2517%" height="15" fill="rgb(235,163,25)" fg:x="81361" fg:w="310"/><text x="66.3059%" y="575.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (246 samples, 0.20%)</title><rect x="66.4439%" y="661" width="0.1997%" height="15" fill="rgb(217,145,28)" fg:x="81839" fg:w="246"/><text x="66.6939%" y="671.50"></text></g><g><title>core::mem::replace (246 samples, 0.20%)</title><rect x="66.4439%" y="645" width="0.1997%" height="15" fill="rgb(223,223,32)" fg:x="81839" fg:w="246"/><text x="66.6939%" y="655.50"></text></g><g><title>core::ptr::read (246 samples, 0.20%)</title><rect x="66.4439%" y="629" width="0.1997%" height="15" fill="rgb(227,189,39)" fg:x="81839" fg:w="246"/><text x="66.6939%" y="639.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (364 samples, 0.30%)</title><rect x="66.3912%" y="677" width="0.2955%" height="15" fill="rgb(248,10,22)" fg:x="81774" fg:w="364"/><text x="66.6412%" y="687.50"></text></g><g><title>core::mem::drop (53 samples, 0.04%)</title><rect x="66.6437%" y="661" width="0.0430%" height="15" fill="rgb(248,46,39)" fg:x="82085" fg:w="53"/><text x="66.8937%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (53 samples, 0.04%)</title><rect x="66.6437%" y="645" width="0.0430%" height="15" fill="rgb(248,113,48)" fg:x="82085" fg:w="53"/><text x="66.8937%" y="655.50"></text></g><g><title>&lt;event_listener::ListGuard as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="66.6867%" y="661" width="0.0122%" height="15" fill="rgb(245,16,25)" fg:x="82138" fg:w="15"/><text x="66.9367%" y="671.50"></text></g><g><title>std::sync::poison::Flag::done (17 samples, 0.01%)</title><rect x="66.7054%" y="629" width="0.0138%" height="15" fill="rgb(249,152,16)" fg:x="82161" fg:w="17"/><text x="66.9554%" y="639.50"></text></g><g><title>std::thread::panicking (16 samples, 0.01%)</title><rect x="66.7062%" y="613" width="0.0130%" height="15" fill="rgb(250,16,1)" fg:x="82162" fg:w="16"/><text x="66.9562%" y="623.50"></text></g><g><title>std::panicking::panicking (16 samples, 0.01%)</title><rect x="66.7062%" y="597" width="0.0130%" height="15" fill="rgb(249,138,3)" fg:x="82162" fg:w="16"/><text x="66.9562%" y="607.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (16 samples, 0.01%)</title><rect x="66.7062%" y="581" width="0.0130%" height="15" fill="rgb(227,71,41)" fg:x="82162" fg:w="16"/><text x="66.9562%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (319 samples, 0.26%)</title><rect x="66.6867%" y="677" width="0.2590%" height="15" fill="rgb(209,184,23)" fg:x="82138" fg:w="319"/><text x="66.9367%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (304 samples, 0.25%)</title><rect x="66.6989%" y="661" width="0.2468%" height="15" fill="rgb(223,215,31)" fg:x="82153" fg:w="304"/><text x="66.9489%" y="671.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (304 samples, 0.25%)</title><rect x="66.6989%" y="645" width="0.2468%" height="15" fill="rgb(210,146,28)" fg:x="82153" fg:w="304"/><text x="66.9489%" y="655.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (279 samples, 0.23%)</title><rect x="66.7192%" y="629" width="0.2265%" height="15" fill="rgb(209,183,41)" fg:x="82178" fg:w="279"/><text x="66.9692%" y="639.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (279 samples, 0.23%)</title><rect x="66.7192%" y="613" width="0.2265%" height="15" fill="rgb(209,224,45)" fg:x="82178" fg:w="279"/><text x="66.9692%" y="623.50"></text></g><g><title>__GI___pthread_mutex_unlock (263 samples, 0.21%)</title><rect x="66.7322%" y="597" width="0.2135%" height="15" fill="rgb(224,209,51)" fg:x="82194" fg:w="263"/><text x="66.9822%" y="607.50"></text></g><g><title>core::task::wake::Waker::will_wake (48 samples, 0.04%)</title><rect x="66.9465%" y="677" width="0.0390%" height="15" fill="rgb(223,17,39)" fg:x="82458" fg:w="48"/><text x="67.1965%" y="687.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (48 samples, 0.04%)</title><rect x="66.9465%" y="661" width="0.0390%" height="15" fill="rgb(234,204,37)" fg:x="82458" fg:w="48"/><text x="67.1965%" y="671.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (35 samples, 0.03%)</title><rect x="66.9571%" y="645" width="0.0284%" height="15" fill="rgb(236,120,5)" fg:x="82471" fg:w="35"/><text x="67.2071%" y="655.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (35 samples, 0.03%)</title><rect x="66.9571%" y="629" width="0.0284%" height="15" fill="rgb(248,97,27)" fg:x="82471" fg:w="35"/><text x="67.2071%" y="639.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (10,620 samples, 8.62%)</title><rect x="59.6907%" y="869" width="8.6222%" height="15" fill="rgb(240,66,17)" fg:x="73521" fg:w="10620"/><text x="59.9407%" y="879.50">std::thread:..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (10,608 samples, 8.61%)</title><rect x="59.7004%" y="853" width="8.6125%" height="15" fill="rgb(210,79,3)" fg:x="73533" fg:w="10608"/><text x="59.9504%" y="863.50">std::thread:..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (10,597 samples, 8.60%)</title><rect x="59.7093%" y="837" width="8.6036%" height="15" fill="rgb(214,176,27)" fg:x="73544" fg:w="10597"/><text x="59.9593%" y="847.50">async_std::t..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (10,597 samples, 8.60%)</title><rect x="59.7093%" y="821" width="8.6036%" height="15" fill="rgb(235,185,3)" fg:x="73544" fg:w="10597"/><text x="59.9593%" y="831.50">&lt;async_std::..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,597 samples, 8.60%)</title><rect x="59.7093%" y="805" width="8.6036%" height="15" fill="rgb(227,24,12)" fg:x="73544" fg:w="10597"/><text x="59.9593%" y="815.50">&lt;core::futur..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (2,470 samples, 2.01%)</title><rect x="66.3075%" y="789" width="2.0054%" height="15" fill="rgb(252,169,48)" fg:x="81671" fg:w="2470"/><text x="66.5575%" y="799.50">t..</text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,470 samples, 2.01%)</title><rect x="66.3075%" y="773" width="2.0054%" height="15" fill="rgb(212,65,1)" fg:x="81671" fg:w="2470"/><text x="66.5575%" y="783.50">&lt;..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (2,470 samples, 2.01%)</title><rect x="66.3075%" y="757" width="2.0054%" height="15" fill="rgb(242,39,24)" fg:x="81671" fg:w="2470"/><text x="66.5575%" y="767.50">&lt;..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (2,470 samples, 2.01%)</title><rect x="66.3075%" y="741" width="2.0054%" height="15" fill="rgb(249,32,23)" fg:x="81671" fg:w="2470"/><text x="66.5575%" y="751.50">&lt;..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (2,470 samples, 2.01%)</title><rect x="66.3075%" y="725" width="2.0054%" height="15" fill="rgb(251,195,23)" fg:x="81671" fg:w="2470"/><text x="66.5575%" y="735.50">&lt;..</text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (2,470 samples, 2.01%)</title><rect x="66.3075%" y="709" width="2.0054%" height="15" fill="rgb(236,174,8)" fg:x="81671" fg:w="2470"/><text x="66.5575%" y="719.50">&lt;..</text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (2,470 samples, 2.01%)</title><rect x="66.3075%" y="693" width="2.0054%" height="15" fill="rgb(220,197,8)" fg:x="81671" fg:w="2470"/><text x="66.5575%" y="703.50">&lt;..</text></g><g><title>event_listener::Inner::lock (1,635 samples, 1.33%)</title><rect x="66.9855%" y="677" width="1.3274%" height="15" fill="rgb(240,108,37)" fg:x="82506" fg:w="1635"/><text x="67.2355%" y="687.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (1,620 samples, 1.32%)</title><rect x="66.9976%" y="661" width="1.3153%" height="15" fill="rgb(232,176,24)" fg:x="82521" fg:w="1620"/><text x="67.2476%" y="671.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (1,611 samples, 1.31%)</title><rect x="67.0050%" y="645" width="1.3079%" height="15" fill="rgb(243,35,29)" fg:x="82530" fg:w="1611"/><text x="67.2550%" y="655.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (1,569 samples, 1.27%)</title><rect x="67.0391%" y="629" width="1.2738%" height="15" fill="rgb(210,37,18)" fg:x="82572" fg:w="1569"/><text x="67.2891%" y="639.50"></text></g><g><title>__GI___pthread_mutex_lock (1,569 samples, 1.27%)</title><rect x="67.0391%" y="613" width="1.2738%" height="15" fill="rgb(224,184,40)" fg:x="82572" fg:w="1569"/><text x="67.2891%" y="623.50"></text></g><g><title>tremor_common::time::nanotime (26 samples, 0.02%)</title><rect x="68.3137%" y="869" width="0.0211%" height="15" fill="rgb(236,39,29)" fg:x="84142" fg:w="26"/><text x="68.5637%" y="879.50"></text></g><g><title>std::time::SystemTime::now (26 samples, 0.02%)</title><rect x="68.3137%" y="853" width="0.0211%" height="15" fill="rgb(232,48,39)" fg:x="84142" fg:w="26"/><text x="68.5637%" y="863.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (26 samples, 0.02%)</title><rect x="68.3137%" y="837" width="0.0211%" height="15" fill="rgb(236,34,42)" fg:x="84142" fg:w="26"/><text x="68.5637%" y="847.50"></text></g><g><title>std::sys::unix::time::inner::now (26 samples, 0.02%)</title><rect x="68.3137%" y="821" width="0.0211%" height="15" fill="rgb(243,106,37)" fg:x="84142" fg:w="26"/><text x="68.5637%" y="831.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (16 samples, 0.01%)</title><rect x="68.3348%" y="869" width="0.0130%" height="15" fill="rgb(218,96,6)" fg:x="84168" fg:w="16"/><text x="68.5848%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (20 samples, 0.02%)</title><rect x="68.3852%" y="725" width="0.0162%" height="15" fill="rgb(235,130,12)" fg:x="84230" fg:w="20"/><text x="68.6352%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_add (20 samples, 0.02%)</title><rect x="68.3852%" y="709" width="0.0162%" height="15" fill="rgb(231,95,0)" fg:x="84230" fg:w="20"/><text x="68.6352%" y="719.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (23 samples, 0.02%)</title><rect x="68.3835%" y="757" width="0.0187%" height="15" fill="rgb(228,12,23)" fg:x="84228" fg:w="23"/><text x="68.6335%" y="767.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (21 samples, 0.02%)</title><rect x="68.3852%" y="741" width="0.0170%" height="15" fill="rgb(216,12,1)" fg:x="84230" fg:w="21"/><text x="68.6352%" y="751.50"></text></g><g><title>core::mem::drop (18 samples, 0.01%)</title><rect x="68.4046%" y="757" width="0.0146%" height="15" fill="rgb(219,59,3)" fg:x="84254" fg:w="18"/><text x="68.6546%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (18 samples, 0.01%)</title><rect x="68.4046%" y="741" width="0.0146%" height="15" fill="rgb(215,208,46)" fg:x="84254" fg:w="18"/><text x="68.6546%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (16 samples, 0.01%)</title><rect x="68.4063%" y="725" width="0.0130%" height="15" fill="rgb(254,224,29)" fg:x="84256" fg:w="16"/><text x="68.6563%" y="735.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="68.4063%" y="709" width="0.0130%" height="15" fill="rgb(232,14,29)" fg:x="84256" fg:w="16"/><text x="68.6563%" y="719.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (16 samples, 0.01%)</title><rect x="68.4063%" y="693" width="0.0130%" height="15" fill="rgb(208,45,52)" fg:x="84256" fg:w="16"/><text x="68.6563%" y="703.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (16 samples, 0.01%)</title><rect x="68.4063%" y="677" width="0.0130%" height="15" fill="rgb(234,191,28)" fg:x="84256" fg:w="16"/><text x="68.6563%" y="687.50"></text></g><g><title>__GI___pthread_mutex_unlock (16 samples, 0.01%)</title><rect x="68.4063%" y="661" width="0.0130%" height="15" fill="rgb(244,67,43)" fg:x="84256" fg:w="16"/><text x="68.6563%" y="671.50"></text></g><g><title>event_listener::Inner::lock (175 samples, 0.14%)</title><rect x="68.4298%" y="757" width="0.1421%" height="15" fill="rgb(236,189,24)" fg:x="84285" fg:w="175"/><text x="68.6798%" y="767.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (174 samples, 0.14%)</title><rect x="68.4306%" y="741" width="0.1413%" height="15" fill="rgb(239,214,33)" fg:x="84286" fg:w="174"/><text x="68.6806%" y="751.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (171 samples, 0.14%)</title><rect x="68.4331%" y="725" width="0.1388%" height="15" fill="rgb(226,176,41)" fg:x="84289" fg:w="171"/><text x="68.6831%" y="735.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (127 samples, 0.10%)</title><rect x="68.4688%" y="709" width="0.1031%" height="15" fill="rgb(248,47,8)" fg:x="84333" fg:w="127"/><text x="68.7188%" y="719.50"></text></g><g><title>__GI___pthread_mutex_lock (127 samples, 0.10%)</title><rect x="68.4688%" y="693" width="0.1031%" height="15" fill="rgb(218,81,44)" fg:x="84333" fg:w="127"/><text x="68.7188%" y="703.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (277 samples, 0.22%)</title><rect x="68.3754%" y="773" width="0.2249%" height="15" fill="rgb(213,98,6)" fg:x="84218" fg:w="277"/><text x="68.6254%" y="783.50"></text></g><g><title>event_listener::List::remove (35 samples, 0.03%)</title><rect x="68.5719%" y="757" width="0.0284%" height="15" fill="rgb(222,85,22)" fg:x="84460" fg:w="35"/><text x="68.8219%" y="767.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (24 samples, 0.02%)</title><rect x="68.5808%" y="741" width="0.0195%" height="15" fill="rgb(239,46,39)" fg:x="84471" fg:w="24"/><text x="68.8308%" y="751.50"></text></g><g><title>core::mem::replace (24 samples, 0.02%)</title><rect x="68.5808%" y="725" width="0.0195%" height="15" fill="rgb(237,12,29)" fg:x="84471" fg:w="24"/><text x="68.8308%" y="735.50"></text></g><g><title>core::ptr::read (24 samples, 0.02%)</title><rect x="68.5808%" y="709" width="0.0195%" height="15" fill="rgb(214,77,8)" fg:x="84471" fg:w="24"/><text x="68.8308%" y="719.50"></text></g><g><title>[libc-2.31.so] (637 samples, 0.52%)</title><rect x="68.6003%" y="773" width="0.5172%" height="15" fill="rgb(217,168,37)" fg:x="84495" fg:w="637"/><text x="68.8503%" y="783.50"></text></g><g><title>[libc-2.31.so] (1,112 samples, 0.90%)</title><rect x="69.1548%" y="757" width="0.9028%" height="15" fill="rgb(221,217,23)" fg:x="85178" fg:w="1112"/><text x="69.4048%" y="767.50"></text></g><g><title>[libc-2.31.so] (249 samples, 0.20%)</title><rect x="70.2363%" y="725" width="0.2022%" height="15" fill="rgb(243,229,36)" fg:x="86510" fg:w="249"/><text x="70.4863%" y="735.50"></text></g><g><title>concurrent_queue::full_fence (75 samples, 0.06%)</title><rect x="70.4384%" y="725" width="0.0609%" height="15" fill="rgb(251,163,40)" fg:x="86759" fg:w="75"/><text x="70.6884%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (69 samples, 0.06%)</title><rect x="70.4433%" y="709" width="0.0560%" height="15" fill="rgb(237,222,12)" fg:x="86765" fg:w="69"/><text x="70.6933%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (69 samples, 0.06%)</title><rect x="70.4433%" y="693" width="0.0560%" height="15" fill="rgb(248,132,6)" fg:x="86765" fg:w="69"/><text x="70.6933%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (69 samples, 0.06%)</title><rect x="70.4433%" y="677" width="0.0560%" height="15" fill="rgb(227,167,50)" fg:x="86765" fg:w="69"/><text x="70.6933%" y="687.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (15 samples, 0.01%)</title><rect x="70.4993%" y="725" width="0.0122%" height="15" fill="rgb(242,84,37)" fg:x="86834" fg:w="15"/><text x="70.7493%" y="735.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (596 samples, 0.48%)</title><rect x="70.5115%" y="725" width="0.4839%" height="15" fill="rgb(212,4,50)" fg:x="86849" fg:w="596"/><text x="70.7615%" y="735.50"></text></g><g><title>core::ptr::read (596 samples, 0.48%)</title><rect x="70.5115%" y="709" width="0.4839%" height="15" fill="rgb(230,228,32)" fg:x="86849" fg:w="596"/><text x="70.7615%" y="719.50"></text></g><g><title>[libc-2.31.so] (596 samples, 0.48%)</title><rect x="70.5115%" y="693" width="0.4839%" height="15" fill="rgb(248,217,23)" fg:x="86849" fg:w="596"/><text x="70.7615%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (924 samples, 0.75%)</title><rect x="70.9954%" y="725" width="0.7502%" height="15" fill="rgb(238,197,32)" fg:x="87445" fg:w="924"/><text x="71.2454%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (924 samples, 0.75%)</title><rect x="70.9954%" y="709" width="0.7502%" height="15" fill="rgb(236,106,1)" fg:x="87445" fg:w="924"/><text x="71.2454%" y="719.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (2,363 samples, 1.92%)</title><rect x="70.0576%" y="757" width="1.9185%" height="15" fill="rgb(219,228,13)" fg:x="86290" fg:w="2363"/><text x="70.3076%" y="767.50">c..</text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (2,322 samples, 1.89%)</title><rect x="70.0909%" y="741" width="1.8852%" height="15" fill="rgb(238,30,35)" fg:x="86331" fg:w="2322"/><text x="70.3409%" y="751.50">c..</text></g><g><title>core::sync::atomic::AtomicUsize::load (284 samples, 0.23%)</title><rect x="71.7456%" y="725" width="0.2306%" height="15" fill="rgb(236,70,23)" fg:x="88369" fg:w="284"/><text x="71.9956%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_load (278 samples, 0.23%)</title><rect x="71.7504%" y="709" width="0.2257%" height="15" fill="rgb(249,104,48)" fg:x="88375" fg:w="278"/><text x="72.0004%" y="719.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (3,884 samples, 3.15%)</title><rect x="69.1175%" y="773" width="3.1534%" height="15" fill="rgb(254,117,50)" fg:x="85132" fg:w="3884"/><text x="69.3675%" y="783.50">asy..</text></g><g><title>event_listener::Event::notify (363 samples, 0.29%)</title><rect x="71.9761%" y="757" width="0.2947%" height="15" fill="rgb(223,152,4)" fg:x="88653" fg:w="363"/><text x="72.2261%" y="767.50"></text></g><g><title>event_listener::full_fence (355 samples, 0.29%)</title><rect x="71.9826%" y="741" width="0.2882%" height="15" fill="rgb(245,6,2)" fg:x="88661" fg:w="355"/><text x="72.2326%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (355 samples, 0.29%)</title><rect x="71.9826%" y="725" width="0.2882%" height="15" fill="rgb(249,150,24)" fg:x="88661" fg:w="355"/><text x="72.2326%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (355 samples, 0.29%)</title><rect x="71.9826%" y="709" width="0.2882%" height="15" fill="rgb(228,185,42)" fg:x="88661" fg:w="355"/><text x="72.2326%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (48 samples, 0.04%)</title><rect x="72.2765%" y="773" width="0.0390%" height="15" fill="rgb(226,39,33)" fg:x="89023" fg:w="48"/><text x="72.5265%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (41 samples, 0.03%)</title><rect x="72.2822%" y="757" width="0.0333%" height="15" fill="rgb(221,166,19)" fg:x="89030" fg:w="41"/><text x="72.5322%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (31 samples, 0.03%)</title><rect x="72.2903%" y="741" width="0.0252%" height="15" fill="rgb(209,109,2)" fg:x="89040" fg:w="31"/><text x="72.5403%" y="751.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.03%)</title><rect x="72.2903%" y="725" width="0.0252%" height="15" fill="rgb(252,216,26)" fg:x="89040" fg:w="31"/><text x="72.5403%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (31 samples, 0.03%)</title><rect x="72.2903%" y="709" width="0.0252%" height="15" fill="rgb(227,173,36)" fg:x="89040" fg:w="31"/><text x="72.5403%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_sub (31 samples, 0.03%)</title><rect x="72.2903%" y="693" width="0.0252%" height="15" fill="rgb(209,90,7)" fg:x="89040" fg:w="31"/><text x="72.5403%" y="703.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (42 samples, 0.03%)</title><rect x="72.3171%" y="757" width="0.0341%" height="15" fill="rgb(250,194,11)" fg:x="89073" fg:w="42"/><text x="72.5671%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (42 samples, 0.03%)</title><rect x="72.3171%" y="741" width="0.0341%" height="15" fill="rgb(220,72,50)" fg:x="89073" fg:w="42"/><text x="72.5671%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_add (42 samples, 0.03%)</title><rect x="72.3171%" y="725" width="0.0341%" height="15" fill="rgb(222,106,48)" fg:x="89073" fg:w="42"/><text x="72.5671%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (24 samples, 0.02%)</title><rect x="72.3512%" y="757" width="0.0195%" height="15" fill="rgb(216,220,45)" fg:x="89115" fg:w="24"/><text x="72.6012%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (24 samples, 0.02%)</title><rect x="72.3512%" y="741" width="0.0195%" height="15" fill="rgb(234,112,18)" fg:x="89115" fg:w="24"/><text x="72.6012%" y="751.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.02%)</title><rect x="72.3512%" y="725" width="0.0195%" height="15" fill="rgb(206,179,9)" fg:x="89115" fg:w="24"/><text x="72.6012%" y="735.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (23 samples, 0.02%)</title><rect x="72.3520%" y="709" width="0.0187%" height="15" fill="rgb(215,115,40)" fg:x="89116" fg:w="23"/><text x="72.6020%" y="719.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (22 samples, 0.02%)</title><rect x="72.3528%" y="693" width="0.0179%" height="15" fill="rgb(222,69,34)" fg:x="89117" fg:w="22"/><text x="72.6028%" y="703.50"></text></g><g><title>__GI___pthread_mutex_unlock (22 samples, 0.02%)</title><rect x="72.3528%" y="677" width="0.0179%" height="15" fill="rgb(209,161,10)" fg:x="89117" fg:w="22"/><text x="72.6028%" y="687.50"></text></g><g><title>event_listener::Inner::lock (42 samples, 0.03%)</title><rect x="72.3707%" y="757" width="0.0341%" height="15" fill="rgb(217,6,38)" fg:x="89139" fg:w="42"/><text x="72.6207%" y="767.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (41 samples, 0.03%)</title><rect x="72.3715%" y="741" width="0.0333%" height="15" fill="rgb(229,229,48)" fg:x="89140" fg:w="41"/><text x="72.6215%" y="751.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (40 samples, 0.03%)</title><rect x="72.3723%" y="725" width="0.0325%" height="15" fill="rgb(225,21,28)" fg:x="89141" fg:w="40"/><text x="72.6223%" y="735.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (40 samples, 0.03%)</title><rect x="72.3723%" y="709" width="0.0325%" height="15" fill="rgb(206,33,13)" fg:x="89141" fg:w="40"/><text x="72.6223%" y="719.50"></text></g><g><title>__GI___pthread_mutex_lock (40 samples, 0.03%)</title><rect x="72.3723%" y="693" width="0.0325%" height="15" fill="rgb(242,178,17)" fg:x="89141" fg:w="40"/><text x="72.6223%" y="703.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,018 samples, 4.07%)</title><rect x="68.3478%" y="853" width="4.0740%" height="15" fill="rgb(220,162,5)" fg:x="84184" fg:w="5018"/><text x="68.5978%" y="863.50">&lt;asy..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (5,018 samples, 4.07%)</title><rect x="68.3478%" y="837" width="4.0740%" height="15" fill="rgb(210,33,43)" fg:x="84184" fg:w="5018"/><text x="68.5978%" y="847.50">&lt;tre..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (5,018 samples, 4.07%)</title><rect x="68.3478%" y="821" width="4.0740%" height="15" fill="rgb(216,116,54)" fg:x="84184" fg:w="5018"/><text x="68.5978%" y="831.50">&lt;asy..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (5,018 samples, 4.07%)</title><rect x="68.3478%" y="805" width="4.0740%" height="15" fill="rgb(249,92,24)" fg:x="84184" fg:w="5018"/><text x="68.5978%" y="815.50">&lt;asy..</text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (5,018 samples, 4.07%)</title><rect x="68.3478%" y="789" width="4.0740%" height="15" fill="rgb(231,189,14)" fg:x="84184" fg:w="5018"/><text x="68.5978%" y="799.50">&lt;asy..</text></g><g><title>event_listener::Event::listen (131 samples, 0.11%)</title><rect x="72.3155%" y="773" width="0.1064%" height="15" fill="rgb(230,8,41)" fg:x="89071" fg:w="131"/><text x="72.5655%" y="783.50"></text></g><g><title>event_listener::full_fence (19 samples, 0.02%)</title><rect x="72.4064%" y="757" width="0.0154%" height="15" fill="rgb(249,7,27)" fg:x="89183" fg:w="19"/><text x="72.6564%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (19 samples, 0.02%)</title><rect x="72.4064%" y="741" width="0.0154%" height="15" fill="rgb(232,86,5)" fg:x="89183" fg:w="19"/><text x="72.6564%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (19 samples, 0.02%)</title><rect x="72.4064%" y="725" width="0.0154%" height="15" fill="rgb(224,175,18)" fg:x="89183" fg:w="19"/><text x="72.6564%" y="735.50"></text></g><g><title>alloc::alloc::exchange_malloc (53 samples, 0.04%)</title><rect x="72.4616%" y="485" width="0.0430%" height="15" fill="rgb(220,129,12)" fg:x="89251" fg:w="53"/><text x="72.7116%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (53 samples, 0.04%)</title><rect x="72.4616%" y="469" width="0.0430%" height="15" fill="rgb(210,19,36)" fg:x="89251" fg:w="53"/><text x="72.7116%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (53 samples, 0.04%)</title><rect x="72.4616%" y="453" width="0.0430%" height="15" fill="rgb(219,96,14)" fg:x="89251" fg:w="53"/><text x="72.7116%" y="463.50"></text></g><g><title>alloc::alloc::alloc (45 samples, 0.04%)</title><rect x="72.4681%" y="437" width="0.0365%" height="15" fill="rgb(249,106,1)" fg:x="89259" fg:w="45"/><text x="72.7181%" y="447.50"></text></g><g><title>__rg_alloc (45 samples, 0.04%)</title><rect x="72.4681%" y="421" width="0.0365%" height="15" fill="rgb(249,155,20)" fg:x="89259" fg:w="45"/><text x="72.7181%" y="431.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (45 samples, 0.04%)</title><rect x="72.4681%" y="405" width="0.0365%" height="15" fill="rgb(244,168,9)" fg:x="89259" fg:w="45"/><text x="72.7181%" y="415.50"></text></g><g><title>sn_rust_alloc (45 samples, 0.04%)</title><rect x="72.4681%" y="389" width="0.0365%" height="15" fill="rgb(216,23,50)" fg:x="89259" fg:w="45"/><text x="72.7181%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="72.5104%" y="485" width="0.0106%" height="15" fill="rgb(224,219,20)" fg:x="89311" fg:w="13"/><text x="72.7604%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="72.5104%" y="469" width="0.0106%" height="15" fill="rgb(222,156,15)" fg:x="89311" fg:w="13"/><text x="72.7604%" y="479.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="72.5104%" y="453" width="0.0106%" height="15" fill="rgb(231,97,17)" fg:x="89311" fg:w="13"/><text x="72.7604%" y="463.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (38 samples, 0.03%)</title><rect x="72.5493%" y="469" width="0.0309%" height="15" fill="rgb(218,70,48)" fg:x="89359" fg:w="38"/><text x="72.7993%" y="479.50"></text></g><g><title>core::time::Duration::as_nanos (29 samples, 0.02%)</title><rect x="72.5802%" y="469" width="0.0235%" height="15" fill="rgb(212,196,52)" fg:x="89397" fg:w="29"/><text x="72.8302%" y="479.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (144 samples, 0.12%)</title><rect x="72.6037%" y="453" width="0.1169%" height="15" fill="rgb(243,203,18)" fg:x="89426" fg:w="144"/><text x="72.8537%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (60 samples, 0.05%)</title><rect x="72.7564%" y="421" width="0.0487%" height="15" fill="rgb(252,125,41)" fg:x="89614" fg:w="60"/><text x="73.0064%" y="431.50"></text></g><g><title>core::cmp::PartialOrd::ge (60 samples, 0.05%)</title><rect x="72.7564%" y="405" width="0.0487%" height="15" fill="rgb(223,180,33)" fg:x="89614" fg:w="60"/><text x="73.0064%" y="415.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (55 samples, 0.04%)</title><rect x="72.7604%" y="389" width="0.0447%" height="15" fill="rgb(254,159,46)" fg:x="89619" fg:w="55"/><text x="73.0104%" y="399.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (55 samples, 0.04%)</title><rect x="72.7604%" y="373" width="0.0447%" height="15" fill="rgb(254,38,10)" fg:x="89619" fg:w="55"/><text x="73.0104%" y="383.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (55 samples, 0.04%)</title><rect x="72.7604%" y="357" width="0.0447%" height="15" fill="rgb(208,217,32)" fg:x="89619" fg:w="55"/><text x="73.0104%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (32 samples, 0.03%)</title><rect x="72.7791%" y="341" width="0.0260%" height="15" fill="rgb(221,120,13)" fg:x="89642" fg:w="32"/><text x="73.0291%" y="351.50"></text></g><g><title>std::time::SystemTime::duration_since (273 samples, 0.22%)</title><rect x="72.6037%" y="469" width="0.2216%" height="15" fill="rgb(246,54,52)" fg:x="89426" fg:w="273"/><text x="72.8537%" y="479.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (129 samples, 0.10%)</title><rect x="72.7206%" y="453" width="0.1047%" height="15" fill="rgb(242,34,25)" fg:x="89570" fg:w="129"/><text x="72.9706%" y="463.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (129 samples, 0.10%)</title><rect x="72.7206%" y="437" width="0.1047%" height="15" fill="rgb(247,209,9)" fg:x="89570" fg:w="129"/><text x="72.9706%" y="447.50"></text></g><g><title>core::time::Duration::new (25 samples, 0.02%)</title><rect x="72.8051%" y="421" width="0.0203%" height="15" fill="rgb(228,71,26)" fg:x="89674" fg:w="25"/><text x="73.0551%" y="431.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,132 samples, 0.92%)</title><rect x="72.4219%" y="853" width="0.9191%" height="15" fill="rgb(222,145,49)" fg:x="89202" fg:w="1132"/><text x="72.6719%" y="863.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (1,132 samples, 0.92%)</title><rect x="72.4219%" y="837" width="0.9191%" height="15" fill="rgb(218,121,17)" fg:x="89202" fg:w="1132"/><text x="72.6719%" y="847.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,132 samples, 0.92%)</title><rect x="72.4219%" y="821" width="0.9191%" height="15" fill="rgb(244,50,7)" fg:x="89202" fg:w="1132"/><text x="72.6719%" y="831.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,132 samples, 0.92%)</title><rect x="72.4219%" y="805" width="0.9191%" height="15" fill="rgb(246,229,37)" fg:x="89202" fg:w="1132"/><text x="72.6719%" y="815.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (1,132 samples, 0.92%)</title><rect x="72.4219%" y="789" width="0.9191%" height="15" fill="rgb(225,18,5)" fg:x="89202" fg:w="1132"/><text x="72.6719%" y="799.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,132 samples, 0.92%)</title><rect x="72.4219%" y="773" width="0.9191%" height="15" fill="rgb(213,204,8)" fg:x="89202" fg:w="1132"/><text x="72.6719%" y="783.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (1,132 samples, 0.92%)</title><rect x="72.4219%" y="757" width="0.9191%" height="15" fill="rgb(238,103,6)" fg:x="89202" fg:w="1132"/><text x="72.6719%" y="767.50"></text></g><g><title>std::panic::catch_unwind (1,132 samples, 0.92%)</title><rect x="72.4219%" y="741" width="0.9191%" height="15" fill="rgb(222,25,35)" fg:x="89202" fg:w="1132"/><text x="72.6719%" y="751.50"></text></g><g><title>std::panicking::try (1,132 samples, 0.92%)</title><rect x="72.4219%" y="725" width="0.9191%" height="15" fill="rgb(213,203,35)" fg:x="89202" fg:w="1132"/><text x="72.6719%" y="735.50"></text></g><g><title>std::panicking::try::do_call (1,132 samples, 0.92%)</title><rect x="72.4219%" y="709" width="0.9191%" height="15" fill="rgb(221,79,53)" fg:x="89202" fg:w="1132"/><text x="72.6719%" y="719.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,132 samples, 0.92%)</title><rect x="72.4219%" y="693" width="0.9191%" height="15" fill="rgb(243,200,35)" fg:x="89202" fg:w="1132"/><text x="72.6719%" y="703.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1,132 samples, 0.92%)</title><rect x="72.4219%" y="677" width="0.9191%" height="15" fill="rgb(248,60,25)" fg:x="89202" fg:w="1132"/><text x="72.6719%" y="687.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (1,132 samples, 0.92%)</title><rect x="72.4219%" y="661" width="0.9191%" height="15" fill="rgb(227,53,46)" fg:x="89202" fg:w="1132"/><text x="72.6719%" y="671.50"></text></g><g><title>async_ffi::FfiContext::with_context (1,132 samples, 0.92%)</title><rect x="72.4219%" y="645" width="0.9191%" height="15" fill="rgb(216,120,32)" fg:x="89202" fg:w="1132"/><text x="72.6719%" y="655.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (1,132 samples, 0.92%)</title><rect x="72.4219%" y="629" width="0.9191%" height="15" fill="rgb(220,134,1)" fg:x="89202" fg:w="1132"/><text x="72.6719%" y="639.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,132 samples, 0.92%)</title><rect x="72.4219%" y="613" width="0.9191%" height="15" fill="rgb(237,168,5)" fg:x="89202" fg:w="1132"/><text x="72.6719%" y="623.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (1,132 samples, 0.92%)</title><rect x="72.4219%" y="597" width="0.9191%" height="15" fill="rgb(231,100,33)" fg:x="89202" fg:w="1132"/><text x="72.6719%" y="607.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (1,132 samples, 0.92%)</title><rect x="72.4219%" y="581" width="0.9191%" height="15" fill="rgb(236,177,47)" fg:x="89202" fg:w="1132"/><text x="72.6719%" y="591.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (1,132 samples, 0.92%)</title><rect x="72.4219%" y="565" width="0.9191%" height="15" fill="rgb(235,7,49)" fg:x="89202" fg:w="1132"/><text x="72.6719%" y="575.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (1,132 samples, 0.92%)</title><rect x="72.4219%" y="549" width="0.9191%" height="15" fill="rgb(232,119,22)" fg:x="89202" fg:w="1132"/><text x="72.6719%" y="559.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (1,132 samples, 0.92%)</title><rect x="72.4219%" y="533" width="0.9191%" height="15" fill="rgb(254,73,53)" fg:x="89202" fg:w="1132"/><text x="72.6719%" y="543.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (1,132 samples, 0.92%)</title><rect x="72.4219%" y="517" width="0.9191%" height="15" fill="rgb(251,35,20)" fg:x="89202" fg:w="1132"/><text x="72.6719%" y="527.50"></text></g><g><title>tremor_runtime::postprocessor::postprocess (1,132 samples, 0.92%)</title><rect x="72.4219%" y="501" width="0.9191%" height="15" fill="rgb(241,119,20)" fg:x="89202" fg:w="1132"/><text x="72.6719%" y="511.50"></text></g><g><title>tremor_common::time::nanotime (1,002 samples, 0.81%)</title><rect x="72.5274%" y="485" width="0.8135%" height="15" fill="rgb(207,102,14)" fg:x="89332" fg:w="1002"/><text x="72.7774%" y="495.50"></text></g><g><title>std::time::SystemTime::now (635 samples, 0.52%)</title><rect x="72.8254%" y="469" width="0.5155%" height="15" fill="rgb(248,201,50)" fg:x="89699" fg:w="635"/><text x="73.0754%" y="479.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (635 samples, 0.52%)</title><rect x="72.8254%" y="453" width="0.5155%" height="15" fill="rgb(222,185,44)" fg:x="89699" fg:w="635"/><text x="73.0754%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::now (635 samples, 0.52%)</title><rect x="72.8254%" y="437" width="0.5155%" height="15" fill="rgb(218,107,18)" fg:x="89699" fg:w="635"/><text x="73.0754%" y="447.50"></text></g><g><title>__clock_gettime (516 samples, 0.42%)</title><rect x="72.9220%" y="421" width="0.4189%" height="15" fill="rgb(237,177,39)" fg:x="89818" fg:w="516"/><text x="73.1720%" y="431.50"></text></g><g><title>__vdso_clock_gettime (497 samples, 0.40%)</title><rect x="72.9374%" y="405" width="0.4035%" height="15" fill="rgb(246,69,6)" fg:x="89837" fg:w="497"/><text x="73.1874%" y="415.50"></text></g><g><title>[[vdso]] (433 samples, 0.35%)</title><rect x="72.9894%" y="389" width="0.3515%" height="15" fill="rgb(234,208,37)" fg:x="89901" fg:w="433"/><text x="73.2394%" y="399.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (6,152 samples, 4.99%)</title><rect x="68.3478%" y="869" width="4.9947%" height="15" fill="rgb(225,4,6)" fg:x="84184" fg:w="6152"/><text x="68.5978%" y="879.50">tremor..</text></g><g><title>tremor_runtime::pipeline::maybe_send (16 samples, 0.01%)</title><rect x="73.3555%" y="869" width="0.0130%" height="15" fill="rgb(233,45,0)" fg:x="90352" fg:w="16"/><text x="73.6055%" y="879.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (23 samples, 0.02%)</title><rect x="73.3693%" y="837" width="0.0187%" height="15" fill="rgb(226,136,5)" fg:x="90369" fg:w="23"/><text x="73.6193%" y="847.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (23 samples, 0.02%)</title><rect x="73.3693%" y="821" width="0.0187%" height="15" fill="rgb(211,91,47)" fg:x="90369" fg:w="23"/><text x="73.6193%" y="831.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (13 samples, 0.01%)</title><rect x="73.3774%" y="805" width="0.0106%" height="15" fill="rgb(242,88,51)" fg:x="90379" fg:w="13"/><text x="73.6274%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (64 samples, 0.05%)</title><rect x="73.7030%" y="693" width="0.0520%" height="15" fill="rgb(230,91,28)" fg:x="90780" fg:w="64"/><text x="73.9530%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_add (64 samples, 0.05%)</title><rect x="73.7030%" y="677" width="0.0520%" height="15" fill="rgb(254,186,29)" fg:x="90780" fg:w="64"/><text x="73.9530%" y="687.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (65 samples, 0.05%)</title><rect x="73.7030%" y="725" width="0.0528%" height="15" fill="rgb(238,6,4)" fg:x="90780" fg:w="65"/><text x="73.9530%" y="735.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (65 samples, 0.05%)</title><rect x="73.7030%" y="709" width="0.0528%" height="15" fill="rgb(221,151,16)" fg:x="90780" fg:w="65"/><text x="73.9530%" y="719.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (31 samples, 0.03%)</title><rect x="73.7558%" y="725" width="0.0252%" height="15" fill="rgb(251,143,52)" fg:x="90845" fg:w="31"/><text x="74.0058%" y="735.50"></text></g><g><title>core::mem::replace (31 samples, 0.03%)</title><rect x="73.7558%" y="709" width="0.0252%" height="15" fill="rgb(206,90,15)" fg:x="90845" fg:w="31"/><text x="74.0058%" y="719.50"></text></g><g><title>core::ptr::read (31 samples, 0.03%)</title><rect x="73.7558%" y="693" width="0.0252%" height="15" fill="rgb(218,35,8)" fg:x="90845" fg:w="31"/><text x="74.0058%" y="703.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (257 samples, 0.21%)</title><rect x="73.8378%" y="709" width="0.2087%" height="15" fill="rgb(239,215,6)" fg:x="90946" fg:w="257"/><text x="74.0878%" y="719.50"></text></g><g><title>core::mem::replace (257 samples, 0.21%)</title><rect x="73.8378%" y="693" width="0.2087%" height="15" fill="rgb(245,116,39)" fg:x="90946" fg:w="257"/><text x="74.0878%" y="703.50"></text></g><g><title>core::ptr::read (257 samples, 0.21%)</title><rect x="73.8378%" y="677" width="0.2087%" height="15" fill="rgb(242,65,28)" fg:x="90946" fg:w="257"/><text x="74.0878%" y="687.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (393 samples, 0.32%)</title><rect x="73.7810%" y="725" width="0.3191%" height="15" fill="rgb(252,132,53)" fg:x="90876" fg:w="393"/><text x="74.0310%" y="735.50"></text></g><g><title>core::mem::drop (66 samples, 0.05%)</title><rect x="74.0464%" y="709" width="0.0536%" height="15" fill="rgb(224,159,50)" fg:x="91203" fg:w="66"/><text x="74.2964%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (66 samples, 0.05%)</title><rect x="74.0464%" y="693" width="0.0536%" height="15" fill="rgb(224,93,4)" fg:x="91203" fg:w="66"/><text x="74.2964%" y="703.50"></text></g><g><title>core::mem::drop (90 samples, 0.07%)</title><rect x="74.1000%" y="725" width="0.0731%" height="15" fill="rgb(208,81,34)" fg:x="91269" fg:w="90"/><text x="74.3500%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (90 samples, 0.07%)</title><rect x="74.1000%" y="709" width="0.0731%" height="15" fill="rgb(233,92,54)" fg:x="91269" fg:w="90"/><text x="74.3500%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (86 samples, 0.07%)</title><rect x="74.1033%" y="693" width="0.0698%" height="15" fill="rgb(237,21,14)" fg:x="91273" fg:w="86"/><text x="74.3533%" y="703.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (86 samples, 0.07%)</title><rect x="74.1033%" y="677" width="0.0698%" height="15" fill="rgb(249,128,51)" fg:x="91273" fg:w="86"/><text x="74.3533%" y="687.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (85 samples, 0.07%)</title><rect x="74.1041%" y="661" width="0.0690%" height="15" fill="rgb(223,129,24)" fg:x="91274" fg:w="85"/><text x="74.3541%" y="671.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (83 samples, 0.07%)</title><rect x="74.1057%" y="645" width="0.0674%" height="15" fill="rgb(231,168,25)" fg:x="91276" fg:w="83"/><text x="74.3557%" y="655.50"></text></g><g><title>__GI___pthread_mutex_unlock (83 samples, 0.07%)</title><rect x="74.1057%" y="629" width="0.0674%" height="15" fill="rgb(224,39,20)" fg:x="91276" fg:w="83"/><text x="74.3557%" y="639.50"></text></g><g><title>&lt;event_listener::ListGuard as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="74.1731%" y="709" width="0.0187%" height="15" fill="rgb(225,152,53)" fg:x="91359" fg:w="23"/><text x="74.4231%" y="719.50"></text></g><g><title>std::sync::poison::Flag::done (26 samples, 0.02%)</title><rect x="74.2023%" y="677" width="0.0211%" height="15" fill="rgb(252,17,24)" fg:x="91395" fg:w="26"/><text x="74.4523%" y="687.50"></text></g><g><title>std::thread::panicking (26 samples, 0.02%)</title><rect x="74.2023%" y="661" width="0.0211%" height="15" fill="rgb(250,114,30)" fg:x="91395" fg:w="26"/><text x="74.4523%" y="671.50"></text></g><g><title>std::panicking::panicking (26 samples, 0.02%)</title><rect x="74.2023%" y="645" width="0.0211%" height="15" fill="rgb(229,5,4)" fg:x="91395" fg:w="26"/><text x="74.4523%" y="655.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (26 samples, 0.02%)</title><rect x="74.2023%" y="629" width="0.0211%" height="15" fill="rgb(225,176,49)" fg:x="91395" fg:w="26"/><text x="74.4523%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (485 samples, 0.39%)</title><rect x="74.1731%" y="725" width="0.3938%" height="15" fill="rgb(224,221,49)" fg:x="91359" fg:w="485"/><text x="74.4231%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (462 samples, 0.38%)</title><rect x="74.1918%" y="709" width="0.3751%" height="15" fill="rgb(253,169,27)" fg:x="91382" fg:w="462"/><text x="74.4418%" y="719.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (462 samples, 0.38%)</title><rect x="74.1918%" y="693" width="0.3751%" height="15" fill="rgb(211,206,16)" fg:x="91382" fg:w="462"/><text x="74.4418%" y="703.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (423 samples, 0.34%)</title><rect x="74.2234%" y="677" width="0.3434%" height="15" fill="rgb(244,87,35)" fg:x="91421" fg:w="423"/><text x="74.4734%" y="687.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (421 samples, 0.34%)</title><rect x="74.2251%" y="661" width="0.3418%" height="15" fill="rgb(246,28,10)" fg:x="91423" fg:w="421"/><text x="74.4751%" y="671.50"></text></g><g><title>__GI___pthread_mutex_unlock (402 samples, 0.33%)</title><rect x="74.2405%" y="645" width="0.3264%" height="15" fill="rgb(229,12,44)" fg:x="91442" fg:w="402"/><text x="74.4905%" y="655.50"></text></g><g><title>core::task::wake::Waker::will_wake (52 samples, 0.04%)</title><rect x="74.5709%" y="725" width="0.0422%" height="15" fill="rgb(210,145,37)" fg:x="91849" fg:w="52"/><text x="74.8209%" y="735.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (52 samples, 0.04%)</title><rect x="74.5709%" y="709" width="0.0422%" height="15" fill="rgb(227,112,52)" fg:x="91849" fg:w="52"/><text x="74.8209%" y="719.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (31 samples, 0.03%)</title><rect x="74.5880%" y="693" width="0.0252%" height="15" fill="rgb(238,155,34)" fg:x="91870" fg:w="31"/><text x="74.8380%" y="703.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (31 samples, 0.03%)</title><rect x="74.5880%" y="677" width="0.0252%" height="15" fill="rgb(239,226,36)" fg:x="91870" fg:w="31"/><text x="74.8380%" y="687.50"></text></g><g><title>std::sync::poison::Flag::get (39 samples, 0.03%)</title><rect x="74.6416%" y="661" width="0.0317%" height="15" fill="rgb(230,16,23)" fg:x="91936" fg:w="39"/><text x="74.8916%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (39 samples, 0.03%)</title><rect x="74.6416%" y="645" width="0.0317%" height="15" fill="rgb(236,171,36)" fg:x="91936" fg:w="39"/><text x="74.8916%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_load (38 samples, 0.03%)</title><rect x="74.6424%" y="629" width="0.0309%" height="15" fill="rgb(221,22,14)" fg:x="91937" fg:w="38"/><text x="74.8924%" y="639.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (65 samples, 0.05%)</title><rect x="74.6416%" y="693" width="0.0528%" height="15" fill="rgb(242,43,11)" fg:x="91936" fg:w="65"/><text x="74.8916%" y="703.50"></text></g><g><title>std::sync::poison::Flag::borrow (65 samples, 0.05%)</title><rect x="74.6416%" y="677" width="0.0528%" height="15" fill="rgb(232,69,23)" fg:x="91936" fg:w="65"/><text x="74.8916%" y="687.50"></text></g><g><title>std::thread::panicking (26 samples, 0.02%)</title><rect x="74.6732%" y="661" width="0.0211%" height="15" fill="rgb(216,180,54)" fg:x="91975" fg:w="26"/><text x="74.9232%" y="671.50"></text></g><g><title>std::panicking::panicking (26 samples, 0.02%)</title><rect x="74.6732%" y="645" width="0.0211%" height="15" fill="rgb(216,5,24)" fg:x="91975" fg:w="26"/><text x="74.9232%" y="655.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (26 samples, 0.02%)</title><rect x="74.6732%" y="629" width="0.0211%" height="15" fill="rgb(225,89,9)" fg:x="91975" fg:w="26"/><text x="74.9232%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (25 samples, 0.02%)</title><rect x="74.6740%" y="613" width="0.0203%" height="15" fill="rgb(243,75,33)" fg:x="91976" fg:w="25"/><text x="74.9240%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_load (25 samples, 0.02%)</title><rect x="74.6740%" y="597" width="0.0203%" height="15" fill="rgb(247,141,45)" fg:x="91976" fg:w="25"/><text x="74.9240%" y="607.50"></text></g><g><title>event_listener::Inner::lock (1,036 samples, 0.84%)</title><rect x="74.6131%" y="725" width="0.8411%" height="15" fill="rgb(232,177,36)" fg:x="91901" fg:w="1036"/><text x="74.8631%" y="735.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (1,001 samples, 0.81%)</title><rect x="74.6416%" y="709" width="0.8127%" height="15" fill="rgb(219,125,36)" fg:x="91936" fg:w="1001"/><text x="74.8916%" y="719.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (936 samples, 0.76%)</title><rect x="74.6943%" y="693" width="0.7599%" height="15" fill="rgb(227,94,9)" fg:x="92001" fg:w="936"/><text x="74.9443%" y="703.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (869 samples, 0.71%)</title><rect x="74.7487%" y="677" width="0.7055%" height="15" fill="rgb(240,34,52)" fg:x="92068" fg:w="869"/><text x="74.9987%" y="687.50"></text></g><g><title>__GI___pthread_mutex_lock (869 samples, 0.71%)</title><rect x="74.7487%" y="661" width="0.7055%" height="15" fill="rgb(216,45,12)" fg:x="92068" fg:w="869"/><text x="74.9987%" y="671.50"></text></g><g><title>__lll_lock_wait (138 samples, 0.11%)</title><rect x="75.3422%" y="645" width="0.1120%" height="15" fill="rgb(246,21,19)" fg:x="92799" fg:w="138"/><text x="75.5922%" y="655.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (2,440 samples, 1.98%)</title><rect x="73.6064%" y="741" width="1.9810%" height="15" fill="rgb(213,98,42)" fg:x="90661" fg:w="2440"/><text x="73.8564%" y="751.50">&lt;..</text></g><g><title>event_listener::List::remove (164 samples, 0.13%)</title><rect x="75.4543%" y="725" width="0.1331%" height="15" fill="rgb(250,136,47)" fg:x="92937" fg:w="164"/><text x="75.7043%" y="735.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (125 samples, 0.10%)</title><rect x="75.4859%" y="709" width="0.1015%" height="15" fill="rgb(251,124,27)" fg:x="92976" fg:w="125"/><text x="75.7359%" y="719.50"></text></g><g><title>core::mem::replace (125 samples, 0.10%)</title><rect x="75.4859%" y="693" width="0.1015%" height="15" fill="rgb(229,180,14)" fg:x="92976" fg:w="125"/><text x="75.7359%" y="703.50"></text></g><g><title>core::ptr::read (125 samples, 0.10%)</title><rect x="75.4859%" y="677" width="0.1015%" height="15" fill="rgb(245,216,25)" fg:x="92976" fg:w="125"/><text x="75.7359%" y="687.50"></text></g><g><title>concurrent_queue::full_fence (125 samples, 0.10%)</title><rect x="75.7782%" y="693" width="0.1015%" height="15" fill="rgb(251,43,5)" fg:x="93336" fg:w="125"/><text x="76.0282%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (123 samples, 0.10%)</title><rect x="75.7798%" y="677" width="0.0999%" height="15" fill="rgb(250,128,24)" fg:x="93338" fg:w="123"/><text x="76.0298%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (123 samples, 0.10%)</title><rect x="75.7798%" y="661" width="0.0999%" height="15" fill="rgb(217,117,27)" fg:x="93338" fg:w="123"/><text x="76.0298%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (123 samples, 0.10%)</title><rect x="75.7798%" y="645" width="0.0999%" height="15" fill="rgb(245,147,4)" fg:x="93338" fg:w="123"/><text x="76.0298%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (212 samples, 0.17%)</title><rect x="75.8894%" y="693" width="0.1721%" height="15" fill="rgb(242,201,35)" fg:x="93473" fg:w="212"/><text x="76.1394%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (212 samples, 0.17%)</title><rect x="75.8894%" y="677" width="0.1721%" height="15" fill="rgb(218,181,1)" fg:x="93473" fg:w="212"/><text x="76.1394%" y="687.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (1,007 samples, 0.82%)</title><rect x="75.6166%" y="725" width="0.8176%" height="15" fill="rgb(222,6,29)" fg:x="93137" fg:w="1007"/><text x="75.8666%" y="735.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (960 samples, 0.78%)</title><rect x="75.6548%" y="709" width="0.7794%" height="15" fill="rgb(208,186,3)" fg:x="93184" fg:w="960"/><text x="75.9048%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (459 samples, 0.37%)</title><rect x="76.0615%" y="693" width="0.3727%" height="15" fill="rgb(216,36,26)" fg:x="93685" fg:w="459"/><text x="76.3115%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_load (459 samples, 0.37%)</title><rect x="76.0615%" y="677" width="0.3727%" height="15" fill="rgb(248,201,23)" fg:x="93685" fg:w="459"/><text x="76.3115%" y="687.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (1,984 samples, 1.61%)</title><rect x="75.5874%" y="741" width="1.6108%" height="15" fill="rgb(251,170,31)" fg:x="93101" fg:w="1984"/><text x="75.8374%" y="751.50"></text></g><g><title>event_listener::Event::notify (941 samples, 0.76%)</title><rect x="76.4342%" y="725" width="0.7640%" height="15" fill="rgb(207,110,25)" fg:x="94144" fg:w="941"/><text x="76.6842%" y="735.50"></text></g><g><title>event_listener::full_fence (927 samples, 0.75%)</title><rect x="76.4456%" y="709" width="0.7526%" height="15" fill="rgb(250,54,15)" fg:x="94158" fg:w="927"/><text x="76.6956%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (927 samples, 0.75%)</title><rect x="76.4456%" y="693" width="0.7526%" height="15" fill="rgb(227,68,33)" fg:x="94158" fg:w="927"/><text x="76.6956%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (927 samples, 0.75%)</title><rect x="76.4456%" y="677" width="0.7526%" height="15" fill="rgb(238,34,41)" fg:x="94158" fg:w="927"/><text x="76.6956%" y="687.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (13 samples, 0.01%)</title><rect x="77.1982%" y="741" width="0.0106%" height="15" fill="rgb(220,11,15)" fg:x="95085" fg:w="13"/><text x="77.4482%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (39 samples, 0.03%)</title><rect x="77.2372%" y="693" width="0.0317%" height="15" fill="rgb(246,111,35)" fg:x="95133" fg:w="39"/><text x="77.4872%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (36 samples, 0.03%)</title><rect x="77.2396%" y="677" width="0.0292%" height="15" fill="rgb(209,88,53)" fg:x="95136" fg:w="36"/><text x="77.4896%" y="687.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (36 samples, 0.03%)</title><rect x="77.2396%" y="661" width="0.0292%" height="15" fill="rgb(231,185,47)" fg:x="95136" fg:w="36"/><text x="77.4896%" y="671.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (36 samples, 0.03%)</title><rect x="77.2396%" y="645" width="0.0292%" height="15" fill="rgb(233,154,1)" fg:x="95136" fg:w="36"/><text x="77.4896%" y="655.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (35 samples, 0.03%)</title><rect x="77.2404%" y="629" width="0.0284%" height="15" fill="rgb(225,15,46)" fg:x="95137" fg:w="35"/><text x="77.4904%" y="639.50"></text></g><g><title>__GI___pthread_mutex_unlock (35 samples, 0.03%)</title><rect x="77.2404%" y="613" width="0.0284%" height="15" fill="rgb(211,135,41)" fg:x="95137" fg:w="35"/><text x="77.4904%" y="623.50"></text></g><g><title>event_listener::Inner::lock (99 samples, 0.08%)</title><rect x="77.2688%" y="693" width="0.0804%" height="15" fill="rgb(208,54,0)" fg:x="95172" fg:w="99"/><text x="77.5188%" y="703.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (99 samples, 0.08%)</title><rect x="77.2688%" y="677" width="0.0804%" height="15" fill="rgb(244,136,14)" fg:x="95172" fg:w="99"/><text x="77.5188%" y="687.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (89 samples, 0.07%)</title><rect x="77.2769%" y="661" width="0.0723%" height="15" fill="rgb(241,56,14)" fg:x="95182" fg:w="89"/><text x="77.5269%" y="671.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (81 samples, 0.07%)</title><rect x="77.2834%" y="645" width="0.0658%" height="15" fill="rgb(205,80,24)" fg:x="95190" fg:w="81"/><text x="77.5334%" y="655.50"></text></g><g><title>__GI___pthread_mutex_lock (81 samples, 0.07%)</title><rect x="77.2834%" y="629" width="0.0658%" height="15" fill="rgb(220,57,4)" fg:x="95190" fg:w="81"/><text x="77.5334%" y="639.50"></text></g><g><title>__lll_lock_wait (22 samples, 0.02%)</title><rect x="77.3313%" y="613" width="0.0179%" height="15" fill="rgb(226,193,50)" fg:x="95249" fg:w="22"/><text x="77.5813%" y="623.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (165 samples, 0.13%)</title><rect x="77.2307%" y="709" width="0.1340%" height="15" fill="rgb(231,168,22)" fg:x="95125" fg:w="165"/><text x="77.4807%" y="719.50"></text></g><g><title>event_listener::List::remove (15 samples, 0.01%)</title><rect x="77.3524%" y="693" width="0.0122%" height="15" fill="rgb(254,215,14)" fg:x="95275" fg:w="15"/><text x="77.6024%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (250 samples, 0.20%)</title><rect x="77.2087%" y="741" width="0.2030%" height="15" fill="rgb(211,115,16)" fg:x="95098" fg:w="250"/><text x="77.4587%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (224 samples, 0.18%)</title><rect x="77.2298%" y="725" width="0.1819%" height="15" fill="rgb(236,210,16)" fg:x="95124" fg:w="224"/><text x="77.4798%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (58 samples, 0.05%)</title><rect x="77.3646%" y="709" width="0.0471%" height="15" fill="rgb(221,94,12)" fg:x="95290" fg:w="58"/><text x="77.6146%" y="719.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (58 samples, 0.05%)</title><rect x="77.3646%" y="693" width="0.0471%" height="15" fill="rgb(235,218,49)" fg:x="95290" fg:w="58"/><text x="77.6146%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (57 samples, 0.05%)</title><rect x="77.3654%" y="677" width="0.0463%" height="15" fill="rgb(217,114,14)" fg:x="95291" fg:w="57"/><text x="77.6154%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_sub (57 samples, 0.05%)</title><rect x="77.3654%" y="661" width="0.0463%" height="15" fill="rgb(216,145,22)" fg:x="95291" fg:w="57"/><text x="77.6154%" y="671.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (121 samples, 0.10%)</title><rect x="77.4190%" y="725" width="0.0982%" height="15" fill="rgb(217,112,39)" fg:x="95357" fg:w="121"/><text x="77.6690%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (121 samples, 0.10%)</title><rect x="77.4190%" y="709" width="0.0982%" height="15" fill="rgb(225,85,32)" fg:x="95357" fg:w="121"/><text x="77.6690%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_add (121 samples, 0.10%)</title><rect x="77.4190%" y="693" width="0.0982%" height="15" fill="rgb(245,209,47)" fg:x="95357" fg:w="121"/><text x="77.6690%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (83 samples, 0.07%)</title><rect x="77.5173%" y="725" width="0.0674%" height="15" fill="rgb(218,220,15)" fg:x="95478" fg:w="83"/><text x="77.7673%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (82 samples, 0.07%)</title><rect x="77.5181%" y="709" width="0.0666%" height="15" fill="rgb(222,202,31)" fg:x="95479" fg:w="82"/><text x="77.7681%" y="719.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (82 samples, 0.07%)</title><rect x="77.5181%" y="693" width="0.0666%" height="15" fill="rgb(243,203,4)" fg:x="95479" fg:w="82"/><text x="77.7681%" y="703.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (80 samples, 0.06%)</title><rect x="77.5197%" y="677" width="0.0650%" height="15" fill="rgb(237,92,17)" fg:x="95481" fg:w="80"/><text x="77.7697%" y="687.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (79 samples, 0.06%)</title><rect x="77.5205%" y="661" width="0.0641%" height="15" fill="rgb(231,119,7)" fg:x="95482" fg:w="79"/><text x="77.7705%" y="671.50"></text></g><g><title>__GI___pthread_mutex_unlock (74 samples, 0.06%)</title><rect x="77.5246%" y="645" width="0.0601%" height="15" fill="rgb(237,82,41)" fg:x="95487" fg:w="74"/><text x="77.7746%" y="655.50"></text></g><g><title>event_listener::Inner::lock (76 samples, 0.06%)</title><rect x="77.5871%" y="725" width="0.0617%" height="15" fill="rgb(226,81,48)" fg:x="95564" fg:w="76"/><text x="77.8371%" y="735.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (72 samples, 0.06%)</title><rect x="77.5903%" y="709" width="0.0585%" height="15" fill="rgb(234,70,51)" fg:x="95568" fg:w="72"/><text x="77.8403%" y="719.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (71 samples, 0.06%)</title><rect x="77.5911%" y="693" width="0.0576%" height="15" fill="rgb(251,86,4)" fg:x="95569" fg:w="71"/><text x="77.8411%" y="703.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (71 samples, 0.06%)</title><rect x="77.5911%" y="677" width="0.0576%" height="15" fill="rgb(244,144,28)" fg:x="95569" fg:w="71"/><text x="77.8411%" y="687.50"></text></g><g><title>__GI___pthread_mutex_lock (67 samples, 0.05%)</title><rect x="77.5944%" y="661" width="0.0544%" height="15" fill="rgb(232,161,39)" fg:x="95573" fg:w="67"/><text x="77.8444%" y="671.50"></text></g><g><title>event_listener::List::insert (13 samples, 0.01%)</title><rect x="77.6488%" y="725" width="0.0106%" height="15" fill="rgb(247,34,51)" fg:x="95640" fg:w="13"/><text x="77.8988%" y="735.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (5,180 samples, 4.21%)</title><rect x="73.4960%" y="757" width="4.2056%" height="15" fill="rgb(225,132,2)" fg:x="90525" fg:w="5180"/><text x="73.7460%" y="767.50">&lt;asyn..</text></g><g><title>event_listener::Event::listen (357 samples, 0.29%)</title><rect x="77.4117%" y="741" width="0.2898%" height="15" fill="rgb(209,159,44)" fg:x="95348" fg:w="357"/><text x="77.6617%" y="751.50"></text></g><g><title>event_listener::full_fence (52 samples, 0.04%)</title><rect x="77.6593%" y="725" width="0.0422%" height="15" fill="rgb(251,214,1)" fg:x="95653" fg:w="52"/><text x="77.9093%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (52 samples, 0.04%)</title><rect x="77.6593%" y="709" width="0.0422%" height="15" fill="rgb(247,84,47)" fg:x="95653" fg:w="52"/><text x="77.9093%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (52 samples, 0.04%)</title><rect x="77.6593%" y="693" width="0.0422%" height="15" fill="rgb(240,111,43)" fg:x="95653" fg:w="52"/><text x="77.9093%" y="703.50"></text></g><g><title>[libc-2.31.so] (186 samples, 0.15%)</title><rect x="77.7105%" y="741" width="0.1510%" height="15" fill="rgb(215,214,35)" fg:x="95716" fg:w="186"/><text x="77.9605%" y="751.50"></text></g><g><title>[libc-2.31.so] (1,475 samples, 1.20%)</title><rect x="77.8680%" y="709" width="1.1975%" height="15" fill="rgb(248,207,23)" fg:x="95910" fg:w="1475"/><text x="78.1180%" y="719.50"></text></g><g><title>sn_rust_dealloc (120 samples, 0.10%)</title><rect x="79.0680%" y="629" width="0.0974%" height="15" fill="rgb(214,186,4)" fg:x="97388" fg:w="120"/><text x="79.3180%" y="639.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (7,404 samples, 6.01%)</title><rect x="73.4221%" y="789" width="6.0112%" height="15" fill="rgb(220,133,22)" fg:x="90434" fg:w="7404"/><text x="73.6721%" y="799.50">&lt;async_s..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (7,376 samples, 5.99%)</title><rect x="73.4448%" y="773" width="5.9885%" height="15" fill="rgb(239,134,19)" fg:x="90462" fg:w="7376"/><text x="73.6948%" y="783.50">&lt;async_s..</text></g><g><title>core::option::Option&lt;T&gt;::map (2,133 samples, 1.73%)</title><rect x="77.7016%" y="757" width="1.7318%" height="15" fill="rgb(250,140,9)" fg:x="95705" fg:w="2133"/><text x="77.9516%" y="767.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,936 samples, 1.57%)</title><rect x="77.8615%" y="741" width="1.5718%" height="15" fill="rgb(225,59,14)" fg:x="95902" fg:w="1936"/><text x="78.1115%" y="751.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}}::{{closure}} (1,936 samples, 1.57%)</title><rect x="77.8615%" y="725" width="1.5718%" height="15" fill="rgb(214,152,51)" fg:x="95902" fg:w="1936"/><text x="78.1115%" y="735.50"></text></g><g><title>alloc::alloc::box_free (453 samples, 0.37%)</title><rect x="79.0655%" y="709" width="0.3678%" height="15" fill="rgb(251,227,43)" fg:x="97385" fg:w="453"/><text x="79.3155%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (453 samples, 0.37%)</title><rect x="79.0655%" y="693" width="0.3678%" height="15" fill="rgb(241,96,17)" fg:x="97385" fg:w="453"/><text x="79.3155%" y="703.50"></text></g><g><title>alloc::alloc::dealloc (453 samples, 0.37%)</title><rect x="79.0655%" y="677" width="0.3678%" height="15" fill="rgb(234,198,43)" fg:x="97385" fg:w="453"/><text x="79.3155%" y="687.50"></text></g><g><title>__rg_dealloc (453 samples, 0.37%)</title><rect x="79.0655%" y="661" width="0.3678%" height="15" fill="rgb(220,108,29)" fg:x="97385" fg:w="453"/><text x="79.3155%" y="671.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (453 samples, 0.37%)</title><rect x="79.0655%" y="645" width="0.3678%" height="15" fill="rgb(226,163,33)" fg:x="97385" fg:w="453"/><text x="79.3155%" y="655.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (330 samples, 0.27%)</title><rect x="79.1654%" y="629" width="0.2679%" height="15" fill="rgb(205,194,45)" fg:x="97508" fg:w="330"/><text x="79.4154%" y="639.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,805 samples, 7.15%)</title><rect x="73.3693%" y="853" width="7.1487%" height="15" fill="rgb(206,143,44)" fg:x="90369" fg:w="8805"/><text x="73.6193%" y="863.50">&lt;async_std..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (8,782 samples, 7.13%)</title><rect x="73.3880%" y="837" width="7.1300%" height="15" fill="rgb(236,136,36)" fg:x="90392" fg:w="8782"/><text x="73.6380%" y="847.50">&lt;tremor_ru..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (8,782 samples, 7.13%)</title><rect x="73.3880%" y="821" width="7.1300%" height="15" fill="rgb(249,172,42)" fg:x="90392" fg:w="8782"/><text x="73.6380%" y="831.50">&lt;async_std..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (8,782 samples, 7.13%)</title><rect x="73.3880%" y="805" width="7.1300%" height="15" fill="rgb(216,139,23)" fg:x="90392" fg:w="8782"/><text x="73.6380%" y="815.50">&lt;tremor_ru..</text></g><g><title>[libc-2.31.so] (1,336 samples, 1.08%)</title><rect x="79.4333%" y="789" width="1.0847%" height="15" fill="rgb(207,166,20)" fg:x="97838" fg:w="1336"/><text x="79.6833%" y="799.50"></text></g><g><title>[libc-2.31.so] (153 samples, 0.12%)</title><rect x="80.5212%" y="805" width="0.1242%" height="15" fill="rgb(210,209,22)" fg:x="99178" fg:w="153"/><text x="80.7712%" y="815.50"></text></g><g><title>[libc-2.31.so] (325 samples, 0.26%)</title><rect x="80.9158%" y="741" width="0.2639%" height="15" fill="rgb(232,118,20)" fg:x="99664" fg:w="325"/><text x="81.1658%" y="751.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (202 samples, 0.16%)</title><rect x="81.2292%" y="725" width="0.1640%" height="15" fill="rgb(238,113,42)" fg:x="100050" fg:w="202"/><text x="81.4792%" y="735.50"></text></g><g><title>core::ptr::write (202 samples, 0.16%)</title><rect x="81.2292%" y="709" width="0.1640%" height="15" fill="rgb(231,42,5)" fg:x="100050" fg:w="202"/><text x="81.4792%" y="719.50"></text></g><g><title>[libc-2.31.so] (194 samples, 0.16%)</title><rect x="81.2357%" y="693" width="0.1575%" height="15" fill="rgb(243,166,24)" fg:x="100058" fg:w="194"/><text x="81.4857%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (311 samples, 0.25%)</title><rect x="81.3932%" y="725" width="0.2525%" height="15" fill="rgb(237,226,12)" fg:x="100252" fg:w="311"/><text x="81.6432%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (311 samples, 0.25%)</title><rect x="81.3932%" y="709" width="0.2525%" height="15" fill="rgb(229,133,24)" fg:x="100252" fg:w="311"/><text x="81.6432%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (132 samples, 0.11%)</title><rect x="81.6457%" y="725" width="0.1072%" height="15" fill="rgb(238,33,43)" fg:x="100563" fg:w="132"/><text x="81.8957%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_load (127 samples, 0.10%)</title><rect x="81.6498%" y="709" width="0.1031%" height="15" fill="rgb(227,59,38)" fg:x="100568" fg:w="127"/><text x="81.8998%" y="719.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (1,167 samples, 0.95%)</title><rect x="80.8135%" y="757" width="0.9475%" height="15" fill="rgb(230,97,0)" fg:x="99538" fg:w="1167"/><text x="81.0635%" y="767.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (716 samples, 0.58%)</title><rect x="81.1797%" y="741" width="0.5813%" height="15" fill="rgb(250,173,50)" fg:x="99989" fg:w="716"/><text x="81.4297%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (38 samples, 0.03%)</title><rect x="81.7870%" y="741" width="0.0309%" height="15" fill="rgb(240,15,50)" fg:x="100737" fg:w="38"/><text x="82.0370%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (37 samples, 0.03%)</title><rect x="81.7878%" y="725" width="0.0300%" height="15" fill="rgb(221,93,22)" fg:x="100738" fg:w="37"/><text x="82.0378%" y="735.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.03%)</title><rect x="81.7878%" y="709" width="0.0300%" height="15" fill="rgb(245,180,53)" fg:x="100738" fg:w="37"/><text x="82.0378%" y="719.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (35 samples, 0.03%)</title><rect x="81.7894%" y="693" width="0.0284%" height="15" fill="rgb(231,88,51)" fg:x="100740" fg:w="35"/><text x="82.0394%" y="703.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (35 samples, 0.03%)</title><rect x="81.7894%" y="677" width="0.0284%" height="15" fill="rgb(240,58,21)" fg:x="100740" fg:w="35"/><text x="82.0394%" y="687.50"></text></g><g><title>__GI___pthread_mutex_unlock (35 samples, 0.03%)</title><rect x="81.7894%" y="661" width="0.0284%" height="15" fill="rgb(237,21,10)" fg:x="100740" fg:w="35"/><text x="82.0394%" y="671.50"></text></g><g><title>event_listener::Inner::lock (53 samples, 0.04%)</title><rect x="81.8267%" y="741" width="0.0430%" height="15" fill="rgb(218,43,11)" fg:x="100786" fg:w="53"/><text x="82.0767%" y="751.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (53 samples, 0.04%)</title><rect x="81.8267%" y="725" width="0.0430%" height="15" fill="rgb(218,221,29)" fg:x="100786" fg:w="53"/><text x="82.0767%" y="735.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (53 samples, 0.04%)</title><rect x="81.8267%" y="709" width="0.0430%" height="15" fill="rgb(214,118,42)" fg:x="100786" fg:w="53"/><text x="82.0767%" y="719.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (51 samples, 0.04%)</title><rect x="81.8284%" y="693" width="0.0414%" height="15" fill="rgb(251,200,26)" fg:x="100788" fg:w="51"/><text x="82.0784%" y="703.50"></text></g><g><title>__GI___pthread_mutex_lock (51 samples, 0.04%)</title><rect x="81.8284%" y="677" width="0.0414%" height="15" fill="rgb(237,101,39)" fg:x="100788" fg:w="51"/><text x="82.0784%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (63 samples, 0.05%)</title><rect x="81.8909%" y="645" width="0.0511%" height="15" fill="rgb(251,117,11)" fg:x="100865" fg:w="63"/><text x="82.1409%" y="655.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (63 samples, 0.05%)</title><rect x="81.8909%" y="629" width="0.0511%" height="15" fill="rgb(216,223,23)" fg:x="100865" fg:w="63"/><text x="82.1409%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (63 samples, 0.05%)</title><rect x="81.8909%" y="613" width="0.0511%" height="15" fill="rgb(251,54,12)" fg:x="100865" fg:w="63"/><text x="82.1409%" y="623.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (63 samples, 0.05%)</title><rect x="81.8909%" y="597" width="0.0511%" height="15" fill="rgb(254,176,54)" fg:x="100865" fg:w="63"/><text x="82.1409%" y="607.50"></text></g><g><title>__GI___pthread_mutex_unlock (63 samples, 0.05%)</title><rect x="81.8909%" y="581" width="0.0511%" height="15" fill="rgb(210,32,8)" fg:x="100865" fg:w="63"/><text x="82.1409%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (21 samples, 0.02%)</title><rect x="81.9420%" y="645" width="0.0170%" height="15" fill="rgb(235,52,38)" fg:x="100928" fg:w="21"/><text x="82.1920%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (21 samples, 0.02%)</title><rect x="81.9420%" y="629" width="0.0170%" height="15" fill="rgb(231,4,44)" fg:x="100928" fg:w="21"/><text x="82.1920%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (15 samples, 0.01%)</title><rect x="81.9810%" y="565" width="0.0122%" height="15" fill="rgb(249,2,32)" fg:x="100976" fg:w="15"/><text x="82.2310%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_swap (15 samples, 0.01%)</title><rect x="81.9810%" y="549" width="0.0122%" height="15" fill="rgb(224,65,26)" fg:x="100976" fg:w="15"/><text x="82.2310%" y="559.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (34 samples, 0.03%)</title><rect x="81.9932%" y="565" width="0.0276%" height="15" fill="rgb(250,73,40)" fg:x="100991" fg:w="34"/><text x="82.2432%" y="575.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (34 samples, 0.03%)</title><rect x="81.9932%" y="549" width="0.0276%" height="15" fill="rgb(253,177,16)" fg:x="100991" fg:w="34"/><text x="82.2432%" y="559.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (34 samples, 0.03%)</title><rect x="81.9932%" y="533" width="0.0276%" height="15" fill="rgb(217,32,34)" fg:x="100991" fg:w="34"/><text x="82.2432%" y="543.50"></text></g><g><title>__pthread_cond_signal (34 samples, 0.03%)</title><rect x="81.9932%" y="517" width="0.0276%" height="15" fill="rgb(212,7,10)" fg:x="100991" fg:w="34"/><text x="82.2432%" y="527.50"></text></g><g><title>parking::Unparker::unpark (96 samples, 0.08%)</title><rect x="81.9696%" y="597" width="0.0779%" height="15" fill="rgb(245,89,8)" fg:x="100962" fg:w="96"/><text x="82.2196%" y="607.50"></text></g><g><title>parking::Inner::unpark (93 samples, 0.08%)</title><rect x="81.9721%" y="581" width="0.0755%" height="15" fill="rgb(237,16,53)" fg:x="100965" fg:w="93"/><text x="82.2221%" y="591.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (33 samples, 0.03%)</title><rect x="82.0208%" y="565" width="0.0268%" height="15" fill="rgb(250,204,30)" fg:x="101025" fg:w="33"/><text x="82.2708%" y="575.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (33 samples, 0.03%)</title><rect x="82.0208%" y="549" width="0.0268%" height="15" fill="rgb(208,77,27)" fg:x="101025" fg:w="33"/><text x="82.2708%" y="559.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (33 samples, 0.03%)</title><rect x="82.0208%" y="533" width="0.0268%" height="15" fill="rgb(250,204,28)" fg:x="101025" fg:w="33"/><text x="82.2708%" y="543.50"></text></g><g><title>__GI___pthread_mutex_lock (33 samples, 0.03%)</title><rect x="82.0208%" y="517" width="0.0268%" height="15" fill="rgb(244,63,21)" fg:x="101025" fg:w="33"/><text x="82.2708%" y="527.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (114 samples, 0.09%)</title><rect x="81.9599%" y="613" width="0.0926%" height="15" fill="rgb(236,85,44)" fg:x="100950" fg:w="114"/><text x="82.2099%" y="623.50"></text></g><g><title>core::task::wake::Waker::wake (140 samples, 0.11%)</title><rect x="81.9591%" y="645" width="0.1137%" height="15" fill="rgb(215,98,4)" fg:x="100949" fg:w="140"/><text x="82.2091%" y="655.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (139 samples, 0.11%)</title><rect x="81.9599%" y="629" width="0.1129%" height="15" fill="rgb(235,38,11)" fg:x="100950" fg:w="139"/><text x="82.2099%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (25 samples, 0.02%)</title><rect x="82.0524%" y="613" width="0.0203%" height="15" fill="rgb(254,186,25)" fg:x="101064" fg:w="25"/><text x="82.3024%" y="623.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.02%)</title><rect x="82.0524%" y="597" width="0.0203%" height="15" fill="rgb(225,55,31)" fg:x="101064" fg:w="25"/><text x="82.3024%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (25 samples, 0.02%)</title><rect x="82.0524%" y="581" width="0.0203%" height="15" fill="rgb(211,15,21)" fg:x="101064" fg:w="25"/><text x="82.3024%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_sub (25 samples, 0.02%)</title><rect x="82.0524%" y="565" width="0.0203%" height="15" fill="rgb(215,187,41)" fg:x="101064" fg:w="25"/><text x="82.3024%" y="575.50"></text></g><g><title>async_executor::State::notify (265 samples, 0.22%)</title><rect x="81.8901%" y="661" width="0.2151%" height="15" fill="rgb(248,69,32)" fg:x="100864" fg:w="265"/><text x="82.1401%" y="671.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (40 samples, 0.03%)</title><rect x="82.0727%" y="645" width="0.0325%" height="15" fill="rgb(252,102,52)" fg:x="101089" fg:w="40"/><text x="82.3227%" y="655.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (40 samples, 0.03%)</title><rect x="82.0727%" y="629" width="0.0325%" height="15" fill="rgb(253,140,32)" fg:x="101089" fg:w="40"/><text x="82.3227%" y="639.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (32 samples, 0.03%)</title><rect x="82.0792%" y="613" width="0.0260%" height="15" fill="rgb(216,56,42)" fg:x="101097" fg:w="32"/><text x="82.3292%" y="623.50"></text></g><g><title>__GI___pthread_mutex_lock (32 samples, 0.03%)</title><rect x="82.0792%" y="597" width="0.0260%" height="15" fill="rgb(216,184,14)" fg:x="101097" fg:w="32"/><text x="82.3292%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (37 samples, 0.03%)</title><rect x="82.1174%" y="629" width="0.0300%" height="15" fill="rgb(237,187,27)" fg:x="101144" fg:w="37"/><text x="82.3674%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (37 samples, 0.03%)</title><rect x="82.1174%" y="613" width="0.0300%" height="15" fill="rgb(219,65,3)" fg:x="101144" fg:w="37"/><text x="82.3674%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (23 samples, 0.02%)</title><rect x="82.1474%" y="629" width="0.0187%" height="15" fill="rgb(245,83,25)" fg:x="101181" fg:w="23"/><text x="82.3974%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_or (23 samples, 0.02%)</title><rect x="82.1474%" y="613" width="0.0187%" height="15" fill="rgb(214,205,45)" fg:x="101181" fg:w="23"/><text x="82.3974%" y="623.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (343 samples, 0.28%)</title><rect x="81.8901%" y="677" width="0.2785%" height="15" fill="rgb(241,20,18)" fg:x="100864" fg:w="343"/><text x="82.1401%" y="687.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (78 samples, 0.06%)</title><rect x="82.1052%" y="661" width="0.0633%" height="15" fill="rgb(232,163,23)" fg:x="101129" fg:w="78"/><text x="82.3552%" y="671.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (76 samples, 0.06%)</title><rect x="82.1068%" y="645" width="0.0617%" height="15" fill="rgb(214,5,46)" fg:x="101131" fg:w="76"/><text x="82.3568%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (54 samples, 0.04%)</title><rect x="82.1685%" y="677" width="0.0438%" height="15" fill="rgb(229,78,17)" fg:x="101207" fg:w="54"/><text x="82.4185%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (54 samples, 0.04%)</title><rect x="82.1685%" y="661" width="0.0438%" height="15" fill="rgb(248,89,10)" fg:x="101207" fg:w="54"/><text x="82.4185%" y="671.50"></text></g><g><title>event_listener::List::notify (426 samples, 0.35%)</title><rect x="81.8698%" y="741" width="0.3459%" height="15" fill="rgb(248,54,15)" fg:x="100839" fg:w="426"/><text x="82.1198%" y="751.50"></text></g><g><title>core::task::wake::Waker::wake (418 samples, 0.34%)</title><rect x="81.8763%" y="725" width="0.3394%" height="15" fill="rgb(223,116,6)" fg:x="100847" fg:w="418"/><text x="82.1263%" y="735.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (418 samples, 0.34%)</title><rect x="81.8763%" y="709" width="0.3394%" height="15" fill="rgb(205,125,38)" fg:x="100847" fg:w="418"/><text x="82.1263%" y="719.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (408 samples, 0.33%)</title><rect x="81.8844%" y="693" width="0.3312%" height="15" fill="rgb(251,78,38)" fg:x="100857" fg:w="408"/><text x="82.1344%" y="703.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (3,078 samples, 2.50%)</title><rect x="80.7916%" y="773" width="2.4990%" height="15" fill="rgb(253,78,28)" fg:x="99511" fg:w="3078"/><text x="81.0416%" y="783.50">as..</text></g><g><title>event_listener::Event::notify (1,884 samples, 1.53%)</title><rect x="81.7610%" y="757" width="1.5296%" height="15" fill="rgb(209,120,3)" fg:x="100705" fg:w="1884"/><text x="82.0110%" y="767.50"></text></g><g><title>event_listener::full_fence (1,324 samples, 1.07%)</title><rect x="82.2156%" y="741" width="1.0749%" height="15" fill="rgb(238,229,9)" fg:x="101265" fg:w="1324"/><text x="82.4656%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1,300 samples, 1.06%)</title><rect x="82.2351%" y="725" width="1.0555%" height="15" fill="rgb(253,159,18)" fg:x="101289" fg:w="1300"/><text x="82.4851%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1,300 samples, 1.06%)</title><rect x="82.2351%" y="709" width="1.0555%" height="15" fill="rgb(244,42,34)" fg:x="101289" fg:w="1300"/><text x="82.4851%" y="719.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::capacity (36 samples, 0.03%)</title><rect x="83.2906%" y="773" width="0.0292%" height="15" fill="rgb(224,8,7)" fg:x="102589" fg:w="36"/><text x="83.5406%" y="783.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (3,424 samples, 2.78%)</title><rect x="80.7445%" y="789" width="2.7799%" height="15" fill="rgb(210,201,45)" fg:x="99453" fg:w="3424"/><text x="80.9945%" y="799.50">&lt;a..</text></g><g><title>event_listener::Event::notify (244 samples, 0.20%)</title><rect x="83.3263%" y="773" width="0.1981%" height="15" fill="rgb(252,185,21)" fg:x="102633" fg:w="244"/><text x="83.5763%" y="783.50"></text></g><g><title>event_listener::full_fence (231 samples, 0.19%)</title><rect x="83.3369%" y="757" width="0.1875%" height="15" fill="rgb(223,131,1)" fg:x="102646" fg:w="231"/><text x="83.5869%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (231 samples, 0.19%)</title><rect x="83.3369%" y="741" width="0.1875%" height="15" fill="rgb(245,141,16)" fg:x="102646" fg:w="231"/><text x="83.5869%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (231 samples, 0.19%)</title><rect x="83.3369%" y="725" width="0.1875%" height="15" fill="rgb(229,55,45)" fg:x="102646" fg:w="231"/><text x="83.5869%" y="735.50"></text></g><g><title>[libc-2.31.so] (698 samples, 0.57%)</title><rect x="83.5301%" y="789" width="0.5667%" height="15" fill="rgb(208,92,15)" fg:x="102884" fg:w="698"/><text x="83.7801%" y="799.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (13,233 samples, 10.74%)</title><rect x="73.3685%" y="869" width="10.7437%" height="15" fill="rgb(234,185,47)" fg:x="90368" fg:w="13233"/><text x="73.6185%" y="879.50">tremor_runtime::..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,427 samples, 3.59%)</title><rect x="80.5180%" y="853" width="3.5942%" height="15" fill="rgb(253,104,50)" fg:x="99174" fg:w="4427"/><text x="80.7680%" y="863.50">&lt;cor..</text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (4,427 samples, 3.59%)</title><rect x="80.5180%" y="837" width="3.5942%" height="15" fill="rgb(205,70,7)" fg:x="99174" fg:w="4427"/><text x="80.7680%" y="847.50">trem..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,427 samples, 3.59%)</title><rect x="80.5180%" y="821" width="3.5942%" height="15" fill="rgb(240,178,43)" fg:x="99174" fg:w="4427"/><text x="80.7680%" y="831.50">&lt;cor..</text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (4,270 samples, 3.47%)</title><rect x="80.6454%" y="805" width="3.4668%" height="15" fill="rgb(214,112,2)" fg:x="99331" fg:w="4270"/><text x="80.8954%" y="815.50">tre..</text></g><g><title>core::ptr::drop_in_place&lt;async_channel::Send&lt;tremor_runtime::connectors::sink::SinkMsg&gt;&gt; (19 samples, 0.02%)</title><rect x="84.0968%" y="789" width="0.0154%" height="15" fill="rgb(206,46,17)" fg:x="103582" fg:w="19"/><text x="84.3468%" y="799.50"></text></g><g><title>tremor_runtime::postprocessor::postprocess (39 samples, 0.03%)</title><rect x="84.1122%" y="869" width="0.0317%" height="15" fill="rgb(225,220,16)" fg:x="103601" fg:w="39"/><text x="84.3622%" y="879.50"></text></g><g><title>[unknown] (98,052 samples, 79.61%)</title><rect x="4.5539%" y="885" width="79.6070%" height="15" fill="rgb(238,65,40)" fg:x="5609" fg:w="98052"/><text x="4.8039%" y="895.50">[unknown]</text></g><g><title>__clock_gettime (30 samples, 0.02%)</title><rect x="84.1634%" y="885" width="0.0244%" height="15" fill="rgb(230,151,21)" fg:x="103664" fg:w="30"/><text x="84.4134%" y="895.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (18 samples, 0.01%)</title><rect x="84.2080%" y="885" width="0.0146%" height="15" fill="rgb(218,58,49)" fg:x="103719" fg:w="18"/><text x="84.4580%" y="895.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::into_vec (17 samples, 0.01%)</title><rect x="84.2226%" y="885" width="0.0138%" height="15" fill="rgb(219,179,14)" fg:x="103737" fg:w="17"/><text x="84.4726%" y="895.50"></text></g><g><title>&lt;abi_stable::sabi_types::constructor::Constructor&lt;T&gt; as core::cmp::PartialEq&gt;::eq (13 samples, 0.01%)</title><rect x="84.2259%" y="869" width="0.0106%" height="15" fill="rgb(223,72,1)" fg:x="103741" fg:w="13"/><text x="84.4759%" y="879.50"></text></g><g><title>abi_stable::sabi_types::constructor::Constructor&lt;T&gt;::get (13 samples, 0.01%)</title><rect x="84.2259%" y="853" width="0.0106%" height="15" fill="rgb(238,126,10)" fg:x="103741" fg:w="13"/><text x="84.4759%" y="863.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::split_off (14 samples, 0.01%)</title><rect x="84.2454%" y="885" width="0.0114%" height="15" fill="rgb(224,206,38)" fg:x="103765" fg:w="14"/><text x="84.4954%" y="895.50"></text></g><g><title>anon.a92b65dce0c6862938e99fda8bcdfe22.34.llvm.2716098514989274932 (13 samples, 0.01%)</title><rect x="84.2819%" y="885" width="0.0106%" height="15" fill="rgb(212,201,54)" fg:x="103810" fg:w="13"/><text x="84.5319%" y="895.50"></text></g><g><title>anon.a92b65dce0c6862938e99fda8bcdfe22.35.llvm.2716098514989274932 (13 samples, 0.01%)</title><rect x="84.2924%" y="885" width="0.0106%" height="15" fill="rgb(218,154,48)" fg:x="103823" fg:w="13"/><text x="84.5424%" y="895.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (22 samples, 0.02%)</title><rect x="84.3225%" y="869" width="0.0179%" height="15" fill="rgb(232,93,24)" fg:x="103860" fg:w="22"/><text x="84.5725%" y="879.50"></text></g><g><title>anon.ad6b3c7efd403fc0bec16b3e2cfcb681.24.llvm.10493242232810447988 (72 samples, 0.06%)</title><rect x="84.3030%" y="885" width="0.0585%" height="15" fill="rgb(245,30,21)" fg:x="103836" fg:w="72"/><text x="84.5530%" y="895.50"></text></g><g><title>anon.ad6b3c7efd403fc0bec16b3e2cfcb681.25.llvm.10493242232810447988 (15 samples, 0.01%)</title><rect x="84.3615%" y="885" width="0.0122%" height="15" fill="rgb(242,148,29)" fg:x="103908" fg:w="15"/><text x="84.6115%" y="895.50"></text></g><g><title>anon.c6676277d9159002154b1ad830e38ffe.16.llvm.16537282876649417011 (48 samples, 0.04%)</title><rect x="84.3809%" y="885" width="0.0390%" height="15" fill="rgb(244,153,54)" fg:x="103932" fg:w="48"/><text x="84.6309%" y="895.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (15 samples, 0.01%)</title><rect x="84.4199%" y="885" width="0.0122%" height="15" fill="rgb(252,87,22)" fg:x="103980" fg:w="15"/><text x="84.6699%" y="895.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (19 samples, 0.02%)</title><rect x="84.4321%" y="869" width="0.0154%" height="15" fill="rgb(210,51,29)" fg:x="103995" fg:w="19"/><text x="84.6821%" y="879.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (46 samples, 0.04%)</title><rect x="84.4832%" y="853" width="0.0373%" height="15" fill="rgb(242,136,47)" fg:x="104058" fg:w="46"/><text x="84.7332%" y="863.50"></text></g><g><title>async_task::runnable::Runnable::run (45 samples, 0.04%)</title><rect x="84.4840%" y="837" width="0.0365%" height="15" fill="rgb(238,68,4)" fg:x="104059" fg:w="45"/><text x="84.7340%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (18 samples, 0.01%)</title><rect x="84.5863%" y="773" width="0.0146%" height="15" fill="rgb(242,161,30)" fg:x="104185" fg:w="18"/><text x="84.8363%" y="783.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (194 samples, 0.16%)</title><rect x="84.4475%" y="869" width="0.1575%" height="15" fill="rgb(218,58,44)" fg:x="104014" fg:w="194"/><text x="84.6975%" y="879.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (98 samples, 0.08%)</title><rect x="84.5255%" y="853" width="0.0796%" height="15" fill="rgb(252,125,32)" fg:x="104110" fg:w="98"/><text x="84.7755%" y="863.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (83 samples, 0.07%)</title><rect x="84.5376%" y="837" width="0.0674%" height="15" fill="rgb(219,178,0)" fg:x="104125" fg:w="83"/><text x="84.7876%" y="847.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (80 samples, 0.06%)</title><rect x="84.5401%" y="821" width="0.0650%" height="15" fill="rgb(213,152,7)" fg:x="104128" fg:w="80"/><text x="84.7901%" y="831.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (63 samples, 0.05%)</title><rect x="84.5539%" y="805" width="0.0511%" height="15" fill="rgb(249,109,34)" fg:x="104145" fg:w="63"/><text x="84.8039%" y="815.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (59 samples, 0.05%)</title><rect x="84.5571%" y="789" width="0.0479%" height="15" fill="rgb(232,96,21)" fg:x="104149" fg:w="59"/><text x="84.8071%" y="799.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (14 samples, 0.01%)</title><rect x="84.6050%" y="869" width="0.0114%" height="15" fill="rgb(228,27,39)" fg:x="104208" fg:w="14"/><text x="84.8550%" y="879.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (51 samples, 0.04%)</title><rect x="84.6570%" y="821" width="0.0414%" height="15" fill="rgb(211,182,52)" fg:x="104272" fg:w="51"/><text x="84.9070%" y="831.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (107 samples, 0.09%)</title><rect x="84.6164%" y="869" width="0.0869%" height="15" fill="rgb(234,178,38)" fg:x="104222" fg:w="107"/><text x="84.8664%" y="879.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (97 samples, 0.08%)</title><rect x="84.6245%" y="853" width="0.0788%" height="15" fill="rgb(221,111,3)" fg:x="104232" fg:w="97"/><text x="84.8745%" y="863.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (88 samples, 0.07%)</title><rect x="84.6318%" y="837" width="0.0714%" height="15" fill="rgb(228,175,21)" fg:x="104241" fg:w="88"/><text x="84.8818%" y="847.50"></text></g><g><title>__rust_probestack (13 samples, 0.01%)</title><rect x="84.7081%" y="869" width="0.0106%" height="15" fill="rgb(228,174,43)" fg:x="104335" fg:w="13"/><text x="84.9581%" y="879.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (50 samples, 0.04%)</title><rect x="84.7357%" y="869" width="0.0406%" height="15" fill="rgb(211,191,0)" fg:x="104369" fg:w="50"/><text x="84.9857%" y="879.50"></text></g><g><title>parking::Inner::park (14 samples, 0.01%)</title><rect x="84.7820%" y="869" width="0.0114%" height="15" fill="rgb(253,117,3)" fg:x="104426" fg:w="14"/><text x="85.0320%" y="879.50"></text></g><g><title>polling::epoll::Poller::modify (13 samples, 0.01%)</title><rect x="84.7974%" y="869" width="0.0106%" height="15" fill="rgb(241,127,19)" fg:x="104445" fg:w="13"/><text x="85.0474%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (13 samples, 0.01%)</title><rect x="84.9322%" y="821" width="0.0106%" height="15" fill="rgb(218,103,12)" fg:x="104611" fg:w="13"/><text x="85.1822%" y="831.50"></text></g><g><title>core::ptr::write (13 samples, 0.01%)</title><rect x="84.9322%" y="805" width="0.0106%" height="15" fill="rgb(236,214,43)" fg:x="104611" fg:w="13"/><text x="85.1822%" y="815.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (59 samples, 0.05%)</title><rect x="84.9200%" y="853" width="0.0479%" height="15" fill="rgb(244,144,19)" fg:x="104596" fg:w="59"/><text x="85.1700%" y="863.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (46 samples, 0.04%)</title><rect x="84.9306%" y="837" width="0.0373%" height="15" fill="rgb(246,188,10)" fg:x="104609" fg:w="46"/><text x="85.1806%" y="847.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (31 samples, 0.03%)</title><rect x="84.9428%" y="821" width="0.0252%" height="15" fill="rgb(212,193,33)" fg:x="104624" fg:w="31"/><text x="85.1928%" y="831.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (31 samples, 0.03%)</title><rect x="84.9428%" y="805" width="0.0252%" height="15" fill="rgb(241,51,29)" fg:x="104624" fg:w="31"/><text x="85.1928%" y="815.50"></text></g><g><title>async_io::reactor::Reactor::get::REACTOR (665 samples, 0.54%)</title><rect x="84.4321%" y="885" width="0.5399%" height="15" fill="rgb(211,58,19)" fg:x="103995" fg:w="665"/><text x="84.6821%" y="895.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (186 samples, 0.15%)</title><rect x="84.8210%" y="869" width="0.1510%" height="15" fill="rgb(229,111,26)" fg:x="104474" fg:w="186"/><text x="85.0710%" y="879.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (15 samples, 0.01%)</title><rect x="84.9899%" y="485" width="0.0122%" height="15" fill="rgb(213,115,40)" fg:x="104682" fg:w="15"/><text x="85.2399%" y="495.50"></text></g><g><title>async_channel::bounded (23 samples, 0.02%)</title><rect x="84.9874%" y="645" width="0.0187%" height="15" fill="rgb(209,56,44)" fg:x="104679" fg:w="23"/><text x="85.2374%" y="655.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (23 samples, 0.02%)</title><rect x="84.9874%" y="629" width="0.0187%" height="15" fill="rgb(230,108,32)" fg:x="104679" fg:w="23"/><text x="85.2374%" y="639.50"></text></g><g><title>alloc::alloc::exchange_malloc (23 samples, 0.02%)</title><rect x="84.9874%" y="613" width="0.0187%" height="15" fill="rgb(216,165,31)" fg:x="104679" fg:w="23"/><text x="85.2374%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (23 samples, 0.02%)</title><rect x="84.9874%" y="597" width="0.0187%" height="15" fill="rgb(218,122,21)" fg:x="104679" fg:w="23"/><text x="85.2374%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (23 samples, 0.02%)</title><rect x="84.9874%" y="581" width="0.0187%" height="15" fill="rgb(223,224,47)" fg:x="104679" fg:w="23"/><text x="85.2374%" y="591.50"></text></g><g><title>alloc::alloc::alloc (23 samples, 0.02%)</title><rect x="84.9874%" y="565" width="0.0187%" height="15" fill="rgb(238,102,44)" fg:x="104679" fg:w="23"/><text x="85.2374%" y="575.50"></text></g><g><title>__rg_alloc (23 samples, 0.02%)</title><rect x="84.9874%" y="549" width="0.0187%" height="15" fill="rgb(236,46,40)" fg:x="104679" fg:w="23"/><text x="85.2374%" y="559.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (23 samples, 0.02%)</title><rect x="84.9874%" y="533" width="0.0187%" height="15" fill="rgb(247,202,50)" fg:x="104679" fg:w="23"/><text x="85.2374%" y="543.50"></text></g><g><title>sn_rust_alloc (23 samples, 0.02%)</title><rect x="84.9874%" y="517" width="0.0187%" height="15" fill="rgb(209,99,20)" fg:x="104679" fg:w="23"/><text x="85.2374%" y="527.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::lazy_init&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long)#2}, unsigned long&gt; (23 samples, 0.02%)</title><rect x="84.9874%" y="501" width="0.0187%" height="15" fill="rgb(252,27,34)" fg:x="104679" fg:w="23"/><text x="85.2374%" y="511.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (14 samples, 0.01%)</title><rect x="85.5541%" y="277" width="0.0114%" height="15" fill="rgb(215,206,23)" fg:x="105377" fg:w="14"/><text x="85.8041%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::nth (15 samples, 0.01%)</title><rect x="85.6361%" y="213" width="0.0122%" height="15" fill="rgb(212,135,36)" fg:x="105478" fg:w="15"/><text x="85.8861%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (43 samples, 0.03%)</title><rect x="85.7879%" y="181" width="0.0349%" height="15" fill="rgb(240,189,1)" fg:x="105665" fg:w="43"/><text x="86.0379%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (40 samples, 0.03%)</title><rect x="85.7904%" y="165" width="0.0325%" height="15" fill="rgb(242,56,20)" fg:x="105668" fg:w="40"/><text x="86.0404%" y="175.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (31 samples, 0.03%)</title><rect x="85.7977%" y="149" width="0.0252%" height="15" fill="rgb(247,132,33)" fg:x="105677" fg:w="31"/><text x="86.0477%" y="159.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (31 samples, 0.03%)</title><rect x="85.7977%" y="133" width="0.0252%" height="15" fill="rgb(208,149,11)" fg:x="105677" fg:w="31"/><text x="86.0477%" y="143.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (31 samples, 0.03%)</title><rect x="85.7977%" y="117" width="0.0252%" height="15" fill="rgb(211,33,11)" fg:x="105677" fg:w="31"/><text x="86.0477%" y="127.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (124 samples, 0.10%)</title><rect x="85.8228%" y="181" width="0.1007%" height="15" fill="rgb(221,29,38)" fg:x="105708" fg:w="124"/><text x="86.0728%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (552 samples, 0.45%)</title><rect x="85.5655%" y="229" width="0.4482%" height="15" fill="rgb(206,182,49)" fg:x="105391" fg:w="552"/><text x="85.8155%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (450 samples, 0.37%)</title><rect x="85.6483%" y="213" width="0.3653%" height="15" fill="rgb(216,140,1)" fg:x="105493" fg:w="450"/><text x="85.8983%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (367 samples, 0.30%)</title><rect x="85.7157%" y="197" width="0.2980%" height="15" fill="rgb(232,57,40)" fg:x="105576" fg:w="367"/><text x="85.9657%" y="207.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (111 samples, 0.09%)</title><rect x="85.9235%" y="181" width="0.0901%" height="15" fill="rgb(224,186,18)" fg:x="105832" fg:w="111"/><text x="86.1735%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (111 samples, 0.09%)</title><rect x="85.9235%" y="165" width="0.0901%" height="15" fill="rgb(215,121,11)" fg:x="105832" fg:w="111"/><text x="86.1735%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (34 samples, 0.03%)</title><rect x="85.9860%" y="149" width="0.0276%" height="15" fill="rgb(245,147,10)" fg:x="105909" fg:w="34"/><text x="86.2360%" y="159.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (34 samples, 0.03%)</title><rect x="85.9860%" y="133" width="0.0276%" height="15" fill="rgb(238,153,13)" fg:x="105909" fg:w="34"/><text x="86.2360%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (583 samples, 0.47%)</title><rect x="85.5655%" y="277" width="0.4733%" height="15" fill="rgb(233,108,0)" fg:x="105391" fg:w="583"/><text x="85.8155%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (583 samples, 0.47%)</title><rect x="85.5655%" y="261" width="0.4733%" height="15" fill="rgb(212,157,17)" fg:x="105391" fg:w="583"/><text x="85.8155%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (583 samples, 0.47%)</title><rect x="85.5655%" y="245" width="0.4733%" height="15" fill="rgb(225,213,38)" fg:x="105391" fg:w="583"/><text x="85.8155%" y="255.50"></text></g><g><title>core::ops::control_flow::ControlFlow&lt;R,&lt;R as core::ops::try_trait::Try&gt;::Output&gt;::into_try (31 samples, 0.03%)</title><rect x="86.0136%" y="229" width="0.0252%" height="15" fill="rgb(248,16,11)" fg:x="105943" fg:w="31"/><text x="86.2636%" y="239.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::len (1,446 samples, 1.17%)</title><rect x="86.4927%" y="245" width="1.1740%" height="15" fill="rgb(241,33,4)" fg:x="106533" fg:w="1446"/><text x="86.7427%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1,066 samples, 0.87%)</title><rect x="86.8012%" y="229" width="0.8655%" height="15" fill="rgb(222,26,43)" fg:x="106913" fg:w="1066"/><text x="87.0512%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_load (1,066 samples, 0.87%)</title><rect x="86.8012%" y="213" width="0.8655%" height="15" fill="rgb(243,29,36)" fg:x="106913" fg:w="1066"/><text x="87.0512%" y="223.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::len (1,900 samples, 1.54%)</title><rect x="86.1411%" y="261" width="1.5426%" height="15" fill="rgb(241,9,27)" fg:x="106100" fg:w="1900"/><text x="86.3911%" y="271.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::len (21 samples, 0.02%)</title><rect x="87.6666%" y="245" width="0.0170%" height="15" fill="rgb(205,117,26)" fg:x="107979" fg:w="21"/><text x="87.9166%" y="255.50"></text></g><g><title>async_executor::steal (2,033 samples, 1.65%)</title><rect x="86.0388%" y="277" width="1.6506%" height="15" fill="rgb(209,80,39)" fg:x="105974" fg:w="2033"/><text x="86.2888%" y="287.50"></text></g><g><title>concurrent_queue::full_fence (1,896 samples, 1.54%)</title><rect x="88.4355%" y="245" width="1.5393%" height="15" fill="rgb(239,155,6)" fg:x="108926" fg:w="1896"/><text x="88.6855%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (1,831 samples, 1.49%)</title><rect x="88.4883%" y="229" width="1.4866%" height="15" fill="rgb(212,104,12)" fg:x="108991" fg:w="1831"/><text x="88.7383%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1,831 samples, 1.49%)</title><rect x="88.4883%" y="213" width="1.4866%" height="15" fill="rgb(234,204,3)" fg:x="108991" fg:w="1831"/><text x="88.7383%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1,831 samples, 1.49%)</title><rect x="88.4883%" y="197" width="1.4866%" height="15" fill="rgb(251,218,7)" fg:x="108991" fg:w="1831"/><text x="88.7383%" y="207.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (2,692 samples, 2.19%)</title><rect x="87.9183%" y="261" width="2.1856%" height="15" fill="rgb(221,81,32)" fg:x="108289" fg:w="2692"/><text x="88.1683%" y="271.50">c..</text></g><g><title>core::sync::atomic::AtomicUsize::load (156 samples, 0.13%)</title><rect x="89.9773%" y="245" width="0.1267%" height="15" fill="rgb(214,152,26)" fg:x="110825" fg:w="156"/><text x="90.2273%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_load (156 samples, 0.13%)</title><rect x="89.9773%" y="229" width="0.1267%" height="15" fill="rgb(223,22,3)" fg:x="110825" fg:w="156"/><text x="90.2273%" y="239.50"></text></g><g><title>concurrent_queue::full_fence (285 samples, 0.23%)</title><rect x="90.1591%" y="245" width="0.2314%" height="15" fill="rgb(207,174,7)" fg:x="111049" fg:w="285"/><text x="90.4091%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (282 samples, 0.23%)</title><rect x="90.1616%" y="229" width="0.2290%" height="15" fill="rgb(224,19,52)" fg:x="111052" fg:w="282"/><text x="90.4116%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (282 samples, 0.23%)</title><rect x="90.1616%" y="213" width="0.2290%" height="15" fill="rgb(228,24,14)" fg:x="111052" fg:w="282"/><text x="90.4116%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (282 samples, 0.23%)</title><rect x="90.1616%" y="197" width="0.2290%" height="15" fill="rgb(230,153,43)" fg:x="111052" fg:w="282"/><text x="90.4116%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (53 samples, 0.04%)</title><rect x="90.3986%" y="229" width="0.0430%" height="15" fill="rgb(231,106,12)" fg:x="111344" fg:w="53"/><text x="90.6486%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_load (53 samples, 0.04%)</title><rect x="90.3986%" y="213" width="0.0430%" height="15" fill="rgb(215,92,2)" fg:x="111344" fg:w="53"/><text x="90.6486%" y="223.50"></text></g><g><title>concurrent_queue::unbounded::Slot&lt;T&gt;::wait_write (57 samples, 0.05%)</title><rect x="90.3962%" y="245" width="0.0463%" height="15" fill="rgb(249,143,25)" fg:x="111341" fg:w="57"/><text x="90.6462%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (18 samples, 0.01%)</title><rect x="90.4490%" y="245" width="0.0146%" height="15" fill="rgb(252,7,35)" fg:x="111406" fg:w="18"/><text x="90.6990%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_load (18 samples, 0.01%)</title><rect x="90.4490%" y="229" width="0.0146%" height="15" fill="rgb(216,69,40)" fg:x="111406" fg:w="18"/><text x="90.6990%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (112 samples, 0.09%)</title><rect x="90.4636%" y="245" width="0.0909%" height="15" fill="rgb(240,36,33)" fg:x="111424" fg:w="112"/><text x="90.7136%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (112 samples, 0.09%)</title><rect x="90.4636%" y="229" width="0.0909%" height="15" fill="rgb(231,128,14)" fg:x="111424" fg:w="112"/><text x="90.7136%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (175 samples, 0.14%)</title><rect x="90.5545%" y="245" width="0.1421%" height="15" fill="rgb(245,143,14)" fg:x="111536" fg:w="175"/><text x="90.8045%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_or (175 samples, 0.14%)</title><rect x="90.5545%" y="229" width="0.1421%" height="15" fill="rgb(222,130,28)" fg:x="111536" fg:w="175"/><text x="90.8045%" y="239.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (3,883 samples, 3.15%)</title><rect x="87.6894%" y="277" width="3.1526%" height="15" fill="rgb(212,10,48)" fg:x="108007" fg:w="3883"/><text x="87.9394%" y="287.50">con..</text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (909 samples, 0.74%)</title><rect x="90.1039%" y="261" width="0.7380%" height="15" fill="rgb(254,118,45)" fg:x="110981" fg:w="909"/><text x="90.3539%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (179 samples, 0.15%)</title><rect x="90.6966%" y="245" width="0.1453%" height="15" fill="rgb(228,6,45)" fg:x="111711" fg:w="179"/><text x="90.9466%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_load (179 samples, 0.15%)</title><rect x="90.6966%" y="229" width="0.1453%" height="15" fill="rgb(241,18,35)" fg:x="111711" fg:w="179"/><text x="90.9466%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (241 samples, 0.20%)</title><rect x="90.8663%" y="213" width="0.1957%" height="15" fill="rgb(227,214,53)" fg:x="111920" fg:w="241"/><text x="91.1163%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_sub (241 samples, 0.20%)</title><rect x="90.8663%" y="197" width="0.1957%" height="15" fill="rgb(224,107,51)" fg:x="111920" fg:w="241"/><text x="91.1163%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (543 samples, 0.44%)</title><rect x="90.8419%" y="277" width="0.4409%" height="15" fill="rgb(248,60,28)" fg:x="111890" fg:w="543"/><text x="91.0919%" y="287.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (543 samples, 0.44%)</title><rect x="90.8419%" y="261" width="0.4409%" height="15" fill="rgb(249,101,23)" fg:x="111890" fg:w="543"/><text x="91.0919%" y="271.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read_unlock (534 samples, 0.43%)</title><rect x="90.8492%" y="245" width="0.4335%" height="15" fill="rgb(228,51,19)" fg:x="111899" fg:w="534"/><text x="91.0992%" y="255.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read_unlock (513 samples, 0.42%)</title><rect x="90.8663%" y="229" width="0.4165%" height="15" fill="rgb(213,20,6)" fg:x="111920" fg:w="513"/><text x="91.1163%" y="239.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::raw_unlock (272 samples, 0.22%)</title><rect x="91.0619%" y="213" width="0.2208%" height="15" fill="rgb(212,124,10)" fg:x="112161" fg:w="272"/><text x="91.3119%" y="223.50"></text></g><g><title>__GI___pthread_rwlock_unlock (272 samples, 0.22%)</title><rect x="91.0619%" y="197" width="0.2208%" height="15" fill="rgb(248,3,40)" fg:x="112161" fg:w="272"/><text x="91.3119%" y="207.50"></text></g><g><title>fastrand::usize (45 samples, 0.04%)</title><rect x="91.2828%" y="277" width="0.0365%" height="15" fill="rgb(223,178,23)" fg:x="112433" fg:w="45"/><text x="91.5328%" y="287.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (44 samples, 0.04%)</title><rect x="91.2836%" y="261" width="0.0357%" height="15" fill="rgb(240,132,45)" fg:x="112434" fg:w="44"/><text x="91.5336%" y="271.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (37 samples, 0.03%)</title><rect x="91.2893%" y="245" width="0.0300%" height="15" fill="rgb(245,164,36)" fg:x="112441" fg:w="37"/><text x="91.5393%" y="255.50"></text></g><g><title>fastrand::usize::{{closure}} (20 samples, 0.02%)</title><rect x="91.3031%" y="229" width="0.0162%" height="15" fill="rgb(231,188,53)" fg:x="112458" fg:w="20"/><text x="91.5531%" y="239.50"></text></g><g><title>fastrand::Rng::usize (20 samples, 0.02%)</title><rect x="91.3031%" y="213" width="0.0162%" height="15" fill="rgb(237,198,39)" fg:x="112458" fg:w="20"/><text x="91.5531%" y="223.50"></text></g><g><title>fastrand::Rng::gen_mod_u64 (13 samples, 0.01%)</title><rect x="91.3088%" y="197" width="0.0106%" height="15" fill="rgb(223,120,35)" fg:x="112465" fg:w="13"/><text x="91.5588%" y="207.50"></text></g><g><title>std::sync::poison::Flag::get (18 samples, 0.01%)</title><rect x="91.3193%" y="229" width="0.0146%" height="15" fill="rgb(253,107,49)" fg:x="112478" fg:w="18"/><text x="91.5693%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (18 samples, 0.01%)</title><rect x="91.3193%" y="213" width="0.0146%" height="15" fill="rgb(216,44,31)" fg:x="112478" fg:w="18"/><text x="91.5693%" y="223.50"></text></g><g><title>std::sync::rwlock::RwLockReadGuard&lt;T&gt;::new (22 samples, 0.02%)</title><rect x="91.3193%" y="261" width="0.0179%" height="15" fill="rgb(253,87,21)" fg:x="112478" fg:w="22"/><text x="91.5693%" y="271.50"></text></g><g><title>std::sync::poison::Flag::borrow (22 samples, 0.02%)</title><rect x="91.3193%" y="245" width="0.0179%" height="15" fill="rgb(226,18,2)" fg:x="112478" fg:w="22"/><text x="91.5693%" y="255.50"></text></g><g><title>__GI___pthread_rwlock_rdlock (483 samples, 0.39%)</title><rect x="91.3770%" y="229" width="0.3921%" height="15" fill="rgb(216,8,46)" fg:x="112549" fg:w="483"/><text x="91.6270%" y="239.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (8,236 samples, 6.69%)</title><rect x="85.2383%" y="293" width="6.6867%" height="15" fill="rgb(226,140,39)" fg:x="104988" fg:w="8236"/><text x="85.4883%" y="303.50">async_exe..</text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (746 samples, 0.61%)</title><rect x="91.3193%" y="277" width="0.6057%" height="15" fill="rgb(221,194,54)" fg:x="112478" fg:w="746"/><text x="91.5693%" y="287.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read (724 samples, 0.59%)</title><rect x="91.3372%" y="261" width="0.5878%" height="15" fill="rgb(213,92,11)" fg:x="112500" fg:w="724"/><text x="91.5872%" y="271.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read (696 samples, 0.57%)</title><rect x="91.3599%" y="245" width="0.5651%" height="15" fill="rgb(229,162,46)" fg:x="112528" fg:w="696"/><text x="91.6099%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (192 samples, 0.16%)</title><rect x="91.7691%" y="229" width="0.1559%" height="15" fill="rgb(214,111,36)" fg:x="113032" fg:w="192"/><text x="92.0191%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_add (192 samples, 0.16%)</title><rect x="91.7691%" y="213" width="0.1559%" height="15" fill="rgb(207,6,21)" fg:x="113032" fg:w="192"/><text x="92.0191%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (37 samples, 0.03%)</title><rect x="91.9323%" y="277" width="0.0300%" height="15" fill="rgb(213,127,38)" fg:x="113233" fg:w="37"/><text x="92.1823%" y="287.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.03%)</title><rect x="91.9323%" y="261" width="0.0300%" height="15" fill="rgb(238,118,32)" fg:x="113233" fg:w="37"/><text x="92.1823%" y="271.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (35 samples, 0.03%)</title><rect x="91.9339%" y="245" width="0.0284%" height="15" fill="rgb(240,139,39)" fg:x="113235" fg:w="35"/><text x="92.1839%" y="255.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (35 samples, 0.03%)</title><rect x="91.9339%" y="229" width="0.0284%" height="15" fill="rgb(235,10,37)" fg:x="113235" fg:w="35"/><text x="92.1839%" y="239.50"></text></g><g><title>__GI___pthread_mutex_unlock (35 samples, 0.03%)</title><rect x="91.9339%" y="213" width="0.0284%" height="15" fill="rgb(249,171,38)" fg:x="113235" fg:w="35"/><text x="92.1839%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (80 samples, 0.06%)</title><rect x="91.9623%" y="277" width="0.0650%" height="15" fill="rgb(242,144,32)" fg:x="113270" fg:w="80"/><text x="92.2123%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (80 samples, 0.06%)</title><rect x="91.9623%" y="261" width="0.0650%" height="15" fill="rgb(217,117,21)" fg:x="113270" fg:w="80"/><text x="92.2123%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (26 samples, 0.02%)</title><rect x="92.0484%" y="197" width="0.0211%" height="15" fill="rgb(249,87,1)" fg:x="113376" fg:w="26"/><text x="92.2984%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (26 samples, 0.02%)</title><rect x="92.0484%" y="181" width="0.0211%" height="15" fill="rgb(248,196,48)" fg:x="113376" fg:w="26"/><text x="92.2984%" y="191.50"></text></g><g><title>async_io::reactor::Reactor::notify (70 samples, 0.06%)</title><rect x="92.0370%" y="229" width="0.0568%" height="15" fill="rgb(251,206,33)" fg:x="113362" fg:w="70"/><text x="92.2870%" y="239.50"></text></g><g><title>polling::Poller::notify (56 samples, 0.05%)</title><rect x="92.0484%" y="213" width="0.0455%" height="15" fill="rgb(232,141,28)" fg:x="113376" fg:w="56"/><text x="92.2984%" y="223.50"></text></g><g><title>polling::epoll::Poller::notify (29 samples, 0.02%)</title><rect x="92.0703%" y="197" width="0.0235%" height="15" fill="rgb(209,167,14)" fg:x="113403" fg:w="29"/><text x="92.3203%" y="207.50"></text></g><g><title>__libc_write (27 samples, 0.02%)</title><rect x="92.0719%" y="181" width="0.0219%" height="15" fill="rgb(225,11,50)" fg:x="113405" fg:w="27"/><text x="92.3219%" y="191.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (100 samples, 0.08%)</title><rect x="92.1499%" y="197" width="0.0812%" height="15" fill="rgb(209,50,20)" fg:x="113501" fg:w="100"/><text x="92.3999%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_swap (100 samples, 0.08%)</title><rect x="92.1499%" y="181" width="0.0812%" height="15" fill="rgb(212,17,46)" fg:x="113501" fg:w="100"/><text x="92.3999%" y="191.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (130 samples, 0.11%)</title><rect x="92.2311%" y="197" width="0.1055%" height="15" fill="rgb(216,101,39)" fg:x="113601" fg:w="130"/><text x="92.4811%" y="207.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (130 samples, 0.11%)</title><rect x="92.2311%" y="181" width="0.1055%" height="15" fill="rgb(212,228,48)" fg:x="113601" fg:w="130"/><text x="92.4811%" y="191.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (130 samples, 0.11%)</title><rect x="92.2311%" y="165" width="0.1055%" height="15" fill="rgb(250,6,50)" fg:x="113601" fg:w="130"/><text x="92.4811%" y="175.50"></text></g><g><title>__pthread_cond_signal (130 samples, 0.11%)</title><rect x="92.2311%" y="149" width="0.1055%" height="15" fill="rgb(250,160,48)" fg:x="113601" fg:w="130"/><text x="92.4811%" y="159.50"></text></g><g><title>parking::Unparker::unpark (406 samples, 0.33%)</title><rect x="92.1012%" y="229" width="0.3296%" height="15" fill="rgb(244,216,33)" fg:x="113441" fg:w="406"/><text x="92.3512%" y="239.50"></text></g><g><title>parking::Inner::unpark (368 samples, 0.30%)</title><rect x="92.1320%" y="213" width="0.2988%" height="15" fill="rgb(207,157,5)" fg:x="113479" fg:w="368"/><text x="92.3820%" y="223.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (116 samples, 0.09%)</title><rect x="92.3366%" y="197" width="0.0942%" height="15" fill="rgb(228,199,8)" fg:x="113731" fg:w="116"/><text x="92.5866%" y="207.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (113 samples, 0.09%)</title><rect x="92.3390%" y="181" width="0.0917%" height="15" fill="rgb(227,80,20)" fg:x="113734" fg:w="113"/><text x="92.5890%" y="191.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (113 samples, 0.09%)</title><rect x="92.3390%" y="165" width="0.0917%" height="15" fill="rgb(222,9,33)" fg:x="113734" fg:w="113"/><text x="92.5890%" y="175.50"></text></g><g><title>__GI___pthread_mutex_lock (113 samples, 0.09%)</title><rect x="92.3390%" y="149" width="0.0917%" height="15" fill="rgb(239,44,28)" fg:x="113734" fg:w="113"/><text x="92.5890%" y="159.50"></text></g><g><title>async_io::driver::block_on::IO_POLLING::__getit (27 samples, 0.02%)</title><rect x="92.4308%" y="197" width="0.0219%" height="15" fill="rgb(249,187,43)" fg:x="113847" fg:w="27"/><text x="92.6808%" y="207.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (27 samples, 0.02%)</title><rect x="92.4308%" y="181" width="0.0219%" height="15" fill="rgb(216,141,28)" fg:x="113847" fg:w="27"/><text x="92.6808%" y="191.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (25 samples, 0.02%)</title><rect x="92.4324%" y="165" width="0.0203%" height="15" fill="rgb(230,154,53)" fg:x="113849" fg:w="25"/><text x="92.6824%" y="175.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (25 samples, 0.02%)</title><rect x="92.4324%" y="149" width="0.0203%" height="15" fill="rgb(227,82,4)" fg:x="113849" fg:w="25"/><text x="92.6824%" y="159.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (524 samples, 0.43%)</title><rect x="92.0289%" y="245" width="0.4254%" height="15" fill="rgb(220,107,16)" fg:x="113352" fg:w="524"/><text x="92.2789%" y="255.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (29 samples, 0.02%)</title><rect x="92.4308%" y="229" width="0.0235%" height="15" fill="rgb(207,187,2)" fg:x="113847" fg:w="29"/><text x="92.6808%" y="239.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (29 samples, 0.02%)</title><rect x="92.4308%" y="213" width="0.0235%" height="15" fill="rgb(210,162,52)" fg:x="113847" fg:w="29"/><text x="92.6808%" y="223.50"></text></g><g><title>core::task::wake::Waker::wake (608 samples, 0.49%)</title><rect x="92.0273%" y="277" width="0.4936%" height="15" fill="rgb(217,216,49)" fg:x="113350" fg:w="608"/><text x="92.2773%" y="287.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (607 samples, 0.49%)</title><rect x="92.0281%" y="261" width="0.4928%" height="15" fill="rgb(218,146,49)" fg:x="113351" fg:w="607"/><text x="92.2781%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (82 samples, 0.07%)</title><rect x="92.4543%" y="245" width="0.0666%" height="15" fill="rgb(216,55,40)" fg:x="113876" fg:w="82"/><text x="92.7043%" y="255.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (82 samples, 0.07%)</title><rect x="92.4543%" y="229" width="0.0666%" height="15" fill="rgb(208,196,21)" fg:x="113876" fg:w="82"/><text x="92.7043%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (74 samples, 0.06%)</title><rect x="92.4608%" y="213" width="0.0601%" height="15" fill="rgb(242,117,42)" fg:x="113884" fg:w="74"/><text x="92.7108%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_sub (74 samples, 0.06%)</title><rect x="92.4608%" y="197" width="0.0601%" height="15" fill="rgb(210,11,23)" fg:x="113884" fg:w="74"/><text x="92.7108%" y="207.50"></text></g><g><title>async_executor::State::notify (780 samples, 0.63%)</title><rect x="91.9250%" y="293" width="0.6333%" height="15" fill="rgb(217,110,2)" fg:x="113224" fg:w="780"/><text x="92.1750%" y="303.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (46 samples, 0.04%)</title><rect x="92.5209%" y="277" width="0.0373%" height="15" fill="rgb(229,77,54)" fg:x="113958" fg:w="46"/><text x="92.7709%" y="287.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (43 samples, 0.03%)</title><rect x="92.5233%" y="261" width="0.0349%" height="15" fill="rgb(218,53,16)" fg:x="113961" fg:w="43"/><text x="92.7733%" y="271.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (43 samples, 0.03%)</title><rect x="92.5233%" y="245" width="0.0349%" height="15" fill="rgb(215,38,13)" fg:x="113961" fg:w="43"/><text x="92.7733%" y="255.50"></text></g><g><title>__GI___pthread_mutex_lock (43 samples, 0.03%)</title><rect x="92.5233%" y="229" width="0.0349%" height="15" fill="rgb(235,42,18)" fg:x="113961" fg:w="43"/><text x="92.7733%" y="239.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (222 samples, 0.18%)</title><rect x="92.5729%" y="261" width="0.1802%" height="15" fill="rgb(219,66,54)" fg:x="114022" fg:w="222"/><text x="92.8229%" y="271.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (218 samples, 0.18%)</title><rect x="92.5761%" y="245" width="0.1770%" height="15" fill="rgb(222,205,4)" fg:x="114026" fg:w="218"/><text x="92.8261%" y="255.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (213 samples, 0.17%)</title><rect x="92.5802%" y="229" width="0.1729%" height="15" fill="rgb(227,213,46)" fg:x="114031" fg:w="213"/><text x="92.8302%" y="239.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (213 samples, 0.17%)</title><rect x="92.5802%" y="213" width="0.1729%" height="15" fill="rgb(250,145,42)" fg:x="114031" fg:w="213"/><text x="92.8302%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (213 samples, 0.17%)</title><rect x="92.5802%" y="197" width="0.1729%" height="15" fill="rgb(219,15,2)" fg:x="114031" fg:w="213"/><text x="92.8302%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_add (213 samples, 0.17%)</title><rect x="92.5802%" y="181" width="0.1729%" height="15" fill="rgb(231,181,52)" fg:x="114031" fg:w="213"/><text x="92.8302%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (13 samples, 0.01%)</title><rect x="92.7531%" y="261" width="0.0106%" height="15" fill="rgb(235,1,42)" fg:x="114244" fg:w="13"/><text x="93.0031%" y="271.50"></text></g><g><title>async_executor::Sleepers::insert (273 samples, 0.22%)</title><rect x="92.5712%" y="277" width="0.2216%" height="15" fill="rgb(249,88,27)" fg:x="114020" fg:w="273"/><text x="92.8212%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (36 samples, 0.03%)</title><rect x="92.7637%" y="261" width="0.0292%" height="15" fill="rgb(235,145,16)" fg:x="114257" fg:w="36"/><text x="93.0137%" y="271.50"></text></g><g><title>core::ptr::write (32 samples, 0.03%)</title><rect x="92.7669%" y="245" width="0.0260%" height="15" fill="rgb(237,114,19)" fg:x="114261" fg:w="32"/><text x="93.0169%" y="255.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.02%)</title><rect x="92.8570%" y="261" width="0.0195%" height="15" fill="rgb(238,51,50)" fg:x="114372" fg:w="24"/><text x="93.1070%" y="271.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (50 samples, 0.04%)</title><rect x="92.8765%" y="261" width="0.0406%" height="15" fill="rgb(205,194,25)" fg:x="114396" fg:w="50"/><text x="93.1265%" y="271.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (49 samples, 0.04%)</title><rect x="92.8773%" y="245" width="0.0398%" height="15" fill="rgb(215,203,17)" fg:x="114397" fg:w="49"/><text x="93.1273%" y="255.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (49 samples, 0.04%)</title><rect x="92.8773%" y="229" width="0.0398%" height="15" fill="rgb(233,112,49)" fg:x="114397" fg:w="49"/><text x="93.1273%" y="239.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (49 samples, 0.04%)</title><rect x="92.8773%" y="213" width="0.0398%" height="15" fill="rgb(241,130,26)" fg:x="114397" fg:w="49"/><text x="93.1273%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (49 samples, 0.04%)</title><rect x="92.8773%" y="197" width="0.0398%" height="15" fill="rgb(252,223,19)" fg:x="114397" fg:w="49"/><text x="93.1273%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_add (49 samples, 0.04%)</title><rect x="92.8773%" y="181" width="0.0398%" height="15" fill="rgb(211,95,25)" fg:x="114397" fg:w="49"/><text x="93.1273%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (24 samples, 0.02%)</title><rect x="92.9171%" y="261" width="0.0195%" height="15" fill="rgb(251,182,27)" fg:x="114446" fg:w="24"/><text x="93.1671%" y="271.50"></text></g><g><title>core::ptr::write (23 samples, 0.02%)</title><rect x="92.9179%" y="245" width="0.0187%" height="15" fill="rgb(238,24,4)" fg:x="114447" fg:w="23"/><text x="93.1679%" y="255.50"></text></g><g><title>async_executor::Sleepers::update (191 samples, 0.16%)</title><rect x="92.7986%" y="277" width="0.1551%" height="15" fill="rgb(224,220,25)" fg:x="114300" fg:w="191"/><text x="93.0486%" y="287.50"></text></g><g><title>core::task::wake::Waker::will_wake (21 samples, 0.02%)</title><rect x="92.9366%" y="261" width="0.0170%" height="15" fill="rgb(239,133,26)" fg:x="114470" fg:w="21"/><text x="93.1866%" y="271.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (21 samples, 0.02%)</title><rect x="92.9366%" y="245" width="0.0170%" height="15" fill="rgb(211,94,48)" fg:x="114470" fg:w="21"/><text x="93.1866%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (13 samples, 0.01%)</title><rect x="92.9431%" y="229" width="0.0106%" height="15" fill="rgb(239,87,6)" fg:x="114478" fg:w="13"/><text x="93.1931%" y="239.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (13 samples, 0.01%)</title><rect x="92.9431%" y="213" width="0.0106%" height="15" fill="rgb(227,62,0)" fg:x="114478" fg:w="13"/><text x="93.1931%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (272 samples, 0.22%)</title><rect x="92.9536%" y="277" width="0.2208%" height="15" fill="rgb(211,226,4)" fg:x="114491" fg:w="272"/><text x="93.2036%" y="287.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (272 samples, 0.22%)</title><rect x="92.9536%" y="261" width="0.2208%" height="15" fill="rgb(253,38,52)" fg:x="114491" fg:w="272"/><text x="93.2036%" y="271.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (265 samples, 0.22%)</title><rect x="92.9593%" y="245" width="0.2151%" height="15" fill="rgb(229,126,40)" fg:x="114498" fg:w="265"/><text x="93.2093%" y="255.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (263 samples, 0.21%)</title><rect x="92.9609%" y="229" width="0.2135%" height="15" fill="rgb(229,165,44)" fg:x="114500" fg:w="263"/><text x="93.2109%" y="239.50"></text></g><g><title>__GI___pthread_mutex_unlock (261 samples, 0.21%)</title><rect x="92.9626%" y="213" width="0.2119%" height="15" fill="rgb(247,95,47)" fg:x="114502" fg:w="261"/><text x="93.2126%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (281 samples, 0.23%)</title><rect x="93.1745%" y="277" width="0.2281%" height="15" fill="rgb(216,140,30)" fg:x="114763" fg:w="281"/><text x="93.4245%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_swap (281 samples, 0.23%)</title><rect x="93.1745%" y="261" width="0.2281%" height="15" fill="rgb(246,214,8)" fg:x="114763" fg:w="281"/><text x="93.4245%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (206 samples, 0.17%)</title><rect x="93.4026%" y="277" width="0.1672%" height="15" fill="rgb(227,224,15)" fg:x="115044" fg:w="206"/><text x="93.6526%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_store (206 samples, 0.17%)</title><rect x="93.4026%" y="261" width="0.1672%" height="15" fill="rgb(233,175,4)" fg:x="115044" fg:w="206"/><text x="93.6526%" y="271.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (17 samples, 0.01%)</title><rect x="93.5699%" y="261" width="0.0138%" height="15" fill="rgb(221,66,45)" fg:x="115250" fg:w="17"/><text x="93.8199%" y="271.50"></text></g><g><title>std::sync::poison::Flag::borrow (17 samples, 0.01%)</title><rect x="93.5699%" y="245" width="0.0138%" height="15" fill="rgb(221,178,18)" fg:x="115250" fg:w="17"/><text x="93.8199%" y="255.50"></text></g><g><title>async_executor::Ticker::sleep (1,909 samples, 1.55%)</title><rect x="92.5583%" y="293" width="1.5499%" height="15" fill="rgb(213,81,29)" fg:x="114004" fg:w="1909"/><text x="92.8083%" y="303.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (663 samples, 0.54%)</title><rect x="93.5699%" y="277" width="0.5383%" height="15" fill="rgb(220,89,49)" fg:x="115250" fg:w="663"/><text x="93.8199%" y="287.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (646 samples, 0.52%)</title><rect x="93.5837%" y="261" width="0.5245%" height="15" fill="rgb(227,60,33)" fg:x="115267" fg:w="646"/><text x="93.8337%" y="271.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (634 samples, 0.51%)</title><rect x="93.5934%" y="245" width="0.5147%" height="15" fill="rgb(205,113,12)" fg:x="115279" fg:w="634"/><text x="93.8434%" y="255.50"></text></g><g><title>__GI___pthread_mutex_lock (634 samples, 0.51%)</title><rect x="93.5934%" y="229" width="0.5147%" height="15" fill="rgb(211,32,1)" fg:x="115279" fg:w="634"/><text x="93.8434%" y="239.50"></text></g><g><title>__lll_lock_wait (38 samples, 0.03%)</title><rect x="94.0773%" y="213" width="0.0309%" height="15" fill="rgb(246,2,12)" fg:x="115875" fg:w="38"/><text x="94.3273%" y="223.50"></text></g><g><title>core::intrinsics::copy (16 samples, 0.01%)</title><rect x="94.1560%" y="245" width="0.0130%" height="15" fill="rgb(243,37,27)" fg:x="115972" fg:w="16"/><text x="94.4060%" y="255.50"></text></g><g><title>[libc-2.31.so] (16 samples, 0.01%)</title><rect x="94.1560%" y="229" width="0.0130%" height="15" fill="rgb(248,211,31)" fg:x="115972" fg:w="16"/><text x="94.4060%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::remove (24 samples, 0.02%)</title><rect x="94.1544%" y="261" width="0.0195%" height="15" fill="rgb(242,146,47)" fg:x="115970" fg:w="24"/><text x="94.4044%" y="271.50"></text></g><g><title>async_executor::Sleepers::remove (156 samples, 0.13%)</title><rect x="94.1122%" y="277" width="0.1267%" height="15" fill="rgb(206,70,20)" fg:x="115918" fg:w="156"/><text x="94.3622%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,core::task::wake::Waker)&gt; (80 samples, 0.06%)</title><rect x="94.1739%" y="261" width="0.0650%" height="15" fill="rgb(215,10,51)" fg:x="115994" fg:w="80"/><text x="94.4239%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (80 samples, 0.06%)</title><rect x="94.1739%" y="245" width="0.0650%" height="15" fill="rgb(243,178,53)" fg:x="115994" fg:w="80"/><text x="94.4239%" y="255.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (80 samples, 0.06%)</title><rect x="94.1739%" y="229" width="0.0650%" height="15" fill="rgb(233,221,20)" fg:x="115994" fg:w="80"/><text x="94.4239%" y="239.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::drop_waker (80 samples, 0.06%)</title><rect x="94.1739%" y="213" width="0.0650%" height="15" fill="rgb(218,95,35)" fg:x="115994" fg:w="80"/><text x="94.4239%" y="223.50"></text></g><g><title>core::mem::drop (79 samples, 0.06%)</title><rect x="94.1747%" y="197" width="0.0641%" height="15" fill="rgb(229,13,5)" fg:x="115995" fg:w="79"/><text x="94.4247%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (79 samples, 0.06%)</title><rect x="94.1747%" y="181" width="0.0641%" height="15" fill="rgb(252,164,30)" fg:x="115995" fg:w="79"/><text x="94.4247%" y="191.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (79 samples, 0.06%)</title><rect x="94.1747%" y="165" width="0.0641%" height="15" fill="rgb(232,68,36)" fg:x="115995" fg:w="79"/><text x="94.4247%" y="175.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (79 samples, 0.06%)</title><rect x="94.1747%" y="149" width="0.0641%" height="15" fill="rgb(219,59,54)" fg:x="115995" fg:w="79"/><text x="94.4247%" y="159.50"></text></g><g><title>core::sync::atomic::atomic_sub (79 samples, 0.06%)</title><rect x="94.1747%" y="133" width="0.0641%" height="15" fill="rgb(250,92,33)" fg:x="115995" fg:w="79"/><text x="94.4247%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (120 samples, 0.10%)</title><rect x="94.2389%" y="277" width="0.0974%" height="15" fill="rgb(229,162,54)" fg:x="116074" fg:w="120"/><text x="94.4889%" y="287.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (120 samples, 0.10%)</title><rect x="94.2389%" y="261" width="0.0974%" height="15" fill="rgb(244,114,52)" fg:x="116074" fg:w="120"/><text x="94.4889%" y="271.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (117 samples, 0.09%)</title><rect x="94.2413%" y="245" width="0.0950%" height="15" fill="rgb(212,211,43)" fg:x="116077" fg:w="117"/><text x="94.4913%" y="255.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (117 samples, 0.09%)</title><rect x="94.2413%" y="229" width="0.0950%" height="15" fill="rgb(226,147,8)" fg:x="116077" fg:w="117"/><text x="94.4913%" y="239.50"></text></g><g><title>__GI___pthread_mutex_unlock (116 samples, 0.09%)</title><rect x="94.2421%" y="213" width="0.0942%" height="15" fill="rgb(226,23,13)" fg:x="116078" fg:w="116"/><text x="94.4921%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (107 samples, 0.09%)</title><rect x="94.3363%" y="277" width="0.0869%" height="15" fill="rgb(240,63,4)" fg:x="116194" fg:w="107"/><text x="94.5863%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_swap (107 samples, 0.09%)</title><rect x="94.3363%" y="261" width="0.0869%" height="15" fill="rgb(221,1,32)" fg:x="116194" fg:w="107"/><text x="94.5863%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (101 samples, 0.08%)</title><rect x="94.4232%" y="277" width="0.0820%" height="15" fill="rgb(242,117,10)" fg:x="116301" fg:w="101"/><text x="94.6732%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_swap (101 samples, 0.08%)</title><rect x="94.4232%" y="261" width="0.0820%" height="15" fill="rgb(249,172,44)" fg:x="116301" fg:w="101"/><text x="94.6732%" y="271.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,615 samples, 9.43%)</title><rect x="85.2050%" y="357" width="9.4301%" height="15" fill="rgb(244,46,45)" fg:x="104947" fg:w="11615"/><text x="85.4550%" y="367.50">&lt;core::future..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (11,615 samples, 9.43%)</title><rect x="85.2050%" y="341" width="9.4301%" height="15" fill="rgb(206,43,17)" fg:x="104947" fg:w="11615"/><text x="85.4550%" y="351.50">async_executo..</text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (11,595 samples, 9.41%)</title><rect x="85.2212%" y="325" width="9.4138%" height="15" fill="rgb(239,218,39)" fg:x="104967" fg:w="11595"/><text x="85.4712%" y="335.50">&lt;futures_lite..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (11,584 samples, 9.40%)</title><rect x="85.2302%" y="309" width="9.4049%" height="15" fill="rgb(208,169,54)" fg:x="104978" fg:w="11584"/><text x="85.4802%" y="319.50">async_executo..</text></g><g><title>async_executor::Ticker::wake (649 samples, 0.53%)</title><rect x="94.1081%" y="293" width="0.5269%" height="15" fill="rgb(247,25,42)" fg:x="115913" fg:w="649"/><text x="94.3581%" y="303.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (160 samples, 0.13%)</title><rect x="94.5052%" y="277" width="0.1299%" height="15" fill="rgb(226,23,31)" fg:x="116402" fg:w="160"/><text x="94.7552%" y="287.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (157 samples, 0.13%)</title><rect x="94.5076%" y="261" width="0.1275%" height="15" fill="rgb(247,16,28)" fg:x="116405" fg:w="157"/><text x="94.7576%" y="271.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (152 samples, 0.12%)</title><rect x="94.5117%" y="245" width="0.1234%" height="15" fill="rgb(231,147,38)" fg:x="116410" fg:w="152"/><text x="94.7617%" y="255.50"></text></g><g><title>__GI___pthread_mutex_lock (152 samples, 0.12%)</title><rect x="94.5117%" y="229" width="0.1234%" height="15" fill="rgb(253,81,48)" fg:x="116410" fg:w="152"/><text x="94.7617%" y="239.50"></text></g><g><title>__lll_lock_wait (21 samples, 0.02%)</title><rect x="94.6180%" y="213" width="0.0170%" height="15" fill="rgb(249,222,43)" fg:x="116541" fg:w="21"/><text x="94.8680%" y="223.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,750 samples, 9.54%)</title><rect x="85.1555%" y="389" width="9.5397%" height="15" fill="rgb(221,3,27)" fg:x="104886" fg:w="11750"/><text x="85.4055%" y="399.50">&lt;core::future:..</text></g><g><title>async_executor::Runner::runnable::{{closure}} (11,746 samples, 9.54%)</title><rect x="85.1587%" y="373" width="9.5364%" height="15" fill="rgb(228,180,5)" fg:x="104890" fg:w="11746"/><text x="85.4087%" y="383.50">async_executor..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (72 samples, 0.06%)</title><rect x="94.6367%" y="357" width="0.0585%" height="15" fill="rgb(227,131,42)" fg:x="116564" fg:w="72"/><text x="94.8867%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_add (72 samples, 0.06%)</title><rect x="94.6367%" y="341" width="0.0585%" height="15" fill="rgb(212,3,39)" fg:x="116564" fg:w="72"/><text x="94.8867%" y="351.50"></text></g><g><title>[libc-2.31.so] (67 samples, 0.05%)</title><rect x="94.9817%" y="245" width="0.0544%" height="15" fill="rgb(226,45,5)" fg:x="116989" fg:w="67"/><text x="95.2317%" y="255.50"></text></g><g><title>async_std::task::task_locals_wrapper::CURRENT::__getit (24 samples, 0.02%)</title><rect x="95.0361%" y="245" width="0.0195%" height="15" fill="rgb(215,167,45)" fg:x="117056" fg:w="24"/><text x="95.2861%" y="255.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (23 samples, 0.02%)</title><rect x="95.0369%" y="229" width="0.0187%" height="15" fill="rgb(250,218,53)" fg:x="117057" fg:w="23"/><text x="95.2869%" y="239.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (23 samples, 0.02%)</title><rect x="95.0369%" y="213" width="0.0187%" height="15" fill="rgb(207,140,0)" fg:x="117057" fg:w="23"/><text x="95.2869%" y="223.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (23 samples, 0.02%)</title><rect x="95.0369%" y="197" width="0.0187%" height="15" fill="rgb(238,133,51)" fg:x="117057" fg:w="23"/><text x="95.2869%" y="207.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (29 samples, 0.02%)</title><rect x="95.0597%" y="229" width="0.0235%" height="15" fill="rgb(218,203,53)" fg:x="117085" fg:w="29"/><text x="95.3097%" y="239.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (28 samples, 0.02%)</title><rect x="95.0605%" y="213" width="0.0227%" height="15" fill="rgb(226,184,25)" fg:x="117086" fg:w="28"/><text x="95.3105%" y="223.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (321 samples, 0.26%)</title><rect x="94.8307%" y="357" width="0.2606%" height="15" fill="rgb(231,121,21)" fg:x="116803" fg:w="321"/><text x="95.0807%" y="367.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (321 samples, 0.26%)</title><rect x="94.8307%" y="341" width="0.2606%" height="15" fill="rgb(251,14,34)" fg:x="116803" fg:w="321"/><text x="95.0807%" y="351.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (308 samples, 0.25%)</title><rect x="94.8413%" y="325" width="0.2501%" height="15" fill="rgb(249,193,11)" fg:x="116816" fg:w="308"/><text x="95.0913%" y="335.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (146 samples, 0.12%)</title><rect x="94.9728%" y="309" width="0.1185%" height="15" fill="rgb(220,172,37)" fg:x="116978" fg:w="146"/><text x="95.2228%" y="319.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (146 samples, 0.12%)</title><rect x="94.9728%" y="293" width="0.1185%" height="15" fill="rgb(231,229,43)" fg:x="116978" fg:w="146"/><text x="95.2228%" y="303.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (144 samples, 0.12%)</title><rect x="94.9744%" y="277" width="0.1169%" height="15" fill="rgb(250,161,5)" fg:x="116980" fg:w="144"/><text x="95.2244%" y="287.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (142 samples, 0.12%)</title><rect x="94.9760%" y="261" width="0.1153%" height="15" fill="rgb(218,225,18)" fg:x="116982" fg:w="142"/><text x="95.2260%" y="271.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (44 samples, 0.04%)</title><rect x="95.0556%" y="245" width="0.0357%" height="15" fill="rgb(245,45,42)" fg:x="117080" fg:w="44"/><text x="95.3056%" y="255.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_ref (55 samples, 0.04%)</title><rect x="95.0913%" y="357" width="0.0447%" height="15" fill="rgb(211,115,1)" fg:x="117124" fg:w="55"/><text x="95.3413%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (52 samples, 0.04%)</title><rect x="95.0938%" y="341" width="0.0422%" height="15" fill="rgb(248,133,52)" fg:x="117127" fg:w="52"/><text x="95.3438%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_sub (52 samples, 0.04%)</title><rect x="95.0938%" y="325" width="0.0422%" height="15" fill="rgb(238,100,21)" fg:x="117127" fg:w="52"/><text x="95.3438%" y="335.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (13 samples, 0.01%)</title><rect x="95.1376%" y="277" width="0.0106%" height="15" fill="rgb(247,144,11)" fg:x="117181" fg:w="13"/><text x="95.3876%" y="287.50"></text></g><g><title>core::task::wake::Waker::wake (18 samples, 0.01%)</title><rect x="95.1376%" y="309" width="0.0146%" height="15" fill="rgb(206,164,16)" fg:x="117181" fg:w="18"/><text x="95.3876%" y="319.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (18 samples, 0.01%)</title><rect x="95.1376%" y="293" width="0.0146%" height="15" fill="rgb(222,34,3)" fg:x="117181" fg:w="18"/><text x="95.3876%" y="303.50"></text></g><g><title>async_executor::State::notify (22 samples, 0.02%)</title><rect x="95.1360%" y="325" width="0.0179%" height="15" fill="rgb(248,82,4)" fg:x="117179" fg:w="22"/><text x="95.3860%" y="335.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (34 samples, 0.03%)</title><rect x="95.1360%" y="341" width="0.0276%" height="15" fill="rgb(228,81,46)" fg:x="117179" fg:w="34"/><text x="95.3860%" y="351.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::schedule (36 samples, 0.03%)</title><rect x="95.1360%" y="357" width="0.0292%" height="15" fill="rgb(227,67,47)" fg:x="117179" fg:w="36"/><text x="95.3860%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (351 samples, 0.28%)</title><rect x="95.1652%" y="357" width="0.2850%" height="15" fill="rgb(215,93,53)" fg:x="117215" fg:w="351"/><text x="95.4152%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (351 samples, 0.28%)</title><rect x="95.1652%" y="341" width="0.2850%" height="15" fill="rgb(248,194,39)" fg:x="117215" fg:w="351"/><text x="95.4152%" y="351.50"></text></g><g><title>async_task::runnable::Runnable::run (948 samples, 0.77%)</title><rect x="94.6951%" y="389" width="0.7697%" height="15" fill="rgb(215,5,19)" fg:x="116636" fg:w="948"/><text x="94.9451%" y="399.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (873 samples, 0.71%)</title><rect x="94.7560%" y="373" width="0.7088%" height="15" fill="rgb(226,215,51)" fg:x="116711" fg:w="873"/><text x="95.0060%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (18 samples, 0.01%)</title><rect x="95.4502%" y="357" width="0.0146%" height="15" fill="rgb(225,56,26)" fg:x="117566" fg:w="18"/><text x="95.7002%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_load (18 samples, 0.01%)</title><rect x="95.4502%" y="341" width="0.0146%" height="15" fill="rgb(222,75,29)" fg:x="117566" fg:w="18"/><text x="95.7002%" y="351.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (12,758 samples, 10.36%)</title><rect x="85.1360%" y="437" width="10.3580%" height="15" fill="rgb(236,139,6)" fg:x="104862" fg:w="12758"/><text x="85.3860%" y="447.50">&lt;futures_lite::..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,758 samples, 10.36%)</title><rect x="85.1360%" y="421" width="10.3580%" height="15" fill="rgb(223,137,36)" fg:x="104862" fg:w="12758"/><text x="85.3860%" y="431.50">&lt;core::future::..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (12,756 samples, 10.36%)</title><rect x="85.1376%" y="405" width="10.3564%" height="15" fill="rgb(226,99,2)" fg:x="104864" fg:w="12756"/><text x="85.3876%" y="415.50">async_executor:..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (36 samples, 0.03%)</title><rect x="95.4648%" y="389" width="0.0292%" height="15" fill="rgb(206,133,23)" fg:x="117584" fg:w="36"/><text x="95.7148%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (36 samples, 0.03%)</title><rect x="95.4648%" y="373" width="0.0292%" height="15" fill="rgb(243,173,15)" fg:x="117584" fg:w="36"/><text x="95.7148%" y="383.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (12,788 samples, 10.38%)</title><rect x="85.1149%" y="453" width="10.3824%" height="15" fill="rgb(228,69,28)" fg:x="104836" fg:w="12788"/><text x="85.3649%" y="463.50">async_executor:..</text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (27 samples, 0.02%)</title><rect x="95.6199%" y="197" width="0.0219%" height="15" fill="rgb(212,51,22)" fg:x="117775" fg:w="27"/><text x="95.8699%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (27 samples, 0.02%)</title><rect x="95.6199%" y="181" width="0.0219%" height="15" fill="rgb(227,113,0)" fg:x="117775" fg:w="27"/><text x="95.8699%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (22 samples, 0.02%)</title><rect x="95.6239%" y="165" width="0.0179%" height="15" fill="rgb(252,84,27)" fg:x="117780" fg:w="22"/><text x="95.8739%" y="175.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (19 samples, 0.02%)</title><rect x="95.6264%" y="149" width="0.0154%" height="15" fill="rgb(223,145,39)" fg:x="117783" fg:w="19"/><text x="95.8764%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (19 samples, 0.02%)</title><rect x="95.6264%" y="133" width="0.0154%" height="15" fill="rgb(239,219,30)" fg:x="117783" fg:w="19"/><text x="95.8764%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (18 samples, 0.01%)</title><rect x="95.6272%" y="117" width="0.0146%" height="15" fill="rgb(224,196,39)" fg:x="117784" fg:w="18"/><text x="95.8772%" y="127.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (18 samples, 0.01%)</title><rect x="95.6272%" y="101" width="0.0146%" height="15" fill="rgb(205,35,43)" fg:x="117784" fg:w="18"/><text x="95.8772%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.02%)</title><rect x="95.6199%" y="245" width="0.0235%" height="15" fill="rgb(228,201,21)" fg:x="117775" fg:w="29"/><text x="95.8699%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (29 samples, 0.02%)</title><rect x="95.6199%" y="229" width="0.0235%" height="15" fill="rgb(237,118,16)" fg:x="117775" fg:w="29"/><text x="95.8699%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (29 samples, 0.02%)</title><rect x="95.6199%" y="213" width="0.0235%" height="15" fill="rgb(241,17,19)" fg:x="117775" fg:w="29"/><text x="95.8699%" y="223.50"></text></g><g><title>concurrent_queue::full_fence (65 samples, 0.05%)</title><rect x="95.6759%" y="213" width="0.0528%" height="15" fill="rgb(214,10,25)" fg:x="117844" fg:w="65"/><text x="95.9259%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (63 samples, 0.05%)</title><rect x="95.6775%" y="197" width="0.0511%" height="15" fill="rgb(238,37,29)" fg:x="117846" fg:w="63"/><text x="95.9275%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (63 samples, 0.05%)</title><rect x="95.6775%" y="181" width="0.0511%" height="15" fill="rgb(253,83,25)" fg:x="117846" fg:w="63"/><text x="95.9275%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (63 samples, 0.05%)</title><rect x="95.6775%" y="165" width="0.0511%" height="15" fill="rgb(234,192,12)" fg:x="117846" fg:w="63"/><text x="95.9275%" y="175.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (160 samples, 0.13%)</title><rect x="95.6580%" y="229" width="0.1299%" height="15" fill="rgb(241,216,45)" fg:x="117822" fg:w="160"/><text x="95.9080%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (73 samples, 0.06%)</title><rect x="95.7287%" y="213" width="0.0593%" height="15" fill="rgb(242,22,33)" fg:x="117909" fg:w="73"/><text x="95.9787%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_load (73 samples, 0.06%)</title><rect x="95.7287%" y="197" width="0.0593%" height="15" fill="rgb(231,105,49)" fg:x="117909" fg:w="73"/><text x="95.9787%" y="207.50"></text></g><g><title>concurrent_queue::full_fence (50 samples, 0.04%)</title><rect x="95.7961%" y="213" width="0.0406%" height="15" fill="rgb(218,204,15)" fg:x="117992" fg:w="50"/><text x="96.0461%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (49 samples, 0.04%)</title><rect x="95.7969%" y="197" width="0.0398%" height="15" fill="rgb(235,138,41)" fg:x="117993" fg:w="49"/><text x="96.0469%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (49 samples, 0.04%)</title><rect x="95.7969%" y="181" width="0.0398%" height="15" fill="rgb(246,0,9)" fg:x="117993" fg:w="49"/><text x="96.0469%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (49 samples, 0.04%)</title><rect x="95.7969%" y="165" width="0.0398%" height="15" fill="rgb(210,74,4)" fg:x="117993" fg:w="49"/><text x="96.0469%" y="175.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (284 samples, 0.23%)</title><rect x="95.6434%" y="245" width="0.2306%" height="15" fill="rgb(250,60,41)" fg:x="117804" fg:w="284"/><text x="95.8934%" y="255.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (106 samples, 0.09%)</title><rect x="95.7879%" y="229" width="0.0861%" height="15" fill="rgb(220,115,12)" fg:x="117982" fg:w="106"/><text x="96.0379%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (42 samples, 0.03%)</title><rect x="95.8399%" y="213" width="0.0341%" height="15" fill="rgb(237,100,13)" fg:x="118046" fg:w="42"/><text x="96.0899%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_load (42 samples, 0.03%)</title><rect x="95.8399%" y="197" width="0.0341%" height="15" fill="rgb(213,55,26)" fg:x="118046" fg:w="42"/><text x="96.0899%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (42 samples, 0.03%)</title><rect x="95.8772%" y="181" width="0.0341%" height="15" fill="rgb(216,17,4)" fg:x="118092" fg:w="42"/><text x="96.1272%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_sub (42 samples, 0.03%)</title><rect x="95.8772%" y="165" width="0.0341%" height="15" fill="rgb(220,153,47)" fg:x="118092" fg:w="42"/><text x="96.1272%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (114 samples, 0.09%)</title><rect x="95.8740%" y="245" width="0.0926%" height="15" fill="rgb(215,131,9)" fg:x="118088" fg:w="114"/><text x="96.1240%" y="255.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (114 samples, 0.09%)</title><rect x="95.8740%" y="229" width="0.0926%" height="15" fill="rgb(233,46,42)" fg:x="118088" fg:w="114"/><text x="96.1240%" y="239.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read_unlock (111 samples, 0.09%)</title><rect x="95.8764%" y="213" width="0.0901%" height="15" fill="rgb(226,86,7)" fg:x="118091" fg:w="111"/><text x="96.1264%" y="223.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read_unlock (110 samples, 0.09%)</title><rect x="95.8772%" y="197" width="0.0893%" height="15" fill="rgb(239,226,21)" fg:x="118092" fg:w="110"/><text x="96.1272%" y="207.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::raw_unlock (68 samples, 0.06%)</title><rect x="95.9113%" y="181" width="0.0552%" height="15" fill="rgb(244,137,22)" fg:x="118134" fg:w="68"/><text x="96.1613%" y="191.50"></text></g><g><title>__GI___pthread_rwlock_unlock (68 samples, 0.06%)</title><rect x="95.9113%" y="165" width="0.0552%" height="15" fill="rgb(211,139,35)" fg:x="118134" fg:w="68"/><text x="96.1613%" y="175.50"></text></g><g><title>fastrand::usize (22 samples, 0.02%)</title><rect x="95.9666%" y="245" width="0.0179%" height="15" fill="rgb(214,62,50)" fg:x="118202" fg:w="22"/><text x="96.2166%" y="255.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (22 samples, 0.02%)</title><rect x="95.9666%" y="229" width="0.0179%" height="15" fill="rgb(212,113,44)" fg:x="118202" fg:w="22"/><text x="96.2166%" y="239.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (19 samples, 0.02%)</title><rect x="95.9690%" y="213" width="0.0154%" height="15" fill="rgb(226,150,43)" fg:x="118205" fg:w="19"/><text x="96.2190%" y="223.50"></text></g><g><title>__GI___pthread_rwlock_rdlock (56 samples, 0.05%)</title><rect x="95.9958%" y="197" width="0.0455%" height="15" fill="rgb(250,71,37)" fg:x="118238" fg:w="56"/><text x="96.2458%" y="207.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (584 samples, 0.47%)</title><rect x="95.6061%" y="261" width="0.4741%" height="15" fill="rgb(219,76,19)" fg:x="117758" fg:w="584"/><text x="95.8561%" y="271.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (118 samples, 0.10%)</title><rect x="95.9844%" y="245" width="0.0958%" height="15" fill="rgb(250,39,11)" fg:x="118224" fg:w="118"/><text x="96.2344%" y="255.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read (111 samples, 0.09%)</title><rect x="95.9901%" y="229" width="0.0901%" height="15" fill="rgb(230,64,31)" fg:x="118231" fg:w="111"/><text x="96.2401%" y="239.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read (111 samples, 0.09%)</title><rect x="95.9901%" y="213" width="0.0901%" height="15" fill="rgb(208,222,23)" fg:x="118231" fg:w="111"/><text x="96.2401%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (48 samples, 0.04%)</title><rect x="96.0412%" y="197" width="0.0390%" height="15" fill="rgb(227,125,18)" fg:x="118294" fg:w="48"/><text x="96.2912%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_add (48 samples, 0.04%)</title><rect x="96.0412%" y="181" width="0.0390%" height="15" fill="rgb(234,210,9)" fg:x="118294" fg:w="48"/><text x="96.2912%" y="191.50"></text></g><g><title>async_executor::Sleepers::update (44 samples, 0.04%)</title><rect x="96.0883%" y="245" width="0.0357%" height="15" fill="rgb(217,127,24)" fg:x="118352" fg:w="44"/><text x="96.3383%" y="255.50"></text></g><g><title>core::task::wake::Waker::will_wake (23 samples, 0.02%)</title><rect x="96.1054%" y="229" width="0.0187%" height="15" fill="rgb(239,141,48)" fg:x="118373" fg:w="23"/><text x="96.3554%" y="239.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (23 samples, 0.02%)</title><rect x="96.1054%" y="213" width="0.0187%" height="15" fill="rgb(227,109,8)" fg:x="118373" fg:w="23"/><text x="96.3554%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (15 samples, 0.01%)</title><rect x="96.1119%" y="197" width="0.0122%" height="15" fill="rgb(235,184,23)" fg:x="118381" fg:w="15"/><text x="96.3619%" y="207.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (15 samples, 0.01%)</title><rect x="96.1119%" y="181" width="0.0122%" height="15" fill="rgb(227,226,48)" fg:x="118381" fg:w="15"/><text x="96.3619%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (49 samples, 0.04%)</title><rect x="96.1241%" y="245" width="0.0398%" height="15" fill="rgb(206,150,11)" fg:x="118396" fg:w="49"/><text x="96.3741%" y="255.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (49 samples, 0.04%)</title><rect x="96.1241%" y="229" width="0.0398%" height="15" fill="rgb(254,2,33)" fg:x="118396" fg:w="49"/><text x="96.3741%" y="239.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (47 samples, 0.04%)</title><rect x="96.1257%" y="213" width="0.0382%" height="15" fill="rgb(243,160,20)" fg:x="118398" fg:w="47"/><text x="96.3757%" y="223.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (45 samples, 0.04%)</title><rect x="96.1273%" y="197" width="0.0365%" height="15" fill="rgb(218,208,30)" fg:x="118400" fg:w="45"/><text x="96.3773%" y="207.50"></text></g><g><title>__GI___pthread_mutex_unlock (44 samples, 0.04%)</title><rect x="96.1281%" y="181" width="0.0357%" height="15" fill="rgb(224,120,49)" fg:x="118401" fg:w="44"/><text x="96.3781%" y="191.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (814 samples, 0.66%)</title><rect x="95.5712%" y="373" width="0.6609%" height="15" fill="rgb(246,12,2)" fg:x="117715" fg:w="814"/><text x="95.8212%" y="383.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (806 samples, 0.65%)</title><rect x="95.5777%" y="357" width="0.6544%" height="15" fill="rgb(236,117,3)" fg:x="117723" fg:w="806"/><text x="95.8277%" y="367.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}} (803 samples, 0.65%)</title><rect x="95.5801%" y="341" width="0.6519%" height="15" fill="rgb(216,128,52)" fg:x="117726" fg:w="803"/><text x="95.8301%" y="351.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (793 samples, 0.64%)</title><rect x="95.5882%" y="325" width="0.6438%" height="15" fill="rgb(246,145,19)" fg:x="117736" fg:w="793"/><text x="95.8382%" y="335.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (793 samples, 0.64%)</title><rect x="95.5882%" y="309" width="0.6438%" height="15" fill="rgb(222,11,46)" fg:x="117736" fg:w="793"/><text x="95.8382%" y="319.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (778 samples, 0.63%)</title><rect x="95.6004%" y="293" width="0.6316%" height="15" fill="rgb(245,82,36)" fg:x="117751" fg:w="778"/><text x="95.8504%" y="303.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (772 samples, 0.63%)</title><rect x="95.6053%" y="277" width="0.6268%" height="15" fill="rgb(250,73,51)" fg:x="117757" fg:w="772"/><text x="95.8553%" y="287.50"></text></g><g><title>async_executor::Ticker::sleep (187 samples, 0.15%)</title><rect x="96.0802%" y="261" width="0.1518%" height="15" fill="rgb(221,189,23)" fg:x="118342" fg:w="187"/><text x="96.3302%" y="271.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (84 samples, 0.07%)</title><rect x="96.1638%" y="245" width="0.0682%" height="15" fill="rgb(210,33,7)" fg:x="118445" fg:w="84"/><text x="96.4138%" y="255.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (79 samples, 0.06%)</title><rect x="96.1679%" y="229" width="0.0641%" height="15" fill="rgb(210,107,22)" fg:x="118450" fg:w="79"/><text x="96.4179%" y="239.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (79 samples, 0.06%)</title><rect x="96.1679%" y="213" width="0.0641%" height="15" fill="rgb(222,116,37)" fg:x="118450" fg:w="79"/><text x="96.4179%" y="223.50"></text></g><g><title>__GI___pthread_mutex_lock (79 samples, 0.06%)</title><rect x="96.1679%" y="197" width="0.0641%" height="15" fill="rgb(254,17,48)" fg:x="118450" fg:w="79"/><text x="96.4179%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (28 samples, 0.02%)</title><rect x="96.3213%" y="309" width="0.0227%" height="15" fill="rgb(224,36,32)" fg:x="118639" fg:w="28"/><text x="96.5713%" y="319.50"></text></g><g><title>core::mem::replace (28 samples, 0.02%)</title><rect x="96.3213%" y="293" width="0.0227%" height="15" fill="rgb(232,90,46)" fg:x="118639" fg:w="28"/><text x="96.5713%" y="303.50"></text></g><g><title>core::ptr::read (28 samples, 0.02%)</title><rect x="96.3213%" y="277" width="0.0227%" height="15" fill="rgb(241,66,40)" fg:x="118639" fg:w="28"/><text x="96.5713%" y="287.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (55 samples, 0.04%)</title><rect x="96.3092%" y="325" width="0.0447%" height="15" fill="rgb(249,184,29)" fg:x="118624" fg:w="55"/><text x="96.5592%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (67 samples, 0.05%)</title><rect x="96.3538%" y="325" width="0.0544%" height="15" fill="rgb(231,181,1)" fg:x="118679" fg:w="67"/><text x="96.6038%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (62 samples, 0.05%)</title><rect x="96.3579%" y="309" width="0.0503%" height="15" fill="rgb(224,94,2)" fg:x="118684" fg:w="62"/><text x="96.6079%" y="319.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (62 samples, 0.05%)</title><rect x="96.3579%" y="293" width="0.0503%" height="15" fill="rgb(229,170,15)" fg:x="118684" fg:w="62"/><text x="96.6079%" y="303.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (61 samples, 0.05%)</title><rect x="96.3587%" y="277" width="0.0495%" height="15" fill="rgb(240,127,35)" fg:x="118685" fg:w="61"/><text x="96.6087%" y="287.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (59 samples, 0.05%)</title><rect x="96.3603%" y="261" width="0.0479%" height="15" fill="rgb(248,196,34)" fg:x="118687" fg:w="59"/><text x="96.6103%" y="271.50"></text></g><g><title>__GI___pthread_mutex_unlock (54 samples, 0.04%)</title><rect x="96.3644%" y="245" width="0.0438%" height="15" fill="rgb(236,137,7)" fg:x="118692" fg:w="54"/><text x="96.6144%" y="255.50"></text></g><g><title>core::task::wake::Waker::will_wake (30 samples, 0.02%)</title><rect x="96.4082%" y="325" width="0.0244%" height="15" fill="rgb(235,127,16)" fg:x="118746" fg:w="30"/><text x="96.6582%" y="335.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (30 samples, 0.02%)</title><rect x="96.4082%" y="309" width="0.0244%" height="15" fill="rgb(250,192,54)" fg:x="118746" fg:w="30"/><text x="96.6582%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (25 samples, 0.02%)</title><rect x="96.4123%" y="293" width="0.0203%" height="15" fill="rgb(218,98,20)" fg:x="118751" fg:w="25"/><text x="96.6623%" y="303.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (25 samples, 0.02%)</title><rect x="96.4123%" y="277" width="0.0203%" height="15" fill="rgb(230,176,47)" fg:x="118751" fg:w="25"/><text x="96.6623%" y="287.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (423 samples, 0.34%)</title><rect x="96.2775%" y="341" width="0.3434%" height="15" fill="rgb(244,2,33)" fg:x="118585" fg:w="423"/><text x="96.5275%" y="351.50"></text></g><g><title>event_listener::Inner::lock (232 samples, 0.19%)</title><rect x="96.4326%" y="325" width="0.1884%" height="15" fill="rgb(231,100,17)" fg:x="118776" fg:w="232"/><text x="96.6826%" y="335.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (228 samples, 0.19%)</title><rect x="96.4358%" y="309" width="0.1851%" height="15" fill="rgb(245,23,12)" fg:x="118780" fg:w="228"/><text x="96.6858%" y="319.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (225 samples, 0.18%)</title><rect x="96.4383%" y="293" width="0.1827%" height="15" fill="rgb(249,55,22)" fg:x="118783" fg:w="225"/><text x="96.6883%" y="303.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (195 samples, 0.16%)</title><rect x="96.4626%" y="277" width="0.1583%" height="15" fill="rgb(207,134,9)" fg:x="118813" fg:w="195"/><text x="96.7126%" y="287.50"></text></g><g><title>__GI___pthread_mutex_lock (195 samples, 0.16%)</title><rect x="96.4626%" y="261" width="0.1583%" height="15" fill="rgb(218,134,0)" fg:x="118813" fg:w="195"/><text x="96.7126%" y="271.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (121 samples, 0.10%)</title><rect x="96.6209%" y="341" width="0.0982%" height="15" fill="rgb(213,212,33)" fg:x="119008" fg:w="121"/><text x="96.8709%" y="351.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (120 samples, 0.10%)</title><rect x="96.6217%" y="325" width="0.0974%" height="15" fill="rgb(252,106,18)" fg:x="119009" fg:w="120"/><text x="96.8717%" y="335.50"></text></g><g><title>concurrent_queue::single::Single&lt;T&gt;::pop (69 samples, 0.06%)</title><rect x="96.6631%" y="309" width="0.0560%" height="15" fill="rgb(208,126,42)" fg:x="119060" fg:w="69"/><text x="96.9131%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (59 samples, 0.05%)</title><rect x="96.6713%" y="293" width="0.0479%" height="15" fill="rgb(246,175,29)" fg:x="119070" fg:w="59"/><text x="96.9213%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (59 samples, 0.05%)</title><rect x="96.6713%" y="277" width="0.0479%" height="15" fill="rgb(215,13,50)" fg:x="119070" fg:w="59"/><text x="96.9213%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (59 samples, 0.05%)</title><rect x="96.6713%" y="261" width="0.0479%" height="15" fill="rgb(216,172,15)" fg:x="119070" fg:w="59"/><text x="96.9213%" y="271.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,434 samples, 1.16%)</title><rect x="95.5598%" y="405" width="1.1642%" height="15" fill="rgb(212,103,13)" fg:x="117701" fg:w="1434"/><text x="95.8098%" y="415.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,429 samples, 1.16%)</title><rect x="95.5639%" y="389" width="1.1602%" height="15" fill="rgb(231,171,36)" fg:x="117706" fg:w="1429"/><text x="95.8139%" y="399.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}} (606 samples, 0.49%)</title><rect x="96.2320%" y="373" width="0.4920%" height="15" fill="rgb(250,123,20)" fg:x="118529" fg:w="606"/><text x="96.4820%" y="383.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (581 samples, 0.47%)</title><rect x="96.2523%" y="357" width="0.4717%" height="15" fill="rgb(212,53,50)" fg:x="118554" fg:w="581"/><text x="96.5023%" y="367.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (14,374 samples, 11.67%)</title><rect x="85.0629%" y="485" width="11.6700%" height="15" fill="rgb(243,54,12)" fg:x="104772" fg:w="14374"/><text x="85.3129%" y="495.50">&lt;futures_lite::fu..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14,310 samples, 11.62%)</title><rect x="85.1149%" y="469" width="11.6181%" height="15" fill="rgb(234,101,34)" fg:x="104836" fg:w="14310"/><text x="85.3649%" y="479.50">&lt;core::future::fr..</text></g><g><title>async_executor::LocalExecutor::run::{{closure}} (1,522 samples, 1.24%)</title><rect x="95.4973%" y="453" width="1.2357%" height="15" fill="rgb(254,67,22)" fg:x="117624" fg:w="1522"/><text x="95.7473%" y="463.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,455 samples, 1.18%)</title><rect x="95.5517%" y="437" width="1.1813%" height="15" fill="rgb(250,35,47)" fg:x="117691" fg:w="1455"/><text x="95.8017%" y="447.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (1,455 samples, 1.18%)</title><rect x="95.5517%" y="421" width="1.1813%" height="15" fill="rgb(226,126,38)" fg:x="117691" fg:w="1455"/><text x="95.8017%" y="431.50"></text></g><g><title>async_io::reactor::Reactor::get (13 samples, 0.01%)</title><rect x="96.7330%" y="485" width="0.0106%" height="15" fill="rgb(216,138,53)" fg:x="119146" fg:w="13"/><text x="96.9830%" y="495.50"></text></g><g><title>&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (13 samples, 0.01%)</title><rect x="96.7330%" y="469" width="0.0106%" height="15" fill="rgb(246,199,43)" fg:x="119146" fg:w="13"/><text x="96.9830%" y="479.50"></text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (13 samples, 0.01%)</title><rect x="96.7330%" y="453" width="0.0106%" height="15" fill="rgb(232,125,11)" fg:x="119146" fg:w="13"/><text x="96.9830%" y="463.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (13 samples, 0.01%)</title><rect x="96.7330%" y="437" width="0.0106%" height="15" fill="rgb(218,219,45)" fg:x="119146" fg:w="13"/><text x="96.9830%" y="447.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (13 samples, 0.01%)</title><rect x="96.7330%" y="421" width="0.0106%" height="15" fill="rgb(216,102,54)" fg:x="119146" fg:w="13"/><text x="96.9830%" y="431.50"></text></g><g><title>async_io::reactor::Reactor::try_lock (292 samples, 0.24%)</title><rect x="96.7435%" y="485" width="0.2371%" height="15" fill="rgb(250,228,7)" fg:x="119159" fg:w="292"/><text x="96.9935%" y="495.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (292 samples, 0.24%)</title><rect x="96.7435%" y="469" width="0.2371%" height="15" fill="rgb(226,125,25)" fg:x="119159" fg:w="292"/><text x="96.9935%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (285 samples, 0.23%)</title><rect x="96.7492%" y="453" width="0.2314%" height="15" fill="rgb(224,165,27)" fg:x="119166" fg:w="285"/><text x="96.9992%" y="463.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::try_lock (267 samples, 0.22%)</title><rect x="96.7638%" y="437" width="0.2168%" height="15" fill="rgb(233,86,3)" fg:x="119184" fg:w="267"/><text x="97.0138%" y="447.50"></text></g><g><title>__GI___pthread_mutex_trylock (267 samples, 0.22%)</title><rect x="96.7638%" y="421" width="0.2168%" height="15" fill="rgb(228,116,20)" fg:x="119184" fg:w="267"/><text x="97.0138%" y="431.50"></text></g><g><title>sn_rust_dealloc (31 samples, 0.03%)</title><rect x="97.0155%" y="309" width="0.0252%" height="15" fill="rgb(209,192,17)" fg:x="119494" fg:w="31"/><text x="97.2655%" y="319.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (45 samples, 0.04%)</title><rect x="97.0123%" y="405" width="0.0365%" height="15" fill="rgb(224,88,34)" fg:x="119490" fg:w="45"/><text x="97.2623%" y="415.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (45 samples, 0.04%)</title><rect x="97.0123%" y="389" width="0.0365%" height="15" fill="rgb(233,38,6)" fg:x="119490" fg:w="45"/><text x="97.2623%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (45 samples, 0.04%)</title><rect x="97.0123%" y="373" width="0.0365%" height="15" fill="rgb(212,59,30)" fg:x="119490" fg:w="45"/><text x="97.2623%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (45 samples, 0.04%)</title><rect x="97.0123%" y="357" width="0.0365%" height="15" fill="rgb(213,80,3)" fg:x="119490" fg:w="45"/><text x="97.2623%" y="367.50"></text></g><g><title>__rg_dealloc (45 samples, 0.04%)</title><rect x="97.0123%" y="341" width="0.0365%" height="15" fill="rgb(251,178,7)" fg:x="119490" fg:w="45"/><text x="97.2623%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (45 samples, 0.04%)</title><rect x="97.0123%" y="325" width="0.0365%" height="15" fill="rgb(213,154,26)" fg:x="119490" fg:w="45"/><text x="97.2623%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (54 samples, 0.04%)</title><rect x="97.0082%" y="453" width="0.0438%" height="15" fill="rgb(238,165,49)" fg:x="119485" fg:w="54"/><text x="97.2582%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V&gt;::dying_next (49 samples, 0.04%)</title><rect x="97.0123%" y="437" width="0.0398%" height="15" fill="rgb(248,91,46)" fg:x="119490" fg:w="49"/><text x="97.2623%" y="447.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (49 samples, 0.04%)</title><rect x="97.0123%" y="421" width="0.0398%" height="15" fill="rgb(244,21,52)" fg:x="119490" fg:w="49"/><text x="97.2623%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="97.0520%" y="453" width="0.0122%" height="15" fill="rgb(247,122,20)" fg:x="119539" fg:w="15"/><text x="97.3020%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="97.0520%" y="437" width="0.0122%" height="15" fill="rgb(218,27,9)" fg:x="119539" fg:w="15"/><text x="97.3020%" y="447.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::calc_split_length (15 samples, 0.01%)</title><rect x="97.0788%" y="437" width="0.0122%" height="15" fill="rgb(246,7,6)" fg:x="119572" fg:w="15"/><text x="97.3288%" y="447.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::Edge&gt;::move_suffix (42 samples, 0.03%)</title><rect x="97.0991%" y="421" width="0.0341%" height="15" fill="rgb(227,135,54)" fg:x="119597" fg:w="42"/><text x="97.3491%" y="431.50"></text></g><g><title>alloc::collections::btree::node::move_to_slice (35 samples, 0.03%)</title><rect x="97.1048%" y="405" width="0.0284%" height="15" fill="rgb(247,14,11)" fg:x="119604" fg:w="35"/><text x="97.3548%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (35 samples, 0.03%)</title><rect x="97.1048%" y="389" width="0.0284%" height="15" fill="rgb(206,149,34)" fg:x="119604" fg:w="35"/><text x="97.3548%" y="399.50"></text></g><g><title>[libc-2.31.so] (30 samples, 0.02%)</title><rect x="97.1089%" y="373" width="0.0244%" height="15" fill="rgb(227,228,4)" fg:x="119609" fg:w="30"/><text x="97.3589%" y="383.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (22 samples, 0.02%)</title><rect x="97.1454%" y="389" width="0.0179%" height="15" fill="rgb(238,218,28)" fg:x="119654" fg:w="22"/><text x="97.3954%" y="399.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (37 samples, 0.03%)</title><rect x="97.1381%" y="421" width="0.0300%" height="15" fill="rgb(252,86,40)" fg:x="119645" fg:w="37"/><text x="97.3881%" y="431.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (37 samples, 0.03%)</title><rect x="97.1381%" y="405" width="0.0300%" height="15" fill="rgb(251,225,11)" fg:x="119645" fg:w="37"/><text x="97.3881%" y="415.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (54 samples, 0.04%)</title><rect x="97.2258%" y="213" width="0.0438%" height="15" fill="rgb(206,46,49)" fg:x="119753" fg:w="54"/><text x="97.4758%" y="223.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new_uninit (126 samples, 0.10%)</title><rect x="97.1681%" y="357" width="0.1023%" height="15" fill="rgb(245,128,24)" fg:x="119682" fg:w="126"/><text x="97.4181%" y="367.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (126 samples, 0.10%)</title><rect x="97.1681%" y="341" width="0.1023%" height="15" fill="rgb(219,177,34)" fg:x="119682" fg:w="126"/><text x="97.4181%" y="351.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (126 samples, 0.10%)</title><rect x="97.1681%" y="325" width="0.1023%" height="15" fill="rgb(218,60,48)" fg:x="119682" fg:w="126"/><text x="97.4181%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (126 samples, 0.10%)</title><rect x="97.1681%" y="309" width="0.1023%" height="15" fill="rgb(221,11,5)" fg:x="119682" fg:w="126"/><text x="97.4181%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (126 samples, 0.10%)</title><rect x="97.1681%" y="293" width="0.1023%" height="15" fill="rgb(220,148,13)" fg:x="119682" fg:w="126"/><text x="97.4181%" y="303.50"></text></g><g><title>alloc::alloc::alloc (124 samples, 0.10%)</title><rect x="97.1698%" y="277" width="0.1007%" height="15" fill="rgb(210,16,3)" fg:x="119684" fg:w="124"/><text x="97.4198%" y="287.50"></text></g><g><title>__rg_alloc (124 samples, 0.10%)</title><rect x="97.1698%" y="261" width="0.1007%" height="15" fill="rgb(236,80,2)" fg:x="119684" fg:w="124"/><text x="97.4198%" y="271.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (124 samples, 0.10%)</title><rect x="97.1698%" y="245" width="0.1007%" height="15" fill="rgb(239,129,19)" fg:x="119684" fg:w="124"/><text x="97.4198%" y="255.50"></text></g><g><title>sn_rust_alloc (123 samples, 0.10%)</title><rect x="97.1706%" y="229" width="0.0999%" height="15" fill="rgb(220,106,35)" fg:x="119685" fg:w="123"/><text x="97.4206%" y="239.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (127 samples, 0.10%)</title><rect x="97.1681%" y="405" width="0.1031%" height="15" fill="rgb(252,139,45)" fg:x="119682" fg:w="127"/><text x="97.4181%" y="415.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (127 samples, 0.10%)</title><rect x="97.1681%" y="389" width="0.1031%" height="15" fill="rgb(229,8,36)" fg:x="119682" fg:w="127"/><text x="97.4181%" y="399.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (127 samples, 0.10%)</title><rect x="97.1681%" y="373" width="0.1031%" height="15" fill="rgb(230,126,33)" fg:x="119682" fg:w="127"/><text x="97.4181%" y="383.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::split_off (223 samples, 0.18%)</title><rect x="97.0910%" y="437" width="0.1811%" height="15" fill="rgb(239,140,21)" fg:x="119587" fg:w="223"/><text x="97.3410%" y="447.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::new_pillar (128 samples, 0.10%)</title><rect x="97.1681%" y="421" width="0.1039%" height="15" fill="rgb(254,104,9)" fg:x="119682" fg:w="128"/><text x="97.4181%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::split_off (250 samples, 0.20%)</title><rect x="97.0707%" y="453" width="0.2030%" height="15" fill="rgb(239,52,14)" fg:x="119562" fg:w="250"/><text x="97.3207%" y="463.50"></text></g><g><title>concurrent_queue::full_fence (24 samples, 0.02%)</title><rect x="97.2997%" y="405" width="0.0195%" height="15" fill="rgb(208,227,44)" fg:x="119844" fg:w="24"/><text x="97.5497%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (24 samples, 0.02%)</title><rect x="97.2997%" y="389" width="0.0195%" height="15" fill="rgb(246,18,19)" fg:x="119844" fg:w="24"/><text x="97.5497%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (24 samples, 0.02%)</title><rect x="97.2997%" y="373" width="0.0195%" height="15" fill="rgb(235,228,25)" fg:x="119844" fg:w="24"/><text x="97.5497%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (24 samples, 0.02%)</title><rect x="97.2997%" y="357" width="0.0195%" height="15" fill="rgb(240,156,20)" fg:x="119844" fg:w="24"/><text x="97.5497%" y="367.50"></text></g><g><title>async_io::reactor::Reactor::process_timer_ops (76 samples, 0.06%)</title><rect x="97.2737%" y="453" width="0.0617%" height="15" fill="rgb(224,8,20)" fg:x="119812" fg:w="76"/><text x="97.5237%" y="463.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (63 samples, 0.05%)</title><rect x="97.2842%" y="437" width="0.0511%" height="15" fill="rgb(214,12,52)" fg:x="119825" fg:w="63"/><text x="97.5342%" y="447.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (63 samples, 0.05%)</title><rect x="97.2842%" y="421" width="0.0511%" height="15" fill="rgb(211,220,47)" fg:x="119825" fg:w="63"/><text x="97.5342%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (20 samples, 0.02%)</title><rect x="97.3192%" y="405" width="0.0162%" height="15" fill="rgb(250,173,5)" fg:x="119868" fg:w="20"/><text x="97.5692%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (20 samples, 0.02%)</title><rect x="97.3192%" y="389" width="0.0162%" height="15" fill="rgb(250,125,52)" fg:x="119868" fg:w="20"/><text x="97.5692%" y="399.50"></text></g><g><title>core::mem::drop (147 samples, 0.12%)</title><rect x="97.3354%" y="453" width="0.1193%" height="15" fill="rgb(209,133,18)" fg:x="119888" fg:w="147"/><text x="97.5854%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::collections::btree::map::BTreeMap&lt;(std::time::Instant,usize),core::task::wake::Waker&gt;&gt;&gt; (147 samples, 0.12%)</title><rect x="97.3354%" y="437" width="0.1193%" height="15" fill="rgb(216,173,22)" fg:x="119888" fg:w="147"/><text x="97.5854%" y="447.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (147 samples, 0.12%)</title><rect x="97.3354%" y="421" width="0.1193%" height="15" fill="rgb(205,3,22)" fg:x="119888" fg:w="147"/><text x="97.5854%" y="431.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (144 samples, 0.12%)</title><rect x="97.3378%" y="405" width="0.1169%" height="15" fill="rgb(248,22,20)" fg:x="119891" fg:w="144"/><text x="97.5878%" y="415.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (138 samples, 0.11%)</title><rect x="97.3427%" y="389" width="0.1120%" height="15" fill="rgb(233,6,29)" fg:x="119897" fg:w="138"/><text x="97.5927%" y="399.50"></text></g><g><title>__GI___pthread_mutex_unlock (138 samples, 0.11%)</title><rect x="97.3427%" y="373" width="0.1120%" height="15" fill="rgb(240,22,54)" fg:x="119897" fg:w="138"/><text x="97.5927%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (23 samples, 0.02%)</title><rect x="97.4580%" y="453" width="0.0187%" height="15" fill="rgb(231,133,32)" fg:x="120039" fg:w="23"/><text x="97.7080%" y="463.50"></text></g><g><title>async_io::reactor::Reactor::process_timers::{{closure}} (14 samples, 0.01%)</title><rect x="97.4653%" y="437" width="0.0114%" height="15" fill="rgb(248,193,4)" fg:x="120048" fg:w="14"/><text x="97.7153%" y="447.50"></text></g><g><title>std::time::Instant::duration_since (14 samples, 0.01%)</title><rect x="97.4653%" y="421" width="0.0114%" height="15" fill="rgb(211,178,46)" fg:x="120048" fg:w="14"/><text x="97.7153%" y="431.50"></text></g><g><title>std::time::Instant::checked_duration_since (14 samples, 0.01%)</title><rect x="97.4653%" y="405" width="0.0114%" height="15" fill="rgb(224,5,42)" fg:x="120048" fg:w="14"/><text x="97.7153%" y="415.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (14 samples, 0.01%)</title><rect x="97.4653%" y="389" width="0.0114%" height="15" fill="rgb(239,176,25)" fg:x="120048" fg:w="14"/><text x="97.7153%" y="399.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (78 samples, 0.06%)</title><rect x="97.4799%" y="453" width="0.0633%" height="15" fill="rgb(245,187,50)" fg:x="120066" fg:w="78"/><text x="97.7299%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (77 samples, 0.06%)</title><rect x="97.4807%" y="437" width="0.0625%" height="15" fill="rgb(248,24,15)" fg:x="120067" fg:w="77"/><text x="97.7307%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (77 samples, 0.06%)</title><rect x="97.4807%" y="421" width="0.0625%" height="15" fill="rgb(205,166,13)" fg:x="120067" fg:w="77"/><text x="97.7307%" y="431.50"></text></g><g><title>__GI___pthread_mutex_lock (77 samples, 0.06%)</title><rect x="97.4807%" y="405" width="0.0625%" height="15" fill="rgb(208,114,23)" fg:x="120067" fg:w="77"/><text x="97.7307%" y="415.50"></text></g><g><title>async_io::reactor::Reactor::process_timers (763 samples, 0.62%)</title><rect x="96.9985%" y="469" width="0.6195%" height="15" fill="rgb(239,127,18)" fg:x="119473" fg:w="763"/><text x="97.2485%" y="479.50"></text></g><g><title>std::time::Instant::now (92 samples, 0.07%)</title><rect x="97.5432%" y="453" width="0.0747%" height="15" fill="rgb(219,154,28)" fg:x="120144" fg:w="92"/><text x="97.7932%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (92 samples, 0.07%)</title><rect x="97.5432%" y="437" width="0.0747%" height="15" fill="rgb(225,157,23)" fg:x="120144" fg:w="92"/><text x="97.7932%" y="447.50"></text></g><g><title>std::sys::unix::time::inner::now (92 samples, 0.07%)</title><rect x="97.5432%" y="421" width="0.0747%" height="15" fill="rgb(219,8,6)" fg:x="120144" fg:w="92"/><text x="97.7932%" y="431.50"></text></g><g><title>__clock_gettime (84 samples, 0.07%)</title><rect x="97.5497%" y="405" width="0.0682%" height="15" fill="rgb(212,47,6)" fg:x="120152" fg:w="84"/><text x="97.7997%" y="415.50"></text></g><g><title>__vdso_clock_gettime (69 samples, 0.06%)</title><rect x="97.5619%" y="389" width="0.0560%" height="15" fill="rgb(224,190,4)" fg:x="120167" fg:w="69"/><text x="97.8119%" y="399.50"></text></g><g><title>[[vdso]] (63 samples, 0.05%)</title><rect x="97.5668%" y="373" width="0.0511%" height="15" fill="rgb(239,183,29)" fg:x="120173" fg:w="63"/><text x="97.8168%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (25 samples, 0.02%)</title><rect x="97.6212%" y="469" width="0.0203%" height="15" fill="rgb(213,57,7)" fg:x="120240" fg:w="25"/><text x="97.8712%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_add (25 samples, 0.02%)</title><rect x="97.6212%" y="453" width="0.0203%" height="15" fill="rgb(216,148,1)" fg:x="120240" fg:w="25"/><text x="97.8712%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;polling::epoll::Events&gt;&gt; (110 samples, 0.09%)</title><rect x="97.6910%" y="453" width="0.0893%" height="15" fill="rgb(236,182,29)" fg:x="120326" fg:w="110"/><text x="97.9410%" y="463.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (110 samples, 0.09%)</title><rect x="97.6910%" y="437" width="0.0893%" height="15" fill="rgb(244,120,48)" fg:x="120326" fg:w="110"/><text x="97.9410%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (107 samples, 0.09%)</title><rect x="97.6934%" y="421" width="0.0869%" height="15" fill="rgb(206,71,34)" fg:x="120329" fg:w="107"/><text x="97.9434%" y="431.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (103 samples, 0.08%)</title><rect x="97.6967%" y="405" width="0.0836%" height="15" fill="rgb(242,32,6)" fg:x="120333" fg:w="103"/><text x="97.9467%" y="415.50"></text></g><g><title>__GI___pthread_mutex_unlock (103 samples, 0.08%)</title><rect x="97.6967%" y="389" width="0.0836%" height="15" fill="rgb(241,35,3)" fg:x="120333" fg:w="103"/><text x="97.9467%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (14 samples, 0.01%)</title><rect x="97.7803%" y="453" width="0.0114%" height="15" fill="rgb(222,62,19)" fg:x="120436" fg:w="14"/><text x="98.0303%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_swap (14 samples, 0.01%)</title><rect x="97.7803%" y="437" width="0.0114%" height="15" fill="rgb(223,110,41)" fg:x="120436" fg:w="14"/><text x="98.0303%" y="447.50"></text></g><g><title>__pthread_disable_asynccancel (13 samples, 0.01%)</title><rect x="97.9191%" y="421" width="0.0106%" height="15" fill="rgb(208,224,4)" fg:x="120607" fg:w="13"/><text x="98.1691%" y="431.50"></text></g><g><title>__libc_read (124 samples, 0.10%)</title><rect x="97.8802%" y="437" width="0.1007%" height="15" fill="rgb(241,137,19)" fg:x="120559" fg:w="124"/><text x="98.1302%" y="447.50"></text></g><g><title>__pthread_enable_asynccancel (63 samples, 0.05%)</title><rect x="97.9297%" y="421" width="0.0511%" height="15" fill="rgb(244,24,17)" fg:x="120620" fg:w="63"/><text x="98.1797%" y="431.50"></text></g><g><title>epoll_wait (206 samples, 0.17%)</title><rect x="97.9808%" y="437" width="0.1672%" height="15" fill="rgb(245,178,49)" fg:x="120683" fg:w="206"/><text x="98.2308%" y="447.50"></text></g><g><title>[libc-2.31.so] (79 samples, 0.06%)</title><rect x="98.0839%" y="421" width="0.0641%" height="15" fill="rgb(219,160,38)" fg:x="120810" fg:w="79"/><text x="98.3339%" y="431.50"></text></g><g><title>polling::epoll::Poller::modify (96 samples, 0.08%)</title><rect x="98.1562%" y="437" width="0.0779%" height="15" fill="rgb(228,137,14)" fg:x="120899" fg:w="96"/><text x="98.4062%" y="447.50"></text></g><g><title>polling::epoll::Poller::ctl (88 samples, 0.07%)</title><rect x="98.1627%" y="421" width="0.0714%" height="15" fill="rgb(237,134,11)" fg:x="120907" fg:w="88"/><text x="98.4127%" y="431.50"></text></g><g><title>epoll_ctl (81 samples, 0.07%)</title><rect x="98.1684%" y="405" width="0.0658%" height="15" fill="rgb(211,126,44)" fg:x="120914" fg:w="81"/><text x="98.4184%" y="415.50"></text></g><g><title>polling::epoll::Poller::wait (588 samples, 0.48%)</title><rect x="97.7917%" y="453" width="0.4774%" height="15" fill="rgb(226,171,33)" fg:x="120450" fg:w="588"/><text x="98.0417%" y="463.50"></text></g><g><title>syscall (43 samples, 0.03%)</title><rect x="98.2341%" y="437" width="0.0349%" height="15" fill="rgb(253,99,13)" fg:x="120995" fg:w="43"/><text x="98.4841%" y="447.50"></text></g><g><title>polling::Poller::wait (808 samples, 0.66%)</title><rect x="97.6415%" y="469" width="0.6560%" height="15" fill="rgb(244,48,7)" fg:x="120265" fg:w="808"/><text x="97.8915%" y="479.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (35 samples, 0.03%)</title><rect x="98.2691%" y="453" width="0.0284%" height="15" fill="rgb(244,217,54)" fg:x="121038" fg:w="35"/><text x="98.5191%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (34 samples, 0.03%)</title><rect x="98.2699%" y="437" width="0.0276%" height="15" fill="rgb(224,15,18)" fg:x="121039" fg:w="34"/><text x="98.5199%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::try_lock (29 samples, 0.02%)</title><rect x="98.2739%" y="421" width="0.0235%" height="15" fill="rgb(244,99,12)" fg:x="121044" fg:w="29"/><text x="98.5239%" y="431.50"></text></g><g><title>__GI___pthread_mutex_trylock (29 samples, 0.02%)</title><rect x="98.2739%" y="405" width="0.0235%" height="15" fill="rgb(233,226,8)" fg:x="121044" fg:w="29"/><text x="98.5239%" y="415.50"></text></g><g><title>async_io::reactor::ReactorLock::react (1,623 samples, 1.32%)</title><rect x="96.9806%" y="485" width="1.3177%" height="15" fill="rgb(229,211,3)" fg:x="119451" fg:w="1623"/><text x="97.2306%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (19 samples, 0.02%)</title><rect x="98.2991%" y="437" width="0.0154%" height="15" fill="rgb(216,140,21)" fg:x="121075" fg:w="19"/><text x="98.5491%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_store (19 samples, 0.02%)</title><rect x="98.2991%" y="421" width="0.0154%" height="15" fill="rgb(234,122,30)" fg:x="121075" fg:w="19"/><text x="98.5491%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_io::driver::CallOnDrop&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (27 samples, 0.02%)</title><rect x="98.2983%" y="485" width="0.0219%" height="15" fill="rgb(236,25,46)" fg:x="121074" fg:w="27"/><text x="98.5483%" y="495.50"></text></g><g><title>&lt;async_io::driver::CallOnDrop&lt;F&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.02%)</title><rect x="98.2983%" y="469" width="0.0219%" height="15" fill="rgb(217,52,54)" fg:x="121074" fg:w="27"/><text x="98.5483%" y="479.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (27 samples, 0.02%)</title><rect x="98.2983%" y="453" width="0.0219%" height="15" fill="rgb(222,29,26)" fg:x="121074" fg:w="27"/><text x="98.5483%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_io::reactor::ReactorLock&gt; (38 samples, 0.03%)</title><rect x="98.3202%" y="485" width="0.0309%" height="15" fill="rgb(216,177,29)" fg:x="121101" fg:w="38"/><text x="98.5702%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::vec::Vec&lt;polling::Event&gt;&gt;&gt; (38 samples, 0.03%)</title><rect x="98.3202%" y="469" width="0.0309%" height="15" fill="rgb(247,136,51)" fg:x="121101" fg:w="38"/><text x="98.5702%" y="479.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 0.03%)</title><rect x="98.3202%" y="453" width="0.0309%" height="15" fill="rgb(231,47,47)" fg:x="121101" fg:w="38"/><text x="98.5702%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (37 samples, 0.03%)</title><rect x="98.3210%" y="437" width="0.0300%" height="15" fill="rgb(211,192,36)" fg:x="121102" fg:w="37"/><text x="98.5710%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (37 samples, 0.03%)</title><rect x="98.3210%" y="421" width="0.0300%" height="15" fill="rgb(229,156,32)" fg:x="121102" fg:w="37"/><text x="98.5710%" y="431.50"></text></g><g><title>__GI___pthread_mutex_unlock (34 samples, 0.03%)</title><rect x="98.3235%" y="405" width="0.0276%" height="15" fill="rgb(248,213,20)" fg:x="121105" fg:w="34"/><text x="98.5735%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (20 samples, 0.02%)</title><rect x="98.3511%" y="485" width="0.0162%" height="15" fill="rgb(217,64,7)" fg:x="121139" fg:w="20"/><text x="98.6011%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_store (20 samples, 0.02%)</title><rect x="98.3511%" y="469" width="0.0162%" height="15" fill="rgb(232,142,8)" fg:x="121139" fg:w="20"/><text x="98.6011%" y="479.50"></text></g><g><title>log::max_level (15 samples, 0.01%)</title><rect x="98.3673%" y="485" width="0.0122%" height="15" fill="rgb(224,92,44)" fg:x="121159" fg:w="15"/><text x="98.6173%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (15 samples, 0.01%)</title><rect x="98.3673%" y="469" width="0.0122%" height="15" fill="rgb(214,169,17)" fg:x="121159" fg:w="15"/><text x="98.6173%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_load (15 samples, 0.01%)</title><rect x="98.3673%" y="453" width="0.0122%" height="15" fill="rgb(210,59,37)" fg:x="121159" fg:w="15"/><text x="98.6173%" y="463.50"></text></g><g><title>__GI___pthread_mutex_unlock (128 samples, 0.10%)</title><rect x="98.3965%" y="453" width="0.1039%" height="15" fill="rgb(214,116,48)" fg:x="121195" fg:w="128"/><text x="98.6465%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (136 samples, 0.11%)</title><rect x="98.5045%" y="453" width="0.1104%" height="15" fill="rgb(244,191,6)" fg:x="121328" fg:w="136"/><text x="98.7545%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (136 samples, 0.11%)</title><rect x="98.5045%" y="437" width="0.1104%" height="15" fill="rgb(241,50,52)" fg:x="121328" fg:w="136"/><text x="98.7545%" y="447.50"></text></g><g><title>std::sync::poison::Flag::get (83 samples, 0.07%)</title><rect x="98.6149%" y="437" width="0.0674%" height="15" fill="rgb(236,75,39)" fg:x="121464" fg:w="83"/><text x="98.8649%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (83 samples, 0.07%)</title><rect x="98.6149%" y="421" width="0.0674%" height="15" fill="rgb(236,99,0)" fg:x="121464" fg:w="83"/><text x="98.8649%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (82 samples, 0.07%)</title><rect x="98.6157%" y="405" width="0.0666%" height="15" fill="rgb(207,202,15)" fg:x="121465" fg:w="82"/><text x="98.8657%" y="415.50"></text></g><g><title>__pthread_disable_asynccancel (56 samples, 0.05%)</title><rect x="99.1954%" y="389" width="0.0455%" height="15" fill="rgb(233,207,14)" fg:x="122179" fg:w="56"/><text x="99.4454%" y="399.50"></text></g><g><title>__pthread_enable_asynccancel (43 samples, 0.03%)</title><rect x="99.2409%" y="389" width="0.0349%" height="15" fill="rgb(226,27,51)" fg:x="122235" fg:w="43"/><text x="99.4909%" y="399.50"></text></g><g><title>__pthread_mutex_cond_lock (66 samples, 0.05%)</title><rect x="99.2758%" y="389" width="0.0536%" height="15" fill="rgb(206,104,42)" fg:x="122278" fg:w="66"/><text x="99.5258%" y="399.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::wait (829 samples, 0.67%)</title><rect x="98.6831%" y="421" width="0.6731%" height="15" fill="rgb(212,225,4)" fg:x="121548" fg:w="829"/><text x="98.9331%" y="431.50"></text></g><g><title>__pthread_cond_wait (829 samples, 0.67%)</title><rect x="98.6831%" y="405" width="0.6731%" height="15" fill="rgb(233,96,42)" fg:x="121548" fg:w="829"/><text x="98.9331%" y="415.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (33 samples, 0.03%)</title><rect x="99.3294%" y="389" width="0.0268%" height="15" fill="rgb(229,21,32)" fg:x="122344" fg:w="33"/><text x="99.5794%" y="399.50"></text></g><g><title>std::sync::condvar::Condvar::wait (946 samples, 0.77%)</title><rect x="98.6149%" y="453" width="0.7680%" height="15" fill="rgb(226,216,24)" fg:x="121464" fg:w="946"/><text x="98.8649%" y="463.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (863 samples, 0.70%)</title><rect x="98.6823%" y="437" width="0.7007%" height="15" fill="rgb(221,163,17)" fg:x="121547" fg:w="863"/><text x="98.9323%" y="447.50"></text></g><g><title>std::sys_common::condvar::check::SameMutexCheck::verify (33 samples, 0.03%)</title><rect x="99.3562%" y="421" width="0.0268%" height="15" fill="rgb(216,216,42)" fg:x="122377" fg:w="33"/><text x="99.6062%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::compare_exchange (30 samples, 0.02%)</title><rect x="99.3586%" y="405" width="0.0244%" height="15" fill="rgb(240,118,7)" fg:x="122380" fg:w="30"/><text x="99.6086%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (30 samples, 0.02%)</title><rect x="99.3586%" y="389" width="0.0244%" height="15" fill="rgb(221,67,37)" fg:x="122380" fg:w="30"/><text x="99.6086%" y="399.50"></text></g><g><title>parking::Parker::park (1,295 samples, 1.05%)</title><rect x="98.3795%" y="485" width="1.0514%" height="15" fill="rgb(241,32,44)" fg:x="121174" fg:w="1295"/><text x="98.6295%" y="495.50"></text></g><g><title>parking::Inner::park (1,287 samples, 1.04%)</title><rect x="98.3860%" y="469" width="1.0449%" height="15" fill="rgb(235,204,43)" fg:x="121182" fg:w="1287"/><text x="98.6360%" y="479.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (59 samples, 0.05%)</title><rect x="99.3830%" y="453" width="0.0479%" height="15" fill="rgb(213,116,10)" fg:x="122410" fg:w="59"/><text x="99.6330%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (57 samples, 0.05%)</title><rect x="99.3846%" y="437" width="0.0463%" height="15" fill="rgb(239,15,48)" fg:x="122412" fg:w="57"/><text x="99.6346%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (56 samples, 0.05%)</title><rect x="99.3854%" y="421" width="0.0455%" height="15" fill="rgb(207,123,36)" fg:x="122413" fg:w="56"/><text x="99.6354%" y="431.50"></text></g><g><title>__GI___pthread_mutex_lock (56 samples, 0.05%)</title><rect x="99.3854%" y="405" width="0.0455%" height="15" fill="rgb(209,103,30)" fg:x="122413" fg:w="56"/><text x="99.6354%" y="415.50"></text></g><g><title>parking::Parker::park_timeout (257 samples, 0.21%)</title><rect x="99.4309%" y="485" width="0.2087%" height="15" fill="rgb(238,100,19)" fg:x="122469" fg:w="257"/><text x="99.6809%" y="495.50"></text></g><g><title>parking::Inner::park (215 samples, 0.17%)</title><rect x="99.4650%" y="469" width="0.1746%" height="15" fill="rgb(244,30,14)" fg:x="122511" fg:w="215"/><text x="99.7150%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (195 samples, 0.16%)</title><rect x="99.4812%" y="453" width="0.1583%" height="15" fill="rgb(249,174,6)" fg:x="122531" fg:w="195"/><text x="99.7312%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (195 samples, 0.16%)</title><rect x="99.4812%" y="437" width="0.1583%" height="15" fill="rgb(235,213,41)" fg:x="122531" fg:w="195"/><text x="99.7312%" y="447.50"></text></g><g><title>std::panic::catch_unwind (18,107 samples, 14.70%)</title><rect x="84.9874%" y="773" width="14.7008%" height="15" fill="rgb(213,118,6)" fg:x="104679" fg:w="18107"/><text x="85.2374%" y="783.50">std::panic::catch_unwi..</text></g><g><title>std::panicking::try (18,107 samples, 14.70%)</title><rect x="84.9874%" y="757" width="14.7008%" height="15" fill="rgb(235,44,51)" fg:x="104679" fg:w="18107"/><text x="85.2374%" y="767.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (18,107 samples, 14.70%)</title><rect x="84.9874%" y="741" width="14.7008%" height="15" fill="rgb(217,9,53)" fg:x="104679" fg:w="18107"/><text x="85.2374%" y="751.50">std::panicking::try::d..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (18,107 samples, 14.70%)</title><rect x="84.9874%" y="725" width="14.7008%" height="15" fill="rgb(237,172,34)" fg:x="104679" fg:w="18107"/><text x="85.2374%" y="735.50">&lt;core::panic::unwind_s..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (18,107 samples, 14.70%)</title><rect x="84.9874%" y="709" width="14.7008%" height="15" fill="rgb(206,206,11)" fg:x="104679" fg:w="18107"/><text x="85.2374%" y="719.50">std::thread::Builder::..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (18,107 samples, 14.70%)</title><rect x="84.9874%" y="693" width="14.7008%" height="15" fill="rgb(214,149,29)" fg:x="104679" fg:w="18107"/><text x="85.2374%" y="703.50">std::sys_common::backt..</text></g><g><title>core::ops::function::FnOnce::call_once (18,107 samples, 14.70%)</title><rect x="84.9874%" y="677" width="14.7008%" height="15" fill="rgb(208,123,3)" fg:x="104679" fg:w="18107"/><text x="85.2374%" y="687.50">core::ops::function::F..</text></g><g><title>async_global_executor::threading::thread_main_loop (18,107 samples, 14.70%)</title><rect x="84.9874%" y="661" width="14.7008%" height="15" fill="rgb(229,126,4)" fg:x="104679" fg:w="18107"/><text x="85.2374%" y="671.50">async_global_executor:..</text></g><g><title>std::panic::catch_unwind (18,084 samples, 14.68%)</title><rect x="85.0061%" y="645" width="14.6821%" height="15" fill="rgb(222,92,36)" fg:x="104702" fg:w="18084"/><text x="85.2561%" y="655.50">std::panic::catch_unwi..</text></g><g><title>std::panicking::try (18,084 samples, 14.68%)</title><rect x="85.0061%" y="629" width="14.6821%" height="15" fill="rgb(216,39,41)" fg:x="104702" fg:w="18084"/><text x="85.2561%" y="639.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (18,084 samples, 14.68%)</title><rect x="85.0061%" y="613" width="14.6821%" height="15" fill="rgb(253,127,28)" fg:x="104702" fg:w="18084"/><text x="85.2561%" y="623.50">std::panicking::try::d..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (18,084 samples, 14.68%)</title><rect x="85.0061%" y="597" width="14.6821%" height="15" fill="rgb(249,152,51)" fg:x="104702" fg:w="18084"/><text x="85.2561%" y="607.50">async_global_executor:..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (18,084 samples, 14.68%)</title><rect x="85.0061%" y="581" width="14.6821%" height="15" fill="rgb(209,123,42)" fg:x="104702" fg:w="18084"/><text x="85.2561%" y="591.50">std::thread::local::Lo..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (18,084 samples, 14.68%)</title><rect x="85.0061%" y="565" width="14.6821%" height="15" fill="rgb(241,118,22)" fg:x="104702" fg:w="18084"/><text x="85.2561%" y="575.50">std::thread::local::Lo..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (18,084 samples, 14.68%)</title><rect x="85.0061%" y="549" width="14.6821%" height="15" fill="rgb(208,25,7)" fg:x="104702" fg:w="18084"/><text x="85.2561%" y="559.50">async_global_executor:..</text></g><g><title>async_global_executor::reactor::block_on (18,084 samples, 14.68%)</title><rect x="85.0061%" y="533" width="14.6821%" height="15" fill="rgb(243,144,39)" fg:x="104702" fg:w="18084"/><text x="85.2561%" y="543.50">async_global_executor:..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (18,084 samples, 14.68%)</title><rect x="85.0061%" y="517" width="14.6821%" height="15" fill="rgb(250,50,5)" fg:x="104702" fg:w="18084"/><text x="85.2561%" y="527.50">async_global_executor:..</text></g><g><title>async_io::driver::block_on (18,084 samples, 14.68%)</title><rect x="85.0061%" y="501" width="14.6821%" height="15" fill="rgb(207,67,11)" fg:x="104702" fg:w="18084"/><text x="85.2561%" y="511.50">async_io::driver::bloc..</text></g><g><title>std::time::Instant::now (53 samples, 0.04%)</title><rect x="99.6452%" y="485" width="0.0430%" height="15" fill="rgb(245,204,40)" fg:x="122733" fg:w="53"/><text x="99.8952%" y="495.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (53 samples, 0.04%)</title><rect x="99.6452%" y="469" width="0.0430%" height="15" fill="rgb(238,228,24)" fg:x="122733" fg:w="53"/><text x="99.8952%" y="479.50"></text></g><g><title>std::sys::unix::time::inner::now (53 samples, 0.04%)</title><rect x="99.6452%" y="453" width="0.0430%" height="15" fill="rgb(217,116,22)" fg:x="122733" fg:w="53"/><text x="99.8952%" y="463.50"></text></g><g><title>__clock_gettime (46 samples, 0.04%)</title><rect x="99.6509%" y="437" width="0.0373%" height="15" fill="rgb(234,98,12)" fg:x="122740" fg:w="46"/><text x="99.9009%" y="447.50"></text></g><g><title>__vdso_clock_gettime (37 samples, 0.03%)</title><rect x="99.6582%" y="421" width="0.0300%" height="15" fill="rgb(242,170,50)" fg:x="122749" fg:w="37"/><text x="99.9082%" y="431.50"></text></g><g><title>[[vdso]] (35 samples, 0.03%)</title><rect x="99.6598%" y="405" width="0.0284%" height="15" fill="rgb(235,7,5)" fg:x="122751" fg:w="35"/><text x="99.9098%" y="415.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (18,111 samples, 14.70%)</title><rect x="84.9874%" y="837" width="14.7041%" height="15" fill="rgb(241,114,28)" fg:x="104679" fg:w="18111"/><text x="85.2374%" y="847.50">&lt;alloc::boxed::Box&lt;F,A..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (18,111 samples, 14.70%)</title><rect x="84.9874%" y="821" width="14.7041%" height="15" fill="rgb(246,112,42)" fg:x="104679" fg:w="18111"/><text x="85.2374%" y="831.50">&lt;alloc::boxed::Box&lt;F,A..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (18,111 samples, 14.70%)</title><rect x="84.9874%" y="805" width="14.7041%" height="15" fill="rgb(248,228,14)" fg:x="104679" fg:w="18111"/><text x="85.2374%" y="815.50">core::ops::function::F..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (18,111 samples, 14.70%)</title><rect x="84.9874%" y="789" width="14.7041%" height="15" fill="rgb(208,133,18)" fg:x="104679" fg:w="18111"/><text x="85.2374%" y="799.50">std::thread::Builder::..</text></g><g><title>clone (18,127 samples, 14.72%)</title><rect x="84.9752%" y="885" width="14.7171%" height="15" fill="rgb(207,35,49)" fg:x="104664" fg:w="18127"/><text x="85.2252%" y="895.50">clone</text></g><g><title>start_thread (18,113 samples, 14.71%)</title><rect x="84.9866%" y="869" width="14.7057%" height="15" fill="rgb(205,68,36)" fg:x="104678" fg:w="18113"/><text x="85.2366%" y="879.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (18,112 samples, 14.70%)</title><rect x="84.9874%" y="853" width="14.7049%" height="15" fill="rgb(245,62,40)" fg:x="104679" fg:w="18112"/><text x="85.2374%" y="863.50">std::sys::unix::thread..</text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (20 samples, 0.02%)</title><rect x="99.7183%" y="885" width="0.0162%" height="15" fill="rgb(228,27,24)" fg:x="122823" fg:w="20"/><text x="99.9683%" y="895.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (28 samples, 0.02%)</title><rect x="99.7345%" y="885" width="0.0227%" height="15" fill="rgb(253,19,12)" fg:x="122843" fg:w="28"/><text x="99.9845%" y="895.50"></text></g><g><title>tremor_pipeline::OpMeta::merge (18 samples, 0.01%)</title><rect x="99.7426%" y="869" width="0.0146%" height="15" fill="rgb(232,28,20)" fg:x="122853" fg:w="18"/><text x="99.9926%" y="879.50"></text></g><g><title>async-std/runti (122,818 samples, 99.71%)</title><rect x="0.0455%" y="901" width="99.7142%" height="15" fill="rgb(218,35,51)" fg:x="56" fg:w="122818"/><text x="0.2955%" y="911.50">async-std/runti</text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (31 samples, 0.03%)</title><rect x="99.7775%" y="645" width="0.0252%" height="15" fill="rgb(212,90,40)" fg:x="122896" fg:w="31"/><text x="100.0275%" y="655.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (31 samples, 0.03%)</title><rect x="99.7775%" y="629" width="0.0252%" height="15" fill="rgb(220,172,12)" fg:x="122896" fg:w="31"/><text x="100.0275%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (31 samples, 0.03%)</title><rect x="99.7775%" y="613" width="0.0252%" height="15" fill="rgb(226,159,20)" fg:x="122896" fg:w="31"/><text x="100.0275%" y="623.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (31 samples, 0.03%)</title><rect x="99.7775%" y="597" width="0.0252%" height="15" fill="rgb(234,205,16)" fg:x="122896" fg:w="31"/><text x="100.0275%" y="607.50"></text></g><g><title>__GI___pthread_mutex_lock (31 samples, 0.03%)</title><rect x="99.7775%" y="581" width="0.0252%" height="15" fill="rgb(207,9,39)" fg:x="122896" fg:w="31"/><text x="100.0275%" y="591.50"></text></g><g><title>__lll_lock_wait (30 samples, 0.02%)</title><rect x="99.7784%" y="565" width="0.0244%" height="15" fill="rgb(249,143,15)" fg:x="122897" fg:w="30"/><text x="100.0284%" y="575.50"></text></g><g><title>std::panic::catch_unwind (35 samples, 0.03%)</title><rect x="99.7775%" y="773" width="0.0284%" height="15" fill="rgb(253,133,29)" fg:x="122896" fg:w="35"/><text x="100.0275%" y="783.50"></text></g><g><title>std::panicking::try (35 samples, 0.03%)</title><rect x="99.7775%" y="757" width="0.0284%" height="15" fill="rgb(221,187,0)" fg:x="122896" fg:w="35"/><text x="100.0275%" y="767.50"></text></g><g><title>std::panicking::try::do_call (35 samples, 0.03%)</title><rect x="99.7775%" y="741" width="0.0284%" height="15" fill="rgb(205,204,26)" fg:x="122896" fg:w="35"/><text x="100.0275%" y="751.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (35 samples, 0.03%)</title><rect x="99.7775%" y="725" width="0.0284%" height="15" fill="rgb(224,68,54)" fg:x="122896" fg:w="35"/><text x="100.0275%" y="735.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (35 samples, 0.03%)</title><rect x="99.7775%" y="709" width="0.0284%" height="15" fill="rgb(209,67,4)" fg:x="122896" fg:w="35"/><text x="100.0275%" y="719.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (35 samples, 0.03%)</title><rect x="99.7775%" y="693" width="0.0284%" height="15" fill="rgb(228,229,18)" fg:x="122896" fg:w="35"/><text x="100.0275%" y="703.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (35 samples, 0.03%)</title><rect x="99.7775%" y="677" width="0.0284%" height="15" fill="rgb(231,89,13)" fg:x="122896" fg:w="35"/><text x="100.0275%" y="687.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (35 samples, 0.03%)</title><rect x="99.7775%" y="661" width="0.0284%" height="15" fill="rgb(210,182,18)" fg:x="122896" fg:w="35"/><text x="100.0275%" y="671.50"></text></g><g><title>clone (40 samples, 0.03%)</title><rect x="99.7775%" y="885" width="0.0325%" height="15" fill="rgb(240,105,2)" fg:x="122896" fg:w="40"/><text x="100.0275%" y="895.50"></text></g><g><title>start_thread (40 samples, 0.03%)</title><rect x="99.7775%" y="869" width="0.0325%" height="15" fill="rgb(207,170,50)" fg:x="122896" fg:w="40"/><text x="100.0275%" y="879.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (40 samples, 0.03%)</title><rect x="99.7775%" y="853" width="0.0325%" height="15" fill="rgb(232,133,24)" fg:x="122896" fg:w="40"/><text x="100.0275%" y="863.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (40 samples, 0.03%)</title><rect x="99.7775%" y="837" width="0.0325%" height="15" fill="rgb(235,166,27)" fg:x="122896" fg:w="40"/><text x="100.0275%" y="847.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (40 samples, 0.03%)</title><rect x="99.7775%" y="821" width="0.0325%" height="15" fill="rgb(209,19,13)" fg:x="122896" fg:w="40"/><text x="100.0275%" y="831.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (40 samples, 0.03%)</title><rect x="99.7775%" y="805" width="0.0325%" height="15" fill="rgb(226,79,39)" fg:x="122896" fg:w="40"/><text x="100.0275%" y="815.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (40 samples, 0.03%)</title><rect x="99.7775%" y="789" width="0.0325%" height="15" fill="rgb(222,163,10)" fg:x="122896" fg:w="40"/><text x="100.0275%" y="799.50"></text></g><g><title>tokio-runtime-w (42 samples, 0.03%)</title><rect x="99.7767%" y="901" width="0.0341%" height="15" fill="rgb(214,44,19)" fg:x="122895" fg:w="42"/><text x="100.0267%" y="911.50"></text></g><g><title>[unknown] (24 samples, 0.02%)</title><rect x="99.8198%" y="885" width="0.0195%" height="15" fill="rgb(210,217,13)" fg:x="122948" fg:w="24"/><text x="100.0698%" y="895.50"></text></g><g><title>all (123,170 samples, 100%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(237,61,54)" fg:x="0" fg:w="123170"/><text x="0.2500%" y="927.50"></text></g><g><title>tremor-pdk-hash (233 samples, 0.19%)</title><rect x="99.8108%" y="901" width="0.1892%" height="15" fill="rgb(226,184,24)" fg:x="122937" fg:w="233"/><text x="100.0608%" y="911.50"></text></g><g><title>clone (198 samples, 0.16%)</title><rect x="99.8392%" y="885" width="0.1608%" height="15" fill="rgb(223,226,4)" fg:x="122972" fg:w="198"/><text x="100.0892%" y="895.50"></text></g><g><title>start_thread (13 samples, 0.01%)</title><rect x="99.9894%" y="869" width="0.0106%" height="15" fill="rgb(210,26,41)" fg:x="123157" fg:w="13"/><text x="100.2394%" y="879.50"></text></g></svg></svg>