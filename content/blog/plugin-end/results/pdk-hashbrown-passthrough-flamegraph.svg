<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="966" onload="init(evt)" viewBox="0 0 1200 966" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="966" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="949.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="949.00"> </text><svg id="frames" x="10" width="1180" total_samples="123747"><g><title>std::sys::unix::locks::pthread_condvar::Condvar::wait_timeout (26 samples, 0.02%)</title><rect x="0.0145%" y="581" width="0.0210%" height="15" fill="rgb(227,0,7)" fg:x="18" fg:w="26"/><text x="0.2645%" y="591.50"></text></g><g><title>__pthread_cond_timedwait (25 samples, 0.02%)</title><rect x="0.0154%" y="565" width="0.0202%" height="15" fill="rgb(217,0,24)" fg:x="19" fg:w="25"/><text x="0.2654%" y="575.50"></text></g><g><title>std::sync::condvar::Condvar::wait_timeout (27 samples, 0.02%)</title><rect x="0.0145%" y="613" width="0.0218%" height="15" fill="rgb(221,193,54)" fg:x="18" fg:w="27"/><text x="0.2645%" y="623.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait_timeout (27 samples, 0.02%)</title><rect x="0.0145%" y="597" width="0.0218%" height="15" fill="rgb(248,212,6)" fg:x="18" fg:w="27"/><text x="0.2645%" y="607.50"></text></g><g><title>async-io (46 samples, 0.04%)</title><rect x="0.0008%" y="901" width="0.0372%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="46"/><text x="0.2508%" y="911.50"></text></g><g><title>clone (42 samples, 0.03%)</title><rect x="0.0040%" y="885" width="0.0339%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="42"/><text x="0.2540%" y="895.50"></text></g><g><title>start_thread (42 samples, 0.03%)</title><rect x="0.0040%" y="869" width="0.0339%" height="15" fill="rgb(207,160,47)" fg:x="5" fg:w="42"/><text x="0.2540%" y="879.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (42 samples, 0.03%)</title><rect x="0.0040%" y="853" width="0.0339%" height="15" fill="rgb(228,23,34)" fg:x="5" fg:w="42"/><text x="0.2540%" y="863.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (42 samples, 0.03%)</title><rect x="0.0040%" y="837" width="0.0339%" height="15" fill="rgb(218,30,26)" fg:x="5" fg:w="42"/><text x="0.2540%" y="847.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (42 samples, 0.03%)</title><rect x="0.0040%" y="821" width="0.0339%" height="15" fill="rgb(220,122,19)" fg:x="5" fg:w="42"/><text x="0.2540%" y="831.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (42 samples, 0.03%)</title><rect x="0.0040%" y="805" width="0.0339%" height="15" fill="rgb(250,228,42)" fg:x="5" fg:w="42"/><text x="0.2540%" y="815.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (42 samples, 0.03%)</title><rect x="0.0040%" y="789" width="0.0339%" height="15" fill="rgb(240,193,28)" fg:x="5" fg:w="42"/><text x="0.2540%" y="799.50"></text></g><g><title>std::panic::catch_unwind (42 samples, 0.03%)</title><rect x="0.0040%" y="773" width="0.0339%" height="15" fill="rgb(216,20,37)" fg:x="5" fg:w="42"/><text x="0.2540%" y="783.50"></text></g><g><title>std::panicking::try (42 samples, 0.03%)</title><rect x="0.0040%" y="757" width="0.0339%" height="15" fill="rgb(206,188,39)" fg:x="5" fg:w="42"/><text x="0.2540%" y="767.50"></text></g><g><title>std::panicking::try::do_call (42 samples, 0.03%)</title><rect x="0.0040%" y="741" width="0.0339%" height="15" fill="rgb(217,207,13)" fg:x="5" fg:w="42"/><text x="0.2540%" y="751.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (42 samples, 0.03%)</title><rect x="0.0040%" y="725" width="0.0339%" height="15" fill="rgb(231,73,38)" fg:x="5" fg:w="42"/><text x="0.2540%" y="735.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (42 samples, 0.03%)</title><rect x="0.0040%" y="709" width="0.0339%" height="15" fill="rgb(225,20,46)" fg:x="5" fg:w="42"/><text x="0.2540%" y="719.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (42 samples, 0.03%)</title><rect x="0.0040%" y="693" width="0.0339%" height="15" fill="rgb(210,31,41)" fg:x="5" fg:w="42"/><text x="0.2540%" y="703.50"></text></g><g><title>async_io::driver::UNPARKER::{{closure}}::{{closure}} (42 samples, 0.03%)</title><rect x="0.0040%" y="677" width="0.0339%" height="15" fill="rgb(221,200,47)" fg:x="5" fg:w="42"/><text x="0.2540%" y="687.50"></text></g><g><title>async_io::driver::main_loop (42 samples, 0.03%)</title><rect x="0.0040%" y="661" width="0.0339%" height="15" fill="rgb(226,26,5)" fg:x="5" fg:w="42"/><text x="0.2540%" y="671.50"></text></g><g><title>parking::Parker::park_timeout (29 samples, 0.02%)</title><rect x="0.0145%" y="645" width="0.0234%" height="15" fill="rgb(249,33,26)" fg:x="18" fg:w="29"/><text x="0.2645%" y="655.50"></text></g><g><title>parking::Inner::park (29 samples, 0.02%)</title><rect x="0.0145%" y="629" width="0.0234%" height="15" fill="rgb(235,183,28)" fg:x="18" fg:w="29"/><text x="0.2645%" y="639.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (34 samples, 0.03%)</title><rect x="0.0420%" y="885" width="0.0275%" height="15" fill="rgb(221,5,38)" fg:x="52" fg:w="34"/><text x="0.2920%" y="895.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (24 samples, 0.02%)</title><rect x="0.0695%" y="885" width="0.0194%" height="15" fill="rgb(247,18,42)" fg:x="86" fg:w="24"/><text x="0.3195%" y="895.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (26 samples, 0.02%)</title><rect x="0.0889%" y="885" width="0.0210%" height="15" fill="rgb(241,131,45)" fg:x="110" fg:w="26"/><text x="0.3389%" y="895.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (39 samples, 0.03%)</title><rect x="0.1099%" y="885" width="0.0315%" height="15" fill="rgb(249,31,29)" fg:x="136" fg:w="39"/><text x="0.3599%" y="895.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (22 samples, 0.02%)</title><rect x="0.1414%" y="885" width="0.0178%" height="15" fill="rgb(225,111,53)" fg:x="175" fg:w="22"/><text x="0.3914%" y="895.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (38 samples, 0.03%)</title><rect x="0.1592%" y="885" width="0.0307%" height="15" fill="rgb(238,160,17)" fg:x="197" fg:w="38"/><text x="0.4092%" y="895.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (16 samples, 0.01%)</title><rect x="0.2392%" y="853" width="0.0129%" height="15" fill="rgb(214,148,48)" fg:x="296" fg:w="16"/><text x="0.4892%" y="863.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (26 samples, 0.02%)</title><rect x="0.2521%" y="821" width="0.0210%" height="15" fill="rgb(232,36,49)" fg:x="312" fg:w="26"/><text x="0.5021%" y="831.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (26 samples, 0.02%)</title><rect x="0.2521%" y="805" width="0.0210%" height="15" fill="rgb(209,103,24)" fg:x="312" fg:w="26"/><text x="0.5021%" y="815.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (26 samples, 0.02%)</title><rect x="0.2521%" y="789" width="0.0210%" height="15" fill="rgb(229,88,8)" fg:x="312" fg:w="26"/><text x="0.5021%" y="799.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (26 samples, 0.02%)</title><rect x="0.2521%" y="773" width="0.0210%" height="15" fill="rgb(213,181,19)" fg:x="312" fg:w="26"/><text x="0.5021%" y="783.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (26 samples, 0.02%)</title><rect x="0.2521%" y="757" width="0.0210%" height="15" fill="rgb(254,191,54)" fg:x="312" fg:w="26"/><text x="0.5021%" y="767.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (26 samples, 0.02%)</title><rect x="0.2521%" y="741" width="0.0210%" height="15" fill="rgb(241,83,37)" fg:x="312" fg:w="26"/><text x="0.5021%" y="751.50"></text></g><g><title>alloc::alloc::exchange_malloc (26 samples, 0.02%)</title><rect x="0.2521%" y="725" width="0.0210%" height="15" fill="rgb(233,36,39)" fg:x="312" fg:w="26"/><text x="0.5021%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (26 samples, 0.02%)</title><rect x="0.2521%" y="709" width="0.0210%" height="15" fill="rgb(226,3,54)" fg:x="312" fg:w="26"/><text x="0.5021%" y="719.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (26 samples, 0.02%)</title><rect x="0.2521%" y="693" width="0.0210%" height="15" fill="rgb(245,192,40)" fg:x="312" fg:w="26"/><text x="0.5021%" y="703.50"></text></g><g><title>alloc::alloc::alloc (26 samples, 0.02%)</title><rect x="0.2521%" y="677" width="0.0210%" height="15" fill="rgb(238,167,29)" fg:x="312" fg:w="26"/><text x="0.5021%" y="687.50"></text></g><g><title>__rg_alloc (26 samples, 0.02%)</title><rect x="0.2521%" y="661" width="0.0210%" height="15" fill="rgb(232,182,51)" fg:x="312" fg:w="26"/><text x="0.5021%" y="671.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (26 samples, 0.02%)</title><rect x="0.2521%" y="645" width="0.0210%" height="15" fill="rgb(231,60,39)" fg:x="312" fg:w="26"/><text x="0.5021%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (20 samples, 0.02%)</title><rect x="0.2748%" y="805" width="0.0162%" height="15" fill="rgb(208,69,12)" fg:x="340" fg:w="20"/><text x="0.5248%" y="815.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (20 samples, 0.02%)</title><rect x="0.2748%" y="789" width="0.0162%" height="15" fill="rgb(235,93,37)" fg:x="340" fg:w="20"/><text x="0.5248%" y="799.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (137 samples, 0.11%)</title><rect x="0.1972%" y="869" width="0.1107%" height="15" fill="rgb(213,116,39)" fg:x="244" fg:w="137"/><text x="0.4472%" y="879.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (69 samples, 0.06%)</title><rect x="0.2521%" y="853" width="0.0558%" height="15" fill="rgb(222,207,29)" fg:x="312" fg:w="69"/><text x="0.5021%" y="863.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (69 samples, 0.06%)</title><rect x="0.2521%" y="837" width="0.0558%" height="15" fill="rgb(206,96,30)" fg:x="312" fg:w="69"/><text x="0.5021%" y="847.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (43 samples, 0.03%)</title><rect x="0.2731%" y="821" width="0.0347%" height="15" fill="rgb(218,138,4)" fg:x="338" fg:w="43"/><text x="0.5231%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (21 samples, 0.02%)</title><rect x="0.2909%" y="805" width="0.0170%" height="15" fill="rgb(250,191,14)" fg:x="360" fg:w="21"/><text x="0.5409%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (21 samples, 0.02%)</title><rect x="0.2909%" y="789" width="0.0170%" height="15" fill="rgb(239,60,40)" fg:x="360" fg:w="21"/><text x="0.5409%" y="799.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.02%)</title><rect x="0.2909%" y="773" width="0.0170%" height="15" fill="rgb(206,27,48)" fg:x="360" fg:w="21"/><text x="0.5409%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (39 samples, 0.03%)</title><rect x="0.3168%" y="853" width="0.0315%" height="15" fill="rgb(225,35,8)" fg:x="392" fg:w="39"/><text x="0.5668%" y="863.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::size_hint (39 samples, 0.03%)</title><rect x="0.3168%" y="837" width="0.0315%" height="15" fill="rgb(250,213,24)" fg:x="392" fg:w="39"/><text x="0.5668%" y="847.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (39 samples, 0.03%)</title><rect x="0.3168%" y="821" width="0.0315%" height="15" fill="rgb(247,123,22)" fg:x="392" fg:w="39"/><text x="0.5668%" y="831.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (39 samples, 0.03%)</title><rect x="0.3168%" y="805" width="0.0315%" height="15" fill="rgb(231,138,38)" fg:x="392" fg:w="39"/><text x="0.5668%" y="815.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (60 samples, 0.05%)</title><rect x="0.3079%" y="869" width="0.0485%" height="15" fill="rgb(231,145,46)" fg:x="381" fg:w="60"/><text x="0.5579%" y="879.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.03%)</title><rect x="0.3636%" y="869" width="0.0251%" height="15" fill="rgb(251,118,11)" fg:x="450" fg:w="31"/><text x="0.6136%" y="879.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="0.3887%" y="869" width="0.0121%" height="15" fill="rgb(217,147,25)" fg:x="481" fg:w="15"/><text x="0.6387%" y="879.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (27 samples, 0.02%)</title><rect x="0.5471%" y="853" width="0.0218%" height="15" fill="rgb(247,81,37)" fg:x="677" fg:w="27"/><text x="0.7971%" y="863.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (212 samples, 0.17%)</title><rect x="0.4008%" y="869" width="0.1713%" height="15" fill="rgb(209,12,38)" fg:x="496" fg:w="212"/><text x="0.6508%" y="879.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (40 samples, 0.03%)</title><rect x="0.5721%" y="869" width="0.0323%" height="15" fill="rgb(227,1,9)" fg:x="708" fg:w="40"/><text x="0.8221%" y="879.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (85 samples, 0.07%)</title><rect x="0.6045%" y="869" width="0.0687%" height="15" fill="rgb(248,47,43)" fg:x="748" fg:w="85"/><text x="0.8545%" y="879.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (31 samples, 0.03%)</title><rect x="0.6481%" y="853" width="0.0251%" height="15" fill="rgb(221,10,30)" fg:x="802" fg:w="31"/><text x="0.8981%" y="863.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (21 samples, 0.02%)</title><rect x="0.6562%" y="837" width="0.0170%" height="15" fill="rgb(210,229,1)" fg:x="812" fg:w="21"/><text x="0.9062%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (24 samples, 0.02%)</title><rect x="0.9624%" y="837" width="0.0194%" height="15" fill="rgb(222,148,37)" fg:x="1191" fg:w="24"/><text x="1.2124%" y="847.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (24 samples, 0.02%)</title><rect x="0.9624%" y="821" width="0.0194%" height="15" fill="rgb(234,67,33)" fg:x="1191" fg:w="24"/><text x="1.2124%" y="831.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (76 samples, 0.06%)</title><rect x="0.9293%" y="853" width="0.0614%" height="15" fill="rgb(247,98,35)" fg:x="1150" fg:w="76"/><text x="1.1793%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (46 samples, 0.04%)</title><rect x="1.0004%" y="821" width="0.0372%" height="15" fill="rgb(247,138,52)" fg:x="1238" fg:w="46"/><text x="1.2504%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (46 samples, 0.04%)</title><rect x="1.0004%" y="805" width="0.0372%" height="15" fill="rgb(213,79,30)" fg:x="1238" fg:w="46"/><text x="1.2504%" y="815.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (46 samples, 0.04%)</title><rect x="1.0004%" y="789" width="0.0372%" height="15" fill="rgb(246,177,23)" fg:x="1238" fg:w="46"/><text x="1.2504%" y="799.50"></text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (65 samples, 0.05%)</title><rect x="1.0004%" y="853" width="0.0525%" height="15" fill="rgb(230,62,27)" fg:x="1238" fg:w="65"/><text x="1.2504%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (65 samples, 0.05%)</title><rect x="1.0004%" y="837" width="0.0525%" height="15" fill="rgb(216,154,8)" fg:x="1238" fg:w="65"/><text x="1.2504%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (19 samples, 0.02%)</title><rect x="1.0376%" y="821" width="0.0154%" height="15" fill="rgb(244,35,45)" fg:x="1284" fg:w="19"/><text x="1.2876%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (19 samples, 0.02%)</title><rect x="1.0376%" y="805" width="0.0154%" height="15" fill="rgb(251,115,12)" fg:x="1284" fg:w="19"/><text x="1.2876%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (19 samples, 0.02%)</title><rect x="1.0376%" y="789" width="0.0154%" height="15" fill="rgb(240,54,50)" fg:x="1284" fg:w="19"/><text x="1.2876%" y="799.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (19 samples, 0.02%)</title><rect x="1.0376%" y="773" width="0.0154%" height="15" fill="rgb(233,84,52)" fg:x="1284" fg:w="19"/><text x="1.2876%" y="783.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (40 samples, 0.03%)</title><rect x="1.0530%" y="853" width="0.0323%" height="15" fill="rgb(207,117,47)" fg:x="1303" fg:w="40"/><text x="1.3030%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (13 samples, 0.01%)</title><rect x="1.1071%" y="773" width="0.0105%" height="15" fill="rgb(249,43,39)" fg:x="1370" fg:w="13"/><text x="1.3571%" y="783.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (42 samples, 0.03%)</title><rect x="1.0853%" y="853" width="0.0339%" height="15" fill="rgb(209,38,44)" fg:x="1343" fg:w="42"/><text x="1.3353%" y="863.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (35 samples, 0.03%)</title><rect x="1.0909%" y="837" width="0.0283%" height="15" fill="rgb(236,212,23)" fg:x="1350" fg:w="35"/><text x="1.3409%" y="847.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (33 samples, 0.03%)</title><rect x="1.0926%" y="821" width="0.0267%" height="15" fill="rgb(242,79,21)" fg:x="1352" fg:w="33"/><text x="1.3426%" y="831.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (31 samples, 0.03%)</title><rect x="1.0942%" y="805" width="0.0251%" height="15" fill="rgb(211,96,35)" fg:x="1354" fg:w="31"/><text x="1.3442%" y="815.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (28 samples, 0.02%)</title><rect x="1.0966%" y="789" width="0.0226%" height="15" fill="rgb(253,215,40)" fg:x="1357" fg:w="28"/><text x="1.3466%" y="799.50"></text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (14 samples, 0.01%)</title><rect x="1.1192%" y="853" width="0.0113%" height="15" fill="rgb(211,81,21)" fg:x="1385" fg:w="14"/><text x="1.3692%" y="863.50"></text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (32 samples, 0.03%)</title><rect x="1.1305%" y="853" width="0.0259%" height="15" fill="rgb(208,190,38)" fg:x="1399" fg:w="32"/><text x="1.3805%" y="863.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (663 samples, 0.54%)</title><rect x="0.6731%" y="869" width="0.5358%" height="15" fill="rgb(235,213,38)" fg:x="833" fg:w="663"/><text x="0.9231%" y="879.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (65 samples, 0.05%)</title><rect x="1.1564%" y="853" width="0.0525%" height="15" fill="rgb(237,122,38)" fg:x="1431" fg:w="65"/><text x="1.4064%" y="863.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (13 samples, 0.01%)</title><rect x="1.2768%" y="853" width="0.0105%" height="15" fill="rgb(244,218,35)" fg:x="1580" fg:w="13"/><text x="1.5268%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (29 samples, 0.02%)</title><rect x="1.2881%" y="853" width="0.0234%" height="15" fill="rgb(240,68,47)" fg:x="1594" fg:w="29"/><text x="1.5381%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (29 samples, 0.02%)</title><rect x="1.2881%" y="837" width="0.0234%" height="15" fill="rgb(210,16,53)" fg:x="1594" fg:w="29"/><text x="1.5381%" y="847.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.02%)</title><rect x="1.2881%" y="821" width="0.0234%" height="15" fill="rgb(235,124,12)" fg:x="1594" fg:w="29"/><text x="1.5381%" y="831.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (29 samples, 0.02%)</title><rect x="1.2881%" y="805" width="0.0234%" height="15" fill="rgb(224,169,11)" fg:x="1594" fg:w="29"/><text x="1.5381%" y="815.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (29 samples, 0.02%)</title><rect x="1.2881%" y="789" width="0.0234%" height="15" fill="rgb(250,166,2)" fg:x="1594" fg:w="29"/><text x="1.5381%" y="799.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (146 samples, 0.12%)</title><rect x="1.2089%" y="869" width="0.1180%" height="15" fill="rgb(242,216,29)" fg:x="1496" fg:w="146"/><text x="1.4589%" y="879.50"></text></g><g><title>event_listener::Inner::lock (19 samples, 0.02%)</title><rect x="1.3115%" y="853" width="0.0154%" height="15" fill="rgb(230,116,27)" fg:x="1623" fg:w="19"/><text x="1.5615%" y="863.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (19 samples, 0.02%)</title><rect x="1.3115%" y="837" width="0.0154%" height="15" fill="rgb(228,99,48)" fg:x="1623" fg:w="19"/><text x="1.5615%" y="847.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (19 samples, 0.02%)</title><rect x="1.3115%" y="821" width="0.0154%" height="15" fill="rgb(253,11,6)" fg:x="1623" fg:w="19"/><text x="1.5615%" y="831.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (19 samples, 0.02%)</title><rect x="1.3115%" y="805" width="0.0154%" height="15" fill="rgb(247,143,39)" fg:x="1623" fg:w="19"/><text x="1.5615%" y="815.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (36 samples, 0.03%)</title><rect x="1.3309%" y="869" width="0.0291%" height="15" fill="rgb(236,97,10)" fg:x="1647" fg:w="36"/><text x="1.5809%" y="879.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (44 samples, 0.04%)</title><rect x="1.3600%" y="869" width="0.0356%" height="15" fill="rgb(233,208,19)" fg:x="1683" fg:w="44"/><text x="1.6100%" y="879.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (13 samples, 0.01%)</title><rect x="1.3851%" y="853" width="0.0105%" height="15" fill="rgb(216,164,2)" fg:x="1714" fg:w="13"/><text x="1.6351%" y="863.50"></text></g><g><title>&lt;tremor_runtime::codec::binary::Binary as tremor_runtime::codec::Codec&gt;::encode (36 samples, 0.03%)</title><rect x="1.4029%" y="869" width="0.0291%" height="15" fill="rgb(220,129,5)" fg:x="1736" fg:w="36"/><text x="1.6529%" y="879.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (122 samples, 0.10%)</title><rect x="1.4384%" y="869" width="0.0986%" height="15" fill="rgb(242,17,10)" fg:x="1780" fg:w="122"/><text x="1.6884%" y="879.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (45 samples, 0.04%)</title><rect x="1.5006%" y="853" width="0.0364%" height="15" fill="rgb(242,107,0)" fg:x="1857" fg:w="45"/><text x="1.7506%" y="863.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (36 samples, 0.03%)</title><rect x="1.5079%" y="837" width="0.0291%" height="15" fill="rgb(251,28,31)" fg:x="1866" fg:w="36"/><text x="1.7579%" y="847.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (24 samples, 0.02%)</title><rect x="1.5176%" y="821" width="0.0194%" height="15" fill="rgb(233,223,10)" fg:x="1878" fg:w="24"/><text x="1.7676%" y="831.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (14 samples, 0.01%)</title><rect x="1.5257%" y="805" width="0.0113%" height="15" fill="rgb(215,21,27)" fg:x="1888" fg:w="14"/><text x="1.7757%" y="815.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}}::{{closure}} (14 samples, 0.01%)</title><rect x="1.5257%" y="789" width="0.0113%" height="15" fill="rgb(232,23,21)" fg:x="1888" fg:w="14"/><text x="1.7757%" y="799.50"></text></g><g><title>alloc::alloc::box_free (14 samples, 0.01%)</title><rect x="1.5257%" y="773" width="0.0113%" height="15" fill="rgb(244,5,23)" fg:x="1888" fg:w="14"/><text x="1.7757%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.01%)</title><rect x="1.5257%" y="757" width="0.0113%" height="15" fill="rgb(226,81,46)" fg:x="1888" fg:w="14"/><text x="1.7757%" y="767.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.01%)</title><rect x="1.5257%" y="741" width="0.0113%" height="15" fill="rgb(247,70,30)" fg:x="1888" fg:w="14"/><text x="1.7757%" y="751.50"></text></g><g><title>__rg_dealloc (14 samples, 0.01%)</title><rect x="1.5257%" y="725" width="0.0113%" height="15" fill="rgb(212,68,19)" fg:x="1888" fg:w="14"/><text x="1.7757%" y="735.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (14 samples, 0.01%)</title><rect x="1.5257%" y="709" width="0.0113%" height="15" fill="rgb(240,187,13)" fg:x="1888" fg:w="14"/><text x="1.7757%" y="719.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (32 samples, 0.03%)</title><rect x="1.5370%" y="869" width="0.0259%" height="15" fill="rgb(223,113,26)" fg:x="1902" fg:w="32"/><text x="1.7870%" y="879.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14 samples, 0.01%)</title><rect x="1.7495%" y="821" width="0.0113%" height="15" fill="rgb(206,192,2)" fg:x="2165" fg:w="14"/><text x="1.9995%" y="831.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14 samples, 0.01%)</title><rect x="1.7495%" y="805" width="0.0113%" height="15" fill="rgb(241,108,4)" fg:x="2165" fg:w="14"/><text x="1.9995%" y="815.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (38 samples, 0.03%)</title><rect x="1.7358%" y="853" width="0.0307%" height="15" fill="rgb(247,173,49)" fg:x="2148" fg:w="38"/><text x="1.9858%" y="863.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (38 samples, 0.03%)</title><rect x="1.7358%" y="837" width="0.0307%" height="15" fill="rgb(224,114,35)" fg:x="2148" fg:w="38"/><text x="1.9858%" y="847.50"></text></g><g><title>[libc-2.31.so] (243 samples, 0.20%)</title><rect x="1.5726%" y="869" width="0.1964%" height="15" fill="rgb(245,159,27)" fg:x="1946" fg:w="243"/><text x="1.8226%" y="879.50"></text></g><g><title>__GI___pthread_mutex_lock (72 samples, 0.06%)</title><rect x="1.7697%" y="869" width="0.0582%" height="15" fill="rgb(245,172,44)" fg:x="2190" fg:w="72"/><text x="2.0197%" y="879.50"></text></g><g><title>__GI___pthread_rwlock_rdlock (29 samples, 0.02%)</title><rect x="1.8376%" y="869" width="0.0234%" height="15" fill="rgb(236,23,11)" fg:x="2274" fg:w="29"/><text x="2.0876%" y="879.50"></text></g><g><title>__GI___pthread_rwlock_unlock (15 samples, 0.01%)</title><rect x="1.8611%" y="869" width="0.0121%" height="15" fill="rgb(205,117,38)" fg:x="2303" fg:w="15"/><text x="2.1111%" y="879.50"></text></g><g><title>__clock_gettime (37 samples, 0.03%)</title><rect x="1.8732%" y="869" width="0.0299%" height="15" fill="rgb(237,72,25)" fg:x="2318" fg:w="37"/><text x="2.1232%" y="879.50"></text></g><g><title>__pthread_cond_wait (44 samples, 0.04%)</title><rect x="1.9168%" y="869" width="0.0356%" height="15" fill="rgb(244,70,9)" fg:x="2372" fg:w="44"/><text x="2.1668%" y="879.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (63 samples, 0.05%)</title><rect x="1.9596%" y="869" width="0.0509%" height="15" fill="rgb(217,125,39)" fg:x="2425" fg:w="63"/><text x="2.2096%" y="879.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (41 samples, 0.03%)</title><rect x="1.9774%" y="853" width="0.0331%" height="15" fill="rgb(235,36,10)" fg:x="2447" fg:w="41"/><text x="2.2274%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (41 samples, 0.03%)</title><rect x="1.9774%" y="837" width="0.0331%" height="15" fill="rgb(251,123,47)" fg:x="2447" fg:w="41"/><text x="2.2274%" y="847.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (41 samples, 0.03%)</title><rect x="1.9774%" y="821" width="0.0331%" height="15" fill="rgb(221,13,13)" fg:x="2447" fg:w="41"/><text x="2.2274%" y="831.50"></text></g><g><title>abi_stable::erased_types::iterator::next (46 samples, 0.04%)</title><rect x="2.0106%" y="869" width="0.0372%" height="15" fill="rgb(238,131,9)" fg:x="2488" fg:w="46"/><text x="2.2606%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="2.1132%" y="853" width="0.0105%" height="15" fill="rgb(211,50,8)" fg:x="2615" fg:w="13"/><text x="2.3632%" y="863.50"></text></g><g><title>alloc::alloc::box_free (13 samples, 0.01%)</title><rect x="2.1132%" y="837" width="0.0105%" height="15" fill="rgb(245,182,24)" fg:x="2615" fg:w="13"/><text x="2.3632%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.01%)</title><rect x="2.1132%" y="821" width="0.0105%" height="15" fill="rgb(242,14,37)" fg:x="2615" fg:w="13"/><text x="2.3632%" y="831.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.01%)</title><rect x="2.1132%" y="805" width="0.0105%" height="15" fill="rgb(246,228,12)" fg:x="2615" fg:w="13"/><text x="2.3632%" y="815.50"></text></g><g><title>__rg_dealloc (13 samples, 0.01%)</title><rect x="2.1132%" y="789" width="0.0105%" height="15" fill="rgb(213,55,15)" fg:x="2615" fg:w="13"/><text x="2.3632%" y="799.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (13 samples, 0.01%)</title><rect x="2.1132%" y="773" width="0.0105%" height="15" fill="rgb(209,9,3)" fg:x="2615" fg:w="13"/><text x="2.3632%" y="783.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (95 samples, 0.08%)</title><rect x="2.0550%" y="869" width="0.0768%" height="15" fill="rgb(230,59,30)" fg:x="2543" fg:w="95"/><text x="2.3050%" y="879.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (63 samples, 0.05%)</title><rect x="2.1318%" y="869" width="0.0509%" height="15" fill="rgb(209,121,21)" fg:x="2638" fg:w="63"/><text x="2.3818%" y="879.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (14 samples, 0.01%)</title><rect x="2.1714%" y="853" width="0.0113%" height="15" fill="rgb(220,109,13)" fg:x="2687" fg:w="14"/><text x="2.4214%" y="863.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (14 samples, 0.01%)</title><rect x="2.1714%" y="837" width="0.0113%" height="15" fill="rgb(232,18,1)" fg:x="2687" fg:w="14"/><text x="2.4214%" y="847.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (14 samples, 0.01%)</title><rect x="2.1714%" y="821" width="0.0113%" height="15" fill="rgb(215,41,42)" fg:x="2687" fg:w="14"/><text x="2.4214%" y="831.50"></text></g><g><title>alloc::alloc::exchange_malloc (14 samples, 0.01%)</title><rect x="2.1714%" y="805" width="0.0113%" height="15" fill="rgb(224,123,36)" fg:x="2687" fg:w="14"/><text x="2.4214%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 0.01%)</title><rect x="2.1714%" y="789" width="0.0113%" height="15" fill="rgb(240,125,3)" fg:x="2687" fg:w="14"/><text x="2.4214%" y="799.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.01%)</title><rect x="2.1714%" y="773" width="0.0113%" height="15" fill="rgb(205,98,50)" fg:x="2687" fg:w="14"/><text x="2.4214%" y="783.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.01%)</title><rect x="2.1714%" y="757" width="0.0113%" height="15" fill="rgb(205,185,37)" fg:x="2687" fg:w="14"/><text x="2.4214%" y="767.50"></text></g><g><title>__rg_alloc (14 samples, 0.01%)</title><rect x="2.1714%" y="741" width="0.0113%" height="15" fill="rgb(238,207,15)" fg:x="2687" fg:w="14"/><text x="2.4214%" y="751.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (14 samples, 0.01%)</title><rect x="2.1714%" y="725" width="0.0113%" height="15" fill="rgb(213,199,42)" fg:x="2687" fg:w="14"/><text x="2.4214%" y="735.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (34 samples, 0.03%)</title><rect x="2.1827%" y="869" width="0.0275%" height="15" fill="rgb(235,201,11)" fg:x="2701" fg:w="34"/><text x="2.4327%" y="879.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (16 samples, 0.01%)</title><rect x="2.1972%" y="853" width="0.0129%" height="15" fill="rgb(207,46,11)" fg:x="2719" fg:w="16"/><text x="2.4472%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (16 samples, 0.01%)</title><rect x="2.1972%" y="837" width="0.0129%" height="15" fill="rgb(241,35,35)" fg:x="2719" fg:w="16"/><text x="2.4472%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (16 samples, 0.01%)</title><rect x="2.1972%" y="821" width="0.0129%" height="15" fill="rgb(243,32,47)" fg:x="2719" fg:w="16"/><text x="2.4472%" y="831.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (16 samples, 0.01%)</title><rect x="2.1972%" y="805" width="0.0129%" height="15" fill="rgb(247,202,23)" fg:x="2719" fg:w="16"/><text x="2.4472%" y="815.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (16 samples, 0.01%)</title><rect x="2.1972%" y="789" width="0.0129%" height="15" fill="rgb(219,102,11)" fg:x="2719" fg:w="16"/><text x="2.4472%" y="799.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (16 samples, 0.01%)</title><rect x="2.1972%" y="773" width="0.0129%" height="15" fill="rgb(243,110,44)" fg:x="2719" fg:w="16"/><text x="2.4472%" y="783.50"></text></g><g><title>alloc::alloc::exchange_malloc (16 samples, 0.01%)</title><rect x="2.1972%" y="757" width="0.0129%" height="15" fill="rgb(222,74,54)" fg:x="2719" fg:w="16"/><text x="2.4472%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16 samples, 0.01%)</title><rect x="2.1972%" y="741" width="0.0129%" height="15" fill="rgb(216,99,12)" fg:x="2719" fg:w="16"/><text x="2.4472%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 0.01%)</title><rect x="2.1972%" y="725" width="0.0129%" height="15" fill="rgb(226,22,26)" fg:x="2719" fg:w="16"/><text x="2.4472%" y="735.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.01%)</title><rect x="2.1972%" y="709" width="0.0129%" height="15" fill="rgb(217,163,10)" fg:x="2719" fg:w="16"/><text x="2.4472%" y="719.50"></text></g><g><title>__rg_alloc (16 samples, 0.01%)</title><rect x="2.1972%" y="693" width="0.0129%" height="15" fill="rgb(213,25,53)" fg:x="2719" fg:w="16"/><text x="2.4472%" y="703.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (16 samples, 0.01%)</title><rect x="2.1972%" y="677" width="0.0129%" height="15" fill="rgb(252,105,26)" fg:x="2719" fg:w="16"/><text x="2.4472%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (46 samples, 0.04%)</title><rect x="2.2102%" y="869" width="0.0372%" height="15" fill="rgb(220,39,43)" fg:x="2735" fg:w="46"/><text x="2.4602%" y="879.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val (16 samples, 0.01%)</title><rect x="2.2344%" y="853" width="0.0129%" height="15" fill="rgb(229,68,48)" fg:x="2765" fg:w="16"/><text x="2.4844%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val::{{closure}} (16 samples, 0.01%)</title><rect x="2.2344%" y="837" width="0.0129%" height="15" fill="rgb(252,8,32)" fg:x="2765" fg:w="16"/><text x="2.4844%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val::{{closure}} (16 samples, 0.01%)</title><rect x="2.2344%" y="821" width="0.0129%" height="15" fill="rgb(223,20,43)" fg:x="2765" fg:w="16"/><text x="2.4844%" y="831.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (13 samples, 0.01%)</title><rect x="2.2368%" y="805" width="0.0105%" height="15" fill="rgb(229,81,49)" fg:x="2768" fg:w="13"/><text x="2.4868%" y="815.50"></text></g><g><title>core::ops::function::FnOnce::call_once (13 samples, 0.01%)</title><rect x="2.2368%" y="789" width="0.0105%" height="15" fill="rgb(236,28,36)" fg:x="2768" fg:w="13"/><text x="2.4868%" y="799.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::into_inner (13 samples, 0.01%)</title><rect x="2.2368%" y="773" width="0.0105%" height="15" fill="rgb(249,185,26)" fg:x="2768" fg:w="13"/><text x="2.4868%" y="783.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::pointer_trait::OwnedPointer for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop_allocation (13 samples, 0.01%)</title><rect x="2.2368%" y="757" width="0.0105%" height="15" fill="rgb(249,174,33)" fg:x="2768" fg:w="13"/><text x="2.4868%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (33 samples, 0.03%)</title><rect x="2.2473%" y="869" width="0.0267%" height="15" fill="rgb(233,201,37)" fg:x="2781" fg:w="33"/><text x="2.4973%" y="879.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (23 samples, 0.02%)</title><rect x="2.2554%" y="853" width="0.0186%" height="15" fill="rgb(221,78,26)" fg:x="2791" fg:w="23"/><text x="2.5054%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (96 samples, 0.08%)</title><rect x="2.3378%" y="805" width="0.0776%" height="15" fill="rgb(250,127,30)" fg:x="2893" fg:w="96"/><text x="2.5878%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (96 samples, 0.08%)</title><rect x="2.3378%" y="789" width="0.0776%" height="15" fill="rgb(230,49,44)" fg:x="2893" fg:w="96"/><text x="2.5878%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (96 samples, 0.08%)</title><rect x="2.3378%" y="773" width="0.0776%" height="15" fill="rgb(229,67,23)" fg:x="2893" fg:w="96"/><text x="2.5878%" y="783.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (96 samples, 0.08%)</title><rect x="2.3378%" y="757" width="0.0776%" height="15" fill="rgb(249,83,47)" fg:x="2893" fg:w="96"/><text x="2.5878%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (110 samples, 0.09%)</title><rect x="2.3378%" y="821" width="0.0889%" height="15" fill="rgb(215,43,3)" fg:x="2893" fg:w="110"/><text x="2.5878%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="2.4154%" y="805" width="0.0113%" height="15" fill="rgb(238,154,13)" fg:x="2989" fg:w="14"/><text x="2.6654%" y="815.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="2.4154%" y="789" width="0.0113%" height="15" fill="rgb(219,56,2)" fg:x="2989" fg:w="14"/><text x="2.6654%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.01%)</title><rect x="2.4154%" y="773" width="0.0113%" height="15" fill="rgb(233,0,4)" fg:x="2989" fg:w="14"/><text x="2.6654%" y="783.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.01%)</title><rect x="2.4154%" y="757" width="0.0113%" height="15" fill="rgb(235,30,7)" fg:x="2989" fg:w="14"/><text x="2.6654%" y="767.50"></text></g><g><title>__rg_dealloc (14 samples, 0.01%)</title><rect x="2.4154%" y="741" width="0.0113%" height="15" fill="rgb(250,79,13)" fg:x="2989" fg:w="14"/><text x="2.6654%" y="751.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (14 samples, 0.01%)</title><rect x="2.4154%" y="725" width="0.0113%" height="15" fill="rgb(211,146,34)" fg:x="2989" fg:w="14"/><text x="2.6654%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (66 samples, 0.05%)</title><rect x="2.4267%" y="805" width="0.0533%" height="15" fill="rgb(228,22,38)" fg:x="3003" fg:w="66"/><text x="2.6767%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (66 samples, 0.05%)</title><rect x="2.4267%" y="789" width="0.0533%" height="15" fill="rgb(235,168,5)" fg:x="3003" fg:w="66"/><text x="2.6767%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (66 samples, 0.05%)</title><rect x="2.4267%" y="773" width="0.0533%" height="15" fill="rgb(221,155,16)" fg:x="3003" fg:w="66"/><text x="2.6767%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (66 samples, 0.05%)</title><rect x="2.4267%" y="757" width="0.0533%" height="15" fill="rgb(215,215,53)" fg:x="3003" fg:w="66"/><text x="2.6767%" y="767.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (66 samples, 0.05%)</title><rect x="2.4267%" y="741" width="0.0533%" height="15" fill="rgb(223,4,10)" fg:x="3003" fg:w="66"/><text x="2.6767%" y="751.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (253 samples, 0.20%)</title><rect x="2.2821%" y="869" width="0.2044%" height="15" fill="rgb(234,103,6)" fg:x="2824" fg:w="253"/><text x="2.5321%" y="879.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (184 samples, 0.15%)</title><rect x="2.3378%" y="853" width="0.1487%" height="15" fill="rgb(227,97,0)" fg:x="2893" fg:w="184"/><text x="2.5878%" y="863.50"></text></g><g><title>core::mem::drop (184 samples, 0.15%)</title><rect x="2.3378%" y="837" width="0.1487%" height="15" fill="rgb(234,150,53)" fg:x="2893" fg:w="184"/><text x="2.5878%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (74 samples, 0.06%)</title><rect x="2.4267%" y="821" width="0.0598%" height="15" fill="rgb(228,201,54)" fg:x="3003" fg:w="74"/><text x="2.6767%" y="831.50"></text></g><g><title>async_executor::State::notify (15 samples, 0.01%)</title><rect x="2.4970%" y="869" width="0.0121%" height="15" fill="rgb(222,22,37)" fg:x="3090" fg:w="15"/><text x="2.7470%" y="879.50"></text></g><g><title>async_executor::Ticker::sleep (34 samples, 0.03%)</title><rect x="2.5092%" y="869" width="0.0275%" height="15" fill="rgb(237,53,32)" fg:x="3105" fg:w="34"/><text x="2.7592%" y="879.50"></text></g><g><title>async_executor::Ticker::wake (14 samples, 0.01%)</title><rect x="2.5366%" y="869" width="0.0113%" height="15" fill="rgb(233,25,53)" fg:x="3139" fg:w="14"/><text x="2.7866%" y="879.50"></text></g><g><title>async_executor::steal (347 samples, 0.28%)</title><rect x="2.5479%" y="869" width="0.2804%" height="15" fill="rgb(210,40,34)" fg:x="3153" fg:w="347"/><text x="2.7979%" y="879.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn (14 samples, 0.01%)</title><rect x="2.8284%" y="869" width="0.0113%" height="15" fill="rgb(241,220,44)" fg:x="3500" fg:w="14"/><text x="3.0784%" y="879.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (24 samples, 0.02%)</title><rect x="2.8397%" y="869" width="0.0194%" height="15" fill="rgb(235,28,35)" fg:x="3514" fg:w="24"/><text x="3.0897%" y="879.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (330 samples, 0.27%)</title><rect x="2.8873%" y="869" width="0.2667%" height="15" fill="rgb(210,56,17)" fg:x="3573" fg:w="330"/><text x="3.1373%" y="879.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (49 samples, 0.04%)</title><rect x="3.1540%" y="869" width="0.0396%" height="15" fill="rgb(224,130,29)" fg:x="3903" fg:w="49"/><text x="3.4040%" y="879.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (42 samples, 0.03%)</title><rect x="3.1936%" y="869" width="0.0339%" height="15" fill="rgb(235,212,8)" fg:x="3952" fg:w="42"/><text x="3.4436%" y="879.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (14 samples, 0.01%)</title><rect x="3.2276%" y="869" width="0.0113%" height="15" fill="rgb(223,33,50)" fg:x="3994" fg:w="14"/><text x="3.4776%" y="879.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (35 samples, 0.03%)</title><rect x="3.2389%" y="869" width="0.0283%" height="15" fill="rgb(219,149,13)" fg:x="4008" fg:w="35"/><text x="3.4889%" y="879.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (19 samples, 0.02%)</title><rect x="3.2518%" y="853" width="0.0154%" height="15" fill="rgb(250,156,29)" fg:x="4024" fg:w="19"/><text x="3.5018%" y="863.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (19 samples, 0.02%)</title><rect x="3.2518%" y="837" width="0.0154%" height="15" fill="rgb(216,193,19)" fg:x="4024" fg:w="19"/><text x="3.5018%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_channel::Send&lt;tremor_runtime::connectors::sink::SinkMsg&gt;&gt; (14 samples, 0.01%)</title><rect x="3.2696%" y="869" width="0.0113%" height="15" fill="rgb(216,135,14)" fg:x="4046" fg:w="14"/><text x="3.5196%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}}&gt;&gt; (20 samples, 0.02%)</title><rect x="3.2849%" y="869" width="0.0162%" height="15" fill="rgb(241,47,5)" fg:x="4065" fg:w="20"/><text x="3.5349%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::route_events::{{closure}}&gt;&gt; (22 samples, 0.02%)</title><rect x="3.3043%" y="869" width="0.0178%" height="15" fill="rgb(233,42,35)" fg:x="4089" fg:w="22"/><text x="3.5543%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::OutputTarget::send_event::{{closure}}&gt;&gt; (18 samples, 0.01%)</title><rect x="3.3221%" y="869" width="0.0145%" height="15" fill="rgb(231,13,6)" fg:x="4111" fg:w="18"/><text x="3.5721%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt;&gt; (54 samples, 0.04%)</title><rect x="3.3366%" y="869" width="0.0436%" height="15" fill="rgb(207,181,40)" fg:x="4129" fg:w="54"/><text x="3.5866%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt; (34 samples, 0.03%)</title><rect x="3.3528%" y="853" width="0.0275%" height="15" fill="rgb(254,173,49)" fg:x="4149" fg:w="34"/><text x="3.6028%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::send_events::{{closure}}&gt;&gt; (26 samples, 0.02%)</title><rect x="3.3803%" y="869" width="0.0210%" height="15" fill="rgb(221,1,38)" fg:x="4183" fg:w="26"/><text x="3.6303%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (24 samples, 0.02%)</title><rect x="3.4231%" y="821" width="0.0194%" height="15" fill="rgb(206,124,46)" fg:x="4236" fg:w="24"/><text x="3.6731%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (24 samples, 0.02%)</title><rect x="3.4231%" y="805" width="0.0194%" height="15" fill="rgb(249,21,11)" fg:x="4236" fg:w="24"/><text x="3.6731%" y="815.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (24 samples, 0.02%)</title><rect x="3.4231%" y="789" width="0.0194%" height="15" fill="rgb(222,201,40)" fg:x="4236" fg:w="24"/><text x="3.6731%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (37 samples, 0.03%)</title><rect x="3.4231%" y="853" width="0.0299%" height="15" fill="rgb(235,61,29)" fg:x="4236" fg:w="37"/><text x="3.6731%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (37 samples, 0.03%)</title><rect x="3.4231%" y="837" width="0.0299%" height="15" fill="rgb(219,207,3)" fg:x="4236" fg:w="37"/><text x="3.6731%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (13 samples, 0.01%)</title><rect x="3.4425%" y="821" width="0.0105%" height="15" fill="rgb(222,56,46)" fg:x="4260" fg:w="13"/><text x="3.6925%" y="831.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (13 samples, 0.01%)</title><rect x="3.4425%" y="805" width="0.0105%" height="15" fill="rgb(239,76,54)" fg:x="4260" fg:w="13"/><text x="3.6925%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (74 samples, 0.06%)</title><rect x="3.4158%" y="869" width="0.0598%" height="15" fill="rgb(231,124,27)" fg:x="4227" fg:w="74"/><text x="3.6658%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (22 samples, 0.02%)</title><rect x="3.4579%" y="853" width="0.0178%" height="15" fill="rgb(249,195,6)" fg:x="4279" fg:w="22"/><text x="3.7079%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (23 samples, 0.02%)</title><rect x="3.4756%" y="869" width="0.0186%" height="15" fill="rgb(237,174,47)" fg:x="4301" fg:w="23"/><text x="3.7256%" y="879.50"></text></g><g><title>event_listener::Event::listen (13 samples, 0.01%)</title><rect x="3.4942%" y="869" width="0.0105%" height="15" fill="rgb(206,201,31)" fg:x="4324" fg:w="13"/><text x="3.7442%" y="879.50"></text></g><g><title>event_listener::Event::notify (120 samples, 0.10%)</title><rect x="3.5047%" y="869" width="0.0970%" height="15" fill="rgb(231,57,52)" fg:x="4337" fg:w="120"/><text x="3.7547%" y="879.50"></text></g><g><title>event_listener::full_fence (57 samples, 0.05%)</title><rect x="3.5556%" y="853" width="0.0461%" height="15" fill="rgb(248,177,22)" fg:x="4400" fg:w="57"/><text x="3.8056%" y="863.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (40 samples, 0.03%)</title><rect x="3.6122%" y="869" width="0.0323%" height="15" fill="rgb(215,211,37)" fg:x="4470" fg:w="40"/><text x="3.8622%" y="879.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get_mut (13 samples, 0.01%)</title><rect x="3.6340%" y="853" width="0.0105%" height="15" fill="rgb(241,128,51)" fg:x="4497" fg:w="13"/><text x="3.8840%" y="863.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (13 samples, 0.01%)</title><rect x="3.6340%" y="837" width="0.0105%" height="15" fill="rgb(227,165,31)" fg:x="4497" fg:w="13"/><text x="3.8840%" y="847.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (13 samples, 0.01%)</title><rect x="3.6340%" y="821" width="0.0105%" height="15" fill="rgb(228,167,24)" fg:x="4497" fg:w="13"/><text x="3.8840%" y="831.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (13 samples, 0.01%)</title><rect x="3.6340%" y="805" width="0.0105%" height="15" fill="rgb(228,143,12)" fg:x="4497" fg:w="13"/><text x="3.8840%" y="815.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (13 samples, 0.01%)</title><rect x="3.6340%" y="789" width="0.0105%" height="15" fill="rgb(249,149,8)" fg:x="4497" fg:w="13"/><text x="3.8840%" y="799.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (13 samples, 0.01%)</title><rect x="3.6340%" y="773" width="0.0105%" height="15" fill="rgb(243,35,44)" fg:x="4497" fg:w="13"/><text x="3.8840%" y="783.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (13 samples, 0.01%)</title><rect x="3.6340%" y="757" width="0.0105%" height="15" fill="rgb(246,89,9)" fg:x="4497" fg:w="13"/><text x="3.8840%" y="767.50"></text></g><g><title>hashbrown::raw::inner::RawIter&lt;T&gt;::drop_elements (15 samples, 0.01%)</title><rect x="3.6445%" y="869" width="0.0121%" height="15" fill="rgb(233,213,13)" fg:x="4510" fg:w="15"/><text x="3.8945%" y="879.50"></text></g><g><title>parking::Unparker::unpark (25 samples, 0.02%)</title><rect x="3.6575%" y="869" width="0.0202%" height="15" fill="rgb(233,141,41)" fg:x="4526" fg:w="25"/><text x="3.9075%" y="879.50"></text></g><g><title>sn_rust_alloc (82 samples, 0.07%)</title><rect x="3.6874%" y="869" width="0.0663%" height="15" fill="rgb(239,167,4)" fg:x="4563" fg:w="82"/><text x="3.9374%" y="879.50"></text></g><g><title>sn_rust_dealloc (55 samples, 0.04%)</title><rect x="3.7536%" y="869" width="0.0444%" height="15" fill="rgb(209,217,16)" fg:x="4645" fg:w="55"/><text x="4.0036%" y="879.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (34 samples, 0.03%)</title><rect x="3.8062%" y="869" width="0.0275%" height="15" fill="rgb(219,88,35)" fg:x="4710" fg:w="34"/><text x="4.0562%" y="879.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (44 samples, 0.04%)</title><rect x="3.8336%" y="869" width="0.0356%" height="15" fill="rgb(220,193,23)" fg:x="4744" fg:w="44"/><text x="4.0836%" y="879.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (69 samples, 0.06%)</title><rect x="3.8692%" y="869" width="0.0558%" height="15" fill="rgb(230,90,52)" fg:x="4788" fg:w="69"/><text x="4.1192%" y="879.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (34 samples, 0.03%)</title><rect x="3.8975%" y="853" width="0.0275%" height="15" fill="rgb(252,106,19)" fg:x="4823" fg:w="34"/><text x="4.1475%" y="863.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (18 samples, 0.01%)</title><rect x="3.9104%" y="837" width="0.0145%" height="15" fill="rgb(206,74,20)" fg:x="4839" fg:w="18"/><text x="4.1604%" y="847.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (18 samples, 0.01%)</title><rect x="3.9104%" y="821" width="0.0145%" height="15" fill="rgb(230,138,44)" fg:x="4839" fg:w="18"/><text x="4.1604%" y="831.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18 samples, 0.01%)</title><rect x="3.9104%" y="805" width="0.0145%" height="15" fill="rgb(235,182,43)" fg:x="4839" fg:w="18"/><text x="4.1604%" y="815.50"></text></g><g><title>[pdk-hashbrown] (13 samples, 0.01%)</title><rect x="3.9144%" y="789" width="0.0105%" height="15" fill="rgb(242,16,51)" fg:x="4844" fg:w="13"/><text x="4.1644%" y="799.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (13 samples, 0.01%)</title><rect x="3.9144%" y="773" width="0.0105%" height="15" fill="rgb(248,9,4)" fg:x="4844" fg:w="13"/><text x="4.1644%" y="783.50"></text></g><g><title>tremor_common::time::nanotime (40 samples, 0.03%)</title><rect x="3.9249%" y="869" width="0.0323%" height="15" fill="rgb(210,31,22)" fg:x="4857" fg:w="40"/><text x="4.1749%" y="879.50"></text></g><g><title>std::time::SystemTime::now (40 samples, 0.03%)</title><rect x="3.9249%" y="853" width="0.0323%" height="15" fill="rgb(239,54,39)" fg:x="4857" fg:w="40"/><text x="4.1749%" y="863.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (40 samples, 0.03%)</title><rect x="3.9249%" y="837" width="0.0323%" height="15" fill="rgb(230,99,41)" fg:x="4857" fg:w="40"/><text x="4.1749%" y="847.50"></text></g><g><title>std::sys::unix::time::inner::now (40 samples, 0.03%)</title><rect x="3.9249%" y="821" width="0.0323%" height="15" fill="rgb(253,106,12)" fg:x="4857" fg:w="40"/><text x="4.1749%" y="831.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (44 samples, 0.04%)</title><rect x="3.9573%" y="869" width="0.0356%" height="15" fill="rgb(213,46,41)" fg:x="4897" fg:w="44"/><text x="4.2073%" y="879.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event (26 samples, 0.02%)</title><rect x="3.9718%" y="853" width="0.0210%" height="15" fill="rgb(215,133,35)" fg:x="4915" fg:w="26"/><text x="4.2218%" y="863.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (26 samples, 0.02%)</title><rect x="3.9718%" y="837" width="0.0210%" height="15" fill="rgb(213,28,5)" fg:x="4915" fg:w="26"/><text x="4.2218%" y="847.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (26 samples, 0.02%)</title><rect x="3.9718%" y="821" width="0.0210%" height="15" fill="rgb(215,77,49)" fg:x="4915" fg:w="26"/><text x="4.2218%" y="831.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (26 samples, 0.02%)</title><rect x="3.9718%" y="805" width="0.0210%" height="15" fill="rgb(248,100,22)" fg:x="4915" fg:w="26"/><text x="4.2218%" y="815.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (15 samples, 0.01%)</title><rect x="3.9807%" y="789" width="0.0121%" height="15" fill="rgb(208,67,9)" fg:x="4926" fg:w="15"/><text x="4.2307%" y="799.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::pull_data (21 samples, 0.02%)</title><rect x="3.9928%" y="869" width="0.0170%" height="15" fill="rgb(219,133,21)" fg:x="4941" fg:w="21"/><text x="4.2428%" y="879.50"></text></g><g><title>tremor_runtime::connectors::source::Streams::get_or_create_stream (22 samples, 0.02%)</title><rect x="4.0098%" y="869" width="0.0178%" height="15" fill="rgb(246,46,29)" fg:x="4962" fg:w="22"/><text x="4.2598%" y="879.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (22 samples, 0.02%)</title><rect x="4.0518%" y="853" width="0.0178%" height="15" fill="rgb(246,185,52)" fg:x="5014" fg:w="22"/><text x="4.3018%" y="863.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (22 samples, 0.02%)</title><rect x="4.0518%" y="837" width="0.0178%" height="15" fill="rgb(252,136,11)" fg:x="5014" fg:w="22"/><text x="4.3018%" y="847.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (22 samples, 0.02%)</title><rect x="4.0518%" y="821" width="0.0178%" height="15" fill="rgb(219,138,53)" fg:x="5014" fg:w="22"/><text x="4.3018%" y="831.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (22 samples, 0.02%)</title><rect x="4.0518%" y="805" width="0.0178%" height="15" fill="rgb(211,51,23)" fg:x="5014" fg:w="22"/><text x="4.3018%" y="815.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (22 samples, 0.02%)</title><rect x="4.0518%" y="789" width="0.0178%" height="15" fill="rgb(247,221,28)" fg:x="5014" fg:w="22"/><text x="4.3018%" y="799.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (22 samples, 0.02%)</title><rect x="4.0518%" y="773" width="0.0178%" height="15" fill="rgb(251,222,45)" fg:x="5014" fg:w="22"/><text x="4.3018%" y="783.50"></text></g><g><title>alloc::slice::hack::to_vec (22 samples, 0.02%)</title><rect x="4.0518%" y="757" width="0.0178%" height="15" fill="rgb(217,162,53)" fg:x="5014" fg:w="22"/><text x="4.3018%" y="767.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (22 samples, 0.02%)</title><rect x="4.0518%" y="741" width="0.0178%" height="15" fill="rgb(229,93,14)" fg:x="5014" fg:w="22"/><text x="4.3018%" y="751.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (13 samples, 0.01%)</title><rect x="4.0591%" y="725" width="0.0105%" height="15" fill="rgb(209,67,49)" fg:x="5023" fg:w="13"/><text x="4.3091%" y="735.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13 samples, 0.01%)</title><rect x="4.0591%" y="709" width="0.0105%" height="15" fill="rgb(213,87,29)" fg:x="5023" fg:w="13"/><text x="4.3091%" y="719.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (67 samples, 0.05%)</title><rect x="4.0276%" y="869" width="0.0541%" height="15" fill="rgb(205,151,52)" fg:x="4984" fg:w="67"/><text x="4.2776%" y="879.50"></text></g><g><title>tremor_runtime::connectors::utils::metrics::SourceReporter::periodic_flush (25 samples, 0.02%)</title><rect x="4.0817%" y="869" width="0.0202%" height="15" fill="rgb(253,215,39)" fg:x="5051" fg:w="25"/><text x="4.3317%" y="879.50"></text></g><g><title>tremor_runtime::pipeline::maybe_send (35 samples, 0.03%)</title><rect x="4.1019%" y="869" width="0.0283%" height="15" fill="rgb(221,220,41)" fg:x="5076" fg:w="35"/><text x="4.3519%" y="879.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (20 samples, 0.02%)</title><rect x="4.1326%" y="869" width="0.0162%" height="15" fill="rgb(218,133,21)" fg:x="5114" fg:w="20"/><text x="4.3826%" y="879.50"></text></g><g><title>tremor_script::srs::EventPayload::try_new (38 samples, 0.03%)</title><rect x="4.1488%" y="869" width="0.0307%" height="15" fill="rgb(221,193,43)" fg:x="5134" fg:w="38"/><text x="4.3988%" y="879.50"></text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (15 samples, 0.01%)</title><rect x="4.1674%" y="853" width="0.0121%" height="15" fill="rgb(240,128,52)" fg:x="5157" fg:w="15"/><text x="4.4174%" y="863.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (25 samples, 0.02%)</title><rect x="4.1843%" y="869" width="0.0202%" height="15" fill="rgb(253,114,12)" fg:x="5178" fg:w="25"/><text x="4.4343%" y="879.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (17 samples, 0.01%)</title><rect x="4.1908%" y="853" width="0.0137%" height="15" fill="rgb(215,223,47)" fg:x="5186" fg:w="17"/><text x="4.4408%" y="863.50"></text></g><g><title>[anon] (4,961 samples, 4.01%)</title><rect x="0.1972%" y="885" width="4.0090%" height="15" fill="rgb(248,225,23)" fg:x="244" fg:w="4961"/><text x="0.4472%" y="895.50">[ano..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (17 samples, 0.01%)</title><rect x="4.3015%" y="709" width="0.0137%" height="15" fill="rgb(250,108,0)" fg:x="5323" fg:w="17"/><text x="4.5515%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (17 samples, 0.01%)</title><rect x="4.3015%" y="693" width="0.0137%" height="15" fill="rgb(228,208,7)" fg:x="5323" fg:w="17"/><text x="4.5515%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (17 samples, 0.01%)</title><rect x="4.3015%" y="677" width="0.0137%" height="15" fill="rgb(244,45,10)" fg:x="5323" fg:w="17"/><text x="4.5515%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.01%)</title><rect x="4.3015%" y="661" width="0.0137%" height="15" fill="rgb(207,125,25)" fg:x="5323" fg:w="17"/><text x="4.5515%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.01%)</title><rect x="4.3015%" y="645" width="0.0137%" height="15" fill="rgb(210,195,18)" fg:x="5323" fg:w="17"/><text x="4.5515%" y="655.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.01%)</title><rect x="4.3015%" y="629" width="0.0137%" height="15" fill="rgb(249,80,12)" fg:x="5323" fg:w="17"/><text x="4.5515%" y="639.50"></text></g><g><title>__rg_alloc (17 samples, 0.01%)</title><rect x="4.3015%" y="613" width="0.0137%" height="15" fill="rgb(221,65,9)" fg:x="5323" fg:w="17"/><text x="4.5515%" y="623.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (17 samples, 0.01%)</title><rect x="4.3015%" y="597" width="0.0137%" height="15" fill="rgb(235,49,36)" fg:x="5323" fg:w="17"/><text x="4.5515%" y="607.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (24 samples, 0.02%)</title><rect x="4.2999%" y="837" width="0.0194%" height="15" fill="rgb(225,32,20)" fg:x="5321" fg:w="24"/><text x="4.5499%" y="847.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (22 samples, 0.02%)</title><rect x="4.3015%" y="821" width="0.0178%" height="15" fill="rgb(215,141,46)" fg:x="5323" fg:w="22"/><text x="4.5515%" y="831.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (22 samples, 0.02%)</title><rect x="4.3015%" y="805" width="0.0178%" height="15" fill="rgb(250,160,47)" fg:x="5323" fg:w="22"/><text x="4.5515%" y="815.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (22 samples, 0.02%)</title><rect x="4.3015%" y="789" width="0.0178%" height="15" fill="rgb(216,222,40)" fg:x="5323" fg:w="22"/><text x="4.5515%" y="799.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (22 samples, 0.02%)</title><rect x="4.3015%" y="773" width="0.0178%" height="15" fill="rgb(234,217,39)" fg:x="5323" fg:w="22"/><text x="4.5515%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (22 samples, 0.02%)</title><rect x="4.3015%" y="757" width="0.0178%" height="15" fill="rgb(207,178,40)" fg:x="5323" fg:w="22"/><text x="4.5515%" y="767.50"></text></g><g><title>alloc::slice::hack::to_vec (22 samples, 0.02%)</title><rect x="4.3015%" y="741" width="0.0178%" height="15" fill="rgb(221,136,13)" fg:x="5323" fg:w="22"/><text x="4.5515%" y="751.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (22 samples, 0.02%)</title><rect x="4.3015%" y="725" width="0.0178%" height="15" fill="rgb(249,199,10)" fg:x="5323" fg:w="22"/><text x="4.5515%" y="735.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (56 samples, 0.05%)</title><rect x="4.2845%" y="869" width="0.0453%" height="15" fill="rgb(249,222,13)" fg:x="5302" fg:w="56"/><text x="4.5345%" y="879.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (37 samples, 0.03%)</title><rect x="4.2999%" y="853" width="0.0299%" height="15" fill="rgb(244,185,38)" fg:x="5321" fg:w="37"/><text x="4.5499%" y="863.50"></text></g><g><title>tremor_runtime::connectors::impls::bench::Acc::next (13 samples, 0.01%)</title><rect x="4.3193%" y="837" width="0.0105%" height="15" fill="rgb(236,202,9)" fg:x="5345" fg:w="13"/><text x="4.5693%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (13 samples, 0.01%)</title><rect x="4.3193%" y="821" width="0.0105%" height="15" fill="rgb(250,229,37)" fg:x="5345" fg:w="13"/><text x="4.5693%" y="831.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (13 samples, 0.01%)</title><rect x="4.3193%" y="805" width="0.0105%" height="15" fill="rgb(206,174,23)" fg:x="5345" fg:w="13"/><text x="4.5693%" y="815.50"></text></g><g><title>alloc::slice::hack::to_vec (13 samples, 0.01%)</title><rect x="4.3193%" y="789" width="0.0105%" height="15" fill="rgb(211,33,43)" fg:x="5345" fg:w="13"/><text x="4.5693%" y="799.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (13 samples, 0.01%)</title><rect x="4.3193%" y="773" width="0.0105%" height="15" fill="rgb(245,58,50)" fg:x="5345" fg:w="13"/><text x="4.5693%" y="783.50"></text></g><g><title>__clock_gettime (13 samples, 0.01%)</title><rect x="4.3516%" y="869" width="0.0105%" height="15" fill="rgb(244,68,36)" fg:x="5385" fg:w="13"/><text x="4.6016%" y="879.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (29 samples, 0.02%)</title><rect x="4.3621%" y="869" width="0.0234%" height="15" fill="rgb(232,229,15)" fg:x="5398" fg:w="29"/><text x="4.6121%" y="879.50"></text></g><g><title>event_listener::Event::inner (14 samples, 0.01%)</title><rect x="4.3961%" y="853" width="0.0113%" height="15" fill="rgb(254,30,23)" fg:x="5440" fg:w="14"/><text x="4.6461%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (14 samples, 0.01%)</title><rect x="4.3961%" y="837" width="0.0113%" height="15" fill="rgb(235,160,14)" fg:x="5440" fg:w="14"/><text x="4.6461%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_load (14 samples, 0.01%)</title><rect x="4.3961%" y="821" width="0.0113%" height="15" fill="rgb(212,155,44)" fg:x="5440" fg:w="14"/><text x="4.6461%" y="831.50"></text></g><g><title>event_listener::Event::listen (19 samples, 0.02%)</title><rect x="4.3936%" y="869" width="0.0154%" height="15" fill="rgb(226,2,50)" fg:x="5437" fg:w="19"/><text x="4.6436%" y="879.50"></text></g><g><title>event_listener::Event::notify (22 samples, 0.02%)</title><rect x="4.4090%" y="869" width="0.0178%" height="15" fill="rgb(234,177,6)" fg:x="5456" fg:w="22"/><text x="4.6590%" y="879.50"></text></g><g><title>event_listener::full_fence (22 samples, 0.02%)</title><rect x="4.4090%" y="853" width="0.0178%" height="15" fill="rgb(217,24,9)" fg:x="5456" fg:w="22"/><text x="4.6590%" y="863.50"></text></g><g><title>[libc-2.31.so] (275 samples, 0.22%)</title><rect x="4.2062%" y="885" width="0.2222%" height="15" fill="rgb(220,13,46)" fg:x="5205" fg:w="275"/><text x="4.4562%" y="895.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (47 samples, 0.04%)</title><rect x="4.4316%" y="869" width="0.0380%" height="15" fill="rgb(239,221,27)" fg:x="5484" fg:w="47"/><text x="4.6816%" y="879.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (55 samples, 0.04%)</title><rect x="4.4720%" y="869" width="0.0444%" height="15" fill="rgb(222,198,25)" fg:x="5534" fg:w="55"/><text x="4.7220%" y="879.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (14 samples, 0.01%)</title><rect x="4.5237%" y="869" width="0.0113%" height="15" fill="rgb(211,99,13)" fg:x="5598" fg:w="14"/><text x="4.7737%" y="879.50"></text></g><g><title>hashbrown::raw::inner::RawIter&lt;T&gt;::drop_elements (51 samples, 0.04%)</title><rect x="4.5359%" y="869" width="0.0412%" height="15" fill="rgb(232,111,31)" fg:x="5613" fg:w="51"/><text x="4.7859%" y="879.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (15 samples, 0.01%)</title><rect x="4.5771%" y="869" width="0.0121%" height="15" fill="rgb(245,82,37)" fg:x="5664" fg:w="15"/><text x="4.8271%" y="879.50"></text></g><g><title>[pdk-hashbrown] (207 samples, 0.17%)</title><rect x="4.4284%" y="885" width="0.1673%" height="15" fill="rgb(227,149,46)" fg:x="5480" fg:w="207"/><text x="4.6784%" y="895.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (73 samples, 0.06%)</title><rect x="4.6118%" y="869" width="0.0590%" height="15" fill="rgb(218,36,50)" fg:x="5707" fg:w="73"/><text x="4.8618%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (24 samples, 0.02%)</title><rect x="4.6514%" y="853" width="0.0194%" height="15" fill="rgb(226,80,48)" fg:x="5756" fg:w="24"/><text x="4.9014%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (24 samples, 0.02%)</title><rect x="4.6514%" y="837" width="0.0194%" height="15" fill="rgb(238,224,15)" fg:x="5756" fg:w="24"/><text x="4.9014%" y="847.50"></text></g><g><title>[libc-2.31.so] (700 samples, 0.57%)</title><rect x="4.8567%" y="645" width="0.5657%" height="15" fill="rgb(241,136,10)" fg:x="6010" fg:w="700"/><text x="5.1067%" y="655.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (754 samples, 0.61%)</title><rect x="4.8203%" y="661" width="0.6093%" height="15" fill="rgb(208,32,45)" fg:x="5965" fg:w="754"/><text x="5.0703%" y="671.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (1,207 samples, 0.98%)</title><rect x="4.7654%" y="677" width="0.9754%" height="15" fill="rgb(207,135,9)" fg:x="5897" fg:w="1207"/><text x="5.0154%" y="687.50"></text></g><g><title>[libc-2.31.so] (385 samples, 0.31%)</title><rect x="5.4296%" y="661" width="0.3111%" height="15" fill="rgb(206,86,44)" fg:x="6719" fg:w="385"/><text x="5.6796%" y="671.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (1,249 samples, 1.01%)</title><rect x="4.7379%" y="725" width="1.0093%" height="15" fill="rgb(245,177,15)" fg:x="5863" fg:w="1249"/><text x="4.9879%" y="735.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,249 samples, 1.01%)</title><rect x="4.7379%" y="709" width="1.0093%" height="15" fill="rgb(206,64,50)" fg:x="5863" fg:w="1249"/><text x="4.9879%" y="719.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (1,249 samples, 1.01%)</title><rect x="4.7379%" y="693" width="1.0093%" height="15" fill="rgb(234,36,40)" fg:x="5863" fg:w="1249"/><text x="4.9879%" y="703.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (52 samples, 0.04%)</title><rect x="5.7529%" y="517" width="0.0420%" height="15" fill="rgb(213,64,8)" fg:x="7119" fg:w="52"/><text x="6.0029%" y="527.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (52 samples, 0.04%)</title><rect x="5.7529%" y="501" width="0.0420%" height="15" fill="rgb(210,75,36)" fg:x="7119" fg:w="52"/><text x="6.0029%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (52 samples, 0.04%)</title><rect x="5.7529%" y="485" width="0.0420%" height="15" fill="rgb(229,88,21)" fg:x="7119" fg:w="52"/><text x="6.0029%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (52 samples, 0.04%)</title><rect x="5.7529%" y="469" width="0.0420%" height="15" fill="rgb(252,204,47)" fg:x="7119" fg:w="52"/><text x="6.0029%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (52 samples, 0.04%)</title><rect x="5.7529%" y="453" width="0.0420%" height="15" fill="rgb(208,77,27)" fg:x="7119" fg:w="52"/><text x="6.0029%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (52 samples, 0.04%)</title><rect x="5.7529%" y="437" width="0.0420%" height="15" fill="rgb(221,76,26)" fg:x="7119" fg:w="52"/><text x="6.0029%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (52 samples, 0.04%)</title><rect x="5.7529%" y="421" width="0.0420%" height="15" fill="rgb(225,139,18)" fg:x="7119" fg:w="52"/><text x="6.0029%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (52 samples, 0.04%)</title><rect x="5.7529%" y="405" width="0.0420%" height="15" fill="rgb(230,137,11)" fg:x="7119" fg:w="52"/><text x="6.0029%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (52 samples, 0.04%)</title><rect x="5.7529%" y="389" width="0.0420%" height="15" fill="rgb(212,28,1)" fg:x="7119" fg:w="52"/><text x="6.0029%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (52 samples, 0.04%)</title><rect x="5.7529%" y="373" width="0.0420%" height="15" fill="rgb(248,164,17)" fg:x="7119" fg:w="52"/><text x="6.0029%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (52 samples, 0.04%)</title><rect x="5.7529%" y="357" width="0.0420%" height="15" fill="rgb(222,171,42)" fg:x="7119" fg:w="52"/><text x="6.0029%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (52 samples, 0.04%)</title><rect x="5.7529%" y="341" width="0.0420%" height="15" fill="rgb(243,84,45)" fg:x="7119" fg:w="52"/><text x="6.0029%" y="351.50"></text></g><g><title>alloc::alloc::alloc (52 samples, 0.04%)</title><rect x="5.7529%" y="325" width="0.0420%" height="15" fill="rgb(252,49,23)" fg:x="7119" fg:w="52"/><text x="6.0029%" y="335.50"></text></g><g><title>__rg_alloc (52 samples, 0.04%)</title><rect x="5.7529%" y="309" width="0.0420%" height="15" fill="rgb(215,19,7)" fg:x="7119" fg:w="52"/><text x="6.0029%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (52 samples, 0.04%)</title><rect x="5.7529%" y="293" width="0.0420%" height="15" fill="rgb(238,81,41)" fg:x="7119" fg:w="52"/><text x="6.0029%" y="303.50"></text></g><g><title>sn_rust_alloc (52 samples, 0.04%)</title><rect x="5.7529%" y="277" width="0.0420%" height="15" fill="rgb(210,199,37)" fg:x="7119" fg:w="52"/><text x="6.0029%" y="287.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (52 samples, 0.04%)</title><rect x="5.7529%" y="261" width="0.0420%" height="15" fill="rgb(244,192,49)" fg:x="7119" fg:w="52"/><text x="6.0029%" y="271.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (87 samples, 0.07%)</title><rect x="5.7472%" y="709" width="0.0703%" height="15" fill="rgb(226,211,11)" fg:x="7112" fg:w="87"/><text x="5.9972%" y="719.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (87 samples, 0.07%)</title><rect x="5.7472%" y="693" width="0.0703%" height="15" fill="rgb(236,162,54)" fg:x="7112" fg:w="87"/><text x="5.9972%" y="703.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (87 samples, 0.07%)</title><rect x="5.7472%" y="677" width="0.0703%" height="15" fill="rgb(220,229,9)" fg:x="7112" fg:w="87"/><text x="5.9972%" y="687.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (87 samples, 0.07%)</title><rect x="5.7472%" y="661" width="0.0703%" height="15" fill="rgb(250,87,22)" fg:x="7112" fg:w="87"/><text x="5.9972%" y="671.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (80 samples, 0.06%)</title><rect x="5.7529%" y="645" width="0.0646%" height="15" fill="rgb(239,43,17)" fg:x="7119" fg:w="80"/><text x="6.0029%" y="655.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (80 samples, 0.06%)</title><rect x="5.7529%" y="629" width="0.0646%" height="15" fill="rgb(231,177,25)" fg:x="7119" fg:w="80"/><text x="6.0029%" y="639.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (80 samples, 0.06%)</title><rect x="5.7529%" y="613" width="0.0646%" height="15" fill="rgb(219,179,1)" fg:x="7119" fg:w="80"/><text x="6.0029%" y="623.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (80 samples, 0.06%)</title><rect x="5.7529%" y="597" width="0.0646%" height="15" fill="rgb(238,219,53)" fg:x="7119" fg:w="80"/><text x="6.0029%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (80 samples, 0.06%)</title><rect x="5.7529%" y="581" width="0.0646%" height="15" fill="rgb(232,167,36)" fg:x="7119" fg:w="80"/><text x="6.0029%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (80 samples, 0.06%)</title><rect x="5.7529%" y="565" width="0.0646%" height="15" fill="rgb(244,19,51)" fg:x="7119" fg:w="80"/><text x="6.0029%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (80 samples, 0.06%)</title><rect x="5.7529%" y="549" width="0.0646%" height="15" fill="rgb(224,6,22)" fg:x="7119" fg:w="80"/><text x="6.0029%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (80 samples, 0.06%)</title><rect x="5.7529%" y="533" width="0.0646%" height="15" fill="rgb(224,145,5)" fg:x="7119" fg:w="80"/><text x="6.0029%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (28 samples, 0.02%)</title><rect x="5.7949%" y="517" width="0.0226%" height="15" fill="rgb(234,130,49)" fg:x="7171" fg:w="28"/><text x="6.0449%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (28 samples, 0.02%)</title><rect x="5.7949%" y="501" width="0.0226%" height="15" fill="rgb(254,6,2)" fg:x="7171" fg:w="28"/><text x="6.0449%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (28 samples, 0.02%)</title><rect x="5.7949%" y="485" width="0.0226%" height="15" fill="rgb(208,96,46)" fg:x="7171" fg:w="28"/><text x="6.0449%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (28 samples, 0.02%)</title><rect x="5.7949%" y="469" width="0.0226%" height="15" fill="rgb(239,3,39)" fg:x="7171" fg:w="28"/><text x="6.0449%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (28 samples, 0.02%)</title><rect x="5.7949%" y="453" width="0.0226%" height="15" fill="rgb(233,210,1)" fg:x="7171" fg:w="28"/><text x="6.0449%" y="463.50"></text></g><g><title>alloc::alloc::alloc (28 samples, 0.02%)</title><rect x="5.7949%" y="437" width="0.0226%" height="15" fill="rgb(244,137,37)" fg:x="7171" fg:w="28"/><text x="6.0449%" y="447.50"></text></g><g><title>__rg_alloc (28 samples, 0.02%)</title><rect x="5.7949%" y="421" width="0.0226%" height="15" fill="rgb(240,136,2)" fg:x="7171" fg:w="28"/><text x="6.0449%" y="431.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (28 samples, 0.02%)</title><rect x="5.7949%" y="405" width="0.0226%" height="15" fill="rgb(239,18,37)" fg:x="7171" fg:w="28"/><text x="6.0449%" y="415.50"></text></g><g><title>sn_rust_alloc (28 samples, 0.02%)</title><rect x="5.7949%" y="389" width="0.0226%" height="15" fill="rgb(218,185,22)" fg:x="7171" fg:w="28"/><text x="6.0449%" y="399.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (28 samples, 0.02%)</title><rect x="5.7949%" y="373" width="0.0226%" height="15" fill="rgb(225,218,4)" fg:x="7171" fg:w="28"/><text x="6.0449%" y="383.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (145 samples, 0.12%)</title><rect x="5.8523%" y="629" width="0.1172%" height="15" fill="rgb(230,182,32)" fg:x="7242" fg:w="145"/><text x="6.1023%" y="639.50"></text></g><g><title>[libc-2.31.so] (209 samples, 0.17%)</title><rect x="5.9694%" y="613" width="0.1689%" height="15" fill="rgb(242,56,43)" fg:x="7387" fg:w="209"/><text x="6.2194%" y="623.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (435 samples, 0.35%)</title><rect x="5.9694%" y="629" width="0.3515%" height="15" fill="rgb(233,99,24)" fg:x="7387" fg:w="435"/><text x="6.2194%" y="639.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (226 samples, 0.18%)</title><rect x="6.1383%" y="613" width="0.1826%" height="15" fill="rgb(234,209,42)" fg:x="7596" fg:w="226"/><text x="6.3883%" y="623.50"></text></g><g><title>[libc-2.31.so] (218 samples, 0.18%)</title><rect x="6.1448%" y="597" width="0.1762%" height="15" fill="rgb(227,7,12)" fg:x="7604" fg:w="218"/><text x="6.3948%" y="607.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (188 samples, 0.15%)</title><rect x="6.3266%" y="597" width="0.1519%" height="15" fill="rgb(245,203,43)" fg:x="7829" fg:w="188"/><text x="6.5766%" y="607.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (188 samples, 0.15%)</title><rect x="6.3266%" y="581" width="0.1519%" height="15" fill="rgb(238,205,33)" fg:x="7829" fg:w="188"/><text x="6.5766%" y="591.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (188 samples, 0.15%)</title><rect x="6.3266%" y="565" width="0.1519%" height="15" fill="rgb(231,56,7)" fg:x="7829" fg:w="188"/><text x="6.5766%" y="575.50"></text></g><g><title>[libc-2.31.so] (166 samples, 0.13%)</title><rect x="6.3444%" y="549" width="0.1341%" height="15" fill="rgb(244,186,29)" fg:x="7851" fg:w="166"/><text x="6.5944%" y="559.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (14 samples, 0.01%)</title><rect x="6.4785%" y="597" width="0.0113%" height="15" fill="rgb(234,111,31)" fg:x="8017" fg:w="14"/><text x="6.7285%" y="607.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (383 samples, 0.31%)</title><rect x="6.3210%" y="629" width="0.3095%" height="15" fill="rgb(241,149,10)" fg:x="7822" fg:w="383"/><text x="6.5710%" y="639.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (383 samples, 0.31%)</title><rect x="6.3210%" y="613" width="0.3095%" height="15" fill="rgb(249,206,44)" fg:x="7822" fg:w="383"/><text x="6.5710%" y="623.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (174 samples, 0.14%)</title><rect x="6.4899%" y="597" width="0.1406%" height="15" fill="rgb(251,153,30)" fg:x="8031" fg:w="174"/><text x="6.7399%" y="607.50"></text></g><g><title>[libc-2.31.so] (170 samples, 0.14%)</title><rect x="6.4931%" y="581" width="0.1374%" height="15" fill="rgb(239,152,38)" fg:x="8035" fg:w="170"/><text x="6.7431%" y="591.50"></text></g><g><title>[libc-2.31.so] (356 samples, 0.29%)</title><rect x="6.6305%" y="629" width="0.2877%" height="15" fill="rgb(249,139,47)" fg:x="8205" fg:w="356"/><text x="6.8805%" y="639.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (105 samples, 0.08%)</title><rect x="6.9181%" y="629" width="0.0849%" height="15" fill="rgb(244,64,35)" fg:x="8561" fg:w="105"/><text x="7.1681%" y="639.50"></text></g><g><title>[libc-2.31.so] (90 samples, 0.07%)</title><rect x="6.9303%" y="613" width="0.0727%" height="15" fill="rgb(216,46,15)" fg:x="8576" fg:w="90"/><text x="7.1803%" y="623.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn (13 samples, 0.01%)</title><rect x="7.0030%" y="581" width="0.0105%" height="15" fill="rgb(250,74,19)" fg:x="8666" fg:w="13"/><text x="7.2530%" y="591.50"></text></g><g><title>async_ffi::DropBomb::with (13 samples, 0.01%)</title><rect x="7.0030%" y="565" width="0.0105%" height="15" fill="rgb(249,42,33)" fg:x="8666" fg:w="13"/><text x="7.2530%" y="575.50"></text></g><g><title>sn_rust_dealloc (177 samples, 0.14%)</title><rect x="7.0135%" y="581" width="0.1430%" height="15" fill="rgb(242,149,17)" fg:x="8679" fg:w="177"/><text x="7.2635%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (191 samples, 0.15%)</title><rect x="7.0030%" y="629" width="0.1543%" height="15" fill="rgb(244,29,21)" fg:x="8666" fg:w="191"/><text x="7.2530%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (191 samples, 0.15%)</title><rect x="7.0030%" y="613" width="0.1543%" height="15" fill="rgb(220,130,37)" fg:x="8666" fg:w="191"/><text x="7.2530%" y="623.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (191 samples, 0.15%)</title><rect x="7.0030%" y="597" width="0.1543%" height="15" fill="rgb(211,67,2)" fg:x="8666" fg:w="191"/><text x="7.2530%" y="607.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (114 samples, 0.09%)</title><rect x="7.2058%" y="405" width="0.0921%" height="15" fill="rgb(235,68,52)" fg:x="8917" fg:w="114"/><text x="7.4558%" y="415.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::pull_data (175 samples, 0.14%)</title><rect x="7.1614%" y="613" width="0.1414%" height="15" fill="rgb(246,142,3)" fg:x="8862" fg:w="175"/><text x="7.4114%" y="623.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data (157 samples, 0.13%)</title><rect x="7.1759%" y="597" width="0.1269%" height="15" fill="rgb(241,25,7)" fg:x="8880" fg:w="157"/><text x="7.4259%" y="607.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (157 samples, 0.13%)</title><rect x="7.1759%" y="581" width="0.1269%" height="15" fill="rgb(242,119,39)" fg:x="8880" fg:w="157"/><text x="7.4259%" y="591.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (157 samples, 0.13%)</title><rect x="7.1759%" y="565" width="0.1269%" height="15" fill="rgb(241,98,45)" fg:x="8880" fg:w="157"/><text x="7.4259%" y="575.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (157 samples, 0.13%)</title><rect x="7.1759%" y="549" width="0.1269%" height="15" fill="rgb(254,28,30)" fg:x="8880" fg:w="157"/><text x="7.4259%" y="559.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (151 samples, 0.12%)</title><rect x="7.1808%" y="533" width="0.1220%" height="15" fill="rgb(241,142,54)" fg:x="8886" fg:w="151"/><text x="7.4308%" y="543.50"></text></g><g><title>alloc::alloc::exchange_malloc (151 samples, 0.12%)</title><rect x="7.1808%" y="517" width="0.1220%" height="15" fill="rgb(222,85,15)" fg:x="8886" fg:w="151"/><text x="7.4308%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (151 samples, 0.12%)</title><rect x="7.1808%" y="501" width="0.1220%" height="15" fill="rgb(210,85,47)" fg:x="8886" fg:w="151"/><text x="7.4308%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (151 samples, 0.12%)</title><rect x="7.1808%" y="485" width="0.1220%" height="15" fill="rgb(224,206,25)" fg:x="8886" fg:w="151"/><text x="7.4308%" y="495.50"></text></g><g><title>alloc::alloc::alloc (151 samples, 0.12%)</title><rect x="7.1808%" y="469" width="0.1220%" height="15" fill="rgb(243,201,19)" fg:x="8886" fg:w="151"/><text x="7.4308%" y="479.50"></text></g><g><title>__rg_alloc (151 samples, 0.12%)</title><rect x="7.1808%" y="453" width="0.1220%" height="15" fill="rgb(236,59,4)" fg:x="8886" fg:w="151"/><text x="7.4308%" y="463.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (151 samples, 0.12%)</title><rect x="7.1808%" y="437" width="0.1220%" height="15" fill="rgb(254,179,45)" fg:x="8886" fg:w="151"/><text x="7.4308%" y="447.50"></text></g><g><title>sn_rust_alloc (151 samples, 0.12%)</title><rect x="7.1808%" y="421" width="0.1220%" height="15" fill="rgb(226,14,10)" fg:x="8886" fg:w="151"/><text x="7.4308%" y="431.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,855 samples, 1.50%)</title><rect x="5.8175%" y="661" width="1.4990%" height="15" fill="rgb(244,27,41)" fg:x="7199" fg:w="1855"/><text x="6.0675%" y="671.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (1,852 samples, 1.50%)</title><rect x="5.8199%" y="645" width="1.4966%" height="15" fill="rgb(235,35,32)" fg:x="7202" fg:w="1852"/><text x="6.0699%" y="655.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_TO&lt;_ErasedPtr&gt;::pull_data (197 samples, 0.16%)</title><rect x="7.1573%" y="629" width="0.1592%" height="15" fill="rgb(218,68,31)" fg:x="8857" fg:w="197"/><text x="7.4073%" y="639.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::_::&lt;impl tremor_runtime::connectors::source::RawSource_trait::VTableInner_Ref&lt;_Self,_ErasedPtr&gt;&gt;::pull_data (17 samples, 0.01%)</title><rect x="7.3028%" y="613" width="0.0137%" height="15" fill="rgb(207,120,37)" fg:x="9037" fg:w="17"/><text x="7.5528%" y="623.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (1,946 samples, 1.57%)</title><rect x="5.7472%" y="725" width="1.5726%" height="15" fill="rgb(227,98,0)" fg:x="7112" fg:w="1946"/><text x="5.9972%" y="735.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1,859 samples, 1.50%)</title><rect x="5.8175%" y="709" width="1.5023%" height="15" fill="rgb(207,7,3)" fg:x="7199" fg:w="1859"/><text x="6.0675%" y="719.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (1,859 samples, 1.50%)</title><rect x="5.8175%" y="693" width="1.5023%" height="15" fill="rgb(206,98,19)" fg:x="7199" fg:w="1859"/><text x="6.0675%" y="703.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,859 samples, 1.50%)</title><rect x="5.8175%" y="677" width="1.5023%" height="15" fill="rgb(217,5,26)" fg:x="7199" fg:w="1859"/><text x="6.0675%" y="687.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (69 samples, 0.06%)</title><rect x="7.4305%" y="661" width="0.0558%" height="15" fill="rgb(235,190,38)" fg:x="9195" fg:w="69"/><text x="7.6805%" y="671.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (53 samples, 0.04%)</title><rect x="7.4434%" y="645" width="0.0428%" height="15" fill="rgb(247,86,24)" fg:x="9211" fg:w="53"/><text x="7.6934%" y="655.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (798 samples, 0.64%)</title><rect x="7.3481%" y="677" width="0.6449%" height="15" fill="rgb(205,101,16)" fg:x="9093" fg:w="798"/><text x="7.5981%" y="687.50"></text></g><g><title>[libc-2.31.so] (627 samples, 0.51%)</title><rect x="7.4862%" y="661" width="0.5067%" height="15" fill="rgb(246,168,33)" fg:x="9264" fg:w="627"/><text x="7.7362%" y="671.50"></text></g><g><title>[libc-2.31.so] (365 samples, 0.29%)</title><rect x="7.9929%" y="677" width="0.2950%" height="15" fill="rgb(231,114,1)" fg:x="9891" fg:w="365"/><text x="8.2429%" y="687.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,199 samples, 0.97%)</title><rect x="7.3198%" y="709" width="0.9689%" height="15" fill="rgb(207,184,53)" fg:x="9058" fg:w="1199"/><text x="7.5698%" y="719.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (1,199 samples, 0.97%)</title><rect x="7.3198%" y="693" width="0.9689%" height="15" fill="rgb(224,95,51)" fg:x="9058" fg:w="1199"/><text x="7.5698%" y="703.50"></text></g><g><title>[libc-2.31.so] (153 samples, 0.12%)</title><rect x="8.3121%" y="693" width="0.1236%" height="15" fill="rgb(212,188,45)" fg:x="10286" fg:w="153"/><text x="8.5621%" y="703.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (16 samples, 0.01%)</title><rect x="8.5812%" y="677" width="0.0129%" height="15" fill="rgb(223,154,38)" fg:x="10619" fg:w="16"/><text x="8.8312%" y="687.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 0.03%)</title><rect x="8.6063%" y="661" width="0.0251%" height="15" fill="rgb(251,22,52)" fg:x="10650" fg:w="31"/><text x="8.8563%" y="671.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (391 samples, 0.32%)</title><rect x="8.6063%" y="677" width="0.3160%" height="15" fill="rgb(229,209,22)" fg:x="10650" fg:w="391"/><text x="8.8563%" y="687.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (360 samples, 0.29%)</title><rect x="8.6313%" y="661" width="0.2909%" height="15" fill="rgb(234,138,34)" fg:x="10681" fg:w="360"/><text x="8.8813%" y="671.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (357 samples, 0.29%)</title><rect x="8.6337%" y="645" width="0.2885%" height="15" fill="rgb(212,95,11)" fg:x="10684" fg:w="357"/><text x="8.8837%" y="655.50"></text></g><g><title>core::ptr::read (357 samples, 0.29%)</title><rect x="8.6337%" y="629" width="0.2885%" height="15" fill="rgb(240,179,47)" fg:x="10684" fg:w="357"/><text x="8.8837%" y="639.50"></text></g><g><title>[libc-2.31.so] (353 samples, 0.29%)</title><rect x="8.6370%" y="613" width="0.2853%" height="15" fill="rgb(240,163,11)" fg:x="10688" fg:w="353"/><text x="8.8870%" y="623.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="8.9222%" y="677" width="0.0105%" height="15" fill="rgb(236,37,12)" fg:x="11041" fg:w="13"/><text x="9.1722%" y="687.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (20 samples, 0.02%)</title><rect x="9.2907%" y="405" width="0.0162%" height="15" fill="rgb(232,164,16)" fg:x="11497" fg:w="20"/><text x="9.5407%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (464 samples, 0.37%)</title><rect x="8.9327%" y="549" width="0.3750%" height="15" fill="rgb(244,205,15)" fg:x="11054" fg:w="464"/><text x="9.1827%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (464 samples, 0.37%)</title><rect x="8.9327%" y="533" width="0.3750%" height="15" fill="rgb(223,117,47)" fg:x="11054" fg:w="464"/><text x="9.1827%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (464 samples, 0.37%)</title><rect x="8.9327%" y="517" width="0.3750%" height="15" fill="rgb(244,107,35)" fg:x="11054" fg:w="464"/><text x="9.1827%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (462 samples, 0.37%)</title><rect x="8.9344%" y="501" width="0.3733%" height="15" fill="rgb(205,140,8)" fg:x="11056" fg:w="462"/><text x="9.1844%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (462 samples, 0.37%)</title><rect x="8.9344%" y="485" width="0.3733%" height="15" fill="rgb(228,84,46)" fg:x="11056" fg:w="462"/><text x="9.1844%" y="495.50"></text></g><g><title>alloc::alloc::alloc (462 samples, 0.37%)</title><rect x="8.9344%" y="469" width="0.3733%" height="15" fill="rgb(254,188,9)" fg:x="11056" fg:w="462"/><text x="9.1844%" y="479.50"></text></g><g><title>__rg_alloc (462 samples, 0.37%)</title><rect x="8.9344%" y="453" width="0.3733%" height="15" fill="rgb(206,112,54)" fg:x="11056" fg:w="462"/><text x="9.1844%" y="463.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (462 samples, 0.37%)</title><rect x="8.9344%" y="437" width="0.3733%" height="15" fill="rgb(216,84,49)" fg:x="11056" fg:w="462"/><text x="9.1844%" y="447.50"></text></g><g><title>sn_rust_alloc (448 samples, 0.36%)</title><rect x="8.9457%" y="421" width="0.3620%" height="15" fill="rgb(214,194,35)" fg:x="11070" fg:w="448"/><text x="9.1957%" y="431.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (507 samples, 0.41%)</title><rect x="8.9327%" y="677" width="0.4097%" height="15" fill="rgb(249,28,3)" fg:x="11054" fg:w="507"/><text x="9.1827%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (507 samples, 0.41%)</title><rect x="8.9327%" y="661" width="0.4097%" height="15" fill="rgb(222,56,52)" fg:x="11054" fg:w="507"/><text x="9.1827%" y="671.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (507 samples, 0.41%)</title><rect x="8.9327%" y="645" width="0.4097%" height="15" fill="rgb(245,217,50)" fg:x="11054" fg:w="507"/><text x="9.1827%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (507 samples, 0.41%)</title><rect x="8.9327%" y="629" width="0.4097%" height="15" fill="rgb(213,201,24)" fg:x="11054" fg:w="507"/><text x="9.1827%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (507 samples, 0.41%)</title><rect x="8.9327%" y="613" width="0.4097%" height="15" fill="rgb(248,116,28)" fg:x="11054" fg:w="507"/><text x="9.1827%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (507 samples, 0.41%)</title><rect x="8.9327%" y="597" width="0.4097%" height="15" fill="rgb(219,72,43)" fg:x="11054" fg:w="507"/><text x="9.1827%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (507 samples, 0.41%)</title><rect x="8.9327%" y="581" width="0.4097%" height="15" fill="rgb(209,138,14)" fg:x="11054" fg:w="507"/><text x="9.1827%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (507 samples, 0.41%)</title><rect x="8.9327%" y="565" width="0.4097%" height="15" fill="rgb(222,18,33)" fg:x="11054" fg:w="507"/><text x="9.1827%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (43 samples, 0.03%)</title><rect x="9.3077%" y="549" width="0.0347%" height="15" fill="rgb(213,199,7)" fg:x="11518" fg:w="43"/><text x="9.5577%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (43 samples, 0.03%)</title><rect x="9.3077%" y="533" width="0.0347%" height="15" fill="rgb(250,110,10)" fg:x="11518" fg:w="43"/><text x="9.5577%" y="543.50"></text></g><g><title>[libc-2.31.so] (37 samples, 0.03%)</title><rect x="9.3125%" y="517" width="0.0299%" height="15" fill="rgb(248,123,6)" fg:x="11524" fg:w="37"/><text x="9.5625%" y="527.50"></text></g><g><title>[libc-2.31.so] (921 samples, 0.74%)</title><rect x="9.3424%" y="677" width="0.7443%" height="15" fill="rgb(206,91,31)" fg:x="11561" fg:w="921"/><text x="9.5924%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::drain (19 samples, 0.02%)</title><rect x="10.0867%" y="677" width="0.0154%" height="15" fill="rgb(211,154,13)" fg:x="12482" fg:w="19"/><text x="10.3367%" y="687.50"></text></g><g><title>core::mem::replace (15 samples, 0.01%)</title><rect x="10.1198%" y="645" width="0.0121%" height="15" fill="rgb(225,148,7)" fg:x="12523" fg:w="15"/><text x="10.3698%" y="655.50"></text></g><g><title>core::ptr::write (15 samples, 0.01%)</title><rect x="10.1198%" y="629" width="0.0121%" height="15" fill="rgb(220,160,43)" fg:x="12523" fg:w="15"/><text x="10.3698%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (48 samples, 0.04%)</title><rect x="10.1021%" y="677" width="0.0388%" height="15" fill="rgb(213,52,39)" fg:x="12501" fg:w="48"/><text x="10.3521%" y="687.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (48 samples, 0.04%)</title><rect x="10.1021%" y="661" width="0.0388%" height="15" fill="rgb(243,137,7)" fg:x="12501" fg:w="48"/><text x="10.3521%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (15 samples, 0.01%)</title><rect x="10.1409%" y="677" width="0.0121%" height="15" fill="rgb(230,79,13)" fg:x="12549" fg:w="15"/><text x="10.3909%" y="687.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="10.1409%" y="661" width="0.0121%" height="15" fill="rgb(247,105,23)" fg:x="12549" fg:w="15"/><text x="10.3909%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::OutputTarget::send_event::{{closure}}&gt;&gt; (16 samples, 0.01%)</title><rect x="10.1530%" y="677" width="0.0129%" height="15" fill="rgb(223,179,41)" fg:x="12564" fg:w="16"/><text x="10.4030%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::pipeline::OutputTarget::send_event::{{closure}}&gt; (16 samples, 0.01%)</title><rect x="10.1530%" y="661" width="0.0129%" height="15" fill="rgb(218,9,34)" fg:x="12564" fg:w="16"/><text x="10.4030%" y="671.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_last_mut (14 samples, 0.01%)</title><rect x="10.1659%" y="677" width="0.0113%" height="15" fill="rgb(222,106,8)" fg:x="12580" fg:w="14"/><text x="10.4159%" y="687.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (109 samples, 0.09%)</title><rect x="10.2015%" y="645" width="0.0881%" height="15" fill="rgb(211,220,0)" fg:x="12624" fg:w="109"/><text x="10.4515%" y="655.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (103 samples, 0.08%)</title><rect x="10.2063%" y="629" width="0.0832%" height="15" fill="rgb(229,52,16)" fg:x="12630" fg:w="103"/><text x="10.4563%" y="639.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (103 samples, 0.08%)</title><rect x="10.2063%" y="613" width="0.0832%" height="15" fill="rgb(212,155,18)" fg:x="12630" fg:w="103"/><text x="10.4563%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (103 samples, 0.08%)</title><rect x="10.2063%" y="597" width="0.0832%" height="15" fill="rgb(242,21,14)" fg:x="12630" fg:w="103"/><text x="10.4563%" y="607.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (103 samples, 0.08%)</title><rect x="10.2063%" y="581" width="0.0832%" height="15" fill="rgb(222,19,48)" fg:x="12630" fg:w="103"/><text x="10.4563%" y="591.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (103 samples, 0.08%)</title><rect x="10.2063%" y="565" width="0.0832%" height="15" fill="rgb(232,45,27)" fg:x="12630" fg:w="103"/><text x="10.4563%" y="575.50"></text></g><g><title>[libc-2.31.so] (68 samples, 0.05%)</title><rect x="10.2346%" y="549" width="0.0550%" height="15" fill="rgb(249,103,42)" fg:x="12665" fg:w="68"/><text x="10.4846%" y="559.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (160 samples, 0.13%)</title><rect x="10.1772%" y="677" width="0.1293%" height="15" fill="rgb(246,81,33)" fg:x="12594" fg:w="160"/><text x="10.4272%" y="687.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get_mut (140 samples, 0.11%)</title><rect x="10.1934%" y="661" width="0.1131%" height="15" fill="rgb(252,33,42)" fg:x="12614" fg:w="140"/><text x="10.4434%" y="671.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.02%)</title><rect x="10.2895%" y="645" width="0.0170%" height="15" fill="rgb(209,212,41)" fg:x="12733" fg:w="21"/><text x="10.5395%" y="655.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (6,959 samples, 5.62%)</title><rect x="4.7379%" y="853" width="5.6236%" height="15" fill="rgb(207,154,6)" fg:x="5863" fg:w="6959"/><text x="4.9879%" y="863.50">async_e..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (6,959 samples, 5.62%)</title><rect x="4.7379%" y="837" width="5.6236%" height="15" fill="rgb(223,64,47)" fg:x="5863" fg:w="6959"/><text x="4.9879%" y="847.50">&lt;async_..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (6,959 samples, 5.62%)</title><rect x="4.7379%" y="821" width="5.6236%" height="15" fill="rgb(211,161,38)" fg:x="5863" fg:w="6959"/><text x="4.9879%" y="831.50">async_s..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (6,959 samples, 5.62%)</title><rect x="4.7379%" y="805" width="5.6236%" height="15" fill="rgb(219,138,40)" fg:x="5863" fg:w="6959"/><text x="4.9879%" y="815.50">std::th..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (6,959 samples, 5.62%)</title><rect x="4.7379%" y="789" width="5.6236%" height="15" fill="rgb(241,228,46)" fg:x="5863" fg:w="6959"/><text x="4.9879%" y="799.50">std::th..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (6,959 samples, 5.62%)</title><rect x="4.7379%" y="773" width="5.6236%" height="15" fill="rgb(223,209,38)" fg:x="5863" fg:w="6959"/><text x="4.9879%" y="783.50">async_s..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (6,959 samples, 5.62%)</title><rect x="4.7379%" y="757" width="5.6236%" height="15" fill="rgb(236,164,45)" fg:x="5863" fg:w="6959"/><text x="4.9879%" y="767.50">&lt;async_..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,959 samples, 5.62%)</title><rect x="4.7379%" y="741" width="5.6236%" height="15" fill="rgb(231,15,5)" fg:x="5863" fg:w="6959"/><text x="4.9879%" y="751.50">&lt;core::..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (3,764 samples, 3.04%)</title><rect x="7.3198%" y="725" width="3.0417%" height="15" fill="rgb(252,35,15)" fg:x="9058" fg:w="3764"/><text x="7.5698%" y="735.50">tre..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,565 samples, 2.07%)</title><rect x="8.2887%" y="709" width="2.0728%" height="15" fill="rgb(248,181,18)" fg:x="10257" fg:w="2565"/><text x="8.5387%" y="719.50">&lt;..</text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (2,383 samples, 1.93%)</title><rect x="8.4358%" y="693" width="1.9257%" height="15" fill="rgb(233,39,42)" fg:x="10439" fg:w="2383"/><text x="8.6858%" y="703.50">t..</text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (68 samples, 0.05%)</title><rect x="10.3065%" y="677" width="0.0550%" height="15" fill="rgb(238,110,33)" fg:x="12754" fg:w="68"/><text x="10.5565%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (68 samples, 0.05%)</title><rect x="10.3065%" y="661" width="0.0550%" height="15" fill="rgb(233,195,10)" fg:x="12754" fg:w="68"/><text x="10.5565%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (68 samples, 0.05%)</title><rect x="10.3065%" y="645" width="0.0550%" height="15" fill="rgb(254,105,3)" fg:x="12754" fg:w="68"/><text x="10.5565%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (54 samples, 0.04%)</title><rect x="10.3178%" y="629" width="0.0436%" height="15" fill="rgb(221,225,9)" fg:x="12768" fg:w="54"/><text x="10.5678%" y="639.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (220 samples, 0.18%)</title><rect x="10.6588%" y="453" width="0.1778%" height="15" fill="rgb(224,227,45)" fg:x="13190" fg:w="220"/><text x="10.9088%" y="463.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (284 samples, 0.23%)</title><rect x="10.6087%" y="613" width="0.2295%" height="15" fill="rgb(229,198,43)" fg:x="13128" fg:w="284"/><text x="10.8587%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (284 samples, 0.23%)</title><rect x="10.6087%" y="597" width="0.2295%" height="15" fill="rgb(206,209,35)" fg:x="13128" fg:w="284"/><text x="10.8587%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (275 samples, 0.22%)</title><rect x="10.6160%" y="581" width="0.2222%" height="15" fill="rgb(245,195,53)" fg:x="13137" fg:w="275"/><text x="10.8660%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (260 samples, 0.21%)</title><rect x="10.6281%" y="565" width="0.2101%" height="15" fill="rgb(240,92,26)" fg:x="13152" fg:w="260"/><text x="10.8781%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (260 samples, 0.21%)</title><rect x="10.6281%" y="549" width="0.2101%" height="15" fill="rgb(207,40,23)" fg:x="13152" fg:w="260"/><text x="10.8781%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (260 samples, 0.21%)</title><rect x="10.6281%" y="533" width="0.2101%" height="15" fill="rgb(223,111,35)" fg:x="13152" fg:w="260"/><text x="10.8781%" y="543.50"></text></g><g><title>alloc::alloc::alloc (260 samples, 0.21%)</title><rect x="10.6281%" y="517" width="0.2101%" height="15" fill="rgb(229,147,28)" fg:x="13152" fg:w="260"/><text x="10.8781%" y="527.50"></text></g><g><title>__rg_alloc (260 samples, 0.21%)</title><rect x="10.6281%" y="501" width="0.2101%" height="15" fill="rgb(211,29,28)" fg:x="13152" fg:w="260"/><text x="10.8781%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (260 samples, 0.21%)</title><rect x="10.6281%" y="485" width="0.2101%" height="15" fill="rgb(228,72,33)" fg:x="13152" fg:w="260"/><text x="10.8781%" y="495.50"></text></g><g><title>sn_rust_alloc (252 samples, 0.20%)</title><rect x="10.6346%" y="469" width="0.2036%" height="15" fill="rgb(205,214,31)" fg:x="13160" fg:w="252"/><text x="10.8846%" y="479.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (306 samples, 0.25%)</title><rect x="10.5958%" y="661" width="0.2473%" height="15" fill="rgb(224,111,15)" fg:x="13112" fg:w="306"/><text x="10.8458%" y="671.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (306 samples, 0.25%)</title><rect x="10.5958%" y="645" width="0.2473%" height="15" fill="rgb(253,21,26)" fg:x="13112" fg:w="306"/><text x="10.8458%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (306 samples, 0.25%)</title><rect x="10.5958%" y="629" width="0.2473%" height="15" fill="rgb(245,139,43)" fg:x="13112" fg:w="306"/><text x="10.8458%" y="639.50"></text></g><g><title>abi_stable::erased_types::iterator::next (16 samples, 0.01%)</title><rect x="10.8738%" y="613" width="0.0129%" height="15" fill="rgb(252,170,7)" fg:x="13456" fg:w="16"/><text x="11.1238%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (15 samples, 0.01%)</title><rect x="10.8746%" y="597" width="0.0121%" height="15" fill="rgb(231,118,14)" fg:x="13457" fg:w="15"/><text x="11.1246%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="10.8746%" y="581" width="0.0121%" height="15" fill="rgb(238,83,0)" fg:x="13457" fg:w="15"/><text x="11.1246%" y="591.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="10.8746%" y="565" width="0.0121%" height="15" fill="rgb(221,39,39)" fg:x="13457" fg:w="15"/><text x="11.1246%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="10.8746%" y="549" width="0.0121%" height="15" fill="rgb(222,119,46)" fg:x="13457" fg:w="15"/><text x="11.1246%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.03%)</title><rect x="10.8641%" y="645" width="0.0283%" height="15" fill="rgb(222,165,49)" fg:x="13444" fg:w="35"/><text x="11.1141%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (35 samples, 0.03%)</title><rect x="10.8641%" y="629" width="0.0283%" height="15" fill="rgb(219,113,52)" fg:x="13444" fg:w="35"/><text x="11.1141%" y="639.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint (16 samples, 0.01%)</title><rect x="10.9021%" y="613" width="0.0129%" height="15" fill="rgb(214,7,15)" fg:x="13491" fg:w="16"/><text x="11.1521%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint::{{closure}} (15 samples, 0.01%)</title><rect x="10.9029%" y="597" width="0.0121%" height="15" fill="rgb(235,32,4)" fg:x="13492" fg:w="15"/><text x="11.1529%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (39 samples, 0.03%)</title><rect x="10.8924%" y="645" width="0.0315%" height="15" fill="rgb(238,90,54)" fg:x="13479" fg:w="39"/><text x="11.1424%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (39 samples, 0.03%)</title><rect x="10.8924%" y="629" width="0.0315%" height="15" fill="rgb(213,208,19)" fg:x="13479" fg:w="39"/><text x="11.1424%" y="639.50"></text></g><g><title>sn_rust_dealloc (73 samples, 0.06%)</title><rect x="10.9570%" y="533" width="0.0590%" height="15" fill="rgb(233,156,4)" fg:x="13559" fg:w="73"/><text x="11.2070%" y="543.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (803 samples, 0.65%)</title><rect x="10.3687%" y="837" width="0.6489%" height="15" fill="rgb(207,194,5)" fg:x="12831" fg:w="803"/><text x="10.6187%" y="847.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (803 samples, 0.65%)</title><rect x="10.3687%" y="821" width="0.6489%" height="15" fill="rgb(206,111,30)" fg:x="12831" fg:w="803"/><text x="10.6187%" y="831.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (802 samples, 0.65%)</title><rect x="10.3695%" y="805" width="0.6481%" height="15" fill="rgb(243,70,54)" fg:x="12832" fg:w="802"/><text x="10.6195%" y="815.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (802 samples, 0.65%)</title><rect x="10.3695%" y="789" width="0.6481%" height="15" fill="rgb(242,28,8)" fg:x="12832" fg:w="802"/><text x="10.6195%" y="799.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (791 samples, 0.64%)</title><rect x="10.3784%" y="773" width="0.6392%" height="15" fill="rgb(219,106,18)" fg:x="12843" fg:w="791"/><text x="10.6284%" y="783.50"></text></g><g><title>tremor_script::srs::EventPayload::try_new (788 samples, 0.64%)</title><rect x="10.3809%" y="757" width="0.6368%" height="15" fill="rgb(244,222,10)" fg:x="12846" fg:w="788"/><text x="10.6309%" y="767.50"></text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (788 samples, 0.64%)</title><rect x="10.3809%" y="741" width="0.6368%" height="15" fill="rgb(236,179,52)" fg:x="12846" fg:w="788"/><text x="10.6309%" y="751.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (788 samples, 0.64%)</title><rect x="10.3809%" y="725" width="0.6368%" height="15" fill="rgb(213,23,39)" fg:x="12846" fg:w="788"/><text x="10.6309%" y="735.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (788 samples, 0.64%)</title><rect x="10.3809%" y="709" width="0.6368%" height="15" fill="rgb(238,48,10)" fg:x="12846" fg:w="788"/><text x="10.6309%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (788 samples, 0.64%)</title><rect x="10.3809%" y="693" width="0.6368%" height="15" fill="rgb(251,196,23)" fg:x="12846" fg:w="788"/><text x="10.6309%" y="703.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (522 samples, 0.42%)</title><rect x="10.5958%" y="677" width="0.4218%" height="15" fill="rgb(250,152,24)" fg:x="13112" fg:w="522"/><text x="10.8458%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (216 samples, 0.17%)</title><rect x="10.8431%" y="661" width="0.1745%" height="15" fill="rgb(209,150,17)" fg:x="13418" fg:w="216"/><text x="11.0931%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (104 samples, 0.08%)</title><rect x="10.9336%" y="645" width="0.0840%" height="15" fill="rgb(234,202,34)" fg:x="13530" fg:w="104"/><text x="11.1836%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt; (104 samples, 0.08%)</title><rect x="10.9336%" y="629" width="0.0840%" height="15" fill="rgb(253,148,53)" fg:x="13530" fg:w="104"/><text x="11.1836%" y="639.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (104 samples, 0.08%)</title><rect x="10.9336%" y="613" width="0.0840%" height="15" fill="rgb(218,129,16)" fg:x="13530" fg:w="104"/><text x="11.1836%" y="623.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (95 samples, 0.08%)</title><rect x="10.9409%" y="597" width="0.0768%" height="15" fill="rgb(216,85,19)" fg:x="13539" fg:w="95"/><text x="11.1909%" y="607.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (88 samples, 0.07%)</title><rect x="10.9465%" y="581" width="0.0711%" height="15" fill="rgb(235,228,7)" fg:x="13546" fg:w="88"/><text x="11.1965%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (88 samples, 0.07%)</title><rect x="10.9465%" y="565" width="0.0711%" height="15" fill="rgb(245,175,0)" fg:x="13546" fg:w="88"/><text x="11.1965%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (88 samples, 0.07%)</title><rect x="10.9465%" y="549" width="0.0711%" height="15" fill="rgb(208,168,36)" fg:x="13546" fg:w="88"/><text x="11.1965%" y="559.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::as_slice (16 samples, 0.01%)</title><rect x="12.0051%" y="453" width="0.0129%" height="15" fill="rgb(246,171,24)" fg:x="14856" fg:w="16"/><text x="12.2551%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (414 samples, 0.33%)</title><rect x="12.0181%" y="389" width="0.3346%" height="15" fill="rgb(215,142,24)" fg:x="14872" fg:w="414"/><text x="12.2681%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (414 samples, 0.33%)</title><rect x="12.0181%" y="373" width="0.3346%" height="15" fill="rgb(250,187,7)" fg:x="14872" fg:w="414"/><text x="12.2681%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (414 samples, 0.33%)</title><rect x="12.0181%" y="357" width="0.3346%" height="15" fill="rgb(228,66,33)" fg:x="14872" fg:w="414"/><text x="12.2681%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (412 samples, 0.33%)</title><rect x="12.0197%" y="341" width="0.3329%" height="15" fill="rgb(234,215,21)" fg:x="14874" fg:w="412"/><text x="12.2697%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (412 samples, 0.33%)</title><rect x="12.0197%" y="325" width="0.3329%" height="15" fill="rgb(222,191,20)" fg:x="14874" fg:w="412"/><text x="12.2697%" y="335.50"></text></g><g><title>alloc::alloc::alloc (412 samples, 0.33%)</title><rect x="12.0197%" y="309" width="0.3329%" height="15" fill="rgb(245,79,54)" fg:x="14874" fg:w="412"/><text x="12.2697%" y="319.50"></text></g><g><title>__rg_alloc (412 samples, 0.33%)</title><rect x="12.0197%" y="293" width="0.3329%" height="15" fill="rgb(240,10,37)" fg:x="14874" fg:w="412"/><text x="12.2697%" y="303.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (412 samples, 0.33%)</title><rect x="12.0197%" y="277" width="0.3329%" height="15" fill="rgb(214,192,32)" fg:x="14874" fg:w="412"/><text x="12.2697%" y="287.50"></text></g><g><title>sn_rust_alloc (390 samples, 0.32%)</title><rect x="12.0375%" y="261" width="0.3152%" height="15" fill="rgb(209,36,54)" fg:x="14896" fg:w="390"/><text x="12.2875%" y="271.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (31 samples, 0.03%)</title><rect x="12.3276%" y="245" width="0.0251%" height="15" fill="rgb(220,10,11)" fg:x="15255" fg:w="31"/><text x="12.5776%" y="255.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (509 samples, 0.41%)</title><rect x="11.9906%" y="501" width="0.4113%" height="15" fill="rgb(221,106,17)" fg:x="14838" fg:w="509"/><text x="12.2406%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (502 samples, 0.41%)</title><rect x="11.9963%" y="485" width="0.4057%" height="15" fill="rgb(251,142,44)" fg:x="14845" fg:w="502"/><text x="12.2463%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (491 samples, 0.40%)</title><rect x="12.0051%" y="469" width="0.3968%" height="15" fill="rgb(238,13,15)" fg:x="14856" fg:w="491"/><text x="12.2551%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (475 samples, 0.38%)</title><rect x="12.0181%" y="453" width="0.3838%" height="15" fill="rgb(208,107,27)" fg:x="14872" fg:w="475"/><text x="12.2681%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (475 samples, 0.38%)</title><rect x="12.0181%" y="437" width="0.3838%" height="15" fill="rgb(205,136,37)" fg:x="14872" fg:w="475"/><text x="12.2681%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (475 samples, 0.38%)</title><rect x="12.0181%" y="421" width="0.3838%" height="15" fill="rgb(250,205,27)" fg:x="14872" fg:w="475"/><text x="12.2681%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (475 samples, 0.38%)</title><rect x="12.0181%" y="405" width="0.3838%" height="15" fill="rgb(210,80,43)" fg:x="14872" fg:w="475"/><text x="12.2681%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (61 samples, 0.05%)</title><rect x="12.3526%" y="389" width="0.0493%" height="15" fill="rgb(247,160,36)" fg:x="15286" fg:w="61"/><text x="12.6026%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (61 samples, 0.05%)</title><rect x="12.3526%" y="373" width="0.0493%" height="15" fill="rgb(234,13,49)" fg:x="15286" fg:w="61"/><text x="12.6026%" y="383.50"></text></g><g><title>[libc-2.31.so] (50 samples, 0.04%)</title><rect x="12.3615%" y="357" width="0.0404%" height="15" fill="rgb(234,122,0)" fg:x="15297" fg:w="50"/><text x="12.6115%" y="367.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (24 samples, 0.02%)</title><rect x="12.4060%" y="485" width="0.0194%" height="15" fill="rgb(207,146,38)" fg:x="15352" fg:w="24"/><text x="12.6560%" y="495.50"></text></g><g><title>&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt; as core::convert::From&lt;alloc::vec::Vec&lt;T&gt;&gt;&gt;::from (16 samples, 0.01%)</title><rect x="12.4124%" y="469" width="0.0129%" height="15" fill="rgb(207,177,25)" fg:x="15360" fg:w="16"/><text x="12.6624%" y="479.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (40 samples, 0.03%)</title><rect x="12.5070%" y="149" width="0.0323%" height="15" fill="rgb(211,178,42)" fg:x="15477" fg:w="40"/><text x="12.7570%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (121 samples, 0.10%)</title><rect x="12.4431%" y="293" width="0.0978%" height="15" fill="rgb(230,69,54)" fg:x="15398" fg:w="121"/><text x="12.6931%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (121 samples, 0.10%)</title><rect x="12.4431%" y="277" width="0.0978%" height="15" fill="rgb(214,135,41)" fg:x="15398" fg:w="121"/><text x="12.6931%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (121 samples, 0.10%)</title><rect x="12.4431%" y="261" width="0.0978%" height="15" fill="rgb(237,67,25)" fg:x="15398" fg:w="121"/><text x="12.6931%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (116 samples, 0.09%)</title><rect x="12.4472%" y="245" width="0.0937%" height="15" fill="rgb(222,189,50)" fg:x="15403" fg:w="116"/><text x="12.6972%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (116 samples, 0.09%)</title><rect x="12.4472%" y="229" width="0.0937%" height="15" fill="rgb(245,148,34)" fg:x="15403" fg:w="116"/><text x="12.6972%" y="239.50"></text></g><g><title>alloc::alloc::alloc (115 samples, 0.09%)</title><rect x="12.4480%" y="213" width="0.0929%" height="15" fill="rgb(222,29,6)" fg:x="15404" fg:w="115"/><text x="12.6980%" y="223.50"></text></g><g><title>__rg_alloc (115 samples, 0.09%)</title><rect x="12.4480%" y="197" width="0.0929%" height="15" fill="rgb(221,189,43)" fg:x="15404" fg:w="115"/><text x="12.6980%" y="207.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (115 samples, 0.09%)</title><rect x="12.4480%" y="181" width="0.0929%" height="15" fill="rgb(207,36,27)" fg:x="15404" fg:w="115"/><text x="12.6980%" y="191.50"></text></g><g><title>sn_rust_alloc (110 samples, 0.09%)</title><rect x="12.4520%" y="165" width="0.0889%" height="15" fill="rgb(217,90,24)" fg:x="15409" fg:w="110"/><text x="12.7020%" y="175.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (176 samples, 0.14%)</title><rect x="12.4391%" y="405" width="0.1422%" height="15" fill="rgb(224,66,35)" fg:x="15393" fg:w="176"/><text x="12.6891%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (176 samples, 0.14%)</title><rect x="12.4391%" y="389" width="0.1422%" height="15" fill="rgb(221,13,50)" fg:x="15393" fg:w="176"/><text x="12.6891%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (176 samples, 0.14%)</title><rect x="12.4391%" y="373" width="0.1422%" height="15" fill="rgb(236,68,49)" fg:x="15393" fg:w="176"/><text x="12.6891%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (171 samples, 0.14%)</title><rect x="12.4431%" y="357" width="0.1382%" height="15" fill="rgb(229,146,28)" fg:x="15398" fg:w="171"/><text x="12.6931%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (171 samples, 0.14%)</title><rect x="12.4431%" y="341" width="0.1382%" height="15" fill="rgb(225,31,38)" fg:x="15398" fg:w="171"/><text x="12.6931%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (171 samples, 0.14%)</title><rect x="12.4431%" y="325" width="0.1382%" height="15" fill="rgb(250,208,3)" fg:x="15398" fg:w="171"/><text x="12.6931%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (171 samples, 0.14%)</title><rect x="12.4431%" y="309" width="0.1382%" height="15" fill="rgb(246,54,23)" fg:x="15398" fg:w="171"/><text x="12.6931%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (50 samples, 0.04%)</title><rect x="12.5409%" y="293" width="0.0404%" height="15" fill="rgb(243,76,11)" fg:x="15519" fg:w="50"/><text x="12.7909%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (50 samples, 0.04%)</title><rect x="12.5409%" y="277" width="0.0404%" height="15" fill="rgb(245,21,50)" fg:x="15519" fg:w="50"/><text x="12.7909%" y="287.50"></text></g><g><title>[libc-2.31.so] (45 samples, 0.04%)</title><rect x="12.5450%" y="261" width="0.0364%" height="15" fill="rgb(228,9,43)" fg:x="15524" fg:w="45"/><text x="12.7950%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.02%)</title><rect x="12.5813%" y="405" width="0.0178%" height="15" fill="rgb(208,100,47)" fg:x="15569" fg:w="22"/><text x="12.8313%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="12.5870%" y="389" width="0.0121%" height="15" fill="rgb(232,26,8)" fg:x="15576" fg:w="15"/><text x="12.8370%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="12.5870%" y="373" width="0.0121%" height="15" fill="rgb(216,166,38)" fg:x="15576" fg:w="15"/><text x="12.8370%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (94 samples, 0.08%)</title><rect x="12.6023%" y="357" width="0.0760%" height="15" fill="rgb(251,202,51)" fg:x="15595" fg:w="94"/><text x="12.8523%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (94 samples, 0.08%)</title><rect x="12.6023%" y="341" width="0.0760%" height="15" fill="rgb(254,216,34)" fg:x="15595" fg:w="94"/><text x="12.8523%" y="351.50"></text></g><g><title>alloc::alloc::alloc (85 samples, 0.07%)</title><rect x="12.6096%" y="325" width="0.0687%" height="15" fill="rgb(251,32,27)" fg:x="15604" fg:w="85"/><text x="12.8596%" y="335.50"></text></g><g><title>__rg_alloc (85 samples, 0.07%)</title><rect x="12.6096%" y="309" width="0.0687%" height="15" fill="rgb(208,127,28)" fg:x="15604" fg:w="85"/><text x="12.8596%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (85 samples, 0.07%)</title><rect x="12.6096%" y="293" width="0.0687%" height="15" fill="rgb(224,137,22)" fg:x="15604" fg:w="85"/><text x="12.8596%" y="303.50"></text></g><g><title>sn_rust_alloc (72 samples, 0.06%)</title><rect x="12.6201%" y="277" width="0.0582%" height="15" fill="rgb(254,70,32)" fg:x="15617" fg:w="72"/><text x="12.8701%" y="287.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (20 samples, 0.02%)</title><rect x="12.6621%" y="261" width="0.0162%" height="15" fill="rgb(229,75,37)" fg:x="15669" fg:w="20"/><text x="12.9121%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (104 samples, 0.08%)</title><rect x="12.5991%" y="405" width="0.0840%" height="15" fill="rgb(252,64,23)" fg:x="15591" fg:w="104"/><text x="12.8491%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (100 samples, 0.08%)</title><rect x="12.6023%" y="389" width="0.0808%" height="15" fill="rgb(232,162,48)" fg:x="15595" fg:w="100"/><text x="12.8523%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (100 samples, 0.08%)</title><rect x="12.6023%" y="373" width="0.0808%" height="15" fill="rgb(246,160,12)" fg:x="15595" fg:w="100"/><text x="12.8523%" y="383.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (1,670 samples, 1.35%)</title><rect x="11.3425%" y="517" width="1.3495%" height="15" fill="rgb(247,166,0)" fg:x="14036" fg:w="1670"/><text x="11.5925%" y="527.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (359 samples, 0.29%)</title><rect x="12.4019%" y="501" width="0.2901%" height="15" fill="rgb(249,219,21)" fg:x="15347" fg:w="359"/><text x="12.6519%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (330 samples, 0.27%)</title><rect x="12.4254%" y="485" width="0.2667%" height="15" fill="rgb(205,209,3)" fg:x="15376" fg:w="330"/><text x="12.6754%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (330 samples, 0.27%)</title><rect x="12.4254%" y="469" width="0.2667%" height="15" fill="rgb(243,44,1)" fg:x="15376" fg:w="330"/><text x="12.6754%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (330 samples, 0.27%)</title><rect x="12.4254%" y="453" width="0.2667%" height="15" fill="rgb(206,159,16)" fg:x="15376" fg:w="330"/><text x="12.6754%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (330 samples, 0.27%)</title><rect x="12.4254%" y="437" width="0.2667%" height="15" fill="rgb(244,77,30)" fg:x="15376" fg:w="330"/><text x="12.6754%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (330 samples, 0.27%)</title><rect x="12.4254%" y="421" width="0.2667%" height="15" fill="rgb(218,69,12)" fg:x="15376" fg:w="330"/><text x="12.6754%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (35 samples, 0.03%)</title><rect x="12.7316%" y="437" width="0.0283%" height="15" fill="rgb(212,87,7)" fg:x="15755" fg:w="35"/><text x="12.9816%" y="447.50"></text></g><g><title>core::time::Duration::as_nanos (18 samples, 0.01%)</title><rect x="12.7599%" y="437" width="0.0145%" height="15" fill="rgb(245,114,25)" fg:x="15790" fg:w="18"/><text x="13.0099%" y="447.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (104 samples, 0.08%)</title><rect x="12.7745%" y="421" width="0.0840%" height="15" fill="rgb(210,61,42)" fg:x="15808" fg:w="104"/><text x="13.0245%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (33 samples, 0.03%)</title><rect x="12.8884%" y="389" width="0.0267%" height="15" fill="rgb(211,52,33)" fg:x="15949" fg:w="33"/><text x="13.1384%" y="399.50"></text></g><g><title>core::cmp::PartialOrd::ge (33 samples, 0.03%)</title><rect x="12.8884%" y="373" width="0.0267%" height="15" fill="rgb(234,58,33)" fg:x="15949" fg:w="33"/><text x="13.1384%" y="383.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (33 samples, 0.03%)</title><rect x="12.8884%" y="357" width="0.0267%" height="15" fill="rgb(220,115,36)" fg:x="15949" fg:w="33"/><text x="13.1384%" y="367.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (33 samples, 0.03%)</title><rect x="12.8884%" y="341" width="0.0267%" height="15" fill="rgb(243,153,54)" fg:x="15949" fg:w="33"/><text x="13.1384%" y="351.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (33 samples, 0.03%)</title><rect x="12.8884%" y="325" width="0.0267%" height="15" fill="rgb(251,47,18)" fg:x="15949" fg:w="33"/><text x="13.1384%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (15 samples, 0.01%)</title><rect x="12.9029%" y="309" width="0.0121%" height="15" fill="rgb(242,102,42)" fg:x="15967" fg:w="15"/><text x="13.1529%" y="319.50"></text></g><g><title>std::time::SystemTime::duration_since (200 samples, 0.16%)</title><rect x="12.7745%" y="437" width="0.1616%" height="15" fill="rgb(234,31,38)" fg:x="15808" fg:w="200"/><text x="13.0245%" y="447.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (96 samples, 0.08%)</title><rect x="12.8585%" y="421" width="0.0776%" height="15" fill="rgb(221,117,51)" fg:x="15912" fg:w="96"/><text x="13.1085%" y="431.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (96 samples, 0.08%)</title><rect x="12.8585%" y="405" width="0.0776%" height="15" fill="rgb(212,20,18)" fg:x="15912" fg:w="96"/><text x="13.1085%" y="415.50"></text></g><g><title>core::time::Duration::new (26 samples, 0.02%)</title><rect x="12.9151%" y="389" width="0.0210%" height="15" fill="rgb(245,133,36)" fg:x="15982" fg:w="26"/><text x="13.1651%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (675 samples, 0.55%)</title><rect x="12.6920%" y="517" width="0.5455%" height="15" fill="rgb(212,6,19)" fg:x="15706" fg:w="675"/><text x="12.9420%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (675 samples, 0.55%)</title><rect x="12.6920%" y="501" width="0.5455%" height="15" fill="rgb(218,1,36)" fg:x="15706" fg:w="675"/><text x="12.9420%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any::check::{{closure}} (647 samples, 0.52%)</title><rect x="12.7147%" y="485" width="0.5228%" height="15" fill="rgb(246,84,54)" fg:x="15734" fg:w="647"/><text x="12.9647%" y="495.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}}::{{closure}} (647 samples, 0.52%)</title><rect x="12.7147%" y="469" width="0.5228%" height="15" fill="rgb(242,110,6)" fg:x="15734" fg:w="647"/><text x="12.9647%" y="479.50"></text></g><g><title>tremor_common::time::nanotime (642 samples, 0.52%)</title><rect x="12.7187%" y="453" width="0.5188%" height="15" fill="rgb(214,47,5)" fg:x="15739" fg:w="642"/><text x="12.9687%" y="463.50"></text></g><g><title>std::time::SystemTime::now (373 samples, 0.30%)</title><rect x="12.9361%" y="437" width="0.3014%" height="15" fill="rgb(218,159,25)" fg:x="16008" fg:w="373"/><text x="13.1861%" y="447.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (373 samples, 0.30%)</title><rect x="12.9361%" y="421" width="0.3014%" height="15" fill="rgb(215,211,28)" fg:x="16008" fg:w="373"/><text x="13.1861%" y="431.50"></text></g><g><title>std::sys::unix::time::inner::now (373 samples, 0.30%)</title><rect x="12.9361%" y="405" width="0.3014%" height="15" fill="rgb(238,59,32)" fg:x="16008" fg:w="373"/><text x="13.1861%" y="415.50"></text></g><g><title>__clock_gettime (308 samples, 0.25%)</title><rect x="12.9886%" y="389" width="0.2489%" height="15" fill="rgb(226,82,3)" fg:x="16073" fg:w="308"/><text x="13.2386%" y="399.50"></text></g><g><title>__vdso_clock_gettime (300 samples, 0.24%)</title><rect x="12.9951%" y="373" width="0.2424%" height="15" fill="rgb(240,164,32)" fg:x="16081" fg:w="300"/><text x="13.2451%" y="383.50"></text></g><g><title>[[vdso]] (275 samples, 0.22%)</title><rect x="13.0153%" y="357" width="0.2222%" height="15" fill="rgb(232,46,7)" fg:x="16106" fg:w="275"/><text x="13.2653%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (59 samples, 0.05%)</title><rect x="13.2650%" y="485" width="0.0477%" height="15" fill="rgb(229,129,53)" fg:x="16415" fg:w="59"/><text x="13.5150%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (16 samples, 0.01%)</title><rect x="13.2997%" y="469" width="0.0129%" height="15" fill="rgb(234,188,29)" fg:x="16458" fg:w="16"/><text x="13.5497%" y="479.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (971 samples, 0.78%)</title><rect x="13.5769%" y="293" width="0.7847%" height="15" fill="rgb(246,141,4)" fg:x="16801" fg:w="971"/><text x="13.8269%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,326 samples, 1.07%)</title><rect x="13.3143%" y="437" width="1.0715%" height="15" fill="rgb(229,23,39)" fg:x="16476" fg:w="1326"/><text x="13.5643%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,316 samples, 1.06%)</title><rect x="13.3223%" y="421" width="1.0635%" height="15" fill="rgb(206,12,3)" fg:x="16486" fg:w="1316"/><text x="13.5723%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,316 samples, 1.06%)</title><rect x="13.3223%" y="405" width="1.0635%" height="15" fill="rgb(252,226,20)" fg:x="16486" fg:w="1316"/><text x="13.5723%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,312 samples, 1.06%)</title><rect x="13.3256%" y="389" width="1.0602%" height="15" fill="rgb(216,123,35)" fg:x="16490" fg:w="1312"/><text x="13.5756%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,312 samples, 1.06%)</title><rect x="13.3256%" y="373" width="1.0602%" height="15" fill="rgb(212,68,40)" fg:x="16490" fg:w="1312"/><text x="13.5756%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1,312 samples, 1.06%)</title><rect x="13.3256%" y="357" width="1.0602%" height="15" fill="rgb(254,125,32)" fg:x="16490" fg:w="1312"/><text x="13.5756%" y="367.50"></text></g><g><title>__rg_alloc (1,312 samples, 1.06%)</title><rect x="13.3256%" y="341" width="1.0602%" height="15" fill="rgb(253,97,22)" fg:x="16490" fg:w="1312"/><text x="13.5756%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1,312 samples, 1.06%)</title><rect x="13.3256%" y="325" width="1.0602%" height="15" fill="rgb(241,101,14)" fg:x="16490" fg:w="1312"/><text x="13.5756%" y="335.50"></text></g><g><title>sn_rust_alloc (1,307 samples, 1.06%)</title><rect x="13.3296%" y="309" width="1.0562%" height="15" fill="rgb(238,103,29)" fg:x="16495" fg:w="1307"/><text x="13.5796%" y="319.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (30 samples, 0.02%)</title><rect x="14.3616%" y="293" width="0.0242%" height="15" fill="rgb(233,195,47)" fg:x="17772" fg:w="30"/><text x="14.6116%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,744 samples, 1.41%)</title><rect x="13.2650%" y="501" width="1.4093%" height="15" fill="rgb(246,218,30)" fg:x="16415" fg:w="1744"/><text x="13.5150%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,685 samples, 1.36%)</title><rect x="13.3126%" y="485" width="1.3616%" height="15" fill="rgb(219,145,47)" fg:x="16474" fg:w="1685"/><text x="13.5626%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1,685 samples, 1.36%)</title><rect x="13.3126%" y="469" width="1.3616%" height="15" fill="rgb(243,12,26)" fg:x="16474" fg:w="1685"/><text x="13.5626%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,685 samples, 1.36%)</title><rect x="13.3126%" y="453" width="1.3616%" height="15" fill="rgb(214,87,16)" fg:x="16474" fg:w="1685"/><text x="13.5626%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (357 samples, 0.29%)</title><rect x="14.3858%" y="437" width="0.2885%" height="15" fill="rgb(208,99,42)" fg:x="17802" fg:w="357"/><text x="14.6358%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (357 samples, 0.29%)</title><rect x="14.3858%" y="421" width="0.2885%" height="15" fill="rgb(253,99,2)" fg:x="17802" fg:w="357"/><text x="14.6358%" y="431.50"></text></g><g><title>[libc-2.31.so] (357 samples, 0.29%)</title><rect x="14.3858%" y="405" width="0.2885%" height="15" fill="rgb(220,168,23)" fg:x="17802" fg:w="357"/><text x="14.6358%" y="415.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,532 samples, 3.66%)</title><rect x="11.0176%" y="549" width="3.6623%" height="15" fill="rgb(242,38,24)" fg:x="13634" fg:w="4532"/><text x="11.2676%" y="559.50">&lt;cor..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (4,428 samples, 3.58%)</title><rect x="11.1017%" y="533" width="3.5783%" height="15" fill="rgb(225,182,9)" fg:x="13738" fg:w="4428"/><text x="11.3517%" y="543.50">&lt;tre..</text></g><g><title>tremor_runtime::connectors::impls::bench::Acc::next (1,780 samples, 1.44%)</title><rect x="13.2415%" y="517" width="1.4384%" height="15" fill="rgb(243,178,37)" fg:x="16386" fg:w="1780"/><text x="13.4915%" y="527.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,390 samples, 10.01%)</title><rect x="4.6708%" y="869" width="10.0124%" height="15" fill="rgb(232,139,19)" fg:x="5780" fg:w="12390"/><text x="4.9208%" y="879.50">&lt;core::future:..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (5,342 samples, 4.32%)</title><rect x="10.3663%" y="853" width="4.3169%" height="15" fill="rgb(225,201,24)" fg:x="12828" fg:w="5342"/><text x="10.6163%" y="863.50">tremo..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (4,536 samples, 3.67%)</title><rect x="11.0176%" y="837" width="3.6655%" height="15" fill="rgb(221,47,46)" fg:x="13634" fg:w="4536"/><text x="11.2676%" y="847.50">&lt;fut..</text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (4,536 samples, 3.67%)</title><rect x="11.0176%" y="821" width="3.6655%" height="15" fill="rgb(249,23,13)" fg:x="13634" fg:w="4536"/><text x="11.2676%" y="831.50">futu..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (4,536 samples, 3.67%)</title><rect x="11.0176%" y="805" width="3.6655%" height="15" fill="rgb(219,9,5)" fg:x="13634" fg:w="4536"/><text x="11.2676%" y="815.50">&lt;cor..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,536 samples, 3.67%)</title><rect x="11.0176%" y="789" width="3.6655%" height="15" fill="rgb(254,171,16)" fg:x="13634" fg:w="4536"/><text x="11.2676%" y="799.50">&lt;cor..</text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (4,536 samples, 3.67%)</title><rect x="11.0176%" y="773" width="3.6655%" height="15" fill="rgb(230,171,20)" fg:x="13634" fg:w="4536"/><text x="11.2676%" y="783.50">trem..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,536 samples, 3.67%)</title><rect x="11.0176%" y="757" width="3.6655%" height="15" fill="rgb(210,71,41)" fg:x="13634" fg:w="4536"/><text x="11.2676%" y="767.50">&lt;asy..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,536 samples, 3.67%)</title><rect x="11.0176%" y="741" width="3.6655%" height="15" fill="rgb(206,173,20)" fg:x="13634" fg:w="4536"/><text x="11.2676%" y="751.50">&lt;asy..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (4,536 samples, 3.67%)</title><rect x="11.0176%" y="725" width="3.6655%" height="15" fill="rgb(233,88,34)" fg:x="13634" fg:w="4536"/><text x="11.2676%" y="735.50">&lt;cor..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (4,536 samples, 3.67%)</title><rect x="11.0176%" y="709" width="3.6655%" height="15" fill="rgb(223,209,46)" fg:x="13634" fg:w="4536"/><text x="11.2676%" y="719.50">&lt;asy..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (4,536 samples, 3.67%)</title><rect x="11.0176%" y="693" width="3.6655%" height="15" fill="rgb(250,43,18)" fg:x="13634" fg:w="4536"/><text x="11.2676%" y="703.50">asyn..</text></g><g><title>std::panic::catch_unwind (4,536 samples, 3.67%)</title><rect x="11.0176%" y="677" width="3.6655%" height="15" fill="rgb(208,13,10)" fg:x="13634" fg:w="4536"/><text x="11.2676%" y="687.50">std:..</text></g><g><title>std::panicking::try (4,536 samples, 3.67%)</title><rect x="11.0176%" y="661" width="3.6655%" height="15" fill="rgb(212,200,36)" fg:x="13634" fg:w="4536"/><text x="11.2676%" y="671.50">std:..</text></g><g><title>std::panicking::try::do_call (4,536 samples, 3.67%)</title><rect x="11.0176%" y="645" width="3.6655%" height="15" fill="rgb(225,90,30)" fg:x="13634" fg:w="4536"/><text x="11.2676%" y="655.50">std:..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (4,536 samples, 3.67%)</title><rect x="11.0176%" y="629" width="3.6655%" height="15" fill="rgb(236,182,39)" fg:x="13634" fg:w="4536"/><text x="11.2676%" y="639.50">&lt;cor..</text></g><g><title>core::ops::function::FnOnce::call_once (4,536 samples, 3.67%)</title><rect x="11.0176%" y="613" width="3.6655%" height="15" fill="rgb(212,144,35)" fg:x="13634" fg:w="4536"/><text x="11.2676%" y="623.50">core..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (4,536 samples, 3.67%)</title><rect x="11.0176%" y="597" width="3.6655%" height="15" fill="rgb(228,63,44)" fg:x="13634" fg:w="4536"/><text x="11.2676%" y="607.50">asyn..</text></g><g><title>async_ffi::FfiContext::with_context (4,536 samples, 3.67%)</title><rect x="11.0176%" y="581" width="3.6655%" height="15" fill="rgb(228,109,6)" fg:x="13634" fg:w="4536"/><text x="11.2676%" y="591.50">asyn..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (4,536 samples, 3.67%)</title><rect x="11.0176%" y="565" width="3.6655%" height="15" fill="rgb(238,117,24)" fg:x="13634" fg:w="4536"/><text x="11.2676%" y="575.50">asyn..</text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (34 samples, 0.03%)</title><rect x="14.6832%" y="869" width="0.0275%" height="15" fill="rgb(242,26,26)" fg:x="18170" fg:w="34"/><text x="14.9332%" y="879.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (14 samples, 0.01%)</title><rect x="14.7155%" y="869" width="0.0113%" height="15" fill="rgb(221,92,48)" fg:x="18210" fg:w="14"/><text x="14.9655%" y="879.50"></text></g><g><title>&lt;tremor_runtime::codec::binary::Binary as tremor_runtime::codec::Codec&gt;::encode (15 samples, 0.01%)</title><rect x="14.7317%" y="869" width="0.0121%" height="15" fill="rgb(209,209,32)" fg:x="18230" fg:w="15"/><text x="14.9817%" y="879.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (22 samples, 0.02%)</title><rect x="14.7438%" y="869" width="0.0178%" height="15" fill="rgb(221,70,22)" fg:x="18245" fg:w="22"/><text x="14.9938%" y="879.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (47 samples, 0.04%)</title><rect x="14.7616%" y="869" width="0.0380%" height="15" fill="rgb(248,145,5)" fg:x="18267" fg:w="47"/><text x="15.0116%" y="879.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (22 samples, 0.02%)</title><rect x="14.7818%" y="853" width="0.0178%" height="15" fill="rgb(226,116,26)" fg:x="18292" fg:w="22"/><text x="15.0318%" y="863.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (22 samples, 0.02%)</title><rect x="14.7818%" y="837" width="0.0178%" height="15" fill="rgb(244,5,17)" fg:x="18292" fg:w="22"/><text x="15.0318%" y="847.50"></text></g><g><title>[libc-2.31.so] (18 samples, 0.01%)</title><rect x="14.7996%" y="869" width="0.0145%" height="15" fill="rgb(252,159,33)" fg:x="18314" fg:w="18"/><text x="15.0496%" y="879.50"></text></g><g><title>__clock_gettime (75 samples, 0.06%)</title><rect x="14.8246%" y="869" width="0.0606%" height="15" fill="rgb(206,71,0)" fg:x="18345" fg:w="75"/><text x="15.0746%" y="879.50"></text></g><g><title>__vdso_clock_gettime (104 samples, 0.08%)</title><rect x="14.8925%" y="869" width="0.0840%" height="15" fill="rgb(233,118,54)" fg:x="18429" fg:w="104"/><text x="15.1425%" y="879.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (43 samples, 0.03%)</title><rect x="14.9765%" y="869" width="0.0347%" height="15" fill="rgb(234,83,48)" fg:x="18533" fg:w="43"/><text x="15.2265%" y="879.50"></text></g><g><title>abi_stable::erased_types::iterator::next (43 samples, 0.03%)</title><rect x="15.0113%" y="869" width="0.0347%" height="15" fill="rgb(228,3,54)" fg:x="18576" fg:w="43"/><text x="15.2613%" y="879.50"></text></g><g><title>abi_stable::std_types::arc::vtable_mod::destructor_arc (20 samples, 0.02%)</title><rect x="15.0517%" y="869" width="0.0162%" height="15" fill="rgb(226,155,13)" fg:x="18626" fg:w="20"/><text x="15.3017%" y="879.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (16 samples, 0.01%)</title><rect x="15.0678%" y="869" width="0.0129%" height="15" fill="rgb(241,28,37)" fg:x="18646" fg:w="16"/><text x="15.3178%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="15.0678%" y="853" width="0.0129%" height="15" fill="rgb(233,93,10)" fg:x="18646" fg:w="16"/><text x="15.3178%" y="863.50"></text></g><g><title>alloc::alloc::box_free (16 samples, 0.01%)</title><rect x="15.0678%" y="837" width="0.0129%" height="15" fill="rgb(225,113,19)" fg:x="18646" fg:w="16"/><text x="15.3178%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 0.01%)</title><rect x="15.0678%" y="821" width="0.0129%" height="15" fill="rgb(241,2,18)" fg:x="18646" fg:w="16"/><text x="15.3178%" y="831.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 0.01%)</title><rect x="15.0678%" y="805" width="0.0129%" height="15" fill="rgb(228,207,21)" fg:x="18646" fg:w="16"/><text x="15.3178%" y="815.50"></text></g><g><title>__rg_dealloc (16 samples, 0.01%)</title><rect x="15.0678%" y="789" width="0.0129%" height="15" fill="rgb(213,211,35)" fg:x="18646" fg:w="16"/><text x="15.3178%" y="799.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (16 samples, 0.01%)</title><rect x="15.0678%" y="773" width="0.0129%" height="15" fill="rgb(209,83,10)" fg:x="18646" fg:w="16"/><text x="15.3178%" y="783.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (17 samples, 0.01%)</title><rect x="15.0808%" y="869" width="0.0137%" height="15" fill="rgb(209,164,1)" fg:x="18662" fg:w="17"/><text x="15.3308%" y="879.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (92 samples, 0.07%)</title><rect x="15.0945%" y="869" width="0.0743%" height="15" fill="rgb(213,184,43)" fg:x="18679" fg:w="92"/><text x="15.3445%" y="879.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (17 samples, 0.01%)</title><rect x="15.1551%" y="853" width="0.0137%" height="15" fill="rgb(231,61,34)" fg:x="18754" fg:w="17"/><text x="15.4051%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (17 samples, 0.01%)</title><rect x="15.1551%" y="837" width="0.0137%" height="15" fill="rgb(235,75,3)" fg:x="18754" fg:w="17"/><text x="15.4051%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (17 samples, 0.01%)</title><rect x="15.1551%" y="821" width="0.0137%" height="15" fill="rgb(220,106,47)" fg:x="18754" fg:w="17"/><text x="15.4051%" y="831.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (17 samples, 0.01%)</title><rect x="15.1551%" y="805" width="0.0137%" height="15" fill="rgb(210,196,33)" fg:x="18754" fg:w="17"/><text x="15.4051%" y="815.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (17 samples, 0.01%)</title><rect x="15.1551%" y="789" width="0.0137%" height="15" fill="rgb(229,154,42)" fg:x="18754" fg:w="17"/><text x="15.4051%" y="799.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (17 samples, 0.01%)</title><rect x="15.1551%" y="773" width="0.0137%" height="15" fill="rgb(228,114,26)" fg:x="18754" fg:w="17"/><text x="15.4051%" y="783.50"></text></g><g><title>alloc::alloc::exchange_malloc (17 samples, 0.01%)</title><rect x="15.1551%" y="757" width="0.0137%" height="15" fill="rgb(208,144,1)" fg:x="18754" fg:w="17"/><text x="15.4051%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.01%)</title><rect x="15.1551%" y="741" width="0.0137%" height="15" fill="rgb(239,112,37)" fg:x="18754" fg:w="17"/><text x="15.4051%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.01%)</title><rect x="15.1551%" y="725" width="0.0137%" height="15" fill="rgb(210,96,50)" fg:x="18754" fg:w="17"/><text x="15.4051%" y="735.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.01%)</title><rect x="15.1551%" y="709" width="0.0137%" height="15" fill="rgb(222,178,2)" fg:x="18754" fg:w="17"/><text x="15.4051%" y="719.50"></text></g><g><title>__rg_alloc (17 samples, 0.01%)</title><rect x="15.1551%" y="693" width="0.0137%" height="15" fill="rgb(226,74,18)" fg:x="18754" fg:w="17"/><text x="15.4051%" y="703.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (17 samples, 0.01%)</title><rect x="15.1551%" y="677" width="0.0137%" height="15" fill="rgb(225,67,54)" fg:x="18754" fg:w="17"/><text x="15.4051%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (14 samples, 0.01%)</title><rect x="15.1713%" y="869" width="0.0113%" height="15" fill="rgb(251,92,32)" fg:x="18774" fg:w="14"/><text x="15.4213%" y="879.50"></text></g><g><title>abi_stable::std_types::utypeid::new_utypeid (13 samples, 0.01%)</title><rect x="15.1826%" y="869" width="0.0105%" height="15" fill="rgb(228,149,22)" fg:x="18788" fg:w="13"/><text x="15.4326%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (18 samples, 0.01%)</title><rect x="15.2569%" y="661" width="0.0145%" height="15" fill="rgb(243,54,13)" fg:x="18880" fg:w="18"/><text x="15.5069%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (18 samples, 0.01%)</title><rect x="15.2569%" y="645" width="0.0145%" height="15" fill="rgb(243,180,28)" fg:x="18880" fg:w="18"/><text x="15.5069%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (18 samples, 0.01%)</title><rect x="15.2569%" y="629" width="0.0145%" height="15" fill="rgb(208,167,24)" fg:x="18880" fg:w="18"/><text x="15.5069%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (18 samples, 0.01%)</title><rect x="15.2569%" y="613" width="0.0145%" height="15" fill="rgb(245,73,45)" fg:x="18880" fg:w="18"/><text x="15.5069%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (18 samples, 0.01%)</title><rect x="15.2569%" y="597" width="0.0145%" height="15" fill="rgb(237,203,48)" fg:x="18880" fg:w="18"/><text x="15.5069%" y="607.50"></text></g><g><title>alloc::alloc::alloc (18 samples, 0.01%)</title><rect x="15.2569%" y="581" width="0.0145%" height="15" fill="rgb(211,197,16)" fg:x="18880" fg:w="18"/><text x="15.5069%" y="591.50"></text></g><g><title>__rg_alloc (18 samples, 0.01%)</title><rect x="15.2569%" y="565" width="0.0145%" height="15" fill="rgb(243,99,51)" fg:x="18880" fg:w="18"/><text x="15.5069%" y="575.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (18 samples, 0.01%)</title><rect x="15.2569%" y="549" width="0.0145%" height="15" fill="rgb(215,123,29)" fg:x="18880" fg:w="18"/><text x="15.5069%" y="559.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (36 samples, 0.03%)</title><rect x="15.2569%" y="773" width="0.0291%" height="15" fill="rgb(239,186,37)" fg:x="18880" fg:w="36"/><text x="15.5069%" y="783.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (36 samples, 0.03%)</title><rect x="15.2569%" y="757" width="0.0291%" height="15" fill="rgb(252,136,39)" fg:x="18880" fg:w="36"/><text x="15.5069%" y="767.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (36 samples, 0.03%)</title><rect x="15.2569%" y="741" width="0.0291%" height="15" fill="rgb(223,213,32)" fg:x="18880" fg:w="36"/><text x="15.5069%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (36 samples, 0.03%)</title><rect x="15.2569%" y="725" width="0.0291%" height="15" fill="rgb(233,115,5)" fg:x="18880" fg:w="36"/><text x="15.5069%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (36 samples, 0.03%)</title><rect x="15.2569%" y="709" width="0.0291%" height="15" fill="rgb(207,226,44)" fg:x="18880" fg:w="36"/><text x="15.5069%" y="719.50"></text></g><g><title>alloc::slice::hack::to_vec (36 samples, 0.03%)</title><rect x="15.2569%" y="693" width="0.0291%" height="15" fill="rgb(208,126,0)" fg:x="18880" fg:w="36"/><text x="15.5069%" y="703.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (36 samples, 0.03%)</title><rect x="15.2569%" y="677" width="0.0291%" height="15" fill="rgb(244,66,21)" fg:x="18880" fg:w="36"/><text x="15.5069%" y="687.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (18 samples, 0.01%)</title><rect x="15.2715%" y="661" width="0.0145%" height="15" fill="rgb(222,97,12)" fg:x="18898" fg:w="18"/><text x="15.5215%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (18 samples, 0.01%)</title><rect x="15.2715%" y="645" width="0.0145%" height="15" fill="rgb(219,213,19)" fg:x="18898" fg:w="18"/><text x="15.5215%" y="655.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (113 samples, 0.09%)</title><rect x="15.2012%" y="869" width="0.0913%" height="15" fill="rgb(252,169,30)" fg:x="18811" fg:w="113"/><text x="15.4512%" y="879.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (44 samples, 0.04%)</title><rect x="15.2569%" y="853" width="0.0356%" height="15" fill="rgb(206,32,51)" fg:x="18880" fg:w="44"/><text x="15.5069%" y="863.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (44 samples, 0.04%)</title><rect x="15.2569%" y="837" width="0.0356%" height="15" fill="rgb(250,172,42)" fg:x="18880" fg:w="44"/><text x="15.5069%" y="847.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (44 samples, 0.04%)</title><rect x="15.2569%" y="821" width="0.0356%" height="15" fill="rgb(209,34,43)" fg:x="18880" fg:w="44"/><text x="15.5069%" y="831.50"></text></g><g><title>alloc::slice::hack::to_vec (44 samples, 0.04%)</title><rect x="15.2569%" y="805" width="0.0356%" height="15" fill="rgb(223,11,35)" fg:x="18880" fg:w="44"/><text x="15.5069%" y="815.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (44 samples, 0.04%)</title><rect x="15.2569%" y="789" width="0.0356%" height="15" fill="rgb(251,219,26)" fg:x="18880" fg:w="44"/><text x="15.5069%" y="799.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (57 samples, 0.05%)</title><rect x="15.2925%" y="869" width="0.0461%" height="15" fill="rgb(231,119,3)" fg:x="18924" fg:w="57"/><text x="15.5425%" y="879.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (33 samples, 0.03%)</title><rect x="15.3119%" y="853" width="0.0267%" height="15" fill="rgb(216,97,11)" fg:x="18948" fg:w="33"/><text x="15.5619%" y="863.50"></text></g><g><title>core::mem::drop (33 samples, 0.03%)</title><rect x="15.3119%" y="837" width="0.0267%" height="15" fill="rgb(223,59,9)" fg:x="18948" fg:w="33"/><text x="15.5619%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (31 samples, 0.03%)</title><rect x="15.3135%" y="821" width="0.0251%" height="15" fill="rgb(233,93,31)" fg:x="18950" fg:w="31"/><text x="15.5635%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.03%)</title><rect x="15.3135%" y="805" width="0.0251%" height="15" fill="rgb(239,81,33)" fg:x="18950" fg:w="31"/><text x="15.5635%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::vec::private::RVec&lt;u8&gt;]&gt; (31 samples, 0.03%)</title><rect x="15.3135%" y="789" width="0.0251%" height="15" fill="rgb(213,120,34)" fg:x="18950" fg:w="31"/><text x="15.5635%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (31 samples, 0.03%)</title><rect x="15.3135%" y="773" width="0.0251%" height="15" fill="rgb(243,49,53)" fg:x="18950" fg:w="31"/><text x="15.5635%" y="783.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (31 samples, 0.03%)</title><rect x="15.3135%" y="757" width="0.0251%" height="15" fill="rgb(247,216,33)" fg:x="18950" fg:w="31"/><text x="15.5635%" y="767.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (21 samples, 0.02%)</title><rect x="15.3402%" y="869" width="0.0170%" height="15" fill="rgb(226,26,14)" fg:x="18983" fg:w="21"/><text x="15.5902%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (19 samples, 0.02%)</title><rect x="15.3418%" y="853" width="0.0154%" height="15" fill="rgb(215,49,53)" fg:x="18985" fg:w="19"/><text x="15.5918%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (19 samples, 0.02%)</title><rect x="15.3418%" y="837" width="0.0154%" height="15" fill="rgb(245,162,40)" fg:x="18985" fg:w="19"/><text x="15.5918%" y="847.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (19 samples, 0.02%)</title><rect x="15.3418%" y="821" width="0.0154%" height="15" fill="rgb(229,68,17)" fg:x="18985" fg:w="19"/><text x="15.5918%" y="831.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (48 samples, 0.04%)</title><rect x="15.3571%" y="869" width="0.0388%" height="15" fill="rgb(213,182,10)" fg:x="19004" fg:w="48"/><text x="15.6071%" y="879.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (14 samples, 0.01%)</title><rect x="15.3959%" y="869" width="0.0113%" height="15" fill="rgb(245,125,30)" fg:x="19052" fg:w="14"/><text x="15.6459%" y="879.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (13 samples, 0.01%)</title><rect x="15.8372%" y="517" width="0.0105%" height="15" fill="rgb(232,202,2)" fg:x="19598" fg:w="13"/><text x="16.0872%" y="527.50"></text></g><g><title>[libc-2.31.so] (207 samples, 0.17%)</title><rect x="15.8477%" y="501" width="0.1673%" height="15" fill="rgb(237,140,51)" fg:x="19611" fg:w="207"/><text x="16.0977%" y="511.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (13 samples, 0.01%)</title><rect x="16.3939%" y="485" width="0.0105%" height="15" fill="rgb(236,157,25)" fg:x="20287" fg:w="13"/><text x="16.6439%" y="495.50"></text></g><g><title>&lt;abi_stable::sabi_types::constructor::Constructor&lt;T&gt; as core::cmp::PartialEq&gt;::eq (28 samples, 0.02%)</title><rect x="16.4457%" y="437" width="0.0226%" height="15" fill="rgb(219,209,0)" fg:x="20351" fg:w="28"/><text x="16.6957%" y="447.50"></text></g><g><title>abi_stable::sabi_types::constructor::Constructor&lt;T&gt;::get (17 samples, 0.01%)</title><rect x="16.4545%" y="421" width="0.0137%" height="15" fill="rgb(240,116,54)" fg:x="20362" fg:w="17"/><text x="16.7045%" y="431.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (177 samples, 0.14%)</title><rect x="16.4044%" y="485" width="0.1430%" height="15" fill="rgb(216,10,36)" fg:x="20300" fg:w="177"/><text x="16.6544%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::convert::From&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from (162 samples, 0.13%)</title><rect x="16.4166%" y="469" width="0.1309%" height="15" fill="rgb(222,72,44)" fg:x="20315" fg:w="162"/><text x="16.6666%" y="479.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::into_vec (144 samples, 0.12%)</title><rect x="16.4311%" y="453" width="0.1164%" height="15" fill="rgb(232,159,9)" fg:x="20333" fg:w="144"/><text x="16.6811%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::from_raw_parts (98 samples, 0.08%)</title><rect x="16.4683%" y="437" width="0.0792%" height="15" fill="rgb(210,39,32)" fg:x="20379" fg:w="98"/><text x="16.7183%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (98 samples, 0.08%)</title><rect x="16.4683%" y="421" width="0.0792%" height="15" fill="rgb(216,194,45)" fg:x="20379" fg:w="98"/><text x="16.7183%" y="431.50"></text></g><g><title>[libc-2.31.so] (329 samples, 0.27%)</title><rect x="16.5483%" y="469" width="0.2659%" height="15" fill="rgb(218,18,35)" fg:x="20478" fg:w="329"/><text x="16.7983%" y="479.50"></text></g><g><title>[libc-2.31.so] (84 samples, 0.07%)</title><rect x="17.0283%" y="453" width="0.0679%" height="15" fill="rgb(207,83,51)" fg:x="21072" fg:w="84"/><text x="17.2783%" y="463.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (281 samples, 0.23%)</title><rect x="17.1624%" y="213" width="0.2271%" height="15" fill="rgb(225,63,43)" fg:x="21238" fg:w="281"/><text x="17.4124%" y="223.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (345 samples, 0.28%)</title><rect x="17.1131%" y="373" width="0.2788%" height="15" fill="rgb(207,57,36)" fg:x="21177" fg:w="345"/><text x="17.3631%" y="383.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (345 samples, 0.28%)</title><rect x="17.1131%" y="357" width="0.2788%" height="15" fill="rgb(216,99,33)" fg:x="21177" fg:w="345"/><text x="17.3631%" y="367.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (332 samples, 0.27%)</title><rect x="17.1236%" y="341" width="0.2683%" height="15" fill="rgb(225,42,16)" fg:x="21190" fg:w="332"/><text x="17.3736%" y="351.50"></text></g><g><title>alloc::alloc::exchange_malloc (326 samples, 0.26%)</title><rect x="17.1285%" y="325" width="0.2634%" height="15" fill="rgb(220,201,45)" fg:x="21196" fg:w="326"/><text x="17.3785%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (324 samples, 0.26%)</title><rect x="17.1301%" y="309" width="0.2618%" height="15" fill="rgb(225,33,4)" fg:x="21198" fg:w="324"/><text x="17.3801%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (324 samples, 0.26%)</title><rect x="17.1301%" y="293" width="0.2618%" height="15" fill="rgb(224,33,50)" fg:x="21198" fg:w="324"/><text x="17.3801%" y="303.50"></text></g><g><title>alloc::alloc::alloc (324 samples, 0.26%)</title><rect x="17.1301%" y="277" width="0.2618%" height="15" fill="rgb(246,198,51)" fg:x="21198" fg:w="324"/><text x="17.3801%" y="287.50"></text></g><g><title>__rg_alloc (324 samples, 0.26%)</title><rect x="17.1301%" y="261" width="0.2618%" height="15" fill="rgb(205,22,4)" fg:x="21198" fg:w="324"/><text x="17.3801%" y="271.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (324 samples, 0.26%)</title><rect x="17.1301%" y="245" width="0.2618%" height="15" fill="rgb(206,3,8)" fg:x="21198" fg:w="324"/><text x="17.3801%" y="255.50"></text></g><g><title>sn_rust_alloc (324 samples, 0.26%)</title><rect x="17.1301%" y="229" width="0.2618%" height="15" fill="rgb(251,23,15)" fg:x="21198" fg:w="324"/><text x="17.3801%" y="239.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (363 samples, 0.29%)</title><rect x="17.1026%" y="389" width="0.2933%" height="15" fill="rgb(252,88,28)" fg:x="21164" fg:w="363"/><text x="17.3526%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (716 samples, 0.58%)</title><rect x="17.1002%" y="453" width="0.5786%" height="15" fill="rgb(212,127,14)" fg:x="21161" fg:w="716"/><text x="17.3502%" y="463.50"></text></g><g><title>core::ops::function::FnOnce::call_once (716 samples, 0.58%)</title><rect x="17.1002%" y="437" width="0.5786%" height="15" fill="rgb(247,145,37)" fg:x="21161" fg:w="716"/><text x="17.3502%" y="447.50"></text></g><g><title>value_trait::Builder::object (716 samples, 0.58%)</title><rect x="17.1002%" y="421" width="0.5786%" height="15" fill="rgb(209,117,53)" fg:x="21161" fg:w="716"/><text x="17.3502%" y="431.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (716 samples, 0.58%)</title><rect x="17.1002%" y="405" width="0.5786%" height="15" fill="rgb(212,90,42)" fg:x="21161" fg:w="716"/><text x="17.3502%" y="415.50"></text></g><g><title>tremor_value::value::Value::Object (350 samples, 0.28%)</title><rect x="17.3960%" y="389" width="0.2828%" height="15" fill="rgb(218,164,37)" fg:x="21527" fg:w="350"/><text x="17.6460%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.01%)</title><rect x="17.6982%" y="293" width="0.0105%" height="15" fill="rgb(246,65,34)" fg:x="21901" fg:w="13"/><text x="17.9482%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.01%)</title><rect x="17.6982%" y="277" width="0.0105%" height="15" fill="rgb(231,100,33)" fg:x="21901" fg:w="13"/><text x="17.9482%" y="287.50"></text></g><g><title>__rg_dealloc (13 samples, 0.01%)</title><rect x="17.6982%" y="261" width="0.0105%" height="15" fill="rgb(228,126,14)" fg:x="21901" fg:w="13"/><text x="17.9482%" y="271.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (13 samples, 0.01%)</title><rect x="17.6982%" y="245" width="0.0105%" height="15" fill="rgb(215,173,21)" fg:x="21901" fg:w="13"/><text x="17.9482%" y="255.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (26 samples, 0.02%)</title><rect x="17.6966%" y="389" width="0.0210%" height="15" fill="rgb(210,6,40)" fg:x="21899" fg:w="26"/><text x="17.9466%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (26 samples, 0.02%)</title><rect x="17.6966%" y="373" width="0.0210%" height="15" fill="rgb(212,48,18)" fg:x="21899" fg:w="26"/><text x="17.9466%" y="383.50"></text></g><g><title>core::mem::drop (24 samples, 0.02%)</title><rect x="17.6982%" y="357" width="0.0194%" height="15" fill="rgb(230,214,11)" fg:x="21901" fg:w="24"/><text x="17.9482%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (24 samples, 0.02%)</title><rect x="17.6982%" y="341" width="0.0194%" height="15" fill="rgb(254,105,39)" fg:x="21901" fg:w="24"/><text x="17.9482%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (24 samples, 0.02%)</title><rect x="17.6982%" y="325" width="0.0194%" height="15" fill="rgb(245,158,5)" fg:x="21901" fg:w="24"/><text x="17.9482%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.02%)</title><rect x="17.6982%" y="309" width="0.0194%" height="15" fill="rgb(249,208,11)" fg:x="21901" fg:w="24"/><text x="17.9482%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (97 samples, 0.08%)</title><rect x="17.6950%" y="437" width="0.0784%" height="15" fill="rgb(210,39,28)" fg:x="21897" fg:w="97"/><text x="17.9450%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (97 samples, 0.08%)</title><rect x="17.6950%" y="421" width="0.0784%" height="15" fill="rgb(211,56,53)" fg:x="21897" fg:w="97"/><text x="17.9450%" y="431.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (97 samples, 0.08%)</title><rect x="17.6950%" y="405" width="0.0784%" height="15" fill="rgb(226,201,30)" fg:x="21897" fg:w="97"/><text x="17.9450%" y="415.50"></text></g><g><title>sn_rust_dealloc (69 samples, 0.06%)</title><rect x="17.7176%" y="389" width="0.0558%" height="15" fill="rgb(239,101,34)" fg:x="21925" fg:w="69"/><text x="17.9676%" y="399.50"></text></g><g><title>sn_rust_dealloc (55 samples, 0.04%)</title><rect x="17.8049%" y="261" width="0.0444%" height="15" fill="rgb(226,209,5)" fg:x="22033" fg:w="55"/><text x="18.0549%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (87 samples, 0.07%)</title><rect x="17.7798%" y="341" width="0.0703%" height="15" fill="rgb(250,105,47)" fg:x="22002" fg:w="87"/><text x="18.0298%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (87 samples, 0.07%)</title><rect x="17.7798%" y="325" width="0.0703%" height="15" fill="rgb(230,72,3)" fg:x="22002" fg:w="87"/><text x="18.0298%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (74 samples, 0.06%)</title><rect x="17.7903%" y="309" width="0.0598%" height="15" fill="rgb(232,218,39)" fg:x="22015" fg:w="74"/><text x="18.0403%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (74 samples, 0.06%)</title><rect x="17.7903%" y="293" width="0.0598%" height="15" fill="rgb(248,166,6)" fg:x="22015" fg:w="74"/><text x="18.0403%" y="303.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (74 samples, 0.06%)</title><rect x="17.7903%" y="277" width="0.0598%" height="15" fill="rgb(247,89,20)" fg:x="22015" fg:w="74"/><text x="18.0403%" y="287.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (109 samples, 0.09%)</title><rect x="17.7734%" y="405" width="0.0881%" height="15" fill="rgb(248,130,54)" fg:x="21994" fg:w="109"/><text x="18.0234%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (108 samples, 0.09%)</title><rect x="17.7742%" y="389" width="0.0873%" height="15" fill="rgb(234,196,4)" fg:x="21995" fg:w="108"/><text x="18.0242%" y="399.50"></text></g><g><title>core::mem::drop (101 samples, 0.08%)</title><rect x="17.7798%" y="373" width="0.0816%" height="15" fill="rgb(250,143,31)" fg:x="22002" fg:w="101"/><text x="18.0298%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (101 samples, 0.08%)</title><rect x="17.7798%" y="357" width="0.0816%" height="15" fill="rgb(211,110,34)" fg:x="22002" fg:w="101"/><text x="18.0298%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::string::RString&gt;&gt; (14 samples, 0.01%)</title><rect x="17.8501%" y="341" width="0.0113%" height="15" fill="rgb(215,124,48)" fg:x="22089" fg:w="14"/><text x="18.1001%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="17.8501%" y="325" width="0.0113%" height="15" fill="rgb(216,46,13)" fg:x="22089" fg:w="14"/><text x="18.1001%" y="335.50"></text></g><g><title>sn_rust_dealloc (21 samples, 0.02%)</title><rect x="17.8614%" y="405" width="0.0170%" height="15" fill="rgb(205,184,25)" fg:x="22103" fg:w="21"/><text x="18.1114%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (228 samples, 0.18%)</title><rect x="17.6950%" y="453" width="0.1842%" height="15" fill="rgb(228,1,10)" fg:x="21897" fg:w="228"/><text x="17.9450%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (131 samples, 0.11%)</title><rect x="17.7734%" y="437" width="0.1059%" height="15" fill="rgb(213,116,27)" fg:x="21994" fg:w="131"/><text x="18.0234%" y="447.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (131 samples, 0.11%)</title><rect x="17.7734%" y="421" width="0.1059%" height="15" fill="rgb(241,95,50)" fg:x="21994" fg:w="131"/><text x="18.0234%" y="431.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (20 samples, 0.02%)</title><rect x="17.8962%" y="389" width="0.0162%" height="15" fill="rgb(238,48,32)" fg:x="22146" fg:w="20"/><text x="18.1462%" y="399.50"></text></g><g><title>sn_rust_dealloc (50 samples, 0.04%)</title><rect x="17.9124%" y="389" width="0.0404%" height="15" fill="rgb(235,113,49)" fg:x="22166" fg:w="50"/><text x="18.1624%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (92 samples, 0.07%)</title><rect x="17.8792%" y="453" width="0.0743%" height="15" fill="rgb(205,127,43)" fg:x="22125" fg:w="92"/><text x="18.1292%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (84 samples, 0.07%)</title><rect x="17.8857%" y="437" width="0.0679%" height="15" fill="rgb(250,162,2)" fg:x="22133" fg:w="84"/><text x="18.1357%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (84 samples, 0.07%)</title><rect x="17.8857%" y="421" width="0.0679%" height="15" fill="rgb(220,13,41)" fg:x="22133" fg:w="84"/><text x="18.1357%" y="431.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (84 samples, 0.07%)</title><rect x="17.8857%" y="405" width="0.0679%" height="15" fill="rgb(249,221,25)" fg:x="22133" fg:w="84"/><text x="18.1357%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (13 samples, 0.01%)</title><rect x="17.9713%" y="437" width="0.0105%" height="15" fill="rgb(215,208,19)" fg:x="22239" fg:w="13"/><text x="18.2213%" y="447.50"></text></g><g><title>core::time::Duration::as_nanos (25 samples, 0.02%)</title><rect x="17.9819%" y="437" width="0.0202%" height="15" fill="rgb(236,175,2)" fg:x="22252" fg:w="25"/><text x="18.2319%" y="447.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (69 samples, 0.06%)</title><rect x="18.0021%" y="421" width="0.0558%" height="15" fill="rgb(241,52,2)" fg:x="22277" fg:w="69"/><text x="18.2521%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (37 samples, 0.03%)</title><rect x="18.0893%" y="389" width="0.0299%" height="15" fill="rgb(248,140,14)" fg:x="22385" fg:w="37"/><text x="18.3393%" y="399.50"></text></g><g><title>core::cmp::PartialOrd::ge (37 samples, 0.03%)</title><rect x="18.0893%" y="373" width="0.0299%" height="15" fill="rgb(253,22,42)" fg:x="22385" fg:w="37"/><text x="18.3393%" y="383.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (37 samples, 0.03%)</title><rect x="18.0893%" y="357" width="0.0299%" height="15" fill="rgb(234,61,47)" fg:x="22385" fg:w="37"/><text x="18.3393%" y="367.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (37 samples, 0.03%)</title><rect x="18.0893%" y="341" width="0.0299%" height="15" fill="rgb(208,226,15)" fg:x="22385" fg:w="37"/><text x="18.3393%" y="351.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (37 samples, 0.03%)</title><rect x="18.0893%" y="325" width="0.0299%" height="15" fill="rgb(217,221,4)" fg:x="22385" fg:w="37"/><text x="18.3393%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (23 samples, 0.02%)</title><rect x="18.1006%" y="309" width="0.0186%" height="15" fill="rgb(212,174,34)" fg:x="22399" fg:w="23"/><text x="18.3506%" y="319.50"></text></g><g><title>std::time::SystemTime::duration_since (181 samples, 0.15%)</title><rect x="18.0021%" y="437" width="0.1463%" height="15" fill="rgb(253,83,4)" fg:x="22277" fg:w="181"/><text x="18.2521%" y="447.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (112 samples, 0.09%)</title><rect x="18.0578%" y="421" width="0.0905%" height="15" fill="rgb(250,195,49)" fg:x="22346" fg:w="112"/><text x="18.3078%" y="431.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (112 samples, 0.09%)</title><rect x="18.0578%" y="405" width="0.0905%" height="15" fill="rgb(241,192,25)" fg:x="22346" fg:w="112"/><text x="18.3078%" y="415.50"></text></g><g><title>core::time::Duration::new (36 samples, 0.03%)</title><rect x="18.1192%" y="389" width="0.0291%" height="15" fill="rgb(208,124,10)" fg:x="22422" fg:w="36"/><text x="18.3692%" y="399.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,368 samples, 1.91%)</title><rect x="16.5475%" y="485" width="1.9136%" height="15" fill="rgb(222,33,0)" fg:x="20477" fg:w="2368"/><text x="16.7975%" y="495.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (2,038 samples, 1.65%)</title><rect x="16.8141%" y="469" width="1.6469%" height="15" fill="rgb(234,209,28)" fg:x="20807" fg:w="2038"/><text x="17.0641%" y="479.50"></text></g><g><title>tremor_common::time::nanotime (628 samples, 0.51%)</title><rect x="17.9536%" y="453" width="0.5075%" height="15" fill="rgb(224,11,23)" fg:x="22217" fg:w="628"/><text x="18.2036%" y="463.50"></text></g><g><title>std::time::SystemTime::now (387 samples, 0.31%)</title><rect x="18.1483%" y="437" width="0.3127%" height="15" fill="rgb(232,99,1)" fg:x="22458" fg:w="387"/><text x="18.3983%" y="447.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (387 samples, 0.31%)</title><rect x="18.1483%" y="421" width="0.3127%" height="15" fill="rgb(237,95,45)" fg:x="22458" fg:w="387"/><text x="18.3983%" y="431.50"></text></g><g><title>std::sys::unix::time::inner::now (387 samples, 0.31%)</title><rect x="18.1483%" y="405" width="0.3127%" height="15" fill="rgb(208,109,11)" fg:x="22458" fg:w="387"/><text x="18.3983%" y="415.50"></text></g><g><title>__clock_gettime (304 samples, 0.25%)</title><rect x="18.2154%" y="389" width="0.2457%" height="15" fill="rgb(216,190,48)" fg:x="22541" fg:w="304"/><text x="18.4654%" y="399.50"></text></g><g><title>__vdso_clock_gettime (287 samples, 0.23%)</title><rect x="18.2291%" y="373" width="0.2319%" height="15" fill="rgb(251,171,36)" fg:x="22558" fg:w="287"/><text x="18.4791%" y="383.50"></text></g><g><title>[[vdso]] (250 samples, 0.20%)</title><rect x="18.2590%" y="357" width="0.2020%" height="15" fill="rgb(230,62,22)" fg:x="22595" fg:w="250"/><text x="18.5090%" y="367.50"></text></g><g><title>[libc-2.31.so] (450 samples, 0.36%)</title><rect x="18.4611%" y="485" width="0.3636%" height="15" fill="rgb(225,114,35)" fg:x="22845" fg:w="450"/><text x="18.7111%" y="495.50"></text></g><g><title>abi_stable::std_types::option::ROption&lt;T&gt;::map (15 samples, 0.01%)</title><rect x="18.8247%" y="485" width="0.0121%" height="15" fill="rgb(215,118,42)" fg:x="23295" fg:w="15"/><text x="19.0747%" y="495.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,836 samples, 3.10%)</title><rect x="15.8477%" y="517" width="3.0999%" height="15" fill="rgb(243,119,21)" fg:x="19611" fg:w="3836"/><text x="16.0977%" y="527.50">&lt;co..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (3,629 samples, 2.93%)</title><rect x="16.0149%" y="501" width="2.9326%" height="15" fill="rgb(252,177,53)" fg:x="19818" fg:w="3629"/><text x="16.2649%" y="511.50">tr..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data (127 samples, 0.10%)</title><rect x="18.8449%" y="485" width="0.1026%" height="15" fill="rgb(237,209,29)" fg:x="23320" fg:w="127"/><text x="19.0949%" y="495.50"></text></g><g><title>[libc-2.31.so] (380 samples, 0.31%)</title><rect x="18.9500%" y="517" width="0.3071%" height="15" fill="rgb(212,65,23)" fg:x="23450" fg:w="380"/><text x="19.2000%" y="527.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (41 samples, 0.03%)</title><rect x="19.4243%" y="389" width="0.0331%" height="15" fill="rgb(230,222,46)" fg:x="24037" fg:w="41"/><text x="19.6743%" y="399.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (251 samples, 0.20%)</title><rect x="19.2570%" y="517" width="0.2028%" height="15" fill="rgb(215,135,32)" fg:x="23830" fg:w="251"/><text x="19.5070%" y="527.50"></text></g><g><title>alloc::alloc::exchange_malloc (89 samples, 0.07%)</title><rect x="19.3879%" y="501" width="0.0719%" height="15" fill="rgb(246,101,22)" fg:x="23992" fg:w="89"/><text x="19.6379%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (89 samples, 0.07%)</title><rect x="19.3879%" y="485" width="0.0719%" height="15" fill="rgb(206,107,13)" fg:x="23992" fg:w="89"/><text x="19.6379%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (89 samples, 0.07%)</title><rect x="19.3879%" y="469" width="0.0719%" height="15" fill="rgb(250,100,44)" fg:x="23992" fg:w="89"/><text x="19.6379%" y="479.50"></text></g><g><title>alloc::alloc::alloc (88 samples, 0.07%)</title><rect x="19.3888%" y="453" width="0.0711%" height="15" fill="rgb(231,147,38)" fg:x="23993" fg:w="88"/><text x="19.6388%" y="463.50"></text></g><g><title>__rg_alloc (88 samples, 0.07%)</title><rect x="19.3888%" y="437" width="0.0711%" height="15" fill="rgb(229,8,40)" fg:x="23993" fg:w="88"/><text x="19.6388%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (88 samples, 0.07%)</title><rect x="19.3888%" y="421" width="0.0711%" height="15" fill="rgb(221,135,30)" fg:x="23993" fg:w="88"/><text x="19.6388%" y="431.50"></text></g><g><title>sn_rust_alloc (74 samples, 0.06%)</title><rect x="19.4001%" y="405" width="0.0598%" height="15" fill="rgb(249,193,18)" fg:x="24007" fg:w="74"/><text x="19.6501%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}}&gt;&gt; (15 samples, 0.01%)</title><rect x="19.4647%" y="517" width="0.0121%" height="15" fill="rgb(209,133,39)" fg:x="24087" fg:w="15"/><text x="19.7147%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}}&gt; (15 samples, 0.01%)</title><rect x="19.4647%" y="501" width="0.0121%" height="15" fill="rgb(232,100,14)" fg:x="24087" fg:w="15"/><text x="19.7147%" y="511.50"></text></g><g><title>async_global_executor::reactor::block_on (5,056 samples, 4.09%)</title><rect x="15.4105%" y="869" width="4.0858%" height="15" fill="rgb(224,185,1)" fg:x="19070" fg:w="5056"/><text x="15.6605%" y="879.50">asyn..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (5,056 samples, 4.09%)</title><rect x="15.4105%" y="853" width="4.0858%" height="15" fill="rgb(223,139,8)" fg:x="19070" fg:w="5056"/><text x="15.6605%" y="863.50">asyn..</text></g><g><title>async_io::driver::block_on (5,056 samples, 4.09%)</title><rect x="15.4105%" y="837" width="4.0858%" height="15" fill="rgb(232,213,38)" fg:x="19070" fg:w="5056"/><text x="15.6605%" y="847.50">asyn..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (5,056 samples, 4.09%)</title><rect x="15.4105%" y="821" width="4.0858%" height="15" fill="rgb(207,94,22)" fg:x="19070" fg:w="5056"/><text x="15.6605%" y="831.50">&lt;fut..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,056 samples, 4.09%)</title><rect x="15.4105%" y="805" width="4.0858%" height="15" fill="rgb(219,183,54)" fg:x="19070" fg:w="5056"/><text x="15.6605%" y="815.50">&lt;cor..</text></g><g><title>async_executor::Executor::run::{{closure}} (5,056 samples, 4.09%)</title><rect x="15.4105%" y="789" width="4.0858%" height="15" fill="rgb(216,185,54)" fg:x="19070" fg:w="5056"/><text x="15.6605%" y="799.50">asyn..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (5,056 samples, 4.09%)</title><rect x="15.4105%" y="773" width="4.0858%" height="15" fill="rgb(254,217,39)" fg:x="19070" fg:w="5056"/><text x="15.6605%" y="783.50">&lt;fut..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,056 samples, 4.09%)</title><rect x="15.4105%" y="757" width="4.0858%" height="15" fill="rgb(240,178,23)" fg:x="19070" fg:w="5056"/><text x="15.6605%" y="767.50">&lt;cor..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (5,056 samples, 4.09%)</title><rect x="15.4105%" y="741" width="4.0858%" height="15" fill="rgb(218,11,47)" fg:x="19070" fg:w="5056"/><text x="15.6605%" y="751.50">asyn..</text></g><g><title>async_task::runnable::Runnable::run (5,056 samples, 4.09%)</title><rect x="15.4105%" y="725" width="4.0858%" height="15" fill="rgb(218,51,51)" fg:x="19070" fg:w="5056"/><text x="15.6605%" y="735.50">asyn..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (5,056 samples, 4.09%)</title><rect x="15.4105%" y="709" width="4.0858%" height="15" fill="rgb(238,126,27)" fg:x="19070" fg:w="5056"/><text x="15.6605%" y="719.50">asyn..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (5,056 samples, 4.09%)</title><rect x="15.4105%" y="693" width="4.0858%" height="15" fill="rgb(249,202,22)" fg:x="19070" fg:w="5056"/><text x="15.6605%" y="703.50">&lt;cor..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,056 samples, 4.09%)</title><rect x="15.4105%" y="677" width="4.0858%" height="15" fill="rgb(254,195,49)" fg:x="19070" fg:w="5056"/><text x="15.6605%" y="687.50">&lt;cor..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (5,056 samples, 4.09%)</title><rect x="15.4105%" y="661" width="4.0858%" height="15" fill="rgb(208,123,14)" fg:x="19070" fg:w="5056"/><text x="15.6605%" y="671.50">asyn..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (5,056 samples, 4.09%)</title><rect x="15.4105%" y="645" width="4.0858%" height="15" fill="rgb(224,200,8)" fg:x="19070" fg:w="5056"/><text x="15.6605%" y="655.50">&lt;asy..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (5,056 samples, 4.09%)</title><rect x="15.4105%" y="629" width="4.0858%" height="15" fill="rgb(217,61,36)" fg:x="19070" fg:w="5056"/><text x="15.6605%" y="639.50">asyn..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (5,056 samples, 4.09%)</title><rect x="15.4105%" y="613" width="4.0858%" height="15" fill="rgb(206,35,45)" fg:x="19070" fg:w="5056"/><text x="15.6605%" y="623.50">std:..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (5,056 samples, 4.09%)</title><rect x="15.4105%" y="597" width="4.0858%" height="15" fill="rgb(217,65,33)" fg:x="19070" fg:w="5056"/><text x="15.6605%" y="607.50">std:..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (5,056 samples, 4.09%)</title><rect x="15.4105%" y="581" width="4.0858%" height="15" fill="rgb(222,158,48)" fg:x="19070" fg:w="5056"/><text x="15.6605%" y="591.50">asyn..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (5,056 samples, 4.09%)</title><rect x="15.4105%" y="565" width="4.0858%" height="15" fill="rgb(254,2,54)" fg:x="19070" fg:w="5056"/><text x="15.6605%" y="575.50">&lt;asy..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,056 samples, 4.09%)</title><rect x="15.4105%" y="549" width="4.0858%" height="15" fill="rgb(250,143,38)" fg:x="19070" fg:w="5056"/><text x="15.6605%" y="559.50">&lt;cor..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (5,056 samples, 4.09%)</title><rect x="15.4105%" y="533" width="4.0858%" height="15" fill="rgb(248,25,0)" fg:x="19070" fg:w="5056"/><text x="15.6605%" y="543.50">trem..</text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (711 samples, 0.57%)</title><rect x="19.9116%" y="549" width="0.5746%" height="15" fill="rgb(206,152,27)" fg:x="24640" fg:w="711"/><text x="20.1616%" y="559.50"></text></g><g><title>[libc-2.31.so] (607 samples, 0.49%)</title><rect x="19.9956%" y="533" width="0.4905%" height="15" fill="rgb(240,77,30)" fg:x="24744" fg:w="607"/><text x="20.2456%" y="543.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::ops::deref::Deref&gt;::deref (15 samples, 0.01%)</title><rect x="20.4862%" y="549" width="0.0121%" height="15" fill="rgb(231,5,3)" fg:x="25351" fg:w="15"/><text x="20.7362%" y="559.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::as_slice (15 samples, 0.01%)</title><rect x="20.4862%" y="533" width="0.0121%" height="15" fill="rgb(207,226,32)" fg:x="25351" fg:w="15"/><text x="20.7362%" y="543.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (16 samples, 0.01%)</title><rect x="20.4983%" y="549" width="0.0129%" height="15" fill="rgb(222,207,47)" fg:x="25366" fg:w="16"/><text x="20.7483%" y="559.50"></text></g><g><title>[libc-2.31.so] (250 samples, 0.20%)</title><rect x="20.5282%" y="533" width="0.2020%" height="15" fill="rgb(229,115,45)" fg:x="25403" fg:w="250"/><text x="20.7782%" y="543.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (872 samples, 0.70%)</title><rect x="20.9961%" y="517" width="0.7047%" height="15" fill="rgb(224,191,6)" fg:x="25982" fg:w="872"/><text x="21.2461%" y="527.50"></text></g><g><title>[libc-2.31.so] (251 samples, 0.20%)</title><rect x="21.7161%" y="501" width="0.2028%" height="15" fill="rgb(230,227,24)" fg:x="26873" fg:w="251"/><text x="21.9661%" y="511.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (457 samples, 0.37%)</title><rect x="21.7007%" y="517" width="0.3693%" height="15" fill="rgb(228,80,19)" fg:x="26854" fg:w="457"/><text x="21.9507%" y="527.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (187 samples, 0.15%)</title><rect x="21.9189%" y="501" width="0.1511%" height="15" fill="rgb(247,229,0)" fg:x="27124" fg:w="187"/><text x="22.1689%" y="511.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (223 samples, 0.18%)</title><rect x="22.0700%" y="485" width="0.1802%" height="15" fill="rgb(237,194,15)" fg:x="27311" fg:w="223"/><text x="22.3200%" y="495.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (209 samples, 0.17%)</title><rect x="22.0813%" y="469" width="0.1689%" height="15" fill="rgb(219,203,20)" fg:x="27325" fg:w="209"/><text x="22.3313%" y="479.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (209 samples, 0.17%)</title><rect x="22.0813%" y="453" width="0.1689%" height="15" fill="rgb(234,128,8)" fg:x="27325" fg:w="209"/><text x="22.3313%" y="463.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (37 samples, 0.03%)</title><rect x="22.3189%" y="437" width="0.0299%" height="15" fill="rgb(248,202,8)" fg:x="27619" fg:w="37"/><text x="22.5689%" y="447.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (37 samples, 0.03%)</title><rect x="22.3189%" y="421" width="0.0299%" height="15" fill="rgb(206,104,37)" fg:x="27619" fg:w="37"/><text x="22.5689%" y="431.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (37 samples, 0.03%)</title><rect x="22.3189%" y="405" width="0.0299%" height="15" fill="rgb(223,8,27)" fg:x="27619" fg:w="37"/><text x="22.5689%" y="415.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (5,327 samples, 4.30%)</title><rect x="22.2607%" y="469" width="4.3048%" height="15" fill="rgb(216,217,28)" fg:x="27547" fg:w="5327"/><text x="22.5107%" y="479.50">&lt;asyn..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (5,288 samples, 4.27%)</title><rect x="22.2923%" y="453" width="4.2732%" height="15" fill="rgb(249,199,1)" fg:x="27586" fg:w="5288"/><text x="22.5423%" y="463.50">async..</text></g><g><title>std::panic::catch_unwind (5,218 samples, 4.22%)</title><rect x="22.3488%" y="437" width="4.2167%" height="15" fill="rgb(240,85,17)" fg:x="27656" fg:w="5218"/><text x="22.5988%" y="447.50">std::..</text></g><g><title>std::panicking::try (5,218 samples, 4.22%)</title><rect x="22.3488%" y="421" width="4.2167%" height="15" fill="rgb(206,108,45)" fg:x="27656" fg:w="5218"/><text x="22.5988%" y="431.50">std::..</text></g><g><title>std::panicking::try::do_call (5,218 samples, 4.22%)</title><rect x="22.3488%" y="405" width="4.2167%" height="15" fill="rgb(245,210,41)" fg:x="27656" fg:w="5218"/><text x="22.5988%" y="415.50">std::..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (27 samples, 0.02%)</title><rect x="26.5437%" y="389" width="0.0218%" height="15" fill="rgb(206,13,37)" fg:x="32847" fg:w="27"/><text x="26.7937%" y="399.50"></text></g><g><title>core::ops::function::FnOnce::call_once (27 samples, 0.02%)</title><rect x="26.5437%" y="373" width="0.0218%" height="15" fill="rgb(250,61,18)" fg:x="32847" fg:w="27"/><text x="26.7937%" y="383.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (27 samples, 0.02%)</title><rect x="26.5437%" y="357" width="0.0218%" height="15" fill="rgb(235,172,48)" fg:x="32847" fg:w="27"/><text x="26.7937%" y="367.50"></text></g><g><title>async_ffi::FfiContext::with_context (26 samples, 0.02%)</title><rect x="26.5445%" y="341" width="0.0210%" height="15" fill="rgb(249,201,17)" fg:x="32848" fg:w="26"/><text x="26.7945%" y="351.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (5,346 samples, 4.32%)</title><rect x="22.2502%" y="485" width="4.3201%" height="15" fill="rgb(219,208,6)" fg:x="27534" fg:w="5346"/><text x="22.5002%" y="495.50">&lt;core..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,753 samples, 4.65%)</title><rect x="22.0700%" y="517" width="4.6490%" height="15" fill="rgb(248,31,23)" fg:x="27311" fg:w="5753"/><text x="22.3200%" y="527.50">&lt;asyn..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,753 samples, 4.65%)</title><rect x="22.0700%" y="501" width="4.6490%" height="15" fill="rgb(245,15,42)" fg:x="27311" fg:w="5753"/><text x="22.3200%" y="511.50">&lt;asyn..</text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (184 samples, 0.15%)</title><rect x="26.5703%" y="485" width="0.1487%" height="15" fill="rgb(222,217,39)" fg:x="32880" fg:w="184"/><text x="26.8203%" y="495.50"></text></g><g><title>[libc-2.31.so] (696 samples, 0.56%)</title><rect x="26.7190%" y="517" width="0.5624%" height="15" fill="rgb(210,219,27)" fg:x="33064" fg:w="696"/><text x="26.9690%" y="527.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (75 samples, 0.06%)</title><rect x="27.2815%" y="517" width="0.0606%" height="15" fill="rgb(252,166,36)" fg:x="33760" fg:w="75"/><text x="27.5315%" y="527.50"></text></g><g><title>alloc::alloc::box_free (18 samples, 0.01%)</title><rect x="27.3623%" y="389" width="0.0145%" height="15" fill="rgb(245,132,34)" fg:x="33860" fg:w="18"/><text x="27.6123%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (18 samples, 0.01%)</title><rect x="27.3623%" y="373" width="0.0145%" height="15" fill="rgb(236,54,3)" fg:x="33860" fg:w="18"/><text x="27.6123%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (18 samples, 0.01%)</title><rect x="27.3623%" y="357" width="0.0145%" height="15" fill="rgb(241,173,43)" fg:x="33860" fg:w="18"/><text x="27.6123%" y="367.50"></text></g><g><title>__rg_dealloc (18 samples, 0.01%)</title><rect x="27.3623%" y="341" width="0.0145%" height="15" fill="rgb(215,190,9)" fg:x="33860" fg:w="18"/><text x="27.6123%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (18 samples, 0.01%)</title><rect x="27.3623%" y="325" width="0.0145%" height="15" fill="rgb(242,101,16)" fg:x="33860" fg:w="18"/><text x="27.6123%" y="335.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn (42 samples, 0.03%)</title><rect x="27.3526%" y="469" width="0.0339%" height="15" fill="rgb(223,190,21)" fg:x="33848" fg:w="42"/><text x="27.6026%" y="479.50"></text></g><g><title>async_ffi::DropBomb::with (30 samples, 0.02%)</title><rect x="27.3623%" y="453" width="0.0242%" height="15" fill="rgb(215,228,25)" fg:x="33860" fg:w="30"/><text x="27.6123%" y="463.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn::{{closure}} (30 samples, 0.02%)</title><rect x="27.3623%" y="437" width="0.0242%" height="15" fill="rgb(225,36,22)" fg:x="33860" fg:w="30"/><text x="27.6123%" y="447.50"></text></g><g><title>core::mem::drop (30 samples, 0.02%)</title><rect x="27.3623%" y="421" width="0.0242%" height="15" fill="rgb(251,106,46)" fg:x="33860" fg:w="30"/><text x="27.6123%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}}&gt;&gt;&gt; (30 samples, 0.02%)</title><rect x="27.3623%" y="405" width="0.0242%" height="15" fill="rgb(208,90,1)" fg:x="33860" fg:w="30"/><text x="27.6123%" y="415.50"></text></g><g><title>sn_rust_dealloc (66 samples, 0.05%)</title><rect x="27.3865%" y="469" width="0.0533%" height="15" fill="rgb(243,10,4)" fg:x="33890" fg:w="66"/><text x="27.6365%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (131 samples, 0.11%)</title><rect x="27.3421%" y="517" width="0.1059%" height="15" fill="rgb(212,137,27)" fg:x="33835" fg:w="131"/><text x="27.5921%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (131 samples, 0.11%)</title><rect x="27.3421%" y="501" width="0.1059%" height="15" fill="rgb(231,220,49)" fg:x="33835" fg:w="131"/><text x="27.5921%" y="511.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (131 samples, 0.11%)</title><rect x="27.3421%" y="485" width="0.1059%" height="15" fill="rgb(237,96,20)" fg:x="33835" fg:w="131"/><text x="27.5921%" y="495.50"></text></g><g><title>[libc-2.31.so] (154 samples, 0.12%)</title><rect x="27.8496%" y="501" width="0.1244%" height="15" fill="rgb(239,229,30)" fg:x="34463" fg:w="154"/><text x="28.0996%" y="511.50"></text></g><g><title>[libc-2.31.so] (313 samples, 0.25%)</title><rect x="28.0120%" y="421" width="0.2529%" height="15" fill="rgb(219,65,33)" fg:x="34664" fg:w="313"/><text x="28.2620%" y="431.50"></text></g><g><title>[libc-2.31.so] (188 samples, 0.15%)</title><rect x="28.2779%" y="405" width="0.1519%" height="15" fill="rgb(243,134,7)" fg:x="34993" fg:w="188"/><text x="28.5279%" y="415.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (169 samples, 0.14%)</title><rect x="28.7498%" y="293" width="0.1366%" height="15" fill="rgb(216,177,54)" fg:x="35577" fg:w="169"/><text x="28.9998%" y="303.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (1,150 samples, 0.93%)</title><rect x="27.9756%" y="501" width="0.9293%" height="15" fill="rgb(211,160,20)" fg:x="34619" fg:w="1150"/><text x="28.2256%" y="511.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event (1,122 samples, 0.91%)</title><rect x="27.9983%" y="485" width="0.9067%" height="15" fill="rgb(239,85,39)" fg:x="34647" fg:w="1122"/><text x="28.2483%" y="495.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (1,122 samples, 0.91%)</title><rect x="27.9983%" y="469" width="0.9067%" height="15" fill="rgb(232,125,22)" fg:x="34647" fg:w="1122"/><text x="28.2483%" y="479.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (1,122 samples, 0.91%)</title><rect x="27.9983%" y="453" width="0.9067%" height="15" fill="rgb(244,57,34)" fg:x="34647" fg:w="1122"/><text x="28.2483%" y="463.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (1,122 samples, 0.91%)</title><rect x="27.9983%" y="437" width="0.9067%" height="15" fill="rgb(214,203,32)" fg:x="34647" fg:w="1122"/><text x="28.2483%" y="447.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (792 samples, 0.64%)</title><rect x="28.2649%" y="421" width="0.6400%" height="15" fill="rgb(207,58,43)" fg:x="34977" fg:w="792"/><text x="28.5149%" y="431.50"></text></g><g><title>alloc::alloc::exchange_malloc (588 samples, 0.48%)</title><rect x="28.4298%" y="405" width="0.4752%" height="15" fill="rgb(215,193,15)" fg:x="35181" fg:w="588"/><text x="28.6798%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (588 samples, 0.48%)</title><rect x="28.4298%" y="389" width="0.4752%" height="15" fill="rgb(232,15,44)" fg:x="35181" fg:w="588"/><text x="28.6798%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (588 samples, 0.48%)</title><rect x="28.4298%" y="373" width="0.4752%" height="15" fill="rgb(212,3,48)" fg:x="35181" fg:w="588"/><text x="28.6798%" y="383.50"></text></g><g><title>alloc::alloc::alloc (575 samples, 0.46%)</title><rect x="28.4403%" y="357" width="0.4647%" height="15" fill="rgb(218,128,7)" fg:x="35194" fg:w="575"/><text x="28.6903%" y="367.50"></text></g><g><title>__rg_alloc (575 samples, 0.46%)</title><rect x="28.4403%" y="341" width="0.4647%" height="15" fill="rgb(226,216,39)" fg:x="35194" fg:w="575"/><text x="28.6903%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (575 samples, 0.46%)</title><rect x="28.4403%" y="325" width="0.4647%" height="15" fill="rgb(243,47,51)" fg:x="35194" fg:w="575"/><text x="28.6903%" y="335.50"></text></g><g><title>sn_rust_alloc (565 samples, 0.46%)</title><rect x="28.4484%" y="309" width="0.4566%" height="15" fill="rgb(241,183,40)" fg:x="35204" fg:w="565"/><text x="28.6984%" y="319.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (23 samples, 0.02%)</title><rect x="28.8864%" y="293" width="0.0186%" height="15" fill="rgb(231,217,32)" fg:x="35746" fg:w="23"/><text x="29.1364%" y="303.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (10,139 samples, 8.19%)</title><rect x="20.7302%" y="533" width="8.1933%" height="15" fill="rgb(229,61,38)" fg:x="25653" fg:w="10139"/><text x="20.9802%" y="543.50">tremor_runt..</text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_TO&lt;_ErasedPtr&gt;::on_event (1,826 samples, 1.48%)</title><rect x="27.4479%" y="517" width="1.4756%" height="15" fill="rgb(225,210,5)" fg:x="33966" fg:w="1826"/><text x="27.6979%" y="527.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::_::&lt;impl tremor_runtime::connectors::sink::RawSink_trait::VTableInner_Ref&lt;_Self,_ErasedPtr&gt;&gt;::on_event (21 samples, 0.02%)</title><rect x="28.9066%" y="501" width="0.0170%" height="15" fill="rgb(231,79,45)" fg:x="35771" fg:w="21"/><text x="29.1566%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (37 samples, 0.03%)</title><rect x="29.1522%" y="501" width="0.0299%" height="15" fill="rgb(224,100,7)" fg:x="36075" fg:w="37"/><text x="29.4022%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (37 samples, 0.03%)</title><rect x="29.1522%" y="485" width="0.0299%" height="15" fill="rgb(241,198,18)" fg:x="36075" fg:w="37"/><text x="29.4022%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (37 samples, 0.03%)</title><rect x="29.1522%" y="469" width="0.0299%" height="15" fill="rgb(252,97,53)" fg:x="36075" fg:w="37"/><text x="29.4022%" y="479.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (17 samples, 0.01%)</title><rect x="29.1684%" y="453" width="0.0137%" height="15" fill="rgb(220,88,7)" fg:x="36095" fg:w="17"/><text x="29.4184%" y="463.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (17 samples, 0.01%)</title><rect x="29.1684%" y="437" width="0.0137%" height="15" fill="rgb(213,176,14)" fg:x="36095" fg:w="17"/><text x="29.4184%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (22 samples, 0.02%)</title><rect x="29.2056%" y="421" width="0.0178%" height="15" fill="rgb(246,73,7)" fg:x="36141" fg:w="22"/><text x="29.4556%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (22 samples, 0.02%)</title><rect x="29.2056%" y="405" width="0.0178%" height="15" fill="rgb(245,64,36)" fg:x="36141" fg:w="22"/><text x="29.4556%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value)&gt;&gt; (22 samples, 0.02%)</title><rect x="29.2056%" y="389" width="0.0178%" height="15" fill="rgb(245,80,10)" fg:x="36141" fg:w="22"/><text x="29.4556%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.02%)</title><rect x="29.2056%" y="373" width="0.0178%" height="15" fill="rgb(232,107,50)" fg:x="36141" fg:w="22"/><text x="29.4556%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::is_empty_singleton (16 samples, 0.01%)</title><rect x="29.2104%" y="357" width="0.0129%" height="15" fill="rgb(253,3,0)" fg:x="36147" fg:w="16"/><text x="29.4604%" y="367.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (49 samples, 0.04%)</title><rect x="29.1926%" y="437" width="0.0396%" height="15" fill="rgb(212,99,53)" fg:x="36125" fg:w="49"/><text x="29.4426%" y="447.50"></text></g><g><title>sn_rust_dealloc (182 samples, 0.15%)</title><rect x="29.2322%" y="437" width="0.1471%" height="15" fill="rgb(249,111,54)" fg:x="36174" fg:w="182"/><text x="29.4822%" y="447.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,987 samples, 8.88%)</title><rect x="20.5120%" y="549" width="8.8786%" height="15" fill="rgb(249,55,30)" fg:x="25383" fg:w="10987"/><text x="20.7620%" y="559.50">&lt;core::future..</text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (578 samples, 0.47%)</title><rect x="28.9235%" y="533" width="0.4671%" height="15" fill="rgb(237,47,42)" fg:x="35792" fg:w="578"/><text x="29.1735%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (295 samples, 0.24%)</title><rect x="29.1522%" y="517" width="0.2384%" height="15" fill="rgb(211,20,18)" fg:x="36075" fg:w="295"/><text x="29.4022%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (258 samples, 0.21%)</title><rect x="29.1821%" y="501" width="0.2085%" height="15" fill="rgb(231,203,46)" fg:x="36112" fg:w="258"/><text x="29.4321%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (258 samples, 0.21%)</title><rect x="29.1821%" y="485" width="0.2085%" height="15" fill="rgb(237,142,3)" fg:x="36112" fg:w="258"/><text x="29.4321%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (258 samples, 0.21%)</title><rect x="29.1821%" y="469" width="0.2085%" height="15" fill="rgb(241,107,1)" fg:x="36112" fg:w="258"/><text x="29.4321%" y="479.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (258 samples, 0.21%)</title><rect x="29.1821%" y="453" width="0.2085%" height="15" fill="rgb(229,83,13)" fg:x="36112" fg:w="258"/><text x="29.4321%" y="463.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (14 samples, 0.01%)</title><rect x="29.3793%" y="437" width="0.0113%" height="15" fill="rgb(241,91,40)" fg:x="36356" fg:w="14"/><text x="29.6293%" y="447.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_ptr (14 samples, 0.01%)</title><rect x="29.4407%" y="421" width="0.0113%" height="15" fill="rgb(225,3,45)" fg:x="36432" fg:w="14"/><text x="29.6907%" y="431.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (100 samples, 0.08%)</title><rect x="29.4407%" y="437" width="0.0808%" height="15" fill="rgb(244,223,14)" fg:x="36432" fg:w="100"/><text x="29.6907%" y="447.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (86 samples, 0.07%)</title><rect x="29.4520%" y="421" width="0.0695%" height="15" fill="rgb(224,124,37)" fg:x="36446" fg:w="86"/><text x="29.7020%" y="431.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (86 samples, 0.07%)</title><rect x="29.4520%" y="405" width="0.0695%" height="15" fill="rgb(251,171,30)" fg:x="36446" fg:w="86"/><text x="29.7020%" y="415.50"></text></g><g><title>alloc::alloc::exchange_malloc (72 samples, 0.06%)</title><rect x="29.4633%" y="389" width="0.0582%" height="15" fill="rgb(236,46,54)" fg:x="36460" fg:w="72"/><text x="29.7133%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (71 samples, 0.06%)</title><rect x="29.4641%" y="373" width="0.0574%" height="15" fill="rgb(245,213,5)" fg:x="36461" fg:w="71"/><text x="29.7141%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (71 samples, 0.06%)</title><rect x="29.4641%" y="357" width="0.0574%" height="15" fill="rgb(230,144,27)" fg:x="36461" fg:w="71"/><text x="29.7141%" y="367.50"></text></g><g><title>alloc::alloc::alloc (71 samples, 0.06%)</title><rect x="29.4641%" y="341" width="0.0574%" height="15" fill="rgb(220,86,6)" fg:x="36461" fg:w="71"/><text x="29.7141%" y="351.50"></text></g><g><title>__rg_alloc (71 samples, 0.06%)</title><rect x="29.4641%" y="325" width="0.0574%" height="15" fill="rgb(240,20,13)" fg:x="36461" fg:w="71"/><text x="29.7141%" y="335.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (71 samples, 0.06%)</title><rect x="29.4641%" y="309" width="0.0574%" height="15" fill="rgb(217,89,34)" fg:x="36461" fg:w="71"/><text x="29.7141%" y="319.50"></text></g><g><title>sn_rust_alloc (64 samples, 0.05%)</title><rect x="29.4698%" y="293" width="0.0517%" height="15" fill="rgb(229,13,5)" fg:x="36468" fg:w="64"/><text x="29.7198%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (14 samples, 0.01%)</title><rect x="29.5312%" y="389" width="0.0113%" height="15" fill="rgb(244,67,35)" fg:x="36544" fg:w="14"/><text x="29.7812%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (14 samples, 0.01%)</title><rect x="29.5312%" y="373" width="0.0113%" height="15" fill="rgb(221,40,2)" fg:x="36544" fg:w="14"/><text x="29.7812%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (29 samples, 0.02%)</title><rect x="29.5312%" y="405" width="0.0234%" height="15" fill="rgb(237,157,21)" fg:x="36544" fg:w="29"/><text x="29.7812%" y="415.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (159 samples, 0.13%)</title><rect x="29.4270%" y="517" width="0.1285%" height="15" fill="rgb(222,94,11)" fg:x="36415" fg:w="159"/><text x="29.6770%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (149 samples, 0.12%)</title><rect x="29.4351%" y="501" width="0.1204%" height="15" fill="rgb(249,113,6)" fg:x="36425" fg:w="149"/><text x="29.6851%" y="511.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (147 samples, 0.12%)</title><rect x="29.4367%" y="485" width="0.1188%" height="15" fill="rgb(238,137,36)" fg:x="36427" fg:w="147"/><text x="29.6867%" y="495.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (142 samples, 0.11%)</title><rect x="29.4407%" y="469" width="0.1148%" height="15" fill="rgb(210,102,26)" fg:x="36432" fg:w="142"/><text x="29.6907%" y="479.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (142 samples, 0.11%)</title><rect x="29.4407%" y="453" width="0.1148%" height="15" fill="rgb(218,30,30)" fg:x="36432" fg:w="142"/><text x="29.6907%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (42 samples, 0.03%)</title><rect x="29.5215%" y="437" width="0.0339%" height="15" fill="rgb(214,67,26)" fg:x="36532" fg:w="42"/><text x="29.7715%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (42 samples, 0.03%)</title><rect x="29.5215%" y="421" width="0.0339%" height="15" fill="rgb(251,9,53)" fg:x="36532" fg:w="42"/><text x="29.7715%" y="431.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (83 samples, 0.07%)</title><rect x="29.8868%" y="485" width="0.0671%" height="15" fill="rgb(228,204,25)" fg:x="36984" fg:w="83"/><text x="30.1368%" y="495.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (83 samples, 0.07%)</title><rect x="29.8868%" y="469" width="0.0671%" height="15" fill="rgb(207,153,8)" fg:x="36984" fg:w="83"/><text x="30.1368%" y="479.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (83 samples, 0.07%)</title><rect x="29.8868%" y="453" width="0.0671%" height="15" fill="rgb(242,9,16)" fg:x="36984" fg:w="83"/><text x="30.1368%" y="463.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (72 samples, 0.06%)</title><rect x="29.8957%" y="437" width="0.0582%" height="15" fill="rgb(217,211,10)" fg:x="36995" fg:w="72"/><text x="30.1457%" y="447.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (72 samples, 0.06%)</title><rect x="29.8957%" y="421" width="0.0582%" height="15" fill="rgb(219,228,52)" fg:x="36995" fg:w="72"/><text x="30.1457%" y="431.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (57 samples, 0.05%)</title><rect x="29.9078%" y="405" width="0.0461%" height="15" fill="rgb(231,92,29)" fg:x="37010" fg:w="57"/><text x="30.1578%" y="415.50"></text></g><g><title>alloc::alloc::exchange_malloc (39 samples, 0.03%)</title><rect x="29.9223%" y="389" width="0.0315%" height="15" fill="rgb(232,8,23)" fg:x="37028" fg:w="39"/><text x="30.1723%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (39 samples, 0.03%)</title><rect x="29.9223%" y="373" width="0.0315%" height="15" fill="rgb(216,211,34)" fg:x="37028" fg:w="39"/><text x="30.1723%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (39 samples, 0.03%)</title><rect x="29.9223%" y="357" width="0.0315%" height="15" fill="rgb(236,151,0)" fg:x="37028" fg:w="39"/><text x="30.1723%" y="367.50"></text></g><g><title>alloc::alloc::alloc (39 samples, 0.03%)</title><rect x="29.9223%" y="341" width="0.0315%" height="15" fill="rgb(209,168,3)" fg:x="37028" fg:w="39"/><text x="30.1723%" y="351.50"></text></g><g><title>__rg_alloc (39 samples, 0.03%)</title><rect x="29.9223%" y="325" width="0.0315%" height="15" fill="rgb(208,129,28)" fg:x="37028" fg:w="39"/><text x="30.1723%" y="335.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (39 samples, 0.03%)</title><rect x="29.9223%" y="309" width="0.0315%" height="15" fill="rgb(229,78,22)" fg:x="37028" fg:w="39"/><text x="30.1723%" y="319.50"></text></g><g><title>sn_rust_alloc (28 samples, 0.02%)</title><rect x="29.9312%" y="293" width="0.0226%" height="15" fill="rgb(228,187,13)" fg:x="37039" fg:w="28"/><text x="30.1812%" y="303.50"></text></g><g><title>abi_stable::erased_types::iterator::next (37 samples, 0.03%)</title><rect x="30.0072%" y="437" width="0.0299%" height="15" fill="rgb(240,119,24)" fg:x="37133" fg:w="37"/><text x="30.2572%" y="447.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (26 samples, 0.02%)</title><rect x="30.0161%" y="421" width="0.0210%" height="15" fill="rgb(209,194,42)" fg:x="37144" fg:w="26"/><text x="30.2661%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.02%)</title><rect x="30.0161%" y="405" width="0.0210%" height="15" fill="rgb(247,200,46)" fg:x="37144" fg:w="26"/><text x="30.2661%" y="415.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.02%)</title><rect x="30.0161%" y="389" width="0.0210%" height="15" fill="rgb(218,76,16)" fg:x="37144" fg:w="26"/><text x="30.2661%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.02%)</title><rect x="30.0161%" y="373" width="0.0210%" height="15" fill="rgb(225,21,48)" fg:x="37144" fg:w="26"/><text x="30.2661%" y="383.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (13 samples, 0.01%)</title><rect x="30.0387%" y="405" width="0.0105%" height="15" fill="rgb(239,223,50)" fg:x="37172" fg:w="13"/><text x="30.2887%" y="415.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (13 samples, 0.01%)</title><rect x="30.0387%" y="389" width="0.0105%" height="15" fill="rgb(244,45,21)" fg:x="37172" fg:w="13"/><text x="30.2887%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (79 samples, 0.06%)</title><rect x="29.9870%" y="469" width="0.0638%" height="15" fill="rgb(232,33,43)" fg:x="37108" fg:w="79"/><text x="30.2370%" y="479.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (79 samples, 0.06%)</title><rect x="29.9870%" y="453" width="0.0638%" height="15" fill="rgb(209,8,3)" fg:x="37108" fg:w="79"/><text x="30.2370%" y="463.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (17 samples, 0.01%)</title><rect x="30.0371%" y="437" width="0.0137%" height="15" fill="rgb(214,25,53)" fg:x="37170" fg:w="17"/><text x="30.2871%" y="447.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (17 samples, 0.01%)</title><rect x="30.0371%" y="421" width="0.0137%" height="15" fill="rgb(254,186,54)" fg:x="37170" fg:w="17"/><text x="30.2871%" y="431.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;::sabi_erased_ref (14 samples, 0.01%)</title><rect x="30.0565%" y="437" width="0.0113%" height="15" fill="rgb(208,174,49)" fg:x="37194" fg:w="14"/><text x="30.3065%" y="447.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint (21 samples, 0.02%)</title><rect x="30.0678%" y="437" width="0.0170%" height="15" fill="rgb(233,191,51)" fg:x="37208" fg:w="21"/><text x="30.3178%" y="447.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint::{{closure}} (21 samples, 0.02%)</title><rect x="30.0678%" y="421" width="0.0170%" height="15" fill="rgb(222,134,10)" fg:x="37208" fg:w="21"/><text x="30.3178%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (49 samples, 0.04%)</title><rect x="30.0508%" y="469" width="0.0396%" height="15" fill="rgb(230,226,20)" fg:x="37187" fg:w="49"/><text x="30.3008%" y="479.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (49 samples, 0.04%)</title><rect x="30.0508%" y="453" width="0.0396%" height="15" fill="rgb(251,111,25)" fg:x="37187" fg:w="49"/><text x="30.3008%" y="463.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (13 samples, 0.01%)</title><rect x="30.1292%" y="357" width="0.0105%" height="15" fill="rgb(224,40,46)" fg:x="37284" fg:w="13"/><text x="30.3792%" y="367.50"></text></g><g><title>sn_rust_dealloc (83 samples, 0.07%)</title><rect x="30.1397%" y="357" width="0.0671%" height="15" fill="rgb(236,108,47)" fg:x="37297" fg:w="83"/><text x="30.3897%" y="367.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (1,015 samples, 0.82%)</title><rect x="29.3906%" y="549" width="0.8202%" height="15" fill="rgb(234,93,0)" fg:x="36370" fg:w="1015"/><text x="29.6406%" y="559.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (979 samples, 0.79%)</title><rect x="29.4197%" y="533" width="0.7911%" height="15" fill="rgb(224,213,32)" fg:x="36406" fg:w="979"/><text x="29.6697%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (811 samples, 0.66%)</title><rect x="29.5555%" y="517" width="0.6554%" height="15" fill="rgb(251,11,48)" fg:x="36574" fg:w="811"/><text x="29.8055%" y="527.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (409 samples, 0.33%)</title><rect x="29.8803%" y="501" width="0.3305%" height="15" fill="rgb(236,173,5)" fg:x="36976" fg:w="409"/><text x="30.1303%" y="511.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (318 samples, 0.26%)</title><rect x="29.9539%" y="485" width="0.2570%" height="15" fill="rgb(230,95,12)" fg:x="37067" fg:w="318"/><text x="30.2039%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (137 samples, 0.11%)</title><rect x="30.1001%" y="469" width="0.1107%" height="15" fill="rgb(232,209,1)" fg:x="37248" fg:w="137"/><text x="30.3501%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (137 samples, 0.11%)</title><rect x="30.1001%" y="453" width="0.1107%" height="15" fill="rgb(232,6,1)" fg:x="37248" fg:w="137"/><text x="30.3501%" y="463.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (137 samples, 0.11%)</title><rect x="30.1001%" y="437" width="0.1107%" height="15" fill="rgb(210,224,50)" fg:x="37248" fg:w="137"/><text x="30.3501%" y="447.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (124 samples, 0.10%)</title><rect x="30.1106%" y="421" width="0.1002%" height="15" fill="rgb(228,127,35)" fg:x="37261" fg:w="124"/><text x="30.3606%" y="431.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (112 samples, 0.09%)</title><rect x="30.1203%" y="405" width="0.0905%" height="15" fill="rgb(245,102,45)" fg:x="37273" fg:w="112"/><text x="30.3703%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (112 samples, 0.09%)</title><rect x="30.1203%" y="389" width="0.0905%" height="15" fill="rgb(214,1,49)" fg:x="37273" fg:w="112"/><text x="30.3703%" y="399.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (112 samples, 0.09%)</title><rect x="30.1203%" y="373" width="0.0905%" height="15" fill="rgb(226,163,40)" fg:x="37273" fg:w="112"/><text x="30.3703%" y="383.50"></text></g><g><title>&lt;tremor_pipeline::EventId as core::clone::Clone&gt;::clone (101 samples, 0.08%)</title><rect x="30.2213%" y="533" width="0.0816%" height="15" fill="rgb(239,212,28)" fg:x="37398" fg:w="101"/><text x="30.4713%" y="543.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (77 samples, 0.06%)</title><rect x="30.2407%" y="517" width="0.0622%" height="15" fill="rgb(220,20,13)" fg:x="37422" fg:w="77"/><text x="30.4907%" y="527.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (36 samples, 0.03%)</title><rect x="30.2739%" y="501" width="0.0291%" height="15" fill="rgb(210,164,35)" fg:x="37463" fg:w="36"/><text x="30.5239%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (36 samples, 0.03%)</title><rect x="30.2739%" y="485" width="0.0291%" height="15" fill="rgb(248,109,41)" fg:x="37463" fg:w="36"/><text x="30.5239%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (36 samples, 0.03%)</title><rect x="30.2739%" y="469" width="0.0291%" height="15" fill="rgb(238,23,50)" fg:x="37463" fg:w="36"/><text x="30.5239%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (36 samples, 0.03%)</title><rect x="30.2739%" y="453" width="0.0291%" height="15" fill="rgb(211,48,49)" fg:x="37463" fg:w="36"/><text x="30.5239%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (36 samples, 0.03%)</title><rect x="30.2739%" y="437" width="0.0291%" height="15" fill="rgb(223,36,21)" fg:x="37463" fg:w="36"/><text x="30.5239%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (26 samples, 0.02%)</title><rect x="30.2819%" y="421" width="0.0210%" height="15" fill="rgb(207,123,46)" fg:x="37473" fg:w="26"/><text x="30.5319%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (25 samples, 0.02%)</title><rect x="30.2828%" y="405" width="0.0202%" height="15" fill="rgb(240,218,32)" fg:x="37474" fg:w="25"/><text x="30.5328%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (25 samples, 0.02%)</title><rect x="30.2828%" y="389" width="0.0202%" height="15" fill="rgb(252,5,43)" fg:x="37474" fg:w="25"/><text x="30.5328%" y="399.50"></text></g><g><title>core::alloc::layout::Layout::array (17 samples, 0.01%)</title><rect x="30.2892%" y="373" width="0.0137%" height="15" fill="rgb(252,84,19)" fg:x="37482" fg:w="17"/><text x="30.5392%" y="383.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_ptr (21 samples, 0.02%)</title><rect x="30.3943%" y="405" width="0.0170%" height="15" fill="rgb(243,152,39)" fg:x="37612" fg:w="21"/><text x="30.6443%" y="415.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (101 samples, 0.08%)</title><rect x="30.3943%" y="421" width="0.0816%" height="15" fill="rgb(234,160,15)" fg:x="37612" fg:w="101"/><text x="30.6443%" y="431.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (80 samples, 0.06%)</title><rect x="30.4112%" y="405" width="0.0646%" height="15" fill="rgb(237,34,20)" fg:x="37633" fg:w="80"/><text x="30.6612%" y="415.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (80 samples, 0.06%)</title><rect x="30.4112%" y="389" width="0.0646%" height="15" fill="rgb(229,97,13)" fg:x="37633" fg:w="80"/><text x="30.6612%" y="399.50"></text></g><g><title>alloc::alloc::exchange_malloc (68 samples, 0.05%)</title><rect x="30.4209%" y="373" width="0.0550%" height="15" fill="rgb(234,71,50)" fg:x="37645" fg:w="68"/><text x="30.6709%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (66 samples, 0.05%)</title><rect x="30.4226%" y="357" width="0.0533%" height="15" fill="rgb(253,155,4)" fg:x="37647" fg:w="66"/><text x="30.6726%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (66 samples, 0.05%)</title><rect x="30.4226%" y="341" width="0.0533%" height="15" fill="rgb(222,185,37)" fg:x="37647" fg:w="66"/><text x="30.6726%" y="351.50"></text></g><g><title>alloc::alloc::alloc (66 samples, 0.05%)</title><rect x="30.4226%" y="325" width="0.0533%" height="15" fill="rgb(251,177,13)" fg:x="37647" fg:w="66"/><text x="30.6726%" y="335.50"></text></g><g><title>__rg_alloc (66 samples, 0.05%)</title><rect x="30.4226%" y="309" width="0.0533%" height="15" fill="rgb(250,179,40)" fg:x="37647" fg:w="66"/><text x="30.6726%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (66 samples, 0.05%)</title><rect x="30.4226%" y="293" width="0.0533%" height="15" fill="rgb(242,44,2)" fg:x="37647" fg:w="66"/><text x="30.6726%" y="303.50"></text></g><g><title>sn_rust_alloc (66 samples, 0.05%)</title><rect x="30.4226%" y="277" width="0.0533%" height="15" fill="rgb(216,177,13)" fg:x="37647" fg:w="66"/><text x="30.6726%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (20 samples, 0.02%)</title><rect x="30.5260%" y="373" width="0.0162%" height="15" fill="rgb(216,106,43)" fg:x="37775" fg:w="20"/><text x="30.7760%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (20 samples, 0.02%)</title><rect x="30.5260%" y="357" width="0.0162%" height="15" fill="rgb(216,183,2)" fg:x="37775" fg:w="20"/><text x="30.7760%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (189 samples, 0.15%)</title><rect x="30.5260%" y="389" width="0.1527%" height="15" fill="rgb(249,75,3)" fg:x="37775" fg:w="189"/><text x="30.7760%" y="399.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (169 samples, 0.14%)</title><rect x="30.5422%" y="373" width="0.1366%" height="15" fill="rgb(219,67,39)" fg:x="37795" fg:w="169"/><text x="30.7922%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (169 samples, 0.14%)</title><rect x="30.5422%" y="357" width="0.1366%" height="15" fill="rgb(253,228,2)" fg:x="37795" fg:w="169"/><text x="30.7922%" y="367.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (1,175 samples, 0.95%)</title><rect x="30.3725%" y="501" width="0.9495%" height="15" fill="rgb(235,138,27)" fg:x="37585" fg:w="1175"/><text x="30.6225%" y="511.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (1,165 samples, 0.94%)</title><rect x="30.3805%" y="485" width="0.9414%" height="15" fill="rgb(236,97,51)" fg:x="37595" fg:w="1165"/><text x="30.6305%" y="495.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (1,165 samples, 0.94%)</title><rect x="30.3805%" y="469" width="0.9414%" height="15" fill="rgb(240,80,30)" fg:x="37595" fg:w="1165"/><text x="30.6305%" y="479.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (1,148 samples, 0.93%)</title><rect x="30.3943%" y="453" width="0.9277%" height="15" fill="rgb(230,178,19)" fg:x="37612" fg:w="1148"/><text x="30.6443%" y="463.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (1,148 samples, 0.93%)</title><rect x="30.3943%" y="437" width="0.9277%" height="15" fill="rgb(210,190,27)" fg:x="37612" fg:w="1148"/><text x="30.6443%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (1,047 samples, 0.85%)</title><rect x="30.4759%" y="421" width="0.8461%" height="15" fill="rgb(222,107,31)" fg:x="37713" fg:w="1047"/><text x="30.7259%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (1,047 samples, 0.85%)</title><rect x="30.4759%" y="405" width="0.8461%" height="15" fill="rgb(216,127,34)" fg:x="37713" fg:w="1047"/><text x="30.7259%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::buckets (796 samples, 0.64%)</title><rect x="30.6787%" y="389" width="0.6432%" height="15" fill="rgb(234,116,52)" fg:x="37964" fg:w="796"/><text x="30.9287%" y="399.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (72 samples, 0.06%)</title><rect x="31.6581%" y="261" width="0.0582%" height="15" fill="rgb(222,124,15)" fg:x="39176" fg:w="72"/><text x="31.9081%" y="271.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (190 samples, 0.15%)</title><rect x="31.5693%" y="469" width="0.1535%" height="15" fill="rgb(231,179,28)" fg:x="39066" fg:w="190"/><text x="31.8193%" y="479.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (190 samples, 0.15%)</title><rect x="31.5693%" y="453" width="0.1535%" height="15" fill="rgb(226,93,45)" fg:x="39066" fg:w="190"/><text x="31.8193%" y="463.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (190 samples, 0.15%)</title><rect x="31.5693%" y="437" width="0.1535%" height="15" fill="rgb(215,8,51)" fg:x="39066" fg:w="190"/><text x="31.8193%" y="447.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (181 samples, 0.15%)</title><rect x="31.5765%" y="421" width="0.1463%" height="15" fill="rgb(223,106,5)" fg:x="39075" fg:w="181"/><text x="31.8265%" y="431.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (181 samples, 0.15%)</title><rect x="31.5765%" y="405" width="0.1463%" height="15" fill="rgb(250,191,5)" fg:x="39075" fg:w="181"/><text x="31.8265%" y="415.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (170 samples, 0.14%)</title><rect x="31.5854%" y="389" width="0.1374%" height="15" fill="rgb(242,132,44)" fg:x="39086" fg:w="170"/><text x="31.8354%" y="399.50"></text></g><g><title>alloc::alloc::exchange_malloc (140 samples, 0.11%)</title><rect x="31.6097%" y="373" width="0.1131%" height="15" fill="rgb(251,152,29)" fg:x="39116" fg:w="140"/><text x="31.8597%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (140 samples, 0.11%)</title><rect x="31.6097%" y="357" width="0.1131%" height="15" fill="rgb(218,179,5)" fg:x="39116" fg:w="140"/><text x="31.8597%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (140 samples, 0.11%)</title><rect x="31.6097%" y="341" width="0.1131%" height="15" fill="rgb(227,67,19)" fg:x="39116" fg:w="140"/><text x="31.8597%" y="351.50"></text></g><g><title>alloc::alloc::alloc (140 samples, 0.11%)</title><rect x="31.6097%" y="325" width="0.1131%" height="15" fill="rgb(233,119,31)" fg:x="39116" fg:w="140"/><text x="31.8597%" y="335.50"></text></g><g><title>__rg_alloc (140 samples, 0.11%)</title><rect x="31.6097%" y="309" width="0.1131%" height="15" fill="rgb(241,120,22)" fg:x="39116" fg:w="140"/><text x="31.8597%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (140 samples, 0.11%)</title><rect x="31.6097%" y="293" width="0.1131%" height="15" fill="rgb(224,102,30)" fg:x="39116" fg:w="140"/><text x="31.8597%" y="303.50"></text></g><g><title>sn_rust_alloc (123 samples, 0.10%)</title><rect x="31.6234%" y="277" width="0.0994%" height="15" fill="rgb(210,164,37)" fg:x="39133" fg:w="123"/><text x="31.8734%" y="287.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;::sabi_erased_mut (20 samples, 0.02%)</title><rect x="31.7697%" y="421" width="0.0162%" height="15" fill="rgb(226,191,16)" fg:x="39314" fg:w="20"/><text x="32.0197%" y="431.50"></text></g><g><title>abi_stable::erased_types::iterator::next (45 samples, 0.04%)</title><rect x="31.7858%" y="421" width="0.0364%" height="15" fill="rgb(214,40,45)" fg:x="39334" fg:w="45"/><text x="32.0358%" y="431.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (25 samples, 0.02%)</title><rect x="31.8020%" y="405" width="0.0202%" height="15" fill="rgb(244,29,26)" fg:x="39354" fg:w="25"/><text x="32.0520%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.02%)</title><rect x="31.8020%" y="389" width="0.0202%" height="15" fill="rgb(216,16,5)" fg:x="39354" fg:w="25"/><text x="32.0520%" y="399.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.02%)</title><rect x="31.8020%" y="373" width="0.0202%" height="15" fill="rgb(249,76,35)" fg:x="39354" fg:w="25"/><text x="32.0520%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.02%)</title><rect x="31.8020%" y="357" width="0.0202%" height="15" fill="rgb(207,11,44)" fg:x="39354" fg:w="25"/><text x="32.0520%" y="367.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (14 samples, 0.01%)</title><rect x="31.8222%" y="421" width="0.0113%" height="15" fill="rgb(228,190,49)" fg:x="39379" fg:w="14"/><text x="32.0722%" y="431.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (14 samples, 0.01%)</title><rect x="31.8222%" y="405" width="0.0113%" height="15" fill="rgb(214,173,12)" fg:x="39379" fg:w="14"/><text x="32.0722%" y="415.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (14 samples, 0.01%)</title><rect x="31.8222%" y="389" width="0.0113%" height="15" fill="rgb(218,26,35)" fg:x="39379" fg:w="14"/><text x="32.0722%" y="399.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (14 samples, 0.01%)</title><rect x="31.8222%" y="373" width="0.0113%" height="15" fill="rgb(220,200,19)" fg:x="39379" fg:w="14"/><text x="32.0722%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (93 samples, 0.08%)</title><rect x="31.7592%" y="453" width="0.0752%" height="15" fill="rgb(239,95,49)" fg:x="39301" fg:w="93"/><text x="32.0092%" y="463.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (93 samples, 0.08%)</title><rect x="31.7592%" y="437" width="0.0752%" height="15" fill="rgb(235,85,53)" fg:x="39301" fg:w="93"/><text x="32.0092%" y="447.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint (18 samples, 0.01%)</title><rect x="31.8448%" y="421" width="0.0145%" height="15" fill="rgb(233,133,31)" fg:x="39407" fg:w="18"/><text x="32.0948%" y="431.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint::{{closure}} (17 samples, 0.01%)</title><rect x="31.8456%" y="405" width="0.0137%" height="15" fill="rgb(218,25,20)" fg:x="39408" fg:w="17"/><text x="32.0956%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (43 samples, 0.03%)</title><rect x="31.8343%" y="453" width="0.0347%" height="15" fill="rgb(252,210,38)" fg:x="39394" fg:w="43"/><text x="32.0843%" y="463.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (43 samples, 0.03%)</title><rect x="31.8343%" y="437" width="0.0347%" height="15" fill="rgb(242,134,21)" fg:x="39394" fg:w="43"/><text x="32.0843%" y="447.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (14 samples, 0.01%)</title><rect x="31.8691%" y="453" width="0.0113%" height="15" fill="rgb(213,28,48)" fg:x="39437" fg:w="14"/><text x="32.1191%" y="463.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (14 samples, 0.01%)</title><rect x="31.8691%" y="437" width="0.0113%" height="15" fill="rgb(250,196,2)" fg:x="39437" fg:w="14"/><text x="32.1191%" y="447.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (14 samples, 0.01%)</title><rect x="31.8691%" y="421" width="0.0113%" height="15" fill="rgb(227,5,17)" fg:x="39437" fg:w="14"/><text x="32.1191%" y="431.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (23 samples, 0.02%)</title><rect x="31.9022%" y="341" width="0.0186%" height="15" fill="rgb(221,226,24)" fg:x="39478" fg:w="23"/><text x="32.1522%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;core::iter::adapters::map::Map&lt;hashbrown::map::Iter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;tremor_value::value::Value&gt;&gt;&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="31.9095%" y="325" width="0.0113%" height="15" fill="rgb(211,5,48)" fg:x="39487" fg:w="14"/><text x="32.1595%" y="335.50"></text></g><g><title>alloc::alloc::box_free (14 samples, 0.01%)</title><rect x="31.9095%" y="309" width="0.0113%" height="15" fill="rgb(219,150,6)" fg:x="39487" fg:w="14"/><text x="32.1595%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.01%)</title><rect x="31.9095%" y="293" width="0.0113%" height="15" fill="rgb(251,46,16)" fg:x="39487" fg:w="14"/><text x="32.1595%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.01%)</title><rect x="31.9095%" y="277" width="0.0113%" height="15" fill="rgb(220,204,40)" fg:x="39487" fg:w="14"/><text x="32.1595%" y="287.50"></text></g><g><title>__rg_dealloc (14 samples, 0.01%)</title><rect x="31.9095%" y="261" width="0.0113%" height="15" fill="rgb(211,85,2)" fg:x="39487" fg:w="14"/><text x="32.1595%" y="271.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (14 samples, 0.01%)</title><rect x="31.9095%" y="245" width="0.0113%" height="15" fill="rgb(229,17,7)" fg:x="39487" fg:w="14"/><text x="32.1595%" y="255.50"></text></g><g><title>sn_rust_dealloc (167 samples, 0.13%)</title><rect x="31.9208%" y="341" width="0.1350%" height="15" fill="rgb(239,72,28)" fg:x="39501" fg:w="167"/><text x="32.1708%" y="351.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::ContraflowData as core::convert::From&lt;&amp;tremor_pipeline::event::Event&gt;&gt;::from (2,285 samples, 1.85%)</title><rect x="30.2108%" y="549" width="1.8465%" height="15" fill="rgb(230,47,54)" fg:x="37385" fg:w="2285"/><text x="30.4608%" y="559.50">&lt;..</text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (2,171 samples, 1.75%)</title><rect x="30.3030%" y="533" width="1.7544%" height="15" fill="rgb(214,50,8)" fg:x="37499" fg:w="2171"/><text x="30.5530%" y="543.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (2,091 samples, 1.69%)</title><rect x="30.3676%" y="517" width="1.6897%" height="15" fill="rgb(216,198,43)" fg:x="37579" fg:w="2091"/><text x="30.6176%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (910 samples, 0.74%)</title><rect x="31.3220%" y="501" width="0.7354%" height="15" fill="rgb(234,20,35)" fg:x="38760" fg:w="910"/><text x="31.5720%" y="511.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (617 samples, 0.50%)</title><rect x="31.5587%" y="485" width="0.4986%" height="15" fill="rgb(254,45,19)" fg:x="39053" fg:w="617"/><text x="31.8087%" y="495.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (414 samples, 0.33%)</title><rect x="31.7228%" y="469" width="0.3346%" height="15" fill="rgb(219,14,44)" fg:x="39256" fg:w="414"/><text x="31.9728%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (219 samples, 0.18%)</title><rect x="31.8804%" y="453" width="0.1770%" height="15" fill="rgb(217,220,26)" fg:x="39451" fg:w="219"/><text x="32.1304%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (219 samples, 0.18%)</title><rect x="31.8804%" y="437" width="0.1770%" height="15" fill="rgb(213,158,28)" fg:x="39451" fg:w="219"/><text x="32.1304%" y="447.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (219 samples, 0.18%)</title><rect x="31.8804%" y="421" width="0.1770%" height="15" fill="rgb(252,51,52)" fg:x="39451" fg:w="219"/><text x="32.1304%" y="431.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (206 samples, 0.17%)</title><rect x="31.8909%" y="405" width="0.1665%" height="15" fill="rgb(246,89,16)" fg:x="39464" fg:w="206"/><text x="32.1409%" y="415.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (202 samples, 0.16%)</title><rect x="31.8941%" y="389" width="0.1632%" height="15" fill="rgb(216,158,49)" fg:x="39468" fg:w="202"/><text x="32.1441%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (202 samples, 0.16%)</title><rect x="31.8941%" y="373" width="0.1632%" height="15" fill="rgb(236,107,19)" fg:x="39468" fg:w="202"/><text x="32.1441%" y="383.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (202 samples, 0.16%)</title><rect x="31.8941%" y="357" width="0.1632%" height="15" fill="rgb(228,185,30)" fg:x="39468" fg:w="202"/><text x="32.1441%" y="367.50"></text></g><g><title>[libc-2.31.so] (1,826 samples, 1.48%)</title><rect x="32.0573%" y="549" width="1.4756%" height="15" fill="rgb(246,134,8)" fg:x="39670" fg:w="1826"/><text x="32.3073%" y="559.50"></text></g><g><title>sn_rust_dealloc (293 samples, 0.24%)</title><rect x="33.5531%" y="389" width="0.2368%" height="15" fill="rgb(214,143,50)" fg:x="41521" fg:w="293"/><text x="33.8031%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (322 samples, 0.26%)</title><rect x="33.5346%" y="549" width="0.2602%" height="15" fill="rgb(228,75,8)" fg:x="41498" fg:w="322"/><text x="33.7846%" y="559.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (322 samples, 0.26%)</title><rect x="33.5346%" y="533" width="0.2602%" height="15" fill="rgb(207,175,4)" fg:x="41498" fg:w="322"/><text x="33.7846%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (309 samples, 0.25%)</title><rect x="33.5451%" y="517" width="0.2497%" height="15" fill="rgb(205,108,24)" fg:x="41511" fg:w="309"/><text x="33.7951%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (309 samples, 0.25%)</title><rect x="33.5451%" y="501" width="0.2497%" height="15" fill="rgb(244,120,49)" fg:x="41511" fg:w="309"/><text x="33.7951%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (309 samples, 0.25%)</title><rect x="33.5451%" y="485" width="0.2497%" height="15" fill="rgb(223,47,38)" fg:x="41511" fg:w="309"/><text x="33.7951%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (309 samples, 0.25%)</title><rect x="33.5451%" y="469" width="0.2497%" height="15" fill="rgb(229,179,11)" fg:x="41511" fg:w="309"/><text x="33.7951%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (309 samples, 0.25%)</title><rect x="33.5451%" y="453" width="0.2497%" height="15" fill="rgb(231,122,1)" fg:x="41511" fg:w="309"/><text x="33.7951%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (309 samples, 0.25%)</title><rect x="33.5451%" y="437" width="0.2497%" height="15" fill="rgb(245,119,9)" fg:x="41511" fg:w="309"/><text x="33.7951%" y="447.50"></text></g><g><title>__rg_dealloc (309 samples, 0.25%)</title><rect x="33.5451%" y="421" width="0.2497%" height="15" fill="rgb(241,163,25)" fg:x="41511" fg:w="309"/><text x="33.7951%" y="431.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (309 samples, 0.25%)</title><rect x="33.5451%" y="405" width="0.2497%" height="15" fill="rgb(217,214,3)" fg:x="41511" fg:w="309"/><text x="33.7951%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt;&gt; (51 samples, 0.04%)</title><rect x="33.7948%" y="549" width="0.0412%" height="15" fill="rgb(240,86,28)" fg:x="41820" fg:w="51"/><text x="34.0448%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt; (51 samples, 0.04%)</title><rect x="33.7948%" y="533" width="0.0412%" height="15" fill="rgb(215,47,9)" fg:x="41820" fg:w="51"/><text x="34.0448%" y="543.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (86 samples, 0.07%)</title><rect x="33.8796%" y="533" width="0.0695%" height="15" fill="rgb(252,25,45)" fg:x="41925" fg:w="86"/><text x="34.1296%" y="543.50"></text></g><g><title>core::time::Duration::as_nanos (88 samples, 0.07%)</title><rect x="33.9491%" y="533" width="0.0711%" height="15" fill="rgb(251,164,9)" fg:x="42011" fg:w="88"/><text x="34.1991%" y="543.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (327 samples, 0.26%)</title><rect x="34.0202%" y="517" width="0.2642%" height="15" fill="rgb(233,194,0)" fg:x="42099" fg:w="327"/><text x="34.2702%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (125 samples, 0.10%)</title><rect x="34.3863%" y="485" width="0.1010%" height="15" fill="rgb(249,111,24)" fg:x="42552" fg:w="125"/><text x="34.6363%" y="495.50"></text></g><g><title>core::cmp::PartialOrd::ge (125 samples, 0.10%)</title><rect x="34.3863%" y="469" width="0.1010%" height="15" fill="rgb(250,223,3)" fg:x="42552" fg:w="125"/><text x="34.6363%" y="479.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (125 samples, 0.10%)</title><rect x="34.3863%" y="453" width="0.1010%" height="15" fill="rgb(236,178,37)" fg:x="42552" fg:w="125"/><text x="34.6363%" y="463.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (125 samples, 0.10%)</title><rect x="34.3863%" y="437" width="0.1010%" height="15" fill="rgb(241,158,50)" fg:x="42552" fg:w="125"/><text x="34.6363%" y="447.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (125 samples, 0.10%)</title><rect x="34.3863%" y="421" width="0.1010%" height="15" fill="rgb(213,121,41)" fg:x="42552" fg:w="125"/><text x="34.6363%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (61 samples, 0.05%)</title><rect x="34.4380%" y="405" width="0.0493%" height="15" fill="rgb(240,92,3)" fg:x="42616" fg:w="61"/><text x="34.6880%" y="415.50"></text></g><g><title>std::time::SystemTime::duration_since (639 samples, 0.52%)</title><rect x="34.0202%" y="533" width="0.5164%" height="15" fill="rgb(205,123,3)" fg:x="42099" fg:w="639"/><text x="34.2702%" y="543.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (312 samples, 0.25%)</title><rect x="34.2845%" y="517" width="0.2521%" height="15" fill="rgb(205,97,47)" fg:x="42426" fg:w="312"/><text x="34.5345%" y="527.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (312 samples, 0.25%)</title><rect x="34.2845%" y="501" width="0.2521%" height="15" fill="rgb(247,152,14)" fg:x="42426" fg:w="312"/><text x="34.5345%" y="511.50"></text></g><g><title>core::time::Duration::new (61 samples, 0.05%)</title><rect x="34.4873%" y="485" width="0.0493%" height="15" fill="rgb(248,195,53)" fg:x="42677" fg:w="61"/><text x="34.7373%" y="495.50"></text></g><g><title>tremor_common::time::nanotime (2,447 samples, 1.98%)</title><rect x="33.8360%" y="549" width="1.9774%" height="15" fill="rgb(226,201,16)" fg:x="41871" fg:w="2447"/><text x="34.0860%" y="559.50">t..</text></g><g><title>std::time::SystemTime::now (1,580 samples, 1.28%)</title><rect x="34.5366%" y="533" width="1.2768%" height="15" fill="rgb(205,98,0)" fg:x="42738" fg:w="1580"/><text x="34.7866%" y="543.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (1,580 samples, 1.28%)</title><rect x="34.5366%" y="517" width="1.2768%" height="15" fill="rgb(214,191,48)" fg:x="42738" fg:w="1580"/><text x="34.7866%" y="527.50"></text></g><g><title>std::sys::unix::time::inner::now (1,580 samples, 1.28%)</title><rect x="34.5366%" y="501" width="1.2768%" height="15" fill="rgb(237,112,39)" fg:x="42738" fg:w="1580"/><text x="34.7866%" y="511.50"></text></g><g><title>__clock_gettime (1,289 samples, 1.04%)</title><rect x="34.7718%" y="485" width="1.0416%" height="15" fill="rgb(247,203,27)" fg:x="43029" fg:w="1289"/><text x="35.0218%" y="495.50"></text></g><g><title>__vdso_clock_gettime (1,227 samples, 0.99%)</title><rect x="34.8219%" y="469" width="0.9915%" height="15" fill="rgb(235,124,28)" fg:x="43091" fg:w="1227"/><text x="35.0719%" y="479.50"></text></g><g><title>[[vdso]] (1,051 samples, 0.85%)</title><rect x="34.9641%" y="453" width="0.8493%" height="15" fill="rgb(208,207,46)" fg:x="43267" fg:w="1051"/><text x="35.2141%" y="463.50"></text></g><g><title>abi_stable::erased_types::iterator::next (38 samples, 0.03%)</title><rect x="35.8538%" y="437" width="0.0307%" height="15" fill="rgb(234,176,4)" fg:x="44368" fg:w="38"/><text x="36.1038%" y="447.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (20 samples, 0.02%)</title><rect x="35.8683%" y="421" width="0.0162%" height="15" fill="rgb(230,133,28)" fg:x="44386" fg:w="20"/><text x="36.1183%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.02%)</title><rect x="35.8683%" y="405" width="0.0162%" height="15" fill="rgb(211,137,40)" fg:x="44386" fg:w="20"/><text x="36.1183%" y="415.50"></text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.02%)</title><rect x="35.8683%" y="389" width="0.0162%" height="15" fill="rgb(254,35,13)" fg:x="44386" fg:w="20"/><text x="36.1183%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.02%)</title><rect x="35.8683%" y="373" width="0.0162%" height="15" fill="rgb(225,49,51)" fg:x="44386" fg:w="20"/><text x="36.1183%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.02%)</title><rect x="35.8683%" y="357" width="0.0162%" height="15" fill="rgb(251,10,15)" fg:x="44386" fg:w="20"/><text x="36.1183%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (77 samples, 0.06%)</title><rect x="35.8393%" y="501" width="0.0622%" height="15" fill="rgb(228,207,15)" fg:x="44350" fg:w="77"/><text x="36.0893%" y="511.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (77 samples, 0.06%)</title><rect x="35.8393%" y="485" width="0.0622%" height="15" fill="rgb(241,99,19)" fg:x="44350" fg:w="77"/><text x="36.0893%" y="495.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (77 samples, 0.06%)</title><rect x="35.8393%" y="469" width="0.0622%" height="15" fill="rgb(207,104,49)" fg:x="44350" fg:w="77"/><text x="36.0893%" y="479.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (77 samples, 0.06%)</title><rect x="35.8393%" y="453" width="0.0622%" height="15" fill="rgb(234,99,18)" fg:x="44350" fg:w="77"/><text x="36.0893%" y="463.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (21 samples, 0.02%)</title><rect x="35.8845%" y="437" width="0.0170%" height="15" fill="rgb(213,191,49)" fg:x="44406" fg:w="21"/><text x="36.1345%" y="447.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (21 samples, 0.02%)</title><rect x="35.8845%" y="421" width="0.0170%" height="15" fill="rgb(210,226,19)" fg:x="44406" fg:w="21"/><text x="36.1345%" y="431.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint (23 samples, 0.02%)</title><rect x="35.9160%" y="437" width="0.0186%" height="15" fill="rgb(229,97,18)" fg:x="44445" fg:w="23"/><text x="36.1660%" y="447.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint::{{closure}} (16 samples, 0.01%)</title><rect x="35.9217%" y="421" width="0.0129%" height="15" fill="rgb(211,167,15)" fg:x="44452" fg:w="16"/><text x="36.1717%" y="431.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (15 samples, 0.01%)</title><rect x="35.9346%" y="405" width="0.0121%" height="15" fill="rgb(210,169,34)" fg:x="44468" fg:w="15"/><text x="36.1846%" y="415.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (15 samples, 0.01%)</title><rect x="35.9346%" y="389" width="0.0121%" height="15" fill="rgb(241,121,31)" fg:x="44468" fg:w="15"/><text x="36.1846%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (72 samples, 0.06%)</title><rect x="35.9015%" y="501" width="0.0582%" height="15" fill="rgb(232,40,11)" fg:x="44427" fg:w="72"/><text x="36.1515%" y="511.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::size_hint (72 samples, 0.06%)</title><rect x="35.9015%" y="485" width="0.0582%" height="15" fill="rgb(205,86,26)" fg:x="44427" fg:w="72"/><text x="36.1515%" y="495.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (72 samples, 0.06%)</title><rect x="35.9015%" y="469" width="0.0582%" height="15" fill="rgb(231,126,28)" fg:x="44427" fg:w="72"/><text x="36.1515%" y="479.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (72 samples, 0.06%)</title><rect x="35.9015%" y="453" width="0.0582%" height="15" fill="rgb(219,221,18)" fg:x="44427" fg:w="72"/><text x="36.1515%" y="463.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (31 samples, 0.03%)</title><rect x="35.9346%" y="437" width="0.0251%" height="15" fill="rgb(211,40,0)" fg:x="44468" fg:w="31"/><text x="36.1846%" y="447.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (31 samples, 0.03%)</title><rect x="35.9346%" y="421" width="0.0251%" height="15" fill="rgb(239,85,43)" fg:x="44468" fg:w="31"/><text x="36.1846%" y="431.50"></text></g><g><title>abi_stable::erased_types::vtable::_::&lt;impl abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;&gt;::_iter (16 samples, 0.01%)</title><rect x="35.9467%" y="405" width="0.0129%" height="15" fill="rgb(231,55,21)" fg:x="44483" fg:w="16"/><text x="36.1967%" y="415.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;abi_stable::std_types::tuple::Tuple2&lt;K,V&gt;&gt;&gt;::extend (218 samples, 0.18%)</title><rect x="35.8134%" y="533" width="0.1762%" height="15" fill="rgb(225,184,43)" fg:x="44318" fg:w="218"/><text x="36.0634%" y="543.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (210 samples, 0.17%)</title><rect x="35.8199%" y="517" width="0.1697%" height="15" fill="rgb(251,158,41)" fg:x="44326" fg:w="210"/><text x="36.0699%" y="527.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (37 samples, 0.03%)</title><rect x="35.9597%" y="501" width="0.0299%" height="15" fill="rgb(234,159,37)" fg:x="44499" fg:w="37"/><text x="36.2097%" y="511.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (32 samples, 0.03%)</title><rect x="35.9637%" y="485" width="0.0259%" height="15" fill="rgb(216,204,22)" fg:x="44504" fg:w="32"/><text x="36.2137%" y="495.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (32 samples, 0.03%)</title><rect x="35.9637%" y="469" width="0.0259%" height="15" fill="rgb(214,17,3)" fg:x="44504" fg:w="32"/><text x="36.2137%" y="479.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (25 samples, 0.02%)</title><rect x="35.9694%" y="453" width="0.0202%" height="15" fill="rgb(212,111,17)" fg:x="44511" fg:w="25"/><text x="36.2194%" y="463.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (25 samples, 0.02%)</title><rect x="35.9694%" y="437" width="0.0202%" height="15" fill="rgb(221,157,24)" fg:x="44511" fg:w="25"/><text x="36.2194%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (25 samples, 0.02%)</title><rect x="35.9694%" y="421" width="0.0202%" height="15" fill="rgb(252,16,13)" fg:x="44511" fg:w="25"/><text x="36.2194%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (25 samples, 0.02%)</title><rect x="35.9694%" y="405" width="0.0202%" height="15" fill="rgb(221,62,2)" fg:x="44511" fg:w="25"/><text x="36.2194%" y="415.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (32 samples, 0.03%)</title><rect x="36.0154%" y="453" width="0.0259%" height="15" fill="rgb(247,87,22)" fg:x="44568" fg:w="32"/><text x="36.2654%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (32 samples, 0.03%)</title><rect x="36.0154%" y="437" width="0.0259%" height="15" fill="rgb(215,73,9)" fg:x="44568" fg:w="32"/><text x="36.2654%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (18 samples, 0.01%)</title><rect x="36.0267%" y="421" width="0.0145%" height="15" fill="rgb(207,175,33)" fg:x="44582" fg:w="18"/><text x="36.2767%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (18 samples, 0.01%)</title><rect x="36.0267%" y="405" width="0.0145%" height="15" fill="rgb(243,129,54)" fg:x="44582" fg:w="18"/><text x="36.2767%" y="415.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (15 samples, 0.01%)</title><rect x="36.2158%" y="293" width="0.0121%" height="15" fill="rgb(227,119,45)" fg:x="44816" fg:w="15"/><text x="36.4658%" y="303.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (234 samples, 0.19%)</title><rect x="36.0413%" y="453" width="0.1891%" height="15" fill="rgb(205,109,36)" fg:x="44600" fg:w="234"/><text x="36.2913%" y="463.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (234 samples, 0.19%)</title><rect x="36.0413%" y="437" width="0.1891%" height="15" fill="rgb(205,6,39)" fg:x="44600" fg:w="234"/><text x="36.2913%" y="447.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (210 samples, 0.17%)</title><rect x="36.0607%" y="421" width="0.1697%" height="15" fill="rgb(221,32,16)" fg:x="44624" fg:w="210"/><text x="36.3107%" y="431.50"></text></g><g><title>alloc::alloc::exchange_malloc (178 samples, 0.14%)</title><rect x="36.0865%" y="405" width="0.1438%" height="15" fill="rgb(228,144,50)" fg:x="44656" fg:w="178"/><text x="36.3365%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (171 samples, 0.14%)</title><rect x="36.0922%" y="389" width="0.1382%" height="15" fill="rgb(229,201,53)" fg:x="44663" fg:w="171"/><text x="36.3422%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (171 samples, 0.14%)</title><rect x="36.0922%" y="373" width="0.1382%" height="15" fill="rgb(249,153,27)" fg:x="44663" fg:w="171"/><text x="36.3422%" y="383.50"></text></g><g><title>alloc::alloc::alloc (171 samples, 0.14%)</title><rect x="36.0922%" y="357" width="0.1382%" height="15" fill="rgb(227,106,25)" fg:x="44663" fg:w="171"/><text x="36.3422%" y="367.50"></text></g><g><title>__rg_alloc (171 samples, 0.14%)</title><rect x="36.0922%" y="341" width="0.1382%" height="15" fill="rgb(230,65,29)" fg:x="44663" fg:w="171"/><text x="36.3422%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (171 samples, 0.14%)</title><rect x="36.0922%" y="325" width="0.1382%" height="15" fill="rgb(221,57,46)" fg:x="44663" fg:w="171"/><text x="36.3422%" y="335.50"></text></g><g><title>sn_rust_alloc (166 samples, 0.13%)</title><rect x="36.0962%" y="309" width="0.1341%" height="15" fill="rgb(229,161,17)" fg:x="44668" fg:w="166"/><text x="36.3462%" y="319.50"></text></g><g><title>abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt;::new (19 samples, 0.02%)</title><rect x="36.2304%" y="453" width="0.0154%" height="15" fill="rgb(222,213,11)" fg:x="44834" fg:w="19"/><text x="36.4804%" y="463.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (20 samples, 0.02%)</title><rect x="36.2627%" y="389" width="0.0162%" height="15" fill="rgb(235,35,13)" fg:x="44874" fg:w="20"/><text x="36.5127%" y="399.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::pointer_trait::OwnedPointer for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop_allocation (113 samples, 0.09%)</title><rect x="36.2457%" y="405" width="0.0913%" height="15" fill="rgb(233,158,34)" fg:x="44853" fg:w="113"/><text x="36.4957%" y="415.50"></text></g><g><title>sn_rust_dealloc (72 samples, 0.06%)</title><rect x="36.2789%" y="389" width="0.0582%" height="15" fill="rgb(215,151,48)" fg:x="44894" fg:w="72"/><text x="36.5289%" y="399.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (497 samples, 0.40%)</title><rect x="35.9896%" y="533" width="0.4016%" height="15" fill="rgb(229,84,14)" fg:x="44536" fg:w="497"/><text x="36.2396%" y="543.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (490 samples, 0.40%)</title><rect x="35.9952%" y="517" width="0.3960%" height="15" fill="rgb(229,68,14)" fg:x="44543" fg:w="490"/><text x="36.2452%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val (486 samples, 0.39%)</title><rect x="35.9984%" y="501" width="0.3927%" height="15" fill="rgb(243,106,26)" fg:x="44547" fg:w="486"/><text x="36.2484%" y="511.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val::{{closure}} (483 samples, 0.39%)</title><rect x="36.0009%" y="485" width="0.3903%" height="15" fill="rgb(206,45,38)" fg:x="44550" fg:w="483"/><text x="36.2509%" y="495.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val::{{closure}} (483 samples, 0.39%)</title><rect x="36.0009%" y="469" width="0.3903%" height="15" fill="rgb(226,6,15)" fg:x="44550" fg:w="483"/><text x="36.2509%" y="479.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (180 samples, 0.15%)</title><rect x="36.2457%" y="453" width="0.1455%" height="15" fill="rgb(232,22,54)" fg:x="44853" fg:w="180"/><text x="36.4957%" y="463.50"></text></g><g><title>core::ops::function::FnOnce::call_once (180 samples, 0.15%)</title><rect x="36.2457%" y="437" width="0.1455%" height="15" fill="rgb(229,222,32)" fg:x="44853" fg:w="180"/><text x="36.4957%" y="447.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::into_inner (180 samples, 0.15%)</title><rect x="36.2457%" y="421" width="0.1455%" height="15" fill="rgb(228,62,29)" fg:x="44853" fg:w="180"/><text x="36.4957%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (67 samples, 0.05%)</title><rect x="36.3370%" y="405" width="0.0541%" height="15" fill="rgb(251,103,34)" fg:x="44966" fg:w="67"/><text x="36.5870%" y="415.50"></text></g><g><title>core::ptr::read (67 samples, 0.05%)</title><rect x="36.3370%" y="389" width="0.0541%" height="15" fill="rgb(233,12,30)" fg:x="44966" fg:w="67"/><text x="36.5870%" y="399.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (42 samples, 0.03%)</title><rect x="36.4219%" y="421" width="0.0339%" height="15" fill="rgb(238,52,0)" fg:x="45071" fg:w="42"/><text x="36.6719%" y="431.50"></text></g><g><title>sn_rust_dealloc (150 samples, 0.12%)</title><rect x="36.4558%" y="421" width="0.1212%" height="15" fill="rgb(223,98,5)" fg:x="45113" fg:w="150"/><text x="36.7058%" y="431.50"></text></g><g><title>tremor_pipeline::OpMeta::merge (948 samples, 0.77%)</title><rect x="35.8134%" y="549" width="0.7661%" height="15" fill="rgb(228,75,37)" fg:x="44318" fg:w="948"/><text x="36.0634%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (233 samples, 0.19%)</title><rect x="36.3912%" y="533" width="0.1883%" height="15" fill="rgb(205,115,49)" fg:x="45033" fg:w="233"/><text x="36.6412%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::ValIterInterface&lt;u32,u32&gt;&gt;&gt; (233 samples, 0.19%)</title><rect x="36.3912%" y="517" width="0.1883%" height="15" fill="rgb(250,154,43)" fg:x="45033" fg:w="233"/><text x="36.6412%" y="527.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (233 samples, 0.19%)</title><rect x="36.3912%" y="501" width="0.1883%" height="15" fill="rgb(226,43,29)" fg:x="45033" fg:w="233"/><text x="36.6412%" y="511.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (217 samples, 0.18%)</title><rect x="36.4041%" y="485" width="0.1754%" height="15" fill="rgb(249,228,39)" fg:x="45049" fg:w="217"/><text x="36.6541%" y="495.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (213 samples, 0.17%)</title><rect x="36.4073%" y="469" width="0.1721%" height="15" fill="rgb(216,79,43)" fg:x="45053" fg:w="213"/><text x="36.6573%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (213 samples, 0.17%)</title><rect x="36.4073%" y="453" width="0.1721%" height="15" fill="rgb(228,95,12)" fg:x="45053" fg:w="213"/><text x="36.6573%" y="463.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (213 samples, 0.17%)</title><rect x="36.4073%" y="437" width="0.1721%" height="15" fill="rgb(249,221,15)" fg:x="45053" fg:w="213"/><text x="36.6573%" y="447.50"></text></g><g><title>tremor_runtime::connectors::sink::handle_replies (22 samples, 0.02%)</title><rect x="36.5795%" y="549" width="0.0178%" height="15" fill="rgb(233,34,13)" fg:x="45266" fg:w="22"/><text x="36.8295%" y="559.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (21,171 samples, 17.11%)</title><rect x="19.5027%" y="565" width="17.1083%" height="15" fill="rgb(214,103,39)" fg:x="24134" fg:w="21171"/><text x="19.7527%" y="575.50">tremor_runtime::connectors..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (443 samples, 0.36%)</title><rect x="36.7637%" y="453" width="0.3580%" height="15" fill="rgb(251,126,39)" fg:x="45494" fg:w="443"/><text x="37.0137%" y="463.50"></text></g><g><title>core::ptr::read (417 samples, 0.34%)</title><rect x="36.7847%" y="437" width="0.3370%" height="15" fill="rgb(214,216,36)" fg:x="45520" fg:w="417"/><text x="37.0347%" y="447.50"></text></g><g><title>[libc-2.31.so] (408 samples, 0.33%)</title><rect x="36.7920%" y="421" width="0.3297%" height="15" fill="rgb(220,221,8)" fg:x="45529" fg:w="408"/><text x="37.0420%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (244 samples, 0.20%)</title><rect x="37.1257%" y="325" width="0.1972%" height="15" fill="rgb(240,216,3)" fg:x="45942" fg:w="244"/><text x="37.3757%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (244 samples, 0.20%)</title><rect x="37.1257%" y="309" width="0.1972%" height="15" fill="rgb(232,218,17)" fg:x="45942" fg:w="244"/><text x="37.3757%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (244 samples, 0.20%)</title><rect x="37.1257%" y="293" width="0.1972%" height="15" fill="rgb(229,163,45)" fg:x="45942" fg:w="244"/><text x="37.3757%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (243 samples, 0.20%)</title><rect x="37.1266%" y="277" width="0.1964%" height="15" fill="rgb(231,110,42)" fg:x="45943" fg:w="243"/><text x="37.3766%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (243 samples, 0.20%)</title><rect x="37.1266%" y="261" width="0.1964%" height="15" fill="rgb(208,170,48)" fg:x="45943" fg:w="243"/><text x="37.3766%" y="271.50"></text></g><g><title>alloc::alloc::alloc (243 samples, 0.20%)</title><rect x="37.1266%" y="245" width="0.1964%" height="15" fill="rgb(239,116,25)" fg:x="45943" fg:w="243"/><text x="37.3766%" y="255.50"></text></g><g><title>__rg_alloc (243 samples, 0.20%)</title><rect x="37.1266%" y="229" width="0.1964%" height="15" fill="rgb(219,200,50)" fg:x="45943" fg:w="243"/><text x="37.3766%" y="239.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (243 samples, 0.20%)</title><rect x="37.1266%" y="213" width="0.1964%" height="15" fill="rgb(245,200,0)" fg:x="45943" fg:w="243"/><text x="37.3766%" y="223.50"></text></g><g><title>sn_rust_alloc (236 samples, 0.19%)</title><rect x="37.1322%" y="197" width="0.1907%" height="15" fill="rgb(245,119,33)" fg:x="45950" fg:w="236"/><text x="37.3822%" y="207.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (15 samples, 0.01%)</title><rect x="37.3108%" y="181" width="0.0121%" height="15" fill="rgb(231,125,12)" fg:x="46171" fg:w="15"/><text x="37.5608%" y="191.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (271 samples, 0.22%)</title><rect x="37.1257%" y="453" width="0.2190%" height="15" fill="rgb(216,96,41)" fg:x="45942" fg:w="271"/><text x="37.3757%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (271 samples, 0.22%)</title><rect x="37.1257%" y="437" width="0.2190%" height="15" fill="rgb(248,43,45)" fg:x="45942" fg:w="271"/><text x="37.3757%" y="447.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (271 samples, 0.22%)</title><rect x="37.1257%" y="421" width="0.2190%" height="15" fill="rgb(217,222,7)" fg:x="45942" fg:w="271"/><text x="37.3757%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (271 samples, 0.22%)</title><rect x="37.1257%" y="405" width="0.2190%" height="15" fill="rgb(233,28,6)" fg:x="45942" fg:w="271"/><text x="37.3757%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (271 samples, 0.22%)</title><rect x="37.1257%" y="389" width="0.2190%" height="15" fill="rgb(231,218,15)" fg:x="45942" fg:w="271"/><text x="37.3757%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (271 samples, 0.22%)</title><rect x="37.1257%" y="373" width="0.2190%" height="15" fill="rgb(226,171,48)" fg:x="45942" fg:w="271"/><text x="37.3757%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (271 samples, 0.22%)</title><rect x="37.1257%" y="357" width="0.2190%" height="15" fill="rgb(235,201,9)" fg:x="45942" fg:w="271"/><text x="37.3757%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (271 samples, 0.22%)</title><rect x="37.1257%" y="341" width="0.2190%" height="15" fill="rgb(217,80,15)" fg:x="45942" fg:w="271"/><text x="37.3757%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (27 samples, 0.02%)</title><rect x="37.3229%" y="325" width="0.0218%" height="15" fill="rgb(219,152,8)" fg:x="46186" fg:w="27"/><text x="37.5729%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (27 samples, 0.02%)</title><rect x="37.3229%" y="309" width="0.0218%" height="15" fill="rgb(243,107,38)" fg:x="46186" fg:w="27"/><text x="37.5729%" y="319.50"></text></g><g><title>[libc-2.31.so] (21 samples, 0.02%)</title><rect x="37.3278%" y="293" width="0.0170%" height="15" fill="rgb(231,17,5)" fg:x="46192" fg:w="21"/><text x="37.5778%" y="303.50"></text></g><g><title>[libc-2.31.so] (551 samples, 0.45%)</title><rect x="37.3447%" y="453" width="0.4453%" height="15" fill="rgb(209,25,54)" fg:x="46213" fg:w="551"/><text x="37.5947%" y="463.50"></text></g><g><title>[libc-2.31.so] (328 samples, 0.27%)</title><rect x="37.7957%" y="437" width="0.2651%" height="15" fill="rgb(219,0,2)" fg:x="46771" fg:w="328"/><text x="38.0457%" y="447.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (897 samples, 0.72%)</title><rect x="38.1011%" y="325" width="0.7249%" height="15" fill="rgb(246,9,5)" fg:x="47149" fg:w="897"/><text x="38.3511%" y="335.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1,306 samples, 1.06%)</title><rect x="37.7900%" y="453" width="1.0554%" height="15" fill="rgb(226,159,4)" fg:x="46764" fg:w="1306"/><text x="38.0400%" y="463.50"></text></g><g><title>alloc::alloc::exchange_malloc (971 samples, 0.78%)</title><rect x="38.0607%" y="437" width="0.7847%" height="15" fill="rgb(219,175,34)" fg:x="47099" fg:w="971"/><text x="38.3107%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (971 samples, 0.78%)</title><rect x="38.0607%" y="421" width="0.7847%" height="15" fill="rgb(236,10,46)" fg:x="47099" fg:w="971"/><text x="38.3107%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (971 samples, 0.78%)</title><rect x="38.0607%" y="405" width="0.7847%" height="15" fill="rgb(240,211,16)" fg:x="47099" fg:w="971"/><text x="38.3107%" y="415.50"></text></g><g><title>alloc::alloc::alloc (969 samples, 0.78%)</title><rect x="38.0623%" y="389" width="0.7830%" height="15" fill="rgb(205,3,43)" fg:x="47101" fg:w="969"/><text x="38.3123%" y="399.50"></text></g><g><title>__rg_alloc (969 samples, 0.78%)</title><rect x="38.0623%" y="373" width="0.7830%" height="15" fill="rgb(245,7,22)" fg:x="47101" fg:w="969"/><text x="38.3123%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (969 samples, 0.78%)</title><rect x="38.0623%" y="357" width="0.7830%" height="15" fill="rgb(239,132,32)" fg:x="47101" fg:w="969"/><text x="38.3123%" y="367.50"></text></g><g><title>sn_rust_alloc (969 samples, 0.78%)</title><rect x="38.0623%" y="341" width="0.7830%" height="15" fill="rgb(228,202,34)" fg:x="47101" fg:w="969"/><text x="38.3123%" y="351.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (24 samples, 0.02%)</title><rect x="38.8260%" y="325" width="0.0194%" height="15" fill="rgb(254,200,22)" fg:x="48046" fg:w="24"/><text x="39.0760%" y="335.50"></text></g><g><title>alloc::vec::into_iter::IntoIter&lt;T,A&gt;::as_raw_mut_slice (13 samples, 0.01%)</title><rect x="38.8543%" y="421" width="0.0105%" height="15" fill="rgb(219,10,39)" fg:x="48081" fg:w="13"/><text x="39.1043%" y="431.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (13 samples, 0.01%)</title><rect x="38.8543%" y="405" width="0.0105%" height="15" fill="rgb(226,210,39)" fg:x="48081" fg:w="13"/><text x="39.1043%" y="415.50"></text></g><g><title>core::iter::traits::exact_size::ExactSizeIterator::len (13 samples, 0.01%)</title><rect x="38.8543%" y="389" width="0.0105%" height="15" fill="rgb(208,219,16)" fg:x="48081" fg:w="13"/><text x="39.1043%" y="399.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (13 samples, 0.01%)</title><rect x="38.8543%" y="373" width="0.0105%" height="15" fill="rgb(216,158,51)" fg:x="48081" fg:w="13"/><text x="39.1043%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (13 samples, 0.01%)</title><rect x="38.8543%" y="357" width="0.0105%" height="15" fill="rgb(233,14,44)" fg:x="48081" fg:w="13"/><text x="39.1043%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event),alloc::alloc::Global&gt;&gt; (15 samples, 0.01%)</title><rect x="38.8648%" y="421" width="0.0121%" height="15" fill="rgb(237,97,39)" fg:x="48094" fg:w="15"/><text x="39.1148%" y="431.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="38.8648%" y="405" width="0.0121%" height="15" fill="rgb(218,198,43)" fg:x="48094" fg:w="15"/><text x="39.1148%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (15 samples, 0.01%)</title><rect x="38.8648%" y="389" width="0.0121%" height="15" fill="rgb(231,104,20)" fg:x="48094" fg:w="15"/><text x="39.1148%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="38.8648%" y="373" width="0.0121%" height="15" fill="rgb(254,36,13)" fg:x="48094" fg:w="15"/><text x="39.1148%" y="383.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (52 samples, 0.04%)</title><rect x="38.8454%" y="437" width="0.0420%" height="15" fill="rgb(248,14,50)" fg:x="48070" fg:w="52"/><text x="39.0954%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)]&gt; (13 samples, 0.01%)</title><rect x="38.8769%" y="421" width="0.0105%" height="15" fill="rgb(217,107,29)" fg:x="48109" fg:w="13"/><text x="39.1269%" y="431.50"></text></g><g><title>sn_rust_dealloc (56 samples, 0.05%)</title><rect x="38.8874%" y="437" width="0.0453%" height="15" fill="rgb(251,169,33)" fg:x="48122" fg:w="56"/><text x="39.1374%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (116 samples, 0.09%)</title><rect x="38.8454%" y="453" width="0.0937%" height="15" fill="rgb(217,108,32)" fg:x="48070" fg:w="116"/><text x="39.0954%" y="463.50"></text></g><g><title>core::str::&lt;impl str&gt;::eq_ignore_ascii_case (34 samples, 0.03%)</title><rect x="38.9618%" y="453" width="0.0275%" height="15" fill="rgb(219,66,42)" fg:x="48214" fg:w="34"/><text x="39.2118%" y="463.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case (34 samples, 0.03%)</title><rect x="38.9618%" y="437" width="0.0275%" height="15" fill="rgb(206,180,7)" fg:x="48214" fg:w="34"/><text x="39.2118%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (34 samples, 0.03%)</title><rect x="38.9618%" y="421" width="0.0275%" height="15" fill="rgb(208,226,31)" fg:x="48214" fg:w="34"/><text x="39.2118%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (34 samples, 0.03%)</title><rect x="38.9618%" y="405" width="0.0275%" height="15" fill="rgb(218,26,49)" fg:x="48214" fg:w="34"/><text x="39.2118%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::{{closure}} (23 samples, 0.02%)</title><rect x="38.9706%" y="389" width="0.0186%" height="15" fill="rgb(233,197,48)" fg:x="48225" fg:w="23"/><text x="39.2206%" y="399.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case::{{closure}} (23 samples, 0.02%)</title><rect x="38.9706%" y="373" width="0.0186%" height="15" fill="rgb(252,181,51)" fg:x="48225" fg:w="23"/><text x="39.2206%" y="383.50"></text></g><g><title>core::num::&lt;impl u8&gt;::eq_ignore_ascii_case (23 samples, 0.02%)</title><rect x="38.9706%" y="357" width="0.0186%" height="15" fill="rgb(253,90,19)" fg:x="48225" fg:w="23"/><text x="39.2206%" y="367.50"></text></g><g><title>core::num::&lt;impl u8&gt;::to_ascii_lowercase (23 samples, 0.02%)</title><rect x="38.9706%" y="341" width="0.0186%" height="15" fill="rgb(215,171,30)" fg:x="48225" fg:w="23"/><text x="39.2206%" y="351.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,969 samples, 2.40%)</title><rect x="36.6110%" y="485" width="2.3993%" height="15" fill="rgb(214,222,9)" fg:x="45305" fg:w="2969"/><text x="36.8610%" y="495.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (2,969 samples, 2.40%)</title><rect x="36.6110%" y="469" width="2.3993%" height="15" fill="rgb(223,3,22)" fg:x="45305" fg:w="2969"/><text x="36.8610%" y="479.50">tr..</text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (19 samples, 0.02%)</title><rect x="38.9949%" y="453" width="0.0154%" height="15" fill="rgb(225,196,46)" fg:x="48255" fg:w="19"/><text x="39.2449%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (19 samples, 0.02%)</title><rect x="38.9949%" y="437" width="0.0154%" height="15" fill="rgb(209,110,37)" fg:x="48255" fg:w="19"/><text x="39.2449%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (19 samples, 0.02%)</title><rect x="38.9949%" y="421" width="0.0154%" height="15" fill="rgb(249,89,12)" fg:x="48255" fg:w="19"/><text x="39.2449%" y="431.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,040 samples, 2.46%)</title><rect x="36.6110%" y="549" width="2.4566%" height="15" fill="rgb(226,27,33)" fg:x="45305" fg:w="3040"/><text x="36.8610%" y="559.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (3,040 samples, 2.46%)</title><rect x="36.6110%" y="533" width="2.4566%" height="15" fill="rgb(213,82,22)" fg:x="45305" fg:w="3040"/><text x="36.8610%" y="543.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,040 samples, 2.46%)</title><rect x="36.6110%" y="517" width="2.4566%" height="15" fill="rgb(248,140,0)" fg:x="45305" fg:w="3040"/><text x="36.8610%" y="527.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (3,040 samples, 2.46%)</title><rect x="36.6110%" y="501" width="2.4566%" height="15" fill="rgb(228,106,3)" fg:x="45305" fg:w="3040"/><text x="36.8610%" y="511.50">tr..</text></g><g><title>tremor_runtime::connectors::source::Streams::get_or_create_stream (71 samples, 0.06%)</title><rect x="39.0102%" y="485" width="0.0574%" height="15" fill="rgb(209,23,37)" fg:x="48274" fg:w="71"/><text x="39.2602%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (47 samples, 0.04%)</title><rect x="39.0296%" y="469" width="0.0380%" height="15" fill="rgb(241,93,50)" fg:x="48298" fg:w="47"/><text x="39.2796%" y="479.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (36 samples, 0.03%)</title><rect x="39.0385%" y="453" width="0.0291%" height="15" fill="rgb(253,46,43)" fg:x="48309" fg:w="36"/><text x="39.2885%" y="463.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (36 samples, 0.03%)</title><rect x="39.0385%" y="437" width="0.0291%" height="15" fill="rgb(226,206,43)" fg:x="48309" fg:w="36"/><text x="39.2885%" y="447.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (36 samples, 0.03%)</title><rect x="39.0385%" y="421" width="0.0291%" height="15" fill="rgb(217,54,7)" fg:x="48309" fg:w="36"/><text x="39.2885%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u64&gt;::cmp (14 samples, 0.01%)</title><rect x="39.0563%" y="405" width="0.0113%" height="15" fill="rgb(223,5,52)" fg:x="48331" fg:w="14"/><text x="39.3063%" y="415.50"></text></g><g><title>[libc-2.31.so] (595 samples, 0.48%)</title><rect x="39.1678%" y="533" width="0.4808%" height="15" fill="rgb(206,52,46)" fg:x="48469" fg:w="595"/><text x="39.4178%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt;&gt; (22 samples, 0.02%)</title><rect x="39.6551%" y="533" width="0.0178%" height="15" fill="rgb(253,136,11)" fg:x="49072" fg:w="22"/><text x="39.9051%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt; (22 samples, 0.02%)</title><rect x="39.6551%" y="517" width="0.0178%" height="15" fill="rgb(208,106,33)" fg:x="49072" fg:w="22"/><text x="39.9051%" y="527.50"></text></g><g><title>alloc::alloc::box_free (22 samples, 0.02%)</title><rect x="39.6551%" y="501" width="0.0178%" height="15" fill="rgb(206,54,4)" fg:x="49072" fg:w="22"/><text x="39.9051%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (22 samples, 0.02%)</title><rect x="39.6551%" y="485" width="0.0178%" height="15" fill="rgb(213,3,15)" fg:x="49072" fg:w="22"/><text x="39.9051%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (22 samples, 0.02%)</title><rect x="39.6551%" y="469" width="0.0178%" height="15" fill="rgb(252,211,39)" fg:x="49072" fg:w="22"/><text x="39.9051%" y="479.50"></text></g><g><title>__rg_dealloc (22 samples, 0.02%)</title><rect x="39.6551%" y="453" width="0.0178%" height="15" fill="rgb(223,6,36)" fg:x="49072" fg:w="22"/><text x="39.9051%" y="463.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (22 samples, 0.02%)</title><rect x="39.6551%" y="437" width="0.0178%" height="15" fill="rgb(252,169,45)" fg:x="49072" fg:w="22"/><text x="39.9051%" y="447.50"></text></g><g><title>sn_rust_dealloc (19 samples, 0.02%)</title><rect x="39.6575%" y="421" width="0.0154%" height="15" fill="rgb(212,48,26)" fg:x="49075" fg:w="19"/><text x="39.9075%" y="431.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (123 samples, 0.10%)</title><rect x="39.7642%" y="469" width="0.0994%" height="15" fill="rgb(251,102,48)" fg:x="49207" fg:w="123"/><text x="40.0142%" y="479.50"></text></g><g><title>core::mem::replace (123 samples, 0.10%)</title><rect x="39.7642%" y="453" width="0.0994%" height="15" fill="rgb(243,208,16)" fg:x="49207" fg:w="123"/><text x="40.0142%" y="463.50"></text></g><g><title>core::ptr::read (123 samples, 0.10%)</title><rect x="39.7642%" y="437" width="0.0994%" height="15" fill="rgb(219,96,24)" fg:x="49207" fg:w="123"/><text x="40.0142%" y="447.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (181 samples, 0.15%)</title><rect x="39.7375%" y="485" width="0.1463%" height="15" fill="rgb(219,33,29)" fg:x="49174" fg:w="181"/><text x="39.9875%" y="495.50"></text></g><g><title>core::mem::drop (25 samples, 0.02%)</title><rect x="39.8636%" y="469" width="0.0202%" height="15" fill="rgb(223,176,5)" fg:x="49330" fg:w="25"/><text x="40.1136%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (25 samples, 0.02%)</title><rect x="39.8636%" y="453" width="0.0202%" height="15" fill="rgb(228,140,14)" fg:x="49330" fg:w="25"/><text x="40.1136%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (178 samples, 0.14%)</title><rect x="39.8838%" y="485" width="0.1438%" height="15" fill="rgb(217,179,31)" fg:x="49355" fg:w="178"/><text x="40.1338%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (172 samples, 0.14%)</title><rect x="39.8886%" y="469" width="0.1390%" height="15" fill="rgb(230,9,30)" fg:x="49361" fg:w="172"/><text x="40.1386%" y="479.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (172 samples, 0.14%)</title><rect x="39.8886%" y="453" width="0.1390%" height="15" fill="rgb(230,136,20)" fg:x="49361" fg:w="172"/><text x="40.1386%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (162 samples, 0.13%)</title><rect x="39.8967%" y="437" width="0.1309%" height="15" fill="rgb(215,210,22)" fg:x="49371" fg:w="162"/><text x="40.1467%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (162 samples, 0.13%)</title><rect x="39.8967%" y="421" width="0.1309%" height="15" fill="rgb(218,43,5)" fg:x="49371" fg:w="162"/><text x="40.1467%" y="431.50"></text></g><g><title>__GI___pthread_mutex_unlock (155 samples, 0.13%)</title><rect x="39.9024%" y="405" width="0.1253%" height="15" fill="rgb(216,11,5)" fg:x="49378" fg:w="155"/><text x="40.1524%" y="415.50"></text></g><g><title>core::task::wake::Waker::will_wake (17 samples, 0.01%)</title><rect x="40.0276%" y="485" width="0.0137%" height="15" fill="rgb(209,82,29)" fg:x="49533" fg:w="17"/><text x="40.2776%" y="495.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (17 samples, 0.01%)</title><rect x="40.0276%" y="469" width="0.0137%" height="15" fill="rgb(244,115,12)" fg:x="49533" fg:w="17"/><text x="40.2776%" y="479.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (769 samples, 0.62%)</title><rect x="39.7012%" y="501" width="0.6214%" height="15" fill="rgb(222,82,18)" fg:x="49129" fg:w="769"/><text x="39.9512%" y="511.50"></text></g><g><title>event_listener::Inner::lock (348 samples, 0.28%)</title><rect x="40.0414%" y="485" width="0.2812%" height="15" fill="rgb(249,227,8)" fg:x="49550" fg:w="348"/><text x="40.2914%" y="495.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (331 samples, 0.27%)</title><rect x="40.0551%" y="469" width="0.2675%" height="15" fill="rgb(253,141,45)" fg:x="49567" fg:w="331"/><text x="40.3051%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (327 samples, 0.26%)</title><rect x="40.0583%" y="453" width="0.2642%" height="15" fill="rgb(234,184,4)" fg:x="49571" fg:w="327"/><text x="40.3083%" y="463.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (324 samples, 0.26%)</title><rect x="40.0608%" y="437" width="0.2618%" height="15" fill="rgb(218,194,23)" fg:x="49574" fg:w="324"/><text x="40.3108%" y="447.50"></text></g><g><title>__GI___pthread_mutex_lock (324 samples, 0.26%)</title><rect x="40.0608%" y="421" width="0.2618%" height="15" fill="rgb(235,66,41)" fg:x="49574" fg:w="324"/><text x="40.3108%" y="431.50"></text></g><g><title>concurrent_queue::full_fence (178 samples, 0.14%)</title><rect x="40.3582%" y="453" width="0.1438%" height="15" fill="rgb(245,217,1)" fg:x="49942" fg:w="178"/><text x="40.6082%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (176 samples, 0.14%)</title><rect x="40.3598%" y="437" width="0.1422%" height="15" fill="rgb(229,91,1)" fg:x="49944" fg:w="176"/><text x="40.6098%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (176 samples, 0.14%)</title><rect x="40.3598%" y="421" width="0.1422%" height="15" fill="rgb(207,101,30)" fg:x="49944" fg:w="176"/><text x="40.6098%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (176 samples, 0.14%)</title><rect x="40.3598%" y="405" width="0.1422%" height="15" fill="rgb(223,82,49)" fg:x="49944" fg:w="176"/><text x="40.6098%" y="415.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (1,037 samples, 0.84%)</title><rect x="39.6729%" y="517" width="0.8380%" height="15" fill="rgb(218,167,17)" fg:x="49094" fg:w="1037"/><text x="39.9229%" y="527.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (233 samples, 0.19%)</title><rect x="40.3226%" y="501" width="0.1883%" height="15" fill="rgb(208,103,14)" fg:x="49898" fg:w="233"/><text x="40.5726%" y="511.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (216 samples, 0.17%)</title><rect x="40.3363%" y="485" width="0.1745%" height="15" fill="rgb(238,20,8)" fg:x="49915" fg:w="216"/><text x="40.5863%" y="495.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (211 samples, 0.17%)</title><rect x="40.3404%" y="469" width="0.1705%" height="15" fill="rgb(218,80,54)" fg:x="49920" fg:w="211"/><text x="40.5904%" y="479.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (4,834 samples, 3.91%)</title><rect x="36.6110%" y="565" width="3.9064%" height="15" fill="rgb(240,144,17)" fg:x="45305" fg:w="4834"/><text x="36.8610%" y="575.50">trem..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1,794 samples, 1.45%)</title><rect x="39.0676%" y="549" width="1.4497%" height="15" fill="rgb(245,27,50)" fg:x="48345" fg:w="1794"/><text x="39.3176%" y="559.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (1,045 samples, 0.84%)</title><rect x="39.6729%" y="533" width="0.8445%" height="15" fill="rgb(251,51,7)" fg:x="49094" fg:w="1045"/><text x="39.9229%" y="543.50"></text></g><g><title>[libc-2.31.so] (463 samples, 0.37%)</title><rect x="41.1218%" y="533" width="0.3742%" height="15" fill="rgb(245,217,29)" fg:x="50887" fg:w="463"/><text x="41.3718%" y="543.50"></text></g><g><title>[libc-2.31.so] (732 samples, 0.59%)</title><rect x="41.6576%" y="517" width="0.5915%" height="15" fill="rgb(221,176,29)" fg:x="51550" fg:w="732"/><text x="41.9076%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (448 samples, 0.36%)</title><rect x="42.2491%" y="517" width="0.3620%" height="15" fill="rgb(212,180,24)" fg:x="52282" fg:w="448"/><text x="42.4991%" y="527.50"></text></g><g><title>core::ptr::write (429 samples, 0.35%)</title><rect x="42.2645%" y="501" width="0.3467%" height="15" fill="rgb(254,24,2)" fg:x="52301" fg:w="429"/><text x="42.5145%" y="511.50"></text></g><g><title>[libc-2.31.so] (424 samples, 0.34%)</title><rect x="42.2685%" y="485" width="0.3426%" height="15" fill="rgb(230,100,2)" fg:x="52306" fg:w="424"/><text x="42.5185%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (34 samples, 0.03%)</title><rect x="42.6111%" y="517" width="0.0275%" height="15" fill="rgb(219,142,25)" fg:x="52730" fg:w="34"/><text x="42.8611%" y="527.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (13 samples, 0.01%)</title><rect x="42.6637%" y="485" width="0.0105%" height="15" fill="rgb(240,73,43)" fg:x="52795" fg:w="13"/><text x="42.9137%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (13 samples, 0.01%)</title><rect x="42.6637%" y="469" width="0.0105%" height="15" fill="rgb(214,114,15)" fg:x="52795" fg:w="13"/><text x="42.9137%" y="479.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (1,038 samples, 0.84%)</title><rect x="42.6475%" y="517" width="0.8388%" height="15" fill="rgb(207,130,4)" fg:x="52775" fg:w="1038"/><text x="42.8975%" y="527.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (1,018 samples, 0.82%)</title><rect x="42.6637%" y="501" width="0.8226%" height="15" fill="rgb(221,25,40)" fg:x="52795" fg:w="1018"/><text x="42.9137%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (984 samples, 0.80%)</title><rect x="42.6911%" y="485" width="0.7952%" height="15" fill="rgb(241,184,7)" fg:x="52829" fg:w="984"/><text x="42.9411%" y="495.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (984 samples, 0.80%)</title><rect x="42.6911%" y="469" width="0.7952%" height="15" fill="rgb(235,159,4)" fg:x="52829" fg:w="984"/><text x="42.9411%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (984 samples, 0.80%)</title><rect x="42.6911%" y="453" width="0.7952%" height="15" fill="rgb(214,87,48)" fg:x="52829" fg:w="984"/><text x="42.9411%" y="463.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (984 samples, 0.80%)</title><rect x="42.6911%" y="437" width="0.7952%" height="15" fill="rgb(246,198,24)" fg:x="52829" fg:w="984"/><text x="42.9411%" y="447.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (984 samples, 0.80%)</title><rect x="42.6911%" y="421" width="0.7952%" height="15" fill="rgb(209,66,40)" fg:x="52829" fg:w="984"/><text x="42.9411%" y="431.50"></text></g><g><title>[libc-2.31.so] (966 samples, 0.78%)</title><rect x="42.7057%" y="405" width="0.7806%" height="15" fill="rgb(233,147,39)" fg:x="52847" fg:w="966"/><text x="42.9557%" y="415.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::clone::Clone&gt;::clone (27 samples, 0.02%)</title><rect x="43.5728%" y="485" width="0.0218%" height="15" fill="rgb(231,145,52)" fg:x="53920" fg:w="27"/><text x="43.8228%" y="495.50"></text></g><g><title>[libc-2.31.so] (954 samples, 0.77%)</title><rect x="43.5946%" y="485" width="0.7709%" height="15" fill="rgb(206,20,26)" fg:x="53947" fg:w="954"/><text x="43.8446%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (289 samples, 0.23%)</title><rect x="44.3736%" y="485" width="0.2335%" height="15" fill="rgb(238,220,4)" fg:x="54911" fg:w="289"/><text x="44.6236%" y="495.50"></text></g><g><title>core::ptr::read (265 samples, 0.21%)</title><rect x="44.3930%" y="469" width="0.2141%" height="15" fill="rgb(252,195,42)" fg:x="54935" fg:w="265"/><text x="44.6430%" y="479.50"></text></g><g><title>[libc-2.31.so] (216 samples, 0.17%)</title><rect x="44.4326%" y="453" width="0.1745%" height="15" fill="rgb(209,10,6)" fg:x="54984" fg:w="216"/><text x="44.6826%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (400 samples, 0.32%)</title><rect x="44.6071%" y="485" width="0.3232%" height="15" fill="rgb(229,3,52)" fg:x="55200" fg:w="400"/><text x="44.8571%" y="495.50"></text></g><g><title>core::ptr::write (389 samples, 0.31%)</title><rect x="44.6160%" y="469" width="0.3144%" height="15" fill="rgb(253,49,37)" fg:x="55211" fg:w="389"/><text x="44.8660%" y="479.50"></text></g><g><title>[libc-2.31.so] (389 samples, 0.31%)</title><rect x="44.6160%" y="453" width="0.3144%" height="15" fill="rgb(240,103,49)" fg:x="55211" fg:w="389"/><text x="44.8660%" y="463.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (4,262 samples, 3.44%)</title><rect x="41.4960%" y="533" width="3.4441%" height="15" fill="rgb(250,182,30)" fg:x="51350" fg:w="4262"/><text x="41.7460%" y="543.50">tre..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (1,799 samples, 1.45%)</title><rect x="43.4863%" y="517" width="1.4538%" height="15" fill="rgb(248,8,30)" fg:x="53813" fg:w="1799"/><text x="43.7363%" y="527.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (1,775 samples, 1.43%)</title><rect x="43.5057%" y="501" width="1.4344%" height="15" fill="rgb(237,120,30)" fg:x="53837" fg:w="1775"/><text x="43.7557%" y="511.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,793 samples, 3.87%)</title><rect x="41.0943%" y="549" width="3.8732%" height="15" fill="rgb(221,146,34)" fg:x="50853" fg:w="4793"/><text x="41.3443%" y="559.50">&lt;cor..</text></g><g><title>tremor_runtime::pipeline::handle_insights::{{closure}} (34 samples, 0.03%)</title><rect x="44.9401%" y="533" width="0.0275%" height="15" fill="rgb(242,55,13)" fg:x="55612" fg:w="34"/><text x="45.1901%" y="543.50"></text></g><g><title>[libc-2.31.so] (1,710 samples, 1.38%)</title><rect x="44.9676%" y="549" width="1.3819%" height="15" fill="rgb(242,112,31)" fg:x="55646" fg:w="1710"/><text x="45.2176%" y="559.50"></text></g><g><title>sn_rust_dealloc (172 samples, 0.14%)</title><rect x="46.3623%" y="389" width="0.1390%" height="15" fill="rgb(249,192,27)" fg:x="57372" fg:w="172"/><text x="46.6123%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (191 samples, 0.15%)</title><rect x="46.3510%" y="549" width="0.1543%" height="15" fill="rgb(208,204,44)" fg:x="57358" fg:w="191"/><text x="46.6010%" y="559.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (191 samples, 0.15%)</title><rect x="46.3510%" y="533" width="0.1543%" height="15" fill="rgb(208,93,54)" fg:x="57358" fg:w="191"/><text x="46.6010%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (177 samples, 0.14%)</title><rect x="46.3623%" y="517" width="0.1430%" height="15" fill="rgb(242,1,31)" fg:x="57372" fg:w="177"/><text x="46.6123%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (177 samples, 0.14%)</title><rect x="46.3623%" y="501" width="0.1430%" height="15" fill="rgb(241,83,25)" fg:x="57372" fg:w="177"/><text x="46.6123%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (177 samples, 0.14%)</title><rect x="46.3623%" y="485" width="0.1430%" height="15" fill="rgb(205,169,50)" fg:x="57372" fg:w="177"/><text x="46.6123%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (177 samples, 0.14%)</title><rect x="46.3623%" y="469" width="0.1430%" height="15" fill="rgb(239,186,37)" fg:x="57372" fg:w="177"/><text x="46.6123%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (177 samples, 0.14%)</title><rect x="46.3623%" y="453" width="0.1430%" height="15" fill="rgb(205,221,10)" fg:x="57372" fg:w="177"/><text x="46.6123%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (177 samples, 0.14%)</title><rect x="46.3623%" y="437" width="0.1430%" height="15" fill="rgb(218,196,15)" fg:x="57372" fg:w="177"/><text x="46.6123%" y="447.50"></text></g><g><title>__rg_dealloc (177 samples, 0.14%)</title><rect x="46.3623%" y="421" width="0.1430%" height="15" fill="rgb(218,196,35)" fg:x="57372" fg:w="177"/><text x="46.6123%" y="431.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (177 samples, 0.14%)</title><rect x="46.3623%" y="405" width="0.1430%" height="15" fill="rgb(233,63,24)" fg:x="57372" fg:w="177"/><text x="46.6123%" y="415.50"></text></g><g><title>async_io::driver::block_on (33,435 samples, 27.02%)</title><rect x="19.5027%" y="869" width="27.0188%" height="15" fill="rgb(225,8,4)" fg:x="24134" fg:w="33435"/><text x="19.7527%" y="879.50">async_io::driver::block_on</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (33,435 samples, 27.02%)</title><rect x="19.5027%" y="853" width="27.0188%" height="15" fill="rgb(234,105,35)" fg:x="24134" fg:w="33435"/><text x="19.7527%" y="863.50">&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::f..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (33,435 samples, 27.02%)</title><rect x="19.5027%" y="837" width="27.0188%" height="15" fill="rgb(236,21,32)" fg:x="24134" fg:w="33435"/><text x="19.7527%" y="847.50">&lt;core::future::from_generator::GenFuture&lt;T&gt;..</text></g><g><title>async_executor::Executor::run::{{closure}} (33,435 samples, 27.02%)</title><rect x="19.5027%" y="821" width="27.0188%" height="15" fill="rgb(228,109,6)" fg:x="24134" fg:w="33435"/><text x="19.7527%" y="831.50">async_executor::Executor::run::{{closure}}</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (33,435 samples, 27.02%)</title><rect x="19.5027%" y="805" width="27.0188%" height="15" fill="rgb(229,215,31)" fg:x="24134" fg:w="33435"/><text x="19.7527%" y="815.50">&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::f..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (33,435 samples, 27.02%)</title><rect x="19.5027%" y="789" width="27.0188%" height="15" fill="rgb(221,52,54)" fg:x="24134" fg:w="33435"/><text x="19.7527%" y="799.50">&lt;core::future::from_generator::GenFuture&lt;T&gt;..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (33,435 samples, 27.02%)</title><rect x="19.5027%" y="773" width="27.0188%" height="15" fill="rgb(252,129,43)" fg:x="24134" fg:w="33435"/><text x="19.7527%" y="783.50">async_executor::Executor::run::{{closure}}:..</text></g><g><title>async_task::runnable::Runnable::run (33,435 samples, 27.02%)</title><rect x="19.5027%" y="757" width="27.0188%" height="15" fill="rgb(248,183,27)" fg:x="24134" fg:w="33435"/><text x="19.7527%" y="767.50">async_task::runnable::Runnable::run</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (33,435 samples, 27.02%)</title><rect x="19.5027%" y="741" width="27.0188%" height="15" fill="rgb(250,0,22)" fg:x="24134" fg:w="33435"/><text x="19.7527%" y="751.50">async_task::raw::RawTask&lt;F,T,S&gt;::run</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (33,435 samples, 27.02%)</title><rect x="19.5027%" y="725" width="27.0188%" height="15" fill="rgb(213,166,10)" fg:x="24134" fg:w="33435"/><text x="19.7527%" y="735.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (33,435 samples, 27.02%)</title><rect x="19.5027%" y="709" width="27.0188%" height="15" fill="rgb(207,163,36)" fg:x="24134" fg:w="33435"/><text x="19.7527%" y="719.50">&lt;core::future::from_generator::GenFuture&lt;T&gt;..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (33,435 samples, 27.02%)</title><rect x="19.5027%" y="693" width="27.0188%" height="15" fill="rgb(208,122,22)" fg:x="24134" fg:w="33435"/><text x="19.7527%" y="703.50">async_executor::Executor::spawn::{{closure}}</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (33,435 samples, 27.02%)</title><rect x="19.5027%" y="677" width="27.0188%" height="15" fill="rgb(207,104,49)" fg:x="24134" fg:w="33435"/><text x="19.7527%" y="687.50">&lt;async_std::task::builder::SupportTaskLocal..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (33,435 samples, 27.02%)</title><rect x="19.5027%" y="661" width="27.0188%" height="15" fill="rgb(248,211,50)" fg:x="24134" fg:w="33435"/><text x="19.7527%" y="671.50">async_std::task::task_locals_wrapper::TaskL..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (33,435 samples, 27.02%)</title><rect x="19.5027%" y="645" width="27.0188%" height="15" fill="rgb(217,13,45)" fg:x="24134" fg:w="33435"/><text x="19.7527%" y="655.50">std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (33,435 samples, 27.02%)</title><rect x="19.5027%" y="629" width="27.0188%" height="15" fill="rgb(211,216,49)" fg:x="24134" fg:w="33435"/><text x="19.7527%" y="639.50">std::thread::local::LocalKey&lt;T&gt;::try_with</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (33,435 samples, 27.02%)</title><rect x="19.5027%" y="613" width="27.0188%" height="15" fill="rgb(221,58,53)" fg:x="24134" fg:w="33435"/><text x="19.7527%" y="623.50">async_std::task::task_locals_wrapper::TaskL..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (33,435 samples, 27.02%)</title><rect x="19.5027%" y="597" width="27.0188%" height="15" fill="rgb(220,112,41)" fg:x="24134" fg:w="33435"/><text x="19.7527%" y="607.50">&lt;async_std::task::builder::SupportTaskLocal..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (33,435 samples, 27.02%)</title><rect x="19.5027%" y="581" width="27.0188%" height="15" fill="rgb(236,38,28)" fg:x="24134" fg:w="33435"/><text x="19.7527%" y="591.50">&lt;core::future::from_generator::GenFuture&lt;T&gt;..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (7,430 samples, 6.00%)</title><rect x="40.5173%" y="565" width="6.0042%" height="15" fill="rgb(227,195,22)" fg:x="50139" fg:w="7430"/><text x="40.7673%" y="575.50">tremor_r..</text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::send_events::{{closure}}&gt;&gt; (16 samples, 0.01%)</title><rect x="46.5086%" y="549" width="0.0129%" height="15" fill="rgb(214,55,33)" fg:x="57553" fg:w="16"/><text x="46.7586%" y="559.50"></text></g><g><title>&lt;tremor_pipeline::event::ValueIter as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="46.9450%" y="405" width="0.0129%" height="15" fill="rgb(248,80,13)" fg:x="58093" fg:w="16"/><text x="47.1950%" y="415.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (45 samples, 0.04%)</title><rect x="46.9579%" y="405" width="0.0364%" height="15" fill="rgb(238,52,6)" fg:x="58109" fg:w="45"/><text x="47.2079%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::deref::Deref for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::deref (23 samples, 0.02%)</title><rect x="46.9943%" y="405" width="0.0186%" height="15" fill="rgb(224,198,47)" fg:x="58154" fg:w="23"/><text x="47.2443%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::as_slice (23 samples, 0.02%)</title><rect x="46.9943%" y="389" width="0.0186%" height="15" fill="rgb(233,171,20)" fg:x="58154" fg:w="23"/><text x="47.2443%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (36 samples, 0.03%)</title><rect x="47.0129%" y="405" width="0.0291%" height="15" fill="rgb(241,30,25)" fg:x="58177" fg:w="36"/><text x="47.2629%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (36 samples, 0.03%)</title><rect x="47.0129%" y="389" width="0.0291%" height="15" fill="rgb(207,171,38)" fg:x="58177" fg:w="36"/><text x="47.2629%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.02%)</title><rect x="47.0428%" y="341" width="0.0186%" height="15" fill="rgb(234,70,1)" fg:x="58214" fg:w="23"/><text x="47.2928%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (60 samples, 0.05%)</title><rect x="47.0419%" y="405" width="0.0485%" height="15" fill="rgb(232,178,18)" fg:x="58213" fg:w="60"/><text x="47.2919%" y="415.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (60 samples, 0.05%)</title><rect x="47.0419%" y="389" width="0.0485%" height="15" fill="rgb(241,78,40)" fg:x="58213" fg:w="60"/><text x="47.2919%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (60 samples, 0.05%)</title><rect x="47.0419%" y="373" width="0.0485%" height="15" fill="rgb(222,35,25)" fg:x="58213" fg:w="60"/><text x="47.2919%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (60 samples, 0.05%)</title><rect x="47.0419%" y="357" width="0.0485%" height="15" fill="rgb(207,92,16)" fg:x="58213" fg:w="60"/><text x="47.2919%" y="367.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (36 samples, 0.03%)</title><rect x="47.0613%" y="341" width="0.0291%" height="15" fill="rgb(216,59,51)" fg:x="58237" fg:w="36"/><text x="47.3113%" y="351.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (36 samples, 0.03%)</title><rect x="47.0613%" y="325" width="0.0291%" height="15" fill="rgb(213,80,28)" fg:x="58237" fg:w="36"/><text x="47.3113%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::iter (14 samples, 0.01%)</title><rect x="47.0904%" y="405" width="0.0113%" height="15" fill="rgb(220,93,7)" fg:x="58273" fg:w="14"/><text x="47.3404%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (14 samples, 0.01%)</title><rect x="47.0904%" y="389" width="0.0113%" height="15" fill="rgb(225,24,44)" fg:x="58273" fg:w="14"/><text x="47.3404%" y="399.50"></text></g><g><title>sn_rust_dealloc (218 samples, 0.18%)</title><rect x="47.1567%" y="245" width="0.1762%" height="15" fill="rgb(243,74,40)" fg:x="58355" fg:w="218"/><text x="47.4067%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (311 samples, 0.25%)</title><rect x="47.1195%" y="309" width="0.2513%" height="15" fill="rgb(228,39,7)" fg:x="58309" fg:w="311"/><text x="47.3695%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::vec::private::RVec&lt;u8&gt;]&gt; (311 samples, 0.25%)</title><rect x="47.1195%" y="293" width="0.2513%" height="15" fill="rgb(227,79,8)" fg:x="58309" fg:w="311"/><text x="47.3695%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (281 samples, 0.23%)</title><rect x="47.1438%" y="277" width="0.2271%" height="15" fill="rgb(236,58,11)" fg:x="58339" fg:w="281"/><text x="47.3938%" y="287.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (281 samples, 0.23%)</title><rect x="47.1438%" y="261" width="0.2271%" height="15" fill="rgb(249,63,35)" fg:x="58339" fg:w="281"/><text x="47.3938%" y="271.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (47 samples, 0.04%)</title><rect x="47.3329%" y="245" width="0.0380%" height="15" fill="rgb(252,114,16)" fg:x="58573" fg:w="47"/><text x="47.5829%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 0.01%)</title><rect x="47.3708%" y="277" width="0.0129%" height="15" fill="rgb(254,151,24)" fg:x="58620" fg:w="16"/><text x="47.6208%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 0.01%)</title><rect x="47.3708%" y="261" width="0.0129%" height="15" fill="rgb(253,54,39)" fg:x="58620" fg:w="16"/><text x="47.6208%" y="271.50"></text></g><g><title>__rg_dealloc (16 samples, 0.01%)</title><rect x="47.3708%" y="245" width="0.0129%" height="15" fill="rgb(243,25,45)" fg:x="58620" fg:w="16"/><text x="47.6208%" y="255.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (16 samples, 0.01%)</title><rect x="47.3708%" y="229" width="0.0129%" height="15" fill="rgb(234,134,9)" fg:x="58620" fg:w="16"/><text x="47.6208%" y="239.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (350 samples, 0.28%)</title><rect x="47.1090%" y="373" width="0.2828%" height="15" fill="rgb(227,166,31)" fg:x="58296" fg:w="350"/><text x="47.3590%" y="383.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (344 samples, 0.28%)</title><rect x="47.1139%" y="357" width="0.2780%" height="15" fill="rgb(245,143,41)" fg:x="58302" fg:w="344"/><text x="47.3639%" y="367.50"></text></g><g><title>core::mem::drop (337 samples, 0.27%)</title><rect x="47.1195%" y="341" width="0.2723%" height="15" fill="rgb(238,181,32)" fg:x="58309" fg:w="337"/><text x="47.3695%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (337 samples, 0.27%)</title><rect x="47.1195%" y="325" width="0.2723%" height="15" fill="rgb(224,113,18)" fg:x="58309" fg:w="337"/><text x="47.3695%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (26 samples, 0.02%)</title><rect x="47.3708%" y="309" width="0.0210%" height="15" fill="rgb(240,229,28)" fg:x="58620" fg:w="26"/><text x="47.6208%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (26 samples, 0.02%)</title><rect x="47.3708%" y="293" width="0.0210%" height="15" fill="rgb(250,185,3)" fg:x="58620" fg:w="26"/><text x="47.6208%" y="303.50"></text></g><g><title>sn_rust_dealloc (54 samples, 0.04%)</title><rect x="47.3919%" y="373" width="0.0436%" height="15" fill="rgb(212,59,25)" fg:x="58646" fg:w="54"/><text x="47.6419%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (414 samples, 0.33%)</title><rect x="47.1017%" y="405" width="0.3346%" height="15" fill="rgb(221,87,20)" fg:x="58287" fg:w="414"/><text x="47.3517%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (414 samples, 0.33%)</title><rect x="47.1017%" y="389" width="0.3346%" height="15" fill="rgb(213,74,28)" fg:x="58287" fg:w="414"/><text x="47.3517%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::private::RVec&lt;T&gt;::buffer_mut (31 samples, 0.03%)</title><rect x="47.4492%" y="277" width="0.0251%" height="15" fill="rgb(224,132,34)" fg:x="58717" fg:w="31"/><text x="47.6992%" y="287.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (35 samples, 0.03%)</title><rect x="47.4484%" y="309" width="0.0283%" height="15" fill="rgb(222,101,24)" fg:x="58716" fg:w="35"/><text x="47.6984%" y="319.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (35 samples, 0.03%)</title><rect x="47.4484%" y="293" width="0.0283%" height="15" fill="rgb(254,142,4)" fg:x="58716" fg:w="35"/><text x="47.6984%" y="303.50"></text></g><g><title>sn_rust_dealloc (178 samples, 0.14%)</title><rect x="47.4767%" y="309" width="0.1438%" height="15" fill="rgb(230,229,49)" fg:x="58751" fg:w="178"/><text x="47.7267%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (226 samples, 0.18%)</title><rect x="47.4468%" y="357" width="0.1826%" height="15" fill="rgb(238,70,47)" fg:x="58714" fg:w="226"/><text x="47.6968%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (226 samples, 0.18%)</title><rect x="47.4468%" y="341" width="0.1826%" height="15" fill="rgb(231,160,17)" fg:x="58714" fg:w="226"/><text x="47.6968%" y="351.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (226 samples, 0.18%)</title><rect x="47.4468%" y="325" width="0.1826%" height="15" fill="rgb(218,68,53)" fg:x="58714" fg:w="226"/><text x="47.6968%" y="335.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (19 samples, 0.02%)</title><rect x="48.3268%" y="181" width="0.0154%" height="15" fill="rgb(236,111,10)" fg:x="59803" fg:w="19"/><text x="48.5768%" y="191.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (19 samples, 0.02%)</title><rect x="48.3268%" y="165" width="0.0154%" height="15" fill="rgb(224,34,41)" fg:x="59803" fg:w="19"/><text x="48.5768%" y="175.50"></text></g><g><title>core::mem::drop (14 samples, 0.01%)</title><rect x="48.3309%" y="149" width="0.0113%" height="15" fill="rgb(241,118,19)" fg:x="59808" fg:w="14"/><text x="48.5809%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (14 samples, 0.01%)</title><rect x="48.3309%" y="133" width="0.0113%" height="15" fill="rgb(238,129,25)" fg:x="59808" fg:w="14"/><text x="48.5809%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (14 samples, 0.01%)</title><rect x="48.3309%" y="117" width="0.0113%" height="15" fill="rgb(238,22,31)" fg:x="59808" fg:w="14"/><text x="48.5809%" y="127.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="48.3309%" y="101" width="0.0113%" height="15" fill="rgb(222,174,48)" fg:x="59808" fg:w="14"/><text x="48.5809%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.01%)</title><rect x="48.3309%" y="85" width="0.0113%" height="15" fill="rgb(206,152,40)" fg:x="59808" fg:w="14"/><text x="48.5809%" y="95.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.01%)</title><rect x="48.3309%" y="69" width="0.0113%" height="15" fill="rgb(218,99,54)" fg:x="59808" fg:w="14"/><text x="48.5809%" y="79.50"></text></g><g><title>__rg_dealloc (14 samples, 0.01%)</title><rect x="48.3309%" y="53" width="0.0113%" height="15" fill="rgb(220,174,26)" fg:x="59808" fg:w="14"/><text x="48.5809%" y="63.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (14 samples, 0.01%)</title><rect x="48.3309%" y="37" width="0.0113%" height="15" fill="rgb(245,116,9)" fg:x="59808" fg:w="14"/><text x="48.5809%" y="47.50"></text></g><g><title>sn_rust_dealloc (268 samples, 0.22%)</title><rect x="48.3422%" y="181" width="0.2166%" height="15" fill="rgb(209,72,35)" fg:x="59822" fg:w="268"/><text x="48.5922%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,195 samples, 0.97%)</title><rect x="47.6488%" y="261" width="0.9657%" height="15" fill="rgb(226,126,21)" fg:x="58964" fg:w="1195"/><text x="47.8988%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (1,195 samples, 0.97%)</title><rect x="47.6488%" y="245" width="0.9657%" height="15" fill="rgb(227,192,1)" fg:x="58964" fg:w="1195"/><text x="47.8988%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (1,156 samples, 0.93%)</title><rect x="47.6803%" y="229" width="0.9342%" height="15" fill="rgb(237,180,29)" fg:x="59003" fg:w="1156"/><text x="47.9303%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (1,156 samples, 0.93%)</title><rect x="47.6803%" y="213" width="0.9342%" height="15" fill="rgb(230,197,35)" fg:x="59003" fg:w="1156"/><text x="47.9303%" y="223.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (1,156 samples, 0.93%)</title><rect x="47.6803%" y="197" width="0.9342%" height="15" fill="rgb(246,193,31)" fg:x="59003" fg:w="1156"/><text x="47.9303%" y="207.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (69 samples, 0.06%)</title><rect x="48.5588%" y="181" width="0.0558%" height="15" fill="rgb(241,36,4)" fg:x="60090" fg:w="69"/><text x="48.8088%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (21 samples, 0.02%)</title><rect x="48.6145%" y="229" width="0.0170%" height="15" fill="rgb(241,130,17)" fg:x="60159" fg:w="21"/><text x="48.8645%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (21 samples, 0.02%)</title><rect x="48.6145%" y="213" width="0.0170%" height="15" fill="rgb(206,137,32)" fg:x="60159" fg:w="21"/><text x="48.8645%" y="223.50"></text></g><g><title>__rg_dealloc (21 samples, 0.02%)</title><rect x="48.6145%" y="197" width="0.0170%" height="15" fill="rgb(237,228,51)" fg:x="60159" fg:w="21"/><text x="48.8645%" y="207.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (21 samples, 0.02%)</title><rect x="48.6145%" y="181" width="0.0170%" height="15" fill="rgb(243,6,42)" fg:x="60159" fg:w="21"/><text x="48.8645%" y="191.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (1,245 samples, 1.01%)</title><rect x="47.6335%" y="325" width="1.0061%" height="15" fill="rgb(251,74,28)" fg:x="58945" fg:w="1245"/><text x="47.8835%" y="335.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (1,236 samples, 1.00%)</title><rect x="47.6408%" y="309" width="0.9988%" height="15" fill="rgb(218,20,49)" fg:x="58954" fg:w="1236"/><text x="47.8908%" y="319.50"></text></g><g><title>core::mem::drop (1,226 samples, 0.99%)</title><rect x="47.6488%" y="293" width="0.9907%" height="15" fill="rgb(238,28,14)" fg:x="58964" fg:w="1226"/><text x="47.8988%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (1,226 samples, 0.99%)</title><rect x="47.6488%" y="277" width="0.9907%" height="15" fill="rgb(229,40,46)" fg:x="58964" fg:w="1226"/><text x="47.8988%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::string::RString&gt;&gt; (31 samples, 0.03%)</title><rect x="48.6145%" y="261" width="0.0251%" height="15" fill="rgb(244,195,20)" fg:x="60159" fg:w="31"/><text x="48.8645%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.03%)</title><rect x="48.6145%" y="245" width="0.0251%" height="15" fill="rgb(253,56,35)" fg:x="60159" fg:w="31"/><text x="48.8645%" y="255.50"></text></g><g><title>sn_rust_dealloc (107 samples, 0.09%)</title><rect x="48.6396%" y="325" width="0.0865%" height="15" fill="rgb(210,149,44)" fg:x="60190" fg:w="107"/><text x="48.8896%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (1,611 samples, 1.30%)</title><rect x="47.4363%" y="389" width="1.3018%" height="15" fill="rgb(240,135,12)" fg:x="58701" fg:w="1611"/><text x="47.6863%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (1,598 samples, 1.29%)</title><rect x="47.4468%" y="373" width="1.2913%" height="15" fill="rgb(251,24,50)" fg:x="58714" fg:w="1598"/><text x="47.6968%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (1,372 samples, 1.11%)</title><rect x="47.6294%" y="357" width="1.1087%" height="15" fill="rgb(243,200,47)" fg:x="58940" fg:w="1372"/><text x="47.8794%" y="367.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (1,372 samples, 1.11%)</title><rect x="47.6294%" y="341" width="1.1087%" height="15" fill="rgb(224,166,26)" fg:x="58940" fg:w="1372"/><text x="47.8794%" y="351.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (15 samples, 0.01%)</title><rect x="48.7260%" y="325" width="0.0121%" height="15" fill="rgb(233,0,47)" fg:x="60297" fg:w="15"/><text x="48.9760%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (21 samples, 0.02%)</title><rect x="48.7382%" y="389" width="0.0170%" height="15" fill="rgb(253,80,5)" fg:x="60312" fg:w="21"/><text x="48.9882%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (21 samples, 0.02%)</title><rect x="48.7382%" y="373" width="0.0170%" height="15" fill="rgb(214,133,25)" fg:x="60312" fg:w="21"/><text x="48.9882%" y="383.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (21 samples, 0.02%)</title><rect x="48.7382%" y="357" width="0.0170%" height="15" fill="rgb(209,27,14)" fg:x="60312" fg:w="21"/><text x="48.9882%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (16 samples, 0.01%)</title><rect x="48.7551%" y="389" width="0.0129%" height="15" fill="rgb(219,102,51)" fg:x="60333" fg:w="16"/><text x="49.0051%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="48.7551%" y="373" width="0.0129%" height="15" fill="rgb(237,18,16)" fg:x="60333" fg:w="16"/><text x="49.0051%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="48.7551%" y="357" width="0.0129%" height="15" fill="rgb(241,85,17)" fg:x="60333" fg:w="16"/><text x="49.0051%" y="367.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (16 samples, 0.01%)</title><rect x="48.7551%" y="341" width="0.0129%" height="15" fill="rgb(236,90,42)" fg:x="60333" fg:w="16"/><text x="49.0051%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (66 samples, 0.05%)</title><rect x="48.7713%" y="357" width="0.0533%" height="15" fill="rgb(249,57,21)" fg:x="60353" fg:w="66"/><text x="49.0213%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (66 samples, 0.05%)</title><rect x="48.7713%" y="341" width="0.0533%" height="15" fill="rgb(243,12,36)" fg:x="60353" fg:w="66"/><text x="49.0213%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (66 samples, 0.05%)</title><rect x="48.7713%" y="325" width="0.0533%" height="15" fill="rgb(253,128,47)" fg:x="60353" fg:w="66"/><text x="49.0213%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (66 samples, 0.05%)</title><rect x="48.7713%" y="309" width="0.0533%" height="15" fill="rgb(207,33,20)" fg:x="60353" fg:w="66"/><text x="49.0213%" y="319.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::is_empty_singleton (58 samples, 0.05%)</title><rect x="48.7777%" y="293" width="0.0469%" height="15" fill="rgb(233,215,35)" fg:x="60361" fg:w="58"/><text x="49.0277%" y="303.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (89 samples, 0.07%)</title><rect x="48.7681%" y="373" width="0.0719%" height="15" fill="rgb(249,188,52)" fg:x="60349" fg:w="89"/><text x="49.0181%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (19 samples, 0.02%)</title><rect x="48.8246%" y="357" width="0.0154%" height="15" fill="rgb(225,12,32)" fg:x="60419" fg:w="19"/><text x="49.0746%" y="367.50"></text></g><g><title>alloc::alloc::box_free (19 samples, 0.02%)</title><rect x="48.8246%" y="341" width="0.0154%" height="15" fill="rgb(247,98,14)" fg:x="60419" fg:w="19"/><text x="49.0746%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (19 samples, 0.02%)</title><rect x="48.8246%" y="325" width="0.0154%" height="15" fill="rgb(247,219,48)" fg:x="60419" fg:w="19"/><text x="49.0746%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (19 samples, 0.02%)</title><rect x="48.8246%" y="309" width="0.0154%" height="15" fill="rgb(253,60,48)" fg:x="60419" fg:w="19"/><text x="49.0746%" y="319.50"></text></g><g><title>__rg_dealloc (19 samples, 0.02%)</title><rect x="48.8246%" y="293" width="0.0154%" height="15" fill="rgb(245,15,52)" fg:x="60419" fg:w="19"/><text x="49.0746%" y="303.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (19 samples, 0.02%)</title><rect x="48.8246%" y="277" width="0.0154%" height="15" fill="rgb(220,133,28)" fg:x="60419" fg:w="19"/><text x="49.0746%" y="287.50"></text></g><g><title>abi_stable::std_types::arc::private::RArc&lt;T&gt;::data (657 samples, 0.53%)</title><rect x="48.9135%" y="213" width="0.5309%" height="15" fill="rgb(217,180,4)" fg:x="60529" fg:w="657"/><text x="49.1635%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (26 samples, 0.02%)</title><rect x="49.4727%" y="85" width="0.0210%" height="15" fill="rgb(251,24,1)" fg:x="61221" fg:w="26"/><text x="49.7227%" y="95.50"></text></g><g><title>alloc::alloc::dealloc (26 samples, 0.02%)</title><rect x="49.4727%" y="69" width="0.0210%" height="15" fill="rgb(212,185,49)" fg:x="61221" fg:w="26"/><text x="49.7227%" y="79.50"></text></g><g><title>__rg_dealloc (26 samples, 0.02%)</title><rect x="49.4727%" y="53" width="0.0210%" height="15" fill="rgb(215,175,22)" fg:x="61221" fg:w="26"/><text x="49.7227%" y="63.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (26 samples, 0.02%)</title><rect x="49.4727%" y="37" width="0.0210%" height="15" fill="rgb(250,205,14)" fg:x="61221" fg:w="26"/><text x="49.7227%" y="47.50"></text></g><g><title>core::mem::drop (1,136 samples, 0.92%)</title><rect x="49.4727%" y="133" width="0.9180%" height="15" fill="rgb(225,211,22)" fg:x="61221" fg:w="1136"/><text x="49.7227%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (1,136 samples, 0.92%)</title><rect x="49.4727%" y="117" width="0.9180%" height="15" fill="rgb(251,179,42)" fg:x="61221" fg:w="1136"/><text x="49.7227%" y="127.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1,136 samples, 0.92%)</title><rect x="49.4727%" y="101" width="0.9180%" height="15" fill="rgb(208,216,51)" fg:x="61221" fg:w="1136"/><text x="49.7227%" y="111.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1,106 samples, 0.89%)</title><rect x="49.4970%" y="85" width="0.8938%" height="15" fill="rgb(235,36,11)" fg:x="61251" fg:w="1106"/><text x="49.7470%" y="95.50"></text></g><g><title>core::sync::atomic::atomic_sub (1,106 samples, 0.89%)</title><rect x="49.4970%" y="69" width="0.8938%" height="15" fill="rgb(213,189,28)" fg:x="61251" fg:w="1106"/><text x="49.7470%" y="79.50"></text></g><g><title>sn_rust_dealloc (181 samples, 0.15%)</title><rect x="50.4311%" y="85" width="0.1463%" height="15" fill="rgb(227,203,42)" fg:x="62407" fg:w="181"/><text x="50.6811%" y="95.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1,893 samples, 1.53%)</title><rect x="49.4662%" y="149" width="1.5297%" height="15" fill="rgb(244,72,36)" fg:x="61213" fg:w="1893"/><text x="49.7162%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (749 samples, 0.61%)</title><rect x="50.3907%" y="133" width="0.6053%" height="15" fill="rgb(213,53,17)" fg:x="62357" fg:w="749"/><text x="50.6407%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (749 samples, 0.61%)</title><rect x="50.3907%" y="117" width="0.6053%" height="15" fill="rgb(207,167,3)" fg:x="62357" fg:w="749"/><text x="50.6407%" y="127.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (749 samples, 0.61%)</title><rect x="50.3907%" y="101" width="0.6053%" height="15" fill="rgb(216,98,30)" fg:x="62357" fg:w="749"/><text x="50.6407%" y="111.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (518 samples, 0.42%)</title><rect x="50.5774%" y="85" width="0.4186%" height="15" fill="rgb(236,123,15)" fg:x="62588" fg:w="518"/><text x="50.8274%" y="95.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1,322 samples, 1.07%)</title><rect x="50.9960%" y="149" width="1.0683%" height="15" fill="rgb(248,81,50)" fg:x="63106" fg:w="1322"/><text x="51.2460%" y="159.50"></text></g><g><title>core::sync::atomic::atomic_sub (1,322 samples, 1.07%)</title><rect x="50.9960%" y="133" width="1.0683%" height="15" fill="rgb(214,120,4)" fg:x="63106" fg:w="1322"/><text x="51.2460%" y="143.50"></text></g><g><title>sn_rust_dealloc (89 samples, 0.07%)</title><rect x="52.0643%" y="149" width="0.0719%" height="15" fill="rgb(208,179,34)" fg:x="64428" fg:w="89"/><text x="52.3143%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,088 samples, 3.30%)</title><rect x="48.8578%" y="277" width="3.3035%" height="15" fill="rgb(227,140,7)" fg:x="60460" fg:w="4088"/><text x="49.1078%" y="287.50">&lt;al..</text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (4,088 samples, 3.30%)</title><rect x="48.8578%" y="261" width="3.3035%" height="15" fill="rgb(214,22,6)" fg:x="60460" fg:w="4088"/><text x="49.1078%" y="271.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (4,049 samples, 3.27%)</title><rect x="48.8893%" y="245" width="3.2720%" height="15" fill="rgb(207,137,27)" fg:x="60499" fg:w="4049"/><text x="49.1393%" y="255.50">cor..</text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (4,049 samples, 3.27%)</title><rect x="48.8893%" y="229" width="3.2720%" height="15" fill="rgb(210,8,46)" fg:x="60499" fg:w="4049"/><text x="49.1393%" y="239.50">abi..</text></g><g><title>abi_stable::std_types::arc::vtable_mod::destructor_arc (3,362 samples, 2.72%)</title><rect x="49.4444%" y="213" width="2.7168%" height="15" fill="rgb(240,16,54)" fg:x="61186" fg:w="3362"/><text x="49.6944%" y="223.50">ab..</text></g><g><title>core::mem::drop (3,335 samples, 2.70%)</title><rect x="49.4662%" y="197" width="2.6950%" height="15" fill="rgb(211,209,29)" fg:x="61213" fg:w="3335"/><text x="49.7162%" y="207.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (3,335 samples, 2.70%)</title><rect x="49.4662%" y="181" width="2.6950%" height="15" fill="rgb(226,228,24)" fg:x="61213" fg:w="3335"/><text x="49.7162%" y="191.50">co..</text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3,335 samples, 2.70%)</title><rect x="49.4662%" y="165" width="2.6950%" height="15" fill="rgb(222,84,9)" fg:x="61213" fg:w="3335"/><text x="49.7162%" y="175.50">&lt;a..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (31 samples, 0.03%)</title><rect x="52.1362%" y="149" width="0.0251%" height="15" fill="rgb(234,203,30)" fg:x="64517" fg:w="31"/><text x="52.3862%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (27 samples, 0.02%)</title><rect x="52.1613%" y="245" width="0.0218%" height="15" fill="rgb(238,109,14)" fg:x="64548" fg:w="27"/><text x="52.4113%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (27 samples, 0.02%)</title><rect x="52.1613%" y="229" width="0.0218%" height="15" fill="rgb(233,206,34)" fg:x="64548" fg:w="27"/><text x="52.4113%" y="239.50"></text></g><g><title>__rg_dealloc (27 samples, 0.02%)</title><rect x="52.1613%" y="213" width="0.0218%" height="15" fill="rgb(220,167,47)" fg:x="64548" fg:w="27"/><text x="52.4113%" y="223.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (27 samples, 0.02%)</title><rect x="52.1613%" y="197" width="0.0218%" height="15" fill="rgb(238,105,10)" fg:x="64548" fg:w="27"/><text x="52.4113%" y="207.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (4,145 samples, 3.35%)</title><rect x="48.8400%" y="341" width="3.3496%" height="15" fill="rgb(213,227,17)" fg:x="60438" fg:w="4145"/><text x="49.0900%" y="351.50">abi..</text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (4,132 samples, 3.34%)</title><rect x="48.8505%" y="325" width="3.3391%" height="15" fill="rgb(217,132,38)" fg:x="60451" fg:w="4132"/><text x="49.1005%" y="335.50">abi..</text></g><g><title>core::mem::drop (4,123 samples, 3.33%)</title><rect x="48.8578%" y="309" width="3.3318%" height="15" fill="rgb(242,146,4)" fg:x="60460" fg:w="4123"/><text x="49.1078%" y="319.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (4,123 samples, 3.33%)</title><rect x="48.8578%" y="293" width="3.3318%" height="15" fill="rgb(212,61,9)" fg:x="60460" fg:w="4123"/><text x="49.1078%" y="303.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (35 samples, 0.03%)</title><rect x="52.1613%" y="277" width="0.0283%" height="15" fill="rgb(247,126,22)" fg:x="64548" fg:w="35"/><text x="52.4113%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.03%)</title><rect x="52.1613%" y="261" width="0.0283%" height="15" fill="rgb(220,196,2)" fg:x="64548" fg:w="35"/><text x="52.4113%" y="271.50"></text></g><g><title>sn_rust_dealloc (102 samples, 0.08%)</title><rect x="52.1895%" y="341" width="0.0824%" height="15" fill="rgb(208,46,4)" fg:x="64583" fg:w="102"/><text x="52.4395%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (4,254 samples, 3.44%)</title><rect x="48.8400%" y="373" width="3.4377%" height="15" fill="rgb(252,104,46)" fg:x="60438" fg:w="4254"/><text x="49.0900%" y="383.50">cor..</text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (4,254 samples, 3.44%)</title><rect x="48.8400%" y="357" width="3.4377%" height="15" fill="rgb(237,152,48)" fg:x="60438" fg:w="4254"/><text x="49.0900%" y="367.50">abi..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::slices::private::RSlice&lt;u8&gt;,abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="52.2889%" y="341" width="0.0105%" height="15" fill="rgb(221,59,37)" fg:x="64706" fg:w="13"/><text x="52.5389%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (56 samples, 0.05%)</title><rect x="52.2776%" y="373" width="0.0453%" height="15" fill="rgb(209,202,51)" fg:x="64692" fg:w="56"/><text x="52.5276%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (56 samples, 0.05%)</title><rect x="52.2776%" y="357" width="0.0453%" height="15" fill="rgb(228,81,30)" fg:x="64692" fg:w="56"/><text x="52.5276%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (29 samples, 0.02%)</title><rect x="52.2994%" y="341" width="0.0234%" height="15" fill="rgb(227,42,39)" fg:x="64719" fg:w="29"/><text x="52.5494%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (29 samples, 0.02%)</title><rect x="52.2994%" y="325" width="0.0234%" height="15" fill="rgb(221,26,2)" fg:x="64719" fg:w="29"/><text x="52.5494%" y="335.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (29 samples, 0.02%)</title><rect x="52.2994%" y="309" width="0.0234%" height="15" fill="rgb(254,61,31)" fg:x="64719" fg:w="29"/><text x="52.5494%" y="319.50"></text></g><g><title>sn_rust_dealloc (89 samples, 0.07%)</title><rect x="52.3229%" y="373" width="0.0719%" height="15" fill="rgb(222,173,38)" fg:x="64748" fg:w="89"/><text x="52.5729%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (6,215 samples, 5.02%)</title><rect x="47.4363%" y="405" width="5.0223%" height="15" fill="rgb(218,50,12)" fg:x="58701" fg:w="6215"/><text x="47.6863%" y="415.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (4,567 samples, 3.69%)</title><rect x="48.7681%" y="389" width="3.6906%" height="15" fill="rgb(223,88,40)" fg:x="60349" fg:w="4567"/><text x="49.0181%" y="399.50">core..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (79 samples, 0.06%)</title><rect x="52.3948%" y="373" width="0.0638%" height="15" fill="rgb(237,54,19)" fg:x="64837" fg:w="79"/><text x="52.6448%" y="383.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::bucket_for (21 samples, 0.02%)</title><rect x="52.5782%" y="325" width="0.0170%" height="15" fill="rgb(251,129,25)" fg:x="65064" fg:w="21"/><text x="52.8282%" y="335.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::mut_at (60 samples, 0.05%)</title><rect x="52.5556%" y="357" width="0.0485%" height="15" fill="rgb(238,97,19)" fg:x="65036" fg:w="60"/><text x="52.8056%" y="367.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::index_for (52 samples, 0.04%)</title><rect x="52.5621%" y="341" width="0.0420%" height="15" fill="rgb(240,169,18)" fg:x="65044" fg:w="52"/><text x="52.8121%" y="351.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (172 samples, 0.14%)</title><rect x="52.4764%" y="405" width="0.1390%" height="15" fill="rgb(230,187,49)" fg:x="64938" fg:w="172"/><text x="52.7264%" y="415.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n (167 samples, 0.13%)</title><rect x="52.4805%" y="389" width="0.1350%" height="15" fill="rgb(209,44,26)" fg:x="64943" fg:w="167"/><text x="52.7305%" y="399.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n_inner (167 samples, 0.13%)</title><rect x="52.4805%" y="373" width="0.1350%" height="15" fill="rgb(244,0,6)" fg:x="64943" fg:w="167"/><text x="52.7305%" y="383.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::update_min_max (14 samples, 0.01%)</title><rect x="52.6041%" y="357" width="0.0113%" height="15" fill="rgb(248,18,21)" fg:x="65096" fg:w="14"/><text x="52.8541%" y="367.50"></text></g><g><title>sn_rust_dealloc (66 samples, 0.05%)</title><rect x="52.6154%" y="405" width="0.0533%" height="15" fill="rgb(245,180,19)" fg:x="65110" fg:w="66"/><text x="52.8654%" y="415.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (105 samples, 0.08%)</title><rect x="52.6688%" y="405" width="0.0849%" height="15" fill="rgb(252,118,36)" fg:x="65176" fg:w="105"/><text x="52.9188%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (41 samples, 0.03%)</title><rect x="52.7875%" y="389" width="0.0331%" height="15" fill="rgb(210,224,19)" fg:x="65323" fg:w="41"/><text x="53.0375%" y="399.50"></text></g><g><title>core::time::Duration::as_nanos (55 samples, 0.04%)</title><rect x="52.8207%" y="389" width="0.0444%" height="15" fill="rgb(218,30,24)" fg:x="65364" fg:w="55"/><text x="53.0707%" y="399.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (159 samples, 0.13%)</title><rect x="52.8651%" y="373" width="0.1285%" height="15" fill="rgb(219,75,50)" fg:x="65419" fg:w="159"/><text x="53.1151%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (65 samples, 0.05%)</title><rect x="53.0469%" y="341" width="0.0525%" height="15" fill="rgb(234,72,50)" fg:x="65644" fg:w="65"/><text x="53.2969%" y="351.50"></text></g><g><title>core::cmp::PartialOrd::ge (65 samples, 0.05%)</title><rect x="53.0469%" y="325" width="0.0525%" height="15" fill="rgb(219,100,48)" fg:x="65644" fg:w="65"/><text x="53.2969%" y="335.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (65 samples, 0.05%)</title><rect x="53.0469%" y="309" width="0.0525%" height="15" fill="rgb(253,5,41)" fg:x="65644" fg:w="65"/><text x="53.2969%" y="319.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (65 samples, 0.05%)</title><rect x="53.0469%" y="293" width="0.0525%" height="15" fill="rgb(247,181,11)" fg:x="65644" fg:w="65"/><text x="53.2969%" y="303.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (65 samples, 0.05%)</title><rect x="53.0469%" y="277" width="0.0525%" height="15" fill="rgb(222,223,25)" fg:x="65644" fg:w="65"/><text x="53.2969%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (38 samples, 0.03%)</title><rect x="53.0688%" y="261" width="0.0307%" height="15" fill="rgb(214,198,28)" fg:x="65671" fg:w="38"/><text x="53.3188%" y="271.50"></text></g><g><title>std::time::SystemTime::duration_since (320 samples, 0.26%)</title><rect x="52.8651%" y="389" width="0.2586%" height="15" fill="rgb(230,46,43)" fg:x="65419" fg:w="320"/><text x="53.1151%" y="399.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (161 samples, 0.13%)</title><rect x="52.9936%" y="373" width="0.1301%" height="15" fill="rgb(233,65,53)" fg:x="65578" fg:w="161"/><text x="53.2436%" y="383.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (161 samples, 0.13%)</title><rect x="52.9936%" y="357" width="0.1301%" height="15" fill="rgb(221,121,27)" fg:x="65578" fg:w="161"/><text x="53.2436%" y="367.50"></text></g><g><title>core::time::Duration::new (30 samples, 0.02%)</title><rect x="53.0995%" y="341" width="0.0242%" height="15" fill="rgb(247,70,47)" fg:x="65709" fg:w="30"/><text x="53.3495%" y="351.50"></text></g><g><title>tremor_common::time::nanotime (1,178 samples, 0.95%)</title><rect x="52.7536%" y="405" width="0.9519%" height="15" fill="rgb(228,85,35)" fg:x="65281" fg:w="1178"/><text x="53.0036%" y="415.50"></text></g><g><title>std::time::SystemTime::now (720 samples, 0.58%)</title><rect x="53.1237%" y="389" width="0.5818%" height="15" fill="rgb(209,50,18)" fg:x="65739" fg:w="720"/><text x="53.3737%" y="399.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (720 samples, 0.58%)</title><rect x="53.1237%" y="373" width="0.5818%" height="15" fill="rgb(250,19,35)" fg:x="65739" fg:w="720"/><text x="53.3737%" y="383.50"></text></g><g><title>std::sys::unix::time::inner::now (720 samples, 0.58%)</title><rect x="53.1237%" y="357" width="0.5818%" height="15" fill="rgb(253,107,29)" fg:x="65739" fg:w="720"/><text x="53.3737%" y="367.50"></text></g><g><title>__clock_gettime (581 samples, 0.47%)</title><rect x="53.2360%" y="341" width="0.4695%" height="15" fill="rgb(252,179,29)" fg:x="65878" fg:w="581"/><text x="53.4860%" y="351.50"></text></g><g><title>__vdso_clock_gettime (559 samples, 0.45%)</title><rect x="53.2538%" y="325" width="0.4517%" height="15" fill="rgb(238,194,6)" fg:x="65900" fg:w="559"/><text x="53.5038%" y="335.50"></text></g><g><title>[[vdso]] (493 samples, 0.40%)</title><rect x="53.3072%" y="309" width="0.3984%" height="15" fill="rgb(238,164,29)" fg:x="65966" fg:w="493"/><text x="53.5572%" y="319.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (215 samples, 0.17%)</title><rect x="53.7225%" y="389" width="0.1737%" height="15" fill="rgb(224,25,9)" fg:x="66480" fg:w="215"/><text x="53.9725%" y="399.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (9,131 samples, 7.38%)</title><rect x="46.5280%" y="693" width="7.3788%" height="15" fill="rgb(244,153,23)" fg:x="57577" fg:w="9131"/><text x="46.7780%" y="703.50">tremor_run..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,131 samples, 7.38%)</title><rect x="46.5280%" y="677" width="7.3788%" height="15" fill="rgb(212,203,14)" fg:x="57577" fg:w="9131"/><text x="46.7780%" y="687.50">&lt;core::fut..</text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (9,131 samples, 7.38%)</title><rect x="46.5280%" y="661" width="7.3788%" height="15" fill="rgb(220,164,20)" fg:x="57577" fg:w="9131"/><text x="46.7780%" y="671.50">tremor_run..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,131 samples, 7.38%)</title><rect x="46.5280%" y="645" width="7.3788%" height="15" fill="rgb(222,203,48)" fg:x="57577" fg:w="9131"/><text x="46.7780%" y="655.50">&lt;async_ffi..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,131 samples, 7.38%)</title><rect x="46.5280%" y="629" width="7.3788%" height="15" fill="rgb(215,159,22)" fg:x="57577" fg:w="9131"/><text x="46.7780%" y="639.50">&lt;async_ffi..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (9,131 samples, 7.38%)</title><rect x="46.5280%" y="613" width="7.3788%" height="15" fill="rgb(216,183,47)" fg:x="57577" fg:w="9131"/><text x="46.7780%" y="623.50">&lt;core::tas..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (9,131 samples, 7.38%)</title><rect x="46.5280%" y="597" width="7.3788%" height="15" fill="rgb(229,195,25)" fg:x="57577" fg:w="9131"/><text x="46.7780%" y="607.50">&lt;async_ffi..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (9,131 samples, 7.38%)</title><rect x="46.5280%" y="581" width="7.3788%" height="15" fill="rgb(224,132,51)" fg:x="57577" fg:w="9131"/><text x="46.7780%" y="591.50">async_ffi:..</text></g><g><title>std::panic::catch_unwind (9,131 samples, 7.38%)</title><rect x="46.5280%" y="565" width="7.3788%" height="15" fill="rgb(240,63,7)" fg:x="57577" fg:w="9131"/><text x="46.7780%" y="575.50">std::panic..</text></g><g><title>std::panicking::try (9,131 samples, 7.38%)</title><rect x="46.5280%" y="549" width="7.3788%" height="15" fill="rgb(249,182,41)" fg:x="57577" fg:w="9131"/><text x="46.7780%" y="559.50">std::panic..</text></g><g><title>std::panicking::try::do_call (9,131 samples, 7.38%)</title><rect x="46.5280%" y="533" width="7.3788%" height="15" fill="rgb(243,47,26)" fg:x="57577" fg:w="9131"/><text x="46.7780%" y="543.50">std::panic..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (9,131 samples, 7.38%)</title><rect x="46.5280%" y="517" width="7.3788%" height="15" fill="rgb(233,48,2)" fg:x="57577" fg:w="9131"/><text x="46.7780%" y="527.50">&lt;core::pan..</text></g><g><title>core::ops::function::FnOnce::call_once (9,131 samples, 7.38%)</title><rect x="46.5280%" y="501" width="7.3788%" height="15" fill="rgb(244,165,34)" fg:x="57577" fg:w="9131"/><text x="46.7780%" y="511.50">core::ops:..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (9,131 samples, 7.38%)</title><rect x="46.5280%" y="485" width="7.3788%" height="15" fill="rgb(207,89,7)" fg:x="57577" fg:w="9131"/><text x="46.7780%" y="495.50">async_ffi:..</text></g><g><title>async_ffi::FfiContext::with_context (9,131 samples, 7.38%)</title><rect x="46.5280%" y="469" width="7.3788%" height="15" fill="rgb(244,117,36)" fg:x="57577" fg:w="9131"/><text x="46.7780%" y="479.50">async_ffi:..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (9,131 samples, 7.38%)</title><rect x="46.5280%" y="453" width="7.3788%" height="15" fill="rgb(226,144,34)" fg:x="57577" fg:w="9131"/><text x="46.7780%" y="463.50">async_ffi:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,131 samples, 7.38%)</title><rect x="46.5280%" y="437" width="7.3788%" height="15" fill="rgb(213,23,19)" fg:x="57577" fg:w="9131"/><text x="46.7780%" y="447.50">&lt;core::fut..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (9,096 samples, 7.35%)</title><rect x="46.5563%" y="421" width="7.3505%" height="15" fill="rgb(217,75,12)" fg:x="57612" fg:w="9096"/><text x="46.8063%" y="431.50">&lt;tremor_ru..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (249 samples, 0.20%)</title><rect x="53.7055%" y="405" width="0.2012%" height="15" fill="rgb(224,159,17)" fg:x="66459" fg:w="249"/><text x="53.9555%" y="415.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::_::&lt;impl tremor_runtime::connectors::sink::EventSerializerOpaque_trait::VTableInner_Ref&lt;_Self,_ErasedPtr&gt;&gt;::serialize (13 samples, 0.01%)</title><rect x="53.8963%" y="389" width="0.0105%" height="15" fill="rgb(217,118,1)" fg:x="66695" fg:w="13"/><text x="54.1463%" y="399.50"></text></g><g><title>abi_stable::prefix_type::prefix_ref::PrefixRef&lt;P&gt;::metadata (13 samples, 0.01%)</title><rect x="53.8963%" y="373" width="0.0105%" height="15" fill="rgb(232,180,48)" fg:x="66695" fg:w="13"/><text x="54.1463%" y="383.50"></text></g><g><title>[libc-2.31.so] (179 samples, 0.14%)</title><rect x="53.9165%" y="565" width="0.1446%" height="15" fill="rgb(230,27,33)" fg:x="66720" fg:w="179"/><text x="54.1665%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (284 samples, 0.23%)</title><rect x="54.2284%" y="485" width="0.2295%" height="15" fill="rgb(205,31,21)" fg:x="67106" fg:w="284"/><text x="54.4784%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (284 samples, 0.23%)</title><rect x="54.2284%" y="469" width="0.2295%" height="15" fill="rgb(253,59,4)" fg:x="67106" fg:w="284"/><text x="54.4784%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (424 samples, 0.34%)</title><rect x="54.4579%" y="485" width="0.3426%" height="15" fill="rgb(224,201,9)" fg:x="67390" fg:w="424"/><text x="54.7079%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_load (420 samples, 0.34%)</title><rect x="54.4611%" y="469" width="0.3394%" height="15" fill="rgb(229,206,30)" fg:x="67394" fg:w="420"/><text x="54.7111%" y="479.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (820 samples, 0.66%)</title><rect x="54.1411%" y="517" width="0.6626%" height="15" fill="rgb(212,67,47)" fg:x="66998" fg:w="820"/><text x="54.3911%" y="527.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (793 samples, 0.64%)</title><rect x="54.1629%" y="501" width="0.6408%" height="15" fill="rgb(211,96,50)" fg:x="67025" fg:w="793"/><text x="54.4129%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (140 samples, 0.11%)</title><rect x="54.8151%" y="501" width="0.1131%" height="15" fill="rgb(252,114,18)" fg:x="67832" fg:w="140"/><text x="55.0651%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (136 samples, 0.11%)</title><rect x="54.8183%" y="485" width="0.1099%" height="15" fill="rgb(223,58,37)" fg:x="67836" fg:w="136"/><text x="55.0683%" y="495.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (136 samples, 0.11%)</title><rect x="54.8183%" y="469" width="0.1099%" height="15" fill="rgb(237,70,4)" fg:x="67836" fg:w="136"/><text x="55.0683%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (135 samples, 0.11%)</title><rect x="54.8191%" y="453" width="0.1091%" height="15" fill="rgb(244,85,46)" fg:x="67837" fg:w="135"/><text x="55.0691%" y="463.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (135 samples, 0.11%)</title><rect x="54.8191%" y="437" width="0.1091%" height="15" fill="rgb(223,39,52)" fg:x="67837" fg:w="135"/><text x="55.0691%" y="447.50"></text></g><g><title>__GI___pthread_mutex_unlock (135 samples, 0.11%)</title><rect x="54.8191%" y="421" width="0.1091%" height="15" fill="rgb(218,200,14)" fg:x="67837" fg:w="135"/><text x="55.0691%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (26 samples, 0.02%)</title><rect x="54.9282%" y="501" width="0.0210%" height="15" fill="rgb(208,171,16)" fg:x="67972" fg:w="26"/><text x="55.1782%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_load (26 samples, 0.02%)</title><rect x="54.9282%" y="485" width="0.0210%" height="15" fill="rgb(234,200,18)" fg:x="67972" fg:w="26"/><text x="55.1782%" y="495.50"></text></g><g><title>event_listener::Inner::lock (171 samples, 0.14%)</title><rect x="54.9492%" y="501" width="0.1382%" height="15" fill="rgb(228,45,11)" fg:x="67998" fg:w="171"/><text x="55.1992%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (169 samples, 0.14%)</title><rect x="54.9508%" y="485" width="0.1366%" height="15" fill="rgb(237,182,11)" fg:x="68000" fg:w="169"/><text x="55.2008%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (163 samples, 0.13%)</title><rect x="54.9557%" y="469" width="0.1317%" height="15" fill="rgb(241,175,49)" fg:x="68006" fg:w="163"/><text x="55.2057%" y="479.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (157 samples, 0.13%)</title><rect x="54.9605%" y="453" width="0.1269%" height="15" fill="rgb(247,38,35)" fg:x="68012" fg:w="157"/><text x="55.2105%" y="463.50"></text></g><g><title>__GI___pthread_mutex_lock (157 samples, 0.13%)</title><rect x="54.9605%" y="437" width="0.1269%" height="15" fill="rgb(228,39,49)" fg:x="68012" fg:w="157"/><text x="55.2105%" y="447.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_waker (34 samples, 0.03%)</title><rect x="55.0955%" y="453" width="0.0275%" height="15" fill="rgb(226,101,26)" fg:x="68179" fg:w="34"/><text x="55.3455%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (33 samples, 0.03%)</title><rect x="55.0963%" y="437" width="0.0267%" height="15" fill="rgb(206,141,19)" fg:x="68180" fg:w="33"/><text x="55.3463%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_sub (33 samples, 0.03%)</title><rect x="55.0963%" y="421" width="0.0267%" height="15" fill="rgb(211,200,13)" fg:x="68180" fg:w="33"/><text x="55.3463%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (81 samples, 0.07%)</title><rect x="55.1335%" y="405" width="0.0655%" height="15" fill="rgb(241,121,6)" fg:x="68226" fg:w="81"/><text x="55.3835%" y="415.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (81 samples, 0.07%)</title><rect x="55.1335%" y="389" width="0.0655%" height="15" fill="rgb(234,221,29)" fg:x="68226" fg:w="81"/><text x="55.3835%" y="399.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (80 samples, 0.06%)</title><rect x="55.1343%" y="373" width="0.0646%" height="15" fill="rgb(229,136,5)" fg:x="68227" fg:w="80"/><text x="55.3843%" y="383.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (80 samples, 0.06%)</title><rect x="55.1343%" y="357" width="0.0646%" height="15" fill="rgb(238,36,11)" fg:x="68227" fg:w="80"/><text x="55.3843%" y="367.50"></text></g><g><title>__GI___pthread_mutex_unlock (80 samples, 0.06%)</title><rect x="55.1343%" y="341" width="0.0646%" height="15" fill="rgb(251,55,41)" fg:x="68227" fg:w="80"/><text x="55.3843%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (26 samples, 0.02%)</title><rect x="55.1989%" y="405" width="0.0210%" height="15" fill="rgb(242,34,40)" fg:x="68307" fg:w="26"/><text x="55.4489%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (26 samples, 0.02%)</title><rect x="55.1989%" y="389" width="0.0210%" height="15" fill="rgb(215,42,17)" fg:x="68307" fg:w="26"/><text x="55.4489%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (15 samples, 0.01%)</title><rect x="55.2232%" y="325" width="0.0121%" height="15" fill="rgb(207,44,46)" fg:x="68337" fg:w="15"/><text x="55.4732%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (15 samples, 0.01%)</title><rect x="55.2232%" y="309" width="0.0121%" height="15" fill="rgb(211,206,28)" fg:x="68337" fg:w="15"/><text x="55.4732%" y="319.50"></text></g><g><title>async_io::reactor::Reactor::notify (20 samples, 0.02%)</title><rect x="55.2215%" y="357" width="0.0162%" height="15" fill="rgb(237,167,16)" fg:x="68335" fg:w="20"/><text x="55.4715%" y="367.50"></text></g><g><title>polling::Poller::notify (18 samples, 0.01%)</title><rect x="55.2232%" y="341" width="0.0145%" height="15" fill="rgb(233,66,6)" fg:x="68337" fg:w="18"/><text x="55.4732%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (31 samples, 0.03%)</title><rect x="55.2522%" y="325" width="0.0251%" height="15" fill="rgb(246,123,29)" fg:x="68373" fg:w="31"/><text x="55.5022%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_swap (31 samples, 0.03%)</title><rect x="55.2522%" y="309" width="0.0251%" height="15" fill="rgb(209,62,40)" fg:x="68373" fg:w="31"/><text x="55.5022%" y="319.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (78 samples, 0.06%)</title><rect x="55.2773%" y="325" width="0.0630%" height="15" fill="rgb(218,4,25)" fg:x="68404" fg:w="78"/><text x="55.5273%" y="335.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (78 samples, 0.06%)</title><rect x="55.2773%" y="309" width="0.0630%" height="15" fill="rgb(253,91,49)" fg:x="68404" fg:w="78"/><text x="55.5273%" y="319.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (78 samples, 0.06%)</title><rect x="55.2773%" y="293" width="0.0630%" height="15" fill="rgb(228,155,29)" fg:x="68404" fg:w="78"/><text x="55.5273%" y="303.50"></text></g><g><title>__pthread_cond_signal (78 samples, 0.06%)</title><rect x="55.2773%" y="277" width="0.0630%" height="15" fill="rgb(243,57,37)" fg:x="68404" fg:w="78"/><text x="55.5273%" y="287.50"></text></g><g><title>parking::Unparker::unpark (176 samples, 0.14%)</title><rect x="55.2409%" y="357" width="0.1422%" height="15" fill="rgb(244,167,17)" fg:x="68359" fg:w="176"/><text x="55.4909%" y="367.50"></text></g><g><title>parking::Inner::unpark (173 samples, 0.14%)</title><rect x="55.2434%" y="341" width="0.1398%" height="15" fill="rgb(207,181,38)" fg:x="68362" fg:w="173"/><text x="55.4934%" y="351.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (53 samples, 0.04%)</title><rect x="55.3403%" y="325" width="0.0428%" height="15" fill="rgb(211,8,23)" fg:x="68482" fg:w="53"/><text x="55.5903%" y="335.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (51 samples, 0.04%)</title><rect x="55.3419%" y="309" width="0.0412%" height="15" fill="rgb(235,11,44)" fg:x="68484" fg:w="51"/><text x="55.5919%" y="319.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (50 samples, 0.04%)</title><rect x="55.3428%" y="293" width="0.0404%" height="15" fill="rgb(248,18,52)" fg:x="68485" fg:w="50"/><text x="55.5928%" y="303.50"></text></g><g><title>__GI___pthread_mutex_lock (50 samples, 0.04%)</title><rect x="55.3428%" y="277" width="0.0404%" height="15" fill="rgb(208,4,7)" fg:x="68485" fg:w="50"/><text x="55.5928%" y="287.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (209 samples, 0.17%)</title><rect x="55.2199%" y="373" width="0.1689%" height="15" fill="rgb(240,17,39)" fg:x="68333" fg:w="209"/><text x="55.4699%" y="383.50"></text></g><g><title>core::task::wake::Waker::wake (266 samples, 0.21%)</title><rect x="55.2199%" y="405" width="0.2150%" height="15" fill="rgb(207,170,3)" fg:x="68333" fg:w="266"/><text x="55.4699%" y="415.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (266 samples, 0.21%)</title><rect x="55.2199%" y="389" width="0.2150%" height="15" fill="rgb(236,100,52)" fg:x="68333" fg:w="266"/><text x="55.4699%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (57 samples, 0.05%)</title><rect x="55.3888%" y="373" width="0.0461%" height="15" fill="rgb(246,78,51)" fg:x="68542" fg:w="57"/><text x="55.6388%" y="383.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (57 samples, 0.05%)</title><rect x="55.3888%" y="357" width="0.0461%" height="15" fill="rgb(211,17,15)" fg:x="68542" fg:w="57"/><text x="55.6388%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (54 samples, 0.04%)</title><rect x="55.3912%" y="341" width="0.0436%" height="15" fill="rgb(209,59,46)" fg:x="68545" fg:w="54"/><text x="55.6412%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_sub (54 samples, 0.04%)</title><rect x="55.3912%" y="325" width="0.0436%" height="15" fill="rgb(210,92,25)" fg:x="68545" fg:w="54"/><text x="55.6412%" y="335.50"></text></g><g><title>async_executor::State::notify (460 samples, 0.37%)</title><rect x="55.1294%" y="421" width="0.3717%" height="15" fill="rgb(238,174,52)" fg:x="68221" fg:w="460"/><text x="55.3794%" y="431.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (82 samples, 0.07%)</title><rect x="55.4349%" y="405" width="0.0663%" height="15" fill="rgb(230,73,7)" fg:x="68599" fg:w="82"/><text x="55.6849%" y="415.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (81 samples, 0.07%)</title><rect x="55.4357%" y="389" width="0.0655%" height="15" fill="rgb(243,124,40)" fg:x="68600" fg:w="81"/><text x="55.6857%" y="399.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (77 samples, 0.06%)</title><rect x="55.4389%" y="373" width="0.0622%" height="15" fill="rgb(244,170,11)" fg:x="68604" fg:w="77"/><text x="55.6889%" y="383.50"></text></g><g><title>__GI___pthread_mutex_lock (77 samples, 0.06%)</title><rect x="55.4389%" y="357" width="0.0622%" height="15" fill="rgb(207,114,54)" fg:x="68604" fg:w="77"/><text x="55.6889%" y="367.50"></text></g><g><title>__lll_lock_wait (14 samples, 0.01%)</title><rect x="55.4898%" y="341" width="0.0113%" height="15" fill="rgb(205,42,20)" fg:x="68667" fg:w="14"/><text x="55.7398%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (91 samples, 0.07%)</title><rect x="55.5100%" y="389" width="0.0735%" height="15" fill="rgb(230,30,28)" fg:x="68692" fg:w="91"/><text x="55.7600%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (91 samples, 0.07%)</title><rect x="55.5100%" y="373" width="0.0735%" height="15" fill="rgb(205,73,54)" fg:x="68692" fg:w="91"/><text x="55.7600%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (46 samples, 0.04%)</title><rect x="55.5852%" y="389" width="0.0372%" height="15" fill="rgb(254,227,23)" fg:x="68785" fg:w="46"/><text x="55.8352%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_or (46 samples, 0.04%)</title><rect x="55.5852%" y="373" width="0.0372%" height="15" fill="rgb(228,202,34)" fg:x="68785" fg:w="46"/><text x="55.8352%" y="383.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (612 samples, 0.49%)</title><rect x="55.1294%" y="437" width="0.4946%" height="15" fill="rgb(222,225,37)" fg:x="68221" fg:w="612"/><text x="55.3794%" y="447.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (152 samples, 0.12%)</title><rect x="55.5011%" y="421" width="0.1228%" height="15" fill="rgb(221,14,54)" fg:x="68681" fg:w="152"/><text x="55.7511%" y="431.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (148 samples, 0.12%)</title><rect x="55.5044%" y="405" width="0.1196%" height="15" fill="rgb(254,102,2)" fg:x="68685" fg:w="148"/><text x="55.7544%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (114 samples, 0.09%)</title><rect x="55.6240%" y="437" width="0.0921%" height="15" fill="rgb(232,104,17)" fg:x="68833" fg:w="114"/><text x="55.8740%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (114 samples, 0.09%)</title><rect x="55.6240%" y="421" width="0.0921%" height="15" fill="rgb(250,220,14)" fg:x="68833" fg:w="114"/><text x="55.8740%" y="431.50"></text></g><g><title>event_listener::List::notify (798 samples, 0.64%)</title><rect x="55.0874%" y="501" width="0.6449%" height="15" fill="rgb(241,158,9)" fg:x="68169" fg:w="798"/><text x="55.3374%" y="511.50"></text></g><g><title>core::task::wake::Waker::wake (789 samples, 0.64%)</title><rect x="55.0947%" y="485" width="0.6376%" height="15" fill="rgb(246,9,43)" fg:x="68178" fg:w="789"/><text x="55.3447%" y="495.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (789 samples, 0.64%)</title><rect x="55.0947%" y="469" width="0.6376%" height="15" fill="rgb(206,73,33)" fg:x="68178" fg:w="789"/><text x="55.3447%" y="479.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (754 samples, 0.61%)</title><rect x="55.1230%" y="453" width="0.6093%" height="15" fill="rgb(222,79,8)" fg:x="68213" fg:w="754"/><text x="55.3730%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (20 samples, 0.02%)</title><rect x="55.7161%" y="437" width="0.0162%" height="15" fill="rgb(234,8,54)" fg:x="68947" fg:w="20"/><text x="55.9661%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (20 samples, 0.02%)</title><rect x="55.7161%" y="421" width="0.0162%" height="15" fill="rgb(209,134,38)" fg:x="68947" fg:w="20"/><text x="55.9661%" y="431.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (2,630 samples, 2.13%)</title><rect x="54.1225%" y="533" width="2.1253%" height="15" fill="rgb(230,127,29)" fg:x="66975" fg:w="2630"/><text x="54.3725%" y="543.50">a..</text></g><g><title>event_listener::Event::notify (1,787 samples, 1.44%)</title><rect x="54.8038%" y="517" width="1.4441%" height="15" fill="rgb(242,44,41)" fg:x="67818" fg:w="1787"/><text x="55.0538%" y="527.50"></text></g><g><title>event_listener::full_fence (638 samples, 0.52%)</title><rect x="55.7323%" y="501" width="0.5156%" height="15" fill="rgb(222,56,43)" fg:x="68967" fg:w="638"/><text x="55.9823%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (629 samples, 0.51%)</title><rect x="55.7395%" y="485" width="0.5083%" height="15" fill="rgb(238,39,47)" fg:x="68976" fg:w="629"/><text x="55.9895%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (629 samples, 0.51%)</title><rect x="55.7395%" y="469" width="0.5083%" height="15" fill="rgb(226,79,43)" fg:x="68976" fg:w="629"/><text x="55.9895%" y="479.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::capacity (23 samples, 0.02%)</title><rect x="56.2478%" y="533" width="0.0186%" height="15" fill="rgb(242,105,53)" fg:x="69605" fg:w="23"/><text x="56.4978%" y="543.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (2,877 samples, 2.32%)</title><rect x="54.0894%" y="549" width="2.3249%" height="15" fill="rgb(251,132,46)" fg:x="66934" fg:w="2877"/><text x="54.3394%" y="559.50">&lt;..</text></g><g><title>event_listener::Event::notify (176 samples, 0.14%)</title><rect x="56.2721%" y="533" width="0.1422%" height="15" fill="rgb(231,77,14)" fg:x="69635" fg:w="176"/><text x="56.5221%" y="543.50"></text></g><g><title>event_listener::full_fence (170 samples, 0.14%)</title><rect x="56.2769%" y="517" width="0.1374%" height="15" fill="rgb(240,135,9)" fg:x="69641" fg:w="170"/><text x="56.5269%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (162 samples, 0.13%)</title><rect x="56.2834%" y="501" width="0.1309%" height="15" fill="rgb(248,109,14)" fg:x="69649" fg:w="162"/><text x="56.5334%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (162 samples, 0.13%)</title><rect x="56.2834%" y="485" width="0.1309%" height="15" fill="rgb(227,146,52)" fg:x="69649" fg:w="162"/><text x="56.5334%" y="495.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,115 samples, 2.52%)</title><rect x="53.9068%" y="613" width="2.5172%" height="15" fill="rgb(232,54,3)" fg:x="66708" fg:w="3115"/><text x="54.1568%" y="623.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (3,115 samples, 2.52%)</title><rect x="53.9068%" y="597" width="2.5172%" height="15" fill="rgb(229,201,43)" fg:x="66708" fg:w="3115"/><text x="54.1568%" y="607.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,115 samples, 2.52%)</title><rect x="53.9068%" y="581" width="2.5172%" height="15" fill="rgb(252,161,33)" fg:x="66708" fg:w="3115"/><text x="54.1568%" y="591.50">&lt;c..</text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (2,924 samples, 2.36%)</title><rect x="54.0611%" y="565" width="2.3629%" height="15" fill="rgb(226,146,40)" fg:x="66899" fg:w="2924"/><text x="54.3111%" y="575.50">tr..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 0.04%)</title><rect x="56.9775%" y="597" width="0.0372%" height="15" fill="rgb(219,47,25)" fg:x="70508" fg:w="46"/><text x="57.2275%" y="607.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (14 samples, 0.01%)</title><rect x="57.4567%" y="549" width="0.0113%" height="15" fill="rgb(250,135,13)" fg:x="71101" fg:w="14"/><text x="57.7067%" y="559.50"></text></g><g><title>&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt; as core::convert::From&lt;alloc::vec::Vec&lt;T&gt;&gt;&gt;::from (14 samples, 0.01%)</title><rect x="57.4567%" y="533" width="0.0113%" height="15" fill="rgb(219,229,18)" fg:x="71101" fg:w="14"/><text x="57.7067%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (150 samples, 0.12%)</title><rect x="57.4745%" y="469" width="0.1212%" height="15" fill="rgb(217,152,27)" fg:x="71123" fg:w="150"/><text x="57.7245%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (150 samples, 0.12%)</title><rect x="57.4745%" y="453" width="0.1212%" height="15" fill="rgb(225,71,47)" fg:x="71123" fg:w="150"/><text x="57.7245%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (150 samples, 0.12%)</title><rect x="57.4745%" y="437" width="0.1212%" height="15" fill="rgb(220,139,14)" fg:x="71123" fg:w="150"/><text x="57.7245%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (150 samples, 0.12%)</title><rect x="57.4745%" y="421" width="0.1212%" height="15" fill="rgb(247,54,32)" fg:x="71123" fg:w="150"/><text x="57.7245%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (150 samples, 0.12%)</title><rect x="57.4745%" y="405" width="0.1212%" height="15" fill="rgb(252,131,39)" fg:x="71123" fg:w="150"/><text x="57.7245%" y="415.50"></text></g><g><title>alloc::alloc::alloc (140 samples, 0.11%)</title><rect x="57.4826%" y="389" width="0.1131%" height="15" fill="rgb(210,108,39)" fg:x="71133" fg:w="140"/><text x="57.7326%" y="399.50"></text></g><g><title>__rg_alloc (140 samples, 0.11%)</title><rect x="57.4826%" y="373" width="0.1131%" height="15" fill="rgb(205,23,29)" fg:x="71133" fg:w="140"/><text x="57.7326%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (140 samples, 0.11%)</title><rect x="57.4826%" y="357" width="0.1131%" height="15" fill="rgb(246,139,46)" fg:x="71133" fg:w="140"/><text x="57.7326%" y="367.50"></text></g><g><title>sn_rust_alloc (121 samples, 0.10%)</title><rect x="57.4980%" y="341" width="0.0978%" height="15" fill="rgb(250,81,26)" fg:x="71152" fg:w="121"/><text x="57.7480%" y="351.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (47 samples, 0.04%)</title><rect x="57.5578%" y="325" width="0.0380%" height="15" fill="rgb(214,104,7)" fg:x="71226" fg:w="47"/><text x="57.8078%" y="335.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (232 samples, 0.19%)</title><rect x="57.4503%" y="581" width="0.1875%" height="15" fill="rgb(233,189,8)" fg:x="71093" fg:w="232"/><text x="57.7003%" y="591.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (224 samples, 0.18%)</title><rect x="57.4567%" y="565" width="0.1810%" height="15" fill="rgb(228,141,17)" fg:x="71101" fg:w="224"/><text x="57.7067%" y="575.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (210 samples, 0.17%)</title><rect x="57.4681%" y="549" width="0.1697%" height="15" fill="rgb(247,157,1)" fg:x="71115" fg:w="210"/><text x="57.7181%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (202 samples, 0.16%)</title><rect x="57.4745%" y="533" width="0.1632%" height="15" fill="rgb(249,225,5)" fg:x="71123" fg:w="202"/><text x="57.7245%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (202 samples, 0.16%)</title><rect x="57.4745%" y="517" width="0.1632%" height="15" fill="rgb(242,55,13)" fg:x="71123" fg:w="202"/><text x="57.7245%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (202 samples, 0.16%)</title><rect x="57.4745%" y="501" width="0.1632%" height="15" fill="rgb(230,49,50)" fg:x="71123" fg:w="202"/><text x="57.7245%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (202 samples, 0.16%)</title><rect x="57.4745%" y="485" width="0.1632%" height="15" fill="rgb(241,111,38)" fg:x="71123" fg:w="202"/><text x="57.7245%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (52 samples, 0.04%)</title><rect x="57.5957%" y="469" width="0.0420%" height="15" fill="rgb(252,155,4)" fg:x="71273" fg:w="52"/><text x="57.8457%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (52 samples, 0.04%)</title><rect x="57.5957%" y="453" width="0.0420%" height="15" fill="rgb(212,69,32)" fg:x="71273" fg:w="52"/><text x="57.8457%" y="463.50"></text></g><g><title>[libc-2.31.so] (39 samples, 0.03%)</title><rect x="57.6062%" y="437" width="0.0315%" height="15" fill="rgb(243,107,47)" fg:x="71286" fg:w="39"/><text x="57.8562%" y="447.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (18 samples, 0.01%)</title><rect x="57.6499%" y="565" width="0.0145%" height="15" fill="rgb(247,130,12)" fg:x="71340" fg:w="18"/><text x="57.8999%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt; as core::convert::From&lt;alloc::vec::Vec&lt;T&gt;&gt;&gt;::from (14 samples, 0.01%)</title><rect x="57.6531%" y="549" width="0.0113%" height="15" fill="rgb(233,74,16)" fg:x="71344" fg:w="14"/><text x="57.9031%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (43 samples, 0.03%)</title><rect x="57.6774%" y="373" width="0.0347%" height="15" fill="rgb(208,58,18)" fg:x="71374" fg:w="43"/><text x="57.9274%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (43 samples, 0.03%)</title><rect x="57.6774%" y="357" width="0.0347%" height="15" fill="rgb(242,225,1)" fg:x="71374" fg:w="43"/><text x="57.9274%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (43 samples, 0.03%)</title><rect x="57.6774%" y="341" width="0.0347%" height="15" fill="rgb(249,39,40)" fg:x="71374" fg:w="43"/><text x="57.9274%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (38 samples, 0.03%)</title><rect x="57.6814%" y="325" width="0.0307%" height="15" fill="rgb(207,72,44)" fg:x="71379" fg:w="38"/><text x="57.9314%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (38 samples, 0.03%)</title><rect x="57.6814%" y="309" width="0.0307%" height="15" fill="rgb(215,193,12)" fg:x="71379" fg:w="38"/><text x="57.9314%" y="319.50"></text></g><g><title>alloc::alloc::alloc (38 samples, 0.03%)</title><rect x="57.6814%" y="293" width="0.0307%" height="15" fill="rgb(248,41,39)" fg:x="71379" fg:w="38"/><text x="57.9314%" y="303.50"></text></g><g><title>__rg_alloc (38 samples, 0.03%)</title><rect x="57.6814%" y="277" width="0.0307%" height="15" fill="rgb(253,85,4)" fg:x="71379" fg:w="38"/><text x="57.9314%" y="287.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (38 samples, 0.03%)</title><rect x="57.6814%" y="261" width="0.0307%" height="15" fill="rgb(243,70,31)" fg:x="71379" fg:w="38"/><text x="57.9314%" y="271.50"></text></g><g><title>sn_rust_alloc (30 samples, 0.02%)</title><rect x="57.6879%" y="245" width="0.0242%" height="15" fill="rgb(253,195,26)" fg:x="71387" fg:w="30"/><text x="57.9379%" y="255.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (70 samples, 0.06%)</title><rect x="57.6749%" y="485" width="0.0566%" height="15" fill="rgb(243,42,11)" fg:x="71371" fg:w="70"/><text x="57.9249%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (70 samples, 0.06%)</title><rect x="57.6749%" y="469" width="0.0566%" height="15" fill="rgb(239,66,17)" fg:x="71371" fg:w="70"/><text x="57.9249%" y="479.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (70 samples, 0.06%)</title><rect x="57.6749%" y="453" width="0.0566%" height="15" fill="rgb(217,132,21)" fg:x="71371" fg:w="70"/><text x="57.9249%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (67 samples, 0.05%)</title><rect x="57.6774%" y="437" width="0.0541%" height="15" fill="rgb(252,202,21)" fg:x="71374" fg:w="67"/><text x="57.9274%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (67 samples, 0.05%)</title><rect x="57.6774%" y="421" width="0.0541%" height="15" fill="rgb(233,98,36)" fg:x="71374" fg:w="67"/><text x="57.9274%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (67 samples, 0.05%)</title><rect x="57.6774%" y="405" width="0.0541%" height="15" fill="rgb(216,153,54)" fg:x="71374" fg:w="67"/><text x="57.9274%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (67 samples, 0.05%)</title><rect x="57.6774%" y="389" width="0.0541%" height="15" fill="rgb(250,99,7)" fg:x="71374" fg:w="67"/><text x="57.9274%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (24 samples, 0.02%)</title><rect x="57.7121%" y="373" width="0.0194%" height="15" fill="rgb(207,56,50)" fg:x="71417" fg:w="24"/><text x="57.9621%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (24 samples, 0.02%)</title><rect x="57.7121%" y="357" width="0.0194%" height="15" fill="rgb(244,61,34)" fg:x="71417" fg:w="24"/><text x="57.9621%" y="367.50"></text></g><g><title>[libc-2.31.so] (20 samples, 0.02%)</title><rect x="57.7153%" y="341" width="0.0162%" height="15" fill="rgb(241,50,38)" fg:x="71421" fg:w="20"/><text x="57.9653%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.02%)</title><rect x="57.7315%" y="485" width="0.0170%" height="15" fill="rgb(212,166,30)" fg:x="71441" fg:w="21"/><text x="57.9815%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (32 samples, 0.03%)</title><rect x="57.7533%" y="437" width="0.0259%" height="15" fill="rgb(249,127,32)" fg:x="71468" fg:w="32"/><text x="58.0033%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (32 samples, 0.03%)</title><rect x="57.7533%" y="421" width="0.0259%" height="15" fill="rgb(209,103,0)" fg:x="71468" fg:w="32"/><text x="58.0033%" y="431.50"></text></g><g><title>alloc::alloc::alloc (24 samples, 0.02%)</title><rect x="57.7598%" y="405" width="0.0194%" height="15" fill="rgb(238,209,51)" fg:x="71476" fg:w="24"/><text x="58.0098%" y="415.50"></text></g><g><title>__rg_alloc (24 samples, 0.02%)</title><rect x="57.7598%" y="389" width="0.0194%" height="15" fill="rgb(237,56,23)" fg:x="71476" fg:w="24"/><text x="58.0098%" y="399.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (24 samples, 0.02%)</title><rect x="57.7598%" y="373" width="0.0194%" height="15" fill="rgb(215,153,46)" fg:x="71476" fg:w="24"/><text x="58.0098%" y="383.50"></text></g><g><title>sn_rust_alloc (24 samples, 0.02%)</title><rect x="57.7598%" y="357" width="0.0194%" height="15" fill="rgb(224,49,31)" fg:x="71476" fg:w="24"/><text x="58.0098%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (41 samples, 0.03%)</title><rect x="57.7485%" y="485" width="0.0331%" height="15" fill="rgb(250,18,42)" fg:x="71462" fg:w="41"/><text x="57.9985%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (35 samples, 0.03%)</title><rect x="57.7533%" y="469" width="0.0283%" height="15" fill="rgb(215,176,39)" fg:x="71468" fg:w="35"/><text x="58.0033%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (35 samples, 0.03%)</title><rect x="57.7533%" y="453" width="0.0283%" height="15" fill="rgb(223,77,29)" fg:x="71468" fg:w="35"/><text x="58.0033%" y="463.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (945 samples, 0.76%)</title><rect x="57.0244%" y="597" width="0.7637%" height="15" fill="rgb(234,94,52)" fg:x="70566" fg:w="945"/><text x="57.2744%" y="607.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (186 samples, 0.15%)</title><rect x="57.6378%" y="581" width="0.1503%" height="15" fill="rgb(220,154,50)" fg:x="71325" fg:w="186"/><text x="57.8878%" y="591.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (153 samples, 0.12%)</title><rect x="57.6644%" y="565" width="0.1236%" height="15" fill="rgb(212,11,10)" fg:x="71358" fg:w="153"/><text x="57.9144%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (153 samples, 0.12%)</title><rect x="57.6644%" y="549" width="0.1236%" height="15" fill="rgb(205,166,19)" fg:x="71358" fg:w="153"/><text x="57.9144%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (153 samples, 0.12%)</title><rect x="57.6644%" y="533" width="0.1236%" height="15" fill="rgb(244,198,16)" fg:x="71358" fg:w="153"/><text x="57.9144%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (153 samples, 0.12%)</title><rect x="57.6644%" y="517" width="0.1236%" height="15" fill="rgb(219,69,12)" fg:x="71358" fg:w="153"/><text x="57.9144%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (153 samples, 0.12%)</title><rect x="57.6644%" y="501" width="0.1236%" height="15" fill="rgb(245,30,7)" fg:x="71358" fg:w="153"/><text x="57.9144%" y="511.50"></text></g><g><title>[libc-2.31.so] (105 samples, 0.08%)</title><rect x="57.7881%" y="597" width="0.0849%" height="15" fill="rgb(218,221,48)" fg:x="71511" fg:w="105"/><text x="58.0381%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (247 samples, 0.20%)</title><rect x="57.8770%" y="597" width="0.1996%" height="15" fill="rgb(216,66,15)" fg:x="71621" fg:w="247"/><text x="58.1270%" y="607.50"></text></g><g><title>core::ptr::write (232 samples, 0.19%)</title><rect x="57.8891%" y="581" width="0.1875%" height="15" fill="rgb(226,122,50)" fg:x="71636" fg:w="232"/><text x="58.1391%" y="591.50"></text></g><g><title>[libc-2.31.so] (229 samples, 0.19%)</title><rect x="57.8915%" y="565" width="0.1851%" height="15" fill="rgb(239,156,16)" fg:x="71639" fg:w="229"/><text x="58.1415%" y="575.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (893 samples, 0.72%)</title><rect x="58.1291%" y="437" width="0.7216%" height="15" fill="rgb(224,27,38)" fg:x="71933" fg:w="893"/><text x="58.3791%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (968 samples, 0.78%)</title><rect x="58.0838%" y="533" width="0.7822%" height="15" fill="rgb(224,39,27)" fg:x="71877" fg:w="968"/><text x="58.3338%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (968 samples, 0.78%)</title><rect x="58.0838%" y="517" width="0.7822%" height="15" fill="rgb(215,92,29)" fg:x="71877" fg:w="968"/><text x="58.3338%" y="527.50"></text></g><g><title>alloc::alloc::alloc (961 samples, 0.78%)</title><rect x="58.0895%" y="501" width="0.7766%" height="15" fill="rgb(207,159,16)" fg:x="71884" fg:w="961"/><text x="58.3395%" y="511.50"></text></g><g><title>__rg_alloc (961 samples, 0.78%)</title><rect x="58.0895%" y="485" width="0.7766%" height="15" fill="rgb(238,163,47)" fg:x="71884" fg:w="961"/><text x="58.3395%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (961 samples, 0.78%)</title><rect x="58.0895%" y="469" width="0.7766%" height="15" fill="rgb(219,91,49)" fg:x="71884" fg:w="961"/><text x="58.3395%" y="479.50"></text></g><g><title>sn_rust_alloc (961 samples, 0.78%)</title><rect x="58.0895%" y="453" width="0.7766%" height="15" fill="rgb(227,167,31)" fg:x="71884" fg:w="961"/><text x="58.3395%" y="463.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (19 samples, 0.02%)</title><rect x="58.8507%" y="437" width="0.0154%" height="15" fill="rgb(234,80,54)" fg:x="72826" fg:w="19"/><text x="59.1007%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (982 samples, 0.79%)</title><rect x="58.0766%" y="597" width="0.7936%" height="15" fill="rgb(212,114,2)" fg:x="71868" fg:w="982"/><text x="58.3266%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (982 samples, 0.79%)</title><rect x="58.0766%" y="581" width="0.7936%" height="15" fill="rgb(234,50,24)" fg:x="71868" fg:w="982"/><text x="58.3266%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (976 samples, 0.79%)</title><rect x="58.0814%" y="565" width="0.7887%" height="15" fill="rgb(221,68,8)" fg:x="71874" fg:w="976"/><text x="58.3314%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (976 samples, 0.79%)</title><rect x="58.0814%" y="549" width="0.7887%" height="15" fill="rgb(254,180,31)" fg:x="71874" fg:w="976"/><text x="58.3314%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (39 samples, 0.03%)</title><rect x="58.8830%" y="501" width="0.0315%" height="15" fill="rgb(247,130,50)" fg:x="72866" fg:w="39"/><text x="59.1330%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (39 samples, 0.03%)</title><rect x="58.8830%" y="485" width="0.0315%" height="15" fill="rgb(211,109,4)" fg:x="72866" fg:w="39"/><text x="59.1330%" y="495.50"></text></g><g><title>__rg_dealloc (39 samples, 0.03%)</title><rect x="58.8830%" y="469" width="0.0315%" height="15" fill="rgb(238,50,21)" fg:x="72866" fg:w="39"/><text x="59.1330%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (39 samples, 0.03%)</title><rect x="58.8830%" y="453" width="0.0315%" height="15" fill="rgb(225,57,45)" fg:x="72866" fg:w="39"/><text x="59.1330%" y="463.50"></text></g><g><title>sn_rust_dealloc (34 samples, 0.03%)</title><rect x="58.8871%" y="437" width="0.0275%" height="15" fill="rgb(209,196,50)" fg:x="72871" fg:w="34"/><text x="59.1371%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (50 samples, 0.04%)</title><rect x="58.8782%" y="565" width="0.0404%" height="15" fill="rgb(242,140,13)" fg:x="72860" fg:w="50"/><text x="59.1282%" y="575.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (50 samples, 0.04%)</title><rect x="58.8782%" y="549" width="0.0404%" height="15" fill="rgb(217,111,7)" fg:x="72860" fg:w="50"/><text x="59.1282%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (44 samples, 0.04%)</title><rect x="58.8830%" y="533" width="0.0356%" height="15" fill="rgb(253,193,51)" fg:x="72866" fg:w="44"/><text x="59.1330%" y="543.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (44 samples, 0.04%)</title><rect x="58.8830%" y="517" width="0.0356%" height="15" fill="rgb(252,70,29)" fg:x="72866" fg:w="44"/><text x="59.1330%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (62 samples, 0.05%)</title><rect x="58.8701%" y="597" width="0.0501%" height="15" fill="rgb(232,127,12)" fg:x="72850" fg:w="62"/><text x="59.1201%" y="607.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (62 samples, 0.05%)</title><rect x="58.8701%" y="581" width="0.0501%" height="15" fill="rgb(211,180,21)" fg:x="72850" fg:w="62"/><text x="59.1201%" y="591.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (17 samples, 0.01%)</title><rect x="58.9202%" y="597" width="0.0137%" height="15" fill="rgb(229,72,13)" fg:x="72912" fg:w="17"/><text x="59.1702%" y="607.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (6,225 samples, 5.03%)</title><rect x="53.9068%" y="693" width="5.0304%" height="15" fill="rgb(240,211,49)" fg:x="66708" fg:w="6225"/><text x="54.1568%" y="703.50">tremor..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,225 samples, 5.03%)</title><rect x="53.9068%" y="677" width="5.0304%" height="15" fill="rgb(219,149,40)" fg:x="66708" fg:w="6225"/><text x="54.1568%" y="687.50">&lt;core:..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (6,225 samples, 5.03%)</title><rect x="53.9068%" y="661" width="5.0304%" height="15" fill="rgb(210,127,46)" fg:x="66708" fg:w="6225"/><text x="54.1568%" y="671.50">tremor..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,225 samples, 5.03%)</title><rect x="53.9068%" y="645" width="5.0304%" height="15" fill="rgb(220,106,7)" fg:x="66708" fg:w="6225"/><text x="54.1568%" y="655.50">&lt;core:..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (6,225 samples, 5.03%)</title><rect x="53.9068%" y="629" width="5.0304%" height="15" fill="rgb(249,31,22)" fg:x="66708" fg:w="6225"/><text x="54.1568%" y="639.50">tremor..</text></g><g><title>tremor_runtime::connectors::source::build_events (3,110 samples, 2.51%)</title><rect x="56.4240%" y="613" width="2.5132%" height="15" fill="rgb(253,1,49)" fg:x="69823" fg:w="3110"/><text x="56.6740%" y="623.50">tr..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (15,362 samples, 12.41%)</title><rect x="46.5240%" y="869" width="12.4140%" height="15" fill="rgb(227,144,33)" fg:x="57572" fg:w="15362"/><text x="46.7740%" y="879.50">async_task::raw::Ra..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (15,357 samples, 12.41%)</title><rect x="46.5280%" y="853" width="12.4100%" height="15" fill="rgb(249,163,44)" fg:x="57577" fg:w="15357"/><text x="46.7780%" y="863.50">&lt;core::pin::Pin&lt;P&gt; ..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (15,357 samples, 12.41%)</title><rect x="46.5280%" y="837" width="12.4100%" height="15" fill="rgb(234,15,39)" fg:x="57577" fg:w="15357"/><text x="46.7780%" y="847.50">&lt;core::future::from..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (15,357 samples, 12.41%)</title><rect x="46.5280%" y="821" width="12.4100%" height="15" fill="rgb(207,66,16)" fg:x="57577" fg:w="15357"/><text x="46.7780%" y="831.50">async_executor::Exe..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (15,357 samples, 12.41%)</title><rect x="46.5280%" y="805" width="12.4100%" height="15" fill="rgb(233,112,24)" fg:x="57577" fg:w="15357"/><text x="46.7780%" y="815.50">&lt;async_std::task::b..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (15,357 samples, 12.41%)</title><rect x="46.5280%" y="789" width="12.4100%" height="15" fill="rgb(230,90,22)" fg:x="57577" fg:w="15357"/><text x="46.7780%" y="799.50">async_std::task::ta..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (15,357 samples, 12.41%)</title><rect x="46.5280%" y="773" width="12.4100%" height="15" fill="rgb(229,61,13)" fg:x="57577" fg:w="15357"/><text x="46.7780%" y="783.50">std::thread::local:..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (15,357 samples, 12.41%)</title><rect x="46.5280%" y="757" width="12.4100%" height="15" fill="rgb(225,57,24)" fg:x="57577" fg:w="15357"/><text x="46.7780%" y="767.50">std::thread::local:..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (15,357 samples, 12.41%)</title><rect x="46.5280%" y="741" width="12.4100%" height="15" fill="rgb(208,169,48)" fg:x="57577" fg:w="15357"/><text x="46.7780%" y="751.50">async_std::task::ta..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (15,357 samples, 12.41%)</title><rect x="46.5280%" y="725" width="12.4100%" height="15" fill="rgb(244,218,51)" fg:x="57577" fg:w="15357"/><text x="46.7780%" y="735.50">&lt;async_std::task::b..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (15,357 samples, 12.41%)</title><rect x="46.5280%" y="709" width="12.4100%" height="15" fill="rgb(214,148,10)" fg:x="57577" fg:w="15357"/><text x="46.7780%" y="719.50">&lt;core::future::from..</text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (64 samples, 0.05%)</title><rect x="58.9428%" y="869" width="0.0517%" height="15" fill="rgb(225,174,27)" fg:x="72940" fg:w="64"/><text x="59.1928%" y="879.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (21 samples, 0.02%)</title><rect x="58.9946%" y="869" width="0.0170%" height="15" fill="rgb(230,96,26)" fg:x="73004" fg:w="21"/><text x="59.2446%" y="879.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (14 samples, 0.01%)</title><rect x="59.0115%" y="869" width="0.0113%" height="15" fill="rgb(232,10,30)" fg:x="73025" fg:w="14"/><text x="59.2615%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;tremor_runtime::connectors::sink::SinkMsgWrapper&gt;&gt; (13 samples, 0.01%)</title><rect x="59.0511%" y="869" width="0.0105%" height="15" fill="rgb(222,8,50)" fg:x="73074" fg:w="13"/><text x="59.3011%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (17 samples, 0.01%)</title><rect x="59.0641%" y="869" width="0.0137%" height="15" fill="rgb(213,81,27)" fg:x="73090" fg:w="17"/><text x="59.3141%" y="879.50"></text></g><g><title>event_listener::Event::notify (76 samples, 0.06%)</title><rect x="59.0802%" y="869" width="0.0614%" height="15" fill="rgb(245,50,10)" fg:x="73110" fg:w="76"/><text x="59.3302%" y="879.50"></text></g><g><title>event_listener::full_fence (38 samples, 0.03%)</title><rect x="59.1109%" y="853" width="0.0307%" height="15" fill="rgb(216,100,18)" fg:x="73148" fg:w="38"/><text x="59.3609%" y="863.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (13 samples, 0.01%)</title><rect x="59.1433%" y="869" width="0.0105%" height="15" fill="rgb(236,147,54)" fg:x="73188" fg:w="13"/><text x="59.3933%" y="879.50"></text></g><g><title>parking::Inner::park (26 samples, 0.02%)</title><rect x="59.1538%" y="869" width="0.0210%" height="15" fill="rgb(205,143,26)" fg:x="73201" fg:w="26"/><text x="59.4038%" y="879.50"></text></g><g><title>polling::epoll::Poller::wait (33 samples, 0.03%)</title><rect x="59.1820%" y="869" width="0.0267%" height="15" fill="rgb(236,26,9)" fg:x="73236" fg:w="33"/><text x="59.4320%" y="879.50"></text></g><g><title>sn_rust_alloc (92 samples, 0.07%)</title><rect x="59.2087%" y="869" width="0.0743%" height="15" fill="rgb(221,165,53)" fg:x="73269" fg:w="92"/><text x="59.4587%" y="879.50"></text></g><g><title>sn_rust_dealloc (16 samples, 0.01%)</title><rect x="59.2831%" y="869" width="0.0129%" height="15" fill="rgb(214,110,17)" fg:x="73361" fg:w="16"/><text x="59.5331%" y="879.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (72 samples, 0.06%)</title><rect x="59.3033%" y="869" width="0.0582%" height="15" fill="rgb(237,197,12)" fg:x="73386" fg:w="72"/><text x="59.5533%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (49 samples, 0.04%)</title><rect x="60.1219%" y="421" width="0.0396%" height="15" fill="rgb(205,84,17)" fg:x="74399" fg:w="49"/><text x="60.3719%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (49 samples, 0.04%)</title><rect x="60.1219%" y="405" width="0.0396%" height="15" fill="rgb(237,18,45)" fg:x="74399" fg:w="49"/><text x="60.3719%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (49 samples, 0.04%)</title><rect x="60.1219%" y="389" width="0.0396%" height="15" fill="rgb(221,87,14)" fg:x="74399" fg:w="49"/><text x="60.3719%" y="399.50"></text></g><g><title>[libc-2.31.so] (1,553 samples, 1.25%)</title><rect x="60.2027%" y="405" width="1.2550%" height="15" fill="rgb(238,186,15)" fg:x="74499" fg:w="1553"/><text x="60.4527%" y="415.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (149 samples, 0.12%)</title><rect x="61.5861%" y="389" width="0.1204%" height="15" fill="rgb(208,115,11)" fg:x="76211" fg:w="149"/><text x="61.8361%" y="399.50"></text></g><g><title>&lt;tremor_runtime::codec::binary::Binary as tremor_runtime::codec::Codec&gt;::encode (1,939 samples, 1.57%)</title><rect x="60.1695%" y="421" width="1.5669%" height="15" fill="rgb(254,175,0)" fg:x="74458" fg:w="1939"/><text x="60.4195%" y="431.50"></text></g><g><title>sn_rust_alloc (345 samples, 0.28%)</title><rect x="61.4577%" y="405" width="0.2788%" height="15" fill="rgb(227,24,42)" fg:x="76052" fg:w="345"/><text x="61.7077%" y="415.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (37 samples, 0.03%)</title><rect x="61.7065%" y="389" width="0.0299%" height="15" fill="rgb(223,211,37)" fg:x="76360" fg:w="37"/><text x="61.9565%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (18 samples, 0.01%)</title><rect x="61.8819%" y="293" width="0.0145%" height="15" fill="rgb(235,49,27)" fg:x="76577" fg:w="18"/><text x="62.1319%" y="303.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.02%)</title><rect x="61.9061%" y="245" width="0.0178%" height="15" fill="rgb(254,97,51)" fg:x="76607" fg:w="22"/><text x="62.1561%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (88 samples, 0.07%)</title><rect x="61.9328%" y="149" width="0.0711%" height="15" fill="rgb(249,51,40)" fg:x="76640" fg:w="88"/><text x="62.1828%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (88 samples, 0.07%)</title><rect x="61.9328%" y="133" width="0.0711%" height="15" fill="rgb(210,128,45)" fg:x="76640" fg:w="88"/><text x="62.1828%" y="143.50"></text></g><g><title>__rg_dealloc (88 samples, 0.07%)</title><rect x="61.9328%" y="117" width="0.0711%" height="15" fill="rgb(224,137,50)" fg:x="76640" fg:w="88"/><text x="62.1828%" y="127.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (88 samples, 0.07%)</title><rect x="61.9328%" y="101" width="0.0711%" height="15" fill="rgb(242,15,9)" fg:x="76640" fg:w="88"/><text x="62.1828%" y="111.50"></text></g><g><title>sn_rust_dealloc (75 samples, 0.06%)</title><rect x="61.9433%" y="85" width="0.0606%" height="15" fill="rgb(233,187,41)" fg:x="76653" fg:w="75"/><text x="62.1933%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (98 samples, 0.08%)</title><rect x="61.9296%" y="245" width="0.0792%" height="15" fill="rgb(227,2,29)" fg:x="76636" fg:w="98"/><text x="62.1796%" y="255.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (98 samples, 0.08%)</title><rect x="61.9296%" y="229" width="0.0792%" height="15" fill="rgb(222,70,3)" fg:x="76636" fg:w="98"/><text x="62.1796%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (94 samples, 0.08%)</title><rect x="61.9328%" y="213" width="0.0760%" height="15" fill="rgb(213,11,42)" fg:x="76640" fg:w="94"/><text x="62.1828%" y="223.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (94 samples, 0.08%)</title><rect x="61.9328%" y="197" width="0.0760%" height="15" fill="rgb(225,150,9)" fg:x="76640" fg:w="94"/><text x="62.1828%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (94 samples, 0.08%)</title><rect x="61.9328%" y="181" width="0.0760%" height="15" fill="rgb(230,162,45)" fg:x="76640" fg:w="94"/><text x="62.1828%" y="191.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (94 samples, 0.08%)</title><rect x="61.9328%" y="165" width="0.0760%" height="15" fill="rgb(222,14,52)" fg:x="76640" fg:w="94"/><text x="62.1828%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (147 samples, 0.12%)</title><rect x="61.8965%" y="293" width="0.1188%" height="15" fill="rgb(254,198,14)" fg:x="76595" fg:w="147"/><text x="62.1465%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (142 samples, 0.11%)</title><rect x="61.9005%" y="277" width="0.1148%" height="15" fill="rgb(220,217,30)" fg:x="76600" fg:w="142"/><text x="62.1505%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (142 samples, 0.11%)</title><rect x="61.9005%" y="261" width="0.1148%" height="15" fill="rgb(215,146,41)" fg:x="76600" fg:w="142"/><text x="62.1505%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (190 samples, 0.15%)</title><rect x="61.8690%" y="309" width="0.1535%" height="15" fill="rgb(217,27,36)" fg:x="76561" fg:w="190"/><text x="62.1190%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (87 samples, 0.07%)</title><rect x="62.0225%" y="309" width="0.0703%" height="15" fill="rgb(219,218,39)" fg:x="76751" fg:w="87"/><text x="62.2725%" y="319.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (58 samples, 0.05%)</title><rect x="62.0459%" y="293" width="0.0469%" height="15" fill="rgb(219,4,42)" fg:x="76780" fg:w="58"/><text x="62.2959%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (58 samples, 0.05%)</title><rect x="62.0459%" y="277" width="0.0469%" height="15" fill="rgb(249,119,36)" fg:x="76780" fg:w="58"/><text x="62.2959%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (222 samples, 0.18%)</title><rect x="62.1098%" y="245" width="0.1794%" height="15" fill="rgb(209,23,33)" fg:x="76859" fg:w="222"/><text x="62.3598%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (222 samples, 0.18%)</title><rect x="62.1098%" y="229" width="0.1794%" height="15" fill="rgb(211,10,0)" fg:x="76859" fg:w="222"/><text x="62.3598%" y="239.50"></text></g><g><title>alloc::alloc::alloc (213 samples, 0.17%)</title><rect x="62.1171%" y="213" width="0.1721%" height="15" fill="rgb(208,99,37)" fg:x="76868" fg:w="213"/><text x="62.3671%" y="223.50"></text></g><g><title>__rg_alloc (213 samples, 0.17%)</title><rect x="62.1171%" y="197" width="0.1721%" height="15" fill="rgb(213,132,31)" fg:x="76868" fg:w="213"/><text x="62.3671%" y="207.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (213 samples, 0.17%)</title><rect x="62.1171%" y="181" width="0.1721%" height="15" fill="rgb(243,129,40)" fg:x="76868" fg:w="213"/><text x="62.3671%" y="191.50"></text></g><g><title>sn_rust_alloc (208 samples, 0.17%)</title><rect x="62.1211%" y="165" width="0.1681%" height="15" fill="rgb(210,66,33)" fg:x="76873" fg:w="208"/><text x="62.3711%" y="175.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (3,615 samples, 2.92%)</title><rect x="59.3760%" y="789" width="2.9213%" height="15" fill="rgb(209,189,4)" fg:x="73476" fg:w="3615"/><text x="59.6260%" y="799.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,615 samples, 2.92%)</title><rect x="59.3760%" y="773" width="2.9213%" height="15" fill="rgb(214,107,37)" fg:x="73476" fg:w="3615"/><text x="59.6260%" y="783.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (3,615 samples, 2.92%)</title><rect x="59.3760%" y="757" width="2.9213%" height="15" fill="rgb(245,88,54)" fg:x="73476" fg:w="3615"/><text x="59.6260%" y="767.50">tr..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,615 samples, 2.92%)</title><rect x="59.3760%" y="741" width="2.9213%" height="15" fill="rgb(205,146,20)" fg:x="73476" fg:w="3615"/><text x="59.6260%" y="751.50">&lt;a..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,615 samples, 2.92%)</title><rect x="59.3760%" y="725" width="2.9213%" height="15" fill="rgb(220,161,25)" fg:x="73476" fg:w="3615"/><text x="59.6260%" y="735.50">&lt;a..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (3,615 samples, 2.92%)</title><rect x="59.3760%" y="709" width="2.9213%" height="15" fill="rgb(215,152,15)" fg:x="73476" fg:w="3615"/><text x="59.6260%" y="719.50">&lt;c..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (3,615 samples, 2.92%)</title><rect x="59.3760%" y="693" width="2.9213%" height="15" fill="rgb(233,192,44)" fg:x="73476" fg:w="3615"/><text x="59.6260%" y="703.50">&lt;a..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (3,615 samples, 2.92%)</title><rect x="59.3760%" y="677" width="2.9213%" height="15" fill="rgb(240,170,46)" fg:x="73476" fg:w="3615"/><text x="59.6260%" y="687.50">as..</text></g><g><title>std::panic::catch_unwind (3,615 samples, 2.92%)</title><rect x="59.3760%" y="661" width="2.9213%" height="15" fill="rgb(207,104,33)" fg:x="73476" fg:w="3615"/><text x="59.6260%" y="671.50">st..</text></g><g><title>std::panicking::try (3,615 samples, 2.92%)</title><rect x="59.3760%" y="645" width="2.9213%" height="15" fill="rgb(219,21,39)" fg:x="73476" fg:w="3615"/><text x="59.6260%" y="655.50">st..</text></g><g><title>std::panicking::try::do_call (3,615 samples, 2.92%)</title><rect x="59.3760%" y="629" width="2.9213%" height="15" fill="rgb(214,133,29)" fg:x="73476" fg:w="3615"/><text x="59.6260%" y="639.50">st..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3,615 samples, 2.92%)</title><rect x="59.3760%" y="613" width="2.9213%" height="15" fill="rgb(226,93,6)" fg:x="73476" fg:w="3615"/><text x="59.6260%" y="623.50">&lt;c..</text></g><g><title>core::ops::function::FnOnce::call_once (3,615 samples, 2.92%)</title><rect x="59.3760%" y="597" width="2.9213%" height="15" fill="rgb(252,222,34)" fg:x="73476" fg:w="3615"/><text x="59.6260%" y="607.50">co..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (3,615 samples, 2.92%)</title><rect x="59.3760%" y="581" width="2.9213%" height="15" fill="rgb(252,92,48)" fg:x="73476" fg:w="3615"/><text x="59.6260%" y="591.50">as..</text></g><g><title>async_ffi::FfiContext::with_context (3,615 samples, 2.92%)</title><rect x="59.3760%" y="565" width="2.9213%" height="15" fill="rgb(245,223,24)" fg:x="73476" fg:w="3615"/><text x="59.6260%" y="575.50">as..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (3,615 samples, 2.92%)</title><rect x="59.3760%" y="549" width="2.9213%" height="15" fill="rgb(205,176,3)" fg:x="73476" fg:w="3615"/><text x="59.6260%" y="559.50">as..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,615 samples, 2.92%)</title><rect x="59.3760%" y="533" width="2.9213%" height="15" fill="rgb(235,151,15)" fg:x="73476" fg:w="3615"/><text x="59.6260%" y="543.50">&lt;c..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (3,615 samples, 2.92%)</title><rect x="59.3760%" y="517" width="2.9213%" height="15" fill="rgb(237,209,11)" fg:x="73476" fg:w="3615"/><text x="59.6260%" y="527.50">&lt;t..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (3,615 samples, 2.92%)</title><rect x="59.3760%" y="501" width="2.9213%" height="15" fill="rgb(243,227,24)" fg:x="73476" fg:w="3615"/><text x="59.6260%" y="511.50">tr..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (3,615 samples, 2.92%)</title><rect x="59.3760%" y="485" width="2.9213%" height="15" fill="rgb(239,193,16)" fg:x="73476" fg:w="3615"/><text x="59.6260%" y="495.50">tr..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (3,615 samples, 2.92%)</title><rect x="59.3760%" y="469" width="2.9213%" height="15" fill="rgb(231,27,9)" fg:x="73476" fg:w="3615"/><text x="59.6260%" y="479.50">tr..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (3,615 samples, 2.92%)</title><rect x="59.3760%" y="453" width="2.9213%" height="15" fill="rgb(219,169,10)" fg:x="73476" fg:w="3615"/><text x="59.6260%" y="463.50">tr..</text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (3,615 samples, 2.92%)</title><rect x="59.3760%" y="437" width="2.9213%" height="15" fill="rgb(244,229,43)" fg:x="73476" fg:w="3615"/><text x="59.6260%" y="447.50">&lt;t..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (694 samples, 0.56%)</title><rect x="61.7364%" y="421" width="0.5608%" height="15" fill="rgb(254,38,20)" fg:x="76397" fg:w="694"/><text x="61.9864%" y="431.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::iter::traits::collect::FromIterator&lt;T&gt; for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::from_iter (694 samples, 0.56%)</title><rect x="61.7364%" y="405" width="0.5608%" height="15" fill="rgb(250,47,30)" fg:x="76397" fg:w="694"/><text x="61.9864%" y="415.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (694 samples, 0.56%)</title><rect x="61.7364%" y="389" width="0.5608%" height="15" fill="rgb(224,124,36)" fg:x="76397" fg:w="694"/><text x="61.9864%" y="399.50"></text></g><g><title>core::ops::function::FnOnce::call_once (687 samples, 0.56%)</title><rect x="61.7421%" y="373" width="0.5552%" height="15" fill="rgb(246,68,51)" fg:x="76404" fg:w="687"/><text x="61.9921%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (687 samples, 0.56%)</title><rect x="61.7421%" y="357" width="0.5552%" height="15" fill="rgb(253,43,49)" fg:x="76404" fg:w="687"/><text x="61.9921%" y="367.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (680 samples, 0.55%)</title><rect x="61.7478%" y="341" width="0.5495%" height="15" fill="rgb(219,54,36)" fg:x="76411" fg:w="680"/><text x="61.9978%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (540 samples, 0.44%)</title><rect x="61.8609%" y="325" width="0.4364%" height="15" fill="rgb(227,133,34)" fg:x="76551" fg:w="540"/><text x="62.1109%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (253 samples, 0.20%)</title><rect x="62.0928%" y="309" width="0.2044%" height="15" fill="rgb(247,227,15)" fg:x="76838" fg:w="253"/><text x="62.3428%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (253 samples, 0.20%)</title><rect x="62.0928%" y="293" width="0.2044%" height="15" fill="rgb(229,96,14)" fg:x="76838" fg:w="253"/><text x="62.3428%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (252 samples, 0.20%)</title><rect x="62.0936%" y="277" width="0.2036%" height="15" fill="rgb(220,79,17)" fg:x="76839" fg:w="252"/><text x="62.3436%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (252 samples, 0.20%)</title><rect x="62.0936%" y="261" width="0.2036%" height="15" fill="rgb(205,131,53)" fg:x="76839" fg:w="252"/><text x="62.3436%" y="271.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (111 samples, 0.09%)</title><rect x="62.7999%" y="437" width="0.0897%" height="15" fill="rgb(209,50,29)" fg:x="77713" fg:w="111"/><text x="63.0499%" y="447.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::default::Default&gt;::default (198 samples, 0.16%)</title><rect x="62.7312%" y="661" width="0.1600%" height="15" fill="rgb(245,86,46)" fg:x="77628" fg:w="198"/><text x="62.9812%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (184 samples, 0.15%)</title><rect x="62.7425%" y="645" width="0.1487%" height="15" fill="rgb(235,66,46)" fg:x="77642" fg:w="184"/><text x="62.9925%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (184 samples, 0.15%)</title><rect x="62.7425%" y="629" width="0.1487%" height="15" fill="rgb(232,148,31)" fg:x="77642" fg:w="184"/><text x="62.9925%" y="639.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (184 samples, 0.15%)</title><rect x="62.7425%" y="613" width="0.1487%" height="15" fill="rgb(217,149,8)" fg:x="77642" fg:w="184"/><text x="62.9925%" y="623.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (184 samples, 0.15%)</title><rect x="62.7425%" y="597" width="0.1487%" height="15" fill="rgb(209,183,11)" fg:x="77642" fg:w="184"/><text x="62.9925%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (184 samples, 0.15%)</title><rect x="62.7425%" y="581" width="0.1487%" height="15" fill="rgb(208,55,20)" fg:x="77642" fg:w="184"/><text x="62.9925%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (177 samples, 0.14%)</title><rect x="62.7482%" y="565" width="0.1430%" height="15" fill="rgb(218,39,14)" fg:x="77649" fg:w="177"/><text x="62.9982%" y="575.50"></text></g><g><title>alloc::alloc::exchange_malloc (164 samples, 0.13%)</title><rect x="62.7587%" y="549" width="0.1325%" height="15" fill="rgb(216,169,33)" fg:x="77662" fg:w="164"/><text x="63.0087%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (163 samples, 0.13%)</title><rect x="62.7595%" y="533" width="0.1317%" height="15" fill="rgb(233,80,24)" fg:x="77663" fg:w="163"/><text x="63.0095%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (163 samples, 0.13%)</title><rect x="62.7595%" y="517" width="0.1317%" height="15" fill="rgb(213,179,31)" fg:x="77663" fg:w="163"/><text x="63.0095%" y="527.50"></text></g><g><title>alloc::alloc::alloc (163 samples, 0.13%)</title><rect x="62.7595%" y="501" width="0.1317%" height="15" fill="rgb(209,19,5)" fg:x="77663" fg:w="163"/><text x="63.0095%" y="511.50"></text></g><g><title>__rg_alloc (163 samples, 0.13%)</title><rect x="62.7595%" y="485" width="0.1317%" height="15" fill="rgb(219,18,35)" fg:x="77663" fg:w="163"/><text x="63.0095%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (163 samples, 0.13%)</title><rect x="62.7595%" y="469" width="0.1317%" height="15" fill="rgb(209,169,16)" fg:x="77663" fg:w="163"/><text x="63.0095%" y="479.50"></text></g><g><title>sn_rust_alloc (145 samples, 0.12%)</title><rect x="62.7740%" y="453" width="0.1172%" height="15" fill="rgb(245,90,51)" fg:x="77681" fg:w="145"/><text x="63.0240%" y="463.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (478 samples, 0.39%)</title><rect x="63.2169%" y="421" width="0.3863%" height="15" fill="rgb(220,99,45)" fg:x="78229" fg:w="478"/><text x="63.4669%" y="431.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (724 samples, 0.59%)</title><rect x="63.0262%" y="581" width="0.5851%" height="15" fill="rgb(249,89,25)" fg:x="77993" fg:w="724"/><text x="63.2762%" y="591.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (724 samples, 0.59%)</title><rect x="63.0262%" y="565" width="0.5851%" height="15" fill="rgb(239,193,0)" fg:x="77993" fg:w="724"/><text x="63.2762%" y="575.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (694 samples, 0.56%)</title><rect x="63.0504%" y="549" width="0.5608%" height="15" fill="rgb(231,126,1)" fg:x="78023" fg:w="694"/><text x="63.3004%" y="559.50"></text></g><g><title>alloc::alloc::exchange_malloc (672 samples, 0.54%)</title><rect x="63.0682%" y="533" width="0.5430%" height="15" fill="rgb(243,166,3)" fg:x="78045" fg:w="672"/><text x="63.3182%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (656 samples, 0.53%)</title><rect x="63.0811%" y="517" width="0.5301%" height="15" fill="rgb(223,22,34)" fg:x="78061" fg:w="656"/><text x="63.3311%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (656 samples, 0.53%)</title><rect x="63.0811%" y="501" width="0.5301%" height="15" fill="rgb(251,52,51)" fg:x="78061" fg:w="656"/><text x="63.3311%" y="511.50"></text></g><g><title>alloc::alloc::alloc (656 samples, 0.53%)</title><rect x="63.0811%" y="485" width="0.5301%" height="15" fill="rgb(221,165,28)" fg:x="78061" fg:w="656"/><text x="63.3311%" y="495.50"></text></g><g><title>__rg_alloc (656 samples, 0.53%)</title><rect x="63.0811%" y="469" width="0.5301%" height="15" fill="rgb(218,121,47)" fg:x="78061" fg:w="656"/><text x="63.3311%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (656 samples, 0.53%)</title><rect x="63.0811%" y="453" width="0.5301%" height="15" fill="rgb(209,120,9)" fg:x="78061" fg:w="656"/><text x="63.3311%" y="463.50"></text></g><g><title>sn_rust_alloc (649 samples, 0.52%)</title><rect x="63.0868%" y="437" width="0.5245%" height="15" fill="rgb(236,68,12)" fg:x="78068" fg:w="649"/><text x="63.3368%" y="447.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (777 samples, 0.63%)</title><rect x="62.9971%" y="597" width="0.6279%" height="15" fill="rgb(225,194,26)" fg:x="77957" fg:w="777"/><text x="63.2471%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (17 samples, 0.01%)</title><rect x="63.6112%" y="581" width="0.0137%" height="15" fill="rgb(231,84,39)" fg:x="78717" fg:w="17"/><text x="63.8612%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (17 samples, 0.01%)</title><rect x="63.6112%" y="565" width="0.0137%" height="15" fill="rgb(210,11,45)" fg:x="78717" fg:w="17"/><text x="63.8612%" y="575.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (1,428 samples, 1.15%)</title><rect x="62.8920%" y="645" width="1.1540%" height="15" fill="rgb(224,54,52)" fg:x="77827" fg:w="1428"/><text x="63.1420%" y="655.50"></text></g><g><title>value_trait::Builder::object (1,312 samples, 1.06%)</title><rect x="62.9858%" y="629" width="1.0602%" height="15" fill="rgb(238,102,14)" fg:x="77943" fg:w="1312"/><text x="63.2358%" y="639.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (1,312 samples, 1.06%)</title><rect x="62.9858%" y="613" width="1.0602%" height="15" fill="rgb(243,160,52)" fg:x="77943" fg:w="1312"/><text x="63.2358%" y="623.50"></text></g><g><title>tremor_value::value::Value::Object (521 samples, 0.42%)</title><rect x="63.6250%" y="597" width="0.4210%" height="15" fill="rgb(216,114,19)" fg:x="78734" fg:w="521"/><text x="63.8750%" y="607.50"></text></g><g><title>&lt;tremor_pipeline::event::Event as core::default::Default&gt;::default (1,733 samples, 1.40%)</title><rect x="62.6512%" y="677" width="1.4004%" height="15" fill="rgb(244,166,37)" fg:x="77529" fg:w="1733"/><text x="62.9012%" y="687.50"></text></g><g><title>&lt;tremor_script::srs::EventPayload as core::default::Default&gt;::default (1,436 samples, 1.16%)</title><rect x="62.8912%" y="661" width="1.1604%" height="15" fill="rgb(246,29,44)" fg:x="77826" fg:w="1436"/><text x="63.1412%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (17 samples, 0.01%)</title><rect x="64.0557%" y="677" width="0.0137%" height="15" fill="rgb(215,56,53)" fg:x="79267" fg:w="17"/><text x="64.3057%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (17 samples, 0.01%)</title><rect x="64.0557%" y="661" width="0.0137%" height="15" fill="rgb(217,60,2)" fg:x="79267" fg:w="17"/><text x="64.3057%" y="671.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (17 samples, 0.01%)</title><rect x="64.0557%" y="645" width="0.0137%" height="15" fill="rgb(207,26,24)" fg:x="79267" fg:w="17"/><text x="64.3057%" y="655.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (24 samples, 0.02%)</title><rect x="64.0727%" y="661" width="0.0194%" height="15" fill="rgb(252,210,15)" fg:x="79288" fg:w="24"/><text x="64.3227%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (37 samples, 0.03%)</title><rect x="64.0921%" y="661" width="0.0299%" height="15" fill="rgb(253,209,26)" fg:x="79312" fg:w="37"/><text x="64.3421%" y="671.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (37 samples, 0.03%)</title><rect x="64.0921%" y="645" width="0.0299%" height="15" fill="rgb(238,170,14)" fg:x="79312" fg:w="37"/><text x="64.3421%" y="655.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (28 samples, 0.02%)</title><rect x="64.0993%" y="629" width="0.0226%" height="15" fill="rgb(216,178,15)" fg:x="79321" fg:w="28"/><text x="64.3493%" y="639.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (27 samples, 0.02%)</title><rect x="64.1001%" y="613" width="0.0218%" height="15" fill="rgb(250,197,2)" fg:x="79322" fg:w="27"/><text x="64.3501%" y="623.50"></text></g><g><title>core::mem::drop (16 samples, 0.01%)</title><rect x="64.1090%" y="597" width="0.0129%" height="15" fill="rgb(212,70,42)" fg:x="79333" fg:w="16"/><text x="64.3590%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="64.1090%" y="581" width="0.0129%" height="15" fill="rgb(227,213,9)" fg:x="79333" fg:w="16"/><text x="64.3590%" y="591.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (24 samples, 0.02%)</title><rect x="64.1599%" y="581" width="0.0194%" height="15" fill="rgb(245,99,25)" fg:x="79396" fg:w="24"/><text x="64.4099%" y="591.50"></text></g><g><title>sn_rust_dealloc (42 samples, 0.03%)</title><rect x="64.1793%" y="581" width="0.0339%" height="15" fill="rgb(250,82,29)" fg:x="79420" fg:w="42"/><text x="64.4293%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (119 samples, 0.10%)</title><rect x="64.1220%" y="661" width="0.0962%" height="15" fill="rgb(241,226,54)" fg:x="79349" fg:w="119"/><text x="64.3720%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (119 samples, 0.10%)</title><rect x="64.1220%" y="645" width="0.0962%" height="15" fill="rgb(221,99,41)" fg:x="79349" fg:w="119"/><text x="64.3720%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (90 samples, 0.07%)</title><rect x="64.1454%" y="629" width="0.0727%" height="15" fill="rgb(213,90,21)" fg:x="79378" fg:w="90"/><text x="64.3954%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (90 samples, 0.07%)</title><rect x="64.1454%" y="613" width="0.0727%" height="15" fill="rgb(205,208,24)" fg:x="79378" fg:w="90"/><text x="64.3954%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (90 samples, 0.07%)</title><rect x="64.1454%" y="597" width="0.0727%" height="15" fill="rgb(246,31,12)" fg:x="79378" fg:w="90"/><text x="64.3954%" y="607.50"></text></g><g><title>sn_rust_dealloc (27 samples, 0.02%)</title><rect x="64.2181%" y="661" width="0.0218%" height="15" fill="rgb(213,154,6)" fg:x="79468" fg:w="27"/><text x="64.4681%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (212 samples, 0.17%)</title><rect x="64.0694%" y="677" width="0.1713%" height="15" fill="rgb(222,163,29)" fg:x="79284" fg:w="212"/><text x="64.3194%" y="687.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (2,416 samples, 1.95%)</title><rect x="62.2997%" y="693" width="1.9524%" height="15" fill="rgb(227,201,8)" fg:x="77094" fg:w="2416"/><text x="62.5497%" y="703.50">t..</text></g><g><title>tremor_pipeline::EventIdGenerator::next_with_pull_id (14 samples, 0.01%)</title><rect x="64.2407%" y="677" width="0.0113%" height="15" fill="rgb(233,9,32)" fg:x="79496" fg:w="14"/><text x="64.4907%" y="687.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (39 samples, 0.03%)</title><rect x="64.3199%" y="565" width="0.0315%" height="15" fill="rgb(217,54,24)" fg:x="79594" fg:w="39"/><text x="64.5699%" y="575.50"></text></g><g><title>alloc::alloc::exchange_malloc (84 samples, 0.07%)</title><rect x="64.2844%" y="677" width="0.0679%" height="15" fill="rgb(235,192,0)" fg:x="79550" fg:w="84"/><text x="64.5344%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (84 samples, 0.07%)</title><rect x="64.2844%" y="661" width="0.0679%" height="15" fill="rgb(235,45,9)" fg:x="79550" fg:w="84"/><text x="64.5344%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (84 samples, 0.07%)</title><rect x="64.2844%" y="645" width="0.0679%" height="15" fill="rgb(246,42,40)" fg:x="79550" fg:w="84"/><text x="64.5344%" y="655.50"></text></g><g><title>alloc::alloc::alloc (83 samples, 0.07%)</title><rect x="64.2852%" y="629" width="0.0671%" height="15" fill="rgb(248,111,24)" fg:x="79551" fg:w="83"/><text x="64.5352%" y="639.50"></text></g><g><title>__rg_alloc (83 samples, 0.07%)</title><rect x="64.2852%" y="613" width="0.0671%" height="15" fill="rgb(249,65,22)" fg:x="79551" fg:w="83"/><text x="64.5352%" y="623.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (83 samples, 0.07%)</title><rect x="64.2852%" y="597" width="0.0671%" height="15" fill="rgb(238,111,51)" fg:x="79551" fg:w="83"/><text x="64.5352%" y="607.50"></text></g><g><title>sn_rust_alloc (78 samples, 0.06%)</title><rect x="64.2892%" y="581" width="0.0630%" height="15" fill="rgb(250,118,22)" fg:x="79556" fg:w="78"/><text x="64.5392%" y="591.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (140 samples, 0.11%)</title><rect x="64.2521%" y="693" width="0.1131%" height="15" fill="rgb(234,84,26)" fg:x="79510" fg:w="140"/><text x="64.5021%" y="703.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (153 samples, 0.12%)</title><rect x="64.5971%" y="677" width="0.1236%" height="15" fill="rgb(243,172,12)" fg:x="79937" fg:w="153"/><text x="64.8471%" y="687.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::new (105 samples, 0.08%)</title><rect x="64.7208%" y="677" width="0.0849%" height="15" fill="rgb(236,150,49)" fg:x="80090" fg:w="105"/><text x="64.9708%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (104 samples, 0.08%)</title><rect x="64.7216%" y="661" width="0.0840%" height="15" fill="rgb(225,197,26)" fg:x="80091" fg:w="104"/><text x="64.9716%" y="671.50"></text></g><g><title>alloc::alloc::exchange_malloc (87 samples, 0.07%)</title><rect x="64.7353%" y="645" width="0.0703%" height="15" fill="rgb(214,17,42)" fg:x="80108" fg:w="87"/><text x="64.9853%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (87 samples, 0.07%)</title><rect x="64.7353%" y="629" width="0.0703%" height="15" fill="rgb(224,165,40)" fg:x="80108" fg:w="87"/><text x="64.9853%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (87 samples, 0.07%)</title><rect x="64.7353%" y="613" width="0.0703%" height="15" fill="rgb(246,100,4)" fg:x="80108" fg:w="87"/><text x="64.9853%" y="623.50"></text></g><g><title>alloc::alloc::alloc (87 samples, 0.07%)</title><rect x="64.7353%" y="597" width="0.0703%" height="15" fill="rgb(222,103,0)" fg:x="80108" fg:w="87"/><text x="64.9853%" y="607.50"></text></g><g><title>__rg_alloc (87 samples, 0.07%)</title><rect x="64.7353%" y="581" width="0.0703%" height="15" fill="rgb(227,189,26)" fg:x="80108" fg:w="87"/><text x="64.9853%" y="591.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (87 samples, 0.07%)</title><rect x="64.7353%" y="565" width="0.0703%" height="15" fill="rgb(214,202,17)" fg:x="80108" fg:w="87"/><text x="64.9853%" y="575.50"></text></g><g><title>sn_rust_alloc (76 samples, 0.06%)</title><rect x="64.7442%" y="549" width="0.0614%" height="15" fill="rgb(229,111,3)" fg:x="80119" fg:w="76"/><text x="64.9942%" y="559.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (53 samples, 0.04%)</title><rect x="64.7628%" y="533" width="0.0428%" height="15" fill="rgb(229,172,15)" fg:x="80142" fg:w="53"/><text x="65.0128%" y="543.50"></text></g><g><title>alloc::alloc::exchange_malloc (51 samples, 0.04%)</title><rect x="64.8056%" y="677" width="0.0412%" height="15" fill="rgb(230,224,35)" fg:x="80195" fg:w="51"/><text x="65.0556%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (51 samples, 0.04%)</title><rect x="64.8056%" y="661" width="0.0412%" height="15" fill="rgb(251,141,6)" fg:x="80195" fg:w="51"/><text x="65.0556%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (51 samples, 0.04%)</title><rect x="64.8056%" y="645" width="0.0412%" height="15" fill="rgb(225,208,6)" fg:x="80195" fg:w="51"/><text x="65.0556%" y="655.50"></text></g><g><title>alloc::alloc::alloc (45 samples, 0.04%)</title><rect x="64.8105%" y="629" width="0.0364%" height="15" fill="rgb(246,181,16)" fg:x="80201" fg:w="45"/><text x="65.0605%" y="639.50"></text></g><g><title>__rg_alloc (45 samples, 0.04%)</title><rect x="64.8105%" y="613" width="0.0364%" height="15" fill="rgb(227,129,36)" fg:x="80201" fg:w="45"/><text x="65.0605%" y="623.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (45 samples, 0.04%)</title><rect x="64.8105%" y="597" width="0.0364%" height="15" fill="rgb(248,117,24)" fg:x="80201" fg:w="45"/><text x="65.0605%" y="607.50"></text></g><g><title>sn_rust_alloc (35 samples, 0.03%)</title><rect x="64.8185%" y="581" width="0.0283%" height="15" fill="rgb(214,185,35)" fg:x="80211" fg:w="35"/><text x="65.0685%" y="591.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (90 samples, 0.07%)</title><rect x="65.2937%" y="549" width="0.0727%" height="15" fill="rgb(236,150,34)" fg:x="80799" fg:w="90"/><text x="65.5437%" y="559.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (84 samples, 0.07%)</title><rect x="65.2986%" y="533" width="0.0679%" height="15" fill="rgb(243,228,27)" fg:x="80805" fg:w="84"/><text x="65.5486%" y="543.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (84 samples, 0.07%)</title><rect x="65.2986%" y="517" width="0.0679%" height="15" fill="rgb(245,77,44)" fg:x="80805" fg:w="84"/><text x="65.5486%" y="527.50"></text></g><g><title>alloc::alloc::exchange_malloc (80 samples, 0.06%)</title><rect x="65.3018%" y="501" width="0.0646%" height="15" fill="rgb(235,214,42)" fg:x="80809" fg:w="80"/><text x="65.5518%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (80 samples, 0.06%)</title><rect x="65.3018%" y="485" width="0.0646%" height="15" fill="rgb(221,74,3)" fg:x="80809" fg:w="80"/><text x="65.5518%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (80 samples, 0.06%)</title><rect x="65.3018%" y="469" width="0.0646%" height="15" fill="rgb(206,121,29)" fg:x="80809" fg:w="80"/><text x="65.5518%" y="479.50"></text></g><g><title>alloc::alloc::alloc (80 samples, 0.06%)</title><rect x="65.3018%" y="453" width="0.0646%" height="15" fill="rgb(249,131,53)" fg:x="80809" fg:w="80"/><text x="65.5518%" y="463.50"></text></g><g><title>__rg_alloc (80 samples, 0.06%)</title><rect x="65.3018%" y="437" width="0.0646%" height="15" fill="rgb(236,170,29)" fg:x="80809" fg:w="80"/><text x="65.5518%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (80 samples, 0.06%)</title><rect x="65.3018%" y="421" width="0.0646%" height="15" fill="rgb(247,96,15)" fg:x="80809" fg:w="80"/><text x="65.5518%" y="431.50"></text></g><g><title>sn_rust_alloc (76 samples, 0.06%)</title><rect x="65.3050%" y="405" width="0.0614%" height="15" fill="rgb(211,210,7)" fg:x="80813" fg:w="76"/><text x="65.5550%" y="415.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (45 samples, 0.04%)</title><rect x="65.3301%" y="389" width="0.0364%" height="15" fill="rgb(240,88,50)" fg:x="80844" fg:w="45"/><text x="65.5801%" y="399.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (214 samples, 0.17%)</title><rect x="65.2056%" y="661" width="0.1729%" height="15" fill="rgb(209,229,26)" fg:x="80690" fg:w="214"/><text x="65.4556%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (127 samples, 0.10%)</title><rect x="65.2759%" y="645" width="0.1026%" height="15" fill="rgb(210,68,23)" fg:x="80777" fg:w="127"/><text x="65.5259%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (127 samples, 0.10%)</title><rect x="65.2759%" y="629" width="0.1026%" height="15" fill="rgb(229,180,13)" fg:x="80777" fg:w="127"/><text x="65.5259%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (109 samples, 0.09%)</title><rect x="65.2905%" y="613" width="0.0881%" height="15" fill="rgb(236,53,44)" fg:x="80795" fg:w="109"/><text x="65.5405%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (105 samples, 0.08%)</title><rect x="65.2937%" y="597" width="0.0849%" height="15" fill="rgb(244,214,29)" fg:x="80799" fg:w="105"/><text x="65.5437%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (105 samples, 0.08%)</title><rect x="65.2937%" y="581" width="0.0849%" height="15" fill="rgb(220,75,29)" fg:x="80799" fg:w="105"/><text x="65.5437%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (105 samples, 0.08%)</title><rect x="65.2937%" y="565" width="0.0849%" height="15" fill="rgb(214,183,37)" fg:x="80799" fg:w="105"/><text x="65.5437%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (15 samples, 0.01%)</title><rect x="65.3664%" y="549" width="0.0121%" height="15" fill="rgb(239,117,29)" fg:x="80889" fg:w="15"/><text x="65.6164%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (15 samples, 0.01%)</title><rect x="65.3664%" y="533" width="0.0121%" height="15" fill="rgb(237,171,35)" fg:x="80889" fg:w="15"/><text x="65.6164%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (13 samples, 0.01%)</title><rect x="65.3680%" y="517" width="0.0105%" height="15" fill="rgb(229,178,53)" fg:x="80891" fg:w="13"/><text x="65.6180%" y="527.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,081 samples, 3.30%)</title><rect x="62.2973%" y="773" width="3.2979%" height="15" fill="rgb(210,102,19)" fg:x="77091" fg:w="4081"/><text x="62.5473%" y="783.50">&lt;co..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (4,081 samples, 3.30%)</title><rect x="62.2973%" y="757" width="3.2979%" height="15" fill="rgb(235,127,22)" fg:x="77091" fg:w="4081"/><text x="62.5473%" y="767.50">tre..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,081 samples, 3.30%)</title><rect x="62.2973%" y="741" width="3.2979%" height="15" fill="rgb(244,31,31)" fg:x="77091" fg:w="4081"/><text x="62.5473%" y="751.50">&lt;co..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (4,081 samples, 3.30%)</title><rect x="62.2973%" y="725" width="3.2979%" height="15" fill="rgb(231,43,21)" fg:x="77091" fg:w="4081"/><text x="62.5473%" y="735.50">tre..</text></g><g><title>tremor_runtime::connectors::source::build_events (4,078 samples, 3.30%)</title><rect x="62.2997%" y="709" width="3.2954%" height="15" fill="rgb(217,131,35)" fg:x="77094" fg:w="4078"/><text x="62.5497%" y="719.50">tre..</text></g><g><title>tremor_script::srs::EventPayload::try_new (1,522 samples, 1.23%)</title><rect x="64.3652%" y="693" width="1.2299%" height="15" fill="rgb(221,149,4)" fg:x="79650" fg:w="1522"/><text x="64.6152%" y="703.50"></text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (918 samples, 0.74%)</title><rect x="64.8533%" y="677" width="0.7418%" height="15" fill="rgb(232,170,28)" fg:x="80254" fg:w="918"/><text x="65.1033%" y="687.50"></text></g><g><title>tremor_script::srs::ValueAndMeta::from_parts (268 samples, 0.22%)</title><rect x="65.3786%" y="661" width="0.2166%" height="15" fill="rgb(238,56,10)" fg:x="80904" fg:w="268"/><text x="65.6286%" y="671.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (195 samples, 0.16%)</title><rect x="65.6056%" y="613" width="0.1576%" height="15" fill="rgb(235,196,14)" fg:x="81185" fg:w="195"/><text x="65.8556%" y="623.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (195 samples, 0.16%)</title><rect x="65.6056%" y="597" width="0.1576%" height="15" fill="rgb(216,45,48)" fg:x="81185" fg:w="195"/><text x="65.8556%" y="607.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (195 samples, 0.16%)</title><rect x="65.6056%" y="581" width="0.1576%" height="15" fill="rgb(238,213,17)" fg:x="81185" fg:w="195"/><text x="65.8556%" y="591.50"></text></g><g><title>[libc-2.31.so] (179 samples, 0.14%)</title><rect x="65.6186%" y="565" width="0.1446%" height="15" fill="rgb(212,13,2)" fg:x="81201" fg:w="179"/><text x="65.8686%" y="575.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (24 samples, 0.02%)</title><rect x="65.8570%" y="565" width="0.0194%" height="15" fill="rgb(240,114,20)" fg:x="81496" fg:w="24"/><text x="66.1070%" y="575.50"></text></g><g><title>core::ops::function::FnOnce::call_once (24 samples, 0.02%)</title><rect x="65.8570%" y="549" width="0.0194%" height="15" fill="rgb(228,41,40)" fg:x="81496" fg:w="24"/><text x="66.1070%" y="559.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (24 samples, 0.02%)</title><rect x="65.8570%" y="533" width="0.0194%" height="15" fill="rgb(244,132,35)" fg:x="81496" fg:w="24"/><text x="66.1070%" y="543.50"></text></g><g><title>async_ffi::FfiContext::with_context (22 samples, 0.02%)</title><rect x="65.8586%" y="517" width="0.0178%" height="15" fill="rgb(253,189,4)" fg:x="81498" fg:w="22"/><text x="66.1086%" y="527.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (4,749 samples, 3.84%)</title><rect x="62.2973%" y="789" width="3.8377%" height="15" fill="rgb(224,37,19)" fg:x="77091" fg:w="4749"/><text x="62.5473%" y="799.50">trem..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (668 samples, 0.54%)</title><rect x="65.5951%" y="773" width="0.5398%" height="15" fill="rgb(235,223,18)" fg:x="81172" fg:w="668"/><text x="65.8451%" y="783.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (668 samples, 0.54%)</title><rect x="65.5951%" y="757" width="0.5398%" height="15" fill="rgb(235,163,25)" fg:x="81172" fg:w="668"/><text x="65.8451%" y="767.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (668 samples, 0.54%)</title><rect x="65.5951%" y="741" width="0.5398%" height="15" fill="rgb(217,145,28)" fg:x="81172" fg:w="668"/><text x="65.8451%" y="751.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (668 samples, 0.54%)</title><rect x="65.5951%" y="725" width="0.5398%" height="15" fill="rgb(223,223,32)" fg:x="81172" fg:w="668"/><text x="65.8451%" y="735.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (668 samples, 0.54%)</title><rect x="65.5951%" y="709" width="0.5398%" height="15" fill="rgb(227,189,39)" fg:x="81172" fg:w="668"/><text x="65.8451%" y="719.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (668 samples, 0.54%)</title><rect x="65.5951%" y="693" width="0.5398%" height="15" fill="rgb(248,10,22)" fg:x="81172" fg:w="668"/><text x="65.8451%" y="703.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (668 samples, 0.54%)</title><rect x="65.5951%" y="677" width="0.5398%" height="15" fill="rgb(248,46,39)" fg:x="81172" fg:w="668"/><text x="65.8451%" y="687.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (668 samples, 0.54%)</title><rect x="65.5951%" y="661" width="0.5398%" height="15" fill="rgb(248,113,48)" fg:x="81172" fg:w="668"/><text x="65.8451%" y="671.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (668 samples, 0.54%)</title><rect x="65.5951%" y="645" width="0.5398%" height="15" fill="rgb(245,16,25)" fg:x="81172" fg:w="668"/><text x="65.8451%" y="655.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (668 samples, 0.54%)</title><rect x="65.5951%" y="629" width="0.5398%" height="15" fill="rgb(249,152,16)" fg:x="81172" fg:w="668"/><text x="65.8451%" y="639.50"></text></g><g><title>std::panic::catch_unwind (460 samples, 0.37%)</title><rect x="65.7632%" y="613" width="0.3717%" height="15" fill="rgb(250,16,1)" fg:x="81380" fg:w="460"/><text x="66.0132%" y="623.50"></text></g><g><title>std::panicking::try (460 samples, 0.37%)</title><rect x="65.7632%" y="597" width="0.3717%" height="15" fill="rgb(249,138,3)" fg:x="81380" fg:w="460"/><text x="66.0132%" y="607.50"></text></g><g><title>std::panicking::try::do_call (460 samples, 0.37%)</title><rect x="65.7632%" y="581" width="0.3717%" height="15" fill="rgb(227,71,41)" fg:x="81380" fg:w="460"/><text x="66.0132%" y="591.50"></text></g><g><title>[libc-2.31.so] (320 samples, 0.26%)</title><rect x="65.8763%" y="565" width="0.2586%" height="15" fill="rgb(209,184,23)" fg:x="81520" fg:w="320"/><text x="66.1263%" y="575.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (17 samples, 0.01%)</title><rect x="66.2044%" y="677" width="0.0137%" height="15" fill="rgb(223,215,31)" fg:x="81926" fg:w="17"/><text x="66.4544%" y="687.50"></text></g><g><title>core::mem::replace (17 samples, 0.01%)</title><rect x="66.2044%" y="661" width="0.0137%" height="15" fill="rgb(210,146,28)" fg:x="81926" fg:w="17"/><text x="66.4544%" y="671.50"></text></g><g><title>core::ptr::read (16 samples, 0.01%)</title><rect x="66.2052%" y="645" width="0.0129%" height="15" fill="rgb(209,183,41)" fg:x="81927" fg:w="16"/><text x="66.4552%" y="655.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (238 samples, 0.19%)</title><rect x="66.2691%" y="661" width="0.1923%" height="15" fill="rgb(209,224,45)" fg:x="82006" fg:w="238"/><text x="66.5191%" y="671.50"></text></g><g><title>core::mem::replace (238 samples, 0.19%)</title><rect x="66.2691%" y="645" width="0.1923%" height="15" fill="rgb(224,209,51)" fg:x="82006" fg:w="238"/><text x="66.5191%" y="655.50"></text></g><g><title>core::ptr::read (238 samples, 0.19%)</title><rect x="66.2691%" y="629" width="0.1923%" height="15" fill="rgb(223,17,39)" fg:x="82006" fg:w="238"/><text x="66.5191%" y="639.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (369 samples, 0.30%)</title><rect x="66.2182%" y="677" width="0.2982%" height="15" fill="rgb(234,204,37)" fg:x="81943" fg:w="369"/><text x="66.4682%" y="687.50"></text></g><g><title>core::mem::drop (68 samples, 0.05%)</title><rect x="66.4614%" y="661" width="0.0550%" height="15" fill="rgb(236,120,5)" fg:x="82244" fg:w="68"/><text x="66.7114%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (68 samples, 0.05%)</title><rect x="66.4614%" y="645" width="0.0550%" height="15" fill="rgb(248,97,27)" fg:x="82244" fg:w="68"/><text x="66.7114%" y="655.50"></text></g><g><title>&lt;event_listener::ListGuard as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="66.5164%" y="661" width="0.0113%" height="15" fill="rgb(240,66,17)" fg:x="82312" fg:w="14"/><text x="66.7664%" y="671.50"></text></g><g><title>std::sync::poison::Flag::done (15 samples, 0.01%)</title><rect x="66.5422%" y="629" width="0.0121%" height="15" fill="rgb(210,79,3)" fg:x="82344" fg:w="15"/><text x="66.7922%" y="639.50"></text></g><g><title>std::thread::panicking (15 samples, 0.01%)</title><rect x="66.5422%" y="613" width="0.0121%" height="15" fill="rgb(214,176,27)" fg:x="82344" fg:w="15"/><text x="66.7922%" y="623.50"></text></g><g><title>std::panicking::panicking (15 samples, 0.01%)</title><rect x="66.5422%" y="597" width="0.0121%" height="15" fill="rgb(235,185,3)" fg:x="82344" fg:w="15"/><text x="66.7922%" y="607.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (15 samples, 0.01%)</title><rect x="66.5422%" y="581" width="0.0121%" height="15" fill="rgb(227,24,12)" fg:x="82344" fg:w="15"/><text x="66.7922%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (369 samples, 0.30%)</title><rect x="66.5164%" y="677" width="0.2982%" height="15" fill="rgb(252,169,48)" fg:x="82312" fg:w="369"/><text x="66.7664%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (355 samples, 0.29%)</title><rect x="66.5277%" y="661" width="0.2869%" height="15" fill="rgb(212,65,1)" fg:x="82326" fg:w="355"/><text x="66.7777%" y="671.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (355 samples, 0.29%)</title><rect x="66.5277%" y="645" width="0.2869%" height="15" fill="rgb(242,39,24)" fg:x="82326" fg:w="355"/><text x="66.7777%" y="655.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (322 samples, 0.26%)</title><rect x="66.5543%" y="629" width="0.2602%" height="15" fill="rgb(249,32,23)" fg:x="82359" fg:w="322"/><text x="66.8043%" y="639.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (322 samples, 0.26%)</title><rect x="66.5543%" y="613" width="0.2602%" height="15" fill="rgb(251,195,23)" fg:x="82359" fg:w="322"/><text x="66.8043%" y="623.50"></text></g><g><title>__GI___pthread_mutex_unlock (309 samples, 0.25%)</title><rect x="66.5648%" y="597" width="0.2497%" height="15" fill="rgb(236,174,8)" fg:x="82372" fg:w="309"/><text x="66.8148%" y="607.50"></text></g><g><title>core::task::wake::Waker::will_wake (40 samples, 0.03%)</title><rect x="66.8145%" y="677" width="0.0323%" height="15" fill="rgb(220,197,8)" fg:x="82681" fg:w="40"/><text x="67.0645%" y="687.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (40 samples, 0.03%)</title><rect x="66.8145%" y="661" width="0.0323%" height="15" fill="rgb(240,108,37)" fg:x="82681" fg:w="40"/><text x="67.0645%" y="671.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (24 samples, 0.02%)</title><rect x="66.8275%" y="645" width="0.0194%" height="15" fill="rgb(232,176,24)" fg:x="82697" fg:w="24"/><text x="67.0775%" y="655.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (24 samples, 0.02%)</title><rect x="66.8275%" y="629" width="0.0194%" height="15" fill="rgb(243,35,29)" fg:x="82697" fg:w="24"/><text x="67.0775%" y="639.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (10,891 samples, 8.80%)</title><rect x="59.3614%" y="869" width="8.8010%" height="15" fill="rgb(210,37,18)" fg:x="73458" fg:w="10891"/><text x="59.6114%" y="879.50">std::thread:..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (10,880 samples, 8.79%)</title><rect x="59.3703%" y="853" width="8.7921%" height="15" fill="rgb(224,184,40)" fg:x="73469" fg:w="10880"/><text x="59.6203%" y="863.50">std::thread:..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (10,873 samples, 8.79%)</title><rect x="59.3760%" y="837" width="8.7865%" height="15" fill="rgb(236,39,29)" fg:x="73476" fg:w="10873"/><text x="59.6260%" y="847.50">async_std::t..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (10,873 samples, 8.79%)</title><rect x="59.3760%" y="821" width="8.7865%" height="15" fill="rgb(232,48,39)" fg:x="73476" fg:w="10873"/><text x="59.6260%" y="831.50">&lt;async_std::..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,873 samples, 8.79%)</title><rect x="59.3760%" y="805" width="8.7865%" height="15" fill="rgb(236,34,42)" fg:x="73476" fg:w="10873"/><text x="59.6260%" y="815.50">&lt;core::futur..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (2,509 samples, 2.03%)</title><rect x="66.1349%" y="789" width="2.0275%" height="15" fill="rgb(243,106,37)" fg:x="81840" fg:w="2509"/><text x="66.3849%" y="799.50">t..</text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,509 samples, 2.03%)</title><rect x="66.1349%" y="773" width="2.0275%" height="15" fill="rgb(218,96,6)" fg:x="81840" fg:w="2509"/><text x="66.3849%" y="783.50">&lt;..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (2,509 samples, 2.03%)</title><rect x="66.1349%" y="757" width="2.0275%" height="15" fill="rgb(235,130,12)" fg:x="81840" fg:w="2509"/><text x="66.3849%" y="767.50">&lt;..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (2,509 samples, 2.03%)</title><rect x="66.1349%" y="741" width="2.0275%" height="15" fill="rgb(231,95,0)" fg:x="81840" fg:w="2509"/><text x="66.3849%" y="751.50">&lt;..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (2,509 samples, 2.03%)</title><rect x="66.1349%" y="725" width="2.0275%" height="15" fill="rgb(228,12,23)" fg:x="81840" fg:w="2509"/><text x="66.3849%" y="735.50">&lt;..</text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (2,509 samples, 2.03%)</title><rect x="66.1349%" y="709" width="2.0275%" height="15" fill="rgb(216,12,1)" fg:x="81840" fg:w="2509"/><text x="66.3849%" y="719.50">&lt;..</text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (2,509 samples, 2.03%)</title><rect x="66.1349%" y="693" width="2.0275%" height="15" fill="rgb(219,59,3)" fg:x="81840" fg:w="2509"/><text x="66.3849%" y="703.50">&lt;..</text></g><g><title>event_listener::Inner::lock (1,628 samples, 1.32%)</title><rect x="66.8469%" y="677" width="1.3156%" height="15" fill="rgb(215,208,46)" fg:x="82721" fg:w="1628"/><text x="67.0969%" y="687.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (1,603 samples, 1.30%)</title><rect x="66.8671%" y="661" width="1.2954%" height="15" fill="rgb(254,224,29)" fg:x="82746" fg:w="1603"/><text x="67.1171%" y="671.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (1,594 samples, 1.29%)</title><rect x="66.8743%" y="645" width="1.2881%" height="15" fill="rgb(232,14,29)" fg:x="82755" fg:w="1594"/><text x="67.1243%" y="655.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (1,547 samples, 1.25%)</title><rect x="66.9123%" y="629" width="1.2501%" height="15" fill="rgb(208,45,52)" fg:x="82802" fg:w="1547"/><text x="67.1623%" y="639.50"></text></g><g><title>__GI___pthread_mutex_lock (1,547 samples, 1.25%)</title><rect x="66.9123%" y="613" width="1.2501%" height="15" fill="rgb(234,191,28)" fg:x="82802" fg:w="1547"/><text x="67.1623%" y="623.50"></text></g><g><title>tremor_common::time::nanotime (36 samples, 0.03%)</title><rect x="68.1649%" y="869" width="0.0291%" height="15" fill="rgb(244,67,43)" fg:x="84352" fg:w="36"/><text x="68.4149%" y="879.50"></text></g><g><title>std::time::SystemTime::now (36 samples, 0.03%)</title><rect x="68.1649%" y="853" width="0.0291%" height="15" fill="rgb(236,189,24)" fg:x="84352" fg:w="36"/><text x="68.4149%" y="863.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (36 samples, 0.03%)</title><rect x="68.1649%" y="837" width="0.0291%" height="15" fill="rgb(239,214,33)" fg:x="84352" fg:w="36"/><text x="68.4149%" y="847.50"></text></g><g><title>std::sys::unix::time::inner::now (36 samples, 0.03%)</title><rect x="68.1649%" y="821" width="0.0291%" height="15" fill="rgb(226,176,41)" fg:x="84352" fg:w="36"/><text x="68.4149%" y="831.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (20 samples, 0.02%)</title><rect x="68.1940%" y="869" width="0.0162%" height="15" fill="rgb(248,47,8)" fg:x="84388" fg:w="20"/><text x="68.4440%" y="879.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (15 samples, 0.01%)</title><rect x="68.2651%" y="757" width="0.0121%" height="15" fill="rgb(218,81,44)" fg:x="84476" fg:w="15"/><text x="68.5151%" y="767.50"></text></g><g><title>core::mem::drop (26 samples, 0.02%)</title><rect x="68.2837%" y="757" width="0.0210%" height="15" fill="rgb(213,98,6)" fg:x="84499" fg:w="26"/><text x="68.5337%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (26 samples, 0.02%)</title><rect x="68.2837%" y="741" width="0.0210%" height="15" fill="rgb(222,85,22)" fg:x="84499" fg:w="26"/><text x="68.5337%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (23 samples, 0.02%)</title><rect x="68.2861%" y="725" width="0.0186%" height="15" fill="rgb(239,46,39)" fg:x="84502" fg:w="23"/><text x="68.5361%" y="735.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="68.2861%" y="709" width="0.0186%" height="15" fill="rgb(237,12,29)" fg:x="84502" fg:w="23"/><text x="68.5361%" y="719.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (21 samples, 0.02%)</title><rect x="68.2877%" y="693" width="0.0170%" height="15" fill="rgb(214,77,8)" fg:x="84504" fg:w="21"/><text x="68.5377%" y="703.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (21 samples, 0.02%)</title><rect x="68.2877%" y="677" width="0.0170%" height="15" fill="rgb(217,168,37)" fg:x="84504" fg:w="21"/><text x="68.5377%" y="687.50"></text></g><g><title>__GI___pthread_mutex_unlock (21 samples, 0.02%)</title><rect x="68.2877%" y="661" width="0.0170%" height="15" fill="rgb(221,217,23)" fg:x="84504" fg:w="21"/><text x="68.5377%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (19 samples, 0.02%)</title><rect x="68.3047%" y="757" width="0.0154%" height="15" fill="rgb(243,229,36)" fg:x="84525" fg:w="19"/><text x="68.5547%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (18 samples, 0.01%)</title><rect x="68.3055%" y="741" width="0.0145%" height="15" fill="rgb(251,163,40)" fg:x="84526" fg:w="18"/><text x="68.5555%" y="751.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.01%)</title><rect x="68.3055%" y="725" width="0.0145%" height="15" fill="rgb(237,222,12)" fg:x="84526" fg:w="18"/><text x="68.5555%" y="735.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (17 samples, 0.01%)</title><rect x="68.3063%" y="709" width="0.0137%" height="15" fill="rgb(248,132,6)" fg:x="84527" fg:w="17"/><text x="68.5563%" y="719.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (17 samples, 0.01%)</title><rect x="68.3063%" y="693" width="0.0137%" height="15" fill="rgb(227,167,50)" fg:x="84527" fg:w="17"/><text x="68.5563%" y="703.50"></text></g><g><title>__GI___pthread_mutex_unlock (17 samples, 0.01%)</title><rect x="68.3063%" y="677" width="0.0137%" height="15" fill="rgb(242,84,37)" fg:x="84527" fg:w="17"/><text x="68.5563%" y="687.50"></text></g><g><title>event_listener::Inner::lock (173 samples, 0.14%)</title><rect x="68.3225%" y="757" width="0.1398%" height="15" fill="rgb(212,4,50)" fg:x="84547" fg:w="173"/><text x="68.5725%" y="767.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (169 samples, 0.14%)</title><rect x="68.3257%" y="741" width="0.1366%" height="15" fill="rgb(230,228,32)" fg:x="84551" fg:w="169"/><text x="68.5757%" y="751.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (166 samples, 0.13%)</title><rect x="68.3281%" y="725" width="0.1341%" height="15" fill="rgb(248,217,23)" fg:x="84554" fg:w="166"/><text x="68.5781%" y="735.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (133 samples, 0.11%)</title><rect x="68.3548%" y="709" width="0.1075%" height="15" fill="rgb(238,197,32)" fg:x="84587" fg:w="133"/><text x="68.6048%" y="719.50"></text></g><g><title>__GI___pthread_mutex_lock (133 samples, 0.11%)</title><rect x="68.3548%" y="693" width="0.1075%" height="15" fill="rgb(236,106,1)" fg:x="84587" fg:w="133"/><text x="68.6048%" y="703.50"></text></g><g><title>__lll_lock_wait (13 samples, 0.01%)</title><rect x="68.4518%" y="677" width="0.0105%" height="15" fill="rgb(219,228,13)" fg:x="84707" fg:w="13"/><text x="68.7018%" y="687.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (294 samples, 0.24%)</title><rect x="68.2586%" y="773" width="0.2376%" height="15" fill="rgb(238,30,35)" fg:x="84468" fg:w="294"/><text x="68.5086%" y="783.50"></text></g><g><title>event_listener::List::remove (42 samples, 0.03%)</title><rect x="68.4623%" y="757" width="0.0339%" height="15" fill="rgb(236,70,23)" fg:x="84720" fg:w="42"/><text x="68.7123%" y="767.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (33 samples, 0.03%)</title><rect x="68.4695%" y="741" width="0.0267%" height="15" fill="rgb(249,104,48)" fg:x="84729" fg:w="33"/><text x="68.7195%" y="751.50"></text></g><g><title>core::mem::replace (33 samples, 0.03%)</title><rect x="68.4695%" y="725" width="0.0267%" height="15" fill="rgb(254,117,50)" fg:x="84729" fg:w="33"/><text x="68.7195%" y="735.50"></text></g><g><title>core::ptr::read (33 samples, 0.03%)</title><rect x="68.4695%" y="709" width="0.0267%" height="15" fill="rgb(223,152,4)" fg:x="84729" fg:w="33"/><text x="68.7195%" y="719.50"></text></g><g><title>[libc-2.31.so] (677 samples, 0.55%)</title><rect x="68.4962%" y="773" width="0.5471%" height="15" fill="rgb(245,6,2)" fg:x="84762" fg:w="677"/><text x="68.7462%" y="783.50"></text></g><g><title>[libc-2.31.so] (1,017 samples, 0.82%)</title><rect x="69.0772%" y="757" width="0.8218%" height="15" fill="rgb(249,150,24)" fg:x="85481" fg:w="1017"/><text x="69.3272%" y="767.50"></text></g><g><title>[libc-2.31.so] (261 samples, 0.21%)</title><rect x="70.0954%" y="725" width="0.2109%" height="15" fill="rgb(228,185,42)" fg:x="86741" fg:w="261"/><text x="70.3454%" y="735.50"></text></g><g><title>concurrent_queue::full_fence (51 samples, 0.04%)</title><rect x="70.3064%" y="725" width="0.0412%" height="15" fill="rgb(226,39,33)" fg:x="87002" fg:w="51"/><text x="70.5564%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (48 samples, 0.04%)</title><rect x="70.3088%" y="709" width="0.0388%" height="15" fill="rgb(221,166,19)" fg:x="87005" fg:w="48"/><text x="70.5588%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (48 samples, 0.04%)</title><rect x="70.3088%" y="693" width="0.0388%" height="15" fill="rgb(209,109,2)" fg:x="87005" fg:w="48"/><text x="70.5588%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (48 samples, 0.04%)</title><rect x="70.3088%" y="677" width="0.0388%" height="15" fill="rgb(252,216,26)" fg:x="87005" fg:w="48"/><text x="70.5588%" y="687.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (15 samples, 0.01%)</title><rect x="70.3476%" y="725" width="0.0121%" height="15" fill="rgb(227,173,36)" fg:x="87053" fg:w="15"/><text x="70.5976%" y="735.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (562 samples, 0.45%)</title><rect x="70.3597%" y="725" width="0.4542%" height="15" fill="rgb(209,90,7)" fg:x="87068" fg:w="562"/><text x="70.6097%" y="735.50"></text></g><g><title>core::ptr::read (562 samples, 0.45%)</title><rect x="70.3597%" y="709" width="0.4542%" height="15" fill="rgb(250,194,11)" fg:x="87068" fg:w="562"/><text x="70.6097%" y="719.50"></text></g><g><title>[libc-2.31.so] (562 samples, 0.45%)</title><rect x="70.3597%" y="693" width="0.4542%" height="15" fill="rgb(220,72,50)" fg:x="87068" fg:w="562"/><text x="70.6097%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (941 samples, 0.76%)</title><rect x="70.8138%" y="725" width="0.7604%" height="15" fill="rgb(222,106,48)" fg:x="87630" fg:w="941"/><text x="71.0638%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (941 samples, 0.76%)</title><rect x="70.8138%" y="709" width="0.7604%" height="15" fill="rgb(216,220,45)" fg:x="87630" fg:w="941"/><text x="71.0638%" y="719.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (2,350 samples, 1.90%)</title><rect x="69.8991%" y="757" width="1.8990%" height="15" fill="rgb(234,112,18)" fg:x="86498" fg:w="2350"/><text x="70.1491%" y="767.50">c..</text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (2,303 samples, 1.86%)</title><rect x="69.9370%" y="741" width="1.8611%" height="15" fill="rgb(206,179,9)" fg:x="86545" fg:w="2303"/><text x="70.1870%" y="751.50">c..</text></g><g><title>core::sync::atomic::AtomicUsize::load (277 samples, 0.22%)</title><rect x="71.5743%" y="725" width="0.2238%" height="15" fill="rgb(215,115,40)" fg:x="88571" fg:w="277"/><text x="71.8243%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_load (273 samples, 0.22%)</title><rect x="71.5775%" y="709" width="0.2206%" height="15" fill="rgb(222,69,34)" fg:x="88575" fg:w="273"/><text x="71.8275%" y="719.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (3,751 samples, 3.03%)</title><rect x="69.0433%" y="773" width="3.0312%" height="15" fill="rgb(209,161,10)" fg:x="85439" fg:w="3751"/><text x="69.2933%" y="783.50">asy..</text></g><g><title>event_listener::Event::notify (342 samples, 0.28%)</title><rect x="71.7981%" y="757" width="0.2764%" height="15" fill="rgb(217,6,38)" fg:x="88848" fg:w="342"/><text x="72.0481%" y="767.50"></text></g><g><title>event_listener::full_fence (328 samples, 0.27%)</title><rect x="71.8094%" y="741" width="0.2651%" height="15" fill="rgb(229,229,48)" fg:x="88862" fg:w="328"/><text x="72.0594%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (328 samples, 0.27%)</title><rect x="71.8094%" y="725" width="0.2651%" height="15" fill="rgb(225,21,28)" fg:x="88862" fg:w="328"/><text x="72.0594%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (328 samples, 0.27%)</title><rect x="71.8094%" y="709" width="0.2651%" height="15" fill="rgb(206,33,13)" fg:x="88862" fg:w="328"/><text x="72.0594%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (58 samples, 0.05%)</title><rect x="72.0793%" y="773" width="0.0469%" height="15" fill="rgb(242,178,17)" fg:x="89196" fg:w="58"/><text x="72.3293%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (42 samples, 0.03%)</title><rect x="72.0923%" y="757" width="0.0339%" height="15" fill="rgb(220,162,5)" fg:x="89212" fg:w="42"/><text x="72.3423%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (37 samples, 0.03%)</title><rect x="72.0963%" y="741" width="0.0299%" height="15" fill="rgb(210,33,43)" fg:x="89217" fg:w="37"/><text x="72.3463%" y="751.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.03%)</title><rect x="72.0963%" y="725" width="0.0299%" height="15" fill="rgb(216,116,54)" fg:x="89217" fg:w="37"/><text x="72.3463%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (37 samples, 0.03%)</title><rect x="72.0963%" y="709" width="0.0299%" height="15" fill="rgb(249,92,24)" fg:x="89217" fg:w="37"/><text x="72.3463%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_sub (37 samples, 0.03%)</title><rect x="72.0963%" y="693" width="0.0299%" height="15" fill="rgb(231,189,14)" fg:x="89217" fg:w="37"/><text x="72.3463%" y="703.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (64 samples, 0.05%)</title><rect x="72.1294%" y="757" width="0.0517%" height="15" fill="rgb(230,8,41)" fg:x="89258" fg:w="64"/><text x="72.3794%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (64 samples, 0.05%)</title><rect x="72.1294%" y="741" width="0.0517%" height="15" fill="rgb(249,7,27)" fg:x="89258" fg:w="64"/><text x="72.3794%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_add (64 samples, 0.05%)</title><rect x="72.1294%" y="725" width="0.0517%" height="15" fill="rgb(232,86,5)" fg:x="89258" fg:w="64"/><text x="72.3794%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (29 samples, 0.02%)</title><rect x="72.1811%" y="757" width="0.0234%" height="15" fill="rgb(224,175,18)" fg:x="89322" fg:w="29"/><text x="72.4311%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (29 samples, 0.02%)</title><rect x="72.1811%" y="741" width="0.0234%" height="15" fill="rgb(220,129,12)" fg:x="89322" fg:w="29"/><text x="72.4311%" y="751.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.02%)</title><rect x="72.1811%" y="725" width="0.0234%" height="15" fill="rgb(210,19,36)" fg:x="89322" fg:w="29"/><text x="72.4311%" y="735.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (27 samples, 0.02%)</title><rect x="72.1828%" y="709" width="0.0218%" height="15" fill="rgb(219,96,14)" fg:x="89324" fg:w="27"/><text x="72.4328%" y="719.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (27 samples, 0.02%)</title><rect x="72.1828%" y="693" width="0.0218%" height="15" fill="rgb(249,106,1)" fg:x="89324" fg:w="27"/><text x="72.4328%" y="703.50"></text></g><g><title>__GI___pthread_mutex_unlock (27 samples, 0.02%)</title><rect x="72.1828%" y="677" width="0.0218%" height="15" fill="rgb(249,155,20)" fg:x="89324" fg:w="27"/><text x="72.4328%" y="687.50"></text></g><g><title>event_listener::Inner::lock (57 samples, 0.05%)</title><rect x="72.2046%" y="757" width="0.0461%" height="15" fill="rgb(244,168,9)" fg:x="89351" fg:w="57"/><text x="72.4546%" y="767.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (56 samples, 0.05%)</title><rect x="72.2054%" y="741" width="0.0453%" height="15" fill="rgb(216,23,50)" fg:x="89352" fg:w="56"/><text x="72.4554%" y="751.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (54 samples, 0.04%)</title><rect x="72.2070%" y="725" width="0.0436%" height="15" fill="rgb(224,219,20)" fg:x="89354" fg:w="54"/><text x="72.4570%" y="735.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (54 samples, 0.04%)</title><rect x="72.2070%" y="709" width="0.0436%" height="15" fill="rgb(222,156,15)" fg:x="89354" fg:w="54"/><text x="72.4570%" y="719.50"></text></g><g><title>__GI___pthread_mutex_lock (52 samples, 0.04%)</title><rect x="72.2086%" y="693" width="0.0420%" height="15" fill="rgb(231,97,17)" fg:x="89356" fg:w="52"/><text x="72.4586%" y="703.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,018 samples, 4.06%)</title><rect x="68.2101%" y="853" width="4.0550%" height="15" fill="rgb(218,70,48)" fg:x="84408" fg:w="5018"/><text x="68.4601%" y="863.50">&lt;asy..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (5,018 samples, 4.06%)</title><rect x="68.2101%" y="837" width="4.0550%" height="15" fill="rgb(212,196,52)" fg:x="84408" fg:w="5018"/><text x="68.4601%" y="847.50">&lt;tre..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (5,018 samples, 4.06%)</title><rect x="68.2101%" y="821" width="4.0550%" height="15" fill="rgb(243,203,18)" fg:x="84408" fg:w="5018"/><text x="68.4601%" y="831.50">&lt;asy..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (5,018 samples, 4.06%)</title><rect x="68.2101%" y="805" width="4.0550%" height="15" fill="rgb(252,125,41)" fg:x="84408" fg:w="5018"/><text x="68.4601%" y="815.50">&lt;asy..</text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (5,018 samples, 4.06%)</title><rect x="68.2101%" y="789" width="4.0550%" height="15" fill="rgb(223,180,33)" fg:x="84408" fg:w="5018"/><text x="68.4601%" y="799.50">&lt;asy..</text></g><g><title>event_listener::Event::listen (172 samples, 0.14%)</title><rect x="72.1262%" y="773" width="0.1390%" height="15" fill="rgb(254,159,46)" fg:x="89254" fg:w="172"/><text x="72.3762%" y="783.50"></text></g><g><title>event_listener::full_fence (13 samples, 0.01%)</title><rect x="72.2547%" y="757" width="0.0105%" height="15" fill="rgb(254,38,10)" fg:x="89413" fg:w="13"/><text x="72.5047%" y="767.50"></text></g><g><title>alloc::alloc::exchange_malloc (74 samples, 0.06%)</title><rect x="72.3145%" y="485" width="0.0598%" height="15" fill="rgb(208,217,32)" fg:x="89487" fg:w="74"/><text x="72.5645%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (74 samples, 0.06%)</title><rect x="72.3145%" y="469" width="0.0598%" height="15" fill="rgb(221,120,13)" fg:x="89487" fg:w="74"/><text x="72.5645%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (74 samples, 0.06%)</title><rect x="72.3145%" y="453" width="0.0598%" height="15" fill="rgb(246,54,52)" fg:x="89487" fg:w="74"/><text x="72.5645%" y="463.50"></text></g><g><title>alloc::alloc::alloc (65 samples, 0.05%)</title><rect x="72.3218%" y="437" width="0.0525%" height="15" fill="rgb(242,34,25)" fg:x="89496" fg:w="65"/><text x="72.5718%" y="447.50"></text></g><g><title>__rg_alloc (65 samples, 0.05%)</title><rect x="72.3218%" y="421" width="0.0525%" height="15" fill="rgb(247,209,9)" fg:x="89496" fg:w="65"/><text x="72.5718%" y="431.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (65 samples, 0.05%)</title><rect x="72.3218%" y="405" width="0.0525%" height="15" fill="rgb(228,71,26)" fg:x="89496" fg:w="65"/><text x="72.5718%" y="415.50"></text></g><g><title>sn_rust_alloc (65 samples, 0.05%)</title><rect x="72.3218%" y="389" width="0.0525%" height="15" fill="rgb(222,145,49)" fg:x="89496" fg:w="65"/><text x="72.5718%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::into_vec (13 samples, 0.01%)</title><rect x="72.3743%" y="485" width="0.0105%" height="15" fill="rgb(218,121,17)" fg:x="89561" fg:w="13"/><text x="72.6243%" y="495.50"></text></g><g><title>alloc::slice::hack::into_vec (13 samples, 0.01%)</title><rect x="72.3743%" y="469" width="0.0105%" height="15" fill="rgb(244,50,7)" fg:x="89561" fg:w="13"/><text x="72.6243%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (13 samples, 0.01%)</title><rect x="72.3743%" y="453" width="0.0105%" height="15" fill="rgb(246,229,37)" fg:x="89561" fg:w="13"/><text x="72.6243%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="72.3848%" y="485" width="0.0113%" height="15" fill="rgb(225,18,5)" fg:x="89574" fg:w="14"/><text x="72.6348%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="72.3848%" y="469" width="0.0113%" height="15" fill="rgb(213,204,8)" fg:x="89574" fg:w="14"/><text x="72.6348%" y="479.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="72.3848%" y="453" width="0.0113%" height="15" fill="rgb(238,103,6)" fg:x="89574" fg:w="14"/><text x="72.6348%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (13 samples, 0.01%)</title><rect x="72.3856%" y="437" width="0.0105%" height="15" fill="rgb(222,25,35)" fg:x="89575" fg:w="13"/><text x="72.6356%" y="447.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (37 samples, 0.03%)</title><rect x="72.4252%" y="469" width="0.0299%" height="15" fill="rgb(213,203,35)" fg:x="89624" fg:w="37"/><text x="72.6752%" y="479.50"></text></g><g><title>core::time::Duration::as_nanos (29 samples, 0.02%)</title><rect x="72.4551%" y="469" width="0.0234%" height="15" fill="rgb(221,79,53)" fg:x="89661" fg:w="29"/><text x="72.7051%" y="479.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (123 samples, 0.10%)</title><rect x="72.4785%" y="453" width="0.0994%" height="15" fill="rgb(243,200,35)" fg:x="89690" fg:w="123"/><text x="72.7285%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (53 samples, 0.04%)</title><rect x="72.6208%" y="421" width="0.0428%" height="15" fill="rgb(248,60,25)" fg:x="89866" fg:w="53"/><text x="72.8708%" y="431.50"></text></g><g><title>core::cmp::PartialOrd::ge (53 samples, 0.04%)</title><rect x="72.6208%" y="405" width="0.0428%" height="15" fill="rgb(227,53,46)" fg:x="89866" fg:w="53"/><text x="72.8708%" y="415.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (49 samples, 0.04%)</title><rect x="72.6240%" y="389" width="0.0396%" height="15" fill="rgb(216,120,32)" fg:x="89870" fg:w="49"/><text x="72.8740%" y="399.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (49 samples, 0.04%)</title><rect x="72.6240%" y="373" width="0.0396%" height="15" fill="rgb(220,134,1)" fg:x="89870" fg:w="49"/><text x="72.8740%" y="383.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (49 samples, 0.04%)</title><rect x="72.6240%" y="357" width="0.0396%" height="15" fill="rgb(237,168,5)" fg:x="89870" fg:w="49"/><text x="72.8740%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (17 samples, 0.01%)</title><rect x="72.6498%" y="341" width="0.0137%" height="15" fill="rgb(231,100,33)" fg:x="89902" fg:w="17"/><text x="72.8998%" y="351.50"></text></g><g><title>std::time::SystemTime::duration_since (259 samples, 0.21%)</title><rect x="72.4785%" y="469" width="0.2093%" height="15" fill="rgb(236,177,47)" fg:x="89690" fg:w="259"/><text x="72.7285%" y="479.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (136 samples, 0.11%)</title><rect x="72.5779%" y="453" width="0.1099%" height="15" fill="rgb(235,7,49)" fg:x="89813" fg:w="136"/><text x="72.8279%" y="463.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (136 samples, 0.11%)</title><rect x="72.5779%" y="437" width="0.1099%" height="15" fill="rgb(232,119,22)" fg:x="89813" fg:w="136"/><text x="72.8279%" y="447.50"></text></g><g><title>core::time::Duration::new (30 samples, 0.02%)</title><rect x="72.6636%" y="421" width="0.0242%" height="15" fill="rgb(254,73,53)" fg:x="89919" fg:w="30"/><text x="72.9136%" y="431.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (6,158 samples, 4.98%)</title><rect x="68.2101%" y="869" width="4.9763%" height="15" fill="rgb(251,35,20)" fg:x="84408" fg:w="6158"/><text x="68.4601%" y="879.50">tremor..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,140 samples, 0.92%)</title><rect x="72.2652%" y="853" width="0.9212%" height="15" fill="rgb(241,119,20)" fg:x="89426" fg:w="1140"/><text x="72.5152%" y="863.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (1,140 samples, 0.92%)</title><rect x="72.2652%" y="837" width="0.9212%" height="15" fill="rgb(207,102,14)" fg:x="89426" fg:w="1140"/><text x="72.5152%" y="847.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,140 samples, 0.92%)</title><rect x="72.2652%" y="821" width="0.9212%" height="15" fill="rgb(248,201,50)" fg:x="89426" fg:w="1140"/><text x="72.5152%" y="831.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,140 samples, 0.92%)</title><rect x="72.2652%" y="805" width="0.9212%" height="15" fill="rgb(222,185,44)" fg:x="89426" fg:w="1140"/><text x="72.5152%" y="815.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (1,140 samples, 0.92%)</title><rect x="72.2652%" y="789" width="0.9212%" height="15" fill="rgb(218,107,18)" fg:x="89426" fg:w="1140"/><text x="72.5152%" y="799.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,140 samples, 0.92%)</title><rect x="72.2652%" y="773" width="0.9212%" height="15" fill="rgb(237,177,39)" fg:x="89426" fg:w="1140"/><text x="72.5152%" y="783.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (1,140 samples, 0.92%)</title><rect x="72.2652%" y="757" width="0.9212%" height="15" fill="rgb(246,69,6)" fg:x="89426" fg:w="1140"/><text x="72.5152%" y="767.50"></text></g><g><title>std::panic::catch_unwind (1,140 samples, 0.92%)</title><rect x="72.2652%" y="741" width="0.9212%" height="15" fill="rgb(234,208,37)" fg:x="89426" fg:w="1140"/><text x="72.5152%" y="751.50"></text></g><g><title>std::panicking::try (1,140 samples, 0.92%)</title><rect x="72.2652%" y="725" width="0.9212%" height="15" fill="rgb(225,4,6)" fg:x="89426" fg:w="1140"/><text x="72.5152%" y="735.50"></text></g><g><title>std::panicking::try::do_call (1,140 samples, 0.92%)</title><rect x="72.2652%" y="709" width="0.9212%" height="15" fill="rgb(233,45,0)" fg:x="89426" fg:w="1140"/><text x="72.5152%" y="719.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,140 samples, 0.92%)</title><rect x="72.2652%" y="693" width="0.9212%" height="15" fill="rgb(226,136,5)" fg:x="89426" fg:w="1140"/><text x="72.5152%" y="703.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1,140 samples, 0.92%)</title><rect x="72.2652%" y="677" width="0.9212%" height="15" fill="rgb(211,91,47)" fg:x="89426" fg:w="1140"/><text x="72.5152%" y="687.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (1,140 samples, 0.92%)</title><rect x="72.2652%" y="661" width="0.9212%" height="15" fill="rgb(242,88,51)" fg:x="89426" fg:w="1140"/><text x="72.5152%" y="671.50"></text></g><g><title>async_ffi::FfiContext::with_context (1,140 samples, 0.92%)</title><rect x="72.2652%" y="645" width="0.9212%" height="15" fill="rgb(230,91,28)" fg:x="89426" fg:w="1140"/><text x="72.5152%" y="655.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (1,140 samples, 0.92%)</title><rect x="72.2652%" y="629" width="0.9212%" height="15" fill="rgb(254,186,29)" fg:x="89426" fg:w="1140"/><text x="72.5152%" y="639.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,140 samples, 0.92%)</title><rect x="72.2652%" y="613" width="0.9212%" height="15" fill="rgb(238,6,4)" fg:x="89426" fg:w="1140"/><text x="72.5152%" y="623.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (1,140 samples, 0.92%)</title><rect x="72.2652%" y="597" width="0.9212%" height="15" fill="rgb(221,151,16)" fg:x="89426" fg:w="1140"/><text x="72.5152%" y="607.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (1,140 samples, 0.92%)</title><rect x="72.2652%" y="581" width="0.9212%" height="15" fill="rgb(251,143,52)" fg:x="89426" fg:w="1140"/><text x="72.5152%" y="591.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (1,140 samples, 0.92%)</title><rect x="72.2652%" y="565" width="0.9212%" height="15" fill="rgb(206,90,15)" fg:x="89426" fg:w="1140"/><text x="72.5152%" y="575.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (1,140 samples, 0.92%)</title><rect x="72.2652%" y="549" width="0.9212%" height="15" fill="rgb(218,35,8)" fg:x="89426" fg:w="1140"/><text x="72.5152%" y="559.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (1,140 samples, 0.92%)</title><rect x="72.2652%" y="533" width="0.9212%" height="15" fill="rgb(239,215,6)" fg:x="89426" fg:w="1140"/><text x="72.5152%" y="543.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (1,140 samples, 0.92%)</title><rect x="72.2652%" y="517" width="0.9212%" height="15" fill="rgb(245,116,39)" fg:x="89426" fg:w="1140"/><text x="72.5152%" y="527.50"></text></g><g><title>tremor_runtime::postprocessor::postprocess (1,140 samples, 0.92%)</title><rect x="72.2652%" y="501" width="0.9212%" height="15" fill="rgb(242,65,28)" fg:x="89426" fg:w="1140"/><text x="72.5152%" y="511.50"></text></g><g><title>tremor_common::time::nanotime (971 samples, 0.78%)</title><rect x="72.4018%" y="485" width="0.7847%" height="15" fill="rgb(252,132,53)" fg:x="89595" fg:w="971"/><text x="72.6518%" y="495.50"></text></g><g><title>std::time::SystemTime::now (617 samples, 0.50%)</title><rect x="72.6878%" y="469" width="0.4986%" height="15" fill="rgb(224,159,50)" fg:x="89949" fg:w="617"/><text x="72.9378%" y="479.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (617 samples, 0.50%)</title><rect x="72.6878%" y="453" width="0.4986%" height="15" fill="rgb(224,93,4)" fg:x="89949" fg:w="617"/><text x="72.9378%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::now (617 samples, 0.50%)</title><rect x="72.6878%" y="437" width="0.4986%" height="15" fill="rgb(208,81,34)" fg:x="89949" fg:w="617"/><text x="72.9378%" y="447.50"></text></g><g><title>__clock_gettime (478 samples, 0.39%)</title><rect x="72.8001%" y="421" width="0.3863%" height="15" fill="rgb(233,92,54)" fg:x="90088" fg:w="478"/><text x="73.0501%" y="431.50"></text></g><g><title>__vdso_clock_gettime (457 samples, 0.37%)</title><rect x="72.8171%" y="405" width="0.3693%" height="15" fill="rgb(237,21,14)" fg:x="90109" fg:w="457"/><text x="73.0671%" y="415.50"></text></g><g><title>[[vdso]] (406 samples, 0.33%)</title><rect x="72.8583%" y="389" width="0.3281%" height="15" fill="rgb(249,128,51)" fg:x="90160" fg:w="406"/><text x="73.1083%" y="399.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (21 samples, 0.02%)</title><rect x="73.2107%" y="837" width="0.0170%" height="15" fill="rgb(223,129,24)" fg:x="90596" fg:w="21"/><text x="73.4607%" y="847.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (21 samples, 0.02%)</title><rect x="73.2107%" y="821" width="0.0170%" height="15" fill="rgb(231,168,25)" fg:x="90596" fg:w="21"/><text x="73.4607%" y="831.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (14 samples, 0.01%)</title><rect x="73.2163%" y="805" width="0.0113%" height="15" fill="rgb(224,39,20)" fg:x="90603" fg:w="14"/><text x="73.4663%" y="815.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (60 samples, 0.05%)</title><rect x="73.5299%" y="725" width="0.0485%" height="15" fill="rgb(225,152,53)" fg:x="90991" fg:w="60"/><text x="73.7799%" y="735.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (57 samples, 0.05%)</title><rect x="73.5323%" y="709" width="0.0461%" height="15" fill="rgb(252,17,24)" fg:x="90994" fg:w="57"/><text x="73.7823%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (57 samples, 0.05%)</title><rect x="73.5323%" y="693" width="0.0461%" height="15" fill="rgb(250,114,30)" fg:x="90994" fg:w="57"/><text x="73.7823%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_add (57 samples, 0.05%)</title><rect x="73.5323%" y="677" width="0.0461%" height="15" fill="rgb(229,5,4)" fg:x="90994" fg:w="57"/><text x="73.7823%" y="687.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (24 samples, 0.02%)</title><rect x="73.5783%" y="725" width="0.0194%" height="15" fill="rgb(225,176,49)" fg:x="91051" fg:w="24"/><text x="73.8283%" y="735.50"></text></g><g><title>core::mem::replace (24 samples, 0.02%)</title><rect x="73.5783%" y="709" width="0.0194%" height="15" fill="rgb(224,221,49)" fg:x="91051" fg:w="24"/><text x="73.8283%" y="719.50"></text></g><g><title>core::ptr::read (24 samples, 0.02%)</title><rect x="73.5783%" y="693" width="0.0194%" height="15" fill="rgb(253,169,27)" fg:x="91051" fg:w="24"/><text x="73.8283%" y="703.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (201 samples, 0.16%)</title><rect x="73.6551%" y="709" width="0.1624%" height="15" fill="rgb(211,206,16)" fg:x="91146" fg:w="201"/><text x="73.9051%" y="719.50"></text></g><g><title>core::mem::replace (201 samples, 0.16%)</title><rect x="73.6551%" y="693" width="0.1624%" height="15" fill="rgb(244,87,35)" fg:x="91146" fg:w="201"/><text x="73.9051%" y="703.50"></text></g><g><title>core::ptr::read (201 samples, 0.16%)</title><rect x="73.6551%" y="677" width="0.1624%" height="15" fill="rgb(246,28,10)" fg:x="91146" fg:w="201"/><text x="73.9051%" y="687.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (335 samples, 0.27%)</title><rect x="73.5977%" y="725" width="0.2707%" height="15" fill="rgb(229,12,44)" fg:x="91075" fg:w="335"/><text x="73.8477%" y="735.50"></text></g><g><title>core::mem::drop (63 samples, 0.05%)</title><rect x="73.8175%" y="709" width="0.0509%" height="15" fill="rgb(210,145,37)" fg:x="91347" fg:w="63"/><text x="74.0675%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (63 samples, 0.05%)</title><rect x="73.8175%" y="693" width="0.0509%" height="15" fill="rgb(227,112,52)" fg:x="91347" fg:w="63"/><text x="74.0675%" y="703.50"></text></g><g><title>core::mem::drop (98 samples, 0.08%)</title><rect x="73.8685%" y="725" width="0.0792%" height="15" fill="rgb(238,155,34)" fg:x="91410" fg:w="98"/><text x="74.1185%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (98 samples, 0.08%)</title><rect x="73.8685%" y="709" width="0.0792%" height="15" fill="rgb(239,226,36)" fg:x="91410" fg:w="98"/><text x="74.1185%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (92 samples, 0.07%)</title><rect x="73.8733%" y="693" width="0.0743%" height="15" fill="rgb(230,16,23)" fg:x="91416" fg:w="92"/><text x="74.1233%" y="703.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (92 samples, 0.07%)</title><rect x="73.8733%" y="677" width="0.0743%" height="15" fill="rgb(236,171,36)" fg:x="91416" fg:w="92"/><text x="74.1233%" y="687.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (89 samples, 0.07%)</title><rect x="73.8757%" y="661" width="0.0719%" height="15" fill="rgb(221,22,14)" fg:x="91419" fg:w="89"/><text x="74.1257%" y="671.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (86 samples, 0.07%)</title><rect x="73.8782%" y="645" width="0.0695%" height="15" fill="rgb(242,43,11)" fg:x="91422" fg:w="86"/><text x="74.1282%" y="655.50"></text></g><g><title>__GI___pthread_mutex_unlock (86 samples, 0.07%)</title><rect x="73.8782%" y="629" width="0.0695%" height="15" fill="rgb(232,69,23)" fg:x="91422" fg:w="86"/><text x="74.1282%" y="639.50"></text></g><g><title>&lt;event_listener::ListGuard as core::ops::drop::Drop&gt;::drop (24 samples, 0.02%)</title><rect x="73.9477%" y="709" width="0.0194%" height="15" fill="rgb(216,180,54)" fg:x="91508" fg:w="24"/><text x="74.1977%" y="719.50"></text></g><g><title>std::sync::poison::Flag::done (19 samples, 0.02%)</title><rect x="73.9784%" y="677" width="0.0154%" height="15" fill="rgb(216,5,24)" fg:x="91546" fg:w="19"/><text x="74.2284%" y="687.50"></text></g><g><title>std::thread::panicking (19 samples, 0.02%)</title><rect x="73.9784%" y="661" width="0.0154%" height="15" fill="rgb(225,89,9)" fg:x="91546" fg:w="19"/><text x="74.2284%" y="671.50"></text></g><g><title>std::panicking::panicking (19 samples, 0.02%)</title><rect x="73.9784%" y="645" width="0.0154%" height="15" fill="rgb(243,75,33)" fg:x="91546" fg:w="19"/><text x="74.2284%" y="655.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (19 samples, 0.02%)</title><rect x="73.9784%" y="629" width="0.0154%" height="15" fill="rgb(247,141,45)" fg:x="91546" fg:w="19"/><text x="74.2284%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (429 samples, 0.35%)</title><rect x="73.9477%" y="725" width="0.3467%" height="15" fill="rgb(232,177,36)" fg:x="91508" fg:w="429"/><text x="74.1977%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (405 samples, 0.33%)</title><rect x="73.9670%" y="709" width="0.3273%" height="15" fill="rgb(219,125,36)" fg:x="91532" fg:w="405"/><text x="74.2170%" y="719.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (405 samples, 0.33%)</title><rect x="73.9670%" y="693" width="0.3273%" height="15" fill="rgb(227,94,9)" fg:x="91532" fg:w="405"/><text x="74.2170%" y="703.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (372 samples, 0.30%)</title><rect x="73.9937%" y="677" width="0.3006%" height="15" fill="rgb(240,34,52)" fg:x="91565" fg:w="372"/><text x="74.2437%" y="687.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (370 samples, 0.30%)</title><rect x="73.9953%" y="661" width="0.2990%" height="15" fill="rgb(216,45,12)" fg:x="91567" fg:w="370"/><text x="74.2453%" y="671.50"></text></g><g><title>__GI___pthread_mutex_unlock (360 samples, 0.29%)</title><rect x="74.0034%" y="645" width="0.2909%" height="15" fill="rgb(246,21,19)" fg:x="91577" fg:w="360"/><text x="74.2534%" y="655.50"></text></g><g><title>core::task::wake::Waker::will_wake (36 samples, 0.03%)</title><rect x="74.2968%" y="725" width="0.0291%" height="15" fill="rgb(213,98,42)" fg:x="91940" fg:w="36"/><text x="74.5468%" y="735.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (36 samples, 0.03%)</title><rect x="74.2968%" y="709" width="0.0291%" height="15" fill="rgb(250,136,47)" fg:x="91940" fg:w="36"/><text x="74.5468%" y="719.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (27 samples, 0.02%)</title><rect x="74.3040%" y="693" width="0.0218%" height="15" fill="rgb(251,124,27)" fg:x="91949" fg:w="27"/><text x="74.5540%" y="703.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (27 samples, 0.02%)</title><rect x="74.3040%" y="677" width="0.0218%" height="15" fill="rgb(229,180,14)" fg:x="91949" fg:w="27"/><text x="74.5540%" y="687.50"></text></g><g><title>std::sync::poison::Flag::get (55 samples, 0.04%)</title><rect x="74.3477%" y="661" width="0.0444%" height="15" fill="rgb(245,216,25)" fg:x="92003" fg:w="55"/><text x="74.5977%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (55 samples, 0.04%)</title><rect x="74.3477%" y="645" width="0.0444%" height="15" fill="rgb(251,43,5)" fg:x="92003" fg:w="55"/><text x="74.5977%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_load (53 samples, 0.04%)</title><rect x="74.3493%" y="629" width="0.0428%" height="15" fill="rgb(250,128,24)" fg:x="92005" fg:w="53"/><text x="74.5993%" y="639.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (90 samples, 0.07%)</title><rect x="74.3477%" y="693" width="0.0727%" height="15" fill="rgb(217,117,27)" fg:x="92003" fg:w="90"/><text x="74.5977%" y="703.50"></text></g><g><title>std::sync::poison::Flag::borrow (90 samples, 0.07%)</title><rect x="74.3477%" y="677" width="0.0727%" height="15" fill="rgb(245,147,4)" fg:x="92003" fg:w="90"/><text x="74.5977%" y="687.50"></text></g><g><title>std::thread::panicking (35 samples, 0.03%)</title><rect x="74.3921%" y="661" width="0.0283%" height="15" fill="rgb(242,201,35)" fg:x="92058" fg:w="35"/><text x="74.6421%" y="671.50"></text></g><g><title>std::panicking::panicking (35 samples, 0.03%)</title><rect x="74.3921%" y="645" width="0.0283%" height="15" fill="rgb(218,181,1)" fg:x="92058" fg:w="35"/><text x="74.6421%" y="655.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (35 samples, 0.03%)</title><rect x="74.3921%" y="629" width="0.0283%" height="15" fill="rgb(222,6,29)" fg:x="92058" fg:w="35"/><text x="74.6421%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (30 samples, 0.02%)</title><rect x="74.3961%" y="613" width="0.0242%" height="15" fill="rgb(208,186,3)" fg:x="92063" fg:w="30"/><text x="74.6461%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_load (30 samples, 0.02%)</title><rect x="74.3961%" y="597" width="0.0242%" height="15" fill="rgb(216,36,26)" fg:x="92063" fg:w="30"/><text x="74.6461%" y="607.50"></text></g><g><title>event_listener::Inner::lock (985 samples, 0.80%)</title><rect x="74.3258%" y="725" width="0.7960%" height="15" fill="rgb(248,201,23)" fg:x="91976" fg:w="985"/><text x="74.5758%" y="735.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (958 samples, 0.77%)</title><rect x="74.3477%" y="709" width="0.7742%" height="15" fill="rgb(251,170,31)" fg:x="92003" fg:w="958"/><text x="74.5977%" y="719.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (868 samples, 0.70%)</title><rect x="74.4204%" y="693" width="0.7014%" height="15" fill="rgb(207,110,25)" fg:x="92093" fg:w="868"/><text x="74.6704%" y="703.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (816 samples, 0.66%)</title><rect x="74.4624%" y="677" width="0.6594%" height="15" fill="rgb(250,54,15)" fg:x="92145" fg:w="816"/><text x="74.7124%" y="687.50"></text></g><g><title>__GI___pthread_mutex_lock (816 samples, 0.66%)</title><rect x="74.4624%" y="661" width="0.6594%" height="15" fill="rgb(227,68,33)" fg:x="92145" fg:w="816"/><text x="74.7124%" y="671.50"></text></g><g><title>__lll_lock_wait (131 samples, 0.11%)</title><rect x="75.0160%" y="645" width="0.1059%" height="15" fill="rgb(238,34,41)" fg:x="92830" fg:w="131"/><text x="75.2660%" y="655.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (2,241 samples, 1.81%)</title><rect x="73.4329%" y="741" width="1.8110%" height="15" fill="rgb(220,11,15)" fg:x="90871" fg:w="2241"/><text x="73.6829%" y="751.50">&lt;..</text></g><g><title>event_listener::List::remove (151 samples, 0.12%)</title><rect x="75.1218%" y="725" width="0.1220%" height="15" fill="rgb(246,111,35)" fg:x="92961" fg:w="151"/><text x="75.3718%" y="735.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (118 samples, 0.10%)</title><rect x="75.1485%" y="709" width="0.0954%" height="15" fill="rgb(209,88,53)" fg:x="92994" fg:w="118"/><text x="75.3985%" y="719.50"></text></g><g><title>core::mem::replace (118 samples, 0.10%)</title><rect x="75.1485%" y="693" width="0.0954%" height="15" fill="rgb(231,185,47)" fg:x="92994" fg:w="118"/><text x="75.3985%" y="703.50"></text></g><g><title>core::ptr::read (118 samples, 0.10%)</title><rect x="75.1485%" y="677" width="0.0954%" height="15" fill="rgb(233,154,1)" fg:x="92994" fg:w="118"/><text x="75.3985%" y="687.50"></text></g><g><title>concurrent_queue::full_fence (103 samples, 0.08%)</title><rect x="75.4515%" y="693" width="0.0832%" height="15" fill="rgb(225,15,46)" fg:x="93369" fg:w="103"/><text x="75.7015%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (97 samples, 0.08%)</title><rect x="75.4564%" y="677" width="0.0784%" height="15" fill="rgb(211,135,41)" fg:x="93375" fg:w="97"/><text x="75.7064%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (97 samples, 0.08%)</title><rect x="75.4564%" y="661" width="0.0784%" height="15" fill="rgb(208,54,0)" fg:x="93375" fg:w="97"/><text x="75.7064%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (97 samples, 0.08%)</title><rect x="75.4564%" y="645" width="0.0784%" height="15" fill="rgb(244,136,14)" fg:x="93375" fg:w="97"/><text x="75.7064%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (212 samples, 0.17%)</title><rect x="75.5372%" y="693" width="0.1713%" height="15" fill="rgb(241,56,14)" fg:x="93475" fg:w="212"/><text x="75.7872%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (212 samples, 0.17%)</title><rect x="75.5372%" y="677" width="0.1713%" height="15" fill="rgb(205,80,24)" fg:x="93475" fg:w="212"/><text x="75.7872%" y="687.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (997 samples, 0.81%)</title><rect x="75.2834%" y="725" width="0.8057%" height="15" fill="rgb(220,57,4)" fg:x="93161" fg:w="997"/><text x="75.5334%" y="735.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (959 samples, 0.77%)</title><rect x="75.3141%" y="709" width="0.7750%" height="15" fill="rgb(226,193,50)" fg:x="93199" fg:w="959"/><text x="75.5641%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (471 samples, 0.38%)</title><rect x="75.7085%" y="693" width="0.3806%" height="15" fill="rgb(231,168,22)" fg:x="93687" fg:w="471"/><text x="75.9585%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_load (471 samples, 0.38%)</title><rect x="75.7085%" y="677" width="0.3806%" height="15" fill="rgb(254,215,14)" fg:x="93687" fg:w="471"/><text x="75.9585%" y="687.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (2,089 samples, 1.69%)</title><rect x="75.2438%" y="741" width="1.6881%" height="15" fill="rgb(211,115,16)" fg:x="93112" fg:w="2089"/><text x="75.4938%" y="751.50"></text></g><g><title>event_listener::Event::notify (1,043 samples, 0.84%)</title><rect x="76.0891%" y="725" width="0.8428%" height="15" fill="rgb(236,210,16)" fg:x="94158" fg:w="1043"/><text x="76.3391%" y="735.50"></text></g><g><title>event_listener::full_fence (1,021 samples, 0.83%)</title><rect x="76.1069%" y="709" width="0.8251%" height="15" fill="rgb(221,94,12)" fg:x="94180" fg:w="1021"/><text x="76.3569%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1,021 samples, 0.83%)</title><rect x="76.1069%" y="693" width="0.8251%" height="15" fill="rgb(235,218,49)" fg:x="94180" fg:w="1021"/><text x="76.3569%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1,021 samples, 0.83%)</title><rect x="76.1069%" y="677" width="0.8251%" height="15" fill="rgb(217,114,14)" fg:x="94180" fg:w="1021"/><text x="76.3569%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (44 samples, 0.04%)</title><rect x="76.9691%" y="693" width="0.0356%" height="15" fill="rgb(216,145,22)" fg:x="95247" fg:w="44"/><text x="77.2191%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (44 samples, 0.04%)</title><rect x="76.9691%" y="677" width="0.0356%" height="15" fill="rgb(217,112,39)" fg:x="95247" fg:w="44"/><text x="77.2191%" y="687.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (44 samples, 0.04%)</title><rect x="76.9691%" y="661" width="0.0356%" height="15" fill="rgb(225,85,32)" fg:x="95247" fg:w="44"/><text x="77.2191%" y="671.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (44 samples, 0.04%)</title><rect x="76.9691%" y="645" width="0.0356%" height="15" fill="rgb(245,209,47)" fg:x="95247" fg:w="44"/><text x="77.2191%" y="655.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (43 samples, 0.03%)</title><rect x="76.9699%" y="629" width="0.0347%" height="15" fill="rgb(218,220,15)" fg:x="95248" fg:w="43"/><text x="77.2199%" y="639.50"></text></g><g><title>__GI___pthread_mutex_unlock (43 samples, 0.03%)</title><rect x="76.9699%" y="613" width="0.0347%" height="15" fill="rgb(222,202,31)" fg:x="95248" fg:w="43"/><text x="77.2199%" y="623.50"></text></g><g><title>event_listener::Inner::lock (135 samples, 0.11%)</title><rect x="77.0055%" y="693" width="0.1091%" height="15" fill="rgb(243,203,4)" fg:x="95292" fg:w="135"/><text x="77.2555%" y="703.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (134 samples, 0.11%)</title><rect x="77.0063%" y="677" width="0.1083%" height="15" fill="rgb(237,92,17)" fg:x="95293" fg:w="134"/><text x="77.2563%" y="687.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (123 samples, 0.10%)</title><rect x="77.0152%" y="661" width="0.0994%" height="15" fill="rgb(231,119,7)" fg:x="95304" fg:w="123"/><text x="77.2652%" y="671.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (110 samples, 0.09%)</title><rect x="77.0257%" y="645" width="0.0889%" height="15" fill="rgb(237,82,41)" fg:x="95317" fg:w="110"/><text x="77.2757%" y="655.50"></text></g><g><title>__GI___pthread_mutex_lock (110 samples, 0.09%)</title><rect x="77.0257%" y="629" width="0.0889%" height="15" fill="rgb(226,81,48)" fg:x="95317" fg:w="110"/><text x="77.2757%" y="639.50"></text></g><g><title>__lll_lock_wait (41 samples, 0.03%)</title><rect x="77.0815%" y="613" width="0.0331%" height="15" fill="rgb(234,70,51)" fg:x="95386" fg:w="41"/><text x="77.3315%" y="623.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (207 samples, 0.17%)</title><rect x="76.9635%" y="709" width="0.1673%" height="15" fill="rgb(251,86,4)" fg:x="95240" fg:w="207"/><text x="77.2135%" y="719.50"></text></g><g><title>event_listener::List::remove (16 samples, 0.01%)</title><rect x="77.1178%" y="693" width="0.0129%" height="15" fill="rgb(244,144,28)" fg:x="95431" fg:w="16"/><text x="77.3678%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (310 samples, 0.25%)</title><rect x="76.9400%" y="741" width="0.2505%" height="15" fill="rgb(232,161,39)" fg:x="95211" fg:w="310"/><text x="77.1900%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (284 samples, 0.23%)</title><rect x="76.9611%" y="725" width="0.2295%" height="15" fill="rgb(247,34,51)" fg:x="95237" fg:w="284"/><text x="77.2111%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (74 samples, 0.06%)</title><rect x="77.1308%" y="709" width="0.0598%" height="15" fill="rgb(225,132,2)" fg:x="95447" fg:w="74"/><text x="77.3808%" y="719.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (74 samples, 0.06%)</title><rect x="77.1308%" y="693" width="0.0598%" height="15" fill="rgb(209,159,44)" fg:x="95447" fg:w="74"/><text x="77.3808%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (72 samples, 0.06%)</title><rect x="77.1324%" y="677" width="0.0582%" height="15" fill="rgb(251,214,1)" fg:x="95449" fg:w="72"/><text x="77.3824%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_sub (72 samples, 0.06%)</title><rect x="77.1324%" y="661" width="0.0582%" height="15" fill="rgb(247,84,47)" fg:x="95449" fg:w="72"/><text x="77.3824%" y="671.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (117 samples, 0.09%)</title><rect x="77.2003%" y="725" width="0.0945%" height="15" fill="rgb(240,111,43)" fg:x="95533" fg:w="117"/><text x="77.4503%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (117 samples, 0.09%)</title><rect x="77.2003%" y="709" width="0.0945%" height="15" fill="rgb(215,214,35)" fg:x="95533" fg:w="117"/><text x="77.4503%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_add (117 samples, 0.09%)</title><rect x="77.2003%" y="693" width="0.0945%" height="15" fill="rgb(248,207,23)" fg:x="95533" fg:w="117"/><text x="77.4503%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (97 samples, 0.08%)</title><rect x="77.2948%" y="725" width="0.0784%" height="15" fill="rgb(214,186,4)" fg:x="95650" fg:w="97"/><text x="77.5448%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (89 samples, 0.07%)</title><rect x="77.3013%" y="709" width="0.0719%" height="15" fill="rgb(220,133,22)" fg:x="95658" fg:w="89"/><text x="77.5513%" y="719.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (89 samples, 0.07%)</title><rect x="77.3013%" y="693" width="0.0719%" height="15" fill="rgb(239,134,19)" fg:x="95658" fg:w="89"/><text x="77.5513%" y="703.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (83 samples, 0.07%)</title><rect x="77.3061%" y="677" width="0.0671%" height="15" fill="rgb(250,140,9)" fg:x="95664" fg:w="83"/><text x="77.5561%" y="687.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (79 samples, 0.06%)</title><rect x="77.3093%" y="661" width="0.0638%" height="15" fill="rgb(225,59,14)" fg:x="95668" fg:w="79"/><text x="77.5593%" y="671.50"></text></g><g><title>__GI___pthread_mutex_unlock (77 samples, 0.06%)</title><rect x="77.3110%" y="645" width="0.0622%" height="15" fill="rgb(214,152,51)" fg:x="95670" fg:w="77"/><text x="77.5610%" y="655.50"></text></g><g><title>event_listener::Inner::lock (60 samples, 0.05%)</title><rect x="77.3788%" y="725" width="0.0485%" height="15" fill="rgb(251,227,43)" fg:x="95754" fg:w="60"/><text x="77.6288%" y="735.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (55 samples, 0.04%)</title><rect x="77.3829%" y="709" width="0.0444%" height="15" fill="rgb(241,96,17)" fg:x="95759" fg:w="55"/><text x="77.6329%" y="719.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (52 samples, 0.04%)</title><rect x="77.3853%" y="693" width="0.0420%" height="15" fill="rgb(234,198,43)" fg:x="95762" fg:w="52"/><text x="77.6353%" y="703.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (52 samples, 0.04%)</title><rect x="77.3853%" y="677" width="0.0420%" height="15" fill="rgb(220,108,29)" fg:x="95762" fg:w="52"/><text x="77.6353%" y="687.50"></text></g><g><title>__GI___pthread_mutex_lock (49 samples, 0.04%)</title><rect x="77.3877%" y="661" width="0.0396%" height="15" fill="rgb(226,163,33)" fg:x="95765" fg:w="49"/><text x="77.6377%" y="671.50"></text></g><g><title>event_listener::List::insert (13 samples, 0.01%)</title><rect x="77.4273%" y="725" width="0.0105%" height="15" fill="rgb(205,194,45)" fg:x="95814" fg:w="13"/><text x="77.6773%" y="735.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (5,141 samples, 4.15%)</title><rect x="73.3198%" y="757" width="4.1544%" height="15" fill="rgb(206,143,44)" fg:x="90731" fg:w="5141"/><text x="73.5698%" y="767.50">&lt;asyn..</text></g><g><title>event_listener::Event::listen (351 samples, 0.28%)</title><rect x="77.1906%" y="741" width="0.2836%" height="15" fill="rgb(236,136,36)" fg:x="95521" fg:w="351"/><text x="77.4406%" y="751.50"></text></g><g><title>event_listener::full_fence (45 samples, 0.04%)</title><rect x="77.4378%" y="725" width="0.0364%" height="15" fill="rgb(249,172,42)" fg:x="95827" fg:w="45"/><text x="77.6878%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (45 samples, 0.04%)</title><rect x="77.4378%" y="709" width="0.0364%" height="15" fill="rgb(216,139,23)" fg:x="95827" fg:w="45"/><text x="77.6878%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (45 samples, 0.04%)</title><rect x="77.4378%" y="693" width="0.0364%" height="15" fill="rgb(207,166,20)" fg:x="95827" fg:w="45"/><text x="77.6878%" y="703.50"></text></g><g><title>[libc-2.31.so] (223 samples, 0.18%)</title><rect x="77.4831%" y="741" width="0.1802%" height="15" fill="rgb(210,209,22)" fg:x="95883" fg:w="223"/><text x="77.7331%" y="751.50"></text></g><g><title>[libc-2.31.so] (1,539 samples, 1.24%)</title><rect x="77.6706%" y="709" width="1.2437%" height="15" fill="rgb(232,118,20)" fg:x="96115" fg:w="1539"/><text x="77.9206%" y="719.50"></text></g><g><title>sn_rust_dealloc (101 samples, 0.08%)</title><rect x="78.9191%" y="629" width="0.0816%" height="15" fill="rgb(238,113,42)" fg:x="97660" fg:w="101"/><text x="79.1691%" y="639.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (7,425 samples, 6.00%)</title><rect x="73.2535%" y="789" width="6.0001%" height="15" fill="rgb(231,42,5)" fg:x="90649" fg:w="7425"/><text x="73.5035%" y="799.50">&lt;async_s..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (7,391 samples, 5.97%)</title><rect x="73.2810%" y="773" width="5.9727%" height="15" fill="rgb(243,166,24)" fg:x="90683" fg:w="7391"/><text x="73.5310%" y="783.50">&lt;async_s..</text></g><g><title>core::option::Option&lt;T&gt;::map (2,202 samples, 1.78%)</title><rect x="77.4742%" y="757" width="1.7794%" height="15" fill="rgb(237,226,12)" fg:x="95872" fg:w="2202"/><text x="77.7242%" y="767.50">c..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,968 samples, 1.59%)</title><rect x="77.6633%" y="741" width="1.5903%" height="15" fill="rgb(229,133,24)" fg:x="96106" fg:w="1968"/><text x="77.9133%" y="751.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}}::{{closure}} (1,968 samples, 1.59%)</title><rect x="77.6633%" y="725" width="1.5903%" height="15" fill="rgb(238,33,43)" fg:x="96106" fg:w="1968"/><text x="77.9133%" y="735.50"></text></g><g><title>alloc::alloc::box_free (420 samples, 0.34%)</title><rect x="78.9142%" y="709" width="0.3394%" height="15" fill="rgb(227,59,38)" fg:x="97654" fg:w="420"/><text x="79.1642%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (420 samples, 0.34%)</title><rect x="78.9142%" y="693" width="0.3394%" height="15" fill="rgb(230,97,0)" fg:x="97654" fg:w="420"/><text x="79.1642%" y="703.50"></text></g><g><title>alloc::alloc::dealloc (420 samples, 0.34%)</title><rect x="78.9142%" y="677" width="0.3394%" height="15" fill="rgb(250,173,50)" fg:x="97654" fg:w="420"/><text x="79.1642%" y="687.50"></text></g><g><title>__rg_dealloc (420 samples, 0.34%)</title><rect x="78.9142%" y="661" width="0.3394%" height="15" fill="rgb(240,15,50)" fg:x="97654" fg:w="420"/><text x="79.1642%" y="671.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (420 samples, 0.34%)</title><rect x="78.9142%" y="645" width="0.3394%" height="15" fill="rgb(221,93,22)" fg:x="97654" fg:w="420"/><text x="79.1642%" y="655.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (313 samples, 0.25%)</title><rect x="79.0007%" y="629" width="0.2529%" height="15" fill="rgb(245,180,53)" fg:x="97761" fg:w="313"/><text x="79.2507%" y="639.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,780 samples, 7.10%)</title><rect x="73.2107%" y="853" width="7.0951%" height="15" fill="rgb(231,88,51)" fg:x="90596" fg:w="8780"/><text x="73.4607%" y="863.50">&lt;async_std..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (8,759 samples, 7.08%)</title><rect x="73.2276%" y="837" width="7.0782%" height="15" fill="rgb(240,58,21)" fg:x="90617" fg:w="8759"/><text x="73.4776%" y="847.50">&lt;tremor_r..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (8,759 samples, 7.08%)</title><rect x="73.2276%" y="821" width="7.0782%" height="15" fill="rgb(237,21,10)" fg:x="90617" fg:w="8759"/><text x="73.4776%" y="831.50">&lt;async_st..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (8,759 samples, 7.08%)</title><rect x="73.2276%" y="805" width="7.0782%" height="15" fill="rgb(218,43,11)" fg:x="90617" fg:w="8759"/><text x="73.4776%" y="815.50">&lt;tremor_r..</text></g><g><title>[libc-2.31.so] (1,302 samples, 1.05%)</title><rect x="79.2536%" y="789" width="1.0521%" height="15" fill="rgb(218,221,29)" fg:x="98074" fg:w="1302"/><text x="79.5036%" y="799.50"></text></g><g><title>[libc-2.31.so] (150 samples, 0.12%)</title><rect x="80.3058%" y="805" width="0.1212%" height="15" fill="rgb(214,118,42)" fg:x="99376" fg:w="150"/><text x="80.5558%" y="815.50"></text></g><g><title>[libc-2.31.so] (325 samples, 0.26%)</title><rect x="80.7535%" y="741" width="0.2626%" height="15" fill="rgb(251,200,26)" fg:x="99930" fg:w="325"/><text x="81.0035%" y="751.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (215 samples, 0.17%)</title><rect x="81.0840%" y="725" width="0.1737%" height="15" fill="rgb(237,101,39)" fg:x="100339" fg:w="215"/><text x="81.3340%" y="735.50"></text></g><g><title>core::ptr::write (215 samples, 0.17%)</title><rect x="81.0840%" y="709" width="0.1737%" height="15" fill="rgb(251,117,11)" fg:x="100339" fg:w="215"/><text x="81.3340%" y="719.50"></text></g><g><title>[libc-2.31.so] (203 samples, 0.16%)</title><rect x="81.0937%" y="693" width="0.1640%" height="15" fill="rgb(216,223,23)" fg:x="100351" fg:w="203"/><text x="81.3437%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (357 samples, 0.29%)</title><rect x="81.2577%" y="725" width="0.2885%" height="15" fill="rgb(251,54,12)" fg:x="100554" fg:w="357"/><text x="81.5077%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (357 samples, 0.29%)</title><rect x="81.2577%" y="709" width="0.2885%" height="15" fill="rgb(254,176,54)" fg:x="100554" fg:w="357"/><text x="81.5077%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (132 samples, 0.11%)</title><rect x="81.5462%" y="725" width="0.1067%" height="15" fill="rgb(210,32,8)" fg:x="100911" fg:w="132"/><text x="81.7962%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_load (129 samples, 0.10%)</title><rect x="81.5486%" y="709" width="0.1042%" height="15" fill="rgb(235,52,38)" fg:x="100914" fg:w="129"/><text x="81.7986%" y="719.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (1,315 samples, 1.06%)</title><rect x="80.5999%" y="757" width="1.0627%" height="15" fill="rgb(231,4,44)" fg:x="99740" fg:w="1315"/><text x="80.8499%" y="767.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (800 samples, 0.65%)</title><rect x="81.0161%" y="741" width="0.6465%" height="15" fill="rgb(249,2,32)" fg:x="100255" fg:w="800"/><text x="81.2661%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (31 samples, 0.03%)</title><rect x="81.6868%" y="741" width="0.0251%" height="15" fill="rgb(224,65,26)" fg:x="101085" fg:w="31"/><text x="81.9368%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (29 samples, 0.02%)</title><rect x="81.6884%" y="725" width="0.0234%" height="15" fill="rgb(250,73,40)" fg:x="101087" fg:w="29"/><text x="81.9384%" y="735.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.02%)</title><rect x="81.6884%" y="709" width="0.0234%" height="15" fill="rgb(253,177,16)" fg:x="101087" fg:w="29"/><text x="81.9384%" y="719.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (27 samples, 0.02%)</title><rect x="81.6901%" y="693" width="0.0218%" height="15" fill="rgb(217,32,34)" fg:x="101089" fg:w="27"/><text x="81.9401%" y="703.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (27 samples, 0.02%)</title><rect x="81.6901%" y="677" width="0.0218%" height="15" fill="rgb(212,7,10)" fg:x="101089" fg:w="27"/><text x="81.9401%" y="687.50"></text></g><g><title>__GI___pthread_mutex_unlock (27 samples, 0.02%)</title><rect x="81.6901%" y="661" width="0.0218%" height="15" fill="rgb(245,89,8)" fg:x="101089" fg:w="27"/><text x="81.9401%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (16 samples, 0.01%)</title><rect x="81.7119%" y="741" width="0.0129%" height="15" fill="rgb(237,16,53)" fg:x="101116" fg:w="16"/><text x="81.9619%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_load (16 samples, 0.01%)</title><rect x="81.7119%" y="725" width="0.0129%" height="15" fill="rgb(250,204,30)" fg:x="101116" fg:w="16"/><text x="81.9619%" y="735.50"></text></g><g><title>event_listener::Inner::lock (41 samples, 0.03%)</title><rect x="81.7256%" y="741" width="0.0331%" height="15" fill="rgb(208,77,27)" fg:x="101133" fg:w="41"/><text x="81.9756%" y="751.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (40 samples, 0.03%)</title><rect x="81.7264%" y="725" width="0.0323%" height="15" fill="rgb(250,204,28)" fg:x="101134" fg:w="40"/><text x="81.9764%" y="735.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (40 samples, 0.03%)</title><rect x="81.7264%" y="709" width="0.0323%" height="15" fill="rgb(244,63,21)" fg:x="101134" fg:w="40"/><text x="81.9764%" y="719.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (39 samples, 0.03%)</title><rect x="81.7272%" y="693" width="0.0315%" height="15" fill="rgb(236,85,44)" fg:x="101135" fg:w="39"/><text x="81.9772%" y="703.50"></text></g><g><title>__GI___pthread_mutex_lock (39 samples, 0.03%)</title><rect x="81.7272%" y="677" width="0.0315%" height="15" fill="rgb(215,98,4)" fg:x="101135" fg:w="39"/><text x="81.9772%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (38 samples, 0.03%)</title><rect x="81.7781%" y="645" width="0.0307%" height="15" fill="rgb(235,38,11)" fg:x="101198" fg:w="38"/><text x="82.0281%" y="655.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 0.03%)</title><rect x="81.7781%" y="629" width="0.0307%" height="15" fill="rgb(254,186,25)" fg:x="101198" fg:w="38"/><text x="82.0281%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (38 samples, 0.03%)</title><rect x="81.7781%" y="613" width="0.0307%" height="15" fill="rgb(225,55,31)" fg:x="101198" fg:w="38"/><text x="82.0281%" y="623.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (38 samples, 0.03%)</title><rect x="81.7781%" y="597" width="0.0307%" height="15" fill="rgb(211,15,21)" fg:x="101198" fg:w="38"/><text x="82.0281%" y="607.50"></text></g><g><title>__GI___pthread_mutex_unlock (38 samples, 0.03%)</title><rect x="81.7781%" y="581" width="0.0307%" height="15" fill="rgb(215,187,41)" fg:x="101198" fg:w="38"/><text x="82.0281%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (20 samples, 0.02%)</title><rect x="81.8331%" y="565" width="0.0162%" height="15" fill="rgb(248,69,32)" fg:x="101266" fg:w="20"/><text x="82.0831%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_swap (20 samples, 0.02%)</title><rect x="81.8331%" y="549" width="0.0162%" height="15" fill="rgb(252,102,52)" fg:x="101266" fg:w="20"/><text x="82.0831%" y="559.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (48 samples, 0.04%)</title><rect x="81.8493%" y="565" width="0.0388%" height="15" fill="rgb(253,140,32)" fg:x="101286" fg:w="48"/><text x="82.0993%" y="575.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (48 samples, 0.04%)</title><rect x="81.8493%" y="549" width="0.0388%" height="15" fill="rgb(216,56,42)" fg:x="101286" fg:w="48"/><text x="82.0993%" y="559.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (48 samples, 0.04%)</title><rect x="81.8493%" y="533" width="0.0388%" height="15" fill="rgb(216,184,14)" fg:x="101286" fg:w="48"/><text x="82.0993%" y="543.50"></text></g><g><title>__pthread_cond_signal (48 samples, 0.04%)</title><rect x="81.8493%" y="517" width="0.0388%" height="15" fill="rgb(237,187,27)" fg:x="101286" fg:w="48"/><text x="82.0993%" y="527.50"></text></g><g><title>parking::Unparker::unpark (109 samples, 0.09%)</title><rect x="81.8242%" y="597" width="0.0881%" height="15" fill="rgb(219,65,3)" fg:x="101255" fg:w="109"/><text x="82.0742%" y="607.50"></text></g><g><title>parking::Inner::unpark (107 samples, 0.09%)</title><rect x="81.8258%" y="581" width="0.0865%" height="15" fill="rgb(245,83,25)" fg:x="101257" fg:w="107"/><text x="82.0758%" y="591.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (30 samples, 0.02%)</title><rect x="81.8880%" y="565" width="0.0242%" height="15" fill="rgb(214,205,45)" fg:x="101334" fg:w="30"/><text x="82.1380%" y="575.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (30 samples, 0.02%)</title><rect x="81.8880%" y="549" width="0.0242%" height="15" fill="rgb(241,20,18)" fg:x="101334" fg:w="30"/><text x="82.1380%" y="559.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (29 samples, 0.02%)</title><rect x="81.8889%" y="533" width="0.0234%" height="15" fill="rgb(232,163,23)" fg:x="101335" fg:w="29"/><text x="82.1389%" y="543.50"></text></g><g><title>__GI___pthread_mutex_lock (29 samples, 0.02%)</title><rect x="81.8889%" y="517" width="0.0234%" height="15" fill="rgb(214,5,46)" fg:x="101335" fg:w="29"/><text x="82.1389%" y="527.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (120 samples, 0.10%)</title><rect x="81.8185%" y="613" width="0.0970%" height="15" fill="rgb(229,78,17)" fg:x="101248" fg:w="120"/><text x="82.0685%" y="623.50"></text></g><g><title>core::task::wake::Waker::wake (140 samples, 0.11%)</title><rect x="81.8185%" y="645" width="0.1131%" height="15" fill="rgb(248,89,10)" fg:x="101248" fg:w="140"/><text x="82.0685%" y="655.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (140 samples, 0.11%)</title><rect x="81.8185%" y="629" width="0.1131%" height="15" fill="rgb(248,54,15)" fg:x="101248" fg:w="140"/><text x="82.0685%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (20 samples, 0.02%)</title><rect x="81.9155%" y="613" width="0.0162%" height="15" fill="rgb(223,116,6)" fg:x="101368" fg:w="20"/><text x="82.1655%" y="623.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.02%)</title><rect x="81.9155%" y="597" width="0.0162%" height="15" fill="rgb(205,125,38)" fg:x="101368" fg:w="20"/><text x="82.1655%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (20 samples, 0.02%)</title><rect x="81.9155%" y="581" width="0.0162%" height="15" fill="rgb(251,78,38)" fg:x="101368" fg:w="20"/><text x="82.1655%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_sub (20 samples, 0.02%)</title><rect x="81.9155%" y="565" width="0.0162%" height="15" fill="rgb(253,78,28)" fg:x="101368" fg:w="20"/><text x="82.1655%" y="575.50"></text></g><g><title>async_executor::State::notify (245 samples, 0.20%)</title><rect x="81.7749%" y="661" width="0.1980%" height="15" fill="rgb(209,120,3)" fg:x="101194" fg:w="245"/><text x="82.0249%" y="671.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (51 samples, 0.04%)</title><rect x="81.9317%" y="645" width="0.0412%" height="15" fill="rgb(238,229,9)" fg:x="101388" fg:w="51"/><text x="82.1817%" y="655.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (50 samples, 0.04%)</title><rect x="81.9325%" y="629" width="0.0404%" height="15" fill="rgb(253,159,18)" fg:x="101389" fg:w="50"/><text x="82.1825%" y="639.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (41 samples, 0.03%)</title><rect x="81.9398%" y="613" width="0.0331%" height="15" fill="rgb(244,42,34)" fg:x="101398" fg:w="41"/><text x="82.1898%" y="623.50"></text></g><g><title>__GI___pthread_mutex_lock (41 samples, 0.03%)</title><rect x="81.9398%" y="597" width="0.0331%" height="15" fill="rgb(224,8,7)" fg:x="101398" fg:w="41"/><text x="82.1898%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (29 samples, 0.02%)</title><rect x="81.9834%" y="629" width="0.0234%" height="15" fill="rgb(210,201,45)" fg:x="101452" fg:w="29"/><text x="82.2334%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (29 samples, 0.02%)</title><rect x="81.9834%" y="613" width="0.0234%" height="15" fill="rgb(252,185,21)" fg:x="101452" fg:w="29"/><text x="82.2334%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (22 samples, 0.02%)</title><rect x="82.0076%" y="629" width="0.0178%" height="15" fill="rgb(223,131,1)" fg:x="101482" fg:w="22"/><text x="82.2576%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_or (22 samples, 0.02%)</title><rect x="82.0076%" y="613" width="0.0178%" height="15" fill="rgb(245,141,16)" fg:x="101482" fg:w="22"/><text x="82.2576%" y="623.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (311 samples, 0.25%)</title><rect x="81.7749%" y="677" width="0.2513%" height="15" fill="rgb(229,55,45)" fg:x="101194" fg:w="311"/><text x="82.0249%" y="687.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (66 samples, 0.05%)</title><rect x="81.9729%" y="661" width="0.0533%" height="15" fill="rgb(208,92,15)" fg:x="101439" fg:w="66"/><text x="82.2229%" y="671.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (64 samples, 0.05%)</title><rect x="81.9745%" y="645" width="0.0517%" height="15" fill="rgb(234,185,47)" fg:x="101441" fg:w="64"/><text x="82.2245%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (64 samples, 0.05%)</title><rect x="82.0262%" y="677" width="0.0517%" height="15" fill="rgb(253,104,50)" fg:x="101505" fg:w="64"/><text x="82.2762%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (64 samples, 0.05%)</title><rect x="82.0262%" y="661" width="0.0517%" height="15" fill="rgb(205,70,7)" fg:x="101505" fg:w="64"/><text x="82.2762%" y="671.50"></text></g><g><title>event_listener::List::notify (400 samples, 0.32%)</title><rect x="81.7587%" y="741" width="0.3232%" height="15" fill="rgb(240,178,43)" fg:x="101174" fg:w="400"/><text x="82.0087%" y="751.50"></text></g><g><title>core::task::wake::Waker::wake (395 samples, 0.32%)</title><rect x="81.7628%" y="725" width="0.3192%" height="15" fill="rgb(214,112,2)" fg:x="101179" fg:w="395"/><text x="82.0128%" y="735.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (395 samples, 0.32%)</title><rect x="81.7628%" y="709" width="0.3192%" height="15" fill="rgb(206,46,17)" fg:x="101179" fg:w="395"/><text x="82.0128%" y="719.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (384 samples, 0.31%)</title><rect x="81.7717%" y="693" width="0.3103%" height="15" fill="rgb(225,220,16)" fg:x="101190" fg:w="384"/><text x="82.0217%" y="703.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (3,217 samples, 2.60%)</title><rect x="80.5749%" y="773" width="2.5997%" height="15" fill="rgb(238,65,40)" fg:x="99709" fg:w="3217"/><text x="80.8249%" y="783.50">as..</text></g><g><title>event_listener::Event::notify (1,871 samples, 1.51%)</title><rect x="81.6626%" y="757" width="1.5120%" height="15" fill="rgb(230,151,21)" fg:x="101055" fg:w="1871"/><text x="81.9126%" y="767.50"></text></g><g><title>event_listener::full_fence (1,352 samples, 1.09%)</title><rect x="82.0820%" y="741" width="1.0926%" height="15" fill="rgb(218,58,49)" fg:x="101574" fg:w="1352"/><text x="82.3320%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1,332 samples, 1.08%)</title><rect x="82.0982%" y="725" width="1.0764%" height="15" fill="rgb(219,179,14)" fg:x="101594" fg:w="1332"/><text x="82.3482%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1,332 samples, 1.08%)</title><rect x="82.0982%" y="709" width="1.0764%" height="15" fill="rgb(223,72,1)" fg:x="101594" fg:w="1332"/><text x="82.3482%" y="719.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::capacity (22 samples, 0.02%)</title><rect x="83.1745%" y="773" width="0.0178%" height="15" fill="rgb(238,126,10)" fg:x="102926" fg:w="22"/><text x="83.4245%" y="783.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (3,556 samples, 2.87%)</title><rect x="80.5377%" y="789" width="2.8736%" height="15" fill="rgb(224,206,38)" fg:x="99663" fg:w="3556"/><text x="80.7877%" y="799.50">&lt;a..</text></g><g><title>event_listener::Event::notify (262 samples, 0.21%)</title><rect x="83.1996%" y="773" width="0.2117%" height="15" fill="rgb(212,201,54)" fg:x="102957" fg:w="262"/><text x="83.4496%" y="783.50"></text></g><g><title>event_listener::full_fence (250 samples, 0.20%)</title><rect x="83.2093%" y="757" width="0.2020%" height="15" fill="rgb(218,154,48)" fg:x="102969" fg:w="250"/><text x="83.4593%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (250 samples, 0.20%)</title><rect x="83.2093%" y="741" width="0.2020%" height="15" fill="rgb(232,93,24)" fg:x="102969" fg:w="250"/><text x="83.4593%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (250 samples, 0.20%)</title><rect x="83.2093%" y="725" width="0.2020%" height="15" fill="rgb(245,30,21)" fg:x="102969" fg:w="250"/><text x="83.4593%" y="735.50"></text></g><g><title>[libc-2.31.so] (778 samples, 0.63%)</title><rect x="83.4178%" y="789" width="0.6287%" height="15" fill="rgb(242,148,29)" fg:x="103227" fg:w="778"/><text x="83.6678%" y="799.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (13,433 samples, 10.86%)</title><rect x="73.2074%" y="869" width="10.8552%" height="15" fill="rgb(244,153,54)" fg:x="90592" fg:w="13433"/><text x="73.4574%" y="879.50">tremor_runtime::..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,649 samples, 3.76%)</title><rect x="80.3058%" y="853" width="3.7569%" height="15" fill="rgb(252,87,22)" fg:x="99376" fg:w="4649"/><text x="80.5558%" y="863.50">&lt;cor..</text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (4,649 samples, 3.76%)</title><rect x="80.3058%" y="837" width="3.7569%" height="15" fill="rgb(210,51,29)" fg:x="99376" fg:w="4649"/><text x="80.5558%" y="847.50">trem..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,649 samples, 3.76%)</title><rect x="80.3058%" y="821" width="3.7569%" height="15" fill="rgb(242,136,47)" fg:x="99376" fg:w="4649"/><text x="80.5558%" y="831.50">&lt;cor..</text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (4,499 samples, 3.64%)</title><rect x="80.4270%" y="805" width="3.6356%" height="15" fill="rgb(238,68,4)" fg:x="99526" fg:w="4499"/><text x="80.6770%" y="815.50">trem..</text></g><g><title>core::ptr::drop_in_place&lt;async_channel::Send&lt;tremor_runtime::connectors::sink::SinkMsg&gt;&gt; (20 samples, 0.02%)</title><rect x="84.0465%" y="789" width="0.0162%" height="15" fill="rgb(242,161,30)" fg:x="104005" fg:w="20"/><text x="84.2965%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;tremor_runtime::connectors::sink::SinkMsg&gt;&gt; (13 samples, 0.01%)</title><rect x="84.0521%" y="773" width="0.0105%" height="15" fill="rgb(218,58,44)" fg:x="104012" fg:w="13"/><text x="84.3021%" y="783.50"></text></g><g><title>tremor_runtime::postprocessor::postprocess (54 samples, 0.04%)</title><rect x="84.0626%" y="869" width="0.0436%" height="15" fill="rgb(252,125,32)" fg:x="104025" fg:w="54"/><text x="84.3126%" y="879.50"></text></g><g><title>[unknown] (98,409 samples, 79.52%)</title><rect x="4.5957%" y="885" width="79.5244%" height="15" fill="rgb(219,178,0)" fg:x="5687" fg:w="98409"/><text x="4.8457%" y="895.50">[unknown]</text></g><g><title>__clock_gettime (19 samples, 0.02%)</title><rect x="84.1208%" y="885" width="0.0154%" height="15" fill="rgb(213,152,7)" fg:x="104097" fg:w="19"/><text x="84.3708%" y="895.50"></text></g><g><title>__vdso_clock_gettime (13 samples, 0.01%)</title><rect x="84.1362%" y="885" width="0.0105%" height="15" fill="rgb(249,109,34)" fg:x="104116" fg:w="13"/><text x="84.3862%" y="895.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (16 samples, 0.01%)</title><rect x="84.1596%" y="885" width="0.0129%" height="15" fill="rgb(232,96,21)" fg:x="104145" fg:w="16"/><text x="84.4096%" y="895.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::into_vec (24 samples, 0.02%)</title><rect x="84.1725%" y="885" width="0.0194%" height="15" fill="rgb(228,27,39)" fg:x="104161" fg:w="24"/><text x="84.4225%" y="895.50"></text></g><g><title>&lt;abi_stable::sabi_types::constructor::Constructor&lt;T&gt; as core::cmp::PartialEq&gt;::eq (15 samples, 0.01%)</title><rect x="84.1798%" y="869" width="0.0121%" height="15" fill="rgb(211,182,52)" fg:x="104170" fg:w="15"/><text x="84.4298%" y="879.50"></text></g><g><title>abi_stable::sabi_types::constructor::Constructor&lt;T&gt;::get (15 samples, 0.01%)</title><rect x="84.1798%" y="853" width="0.0121%" height="15" fill="rgb(234,178,38)" fg:x="104170" fg:w="15"/><text x="84.4298%" y="863.50"></text></g><g><title>anon.07d2a999f171a24996f271345231b7db.171.llvm.5264816588596360844 (19 samples, 0.02%)</title><rect x="84.2113%" y="885" width="0.0154%" height="15" fill="rgb(221,111,3)" fg:x="104209" fg:w="19"/><text x="84.4613%" y="895.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (19 samples, 0.02%)</title><rect x="84.2113%" y="869" width="0.0154%" height="15" fill="rgb(228,175,21)" fg:x="104209" fg:w="19"/><text x="84.4613%" y="879.50"></text></g><g><title>anon.879ab9860a149912dddf40db14509f01.319.llvm.13419852911532076063 (13 samples, 0.01%)</title><rect x="84.2437%" y="885" width="0.0105%" height="15" fill="rgb(228,174,43)" fg:x="104249" fg:w="13"/><text x="84.4937%" y="895.50"></text></g><g><title>sn_rust_alloc (13 samples, 0.01%)</title><rect x="84.2437%" y="869" width="0.0105%" height="15" fill="rgb(211,191,0)" fg:x="104249" fg:w="13"/><text x="84.4937%" y="879.50"></text></g><g><title>anon.a92b65dce0c6862938e99fda8bcdfe22.35.llvm.2716098514989274932 (16 samples, 0.01%)</title><rect x="84.2614%" y="885" width="0.0129%" height="15" fill="rgb(253,117,3)" fg:x="104271" fg:w="16"/><text x="84.5114%" y="895.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (16 samples, 0.01%)</title><rect x="84.2614%" y="869" width="0.0129%" height="15" fill="rgb(241,127,19)" fg:x="104271" fg:w="16"/><text x="84.5114%" y="879.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (14 samples, 0.01%)</title><rect x="84.2962%" y="869" width="0.0113%" height="15" fill="rgb(218,103,12)" fg:x="104314" fg:w="14"/><text x="84.5462%" y="879.50"></text></g><g><title>sn_rust_dealloc (24 samples, 0.02%)</title><rect x="84.3075%" y="869" width="0.0194%" height="15" fill="rgb(236,214,43)" fg:x="104328" fg:w="24"/><text x="84.5575%" y="879.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (13 samples, 0.01%)</title><rect x="84.3269%" y="869" width="0.0105%" height="15" fill="rgb(244,144,19)" fg:x="104352" fg:w="13"/><text x="84.5769%" y="879.50"></text></g><g><title>anon.ad6b3c7efd403fc0bec16b3e2cfcb681.24.llvm.10493242232810447988 (86 samples, 0.07%)</title><rect x="84.2744%" y="885" width="0.0695%" height="15" fill="rgb(246,188,10)" fg:x="104287" fg:w="86"/><text x="84.5244%" y="895.50"></text></g><g><title>sn_rust_alloc (13 samples, 0.01%)</title><rect x="84.3471%" y="869" width="0.0105%" height="15" fill="rgb(212,193,33)" fg:x="104377" fg:w="13"/><text x="84.5971%" y="879.50"></text></g><g><title>anon.ad6b3c7efd403fc0bec16b3e2cfcb681.25.llvm.10493242232810447988 (22 samples, 0.02%)</title><rect x="84.3439%" y="885" width="0.0178%" height="15" fill="rgb(241,51,29)" fg:x="104373" fg:w="22"/><text x="84.5939%" y="895.50"></text></g><g><title>anon.c6676277d9159002154b1ad830e38ffe.16.llvm.16537282876649417011 (35 samples, 0.03%)</title><rect x="84.3689%" y="885" width="0.0283%" height="15" fill="rgb(211,58,19)" fg:x="104404" fg:w="35"/><text x="84.6189%" y="895.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (20 samples, 0.02%)</title><rect x="84.4069%" y="869" width="0.0162%" height="15" fill="rgb(229,111,26)" fg:x="104451" fg:w="20"/><text x="84.6569%" y="879.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (42 samples, 0.03%)</title><rect x="84.4643%" y="853" width="0.0339%" height="15" fill="rgb(213,115,40)" fg:x="104522" fg:w="42"/><text x="84.7143%" y="863.50"></text></g><g><title>async_task::runnable::Runnable::run (41 samples, 0.03%)</title><rect x="84.4651%" y="837" width="0.0331%" height="15" fill="rgb(209,56,44)" fg:x="104523" fg:w="41"/><text x="84.7151%" y="847.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (144 samples, 0.12%)</title><rect x="84.4231%" y="869" width="0.1164%" height="15" fill="rgb(230,108,32)" fg:x="104471" fg:w="144"/><text x="84.6731%" y="879.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (44 samples, 0.04%)</title><rect x="84.5039%" y="853" width="0.0356%" height="15" fill="rgb(216,165,31)" fg:x="104571" fg:w="44"/><text x="84.7539%" y="863.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (31 samples, 0.03%)</title><rect x="84.5144%" y="837" width="0.0251%" height="15" fill="rgb(218,122,21)" fg:x="104584" fg:w="31"/><text x="84.7644%" y="847.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (31 samples, 0.03%)</title><rect x="84.5144%" y="821" width="0.0251%" height="15" fill="rgb(223,224,47)" fg:x="104584" fg:w="31"/><text x="84.7644%" y="831.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (24 samples, 0.02%)</title><rect x="84.5200%" y="805" width="0.0194%" height="15" fill="rgb(238,102,44)" fg:x="104591" fg:w="24"/><text x="84.7700%" y="815.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (22 samples, 0.02%)</title><rect x="84.5216%" y="789" width="0.0178%" height="15" fill="rgb(236,46,40)" fg:x="104593" fg:w="22"/><text x="84.7716%" y="799.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (21 samples, 0.02%)</title><rect x="84.5394%" y="869" width="0.0170%" height="15" fill="rgb(247,202,50)" fg:x="104615" fg:w="21"/><text x="84.7894%" y="879.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (49 samples, 0.04%)</title><rect x="84.6218%" y="821" width="0.0396%" height="15" fill="rgb(209,99,20)" fg:x="104717" fg:w="49"/><text x="84.8718%" y="831.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (139 samples, 0.11%)</title><rect x="84.5564%" y="869" width="0.1123%" height="15" fill="rgb(252,27,34)" fg:x="104636" fg:w="139"/><text x="84.8064%" y="879.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (124 samples, 0.10%)</title><rect x="84.5685%" y="853" width="0.1002%" height="15" fill="rgb(215,206,23)" fg:x="104651" fg:w="124"/><text x="84.8185%" y="863.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (111 samples, 0.09%)</title><rect x="84.5790%" y="837" width="0.0897%" height="15" fill="rgb(212,135,36)" fg:x="104664" fg:w="111"/><text x="84.8290%" y="847.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (57 samples, 0.05%)</title><rect x="84.7019%" y="869" width="0.0461%" height="15" fill="rgb(240,189,1)" fg:x="104816" fg:w="57"/><text x="84.9519%" y="879.50"></text></g><g><title>parking::Inner::park (15 samples, 0.01%)</title><rect x="84.7560%" y="869" width="0.0121%" height="15" fill="rgb(242,56,20)" fg:x="104883" fg:w="15"/><text x="85.0060%" y="879.50"></text></g><g><title>polling::epoll::Poller::modify (15 samples, 0.01%)</title><rect x="84.7746%" y="869" width="0.0121%" height="15" fill="rgb(247,132,33)" fg:x="104906" fg:w="15"/><text x="85.0246%" y="879.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (45 samples, 0.04%)</title><rect x="84.8829%" y="853" width="0.0364%" height="15" fill="rgb(208,149,11)" fg:x="105040" fg:w="45"/><text x="85.1329%" y="863.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (39 samples, 0.03%)</title><rect x="84.8877%" y="837" width="0.0315%" height="15" fill="rgb(211,33,11)" fg:x="105046" fg:w="39"/><text x="85.1377%" y="847.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (25 samples, 0.02%)</title><rect x="84.8990%" y="821" width="0.0202%" height="15" fill="rgb(221,29,38)" fg:x="105060" fg:w="25"/><text x="85.1490%" y="831.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (25 samples, 0.02%)</title><rect x="84.8990%" y="805" width="0.0202%" height="15" fill="rgb(206,182,49)" fg:x="105060" fg:w="25"/><text x="85.1490%" y="815.50"></text></g><g><title>async_io::reactor::Reactor::get::REACTOR (642 samples, 0.52%)</title><rect x="84.4069%" y="885" width="0.5188%" height="15" fill="rgb(216,140,1)" fg:x="104451" fg:w="642"/><text x="84.6569%" y="895.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (164 samples, 0.13%)</title><rect x="84.7932%" y="869" width="0.1325%" height="15" fill="rgb(232,57,40)" fg:x="104929" fg:w="164"/><text x="85.0432%" y="879.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (18 samples, 0.01%)</title><rect x="85.5140%" y="277" width="0.0145%" height="15" fill="rgb(224,186,18)" fg:x="105821" fg:w="18"/><text x="85.7640%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (47 samples, 0.04%)</title><rect x="85.7427%" y="181" width="0.0380%" height="15" fill="rgb(215,121,11)" fg:x="106104" fg:w="47"/><text x="85.9927%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (46 samples, 0.04%)</title><rect x="85.7435%" y="165" width="0.0372%" height="15" fill="rgb(245,147,10)" fg:x="106105" fg:w="46"/><text x="85.9935%" y="175.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (37 samples, 0.03%)</title><rect x="85.7508%" y="149" width="0.0299%" height="15" fill="rgb(238,153,13)" fg:x="106114" fg:w="37"/><text x="86.0008%" y="159.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (37 samples, 0.03%)</title><rect x="85.7508%" y="133" width="0.0299%" height="15" fill="rgb(233,108,0)" fg:x="106114" fg:w="37"/><text x="86.0008%" y="143.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (37 samples, 0.03%)</title><rect x="85.7508%" y="117" width="0.0299%" height="15" fill="rgb(212,157,17)" fg:x="106114" fg:w="37"/><text x="86.0008%" y="127.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (130 samples, 0.11%)</title><rect x="85.7807%" y="181" width="0.1051%" height="15" fill="rgb(225,213,38)" fg:x="106151" fg:w="130"/><text x="86.0307%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (549 samples, 0.44%)</title><rect x="85.5285%" y="229" width="0.4436%" height="15" fill="rgb(248,16,11)" fg:x="105839" fg:w="549"/><text x="85.7785%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (459 samples, 0.37%)</title><rect x="85.6013%" y="213" width="0.3709%" height="15" fill="rgb(241,33,4)" fg:x="105929" fg:w="459"/><text x="85.8513%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (375 samples, 0.30%)</title><rect x="85.6691%" y="197" width="0.3030%" height="15" fill="rgb(222,26,43)" fg:x="106013" fg:w="375"/><text x="85.9191%" y="207.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (107 samples, 0.09%)</title><rect x="85.8857%" y="181" width="0.0865%" height="15" fill="rgb(243,29,36)" fg:x="106281" fg:w="107"/><text x="86.1357%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (107 samples, 0.09%)</title><rect x="85.8857%" y="165" width="0.0865%" height="15" fill="rgb(241,9,27)" fg:x="106281" fg:w="107"/><text x="86.1357%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (22 samples, 0.02%)</title><rect x="85.9544%" y="149" width="0.0178%" height="15" fill="rgb(205,117,26)" fg:x="106366" fg:w="22"/><text x="86.2044%" y="159.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (22 samples, 0.02%)</title><rect x="85.9544%" y="133" width="0.0178%" height="15" fill="rgb(209,80,39)" fg:x="106366" fg:w="22"/><text x="86.2044%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (589 samples, 0.48%)</title><rect x="85.5285%" y="277" width="0.4760%" height="15" fill="rgb(239,155,6)" fg:x="105839" fg:w="589"/><text x="85.7785%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (589 samples, 0.48%)</title><rect x="85.5285%" y="261" width="0.4760%" height="15" fill="rgb(212,104,12)" fg:x="105839" fg:w="589"/><text x="85.7785%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (589 samples, 0.48%)</title><rect x="85.5285%" y="245" width="0.4760%" height="15" fill="rgb(234,204,3)" fg:x="105839" fg:w="589"/><text x="85.7785%" y="255.50"></text></g><g><title>core::ops::control_flow::ControlFlow&lt;R,&lt;R as core::ops::try_trait::Try&gt;::Output&gt;::into_try (40 samples, 0.03%)</title><rect x="85.9722%" y="229" width="0.0323%" height="15" fill="rgb(251,218,7)" fg:x="106388" fg:w="40"/><text x="86.2222%" y="239.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::len (1,466 samples, 1.18%)</title><rect x="86.4878%" y="245" width="1.1847%" height="15" fill="rgb(221,81,32)" fg:x="107026" fg:w="1466"/><text x="86.7378%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1,069 samples, 0.86%)</title><rect x="86.8086%" y="229" width="0.8639%" height="15" fill="rgb(214,152,26)" fg:x="107423" fg:w="1069"/><text x="87.0586%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_load (1,069 samples, 0.86%)</title><rect x="86.8086%" y="213" width="0.8639%" height="15" fill="rgb(223,22,3)" fg:x="107423" fg:w="1069"/><text x="87.0586%" y="223.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::len (1,955 samples, 1.58%)</title><rect x="86.1055%" y="261" width="1.5798%" height="15" fill="rgb(207,174,7)" fg:x="106553" fg:w="1955"/><text x="86.3555%" y="271.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::len (16 samples, 0.01%)</title><rect x="87.6724%" y="245" width="0.0129%" height="15" fill="rgb(224,19,52)" fg:x="108492" fg:w="16"/><text x="87.9224%" y="255.50"></text></g><g><title>async_executor::steal (2,090 samples, 1.69%)</title><rect x="86.0045%" y="277" width="1.6889%" height="15" fill="rgb(228,24,14)" fg:x="106428" fg:w="2090"/><text x="86.2545%" y="287.50"></text></g><g><title>concurrent_queue::full_fence (1,919 samples, 1.55%)</title><rect x="88.4280%" y="245" width="1.5507%" height="15" fill="rgb(230,153,43)" fg:x="109427" fg:w="1919"/><text x="88.6780%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (1,841 samples, 1.49%)</title><rect x="88.4910%" y="229" width="1.4877%" height="15" fill="rgb(231,106,12)" fg:x="109505" fg:w="1841"/><text x="88.7410%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1,841 samples, 1.49%)</title><rect x="88.4910%" y="213" width="1.4877%" height="15" fill="rgb(215,92,2)" fg:x="109505" fg:w="1841"/><text x="88.7410%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1,841 samples, 1.49%)</title><rect x="88.4910%" y="197" width="1.4877%" height="15" fill="rgb(249,143,25)" fg:x="109505" fg:w="1841"/><text x="88.7410%" y="207.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (2,704 samples, 2.19%)</title><rect x="87.9318%" y="261" width="2.1851%" height="15" fill="rgb(252,7,35)" fg:x="108813" fg:w="2704"/><text x="88.1818%" y="271.50">c..</text></g><g><title>core::sync::atomic::AtomicUsize::load (171 samples, 0.14%)</title><rect x="89.9787%" y="245" width="0.1382%" height="15" fill="rgb(216,69,40)" fg:x="111346" fg:w="171"/><text x="90.2287%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_load (169 samples, 0.14%)</title><rect x="89.9804%" y="229" width="0.1366%" height="15" fill="rgb(240,36,33)" fg:x="111348" fg:w="169"/><text x="90.2304%" y="239.50"></text></g><g><title>concurrent_queue::full_fence (327 samples, 0.26%)</title><rect x="90.1662%" y="245" width="0.2642%" height="15" fill="rgb(231,128,14)" fg:x="111578" fg:w="327"/><text x="90.4162%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (320 samples, 0.26%)</title><rect x="90.1719%" y="229" width="0.2586%" height="15" fill="rgb(245,143,14)" fg:x="111585" fg:w="320"/><text x="90.4219%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (320 samples, 0.26%)</title><rect x="90.1719%" y="213" width="0.2586%" height="15" fill="rgb(222,130,28)" fg:x="111585" fg:w="320"/><text x="90.4219%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (320 samples, 0.26%)</title><rect x="90.1719%" y="197" width="0.2586%" height="15" fill="rgb(212,10,48)" fg:x="111585" fg:w="320"/><text x="90.4219%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (59 samples, 0.05%)</title><rect x="90.4410%" y="229" width="0.0477%" height="15" fill="rgb(254,118,45)" fg:x="111918" fg:w="59"/><text x="90.6910%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_load (59 samples, 0.05%)</title><rect x="90.4410%" y="213" width="0.0477%" height="15" fill="rgb(228,6,45)" fg:x="111918" fg:w="59"/><text x="90.6910%" y="223.50"></text></g><g><title>concurrent_queue::unbounded::Slot&lt;T&gt;::wait_write (62 samples, 0.05%)</title><rect x="90.4394%" y="245" width="0.0501%" height="15" fill="rgb(241,18,35)" fg:x="111916" fg:w="62"/><text x="90.6894%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (15 samples, 0.01%)</title><rect x="90.4992%" y="245" width="0.0121%" height="15" fill="rgb(227,214,53)" fg:x="111990" fg:w="15"/><text x="90.7492%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_load (15 samples, 0.01%)</title><rect x="90.4992%" y="229" width="0.0121%" height="15" fill="rgb(224,107,51)" fg:x="111990" fg:w="15"/><text x="90.7492%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (129 samples, 0.10%)</title><rect x="90.5113%" y="245" width="0.1042%" height="15" fill="rgb(248,60,28)" fg:x="112005" fg:w="129"/><text x="90.7613%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (129 samples, 0.10%)</title><rect x="90.5113%" y="229" width="0.1042%" height="15" fill="rgb(249,101,23)" fg:x="112005" fg:w="129"/><text x="90.7613%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (184 samples, 0.15%)</title><rect x="90.6155%" y="245" width="0.1487%" height="15" fill="rgb(228,51,19)" fg:x="112134" fg:w="184"/><text x="90.8655%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_or (184 samples, 0.15%)</title><rect x="90.6155%" y="229" width="0.1487%" height="15" fill="rgb(213,20,6)" fg:x="112134" fg:w="184"/><text x="90.8655%" y="239.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (3,982 samples, 3.22%)</title><rect x="87.6934%" y="277" width="3.2179%" height="15" fill="rgb(212,124,10)" fg:x="108518" fg:w="3982"/><text x="87.9434%" y="287.50">con..</text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (983 samples, 0.79%)</title><rect x="90.1169%" y="261" width="0.7944%" height="15" fill="rgb(248,3,40)" fg:x="111517" fg:w="983"/><text x="90.3669%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (182 samples, 0.15%)</title><rect x="90.7642%" y="245" width="0.1471%" height="15" fill="rgb(223,178,23)" fg:x="112318" fg:w="182"/><text x="91.0142%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_load (182 samples, 0.15%)</title><rect x="90.7642%" y="229" width="0.1471%" height="15" fill="rgb(240,132,45)" fg:x="112318" fg:w="182"/><text x="91.0142%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (296 samples, 0.24%)</title><rect x="90.9444%" y="213" width="0.2392%" height="15" fill="rgb(245,164,36)" fg:x="112541" fg:w="296"/><text x="91.1944%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_sub (296 samples, 0.24%)</title><rect x="90.9444%" y="197" width="0.2392%" height="15" fill="rgb(231,188,53)" fg:x="112541" fg:w="296"/><text x="91.1944%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (595 samples, 0.48%)</title><rect x="90.9113%" y="277" width="0.4808%" height="15" fill="rgb(237,198,39)" fg:x="112500" fg:w="595"/><text x="91.1613%" y="287.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (595 samples, 0.48%)</title><rect x="90.9113%" y="261" width="0.4808%" height="15" fill="rgb(223,120,35)" fg:x="112500" fg:w="595"/><text x="91.1613%" y="271.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read_unlock (592 samples, 0.48%)</title><rect x="90.9137%" y="245" width="0.4784%" height="15" fill="rgb(253,107,49)" fg:x="112503" fg:w="592"/><text x="91.1637%" y="255.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read_unlock (554 samples, 0.45%)</title><rect x="90.9444%" y="229" width="0.4477%" height="15" fill="rgb(216,44,31)" fg:x="112541" fg:w="554"/><text x="91.1944%" y="239.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::raw_unlock (258 samples, 0.21%)</title><rect x="91.1836%" y="213" width="0.2085%" height="15" fill="rgb(253,87,21)" fg:x="112837" fg:w="258"/><text x="91.4336%" y="223.50"></text></g><g><title>__GI___pthread_rwlock_unlock (258 samples, 0.21%)</title><rect x="91.1836%" y="197" width="0.2085%" height="15" fill="rgb(226,18,2)" fg:x="112837" fg:w="258"/><text x="91.4336%" y="207.50"></text></g><g><title>fastrand::usize (43 samples, 0.03%)</title><rect x="91.3921%" y="277" width="0.0347%" height="15" fill="rgb(216,8,46)" fg:x="113095" fg:w="43"/><text x="91.6421%" y="287.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (40 samples, 0.03%)</title><rect x="91.3945%" y="261" width="0.0323%" height="15" fill="rgb(226,140,39)" fg:x="113098" fg:w="40"/><text x="91.6445%" y="271.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (30 samples, 0.02%)</title><rect x="91.4026%" y="245" width="0.0242%" height="15" fill="rgb(221,194,54)" fg:x="113108" fg:w="30"/><text x="91.6526%" y="255.50"></text></g><g><title>fastrand::usize::{{closure}} (20 samples, 0.02%)</title><rect x="91.4107%" y="229" width="0.0162%" height="15" fill="rgb(213,92,11)" fg:x="113118" fg:w="20"/><text x="91.6607%" y="239.50"></text></g><g><title>fastrand::Rng::usize (20 samples, 0.02%)</title><rect x="91.4107%" y="213" width="0.0162%" height="15" fill="rgb(229,162,46)" fg:x="113118" fg:w="20"/><text x="91.6607%" y="223.50"></text></g><g><title>fastrand::Rng::gen_mod_u64 (18 samples, 0.01%)</title><rect x="91.4123%" y="197" width="0.0145%" height="15" fill="rgb(214,111,36)" fg:x="113120" fg:w="18"/><text x="91.6623%" y="207.50"></text></g><g><title>std::sync::poison::Flag::get (13 samples, 0.01%)</title><rect x="91.4269%" y="229" width="0.0105%" height="15" fill="rgb(207,6,21)" fg:x="113138" fg:w="13"/><text x="91.6769%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (13 samples, 0.01%)</title><rect x="91.4269%" y="213" width="0.0105%" height="15" fill="rgb(213,127,38)" fg:x="113138" fg:w="13"/><text x="91.6769%" y="223.50"></text></g><g><title>std::sync::rwlock::RwLockReadGuard&lt;T&gt;::new (18 samples, 0.01%)</title><rect x="91.4269%" y="261" width="0.0145%" height="15" fill="rgb(238,118,32)" fg:x="113138" fg:w="18"/><text x="91.6769%" y="271.50"></text></g><g><title>std::sync::poison::Flag::borrow (18 samples, 0.01%)</title><rect x="91.4269%" y="245" width="0.0145%" height="15" fill="rgb(240,139,39)" fg:x="113138" fg:w="18"/><text x="91.6769%" y="255.50"></text></g><g><title>__GI___pthread_rwlock_rdlock (484 samples, 0.39%)</title><rect x="91.4947%" y="229" width="0.3911%" height="15" fill="rgb(235,10,37)" fg:x="113222" fg:w="484"/><text x="91.7447%" y="239.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (8,460 samples, 6.84%)</title><rect x="85.1754%" y="293" width="6.8365%" height="15" fill="rgb(249,171,38)" fg:x="105402" fg:w="8460"/><text x="85.4254%" y="303.50">async_exe..</text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (724 samples, 0.59%)</title><rect x="91.4269%" y="277" width="0.5851%" height="15" fill="rgb(242,144,32)" fg:x="113138" fg:w="724"/><text x="91.6769%" y="287.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read (706 samples, 0.57%)</title><rect x="91.4414%" y="261" width="0.5705%" height="15" fill="rgb(217,117,21)" fg:x="113156" fg:w="706"/><text x="91.6914%" y="271.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read (664 samples, 0.54%)</title><rect x="91.4753%" y="245" width="0.5366%" height="15" fill="rgb(249,87,1)" fg:x="113198" fg:w="664"/><text x="91.7253%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (156 samples, 0.13%)</title><rect x="91.8859%" y="229" width="0.1261%" height="15" fill="rgb(248,196,48)" fg:x="113706" fg:w="156"/><text x="92.1359%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_add (156 samples, 0.13%)</title><rect x="91.8859%" y="213" width="0.1261%" height="15" fill="rgb(251,206,33)" fg:x="113706" fg:w="156"/><text x="92.1359%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (57 samples, 0.05%)</title><rect x="92.0224%" y="277" width="0.0461%" height="15" fill="rgb(232,141,28)" fg:x="113875" fg:w="57"/><text x="92.2724%" y="287.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (57 samples, 0.05%)</title><rect x="92.0224%" y="261" width="0.0461%" height="15" fill="rgb(209,167,14)" fg:x="113875" fg:w="57"/><text x="92.2724%" y="271.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (51 samples, 0.04%)</title><rect x="92.0273%" y="245" width="0.0412%" height="15" fill="rgb(225,11,50)" fg:x="113881" fg:w="51"/><text x="92.2773%" y="255.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (51 samples, 0.04%)</title><rect x="92.0273%" y="229" width="0.0412%" height="15" fill="rgb(209,50,20)" fg:x="113881" fg:w="51"/><text x="92.2773%" y="239.50"></text></g><g><title>__GI___pthread_mutex_unlock (51 samples, 0.04%)</title><rect x="92.0273%" y="213" width="0.0412%" height="15" fill="rgb(212,17,46)" fg:x="113881" fg:w="51"/><text x="92.2773%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (61 samples, 0.05%)</title><rect x="92.0685%" y="277" width="0.0493%" height="15" fill="rgb(216,101,39)" fg:x="113932" fg:w="61"/><text x="92.3185%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (61 samples, 0.05%)</title><rect x="92.0685%" y="261" width="0.0493%" height="15" fill="rgb(212,228,48)" fg:x="113932" fg:w="61"/><text x="92.3185%" y="271.50"></text></g><g><title>async_io::reactor::Reactor::notify (51 samples, 0.04%)</title><rect x="92.1251%" y="229" width="0.0412%" height="15" fill="rgb(250,6,50)" fg:x="114002" fg:w="51"/><text x="92.3751%" y="239.50"></text></g><g><title>polling::Poller::notify (45 samples, 0.04%)</title><rect x="92.1299%" y="213" width="0.0364%" height="15" fill="rgb(250,160,48)" fg:x="114008" fg:w="45"/><text x="92.3799%" y="223.50"></text></g><g><title>polling::epoll::Poller::notify (31 samples, 0.03%)</title><rect x="92.1412%" y="197" width="0.0251%" height="15" fill="rgb(244,216,33)" fg:x="114022" fg:w="31"/><text x="92.3912%" y="207.50"></text></g><g><title>__libc_write (30 samples, 0.02%)</title><rect x="92.1420%" y="181" width="0.0242%" height="15" fill="rgb(207,157,5)" fg:x="114023" fg:w="30"/><text x="92.3920%" y="191.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (23 samples, 0.02%)</title><rect x="92.1663%" y="229" width="0.0186%" height="15" fill="rgb(228,199,8)" fg:x="114053" fg:w="23"/><text x="92.4163%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_load (21 samples, 0.02%)</title><rect x="92.1679%" y="213" width="0.0170%" height="15" fill="rgb(227,80,20)" fg:x="114055" fg:w="21"/><text x="92.4179%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (124 samples, 0.10%)</title><rect x="92.2527%" y="197" width="0.1002%" height="15" fill="rgb(222,9,33)" fg:x="114160" fg:w="124"/><text x="92.5027%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_swap (124 samples, 0.10%)</title><rect x="92.2527%" y="181" width="0.1002%" height="15" fill="rgb(239,44,28)" fg:x="114160" fg:w="124"/><text x="92.5027%" y="191.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (127 samples, 0.10%)</title><rect x="92.3529%" y="197" width="0.1026%" height="15" fill="rgb(249,187,43)" fg:x="114284" fg:w="127"/><text x="92.6029%" y="207.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (127 samples, 0.10%)</title><rect x="92.3529%" y="181" width="0.1026%" height="15" fill="rgb(216,141,28)" fg:x="114284" fg:w="127"/><text x="92.6029%" y="191.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (127 samples, 0.10%)</title><rect x="92.3529%" y="165" width="0.1026%" height="15" fill="rgb(230,154,53)" fg:x="114284" fg:w="127"/><text x="92.6029%" y="175.50"></text></g><g><title>__pthread_cond_signal (127 samples, 0.10%)</title><rect x="92.3529%" y="149" width="0.1026%" height="15" fill="rgb(227,82,4)" fg:x="114284" fg:w="127"/><text x="92.6029%" y="159.50"></text></g><g><title>parking::Unparker::unpark (460 samples, 0.37%)</title><rect x="92.1849%" y="229" width="0.3717%" height="15" fill="rgb(220,107,16)" fg:x="114076" fg:w="460"/><text x="92.4349%" y="239.50"></text></g><g><title>parking::Inner::unpark (393 samples, 0.32%)</title><rect x="92.2390%" y="213" width="0.3176%" height="15" fill="rgb(207,187,2)" fg:x="114143" fg:w="393"/><text x="92.4890%" y="223.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (125 samples, 0.10%)</title><rect x="92.4556%" y="197" width="0.1010%" height="15" fill="rgb(210,162,52)" fg:x="114411" fg:w="125"/><text x="92.7056%" y="207.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (123 samples, 0.10%)</title><rect x="92.4572%" y="181" width="0.0994%" height="15" fill="rgb(217,216,49)" fg:x="114413" fg:w="123"/><text x="92.7072%" y="191.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (122 samples, 0.10%)</title><rect x="92.4580%" y="165" width="0.0986%" height="15" fill="rgb(218,146,49)" fg:x="114414" fg:w="122"/><text x="92.7080%" y="175.50"></text></g><g><title>__GI___pthread_mutex_lock (122 samples, 0.10%)</title><rect x="92.4580%" y="149" width="0.0986%" height="15" fill="rgb(216,55,40)" fg:x="114414" fg:w="122"/><text x="92.7080%" y="159.50"></text></g><g><title>async_io::driver::block_on::IO_POLLING::__getit (16 samples, 0.01%)</title><rect x="92.5566%" y="197" width="0.0129%" height="15" fill="rgb(208,196,21)" fg:x="114536" fg:w="16"/><text x="92.8066%" y="207.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (16 samples, 0.01%)</title><rect x="92.5566%" y="181" width="0.0129%" height="15" fill="rgb(242,117,42)" fg:x="114536" fg:w="16"/><text x="92.8066%" y="191.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (14 samples, 0.01%)</title><rect x="92.5582%" y="165" width="0.0113%" height="15" fill="rgb(210,11,23)" fg:x="114538" fg:w="14"/><text x="92.8082%" y="175.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (14 samples, 0.01%)</title><rect x="92.5582%" y="149" width="0.0113%" height="15" fill="rgb(217,110,2)" fg:x="114538" fg:w="14"/><text x="92.8082%" y="159.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (559 samples, 0.45%)</title><rect x="92.1186%" y="245" width="0.4517%" height="15" fill="rgb(229,77,54)" fg:x="113994" fg:w="559"/><text x="92.3686%" y="255.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (17 samples, 0.01%)</title><rect x="92.5566%" y="229" width="0.0137%" height="15" fill="rgb(218,53,16)" fg:x="114536" fg:w="17"/><text x="92.8066%" y="239.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (17 samples, 0.01%)</title><rect x="92.5566%" y="213" width="0.0137%" height="15" fill="rgb(215,38,13)" fg:x="114536" fg:w="17"/><text x="92.8066%" y="223.50"></text></g><g><title>core::task::wake::Waker::wake (624 samples, 0.50%)</title><rect x="92.1178%" y="277" width="0.5043%" height="15" fill="rgb(235,42,18)" fg:x="113993" fg:w="624"/><text x="92.3678%" y="287.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (623 samples, 0.50%)</title><rect x="92.1186%" y="261" width="0.5034%" height="15" fill="rgb(219,66,54)" fg:x="113994" fg:w="623"/><text x="92.3686%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (64 samples, 0.05%)</title><rect x="92.5703%" y="245" width="0.0517%" height="15" fill="rgb(222,205,4)" fg:x="114553" fg:w="64"/><text x="92.8203%" y="255.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (64 samples, 0.05%)</title><rect x="92.5703%" y="229" width="0.0517%" height="15" fill="rgb(227,213,46)" fg:x="114553" fg:w="64"/><text x="92.8203%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (60 samples, 0.05%)</title><rect x="92.5736%" y="213" width="0.0485%" height="15" fill="rgb(250,145,42)" fg:x="114557" fg:w="60"/><text x="92.8236%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_sub (60 samples, 0.05%)</title><rect x="92.5736%" y="197" width="0.0485%" height="15" fill="rgb(219,15,2)" fg:x="114557" fg:w="60"/><text x="92.8236%" y="207.50"></text></g><g><title>async_executor::State::notify (797 samples, 0.64%)</title><rect x="92.0119%" y="293" width="0.6441%" height="15" fill="rgb(231,181,52)" fg:x="113862" fg:w="797"/><text x="92.2619%" y="303.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (42 samples, 0.03%)</title><rect x="92.6220%" y="277" width="0.0339%" height="15" fill="rgb(235,1,42)" fg:x="114617" fg:w="42"/><text x="92.8720%" y="287.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (40 samples, 0.03%)</title><rect x="92.6237%" y="261" width="0.0323%" height="15" fill="rgb(249,88,27)" fg:x="114619" fg:w="40"/><text x="92.8737%" y="271.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (40 samples, 0.03%)</title><rect x="92.6237%" y="245" width="0.0323%" height="15" fill="rgb(235,145,16)" fg:x="114619" fg:w="40"/><text x="92.8737%" y="255.50"></text></g><g><title>__GI___pthread_mutex_lock (40 samples, 0.03%)</title><rect x="92.6237%" y="229" width="0.0323%" height="15" fill="rgb(237,114,19)" fg:x="114619" fg:w="40"/><text x="92.8737%" y="239.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (212 samples, 0.17%)</title><rect x="92.6746%" y="261" width="0.1713%" height="15" fill="rgb(238,51,50)" fg:x="114682" fg:w="212"/><text x="92.9246%" y="271.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (212 samples, 0.17%)</title><rect x="92.6746%" y="245" width="0.1713%" height="15" fill="rgb(205,194,25)" fg:x="114682" fg:w="212"/><text x="92.9246%" y="255.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (212 samples, 0.17%)</title><rect x="92.6746%" y="229" width="0.1713%" height="15" fill="rgb(215,203,17)" fg:x="114682" fg:w="212"/><text x="92.9246%" y="239.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (212 samples, 0.17%)</title><rect x="92.6746%" y="213" width="0.1713%" height="15" fill="rgb(233,112,49)" fg:x="114682" fg:w="212"/><text x="92.9246%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (212 samples, 0.17%)</title><rect x="92.6746%" y="197" width="0.1713%" height="15" fill="rgb(241,130,26)" fg:x="114682" fg:w="212"/><text x="92.9246%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_add (212 samples, 0.17%)</title><rect x="92.6746%" y="181" width="0.1713%" height="15" fill="rgb(252,223,19)" fg:x="114682" fg:w="212"/><text x="92.9246%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (16 samples, 0.01%)</title><rect x="92.8459%" y="261" width="0.0129%" height="15" fill="rgb(211,95,25)" fg:x="114894" fg:w="16"/><text x="93.0959%" y="271.50"></text></g><g><title>async_executor::Sleepers::insert (268 samples, 0.22%)</title><rect x="92.6697%" y="277" width="0.2166%" height="15" fill="rgb(251,182,27)" fg:x="114676" fg:w="268"/><text x="92.9197%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (34 samples, 0.03%)</title><rect x="92.8588%" y="261" width="0.0275%" height="15" fill="rgb(238,24,4)" fg:x="114910" fg:w="34"/><text x="93.1088%" y="271.50"></text></g><g><title>core::ptr::write (29 samples, 0.02%)</title><rect x="92.8629%" y="245" width="0.0234%" height="15" fill="rgb(224,220,25)" fg:x="114915" fg:w="29"/><text x="93.1129%" y="255.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.02%)</title><rect x="92.9590%" y="261" width="0.0154%" height="15" fill="rgb(239,133,26)" fg:x="115034" fg:w="19"/><text x="93.2090%" y="271.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (55 samples, 0.04%)</title><rect x="92.9744%" y="261" width="0.0444%" height="15" fill="rgb(211,94,48)" fg:x="115053" fg:w="55"/><text x="93.2244%" y="271.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (54 samples, 0.04%)</title><rect x="92.9752%" y="245" width="0.0436%" height="15" fill="rgb(239,87,6)" fg:x="115054" fg:w="54"/><text x="93.2252%" y="255.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (53 samples, 0.04%)</title><rect x="92.9760%" y="229" width="0.0428%" height="15" fill="rgb(227,62,0)" fg:x="115055" fg:w="53"/><text x="93.2260%" y="239.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (53 samples, 0.04%)</title><rect x="92.9760%" y="213" width="0.0428%" height="15" fill="rgb(211,226,4)" fg:x="115055" fg:w="53"/><text x="93.2260%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (53 samples, 0.04%)</title><rect x="92.9760%" y="197" width="0.0428%" height="15" fill="rgb(253,38,52)" fg:x="115055" fg:w="53"/><text x="93.2260%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_add (53 samples, 0.04%)</title><rect x="92.9760%" y="181" width="0.0428%" height="15" fill="rgb(229,126,40)" fg:x="115055" fg:w="53"/><text x="93.2260%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (33 samples, 0.03%)</title><rect x="93.0188%" y="261" width="0.0267%" height="15" fill="rgb(229,165,44)" fg:x="115108" fg:w="33"/><text x="93.2688%" y="271.50"></text></g><g><title>core::ptr::write (24 samples, 0.02%)</title><rect x="93.0261%" y="245" width="0.0194%" height="15" fill="rgb(247,95,47)" fg:x="115117" fg:w="24"/><text x="93.2761%" y="255.50"></text></g><g><title>async_executor::Sleepers::update (205 samples, 0.17%)</title><rect x="92.8936%" y="277" width="0.1657%" height="15" fill="rgb(216,140,30)" fg:x="114953" fg:w="205"/><text x="93.1436%" y="287.50"></text></g><g><title>core::task::wake::Waker::will_wake (17 samples, 0.01%)</title><rect x="93.0455%" y="261" width="0.0137%" height="15" fill="rgb(246,214,8)" fg:x="115141" fg:w="17"/><text x="93.2955%" y="271.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (17 samples, 0.01%)</title><rect x="93.0455%" y="245" width="0.0137%" height="15" fill="rgb(227,224,15)" fg:x="115141" fg:w="17"/><text x="93.2955%" y="255.50"></text></g><g><title>std::sync::poison::Flag::done (16 samples, 0.01%)</title><rect x="93.0592%" y="245" width="0.0129%" height="15" fill="rgb(233,175,4)" fg:x="115158" fg:w="16"/><text x="93.3092%" y="255.50"></text></g><g><title>std::thread::panicking (13 samples, 0.01%)</title><rect x="93.0616%" y="229" width="0.0105%" height="15" fill="rgb(221,66,45)" fg:x="115161" fg:w="13"/><text x="93.3116%" y="239.50"></text></g><g><title>std::panicking::panicking (13 samples, 0.01%)</title><rect x="93.0616%" y="213" width="0.0105%" height="15" fill="rgb(221,178,18)" fg:x="115161" fg:w="13"/><text x="93.3116%" y="223.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (13 samples, 0.01%)</title><rect x="93.0616%" y="197" width="0.0105%" height="15" fill="rgb(213,81,29)" fg:x="115161" fg:w="13"/><text x="93.3116%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (296 samples, 0.24%)</title><rect x="93.0592%" y="277" width="0.2392%" height="15" fill="rgb(220,89,49)" fg:x="115158" fg:w="296"/><text x="93.3092%" y="287.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (296 samples, 0.24%)</title><rect x="93.0592%" y="261" width="0.2392%" height="15" fill="rgb(227,60,33)" fg:x="115158" fg:w="296"/><text x="93.3092%" y="271.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (280 samples, 0.23%)</title><rect x="93.0722%" y="245" width="0.2263%" height="15" fill="rgb(205,113,12)" fg:x="115174" fg:w="280"/><text x="93.3222%" y="255.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (278 samples, 0.22%)</title><rect x="93.0738%" y="229" width="0.2247%" height="15" fill="rgb(211,32,1)" fg:x="115176" fg:w="278"/><text x="93.3238%" y="239.50"></text></g><g><title>__GI___pthread_mutex_unlock (274 samples, 0.22%)</title><rect x="93.0770%" y="213" width="0.2214%" height="15" fill="rgb(246,2,12)" fg:x="115180" fg:w="274"/><text x="93.3270%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (247 samples, 0.20%)</title><rect x="93.2984%" y="277" width="0.1996%" height="15" fill="rgb(243,37,27)" fg:x="115454" fg:w="247"/><text x="93.5484%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_swap (247 samples, 0.20%)</title><rect x="93.2984%" y="261" width="0.1996%" height="15" fill="rgb(248,211,31)" fg:x="115454" fg:w="247"/><text x="93.5484%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (204 samples, 0.16%)</title><rect x="93.4980%" y="277" width="0.1649%" height="15" fill="rgb(242,146,47)" fg:x="115701" fg:w="204"/><text x="93.7480%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_store (204 samples, 0.16%)</title><rect x="93.4980%" y="261" width="0.1649%" height="15" fill="rgb(206,70,20)" fg:x="115701" fg:w="204"/><text x="93.7480%" y="271.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (19 samples, 0.02%)</title><rect x="93.6629%" y="261" width="0.0154%" height="15" fill="rgb(215,10,51)" fg:x="115905" fg:w="19"/><text x="93.9129%" y="271.50"></text></g><g><title>std::sync::poison::Flag::borrow (19 samples, 0.02%)</title><rect x="93.6629%" y="245" width="0.0154%" height="15" fill="rgb(243,178,53)" fg:x="115905" fg:w="19"/><text x="93.9129%" y="255.50"></text></g><g><title>async_executor::Ticker::sleep (1,911 samples, 1.54%)</title><rect x="92.6560%" y="293" width="1.5443%" height="15" fill="rgb(233,221,20)" fg:x="114659" fg:w="1911"/><text x="92.9060%" y="303.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (665 samples, 0.54%)</title><rect x="93.6629%" y="277" width="0.5374%" height="15" fill="rgb(218,95,35)" fg:x="115905" fg:w="665"/><text x="93.9129%" y="287.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (646 samples, 0.52%)</title><rect x="93.6782%" y="261" width="0.5220%" height="15" fill="rgb(229,13,5)" fg:x="115924" fg:w="646"/><text x="93.9282%" y="271.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (637 samples, 0.51%)</title><rect x="93.6855%" y="245" width="0.5148%" height="15" fill="rgb(252,164,30)" fg:x="115933" fg:w="637"/><text x="93.9355%" y="255.50"></text></g><g><title>__GI___pthread_mutex_lock (637 samples, 0.51%)</title><rect x="93.6855%" y="229" width="0.5148%" height="15" fill="rgb(232,68,36)" fg:x="115933" fg:w="637"/><text x="93.9355%" y="239.50"></text></g><g><title>__lll_lock_wait (38 samples, 0.03%)</title><rect x="94.1696%" y="213" width="0.0307%" height="15" fill="rgb(219,59,54)" fg:x="116532" fg:w="38"/><text x="94.4196%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.01%)</title><rect x="94.2277%" y="261" width="0.0113%" height="15" fill="rgb(250,92,33)" fg:x="116604" fg:w="14"/><text x="94.4777%" y="271.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (14 samples, 0.01%)</title><rect x="94.2277%" y="245" width="0.0113%" height="15" fill="rgb(229,162,54)" fg:x="116604" fg:w="14"/><text x="94.4777%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (14 samples, 0.01%)</title><rect x="94.2277%" y="229" width="0.0113%" height="15" fill="rgb(244,114,52)" fg:x="116604" fg:w="14"/><text x="94.4777%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::remove (16 samples, 0.01%)</title><rect x="94.2415%" y="261" width="0.0129%" height="15" fill="rgb(212,211,43)" fg:x="116621" fg:w="16"/><text x="94.4915%" y="271.50"></text></g><g><title>async_executor::Sleepers::remove (143 samples, 0.12%)</title><rect x="94.2067%" y="277" width="0.1156%" height="15" fill="rgb(226,147,8)" fg:x="116578" fg:w="143"/><text x="94.4567%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,core::task::wake::Waker)&gt; (84 samples, 0.07%)</title><rect x="94.2544%" y="261" width="0.0679%" height="15" fill="rgb(226,23,13)" fg:x="116637" fg:w="84"/><text x="94.5044%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (84 samples, 0.07%)</title><rect x="94.2544%" y="245" width="0.0679%" height="15" fill="rgb(240,63,4)" fg:x="116637" fg:w="84"/><text x="94.5044%" y="255.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (84 samples, 0.07%)</title><rect x="94.2544%" y="229" width="0.0679%" height="15" fill="rgb(221,1,32)" fg:x="116637" fg:w="84"/><text x="94.5044%" y="239.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::drop_waker (84 samples, 0.07%)</title><rect x="94.2544%" y="213" width="0.0679%" height="15" fill="rgb(242,117,10)" fg:x="116637" fg:w="84"/><text x="94.5044%" y="223.50"></text></g><g><title>core::mem::drop (82 samples, 0.07%)</title><rect x="94.2560%" y="197" width="0.0663%" height="15" fill="rgb(249,172,44)" fg:x="116639" fg:w="82"/><text x="94.5060%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (82 samples, 0.07%)</title><rect x="94.2560%" y="181" width="0.0663%" height="15" fill="rgb(244,46,45)" fg:x="116639" fg:w="82"/><text x="94.5060%" y="191.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (82 samples, 0.07%)</title><rect x="94.2560%" y="165" width="0.0663%" height="15" fill="rgb(206,43,17)" fg:x="116639" fg:w="82"/><text x="94.5060%" y="175.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (82 samples, 0.07%)</title><rect x="94.2560%" y="149" width="0.0663%" height="15" fill="rgb(239,218,39)" fg:x="116639" fg:w="82"/><text x="94.5060%" y="159.50"></text></g><g><title>core::sync::atomic::atomic_sub (82 samples, 0.07%)</title><rect x="94.2560%" y="133" width="0.0663%" height="15" fill="rgb(208,169,54)" fg:x="116639" fg:w="82"/><text x="94.5060%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (67 samples, 0.05%)</title><rect x="94.3223%" y="277" width="0.0541%" height="15" fill="rgb(247,25,42)" fg:x="116721" fg:w="67"/><text x="94.5723%" y="287.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (67 samples, 0.05%)</title><rect x="94.3223%" y="261" width="0.0541%" height="15" fill="rgb(226,23,31)" fg:x="116721" fg:w="67"/><text x="94.5723%" y="271.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (64 samples, 0.05%)</title><rect x="94.3247%" y="245" width="0.0517%" height="15" fill="rgb(247,16,28)" fg:x="116724" fg:w="64"/><text x="94.5747%" y="255.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (64 samples, 0.05%)</title><rect x="94.3247%" y="229" width="0.0517%" height="15" fill="rgb(231,147,38)" fg:x="116724" fg:w="64"/><text x="94.5747%" y="239.50"></text></g><g><title>__GI___pthread_mutex_unlock (62 samples, 0.05%)</title><rect x="94.3263%" y="213" width="0.0501%" height="15" fill="rgb(253,81,48)" fg:x="116726" fg:w="62"/><text x="94.5763%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (102 samples, 0.08%)</title><rect x="94.3764%" y="277" width="0.0824%" height="15" fill="rgb(249,222,43)" fg:x="116788" fg:w="102"/><text x="94.6264%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_swap (102 samples, 0.08%)</title><rect x="94.3764%" y="261" width="0.0824%" height="15" fill="rgb(221,3,27)" fg:x="116788" fg:w="102"/><text x="94.6264%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (137 samples, 0.11%)</title><rect x="94.4589%" y="277" width="0.1107%" height="15" fill="rgb(228,180,5)" fg:x="116890" fg:w="137"/><text x="94.7089%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_swap (137 samples, 0.11%)</title><rect x="94.4589%" y="261" width="0.1107%" height="15" fill="rgb(227,131,42)" fg:x="116890" fg:w="137"/><text x="94.7089%" y="271.50"></text></g><g><title>async_executor::Ticker::wake (621 samples, 0.50%)</title><rect x="94.2003%" y="293" width="0.5018%" height="15" fill="rgb(212,3,39)" fg:x="116570" fg:w="621"/><text x="94.4503%" y="303.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (164 samples, 0.13%)</title><rect x="94.5696%" y="277" width="0.1325%" height="15" fill="rgb(226,45,5)" fg:x="117027" fg:w="164"/><text x="94.8196%" y="287.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (162 samples, 0.13%)</title><rect x="94.5712%" y="261" width="0.1309%" height="15" fill="rgb(215,167,45)" fg:x="117029" fg:w="162"/><text x="94.8212%" y="271.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (156 samples, 0.13%)</title><rect x="94.5760%" y="245" width="0.1261%" height="15" fill="rgb(250,218,53)" fg:x="117035" fg:w="156"/><text x="94.8260%" y="255.50"></text></g><g><title>__GI___pthread_mutex_lock (156 samples, 0.13%)</title><rect x="94.5760%" y="229" width="0.1261%" height="15" fill="rgb(207,140,0)" fg:x="117035" fg:w="156"/><text x="94.8260%" y="239.50"></text></g><g><title>__lll_lock_wait (25 samples, 0.02%)</title><rect x="94.6819%" y="213" width="0.0202%" height="15" fill="rgb(238,133,51)" fg:x="117166" fg:w="25"/><text x="94.9319%" y="223.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,837 samples, 9.57%)</title><rect x="85.1374%" y="357" width="9.5655%" height="15" fill="rgb(218,203,53)" fg:x="105355" fg:w="11837"/><text x="85.3874%" y="367.50">&lt;core::future:..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (11,837 samples, 9.57%)</title><rect x="85.1374%" y="341" width="9.5655%" height="15" fill="rgb(226,184,25)" fg:x="105355" fg:w="11837"/><text x="85.3874%" y="351.50">async_executor..</text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (11,817 samples, 9.55%)</title><rect x="85.1536%" y="325" width="9.5493%" height="15" fill="rgb(231,121,21)" fg:x="105375" fg:w="11817"/><text x="85.4036%" y="335.50">&lt;futures_lite:..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (11,800 samples, 9.54%)</title><rect x="85.1673%" y="309" width="9.5356%" height="15" fill="rgb(251,14,34)" fg:x="105392" fg:w="11800"/><text x="85.4173%" y="319.50">async_executor..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,989 samples, 9.69%)</title><rect x="85.0930%" y="389" width="9.6883%" height="15" fill="rgb(249,193,11)" fg:x="105300" fg:w="11989"/><text x="85.3430%" y="399.50">&lt;core::future:..</text></g><g><title>async_executor::Runner::runnable::{{closure}} (11,988 samples, 9.69%)</title><rect x="85.0938%" y="373" width="9.6875%" height="15" fill="rgb(220,172,37)" fg:x="105301" fg:w="11988"/><text x="85.3438%" y="383.50">async_executor..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (97 samples, 0.08%)</title><rect x="94.7029%" y="357" width="0.0784%" height="15" fill="rgb(231,229,43)" fg:x="117192" fg:w="97"/><text x="94.9529%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_add (97 samples, 0.08%)</title><rect x="94.7029%" y="341" width="0.0784%" height="15" fill="rgb(250,161,5)" fg:x="117192" fg:w="97"/><text x="94.9529%" y="351.50"></text></g><g><title>[libc-2.31.so] (63 samples, 0.05%)</title><rect x="95.0350%" y="245" width="0.0509%" height="15" fill="rgb(218,225,18)" fg:x="117603" fg:w="63"/><text x="95.2850%" y="255.50"></text></g><g><title>async_std::task::task_locals_wrapper::CURRENT::__getit (18 samples, 0.01%)</title><rect x="95.0859%" y="245" width="0.0145%" height="15" fill="rgb(245,45,42)" fg:x="117666" fg:w="18"/><text x="95.3359%" y="255.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (18 samples, 0.01%)</title><rect x="95.0859%" y="229" width="0.0145%" height="15" fill="rgb(211,115,1)" fg:x="117666" fg:w="18"/><text x="95.3359%" y="239.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (18 samples, 0.01%)</title><rect x="95.0859%" y="213" width="0.0145%" height="15" fill="rgb(248,133,52)" fg:x="117666" fg:w="18"/><text x="95.3359%" y="223.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (18 samples, 0.01%)</title><rect x="95.0859%" y="197" width="0.0145%" height="15" fill="rgb(238,100,21)" fg:x="117666" fg:w="18"/><text x="95.3359%" y="207.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (28 samples, 0.02%)</title><rect x="95.1037%" y="229" width="0.0226%" height="15" fill="rgb(247,144,11)" fg:x="117688" fg:w="28"/><text x="95.3537%" y="239.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (27 samples, 0.02%)</title><rect x="95.1045%" y="213" width="0.0218%" height="15" fill="rgb(206,164,16)" fg:x="117689" fg:w="27"/><text x="95.3545%" y="223.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (292 samples, 0.24%)</title><rect x="94.9001%" y="341" width="0.2360%" height="15" fill="rgb(222,34,3)" fg:x="117436" fg:w="292"/><text x="95.1501%" y="351.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (274 samples, 0.22%)</title><rect x="94.9146%" y="325" width="0.2214%" height="15" fill="rgb(248,82,4)" fg:x="117454" fg:w="274"/><text x="95.1646%" y="335.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (136 samples, 0.11%)</title><rect x="95.0261%" y="309" width="0.1099%" height="15" fill="rgb(228,81,46)" fg:x="117592" fg:w="136"/><text x="95.2761%" y="319.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (136 samples, 0.11%)</title><rect x="95.0261%" y="293" width="0.1099%" height="15" fill="rgb(227,67,47)" fg:x="117592" fg:w="136"/><text x="95.2761%" y="303.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (131 samples, 0.11%)</title><rect x="95.0302%" y="277" width="0.1059%" height="15" fill="rgb(215,93,53)" fg:x="117597" fg:w="131"/><text x="95.2802%" y="287.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (126 samples, 0.10%)</title><rect x="95.0342%" y="261" width="0.1018%" height="15" fill="rgb(248,194,39)" fg:x="117602" fg:w="126"/><text x="95.2842%" y="271.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (44 samples, 0.04%)</title><rect x="95.1005%" y="245" width="0.0356%" height="15" fill="rgb(215,5,19)" fg:x="117684" fg:w="44"/><text x="95.3505%" y="255.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (295 samples, 0.24%)</title><rect x="94.9001%" y="357" width="0.2384%" height="15" fill="rgb(226,215,51)" fg:x="117436" fg:w="295"/><text x="95.1501%" y="367.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_ref (52 samples, 0.04%)</title><rect x="95.1385%" y="357" width="0.0420%" height="15" fill="rgb(225,56,26)" fg:x="117731" fg:w="52"/><text x="95.3885%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (47 samples, 0.04%)</title><rect x="95.1425%" y="341" width="0.0380%" height="15" fill="rgb(222,75,29)" fg:x="117736" fg:w="47"/><text x="95.3925%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_sub (47 samples, 0.04%)</title><rect x="95.1425%" y="325" width="0.0380%" height="15" fill="rgb(236,139,6)" fg:x="117736" fg:w="47"/><text x="95.3925%" y="335.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (19 samples, 0.02%)</title><rect x="95.1870%" y="277" width="0.0154%" height="15" fill="rgb(223,137,36)" fg:x="117791" fg:w="19"/><text x="95.4370%" y="287.50"></text></g><g><title>parking::Unparker::unpark (16 samples, 0.01%)</title><rect x="95.1894%" y="261" width="0.0129%" height="15" fill="rgb(226,99,2)" fg:x="117794" fg:w="16"/><text x="95.4394%" y="271.50"></text></g><g><title>parking::Inner::unpark (16 samples, 0.01%)</title><rect x="95.1894%" y="245" width="0.0129%" height="15" fill="rgb(206,133,23)" fg:x="117794" fg:w="16"/><text x="95.4394%" y="255.50"></text></g><g><title>core::task::wake::Waker::wake (20 samples, 0.02%)</title><rect x="95.1870%" y="309" width="0.0162%" height="15" fill="rgb(243,173,15)" fg:x="117791" fg:w="20"/><text x="95.4370%" y="319.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (20 samples, 0.02%)</title><rect x="95.1870%" y="293" width="0.0162%" height="15" fill="rgb(228,69,28)" fg:x="117791" fg:w="20"/><text x="95.4370%" y="303.50"></text></g><g><title>async_executor::State::notify (33 samples, 0.03%)</title><rect x="95.1805%" y="325" width="0.0267%" height="15" fill="rgb(212,51,22)" fg:x="117783" fg:w="33"/><text x="95.4305%" y="335.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (54 samples, 0.04%)</title><rect x="95.1805%" y="341" width="0.0436%" height="15" fill="rgb(227,113,0)" fg:x="117783" fg:w="54"/><text x="95.4305%" y="351.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (21 samples, 0.02%)</title><rect x="95.2072%" y="325" width="0.0170%" height="15" fill="rgb(252,84,27)" fg:x="117816" fg:w="21"/><text x="95.4572%" y="335.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (18 samples, 0.01%)</title><rect x="95.2096%" y="309" width="0.0145%" height="15" fill="rgb(223,145,39)" fg:x="117819" fg:w="18"/><text x="95.4596%" y="319.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::schedule (57 samples, 0.05%)</title><rect x="95.1805%" y="357" width="0.0461%" height="15" fill="rgb(239,219,30)" fg:x="117783" fg:w="57"/><text x="95.4305%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (388 samples, 0.31%)</title><rect x="95.2266%" y="357" width="0.3135%" height="15" fill="rgb(224,196,39)" fg:x="117840" fg:w="388"/><text x="95.4766%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (388 samples, 0.31%)</title><rect x="95.2266%" y="341" width="0.3135%" height="15" fill="rgb(205,35,43)" fg:x="117840" fg:w="388"/><text x="95.4766%" y="351.50"></text></g><g><title>async_task::runnable::Runnable::run (949 samples, 0.77%)</title><rect x="94.7837%" y="389" width="0.7669%" height="15" fill="rgb(228,201,21)" fg:x="117292" fg:w="949"/><text x="95.0337%" y="399.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (892 samples, 0.72%)</title><rect x="94.8298%" y="373" width="0.7208%" height="15" fill="rgb(237,118,16)" fg:x="117349" fg:w="892"/><text x="95.0798%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (13 samples, 0.01%)</title><rect x="95.5401%" y="357" width="0.0105%" height="15" fill="rgb(241,17,19)" fg:x="118228" fg:w="13"/><text x="95.7901%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_load (13 samples, 0.01%)</title><rect x="95.5401%" y="341" width="0.0105%" height="15" fill="rgb(214,10,25)" fg:x="118228" fg:w="13"/><text x="95.7901%" y="351.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (13,039 samples, 10.54%)</title><rect x="85.0477%" y="453" width="10.5368%" height="15" fill="rgb(238,37,29)" fg:x="105244" fg:w="13039"/><text x="85.2977%" y="463.50">async_executor:..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (13,006 samples, 10.51%)</title><rect x="85.0744%" y="437" width="10.5102%" height="15" fill="rgb(253,83,25)" fg:x="105277" fg:w="13006"/><text x="85.3244%" y="447.50">&lt;futures_lite::..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (13,006 samples, 10.51%)</title><rect x="85.0744%" y="421" width="10.5102%" height="15" fill="rgb(234,192,12)" fg:x="105277" fg:w="13006"/><text x="85.3244%" y="431.50">&lt;core::future::..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (13,003 samples, 10.51%)</title><rect x="85.0768%" y="405" width="10.5077%" height="15" fill="rgb(241,216,45)" fg:x="105280" fg:w="13003"/><text x="85.3268%" y="415.50">async_executor:..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (42 samples, 0.03%)</title><rect x="95.5506%" y="389" width="0.0339%" height="15" fill="rgb(242,22,33)" fg:x="118241" fg:w="42"/><text x="95.8006%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (42 samples, 0.03%)</title><rect x="95.5506%" y="373" width="0.0339%" height="15" fill="rgb(231,105,49)" fg:x="118241" fg:w="42"/><text x="95.8006%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (20 samples, 0.02%)</title><rect x="95.7025%" y="197" width="0.0162%" height="15" fill="rgb(218,204,15)" fg:x="118429" fg:w="20"/><text x="95.9525%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (20 samples, 0.02%)</title><rect x="95.7025%" y="181" width="0.0162%" height="15" fill="rgb(235,138,41)" fg:x="118429" fg:w="20"/><text x="95.9525%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (19 samples, 0.02%)</title><rect x="95.7033%" y="165" width="0.0154%" height="15" fill="rgb(246,0,9)" fg:x="118430" fg:w="19"/><text x="95.9533%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.02%)</title><rect x="95.7025%" y="245" width="0.0170%" height="15" fill="rgb(210,74,4)" fg:x="118429" fg:w="21"/><text x="95.9525%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (21 samples, 0.02%)</title><rect x="95.7025%" y="229" width="0.0170%" height="15" fill="rgb(250,60,41)" fg:x="118429" fg:w="21"/><text x="95.9525%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (21 samples, 0.02%)</title><rect x="95.7025%" y="213" width="0.0170%" height="15" fill="rgb(220,115,12)" fg:x="118429" fg:w="21"/><text x="95.9525%" y="223.50"></text></g><g><title>concurrent_queue::full_fence (52 samples, 0.04%)</title><rect x="95.7542%" y="213" width="0.0420%" height="15" fill="rgb(237,100,13)" fg:x="118493" fg:w="52"/><text x="96.0042%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (51 samples, 0.04%)</title><rect x="95.7550%" y="197" width="0.0412%" height="15" fill="rgb(213,55,26)" fg:x="118494" fg:w="51"/><text x="96.0050%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (51 samples, 0.04%)</title><rect x="95.7550%" y="181" width="0.0412%" height="15" fill="rgb(216,17,4)" fg:x="118494" fg:w="51"/><text x="96.0050%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (51 samples, 0.04%)</title><rect x="95.7550%" y="165" width="0.0412%" height="15" fill="rgb(220,153,47)" fg:x="118494" fg:w="51"/><text x="96.0050%" y="175.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (149 samples, 0.12%)</title><rect x="95.7348%" y="229" width="0.1204%" height="15" fill="rgb(215,131,9)" fg:x="118469" fg:w="149"/><text x="95.9848%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (73 samples, 0.06%)</title><rect x="95.7963%" y="213" width="0.0590%" height="15" fill="rgb(233,46,42)" fg:x="118545" fg:w="73"/><text x="96.0463%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_load (73 samples, 0.06%)</title><rect x="95.7963%" y="197" width="0.0590%" height="15" fill="rgb(226,86,7)" fg:x="118545" fg:w="73"/><text x="96.0463%" y="207.50"></text></g><g><title>concurrent_queue::full_fence (44 samples, 0.04%)</title><rect x="95.8658%" y="213" width="0.0356%" height="15" fill="rgb(239,226,21)" fg:x="118631" fg:w="44"/><text x="96.1158%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (43 samples, 0.03%)</title><rect x="95.8666%" y="197" width="0.0347%" height="15" fill="rgb(244,137,22)" fg:x="118632" fg:w="43"/><text x="96.1166%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (43 samples, 0.03%)</title><rect x="95.8666%" y="181" width="0.0347%" height="15" fill="rgb(211,139,35)" fg:x="118632" fg:w="43"/><text x="96.1166%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (43 samples, 0.03%)</title><rect x="95.8666%" y="165" width="0.0347%" height="15" fill="rgb(214,62,50)" fg:x="118632" fg:w="43"/><text x="96.1166%" y="175.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (252 samples, 0.20%)</title><rect x="95.7195%" y="245" width="0.2036%" height="15" fill="rgb(212,113,44)" fg:x="118450" fg:w="252"/><text x="95.9695%" y="255.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (84 samples, 0.07%)</title><rect x="95.8553%" y="229" width="0.0679%" height="15" fill="rgb(226,150,43)" fg:x="118618" fg:w="84"/><text x="96.1053%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (24 samples, 0.02%)</title><rect x="95.9037%" y="213" width="0.0194%" height="15" fill="rgb(250,71,37)" fg:x="118678" fg:w="24"/><text x="96.1537%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_load (24 samples, 0.02%)</title><rect x="95.9037%" y="197" width="0.0194%" height="15" fill="rgb(219,76,19)" fg:x="118678" fg:w="24"/><text x="96.1537%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (53 samples, 0.04%)</title><rect x="95.9272%" y="181" width="0.0428%" height="15" fill="rgb(250,39,11)" fg:x="118707" fg:w="53"/><text x="96.1772%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_sub (53 samples, 0.04%)</title><rect x="95.9272%" y="165" width="0.0428%" height="15" fill="rgb(230,64,31)" fg:x="118707" fg:w="53"/><text x="96.1772%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (128 samples, 0.10%)</title><rect x="95.9231%" y="245" width="0.1034%" height="15" fill="rgb(208,222,23)" fg:x="118702" fg:w="128"/><text x="96.1731%" y="255.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (128 samples, 0.10%)</title><rect x="95.9231%" y="229" width="0.1034%" height="15" fill="rgb(227,125,18)" fg:x="118702" fg:w="128"/><text x="96.1731%" y="239.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read_unlock (123 samples, 0.10%)</title><rect x="95.9272%" y="213" width="0.0994%" height="15" fill="rgb(234,210,9)" fg:x="118707" fg:w="123"/><text x="96.1772%" y="223.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read_unlock (123 samples, 0.10%)</title><rect x="95.9272%" y="197" width="0.0994%" height="15" fill="rgb(217,127,24)" fg:x="118707" fg:w="123"/><text x="96.1772%" y="207.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::raw_unlock (70 samples, 0.06%)</title><rect x="95.9700%" y="181" width="0.0566%" height="15" fill="rgb(239,141,48)" fg:x="118760" fg:w="70"/><text x="96.2200%" y="191.50"></text></g><g><title>__GI___pthread_rwlock_unlock (70 samples, 0.06%)</title><rect x="95.9700%" y="165" width="0.0566%" height="15" fill="rgb(227,109,8)" fg:x="118760" fg:w="70"/><text x="96.2200%" y="175.50"></text></g><g><title>fastrand::usize (23 samples, 0.02%)</title><rect x="96.0266%" y="245" width="0.0186%" height="15" fill="rgb(235,184,23)" fg:x="118830" fg:w="23"/><text x="96.2766%" y="255.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (22 samples, 0.02%)</title><rect x="96.0274%" y="229" width="0.0178%" height="15" fill="rgb(227,226,48)" fg:x="118831" fg:w="22"/><text x="96.2774%" y="239.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (21 samples, 0.02%)</title><rect x="96.0282%" y="213" width="0.0170%" height="15" fill="rgb(206,150,11)" fg:x="118832" fg:w="21"/><text x="96.2782%" y="223.50"></text></g><g><title>__GI___pthread_rwlock_rdlock (62 samples, 0.05%)</title><rect x="96.0492%" y="197" width="0.0501%" height="15" fill="rgb(254,2,33)" fg:x="118858" fg:w="62"/><text x="96.2992%" y="207.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (561 samples, 0.45%)</title><rect x="95.6896%" y="261" width="0.4533%" height="15" fill="rgb(243,160,20)" fg:x="118413" fg:w="561"/><text x="95.9396%" y="271.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (121 samples, 0.10%)</title><rect x="96.0452%" y="245" width="0.0978%" height="15" fill="rgb(218,208,30)" fg:x="118853" fg:w="121"/><text x="96.2952%" y="255.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read (119 samples, 0.10%)</title><rect x="96.0468%" y="229" width="0.0962%" height="15" fill="rgb(224,120,49)" fg:x="118855" fg:w="119"/><text x="96.2968%" y="239.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read (118 samples, 0.10%)</title><rect x="96.0476%" y="213" width="0.0954%" height="15" fill="rgb(246,12,2)" fg:x="118856" fg:w="118"/><text x="96.2976%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (54 samples, 0.04%)</title><rect x="96.0993%" y="197" width="0.0436%" height="15" fill="rgb(236,117,3)" fg:x="118920" fg:w="54"/><text x="96.3493%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_add (54 samples, 0.04%)</title><rect x="96.0993%" y="181" width="0.0436%" height="15" fill="rgb(216,128,52)" fg:x="118920" fg:w="54"/><text x="96.3493%" y="191.50"></text></g><g><title>async_executor::Sleepers::update (38 samples, 0.03%)</title><rect x="96.1486%" y="245" width="0.0307%" height="15" fill="rgb(246,145,19)" fg:x="118981" fg:w="38"/><text x="96.3986%" y="255.50"></text></g><g><title>core::task::wake::Waker::will_wake (20 samples, 0.02%)</title><rect x="96.1631%" y="229" width="0.0162%" height="15" fill="rgb(222,11,46)" fg:x="118999" fg:w="20"/><text x="96.4131%" y="239.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (20 samples, 0.02%)</title><rect x="96.1631%" y="213" width="0.0162%" height="15" fill="rgb(245,82,36)" fg:x="118999" fg:w="20"/><text x="96.4131%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (69 samples, 0.06%)</title><rect x="96.1793%" y="245" width="0.0558%" height="15" fill="rgb(250,73,51)" fg:x="119019" fg:w="69"/><text x="96.4293%" y="255.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (69 samples, 0.06%)</title><rect x="96.1793%" y="229" width="0.0558%" height="15" fill="rgb(221,189,23)" fg:x="119019" fg:w="69"/><text x="96.4293%" y="239.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (65 samples, 0.05%)</title><rect x="96.1825%" y="213" width="0.0525%" height="15" fill="rgb(210,33,7)" fg:x="119023" fg:w="65"/><text x="96.4325%" y="223.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (65 samples, 0.05%)</title><rect x="96.1825%" y="197" width="0.0525%" height="15" fill="rgb(210,107,22)" fg:x="119023" fg:w="65"/><text x="96.4325%" y="207.50"></text></g><g><title>__GI___pthread_mutex_unlock (60 samples, 0.05%)</title><rect x="96.1866%" y="181" width="0.0485%" height="15" fill="rgb(222,116,37)" fg:x="119028" fg:w="60"/><text x="96.4366%" y="191.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (793 samples, 0.64%)</title><rect x="95.6597%" y="373" width="0.6408%" height="15" fill="rgb(254,17,48)" fg:x="118376" fg:w="793"/><text x="95.9097%" y="383.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (781 samples, 0.63%)</title><rect x="95.6694%" y="357" width="0.6311%" height="15" fill="rgb(224,36,32)" fg:x="118388" fg:w="781"/><text x="95.9194%" y="367.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}} (780 samples, 0.63%)</title><rect x="95.6702%" y="341" width="0.6303%" height="15" fill="rgb(232,90,46)" fg:x="118389" fg:w="780"/><text x="95.9202%" y="351.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (774 samples, 0.63%)</title><rect x="95.6750%" y="325" width="0.6255%" height="15" fill="rgb(241,66,40)" fg:x="118395" fg:w="774"/><text x="95.9250%" y="335.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (774 samples, 0.63%)</title><rect x="95.6750%" y="309" width="0.6255%" height="15" fill="rgb(249,184,29)" fg:x="118395" fg:w="774"/><text x="95.9250%" y="319.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (762 samples, 0.62%)</title><rect x="95.6847%" y="293" width="0.6158%" height="15" fill="rgb(231,181,1)" fg:x="118407" fg:w="762"/><text x="95.9347%" y="303.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (758 samples, 0.61%)</title><rect x="95.6880%" y="277" width="0.6125%" height="15" fill="rgb(224,94,2)" fg:x="118411" fg:w="758"/><text x="95.9380%" y="287.50"></text></g><g><title>async_executor::Ticker::sleep (195 samples, 0.16%)</title><rect x="96.1429%" y="261" width="0.1576%" height="15" fill="rgb(229,170,15)" fg:x="118974" fg:w="195"/><text x="96.3929%" y="271.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (81 samples, 0.07%)</title><rect x="96.2351%" y="245" width="0.0655%" height="15" fill="rgb(240,127,35)" fg:x="119088" fg:w="81"/><text x="96.4851%" y="255.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (79 samples, 0.06%)</title><rect x="96.2367%" y="229" width="0.0638%" height="15" fill="rgb(248,196,34)" fg:x="119090" fg:w="79"/><text x="96.4867%" y="239.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (79 samples, 0.06%)</title><rect x="96.2367%" y="213" width="0.0638%" height="15" fill="rgb(236,137,7)" fg:x="119090" fg:w="79"/><text x="96.4867%" y="223.50"></text></g><g><title>__GI___pthread_mutex_lock (79 samples, 0.06%)</title><rect x="96.2367%" y="197" width="0.0638%" height="15" fill="rgb(235,127,16)" fg:x="119090" fg:w="79"/><text x="96.4867%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (27 samples, 0.02%)</title><rect x="96.3870%" y="309" width="0.0218%" height="15" fill="rgb(250,192,54)" fg:x="119276" fg:w="27"/><text x="96.6370%" y="319.50"></text></g><g><title>core::mem::replace (27 samples, 0.02%)</title><rect x="96.3870%" y="293" width="0.0218%" height="15" fill="rgb(218,98,20)" fg:x="119276" fg:w="27"/><text x="96.6370%" y="303.50"></text></g><g><title>core::ptr::read (27 samples, 0.02%)</title><rect x="96.3870%" y="277" width="0.0218%" height="15" fill="rgb(230,176,47)" fg:x="119276" fg:w="27"/><text x="96.6370%" y="287.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (58 samples, 0.05%)</title><rect x="96.3692%" y="325" width="0.0469%" height="15" fill="rgb(244,2,33)" fg:x="119254" fg:w="58"/><text x="96.6192%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (70 samples, 0.06%)</title><rect x="96.4161%" y="325" width="0.0566%" height="15" fill="rgb(231,100,17)" fg:x="119312" fg:w="70"/><text x="96.6661%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (69 samples, 0.06%)</title><rect x="96.4169%" y="309" width="0.0558%" height="15" fill="rgb(245,23,12)" fg:x="119313" fg:w="69"/><text x="96.6669%" y="319.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (69 samples, 0.06%)</title><rect x="96.4169%" y="293" width="0.0558%" height="15" fill="rgb(249,55,22)" fg:x="119313" fg:w="69"/><text x="96.6669%" y="303.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (62 samples, 0.05%)</title><rect x="96.4225%" y="277" width="0.0501%" height="15" fill="rgb(207,134,9)" fg:x="119320" fg:w="62"/><text x="96.6725%" y="287.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (62 samples, 0.05%)</title><rect x="96.4225%" y="261" width="0.0501%" height="15" fill="rgb(218,134,0)" fg:x="119320" fg:w="62"/><text x="96.6725%" y="271.50"></text></g><g><title>__GI___pthread_mutex_unlock (61 samples, 0.05%)</title><rect x="96.4233%" y="245" width="0.0493%" height="15" fill="rgb(213,212,33)" fg:x="119321" fg:w="61"/><text x="96.6733%" y="255.50"></text></g><g><title>core::task::wake::Waker::will_wake (19 samples, 0.02%)</title><rect x="96.4726%" y="325" width="0.0154%" height="15" fill="rgb(252,106,18)" fg:x="119382" fg:w="19"/><text x="96.7226%" y="335.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (19 samples, 0.02%)</title><rect x="96.4726%" y="309" width="0.0154%" height="15" fill="rgb(208,126,42)" fg:x="119382" fg:w="19"/><text x="96.7226%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (14 samples, 0.01%)</title><rect x="96.4767%" y="293" width="0.0113%" height="15" fill="rgb(246,175,29)" fg:x="119387" fg:w="14"/><text x="96.7267%" y="303.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (14 samples, 0.01%)</title><rect x="96.4767%" y="277" width="0.0113%" height="15" fill="rgb(215,13,50)" fg:x="119387" fg:w="14"/><text x="96.7267%" y="287.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (375 samples, 0.30%)</title><rect x="96.3433%" y="341" width="0.3030%" height="15" fill="rgb(216,172,15)" fg:x="119222" fg:w="375"/><text x="96.5933%" y="351.50"></text></g><g><title>event_listener::Inner::lock (196 samples, 0.16%)</title><rect x="96.4880%" y="325" width="0.1584%" height="15" fill="rgb(212,103,13)" fg:x="119401" fg:w="196"/><text x="96.7380%" y="335.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (194 samples, 0.16%)</title><rect x="96.4896%" y="309" width="0.1568%" height="15" fill="rgb(231,171,36)" fg:x="119403" fg:w="194"/><text x="96.7396%" y="319.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (192 samples, 0.16%)</title><rect x="96.4912%" y="293" width="0.1552%" height="15" fill="rgb(250,123,20)" fg:x="119405" fg:w="192"/><text x="96.7412%" y="303.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (158 samples, 0.13%)</title><rect x="96.5187%" y="277" width="0.1277%" height="15" fill="rgb(212,53,50)" fg:x="119439" fg:w="158"/><text x="96.7687%" y="287.50"></text></g><g><title>__GI___pthread_mutex_lock (158 samples, 0.13%)</title><rect x="96.5187%" y="261" width="0.1277%" height="15" fill="rgb(243,54,12)" fg:x="119439" fg:w="158"/><text x="96.7687%" y="271.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,341 samples, 1.08%)</title><rect x="95.6573%" y="405" width="1.0837%" height="15" fill="rgb(234,101,34)" fg:x="118373" fg:w="1341"/><text x="95.9073%" y="415.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,338 samples, 1.08%)</title><rect x="95.6597%" y="389" width="1.0812%" height="15" fill="rgb(254,67,22)" fg:x="118376" fg:w="1338"/><text x="95.9097%" y="399.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}} (545 samples, 0.44%)</title><rect x="96.3005%" y="373" width="0.4404%" height="15" fill="rgb(250,35,47)" fg:x="119169" fg:w="545"/><text x="96.5505%" y="383.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (515 samples, 0.42%)</title><rect x="96.3248%" y="357" width="0.4162%" height="15" fill="rgb(226,126,38)" fg:x="119199" fg:w="515"/><text x="96.5748%" y="367.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (117 samples, 0.09%)</title><rect x="96.6464%" y="341" width="0.0945%" height="15" fill="rgb(216,138,53)" fg:x="119597" fg:w="117"/><text x="96.8964%" y="351.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (117 samples, 0.09%)</title><rect x="96.6464%" y="325" width="0.0945%" height="15" fill="rgb(246,199,43)" fg:x="119597" fg:w="117"/><text x="96.8964%" y="335.50"></text></g><g><title>concurrent_queue::single::Single&lt;T&gt;::pop (72 samples, 0.06%)</title><rect x="96.6827%" y="309" width="0.0582%" height="15" fill="rgb(232,125,11)" fg:x="119642" fg:w="72"/><text x="96.9327%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (69 samples, 0.06%)</title><rect x="96.6852%" y="293" width="0.0558%" height="15" fill="rgb(218,219,45)" fg:x="119645" fg:w="69"/><text x="96.9352%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (69 samples, 0.06%)</title><rect x="96.6852%" y="277" width="0.0558%" height="15" fill="rgb(216,102,54)" fg:x="119645" fg:w="69"/><text x="96.9352%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (69 samples, 0.06%)</title><rect x="96.6852%" y="261" width="0.0558%" height="15" fill="rgb(250,228,7)" fg:x="119645" fg:w="69"/><text x="96.9352%" y="271.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (14,545 samples, 11.75%)</title><rect x="84.9928%" y="485" width="11.7538%" height="15" fill="rgb(226,125,25)" fg:x="105176" fg:w="14545"/><text x="85.2428%" y="495.50">&lt;futures_lite::fu..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14,480 samples, 11.70%)</title><rect x="85.0453%" y="469" width="11.7013%" height="15" fill="rgb(224,165,27)" fg:x="105241" fg:w="14480"/><text x="85.2953%" y="479.50">&lt;core::future::fr..</text></g><g><title>async_executor::LocalExecutor::run::{{closure}} (1,438 samples, 1.16%)</title><rect x="95.5845%" y="453" width="1.1620%" height="15" fill="rgb(233,86,3)" fg:x="118283" fg:w="1438"/><text x="95.8345%" y="463.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,359 samples, 1.10%)</title><rect x="95.6484%" y="437" width="1.0982%" height="15" fill="rgb(228,116,20)" fg:x="118362" fg:w="1359"/><text x="95.8984%" y="447.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (1,359 samples, 1.10%)</title><rect x="95.6484%" y="421" width="1.0982%" height="15" fill="rgb(209,192,17)" fg:x="118362" fg:w="1359"/><text x="95.8984%" y="431.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (17 samples, 0.01%)</title><rect x="96.7474%" y="405" width="0.0137%" height="15" fill="rgb(224,88,34)" fg:x="119722" fg:w="17"/><text x="96.9974%" y="415.50"></text></g><g><title>once_cell::imp::initialize_or_wait (17 samples, 0.01%)</title><rect x="96.7474%" y="389" width="0.0137%" height="15" fill="rgb(233,38,6)" fg:x="119722" fg:w="17"/><text x="96.9974%" y="399.50"></text></g><g><title>once_cell::imp::wait (17 samples, 0.01%)</title><rect x="96.7474%" y="373" width="0.0137%" height="15" fill="rgb(212,59,30)" fg:x="119722" fg:w="17"/><text x="96.9974%" y="383.50"></text></g><g><title>std::thread::park (17 samples, 0.01%)</title><rect x="96.7474%" y="357" width="0.0137%" height="15" fill="rgb(213,80,3)" fg:x="119722" fg:w="17"/><text x="96.9974%" y="367.50"></text></g><g><title>std::sys_common::thread_parker::futex::Parker::park (17 samples, 0.01%)</title><rect x="96.7474%" y="341" width="0.0137%" height="15" fill="rgb(251,178,7)" fg:x="119722" fg:w="17"/><text x="96.9974%" y="351.50"></text></g><g><title>std::sys::unix::futex::futex_wait (15 samples, 0.01%)</title><rect x="96.7490%" y="325" width="0.0121%" height="15" fill="rgb(213,154,26)" fg:x="119724" fg:w="15"/><text x="96.9990%" y="335.50"></text></g><g><title>syscall (15 samples, 0.01%)</title><rect x="96.7490%" y="309" width="0.0121%" height="15" fill="rgb(238,165,49)" fg:x="119724" fg:w="15"/><text x="96.9990%" y="319.50"></text></g><g><title>async_io::reactor::Reactor::get (23 samples, 0.02%)</title><rect x="96.7474%" y="485" width="0.0186%" height="15" fill="rgb(248,91,46)" fg:x="119722" fg:w="23"/><text x="96.9974%" y="495.50"></text></g><g><title>&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (23 samples, 0.02%)</title><rect x="96.7474%" y="469" width="0.0186%" height="15" fill="rgb(244,21,52)" fg:x="119722" fg:w="23"/><text x="96.9974%" y="479.50"></text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (23 samples, 0.02%)</title><rect x="96.7474%" y="453" width="0.0186%" height="15" fill="rgb(247,122,20)" fg:x="119722" fg:w="23"/><text x="96.9974%" y="463.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (23 samples, 0.02%)</title><rect x="96.7474%" y="437" width="0.0186%" height="15" fill="rgb(218,27,9)" fg:x="119722" fg:w="23"/><text x="96.9974%" y="447.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (23 samples, 0.02%)</title><rect x="96.7474%" y="421" width="0.0186%" height="15" fill="rgb(246,7,6)" fg:x="119722" fg:w="23"/><text x="96.9974%" y="431.50"></text></g><g><title>async_io::reactor::Reactor::try_lock (283 samples, 0.23%)</title><rect x="96.7660%" y="485" width="0.2287%" height="15" fill="rgb(227,135,54)" fg:x="119745" fg:w="283"/><text x="97.0160%" y="495.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (282 samples, 0.23%)</title><rect x="96.7668%" y="469" width="0.2279%" height="15" fill="rgb(247,14,11)" fg:x="119746" fg:w="282"/><text x="97.0168%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (273 samples, 0.22%)</title><rect x="96.7741%" y="453" width="0.2206%" height="15" fill="rgb(206,149,34)" fg:x="119755" fg:w="273"/><text x="97.0241%" y="463.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::try_lock (243 samples, 0.20%)</title><rect x="96.7983%" y="437" width="0.1964%" height="15" fill="rgb(227,228,4)" fg:x="119785" fg:w="243"/><text x="97.0483%" y="447.50"></text></g><g><title>__GI___pthread_mutex_trylock (243 samples, 0.20%)</title><rect x="96.7983%" y="421" width="0.1964%" height="15" fill="rgb(238,218,28)" fg:x="119785" fg:w="243"/><text x="97.0483%" y="431.50"></text></g><g><title>sn_rust_dealloc (31 samples, 0.03%)</title><rect x="97.0318%" y="309" width="0.0251%" height="15" fill="rgb(252,86,40)" fg:x="120074" fg:w="31"/><text x="97.2818%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (42 samples, 0.03%)</title><rect x="97.0286%" y="373" width="0.0339%" height="15" fill="rgb(251,225,11)" fg:x="120070" fg:w="42"/><text x="97.2786%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (42 samples, 0.03%)</title><rect x="97.0286%" y="357" width="0.0339%" height="15" fill="rgb(206,46,49)" fg:x="120070" fg:w="42"/><text x="97.2786%" y="367.50"></text></g><g><title>__rg_dealloc (42 samples, 0.03%)</title><rect x="97.0286%" y="341" width="0.0339%" height="15" fill="rgb(245,128,24)" fg:x="120070" fg:w="42"/><text x="97.2786%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (42 samples, 0.03%)</title><rect x="97.0286%" y="325" width="0.0339%" height="15" fill="rgb(219,177,34)" fg:x="120070" fg:w="42"/><text x="97.2786%" y="335.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (45 samples, 0.04%)</title><rect x="97.0270%" y="405" width="0.0364%" height="15" fill="rgb(218,60,48)" fg:x="120068" fg:w="45"/><text x="97.2770%" y="415.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (44 samples, 0.04%)</title><rect x="97.0278%" y="389" width="0.0356%" height="15" fill="rgb(221,11,5)" fg:x="120069" fg:w="44"/><text x="97.2778%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (51 samples, 0.04%)</title><rect x="97.0254%" y="453" width="0.0412%" height="15" fill="rgb(220,148,13)" fg:x="120066" fg:w="51"/><text x="97.2754%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V&gt;::dying_next (49 samples, 0.04%)</title><rect x="97.0270%" y="437" width="0.0396%" height="15" fill="rgb(210,16,3)" fg:x="120068" fg:w="49"/><text x="97.2770%" y="447.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (49 samples, 0.04%)</title><rect x="97.0270%" y="421" width="0.0396%" height="15" fill="rgb(236,80,2)" fg:x="120068" fg:w="49"/><text x="97.2770%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.02%)</title><rect x="97.0666%" y="437" width="0.0162%" height="15" fill="rgb(239,129,19)" fg:x="120117" fg:w="20"/><text x="97.3166%" y="447.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Immut,K,V&gt;::next_unchecked (17 samples, 0.01%)</title><rect x="97.0690%" y="421" width="0.0137%" height="15" fill="rgb(220,106,35)" fg:x="120120" fg:w="17"/><text x="97.3190%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.02%)</title><rect x="97.0666%" y="453" width="0.0170%" height="15" fill="rgb(252,139,45)" fg:x="120117" fg:w="21"/><text x="97.3166%" y="463.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::Edge&gt;::move_suffix (34 samples, 0.03%)</title><rect x="97.1102%" y="421" width="0.0275%" height="15" fill="rgb(229,8,36)" fg:x="120171" fg:w="34"/><text x="97.3602%" y="431.50"></text></g><g><title>alloc::collections::btree::node::move_to_slice (29 samples, 0.02%)</title><rect x="97.1143%" y="405" width="0.0234%" height="15" fill="rgb(230,126,33)" fg:x="120176" fg:w="29"/><text x="97.3643%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (29 samples, 0.02%)</title><rect x="97.1143%" y="389" width="0.0234%" height="15" fill="rgb(239,140,21)" fg:x="120176" fg:w="29"/><text x="97.3643%" y="399.50"></text></g><g><title>[libc-2.31.so] (26 samples, 0.02%)</title><rect x="97.1167%" y="373" width="0.0210%" height="15" fill="rgb(254,104,9)" fg:x="120179" fg:w="26"/><text x="97.3667%" y="383.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (20 samples, 0.02%)</title><rect x="97.1426%" y="389" width="0.0162%" height="15" fill="rgb(239,52,14)" fg:x="120211" fg:w="20"/><text x="97.3926%" y="399.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (33 samples, 0.03%)</title><rect x="97.1393%" y="421" width="0.0267%" height="15" fill="rgb(208,227,44)" fg:x="120207" fg:w="33"/><text x="97.3893%" y="431.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (33 samples, 0.03%)</title><rect x="97.1393%" y="405" width="0.0267%" height="15" fill="rgb(246,18,19)" fg:x="120207" fg:w="33"/><text x="97.3893%" y="415.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (65 samples, 0.05%)</title><rect x="97.2201%" y="213" width="0.0525%" height="15" fill="rgb(235,228,25)" fg:x="120307" fg:w="65"/><text x="97.4701%" y="223.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (133 samples, 0.11%)</title><rect x="97.1660%" y="405" width="0.1075%" height="15" fill="rgb(240,156,20)" fg:x="120240" fg:w="133"/><text x="97.4160%" y="415.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (133 samples, 0.11%)</title><rect x="97.1660%" y="389" width="0.1075%" height="15" fill="rgb(224,8,20)" fg:x="120240" fg:w="133"/><text x="97.4160%" y="399.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (133 samples, 0.11%)</title><rect x="97.1660%" y="373" width="0.1075%" height="15" fill="rgb(214,12,52)" fg:x="120240" fg:w="133"/><text x="97.4160%" y="383.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new_uninit (133 samples, 0.11%)</title><rect x="97.1660%" y="357" width="0.1075%" height="15" fill="rgb(211,220,47)" fg:x="120240" fg:w="133"/><text x="97.4160%" y="367.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (133 samples, 0.11%)</title><rect x="97.1660%" y="341" width="0.1075%" height="15" fill="rgb(250,173,5)" fg:x="120240" fg:w="133"/><text x="97.4160%" y="351.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (133 samples, 0.11%)</title><rect x="97.1660%" y="325" width="0.1075%" height="15" fill="rgb(250,125,52)" fg:x="120240" fg:w="133"/><text x="97.4160%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (133 samples, 0.11%)</title><rect x="97.1660%" y="309" width="0.1075%" height="15" fill="rgb(209,133,18)" fg:x="120240" fg:w="133"/><text x="97.4160%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (133 samples, 0.11%)</title><rect x="97.1660%" y="293" width="0.1075%" height="15" fill="rgb(216,173,22)" fg:x="120240" fg:w="133"/><text x="97.4160%" y="303.50"></text></g><g><title>alloc::alloc::alloc (130 samples, 0.11%)</title><rect x="97.1684%" y="277" width="0.1051%" height="15" fill="rgb(205,3,22)" fg:x="120243" fg:w="130"/><text x="97.4184%" y="287.50"></text></g><g><title>__rg_alloc (130 samples, 0.11%)</title><rect x="97.1684%" y="261" width="0.1051%" height="15" fill="rgb(248,22,20)" fg:x="120243" fg:w="130"/><text x="97.4184%" y="271.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (130 samples, 0.11%)</title><rect x="97.1684%" y="245" width="0.1051%" height="15" fill="rgb(233,6,29)" fg:x="120243" fg:w="130"/><text x="97.4184%" y="255.50"></text></g><g><title>sn_rust_alloc (129 samples, 0.10%)</title><rect x="97.1692%" y="229" width="0.1042%" height="15" fill="rgb(240,22,54)" fg:x="120244" fg:w="129"/><text x="97.4192%" y="239.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::split_off (217 samples, 0.18%)</title><rect x="97.0989%" y="437" width="0.1754%" height="15" fill="rgb(231,133,32)" fg:x="120157" fg:w="217"/><text x="97.3489%" y="447.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::new_pillar (134 samples, 0.11%)</title><rect x="97.1660%" y="421" width="0.1083%" height="15" fill="rgb(248,193,4)" fg:x="120240" fg:w="134"/><text x="97.4160%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::split_off (231 samples, 0.19%)</title><rect x="97.0892%" y="453" width="0.1867%" height="15" fill="rgb(211,178,46)" fg:x="120145" fg:w="231"/><text x="97.3392%" y="463.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::capacity (17 samples, 0.01%)</title><rect x="97.2799%" y="437" width="0.0137%" height="15" fill="rgb(224,5,42)" fg:x="120381" fg:w="17"/><text x="97.5299%" y="447.50"></text></g><g><title>concurrent_queue::full_fence (21 samples, 0.02%)</title><rect x="97.3058%" y="405" width="0.0170%" height="15" fill="rgb(239,176,25)" fg:x="120413" fg:w="21"/><text x="97.5558%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (21 samples, 0.02%)</title><rect x="97.3058%" y="389" width="0.0170%" height="15" fill="rgb(245,187,50)" fg:x="120413" fg:w="21"/><text x="97.5558%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (21 samples, 0.02%)</title><rect x="97.3058%" y="373" width="0.0170%" height="15" fill="rgb(248,24,15)" fg:x="120413" fg:w="21"/><text x="97.5558%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (21 samples, 0.02%)</title><rect x="97.3058%" y="357" width="0.0170%" height="15" fill="rgb(205,166,13)" fg:x="120413" fg:w="21"/><text x="97.5558%" y="367.50"></text></g><g><title>async_io::reactor::Reactor::process_timer_ops (80 samples, 0.06%)</title><rect x="97.2759%" y="453" width="0.0646%" height="15" fill="rgb(208,114,23)" fg:x="120376" fg:w="80"/><text x="97.5259%" y="463.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (58 samples, 0.05%)</title><rect x="97.2937%" y="437" width="0.0469%" height="15" fill="rgb(239,127,18)" fg:x="120398" fg:w="58"/><text x="97.5437%" y="447.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (57 samples, 0.05%)</title><rect x="97.2945%" y="421" width="0.0461%" height="15" fill="rgb(219,154,28)" fg:x="120399" fg:w="57"/><text x="97.5445%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (22 samples, 0.02%)</title><rect x="97.3228%" y="405" width="0.0178%" height="15" fill="rgb(225,157,23)" fg:x="120434" fg:w="22"/><text x="97.5728%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (22 samples, 0.02%)</title><rect x="97.3228%" y="389" width="0.0178%" height="15" fill="rgb(219,8,6)" fg:x="120434" fg:w="22"/><text x="97.5728%" y="399.50"></text></g><g><title>core::mem::drop (139 samples, 0.11%)</title><rect x="97.3405%" y="453" width="0.1123%" height="15" fill="rgb(212,47,6)" fg:x="120456" fg:w="139"/><text x="97.5905%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::collections::btree::map::BTreeMap&lt;(std::time::Instant,usize),core::task::wake::Waker&gt;&gt;&gt; (139 samples, 0.11%)</title><rect x="97.3405%" y="437" width="0.1123%" height="15" fill="rgb(224,190,4)" fg:x="120456" fg:w="139"/><text x="97.5905%" y="447.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (139 samples, 0.11%)</title><rect x="97.3405%" y="421" width="0.1123%" height="15" fill="rgb(239,183,29)" fg:x="120456" fg:w="139"/><text x="97.5905%" y="431.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (133 samples, 0.11%)</title><rect x="97.3454%" y="405" width="0.1075%" height="15" fill="rgb(213,57,7)" fg:x="120462" fg:w="133"/><text x="97.5954%" y="415.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (118 samples, 0.10%)</title><rect x="97.3575%" y="389" width="0.0954%" height="15" fill="rgb(216,148,1)" fg:x="120477" fg:w="118"/><text x="97.6075%" y="399.50"></text></g><g><title>__GI___pthread_mutex_unlock (118 samples, 0.10%)</title><rect x="97.3575%" y="373" width="0.0954%" height="15" fill="rgb(236,182,29)" fg:x="120477" fg:w="118"/><text x="97.6075%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (19 samples, 0.02%)</title><rect x="97.4537%" y="453" width="0.0154%" height="15" fill="rgb(244,120,48)" fg:x="120596" fg:w="19"/><text x="97.7037%" y="463.50"></text></g><g><title>async_io::reactor::Reactor::process_timers::{{closure}} (16 samples, 0.01%)</title><rect x="97.4561%" y="437" width="0.0129%" height="15" fill="rgb(206,71,34)" fg:x="120599" fg:w="16"/><text x="97.7061%" y="447.50"></text></g><g><title>std::time::Instant::duration_since (16 samples, 0.01%)</title><rect x="97.4561%" y="421" width="0.0129%" height="15" fill="rgb(242,32,6)" fg:x="120599" fg:w="16"/><text x="97.7061%" y="431.50"></text></g><g><title>std::time::Instant::checked_duration_since (16 samples, 0.01%)</title><rect x="97.4561%" y="405" width="0.0129%" height="15" fill="rgb(241,35,3)" fg:x="120599" fg:w="16"/><text x="97.7061%" y="415.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (16 samples, 0.01%)</title><rect x="97.4561%" y="389" width="0.0129%" height="15" fill="rgb(222,62,19)" fg:x="120599" fg:w="16"/><text x="97.7061%" y="399.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (15 samples, 0.01%)</title><rect x="97.4569%" y="373" width="0.0121%" height="15" fill="rgb(223,110,41)" fg:x="120600" fg:w="15"/><text x="97.7069%" y="383.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (63 samples, 0.05%)</title><rect x="97.4739%" y="453" width="0.0509%" height="15" fill="rgb(208,224,4)" fg:x="120621" fg:w="63"/><text x="97.7239%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (63 samples, 0.05%)</title><rect x="97.4739%" y="437" width="0.0509%" height="15" fill="rgb(241,137,19)" fg:x="120621" fg:w="63"/><text x="97.7239%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (63 samples, 0.05%)</title><rect x="97.4739%" y="421" width="0.0509%" height="15" fill="rgb(244,24,17)" fg:x="120621" fg:w="63"/><text x="97.7239%" y="431.50"></text></g><g><title>__GI___pthread_mutex_lock (63 samples, 0.05%)</title><rect x="97.4739%" y="405" width="0.0509%" height="15" fill="rgb(245,178,49)" fg:x="120621" fg:w="63"/><text x="97.7239%" y="415.50"></text></g><g><title>async_io::reactor::Reactor::process_timers (710 samples, 0.57%)</title><rect x="97.0133%" y="469" width="0.5738%" height="15" fill="rgb(219,160,38)" fg:x="120051" fg:w="710"/><text x="97.2633%" y="479.50"></text></g><g><title>std::time::Instant::now (77 samples, 0.06%)</title><rect x="97.5248%" y="453" width="0.0622%" height="15" fill="rgb(228,137,14)" fg:x="120684" fg:w="77"/><text x="97.7748%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (77 samples, 0.06%)</title><rect x="97.5248%" y="437" width="0.0622%" height="15" fill="rgb(237,134,11)" fg:x="120684" fg:w="77"/><text x="97.7748%" y="447.50"></text></g><g><title>std::sys::unix::time::inner::now (77 samples, 0.06%)</title><rect x="97.5248%" y="421" width="0.0622%" height="15" fill="rgb(211,126,44)" fg:x="120684" fg:w="77"/><text x="97.7748%" y="431.50"></text></g><g><title>__clock_gettime (74 samples, 0.06%)</title><rect x="97.5272%" y="405" width="0.0598%" height="15" fill="rgb(226,171,33)" fg:x="120687" fg:w="74"/><text x="97.7772%" y="415.50"></text></g><g><title>__vdso_clock_gettime (58 samples, 0.05%)</title><rect x="97.5401%" y="389" width="0.0469%" height="15" fill="rgb(253,99,13)" fg:x="120703" fg:w="58"/><text x="97.7901%" y="399.50"></text></g><g><title>[[vdso]] (54 samples, 0.04%)</title><rect x="97.5434%" y="373" width="0.0436%" height="15" fill="rgb(244,48,7)" fg:x="120707" fg:w="54"/><text x="97.7934%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (33 samples, 0.03%)</title><rect x="97.5911%" y="469" width="0.0267%" height="15" fill="rgb(244,217,54)" fg:x="120766" fg:w="33"/><text x="97.8411%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_add (33 samples, 0.03%)</title><rect x="97.5911%" y="453" width="0.0267%" height="15" fill="rgb(224,15,18)" fg:x="120766" fg:w="33"/><text x="97.8411%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;polling::epoll::Events&gt;&gt; (106 samples, 0.09%)</title><rect x="97.6533%" y="453" width="0.0857%" height="15" fill="rgb(244,99,12)" fg:x="120843" fg:w="106"/><text x="97.9033%" y="463.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (106 samples, 0.09%)</title><rect x="97.6533%" y="437" width="0.0857%" height="15" fill="rgb(233,226,8)" fg:x="120843" fg:w="106"/><text x="97.9033%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (104 samples, 0.08%)</title><rect x="97.6549%" y="421" width="0.0840%" height="15" fill="rgb(229,211,3)" fg:x="120845" fg:w="104"/><text x="97.9049%" y="431.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (102 samples, 0.08%)</title><rect x="97.6565%" y="405" width="0.0824%" height="15" fill="rgb(216,140,21)" fg:x="120847" fg:w="102"/><text x="97.9065%" y="415.50"></text></g><g><title>__GI___pthread_mutex_unlock (102 samples, 0.08%)</title><rect x="97.6565%" y="389" width="0.0824%" height="15" fill="rgb(234,122,30)" fg:x="120847" fg:w="102"/><text x="97.9065%" y="399.50"></text></g><g><title>__pthread_disable_asynccancel (18 samples, 0.01%)</title><rect x="97.8666%" y="421" width="0.0145%" height="15" fill="rgb(236,25,46)" fg:x="121107" fg:w="18"/><text x="98.1166%" y="431.50"></text></g><g><title>__libc_read (117 samples, 0.09%)</title><rect x="97.8319%" y="437" width="0.0945%" height="15" fill="rgb(217,52,54)" fg:x="121064" fg:w="117"/><text x="98.0819%" y="447.50"></text></g><g><title>__pthread_enable_asynccancel (56 samples, 0.05%)</title><rect x="97.8812%" y="421" width="0.0453%" height="15" fill="rgb(222,29,26)" fg:x="121125" fg:w="56"/><text x="98.1312%" y="431.50"></text></g><g><title>epoll_wait (181 samples, 0.15%)</title><rect x="97.9264%" y="437" width="0.1463%" height="15" fill="rgb(216,177,29)" fg:x="121181" fg:w="181"/><text x="98.1764%" y="447.50"></text></g><g><title>[libc-2.31.so] (57 samples, 0.05%)</title><rect x="98.0266%" y="421" width="0.0461%" height="15" fill="rgb(247,136,51)" fg:x="121305" fg:w="57"/><text x="98.2766%" y="431.50"></text></g><g><title>polling::epoll::Poller::modify (103 samples, 0.08%)</title><rect x="98.0759%" y="437" width="0.0832%" height="15" fill="rgb(231,47,47)" fg:x="121366" fg:w="103"/><text x="98.3259%" y="447.50"></text></g><g><title>polling::epoll::Poller::ctl (90 samples, 0.07%)</title><rect x="98.0864%" y="421" width="0.0727%" height="15" fill="rgb(211,192,36)" fg:x="121379" fg:w="90"/><text x="98.3364%" y="431.50"></text></g><g><title>epoll_ctl (80 samples, 0.06%)</title><rect x="98.0945%" y="405" width="0.0646%" height="15" fill="rgb(229,156,32)" fg:x="121389" fg:w="80"/><text x="98.3445%" y="415.50"></text></g><g><title>polling::epoll::Poller::wait (556 samples, 0.45%)</title><rect x="97.7478%" y="453" width="0.4493%" height="15" fill="rgb(248,213,20)" fg:x="120960" fg:w="556"/><text x="97.9978%" y="463.50"></text></g><g><title>syscall (45 samples, 0.04%)</title><rect x="98.1608%" y="437" width="0.0364%" height="15" fill="rgb(217,64,7)" fg:x="121471" fg:w="45"/><text x="98.4108%" y="447.50"></text></g><g><title>async_io::reactor::ReactorLock::react (1,525 samples, 1.23%)</title><rect x="96.9947%" y="485" width="1.2324%" height="15" fill="rgb(232,142,8)" fg:x="120028" fg:w="1525"/><text x="97.2447%" y="495.50"></text></g><g><title>polling::Poller::wait (754 samples, 0.61%)</title><rect x="97.6177%" y="469" width="0.6093%" height="15" fill="rgb(224,92,44)" fg:x="120799" fg:w="754"/><text x="97.8677%" y="479.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (37 samples, 0.03%)</title><rect x="98.1971%" y="453" width="0.0299%" height="15" fill="rgb(214,169,17)" fg:x="121516" fg:w="37"/><text x="98.4471%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (30 samples, 0.02%)</title><rect x="98.2028%" y="437" width="0.0242%" height="15" fill="rgb(210,59,37)" fg:x="121523" fg:w="30"/><text x="98.4528%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::try_lock (30 samples, 0.02%)</title><rect x="98.2028%" y="421" width="0.0242%" height="15" fill="rgb(214,116,48)" fg:x="121523" fg:w="30"/><text x="98.4528%" y="431.50"></text></g><g><title>__GI___pthread_mutex_trylock (30 samples, 0.02%)</title><rect x="98.2028%" y="405" width="0.0242%" height="15" fill="rgb(244,191,6)" fg:x="121523" fg:w="30"/><text x="98.4528%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (21 samples, 0.02%)</title><rect x="98.2270%" y="437" width="0.0170%" height="15" fill="rgb(241,50,52)" fg:x="121553" fg:w="21"/><text x="98.4770%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_store (21 samples, 0.02%)</title><rect x="98.2270%" y="421" width="0.0170%" height="15" fill="rgb(236,75,39)" fg:x="121553" fg:w="21"/><text x="98.4770%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_io::driver::CallOnDrop&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (29 samples, 0.02%)</title><rect x="98.2270%" y="485" width="0.0234%" height="15" fill="rgb(236,99,0)" fg:x="121553" fg:w="29"/><text x="98.4770%" y="495.50"></text></g><g><title>&lt;async_io::driver::CallOnDrop&lt;F&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.02%)</title><rect x="98.2270%" y="469" width="0.0234%" height="15" fill="rgb(207,202,15)" fg:x="121553" fg:w="29"/><text x="98.4770%" y="479.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (29 samples, 0.02%)</title><rect x="98.2270%" y="453" width="0.0234%" height="15" fill="rgb(233,207,14)" fg:x="121553" fg:w="29"/><text x="98.4770%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_io::reactor::ReactorLock&gt; (34 samples, 0.03%)</title><rect x="98.2505%" y="485" width="0.0275%" height="15" fill="rgb(226,27,51)" fg:x="121582" fg:w="34"/><text x="98.5005%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::vec::Vec&lt;polling::Event&gt;&gt;&gt; (34 samples, 0.03%)</title><rect x="98.2505%" y="469" width="0.0275%" height="15" fill="rgb(206,104,42)" fg:x="121582" fg:w="34"/><text x="98.5005%" y="479.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 0.03%)</title><rect x="98.2505%" y="453" width="0.0275%" height="15" fill="rgb(212,225,4)" fg:x="121582" fg:w="34"/><text x="98.5005%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (33 samples, 0.03%)</title><rect x="98.2513%" y="437" width="0.0267%" height="15" fill="rgb(233,96,42)" fg:x="121583" fg:w="33"/><text x="98.5013%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (33 samples, 0.03%)</title><rect x="98.2513%" y="421" width="0.0267%" height="15" fill="rgb(229,21,32)" fg:x="121583" fg:w="33"/><text x="98.5013%" y="431.50"></text></g><g><title>__GI___pthread_mutex_unlock (33 samples, 0.03%)</title><rect x="98.2513%" y="405" width="0.0267%" height="15" fill="rgb(226,216,24)" fg:x="121583" fg:w="33"/><text x="98.5013%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (15 samples, 0.01%)</title><rect x="98.2796%" y="485" width="0.0121%" height="15" fill="rgb(221,163,17)" fg:x="121618" fg:w="15"/><text x="98.5296%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_store (15 samples, 0.01%)</title><rect x="98.2796%" y="469" width="0.0121%" height="15" fill="rgb(216,216,42)" fg:x="121618" fg:w="15"/><text x="98.5296%" y="479.50"></text></g><g><title>log::max_level (24 samples, 0.02%)</title><rect x="98.2917%" y="485" width="0.0194%" height="15" fill="rgb(240,118,7)" fg:x="121633" fg:w="24"/><text x="98.5417%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (24 samples, 0.02%)</title><rect x="98.2917%" y="469" width="0.0194%" height="15" fill="rgb(221,67,37)" fg:x="121633" fg:w="24"/><text x="98.5417%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_load (24 samples, 0.02%)</title><rect x="98.2917%" y="453" width="0.0194%" height="15" fill="rgb(241,32,44)" fg:x="121633" fg:w="24"/><text x="98.5417%" y="463.50"></text></g><g><title>__GI___pthread_mutex_unlock (110 samples, 0.09%)</title><rect x="98.3256%" y="453" width="0.0889%" height="15" fill="rgb(235,204,43)" fg:x="121675" fg:w="110"/><text x="98.5756%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (143 samples, 0.12%)</title><rect x="98.4145%" y="453" width="0.1156%" height="15" fill="rgb(213,116,10)" fg:x="121785" fg:w="143"/><text x="98.6645%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (143 samples, 0.12%)</title><rect x="98.4145%" y="437" width="0.1156%" height="15" fill="rgb(239,15,48)" fg:x="121785" fg:w="143"/><text x="98.6645%" y="447.50"></text></g><g><title>std::sync::poison::Flag::get (76 samples, 0.06%)</title><rect x="98.5301%" y="437" width="0.0614%" height="15" fill="rgb(207,123,36)" fg:x="121928" fg:w="76"/><text x="98.7801%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (76 samples, 0.06%)</title><rect x="98.5301%" y="421" width="0.0614%" height="15" fill="rgb(209,103,30)" fg:x="121928" fg:w="76"/><text x="98.7801%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (76 samples, 0.06%)</title><rect x="98.5301%" y="405" width="0.0614%" height="15" fill="rgb(238,100,19)" fg:x="121928" fg:w="76"/><text x="98.7801%" y="415.50"></text></g><g><title>__pthread_cleanup_push (15 samples, 0.01%)</title><rect x="99.1256%" y="389" width="0.0121%" height="15" fill="rgb(244,30,14)" fg:x="122665" fg:w="15"/><text x="99.3756%" y="399.50"></text></g><g><title>__pthread_disable_asynccancel (62 samples, 0.05%)</title><rect x="99.1378%" y="389" width="0.0501%" height="15" fill="rgb(249,174,6)" fg:x="122680" fg:w="62"/><text x="99.3878%" y="399.50"></text></g><g><title>__pthread_enable_asynccancel (42 samples, 0.03%)</title><rect x="99.1879%" y="389" width="0.0339%" height="15" fill="rgb(235,213,41)" fg:x="122742" fg:w="42"/><text x="99.4379%" y="399.50"></text></g><g><title>__pthread_mutex_cond_lock (72 samples, 0.06%)</title><rect x="99.2218%" y="389" width="0.0582%" height="15" fill="rgb(213,118,6)" fg:x="122784" fg:w="72"/><text x="99.4718%" y="399.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::wait (878 samples, 0.71%)</title><rect x="98.5915%" y="421" width="0.7095%" height="15" fill="rgb(235,44,51)" fg:x="122004" fg:w="878"/><text x="98.8415%" y="431.50"></text></g><g><title>__pthread_cond_wait (878 samples, 0.71%)</title><rect x="98.5915%" y="405" width="0.7095%" height="15" fill="rgb(217,9,53)" fg:x="122004" fg:w="878"/><text x="98.8415%" y="415.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (26 samples, 0.02%)</title><rect x="99.2800%" y="389" width="0.0210%" height="15" fill="rgb(237,172,34)" fg:x="122856" fg:w="26"/><text x="99.5300%" y="399.50"></text></g><g><title>std::sync::condvar::Condvar::wait (977 samples, 0.79%)</title><rect x="98.5301%" y="453" width="0.7895%" height="15" fill="rgb(206,206,11)" fg:x="121928" fg:w="977"/><text x="98.7801%" y="463.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (901 samples, 0.73%)</title><rect x="98.5915%" y="437" width="0.7281%" height="15" fill="rgb(214,149,29)" fg:x="122004" fg:w="901"/><text x="98.8415%" y="447.50"></text></g><g><title>std::sys_common::condvar::check::SameMutexCheck::verify (23 samples, 0.02%)</title><rect x="99.3010%" y="421" width="0.0186%" height="15" fill="rgb(208,123,3)" fg:x="122882" fg:w="23"/><text x="99.5510%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::compare_exchange (22 samples, 0.02%)</title><rect x="99.3018%" y="405" width="0.0178%" height="15" fill="rgb(229,126,4)" fg:x="122883" fg:w="22"/><text x="99.5518%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (22 samples, 0.02%)</title><rect x="99.3018%" y="389" width="0.0178%" height="15" fill="rgb(222,92,36)" fg:x="122883" fg:w="22"/><text x="99.5518%" y="399.50"></text></g><g><title>parking::Parker::park (1,311 samples, 1.06%)</title><rect x="98.3111%" y="485" width="1.0594%" height="15" fill="rgb(216,39,41)" fg:x="121657" fg:w="1311"/><text x="98.5611%" y="495.50"></text></g><g><title>parking::Inner::park (1,307 samples, 1.06%)</title><rect x="98.3143%" y="469" width="1.0562%" height="15" fill="rgb(253,127,28)" fg:x="121661" fg:w="1307"/><text x="98.5643%" y="479.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (63 samples, 0.05%)</title><rect x="99.3196%" y="453" width="0.0509%" height="15" fill="rgb(249,152,51)" fg:x="122905" fg:w="63"/><text x="99.5696%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (61 samples, 0.05%)</title><rect x="99.3212%" y="437" width="0.0493%" height="15" fill="rgb(209,123,42)" fg:x="122907" fg:w="61"/><text x="99.5712%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (61 samples, 0.05%)</title><rect x="99.3212%" y="421" width="0.0493%" height="15" fill="rgb(241,118,22)" fg:x="122907" fg:w="61"/><text x="99.5712%" y="431.50"></text></g><g><title>__GI___pthread_mutex_lock (61 samples, 0.05%)</title><rect x="99.3212%" y="405" width="0.0493%" height="15" fill="rgb(208,25,7)" fg:x="122907" fg:w="61"/><text x="99.5712%" y="415.50"></text></g><g><title>parking::Parker::park_timeout (263 samples, 0.21%)</title><rect x="99.3705%" y="485" width="0.2125%" height="15" fill="rgb(243,144,39)" fg:x="122968" fg:w="263"/><text x="99.6205%" y="495.50"></text></g><g><title>parking::Inner::park (201 samples, 0.16%)</title><rect x="99.4206%" y="469" width="0.1624%" height="15" fill="rgb(250,50,5)" fg:x="123030" fg:w="201"/><text x="99.6706%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (189 samples, 0.15%)</title><rect x="99.4303%" y="453" width="0.1527%" height="15" fill="rgb(207,67,11)" fg:x="123042" fg:w="189"/><text x="99.6803%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (189 samples, 0.15%)</title><rect x="99.4303%" y="437" width="0.1527%" height="15" fill="rgb(245,204,40)" fg:x="123042" fg:w="189"/><text x="99.6803%" y="447.50"></text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (18,190 samples, 14.70%)</title><rect x="84.9419%" y="517" width="14.6993%" height="15" fill="rgb(238,228,24)" fg:x="105113" fg:w="18190"/><text x="85.1919%" y="527.50">async_global_executor:..</text></g><g><title>async_io::driver::block_on (18,190 samples, 14.70%)</title><rect x="84.9419%" y="501" width="14.6993%" height="15" fill="rgb(217,116,22)" fg:x="105113" fg:w="18190"/><text x="85.1919%" y="511.50">async_io::driver::bloc..</text></g><g><title>std::time::Instant::now (56 samples, 0.05%)</title><rect x="99.5959%" y="485" width="0.0453%" height="15" fill="rgb(234,98,12)" fg:x="123247" fg:w="56"/><text x="99.8459%" y="495.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (56 samples, 0.05%)</title><rect x="99.5959%" y="469" width="0.0453%" height="15" fill="rgb(242,170,50)" fg:x="123247" fg:w="56"/><text x="99.8459%" y="479.50"></text></g><g><title>std::sys::unix::time::inner::now (56 samples, 0.05%)</title><rect x="99.5959%" y="453" width="0.0453%" height="15" fill="rgb(235,7,5)" fg:x="123247" fg:w="56"/><text x="99.8459%" y="463.50"></text></g><g><title>__clock_gettime (48 samples, 0.04%)</title><rect x="99.6024%" y="437" width="0.0388%" height="15" fill="rgb(241,114,28)" fg:x="123255" fg:w="48"/><text x="99.8524%" y="447.50"></text></g><g><title>__vdso_clock_gettime (36 samples, 0.03%)</title><rect x="99.6121%" y="421" width="0.0291%" height="15" fill="rgb(246,112,42)" fg:x="123267" fg:w="36"/><text x="99.8621%" y="431.50"></text></g><g><title>[[vdso]] (30 samples, 0.02%)</title><rect x="99.6170%" y="405" width="0.0242%" height="15" fill="rgb(248,228,14)" fg:x="123273" fg:w="30"/><text x="99.8670%" y="415.50"></text></g><g><title>std::panic::catch_unwind (18,195 samples, 14.70%)</title><rect x="84.9386%" y="773" width="14.7034%" height="15" fill="rgb(208,133,18)" fg:x="105109" fg:w="18195"/><text x="85.1886%" y="783.50">std::panic::catch_unwi..</text></g><g><title>std::panicking::try (18,195 samples, 14.70%)</title><rect x="84.9386%" y="757" width="14.7034%" height="15" fill="rgb(207,35,49)" fg:x="105109" fg:w="18195"/><text x="85.1886%" y="767.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (18,195 samples, 14.70%)</title><rect x="84.9386%" y="741" width="14.7034%" height="15" fill="rgb(205,68,36)" fg:x="105109" fg:w="18195"/><text x="85.1886%" y="751.50">std::panicking::try::d..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (18,195 samples, 14.70%)</title><rect x="84.9386%" y="725" width="14.7034%" height="15" fill="rgb(245,62,40)" fg:x="105109" fg:w="18195"/><text x="85.1886%" y="735.50">&lt;core::panic::unwind_s..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (18,195 samples, 14.70%)</title><rect x="84.9386%" y="709" width="14.7034%" height="15" fill="rgb(228,27,24)" fg:x="105109" fg:w="18195"/><text x="85.1886%" y="719.50">std::thread::Builder::..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (18,195 samples, 14.70%)</title><rect x="84.9386%" y="693" width="14.7034%" height="15" fill="rgb(253,19,12)" fg:x="105109" fg:w="18195"/><text x="85.1886%" y="703.50">std::sys_common::backt..</text></g><g><title>core::ops::function::FnOnce::call_once (18,195 samples, 14.70%)</title><rect x="84.9386%" y="677" width="14.7034%" height="15" fill="rgb(232,28,20)" fg:x="105109" fg:w="18195"/><text x="85.1886%" y="687.50">core::ops::function::F..</text></g><g><title>async_global_executor::threading::thread_main_loop (18,195 samples, 14.70%)</title><rect x="84.9386%" y="661" width="14.7034%" height="15" fill="rgb(218,35,51)" fg:x="105109" fg:w="18195"/><text x="85.1886%" y="671.50">async_global_executor:..</text></g><g><title>std::panic::catch_unwind (18,191 samples, 14.70%)</title><rect x="84.9419%" y="645" width="14.7002%" height="15" fill="rgb(212,90,40)" fg:x="105113" fg:w="18191"/><text x="85.1919%" y="655.50">std::panic::catch_unwi..</text></g><g><title>std::panicking::try (18,191 samples, 14.70%)</title><rect x="84.9419%" y="629" width="14.7002%" height="15" fill="rgb(220,172,12)" fg:x="105113" fg:w="18191"/><text x="85.1919%" y="639.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (18,191 samples, 14.70%)</title><rect x="84.9419%" y="613" width="14.7002%" height="15" fill="rgb(226,159,20)" fg:x="105113" fg:w="18191"/><text x="85.1919%" y="623.50">std::panicking::try::d..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (18,191 samples, 14.70%)</title><rect x="84.9419%" y="597" width="14.7002%" height="15" fill="rgb(234,205,16)" fg:x="105113" fg:w="18191"/><text x="85.1919%" y="607.50">async_global_executor:..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (18,191 samples, 14.70%)</title><rect x="84.9419%" y="581" width="14.7002%" height="15" fill="rgb(207,9,39)" fg:x="105113" fg:w="18191"/><text x="85.1919%" y="591.50">std::thread::local::Lo..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (18,191 samples, 14.70%)</title><rect x="84.9419%" y="565" width="14.7002%" height="15" fill="rgb(249,143,15)" fg:x="105113" fg:w="18191"/><text x="85.1919%" y="575.50">std::thread::local::Lo..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (18,191 samples, 14.70%)</title><rect x="84.9419%" y="549" width="14.7002%" height="15" fill="rgb(253,133,29)" fg:x="105113" fg:w="18191"/><text x="85.1919%" y="559.50">async_global_executor:..</text></g><g><title>async_global_executor::reactor::block_on (18,191 samples, 14.70%)</title><rect x="84.9419%" y="533" width="14.7002%" height="15" fill="rgb(221,187,0)" fg:x="105113" fg:w="18191"/><text x="85.1919%" y="543.50">async_global_executor:..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (18,201 samples, 14.71%)</title><rect x="84.9386%" y="837" width="14.7082%" height="15" fill="rgb(205,204,26)" fg:x="105109" fg:w="18201"/><text x="85.1886%" y="847.50">&lt;alloc::boxed::Box&lt;F,A..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (18,201 samples, 14.71%)</title><rect x="84.9386%" y="821" width="14.7082%" height="15" fill="rgb(224,68,54)" fg:x="105109" fg:w="18201"/><text x="85.1886%" y="831.50">&lt;alloc::boxed::Box&lt;F,A..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (18,201 samples, 14.71%)</title><rect x="84.9386%" y="805" width="14.7082%" height="15" fill="rgb(209,67,4)" fg:x="105109" fg:w="18201"/><text x="85.1886%" y="815.50">core::ops::function::F..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (18,201 samples, 14.71%)</title><rect x="84.9386%" y="789" width="14.7082%" height="15" fill="rgb(228,229,18)" fg:x="105109" fg:w="18201"/><text x="85.1886%" y="799.50">std::thread::Builder::..</text></g><g><title>clone (18,217 samples, 14.72%)</title><rect x="84.9265%" y="885" width="14.7212%" height="15" fill="rgb(231,89,13)" fg:x="105094" fg:w="18217"/><text x="85.1765%" y="895.50">clone</text></g><g><title>start_thread (18,204 samples, 14.71%)</title><rect x="84.9370%" y="869" width="14.7107%" height="15" fill="rgb(210,182,18)" fg:x="105107" fg:w="18204"/><text x="85.1870%" y="879.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (18,202 samples, 14.71%)</title><rect x="84.9386%" y="853" width="14.7090%" height="15" fill="rgb(240,105,2)" fg:x="105109" fg:w="18202"/><text x="85.1886%" y="863.50">std::sys::unix::thread..</text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt;&gt; (13 samples, 0.01%)</title><rect x="99.6509%" y="885" width="0.0105%" height="15" fill="rgb(207,170,50)" fg:x="123315" fg:w="13"/><text x="99.9009%" y="895.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (23 samples, 0.02%)</title><rect x="99.6711%" y="885" width="0.0186%" height="15" fill="rgb(232,133,24)" fg:x="123340" fg:w="23"/><text x="99.9211%" y="895.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (26 samples, 0.02%)</title><rect x="99.6897%" y="885" width="0.0210%" height="15" fill="rgb(235,166,27)" fg:x="123363" fg:w="26"/><text x="99.9397%" y="895.50"></text></g><g><title>tremor_pipeline::OpMeta::merge (24 samples, 0.02%)</title><rect x="99.6913%" y="869" width="0.0194%" height="15" fill="rgb(209,19,13)" fg:x="123365" fg:w="24"/><text x="99.9413%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (14 samples, 0.01%)</title><rect x="99.6994%" y="853" width="0.0113%" height="15" fill="rgb(226,79,39)" fg:x="123375" fg:w="14"/><text x="99.9494%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::ValIterInterface&lt;u32,u32&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="99.6994%" y="837" width="0.0113%" height="15" fill="rgb(222,163,10)" fg:x="123375" fg:w="14"/><text x="99.9494%" y="847.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="99.6994%" y="821" width="0.0113%" height="15" fill="rgb(214,44,19)" fg:x="123375" fg:w="14"/><text x="99.9494%" y="831.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (14 samples, 0.01%)</title><rect x="99.6994%" y="805" width="0.0113%" height="15" fill="rgb(210,217,13)" fg:x="123375" fg:w="14"/><text x="99.9494%" y="815.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (14 samples, 0.01%)</title><rect x="99.6994%" y="789" width="0.0113%" height="15" fill="rgb(237,61,54)" fg:x="123375" fg:w="14"/><text x="99.9494%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="99.6994%" y="773" width="0.0113%" height="15" fill="rgb(226,184,24)" fg:x="123375" fg:w="14"/><text x="99.9494%" y="783.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (14 samples, 0.01%)</title><rect x="99.6994%" y="757" width="0.0113%" height="15" fill="rgb(223,226,4)" fg:x="123375" fg:w="14"/><text x="99.9494%" y="767.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (14 samples, 0.01%)</title><rect x="99.6994%" y="741" width="0.0113%" height="15" fill="rgb(210,26,41)" fg:x="123375" fg:w="14"/><text x="99.9494%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="99.6994%" y="725" width="0.0113%" height="15" fill="rgb(220,221,6)" fg:x="123375" fg:w="14"/><text x="99.9494%" y="735.50"></text></g><g><title>alloc::alloc::box_free (14 samples, 0.01%)</title><rect x="99.6994%" y="709" width="0.0113%" height="15" fill="rgb(225,89,49)" fg:x="123375" fg:w="14"/><text x="99.9494%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.01%)</title><rect x="99.6994%" y="693" width="0.0113%" height="15" fill="rgb(218,70,45)" fg:x="123375" fg:w="14"/><text x="99.9494%" y="703.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.01%)</title><rect x="99.6994%" y="677" width="0.0113%" height="15" fill="rgb(238,166,21)" fg:x="123375" fg:w="14"/><text x="99.9494%" y="687.50"></text></g><g><title>__rg_dealloc (14 samples, 0.01%)</title><rect x="99.6994%" y="661" width="0.0113%" height="15" fill="rgb(224,141,44)" fg:x="123375" fg:w="14"/><text x="99.9494%" y="671.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (14 samples, 0.01%)</title><rect x="99.6994%" y="645" width="0.0113%" height="15" fill="rgb(230,12,49)" fg:x="123375" fg:w="14"/><text x="99.9494%" y="655.50"></text></g><g><title>async-std/runti (123,343 samples, 99.67%)</title><rect x="0.0420%" y="901" width="99.6735%" height="15" fill="rgb(212,174,12)" fg:x="52" fg:w="123343"/><text x="0.2920%" y="911.50">async-std/runti</text></g><g><title>[ld-2.31.so] (13 samples, 0.01%)</title><rect x="99.7463%" y="885" width="0.0105%" height="15" fill="rgb(246,67,9)" fg:x="123433" fg:w="13"/><text x="99.9963%" y="895.50"></text></g><g><title>pdk-hashbrown (208 samples, 0.17%)</title><rect x="99.7438%" y="901" width="0.1681%" height="15" fill="rgb(239,35,23)" fg:x="123430" fg:w="208"/><text x="99.9938%" y="911.50"></text></g><g><title>clone (186 samples, 0.15%)</title><rect x="99.7616%" y="885" width="0.1503%" height="15" fill="rgb(211,167,0)" fg:x="123452" fg:w="186"/><text x="100.0116%" y="895.50"></text></g><g><title>start_thread (27 samples, 0.02%)</title><rect x="99.8901%" y="869" width="0.0218%" height="15" fill="rgb(225,119,45)" fg:x="123611" fg:w="27"/><text x="100.1401%" y="879.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (105 samples, 0.08%)</title><rect x="99.9135%" y="645" width="0.0849%" height="15" fill="rgb(210,162,6)" fg:x="123640" fg:w="105"/><text x="100.1635%" y="655.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (105 samples, 0.08%)</title><rect x="99.9135%" y="629" width="0.0849%" height="15" fill="rgb(208,118,35)" fg:x="123640" fg:w="105"/><text x="100.1635%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (103 samples, 0.08%)</title><rect x="99.9151%" y="613" width="0.0832%" height="15" fill="rgb(239,4,53)" fg:x="123642" fg:w="103"/><text x="100.1651%" y="623.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (103 samples, 0.08%)</title><rect x="99.9151%" y="597" width="0.0832%" height="15" fill="rgb(213,130,21)" fg:x="123642" fg:w="103"/><text x="100.1651%" y="607.50"></text></g><g><title>__GI___pthread_mutex_lock (103 samples, 0.08%)</title><rect x="99.9151%" y="581" width="0.0832%" height="15" fill="rgb(235,148,0)" fg:x="123642" fg:w="103"/><text x="100.1651%" y="591.50"></text></g><g><title>__lll_lock_wait (97 samples, 0.08%)</title><rect x="99.9200%" y="565" width="0.0784%" height="15" fill="rgb(244,224,18)" fg:x="123648" fg:w="97"/><text x="100.1700%" y="575.50"></text></g><g><title>all (123,747 samples, 100%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(211,214,4)" fg:x="0" fg:w="123747"/><text x="0.2500%" y="927.50"></text></g><g><title>tokio-runtime-w (109 samples, 0.09%)</title><rect x="99.9119%" y="901" width="0.0881%" height="15" fill="rgb(206,119,25)" fg:x="123638" fg:w="109"/><text x="100.1619%" y="911.50"></text></g><g><title>clone (108 samples, 0.09%)</title><rect x="99.9127%" y="885" width="0.0873%" height="15" fill="rgb(243,93,47)" fg:x="123639" fg:w="108"/><text x="100.1627%" y="895.50"></text></g><g><title>start_thread (108 samples, 0.09%)</title><rect x="99.9127%" y="869" width="0.0873%" height="15" fill="rgb(224,194,6)" fg:x="123639" fg:w="108"/><text x="100.1627%" y="879.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (108 samples, 0.09%)</title><rect x="99.9127%" y="853" width="0.0873%" height="15" fill="rgb(243,229,6)" fg:x="123639" fg:w="108"/><text x="100.1627%" y="863.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (108 samples, 0.09%)</title><rect x="99.9127%" y="837" width="0.0873%" height="15" fill="rgb(207,23,50)" fg:x="123639" fg:w="108"/><text x="100.1627%" y="847.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (108 samples, 0.09%)</title><rect x="99.9127%" y="821" width="0.0873%" height="15" fill="rgb(253,192,32)" fg:x="123639" fg:w="108"/><text x="100.1627%" y="831.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (108 samples, 0.09%)</title><rect x="99.9127%" y="805" width="0.0873%" height="15" fill="rgb(213,21,6)" fg:x="123639" fg:w="108"/><text x="100.1627%" y="815.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (108 samples, 0.09%)</title><rect x="99.9127%" y="789" width="0.0873%" height="15" fill="rgb(243,151,13)" fg:x="123639" fg:w="108"/><text x="100.1627%" y="799.50"></text></g><g><title>std::panic::catch_unwind (108 samples, 0.09%)</title><rect x="99.9127%" y="773" width="0.0873%" height="15" fill="rgb(233,165,41)" fg:x="123639" fg:w="108"/><text x="100.1627%" y="783.50"></text></g><g><title>std::panicking::try (108 samples, 0.09%)</title><rect x="99.9127%" y="757" width="0.0873%" height="15" fill="rgb(246,176,45)" fg:x="123639" fg:w="108"/><text x="100.1627%" y="767.50"></text></g><g><title>std::panicking::try::do_call (108 samples, 0.09%)</title><rect x="99.9127%" y="741" width="0.0873%" height="15" fill="rgb(217,170,52)" fg:x="123639" fg:w="108"/><text x="100.1627%" y="751.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (108 samples, 0.09%)</title><rect x="99.9127%" y="725" width="0.0873%" height="15" fill="rgb(214,203,54)" fg:x="123639" fg:w="108"/><text x="100.1627%" y="735.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (108 samples, 0.09%)</title><rect x="99.9127%" y="709" width="0.0873%" height="15" fill="rgb(248,215,49)" fg:x="123639" fg:w="108"/><text x="100.1627%" y="719.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (108 samples, 0.09%)</title><rect x="99.9127%" y="693" width="0.0873%" height="15" fill="rgb(208,46,10)" fg:x="123639" fg:w="108"/><text x="100.1627%" y="703.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (108 samples, 0.09%)</title><rect x="99.9127%" y="677" width="0.0873%" height="15" fill="rgb(254,5,31)" fg:x="123639" fg:w="108"/><text x="100.1627%" y="687.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (108 samples, 0.09%)</title><rect x="99.9127%" y="661" width="0.0873%" height="15" fill="rgb(222,104,33)" fg:x="123639" fg:w="108"/><text x="100.1627%" y="671.50"></text></g></svg></svg>