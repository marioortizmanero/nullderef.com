<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="982" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="965.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="965.00"> </text><svg id="frames" x="10" width="1180" total_samples="150959"><g><title>std::sys::unix::futex::futex_wait (108 samples, 0.07%)</title><rect x="0.0073%" y="565" width="0.0715%" height="15" fill="rgb(227,0,7)" fg:x="11" fg:w="108"/><text x="0.2573%" y="575.50"></text></g><g><title>syscall (95 samples, 0.06%)</title><rect x="0.0159%" y="549" width="0.0629%" height="15" fill="rgb(217,0,24)" fg:x="24" fg:w="95"/><text x="0.2659%" y="559.50"></text></g><g><title>async-io (121 samples, 0.08%)</title><rect x="0.0007%" y="917" width="0.0802%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="121"/><text x="0.2507%" y="927.50"></text></g><g><title>clone (121 samples, 0.08%)</title><rect x="0.0007%" y="901" width="0.0802%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="121"/><text x="0.2507%" y="911.50"></text></g><g><title>start_thread (121 samples, 0.08%)</title><rect x="0.0007%" y="885" width="0.0802%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="121"/><text x="0.2507%" y="895.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (121 samples, 0.08%)</title><rect x="0.0007%" y="869" width="0.0802%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="121"/><text x="0.2507%" y="879.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (121 samples, 0.08%)</title><rect x="0.0007%" y="853" width="0.0802%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="121"/><text x="0.2507%" y="863.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (121 samples, 0.08%)</title><rect x="0.0007%" y="837" width="0.0802%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="121"/><text x="0.2507%" y="847.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (121 samples, 0.08%)</title><rect x="0.0007%" y="821" width="0.0802%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="121"/><text x="0.2507%" y="831.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (121 samples, 0.08%)</title><rect x="0.0007%" y="805" width="0.0802%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="121"/><text x="0.2507%" y="815.50"></text></g><g><title>std::panic::catch_unwind (121 samples, 0.08%)</title><rect x="0.0007%" y="789" width="0.0802%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="121"/><text x="0.2507%" y="799.50"></text></g><g><title>std::panicking::try (121 samples, 0.08%)</title><rect x="0.0007%" y="773" width="0.0802%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="121"/><text x="0.2507%" y="783.50"></text></g><g><title>std::panicking::try::do_call (121 samples, 0.08%)</title><rect x="0.0007%" y="757" width="0.0802%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="121"/><text x="0.2507%" y="767.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (121 samples, 0.08%)</title><rect x="0.0007%" y="741" width="0.0802%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="121"/><text x="0.2507%" y="751.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (121 samples, 0.08%)</title><rect x="0.0007%" y="725" width="0.0802%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="121"/><text x="0.2507%" y="735.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (121 samples, 0.08%)</title><rect x="0.0007%" y="709" width="0.0802%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="121"/><text x="0.2507%" y="719.50"></text></g><g><title>async_io::driver::UNPARKER::{{closure}}::{{closure}} (121 samples, 0.08%)</title><rect x="0.0007%" y="693" width="0.0802%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="121"/><text x="0.2507%" y="703.50"></text></g><g><title>async_io::driver::main_loop (121 samples, 0.08%)</title><rect x="0.0007%" y="677" width="0.0802%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="121"/><text x="0.2507%" y="687.50"></text></g><g><title>parking::Parker::park_timeout (112 samples, 0.07%)</title><rect x="0.0066%" y="661" width="0.0742%" height="15" fill="rgb(221,200,47)" fg:x="10" fg:w="112"/><text x="0.2566%" y="671.50"></text></g><g><title>parking::Inner::park (112 samples, 0.07%)</title><rect x="0.0066%" y="645" width="0.0742%" height="15" fill="rgb(226,26,5)" fg:x="10" fg:w="112"/><text x="0.2566%" y="655.50"></text></g><g><title>std::sync::condvar::Condvar::wait_timeout (111 samples, 0.07%)</title><rect x="0.0073%" y="629" width="0.0735%" height="15" fill="rgb(249,33,26)" fg:x="11" fg:w="111"/><text x="0.2573%" y="639.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait_timeout (111 samples, 0.07%)</title><rect x="0.0073%" y="613" width="0.0735%" height="15" fill="rgb(235,183,28)" fg:x="11" fg:w="111"/><text x="0.2573%" y="623.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait_timeout (111 samples, 0.07%)</title><rect x="0.0073%" y="597" width="0.0735%" height="15" fill="rgb(221,5,38)" fg:x="11" fg:w="111"/><text x="0.2573%" y="607.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait_optional_timeout (111 samples, 0.07%)</title><rect x="0.0073%" y="581" width="0.0735%" height="15" fill="rgb(247,18,42)" fg:x="11" fg:w="111"/><text x="0.2573%" y="591.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (23 samples, 0.02%)</title><rect x="0.1047%" y="901" width="0.0152%" height="15" fill="rgb(241,131,45)" fg:x="158" fg:w="23"/><text x="0.3547%" y="911.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (24 samples, 0.02%)</title><rect x="0.1199%" y="901" width="0.0159%" height="15" fill="rgb(249,31,29)" fg:x="181" fg:w="24"/><text x="0.3699%" y="911.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (21 samples, 0.01%)</title><rect x="0.1418%" y="885" width="0.0139%" height="15" fill="rgb(225,111,53)" fg:x="214" fg:w="21"/><text x="0.3918%" y="895.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (26 samples, 0.02%)</title><rect x="0.1557%" y="885" width="0.0172%" height="15" fill="rgb(238,160,17)" fg:x="235" fg:w="26"/><text x="0.4057%" y="895.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (26 samples, 0.02%)</title><rect x="0.1762%" y="885" width="0.0172%" height="15" fill="rgb(214,148,48)" fg:x="266" fg:w="26"/><text x="0.4262%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (19 samples, 0.01%)</title><rect x="0.1934%" y="885" width="0.0126%" height="15" fill="rgb(232,36,49)" fg:x="292" fg:w="19"/><text x="0.4434%" y="895.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.02%)</title><rect x="0.2126%" y="885" width="0.0212%" height="15" fill="rgb(209,103,24)" fg:x="321" fg:w="32"/><text x="0.4626%" y="895.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (43 samples, 0.03%)</title><rect x="0.2338%" y="885" width="0.0285%" height="15" fill="rgb(229,88,8)" fg:x="353" fg:w="43"/><text x="0.4838%" y="895.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (24 samples, 0.02%)</title><rect x="0.3372%" y="869" width="0.0159%" height="15" fill="rgb(213,181,19)" fg:x="509" fg:w="24"/><text x="0.5872%" y="879.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (139 samples, 0.09%)</title><rect x="0.2623%" y="885" width="0.0921%" height="15" fill="rgb(254,191,54)" fg:x="396" fg:w="139"/><text x="0.5123%" y="895.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (30 samples, 0.02%)</title><rect x="0.3544%" y="885" width="0.0199%" height="15" fill="rgb(241,83,37)" fg:x="535" fg:w="30"/><text x="0.6044%" y="895.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (34 samples, 0.02%)</title><rect x="0.4008%" y="869" width="0.0225%" height="15" fill="rgb(233,36,39)" fg:x="605" fg:w="34"/><text x="0.6508%" y="879.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (27 samples, 0.02%)</title><rect x="0.4054%" y="853" width="0.0179%" height="15" fill="rgb(226,3,54)" fg:x="612" fg:w="27"/><text x="0.6554%" y="863.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (96 samples, 0.06%)</title><rect x="0.3743%" y="885" width="0.0636%" height="15" fill="rgb(245,192,40)" fg:x="565" fg:w="96"/><text x="0.6243%" y="895.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (22 samples, 0.01%)</title><rect x="0.4233%" y="869" width="0.0146%" height="15" fill="rgb(238,167,29)" fg:x="639" fg:w="22"/><text x="0.6733%" y="879.50"></text></g><g><title>core::mem::replace (22 samples, 0.01%)</title><rect x="0.4233%" y="853" width="0.0146%" height="15" fill="rgb(232,182,51)" fg:x="639" fg:w="22"/><text x="0.6733%" y="863.50"></text></g><g><title>core::ptr::read (22 samples, 0.01%)</title><rect x="0.4233%" y="837" width="0.0146%" height="15" fill="rgb(231,60,39)" fg:x="639" fg:w="22"/><text x="0.6733%" y="847.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::Sink&gt;::on_event::{{closure}} (25 samples, 0.02%)</title><rect x="0.6094%" y="869" width="0.0166%" height="15" fill="rgb(208,69,12)" fg:x="920" fg:w="25"/><text x="0.8594%" y="879.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::route_events::{{closure}} (53 samples, 0.04%)</title><rect x="0.6300%" y="869" width="0.0351%" height="15" fill="rgb(235,93,37)" fg:x="951" fg:w="53"/><text x="0.8800%" y="879.50"></text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (22 samples, 0.01%)</title><rect x="0.6651%" y="869" width="0.0146%" height="15" fill="rgb(213,116,39)" fg:x="1004" fg:w="22"/><text x="0.9151%" y="879.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (419 samples, 0.28%)</title><rect x="0.4379%" y="885" width="0.2776%" height="15" fill="rgb(222,207,29)" fg:x="661" fg:w="419"/><text x="0.6879%" y="895.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (41 samples, 0.03%)</title><rect x="0.6883%" y="869" width="0.0272%" height="15" fill="rgb(206,96,30)" fg:x="1039" fg:w="41"/><text x="0.9383%" y="879.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (77 samples, 0.05%)</title><rect x="0.7154%" y="885" width="0.0510%" height="15" fill="rgb(218,138,4)" fg:x="1080" fg:w="77"/><text x="0.9654%" y="895.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (28 samples, 0.02%)</title><rect x="0.7691%" y="885" width="0.0185%" height="15" fill="rgb(250,191,14)" fg:x="1161" fg:w="28"/><text x="1.0191%" y="895.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (54 samples, 0.04%)</title><rect x="0.7883%" y="885" width="0.0358%" height="15" fill="rgb(239,60,40)" fg:x="1190" fg:w="54"/><text x="1.0383%" y="895.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::decode (41 samples, 0.03%)</title><rect x="0.8241%" y="885" width="0.0272%" height="15" fill="rgb(206,27,48)" fg:x="1244" fg:w="41"/><text x="1.0741%" y="895.50"></text></g><g><title>tremor_value::value::parse_to_value_with_buffers (19 samples, 0.01%)</title><rect x="0.8386%" y="869" width="0.0126%" height="15" fill="rgb(225,35,8)" fg:x="1266" fg:w="19"/><text x="1.0886%" y="879.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (105 samples, 0.07%)</title><rect x="0.8578%" y="885" width="0.0696%" height="15" fill="rgb(250,213,24)" fg:x="1295" fg:w="105"/><text x="1.1078%" y="895.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (54 samples, 0.04%)</title><rect x="0.8916%" y="869" width="0.0358%" height="15" fill="rgb(247,123,22)" fg:x="1346" fg:w="54"/><text x="1.1416%" y="879.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (45 samples, 0.03%)</title><rect x="0.8976%" y="853" width="0.0298%" height="15" fill="rgb(231,138,38)" fg:x="1355" fg:w="45"/><text x="1.1476%" y="863.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (28 samples, 0.02%)</title><rect x="0.9367%" y="885" width="0.0185%" height="15" fill="rgb(231,145,46)" fg:x="1414" fg:w="28"/><text x="1.1867%" y="895.50"></text></g><g><title>[libc-2.31.so] (41 samples, 0.03%)</title><rect x="0.9605%" y="885" width="0.0272%" height="15" fill="rgb(251,118,11)" fg:x="1450" fg:w="41"/><text x="1.2105%" y="895.50"></text></g><g><title>__clock_gettime (88 samples, 0.06%)</title><rect x="0.9877%" y="885" width="0.0583%" height="15" fill="rgb(217,147,25)" fg:x="1491" fg:w="88"/><text x="1.2377%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (60 samples, 0.04%)</title><rect x="1.0645%" y="885" width="0.0397%" height="15" fill="rgb(247,81,37)" fg:x="1607" fg:w="60"/><text x="1.3145%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (23 samples, 0.02%)</title><rect x="1.0890%" y="869" width="0.0152%" height="15" fill="rgb(209,12,38)" fg:x="1644" fg:w="23"/><text x="1.3390%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (23 samples, 0.02%)</title><rect x="1.0890%" y="853" width="0.0152%" height="15" fill="rgb(227,1,9)" fg:x="1644" fg:w="23"/><text x="1.3390%" y="863.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (23 samples, 0.02%)</title><rect x="1.0890%" y="837" width="0.0152%" height="15" fill="rgb(248,47,43)" fg:x="1644" fg:w="23"/><text x="1.3390%" y="847.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (18 samples, 0.01%)</title><rect x="1.1043%" y="885" width="0.0119%" height="15" fill="rgb(221,10,30)" fg:x="1667" fg:w="18"/><text x="1.3543%" y="895.50"></text></g><g><title>async_executor::Ticker::sleep (21 samples, 0.01%)</title><rect x="1.1248%" y="885" width="0.0139%" height="15" fill="rgb(210,229,1)" fg:x="1698" fg:w="21"/><text x="1.3748%" y="895.50"></text></g><g><title>async_executor::Ticker::wake (28 samples, 0.02%)</title><rect x="1.1387%" y="885" width="0.0185%" height="15" fill="rgb(222,148,37)" fg:x="1719" fg:w="28"/><text x="1.3887%" y="895.50"></text></g><g><title>async_executor::steal (218 samples, 0.14%)</title><rect x="1.1573%" y="885" width="0.1444%" height="15" fill="rgb(234,67,33)" fg:x="1747" fg:w="218"/><text x="1.4073%" y="895.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (389 samples, 0.26%)</title><rect x="1.3321%" y="885" width="0.2577%" height="15" fill="rgb(247,98,35)" fg:x="2011" fg:w="389"/><text x="1.5821%" y="895.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (70 samples, 0.05%)</title><rect x="1.5898%" y="885" width="0.0464%" height="15" fill="rgb(247,138,52)" fg:x="2400" fg:w="70"/><text x="1.8398%" y="895.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (61 samples, 0.04%)</title><rect x="1.6362%" y="885" width="0.0404%" height="15" fill="rgb(213,79,30)" fg:x="2470" fg:w="61"/><text x="1.8862%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tremor_value::value::Value]&gt; (19 samples, 0.01%)</title><rect x="1.6846%" y="885" width="0.0126%" height="15" fill="rgb(246,177,23)" fg:x="2543" fg:w="19"/><text x="1.9346%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::Source&gt;::pull_data::{{closure}}&gt;&gt; (31 samples, 0.02%)</title><rect x="1.6998%" y="885" width="0.0205%" height="15" fill="rgb(230,62,27)" fg:x="2566" fg:w="31"/><text x="1.9498%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager&lt;tremor_runtime::connectors::impls::cb::CbSource&gt;::route_events::{{closure}}&gt;&gt; (17 samples, 0.01%)</title><rect x="1.7309%" y="885" width="0.0113%" height="15" fill="rgb(216,154,8)" fg:x="2613" fg:w="17"/><text x="1.9809%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::OutputTarget::send_event::{{closure}}&gt;&gt; (39 samples, 0.03%)</title><rect x="1.7422%" y="885" width="0.0258%" height="15" fill="rgb(244,35,45)" fg:x="2630" fg:w="39"/><text x="1.9922%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt;&gt; (24 samples, 0.02%)</title><rect x="1.7680%" y="885" width="0.0159%" height="15" fill="rgb(251,115,12)" fg:x="2669" fg:w="24"/><text x="2.0180%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt; (24 samples, 0.02%)</title><rect x="1.7680%" y="869" width="0.0159%" height="15" fill="rgb(240,54,50)" fg:x="2669" fg:w="24"/><text x="2.0180%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (102 samples, 0.07%)</title><rect x="1.7959%" y="885" width="0.0676%" height="15" fill="rgb(233,84,52)" fg:x="2711" fg:w="102"/><text x="2.0459%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (34 samples, 0.02%)</title><rect x="1.8840%" y="869" width="0.0225%" height="15" fill="rgb(207,117,47)" fg:x="2844" fg:w="34"/><text x="2.1340%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (34 samples, 0.02%)</title><rect x="1.8840%" y="853" width="0.0225%" height="15" fill="rgb(249,43,39)" fg:x="2844" fg:w="34"/><text x="2.1340%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (34 samples, 0.02%)</title><rect x="1.8840%" y="837" width="0.0225%" height="15" fill="rgb(209,38,44)" fg:x="2844" fg:w="34"/><text x="2.1340%" y="847.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 0.02%)</title><rect x="1.8840%" y="821" width="0.0225%" height="15" fill="rgb(236,212,23)" fg:x="2844" fg:w="34"/><text x="2.1340%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (34 samples, 0.02%)</title><rect x="1.8840%" y="805" width="0.0225%" height="15" fill="rgb(242,79,21)" fg:x="2844" fg:w="34"/><text x="2.1340%" y="815.50"></text></g><g><title>alloc::alloc::dealloc (34 samples, 0.02%)</title><rect x="1.8840%" y="789" width="0.0225%" height="15" fill="rgb(211,96,35)" fg:x="2844" fg:w="34"/><text x="2.1340%" y="799.50"></text></g><g><title>__rg_dealloc (34 samples, 0.02%)</title><rect x="1.8840%" y="773" width="0.0225%" height="15" fill="rgb(253,215,40)" fg:x="2844" fg:w="34"/><text x="2.1340%" y="783.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (34 samples, 0.02%)</title><rect x="1.8840%" y="757" width="0.0225%" height="15" fill="rgb(211,81,21)" fg:x="2844" fg:w="34"/><text x="2.1340%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (62 samples, 0.04%)</title><rect x="1.8667%" y="885" width="0.0411%" height="15" fill="rgb(208,190,38)" fg:x="2818" fg:w="62"/><text x="2.1167%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (29 samples, 0.02%)</title><rect x="1.9078%" y="885" width="0.0192%" height="15" fill="rgb(235,213,38)" fg:x="2880" fg:w="29"/><text x="2.1578%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt;&gt; (24 samples, 0.02%)</title><rect x="2.0184%" y="869" width="0.0159%" height="15" fill="rgb(237,122,38)" fg:x="3047" fg:w="24"/><text x="2.2684%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (24 samples, 0.02%)</title><rect x="2.0184%" y="853" width="0.0159%" height="15" fill="rgb(244,218,35)" fg:x="3047" fg:w="24"/><text x="2.2684%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (47 samples, 0.03%)</title><rect x="2.0343%" y="869" width="0.0311%" height="15" fill="rgb(240,68,47)" fg:x="3071" fg:w="47"/><text x="2.2843%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (212 samples, 0.14%)</title><rect x="1.9270%" y="885" width="0.1404%" height="15" fill="rgb(210,16,53)" fg:x="2909" fg:w="212"/><text x="2.1770%" y="895.50"></text></g><g><title>event_listener::Event::notify (189 samples, 0.13%)</title><rect x="2.0734%" y="885" width="0.1252%" height="15" fill="rgb(235,124,12)" fg:x="3130" fg:w="189"/><text x="2.3234%" y="895.50"></text></g><g><title>event_listener::full_fence (61 samples, 0.04%)</title><rect x="2.1582%" y="869" width="0.0404%" height="15" fill="rgb(224,169,11)" fg:x="3258" fg:w="61"/><text x="2.4082%" y="879.50"></text></g><g><title>event_listener::List::notify (18 samples, 0.01%)</title><rect x="2.1986%" y="885" width="0.0119%" height="15" fill="rgb(250,166,2)" fg:x="3319" fg:w="18"/><text x="2.4486%" y="895.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (54 samples, 0.04%)</title><rect x="2.2105%" y="885" width="0.0358%" height="15" fill="rgb(242,216,29)" fg:x="3337" fg:w="54"/><text x="2.4605%" y="895.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::insert_nocheck (315 samples, 0.21%)</title><rect x="2.2463%" y="885" width="0.2087%" height="15" fill="rgb(230,116,27)" fg:x="3391" fg:w="315"/><text x="2.4963%" y="895.50"></text></g><g><title>parking::Unparker::unpark (28 samples, 0.02%)</title><rect x="2.4550%" y="885" width="0.0185%" height="15" fill="rgb(228,99,48)" fg:x="3706" fg:w="28"/><text x="2.7050%" y="895.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from (31 samples, 0.02%)</title><rect x="2.5292%" y="853" width="0.0205%" height="15" fill="rgb(253,11,6)" fg:x="3818" fg:w="31"/><text x="2.7792%" y="863.50"></text></g><g><title>core::intrinsics::copy (31 samples, 0.02%)</title><rect x="2.5292%" y="837" width="0.0205%" height="15" fill="rgb(247,143,39)" fg:x="3818" fg:w="31"/><text x="2.7792%" y="847.50"></text></g><g><title>simd_json::Deserializer::from_slice_with_buffers (147 samples, 0.10%)</title><rect x="2.4788%" y="885" width="0.0974%" height="15" fill="rgb(236,97,10)" fg:x="3742" fg:w="147"/><text x="2.7288%" y="895.50"></text></g><g><title>simd_json::Deserializer::find_structural_bits (93 samples, 0.06%)</title><rect x="2.5146%" y="869" width="0.0616%" height="15" fill="rgb(233,208,19)" fg:x="3796" fg:w="93"/><text x="2.7646%" y="879.50"></text></g><g><title>simd_json::Stage1Parse::find_quote_mask_and_bits (40 samples, 0.03%)</title><rect x="2.5497%" y="853" width="0.0265%" height="15" fill="rgb(216,164,2)" fg:x="3849" fg:w="40"/><text x="2.7997%" y="863.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::compute_quote_mask (40 samples, 0.03%)</title><rect x="2.5497%" y="837" width="0.0265%" height="15" fill="rgb(220,129,5)" fg:x="3849" fg:w="40"/><text x="2.7997%" y="847.50"></text></g><g><title>sn_rust_alloc (64 samples, 0.04%)</title><rect x="2.5775%" y="885" width="0.0424%" height="15" fill="rgb(242,17,10)" fg:x="3891" fg:w="64"/><text x="2.8275%" y="895.50"></text></g><g><title>sn_rust_realloc (35 samples, 0.02%)</title><rect x="2.6246%" y="885" width="0.0232%" height="15" fill="rgb(242,107,0)" fg:x="3962" fg:w="35"/><text x="2.8746%" y="895.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (19 samples, 0.01%)</title><rect x="2.6491%" y="885" width="0.0126%" height="15" fill="rgb(251,28,31)" fg:x="3999" fg:w="19"/><text x="2.8991%" y="895.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (23 samples, 0.02%)</title><rect x="2.6616%" y="885" width="0.0152%" height="15" fill="rgb(233,223,10)" fg:x="4018" fg:w="23"/><text x="2.9116%" y="895.50"></text></g><g><title>std::sys::unix::futex::futex_wait (19 samples, 0.01%)</title><rect x="2.6908%" y="885" width="0.0126%" height="15" fill="rgb(215,21,27)" fg:x="4062" fg:w="19"/><text x="2.9408%" y="895.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (35 samples, 0.02%)</title><rect x="2.7034%" y="885" width="0.0232%" height="15" fill="rgb(232,23,21)" fg:x="4081" fg:w="35"/><text x="2.9534%" y="895.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (59 samples, 0.04%)</title><rect x="2.7292%" y="885" width="0.0391%" height="15" fill="rgb(244,5,23)" fg:x="4120" fg:w="59"/><text x="2.9792%" y="895.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (51 samples, 0.03%)</title><rect x="2.7683%" y="885" width="0.0338%" height="15" fill="rgb(226,81,46)" fg:x="4179" fg:w="51"/><text x="3.0183%" y="895.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (21 samples, 0.01%)</title><rect x="2.7882%" y="869" width="0.0139%" height="15" fill="rgb(247,70,30)" fg:x="4209" fg:w="21"/><text x="3.0382%" y="879.50"></text></g><g><title>syscall (33 samples, 0.02%)</title><rect x="2.8021%" y="885" width="0.0219%" height="15" fill="rgb(212,68,19)" fg:x="4230" fg:w="33"/><text x="3.0521%" y="895.50"></text></g><g><title>tremor_common::time::nanotime (18 samples, 0.01%)</title><rect x="2.8239%" y="885" width="0.0119%" height="15" fill="rgb(240,187,13)" fg:x="4263" fg:w="18"/><text x="3.0739%" y="895.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (27 samples, 0.02%)</title><rect x="2.8425%" y="885" width="0.0179%" height="15" fill="rgb(223,113,26)" fg:x="4291" fg:w="27"/><text x="3.0925%" y="895.50"></text></g><g><title>tremor_runtime::pipeline::maybe_send (18 samples, 0.01%)</title><rect x="2.8690%" y="885" width="0.0119%" height="15" fill="rgb(206,192,2)" fg:x="4331" fg:w="18"/><text x="3.1190%" y="895.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (17 samples, 0.01%)</title><rect x="2.8829%" y="885" width="0.0113%" height="15" fill="rgb(241,108,4)" fg:x="4352" fg:w="17"/><text x="3.1329%" y="895.50"></text></g><g><title>tremor_script::srs::EventPayload::try_new (44 samples, 0.03%)</title><rect x="2.8942%" y="885" width="0.0291%" height="15" fill="rgb(247,173,49)" fg:x="4369" fg:w="44"/><text x="3.1442%" y="895.50"></text></g><g><title>tremor_runtime::connectors::source::build_last_events::{{closure}} (23 samples, 0.02%)</title><rect x="2.9081%" y="869" width="0.0152%" height="15" fill="rgb(224,114,35)" fg:x="4390" fg:w="23"/><text x="3.1581%" y="879.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse_array (33 samples, 0.02%)</title><rect x="3.3850%" y="869" width="0.0219%" height="15" fill="rgb(245,159,27)" fg:x="5110" fg:w="33"/><text x="3.6350%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (17 samples, 0.01%)</title><rect x="3.3956%" y="853" width="0.0113%" height="15" fill="rgb(245,172,44)" fg:x="5126" fg:w="17"/><text x="3.6456%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (17 samples, 0.01%)</title><rect x="3.3956%" y="837" width="0.0113%" height="15" fill="rgb(236,23,11)" fg:x="5126" fg:w="17"/><text x="3.6456%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (17 samples, 0.01%)</title><rect x="3.3956%" y="821" width="0.0113%" height="15" fill="rgb(205,117,38)" fg:x="5126" fg:w="17"/><text x="3.6456%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (17 samples, 0.01%)</title><rect x="3.3956%" y="805" width="0.0113%" height="15" fill="rgb(237,72,25)" fg:x="5126" fg:w="17"/><text x="3.6456%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.01%)</title><rect x="3.3956%" y="789" width="0.0113%" height="15" fill="rgb(244,70,9)" fg:x="5126" fg:w="17"/><text x="3.6456%" y="799.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.01%)</title><rect x="3.3956%" y="773" width="0.0113%" height="15" fill="rgb(217,125,39)" fg:x="5126" fg:w="17"/><text x="3.6456%" y="783.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.01%)</title><rect x="3.3956%" y="757" width="0.0113%" height="15" fill="rgb(235,36,10)" fg:x="5126" fg:w="17"/><text x="3.6456%" y="767.50"></text></g><g><title>__rg_alloc (17 samples, 0.01%)</title><rect x="3.3956%" y="741" width="0.0113%" height="15" fill="rgb(251,123,47)" fg:x="5126" fg:w="17"/><text x="3.6456%" y="751.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (17 samples, 0.01%)</title><rect x="3.3956%" y="725" width="0.0113%" height="15" fill="rgb(221,13,13)" fg:x="5126" fg:w="17"/><text x="3.6456%" y="735.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (828 samples, 0.55%)</title><rect x="2.9233%" y="885" width="0.5485%" height="15" fill="rgb(238,131,9)" fg:x="4413" fg:w="828"/><text x="3.1733%" y="895.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse_map (98 samples, 0.06%)</title><rect x="3.4069%" y="869" width="0.0649%" height="15" fill="rgb(211,50,8)" fg:x="5143" fg:w="98"/><text x="3.6569%" y="879.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (93 samples, 0.06%)</title><rect x="3.7918%" y="837" width="0.0616%" height="15" fill="rgb(245,182,24)" fg:x="5724" fg:w="93"/><text x="4.0418%" y="847.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (93 samples, 0.06%)</title><rect x="3.7918%" y="821" width="0.0616%" height="15" fill="rgb(242,14,37)" fg:x="5724" fg:w="93"/><text x="4.0418%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (93 samples, 0.06%)</title><rect x="3.7918%" y="805" width="0.0616%" height="15" fill="rgb(246,228,12)" fg:x="5724" fg:w="93"/><text x="4.0418%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (93 samples, 0.06%)</title><rect x="3.7918%" y="789" width="0.0616%" height="15" fill="rgb(213,55,15)" fg:x="5724" fg:w="93"/><text x="4.0418%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (93 samples, 0.06%)</title><rect x="3.7918%" y="773" width="0.0616%" height="15" fill="rgb(209,9,3)" fg:x="5724" fg:w="93"/><text x="4.0418%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (93 samples, 0.06%)</title><rect x="3.7918%" y="757" width="0.0616%" height="15" fill="rgb(230,59,30)" fg:x="5724" fg:w="93"/><text x="4.0418%" y="767.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (656 samples, 0.43%)</title><rect x="3.4718%" y="885" width="0.4346%" height="15" fill="rgb(209,121,21)" fg:x="5241" fg:w="656"/><text x="3.7218%" y="895.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string (173 samples, 0.11%)</title><rect x="3.7918%" y="869" width="0.1146%" height="15" fill="rgb(220,109,13)" fg:x="5724" fg:w="173"/><text x="4.0418%" y="879.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (173 samples, 0.11%)</title><rect x="3.7918%" y="853" width="0.1146%" height="15" fill="rgb(232,18,1)" fg:x="5724" fg:w="173"/><text x="4.0418%" y="863.50"></text></g><g><title>value_trait::generator::write_str_simd (80 samples, 0.05%)</title><rect x="3.8534%" y="837" width="0.0530%" height="15" fill="rgb(215,41,42)" fg:x="5817" fg:w="80"/><text x="4.1034%" y="847.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (80 samples, 0.05%)</title><rect x="3.8534%" y="821" width="0.0530%" height="15" fill="rgb(224,123,36)" fg:x="5817" fg:w="80"/><text x="4.1034%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (80 samples, 0.05%)</title><rect x="3.8534%" y="805" width="0.0530%" height="15" fill="rgb(240,125,3)" fg:x="5817" fg:w="80"/><text x="4.1034%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (80 samples, 0.05%)</title><rect x="3.8534%" y="789" width="0.0530%" height="15" fill="rgb(205,98,50)" fg:x="5817" fg:w="80"/><text x="4.1034%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (80 samples, 0.05%)</title><rect x="3.8534%" y="773" width="0.0530%" height="15" fill="rgb(205,185,37)" fg:x="5817" fg:w="80"/><text x="4.1034%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (80 samples, 0.05%)</title><rect x="3.8534%" y="757" width="0.0530%" height="15" fill="rgb(238,207,15)" fg:x="5817" fg:w="80"/><text x="4.1034%" y="767.50"></text></g><g><title>value_trait::Builder::object (18 samples, 0.01%)</title><rect x="3.9064%" y="885" width="0.0119%" height="15" fill="rgb(213,199,42)" fg:x="5897" fg:w="18"/><text x="4.1564%" y="895.50"></text></g><g><title>[anon] (5,723 samples, 3.79%)</title><rect x="0.1418%" y="901" width="3.7911%" height="15" fill="rgb(235,201,11)" fg:x="214" fg:w="5723"/><text x="0.3918%" y="911.50">[ano..</text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (17 samples, 0.01%)</title><rect x="3.9216%" y="885" width="0.0113%" height="15" fill="rgb(207,46,11)" fg:x="5920" fg:w="17"/><text x="4.1716%" y="895.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (25 samples, 0.02%)</title><rect x="3.9435%" y="885" width="0.0166%" height="15" fill="rgb(241,35,35)" fg:x="5953" fg:w="25"/><text x="4.1935%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (20 samples, 0.01%)</title><rect x="3.9700%" y="757" width="0.0132%" height="15" fill="rgb(243,32,47)" fg:x="5993" fg:w="20"/><text x="4.2200%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (20 samples, 0.01%)</title><rect x="3.9700%" y="741" width="0.0132%" height="15" fill="rgb(247,202,23)" fg:x="5993" fg:w="20"/><text x="4.2200%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (20 samples, 0.01%)</title><rect x="3.9700%" y="725" width="0.0132%" height="15" fill="rgb(219,102,11)" fg:x="5993" fg:w="20"/><text x="4.2200%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (20 samples, 0.01%)</title><rect x="3.9700%" y="709" width="0.0132%" height="15" fill="rgb(243,110,44)" fg:x="5993" fg:w="20"/><text x="4.2200%" y="719.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (20 samples, 0.01%)</title><rect x="3.9700%" y="693" width="0.0132%" height="15" fill="rgb(222,74,54)" fg:x="5993" fg:w="20"/><text x="4.2200%" y="703.50"></text></g><g><title>alloc::alloc::alloc (20 samples, 0.01%)</title><rect x="3.9700%" y="677" width="0.0132%" height="15" fill="rgb(216,99,12)" fg:x="5993" fg:w="20"/><text x="4.2200%" y="687.50"></text></g><g><title>__rg_alloc (20 samples, 0.01%)</title><rect x="3.9700%" y="661" width="0.0132%" height="15" fill="rgb(226,22,26)" fg:x="5993" fg:w="20"/><text x="4.2200%" y="671.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (20 samples, 0.01%)</title><rect x="3.9700%" y="645" width="0.0132%" height="15" fill="rgb(217,163,10)" fg:x="5993" fg:w="20"/><text x="4.2200%" y="655.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (41 samples, 0.03%)</title><rect x="3.9660%" y="853" width="0.0272%" height="15" fill="rgb(213,25,53)" fg:x="5987" fg:w="41"/><text x="4.2160%" y="863.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (35 samples, 0.02%)</title><rect x="3.9700%" y="837" width="0.0232%" height="15" fill="rgb(252,105,26)" fg:x="5993" fg:w="35"/><text x="4.2200%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (35 samples, 0.02%)</title><rect x="3.9700%" y="821" width="0.0232%" height="15" fill="rgb(220,39,43)" fg:x="5993" fg:w="35"/><text x="4.2200%" y="831.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (35 samples, 0.02%)</title><rect x="3.9700%" y="805" width="0.0232%" height="15" fill="rgb(229,68,48)" fg:x="5993" fg:w="35"/><text x="4.2200%" y="815.50"></text></g><g><title>alloc::slice::hack::to_vec (35 samples, 0.02%)</title><rect x="3.9700%" y="789" width="0.0232%" height="15" fill="rgb(252,8,32)" fg:x="5993" fg:w="35"/><text x="4.2200%" y="799.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (35 samples, 0.02%)</title><rect x="3.9700%" y="773" width="0.0232%" height="15" fill="rgb(223,20,43)" fg:x="5993" fg:w="35"/><text x="4.2200%" y="783.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (67 samples, 0.04%)</title><rect x="3.9600%" y="885" width="0.0444%" height="15" fill="rgb(229,81,49)" fg:x="5978" fg:w="67"/><text x="4.2100%" y="895.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::Source&gt;::pull_data::{{closure}} (58 samples, 0.04%)</title><rect x="3.9660%" y="869" width="0.0384%" height="15" fill="rgb(236,28,36)" fg:x="5987" fg:w="58"/><text x="4.2160%" y="879.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (24 samples, 0.02%)</title><rect x="4.0123%" y="885" width="0.0159%" height="15" fill="rgb(249,185,26)" fg:x="6057" fg:w="24"/><text x="4.2623%" y="895.50"></text></g><g><title>[libc-2.31.so] (160 samples, 0.11%)</title><rect x="3.9329%" y="901" width="0.1060%" height="15" fill="rgb(249,174,33)" fg:x="5937" fg:w="160"/><text x="4.1829%" y="911.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (34 samples, 0.02%)</title><rect x="4.0388%" y="885" width="0.0225%" height="15" fill="rgb(233,201,37)" fg:x="6097" fg:w="34"/><text x="4.2888%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tremor_value::value::Value]&gt; (24 samples, 0.02%)</title><rect x="4.0759%" y="885" width="0.0159%" height="15" fill="rgb(221,78,26)" fg:x="6153" fg:w="24"/><text x="4.3259%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (524 samples, 0.35%)</title><rect x="4.0918%" y="885" width="0.3471%" height="15" fill="rgb(250,127,30)" fg:x="6177" fg:w="524"/><text x="4.3418%" y="895.50"></text></g><g><title>[main] (627 samples, 0.42%)</title><rect x="4.0388%" y="901" width="0.4153%" height="15" fill="rgb(230,49,44)" fg:x="6097" fg:w="627"/><text x="4.2888%" y="911.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (20 samples, 0.01%)</title><rect x="4.4409%" y="885" width="0.0132%" height="15" fill="rgb(229,67,23)" fg:x="6704" fg:w="20"/><text x="4.6909%" y="895.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (19 samples, 0.01%)</title><rect x="4.5198%" y="821" width="0.0126%" height="15" fill="rgb(249,83,47)" fg:x="6823" fg:w="19"/><text x="4.7698%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (19 samples, 0.01%)</title><rect x="4.5198%" y="805" width="0.0126%" height="15" fill="rgb(215,43,3)" fg:x="6823" fg:w="19"/><text x="4.7698%" y="815.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (19 samples, 0.01%)</title><rect x="4.5198%" y="789" width="0.0126%" height="15" fill="rgb(238,154,13)" fg:x="6823" fg:w="19"/><text x="4.7698%" y="799.50"></text></g><g><title>alloc::slice::hack::to_vec (19 samples, 0.01%)</title><rect x="4.5198%" y="773" width="0.0126%" height="15" fill="rgb(219,56,2)" fg:x="6823" fg:w="19"/><text x="4.7698%" y="783.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (19 samples, 0.01%)</title><rect x="4.5198%" y="757" width="0.0126%" height="15" fill="rgb(233,0,4)" fg:x="6823" fg:w="19"/><text x="4.7698%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (99 samples, 0.07%)</title><rect x="4.4714%" y="885" width="0.0656%" height="15" fill="rgb(235,30,7)" fg:x="6750" fg:w="99"/><text x="4.7214%" y="895.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (26 samples, 0.02%)</title><rect x="4.5198%" y="869" width="0.0172%" height="15" fill="rgb(250,79,13)" fg:x="6823" fg:w="26"/><text x="4.7698%" y="879.50"></text></g><g><title>alloc::slice::hack::to_vec (26 samples, 0.02%)</title><rect x="4.5198%" y="853" width="0.0172%" height="15" fill="rgb(211,146,34)" fg:x="6823" fg:w="26"/><text x="4.7698%" y="863.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (26 samples, 0.02%)</title><rect x="4.5198%" y="837" width="0.0172%" height="15" fill="rgb(228,22,38)" fg:x="6823" fg:w="26"/><text x="4.7698%" y="847.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (22 samples, 0.01%)</title><rect x="4.5423%" y="885" width="0.0146%" height="15" fill="rgb(235,168,5)" fg:x="6857" fg:w="22"/><text x="4.7923%" y="895.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (17 samples, 0.01%)</title><rect x="4.5569%" y="885" width="0.0113%" height="15" fill="rgb(221,155,16)" fg:x="6879" fg:w="17"/><text x="4.8069%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (332 samples, 0.22%)</title><rect x="4.7238%" y="405" width="0.2199%" height="15" fill="rgb(215,215,53)" fg:x="7131" fg:w="332"/><text x="4.9738%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (332 samples, 0.22%)</title><rect x="4.7238%" y="389" width="0.2199%" height="15" fill="rgb(223,4,10)" fg:x="7131" fg:w="332"/><text x="4.9738%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1,539 samples, 1.02%)</title><rect x="4.9437%" y="405" width="1.0195%" height="15" fill="rgb(234,103,6)" fg:x="7463" fg:w="1539"/><text x="5.1937%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (1,529 samples, 1.01%)</title><rect x="4.9504%" y="389" width="1.0129%" height="15" fill="rgb(227,97,0)" fg:x="7473" fg:w="1529"/><text x="5.2004%" y="399.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (1,989 samples, 1.32%)</title><rect x="4.6542%" y="437" width="1.3176%" height="15" fill="rgb(234,150,53)" fg:x="7026" fg:w="1989"/><text x="4.9042%" y="447.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (1,989 samples, 1.32%)</title><rect x="4.6542%" y="421" width="1.3176%" height="15" fill="rgb(228,201,54)" fg:x="7026" fg:w="1989"/><text x="4.9042%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (33 samples, 0.02%)</title><rect x="5.9871%" y="341" width="0.0219%" height="15" fill="rgb(222,22,37)" fg:x="9038" fg:w="33"/><text x="6.2371%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_swap (33 samples, 0.02%)</title><rect x="5.9871%" y="325" width="0.0219%" height="15" fill="rgb(237,53,32)" fg:x="9038" fg:w="33"/><text x="6.2371%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (43 samples, 0.03%)</title><rect x="5.9818%" y="421" width="0.0285%" height="15" fill="rgb(233,25,53)" fg:x="9030" fg:w="43"/><text x="6.2318%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (37 samples, 0.02%)</title><rect x="5.9857%" y="405" width="0.0245%" height="15" fill="rgb(210,40,34)" fg:x="9036" fg:w="37"/><text x="6.2357%" y="415.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.02%)</title><rect x="5.9857%" y="389" width="0.0245%" height="15" fill="rgb(241,220,44)" fg:x="9036" fg:w="37"/><text x="6.2357%" y="399.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (36 samples, 0.02%)</title><rect x="5.9864%" y="373" width="0.0238%" height="15" fill="rgb(235,28,35)" fg:x="9037" fg:w="36"/><text x="6.2364%" y="383.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (36 samples, 0.02%)</title><rect x="5.9864%" y="357" width="0.0238%" height="15" fill="rgb(210,56,17)" fg:x="9037" fg:w="36"/><text x="6.2364%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (45 samples, 0.03%)</title><rect x="6.0102%" y="421" width="0.0298%" height="15" fill="rgb(224,130,29)" fg:x="9073" fg:w="45"/><text x="6.2602%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (45 samples, 0.03%)</title><rect x="6.0102%" y="405" width="0.0298%" height="15" fill="rgb(235,212,8)" fg:x="9073" fg:w="45"/><text x="6.2602%" y="415.50"></text></g><g><title>event_listener::Inner::lock (60 samples, 0.04%)</title><rect x="6.0407%" y="421" width="0.0397%" height="15" fill="rgb(223,33,50)" fg:x="9119" fg:w="60"/><text x="6.2907%" y="431.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (54 samples, 0.04%)</title><rect x="6.0447%" y="405" width="0.0358%" height="15" fill="rgb(219,149,13)" fg:x="9125" fg:w="54"/><text x="6.2947%" y="415.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (46 samples, 0.03%)</title><rect x="6.0500%" y="389" width="0.0305%" height="15" fill="rgb(250,156,29)" fg:x="9133" fg:w="46"/><text x="6.3000%" y="399.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (46 samples, 0.03%)</title><rect x="6.0500%" y="373" width="0.0305%" height="15" fill="rgb(216,193,19)" fg:x="9133" fg:w="46"/><text x="6.3000%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (46 samples, 0.03%)</title><rect x="6.0500%" y="357" width="0.0305%" height="15" fill="rgb(216,135,14)" fg:x="9133" fg:w="46"/><text x="6.3000%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (46 samples, 0.03%)</title><rect x="6.0500%" y="341" width="0.0305%" height="15" fill="rgb(241,47,5)" fg:x="9133" fg:w="46"/><text x="6.3000%" y="351.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (3,326 samples, 2.20%)</title><rect x="4.6542%" y="453" width="2.2032%" height="15" fill="rgb(233,42,35)" fg:x="7026" fg:w="3326"/><text x="4.9042%" y="463.50">a..</text></g><g><title>event_listener::Event::notify (1,337 samples, 0.89%)</title><rect x="5.9718%" y="437" width="0.8857%" height="15" fill="rgb(231,13,6)" fg:x="9015" fg:w="1337"/><text x="6.2218%" y="447.50"></text></g><g><title>event_listener::full_fence (1,173 samples, 0.78%)</title><rect x="6.0805%" y="421" width="0.7770%" height="15" fill="rgb(207,181,40)" fg:x="9179" fg:w="1173"/><text x="6.3305%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1,171 samples, 0.78%)</title><rect x="6.0818%" y="405" width="0.7757%" height="15" fill="rgb(254,173,49)" fg:x="9181" fg:w="1171"/><text x="6.3318%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1,171 samples, 0.78%)</title><rect x="6.0818%" y="389" width="0.7757%" height="15" fill="rgb(221,1,38)" fg:x="9181" fg:w="1171"/><text x="6.3318%" y="399.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (3,539 samples, 2.34%)</title><rect x="4.6542%" y="469" width="2.3443%" height="15" fill="rgb(206,124,46)" fg:x="7026" fg:w="3539"/><text x="4.9042%" y="479.50">&lt;..</text></g><g><title>event_listener::Event::notify (213 samples, 0.14%)</title><rect x="6.8575%" y="453" width="0.1411%" height="15" fill="rgb(249,21,11)" fg:x="10352" fg:w="213"/><text x="7.1075%" y="463.50"></text></g><g><title>event_listener::full_fence (195 samples, 0.13%)</title><rect x="6.8694%" y="437" width="0.1292%" height="15" fill="rgb(222,201,40)" fg:x="10370" fg:w="195"/><text x="7.1194%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (195 samples, 0.13%)</title><rect x="6.8694%" y="421" width="0.1292%" height="15" fill="rgb(235,61,29)" fg:x="10370" fg:w="195"/><text x="7.1194%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (195 samples, 0.13%)</title><rect x="6.8694%" y="405" width="0.1292%" height="15" fill="rgb(219,207,3)" fg:x="10370" fg:w="195"/><text x="7.1194%" y="415.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (3,576 samples, 2.37%)</title><rect x="4.6542%" y="869" width="2.3689%" height="15" fill="rgb(222,56,46)" fg:x="7026" fg:w="3576"/><text x="4.9042%" y="879.50">as..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (3,576 samples, 2.37%)</title><rect x="4.6542%" y="853" width="2.3689%" height="15" fill="rgb(239,76,54)" fg:x="7026" fg:w="3576"/><text x="4.9042%" y="863.50">&lt;f..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,576 samples, 2.37%)</title><rect x="4.6542%" y="837" width="2.3689%" height="15" fill="rgb(231,124,27)" fg:x="7026" fg:w="3576"/><text x="4.9042%" y="847.50">&lt;c..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (3,576 samples, 2.37%)</title><rect x="4.6542%" y="821" width="2.3689%" height="15" fill="rgb(249,195,6)" fg:x="7026" fg:w="3576"/><text x="4.9042%" y="831.50">as..</text></g><g><title>async_task::runnable::Runnable::run (3,576 samples, 2.37%)</title><rect x="4.6542%" y="805" width="2.3689%" height="15" fill="rgb(237,174,47)" fg:x="7026" fg:w="3576"/><text x="4.9042%" y="815.50">as..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (3,576 samples, 2.37%)</title><rect x="4.6542%" y="789" width="2.3689%" height="15" fill="rgb(206,201,31)" fg:x="7026" fg:w="3576"/><text x="4.9042%" y="799.50">as..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (3,576 samples, 2.37%)</title><rect x="4.6542%" y="773" width="2.3689%" height="15" fill="rgb(231,57,52)" fg:x="7026" fg:w="3576"/><text x="4.9042%" y="783.50">&lt;c..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,576 samples, 2.37%)</title><rect x="4.6542%" y="757" width="2.3689%" height="15" fill="rgb(248,177,22)" fg:x="7026" fg:w="3576"/><text x="4.9042%" y="767.50">&lt;c..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (3,576 samples, 2.37%)</title><rect x="4.6542%" y="741" width="2.3689%" height="15" fill="rgb(215,211,37)" fg:x="7026" fg:w="3576"/><text x="4.9042%" y="751.50">as..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (3,576 samples, 2.37%)</title><rect x="4.6542%" y="725" width="2.3689%" height="15" fill="rgb(241,128,51)" fg:x="7026" fg:w="3576"/><text x="4.9042%" y="735.50">&lt;a..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (3,576 samples, 2.37%)</title><rect x="4.6542%" y="709" width="2.3689%" height="15" fill="rgb(227,165,31)" fg:x="7026" fg:w="3576"/><text x="4.9042%" y="719.50">as..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3,576 samples, 2.37%)</title><rect x="4.6542%" y="693" width="2.3689%" height="15" fill="rgb(228,167,24)" fg:x="7026" fg:w="3576"/><text x="4.9042%" y="703.50">st..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3,576 samples, 2.37%)</title><rect x="4.6542%" y="677" width="2.3689%" height="15" fill="rgb(228,143,12)" fg:x="7026" fg:w="3576"/><text x="4.9042%" y="687.50">st..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (3,576 samples, 2.37%)</title><rect x="4.6542%" y="661" width="2.3689%" height="15" fill="rgb(249,149,8)" fg:x="7026" fg:w="3576"/><text x="4.9042%" y="671.50">as..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (3,576 samples, 2.37%)</title><rect x="4.6542%" y="645" width="2.3689%" height="15" fill="rgb(243,35,44)" fg:x="7026" fg:w="3576"/><text x="4.9042%" y="655.50">&lt;a..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,576 samples, 2.37%)</title><rect x="4.6542%" y="629" width="2.3689%" height="15" fill="rgb(246,89,9)" fg:x="7026" fg:w="3576"/><text x="4.9042%" y="639.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::run::{{closure}} (3,576 samples, 2.37%)</title><rect x="4.6542%" y="613" width="2.3689%" height="15" fill="rgb(233,213,13)" fg:x="7026" fg:w="3576"/><text x="4.9042%" y="623.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,576 samples, 2.37%)</title><rect x="4.6542%" y="597" width="2.3689%" height="15" fill="rgb(233,141,41)" fg:x="7026" fg:w="3576"/><text x="4.9042%" y="607.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_source_reply::{{closure}} (3,576 samples, 2.37%)</title><rect x="4.6542%" y="581" width="2.3689%" height="15" fill="rgb(239,167,4)" fg:x="7026" fg:w="3576"/><text x="4.9042%" y="591.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,576 samples, 2.37%)</title><rect x="4.6542%" y="565" width="2.3689%" height="15" fill="rgb(209,217,16)" fg:x="7026" fg:w="3576"/><text x="4.9042%" y="575.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_data::{{closure}} (3,576 samples, 2.37%)</title><rect x="4.6542%" y="549" width="2.3689%" height="15" fill="rgb(219,88,35)" fg:x="7026" fg:w="3576"/><text x="4.9042%" y="559.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,576 samples, 2.37%)</title><rect x="4.6542%" y="533" width="2.3689%" height="15" fill="rgb(220,193,23)" fg:x="7026" fg:w="3576"/><text x="4.9042%" y="543.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::route_events::{{closure}} (3,576 samples, 2.37%)</title><rect x="4.6542%" y="517" width="2.3689%" height="15" fill="rgb(230,90,52)" fg:x="7026" fg:w="3576"/><text x="4.9042%" y="527.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,576 samples, 2.37%)</title><rect x="4.6542%" y="501" width="2.3689%" height="15" fill="rgb(252,106,19)" fg:x="7026" fg:w="3576"/><text x="4.9042%" y="511.50">&lt;c..</text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (3,576 samples, 2.37%)</title><rect x="4.6542%" y="485" width="2.3689%" height="15" fill="rgb(206,74,20)" fg:x="7026" fg:w="3576"/><text x="4.9042%" y="495.50">tr..</text></g><g><title>core::ptr::drop_in_place&lt;async_channel::Send&lt;alloc::boxed::Box&lt;tremor_runtime::pipeline::Msg&gt;&gt;&gt; (37 samples, 0.02%)</title><rect x="6.9986%" y="469" width="0.0245%" height="15" fill="rgb(230,138,44)" fg:x="10565" fg:w="37"/><text x="7.2486%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (37 samples, 0.02%)</title><rect x="6.9986%" y="453" width="0.0245%" height="15" fill="rgb(235,182,43)" fg:x="10565" fg:w="37"/><text x="7.2486%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (37 samples, 0.02%)</title><rect x="6.9986%" y="437" width="0.0245%" height="15" fill="rgb(242,16,51)" fg:x="10565" fg:w="37"/><text x="7.2486%" y="447.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (37 samples, 0.02%)</title><rect x="6.9986%" y="421" width="0.0245%" height="15" fill="rgb(248,9,4)" fg:x="10565" fg:w="37"/><text x="7.2486%" y="431.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::deref::Deref&gt;::deref (88 samples, 0.06%)</title><rect x="7.3298%" y="533" width="0.0583%" height="15" fill="rgb(210,31,22)" fg:x="11065" fg:w="88"/><text x="7.5798%" y="543.50"></text></g><g><title>beef::generic::Cow&lt;T,U&gt;::borrow (88 samples, 0.06%)</title><rect x="7.3298%" y="517" width="0.0583%" height="15" fill="rgb(239,54,39)" fg:x="11065" fg:w="88"/><text x="7.5798%" y="527.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (67 samples, 0.04%)</title><rect x="7.3881%" y="533" width="0.0444%" height="15" fill="rgb(230,99,41)" fg:x="11153" fg:w="67"/><text x="7.6381%" y="543.50"></text></g><g><title>[libc-2.31.so] (23 samples, 0.02%)</title><rect x="7.4325%" y="533" width="0.0152%" height="15" fill="rgb(253,106,12)" fg:x="11220" fg:w="23"/><text x="7.6825%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (26 samples, 0.02%)</title><rect x="7.4702%" y="485" width="0.0172%" height="15" fill="rgb(213,46,41)" fg:x="11277" fg:w="26"/><text x="7.7202%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (25 samples, 0.02%)</title><rect x="7.4709%" y="469" width="0.0166%" height="15" fill="rgb(215,133,35)" fg:x="11278" fg:w="25"/><text x="7.7209%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (25 samples, 0.02%)</title><rect x="7.4709%" y="453" width="0.0166%" height="15" fill="rgb(213,28,5)" fg:x="11278" fg:w="25"/><text x="7.7209%" y="463.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (18 samples, 0.01%)</title><rect x="7.4755%" y="437" width="0.0119%" height="15" fill="rgb(215,77,49)" fg:x="11285" fg:w="18"/><text x="7.7255%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (71 samples, 0.05%)</title><rect x="7.4875%" y="485" width="0.0470%" height="15" fill="rgb(248,100,22)" fg:x="11303" fg:w="71"/><text x="7.7375%" y="495.50"></text></g><g><title>[libc-2.31.so] (64 samples, 0.04%)</title><rect x="7.4921%" y="469" width="0.0424%" height="15" fill="rgb(208,67,9)" fg:x="11310" fg:w="64"/><text x="7.7421%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (133 samples, 0.09%)</title><rect x="7.4477%" y="533" width="0.0881%" height="15" fill="rgb(219,133,21)" fg:x="11243" fg:w="133"/><text x="7.6977%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (111 samples, 0.07%)</title><rect x="7.4623%" y="517" width="0.0735%" height="15" fill="rgb(246,46,29)" fg:x="11265" fg:w="111"/><text x="7.7123%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (111 samples, 0.07%)</title><rect x="7.4623%" y="501" width="0.0735%" height="15" fill="rgb(246,185,52)" fg:x="11265" fg:w="111"/><text x="7.7123%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::is_empty (68 samples, 0.05%)</title><rect x="7.5358%" y="533" width="0.0450%" height="15" fill="rgb(252,136,11)" fg:x="11376" fg:w="68"/><text x="7.7858%" y="543.50"></text></g><g><title>&lt;value_trait::generator::WriterGenerator&lt;W,V&gt; as value_trait::generator::BaseGenerator&gt;::get_writer (68 samples, 0.05%)</title><rect x="7.5809%" y="517" width="0.0450%" height="15" fill="rgb(219,138,53)" fg:x="11444" fg:w="68"/><text x="7.8309%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (27 samples, 0.02%)</title><rect x="7.6517%" y="453" width="0.0179%" height="15" fill="rgb(211,51,23)" fg:x="11551" fg:w="27"/><text x="7.9017%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (62 samples, 0.04%)</title><rect x="7.6696%" y="453" width="0.0411%" height="15" fill="rgb(247,221,28)" fg:x="11578" fg:w="62"/><text x="7.9196%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (18 samples, 0.01%)</title><rect x="7.6988%" y="437" width="0.0119%" height="15" fill="rgb(251,222,45)" fg:x="11622" fg:w="18"/><text x="7.9488%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (18 samples, 0.01%)</title><rect x="7.6988%" y="421" width="0.0119%" height="15" fill="rgb(217,162,53)" fg:x="11622" fg:w="18"/><text x="7.9488%" y="431.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (315 samples, 0.21%)</title><rect x="7.5809%" y="533" width="0.2087%" height="15" fill="rgb(229,93,14)" fg:x="11444" fg:w="315"/><text x="7.8309%" y="543.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (247 samples, 0.16%)</title><rect x="7.6259%" y="517" width="0.1636%" height="15" fill="rgb(209,67,49)" fg:x="11512" fg:w="247"/><text x="7.8759%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (247 samples, 0.16%)</title><rect x="7.6259%" y="501" width="0.1636%" height="15" fill="rgb(213,87,29)" fg:x="11512" fg:w="247"/><text x="7.8759%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (247 samples, 0.16%)</title><rect x="7.6259%" y="485" width="0.1636%" height="15" fill="rgb(205,151,52)" fg:x="11512" fg:w="247"/><text x="7.8759%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (247 samples, 0.16%)</title><rect x="7.6259%" y="469" width="0.1636%" height="15" fill="rgb(253,215,39)" fg:x="11512" fg:w="247"/><text x="7.8759%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (119 samples, 0.08%)</title><rect x="7.7107%" y="453" width="0.0788%" height="15" fill="rgb(221,220,41)" fg:x="11640" fg:w="119"/><text x="7.9607%" y="463.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_int (30 samples, 0.02%)</title><rect x="7.7895%" y="533" width="0.0199%" height="15" fill="rgb(218,133,21)" fg:x="11759" fg:w="30"/><text x="8.0395%" y="543.50"></text></g><g><title>itoa::write (30 samples, 0.02%)</title><rect x="7.7895%" y="517" width="0.0199%" height="15" fill="rgb(221,193,43)" fg:x="11759" fg:w="30"/><text x="8.0395%" y="527.50"></text></g><g><title>itoa::Buffer::format (30 samples, 0.02%)</title><rect x="7.7895%" y="501" width="0.0199%" height="15" fill="rgb(240,128,52)" fg:x="11759" fg:w="30"/><text x="8.0395%" y="511.50"></text></g><g><title>&lt;u64 as itoa::Integer&gt;::write (30 samples, 0.02%)</title><rect x="7.7895%" y="485" width="0.0199%" height="15" fill="rgb(253,114,12)" fg:x="11759" fg:w="30"/><text x="8.0395%" y="495.50"></text></g><g><title>&lt;u64 as itoa::IntegerPrivate&lt;[u8: _]&gt;&gt;::write_to (30 samples, 0.02%)</title><rect x="7.7895%" y="469" width="0.0199%" height="15" fill="rgb(215,223,47)" fg:x="11759" fg:w="30"/><text x="8.0395%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (98 samples, 0.06%)</title><rect x="7.8770%" y="437" width="0.0649%" height="15" fill="rgb(248,225,23)" fg:x="11891" fg:w="98"/><text x="8.1270%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (80 samples, 0.05%)</title><rect x="7.8889%" y="421" width="0.0530%" height="15" fill="rgb(250,108,0)" fg:x="11909" fg:w="80"/><text x="8.1389%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (80 samples, 0.05%)</title><rect x="7.8889%" y="405" width="0.0530%" height="15" fill="rgb(228,208,7)" fg:x="11909" fg:w="80"/><text x="8.1389%" y="415.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_char (282 samples, 0.19%)</title><rect x="7.8094%" y="517" width="0.1868%" height="15" fill="rgb(244,45,10)" fg:x="11789" fg:w="282"/><text x="8.0594%" y="527.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (277 samples, 0.18%)</title><rect x="7.8127%" y="501" width="0.1835%" height="15" fill="rgb(207,125,25)" fg:x="11794" fg:w="277"/><text x="8.0627%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (277 samples, 0.18%)</title><rect x="7.8127%" y="485" width="0.1835%" height="15" fill="rgb(210,195,18)" fg:x="11794" fg:w="277"/><text x="8.0627%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (277 samples, 0.18%)</title><rect x="7.8127%" y="469" width="0.1835%" height="15" fill="rgb(249,80,12)" fg:x="11794" fg:w="277"/><text x="8.0627%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (277 samples, 0.18%)</title><rect x="7.8127%" y="453" width="0.1835%" height="15" fill="rgb(221,65,9)" fg:x="11794" fg:w="277"/><text x="8.0627%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (82 samples, 0.05%)</title><rect x="7.9419%" y="437" width="0.0543%" height="15" fill="rgb(235,49,36)" fg:x="11989" fg:w="82"/><text x="8.1919%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (271 samples, 0.18%)</title><rect x="8.3625%" y="501" width="0.1795%" height="15" fill="rgb(225,32,20)" fg:x="12624" fg:w="271"/><text x="8.6125%" y="511.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (271 samples, 0.18%)</title><rect x="8.3625%" y="485" width="0.1795%" height="15" fill="rgb(215,141,46)" fg:x="12624" fg:w="271"/><text x="8.6125%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (81 samples, 0.05%)</title><rect x="8.5792%" y="421" width="0.0537%" height="15" fill="rgb(250,160,47)" fg:x="12951" fg:w="81"/><text x="8.8292%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (81 samples, 0.05%)</title><rect x="8.5792%" y="405" width="0.0537%" height="15" fill="rgb(216,222,40)" fg:x="12951" fg:w="81"/><text x="8.8292%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (81 samples, 0.05%)</title><rect x="8.5792%" y="389" width="0.0537%" height="15" fill="rgb(234,217,39)" fg:x="12951" fg:w="81"/><text x="8.8292%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (196 samples, 0.13%)</title><rect x="8.6328%" y="421" width="0.1298%" height="15" fill="rgb(207,178,40)" fg:x="13032" fg:w="196"/><text x="8.8828%" y="431.50"></text></g><g><title>[libc-2.31.so] (192 samples, 0.13%)</title><rect x="8.6355%" y="405" width="0.1272%" height="15" fill="rgb(221,136,13)" fg:x="13036" fg:w="192"/><text x="8.8855%" y="415.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (340 samples, 0.23%)</title><rect x="8.5421%" y="501" width="0.2252%" height="15" fill="rgb(249,199,10)" fg:x="12895" fg:w="340"/><text x="8.7921%" y="511.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (340 samples, 0.23%)</title><rect x="8.5421%" y="485" width="0.2252%" height="15" fill="rgb(249,222,13)" fg:x="12895" fg:w="340"/><text x="8.7921%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (340 samples, 0.23%)</title><rect x="8.5421%" y="469" width="0.2252%" height="15" fill="rgb(244,185,38)" fg:x="12895" fg:w="340"/><text x="8.7921%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (340 samples, 0.23%)</title><rect x="8.5421%" y="453" width="0.2252%" height="15" fill="rgb(236,202,9)" fg:x="12895" fg:w="340"/><text x="8.7921%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (340 samples, 0.23%)</title><rect x="8.5421%" y="437" width="0.2252%" height="15" fill="rgb(250,229,37)" fg:x="12895" fg:w="340"/><text x="8.7921%" y="447.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_cmpeq_epi8 (94 samples, 0.06%)</title><rect x="8.8421%" y="485" width="0.0623%" height="15" fill="rgb(206,174,23)" fg:x="13348" fg:w="94"/><text x="9.0921%" y="495.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (16 samples, 0.01%)</title><rect x="8.9044%" y="485" width="0.0106%" height="15" fill="rgb(211,33,43)" fg:x="13442" fg:w="16"/><text x="9.1544%" y="495.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (35 samples, 0.02%)</title><rect x="8.9150%" y="485" width="0.0232%" height="15" fill="rgb(245,58,50)" fg:x="13458" fg:w="35"/><text x="9.1650%" y="495.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_loadu_si256 (74 samples, 0.05%)</title><rect x="8.9382%" y="485" width="0.0490%" height="15" fill="rgb(244,68,36)" fg:x="13493" fg:w="74"/><text x="9.1882%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (74 samples, 0.05%)</title><rect x="8.9382%" y="469" width="0.0490%" height="15" fill="rgb(232,229,15)" fg:x="13493" fg:w="74"/><text x="9.1882%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (290 samples, 0.19%)</title><rect x="9.0183%" y="421" width="0.1921%" height="15" fill="rgb(254,30,23)" fg:x="13614" fg:w="290"/><text x="9.2683%" y="431.50"></text></g><g><title>[libc-2.31.so] (219 samples, 0.15%)</title><rect x="9.0654%" y="405" width="0.1451%" height="15" fill="rgb(235,160,14)" fg:x="13685" fg:w="219"/><text x="9.3154%" y="415.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager&lt;S&gt;::run::{{closure}} (3,307 samples, 2.19%)</title><rect x="7.0231%" y="741" width="2.1907%" height="15" fill="rgb(212,155,44)" fg:x="10602" fg:w="3307"/><text x="7.2731%" y="751.50">t..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (3,307 samples, 2.19%)</title><rect x="7.0231%" y="725" width="2.1907%" height="15" fill="rgb(226,2,50)" fg:x="10602" fg:w="3307"/><text x="7.2731%" y="735.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,307 samples, 2.19%)</title><rect x="7.0231%" y="709" width="2.1907%" height="15" fill="rgb(234,177,6)" fg:x="10602" fg:w="3307"/><text x="7.2731%" y="719.50">&lt;..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::Sink&gt;::on_event::{{closure}} (3,307 samples, 2.19%)</title><rect x="7.0231%" y="693" width="2.1907%" height="15" fill="rgb(217,24,9)" fg:x="10602" fg:w="3307"/><text x="7.2731%" y="703.50">&lt;..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize (3,307 samples, 2.19%)</title><rect x="7.0231%" y="677" width="2.1907%" height="15" fill="rgb(220,13,46)" fg:x="10602" fg:w="3307"/><text x="7.2731%" y="687.50">t..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize_for_stream (3,307 samples, 2.19%)</title><rect x="7.0231%" y="661" width="2.1907%" height="15" fill="rgb(239,221,27)" fg:x="10602" fg:w="3307"/><text x="7.2731%" y="671.50">t..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize_for_stream_with_codec (3,307 samples, 2.19%)</title><rect x="7.0231%" y="645" width="2.1907%" height="15" fill="rgb(222,198,25)" fg:x="10602" fg:w="3307"/><text x="7.2731%" y="655.50">t..</text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode (3,307 samples, 2.19%)</title><rect x="7.0231%" y="629" width="2.1907%" height="15" fill="rgb(211,99,13)" fg:x="10602" fg:w="3307"/><text x="7.2731%" y="639.50">&lt;..</text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode_into (3,307 samples, 2.19%)</title><rect x="7.0231%" y="613" width="2.1907%" height="15" fill="rgb(232,111,31)" fg:x="10602" fg:w="3307"/><text x="7.2731%" y="623.50">&lt;..</text></g><g><title>tremor_value::value::serialize::&lt;impl value_trait::Writable for tremor_value::value::Value&gt;::write (3,307 samples, 2.19%)</title><rect x="7.0231%" y="597" width="2.1907%" height="15" fill="rgb(245,82,37)" fg:x="10602" fg:w="3307"/><text x="7.2731%" y="607.50">t..</text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (3,307 samples, 2.19%)</title><rect x="7.0231%" y="581" width="2.1907%" height="15" fill="rgb(227,149,46)" fg:x="10602" fg:w="3307"/><text x="7.2731%" y="591.50">t..</text></g><g><title>tremor_value::value::serialize::FastGenerator::write_object (3,307 samples, 2.19%)</title><rect x="7.0231%" y="565" width="2.1907%" height="15" fill="rgb(218,36,50)" fg:x="10602" fg:w="3307"/><text x="7.2731%" y="575.50">t..</text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (3,307 samples, 2.19%)</title><rect x="7.0231%" y="549" width="2.1907%" height="15" fill="rgb(226,80,48)" fg:x="10602" fg:w="3307"/><text x="7.2731%" y="559.50">t..</text></g><g><title>value_trait::generator::BaseGenerator::write_string (2,120 samples, 1.40%)</title><rect x="7.8094%" y="533" width="1.4044%" height="15" fill="rgb(238,224,15)" fg:x="11789" fg:w="2120"/><text x="8.0594%" y="543.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (1,838 samples, 1.22%)</title><rect x="7.9962%" y="517" width="1.2175%" height="15" fill="rgb(241,136,10)" fg:x="12071" fg:w="1838"/><text x="8.2462%" y="527.50"></text></g><g><title>value_trait::generator::write_str_simd (674 samples, 0.45%)</title><rect x="8.7673%" y="501" width="0.4465%" height="15" fill="rgb(208,32,45)" fg:x="13235" fg:w="674"/><text x="9.0173%" y="511.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (337 samples, 0.22%)</title><rect x="8.9905%" y="485" width="0.2232%" height="15" fill="rgb(207,135,9)" fg:x="13572" fg:w="337"/><text x="9.2405%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (337 samples, 0.22%)</title><rect x="8.9905%" y="469" width="0.2232%" height="15" fill="rgb(206,86,44)" fg:x="13572" fg:w="337"/><text x="9.2405%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (337 samples, 0.22%)</title><rect x="8.9905%" y="453" width="0.2232%" height="15" fill="rgb(245,177,15)" fg:x="13572" fg:w="337"/><text x="9.2405%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (337 samples, 0.22%)</title><rect x="8.9905%" y="437" width="0.2232%" height="15" fill="rgb(206,64,50)" fg:x="13572" fg:w="337"/><text x="9.2405%" y="447.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::default::Default&gt;::default (141 samples, 0.09%)</title><rect x="9.6748%" y="613" width="0.0934%" height="15" fill="rgb(234,36,40)" fg:x="14605" fg:w="141"/><text x="9.9248%" y="623.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (139 samples, 0.09%)</title><rect x="10.3843%" y="421" width="0.0921%" height="15" fill="rgb(213,64,8)" fg:x="15676" fg:w="139"/><text x="10.6343%" y="431.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (754 samples, 0.50%)</title><rect x="9.9802%" y="549" width="0.4995%" height="15" fill="rgb(210,75,36)" fg:x="15066" fg:w="754"/><text x="10.2302%" y="559.50"></text></g><g><title>alloc::alloc::exchange_malloc (262 samples, 0.17%)</title><rect x="10.3061%" y="533" width="0.1736%" height="15" fill="rgb(229,88,21)" fg:x="15558" fg:w="262"/><text x="10.5561%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (262 samples, 0.17%)</title><rect x="10.3061%" y="517" width="0.1736%" height="15" fill="rgb(252,204,47)" fg:x="15558" fg:w="262"/><text x="10.5561%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (262 samples, 0.17%)</title><rect x="10.3061%" y="501" width="0.1736%" height="15" fill="rgb(208,77,27)" fg:x="15558" fg:w="262"/><text x="10.5561%" y="511.50"></text></g><g><title>alloc::alloc::alloc (261 samples, 0.17%)</title><rect x="10.3068%" y="485" width="0.1729%" height="15" fill="rgb(221,76,26)" fg:x="15559" fg:w="261"/><text x="10.5568%" y="495.50"></text></g><g><title>__rg_alloc (261 samples, 0.17%)</title><rect x="10.3068%" y="469" width="0.1729%" height="15" fill="rgb(225,139,18)" fg:x="15559" fg:w="261"/><text x="10.5568%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (261 samples, 0.17%)</title><rect x="10.3068%" y="453" width="0.1729%" height="15" fill="rgb(230,137,11)" fg:x="15559" fg:w="261"/><text x="10.5568%" y="463.50"></text></g><g><title>sn_rust_alloc (234 samples, 0.16%)</title><rect x="10.3247%" y="437" width="0.1550%" height="15" fill="rgb(212,28,1)" fg:x="15586" fg:w="234"/><text x="10.5747%" y="447.50"></text></g><g><title>&lt;tremor_pipeline::event::Event as core::default::Default&gt;::default (1,290 samples, 0.85%)</title><rect x="9.6364%" y="629" width="0.8545%" height="15" fill="rgb(248,164,17)" fg:x="14547" fg:w="1290"/><text x="9.8864%" y="639.50"></text></g><g><title>&lt;tremor_script::srs::EventPayload as core::default::Default&gt;::default (1,091 samples, 0.72%)</title><rect x="9.7682%" y="613" width="0.7227%" height="15" fill="rgb(222,171,42)" fg:x="14746" fg:w="1091"/><text x="10.0182%" y="623.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (782 samples, 0.52%)</title><rect x="9.9729%" y="597" width="0.5180%" height="15" fill="rgb(243,84,45)" fg:x="15055" fg:w="782"/><text x="10.2229%" y="607.50"></text></g><g><title>value_trait::Builder::object (771 samples, 0.51%)</title><rect x="9.9802%" y="581" width="0.5107%" height="15" fill="rgb(252,49,23)" fg:x="15066" fg:w="771"/><text x="10.2302%" y="591.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (771 samples, 0.51%)</title><rect x="9.9802%" y="565" width="0.5107%" height="15" fill="rgb(215,19,7)" fg:x="15066" fg:w="771"/><text x="10.2302%" y="575.50"></text></g><g><title>halfbrown::HashMap&lt;K,V&gt;::with_capacity (17 samples, 0.01%)</title><rect x="10.4797%" y="549" width="0.0113%" height="15" fill="rgb(238,81,41)" fg:x="15820" fg:w="17"/><text x="10.7297%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;core::pin::Pin&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;&gt;&gt; (23 samples, 0.02%)</title><rect x="10.4956%" y="613" width="0.0152%" height="15" fill="rgb(210,199,37)" fg:x="15844" fg:w="23"/><text x="10.7456%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (65 samples, 0.04%)</title><rect x="10.5115%" y="597" width="0.0431%" height="15" fill="rgb(244,192,49)" fg:x="15868" fg:w="65"/><text x="10.7615%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt;&gt; (39 samples, 0.03%)</title><rect x="10.5287%" y="581" width="0.0258%" height="15" fill="rgb(226,211,11)" fg:x="15894" fg:w="39"/><text x="10.7787%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (31 samples, 0.02%)</title><rect x="10.5340%" y="565" width="0.0205%" height="15" fill="rgb(236,162,54)" fg:x="15902" fg:w="31"/><text x="10.7840%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (31 samples, 0.02%)</title><rect x="10.5340%" y="549" width="0.0205%" height="15" fill="rgb(220,229,9)" fg:x="15902" fg:w="31"/><text x="10.7840%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::vecmap::VecMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (20 samples, 0.01%)</title><rect x="10.5413%" y="533" width="0.0132%" height="15" fill="rgb(250,87,22)" fg:x="15913" fg:w="20"/><text x="10.7913%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)&gt;&gt; (20 samples, 0.01%)</title><rect x="10.5413%" y="517" width="0.0132%" height="15" fill="rgb(239,43,17)" fg:x="15913" fg:w="20"/><text x="10.7913%" y="527.50"></text></g><g><title>sn_rust_dealloc (83 samples, 0.05%)</title><rect x="10.5545%" y="597" width="0.0550%" height="15" fill="rgb(231,177,25)" fg:x="15933" fg:w="83"/><text x="10.8045%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (175 samples, 0.12%)</title><rect x="10.4956%" y="629" width="0.1159%" height="15" fill="rgb(219,179,1)" fg:x="15844" fg:w="175"/><text x="10.7456%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (152 samples, 0.10%)</title><rect x="10.5108%" y="613" width="0.1007%" height="15" fill="rgb(238,219,53)" fg:x="15867" fg:w="152"/><text x="10.7608%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (26 samples, 0.02%)</title><rect x="10.6334%" y="533" width="0.0172%" height="15" fill="rgb(232,167,36)" fg:x="16052" fg:w="26"/><text x="10.8834%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)]&gt; (26 samples, 0.02%)</title><rect x="10.6334%" y="517" width="0.0172%" height="15" fill="rgb(244,19,51)" fg:x="16052" fg:w="26"/><text x="10.8834%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (64 samples, 0.04%)</title><rect x="10.6115%" y="629" width="0.0424%" height="15" fill="rgb(224,6,22)" fg:x="16019" fg:w="64"/><text x="10.8615%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt;&gt; (47 samples, 0.03%)</title><rect x="10.6228%" y="613" width="0.0311%" height="15" fill="rgb(224,145,5)" fg:x="16036" fg:w="47"/><text x="10.8728%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (37 samples, 0.02%)</title><rect x="10.6294%" y="597" width="0.0245%" height="15" fill="rgb(234,130,49)" fg:x="16046" fg:w="37"/><text x="10.8794%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (37 samples, 0.02%)</title><rect x="10.6294%" y="581" width="0.0245%" height="15" fill="rgb(254,6,2)" fg:x="16046" fg:w="37"/><text x="10.8794%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::vecmap::VecMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (31 samples, 0.02%)</title><rect x="10.6334%" y="565" width="0.0205%" height="15" fill="rgb(208,96,46)" fg:x="16052" fg:w="31"/><text x="10.8834%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)&gt;&gt; (31 samples, 0.02%)</title><rect x="10.6334%" y="549" width="0.0205%" height="15" fill="rgb(239,3,39)" fg:x="16052" fg:w="31"/><text x="10.8834%" y="559.50"></text></g><g><title>sn_rust_dealloc (45 samples, 0.03%)</title><rect x="10.6539%" y="629" width="0.0298%" height="15" fill="rgb(233,210,1)" fg:x="16083" fg:w="45"/><text x="10.9039%" y="639.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (2,247 samples, 1.49%)</title><rect x="9.2138%" y="645" width="1.4885%" height="15" fill="rgb(244,137,37)" fg:x="13909" fg:w="2247"/><text x="9.4638%" y="655.50"></text></g><g><title>tremor_pipeline::EventIdGenerator::next_with_pull_id (26 samples, 0.02%)</title><rect x="10.6850%" y="629" width="0.0172%" height="15" fill="rgb(240,136,2)" fg:x="16130" fg:w="26"/><text x="10.9350%" y="639.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (27 samples, 0.02%)</title><rect x="10.7625%" y="517" width="0.0179%" height="15" fill="rgb(239,18,37)" fg:x="16247" fg:w="27"/><text x="11.0125%" y="527.50"></text></g><g><title>alloc::alloc::exchange_malloc (73 samples, 0.05%)</title><rect x="10.7334%" y="629" width="0.0484%" height="15" fill="rgb(218,185,22)" fg:x="16203" fg:w="73"/><text x="10.9834%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (73 samples, 0.05%)</title><rect x="10.7334%" y="613" width="0.0484%" height="15" fill="rgb(225,218,4)" fg:x="16203" fg:w="73"/><text x="10.9834%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (73 samples, 0.05%)</title><rect x="10.7334%" y="597" width="0.0484%" height="15" fill="rgb(230,182,32)" fg:x="16203" fg:w="73"/><text x="10.9834%" y="607.50"></text></g><g><title>alloc::alloc::alloc (72 samples, 0.05%)</title><rect x="10.7340%" y="581" width="0.0477%" height="15" fill="rgb(242,56,43)" fg:x="16204" fg:w="72"/><text x="10.9840%" y="591.50"></text></g><g><title>__rg_alloc (72 samples, 0.05%)</title><rect x="10.7340%" y="565" width="0.0477%" height="15" fill="rgb(233,99,24)" fg:x="16204" fg:w="72"/><text x="10.9840%" y="575.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (72 samples, 0.05%)</title><rect x="10.7340%" y="549" width="0.0477%" height="15" fill="rgb(234,209,42)" fg:x="16204" fg:w="72"/><text x="10.9840%" y="559.50"></text></g><g><title>sn_rust_alloc (72 samples, 0.05%)</title><rect x="10.7340%" y="533" width="0.0477%" height="15" fill="rgb(227,7,12)" fg:x="16204" fg:w="72"/><text x="10.9840%" y="543.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (140 samples, 0.09%)</title><rect x="10.7022%" y="645" width="0.0927%" height="15" fill="rgb(245,203,43)" fg:x="16156" fg:w="140"/><text x="10.9522%" y="655.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (137 samples, 0.09%)</title><rect x="11.1216%" y="629" width="0.0908%" height="15" fill="rgb(238,205,33)" fg:x="16789" fg:w="137"/><text x="11.3716%" y="639.50"></text></g><g><title>alloc::alloc::exchange_malloc (66 samples, 0.04%)</title><rect x="11.2123%" y="629" width="0.0437%" height="15" fill="rgb(231,56,7)" fg:x="16926" fg:w="66"/><text x="11.4623%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (66 samples, 0.04%)</title><rect x="11.2123%" y="613" width="0.0437%" height="15" fill="rgb(244,186,29)" fg:x="16926" fg:w="66"/><text x="11.4623%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (66 samples, 0.04%)</title><rect x="11.2123%" y="597" width="0.0437%" height="15" fill="rgb(234,111,31)" fg:x="16926" fg:w="66"/><text x="11.4623%" y="607.50"></text></g><g><title>alloc::alloc::alloc (60 samples, 0.04%)</title><rect x="11.2163%" y="581" width="0.0397%" height="15" fill="rgb(241,149,10)" fg:x="16932" fg:w="60"/><text x="11.4663%" y="591.50"></text></g><g><title>__rg_alloc (60 samples, 0.04%)</title><rect x="11.2163%" y="565" width="0.0397%" height="15" fill="rgb(249,206,44)" fg:x="16932" fg:w="60"/><text x="11.4663%" y="575.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (60 samples, 0.04%)</title><rect x="11.2163%" y="549" width="0.0397%" height="15" fill="rgb(251,153,30)" fg:x="16932" fg:w="60"/><text x="11.4663%" y="559.50"></text></g><g><title>sn_rust_alloc (52 samples, 0.03%)</title><rect x="11.2216%" y="533" width="0.0344%" height="15" fill="rgb(239,152,38)" fg:x="16940" fg:w="52"/><text x="11.4716%" y="543.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (53 samples, 0.04%)</title><rect x="11.3024%" y="501" width="0.0351%" height="15" fill="rgb(249,139,47)" fg:x="17062" fg:w="53"/><text x="11.5524%" y="511.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (126 samples, 0.08%)</title><rect x="11.2560%" y="629" width="0.0835%" height="15" fill="rgb(244,64,35)" fg:x="16992" fg:w="126"/><text x="11.5060%" y="639.50"></text></g><g><title>alloc::alloc::exchange_malloc (117 samples, 0.08%)</title><rect x="11.2620%" y="613" width="0.0775%" height="15" fill="rgb(216,46,15)" fg:x="17001" fg:w="117"/><text x="11.5120%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (117 samples, 0.08%)</title><rect x="11.2620%" y="597" width="0.0775%" height="15" fill="rgb(250,74,19)" fg:x="17001" fg:w="117"/><text x="11.5120%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (117 samples, 0.08%)</title><rect x="11.2620%" y="581" width="0.0775%" height="15" fill="rgb(249,42,33)" fg:x="17001" fg:w="117"/><text x="11.5120%" y="591.50"></text></g><g><title>alloc::alloc::alloc (117 samples, 0.08%)</title><rect x="11.2620%" y="565" width="0.0775%" height="15" fill="rgb(242,149,17)" fg:x="17001" fg:w="117"/><text x="11.5120%" y="575.50"></text></g><g><title>__rg_alloc (117 samples, 0.08%)</title><rect x="11.2620%" y="549" width="0.0775%" height="15" fill="rgb(244,29,21)" fg:x="17001" fg:w="117"/><text x="11.5120%" y="559.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (117 samples, 0.08%)</title><rect x="11.2620%" y="533" width="0.0775%" height="15" fill="rgb(220,130,37)" fg:x="17001" fg:w="117"/><text x="11.5120%" y="543.50"></text></g><g><title>sn_rust_alloc (113 samples, 0.07%)</title><rect x="11.2646%" y="517" width="0.0749%" height="15" fill="rgb(211,67,2)" fg:x="17005" fg:w="113"/><text x="11.5146%" y="527.50"></text></g><g><title>core::pin::Pin&lt;P&gt;::as_mut (26 samples, 0.02%)</title><rect x="11.3395%" y="629" width="0.0172%" height="15" fill="rgb(235,68,52)" fg:x="17118" fg:w="26"/><text x="11.5895%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (26 samples, 0.02%)</title><rect x="11.3395%" y="613" width="0.0172%" height="15" fill="rgb(246,142,3)" fg:x="17118" fg:w="26"/><text x="11.5895%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (26 samples, 0.02%)</title><rect x="11.3395%" y="597" width="0.0172%" height="15" fill="rgb(241,25,7)" fg:x="17118" fg:w="26"/><text x="11.5895%" y="607.50"></text></g><g><title>&lt;halfbrown::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (212 samples, 0.14%)</title><rect x="11.6098%" y="565" width="0.1404%" height="15" fill="rgb(242,119,39)" fg:x="17526" fg:w="212"/><text x="11.8598%" y="575.50"></text></g><g><title>&lt;halfbrown::HashMapInt&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (174 samples, 0.12%)</title><rect x="11.6349%" y="549" width="0.1153%" height="15" fill="rgb(241,98,45)" fg:x="17564" fg:w="174"/><text x="11.8849%" y="559.50"></text></g><g><title>&lt;halfbrown::vecmap::VecMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (172 samples, 0.11%)</title><rect x="11.6363%" y="533" width="0.1139%" height="15" fill="rgb(254,28,30)" fg:x="17566" fg:w="172"/><text x="11.8863%" y="543.50"></text></g><g><title>&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (269 samples, 0.18%)</title><rect x="11.6098%" y="581" width="0.1782%" height="15" fill="rgb(241,142,54)" fg:x="17526" fg:w="269"/><text x="11.8598%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (57 samples, 0.04%)</title><rect x="11.7502%" y="565" width="0.0378%" height="15" fill="rgb(222,85,15)" fg:x="17738" fg:w="57"/><text x="12.0002%" y="575.50"></text></g><g><title>core::ptr::write (57 samples, 0.04%)</title><rect x="11.7502%" y="549" width="0.0378%" height="15" fill="rgb(210,85,47)" fg:x="17738" fg:w="57"/><text x="12.0002%" y="559.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (348 samples, 0.23%)</title><rect x="11.5873%" y="613" width="0.2305%" height="15" fill="rgb(224,206,25)" fg:x="17492" fg:w="348"/><text x="11.8373%" y="623.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (321 samples, 0.21%)</title><rect x="11.6051%" y="597" width="0.2126%" height="15" fill="rgb(243,201,19)" fg:x="17519" fg:w="321"/><text x="11.8551%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (45 samples, 0.03%)</title><rect x="11.7880%" y="581" width="0.0298%" height="15" fill="rgb(236,59,4)" fg:x="17795" fg:w="45"/><text x="12.0380%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (45 samples, 0.03%)</title><rect x="11.7880%" y="565" width="0.0298%" height="15" fill="rgb(254,179,45)" fg:x="17795" fg:w="45"/><text x="12.0380%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (45 samples, 0.03%)</title><rect x="11.7880%" y="549" width="0.0298%" height="15" fill="rgb(226,14,10)" fg:x="17795" fg:w="45"/><text x="12.0380%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (45 samples, 0.03%)</title><rect x="11.7880%" y="533" width="0.0298%" height="15" fill="rgb(244,27,41)" fg:x="17795" fg:w="45"/><text x="12.0380%" y="543.50"></text></g><g><title>alloc::alloc::alloc (45 samples, 0.03%)</title><rect x="11.7880%" y="517" width="0.0298%" height="15" fill="rgb(235,35,32)" fg:x="17795" fg:w="45"/><text x="12.0380%" y="527.50"></text></g><g><title>__rg_alloc (45 samples, 0.03%)</title><rect x="11.7880%" y="501" width="0.0298%" height="15" fill="rgb(218,68,31)" fg:x="17795" fg:w="45"/><text x="12.0380%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (45 samples, 0.03%)</title><rect x="11.7880%" y="485" width="0.0298%" height="15" fill="rgb(207,120,37)" fg:x="17795" fg:w="45"/><text x="12.0380%" y="495.50"></text></g><g><title>sn_rust_alloc (45 samples, 0.03%)</title><rect x="11.7880%" y="469" width="0.0298%" height="15" fill="rgb(227,98,0)" fg:x="17795" fg:w="45"/><text x="12.0380%" y="479.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::run::{{closure}} (4,205 samples, 2.79%)</title><rect x="9.2138%" y="741" width="2.7855%" height="15" fill="rgb(207,7,3)" fg:x="13909" fg:w="4205"/><text x="9.4638%" y="751.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,205 samples, 2.79%)</title><rect x="9.2138%" y="725" width="2.7855%" height="15" fill="rgb(206,98,19)" fg:x="13909" fg:w="4205"/><text x="9.4638%" y="735.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_source_reply::{{closure}} (4,205 samples, 2.79%)</title><rect x="9.2138%" y="709" width="2.7855%" height="15" fill="rgb(217,5,26)" fg:x="13909" fg:w="4205"/><text x="9.4638%" y="719.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,205 samples, 2.79%)</title><rect x="9.2138%" y="693" width="2.7855%" height="15" fill="rgb(235,190,38)" fg:x="13909" fg:w="4205"/><text x="9.4638%" y="703.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_data::{{closure}} (4,205 samples, 2.79%)</title><rect x="9.2138%" y="677" width="2.7855%" height="15" fill="rgb(247,86,24)" fg:x="13909" fg:w="4205"/><text x="9.4638%" y="687.50">tr..</text></g><g><title>tremor_runtime::connectors::source::build_events (4,205 samples, 2.79%)</title><rect x="9.2138%" y="661" width="2.7855%" height="15" fill="rgb(205,101,16)" fg:x="13909" fg:w="4205"/><text x="9.4638%" y="671.50">tr..</text></g><g><title>tremor_script::srs::EventPayload::try_new (1,818 samples, 1.20%)</title><rect x="10.7950%" y="645" width="1.2043%" height="15" fill="rgb(246,168,33)" fg:x="16296" fg:w="1818"/><text x="11.0450%" y="655.50"></text></g><g><title>tremor_runtime::connectors::source::build_last_events::{{closure}} (970 samples, 0.64%)</title><rect x="11.3567%" y="629" width="0.6426%" height="15" fill="rgb(231,114,1)" fg:x="17144" fg:w="970"/><text x="11.6067%" y="639.50"></text></g><g><title>tremor_script::srs::ValueAndMeta::from_parts (274 samples, 0.18%)</title><rect x="11.8178%" y="613" width="0.1815%" height="15" fill="rgb(207,184,53)" fg:x="17840" fg:w="274"/><text x="12.0678%" y="623.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (17 samples, 0.01%)</title><rect x="12.0821%" y="597" width="0.0113%" height="15" fill="rgb(224,95,51)" fg:x="18239" fg:w="17"/><text x="12.3321%" y="607.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (17 samples, 0.01%)</title><rect x="12.0821%" y="581" width="0.0113%" height="15" fill="rgb(212,188,45)" fg:x="18239" fg:w="17"/><text x="12.3321%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (31 samples, 0.02%)</title><rect x="12.1020%" y="501" width="0.0205%" height="15" fill="rgb(223,154,38)" fg:x="18269" fg:w="31"/><text x="12.3520%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_swap (31 samples, 0.02%)</title><rect x="12.1020%" y="485" width="0.0205%" height="15" fill="rgb(251,22,52)" fg:x="18269" fg:w="31"/><text x="12.3520%" y="495.50"></text></g><g><title>core::mem::drop (38 samples, 0.03%)</title><rect x="12.1013%" y="597" width="0.0252%" height="15" fill="rgb(229,209,22)" fg:x="18268" fg:w="38"/><text x="12.3513%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (38 samples, 0.03%)</title><rect x="12.1013%" y="581" width="0.0252%" height="15" fill="rgb(234,138,34)" fg:x="18268" fg:w="38"/><text x="12.3513%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (37 samples, 0.02%)</title><rect x="12.1020%" y="565" width="0.0245%" height="15" fill="rgb(212,95,11)" fg:x="18269" fg:w="37"/><text x="12.3520%" y="575.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.02%)</title><rect x="12.1020%" y="549" width="0.0245%" height="15" fill="rgb(240,179,47)" fg:x="18269" fg:w="37"/><text x="12.3520%" y="559.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (37 samples, 0.02%)</title><rect x="12.1020%" y="533" width="0.0245%" height="15" fill="rgb(240,163,11)" fg:x="18269" fg:w="37"/><text x="12.3520%" y="543.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (37 samples, 0.02%)</title><rect x="12.1020%" y="517" width="0.0245%" height="15" fill="rgb(236,37,12)" fg:x="18269" fg:w="37"/><text x="12.3520%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (27 samples, 0.02%)</title><rect x="12.1265%" y="597" width="0.0179%" height="15" fill="rgb(232,164,16)" fg:x="18306" fg:w="27"/><text x="12.3765%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (26 samples, 0.02%)</title><rect x="12.1271%" y="581" width="0.0172%" height="15" fill="rgb(244,205,15)" fg:x="18307" fg:w="26"/><text x="12.3771%" y="591.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (26 samples, 0.02%)</title><rect x="12.1271%" y="565" width="0.0172%" height="15" fill="rgb(223,117,47)" fg:x="18307" fg:w="26"/><text x="12.3771%" y="575.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (26 samples, 0.02%)</title><rect x="12.1271%" y="549" width="0.0172%" height="15" fill="rgb(244,107,35)" fg:x="18307" fg:w="26"/><text x="12.3771%" y="559.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (26 samples, 0.02%)</title><rect x="12.1271%" y="533" width="0.0172%" height="15" fill="rgb(205,140,8)" fg:x="18307" fg:w="26"/><text x="12.3771%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (26 samples, 0.02%)</title><rect x="12.1271%" y="517" width="0.0172%" height="15" fill="rgb(228,84,46)" fg:x="18307" fg:w="26"/><text x="12.3771%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_swap (26 samples, 0.02%)</title><rect x="12.1271%" y="501" width="0.0172%" height="15" fill="rgb(254,188,9)" fg:x="18307" fg:w="26"/><text x="12.3771%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (47 samples, 0.03%)</title><rect x="12.1536%" y="533" width="0.0311%" height="15" fill="rgb(206,112,54)" fg:x="18347" fg:w="47"/><text x="12.4036%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (47 samples, 0.03%)</title><rect x="12.1536%" y="517" width="0.0311%" height="15" fill="rgb(216,84,49)" fg:x="18347" fg:w="47"/><text x="12.4036%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (21 samples, 0.01%)</title><rect x="12.1874%" y="517" width="0.0139%" height="15" fill="rgb(214,194,35)" fg:x="18398" fg:w="21"/><text x="12.4374%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (21 samples, 0.01%)</title><rect x="12.1874%" y="501" width="0.0139%" height="15" fill="rgb(249,28,3)" fg:x="18398" fg:w="21"/><text x="12.4374%" y="511.50"></text></g><g><title>core::hint::spin_loop (390 samples, 0.26%)</title><rect x="12.2185%" y="501" width="0.2583%" height="15" fill="rgb(222,56,52)" fg:x="18445" fg:w="390"/><text x="12.4685%" y="511.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (390 samples, 0.26%)</title><rect x="12.2185%" y="485" width="0.2583%" height="15" fill="rgb(245,217,50)" fg:x="18445" fg:w="390"/><text x="12.4685%" y="495.50"></text></g><g><title>event_listener::Inner::lock (537 samples, 0.36%)</title><rect x="12.1450%" y="597" width="0.3557%" height="15" fill="rgb(213,201,24)" fg:x="18334" fg:w="537"/><text x="12.3950%" y="607.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (533 samples, 0.35%)</title><rect x="12.1477%" y="581" width="0.3531%" height="15" fill="rgb(248,116,28)" fg:x="18338" fg:w="533"/><text x="12.3977%" y="591.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (525 samples, 0.35%)</title><rect x="12.1530%" y="565" width="0.3478%" height="15" fill="rgb(219,72,43)" fg:x="18346" fg:w="525"/><text x="12.4030%" y="575.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (525 samples, 0.35%)</title><rect x="12.1530%" y="549" width="0.3478%" height="15" fill="rgb(209,138,14)" fg:x="18346" fg:w="525"/><text x="12.4030%" y="559.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (477 samples, 0.32%)</title><rect x="12.1848%" y="533" width="0.3160%" height="15" fill="rgb(222,18,33)" fg:x="18394" fg:w="477"/><text x="12.4348%" y="543.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (433 samples, 0.29%)</title><rect x="12.2139%" y="517" width="0.2868%" height="15" fill="rgb(213,199,7)" fg:x="18438" fg:w="433"/><text x="12.4639%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (36 samples, 0.02%)</title><rect x="12.4769%" y="501" width="0.0238%" height="15" fill="rgb(250,110,10)" fg:x="18835" fg:w="36"/><text x="12.7269%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_load (36 samples, 0.02%)</title><rect x="12.4769%" y="485" width="0.0238%" height="15" fill="rgb(248,123,6)" fg:x="18835" fg:w="36"/><text x="12.7269%" y="495.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (672 samples, 0.45%)</title><rect x="12.0768%" y="613" width="0.4452%" height="15" fill="rgb(206,91,31)" fg:x="18231" fg:w="672"/><text x="12.3268%" y="623.50"></text></g><g><title>event_listener::List::remove (32 samples, 0.02%)</title><rect x="12.5007%" y="597" width="0.0212%" height="15" fill="rgb(211,154,13)" fg:x="18871" fg:w="32"/><text x="12.7507%" y="607.50"></text></g><g><title>concurrent_queue::full_fence (53 samples, 0.04%)</title><rect x="12.6259%" y="565" width="0.0351%" height="15" fill="rgb(225,148,7)" fg:x="19060" fg:w="53"/><text x="12.8759%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (50 samples, 0.03%)</title><rect x="12.6279%" y="549" width="0.0331%" height="15" fill="rgb(220,160,43)" fg:x="19063" fg:w="50"/><text x="12.8779%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (50 samples, 0.03%)</title><rect x="12.6279%" y="533" width="0.0331%" height="15" fill="rgb(213,52,39)" fg:x="19063" fg:w="50"/><text x="12.8779%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (50 samples, 0.03%)</title><rect x="12.6279%" y="517" width="0.0331%" height="15" fill="rgb(243,137,7)" fg:x="19063" fg:w="50"/><text x="12.8779%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (216 samples, 0.14%)</title><rect x="12.6617%" y="565" width="0.1431%" height="15" fill="rgb(230,79,13)" fg:x="19114" fg:w="216"/><text x="12.9117%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (216 samples, 0.14%)</title><rect x="12.6617%" y="549" width="0.1431%" height="15" fill="rgb(247,105,23)" fg:x="19114" fg:w="216"/><text x="12.9117%" y="559.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (642 samples, 0.43%)</title><rect x="12.5378%" y="597" width="0.4253%" height="15" fill="rgb(223,179,41)" fg:x="18927" fg:w="642"/><text x="12.7878%" y="607.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (614 samples, 0.41%)</title><rect x="12.5564%" y="581" width="0.4067%" height="15" fill="rgb(218,9,34)" fg:x="18955" fg:w="614"/><text x="12.8064%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (239 samples, 0.16%)</title><rect x="12.8048%" y="565" width="0.1583%" height="15" fill="rgb(222,106,8)" fg:x="19330" fg:w="239"/><text x="13.0548%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_load (238 samples, 0.16%)</title><rect x="12.8055%" y="549" width="0.1577%" height="15" fill="rgb(211,220,0)" fg:x="19331" fg:w="238"/><text x="13.0555%" y="559.50"></text></g><g><title>async_executor::State::notify (22 samples, 0.01%)</title><rect x="12.9989%" y="501" width="0.0146%" height="15" fill="rgb(229,52,16)" fg:x="19623" fg:w="22"/><text x="13.2489%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (19 samples, 0.01%)</title><rect x="13.0148%" y="469" width="0.0126%" height="15" fill="rgb(212,155,18)" fg:x="19647" fg:w="19"/><text x="13.2648%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (19 samples, 0.01%)</title><rect x="13.0148%" y="453" width="0.0126%" height="15" fill="rgb(242,21,14)" fg:x="19647" fg:w="19"/><text x="13.2648%" y="463.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (49 samples, 0.03%)</title><rect x="12.9989%" y="517" width="0.0325%" height="15" fill="rgb(222,19,48)" fg:x="19623" fg:w="49"/><text x="13.2489%" y="527.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (27 samples, 0.02%)</title><rect x="13.0135%" y="501" width="0.0179%" height="15" fill="rgb(232,45,27)" fg:x="19645" fg:w="27"/><text x="13.2635%" y="511.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (26 samples, 0.02%)</title><rect x="13.0141%" y="485" width="0.0172%" height="15" fill="rgb(249,103,42)" fg:x="19646" fg:w="26"/><text x="13.2641%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (20 samples, 0.01%)</title><rect x="13.0314%" y="517" width="0.0132%" height="15" fill="rgb(246,81,33)" fg:x="19672" fg:w="20"/><text x="13.2814%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (20 samples, 0.01%)</title><rect x="13.0314%" y="501" width="0.0132%" height="15" fill="rgb(252,33,42)" fg:x="19672" fg:w="20"/><text x="13.2814%" y="511.50"></text></g><g><title>event_listener::List::notify (83 samples, 0.05%)</title><rect x="12.9949%" y="581" width="0.0550%" height="15" fill="rgb(209,212,41)" fg:x="19617" fg:w="83"/><text x="13.2449%" y="591.50"></text></g><g><title>core::task::wake::Waker::wake (82 samples, 0.05%)</title><rect x="12.9956%" y="565" width="0.0543%" height="15" fill="rgb(207,154,6)" fg:x="19618" fg:w="82"/><text x="13.2456%" y="575.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (82 samples, 0.05%)</title><rect x="12.9956%" y="549" width="0.0543%" height="15" fill="rgb(223,64,47)" fg:x="19618" fg:w="82"/><text x="13.2456%" y="559.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (77 samples, 0.05%)</title><rect x="12.9989%" y="533" width="0.0510%" height="15" fill="rgb(211,161,38)" fg:x="19623" fg:w="77"/><text x="13.2489%" y="543.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (1,460 samples, 0.97%)</title><rect x="12.5219%" y="613" width="0.9672%" height="15" fill="rgb(219,138,40)" fg:x="18903" fg:w="1460"/><text x="12.7719%" y="623.50"></text></g><g><title>event_listener::Event::notify (794 samples, 0.53%)</title><rect x="12.9631%" y="597" width="0.5260%" height="15" fill="rgb(241,228,46)" fg:x="19569" fg:w="794"/><text x="13.2131%" y="607.50"></text></g><g><title>event_listener::full_fence (663 samples, 0.44%)</title><rect x="13.0499%" y="581" width="0.4392%" height="15" fill="rgb(223,209,38)" fg:x="19700" fg:w="663"/><text x="13.2999%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (663 samples, 0.44%)</title><rect x="13.0499%" y="565" width="0.4392%" height="15" fill="rgb(236,164,45)" fg:x="19700" fg:w="663"/><text x="13.2999%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (663 samples, 0.44%)</title><rect x="13.0499%" y="549" width="0.4392%" height="15" fill="rgb(231,15,5)" fg:x="19700" fg:w="663"/><text x="13.2999%" y="559.50"></text></g><g><title>event_listener::Inner::lock (29 samples, 0.02%)</title><rect x="13.5070%" y="565" width="0.0192%" height="15" fill="rgb(252,35,15)" fg:x="20390" fg:w="29"/><text x="13.7570%" y="575.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (29 samples, 0.02%)</title><rect x="13.5070%" y="549" width="0.0192%" height="15" fill="rgb(248,181,18)" fg:x="20390" fg:w="29"/><text x="13.7570%" y="559.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (27 samples, 0.02%)</title><rect x="13.5083%" y="533" width="0.0179%" height="15" fill="rgb(233,39,42)" fg:x="20392" fg:w="27"/><text x="13.7583%" y="543.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (27 samples, 0.02%)</title><rect x="13.5083%" y="517" width="0.0179%" height="15" fill="rgb(238,110,33)" fg:x="20392" fg:w="27"/><text x="13.7583%" y="527.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (18 samples, 0.01%)</title><rect x="13.5143%" y="501" width="0.0119%" height="15" fill="rgb(233,195,10)" fg:x="20401" fg:w="18"/><text x="13.7643%" y="511.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (42 samples, 0.03%)</title><rect x="13.5023%" y="581" width="0.0278%" height="15" fill="rgb(254,105,3)" fg:x="20383" fg:w="42"/><text x="13.7523%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (100 samples, 0.07%)</title><rect x="13.4964%" y="613" width="0.0662%" height="15" fill="rgb(221,225,9)" fg:x="20374" fg:w="100"/><text x="13.7464%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (91 samples, 0.06%)</title><rect x="13.5023%" y="597" width="0.0603%" height="15" fill="rgb(224,227,45)" fg:x="20383" fg:w="91"/><text x="13.7523%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (49 samples, 0.03%)</title><rect x="13.5302%" y="581" width="0.0325%" height="15" fill="rgb(229,198,43)" fg:x="20425" fg:w="49"/><text x="13.7802%" y="591.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (49 samples, 0.03%)</title><rect x="13.5302%" y="565" width="0.0325%" height="15" fill="rgb(206,209,35)" fg:x="20425" fg:w="49"/><text x="13.7802%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (48 samples, 0.03%)</title><rect x="13.5308%" y="549" width="0.0318%" height="15" fill="rgb(245,195,53)" fg:x="20426" fg:w="48"/><text x="13.7808%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_sub (48 samples, 0.03%)</title><rect x="13.5308%" y="533" width="0.0318%" height="15" fill="rgb(240,92,26)" fg:x="20426" fg:w="48"/><text x="13.7808%" y="543.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (26 samples, 0.02%)</title><rect x="13.5659%" y="597" width="0.0172%" height="15" fill="rgb(207,40,23)" fg:x="20479" fg:w="26"/><text x="13.8159%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (26 samples, 0.02%)</title><rect x="13.5659%" y="581" width="0.0172%" height="15" fill="rgb(223,111,35)" fg:x="20479" fg:w="26"/><text x="13.8159%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_add (26 samples, 0.02%)</title><rect x="13.5659%" y="565" width="0.0172%" height="15" fill="rgb(229,147,28)" fg:x="20479" fg:w="26"/><text x="13.8159%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (35 samples, 0.02%)</title><rect x="13.5832%" y="597" width="0.0232%" height="15" fill="rgb(211,29,28)" fg:x="20505" fg:w="35"/><text x="13.8332%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (33 samples, 0.02%)</title><rect x="13.5845%" y="581" width="0.0219%" height="15" fill="rgb(228,72,33)" fg:x="20507" fg:w="33"/><text x="13.8345%" y="591.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.02%)</title><rect x="13.5845%" y="565" width="0.0219%" height="15" fill="rgb(205,214,31)" fg:x="20507" fg:w="33"/><text x="13.8345%" y="575.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (33 samples, 0.02%)</title><rect x="13.5845%" y="549" width="0.0219%" height="15" fill="rgb(224,111,15)" fg:x="20507" fg:w="33"/><text x="13.8345%" y="559.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (33 samples, 0.02%)</title><rect x="13.5845%" y="533" width="0.0219%" height="15" fill="rgb(253,21,26)" fg:x="20507" fg:w="33"/><text x="13.8345%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (33 samples, 0.02%)</title><rect x="13.5845%" y="517" width="0.0219%" height="15" fill="rgb(245,139,43)" fg:x="20507" fg:w="33"/><text x="13.8345%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_swap (33 samples, 0.02%)</title><rect x="13.5845%" y="501" width="0.0219%" height="15" fill="rgb(252,170,7)" fg:x="20507" fg:w="33"/><text x="13.8345%" y="511.50"></text></g><g><title>event_listener::Inner::lock (23 samples, 0.02%)</title><rect x="13.6070%" y="597" width="0.0152%" height="15" fill="rgb(231,118,14)" fg:x="20541" fg:w="23"/><text x="13.8570%" y="607.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (19 samples, 0.01%)</title><rect x="13.6097%" y="581" width="0.0126%" height="15" fill="rgb(238,83,0)" fg:x="20545" fg:w="19"/><text x="13.8597%" y="591.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (17 samples, 0.01%)</title><rect x="13.6110%" y="565" width="0.0113%" height="15" fill="rgb(221,39,39)" fg:x="20547" fg:w="17"/><text x="13.8610%" y="575.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (17 samples, 0.01%)</title><rect x="13.6110%" y="549" width="0.0113%" height="15" fill="rgb(222,119,46)" fg:x="20547" fg:w="17"/><text x="13.8610%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (17 samples, 0.01%)</title><rect x="13.6110%" y="533" width="0.0113%" height="15" fill="rgb(222,165,49)" fg:x="20547" fg:w="17"/><text x="13.8610%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (17 samples, 0.01%)</title><rect x="13.6110%" y="517" width="0.0113%" height="15" fill="rgb(219,113,52)" fg:x="20547" fg:w="17"/><text x="13.8610%" y="527.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (2,396 samples, 1.59%)</title><rect x="12.0516%" y="629" width="1.5872%" height="15" fill="rgb(214,7,15)" fg:x="18193" fg:w="2396"/><text x="12.3016%" y="639.50"></text></g><g><title>event_listener::Event::listen (115 samples, 0.08%)</title><rect x="13.5626%" y="613" width="0.0762%" height="15" fill="rgb(235,32,4)" fg:x="20474" fg:w="115"/><text x="13.8126%" y="623.50"></text></g><g><title>event_listener::full_fence (21 samples, 0.01%)</title><rect x="13.6249%" y="597" width="0.0139%" height="15" fill="rgb(238,90,54)" fg:x="20568" fg:w="21"/><text x="13.8749%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (18 samples, 0.01%)</title><rect x="13.6269%" y="581" width="0.0119%" height="15" fill="rgb(213,208,19)" fg:x="20571" fg:w="18"/><text x="13.8769%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (18 samples, 0.01%)</title><rect x="13.6269%" y="565" width="0.0119%" height="15" fill="rgb(233,156,4)" fg:x="20571" fg:w="18"/><text x="13.8769%" y="575.50"></text></g><g><title>[libc-2.31.so] (236 samples, 0.16%)</title><rect x="13.6468%" y="613" width="0.1563%" height="15" fill="rgb(207,194,5)" fg:x="20601" fg:w="236"/><text x="13.8968%" y="623.50"></text></g><g><title>[libc-2.31.so] (583 samples, 0.39%)</title><rect x="13.8077%" y="581" width="0.3862%" height="15" fill="rgb(206,111,30)" fg:x="20844" fg:w="583"/><text x="14.0577%" y="591.50"></text></g><g><title>sn_rust_dealloc (93 samples, 0.06%)</title><rect x="14.1979%" y="501" width="0.0616%" height="15" fill="rgb(243,70,54)" fg:x="21433" fg:w="93"/><text x="14.4479%" y="511.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (3,672 samples, 2.43%)</title><rect x="12.0198%" y="661" width="2.4324%" height="15" fill="rgb(242,28,8)" fg:x="18145" fg:w="3672"/><text x="12.2698%" y="671.50">&lt;a..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (3,658 samples, 2.42%)</title><rect x="12.0291%" y="645" width="2.4232%" height="15" fill="rgb(219,106,18)" fg:x="18159" fg:w="3658"/><text x="12.2791%" y="655.50">&lt;a..</text></g><g><title>core::option::Option&lt;T&gt;::map (1,228 samples, 0.81%)</title><rect x="13.6388%" y="629" width="0.8135%" height="15" fill="rgb(244,222,10)" fg:x="20589" fg:w="1228"/><text x="13.8888%" y="639.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (980 samples, 0.65%)</title><rect x="13.8031%" y="613" width="0.6492%" height="15" fill="rgb(236,179,52)" fg:x="20837" fg:w="980"/><text x="14.0531%" y="623.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}}::{{closure}} (980 samples, 0.65%)</title><rect x="13.8031%" y="597" width="0.6492%" height="15" fill="rgb(213,23,39)" fg:x="20837" fg:w="980"/><text x="14.0531%" y="607.50"></text></g><g><title>alloc::alloc::box_free (390 samples, 0.26%)</title><rect x="14.1939%" y="581" width="0.2583%" height="15" fill="rgb(238,48,10)" fg:x="21427" fg:w="390"/><text x="14.4439%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (390 samples, 0.26%)</title><rect x="14.1939%" y="565" width="0.2583%" height="15" fill="rgb(251,196,23)" fg:x="21427" fg:w="390"/><text x="14.4439%" y="575.50"></text></g><g><title>alloc::alloc::dealloc (390 samples, 0.26%)</title><rect x="14.1939%" y="549" width="0.2583%" height="15" fill="rgb(250,152,24)" fg:x="21427" fg:w="390"/><text x="14.4439%" y="559.50"></text></g><g><title>__rg_dealloc (390 samples, 0.26%)</title><rect x="14.1939%" y="533" width="0.2583%" height="15" fill="rgb(209,150,17)" fg:x="21427" fg:w="390"/><text x="14.4439%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (390 samples, 0.26%)</title><rect x="14.1939%" y="517" width="0.2583%" height="15" fill="rgb(234,202,34)" fg:x="21427" fg:w="390"/><text x="14.4439%" y="527.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (288 samples, 0.19%)</title><rect x="14.2615%" y="501" width="0.1908%" height="15" fill="rgb(253,148,53)" fg:x="21529" fg:w="288"/><text x="14.5115%" y="511.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,572 samples, 3.03%)</title><rect x="11.9993%" y="725" width="3.0286%" height="15" fill="rgb(218,129,16)" fg:x="18114" fg:w="4572"/><text x="12.2493%" y="735.50">&lt;as..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (4,572 samples, 3.03%)</title><rect x="11.9993%" y="709" width="3.0286%" height="15" fill="rgb(216,85,19)" fg:x="18114" fg:w="4572"/><text x="12.2493%" y="719.50">&lt;tr..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (4,572 samples, 3.03%)</title><rect x="11.9993%" y="693" width="3.0286%" height="15" fill="rgb(235,228,7)" fg:x="18114" fg:w="4572"/><text x="12.2493%" y="703.50">&lt;as..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (4,572 samples, 3.03%)</title><rect x="11.9993%" y="677" width="3.0286%" height="15" fill="rgb(245,175,0)" fg:x="18114" fg:w="4572"/><text x="12.2493%" y="687.50">&lt;tr..</text></g><g><title>[libc-2.31.so] (869 samples, 0.58%)</title><rect x="14.4523%" y="661" width="0.5757%" height="15" fill="rgb(208,168,36)" fg:x="21817" fg:w="869"/><text x="14.7023%" y="671.50"></text></g><g><title>[libc-2.31.so] (149 samples, 0.10%)</title><rect x="15.0339%" y="677" width="0.0987%" height="15" fill="rgb(246,171,24)" fg:x="22695" fg:w="149"/><text x="15.2839%" y="687.50"></text></g><g><title>[libc-2.31.so] (1,011 samples, 0.67%)</title><rect x="15.2293%" y="661" width="0.6697%" height="15" fill="rgb(215,142,24)" fg:x="22990" fg:w="1011"/><text x="15.4793%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (98 samples, 0.06%)</title><rect x="15.9056%" y="597" width="0.0649%" height="15" fill="rgb(250,187,7)" fg:x="24011" fg:w="98"/><text x="16.1556%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (94 samples, 0.06%)</title><rect x="15.9083%" y="581" width="0.0623%" height="15" fill="rgb(228,66,33)" fg:x="24015" fg:w="94"/><text x="16.1583%" y="591.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (94 samples, 0.06%)</title><rect x="15.9083%" y="565" width="0.0623%" height="15" fill="rgb(234,215,21)" fg:x="24015" fg:w="94"/><text x="16.1583%" y="575.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (91 samples, 0.06%)</title><rect x="15.9103%" y="549" width="0.0603%" height="15" fill="rgb(222,191,20)" fg:x="24018" fg:w="91"/><text x="16.1603%" y="559.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (91 samples, 0.06%)</title><rect x="15.9103%" y="533" width="0.0603%" height="15" fill="rgb(245,79,54)" fg:x="24018" fg:w="91"/><text x="16.1603%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (91 samples, 0.06%)</title><rect x="15.9103%" y="517" width="0.0603%" height="15" fill="rgb(240,10,37)" fg:x="24018" fg:w="91"/><text x="16.1603%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_swap (91 samples, 0.06%)</title><rect x="15.9103%" y="501" width="0.0603%" height="15" fill="rgb(214,192,32)" fg:x="24018" fg:w="91"/><text x="16.1603%" y="511.50"></text></g><g><title>event_listener::Inner::lock (68 samples, 0.05%)</title><rect x="15.9712%" y="597" width="0.0450%" height="15" fill="rgb(209,36,54)" fg:x="24110" fg:w="68"/><text x="16.2212%" y="607.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (67 samples, 0.04%)</title><rect x="15.9719%" y="581" width="0.0444%" height="15" fill="rgb(220,10,11)" fg:x="24111" fg:w="67"/><text x="16.2219%" y="591.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (61 samples, 0.04%)</title><rect x="15.9759%" y="565" width="0.0404%" height="15" fill="rgb(221,106,17)" fg:x="24117" fg:w="61"/><text x="16.2259%" y="575.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (61 samples, 0.04%)</title><rect x="15.9759%" y="549" width="0.0404%" height="15" fill="rgb(251,142,44)" fg:x="24117" fg:w="61"/><text x="16.2259%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (61 samples, 0.04%)</title><rect x="15.9759%" y="533" width="0.0404%" height="15" fill="rgb(238,13,15)" fg:x="24117" fg:w="61"/><text x="16.2259%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (61 samples, 0.04%)</title><rect x="15.9759%" y="517" width="0.0404%" height="15" fill="rgb(208,107,27)" fg:x="24117" fg:w="61"/><text x="16.2259%" y="527.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (198 samples, 0.13%)</title><rect x="15.9043%" y="613" width="0.1312%" height="15" fill="rgb(205,136,37)" fg:x="24009" fg:w="198"/><text x="16.1543%" y="623.50"></text></g><g><title>event_listener::List::remove (19 samples, 0.01%)</title><rect x="16.0229%" y="597" width="0.0126%" height="15" fill="rgb(250,205,27)" fg:x="24188" fg:w="19"/><text x="16.2729%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (231 samples, 0.15%)</title><rect x="15.9037%" y="645" width="0.1530%" height="15" fill="rgb(210,80,43)" fg:x="24008" fg:w="231"/><text x="16.1537%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (231 samples, 0.15%)</title><rect x="15.9037%" y="629" width="0.1530%" height="15" fill="rgb(247,160,36)" fg:x="24008" fg:w="231"/><text x="16.1537%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (32 samples, 0.02%)</title><rect x="16.0355%" y="613" width="0.0212%" height="15" fill="rgb(234,13,49)" fg:x="24207" fg:w="32"/><text x="16.2855%" y="623.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.02%)</title><rect x="16.0355%" y="597" width="0.0212%" height="15" fill="rgb(234,122,0)" fg:x="24207" fg:w="32"/><text x="16.2855%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (31 samples, 0.02%)</title><rect x="16.0361%" y="581" width="0.0205%" height="15" fill="rgb(207,146,38)" fg:x="24208" fg:w="31"/><text x="16.2861%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_sub (31 samples, 0.02%)</title><rect x="16.0361%" y="565" width="0.0205%" height="15" fill="rgb(207,177,25)" fg:x="24208" fg:w="31"/><text x="16.2861%" y="575.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (13,648 samples, 9.04%)</title><rect x="7.0231%" y="869" width="9.0409%" height="15" fill="rgb(211,178,42)" fg:x="10602" fg:w="13648"/><text x="7.2731%" y="879.50">async_executo..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (13,648 samples, 9.04%)</title><rect x="7.0231%" y="853" width="9.0409%" height="15" fill="rgb(230,69,54)" fg:x="10602" fg:w="13648"/><text x="7.2731%" y="863.50">&lt;async_std::t..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (13,648 samples, 9.04%)</title><rect x="7.0231%" y="837" width="9.0409%" height="15" fill="rgb(214,135,41)" fg:x="10602" fg:w="13648"/><text x="7.2731%" y="847.50">async_std::ta..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (13,648 samples, 9.04%)</title><rect x="7.0231%" y="821" width="9.0409%" height="15" fill="rgb(237,67,25)" fg:x="10602" fg:w="13648"/><text x="7.2731%" y="831.50">std::thread::..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (13,648 samples, 9.04%)</title><rect x="7.0231%" y="805" width="9.0409%" height="15" fill="rgb(222,189,50)" fg:x="10602" fg:w="13648"/><text x="7.2731%" y="815.50">std::thread::..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (13,648 samples, 9.04%)</title><rect x="7.0231%" y="789" width="9.0409%" height="15" fill="rgb(245,148,34)" fg:x="10602" fg:w="13648"/><text x="7.2731%" y="799.50">async_std::ta..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (13,648 samples, 9.04%)</title><rect x="7.0231%" y="773" width="9.0409%" height="15" fill="rgb(222,29,6)" fg:x="10602" fg:w="13648"/><text x="7.2731%" y="783.50">&lt;async_std::t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (13,648 samples, 9.04%)</title><rect x="7.0231%" y="757" width="9.0409%" height="15" fill="rgb(221,189,43)" fg:x="10602" fg:w="13648"/><text x="7.2731%" y="767.50">&lt;core::future..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (6,136 samples, 4.06%)</title><rect x="11.9993%" y="741" width="4.0647%" height="15" fill="rgb(207,36,27)" fg:x="18114" fg:w="6136"/><text x="12.2493%" y="751.50">trem..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,564 samples, 1.04%)</title><rect x="15.0279%" y="725" width="1.0360%" height="15" fill="rgb(217,90,24)" fg:x="22686" fg:w="1564"/><text x="15.2779%" y="735.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (1,564 samples, 1.04%)</title><rect x="15.0279%" y="709" width="1.0360%" height="15" fill="rgb(224,66,35)" fg:x="22686" fg:w="1564"/><text x="15.2779%" y="719.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,564 samples, 1.04%)</title><rect x="15.0279%" y="693" width="1.0360%" height="15" fill="rgb(221,13,50)" fg:x="22686" fg:w="1564"/><text x="15.2779%" y="703.50"></text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (1,406 samples, 0.93%)</title><rect x="15.1326%" y="677" width="0.9314%" height="15" fill="rgb(236,68,49)" fg:x="22844" fg:w="1406"/><text x="15.3826%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_channel::Send&lt;tremor_runtime::connectors::sink::SinkMsg&gt;&gt; (249 samples, 0.16%)</title><rect x="15.8990%" y="661" width="0.1649%" height="15" fill="rgb(229,146,28)" fg:x="24001" fg:w="249"/><text x="16.1490%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17,365 samples, 11.50%)</title><rect x="4.5681%" y="885" width="11.5031%" height="15" fill="rgb(225,31,38)" fg:x="6896" fg:w="17365"/><text x="4.8181%" y="895.50">&lt;core::future::fr..</text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (23 samples, 0.02%)</title><rect x="16.0713%" y="885" width="0.0152%" height="15" fill="rgb(250,208,3)" fg:x="24261" fg:w="23"/><text x="16.3213%" y="895.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode (34 samples, 0.02%)</title><rect x="16.1064%" y="885" width="0.0225%" height="15" fill="rgb(246,54,23)" fg:x="24314" fg:w="34"/><text x="16.3564%" y="895.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (19 samples, 0.01%)</title><rect x="16.1342%" y="885" width="0.0126%" height="15" fill="rgb(243,76,11)" fg:x="24356" fg:w="19"/><text x="16.3842%" y="895.50"></text></g><g><title>[libc-2.31.so] (207 samples, 0.14%)</title><rect x="16.1607%" y="885" width="0.1371%" height="15" fill="rgb(245,21,50)" fg:x="24396" fg:w="207"/><text x="16.4107%" y="895.50"></text></g><g><title>__clock_gettime (40 samples, 0.03%)</title><rect x="16.2985%" y="885" width="0.0265%" height="15" fill="rgb(228,9,43)" fg:x="24604" fg:w="40"/><text x="16.5485%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (21 samples, 0.01%)</title><rect x="16.3462%" y="885" width="0.0139%" height="15" fill="rgb(208,100,47)" fg:x="24676" fg:w="21"/><text x="16.5962%" y="895.50"></text></g><g><title>alloc::raw_vec::finish_grow (37 samples, 0.02%)</title><rect x="16.3601%" y="885" width="0.0245%" height="15" fill="rgb(232,26,8)" fg:x="24697" fg:w="37"/><text x="16.6101%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (44 samples, 0.03%)</title><rect x="16.3846%" y="885" width="0.0291%" height="15" fill="rgb(216,166,38)" fg:x="24734" fg:w="44"/><text x="16.6346%" y="895.50"></text></g><g><title>async_executor::Ticker::sleep (35 samples, 0.02%)</title><rect x="16.4164%" y="885" width="0.0232%" height="15" fill="rgb(251,202,51)" fg:x="24782" fg:w="35"/><text x="16.6664%" y="895.50"></text></g><g><title>async_executor::steal (186 samples, 0.12%)</title><rect x="16.4396%" y="885" width="0.1232%" height="15" fill="rgb(254,216,34)" fg:x="24817" fg:w="186"/><text x="16.6896%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (28 samples, 0.02%)</title><rect x="16.5932%" y="373" width="0.0185%" height="15" fill="rgb(251,32,27)" fg:x="25049" fg:w="28"/><text x="16.8432%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (28 samples, 0.02%)</title><rect x="16.5932%" y="357" width="0.0185%" height="15" fill="rgb(208,127,28)" fg:x="25049" fg:w="28"/><text x="16.8432%" y="367.50"></text></g><g><title>event_listener::Inner::lock (38 samples, 0.03%)</title><rect x="16.5926%" y="437" width="0.0252%" height="15" fill="rgb(224,137,22)" fg:x="25048" fg:w="38"/><text x="16.8426%" y="447.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (38 samples, 0.03%)</title><rect x="16.5926%" y="421" width="0.0252%" height="15" fill="rgb(254,70,32)" fg:x="25048" fg:w="38"/><text x="16.8426%" y="431.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (37 samples, 0.02%)</title><rect x="16.5932%" y="405" width="0.0245%" height="15" fill="rgb(229,75,37)" fg:x="25049" fg:w="37"/><text x="16.8432%" y="415.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (37 samples, 0.02%)</title><rect x="16.5932%" y="389" width="0.0245%" height="15" fill="rgb(252,64,23)" fg:x="25049" fg:w="37"/><text x="16.8432%" y="399.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (75 samples, 0.05%)</title><rect x="16.5787%" y="453" width="0.0497%" height="15" fill="rgb(232,162,48)" fg:x="25027" fg:w="75"/><text x="16.8287%" y="463.50"></text></g><g><title>event_listener::List::remove (16 samples, 0.01%)</title><rect x="16.6178%" y="437" width="0.0106%" height="15" fill="rgb(246,160,12)" fg:x="25086" fg:w="16"/><text x="16.8678%" y="447.50"></text></g><g><title>[libc-2.31.so] (417 samples, 0.28%)</title><rect x="16.6284%" y="453" width="0.2762%" height="15" fill="rgb(247,166,0)" fg:x="25102" fg:w="417"/><text x="16.8784%" y="463.50"></text></g><g><title>[libc-2.31.so] (689 samples, 0.46%)</title><rect x="16.9265%" y="437" width="0.4564%" height="15" fill="rgb(249,219,21)" fg:x="25552" fg:w="689"/><text x="17.1765%" y="447.50"></text></g><g><title>[libc-2.31.so] (150 samples, 0.10%)</title><rect x="17.4624%" y="405" width="0.0994%" height="15" fill="rgb(205,209,3)" fg:x="26361" fg:w="150"/><text x="17.7124%" y="415.50"></text></g><g><title>concurrent_queue::full_fence (21 samples, 0.01%)</title><rect x="17.5617%" y="405" width="0.0139%" height="15" fill="rgb(243,44,1)" fg:x="26511" fg:w="21"/><text x="17.8117%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (20 samples, 0.01%)</title><rect x="17.5624%" y="389" width="0.0132%" height="15" fill="rgb(206,159,16)" fg:x="26512" fg:w="20"/><text x="17.8124%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (20 samples, 0.01%)</title><rect x="17.5624%" y="373" width="0.0132%" height="15" fill="rgb(244,77,30)" fg:x="26512" fg:w="20"/><text x="17.8124%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (20 samples, 0.01%)</title><rect x="17.5624%" y="357" width="0.0132%" height="15" fill="rgb(218,69,12)" fg:x="26512" fg:w="20"/><text x="17.8124%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (217 samples, 0.14%)</title><rect x="17.5783%" y="405" width="0.1437%" height="15" fill="rgb(212,87,7)" fg:x="26536" fg:w="217"/><text x="17.8283%" y="415.50"></text></g><g><title>core::ptr::read (217 samples, 0.14%)</title><rect x="17.5783%" y="389" width="0.1437%" height="15" fill="rgb(245,114,25)" fg:x="26536" fg:w="217"/><text x="17.8283%" y="399.50"></text></g><g><title>[libc-2.31.so] (217 samples, 0.14%)</title><rect x="17.5783%" y="373" width="0.1437%" height="15" fill="rgb(210,61,42)" fg:x="26536" fg:w="217"/><text x="17.8283%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (495 samples, 0.33%)</title><rect x="17.7220%" y="405" width="0.3279%" height="15" fill="rgb(211,52,33)" fg:x="26753" fg:w="495"/><text x="17.9720%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (495 samples, 0.33%)</title><rect x="17.7220%" y="389" width="0.3279%" height="15" fill="rgb(234,58,33)" fg:x="26753" fg:w="495"/><text x="17.9720%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (352 samples, 0.23%)</title><rect x="18.0499%" y="405" width="0.2332%" height="15" fill="rgb(220,115,36)" fg:x="27248" fg:w="352"/><text x="18.2999%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (347 samples, 0.23%)</title><rect x="18.0532%" y="389" width="0.2299%" height="15" fill="rgb(243,153,54)" fg:x="27253" fg:w="347"/><text x="18.3032%" y="399.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (1,360 samples, 0.90%)</title><rect x="17.3829%" y="437" width="0.9009%" height="15" fill="rgb(251,47,18)" fg:x="26241" fg:w="1360"/><text x="17.6329%" y="447.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (1,349 samples, 0.89%)</title><rect x="17.3902%" y="421" width="0.8936%" height="15" fill="rgb(242,102,42)" fg:x="26252" fg:w="1349"/><text x="17.6402%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (75 samples, 0.05%)</title><rect x="18.2877%" y="421" width="0.0497%" height="15" fill="rgb(234,31,38)" fg:x="27607" fg:w="75"/><text x="18.5377%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (62 samples, 0.04%)</title><rect x="18.2964%" y="405" width="0.0411%" height="15" fill="rgb(221,117,51)" fg:x="27620" fg:w="62"/><text x="18.5464%" y="415.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (62 samples, 0.04%)</title><rect x="18.2964%" y="389" width="0.0411%" height="15" fill="rgb(212,20,18)" fg:x="27620" fg:w="62"/><text x="18.5464%" y="399.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (61 samples, 0.04%)</title><rect x="18.2970%" y="373" width="0.0404%" height="15" fill="rgb(245,133,36)" fg:x="27621" fg:w="61"/><text x="18.5470%" y="383.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (61 samples, 0.04%)</title><rect x="18.2970%" y="357" width="0.0404%" height="15" fill="rgb(212,6,19)" fg:x="27621" fg:w="61"/><text x="18.5470%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (61 samples, 0.04%)</title><rect x="18.2970%" y="341" width="0.0404%" height="15" fill="rgb(218,1,36)" fg:x="27621" fg:w="61"/><text x="18.5470%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_swap (61 samples, 0.04%)</title><rect x="18.2970%" y="325" width="0.0404%" height="15" fill="rgb(246,84,54)" fg:x="27621" fg:w="61"/><text x="18.5470%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (16 samples, 0.01%)</title><rect x="18.3374%" y="421" width="0.0106%" height="15" fill="rgb(242,110,6)" fg:x="27682" fg:w="16"/><text x="18.5874%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (16 samples, 0.01%)</title><rect x="18.3374%" y="405" width="0.0106%" height="15" fill="rgb(214,47,5)" fg:x="27682" fg:w="16"/><text x="18.5874%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (60 samples, 0.04%)</title><rect x="18.3500%" y="357" width="0.0397%" height="15" fill="rgb(218,159,25)" fg:x="27701" fg:w="60"/><text x="18.6000%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (60 samples, 0.04%)</title><rect x="18.3500%" y="341" width="0.0397%" height="15" fill="rgb(215,211,28)" fg:x="27701" fg:w="60"/><text x="18.6000%" y="351.50"></text></g><g><title>event_listener::Inner::lock (65 samples, 0.04%)</title><rect x="18.3480%" y="421" width="0.0431%" height="15" fill="rgb(238,59,32)" fg:x="27698" fg:w="65"/><text x="18.5980%" y="431.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (65 samples, 0.04%)</title><rect x="18.3480%" y="405" width="0.0431%" height="15" fill="rgb(226,82,3)" fg:x="27698" fg:w="65"/><text x="18.5980%" y="415.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (62 samples, 0.04%)</title><rect x="18.3500%" y="389" width="0.0411%" height="15" fill="rgb(240,164,32)" fg:x="27701" fg:w="62"/><text x="18.6000%" y="399.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (62 samples, 0.04%)</title><rect x="18.3500%" y="373" width="0.0411%" height="15" fill="rgb(232,46,7)" fg:x="27701" fg:w="62"/><text x="18.6000%" y="383.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_waker (34 samples, 0.02%)</title><rect x="18.3964%" y="373" width="0.0225%" height="15" fill="rgb(229,129,53)" fg:x="27771" fg:w="34"/><text x="18.6464%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (33 samples, 0.02%)</title><rect x="18.3970%" y="357" width="0.0219%" height="15" fill="rgb(234,188,29)" fg:x="27772" fg:w="33"/><text x="18.6470%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_sub (33 samples, 0.02%)</title><rect x="18.3970%" y="341" width="0.0219%" height="15" fill="rgb(246,141,4)" fg:x="27772" fg:w="33"/><text x="18.6470%" y="351.50"></text></g><g><title>async_executor::Sleepers::notify (37 samples, 0.02%)</title><rect x="18.4269%" y="325" width="0.0245%" height="15" fill="rgb(229,23,39)" fg:x="27817" fg:w="37"/><text x="18.6769%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (26 samples, 0.02%)</title><rect x="18.4341%" y="309" width="0.0172%" height="15" fill="rgb(206,12,3)" fg:x="27828" fg:w="26"/><text x="18.6841%" y="319.50"></text></g><g><title>core::ptr::read (22 samples, 0.01%)</title><rect x="18.4368%" y="293" width="0.0146%" height="15" fill="rgb(252,226,20)" fg:x="27832" fg:w="22"/><text x="18.6868%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (65 samples, 0.04%)</title><rect x="18.4514%" y="261" width="0.0431%" height="15" fill="rgb(216,123,35)" fg:x="27854" fg:w="65"/><text x="18.7014%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_swap (65 samples, 0.04%)</title><rect x="18.4514%" y="245" width="0.0431%" height="15" fill="rgb(212,68,40)" fg:x="27854" fg:w="65"/><text x="18.7014%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (66 samples, 0.04%)</title><rect x="18.4514%" y="325" width="0.0437%" height="15" fill="rgb(254,125,32)" fg:x="27854" fg:w="66"/><text x="18.7014%" y="335.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (66 samples, 0.04%)</title><rect x="18.4514%" y="309" width="0.0437%" height="15" fill="rgb(253,97,22)" fg:x="27854" fg:w="66"/><text x="18.7014%" y="319.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (66 samples, 0.04%)</title><rect x="18.4514%" y="293" width="0.0437%" height="15" fill="rgb(241,101,14)" fg:x="27854" fg:w="66"/><text x="18.7014%" y="303.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (66 samples, 0.04%)</title><rect x="18.4514%" y="277" width="0.0437%" height="15" fill="rgb(238,103,29)" fg:x="27854" fg:w="66"/><text x="18.7014%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (43 samples, 0.03%)</title><rect x="18.4951%" y="325" width="0.0285%" height="15" fill="rgb(233,195,47)" fg:x="27920" fg:w="43"/><text x="18.7451%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (43 samples, 0.03%)</title><rect x="18.4951%" y="309" width="0.0285%" height="15" fill="rgb(246,218,30)" fg:x="27920" fg:w="43"/><text x="18.7451%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (52 samples, 0.03%)</title><rect x="18.5567%" y="245" width="0.0344%" height="15" fill="rgb(219,145,47)" fg:x="28013" fg:w="52"/><text x="18.8067%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_swap (52 samples, 0.03%)</title><rect x="18.5567%" y="229" width="0.0344%" height="15" fill="rgb(243,12,26)" fg:x="28013" fg:w="52"/><text x="18.8067%" y="239.50"></text></g><g><title>parking::Unparker::unpark (100 samples, 0.07%)</title><rect x="18.5375%" y="277" width="0.0662%" height="15" fill="rgb(214,87,16)" fg:x="27984" fg:w="100"/><text x="18.7875%" y="287.50"></text></g><g><title>parking::Inner::unpark (84 samples, 0.06%)</title><rect x="18.5481%" y="261" width="0.0556%" height="15" fill="rgb(208,99,42)" fg:x="28000" fg:w="84"/><text x="18.7981%" y="271.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (128 samples, 0.08%)</title><rect x="18.5236%" y="293" width="0.0848%" height="15" fill="rgb(253,99,2)" fg:x="27963" fg:w="128"/><text x="18.7736%" y="303.50"></text></g><g><title>core::task::wake::Waker::wake (184 samples, 0.12%)</title><rect x="18.5236%" y="325" width="0.1219%" height="15" fill="rgb(220,168,23)" fg:x="27963" fg:w="184"/><text x="18.7736%" y="335.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (184 samples, 0.12%)</title><rect x="18.5236%" y="309" width="0.1219%" height="15" fill="rgb(242,38,24)" fg:x="27963" fg:w="184"/><text x="18.7736%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (56 samples, 0.04%)</title><rect x="18.6084%" y="293" width="0.0371%" height="15" fill="rgb(225,182,9)" fg:x="28091" fg:w="56"/><text x="18.8584%" y="303.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (56 samples, 0.04%)</title><rect x="18.6084%" y="277" width="0.0371%" height="15" fill="rgb(243,178,37)" fg:x="28091" fg:w="56"/><text x="18.8584%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (55 samples, 0.04%)</title><rect x="18.6090%" y="261" width="0.0364%" height="15" fill="rgb(232,139,19)" fg:x="28092" fg:w="55"/><text x="18.8590%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_sub (55 samples, 0.04%)</title><rect x="18.6090%" y="245" width="0.0364%" height="15" fill="rgb(225,201,24)" fg:x="28092" fg:w="55"/><text x="18.8590%" y="255.50"></text></g><g><title>std::sync::poison::Flag::get (19 samples, 0.01%)</title><rect x="18.6461%" y="277" width="0.0126%" height="15" fill="rgb(221,47,46)" fg:x="28148" fg:w="19"/><text x="18.8961%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (19 samples, 0.01%)</title><rect x="18.6461%" y="261" width="0.0126%" height="15" fill="rgb(249,23,13)" fg:x="28148" fg:w="19"/><text x="18.8961%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_load (18 samples, 0.01%)</title><rect x="18.6468%" y="245" width="0.0119%" height="15" fill="rgb(219,9,5)" fg:x="28149" fg:w="18"/><text x="18.8968%" y="255.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (22 samples, 0.01%)</title><rect x="18.6455%" y="309" width="0.0146%" height="15" fill="rgb(254,171,16)" fg:x="28147" fg:w="22"/><text x="18.8955%" y="319.50"></text></g><g><title>std::sync::poison::Flag::borrow (22 samples, 0.01%)</title><rect x="18.6455%" y="293" width="0.0146%" height="15" fill="rgb(230,171,20)" fg:x="28147" fg:w="22"/><text x="18.8955%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (60 samples, 0.04%)</title><rect x="18.6600%" y="277" width="0.0397%" height="15" fill="rgb(210,71,41)" fg:x="28169" fg:w="60"/><text x="18.9100%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (60 samples, 0.04%)</title><rect x="18.6600%" y="261" width="0.0397%" height="15" fill="rgb(206,173,20)" fg:x="28169" fg:w="60"/><text x="18.9100%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (24 samples, 0.02%)</title><rect x="18.7018%" y="261" width="0.0159%" height="15" fill="rgb(233,88,34)" fg:x="28232" fg:w="24"/><text x="18.9518%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (24 samples, 0.02%)</title><rect x="18.7018%" y="245" width="0.0159%" height="15" fill="rgb(223,209,46)" fg:x="28232" fg:w="24"/><text x="18.9518%" y="255.50"></text></g><g><title>core::hint::spin_loop (35 samples, 0.02%)</title><rect x="18.7289%" y="245" width="0.0232%" height="15" fill="rgb(250,43,18)" fg:x="28273" fg:w="35"/><text x="18.9789%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (35 samples, 0.02%)</title><rect x="18.7289%" y="229" width="0.0232%" height="15" fill="rgb(208,13,10)" fg:x="28273" fg:w="35"/><text x="18.9789%" y="239.50"></text></g><g><title>async_executor::State::notify (528 samples, 0.35%)</title><rect x="18.4235%" y="341" width="0.3498%" height="15" fill="rgb(212,200,36)" fg:x="27812" fg:w="528"/><text x="18.6735%" y="351.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (193 samples, 0.13%)</title><rect x="18.6455%" y="325" width="0.1278%" height="15" fill="rgb(225,90,30)" fg:x="28147" fg:w="193"/><text x="18.8955%" y="335.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (171 samples, 0.11%)</title><rect x="18.6600%" y="309" width="0.1133%" height="15" fill="rgb(236,182,39)" fg:x="28169" fg:w="171"/><text x="18.9100%" y="319.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (171 samples, 0.11%)</title><rect x="18.6600%" y="293" width="0.1133%" height="15" fill="rgb(212,144,35)" fg:x="28169" fg:w="171"/><text x="18.9100%" y="303.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (111 samples, 0.07%)</title><rect x="18.6998%" y="277" width="0.0735%" height="15" fill="rgb(228,63,44)" fg:x="28229" fg:w="111"/><text x="18.9498%" y="287.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (69 samples, 0.05%)</title><rect x="18.7276%" y="261" width="0.0457%" height="15" fill="rgb(228,109,6)" fg:x="28271" fg:w="69"/><text x="18.9776%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (32 samples, 0.02%)</title><rect x="18.7521%" y="245" width="0.0212%" height="15" fill="rgb(238,117,24)" fg:x="28308" fg:w="32"/><text x="19.0021%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_load (32 samples, 0.02%)</title><rect x="18.7521%" y="229" width="0.0212%" height="15" fill="rgb(242,26,26)" fg:x="28308" fg:w="32"/><text x="19.0021%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (91 samples, 0.06%)</title><rect x="18.7799%" y="309" width="0.0603%" height="15" fill="rgb(221,92,48)" fg:x="28350" fg:w="91"/><text x="19.0299%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (91 samples, 0.06%)</title><rect x="18.7799%" y="293" width="0.0603%" height="15" fill="rgb(209,209,32)" fg:x="28350" fg:w="91"/><text x="19.0299%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (27 samples, 0.02%)</title><rect x="18.8402%" y="309" width="0.0179%" height="15" fill="rgb(221,70,22)" fg:x="28441" fg:w="27"/><text x="19.0902%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_or (27 samples, 0.02%)</title><rect x="18.8402%" y="293" width="0.0179%" height="15" fill="rgb(248,145,5)" fg:x="28441" fg:w="27"/><text x="19.0902%" y="303.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (660 samples, 0.44%)</title><rect x="18.4235%" y="357" width="0.4372%" height="15" fill="rgb(226,116,26)" fg:x="27812" fg:w="660"/><text x="18.6735%" y="367.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (132 samples, 0.09%)</title><rect x="18.7733%" y="341" width="0.0874%" height="15" fill="rgb(244,5,17)" fg:x="28340" fg:w="132"/><text x="19.0233%" y="351.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (131 samples, 0.09%)</title><rect x="18.7740%" y="325" width="0.0868%" height="15" fill="rgb(252,159,33)" fg:x="28341" fg:w="131"/><text x="19.0240%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (212 samples, 0.14%)</title><rect x="18.8608%" y="357" width="0.1404%" height="15" fill="rgb(206,71,0)" fg:x="28472" fg:w="212"/><text x="19.1108%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (212 samples, 0.14%)</title><rect x="18.8608%" y="341" width="0.1404%" height="15" fill="rgb(233,118,54)" fg:x="28472" fg:w="212"/><text x="19.1108%" y="351.50"></text></g><g><title>event_listener::List::notify (1,013 samples, 0.67%)</title><rect x="18.3911%" y="421" width="0.6710%" height="15" fill="rgb(234,83,48)" fg:x="27763" fg:w="1013"/><text x="18.6411%" y="431.50"></text></g><g><title>core::task::wake::Waker::wake (1,009 samples, 0.67%)</title><rect x="18.3937%" y="405" width="0.6684%" height="15" fill="rgb(228,3,54)" fg:x="27767" fg:w="1009"/><text x="18.6437%" y="415.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (1,008 samples, 0.67%)</title><rect x="18.3944%" y="389" width="0.6677%" height="15" fill="rgb(226,155,13)" fg:x="27768" fg:w="1008"/><text x="18.6444%" y="399.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (971 samples, 0.64%)</title><rect x="18.4189%" y="373" width="0.6432%" height="15" fill="rgb(241,28,37)" fg:x="27805" fg:w="971"/><text x="18.6689%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (92 samples, 0.06%)</title><rect x="19.0012%" y="357" width="0.0609%" height="15" fill="rgb(233,93,10)" fg:x="28684" fg:w="92"/><text x="19.2512%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_load (92 samples, 0.06%)</title><rect x="19.0012%" y="341" width="0.0609%" height="15" fill="rgb(225,113,19)" fg:x="28684" fg:w="92"/><text x="19.2512%" y="351.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (3,562 samples, 2.36%)</title><rect x="16.9046%" y="453" width="2.3596%" height="15" fill="rgb(241,2,18)" fg:x="25519" fg:w="3562"/><text x="17.1546%" y="463.50">a..</text></g><g><title>event_listener::Event::notify (1,480 samples, 0.98%)</title><rect x="18.2838%" y="437" width="0.9804%" height="15" fill="rgb(228,207,21)" fg:x="27601" fg:w="1480"/><text x="18.5338%" y="447.50"></text></g><g><title>event_listener::full_fence (305 samples, 0.20%)</title><rect x="19.0621%" y="421" width="0.2020%" height="15" fill="rgb(213,211,35)" fg:x="28776" fg:w="305"/><text x="19.3121%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (294 samples, 0.19%)</title><rect x="19.0694%" y="405" width="0.1948%" height="15" fill="rgb(209,83,10)" fg:x="28787" fg:w="294"/><text x="19.3194%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (294 samples, 0.19%)</title><rect x="19.0694%" y="389" width="0.1948%" height="15" fill="rgb(209,164,1)" fg:x="28787" fg:w="294"/><text x="19.3194%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (21 samples, 0.01%)</title><rect x="19.2642%" y="453" width="0.0139%" height="15" fill="rgb(213,184,43)" fg:x="29081" fg:w="21"/><text x="19.5142%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (28 samples, 0.02%)</title><rect x="19.2781%" y="453" width="0.0185%" height="15" fill="rgb(231,61,34)" fg:x="29102" fg:w="28"/><text x="19.5281%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (22 samples, 0.01%)</title><rect x="19.2821%" y="437" width="0.0146%" height="15" fill="rgb(235,75,3)" fg:x="29108" fg:w="22"/><text x="19.5321%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (19 samples, 0.01%)</title><rect x="19.2840%" y="421" width="0.0126%" height="15" fill="rgb(220,106,47)" fg:x="29111" fg:w="19"/><text x="19.5340%" y="431.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.01%)</title><rect x="19.2840%" y="405" width="0.0126%" height="15" fill="rgb(210,196,33)" fg:x="29111" fg:w="19"/><text x="19.5340%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (19 samples, 0.01%)</title><rect x="19.2840%" y="389" width="0.0126%" height="15" fill="rgb(229,154,42)" fg:x="29111" fg:w="19"/><text x="19.5340%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_sub (19 samples, 0.01%)</title><rect x="19.2840%" y="373" width="0.0126%" height="15" fill="rgb(228,114,26)" fg:x="29111" fg:w="19"/><text x="19.5340%" y="383.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (17 samples, 0.01%)</title><rect x="19.2966%" y="437" width="0.0113%" height="15" fill="rgb(208,144,1)" fg:x="29130" fg:w="17"/><text x="19.5466%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (17 samples, 0.01%)</title><rect x="19.2966%" y="421" width="0.0113%" height="15" fill="rgb(239,112,37)" fg:x="29130" fg:w="17"/><text x="19.5466%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_add (17 samples, 0.01%)</title><rect x="19.2966%" y="405" width="0.0113%" height="15" fill="rgb(210,96,50)" fg:x="29130" fg:w="17"/><text x="19.5466%" y="415.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,163 samples, 2.76%)</title><rect x="16.5628%" y="533" width="2.7577%" height="15" fill="rgb(222,178,2)" fg:x="25003" fg:w="4163"/><text x="16.8128%" y="543.50">&lt;a..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (4,163 samples, 2.76%)</title><rect x="16.5628%" y="517" width="2.7577%" height="15" fill="rgb(226,74,18)" fg:x="25003" fg:w="4163"/><text x="16.8128%" y="527.50">&lt;t..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (4,163 samples, 2.76%)</title><rect x="16.5628%" y="501" width="2.7577%" height="15" fill="rgb(225,67,54)" fg:x="25003" fg:w="4163"/><text x="16.8128%" y="511.50">&lt;a..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (4,163 samples, 2.76%)</title><rect x="16.5628%" y="485" width="2.7577%" height="15" fill="rgb(251,92,32)" fg:x="25003" fg:w="4163"/><text x="16.8128%" y="495.50">&lt;a..</text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (4,163 samples, 2.76%)</title><rect x="16.5628%" y="469" width="2.7577%" height="15" fill="rgb(228,149,22)" fg:x="25003" fg:w="4163"/><text x="16.8128%" y="479.50">&lt;a..</text></g><g><title>event_listener::Event::listen (36 samples, 0.02%)</title><rect x="19.2966%" y="453" width="0.0238%" height="15" fill="rgb(243,54,13)" fg:x="29130" fg:w="36"/><text x="19.5466%" y="463.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (19 samples, 0.01%)</title><rect x="19.3463%" y="437" width="0.0126%" height="15" fill="rgb(243,180,28)" fg:x="29205" fg:w="19"/><text x="19.5963%" y="447.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager&lt;S&gt;::run::{{closure}} (4,340 samples, 2.87%)</title><rect x="16.5628%" y="549" width="2.8750%" height="15" fill="rgb(208,167,24)" fg:x="25003" fg:w="4340"/><text x="16.8128%" y="559.50">tr..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (177 samples, 0.12%)</title><rect x="19.3205%" y="533" width="0.1173%" height="15" fill="rgb(245,73,45)" fg:x="29166" fg:w="177"/><text x="19.5705%" y="543.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (177 samples, 0.12%)</title><rect x="19.3205%" y="517" width="0.1173%" height="15" fill="rgb(237,203,48)" fg:x="29166" fg:w="177"/><text x="19.5705%" y="527.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::Sink&gt;::on_event::{{closure}} (177 samples, 0.12%)</title><rect x="19.3205%" y="501" width="0.1173%" height="15" fill="rgb(211,197,16)" fg:x="29166" fg:w="177"/><text x="19.5705%" y="511.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize (177 samples, 0.12%)</title><rect x="19.3205%" y="485" width="0.1173%" height="15" fill="rgb(243,99,51)" fg:x="29166" fg:w="177"/><text x="19.5705%" y="495.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize_for_stream (177 samples, 0.12%)</title><rect x="19.3205%" y="469" width="0.1173%" height="15" fill="rgb(215,123,29)" fg:x="29166" fg:w="177"/><text x="19.5705%" y="479.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize_for_stream_with_codec (177 samples, 0.12%)</title><rect x="19.3205%" y="453" width="0.1173%" height="15" fill="rgb(239,186,37)" fg:x="29166" fg:w="177"/><text x="19.5705%" y="463.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode (119 samples, 0.08%)</title><rect x="19.3589%" y="437" width="0.0788%" height="15" fill="rgb(252,136,39)" fg:x="29224" fg:w="119"/><text x="19.6089%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (100 samples, 0.07%)</title><rect x="19.3715%" y="421" width="0.0662%" height="15" fill="rgb(223,213,32)" fg:x="29243" fg:w="100"/><text x="19.6215%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (100 samples, 0.07%)</title><rect x="19.3715%" y="405" width="0.0662%" height="15" fill="rgb(233,115,5)" fg:x="29243" fg:w="100"/><text x="19.6215%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (84 samples, 0.06%)</title><rect x="19.3821%" y="389" width="0.0556%" height="15" fill="rgb(207,226,44)" fg:x="29259" fg:w="84"/><text x="19.6321%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (84 samples, 0.06%)</title><rect x="19.3821%" y="373" width="0.0556%" height="15" fill="rgb(208,126,0)" fg:x="29259" fg:w="84"/><text x="19.6321%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (84 samples, 0.06%)</title><rect x="19.3821%" y="357" width="0.0556%" height="15" fill="rgb(244,66,21)" fg:x="29259" fg:w="84"/><text x="19.6321%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (84 samples, 0.06%)</title><rect x="19.3821%" y="341" width="0.0556%" height="15" fill="rgb(222,97,12)" fg:x="29259" fg:w="84"/><text x="19.6321%" y="351.50"></text></g><g><title>alloc::alloc::alloc (83 samples, 0.05%)</title><rect x="19.3827%" y="325" width="0.0550%" height="15" fill="rgb(219,213,19)" fg:x="29260" fg:w="83"/><text x="19.6327%" y="335.50"></text></g><g><title>__rg_alloc (83 samples, 0.05%)</title><rect x="19.3827%" y="309" width="0.0550%" height="15" fill="rgb(252,169,30)" fg:x="29260" fg:w="83"/><text x="19.6327%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (83 samples, 0.05%)</title><rect x="19.3827%" y="293" width="0.0550%" height="15" fill="rgb(206,32,51)" fg:x="29260" fg:w="83"/><text x="19.6327%" y="303.50"></text></g><g><title>sn_rust_alloc (73 samples, 0.05%)</title><rect x="19.3894%" y="277" width="0.0484%" height="15" fill="rgb(250,172,42)" fg:x="29270" fg:w="73"/><text x="19.6394%" y="287.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (20 samples, 0.01%)</title><rect x="19.4245%" y="261" width="0.0132%" height="15" fill="rgb(209,34,43)" fg:x="29323" fg:w="20"/><text x="19.6745%" y="271.50"></text></g><g><title>[libc-2.31.so] (430 samples, 0.28%)</title><rect x="19.8570%" y="517" width="0.2848%" height="15" fill="rgb(223,11,35)" fg:x="29976" fg:w="430"/><text x="20.1070%" y="527.50"></text></g><g><title>[libc-2.31.so] (499 samples, 0.33%)</title><rect x="20.6135%" y="485" width="0.3306%" height="15" fill="rgb(251,219,26)" fg:x="31118" fg:w="499"/><text x="20.8635%" y="495.50"></text></g><g><title>[libc-2.31.so] (149 samples, 0.10%)</title><rect x="21.1839%" y="469" width="0.0987%" height="15" fill="rgb(231,119,3)" fg:x="31979" fg:w="149"/><text x="21.4339%" y="479.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (77 samples, 0.05%)</title><rect x="21.4350%" y="277" width="0.0510%" height="15" fill="rgb(216,97,11)" fg:x="32358" fg:w="77"/><text x="21.6850%" y="287.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (273 samples, 0.18%)</title><rect x="21.3071%" y="405" width="0.1808%" height="15" fill="rgb(223,59,9)" fg:x="32165" fg:w="273"/><text x="21.5571%" y="415.50"></text></g><g><title>alloc::alloc::exchange_malloc (131 samples, 0.09%)</title><rect x="21.4012%" y="389" width="0.0868%" height="15" fill="rgb(233,93,31)" fg:x="32307" fg:w="131"/><text x="21.6512%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (131 samples, 0.09%)</title><rect x="21.4012%" y="373" width="0.0868%" height="15" fill="rgb(239,81,33)" fg:x="32307" fg:w="131"/><text x="21.6512%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (131 samples, 0.09%)</title><rect x="21.4012%" y="357" width="0.0868%" height="15" fill="rgb(213,120,34)" fg:x="32307" fg:w="131"/><text x="21.6512%" y="367.50"></text></g><g><title>alloc::alloc::alloc (130 samples, 0.09%)</title><rect x="21.4018%" y="341" width="0.0861%" height="15" fill="rgb(243,49,53)" fg:x="32308" fg:w="130"/><text x="21.6518%" y="351.50"></text></g><g><title>__rg_alloc (130 samples, 0.09%)</title><rect x="21.4018%" y="325" width="0.0861%" height="15" fill="rgb(247,216,33)" fg:x="32308" fg:w="130"/><text x="21.6518%" y="335.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (130 samples, 0.09%)</title><rect x="21.4018%" y="309" width="0.0861%" height="15" fill="rgb(226,26,14)" fg:x="32308" fg:w="130"/><text x="21.6518%" y="319.50"></text></g><g><title>sn_rust_alloc (124 samples, 0.08%)</title><rect x="21.4058%" y="293" width="0.0821%" height="15" fill="rgb(215,49,53)" fg:x="32314" fg:w="124"/><text x="21.6558%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (308 samples, 0.20%)</title><rect x="21.2886%" y="469" width="0.2040%" height="15" fill="rgb(245,162,40)" fg:x="32137" fg:w="308"/><text x="21.5386%" y="479.50"></text></g><g><title>core::ops::function::FnOnce::call_once (297 samples, 0.20%)</title><rect x="21.2958%" y="453" width="0.1967%" height="15" fill="rgb(229,68,17)" fg:x="32148" fg:w="297"/><text x="21.5458%" y="463.50"></text></g><g><title>value_trait::Builder::object (288 samples, 0.19%)</title><rect x="21.3018%" y="437" width="0.1908%" height="15" fill="rgb(213,182,10)" fg:x="32157" fg:w="288"/><text x="21.5518%" y="447.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (280 samples, 0.19%)</title><rect x="21.3071%" y="421" width="0.1855%" height="15" fill="rgb(245,125,30)" fg:x="32165" fg:w="280"/><text x="21.5571%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (18 samples, 0.01%)</title><rect x="21.4959%" y="469" width="0.0119%" height="15" fill="rgb(232,202,2)" fg:x="32450" fg:w="18"/><text x="21.7459%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (413 samples, 0.27%)</title><rect x="21.5250%" y="389" width="0.2736%" height="15" fill="rgb(237,140,51)" fg:x="32494" fg:w="413"/><text x="21.7750%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (413 samples, 0.27%)</title><rect x="21.5250%" y="373" width="0.2736%" height="15" fill="rgb(236,157,25)" fg:x="32494" fg:w="413"/><text x="21.7750%" y="383.50"></text></g><g><title>__rg_dealloc (413 samples, 0.27%)</title><rect x="21.5250%" y="357" width="0.2736%" height="15" fill="rgb(219,209,0)" fg:x="32494" fg:w="413"/><text x="21.7750%" y="367.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (413 samples, 0.27%)</title><rect x="21.5250%" y="341" width="0.2736%" height="15" fill="rgb(240,116,54)" fg:x="32494" fg:w="413"/><text x="21.7750%" y="351.50"></text></g><g><title>sn_rust_dealloc (413 samples, 0.27%)</title><rect x="21.5250%" y="325" width="0.2736%" height="15" fill="rgb(216,10,36)" fg:x="32494" fg:w="413"/><text x="21.7750%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (430 samples, 0.28%)</title><rect x="21.5158%" y="453" width="0.2848%" height="15" fill="rgb(222,72,44)" fg:x="32480" fg:w="430"/><text x="21.7658%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (430 samples, 0.28%)</title><rect x="21.5158%" y="437" width="0.2848%" height="15" fill="rgb(232,159,9)" fg:x="32480" fg:w="430"/><text x="21.7658%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (430 samples, 0.28%)</title><rect x="21.5158%" y="421" width="0.2848%" height="15" fill="rgb(210,39,32)" fg:x="32480" fg:w="430"/><text x="21.7658%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (430 samples, 0.28%)</title><rect x="21.5158%" y="405" width="0.2848%" height="15" fill="rgb(216,194,45)" fg:x="32480" fg:w="430"/><text x="21.7658%" y="415.50"></text></g><g><title>sn_rust_dealloc (72 samples, 0.05%)</title><rect x="21.8318%" y="277" width="0.0477%" height="15" fill="rgb(218,18,35)" fg:x="32957" fg:w="72"/><text x="22.0818%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (86 samples, 0.06%)</title><rect x="21.8298%" y="341" width="0.0570%" height="15" fill="rgb(207,83,51)" fg:x="32954" fg:w="86"/><text x="22.0798%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (86 samples, 0.06%)</title><rect x="21.8298%" y="325" width="0.0570%" height="15" fill="rgb(225,63,43)" fg:x="32954" fg:w="86"/><text x="22.0798%" y="335.50"></text></g><g><title>__rg_dealloc (86 samples, 0.06%)</title><rect x="21.8298%" y="309" width="0.0570%" height="15" fill="rgb(207,57,36)" fg:x="32954" fg:w="86"/><text x="22.0798%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (86 samples, 0.06%)</title><rect x="21.8298%" y="293" width="0.0570%" height="15" fill="rgb(216,99,33)" fg:x="32954" fg:w="86"/><text x="22.0798%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (141 samples, 0.09%)</title><rect x="21.8006%" y="437" width="0.0934%" height="15" fill="rgb(225,42,16)" fg:x="32910" fg:w="141"/><text x="22.0506%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (130 samples, 0.09%)</title><rect x="21.8079%" y="421" width="0.0861%" height="15" fill="rgb(220,201,45)" fg:x="32921" fg:w="130"/><text x="22.0579%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (122 samples, 0.08%)</title><rect x="21.8132%" y="405" width="0.0808%" height="15" fill="rgb(225,33,4)" fg:x="32929" fg:w="122"/><text x="22.0632%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (122 samples, 0.08%)</title><rect x="21.8132%" y="389" width="0.0808%" height="15" fill="rgb(224,33,50)" fg:x="32929" fg:w="122"/><text x="22.0632%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (122 samples, 0.08%)</title><rect x="21.8132%" y="373" width="0.0808%" height="15" fill="rgb(246,198,51)" fg:x="32929" fg:w="122"/><text x="22.0632%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (122 samples, 0.08%)</title><rect x="21.8132%" y="357" width="0.0808%" height="15" fill="rgb(205,22,4)" fg:x="32929" fg:w="122"/><text x="22.0632%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (585 samples, 0.39%)</title><rect x="21.5158%" y="469" width="0.3875%" height="15" fill="rgb(206,3,8)" fg:x="32480" fg:w="585"/><text x="21.7658%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (155 samples, 0.10%)</title><rect x="21.8006%" y="453" width="0.1027%" height="15" fill="rgb(251,23,15)" fg:x="32910" fg:w="155"/><text x="22.0506%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="21.9464%" y="373" width="0.0106%" height="15" fill="rgb(252,88,28)" fg:x="33130" fg:w="16"/><text x="22.1964%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)]&gt; (16 samples, 0.01%)</title><rect x="21.9464%" y="357" width="0.0106%" height="15" fill="rgb(212,127,14)" fg:x="33130" fg:w="16"/><text x="22.1964%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (92 samples, 0.06%)</title><rect x="21.9033%" y="469" width="0.0609%" height="15" fill="rgb(247,145,37)" fg:x="33065" fg:w="92"/><text x="22.1533%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt;&gt; (51 samples, 0.03%)</title><rect x="21.9305%" y="453" width="0.0338%" height="15" fill="rgb(209,117,53)" fg:x="33106" fg:w="51"/><text x="22.1805%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (38 samples, 0.03%)</title><rect x="21.9391%" y="437" width="0.0252%" height="15" fill="rgb(212,90,42)" fg:x="33119" fg:w="38"/><text x="22.1891%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (38 samples, 0.03%)</title><rect x="21.9391%" y="421" width="0.0252%" height="15" fill="rgb(218,164,37)" fg:x="33119" fg:w="38"/><text x="22.1891%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::vecmap::VecMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (27 samples, 0.02%)</title><rect x="21.9464%" y="405" width="0.0179%" height="15" fill="rgb(246,65,34)" fg:x="33130" fg:w="27"/><text x="22.1964%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)&gt;&gt; (27 samples, 0.02%)</title><rect x="21.9464%" y="389" width="0.0179%" height="15" fill="rgb(231,100,33)" fg:x="33130" fg:w="27"/><text x="22.1964%" y="399.50"></text></g><g><title>sn_rust_dealloc (152 samples, 0.10%)</title><rect x="21.9642%" y="469" width="0.1007%" height="15" fill="rgb(228,126,14)" fg:x="33157" fg:w="152"/><text x="22.2142%" y="479.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (22 samples, 0.01%)</title><rect x="22.0808%" y="453" width="0.0146%" height="15" fill="rgb(215,173,21)" fg:x="33333" fg:w="22"/><text x="22.3308%" y="463.50"></text></g><g><title>core::time::Duration::as_nanos (31 samples, 0.02%)</title><rect x="22.0954%" y="453" width="0.0205%" height="15" fill="rgb(210,6,40)" fg:x="33355" fg:w="31"/><text x="22.3454%" y="463.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (142 samples, 0.09%)</title><rect x="22.1159%" y="437" width="0.0941%" height="15" fill="rgb(212,48,18)" fg:x="33386" fg:w="142"/><text x="22.3659%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (59 samples, 0.04%)</title><rect x="22.2445%" y="405" width="0.0391%" height="15" fill="rgb(230,214,11)" fg:x="33580" fg:w="59"/><text x="22.4945%" y="415.50"></text></g><g><title>core::cmp::PartialOrd::ge (59 samples, 0.04%)</title><rect x="22.2445%" y="389" width="0.0391%" height="15" fill="rgb(254,105,39)" fg:x="33580" fg:w="59"/><text x="22.4945%" y="399.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (58 samples, 0.04%)</title><rect x="22.2451%" y="373" width="0.0384%" height="15" fill="rgb(245,158,5)" fg:x="33581" fg:w="58"/><text x="22.4951%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (26 samples, 0.02%)</title><rect x="22.2663%" y="357" width="0.0172%" height="15" fill="rgb(249,208,11)" fg:x="33613" fg:w="26"/><text x="22.5163%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (26 samples, 0.02%)</title><rect x="22.2663%" y="341" width="0.0172%" height="15" fill="rgb(210,39,28)" fg:x="33613" fg:w="26"/><text x="22.5163%" y="351.50"></text></g><g><title>std::time::SystemTime::duration_since (279 samples, 0.18%)</title><rect x="22.1159%" y="453" width="0.1848%" height="15" fill="rgb(211,56,53)" fg:x="33386" fg:w="279"/><text x="22.3659%" y="463.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (137 samples, 0.09%)</title><rect x="22.2100%" y="437" width="0.0908%" height="15" fill="rgb(226,201,30)" fg:x="33528" fg:w="137"/><text x="22.4600%" y="447.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (135 samples, 0.09%)</title><rect x="22.2113%" y="421" width="0.0894%" height="15" fill="rgb(239,101,34)" fg:x="33530" fg:w="135"/><text x="22.4613%" y="431.50"></text></g><g><title>core::time::Duration::new (26 samples, 0.02%)</title><rect x="22.2835%" y="405" width="0.0172%" height="15" fill="rgb(226,209,5)" fg:x="33639" fg:w="26"/><text x="22.5335%" y="415.50"></text></g><g><title>tremor_common::time::nanotime (895 samples, 0.59%)</title><rect x="22.0669%" y="469" width="0.5929%" height="15" fill="rgb(250,105,47)" fg:x="33312" fg:w="895"/><text x="22.3169%" y="479.50"></text></g><g><title>std::time::SystemTime::now (542 samples, 0.36%)</title><rect x="22.3008%" y="453" width="0.3590%" height="15" fill="rgb(230,72,3)" fg:x="33665" fg:w="542"/><text x="22.5508%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (542 samples, 0.36%)</title><rect x="22.3008%" y="437" width="0.3590%" height="15" fill="rgb(232,218,39)" fg:x="33665" fg:w="542"/><text x="22.5508%" y="447.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (542 samples, 0.36%)</title><rect x="22.3008%" y="421" width="0.3590%" height="15" fill="rgb(248,166,6)" fg:x="33665" fg:w="542"/><text x="22.5508%" y="431.50"></text></g><g><title>__clock_gettime (435 samples, 0.29%)</title><rect x="22.3716%" y="405" width="0.2882%" height="15" fill="rgb(247,89,20)" fg:x="33772" fg:w="435"/><text x="22.6216%" y="415.50"></text></g><g><title>__vdso_clock_gettime (420 samples, 0.28%)</title><rect x="22.3816%" y="389" width="0.2782%" height="15" fill="rgb(248,130,54)" fg:x="33787" fg:w="420"/><text x="22.6316%" y="399.50"></text></g><g><title>[[vdso]] (386 samples, 0.26%)</title><rect x="22.4041%" y="373" width="0.2557%" height="15" fill="rgb(234,196,4)" fg:x="33821" fg:w="386"/><text x="22.6541%" y="383.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,178 samples, 2.11%)</title><rect x="20.6010%" y="501" width="2.1052%" height="15" fill="rgb(250,143,31)" fg:x="31099" fg:w="3178"/><text x="20.8510%" y="511.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_data::{{closure}} (2,660 samples, 1.76%)</title><rect x="20.9441%" y="485" width="1.7621%" height="15" fill="rgb(211,110,34)" fg:x="31617" fg:w="2660"/><text x="21.1941%" y="495.50"></text></g><g><title>tremor_runtime::connectors::source::Streams::get_or_create_stream (70 samples, 0.05%)</title><rect x="22.6598%" y="469" width="0.0464%" height="15" fill="rgb(215,124,48)" fg:x="34207" fg:w="70"/><text x="22.9098%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (57 samples, 0.04%)</title><rect x="22.6684%" y="453" width="0.0378%" height="15" fill="rgb(216,46,13)" fg:x="34220" fg:w="57"/><text x="22.9184%" y="463.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (43 samples, 0.03%)</title><rect x="22.6777%" y="437" width="0.0285%" height="15" fill="rgb(205,184,25)" fg:x="34234" fg:w="43"/><text x="22.9277%" y="447.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (43 samples, 0.03%)</title><rect x="22.6777%" y="421" width="0.0285%" height="15" fill="rgb(228,1,10)" fg:x="34234" fg:w="43"/><text x="22.9277%" y="431.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (43 samples, 0.03%)</title><rect x="22.6777%" y="405" width="0.0285%" height="15" fill="rgb(213,116,27)" fg:x="34234" fg:w="43"/><text x="22.9277%" y="415.50"></text></g><g><title>[libc-2.31.so] (352 samples, 0.23%)</title><rect x="22.7121%" y="501" width="0.2332%" height="15" fill="rgb(241,95,50)" fg:x="34286" fg:w="352"/><text x="22.9621%" y="511.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,688 samples, 3.11%)</title><rect x="19.8570%" y="533" width="3.1055%" height="15" fill="rgb(238,48,32)" fg:x="29976" fg:w="4688"/><text x="20.1070%" y="543.50">&lt;co..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_source_reply::{{closure}} (4,258 samples, 2.82%)</title><rect x="20.1419%" y="517" width="2.8206%" height="15" fill="rgb(235,113,49)" fg:x="30406" fg:w="4258"/><text x="20.3919%" y="527.50">tr..</text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager&lt;tremor_runtime::connectors::impls::bench::Blaster&gt;::handle_data::{{closure}}&gt;&gt; (26 samples, 0.02%)</title><rect x="22.9453%" y="501" width="0.0172%" height="15" fill="rgb(205,127,43)" fg:x="34638" fg:w="26"/><text x="23.1953%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::source::SourceManager&lt;tremor_runtime::connectors::impls::bench::Blaster&gt;::handle_data::{{closure}}&gt; (26 samples, 0.02%)</title><rect x="22.9453%" y="485" width="0.0172%" height="15" fill="rgb(250,162,2)" fg:x="34638" fg:w="26"/><text x="23.1953%" y="495.50"></text></g><g><title>[libc-2.31.so] (597 samples, 0.40%)</title><rect x="23.4507%" y="517" width="0.3955%" height="15" fill="rgb(220,13,41)" fg:x="35401" fg:w="597"/><text x="23.7007%" y="527.50"></text></g><g><title>sn_rust_dealloc (74 samples, 0.05%)</title><rect x="23.8561%" y="405" width="0.0490%" height="15" fill="rgb(249,221,25)" fg:x="36013" fg:w="74"/><text x="24.1061%" y="415.50"></text></g><g><title>alloc::alloc::box_free (89 samples, 0.06%)</title><rect x="23.8502%" y="485" width="0.0590%" height="15" fill="rgb(215,208,19)" fg:x="36004" fg:w="89"/><text x="24.1002%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (89 samples, 0.06%)</title><rect x="23.8502%" y="469" width="0.0590%" height="15" fill="rgb(236,175,2)" fg:x="36004" fg:w="89"/><text x="24.1002%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (87 samples, 0.06%)</title><rect x="23.8515%" y="453" width="0.0576%" height="15" fill="rgb(241,52,2)" fg:x="36006" fg:w="87"/><text x="24.1015%" y="463.50"></text></g><g><title>__rg_dealloc (87 samples, 0.06%)</title><rect x="23.8515%" y="437" width="0.0576%" height="15" fill="rgb(248,140,14)" fg:x="36006" fg:w="87"/><text x="24.1015%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (87 samples, 0.06%)</title><rect x="23.8515%" y="421" width="0.0576%" height="15" fill="rgb(253,22,42)" fg:x="36006" fg:w="87"/><text x="24.1015%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;tremor_runtime::connectors::source::SourceReply,tremor_runtime::errors::Error&gt;+core::marker::Send&gt;&gt;&gt; (90 samples, 0.06%)</title><rect x="23.8502%" y="517" width="0.0596%" height="15" fill="rgb(234,61,47)" fg:x="36004" fg:w="90"/><text x="24.1002%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;tremor_runtime::connectors::source::SourceReply,tremor_runtime::errors::Error&gt;+core::marker::Send&gt;&gt; (90 samples, 0.06%)</title><rect x="23.8502%" y="501" width="0.0596%" height="15" fill="rgb(208,226,15)" fg:x="36004" fg:w="90"/><text x="24.1002%" y="511.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1,441 samples, 0.95%)</title><rect x="22.9625%" y="533" width="0.9546%" height="15" fill="rgb(217,221,4)" fg:x="34664" fg:w="1441"/><text x="23.2125%" y="543.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (162 samples, 0.11%)</title><rect x="24.2271%" y="389" width="0.1073%" height="15" fill="rgb(212,174,34)" fg:x="36573" fg:w="162"/><text x="24.4771%" y="399.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (638 samples, 0.42%)</title><rect x="23.9171%" y="517" width="0.4226%" height="15" fill="rgb(253,83,4)" fg:x="36105" fg:w="638"/><text x="24.1671%" y="527.50"></text></g><g><title>alloc::alloc::exchange_malloc (247 samples, 0.16%)</title><rect x="24.1761%" y="501" width="0.1636%" height="15" fill="rgb(250,195,49)" fg:x="36496" fg:w="247"/><text x="24.4261%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (247 samples, 0.16%)</title><rect x="24.1761%" y="485" width="0.1636%" height="15" fill="rgb(241,192,25)" fg:x="36496" fg:w="247"/><text x="24.4261%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (247 samples, 0.16%)</title><rect x="24.1761%" y="469" width="0.1636%" height="15" fill="rgb(208,124,10)" fg:x="36496" fg:w="247"/><text x="24.4261%" y="479.50"></text></g><g><title>alloc::alloc::alloc (246 samples, 0.16%)</title><rect x="24.1768%" y="453" width="0.1630%" height="15" fill="rgb(222,33,0)" fg:x="36497" fg:w="246"/><text x="24.4268%" y="463.50"></text></g><g><title>__rg_alloc (246 samples, 0.16%)</title><rect x="24.1768%" y="437" width="0.1630%" height="15" fill="rgb(234,209,28)" fg:x="36497" fg:w="246"/><text x="24.4268%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (246 samples, 0.16%)</title><rect x="24.1768%" y="421" width="0.1630%" height="15" fill="rgb(224,11,23)" fg:x="36497" fg:w="246"/><text x="24.4268%" y="431.50"></text></g><g><title>sn_rust_alloc (227 samples, 0.15%)</title><rect x="24.1893%" y="405" width="0.1504%" height="15" fill="rgb(232,99,1)" fg:x="36516" fg:w="227"/><text x="24.4393%" y="415.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::Source&gt;::pull_data (645 samples, 0.43%)</title><rect x="23.9171%" y="533" width="0.4273%" height="15" fill="rgb(237,95,45)" fg:x="36105" fg:w="645"/><text x="24.1671%" y="543.50"></text></g><g><title>[libc-2.31.so] (445 samples, 0.29%)</title><rect x="24.3444%" y="533" width="0.2948%" height="15" fill="rgb(208,109,11)" fg:x="36750" fg:w="445"/><text x="24.5944%" y="543.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::run::{{closure}} (7,887 samples, 5.22%)</title><rect x="19.4377%" y="549" width="5.2246%" height="15" fill="rgb(216,190,48)" fg:x="29343" fg:w="7887"/><text x="19.6877%" y="559.50">tremor..</text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (25 samples, 0.02%)</title><rect x="25.0704%" y="533" width="0.0166%" height="15" fill="rgb(251,171,36)" fg:x="37846" fg:w="25"/><text x="25.3204%" y="543.50"></text></g><g><title>[libc-2.31.so] (407 samples, 0.27%)</title><rect x="25.1134%" y="517" width="0.2696%" height="15" fill="rgb(230,62,22)" fg:x="37911" fg:w="407"/><text x="25.3634%" y="527.50"></text></g><g><title>[libc-2.31.so] (585 samples, 0.39%)</title><rect x="25.4599%" y="501" width="0.3875%" height="15" fill="rgb(225,114,35)" fg:x="38434" fg:w="585"/><text x="25.7099%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (305 samples, 0.20%)</title><rect x="25.8474%" y="501" width="0.2020%" height="15" fill="rgb(215,118,42)" fg:x="39019" fg:w="305"/><text x="26.0974%" y="511.50"></text></g><g><title>core::ptr::write (275 samples, 0.18%)</title><rect x="25.8673%" y="485" width="0.1822%" height="15" fill="rgb(243,119,21)" fg:x="39049" fg:w="275"/><text x="26.1173%" y="495.50"></text></g><g><title>[libc-2.31.so] (275 samples, 0.18%)</title><rect x="25.8673%" y="469" width="0.1822%" height="15" fill="rgb(252,177,53)" fg:x="39049" fg:w="275"/><text x="26.1173%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (28 samples, 0.02%)</title><rect x="26.0495%" y="501" width="0.0185%" height="15" fill="rgb(237,209,29)" fg:x="39324" fg:w="28"/><text x="26.2995%" y="511.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (746 samples, 0.49%)</title><rect x="26.0726%" y="501" width="0.4942%" height="15" fill="rgb(212,65,23)" fg:x="39359" fg:w="746"/><text x="26.3226%" y="511.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (734 samples, 0.49%)</title><rect x="26.0806%" y="485" width="0.4862%" height="15" fill="rgb(230,222,46)" fg:x="39371" fg:w="734"/><text x="26.3306%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (698 samples, 0.46%)</title><rect x="26.1044%" y="469" width="0.4624%" height="15" fill="rgb(215,135,32)" fg:x="39407" fg:w="698"/><text x="26.3544%" y="479.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (698 samples, 0.46%)</title><rect x="26.1044%" y="453" width="0.4624%" height="15" fill="rgb(246,101,22)" fg:x="39407" fg:w="698"/><text x="26.3544%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (698 samples, 0.46%)</title><rect x="26.1044%" y="437" width="0.4624%" height="15" fill="rgb(206,107,13)" fg:x="39407" fg:w="698"/><text x="26.3544%" y="447.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (698 samples, 0.46%)</title><rect x="26.1044%" y="421" width="0.4624%" height="15" fill="rgb(250,100,44)" fg:x="39407" fg:w="698"/><text x="26.3544%" y="431.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (698 samples, 0.46%)</title><rect x="26.1044%" y="405" width="0.4624%" height="15" fill="rgb(231,147,38)" fg:x="39407" fg:w="698"/><text x="26.3544%" y="415.50"></text></g><g><title>[libc-2.31.so] (683 samples, 0.45%)</title><rect x="26.1144%" y="389" width="0.4524%" height="15" fill="rgb(229,8,40)" fg:x="39422" fg:w="683"/><text x="26.3644%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::reverse (19 samples, 0.01%)</title><rect x="26.5794%" y="485" width="0.0126%" height="15" fill="rgb(221,135,30)" fg:x="40124" fg:w="19"/><text x="26.8294%" y="495.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::clone::Clone&gt;::clone (23 samples, 0.02%)</title><rect x="26.7828%" y="469" width="0.0152%" height="15" fill="rgb(249,193,18)" fg:x="40431" fg:w="23"/><text x="27.0328%" y="479.50"></text></g><g><title>[libc-2.31.so] (260 samples, 0.17%)</title><rect x="26.7980%" y="469" width="0.1722%" height="15" fill="rgb(209,133,39)" fg:x="40454" fg:w="260"/><text x="27.0480%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (677 samples, 0.45%)</title><rect x="26.9709%" y="469" width="0.4485%" height="15" fill="rgb(232,100,14)" fg:x="40715" fg:w="677"/><text x="27.2209%" y="479.50"></text></g><g><title>core::ptr::read (658 samples, 0.44%)</title><rect x="26.9835%" y="453" width="0.4359%" height="15" fill="rgb(224,185,1)" fg:x="40734" fg:w="658"/><text x="27.2335%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (310 samples, 0.21%)</title><rect x="27.4194%" y="469" width="0.2054%" height="15" fill="rgb(223,139,8)" fg:x="41392" fg:w="310"/><text x="27.6694%" y="479.50"></text></g><g><title>core::ptr::write (296 samples, 0.20%)</title><rect x="27.4286%" y="453" width="0.1961%" height="15" fill="rgb(232,213,38)" fg:x="41406" fg:w="296"/><text x="27.6786%" y="463.50"></text></g><g><title>[libc-2.31.so] (291 samples, 0.19%)</title><rect x="27.4320%" y="437" width="0.1928%" height="15" fill="rgb(207,94,22)" fg:x="41411" fg:w="291"/><text x="27.6820%" y="447.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (3,391 samples, 2.25%)</title><rect x="25.3831%" y="517" width="2.2463%" height="15" fill="rgb(219,183,54)" fg:x="38318" fg:w="3391"/><text x="25.6331%" y="527.50">t..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (1,604 samples, 1.06%)</title><rect x="26.5668%" y="501" width="1.0625%" height="15" fill="rgb(216,185,54)" fg:x="40105" fg:w="1604"/><text x="26.8168%" y="511.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (1,566 samples, 1.04%)</title><rect x="26.5920%" y="485" width="1.0374%" height="15" fill="rgb(254,217,39)" fg:x="40143" fg:w="1566"/><text x="26.8420%" y="495.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,887 samples, 2.57%)</title><rect x="25.0916%" y="533" width="2.5749%" height="15" fill="rgb(240,178,23)" fg:x="37878" fg:w="3887"/><text x="25.3416%" y="543.50">&lt;c..</text></g><g><title>tremor_runtime::pipeline::handle_insights::{{closure}} (56 samples, 0.04%)</title><rect x="27.6294%" y="517" width="0.0371%" height="15" fill="rgb(218,11,47)" fg:x="41709" fg:w="56"/><text x="27.8794%" y="527.50"></text></g><g><title>[libc-2.31.so] (1,396 samples, 0.92%)</title><rect x="27.6665%" y="533" width="0.9248%" height="15" fill="rgb(218,51,51)" fg:x="41765" fg:w="1396"/><text x="27.9165%" y="543.50"></text></g><g><title>sn_rust_dealloc (178 samples, 0.12%)</title><rect x="28.6058%" y="373" width="0.1179%" height="15" fill="rgb(238,126,27)" fg:x="43183" fg:w="178"/><text x="28.8558%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (203 samples, 0.13%)</title><rect x="28.5919%" y="533" width="0.1345%" height="15" fill="rgb(249,202,22)" fg:x="43162" fg:w="203"/><text x="28.8419%" y="543.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (203 samples, 0.13%)</title><rect x="28.5919%" y="517" width="0.1345%" height="15" fill="rgb(254,195,49)" fg:x="43162" fg:w="203"/><text x="28.8419%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (182 samples, 0.12%)</title><rect x="28.6058%" y="501" width="0.1206%" height="15" fill="rgb(208,123,14)" fg:x="43183" fg:w="182"/><text x="28.8558%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (182 samples, 0.12%)</title><rect x="28.6058%" y="485" width="0.1206%" height="15" fill="rgb(224,200,8)" fg:x="43183" fg:w="182"/><text x="28.8558%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (182 samples, 0.12%)</title><rect x="28.6058%" y="469" width="0.1206%" height="15" fill="rgb(217,61,36)" fg:x="43183" fg:w="182"/><text x="28.8558%" y="479.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (182 samples, 0.12%)</title><rect x="28.6058%" y="453" width="0.1206%" height="15" fill="rgb(206,35,45)" fg:x="43183" fg:w="182"/><text x="28.8558%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (182 samples, 0.12%)</title><rect x="28.6058%" y="437" width="0.1206%" height="15" fill="rgb(217,65,33)" fg:x="43183" fg:w="182"/><text x="28.8558%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (182 samples, 0.12%)</title><rect x="28.6058%" y="421" width="0.1206%" height="15" fill="rgb(222,158,48)" fg:x="43183" fg:w="182"/><text x="28.8558%" y="431.50"></text></g><g><title>__rg_dealloc (182 samples, 0.12%)</title><rect x="28.6058%" y="405" width="0.1206%" height="15" fill="rgb(254,2,54)" fg:x="43183" fg:w="182"/><text x="28.8558%" y="415.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (182 samples, 0.12%)</title><rect x="28.6058%" y="389" width="0.1206%" height="15" fill="rgb(250,143,38)" fg:x="43183" fg:w="182"/><text x="28.8558%" y="399.50"></text></g><g><title>async_global_executor::reactor::block_on (18,386 samples, 12.18%)</title><rect x="16.5628%" y="885" width="12.1795%" height="15" fill="rgb(248,25,0)" fg:x="25003" fg:w="18386"/><text x="16.8128%" y="895.50">async_global_execu..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (18,386 samples, 12.18%)</title><rect x="16.5628%" y="869" width="12.1795%" height="15" fill="rgb(206,152,27)" fg:x="25003" fg:w="18386"/><text x="16.8128%" y="879.50">async_global_execu..</text></g><g><title>async_io::driver::block_on (18,386 samples, 12.18%)</title><rect x="16.5628%" y="853" width="12.1795%" height="15" fill="rgb(240,77,30)" fg:x="25003" fg:w="18386"/><text x="16.8128%" y="863.50">async_io::driver::..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (18,386 samples, 12.18%)</title><rect x="16.5628%" y="837" width="12.1795%" height="15" fill="rgb(231,5,3)" fg:x="25003" fg:w="18386"/><text x="16.8128%" y="847.50">&lt;futures_lite::fut..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,386 samples, 12.18%)</title><rect x="16.5628%" y="821" width="12.1795%" height="15" fill="rgb(207,226,32)" fg:x="25003" fg:w="18386"/><text x="16.8128%" y="831.50">&lt;core::future::fro..</text></g><g><title>async_executor::Executor::run::{{closure}} (18,386 samples, 12.18%)</title><rect x="16.5628%" y="805" width="12.1795%" height="15" fill="rgb(222,207,47)" fg:x="25003" fg:w="18386"/><text x="16.8128%" y="815.50">async_executor::Ex..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (18,386 samples, 12.18%)</title><rect x="16.5628%" y="789" width="12.1795%" height="15" fill="rgb(229,115,45)" fg:x="25003" fg:w="18386"/><text x="16.8128%" y="799.50">&lt;futures_lite::fut..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,386 samples, 12.18%)</title><rect x="16.5628%" y="773" width="12.1795%" height="15" fill="rgb(224,191,6)" fg:x="25003" fg:w="18386"/><text x="16.8128%" y="783.50">&lt;core::future::fro..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (18,386 samples, 12.18%)</title><rect x="16.5628%" y="757" width="12.1795%" height="15" fill="rgb(230,227,24)" fg:x="25003" fg:w="18386"/><text x="16.8128%" y="767.50">async_executor::Ex..</text></g><g><title>async_task::runnable::Runnable::run (18,386 samples, 12.18%)</title><rect x="16.5628%" y="741" width="12.1795%" height="15" fill="rgb(228,80,19)" fg:x="25003" fg:w="18386"/><text x="16.8128%" y="751.50">async_task::runnab..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (18,386 samples, 12.18%)</title><rect x="16.5628%" y="725" width="12.1795%" height="15" fill="rgb(247,229,0)" fg:x="25003" fg:w="18386"/><text x="16.8128%" y="735.50">async_task::raw::R..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (18,386 samples, 12.18%)</title><rect x="16.5628%" y="709" width="12.1795%" height="15" fill="rgb(237,194,15)" fg:x="25003" fg:w="18386"/><text x="16.8128%" y="719.50">&lt;core::pin::Pin&lt;P&gt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,386 samples, 12.18%)</title><rect x="16.5628%" y="693" width="12.1795%" height="15" fill="rgb(219,203,20)" fg:x="25003" fg:w="18386"/><text x="16.8128%" y="703.50">&lt;core::future::fro..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (18,386 samples, 12.18%)</title><rect x="16.5628%" y="677" width="12.1795%" height="15" fill="rgb(234,128,8)" fg:x="25003" fg:w="18386"/><text x="16.8128%" y="687.50">async_executor::Ex..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (18,386 samples, 12.18%)</title><rect x="16.5628%" y="661" width="12.1795%" height="15" fill="rgb(248,202,8)" fg:x="25003" fg:w="18386"/><text x="16.8128%" y="671.50">&lt;async_std::task::..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (18,386 samples, 12.18%)</title><rect x="16.5628%" y="645" width="12.1795%" height="15" fill="rgb(206,104,37)" fg:x="25003" fg:w="18386"/><text x="16.8128%" y="655.50">async_std::task::t..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (18,386 samples, 12.18%)</title><rect x="16.5628%" y="629" width="12.1795%" height="15" fill="rgb(223,8,27)" fg:x="25003" fg:w="18386"/><text x="16.8128%" y="639.50">std::thread::local..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (18,386 samples, 12.18%)</title><rect x="16.5628%" y="613" width="12.1795%" height="15" fill="rgb(216,217,28)" fg:x="25003" fg:w="18386"/><text x="16.8128%" y="623.50">std::thread::local..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (18,386 samples, 12.18%)</title><rect x="16.5628%" y="597" width="12.1795%" height="15" fill="rgb(249,199,1)" fg:x="25003" fg:w="18386"/><text x="16.8128%" y="607.50">async_std::task::t..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (18,386 samples, 12.18%)</title><rect x="16.5628%" y="581" width="12.1795%" height="15" fill="rgb(240,85,17)" fg:x="25003" fg:w="18386"/><text x="16.8128%" y="591.50">&lt;async_std::task::..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,386 samples, 12.18%)</title><rect x="16.5628%" y="565" width="12.1795%" height="15" fill="rgb(206,108,45)" fg:x="25003" fg:w="18386"/><text x="16.8128%" y="575.50">&lt;core::future::fro..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (6,159 samples, 4.08%)</title><rect x="24.6623%" y="549" width="4.0799%" height="15" fill="rgb(245,210,41)" fg:x="37230" fg:w="6159"/><text x="24.9123%" y="559.50">trem..</text></g><g><title>[libc-2.31.so] (479 samples, 0.32%)</title><rect x="28.8012%" y="341" width="0.3173%" height="15" fill="rgb(206,13,37)" fg:x="43478" fg:w="479"/><text x="29.0512%" y="351.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (523 samples, 0.35%)</title><rect x="28.7774%" y="357" width="0.3465%" height="15" fill="rgb(250,61,18)" fg:x="43442" fg:w="523"/><text x="29.0274%" y="367.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (772 samples, 0.51%)</title><rect x="28.7515%" y="373" width="0.5114%" height="15" fill="rgb(235,172,48)" fg:x="43403" fg:w="772"/><text x="29.0015%" y="383.50"></text></g><g><title>[libc-2.31.so] (210 samples, 0.14%)</title><rect x="29.1238%" y="357" width="0.1391%" height="15" fill="rgb(249,201,17)" fg:x="43965" fg:w="210"/><text x="29.3738%" y="367.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (793 samples, 0.53%)</title><rect x="28.7422%" y="405" width="0.5253%" height="15" fill="rgb(219,208,6)" fg:x="43389" fg:w="793"/><text x="28.9922%" y="415.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (793 samples, 0.53%)</title><rect x="28.7422%" y="389" width="0.5253%" height="15" fill="rgb(248,31,23)" fg:x="43389" fg:w="793"/><text x="28.9922%" y="399.50"></text></g><g><title>&lt;tremor_pipeline::event::ValueIter as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.01%)</title><rect x="30.8415%" y="357" width="0.0113%" height="15" fill="rgb(245,15,42)" fg:x="46558" fg:w="17"/><text x="31.0915%" y="367.50"></text></g><g><title>[libc-2.31.so] (223 samples, 0.15%)</title><rect x="30.8527%" y="357" width="0.1477%" height="15" fill="rgb(222,217,39)" fg:x="46575" fg:w="223"/><text x="31.1027%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (26 samples, 0.02%)</title><rect x="31.0025%" y="357" width="0.0172%" height="15" fill="rgb(210,219,27)" fg:x="46801" fg:w="26"/><text x="31.2525%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (26 samples, 0.02%)</title><rect x="31.0025%" y="341" width="0.0172%" height="15" fill="rgb(252,166,36)" fg:x="46801" fg:w="26"/><text x="31.2525%" y="351.50"></text></g><g><title>sn_rust_dealloc (67 samples, 0.04%)</title><rect x="31.0561%" y="197" width="0.0444%" height="15" fill="rgb(245,132,34)" fg:x="46882" fg:w="67"/><text x="31.3061%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (127 samples, 0.08%)</title><rect x="31.0329%" y="341" width="0.0841%" height="15" fill="rgb(236,54,3)" fg:x="46847" fg:w="127"/><text x="31.2829%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;u8&gt;]&gt; (127 samples, 0.08%)</title><rect x="31.0329%" y="325" width="0.0841%" height="15" fill="rgb(241,173,43)" fg:x="46847" fg:w="127"/><text x="31.2829%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (112 samples, 0.07%)</title><rect x="31.0429%" y="309" width="0.0742%" height="15" fill="rgb(215,190,9)" fg:x="46862" fg:w="112"/><text x="31.2929%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (112 samples, 0.07%)</title><rect x="31.0429%" y="293" width="0.0742%" height="15" fill="rgb(242,101,16)" fg:x="46862" fg:w="112"/><text x="31.2929%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (112 samples, 0.07%)</title><rect x="31.0429%" y="277" width="0.0742%" height="15" fill="rgb(223,190,21)" fg:x="46862" fg:w="112"/><text x="31.2929%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (105 samples, 0.07%)</title><rect x="31.0475%" y="261" width="0.0696%" height="15" fill="rgb(215,228,25)" fg:x="46869" fg:w="105"/><text x="31.2975%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (105 samples, 0.07%)</title><rect x="31.0475%" y="245" width="0.0696%" height="15" fill="rgb(225,36,22)" fg:x="46869" fg:w="105"/><text x="31.2975%" y="255.50"></text></g><g><title>__rg_dealloc (105 samples, 0.07%)</title><rect x="31.0475%" y="229" width="0.0696%" height="15" fill="rgb(251,106,46)" fg:x="46869" fg:w="105"/><text x="31.2975%" y="239.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (105 samples, 0.07%)</title><rect x="31.0475%" y="213" width="0.0696%" height="15" fill="rgb(208,90,1)" fg:x="46869" fg:w="105"/><text x="31.2975%" y="223.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (25 samples, 0.02%)</title><rect x="31.1005%" y="197" width="0.0166%" height="15" fill="rgb(243,10,4)" fg:x="46949" fg:w="25"/><text x="31.3505%" y="207.50"></text></g><g><title>sn_rust_dealloc (54 samples, 0.04%)</title><rect x="31.1204%" y="245" width="0.0358%" height="15" fill="rgb(212,137,27)" fg:x="46979" fg:w="54"/><text x="31.3704%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (61 samples, 0.04%)</title><rect x="31.1171%" y="309" width="0.0404%" height="15" fill="rgb(231,220,49)" fg:x="46974" fg:w="61"/><text x="31.3671%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (61 samples, 0.04%)</title><rect x="31.1171%" y="293" width="0.0404%" height="15" fill="rgb(237,96,20)" fg:x="46974" fg:w="61"/><text x="31.3671%" y="303.50"></text></g><g><title>__rg_dealloc (61 samples, 0.04%)</title><rect x="31.1171%" y="277" width="0.0404%" height="15" fill="rgb(239,229,30)" fg:x="46974" fg:w="61"/><text x="31.3671%" y="287.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (61 samples, 0.04%)</title><rect x="31.1171%" y="261" width="0.0404%" height="15" fill="rgb(219,65,33)" fg:x="46974" fg:w="61"/><text x="31.3671%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (195 samples, 0.13%)</title><rect x="31.0329%" y="357" width="0.1292%" height="15" fill="rgb(243,134,7)" fg:x="46847" fg:w="195"/><text x="31.2829%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (68 samples, 0.05%)</title><rect x="31.1171%" y="341" width="0.0450%" height="15" fill="rgb(216,177,54)" fg:x="46974" fg:w="68"/><text x="31.3671%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (68 samples, 0.05%)</title><rect x="31.1171%" y="325" width="0.0450%" height="15" fill="rgb(211,160,20)" fg:x="46974" fg:w="68"/><text x="31.3671%" y="335.50"></text></g><g><title>sn_rust_dealloc (144 samples, 0.10%)</title><rect x="31.1754%" y="181" width="0.0954%" height="15" fill="rgb(239,85,39)" fg:x="47062" fg:w="144"/><text x="31.4254%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (175 samples, 0.12%)</title><rect x="31.1694%" y="309" width="0.1159%" height="15" fill="rgb(232,125,22)" fg:x="47053" fg:w="175"/><text x="31.4194%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (175 samples, 0.12%)</title><rect x="31.1694%" y="293" width="0.1159%" height="15" fill="rgb(244,57,34)" fg:x="47053" fg:w="175"/><text x="31.4194%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (175 samples, 0.12%)</title><rect x="31.1694%" y="277" width="0.1159%" height="15" fill="rgb(214,203,32)" fg:x="47053" fg:w="175"/><text x="31.4194%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (175 samples, 0.12%)</title><rect x="31.1694%" y="261" width="0.1159%" height="15" fill="rgb(207,58,43)" fg:x="47053" fg:w="175"/><text x="31.4194%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (166 samples, 0.11%)</title><rect x="31.1754%" y="245" width="0.1100%" height="15" fill="rgb(215,193,15)" fg:x="47062" fg:w="166"/><text x="31.4254%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (166 samples, 0.11%)</title><rect x="31.1754%" y="229" width="0.1100%" height="15" fill="rgb(232,15,44)" fg:x="47062" fg:w="166"/><text x="31.4254%" y="239.50"></text></g><g><title>__rg_dealloc (166 samples, 0.11%)</title><rect x="31.1754%" y="213" width="0.1100%" height="15" fill="rgb(212,3,48)" fg:x="47062" fg:w="166"/><text x="31.4254%" y="223.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (166 samples, 0.11%)</title><rect x="31.1754%" y="197" width="0.1100%" height="15" fill="rgb(218,128,7)" fg:x="47062" fg:w="166"/><text x="31.4254%" y="207.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (22 samples, 0.01%)</title><rect x="31.2707%" y="181" width="0.0146%" height="15" fill="rgb(226,216,39)" fg:x="47206" fg:w="22"/><text x="31.5207%" y="191.50"></text></g><g><title>sn_rust_dealloc (195 samples, 0.13%)</title><rect x="31.4370%" y="133" width="0.1292%" height="15" fill="rgb(243,47,51)" fg:x="47457" fg:w="195"/><text x="31.6870%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (205 samples, 0.14%)</title><rect x="31.4324%" y="197" width="0.1358%" height="15" fill="rgb(241,183,40)" fg:x="47450" fg:w="205"/><text x="31.6824%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (205 samples, 0.14%)</title><rect x="31.4324%" y="181" width="0.1358%" height="15" fill="rgb(231,217,32)" fg:x="47450" fg:w="205"/><text x="31.6824%" y="191.50"></text></g><g><title>__rg_dealloc (205 samples, 0.14%)</title><rect x="31.4324%" y="165" width="0.1358%" height="15" fill="rgb(229,61,38)" fg:x="47450" fg:w="205"/><text x="31.6824%" y="175.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (205 samples, 0.14%)</title><rect x="31.4324%" y="149" width="0.1358%" height="15" fill="rgb(225,210,5)" fg:x="47450" fg:w="205"/><text x="31.6824%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (432 samples, 0.29%)</title><rect x="31.2853%" y="293" width="0.2862%" height="15" fill="rgb(231,79,45)" fg:x="47228" fg:w="432"/><text x="31.5353%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (426 samples, 0.28%)</title><rect x="31.2893%" y="277" width="0.2822%" height="15" fill="rgb(224,100,7)" fg:x="47234" fg:w="426"/><text x="31.5393%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (416 samples, 0.28%)</title><rect x="31.2959%" y="261" width="0.2756%" height="15" fill="rgb(241,198,18)" fg:x="47244" fg:w="416"/><text x="31.5459%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (416 samples, 0.28%)</title><rect x="31.2959%" y="245" width="0.2756%" height="15" fill="rgb(252,97,53)" fg:x="47244" fg:w="416"/><text x="31.5459%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (416 samples, 0.28%)</title><rect x="31.2959%" y="229" width="0.2756%" height="15" fill="rgb(220,88,7)" fg:x="47244" fg:w="416"/><text x="31.5459%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (416 samples, 0.28%)</title><rect x="31.2959%" y="213" width="0.2756%" height="15" fill="rgb(213,176,14)" fg:x="47244" fg:w="416"/><text x="31.5459%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (629 samples, 0.42%)</title><rect x="31.1694%" y="325" width="0.4167%" height="15" fill="rgb(246,73,7)" fg:x="47053" fg:w="629"/><text x="31.4194%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (454 samples, 0.30%)</title><rect x="31.2853%" y="309" width="0.3007%" height="15" fill="rgb(245,64,36)" fg:x="47228" fg:w="454"/><text x="31.5353%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::string::String&gt;&gt; (22 samples, 0.01%)</title><rect x="31.5715%" y="293" width="0.0146%" height="15" fill="rgb(245,80,10)" fg:x="47660" fg:w="22"/><text x="31.8215%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.01%)</title><rect x="31.5715%" y="277" width="0.0146%" height="15" fill="rgb(232,107,50)" fg:x="47660" fg:w="22"/><text x="31.8215%" y="287.50"></text></g><g><title>sn_rust_dealloc (80 samples, 0.05%)</title><rect x="31.5861%" y="325" width="0.0530%" height="15" fill="rgb(253,3,0)" fg:x="47682" fg:w="80"/><text x="31.8361%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (727 samples, 0.48%)</title><rect x="31.1628%" y="341" width="0.4816%" height="15" fill="rgb(212,99,53)" fg:x="47043" fg:w="727"/><text x="31.4128%" y="351.50"></text></g><g><title>core::mem::drop (616 samples, 0.41%)</title><rect x="31.9239%" y="229" width="0.4081%" height="15" fill="rgb(249,111,54)" fg:x="48192" fg:w="616"/><text x="32.1739%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;alloc::string::String&gt;&gt; (616 samples, 0.41%)</title><rect x="31.9239%" y="213" width="0.4081%" height="15" fill="rgb(249,55,30)" fg:x="48192" fg:w="616"/><text x="32.1739%" y="223.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (616 samples, 0.41%)</title><rect x="31.9239%" y="197" width="0.4081%" height="15" fill="rgb(237,47,42)" fg:x="48192" fg:w="616"/><text x="32.1739%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (600 samples, 0.40%)</title><rect x="31.9345%" y="181" width="0.3975%" height="15" fill="rgb(211,20,18)" fg:x="48208" fg:w="600"/><text x="32.1845%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_sub (600 samples, 0.40%)</title><rect x="31.9345%" y="165" width="0.3975%" height="15" fill="rgb(231,203,46)" fg:x="48208" fg:w="600"/><text x="32.1845%" y="175.50"></text></g><g><title>sn_rust_dealloc (141 samples, 0.09%)</title><rect x="32.3452%" y="101" width="0.0934%" height="15" fill="rgb(237,142,3)" fg:x="48828" fg:w="141"/><text x="32.5952%" y="111.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1,083 samples, 0.72%)</title><rect x="31.9239%" y="245" width="0.7174%" height="15" fill="rgb(241,107,1)" fg:x="48192" fg:w="1083"/><text x="32.1739%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (467 samples, 0.31%)</title><rect x="32.3320%" y="229" width="0.3094%" height="15" fill="rgb(229,83,13)" fg:x="48808" fg:w="467"/><text x="32.5820%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (467 samples, 0.31%)</title><rect x="32.3320%" y="213" width="0.3094%" height="15" fill="rgb(241,91,40)" fg:x="48808" fg:w="467"/><text x="32.5820%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (467 samples, 0.31%)</title><rect x="32.3320%" y="197" width="0.3094%" height="15" fill="rgb(225,3,45)" fg:x="48808" fg:w="467"/><text x="32.5820%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (467 samples, 0.31%)</title><rect x="32.3320%" y="181" width="0.3094%" height="15" fill="rgb(244,223,14)" fg:x="48808" fg:w="467"/><text x="32.5820%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (447 samples, 0.30%)</title><rect x="32.3452%" y="165" width="0.2961%" height="15" fill="rgb(224,124,37)" fg:x="48828" fg:w="447"/><text x="32.5952%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (447 samples, 0.30%)</title><rect x="32.3452%" y="149" width="0.2961%" height="15" fill="rgb(251,171,30)" fg:x="48828" fg:w="447"/><text x="32.5952%" y="159.50"></text></g><g><title>__rg_dealloc (447 samples, 0.30%)</title><rect x="32.3452%" y="133" width="0.2961%" height="15" fill="rgb(236,46,54)" fg:x="48828" fg:w="447"/><text x="32.5952%" y="143.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (447 samples, 0.30%)</title><rect x="32.3452%" y="117" width="0.2961%" height="15" fill="rgb(245,213,5)" fg:x="48828" fg:w="447"/><text x="32.5952%" y="127.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (306 samples, 0.20%)</title><rect x="32.4386%" y="101" width="0.2027%" height="15" fill="rgb(230,144,27)" fg:x="48969" fg:w="306"/><text x="32.6886%" y="111.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (845 samples, 0.56%)</title><rect x="32.6413%" y="245" width="0.5598%" height="15" fill="rgb(220,86,6)" fg:x="49275" fg:w="845"/><text x="32.8913%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_sub (845 samples, 0.56%)</title><rect x="32.6413%" y="229" width="0.5598%" height="15" fill="rgb(240,20,13)" fg:x="49275" fg:w="845"/><text x="32.8913%" y="239.50"></text></g><g><title>sn_rust_dealloc (78 samples, 0.05%)</title><rect x="33.2011%" y="245" width="0.0517%" height="15" fill="rgb(217,89,34)" fg:x="50120" fg:w="78"/><text x="33.4511%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,461 samples, 1.63%)</title><rect x="31.6523%" y="309" width="1.6302%" height="15" fill="rgb(229,13,5)" fg:x="47782" fg:w="2461"/><text x="31.9023%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::sync::Arc&lt;core::pin::Pin&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;]&gt; (2,461 samples, 1.63%)</title><rect x="31.6523%" y="293" width="1.6302%" height="15" fill="rgb(244,67,35)" fg:x="47782" fg:w="2461"/><text x="31.9023%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;core::pin::Pin&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;&gt; (2,448 samples, 1.62%)</title><rect x="31.6609%" y="277" width="1.6216%" height="15" fill="rgb(221,40,2)" fg:x="47795" fg:w="2448"/><text x="31.9109%" y="287.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2,448 samples, 1.62%)</title><rect x="31.6609%" y="261" width="1.6216%" height="15" fill="rgb(237,157,21)" fg:x="47795" fg:w="2448"/><text x="31.9109%" y="271.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (45 samples, 0.03%)</title><rect x="33.2527%" y="245" width="0.0298%" height="15" fill="rgb(222,94,11)" fg:x="50198" fg:w="45"/><text x="33.5027%" y="255.50"></text></g><g><title>sn_rust_dealloc (75 samples, 0.05%)</title><rect x="33.2918%" y="213" width="0.0497%" height="15" fill="rgb(249,113,6)" fg:x="50257" fg:w="75"/><text x="33.5418%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (83 samples, 0.05%)</title><rect x="33.2878%" y="277" width="0.0550%" height="15" fill="rgb(238,137,36)" fg:x="50251" fg:w="83"/><text x="33.5378%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (83 samples, 0.05%)</title><rect x="33.2878%" y="261" width="0.0550%" height="15" fill="rgb(210,102,26)" fg:x="50251" fg:w="83"/><text x="33.5378%" y="271.50"></text></g><g><title>__rg_dealloc (83 samples, 0.05%)</title><rect x="33.2878%" y="245" width="0.0550%" height="15" fill="rgb(218,30,30)" fg:x="50251" fg:w="83"/><text x="33.5378%" y="255.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (83 samples, 0.05%)</title><rect x="33.2878%" y="229" width="0.0550%" height="15" fill="rgb(214,67,26)" fg:x="50251" fg:w="83"/><text x="33.5378%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;core::pin::Pin&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;&gt;&gt; (2,553 samples, 1.69%)</title><rect x="31.6523%" y="325" width="1.6912%" height="15" fill="rgb(251,9,53)" fg:x="47782" fg:w="2553"/><text x="31.9023%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::sync::Arc&lt;core::pin::Pin&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;&gt;&gt; (92 samples, 0.06%)</title><rect x="33.2825%" y="309" width="0.0609%" height="15" fill="rgb(228,204,25)" fg:x="50243" fg:w="92"/><text x="33.5325%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (92 samples, 0.06%)</title><rect x="33.2825%" y="293" width="0.0609%" height="15" fill="rgb(207,153,8)" fg:x="50243" fg:w="92"/><text x="33.5325%" y="303.50"></text></g><g><title>[main] (21 samples, 0.01%)</title><rect x="33.4793%" y="165" width="0.0139%" height="15" fill="rgb(242,9,16)" fg:x="50540" fg:w="21"/><text x="33.7293%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (21 samples, 0.01%)</title><rect x="33.4793%" y="149" width="0.0139%" height="15" fill="rgb(217,211,10)" fg:x="50540" fg:w="21"/><text x="33.7293%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (157 samples, 0.10%)</title><rect x="33.4932%" y="165" width="0.1040%" height="15" fill="rgb(219,228,52)" fg:x="50561" fg:w="157"/><text x="33.7432%" y="175.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (157 samples, 0.10%)</title><rect x="33.4932%" y="149" width="0.1040%" height="15" fill="rgb(231,92,29)" fg:x="50561" fg:w="157"/><text x="33.7432%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (822 samples, 0.54%)</title><rect x="33.8271%" y="133" width="0.5445%" height="15" fill="rgb(232,8,23)" fg:x="51065" fg:w="822"/><text x="34.0771%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tremor_value::value::Value]&gt; (800 samples, 0.53%)</title><rect x="33.8416%" y="117" width="0.5299%" height="15" fill="rgb(216,211,34)" fg:x="51087" fg:w="800"/><text x="34.0916%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (628 samples, 0.42%)</title><rect x="33.9556%" y="101" width="0.4160%" height="15" fill="rgb(236,151,0)" fg:x="51259" fg:w="628"/><text x="34.2056%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (1,206 samples, 0.80%)</title><rect x="33.5972%" y="165" width="0.7989%" height="15" fill="rgb(209,168,3)" fg:x="50718" fg:w="1206"/><text x="33.8472%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;tremor_value::value::Value&gt;&gt; (859 samples, 0.57%)</title><rect x="33.8271%" y="149" width="0.5690%" height="15" fill="rgb(208,129,28)" fg:x="51065" fg:w="859"/><text x="34.0771%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;tremor_value::value::Value&gt;&gt; (37 samples, 0.02%)</title><rect x="34.3716%" y="133" width="0.0245%" height="15" fill="rgb(229,78,22)" fg:x="51887" fg:w="37"/><text x="34.6216%" y="143.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.02%)</title><rect x="34.3716%" y="117" width="0.0245%" height="15" fill="rgb(228,187,13)" fg:x="51887" fg:w="37"/><text x="34.6216%" y="127.50"></text></g><g><title>sn_rust_dealloc (222 samples, 0.15%)</title><rect x="34.3961%" y="165" width="0.1471%" height="15" fill="rgb(240,119,24)" fg:x="51924" fg:w="222"/><text x="34.6461%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,928 samples, 1.28%)</title><rect x="33.3945%" y="213" width="1.2772%" height="15" fill="rgb(209,194,42)" fg:x="50412" fg:w="1928"/><text x="33.6445%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)]&gt; (1,928 samples, 1.28%)</title><rect x="33.3945%" y="197" width="1.2772%" height="15" fill="rgb(247,200,46)" fg:x="50412" fg:w="1928"/><text x="33.6445%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)&gt; (1,884 samples, 1.25%)</title><rect x="33.4236%" y="181" width="1.2480%" height="15" fill="rgb(218,76,16)" fg:x="50456" fg:w="1884"/><text x="33.6736%" y="191.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (194 samples, 0.13%)</title><rect x="34.5432%" y="165" width="0.1285%" height="15" fill="rgb(225,21,48)" fg:x="52146" fg:w="194"/><text x="34.7932%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (1,999 samples, 1.32%)</title><rect x="33.3740%" y="261" width="1.3242%" height="15" fill="rgb(239,223,50)" fg:x="50381" fg:w="1999"/><text x="33.6240%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::vecmap::VecMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (1,968 samples, 1.30%)</title><rect x="33.3945%" y="245" width="1.3037%" height="15" fill="rgb(244,45,21)" fg:x="50412" fg:w="1968"/><text x="33.6445%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)&gt;&gt; (1,968 samples, 1.30%)</title><rect x="33.3945%" y="229" width="1.3037%" height="15" fill="rgb(232,33,43)" fg:x="50412" fg:w="1968"/><text x="33.6445%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)&gt;&gt; (40 samples, 0.03%)</title><rect x="34.6717%" y="213" width="0.0265%" height="15" fill="rgb(209,8,3)" fg:x="52340" fg:w="40"/><text x="34.9217%" y="223.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 0.03%)</title><rect x="34.6717%" y="197" width="0.0265%" height="15" fill="rgb(214,25,53)" fg:x="52340" fg:w="40"/><text x="34.9217%" y="207.50"></text></g><g><title>sn_rust_dealloc (163 samples, 0.11%)</title><rect x="34.6982%" y="261" width="0.1080%" height="15" fill="rgb(254,186,54)" fg:x="52380" fg:w="163"/><text x="34.9482%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (2,600 samples, 1.72%)</title><rect x="33.3587%" y="309" width="1.7223%" height="15" fill="rgb(208,174,49)" fg:x="50358" fg:w="2600"/><text x="33.6087%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt;&gt; (2,585 samples, 1.71%)</title><rect x="33.3687%" y="293" width="1.7124%" height="15" fill="rgb(233,191,51)" fg:x="50373" fg:w="2585"/><text x="33.6187%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (2,577 samples, 1.71%)</title><rect x="33.3740%" y="277" width="1.7071%" height="15" fill="rgb(222,134,10)" fg:x="50381" fg:w="2577"/><text x="33.6240%" y="287.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (415 samples, 0.27%)</title><rect x="34.8061%" y="261" width="0.2749%" height="15" fill="rgb(230,226,20)" fg:x="52543" fg:w="415"/><text x="35.0561%" y="271.50"></text></g><g><title>sn_rust_dealloc (71 samples, 0.05%)</title><rect x="35.0810%" y="309" width="0.0470%" height="15" fill="rgb(251,111,25)" fg:x="52958" fg:w="71"/><text x="35.3310%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (5,256 samples, 3.48%)</title><rect x="31.6523%" y="341" width="3.4817%" height="15" fill="rgb(224,40,46)" fg:x="47782" fg:w="5256"/><text x="31.9023%" y="351.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (2,703 samples, 1.79%)</title><rect x="33.3435%" y="325" width="1.7906%" height="15" fill="rgb(236,108,47)" fg:x="50335" fg:w="2703"/><text x="33.5935%" y="335.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (51 samples, 0.03%)</title><rect x="35.4480%" y="245" width="0.0338%" height="15" fill="rgb(234,93,0)" fg:x="53512" fg:w="51"/><text x="35.6980%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)]&gt; (48 samples, 0.03%)</title><rect x="35.4500%" y="229" width="0.0318%" height="15" fill="rgb(224,213,32)" fg:x="53515" fg:w="48"/><text x="35.7000%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (533 samples, 0.35%)</title><rect x="35.1340%" y="341" width="0.3531%" height="15" fill="rgb(251,11,48)" fg:x="53038" fg:w="533"/><text x="35.3840%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt;&gt; (505 samples, 0.33%)</title><rect x="35.1526%" y="325" width="0.3345%" height="15" fill="rgb(236,173,5)" fg:x="53066" fg:w="505"/><text x="35.4026%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (498 samples, 0.33%)</title><rect x="35.1572%" y="309" width="0.3299%" height="15" fill="rgb(230,95,12)" fg:x="53073" fg:w="498"/><text x="35.4072%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (498 samples, 0.33%)</title><rect x="35.1572%" y="293" width="0.3299%" height="15" fill="rgb(232,209,1)" fg:x="53073" fg:w="498"/><text x="35.4072%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::vecmap::VecMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (59 samples, 0.04%)</title><rect x="35.4480%" y="277" width="0.0391%" height="15" fill="rgb(232,6,1)" fg:x="53512" fg:w="59"/><text x="35.6980%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)&gt;&gt; (59 samples, 0.04%)</title><rect x="35.4480%" y="261" width="0.0391%" height="15" fill="rgb(210,224,50)" fg:x="53512" fg:w="59"/><text x="35.6980%" y="271.50"></text></g><g><title>sn_rust_dealloc (64 samples, 0.04%)</title><rect x="35.4871%" y="341" width="0.0424%" height="15" fill="rgb(228,127,35)" fg:x="53571" fg:w="64"/><text x="35.7371%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (6,604 samples, 4.37%)</title><rect x="31.1621%" y="357" width="4.3747%" height="15" fill="rgb(245,102,45)" fg:x="47042" fg:w="6604"/><text x="31.4121%" y="367.50">core:..</text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::mut_at (44 samples, 0.03%)</title><rect x="35.5613%" y="309" width="0.0291%" height="15" fill="rgb(214,1,49)" fg:x="53683" fg:w="44"/><text x="35.8113%" y="319.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::index_for (39 samples, 0.03%)</title><rect x="35.5646%" y="293" width="0.0258%" height="15" fill="rgb(226,163,40)" fg:x="53688" fg:w="39"/><text x="35.8146%" y="303.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (78 samples, 0.05%)</title><rect x="35.5448%" y="357" width="0.0517%" height="15" fill="rgb(239,212,28)" fg:x="53658" fg:w="78"/><text x="35.7948%" y="367.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n (75 samples, 0.05%)</title><rect x="35.5467%" y="341" width="0.0497%" height="15" fill="rgb(220,20,13)" fg:x="53661" fg:w="75"/><text x="35.7967%" y="351.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n_inner (75 samples, 0.05%)</title><rect x="35.5467%" y="325" width="0.0497%" height="15" fill="rgb(210,164,35)" fg:x="53661" fg:w="75"/><text x="35.7967%" y="335.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (29 samples, 0.02%)</title><rect x="35.6097%" y="341" width="0.0192%" height="15" fill="rgb(248,109,41)" fg:x="53756" fg:w="29"/><text x="35.8597%" y="351.50"></text></g><g><title>core::time::Duration::as_nanos (36 samples, 0.02%)</title><rect x="35.6289%" y="341" width="0.0238%" height="15" fill="rgb(238,23,50)" fg:x="53785" fg:w="36"/><text x="35.8789%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (131 samples, 0.09%)</title><rect x="35.6527%" y="325" width="0.0868%" height="15" fill="rgb(211,48,49)" fg:x="53821" fg:w="131"/><text x="35.9027%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (55 samples, 0.04%)</title><rect x="35.7640%" y="293" width="0.0364%" height="15" fill="rgb(223,36,21)" fg:x="53989" fg:w="55"/><text x="36.0140%" y="303.50"></text></g><g><title>core::cmp::PartialOrd::ge (55 samples, 0.04%)</title><rect x="35.7640%" y="277" width="0.0364%" height="15" fill="rgb(207,123,46)" fg:x="53989" fg:w="55"/><text x="36.0140%" y="287.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (54 samples, 0.04%)</title><rect x="35.7647%" y="261" width="0.0358%" height="15" fill="rgb(240,218,32)" fg:x="53990" fg:w="54"/><text x="36.0147%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (31 samples, 0.02%)</title><rect x="35.7799%" y="245" width="0.0205%" height="15" fill="rgb(252,5,43)" fg:x="54013" fg:w="31"/><text x="36.0299%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (31 samples, 0.02%)</title><rect x="35.7799%" y="229" width="0.0205%" height="15" fill="rgb(252,84,19)" fg:x="54013" fg:w="31"/><text x="36.0299%" y="239.50"></text></g><g><title>std::time::SystemTime::duration_since (247 samples, 0.16%)</title><rect x="35.6527%" y="341" width="0.1636%" height="15" fill="rgb(243,152,39)" fg:x="53821" fg:w="247"/><text x="35.9027%" y="351.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (116 samples, 0.08%)</title><rect x="35.7395%" y="325" width="0.0768%" height="15" fill="rgb(234,160,15)" fg:x="53952" fg:w="116"/><text x="35.9895%" y="335.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (116 samples, 0.08%)</title><rect x="35.7395%" y="309" width="0.0768%" height="15" fill="rgb(237,34,20)" fg:x="53952" fg:w="116"/><text x="35.9895%" y="319.50"></text></g><g><title>core::time::Duration::new (24 samples, 0.02%)</title><rect x="35.8004%" y="293" width="0.0159%" height="15" fill="rgb(229,97,13)" fg:x="54044" fg:w="24"/><text x="36.0504%" y="303.50"></text></g><g><title>tremor_common::time::nanotime (827 samples, 0.55%)</title><rect x="35.5964%" y="357" width="0.5478%" height="15" fill="rgb(234,71,50)" fg:x="53736" fg:w="827"/><text x="35.8464%" y="367.50"></text></g><g><title>std::time::SystemTime::now (495 samples, 0.33%)</title><rect x="35.8163%" y="341" width="0.3279%" height="15" fill="rgb(253,155,4)" fg:x="54068" fg:w="495"/><text x="36.0663%" y="351.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (495 samples, 0.33%)</title><rect x="35.8163%" y="325" width="0.3279%" height="15" fill="rgb(222,185,37)" fg:x="54068" fg:w="495"/><text x="36.0663%" y="335.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (495 samples, 0.33%)</title><rect x="35.8163%" y="309" width="0.3279%" height="15" fill="rgb(251,177,13)" fg:x="54068" fg:w="495"/><text x="36.0663%" y="319.50"></text></g><g><title>__clock_gettime (397 samples, 0.26%)</title><rect x="35.8813%" y="293" width="0.2630%" height="15" fill="rgb(250,179,40)" fg:x="54166" fg:w="397"/><text x="36.1313%" y="303.50"></text></g><g><title>__vdso_clock_gettime (379 samples, 0.25%)</title><rect x="35.8932%" y="277" width="0.2511%" height="15" fill="rgb(242,44,2)" fg:x="54184" fg:w="379"/><text x="36.1432%" y="287.50"></text></g><g><title>[[vdso]] (323 samples, 0.21%)</title><rect x="35.9303%" y="261" width="0.2140%" height="15" fill="rgb(216,177,13)" fg:x="54240" fg:w="323"/><text x="36.1803%" y="271.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager&lt;S&gt;::run::{{closure}} (11,181 samples, 7.41%)</title><rect x="28.7422%" y="421" width="7.4066%" height="15" fill="rgb(216,106,43)" fg:x="43389" fg:w="11181"/><text x="28.9922%" y="431.50">tremor_run..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (10,388 samples, 6.88%)</title><rect x="29.2675%" y="405" width="6.8813%" height="15" fill="rgb(216,183,2)" fg:x="44182" fg:w="10388"/><text x="29.5175%" y="415.50">&lt;core::pi..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,388 samples, 6.88%)</title><rect x="29.2675%" y="389" width="6.8813%" height="15" fill="rgb(249,75,3)" fg:x="44182" fg:w="10388"/><text x="29.5175%" y="399.50">&lt;core::fu..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::Sink&gt;::on_event::{{closure}} (8,258 samples, 5.47%)</title><rect x="30.6785%" y="373" width="5.4704%" height="15" fill="rgb(219,67,39)" fg:x="46312" fg:w="8258"/><text x="30.9285%" y="383.50">&lt;tremor..</text></g><g><title>async_global_executor::threading::thread_main_loop (11,191 samples, 7.41%)</title><rect x="28.7422%" y="885" width="7.4133%" height="15" fill="rgb(253,228,2)" fg:x="43389" fg:w="11191"/><text x="28.9922%" y="895.50">async_glob..</text></g><g><title>std::panic::catch_unwind (11,191 samples, 7.41%)</title><rect x="28.7422%" y="869" width="7.4133%" height="15" fill="rgb(235,138,27)" fg:x="43389" fg:w="11191"/><text x="28.9922%" y="879.50">std::panic..</text></g><g><title>std::panicking::try (11,191 samples, 7.41%)</title><rect x="28.7422%" y="853" width="7.4133%" height="15" fill="rgb(236,97,51)" fg:x="43389" fg:w="11191"/><text x="28.9922%" y="863.50">std::panic..</text></g><g><title>std::panicking::try::do_call (11,191 samples, 7.41%)</title><rect x="28.7422%" y="837" width="7.4133%" height="15" fill="rgb(240,80,30)" fg:x="43389" fg:w="11191"/><text x="28.9922%" y="847.50">std::panic..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (11,191 samples, 7.41%)</title><rect x="28.7422%" y="821" width="7.4133%" height="15" fill="rgb(230,178,19)" fg:x="43389" fg:w="11191"/><text x="28.9922%" y="831.50">async_glob..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (11,191 samples, 7.41%)</title><rect x="28.7422%" y="805" width="7.4133%" height="15" fill="rgb(210,190,27)" fg:x="43389" fg:w="11191"/><text x="28.9922%" y="815.50">std::threa..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (11,191 samples, 7.41%)</title><rect x="28.7422%" y="789" width="7.4133%" height="15" fill="rgb(222,107,31)" fg:x="43389" fg:w="11191"/><text x="28.9922%" y="799.50">std::threa..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (11,191 samples, 7.41%)</title><rect x="28.7422%" y="773" width="7.4133%" height="15" fill="rgb(216,127,34)" fg:x="43389" fg:w="11191"/><text x="28.9922%" y="783.50">async_glob..</text></g><g><title>async_global_executor::reactor::block_on (11,191 samples, 7.41%)</title><rect x="28.7422%" y="757" width="7.4133%" height="15" fill="rgb(234,116,52)" fg:x="43389" fg:w="11191"/><text x="28.9922%" y="767.50">async_glob..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (11,191 samples, 7.41%)</title><rect x="28.7422%" y="741" width="7.4133%" height="15" fill="rgb(222,124,15)" fg:x="43389" fg:w="11191"/><text x="28.9922%" y="751.50">async_glob..</text></g><g><title>async_io::driver::block_on (11,191 samples, 7.41%)</title><rect x="28.7422%" y="725" width="7.4133%" height="15" fill="rgb(231,179,28)" fg:x="43389" fg:w="11191"/><text x="28.9922%" y="735.50">async_io::..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (11,191 samples, 7.41%)</title><rect x="28.7422%" y="709" width="7.4133%" height="15" fill="rgb(226,93,45)" fg:x="43389" fg:w="11191"/><text x="28.9922%" y="719.50">&lt;futures_l..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,191 samples, 7.41%)</title><rect x="28.7422%" y="693" width="7.4133%" height="15" fill="rgb(215,8,51)" fg:x="43389" fg:w="11191"/><text x="28.9922%" y="703.50">&lt;core::fut..</text></g><g><title>async_executor::Executor::run::{{closure}} (11,191 samples, 7.41%)</title><rect x="28.7422%" y="677" width="7.4133%" height="15" fill="rgb(223,106,5)" fg:x="43389" fg:w="11191"/><text x="28.9922%" y="687.50">async_exec..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (11,191 samples, 7.41%)</title><rect x="28.7422%" y="661" width="7.4133%" height="15" fill="rgb(250,191,5)" fg:x="43389" fg:w="11191"/><text x="28.9922%" y="671.50">&lt;futures_l..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,191 samples, 7.41%)</title><rect x="28.7422%" y="645" width="7.4133%" height="15" fill="rgb(242,132,44)" fg:x="43389" fg:w="11191"/><text x="28.9922%" y="655.50">&lt;core::fut..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (11,191 samples, 7.41%)</title><rect x="28.7422%" y="629" width="7.4133%" height="15" fill="rgb(251,152,29)" fg:x="43389" fg:w="11191"/><text x="28.9922%" y="639.50">async_exec..</text></g><g><title>async_task::runnable::Runnable::run (11,191 samples, 7.41%)</title><rect x="28.7422%" y="613" width="7.4133%" height="15" fill="rgb(218,179,5)" fg:x="43389" fg:w="11191"/><text x="28.9922%" y="623.50">async_task..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (11,191 samples, 7.41%)</title><rect x="28.7422%" y="597" width="7.4133%" height="15" fill="rgb(227,67,19)" fg:x="43389" fg:w="11191"/><text x="28.9922%" y="607.50">async_task..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (11,191 samples, 7.41%)</title><rect x="28.7422%" y="581" width="7.4133%" height="15" fill="rgb(233,119,31)" fg:x="43389" fg:w="11191"/><text x="28.9922%" y="591.50">&lt;core::pin..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,191 samples, 7.41%)</title><rect x="28.7422%" y="565" width="7.4133%" height="15" fill="rgb(241,120,22)" fg:x="43389" fg:w="11191"/><text x="28.9922%" y="575.50">&lt;core::fut..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (11,191 samples, 7.41%)</title><rect x="28.7422%" y="549" width="7.4133%" height="15" fill="rgb(224,102,30)" fg:x="43389" fg:w="11191"/><text x="28.9922%" y="559.50">async_exec..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (11,191 samples, 7.41%)</title><rect x="28.7422%" y="533" width="7.4133%" height="15" fill="rgb(210,164,37)" fg:x="43389" fg:w="11191"/><text x="28.9922%" y="543.50">&lt;async_std..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (11,191 samples, 7.41%)</title><rect x="28.7422%" y="517" width="7.4133%" height="15" fill="rgb(226,191,16)" fg:x="43389" fg:w="11191"/><text x="28.9922%" y="527.50">async_std:..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (11,191 samples, 7.41%)</title><rect x="28.7422%" y="501" width="7.4133%" height="15" fill="rgb(214,40,45)" fg:x="43389" fg:w="11191"/><text x="28.9922%" y="511.50">std::threa..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (11,191 samples, 7.41%)</title><rect x="28.7422%" y="485" width="7.4133%" height="15" fill="rgb(244,29,26)" fg:x="43389" fg:w="11191"/><text x="28.9922%" y="495.50">std::threa..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (11,191 samples, 7.41%)</title><rect x="28.7422%" y="469" width="7.4133%" height="15" fill="rgb(216,16,5)" fg:x="43389" fg:w="11191"/><text x="28.9922%" y="479.50">async_std:..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (11,191 samples, 7.41%)</title><rect x="28.7422%" y="453" width="7.4133%" height="15" fill="rgb(249,76,35)" fg:x="43389" fg:w="11191"/><text x="28.9922%" y="463.50">&lt;async_std..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,191 samples, 7.41%)</title><rect x="28.7422%" y="437" width="7.4133%" height="15" fill="rgb(207,11,44)" fg:x="43389" fg:w="11191"/><text x="28.9922%" y="447.50">&lt;core::fut..</text></g><g><title>alloc::alloc::exchange_malloc (27 samples, 0.02%)</title><rect x="36.1919%" y="453" width="0.0179%" height="15" fill="rgb(228,190,49)" fg:x="54635" fg:w="27"/><text x="36.4419%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (27 samples, 0.02%)</title><rect x="36.1919%" y="437" width="0.0179%" height="15" fill="rgb(214,173,12)" fg:x="54635" fg:w="27"/><text x="36.4419%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (27 samples, 0.02%)</title><rect x="36.1919%" y="421" width="0.0179%" height="15" fill="rgb(218,26,35)" fg:x="54635" fg:w="27"/><text x="36.4419%" y="431.50"></text></g><g><title>alloc::alloc::alloc (21 samples, 0.01%)</title><rect x="36.1959%" y="405" width="0.0139%" height="15" fill="rgb(220,200,19)" fg:x="54641" fg:w="21"/><text x="36.4459%" y="415.50"></text></g><g><title>__rg_alloc (21 samples, 0.01%)</title><rect x="36.1959%" y="389" width="0.0139%" height="15" fill="rgb(239,95,49)" fg:x="54641" fg:w="21"/><text x="36.4459%" y="399.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (21 samples, 0.01%)</title><rect x="36.1959%" y="373" width="0.0139%" height="15" fill="rgb(235,85,53)" fg:x="54641" fg:w="21"/><text x="36.4459%" y="383.50"></text></g><g><title>sn_rust_alloc (21 samples, 0.01%)</title><rect x="36.1959%" y="357" width="0.0139%" height="15" fill="rgb(233,133,31)" fg:x="54641" fg:w="21"/><text x="36.4459%" y="367.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (32 samples, 0.02%)</title><rect x="36.2297%" y="437" width="0.0212%" height="15" fill="rgb(218,25,20)" fg:x="54692" fg:w="32"/><text x="36.4797%" y="447.50"></text></g><g><title>core::time::Duration::as_nanos (26 samples, 0.02%)</title><rect x="36.2509%" y="437" width="0.0172%" height="15" fill="rgb(252,210,38)" fg:x="54724" fg:w="26"/><text x="36.5009%" y="447.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (75 samples, 0.05%)</title><rect x="36.2681%" y="421" width="0.0497%" height="15" fill="rgb(242,134,21)" fg:x="54750" fg:w="75"/><text x="36.5181%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (47 samples, 0.03%)</title><rect x="36.3390%" y="389" width="0.0311%" height="15" fill="rgb(213,28,48)" fg:x="54857" fg:w="47"/><text x="36.5890%" y="399.50"></text></g><g><title>core::cmp::PartialOrd::ge (47 samples, 0.03%)</title><rect x="36.3390%" y="373" width="0.0311%" height="15" fill="rgb(250,196,2)" fg:x="54857" fg:w="47"/><text x="36.5890%" y="383.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (47 samples, 0.03%)</title><rect x="36.3390%" y="357" width="0.0311%" height="15" fill="rgb(227,5,17)" fg:x="54857" fg:w="47"/><text x="36.5890%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (30 samples, 0.02%)</title><rect x="36.3503%" y="341" width="0.0199%" height="15" fill="rgb(221,226,24)" fg:x="54874" fg:w="30"/><text x="36.6003%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (30 samples, 0.02%)</title><rect x="36.3503%" y="325" width="0.0199%" height="15" fill="rgb(211,5,48)" fg:x="54874" fg:w="30"/><text x="36.6003%" y="335.50"></text></g><g><title>std::time::SystemTime::duration_since (169 samples, 0.11%)</title><rect x="36.2681%" y="437" width="0.1120%" height="15" fill="rgb(219,150,6)" fg:x="54750" fg:w="169"/><text x="36.5181%" y="447.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (94 samples, 0.06%)</title><rect x="36.3178%" y="421" width="0.0623%" height="15" fill="rgb(251,46,16)" fg:x="54825" fg:w="94"/><text x="36.5678%" y="431.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (94 samples, 0.06%)</title><rect x="36.3178%" y="405" width="0.0623%" height="15" fill="rgb(220,204,40)" fg:x="54825" fg:w="94"/><text x="36.5678%" y="415.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager&lt;S&gt;::run::{{closure}} (719 samples, 0.48%)</title><rect x="36.1555%" y="581" width="0.4763%" height="15" fill="rgb(211,85,2)" fg:x="54580" fg:w="719"/><text x="36.4055%" y="591.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (719 samples, 0.48%)</title><rect x="36.1555%" y="565" width="0.4763%" height="15" fill="rgb(229,17,7)" fg:x="54580" fg:w="719"/><text x="36.4055%" y="575.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (719 samples, 0.48%)</title><rect x="36.1555%" y="549" width="0.4763%" height="15" fill="rgb(239,72,28)" fg:x="54580" fg:w="719"/><text x="36.4055%" y="559.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::Sink&gt;::on_event::{{closure}} (719 samples, 0.48%)</title><rect x="36.1555%" y="533" width="0.4763%" height="15" fill="rgb(230,47,54)" fg:x="54580" fg:w="719"/><text x="36.4055%" y="543.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize (719 samples, 0.48%)</title><rect x="36.1555%" y="517" width="0.4763%" height="15" fill="rgb(214,50,8)" fg:x="54580" fg:w="719"/><text x="36.4055%" y="527.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize_for_stream (719 samples, 0.48%)</title><rect x="36.1555%" y="501" width="0.4763%" height="15" fill="rgb(216,198,43)" fg:x="54580" fg:w="719"/><text x="36.4055%" y="511.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize_for_stream_with_codec (719 samples, 0.48%)</title><rect x="36.1555%" y="485" width="0.4763%" height="15" fill="rgb(234,20,35)" fg:x="54580" fg:w="719"/><text x="36.4055%" y="495.50"></text></g><g><title>tremor_runtime::postprocessor::postprocess (719 samples, 0.48%)</title><rect x="36.1555%" y="469" width="0.4763%" height="15" fill="rgb(254,45,19)" fg:x="54580" fg:w="719"/><text x="36.4055%" y="479.50"></text></g><g><title>tremor_common::time::nanotime (622 samples, 0.41%)</title><rect x="36.2198%" y="453" width="0.4120%" height="15" fill="rgb(219,14,44)" fg:x="54677" fg:w="622"/><text x="36.4698%" y="463.50"></text></g><g><title>std::time::SystemTime::now (380 samples, 0.25%)</title><rect x="36.3801%" y="437" width="0.2517%" height="15" fill="rgb(217,220,26)" fg:x="54919" fg:w="380"/><text x="36.6301%" y="447.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (380 samples, 0.25%)</title><rect x="36.3801%" y="421" width="0.2517%" height="15" fill="rgb(213,158,28)" fg:x="54919" fg:w="380"/><text x="36.6301%" y="431.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (380 samples, 0.25%)</title><rect x="36.3801%" y="405" width="0.2517%" height="15" fill="rgb(252,51,52)" fg:x="54919" fg:w="380"/><text x="36.6301%" y="415.50"></text></g><g><title>__clock_gettime (310 samples, 0.21%)</title><rect x="36.4264%" y="389" width="0.2054%" height="15" fill="rgb(246,89,16)" fg:x="54989" fg:w="310"/><text x="36.6764%" y="399.50"></text></g><g><title>__vdso_clock_gettime (290 samples, 0.19%)</title><rect x="36.4397%" y="373" width="0.1921%" height="15" fill="rgb(216,158,49)" fg:x="55009" fg:w="290"/><text x="36.6897%" y="383.50"></text></g><g><title>[[vdso]] (254 samples, 0.17%)</title><rect x="36.4635%" y="357" width="0.1683%" height="15" fill="rgb(236,107,19)" fg:x="55045" fg:w="254"/><text x="36.7135%" y="367.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (653 samples, 0.43%)</title><rect x="36.8113%" y="469" width="0.4326%" height="15" fill="rgb(228,185,30)" fg:x="55570" fg:w="653"/><text x="37.0613%" y="479.50"></text></g><g><title>core::ptr::read (620 samples, 0.41%)</title><rect x="36.8332%" y="453" width="0.4107%" height="15" fill="rgb(246,134,8)" fg:x="55603" fg:w="620"/><text x="37.0832%" y="463.50"></text></g><g><title>[libc-2.31.so] (604 samples, 0.40%)</title><rect x="36.8438%" y="437" width="0.4001%" height="15" fill="rgb(214,143,50)" fg:x="55619" fg:w="604"/><text x="37.0938%" y="447.50"></text></g><g><title>[libc-2.31.so] (165 samples, 0.11%)</title><rect x="37.2545%" y="453" width="0.1093%" height="15" fill="rgb(228,75,8)" fg:x="56239" fg:w="165"/><text x="37.5045%" y="463.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (82 samples, 0.05%)</title><rect x="37.4499%" y="421" width="0.0543%" height="15" fill="rgb(207,175,4)" fg:x="56534" fg:w="82"/><text x="37.6999%" y="431.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (54 samples, 0.04%)</title><rect x="37.4685%" y="405" width="0.0358%" height="15" fill="rgb(205,108,24)" fg:x="56562" fg:w="54"/><text x="37.7185%" y="415.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (172 samples, 0.11%)</title><rect x="37.4068%" y="437" width="0.1139%" height="15" fill="rgb(244,120,49)" fg:x="56469" fg:w="172"/><text x="37.6568%" y="447.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (424 samples, 0.28%)</title><rect x="37.2445%" y="469" width="0.2809%" height="15" fill="rgb(223,47,38)" fg:x="56224" fg:w="424"/><text x="37.4945%" y="479.50"></text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (244 samples, 0.16%)</title><rect x="37.3638%" y="453" width="0.1616%" height="15" fill="rgb(229,179,11)" fg:x="56404" fg:w="244"/><text x="37.6138%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (213 samples, 0.14%)</title><rect x="37.5307%" y="341" width="0.1411%" height="15" fill="rgb(231,122,1)" fg:x="56656" fg:w="213"/><text x="37.7807%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (213 samples, 0.14%)</title><rect x="37.5307%" y="325" width="0.1411%" height="15" fill="rgb(245,119,9)" fg:x="56656" fg:w="213"/><text x="37.7807%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (213 samples, 0.14%)</title><rect x="37.5307%" y="309" width="0.1411%" height="15" fill="rgb(241,163,25)" fg:x="56656" fg:w="213"/><text x="37.7807%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (208 samples, 0.14%)</title><rect x="37.5340%" y="293" width="0.1378%" height="15" fill="rgb(217,214,3)" fg:x="56661" fg:w="208"/><text x="37.7840%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (208 samples, 0.14%)</title><rect x="37.5340%" y="277" width="0.1378%" height="15" fill="rgb(240,86,28)" fg:x="56661" fg:w="208"/><text x="37.7840%" y="287.50"></text></g><g><title>alloc::alloc::alloc (208 samples, 0.14%)</title><rect x="37.5340%" y="261" width="0.1378%" height="15" fill="rgb(215,47,9)" fg:x="56661" fg:w="208"/><text x="37.7840%" y="271.50"></text></g><g><title>__rg_alloc (208 samples, 0.14%)</title><rect x="37.5340%" y="245" width="0.1378%" height="15" fill="rgb(252,25,45)" fg:x="56661" fg:w="208"/><text x="37.7840%" y="255.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (208 samples, 0.14%)</title><rect x="37.5340%" y="229" width="0.1378%" height="15" fill="rgb(251,164,9)" fg:x="56661" fg:w="208"/><text x="37.7840%" y="239.50"></text></g><g><title>sn_rust_alloc (203 samples, 0.13%)</title><rect x="37.5373%" y="213" width="0.1345%" height="15" fill="rgb(233,194,0)" fg:x="56666" fg:w="203"/><text x="37.7873%" y="223.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (267 samples, 0.18%)</title><rect x="37.5307%" y="469" width="0.1769%" height="15" fill="rgb(249,111,24)" fg:x="56656" fg:w="267"/><text x="37.7807%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (267 samples, 0.18%)</title><rect x="37.5307%" y="453" width="0.1769%" height="15" fill="rgb(250,223,3)" fg:x="56656" fg:w="267"/><text x="37.7807%" y="463.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (267 samples, 0.18%)</title><rect x="37.5307%" y="437" width="0.1769%" height="15" fill="rgb(236,178,37)" fg:x="56656" fg:w="267"/><text x="37.7807%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (267 samples, 0.18%)</title><rect x="37.5307%" y="421" width="0.1769%" height="15" fill="rgb(241,158,50)" fg:x="56656" fg:w="267"/><text x="37.7807%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (267 samples, 0.18%)</title><rect x="37.5307%" y="405" width="0.1769%" height="15" fill="rgb(213,121,41)" fg:x="56656" fg:w="267"/><text x="37.7807%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (267 samples, 0.18%)</title><rect x="37.5307%" y="389" width="0.1769%" height="15" fill="rgb(240,92,3)" fg:x="56656" fg:w="267"/><text x="37.7807%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (267 samples, 0.18%)</title><rect x="37.5307%" y="373" width="0.1769%" height="15" fill="rgb(205,123,3)" fg:x="56656" fg:w="267"/><text x="37.7807%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (267 samples, 0.18%)</title><rect x="37.5307%" y="357" width="0.1769%" height="15" fill="rgb(205,97,47)" fg:x="56656" fg:w="267"/><text x="37.7807%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (54 samples, 0.04%)</title><rect x="37.6718%" y="341" width="0.0358%" height="15" fill="rgb(247,152,14)" fg:x="56869" fg:w="54"/><text x="37.9218%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (54 samples, 0.04%)</title><rect x="37.6718%" y="325" width="0.0358%" height="15" fill="rgb(248,195,53)" fg:x="56869" fg:w="54"/><text x="37.9218%" y="335.50"></text></g><g><title>[libc-2.31.so] (45 samples, 0.03%)</title><rect x="37.6778%" y="309" width="0.0298%" height="15" fill="rgb(226,201,16)" fg:x="56878" fg:w="45"/><text x="37.9278%" y="319.50"></text></g><g><title>[libc-2.31.so] (731 samples, 0.48%)</title><rect x="37.7076%" y="469" width="0.4842%" height="15" fill="rgb(205,98,0)" fg:x="56923" fg:w="731"/><text x="37.9576%" y="479.50"></text></g><g><title>[libc-2.31.so] (363 samples, 0.24%)</title><rect x="38.1971%" y="453" width="0.2405%" height="15" fill="rgb(214,191,48)" fg:x="57662" fg:w="363"/><text x="38.4471%" y="463.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (445 samples, 0.29%)</title><rect x="38.4879%" y="341" width="0.2948%" height="15" fill="rgb(237,112,39)" fg:x="58101" fg:w="445"/><text x="38.7379%" y="351.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (24 samples, 0.02%)</title><rect x="38.7827%" y="341" width="0.0159%" height="15" fill="rgb(247,203,27)" fg:x="58546" fg:w="24"/><text x="39.0327%" y="351.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (922 samples, 0.61%)</title><rect x="38.1918%" y="469" width="0.6108%" height="15" fill="rgb(235,124,28)" fg:x="57654" fg:w="922"/><text x="38.4418%" y="479.50"></text></g><g><title>alloc::alloc::exchange_malloc (551 samples, 0.36%)</title><rect x="38.4376%" y="453" width="0.3650%" height="15" fill="rgb(208,207,46)" fg:x="58025" fg:w="551"/><text x="38.6876%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (551 samples, 0.36%)</title><rect x="38.4376%" y="437" width="0.3650%" height="15" fill="rgb(234,176,4)" fg:x="58025" fg:w="551"/><text x="38.6876%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (551 samples, 0.36%)</title><rect x="38.4376%" y="421" width="0.3650%" height="15" fill="rgb(230,133,28)" fg:x="58025" fg:w="551"/><text x="38.6876%" y="431.50"></text></g><g><title>alloc::alloc::alloc (551 samples, 0.36%)</title><rect x="38.4376%" y="405" width="0.3650%" height="15" fill="rgb(211,137,40)" fg:x="58025" fg:w="551"/><text x="38.6876%" y="415.50"></text></g><g><title>__rg_alloc (551 samples, 0.36%)</title><rect x="38.4376%" y="389" width="0.3650%" height="15" fill="rgb(254,35,13)" fg:x="58025" fg:w="551"/><text x="38.6876%" y="399.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (551 samples, 0.36%)</title><rect x="38.4376%" y="373" width="0.3650%" height="15" fill="rgb(225,49,51)" fg:x="58025" fg:w="551"/><text x="38.6876%" y="383.50"></text></g><g><title>sn_rust_alloc (550 samples, 0.36%)</title><rect x="38.4383%" y="357" width="0.3643%" height="15" fill="rgb(251,10,15)" fg:x="58026" fg:w="550"/><text x="38.6883%" y="367.50"></text></g><g><title>alloc::vec::into_iter::IntoIter&lt;T,A&gt;::as_raw_mut_slice (25 samples, 0.02%)</title><rect x="38.8099%" y="437" width="0.0166%" height="15" fill="rgb(228,207,15)" fg:x="58587" fg:w="25"/><text x="39.0599%" y="447.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (23 samples, 0.02%)</title><rect x="38.8112%" y="421" width="0.0152%" height="15" fill="rgb(241,99,19)" fg:x="58589" fg:w="23"/><text x="39.0612%" y="431.50"></text></g><g><title>core::iter::traits::exact_size::ExactSizeIterator::len (23 samples, 0.02%)</title><rect x="38.8112%" y="405" width="0.0152%" height="15" fill="rgb(207,104,49)" fg:x="58589" fg:w="23"/><text x="39.0612%" y="415.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (23 samples, 0.02%)</title><rect x="38.8112%" y="389" width="0.0152%" height="15" fill="rgb(234,99,18)" fg:x="58589" fg:w="23"/><text x="39.0612%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (23 samples, 0.02%)</title><rect x="38.8112%" y="373" width="0.0152%" height="15" fill="rgb(213,191,49)" fg:x="58589" fg:w="23"/><text x="39.0612%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event),alloc::alloc::Global&gt;&gt; (29 samples, 0.02%)</title><rect x="38.8264%" y="437" width="0.0192%" height="15" fill="rgb(210,226,19)" fg:x="58612" fg:w="29"/><text x="39.0764%" y="447.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.02%)</title><rect x="38.8264%" y="421" width="0.0192%" height="15" fill="rgb(229,97,18)" fg:x="58612" fg:w="29"/><text x="39.0764%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (21 samples, 0.01%)</title><rect x="38.8317%" y="405" width="0.0139%" height="15" fill="rgb(211,167,15)" fg:x="58620" fg:w="21"/><text x="39.0817%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.01%)</title><rect x="38.8317%" y="389" width="0.0139%" height="15" fill="rgb(210,169,34)" fg:x="58620" fg:w="21"/><text x="39.0817%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (21 samples, 0.01%)</title><rect x="38.8317%" y="373" width="0.0139%" height="15" fill="rgb(241,121,31)" fg:x="58620" fg:w="21"/><text x="39.0817%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (21 samples, 0.01%)</title><rect x="38.8317%" y="357" width="0.0139%" height="15" fill="rgb(232,40,11)" fg:x="58620" fg:w="21"/><text x="39.0817%" y="367.50"></text></g><g><title>__rg_dealloc (21 samples, 0.01%)</title><rect x="38.8317%" y="341" width="0.0139%" height="15" fill="rgb(205,86,26)" fg:x="58620" fg:w="21"/><text x="39.0817%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (21 samples, 0.01%)</title><rect x="38.8317%" y="325" width="0.0139%" height="15" fill="rgb(231,126,28)" fg:x="58620" fg:w="21"/><text x="39.0817%" y="335.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (76 samples, 0.05%)</title><rect x="38.8026%" y="453" width="0.0503%" height="15" fill="rgb(219,221,18)" fg:x="58576" fg:w="76"/><text x="39.0526%" y="463.50"></text></g><g><title>sn_rust_dealloc (93 samples, 0.06%)</title><rect x="38.8529%" y="453" width="0.0616%" height="15" fill="rgb(211,40,0)" fg:x="58652" fg:w="93"/><text x="39.1029%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (187 samples, 0.12%)</title><rect x="38.8026%" y="469" width="0.1239%" height="15" fill="rgb(239,85,43)" fg:x="58576" fg:w="187"/><text x="39.0526%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (19 samples, 0.01%)</title><rect x="38.9265%" y="469" width="0.0126%" height="15" fill="rgb(231,55,21)" fg:x="58763" fg:w="19"/><text x="39.1765%" y="479.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.01%)</title><rect x="38.9265%" y="453" width="0.0126%" height="15" fill="rgb(225,184,43)" fg:x="58763" fg:w="19"/><text x="39.1765%" y="463.50"></text></g><g><title>core::str::&lt;impl str&gt;::eq_ignore_ascii_case (65 samples, 0.04%)</title><rect x="38.9516%" y="469" width="0.0431%" height="15" fill="rgb(251,158,41)" fg:x="58801" fg:w="65"/><text x="39.2016%" y="479.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case (65 samples, 0.04%)</title><rect x="38.9516%" y="453" width="0.0431%" height="15" fill="rgb(234,159,37)" fg:x="58801" fg:w="65"/><text x="39.2016%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (62 samples, 0.04%)</title><rect x="38.9536%" y="437" width="0.0411%" height="15" fill="rgb(216,204,22)" fg:x="58804" fg:w="62"/><text x="39.2036%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (62 samples, 0.04%)</title><rect x="38.9536%" y="421" width="0.0411%" height="15" fill="rgb(214,17,3)" fg:x="58804" fg:w="62"/><text x="39.2036%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::{{closure}} (36 samples, 0.02%)</title><rect x="38.9708%" y="405" width="0.0238%" height="15" fill="rgb(212,111,17)" fg:x="58830" fg:w="36"/><text x="39.2208%" y="415.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case::{{closure}} (36 samples, 0.02%)</title><rect x="38.9708%" y="389" width="0.0238%" height="15" fill="rgb(221,157,24)" fg:x="58830" fg:w="36"/><text x="39.2208%" y="399.50"></text></g><g><title>core::num::&lt;impl u8&gt;::eq_ignore_ascii_case (36 samples, 0.02%)</title><rect x="38.9708%" y="373" width="0.0238%" height="15" fill="rgb(252,16,13)" fg:x="58830" fg:w="36"/><text x="39.2208%" y="383.50"></text></g><g><title>core::num::&lt;impl u8&gt;::to_ascii_lowercase (36 samples, 0.02%)</title><rect x="38.9708%" y="357" width="0.0238%" height="15" fill="rgb(221,62,2)" fg:x="58830" fg:w="36"/><text x="39.2208%" y="367.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_uppercase (20 samples, 0.01%)</title><rect x="38.9814%" y="341" width="0.0132%" height="15" fill="rgb(247,87,22)" fg:x="58846" fg:w="20"/><text x="39.2314%" y="351.50"></text></g><g><title>tremor_runtime::connectors::utils::metrics::SourceReporter::periodic_flush (19 samples, 0.01%)</title><rect x="38.9987%" y="469" width="0.0126%" height="15" fill="rgb(215,73,9)" fg:x="58872" fg:w="19"/><text x="39.2487%" y="479.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,635 samples, 2.41%)</title><rect x="36.6318%" y="565" width="2.4079%" height="15" fill="rgb(207,175,33)" fg:x="55299" fg:w="3635"/><text x="36.8818%" y="575.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_source_reply::{{closure}} (3,635 samples, 2.41%)</title><rect x="36.6318%" y="549" width="2.4079%" height="15" fill="rgb(243,129,54)" fg:x="55299" fg:w="3635"/><text x="36.8818%" y="559.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,635 samples, 2.41%)</title><rect x="36.6318%" y="533" width="2.4079%" height="15" fill="rgb(227,119,45)" fg:x="55299" fg:w="3635"/><text x="36.8818%" y="543.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_data::{{closure}} (3,635 samples, 2.41%)</title><rect x="36.6318%" y="517" width="2.4079%" height="15" fill="rgb(205,109,36)" fg:x="55299" fg:w="3635"/><text x="36.8818%" y="527.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,635 samples, 2.41%)</title><rect x="36.6318%" y="501" width="2.4079%" height="15" fill="rgb(205,6,39)" fg:x="55299" fg:w="3635"/><text x="36.8818%" y="511.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::route_events::{{closure}} (3,626 samples, 2.40%)</title><rect x="36.6378%" y="485" width="2.4020%" height="15" fill="rgb(221,32,16)" fg:x="55308" fg:w="3626"/><text x="36.8878%" y="495.50">tr..</text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (43 samples, 0.03%)</title><rect x="39.0113%" y="469" width="0.0285%" height="15" fill="rgb(228,144,50)" fg:x="58891" fg:w="43"/><text x="39.2613%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (43 samples, 0.03%)</title><rect x="39.0113%" y="453" width="0.0285%" height="15" fill="rgb(229,201,53)" fg:x="58891" fg:w="43"/><text x="39.2613%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (43 samples, 0.03%)</title><rect x="39.0113%" y="437" width="0.0285%" height="15" fill="rgb(249,153,27)" fg:x="58891" fg:w="43"/><text x="39.2613%" y="447.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (138 samples, 0.09%)</title><rect x="39.1583%" y="485" width="0.0914%" height="15" fill="rgb(227,106,25)" fg:x="59113" fg:w="138"/><text x="39.4083%" y="495.50"></text></g><g><title>core::mem::replace (138 samples, 0.09%)</title><rect x="39.1583%" y="469" width="0.0914%" height="15" fill="rgb(230,65,29)" fg:x="59113" fg:w="138"/><text x="39.4083%" y="479.50"></text></g><g><title>core::ptr::read (137 samples, 0.09%)</title><rect x="39.1590%" y="453" width="0.0908%" height="15" fill="rgb(221,57,46)" fg:x="59114" fg:w="137"/><text x="39.4090%" y="463.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (227 samples, 0.15%)</title><rect x="39.1245%" y="501" width="0.1504%" height="15" fill="rgb(229,161,17)" fg:x="59062" fg:w="227"/><text x="39.3745%" y="511.50"></text></g><g><title>core::mem::drop (38 samples, 0.03%)</title><rect x="39.2497%" y="485" width="0.0252%" height="15" fill="rgb(222,213,11)" fg:x="59251" fg:w="38"/><text x="39.4997%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (38 samples, 0.03%)</title><rect x="39.2497%" y="469" width="0.0252%" height="15" fill="rgb(235,35,13)" fg:x="59251" fg:w="38"/><text x="39.4997%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (153 samples, 0.10%)</title><rect x="39.2749%" y="501" width="0.1014%" height="15" fill="rgb(233,158,34)" fg:x="59289" fg:w="153"/><text x="39.5249%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (145 samples, 0.10%)</title><rect x="39.2802%" y="485" width="0.0961%" height="15" fill="rgb(215,151,48)" fg:x="59297" fg:w="145"/><text x="39.5302%" y="495.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (145 samples, 0.10%)</title><rect x="39.2802%" y="469" width="0.0961%" height="15" fill="rgb(229,84,14)" fg:x="59297" fg:w="145"/><text x="39.5302%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (136 samples, 0.09%)</title><rect x="39.2862%" y="453" width="0.0901%" height="15" fill="rgb(229,68,14)" fg:x="59306" fg:w="136"/><text x="39.5362%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (136 samples, 0.09%)</title><rect x="39.2862%" y="437" width="0.0901%" height="15" fill="rgb(243,106,26)" fg:x="59306" fg:w="136"/><text x="39.5362%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (136 samples, 0.09%)</title><rect x="39.2862%" y="421" width="0.0901%" height="15" fill="rgb(206,45,38)" fg:x="59306" fg:w="136"/><text x="39.5362%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_swap (136 samples, 0.09%)</title><rect x="39.2862%" y="405" width="0.0901%" height="15" fill="rgb(226,6,15)" fg:x="59306" fg:w="136"/><text x="39.5362%" y="415.50"></text></g><g><title>core::task::wake::Waker::will_wake (25 samples, 0.02%)</title><rect x="39.3842%" y="501" width="0.0166%" height="15" fill="rgb(232,22,54)" fg:x="59454" fg:w="25"/><text x="39.6342%" y="511.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (25 samples, 0.02%)</title><rect x="39.3842%" y="485" width="0.0166%" height="15" fill="rgb(229,222,32)" fg:x="59454" fg:w="25"/><text x="39.6342%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (24 samples, 0.02%)</title><rect x="39.3849%" y="469" width="0.0159%" height="15" fill="rgb(228,62,29)" fg:x="59455" fg:w="24"/><text x="39.6349%" y="479.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (24 samples, 0.02%)</title><rect x="39.3849%" y="453" width="0.0159%" height="15" fill="rgb(251,103,34)" fg:x="59455" fg:w="24"/><text x="39.6349%" y="463.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (715 samples, 0.47%)</title><rect x="39.0676%" y="517" width="0.4736%" height="15" fill="rgb(233,12,30)" fg:x="58976" fg:w="715"/><text x="39.3176%" y="527.50"></text></g><g><title>event_listener::Inner::lock (212 samples, 0.14%)</title><rect x="39.4008%" y="501" width="0.1404%" height="15" fill="rgb(238,52,0)" fg:x="59479" fg:w="212"/><text x="39.6508%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (202 samples, 0.13%)</title><rect x="39.4074%" y="485" width="0.1338%" height="15" fill="rgb(223,98,5)" fg:x="59489" fg:w="202"/><text x="39.6574%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (189 samples, 0.13%)</title><rect x="39.4160%" y="469" width="0.1252%" height="15" fill="rgb(228,75,37)" fg:x="59502" fg:w="189"/><text x="39.6660%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (189 samples, 0.13%)</title><rect x="39.4160%" y="453" width="0.1252%" height="15" fill="rgb(205,115,49)" fg:x="59502" fg:w="189"/><text x="39.6660%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (189 samples, 0.13%)</title><rect x="39.4160%" y="437" width="0.1252%" height="15" fill="rgb(250,154,43)" fg:x="59502" fg:w="189"/><text x="39.6660%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (189 samples, 0.13%)</title><rect x="39.4160%" y="421" width="0.1252%" height="15" fill="rgb(226,43,29)" fg:x="59502" fg:w="189"/><text x="39.6660%" y="431.50"></text></g><g><title>concurrent_queue::full_fence (268 samples, 0.18%)</title><rect x="39.6008%" y="469" width="0.1775%" height="15" fill="rgb(249,228,39)" fg:x="59781" fg:w="268"/><text x="39.8508%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (268 samples, 0.18%)</title><rect x="39.6008%" y="453" width="0.1775%" height="15" fill="rgb(216,79,43)" fg:x="59781" fg:w="268"/><text x="39.8508%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (268 samples, 0.18%)</title><rect x="39.6008%" y="437" width="0.1775%" height="15" fill="rgb(228,95,12)" fg:x="59781" fg:w="268"/><text x="39.8508%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (268 samples, 0.18%)</title><rect x="39.6008%" y="421" width="0.1775%" height="15" fill="rgb(249,221,15)" fg:x="59781" fg:w="268"/><text x="39.8508%" y="431.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (1,126 samples, 0.75%)</title><rect x="39.0397%" y="533" width="0.7459%" height="15" fill="rgb(233,34,13)" fg:x="58934" fg:w="1126"/><text x="39.2897%" y="543.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (369 samples, 0.24%)</title><rect x="39.5412%" y="517" width="0.2444%" height="15" fill="rgb(214,103,39)" fg:x="59691" fg:w="369"/><text x="39.7912%" y="527.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (351 samples, 0.23%)</title><rect x="39.5531%" y="501" width="0.2325%" height="15" fill="rgb(251,126,39)" fg:x="59709" fg:w="351"/><text x="39.8031%" y="511.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (328 samples, 0.22%)</title><rect x="39.5684%" y="485" width="0.2173%" height="15" fill="rgb(214,216,36)" fg:x="59732" fg:w="328"/><text x="39.8184%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (394 samples, 0.26%)</title><rect x="40.6435%" y="389" width="0.2610%" height="15" fill="rgb(220,221,8)" fg:x="61355" fg:w="394"/><text x="40.8935%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (394 samples, 0.26%)</title><rect x="40.6435%" y="373" width="0.2610%" height="15" fill="rgb(240,216,3)" fg:x="61355" fg:w="394"/><text x="40.8935%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (394 samples, 0.26%)</title><rect x="40.6435%" y="357" width="0.2610%" height="15" fill="rgb(232,218,17)" fg:x="61355" fg:w="394"/><text x="40.8935%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (383 samples, 0.25%)</title><rect x="40.6508%" y="341" width="0.2537%" height="15" fill="rgb(229,163,45)" fg:x="61366" fg:w="383"/><text x="40.9008%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (383 samples, 0.25%)</title><rect x="40.6508%" y="325" width="0.2537%" height="15" fill="rgb(231,110,42)" fg:x="61366" fg:w="383"/><text x="40.9008%" y="335.50"></text></g><g><title>alloc::alloc::alloc (383 samples, 0.25%)</title><rect x="40.6508%" y="309" width="0.2537%" height="15" fill="rgb(208,170,48)" fg:x="61366" fg:w="383"/><text x="40.9008%" y="319.50"></text></g><g><title>__rg_alloc (383 samples, 0.25%)</title><rect x="40.6508%" y="293" width="0.2537%" height="15" fill="rgb(239,116,25)" fg:x="61366" fg:w="383"/><text x="40.9008%" y="303.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (383 samples, 0.25%)</title><rect x="40.6508%" y="277" width="0.2537%" height="15" fill="rgb(219,200,50)" fg:x="61366" fg:w="383"/><text x="40.9008%" y="287.50"></text></g><g><title>sn_rust_alloc (363 samples, 0.24%)</title><rect x="40.6640%" y="261" width="0.2405%" height="15" fill="rgb(245,200,0)" fg:x="61386" fg:w="363"/><text x="40.9140%" y="271.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (30 samples, 0.02%)</title><rect x="40.8846%" y="245" width="0.0199%" height="15" fill="rgb(245,119,33)" fg:x="61719" fg:w="30"/><text x="41.1346%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (500 samples, 0.33%)</title><rect x="40.6256%" y="469" width="0.3312%" height="15" fill="rgb(231,125,12)" fg:x="61328" fg:w="500"/><text x="40.8756%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (481 samples, 0.32%)</title><rect x="40.6382%" y="453" width="0.3186%" height="15" fill="rgb(216,96,41)" fg:x="61347" fg:w="481"/><text x="40.8882%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (481 samples, 0.32%)</title><rect x="40.6382%" y="437" width="0.3186%" height="15" fill="rgb(248,43,45)" fg:x="61347" fg:w="481"/><text x="40.8882%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (481 samples, 0.32%)</title><rect x="40.6382%" y="421" width="0.3186%" height="15" fill="rgb(217,222,7)" fg:x="61347" fg:w="481"/><text x="40.8882%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (481 samples, 0.32%)</title><rect x="40.6382%" y="405" width="0.3186%" height="15" fill="rgb(233,28,6)" fg:x="61347" fg:w="481"/><text x="40.8882%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (79 samples, 0.05%)</title><rect x="40.9045%" y="389" width="0.0523%" height="15" fill="rgb(231,218,15)" fg:x="61749" fg:w="79"/><text x="41.1545%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (79 samples, 0.05%)</title><rect x="40.9045%" y="373" width="0.0523%" height="15" fill="rgb(226,171,48)" fg:x="61749" fg:w="79"/><text x="41.1545%" y="383.50"></text></g><g><title>[libc-2.31.so] (72 samples, 0.05%)</title><rect x="40.9091%" y="357" width="0.0477%" height="15" fill="rgb(235,201,9)" fg:x="61756" fg:w="72"/><text x="41.1591%" y="367.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (57 samples, 0.04%)</title><rect x="41.0615%" y="181" width="0.0378%" height="15" fill="rgb(217,80,15)" fg:x="61986" fg:w="57"/><text x="41.3115%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (166 samples, 0.11%)</title><rect x="40.9906%" y="325" width="0.1100%" height="15" fill="rgb(219,152,8)" fg:x="61879" fg:w="166"/><text x="41.2406%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (166 samples, 0.11%)</title><rect x="40.9906%" y="309" width="0.1100%" height="15" fill="rgb(243,107,38)" fg:x="61879" fg:w="166"/><text x="41.2406%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (166 samples, 0.11%)</title><rect x="40.9906%" y="293" width="0.1100%" height="15" fill="rgb(231,17,5)" fg:x="61879" fg:w="166"/><text x="41.2406%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (163 samples, 0.11%)</title><rect x="40.9926%" y="277" width="0.1080%" height="15" fill="rgb(209,25,54)" fg:x="61882" fg:w="163"/><text x="41.2426%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (163 samples, 0.11%)</title><rect x="40.9926%" y="261" width="0.1080%" height="15" fill="rgb(219,0,2)" fg:x="61882" fg:w="163"/><text x="41.2426%" y="271.50"></text></g><g><title>alloc::alloc::alloc (163 samples, 0.11%)</title><rect x="40.9926%" y="245" width="0.1080%" height="15" fill="rgb(246,9,5)" fg:x="61882" fg:w="163"/><text x="41.2426%" y="255.50"></text></g><g><title>__rg_alloc (163 samples, 0.11%)</title><rect x="40.9926%" y="229" width="0.1080%" height="15" fill="rgb(226,159,4)" fg:x="61882" fg:w="163"/><text x="41.2426%" y="239.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (163 samples, 0.11%)</title><rect x="40.9926%" y="213" width="0.1080%" height="15" fill="rgb(219,175,34)" fg:x="61882" fg:w="163"/><text x="41.2426%" y="223.50"></text></g><g><title>sn_rust_alloc (154 samples, 0.10%)</title><rect x="40.9985%" y="197" width="0.1020%" height="15" fill="rgb(236,10,46)" fg:x="61891" fg:w="154"/><text x="41.2485%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (278 samples, 0.18%)</title><rect x="40.9721%" y="405" width="0.1842%" height="15" fill="rgb(240,211,16)" fg:x="61851" fg:w="278"/><text x="41.2221%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (250 samples, 0.17%)</title><rect x="40.9906%" y="389" width="0.1656%" height="15" fill="rgb(205,3,43)" fg:x="61879" fg:w="250"/><text x="41.2406%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (250 samples, 0.17%)</title><rect x="40.9906%" y="373" width="0.1656%" height="15" fill="rgb(245,7,22)" fg:x="61879" fg:w="250"/><text x="41.2406%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (250 samples, 0.17%)</title><rect x="40.9906%" y="357" width="0.1656%" height="15" fill="rgb(239,132,32)" fg:x="61879" fg:w="250"/><text x="41.2406%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (250 samples, 0.17%)</title><rect x="40.9906%" y="341" width="0.1656%" height="15" fill="rgb(228,202,34)" fg:x="61879" fg:w="250"/><text x="41.2406%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (84 samples, 0.06%)</title><rect x="41.1006%" y="325" width="0.0556%" height="15" fill="rgb(254,200,22)" fg:x="62045" fg:w="84"/><text x="41.3506%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (84 samples, 0.06%)</title><rect x="41.1006%" y="309" width="0.0556%" height="15" fill="rgb(219,10,39)" fg:x="62045" fg:w="84"/><text x="41.3506%" y="319.50"></text></g><g><title>[libc-2.31.so] (79 samples, 0.05%)</title><rect x="41.1039%" y="293" width="0.0523%" height="15" fill="rgb(226,210,39)" fg:x="62050" fg:w="79"/><text x="41.3539%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 0.02%)</title><rect x="41.1562%" y="405" width="0.0225%" height="15" fill="rgb(208,219,16)" fg:x="62129" fg:w="34"/><text x="41.4062%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.02%)</title><rect x="41.1602%" y="389" width="0.0185%" height="15" fill="rgb(216,158,51)" fg:x="62135" fg:w="28"/><text x="41.4102%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.02%)</title><rect x="41.1602%" y="373" width="0.0185%" height="15" fill="rgb(233,14,44)" fg:x="62135" fg:w="28"/><text x="41.4102%" y="383.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (19 samples, 0.01%)</title><rect x="41.2364%" y="261" width="0.0126%" height="15" fill="rgb(237,97,39)" fg:x="62250" fg:w="19"/><text x="41.4864%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (88 samples, 0.06%)</title><rect x="41.1913%" y="357" width="0.0583%" height="15" fill="rgb(218,198,43)" fg:x="62182" fg:w="88"/><text x="41.4413%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (88 samples, 0.06%)</title><rect x="41.1913%" y="341" width="0.0583%" height="15" fill="rgb(231,104,20)" fg:x="62182" fg:w="88"/><text x="41.4413%" y="351.50"></text></g><g><title>alloc::alloc::alloc (86 samples, 0.06%)</title><rect x="41.1926%" y="325" width="0.0570%" height="15" fill="rgb(254,36,13)" fg:x="62184" fg:w="86"/><text x="41.4426%" y="335.50"></text></g><g><title>__rg_alloc (86 samples, 0.06%)</title><rect x="41.1926%" y="309" width="0.0570%" height="15" fill="rgb(248,14,50)" fg:x="62184" fg:w="86"/><text x="41.4426%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (86 samples, 0.06%)</title><rect x="41.1926%" y="293" width="0.0570%" height="15" fill="rgb(217,107,29)" fg:x="62184" fg:w="86"/><text x="41.4426%" y="303.50"></text></g><g><title>sn_rust_alloc (86 samples, 0.06%)</title><rect x="41.1926%" y="277" width="0.0570%" height="15" fill="rgb(251,169,33)" fg:x="62184" fg:w="86"/><text x="41.4426%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (120 samples, 0.08%)</title><rect x="41.1787%" y="405" width="0.0795%" height="15" fill="rgb(217,108,32)" fg:x="62163" fg:w="120"/><text x="41.4287%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (103 samples, 0.07%)</title><rect x="41.1900%" y="389" width="0.0682%" height="15" fill="rgb(219,66,42)" fg:x="62180" fg:w="103"/><text x="41.4400%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (103 samples, 0.07%)</title><rect x="41.1900%" y="373" width="0.0682%" height="15" fill="rgb(206,180,7)" fg:x="62180" fg:w="103"/><text x="41.4400%" y="383.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (1,591 samples, 1.05%)</title><rect x="40.2089%" y="485" width="1.0539%" height="15" fill="rgb(208,226,31)" fg:x="60699" fg:w="1591"/><text x="40.4589%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (462 samples, 0.31%)</title><rect x="40.9568%" y="469" width="0.3060%" height="15" fill="rgb(218,26,49)" fg:x="61828" fg:w="462"/><text x="41.2068%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (449 samples, 0.30%)</title><rect x="40.9654%" y="453" width="0.2974%" height="15" fill="rgb(233,197,48)" fg:x="61841" fg:w="449"/><text x="41.2154%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (449 samples, 0.30%)</title><rect x="40.9654%" y="437" width="0.2974%" height="15" fill="rgb(252,181,51)" fg:x="61841" fg:w="449"/><text x="41.2154%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (449 samples, 0.30%)</title><rect x="40.9654%" y="421" width="0.2974%" height="15" fill="rgb(253,90,19)" fg:x="61841" fg:w="449"/><text x="41.2154%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (24 samples, 0.02%)</title><rect x="41.3079%" y="405" width="0.0159%" height="15" fill="rgb(215,171,30)" fg:x="62358" fg:w="24"/><text x="41.5579%" y="415.50"></text></g><g><title>core::time::Duration::as_nanos (32 samples, 0.02%)</title><rect x="41.3238%" y="405" width="0.0212%" height="15" fill="rgb(214,222,9)" fg:x="62382" fg:w="32"/><text x="41.5738%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (117 samples, 0.08%)</title><rect x="41.3450%" y="389" width="0.0775%" height="15" fill="rgb(223,3,22)" fg:x="62414" fg:w="117"/><text x="41.5950%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (43 samples, 0.03%)</title><rect x="41.4464%" y="357" width="0.0285%" height="15" fill="rgb(225,196,46)" fg:x="62567" fg:w="43"/><text x="41.6964%" y="367.50"></text></g><g><title>core::cmp::PartialOrd::ge (43 samples, 0.03%)</title><rect x="41.4464%" y="341" width="0.0285%" height="15" fill="rgb(209,110,37)" fg:x="62567" fg:w="43"/><text x="41.6964%" y="351.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (43 samples, 0.03%)</title><rect x="41.4464%" y="325" width="0.0285%" height="15" fill="rgb(249,89,12)" fg:x="62567" fg:w="43"/><text x="41.6964%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (18 samples, 0.01%)</title><rect x="41.4629%" y="309" width="0.0119%" height="15" fill="rgb(226,27,33)" fg:x="62592" fg:w="18"/><text x="41.7129%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (18 samples, 0.01%)</title><rect x="41.4629%" y="293" width="0.0119%" height="15" fill="rgb(213,82,22)" fg:x="62592" fg:w="18"/><text x="41.7129%" y="303.50"></text></g><g><title>std::time::SystemTime::duration_since (220 samples, 0.15%)</title><rect x="41.3450%" y="405" width="0.1457%" height="15" fill="rgb(248,140,0)" fg:x="62414" fg:w="220"/><text x="41.5950%" y="415.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (103 samples, 0.07%)</title><rect x="41.4225%" y="389" width="0.0682%" height="15" fill="rgb(228,106,3)" fg:x="62531" fg:w="103"/><text x="41.6725%" y="399.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (103 samples, 0.07%)</title><rect x="41.4225%" y="373" width="0.0682%" height="15" fill="rgb(209,23,37)" fg:x="62531" fg:w="103"/><text x="41.6725%" y="383.50"></text></g><g><title>core::time::Duration::new (24 samples, 0.02%)</title><rect x="41.4748%" y="357" width="0.0159%" height="15" fill="rgb(241,93,50)" fg:x="62610" fg:w="24"/><text x="41.7248%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (872 samples, 0.58%)</title><rect x="41.2629%" y="485" width="0.5776%" height="15" fill="rgb(253,46,43)" fg:x="62290" fg:w="872"/><text x="41.5129%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (872 samples, 0.58%)</title><rect x="41.2629%" y="469" width="0.5776%" height="15" fill="rgb(226,206,43)" fg:x="62290" fg:w="872"/><text x="41.5129%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any::check::{{closure}} (847 samples, 0.56%)</title><rect x="41.2794%" y="453" width="0.5611%" height="15" fill="rgb(217,54,7)" fg:x="62315" fg:w="847"/><text x="41.5294%" y="463.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::Source&gt;::pull_data::{{closure}}::{{closure}} (847 samples, 0.56%)</title><rect x="41.2794%" y="437" width="0.5611%" height="15" fill="rgb(223,5,52)" fg:x="62315" fg:w="847"/><text x="41.5294%" y="447.50"></text></g><g><title>tremor_common::time::nanotime (836 samples, 0.55%)</title><rect x="41.2867%" y="421" width="0.5538%" height="15" fill="rgb(206,52,46)" fg:x="62326" fg:w="836"/><text x="41.5367%" y="431.50"></text></g><g><title>std::time::SystemTime::now (528 samples, 0.35%)</title><rect x="41.4907%" y="405" width="0.3498%" height="15" fill="rgb(253,136,11)" fg:x="62634" fg:w="528"/><text x="41.7407%" y="415.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (528 samples, 0.35%)</title><rect x="41.4907%" y="389" width="0.3498%" height="15" fill="rgb(208,106,33)" fg:x="62634" fg:w="528"/><text x="41.7407%" y="399.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (528 samples, 0.35%)</title><rect x="41.4907%" y="373" width="0.3498%" height="15" fill="rgb(206,54,4)" fg:x="62634" fg:w="528"/><text x="41.7407%" y="383.50"></text></g><g><title>__clock_gettime (434 samples, 0.29%)</title><rect x="41.5530%" y="357" width="0.2875%" height="15" fill="rgb(213,3,15)" fg:x="62728" fg:w="434"/><text x="41.8030%" y="367.50"></text></g><g><title>__vdso_clock_gettime (411 samples, 0.27%)</title><rect x="41.5682%" y="341" width="0.2723%" height="15" fill="rgb(252,211,39)" fg:x="62751" fg:w="411"/><text x="41.8182%" y="351.50"></text></g><g><title>[[vdso]] (341 samples, 0.23%)</title><rect x="41.6146%" y="325" width="0.2259%" height="15" fill="rgb(223,6,36)" fg:x="62821" fg:w="341"/><text x="41.8646%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (124 samples, 0.08%)</title><rect x="41.8869%" y="453" width="0.0821%" height="15" fill="rgb(252,169,45)" fg:x="63232" fg:w="124"/><text x="42.1369%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (68 samples, 0.05%)</title><rect x="41.9240%" y="437" width="0.0450%" height="15" fill="rgb(212,48,26)" fg:x="63288" fg:w="68"/><text x="42.1740%" y="447.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (892 samples, 0.59%)</title><rect x="42.2592%" y="261" width="0.5909%" height="15" fill="rgb(251,102,48)" fg:x="63794" fg:w="892"/><text x="42.5092%" y="271.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (62 samples, 0.04%)</title><rect x="42.8500%" y="261" width="0.0411%" height="15" fill="rgb(243,208,16)" fg:x="64686" fg:w="62"/><text x="43.1000%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,411 samples, 0.93%)</title><rect x="41.9710%" y="405" width="0.9347%" height="15" fill="rgb(219,96,24)" fg:x="63359" fg:w="1411"/><text x="42.2210%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,406 samples, 0.93%)</title><rect x="41.9743%" y="389" width="0.9314%" height="15" fill="rgb(219,33,29)" fg:x="63364" fg:w="1406"/><text x="42.2243%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,406 samples, 0.93%)</title><rect x="41.9743%" y="373" width="0.9314%" height="15" fill="rgb(223,176,5)" fg:x="63364" fg:w="1406"/><text x="42.2243%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,399 samples, 0.93%)</title><rect x="41.9789%" y="357" width="0.9267%" height="15" fill="rgb(228,140,14)" fg:x="63371" fg:w="1399"/><text x="42.2289%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,399 samples, 0.93%)</title><rect x="41.9789%" y="341" width="0.9267%" height="15" fill="rgb(217,179,31)" fg:x="63371" fg:w="1399"/><text x="42.2289%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1,399 samples, 0.93%)</title><rect x="41.9789%" y="325" width="0.9267%" height="15" fill="rgb(230,9,30)" fg:x="63371" fg:w="1399"/><text x="42.2289%" y="335.50"></text></g><g><title>__rg_alloc (1,399 samples, 0.93%)</title><rect x="41.9789%" y="309" width="0.9267%" height="15" fill="rgb(230,136,20)" fg:x="63371" fg:w="1399"/><text x="42.2289%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1,399 samples, 0.93%)</title><rect x="41.9789%" y="293" width="0.9267%" height="15" fill="rgb(215,210,22)" fg:x="63371" fg:w="1399"/><text x="42.2289%" y="303.50"></text></g><g><title>sn_rust_alloc (1,387 samples, 0.92%)</title><rect x="41.9869%" y="277" width="0.9188%" height="15" fill="rgb(218,43,5)" fg:x="63383" fg:w="1387"/><text x="42.2369%" y="287.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (22 samples, 0.01%)</title><rect x="42.8911%" y="261" width="0.0146%" height="15" fill="rgb(216,11,5)" fg:x="64748" fg:w="22"/><text x="43.1411%" y="271.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,197 samples, 3.44%)</title><rect x="39.7856%" y="517" width="3.4427%" height="15" fill="rgb(209,82,29)" fg:x="60060" fg:w="5197"/><text x="40.0356%" y="527.50">&lt;co..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::Source&gt;::pull_data::{{closure}} (5,165 samples, 3.42%)</title><rect x="39.8068%" y="501" width="3.4215%" height="15" fill="rgb(244,115,12)" fg:x="60092" fg:w="5165"/><text x="40.0568%" y="511.50">&lt;tr..</text></g><g><title>tremor_runtime::connectors::impls::bench::Acc::next (2,083 samples, 1.38%)</title><rect x="41.8484%" y="485" width="1.3798%" height="15" fill="rgb(222,82,18)" fg:x="63174" fg:w="2083"/><text x="42.0984%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,025 samples, 1.34%)</title><rect x="41.8869%" y="469" width="1.3414%" height="15" fill="rgb(249,227,8)" fg:x="63232" fg:w="2025"/><text x="42.1369%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,901 samples, 1.26%)</title><rect x="41.9690%" y="453" width="1.2593%" height="15" fill="rgb(253,141,45)" fg:x="63356" fg:w="1901"/><text x="42.2190%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1,901 samples, 1.26%)</title><rect x="41.9690%" y="437" width="1.2593%" height="15" fill="rgb(234,184,4)" fg:x="63356" fg:w="1901"/><text x="42.2190%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,901 samples, 1.26%)</title><rect x="41.9690%" y="421" width="1.2593%" height="15" fill="rgb(218,194,23)" fg:x="63356" fg:w="1901"/><text x="42.2190%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (487 samples, 0.32%)</title><rect x="42.9057%" y="405" width="0.3226%" height="15" fill="rgb(235,66,41)" fg:x="64770" fg:w="487"/><text x="43.1557%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (487 samples, 0.32%)</title><rect x="42.9057%" y="389" width="0.3226%" height="15" fill="rgb(245,217,1)" fg:x="64770" fg:w="487"/><text x="43.1557%" y="399.50"></text></g><g><title>[libc-2.31.so] (487 samples, 0.32%)</title><rect x="42.9057%" y="373" width="0.3226%" height="15" fill="rgb(229,91,1)" fg:x="64770" fg:w="487"/><text x="43.1557%" y="383.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (5,208 samples, 3.45%)</title><rect x="39.7856%" y="533" width="3.4499%" height="15" fill="rgb(207,101,30)" fg:x="60060" fg:w="5208"/><text x="40.0356%" y="543.50">&lt;co..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::run::{{closure}} (9,971 samples, 6.61%)</title><rect x="36.6318%" y="581" width="6.6051%" height="15" fill="rgb(223,82,49)" fg:x="55299" fg:w="9971"/><text x="36.8818%" y="591.50">tremor_ru..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (6,336 samples, 4.20%)</title><rect x="39.0397%" y="565" width="4.1972%" height="15" fill="rgb(218,167,17)" fg:x="58934" fg:w="6336"/><text x="39.2897%" y="575.50">&lt;futu..</text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (6,336 samples, 4.20%)</title><rect x="39.0397%" y="549" width="4.1972%" height="15" fill="rgb(208,103,14)" fg:x="58934" fg:w="6336"/><text x="39.2897%" y="559.50">futur..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (34 samples, 0.02%)</title><rect x="43.3005%" y="517" width="0.0225%" height="15" fill="rgb(238,20,8)" fg:x="65366" fg:w="34"/><text x="43.5505%" y="527.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (609 samples, 0.40%)</title><rect x="43.2594%" y="533" width="0.4034%" height="15" fill="rgb(218,80,54)" fg:x="65304" fg:w="609"/><text x="43.5094%" y="543.50"></text></g><g><title>[libc-2.31.so] (513 samples, 0.34%)</title><rect x="43.3230%" y="517" width="0.3398%" height="15" fill="rgb(240,144,17)" fg:x="65400" fg:w="513"/><text x="43.5730%" y="527.50"></text></g><g><title>[libc-2.31.so] (295 samples, 0.20%)</title><rect x="43.6628%" y="533" width="0.1954%" height="15" fill="rgb(245,27,50)" fg:x="65913" fg:w="295"/><text x="43.9128%" y="543.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (941 samples, 0.62%)</title><rect x="43.2369%" y="565" width="0.6233%" height="15" fill="rgb(251,51,7)" fg:x="65270" fg:w="941"/><text x="43.4869%" y="575.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (941 samples, 0.62%)</title><rect x="43.2369%" y="549" width="0.6233%" height="15" fill="rgb(245,217,29)" fg:x="65270" fg:w="941"/><text x="43.4869%" y="559.50"></text></g><g><title>[libc-2.31.so] (130 samples, 0.09%)</title><rect x="43.8821%" y="549" width="0.0861%" height="15" fill="rgb(221,176,29)" fg:x="66244" fg:w="130"/><text x="44.1321%" y="559.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (19 samples, 0.01%)</title><rect x="44.1709%" y="533" width="0.0126%" height="15" fill="rgb(212,180,24)" fg:x="66680" fg:w="19"/><text x="44.4209%" y="543.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.02%)</title><rect x="44.1895%" y="517" width="0.0232%" height="15" fill="rgb(254,24,2)" fg:x="66708" fg:w="35"/><text x="44.4395%" y="527.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (680 samples, 0.45%)</title><rect x="44.1895%" y="533" width="0.4505%" height="15" fill="rgb(230,100,2)" fg:x="66708" fg:w="680"/><text x="44.4395%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (645 samples, 0.43%)</title><rect x="44.2127%" y="517" width="0.4273%" height="15" fill="rgb(219,142,25)" fg:x="66743" fg:w="645"/><text x="44.4627%" y="527.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (645 samples, 0.43%)</title><rect x="44.2127%" y="501" width="0.4273%" height="15" fill="rgb(240,73,43)" fg:x="66743" fg:w="645"/><text x="44.4627%" y="511.50"></text></g><g><title>core::ptr::read (645 samples, 0.43%)</title><rect x="44.2127%" y="485" width="0.4273%" height="15" fill="rgb(214,114,15)" fg:x="66743" fg:w="645"/><text x="44.4627%" y="495.50"></text></g><g><title>[libc-2.31.so] (645 samples, 0.43%)</title><rect x="44.2127%" y="469" width="0.4273%" height="15" fill="rgb(207,130,4)" fg:x="66743" fg:w="645"/><text x="44.4627%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (409 samples, 0.27%)</title><rect x="44.6472%" y="405" width="0.2709%" height="15" fill="rgb(221,25,40)" fg:x="67399" fg:w="409"/><text x="44.8972%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (409 samples, 0.27%)</title><rect x="44.6472%" y="389" width="0.2709%" height="15" fill="rgb(241,184,7)" fg:x="67399" fg:w="409"/><text x="44.8972%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (409 samples, 0.27%)</title><rect x="44.6472%" y="373" width="0.2709%" height="15" fill="rgb(235,159,4)" fg:x="67399" fg:w="409"/><text x="44.8972%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (408 samples, 0.27%)</title><rect x="44.6479%" y="357" width="0.2703%" height="15" fill="rgb(214,87,48)" fg:x="67400" fg:w="408"/><text x="44.8979%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (408 samples, 0.27%)</title><rect x="44.6479%" y="341" width="0.2703%" height="15" fill="rgb(246,198,24)" fg:x="67400" fg:w="408"/><text x="44.8979%" y="351.50"></text></g><g><title>alloc::alloc::alloc (408 samples, 0.27%)</title><rect x="44.6479%" y="325" width="0.2703%" height="15" fill="rgb(209,66,40)" fg:x="67400" fg:w="408"/><text x="44.8979%" y="335.50"></text></g><g><title>__rg_alloc (408 samples, 0.27%)</title><rect x="44.6479%" y="309" width="0.2703%" height="15" fill="rgb(233,147,39)" fg:x="67400" fg:w="408"/><text x="44.8979%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (408 samples, 0.27%)</title><rect x="44.6479%" y="293" width="0.2703%" height="15" fill="rgb(231,145,52)" fg:x="67400" fg:w="408"/><text x="44.8979%" y="303.50"></text></g><g><title>sn_rust_alloc (401 samples, 0.27%)</title><rect x="44.6525%" y="277" width="0.2656%" height="15" fill="rgb(206,20,26)" fg:x="67407" fg:w="401"/><text x="44.9025%" y="287.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (186 samples, 0.12%)</title><rect x="44.7949%" y="261" width="0.1232%" height="15" fill="rgb(238,220,4)" fg:x="67622" fg:w="186"/><text x="45.0449%" y="271.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (453 samples, 0.30%)</title><rect x="44.6459%" y="533" width="0.3001%" height="15" fill="rgb(252,195,42)" fg:x="67397" fg:w="453"/><text x="44.8959%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (453 samples, 0.30%)</title><rect x="44.6459%" y="517" width="0.3001%" height="15" fill="rgb(209,10,6)" fg:x="67397" fg:w="453"/><text x="44.8959%" y="527.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (453 samples, 0.30%)</title><rect x="44.6459%" y="501" width="0.3001%" height="15" fill="rgb(229,3,52)" fg:x="67397" fg:w="453"/><text x="44.8959%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (453 samples, 0.30%)</title><rect x="44.6459%" y="485" width="0.3001%" height="15" fill="rgb(253,49,37)" fg:x="67397" fg:w="453"/><text x="44.8959%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (453 samples, 0.30%)</title><rect x="44.6459%" y="469" width="0.3001%" height="15" fill="rgb(240,103,49)" fg:x="67397" fg:w="453"/><text x="44.8959%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (453 samples, 0.30%)</title><rect x="44.6459%" y="453" width="0.3001%" height="15" fill="rgb(250,182,30)" fg:x="67397" fg:w="453"/><text x="44.8959%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (453 samples, 0.30%)</title><rect x="44.6459%" y="437" width="0.3001%" height="15" fill="rgb(248,8,30)" fg:x="67397" fg:w="453"/><text x="44.8959%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (453 samples, 0.30%)</title><rect x="44.6459%" y="421" width="0.3001%" height="15" fill="rgb(237,120,30)" fg:x="67397" fg:w="453"/><text x="44.8959%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (42 samples, 0.03%)</title><rect x="44.9182%" y="405" width="0.0278%" height="15" fill="rgb(221,146,34)" fg:x="67808" fg:w="42"/><text x="45.1682%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (42 samples, 0.03%)</title><rect x="44.9182%" y="389" width="0.0278%" height="15" fill="rgb(242,55,13)" fg:x="67808" fg:w="42"/><text x="45.1682%" y="399.50"></text></g><g><title>[libc-2.31.so] (34 samples, 0.02%)</title><rect x="44.9235%" y="373" width="0.0225%" height="15" fill="rgb(242,112,31)" fg:x="67816" fg:w="34"/><text x="45.1735%" y="383.50"></text></g><g><title>[libc-2.31.so] (590 samples, 0.39%)</title><rect x="44.9460%" y="533" width="0.3908%" height="15" fill="rgb(249,192,27)" fg:x="67850" fg:w="590"/><text x="45.1960%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::drain (18 samples, 0.01%)</title><rect x="45.3368%" y="533" width="0.0119%" height="15" fill="rgb(208,204,44)" fg:x="68440" fg:w="18"/><text x="45.5868%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (26 samples, 0.02%)</title><rect x="45.3487%" y="533" width="0.0172%" height="15" fill="rgb(208,93,54)" fg:x="68458" fg:w="26"/><text x="45.5987%" y="543.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (26 samples, 0.02%)</title><rect x="45.3487%" y="517" width="0.0172%" height="15" fill="rgb(242,1,31)" fg:x="68458" fg:w="26"/><text x="45.5987%" y="527.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (95 samples, 0.06%)</title><rect x="45.3964%" y="501" width="0.0629%" height="15" fill="rgb(241,83,25)" fg:x="68530" fg:w="95"/><text x="45.6464%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (95 samples, 0.06%)</title><rect x="45.3964%" y="485" width="0.0629%" height="15" fill="rgb(205,169,50)" fg:x="68530" fg:w="95"/><text x="45.6464%" y="495.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (95 samples, 0.06%)</title><rect x="45.3964%" y="469" width="0.0629%" height="15" fill="rgb(239,186,37)" fg:x="68530" fg:w="95"/><text x="45.6464%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (95 samples, 0.06%)</title><rect x="45.3964%" y="453" width="0.0629%" height="15" fill="rgb(205,221,10)" fg:x="68530" fg:w="95"/><text x="45.6464%" y="463.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (95 samples, 0.06%)</title><rect x="45.3964%" y="437" width="0.0629%" height="15" fill="rgb(218,196,15)" fg:x="68530" fg:w="95"/><text x="45.6464%" y="447.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (95 samples, 0.06%)</title><rect x="45.3964%" y="421" width="0.0629%" height="15" fill="rgb(218,196,35)" fg:x="68530" fg:w="95"/><text x="45.6464%" y="431.50"></text></g><g><title>[libc-2.31.so] (67 samples, 0.04%)</title><rect x="45.4150%" y="405" width="0.0444%" height="15" fill="rgb(233,63,24)" fg:x="68558" fg:w="67"/><text x="45.6650%" y="415.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (121 samples, 0.08%)</title><rect x="45.3805%" y="533" width="0.0802%" height="15" fill="rgb(225,8,4)" fg:x="68506" fg:w="121"/><text x="45.6305%" y="543.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get_mut (113 samples, 0.07%)</title><rect x="45.3858%" y="517" width="0.0749%" height="15" fill="rgb(234,105,35)" fg:x="68514" fg:w="113"/><text x="45.6358%" y="527.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,435 samples, 1.61%)</title><rect x="43.8603%" y="565" width="1.6130%" height="15" fill="rgb(236,21,32)" fg:x="66211" fg:w="2435"/><text x="44.1103%" y="575.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (2,272 samples, 1.51%)</title><rect x="43.9682%" y="549" width="1.5050%" height="15" fill="rgb(228,109,6)" fg:x="66374" fg:w="2272"/><text x="44.2182%" y="559.50"></text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (19 samples, 0.01%)</title><rect x="45.4607%" y="533" width="0.0126%" height="15" fill="rgb(229,215,31)" fg:x="68627" fg:w="19"/><text x="45.7107%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (19 samples, 0.01%)</title><rect x="45.4607%" y="517" width="0.0126%" height="15" fill="rgb(221,52,54)" fg:x="68627" fg:w="19"/><text x="45.7107%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (19 samples, 0.01%)</title><rect x="45.4607%" y="501" width="0.0126%" height="15" fill="rgb(252,129,43)" fg:x="68627" fg:w="19"/><text x="45.7107%" y="511.50"></text></g><g><title>async_io::driver::block_on (14,069 samples, 9.32%)</title><rect x="36.1555%" y="885" width="9.3197%" height="15" fill="rgb(248,183,27)" fg:x="54580" fg:w="14069"/><text x="36.4055%" y="895.50">async_io::dri..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (14,069 samples, 9.32%)</title><rect x="36.1555%" y="869" width="9.3197%" height="15" fill="rgb(250,0,22)" fg:x="54580" fg:w="14069"/><text x="36.4055%" y="879.50">&lt;futures_lite..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14,069 samples, 9.32%)</title><rect x="36.1555%" y="853" width="9.3197%" height="15" fill="rgb(213,166,10)" fg:x="54580" fg:w="14069"/><text x="36.4055%" y="863.50">&lt;core::future..</text></g><g><title>async_executor::Executor::run::{{closure}} (14,069 samples, 9.32%)</title><rect x="36.1555%" y="837" width="9.3197%" height="15" fill="rgb(207,163,36)" fg:x="54580" fg:w="14069"/><text x="36.4055%" y="847.50">async_executo..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (14,069 samples, 9.32%)</title><rect x="36.1555%" y="821" width="9.3197%" height="15" fill="rgb(208,122,22)" fg:x="54580" fg:w="14069"/><text x="36.4055%" y="831.50">&lt;futures_lite..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14,069 samples, 9.32%)</title><rect x="36.1555%" y="805" width="9.3197%" height="15" fill="rgb(207,104,49)" fg:x="54580" fg:w="14069"/><text x="36.4055%" y="815.50">&lt;core::future..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (14,069 samples, 9.32%)</title><rect x="36.1555%" y="789" width="9.3197%" height="15" fill="rgb(248,211,50)" fg:x="54580" fg:w="14069"/><text x="36.4055%" y="799.50">async_executo..</text></g><g><title>async_task::runnable::Runnable::run (14,069 samples, 9.32%)</title><rect x="36.1555%" y="773" width="9.3197%" height="15" fill="rgb(217,13,45)" fg:x="54580" fg:w="14069"/><text x="36.4055%" y="783.50">async_task::r..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (14,069 samples, 9.32%)</title><rect x="36.1555%" y="757" width="9.3197%" height="15" fill="rgb(211,216,49)" fg:x="54580" fg:w="14069"/><text x="36.4055%" y="767.50">async_task::r..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (14,069 samples, 9.32%)</title><rect x="36.1555%" y="741" width="9.3197%" height="15" fill="rgb(221,58,53)" fg:x="54580" fg:w="14069"/><text x="36.4055%" y="751.50">&lt;core::pin::P..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14,069 samples, 9.32%)</title><rect x="36.1555%" y="725" width="9.3197%" height="15" fill="rgb(220,112,41)" fg:x="54580" fg:w="14069"/><text x="36.4055%" y="735.50">&lt;core::future..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (14,069 samples, 9.32%)</title><rect x="36.1555%" y="709" width="9.3197%" height="15" fill="rgb(236,38,28)" fg:x="54580" fg:w="14069"/><text x="36.4055%" y="719.50">async_executo..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (14,069 samples, 9.32%)</title><rect x="36.1555%" y="693" width="9.3197%" height="15" fill="rgb(227,195,22)" fg:x="54580" fg:w="14069"/><text x="36.4055%" y="703.50">&lt;async_std::t..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (14,069 samples, 9.32%)</title><rect x="36.1555%" y="677" width="9.3197%" height="15" fill="rgb(214,55,33)" fg:x="54580" fg:w="14069"/><text x="36.4055%" y="687.50">async_std::ta..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (14,069 samples, 9.32%)</title><rect x="36.1555%" y="661" width="9.3197%" height="15" fill="rgb(248,80,13)" fg:x="54580" fg:w="14069"/><text x="36.4055%" y="671.50">std::thread::..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (14,069 samples, 9.32%)</title><rect x="36.1555%" y="645" width="9.3197%" height="15" fill="rgb(238,52,6)" fg:x="54580" fg:w="14069"/><text x="36.4055%" y="655.50">std::thread::..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (14,069 samples, 9.32%)</title><rect x="36.1555%" y="629" width="9.3197%" height="15" fill="rgb(224,198,47)" fg:x="54580" fg:w="14069"/><text x="36.4055%" y="639.50">async_std::ta..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (14,069 samples, 9.32%)</title><rect x="36.1555%" y="613" width="9.3197%" height="15" fill="rgb(233,171,20)" fg:x="54580" fg:w="14069"/><text x="36.4055%" y="623.50">&lt;async_std::t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14,069 samples, 9.32%)</title><rect x="36.1555%" y="597" width="9.3197%" height="15" fill="rgb(241,30,25)" fg:x="54580" fg:w="14069"/><text x="36.4055%" y="607.50">&lt;core::future..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (3,379 samples, 2.24%)</title><rect x="43.2369%" y="581" width="2.2384%" height="15" fill="rgb(207,171,38)" fg:x="65270" fg:w="3379"/><text x="43.4869%" y="591.50">t..</text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::deref::Deref&gt;::deref (273 samples, 0.18%)</title><rect x="45.5779%" y="517" width="0.1808%" height="15" fill="rgb(234,70,1)" fg:x="68804" fg:w="273"/><text x="45.8279%" y="527.50"></text></g><g><title>beef::generic::Cow&lt;T,U&gt;::borrow (273 samples, 0.18%)</title><rect x="45.5779%" y="501" width="0.1808%" height="15" fill="rgb(232,178,18)" fg:x="68804" fg:w="273"/><text x="45.8279%" y="511.50"></text></g><g><title>&lt;halfbrown::iter::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (175 samples, 0.12%)</title><rect x="45.7588%" y="517" width="0.1159%" height="15" fill="rgb(241,78,40)" fg:x="69077" fg:w="175"/><text x="46.0088%" y="527.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (105 samples, 0.07%)</title><rect x="45.8052%" y="501" width="0.0696%" height="15" fill="rgb(222,35,25)" fg:x="69147" fg:w="105"/><text x="46.0552%" y="511.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (88 samples, 0.06%)</title><rect x="45.8164%" y="485" width="0.0583%" height="15" fill="rgb(207,92,16)" fg:x="69164" fg:w="88"/><text x="46.0664%" y="495.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (88 samples, 0.06%)</title><rect x="45.8164%" y="469" width="0.0583%" height="15" fill="rgb(216,59,51)" fg:x="69164" fg:w="88"/><text x="46.0664%" y="479.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::is_empty (188 samples, 0.12%)</title><rect x="45.8747%" y="517" width="0.1245%" height="15" fill="rgb(213,80,28)" fg:x="69252" fg:w="188"/><text x="46.1247%" y="527.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::is_empty (18 samples, 0.01%)</title><rect x="45.9873%" y="501" width="0.0119%" height="15" fill="rgb(220,93,7)" fg:x="69422" fg:w="18"/><text x="46.2373%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::is_empty (18 samples, 0.01%)</title><rect x="45.9873%" y="485" width="0.0119%" height="15" fill="rgb(225,24,44)" fg:x="69422" fg:w="18"/><text x="46.2373%" y="495.50"></text></g><g><title>&lt;value_trait::generator::WriterGenerator&lt;W,V&gt; as value_trait::generator::BaseGenerator&gt;::get_writer (50 samples, 0.03%)</title><rect x="46.0059%" y="501" width="0.0331%" height="15" fill="rgb(243,74,40)" fg:x="69450" fg:w="50"/><text x="46.2559%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (37 samples, 0.02%)</title><rect x="46.0589%" y="437" width="0.0245%" height="15" fill="rgb(228,39,7)" fg:x="69530" fg:w="37"/><text x="46.3089%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (232 samples, 0.15%)</title><rect x="46.0834%" y="437" width="0.1537%" height="15" fill="rgb(227,79,8)" fg:x="69567" fg:w="232"/><text x="46.3334%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (205 samples, 0.14%)</title><rect x="46.1013%" y="421" width="0.1358%" height="15" fill="rgb(236,58,11)" fg:x="69594" fg:w="205"/><text x="46.3513%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (205 samples, 0.14%)</title><rect x="46.1013%" y="405" width="0.1358%" height="15" fill="rgb(249,63,35)" fg:x="69594" fg:w="205"/><text x="46.3513%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (72 samples, 0.05%)</title><rect x="46.1894%" y="389" width="0.0477%" height="15" fill="rgb(252,114,16)" fg:x="69727" fg:w="72"/><text x="46.4394%" y="399.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (653 samples, 0.43%)</title><rect x="46.0059%" y="517" width="0.4326%" height="15" fill="rgb(254,151,24)" fg:x="69450" fg:w="653"/><text x="46.2559%" y="527.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (603 samples, 0.40%)</title><rect x="46.0390%" y="501" width="0.3994%" height="15" fill="rgb(253,54,39)" fg:x="69500" fg:w="603"/><text x="46.2890%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (603 samples, 0.40%)</title><rect x="46.0390%" y="485" width="0.3994%" height="15" fill="rgb(243,25,45)" fg:x="69500" fg:w="603"/><text x="46.2890%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (603 samples, 0.40%)</title><rect x="46.0390%" y="469" width="0.3994%" height="15" fill="rgb(234,134,9)" fg:x="69500" fg:w="603"/><text x="46.2890%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (603 samples, 0.40%)</title><rect x="46.0390%" y="453" width="0.3994%" height="15" fill="rgb(227,166,31)" fg:x="69500" fg:w="603"/><text x="46.2890%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (304 samples, 0.20%)</title><rect x="46.2371%" y="437" width="0.2014%" height="15" fill="rgb(245,143,41)" fg:x="69799" fg:w="304"/><text x="46.4871%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (355 samples, 0.24%)</title><rect x="47.2691%" y="501" width="0.2352%" height="15" fill="rgb(238,181,32)" fg:x="71357" fg:w="355"/><text x="47.5191%" y="511.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (355 samples, 0.24%)</title><rect x="47.2691%" y="485" width="0.2352%" height="15" fill="rgb(224,113,18)" fg:x="71357" fg:w="355"/><text x="47.5191%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (187 samples, 0.12%)</title><rect x="47.5599%" y="421" width="0.1239%" height="15" fill="rgb(240,229,28)" fg:x="71796" fg:w="187"/><text x="47.8099%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (146 samples, 0.10%)</title><rect x="47.5871%" y="405" width="0.0967%" height="15" fill="rgb(250,185,3)" fg:x="71837" fg:w="146"/><text x="47.8371%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (81 samples, 0.05%)</title><rect x="47.6302%" y="389" width="0.0537%" height="15" fill="rgb(212,59,25)" fg:x="71902" fg:w="81"/><text x="47.8802%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (18 samples, 0.01%)</title><rect x="47.6719%" y="373" width="0.0119%" height="15" fill="rgb(221,87,20)" fg:x="71965" fg:w="18"/><text x="47.9219%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (509 samples, 0.34%)</title><rect x="47.6838%" y="421" width="0.3372%" height="15" fill="rgb(213,74,28)" fg:x="71983" fg:w="509"/><text x="47.9338%" y="431.50"></text></g><g><title>[libc-2.31.so] (424 samples, 0.28%)</title><rect x="47.7401%" y="405" width="0.2809%" height="15" fill="rgb(224,132,34)" fg:x="72068" fg:w="424"/><text x="47.9901%" y="415.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager&lt;S&gt;::run::{{closure}} (3,826 samples, 2.53%)</title><rect x="45.4918%" y="709" width="2.5345%" height="15" fill="rgb(222,101,24)" fg:x="68674" fg:w="3826"/><text x="45.7418%" y="719.50">tr..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (3,826 samples, 2.53%)</title><rect x="45.4918%" y="693" width="2.5345%" height="15" fill="rgb(254,142,4)" fg:x="68674" fg:w="3826"/><text x="45.7418%" y="703.50">&lt;c..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,826 samples, 2.53%)</title><rect x="45.4918%" y="677" width="2.5345%" height="15" fill="rgb(230,229,49)" fg:x="68674" fg:w="3826"/><text x="45.7418%" y="687.50">&lt;c..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::Sink&gt;::on_event::{{closure}} (3,826 samples, 2.53%)</title><rect x="45.4918%" y="661" width="2.5345%" height="15" fill="rgb(238,70,47)" fg:x="68674" fg:w="3826"/><text x="45.7418%" y="671.50">&lt;t..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize (3,826 samples, 2.53%)</title><rect x="45.4918%" y="645" width="2.5345%" height="15" fill="rgb(231,160,17)" fg:x="68674" fg:w="3826"/><text x="45.7418%" y="655.50">tr..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize_for_stream (3,826 samples, 2.53%)</title><rect x="45.4918%" y="629" width="2.5345%" height="15" fill="rgb(218,68,53)" fg:x="68674" fg:w="3826"/><text x="45.7418%" y="639.50">tr..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize_for_stream_with_codec (3,826 samples, 2.53%)</title><rect x="45.4918%" y="613" width="2.5345%" height="15" fill="rgb(236,111,10)" fg:x="68674" fg:w="3826"/><text x="45.7418%" y="623.50">tr..</text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode (3,826 samples, 2.53%)</title><rect x="45.4918%" y="597" width="2.5345%" height="15" fill="rgb(224,34,41)" fg:x="68674" fg:w="3826"/><text x="45.7418%" y="607.50">&lt;t..</text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode_into (3,826 samples, 2.53%)</title><rect x="45.4918%" y="581" width="2.5345%" height="15" fill="rgb(241,118,19)" fg:x="68674" fg:w="3826"/><text x="45.7418%" y="591.50">&lt;t..</text></g><g><title>tremor_value::value::serialize::&lt;impl value_trait::Writable for tremor_value::value::Value&gt;::write (3,826 samples, 2.53%)</title><rect x="45.4918%" y="565" width="2.5345%" height="15" fill="rgb(238,129,25)" fg:x="68674" fg:w="3826"/><text x="45.7418%" y="575.50">tr..</text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (3,826 samples, 2.53%)</title><rect x="45.4918%" y="549" width="2.5345%" height="15" fill="rgb(238,22,31)" fg:x="68674" fg:w="3826"/><text x="45.7418%" y="559.50">tr..</text></g><g><title>tremor_value::value::serialize::FastGenerator::write_object (3,812 samples, 2.53%)</title><rect x="45.5011%" y="533" width="2.5252%" height="15" fill="rgb(222,174,48)" fg:x="68688" fg:w="3812"/><text x="45.7511%" y="543.50">tr..</text></g><g><title>value_trait::generator::BaseGenerator::write_simple_str_content (2,397 samples, 1.59%)</title><rect x="46.4384%" y="517" width="1.5878%" height="15" fill="rgb(206,152,40)" fg:x="70103" fg:w="2397"/><text x="46.6884%" y="527.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (788 samples, 0.52%)</title><rect x="47.5043%" y="501" width="0.5220%" height="15" fill="rgb(218,99,54)" fg:x="71712" fg:w="788"/><text x="47.7543%" y="511.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (787 samples, 0.52%)</title><rect x="47.5050%" y="485" width="0.5213%" height="15" fill="rgb(220,174,26)" fg:x="71713" fg:w="787"/><text x="47.7550%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (787 samples, 0.52%)</title><rect x="47.5050%" y="469" width="0.5213%" height="15" fill="rgb(245,116,9)" fg:x="71713" fg:w="787"/><text x="47.7550%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (787 samples, 0.52%)</title><rect x="47.5050%" y="453" width="0.5213%" height="15" fill="rgb(209,72,35)" fg:x="71713" fg:w="787"/><text x="47.7550%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (787 samples, 0.52%)</title><rect x="47.5050%" y="437" width="0.5213%" height="15" fill="rgb(226,126,21)" fg:x="71713" fg:w="787"/><text x="47.7550%" y="447.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (44 samples, 0.03%)</title><rect x="48.0263%" y="549" width="0.0291%" height="15" fill="rgb(227,192,1)" fg:x="72500" fg:w="44"/><text x="48.2763%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (23 samples, 0.02%)</title><rect x="48.0561%" y="437" width="0.0152%" height="15" fill="rgb(237,180,29)" fg:x="72545" fg:w="23"/><text x="48.3061%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (23 samples, 0.02%)</title><rect x="48.0561%" y="421" width="0.0152%" height="15" fill="rgb(230,197,35)" fg:x="72545" fg:w="23"/><text x="48.3061%" y="431.50"></text></g><g><title>core::hint::spin_loop (526 samples, 0.35%)</title><rect x="48.0866%" y="421" width="0.3484%" height="15" fill="rgb(246,193,31)" fg:x="72591" fg:w="526"/><text x="48.3366%" y="431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (526 samples, 0.35%)</title><rect x="48.0866%" y="405" width="0.3484%" height="15" fill="rgb(241,36,4)" fg:x="72591" fg:w="526"/><text x="48.3366%" y="415.50"></text></g><g><title>event_listener::Inner::lock (608 samples, 0.40%)</title><rect x="48.0554%" y="517" width="0.4028%" height="15" fill="rgb(241,130,17)" fg:x="72544" fg:w="608"/><text x="48.3054%" y="527.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (608 samples, 0.40%)</title><rect x="48.0554%" y="501" width="0.4028%" height="15" fill="rgb(206,137,32)" fg:x="72544" fg:w="608"/><text x="48.3054%" y="511.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (608 samples, 0.40%)</title><rect x="48.0554%" y="485" width="0.4028%" height="15" fill="rgb(237,228,51)" fg:x="72544" fg:w="608"/><text x="48.3054%" y="495.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (608 samples, 0.40%)</title><rect x="48.0554%" y="469" width="0.4028%" height="15" fill="rgb(243,6,42)" fg:x="72544" fg:w="608"/><text x="48.3054%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (608 samples, 0.40%)</title><rect x="48.0554%" y="453" width="0.4028%" height="15" fill="rgb(251,74,28)" fg:x="72544" fg:w="608"/><text x="48.3054%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (566 samples, 0.37%)</title><rect x="48.0833%" y="437" width="0.3749%" height="15" fill="rgb(218,20,49)" fg:x="72586" fg:w="566"/><text x="48.3333%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (35 samples, 0.02%)</title><rect x="48.4350%" y="421" width="0.0232%" height="15" fill="rgb(238,28,14)" fg:x="73117" fg:w="35"/><text x="48.6850%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (35 samples, 0.02%)</title><rect x="48.4350%" y="405" width="0.0232%" height="15" fill="rgb(229,40,46)" fg:x="73117" fg:w="35"/><text x="48.6850%" y="415.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_waker (17 samples, 0.01%)</title><rect x="48.4661%" y="469" width="0.0113%" height="15" fill="rgb(244,195,20)" fg:x="73164" fg:w="17"/><text x="48.7161%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (17 samples, 0.01%)</title><rect x="48.4661%" y="453" width="0.0113%" height="15" fill="rgb(253,56,35)" fg:x="73164" fg:w="17"/><text x="48.7161%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_sub (17 samples, 0.01%)</title><rect x="48.4661%" y="437" width="0.0113%" height="15" fill="rgb(210,149,44)" fg:x="73164" fg:w="17"/><text x="48.7161%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (28 samples, 0.02%)</title><rect x="48.4873%" y="421" width="0.0185%" height="15" fill="rgb(240,135,12)" fg:x="73196" fg:w="28"/><text x="48.7373%" y="431.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.02%)</title><rect x="48.4873%" y="405" width="0.0185%" height="15" fill="rgb(251,24,50)" fg:x="73196" fg:w="28"/><text x="48.7373%" y="415.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (27 samples, 0.02%)</title><rect x="48.4880%" y="389" width="0.0179%" height="15" fill="rgb(243,200,47)" fg:x="73197" fg:w="27"/><text x="48.7380%" y="399.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (27 samples, 0.02%)</title><rect x="48.4880%" y="373" width="0.0179%" height="15" fill="rgb(224,166,26)" fg:x="73197" fg:w="27"/><text x="48.7380%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (27 samples, 0.02%)</title><rect x="48.4880%" y="357" width="0.0179%" height="15" fill="rgb(233,0,47)" fg:x="73197" fg:w="27"/><text x="48.7380%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_swap (27 samples, 0.02%)</title><rect x="48.4880%" y="341" width="0.0179%" height="15" fill="rgb(253,80,5)" fg:x="73197" fg:w="27"/><text x="48.7380%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (21 samples, 0.01%)</title><rect x="48.5059%" y="421" width="0.0139%" height="15" fill="rgb(214,133,25)" fg:x="73224" fg:w="21"/><text x="48.7559%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (21 samples, 0.01%)</title><rect x="48.5059%" y="405" width="0.0139%" height="15" fill="rgb(209,27,14)" fg:x="73224" fg:w="21"/><text x="48.7559%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (18 samples, 0.01%)</title><rect x="48.5330%" y="341" width="0.0119%" height="15" fill="rgb(219,102,51)" fg:x="73265" fg:w="18"/><text x="48.7830%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_swap (18 samples, 0.01%)</title><rect x="48.5330%" y="325" width="0.0119%" height="15" fill="rgb(237,18,16)" fg:x="73265" fg:w="18"/><text x="48.7830%" y="335.50"></text></g><g><title>parking::Unparker::unpark (37 samples, 0.02%)</title><rect x="48.5277%" y="373" width="0.0245%" height="15" fill="rgb(241,85,17)" fg:x="73257" fg:w="37"/><text x="48.7777%" y="383.50"></text></g><g><title>parking::Inner::unpark (33 samples, 0.02%)</title><rect x="48.5304%" y="357" width="0.0219%" height="15" fill="rgb(236,90,42)" fg:x="73261" fg:w="33"/><text x="48.7804%" y="367.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (56 samples, 0.04%)</title><rect x="48.5198%" y="389" width="0.0371%" height="15" fill="rgb(249,57,21)" fg:x="73245" fg:w="56"/><text x="48.7698%" y="399.50"></text></g><g><title>core::task::wake::Waker::wake (78 samples, 0.05%)</title><rect x="48.5198%" y="421" width="0.0517%" height="15" fill="rgb(243,12,36)" fg:x="73245" fg:w="78"/><text x="48.7698%" y="431.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (78 samples, 0.05%)</title><rect x="48.5198%" y="405" width="0.0517%" height="15" fill="rgb(253,128,47)" fg:x="73245" fg:w="78"/><text x="48.7698%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (22 samples, 0.01%)</title><rect x="48.5569%" y="389" width="0.0146%" height="15" fill="rgb(207,33,20)" fg:x="73301" fg:w="22"/><text x="48.8069%" y="399.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.01%)</title><rect x="48.5569%" y="373" width="0.0146%" height="15" fill="rgb(233,215,35)" fg:x="73301" fg:w="22"/><text x="48.8069%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (21 samples, 0.01%)</title><rect x="48.5576%" y="357" width="0.0139%" height="15" fill="rgb(249,188,52)" fg:x="73302" fg:w="21"/><text x="48.8076%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_sub (21 samples, 0.01%)</title><rect x="48.5576%" y="341" width="0.0139%" height="15" fill="rgb(225,12,32)" fg:x="73302" fg:w="21"/><text x="48.8076%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (21 samples, 0.01%)</title><rect x="48.5801%" y="373" width="0.0139%" height="15" fill="rgb(247,98,14)" fg:x="73336" fg:w="21"/><text x="48.8301%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (21 samples, 0.01%)</title><rect x="48.5801%" y="357" width="0.0139%" height="15" fill="rgb(247,219,48)" fg:x="73336" fg:w="21"/><text x="48.8301%" y="367.50"></text></g><g><title>async_executor::State::notify (197 samples, 0.13%)</title><rect x="48.4781%" y="437" width="0.1305%" height="15" fill="rgb(253,60,48)" fg:x="73182" fg:w="197"/><text x="48.7281%" y="447.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (56 samples, 0.04%)</title><rect x="48.5715%" y="421" width="0.0371%" height="15" fill="rgb(245,15,52)" fg:x="73323" fg:w="56"/><text x="48.8215%" y="431.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (48 samples, 0.03%)</title><rect x="48.5768%" y="405" width="0.0318%" height="15" fill="rgb(220,133,28)" fg:x="73331" fg:w="48"/><text x="48.8268%" y="415.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (48 samples, 0.03%)</title><rect x="48.5768%" y="389" width="0.0318%" height="15" fill="rgb(217,180,4)" fg:x="73331" fg:w="48"/><text x="48.8268%" y="399.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (22 samples, 0.01%)</title><rect x="48.5940%" y="373" width="0.0146%" height="15" fill="rgb(251,24,1)" fg:x="73357" fg:w="22"/><text x="48.8440%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (37 samples, 0.02%)</title><rect x="48.6112%" y="405" width="0.0245%" height="15" fill="rgb(212,185,49)" fg:x="73383" fg:w="37"/><text x="48.8612%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (37 samples, 0.02%)</title><rect x="48.6112%" y="389" width="0.0245%" height="15" fill="rgb(215,175,22)" fg:x="73383" fg:w="37"/><text x="48.8612%" y="399.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (254 samples, 0.17%)</title><rect x="48.4774%" y="453" width="0.1683%" height="15" fill="rgb(250,205,14)" fg:x="73181" fg:w="254"/><text x="48.7274%" y="463.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (56 samples, 0.04%)</title><rect x="48.6086%" y="437" width="0.0371%" height="15" fill="rgb(225,211,22)" fg:x="73379" fg:w="56"/><text x="48.8586%" y="447.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (54 samples, 0.04%)</title><rect x="48.6099%" y="421" width="0.0358%" height="15" fill="rgb(251,179,42)" fg:x="73381" fg:w="54"/><text x="48.8599%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (34 samples, 0.02%)</title><rect x="48.6457%" y="453" width="0.0225%" height="15" fill="rgb(208,216,51)" fg:x="73435" fg:w="34"/><text x="48.8957%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (34 samples, 0.02%)</title><rect x="48.6457%" y="437" width="0.0225%" height="15" fill="rgb(235,36,11)" fg:x="73435" fg:w="34"/><text x="48.8957%" y="447.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (940 samples, 0.62%)</title><rect x="48.0554%" y="549" width="0.6227%" height="15" fill="rgb(213,189,28)" fg:x="72544" fg:w="940"/><text x="48.3054%" y="559.50"></text></g><g><title>event_listener::Event::notify (940 samples, 0.62%)</title><rect x="48.0554%" y="533" width="0.6227%" height="15" fill="rgb(227,203,42)" fg:x="72544" fg:w="940"/><text x="48.3054%" y="543.50"></text></g><g><title>event_listener::List::notify (332 samples, 0.22%)</title><rect x="48.4582%" y="517" width="0.2199%" height="15" fill="rgb(244,72,36)" fg:x="73152" fg:w="332"/><text x="48.7082%" y="527.50"></text></g><g><title>core::task::wake::Waker::wake (320 samples, 0.21%)</title><rect x="48.4661%" y="501" width="0.2120%" height="15" fill="rgb(213,53,17)" fg:x="73164" fg:w="320"/><text x="48.7161%" y="511.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (320 samples, 0.21%)</title><rect x="48.4661%" y="485" width="0.2120%" height="15" fill="rgb(207,167,3)" fg:x="73164" fg:w="320"/><text x="48.7161%" y="495.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (303 samples, 0.20%)</title><rect x="48.4774%" y="469" width="0.2007%" height="15" fill="rgb(216,98,30)" fg:x="73181" fg:w="303"/><text x="48.7274%" y="479.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (19 samples, 0.01%)</title><rect x="48.6801%" y="533" width="0.0126%" height="15" fill="rgb(236,123,15)" fg:x="73487" fg:w="19"/><text x="48.9301%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (19 samples, 0.01%)</title><rect x="48.6801%" y="517" width="0.0126%" height="15" fill="rgb(248,81,50)" fg:x="73487" fg:w="19"/><text x="48.9301%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_add (19 samples, 0.01%)</title><rect x="48.6801%" y="501" width="0.0126%" height="15" fill="rgb(214,120,4)" fg:x="73487" fg:w="19"/><text x="48.9301%" y="511.50"></text></g><g><title>event_listener::Event::listen (48 samples, 0.03%)</title><rect x="48.6781%" y="549" width="0.0318%" height="15" fill="rgb(208,179,34)" fg:x="73484" fg:w="48"/><text x="48.9281%" y="559.50"></text></g><g><title>core::hint::spin_loop (27 samples, 0.02%)</title><rect x="48.7132%" y="437" width="0.0179%" height="15" fill="rgb(227,140,7)" fg:x="73537" fg:w="27"/><text x="48.9632%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (27 samples, 0.02%)</title><rect x="48.7132%" y="421" width="0.0179%" height="15" fill="rgb(214,22,6)" fg:x="73537" fg:w="27"/><text x="48.9632%" y="431.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (1,065 samples, 0.71%)</title><rect x="48.0263%" y="565" width="0.7055%" height="15" fill="rgb(207,137,27)" fg:x="72500" fg:w="1065"/><text x="48.2763%" y="575.50"></text></g><g><title>event_listener::Event::notify (33 samples, 0.02%)</title><rect x="48.7099%" y="549" width="0.0219%" height="15" fill="rgb(210,8,46)" fg:x="73532" fg:w="33"/><text x="48.9599%" y="559.50"></text></g><g><title>event_listener::Inner::lock (33 samples, 0.02%)</title><rect x="48.7099%" y="533" width="0.0219%" height="15" fill="rgb(240,16,54)" fg:x="73532" fg:w="33"/><text x="48.9599%" y="543.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (33 samples, 0.02%)</title><rect x="48.7099%" y="517" width="0.0219%" height="15" fill="rgb(211,209,29)" fg:x="73532" fg:w="33"/><text x="48.9599%" y="527.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (33 samples, 0.02%)</title><rect x="48.7099%" y="501" width="0.0219%" height="15" fill="rgb(226,228,24)" fg:x="73532" fg:w="33"/><text x="48.9599%" y="511.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (33 samples, 0.02%)</title><rect x="48.7099%" y="485" width="0.0219%" height="15" fill="rgb(222,84,9)" fg:x="73532" fg:w="33"/><text x="48.9599%" y="495.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (33 samples, 0.02%)</title><rect x="48.7099%" y="469" width="0.0219%" height="15" fill="rgb(234,203,30)" fg:x="73532" fg:w="33"/><text x="48.9599%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (28 samples, 0.02%)</title><rect x="48.7132%" y="453" width="0.0185%" height="15" fill="rgb(238,109,14)" fg:x="73537" fg:w="28"/><text x="48.9632%" y="463.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (18 samples, 0.01%)</title><rect x="48.7371%" y="437" width="0.0119%" height="15" fill="rgb(233,206,34)" fg:x="73573" fg:w="18"/><text x="48.9871%" y="447.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,097 samples, 0.73%)</title><rect x="48.0263%" y="629" width="0.7267%" height="15" fill="rgb(220,167,47)" fg:x="72500" fg:w="1097"/><text x="48.2763%" y="639.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::route_events::{{closure}} (1,097 samples, 0.73%)</title><rect x="48.0263%" y="613" width="0.7267%" height="15" fill="rgb(238,105,10)" fg:x="72500" fg:w="1097"/><text x="48.2763%" y="623.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,097 samples, 0.73%)</title><rect x="48.0263%" y="597" width="0.7267%" height="15" fill="rgb(213,227,17)" fg:x="72500" fg:w="1097"/><text x="48.2763%" y="607.50"></text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (1,097 samples, 0.73%)</title><rect x="48.0263%" y="581" width="0.7267%" height="15" fill="rgb(217,132,38)" fg:x="72500" fg:w="1097"/><text x="48.2763%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_channel::Send&lt;alloc::boxed::Box&lt;tremor_runtime::pipeline::Msg&gt;&gt;&gt; (32 samples, 0.02%)</title><rect x="48.7318%" y="565" width="0.0212%" height="15" fill="rgb(242,146,4)" fg:x="73565" fg:w="32"/><text x="48.9818%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (32 samples, 0.02%)</title><rect x="48.7318%" y="549" width="0.0212%" height="15" fill="rgb(212,61,9)" fg:x="73565" fg:w="32"/><text x="48.9818%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (32 samples, 0.02%)</title><rect x="48.7318%" y="533" width="0.0212%" height="15" fill="rgb(247,126,22)" fg:x="73565" fg:w="32"/><text x="48.9818%" y="543.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (32 samples, 0.02%)</title><rect x="48.7318%" y="517" width="0.0212%" height="15" fill="rgb(220,196,2)" fg:x="73565" fg:w="32"/><text x="48.9818%" y="527.50"></text></g><g><title>event_listener::List::notify (31 samples, 0.02%)</title><rect x="48.7324%" y="501" width="0.0205%" height="15" fill="rgb(208,46,4)" fg:x="73566" fg:w="31"/><text x="48.9824%" y="511.50"></text></g><g><title>core::task::wake::Waker::wake (27 samples, 0.02%)</title><rect x="48.7351%" y="485" width="0.0179%" height="15" fill="rgb(252,104,46)" fg:x="73570" fg:w="27"/><text x="48.9851%" y="495.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (27 samples, 0.02%)</title><rect x="48.7351%" y="469" width="0.0179%" height="15" fill="rgb(237,152,48)" fg:x="73570" fg:w="27"/><text x="48.9851%" y="479.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (25 samples, 0.02%)</title><rect x="48.7364%" y="453" width="0.0166%" height="15" fill="rgb(221,59,37)" fg:x="73572" fg:w="25"/><text x="48.9864%" y="463.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (62 samples, 0.04%)</title><rect x="49.6824%" y="613" width="0.0411%" height="15" fill="rgb(209,202,51)" fg:x="75000" fg:w="62"/><text x="49.9324%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (151 samples, 0.10%)</title><rect x="49.9083%" y="517" width="0.1000%" height="15" fill="rgb(228,81,30)" fg:x="75341" fg:w="151"/><text x="50.1583%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (151 samples, 0.10%)</title><rect x="49.9083%" y="501" width="0.1000%" height="15" fill="rgb(227,42,39)" fg:x="75341" fg:w="151"/><text x="50.1583%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (151 samples, 0.10%)</title><rect x="49.9083%" y="485" width="0.1000%" height="15" fill="rgb(221,26,2)" fg:x="75341" fg:w="151"/><text x="50.1583%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (145 samples, 0.10%)</title><rect x="49.9122%" y="469" width="0.0961%" height="15" fill="rgb(254,61,31)" fg:x="75347" fg:w="145"/><text x="50.1622%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (145 samples, 0.10%)</title><rect x="49.9122%" y="453" width="0.0961%" height="15" fill="rgb(222,173,38)" fg:x="75347" fg:w="145"/><text x="50.1622%" y="463.50"></text></g><g><title>alloc::alloc::alloc (145 samples, 0.10%)</title><rect x="49.9122%" y="437" width="0.0961%" height="15" fill="rgb(218,50,12)" fg:x="75347" fg:w="145"/><text x="50.1622%" y="447.50"></text></g><g><title>__rg_alloc (145 samples, 0.10%)</title><rect x="49.9122%" y="421" width="0.0961%" height="15" fill="rgb(223,88,40)" fg:x="75347" fg:w="145"/><text x="50.1622%" y="431.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (145 samples, 0.10%)</title><rect x="49.9122%" y="405" width="0.0961%" height="15" fill="rgb(237,54,19)" fg:x="75347" fg:w="145"/><text x="50.1622%" y="415.50"></text></g><g><title>sn_rust_alloc (128 samples, 0.08%)</title><rect x="49.9235%" y="389" width="0.0848%" height="15" fill="rgb(251,129,25)" fg:x="75364" fg:w="128"/><text x="50.1735%" y="399.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (23 samples, 0.02%)</title><rect x="49.9930%" y="373" width="0.0152%" height="15" fill="rgb(238,97,19)" fg:x="75469" fg:w="23"/><text x="50.2430%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (260 samples, 0.17%)</title><rect x="49.8917%" y="597" width="0.1722%" height="15" fill="rgb(240,169,18)" fg:x="75316" fg:w="260"/><text x="50.1417%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (235 samples, 0.16%)</title><rect x="49.9083%" y="581" width="0.1557%" height="15" fill="rgb(230,187,49)" fg:x="75341" fg:w="235"/><text x="50.1583%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (235 samples, 0.16%)</title><rect x="49.9083%" y="565" width="0.1557%" height="15" fill="rgb(209,44,26)" fg:x="75341" fg:w="235"/><text x="50.1583%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (235 samples, 0.16%)</title><rect x="49.9083%" y="549" width="0.1557%" height="15" fill="rgb(244,0,6)" fg:x="75341" fg:w="235"/><text x="50.1583%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (235 samples, 0.16%)</title><rect x="49.9083%" y="533" width="0.1557%" height="15" fill="rgb(248,18,21)" fg:x="75341" fg:w="235"/><text x="50.1583%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (84 samples, 0.06%)</title><rect x="50.0083%" y="517" width="0.0556%" height="15" fill="rgb(245,180,19)" fg:x="75492" fg:w="84"/><text x="50.2583%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (84 samples, 0.06%)</title><rect x="50.0083%" y="501" width="0.0556%" height="15" fill="rgb(252,118,36)" fg:x="75492" fg:w="84"/><text x="50.2583%" y="511.50"></text></g><g><title>[libc-2.31.so] (56 samples, 0.04%)</title><rect x="50.0268%" y="485" width="0.0371%" height="15" fill="rgb(210,224,19)" fg:x="75520" fg:w="56"/><text x="50.2768%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (63 samples, 0.04%)</title><rect x="50.1063%" y="309" width="0.0417%" height="15" fill="rgb(218,30,24)" fg:x="75640" fg:w="63"/><text x="50.3563%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (116 samples, 0.08%)</title><rect x="50.0739%" y="453" width="0.0768%" height="15" fill="rgb(219,75,50)" fg:x="75591" fg:w="116"/><text x="50.3239%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (116 samples, 0.08%)</title><rect x="50.0739%" y="437" width="0.0768%" height="15" fill="rgb(234,72,50)" fg:x="75591" fg:w="116"/><text x="50.3239%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (116 samples, 0.08%)</title><rect x="50.0739%" y="421" width="0.0768%" height="15" fill="rgb(219,100,48)" fg:x="75591" fg:w="116"/><text x="50.3239%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (108 samples, 0.07%)</title><rect x="50.0792%" y="405" width="0.0715%" height="15" fill="rgb(253,5,41)" fg:x="75599" fg:w="108"/><text x="50.3292%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (108 samples, 0.07%)</title><rect x="50.0792%" y="389" width="0.0715%" height="15" fill="rgb(247,181,11)" fg:x="75599" fg:w="108"/><text x="50.3292%" y="399.50"></text></g><g><title>alloc::alloc::alloc (108 samples, 0.07%)</title><rect x="50.0792%" y="373" width="0.0715%" height="15" fill="rgb(222,223,25)" fg:x="75599" fg:w="108"/><text x="50.3292%" y="383.50"></text></g><g><title>__rg_alloc (108 samples, 0.07%)</title><rect x="50.0792%" y="357" width="0.0715%" height="15" fill="rgb(214,198,28)" fg:x="75599" fg:w="108"/><text x="50.3292%" y="367.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (108 samples, 0.07%)</title><rect x="50.0792%" y="341" width="0.0715%" height="15" fill="rgb(230,46,43)" fg:x="75599" fg:w="108"/><text x="50.3292%" y="351.50"></text></g><g><title>sn_rust_alloc (102 samples, 0.07%)</title><rect x="50.0831%" y="325" width="0.0676%" height="15" fill="rgb(233,65,53)" fg:x="75605" fg:w="102"/><text x="50.3331%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (166 samples, 0.11%)</title><rect x="50.0732%" y="533" width="0.1100%" height="15" fill="rgb(221,121,27)" fg:x="75590" fg:w="166"/><text x="50.3232%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (165 samples, 0.11%)</title><rect x="50.0739%" y="517" width="0.1093%" height="15" fill="rgb(247,70,47)" fg:x="75591" fg:w="165"/><text x="50.3239%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (165 samples, 0.11%)</title><rect x="50.0739%" y="501" width="0.1093%" height="15" fill="rgb(228,85,35)" fg:x="75591" fg:w="165"/><text x="50.3239%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (165 samples, 0.11%)</title><rect x="50.0739%" y="485" width="0.1093%" height="15" fill="rgb(209,50,18)" fg:x="75591" fg:w="165"/><text x="50.3239%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (165 samples, 0.11%)</title><rect x="50.0739%" y="469" width="0.1093%" height="15" fill="rgb(250,19,35)" fg:x="75591" fg:w="165"/><text x="50.3239%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (49 samples, 0.03%)</title><rect x="50.1507%" y="453" width="0.0325%" height="15" fill="rgb(253,107,29)" fg:x="75707" fg:w="49"/><text x="50.4007%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (49 samples, 0.03%)</title><rect x="50.1507%" y="437" width="0.0325%" height="15" fill="rgb(252,179,29)" fg:x="75707" fg:w="49"/><text x="50.4007%" y="447.50"></text></g><g><title>[libc-2.31.so] (39 samples, 0.03%)</title><rect x="50.1573%" y="421" width="0.0258%" height="15" fill="rgb(238,194,6)" fg:x="75717" fg:w="39"/><text x="50.4073%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.02%)</title><rect x="50.1832%" y="533" width="0.0185%" height="15" fill="rgb(238,164,29)" fg:x="75756" fg:w="28"/><text x="50.4332%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.02%)</title><rect x="50.1865%" y="517" width="0.0152%" height="15" fill="rgb(224,25,9)" fg:x="75761" fg:w="23"/><text x="50.4365%" y="527.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.02%)</title><rect x="50.1865%" y="501" width="0.0152%" height="15" fill="rgb(244,153,23)" fg:x="75761" fg:w="23"/><text x="50.4365%" y="511.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (18 samples, 0.01%)</title><rect x="50.2408%" y="389" width="0.0119%" height="15" fill="rgb(212,203,14)" fg:x="75843" fg:w="18"/><text x="50.4908%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (63 samples, 0.04%)</title><rect x="50.2123%" y="485" width="0.0417%" height="15" fill="rgb(220,164,20)" fg:x="75800" fg:w="63"/><text x="50.4623%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (63 samples, 0.04%)</title><rect x="50.2123%" y="469" width="0.0417%" height="15" fill="rgb(222,203,48)" fg:x="75800" fg:w="63"/><text x="50.4623%" y="479.50"></text></g><g><title>alloc::alloc::alloc (63 samples, 0.04%)</title><rect x="50.2123%" y="453" width="0.0417%" height="15" fill="rgb(215,159,22)" fg:x="75800" fg:w="63"/><text x="50.4623%" y="463.50"></text></g><g><title>__rg_alloc (63 samples, 0.04%)</title><rect x="50.2123%" y="437" width="0.0417%" height="15" fill="rgb(216,183,47)" fg:x="75800" fg:w="63"/><text x="50.4623%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (63 samples, 0.04%)</title><rect x="50.2123%" y="421" width="0.0417%" height="15" fill="rgb(229,195,25)" fg:x="75800" fg:w="63"/><text x="50.4623%" y="431.50"></text></g><g><title>sn_rust_alloc (54 samples, 0.04%)</title><rect x="50.2183%" y="405" width="0.0358%" height="15" fill="rgb(224,132,51)" fg:x="75809" fg:w="54"/><text x="50.4683%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (84 samples, 0.06%)</title><rect x="50.2017%" y="533" width="0.0556%" height="15" fill="rgb(240,63,7)" fg:x="75784" fg:w="84"/><text x="50.4517%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (76 samples, 0.05%)</title><rect x="50.2070%" y="517" width="0.0503%" height="15" fill="rgb(249,182,41)" fg:x="75792" fg:w="76"/><text x="50.4570%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (76 samples, 0.05%)</title><rect x="50.2070%" y="501" width="0.0503%" height="15" fill="rgb(243,47,26)" fg:x="75792" fg:w="76"/><text x="50.4570%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (296 samples, 0.20%)</title><rect x="50.0639%" y="597" width="0.1961%" height="15" fill="rgb(233,48,2)" fg:x="75576" fg:w="296"/><text x="50.3139%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (295 samples, 0.20%)</title><rect x="50.0646%" y="581" width="0.1954%" height="15" fill="rgb(244,165,34)" fg:x="75577" fg:w="295"/><text x="50.3146%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (295 samples, 0.20%)</title><rect x="50.0646%" y="565" width="0.1954%" height="15" fill="rgb(207,89,7)" fg:x="75577" fg:w="295"/><text x="50.3146%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (295 samples, 0.20%)</title><rect x="50.0646%" y="549" width="0.1954%" height="15" fill="rgb(244,117,36)" fg:x="75577" fg:w="295"/><text x="50.3146%" y="559.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (807 samples, 0.53%)</title><rect x="49.7320%" y="613" width="0.5346%" height="15" fill="rgb(226,144,34)" fg:x="75075" fg:w="807"/><text x="49.9820%" y="623.50"></text></g><g><title>[libc-2.31.so] (139 samples, 0.09%)</title><rect x="50.2666%" y="613" width="0.0921%" height="15" fill="rgb(213,23,19)" fg:x="75882" fg:w="139"/><text x="50.5166%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (423 samples, 0.28%)</title><rect x="50.3633%" y="613" width="0.2802%" height="15" fill="rgb(217,75,12)" fg:x="76028" fg:w="423"/><text x="50.6133%" y="623.50"></text></g><g><title>core::ptr::write (394 samples, 0.26%)</title><rect x="50.3826%" y="597" width="0.2610%" height="15" fill="rgb(224,159,17)" fg:x="76057" fg:w="394"/><text x="50.6326%" y="607.50"></text></g><g><title>[libc-2.31.so] (394 samples, 0.26%)</title><rect x="50.3826%" y="581" width="0.2610%" height="15" fill="rgb(217,118,1)" fg:x="76057" fg:w="394"/><text x="50.6326%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (527 samples, 0.35%)</title><rect x="50.7012%" y="453" width="0.3491%" height="15" fill="rgb(232,180,48)" fg:x="76538" fg:w="527"/><text x="50.9512%" y="463.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (18 samples, 0.01%)</title><rect x="51.0503%" y="453" width="0.0119%" height="15" fill="rgb(230,27,33)" fg:x="77065" fg:w="18"/><text x="51.3003%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (612 samples, 0.41%)</title><rect x="50.6595%" y="549" width="0.4054%" height="15" fill="rgb(205,31,21)" fg:x="76475" fg:w="612"/><text x="50.9095%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (612 samples, 0.41%)</title><rect x="50.6595%" y="533" width="0.4054%" height="15" fill="rgb(253,59,4)" fg:x="76475" fg:w="612"/><text x="50.9095%" y="543.50"></text></g><g><title>alloc::alloc::alloc (612 samples, 0.41%)</title><rect x="50.6595%" y="517" width="0.4054%" height="15" fill="rgb(224,201,9)" fg:x="76475" fg:w="612"/><text x="50.9095%" y="527.50"></text></g><g><title>__rg_alloc (612 samples, 0.41%)</title><rect x="50.6595%" y="501" width="0.4054%" height="15" fill="rgb(229,206,30)" fg:x="76475" fg:w="612"/><text x="50.9095%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (612 samples, 0.41%)</title><rect x="50.6595%" y="485" width="0.4054%" height="15" fill="rgb(212,67,47)" fg:x="76475" fg:w="612"/><text x="50.9095%" y="495.50"></text></g><g><title>sn_rust_alloc (602 samples, 0.40%)</title><rect x="50.6661%" y="469" width="0.3988%" height="15" fill="rgb(211,96,50)" fg:x="76485" fg:w="602"/><text x="50.9161%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (644 samples, 0.43%)</title><rect x="50.6436%" y="613" width="0.4266%" height="15" fill="rgb(252,114,18)" fg:x="76451" fg:w="644"/><text x="50.8936%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (644 samples, 0.43%)</title><rect x="50.6436%" y="597" width="0.4266%" height="15" fill="rgb(223,58,37)" fg:x="76451" fg:w="644"/><text x="50.8936%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (636 samples, 0.42%)</title><rect x="50.6489%" y="581" width="0.4213%" height="15" fill="rgb(237,70,4)" fg:x="76459" fg:w="636"/><text x="50.8989%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (636 samples, 0.42%)</title><rect x="50.6489%" y="565" width="0.4213%" height="15" fill="rgb(244,85,46)" fg:x="76459" fg:w="636"/><text x="50.8989%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (71 samples, 0.05%)</title><rect x="51.0781%" y="517" width="0.0470%" height="15" fill="rgb(223,39,52)" fg:x="77107" fg:w="71"/><text x="51.3281%" y="527.50"></text></g><g><title>alloc::alloc::dealloc (71 samples, 0.05%)</title><rect x="51.0781%" y="501" width="0.0470%" height="15" fill="rgb(218,200,14)" fg:x="77107" fg:w="71"/><text x="51.3281%" y="511.50"></text></g><g><title>__rg_dealloc (71 samples, 0.05%)</title><rect x="51.0781%" y="485" width="0.0470%" height="15" fill="rgb(208,171,16)" fg:x="77107" fg:w="71"/><text x="51.3281%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (71 samples, 0.05%)</title><rect x="51.0781%" y="469" width="0.0470%" height="15" fill="rgb(234,200,18)" fg:x="77107" fg:w="71"/><text x="51.3281%" y="479.50"></text></g><g><title>sn_rust_dealloc (67 samples, 0.04%)</title><rect x="51.0808%" y="453" width="0.0444%" height="15" fill="rgb(228,45,11)" fg:x="77111" fg:w="67"/><text x="51.3308%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (82 samples, 0.05%)</title><rect x="51.0781%" y="581" width="0.0543%" height="15" fill="rgb(237,182,11)" fg:x="77107" fg:w="82"/><text x="51.3281%" y="591.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (82 samples, 0.05%)</title><rect x="51.0781%" y="565" width="0.0543%" height="15" fill="rgb(241,175,49)" fg:x="77107" fg:w="82"/><text x="51.3281%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (82 samples, 0.05%)</title><rect x="51.0781%" y="549" width="0.0543%" height="15" fill="rgb(247,38,35)" fg:x="77107" fg:w="82"/><text x="51.3281%" y="559.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (82 samples, 0.05%)</title><rect x="51.0781%" y="533" width="0.0543%" height="15" fill="rgb(228,39,49)" fg:x="77107" fg:w="82"/><text x="51.3281%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (96 samples, 0.06%)</title><rect x="51.0702%" y="613" width="0.0636%" height="15" fill="rgb(226,101,26)" fg:x="77095" fg:w="96"/><text x="51.3202%" y="623.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (96 samples, 0.06%)</title><rect x="51.0702%" y="597" width="0.0636%" height="15" fill="rgb(206,141,19)" fg:x="77095" fg:w="96"/><text x="51.3202%" y="607.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (30 samples, 0.02%)</title><rect x="51.1338%" y="613" width="0.0199%" height="15" fill="rgb(211,200,13)" fg:x="77191" fg:w="30"/><text x="51.3838%" y="623.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,730 samples, 3.13%)</title><rect x="48.0263%" y="693" width="3.1333%" height="15" fill="rgb(241,121,6)" fg:x="72500" fg:w="4730"/><text x="48.2763%" y="703.50">&lt;co..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_source_reply::{{closure}} (4,730 samples, 3.13%)</title><rect x="48.0263%" y="677" width="3.1333%" height="15" fill="rgb(234,221,29)" fg:x="72500" fg:w="4730"/><text x="48.2763%" y="687.50">tre..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,730 samples, 3.13%)</title><rect x="48.0263%" y="661" width="3.1333%" height="15" fill="rgb(229,136,5)" fg:x="72500" fg:w="4730"/><text x="48.2763%" y="671.50">&lt;co..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_data::{{closure}} (4,730 samples, 3.13%)</title><rect x="48.0263%" y="645" width="3.1333%" height="15" fill="rgb(238,36,11)" fg:x="72500" fg:w="4730"/><text x="48.2763%" y="655.50">tre..</text></g><g><title>tremor_runtime::connectors::source::build_events (3,631 samples, 2.41%)</title><rect x="48.7543%" y="629" width="2.4053%" height="15" fill="rgb(251,55,41)" fg:x="73599" fg:w="3631"/><text x="49.0043%" y="639.50">tr..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::run::{{closure}} (4,735 samples, 3.14%)</title><rect x="48.0263%" y="709" width="3.1366%" height="15" fill="rgb(242,34,40)" fg:x="72500" fg:w="4735"/><text x="48.2763%" y="719.50">tre..</text></g><g><title>core::cell::Cell&lt;T&gt;::replace (22 samples, 0.01%)</title><rect x="51.2437%" y="597" width="0.0146%" height="15" fill="rgb(215,42,17)" fg:x="77357" fg:w="22"/><text x="51.4937%" y="607.50"></text></g><g><title>core::mem::replace (22 samples, 0.01%)</title><rect x="51.2437%" y="581" width="0.0146%" height="15" fill="rgb(207,44,46)" fg:x="77357" fg:w="22"/><text x="51.4937%" y="591.50"></text></g><g><title>core::ptr::read (22 samples, 0.01%)</title><rect x="51.2437%" y="565" width="0.0146%" height="15" fill="rgb(211,206,28)" fg:x="77357" fg:w="22"/><text x="51.4937%" y="575.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (207 samples, 0.14%)</title><rect x="51.2934%" y="581" width="0.1371%" height="15" fill="rgb(237,167,16)" fg:x="77432" fg:w="207"/><text x="51.5434%" y="591.50"></text></g><g><title>core::mem::replace (207 samples, 0.14%)</title><rect x="51.2934%" y="565" width="0.1371%" height="15" fill="rgb(233,66,6)" fg:x="77432" fg:w="207"/><text x="51.5434%" y="575.50"></text></g><g><title>core::ptr::read (206 samples, 0.14%)</title><rect x="51.2941%" y="549" width="0.1365%" height="15" fill="rgb(246,123,29)" fg:x="77433" fg:w="206"/><text x="51.5441%" y="559.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (300 samples, 0.20%)</title><rect x="51.2583%" y="597" width="0.1987%" height="15" fill="rgb(209,62,40)" fg:x="77379" fg:w="300"/><text x="51.5083%" y="607.50"></text></g><g><title>core::mem::drop (40 samples, 0.03%)</title><rect x="51.4305%" y="581" width="0.0265%" height="15" fill="rgb(218,4,25)" fg:x="77639" fg:w="40"/><text x="51.6805%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (40 samples, 0.03%)</title><rect x="51.4305%" y="565" width="0.0265%" height="15" fill="rgb(253,91,49)" fg:x="77639" fg:w="40"/><text x="51.6805%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (231 samples, 0.15%)</title><rect x="51.4570%" y="597" width="0.1530%" height="15" fill="rgb(228,155,29)" fg:x="77679" fg:w="231"/><text x="51.7070%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (221 samples, 0.15%)</title><rect x="51.4636%" y="581" width="0.1464%" height="15" fill="rgb(243,57,37)" fg:x="77689" fg:w="221"/><text x="51.7136%" y="591.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (221 samples, 0.15%)</title><rect x="51.4636%" y="565" width="0.1464%" height="15" fill="rgb(244,167,17)" fg:x="77689" fg:w="221"/><text x="51.7136%" y="575.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (196 samples, 0.13%)</title><rect x="51.4802%" y="549" width="0.1298%" height="15" fill="rgb(207,181,38)" fg:x="77714" fg:w="196"/><text x="51.7302%" y="559.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (196 samples, 0.13%)</title><rect x="51.4802%" y="533" width="0.1298%" height="15" fill="rgb(211,8,23)" fg:x="77714" fg:w="196"/><text x="51.7302%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (196 samples, 0.13%)</title><rect x="51.4802%" y="517" width="0.1298%" height="15" fill="rgb(235,11,44)" fg:x="77714" fg:w="196"/><text x="51.7302%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_swap (196 samples, 0.13%)</title><rect x="51.4802%" y="501" width="0.1298%" height="15" fill="rgb(248,18,52)" fg:x="77714" fg:w="196"/><text x="51.7302%" y="511.50"></text></g><g><title>core::task::wake::Waker::will_wake (30 samples, 0.02%)</title><rect x="51.6147%" y="597" width="0.0199%" height="15" fill="rgb(208,4,7)" fg:x="77917" fg:w="30"/><text x="51.8647%" y="607.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (30 samples, 0.02%)</title><rect x="51.6147%" y="581" width="0.0199%" height="15" fill="rgb(240,17,39)" fg:x="77917" fg:w="30"/><text x="51.8647%" y="591.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (30 samples, 0.02%)</title><rect x="51.6147%" y="565" width="0.0199%" height="15" fill="rgb(207,170,3)" fg:x="77917" fg:w="30"/><text x="51.8647%" y="575.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (30 samples, 0.02%)</title><rect x="51.6147%" y="549" width="0.0199%" height="15" fill="rgb(236,100,52)" fg:x="77917" fg:w="30"/><text x="51.8647%" y="559.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (16 samples, 0.01%)</title><rect x="51.6398%" y="565" width="0.0106%" height="15" fill="rgb(246,78,51)" fg:x="77955" fg:w="16"/><text x="51.8898%" y="575.50"></text></g><g><title>std::sync::poison::Flag::borrow (16 samples, 0.01%)</title><rect x="51.6398%" y="549" width="0.0106%" height="15" fill="rgb(211,17,15)" fg:x="77955" fg:w="16"/><text x="51.8898%" y="559.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (1,658 samples, 1.10%)</title><rect x="51.1795%" y="613" width="1.0983%" height="15" fill="rgb(209,59,46)" fg:x="77260" fg:w="1658"/><text x="51.4295%" y="623.50"></text></g><g><title>event_listener::Inner::lock (971 samples, 0.64%)</title><rect x="51.6345%" y="597" width="0.6432%" height="15" fill="rgb(210,92,25)" fg:x="77947" fg:w="971"/><text x="51.8845%" y="607.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (963 samples, 0.64%)</title><rect x="51.6398%" y="581" width="0.6379%" height="15" fill="rgb(238,174,52)" fg:x="77955" fg:w="963"/><text x="51.8898%" y="591.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (947 samples, 0.63%)</title><rect x="51.6504%" y="565" width="0.6273%" height="15" fill="rgb(230,73,7)" fg:x="77971" fg:w="947"/><text x="51.9004%" y="575.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (947 samples, 0.63%)</title><rect x="51.6504%" y="549" width="0.6273%" height="15" fill="rgb(243,124,40)" fg:x="77971" fg:w="947"/><text x="51.9004%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (947 samples, 0.63%)</title><rect x="51.6504%" y="533" width="0.6273%" height="15" fill="rgb(244,170,11)" fg:x="77971" fg:w="947"/><text x="51.9004%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (947 samples, 0.63%)</title><rect x="51.6504%" y="517" width="0.6273%" height="15" fill="rgb(207,114,54)" fg:x="77971" fg:w="947"/><text x="51.9004%" y="527.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,693 samples, 1.12%)</title><rect x="51.1629%" y="693" width="1.1215%" height="15" fill="rgb(205,42,20)" fg:x="77235" fg:w="1693"/><text x="51.4129%" y="703.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (1,693 samples, 1.12%)</title><rect x="51.1629%" y="677" width="1.1215%" height="15" fill="rgb(230,30,28)" fg:x="77235" fg:w="1693"/><text x="51.4129%" y="687.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (1,693 samples, 1.12%)</title><rect x="51.1629%" y="661" width="1.1215%" height="15" fill="rgb(205,73,54)" fg:x="77235" fg:w="1693"/><text x="51.4129%" y="671.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (1,693 samples, 1.12%)</title><rect x="51.1629%" y="645" width="1.1215%" height="15" fill="rgb(254,227,23)" fg:x="77235" fg:w="1693"/><text x="51.4129%" y="655.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (1,693 samples, 1.12%)</title><rect x="51.1629%" y="629" width="1.1215%" height="15" fill="rgb(228,202,34)" fg:x="77235" fg:w="1693"/><text x="51.4129%" y="639.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (10,258 samples, 6.80%)</title><rect x="45.4898%" y="885" width="6.7952%" height="15" fill="rgb(222,225,37)" fg:x="68671" fg:w="10258"/><text x="45.7398%" y="895.50">async_tas..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (10,255 samples, 6.79%)</title><rect x="45.4918%" y="869" width="6.7932%" height="15" fill="rgb(221,14,54)" fg:x="68674" fg:w="10255"/><text x="45.7418%" y="879.50">&lt;core::pi..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,255 samples, 6.79%)</title><rect x="45.4918%" y="853" width="6.7932%" height="15" fill="rgb(254,102,2)" fg:x="68674" fg:w="10255"/><text x="45.7418%" y="863.50">&lt;core::fu..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (10,255 samples, 6.79%)</title><rect x="45.4918%" y="837" width="6.7932%" height="15" fill="rgb(232,104,17)" fg:x="68674" fg:w="10255"/><text x="45.7418%" y="847.50">async_exe..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (10,255 samples, 6.79%)</title><rect x="45.4918%" y="821" width="6.7932%" height="15" fill="rgb(250,220,14)" fg:x="68674" fg:w="10255"/><text x="45.7418%" y="831.50">&lt;async_st..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (10,255 samples, 6.79%)</title><rect x="45.4918%" y="805" width="6.7932%" height="15" fill="rgb(241,158,9)" fg:x="68674" fg:w="10255"/><text x="45.7418%" y="815.50">async_std..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (10,255 samples, 6.79%)</title><rect x="45.4918%" y="789" width="6.7932%" height="15" fill="rgb(246,9,43)" fg:x="68674" fg:w="10255"/><text x="45.7418%" y="799.50">std::thre..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (10,255 samples, 6.79%)</title><rect x="45.4918%" y="773" width="6.7932%" height="15" fill="rgb(206,73,33)" fg:x="68674" fg:w="10255"/><text x="45.7418%" y="783.50">std::thre..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (10,255 samples, 6.79%)</title><rect x="45.4918%" y="757" width="6.7932%" height="15" fill="rgb(222,79,8)" fg:x="68674" fg:w="10255"/><text x="45.7418%" y="767.50">async_std..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (10,255 samples, 6.79%)</title><rect x="45.4918%" y="741" width="6.7932%" height="15" fill="rgb(234,8,54)" fg:x="68674" fg:w="10255"/><text x="45.7418%" y="751.50">&lt;async_st..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,255 samples, 6.79%)</title><rect x="45.4918%" y="725" width="6.7932%" height="15" fill="rgb(209,134,38)" fg:x="68674" fg:w="10255"/><text x="45.7418%" y="735.50">&lt;core::fu..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (1,694 samples, 1.12%)</title><rect x="51.1629%" y="709" width="1.1222%" height="15" fill="rgb(230,127,29)" fg:x="77235" fg:w="1694"/><text x="51.4129%" y="719.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (19 samples, 0.01%)</title><rect x="52.3003%" y="885" width="0.0126%" height="15" fill="rgb(242,44,41)" fg:x="78952" fg:w="19"/><text x="52.5503%" y="895.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (23 samples, 0.02%)</title><rect x="52.3182%" y="885" width="0.0152%" height="15" fill="rgb(222,56,43)" fg:x="78979" fg:w="23"/><text x="52.5682%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_channel::Send&lt;alloc::boxed::Box&lt;tremor_runtime::pipeline::Msg&gt;&gt;&gt; (18 samples, 0.01%)</title><rect x="52.3341%" y="885" width="0.0119%" height="15" fill="rgb(238,39,47)" fg:x="79003" fg:w="18"/><text x="52.5841%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager&lt;tremor_runtime::connectors::impls::bench::Blaster&gt;::handle_data::{{closure}}&gt;&gt; (63 samples, 0.04%)</title><rect x="52.3533%" y="885" width="0.0417%" height="15" fill="rgb(226,79,43)" fg:x="79032" fg:w="63"/><text x="52.6033%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::source::SourceManager&lt;tremor_runtime::connectors::impls::bench::Blaster&gt;::handle_data::{{closure}}&gt; (46 samples, 0.03%)</title><rect x="52.3645%" y="869" width="0.0305%" height="15" fill="rgb(242,105,53)" fg:x="79049" fg:w="46"/><text x="52.6145%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager&lt;tremor_runtime::connectors::impls::cb::CbSource&gt;::route_events::{{closure}}&gt;&gt; (22 samples, 0.01%)</title><rect x="52.4043%" y="885" width="0.0146%" height="15" fill="rgb(251,132,46)" fg:x="79109" fg:w="22"/><text x="52.6543%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt;&gt; (18 samples, 0.01%)</title><rect x="52.4189%" y="885" width="0.0119%" height="15" fill="rgb(231,77,14)" fg:x="79131" fg:w="18"/><text x="52.6689%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::send_events::{{closure}}&gt;&gt; (23 samples, 0.02%)</title><rect x="52.4308%" y="885" width="0.0152%" height="15" fill="rgb(240,135,9)" fg:x="79149" fg:w="23"/><text x="52.6808%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (64 samples, 0.04%)</title><rect x="52.4573%" y="885" width="0.0424%" height="15" fill="rgb(248,109,14)" fg:x="79189" fg:w="64"/><text x="52.7073%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::vecmap::VecMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (31 samples, 0.02%)</title><rect x="52.4791%" y="869" width="0.0205%" height="15" fill="rgb(227,146,52)" fg:x="79222" fg:w="31"/><text x="52.7291%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)&gt;&gt; (31 samples, 0.02%)</title><rect x="52.4791%" y="853" width="0.0205%" height="15" fill="rgb(232,54,3)" fg:x="79222" fg:w="31"/><text x="52.7291%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.02%)</title><rect x="52.4791%" y="837" width="0.0205%" height="15" fill="rgb(229,201,43)" fg:x="79222" fg:w="31"/><text x="52.7291%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)]&gt; (31 samples, 0.02%)</title><rect x="52.4791%" y="821" width="0.0205%" height="15" fill="rgb(252,161,33)" fg:x="79222" fg:w="31"/><text x="52.7291%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)&gt; (31 samples, 0.02%)</title><rect x="52.4791%" y="805" width="0.0205%" height="15" fill="rgb(226,146,40)" fg:x="79222" fg:w="31"/><text x="52.7291%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (23 samples, 0.02%)</title><rect x="52.4997%" y="885" width="0.0152%" height="15" fill="rgb(219,47,25)" fg:x="79253" fg:w="23"/><text x="52.7497%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (52 samples, 0.03%)</title><rect x="52.5235%" y="885" width="0.0344%" height="15" fill="rgb(250,135,13)" fg:x="79289" fg:w="52"/><text x="52.7735%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (28 samples, 0.02%)</title><rect x="52.5394%" y="869" width="0.0185%" height="15" fill="rgb(219,229,18)" fg:x="79313" fg:w="28"/><text x="52.7894%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (158 samples, 0.10%)</title><rect x="52.5653%" y="869" width="0.1047%" height="15" fill="rgb(217,152,27)" fg:x="79352" fg:w="158"/><text x="52.8153%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (170 samples, 0.11%)</title><rect x="52.5580%" y="885" width="0.1126%" height="15" fill="rgb(225,71,47)" fg:x="79341" fg:w="170"/><text x="52.8080%" y="895.50"></text></g><g><title>event_listener::Event::notify (56 samples, 0.04%)</title><rect x="52.6785%" y="885" width="0.0371%" height="15" fill="rgb(220,139,14)" fg:x="79523" fg:w="56"/><text x="52.9285%" y="895.50"></text></g><g><title>event_listener::full_fence (30 samples, 0.02%)</title><rect x="52.6958%" y="869" width="0.0199%" height="15" fill="rgb(247,54,32)" fg:x="79549" fg:w="30"/><text x="52.9458%" y="879.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::insert_nocheck (112 samples, 0.07%)</title><rect x="52.7183%" y="885" width="0.0742%" height="15" fill="rgb(252,131,39)" fg:x="79583" fg:w="112"/><text x="52.9683%" y="895.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (23 samples, 0.02%)</title><rect x="52.7925%" y="885" width="0.0152%" height="15" fill="rgb(210,108,39)" fg:x="79695" fg:w="23"/><text x="53.0425%" y="895.50"></text></g><g><title>parking::Inner::park (24 samples, 0.02%)</title><rect x="52.8077%" y="885" width="0.0159%" height="15" fill="rgb(205,23,29)" fg:x="79718" fg:w="24"/><text x="53.0577%" y="895.50"></text></g><g><title>polling::epoll::Poller::wait (29 samples, 0.02%)</title><rect x="52.8296%" y="885" width="0.0192%" height="15" fill="rgb(246,139,46)" fg:x="79751" fg:w="29"/><text x="53.0796%" y="895.50"></text></g><g><title>simd_json::stage2::&lt;impl simd_json::Deserializer&gt;::build_tape (46 samples, 0.03%)</title><rect x="52.8521%" y="885" width="0.0305%" height="15" fill="rgb(250,81,26)" fg:x="79785" fg:w="46"/><text x="53.1021%" y="895.50"></text></g><g><title>sn_rust_alloc (116 samples, 0.08%)</title><rect x="52.8826%" y="885" width="0.0768%" height="15" fill="rgb(214,104,7)" fg:x="79831" fg:w="116"/><text x="53.1326%" y="895.50"></text></g><g><title>sn_rust_dealloc (22 samples, 0.01%)</title><rect x="52.9594%" y="885" width="0.0146%" height="15" fill="rgb(233,189,8)" fg:x="79947" fg:w="22"/><text x="53.2094%" y="895.50"></text></g><g><title>sn_rust_realloc (20 samples, 0.01%)</title><rect x="52.9740%" y="885" width="0.0132%" height="15" fill="rgb(228,141,17)" fg:x="79969" fg:w="20"/><text x="53.2240%" y="895.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (35 samples, 0.02%)</title><rect x="52.9978%" y="885" width="0.0232%" height="15" fill="rgb(247,157,1)" fg:x="80005" fg:w="35"/><text x="53.2478%" y="895.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (50 samples, 0.03%)</title><rect x="53.0343%" y="885" width="0.0331%" height="15" fill="rgb(249,225,5)" fg:x="80060" fg:w="50"/><text x="53.2843%" y="895.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (25 samples, 0.02%)</title><rect x="53.1018%" y="661" width="0.0166%" height="15" fill="rgb(242,55,13)" fg:x="80162" fg:w="25"/><text x="53.3518%" y="671.50"></text></g><g><title>sn_rust_dealloc (32 samples, 0.02%)</title><rect x="53.3913%" y="501" width="0.0212%" height="15" fill="rgb(230,49,50)" fg:x="80599" fg:w="32"/><text x="53.6413%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (78 samples, 0.05%)</title><rect x="53.3854%" y="565" width="0.0517%" height="15" fill="rgb(241,111,38)" fg:x="80590" fg:w="78"/><text x="53.6354%" y="575.50"></text></g><g><title>alloc::alloc::dealloc (78 samples, 0.05%)</title><rect x="53.3854%" y="549" width="0.0517%" height="15" fill="rgb(252,155,4)" fg:x="80590" fg:w="78"/><text x="53.6354%" y="559.50"></text></g><g><title>__rg_dealloc (78 samples, 0.05%)</title><rect x="53.3854%" y="533" width="0.0517%" height="15" fill="rgb(212,69,32)" fg:x="80590" fg:w="78"/><text x="53.6354%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (78 samples, 0.05%)</title><rect x="53.3854%" y="517" width="0.0517%" height="15" fill="rgb(243,107,47)" fg:x="80590" fg:w="78"/><text x="53.6354%" y="527.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (37 samples, 0.02%)</title><rect x="53.4125%" y="501" width="0.0245%" height="15" fill="rgb(247,130,12)" fg:x="80631" fg:w="37"/><text x="53.6625%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::ValueDeserializer&gt; (92 samples, 0.06%)</title><rect x="53.3801%" y="645" width="0.0609%" height="15" fill="rgb(233,74,16)" fg:x="80582" fg:w="92"/><text x="53.6301%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;simd_json::Deserializer&gt; (92 samples, 0.06%)</title><rect x="53.3801%" y="629" width="0.0609%" height="15" fill="rgb(208,58,18)" fg:x="80582" fg:w="92"/><text x="53.6301%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;simd_json::value::tape::Node&gt;&gt; (92 samples, 0.06%)</title><rect x="53.3801%" y="613" width="0.0609%" height="15" fill="rgb(242,225,1)" fg:x="80582" fg:w="92"/><text x="53.6301%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simd_json::value::tape::Node&gt;&gt; (92 samples, 0.06%)</title><rect x="53.3801%" y="597" width="0.0609%" height="15" fill="rgb(249,39,40)" fg:x="80582" fg:w="92"/><text x="53.6301%" y="607.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (92 samples, 0.06%)</title><rect x="53.3801%" y="581" width="0.0609%" height="15" fill="rgb(207,72,44)" fg:x="80582" fg:w="92"/><text x="53.6301%" y="591.50"></text></g><g><title>simd_json::Deserializer::next_ (180 samples, 0.12%)</title><rect x="53.4496%" y="629" width="0.1192%" height="15" fill="rgb(215,193,12)" fg:x="80687" fg:w="180"/><text x="53.6996%" y="639.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (91 samples, 0.06%)</title><rect x="53.7656%" y="613" width="0.0603%" height="15" fill="rgb(248,41,39)" fg:x="81164" fg:w="91"/><text x="54.0156%" y="623.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::convert::From&lt;&amp;T&gt;&gt;::from (91 samples, 0.06%)</title><rect x="53.7656%" y="597" width="0.0603%" height="15" fill="rgb(253,85,4)" fg:x="81164" fg:w="91"/><text x="54.0156%" y="607.50"></text></g><g><title>beef::generic::Cow&lt;T,U&gt;::borrowed (91 samples, 0.06%)</title><rect x="53.7656%" y="581" width="0.0603%" height="15" fill="rgb(243,70,31)" fg:x="81164" fg:w="91"/><text x="54.0156%" y="591.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (96 samples, 0.06%)</title><rect x="53.8259%" y="613" width="0.0636%" height="15" fill="rgb(253,195,26)" fg:x="81255" fg:w="96"/><text x="54.0759%" y="623.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (96 samples, 0.06%)</title><rect x="53.8259%" y="597" width="0.0636%" height="15" fill="rgb(243,42,11)" fg:x="81255" fg:w="96"/><text x="54.0759%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (91 samples, 0.06%)</title><rect x="53.8292%" y="581" width="0.0603%" height="15" fill="rgb(239,66,17)" fg:x="81260" fg:w="91"/><text x="54.0792%" y="591.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::insert_nocheck (93 samples, 0.06%)</title><rect x="53.8895%" y="613" width="0.0616%" height="15" fill="rgb(217,132,21)" fg:x="81351" fg:w="93"/><text x="54.1395%" y="623.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (820 samples, 0.54%)</title><rect x="54.1034%" y="421" width="0.5432%" height="15" fill="rgb(252,202,21)" fg:x="81674" fg:w="820"/><text x="54.3534%" y="431.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (49 samples, 0.03%)</title><rect x="54.6466%" y="421" width="0.0325%" height="15" fill="rgb(233,98,36)" fg:x="82494" fg:w="49"/><text x="54.8966%" y="431.50"></text></g><g><title>halfbrown::HashMap&lt;K,V&gt;::with_capacity (1,160 samples, 0.77%)</title><rect x="53.9511%" y="613" width="0.7684%" height="15" fill="rgb(216,153,54)" fg:x="81444" fg:w="1160"/><text x="54.2011%" y="623.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V&gt;::with_capacity (1,147 samples, 0.76%)</title><rect x="53.9597%" y="597" width="0.7598%" height="15" fill="rgb(250,99,7)" fg:x="81457" fg:w="1147"/><text x="54.2097%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,147 samples, 0.76%)</title><rect x="53.9597%" y="581" width="0.7598%" height="15" fill="rgb(207,56,50)" fg:x="81457" fg:w="1147"/><text x="54.2097%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,147 samples, 0.76%)</title><rect x="53.9597%" y="565" width="0.7598%" height="15" fill="rgb(244,61,34)" fg:x="81457" fg:w="1147"/><text x="54.2097%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,147 samples, 0.76%)</title><rect x="53.9597%" y="549" width="0.7598%" height="15" fill="rgb(241,50,38)" fg:x="81457" fg:w="1147"/><text x="54.2097%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,147 samples, 0.76%)</title><rect x="53.9597%" y="533" width="0.7598%" height="15" fill="rgb(212,166,30)" fg:x="81457" fg:w="1147"/><text x="54.2097%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,146 samples, 0.76%)</title><rect x="53.9603%" y="517" width="0.7591%" height="15" fill="rgb(249,127,32)" fg:x="81458" fg:w="1146"/><text x="54.2103%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,146 samples, 0.76%)</title><rect x="53.9603%" y="501" width="0.7591%" height="15" fill="rgb(209,103,0)" fg:x="81458" fg:w="1146"/><text x="54.2103%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1,142 samples, 0.76%)</title><rect x="53.9630%" y="485" width="0.7565%" height="15" fill="rgb(238,209,51)" fg:x="81462" fg:w="1142"/><text x="54.2130%" y="495.50"></text></g><g><title>__rg_alloc (1,142 samples, 0.76%)</title><rect x="53.9630%" y="469" width="0.7565%" height="15" fill="rgb(237,56,23)" fg:x="81462" fg:w="1142"/><text x="54.2130%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1,142 samples, 0.76%)</title><rect x="53.9630%" y="453" width="0.7565%" height="15" fill="rgb(215,153,46)" fg:x="81462" fg:w="1142"/><text x="54.2130%" y="463.50"></text></g><g><title>sn_rust_alloc (1,136 samples, 0.75%)</title><rect x="53.9670%" y="437" width="0.7525%" height="15" fill="rgb(224,49,31)" fg:x="81468" fg:w="1136"/><text x="54.2170%" y="447.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (61 samples, 0.04%)</title><rect x="54.6791%" y="421" width="0.0404%" height="15" fill="rgb(250,18,42)" fg:x="82543" fg:w="61"/><text x="54.9291%" y="431.50"></text></g><g><title>simd_json::Deserializer::next_ (286 samples, 0.19%)</title><rect x="54.7195%" y="613" width="0.1895%" height="15" fill="rgb(215,176,39)" fg:x="82604" fg:w="286"/><text x="54.9695%" y="623.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (104 samples, 0.07%)</title><rect x="54.9089%" y="613" width="0.0689%" height="15" fill="rgb(223,77,29)" fg:x="82890" fg:w="104"/><text x="55.1589%" y="623.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::decode (3,258 samples, 2.16%)</title><rect x="53.0760%" y="677" width="2.1582%" height="15" fill="rgb(234,94,52)" fg:x="80123" fg:w="3258"/><text x="53.3260%" y="687.50">&lt;..</text></g><g><title>tremor_value::value::parse_to_value_with_buffers (3,194 samples, 2.12%)</title><rect x="53.1184%" y="661" width="2.1158%" height="15" fill="rgb(220,154,50)" fg:x="80187" fg:w="3194"/><text x="53.3684%" y="671.50">t..</text></g><g><title>tremor_value::value::ValueDeserializer::parse (2,701 samples, 1.79%)</title><rect x="53.4450%" y="645" width="1.7892%" height="15" fill="rgb(212,11,10)" fg:x="80680" fg:w="2701"/><text x="53.6950%" y="655.50">t..</text></g><g><title>tremor_value::value::ValueDeserializer::parse_map (2,514 samples, 1.67%)</title><rect x="53.5688%" y="629" width="1.6654%" height="15" fill="rgb(205,166,19)" fg:x="80867" fg:w="2514"/><text x="53.8188%" y="639.50"></text></g><g><title>tremor_value::value::from::&lt;impl core::convert::From&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; for tremor_value::value::Value&gt;::from (387 samples, 0.26%)</title><rect x="54.9778%" y="613" width="0.2564%" height="15" fill="rgb(244,198,16)" fg:x="82994" fg:w="387"/><text x="55.2278%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (137 samples, 0.09%)</title><rect x="55.1434%" y="597" width="0.0908%" height="15" fill="rgb(219,69,12)" fg:x="83244" fg:w="137"/><text x="55.3934%" y="607.50"></text></g><g><title>alloc::alloc::exchange_malloc (131 samples, 0.09%)</title><rect x="55.1474%" y="581" width="0.0868%" height="15" fill="rgb(245,30,7)" fg:x="83250" fg:w="131"/><text x="55.3974%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (131 samples, 0.09%)</title><rect x="55.1474%" y="565" width="0.0868%" height="15" fill="rgb(218,221,48)" fg:x="83250" fg:w="131"/><text x="55.3974%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (131 samples, 0.09%)</title><rect x="55.1474%" y="549" width="0.0868%" height="15" fill="rgb(216,66,15)" fg:x="83250" fg:w="131"/><text x="55.3974%" y="559.50"></text></g><g><title>alloc::alloc::alloc (124 samples, 0.08%)</title><rect x="55.1521%" y="533" width="0.0821%" height="15" fill="rgb(226,122,50)" fg:x="83257" fg:w="124"/><text x="55.4021%" y="543.50"></text></g><g><title>__rg_alloc (124 samples, 0.08%)</title><rect x="55.1521%" y="517" width="0.0821%" height="15" fill="rgb(239,156,16)" fg:x="83257" fg:w="124"/><text x="55.4021%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (124 samples, 0.08%)</title><rect x="55.1521%" y="501" width="0.0821%" height="15" fill="rgb(224,27,38)" fg:x="83257" fg:w="124"/><text x="55.4021%" y="511.50"></text></g><g><title>sn_rust_alloc (124 samples, 0.08%)</title><rect x="55.1521%" y="485" width="0.0821%" height="15" fill="rgb(224,39,27)" fg:x="83257" fg:w="124"/><text x="55.4021%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (81 samples, 0.05%)</title><rect x="55.1805%" y="469" width="0.0537%" height="15" fill="rgb(215,92,29)" fg:x="83300" fg:w="81"/><text x="55.4305%" y="479.50"></text></g><g><title>&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (19 samples, 0.01%)</title><rect x="55.2342%" y="645" width="0.0126%" height="15" fill="rgb(207,159,16)" fg:x="83381" fg:w="19"/><text x="55.4842%" y="655.50"></text></g><g><title>&lt;halfbrown::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (19 samples, 0.01%)</title><rect x="55.2342%" y="629" width="0.0126%" height="15" fill="rgb(238,163,47)" fg:x="83381" fg:w="19"/><text x="55.4842%" y="639.50"></text></g><g><title>&lt;halfbrown::HashMapInt&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (19 samples, 0.01%)</title><rect x="55.2342%" y="613" width="0.0126%" height="15" fill="rgb(219,91,49)" fg:x="83381" fg:w="19"/><text x="55.4842%" y="623.50"></text></g><g><title>&lt;halfbrown::vecmap::VecMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (19 samples, 0.01%)</title><rect x="55.2342%" y="597" width="0.0126%" height="15" fill="rgb(227,167,31)" fg:x="83381" fg:w="19"/><text x="55.4842%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (19 samples, 0.01%)</title><rect x="55.2342%" y="581" width="0.0126%" height="15" fill="rgb(234,80,54)" fg:x="83381" fg:w="19"/><text x="55.4842%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (19 samples, 0.01%)</title><rect x="55.2342%" y="565" width="0.0126%" height="15" fill="rgb(212,114,2)" fg:x="83381" fg:w="19"/><text x="55.4842%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (19 samples, 0.01%)</title><rect x="55.2342%" y="549" width="0.0126%" height="15" fill="rgb(234,50,24)" fg:x="83381" fg:w="19"/><text x="55.4842%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (19 samples, 0.01%)</title><rect x="55.2342%" y="533" width="0.0126%" height="15" fill="rgb(221,68,8)" fg:x="83381" fg:w="19"/><text x="55.4842%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (17 samples, 0.01%)</title><rect x="55.2355%" y="517" width="0.0113%" height="15" fill="rgb(254,180,31)" fg:x="83383" fg:w="17"/><text x="55.4855%" y="527.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,333 samples, 2.21%)</title><rect x="53.0727%" y="789" width="2.2079%" height="15" fill="rgb(247,130,50)" fg:x="80118" fg:w="3333"/><text x="53.3227%" y="799.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_source_reply::{{closure}} (3,333 samples, 2.21%)</title><rect x="53.0727%" y="773" width="2.2079%" height="15" fill="rgb(211,109,4)" fg:x="80118" fg:w="3333"/><text x="53.3227%" y="783.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,333 samples, 2.21%)</title><rect x="53.0727%" y="757" width="2.2079%" height="15" fill="rgb(238,50,21)" fg:x="80118" fg:w="3333"/><text x="53.3227%" y="767.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_data::{{closure}} (3,333 samples, 2.21%)</title><rect x="53.0727%" y="741" width="2.2079%" height="15" fill="rgb(225,57,45)" fg:x="80118" fg:w="3333"/><text x="53.3227%" y="751.50">t..</text></g><g><title>tremor_runtime::connectors::source::build_events (3,329 samples, 2.21%)</title><rect x="53.0753%" y="725" width="2.2052%" height="15" fill="rgb(209,196,50)" fg:x="80122" fg:w="3329"/><text x="53.3253%" y="735.50">t..</text></g><g><title>tremor_script::srs::EventPayload::try_new (3,329 samples, 2.21%)</title><rect x="53.0753%" y="709" width="2.2052%" height="15" fill="rgb(242,140,13)" fg:x="80122" fg:w="3329"/><text x="53.3253%" y="719.50">t..</text></g><g><title>tremor_runtime::connectors::source::build_last_events::{{closure}} (3,328 samples, 2.20%)</title><rect x="53.0760%" y="693" width="2.2046%" height="15" fill="rgb(217,111,7)" fg:x="80123" fg:w="3328"/><text x="53.3260%" y="703.50">t..</text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (70 samples, 0.05%)</title><rect x="55.2342%" y="677" width="0.0464%" height="15" fill="rgb(253,193,51)" fg:x="83381" fg:w="70"/><text x="55.4842%" y="687.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (70 samples, 0.05%)</title><rect x="55.2342%" y="661" width="0.0464%" height="15" fill="rgb(252,70,29)" fg:x="83381" fg:w="70"/><text x="55.4842%" y="671.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (51 samples, 0.03%)</title><rect x="55.2468%" y="645" width="0.0338%" height="15" fill="rgb(232,127,12)" fg:x="83400" fg:w="51"/><text x="55.4968%" y="655.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (51 samples, 0.03%)</title><rect x="55.2468%" y="629" width="0.0338%" height="15" fill="rgb(211,180,21)" fg:x="83400" fg:w="51"/><text x="55.4968%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (51 samples, 0.03%)</title><rect x="55.2468%" y="613" width="0.0338%" height="15" fill="rgb(229,72,13)" fg:x="83400" fg:w="51"/><text x="55.4968%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (51 samples, 0.03%)</title><rect x="55.2468%" y="597" width="0.0338%" height="15" fill="rgb(240,211,49)" fg:x="83400" fg:w="51"/><text x="55.4968%" y="607.50"></text></g><g><title>alloc::alloc::alloc (51 samples, 0.03%)</title><rect x="55.2468%" y="581" width="0.0338%" height="15" fill="rgb(219,149,40)" fg:x="83400" fg:w="51"/><text x="55.4968%" y="591.50"></text></g><g><title>__rg_alloc (51 samples, 0.03%)</title><rect x="55.2468%" y="565" width="0.0338%" height="15" fill="rgb(210,127,46)" fg:x="83400" fg:w="51"/><text x="55.4968%" y="575.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (51 samples, 0.03%)</title><rect x="55.2468%" y="549" width="0.0338%" height="15" fill="rgb(220,106,7)" fg:x="83400" fg:w="51"/><text x="55.4968%" y="559.50"></text></g><g><title>sn_rust_alloc (51 samples, 0.03%)</title><rect x="55.2468%" y="533" width="0.0338%" height="15" fill="rgb(249,31,22)" fg:x="83400" fg:w="51"/><text x="55.4968%" y="543.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (51 samples, 0.03%)</title><rect x="55.2468%" y="517" width="0.0338%" height="15" fill="rgb(253,1,49)" fg:x="83400" fg:w="51"/><text x="55.4968%" y="527.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (18 samples, 0.01%)</title><rect x="55.2806%" y="485" width="0.0119%" height="15" fill="rgb(227,144,33)" fg:x="83451" fg:w="18"/><text x="55.5306%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (18 samples, 0.01%)</title><rect x="55.2806%" y="469" width="0.0119%" height="15" fill="rgb(249,163,44)" fg:x="83451" fg:w="18"/><text x="55.5306%" y="479.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_slabs&lt;false&gt; (18 samples, 0.01%)</title><rect x="55.2806%" y="453" width="0.0119%" height="15" fill="rgb(234,15,39)" fg:x="83451" fg:w="18"/><text x="55.5306%" y="463.50"></text></g><g><title>snmalloc::RBTree&lt;snmalloc::BuddyChunkRep&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt; &gt;, false, false&gt;::remove_min (22 samples, 0.01%)</title><rect x="55.2938%" y="453" width="0.0146%" height="15" fill="rgb(207,66,16)" fg:x="83471" fg:w="22"/><text x="55.5438%" y="463.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::run::{{closure}} (3,394 samples, 2.25%)</title><rect x="53.0727%" y="805" width="2.2483%" height="15" fill="rgb(233,112,24)" fg:x="80118" fg:w="3394"/><text x="53.3227%" y="815.50">t..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (61 samples, 0.04%)</title><rect x="55.2806%" y="789" width="0.0404%" height="15" fill="rgb(230,90,22)" fg:x="83451" fg:w="61"/><text x="55.5306%" y="799.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (61 samples, 0.04%)</title><rect x="55.2806%" y="773" width="0.0404%" height="15" fill="rgb(229,61,13)" fg:x="83451" fg:w="61"/><text x="55.5306%" y="783.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (61 samples, 0.04%)</title><rect x="55.2806%" y="757" width="0.0404%" height="15" fill="rgb(225,57,24)" fg:x="83451" fg:w="61"/><text x="55.5306%" y="767.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (61 samples, 0.04%)</title><rect x="55.2806%" y="741" width="0.0404%" height="15" fill="rgb(208,169,48)" fg:x="83451" fg:w="61"/><text x="55.5306%" y="751.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::Source&gt;::pull_data::{{closure}} (61 samples, 0.04%)</title><rect x="55.2806%" y="725" width="0.0404%" height="15" fill="rgb(244,218,51)" fg:x="83451" fg:w="61"/><text x="55.5306%" y="735.50"></text></g><g><title>tremor_runtime::connectors::impls::bench::Acc::next (61 samples, 0.04%)</title><rect x="55.2806%" y="709" width="0.0404%" height="15" fill="rgb(214,148,10)" fg:x="83451" fg:w="61"/><text x="55.5306%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (61 samples, 0.04%)</title><rect x="55.2806%" y="693" width="0.0404%" height="15" fill="rgb(225,174,27)" fg:x="83451" fg:w="61"/><text x="55.5306%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (61 samples, 0.04%)</title><rect x="55.2806%" y="677" width="0.0404%" height="15" fill="rgb(230,96,26)" fg:x="83451" fg:w="61"/><text x="55.5306%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (61 samples, 0.04%)</title><rect x="55.2806%" y="661" width="0.0404%" height="15" fill="rgb(232,10,30)" fg:x="83451" fg:w="61"/><text x="55.5306%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (61 samples, 0.04%)</title><rect x="55.2806%" y="645" width="0.0404%" height="15" fill="rgb(222,8,50)" fg:x="83451" fg:w="61"/><text x="55.5306%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (61 samples, 0.04%)</title><rect x="55.2806%" y="629" width="0.0404%" height="15" fill="rgb(213,81,27)" fg:x="83451" fg:w="61"/><text x="55.5306%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (61 samples, 0.04%)</title><rect x="55.2806%" y="613" width="0.0404%" height="15" fill="rgb(245,50,10)" fg:x="83451" fg:w="61"/><text x="55.5306%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (61 samples, 0.04%)</title><rect x="55.2806%" y="597" width="0.0404%" height="15" fill="rgb(216,100,18)" fg:x="83451" fg:w="61"/><text x="55.5306%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (61 samples, 0.04%)</title><rect x="55.2806%" y="581" width="0.0404%" height="15" fill="rgb(236,147,54)" fg:x="83451" fg:w="61"/><text x="55.5306%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (61 samples, 0.04%)</title><rect x="55.2806%" y="565" width="0.0404%" height="15" fill="rgb(205,143,26)" fg:x="83451" fg:w="61"/><text x="55.5306%" y="575.50"></text></g><g><title>alloc::alloc::alloc (61 samples, 0.04%)</title><rect x="55.2806%" y="549" width="0.0404%" height="15" fill="rgb(236,26,9)" fg:x="83451" fg:w="61"/><text x="55.5306%" y="559.50"></text></g><g><title>__rg_alloc (61 samples, 0.04%)</title><rect x="55.2806%" y="533" width="0.0404%" height="15" fill="rgb(221,165,53)" fg:x="83451" fg:w="61"/><text x="55.5306%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (61 samples, 0.04%)</title><rect x="55.2806%" y="517" width="0.0404%" height="15" fill="rgb(214,110,17)" fg:x="83451" fg:w="61"/><text x="55.5306%" y="527.50"></text></g><g><title>sn_rust_alloc (61 samples, 0.04%)</title><rect x="55.2806%" y="501" width="0.0404%" height="15" fill="rgb(237,197,12)" fg:x="83451" fg:w="61"/><text x="55.5306%" y="511.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (43 samples, 0.03%)</title><rect x="55.2925%" y="485" width="0.0285%" height="15" fill="rgb(205,84,17)" fg:x="83469" fg:w="43"/><text x="55.5425%" y="495.50"></text></g><g><title>snmalloc::BackendAllocator&lt;snmalloc::PALLinux, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::StandardLocalState&lt;snmalloc::PALLinux, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt;, 14ul&gt; &gt;::alloc_chunk (43 samples, 0.03%)</title><rect x="55.2925%" y="469" width="0.0285%" height="15" fill="rgb(237,18,45)" fg:x="83469" fg:w="43"/><text x="55.5425%" y="479.50"></text></g><g><title>snmalloc::SmallBuddyRange::Type&lt;snmalloc::LargeBuddyRange&lt;21ul, 21ul, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, 12ul&gt;::Type&lt;snmalloc::StatsRange::Type&lt;snmalloc::CommitRange&lt;snmalloc::PALLinux&gt;::Type&lt;snmalloc::GlobalRange::Type&lt;snmalloc::LogRange&lt;2ul&gt;::Type&lt;snmalloc::LargeBuddyRange&lt;24ul, 63ul, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, 14ul&gt;::Type&lt;snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::alloc_range (19 samples, 0.01%)</title><rect x="55.3084%" y="453" width="0.0126%" height="15" fill="rgb(221,87,14)" fg:x="83493" fg:w="19"/><text x="55.5584%" y="463.50"></text></g><g><title>snmalloc::RBTree&lt;snmalloc::BuddyInplaceRep&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt; &gt;, false, false&gt;::remove_min (16 samples, 0.01%)</title><rect x="55.3104%" y="437" width="0.0106%" height="15" fill="rgb(238,186,15)" fg:x="83496" fg:w="16"/><text x="55.5604%" y="447.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (51 samples, 0.03%)</title><rect x="55.3210%" y="789" width="0.0338%" height="15" fill="rgb(208,115,11)" fg:x="83512" fg:w="51"/><text x="55.5710%" y="799.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (51 samples, 0.03%)</title><rect x="55.3210%" y="773" width="0.0338%" height="15" fill="rgb(254,175,0)" fg:x="83512" fg:w="51"/><text x="55.5710%" y="783.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (51 samples, 0.03%)</title><rect x="55.3210%" y="757" width="0.0338%" height="15" fill="rgb(227,24,42)" fg:x="83512" fg:w="51"/><text x="55.5710%" y="767.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (51 samples, 0.03%)</title><rect x="55.3210%" y="741" width="0.0338%" height="15" fill="rgb(223,211,37)" fg:x="83512" fg:w="51"/><text x="55.5710%" y="751.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (51 samples, 0.03%)</title><rect x="55.3210%" y="725" width="0.0338%" height="15" fill="rgb(235,49,27)" fg:x="83512" fg:w="51"/><text x="55.5710%" y="735.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (51 samples, 0.03%)</title><rect x="55.3210%" y="709" width="0.0338%" height="15" fill="rgb(254,97,51)" fg:x="83512" fg:w="51"/><text x="55.5710%" y="719.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (51 samples, 0.03%)</title><rect x="55.3210%" y="693" width="0.0338%" height="15" fill="rgb(249,51,40)" fg:x="83512" fg:w="51"/><text x="55.5710%" y="703.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3,457 samples, 2.29%)</title><rect x="53.0674%" y="885" width="2.2900%" height="15" fill="rgb(210,128,45)" fg:x="80110" fg:w="3457"/><text x="53.3174%" y="895.50">s..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3,452 samples, 2.29%)</title><rect x="53.0707%" y="869" width="2.2867%" height="15" fill="rgb(224,137,50)" fg:x="80115" fg:w="3452"/><text x="53.3207%" y="879.50">s..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (3,452 samples, 2.29%)</title><rect x="53.0707%" y="853" width="2.2867%" height="15" fill="rgb(242,15,9)" fg:x="80115" fg:w="3452"/><text x="53.3207%" y="863.50">a..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (3,452 samples, 2.29%)</title><rect x="53.0707%" y="837" width="2.2867%" height="15" fill="rgb(233,187,41)" fg:x="80115" fg:w="3452"/><text x="53.3207%" y="847.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,452 samples, 2.29%)</title><rect x="53.0707%" y="821" width="2.2867%" height="15" fill="rgb(227,2,29)" fg:x="80115" fg:w="3452"/><text x="53.3207%" y="831.50">&lt;..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (55 samples, 0.04%)</title><rect x="55.3210%" y="805" width="0.0364%" height="15" fill="rgb(222,70,3)" fg:x="83512" fg:w="55"/><text x="55.5710%" y="815.50"></text></g><g><title>tremor_common::time::nanotime (29 samples, 0.02%)</title><rect x="55.3574%" y="885" width="0.0192%" height="15" fill="rgb(213,11,42)" fg:x="83567" fg:w="29"/><text x="55.6074%" y="895.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize_for_stream_with_codec (19 samples, 0.01%)</title><rect x="55.3766%" y="885" width="0.0126%" height="15" fill="rgb(225,150,9)" fg:x="83596" fg:w="19"/><text x="55.6266%" y="895.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::deref::Deref&gt;::deref (16 samples, 0.01%)</title><rect x="56.1000%" y="661" width="0.0106%" height="15" fill="rgb(230,162,45)" fg:x="84688" fg:w="16"/><text x="56.3500%" y="671.50"></text></g><g><title>beef::generic::Cow&lt;T,U&gt;::borrow (16 samples, 0.01%)</title><rect x="56.1000%" y="645" width="0.0106%" height="15" fill="rgb(222,14,52)" fg:x="84688" fg:w="16"/><text x="56.3500%" y="655.50"></text></g><g><title>[libc-2.31.so] (163 samples, 0.11%)</title><rect x="56.1106%" y="661" width="0.1080%" height="15" fill="rgb(254,198,14)" fg:x="84704" fg:w="163"/><text x="56.3606%" y="671.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_int (142 samples, 0.09%)</title><rect x="56.2186%" y="661" width="0.0941%" height="15" fill="rgb(220,217,30)" fg:x="84867" fg:w="142"/><text x="56.4686%" y="671.50"></text></g><g><title>itoa::write (142 samples, 0.09%)</title><rect x="56.2186%" y="645" width="0.0941%" height="15" fill="rgb(215,146,41)" fg:x="84867" fg:w="142"/><text x="56.4686%" y="655.50"></text></g><g><title>itoa::Buffer::format (142 samples, 0.09%)</title><rect x="56.2186%" y="629" width="0.0941%" height="15" fill="rgb(217,27,36)" fg:x="84867" fg:w="142"/><text x="56.4686%" y="639.50"></text></g><g><title>&lt;u64 as itoa::Integer&gt;::write (142 samples, 0.09%)</title><rect x="56.2186%" y="613" width="0.0941%" height="15" fill="rgb(219,218,39)" fg:x="84867" fg:w="142"/><text x="56.4686%" y="623.50"></text></g><g><title>&lt;u64 as itoa::IntegerPrivate&lt;[u8: _]&gt;&gt;::write_to (142 samples, 0.09%)</title><rect x="56.2186%" y="597" width="0.0941%" height="15" fill="rgb(219,4,42)" fg:x="84867" fg:w="142"/><text x="56.4686%" y="607.50"></text></g><g><title>&lt;value_trait::generator::WriterGenerator&lt;W,V&gt; as value_trait::generator::BaseGenerator&gt;::get_writer (17 samples, 0.01%)</title><rect x="56.3126%" y="629" width="0.0113%" height="15" fill="rgb(249,119,36)" fg:x="85009" fg:w="17"/><text x="56.5626%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (37 samples, 0.02%)</title><rect x="56.3491%" y="565" width="0.0245%" height="15" fill="rgb(209,23,33)" fg:x="85064" fg:w="37"/><text x="56.5991%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (36 samples, 0.02%)</title><rect x="56.3497%" y="549" width="0.0238%" height="15" fill="rgb(211,10,0)" fg:x="85065" fg:w="36"/><text x="56.5997%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (36 samples, 0.02%)</title><rect x="56.3497%" y="533" width="0.0238%" height="15" fill="rgb(208,99,37)" fg:x="85065" fg:w="36"/><text x="56.5997%" y="543.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_char (106 samples, 0.07%)</title><rect x="56.3126%" y="645" width="0.0702%" height="15" fill="rgb(213,132,31)" fg:x="85009" fg:w="106"/><text x="56.5626%" y="655.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (89 samples, 0.06%)</title><rect x="56.3239%" y="629" width="0.0590%" height="15" fill="rgb(243,129,40)" fg:x="85026" fg:w="89"/><text x="56.5739%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (89 samples, 0.06%)</title><rect x="56.3239%" y="613" width="0.0590%" height="15" fill="rgb(210,66,33)" fg:x="85026" fg:w="89"/><text x="56.5739%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (89 samples, 0.06%)</title><rect x="56.3239%" y="597" width="0.0590%" height="15" fill="rgb(209,189,4)" fg:x="85026" fg:w="89"/><text x="56.5739%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (89 samples, 0.06%)</title><rect x="56.3239%" y="581" width="0.0590%" height="15" fill="rgb(214,107,37)" fg:x="85026" fg:w="89"/><text x="56.5739%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (108 samples, 0.07%)</title><rect x="56.4994%" y="629" width="0.0715%" height="15" fill="rgb(245,88,54)" fg:x="85291" fg:w="108"/><text x="56.7494%" y="639.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (108 samples, 0.07%)</title><rect x="56.4994%" y="613" width="0.0715%" height="15" fill="rgb(205,146,20)" fg:x="85291" fg:w="108"/><text x="56.7494%" y="623.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (120 samples, 0.08%)</title><rect x="56.5710%" y="629" width="0.0795%" height="15" fill="rgb(220,161,25)" fg:x="85399" fg:w="120"/><text x="56.8210%" y="639.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (120 samples, 0.08%)</title><rect x="56.5710%" y="613" width="0.0795%" height="15" fill="rgb(215,152,15)" fg:x="85399" fg:w="120"/><text x="56.8210%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (120 samples, 0.08%)</title><rect x="56.5710%" y="597" width="0.0795%" height="15" fill="rgb(233,192,44)" fg:x="85399" fg:w="120"/><text x="56.8210%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (120 samples, 0.08%)</title><rect x="56.5710%" y="581" width="0.0795%" height="15" fill="rgb(240,170,46)" fg:x="85399" fg:w="120"/><text x="56.8210%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (120 samples, 0.08%)</title><rect x="56.5710%" y="565" width="0.0795%" height="15" fill="rgb(207,104,33)" fg:x="85399" fg:w="120"/><text x="56.8210%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (90 samples, 0.06%)</title><rect x="56.5909%" y="549" width="0.0596%" height="15" fill="rgb(219,21,39)" fg:x="85429" fg:w="90"/><text x="56.8409%" y="559.50"></text></g><g><title>[libc-2.31.so] (90 samples, 0.06%)</title><rect x="56.5909%" y="533" width="0.0596%" height="15" fill="rgb(214,133,29)" fg:x="85429" fg:w="90"/><text x="56.8409%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (87 samples, 0.06%)</title><rect x="56.6617%" y="549" width="0.0576%" height="15" fill="rgb(226,93,6)" fg:x="85536" fg:w="87"/><text x="56.9117%" y="559.50"></text></g><g><title>[libc-2.31.so] (49 samples, 0.03%)</title><rect x="56.6869%" y="533" width="0.0325%" height="15" fill="rgb(252,222,34)" fg:x="85574" fg:w="49"/><text x="56.9369%" y="543.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager&lt;S&gt;::run::{{closure}} (2,019 samples, 1.34%)</title><rect x="55.3892%" y="885" width="1.3374%" height="15" fill="rgb(252,92,48)" fg:x="83615" fg:w="2019"/><text x="55.6392%" y="895.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (2,019 samples, 1.34%)</title><rect x="55.3892%" y="869" width="1.3374%" height="15" fill="rgb(245,223,24)" fg:x="83615" fg:w="2019"/><text x="55.6392%" y="879.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,019 samples, 1.34%)</title><rect x="55.3892%" y="853" width="1.3374%" height="15" fill="rgb(205,176,3)" fg:x="83615" fg:w="2019"/><text x="55.6392%" y="863.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::Sink&gt;::on_event::{{closure}} (2,019 samples, 1.34%)</title><rect x="55.3892%" y="837" width="1.3374%" height="15" fill="rgb(235,151,15)" fg:x="83615" fg:w="2019"/><text x="55.6392%" y="847.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize (2,019 samples, 1.34%)</title><rect x="55.3892%" y="821" width="1.3374%" height="15" fill="rgb(237,209,11)" fg:x="83615" fg:w="2019"/><text x="55.6392%" y="831.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize_for_stream (2,019 samples, 1.34%)</title><rect x="55.3892%" y="805" width="1.3374%" height="15" fill="rgb(243,227,24)" fg:x="83615" fg:w="2019"/><text x="55.6392%" y="815.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize_for_stream_with_codec (2,019 samples, 1.34%)</title><rect x="55.3892%" y="789" width="1.3374%" height="15" fill="rgb(239,193,16)" fg:x="83615" fg:w="2019"/><text x="55.6392%" y="799.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode (2,019 samples, 1.34%)</title><rect x="55.3892%" y="773" width="1.3374%" height="15" fill="rgb(231,27,9)" fg:x="83615" fg:w="2019"/><text x="55.6392%" y="783.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode_into (2,019 samples, 1.34%)</title><rect x="55.3892%" y="757" width="1.3374%" height="15" fill="rgb(219,169,10)" fg:x="83615" fg:w="2019"/><text x="55.6392%" y="767.50"></text></g><g><title>tremor_value::value::serialize::&lt;impl value_trait::Writable for tremor_value::value::Value&gt;::write (2,019 samples, 1.34%)</title><rect x="55.3892%" y="741" width="1.3374%" height="15" fill="rgb(244,229,43)" fg:x="83615" fg:w="2019"/><text x="55.6392%" y="751.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (2,019 samples, 1.34%)</title><rect x="55.3892%" y="725" width="1.3374%" height="15" fill="rgb(254,38,20)" fg:x="83615" fg:w="2019"/><text x="55.6392%" y="735.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_object (2,019 samples, 1.34%)</title><rect x="55.3892%" y="709" width="1.3374%" height="15" fill="rgb(250,47,30)" fg:x="83615" fg:w="2019"/><text x="55.6392%" y="719.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (2,019 samples, 1.34%)</title><rect x="55.3892%" y="693" width="1.3374%" height="15" fill="rgb(224,124,36)" fg:x="83615" fg:w="2019"/><text x="55.6392%" y="703.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (2,019 samples, 1.34%)</title><rect x="55.3892%" y="677" width="1.3374%" height="15" fill="rgb(246,68,51)" fg:x="83615" fg:w="2019"/><text x="55.6392%" y="687.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string (625 samples, 0.41%)</title><rect x="56.3126%" y="661" width="0.4140%" height="15" fill="rgb(253,43,49)" fg:x="85009" fg:w="625"/><text x="56.5626%" y="671.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (519 samples, 0.34%)</title><rect x="56.3829%" y="645" width="0.3438%" height="15" fill="rgb(219,54,36)" fg:x="85115" fg:w="519"/><text x="56.6329%" y="655.50"></text></g><g><title>value_trait::generator::write_str_simd (115 samples, 0.08%)</title><rect x="56.6505%" y="629" width="0.0762%" height="15" fill="rgb(227,133,34)" fg:x="85519" fg:w="115"/><text x="56.9005%" y="639.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (106 samples, 0.07%)</title><rect x="56.6564%" y="613" width="0.0702%" height="15" fill="rgb(247,227,15)" fg:x="85528" fg:w="106"/><text x="56.9064%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (106 samples, 0.07%)</title><rect x="56.6564%" y="597" width="0.0702%" height="15" fill="rgb(229,96,14)" fg:x="85528" fg:w="106"/><text x="56.9064%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (106 samples, 0.07%)</title><rect x="56.6564%" y="581" width="0.0702%" height="15" fill="rgb(220,79,17)" fg:x="85528" fg:w="106"/><text x="56.9064%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (106 samples, 0.07%)</title><rect x="56.6564%" y="565" width="0.0702%" height="15" fill="rgb(205,131,53)" fg:x="85528" fg:w="106"/><text x="56.9064%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (16 samples, 0.01%)</title><rect x="56.7286%" y="789" width="0.0106%" height="15" fill="rgb(209,50,29)" fg:x="85637" fg:w="16"/><text x="56.9786%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (16 samples, 0.01%)</title><rect x="56.7286%" y="773" width="0.0106%" height="15" fill="rgb(245,86,46)" fg:x="85637" fg:w="16"/><text x="56.9786%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (16 samples, 0.01%)</title><rect x="56.7286%" y="757" width="0.0106%" height="15" fill="rgb(235,66,46)" fg:x="85637" fg:w="16"/><text x="56.9786%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (16 samples, 0.01%)</title><rect x="56.7286%" y="741" width="0.0106%" height="15" fill="rgb(232,148,31)" fg:x="85637" fg:w="16"/><text x="56.9786%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16 samples, 0.01%)</title><rect x="56.7286%" y="725" width="0.0106%" height="15" fill="rgb(217,149,8)" fg:x="85637" fg:w="16"/><text x="56.9786%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 0.01%)</title><rect x="56.7286%" y="709" width="0.0106%" height="15" fill="rgb(209,183,11)" fg:x="85637" fg:w="16"/><text x="56.9786%" y="719.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.01%)</title><rect x="56.7286%" y="693" width="0.0106%" height="15" fill="rgb(208,55,20)" fg:x="85637" fg:w="16"/><text x="56.9786%" y="703.50"></text></g><g><title>__rg_alloc (16 samples, 0.01%)</title><rect x="56.7286%" y="677" width="0.0106%" height="15" fill="rgb(218,39,14)" fg:x="85637" fg:w="16"/><text x="56.9786%" y="687.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (16 samples, 0.01%)</title><rect x="56.7286%" y="661" width="0.0106%" height="15" fill="rgb(216,169,33)" fg:x="85637" fg:w="16"/><text x="56.9786%" y="671.50"></text></g><g><title>sn_rust_alloc (16 samples, 0.01%)</title><rect x="56.7286%" y="645" width="0.0106%" height="15" fill="rgb(233,80,24)" fg:x="85637" fg:w="16"/><text x="56.9786%" y="655.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (18 samples, 0.01%)</title><rect x="56.8221%" y="709" width="0.0119%" height="15" fill="rgb(213,179,31)" fg:x="85778" fg:w="18"/><text x="57.0721%" y="719.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::clone_from_slice (278 samples, 0.18%)</title><rect x="56.8373%" y="709" width="0.1842%" height="15" fill="rgb(209,19,5)" fg:x="85801" fg:w="278"/><text x="57.0873%" y="719.50"></text></g><g><title>&lt;[T] as core::slice::CloneFromSpec&lt;T&gt;&gt;::spec_clone_from (278 samples, 0.18%)</title><rect x="56.8373%" y="693" width="0.1842%" height="15" fill="rgb(219,18,35)" fg:x="85801" fg:w="278"/><text x="57.0873%" y="703.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (278 samples, 0.18%)</title><rect x="56.8373%" y="677" width="0.1842%" height="15" fill="rgb(209,169,16)" fg:x="85801" fg:w="278"/><text x="57.0873%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (278 samples, 0.18%)</title><rect x="56.8373%" y="661" width="0.1842%" height="15" fill="rgb(245,90,51)" fg:x="85801" fg:w="278"/><text x="57.0873%" y="671.50"></text></g><g><title>[libc-2.31.so] (272 samples, 0.18%)</title><rect x="56.8413%" y="645" width="0.1802%" height="15" fill="rgb(220,99,45)" fg:x="85807" fg:w="272"/><text x="57.0913%" y="655.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_and_si256 (73 samples, 0.05%)</title><rect x="57.6461%" y="677" width="0.0484%" height="15" fill="rgb(249,89,25)" fg:x="87022" fg:w="73"/><text x="57.8961%" y="687.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_cmpeq_epi8 (70 samples, 0.05%)</title><rect x="57.6945%" y="677" width="0.0464%" height="15" fill="rgb(239,193,0)" fg:x="87095" fg:w="70"/><text x="57.9445%" y="687.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (193 samples, 0.13%)</title><rect x="57.7408%" y="677" width="0.1278%" height="15" fill="rgb(231,126,1)" fg:x="87165" fg:w="193"/><text x="57.9908%" y="687.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (166 samples, 0.11%)</title><rect x="57.8687%" y="677" width="0.1100%" height="15" fill="rgb(243,166,3)" fg:x="87358" fg:w="166"/><text x="58.1187%" y="687.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::find_whitespace_and_structurals (704 samples, 0.47%)</title><rect x="57.5534%" y="693" width="0.4664%" height="15" fill="rgb(223,22,34)" fg:x="86882" fg:w="704"/><text x="57.8034%" y="703.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_srli_epi32 (62 samples, 0.04%)</title><rect x="57.9787%" y="677" width="0.0411%" height="15" fill="rgb(251,52,51)" fg:x="87524" fg:w="62"/><text x="58.2287%" y="687.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (48 samples, 0.03%)</title><rect x="59.1161%" y="613" width="0.0318%" height="15" fill="rgb(221,165,28)" fg:x="89241" fg:w="48"/><text x="59.3661%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (23 samples, 0.02%)</title><rect x="59.1478%" y="613" width="0.0152%" height="15" fill="rgb(218,121,47)" fg:x="89289" fg:w="23"/><text x="59.3978%" y="623.50"></text></g><g><title>[libc-2.31.so] (224 samples, 0.15%)</title><rect x="59.5321%" y="501" width="0.1484%" height="15" fill="rgb(209,120,9)" fg:x="89869" fg:w="224"/><text x="59.7821%" y="511.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (18 samples, 0.01%)</title><rect x="59.6838%" y="501" width="0.0119%" height="15" fill="rgb(236,68,12)" fg:x="90098" fg:w="18"/><text x="59.9338%" y="511.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (952 samples, 0.63%)</title><rect x="59.6957%" y="501" width="0.6306%" height="15" fill="rgb(225,194,26)" fg:x="90116" fg:w="952"/><text x="59.9457%" y="511.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (58 samples, 0.04%)</title><rect x="60.3263%" y="501" width="0.0384%" height="15" fill="rgb(231,84,39)" fg:x="91068" fg:w="58"/><text x="60.5763%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1,833 samples, 1.21%)</title><rect x="59.1763%" y="597" width="1.2142%" height="15" fill="rgb(210,11,45)" fg:x="89332" fg:w="1833"/><text x="59.4263%" y="607.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1,833 samples, 1.21%)</title><rect x="59.1763%" y="581" width="1.2142%" height="15" fill="rgb(224,54,52)" fg:x="89332" fg:w="1833"/><text x="59.4263%" y="591.50"></text></g><g><title>alloc::alloc::realloc (1,832 samples, 1.21%)</title><rect x="59.1770%" y="565" width="1.2136%" height="15" fill="rgb(238,102,14)" fg:x="89333" fg:w="1832"/><text x="59.4270%" y="575.50"></text></g><g><title>__rg_realloc (1,832 samples, 1.21%)</title><rect x="59.1770%" y="549" width="1.2136%" height="15" fill="rgb(243,160,52)" fg:x="89333" fg:w="1832"/><text x="59.4270%" y="559.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (1,832 samples, 1.21%)</title><rect x="59.1770%" y="533" width="1.2136%" height="15" fill="rgb(216,114,19)" fg:x="89333" fg:w="1832"/><text x="59.4270%" y="543.50"></text></g><g><title>sn_rust_realloc (1,827 samples, 1.21%)</title><rect x="59.1803%" y="517" width="1.2103%" height="15" fill="rgb(244,166,37)" fg:x="89338" fg:w="1827"/><text x="59.4303%" y="527.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (39 samples, 0.03%)</title><rect x="60.3647%" y="501" width="0.0258%" height="15" fill="rgb(246,29,44)" fg:x="91126" fg:w="39"/><text x="60.6147%" y="511.50"></text></g><g><title>snmalloc::BackendAllocator&lt;snmalloc::PALLinux, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::StandardLocalState&lt;snmalloc::PALLinux, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt;, 14ul&gt; &gt;::alloc_chunk (31 samples, 0.02%)</title><rect x="60.3700%" y="485" width="0.0205%" height="15" fill="rgb(215,56,53)" fg:x="91134" fg:w="31"/><text x="60.6200%" y="495.50"></text></g><g><title>snmalloc::SmallBuddyRange::Type&lt;snmalloc::LargeBuddyRange&lt;21ul, 21ul, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, 12ul&gt;::Type&lt;snmalloc::StatsRange::Type&lt;snmalloc::CommitRange&lt;snmalloc::PALLinux&gt;::Type&lt;snmalloc::GlobalRange::Type&lt;snmalloc::LogRange&lt;2ul&gt;::Type&lt;snmalloc::LargeBuddyRange&lt;24ul, 63ul, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, 14ul&gt;::Type&lt;snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::alloc_range (16 samples, 0.01%)</title><rect x="60.3800%" y="469" width="0.0106%" height="15" fill="rgb(217,60,2)" fg:x="91149" fg:w="16"/><text x="60.6300%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,854 samples, 1.23%)</title><rect x="59.1664%" y="613" width="1.2281%" height="15" fill="rgb(207,26,24)" fg:x="89317" fg:w="1854"/><text x="59.4164%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2,045 samples, 1.35%)</title><rect x="59.0551%" y="677" width="1.3547%" height="15" fill="rgb(252,210,15)" fg:x="89149" fg:w="2045"/><text x="59.3051%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2,045 samples, 1.35%)</title><rect x="59.0551%" y="661" width="1.3547%" height="15" fill="rgb(253,209,26)" fg:x="89149" fg:w="2045"/><text x="59.3051%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1,966 samples, 1.30%)</title><rect x="59.1074%" y="645" width="1.3023%" height="15" fill="rgb(238,170,14)" fg:x="89228" fg:w="1966"/><text x="59.3574%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1,966 samples, 1.30%)</title><rect x="59.1074%" y="629" width="1.3023%" height="15" fill="rgb(216,178,15)" fg:x="89228" fg:w="1966"/><text x="59.3574%" y="639.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (42 samples, 0.03%)</title><rect x="60.4191%" y="677" width="0.0278%" height="15" fill="rgb(250,197,2)" fg:x="91208" fg:w="42"/><text x="60.6691%" y="687.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_set_epi32 (742 samples, 0.49%)</title><rect x="60.4469%" y="677" width="0.4915%" height="15" fill="rgb(212,70,42)" fg:x="91250" fg:w="742"/><text x="60.6969%" y="687.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_setr_epi32 (742 samples, 0.49%)</title><rect x="60.4469%" y="661" width="0.4915%" height="15" fill="rgb(227,213,9)" fg:x="91250" fg:w="742"/><text x="60.6969%" y="671.50"></text></g><g><title>core::core_arch::simd::i32x8::new (742 samples, 0.49%)</title><rect x="60.4469%" y="645" width="0.4915%" height="15" fill="rgb(245,99,25)" fg:x="91250" fg:w="742"/><text x="60.6969%" y="655.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_storeu_si256 (72 samples, 0.05%)</title><rect x="60.9384%" y="677" width="0.0477%" height="15" fill="rgb(250,82,29)" fg:x="91992" fg:w="72"/><text x="61.1884%" y="687.50"></text></g><g><title>core::num::&lt;impl u64&gt;::count_ones (468 samples, 0.31%)</title><rect x="60.9861%" y="677" width="0.3100%" height="15" fill="rgb(241,226,54)" fg:x="92064" fg:w="468"/><text x="61.2361%" y="687.50"></text></g><g><title>core::num::&lt;impl u64&gt;::trailing_zeros (442 samples, 0.29%)</title><rect x="61.2961%" y="677" width="0.2928%" height="15" fill="rgb(221,99,41)" fg:x="92532" fg:w="442"/><text x="61.5461%" y="687.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::flatten_bits (5,676 samples, 3.76%)</title><rect x="58.0197%" y="693" width="3.7600%" height="15" fill="rgb(213,90,21)" fg:x="87586" fg:w="5676"/><text x="58.2697%" y="703.50">&lt;sim..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_sub (288 samples, 0.19%)</title><rect x="61.5889%" y="677" width="0.1908%" height="15" fill="rgb(205,208,24)" fg:x="92974" fg:w="288"/><text x="61.8389%" y="687.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::Utf8CheckAlgorithm&lt;simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;&gt;::check_incomplete_pending (53 samples, 0.04%)</title><rect x="61.8227%" y="661" width="0.0351%" height="15" fill="rgb(246,31,12)" fg:x="93327" fg:w="53"/><text x="62.0727%" y="671.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::or (53 samples, 0.04%)</title><rect x="61.8227%" y="645" width="0.0351%" height="15" fill="rgb(213,154,6)" fg:x="93327" fg:w="53"/><text x="62.0727%" y="655.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (53 samples, 0.04%)</title><rect x="61.8227%" y="629" width="0.0351%" height="15" fill="rgb(222,163,29)" fg:x="93327" fg:w="53"/><text x="62.0727%" y="639.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::is_ascii (106 samples, 0.07%)</title><rect x="61.8579%" y="645" width="0.0702%" height="15" fill="rgb(227,201,8)" fg:x="93380" fg:w="106"/><text x="62.1079%" y="655.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (24 samples, 0.02%)</title><rect x="61.9122%" y="629" width="0.0159%" height="15" fill="rgb(233,9,32)" fg:x="93462" fg:w="24"/><text x="62.1622%" y="639.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::Utf8CheckAlgorithm&lt;simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;&gt;::check_utf8 (306 samples, 0.20%)</title><rect x="61.7870%" y="677" width="0.2027%" height="15" fill="rgb(217,54,24)" fg:x="93273" fg:w="306"/><text x="62.0370%" y="687.50"></text></g><g><title>simdutf8::implementation::x86::avx2::SimdInput::is_ascii (199 samples, 0.13%)</title><rect x="61.8579%" y="661" width="0.1318%" height="15" fill="rgb(235,192,0)" fg:x="93380" fg:w="199"/><text x="62.1079%" y="671.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::or (93 samples, 0.06%)</title><rect x="61.9281%" y="645" width="0.0616%" height="15" fill="rgb(235,45,9)" fg:x="93486" fg:w="93"/><text x="62.1781%" y="655.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (93 samples, 0.06%)</title><rect x="61.9281%" y="629" width="0.0616%" height="15" fill="rgb(246,42,40)" fg:x="93486" fg:w="93"/><text x="62.1781%" y="639.50"></text></g><g><title>&lt;simdutf8::implementation::x86::avx2::ChunkedUtf8ValidatorImp as simdutf8::basic::imp::ChunkedUtf8Validator&gt;::update_from_chunks (528 samples, 0.35%)</title><rect x="61.7870%" y="693" width="0.3498%" height="15" fill="rgb(248,111,24)" fg:x="93273" fg:w="528"/><text x="62.0370%" y="703.50"></text></g><g><title>simdutf8::implementation::x86::avx2::SimdInput::new (222 samples, 0.15%)</title><rect x="61.9897%" y="677" width="0.1471%" height="15" fill="rgb(249,65,22)" fg:x="93579" fg:w="222"/><text x="62.2397%" y="687.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::load_from (222 samples, 0.15%)</title><rect x="61.9897%" y="661" width="0.1471%" height="15" fill="rgb(238,111,51)" fg:x="93579" fg:w="222"/><text x="62.2397%" y="671.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_loadu_si256 (222 samples, 0.15%)</title><rect x="61.9897%" y="645" width="0.1471%" height="15" fill="rgb(250,118,22)" fg:x="93579" fg:w="222"/><text x="62.2397%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (222 samples, 0.15%)</title><rect x="61.9897%" y="629" width="0.1471%" height="15" fill="rgb(234,84,26)" fg:x="93579" fg:w="222"/><text x="62.2397%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (26 samples, 0.02%)</title><rect x="62.1367%" y="693" width="0.0172%" height="15" fill="rgb(243,172,12)" fg:x="93801" fg:w="26"/><text x="62.3867%" y="703.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (429 samples, 0.28%)</title><rect x="62.2977%" y="533" width="0.2842%" height="15" fill="rgb(236,150,49)" fg:x="94044" fg:w="429"/><text x="62.5477%" y="543.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (26 samples, 0.02%)</title><rect x="62.5819%" y="533" width="0.0172%" height="15" fill="rgb(225,197,26)" fg:x="94473" fg:w="26"/><text x="62.8319%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (667 samples, 0.44%)</title><rect x="62.1646%" y="629" width="0.4418%" height="15" fill="rgb(214,17,42)" fg:x="93843" fg:w="667"/><text x="62.4146%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (667 samples, 0.44%)</title><rect x="62.1646%" y="613" width="0.4418%" height="15" fill="rgb(224,165,40)" fg:x="93843" fg:w="667"/><text x="62.4146%" y="623.50"></text></g><g><title>alloc::alloc::alloc (661 samples, 0.44%)</title><rect x="62.1685%" y="597" width="0.4379%" height="15" fill="rgb(246,100,4)" fg:x="93849" fg:w="661"/><text x="62.4185%" y="607.50"></text></g><g><title>__rg_alloc (661 samples, 0.44%)</title><rect x="62.1685%" y="581" width="0.4379%" height="15" fill="rgb(222,103,0)" fg:x="93849" fg:w="661"/><text x="62.4185%" y="591.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (661 samples, 0.44%)</title><rect x="62.1685%" y="565" width="0.4379%" height="15" fill="rgb(227,189,26)" fg:x="93849" fg:w="661"/><text x="62.4185%" y="575.50"></text></g><g><title>sn_rust_alloc (657 samples, 0.44%)</title><rect x="62.1712%" y="549" width="0.4352%" height="15" fill="rgb(214,202,17)" fg:x="93853" fg:w="657"/><text x="62.4212%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (684 samples, 0.45%)</title><rect x="62.1540%" y="693" width="0.4531%" height="15" fill="rgb(229,111,3)" fg:x="93827" fg:w="684"/><text x="62.4040%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (684 samples, 0.45%)</title><rect x="62.1540%" y="677" width="0.4531%" height="15" fill="rgb(229,172,15)" fg:x="93827" fg:w="684"/><text x="62.4040%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (671 samples, 0.44%)</title><rect x="62.1626%" y="661" width="0.4445%" height="15" fill="rgb(230,224,35)" fg:x="93840" fg:w="671"/><text x="62.4126%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (671 samples, 0.44%)</title><rect x="62.1626%" y="645" width="0.4445%" height="15" fill="rgb(251,141,6)" fg:x="93840" fg:w="671"/><text x="62.4126%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from (213 samples, 0.14%)</title><rect x="62.6077%" y="693" width="0.1411%" height="15" fill="rgb(225,208,6)" fg:x="94512" fg:w="213"/><text x="62.8577%" y="703.50"></text></g><g><title>core::intrinsics::copy (213 samples, 0.14%)</title><rect x="62.6077%" y="677" width="0.1411%" height="15" fill="rgb(246,181,16)" fg:x="94512" fg:w="213"/><text x="62.8577%" y="687.50"></text></g><g><title>[libc-2.31.so] (166 samples, 0.11%)</title><rect x="62.6389%" y="661" width="0.1100%" height="15" fill="rgb(227,129,36)" fg:x="94559" fg:w="166"/><text x="62.8889%" y="671.50"></text></g><g><title>simd_json::Stage1Parse::finalize_structurals (475 samples, 0.31%)</title><rect x="62.7488%" y="693" width="0.3147%" height="15" fill="rgb(248,117,24)" fg:x="94725" fg:w="475"/><text x="62.9988%" y="703.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::cmp_mask_against_input (149 samples, 0.10%)</title><rect x="63.3622%" y="677" width="0.0987%" height="15" fill="rgb(214,185,35)" fg:x="95651" fg:w="149"/><text x="63.6122%" y="687.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (95 samples, 0.06%)</title><rect x="63.3980%" y="661" width="0.0629%" height="15" fill="rgb(236,150,34)" fg:x="95705" fg:w="95"/><text x="63.6480%" y="671.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (47 samples, 0.03%)</title><rect x="63.4609%" y="677" width="0.0311%" height="15" fill="rgb(243,228,27)" fg:x="95800" fg:w="47"/><text x="63.7109%" y="687.50"></text></g><g><title>simd_json::Stage1Parse::find_odd_backslash_sequences (686 samples, 0.45%)</title><rect x="63.0635%" y="693" width="0.4544%" height="15" fill="rgb(245,77,44)" fg:x="95200" fg:w="686"/><text x="63.3135%" y="703.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (39 samples, 0.03%)</title><rect x="63.4921%" y="677" width="0.0258%" height="15" fill="rgb(235,214,42)" fg:x="95847" fg:w="39"/><text x="63.7421%" y="687.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::cmp_mask_against_input (176 samples, 0.12%)</title><rect x="63.8306%" y="677" width="0.1166%" height="15" fill="rgb(221,74,3)" fg:x="96358" fg:w="176"/><text x="64.0806%" y="687.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (114 samples, 0.08%)</title><rect x="63.8716%" y="661" width="0.0755%" height="15" fill="rgb(206,121,29)" fg:x="96420" fg:w="114"/><text x="64.1216%" y="671.50"></text></g><g><title>core::core_arch::x86::pclmulqdq::_mm_clmulepi64_si128 (350 samples, 0.23%)</title><rect x="64.0922%" y="661" width="0.2319%" height="15" fill="rgb(249,131,53)" fg:x="96753" fg:w="350"/><text x="64.3422%" y="671.50"></text></g><g><title>simd_json::Deserializer::find_structural_bits (11,050 samples, 7.32%)</title><rect x="57.0287%" y="709" width="7.3199%" height="15" fill="rgb(236,170,29)" fg:x="86090" fg:w="11050"/><text x="57.2787%" y="719.50">simd_json:..</text></g><g><title>simd_json::Stage1Parse::find_quote_mask_and_bits (1,254 samples, 0.83%)</title><rect x="63.5179%" y="693" width="0.8307%" height="15" fill="rgb(247,96,15)" fg:x="95886" fg:w="1254"/><text x="63.7679%" y="703.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::compute_quote_mask (606 samples, 0.40%)</title><rect x="63.9472%" y="677" width="0.4014%" height="15" fill="rgb(211,210,7)" fg:x="96534" fg:w="606"/><text x="64.1972%" y="687.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi64x (37 samples, 0.02%)</title><rect x="64.3241%" y="661" width="0.0245%" height="15" fill="rgb(240,88,50)" fg:x="97103" fg:w="37"/><text x="64.5741%" y="671.50"></text></g><g><title>core::core_arch::simd::i64x2::new (37 samples, 0.02%)</title><rect x="64.3241%" y="645" width="0.0245%" height="15" fill="rgb(209,229,26)" fg:x="97103" fg:w="37"/><text x="64.5741%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (238 samples, 0.16%)</title><rect x="66.2736%" y="693" width="0.1577%" height="15" fill="rgb(210,68,23)" fg:x="100046" fg:w="238"/><text x="66.5236%" y="703.50"></text></g><g><title>snmalloc::Buddy&lt;snmalloc::BuddyChunkRep&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt; &gt;, 14ul, 21ul&gt;::add_block (21 samples, 0.01%)</title><rect x="68.7829%" y="485" width="0.0139%" height="15" fill="rgb(229,180,13)" fg:x="103834" fg:w="21"/><text x="69.0329%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (2,933 samples, 1.94%)</title><rect x="66.8652%" y="533" width="1.9429%" height="15" fill="rgb(236,53,44)" fg:x="100939" fg:w="2933"/><text x="67.1152%" y="543.50">s..</text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (60 samples, 0.04%)</title><rect x="68.7683%" y="517" width="0.0397%" height="15" fill="rgb(244,214,29)" fg:x="103812" fg:w="60"/><text x="69.0183%" y="527.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_slabs&lt;false&gt; (44 samples, 0.03%)</title><rect x="68.7789%" y="501" width="0.0291%" height="15" fill="rgb(220,75,29)" fg:x="103828" fg:w="44"/><text x="69.0289%" y="511.50"></text></g><g><title>snmalloc::range_to_pow_2_blocks&lt;4ul, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::SmallBuddyRange::Type&lt;snmalloc::LargeBuddyRange&lt;21ul, 21ul, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, 12ul&gt;::Type&lt;snmalloc::StatsRange::Type&lt;snmalloc::CommitRange&lt;snmalloc::PALLinux&gt;::Type&lt;snmalloc::GlobalRange::Type&lt;snmalloc::LogRange&lt;2ul&gt;::Type&lt;snmalloc::LargeBuddyRange&lt;24ul, 63ul, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, 14ul&gt;::Type&lt;snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::add_range(snmalloc::CapPtr&lt;void, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt; &gt;, unsigned long)::{lambda(snmalloc::CapPtr&lt;void, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt; &gt;, unsigned long, bool)#1}&gt; (17 samples, 0.01%)</title><rect x="68.7968%" y="485" width="0.0113%" height="15" fill="rgb(214,183,37)" fg:x="103855" fg:w="17"/><text x="69.0468%" y="495.50"></text></g><g><title>snmalloc::Buddy&lt;snmalloc::BuddyInplaceRep&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt; &gt;, 4ul, 14ul&gt;::add_block (17 samples, 0.01%)</title><rect x="68.7968%" y="469" width="0.0113%" height="15" fill="rgb(239,117,29)" fg:x="103855" fg:w="17"/><text x="69.0468%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3,636 samples, 2.41%)</title><rect x="66.4677%" y="629" width="2.4086%" height="15" fill="rgb(237,171,35)" fg:x="100339" fg:w="3636"/><text x="66.7177%" y="639.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (3,636 samples, 2.41%)</title><rect x="66.4677%" y="613" width="2.4086%" height="15" fill="rgb(229,178,53)" fg:x="100339" fg:w="3636"/><text x="66.7177%" y="623.50">al..</text></g><g><title>alloc::alloc::alloc (3,624 samples, 2.40%)</title><rect x="66.4757%" y="597" width="2.4007%" height="15" fill="rgb(210,102,19)" fg:x="100351" fg:w="3624"/><text x="66.7257%" y="607.50">al..</text></g><g><title>__rg_alloc (3,624 samples, 2.40%)</title><rect x="66.4757%" y="581" width="2.4007%" height="15" fill="rgb(235,127,22)" fg:x="100351" fg:w="3624"/><text x="66.7257%" y="591.50">__..</text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (3,624 samples, 2.40%)</title><rect x="66.4757%" y="565" width="2.4007%" height="15" fill="rgb(244,31,31)" fg:x="100351" fg:w="3624"/><text x="66.7257%" y="575.50">&lt;s..</text></g><g><title>sn_rust_alloc (3,615 samples, 2.39%)</title><rect x="66.4816%" y="549" width="2.3947%" height="15" fill="rgb(231,43,21)" fg:x="100360" fg:w="3615"/><text x="66.7316%" y="559.50">sn..</text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (103 samples, 0.07%)</title><rect x="68.8081%" y="533" width="0.0682%" height="15" fill="rgb(217,131,35)" fg:x="103872" fg:w="103"/><text x="69.0581%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3,691 samples, 2.45%)</title><rect x="66.4372%" y="693" width="2.4450%" height="15" fill="rgb(221,149,4)" fg:x="100293" fg:w="3691"/><text x="66.6872%" y="703.50">al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3,691 samples, 2.45%)</title><rect x="66.4372%" y="677" width="2.4450%" height="15" fill="rgb(232,170,28)" fg:x="100293" fg:w="3691"/><text x="66.6872%" y="687.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3,666 samples, 2.43%)</title><rect x="66.4538%" y="661" width="2.4285%" height="15" fill="rgb(238,56,10)" fg:x="100318" fg:w="3666"/><text x="66.7038%" y="671.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3,666 samples, 2.43%)</title><rect x="66.4538%" y="645" width="2.4285%" height="15" fill="rgb(235,196,14)" fg:x="100318" fg:w="3666"/><text x="66.7038%" y="655.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (221 samples, 0.15%)</title><rect x="68.8902%" y="645" width="0.1464%" height="15" fill="rgb(216,45,48)" fg:x="103996" fg:w="221"/><text x="69.1402%" y="655.50"></text></g><g><title>alloc::alloc::dealloc (221 samples, 0.15%)</title><rect x="68.8902%" y="629" width="0.1464%" height="15" fill="rgb(238,213,17)" fg:x="103996" fg:w="221"/><text x="69.1402%" y="639.50"></text></g><g><title>__rg_dealloc (221 samples, 0.15%)</title><rect x="68.8902%" y="613" width="0.1464%" height="15" fill="rgb(212,13,2)" fg:x="103996" fg:w="221"/><text x="69.1402%" y="623.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (221 samples, 0.15%)</title><rect x="68.8902%" y="597" width="0.1464%" height="15" fill="rgb(240,114,20)" fg:x="103996" fg:w="221"/><text x="69.1402%" y="607.50"></text></g><g><title>sn_rust_dealloc (206 samples, 0.14%)</title><rect x="68.9002%" y="581" width="0.1365%" height="15" fill="rgb(228,41,40)" fg:x="104011" fg:w="206"/><text x="69.1502%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(simd_json::stage2::StackState,usize,usize)&gt;&gt; (234 samples, 0.16%)</title><rect x="68.8823%" y="693" width="0.1550%" height="15" fill="rgb(244,132,35)" fg:x="103984" fg:w="234"/><text x="69.1323%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(simd_json::stage2::StackState,usize,usize)&gt;&gt; (234 samples, 0.16%)</title><rect x="68.8823%" y="677" width="0.1550%" height="15" fill="rgb(253,189,4)" fg:x="103984" fg:w="234"/><text x="69.1323%" y="687.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (234 samples, 0.16%)</title><rect x="68.8823%" y="661" width="0.1550%" height="15" fill="rgb(224,37,19)" fg:x="103984" fg:w="234"/><text x="69.1323%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1,882 samples, 1.25%)</title><rect x="69.0373%" y="693" width="1.2467%" height="15" fill="rgb(235,223,18)" fg:x="104218" fg:w="1882"/><text x="69.2873%" y="703.50"></text></g><g><title>core::ptr::write (1,882 samples, 1.25%)</title><rect x="69.0373%" y="677" width="1.2467%" height="15" fill="rgb(235,163,25)" fg:x="104218" fg:w="1882"/><text x="69.2873%" y="687.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (19 samples, 0.01%)</title><rect x="70.2840%" y="693" width="0.0126%" height="15" fill="rgb(217,145,28)" fg:x="106100" fg:w="19"/><text x="70.5340%" y="703.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (19 samples, 0.01%)</title><rect x="70.2840%" y="677" width="0.0126%" height="15" fill="rgb(223,223,32)" fg:x="106100" fg:w="19"/><text x="70.5340%" y="687.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (19 samples, 0.01%)</title><rect x="70.2840%" y="661" width="0.0126%" height="15" fill="rgb(227,189,39)" fg:x="106100" fg:w="19"/><text x="70.5340%" y="671.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (19 samples, 0.01%)</title><rect x="70.2840%" y="645" width="0.0126%" height="15" fill="rgb(248,10,22)" fg:x="106100" fg:w="19"/><text x="70.5340%" y="655.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (668 samples, 0.44%)</title><rect x="70.6788%" y="677" width="0.4425%" height="15" fill="rgb(248,46,39)" fg:x="106696" fg:w="668"/><text x="70.9288%" y="687.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_loadu_si256 (331 samples, 0.22%)</title><rect x="71.1213%" y="677" width="0.2193%" height="15" fill="rgb(248,113,48)" fg:x="107364" fg:w="331"/><text x="71.3713%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (331 samples, 0.22%)</title><rect x="71.1213%" y="661" width="0.2193%" height="15" fill="rgb(245,16,25)" fg:x="107364" fg:w="331"/><text x="71.3713%" y="671.50"></text></g><g><title>core::num::&lt;impl u32&gt;::trailing_zeros (305 samples, 0.20%)</title><rect x="71.3406%" y="677" width="0.2020%" height="15" fill="rgb(249,152,16)" fg:x="107695" fg:w="305"/><text x="71.5906%" y="687.50"></text></g><g><title>simd_json::avx2::deser::&lt;impl simd_json::Deserializer&gt;::parse_str_ (2,108 samples, 1.40%)</title><rect x="70.2966%" y="693" width="1.3964%" height="15" fill="rgb(250,16,1)" fg:x="106119" fg:w="2108"/><text x="70.5466%" y="703.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (227 samples, 0.15%)</title><rect x="71.5426%" y="677" width="0.1504%" height="15" fill="rgb(249,138,3)" fg:x="108000" fg:w="227"/><text x="71.7926%" y="687.50"></text></g><g><title>simd_json::numberparse::is_integer (84 samples, 0.06%)</title><rect x="72.3415%" y="677" width="0.0556%" height="15" fill="rgb(227,71,41)" fg:x="109206" fg:w="84"/><text x="72.5915%" y="687.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::contains (84 samples, 0.06%)</title><rect x="72.3415%" y="661" width="0.0556%" height="15" fill="rgb(209,184,23)" fg:x="109206" fg:w="84"/><text x="72.5915%" y="671.50"></text></g><g><title>core::ops::range::RangeBounds::contains (84 samples, 0.06%)</title><rect x="72.3415%" y="645" width="0.0556%" height="15" fill="rgb(223,215,31)" fg:x="109206" fg:w="84"/><text x="72.5915%" y="655.50"></text></g><g><title>simd_json::numberparse::&lt;impl simd_json::Deserializer&gt;::parse_number_int (1,076 samples, 0.71%)</title><rect x="71.6930%" y="693" width="0.7128%" height="15" fill="rgb(210,146,28)" fg:x="108227" fg:w="1076"/><text x="71.9430%" y="703.50"></text></g><g><title>simd_json::stage2::is_valid_false_atom (33 samples, 0.02%)</title><rect x="72.4058%" y="693" width="0.0219%" height="15" fill="rgb(209,183,41)" fg:x="109303" fg:w="33"/><text x="72.6558%" y="703.50"></text></g><g><title>simd_json::charutils::is_not_structural_or_whitespace (20 samples, 0.01%)</title><rect x="72.4144%" y="677" width="0.0132%" height="15" fill="rgb(209,224,45)" fg:x="109316" fg:w="20"/><text x="72.6644%" y="687.50"></text></g><g><title>simd_json::stage2::&lt;impl simd_json::Deserializer&gt;::build_tape (12,218 samples, 8.09%)</title><rect x="64.3486%" y="709" width="8.0936%" height="15" fill="rgb(224,209,51)" fg:x="97140" fg:w="12218"/><text x="64.5986%" y="719.50">simd_json::..</text></g><g><title>simd_json::stage2::is_valid_true_atom (22 samples, 0.01%)</title><rect x="72.4276%" y="693" width="0.0146%" height="15" fill="rgb(223,17,39)" fg:x="109336" fg:w="22"/><text x="72.6776%" y="703.50"></text></g><g><title>sn_rust_dealloc (142 samples, 0.09%)</title><rect x="72.4422%" y="709" width="0.0941%" height="15" fill="rgb(234,204,37)" fg:x="109358" fg:w="142"/><text x="72.6922%" y="719.50"></text></g><g><title>simd_json::Deserializer::from_slice_with_buffers (23,867 samples, 15.81%)</title><rect x="56.7426%" y="725" width="15.8103%" height="15" fill="rgb(236,120,5)" fg:x="85658" fg:w="23867"/><text x="56.9926%" y="735.50">simd_json::Deserializer:..</text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (25 samples, 0.02%)</title><rect x="72.5363%" y="709" width="0.0166%" height="15" fill="rgb(248,97,27)" fg:x="109500" fg:w="25"/><text x="72.7863%" y="719.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (99 samples, 0.07%)</title><rect x="74.6368%" y="645" width="0.0656%" height="15" fill="rgb(240,66,17)" fg:x="112671" fg:w="99"/><text x="74.8868%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (99 samples, 0.07%)</title><rect x="74.6368%" y="629" width="0.0656%" height="15" fill="rgb(210,79,3)" fg:x="112671" fg:w="99"/><text x="74.8868%" y="639.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::insert_nocheck (5,088 samples, 3.37%)</title><rect x="72.5528%" y="693" width="3.3705%" height="15" fill="rgb(214,176,27)" fg:x="109525" fg:w="5088"/><text x="72.8028%" y="703.50">hal..</text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::insert_nocheck (4,970 samples, 3.29%)</title><rect x="72.6310%" y="677" width="3.2923%" height="15" fill="rgb(235,185,3)" fg:x="109643" fg:w="4970"/><text x="72.8810%" y="687.50">hal..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,947 samples, 1.29%)</title><rect x="74.6335%" y="661" width="1.2898%" height="15" fill="rgb(227,24,12)" fg:x="112666" fg:w="1947"/><text x="74.8835%" y="671.50"></text></g><g><title>core::ptr::write (1,843 samples, 1.22%)</title><rect x="74.7024%" y="645" width="1.2209%" height="15" fill="rgb(252,169,48)" fg:x="112770" fg:w="1843"/><text x="74.9524%" y="655.50"></text></g><g><title>snmalloc::RBTree&lt;snmalloc::BuddyChunkRep&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt; &gt;, false, false&gt;::remove_min (50 samples, 0.03%)</title><rect x="75.9405%" y="469" width="0.0331%" height="15" fill="rgb(212,65,1)" fg:x="114639" fg:w="50"/><text x="76.1905%" y="479.50"></text></g><g><title>snmalloc::RBTree&lt;snmalloc::BuddyChunkRep&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt; &gt;, false, false&gt;::remove_path (22 samples, 0.01%)</title><rect x="75.9590%" y="453" width="0.0146%" height="15" fill="rgb(242,39,24)" fg:x="114667" fg:w="22"/><text x="76.2090%" y="463.50"></text></g><g><title>halfbrown::HashMap&lt;K,V&gt;::with_capacity (123 samples, 0.08%)</title><rect x="75.9233%" y="693" width="0.0815%" height="15" fill="rgb(249,32,23)" fg:x="114613" fg:w="123"/><text x="76.1733%" y="703.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V&gt;::with_capacity (123 samples, 0.08%)</title><rect x="75.9233%" y="677" width="0.0815%" height="15" fill="rgb(251,195,23)" fg:x="114613" fg:w="123"/><text x="76.1733%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (123 samples, 0.08%)</title><rect x="75.9233%" y="661" width="0.0815%" height="15" fill="rgb(236,174,8)" fg:x="114613" fg:w="123"/><text x="76.1733%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (123 samples, 0.08%)</title><rect x="75.9233%" y="645" width="0.0815%" height="15" fill="rgb(220,197,8)" fg:x="114613" fg:w="123"/><text x="76.1733%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (123 samples, 0.08%)</title><rect x="75.9233%" y="629" width="0.0815%" height="15" fill="rgb(240,108,37)" fg:x="114613" fg:w="123"/><text x="76.1733%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (123 samples, 0.08%)</title><rect x="75.9233%" y="613" width="0.0815%" height="15" fill="rgb(232,176,24)" fg:x="114613" fg:w="123"/><text x="76.1733%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (123 samples, 0.08%)</title><rect x="75.9233%" y="597" width="0.0815%" height="15" fill="rgb(243,35,29)" fg:x="114613" fg:w="123"/><text x="76.1733%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (123 samples, 0.08%)</title><rect x="75.9233%" y="581" width="0.0815%" height="15" fill="rgb(210,37,18)" fg:x="114613" fg:w="123"/><text x="76.1733%" y="591.50"></text></g><g><title>alloc::alloc::alloc (123 samples, 0.08%)</title><rect x="75.9233%" y="565" width="0.0815%" height="15" fill="rgb(224,184,40)" fg:x="114613" fg:w="123"/><text x="76.1733%" y="575.50"></text></g><g><title>__rg_alloc (123 samples, 0.08%)</title><rect x="75.9233%" y="549" width="0.0815%" height="15" fill="rgb(236,39,29)" fg:x="114613" fg:w="123"/><text x="76.1733%" y="559.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (123 samples, 0.08%)</title><rect x="75.9233%" y="533" width="0.0815%" height="15" fill="rgb(232,48,39)" fg:x="114613" fg:w="123"/><text x="76.1733%" y="543.50"></text></g><g><title>sn_rust_alloc (123 samples, 0.08%)</title><rect x="75.9233%" y="517" width="0.0815%" height="15" fill="rgb(236,34,42)" fg:x="114613" fg:w="123"/><text x="76.1733%" y="527.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (110 samples, 0.07%)</title><rect x="75.9319%" y="501" width="0.0729%" height="15" fill="rgb(243,106,37)" fg:x="114626" fg:w="110"/><text x="76.1819%" y="511.50"></text></g><g><title>snmalloc::BackendAllocator&lt;snmalloc::PALLinux, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::StandardLocalState&lt;snmalloc::PALLinux, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt;, 14ul&gt; &gt;::alloc_chunk (110 samples, 0.07%)</title><rect x="75.9319%" y="485" width="0.0729%" height="15" fill="rgb(218,96,6)" fg:x="114626" fg:w="110"/><text x="76.1819%" y="495.50"></text></g><g><title>snmalloc::SmallBuddyRange::Type&lt;snmalloc::LargeBuddyRange&lt;21ul, 21ul, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, 12ul&gt;::Type&lt;snmalloc::StatsRange::Type&lt;snmalloc::CommitRange&lt;snmalloc::PALLinux&gt;::Type&lt;snmalloc::GlobalRange::Type&lt;snmalloc::LogRange&lt;2ul&gt;::Type&lt;snmalloc::LargeBuddyRange&lt;24ul, 63ul, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, 14ul&gt;::Type&lt;snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::alloc_range (47 samples, 0.03%)</title><rect x="75.9736%" y="469" width="0.0311%" height="15" fill="rgb(235,130,12)" fg:x="114689" fg:w="47"/><text x="76.2236%" y="479.50"></text></g><g><title>snmalloc::RBTree&lt;snmalloc::BuddyInplaceRep&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt; &gt;, false, false&gt;::remove_min (39 samples, 0.03%)</title><rect x="75.9789%" y="453" width="0.0258%" height="15" fill="rgb(231,95,0)" fg:x="114697" fg:w="39"/><text x="76.2289%" y="463.50"></text></g><g><title>simd_json::Deserializer::next_ (304 samples, 0.20%)</title><rect x="76.0763%" y="677" width="0.2014%" height="15" fill="rgb(228,12,23)" fg:x="114844" fg:w="304"/><text x="76.3263%" y="687.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (332 samples, 0.22%)</title><rect x="76.5314%" y="501" width="0.2199%" height="15" fill="rgb(216,12,1)" fg:x="115531" fg:w="332"/><text x="76.7814%" y="511.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (18 samples, 0.01%)</title><rect x="76.7513%" y="501" width="0.0119%" height="15" fill="rgb(219,59,3)" fg:x="115863" fg:w="18"/><text x="77.0013%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (475 samples, 0.31%)</title><rect x="76.4684%" y="597" width="0.3147%" height="15" fill="rgb(215,208,46)" fg:x="115436" fg:w="475"/><text x="76.7184%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (475 samples, 0.31%)</title><rect x="76.4684%" y="581" width="0.3147%" height="15" fill="rgb(254,224,29)" fg:x="115436" fg:w="475"/><text x="76.7184%" y="591.50"></text></g><g><title>alloc::alloc::alloc (463 samples, 0.31%)</title><rect x="76.4764%" y="565" width="0.3067%" height="15" fill="rgb(232,14,29)" fg:x="115448" fg:w="463"/><text x="76.7264%" y="575.50"></text></g><g><title>__rg_alloc (463 samples, 0.31%)</title><rect x="76.4764%" y="549" width="0.3067%" height="15" fill="rgb(208,45,52)" fg:x="115448" fg:w="463"/><text x="76.7264%" y="559.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (463 samples, 0.31%)</title><rect x="76.4764%" y="533" width="0.3067%" height="15" fill="rgb(234,191,28)" fg:x="115448" fg:w="463"/><text x="76.7264%" y="543.50"></text></g><g><title>sn_rust_alloc (463 samples, 0.31%)</title><rect x="76.4764%" y="517" width="0.3067%" height="15" fill="rgb(244,67,43)" fg:x="115448" fg:w="463"/><text x="76.7264%" y="527.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (30 samples, 0.02%)</title><rect x="76.7632%" y="501" width="0.0199%" height="15" fill="rgb(236,189,24)" fg:x="115881" fg:w="30"/><text x="77.0132%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (525 samples, 0.35%)</title><rect x="76.4406%" y="661" width="0.3478%" height="15" fill="rgb(239,214,33)" fg:x="115394" fg:w="525"/><text x="76.6906%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (525 samples, 0.35%)</title><rect x="76.4406%" y="645" width="0.3478%" height="15" fill="rgb(226,176,41)" fg:x="115394" fg:w="525"/><text x="76.6906%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (505 samples, 0.33%)</title><rect x="76.4539%" y="629" width="0.3345%" height="15" fill="rgb(248,47,8)" fg:x="115414" fg:w="505"/><text x="76.7039%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (505 samples, 0.33%)</title><rect x="76.4539%" y="613" width="0.3345%" height="15" fill="rgb(218,81,44)" fg:x="115414" fg:w="505"/><text x="76.7039%" y="623.50"></text></g><g><title>core::ptr::write (3,994 samples, 2.65%)</title><rect x="76.7891%" y="661" width="2.6458%" height="15" fill="rgb(213,98,6)" fg:x="115920" fg:w="3994"/><text x="77.0391%" y="671.50">co..</text></g><g><title>simd_json::Deserializer::next_ (442 samples, 0.29%)</title><rect x="79.5640%" y="645" width="0.2928%" height="15" fill="rgb(222,85,22)" fg:x="120109" fg:w="442"/><text x="79.8140%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (104 samples, 0.07%)</title><rect x="79.7879%" y="629" width="0.0689%" height="15" fill="rgb(239,46,39)" fg:x="120447" fg:w="104"/><text x="80.0379%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (104 samples, 0.07%)</title><rect x="79.7879%" y="613" width="0.0689%" height="15" fill="rgb(237,12,29)" fg:x="120447" fg:w="104"/><text x="80.0379%" y="623.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse_array (5,453 samples, 3.61%)</title><rect x="76.2777%" y="677" width="3.6122%" height="15" fill="rgb(214,77,8)" fg:x="115148" fg:w="5453"/><text x="76.5277%" y="687.50">trem..</text></g><g><title>tremor_value::value::ValueDeserializer::parse (687 samples, 0.46%)</title><rect x="79.4348%" y="661" width="0.4551%" height="15" fill="rgb(217,168,37)" fg:x="119914" fg:w="687"/><text x="79.6848%" y="671.50"></text></g><g><title>tremor_value::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for tremor_value::value::Value&gt;::from (50 samples, 0.03%)</title><rect x="79.8568%" y="645" width="0.0331%" height="15" fill="rgb(221,217,23)" fg:x="120551" fg:w="50"/><text x="80.1068%" y="655.50"></text></g><g><title>tremor_value::value::Value::String (50 samples, 0.03%)</title><rect x="79.8568%" y="629" width="0.0331%" height="15" fill="rgb(243,229,36)" fg:x="120551" fg:w="50"/><text x="80.1068%" y="639.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::decode (35,010 samples, 23.19%)</title><rect x="56.7426%" y="757" width="23.1917%" height="15" fill="rgb(251,163,40)" fg:x="85658" fg:w="35010"/><text x="56.9926%" y="767.50">&lt;tremor_runtime::codec::json::Json&lt;S&gt;..</text></g><g><title>tremor_value::value::parse_to_value_with_buffers (35,010 samples, 23.19%)</title><rect x="56.7426%" y="741" width="23.1917%" height="15" fill="rgb(237,222,12)" fg:x="85658" fg:w="35010"/><text x="56.9926%" y="751.50">tremor_value::value::parse_to_value_w..</text></g><g><title>tremor_value::value::ValueDeserializer::parse (11,143 samples, 7.38%)</title><rect x="72.5528%" y="725" width="7.3815%" height="15" fill="rgb(248,132,6)" fg:x="109525" fg:w="11143"/><text x="72.8028%" y="735.50">tremor_val..</text></g><g><title>tremor_value::value::ValueDeserializer::parse_map (11,143 samples, 7.38%)</title><rect x="72.5528%" y="709" width="7.3815%" height="15" fill="rgb(227,167,50)" fg:x="109525" fg:w="11143"/><text x="72.8028%" y="719.50">tremor_val..</text></g><g><title>tremor_value::value::ValueDeserializer::parse (5,932 samples, 3.93%)</title><rect x="76.0047%" y="693" width="3.9295%" height="15" fill="rgb(242,84,37)" fg:x="114736" fg:w="5932"/><text x="76.2547%" y="703.50">trem..</text></g><g><title>tremor_value::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for tremor_value::value::Value&gt;::from (67 samples, 0.04%)</title><rect x="79.8899%" y="677" width="0.0444%" height="15" fill="rgb(212,4,50)" fg:x="120601" fg:w="67"/><text x="80.1399%" y="687.50"></text></g><g><title>tremor_value::value::Value::String (67 samples, 0.04%)</title><rect x="79.8899%" y="661" width="0.0444%" height="15" fill="rgb(230,228,32)" fg:x="120601" fg:w="67"/><text x="80.1399%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (35,035 samples, 23.21%)</title><rect x="56.7267%" y="869" width="23.2083%" height="15" fill="rgb(248,217,23)" fg:x="85634" fg:w="35035"/><text x="56.9767%" y="879.50">&lt;core::future::from_generator::GenFut..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_source_reply::{{closure}} (35,035 samples, 23.21%)</title><rect x="56.7267%" y="853" width="23.2083%" height="15" fill="rgb(238,197,32)" fg:x="85634" fg:w="35035"/><text x="56.9767%" y="863.50">tremor_runtime::connectors::source::S..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (35,035 samples, 23.21%)</title><rect x="56.7267%" y="837" width="23.2083%" height="15" fill="rgb(236,106,1)" fg:x="85634" fg:w="35035"/><text x="56.9767%" y="847.50">&lt;core::future::from_generator::GenFut..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_data::{{closure}} (35,035 samples, 23.21%)</title><rect x="56.7267%" y="821" width="23.2083%" height="15" fill="rgb(219,228,13)" fg:x="85634" fg:w="35035"/><text x="56.9767%" y="831.50">tremor_runtime::connectors::source::S..</text></g><g><title>tremor_runtime::connectors::source::build_events (35,032 samples, 23.21%)</title><rect x="56.7286%" y="805" width="23.2063%" height="15" fill="rgb(238,30,35)" fg:x="85637" fg:w="35032"/><text x="56.9786%" y="815.50">tremor_runtime::connectors::source::b..</text></g><g><title>tremor_script::srs::EventPayload::try_new (35,013 samples, 23.19%)</title><rect x="56.7412%" y="789" width="23.1937%" height="15" fill="rgb(236,70,23)" fg:x="85656" fg:w="35013"/><text x="56.9912%" y="799.50">tremor_script::srs::EventPayload::try..</text></g><g><title>tremor_runtime::connectors::source::build_last_events::{{closure}} (35,011 samples, 23.19%)</title><rect x="56.7426%" y="773" width="23.1924%" height="15" fill="rgb(249,104,48)" fg:x="85658" fg:w="35011"/><text x="56.9926%" y="783.50">tremor_runtime::connectors::source::b..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::run::{{closure}} (35,036 samples, 23.21%)</title><rect x="56.7267%" y="885" width="23.2090%" height="15" fill="rgb(254,117,50)" fg:x="85634" fg:w="35036"/><text x="56.9767%" y="895.50">tremor_runtime::connectors::source::S..</text></g><g><title>tremor_runtime::connectors::source::Streams::get_or_create_stream (47 samples, 0.03%)</title><rect x="79.9356%" y="885" width="0.0311%" height="15" fill="rgb(223,152,4)" fg:x="120670" fg:w="47"/><text x="80.1856%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (20 samples, 0.01%)</title><rect x="80.0025%" y="773" width="0.0132%" height="15" fill="rgb(245,6,2)" fg:x="120771" fg:w="20"/><text x="80.2525%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (20 samples, 0.01%)</title><rect x="80.0025%" y="757" width="0.0132%" height="15" fill="rgb(249,150,24)" fg:x="120771" fg:w="20"/><text x="80.2525%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (20 samples, 0.01%)</title><rect x="80.0025%" y="741" width="0.0132%" height="15" fill="rgb(228,185,42)" fg:x="120771" fg:w="20"/><text x="80.2525%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (20 samples, 0.01%)</title><rect x="80.0025%" y="725" width="0.0132%" height="15" fill="rgb(226,39,33)" fg:x="120771" fg:w="20"/><text x="80.2525%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (20 samples, 0.01%)</title><rect x="80.0025%" y="709" width="0.0132%" height="15" fill="rgb(221,166,19)" fg:x="120771" fg:w="20"/><text x="80.2525%" y="719.50"></text></g><g><title>alloc::alloc::alloc (20 samples, 0.01%)</title><rect x="80.0025%" y="693" width="0.0132%" height="15" fill="rgb(209,109,2)" fg:x="120771" fg:w="20"/><text x="80.2525%" y="703.50"></text></g><g><title>__rg_alloc (20 samples, 0.01%)</title><rect x="80.0025%" y="677" width="0.0132%" height="15" fill="rgb(252,216,26)" fg:x="120771" fg:w="20"/><text x="80.2525%" y="687.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (20 samples, 0.01%)</title><rect x="80.0025%" y="661" width="0.0132%" height="15" fill="rgb(227,173,36)" fg:x="120771" fg:w="20"/><text x="80.2525%" y="671.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (35 samples, 0.02%)</title><rect x="79.9985%" y="869" width="0.0232%" height="15" fill="rgb(209,90,7)" fg:x="120765" fg:w="35"/><text x="80.2485%" y="879.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (29 samples, 0.02%)</title><rect x="80.0025%" y="853" width="0.0192%" height="15" fill="rgb(250,194,11)" fg:x="120771" fg:w="29"/><text x="80.2525%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (29 samples, 0.02%)</title><rect x="80.0025%" y="837" width="0.0192%" height="15" fill="rgb(220,72,50)" fg:x="120771" fg:w="29"/><text x="80.2525%" y="847.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (29 samples, 0.02%)</title><rect x="80.0025%" y="821" width="0.0192%" height="15" fill="rgb(222,106,48)" fg:x="120771" fg:w="29"/><text x="80.2525%" y="831.50"></text></g><g><title>alloc::slice::hack::to_vec (29 samples, 0.02%)</title><rect x="80.0025%" y="805" width="0.0192%" height="15" fill="rgb(216,220,45)" fg:x="120771" fg:w="29"/><text x="80.2525%" y="815.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (29 samples, 0.02%)</title><rect x="80.0025%" y="789" width="0.0192%" height="15" fill="rgb(234,112,18)" fg:x="120771" fg:w="29"/><text x="80.2525%" y="799.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (115 samples, 0.08%)</title><rect x="79.9674%" y="885" width="0.0762%" height="15" fill="rgb(206,179,9)" fg:x="120718" fg:w="115"/><text x="80.2174%" y="895.50"></text></g><g><title>tremor_runtime::pipeline::maybe_send (20 samples, 0.01%)</title><rect x="80.0509%" y="885" width="0.0132%" height="15" fill="rgb(215,115,40)" fg:x="120844" fg:w="20"/><text x="80.3009%" y="895.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (134 samples, 0.09%)</title><rect x="80.1483%" y="725" width="0.0888%" height="15" fill="rgb(222,69,34)" fg:x="120991" fg:w="134"/><text x="80.3983%" y="735.50"></text></g><g><title>core::mem::replace (134 samples, 0.09%)</title><rect x="80.1483%" y="709" width="0.0888%" height="15" fill="rgb(209,161,10)" fg:x="120991" fg:w="134"/><text x="80.3983%" y="719.50"></text></g><g><title>core::ptr::read (134 samples, 0.09%)</title><rect x="80.1483%" y="693" width="0.0888%" height="15" fill="rgb(217,6,38)" fg:x="120991" fg:w="134"/><text x="80.3983%" y="703.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (231 samples, 0.15%)</title><rect x="80.1145%" y="741" width="0.1530%" height="15" fill="rgb(229,229,48)" fg:x="120940" fg:w="231"/><text x="80.3645%" y="751.50"></text></g><g><title>core::mem::drop (46 samples, 0.03%)</title><rect x="80.2370%" y="725" width="0.0305%" height="15" fill="rgb(225,21,28)" fg:x="121125" fg:w="46"/><text x="80.4870%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (46 samples, 0.03%)</title><rect x="80.2370%" y="709" width="0.0305%" height="15" fill="rgb(206,33,13)" fg:x="121125" fg:w="46"/><text x="80.4870%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (240 samples, 0.16%)</title><rect x="80.2675%" y="741" width="0.1590%" height="15" fill="rgb(242,178,17)" fg:x="121171" fg:w="240"/><text x="80.5175%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (227 samples, 0.15%)</title><rect x="80.2761%" y="725" width="0.1504%" height="15" fill="rgb(220,162,5)" fg:x="121184" fg:w="227"/><text x="80.5261%" y="735.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (227 samples, 0.15%)</title><rect x="80.2761%" y="709" width="0.1504%" height="15" fill="rgb(210,33,43)" fg:x="121184" fg:w="227"/><text x="80.5261%" y="719.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (206 samples, 0.14%)</title><rect x="80.2900%" y="693" width="0.1365%" height="15" fill="rgb(216,116,54)" fg:x="121205" fg:w="206"/><text x="80.5400%" y="703.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (206 samples, 0.14%)</title><rect x="80.2900%" y="677" width="0.1365%" height="15" fill="rgb(249,92,24)" fg:x="121205" fg:w="206"/><text x="80.5400%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (206 samples, 0.14%)</title><rect x="80.2900%" y="661" width="0.1365%" height="15" fill="rgb(231,189,14)" fg:x="121205" fg:w="206"/><text x="80.5400%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_swap (206 samples, 0.14%)</title><rect x="80.2900%" y="645" width="0.1365%" height="15" fill="rgb(230,8,41)" fg:x="121205" fg:w="206"/><text x="80.5400%" y="655.50"></text></g><g><title>core::task::wake::Waker::will_wake (28 samples, 0.02%)</title><rect x="80.4364%" y="741" width="0.0185%" height="15" fill="rgb(249,7,27)" fg:x="121426" fg:w="28"/><text x="80.6864%" y="751.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (28 samples, 0.02%)</title><rect x="80.4364%" y="725" width="0.0185%" height="15" fill="rgb(232,86,5)" fg:x="121426" fg:w="28"/><text x="80.6864%" y="735.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (28 samples, 0.02%)</title><rect x="80.4364%" y="709" width="0.0185%" height="15" fill="rgb(224,175,18)" fg:x="121426" fg:w="28"/><text x="80.6864%" y="719.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (28 samples, 0.02%)</title><rect x="80.4364%" y="693" width="0.0185%" height="15" fill="rgb(220,129,12)" fg:x="121426" fg:w="28"/><text x="80.6864%" y="703.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (19 samples, 0.01%)</title><rect x="80.4682%" y="709" width="0.0126%" height="15" fill="rgb(210,19,36)" fg:x="121474" fg:w="19"/><text x="80.7182%" y="719.50"></text></g><g><title>std::sync::poison::Flag::borrow (19 samples, 0.01%)</title><rect x="80.4682%" y="693" width="0.0126%" height="15" fill="rgb(219,96,14)" fg:x="121474" fg:w="19"/><text x="80.7182%" y="703.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (924 samples, 0.61%)</title><rect x="80.0688%" y="757" width="0.6121%" height="15" fill="rgb(249,106,1)" fg:x="120871" fg:w="924"/><text x="80.3188%" y="767.50"></text></g><g><title>event_listener::Inner::lock (341 samples, 0.23%)</title><rect x="80.4550%" y="741" width="0.2259%" height="15" fill="rgb(249,155,20)" fg:x="121454" fg:w="341"/><text x="80.7050%" y="751.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (321 samples, 0.21%)</title><rect x="80.4682%" y="725" width="0.2126%" height="15" fill="rgb(244,168,9)" fg:x="121474" fg:w="321"/><text x="80.7182%" y="735.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (302 samples, 0.20%)</title><rect x="80.4808%" y="709" width="0.2001%" height="15" fill="rgb(216,23,50)" fg:x="121493" fg:w="302"/><text x="80.7308%" y="719.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (302 samples, 0.20%)</title><rect x="80.4808%" y="693" width="0.2001%" height="15" fill="rgb(224,219,20)" fg:x="121493" fg:w="302"/><text x="80.7308%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (302 samples, 0.20%)</title><rect x="80.4808%" y="677" width="0.2001%" height="15" fill="rgb(222,156,15)" fg:x="121493" fg:w="302"/><text x="80.7308%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (302 samples, 0.20%)</title><rect x="80.4808%" y="661" width="0.2001%" height="15" fill="rgb(231,97,17)" fg:x="121493" fg:w="302"/><text x="80.7308%" y="671.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (925 samples, 0.61%)</title><rect x="80.0688%" y="869" width="0.6127%" height="15" fill="rgb(218,70,48)" fg:x="120871" fg:w="925"/><text x="80.3188%" y="879.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (925 samples, 0.61%)</title><rect x="80.0688%" y="853" width="0.6127%" height="15" fill="rgb(212,196,52)" fg:x="120871" fg:w="925"/><text x="80.3188%" y="863.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (925 samples, 0.61%)</title><rect x="80.0688%" y="837" width="0.6127%" height="15" fill="rgb(243,203,18)" fg:x="120871" fg:w="925"/><text x="80.3188%" y="847.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (925 samples, 0.61%)</title><rect x="80.0688%" y="821" width="0.6127%" height="15" fill="rgb(252,125,41)" fg:x="120871" fg:w="925"/><text x="80.3188%" y="831.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (925 samples, 0.61%)</title><rect x="80.0688%" y="805" width="0.6127%" height="15" fill="rgb(223,180,33)" fg:x="120871" fg:w="925"/><text x="80.3188%" y="815.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (925 samples, 0.61%)</title><rect x="80.0688%" y="789" width="0.6127%" height="15" fill="rgb(254,159,46)" fg:x="120871" fg:w="925"/><text x="80.3188%" y="799.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (925 samples, 0.61%)</title><rect x="80.0688%" y="773" width="0.6127%" height="15" fill="rgb(254,38,10)" fg:x="120871" fg:w="925"/><text x="80.3188%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (28 samples, 0.02%)</title><rect x="80.7345%" y="741" width="0.0185%" height="15" fill="rgb(208,217,32)" fg:x="121876" fg:w="28"/><text x="80.9845%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_add (28 samples, 0.02%)</title><rect x="80.7345%" y="725" width="0.0185%" height="15" fill="rgb(221,120,13)" fg:x="121876" fg:w="28"/><text x="80.9845%" y="735.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (31 samples, 0.02%)</title><rect x="80.7332%" y="773" width="0.0205%" height="15" fill="rgb(246,54,52)" fg:x="121874" fg:w="31"/><text x="80.9832%" y="783.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (29 samples, 0.02%)</title><rect x="80.7345%" y="757" width="0.0192%" height="15" fill="rgb(242,34,25)" fg:x="121876" fg:w="29"/><text x="80.9845%" y="767.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (16 samples, 0.01%)</title><rect x="80.7544%" y="773" width="0.0106%" height="15" fill="rgb(247,209,9)" fg:x="121906" fg:w="16"/><text x="81.0044%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (46 samples, 0.03%)</title><rect x="80.7650%" y="773" width="0.0305%" height="15" fill="rgb(228,71,26)" fg:x="121922" fg:w="46"/><text x="81.0150%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (42 samples, 0.03%)</title><rect x="80.7676%" y="757" width="0.0278%" height="15" fill="rgb(222,145,49)" fg:x="121926" fg:w="42"/><text x="81.0176%" y="767.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (42 samples, 0.03%)</title><rect x="80.7676%" y="741" width="0.0278%" height="15" fill="rgb(218,121,17)" fg:x="121926" fg:w="42"/><text x="81.0176%" y="751.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (39 samples, 0.03%)</title><rect x="80.7696%" y="725" width="0.0258%" height="15" fill="rgb(244,50,7)" fg:x="121929" fg:w="39"/><text x="81.0196%" y="735.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (39 samples, 0.03%)</title><rect x="80.7696%" y="709" width="0.0258%" height="15" fill="rgb(246,229,37)" fg:x="121929" fg:w="39"/><text x="81.0196%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (39 samples, 0.03%)</title><rect x="80.7696%" y="693" width="0.0258%" height="15" fill="rgb(225,18,5)" fg:x="121929" fg:w="39"/><text x="81.0196%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_swap (39 samples, 0.03%)</title><rect x="80.7696%" y="677" width="0.0258%" height="15" fill="rgb(213,204,8)" fg:x="121929" fg:w="39"/><text x="81.0196%" y="687.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (162 samples, 0.11%)</title><rect x="80.7312%" y="789" width="0.1073%" height="15" fill="rgb(238,103,6)" fg:x="121871" fg:w="162"/><text x="80.9812%" y="799.50"></text></g><g><title>event_listener::Inner::lock (63 samples, 0.04%)</title><rect x="80.7968%" y="773" width="0.0417%" height="15" fill="rgb(222,25,35)" fg:x="121970" fg:w="63"/><text x="81.0468%" y="783.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (63 samples, 0.04%)</title><rect x="80.7968%" y="757" width="0.0417%" height="15" fill="rgb(213,203,35)" fg:x="121970" fg:w="63"/><text x="81.0468%" y="767.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (62 samples, 0.04%)</title><rect x="80.7974%" y="741" width="0.0411%" height="15" fill="rgb(221,79,53)" fg:x="121971" fg:w="62"/><text x="81.0474%" y="751.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (62 samples, 0.04%)</title><rect x="80.7974%" y="725" width="0.0411%" height="15" fill="rgb(243,200,35)" fg:x="121971" fg:w="62"/><text x="81.0474%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (62 samples, 0.04%)</title><rect x="80.7974%" y="709" width="0.0411%" height="15" fill="rgb(248,60,25)" fg:x="121971" fg:w="62"/><text x="81.0474%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (62 samples, 0.04%)</title><rect x="80.7974%" y="693" width="0.0411%" height="15" fill="rgb(227,53,46)" fg:x="121971" fg:w="62"/><text x="81.0474%" y="703.50"></text></g><g><title>[libc-2.31.so] (89 samples, 0.06%)</title><rect x="80.8385%" y="789" width="0.0590%" height="15" fill="rgb(216,120,32)" fg:x="122033" fg:w="89"/><text x="81.0885%" y="799.50"></text></g><g><title>[libc-2.31.so] (73 samples, 0.05%)</title><rect x="80.9173%" y="773" width="0.0484%" height="15" fill="rgb(220,134,1)" fg:x="122152" fg:w="73"/><text x="81.1673%" y="783.50"></text></g><g><title>[libc-2.31.so] (539 samples, 0.36%)</title><rect x="81.0207%" y="757" width="0.3571%" height="15" fill="rgb(237,168,5)" fg:x="122308" fg:w="539"/><text x="81.2707%" y="767.50"></text></g><g><title>[libc-2.31.so] (51 samples, 0.03%)</title><rect x="81.4493%" y="741" width="0.0338%" height="15" fill="rgb(231,100,33)" fg:x="122955" fg:w="51"/><text x="81.6993%" y="751.50"></text></g><g><title>concurrent_queue::full_fence (83 samples, 0.05%)</title><rect x="81.4831%" y="741" width="0.0550%" height="15" fill="rgb(236,177,47)" fg:x="123006" fg:w="83"/><text x="81.7331%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (79 samples, 0.05%)</title><rect x="81.4857%" y="725" width="0.0523%" height="15" fill="rgb(235,7,49)" fg:x="123010" fg:w="79"/><text x="81.7357%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (79 samples, 0.05%)</title><rect x="81.4857%" y="709" width="0.0523%" height="15" fill="rgb(232,119,22)" fg:x="123010" fg:w="79"/><text x="81.7357%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (79 samples, 0.05%)</title><rect x="81.4857%" y="693" width="0.0523%" height="15" fill="rgb(254,73,53)" fg:x="123010" fg:w="79"/><text x="81.7357%" y="703.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (17 samples, 0.01%)</title><rect x="81.5380%" y="741" width="0.0113%" height="15" fill="rgb(251,35,20)" fg:x="123089" fg:w="17"/><text x="81.7880%" y="751.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (166 samples, 0.11%)</title><rect x="81.5493%" y="741" width="0.1100%" height="15" fill="rgb(241,119,20)" fg:x="123106" fg:w="166"/><text x="81.7993%" y="751.50"></text></g><g><title>core::ptr::write (166 samples, 0.11%)</title><rect x="81.5493%" y="725" width="0.1100%" height="15" fill="rgb(207,102,14)" fg:x="123106" fg:w="166"/><text x="81.7993%" y="735.50"></text></g><g><title>[libc-2.31.so] (160 samples, 0.11%)</title><rect x="81.5533%" y="709" width="0.1060%" height="15" fill="rgb(248,201,50)" fg:x="123112" fg:w="160"/><text x="81.8033%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (219 samples, 0.15%)</title><rect x="81.6593%" y="741" width="0.1451%" height="15" fill="rgb(222,185,44)" fg:x="123272" fg:w="219"/><text x="81.9093%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (219 samples, 0.15%)</title><rect x="81.6593%" y="725" width="0.1451%" height="15" fill="rgb(218,107,18)" fg:x="123272" fg:w="219"/><text x="81.9093%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (447 samples, 0.30%)</title><rect x="81.8043%" y="741" width="0.2961%" height="15" fill="rgb(237,177,39)" fg:x="123491" fg:w="447"/><text x="82.0543%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_load (444 samples, 0.29%)</title><rect x="81.8063%" y="725" width="0.2941%" height="15" fill="rgb(246,69,6)" fg:x="123494" fg:w="444"/><text x="82.0563%" y="735.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (1,724 samples, 1.14%)</title><rect x="80.9657%" y="773" width="1.1420%" height="15" fill="rgb(234,208,37)" fg:x="122225" fg:w="1724"/><text x="81.2157%" y="783.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (1,102 samples, 0.73%)</title><rect x="81.3777%" y="757" width="0.7300%" height="15" fill="rgb(225,4,6)" fg:x="122847" fg:w="1102"/><text x="81.6277%" y="767.50"></text></g><g><title>async_executor::State::notify (23 samples, 0.02%)</title><rect x="82.1448%" y="677" width="0.0152%" height="15" fill="rgb(233,45,0)" fg:x="124005" fg:w="23"/><text x="82.3948%" y="687.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (50 samples, 0.03%)</title><rect x="82.1448%" y="693" width="0.0331%" height="15" fill="rgb(226,136,5)" fg:x="124005" fg:w="50"/><text x="82.3948%" y="703.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (27 samples, 0.02%)</title><rect x="82.1601%" y="677" width="0.0179%" height="15" fill="rgb(211,91,47)" fg:x="124028" fg:w="27"/><text x="82.4101%" y="687.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (25 samples, 0.02%)</title><rect x="82.1614%" y="661" width="0.0166%" height="15" fill="rgb(242,88,51)" fg:x="124030" fg:w="25"/><text x="82.4114%" y="671.50"></text></g><g><title>event_listener::List::notify (71 samples, 0.05%)</title><rect x="82.1408%" y="757" width="0.0470%" height="15" fill="rgb(230,91,28)" fg:x="123999" fg:w="71"/><text x="82.3908%" y="767.50"></text></g><g><title>core::task::wake::Waker::wake (70 samples, 0.05%)</title><rect x="82.1415%" y="741" width="0.0464%" height="15" fill="rgb(254,186,29)" fg:x="124000" fg:w="70"/><text x="82.3915%" y="751.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (70 samples, 0.05%)</title><rect x="82.1415%" y="725" width="0.0464%" height="15" fill="rgb(238,6,4)" fg:x="124000" fg:w="70"/><text x="82.3915%" y="735.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (66 samples, 0.04%)</title><rect x="82.1442%" y="709" width="0.0437%" height="15" fill="rgb(221,151,16)" fg:x="124004" fg:w="66"/><text x="82.3942%" y="719.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (3,275 samples, 2.17%)</title><rect x="80.8975%" y="789" width="2.1695%" height="15" fill="rgb(251,143,52)" fg:x="122122" fg:w="3275"/><text x="81.1475%" y="799.50">a..</text></g><g><title>event_listener::Event::notify (1,448 samples, 0.96%)</title><rect x="82.1077%" y="773" width="0.9592%" height="15" fill="rgb(206,90,15)" fg:x="123949" fg:w="1448"/><text x="82.3577%" y="783.50"></text></g><g><title>event_listener::full_fence (1,327 samples, 0.88%)</title><rect x="82.1879%" y="757" width="0.8790%" height="15" fill="rgb(218,35,8)" fg:x="124070" fg:w="1327"/><text x="82.4379%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1,318 samples, 0.87%)</title><rect x="82.1938%" y="741" width="0.8731%" height="15" fill="rgb(239,215,6)" fg:x="124079" fg:w="1318"/><text x="82.4438%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1,318 samples, 0.87%)</title><rect x="82.1938%" y="725" width="0.8731%" height="15" fill="rgb(245,116,39)" fg:x="124079" fg:w="1318"/><text x="82.4438%" y="735.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::capacity (17 samples, 0.01%)</title><rect x="83.0669%" y="789" width="0.0113%" height="15" fill="rgb(242,65,28)" fg:x="125397" fg:w="17"/><text x="83.3169%" y="799.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (94 samples, 0.06%)</title><rect x="83.0875%" y="773" width="0.0623%" height="15" fill="rgb(252,132,53)" fg:x="125428" fg:w="94"/><text x="83.3375%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (94 samples, 0.06%)</title><rect x="83.0875%" y="757" width="0.0623%" height="15" fill="rgb(224,159,50)" fg:x="125428" fg:w="94"/><text x="83.3375%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_add (94 samples, 0.06%)</title><rect x="83.0875%" y="741" width="0.0623%" height="15" fill="rgb(224,93,4)" fg:x="125428" fg:w="94"/><text x="83.3375%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (64 samples, 0.04%)</title><rect x="83.1497%" y="773" width="0.0424%" height="15" fill="rgb(208,81,34)" fg:x="125522" fg:w="64"/><text x="83.3997%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (62 samples, 0.04%)</title><rect x="83.1511%" y="757" width="0.0411%" height="15" fill="rgb(233,92,54)" fg:x="125524" fg:w="62"/><text x="83.4011%" y="767.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (62 samples, 0.04%)</title><rect x="83.1511%" y="741" width="0.0411%" height="15" fill="rgb(237,21,14)" fg:x="125524" fg:w="62"/><text x="83.4011%" y="751.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (62 samples, 0.04%)</title><rect x="83.1511%" y="725" width="0.0411%" height="15" fill="rgb(249,128,51)" fg:x="125524" fg:w="62"/><text x="83.4011%" y="735.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (62 samples, 0.04%)</title><rect x="83.1511%" y="709" width="0.0411%" height="15" fill="rgb(223,129,24)" fg:x="125524" fg:w="62"/><text x="83.4011%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (62 samples, 0.04%)</title><rect x="83.1511%" y="693" width="0.0411%" height="15" fill="rgb(231,168,25)" fg:x="125524" fg:w="62"/><text x="83.4011%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_swap (62 samples, 0.04%)</title><rect x="83.1511%" y="677" width="0.0411%" height="15" fill="rgb(224,39,20)" fg:x="125524" fg:w="62"/><text x="83.4011%" y="687.50"></text></g><g><title>event_listener::Inner::lock (43 samples, 0.03%)</title><rect x="83.1928%" y="773" width="0.0285%" height="15" fill="rgb(225,152,53)" fg:x="125587" fg:w="43"/><text x="83.4428%" y="783.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (38 samples, 0.03%)</title><rect x="83.1961%" y="757" width="0.0252%" height="15" fill="rgb(252,17,24)" fg:x="125592" fg:w="38"/><text x="83.4461%" y="767.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (37 samples, 0.02%)</title><rect x="83.1968%" y="741" width="0.0245%" height="15" fill="rgb(250,114,30)" fg:x="125593" fg:w="37"/><text x="83.4468%" y="751.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (37 samples, 0.02%)</title><rect x="83.1968%" y="725" width="0.0245%" height="15" fill="rgb(229,5,4)" fg:x="125593" fg:w="37"/><text x="83.4468%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (37 samples, 0.02%)</title><rect x="83.1968%" y="709" width="0.0245%" height="15" fill="rgb(225,176,49)" fg:x="125593" fg:w="37"/><text x="83.4468%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (37 samples, 0.02%)</title><rect x="83.1968%" y="693" width="0.0245%" height="15" fill="rgb(224,221,49)" fg:x="125593" fg:w="37"/><text x="83.4468%" y="703.50"></text></g><g><title>event_listener::Event::listen (243 samples, 0.16%)</title><rect x="83.0822%" y="789" width="0.1610%" height="15" fill="rgb(253,169,27)" fg:x="125420" fg:w="243"/><text x="83.3322%" y="799.50"></text></g><g><title>event_listener::full_fence (28 samples, 0.02%)</title><rect x="83.2246%" y="773" width="0.0185%" height="15" fill="rgb(211,206,16)" fg:x="125635" fg:w="28"/><text x="83.4746%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (25 samples, 0.02%)</title><rect x="83.2266%" y="757" width="0.0166%" height="15" fill="rgb(244,87,35)" fg:x="125638" fg:w="25"/><text x="83.4766%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (25 samples, 0.02%)</title><rect x="83.2266%" y="741" width="0.0166%" height="15" fill="rgb(246,28,10)" fg:x="125638" fg:w="25"/><text x="83.4766%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (17 samples, 0.01%)</title><rect x="83.2517%" y="773" width="0.0113%" height="15" fill="rgb(229,12,44)" fg:x="125676" fg:w="17"/><text x="83.5017%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_load (17 samples, 0.01%)</title><rect x="83.2517%" y="757" width="0.0113%" height="15" fill="rgb(210,145,37)" fg:x="125676" fg:w="17"/><text x="83.5017%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (38 samples, 0.03%)</title><rect x="83.2782%" y="693" width="0.0252%" height="15" fill="rgb(227,112,52)" fg:x="125716" fg:w="38"/><text x="83.5282%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (38 samples, 0.03%)</title><rect x="83.2782%" y="677" width="0.0252%" height="15" fill="rgb(238,155,34)" fg:x="125716" fg:w="38"/><text x="83.5282%" y="687.50"></text></g><g><title>core::hint::spin_loop (873 samples, 0.58%)</title><rect x="83.3094%" y="677" width="0.5783%" height="15" fill="rgb(239,226,36)" fg:x="125763" fg:w="873"/><text x="83.5594%" y="687.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (873 samples, 0.58%)</title><rect x="83.3094%" y="661" width="0.5783%" height="15" fill="rgb(230,16,23)" fg:x="125763" fg:w="873"/><text x="83.5594%" y="671.50"></text></g><g><title>event_listener::Inner::lock (981 samples, 0.65%)</title><rect x="83.2630%" y="773" width="0.6498%" height="15" fill="rgb(236,171,36)" fg:x="125693" fg:w="981"/><text x="83.5130%" y="783.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (979 samples, 0.65%)</title><rect x="83.2643%" y="757" width="0.6485%" height="15" fill="rgb(221,22,14)" fg:x="125695" fg:w="979"/><text x="83.5143%" y="767.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (979 samples, 0.65%)</title><rect x="83.2643%" y="741" width="0.6485%" height="15" fill="rgb(242,43,11)" fg:x="125695" fg:w="979"/><text x="83.5143%" y="751.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (979 samples, 0.65%)</title><rect x="83.2643%" y="725" width="0.6485%" height="15" fill="rgb(232,69,23)" fg:x="125695" fg:w="979"/><text x="83.5143%" y="735.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (964 samples, 0.64%)</title><rect x="83.2743%" y="709" width="0.6386%" height="15" fill="rgb(216,180,54)" fg:x="125710" fg:w="964"/><text x="83.5243%" y="719.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (920 samples, 0.61%)</title><rect x="83.3034%" y="693" width="0.6094%" height="15" fill="rgb(216,5,24)" fg:x="125754" fg:w="920"/><text x="83.5534%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (38 samples, 0.03%)</title><rect x="83.8877%" y="677" width="0.0252%" height="15" fill="rgb(225,89,9)" fg:x="126636" fg:w="38"/><text x="84.1377%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_load (38 samples, 0.03%)</title><rect x="83.8877%" y="661" width="0.0252%" height="15" fill="rgb(243,75,33)" fg:x="126636" fg:w="38"/><text x="84.1377%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,095 samples, 3.38%)</title><rect x="80.6815%" y="837" width="3.3751%" height="15" fill="rgb(247,141,45)" fg:x="121796" fg:w="5095"/><text x="80.9315%" y="847.50">&lt;co..</text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (5,095 samples, 3.38%)</title><rect x="80.6815%" y="821" width="3.3751%" height="15" fill="rgb(232,177,36)" fg:x="121796" fg:w="5095"/><text x="80.9315%" y="831.50">tre..</text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (5,095 samples, 3.38%)</title><rect x="80.6815%" y="805" width="3.3751%" height="15" fill="rgb(219,125,36)" fg:x="121796" fg:w="5095"/><text x="80.9315%" y="815.50">&lt;as..</text></g><g><title>event_listener::Event::notify (1,228 samples, 0.81%)</title><rect x="83.2431%" y="789" width="0.8135%" height="15" fill="rgb(227,94,9)" fg:x="125663" fg:w="1228"/><text x="83.4931%" y="799.50"></text></g><g><title>event_listener::full_fence (217 samples, 0.14%)</title><rect x="83.9129%" y="773" width="0.1437%" height="15" fill="rgb(240,34,52)" fg:x="126674" fg:w="217"/><text x="84.1629%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (205 samples, 0.14%)</title><rect x="83.9208%" y="757" width="0.1358%" height="15" fill="rgb(216,45,12)" fg:x="126686" fg:w="205"/><text x="84.1708%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (205 samples, 0.14%)</title><rect x="83.9208%" y="741" width="0.1358%" height="15" fill="rgb(246,21,19)" fg:x="126686" fg:w="205"/><text x="84.1708%" y="751.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (6,038 samples, 4.00%)</title><rect x="80.0641%" y="885" width="3.9998%" height="15" fill="rgb(213,98,42)" fg:x="120864" fg:w="6038"/><text x="80.3141%" y="895.50">trem..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,106 samples, 3.38%)</title><rect x="80.6815%" y="869" width="3.3824%" height="15" fill="rgb(250,136,47)" fg:x="121796" fg:w="5106"/><text x="80.9315%" y="879.50">&lt;co..</text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (5,106 samples, 3.38%)</title><rect x="80.6815%" y="853" width="3.3824%" height="15" fill="rgb(251,124,27)" fg:x="121796" fg:w="5106"/><text x="80.9315%" y="863.50">tre..</text></g><g><title>tremor_runtime::postprocessor::postprocess (33 samples, 0.02%)</title><rect x="84.0639%" y="885" width="0.0219%" height="15" fill="rgb(229,180,14)" fg:x="126902" fg:w="33"/><text x="84.3139%" y="895.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (25 samples, 0.02%)</title><rect x="84.0857%" y="885" width="0.0166%" height="15" fill="rgb(245,216,25)" fg:x="126935" fg:w="25"/><text x="84.3357%" y="895.50"></text></g><g><title>tremor_script::srs::EventPayload::try_new (18 samples, 0.01%)</title><rect x="84.1043%" y="885" width="0.0119%" height="15" fill="rgb(251,43,5)" fg:x="126963" fg:w="18"/><text x="84.3543%" y="895.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (238 samples, 0.16%)</title><rect x="84.1162%" y="885" width="0.1577%" height="15" fill="rgb(250,128,24)" fg:x="126981" fg:w="238"/><text x="84.3662%" y="895.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (292 samples, 0.19%)</title><rect x="84.2739%" y="885" width="0.1934%" height="15" fill="rgb(217,117,27)" fg:x="127219" fg:w="292"/><text x="84.5239%" y="895.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_object (44 samples, 0.03%)</title><rect x="84.4382%" y="869" width="0.0291%" height="15" fill="rgb(245,147,4)" fg:x="127467" fg:w="44"/><text x="84.6882%" y="879.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_simple_str_content (24 samples, 0.02%)</title><rect x="84.4514%" y="853" width="0.0159%" height="15" fill="rgb(242,201,35)" fg:x="127487" fg:w="24"/><text x="84.7014%" y="863.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (24 samples, 0.02%)</title><rect x="84.4514%" y="837" width="0.0159%" height="15" fill="rgb(218,181,1)" fg:x="127487" fg:w="24"/><text x="84.7014%" y="847.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (24 samples, 0.02%)</title><rect x="84.4514%" y="821" width="0.0159%" height="15" fill="rgb(222,6,29)" fg:x="127487" fg:w="24"/><text x="84.7014%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (24 samples, 0.02%)</title><rect x="84.4514%" y="805" width="0.0159%" height="15" fill="rgb(208,186,3)" fg:x="127487" fg:w="24"/><text x="84.7014%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (24 samples, 0.02%)</title><rect x="84.4514%" y="789" width="0.0159%" height="15" fill="rgb(216,36,26)" fg:x="127487" fg:w="24"/><text x="84.7014%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (24 samples, 0.02%)</title><rect x="84.4514%" y="773" width="0.0159%" height="15" fill="rgb(248,201,23)" fg:x="127487" fg:w="24"/><text x="84.7014%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (24 samples, 0.02%)</title><rect x="84.4514%" y="757" width="0.0159%" height="15" fill="rgb(251,170,31)" fg:x="127487" fg:w="24"/><text x="84.7014%" y="767.50"></text></g><g><title>[unknown] (120,788 samples, 80.01%)</title><rect x="4.4542%" y="901" width="80.0138%" height="15" fill="rgb(207,110,25)" fg:x="6724" fg:w="120788"/><text x="4.7042%" y="911.50">[unknown]</text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (34 samples, 0.02%)</title><rect x="84.4680%" y="885" width="0.0225%" height="15" fill="rgb(250,54,15)" fg:x="127512" fg:w="34"/><text x="84.7180%" y="895.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (34 samples, 0.02%)</title><rect x="84.4978%" y="885" width="0.0225%" height="15" fill="rgb(227,68,33)" fg:x="127557" fg:w="34"/><text x="84.7478%" y="895.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (59 samples, 0.04%)</title><rect x="84.5289%" y="885" width="0.0391%" height="15" fill="rgb(238,34,41)" fg:x="127604" fg:w="59"/><text x="84.7789%" y="895.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (53 samples, 0.04%)</title><rect x="84.5329%" y="869" width="0.0351%" height="15" fill="rgb(220,11,15)" fg:x="127610" fg:w="53"/><text x="84.7829%" y="879.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (51 samples, 0.03%)</title><rect x="84.5342%" y="853" width="0.0338%" height="15" fill="rgb(246,111,35)" fg:x="127612" fg:w="51"/><text x="84.7842%" y="863.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (34 samples, 0.02%)</title><rect x="84.5759%" y="885" width="0.0225%" height="15" fill="rgb(209,88,53)" fg:x="127675" fg:w="34"/><text x="84.8259%" y="895.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::run::{{closure}} (80 samples, 0.05%)</title><rect x="84.6011%" y="885" width="0.0530%" height="15" fill="rgb(231,185,47)" fg:x="127713" fg:w="80"/><text x="84.8511%" y="895.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (57 samples, 0.04%)</title><rect x="84.6164%" y="869" width="0.0378%" height="15" fill="rgb(233,154,1)" fg:x="127736" fg:w="57"/><text x="84.8664%" y="879.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_source_reply::{{closure}} (50 samples, 0.03%)</title><rect x="84.6210%" y="853" width="0.0331%" height="15" fill="rgb(225,15,46)" fg:x="127743" fg:w="50"/><text x="84.8710%" y="863.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (42 samples, 0.03%)</title><rect x="84.6263%" y="837" width="0.0278%" height="15" fill="rgb(211,135,41)" fg:x="127751" fg:w="42"/><text x="84.8763%" y="847.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_data::{{closure}} (37 samples, 0.02%)</title><rect x="84.6296%" y="821" width="0.0245%" height="15" fill="rgb(208,54,0)" fg:x="127756" fg:w="37"/><text x="84.8796%" y="831.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (61 samples, 0.04%)</title><rect x="84.7283%" y="869" width="0.0404%" height="15" fill="rgb(244,136,14)" fg:x="127905" fg:w="61"/><text x="84.9783%" y="879.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (52 samples, 0.03%)</title><rect x="84.7343%" y="853" width="0.0344%" height="15" fill="rgb(241,56,14)" fg:x="127914" fg:w="52"/><text x="84.9843%" y="863.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (17 samples, 0.01%)</title><rect x="84.7575%" y="837" width="0.0113%" height="15" fill="rgb(205,80,24)" fg:x="127949" fg:w="17"/><text x="85.0075%" y="847.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (17 samples, 0.01%)</title><rect x="84.7575%" y="821" width="0.0113%" height="15" fill="rgb(220,57,4)" fg:x="127949" fg:w="17"/><text x="85.0075%" y="831.50"></text></g><g><title>__dso_handle (461 samples, 0.31%)</title><rect x="84.4680%" y="901" width="0.3054%" height="15" fill="rgb(226,193,50)" fg:x="127512" fg:w="461"/><text x="84.7180%" y="911.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (180 samples, 0.12%)</title><rect x="84.6541%" y="885" width="0.1192%" height="15" fill="rgb(231,168,22)" fg:x="127793" fg:w="180"/><text x="84.9041%" y="895.50"></text></g><g><title>anon.7ffb122119e4c1435beee04d7a36cdb5.9.llvm.14803035141670572092 (18 samples, 0.01%)</title><rect x="84.7879%" y="901" width="0.0119%" height="15" fill="rgb(254,215,14)" fg:x="127995" fg:w="18"/><text x="85.0379%" y="911.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (56 samples, 0.04%)</title><rect x="84.8138%" y="885" width="0.0371%" height="15" fill="rgb(211,115,16)" fg:x="128034" fg:w="56"/><text x="85.0638%" y="895.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (43 samples, 0.03%)</title><rect x="84.8224%" y="869" width="0.0285%" height="15" fill="rgb(236,210,16)" fg:x="128047" fg:w="43"/><text x="85.0724%" y="879.50"></text></g><g><title>async_task::runnable::Runnable::run (41 samples, 0.03%)</title><rect x="84.8237%" y="853" width="0.0272%" height="15" fill="rgb(221,94,12)" fg:x="128049" fg:w="41"/><text x="85.0737%" y="863.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (37 samples, 0.02%)</title><rect x="84.8509%" y="885" width="0.0245%" height="15" fill="rgb(235,218,49)" fg:x="128090" fg:w="37"/><text x="85.1009%" y="895.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (35 samples, 0.02%)</title><rect x="84.8522%" y="869" width="0.0232%" height="15" fill="rgb(217,114,14)" fg:x="128092" fg:w="35"/><text x="85.1022%" y="879.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (31 samples, 0.02%)</title><rect x="84.8548%" y="853" width="0.0205%" height="15" fill="rgb(216,145,22)" fg:x="128096" fg:w="31"/><text x="85.1048%" y="863.50"></text></g><g><title>polling::epoll::Poller::modify (26 samples, 0.02%)</title><rect x="84.8972%" y="885" width="0.0172%" height="15" fill="rgb(217,112,39)" fg:x="128160" fg:w="26"/><text x="85.1472%" y="895.50"></text></g><g><title>async_io::reactor::Reactor::get::REACTOR (158 samples, 0.10%)</title><rect x="84.8111%" y="901" width="0.1047%" height="15" fill="rgb(225,85,32)" fg:x="128030" fg:w="158"/><text x="85.0611%" y="911.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (55 samples, 0.04%)</title><rect x="85.2424%" y="293" width="0.0364%" height="15" fill="rgb(245,209,47)" fg:x="128681" fg:w="55"/><text x="85.4924%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (47 samples, 0.03%)</title><rect x="85.4643%" y="197" width="0.0311%" height="15" fill="rgb(218,220,15)" fg:x="129016" fg:w="47"/><text x="85.7143%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (46 samples, 0.03%)</title><rect x="85.4649%" y="181" width="0.0305%" height="15" fill="rgb(222,202,31)" fg:x="129017" fg:w="46"/><text x="85.7149%" y="191.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (40 samples, 0.03%)</title><rect x="85.4689%" y="165" width="0.0265%" height="15" fill="rgb(243,203,4)" fg:x="129023" fg:w="40"/><text x="85.7189%" y="175.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (34 samples, 0.02%)</title><rect x="85.4729%" y="149" width="0.0225%" height="15" fill="rgb(237,92,17)" fg:x="129029" fg:w="34"/><text x="85.7229%" y="159.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (34 samples, 0.02%)</title><rect x="85.4729%" y="133" width="0.0225%" height="15" fill="rgb(231,119,7)" fg:x="129029" fg:w="34"/><text x="85.7229%" y="143.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (141 samples, 0.09%)</title><rect x="85.4954%" y="197" width="0.0934%" height="15" fill="rgb(237,82,41)" fg:x="129063" fg:w="141"/><text x="85.7454%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (561 samples, 0.37%)</title><rect x="85.2834%" y="245" width="0.3716%" height="15" fill="rgb(226,81,48)" fg:x="128743" fg:w="561"/><text x="85.5334%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (466 samples, 0.31%)</title><rect x="85.3464%" y="229" width="0.3087%" height="15" fill="rgb(234,70,51)" fg:x="128838" fg:w="466"/><text x="85.5964%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (395 samples, 0.26%)</title><rect x="85.3934%" y="213" width="0.2617%" height="15" fill="rgb(251,86,4)" fg:x="128909" fg:w="395"/><text x="85.6434%" y="223.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (100 samples, 0.07%)</title><rect x="85.5888%" y="197" width="0.0662%" height="15" fill="rgb(244,144,28)" fg:x="129204" fg:w="100"/><text x="85.8388%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (100 samples, 0.07%)</title><rect x="85.5888%" y="181" width="0.0662%" height="15" fill="rgb(232,161,39)" fg:x="129204" fg:w="100"/><text x="85.8388%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (48 samples, 0.03%)</title><rect x="85.6232%" y="165" width="0.0318%" height="15" fill="rgb(247,34,51)" fg:x="129256" fg:w="48"/><text x="85.8732%" y="175.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (48 samples, 0.03%)</title><rect x="85.6232%" y="149" width="0.0318%" height="15" fill="rgb(225,132,2)" fg:x="129256" fg:w="48"/><text x="85.8732%" y="159.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (38 samples, 0.03%)</title><rect x="85.6299%" y="133" width="0.0252%" height="15" fill="rgb(209,159,44)" fg:x="129266" fg:w="38"/><text x="85.8799%" y="143.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (38 samples, 0.03%)</title><rect x="85.6299%" y="117" width="0.0252%" height="15" fill="rgb(251,214,1)" fg:x="129266" fg:w="38"/><text x="85.8799%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (613 samples, 0.41%)</title><rect x="85.2788%" y="293" width="0.4061%" height="15" fill="rgb(247,84,47)" fg:x="128736" fg:w="613"/><text x="85.5288%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (613 samples, 0.41%)</title><rect x="85.2788%" y="277" width="0.4061%" height="15" fill="rgb(240,111,43)" fg:x="128736" fg:w="613"/><text x="85.5288%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (613 samples, 0.41%)</title><rect x="85.2788%" y="261" width="0.4061%" height="15" fill="rgb(215,214,35)" fg:x="128736" fg:w="613"/><text x="85.5288%" y="271.50"></text></g><g><title>core::ops::control_flow::ControlFlow&lt;R,&lt;R as core::ops::try_trait::Try&gt;::Output&gt;::into_try (45 samples, 0.03%)</title><rect x="85.6550%" y="245" width="0.0298%" height="15" fill="rgb(248,207,23)" fg:x="129304" fg:w="45"/><text x="85.9050%" y="255.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::len (1,494 samples, 0.99%)</title><rect x="86.0459%" y="261" width="0.9897%" height="15" fill="rgb(214,186,4)" fg:x="129894" fg:w="1494"/><text x="86.2959%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1,053 samples, 0.70%)</title><rect x="86.3380%" y="245" width="0.6975%" height="15" fill="rgb(220,133,22)" fg:x="130335" fg:w="1053"/><text x="86.5880%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_load (1,053 samples, 0.70%)</title><rect x="86.3380%" y="229" width="0.6975%" height="15" fill="rgb(239,134,19)" fg:x="130335" fg:w="1053"/><text x="86.5880%" y="239.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::len (1,904 samples, 1.26%)</title><rect x="85.7862%" y="277" width="1.2613%" height="15" fill="rgb(250,140,9)" fg:x="129502" fg:w="1904"/><text x="86.0362%" y="287.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::len (18 samples, 0.01%)</title><rect x="87.0356%" y="261" width="0.0119%" height="15" fill="rgb(225,59,14)" fg:x="131388" fg:w="18"/><text x="87.2856%" y="271.50"></text></g><g><title>async_executor::steal (2,072 samples, 1.37%)</title><rect x="85.6849%" y="293" width="1.3726%" height="15" fill="rgb(214,152,51)" fg:x="129349" fg:w="2072"/><text x="85.9349%" y="303.50"></text></g><g><title>concurrent_queue::full_fence (2,347 samples, 1.55%)</title><rect x="87.8338%" y="261" width="1.5547%" height="15" fill="rgb(251,227,43)" fg:x="132593" fg:w="2347"/><text x="88.0838%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (2,317 samples, 1.53%)</title><rect x="87.8537%" y="245" width="1.5349%" height="15" fill="rgb(241,96,17)" fg:x="132623" fg:w="2317"/><text x="88.1037%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (2,317 samples, 1.53%)</title><rect x="87.8537%" y="229" width="1.5349%" height="15" fill="rgb(234,198,43)" fg:x="132623" fg:w="2317"/><text x="88.1037%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (2,317 samples, 1.53%)</title><rect x="87.8537%" y="213" width="1.5349%" height="15" fill="rgb(220,108,29)" fg:x="132623" fg:w="2317"/><text x="88.1037%" y="223.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (3,296 samples, 2.18%)</title><rect x="87.3091%" y="277" width="2.1834%" height="15" fill="rgb(226,163,33)" fg:x="131801" fg:w="3296"/><text x="87.5591%" y="287.50">c..</text></g><g><title>core::sync::atomic::AtomicUsize::load (155 samples, 0.10%)</title><rect x="89.3898%" y="261" width="0.1027%" height="15" fill="rgb(205,194,45)" fg:x="134942" fg:w="155"/><text x="89.6398%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_load (93 samples, 0.06%)</title><rect x="89.4309%" y="245" width="0.0616%" height="15" fill="rgb(206,143,44)" fg:x="135004" fg:w="93"/><text x="89.6809%" y="255.50"></text></g><g><title>concurrent_queue::full_fence (316 samples, 0.21%)</title><rect x="89.5482%" y="261" width="0.2093%" height="15" fill="rgb(236,136,36)" fg:x="135181" fg:w="316"/><text x="89.7982%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (316 samples, 0.21%)</title><rect x="89.5482%" y="245" width="0.2093%" height="15" fill="rgb(249,172,42)" fg:x="135181" fg:w="316"/><text x="89.7982%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (316 samples, 0.21%)</title><rect x="89.5482%" y="229" width="0.2093%" height="15" fill="rgb(216,139,23)" fg:x="135181" fg:w="316"/><text x="89.7982%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (316 samples, 0.21%)</title><rect x="89.5482%" y="213" width="0.2093%" height="15" fill="rgb(207,166,20)" fg:x="135181" fg:w="316"/><text x="89.7982%" y="223.50"></text></g><g><title>concurrent_queue::unbounded::Slot&lt;T&gt;::wait_write (50 samples, 0.03%)</title><rect x="89.7621%" y="261" width="0.0331%" height="15" fill="rgb(210,209,22)" fg:x="135504" fg:w="50"/><text x="90.0121%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (49 samples, 0.03%)</title><rect x="89.7628%" y="245" width="0.0325%" height="15" fill="rgb(232,118,20)" fg:x="135505" fg:w="49"/><text x="90.0128%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_load (49 samples, 0.03%)</title><rect x="89.7628%" y="229" width="0.0325%" height="15" fill="rgb(238,113,42)" fg:x="135505" fg:w="49"/><text x="90.0128%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (19 samples, 0.01%)</title><rect x="89.8032%" y="261" width="0.0126%" height="15" fill="rgb(231,42,5)" fg:x="135566" fg:w="19"/><text x="90.0532%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_load (19 samples, 0.01%)</title><rect x="89.8032%" y="245" width="0.0126%" height="15" fill="rgb(243,166,24)" fg:x="135566" fg:w="19"/><text x="90.0532%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (153 samples, 0.10%)</title><rect x="89.8158%" y="261" width="0.1014%" height="15" fill="rgb(237,226,12)" fg:x="135585" fg:w="153"/><text x="90.0658%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (153 samples, 0.10%)</title><rect x="89.8158%" y="245" width="0.1014%" height="15" fill="rgb(229,133,24)" fg:x="135585" fg:w="153"/><text x="90.0658%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (180 samples, 0.12%)</title><rect x="89.9171%" y="261" width="0.1192%" height="15" fill="rgb(238,33,43)" fg:x="135738" fg:w="180"/><text x="90.1671%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_or (180 samples, 0.12%)</title><rect x="89.9171%" y="245" width="0.1192%" height="15" fill="rgb(227,59,38)" fg:x="135738" fg:w="180"/><text x="90.1671%" y="255.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (4,687 samples, 3.10%)</title><rect x="87.0574%" y="293" width="3.1048%" height="15" fill="rgb(230,97,0)" fg:x="131421" fg:w="4687"/><text x="87.3074%" y="303.50">con..</text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (1,011 samples, 0.67%)</title><rect x="89.4925%" y="277" width="0.6697%" height="15" fill="rgb(250,173,50)" fg:x="135097" fg:w="1011"/><text x="89.7425%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (190 samples, 0.13%)</title><rect x="90.0364%" y="261" width="0.1259%" height="15" fill="rgb(240,15,50)" fg:x="135918" fg:w="190"/><text x="90.2864%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_load (190 samples, 0.13%)</title><rect x="90.0364%" y="245" width="0.1259%" height="15" fill="rgb(221,93,22)" fg:x="135918" fg:w="190"/><text x="90.2864%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (206 samples, 0.14%)</title><rect x="90.1622%" y="293" width="0.1365%" height="15" fill="rgb(245,180,53)" fg:x="136108" fg:w="206"/><text x="90.4122%" y="303.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (206 samples, 0.14%)</title><rect x="90.1622%" y="277" width="0.1365%" height="15" fill="rgb(231,88,51)" fg:x="136108" fg:w="206"/><text x="90.4122%" y="287.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read_unlock (205 samples, 0.14%)</title><rect x="90.1629%" y="261" width="0.1358%" height="15" fill="rgb(240,58,21)" fg:x="136109" fg:w="205"/><text x="90.4129%" y="271.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_unlock (205 samples, 0.14%)</title><rect x="90.1629%" y="245" width="0.1358%" height="15" fill="rgb(237,21,10)" fg:x="136109" fg:w="205"/><text x="90.4129%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (195 samples, 0.13%)</title><rect x="90.1695%" y="229" width="0.1292%" height="15" fill="rgb(218,43,11)" fg:x="136119" fg:w="195"/><text x="90.4195%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_sub (195 samples, 0.13%)</title><rect x="90.1695%" y="213" width="0.1292%" height="15" fill="rgb(218,221,29)" fg:x="136119" fg:w="195"/><text x="90.4195%" y="223.50"></text></g><g><title>fastrand::Rng::gen_u64 (16 samples, 0.01%)</title><rect x="90.3206%" y="197" width="0.0106%" height="15" fill="rgb(214,118,42)" fg:x="136347" fg:w="16"/><text x="90.5706%" y="207.50"></text></g><g><title>fastrand::usize (54 samples, 0.04%)</title><rect x="90.2987%" y="293" width="0.0358%" height="15" fill="rgb(251,200,26)" fg:x="136314" fg:w="54"/><text x="90.5487%" y="303.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (49 samples, 0.03%)</title><rect x="90.3020%" y="277" width="0.0325%" height="15" fill="rgb(237,101,39)" fg:x="136319" fg:w="49"/><text x="90.5520%" y="287.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (49 samples, 0.03%)</title><rect x="90.3020%" y="261" width="0.0325%" height="15" fill="rgb(251,117,11)" fg:x="136319" fg:w="49"/><text x="90.5520%" y="271.50"></text></g><g><title>fastrand::usize::{{closure}} (32 samples, 0.02%)</title><rect x="90.3133%" y="245" width="0.0212%" height="15" fill="rgb(216,223,23)" fg:x="136336" fg:w="32"/><text x="90.5633%" y="255.50"></text></g><g><title>fastrand::Rng::usize (32 samples, 0.02%)</title><rect x="90.3133%" y="229" width="0.0212%" height="15" fill="rgb(251,54,12)" fg:x="136336" fg:w="32"/><text x="90.5633%" y="239.50"></text></g><g><title>fastrand::Rng::gen_mod_u64 (25 samples, 0.02%)</title><rect x="90.3179%" y="213" width="0.0166%" height="15" fill="rgb(254,176,54)" fg:x="136343" fg:w="25"/><text x="90.5679%" y="223.50"></text></g><g><title>std::sync::poison::Flag::get (45 samples, 0.03%)</title><rect x="90.3345%" y="245" width="0.0298%" height="15" fill="rgb(210,32,8)" fg:x="136368" fg:w="45"/><text x="90.5845%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (45 samples, 0.03%)</title><rect x="90.3345%" y="229" width="0.0298%" height="15" fill="rgb(235,52,38)" fg:x="136368" fg:w="45"/><text x="90.5845%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_load (45 samples, 0.03%)</title><rect x="90.3345%" y="213" width="0.0298%" height="15" fill="rgb(231,4,44)" fg:x="136368" fg:w="45"/><text x="90.5845%" y="223.50"></text></g><g><title>std::sync::rwlock::RwLockReadGuard&lt;T&gt;::new (52 samples, 0.03%)</title><rect x="90.3345%" y="277" width="0.0344%" height="15" fill="rgb(249,2,32)" fg:x="136368" fg:w="52"/><text x="90.5845%" y="287.50"></text></g><g><title>std::sync::poison::Flag::borrow (52 samples, 0.03%)</title><rect x="90.3345%" y="261" width="0.0344%" height="15" fill="rgb(224,65,26)" fg:x="136368" fg:w="52"/><text x="90.5845%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (349 samples, 0.23%)</title><rect x="90.3749%" y="245" width="0.2312%" height="15" fill="rgb(250,73,40)" fg:x="136429" fg:w="349"/><text x="90.6249%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (349 samples, 0.23%)</title><rect x="90.3749%" y="229" width="0.2312%" height="15" fill="rgb(253,177,16)" fg:x="136429" fg:w="349"/><text x="90.6249%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (75 samples, 0.05%)</title><rect x="90.6061%" y="245" width="0.0497%" height="15" fill="rgb(217,32,34)" fg:x="136778" fg:w="75"/><text x="90.8561%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_load (75 samples, 0.05%)</title><rect x="90.6061%" y="229" width="0.0497%" height="15" fill="rgb(212,7,10)" fg:x="136778" fg:w="75"/><text x="90.8561%" y="239.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (8,434 samples, 5.59%)</title><rect x="85.0820%" y="309" width="5.5869%" height="15" fill="rgb(245,89,8)" fg:x="128439" fg:w="8434"/><text x="85.3320%" y="319.50">async_e..</text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (505 samples, 0.33%)</title><rect x="90.3345%" y="293" width="0.3345%" height="15" fill="rgb(237,16,53)" fg:x="136368" fg:w="505"/><text x="90.5845%" y="303.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read (453 samples, 0.30%)</title><rect x="90.3689%" y="277" width="0.3001%" height="15" fill="rgb(250,204,30)" fg:x="136420" fg:w="453"/><text x="90.6189%" y="287.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (453 samples, 0.30%)</title><rect x="90.3689%" y="261" width="0.3001%" height="15" fill="rgb(208,77,27)" fg:x="136420" fg:w="453"/><text x="90.6189%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (62 samples, 0.04%)</title><rect x="90.6789%" y="229" width="0.0411%" height="15" fill="rgb(250,204,28)" fg:x="136888" fg:w="62"/><text x="90.9289%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_swap (62 samples, 0.04%)</title><rect x="90.6789%" y="213" width="0.0411%" height="15" fill="rgb(244,63,21)" fg:x="136888" fg:w="62"/><text x="90.9289%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (66 samples, 0.04%)</title><rect x="90.6776%" y="293" width="0.0437%" height="15" fill="rgb(236,85,44)" fg:x="136886" fg:w="66"/><text x="90.9276%" y="303.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (66 samples, 0.04%)</title><rect x="90.6776%" y="277" width="0.0437%" height="15" fill="rgb(215,98,4)" fg:x="136886" fg:w="66"/><text x="90.9276%" y="287.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (64 samples, 0.04%)</title><rect x="90.6789%" y="261" width="0.0424%" height="15" fill="rgb(235,38,11)" fg:x="136888" fg:w="64"/><text x="90.9289%" y="271.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (64 samples, 0.04%)</title><rect x="90.6789%" y="245" width="0.0424%" height="15" fill="rgb(254,186,25)" fg:x="136888" fg:w="64"/><text x="90.9289%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (65 samples, 0.04%)</title><rect x="90.7213%" y="293" width="0.0431%" height="15" fill="rgb(225,55,31)" fg:x="136952" fg:w="65"/><text x="90.9713%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (65 samples, 0.04%)</title><rect x="90.7213%" y="277" width="0.0431%" height="15" fill="rgb(211,15,21)" fg:x="136952" fg:w="65"/><text x="90.9713%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (26 samples, 0.02%)</title><rect x="90.7809%" y="213" width="0.0172%" height="15" fill="rgb(215,187,41)" fg:x="137042" fg:w="26"/><text x="91.0309%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (26 samples, 0.02%)</title><rect x="90.7809%" y="197" width="0.0172%" height="15" fill="rgb(248,69,32)" fg:x="137042" fg:w="26"/><text x="91.0309%" y="207.50"></text></g><g><title>async_io::reactor::Reactor::notify (80 samples, 0.05%)</title><rect x="90.7763%" y="245" width="0.0530%" height="15" fill="rgb(252,102,52)" fg:x="137035" fg:w="80"/><text x="91.0263%" y="255.50"></text></g><g><title>polling::Poller::notify (76 samples, 0.05%)</title><rect x="90.7790%" y="229" width="0.0503%" height="15" fill="rgb(253,140,32)" fg:x="137039" fg:w="76"/><text x="91.0290%" y="239.50"></text></g><g><title>polling::epoll::Poller::notify (46 samples, 0.03%)</title><rect x="90.7988%" y="213" width="0.0305%" height="15" fill="rgb(216,56,42)" fg:x="137069" fg:w="46"/><text x="91.0488%" y="223.50"></text></g><g><title>__libc_write (44 samples, 0.03%)</title><rect x="90.8002%" y="197" width="0.0291%" height="15" fill="rgb(216,184,14)" fg:x="137071" fg:w="44"/><text x="91.0502%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (23 samples, 0.02%)</title><rect x="90.8293%" y="245" width="0.0152%" height="15" fill="rgb(237,187,27)" fg:x="137115" fg:w="23"/><text x="91.0793%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_load (22 samples, 0.01%)</title><rect x="90.8300%" y="229" width="0.0146%" height="15" fill="rgb(219,65,3)" fg:x="137116" fg:w="22"/><text x="91.0800%" y="239.50"></text></g><g><title>core::mem::drop (21 samples, 0.01%)</title><rect x="90.8763%" y="213" width="0.0139%" height="15" fill="rgb(245,83,25)" fg:x="137186" fg:w="21"/><text x="91.1263%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;()&gt;&gt; (21 samples, 0.01%)</title><rect x="90.8763%" y="197" width="0.0139%" height="15" fill="rgb(214,205,45)" fg:x="137186" fg:w="21"/><text x="91.1263%" y="207.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.01%)</title><rect x="90.8763%" y="181" width="0.0139%" height="15" fill="rgb(241,20,18)" fg:x="137186" fg:w="21"/><text x="91.1263%" y="191.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (20 samples, 0.01%)</title><rect x="90.8770%" y="165" width="0.0132%" height="15" fill="rgb(232,163,23)" fg:x="137187" fg:w="20"/><text x="91.1270%" y="175.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (20 samples, 0.01%)</title><rect x="90.8770%" y="149" width="0.0132%" height="15" fill="rgb(214,5,46)" fg:x="137187" fg:w="20"/><text x="91.1270%" y="159.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (20 samples, 0.01%)</title><rect x="90.8770%" y="133" width="0.0132%" height="15" fill="rgb(229,78,17)" fg:x="137187" fg:w="20"/><text x="91.1270%" y="143.50"></text></g><g><title>core::sync::atomic::atomic_swap (20 samples, 0.01%)</title><rect x="90.8770%" y="117" width="0.0132%" height="15" fill="rgb(248,89,10)" fg:x="137187" fg:w="20"/><text x="91.1270%" y="127.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (116 samples, 0.08%)</title><rect x="90.8902%" y="213" width="0.0768%" height="15" fill="rgb(248,54,15)" fg:x="137207" fg:w="116"/><text x="91.1402%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_swap (116 samples, 0.08%)</title><rect x="90.8902%" y="197" width="0.0768%" height="15" fill="rgb(223,116,6)" fg:x="137207" fg:w="116"/><text x="91.1402%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_add (16 samples, 0.01%)</title><rect x="90.9671%" y="165" width="0.0106%" height="15" fill="rgb(205,125,38)" fg:x="137323" fg:w="16"/><text x="91.2171%" y="175.50"></text></g><g><title>core::sync::atomic::atomic_add (16 samples, 0.01%)</title><rect x="90.9671%" y="149" width="0.0106%" height="15" fill="rgb(251,78,38)" fg:x="137323" fg:w="16"/><text x="91.2171%" y="159.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (60 samples, 0.04%)</title><rect x="90.9671%" y="213" width="0.0397%" height="15" fill="rgb(253,78,28)" fg:x="137323" fg:w="60"/><text x="91.2171%" y="223.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (60 samples, 0.04%)</title><rect x="90.9671%" y="197" width="0.0397%" height="15" fill="rgb(209,120,3)" fg:x="137323" fg:w="60"/><text x="91.2171%" y="207.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::notify_one (60 samples, 0.04%)</title><rect x="90.9671%" y="181" width="0.0397%" height="15" fill="rgb(238,229,9)" fg:x="137323" fg:w="60"/><text x="91.2171%" y="191.50"></text></g><g><title>std::sys::unix::futex::futex_wake (44 samples, 0.03%)</title><rect x="90.9777%" y="165" width="0.0291%" height="15" fill="rgb(253,159,18)" fg:x="137339" fg:w="44"/><text x="91.2277%" y="175.50"></text></g><g><title>syscall (44 samples, 0.03%)</title><rect x="90.9777%" y="149" width="0.0291%" height="15" fill="rgb(244,42,34)" fg:x="137339" fg:w="44"/><text x="91.2277%" y="159.50"></text></g><g><title>parking::Unparker::unpark (260 samples, 0.17%)</title><rect x="90.8445%" y="245" width="0.1722%" height="15" fill="rgb(224,8,7)" fg:x="137138" fg:w="260"/><text x="91.0945%" y="255.50"></text></g><g><title>parking::Inner::unpark (218 samples, 0.14%)</title><rect x="90.8724%" y="229" width="0.1444%" height="15" fill="rgb(210,201,45)" fg:x="137180" fg:w="218"/><text x="91.1224%" y="239.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (406 samples, 0.27%)</title><rect x="90.7644%" y="261" width="0.2689%" height="15" fill="rgb(252,185,21)" fg:x="137017" fg:w="406"/><text x="91.0144%" y="271.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (25 samples, 0.02%)</title><rect x="91.0168%" y="245" width="0.0166%" height="15" fill="rgb(223,131,1)" fg:x="137398" fg:w="25"/><text x="91.2668%" y="255.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (25 samples, 0.02%)</title><rect x="91.0168%" y="229" width="0.0166%" height="15" fill="rgb(245,141,16)" fg:x="137398" fg:w="25"/><text x="91.2668%" y="239.50"></text></g><g><title>async_io::driver::block_on::IO_POLLING::__getit (25 samples, 0.02%)</title><rect x="91.0168%" y="213" width="0.0166%" height="15" fill="rgb(229,55,45)" fg:x="137398" fg:w="25"/><text x="91.2668%" y="223.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (25 samples, 0.02%)</title><rect x="91.0168%" y="197" width="0.0166%" height="15" fill="rgb(208,92,15)" fg:x="137398" fg:w="25"/><text x="91.2668%" y="207.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (21 samples, 0.01%)</title><rect x="91.0194%" y="181" width="0.0139%" height="15" fill="rgb(234,185,47)" fg:x="137402" fg:w="21"/><text x="91.2694%" y="191.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (21 samples, 0.01%)</title><rect x="91.0194%" y="165" width="0.0139%" height="15" fill="rgb(253,104,50)" fg:x="137402" fg:w="21"/><text x="91.2694%" y="175.50"></text></g><g><title>core::task::wake::Waker::wake (537 samples, 0.36%)</title><rect x="90.7644%" y="293" width="0.3557%" height="15" fill="rgb(205,70,7)" fg:x="137017" fg:w="537"/><text x="91.0144%" y="303.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (537 samples, 0.36%)</title><rect x="90.7644%" y="277" width="0.3557%" height="15" fill="rgb(240,178,43)" fg:x="137017" fg:w="537"/><text x="91.0144%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (131 samples, 0.09%)</title><rect x="91.0333%" y="261" width="0.0868%" height="15" fill="rgb(214,112,2)" fg:x="137423" fg:w="131"/><text x="91.2833%" y="271.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (131 samples, 0.09%)</title><rect x="91.0333%" y="245" width="0.0868%" height="15" fill="rgb(206,46,17)" fg:x="137423" fg:w="131"/><text x="91.2833%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (126 samples, 0.08%)</title><rect x="91.0366%" y="229" width="0.0835%" height="15" fill="rgb(225,220,16)" fg:x="137428" fg:w="126"/><text x="91.2866%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_sub (126 samples, 0.08%)</title><rect x="91.0366%" y="213" width="0.0835%" height="15" fill="rgb(238,65,40)" fg:x="137428" fg:w="126"/><text x="91.2866%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (45 samples, 0.03%)</title><rect x="91.1241%" y="245" width="0.0298%" height="15" fill="rgb(230,151,21)" fg:x="137560" fg:w="45"/><text x="91.3741%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (45 samples, 0.03%)</title><rect x="91.1241%" y="229" width="0.0298%" height="15" fill="rgb(218,58,49)" fg:x="137560" fg:w="45"/><text x="91.3741%" y="239.50"></text></g><g><title>async_executor::State::notify (749 samples, 0.50%)</title><rect x="90.6690%" y="309" width="0.4962%" height="15" fill="rgb(219,179,14)" fg:x="136873" fg:w="749"/><text x="90.9190%" y="319.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (68 samples, 0.05%)</title><rect x="91.1201%" y="293" width="0.0450%" height="15" fill="rgb(223,72,1)" fg:x="137554" fg:w="68"/><text x="91.3701%" y="303.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (63 samples, 0.04%)</title><rect x="91.1234%" y="277" width="0.0417%" height="15" fill="rgb(238,126,10)" fg:x="137559" fg:w="63"/><text x="91.3734%" y="287.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (63 samples, 0.04%)</title><rect x="91.1234%" y="261" width="0.0417%" height="15" fill="rgb(224,206,38)" fg:x="137559" fg:w="63"/><text x="91.3734%" y="271.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (17 samples, 0.01%)</title><rect x="91.1539%" y="245" width="0.0113%" height="15" fill="rgb(212,201,54)" fg:x="137605" fg:w="17"/><text x="91.4039%" y="255.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (171 samples, 0.11%)</title><rect x="91.1916%" y="277" width="0.1133%" height="15" fill="rgb(218,154,48)" fg:x="137662" fg:w="171"/><text x="91.4416%" y="287.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (171 samples, 0.11%)</title><rect x="91.1916%" y="261" width="0.1133%" height="15" fill="rgb(232,93,24)" fg:x="137662" fg:w="171"/><text x="91.4416%" y="271.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (169 samples, 0.11%)</title><rect x="91.1930%" y="245" width="0.1120%" height="15" fill="rgb(245,30,21)" fg:x="137664" fg:w="169"/><text x="91.4430%" y="255.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (169 samples, 0.11%)</title><rect x="91.1930%" y="229" width="0.1120%" height="15" fill="rgb(242,148,29)" fg:x="137664" fg:w="169"/><text x="91.4430%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (169 samples, 0.11%)</title><rect x="91.1930%" y="213" width="0.1120%" height="15" fill="rgb(244,153,54)" fg:x="137664" fg:w="169"/><text x="91.4430%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_add (169 samples, 0.11%)</title><rect x="91.1930%" y="197" width="0.1120%" height="15" fill="rgb(252,87,22)" fg:x="137664" fg:w="169"/><text x="91.4430%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (47 samples, 0.03%)</title><rect x="91.3049%" y="277" width="0.0311%" height="15" fill="rgb(210,51,29)" fg:x="137833" fg:w="47"/><text x="91.5549%" y="287.50"></text></g><g><title>async_executor::Sleepers::insert (276 samples, 0.18%)</title><rect x="91.1863%" y="293" width="0.1828%" height="15" fill="rgb(242,136,47)" fg:x="137654" fg:w="276"/><text x="91.4363%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (50 samples, 0.03%)</title><rect x="91.3361%" y="277" width="0.0331%" height="15" fill="rgb(238,68,4)" fg:x="137880" fg:w="50"/><text x="91.5861%" y="287.50"></text></g><g><title>core::ptr::write (31 samples, 0.02%)</title><rect x="91.3486%" y="261" width="0.0205%" height="15" fill="rgb(242,161,30)" fg:x="137899" fg:w="31"/><text x="91.5986%" y="271.50"></text></g><g><title>async_executor::Sleepers::is_notified (40 samples, 0.03%)</title><rect x="91.3692%" y="293" width="0.0265%" height="15" fill="rgb(218,58,44)" fg:x="137930" fg:w="40"/><text x="91.6192%" y="303.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 0.02%)</title><rect x="91.4533%" y="277" width="0.0219%" height="15" fill="rgb(252,125,32)" fg:x="138057" fg:w="33"/><text x="91.7033%" y="287.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (173 samples, 0.11%)</title><rect x="91.4752%" y="277" width="0.1146%" height="15" fill="rgb(219,178,0)" fg:x="138090" fg:w="173"/><text x="91.7252%" y="287.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (170 samples, 0.11%)</title><rect x="91.4772%" y="261" width="0.1126%" height="15" fill="rgb(213,152,7)" fg:x="138093" fg:w="170"/><text x="91.7272%" y="271.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (170 samples, 0.11%)</title><rect x="91.4772%" y="245" width="0.1126%" height="15" fill="rgb(249,109,34)" fg:x="138093" fg:w="170"/><text x="91.7272%" y="255.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (170 samples, 0.11%)</title><rect x="91.4772%" y="229" width="0.1126%" height="15" fill="rgb(232,96,21)" fg:x="138093" fg:w="170"/><text x="91.7272%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (170 samples, 0.11%)</title><rect x="91.4772%" y="213" width="0.1126%" height="15" fill="rgb(228,27,39)" fg:x="138093" fg:w="170"/><text x="91.7272%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_add (170 samples, 0.11%)</title><rect x="91.4772%" y="197" width="0.1126%" height="15" fill="rgb(211,182,52)" fg:x="138093" fg:w="170"/><text x="91.7272%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (44 samples, 0.03%)</title><rect x="91.5898%" y="277" width="0.0291%" height="15" fill="rgb(234,178,38)" fg:x="138263" fg:w="44"/><text x="91.8398%" y="287.50"></text></g><g><title>core::ptr::write (32 samples, 0.02%)</title><rect x="91.5977%" y="261" width="0.0212%" height="15" fill="rgb(221,111,3)" fg:x="138275" fg:w="32"/><text x="91.8477%" y="271.50"></text></g><g><title>async_executor::Sleepers::update (354 samples, 0.23%)</title><rect x="91.3957%" y="293" width="0.2345%" height="15" fill="rgb(228,175,21)" fg:x="137970" fg:w="354"/><text x="91.6457%" y="303.50"></text></g><g><title>core::task::wake::Waker::will_wake (17 samples, 0.01%)</title><rect x="91.6189%" y="277" width="0.0113%" height="15" fill="rgb(228,174,43)" fg:x="138307" fg:w="17"/><text x="91.8689%" y="287.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (17 samples, 0.01%)</title><rect x="91.6189%" y="261" width="0.0113%" height="15" fill="rgb(211,191,0)" fg:x="138307" fg:w="17"/><text x="91.8689%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (259 samples, 0.17%)</title><rect x="91.6381%" y="229" width="0.1716%" height="15" fill="rgb(253,117,3)" fg:x="138336" fg:w="259"/><text x="91.8881%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_swap (259 samples, 0.17%)</title><rect x="91.6381%" y="213" width="0.1716%" height="15" fill="rgb(241,127,19)" fg:x="138336" fg:w="259"/><text x="91.8881%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (281 samples, 0.19%)</title><rect x="91.6302%" y="293" width="0.1861%" height="15" fill="rgb(218,103,12)" fg:x="138324" fg:w="281"/><text x="91.8802%" y="303.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (281 samples, 0.19%)</title><rect x="91.6302%" y="277" width="0.1861%" height="15" fill="rgb(236,214,43)" fg:x="138324" fg:w="281"/><text x="91.8802%" y="287.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (269 samples, 0.18%)</title><rect x="91.6381%" y="261" width="0.1782%" height="15" fill="rgb(244,144,19)" fg:x="138336" fg:w="269"/><text x="91.8881%" y="271.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (269 samples, 0.18%)</title><rect x="91.6381%" y="245" width="0.1782%" height="15" fill="rgb(246,188,10)" fg:x="138336" fg:w="269"/><text x="91.8881%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (280 samples, 0.19%)</title><rect x="91.8163%" y="293" width="0.1855%" height="15" fill="rgb(212,193,33)" fg:x="138605" fg:w="280"/><text x="92.0663%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_swap (280 samples, 0.19%)</title><rect x="91.8163%" y="277" width="0.1855%" height="15" fill="rgb(241,51,29)" fg:x="138605" fg:w="280"/><text x="92.0663%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (218 samples, 0.14%)</title><rect x="92.0018%" y="293" width="0.1444%" height="15" fill="rgb(211,58,19)" fg:x="138885" fg:w="218"/><text x="92.2518%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_store (218 samples, 0.14%)</title><rect x="92.0018%" y="277" width="0.1444%" height="15" fill="rgb(229,111,26)" fg:x="138885" fg:w="218"/><text x="92.2518%" y="287.50"></text></g><g><title>std::sync::poison::Flag::get (44 samples, 0.03%)</title><rect x="92.1508%" y="245" width="0.0291%" height="15" fill="rgb(213,115,40)" fg:x="139110" fg:w="44"/><text x="92.4008%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (44 samples, 0.03%)</title><rect x="92.1508%" y="229" width="0.0291%" height="15" fill="rgb(209,56,44)" fg:x="139110" fg:w="44"/><text x="92.4008%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_load (44 samples, 0.03%)</title><rect x="92.1508%" y="213" width="0.0291%" height="15" fill="rgb(230,108,32)" fg:x="139110" fg:w="44"/><text x="92.4008%" y="223.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (58 samples, 0.04%)</title><rect x="92.1462%" y="277" width="0.0384%" height="15" fill="rgb(216,165,31)" fg:x="139103" fg:w="58"/><text x="92.3962%" y="287.50"></text></g><g><title>std::sync::poison::Flag::borrow (58 samples, 0.04%)</title><rect x="92.1462%" y="261" width="0.0384%" height="15" fill="rgb(218,122,21)" fg:x="139103" fg:w="58"/><text x="92.3962%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (294 samples, 0.19%)</title><rect x="92.1866%" y="245" width="0.1948%" height="15" fill="rgb(223,224,47)" fg:x="139164" fg:w="294"/><text x="92.4366%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (294 samples, 0.19%)</title><rect x="92.1866%" y="229" width="0.1948%" height="15" fill="rgb(238,102,44)" fg:x="139164" fg:w="294"/><text x="92.4366%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (62 samples, 0.04%)</title><rect x="92.3867%" y="229" width="0.0411%" height="15" fill="rgb(236,46,40)" fg:x="139466" fg:w="62"/><text x="92.6367%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (62 samples, 0.04%)</title><rect x="92.3867%" y="213" width="0.0411%" height="15" fill="rgb(247,202,50)" fg:x="139466" fg:w="62"/><text x="92.6367%" y="223.50"></text></g><g><title>std::sys::unix::futex::futex_wait (26 samples, 0.02%)</title><rect x="92.4364%" y="229" width="0.0172%" height="15" fill="rgb(209,99,20)" fg:x="139541" fg:w="26"/><text x="92.6864%" y="239.50"></text></g><g><title>core::hint::spin_loop (49 samples, 0.03%)</title><rect x="92.4562%" y="213" width="0.0325%" height="15" fill="rgb(252,27,34)" fg:x="139571" fg:w="49"/><text x="92.7062%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (49 samples, 0.03%)</title><rect x="92.4562%" y="197" width="0.0325%" height="15" fill="rgb(215,206,23)" fg:x="139571" fg:w="49"/><text x="92.7062%" y="207.50"></text></g><g><title>async_executor::Ticker::sleep (2,067 samples, 1.37%)</title><rect x="91.1652%" y="309" width="1.3692%" height="15" fill="rgb(212,135,36)" fg:x="137622" fg:w="2067"/><text x="91.4152%" y="319.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (586 samples, 0.39%)</title><rect x="92.1462%" y="293" width="0.3882%" height="15" fill="rgb(240,189,1)" fg:x="139103" fg:w="586"/><text x="92.3962%" y="303.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (528 samples, 0.35%)</title><rect x="92.1846%" y="277" width="0.3498%" height="15" fill="rgb(242,56,20)" fg:x="139161" fg:w="528"/><text x="92.4346%" y="287.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (528 samples, 0.35%)</title><rect x="92.1846%" y="261" width="0.3498%" height="15" fill="rgb(247,132,33)" fg:x="139161" fg:w="528"/><text x="92.4346%" y="271.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (231 samples, 0.15%)</title><rect x="92.3814%" y="245" width="0.1530%" height="15" fill="rgb(208,149,11)" fg:x="139458" fg:w="231"/><text x="92.6314%" y="255.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (122 samples, 0.08%)</title><rect x="92.4536%" y="229" width="0.0808%" height="15" fill="rgb(211,33,11)" fg:x="139567" fg:w="122"/><text x="92.7036%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (69 samples, 0.05%)</title><rect x="92.4887%" y="213" width="0.0457%" height="15" fill="rgb(221,29,38)" fg:x="139620" fg:w="69"/><text x="92.7387%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_load (69 samples, 0.05%)</title><rect x="92.4887%" y="197" width="0.0457%" height="15" fill="rgb(206,182,49)" fg:x="139620" fg:w="69"/><text x="92.7387%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (23 samples, 0.02%)</title><rect x="92.5900%" y="277" width="0.0152%" height="15" fill="rgb(216,140,1)" fg:x="139773" fg:w="23"/><text x="92.8400%" y="287.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::drop_waker (105 samples, 0.07%)</title><rect x="92.6126%" y="229" width="0.0696%" height="15" fill="rgb(232,57,40)" fg:x="139807" fg:w="105"/><text x="92.8626%" y="239.50"></text></g><g><title>core::mem::drop (105 samples, 0.07%)</title><rect x="92.6126%" y="213" width="0.0696%" height="15" fill="rgb(224,186,18)" fg:x="139807" fg:w="105"/><text x="92.8626%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (105 samples, 0.07%)</title><rect x="92.6126%" y="197" width="0.0696%" height="15" fill="rgb(215,121,11)" fg:x="139807" fg:w="105"/><text x="92.8626%" y="207.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (105 samples, 0.07%)</title><rect x="92.6126%" y="181" width="0.0696%" height="15" fill="rgb(245,147,10)" fg:x="139807" fg:w="105"/><text x="92.8626%" y="191.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (105 samples, 0.07%)</title><rect x="92.6126%" y="165" width="0.0696%" height="15" fill="rgb(238,153,13)" fg:x="139807" fg:w="105"/><text x="92.8626%" y="175.50"></text></g><g><title>core::sync::atomic::atomic_sub (105 samples, 0.07%)</title><rect x="92.6126%" y="149" width="0.0696%" height="15" fill="rgb(233,108,0)" fg:x="139807" fg:w="105"/><text x="92.8626%" y="159.50"></text></g><g><title>async_executor::Sleepers::remove (187 samples, 0.12%)</title><rect x="92.5589%" y="293" width="0.1239%" height="15" fill="rgb(212,157,17)" fg:x="139726" fg:w="187"/><text x="92.8089%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,core::task::wake::Waker)&gt; (106 samples, 0.07%)</title><rect x="92.6126%" y="277" width="0.0702%" height="15" fill="rgb(225,213,38)" fg:x="139807" fg:w="106"/><text x="92.8626%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (106 samples, 0.07%)</title><rect x="92.6126%" y="261" width="0.0702%" height="15" fill="rgb(248,16,11)" fg:x="139807" fg:w="106"/><text x="92.8626%" y="271.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (106 samples, 0.07%)</title><rect x="92.6126%" y="245" width="0.0702%" height="15" fill="rgb(241,33,4)" fg:x="139807" fg:w="106"/><text x="92.8626%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (61 samples, 0.04%)</title><rect x="92.6854%" y="229" width="0.0404%" height="15" fill="rgb(222,26,43)" fg:x="139917" fg:w="61"/><text x="92.9354%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_swap (61 samples, 0.04%)</title><rect x="92.6854%" y="213" width="0.0404%" height="15" fill="rgb(243,29,36)" fg:x="139917" fg:w="61"/><text x="92.9354%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (76 samples, 0.05%)</title><rect x="92.6828%" y="293" width="0.0503%" height="15" fill="rgb(241,9,27)" fg:x="139913" fg:w="76"/><text x="92.9328%" y="303.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (76 samples, 0.05%)</title><rect x="92.6828%" y="277" width="0.0503%" height="15" fill="rgb(205,117,26)" fg:x="139913" fg:w="76"/><text x="92.9328%" y="287.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (72 samples, 0.05%)</title><rect x="92.6854%" y="261" width="0.0477%" height="15" fill="rgb(209,80,39)" fg:x="139917" fg:w="72"/><text x="92.9354%" y="271.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (72 samples, 0.05%)</title><rect x="92.6854%" y="245" width="0.0477%" height="15" fill="rgb(239,155,6)" fg:x="139917" fg:w="72"/><text x="92.9354%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (92 samples, 0.06%)</title><rect x="92.7331%" y="293" width="0.0609%" height="15" fill="rgb(212,104,12)" fg:x="139989" fg:w="92"/><text x="92.9831%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_swap (92 samples, 0.06%)</title><rect x="92.7331%" y="277" width="0.0609%" height="15" fill="rgb(234,204,3)" fg:x="139989" fg:w="92"/><text x="92.9831%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (121 samples, 0.08%)</title><rect x="92.7941%" y="293" width="0.0802%" height="15" fill="rgb(251,218,7)" fg:x="140081" fg:w="121"/><text x="93.0441%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_swap (121 samples, 0.08%)</title><rect x="92.7941%" y="277" width="0.0802%" height="15" fill="rgb(221,81,32)" fg:x="140081" fg:w="121"/><text x="93.0441%" y="287.50"></text></g><g><title>std::sync::poison::Flag::get (23 samples, 0.02%)</title><rect x="92.8749%" y="245" width="0.0152%" height="15" fill="rgb(214,152,26)" fg:x="140203" fg:w="23"/><text x="93.1249%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (23 samples, 0.02%)</title><rect x="92.8749%" y="229" width="0.0152%" height="15" fill="rgb(223,22,3)" fg:x="140203" fg:w="23"/><text x="93.1249%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_load (23 samples, 0.02%)</title><rect x="92.8749%" y="213" width="0.0152%" height="15" fill="rgb(207,174,7)" fg:x="140203" fg:w="23"/><text x="93.1249%" y="223.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (26 samples, 0.02%)</title><rect x="92.8742%" y="277" width="0.0172%" height="15" fill="rgb(224,19,52)" fg:x="140202" fg:w="26"/><text x="93.1242%" y="287.50"></text></g><g><title>std::sync::poison::Flag::borrow (26 samples, 0.02%)</title><rect x="92.8742%" y="261" width="0.0172%" height="15" fill="rgb(228,24,14)" fg:x="140202" fg:w="26"/><text x="93.1242%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (99 samples, 0.07%)</title><rect x="92.8941%" y="245" width="0.0656%" height="15" fill="rgb(230,153,43)" fg:x="140232" fg:w="99"/><text x="93.1441%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (99 samples, 0.07%)</title><rect x="92.8941%" y="229" width="0.0656%" height="15" fill="rgb(231,106,12)" fg:x="140232" fg:w="99"/><text x="93.1441%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (40 samples, 0.03%)</title><rect x="92.9610%" y="229" width="0.0265%" height="15" fill="rgb(215,92,2)" fg:x="140333" fg:w="40"/><text x="93.2110%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (40 samples, 0.03%)</title><rect x="92.9610%" y="213" width="0.0265%" height="15" fill="rgb(249,143,25)" fg:x="140333" fg:w="40"/><text x="93.2110%" y="223.50"></text></g><g><title>core::hint::spin_loop (43 samples, 0.03%)</title><rect x="92.9915%" y="213" width="0.0285%" height="15" fill="rgb(252,7,35)" fg:x="140379" fg:w="43"/><text x="93.2415%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (43 samples, 0.03%)</title><rect x="92.9915%" y="197" width="0.0285%" height="15" fill="rgb(216,69,40)" fg:x="140379" fg:w="43"/><text x="93.2415%" y="207.50"></text></g><g><title>async_executor::Ticker::wake (771 samples, 0.51%)</title><rect x="92.5344%" y="309" width="0.5107%" height="15" fill="rgb(240,36,33)" fg:x="139689" fg:w="771"/><text x="92.7844%" y="319.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (258 samples, 0.17%)</title><rect x="92.8742%" y="293" width="0.1709%" height="15" fill="rgb(231,128,14)" fg:x="140202" fg:w="258"/><text x="93.1242%" y="303.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (232 samples, 0.15%)</title><rect x="92.8914%" y="277" width="0.1537%" height="15" fill="rgb(245,143,14)" fg:x="140228" fg:w="232"/><text x="93.1414%" y="287.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (232 samples, 0.15%)</title><rect x="92.8914%" y="261" width="0.1537%" height="15" fill="rgb(222,130,28)" fg:x="140228" fg:w="232"/><text x="93.1414%" y="271.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (129 samples, 0.09%)</title><rect x="92.9597%" y="245" width="0.0855%" height="15" fill="rgb(212,10,48)" fg:x="140331" fg:w="129"/><text x="93.2097%" y="255.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (81 samples, 0.05%)</title><rect x="92.9915%" y="229" width="0.0537%" height="15" fill="rgb(254,118,45)" fg:x="140379" fg:w="81"/><text x="93.2415%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (38 samples, 0.03%)</title><rect x="93.0200%" y="213" width="0.0252%" height="15" fill="rgb(228,6,45)" fg:x="140422" fg:w="38"/><text x="93.2700%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_load (38 samples, 0.03%)</title><rect x="93.0200%" y="197" width="0.0252%" height="15" fill="rgb(241,18,35)" fg:x="140422" fg:w="38"/><text x="93.2700%" y="207.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,070 samples, 8.00%)</title><rect x="85.0522%" y="373" width="7.9955%" height="15" fill="rgb(227,214,53)" fg:x="128394" fg:w="12070"/><text x="85.3022%" y="383.50">&lt;core::futu..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (12,070 samples, 8.00%)</title><rect x="85.0522%" y="357" width="7.9955%" height="15" fill="rgb(224,107,51)" fg:x="128394" fg:w="12070"/><text x="85.3022%" y="367.50">async_execu..</text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (12,048 samples, 7.98%)</title><rect x="85.0668%" y="341" width="7.9810%" height="15" fill="rgb(248,60,28)" fg:x="128416" fg:w="12048"/><text x="85.3168%" y="351.50">&lt;futures_li..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (12,045 samples, 7.98%)</title><rect x="85.0688%" y="325" width="7.9790%" height="15" fill="rgb(249,101,23)" fg:x="128419" fg:w="12045"/><text x="85.3188%" y="335.50">async_execu..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,212 samples, 8.09%)</title><rect x="85.0271%" y="405" width="8.0896%" height="15" fill="rgb(228,51,19)" fg:x="128356" fg:w="12212"/><text x="85.2771%" y="415.50">&lt;core::futu..</text></g><g><title>async_executor::Runner::runnable::{{closure}} (12,208 samples, 8.09%)</title><rect x="85.0297%" y="389" width="8.0870%" height="15" fill="rgb(213,20,6)" fg:x="128360" fg:w="12208"/><text x="85.2797%" y="399.50">async_execu..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (101 samples, 0.07%)</title><rect x="93.0498%" y="373" width="0.0669%" height="15" fill="rgb(212,124,10)" fg:x="140467" fg:w="101"/><text x="93.2998%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_add (101 samples, 0.07%)</title><rect x="93.0498%" y="357" width="0.0669%" height="15" fill="rgb(248,3,40)" fg:x="140467" fg:w="101"/><text x="93.2998%" y="367.50"></text></g><g><title>[libc-2.31.so] (66 samples, 0.04%)</title><rect x="93.2909%" y="261" width="0.0437%" height="15" fill="rgb(223,178,23)" fg:x="140831" fg:w="66"/><text x="93.5409%" y="271.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (186 samples, 0.12%)</title><rect x="93.5473%" y="197" width="0.1232%" height="15" fill="rgb(240,132,45)" fg:x="141218" fg:w="186"/><text x="93.7973%" y="207.50"></text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (185 samples, 0.12%)</title><rect x="93.5479%" y="181" width="0.1225%" height="15" fill="rgb(245,164,36)" fg:x="141219" fg:w="185"/><text x="93.7979%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (19 samples, 0.01%)</title><rect x="93.6579%" y="165" width="0.0126%" height="15" fill="rgb(231,188,53)" fg:x="141385" fg:w="19"/><text x="93.9079%" y="175.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (140 samples, 0.09%)</title><rect x="93.6764%" y="197" width="0.0927%" height="15" fill="rgb(237,198,39)" fg:x="141413" fg:w="140"/><text x="93.9264%" y="207.50"></text></g><g><title>[libc-2.31.so] (96 samples, 0.06%)</title><rect x="93.7705%" y="181" width="0.0636%" height="15" fill="rgb(223,120,35)" fg:x="141555" fg:w="96"/><text x="94.0205%" y="191.50"></text></g><g><title>[libc-2.31.so] (256 samples, 0.17%)</title><rect x="93.8427%" y="165" width="0.1696%" height="15" fill="rgb(253,107,49)" fg:x="141664" fg:w="256"/><text x="94.0927%" y="175.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (86 samples, 0.06%)</title><rect x="94.0593%" y="53" width="0.0570%" height="15" fill="rgb(216,44,31)" fg:x="141991" fg:w="86"/><text x="94.3093%" y="63.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (438 samples, 0.29%)</title><rect x="93.8341%" y="181" width="0.2901%" height="15" fill="rgb(253,87,21)" fg:x="141651" fg:w="438"/><text x="94.0841%" y="191.50"></text></g><g><title>alloc::alloc::exchange_malloc (169 samples, 0.11%)</title><rect x="94.0123%" y="165" width="0.1120%" height="15" fill="rgb(226,18,2)" fg:x="141920" fg:w="169"/><text x="94.2623%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (169 samples, 0.11%)</title><rect x="94.0123%" y="149" width="0.1120%" height="15" fill="rgb(216,8,46)" fg:x="141920" fg:w="169"/><text x="94.2623%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (169 samples, 0.11%)</title><rect x="94.0123%" y="133" width="0.1120%" height="15" fill="rgb(226,140,39)" fg:x="141920" fg:w="169"/><text x="94.2623%" y="143.50"></text></g><g><title>alloc::alloc::alloc (167 samples, 0.11%)</title><rect x="94.0136%" y="117" width="0.1106%" height="15" fill="rgb(221,194,54)" fg:x="141922" fg:w="167"/><text x="94.2636%" y="127.50"></text></g><g><title>__rg_alloc (167 samples, 0.11%)</title><rect x="94.0136%" y="101" width="0.1106%" height="15" fill="rgb(213,92,11)" fg:x="141922" fg:w="167"/><text x="94.2636%" y="111.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (167 samples, 0.11%)</title><rect x="94.0136%" y="85" width="0.1106%" height="15" fill="rgb(229,162,46)" fg:x="141922" fg:w="167"/><text x="94.2636%" y="95.50"></text></g><g><title>sn_rust_alloc (146 samples, 0.10%)</title><rect x="94.0275%" y="69" width="0.0967%" height="15" fill="rgb(214,111,36)" fg:x="141943" fg:w="146"/><text x="94.2775%" y="79.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::Sink&gt;::on_event (551 samples, 0.36%)</title><rect x="93.7692%" y="197" width="0.3650%" height="15" fill="rgb(207,6,21)" fg:x="141553" fg:w="551"/><text x="94.0192%" y="207.50"></text></g><g><title>&lt;tremor_pipeline::EventId as core::clone::Clone&gt;::clone (38 samples, 0.03%)</title><rect x="94.1487%" y="181" width="0.0252%" height="15" fill="rgb(213,127,38)" fg:x="142126" fg:w="38"/><text x="94.3987%" y="191.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::ContraflowData as core::convert::From&lt;&amp;tremor_pipeline::event::Event&gt;&gt;::from (324 samples, 0.21%)</title><rect x="94.1342%" y="197" width="0.2146%" height="15" fill="rgb(238,118,32)" fg:x="142104" fg:w="324"/><text x="94.3842%" y="207.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (264 samples, 0.17%)</title><rect x="94.1739%" y="181" width="0.1749%" height="15" fill="rgb(240,139,39)" fg:x="142164" fg:w="264"/><text x="94.4239%" y="191.50"></text></g><g><title>[libc-2.31.so] (1,090 samples, 0.72%)</title><rect x="94.3488%" y="197" width="0.7221%" height="15" fill="rgb(235,10,37)" fg:x="142428" fg:w="1090"/><text x="94.5988%" y="207.50"></text></g><g><title>sn_rust_dealloc (78 samples, 0.05%)</title><rect x="95.0821%" y="37" width="0.0517%" height="15" fill="rgb(249,171,38)" fg:x="143535" fg:w="78"/><text x="95.3321%" y="47.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (96 samples, 0.06%)</title><rect x="95.0708%" y="197" width="0.0636%" height="15" fill="rgb(242,144,32)" fg:x="143518" fg:w="96"/><text x="95.3208%" y="207.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (96 samples, 0.06%)</title><rect x="95.0708%" y="181" width="0.0636%" height="15" fill="rgb(217,117,21)" fg:x="143518" fg:w="96"/><text x="95.3208%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (87 samples, 0.06%)</title><rect x="95.0768%" y="165" width="0.0576%" height="15" fill="rgb(249,87,1)" fg:x="143527" fg:w="87"/><text x="95.3268%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (87 samples, 0.06%)</title><rect x="95.0768%" y="149" width="0.0576%" height="15" fill="rgb(248,196,48)" fg:x="143527" fg:w="87"/><text x="95.3268%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (87 samples, 0.06%)</title><rect x="95.0768%" y="133" width="0.0576%" height="15" fill="rgb(251,206,33)" fg:x="143527" fg:w="87"/><text x="95.3268%" y="143.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (87 samples, 0.06%)</title><rect x="95.0768%" y="117" width="0.0576%" height="15" fill="rgb(232,141,28)" fg:x="143527" fg:w="87"/><text x="95.3268%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (87 samples, 0.06%)</title><rect x="95.0768%" y="101" width="0.0576%" height="15" fill="rgb(209,167,14)" fg:x="143527" fg:w="87"/><text x="95.3268%" y="111.50"></text></g><g><title>alloc::alloc::dealloc (87 samples, 0.06%)</title><rect x="95.0768%" y="85" width="0.0576%" height="15" fill="rgb(225,11,50)" fg:x="143527" fg:w="87"/><text x="95.3268%" y="95.50"></text></g><g><title>__rg_dealloc (87 samples, 0.06%)</title><rect x="95.0768%" y="69" width="0.0576%" height="15" fill="rgb(209,50,20)" fg:x="143527" fg:w="87"/><text x="95.3268%" y="79.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (87 samples, 0.06%)</title><rect x="95.0768%" y="53" width="0.0576%" height="15" fill="rgb(212,17,46)" fg:x="143527" fg:w="87"/><text x="95.3268%" y="63.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt;&gt; (22 samples, 0.01%)</title><rect x="95.1344%" y="197" width="0.0146%" height="15" fill="rgb(216,101,39)" fg:x="143614" fg:w="22"/><text x="95.3844%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt; (22 samples, 0.01%)</title><rect x="95.1344%" y="181" width="0.0146%" height="15" fill="rgb(212,228,48)" fg:x="143614" fg:w="22"/><text x="95.3844%" y="191.50"></text></g><g><title>sn_rust_dealloc (51 samples, 0.03%)</title><rect x="95.1629%" y="85" width="0.0338%" height="15" fill="rgb(250,6,50)" fg:x="143657" fg:w="51"/><text x="95.4129%" y="95.50"></text></g><g><title>alloc::alloc::box_free (72 samples, 0.05%)</title><rect x="95.1517%" y="165" width="0.0477%" height="15" fill="rgb(250,160,48)" fg:x="143640" fg:w="72"/><text x="95.4017%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (72 samples, 0.05%)</title><rect x="95.1517%" y="149" width="0.0477%" height="15" fill="rgb(244,216,33)" fg:x="143640" fg:w="72"/><text x="95.4017%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (66 samples, 0.04%)</title><rect x="95.1556%" y="133" width="0.0437%" height="15" fill="rgb(207,157,5)" fg:x="143646" fg:w="66"/><text x="95.4056%" y="143.50"></text></g><g><title>__rg_dealloc (66 samples, 0.04%)</title><rect x="95.1556%" y="117" width="0.0437%" height="15" fill="rgb(228,199,8)" fg:x="143646" fg:w="66"/><text x="95.4056%" y="127.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (66 samples, 0.04%)</title><rect x="95.1556%" y="101" width="0.0437%" height="15" fill="rgb(227,80,20)" fg:x="143646" fg:w="66"/><text x="95.4056%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;tremor_runtime::connectors::sink::SinkReply,tremor_runtime::errors::Error&gt;+core::marker::Send&gt;&gt;&gt; (80 samples, 0.05%)</title><rect x="95.1490%" y="197" width="0.0530%" height="15" fill="rgb(222,9,33)" fg:x="143636" fg:w="80"/><text x="95.3990%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;tremor_runtime::connectors::sink::SinkReply,tremor_runtime::errors::Error&gt;+core::marker::Send&gt;&gt; (80 samples, 0.05%)</title><rect x="95.1490%" y="181" width="0.0530%" height="15" fill="rgb(239,44,28)" fg:x="143636" fg:w="80"/><text x="95.3990%" y="191.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (56 samples, 0.04%)</title><rect x="95.2365%" y="181" width="0.0371%" height="15" fill="rgb(249,187,43)" fg:x="143768" fg:w="56"/><text x="95.4865%" y="191.50"></text></g><g><title>core::time::Duration::as_nanos (60 samples, 0.04%)</title><rect x="95.2736%" y="181" width="0.0397%" height="15" fill="rgb(216,141,28)" fg:x="143824" fg:w="60"/><text x="95.5236%" y="191.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (230 samples, 0.15%)</title><rect x="95.3133%" y="165" width="0.1524%" height="15" fill="rgb(230,154,53)" fg:x="143884" fg:w="230"/><text x="95.5633%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (108 samples, 0.07%)</title><rect x="95.5180%" y="133" width="0.0715%" height="15" fill="rgb(227,82,4)" fg:x="144193" fg:w="108"/><text x="95.7680%" y="143.50"></text></g><g><title>core::cmp::PartialOrd::ge (108 samples, 0.07%)</title><rect x="95.5180%" y="117" width="0.0715%" height="15" fill="rgb(220,107,16)" fg:x="144193" fg:w="108"/><text x="95.7680%" y="127.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (101 samples, 0.07%)</title><rect x="95.5226%" y="101" width="0.0669%" height="15" fill="rgb(207,187,2)" fg:x="144200" fg:w="101"/><text x="95.7726%" y="111.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (42 samples, 0.03%)</title><rect x="95.5617%" y="85" width="0.0278%" height="15" fill="rgb(210,162,52)" fg:x="144259" fg:w="42"/><text x="95.8117%" y="95.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (42 samples, 0.03%)</title><rect x="95.5617%" y="69" width="0.0278%" height="15" fill="rgb(217,216,49)" fg:x="144259" fg:w="42"/><text x="95.8117%" y="79.50"></text></g><g><title>std::time::SystemTime::duration_since (455 samples, 0.30%)</title><rect x="95.3133%" y="181" width="0.3014%" height="15" fill="rgb(218,146,49)" fg:x="143884" fg:w="455"/><text x="95.5633%" y="191.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (225 samples, 0.15%)</title><rect x="95.4657%" y="165" width="0.1490%" height="15" fill="rgb(216,55,40)" fg:x="144114" fg:w="225"/><text x="95.7157%" y="175.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (225 samples, 0.15%)</title><rect x="95.4657%" y="149" width="0.1490%" height="15" fill="rgb(208,196,21)" fg:x="144114" fg:w="225"/><text x="95.7157%" y="159.50"></text></g><g><title>core::time::Duration::new (38 samples, 0.03%)</title><rect x="95.5895%" y="133" width="0.0252%" height="15" fill="rgb(242,117,42)" fg:x="144301" fg:w="38"/><text x="95.8395%" y="143.50"></text></g><g><title>tremor_common::time::nanotime (1,793 samples, 1.19%)</title><rect x="95.2020%" y="197" width="1.1877%" height="15" fill="rgb(210,11,23)" fg:x="143716" fg:w="1793"/><text x="95.4520%" y="207.50"></text></g><g><title>std::time::SystemTime::now (1,170 samples, 0.78%)</title><rect x="95.6147%" y="181" width="0.7750%" height="15" fill="rgb(217,110,2)" fg:x="144339" fg:w="1170"/><text x="95.8647%" y="191.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (1,170 samples, 0.78%)</title><rect x="95.6147%" y="165" width="0.7750%" height="15" fill="rgb(229,77,54)" fg:x="144339" fg:w="1170"/><text x="95.8647%" y="175.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1,170 samples, 0.78%)</title><rect x="95.6147%" y="149" width="0.7750%" height="15" fill="rgb(218,53,16)" fg:x="144339" fg:w="1170"/><text x="95.8647%" y="159.50"></text></g><g><title>__clock_gettime (908 samples, 0.60%)</title><rect x="95.7883%" y="133" width="0.6015%" height="15" fill="rgb(215,38,13)" fg:x="144601" fg:w="908"/><text x="96.0383%" y="143.50"></text></g><g><title>__vdso_clock_gettime (854 samples, 0.57%)</title><rect x="95.8240%" y="117" width="0.5657%" height="15" fill="rgb(235,42,18)" fg:x="144655" fg:w="854"/><text x="96.0740%" y="127.50"></text></g><g><title>[[vdso]] (758 samples, 0.50%)</title><rect x="95.8876%" y="101" width="0.5021%" height="15" fill="rgb(219,66,54)" fg:x="144751" fg:w="758"/><text x="96.1376%" y="111.50"></text></g><g><title>core::mem::drop (16 samples, 0.01%)</title><rect x="96.4090%" y="133" width="0.0106%" height="15" fill="rgb(222,205,4)" fg:x="145538" fg:w="16"/><text x="96.6590%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,simd_json::value::owned::Value&gt;&gt; (16 samples, 0.01%)</title><rect x="96.4090%" y="117" width="0.0106%" height="15" fill="rgb(227,213,46)" fg:x="145538" fg:w="16"/><text x="96.6590%" y="127.50"></text></g><g><title>tremor_pipeline::OpMeta::merge (50 samples, 0.03%)</title><rect x="96.3897%" y="197" width="0.0331%" height="15" fill="rgb(250,145,42)" fg:x="145509" fg:w="50"/><text x="96.6397%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (30 samples, 0.02%)</title><rect x="96.4030%" y="181" width="0.0199%" height="15" fill="rgb(219,15,2)" fg:x="145529" fg:w="30"/><text x="96.6530%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,simd_json::value::owned::Value&gt;&gt; (30 samples, 0.02%)</title><rect x="96.4030%" y="165" width="0.0199%" height="15" fill="rgb(231,181,52)" fg:x="145529" fg:w="30"/><text x="96.6530%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.02%)</title><rect x="96.4030%" y="149" width="0.0199%" height="15" fill="rgb(235,1,42)" fg:x="145529" fg:w="30"/><text x="96.6530%" y="159.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager&lt;S&gt;::run::{{closure}} (4,649 samples, 3.08%)</title><rect x="93.3551%" y="213" width="3.0796%" height="15" fill="rgb(249,88,27)" fg:x="140928" fg:w="4649"/><text x="93.6051%" y="223.50">tre..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (4,661 samples, 3.09%)</title><rect x="93.3479%" y="245" width="3.0876%" height="15" fill="rgb(235,145,16)" fg:x="140917" fg:w="4661"/><text x="93.5979%" y="255.50">&lt;as..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,660 samples, 3.09%)</title><rect x="93.3485%" y="229" width="3.0869%" height="15" fill="rgb(237,114,19)" fg:x="140918" fg:w="4660"/><text x="93.5985%" y="239.50">&lt;co..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,854 samples, 3.22%)</title><rect x="93.2227%" y="357" width="3.2154%" height="15" fill="rgb(238,51,50)" fg:x="140728" fg:w="4854"/><text x="93.4727%" y="367.50">&lt;co..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (4,850 samples, 3.21%)</title><rect x="93.2253%" y="341" width="3.2128%" height="15" fill="rgb(205,194,25)" fg:x="140732" fg:w="4850"/><text x="93.4753%" y="351.50">asy..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (4,765 samples, 3.16%)</title><rect x="93.2816%" y="325" width="3.1565%" height="15" fill="rgb(215,203,17)" fg:x="140817" fg:w="4765"/><text x="93.5316%" y="335.50">&lt;as..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (4,765 samples, 3.16%)</title><rect x="93.2816%" y="309" width="3.1565%" height="15" fill="rgb(233,112,49)" fg:x="140817" fg:w="4765"/><text x="93.5316%" y="319.50">asy..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (4,763 samples, 3.16%)</title><rect x="93.2829%" y="293" width="3.1552%" height="15" fill="rgb(241,130,26)" fg:x="140819" fg:w="4763"/><text x="93.5329%" y="303.50">std..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (4,756 samples, 3.15%)</title><rect x="93.2876%" y="277" width="3.1505%" height="15" fill="rgb(252,223,19)" fg:x="140826" fg:w="4756"/><text x="93.5376%" y="287.50">std..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (4,670 samples, 3.09%)</title><rect x="93.3446%" y="261" width="3.0936%" height="15" fill="rgb(211,95,25)" fg:x="140912" fg:w="4670"/><text x="93.5946%" y="271.50">asy..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (4,857 samples, 3.22%)</title><rect x="93.2227%" y="373" width="3.2174%" height="15" fill="rgb(251,182,27)" fg:x="140728" fg:w="4857"/><text x="93.4727%" y="383.50">&lt;co..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_ref (55 samples, 0.04%)</title><rect x="96.4401%" y="373" width="0.0364%" height="15" fill="rgb(238,24,4)" fg:x="145585" fg:w="55"/><text x="96.6901%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (54 samples, 0.04%)</title><rect x="96.4408%" y="357" width="0.0358%" height="15" fill="rgb(224,220,25)" fg:x="145586" fg:w="54"/><text x="96.6908%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_sub (54 samples, 0.04%)</title><rect x="96.4408%" y="341" width="0.0358%" height="15" fill="rgb(239,133,26)" fg:x="145586" fg:w="54"/><text x="96.6908%" y="351.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (18 samples, 0.01%)</title><rect x="96.4765%" y="357" width="0.0119%" height="15" fill="rgb(211,94,48)" fg:x="145640" fg:w="18"/><text x="96.7265%" y="367.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::schedule (19 samples, 0.01%)</title><rect x="96.4765%" y="373" width="0.0126%" height="15" fill="rgb(239,87,6)" fg:x="145640" fg:w="19"/><text x="96.7265%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (374 samples, 0.25%)</title><rect x="96.4898%" y="373" width="0.2477%" height="15" fill="rgb(227,62,0)" fg:x="145660" fg:w="374"/><text x="96.7398%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (374 samples, 0.25%)</title><rect x="96.4898%" y="357" width="0.2477%" height="15" fill="rgb(211,226,4)" fg:x="145660" fg:w="374"/><text x="96.7398%" y="367.50"></text></g><g><title>async_task::runnable::Runnable::run (5,474 samples, 3.63%)</title><rect x="93.1173%" y="405" width="3.6262%" height="15" fill="rgb(253,38,52)" fg:x="140569" fg:w="5474"/><text x="93.3673%" y="415.50">asyn..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (5,393 samples, 3.57%)</title><rect x="93.1710%" y="389" width="3.5725%" height="15" fill="rgb(229,126,40)" fg:x="140650" fg:w="5393"/><text x="93.4210%" y="399.50">asyn..</text></g><g><title>async_executor::Executor::run::{{closure}} (17,740 samples, 11.75%)</title><rect x="85.0065%" y="469" width="11.7515%" height="15" fill="rgb(229,165,44)" fg:x="128325" fg:w="17740"/><text x="85.2565%" y="479.50">async_executor::E..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (17,722 samples, 11.74%)</title><rect x="85.0184%" y="453" width="11.7396%" height="15" fill="rgb(247,95,47)" fg:x="128343" fg:w="17722"/><text x="85.2684%" y="463.50">&lt;futures_lite::fu..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17,722 samples, 11.74%)</title><rect x="85.0184%" y="437" width="11.7396%" height="15" fill="rgb(216,140,30)" fg:x="128343" fg:w="17722"/><text x="85.2684%" y="447.50">&lt;core::future::fr..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (17,721 samples, 11.74%)</title><rect x="85.0191%" y="421" width="11.7389%" height="15" fill="rgb(246,214,8)" fg:x="128344" fg:w="17721"/><text x="85.2691%" y="431.50">async_executor::E..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (22 samples, 0.01%)</title><rect x="96.7435%" y="405" width="0.0146%" height="15" fill="rgb(227,224,15)" fg:x="146043" fg:w="22"/><text x="96.9935%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (22 samples, 0.01%)</title><rect x="96.7435%" y="389" width="0.0146%" height="15" fill="rgb(233,175,4)" fg:x="146043" fg:w="22"/><text x="96.9935%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (37 samples, 0.02%)</title><rect x="96.8442%" y="213" width="0.0245%" height="15" fill="rgb(221,66,45)" fg:x="146195" fg:w="37"/><text x="97.0942%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (37 samples, 0.02%)</title><rect x="96.8442%" y="197" width="0.0245%" height="15" fill="rgb(221,178,18)" fg:x="146195" fg:w="37"/><text x="97.0942%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (36 samples, 0.02%)</title><rect x="96.8448%" y="181" width="0.0238%" height="15" fill="rgb(213,81,29)" fg:x="146196" fg:w="36"/><text x="97.0948%" y="191.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (26 samples, 0.02%)</title><rect x="96.8515%" y="165" width="0.0172%" height="15" fill="rgb(220,89,49)" fg:x="146206" fg:w="26"/><text x="97.1015%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (26 samples, 0.02%)</title><rect x="96.8515%" y="149" width="0.0172%" height="15" fill="rgb(227,60,33)" fg:x="146206" fg:w="26"/><text x="97.1015%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (24 samples, 0.02%)</title><rect x="96.8528%" y="133" width="0.0159%" height="15" fill="rgb(205,113,12)" fg:x="146208" fg:w="24"/><text x="97.1028%" y="143.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (24 samples, 0.02%)</title><rect x="96.8528%" y="117" width="0.0159%" height="15" fill="rgb(211,32,1)" fg:x="146208" fg:w="24"/><text x="97.1028%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 0.03%)</title><rect x="96.8435%" y="261" width="0.0258%" height="15" fill="rgb(246,2,12)" fg:x="146194" fg:w="39"/><text x="97.0935%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (39 samples, 0.03%)</title><rect x="96.8435%" y="245" width="0.0258%" height="15" fill="rgb(243,37,27)" fg:x="146194" fg:w="39"/><text x="97.0935%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (39 samples, 0.03%)</title><rect x="96.8435%" y="229" width="0.0258%" height="15" fill="rgb(248,211,31)" fg:x="146194" fg:w="39"/><text x="97.0935%" y="239.50"></text></g><g><title>concurrent_queue::full_fence (54 samples, 0.04%)</title><rect x="96.9018%" y="229" width="0.0358%" height="15" fill="rgb(242,146,47)" fg:x="146282" fg:w="54"/><text x="97.1518%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (53 samples, 0.04%)</title><rect x="96.9025%" y="213" width="0.0351%" height="15" fill="rgb(206,70,20)" fg:x="146283" fg:w="53"/><text x="97.1525%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (53 samples, 0.04%)</title><rect x="96.9025%" y="197" width="0.0351%" height="15" fill="rgb(215,10,51)" fg:x="146283" fg:w="53"/><text x="97.1525%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (53 samples, 0.04%)</title><rect x="96.9025%" y="181" width="0.0351%" height="15" fill="rgb(243,178,53)" fg:x="146283" fg:w="53"/><text x="97.1525%" y="191.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (142 samples, 0.09%)</title><rect x="96.8886%" y="245" width="0.0941%" height="15" fill="rgb(233,221,20)" fg:x="146262" fg:w="142"/><text x="97.1386%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (68 samples, 0.05%)</title><rect x="96.9376%" y="229" width="0.0450%" height="15" fill="rgb(218,95,35)" fg:x="146336" fg:w="68"/><text x="97.1876%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_load (68 samples, 0.05%)</title><rect x="96.9376%" y="213" width="0.0450%" height="15" fill="rgb(229,13,5)" fg:x="146336" fg:w="68"/><text x="97.1876%" y="223.50"></text></g><g><title>concurrent_queue::full_fence (48 samples, 0.03%)</title><rect x="96.9912%" y="229" width="0.0318%" height="15" fill="rgb(252,164,30)" fg:x="146417" fg:w="48"/><text x="97.2412%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (48 samples, 0.03%)</title><rect x="96.9912%" y="213" width="0.0318%" height="15" fill="rgb(232,68,36)" fg:x="146417" fg:w="48"/><text x="97.2412%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (48 samples, 0.03%)</title><rect x="96.9912%" y="197" width="0.0318%" height="15" fill="rgb(219,59,54)" fg:x="146417" fg:w="48"/><text x="97.2412%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (48 samples, 0.03%)</title><rect x="96.9912%" y="181" width="0.0318%" height="15" fill="rgb(250,92,33)" fg:x="146417" fg:w="48"/><text x="97.2412%" y="191.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (254 samples, 0.17%)</title><rect x="96.8693%" y="261" width="0.1683%" height="15" fill="rgb(229,162,54)" fg:x="146233" fg:w="254"/><text x="97.1193%" y="271.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (83 samples, 0.05%)</title><rect x="96.9826%" y="245" width="0.0550%" height="15" fill="rgb(244,114,52)" fg:x="146404" fg:w="83"/><text x="97.2326%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (20 samples, 0.01%)</title><rect x="97.0244%" y="229" width="0.0132%" height="15" fill="rgb(212,211,43)" fg:x="146467" fg:w="20"/><text x="97.2744%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_load (20 samples, 0.01%)</title><rect x="97.0244%" y="213" width="0.0132%" height="15" fill="rgb(226,147,8)" fg:x="146467" fg:w="20"/><text x="97.2744%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (50 samples, 0.03%)</title><rect x="97.0376%" y="261" width="0.0331%" height="15" fill="rgb(226,23,13)" fg:x="146487" fg:w="50"/><text x="97.2876%" y="271.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (50 samples, 0.03%)</title><rect x="97.0376%" y="245" width="0.0331%" height="15" fill="rgb(240,63,4)" fg:x="146487" fg:w="50"/><text x="97.2876%" y="255.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read_unlock (48 samples, 0.03%)</title><rect x="97.0389%" y="229" width="0.0318%" height="15" fill="rgb(221,1,32)" fg:x="146489" fg:w="48"/><text x="97.2889%" y="239.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_unlock (48 samples, 0.03%)</title><rect x="97.0389%" y="213" width="0.0318%" height="15" fill="rgb(242,117,10)" fg:x="146489" fg:w="48"/><text x="97.2889%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (44 samples, 0.03%)</title><rect x="97.0416%" y="197" width="0.0291%" height="15" fill="rgb(249,172,44)" fg:x="146493" fg:w="44"/><text x="97.2916%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_sub (44 samples, 0.03%)</title><rect x="97.0416%" y="181" width="0.0291%" height="15" fill="rgb(244,46,45)" fg:x="146493" fg:w="44"/><text x="97.2916%" y="191.50"></text></g><g><title>fastrand::usize (29 samples, 0.02%)</title><rect x="97.0707%" y="261" width="0.0192%" height="15" fill="rgb(206,43,17)" fg:x="146537" fg:w="29"/><text x="97.3207%" y="271.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (27 samples, 0.02%)</title><rect x="97.0721%" y="245" width="0.0179%" height="15" fill="rgb(239,218,39)" fg:x="146539" fg:w="27"/><text x="97.3221%" y="255.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (26 samples, 0.02%)</title><rect x="97.0727%" y="229" width="0.0172%" height="15" fill="rgb(208,169,54)" fg:x="146540" fg:w="26"/><text x="97.3227%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (47 samples, 0.03%)</title><rect x="97.0946%" y="213" width="0.0311%" height="15" fill="rgb(247,25,42)" fg:x="146573" fg:w="47"/><text x="97.3446%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (47 samples, 0.03%)</title><rect x="97.0946%" y="197" width="0.0311%" height="15" fill="rgb(226,23,31)" fg:x="146573" fg:w="47"/><text x="97.3446%" y="207.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (447 samples, 0.30%)</title><rect x="96.8316%" y="277" width="0.2961%" height="15" fill="rgb(247,16,28)" fg:x="146176" fg:w="447"/><text x="97.0816%" y="287.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (57 samples, 0.04%)</title><rect x="97.0899%" y="261" width="0.0378%" height="15" fill="rgb(231,147,38)" fg:x="146566" fg:w="57"/><text x="97.3399%" y="271.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read (52 samples, 0.03%)</title><rect x="97.0933%" y="245" width="0.0344%" height="15" fill="rgb(253,81,48)" fg:x="146571" fg:w="52"/><text x="97.3433%" y="255.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (52 samples, 0.03%)</title><rect x="97.0933%" y="229" width="0.0344%" height="15" fill="rgb(249,222,43)" fg:x="146571" fg:w="52"/><text x="97.3433%" y="239.50"></text></g><g><title>async_executor::Sleepers::update (27 samples, 0.02%)</title><rect x="97.1376%" y="261" width="0.0179%" height="15" fill="rgb(221,3,27)" fg:x="146638" fg:w="27"/><text x="97.3876%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (49 samples, 0.03%)</title><rect x="97.1555%" y="261" width="0.0325%" height="15" fill="rgb(228,180,5)" fg:x="146665" fg:w="49"/><text x="97.4055%" y="271.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (49 samples, 0.03%)</title><rect x="97.1555%" y="245" width="0.0325%" height="15" fill="rgb(227,131,42)" fg:x="146665" fg:w="49"/><text x="97.4055%" y="255.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (46 samples, 0.03%)</title><rect x="97.1575%" y="229" width="0.0305%" height="15" fill="rgb(212,3,39)" fg:x="146668" fg:w="46"/><text x="97.4075%" y="239.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (46 samples, 0.03%)</title><rect x="97.1575%" y="213" width="0.0305%" height="15" fill="rgb(226,45,5)" fg:x="146668" fg:w="46"/><text x="97.4075%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (46 samples, 0.03%)</title><rect x="97.1575%" y="197" width="0.0305%" height="15" fill="rgb(215,167,45)" fg:x="146668" fg:w="46"/><text x="97.4075%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_swap (46 samples, 0.03%)</title><rect x="97.1575%" y="181" width="0.0305%" height="15" fill="rgb(250,218,53)" fg:x="146668" fg:w="46"/><text x="97.4075%" y="191.50"></text></g><g><title>async_executor::Ticker::sleep (156 samples, 0.10%)</title><rect x="97.1277%" y="277" width="0.1033%" height="15" fill="rgb(207,140,0)" fg:x="146623" fg:w="156"/><text x="97.3777%" y="287.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (65 samples, 0.04%)</title><rect x="97.1880%" y="261" width="0.0431%" height="15" fill="rgb(238,133,51)" fg:x="146714" fg:w="65"/><text x="97.4380%" y="271.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (56 samples, 0.04%)</title><rect x="97.1939%" y="245" width="0.0371%" height="15" fill="rgb(218,203,53)" fg:x="146723" fg:w="56"/><text x="97.4439%" y="255.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (56 samples, 0.04%)</title><rect x="97.1939%" y="229" width="0.0371%" height="15" fill="rgb(226,184,25)" fg:x="146723" fg:w="56"/><text x="97.4439%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (56 samples, 0.04%)</title><rect x="97.1939%" y="213" width="0.0371%" height="15" fill="rgb(231,121,21)" fg:x="146723" fg:w="56"/><text x="97.4439%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (56 samples, 0.04%)</title><rect x="97.1939%" y="197" width="0.0371%" height="15" fill="rgb(251,14,34)" fg:x="146723" fg:w="56"/><text x="97.4439%" y="207.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (657 samples, 0.44%)</title><rect x="96.7985%" y="389" width="0.4352%" height="15" fill="rgb(249,193,11)" fg:x="146126" fg:w="657"/><text x="97.0485%" y="399.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (642 samples, 0.43%)</title><rect x="96.8084%" y="373" width="0.4253%" height="15" fill="rgb(220,172,37)" fg:x="146141" fg:w="642"/><text x="97.0584%" y="383.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}} (639 samples, 0.42%)</title><rect x="96.8104%" y="357" width="0.4233%" height="15" fill="rgb(231,229,43)" fg:x="146144" fg:w="639"/><text x="97.0604%" y="367.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (626 samples, 0.41%)</title><rect x="96.8190%" y="341" width="0.4147%" height="15" fill="rgb(250,161,5)" fg:x="146157" fg:w="626"/><text x="97.0690%" y="351.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (626 samples, 0.41%)</title><rect x="96.8190%" y="325" width="0.4147%" height="15" fill="rgb(218,225,18)" fg:x="146157" fg:w="626"/><text x="97.0690%" y="335.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (612 samples, 0.41%)</title><rect x="96.8283%" y="309" width="0.4054%" height="15" fill="rgb(245,45,42)" fg:x="146171" fg:w="612"/><text x="97.0783%" y="319.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (609 samples, 0.40%)</title><rect x="96.8303%" y="293" width="0.4034%" height="15" fill="rgb(211,115,1)" fg:x="146174" fg:w="609"/><text x="97.0803%" y="303.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (51 samples, 0.03%)</title><rect x="97.2867%" y="325" width="0.0338%" height="15" fill="rgb(248,133,52)" fg:x="146863" fg:w="51"/><text x="97.5367%" y="335.50"></text></g><g><title>core::mem::replace (51 samples, 0.03%)</title><rect x="97.2867%" y="309" width="0.0338%" height="15" fill="rgb(238,100,21)" fg:x="146863" fg:w="51"/><text x="97.5367%" y="319.50"></text></g><g><title>core::ptr::read (51 samples, 0.03%)</title><rect x="97.2867%" y="293" width="0.0338%" height="15" fill="rgb(247,144,11)" fg:x="146863" fg:w="51"/><text x="97.5367%" y="303.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (74 samples, 0.05%)</title><rect x="97.2794%" y="341" width="0.0490%" height="15" fill="rgb(206,164,16)" fg:x="146852" fg:w="74"/><text x="97.5294%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (53 samples, 0.04%)</title><rect x="97.3284%" y="341" width="0.0351%" height="15" fill="rgb(222,34,3)" fg:x="146926" fg:w="53"/><text x="97.5784%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (50 samples, 0.03%)</title><rect x="97.3304%" y="325" width="0.0331%" height="15" fill="rgb(248,82,4)" fg:x="146929" fg:w="50"/><text x="97.5804%" y="335.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (50 samples, 0.03%)</title><rect x="97.3304%" y="309" width="0.0331%" height="15" fill="rgb(228,81,46)" fg:x="146929" fg:w="50"/><text x="97.5804%" y="319.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (46 samples, 0.03%)</title><rect x="97.3331%" y="293" width="0.0305%" height="15" fill="rgb(227,67,47)" fg:x="146933" fg:w="46"/><text x="97.5831%" y="303.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (46 samples, 0.03%)</title><rect x="97.3331%" y="277" width="0.0305%" height="15" fill="rgb(215,93,53)" fg:x="146933" fg:w="46"/><text x="97.5831%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (46 samples, 0.03%)</title><rect x="97.3331%" y="261" width="0.0305%" height="15" fill="rgb(248,194,39)" fg:x="146933" fg:w="46"/><text x="97.5831%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_swap (46 samples, 0.03%)</title><rect x="97.3331%" y="245" width="0.0305%" height="15" fill="rgb(215,5,19)" fg:x="146933" fg:w="46"/><text x="97.5831%" y="255.50"></text></g><g><title>core::task::wake::Waker::will_wake (16 samples, 0.01%)</title><rect x="97.3648%" y="341" width="0.0106%" height="15" fill="rgb(226,215,51)" fg:x="146981" fg:w="16"/><text x="97.6148%" y="351.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (16 samples, 0.01%)</title><rect x="97.3648%" y="325" width="0.0106%" height="15" fill="rgb(225,56,26)" fg:x="146981" fg:w="16"/><text x="97.6148%" y="335.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (244 samples, 0.16%)</title><rect x="97.2635%" y="357" width="0.1616%" height="15" fill="rgb(222,75,29)" fg:x="146828" fg:w="244"/><text x="97.5135%" y="367.50"></text></g><g><title>event_listener::Inner::lock (75 samples, 0.05%)</title><rect x="97.3754%" y="341" width="0.0497%" height="15" fill="rgb(236,139,6)" fg:x="146997" fg:w="75"/><text x="97.6254%" y="351.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (69 samples, 0.05%)</title><rect x="97.3794%" y="325" width="0.0457%" height="15" fill="rgb(223,137,36)" fg:x="147003" fg:w="69"/><text x="97.6294%" y="335.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (67 samples, 0.04%)</title><rect x="97.3807%" y="309" width="0.0444%" height="15" fill="rgb(226,99,2)" fg:x="147005" fg:w="67"/><text x="97.6307%" y="319.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (67 samples, 0.04%)</title><rect x="97.3807%" y="293" width="0.0444%" height="15" fill="rgb(206,133,23)" fg:x="147005" fg:w="67"/><text x="97.6307%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (67 samples, 0.04%)</title><rect x="97.3807%" y="277" width="0.0444%" height="15" fill="rgb(243,173,15)" fg:x="147005" fg:w="67"/><text x="97.6307%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (67 samples, 0.04%)</title><rect x="97.3807%" y="261" width="0.0444%" height="15" fill="rgb(228,69,28)" fg:x="147005" fg:w="67"/><text x="97.6307%" y="271.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,068 samples, 0.71%)</title><rect x="96.7938%" y="421" width="0.7075%" height="15" fill="rgb(212,51,22)" fg:x="146119" fg:w="1068"/><text x="97.0438%" y="431.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,063 samples, 0.70%)</title><rect x="96.7971%" y="405" width="0.7042%" height="15" fill="rgb(227,113,0)" fg:x="146124" fg:w="1063"/><text x="97.0471%" y="415.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}} (404 samples, 0.27%)</title><rect x="97.2337%" y="389" width="0.2676%" height="15" fill="rgb(252,84,27)" fg:x="146783" fg:w="404"/><text x="97.4837%" y="399.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (380 samples, 0.25%)</title><rect x="97.2496%" y="373" width="0.2517%" height="15" fill="rgb(223,145,39)" fg:x="146807" fg:w="380"/><text x="97.4996%" y="383.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (115 samples, 0.08%)</title><rect x="97.4251%" y="357" width="0.0762%" height="15" fill="rgb(239,219,30)" fg:x="147072" fg:w="115"/><text x="97.6751%" y="367.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (115 samples, 0.08%)</title><rect x="97.4251%" y="341" width="0.0762%" height="15" fill="rgb(224,196,39)" fg:x="147072" fg:w="115"/><text x="97.6751%" y="351.50"></text></g><g><title>concurrent_queue::single::Single&lt;T&gt;::pop (74 samples, 0.05%)</title><rect x="97.4523%" y="325" width="0.0490%" height="15" fill="rgb(205,35,43)" fg:x="147113" fg:w="74"/><text x="97.7023%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (71 samples, 0.05%)</title><rect x="97.4543%" y="309" width="0.0470%" height="15" fill="rgb(228,201,21)" fg:x="147116" fg:w="71"/><text x="97.7043%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (71 samples, 0.05%)</title><rect x="97.4543%" y="293" width="0.0470%" height="15" fill="rgb(237,118,16)" fg:x="147116" fg:w="71"/><text x="97.7043%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (71 samples, 0.05%)</title><rect x="97.4543%" y="277" width="0.0470%" height="15" fill="rgb(241,17,19)" fg:x="147116" fg:w="71"/><text x="97.7043%" y="287.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (18,901 samples, 12.52%)</title><rect x="84.9847%" y="501" width="12.5206%" height="15" fill="rgb(214,10,25)" fg:x="128292" fg:w="18901"/><text x="85.2347%" y="511.50">&lt;futures_lite::futu..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,871 samples, 12.50%)</title><rect x="85.0045%" y="485" width="12.5007%" height="15" fill="rgb(238,37,29)" fg:x="128322" fg:w="18871"/><text x="85.2545%" y="495.50">&lt;core::future::from..</text></g><g><title>async_executor::LocalExecutor::run::{{closure}} (1,128 samples, 0.75%)</title><rect x="96.7581%" y="469" width="0.7472%" height="15" fill="rgb(253,83,25)" fg:x="146065" fg:w="1128"/><text x="97.0081%" y="479.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,085 samples, 0.72%)</title><rect x="96.7865%" y="453" width="0.7187%" height="15" fill="rgb(234,192,12)" fg:x="146108" fg:w="1085"/><text x="97.0365%" y="463.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (1,085 samples, 0.72%)</title><rect x="96.7865%" y="437" width="0.7187%" height="15" fill="rgb(241,216,45)" fg:x="146108" fg:w="1085"/><text x="97.0365%" y="447.50"></text></g><g><title>async_io::reactor::Reactor::try_lock (77 samples, 0.05%)</title><rect x="97.5126%" y="501" width="0.0510%" height="15" fill="rgb(242,22,33)" fg:x="147204" fg:w="77"/><text x="97.7626%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (77 samples, 0.05%)</title><rect x="97.5126%" y="485" width="0.0510%" height="15" fill="rgb(231,105,49)" fg:x="147204" fg:w="77"/><text x="97.7626%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (63 samples, 0.04%)</title><rect x="97.5218%" y="469" width="0.0417%" height="15" fill="rgb(218,204,15)" fg:x="147218" fg:w="63"/><text x="97.7718%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::try_lock (63 samples, 0.04%)</title><rect x="97.5218%" y="453" width="0.0417%" height="15" fill="rgb(235,138,41)" fg:x="147218" fg:w="63"/><text x="97.7718%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (63 samples, 0.04%)</title><rect x="97.5218%" y="437" width="0.0417%" height="15" fill="rgb(246,0,9)" fg:x="147218" fg:w="63"/><text x="97.7718%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (63 samples, 0.04%)</title><rect x="97.5218%" y="421" width="0.0417%" height="15" fill="rgb(210,74,4)" fg:x="147218" fg:w="63"/><text x="97.7718%" y="431.50"></text></g><g><title>sn_rust_dealloc (48 samples, 0.03%)</title><rect x="97.6139%" y="325" width="0.0318%" height="15" fill="rgb(250,60,41)" fg:x="147357" fg:w="48"/><text x="97.8639%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (67 samples, 0.04%)</title><rect x="97.6133%" y="389" width="0.0444%" height="15" fill="rgb(220,115,12)" fg:x="147356" fg:w="67"/><text x="97.8633%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (66 samples, 0.04%)</title><rect x="97.6139%" y="373" width="0.0437%" height="15" fill="rgb(237,100,13)" fg:x="147357" fg:w="66"/><text x="97.8639%" y="383.50"></text></g><g><title>__rg_dealloc (66 samples, 0.04%)</title><rect x="97.6139%" y="357" width="0.0437%" height="15" fill="rgb(213,55,26)" fg:x="147357" fg:w="66"/><text x="97.8639%" y="367.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (66 samples, 0.04%)</title><rect x="97.6139%" y="341" width="0.0437%" height="15" fill="rgb(216,17,4)" fg:x="147357" fg:w="66"/><text x="97.8639%" y="351.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (71 samples, 0.05%)</title><rect x="97.6119%" y="421" width="0.0470%" height="15" fill="rgb(220,153,47)" fg:x="147354" fg:w="71"/><text x="97.8619%" y="431.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (71 samples, 0.05%)</title><rect x="97.6119%" y="405" width="0.0470%" height="15" fill="rgb(215,131,9)" fg:x="147354" fg:w="71"/><text x="97.8619%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (78 samples, 0.05%)</title><rect x="97.6080%" y="469" width="0.0517%" height="15" fill="rgb(233,46,42)" fg:x="147348" fg:w="78"/><text x="97.8580%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V&gt;::dying_next (74 samples, 0.05%)</title><rect x="97.6106%" y="453" width="0.0490%" height="15" fill="rgb(226,86,7)" fg:x="147352" fg:w="74"/><text x="97.8606%" y="463.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (72 samples, 0.05%)</title><rect x="97.6119%" y="437" width="0.0477%" height="15" fill="rgb(239,226,21)" fg:x="147354" fg:w="72"/><text x="97.8619%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="97.6596%" y="469" width="0.0106%" height="15" fill="rgb(244,137,22)" fg:x="147426" fg:w="16"/><text x="97.9096%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="97.6596%" y="453" width="0.0106%" height="15" fill="rgb(211,139,35)" fg:x="147426" fg:w="16"/><text x="97.9096%" y="463.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Immut,K,V&gt;::next_unchecked (16 samples, 0.01%)</title><rect x="97.6596%" y="437" width="0.0106%" height="15" fill="rgb(214,62,50)" fg:x="147426" fg:w="16"/><text x="97.9096%" y="447.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::Edge&gt;::move_suffix (43 samples, 0.03%)</title><rect x="97.6841%" y="437" width="0.0285%" height="15" fill="rgb(212,113,44)" fg:x="147463" fg:w="43"/><text x="97.9341%" y="447.50"></text></g><g><title>alloc::collections::btree::node::move_to_slice (34 samples, 0.02%)</title><rect x="97.6901%" y="421" width="0.0225%" height="15" fill="rgb(226,150,43)" fg:x="147472" fg:w="34"/><text x="97.9401%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (34 samples, 0.02%)</title><rect x="97.6901%" y="405" width="0.0225%" height="15" fill="rgb(250,71,37)" fg:x="147472" fg:w="34"/><text x="97.9401%" y="415.50"></text></g><g><title>[libc-2.31.so] (32 samples, 0.02%)</title><rect x="97.6914%" y="389" width="0.0212%" height="15" fill="rgb(219,76,19)" fg:x="147474" fg:w="32"/><text x="97.9414%" y="399.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (38 samples, 0.03%)</title><rect x="97.7166%" y="405" width="0.0252%" height="15" fill="rgb(250,39,11)" fg:x="147512" fg:w="38"/><text x="97.9666%" y="415.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (52 samples, 0.03%)</title><rect x="97.7146%" y="437" width="0.0344%" height="15" fill="rgb(230,64,31)" fg:x="147509" fg:w="52"/><text x="97.9646%" y="447.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (52 samples, 0.03%)</title><rect x="97.7146%" y="421" width="0.0344%" height="15" fill="rgb(208,222,23)" fg:x="147509" fg:w="52"/><text x="97.9646%" y="431.50"></text></g><g><title>snmalloc::Buddy&lt;snmalloc::BuddyChunkRep&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt; &gt;, 14ul, 21ul&gt;::add_block (31 samples, 0.02%)</title><rect x="98.1604%" y="181" width="0.0205%" height="15" fill="rgb(227,125,18)" fg:x="148182" fg:w="31"/><text x="98.4104%" y="191.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (591 samples, 0.39%)</title><rect x="97.7994%" y="229" width="0.3915%" height="15" fill="rgb(234,210,9)" fg:x="147637" fg:w="591"/><text x="98.0494%" y="239.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (52 samples, 0.03%)</title><rect x="98.1565%" y="213" width="0.0344%" height="15" fill="rgb(217,127,24)" fg:x="148176" fg:w="52"/><text x="98.4065%" y="223.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_slabs&lt;false&gt; (49 samples, 0.03%)</title><rect x="98.1584%" y="197" width="0.0325%" height="15" fill="rgb(239,141,48)" fg:x="148179" fg:w="49"/><text x="98.4084%" y="207.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (672 samples, 0.45%)</title><rect x="97.7491%" y="421" width="0.4452%" height="15" fill="rgb(227,109,8)" fg:x="147561" fg:w="672"/><text x="97.9991%" y="431.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (672 samples, 0.45%)</title><rect x="97.7491%" y="405" width="0.4452%" height="15" fill="rgb(235,184,23)" fg:x="147561" fg:w="672"/><text x="97.9991%" y="415.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (672 samples, 0.45%)</title><rect x="97.7491%" y="389" width="0.4452%" height="15" fill="rgb(227,226,48)" fg:x="147561" fg:w="672"/><text x="97.9991%" y="399.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new_uninit (672 samples, 0.45%)</title><rect x="97.7491%" y="373" width="0.4452%" height="15" fill="rgb(206,150,11)" fg:x="147561" fg:w="672"/><text x="97.9991%" y="383.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (672 samples, 0.45%)</title><rect x="97.7491%" y="357" width="0.4452%" height="15" fill="rgb(254,2,33)" fg:x="147561" fg:w="672"/><text x="97.9991%" y="367.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (672 samples, 0.45%)</title><rect x="97.7491%" y="341" width="0.4452%" height="15" fill="rgb(243,160,20)" fg:x="147561" fg:w="672"/><text x="97.9991%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (672 samples, 0.45%)</title><rect x="97.7491%" y="325" width="0.4452%" height="15" fill="rgb(218,208,30)" fg:x="147561" fg:w="672"/><text x="97.9991%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (672 samples, 0.45%)</title><rect x="97.7491%" y="309" width="0.4452%" height="15" fill="rgb(224,120,49)" fg:x="147561" fg:w="672"/><text x="97.9991%" y="319.50"></text></g><g><title>alloc::alloc::alloc (669 samples, 0.44%)</title><rect x="97.7510%" y="293" width="0.4432%" height="15" fill="rgb(246,12,2)" fg:x="147564" fg:w="669"/><text x="98.0010%" y="303.50"></text></g><g><title>__rg_alloc (669 samples, 0.44%)</title><rect x="97.7510%" y="277" width="0.4432%" height="15" fill="rgb(236,117,3)" fg:x="147564" fg:w="669"/><text x="98.0010%" y="287.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (669 samples, 0.44%)</title><rect x="97.7510%" y="261" width="0.4432%" height="15" fill="rgb(216,128,52)" fg:x="147564" fg:w="669"/><text x="98.0010%" y="271.50"></text></g><g><title>sn_rust_alloc (665 samples, 0.44%)</title><rect x="97.7537%" y="245" width="0.4405%" height="15" fill="rgb(246,145,19)" fg:x="147568" fg:w="665"/><text x="98.0037%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::split_off (789 samples, 0.52%)</title><rect x="97.6735%" y="469" width="0.5227%" height="15" fill="rgb(222,11,46)" fg:x="147447" fg:w="789"/><text x="97.9235%" y="479.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::split_off (783 samples, 0.52%)</title><rect x="97.6775%" y="453" width="0.5187%" height="15" fill="rgb(245,82,36)" fg:x="147453" fg:w="783"/><text x="97.9275%" y="463.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::new_pillar (675 samples, 0.45%)</title><rect x="97.7491%" y="437" width="0.4471%" height="15" fill="rgb(250,73,51)" fg:x="147561" fg:w="675"/><text x="97.9991%" y="447.50"></text></g><g><title>concurrent_queue::full_fence (39 samples, 0.03%)</title><rect x="98.2154%" y="421" width="0.0258%" height="15" fill="rgb(221,189,23)" fg:x="148265" fg:w="39"/><text x="98.4654%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (39 samples, 0.03%)</title><rect x="98.2154%" y="405" width="0.0258%" height="15" fill="rgb(210,33,7)" fg:x="148265" fg:w="39"/><text x="98.4654%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (39 samples, 0.03%)</title><rect x="98.2154%" y="389" width="0.0258%" height="15" fill="rgb(210,107,22)" fg:x="148265" fg:w="39"/><text x="98.4654%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (39 samples, 0.03%)</title><rect x="98.2154%" y="373" width="0.0258%" height="15" fill="rgb(222,116,37)" fg:x="148265" fg:w="39"/><text x="98.4654%" y="383.50"></text></g><g><title>async_io::reactor::Reactor::process_timer_ops (78 samples, 0.05%)</title><rect x="98.1962%" y="469" width="0.0517%" height="15" fill="rgb(254,17,48)" fg:x="148236" fg:w="78"/><text x="98.4462%" y="479.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (65 samples, 0.04%)</title><rect x="98.2048%" y="453" width="0.0431%" height="15" fill="rgb(224,36,32)" fg:x="148249" fg:w="65"/><text x="98.4548%" y="463.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (56 samples, 0.04%)</title><rect x="98.2108%" y="437" width="0.0371%" height="15" fill="rgb(232,90,46)" fg:x="148258" fg:w="56"/><text x="98.4608%" y="447.50"></text></g><g><title>core::mem::drop (109 samples, 0.07%)</title><rect x="98.2479%" y="469" width="0.0722%" height="15" fill="rgb(241,66,40)" fg:x="148314" fg:w="109"/><text x="98.4979%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::collections::btree::map::BTreeMap&lt;(std::time::Instant,usize),core::task::wake::Waker&gt;&gt;&gt; (109 samples, 0.07%)</title><rect x="98.2479%" y="453" width="0.0722%" height="15" fill="rgb(249,184,29)" fg:x="148314" fg:w="109"/><text x="98.4979%" y="463.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (109 samples, 0.07%)</title><rect x="98.2479%" y="437" width="0.0722%" height="15" fill="rgb(231,181,1)" fg:x="148314" fg:w="109"/><text x="98.4979%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (107 samples, 0.07%)</title><rect x="98.2492%" y="421" width="0.0709%" height="15" fill="rgb(224,94,2)" fg:x="148316" fg:w="107"/><text x="98.4992%" y="431.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (107 samples, 0.07%)</title><rect x="98.2492%" y="405" width="0.0709%" height="15" fill="rgb(229,170,15)" fg:x="148316" fg:w="107"/><text x="98.4992%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (107 samples, 0.07%)</title><rect x="98.2492%" y="389" width="0.0709%" height="15" fill="rgb(240,127,35)" fg:x="148316" fg:w="107"/><text x="98.4992%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_swap (107 samples, 0.07%)</title><rect x="98.2492%" y="373" width="0.0709%" height="15" fill="rgb(248,196,34)" fg:x="148316" fg:w="107"/><text x="98.4992%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (20 samples, 0.01%)</title><rect x="98.3214%" y="469" width="0.0132%" height="15" fill="rgb(236,137,7)" fg:x="148425" fg:w="20"/><text x="98.5714%" y="479.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (57 samples, 0.04%)</title><rect x="98.3406%" y="469" width="0.0378%" height="15" fill="rgb(235,127,16)" fg:x="148454" fg:w="57"/><text x="98.5906%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (57 samples, 0.04%)</title><rect x="98.3406%" y="453" width="0.0378%" height="15" fill="rgb(250,192,54)" fg:x="148454" fg:w="57"/><text x="98.5906%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (57 samples, 0.04%)</title><rect x="98.3406%" y="437" width="0.0378%" height="15" fill="rgb(218,98,20)" fg:x="148454" fg:w="57"/><text x="98.5906%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (57 samples, 0.04%)</title><rect x="98.3406%" y="421" width="0.0378%" height="15" fill="rgb(230,176,47)" fg:x="148454" fg:w="57"/><text x="98.5906%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (57 samples, 0.04%)</title><rect x="98.3406%" y="405" width="0.0378%" height="15" fill="rgb(244,2,33)" fg:x="148454" fg:w="57"/><text x="98.5906%" y="415.50"></text></g><g><title>__clock_gettime (82 samples, 0.05%)</title><rect x="98.3790%" y="421" width="0.0543%" height="15" fill="rgb(231,100,17)" fg:x="148512" fg:w="82"/><text x="98.6290%" y="431.50"></text></g><g><title>__vdso_clock_gettime (62 samples, 0.04%)</title><rect x="98.3923%" y="405" width="0.0411%" height="15" fill="rgb(245,23,12)" fg:x="148532" fg:w="62"/><text x="98.6423%" y="415.50"></text></g><g><title>[[vdso]] (58 samples, 0.04%)</title><rect x="98.3949%" y="389" width="0.0384%" height="15" fill="rgb(249,55,22)" fg:x="148536" fg:w="58"/><text x="98.6449%" y="399.50"></text></g><g><title>async_io::reactor::Reactor::process_timers (1,267 samples, 0.84%)</title><rect x="97.5954%" y="485" width="0.8393%" height="15" fill="rgb(207,134,9)" fg:x="147329" fg:w="1267"/><text x="97.8454%" y="495.50"></text></g><g><title>std::time::Instant::now (85 samples, 0.06%)</title><rect x="98.3784%" y="469" width="0.0563%" height="15" fill="rgb(218,134,0)" fg:x="148511" fg:w="85"/><text x="98.6284%" y="479.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (85 samples, 0.06%)</title><rect x="98.3784%" y="453" width="0.0563%" height="15" fill="rgb(213,212,33)" fg:x="148511" fg:w="85"/><text x="98.6284%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (85 samples, 0.06%)</title><rect x="98.3784%" y="437" width="0.0563%" height="15" fill="rgb(252,106,18)" fg:x="148511" fg:w="85"/><text x="98.6284%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (47 samples, 0.03%)</title><rect x="98.4353%" y="485" width="0.0311%" height="15" fill="rgb(208,126,42)" fg:x="148597" fg:w="47"/><text x="98.6853%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_add (47 samples, 0.03%)</title><rect x="98.4353%" y="469" width="0.0311%" height="15" fill="rgb(246,175,29)" fg:x="148597" fg:w="47"/><text x="98.6853%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;polling::epoll::Events&gt;&gt; (25 samples, 0.02%)</title><rect x="98.4936%" y="469" width="0.0166%" height="15" fill="rgb(215,13,50)" fg:x="148685" fg:w="25"/><text x="98.7436%" y="479.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.02%)</title><rect x="98.4936%" y="453" width="0.0166%" height="15" fill="rgb(216,172,15)" fg:x="148685" fg:w="25"/><text x="98.7436%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (25 samples, 0.02%)</title><rect x="98.5102%" y="469" width="0.0166%" height="15" fill="rgb(212,103,13)" fg:x="148710" fg:w="25"/><text x="98.7602%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_swap (25 samples, 0.02%)</title><rect x="98.5102%" y="453" width="0.0166%" height="15" fill="rgb(231,171,36)" fg:x="148710" fg:w="25"/><text x="98.7602%" y="463.50"></text></g><g><title>__pthread_disable_asynccancel (16 samples, 0.01%)</title><rect x="98.6407%" y="437" width="0.0106%" height="15" fill="rgb(250,123,20)" fg:x="148907" fg:w="16"/><text x="98.8907%" y="447.50"></text></g><g><title>__libc_read (117 samples, 0.08%)</title><rect x="98.6009%" y="453" width="0.0775%" height="15" fill="rgb(212,53,50)" fg:x="148847" fg:w="117"/><text x="98.8509%" y="463.50"></text></g><g><title>__pthread_enable_asynccancel (41 samples, 0.03%)</title><rect x="98.6513%" y="437" width="0.0272%" height="15" fill="rgb(243,54,12)" fg:x="148923" fg:w="41"/><text x="98.9013%" y="447.50"></text></g><g><title>epoll_wait (189 samples, 0.13%)</title><rect x="98.6784%" y="453" width="0.1252%" height="15" fill="rgb(234,101,34)" fg:x="148964" fg:w="189"/><text x="98.9284%" y="463.50"></text></g><g><title>[libc-2.31.so] (48 samples, 0.03%)</title><rect x="98.7719%" y="437" width="0.0318%" height="15" fill="rgb(254,67,22)" fg:x="149105" fg:w="48"/><text x="99.0219%" y="447.50"></text></g><g><title>polling::epoll::Poller::modify (107 samples, 0.07%)</title><rect x="98.8050%" y="453" width="0.0709%" height="15" fill="rgb(250,35,47)" fg:x="149155" fg:w="107"/><text x="99.0550%" y="463.50"></text></g><g><title>polling::epoll::Poller::ctl (90 samples, 0.06%)</title><rect x="98.8162%" y="437" width="0.0596%" height="15" fill="rgb(226,126,38)" fg:x="149172" fg:w="90"/><text x="99.0662%" y="447.50"></text></g><g><title>epoll_ctl (78 samples, 0.05%)</title><rect x="98.8242%" y="421" width="0.0517%" height="15" fill="rgb(216,138,53)" fg:x="149184" fg:w="78"/><text x="99.0742%" y="431.50"></text></g><g><title>polling::epoll::Poller::wait (546 samples, 0.36%)</title><rect x="98.5281%" y="469" width="0.3617%" height="15" fill="rgb(246,199,43)" fg:x="148737" fg:w="546"/><text x="98.7781%" y="479.50"></text></g><g><title>syscall (20 samples, 0.01%)</title><rect x="98.8765%" y="453" width="0.0132%" height="15" fill="rgb(232,125,11)" fg:x="149263" fg:w="20"/><text x="99.1265%" y="463.50"></text></g><g><title>async_io::reactor::ReactorLock::react (2,056 samples, 1.36%)</title><rect x="97.5636%" y="501" width="1.3620%" height="15" fill="rgb(218,219,45)" fg:x="147281" fg:w="2056"/><text x="97.8136%" y="511.50"></text></g><g><title>polling::Poller::wait (690 samples, 0.46%)</title><rect x="98.4685%" y="485" width="0.4571%" height="15" fill="rgb(216,102,54)" fg:x="148647" fg:w="690"/><text x="98.7185%" y="495.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (54 samples, 0.04%)</title><rect x="98.8898%" y="469" width="0.0358%" height="15" fill="rgb(250,228,7)" fg:x="149283" fg:w="54"/><text x="99.1398%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (48 samples, 0.03%)</title><rect x="98.8937%" y="453" width="0.0318%" height="15" fill="rgb(226,125,25)" fg:x="149289" fg:w="48"/><text x="99.1437%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::try_lock (48 samples, 0.03%)</title><rect x="98.8937%" y="437" width="0.0318%" height="15" fill="rgb(224,165,27)" fg:x="149289" fg:w="48"/><text x="99.1437%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (48 samples, 0.03%)</title><rect x="98.8937%" y="421" width="0.0318%" height="15" fill="rgb(233,86,3)" fg:x="149289" fg:w="48"/><text x="99.1437%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (48 samples, 0.03%)</title><rect x="98.8937%" y="405" width="0.0318%" height="15" fill="rgb(228,116,20)" fg:x="149289" fg:w="48"/><text x="99.1437%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (24 samples, 0.02%)</title><rect x="98.9255%" y="453" width="0.0159%" height="15" fill="rgb(209,192,17)" fg:x="149337" fg:w="24"/><text x="99.1755%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_store (24 samples, 0.02%)</title><rect x="98.9255%" y="437" width="0.0159%" height="15" fill="rgb(224,88,34)" fg:x="149337" fg:w="24"/><text x="99.1755%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_io::driver::CallOnDrop&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (29 samples, 0.02%)</title><rect x="98.9255%" y="501" width="0.0192%" height="15" fill="rgb(233,38,6)" fg:x="149337" fg:w="29"/><text x="99.1755%" y="511.50"></text></g><g><title>&lt;async_io::driver::CallOnDrop&lt;F&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.02%)</title><rect x="98.9255%" y="485" width="0.0192%" height="15" fill="rgb(212,59,30)" fg:x="149337" fg:w="29"/><text x="99.1755%" y="495.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (29 samples, 0.02%)</title><rect x="98.9255%" y="469" width="0.0192%" height="15" fill="rgb(213,80,3)" fg:x="149337" fg:w="29"/><text x="99.1755%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (27 samples, 0.02%)</title><rect x="98.9461%" y="501" width="0.0179%" height="15" fill="rgb(251,178,7)" fg:x="149368" fg:w="27"/><text x="99.1961%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_store (27 samples, 0.02%)</title><rect x="98.9461%" y="485" width="0.0179%" height="15" fill="rgb(213,154,26)" fg:x="149368" fg:w="27"/><text x="99.1961%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;()&gt;&gt; (26 samples, 0.02%)</title><rect x="98.9832%" y="469" width="0.0172%" height="15" fill="rgb(238,165,49)" fg:x="149424" fg:w="26"/><text x="99.2332%" y="479.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (26 samples, 0.02%)</title><rect x="98.9832%" y="453" width="0.0172%" height="15" fill="rgb(248,91,46)" fg:x="149424" fg:w="26"/><text x="99.2332%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (18 samples, 0.01%)</title><rect x="98.9885%" y="437" width="0.0119%" height="15" fill="rgb(244,21,52)" fg:x="149432" fg:w="18"/><text x="99.2385%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (18 samples, 0.01%)</title><rect x="98.9885%" y="421" width="0.0119%" height="15" fill="rgb(247,122,20)" fg:x="149432" fg:w="18"/><text x="99.2385%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (18 samples, 0.01%)</title><rect x="98.9885%" y="405" width="0.0119%" height="15" fill="rgb(218,27,9)" fg:x="149432" fg:w="18"/><text x="99.2385%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_swap (18 samples, 0.01%)</title><rect x="98.9885%" y="389" width="0.0119%" height="15" fill="rgb(246,7,6)" fg:x="149432" fg:w="18"/><text x="99.2385%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (76 samples, 0.05%)</title><rect x="99.0004%" y="469" width="0.0503%" height="15" fill="rgb(227,135,54)" fg:x="149450" fg:w="76"/><text x="99.2504%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (76 samples, 0.05%)</title><rect x="99.0004%" y="453" width="0.0503%" height="15" fill="rgb(247,14,11)" fg:x="149450" fg:w="76"/><text x="99.2504%" y="463.50"></text></g><g><title>core::bool::&lt;impl bool&gt;::then (51 samples, 0.03%)</title><rect x="99.0600%" y="389" width="0.0338%" height="15" fill="rgb(206,149,34)" fg:x="149540" fg:w="51"/><text x="99.3100%" y="399.50"></text></g><g><title>std::sys::unix::futex::futex_wait (297 samples, 0.20%)</title><rect x="99.0580%" y="405" width="0.1967%" height="15" fill="rgb(227,228,4)" fg:x="149537" fg:w="297"/><text x="99.3080%" y="415.50"></text></g><g><title>syscall (233 samples, 0.15%)</title><rect x="99.1004%" y="389" width="0.1543%" height="15" fill="rgb(238,218,28)" fg:x="149601" fg:w="233"/><text x="99.3504%" y="399.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (245 samples, 0.16%)</title><rect x="99.2548%" y="405" width="0.1623%" height="15" fill="rgb(252,86,40)" fg:x="149834" fg:w="245"/><text x="99.5048%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (245 samples, 0.16%)</title><rect x="99.2548%" y="389" width="0.1623%" height="15" fill="rgb(251,225,11)" fg:x="149834" fg:w="245"/><text x="99.5048%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (245 samples, 0.16%)</title><rect x="99.2548%" y="373" width="0.1623%" height="15" fill="rgb(206,46,49)" fg:x="149834" fg:w="245"/><text x="99.5048%" y="383.50"></text></g><g><title>std::sync::condvar::Condvar::wait (573 samples, 0.38%)</title><rect x="99.0507%" y="469" width="0.3796%" height="15" fill="rgb(245,128,24)" fg:x="149526" fg:w="573"/><text x="99.3007%" y="479.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (567 samples, 0.38%)</title><rect x="99.0547%" y="453" width="0.3756%" height="15" fill="rgb(219,177,34)" fg:x="149532" fg:w="567"/><text x="99.3047%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait (567 samples, 0.38%)</title><rect x="99.0547%" y="437" width="0.3756%" height="15" fill="rgb(218,60,48)" fg:x="149532" fg:w="567"/><text x="99.3047%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait_optional_timeout (567 samples, 0.38%)</title><rect x="99.0547%" y="421" width="0.3756%" height="15" fill="rgb(221,11,5)" fg:x="149532" fg:w="567"/><text x="99.3047%" y="431.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (20 samples, 0.01%)</title><rect x="99.4171%" y="405" width="0.0132%" height="15" fill="rgb(220,148,13)" fg:x="150079" fg:w="20"/><text x="99.6671%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (20 samples, 0.01%)</title><rect x="99.4171%" y="389" width="0.0132%" height="15" fill="rgb(210,16,3)" fg:x="150079" fg:w="20"/><text x="99.6671%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_swap (20 samples, 0.01%)</title><rect x="99.4171%" y="373" width="0.0132%" height="15" fill="rgb(236,80,2)" fg:x="150079" fg:w="20"/><text x="99.6671%" y="383.50"></text></g><g><title>parking::Parker::park (716 samples, 0.47%)</title><rect x="98.9706%" y="501" width="0.4743%" height="15" fill="rgb(239,129,19)" fg:x="149405" fg:w="716"/><text x="99.2206%" y="511.50"></text></g><g><title>parking::Inner::park (709 samples, 0.47%)</title><rect x="98.9752%" y="485" width="0.4697%" height="15" fill="rgb(220,106,35)" fg:x="149412" fg:w="709"/><text x="99.2252%" y="495.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (22 samples, 0.01%)</title><rect x="99.4303%" y="469" width="0.0146%" height="15" fill="rgb(252,139,45)" fg:x="150099" fg:w="22"/><text x="99.6803%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (18 samples, 0.01%)</title><rect x="99.4330%" y="453" width="0.0119%" height="15" fill="rgb(229,8,36)" fg:x="150103" fg:w="18"/><text x="99.6830%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (18 samples, 0.01%)</title><rect x="99.4330%" y="437" width="0.0119%" height="15" fill="rgb(230,126,33)" fg:x="150103" fg:w="18"/><text x="99.6830%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (18 samples, 0.01%)</title><rect x="99.4330%" y="421" width="0.0119%" height="15" fill="rgb(239,140,21)" fg:x="150103" fg:w="18"/><text x="99.6830%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (18 samples, 0.01%)</title><rect x="99.4330%" y="405" width="0.0119%" height="15" fill="rgb(254,104,9)" fg:x="150103" fg:w="18"/><text x="99.6830%" y="415.50"></text></g><g><title>parking::Parker::park_timeout (309 samples, 0.20%)</title><rect x="99.4449%" y="501" width="0.2047%" height="15" fill="rgb(239,52,14)" fg:x="150121" fg:w="309"/><text x="99.6949%" y="511.50"></text></g><g><title>parking::Inner::park (288 samples, 0.19%)</title><rect x="99.4588%" y="485" width="0.1908%" height="15" fill="rgb(208,227,44)" fg:x="150142" fg:w="288"/><text x="99.7088%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (273 samples, 0.18%)</title><rect x="99.4687%" y="469" width="0.1808%" height="15" fill="rgb(246,18,19)" fg:x="150157" fg:w="273"/><text x="99.7187%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (273 samples, 0.18%)</title><rect x="99.4687%" y="453" width="0.1808%" height="15" fill="rgb(235,228,25)" fg:x="150157" fg:w="273"/><text x="99.7187%" y="463.50"></text></g><g><title>std::panic::catch_unwind (22,286 samples, 14.76%)</title><rect x="84.9197%" y="789" width="14.7629%" height="15" fill="rgb(240,156,20)" fg:x="128194" fg:w="22286"/><text x="85.1697%" y="799.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (22,286 samples, 14.76%)</title><rect x="84.9197%" y="773" width="14.7629%" height="15" fill="rgb(224,8,20)" fg:x="128194" fg:w="22286"/><text x="85.1697%" y="783.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (22,286 samples, 14.76%)</title><rect x="84.9197%" y="757" width="14.7629%" height="15" fill="rgb(214,12,52)" fg:x="128194" fg:w="22286"/><text x="85.1697%" y="767.50">std::panicking::try::do..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (22,286 samples, 14.76%)</title><rect x="84.9197%" y="741" width="14.7629%" height="15" fill="rgb(211,220,47)" fg:x="128194" fg:w="22286"/><text x="85.1697%" y="751.50">&lt;core::panic::unwind_sa..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (22,286 samples, 14.76%)</title><rect x="84.9197%" y="725" width="14.7629%" height="15" fill="rgb(250,173,5)" fg:x="128194" fg:w="22286"/><text x="85.1697%" y="735.50">std::thread::Builder::s..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (22,286 samples, 14.76%)</title><rect x="84.9197%" y="709" width="14.7629%" height="15" fill="rgb(250,125,52)" fg:x="128194" fg:w="22286"/><text x="85.1697%" y="719.50">std::sys_common::backtr..</text></g><g><title>core::ops::function::FnOnce::call_once (22,286 samples, 14.76%)</title><rect x="84.9197%" y="693" width="14.7629%" height="15" fill="rgb(209,133,18)" fg:x="128194" fg:w="22286"/><text x="85.1697%" y="703.50">core::ops::function::Fn..</text></g><g><title>async_global_executor::threading::thread_main_loop (22,286 samples, 14.76%)</title><rect x="84.9197%" y="677" width="14.7629%" height="15" fill="rgb(216,173,22)" fg:x="128194" fg:w="22286"/><text x="85.1697%" y="687.50">async_global_executor::..</text></g><g><title>std::panic::catch_unwind (22,280 samples, 14.76%)</title><rect x="84.9237%" y="661" width="14.7590%" height="15" fill="rgb(205,3,22)" fg:x="128200" fg:w="22280"/><text x="85.1737%" y="671.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (22,280 samples, 14.76%)</title><rect x="84.9237%" y="645" width="14.7590%" height="15" fill="rgb(248,22,20)" fg:x="128200" fg:w="22280"/><text x="85.1737%" y="655.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (22,280 samples, 14.76%)</title><rect x="84.9237%" y="629" width="14.7590%" height="15" fill="rgb(233,6,29)" fg:x="128200" fg:w="22280"/><text x="85.1737%" y="639.50">std::panicking::try::do..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (22,280 samples, 14.76%)</title><rect x="84.9237%" y="613" width="14.7590%" height="15" fill="rgb(240,22,54)" fg:x="128200" fg:w="22280"/><text x="85.1737%" y="623.50">async_global_executor::..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (22,280 samples, 14.76%)</title><rect x="84.9237%" y="597" width="14.7590%" height="15" fill="rgb(231,133,32)" fg:x="128200" fg:w="22280"/><text x="85.1737%" y="607.50">std::thread::local::Loc..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (22,280 samples, 14.76%)</title><rect x="84.9237%" y="581" width="14.7590%" height="15" fill="rgb(248,193,4)" fg:x="128200" fg:w="22280"/><text x="85.1737%" y="591.50">std::thread::local::Loc..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (22,280 samples, 14.76%)</title><rect x="84.9237%" y="565" width="14.7590%" height="15" fill="rgb(211,178,46)" fg:x="128200" fg:w="22280"/><text x="85.1737%" y="575.50">async_global_executor::..</text></g><g><title>async_global_executor::reactor::block_on (22,280 samples, 14.76%)</title><rect x="84.9237%" y="549" width="14.7590%" height="15" fill="rgb(224,5,42)" fg:x="128200" fg:w="22280"/><text x="85.1737%" y="559.50">async_global_executor::..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (22,280 samples, 14.76%)</title><rect x="84.9237%" y="533" width="14.7590%" height="15" fill="rgb(239,176,25)" fg:x="128200" fg:w="22280"/><text x="85.1737%" y="543.50">async_global_executor::..</text></g><g><title>async_io::driver::block_on (22,280 samples, 14.76%)</title><rect x="84.9237%" y="517" width="14.7590%" height="15" fill="rgb(245,187,50)" fg:x="128200" fg:w="22280"/><text x="85.1737%" y="527.50">async_io::driver::block..</text></g><g><title>std::time::Instant::now (42 samples, 0.03%)</title><rect x="99.6549%" y="501" width="0.0278%" height="15" fill="rgb(248,24,15)" fg:x="150438" fg:w="42"/><text x="99.9049%" y="511.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (42 samples, 0.03%)</title><rect x="99.6549%" y="485" width="0.0278%" height="15" fill="rgb(205,166,13)" fg:x="150438" fg:w="42"/><text x="99.9049%" y="495.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (42 samples, 0.03%)</title><rect x="99.6549%" y="469" width="0.0278%" height="15" fill="rgb(208,114,23)" fg:x="150438" fg:w="42"/><text x="99.9049%" y="479.50"></text></g><g><title>__clock_gettime (33 samples, 0.02%)</title><rect x="99.6608%" y="453" width="0.0219%" height="15" fill="rgb(239,127,18)" fg:x="150447" fg:w="33"/><text x="99.9108%" y="463.50"></text></g><g><title>__vdso_clock_gettime (25 samples, 0.02%)</title><rect x="99.6661%" y="437" width="0.0166%" height="15" fill="rgb(219,154,28)" fg:x="150455" fg:w="25"/><text x="99.9161%" y="447.50"></text></g><g><title>[[vdso]] (22 samples, 0.01%)</title><rect x="99.6681%" y="421" width="0.0146%" height="15" fill="rgb(225,157,23)" fg:x="150458" fg:w="22"/><text x="99.9181%" y="431.50"></text></g><g><title>clone (22,304 samples, 14.77%)</title><rect x="84.9164%" y="901" width="14.7749%" height="15" fill="rgb(219,8,6)" fg:x="128189" fg:w="22304"/><text x="85.1664%" y="911.50">clone</text></g><g><title>start_thread (22,300 samples, 14.77%)</title><rect x="84.9191%" y="885" width="14.7722%" height="15" fill="rgb(212,47,6)" fg:x="128193" fg:w="22300"/><text x="85.1691%" y="895.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (22,299 samples, 14.77%)</title><rect x="84.9197%" y="869" width="14.7716%" height="15" fill="rgb(224,190,4)" fg:x="128194" fg:w="22299"/><text x="85.1697%" y="879.50">std::sys::unix::thread:..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (22,299 samples, 14.77%)</title><rect x="84.9197%" y="853" width="14.7716%" height="15" fill="rgb(239,183,29)" fg:x="128194" fg:w="22299"/><text x="85.1697%" y="863.50">&lt;alloc::boxed::Box&lt;F,A&gt;..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (22,299 samples, 14.77%)</title><rect x="84.9197%" y="837" width="14.7716%" height="15" fill="rgb(213,57,7)" fg:x="128194" fg:w="22299"/><text x="85.1697%" y="847.50">&lt;alloc::boxed::Box&lt;F,A&gt;..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (22,299 samples, 14.77%)</title><rect x="84.9197%" y="821" width="14.7716%" height="15" fill="rgb(216,148,1)" fg:x="128194" fg:w="22299"/><text x="85.1697%" y="831.50">core::ops::function::Fn..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (22,299 samples, 14.77%)</title><rect x="84.9197%" y="805" width="14.7716%" height="15" fill="rgb(236,182,29)" fg:x="128194" fg:w="22299"/><text x="85.1697%" y="815.50">std::thread::Builder::s..</text></g><g><title>tremor_common::time::nanotime (18 samples, 0.01%)</title><rect x="99.7264%" y="901" width="0.0119%" height="15" fill="rgb(244,120,48)" fg:x="150546" fg:w="18"/><text x="99.9764%" y="911.50"></text></g><g><title>async-std/runti (150,464 samples, 99.67%)</title><rect x="0.0808%" y="917" width="99.6721%" height="15" fill="rgb(206,71,34)" fg:x="122" fg:w="150464"/><text x="0.3308%" y="927.50">async-std/runti</text></g><g><title>blocking-1 (19 samples, 0.01%)</title><rect x="99.7529%" y="917" width="0.0126%" height="15" fill="rgb(242,32,6)" fg:x="150586" fg:w="19"/><text x="100.0029%" y="927.50"></text></g><g><title>clone (18 samples, 0.01%)</title><rect x="99.7536%" y="901" width="0.0119%" height="15" fill="rgb(241,35,3)" fg:x="150587" fg:w="18"/><text x="100.0036%" y="911.50"></text></g><g><title>std::panic::catch_unwind (24 samples, 0.02%)</title><rect x="99.7662%" y="789" width="0.0159%" height="15" fill="rgb(222,62,19)" fg:x="150606" fg:w="24"/><text x="100.0162%" y="799.50"></text></g><g><title>std::panicking::try (24 samples, 0.02%)</title><rect x="99.7662%" y="773" width="0.0159%" height="15" fill="rgb(223,110,41)" fg:x="150606" fg:w="24"/><text x="100.0162%" y="783.50"></text></g><g><title>std::panicking::try::do_call (24 samples, 0.02%)</title><rect x="99.7662%" y="757" width="0.0159%" height="15" fill="rgb(208,224,4)" fg:x="150606" fg:w="24"/><text x="100.0162%" y="767.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (24 samples, 0.02%)</title><rect x="99.7662%" y="741" width="0.0159%" height="15" fill="rgb(241,137,19)" fg:x="150606" fg:w="24"/><text x="100.0162%" y="751.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (24 samples, 0.02%)</title><rect x="99.7662%" y="725" width="0.0159%" height="15" fill="rgb(244,24,17)" fg:x="150606" fg:w="24"/><text x="100.0162%" y="735.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (24 samples, 0.02%)</title><rect x="99.7662%" y="709" width="0.0159%" height="15" fill="rgb(245,178,49)" fg:x="150606" fg:w="24"/><text x="100.0162%" y="719.50"></text></g><g><title>blocking::Executor::grow_pool::{{closure}} (24 samples, 0.02%)</title><rect x="99.7662%" y="693" width="0.0159%" height="15" fill="rgb(219,160,38)" fg:x="150606" fg:w="24"/><text x="100.0162%" y="703.50"></text></g><g><title>blocking::Executor::main_loop (24 samples, 0.02%)</title><rect x="99.7662%" y="677" width="0.0159%" height="15" fill="rgb(228,137,14)" fg:x="150606" fg:w="24"/><text x="100.0162%" y="687.50"></text></g><g><title>blocking-2 (26 samples, 0.02%)</title><rect x="99.7655%" y="917" width="0.0172%" height="15" fill="rgb(237,134,11)" fg:x="150605" fg:w="26"/><text x="100.0155%" y="927.50"></text></g><g><title>clone (25 samples, 0.02%)</title><rect x="99.7662%" y="901" width="0.0166%" height="15" fill="rgb(211,126,44)" fg:x="150606" fg:w="25"/><text x="100.0162%" y="911.50"></text></g><g><title>start_thread (25 samples, 0.02%)</title><rect x="99.7662%" y="885" width="0.0166%" height="15" fill="rgb(226,171,33)" fg:x="150606" fg:w="25"/><text x="100.0162%" y="895.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (25 samples, 0.02%)</title><rect x="99.7662%" y="869" width="0.0166%" height="15" fill="rgb(253,99,13)" fg:x="150606" fg:w="25"/><text x="100.0162%" y="879.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (25 samples, 0.02%)</title><rect x="99.7662%" y="853" width="0.0166%" height="15" fill="rgb(244,48,7)" fg:x="150606" fg:w="25"/><text x="100.0162%" y="863.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (25 samples, 0.02%)</title><rect x="99.7662%" y="837" width="0.0166%" height="15" fill="rgb(244,217,54)" fg:x="150606" fg:w="25"/><text x="100.0162%" y="847.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (25 samples, 0.02%)</title><rect x="99.7662%" y="821" width="0.0166%" height="15" fill="rgb(224,15,18)" fg:x="150606" fg:w="25"/><text x="100.0162%" y="831.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (25 samples, 0.02%)</title><rect x="99.7662%" y="805" width="0.0166%" height="15" fill="rgb(244,99,12)" fg:x="150606" fg:w="25"/><text x="100.0162%" y="815.50"></text></g><g><title>main (236 samples, 0.16%)</title><rect x="99.7913%" y="917" width="0.1563%" height="15" fill="rgb(233,226,8)" fg:x="150644" fg:w="236"/><text x="100.0413%" y="927.50"></text></g><g><title>clone (214 samples, 0.14%)</title><rect x="99.8059%" y="901" width="0.1418%" height="15" fill="rgb(229,211,3)" fg:x="150666" fg:w="214"/><text x="100.0559%" y="911.50"></text></g><g><title>start_thread (23 samples, 0.02%)</title><rect x="99.9324%" y="885" width="0.0152%" height="15" fill="rgb(216,140,21)" fg:x="150857" fg:w="23"/><text x="100.1824%" y="895.50"></text></g><g><title>std::sys::unix::futex::futex_wait (49 samples, 0.03%)</title><rect x="99.9516%" y="581" width="0.0325%" height="15" fill="rgb(234,122,30)" fg:x="150886" fg:w="49"/><text x="100.2016%" y="591.50"></text></g><g><title>syscall (44 samples, 0.03%)</title><rect x="99.9550%" y="565" width="0.0291%" height="15" fill="rgb(236,25,46)" fg:x="150891" fg:w="44"/><text x="100.2050%" y="575.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (61 samples, 0.04%)</title><rect x="99.9510%" y="661" width="0.0404%" height="15" fill="rgb(217,52,54)" fg:x="150885" fg:w="61"/><text x="100.2010%" y="671.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (61 samples, 0.04%)</title><rect x="99.9510%" y="645" width="0.0404%" height="15" fill="rgb(222,29,26)" fg:x="150885" fg:w="61"/><text x="100.2010%" y="655.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (60 samples, 0.04%)</title><rect x="99.9516%" y="629" width="0.0397%" height="15" fill="rgb(216,177,29)" fg:x="150886" fg:w="60"/><text x="100.2016%" y="639.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (60 samples, 0.04%)</title><rect x="99.9516%" y="613" width="0.0397%" height="15" fill="rgb(247,136,51)" fg:x="150886" fg:w="60"/><text x="100.2016%" y="623.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (60 samples, 0.04%)</title><rect x="99.9516%" y="597" width="0.0397%" height="15" fill="rgb(231,47,47)" fg:x="150886" fg:w="60"/><text x="100.2016%" y="607.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (64 samples, 0.04%)</title><rect x="99.9510%" y="677" width="0.0424%" height="15" fill="rgb(211,192,36)" fg:x="150885" fg:w="64"/><text x="100.2010%" y="687.50"></text></g><g><title>std::panic::catch_unwind (66 samples, 0.04%)</title><rect x="99.9503%" y="789" width="0.0437%" height="15" fill="rgb(229,156,32)" fg:x="150884" fg:w="66"/><text x="100.2003%" y="799.50"></text></g><g><title>std::panicking::try (66 samples, 0.04%)</title><rect x="99.9503%" y="773" width="0.0437%" height="15" fill="rgb(248,213,20)" fg:x="150884" fg:w="66"/><text x="100.2003%" y="783.50"></text></g><g><title>std::panicking::try::do_call (66 samples, 0.04%)</title><rect x="99.9503%" y="757" width="0.0437%" height="15" fill="rgb(217,64,7)" fg:x="150884" fg:w="66"/><text x="100.2003%" y="767.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (66 samples, 0.04%)</title><rect x="99.9503%" y="741" width="0.0437%" height="15" fill="rgb(232,142,8)" fg:x="150884" fg:w="66"/><text x="100.2003%" y="751.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (66 samples, 0.04%)</title><rect x="99.9503%" y="725" width="0.0437%" height="15" fill="rgb(224,92,44)" fg:x="150884" fg:w="66"/><text x="100.2003%" y="735.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (66 samples, 0.04%)</title><rect x="99.9503%" y="709" width="0.0437%" height="15" fill="rgb(214,169,17)" fg:x="150884" fg:w="66"/><text x="100.2003%" y="719.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (65 samples, 0.04%)</title><rect x="99.9510%" y="693" width="0.0431%" height="15" fill="rgb(210,59,37)" fg:x="150885" fg:w="65"/><text x="100.2010%" y="703.50"></text></g><g><title>all (150,959 samples, 100%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(214,116,48)" fg:x="0" fg:w="150959"/><text x="0.2500%" y="943.50"></text></g><g><title>tokio-runtime-w (79 samples, 0.05%)</title><rect x="99.9477%" y="917" width="0.0523%" height="15" fill="rgb(244,191,6)" fg:x="150880" fg:w="79"/><text x="100.1977%" y="927.50"></text></g><g><title>clone (76 samples, 0.05%)</title><rect x="99.9497%" y="901" width="0.0503%" height="15" fill="rgb(241,50,52)" fg:x="150883" fg:w="76"/><text x="100.1997%" y="911.50"></text></g><g><title>start_thread (76 samples, 0.05%)</title><rect x="99.9497%" y="885" width="0.0503%" height="15" fill="rgb(236,75,39)" fg:x="150883" fg:w="76"/><text x="100.1997%" y="895.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (76 samples, 0.05%)</title><rect x="99.9497%" y="869" width="0.0503%" height="15" fill="rgb(236,99,0)" fg:x="150883" fg:w="76"/><text x="100.1997%" y="879.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (76 samples, 0.05%)</title><rect x="99.9497%" y="853" width="0.0503%" height="15" fill="rgb(207,202,15)" fg:x="150883" fg:w="76"/><text x="100.1997%" y="863.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (76 samples, 0.05%)</title><rect x="99.9497%" y="837" width="0.0503%" height="15" fill="rgb(233,207,14)" fg:x="150883" fg:w="76"/><text x="100.1997%" y="847.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (76 samples, 0.05%)</title><rect x="99.9497%" y="821" width="0.0503%" height="15" fill="rgb(226,27,51)" fg:x="150883" fg:w="76"/><text x="100.1997%" y="831.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (76 samples, 0.05%)</title><rect x="99.9497%" y="805" width="0.0503%" height="15" fill="rgb(206,104,42)" fg:x="150883" fg:w="76"/><text x="100.1997%" y="815.50"></text></g></svg></svg>