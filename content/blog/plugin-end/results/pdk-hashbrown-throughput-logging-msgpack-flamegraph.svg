<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="998" onload="init(evt)" viewBox="0 0 1200 998" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="998" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="981.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="981.00"> </text><svg id="frames" x="10" width="1180" total_samples="110066"><g><title>async-io (60 samples, 0.05%)</title><rect x="0.0009%" y="933" width="0.0545%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="60"/><text x="0.2509%" y="943.50"></text></g><g><title>clone (57 samples, 0.05%)</title><rect x="0.0036%" y="917" width="0.0518%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="57"/><text x="0.2536%" y="927.50"></text></g><g><title>start_thread (57 samples, 0.05%)</title><rect x="0.0036%" y="901" width="0.0518%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="57"/><text x="0.2536%" y="911.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (57 samples, 0.05%)</title><rect x="0.0036%" y="885" width="0.0518%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="57"/><text x="0.2536%" y="895.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (57 samples, 0.05%)</title><rect x="0.0036%" y="869" width="0.0518%" height="15" fill="rgb(208,68,35)" fg:x="4" fg:w="57"/><text x="0.2536%" y="879.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (57 samples, 0.05%)</title><rect x="0.0036%" y="853" width="0.0518%" height="15" fill="rgb(232,128,0)" fg:x="4" fg:w="57"/><text x="0.2536%" y="863.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (57 samples, 0.05%)</title><rect x="0.0036%" y="837" width="0.0518%" height="15" fill="rgb(207,160,47)" fg:x="4" fg:w="57"/><text x="0.2536%" y="847.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (57 samples, 0.05%)</title><rect x="0.0036%" y="821" width="0.0518%" height="15" fill="rgb(228,23,34)" fg:x="4" fg:w="57"/><text x="0.2536%" y="831.50"></text></g><g><title>std::panic::catch_unwind (57 samples, 0.05%)</title><rect x="0.0036%" y="805" width="0.0518%" height="15" fill="rgb(218,30,26)" fg:x="4" fg:w="57"/><text x="0.2536%" y="815.50"></text></g><g><title>std::panicking::try (57 samples, 0.05%)</title><rect x="0.0036%" y="789" width="0.0518%" height="15" fill="rgb(220,122,19)" fg:x="4" fg:w="57"/><text x="0.2536%" y="799.50"></text></g><g><title>std::panicking::try::do_call (57 samples, 0.05%)</title><rect x="0.0036%" y="773" width="0.0518%" height="15" fill="rgb(250,228,42)" fg:x="4" fg:w="57"/><text x="0.2536%" y="783.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (57 samples, 0.05%)</title><rect x="0.0036%" y="757" width="0.0518%" height="15" fill="rgb(240,193,28)" fg:x="4" fg:w="57"/><text x="0.2536%" y="767.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (57 samples, 0.05%)</title><rect x="0.0036%" y="741" width="0.0518%" height="15" fill="rgb(216,20,37)" fg:x="4" fg:w="57"/><text x="0.2536%" y="751.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (57 samples, 0.05%)</title><rect x="0.0036%" y="725" width="0.0518%" height="15" fill="rgb(206,188,39)" fg:x="4" fg:w="57"/><text x="0.2536%" y="735.50"></text></g><g><title>async_io::driver::UNPARKER::{{closure}}::{{closure}} (57 samples, 0.05%)</title><rect x="0.0036%" y="709" width="0.0518%" height="15" fill="rgb(217,207,13)" fg:x="4" fg:w="57"/><text x="0.2536%" y="719.50"></text></g><g><title>async_io::driver::main_loop (57 samples, 0.05%)</title><rect x="0.0036%" y="693" width="0.0518%" height="15" fill="rgb(231,73,38)" fg:x="4" fg:w="57"/><text x="0.2536%" y="703.50"></text></g><g><title>parking::Parker::park_timeout (49 samples, 0.04%)</title><rect x="0.0109%" y="677" width="0.0445%" height="15" fill="rgb(225,20,46)" fg:x="12" fg:w="49"/><text x="0.2609%" y="687.50"></text></g><g><title>parking::Inner::park (49 samples, 0.04%)</title><rect x="0.0109%" y="661" width="0.0445%" height="15" fill="rgb(210,31,41)" fg:x="12" fg:w="49"/><text x="0.2609%" y="671.50"></text></g><g><title>std::sync::condvar::Condvar::wait_timeout (48 samples, 0.04%)</title><rect x="0.0118%" y="645" width="0.0436%" height="15" fill="rgb(221,200,47)" fg:x="13" fg:w="48"/><text x="0.2618%" y="655.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait_timeout (48 samples, 0.04%)</title><rect x="0.0118%" y="629" width="0.0436%" height="15" fill="rgb(226,26,5)" fg:x="13" fg:w="48"/><text x="0.2618%" y="639.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::wait_timeout (48 samples, 0.04%)</title><rect x="0.0118%" y="613" width="0.0436%" height="15" fill="rgb(249,33,26)" fg:x="13" fg:w="48"/><text x="0.2618%" y="623.50"></text></g><g><title>__pthread_cond_timedwait (46 samples, 0.04%)</title><rect x="0.0136%" y="597" width="0.0418%" height="15" fill="rgb(235,183,28)" fg:x="15" fg:w="46"/><text x="0.2636%" y="607.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (12 samples, 0.01%)</title><rect x="0.0800%" y="917" width="0.0109%" height="15" fill="rgb(221,5,38)" fg:x="88" fg:w="12"/><text x="0.3300%" y="927.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_key (28 samples, 0.03%)</title><rect x="0.1572%" y="869" width="0.0254%" height="15" fill="rgb(247,18,42)" fg:x="173" fg:w="28"/><text x="0.4072%" y="879.50"></text></g><g><title>serde::de::MapAccess::next_key (28 samples, 0.03%)</title><rect x="0.1572%" y="853" width="0.0254%" height="15" fill="rgb(241,131,45)" fg:x="173" fg:w="28"/><text x="0.4072%" y="863.50"></text></g><g><title>&lt;rmp_serde::decode::MapAccess&lt;R,C&gt; as serde::de::MapAccess&gt;::next_key_seed (28 samples, 0.03%)</title><rect x="0.1572%" y="837" width="0.0254%" height="15" fill="rgb(249,31,29)" fg:x="173" fg:w="28"/><text x="0.4072%" y="847.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (28 samples, 0.03%)</title><rect x="0.1572%" y="821" width="0.0254%" height="15" fill="rgb(225,111,53)" fg:x="173" fg:w="28"/><text x="0.4072%" y="831.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for &amp;str&gt;::deserialize (28 samples, 0.03%)</title><rect x="0.1572%" y="805" width="0.0254%" height="15" fill="rgb(238,160,17)" fg:x="173" fg:w="28"/><text x="0.4072%" y="815.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_str (28 samples, 0.03%)</title><rect x="0.1572%" y="789" width="0.0254%" height="15" fill="rgb(214,148,48)" fg:x="173" fg:w="28"/><text x="0.4072%" y="799.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_value (39 samples, 0.04%)</title><rect x="0.1826%" y="869" width="0.0354%" height="15" fill="rgb(232,36,49)" fg:x="201" fg:w="39"/><text x="0.4326%" y="879.50"></text></g><g><title>serde::de::MapAccess::next_value (39 samples, 0.04%)</title><rect x="0.1826%" y="853" width="0.0354%" height="15" fill="rgb(209,103,24)" fg:x="201" fg:w="39"/><text x="0.4326%" y="863.50"></text></g><g><title>&lt;rmp_serde::decode::MapAccess&lt;R,C&gt; as serde::de::MapAccess&gt;::next_value_seed (39 samples, 0.04%)</title><rect x="0.1826%" y="837" width="0.0354%" height="15" fill="rgb(229,88,8)" fg:x="201" fg:w="39"/><text x="0.4326%" y="847.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (39 samples, 0.04%)</title><rect x="0.1826%" y="821" width="0.0354%" height="15" fill="rgb(213,181,19)" fg:x="201" fg:w="39"/><text x="0.4326%" y="831.50"></text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (39 samples, 0.04%)</title><rect x="0.1826%" y="805" width="0.0354%" height="15" fill="rgb(254,191,54)" fg:x="201" fg:w="39"/><text x="0.4326%" y="815.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_map (88 samples, 0.08%)</title><rect x="0.1572%" y="885" width="0.0800%" height="15" fill="rgb(241,83,37)" fg:x="173" fg:w="88"/><text x="0.4072%" y="895.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::insert (21 samples, 0.02%)</title><rect x="0.2181%" y="869" width="0.0191%" height="15" fill="rgb(233,36,39)" fg:x="240" fg:w="21"/><text x="0.4681%" y="879.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (175 samples, 0.16%)</title><rect x="0.1136%" y="901" width="0.1590%" height="15" fill="rgb(226,3,54)" fg:x="125" fg:w="175"/><text x="0.3636%" y="911.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::read_str_data (39 samples, 0.04%)</title><rect x="0.2371%" y="885" width="0.0354%" height="15" fill="rgb(245,192,40)" fg:x="261" fg:w="39"/><text x="0.4871%" y="895.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (86 samples, 0.08%)</title><rect x="0.4461%" y="869" width="0.0781%" height="15" fill="rgb(238,167,29)" fg:x="491" fg:w="86"/><text x="0.6961%" y="879.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (86 samples, 0.08%)</title><rect x="0.4461%" y="853" width="0.0781%" height="15" fill="rgb(232,182,51)" fg:x="491" fg:w="86"/><text x="0.6961%" y="863.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (86 samples, 0.08%)</title><rect x="0.4461%" y="837" width="0.0781%" height="15" fill="rgb(231,60,39)" fg:x="491" fg:w="86"/><text x="0.6961%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (86 samples, 0.08%)</title><rect x="0.4461%" y="821" width="0.0781%" height="15" fill="rgb(208,69,12)" fg:x="491" fg:w="86"/><text x="0.6961%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (86 samples, 0.08%)</title><rect x="0.4461%" y="805" width="0.0781%" height="15" fill="rgb(235,93,37)" fg:x="491" fg:w="86"/><text x="0.6961%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (86 samples, 0.08%)</title><rect x="0.4461%" y="789" width="0.0781%" height="15" fill="rgb(213,116,39)" fg:x="491" fg:w="86"/><text x="0.6961%" y="799.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (85 samples, 0.08%)</title><rect x="0.4470%" y="773" width="0.0772%" height="15" fill="rgb(222,207,29)" fg:x="492" fg:w="85"/><text x="0.6970%" y="783.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_str (340 samples, 0.31%)</title><rect x="0.2726%" y="901" width="0.3089%" height="15" fill="rgb(206,96,30)" fg:x="300" fg:w="340"/><text x="0.5226%" y="911.50"></text></g><g><title>rmp::encode::str::write_str (149 samples, 0.14%)</title><rect x="0.4461%" y="885" width="0.1354%" height="15" fill="rgb(218,138,4)" fg:x="491" fg:w="149"/><text x="0.6961%" y="895.50"></text></g><g><title>rmp::encode::str::write_str_len (63 samples, 0.06%)</title><rect x="0.5242%" y="869" width="0.0572%" height="15" fill="rgb(250,191,14)" fg:x="577" fg:w="63"/><text x="0.7742%" y="879.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (19 samples, 0.02%)</title><rect x="0.5815%" y="901" width="0.0173%" height="15" fill="rgb(239,60,40)" fg:x="640" fg:w="19"/><text x="0.8315%" y="911.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (12 samples, 0.01%)</title><rect x="0.6351%" y="837" width="0.0109%" height="15" fill="rgb(206,27,48)" fg:x="699" fg:w="12"/><text x="0.8851%" y="847.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (12 samples, 0.01%)</title><rect x="0.6351%" y="821" width="0.0109%" height="15" fill="rgb(225,35,8)" fg:x="699" fg:w="12"/><text x="0.8851%" y="831.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (60 samples, 0.05%)</title><rect x="0.6005%" y="901" width="0.0545%" height="15" fill="rgb(250,213,24)" fg:x="661" fg:w="60"/><text x="0.8505%" y="911.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (31 samples, 0.03%)</title><rect x="0.6269%" y="885" width="0.0282%" height="15" fill="rgb(247,123,22)" fg:x="690" fg:w="31"/><text x="0.8769%" y="895.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (31 samples, 0.03%)</title><rect x="0.6269%" y="869" width="0.0282%" height="15" fill="rgb(231,138,38)" fg:x="690" fg:w="31"/><text x="0.8769%" y="879.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (23 samples, 0.02%)</title><rect x="0.6342%" y="853" width="0.0209%" height="15" fill="rgb(231,145,46)" fg:x="698" fg:w="23"/><text x="0.8842%" y="863.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (17 samples, 0.02%)</title><rect x="0.6560%" y="885" width="0.0154%" height="15" fill="rgb(251,118,11)" fg:x="722" fg:w="17"/><text x="0.9060%" y="895.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::size_hint (17 samples, 0.02%)</title><rect x="0.6560%" y="869" width="0.0154%" height="15" fill="rgb(217,147,25)" fg:x="722" fg:w="17"/><text x="0.9060%" y="879.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (17 samples, 0.02%)</title><rect x="0.6560%" y="853" width="0.0154%" height="15" fill="rgb(247,81,37)" fg:x="722" fg:w="17"/><text x="0.9060%" y="863.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (17 samples, 0.02%)</title><rect x="0.6560%" y="837" width="0.0154%" height="15" fill="rgb(209,12,38)" fg:x="722" fg:w="17"/><text x="0.9060%" y="847.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (21 samples, 0.02%)</title><rect x="0.6551%" y="901" width="0.0191%" height="15" fill="rgb(227,1,9)" fg:x="721" fg:w="21"/><text x="0.9051%" y="911.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (12 samples, 0.01%)</title><rect x="0.6778%" y="901" width="0.0109%" height="15" fill="rgb(248,47,43)" fg:x="746" fg:w="12"/><text x="0.9278%" y="911.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (60 samples, 0.05%)</title><rect x="0.7023%" y="901" width="0.0545%" height="15" fill="rgb(221,10,30)" fg:x="773" fg:w="60"/><text x="0.9523%" y="911.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (12 samples, 0.01%)</title><rect x="0.8331%" y="885" width="0.0109%" height="15" fill="rgb(210,229,1)" fg:x="917" fg:w="12"/><text x="1.0831%" y="895.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (102 samples, 0.09%)</title><rect x="0.7568%" y="901" width="0.0927%" height="15" fill="rgb(222,148,37)" fg:x="833" fg:w="102"/><text x="1.0068%" y="911.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (16 samples, 0.01%)</title><rect x="0.8495%" y="901" width="0.0145%" height="15" fill="rgb(234,67,33)" fg:x="935" fg:w="16"/><text x="1.0995%" y="911.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (37 samples, 0.03%)</title><rect x="0.8640%" y="901" width="0.0336%" height="15" fill="rgb(247,98,35)" fg:x="951" fg:w="37"/><text x="1.1140%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (25 samples, 0.02%)</title><rect x="1.0466%" y="869" width="0.0227%" height="15" fill="rgb(247,138,52)" fg:x="1152" fg:w="25"/><text x="1.2966%" y="879.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (25 samples, 0.02%)</title><rect x="1.0466%" y="853" width="0.0227%" height="15" fill="rgb(213,79,30)" fg:x="1152" fg:w="25"/><text x="1.2966%" y="863.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (41 samples, 0.04%)</title><rect x="1.0376%" y="885" width="0.0373%" height="15" fill="rgb(246,177,23)" fg:x="1142" fg:w="41"/><text x="1.2876%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (34 samples, 0.03%)</title><rect x="1.0794%" y="853" width="0.0309%" height="15" fill="rgb(230,62,27)" fg:x="1188" fg:w="34"/><text x="1.3294%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (34 samples, 0.03%)</title><rect x="1.0794%" y="837" width="0.0309%" height="15" fill="rgb(216,154,8)" fg:x="1188" fg:w="34"/><text x="1.3294%" y="847.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (34 samples, 0.03%)</title><rect x="1.0794%" y="821" width="0.0309%" height="15" fill="rgb(244,35,45)" fg:x="1188" fg:w="34"/><text x="1.3294%" y="831.50"></text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (46 samples, 0.04%)</title><rect x="1.0794%" y="885" width="0.0418%" height="15" fill="rgb(251,115,12)" fg:x="1188" fg:w="46"/><text x="1.3294%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (46 samples, 0.04%)</title><rect x="1.0794%" y="869" width="0.0418%" height="15" fill="rgb(240,54,50)" fg:x="1188" fg:w="46"/><text x="1.3294%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (12 samples, 0.01%)</title><rect x="1.1102%" y="853" width="0.0109%" height="15" fill="rgb(233,84,52)" fg:x="1222" fg:w="12"/><text x="1.3602%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (12 samples, 0.01%)</title><rect x="1.1102%" y="837" width="0.0109%" height="15" fill="rgb(207,117,47)" fg:x="1222" fg:w="12"/><text x="1.3602%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (12 samples, 0.01%)</title><rect x="1.1102%" y="821" width="0.0109%" height="15" fill="rgb(249,43,39)" fg:x="1222" fg:w="12"/><text x="1.3602%" y="831.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (12 samples, 0.01%)</title><rect x="1.1102%" y="805" width="0.0109%" height="15" fill="rgb(209,38,44)" fg:x="1222" fg:w="12"/><text x="1.3602%" y="815.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (29 samples, 0.03%)</title><rect x="1.1211%" y="885" width="0.0263%" height="15" fill="rgb(236,212,23)" fg:x="1234" fg:w="29"/><text x="1.3711%" y="895.50"></text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (13 samples, 0.01%)</title><rect x="1.1502%" y="885" width="0.0118%" height="15" fill="rgb(242,79,21)" fg:x="1266" fg:w="13"/><text x="1.4002%" y="895.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (312 samples, 0.28%)</title><rect x="0.8976%" y="901" width="0.2835%" height="15" fill="rgb(211,96,35)" fg:x="988" fg:w="312"/><text x="1.1476%" y="911.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (21 samples, 0.02%)</title><rect x="1.1620%" y="885" width="0.0191%" height="15" fill="rgb(253,215,40)" fg:x="1279" fg:w="21"/><text x="1.4120%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (14 samples, 0.01%)</title><rect x="1.2165%" y="885" width="0.0127%" height="15" fill="rgb(211,81,21)" fg:x="1339" fg:w="14"/><text x="1.4665%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (14 samples, 0.01%)</title><rect x="1.2165%" y="869" width="0.0127%" height="15" fill="rgb(208,190,38)" fg:x="1339" fg:w="14"/><text x="1.4665%" y="879.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="1.2165%" y="853" width="0.0127%" height="15" fill="rgb(235,213,38)" fg:x="1339" fg:w="14"/><text x="1.4665%" y="863.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (14 samples, 0.01%)</title><rect x="1.2165%" y="837" width="0.0127%" height="15" fill="rgb(237,122,38)" fg:x="1339" fg:w="14"/><text x="1.4665%" y="847.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (14 samples, 0.01%)</title><rect x="1.2165%" y="821" width="0.0127%" height="15" fill="rgb(244,218,35)" fg:x="1339" fg:w="14"/><text x="1.4665%" y="831.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (62 samples, 0.06%)</title><rect x="1.1811%" y="901" width="0.0563%" height="15" fill="rgb(240,68,47)" fg:x="1300" fg:w="62"/><text x="1.4311%" y="911.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (13 samples, 0.01%)</title><rect x="1.2547%" y="901" width="0.0118%" height="15" fill="rgb(210,16,53)" fg:x="1381" fg:w="13"/><text x="1.5047%" y="911.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (20 samples, 0.02%)</title><rect x="1.2665%" y="901" width="0.0182%" height="15" fill="rgb(235,124,12)" fg:x="1394" fg:w="20"/><text x="1.5165%" y="911.50"></text></g><g><title>&lt;tremor_pipeline::op::grouper::bucket::Grouper as tremor_pipeline::op::Operator&gt;::on_event (58 samples, 0.05%)</title><rect x="1.2847%" y="901" width="0.0527%" height="15" fill="rgb(224,169,11)" fg:x="1414" fg:w="58"/><text x="1.5347%" y="911.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (40 samples, 0.04%)</title><rect x="1.3565%" y="901" width="0.0363%" height="15" fill="rgb(250,166,2)" fg:x="1493" fg:w="40"/><text x="1.6065%" y="911.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (15 samples, 0.01%)</title><rect x="1.3792%" y="885" width="0.0136%" height="15" fill="rgb(242,216,29)" fg:x="1518" fg:w="15"/><text x="1.6292%" y="895.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (12 samples, 0.01%)</title><rect x="1.3819%" y="869" width="0.0109%" height="15" fill="rgb(230,116,27)" fg:x="1521" fg:w="12"/><text x="1.6319%" y="879.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (31 samples, 0.03%)</title><rect x="1.3928%" y="901" width="0.0282%" height="15" fill="rgb(228,99,48)" fg:x="1533" fg:w="31"/><text x="1.6428%" y="911.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (13 samples, 0.01%)</title><rect x="1.5400%" y="885" width="0.0118%" height="15" fill="rgb(253,11,6)" fg:x="1695" fg:w="13"/><text x="1.7900%" y="895.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (13 samples, 0.01%)</title><rect x="1.5400%" y="869" width="0.0118%" height="15" fill="rgb(247,143,39)" fg:x="1695" fg:w="13"/><text x="1.7900%" y="879.50"></text></g><g><title>[libc-2.31.so] (140 samples, 0.13%)</title><rect x="1.4264%" y="901" width="0.1272%" height="15" fill="rgb(236,97,10)" fg:x="1570" fg:w="140"/><text x="1.6764%" y="911.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (43 samples, 0.04%)</title><rect x="1.5536%" y="805" width="0.0391%" height="15" fill="rgb(233,208,19)" fg:x="1710" fg:w="43"/><text x="1.8036%" y="815.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::drop (43 samples, 0.04%)</title><rect x="1.5536%" y="789" width="0.0391%" height="15" fill="rgb(216,164,2)" fg:x="1710" fg:w="43"/><text x="1.8036%" y="799.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (43 samples, 0.04%)</title><rect x="1.5536%" y="773" width="0.0391%" height="15" fill="rgb(220,129,5)" fg:x="1710" fg:w="43"/><text x="1.8036%" y="783.50"></text></g><g><title>[pdk-hashbrown] (54 samples, 0.05%)</title><rect x="1.5536%" y="901" width="0.0491%" height="15" fill="rgb(242,17,10)" fg:x="1710" fg:w="54"/><text x="1.8036%" y="911.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (54 samples, 0.05%)</title><rect x="1.5536%" y="885" width="0.0491%" height="15" fill="rgb(242,107,0)" fg:x="1710" fg:w="54"/><text x="1.8036%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (54 samples, 0.05%)</title><rect x="1.5536%" y="869" width="0.0491%" height="15" fill="rgb(251,28,31)" fg:x="1710" fg:w="54"/><text x="1.8036%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (54 samples, 0.05%)</title><rect x="1.5536%" y="853" width="0.0491%" height="15" fill="rgb(233,223,10)" fg:x="1710" fg:w="54"/><text x="1.8036%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (54 samples, 0.05%)</title><rect x="1.5536%" y="837" width="0.0491%" height="15" fill="rgb(215,21,27)" fg:x="1710" fg:w="54"/><text x="1.8036%" y="847.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (54 samples, 0.05%)</title><rect x="1.5536%" y="821" width="0.0491%" height="15" fill="rgb(232,23,21)" fg:x="1710" fg:w="54"/><text x="1.8036%" y="831.50"></text></g><g><title>__GI___pthread_mutex_lock (22 samples, 0.02%)</title><rect x="1.6027%" y="901" width="0.0200%" height="15" fill="rgb(244,5,23)" fg:x="1764" fg:w="22"/><text x="1.8527%" y="911.50"></text></g><g><title>__GI___pthread_rwlock_rdlock (12 samples, 0.01%)</title><rect x="1.6317%" y="901" width="0.0109%" height="15" fill="rgb(226,81,46)" fg:x="1796" fg:w="12"/><text x="1.8817%" y="911.50"></text></g><g><title>__GI___pthread_rwlock_unlock (12 samples, 0.01%)</title><rect x="1.6427%" y="901" width="0.0109%" height="15" fill="rgb(247,70,30)" fg:x="1808" fg:w="12"/><text x="1.8927%" y="911.50"></text></g><g><title>__clock_gettime (16 samples, 0.01%)</title><rect x="1.6536%" y="901" width="0.0145%" height="15" fill="rgb(212,68,19)" fg:x="1820" fg:w="16"/><text x="1.9036%" y="911.50"></text></g><g><title>__pthread_cond_wait (17 samples, 0.02%)</title><rect x="1.6799%" y="901" width="0.0154%" height="15" fill="rgb(240,187,13)" fg:x="1849" fg:w="17"/><text x="1.9299%" y="911.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (32 samples, 0.03%)</title><rect x="1.6999%" y="901" width="0.0291%" height="15" fill="rgb(223,113,26)" fg:x="1871" fg:w="32"/><text x="1.9499%" y="911.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (27 samples, 0.02%)</title><rect x="1.7044%" y="885" width="0.0245%" height="15" fill="rgb(206,192,2)" fg:x="1876" fg:w="27"/><text x="1.9544%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (27 samples, 0.02%)</title><rect x="1.7044%" y="869" width="0.0245%" height="15" fill="rgb(241,108,4)" fg:x="1876" fg:w="27"/><text x="1.9544%" y="879.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (27 samples, 0.02%)</title><rect x="1.7044%" y="853" width="0.0245%" height="15" fill="rgb(247,173,49)" fg:x="1876" fg:w="27"/><text x="1.9544%" y="863.50"></text></g><g><title>abi_stable::erased_types::iterator::next (60 samples, 0.05%)</title><rect x="1.7290%" y="901" width="0.0545%" height="15" fill="rgb(224,114,35)" fg:x="1903" fg:w="60"/><text x="1.9790%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="1.8316%" y="885" width="0.0118%" height="15" fill="rgb(245,159,27)" fg:x="2016" fg:w="13"/><text x="2.0816%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="1.8316%" y="869" width="0.0118%" height="15" fill="rgb(245,172,44)" fg:x="2016" fg:w="13"/><text x="2.0816%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (13 samples, 0.01%)</title><rect x="1.8316%" y="853" width="0.0118%" height="15" fill="rgb(236,23,11)" fg:x="2016" fg:w="13"/><text x="2.0816%" y="863.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="1.8316%" y="837" width="0.0118%" height="15" fill="rgb(205,117,38)" fg:x="2016" fg:w="13"/><text x="2.0816%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (39 samples, 0.04%)</title><rect x="1.8434%" y="885" width="0.0354%" height="15" fill="rgb(237,72,25)" fg:x="2029" fg:w="39"/><text x="2.0934%" y="895.50"></text></g><g><title>alloc::alloc::box_free (39 samples, 0.04%)</title><rect x="1.8434%" y="869" width="0.0354%" height="15" fill="rgb(244,70,9)" fg:x="2029" fg:w="39"/><text x="2.0934%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (39 samples, 0.04%)</title><rect x="1.8434%" y="853" width="0.0354%" height="15" fill="rgb(217,125,39)" fg:x="2029" fg:w="39"/><text x="2.0934%" y="863.50"></text></g><g><title>alloc::alloc::dealloc (39 samples, 0.04%)</title><rect x="1.8434%" y="837" width="0.0354%" height="15" fill="rgb(235,36,10)" fg:x="2029" fg:w="39"/><text x="2.0934%" y="847.50"></text></g><g><title>__rg_dealloc (39 samples, 0.04%)</title><rect x="1.8434%" y="821" width="0.0354%" height="15" fill="rgb(251,123,47)" fg:x="2029" fg:w="39"/><text x="2.0934%" y="831.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (39 samples, 0.04%)</title><rect x="1.8434%" y="805" width="0.0354%" height="15" fill="rgb(221,13,13)" fg:x="2029" fg:w="39"/><text x="2.0934%" y="815.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (106 samples, 0.10%)</title><rect x="1.7889%" y="901" width="0.0963%" height="15" fill="rgb(238,131,9)" fg:x="1969" fg:w="106"/><text x="2.0389%" y="911.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (14 samples, 0.01%)</title><rect x="1.9098%" y="885" width="0.0127%" height="15" fill="rgb(211,50,8)" fg:x="2102" fg:w="14"/><text x="2.1598%" y="895.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (14 samples, 0.01%)</title><rect x="1.9098%" y="869" width="0.0127%" height="15" fill="rgb(245,182,24)" fg:x="2102" fg:w="14"/><text x="2.1598%" y="879.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (14 samples, 0.01%)</title><rect x="1.9098%" y="853" width="0.0127%" height="15" fill="rgb(242,14,37)" fg:x="2102" fg:w="14"/><text x="2.1598%" y="863.50"></text></g><g><title>alloc::alloc::exchange_malloc (14 samples, 0.01%)</title><rect x="1.9098%" y="837" width="0.0127%" height="15" fill="rgb(246,228,12)" fg:x="2102" fg:w="14"/><text x="2.1598%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 0.01%)</title><rect x="1.9098%" y="821" width="0.0127%" height="15" fill="rgb(213,55,15)" fg:x="2102" fg:w="14"/><text x="2.1598%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.01%)</title><rect x="1.9098%" y="805" width="0.0127%" height="15" fill="rgb(209,9,3)" fg:x="2102" fg:w="14"/><text x="2.1598%" y="815.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.01%)</title><rect x="1.9098%" y="789" width="0.0127%" height="15" fill="rgb(230,59,30)" fg:x="2102" fg:w="14"/><text x="2.1598%" y="799.50"></text></g><g><title>__rg_alloc (14 samples, 0.01%)</title><rect x="1.9098%" y="773" width="0.0127%" height="15" fill="rgb(209,121,21)" fg:x="2102" fg:w="14"/><text x="2.1598%" y="783.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (14 samples, 0.01%)</title><rect x="1.9098%" y="757" width="0.0127%" height="15" fill="rgb(220,109,13)" fg:x="2102" fg:w="14"/><text x="2.1598%" y="767.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (50 samples, 0.05%)</title><rect x="1.8852%" y="901" width="0.0454%" height="15" fill="rgb(232,18,1)" fg:x="2075" fg:w="50"/><text x="2.1352%" y="911.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (32 samples, 0.03%)</title><rect x="1.9307%" y="901" width="0.0291%" height="15" fill="rgb(215,41,42)" fg:x="2125" fg:w="32"/><text x="2.1807%" y="911.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (33 samples, 0.03%)</title><rect x="1.9597%" y="901" width="0.0300%" height="15" fill="rgb(224,123,36)" fg:x="2157" fg:w="33"/><text x="2.2097%" y="911.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (12 samples, 0.01%)</title><rect x="1.9788%" y="885" width="0.0109%" height="15" fill="rgb(240,125,3)" fg:x="2178" fg:w="12"/><text x="2.2288%" y="895.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (12 samples, 0.01%)</title><rect x="1.9788%" y="869" width="0.0109%" height="15" fill="rgb(205,98,50)" fg:x="2178" fg:w="12"/><text x="2.2288%" y="879.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (12 samples, 0.01%)</title><rect x="1.9788%" y="853" width="0.0109%" height="15" fill="rgb(205,185,37)" fg:x="2178" fg:w="12"/><text x="2.2288%" y="863.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (12 samples, 0.01%)</title><rect x="1.9788%" y="837" width="0.0109%" height="15" fill="rgb(238,207,15)" fg:x="2178" fg:w="12"/><text x="2.2288%" y="847.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (12 samples, 0.01%)</title><rect x="1.9788%" y="821" width="0.0109%" height="15" fill="rgb(213,199,42)" fg:x="2178" fg:w="12"/><text x="2.2288%" y="831.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (12 samples, 0.01%)</title><rect x="1.9788%" y="805" width="0.0109%" height="15" fill="rgb(235,201,11)" fg:x="2178" fg:w="12"/><text x="2.2288%" y="815.50"></text></g><g><title>alloc::alloc::exchange_malloc (12 samples, 0.01%)</title><rect x="1.9788%" y="789" width="0.0109%" height="15" fill="rgb(207,46,11)" fg:x="2178" fg:w="12"/><text x="2.2288%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.01%)</title><rect x="1.9788%" y="773" width="0.0109%" height="15" fill="rgb(241,35,35)" fg:x="2178" fg:w="12"/><text x="2.2288%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.01%)</title><rect x="1.9788%" y="757" width="0.0109%" height="15" fill="rgb(243,32,47)" fg:x="2178" fg:w="12"/><text x="2.2288%" y="767.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.01%)</title><rect x="1.9788%" y="741" width="0.0109%" height="15" fill="rgb(247,202,23)" fg:x="2178" fg:w="12"/><text x="2.2288%" y="751.50"></text></g><g><title>__rg_alloc (12 samples, 0.01%)</title><rect x="1.9788%" y="725" width="0.0109%" height="15" fill="rgb(219,102,11)" fg:x="2178" fg:w="12"/><text x="2.2288%" y="735.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (12 samples, 0.01%)</title><rect x="1.9788%" y="709" width="0.0109%" height="15" fill="rgb(243,110,44)" fg:x="2178" fg:w="12"/><text x="2.2288%" y="719.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (19 samples, 0.02%)</title><rect x="1.9897%" y="901" width="0.0173%" height="15" fill="rgb(222,74,54)" fg:x="2190" fg:w="19"/><text x="2.2397%" y="911.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (25 samples, 0.02%)</title><rect x="2.0070%" y="901" width="0.0227%" height="15" fill="rgb(216,99,12)" fg:x="2209" fg:w="25"/><text x="2.2570%" y="911.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck (27 samples, 0.02%)</title><rect x="2.0297%" y="901" width="0.0245%" height="15" fill="rgb(226,22,26)" fg:x="2234" fg:w="27"/><text x="2.2797%" y="911.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (12 samples, 0.01%)</title><rect x="2.0542%" y="901" width="0.0109%" height="15" fill="rgb(217,163,10)" fg:x="2261" fg:w="12"/><text x="2.3042%" y="911.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (12 samples, 0.01%)</title><rect x="2.0542%" y="885" width="0.0109%" height="15" fill="rgb(213,25,53)" fg:x="2261" fg:w="12"/><text x="2.3042%" y="895.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write (95 samples, 0.09%)</title><rect x="2.0742%" y="837" width="0.0863%" height="15" fill="rgb(252,105,26)" fg:x="2283" fg:w="95"/><text x="2.3242%" y="847.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash (114 samples, 0.10%)</title><rect x="2.0651%" y="901" width="0.1036%" height="15" fill="rgb(220,39,43)" fg:x="2273" fg:w="114"/><text x="2.3151%" y="911.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash::{{closure}} (104 samples, 0.09%)</title><rect x="2.0742%" y="885" width="0.0945%" height="15" fill="rgb(229,68,48)" fg:x="2283" fg:w="104"/><text x="2.3242%" y="895.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (104 samples, 0.09%)</title><rect x="2.0742%" y="869" width="0.0945%" height="15" fill="rgb(252,8,32)" fg:x="2283" fg:w="104"/><text x="2.3242%" y="879.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (104 samples, 0.09%)</title><rect x="2.0742%" y="853" width="0.0945%" height="15" fill="rgb(223,20,43)" fg:x="2283" fg:w="104"/><text x="2.3242%" y="863.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (19 samples, 0.02%)</title><rect x="2.1687%" y="901" width="0.0173%" height="15" fill="rgb(229,81,49)" fg:x="2387" fg:w="19"/><text x="2.4187%" y="911.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (16 samples, 0.01%)</title><rect x="2.1714%" y="885" width="0.0145%" height="15" fill="rgb(236,28,36)" fg:x="2390" fg:w="16"/><text x="2.4214%" y="895.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (16 samples, 0.01%)</title><rect x="2.1714%" y="869" width="0.0145%" height="15" fill="rgb(249,185,26)" fg:x="2390" fg:w="16"/><text x="2.4214%" y="879.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (16 samples, 0.01%)</title><rect x="2.1714%" y="853" width="0.0145%" height="15" fill="rgb(249,174,33)" fg:x="2390" fg:w="16"/><text x="2.4214%" y="863.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (16 samples, 0.01%)</title><rect x="2.1714%" y="837" width="0.0145%" height="15" fill="rgb(233,201,37)" fg:x="2390" fg:w="16"/><text x="2.4214%" y="847.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (16 samples, 0.01%)</title><rect x="2.1714%" y="821" width="0.0145%" height="15" fill="rgb(221,78,26)" fg:x="2390" fg:w="16"/><text x="2.4214%" y="831.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (16 samples, 0.01%)</title><rect x="2.1714%" y="805" width="0.0145%" height="15" fill="rgb(250,127,30)" fg:x="2390" fg:w="16"/><text x="2.4214%" y="815.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (13 samples, 0.01%)</title><rect x="2.1860%" y="901" width="0.0118%" height="15" fill="rgb(230,49,44)" fg:x="2406" fg:w="13"/><text x="2.4360%" y="911.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (48 samples, 0.04%)</title><rect x="2.1978%" y="901" width="0.0436%" height="15" fill="rgb(229,67,23)" fg:x="2419" fg:w="48"/><text x="2.4478%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (45 samples, 0.04%)</title><rect x="2.2795%" y="837" width="0.0409%" height="15" fill="rgb(249,83,47)" fg:x="2509" fg:w="45"/><text x="2.5295%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (45 samples, 0.04%)</title><rect x="2.2795%" y="821" width="0.0409%" height="15" fill="rgb(215,43,3)" fg:x="2509" fg:w="45"/><text x="2.5295%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (45 samples, 0.04%)</title><rect x="2.2795%" y="805" width="0.0409%" height="15" fill="rgb(238,154,13)" fg:x="2509" fg:w="45"/><text x="2.5295%" y="815.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (45 samples, 0.04%)</title><rect x="2.2795%" y="789" width="0.0409%" height="15" fill="rgb(219,56,2)" fg:x="2509" fg:w="45"/><text x="2.5295%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (50 samples, 0.05%)</title><rect x="2.2795%" y="853" width="0.0454%" height="15" fill="rgb(233,0,4)" fg:x="2509" fg:w="50"/><text x="2.5295%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.03%)</title><rect x="2.3250%" y="837" width="0.0291%" height="15" fill="rgb(235,30,7)" fg:x="2559" fg:w="32"/><text x="2.5750%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (32 samples, 0.03%)</title><rect x="2.3250%" y="821" width="0.0291%" height="15" fill="rgb(250,79,13)" fg:x="2559" fg:w="32"/><text x="2.5750%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (32 samples, 0.03%)</title><rect x="2.3250%" y="805" width="0.0291%" height="15" fill="rgb(211,146,34)" fg:x="2559" fg:w="32"/><text x="2.5750%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (32 samples, 0.03%)</title><rect x="2.3250%" y="789" width="0.0291%" height="15" fill="rgb(228,22,38)" fg:x="2559" fg:w="32"/><text x="2.5750%" y="799.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (32 samples, 0.03%)</title><rect x="2.3250%" y="773" width="0.0291%" height="15" fill="rgb(235,168,5)" fg:x="2559" fg:w="32"/><text x="2.5750%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (41 samples, 0.04%)</title><rect x="2.3250%" y="853" width="0.0373%" height="15" fill="rgb(221,155,16)" fg:x="2559" fg:w="41"/><text x="2.5750%" y="863.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (127 samples, 0.12%)</title><rect x="2.2477%" y="901" width="0.1154%" height="15" fill="rgb(215,215,53)" fg:x="2474" fg:w="127"/><text x="2.4977%" y="911.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (92 samples, 0.08%)</title><rect x="2.2795%" y="885" width="0.0836%" height="15" fill="rgb(223,4,10)" fg:x="2509" fg:w="92"/><text x="2.5295%" y="895.50"></text></g><g><title>core::mem::drop (92 samples, 0.08%)</title><rect x="2.2795%" y="869" width="0.0836%" height="15" fill="rgb(234,103,6)" fg:x="2509" fg:w="92"/><text x="2.5295%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (34 samples, 0.03%)</title><rect x="2.3631%" y="901" width="0.0309%" height="15" fill="rgb(227,97,0)" fg:x="2601" fg:w="34"/><text x="2.6131%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (31 samples, 0.03%)</title><rect x="2.3659%" y="885" width="0.0282%" height="15" fill="rgb(234,150,53)" fg:x="2604" fg:w="31"/><text x="2.6159%" y="895.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (30 samples, 0.03%)</title><rect x="2.3668%" y="869" width="0.0273%" height="15" fill="rgb(228,201,54)" fg:x="2605" fg:w="30"/><text x="2.6168%" y="879.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (30 samples, 0.03%)</title><rect x="2.3668%" y="853" width="0.0273%" height="15" fill="rgb(222,22,37)" fg:x="2605" fg:w="30"/><text x="2.6168%" y="863.50"></text></g><g><title>alloc::raw_vec::finish_grow (40 samples, 0.04%)</title><rect x="2.3940%" y="901" width="0.0363%" height="15" fill="rgb(237,53,32)" fg:x="2635" fg:w="40"/><text x="2.6440%" y="911.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (26 samples, 0.02%)</title><rect x="2.4067%" y="885" width="0.0236%" height="15" fill="rgb(233,25,53)" fg:x="2649" fg:w="26"/><text x="2.6567%" y="895.50"></text></g><g><title>alloc::alloc::Global::grow_impl (26 samples, 0.02%)</title><rect x="2.4067%" y="869" width="0.0236%" height="15" fill="rgb(210,40,34)" fg:x="2649" fg:w="26"/><text x="2.6567%" y="879.50"></text></g><g><title>alloc::alloc::realloc (26 samples, 0.02%)</title><rect x="2.4067%" y="853" width="0.0236%" height="15" fill="rgb(241,220,44)" fg:x="2649" fg:w="26"/><text x="2.6567%" y="863.50"></text></g><g><title>__rg_realloc (26 samples, 0.02%)</title><rect x="2.4067%" y="837" width="0.0236%" height="15" fill="rgb(235,28,35)" fg:x="2649" fg:w="26"/><text x="2.6567%" y="847.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (26 samples, 0.02%)</title><rect x="2.4067%" y="821" width="0.0236%" height="15" fill="rgb(210,56,17)" fg:x="2649" fg:w="26"/><text x="2.6567%" y="831.50"></text></g><g><title>async_executor::Ticker::sleep (33 samples, 0.03%)</title><rect x="2.4494%" y="901" width="0.0300%" height="15" fill="rgb(224,130,29)" fg:x="2696" fg:w="33"/><text x="2.6994%" y="911.50"></text></g><g><title>async_executor::steal (187 samples, 0.17%)</title><rect x="2.4894%" y="901" width="0.1699%" height="15" fill="rgb(235,212,8)" fg:x="2740" fg:w="187"/><text x="2.7394%" y="911.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (191 samples, 0.17%)</title><rect x="2.6938%" y="901" width="0.1735%" height="15" fill="rgb(223,33,50)" fg:x="2965" fg:w="191"/><text x="2.9438%" y="911.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (19 samples, 0.02%)</title><rect x="2.8674%" y="901" width="0.0173%" height="15" fill="rgb(219,149,13)" fg:x="3156" fg:w="19"/><text x="3.1174%" y="911.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (31 samples, 0.03%)</title><rect x="2.8846%" y="901" width="0.0282%" height="15" fill="rgb(250,156,29)" fg:x="3175" fg:w="31"/><text x="3.1346%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tremor_value::value::Value]&gt; (93 samples, 0.08%)</title><rect x="2.9328%" y="901" width="0.0845%" height="15" fill="rgb(216,193,19)" fg:x="3228" fg:w="93"/><text x="3.1828%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::route_events::{{closure}}&gt;&gt; (16 samples, 0.01%)</title><rect x="3.0336%" y="901" width="0.0145%" height="15" fill="rgb(216,135,14)" fg:x="3339" fg:w="16"/><text x="3.2836%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt;&gt; (20 samples, 0.02%)</title><rect x="3.0573%" y="901" width="0.0182%" height="15" fill="rgb(241,47,5)" fg:x="3365" fg:w="20"/><text x="3.3073%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt; (13 samples, 0.01%)</title><rect x="3.0636%" y="885" width="0.0118%" height="15" fill="rgb(233,42,35)" fg:x="3372" fg:w="13"/><text x="3.3136%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::send_events::{{closure}}&gt;&gt; (13 samples, 0.01%)</title><rect x="3.0754%" y="901" width="0.0118%" height="15" fill="rgb(231,13,6)" fg:x="3385" fg:w="13"/><text x="3.3254%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (21 samples, 0.02%)</title><rect x="3.1018%" y="885" width="0.0191%" height="15" fill="rgb(207,181,40)" fg:x="3414" fg:w="21"/><text x="3.3518%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (21 samples, 0.02%)</title><rect x="3.1018%" y="869" width="0.0191%" height="15" fill="rgb(254,173,49)" fg:x="3414" fg:w="21"/><text x="3.3518%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (12 samples, 0.01%)</title><rect x="3.1100%" y="853" width="0.0109%" height="15" fill="rgb(221,1,38)" fg:x="3423" fg:w="12"/><text x="3.3600%" y="863.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (12 samples, 0.01%)</title><rect x="3.1100%" y="837" width="0.0109%" height="15" fill="rgb(206,124,46)" fg:x="3423" fg:w="12"/><text x="3.3600%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (49 samples, 0.04%)</title><rect x="3.0981%" y="901" width="0.0445%" height="15" fill="rgb(249,21,11)" fg:x="3410" fg:w="49"/><text x="3.3481%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (17 samples, 0.02%)</title><rect x="3.1272%" y="885" width="0.0154%" height="15" fill="rgb(222,201,40)" fg:x="3442" fg:w="17"/><text x="3.3772%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (12 samples, 0.01%)</title><rect x="3.1318%" y="869" width="0.0109%" height="15" fill="rgb(235,61,29)" fg:x="3447" fg:w="12"/><text x="3.3818%" y="879.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (12 samples, 0.01%)</title><rect x="3.1318%" y="853" width="0.0109%" height="15" fill="rgb(219,207,3)" fg:x="3447" fg:w="12"/><text x="3.3818%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (13 samples, 0.01%)</title><rect x="3.1427%" y="901" width="0.0118%" height="15" fill="rgb(222,56,46)" fg:x="3459" fg:w="13"/><text x="3.3927%" y="911.50"></text></g><g><title>event_listener::Event::notify (49 samples, 0.04%)</title><rect x="3.1599%" y="901" width="0.0445%" height="15" fill="rgb(239,76,54)" fg:x="3478" fg:w="49"/><text x="3.4099%" y="911.50"></text></g><g><title>event_listener::full_fence (23 samples, 0.02%)</title><rect x="3.1835%" y="885" width="0.0209%" height="15" fill="rgb(231,124,27)" fg:x="3504" fg:w="23"/><text x="3.4335%" y="895.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (16 samples, 0.01%)</title><rect x="3.2199%" y="901" width="0.0145%" height="15" fill="rgb(249,195,6)" fg:x="3544" fg:w="16"/><text x="3.4699%" y="911.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert_hashed_nocheck (30 samples, 0.03%)</title><rect x="3.2344%" y="901" width="0.0273%" height="15" fill="rgb(237,174,47)" fg:x="3560" fg:w="30"/><text x="3.4844%" y="911.50"></text></g><g><title>hashbrown::raw::inner::RawIter&lt;T&gt;::drop_elements (20 samples, 0.02%)</title><rect x="3.2617%" y="901" width="0.0182%" height="15" fill="rgb(206,201,31)" fg:x="3590" fg:w="20"/><text x="3.5117%" y="911.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (59 samples, 0.05%)</title><rect x="3.2799%" y="901" width="0.0536%" height="15" fill="rgb(231,57,52)" fg:x="3610" fg:w="59"/><text x="3.5299%" y="911.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (119 samples, 0.11%)</title><rect x="3.3335%" y="901" width="0.1081%" height="15" fill="rgb(248,177,22)" fg:x="3669" fg:w="119"/><text x="3.5835%" y="911.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (71 samples, 0.06%)</title><rect x="3.3771%" y="885" width="0.0645%" height="15" fill="rgb(215,211,37)" fg:x="3717" fg:w="71"/><text x="3.6271%" y="895.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (71 samples, 0.06%)</title><rect x="3.3771%" y="869" width="0.0645%" height="15" fill="rgb(241,128,51)" fg:x="3717" fg:w="71"/><text x="3.6271%" y="879.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (71 samples, 0.06%)</title><rect x="3.3771%" y="853" width="0.0645%" height="15" fill="rgb(227,165,31)" fg:x="3717" fg:w="71"/><text x="3.6271%" y="863.50"></text></g><g><title>alloc::alloc::alloc (71 samples, 0.06%)</title><rect x="3.3771%" y="837" width="0.0645%" height="15" fill="rgb(228,167,24)" fg:x="3717" fg:w="71"/><text x="3.6271%" y="847.50"></text></g><g><title>__rg_alloc (71 samples, 0.06%)</title><rect x="3.3771%" y="821" width="0.0645%" height="15" fill="rgb(228,143,12)" fg:x="3717" fg:w="71"/><text x="3.6271%" y="831.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (71 samples, 0.06%)</title><rect x="3.3771%" y="805" width="0.0645%" height="15" fill="rgb(249,149,8)" fg:x="3717" fg:w="71"/><text x="3.6271%" y="815.50"></text></g><g><title>parking::Unparker::unpark (18 samples, 0.02%)</title><rect x="3.4416%" y="901" width="0.0164%" height="15" fill="rgb(243,35,44)" fg:x="3788" fg:w="18"/><text x="3.6916%" y="911.50"></text></g><g><title>rmp::encode::uint::write_uint (69 samples, 0.06%)</title><rect x="3.4616%" y="901" width="0.0627%" height="15" fill="rgb(246,89,9)" fg:x="3810" fg:w="69"/><text x="3.7116%" y="911.50"></text></g><g><title>rmp::encode::write_marker (171 samples, 0.16%)</title><rect x="3.5315%" y="901" width="0.1554%" height="15" fill="rgb(233,213,13)" fg:x="3887" fg:w="171"/><text x="3.7815%" y="911.50"></text></g><g><title>sn_rust_alloc (59 samples, 0.05%)</title><rect x="3.6869%" y="901" width="0.0536%" height="15" fill="rgb(233,141,41)" fg:x="4058" fg:w="59"/><text x="3.9369%" y="911.50"></text></g><g><title>sn_rust_dealloc (16 samples, 0.01%)</title><rect x="3.7405%" y="901" width="0.0145%" height="15" fill="rgb(239,167,4)" fg:x="4117" fg:w="16"/><text x="3.9905%" y="911.50"></text></g><g><title>sn_rust_realloc (20 samples, 0.02%)</title><rect x="3.7550%" y="901" width="0.0182%" height="15" fill="rgb(209,217,16)" fg:x="4133" fg:w="20"/><text x="4.0050%" y="911.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (26 samples, 0.02%)</title><rect x="3.7732%" y="901" width="0.0236%" height="15" fill="rgb(219,88,35)" fg:x="4153" fg:w="26"/><text x="4.0232%" y="911.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (20 samples, 0.02%)</title><rect x="3.8059%" y="901" width="0.0182%" height="15" fill="rgb(220,193,23)" fg:x="4189" fg:w="20"/><text x="4.0559%" y="911.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (35 samples, 0.03%)</title><rect x="3.8241%" y="901" width="0.0318%" height="15" fill="rgb(230,90,52)" fg:x="4209" fg:w="35"/><text x="4.0741%" y="911.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (18 samples, 0.02%)</title><rect x="3.8395%" y="885" width="0.0164%" height="15" fill="rgb(252,106,19)" fg:x="4226" fg:w="18"/><text x="4.0895%" y="895.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (13 samples, 0.01%)</title><rect x="3.8441%" y="869" width="0.0118%" height="15" fill="rgb(206,74,20)" fg:x="4231" fg:w="13"/><text x="4.0941%" y="879.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (13 samples, 0.01%)</title><rect x="3.8441%" y="853" width="0.0118%" height="15" fill="rgb(230,138,44)" fg:x="4231" fg:w="13"/><text x="4.0941%" y="863.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (13 samples, 0.01%)</title><rect x="3.8441%" y="837" width="0.0118%" height="15" fill="rgb(235,182,43)" fg:x="4231" fg:w="13"/><text x="4.0941%" y="847.50"></text></g><g><title>tremor_common::time::nanotime (19 samples, 0.02%)</title><rect x="3.8559%" y="901" width="0.0173%" height="15" fill="rgb(242,16,51)" fg:x="4244" fg:w="19"/><text x="4.1059%" y="911.50"></text></g><g><title>std::time::SystemTime::now (19 samples, 0.02%)</title><rect x="3.8559%" y="885" width="0.0173%" height="15" fill="rgb(248,9,4)" fg:x="4244" fg:w="19"/><text x="4.1059%" y="895.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (19 samples, 0.02%)</title><rect x="3.8559%" y="869" width="0.0173%" height="15" fill="rgb(210,31,22)" fg:x="4244" fg:w="19"/><text x="4.1059%" y="879.50"></text></g><g><title>std::sys::unix::time::inner::now (19 samples, 0.02%)</title><rect x="3.8559%" y="853" width="0.0173%" height="15" fill="rgb(239,54,39)" fg:x="4244" fg:w="19"/><text x="4.1059%" y="863.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_input (22 samples, 0.02%)</title><rect x="3.8731%" y="901" width="0.0200%" height="15" fill="rgb(230,99,41)" fg:x="4263" fg:w="22"/><text x="4.1231%" y="911.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (24 samples, 0.02%)</title><rect x="3.9022%" y="901" width="0.0218%" height="15" fill="rgb(253,106,12)" fg:x="4295" fg:w="24"/><text x="4.1522%" y="911.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event (14 samples, 0.01%)</title><rect x="3.9113%" y="885" width="0.0127%" height="15" fill="rgb(213,46,41)" fg:x="4305" fg:w="14"/><text x="4.1613%" y="895.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (14 samples, 0.01%)</title><rect x="3.9113%" y="869" width="0.0127%" height="15" fill="rgb(215,133,35)" fg:x="4305" fg:w="14"/><text x="4.1613%" y="879.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (14 samples, 0.01%)</title><rect x="3.9113%" y="853" width="0.0127%" height="15" fill="rgb(213,28,5)" fg:x="4305" fg:w="14"/><text x="4.1613%" y="863.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (14 samples, 0.01%)</title><rect x="3.9113%" y="837" width="0.0127%" height="15" fill="rgb(215,77,49)" fg:x="4305" fg:w="14"/><text x="4.1613%" y="847.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (21 samples, 0.02%)</title><rect x="3.9313%" y="901" width="0.0191%" height="15" fill="rgb(248,100,22)" fg:x="4327" fg:w="21"/><text x="4.1813%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (35 samples, 0.03%)</title><rect x="4.0294%" y="885" width="0.0318%" height="15" fill="rgb(208,67,9)" fg:x="4435" fg:w="35"/><text x="4.2794%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (35 samples, 0.03%)</title><rect x="4.0294%" y="869" width="0.0318%" height="15" fill="rgb(219,133,21)" fg:x="4435" fg:w="35"/><text x="4.2794%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (35 samples, 0.03%)</title><rect x="4.0294%" y="853" width="0.0318%" height="15" fill="rgb(246,46,29)" fg:x="4435" fg:w="35"/><text x="4.2794%" y="863.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (35 samples, 0.03%)</title><rect x="4.0294%" y="837" width="0.0318%" height="15" fill="rgb(246,185,52)" fg:x="4435" fg:w="35"/><text x="4.2794%" y="847.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (89 samples, 0.08%)</title><rect x="3.9867%" y="901" width="0.0809%" height="15" fill="rgb(252,136,11)" fg:x="4388" fg:w="89"/><text x="4.2367%" y="911.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (67 samples, 0.06%)</title><rect x="4.0676%" y="901" width="0.0609%" height="15" fill="rgb(219,138,53)" fg:x="4477" fg:w="67"/><text x="4.3176%" y="911.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (15 samples, 0.01%)</title><rect x="4.1284%" y="901" width="0.0136%" height="15" fill="rgb(211,51,23)" fg:x="4544" fg:w="15"/><text x="4.3784%" y="911.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (147 samples, 0.13%)</title><rect x="4.1421%" y="901" width="0.1336%" height="15" fill="rgb(247,221,28)" fg:x="4559" fg:w="147"/><text x="4.3921%" y="911.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (111 samples, 0.10%)</title><rect x="4.2756%" y="901" width="0.1008%" height="15" fill="rgb(251,222,45)" fg:x="4706" fg:w="111"/><text x="4.5256%" y="911.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::invoke2 (13 samples, 0.01%)</title><rect x="4.3765%" y="901" width="0.0118%" height="15" fill="rgb(217,162,53)" fg:x="4817" fg:w="13"/><text x="4.6265%" y="911.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (153 samples, 0.14%)</title><rect x="4.3883%" y="901" width="0.1390%" height="15" fill="rgb(229,93,14)" fg:x="4830" fg:w="153"/><text x="4.6383%" y="911.50"></text></g><g><title>tremor_script::interpreter::resolve (62 samples, 0.06%)</title><rect x="4.5273%" y="901" width="0.0563%" height="15" fill="rgb(209,67,49)" fg:x="4983" fg:w="62"/><text x="4.7773%" y="911.50"></text></g><g><title>tremor_script::interpreter::resolve_value (36 samples, 0.03%)</title><rect x="4.5836%" y="901" width="0.0327%" height="15" fill="rgb(213,87,29)" fg:x="5045" fg:w="36"/><text x="4.8336%" y="911.50"></text></g><g><title>tremor_script::interpreter::test_guard (40 samples, 0.04%)</title><rect x="4.6163%" y="901" width="0.0363%" height="15" fill="rgb(205,151,52)" fg:x="5081" fg:w="40"/><text x="4.8663%" y="911.50"></text></g><g><title>tremor_script::interpreter::test_predicate_expr (134 samples, 0.12%)</title><rect x="4.6527%" y="901" width="0.1217%" height="15" fill="rgb(253,215,39)" fg:x="5121" fg:w="134"/><text x="4.9027%" y="911.50"></text></g><g><title>tremor_script::interpreter::val_eq (43 samples, 0.04%)</title><rect x="4.7744%" y="901" width="0.0391%" height="15" fill="rgb(221,220,41)" fg:x="5255" fg:w="43"/><text x="5.0244%" y="911.50"></text></g><g><title>tremor_script::srs::EventPayload::rent_mut (18 samples, 0.02%)</title><rect x="4.8135%" y="901" width="0.0164%" height="15" fill="rgb(218,133,21)" fg:x="5298" fg:w="18"/><text x="5.0635%" y="911.50"></text></g><g><title>tremor_script::srs::EventPayload::try_new (18 samples, 0.02%)</title><rect x="4.8298%" y="901" width="0.0164%" height="15" fill="rgb(221,193,43)" fg:x="5316" fg:w="18"/><text x="5.0798%" y="911.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_bool (49 samples, 0.04%)</title><rect x="4.9688%" y="885" width="0.0445%" height="15" fill="rgb(240,128,52)" fg:x="5469" fg:w="49"/><text x="5.2188%" y="895.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (49 samples, 0.04%)</title><rect x="4.9688%" y="869" width="0.0445%" height="15" fill="rgb(253,114,12)" fg:x="5469" fg:w="49"/><text x="5.2188%" y="879.50"></text></g><g><title>rmp::encode::write_marker (49 samples, 0.04%)</title><rect x="4.9688%" y="853" width="0.0445%" height="15" fill="rgb(215,223,47)" fg:x="5469" fg:w="49"/><text x="5.2188%" y="863.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeSeq&gt;::serialize_element (18 samples, 0.02%)</title><rect x="5.0197%" y="885" width="0.0164%" height="15" fill="rgb(248,225,23)" fg:x="5525" fg:w="18"/><text x="5.2697%" y="895.50"></text></g><g><title>rmp::encode::write_marker (38 samples, 0.03%)</title><rect x="5.0370%" y="885" width="0.0345%" height="15" fill="rgb(250,108,0)" fg:x="5544" fg:w="38"/><text x="5.2870%" y="895.50"></text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (285 samples, 0.26%)</title><rect x="4.8462%" y="901" width="0.2589%" height="15" fill="rgb(228,208,7)" fg:x="5334" fg:w="285"/><text x="5.0962%" y="911.50"></text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (37 samples, 0.03%)</title><rect x="5.0715%" y="885" width="0.0336%" height="15" fill="rgb(244,45,10)" fg:x="5582" fg:w="37"/><text x="5.3215%" y="895.50"></text></g><g><title>rmp::encode::write_marker (37 samples, 0.03%)</title><rect x="5.0715%" y="869" width="0.0336%" height="15" fill="rgb(207,125,25)" fg:x="5582" fg:w="37"/><text x="5.3215%" y="879.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (12 samples, 0.01%)</title><rect x="5.1124%" y="901" width="0.0109%" height="15" fill="rgb(210,195,18)" fg:x="5627" fg:w="12"/><text x="5.3624%" y="911.50"></text></g><g><title>[anon] (5,515 samples, 5.01%)</title><rect x="0.1136%" y="917" width="5.0106%" height="15" fill="rgb(249,80,12)" fg:x="125" fg:w="5515"/><text x="0.3636%" y="927.50">[anon]</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (24 samples, 0.02%)</title><rect x="5.1505%" y="901" width="0.0218%" height="15" fill="rgb(221,65,9)" fg:x="5669" fg:w="24"/><text x="5.4005%" y="911.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (15 samples, 0.01%)</title><rect x="5.1587%" y="885" width="0.0136%" height="15" fill="rgb(235,49,36)" fg:x="5678" fg:w="15"/><text x="5.4087%" y="895.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (27 samples, 0.02%)</title><rect x="5.1814%" y="901" width="0.0245%" height="15" fill="rgb(225,32,20)" fg:x="5703" fg:w="27"/><text x="5.4314%" y="911.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (14 samples, 0.01%)</title><rect x="5.1932%" y="885" width="0.0127%" height="15" fill="rgb(215,141,46)" fg:x="5716" fg:w="14"/><text x="5.4432%" y="895.50"></text></g><g><title>[libc-2.31.so] (133 samples, 0.12%)</title><rect x="5.1242%" y="917" width="0.1208%" height="15" fill="rgb(250,160,47)" fg:x="5640" fg:w="133"/><text x="5.3742%" y="927.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_output (13 samples, 0.01%)</title><rect x="5.2332%" y="901" width="0.0118%" height="15" fill="rgb(216,222,40)" fg:x="5760" fg:w="13"/><text x="5.4832%" y="911.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (32 samples, 0.03%)</title><rect x="5.2623%" y="901" width="0.0291%" height="15" fill="rgb(234,217,39)" fg:x="5792" fg:w="32"/><text x="5.5123%" y="911.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (33 samples, 0.03%)</title><rect x="5.2932%" y="901" width="0.0300%" height="15" fill="rgb(207,178,40)" fg:x="5826" fg:w="33"/><text x="5.5432%" y="911.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (15 samples, 0.01%)</title><rect x="5.3232%" y="901" width="0.0136%" height="15" fill="rgb(221,136,13)" fg:x="5859" fg:w="15"/><text x="5.5732%" y="911.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (14 samples, 0.01%)</title><rect x="5.3622%" y="901" width="0.0127%" height="15" fill="rgb(249,199,10)" fg:x="5902" fg:w="14"/><text x="5.6122%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (98 samples, 0.09%)</title><rect x="5.3759%" y="901" width="0.0890%" height="15" fill="rgb(249,222,13)" fg:x="5917" fg:w="98"/><text x="5.6259%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (14 samples, 0.01%)</title><rect x="5.4522%" y="885" width="0.0127%" height="15" fill="rgb(244,185,38)" fg:x="6001" fg:w="14"/><text x="5.7022%" y="895.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (23 samples, 0.02%)</title><rect x="5.4749%" y="901" width="0.0209%" height="15" fill="rgb(236,202,9)" fg:x="6026" fg:w="23"/><text x="5.7249%" y="911.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (14 samples, 0.01%)</title><rect x="5.4958%" y="901" width="0.0127%" height="15" fill="rgb(250,229,37)" fg:x="6049" fg:w="14"/><text x="5.7458%" y="911.50"></text></g><g><title>sn_rust_dealloc (17 samples, 0.02%)</title><rect x="5.5303%" y="901" width="0.0154%" height="15" fill="rgb(206,174,23)" fg:x="6087" fg:w="17"/><text x="5.7803%" y="911.50"></text></g><g><title>tremor_script::ast::Script::run (29 samples, 0.03%)</title><rect x="5.5558%" y="901" width="0.0263%" height="15" fill="rgb(211,33,43)" fg:x="6115" fg:w="29"/><text x="5.8058%" y="911.50"></text></g><g><title>[pdk-hashbrown] (386 samples, 0.35%)</title><rect x="5.2450%" y="917" width="0.3507%" height="15" fill="rgb(245,58,50)" fg:x="5773" fg:w="386"/><text x="5.4950%" y="927.50"></text></g><g><title>&lt;&amp;mut A as serde::de::SeqAccess&gt;::next_element (30 samples, 0.03%)</title><rect x="5.8965%" y="869" width="0.0273%" height="15" fill="rgb(244,68,36)" fg:x="6490" fg:w="30"/><text x="6.1465%" y="879.50"></text></g><g><title>serde::de::SeqAccess::next_element (30 samples, 0.03%)</title><rect x="5.8965%" y="853" width="0.0273%" height="15" fill="rgb(232,229,15)" fg:x="6490" fg:w="30"/><text x="6.1465%" y="863.50"></text></g><g><title>&lt;rmp_serde::decode::SeqAccess&lt;R,C&gt; as serde::de::SeqAccess&gt;::next_element_seed (30 samples, 0.03%)</title><rect x="5.8965%" y="837" width="0.0273%" height="15" fill="rgb(254,30,23)" fg:x="6490" fg:w="30"/><text x="6.1465%" y="847.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (30 samples, 0.03%)</title><rect x="5.8965%" y="821" width="0.0273%" height="15" fill="rgb(235,160,14)" fg:x="6490" fg:w="30"/><text x="6.1465%" y="831.50"></text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (30 samples, 0.03%)</title><rect x="5.8965%" y="805" width="0.0273%" height="15" fill="rgb(212,155,44)" fg:x="6490" fg:w="30"/><text x="6.1465%" y="815.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_seq (37 samples, 0.03%)</title><rect x="5.8965%" y="885" width="0.0336%" height="15" fill="rgb(226,2,50)" fg:x="6490" fg:w="37"/><text x="6.1465%" y="895.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (403 samples, 0.37%)</title><rect x="5.5957%" y="901" width="0.3661%" height="15" fill="rgb(234,177,6)" fg:x="6159" fg:w="403"/><text x="5.8457%" y="911.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::read_str_data (35 samples, 0.03%)</title><rect x="5.9301%" y="885" width="0.0318%" height="15" fill="rgb(217,24,9)" fg:x="6527" fg:w="35"/><text x="6.1801%" y="895.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_str (187 samples, 0.17%)</title><rect x="5.9619%" y="901" width="0.1699%" height="15" fill="rgb(220,13,46)" fg:x="6562" fg:w="187"/><text x="6.2119%" y="911.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (24 samples, 0.02%)</title><rect x="6.1390%" y="901" width="0.0218%" height="15" fill="rgb(239,221,27)" fg:x="6757" fg:w="24"/><text x="6.3890%" y="911.50"></text></g><g><title>[libc-2.31.so] (261 samples, 0.24%)</title><rect x="6.2599%" y="677" width="0.2371%" height="15" fill="rgb(222,198,25)" fg:x="6890" fg:w="261"/><text x="6.5099%" y="687.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (287 samples, 0.26%)</title><rect x="6.2426%" y="693" width="0.2608%" height="15" fill="rgb(211,99,13)" fg:x="6871" fg:w="287"/><text x="6.4926%" y="703.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (481 samples, 0.44%)</title><rect x="6.2090%" y="709" width="0.4370%" height="15" fill="rgb(232,111,31)" fg:x="6834" fg:w="481"/><text x="6.4590%" y="719.50"></text></g><g><title>[libc-2.31.so] (157 samples, 0.14%)</title><rect x="6.5034%" y="693" width="0.1426%" height="15" fill="rgb(245,82,37)" fg:x="7158" fg:w="157"/><text x="6.7534%" y="703.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (499 samples, 0.45%)</title><rect x="6.1936%" y="757" width="0.4534%" height="15" fill="rgb(227,149,46)" fg:x="6817" fg:w="499"/><text x="6.4436%" y="767.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (499 samples, 0.45%)</title><rect x="6.1936%" y="741" width="0.4534%" height="15" fill="rgb(218,36,50)" fg:x="6817" fg:w="499"/><text x="6.4436%" y="751.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (499 samples, 0.45%)</title><rect x="6.1936%" y="725" width="0.4534%" height="15" fill="rgb(226,80,48)" fg:x="6817" fg:w="499"/><text x="6.4436%" y="735.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (31 samples, 0.03%)</title><rect x="6.6469%" y="741" width="0.0282%" height="15" fill="rgb(238,224,15)" fg:x="7316" fg:w="31"/><text x="6.8969%" y="751.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (31 samples, 0.03%)</title><rect x="6.6469%" y="725" width="0.0282%" height="15" fill="rgb(241,136,10)" fg:x="7316" fg:w="31"/><text x="6.8969%" y="735.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (31 samples, 0.03%)</title><rect x="6.6469%" y="709" width="0.0282%" height="15" fill="rgb(208,32,45)" fg:x="7316" fg:w="31"/><text x="6.8969%" y="719.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (31 samples, 0.03%)</title><rect x="6.6469%" y="693" width="0.0282%" height="15" fill="rgb(207,135,9)" fg:x="7316" fg:w="31"/><text x="6.8969%" y="703.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (28 samples, 0.03%)</title><rect x="6.6496%" y="677" width="0.0254%" height="15" fill="rgb(206,86,44)" fg:x="7319" fg:w="28"/><text x="6.8996%" y="687.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (28 samples, 0.03%)</title><rect x="6.6496%" y="661" width="0.0254%" height="15" fill="rgb(245,177,15)" fg:x="7319" fg:w="28"/><text x="6.8996%" y="671.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (28 samples, 0.03%)</title><rect x="6.6496%" y="645" width="0.0254%" height="15" fill="rgb(206,64,50)" fg:x="7319" fg:w="28"/><text x="6.8996%" y="655.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (28 samples, 0.03%)</title><rect x="6.6496%" y="629" width="0.0254%" height="15" fill="rgb(234,36,40)" fg:x="7319" fg:w="28"/><text x="6.8996%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (28 samples, 0.03%)</title><rect x="6.6496%" y="613" width="0.0254%" height="15" fill="rgb(213,64,8)" fg:x="7319" fg:w="28"/><text x="6.8996%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (28 samples, 0.03%)</title><rect x="6.6496%" y="597" width="0.0254%" height="15" fill="rgb(210,75,36)" fg:x="7319" fg:w="28"/><text x="6.8996%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (28 samples, 0.03%)</title><rect x="6.6496%" y="581" width="0.0254%" height="15" fill="rgb(229,88,21)" fg:x="7319" fg:w="28"/><text x="6.8996%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (28 samples, 0.03%)</title><rect x="6.6496%" y="565" width="0.0254%" height="15" fill="rgb(252,204,47)" fg:x="7319" fg:w="28"/><text x="6.8996%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (18 samples, 0.02%)</title><rect x="6.6587%" y="549" width="0.0164%" height="15" fill="rgb(208,77,27)" fg:x="7329" fg:w="18"/><text x="6.9087%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (18 samples, 0.02%)</title><rect x="6.6587%" y="533" width="0.0164%" height="15" fill="rgb(221,76,26)" fg:x="7329" fg:w="18"/><text x="6.9087%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (18 samples, 0.02%)</title><rect x="6.6587%" y="517" width="0.0164%" height="15" fill="rgb(225,139,18)" fg:x="7329" fg:w="18"/><text x="6.9087%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (18 samples, 0.02%)</title><rect x="6.6587%" y="501" width="0.0164%" height="15" fill="rgb(230,137,11)" fg:x="7329" fg:w="18"/><text x="6.9087%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (18 samples, 0.02%)</title><rect x="6.6587%" y="485" width="0.0164%" height="15" fill="rgb(212,28,1)" fg:x="7329" fg:w="18"/><text x="6.9087%" y="495.50"></text></g><g><title>alloc::alloc::alloc (18 samples, 0.02%)</title><rect x="6.6587%" y="469" width="0.0164%" height="15" fill="rgb(248,164,17)" fg:x="7329" fg:w="18"/><text x="6.9087%" y="479.50"></text></g><g><title>__rg_alloc (18 samples, 0.02%)</title><rect x="6.6587%" y="453" width="0.0164%" height="15" fill="rgb(222,171,42)" fg:x="7329" fg:w="18"/><text x="6.9087%" y="463.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (18 samples, 0.02%)</title><rect x="6.6587%" y="437" width="0.0164%" height="15" fill="rgb(243,84,45)" fg:x="7329" fg:w="18"/><text x="6.9087%" y="447.50"></text></g><g><title>sn_rust_alloc (18 samples, 0.02%)</title><rect x="6.6587%" y="421" width="0.0164%" height="15" fill="rgb(252,49,23)" fg:x="7329" fg:w="18"/><text x="6.9087%" y="431.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (18 samples, 0.02%)</title><rect x="6.6587%" y="405" width="0.0164%" height="15" fill="rgb(215,19,7)" fg:x="7329" fg:w="18"/><text x="6.9087%" y="415.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (70 samples, 0.06%)</title><rect x="6.6869%" y="661" width="0.0636%" height="15" fill="rgb(238,81,41)" fg:x="7360" fg:w="70"/><text x="6.9369%" y="671.50"></text></g><g><title>[libc-2.31.so] (107 samples, 0.10%)</title><rect x="6.7505%" y="645" width="0.0972%" height="15" fill="rgb(210,199,37)" fg:x="7430" fg:w="107"/><text x="7.0005%" y="655.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (193 samples, 0.18%)</title><rect x="6.7505%" y="661" width="0.1753%" height="15" fill="rgb(244,192,49)" fg:x="7430" fg:w="193"/><text x="7.0005%" y="671.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (86 samples, 0.08%)</title><rect x="6.8477%" y="645" width="0.0781%" height="15" fill="rgb(226,211,11)" fg:x="7537" fg:w="86"/><text x="7.0977%" y="655.50"></text></g><g><title>[libc-2.31.so] (85 samples, 0.08%)</title><rect x="6.8486%" y="629" width="0.0772%" height="15" fill="rgb(236,162,54)" fg:x="7538" fg:w="85"/><text x="7.0986%" y="639.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (78 samples, 0.07%)</title><rect x="6.9295%" y="629" width="0.0709%" height="15" fill="rgb(220,229,9)" fg:x="7627" fg:w="78"/><text x="7.1795%" y="639.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (77 samples, 0.07%)</title><rect x="6.9304%" y="613" width="0.0700%" height="15" fill="rgb(250,87,22)" fg:x="7628" fg:w="77"/><text x="7.1804%" y="623.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (77 samples, 0.07%)</title><rect x="6.9304%" y="597" width="0.0700%" height="15" fill="rgb(239,43,17)" fg:x="7628" fg:w="77"/><text x="7.1804%" y="607.50"></text></g><g><title>[libc-2.31.so] (70 samples, 0.06%)</title><rect x="6.9367%" y="581" width="0.0636%" height="15" fill="rgb(231,177,25)" fg:x="7635" fg:w="70"/><text x="7.1867%" y="591.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (164 samples, 0.15%)</title><rect x="6.9258%" y="661" width="0.1490%" height="15" fill="rgb(219,179,1)" fg:x="7623" fg:w="164"/><text x="7.1758%" y="671.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (164 samples, 0.15%)</title><rect x="6.9258%" y="645" width="0.1490%" height="15" fill="rgb(238,219,53)" fg:x="7623" fg:w="164"/><text x="7.1758%" y="655.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (77 samples, 0.07%)</title><rect x="7.0049%" y="629" width="0.0700%" height="15" fill="rgb(232,167,36)" fg:x="7710" fg:w="77"/><text x="7.2549%" y="639.50"></text></g><g><title>[libc-2.31.so] (75 samples, 0.07%)</title><rect x="7.0067%" y="613" width="0.0681%" height="15" fill="rgb(244,19,51)" fg:x="7712" fg:w="75"/><text x="7.2567%" y="623.50"></text></g><g><title>[libc-2.31.so] (152 samples, 0.14%)</title><rect x="7.0748%" y="661" width="0.1381%" height="15" fill="rgb(224,6,22)" fg:x="7787" fg:w="152"/><text x="7.3248%" y="671.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (51 samples, 0.05%)</title><rect x="7.2129%" y="661" width="0.0463%" height="15" fill="rgb(224,145,5)" fg:x="7939" fg:w="51"/><text x="7.4629%" y="671.50"></text></g><g><title>[libc-2.31.so] (47 samples, 0.04%)</title><rect x="7.2166%" y="645" width="0.0427%" height="15" fill="rgb(234,130,49)" fg:x="7943" fg:w="47"/><text x="7.4666%" y="655.50"></text></g><g><title>sn_rust_dealloc (71 samples, 0.06%)</title><rect x="7.2675%" y="613" width="0.0645%" height="15" fill="rgb(254,6,2)" fg:x="7999" fg:w="71"/><text x="7.5175%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (81 samples, 0.07%)</title><rect x="7.2593%" y="661" width="0.0736%" height="15" fill="rgb(208,96,46)" fg:x="7990" fg:w="81"/><text x="7.5093%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (81 samples, 0.07%)</title><rect x="7.2593%" y="645" width="0.0736%" height="15" fill="rgb(239,3,39)" fg:x="7990" fg:w="81"/><text x="7.5093%" y="655.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (81 samples, 0.07%)</title><rect x="7.2593%" y="629" width="0.0736%" height="15" fill="rgb(233,210,1)" fg:x="7990" fg:w="81"/><text x="7.5093%" y="639.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (55 samples, 0.05%)</title><rect x="7.3592%" y="437" width="0.0500%" height="15" fill="rgb(244,137,37)" fg:x="8100" fg:w="55"/><text x="7.6092%" y="447.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::pull_data (85 samples, 0.08%)</title><rect x="7.3329%" y="645" width="0.0772%" height="15" fill="rgb(240,136,2)" fg:x="8071" fg:w="85"/><text x="7.5829%" y="655.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data (82 samples, 0.07%)</title><rect x="7.3356%" y="629" width="0.0745%" height="15" fill="rgb(239,18,37)" fg:x="8074" fg:w="82"/><text x="7.5856%" y="639.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (82 samples, 0.07%)</title><rect x="7.3356%" y="613" width="0.0745%" height="15" fill="rgb(218,185,22)" fg:x="8074" fg:w="82"/><text x="7.5856%" y="623.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (82 samples, 0.07%)</title><rect x="7.3356%" y="597" width="0.0745%" height="15" fill="rgb(225,218,4)" fg:x="8074" fg:w="82"/><text x="7.5856%" y="607.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (82 samples, 0.07%)</title><rect x="7.3356%" y="581" width="0.0745%" height="15" fill="rgb(230,182,32)" fg:x="8074" fg:w="82"/><text x="7.5856%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (77 samples, 0.07%)</title><rect x="7.3401%" y="565" width="0.0700%" height="15" fill="rgb(242,56,43)" fg:x="8079" fg:w="77"/><text x="7.5901%" y="575.50"></text></g><g><title>alloc::alloc::exchange_malloc (77 samples, 0.07%)</title><rect x="7.3401%" y="549" width="0.0700%" height="15" fill="rgb(233,99,24)" fg:x="8079" fg:w="77"/><text x="7.5901%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (77 samples, 0.07%)</title><rect x="7.3401%" y="533" width="0.0700%" height="15" fill="rgb(234,209,42)" fg:x="8079" fg:w="77"/><text x="7.5901%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (77 samples, 0.07%)</title><rect x="7.3401%" y="517" width="0.0700%" height="15" fill="rgb(227,7,12)" fg:x="8079" fg:w="77"/><text x="7.5901%" y="527.50"></text></g><g><title>alloc::alloc::alloc (77 samples, 0.07%)</title><rect x="7.3401%" y="501" width="0.0700%" height="15" fill="rgb(245,203,43)" fg:x="8079" fg:w="77"/><text x="7.5901%" y="511.50"></text></g><g><title>__rg_alloc (77 samples, 0.07%)</title><rect x="7.3401%" y="485" width="0.0700%" height="15" fill="rgb(238,205,33)" fg:x="8079" fg:w="77"/><text x="7.5901%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (77 samples, 0.07%)</title><rect x="7.3401%" y="469" width="0.0700%" height="15" fill="rgb(231,56,7)" fg:x="8079" fg:w="77"/><text x="7.5901%" y="479.50"></text></g><g><title>sn_rust_alloc (77 samples, 0.07%)</title><rect x="7.3401%" y="453" width="0.0700%" height="15" fill="rgb(244,186,29)" fg:x="8079" fg:w="77"/><text x="7.5901%" y="463.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (816 samples, 0.74%)</title><rect x="6.6751%" y="693" width="0.7414%" height="15" fill="rgb(234,111,31)" fg:x="7347" fg:w="816"/><text x="6.9251%" y="703.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (813 samples, 0.74%)</title><rect x="6.6778%" y="677" width="0.7386%" height="15" fill="rgb(241,149,10)" fg:x="7350" fg:w="813"/><text x="6.9278%" y="687.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_TO&lt;_ErasedPtr&gt;::pull_data (92 samples, 0.08%)</title><rect x="7.3329%" y="661" width="0.0836%" height="15" fill="rgb(249,206,44)" fg:x="8071" fg:w="92"/><text x="7.5829%" y="671.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (848 samples, 0.77%)</title><rect x="6.6469%" y="757" width="0.7704%" height="15" fill="rgb(251,153,30)" fg:x="7316" fg:w="848"/><text x="6.8969%" y="767.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (817 samples, 0.74%)</title><rect x="6.6751%" y="741" width="0.7423%" height="15" fill="rgb(239,152,38)" fg:x="7347" fg:w="817"/><text x="6.9251%" y="751.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (817 samples, 0.74%)</title><rect x="6.6751%" y="725" width="0.7423%" height="15" fill="rgb(249,139,47)" fg:x="7347" fg:w="817"/><text x="6.9251%" y="735.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (817 samples, 0.74%)</title><rect x="6.6751%" y="709" width="0.7423%" height="15" fill="rgb(244,64,35)" fg:x="7347" fg:w="817"/><text x="6.9251%" y="719.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (23 samples, 0.02%)</title><rect x="7.4464%" y="693" width="0.0209%" height="15" fill="rgb(216,46,15)" fg:x="8196" fg:w="23"/><text x="7.6964%" y="703.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (18 samples, 0.02%)</title><rect x="7.4510%" y="677" width="0.0164%" height="15" fill="rgb(250,74,19)" fg:x="8201" fg:w="18"/><text x="7.7010%" y="687.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (289 samples, 0.26%)</title><rect x="7.4210%" y="709" width="0.2626%" height="15" fill="rgb(249,42,33)" fg:x="8168" fg:w="289"/><text x="7.6710%" y="719.50"></text></g><g><title>[libc-2.31.so] (238 samples, 0.22%)</title><rect x="7.4673%" y="693" width="0.2162%" height="15" fill="rgb(242,149,17)" fg:x="8219" fg:w="238"/><text x="7.7173%" y="703.50"></text></g><g><title>[libc-2.31.so] (123 samples, 0.11%)</title><rect x="7.6836%" y="709" width="0.1118%" height="15" fill="rgb(244,29,21)" fg:x="8457" fg:w="123"/><text x="7.9336%" y="719.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (417 samples, 0.38%)</title><rect x="7.4174%" y="741" width="0.3789%" height="15" fill="rgb(220,130,37)" fg:x="8164" fg:w="417"/><text x="7.6674%" y="751.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (417 samples, 0.38%)</title><rect x="7.4174%" y="725" width="0.3789%" height="15" fill="rgb(211,67,2)" fg:x="8164" fg:w="417"/><text x="7.6674%" y="735.50"></text></g><g><title>[libc-2.31.so] (65 samples, 0.06%)</title><rect x="7.8044%" y="725" width="0.0591%" height="15" fill="rgb(235,68,52)" fg:x="8590" fg:w="65"/><text x="8.0544%" y="735.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (470 samples, 0.43%)</title><rect x="7.8635%" y="613" width="0.4270%" height="15" fill="rgb(246,142,3)" fg:x="8655" fg:w="470"/><text x="8.1135%" y="623.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (470 samples, 0.43%)</title><rect x="7.8635%" y="597" width="0.4270%" height="15" fill="rgb(241,25,7)" fg:x="8655" fg:w="470"/><text x="8.1135%" y="607.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (483 samples, 0.44%)</title><rect x="7.8635%" y="725" width="0.4388%" height="15" fill="rgb(242,119,39)" fg:x="8655" fg:w="483"/><text x="8.1135%" y="735.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (483 samples, 0.44%)</title><rect x="7.8635%" y="709" width="0.4388%" height="15" fill="rgb(241,98,45)" fg:x="8655" fg:w="483"/><text x="8.1135%" y="719.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (483 samples, 0.44%)</title><rect x="7.8635%" y="693" width="0.4388%" height="15" fill="rgb(254,28,30)" fg:x="8655" fg:w="483"/><text x="8.1135%" y="703.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (483 samples, 0.44%)</title><rect x="7.8635%" y="677" width="0.4388%" height="15" fill="rgb(241,142,54)" fg:x="8655" fg:w="483"/><text x="8.1135%" y="687.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (483 samples, 0.44%)</title><rect x="7.8635%" y="661" width="0.4388%" height="15" fill="rgb(222,85,15)" fg:x="8655" fg:w="483"/><text x="8.1135%" y="671.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (483 samples, 0.44%)</title><rect x="7.8635%" y="645" width="0.4388%" height="15" fill="rgb(210,85,47)" fg:x="8655" fg:w="483"/><text x="8.1135%" y="655.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (483 samples, 0.44%)</title><rect x="7.8635%" y="629" width="0.4388%" height="15" fill="rgb(224,206,25)" fg:x="8655" fg:w="483"/><text x="8.1135%" y="639.50"></text></g><g><title>alloc::alloc::exchange_malloc (13 samples, 0.01%)</title><rect x="8.2905%" y="613" width="0.0118%" height="15" fill="rgb(243,201,19)" fg:x="9125" fg:w="13"/><text x="8.5405%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (13 samples, 0.01%)</title><rect x="8.2905%" y="597" width="0.0118%" height="15" fill="rgb(236,59,4)" fg:x="9125" fg:w="13"/><text x="8.5405%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (13 samples, 0.01%)</title><rect x="8.2905%" y="581" width="0.0118%" height="15" fill="rgb(254,179,45)" fg:x="9125" fg:w="13"/><text x="8.5405%" y="591.50"></text></g><g><title>alloc::alloc::alloc (13 samples, 0.01%)</title><rect x="8.2905%" y="565" width="0.0118%" height="15" fill="rgb(226,14,10)" fg:x="9125" fg:w="13"/><text x="8.5405%" y="575.50"></text></g><g><title>__rg_alloc (13 samples, 0.01%)</title><rect x="8.2905%" y="549" width="0.0118%" height="15" fill="rgb(244,27,41)" fg:x="9125" fg:w="13"/><text x="8.5405%" y="559.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (13 samples, 0.01%)</title><rect x="8.2905%" y="533" width="0.0118%" height="15" fill="rgb(235,35,32)" fg:x="9125" fg:w="13"/><text x="8.5405%" y="543.50"></text></g><g><title>sn_rust_alloc (13 samples, 0.01%)</title><rect x="8.2905%" y="517" width="0.0118%" height="15" fill="rgb(218,68,31)" fg:x="9125" fg:w="13"/><text x="8.5405%" y="527.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (13 samples, 0.01%)</title><rect x="8.2905%" y="501" width="0.0118%" height="15" fill="rgb(207,120,37)" fg:x="9125" fg:w="13"/><text x="8.5405%" y="511.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (197 samples, 0.18%)</title><rect x="8.3841%" y="709" width="0.1790%" height="15" fill="rgb(227,98,0)" fg:x="9228" fg:w="197"/><text x="8.6341%" y="719.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (190 samples, 0.17%)</title><rect x="8.3904%" y="693" width="0.1726%" height="15" fill="rgb(207,7,3)" fg:x="9235" fg:w="190"/><text x="8.6404%" y="703.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (190 samples, 0.17%)</title><rect x="8.3904%" y="677" width="0.1726%" height="15" fill="rgb(206,98,19)" fg:x="9235" fg:w="190"/><text x="8.6404%" y="687.50"></text></g><g><title>core::ptr::read (190 samples, 0.17%)</title><rect x="8.3904%" y="661" width="0.1726%" height="15" fill="rgb(217,5,26)" fg:x="9235" fg:w="190"/><text x="8.6404%" y="671.50"></text></g><g><title>[libc-2.31.so] (190 samples, 0.17%)</title><rect x="8.3904%" y="645" width="0.1726%" height="15" fill="rgb(235,190,38)" fg:x="9235" fg:w="190"/><text x="8.6404%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (123 samples, 0.11%)</title><rect x="8.5649%" y="581" width="0.1118%" height="15" fill="rgb(247,86,24)" fg:x="9427" fg:w="123"/><text x="8.8149%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (123 samples, 0.11%)</title><rect x="8.5649%" y="565" width="0.1118%" height="15" fill="rgb(205,101,16)" fg:x="9427" fg:w="123"/><text x="8.8149%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (123 samples, 0.11%)</title><rect x="8.5649%" y="549" width="0.1118%" height="15" fill="rgb(246,168,33)" fg:x="9427" fg:w="123"/><text x="8.8149%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (123 samples, 0.11%)</title><rect x="8.5649%" y="533" width="0.1118%" height="15" fill="rgb(231,114,1)" fg:x="9427" fg:w="123"/><text x="8.8149%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (123 samples, 0.11%)</title><rect x="8.5649%" y="517" width="0.1118%" height="15" fill="rgb(207,184,53)" fg:x="9427" fg:w="123"/><text x="8.8149%" y="527.50"></text></g><g><title>alloc::alloc::alloc (123 samples, 0.11%)</title><rect x="8.5649%" y="501" width="0.1118%" height="15" fill="rgb(224,95,51)" fg:x="9427" fg:w="123"/><text x="8.8149%" y="511.50"></text></g><g><title>__rg_alloc (123 samples, 0.11%)</title><rect x="8.5649%" y="485" width="0.1118%" height="15" fill="rgb(212,188,45)" fg:x="9427" fg:w="123"/><text x="8.8149%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (123 samples, 0.11%)</title><rect x="8.5649%" y="469" width="0.1118%" height="15" fill="rgb(223,154,38)" fg:x="9427" fg:w="123"/><text x="8.8149%" y="479.50"></text></g><g><title>sn_rust_alloc (121 samples, 0.11%)</title><rect x="8.5667%" y="453" width="0.1099%" height="15" fill="rgb(251,22,52)" fg:x="9429" fg:w="121"/><text x="8.8167%" y="463.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (133 samples, 0.12%)</title><rect x="8.5640%" y="709" width="0.1208%" height="15" fill="rgb(229,209,22)" fg:x="9426" fg:w="133"/><text x="8.8140%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (133 samples, 0.12%)</title><rect x="8.5640%" y="693" width="0.1208%" height="15" fill="rgb(234,138,34)" fg:x="9426" fg:w="133"/><text x="8.8140%" y="703.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (133 samples, 0.12%)</title><rect x="8.5640%" y="677" width="0.1208%" height="15" fill="rgb(212,95,11)" fg:x="9426" fg:w="133"/><text x="8.8140%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (133 samples, 0.12%)</title><rect x="8.5640%" y="661" width="0.1208%" height="15" fill="rgb(240,179,47)" fg:x="9426" fg:w="133"/><text x="8.8140%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (133 samples, 0.12%)</title><rect x="8.5640%" y="645" width="0.1208%" height="15" fill="rgb(240,163,11)" fg:x="9426" fg:w="133"/><text x="8.8140%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (133 samples, 0.12%)</title><rect x="8.5640%" y="629" width="0.1208%" height="15" fill="rgb(236,37,12)" fg:x="9426" fg:w="133"/><text x="8.8140%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (133 samples, 0.12%)</title><rect x="8.5640%" y="613" width="0.1208%" height="15" fill="rgb(232,164,16)" fg:x="9426" fg:w="133"/><text x="8.8140%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (133 samples, 0.12%)</title><rect x="8.5640%" y="597" width="0.1208%" height="15" fill="rgb(244,205,15)" fg:x="9426" fg:w="133"/><text x="8.8140%" y="607.50"></text></g><g><title>[libc-2.31.so] (444 samples, 0.40%)</title><rect x="8.6848%" y="709" width="0.4034%" height="15" fill="rgb(223,117,47)" fg:x="9559" fg:w="444"/><text x="8.9348%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (22 samples, 0.02%)</title><rect x="9.0964%" y="709" width="0.0200%" height="15" fill="rgb(244,107,35)" fg:x="10012" fg:w="22"/><text x="9.3464%" y="719.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.02%)</title><rect x="9.0964%" y="693" width="0.0200%" height="15" fill="rgb(205,140,8)" fg:x="10012" fg:w="22"/><text x="9.3464%" y="703.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (74 samples, 0.07%)</title><rect x="9.1382%" y="677" width="0.0672%" height="15" fill="rgb(228,84,46)" fg:x="10058" fg:w="74"/><text x="9.3882%" y="687.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (74 samples, 0.07%)</title><rect x="9.1382%" y="661" width="0.0672%" height="15" fill="rgb(254,188,9)" fg:x="10058" fg:w="74"/><text x="9.3882%" y="671.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (74 samples, 0.07%)</title><rect x="9.1382%" y="645" width="0.0672%" height="15" fill="rgb(206,112,54)" fg:x="10058" fg:w="74"/><text x="9.3882%" y="655.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (74 samples, 0.07%)</title><rect x="9.1382%" y="629" width="0.0672%" height="15" fill="rgb(216,84,49)" fg:x="10058" fg:w="74"/><text x="9.3882%" y="639.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (74 samples, 0.07%)</title><rect x="9.1382%" y="613" width="0.0672%" height="15" fill="rgb(214,194,35)" fg:x="10058" fg:w="74"/><text x="9.3882%" y="623.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (74 samples, 0.07%)</title><rect x="9.1382%" y="597" width="0.0672%" height="15" fill="rgb(249,28,3)" fg:x="10058" fg:w="74"/><text x="9.3882%" y="607.50"></text></g><g><title>[libc-2.31.so] (57 samples, 0.05%)</title><rect x="9.1536%" y="581" width="0.0518%" height="15" fill="rgb(222,56,52)" fg:x="10075" fg:w="57"/><text x="9.4036%" y="591.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (89 samples, 0.08%)</title><rect x="9.1263%" y="709" width="0.0809%" height="15" fill="rgb(245,217,50)" fg:x="10045" fg:w="89"/><text x="9.3763%" y="719.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get_mut (80 samples, 0.07%)</title><rect x="9.1345%" y="693" width="0.0727%" height="15" fill="rgb(213,201,24)" fg:x="10054" fg:w="80"/><text x="9.3845%" y="703.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (3,339 samples, 3.03%)</title><rect x="6.1936%" y="885" width="3.0336%" height="15" fill="rgb(248,116,28)" fg:x="6817" fg:w="3339"/><text x="6.4436%" y="895.50">asy..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (3,339 samples, 3.03%)</title><rect x="6.1936%" y="869" width="3.0336%" height="15" fill="rgb(219,72,43)" fg:x="6817" fg:w="3339"/><text x="6.4436%" y="879.50">&lt;as..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (3,339 samples, 3.03%)</title><rect x="6.1936%" y="853" width="3.0336%" height="15" fill="rgb(209,138,14)" fg:x="6817" fg:w="3339"/><text x="6.4436%" y="863.50">asy..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3,339 samples, 3.03%)</title><rect x="6.1936%" y="837" width="3.0336%" height="15" fill="rgb(222,18,33)" fg:x="6817" fg:w="3339"/><text x="6.4436%" y="847.50">std..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3,339 samples, 3.03%)</title><rect x="6.1936%" y="821" width="3.0336%" height="15" fill="rgb(213,199,7)" fg:x="6817" fg:w="3339"/><text x="6.4436%" y="831.50">std..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (3,339 samples, 3.03%)</title><rect x="6.1936%" y="805" width="3.0336%" height="15" fill="rgb(250,110,10)" fg:x="6817" fg:w="3339"/><text x="6.4436%" y="815.50">asy..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (3,339 samples, 3.03%)</title><rect x="6.1936%" y="789" width="3.0336%" height="15" fill="rgb(248,123,6)" fg:x="6817" fg:w="3339"/><text x="6.4436%" y="799.50">&lt;as..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,339 samples, 3.03%)</title><rect x="6.1936%" y="773" width="3.0336%" height="15" fill="rgb(206,91,31)" fg:x="6817" fg:w="3339"/><text x="6.4436%" y="783.50">&lt;co..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (1,992 samples, 1.81%)</title><rect x="7.4174%" y="757" width="1.8098%" height="15" fill="rgb(211,154,13)" fg:x="8164" fg:w="1992"/><text x="7.6674%" y="767.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,575 samples, 1.43%)</title><rect x="7.7962%" y="741" width="1.4310%" height="15" fill="rgb(225,148,7)" fg:x="8581" fg:w="1575"/><text x="8.0462%" y="751.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (1,018 samples, 0.92%)</title><rect x="8.3023%" y="725" width="0.9249%" height="15" fill="rgb(220,160,43)" fg:x="9138" fg:w="1018"/><text x="8.5523%" y="735.50"></text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (22 samples, 0.02%)</title><rect x="9.2072%" y="709" width="0.0200%" height="15" fill="rgb(213,52,39)" fg:x="10134" fg:w="22"/><text x="9.4572%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (22 samples, 0.02%)</title><rect x="9.2072%" y="693" width="0.0200%" height="15" fill="rgb(243,137,7)" fg:x="10134" fg:w="22"/><text x="9.4572%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (22 samples, 0.02%)</title><rect x="9.2072%" y="677" width="0.0200%" height="15" fill="rgb(230,79,13)" fg:x="10134" fg:w="22"/><text x="9.4572%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (13 samples, 0.01%)</title><rect x="9.2154%" y="661" width="0.0118%" height="15" fill="rgb(247,105,23)" fg:x="10143" fg:w="13"/><text x="9.4654%" y="671.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (88 samples, 0.08%)</title><rect x="9.2326%" y="741" width="0.0800%" height="15" fill="rgb(223,179,41)" fg:x="10162" fg:w="88"/><text x="9.4826%" y="751.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (42 samples, 0.04%)</title><rect x="9.3126%" y="741" width="0.0382%" height="15" fill="rgb(218,9,34)" fg:x="10250" fg:w="42"/><text x="9.5626%" y="751.50"></text></g><g><title>core::str::converts::from_utf8 (726 samples, 0.66%)</title><rect x="11.1806%" y="533" width="0.6596%" height="15" fill="rgb(222,106,8)" fg:x="12306" fg:w="726"/><text x="11.4306%" y="543.50"></text></g><g><title>core::str::validations::run_utf8_validation (670 samples, 0.61%)</title><rect x="11.2314%" y="517" width="0.6087%" height="15" fill="rgb(211,220,0)" fg:x="12362" fg:w="670"/><text x="11.4814%" y="527.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::read_str_data (2,515 samples, 2.28%)</title><rect x="9.6497%" y="549" width="2.2850%" height="15" fill="rgb(229,52,16)" fg:x="10621" fg:w="2515"/><text x="9.8997%" y="559.50">r..</text></g><g><title>rmp_serde::decode::read_bin_data (104 samples, 0.09%)</title><rect x="11.8402%" y="533" width="0.0945%" height="15" fill="rgb(212,155,18)" fg:x="13032" fg:w="104"/><text x="12.0902%" y="543.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as rmp_serde::decode::ReadSlice&gt;::read_slice (104 samples, 0.09%)</title><rect x="11.8402%" y="517" width="0.0945%" height="15" fill="rgb(242,21,14)" fg:x="13032" fg:w="104"/><text x="12.0902%" y="527.50"></text></g><g><title>rmp::decode::RmpRead::read_u8 (67 samples, 0.06%)</title><rect x="11.9383%" y="485" width="0.0609%" height="15" fill="rgb(222,19,48)" fg:x="13140" fg:w="67"/><text x="12.1883%" y="495.50"></text></g><g><title>&lt;T as rmp::decode::RmpRead&gt;::read_exact_buf (67 samples, 0.06%)</title><rect x="11.9383%" y="469" width="0.0609%" height="15" fill="rgb(232,45,27)" fg:x="13140" fg:w="67"/><text x="12.1883%" y="479.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as std::io::Read&gt;::read_exact (67 samples, 0.06%)</title><rect x="11.9383%" y="453" width="0.0609%" height="15" fill="rgb(249,103,42)" fg:x="13140" fg:w="67"/><text x="12.1883%" y="463.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_exact (67 samples, 0.06%)</title><rect x="11.9383%" y="437" width="0.0609%" height="15" fill="rgb(246,81,33)" fg:x="13140" fg:w="67"/><text x="12.1883%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (215 samples, 0.20%)</title><rect x="11.9347%" y="533" width="0.1953%" height="15" fill="rgb(252,33,42)" fg:x="13136" fg:w="215"/><text x="12.1847%" y="543.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker::{{closure}} (211 samples, 0.19%)</title><rect x="11.9383%" y="517" width="0.1917%" height="15" fill="rgb(209,212,41)" fg:x="13140" fg:w="211"/><text x="12.1883%" y="527.50"></text></g><g><title>rmp::decode::read_marker (211 samples, 0.19%)</title><rect x="11.9383%" y="501" width="0.1917%" height="15" fill="rgb(207,154,6)" fg:x="13140" fg:w="211"/><text x="12.1883%" y="511.50"></text></g><g><title>rmp::marker::Marker::from_u8 (144 samples, 0.13%)</title><rect x="11.9992%" y="485" width="0.1308%" height="15" fill="rgb(223,64,47)" fg:x="13207" fg:w="144"/><text x="12.2492%" y="495.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2,866 samples, 2.60%)</title><rect x="9.5279%" y="613" width="2.6039%" height="15" fill="rgb(211,161,38)" fg:x="10487" fg:w="2866"/><text x="9.7779%" y="623.50">&lt;c..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for &amp;str&gt;::deserialize (2,866 samples, 2.60%)</title><rect x="9.5279%" y="597" width="2.6039%" height="15" fill="rgb(219,138,40)" fg:x="10487" fg:w="2866"/><text x="9.7779%" y="607.50">se..</text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_str (2,866 samples, 2.60%)</title><rect x="9.5279%" y="581" width="2.6039%" height="15" fill="rgb(241,228,46)" fg:x="10487" fg:w="2866"/><text x="9.7779%" y="591.50">&lt;&amp;..</text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (2,866 samples, 2.60%)</title><rect x="9.5279%" y="565" width="2.6039%" height="15" fill="rgb(223,209,38)" fg:x="10487" fg:w="2866"/><text x="9.7779%" y="575.50">&lt;&amp;..</text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker (217 samples, 0.20%)</title><rect x="11.9347%" y="549" width="0.1972%" height="15" fill="rgb(236,164,45)" fg:x="13136" fg:w="217"/><text x="12.1847%" y="559.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_key (2,941 samples, 2.67%)</title><rect x="9.5225%" y="661" width="2.6720%" height="15" fill="rgb(231,15,5)" fg:x="10481" fg:w="2941"/><text x="9.7725%" y="671.50">&lt;&amp;..</text></g><g><title>serde::de::MapAccess::next_key (2,941 samples, 2.67%)</title><rect x="9.5225%" y="645" width="2.6720%" height="15" fill="rgb(252,35,15)" fg:x="10481" fg:w="2941"/><text x="9.7725%" y="655.50">se..</text></g><g><title>&lt;rmp_serde::decode::MapAccess&lt;R,C&gt; as serde::de::MapAccess&gt;::next_key_seed (2,941 samples, 2.67%)</title><rect x="9.5225%" y="629" width="2.6720%" height="15" fill="rgb(248,181,18)" fg:x="10481" fg:w="2941"/><text x="9.7725%" y="639.50">&lt;r..</text></g><g><title>core::result::Result&lt;T,E&gt;::map (69 samples, 0.06%)</title><rect x="12.1318%" y="613" width="0.0627%" height="15" fill="rgb(233,39,42)" fg:x="13353" fg:w="69"/><text x="12.3818%" y="623.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_u8 (40 samples, 0.04%)</title><rect x="14.3432%" y="453" width="0.0363%" height="15" fill="rgb(238,110,33)" fg:x="15787" fg:w="40"/><text x="14.5932%" y="463.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;u8&gt; for u64&gt;::from (40 samples, 0.04%)</title><rect x="14.3432%" y="437" width="0.0363%" height="15" fill="rgb(233,195,10)" fg:x="15787" fg:w="40"/><text x="14.5932%" y="447.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_borrowed_str (20 samples, 0.02%)</title><rect x="14.3959%" y="437" width="0.0182%" height="15" fill="rgb(254,105,3)" fg:x="15845" fg:w="20"/><text x="14.6459%" y="447.50"></text></g><g><title>core::str::converts::from_utf8 (147 samples, 0.13%)</title><rect x="14.4141%" y="437" width="0.1336%" height="15" fill="rgb(221,225,9)" fg:x="15865" fg:w="147"/><text x="14.6641%" y="447.50"></text></g><g><title>core::str::validations::run_utf8_validation (132 samples, 0.12%)</title><rect x="14.4277%" y="421" width="0.1199%" height="15" fill="rgb(224,227,45)" fg:x="15880" fg:w="132"/><text x="14.6777%" y="431.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::read_str_data (226 samples, 0.21%)</title><rect x="14.3796%" y="453" width="0.2053%" height="15" fill="rgb(229,198,43)" fg:x="15827" fg:w="226"/><text x="14.6296%" y="463.50"></text></g><g><title>rmp_serde::decode::read_bin_data (41 samples, 0.04%)</title><rect x="14.5476%" y="437" width="0.0373%" height="15" fill="rgb(206,209,35)" fg:x="16012" fg:w="41"/><text x="14.7976%" y="447.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as rmp_serde::decode::ReadSlice&gt;::read_slice (41 samples, 0.04%)</title><rect x="14.5476%" y="421" width="0.0373%" height="15" fill="rgb(245,195,53)" fg:x="16012" fg:w="41"/><text x="14.7976%" y="431.50"></text></g><g><title>rmp::decode::RmpRead::read_u8 (86 samples, 0.08%)</title><rect x="14.5849%" y="389" width="0.0781%" height="15" fill="rgb(240,92,26)" fg:x="16053" fg:w="86"/><text x="14.8349%" y="399.50"></text></g><g><title>&lt;T as rmp::decode::RmpRead&gt;::read_exact_buf (86 samples, 0.08%)</title><rect x="14.5849%" y="373" width="0.0781%" height="15" fill="rgb(207,40,23)" fg:x="16053" fg:w="86"/><text x="14.8349%" y="383.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as std::io::Read&gt;::read_exact (86 samples, 0.08%)</title><rect x="14.5849%" y="357" width="0.0781%" height="15" fill="rgb(223,111,35)" fg:x="16053" fg:w="86"/><text x="14.8349%" y="367.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_exact (86 samples, 0.08%)</title><rect x="14.5849%" y="341" width="0.0781%" height="15" fill="rgb(229,147,28)" fg:x="16053" fg:w="86"/><text x="14.8349%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (135 samples, 0.12%)</title><rect x="14.5849%" y="437" width="0.1227%" height="15" fill="rgb(211,29,28)" fg:x="16053" fg:w="135"/><text x="14.8349%" y="447.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker::{{closure}} (135 samples, 0.12%)</title><rect x="14.5849%" y="421" width="0.1227%" height="15" fill="rgb(228,72,33)" fg:x="16053" fg:w="135"/><text x="14.8349%" y="431.50"></text></g><g><title>rmp::decode::read_marker (135 samples, 0.12%)</title><rect x="14.5849%" y="405" width="0.1227%" height="15" fill="rgb(205,214,31)" fg:x="16053" fg:w="135"/><text x="14.8349%" y="415.50"></text></g><g><title>rmp::marker::Marker::from_u8 (49 samples, 0.04%)</title><rect x="14.6630%" y="389" width="0.0445%" height="15" fill="rgb(224,111,15)" fg:x="16139" fg:w="49"/><text x="14.9130%" y="399.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (655 samples, 0.60%)</title><rect x="14.1233%" y="501" width="0.5951%" height="15" fill="rgb(253,21,26)" fg:x="15545" fg:w="655"/><text x="14.3733%" y="511.50"></text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (655 samples, 0.60%)</title><rect x="14.1233%" y="485" width="0.5951%" height="15" fill="rgb(245,139,43)" fg:x="15545" fg:w="655"/><text x="14.3733%" y="495.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (608 samples, 0.55%)</title><rect x="14.1660%" y="469" width="0.5524%" height="15" fill="rgb(252,170,7)" fg:x="15592" fg:w="608"/><text x="14.4160%" y="479.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker (147 samples, 0.13%)</title><rect x="14.5849%" y="453" width="0.1336%" height="15" fill="rgb(231,118,14)" fg:x="16053" fg:w="147"/><text x="14.8349%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (12 samples, 0.01%)</title><rect x="14.7075%" y="437" width="0.0109%" height="15" fill="rgb(238,83,0)" fg:x="16188" fg:w="12"/><text x="14.9575%" y="447.50"></text></g><g><title>core::mem::replace (12 samples, 0.01%)</title><rect x="14.7075%" y="421" width="0.0109%" height="15" fill="rgb(221,39,39)" fg:x="16188" fg:w="12"/><text x="14.9575%" y="431.50"></text></g><g><title>&lt;&amp;mut A as serde::de::SeqAccess&gt;::next_element (2,315 samples, 2.10%)</title><rect x="13.3111%" y="549" width="2.1033%" height="15" fill="rgb(222,119,46)" fg:x="14651" fg:w="2315"/><text x="13.5611%" y="559.50">&lt;..</text></g><g><title>serde::de::SeqAccess::next_element (2,315 samples, 2.10%)</title><rect x="13.3111%" y="533" width="2.1033%" height="15" fill="rgb(222,165,49)" fg:x="14651" fg:w="2315"/><text x="13.5611%" y="543.50">s..</text></g><g><title>&lt;rmp_serde::decode::SeqAccess&lt;R,C&gt; as serde::de::SeqAccess&gt;::next_element_seed (2,315 samples, 2.10%)</title><rect x="13.3111%" y="517" width="2.1033%" height="15" fill="rgb(219,113,52)" fg:x="14651" fg:w="2315"/><text x="13.5611%" y="527.50">&lt;..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (766 samples, 0.70%)</title><rect x="14.7184%" y="501" width="0.6959%" height="15" fill="rgb(214,7,15)" fg:x="16200" fg:w="766"/><text x="14.9684%" y="511.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (720 samples, 0.65%)</title><rect x="15.4162%" y="549" width="0.6542%" height="15" fill="rgb(235,32,4)" fg:x="16968" fg:w="720"/><text x="15.6662%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (31 samples, 0.03%)</title><rect x="16.0704%" y="533" width="0.0282%" height="15" fill="rgb(238,90,54)" fg:x="17688" fg:w="31"/><text x="16.3204%" y="543.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::push (739 samples, 0.67%)</title><rect x="16.0704%" y="549" width="0.6714%" height="15" fill="rgb(213,208,19)" fg:x="17688" fg:w="739"/><text x="16.3204%" y="559.50"></text></g><g><title>core::ptr::write (708 samples, 0.64%)</title><rect x="16.0985%" y="533" width="0.6433%" height="15" fill="rgb(233,156,4)" fg:x="17719" fg:w="708"/><text x="16.3485%" y="543.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (320 samples, 0.29%)</title><rect x="16.8145%" y="373" width="0.2907%" height="15" fill="rgb(207,194,5)" fg:x="18507" fg:w="320"/><text x="17.0645%" y="383.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_seq (5,058 samples, 4.60%)</title><rect x="12.5189%" y="565" width="4.5954%" height="15" fill="rgb(206,111,30)" fg:x="13779" fg:w="5058"/><text x="12.7689%" y="575.50">&lt;trem..</text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::with_capacity (410 samples, 0.37%)</title><rect x="16.7418%" y="549" width="0.3725%" height="15" fill="rgb(243,70,54)" fg:x="18427" fg:w="410"/><text x="16.9918%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (401 samples, 0.36%)</title><rect x="16.7500%" y="533" width="0.3643%" height="15" fill="rgb(242,28,8)" fg:x="18436" fg:w="401"/><text x="17.0000%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (401 samples, 0.36%)</title><rect x="16.7500%" y="517" width="0.3643%" height="15" fill="rgb(219,106,18)" fg:x="18436" fg:w="401"/><text x="17.0000%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (401 samples, 0.36%)</title><rect x="16.7500%" y="501" width="0.3643%" height="15" fill="rgb(244,222,10)" fg:x="18436" fg:w="401"/><text x="17.0000%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (401 samples, 0.36%)</title><rect x="16.7500%" y="485" width="0.3643%" height="15" fill="rgb(236,179,52)" fg:x="18436" fg:w="401"/><text x="17.0000%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (392 samples, 0.36%)</title><rect x="16.7581%" y="469" width="0.3561%" height="15" fill="rgb(213,23,39)" fg:x="18445" fg:w="392"/><text x="17.0081%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (392 samples, 0.36%)</title><rect x="16.7581%" y="453" width="0.3561%" height="15" fill="rgb(238,48,10)" fg:x="18445" fg:w="392"/><text x="17.0081%" y="463.50"></text></g><g><title>alloc::alloc::alloc (391 samples, 0.36%)</title><rect x="16.7590%" y="437" width="0.3552%" height="15" fill="rgb(251,196,23)" fg:x="18446" fg:w="391"/><text x="17.0090%" y="447.50"></text></g><g><title>__rg_alloc (391 samples, 0.36%)</title><rect x="16.7590%" y="421" width="0.3552%" height="15" fill="rgb(250,152,24)" fg:x="18446" fg:w="391"/><text x="17.0090%" y="431.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (391 samples, 0.36%)</title><rect x="16.7590%" y="405" width="0.3552%" height="15" fill="rgb(209,150,17)" fg:x="18446" fg:w="391"/><text x="17.0090%" y="415.50"></text></g><g><title>sn_rust_alloc (391 samples, 0.36%)</title><rect x="16.7590%" y="389" width="0.3552%" height="15" fill="rgb(234,202,34)" fg:x="18446" fg:w="391"/><text x="17.0090%" y="399.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_borrowed_str (20 samples, 0.02%)</title><rect x="17.1861%" y="549" width="0.0182%" height="15" fill="rgb(253,148,53)" fg:x="18916" fg:w="20"/><text x="17.4361%" y="559.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (16 samples, 0.01%)</title><rect x="17.7730%" y="517" width="0.0145%" height="15" fill="rgb(218,129,16)" fg:x="19562" fg:w="16"/><text x="18.0230%" y="527.50"></text></g><g><title>core::str::converts::from_utf8 (658 samples, 0.60%)</title><rect x="17.2042%" y="549" width="0.5978%" height="15" fill="rgb(216,85,19)" fg:x="18936" fg:w="658"/><text x="17.4542%" y="559.50"></text></g><g><title>core::str::validations::run_utf8_validation (594 samples, 0.54%)</title><rect x="17.2624%" y="533" width="0.5397%" height="15" fill="rgb(235,228,7)" fg:x="19000" fg:w="594"/><text x="17.5124%" y="543.50"></text></g><g><title>core::str::validations::contains_nonascii (16 samples, 0.01%)</title><rect x="17.7875%" y="517" width="0.0145%" height="15" fill="rgb(245,175,0)" fg:x="19578" fg:w="16"/><text x="18.0375%" y="527.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::read_str_data (812 samples, 0.74%)</title><rect x="17.1188%" y="565" width="0.7377%" height="15" fill="rgb(208,168,36)" fg:x="18842" fg:w="812"/><text x="17.3688%" y="575.50"></text></g><g><title>rmp_serde::decode::read_bin_data (60 samples, 0.05%)</title><rect x="17.8020%" y="549" width="0.0545%" height="15" fill="rgb(246,171,24)" fg:x="19594" fg:w="60"/><text x="18.0520%" y="559.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as rmp_serde::decode::ReadSlice&gt;::read_slice (60 samples, 0.05%)</title><rect x="17.8020%" y="533" width="0.0545%" height="15" fill="rgb(215,142,24)" fg:x="19594" fg:w="60"/><text x="18.0520%" y="543.50"></text></g><g><title>rmp::decode::RmpRead::read_u8 (84 samples, 0.08%)</title><rect x="17.8584%" y="501" width="0.0763%" height="15" fill="rgb(250,187,7)" fg:x="19656" fg:w="84"/><text x="18.1084%" y="511.50"></text></g><g><title>&lt;T as rmp::decode::RmpRead&gt;::read_exact_buf (84 samples, 0.08%)</title><rect x="17.8584%" y="485" width="0.0763%" height="15" fill="rgb(228,66,33)" fg:x="19656" fg:w="84"/><text x="18.1084%" y="495.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as std::io::Read&gt;::read_exact (84 samples, 0.08%)</title><rect x="17.8584%" y="469" width="0.0763%" height="15" fill="rgb(234,215,21)" fg:x="19656" fg:w="84"/><text x="18.1084%" y="479.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_exact (84 samples, 0.08%)</title><rect x="17.8584%" y="453" width="0.0763%" height="15" fill="rgb(222,191,20)" fg:x="19656" fg:w="84"/><text x="18.1084%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (43 samples, 0.04%)</title><rect x="17.8956%" y="437" width="0.0391%" height="15" fill="rgb(245,79,54)" fg:x="19697" fg:w="43"/><text x="18.1456%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (43 samples, 0.04%)</title><rect x="17.8956%" y="421" width="0.0391%" height="15" fill="rgb(240,10,37)" fg:x="19697" fg:w="43"/><text x="18.1456%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (43 samples, 0.04%)</title><rect x="17.8956%" y="405" width="0.0391%" height="15" fill="rgb(214,192,32)" fg:x="19697" fg:w="43"/><text x="18.1456%" y="415.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (43 samples, 0.04%)</title><rect x="17.8956%" y="389" width="0.0391%" height="15" fill="rgb(209,36,54)" fg:x="19697" fg:w="43"/><text x="18.1456%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (43 samples, 0.04%)</title><rect x="17.8956%" y="373" width="0.0391%" height="15" fill="rgb(220,10,11)" fg:x="19697" fg:w="43"/><text x="18.1456%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (42 samples, 0.04%)</title><rect x="17.8965%" y="357" width="0.0382%" height="15" fill="rgb(221,106,17)" fg:x="19698" fg:w="42"/><text x="18.1465%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (42 samples, 0.04%)</title><rect x="17.8965%" y="341" width="0.0382%" height="15" fill="rgb(251,142,44)" fg:x="19698" fg:w="42"/><text x="18.1465%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (161 samples, 0.15%)</title><rect x="17.8566%" y="549" width="0.1463%" height="15" fill="rgb(238,13,15)" fg:x="19654" fg:w="161"/><text x="18.1066%" y="559.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker::{{closure}} (159 samples, 0.14%)</title><rect x="17.8584%" y="533" width="0.1445%" height="15" fill="rgb(208,107,27)" fg:x="19656" fg:w="159"/><text x="18.1084%" y="543.50"></text></g><g><title>rmp::decode::read_marker (159 samples, 0.14%)</title><rect x="17.8584%" y="517" width="0.1445%" height="15" fill="rgb(205,136,37)" fg:x="19656" fg:w="159"/><text x="18.1084%" y="527.50"></text></g><g><title>rmp::marker::Marker::from_u8 (75 samples, 0.07%)</title><rect x="17.9347%" y="501" width="0.0681%" height="15" fill="rgb(250,205,27)" fg:x="19740" fg:w="75"/><text x="18.1847%" y="511.50"></text></g><g><title>core::ptr::read (36 samples, 0.03%)</title><rect x="18.0028%" y="517" width="0.0327%" height="15" fill="rgb(210,80,43)" fg:x="19815" fg:w="36"/><text x="18.2528%" y="527.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker (198 samples, 0.18%)</title><rect x="17.8566%" y="565" width="0.1799%" height="15" fill="rgb(247,160,36)" fg:x="19654" fg:w="198"/><text x="18.1066%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (37 samples, 0.03%)</title><rect x="18.0028%" y="549" width="0.0336%" height="15" fill="rgb(234,13,49)" fg:x="19815" fg:w="37"/><text x="18.2528%" y="559.50"></text></g><g><title>core::mem::replace (37 samples, 0.03%)</title><rect x="18.0028%" y="533" width="0.0336%" height="15" fill="rgb(234,122,0)" fg:x="19815" fg:w="37"/><text x="18.2528%" y="543.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_value (6,449 samples, 5.86%)</title><rect x="12.1945%" y="661" width="5.8592%" height="15" fill="rgb(207,146,38)" fg:x="13422" fg:w="6449"/><text x="12.4445%" y="671.50">&lt;&amp;mut A..</text></g><g><title>serde::de::MapAccess::next_value (6,449 samples, 5.86%)</title><rect x="12.1945%" y="645" width="5.8592%" height="15" fill="rgb(207,177,25)" fg:x="13422" fg:w="6449"/><text x="12.4445%" y="655.50">serde::..</text></g><g><title>&lt;rmp_serde::decode::MapAccess&lt;R,C&gt; as serde::de::MapAccess&gt;::next_value_seed (6,449 samples, 5.86%)</title><rect x="12.1945%" y="629" width="5.8592%" height="15" fill="rgb(211,178,42)" fg:x="13422" fg:w="6449"/><text x="12.4445%" y="639.50">&lt;rmp_se..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6,449 samples, 5.86%)</title><rect x="12.1945%" y="613" width="5.8592%" height="15" fill="rgb(230,69,54)" fg:x="13422" fg:w="6449"/><text x="12.4445%" y="623.50">&lt;core::..</text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (6,449 samples, 5.86%)</title><rect x="12.1945%" y="597" width="5.8592%" height="15" fill="rgb(214,135,41)" fg:x="13422" fg:w="6449"/><text x="12.4445%" y="607.50">tremor_..</text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (6,449 samples, 5.86%)</title><rect x="12.1945%" y="581" width="5.8592%" height="15" fill="rgb(237,67,25)" fg:x="13422" fg:w="6449"/><text x="12.4445%" y="591.50">&lt;&amp;mut r..</text></g><g><title>rmp_serde::decode::read_u8 (12 samples, 0.01%)</title><rect x="18.0428%" y="565" width="0.0109%" height="15" fill="rgb(222,189,50)" fg:x="19859" fg:w="12"/><text x="18.2928%" y="575.50"></text></g><g><title>byteorder::io::ReadBytesExt::read_u8 (12 samples, 0.01%)</title><rect x="18.0428%" y="549" width="0.0109%" height="15" fill="rgb(245,148,34)" fg:x="19859" fg:w="12"/><text x="18.2928%" y="559.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as std::io::Read&gt;::read_exact (12 samples, 0.01%)</title><rect x="18.0428%" y="533" width="0.0109%" height="15" fill="rgb(222,29,6)" fg:x="19859" fg:w="12"/><text x="18.2928%" y="543.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_exact (12 samples, 0.01%)</title><rect x="18.0428%" y="517" width="0.0109%" height="15" fill="rgb(221,189,43)" fg:x="19859" fg:w="12"/><text x="18.2928%" y="527.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (491 samples, 0.45%)</title><rect x="18.0573%" y="661" width="0.4461%" height="15" fill="rgb(207,36,27)" fg:x="19875" fg:w="491"/><text x="18.3073%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (34 samples, 0.03%)</title><rect x="20.9638%" y="517" width="0.0309%" height="15" fill="rgb(217,90,24)" fg:x="23074" fg:w="34"/><text x="21.2138%" y="527.50"></text></g><g><title>&lt;byteorder::LittleEndian as byteorder::ByteOrder&gt;::read_u32 (22 samples, 0.02%)</title><rect x="21.1273%" y="453" width="0.0200%" height="15" fill="rgb(224,66,35)" fg:x="23254" fg:w="22"/><text x="21.3773%" y="463.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (22 samples, 0.02%)</title><rect x="21.1273%" y="437" width="0.0200%" height="15" fill="rgb(221,13,50)" fg:x="23254" fg:w="22"/><text x="21.3773%" y="447.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (22 samples, 0.02%)</title><rect x="21.1273%" y="421" width="0.0200%" height="15" fill="rgb(236,68,49)" fg:x="23254" fg:w="22"/><text x="21.3773%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (22 samples, 0.02%)</title><rect x="21.1273%" y="405" width="0.0200%" height="15" fill="rgb(229,146,28)" fg:x="23254" fg:w="22"/><text x="21.3773%" y="415.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (22 samples, 0.02%)</title><rect x="21.1273%" y="389" width="0.0200%" height="15" fill="rgb(225,31,38)" fg:x="23254" fg:w="22"/><text x="21.3773%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 0.04%)</title><rect x="21.1473%" y="453" width="0.0418%" height="15" fill="rgb(250,208,3)" fg:x="23276" fg:w="46"/><text x="21.3973%" y="463.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (15 samples, 0.01%)</title><rect x="21.1755%" y="437" width="0.0136%" height="15" fill="rgb(246,54,23)" fg:x="23307" fg:w="15"/><text x="21.4255%" y="447.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (15 samples, 0.01%)</title><rect x="21.1755%" y="421" width="0.0136%" height="15" fill="rgb(243,76,11)" fg:x="23307" fg:w="15"/><text x="21.4255%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (15 samples, 0.01%)</title><rect x="21.1973%" y="437" width="0.0136%" height="15" fill="rgb(245,21,50)" fg:x="23331" fg:w="15"/><text x="21.4473%" y="447.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (42 samples, 0.04%)</title><rect x="21.1891%" y="453" width="0.0382%" height="15" fill="rgb(228,9,43)" fg:x="23322" fg:w="42"/><text x="21.4391%" y="463.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (18 samples, 0.02%)</title><rect x="21.2109%" y="437" width="0.0164%" height="15" fill="rgb(208,100,47)" fg:x="23346" fg:w="18"/><text x="21.4609%" y="447.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (238 samples, 0.22%)</title><rect x="21.0283%" y="501" width="0.2162%" height="15" fill="rgb(232,26,8)" fg:x="23145" fg:w="238"/><text x="21.2783%" y="511.50"></text></g><g><title>fxhash::write (238 samples, 0.22%)</title><rect x="21.0283%" y="485" width="0.2162%" height="15" fill="rgb(216,166,38)" fg:x="23145" fg:w="238"/><text x="21.2783%" y="495.50"></text></g><g><title>fxhash::write64 (238 samples, 0.22%)</title><rect x="21.0283%" y="469" width="0.2162%" height="15" fill="rgb(251,202,51)" fg:x="23145" fg:w="238"/><text x="21.2783%" y="479.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (19 samples, 0.02%)</title><rect x="21.2273%" y="453" width="0.0173%" height="15" fill="rgb(254,216,34)" fg:x="23364" fg:w="19"/><text x="21.4773%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (19 samples, 0.02%)</title><rect x="21.2273%" y="437" width="0.0173%" height="15" fill="rgb(251,32,27)" fg:x="23364" fg:w="19"/><text x="21.4773%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (19 samples, 0.02%)</title><rect x="21.2273%" y="421" width="0.0173%" height="15" fill="rgb(208,127,28)" fg:x="23364" fg:w="19"/><text x="21.4773%" y="431.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (19 samples, 0.02%)</title><rect x="21.2273%" y="405" width="0.0173%" height="15" fill="rgb(224,137,22)" fg:x="23364" fg:w="19"/><text x="21.4773%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (19 samples, 0.02%)</title><rect x="21.2273%" y="389" width="0.0173%" height="15" fill="rgb(254,70,32)" fg:x="23364" fg:w="19"/><text x="21.4773%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (19 samples, 0.02%)</title><rect x="21.2273%" y="373" width="0.0173%" height="15" fill="rgb(229,75,37)" fg:x="23364" fg:w="19"/><text x="21.4773%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (19 samples, 0.02%)</title><rect x="21.2273%" y="357" width="0.0173%" height="15" fill="rgb(252,64,23)" fg:x="23364" fg:w="19"/><text x="21.4773%" y="367.50"></text></g><g><title>&lt;usize as core::ops::bit::BitXor&gt;::bitxor (18 samples, 0.02%)</title><rect x="21.2582%" y="469" width="0.0164%" height="15" fill="rgb(232,162,48)" fg:x="23398" fg:w="18"/><text x="21.5082%" y="479.50"></text></g><g><title>hashbrown::map::make_insert_hash (414 samples, 0.38%)</title><rect x="20.9075%" y="565" width="0.3761%" height="15" fill="rgb(246,160,12)" fg:x="23012" fg:w="414"/><text x="21.1575%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (387 samples, 0.35%)</title><rect x="20.9320%" y="549" width="0.3516%" height="15" fill="rgb(247,166,0)" fg:x="23039" fg:w="387"/><text x="21.1820%" y="559.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::hash::Hash&gt;::hash (387 samples, 0.35%)</title><rect x="20.9320%" y="533" width="0.3516%" height="15" fill="rgb(249,219,21)" fg:x="23039" fg:w="387"/><text x="21.1820%" y="543.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (318 samples, 0.29%)</title><rect x="20.9947%" y="517" width="0.2889%" height="15" fill="rgb(205,209,3)" fg:x="23108" fg:w="318"/><text x="21.2447%" y="527.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (43 samples, 0.04%)</title><rect x="21.2445%" y="501" width="0.0391%" height="15" fill="rgb(243,44,1)" fg:x="23383" fg:w="43"/><text x="21.4945%" y="511.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (43 samples, 0.04%)</title><rect x="21.2445%" y="485" width="0.0391%" height="15" fill="rgb(206,159,16)" fg:x="23383" fg:w="43"/><text x="21.4945%" y="495.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (12 samples, 0.01%)</title><rect x="21.3054%" y="501" width="0.0109%" height="15" fill="rgb(244,77,30)" fg:x="23450" fg:w="12"/><text x="21.5554%" y="511.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (12 samples, 0.01%)</title><rect x="21.3054%" y="485" width="0.0109%" height="15" fill="rgb(218,69,12)" fg:x="23450" fg:w="12"/><text x="21.5554%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (15 samples, 0.01%)</title><rect x="21.3054%" y="517" width="0.0136%" height="15" fill="rgb(212,87,7)" fg:x="23450" fg:w="15"/><text x="21.5554%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (85 samples, 0.08%)</title><rect x="21.3190%" y="517" width="0.0772%" height="15" fill="rgb(245,114,25)" fg:x="23465" fg:w="85"/><text x="21.5690%" y="527.50"></text></g><g><title>hashbrown::raw::inner::h2 (17 samples, 0.02%)</title><rect x="21.3963%" y="517" width="0.0154%" height="15" fill="rgb(210,61,42)" fg:x="23550" fg:w="17"/><text x="21.6463%" y="527.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (14 samples, 0.01%)</title><rect x="21.4117%" y="517" width="0.0127%" height="15" fill="rgb(211,52,33)" fg:x="23567" fg:w="14"/><text x="21.6617%" y="527.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (14 samples, 0.01%)</title><rect x="21.4117%" y="501" width="0.0127%" height="15" fill="rgb(234,58,33)" fg:x="23567" fg:w="14"/><text x="21.6617%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.01%)</title><rect x="21.4117%" y="485" width="0.0127%" height="15" fill="rgb(220,115,36)" fg:x="23567" fg:w="14"/><text x="21.6617%" y="495.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (28 samples, 0.03%)</title><rect x="21.4244%" y="517" width="0.0254%" height="15" fill="rgb(243,153,54)" fg:x="23581" fg:w="28"/><text x="21.6744%" y="527.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (28 samples, 0.03%)</title><rect x="21.4244%" y="501" width="0.0254%" height="15" fill="rgb(251,47,18)" fg:x="23581" fg:w="28"/><text x="21.6744%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get_mut (219 samples, 0.20%)</title><rect x="21.2836%" y="565" width="0.1990%" height="15" fill="rgb(242,102,42)" fg:x="23426" fg:w="219"/><text x="21.5336%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (219 samples, 0.20%)</title><rect x="21.2836%" y="549" width="0.1990%" height="15" fill="rgb(234,31,38)" fg:x="23426" fg:w="219"/><text x="21.5336%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (219 samples, 0.20%)</title><rect x="21.2836%" y="533" width="0.1990%" height="15" fill="rgb(221,117,51)" fg:x="23426" fg:w="219"/><text x="21.5336%" y="543.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty (36 samples, 0.03%)</title><rect x="21.4499%" y="517" width="0.0327%" height="15" fill="rgb(212,20,18)" fg:x="23609" fg:w="36"/><text x="21.6999%" y="527.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (36 samples, 0.03%)</title><rect x="21.4499%" y="501" width="0.0327%" height="15" fill="rgb(245,133,36)" fg:x="23609" fg:w="36"/><text x="21.6999%" y="511.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (36 samples, 0.03%)</title><rect x="21.4499%" y="485" width="0.0327%" height="15" fill="rgb(212,6,19)" fg:x="23609" fg:w="36"/><text x="21.6999%" y="495.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::write (411 samples, 0.37%)</title><rect x="21.5262%" y="549" width="0.3734%" height="15" fill="rgb(218,1,36)" fg:x="23693" fg:w="411"/><text x="21.7762%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (411 samples, 0.37%)</title><rect x="21.5262%" y="533" width="0.3734%" height="15" fill="rgb(246,84,54)" fg:x="23693" fg:w="411"/><text x="21.7762%" y="543.50"></text></g><g><title>core::ptr::write (411 samples, 0.37%)</title><rect x="21.5262%" y="517" width="0.3734%" height="15" fill="rgb(242,110,6)" fg:x="23693" fg:w="411"/><text x="21.7762%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::bucket (21 samples, 0.02%)</title><rect x="21.8996%" y="549" width="0.0191%" height="15" fill="rgb(214,47,5)" fg:x="24104" fg:w="21"/><text x="22.1496%" y="559.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::from_base_index (21 samples, 0.02%)</title><rect x="21.8996%" y="533" width="0.0191%" height="15" fill="rgb(218,159,25)" fg:x="24104" fg:w="21"/><text x="22.1496%" y="543.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (20 samples, 0.02%)</title><rect x="21.9005%" y="517" width="0.0182%" height="15" fill="rgb(215,211,28)" fg:x="24105" fg:w="20"/><text x="22.1505%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (40 samples, 0.04%)</title><rect x="21.9759%" y="533" width="0.0363%" height="15" fill="rgb(238,59,32)" fg:x="24188" fg:w="40"/><text x="22.2259%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_insert_slot (139 samples, 0.13%)</title><rect x="21.9187%" y="549" width="0.1263%" height="15" fill="rgb(226,82,3)" fg:x="24125" fg:w="139"/><text x="22.1687%" y="559.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (18 samples, 0.02%)</title><rect x="22.0286%" y="533" width="0.0164%" height="15" fill="rgb(240,164,32)" fg:x="24246" fg:w="18"/><text x="22.2786%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (18 samples, 0.02%)</title><rect x="22.0286%" y="517" width="0.0164%" height="15" fill="rgb(232,46,7)" fg:x="24246" fg:w="18"/><text x="22.2786%" y="527.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::insert (3,996 samples, 3.63%)</title><rect x="18.5034%" y="661" width="3.6305%" height="15" fill="rgb(229,129,53)" fg:x="20366" fg:w="3996"/><text x="18.7534%" y="671.50">abi_..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (2,933 samples, 2.66%)</title><rect x="19.4692%" y="645" width="2.6648%" height="15" fill="rgb(234,188,29)" fg:x="21429" fg:w="2933"/><text x="19.7192%" y="655.50">ab..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (2,384 samples, 2.17%)</title><rect x="19.9680%" y="629" width="2.1660%" height="15" fill="rgb(246,141,4)" fg:x="21978" fg:w="2384"/><text x="20.2180%" y="639.50">a..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (2,384 samples, 2.17%)</title><rect x="19.9680%" y="613" width="2.1660%" height="15" fill="rgb(229,23,39)" fg:x="21978" fg:w="2384"/><text x="20.2180%" y="623.50">a..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem::{{closure}} (2,097 samples, 1.91%)</title><rect x="20.2288%" y="597" width="1.9052%" height="15" fill="rgb(206,12,3)" fg:x="22265" fg:w="2097"/><text x="20.4788%" y="607.50">a..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,541 samples, 1.40%)</title><rect x="20.7339%" y="581" width="1.4001%" height="15" fill="rgb(252,226,20)" fg:x="22821" fg:w="1541"/><text x="20.9839%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (717 samples, 0.65%)</title><rect x="21.4826%" y="565" width="0.6514%" height="15" fill="rgb(216,123,35)" fg:x="23645" fg:w="717"/><text x="21.7326%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::record_item_insert_at (98 samples, 0.09%)</title><rect x="22.0450%" y="549" width="0.0890%" height="15" fill="rgb(212,68,40)" fg:x="24264" fg:w="98"/><text x="22.2950%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl_h2 (29 samples, 0.03%)</title><rect x="22.1076%" y="533" width="0.0263%" height="15" fill="rgb(254,125,32)" fg:x="24333" fg:w="29"/><text x="22.3576%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl (29 samples, 0.03%)</title><rect x="22.1076%" y="517" width="0.0263%" height="15" fill="rgb(253,97,22)" fg:x="24333" fg:w="29"/><text x="22.3576%" y="527.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (80 samples, 0.07%)</title><rect x="22.1658%" y="485" width="0.0727%" height="15" fill="rgb(241,101,14)" fg:x="24397" fg:w="80"/><text x="22.4158%" y="495.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (107 samples, 0.10%)</title><rect x="22.1422%" y="645" width="0.0972%" height="15" fill="rgb(238,103,29)" fg:x="24371" fg:w="107"/><text x="22.3922%" y="655.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (107 samples, 0.10%)</title><rect x="22.1422%" y="629" width="0.0972%" height="15" fill="rgb(233,195,47)" fg:x="24371" fg:w="107"/><text x="22.3922%" y="639.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (102 samples, 0.09%)</title><rect x="22.1467%" y="613" width="0.0927%" height="15" fill="rgb(246,218,30)" fg:x="24376" fg:w="102"/><text x="22.3967%" y="623.50"></text></g><g><title>alloc::alloc::exchange_malloc (97 samples, 0.09%)</title><rect x="22.1513%" y="597" width="0.0881%" height="15" fill="rgb(219,145,47)" fg:x="24381" fg:w="97"/><text x="22.4013%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (96 samples, 0.09%)</title><rect x="22.1522%" y="581" width="0.0872%" height="15" fill="rgb(243,12,26)" fg:x="24382" fg:w="96"/><text x="22.4022%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (96 samples, 0.09%)</title><rect x="22.1522%" y="565" width="0.0872%" height="15" fill="rgb(214,87,16)" fg:x="24382" fg:w="96"/><text x="22.4022%" y="575.50"></text></g><g><title>alloc::alloc::alloc (96 samples, 0.09%)</title><rect x="22.1522%" y="549" width="0.0872%" height="15" fill="rgb(208,99,42)" fg:x="24382" fg:w="96"/><text x="22.4022%" y="559.50"></text></g><g><title>__rg_alloc (96 samples, 0.09%)</title><rect x="22.1522%" y="533" width="0.0872%" height="15" fill="rgb(253,99,2)" fg:x="24382" fg:w="96"/><text x="22.4022%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (96 samples, 0.09%)</title><rect x="22.1522%" y="517" width="0.0872%" height="15" fill="rgb(220,168,23)" fg:x="24382" fg:w="96"/><text x="22.4022%" y="527.50"></text></g><g><title>sn_rust_alloc (96 samples, 0.09%)</title><rect x="22.1522%" y="501" width="0.0872%" height="15" fill="rgb(242,38,24)" fg:x="24382" fg:w="96"/><text x="22.4022%" y="511.50"></text></g><g><title>core::mem::swap (274 samples, 0.25%)</title><rect x="22.2666%" y="501" width="0.2489%" height="15" fill="rgb(225,182,9)" fg:x="24508" fg:w="274"/><text x="22.5166%" y="511.50"></text></g><g><title>core::mem::swap_simple (274 samples, 0.25%)</title><rect x="22.2666%" y="485" width="0.2489%" height="15" fill="rgb(243,178,37)" fg:x="24508" fg:w="274"/><text x="22.5166%" y="495.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (37 samples, 0.03%)</title><rect x="22.5310%" y="469" width="0.0336%" height="15" fill="rgb(232,139,19)" fg:x="24799" fg:w="37"/><text x="22.7810%" y="479.50"></text></g><g><title>core::intrinsics::write_bytes (37 samples, 0.03%)</title><rect x="22.5310%" y="453" width="0.0336%" height="15" fill="rgb(225,201,24)" fg:x="24799" fg:w="37"/><text x="22.7810%" y="463.50"></text></g><g><title>[libc-2.31.so] (33 samples, 0.03%)</title><rect x="22.5347%" y="437" width="0.0300%" height="15" fill="rgb(221,47,46)" fg:x="24803" fg:w="33"/><text x="22.7847%" y="447.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (1,312 samples, 1.19%)</title><rect x="22.7227%" y="357" width="1.1920%" height="15" fill="rgb(249,23,13)" fg:x="25010" fg:w="1312"/><text x="22.9727%" y="367.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (16 samples, 0.01%)</title><rect x="23.9002%" y="341" width="0.0145%" height="15" fill="rgb(219,9,5)" fg:x="26306" fg:w="16"/><text x="24.1502%" y="351.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (35 samples, 0.03%)</title><rect x="23.9147%" y="357" width="0.0318%" height="15" fill="rgb(254,171,16)" fg:x="26322" fg:w="35"/><text x="24.1647%" y="367.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (1,523 samples, 1.38%)</title><rect x="22.5728%" y="453" width="1.3837%" height="15" fill="rgb(230,171,20)" fg:x="24845" fg:w="1523"/><text x="22.8228%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (1,523 samples, 1.38%)</title><rect x="22.5728%" y="437" width="1.3837%" height="15" fill="rgb(210,71,41)" fg:x="24845" fg:w="1523"/><text x="22.8228%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1,523 samples, 1.38%)</title><rect x="22.5728%" y="421" width="1.3837%" height="15" fill="rgb(206,173,20)" fg:x="24845" fg:w="1523"/><text x="22.8228%" y="431.50"></text></g><g><title>__rg_alloc (1,523 samples, 1.38%)</title><rect x="22.5728%" y="405" width="1.3837%" height="15" fill="rgb(233,88,34)" fg:x="24845" fg:w="1523"/><text x="22.8228%" y="415.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1,523 samples, 1.38%)</title><rect x="22.5728%" y="389" width="1.3837%" height="15" fill="rgb(223,209,46)" fg:x="24845" fg:w="1523"/><text x="22.8228%" y="399.50"></text></g><g><title>sn_rust_alloc (1,522 samples, 1.38%)</title><rect x="22.5737%" y="373" width="1.3828%" height="15" fill="rgb(250,43,18)" fg:x="24846" fg:w="1522"/><text x="22.8237%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (1,538 samples, 1.40%)</title><rect x="22.5646%" y="469" width="1.3973%" height="15" fill="rgb(208,13,10)" fg:x="24836" fg:w="1538"/><text x="22.8146%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (1,613 samples, 1.47%)</title><rect x="22.5156%" y="501" width="1.4655%" height="15" fill="rgb(212,200,36)" fg:x="24782" fg:w="1613"/><text x="22.7656%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (1,607 samples, 1.46%)</title><rect x="22.5210%" y="485" width="1.4600%" height="15" fill="rgb(225,90,30)" fg:x="24788" fg:w="1607"/><text x="22.7710%" y="495.50"></text></g><g><title>hashbrown::raw::inner::capacity_to_buckets (21 samples, 0.02%)</title><rect x="23.9620%" y="469" width="0.0191%" height="15" fill="rgb(236,182,39)" fg:x="26374" fg:w="21"/><text x="24.2120%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (1,905 samples, 1.73%)</title><rect x="22.2521%" y="517" width="1.7308%" height="15" fill="rgb(212,144,35)" fg:x="24492" fg:w="1905"/><text x="22.5021%" y="527.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (2,037 samples, 1.85%)</title><rect x="22.1340%" y="661" width="1.8507%" height="15" fill="rgb(228,63,44)" fg:x="24362" fg:w="2037"/><text x="22.3840%" y="671.50">a..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (1,921 samples, 1.75%)</title><rect x="22.2394%" y="645" width="1.7453%" height="15" fill="rgb(228,109,6)" fg:x="24478" fg:w="1921"/><text x="22.4894%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (1,921 samples, 1.75%)</title><rect x="22.2394%" y="629" width="1.7453%" height="15" fill="rgb(238,117,24)" fg:x="24478" fg:w="1921"/><text x="22.4894%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (1,921 samples, 1.75%)</title><rect x="22.2394%" y="613" width="1.7453%" height="15" fill="rgb(242,26,26)" fg:x="24478" fg:w="1921"/><text x="22.4894%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (1,921 samples, 1.75%)</title><rect x="22.2394%" y="597" width="1.7453%" height="15" fill="rgb(221,92,48)" fg:x="24478" fg:w="1921"/><text x="22.4894%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (1,921 samples, 1.75%)</title><rect x="22.2394%" y="581" width="1.7453%" height="15" fill="rgb(209,209,32)" fg:x="24478" fg:w="1921"/><text x="22.4894%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (1,921 samples, 1.75%)</title><rect x="22.2394%" y="565" width="1.7453%" height="15" fill="rgb(221,70,22)" fg:x="24478" fg:w="1921"/><text x="22.4894%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (1,916 samples, 1.74%)</title><rect x="22.2439%" y="549" width="1.7408%" height="15" fill="rgb(248,145,5)" fg:x="24483" fg:w="1916"/><text x="22.4939%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (1,912 samples, 1.74%)</title><rect x="22.2476%" y="533" width="1.7371%" height="15" fill="rgb(226,116,26)" fg:x="24487" fg:w="1912"/><text x="22.4976%" y="543.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_map (16,100 samples, 14.63%)</title><rect x="9.3726%" y="677" width="14.6276%" height="15" fill="rgb(244,5,17)" fg:x="10316" fg:w="16100"/><text x="9.6226%" y="687.50">&lt;tremor_value::serde::..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_value::value::Value&gt;&gt; (17 samples, 0.02%)</title><rect x="23.9847%" y="661" width="0.0154%" height="15" fill="rgb(252,159,33)" fg:x="26399" fg:w="17"/><text x="24.2347%" y="671.50"></text></g><g><title>&lt;tremor_runtime::codec::msgpack::MsgPack as tremor_runtime::codec::Codec&gt;::decode (16,345 samples, 14.85%)</title><rect x="9.2326%" y="757" width="14.8502%" height="15" fill="rgb(206,71,0)" fg:x="10162" fg:w="16345"/><text x="9.4826%" y="767.50">&lt;tremor_runtime::codec:..</text></g><g><title>rmp_serde::decode::from_slice (16,215 samples, 14.73%)</title><rect x="9.3508%" y="741" width="14.7321%" height="15" fill="rgb(233,118,54)" fg:x="10292" fg:w="16215"/><text x="9.6008%" y="751.50">rmp_serde::decode::fro..</text></g><g><title>rmp_serde::decode::from_read_ref (16,215 samples, 14.73%)</title><rect x="9.3508%" y="725" width="14.7321%" height="15" fill="rgb(234,83,48)" fg:x="10292" fg:w="16215"/><text x="9.6008%" y="735.50">rmp_serde::decode::fro..</text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (16,208 samples, 14.73%)</title><rect x="9.3571%" y="709" width="14.7257%" height="15" fill="rgb(228,3,54)" fg:x="10299" fg:w="16208"/><text x="9.6071%" y="719.50">tremor_value::serde::v..</text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (16,208 samples, 14.73%)</title><rect x="9.3571%" y="693" width="14.7257%" height="15" fill="rgb(226,155,13)" fg:x="10299" fg:w="16208"/><text x="9.6071%" y="703.50">&lt;&amp;mut rmp_serde::decod..</text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker (91 samples, 0.08%)</title><rect x="24.0001%" y="677" width="0.0827%" height="15" fill="rgb(241,28,37)" fg:x="26416" fg:w="91"/><text x="24.2501%" y="687.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (80 samples, 0.07%)</title><rect x="24.0101%" y="661" width="0.0727%" height="15" fill="rgb(233,93,10)" fg:x="26427" fg:w="80"/><text x="24.2601%" y="671.50"></text></g><g><title>core::mem::replace (80 samples, 0.07%)</title><rect x="24.0101%" y="645" width="0.0727%" height="15" fill="rgb(225,113,19)" fg:x="26427" fg:w="80"/><text x="24.2601%" y="655.50"></text></g><g><title>core::ptr::read (80 samples, 0.07%)</title><rect x="24.0101%" y="629" width="0.0727%" height="15" fill="rgb(241,2,18)" fg:x="26427" fg:w="80"/><text x="24.2601%" y="639.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (105 samples, 0.10%)</title><rect x="24.1619%" y="645" width="0.0954%" height="15" fill="rgb(228,207,21)" fg:x="26594" fg:w="105"/><text x="24.4119%" y="655.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (105 samples, 0.10%)</title><rect x="24.1619%" y="629" width="0.0954%" height="15" fill="rgb(213,211,35)" fg:x="26594" fg:w="105"/><text x="24.4119%" y="639.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (99 samples, 0.09%)</title><rect x="24.1673%" y="613" width="0.0899%" height="15" fill="rgb(209,83,10)" fg:x="26600" fg:w="99"/><text x="24.4173%" y="623.50"></text></g><g><title>alloc::alloc::exchange_malloc (92 samples, 0.08%)</title><rect x="24.1737%" y="597" width="0.0836%" height="15" fill="rgb(209,164,1)" fg:x="26607" fg:w="92"/><text x="24.4237%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (92 samples, 0.08%)</title><rect x="24.1737%" y="581" width="0.0836%" height="15" fill="rgb(213,184,43)" fg:x="26607" fg:w="92"/><text x="24.4237%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (92 samples, 0.08%)</title><rect x="24.1737%" y="565" width="0.0836%" height="15" fill="rgb(231,61,34)" fg:x="26607" fg:w="92"/><text x="24.4237%" y="575.50"></text></g><g><title>alloc::alloc::alloc (92 samples, 0.08%)</title><rect x="24.1737%" y="549" width="0.0836%" height="15" fill="rgb(235,75,3)" fg:x="26607" fg:w="92"/><text x="24.4237%" y="559.50"></text></g><g><title>__rg_alloc (92 samples, 0.08%)</title><rect x="24.1737%" y="533" width="0.0836%" height="15" fill="rgb(220,106,47)" fg:x="26607" fg:w="92"/><text x="24.4237%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (92 samples, 0.08%)</title><rect x="24.1737%" y="517" width="0.0836%" height="15" fill="rgb(210,196,33)" fg:x="26607" fg:w="92"/><text x="24.4237%" y="527.50"></text></g><g><title>sn_rust_alloc (91 samples, 0.08%)</title><rect x="24.1746%" y="501" width="0.0827%" height="15" fill="rgb(229,154,42)" fg:x="26608" fg:w="91"/><text x="24.4246%" y="511.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (75 samples, 0.07%)</title><rect x="24.1891%" y="485" width="0.0681%" height="15" fill="rgb(228,114,26)" fg:x="26624" fg:w="75"/><text x="24.4391%" y="495.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (109 samples, 0.10%)</title><rect x="24.1591%" y="693" width="0.0990%" height="15" fill="rgb(208,144,1)" fg:x="26591" fg:w="109"/><text x="24.4091%" y="703.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (109 samples, 0.10%)</title><rect x="24.1591%" y="677" width="0.0990%" height="15" fill="rgb(239,112,37)" fg:x="26591" fg:w="109"/><text x="24.4091%" y="687.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (109 samples, 0.10%)</title><rect x="24.1591%" y="661" width="0.0990%" height="15" fill="rgb(210,96,50)" fg:x="26591" fg:w="109"/><text x="24.4091%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.01%)</title><rect x="24.2682%" y="677" width="0.0127%" height="15" fill="rgb(222,178,2)" fg:x="26711" fg:w="14"/><text x="24.5182%" y="687.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (14 samples, 0.01%)</title><rect x="24.2682%" y="661" width="0.0127%" height="15" fill="rgb(226,74,18)" fg:x="26711" fg:w="14"/><text x="24.5182%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (13 samples, 0.01%)</title><rect x="24.2809%" y="677" width="0.0118%" height="15" fill="rgb(225,67,54)" fg:x="26725" fg:w="13"/><text x="24.5309%" y="687.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (13 samples, 0.01%)</title><rect x="24.2809%" y="661" width="0.0118%" height="15" fill="rgb(251,92,32)" fg:x="26725" fg:w="13"/><text x="24.5309%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (16,638 samples, 15.12%)</title><rect x="9.2308%" y="869" width="15.1164%" height="15" fill="rgb(228,149,22)" fg:x="10160" fg:w="16638"/><text x="9.4808%" y="879.50">&lt;core::future::from_gen..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (16,638 samples, 15.12%)</title><rect x="9.2308%" y="853" width="15.1164%" height="15" fill="rgb(243,54,13)" fg:x="10160" fg:w="16638"/><text x="9.4808%" y="863.50">tremor_runtime::connect..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (16,638 samples, 15.12%)</title><rect x="9.2308%" y="837" width="15.1164%" height="15" fill="rgb(243,180,28)" fg:x="10160" fg:w="16638"/><text x="9.4808%" y="847.50">&lt;core::future::from_gen..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (16,638 samples, 15.12%)</title><rect x="9.2308%" y="821" width="15.1164%" height="15" fill="rgb(208,167,24)" fg:x="10160" fg:w="16638"/><text x="9.4808%" y="831.50">tremor_runtime::connect..</text></g><g><title>tremor_runtime::connectors::source::build_events (16,637 samples, 15.12%)</title><rect x="9.2317%" y="805" width="15.1155%" height="15" fill="rgb(245,73,45)" fg:x="10161" fg:w="16637"/><text x="9.4817%" y="815.50">tremor_runtime::connect..</text></g><g><title>tremor_script::srs::EventPayload::try_new (16,636 samples, 15.11%)</title><rect x="9.2326%" y="789" width="15.1146%" height="15" fill="rgb(237,203,48)" fg:x="10162" fg:w="16636"/><text x="9.4826%" y="799.50">tremor_script::srs::Eve..</text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (16,636 samples, 15.11%)</title><rect x="9.2326%" y="773" width="15.1146%" height="15" fill="rgb(211,197,16)" fg:x="10162" fg:w="16636"/><text x="9.4826%" y="783.50">tremor_runtime::connect..</text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (291 samples, 0.26%)</title><rect x="24.0828%" y="757" width="0.2644%" height="15" fill="rgb(243,99,51)" fg:x="26507" fg:w="291"/><text x="24.3328%" y="767.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (291 samples, 0.26%)</title><rect x="24.0828%" y="741" width="0.2644%" height="15" fill="rgb(215,123,29)" fg:x="26507" fg:w="291"/><text x="24.3328%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (291 samples, 0.26%)</title><rect x="24.0828%" y="725" width="0.2644%" height="15" fill="rgb(239,186,37)" fg:x="26507" fg:w="291"/><text x="24.3328%" y="735.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (207 samples, 0.19%)</title><rect x="24.1591%" y="709" width="0.1881%" height="15" fill="rgb(252,136,39)" fg:x="26591" fg:w="207"/><text x="24.4091%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (98 samples, 0.09%)</title><rect x="24.2582%" y="693" width="0.0890%" height="15" fill="rgb(223,213,32)" fg:x="26700" fg:w="98"/><text x="24.5082%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (55 samples, 0.05%)</title><rect x="24.2972%" y="677" width="0.0500%" height="15" fill="rgb(233,115,5)" fg:x="26743" fg:w="55"/><text x="24.5472%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt; (55 samples, 0.05%)</title><rect x="24.2972%" y="661" width="0.0500%" height="15" fill="rgb(207,226,44)" fg:x="26743" fg:w="55"/><text x="24.5472%" y="671.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (55 samples, 0.05%)</title><rect x="24.2972%" y="645" width="0.0500%" height="15" fill="rgb(208,126,0)" fg:x="26743" fg:w="55"/><text x="24.5472%" y="655.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (54 samples, 0.05%)</title><rect x="24.2981%" y="629" width="0.0491%" height="15" fill="rgb(244,66,21)" fg:x="26744" fg:w="54"/><text x="24.5481%" y="639.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (51 samples, 0.05%)</title><rect x="24.3009%" y="613" width="0.0463%" height="15" fill="rgb(222,97,12)" fg:x="26747" fg:w="51"/><text x="24.5509%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (51 samples, 0.05%)</title><rect x="24.3009%" y="597" width="0.0463%" height="15" fill="rgb(219,213,19)" fg:x="26747" fg:w="51"/><text x="24.5509%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (51 samples, 0.05%)</title><rect x="24.3009%" y="581" width="0.0463%" height="15" fill="rgb(252,169,30)" fg:x="26747" fg:w="51"/><text x="24.5509%" y="591.50"></text></g><g><title>sn_rust_dealloc (49 samples, 0.04%)</title><rect x="24.3027%" y="565" width="0.0445%" height="15" fill="rgb(206,32,51)" fg:x="26749" fg:w="49"/><text x="24.5527%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (146 samples, 0.13%)</title><rect x="24.7997%" y="421" width="0.1326%" height="15" fill="rgb(250,172,42)" fg:x="27296" fg:w="146"/><text x="25.0497%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (146 samples, 0.13%)</title><rect x="24.7997%" y="405" width="0.1326%" height="15" fill="rgb(209,34,43)" fg:x="27296" fg:w="146"/><text x="25.0497%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (146 samples, 0.13%)</title><rect x="24.7997%" y="389" width="0.1326%" height="15" fill="rgb(223,11,35)" fg:x="27296" fg:w="146"/><text x="25.0497%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (145 samples, 0.13%)</title><rect x="24.8006%" y="373" width="0.1317%" height="15" fill="rgb(251,219,26)" fg:x="27297" fg:w="145"/><text x="25.0506%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (145 samples, 0.13%)</title><rect x="24.8006%" y="357" width="0.1317%" height="15" fill="rgb(231,119,3)" fg:x="27297" fg:w="145"/><text x="25.0506%" y="367.50"></text></g><g><title>alloc::alloc::alloc (144 samples, 0.13%)</title><rect x="24.8015%" y="341" width="0.1308%" height="15" fill="rgb(216,97,11)" fg:x="27298" fg:w="144"/><text x="25.0515%" y="351.50"></text></g><g><title>__rg_alloc (144 samples, 0.13%)</title><rect x="24.8015%" y="325" width="0.1308%" height="15" fill="rgb(223,59,9)" fg:x="27298" fg:w="144"/><text x="25.0515%" y="335.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (144 samples, 0.13%)</title><rect x="24.8015%" y="309" width="0.1308%" height="15" fill="rgb(233,93,31)" fg:x="27298" fg:w="144"/><text x="25.0515%" y="319.50"></text></g><g><title>sn_rust_alloc (140 samples, 0.13%)</title><rect x="24.8051%" y="293" width="0.1272%" height="15" fill="rgb(239,81,33)" fg:x="27302" fg:w="140"/><text x="25.0551%" y="303.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (24 samples, 0.02%)</title><rect x="24.9105%" y="277" width="0.0218%" height="15" fill="rgb(213,120,34)" fg:x="27418" fg:w="24"/><text x="25.1605%" y="287.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (172 samples, 0.16%)</title><rect x="24.7906%" y="533" width="0.1563%" height="15" fill="rgb(243,49,53)" fg:x="27286" fg:w="172"/><text x="25.0406%" y="543.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (168 samples, 0.15%)</title><rect x="24.7942%" y="517" width="0.1526%" height="15" fill="rgb(247,216,33)" fg:x="27290" fg:w="168"/><text x="25.0442%" y="527.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (167 samples, 0.15%)</title><rect x="24.7951%" y="501" width="0.1517%" height="15" fill="rgb(226,26,14)" fg:x="27291" fg:w="167"/><text x="25.0451%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (162 samples, 0.15%)</title><rect x="24.7997%" y="485" width="0.1472%" height="15" fill="rgb(215,49,53)" fg:x="27296" fg:w="162"/><text x="25.0497%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (162 samples, 0.15%)</title><rect x="24.7997%" y="469" width="0.1472%" height="15" fill="rgb(245,162,40)" fg:x="27296" fg:w="162"/><text x="25.0497%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (162 samples, 0.15%)</title><rect x="24.7997%" y="453" width="0.1472%" height="15" fill="rgb(229,68,17)" fg:x="27296" fg:w="162"/><text x="25.0497%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (162 samples, 0.15%)</title><rect x="24.7997%" y="437" width="0.1472%" height="15" fill="rgb(213,182,10)" fg:x="27296" fg:w="162"/><text x="25.0497%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (16 samples, 0.01%)</title><rect x="24.9323%" y="421" width="0.0145%" height="15" fill="rgb(245,125,30)" fg:x="27442" fg:w="16"/><text x="25.1823%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (16 samples, 0.01%)</title><rect x="24.9323%" y="405" width="0.0145%" height="15" fill="rgb(232,202,2)" fg:x="27442" fg:w="16"/><text x="25.1823%" y="415.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (17 samples, 0.02%)</title><rect x="24.9496%" y="517" width="0.0154%" height="15" fill="rgb(237,140,51)" fg:x="27461" fg:w="17"/><text x="25.1996%" y="527.50"></text></g><g><title>&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt; as core::convert::From&lt;alloc::vec::Vec&lt;T&gt;&gt;&gt;::from (16 samples, 0.01%)</title><rect x="24.9505%" y="501" width="0.0145%" height="15" fill="rgb(236,157,25)" fg:x="27462" fg:w="16"/><text x="25.2005%" y="511.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (18 samples, 0.02%)</title><rect x="25.0150%" y="181" width="0.0164%" height="15" fill="rgb(219,209,0)" fg:x="27533" fg:w="18"/><text x="25.2650%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (68 samples, 0.06%)</title><rect x="24.9714%" y="325" width="0.0618%" height="15" fill="rgb(240,116,54)" fg:x="27485" fg:w="68"/><text x="25.2214%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (68 samples, 0.06%)</title><rect x="24.9714%" y="309" width="0.0618%" height="15" fill="rgb(216,10,36)" fg:x="27485" fg:w="68"/><text x="25.2214%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (68 samples, 0.06%)</title><rect x="24.9714%" y="293" width="0.0618%" height="15" fill="rgb(222,72,44)" fg:x="27485" fg:w="68"/><text x="25.2214%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (67 samples, 0.06%)</title><rect x="24.9723%" y="277" width="0.0609%" height="15" fill="rgb(232,159,9)" fg:x="27486" fg:w="67"/><text x="25.2223%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (67 samples, 0.06%)</title><rect x="24.9723%" y="261" width="0.0609%" height="15" fill="rgb(210,39,32)" fg:x="27486" fg:w="67"/><text x="25.2223%" y="271.50"></text></g><g><title>alloc::alloc::alloc (67 samples, 0.06%)</title><rect x="24.9723%" y="245" width="0.0609%" height="15" fill="rgb(216,194,45)" fg:x="27486" fg:w="67"/><text x="25.2223%" y="255.50"></text></g><g><title>__rg_alloc (67 samples, 0.06%)</title><rect x="24.9723%" y="229" width="0.0609%" height="15" fill="rgb(218,18,35)" fg:x="27486" fg:w="67"/><text x="25.2223%" y="239.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (67 samples, 0.06%)</title><rect x="24.9723%" y="213" width="0.0609%" height="15" fill="rgb(207,83,51)" fg:x="27486" fg:w="67"/><text x="25.2223%" y="223.50"></text></g><g><title>sn_rust_alloc (63 samples, 0.06%)</title><rect x="24.9759%" y="197" width="0.0572%" height="15" fill="rgb(225,63,43)" fg:x="27490" fg:w="63"/><text x="25.2259%" y="207.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (91 samples, 0.08%)</title><rect x="24.9677%" y="437" width="0.0827%" height="15" fill="rgb(207,57,36)" fg:x="27481" fg:w="91"/><text x="25.2177%" y="447.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (91 samples, 0.08%)</title><rect x="24.9677%" y="421" width="0.0827%" height="15" fill="rgb(216,99,33)" fg:x="27481" fg:w="91"/><text x="25.2177%" y="431.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (91 samples, 0.08%)</title><rect x="24.9677%" y="405" width="0.0827%" height="15" fill="rgb(225,42,16)" fg:x="27481" fg:w="91"/><text x="25.2177%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (87 samples, 0.08%)</title><rect x="24.9714%" y="389" width="0.0790%" height="15" fill="rgb(220,201,45)" fg:x="27485" fg:w="87"/><text x="25.2214%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (87 samples, 0.08%)</title><rect x="24.9714%" y="373" width="0.0790%" height="15" fill="rgb(225,33,4)" fg:x="27485" fg:w="87"/><text x="25.2214%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (87 samples, 0.08%)</title><rect x="24.9714%" y="357" width="0.0790%" height="15" fill="rgb(224,33,50)" fg:x="27485" fg:w="87"/><text x="25.2214%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (87 samples, 0.08%)</title><rect x="24.9714%" y="341" width="0.0790%" height="15" fill="rgb(246,198,51)" fg:x="27485" fg:w="87"/><text x="25.2214%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (19 samples, 0.02%)</title><rect x="25.0332%" y="325" width="0.0173%" height="15" fill="rgb(205,22,4)" fg:x="27553" fg:w="19"/><text x="25.2832%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (19 samples, 0.02%)</title><rect x="25.0332%" y="309" width="0.0173%" height="15" fill="rgb(206,3,8)" fg:x="27553" fg:w="19"/><text x="25.2832%" y="319.50"></text></g><g><title>[libc-2.31.so] (17 samples, 0.02%)</title><rect x="25.0350%" y="293" width="0.0154%" height="15" fill="rgb(251,23,15)" fg:x="27555" fg:w="17"/><text x="25.2850%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (41 samples, 0.04%)</title><rect x="25.0622%" y="389" width="0.0373%" height="15" fill="rgb(252,88,28)" fg:x="27585" fg:w="41"/><text x="25.3122%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (41 samples, 0.04%)</title><rect x="25.0622%" y="373" width="0.0373%" height="15" fill="rgb(212,127,14)" fg:x="27585" fg:w="41"/><text x="25.3122%" y="383.50"></text></g><g><title>alloc::alloc::alloc (40 samples, 0.04%)</title><rect x="25.0631%" y="357" width="0.0363%" height="15" fill="rgb(247,145,37)" fg:x="27586" fg:w="40"/><text x="25.3131%" y="367.50"></text></g><g><title>__rg_alloc (40 samples, 0.04%)</title><rect x="25.0631%" y="341" width="0.0363%" height="15" fill="rgb(209,117,53)" fg:x="27586" fg:w="40"/><text x="25.3131%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (40 samples, 0.04%)</title><rect x="25.0631%" y="325" width="0.0363%" height="15" fill="rgb(212,90,42)" fg:x="27586" fg:w="40"/><text x="25.3131%" y="335.50"></text></g><g><title>sn_rust_alloc (38 samples, 0.03%)</title><rect x="25.0650%" y="309" width="0.0345%" height="15" fill="rgb(218,164,37)" fg:x="27588" fg:w="38"/><text x="25.3150%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (48 samples, 0.04%)</title><rect x="25.0604%" y="437" width="0.0436%" height="15" fill="rgb(246,65,34)" fg:x="27583" fg:w="48"/><text x="25.3104%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (46 samples, 0.04%)</title><rect x="25.0622%" y="421" width="0.0418%" height="15" fill="rgb(231,100,33)" fg:x="27585" fg:w="46"/><text x="25.3122%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (46 samples, 0.04%)</title><rect x="25.0622%" y="405" width="0.0418%" height="15" fill="rgb(228,126,14)" fg:x="27585" fg:w="46"/><text x="25.3122%" y="415.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (656 samples, 0.60%)</title><rect x="24.5098%" y="549" width="0.5960%" height="15" fill="rgb(215,173,21)" fg:x="26977" fg:w="656"/><text x="24.7598%" y="559.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (175 samples, 0.16%)</title><rect x="24.9469%" y="533" width="0.1590%" height="15" fill="rgb(210,6,40)" fg:x="27458" fg:w="175"/><text x="25.1969%" y="543.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (155 samples, 0.14%)</title><rect x="24.9650%" y="517" width="0.1408%" height="15" fill="rgb(212,48,18)" fg:x="27478" fg:w="155"/><text x="25.2150%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (155 samples, 0.14%)</title><rect x="24.9650%" y="501" width="0.1408%" height="15" fill="rgb(230,214,11)" fg:x="27478" fg:w="155"/><text x="25.2150%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (155 samples, 0.14%)</title><rect x="24.9650%" y="485" width="0.1408%" height="15" fill="rgb(254,105,39)" fg:x="27478" fg:w="155"/><text x="25.2150%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (155 samples, 0.14%)</title><rect x="24.9650%" y="469" width="0.1408%" height="15" fill="rgb(245,158,5)" fg:x="27478" fg:w="155"/><text x="25.2150%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (155 samples, 0.14%)</title><rect x="24.9650%" y="453" width="0.1408%" height="15" fill="rgb(249,208,11)" fg:x="27478" fg:w="155"/><text x="25.2150%" y="463.50"></text></g><g><title>core::time::Duration::as_nanos (13 samples, 0.01%)</title><rect x="25.1367%" y="469" width="0.0118%" height="15" fill="rgb(210,39,28)" fg:x="27667" fg:w="13"/><text x="25.3867%" y="479.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (43 samples, 0.04%)</title><rect x="25.1485%" y="453" width="0.0391%" height="15" fill="rgb(211,56,53)" fg:x="27680" fg:w="43"/><text x="25.3985%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (21 samples, 0.02%)</title><rect x="25.1958%" y="421" width="0.0191%" height="15" fill="rgb(226,201,30)" fg:x="27732" fg:w="21"/><text x="25.4458%" y="431.50"></text></g><g><title>core::cmp::PartialOrd::ge (21 samples, 0.02%)</title><rect x="25.1958%" y="405" width="0.0191%" height="15" fill="rgb(239,101,34)" fg:x="27732" fg:w="21"/><text x="25.4458%" y="415.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (20 samples, 0.02%)</title><rect x="25.1967%" y="389" width="0.0182%" height="15" fill="rgb(226,209,5)" fg:x="27733" fg:w="20"/><text x="25.4467%" y="399.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (20 samples, 0.02%)</title><rect x="25.1967%" y="373" width="0.0182%" height="15" fill="rgb(250,105,47)" fg:x="27733" fg:w="20"/><text x="25.4467%" y="383.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (20 samples, 0.02%)</title><rect x="25.1967%" y="357" width="0.0182%" height="15" fill="rgb(230,72,3)" fg:x="27733" fg:w="20"/><text x="25.4467%" y="367.50"></text></g><g><title>std::time::SystemTime::duration_since (79 samples, 0.07%)</title><rect x="25.1485%" y="469" width="0.0718%" height="15" fill="rgb(232,218,39)" fg:x="27680" fg:w="79"/><text x="25.3985%" y="479.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (36 samples, 0.03%)</title><rect x="25.1876%" y="453" width="0.0327%" height="15" fill="rgb(248,166,6)" fg:x="27723" fg:w="36"/><text x="25.4376%" y="463.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (36 samples, 0.03%)</title><rect x="25.1876%" y="437" width="0.0327%" height="15" fill="rgb(247,89,20)" fg:x="27723" fg:w="36"/><text x="25.4376%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (310 samples, 0.28%)</title><rect x="25.1058%" y="549" width="0.2816%" height="15" fill="rgb(248,130,54)" fg:x="27633" fg:w="310"/><text x="25.3558%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (310 samples, 0.28%)</title><rect x="25.1058%" y="533" width="0.2816%" height="15" fill="rgb(234,196,4)" fg:x="27633" fg:w="310"/><text x="25.3558%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any::check::{{closure}} (297 samples, 0.27%)</title><rect x="25.1177%" y="517" width="0.2698%" height="15" fill="rgb(250,143,31)" fg:x="27646" fg:w="297"/><text x="25.3677%" y="527.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}}::{{closure}} (297 samples, 0.27%)</title><rect x="25.1177%" y="501" width="0.2698%" height="15" fill="rgb(211,110,34)" fg:x="27646" fg:w="297"/><text x="25.3677%" y="511.50"></text></g><g><title>tremor_common::time::nanotime (296 samples, 0.27%)</title><rect x="25.1186%" y="485" width="0.2689%" height="15" fill="rgb(215,124,48)" fg:x="27647" fg:w="296"/><text x="25.3686%" y="495.50"></text></g><g><title>std::time::SystemTime::now (184 samples, 0.17%)</title><rect x="25.2203%" y="469" width="0.1672%" height="15" fill="rgb(216,46,13)" fg:x="27759" fg:w="184"/><text x="25.4703%" y="479.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (184 samples, 0.17%)</title><rect x="25.2203%" y="453" width="0.1672%" height="15" fill="rgb(205,184,25)" fg:x="27759" fg:w="184"/><text x="25.4703%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::now (184 samples, 0.17%)</title><rect x="25.2203%" y="437" width="0.1672%" height="15" fill="rgb(228,1,10)" fg:x="27759" fg:w="184"/><text x="25.4703%" y="447.50"></text></g><g><title>__clock_gettime (144 samples, 0.13%)</title><rect x="25.2567%" y="421" width="0.1308%" height="15" fill="rgb(213,116,27)" fg:x="27799" fg:w="144"/><text x="25.5067%" y="431.50"></text></g><g><title>__vdso_clock_gettime (136 samples, 0.12%)</title><rect x="25.2639%" y="405" width="0.1236%" height="15" fill="rgb(241,95,50)" fg:x="27807" fg:w="136"/><text x="25.5139%" y="415.50"></text></g><g><title>[[vdso]] (122 samples, 0.11%)</title><rect x="25.2767%" y="389" width="0.1108%" height="15" fill="rgb(238,48,32)" fg:x="27821" fg:w="122"/><text x="25.5267%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (28 samples, 0.03%)</title><rect x="25.4038%" y="517" width="0.0254%" height="15" fill="rgb(235,113,49)" fg:x="27961" fg:w="28"/><text x="25.6538%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (12 samples, 0.01%)</title><rect x="25.4184%" y="501" width="0.0109%" height="15" fill="rgb(205,127,43)" fg:x="27977" fg:w="12"/><text x="25.6684%" y="511.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (292 samples, 0.27%)</title><rect x="25.5610%" y="325" width="0.2653%" height="15" fill="rgb(250,162,2)" fg:x="28134" fg:w="292"/><text x="25.8110%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (444 samples, 0.40%)</title><rect x="25.4302%" y="469" width="0.4034%" height="15" fill="rgb(220,13,41)" fg:x="27990" fg:w="444"/><text x="25.6802%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (443 samples, 0.40%)</title><rect x="25.4311%" y="453" width="0.4025%" height="15" fill="rgb(249,221,25)" fg:x="27991" fg:w="443"/><text x="25.6811%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (443 samples, 0.40%)</title><rect x="25.4311%" y="437" width="0.4025%" height="15" fill="rgb(215,208,19)" fg:x="27991" fg:w="443"/><text x="25.6811%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (441 samples, 0.40%)</title><rect x="25.4329%" y="421" width="0.4007%" height="15" fill="rgb(236,175,2)" fg:x="27993" fg:w="441"/><text x="25.6829%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (441 samples, 0.40%)</title><rect x="25.4329%" y="405" width="0.4007%" height="15" fill="rgb(241,52,2)" fg:x="27993" fg:w="441"/><text x="25.6829%" y="415.50"></text></g><g><title>alloc::alloc::alloc (441 samples, 0.40%)</title><rect x="25.4329%" y="389" width="0.4007%" height="15" fill="rgb(248,140,14)" fg:x="27993" fg:w="441"/><text x="25.6829%" y="399.50"></text></g><g><title>__rg_alloc (441 samples, 0.40%)</title><rect x="25.4329%" y="373" width="0.4007%" height="15" fill="rgb(253,22,42)" fg:x="27993" fg:w="441"/><text x="25.6829%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (441 samples, 0.40%)</title><rect x="25.4329%" y="357" width="0.4007%" height="15" fill="rgb(234,61,47)" fg:x="27993" fg:w="441"/><text x="25.6829%" y="367.50"></text></g><g><title>sn_rust_alloc (439 samples, 0.40%)</title><rect x="25.4347%" y="341" width="0.3989%" height="15" fill="rgb(208,226,15)" fg:x="27995" fg:w="439"/><text x="25.6847%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (599 samples, 0.54%)</title><rect x="25.4038%" y="533" width="0.5442%" height="15" fill="rgb(217,221,4)" fg:x="27961" fg:w="599"/><text x="25.6538%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (571 samples, 0.52%)</title><rect x="25.4293%" y="517" width="0.5188%" height="15" fill="rgb(212,174,34)" fg:x="27989" fg:w="571"/><text x="25.6793%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (571 samples, 0.52%)</title><rect x="25.4293%" y="501" width="0.5188%" height="15" fill="rgb(253,83,4)" fg:x="27989" fg:w="571"/><text x="25.6793%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (571 samples, 0.52%)</title><rect x="25.4293%" y="485" width="0.5188%" height="15" fill="rgb(250,195,49)" fg:x="27989" fg:w="571"/><text x="25.6793%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (126 samples, 0.11%)</title><rect x="25.8336%" y="469" width="0.1145%" height="15" fill="rgb(241,192,25)" fg:x="28434" fg:w="126"/><text x="26.0836%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (126 samples, 0.11%)</title><rect x="25.8336%" y="453" width="0.1145%" height="15" fill="rgb(208,124,10)" fg:x="28434" fg:w="126"/><text x="26.0836%" y="463.50"></text></g><g><title>[libc-2.31.so] (126 samples, 0.11%)</title><rect x="25.8336%" y="437" width="0.1145%" height="15" fill="rgb(222,33,0)" fg:x="28434" fg:w="126"/><text x="26.0836%" y="447.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,764 samples, 1.60%)</title><rect x="24.3472%" y="581" width="1.6027%" height="15" fill="rgb(234,209,28)" fg:x="26798" fg:w="1764"/><text x="24.5972%" y="591.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (1,720 samples, 1.56%)</title><rect x="24.3872%" y="565" width="1.5627%" height="15" fill="rgb(224,11,23)" fg:x="26842" fg:w="1720"/><text x="24.6372%" y="575.50"></text></g><g><title>tremor_runtime::connectors::impls::bench::Acc::next (617 samples, 0.56%)</title><rect x="25.3893%" y="549" width="0.5606%" height="15" fill="rgb(232,99,1)" fg:x="27945" fg:w="617"/><text x="25.6393%" y="559.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (21,782 samples, 19.79%)</title><rect x="6.1608%" y="901" width="19.7899%" height="15" fill="rgb(237,95,45)" fg:x="6781" fg:w="21782"/><text x="6.4108%" y="911.50">&lt;core::future::from_generator::..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (18,403 samples, 16.72%)</title><rect x="9.2308%" y="885" width="16.7200%" height="15" fill="rgb(208,109,11)" fg:x="10160" fg:w="18403"/><text x="9.4808%" y="895.50">tremor_runtime::connectors..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1,765 samples, 1.60%)</title><rect x="24.3472%" y="869" width="1.6036%" height="15" fill="rgb(216,190,48)" fg:x="26798" fg:w="1765"/><text x="24.5972%" y="879.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (1,765 samples, 1.60%)</title><rect x="24.3472%" y="853" width="1.6036%" height="15" fill="rgb(251,171,36)" fg:x="26798" fg:w="1765"/><text x="24.5972%" y="863.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,765 samples, 1.60%)</title><rect x="24.3472%" y="837" width="1.6036%" height="15" fill="rgb(230,62,22)" fg:x="26798" fg:w="1765"/><text x="24.5972%" y="847.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,765 samples, 1.60%)</title><rect x="24.3472%" y="821" width="1.6036%" height="15" fill="rgb(225,114,35)" fg:x="26798" fg:w="1765"/><text x="24.5972%" y="831.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (1,765 samples, 1.60%)</title><rect x="24.3472%" y="805" width="1.6036%" height="15" fill="rgb(215,118,42)" fg:x="26798" fg:w="1765"/><text x="24.5972%" y="815.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,765 samples, 1.60%)</title><rect x="24.3472%" y="789" width="1.6036%" height="15" fill="rgb(243,119,21)" fg:x="26798" fg:w="1765"/><text x="24.5972%" y="799.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,765 samples, 1.60%)</title><rect x="24.3472%" y="773" width="1.6036%" height="15" fill="rgb(252,177,53)" fg:x="26798" fg:w="1765"/><text x="24.5972%" y="783.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (1,765 samples, 1.60%)</title><rect x="24.3472%" y="757" width="1.6036%" height="15" fill="rgb(237,209,29)" fg:x="26798" fg:w="1765"/><text x="24.5972%" y="767.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,765 samples, 1.60%)</title><rect x="24.3472%" y="741" width="1.6036%" height="15" fill="rgb(212,65,23)" fg:x="26798" fg:w="1765"/><text x="24.5972%" y="751.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (1,765 samples, 1.60%)</title><rect x="24.3472%" y="725" width="1.6036%" height="15" fill="rgb(230,222,46)" fg:x="26798" fg:w="1765"/><text x="24.5972%" y="735.50"></text></g><g><title>std::panic::catch_unwind (1,765 samples, 1.60%)</title><rect x="24.3472%" y="709" width="1.6036%" height="15" fill="rgb(215,135,32)" fg:x="26798" fg:w="1765"/><text x="24.5972%" y="719.50"></text></g><g><title>std::panicking::try (1,765 samples, 1.60%)</title><rect x="24.3472%" y="693" width="1.6036%" height="15" fill="rgb(246,101,22)" fg:x="26798" fg:w="1765"/><text x="24.5972%" y="703.50"></text></g><g><title>std::panicking::try::do_call (1,765 samples, 1.60%)</title><rect x="24.3472%" y="677" width="1.6036%" height="15" fill="rgb(206,107,13)" fg:x="26798" fg:w="1765"/><text x="24.5972%" y="687.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,765 samples, 1.60%)</title><rect x="24.3472%" y="661" width="1.6036%" height="15" fill="rgb(250,100,44)" fg:x="26798" fg:w="1765"/><text x="24.5972%" y="671.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1,765 samples, 1.60%)</title><rect x="24.3472%" y="645" width="1.6036%" height="15" fill="rgb(231,147,38)" fg:x="26798" fg:w="1765"/><text x="24.5972%" y="655.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (1,765 samples, 1.60%)</title><rect x="24.3472%" y="629" width="1.6036%" height="15" fill="rgb(229,8,40)" fg:x="26798" fg:w="1765"/><text x="24.5972%" y="639.50"></text></g><g><title>async_ffi::FfiContext::with_context (1,765 samples, 1.60%)</title><rect x="24.3472%" y="613" width="1.6036%" height="15" fill="rgb(221,135,30)" fg:x="26798" fg:w="1765"/><text x="24.5972%" y="623.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (1,765 samples, 1.60%)</title><rect x="24.3472%" y="597" width="1.6036%" height="15" fill="rgb(249,193,18)" fg:x="26798" fg:w="1765"/><text x="24.5972%" y="607.50"></text></g><g><title>sn_rust_dealloc (24 samples, 0.02%)</title><rect x="26.0126%" y="485" width="0.0218%" height="15" fill="rgb(209,133,39)" fg:x="28631" fg:w="24"/><text x="26.2626%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::deallocate (37 samples, 0.03%)</title><rect x="26.0126%" y="549" width="0.0336%" height="15" fill="rgb(232,100,14)" fg:x="28631" fg:w="37"/><text x="26.2626%" y="559.50"></text></g><g><title>alloc::alloc::dealloc (37 samples, 0.03%)</title><rect x="26.0126%" y="533" width="0.0336%" height="15" fill="rgb(224,185,1)" fg:x="28631" fg:w="37"/><text x="26.2626%" y="543.50"></text></g><g><title>__rg_dealloc (37 samples, 0.03%)</title><rect x="26.0126%" y="517" width="0.0336%" height="15" fill="rgb(223,139,8)" fg:x="28631" fg:w="37"/><text x="26.2626%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (37 samples, 0.03%)</title><rect x="26.0126%" y="501" width="0.0336%" height="15" fill="rgb(232,213,38)" fg:x="28631" fg:w="37"/><text x="26.2626%" y="511.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (13 samples, 0.01%)</title><rect x="26.0344%" y="485" width="0.0118%" height="15" fill="rgb(207,94,22)" fg:x="28655" fg:w="13"/><text x="26.2844%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::free_buckets (38 samples, 0.03%)</title><rect x="26.0126%" y="581" width="0.0345%" height="15" fill="rgb(219,183,54)" fg:x="28631" fg:w="38"/><text x="26.2626%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::free_buckets (38 samples, 0.03%)</title><rect x="26.0126%" y="565" width="0.0345%" height="15" fill="rgb(216,185,54)" fg:x="28631" fg:w="38"/><text x="26.2626%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (41 samples, 0.04%)</title><rect x="26.0108%" y="645" width="0.0373%" height="15" fill="rgb(254,217,39)" fg:x="28629" fg:w="41"/><text x="26.2608%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (41 samples, 0.04%)</title><rect x="26.0108%" y="629" width="0.0373%" height="15" fill="rgb(240,178,23)" fg:x="28629" fg:w="41"/><text x="26.2608%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (41 samples, 0.04%)</title><rect x="26.0108%" y="613" width="0.0373%" height="15" fill="rgb(218,11,47)" fg:x="28629" fg:w="41"/><text x="26.2608%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (41 samples, 0.04%)</title><rect x="26.0108%" y="597" width="0.0373%" height="15" fill="rgb(218,51,51)" fg:x="28629" fg:w="41"/><text x="26.2608%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (44 samples, 0.04%)</title><rect x="26.0098%" y="661" width="0.0400%" height="15" fill="rgb(238,126,27)" fg:x="28628" fg:w="44"/><text x="26.2598%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (61 samples, 0.06%)</title><rect x="26.0035%" y="725" width="0.0554%" height="15" fill="rgb(249,202,22)" fg:x="28621" fg:w="61"/><text x="26.2535%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (57 samples, 0.05%)</title><rect x="26.0071%" y="709" width="0.0518%" height="15" fill="rgb(254,195,49)" fg:x="28625" fg:w="57"/><text x="26.2571%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (57 samples, 0.05%)</title><rect x="26.0071%" y="693" width="0.0518%" height="15" fill="rgb(208,123,14)" fg:x="28625" fg:w="57"/><text x="26.2571%" y="703.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (57 samples, 0.05%)</title><rect x="26.0071%" y="677" width="0.0518%" height="15" fill="rgb(224,200,8)" fg:x="28625" fg:w="57"/><text x="26.2571%" y="687.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (16 samples, 0.01%)</title><rect x="26.0671%" y="501" width="0.0145%" height="15" fill="rgb(217,61,36)" fg:x="28691" fg:w="16"/><text x="26.3171%" y="511.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck::{{closure}}::{{closure}} (22 samples, 0.02%)</title><rect x="26.0653%" y="597" width="0.0200%" height="15" fill="rgb(206,35,45)" fg:x="28689" fg:w="22"/><text x="26.3153%" y="607.50"></text></g><g><title>hashbrown::map::RawEntryBuilderMut&lt;K,V,S,A&gt;::from_key_hashed_nocheck (22 samples, 0.02%)</title><rect x="26.0653%" y="581" width="0.0200%" height="15" fill="rgb(217,65,33)" fg:x="28689" fg:w="22"/><text x="26.3153%" y="591.50"></text></g><g><title>hashbrown::map::RawEntryBuilderMut&lt;K,V,S,A&gt;::from_hash (22 samples, 0.02%)</title><rect x="26.0653%" y="565" width="0.0200%" height="15" fill="rgb(222,158,48)" fg:x="28689" fg:w="22"/><text x="26.3153%" y="575.50"></text></g><g><title>hashbrown::map::RawEntryBuilderMut&lt;K,V,S,A&gt;::search (22 samples, 0.02%)</title><rect x="26.0653%" y="549" width="0.0200%" height="15" fill="rgb(254,2,54)" fg:x="28689" fg:w="22"/><text x="26.3153%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (22 samples, 0.02%)</title><rect x="26.0653%" y="533" width="0.0200%" height="15" fill="rgb(250,143,38)" fg:x="28689" fg:w="22"/><text x="26.3153%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (22 samples, 0.02%)</title><rect x="26.0653%" y="517" width="0.0200%" height="15" fill="rgb(248,25,0)" fg:x="28689" fg:w="22"/><text x="26.3153%" y="527.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_mut_key_hashed_nocheck (33 samples, 0.03%)</title><rect x="26.0616%" y="693" width="0.0300%" height="15" fill="rgb(206,152,27)" fg:x="28685" fg:w="33"/><text x="26.3116%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck (32 samples, 0.03%)</title><rect x="26.0625%" y="677" width="0.0291%" height="15" fill="rgb(240,77,30)" fg:x="28686" fg:w="32"/><text x="26.3125%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (31 samples, 0.03%)</title><rect x="26.0635%" y="661" width="0.0282%" height="15" fill="rgb(231,5,3)" fg:x="28687" fg:w="31"/><text x="26.3135%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (30 samples, 0.03%)</title><rect x="26.0644%" y="645" width="0.0273%" height="15" fill="rgb(207,226,32)" fg:x="28688" fg:w="30"/><text x="26.3144%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck::{{closure}} (30 samples, 0.03%)</title><rect x="26.0644%" y="629" width="0.0273%" height="15" fill="rgb(222,207,47)" fg:x="28688" fg:w="30"/><text x="26.3144%" y="639.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (29 samples, 0.03%)</title><rect x="26.0653%" y="613" width="0.0263%" height="15" fill="rgb(229,115,45)" fg:x="28689" fg:w="29"/><text x="26.3153%" y="623.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (95 samples, 0.09%)</title><rect x="26.1198%" y="677" width="0.0863%" height="15" fill="rgb(224,191,6)" fg:x="28749" fg:w="95"/><text x="26.3698%" y="687.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (70 samples, 0.06%)</title><rect x="26.1425%" y="661" width="0.0636%" height="15" fill="rgb(230,227,24)" fg:x="28774" fg:w="70"/><text x="26.3925%" y="671.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}} (70 samples, 0.06%)</title><rect x="26.1425%" y="645" width="0.0636%" height="15" fill="rgb(228,80,19)" fg:x="28774" fg:w="70"/><text x="26.3925%" y="655.50"></text></g><g><title>abi_stable::traits::ErasedType::run_downcast_as_mut (45 samples, 0.04%)</title><rect x="26.1652%" y="629" width="0.0409%" height="15" fill="rgb(247,229,0)" fg:x="28799" fg:w="45"/><text x="26.4152%" y="639.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}}::{{closure}} (40 samples, 0.04%)</title><rect x="26.1698%" y="613" width="0.0363%" height="15" fill="rgb(237,194,15)" fg:x="28804" fg:w="40"/><text x="26.4198%" y="623.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert (27 samples, 0.02%)</title><rect x="26.1816%" y="597" width="0.0245%" height="15" fill="rgb(219,203,20)" fg:x="28817" fg:w="27"/><text x="26.4316%" y="607.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (21 samples, 0.02%)</title><rect x="26.2343%" y="613" width="0.0191%" height="15" fill="rgb(234,128,8)" fg:x="28875" fg:w="21"/><text x="26.4843%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (21 samples, 0.02%)</title><rect x="26.2343%" y="597" width="0.0191%" height="15" fill="rgb(248,202,8)" fg:x="28875" fg:w="21"/><text x="26.4843%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (20 samples, 0.02%)</title><rect x="26.2352%" y="581" width="0.0182%" height="15" fill="rgb(206,104,37)" fg:x="28876" fg:w="20"/><text x="26.4852%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (18 samples, 0.02%)</title><rect x="26.2370%" y="565" width="0.0164%" height="15" fill="rgb(223,8,27)" fg:x="28878" fg:w="18"/><text x="26.4870%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.02%)</title><rect x="26.2379%" y="549" width="0.0154%" height="15" fill="rgb(216,217,28)" fg:x="28879" fg:w="17"/><text x="26.4879%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.02%)</title><rect x="26.2379%" y="533" width="0.0154%" height="15" fill="rgb(249,199,1)" fg:x="28879" fg:w="17"/><text x="26.4879%" y="543.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.02%)</title><rect x="26.2379%" y="517" width="0.0154%" height="15" fill="rgb(240,85,17)" fg:x="28879" fg:w="17"/><text x="26.4879%" y="527.50"></text></g><g><title>__rg_alloc (17 samples, 0.02%)</title><rect x="26.2379%" y="501" width="0.0154%" height="15" fill="rgb(206,108,45)" fg:x="28879" fg:w="17"/><text x="26.4879%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (17 samples, 0.02%)</title><rect x="26.2379%" y="485" width="0.0154%" height="15" fill="rgb(245,210,41)" fg:x="28879" fg:w="17"/><text x="26.4879%" y="495.50"></text></g><g><title>sn_rust_alloc (16 samples, 0.01%)</title><rect x="26.2388%" y="469" width="0.0145%" height="15" fill="rgb(206,13,37)" fg:x="28880" fg:w="16"/><text x="26.4888%" y="479.50"></text></g><g><title>core::mem::swap (52 samples, 0.05%)</title><rect x="26.2679%" y="469" width="0.0472%" height="15" fill="rgb(250,61,18)" fg:x="28912" fg:w="52"/><text x="26.5179%" y="479.50"></text></g><g><title>core::mem::swap_simple (52 samples, 0.05%)</title><rect x="26.2679%" y="453" width="0.0472%" height="15" fill="rgb(235,172,48)" fg:x="28912" fg:w="52"/><text x="26.5179%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (67 samples, 0.06%)</title><rect x="26.3278%" y="437" width="0.0609%" height="15" fill="rgb(249,201,17)" fg:x="28978" fg:w="67"/><text x="26.5778%" y="447.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (60 samples, 0.05%)</title><rect x="26.3342%" y="421" width="0.0545%" height="15" fill="rgb(219,208,6)" fg:x="28985" fg:w="60"/><text x="26.5842%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (60 samples, 0.05%)</title><rect x="26.3342%" y="405" width="0.0545%" height="15" fill="rgb(248,31,23)" fg:x="28985" fg:w="60"/><text x="26.5842%" y="415.50"></text></g><g><title>alloc::alloc::alloc (60 samples, 0.05%)</title><rect x="26.3342%" y="389" width="0.0545%" height="15" fill="rgb(245,15,42)" fg:x="28985" fg:w="60"/><text x="26.5842%" y="399.50"></text></g><g><title>__rg_alloc (60 samples, 0.05%)</title><rect x="26.3342%" y="373" width="0.0545%" height="15" fill="rgb(222,217,39)" fg:x="28985" fg:w="60"/><text x="26.5842%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (60 samples, 0.05%)</title><rect x="26.3342%" y="357" width="0.0545%" height="15" fill="rgb(210,219,27)" fg:x="28985" fg:w="60"/><text x="26.5842%" y="367.50"></text></g><g><title>sn_rust_alloc (50 samples, 0.05%)</title><rect x="26.3433%" y="341" width="0.0454%" height="15" fill="rgb(252,166,36)" fg:x="28995" fg:w="50"/><text x="26.5933%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (91 samples, 0.08%)</title><rect x="26.3160%" y="469" width="0.0827%" height="15" fill="rgb(245,132,34)" fg:x="28965" fg:w="91"/><text x="26.5660%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (88 samples, 0.08%)</title><rect x="26.3188%" y="453" width="0.0800%" height="15" fill="rgb(236,54,3)" fg:x="28968" fg:w="88"/><text x="26.5688%" y="463.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (184 samples, 0.17%)</title><rect x="26.2334%" y="629" width="0.1672%" height="15" fill="rgb(241,173,43)" fg:x="28874" fg:w="184"/><text x="26.4834%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (162 samples, 0.15%)</title><rect x="26.2533%" y="613" width="0.1472%" height="15" fill="rgb(215,190,9)" fg:x="28896" fg:w="162"/><text x="26.5033%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (162 samples, 0.15%)</title><rect x="26.2533%" y="597" width="0.1472%" height="15" fill="rgb(242,101,16)" fg:x="28896" fg:w="162"/><text x="26.5033%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (162 samples, 0.15%)</title><rect x="26.2533%" y="581" width="0.1472%" height="15" fill="rgb(223,190,21)" fg:x="28896" fg:w="162"/><text x="26.5033%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (162 samples, 0.15%)</title><rect x="26.2533%" y="565" width="0.1472%" height="15" fill="rgb(215,228,25)" fg:x="28896" fg:w="162"/><text x="26.5033%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (162 samples, 0.15%)</title><rect x="26.2533%" y="549" width="0.1472%" height="15" fill="rgb(225,36,22)" fg:x="28896" fg:w="162"/><text x="26.5033%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (162 samples, 0.15%)</title><rect x="26.2533%" y="533" width="0.1472%" height="15" fill="rgb(251,106,46)" fg:x="28896" fg:w="162"/><text x="26.5033%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (161 samples, 0.15%)</title><rect x="26.2542%" y="517" width="0.1463%" height="15" fill="rgb(208,90,1)" fg:x="28897" fg:w="161"/><text x="26.5042%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (161 samples, 0.15%)</title><rect x="26.2542%" y="501" width="0.1463%" height="15" fill="rgb(243,10,4)" fg:x="28897" fg:w="161"/><text x="26.5042%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (157 samples, 0.14%)</title><rect x="26.2579%" y="485" width="0.1426%" height="15" fill="rgb(212,137,27)" fg:x="28901" fg:w="157"/><text x="26.5079%" y="495.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (478 samples, 0.43%)</title><rect x="25.9771%" y="757" width="0.4343%" height="15" fill="rgb(231,220,49)" fg:x="28592" fg:w="478"/><text x="26.2271%" y="767.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (478 samples, 0.43%)</title><rect x="25.9771%" y="741" width="0.4343%" height="15" fill="rgb(237,96,20)" fg:x="28592" fg:w="478"/><text x="26.2271%" y="751.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (387 samples, 0.35%)</title><rect x="26.0598%" y="725" width="0.3516%" height="15" fill="rgb(239,229,30)" fg:x="28683" fg:w="387"/><text x="26.3098%" y="735.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (386 samples, 0.35%)</title><rect x="26.0607%" y="709" width="0.3507%" height="15" fill="rgb(219,65,33)" fg:x="28684" fg:w="386"/><text x="26.3107%" y="719.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (352 samples, 0.32%)</title><rect x="26.0916%" y="693" width="0.3198%" height="15" fill="rgb(243,134,7)" fg:x="28718" fg:w="352"/><text x="26.3416%" y="703.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut::{{closure}} (226 samples, 0.21%)</title><rect x="26.2061%" y="677" width="0.2053%" height="15" fill="rgb(216,177,54)" fg:x="28844" fg:w="226"/><text x="26.4561%" y="687.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (196 samples, 0.18%)</title><rect x="26.2334%" y="661" width="0.1781%" height="15" fill="rgb(211,160,20)" fg:x="28874" fg:w="196"/><text x="26.4834%" y="671.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (196 samples, 0.18%)</title><rect x="26.2334%" y="645" width="0.1781%" height="15" fill="rgb(239,85,39)" fg:x="28874" fg:w="196"/><text x="26.4834%" y="655.50"></text></g><g><title>tremor_value::value::Value::Object (12 samples, 0.01%)</title><rect x="26.4005%" y="629" width="0.0109%" height="15" fill="rgb(232,125,22)" fg:x="29058" fg:w="12"/><text x="26.6505%" y="639.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (530 samples, 0.48%)</title><rect x="25.9771%" y="789" width="0.4815%" height="15" fill="rgb(244,57,34)" fg:x="28592" fg:w="530"/><text x="26.2271%" y="799.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (530 samples, 0.48%)</title><rect x="25.9771%" y="773" width="0.4815%" height="15" fill="rgb(214,203,32)" fg:x="28592" fg:w="530"/><text x="26.2271%" y="783.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (52 samples, 0.05%)</title><rect x="26.4114%" y="757" width="0.0472%" height="15" fill="rgb(207,58,43)" fg:x="29070" fg:w="52"/><text x="26.6614%" y="767.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (535 samples, 0.49%)</title><rect x="25.9771%" y="805" width="0.4861%" height="15" fill="rgb(215,193,15)" fg:x="28592" fg:w="535"/><text x="26.2271%" y="815.50"></text></g><g><title>abi_stable::std_types::map::map_key::MapKey&lt;K&gt;::as_mut (15 samples, 0.01%)</title><rect x="26.8312%" y="597" width="0.0136%" height="15" fill="rgb(232,15,44)" fg:x="29532" fg:w="15"/><text x="27.0812%" y="607.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (22 samples, 0.02%)</title><rect x="27.2755%" y="517" width="0.0200%" height="15" fill="rgb(212,3,48)" fg:x="30021" fg:w="22"/><text x="27.5255%" y="527.50"></text></g><g><title>core::ptr::write (22 samples, 0.02%)</title><rect x="27.2755%" y="501" width="0.0200%" height="15" fill="rgb(218,128,7)" fg:x="30021" fg:w="22"/><text x="27.5255%" y="511.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::write (27 samples, 0.02%)</title><rect x="27.2755%" y="533" width="0.0245%" height="15" fill="rgb(226,216,39)" fg:x="30021" fg:w="27"/><text x="27.5255%" y="543.50"></text></g><g><title>core::mem::swap (216 samples, 0.20%)</title><rect x="27.3409%" y="469" width="0.1962%" height="15" fill="rgb(243,47,51)" fg:x="30093" fg:w="216"/><text x="27.5909%" y="479.50"></text></g><g><title>core::mem::swap_simple (216 samples, 0.20%)</title><rect x="27.3409%" y="453" width="0.1962%" height="15" fill="rgb(241,183,40)" fg:x="30093" fg:w="216"/><text x="27.5909%" y="463.50"></text></g><g><title>hashbrown::raw::inner::TableLayout::calculate_layout_for (17 samples, 0.02%)</title><rect x="27.5762%" y="421" width="0.0154%" height="15" fill="rgb(231,217,32)" fg:x="30352" fg:w="17"/><text x="27.8262%" y="431.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (38 samples, 0.03%)</title><rect x="27.5916%" y="421" width="0.0345%" height="15" fill="rgb(229,61,38)" fg:x="30369" fg:w="38"/><text x="27.8416%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (38 samples, 0.03%)</title><rect x="27.5916%" y="405" width="0.0345%" height="15" fill="rgb(225,210,5)" fg:x="30369" fg:w="38"/><text x="27.8416%" y="415.50"></text></g><g><title>alloc::alloc::alloc (38 samples, 0.03%)</title><rect x="27.5916%" y="389" width="0.0345%" height="15" fill="rgb(231,79,45)" fg:x="30369" fg:w="38"/><text x="27.8416%" y="399.50"></text></g><g><title>__rg_alloc (38 samples, 0.03%)</title><rect x="27.5916%" y="373" width="0.0345%" height="15" fill="rgb(224,100,7)" fg:x="30369" fg:w="38"/><text x="27.8416%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (38 samples, 0.03%)</title><rect x="27.5916%" y="357" width="0.0345%" height="15" fill="rgb(241,198,18)" fg:x="30369" fg:w="38"/><text x="27.8416%" y="367.50"></text></g><g><title>sn_rust_alloc (38 samples, 0.03%)</title><rect x="27.5916%" y="341" width="0.0345%" height="15" fill="rgb(252,97,53)" fg:x="30369" fg:w="38"/><text x="27.8416%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (64 samples, 0.06%)</title><rect x="27.5725%" y="437" width="0.0581%" height="15" fill="rgb(220,88,7)" fg:x="30348" fg:w="64"/><text x="27.8225%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (106 samples, 0.10%)</title><rect x="27.5389%" y="469" width="0.0963%" height="15" fill="rgb(213,176,14)" fg:x="30311" fg:w="106"/><text x="27.7889%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (95 samples, 0.09%)</title><rect x="27.5489%" y="453" width="0.0863%" height="15" fill="rgb(246,73,7)" fg:x="30322" fg:w="95"/><text x="27.7989%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (339 samples, 0.31%)</title><rect x="27.3300%" y="485" width="0.3080%" height="15" fill="rgb(245,64,36)" fg:x="30081" fg:w="339"/><text x="27.5800%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (372 samples, 0.34%)</title><rect x="27.3091%" y="533" width="0.3380%" height="15" fill="rgb(245,80,10)" fg:x="30058" fg:w="372"/><text x="27.5591%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (368 samples, 0.33%)</title><rect x="27.3127%" y="517" width="0.3343%" height="15" fill="rgb(232,107,50)" fg:x="30062" fg:w="368"/><text x="27.5627%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (363 samples, 0.33%)</title><rect x="27.3172%" y="501" width="0.3298%" height="15" fill="rgb(253,3,0)" fg:x="30067" fg:w="363"/><text x="27.5672%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (17 samples, 0.02%)</title><rect x="27.6679%" y="517" width="0.0154%" height="15" fill="rgb(212,99,53)" fg:x="30453" fg:w="17"/><text x="27.9179%" y="527.50"></text></g><g><title>hashbrown::raw::inner::is_full (19 samples, 0.02%)</title><rect x="27.6888%" y="517" width="0.0173%" height="15" fill="rgb(249,111,54)" fg:x="30476" fg:w="19"/><text x="27.9388%" y="527.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (16 samples, 0.01%)</title><rect x="27.7061%" y="517" width="0.0145%" height="15" fill="rgb(249,55,30)" fg:x="30495" fg:w="16"/><text x="27.9561%" y="527.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (16 samples, 0.01%)</title><rect x="27.7061%" y="501" width="0.0145%" height="15" fill="rgb(237,47,42)" fg:x="30495" fg:w="16"/><text x="27.9561%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (16 samples, 0.01%)</title><rect x="27.7061%" y="485" width="0.0145%" height="15" fill="rgb(211,20,18)" fg:x="30495" fg:w="16"/><text x="27.9561%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_insert_slot (106 samples, 0.10%)</title><rect x="27.6470%" y="533" width="0.0963%" height="15" fill="rgb(231,203,46)" fg:x="30430" fg:w="106"/><text x="27.8970%" y="543.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (25 samples, 0.02%)</title><rect x="27.7206%" y="517" width="0.0227%" height="15" fill="rgb(237,142,3)" fg:x="30511" fg:w="25"/><text x="27.9706%" y="527.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (25 samples, 0.02%)</title><rect x="27.7206%" y="501" width="0.0227%" height="15" fill="rgb(241,107,1)" fg:x="30511" fg:w="25"/><text x="27.9706%" y="511.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert_hashed_nocheck (878 samples, 0.80%)</title><rect x="26.9638%" y="581" width="0.7977%" height="15" fill="rgb(229,83,13)" fg:x="29678" fg:w="878"/><text x="27.2138%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_entry (687 samples, 0.62%)</title><rect x="27.1374%" y="565" width="0.6242%" height="15" fill="rgb(241,91,40)" fg:x="29869" fg:w="687"/><text x="27.3874%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (548 samples, 0.50%)</title><rect x="27.2636%" y="549" width="0.4979%" height="15" fill="rgb(225,3,45)" fg:x="30008" fg:w="548"/><text x="27.5136%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::record_item_insert_at (20 samples, 0.02%)</title><rect x="27.7434%" y="533" width="0.0182%" height="15" fill="rgb(244,223,14)" fg:x="30536" fg:w="20"/><text x="27.9934%" y="543.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (16 samples, 0.01%)</title><rect x="27.7788%" y="533" width="0.0145%" height="15" fill="rgb(224,124,37)" fg:x="30575" fg:w="16"/><text x="28.0288%" y="543.50"></text></g><g><title>&lt;byteorder::LittleEndian as byteorder::ByteOrder&gt;::read_u32 (16 samples, 0.01%)</title><rect x="27.8251%" y="469" width="0.0145%" height="15" fill="rgb(251,171,30)" fg:x="30626" fg:w="16"/><text x="28.0751%" y="479.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (16 samples, 0.01%)</title><rect x="27.8251%" y="453" width="0.0145%" height="15" fill="rgb(236,46,54)" fg:x="30626" fg:w="16"/><text x="28.0751%" y="463.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (16 samples, 0.01%)</title><rect x="27.8251%" y="437" width="0.0145%" height="15" fill="rgb(245,213,5)" fg:x="30626" fg:w="16"/><text x="28.0751%" y="447.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (16 samples, 0.01%)</title><rect x="27.8251%" y="421" width="0.0145%" height="15" fill="rgb(230,144,27)" fg:x="30626" fg:w="16"/><text x="28.0751%" y="431.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (16 samples, 0.01%)</title><rect x="27.8251%" y="405" width="0.0145%" height="15" fill="rgb(220,86,6)" fg:x="30626" fg:w="16"/><text x="28.0751%" y="415.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (14 samples, 0.01%)</title><rect x="27.8460%" y="469" width="0.0127%" height="15" fill="rgb(240,20,13)" fg:x="30649" fg:w="14"/><text x="28.0960%" y="479.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (57 samples, 0.05%)</title><rect x="27.8079%" y="517" width="0.0518%" height="15" fill="rgb(217,89,34)" fg:x="30607" fg:w="57"/><text x="28.0579%" y="527.50"></text></g><g><title>fxhash::write (57 samples, 0.05%)</title><rect x="27.8079%" y="501" width="0.0518%" height="15" fill="rgb(229,13,5)" fg:x="30607" fg:w="57"/><text x="28.0579%" y="511.50"></text></g><g><title>fxhash::write64 (57 samples, 0.05%)</title><rect x="27.8079%" y="485" width="0.0518%" height="15" fill="rgb(244,67,35)" fg:x="30607" fg:w="57"/><text x="28.0579%" y="495.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (1,548 samples, 1.41%)</title><rect x="26.4632%" y="677" width="1.4064%" height="15" fill="rgb(221,40,2)" fg:x="29127" fg:w="1548"/><text x="26.7132%" y="687.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (1,548 samples, 1.41%)</title><rect x="26.4632%" y="661" width="1.4064%" height="15" fill="rgb(237,157,21)" fg:x="29127" fg:w="1548"/><text x="26.7132%" y="671.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}} (1,545 samples, 1.40%)</title><rect x="26.4659%" y="645" width="1.4037%" height="15" fill="rgb(222,94,11)" fg:x="29130" fg:w="1545"/><text x="26.7159%" y="655.50"></text></g><g><title>abi_stable::traits::ErasedType::run_downcast_as_mut (1,385 samples, 1.26%)</title><rect x="26.6113%" y="629" width="1.2583%" height="15" fill="rgb(249,113,6)" fg:x="29290" fg:w="1385"/><text x="26.8613%" y="639.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}}::{{closure}} (1,291 samples, 1.17%)</title><rect x="26.6967%" y="613" width="1.1729%" height="15" fill="rgb(238,137,36)" fg:x="29384" fg:w="1291"/><text x="26.9467%" y="623.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert (1,128 samples, 1.02%)</title><rect x="26.8448%" y="597" width="1.0248%" height="15" fill="rgb(210,102,26)" fg:x="29547" fg:w="1128"/><text x="27.0948%" y="607.50"></text></g><g><title>hashbrown::map::make_insert_hash (119 samples, 0.11%)</title><rect x="27.7615%" y="581" width="0.1081%" height="15" fill="rgb(218,30,30)" fg:x="30556" fg:w="119"/><text x="28.0115%" y="591.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (107 samples, 0.10%)</title><rect x="27.7724%" y="565" width="0.0972%" height="15" fill="rgb(214,67,26)" fg:x="30568" fg:w="107"/><text x="28.0224%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::hash::Hash&gt;::hash (107 samples, 0.10%)</title><rect x="27.7724%" y="549" width="0.0972%" height="15" fill="rgb(251,9,53)" fg:x="30568" fg:w="107"/><text x="28.0224%" y="559.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (84 samples, 0.08%)</title><rect x="27.7933%" y="533" width="0.0763%" height="15" fill="rgb(228,204,25)" fg:x="30591" fg:w="84"/><text x="28.0433%" y="543.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (15 samples, 0.01%)</title><rect x="28.0795%" y="453" width="0.0136%" height="15" fill="rgb(207,153,8)" fg:x="30906" fg:w="15"/><text x="28.3295%" y="463.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (215 samples, 0.20%)</title><rect x="27.9014%" y="613" width="0.1953%" height="15" fill="rgb(242,9,16)" fg:x="30710" fg:w="215"/><text x="28.1514%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (215 samples, 0.20%)</title><rect x="27.9014%" y="597" width="0.1953%" height="15" fill="rgb(217,211,10)" fg:x="30710" fg:w="215"/><text x="28.1514%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (193 samples, 0.18%)</title><rect x="27.9214%" y="581" width="0.1753%" height="15" fill="rgb(219,228,52)" fg:x="30732" fg:w="193"/><text x="28.1714%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (170 samples, 0.15%)</title><rect x="27.9423%" y="565" width="0.1545%" height="15" fill="rgb(231,92,29)" fg:x="30755" fg:w="170"/><text x="28.1923%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (166 samples, 0.15%)</title><rect x="27.9460%" y="549" width="0.1508%" height="15" fill="rgb(232,8,23)" fg:x="30759" fg:w="166"/><text x="28.1960%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (166 samples, 0.15%)</title><rect x="27.9460%" y="533" width="0.1508%" height="15" fill="rgb(216,211,34)" fg:x="30759" fg:w="166"/><text x="28.1960%" y="543.50"></text></g><g><title>alloc::alloc::alloc (166 samples, 0.15%)</title><rect x="27.9460%" y="517" width="0.1508%" height="15" fill="rgb(236,151,0)" fg:x="30759" fg:w="166"/><text x="28.1960%" y="527.50"></text></g><g><title>__rg_alloc (166 samples, 0.15%)</title><rect x="27.9460%" y="501" width="0.1508%" height="15" fill="rgb(209,168,3)" fg:x="30759" fg:w="166"/><text x="28.1960%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (166 samples, 0.15%)</title><rect x="27.9460%" y="485" width="0.1508%" height="15" fill="rgb(208,129,28)" fg:x="30759" fg:w="166"/><text x="28.1960%" y="495.50"></text></g><g><title>sn_rust_alloc (164 samples, 0.15%)</title><rect x="27.9478%" y="469" width="0.1490%" height="15" fill="rgb(229,78,22)" fg:x="30761" fg:w="164"/><text x="28.1978%" y="479.50"></text></g><g><title>core::cmp::Ord::max (12 samples, 0.01%)</title><rect x="28.1567%" y="485" width="0.0109%" height="15" fill="rgb(228,187,13)" fg:x="30991" fg:w="12"/><text x="28.4067%" y="495.50"></text></g><g><title>core::cmp::max_by (12 samples, 0.01%)</title><rect x="28.1567%" y="469" width="0.0109%" height="15" fill="rgb(240,119,24)" fg:x="30991" fg:w="12"/><text x="28.4067%" y="479.50"></text></g><g><title>core::mem::swap (732 samples, 0.67%)</title><rect x="28.2185%" y="469" width="0.6651%" height="15" fill="rgb(209,194,42)" fg:x="31059" fg:w="732"/><text x="28.4685%" y="479.50"></text></g><g><title>core::mem::swap_simple (732 samples, 0.67%)</title><rect x="28.2185%" y="453" width="0.6651%" height="15" fill="rgb(247,200,46)" fg:x="31059" fg:w="732"/><text x="28.4685%" y="463.50"></text></g><g><title>core::ptr::read (24 samples, 0.02%)</title><rect x="28.8618%" y="437" width="0.0218%" height="15" fill="rgb(218,76,16)" fg:x="31767" fg:w="24"/><text x="29.1118%" y="447.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (24 samples, 0.02%)</title><rect x="28.8945%" y="453" width="0.0218%" height="15" fill="rgb(225,21,48)" fg:x="31803" fg:w="24"/><text x="29.1445%" y="463.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (76 samples, 0.07%)</title><rect x="28.9717%" y="437" width="0.0690%" height="15" fill="rgb(239,223,50)" fg:x="31888" fg:w="76"/><text x="29.2217%" y="447.50"></text></g><g><title>core::intrinsics::write_bytes (76 samples, 0.07%)</title><rect x="28.9717%" y="421" width="0.0690%" height="15" fill="rgb(244,45,21)" fg:x="31888" fg:w="76"/><text x="29.2217%" y="431.50"></text></g><g><title>[libc-2.31.so] (62 samples, 0.06%)</title><rect x="28.9844%" y="405" width="0.0563%" height="15" fill="rgb(232,33,43)" fg:x="31902" fg:w="62"/><text x="29.2344%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (21 samples, 0.02%)</title><rect x="29.0644%" y="405" width="0.0191%" height="15" fill="rgb(209,8,3)" fg:x="31990" fg:w="21"/><text x="29.3144%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (21 samples, 0.02%)</title><rect x="29.0644%" y="389" width="0.0191%" height="15" fill="rgb(214,25,53)" fg:x="31990" fg:w="21"/><text x="29.3144%" y="399.50"></text></g><g><title>hashbrown::raw::inner::TableLayout::calculate_layout_for (49 samples, 0.04%)</title><rect x="29.0489%" y="421" width="0.0445%" height="15" fill="rgb(254,186,54)" fg:x="31973" fg:w="49"/><text x="29.2989%" y="431.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (839 samples, 0.76%)</title><rect x="29.6140%" y="325" width="0.7623%" height="15" fill="rgb(208,174,49)" fg:x="32595" fg:w="839"/><text x="29.8640%" y="335.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (1,511 samples, 1.37%)</title><rect x="29.0935%" y="421" width="1.3728%" height="15" fill="rgb(233,191,51)" fg:x="32022" fg:w="1511"/><text x="29.3435%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (1,511 samples, 1.37%)</title><rect x="29.0935%" y="405" width="1.3728%" height="15" fill="rgb(222,134,10)" fg:x="32022" fg:w="1511"/><text x="29.3435%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1,511 samples, 1.37%)</title><rect x="29.0935%" y="389" width="1.3728%" height="15" fill="rgb(230,226,20)" fg:x="32022" fg:w="1511"/><text x="29.3435%" y="399.50"></text></g><g><title>__rg_alloc (1,511 samples, 1.37%)</title><rect x="29.0935%" y="373" width="1.3728%" height="15" fill="rgb(251,111,25)" fg:x="32022" fg:w="1511"/><text x="29.3435%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1,511 samples, 1.37%)</title><rect x="29.0935%" y="357" width="1.3728%" height="15" fill="rgb(224,40,46)" fg:x="32022" fg:w="1511"/><text x="29.3435%" y="367.50"></text></g><g><title>sn_rust_alloc (1,422 samples, 1.29%)</title><rect x="29.1743%" y="341" width="1.2920%" height="15" fill="rgb(236,108,47)" fg:x="32111" fg:w="1422"/><text x="29.4243%" y="351.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (99 samples, 0.09%)</title><rect x="30.3763%" y="325" width="0.0899%" height="15" fill="rgb(234,93,0)" fg:x="33434" fg:w="99"/><text x="30.6263%" y="335.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (1,586 samples, 1.44%)</title><rect x="29.0408%" y="437" width="1.4410%" height="15" fill="rgb(224,213,32)" fg:x="31964" fg:w="1586"/><text x="29.2908%" y="447.50"></text></g><g><title>hashbrown::raw::inner::bucket_mask_to_capacity (17 samples, 0.02%)</title><rect x="30.4663%" y="421" width="0.0154%" height="15" fill="rgb(251,11,48)" fg:x="33533" fg:w="17"/><text x="30.7163%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (1,826 samples, 1.66%)</title><rect x="28.8872%" y="469" width="1.6590%" height="15" fill="rgb(236,173,5)" fg:x="31795" fg:w="1826"/><text x="29.1372%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (1,794 samples, 1.63%)</title><rect x="28.9163%" y="453" width="1.6299%" height="15" fill="rgb(230,95,12)" fg:x="31827" fg:w="1794"/><text x="29.1663%" y="463.50"></text></g><g><title>hashbrown::raw::inner::capacity_to_buckets (71 samples, 0.06%)</title><rect x="30.4817%" y="437" width="0.0645%" height="15" fill="rgb(232,209,1)" fg:x="33550" fg:w="71"/><text x="30.7317%" y="447.50"></text></g><g><title>core::num::&lt;impl usize&gt;::next_power_of_two (42 samples, 0.04%)</title><rect x="30.5081%" y="421" width="0.0382%" height="15" fill="rgb(232,6,1)" fg:x="33579" fg:w="42"/><text x="30.7581%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::one_less_than_next_power_of_two (42 samples, 0.04%)</title><rect x="30.5081%" y="405" width="0.0382%" height="15" fill="rgb(210,224,50)" fg:x="33579" fg:w="42"/><text x="30.7581%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (2,630 samples, 2.39%)</title><rect x="28.1676%" y="485" width="2.3895%" height="15" fill="rgb(228,127,35)" fg:x="31003" fg:w="2630"/><text x="28.4176%" y="495.50">ha..</text></g><g><title>hashbrown::raw::inner::is_full (12 samples, 0.01%)</title><rect x="30.5462%" y="469" width="0.0109%" height="15" fill="rgb(245,102,45)" fg:x="33621" fg:w="12"/><text x="30.7962%" y="479.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (4,524 samples, 4.11%)</title><rect x="26.4632%" y="757" width="4.1103%" height="15" fill="rgb(214,1,49)" fg:x="29127" fg:w="4524"/><text x="26.7132%" y="767.50">trem..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (4,524 samples, 4.11%)</title><rect x="26.4632%" y="741" width="4.1103%" height="15" fill="rgb(226,163,40)" fg:x="29127" fg:w="4524"/><text x="26.7132%" y="751.50">trem..</text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (4,524 samples, 4.11%)</title><rect x="26.4632%" y="725" width="4.1103%" height="15" fill="rgb(239,212,28)" fg:x="29127" fg:w="4524"/><text x="26.7132%" y="735.50">trem..</text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (4,524 samples, 4.11%)</title><rect x="26.4632%" y="709" width="4.1103%" height="15" fill="rgb(220,20,13)" fg:x="29127" fg:w="4524"/><text x="26.7132%" y="719.50">trem..</text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (4,524 samples, 4.11%)</title><rect x="26.4632%" y="693" width="4.1103%" height="15" fill="rgb(210,164,35)" fg:x="29127" fg:w="4524"/><text x="26.7132%" y="703.50">abi_..</text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut::{{closure}} (2,976 samples, 2.70%)</title><rect x="27.8696%" y="677" width="2.7038%" height="15" fill="rgb(248,109,41)" fg:x="30675" fg:w="2976"/><text x="28.1196%" y="687.50">tr..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (2,976 samples, 2.70%)</title><rect x="27.8696%" y="661" width="2.7038%" height="15" fill="rgb(238,23,50)" fg:x="30675" fg:w="2976"/><text x="28.1196%" y="671.50">tr..</text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (2,976 samples, 2.70%)</title><rect x="27.8696%" y="645" width="2.7038%" height="15" fill="rgb(211,48,49)" fg:x="30675" fg:w="2976"/><text x="28.1196%" y="655.50">&lt;t..</text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (2,976 samples, 2.70%)</title><rect x="27.8696%" y="629" width="2.7038%" height="15" fill="rgb(223,36,21)" fg:x="30675" fg:w="2976"/><text x="28.1196%" y="639.50">ab..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (2,726 samples, 2.48%)</title><rect x="28.0968%" y="613" width="2.4767%" height="15" fill="rgb(207,123,46)" fg:x="30925" fg:w="2726"/><text x="28.3468%" y="623.50">ab..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (2,726 samples, 2.48%)</title><rect x="28.0968%" y="597" width="2.4767%" height="15" fill="rgb(240,218,32)" fg:x="30925" fg:w="2726"/><text x="28.3468%" y="607.50">ab..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (2,717 samples, 2.47%)</title><rect x="28.1050%" y="581" width="2.4685%" height="15" fill="rgb(252,5,43)" fg:x="30934" fg:w="2717"/><text x="28.3550%" y="591.50">ab..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (2,717 samples, 2.47%)</title><rect x="28.1050%" y="565" width="2.4685%" height="15" fill="rgb(252,84,19)" fg:x="30934" fg:w="2717"/><text x="28.3550%" y="575.50">ab..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (2,717 samples, 2.47%)</title><rect x="28.1050%" y="549" width="2.4685%" height="15" fill="rgb(243,152,39)" fg:x="30934" fg:w="2717"/><text x="28.3550%" y="559.50">ha..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (2,717 samples, 2.47%)</title><rect x="28.1050%" y="533" width="2.4685%" height="15" fill="rgb(234,160,15)" fg:x="30934" fg:w="2717"/><text x="28.3550%" y="543.50">ha..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (2,714 samples, 2.47%)</title><rect x="28.1077%" y="517" width="2.4658%" height="15" fill="rgb(237,34,20)" fg:x="30937" fg:w="2714"/><text x="28.3577%" y="527.50">ha..</text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (2,697 samples, 2.45%)</title><rect x="28.1231%" y="501" width="2.4503%" height="15" fill="rgb(229,97,13)" fg:x="30954" fg:w="2697"/><text x="28.3731%" y="511.50">ha..</text></g><g><title>hashbrown::raw::inner::bucket_mask_to_capacity (18 samples, 0.02%)</title><rect x="30.5571%" y="485" width="0.0164%" height="15" fill="rgb(234,71,50)" fg:x="33633" fg:w="18"/><text x="30.8071%" y="495.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (5,142 samples, 4.67%)</title><rect x="25.9717%" y="901" width="4.6717%" height="15" fill="rgb(253,155,4)" fg:x="28586" fg:w="5142"/><text x="26.2217%" y="911.50">&lt;trem..</text></g><g><title>tremor_script::srs::EventPayload::rent_mut (5,136 samples, 4.67%)</title><rect x="25.9771%" y="885" width="4.6663%" height="15" fill="rgb(222,185,37)" fg:x="28592" fg:w="5136"/><text x="26.2271%" y="895.50">tremo..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (5,136 samples, 4.67%)</title><rect x="25.9771%" y="869" width="4.6663%" height="15" fill="rgb(251,177,13)" fg:x="28592" fg:w="5136"/><text x="26.2271%" y="879.50">&lt;trem..</text></g><g><title>tremor_script::script::Script::run (5,136 samples, 4.67%)</title><rect x="25.9771%" y="853" width="4.6663%" height="15" fill="rgb(250,179,40)" fg:x="28592" fg:w="5136"/><text x="26.2271%" y="863.50">tremo..</text></g><g><title>tremor_script::ast::Script::run (5,136 samples, 4.67%)</title><rect x="25.9771%" y="837" width="4.6663%" height="15" fill="rgb(242,44,2)" fg:x="28592" fg:w="5136"/><text x="26.2271%" y="847.50">tremo..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (5,136 samples, 4.67%)</title><rect x="25.9771%" y="821" width="4.6663%" height="15" fill="rgb(216,177,13)" fg:x="28592" fg:w="5136"/><text x="26.2271%" y="831.50">tremo..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (4,601 samples, 4.18%)</title><rect x="26.4632%" y="805" width="4.1802%" height="15" fill="rgb(216,106,43)" fg:x="29127" fg:w="4601"/><text x="26.7132%" y="815.50">tremo..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (4,601 samples, 4.18%)</title><rect x="26.4632%" y="789" width="4.1802%" height="15" fill="rgb(216,183,2)" fg:x="29127" fg:w="4601"/><text x="26.7132%" y="799.50">tremo..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (4,601 samples, 4.18%)</title><rect x="26.4632%" y="773" width="4.1802%" height="15" fill="rgb(249,75,3)" fg:x="29127" fg:w="4601"/><text x="26.7132%" y="783.50">tremo..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (77 samples, 0.07%)</title><rect x="30.5735%" y="757" width="0.0700%" height="15" fill="rgb(219,67,39)" fg:x="33651" fg:w="77"/><text x="30.8235%" y="767.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (77 samples, 0.07%)</title><rect x="30.5735%" y="741" width="0.0700%" height="15" fill="rgb(253,228,2)" fg:x="33651" fg:w="77"/><text x="30.8235%" y="751.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (26 samples, 0.02%)</title><rect x="30.6580%" y="901" width="0.0236%" height="15" fill="rgb(235,138,27)" fg:x="33744" fg:w="26"/><text x="30.9080%" y="911.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (17 samples, 0.02%)</title><rect x="30.6816%" y="901" width="0.0154%" height="15" fill="rgb(236,97,51)" fg:x="33770" fg:w="17"/><text x="30.9316%" y="911.50"></text></g><g><title>[libc-2.31.so] (101 samples, 0.09%)</title><rect x="30.6970%" y="901" width="0.0918%" height="15" fill="rgb(240,80,30)" fg:x="33787" fg:w="101"/><text x="30.9470%" y="911.50"></text></g><g><title>__clock_gettime (17 samples, 0.02%)</title><rect x="30.7970%" y="901" width="0.0154%" height="15" fill="rgb(230,178,19)" fg:x="33897" fg:w="17"/><text x="31.0470%" y="911.50"></text></g><g><title>__vdso_clock_gettime (18 samples, 0.02%)</title><rect x="30.8151%" y="901" width="0.0164%" height="15" fill="rgb(210,190,27)" fg:x="33917" fg:w="18"/><text x="31.0651%" y="911.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (22 samples, 0.02%)</title><rect x="30.8315%" y="901" width="0.0200%" height="15" fill="rgb(222,107,31)" fg:x="33935" fg:w="22"/><text x="31.0815%" y="911.50"></text></g><g><title>abi_stable::erased_types::iterator::next (34 samples, 0.03%)</title><rect x="30.8515%" y="901" width="0.0309%" height="15" fill="rgb(216,127,34)" fg:x="33957" fg:w="34"/><text x="31.1015%" y="911.50"></text></g><g><title>abi_stable::std_types::arc::vtable_mod::destructor_arc (15 samples, 0.01%)</title><rect x="30.8878%" y="901" width="0.0136%" height="15" fill="rgb(234,116,52)" fg:x="33997" fg:w="15"/><text x="31.1378%" y="911.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (32 samples, 0.03%)</title><rect x="30.9069%" y="901" width="0.0291%" height="15" fill="rgb(222,124,15)" fg:x="34018" fg:w="32"/><text x="31.1569%" y="911.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (13 samples, 0.01%)</title><rect x="30.9360%" y="901" width="0.0118%" height="15" fill="rgb(231,179,28)" fg:x="34050" fg:w="13"/><text x="31.1860%" y="911.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (99 samples, 0.09%)</title><rect x="30.9478%" y="901" width="0.0899%" height="15" fill="rgb(226,93,45)" fg:x="34063" fg:w="99"/><text x="31.1978%" y="911.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (34 samples, 0.03%)</title><rect x="31.0377%" y="901" width="0.0309%" height="15" fill="rgb(215,8,51)" fg:x="34162" fg:w="34"/><text x="31.2877%" y="911.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (45 samples, 0.04%)</title><rect x="31.0986%" y="901" width="0.0409%" height="15" fill="rgb(223,106,5)" fg:x="34229" fg:w="45"/><text x="31.3486%" y="911.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (44 samples, 0.04%)</title><rect x="31.1395%" y="901" width="0.0400%" height="15" fill="rgb(250,191,5)" fg:x="34274" fg:w="44"/><text x="31.3895%" y="911.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (15 samples, 0.01%)</title><rect x="31.1658%" y="885" width="0.0136%" height="15" fill="rgb(242,132,44)" fg:x="34303" fg:w="15"/><text x="31.4158%" y="895.50"></text></g><g><title>core::mem::drop (15 samples, 0.01%)</title><rect x="31.1658%" y="869" width="0.0136%" height="15" fill="rgb(251,152,29)" fg:x="34303" fg:w="15"/><text x="31.4158%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="31.1658%" y="853" width="0.0136%" height="15" fill="rgb(218,179,5)" fg:x="34303" fg:w="15"/><text x="31.4158%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="31.1658%" y="837" width="0.0136%" height="15" fill="rgb(227,67,19)" fg:x="34303" fg:w="15"/><text x="31.4158%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::vec::private::RVec&lt;u8&gt;]&gt; (15 samples, 0.01%)</title><rect x="31.1658%" y="821" width="0.0136%" height="15" fill="rgb(233,119,31)" fg:x="34303" fg:w="15"/><text x="31.4158%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (15 samples, 0.01%)</title><rect x="31.1658%" y="805" width="0.0136%" height="15" fill="rgb(241,120,22)" fg:x="34303" fg:w="15"/><text x="31.4158%" y="815.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (15 samples, 0.01%)</title><rect x="31.1658%" y="789" width="0.0136%" height="15" fill="rgb(224,102,30)" fg:x="34303" fg:w="15"/><text x="31.4158%" y="799.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (14 samples, 0.01%)</title><rect x="31.2013%" y="901" width="0.0127%" height="15" fill="rgb(210,164,37)" fg:x="34342" fg:w="14"/><text x="31.4513%" y="911.50"></text></g><g><title>[libc-2.31.so] (111 samples, 0.10%)</title><rect x="31.4021%" y="533" width="0.1008%" height="15" fill="rgb(226,191,16)" fg:x="34563" fg:w="111"/><text x="31.6521%" y="543.50"></text></g><g><title>&lt;abi_stable::sabi_types::constructor::Constructor&lt;T&gt; as core::cmp::PartialEq&gt;::eq (23 samples, 0.02%)</title><rect x="31.7573%" y="469" width="0.0209%" height="15" fill="rgb(214,40,45)" fg:x="34954" fg:w="23"/><text x="32.0073%" y="479.50"></text></g><g><title>abi_stable::sabi_types::constructor::Constructor&lt;T&gt;::get (16 samples, 0.01%)</title><rect x="31.7637%" y="453" width="0.0145%" height="15" fill="rgb(244,29,26)" fg:x="34961" fg:w="16"/><text x="32.0137%" y="463.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (87 samples, 0.08%)</title><rect x="31.7437%" y="517" width="0.0790%" height="15" fill="rgb(216,16,5)" fg:x="34939" fg:w="87"/><text x="31.9937%" y="527.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::convert::From&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from (85 samples, 0.08%)</title><rect x="31.7455%" y="501" width="0.0772%" height="15" fill="rgb(249,76,35)" fg:x="34941" fg:w="85"/><text x="31.9955%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::into_vec (80 samples, 0.07%)</title><rect x="31.7500%" y="485" width="0.0727%" height="15" fill="rgb(207,11,44)" fg:x="34946" fg:w="80"/><text x="32.0000%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::from_raw_parts (49 samples, 0.04%)</title><rect x="31.7782%" y="469" width="0.0445%" height="15" fill="rgb(228,190,49)" fg:x="34977" fg:w="49"/><text x="32.0282%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (49 samples, 0.04%)</title><rect x="31.7782%" y="453" width="0.0445%" height="15" fill="rgb(214,173,12)" fg:x="34977" fg:w="49"/><text x="32.0282%" y="463.50"></text></g><g><title>[libc-2.31.so] (146 samples, 0.13%)</title><rect x="31.8245%" y="501" width="0.1326%" height="15" fill="rgb(218,26,35)" fg:x="35028" fg:w="146"/><text x="32.0745%" y="511.50"></text></g><g><title>[libc-2.31.so] (48 samples, 0.04%)</title><rect x="32.0689%" y="485" width="0.0436%" height="15" fill="rgb(220,200,19)" fg:x="35297" fg:w="48"/><text x="32.3189%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (100 samples, 0.09%)</title><rect x="32.1534%" y="245" width="0.0909%" height="15" fill="rgb(239,95,49)" fg:x="35390" fg:w="100"/><text x="32.4034%" y="255.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (137 samples, 0.12%)</title><rect x="32.1216%" y="405" width="0.1245%" height="15" fill="rgb(235,85,53)" fg:x="35355" fg:w="137"/><text x="32.3716%" y="415.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (137 samples, 0.12%)</title><rect x="32.1216%" y="389" width="0.1245%" height="15" fill="rgb(233,133,31)" fg:x="35355" fg:w="137"/><text x="32.3716%" y="399.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (132 samples, 0.12%)</title><rect x="32.1262%" y="373" width="0.1199%" height="15" fill="rgb(218,25,20)" fg:x="35360" fg:w="132"/><text x="32.3762%" y="383.50"></text></g><g><title>alloc::alloc::exchange_malloc (127 samples, 0.12%)</title><rect x="32.1307%" y="357" width="0.1154%" height="15" fill="rgb(252,210,38)" fg:x="35365" fg:w="127"/><text x="32.3807%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (127 samples, 0.12%)</title><rect x="32.1307%" y="341" width="0.1154%" height="15" fill="rgb(242,134,21)" fg:x="35365" fg:w="127"/><text x="32.3807%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (127 samples, 0.12%)</title><rect x="32.1307%" y="325" width="0.1154%" height="15" fill="rgb(213,28,48)" fg:x="35365" fg:w="127"/><text x="32.3807%" y="335.50"></text></g><g><title>alloc::alloc::alloc (127 samples, 0.12%)</title><rect x="32.1307%" y="309" width="0.1154%" height="15" fill="rgb(250,196,2)" fg:x="35365" fg:w="127"/><text x="32.3807%" y="319.50"></text></g><g><title>__rg_alloc (127 samples, 0.12%)</title><rect x="32.1307%" y="293" width="0.1154%" height="15" fill="rgb(227,5,17)" fg:x="35365" fg:w="127"/><text x="32.3807%" y="303.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (127 samples, 0.12%)</title><rect x="32.1307%" y="277" width="0.1154%" height="15" fill="rgb(221,226,24)" fg:x="35365" fg:w="127"/><text x="32.3807%" y="287.50"></text></g><g><title>sn_rust_alloc (127 samples, 0.12%)</title><rect x="32.1307%" y="261" width="0.1154%" height="15" fill="rgb(211,5,48)" fg:x="35365" fg:w="127"/><text x="32.3807%" y="271.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (142 samples, 0.13%)</title><rect x="32.1180%" y="421" width="0.1290%" height="15" fill="rgb(219,150,6)" fg:x="35351" fg:w="142"/><text x="32.3680%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (318 samples, 0.29%)</title><rect x="32.1153%" y="485" width="0.2889%" height="15" fill="rgb(251,46,16)" fg:x="35348" fg:w="318"/><text x="32.3653%" y="495.50"></text></g><g><title>core::ops::function::FnOnce::call_once (317 samples, 0.29%)</title><rect x="32.1162%" y="469" width="0.2880%" height="15" fill="rgb(220,204,40)" fg:x="35349" fg:w="317"/><text x="32.3662%" y="479.50"></text></g><g><title>value_trait::Builder::object (317 samples, 0.29%)</title><rect x="32.1162%" y="453" width="0.2880%" height="15" fill="rgb(211,85,2)" fg:x="35349" fg:w="317"/><text x="32.3662%" y="463.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (317 samples, 0.29%)</title><rect x="32.1162%" y="437" width="0.2880%" height="15" fill="rgb(229,17,7)" fg:x="35349" fg:w="317"/><text x="32.3662%" y="447.50"></text></g><g><title>tremor_value::value::Value::Object (173 samples, 0.16%)</title><rect x="32.2470%" y="421" width="0.1572%" height="15" fill="rgb(239,72,28)" fg:x="35493" fg:w="173"/><text x="32.4970%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (54 samples, 0.05%)</title><rect x="32.4115%" y="469" width="0.0491%" height="15" fill="rgb(230,47,54)" fg:x="35674" fg:w="54"/><text x="32.6615%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (54 samples, 0.05%)</title><rect x="32.4115%" y="453" width="0.0491%" height="15" fill="rgb(214,50,8)" fg:x="35674" fg:w="54"/><text x="32.6615%" y="463.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (54 samples, 0.05%)</title><rect x="32.4115%" y="437" width="0.0491%" height="15" fill="rgb(216,198,43)" fg:x="35674" fg:w="54"/><text x="32.6615%" y="447.50"></text></g><g><title>sn_rust_dealloc (43 samples, 0.04%)</title><rect x="32.4215%" y="421" width="0.0391%" height="15" fill="rgb(234,20,35)" fg:x="35685" fg:w="43"/><text x="32.6715%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (53 samples, 0.05%)</title><rect x="32.4632%" y="373" width="0.0482%" height="15" fill="rgb(254,45,19)" fg:x="35731" fg:w="53"/><text x="32.7132%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (53 samples, 0.05%)</title><rect x="32.4632%" y="357" width="0.0482%" height="15" fill="rgb(219,14,44)" fg:x="35731" fg:w="53"/><text x="32.7132%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (45 samples, 0.04%)</title><rect x="32.4705%" y="341" width="0.0409%" height="15" fill="rgb(217,220,26)" fg:x="35739" fg:w="45"/><text x="32.7205%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (45 samples, 0.04%)</title><rect x="32.4705%" y="325" width="0.0409%" height="15" fill="rgb(213,158,28)" fg:x="35739" fg:w="45"/><text x="32.7205%" y="335.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (45 samples, 0.04%)</title><rect x="32.4705%" y="309" width="0.0409%" height="15" fill="rgb(252,51,52)" fg:x="35739" fg:w="45"/><text x="32.7205%" y="319.50"></text></g><g><title>sn_rust_dealloc (34 samples, 0.03%)</title><rect x="32.4805%" y="293" width="0.0309%" height="15" fill="rgb(246,89,16)" fg:x="35750" fg:w="34"/><text x="32.7305%" y="303.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (61 samples, 0.06%)</title><rect x="32.4605%" y="437" width="0.0554%" height="15" fill="rgb(216,158,49)" fg:x="35728" fg:w="61"/><text x="32.7105%" y="447.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (59 samples, 0.05%)</title><rect x="32.4623%" y="421" width="0.0536%" height="15" fill="rgb(236,107,19)" fg:x="35730" fg:w="59"/><text x="32.7123%" y="431.50"></text></g><g><title>core::mem::drop (58 samples, 0.05%)</title><rect x="32.4632%" y="405" width="0.0527%" height="15" fill="rgb(228,185,30)" fg:x="35731" fg:w="58"/><text x="32.7132%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (58 samples, 0.05%)</title><rect x="32.4632%" y="389" width="0.0527%" height="15" fill="rgb(246,134,8)" fg:x="35731" fg:w="58"/><text x="32.7132%" y="399.50"></text></g><g><title>sn_rust_dealloc (15 samples, 0.01%)</title><rect x="32.5159%" y="437" width="0.0136%" height="15" fill="rgb(214,143,50)" fg:x="35789" fg:w="15"/><text x="32.7659%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (132 samples, 0.12%)</title><rect x="32.4106%" y="485" width="0.1199%" height="15" fill="rgb(228,75,8)" fg:x="35673" fg:w="132"/><text x="32.6606%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (77 samples, 0.07%)</title><rect x="32.4605%" y="469" width="0.0700%" height="15" fill="rgb(207,175,4)" fg:x="35728" fg:w="77"/><text x="32.7105%" y="479.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (77 samples, 0.07%)</title><rect x="32.4605%" y="453" width="0.0700%" height="15" fill="rgb(205,108,24)" fg:x="35728" fg:w="77"/><text x="32.7105%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (35 samples, 0.03%)</title><rect x="32.5305%" y="485" width="0.0318%" height="15" fill="rgb(244,120,49)" fg:x="35805" fg:w="35"/><text x="32.7805%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (31 samples, 0.03%)</title><rect x="32.5341%" y="469" width="0.0282%" height="15" fill="rgb(223,47,38)" fg:x="35809" fg:w="31"/><text x="32.7841%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (31 samples, 0.03%)</title><rect x="32.5341%" y="453" width="0.0282%" height="15" fill="rgb(229,179,11)" fg:x="35809" fg:w="31"/><text x="32.7841%" y="463.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (31 samples, 0.03%)</title><rect x="32.5341%" y="437" width="0.0282%" height="15" fill="rgb(231,122,1)" fg:x="35809" fg:w="31"/><text x="32.7841%" y="447.50"></text></g><g><title>sn_rust_dealloc (15 samples, 0.01%)</title><rect x="32.5487%" y="421" width="0.0136%" height="15" fill="rgb(245,119,9)" fg:x="35825" fg:w="15"/><text x="32.7987%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (43 samples, 0.04%)</title><rect x="32.5877%" y="453" width="0.0391%" height="15" fill="rgb(241,163,25)" fg:x="35868" fg:w="43"/><text x="32.8377%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (22 samples, 0.02%)</title><rect x="32.6431%" y="421" width="0.0200%" height="15" fill="rgb(217,214,3)" fg:x="35929" fg:w="22"/><text x="32.8931%" y="431.50"></text></g><g><title>core::cmp::PartialOrd::ge (22 samples, 0.02%)</title><rect x="32.6431%" y="405" width="0.0200%" height="15" fill="rgb(240,86,28)" fg:x="35929" fg:w="22"/><text x="32.8931%" y="415.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (22 samples, 0.02%)</title><rect x="32.6431%" y="389" width="0.0200%" height="15" fill="rgb(215,47,9)" fg:x="35929" fg:w="22"/><text x="32.8931%" y="399.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (22 samples, 0.02%)</title><rect x="32.6431%" y="373" width="0.0200%" height="15" fill="rgb(252,25,45)" fg:x="35929" fg:w="22"/><text x="32.8931%" y="383.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (22 samples, 0.02%)</title><rect x="32.6431%" y="357" width="0.0200%" height="15" fill="rgb(251,164,9)" fg:x="35929" fg:w="22"/><text x="32.8931%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (16 samples, 0.01%)</title><rect x="32.6486%" y="341" width="0.0145%" height="15" fill="rgb(233,194,0)" fg:x="35935" fg:w="16"/><text x="32.8986%" y="351.50"></text></g><g><title>std::time::SystemTime::duration_since (90 samples, 0.08%)</title><rect x="32.5877%" y="469" width="0.0818%" height="15" fill="rgb(249,111,24)" fg:x="35868" fg:w="90"/><text x="32.8377%" y="479.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (47 samples, 0.04%)</title><rect x="32.6268%" y="453" width="0.0427%" height="15" fill="rgb(250,223,3)" fg:x="35911" fg:w="47"/><text x="32.8768%" y="463.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (47 samples, 0.04%)</title><rect x="32.6268%" y="437" width="0.0427%" height="15" fill="rgb(236,178,37)" fg:x="35911" fg:w="47"/><text x="32.8768%" y="447.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,131 samples, 1.03%)</title><rect x="31.8227%" y="517" width="1.0276%" height="15" fill="rgb(241,158,50)" fg:x="35026" fg:w="1131"/><text x="32.0727%" y="527.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (983 samples, 0.89%)</title><rect x="31.9572%" y="501" width="0.8931%" height="15" fill="rgb(213,121,41)" fg:x="35174" fg:w="983"/><text x="32.2072%" y="511.50"></text></g><g><title>tremor_common::time::nanotime (317 samples, 0.29%)</title><rect x="32.5623%" y="485" width="0.2880%" height="15" fill="rgb(240,92,3)" fg:x="35840" fg:w="317"/><text x="32.8123%" y="495.50"></text></g><g><title>std::time::SystemTime::now (199 samples, 0.18%)</title><rect x="32.6695%" y="469" width="0.1808%" height="15" fill="rgb(205,123,3)" fg:x="35958" fg:w="199"/><text x="32.9195%" y="479.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (199 samples, 0.18%)</title><rect x="32.6695%" y="453" width="0.1808%" height="15" fill="rgb(205,97,47)" fg:x="35958" fg:w="199"/><text x="32.9195%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::now (199 samples, 0.18%)</title><rect x="32.6695%" y="437" width="0.1808%" height="15" fill="rgb(247,152,14)" fg:x="35958" fg:w="199"/><text x="32.9195%" y="447.50"></text></g><g><title>__clock_gettime (155 samples, 0.14%)</title><rect x="32.7095%" y="421" width="0.1408%" height="15" fill="rgb(248,195,53)" fg:x="36002" fg:w="155"/><text x="32.9595%" y="431.50"></text></g><g><title>__vdso_clock_gettime (138 samples, 0.13%)</title><rect x="32.7249%" y="405" width="0.1254%" height="15" fill="rgb(226,201,16)" fg:x="36019" fg:w="138"/><text x="32.9749%" y="415.50"></text></g><g><title>[[vdso]] (129 samples, 0.12%)</title><rect x="32.7331%" y="389" width="0.1172%" height="15" fill="rgb(205,98,0)" fg:x="36028" fg:w="129"/><text x="32.9831%" y="399.50"></text></g><g><title>[libc-2.31.so] (237 samples, 0.22%)</title><rect x="32.8503%" y="517" width="0.2153%" height="15" fill="rgb(214,191,48)" fg:x="36157" fg:w="237"/><text x="33.1003%" y="527.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,906 samples, 1.73%)</title><rect x="31.4021%" y="549" width="1.7317%" height="15" fill="rgb(237,112,39)" fg:x="34563" fg:w="1906"/><text x="31.6521%" y="559.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (1,795 samples, 1.63%)</title><rect x="31.5029%" y="533" width="1.6308%" height="15" fill="rgb(247,203,27)" fg:x="34674" fg:w="1795"/><text x="31.7529%" y="543.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data (64 samples, 0.06%)</title><rect x="33.0756%" y="517" width="0.0581%" height="15" fill="rgb(235,124,28)" fg:x="36405" fg:w="64"/><text x="33.3256%" y="527.50"></text></g><g><title>[libc-2.31.so] (143 samples, 0.13%)</title><rect x="33.1356%" y="549" width="0.1299%" height="15" fill="rgb(208,207,46)" fg:x="36471" fg:w="143"/><text x="33.3856%" y="559.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (24 samples, 0.02%)</title><rect x="33.3854%" y="421" width="0.0218%" height="15" fill="rgb(234,176,4)" fg:x="36746" fg:w="24"/><text x="33.6354%" y="431.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (158 samples, 0.14%)</title><rect x="33.2655%" y="549" width="0.1436%" height="15" fill="rgb(230,133,28)" fg:x="36614" fg:w="158"/><text x="33.5155%" y="559.50"></text></g><g><title>alloc::alloc::exchange_malloc (61 samples, 0.06%)</title><rect x="33.3536%" y="533" width="0.0554%" height="15" fill="rgb(211,137,40)" fg:x="36711" fg:w="61"/><text x="33.6036%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (61 samples, 0.06%)</title><rect x="33.3536%" y="517" width="0.0554%" height="15" fill="rgb(254,35,13)" fg:x="36711" fg:w="61"/><text x="33.6036%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (61 samples, 0.06%)</title><rect x="33.3536%" y="501" width="0.0554%" height="15" fill="rgb(225,49,51)" fg:x="36711" fg:w="61"/><text x="33.6036%" y="511.50"></text></g><g><title>alloc::alloc::alloc (59 samples, 0.05%)</title><rect x="33.3554%" y="485" width="0.0536%" height="15" fill="rgb(251,10,15)" fg:x="36713" fg:w="59"/><text x="33.6054%" y="495.50"></text></g><g><title>__rg_alloc (59 samples, 0.05%)</title><rect x="33.3554%" y="469" width="0.0536%" height="15" fill="rgb(228,207,15)" fg:x="36713" fg:w="59"/><text x="33.6054%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (59 samples, 0.05%)</title><rect x="33.3554%" y="453" width="0.0536%" height="15" fill="rgb(241,99,19)" fg:x="36713" fg:w="59"/><text x="33.6054%" y="463.50"></text></g><g><title>sn_rust_alloc (52 samples, 0.05%)</title><rect x="33.3618%" y="437" width="0.0472%" height="15" fill="rgb(207,104,49)" fg:x="36720" fg:w="52"/><text x="33.6118%" y="447.50"></text></g><g><title>async_global_executor::reactor::block_on (2,430 samples, 2.21%)</title><rect x="31.2222%" y="901" width="2.2078%" height="15" fill="rgb(234,99,18)" fg:x="34365" fg:w="2430"/><text x="31.4722%" y="911.50">a..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (2,430 samples, 2.21%)</title><rect x="31.2222%" y="885" width="2.2078%" height="15" fill="rgb(213,191,49)" fg:x="34365" fg:w="2430"/><text x="31.4722%" y="895.50">a..</text></g><g><title>async_io::driver::block_on (2,430 samples, 2.21%)</title><rect x="31.2222%" y="869" width="2.2078%" height="15" fill="rgb(210,226,19)" fg:x="34365" fg:w="2430"/><text x="31.4722%" y="879.50">a..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (2,430 samples, 2.21%)</title><rect x="31.2222%" y="853" width="2.2078%" height="15" fill="rgb(229,97,18)" fg:x="34365" fg:w="2430"/><text x="31.4722%" y="863.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,430 samples, 2.21%)</title><rect x="31.2222%" y="837" width="2.2078%" height="15" fill="rgb(211,167,15)" fg:x="34365" fg:w="2430"/><text x="31.4722%" y="847.50">&lt;..</text></g><g><title>async_executor::Executor::run::{{closure}} (2,430 samples, 2.21%)</title><rect x="31.2222%" y="821" width="2.2078%" height="15" fill="rgb(210,169,34)" fg:x="34365" fg:w="2430"/><text x="31.4722%" y="831.50">a..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (2,430 samples, 2.21%)</title><rect x="31.2222%" y="805" width="2.2078%" height="15" fill="rgb(241,121,31)" fg:x="34365" fg:w="2430"/><text x="31.4722%" y="815.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,430 samples, 2.21%)</title><rect x="31.2222%" y="789" width="2.2078%" height="15" fill="rgb(232,40,11)" fg:x="34365" fg:w="2430"/><text x="31.4722%" y="799.50">&lt;..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (2,430 samples, 2.21%)</title><rect x="31.2222%" y="773" width="2.2078%" height="15" fill="rgb(205,86,26)" fg:x="34365" fg:w="2430"/><text x="31.4722%" y="783.50">a..</text></g><g><title>async_task::runnable::Runnable::run (2,430 samples, 2.21%)</title><rect x="31.2222%" y="757" width="2.2078%" height="15" fill="rgb(231,126,28)" fg:x="34365" fg:w="2430"/><text x="31.4722%" y="767.50">a..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (2,430 samples, 2.21%)</title><rect x="31.2222%" y="741" width="2.2078%" height="15" fill="rgb(219,221,18)" fg:x="34365" fg:w="2430"/><text x="31.4722%" y="751.50">a..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (2,430 samples, 2.21%)</title><rect x="31.2222%" y="725" width="2.2078%" height="15" fill="rgb(211,40,0)" fg:x="34365" fg:w="2430"/><text x="31.4722%" y="735.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,430 samples, 2.21%)</title><rect x="31.2222%" y="709" width="2.2078%" height="15" fill="rgb(239,85,43)" fg:x="34365" fg:w="2430"/><text x="31.4722%" y="719.50">&lt;..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (2,430 samples, 2.21%)</title><rect x="31.2222%" y="693" width="2.2078%" height="15" fill="rgb(231,55,21)" fg:x="34365" fg:w="2430"/><text x="31.4722%" y="703.50">a..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (2,430 samples, 2.21%)</title><rect x="31.2222%" y="677" width="2.2078%" height="15" fill="rgb(225,184,43)" fg:x="34365" fg:w="2430"/><text x="31.4722%" y="687.50">&lt;..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (2,430 samples, 2.21%)</title><rect x="31.2222%" y="661" width="2.2078%" height="15" fill="rgb(251,158,41)" fg:x="34365" fg:w="2430"/><text x="31.4722%" y="671.50">a..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2,430 samples, 2.21%)</title><rect x="31.2222%" y="645" width="2.2078%" height="15" fill="rgb(234,159,37)" fg:x="34365" fg:w="2430"/><text x="31.4722%" y="655.50">s..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2,430 samples, 2.21%)</title><rect x="31.2222%" y="629" width="2.2078%" height="15" fill="rgb(216,204,22)" fg:x="34365" fg:w="2430"/><text x="31.4722%" y="639.50">s..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (2,430 samples, 2.21%)</title><rect x="31.2222%" y="613" width="2.2078%" height="15" fill="rgb(214,17,3)" fg:x="34365" fg:w="2430"/><text x="31.4722%" y="623.50">a..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (2,430 samples, 2.21%)</title><rect x="31.2222%" y="597" width="2.2078%" height="15" fill="rgb(212,111,17)" fg:x="34365" fg:w="2430"/><text x="31.4722%" y="607.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,430 samples, 2.21%)</title><rect x="31.2222%" y="581" width="2.2078%" height="15" fill="rgb(221,157,24)" fg:x="34365" fg:w="2430"/><text x="31.4722%" y="591.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (2,430 samples, 2.21%)</title><rect x="31.2222%" y="565" width="2.2078%" height="15" fill="rgb(252,16,13)" fg:x="34365" fg:w="2430"/><text x="31.4722%" y="575.50">t..</text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (298 samples, 0.27%)</title><rect x="33.6444%" y="581" width="0.2707%" height="15" fill="rgb(221,62,2)" fg:x="37031" fg:w="298"/><text x="33.8944%" y="591.50"></text></g><g><title>[libc-2.31.so] (259 samples, 0.24%)</title><rect x="33.6798%" y="565" width="0.2353%" height="15" fill="rgb(247,87,22)" fg:x="37070" fg:w="259"/><text x="33.9298%" y="575.50"></text></g><g><title>[libc-2.31.so] (92 samples, 0.08%)</title><rect x="33.9405%" y="565" width="0.0836%" height="15" fill="rgb(215,73,9)" fg:x="37357" fg:w="92"/><text x="34.1905%" y="575.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (412 samples, 0.37%)</title><rect x="34.1313%" y="549" width="0.3743%" height="15" fill="rgb(207,175,33)" fg:x="37567" fg:w="412"/><text x="34.3813%" y="559.50"></text></g><g><title>[libc-2.31.so] (110 samples, 0.10%)</title><rect x="34.5138%" y="533" width="0.0999%" height="15" fill="rgb(243,129,54)" fg:x="37988" fg:w="110"/><text x="34.7638%" y="543.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (204 samples, 0.19%)</title><rect x="34.5057%" y="549" width="0.1853%" height="15" fill="rgb(227,119,45)" fg:x="37979" fg:w="204"/><text x="34.7557%" y="559.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (85 samples, 0.08%)</title><rect x="34.6138%" y="533" width="0.0772%" height="15" fill="rgb(205,109,36)" fg:x="38098" fg:w="85"/><text x="34.8638%" y="543.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (90 samples, 0.08%)</title><rect x="34.6910%" y="517" width="0.0818%" height="15" fill="rgb(205,6,39)" fg:x="38183" fg:w="90"/><text x="34.9410%" y="527.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (84 samples, 0.08%)</title><rect x="34.6965%" y="501" width="0.0763%" height="15" fill="rgb(221,32,16)" fg:x="38189" fg:w="84"/><text x="34.9465%" y="511.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (84 samples, 0.08%)</title><rect x="34.6965%" y="485" width="0.0763%" height="15" fill="rgb(228,144,50)" fg:x="38189" fg:w="84"/><text x="34.9465%" y="495.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (17 samples, 0.02%)</title><rect x="34.7928%" y="469" width="0.0154%" height="15" fill="rgb(229,201,53)" fg:x="38295" fg:w="17"/><text x="35.0428%" y="479.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (17 samples, 0.02%)</title><rect x="34.7928%" y="453" width="0.0154%" height="15" fill="rgb(249,153,27)" fg:x="38295" fg:w="17"/><text x="35.0428%" y="463.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (17 samples, 0.02%)</title><rect x="34.7928%" y="437" width="0.0154%" height="15" fill="rgb(227,106,25)" fg:x="38295" fg:w="17"/><text x="35.0428%" y="447.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (2,385 samples, 2.17%)</title><rect x="34.7764%" y="501" width="2.1669%" height="15" fill="rgb(230,65,29)" fg:x="38277" fg:w="2385"/><text x="35.0264%" y="511.50">&lt;..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (2,375 samples, 2.16%)</title><rect x="34.7855%" y="485" width="2.1578%" height="15" fill="rgb(221,57,46)" fg:x="38287" fg:w="2375"/><text x="35.0355%" y="495.50">a..</text></g><g><title>std::panic::catch_unwind (2,350 samples, 2.14%)</title><rect x="34.8082%" y="469" width="2.1351%" height="15" fill="rgb(229,161,17)" fg:x="38312" fg:w="2350"/><text x="35.0582%" y="479.50">s..</text></g><g><title>std::panicking::try (2,350 samples, 2.14%)</title><rect x="34.8082%" y="453" width="2.1351%" height="15" fill="rgb(222,213,11)" fg:x="38312" fg:w="2350"/><text x="35.0582%" y="463.50">s..</text></g><g><title>std::panicking::try::do_call (2,350 samples, 2.14%)</title><rect x="34.8082%" y="437" width="2.1351%" height="15" fill="rgb(235,35,13)" fg:x="38312" fg:w="2350"/><text x="35.0582%" y="447.50">s..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (2,390 samples, 2.17%)</title><rect x="34.7728%" y="517" width="2.1714%" height="15" fill="rgb(233,158,34)" fg:x="38273" fg:w="2390"/><text x="35.0228%" y="527.50">&lt;..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,569 samples, 2.33%)</title><rect x="34.6910%" y="549" width="2.3341%" height="15" fill="rgb(215,151,48)" fg:x="38183" fg:w="2569"/><text x="34.9410%" y="559.50">&lt;..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,569 samples, 2.33%)</title><rect x="34.6910%" y="533" width="2.3341%" height="15" fill="rgb(229,84,14)" fg:x="38183" fg:w="2569"/><text x="34.9410%" y="543.50">&lt;..</text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (89 samples, 0.08%)</title><rect x="36.9442%" y="517" width="0.0809%" height="15" fill="rgb(229,68,14)" fg:x="40663" fg:w="89"/><text x="37.1942%" y="527.50"></text></g><g><title>[libc-2.31.so] (332 samples, 0.30%)</title><rect x="37.0251%" y="549" width="0.3016%" height="15" fill="rgb(243,106,26)" fg:x="40752" fg:w="332"/><text x="37.2751%" y="559.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (36 samples, 0.03%)</title><rect x="37.3267%" y="549" width="0.0327%" height="15" fill="rgb(206,45,38)" fg:x="41084" fg:w="36"/><text x="37.5767%" y="559.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn (15 samples, 0.01%)</title><rect x="37.3639%" y="501" width="0.0136%" height="15" fill="rgb(226,6,15)" fg:x="41125" fg:w="15"/><text x="37.6139%" y="511.50"></text></g><g><title>async_ffi::DropBomb::with (12 samples, 0.01%)</title><rect x="37.3667%" y="485" width="0.0109%" height="15" fill="rgb(232,22,54)" fg:x="41128" fg:w="12"/><text x="37.6167%" y="495.50"></text></g><g><title>sn_rust_dealloc (26 samples, 0.02%)</title><rect x="37.3776%" y="501" width="0.0236%" height="15" fill="rgb(229,222,32)" fg:x="41140" fg:w="26"/><text x="37.6276%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (53 samples, 0.05%)</title><rect x="37.3594%" y="549" width="0.0482%" height="15" fill="rgb(228,62,29)" fg:x="41120" fg:w="53"/><text x="37.6094%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (53 samples, 0.05%)</title><rect x="37.3594%" y="533" width="0.0482%" height="15" fill="rgb(251,103,34)" fg:x="41120" fg:w="53"/><text x="37.6094%" y="543.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (53 samples, 0.05%)</title><rect x="37.3594%" y="517" width="0.0482%" height="15" fill="rgb(233,12,30)" fg:x="41120" fg:w="53"/><text x="37.6094%" y="527.50"></text></g><g><title>[libc-2.31.so] (58 samples, 0.05%)</title><rect x="37.6120%" y="533" width="0.0527%" height="15" fill="rgb(238,52,0)" fg:x="41398" fg:w="58"/><text x="37.8620%" y="543.50"></text></g><g><title>[libc-2.31.so] (139 samples, 0.13%)</title><rect x="37.6801%" y="453" width="0.1263%" height="15" fill="rgb(223,98,5)" fg:x="41473" fg:w="139"/><text x="37.9301%" y="463.50"></text></g><g><title>[libc-2.31.so] (73 samples, 0.07%)</title><rect x="37.8146%" y="437" width="0.0663%" height="15" fill="rgb(228,75,37)" fg:x="41621" fg:w="73"/><text x="38.0646%" y="447.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (20 samples, 0.02%)</title><rect x="37.9681%" y="325" width="0.0182%" height="15" fill="rgb(205,115,49)" fg:x="41790" fg:w="20"/><text x="38.2181%" y="335.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (367 samples, 0.33%)</title><rect x="37.6647%" y="533" width="0.3334%" height="15" fill="rgb(250,154,43)" fg:x="41456" fg:w="367"/><text x="37.9147%" y="543.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event (360 samples, 0.33%)</title><rect x="37.6710%" y="517" width="0.3271%" height="15" fill="rgb(226,43,29)" fg:x="41463" fg:w="360"/><text x="37.9210%" y="527.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (360 samples, 0.33%)</title><rect x="37.6710%" y="501" width="0.3271%" height="15" fill="rgb(249,228,39)" fg:x="41463" fg:w="360"/><text x="37.9210%" y="511.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (360 samples, 0.33%)</title><rect x="37.6710%" y="485" width="0.3271%" height="15" fill="rgb(216,79,43)" fg:x="41463" fg:w="360"/><text x="37.9210%" y="495.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (360 samples, 0.33%)</title><rect x="37.6710%" y="469" width="0.3271%" height="15" fill="rgb(228,95,12)" fg:x="41463" fg:w="360"/><text x="37.9210%" y="479.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (211 samples, 0.19%)</title><rect x="37.8064%" y="453" width="0.1917%" height="15" fill="rgb(249,221,15)" fg:x="41612" fg:w="211"/><text x="38.0564%" y="463.50"></text></g><g><title>alloc::alloc::exchange_malloc (129 samples, 0.12%)</title><rect x="37.8809%" y="437" width="0.1172%" height="15" fill="rgb(233,34,13)" fg:x="41694" fg:w="129"/><text x="38.1309%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (129 samples, 0.12%)</title><rect x="37.8809%" y="421" width="0.1172%" height="15" fill="rgb(214,103,39)" fg:x="41694" fg:w="129"/><text x="38.1309%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (129 samples, 0.12%)</title><rect x="37.8809%" y="405" width="0.1172%" height="15" fill="rgb(251,126,39)" fg:x="41694" fg:w="129"/><text x="38.1309%" y="415.50"></text></g><g><title>alloc::alloc::alloc (125 samples, 0.11%)</title><rect x="37.8845%" y="389" width="0.1136%" height="15" fill="rgb(214,216,36)" fg:x="41698" fg:w="125"/><text x="38.1345%" y="399.50"></text></g><g><title>__rg_alloc (125 samples, 0.11%)</title><rect x="37.8845%" y="373" width="0.1136%" height="15" fill="rgb(220,221,8)" fg:x="41698" fg:w="125"/><text x="38.1345%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (125 samples, 0.11%)</title><rect x="37.8845%" y="357" width="0.1136%" height="15" fill="rgb(240,216,3)" fg:x="41698" fg:w="125"/><text x="38.1345%" y="367.50"></text></g><g><title>sn_rust_alloc (119 samples, 0.11%)</title><rect x="37.8900%" y="341" width="0.1081%" height="15" fill="rgb(232,218,17)" fg:x="41704" fg:w="119"/><text x="38.1400%" y="351.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (13 samples, 0.01%)</title><rect x="37.9863%" y="325" width="0.0118%" height="15" fill="rgb(229,163,45)" fg:x="41810" fg:w="13"/><text x="38.2363%" y="335.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (4,388 samples, 3.99%)</title><rect x="34.0241%" y="565" width="3.9867%" height="15" fill="rgb(231,110,42)" fg:x="37449" fg:w="4388"/><text x="34.2741%" y="575.50">trem..</text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_TO&lt;_ErasedPtr&gt;::on_event (664 samples, 0.60%)</title><rect x="37.4076%" y="549" width="0.6033%" height="15" fill="rgb(208,170,48)" fg:x="41173" fg:w="664"/><text x="37.6576%" y="559.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::_::&lt;impl tremor_runtime::connectors::sink::RawSink_trait::VTableInner_Ref&lt;_Self,_ErasedPtr&gt;&gt;::on_event (12 samples, 0.01%)</title><rect x="37.9999%" y="533" width="0.0109%" height="15" fill="rgb(239,116,25)" fg:x="41825" fg:w="12"/><text x="38.2499%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (14 samples, 0.01%)</title><rect x="38.1298%" y="533" width="0.0127%" height="15" fill="rgb(219,200,50)" fg:x="41968" fg:w="14"/><text x="38.3798%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (14 samples, 0.01%)</title><rect x="38.1298%" y="517" width="0.0127%" height="15" fill="rgb(245,200,0)" fg:x="41968" fg:w="14"/><text x="38.3798%" y="527.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (14 samples, 0.01%)</title><rect x="38.1298%" y="501" width="0.0127%" height="15" fill="rgb(245,119,33)" fg:x="41968" fg:w="14"/><text x="38.3798%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (31 samples, 0.03%)</title><rect x="38.1517%" y="453" width="0.0282%" height="15" fill="rgb(231,125,12)" fg:x="41992" fg:w="31"/><text x="38.4017%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (31 samples, 0.03%)</title><rect x="38.1517%" y="437" width="0.0282%" height="15" fill="rgb(216,96,41)" fg:x="41992" fg:w="31"/><text x="38.4017%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value)&gt;&gt; (31 samples, 0.03%)</title><rect x="38.1517%" y="421" width="0.0282%" height="15" fill="rgb(248,43,45)" fg:x="41992" fg:w="31"/><text x="38.4017%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.03%)</title><rect x="38.1517%" y="405" width="0.0282%" height="15" fill="rgb(217,222,7)" fg:x="41992" fg:w="31"/><text x="38.4017%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::is_empty_singleton (25 samples, 0.02%)</title><rect x="38.1571%" y="389" width="0.0227%" height="15" fill="rgb(233,28,6)" fg:x="41998" fg:w="25"/><text x="38.4071%" y="399.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (48 samples, 0.04%)</title><rect x="38.1444%" y="469" width="0.0436%" height="15" fill="rgb(231,218,15)" fg:x="41984" fg:w="48"/><text x="38.3944%" y="479.50"></text></g><g><title>sn_rust_dealloc (104 samples, 0.09%)</title><rect x="38.1880%" y="469" width="0.0945%" height="15" fill="rgb(226,171,48)" fg:x="42032" fg:w="104"/><text x="38.4380%" y="479.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,796 samples, 4.36%)</title><rect x="33.9296%" y="581" width="4.3574%" height="15" fill="rgb(235,201,9)" fg:x="37345" fg:w="4796"/><text x="34.1796%" y="591.50">&lt;core..</text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (304 samples, 0.28%)</title><rect x="38.0108%" y="565" width="0.2762%" height="15" fill="rgb(217,80,15)" fg:x="41837" fg:w="304"/><text x="38.2608%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (173 samples, 0.16%)</title><rect x="38.1298%" y="549" width="0.1572%" height="15" fill="rgb(219,152,8)" fg:x="41968" fg:w="173"/><text x="38.3798%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (159 samples, 0.14%)</title><rect x="38.1426%" y="533" width="0.1445%" height="15" fill="rgb(243,107,38)" fg:x="41982" fg:w="159"/><text x="38.3926%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (159 samples, 0.14%)</title><rect x="38.1426%" y="517" width="0.1445%" height="15" fill="rgb(231,17,5)" fg:x="41982" fg:w="159"/><text x="38.3926%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (159 samples, 0.14%)</title><rect x="38.1426%" y="501" width="0.1445%" height="15" fill="rgb(209,25,54)" fg:x="41982" fg:w="159"/><text x="38.3926%" y="511.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (159 samples, 0.14%)</title><rect x="38.1426%" y="485" width="0.1445%" height="15" fill="rgb(219,0,2)" fg:x="41982" fg:w="159"/><text x="38.3926%" y="495.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (28 samples, 0.03%)</title><rect x="38.3116%" y="469" width="0.0254%" height="15" fill="rgb(246,9,5)" fg:x="42168" fg:w="28"/><text x="38.5616%" y="479.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (19 samples, 0.02%)</title><rect x="38.3197%" y="453" width="0.0173%" height="15" fill="rgb(226,159,4)" fg:x="42177" fg:w="19"/><text x="38.5697%" y="463.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (19 samples, 0.02%)</title><rect x="38.3197%" y="437" width="0.0173%" height="15" fill="rgb(219,175,34)" fg:x="42177" fg:w="19"/><text x="38.5697%" y="447.50"></text></g><g><title>alloc::alloc::exchange_malloc (18 samples, 0.02%)</title><rect x="38.3206%" y="421" width="0.0164%" height="15" fill="rgb(236,10,46)" fg:x="42178" fg:w="18"/><text x="38.5706%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (18 samples, 0.02%)</title><rect x="38.3206%" y="405" width="0.0164%" height="15" fill="rgb(240,211,16)" fg:x="42178" fg:w="18"/><text x="38.5706%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (18 samples, 0.02%)</title><rect x="38.3206%" y="389" width="0.0164%" height="15" fill="rgb(205,3,43)" fg:x="42178" fg:w="18"/><text x="38.5706%" y="399.50"></text></g><g><title>alloc::alloc::alloc (18 samples, 0.02%)</title><rect x="38.3206%" y="373" width="0.0164%" height="15" fill="rgb(245,7,22)" fg:x="42178" fg:w="18"/><text x="38.5706%" y="383.50"></text></g><g><title>__rg_alloc (18 samples, 0.02%)</title><rect x="38.3206%" y="357" width="0.0164%" height="15" fill="rgb(239,132,32)" fg:x="42178" fg:w="18"/><text x="38.5706%" y="367.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (18 samples, 0.02%)</title><rect x="38.3206%" y="341" width="0.0164%" height="15" fill="rgb(228,202,34)" fg:x="42178" fg:w="18"/><text x="38.5706%" y="351.50"></text></g><g><title>sn_rust_alloc (15 samples, 0.01%)</title><rect x="38.3234%" y="325" width="0.0136%" height="15" fill="rgb(254,200,22)" fg:x="42181" fg:w="15"/><text x="38.5734%" y="335.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (53 samples, 0.05%)</title><rect x="38.3034%" y="549" width="0.0482%" height="15" fill="rgb(219,10,39)" fg:x="42159" fg:w="53"/><text x="38.5534%" y="559.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (48 samples, 0.04%)</title><rect x="38.3079%" y="533" width="0.0436%" height="15" fill="rgb(226,210,39)" fg:x="42164" fg:w="48"/><text x="38.5579%" y="543.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (44 samples, 0.04%)</title><rect x="38.3116%" y="517" width="0.0400%" height="15" fill="rgb(208,219,16)" fg:x="42168" fg:w="44"/><text x="38.5616%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (44 samples, 0.04%)</title><rect x="38.3116%" y="501" width="0.0400%" height="15" fill="rgb(216,158,51)" fg:x="42168" fg:w="44"/><text x="38.5616%" y="511.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (44 samples, 0.04%)</title><rect x="38.3116%" y="485" width="0.0400%" height="15" fill="rgb(233,14,44)" fg:x="42168" fg:w="44"/><text x="38.5616%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (16 samples, 0.01%)</title><rect x="38.3370%" y="469" width="0.0145%" height="15" fill="rgb(237,97,39)" fg:x="42196" fg:w="16"/><text x="38.5870%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (16 samples, 0.01%)</title><rect x="38.3370%" y="453" width="0.0145%" height="15" fill="rgb(218,198,43)" fg:x="42196" fg:w="16"/><text x="38.5870%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (13 samples, 0.01%)</title><rect x="38.3397%" y="437" width="0.0118%" height="15" fill="rgb(231,104,20)" fg:x="42199" fg:w="13"/><text x="38.5897%" y="447.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (48 samples, 0.04%)</title><rect x="38.5351%" y="517" width="0.0436%" height="15" fill="rgb(254,36,13)" fg:x="42414" fg:w="48"/><text x="38.7851%" y="527.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (48 samples, 0.04%)</title><rect x="38.5351%" y="501" width="0.0436%" height="15" fill="rgb(248,14,50)" fg:x="42414" fg:w="48"/><text x="38.7851%" y="511.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (48 samples, 0.04%)</title><rect x="38.5351%" y="485" width="0.0436%" height="15" fill="rgb(217,107,29)" fg:x="42414" fg:w="48"/><text x="38.7851%" y="495.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (44 samples, 0.04%)</title><rect x="38.5387%" y="469" width="0.0400%" height="15" fill="rgb(251,169,33)" fg:x="42418" fg:w="44"/><text x="38.7887%" y="479.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (44 samples, 0.04%)</title><rect x="38.5387%" y="453" width="0.0400%" height="15" fill="rgb(217,108,32)" fg:x="42418" fg:w="44"/><text x="38.7887%" y="463.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (40 samples, 0.04%)</title><rect x="38.5423%" y="437" width="0.0363%" height="15" fill="rgb(219,66,42)" fg:x="42422" fg:w="40"/><text x="38.7923%" y="447.50"></text></g><g><title>alloc::alloc::exchange_malloc (27 samples, 0.02%)</title><rect x="38.5541%" y="421" width="0.0245%" height="15" fill="rgb(206,180,7)" fg:x="42435" fg:w="27"/><text x="38.8041%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (27 samples, 0.02%)</title><rect x="38.5541%" y="405" width="0.0245%" height="15" fill="rgb(208,226,31)" fg:x="42435" fg:w="27"/><text x="38.8041%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (27 samples, 0.02%)</title><rect x="38.5541%" y="389" width="0.0245%" height="15" fill="rgb(218,26,49)" fg:x="42435" fg:w="27"/><text x="38.8041%" y="399.50"></text></g><g><title>alloc::alloc::alloc (27 samples, 0.02%)</title><rect x="38.5541%" y="373" width="0.0245%" height="15" fill="rgb(233,197,48)" fg:x="42435" fg:w="27"/><text x="38.8041%" y="383.50"></text></g><g><title>__rg_alloc (27 samples, 0.02%)</title><rect x="38.5541%" y="357" width="0.0245%" height="15" fill="rgb(252,181,51)" fg:x="42435" fg:w="27"/><text x="38.8041%" y="367.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (27 samples, 0.02%)</title><rect x="38.5541%" y="341" width="0.0245%" height="15" fill="rgb(253,90,19)" fg:x="42435" fg:w="27"/><text x="38.8041%" y="351.50"></text></g><g><title>sn_rust_alloc (24 samples, 0.02%)</title><rect x="38.5569%" y="325" width="0.0218%" height="15" fill="rgb(215,171,30)" fg:x="42438" fg:w="24"/><text x="38.8069%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.02%)</title><rect x="38.5968%" y="501" width="0.0173%" height="15" fill="rgb(214,222,9)" fg:x="42482" fg:w="19"/><text x="38.8468%" y="511.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (19 samples, 0.02%)</title><rect x="38.5968%" y="485" width="0.0173%" height="15" fill="rgb(223,3,22)" fg:x="42482" fg:w="19"/><text x="38.8468%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (17 samples, 0.02%)</title><rect x="38.6141%" y="501" width="0.0154%" height="15" fill="rgb(225,196,46)" fg:x="42501" fg:w="17"/><text x="38.8641%" y="511.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (17 samples, 0.02%)</title><rect x="38.6141%" y="485" width="0.0154%" height="15" fill="rgb(209,110,37)" fg:x="42501" fg:w="17"/><text x="38.8641%" y="495.50"></text></g><g><title>sn_rust_dealloc (37 samples, 0.03%)</title><rect x="38.6441%" y="389" width="0.0336%" height="15" fill="rgb(249,89,12)" fg:x="42534" fg:w="37"/><text x="38.8941%" y="399.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (433 samples, 0.39%)</title><rect x="38.2870%" y="581" width="0.3934%" height="15" fill="rgb(226,27,33)" fg:x="42141" fg:w="433"/><text x="38.5370%" y="591.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (417 samples, 0.38%)</title><rect x="38.3016%" y="565" width="0.3789%" height="15" fill="rgb(213,82,22)" fg:x="42157" fg:w="417"/><text x="38.5516%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (362 samples, 0.33%)</title><rect x="38.3515%" y="549" width="0.3289%" height="15" fill="rgb(248,140,0)" fg:x="42212" fg:w="362"/><text x="38.6015%" y="559.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (162 samples, 0.15%)</title><rect x="38.5332%" y="533" width="0.1472%" height="15" fill="rgb(228,106,3)" fg:x="42412" fg:w="162"/><text x="38.7832%" y="543.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (112 samples, 0.10%)</title><rect x="38.5787%" y="517" width="0.1018%" height="15" fill="rgb(209,23,37)" fg:x="42462" fg:w="112"/><text x="38.8287%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (52 samples, 0.05%)</title><rect x="38.6332%" y="501" width="0.0472%" height="15" fill="rgb(241,93,50)" fg:x="42522" fg:w="52"/><text x="38.8832%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (52 samples, 0.05%)</title><rect x="38.6332%" y="485" width="0.0472%" height="15" fill="rgb(253,46,43)" fg:x="42522" fg:w="52"/><text x="38.8832%" y="495.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (52 samples, 0.05%)</title><rect x="38.6332%" y="469" width="0.0472%" height="15" fill="rgb(226,206,43)" fg:x="42522" fg:w="52"/><text x="38.8832%" y="479.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (49 samples, 0.04%)</title><rect x="38.6359%" y="453" width="0.0445%" height="15" fill="rgb(217,54,7)" fg:x="42525" fg:w="49"/><text x="38.8859%" y="463.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (49 samples, 0.04%)</title><rect x="38.6359%" y="437" width="0.0445%" height="15" fill="rgb(223,5,52)" fg:x="42525" fg:w="49"/><text x="38.8859%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (49 samples, 0.04%)</title><rect x="38.6359%" y="421" width="0.0445%" height="15" fill="rgb(206,52,46)" fg:x="42525" fg:w="49"/><text x="38.8859%" y="431.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (49 samples, 0.04%)</title><rect x="38.6359%" y="405" width="0.0445%" height="15" fill="rgb(253,136,11)" fg:x="42525" fg:w="49"/><text x="38.8859%" y="415.50"></text></g><g><title>&lt;tremor_pipeline::EventId as core::clone::Clone&gt;::clone (36 samples, 0.03%)</title><rect x="38.6877%" y="565" width="0.0327%" height="15" fill="rgb(208,106,33)" fg:x="42582" fg:w="36"/><text x="38.9377%" y="575.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (27 samples, 0.02%)</title><rect x="38.6959%" y="549" width="0.0245%" height="15" fill="rgb(206,54,4)" fg:x="42591" fg:w="27"/><text x="38.9459%" y="559.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (42 samples, 0.04%)</title><rect x="38.7549%" y="453" width="0.0382%" height="15" fill="rgb(213,3,15)" fg:x="42656" fg:w="42"/><text x="39.0049%" y="463.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (34 samples, 0.03%)</title><rect x="38.7622%" y="437" width="0.0309%" height="15" fill="rgb(252,211,39)" fg:x="42664" fg:w="34"/><text x="39.0122%" y="447.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (34 samples, 0.03%)</title><rect x="38.7622%" y="421" width="0.0309%" height="15" fill="rgb(223,6,36)" fg:x="42664" fg:w="34"/><text x="39.0122%" y="431.50"></text></g><g><title>alloc::alloc::exchange_malloc (31 samples, 0.03%)</title><rect x="38.7649%" y="405" width="0.0282%" height="15" fill="rgb(252,169,45)" fg:x="42667" fg:w="31"/><text x="39.0149%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (30 samples, 0.03%)</title><rect x="38.7658%" y="389" width="0.0273%" height="15" fill="rgb(212,48,26)" fg:x="42668" fg:w="30"/><text x="39.0158%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (30 samples, 0.03%)</title><rect x="38.7658%" y="373" width="0.0273%" height="15" fill="rgb(251,102,48)" fg:x="42668" fg:w="30"/><text x="39.0158%" y="383.50"></text></g><g><title>alloc::alloc::alloc (30 samples, 0.03%)</title><rect x="38.7658%" y="357" width="0.0273%" height="15" fill="rgb(243,208,16)" fg:x="42668" fg:w="30"/><text x="39.0158%" y="367.50"></text></g><g><title>__rg_alloc (30 samples, 0.03%)</title><rect x="38.7658%" y="341" width="0.0273%" height="15" fill="rgb(219,96,24)" fg:x="42668" fg:w="30"/><text x="39.0158%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (30 samples, 0.03%)</title><rect x="38.7658%" y="325" width="0.0273%" height="15" fill="rgb(219,33,29)" fg:x="42668" fg:w="30"/><text x="39.0158%" y="335.50"></text></g><g><title>sn_rust_alloc (30 samples, 0.03%)</title><rect x="38.7658%" y="309" width="0.0273%" height="15" fill="rgb(223,176,5)" fg:x="42668" fg:w="30"/><text x="39.0158%" y="319.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (74 samples, 0.07%)</title><rect x="38.8049%" y="421" width="0.0672%" height="15" fill="rgb(228,140,14)" fg:x="42711" fg:w="74"/><text x="39.0549%" y="431.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (70 samples, 0.06%)</title><rect x="38.8085%" y="405" width="0.0636%" height="15" fill="rgb(217,179,31)" fg:x="42715" fg:w="70"/><text x="39.0585%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (70 samples, 0.06%)</title><rect x="38.8085%" y="389" width="0.0636%" height="15" fill="rgb(230,9,30)" fg:x="42715" fg:w="70"/><text x="39.0585%" y="399.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (475 samples, 0.43%)</title><rect x="38.7486%" y="533" width="0.4316%" height="15" fill="rgb(230,136,20)" fg:x="42649" fg:w="475"/><text x="38.9986%" y="543.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (471 samples, 0.43%)</title><rect x="38.7522%" y="517" width="0.4279%" height="15" fill="rgb(215,210,22)" fg:x="42653" fg:w="471"/><text x="39.0022%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (471 samples, 0.43%)</title><rect x="38.7522%" y="501" width="0.4279%" height="15" fill="rgb(218,43,5)" fg:x="42653" fg:w="471"/><text x="39.0022%" y="511.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (468 samples, 0.43%)</title><rect x="38.7549%" y="485" width="0.4252%" height="15" fill="rgb(216,11,5)" fg:x="42656" fg:w="468"/><text x="39.0049%" y="495.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (468 samples, 0.43%)</title><rect x="38.7549%" y="469" width="0.4252%" height="15" fill="rgb(209,82,29)" fg:x="42656" fg:w="468"/><text x="39.0049%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (426 samples, 0.39%)</title><rect x="38.7931%" y="453" width="0.3870%" height="15" fill="rgb(244,115,12)" fg:x="42698" fg:w="426"/><text x="39.0431%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (426 samples, 0.39%)</title><rect x="38.7931%" y="437" width="0.3870%" height="15" fill="rgb(222,82,18)" fg:x="42698" fg:w="426"/><text x="39.0431%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::buckets (339 samples, 0.31%)</title><rect x="38.8721%" y="421" width="0.3080%" height="15" fill="rgb(249,227,8)" fg:x="42785" fg:w="339"/><text x="39.1221%" y="431.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (37 samples, 0.03%)</title><rect x="39.3082%" y="501" width="0.0336%" height="15" fill="rgb(253,141,45)" fg:x="43265" fg:w="37"/><text x="39.5582%" y="511.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (37 samples, 0.03%)</title><rect x="39.3082%" y="485" width="0.0336%" height="15" fill="rgb(234,184,4)" fg:x="43265" fg:w="37"/><text x="39.5582%" y="495.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (37 samples, 0.03%)</title><rect x="39.3082%" y="469" width="0.0336%" height="15" fill="rgb(218,194,23)" fg:x="43265" fg:w="37"/><text x="39.5582%" y="479.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (31 samples, 0.03%)</title><rect x="39.3137%" y="453" width="0.0282%" height="15" fill="rgb(235,66,41)" fg:x="43271" fg:w="31"/><text x="39.5637%" y="463.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (31 samples, 0.03%)</title><rect x="39.3137%" y="437" width="0.0282%" height="15" fill="rgb(245,217,1)" fg:x="43271" fg:w="31"/><text x="39.5637%" y="447.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (28 samples, 0.03%)</title><rect x="39.3164%" y="421" width="0.0254%" height="15" fill="rgb(229,91,1)" fg:x="43274" fg:w="28"/><text x="39.5664%" y="431.50"></text></g><g><title>alloc::alloc::exchange_malloc (22 samples, 0.02%)</title><rect x="39.3219%" y="405" width="0.0200%" height="15" fill="rgb(207,101,30)" fg:x="43280" fg:w="22"/><text x="39.5719%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (22 samples, 0.02%)</title><rect x="39.3219%" y="389" width="0.0200%" height="15" fill="rgb(223,82,49)" fg:x="43280" fg:w="22"/><text x="39.5719%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (22 samples, 0.02%)</title><rect x="39.3219%" y="373" width="0.0200%" height="15" fill="rgb(218,167,17)" fg:x="43280" fg:w="22"/><text x="39.5719%" y="383.50"></text></g><g><title>alloc::alloc::alloc (22 samples, 0.02%)</title><rect x="39.3219%" y="357" width="0.0200%" height="15" fill="rgb(208,103,14)" fg:x="43280" fg:w="22"/><text x="39.5719%" y="367.50"></text></g><g><title>__rg_alloc (22 samples, 0.02%)</title><rect x="39.3219%" y="341" width="0.0200%" height="15" fill="rgb(238,20,8)" fg:x="43280" fg:w="22"/><text x="39.5719%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (22 samples, 0.02%)</title><rect x="39.3219%" y="325" width="0.0200%" height="15" fill="rgb(218,80,54)" fg:x="43280" fg:w="22"/><text x="39.5719%" y="335.50"></text></g><g><title>sn_rust_alloc (20 samples, 0.02%)</title><rect x="39.3237%" y="309" width="0.0182%" height="15" fill="rgb(240,144,17)" fg:x="43282" fg:w="20"/><text x="39.5737%" y="319.50"></text></g><g><title>abi_stable::erased_types::iterator::next (13 samples, 0.01%)</title><rect x="39.3618%" y="453" width="0.0118%" height="15" fill="rgb(245,27,50)" fg:x="43324" fg:w="13"/><text x="39.6118%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.02%)</title><rect x="39.3546%" y="485" width="0.0227%" height="15" fill="rgb(251,51,7)" fg:x="43316" fg:w="25"/><text x="39.6046%" y="495.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (25 samples, 0.02%)</title><rect x="39.3546%" y="469" width="0.0227%" height="15" fill="rgb(245,217,29)" fg:x="43316" fg:w="25"/><text x="39.6046%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (20 samples, 0.02%)</title><rect x="39.3773%" y="485" width="0.0182%" height="15" fill="rgb(221,176,29)" fg:x="43341" fg:w="20"/><text x="39.6273%" y="495.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (20 samples, 0.02%)</title><rect x="39.3773%" y="469" width="0.0182%" height="15" fill="rgb(212,180,24)" fg:x="43341" fg:w="20"/><text x="39.6273%" y="479.50"></text></g><g><title>sn_rust_dealloc (102 samples, 0.09%)</title><rect x="39.4182%" y="373" width="0.0927%" height="15" fill="rgb(254,24,2)" fg:x="43386" fg:w="102"/><text x="39.6682%" y="383.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::ContraflowData as core::convert::From&lt;&amp;tremor_pipeline::event::Event&gt;&gt;::from (915 samples, 0.83%)</title><rect x="38.6804%" y="581" width="0.8313%" height="15" fill="rgb(230,100,2)" fg:x="42574" fg:w="915"/><text x="38.9304%" y="591.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (871 samples, 0.79%)</title><rect x="38.7204%" y="565" width="0.7913%" height="15" fill="rgb(219,142,25)" fg:x="42618" fg:w="871"/><text x="38.9704%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (844 samples, 0.77%)</title><rect x="38.7449%" y="549" width="0.7668%" height="15" fill="rgb(240,73,43)" fg:x="42645" fg:w="844"/><text x="38.9949%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (365 samples, 0.33%)</title><rect x="39.1801%" y="533" width="0.3316%" height="15" fill="rgb(214,114,15)" fg:x="43124" fg:w="365"/><text x="39.4301%" y="543.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (227 samples, 0.21%)</title><rect x="39.3055%" y="517" width="0.2062%" height="15" fill="rgb(207,130,4)" fg:x="43262" fg:w="227"/><text x="39.5555%" y="527.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (187 samples, 0.17%)</title><rect x="39.3418%" y="501" width="0.1699%" height="15" fill="rgb(221,25,40)" fg:x="43302" fg:w="187"/><text x="39.5918%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (123 samples, 0.11%)</title><rect x="39.4000%" y="485" width="0.1118%" height="15" fill="rgb(241,184,7)" fg:x="43366" fg:w="123"/><text x="39.6500%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (123 samples, 0.11%)</title><rect x="39.4000%" y="469" width="0.1118%" height="15" fill="rgb(235,159,4)" fg:x="43366" fg:w="123"/><text x="39.6500%" y="479.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (123 samples, 0.11%)</title><rect x="39.4000%" y="453" width="0.1118%" height="15" fill="rgb(214,87,48)" fg:x="43366" fg:w="123"/><text x="39.6500%" y="463.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (119 samples, 0.11%)</title><rect x="39.4036%" y="437" width="0.1081%" height="15" fill="rgb(246,198,24)" fg:x="43370" fg:w="119"/><text x="39.6536%" y="447.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (116 samples, 0.11%)</title><rect x="39.4064%" y="421" width="0.1054%" height="15" fill="rgb(209,66,40)" fg:x="43373" fg:w="116"/><text x="39.6564%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (116 samples, 0.11%)</title><rect x="39.4064%" y="405" width="0.1054%" height="15" fill="rgb(233,147,39)" fg:x="43373" fg:w="116"/><text x="39.6564%" y="415.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (116 samples, 0.11%)</title><rect x="39.4064%" y="389" width="0.1054%" height="15" fill="rgb(231,145,52)" fg:x="43373" fg:w="116"/><text x="39.6564%" y="399.50"></text></g><g><title>[libc-2.31.so] (756 samples, 0.69%)</title><rect x="39.5117%" y="581" width="0.6869%" height="15" fill="rgb(206,20,26)" fg:x="43489" fg:w="756"/><text x="39.7617%" y="591.50"></text></g><g><title>sn_rust_dealloc (55 samples, 0.05%)</title><rect x="40.2150%" y="421" width="0.0500%" height="15" fill="rgb(238,220,4)" fg:x="44263" fg:w="55"/><text x="40.4650%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (73 samples, 0.07%)</title><rect x="40.2004%" y="581" width="0.0663%" height="15" fill="rgb(252,195,42)" fg:x="44247" fg:w="73"/><text x="40.4504%" y="591.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (73 samples, 0.07%)</title><rect x="40.2004%" y="565" width="0.0663%" height="15" fill="rgb(209,10,6)" fg:x="44247" fg:w="73"/><text x="40.4504%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (62 samples, 0.06%)</title><rect x="40.2104%" y="549" width="0.0563%" height="15" fill="rgb(229,3,52)" fg:x="44258" fg:w="62"/><text x="40.4604%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (62 samples, 0.06%)</title><rect x="40.2104%" y="533" width="0.0563%" height="15" fill="rgb(253,49,37)" fg:x="44258" fg:w="62"/><text x="40.4604%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (62 samples, 0.06%)</title><rect x="40.2104%" y="517" width="0.0563%" height="15" fill="rgb(240,103,49)" fg:x="44258" fg:w="62"/><text x="40.4604%" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (62 samples, 0.06%)</title><rect x="40.2104%" y="501" width="0.0563%" height="15" fill="rgb(250,182,30)" fg:x="44258" fg:w="62"/><text x="40.4604%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (62 samples, 0.06%)</title><rect x="40.2104%" y="485" width="0.0563%" height="15" fill="rgb(248,8,30)" fg:x="44258" fg:w="62"/><text x="40.4604%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (62 samples, 0.06%)</title><rect x="40.2104%" y="469" width="0.0563%" height="15" fill="rgb(237,120,30)" fg:x="44258" fg:w="62"/><text x="40.4604%" y="479.50"></text></g><g><title>__rg_dealloc (62 samples, 0.06%)</title><rect x="40.2104%" y="453" width="0.0563%" height="15" fill="rgb(221,146,34)" fg:x="44258" fg:w="62"/><text x="40.4604%" y="463.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (62 samples, 0.06%)</title><rect x="40.2104%" y="437" width="0.0563%" height="15" fill="rgb(242,55,13)" fg:x="44258" fg:w="62"/><text x="40.4604%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt;&gt; (30 samples, 0.03%)</title><rect x="40.2667%" y="581" width="0.0273%" height="15" fill="rgb(242,112,31)" fg:x="44320" fg:w="30"/><text x="40.5167%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt; (30 samples, 0.03%)</title><rect x="40.2667%" y="565" width="0.0273%" height="15" fill="rgb(249,192,27)" fg:x="44320" fg:w="30"/><text x="40.5167%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (24 samples, 0.02%)</title><rect x="40.3176%" y="565" width="0.0218%" height="15" fill="rgb(208,204,44)" fg:x="44376" fg:w="24"/><text x="40.5676%" y="575.50"></text></g><g><title>core::time::Duration::as_nanos (31 samples, 0.03%)</title><rect x="40.3394%" y="565" width="0.0282%" height="15" fill="rgb(208,93,54)" fg:x="44400" fg:w="31"/><text x="40.5894%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (132 samples, 0.12%)</title><rect x="40.3676%" y="549" width="0.1199%" height="15" fill="rgb(242,1,31)" fg:x="44431" fg:w="132"/><text x="40.6176%" y="559.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (52 samples, 0.05%)</title><rect x="40.5293%" y="517" width="0.0472%" height="15" fill="rgb(241,83,25)" fg:x="44609" fg:w="52"/><text x="40.7793%" y="527.50"></text></g><g><title>core::cmp::PartialOrd::ge (52 samples, 0.05%)</title><rect x="40.5293%" y="501" width="0.0472%" height="15" fill="rgb(205,169,50)" fg:x="44609" fg:w="52"/><text x="40.7793%" y="511.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (52 samples, 0.05%)</title><rect x="40.5293%" y="485" width="0.0472%" height="15" fill="rgb(239,186,37)" fg:x="44609" fg:w="52"/><text x="40.7793%" y="495.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (52 samples, 0.05%)</title><rect x="40.5293%" y="469" width="0.0472%" height="15" fill="rgb(205,221,10)" fg:x="44609" fg:w="52"/><text x="40.7793%" y="479.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (52 samples, 0.05%)</title><rect x="40.5293%" y="453" width="0.0472%" height="15" fill="rgb(218,196,15)" fg:x="44609" fg:w="52"/><text x="40.7793%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (24 samples, 0.02%)</title><rect x="40.5548%" y="437" width="0.0218%" height="15" fill="rgb(218,196,35)" fg:x="44637" fg:w="24"/><text x="40.8048%" y="447.50"></text></g><g><title>std::time::SystemTime::duration_since (256 samples, 0.23%)</title><rect x="40.3676%" y="565" width="0.2326%" height="15" fill="rgb(233,63,24)" fg:x="44431" fg:w="256"/><text x="40.6176%" y="575.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (124 samples, 0.11%)</title><rect x="40.4875%" y="549" width="0.1127%" height="15" fill="rgb(225,8,4)" fg:x="44563" fg:w="124"/><text x="40.7375%" y="559.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (124 samples, 0.11%)</title><rect x="40.4875%" y="533" width="0.1127%" height="15" fill="rgb(234,105,35)" fg:x="44563" fg:w="124"/><text x="40.7375%" y="543.50"></text></g><g><title>core::time::Duration::new (26 samples, 0.02%)</title><rect x="40.5766%" y="517" width="0.0236%" height="15" fill="rgb(236,21,32)" fg:x="44661" fg:w="26"/><text x="40.8266%" y="527.50"></text></g><g><title>tremor_common::time::nanotime (897 samples, 0.81%)</title><rect x="40.2940%" y="581" width="0.8150%" height="15" fill="rgb(228,109,6)" fg:x="44350" fg:w="897"/><text x="40.5440%" y="591.50"></text></g><g><title>std::time::SystemTime::now (560 samples, 0.51%)</title><rect x="40.6002%" y="565" width="0.5088%" height="15" fill="rgb(229,215,31)" fg:x="44687" fg:w="560"/><text x="40.8502%" y="575.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (560 samples, 0.51%)</title><rect x="40.6002%" y="549" width="0.5088%" height="15" fill="rgb(221,52,54)" fg:x="44687" fg:w="560"/><text x="40.8502%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::now (560 samples, 0.51%)</title><rect x="40.6002%" y="533" width="0.5088%" height="15" fill="rgb(252,129,43)" fg:x="44687" fg:w="560"/><text x="40.8502%" y="543.50"></text></g><g><title>__clock_gettime (446 samples, 0.41%)</title><rect x="40.7038%" y="517" width="0.4052%" height="15" fill="rgb(248,183,27)" fg:x="44801" fg:w="446"/><text x="40.9538%" y="527.50"></text></g><g><title>__vdso_clock_gettime (406 samples, 0.37%)</title><rect x="40.7401%" y="501" width="0.3689%" height="15" fill="rgb(250,0,22)" fg:x="44841" fg:w="406"/><text x="40.9901%" y="511.50"></text></g><g><title>[[vdso]] (352 samples, 0.32%)</title><rect x="40.7892%" y="485" width="0.3198%" height="15" fill="rgb(213,166,10)" fg:x="44895" fg:w="352"/><text x="41.0392%" y="495.50"></text></g><g><title>abi_stable::erased_types::iterator::next (19 samples, 0.02%)</title><rect x="41.1190%" y="469" width="0.0173%" height="15" fill="rgb(207,163,36)" fg:x="45258" fg:w="19"/><text x="41.3690%" y="479.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (12 samples, 0.01%)</title><rect x="41.1253%" y="453" width="0.0109%" height="15" fill="rgb(208,122,22)" fg:x="45265" fg:w="12"/><text x="41.3753%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.01%)</title><rect x="41.1253%" y="437" width="0.0109%" height="15" fill="rgb(207,104,49)" fg:x="45265" fg:w="12"/><text x="41.3753%" y="447.50"></text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.01%)</title><rect x="41.1253%" y="421" width="0.0109%" height="15" fill="rgb(248,211,50)" fg:x="45265" fg:w="12"/><text x="41.3753%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.01%)</title><rect x="41.1253%" y="405" width="0.0109%" height="15" fill="rgb(217,13,45)" fg:x="45265" fg:w="12"/><text x="41.3753%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.01%)</title><rect x="41.1253%" y="389" width="0.0109%" height="15" fill="rgb(211,216,49)" fg:x="45265" fg:w="12"/><text x="41.3753%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 0.03%)</title><rect x="41.1144%" y="533" width="0.0291%" height="15" fill="rgb(221,58,53)" fg:x="45253" fg:w="32"/><text x="41.3644%" y="543.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 0.03%)</title><rect x="41.1144%" y="517" width="0.0291%" height="15" fill="rgb(220,112,41)" fg:x="45253" fg:w="32"/><text x="41.3644%" y="527.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 0.03%)</title><rect x="41.1144%" y="501" width="0.0291%" height="15" fill="rgb(236,38,28)" fg:x="45253" fg:w="32"/><text x="41.3644%" y="511.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (32 samples, 0.03%)</title><rect x="41.1144%" y="485" width="0.0291%" height="15" fill="rgb(227,195,22)" fg:x="45253" fg:w="32"/><text x="41.3644%" y="495.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (12 samples, 0.01%)</title><rect x="41.1671%" y="437" width="0.0109%" height="15" fill="rgb(214,55,33)" fg:x="45311" fg:w="12"/><text x="41.4171%" y="447.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (12 samples, 0.01%)</title><rect x="41.1671%" y="421" width="0.0109%" height="15" fill="rgb(248,80,13)" fg:x="45311" fg:w="12"/><text x="41.4171%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (48 samples, 0.04%)</title><rect x="41.1435%" y="533" width="0.0436%" height="15" fill="rgb(238,52,6)" fg:x="45285" fg:w="48"/><text x="41.3935%" y="543.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::size_hint (48 samples, 0.04%)</title><rect x="41.1435%" y="517" width="0.0436%" height="15" fill="rgb(224,198,47)" fg:x="45285" fg:w="48"/><text x="41.3935%" y="527.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (48 samples, 0.04%)</title><rect x="41.1435%" y="501" width="0.0436%" height="15" fill="rgb(233,171,20)" fg:x="45285" fg:w="48"/><text x="41.3935%" y="511.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (48 samples, 0.04%)</title><rect x="41.1435%" y="485" width="0.0436%" height="15" fill="rgb(241,30,25)" fg:x="45285" fg:w="48"/><text x="41.3935%" y="495.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (22 samples, 0.02%)</title><rect x="41.1671%" y="469" width="0.0200%" height="15" fill="rgb(207,171,38)" fg:x="45311" fg:w="22"/><text x="41.4171%" y="479.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (22 samples, 0.02%)</title><rect x="41.1671%" y="453" width="0.0200%" height="15" fill="rgb(234,70,1)" fg:x="45311" fg:w="22"/><text x="41.4171%" y="463.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;abi_stable::std_types::tuple::Tuple2&lt;K,V&gt;&gt;&gt;::extend (118 samples, 0.11%)</title><rect x="41.1090%" y="565" width="0.1072%" height="15" fill="rgb(232,178,18)" fg:x="45247" fg:w="118"/><text x="41.3590%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (118 samples, 0.11%)</title><rect x="41.1090%" y="549" width="0.1072%" height="15" fill="rgb(241,78,40)" fg:x="45247" fg:w="118"/><text x="41.3590%" y="559.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (32 samples, 0.03%)</title><rect x="41.1871%" y="533" width="0.0291%" height="15" fill="rgb(222,35,25)" fg:x="45333" fg:w="32"/><text x="41.4371%" y="543.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (27 samples, 0.02%)</title><rect x="41.1916%" y="517" width="0.0245%" height="15" fill="rgb(207,92,16)" fg:x="45338" fg:w="27"/><text x="41.4416%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (27 samples, 0.02%)</title><rect x="41.1916%" y="501" width="0.0245%" height="15" fill="rgb(216,59,51)" fg:x="45338" fg:w="27"/><text x="41.4416%" y="511.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (24 samples, 0.02%)</title><rect x="41.1944%" y="485" width="0.0218%" height="15" fill="rgb(213,80,28)" fg:x="45341" fg:w="24"/><text x="41.4444%" y="495.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (24 samples, 0.02%)</title><rect x="41.1944%" y="469" width="0.0218%" height="15" fill="rgb(220,93,7)" fg:x="45341" fg:w="24"/><text x="41.4444%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (24 samples, 0.02%)</title><rect x="41.1944%" y="453" width="0.0218%" height="15" fill="rgb(225,24,44)" fg:x="45341" fg:w="24"/><text x="41.4444%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (24 samples, 0.02%)</title><rect x="41.1944%" y="437" width="0.0218%" height="15" fill="rgb(243,74,40)" fg:x="45341" fg:w="24"/><text x="41.4444%" y="447.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (76 samples, 0.07%)</title><rect x="41.2334%" y="485" width="0.0690%" height="15" fill="rgb(228,39,7)" fg:x="45384" fg:w="76"/><text x="41.4834%" y="495.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (76 samples, 0.07%)</title><rect x="41.2334%" y="469" width="0.0690%" height="15" fill="rgb(227,79,8)" fg:x="45384" fg:w="76"/><text x="41.4834%" y="479.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (63 samples, 0.06%)</title><rect x="41.2453%" y="453" width="0.0572%" height="15" fill="rgb(236,58,11)" fg:x="45397" fg:w="63"/><text x="41.4953%" y="463.50"></text></g><g><title>alloc::alloc::exchange_malloc (51 samples, 0.05%)</title><rect x="41.2562%" y="437" width="0.0463%" height="15" fill="rgb(249,63,35)" fg:x="45409" fg:w="51"/><text x="41.5062%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (50 samples, 0.05%)</title><rect x="41.2571%" y="421" width="0.0454%" height="15" fill="rgb(252,114,16)" fg:x="45410" fg:w="50"/><text x="41.5071%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (50 samples, 0.05%)</title><rect x="41.2571%" y="405" width="0.0454%" height="15" fill="rgb(254,151,24)" fg:x="45410" fg:w="50"/><text x="41.5071%" y="415.50"></text></g><g><title>alloc::alloc::alloc (50 samples, 0.05%)</title><rect x="41.2571%" y="389" width="0.0454%" height="15" fill="rgb(253,54,39)" fg:x="45410" fg:w="50"/><text x="41.5071%" y="399.50"></text></g><g><title>__rg_alloc (50 samples, 0.05%)</title><rect x="41.2571%" y="373" width="0.0454%" height="15" fill="rgb(243,25,45)" fg:x="45410" fg:w="50"/><text x="41.5071%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (50 samples, 0.05%)</title><rect x="41.2571%" y="357" width="0.0454%" height="15" fill="rgb(234,134,9)" fg:x="45410" fg:w="50"/><text x="41.5071%" y="367.50"></text></g><g><title>sn_rust_alloc (48 samples, 0.04%)</title><rect x="41.2589%" y="341" width="0.0436%" height="15" fill="rgb(227,166,31)" fg:x="45412" fg:w="48"/><text x="41.5089%" y="351.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (12 samples, 0.01%)</title><rect x="41.3152%" y="421" width="0.0109%" height="15" fill="rgb(245,143,41)" fg:x="45474" fg:w="12"/><text x="41.5652%" y="431.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::pointer_trait::OwnedPointer for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop_allocation (62 samples, 0.06%)</title><rect x="41.3098%" y="437" width="0.0563%" height="15" fill="rgb(238,181,32)" fg:x="45468" fg:w="62"/><text x="41.5598%" y="447.50"></text></g><g><title>sn_rust_dealloc (44 samples, 0.04%)</title><rect x="41.3261%" y="421" width="0.0400%" height="15" fill="rgb(224,113,18)" fg:x="45486" fg:w="44"/><text x="41.5761%" y="431.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (198 samples, 0.18%)</title><rect x="41.2162%" y="565" width="0.1799%" height="15" fill="rgb(240,229,28)" fg:x="45365" fg:w="198"/><text x="41.4662%" y="575.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (193 samples, 0.18%)</title><rect x="41.2207%" y="549" width="0.1753%" height="15" fill="rgb(250,185,3)" fg:x="45370" fg:w="193"/><text x="41.4707%" y="559.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val (191 samples, 0.17%)</title><rect x="41.2225%" y="533" width="0.1735%" height="15" fill="rgb(212,59,25)" fg:x="45372" fg:w="191"/><text x="41.4725%" y="543.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val::{{closure}} (191 samples, 0.17%)</title><rect x="41.2225%" y="517" width="0.1735%" height="15" fill="rgb(221,87,20)" fg:x="45372" fg:w="191"/><text x="41.4725%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val::{{closure}} (191 samples, 0.17%)</title><rect x="41.2225%" y="501" width="0.1735%" height="15" fill="rgb(213,74,28)" fg:x="45372" fg:w="191"/><text x="41.4725%" y="511.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (95 samples, 0.09%)</title><rect x="41.3098%" y="485" width="0.0863%" height="15" fill="rgb(224,132,34)" fg:x="45468" fg:w="95"/><text x="41.5598%" y="495.50"></text></g><g><title>core::ops::function::FnOnce::call_once (95 samples, 0.09%)</title><rect x="41.3098%" y="469" width="0.0863%" height="15" fill="rgb(222,101,24)" fg:x="45468" fg:w="95"/><text x="41.5598%" y="479.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::into_inner (95 samples, 0.09%)</title><rect x="41.3098%" y="453" width="0.0863%" height="15" fill="rgb(254,142,4)" fg:x="45468" fg:w="95"/><text x="41.5598%" y="463.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (33 samples, 0.03%)</title><rect x="41.3661%" y="437" width="0.0300%" height="15" fill="rgb(230,229,49)" fg:x="45530" fg:w="33"/><text x="41.6161%" y="447.50"></text></g><g><title>core::ptr::read (33 samples, 0.03%)</title><rect x="41.3661%" y="421" width="0.0300%" height="15" fill="rgb(238,70,47)" fg:x="45530" fg:w="33"/><text x="41.6161%" y="431.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (22 samples, 0.02%)</title><rect x="41.4115%" y="453" width="0.0200%" height="15" fill="rgb(231,160,17)" fg:x="45580" fg:w="22"/><text x="41.6615%" y="463.50"></text></g><g><title>tremor_pipeline::OpMeta::merge (410 samples, 0.37%)</title><rect x="41.1090%" y="581" width="0.3725%" height="15" fill="rgb(218,68,53)" fg:x="45247" fg:w="410"/><text x="41.3590%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (94 samples, 0.09%)</title><rect x="41.3961%" y="565" width="0.0854%" height="15" fill="rgb(236,111,10)" fg:x="45563" fg:w="94"/><text x="41.6461%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::ValIterInterface&lt;u32,u32&gt;&gt;&gt; (94 samples, 0.09%)</title><rect x="41.3961%" y="549" width="0.0854%" height="15" fill="rgb(224,34,41)" fg:x="45563" fg:w="94"/><text x="41.6461%" y="559.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (94 samples, 0.09%)</title><rect x="41.3961%" y="533" width="0.0854%" height="15" fill="rgb(241,118,19)" fg:x="45563" fg:w="94"/><text x="41.6461%" y="543.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (86 samples, 0.08%)</title><rect x="41.4033%" y="517" width="0.0781%" height="15" fill="rgb(238,129,25)" fg:x="45571" fg:w="86"/><text x="41.6533%" y="527.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (82 samples, 0.07%)</title><rect x="41.4070%" y="501" width="0.0745%" height="15" fill="rgb(238,22,31)" fg:x="45575" fg:w="82"/><text x="41.6570%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (82 samples, 0.07%)</title><rect x="41.4070%" y="485" width="0.0745%" height="15" fill="rgb(222,174,48)" fg:x="45575" fg:w="82"/><text x="41.6570%" y="495.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (82 samples, 0.07%)</title><rect x="41.4070%" y="469" width="0.0745%" height="15" fill="rgb(206,152,40)" fg:x="45575" fg:w="82"/><text x="41.6570%" y="479.50"></text></g><g><title>sn_rust_dealloc (55 samples, 0.05%)</title><rect x="41.4315%" y="453" width="0.0500%" height="15" fill="rgb(218,99,54)" fg:x="45602" fg:w="55"/><text x="41.6815%" y="463.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (8,866 samples, 8.06%)</title><rect x="33.4336%" y="597" width="8.0552%" height="15" fill="rgb(220,174,26)" fg:x="36799" fg:w="8866"/><text x="33.6836%" y="607.50">tremor_runt..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (168 samples, 0.15%)</title><rect x="41.5623%" y="485" width="0.1526%" height="15" fill="rgb(245,116,9)" fg:x="45746" fg:w="168"/><text x="41.8123%" y="495.50"></text></g><g><title>core::ptr::read (163 samples, 0.15%)</title><rect x="41.5669%" y="469" width="0.1481%" height="15" fill="rgb(209,72,35)" fg:x="45751" fg:w="163"/><text x="41.8169%" y="479.50"></text></g><g><title>[libc-2.31.so] (159 samples, 0.14%)</title><rect x="41.5705%" y="453" width="0.1445%" height="15" fill="rgb(226,126,21)" fg:x="45755" fg:w="159"/><text x="41.8205%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (90 samples, 0.08%)</title><rect x="41.7177%" y="357" width="0.0818%" height="15" fill="rgb(227,192,1)" fg:x="45917" fg:w="90"/><text x="41.9677%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (90 samples, 0.08%)</title><rect x="41.7177%" y="341" width="0.0818%" height="15" fill="rgb(237,180,29)" fg:x="45917" fg:w="90"/><text x="41.9677%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (90 samples, 0.08%)</title><rect x="41.7177%" y="325" width="0.0818%" height="15" fill="rgb(230,197,35)" fg:x="45917" fg:w="90"/><text x="41.9677%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (90 samples, 0.08%)</title><rect x="41.7177%" y="309" width="0.0818%" height="15" fill="rgb(246,193,31)" fg:x="45917" fg:w="90"/><text x="41.9677%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (90 samples, 0.08%)</title><rect x="41.7177%" y="293" width="0.0818%" height="15" fill="rgb(241,36,4)" fg:x="45917" fg:w="90"/><text x="41.9677%" y="303.50"></text></g><g><title>alloc::alloc::alloc (90 samples, 0.08%)</title><rect x="41.7177%" y="277" width="0.0818%" height="15" fill="rgb(241,130,17)" fg:x="45917" fg:w="90"/><text x="41.9677%" y="287.50"></text></g><g><title>__rg_alloc (90 samples, 0.08%)</title><rect x="41.7177%" y="261" width="0.0818%" height="15" fill="rgb(206,137,32)" fg:x="45917" fg:w="90"/><text x="41.9677%" y="271.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (90 samples, 0.08%)</title><rect x="41.7177%" y="245" width="0.0818%" height="15" fill="rgb(237,228,51)" fg:x="45917" fg:w="90"/><text x="41.9677%" y="255.50"></text></g><g><title>sn_rust_alloc (90 samples, 0.08%)</title><rect x="41.7177%" y="229" width="0.0818%" height="15" fill="rgb(243,6,42)" fg:x="45917" fg:w="90"/><text x="41.9677%" y="239.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (105 samples, 0.10%)</title><rect x="41.7177%" y="485" width="0.0954%" height="15" fill="rgb(251,74,28)" fg:x="45917" fg:w="105"/><text x="41.9677%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (105 samples, 0.10%)</title><rect x="41.7177%" y="469" width="0.0954%" height="15" fill="rgb(218,20,49)" fg:x="45917" fg:w="105"/><text x="41.9677%" y="479.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (105 samples, 0.10%)</title><rect x="41.7177%" y="453" width="0.0954%" height="15" fill="rgb(238,28,14)" fg:x="45917" fg:w="105"/><text x="41.9677%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (105 samples, 0.10%)</title><rect x="41.7177%" y="437" width="0.0954%" height="15" fill="rgb(229,40,46)" fg:x="45917" fg:w="105"/><text x="41.9677%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (105 samples, 0.10%)</title><rect x="41.7177%" y="421" width="0.0954%" height="15" fill="rgb(244,195,20)" fg:x="45917" fg:w="105"/><text x="41.9677%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (105 samples, 0.10%)</title><rect x="41.7177%" y="405" width="0.0954%" height="15" fill="rgb(253,56,35)" fg:x="45917" fg:w="105"/><text x="41.9677%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (105 samples, 0.10%)</title><rect x="41.7177%" y="389" width="0.0954%" height="15" fill="rgb(210,149,44)" fg:x="45917" fg:w="105"/><text x="41.9677%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (105 samples, 0.10%)</title><rect x="41.7177%" y="373" width="0.0954%" height="15" fill="rgb(240,135,12)" fg:x="45917" fg:w="105"/><text x="41.9677%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (15 samples, 0.01%)</title><rect x="41.7995%" y="357" width="0.0136%" height="15" fill="rgb(251,24,50)" fg:x="46007" fg:w="15"/><text x="42.0495%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (15 samples, 0.01%)</title><rect x="41.7995%" y="341" width="0.0136%" height="15" fill="rgb(243,200,47)" fg:x="46007" fg:w="15"/><text x="42.0495%" y="351.50"></text></g><g><title>[libc-2.31.so] (13 samples, 0.01%)</title><rect x="41.8013%" y="325" width="0.0118%" height="15" fill="rgb(224,166,26)" fg:x="46009" fg:w="13"/><text x="42.0513%" y="335.50"></text></g><g><title>[libc-2.31.so] (243 samples, 0.22%)</title><rect x="41.8131%" y="485" width="0.2208%" height="15" fill="rgb(233,0,47)" fg:x="46022" fg:w="243"/><text x="42.0631%" y="495.50"></text></g><g><title>[libc-2.31.so] (129 samples, 0.12%)</title><rect x="42.0366%" y="469" width="0.1172%" height="15" fill="rgb(253,80,5)" fg:x="46268" fg:w="129"/><text x="42.2866%" y="479.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (331 samples, 0.30%)</title><rect x="42.1865%" y="357" width="0.3007%" height="15" fill="rgb(214,133,25)" fg:x="46433" fg:w="331"/><text x="42.4365%" y="367.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (504 samples, 0.46%)</title><rect x="42.0339%" y="485" width="0.4579%" height="15" fill="rgb(209,27,14)" fg:x="46265" fg:w="504"/><text x="42.2839%" y="495.50"></text></g><g><title>alloc::alloc::exchange_malloc (372 samples, 0.34%)</title><rect x="42.1538%" y="469" width="0.3380%" height="15" fill="rgb(219,102,51)" fg:x="46397" fg:w="372"/><text x="42.4038%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (372 samples, 0.34%)</title><rect x="42.1538%" y="453" width="0.3380%" height="15" fill="rgb(237,18,16)" fg:x="46397" fg:w="372"/><text x="42.4038%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (372 samples, 0.34%)</title><rect x="42.1538%" y="437" width="0.3380%" height="15" fill="rgb(241,85,17)" fg:x="46397" fg:w="372"/><text x="42.4038%" y="447.50"></text></g><g><title>alloc::alloc::alloc (370 samples, 0.34%)</title><rect x="42.1556%" y="421" width="0.3362%" height="15" fill="rgb(236,90,42)" fg:x="46399" fg:w="370"/><text x="42.4056%" y="431.50"></text></g><g><title>__rg_alloc (370 samples, 0.34%)</title><rect x="42.1556%" y="405" width="0.3362%" height="15" fill="rgb(249,57,21)" fg:x="46399" fg:w="370"/><text x="42.4056%" y="415.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (370 samples, 0.34%)</title><rect x="42.1556%" y="389" width="0.3362%" height="15" fill="rgb(243,12,36)" fg:x="46399" fg:w="370"/><text x="42.4056%" y="399.50"></text></g><g><title>sn_rust_alloc (370 samples, 0.34%)</title><rect x="42.1556%" y="373" width="0.3362%" height="15" fill="rgb(253,128,47)" fg:x="46399" fg:w="370"/><text x="42.4056%" y="383.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.02%)</title><rect x="42.4918%" y="469" width="0.0245%" height="15" fill="rgb(207,33,20)" fg:x="46769" fg:w="27"/><text x="42.7418%" y="479.50"></text></g><g><title>sn_rust_dealloc (25 samples, 0.02%)</title><rect x="42.5163%" y="469" width="0.0227%" height="15" fill="rgb(233,215,35)" fg:x="46796" fg:w="25"/><text x="42.7663%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (58 samples, 0.05%)</title><rect x="42.4918%" y="485" width="0.0527%" height="15" fill="rgb(249,188,52)" fg:x="46769" fg:w="58"/><text x="42.7418%" y="495.50"></text></g><g><title>core::str::&lt;impl str&gt;::eq_ignore_ascii_case (14 samples, 0.01%)</title><rect x="42.5481%" y="485" width="0.0127%" height="15" fill="rgb(225,12,32)" fg:x="46831" fg:w="14"/><text x="42.7981%" y="495.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case (14 samples, 0.01%)</title><rect x="42.5481%" y="469" width="0.0127%" height="15" fill="rgb(247,98,14)" fg:x="46831" fg:w="14"/><text x="42.7981%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (13 samples, 0.01%)</title><rect x="42.5490%" y="453" width="0.0118%" height="15" fill="rgb(247,219,48)" fg:x="46832" fg:w="13"/><text x="42.7990%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (13 samples, 0.01%)</title><rect x="42.5490%" y="437" width="0.0118%" height="15" fill="rgb(253,60,48)" fg:x="46832" fg:w="13"/><text x="42.7990%" y="447.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,193 samples, 1.08%)</title><rect x="41.4887%" y="517" width="1.0839%" height="15" fill="rgb(245,15,52)" fg:x="45665" fg:w="1193"/><text x="41.7387%" y="527.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (1,193 samples, 1.08%)</title><rect x="41.4887%" y="501" width="1.0839%" height="15" fill="rgb(220,133,28)" fg:x="45665" fg:w="1193"/><text x="41.7387%" y="511.50"></text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (13 samples, 0.01%)</title><rect x="42.5608%" y="485" width="0.0118%" height="15" fill="rgb(217,180,4)" fg:x="46845" fg:w="13"/><text x="42.8108%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (13 samples, 0.01%)</title><rect x="42.5608%" y="469" width="0.0118%" height="15" fill="rgb(251,24,1)" fg:x="46845" fg:w="13"/><text x="42.8108%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (13 samples, 0.01%)</title><rect x="42.5608%" y="453" width="0.0118%" height="15" fill="rgb(212,185,49)" fg:x="46845" fg:w="13"/><text x="42.8108%" y="463.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,228 samples, 1.12%)</title><rect x="41.4887%" y="581" width="1.1157%" height="15" fill="rgb(215,175,22)" fg:x="45665" fg:w="1228"/><text x="41.7387%" y="591.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (1,228 samples, 1.12%)</title><rect x="41.4887%" y="565" width="1.1157%" height="15" fill="rgb(250,205,14)" fg:x="45665" fg:w="1228"/><text x="41.7387%" y="575.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,228 samples, 1.12%)</title><rect x="41.4887%" y="549" width="1.1157%" height="15" fill="rgb(225,211,22)" fg:x="45665" fg:w="1228"/><text x="41.7387%" y="559.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (1,228 samples, 1.12%)</title><rect x="41.4887%" y="533" width="1.1157%" height="15" fill="rgb(251,179,42)" fg:x="45665" fg:w="1228"/><text x="41.7387%" y="543.50"></text></g><g><title>tremor_runtime::connectors::source::Streams::get_or_create_stream (35 samples, 0.03%)</title><rect x="42.5726%" y="517" width="0.0318%" height="15" fill="rgb(208,216,51)" fg:x="46858" fg:w="35"/><text x="42.8226%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (21 samples, 0.02%)</title><rect x="42.5854%" y="501" width="0.0191%" height="15" fill="rgb(235,36,11)" fg:x="46872" fg:w="21"/><text x="42.8354%" y="511.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (16 samples, 0.01%)</title><rect x="42.5899%" y="485" width="0.0145%" height="15" fill="rgb(213,189,28)" fg:x="46877" fg:w="16"/><text x="42.8399%" y="495.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (16 samples, 0.01%)</title><rect x="42.5899%" y="469" width="0.0145%" height="15" fill="rgb(227,203,42)" fg:x="46877" fg:w="16"/><text x="42.8399%" y="479.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (16 samples, 0.01%)</title><rect x="42.5899%" y="453" width="0.0145%" height="15" fill="rgb(244,72,36)" fg:x="46877" fg:w="16"/><text x="42.8399%" y="463.50"></text></g><g><title>[libc-2.31.so] (276 samples, 0.25%)</title><rect x="42.6526%" y="565" width="0.2508%" height="15" fill="rgb(213,53,17)" fg:x="46946" fg:w="276"/><text x="42.9026%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="42.9043%" y="565" width="0.0136%" height="15" fill="rgb(207,167,3)" fg:x="47223" fg:w="15"/><text x="43.1543%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="42.9043%" y="549" width="0.0136%" height="15" fill="rgb(216,98,30)" fg:x="47223" fg:w="15"/><text x="43.1543%" y="559.50"></text></g><g><title>alloc::alloc::box_free (15 samples, 0.01%)</title><rect x="42.9043%" y="533" width="0.0136%" height="15" fill="rgb(236,123,15)" fg:x="47223" fg:w="15"/><text x="43.1543%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (15 samples, 0.01%)</title><rect x="42.9043%" y="517" width="0.0136%" height="15" fill="rgb(248,81,50)" fg:x="47223" fg:w="15"/><text x="43.1543%" y="527.50"></text></g><g><title>alloc::alloc::dealloc (15 samples, 0.01%)</title><rect x="42.9043%" y="501" width="0.0136%" height="15" fill="rgb(214,120,4)" fg:x="47223" fg:w="15"/><text x="43.1543%" y="511.50"></text></g><g><title>__rg_dealloc (15 samples, 0.01%)</title><rect x="42.9043%" y="485" width="0.0136%" height="15" fill="rgb(208,179,34)" fg:x="47223" fg:w="15"/><text x="43.1543%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (15 samples, 0.01%)</title><rect x="42.9043%" y="469" width="0.0136%" height="15" fill="rgb(227,140,7)" fg:x="47223" fg:w="15"/><text x="43.1543%" y="479.50"></text></g><g><title>sn_rust_dealloc (13 samples, 0.01%)</title><rect x="42.9061%" y="453" width="0.0118%" height="15" fill="rgb(214,22,6)" fg:x="47225" fg:w="13"/><text x="43.1561%" y="463.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (43 samples, 0.04%)</title><rect x="42.9706%" y="501" width="0.0391%" height="15" fill="rgb(207,137,27)" fg:x="47296" fg:w="43"/><text x="43.2206%" y="511.50"></text></g><g><title>core::mem::replace (43 samples, 0.04%)</title><rect x="42.9706%" y="485" width="0.0391%" height="15" fill="rgb(210,8,46)" fg:x="47296" fg:w="43"/><text x="43.2206%" y="495.50"></text></g><g><title>core::ptr::read (43 samples, 0.04%)</title><rect x="42.9706%" y="469" width="0.0391%" height="15" fill="rgb(240,16,54)" fg:x="47296" fg:w="43"/><text x="43.2206%" y="479.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (76 samples, 0.07%)</title><rect x="42.9524%" y="517" width="0.0690%" height="15" fill="rgb(211,209,29)" fg:x="47276" fg:w="76"/><text x="43.2024%" y="527.50"></text></g><g><title>core::mem::drop (13 samples, 0.01%)</title><rect x="43.0096%" y="501" width="0.0118%" height="15" fill="rgb(226,228,24)" fg:x="47339" fg:w="13"/><text x="43.2596%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (13 samples, 0.01%)</title><rect x="43.0096%" y="485" width="0.0118%" height="15" fill="rgb(222,84,9)" fg:x="47339" fg:w="13"/><text x="43.2596%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (72 samples, 0.07%)</title><rect x="43.0215%" y="517" width="0.0654%" height="15" fill="rgb(234,203,30)" fg:x="47352" fg:w="72"/><text x="43.2715%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (67 samples, 0.06%)</title><rect x="43.0260%" y="501" width="0.0609%" height="15" fill="rgb(238,109,14)" fg:x="47357" fg:w="67"/><text x="43.2760%" y="511.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (67 samples, 0.06%)</title><rect x="43.0260%" y="485" width="0.0609%" height="15" fill="rgb(233,206,34)" fg:x="47357" fg:w="67"/><text x="43.2760%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (61 samples, 0.06%)</title><rect x="43.0315%" y="469" width="0.0554%" height="15" fill="rgb(220,167,47)" fg:x="47363" fg:w="61"/><text x="43.2815%" y="479.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (61 samples, 0.06%)</title><rect x="43.0315%" y="453" width="0.0554%" height="15" fill="rgb(238,105,10)" fg:x="47363" fg:w="61"/><text x="43.2815%" y="463.50"></text></g><g><title>__GI___pthread_mutex_unlock (58 samples, 0.05%)</title><rect x="43.0342%" y="437" width="0.0527%" height="15" fill="rgb(213,227,17)" fg:x="47366" fg:w="58"/><text x="43.2842%" y="447.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (349 samples, 0.32%)</title><rect x="42.9333%" y="533" width="0.3171%" height="15" fill="rgb(217,132,38)" fg:x="47255" fg:w="349"/><text x="43.1833%" y="543.50"></text></g><g><title>event_listener::Inner::lock (170 samples, 0.15%)</title><rect x="43.0960%" y="517" width="0.1545%" height="15" fill="rgb(242,146,4)" fg:x="47434" fg:w="170"/><text x="43.3460%" y="527.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (166 samples, 0.15%)</title><rect x="43.0996%" y="501" width="0.1508%" height="15" fill="rgb(212,61,9)" fg:x="47438" fg:w="166"/><text x="43.3496%" y="511.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (165 samples, 0.15%)</title><rect x="43.1005%" y="485" width="0.1499%" height="15" fill="rgb(247,126,22)" fg:x="47439" fg:w="165"/><text x="43.3505%" y="495.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (164 samples, 0.15%)</title><rect x="43.1014%" y="469" width="0.1490%" height="15" fill="rgb(220,196,2)" fg:x="47440" fg:w="164"/><text x="43.3514%" y="479.50"></text></g><g><title>__GI___pthread_mutex_lock (164 samples, 0.15%)</title><rect x="43.1014%" y="453" width="0.1490%" height="15" fill="rgb(208,46,4)" fg:x="47440" fg:w="164"/><text x="43.3514%" y="463.50"></text></g><g><title>concurrent_queue::full_fence (100 samples, 0.09%)</title><rect x="43.2713%" y="485" width="0.0909%" height="15" fill="rgb(252,104,46)" fg:x="47627" fg:w="100"/><text x="43.5213%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (98 samples, 0.09%)</title><rect x="43.2731%" y="469" width="0.0890%" height="15" fill="rgb(237,152,48)" fg:x="47629" fg:w="98"/><text x="43.5231%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (98 samples, 0.09%)</title><rect x="43.2731%" y="453" width="0.0890%" height="15" fill="rgb(221,59,37)" fg:x="47629" fg:w="98"/><text x="43.5231%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (98 samples, 0.09%)</title><rect x="43.2731%" y="437" width="0.0890%" height="15" fill="rgb(209,202,51)" fg:x="47629" fg:w="98"/><text x="43.5231%" y="447.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (2,072 samples, 1.88%)</title><rect x="41.4887%" y="597" width="1.8825%" height="15" fill="rgb(228,81,30)" fg:x="45665" fg:w="2072"/><text x="41.7387%" y="607.50">t..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (844 samples, 0.77%)</title><rect x="42.6044%" y="581" width="0.7668%" height="15" fill="rgb(227,42,39)" fg:x="46893" fg:w="844"/><text x="42.8544%" y="591.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (499 samples, 0.45%)</title><rect x="42.9179%" y="565" width="0.4534%" height="15" fill="rgb(221,26,2)" fg:x="47238" fg:w="499"/><text x="43.1679%" y="575.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (499 samples, 0.45%)</title><rect x="42.9179%" y="549" width="0.4534%" height="15" fill="rgb(254,61,31)" fg:x="47238" fg:w="499"/><text x="43.1679%" y="559.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (133 samples, 0.12%)</title><rect x="43.2504%" y="533" width="0.1208%" height="15" fill="rgb(222,173,38)" fg:x="47604" fg:w="133"/><text x="43.5004%" y="543.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (124 samples, 0.11%)</title><rect x="43.2586%" y="517" width="0.1127%" height="15" fill="rgb(218,50,12)" fg:x="47613" fg:w="124"/><text x="43.5086%" y="527.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (119 samples, 0.11%)</title><rect x="43.2631%" y="501" width="0.1081%" height="15" fill="rgb(223,88,40)" fg:x="47618" fg:w="119"/><text x="43.5131%" y="511.50"></text></g><g><title>[libc-2.31.so] (215 samples, 0.20%)</title><rect x="43.5893%" y="565" width="0.1953%" height="15" fill="rgb(237,54,19)" fg:x="47977" fg:w="215"/><text x="43.8393%" y="575.50"></text></g><g><title>[libc-2.31.so] (361 samples, 0.33%)</title><rect x="43.8473%" y="549" width="0.3280%" height="15" fill="rgb(251,129,25)" fg:x="48261" fg:w="361"/><text x="44.0973%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (155 samples, 0.14%)</title><rect x="44.1753%" y="549" width="0.1408%" height="15" fill="rgb(238,97,19)" fg:x="48622" fg:w="155"/><text x="44.4253%" y="559.50"></text></g><g><title>core::ptr::write (153 samples, 0.14%)</title><rect x="44.1771%" y="533" width="0.1390%" height="15" fill="rgb(240,169,18)" fg:x="48624" fg:w="153"/><text x="44.4271%" y="543.50"></text></g><g><title>[libc-2.31.so] (151 samples, 0.14%)</title><rect x="44.1789%" y="517" width="0.1372%" height="15" fill="rgb(230,187,49)" fg:x="48626" fg:w="151"/><text x="44.4289%" y="527.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (297 samples, 0.27%)</title><rect x="44.3270%" y="549" width="0.2698%" height="15" fill="rgb(209,44,26)" fg:x="48789" fg:w="297"/><text x="44.5770%" y="559.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (292 samples, 0.27%)</title><rect x="44.3316%" y="533" width="0.2653%" height="15" fill="rgb(244,0,6)" fg:x="48794" fg:w="292"/><text x="44.5816%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (287 samples, 0.26%)</title><rect x="44.3361%" y="517" width="0.2608%" height="15" fill="rgb(248,18,21)" fg:x="48799" fg:w="287"/><text x="44.5861%" y="527.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (287 samples, 0.26%)</title><rect x="44.3361%" y="501" width="0.2608%" height="15" fill="rgb(245,180,19)" fg:x="48799" fg:w="287"/><text x="44.5861%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (287 samples, 0.26%)</title><rect x="44.3361%" y="485" width="0.2608%" height="15" fill="rgb(252,118,36)" fg:x="48799" fg:w="287"/><text x="44.5861%" y="495.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (287 samples, 0.26%)</title><rect x="44.3361%" y="469" width="0.2608%" height="15" fill="rgb(210,224,19)" fg:x="48799" fg:w="287"/><text x="44.5861%" y="479.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (287 samples, 0.26%)</title><rect x="44.3361%" y="453" width="0.2608%" height="15" fill="rgb(218,30,24)" fg:x="48799" fg:w="287"/><text x="44.5861%" y="463.50"></text></g><g><title>[libc-2.31.so] (278 samples, 0.25%)</title><rect x="44.3443%" y="437" width="0.2526%" height="15" fill="rgb(219,75,50)" fg:x="48808" fg:w="278"/><text x="44.5943%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="45.0094%" y="517" width="0.0145%" height="15" fill="rgb(234,72,50)" fg:x="49540" fg:w="16"/><text x="45.2594%" y="527.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (241 samples, 0.22%)</title><rect x="45.0239%" y="517" width="0.2190%" height="15" fill="rgb(219,100,48)" fg:x="49556" fg:w="241"/><text x="45.2739%" y="527.50"></text></g><g><title>[libc-2.31.so] (189 samples, 0.17%)</title><rect x="45.0711%" y="501" width="0.1717%" height="15" fill="rgb(253,5,41)" fg:x="49608" fg:w="189"/><text x="45.3211%" y="511.50"></text></g><g><title>[libc-2.31.so] (964 samples, 0.88%)</title><rect x="45.2429%" y="517" width="0.8758%" height="15" fill="rgb(247,181,11)" fg:x="49797" fg:w="964"/><text x="45.4929%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (302 samples, 0.27%)</title><rect x="46.1269%" y="517" width="0.2744%" height="15" fill="rgb(222,223,25)" fg:x="50770" fg:w="302"/><text x="46.3769%" y="527.50"></text></g><g><title>core::ptr::read (274 samples, 0.25%)</title><rect x="46.1523%" y="501" width="0.2489%" height="15" fill="rgb(214,198,28)" fg:x="50798" fg:w="274"/><text x="46.4023%" y="511.50"></text></g><g><title>[libc-2.31.so] (216 samples, 0.20%)</title><rect x="46.2050%" y="485" width="0.1962%" height="15" fill="rgb(230,46,43)" fg:x="50856" fg:w="216"/><text x="46.4550%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (153 samples, 0.14%)</title><rect x="46.4013%" y="517" width="0.1390%" height="15" fill="rgb(233,65,53)" fg:x="51072" fg:w="153"/><text x="46.6513%" y="527.50"></text></g><g><title>core::ptr::write (145 samples, 0.13%)</title><rect x="46.4085%" y="501" width="0.1317%" height="15" fill="rgb(221,121,27)" fg:x="51080" fg:w="145"/><text x="46.6585%" y="511.50"></text></g><g><title>[libc-2.31.so] (145 samples, 0.13%)</title><rect x="46.4085%" y="485" width="0.1317%" height="15" fill="rgb(247,70,47)" fg:x="51080" fg:w="145"/><text x="46.6585%" y="495.50"></text></g><g><title>alloc::vec::into_iter::IntoIter&lt;T,A&gt;::as_raw_mut_slice (25 samples, 0.02%)</title><rect x="46.5457%" y="485" width="0.0227%" height="15" fill="rgb(228,85,35)" fg:x="51231" fg:w="25"/><text x="46.7957%" y="495.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (20 samples, 0.02%)</title><rect x="46.5503%" y="469" width="0.0182%" height="15" fill="rgb(209,50,18)" fg:x="51236" fg:w="20"/><text x="46.8003%" y="479.50"></text></g><g><title>core::iter::traits::exact_size::ExactSizeIterator::len (20 samples, 0.02%)</title><rect x="46.5503%" y="453" width="0.0182%" height="15" fill="rgb(250,19,35)" fg:x="51236" fg:w="20"/><text x="46.8003%" y="463.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (20 samples, 0.02%)</title><rect x="46.5503%" y="437" width="0.0182%" height="15" fill="rgb(253,107,29)" fg:x="51236" fg:w="20"/><text x="46.8003%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (20 samples, 0.02%)</title><rect x="46.5503%" y="421" width="0.0182%" height="15" fill="rgb(252,179,29)" fg:x="51236" fg:w="20"/><text x="46.8003%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;tremor_pipeline::event::Event&gt;&gt; (42 samples, 0.04%)</title><rect x="46.5403%" y="517" width="0.0382%" height="15" fill="rgb(238,194,6)" fg:x="51225" fg:w="42"/><text x="46.7903%" y="527.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.03%)</title><rect x="46.5448%" y="501" width="0.0336%" height="15" fill="rgb(238,164,29)" fg:x="51230" fg:w="37"/><text x="46.7948%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (16 samples, 0.01%)</title><rect x="46.5866%" y="517" width="0.0145%" height="15" fill="rgb(224,25,9)" fg:x="51276" fg:w="16"/><text x="46.8366%" y="527.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (16 samples, 0.01%)</title><rect x="46.5866%" y="501" width="0.0145%" height="15" fill="rgb(244,153,23)" fg:x="51276" fg:w="16"/><text x="46.8366%" y="511.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (16 samples, 0.01%)</title><rect x="46.5866%" y="485" width="0.0145%" height="15" fill="rgb(212,203,14)" fg:x="51276" fg:w="16"/><text x="46.8366%" y="495.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (16 samples, 0.01%)</title><rect x="46.5866%" y="469" width="0.0145%" height="15" fill="rgb(220,164,20)" fg:x="51276" fg:w="16"/><text x="46.8366%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (12 samples, 0.01%)</title><rect x="46.8228%" y="501" width="0.0109%" height="15" fill="rgb(222,203,48)" fg:x="51536" fg:w="12"/><text x="47.0728%" y="511.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (192 samples, 0.17%)</title><rect x="46.8337%" y="501" width="0.1744%" height="15" fill="rgb(215,159,22)" fg:x="51548" fg:w="192"/><text x="47.0837%" y="511.50"></text></g><g><title>core::ptr::read (155 samples, 0.14%)</title><rect x="46.8673%" y="485" width="0.1408%" height="15" fill="rgb(216,183,47)" fg:x="51585" fg:w="155"/><text x="47.1173%" y="495.50"></text></g><g><title>[libc-2.31.so] (122 samples, 0.11%)</title><rect x="46.8973%" y="469" width="0.1108%" height="15" fill="rgb(229,195,25)" fg:x="51618" fg:w="122"/><text x="47.1473%" y="479.50"></text></g><g><title>[libc-2.31.so] (373 samples, 0.34%)</title><rect x="47.0172%" y="501" width="0.3389%" height="15" fill="rgb(224,132,51)" fg:x="51750" fg:w="373"/><text x="47.2672%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (281 samples, 0.26%)</title><rect x="47.3561%" y="501" width="0.2553%" height="15" fill="rgb(240,63,7)" fg:x="52123" fg:w="281"/><text x="47.6061%" y="511.50"></text></g><g><title>core::ptr::write (270 samples, 0.25%)</title><rect x="47.3661%" y="485" width="0.2453%" height="15" fill="rgb(249,182,41)" fg:x="52134" fg:w="270"/><text x="47.6161%" y="495.50"></text></g><g><title>[libc-2.31.so] (269 samples, 0.24%)</title><rect x="47.3670%" y="469" width="0.2444%" height="15" fill="rgb(243,47,26)" fg:x="52135" fg:w="269"/><text x="47.6170%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (13 samples, 0.01%)</title><rect x="47.6114%" y="501" width="0.0118%" height="15" fill="rgb(233,48,2)" fg:x="52404" fg:w="13"/><text x="47.8614%" y="511.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue_events::{{closure}} (13 samples, 0.01%)</title><rect x="47.6114%" y="485" width="0.0118%" height="15" fill="rgb(244,165,34)" fg:x="52404" fg:w="13"/><text x="47.8614%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_last (12 samples, 0.01%)</title><rect x="47.6123%" y="469" width="0.0109%" height="15" fill="rgb(207,89,7)" fg:x="52405" fg:w="12"/><text x="47.8623%" y="479.50"></text></g><g><title>alloc::vec::into_iter::IntoIter&lt;T,A&gt;::as_raw_mut_slice (21 samples, 0.02%)</title><rect x="47.6369%" y="469" width="0.0191%" height="15" fill="rgb(244,117,36)" fg:x="52432" fg:w="21"/><text x="47.8869%" y="479.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (21 samples, 0.02%)</title><rect x="47.6369%" y="453" width="0.0191%" height="15" fill="rgb(226,144,34)" fg:x="52432" fg:w="21"/><text x="47.8869%" y="463.50"></text></g><g><title>core::iter::traits::exact_size::ExactSizeIterator::len (21 samples, 0.02%)</title><rect x="47.6369%" y="437" width="0.0191%" height="15" fill="rgb(213,23,19)" fg:x="52432" fg:w="21"/><text x="47.8869%" y="447.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (21 samples, 0.02%)</title><rect x="47.6369%" y="421" width="0.0191%" height="15" fill="rgb(217,75,12)" fg:x="52432" fg:w="21"/><text x="47.8869%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (21 samples, 0.02%)</title><rect x="47.6369%" y="405" width="0.0191%" height="15" fill="rgb(224,159,17)" fg:x="52432" fg:w="21"/><text x="47.8869%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 0.01%)</title><rect x="47.6560%" y="405" width="0.0145%" height="15" fill="rgb(217,118,1)" fg:x="52453" fg:w="16"/><text x="47.9060%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 0.01%)</title><rect x="47.6560%" y="389" width="0.0145%" height="15" fill="rgb(232,180,48)" fg:x="52453" fg:w="16"/><text x="47.9060%" y="399.50"></text></g><g><title>__rg_dealloc (16 samples, 0.01%)</title><rect x="47.6560%" y="373" width="0.0145%" height="15" fill="rgb(230,27,33)" fg:x="52453" fg:w="16"/><text x="47.9060%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (16 samples, 0.01%)</title><rect x="47.6560%" y="357" width="0.0145%" height="15" fill="rgb(205,31,21)" fg:x="52453" fg:w="16"/><text x="47.9060%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event),alloc::alloc::Global&gt;&gt; (23 samples, 0.02%)</title><rect x="47.6560%" y="469" width="0.0209%" height="15" fill="rgb(253,59,4)" fg:x="52453" fg:w="23"/><text x="47.9060%" y="479.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="47.6560%" y="453" width="0.0209%" height="15" fill="rgb(224,201,9)" fg:x="52453" fg:w="23"/><text x="47.9060%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (23 samples, 0.02%)</title><rect x="47.6560%" y="437" width="0.0209%" height="15" fill="rgb(229,206,30)" fg:x="52453" fg:w="23"/><text x="47.9060%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="47.6560%" y="421" width="0.0209%" height="15" fill="rgb(212,67,47)" fg:x="52453" fg:w="23"/><text x="47.9060%" y="431.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (66 samples, 0.06%)</title><rect x="47.6314%" y="485" width="0.0600%" height="15" fill="rgb(211,96,50)" fg:x="52426" fg:w="66"/><text x="47.8814%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)]&gt; (16 samples, 0.01%)</title><rect x="47.6768%" y="469" width="0.0145%" height="15" fill="rgb(252,114,18)" fg:x="52476" fg:w="16"/><text x="47.9268%" y="479.50"></text></g><g><title>sn_rust_dealloc (51 samples, 0.05%)</title><rect x="47.6914%" y="485" width="0.0463%" height="15" fill="rgb(223,58,37)" fg:x="52492" fg:w="51"/><text x="47.9414%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (129 samples, 0.12%)</title><rect x="47.6305%" y="501" width="0.1172%" height="15" fill="rgb(237,70,4)" fg:x="52425" fg:w="129"/><text x="47.8805%" y="511.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (63 samples, 0.06%)</title><rect x="47.7704%" y="469" width="0.0572%" height="15" fill="rgb(244,85,46)" fg:x="52579" fg:w="63"/><text x="48.0204%" y="479.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (25 samples, 0.02%)</title><rect x="47.8050%" y="453" width="0.0227%" height="15" fill="rgb(223,39,52)" fg:x="52617" fg:w="25"/><text x="48.0550%" y="463.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (25 samples, 0.02%)</title><rect x="47.8050%" y="437" width="0.0227%" height="15" fill="rgb(218,200,14)" fg:x="52617" fg:w="25"/><text x="48.0550%" y="447.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (107 samples, 0.10%)</title><rect x="47.8395%" y="437" width="0.0972%" height="15" fill="rgb(208,171,16)" fg:x="52655" fg:w="107"/><text x="48.0895%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (97 samples, 0.09%)</title><rect x="47.8486%" y="421" width="0.0881%" height="15" fill="rgb(234,200,18)" fg:x="52665" fg:w="97"/><text x="48.0986%" y="431.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (97 samples, 0.09%)</title><rect x="47.8486%" y="405" width="0.0881%" height="15" fill="rgb(228,45,11)" fg:x="52665" fg:w="97"/><text x="48.0986%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (97 samples, 0.09%)</title><rect x="47.8486%" y="389" width="0.0881%" height="15" fill="rgb(237,182,11)" fg:x="52665" fg:w="97"/><text x="48.0986%" y="399.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (97 samples, 0.09%)</title><rect x="47.8486%" y="373" width="0.0881%" height="15" fill="rgb(241,175,49)" fg:x="52665" fg:w="97"/><text x="48.0986%" y="383.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (97 samples, 0.09%)</title><rect x="47.8486%" y="357" width="0.0881%" height="15" fill="rgb(247,38,35)" fg:x="52665" fg:w="97"/><text x="48.0986%" y="367.50"></text></g><g><title>[libc-2.31.so] (85 samples, 0.08%)</title><rect x="47.8595%" y="341" width="0.0772%" height="15" fill="rgb(228,39,49)" fg:x="52677" fg:w="85"/><text x="48.1095%" y="351.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (207 samples, 0.19%)</title><rect x="47.7541%" y="501" width="0.1881%" height="15" fill="rgb(226,101,26)" fg:x="52561" fg:w="207"/><text x="48.0041%" y="511.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (201 samples, 0.18%)</title><rect x="47.7595%" y="485" width="0.1826%" height="15" fill="rgb(206,141,19)" fg:x="52567" fg:w="201"/><text x="48.0095%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (126 samples, 0.11%)</title><rect x="47.8277%" y="469" width="0.1145%" height="15" fill="rgb(211,200,13)" fg:x="52642" fg:w="126"/><text x="48.0777%" y="479.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (A,B)&gt;::eq (126 samples, 0.11%)</title><rect x="47.8277%" y="453" width="0.1145%" height="15" fill="rgb(241,121,6)" fg:x="52642" fg:w="126"/><text x="48.0777%" y="463.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (57 samples, 0.05%)</title><rect x="47.9585%" y="469" width="0.0518%" height="15" fill="rgb(234,221,29)" fg:x="52786" fg:w="57"/><text x="48.2085%" y="479.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (29 samples, 0.03%)</title><rect x="48.0303%" y="453" width="0.0263%" height="15" fill="rgb(229,136,5)" fg:x="52865" fg:w="29"/><text x="48.2803%" y="463.50"></text></g><g><title>&lt;halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt; as core::convert::From&lt;halfbrown::vecmap::raw_entry::RawEntryMut&lt;K,V,S&gt;&gt;&gt;::from (29 samples, 0.03%)</title><rect x="48.0303%" y="437" width="0.0263%" height="15" fill="rgb(238,36,11)" fg:x="52865" fg:w="29"/><text x="48.2803%" y="447.50"></text></g><g><title>halfbrown::raw_entry::RawEntryMut::Occupied (14 samples, 0.01%)</title><rect x="48.0439%" y="421" width="0.0127%" height="15" fill="rgb(251,55,41)" fg:x="52880" fg:w="14"/><text x="48.2939%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="48.0693%" y="389" width="0.0118%" height="15" fill="rgb(242,34,40)" fg:x="52908" fg:w="13"/><text x="48.3193%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="48.0693%" y="373" width="0.0118%" height="15" fill="rgb(215,42,17)" fg:x="52908" fg:w="13"/><text x="48.3193%" y="383.50"></text></g><g><title>beef::generic::Cow&lt;T,U&gt;::borrow (15 samples, 0.01%)</title><rect x="48.0812%" y="357" width="0.0136%" height="15" fill="rgb(207,44,46)" fg:x="52921" fg:w="15"/><text x="48.3312%" y="367.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (166 samples, 0.15%)</title><rect x="48.0103%" y="469" width="0.1508%" height="15" fill="rgb(211,206,28)" fg:x="52843" fg:w="166"/><text x="48.2603%" y="479.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (115 samples, 0.10%)</title><rect x="48.0566%" y="453" width="0.1045%" height="15" fill="rgb(237,167,16)" fg:x="52894" fg:w="115"/><text x="48.3066%" y="463.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (115 samples, 0.10%)</title><rect x="48.0566%" y="437" width="0.1045%" height="15" fill="rgb(233,66,6)" fg:x="52894" fg:w="115"/><text x="48.3066%" y="447.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_hash (115 samples, 0.10%)</title><rect x="48.0566%" y="421" width="0.1045%" height="15" fill="rgb(246,123,29)" fg:x="52894" fg:w="115"/><text x="48.3066%" y="431.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::search (115 samples, 0.10%)</title><rect x="48.0566%" y="405" width="0.1045%" height="15" fill="rgb(209,62,40)" fg:x="52894" fg:w="115"/><text x="48.3066%" y="415.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (88 samples, 0.08%)</title><rect x="48.0812%" y="389" width="0.0800%" height="15" fill="rgb(218,4,25)" fg:x="52921" fg:w="88"/><text x="48.3312%" y="399.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (88 samples, 0.08%)</title><rect x="48.0812%" y="373" width="0.0800%" height="15" fill="rgb(253,91,49)" fg:x="52921" fg:w="88"/><text x="48.3312%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (73 samples, 0.07%)</title><rect x="48.0948%" y="357" width="0.0663%" height="15" fill="rgb(228,155,29)" fg:x="52936" fg:w="73"/><text x="48.3448%" y="367.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (73 samples, 0.07%)</title><rect x="48.0948%" y="341" width="0.0663%" height="15" fill="rgb(243,57,37)" fg:x="52936" fg:w="73"/><text x="48.3448%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (73 samples, 0.07%)</title><rect x="48.0948%" y="325" width="0.0663%" height="15" fill="rgb(244,167,17)" fg:x="52936" fg:w="73"/><text x="48.3448%" y="335.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (73 samples, 0.07%)</title><rect x="48.0948%" y="309" width="0.0663%" height="15" fill="rgb(207,181,38)" fg:x="52936" fg:w="73"/><text x="48.3448%" y="319.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (73 samples, 0.07%)</title><rect x="48.0948%" y="293" width="0.0663%" height="15" fill="rgb(211,8,23)" fg:x="52936" fg:w="73"/><text x="48.3448%" y="303.50"></text></g><g><title>[libc-2.31.so] (39 samples, 0.04%)</title><rect x="48.1257%" y="277" width="0.0354%" height="15" fill="rgb(235,11,44)" fg:x="52970" fg:w="39"/><text x="48.3757%" y="287.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue_events (1,744 samples, 1.58%)</title><rect x="46.6011%" y="517" width="1.5845%" height="15" fill="rgb(248,18,52)" fg:x="51292" fg:w="1744"/><text x="46.8511%" y="527.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_input (268 samples, 0.24%)</title><rect x="47.9421%" y="501" width="0.2435%" height="15" fill="rgb(208,4,7)" fg:x="52768" fg:w="268"/><text x="48.1921%" y="511.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_input_n (261 samples, 0.24%)</title><rect x="47.9485%" y="485" width="0.2371%" height="15" fill="rgb(240,17,39)" fg:x="52775" fg:w="261"/><text x="48.1985%" y="495.50"></text></g><g><title>halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt;::or_insert_with (27 samples, 0.02%)</title><rect x="48.1611%" y="469" width="0.0245%" height="15" fill="rgb(207,170,3)" fg:x="53009" fg:w="27"/><text x="48.4111%" y="479.50"></text></g><g><title>halfbrown::raw_entry::RawOccupiedEntryMut&lt;K,V,S&gt;::into_key_value (16 samples, 0.01%)</title><rect x="48.1711%" y="453" width="0.0145%" height="15" fill="rgb(236,100,52)" fg:x="53020" fg:w="16"/><text x="48.4211%" y="463.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (17 samples, 0.02%)</title><rect x="48.1974%" y="485" width="0.0154%" height="15" fill="rgb(246,78,51)" fg:x="53049" fg:w="17"/><text x="48.4474%" y="495.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (15 samples, 0.01%)</title><rect x="48.2347%" y="469" width="0.0136%" height="15" fill="rgb(211,17,15)" fg:x="53090" fg:w="15"/><text x="48.4847%" y="479.50"></text></g><g><title>&lt;halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt; as core::convert::From&lt;halfbrown::vecmap::raw_entry::RawEntryMut&lt;K,V,S&gt;&gt;&gt;::from (15 samples, 0.01%)</title><rect x="48.2347%" y="453" width="0.0136%" height="15" fill="rgb(209,59,46)" fg:x="53090" fg:w="15"/><text x="48.4847%" y="463.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (128 samples, 0.12%)</title><rect x="48.2129%" y="485" width="0.1163%" height="15" fill="rgb(210,92,25)" fg:x="53066" fg:w="128"/><text x="48.4629%" y="495.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (89 samples, 0.08%)</title><rect x="48.2483%" y="469" width="0.0809%" height="15" fill="rgb(238,174,52)" fg:x="53105" fg:w="89"/><text x="48.4983%" y="479.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (89 samples, 0.08%)</title><rect x="48.2483%" y="453" width="0.0809%" height="15" fill="rgb(230,73,7)" fg:x="53105" fg:w="89"/><text x="48.4983%" y="463.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_hash (89 samples, 0.08%)</title><rect x="48.2483%" y="437" width="0.0809%" height="15" fill="rgb(243,124,40)" fg:x="53105" fg:w="89"/><text x="48.4983%" y="447.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::search (89 samples, 0.08%)</title><rect x="48.2483%" y="421" width="0.0809%" height="15" fill="rgb(244,170,11)" fg:x="53105" fg:w="89"/><text x="48.4983%" y="431.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (81 samples, 0.07%)</title><rect x="48.2556%" y="405" width="0.0736%" height="15" fill="rgb(207,114,54)" fg:x="53113" fg:w="81"/><text x="48.5056%" y="415.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (81 samples, 0.07%)</title><rect x="48.2556%" y="389" width="0.0736%" height="15" fill="rgb(205,42,20)" fg:x="53113" fg:w="81"/><text x="48.5056%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (79 samples, 0.07%)</title><rect x="48.2574%" y="373" width="0.0718%" height="15" fill="rgb(230,30,28)" fg:x="53115" fg:w="79"/><text x="48.5074%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (79 samples, 0.07%)</title><rect x="48.2574%" y="357" width="0.0718%" height="15" fill="rgb(205,73,54)" fg:x="53115" fg:w="79"/><text x="48.5074%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (79 samples, 0.07%)</title><rect x="48.2574%" y="341" width="0.0718%" height="15" fill="rgb(254,227,23)" fg:x="53115" fg:w="79"/><text x="48.5074%" y="351.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (79 samples, 0.07%)</title><rect x="48.2574%" y="325" width="0.0718%" height="15" fill="rgb(228,202,34)" fg:x="53115" fg:w="79"/><text x="48.5074%" y="335.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (79 samples, 0.07%)</title><rect x="48.2574%" y="309" width="0.0718%" height="15" fill="rgb(222,225,37)" fg:x="53115" fg:w="79"/><text x="48.5074%" y="319.50"></text></g><g><title>[libc-2.31.so] (37 samples, 0.03%)</title><rect x="48.2956%" y="293" width="0.0336%" height="15" fill="rgb(221,14,54)" fg:x="53157" fg:w="37"/><text x="48.5456%" y="303.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (5,032 samples, 4.57%)</title><rect x="43.7846%" y="565" width="4.5718%" height="15" fill="rgb(254,102,2)" fg:x="48192" fg:w="5032"/><text x="44.0346%" y="575.50">tremo..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (4,138 samples, 3.76%)</title><rect x="44.5969%" y="549" width="3.7596%" height="15" fill="rgb(232,104,17)" fg:x="49086" fg:w="4138"/><text x="44.8469%" y="559.50">trem..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (4,128 samples, 3.75%)</title><rect x="44.6060%" y="533" width="3.7505%" height="15" fill="rgb(250,220,14)" fg:x="49096" fg:w="4128"/><text x="44.8560%" y="543.50">trem..</text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_output (188 samples, 0.17%)</title><rect x="48.1856%" y="517" width="0.1708%" height="15" fill="rgb(241,158,9)" fg:x="53036" fg:w="188"/><text x="48.4356%" y="527.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_output_n (187 samples, 0.17%)</title><rect x="48.1865%" y="501" width="0.1699%" height="15" fill="rgb(246,9,43)" fg:x="53037" fg:w="187"/><text x="48.4365%" y="511.50"></text></g><g><title>halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt;::or_insert_with (30 samples, 0.03%)</title><rect x="48.3292%" y="485" width="0.0273%" height="15" fill="rgb(206,73,33)" fg:x="53194" fg:w="30"/><text x="48.5792%" y="495.50"></text></g><g><title>halfbrown::raw_entry::RawOccupiedEntryMut&lt;K,V,S&gt;::into_key_value (15 samples, 0.01%)</title><rect x="48.3428%" y="469" width="0.0136%" height="15" fill="rgb(222,79,8)" fg:x="53209" fg:w="15"/><text x="48.5928%" y="479.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,280 samples, 4.80%)</title><rect x="43.5739%" y="581" width="4.7971%" height="15" fill="rgb(234,8,54)" fg:x="47960" fg:w="5280"/><text x="43.8239%" y="591.50">&lt;core:..</text></g><g><title>tremor_runtime::pipeline::handle_insights::{{closure}} (16 samples, 0.01%)</title><rect x="48.3564%" y="565" width="0.0145%" height="15" fill="rgb(209,134,38)" fg:x="53224" fg:w="16"/><text x="48.6064%" y="575.50"></text></g><g><title>[libc-2.31.so] (709 samples, 0.64%)</title><rect x="48.3710%" y="581" width="0.6442%" height="15" fill="rgb(230,127,29)" fg:x="53240" fg:w="709"/><text x="48.6210%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (88 samples, 0.08%)</title><rect x="49.0151%" y="581" width="0.0800%" height="15" fill="rgb(242,44,41)" fg:x="53949" fg:w="88"/><text x="49.2651%" y="591.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (88 samples, 0.08%)</title><rect x="49.0151%" y="565" width="0.0800%" height="15" fill="rgb(222,56,43)" fg:x="53949" fg:w="88"/><text x="49.2651%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (82 samples, 0.07%)</title><rect x="49.0206%" y="549" width="0.0745%" height="15" fill="rgb(238,39,47)" fg:x="53955" fg:w="82"/><text x="49.2706%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (82 samples, 0.07%)</title><rect x="49.0206%" y="533" width="0.0745%" height="15" fill="rgb(226,79,43)" fg:x="53955" fg:w="82"/><text x="49.2706%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (82 samples, 0.07%)</title><rect x="49.0206%" y="517" width="0.0745%" height="15" fill="rgb(242,105,53)" fg:x="53955" fg:w="82"/><text x="49.2706%" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (82 samples, 0.07%)</title><rect x="49.0206%" y="501" width="0.0745%" height="15" fill="rgb(251,132,46)" fg:x="53955" fg:w="82"/><text x="49.2706%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (82 samples, 0.07%)</title><rect x="49.0206%" y="485" width="0.0745%" height="15" fill="rgb(231,77,14)" fg:x="53955" fg:w="82"/><text x="49.2706%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (82 samples, 0.07%)</title><rect x="49.0206%" y="469" width="0.0745%" height="15" fill="rgb(240,135,9)" fg:x="53955" fg:w="82"/><text x="49.2706%" y="479.50"></text></g><g><title>__rg_dealloc (82 samples, 0.07%)</title><rect x="49.0206%" y="453" width="0.0745%" height="15" fill="rgb(248,109,14)" fg:x="53955" fg:w="82"/><text x="49.2706%" y="463.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (82 samples, 0.07%)</title><rect x="49.0206%" y="437" width="0.0745%" height="15" fill="rgb(227,146,52)" fg:x="53955" fg:w="82"/><text x="49.2706%" y="447.50"></text></g><g><title>sn_rust_dealloc (82 samples, 0.07%)</title><rect x="49.0206%" y="421" width="0.0745%" height="15" fill="rgb(232,54,3)" fg:x="53955" fg:w="82"/><text x="49.2706%" y="431.50"></text></g><g><title>async_io::driver::block_on (17,242 samples, 15.67%)</title><rect x="33.4336%" y="901" width="15.6651%" height="15" fill="rgb(229,201,43)" fg:x="36799" fg:w="17242"/><text x="33.6836%" y="911.50">async_io::driver::block_..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (17,242 samples, 15.67%)</title><rect x="33.4336%" y="885" width="15.6651%" height="15" fill="rgb(252,161,33)" fg:x="36799" fg:w="17242"/><text x="33.6836%" y="895.50">&lt;futures_lite::future::O..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17,242 samples, 15.67%)</title><rect x="33.4336%" y="869" width="15.6651%" height="15" fill="rgb(226,146,40)" fg:x="36799" fg:w="17242"/><text x="33.6836%" y="879.50">&lt;core::future::from_gene..</text></g><g><title>async_executor::Executor::run::{{closure}} (17,242 samples, 15.67%)</title><rect x="33.4336%" y="853" width="15.6651%" height="15" fill="rgb(219,47,25)" fg:x="36799" fg:w="17242"/><text x="33.6836%" y="863.50">async_executor::Executor..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (17,242 samples, 15.67%)</title><rect x="33.4336%" y="837" width="15.6651%" height="15" fill="rgb(250,135,13)" fg:x="36799" fg:w="17242"/><text x="33.6836%" y="847.50">&lt;futures_lite::future::O..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17,242 samples, 15.67%)</title><rect x="33.4336%" y="821" width="15.6651%" height="15" fill="rgb(219,229,18)" fg:x="36799" fg:w="17242"/><text x="33.6836%" y="831.50">&lt;core::future::from_gene..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (17,242 samples, 15.67%)</title><rect x="33.4336%" y="805" width="15.6651%" height="15" fill="rgb(217,152,27)" fg:x="36799" fg:w="17242"/><text x="33.6836%" y="815.50">async_executor::Executor..</text></g><g><title>async_task::runnable::Runnable::run (17,242 samples, 15.67%)</title><rect x="33.4336%" y="789" width="15.6651%" height="15" fill="rgb(225,71,47)" fg:x="36799" fg:w="17242"/><text x="33.6836%" y="799.50">async_task::runnable::Ru..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (17,242 samples, 15.67%)</title><rect x="33.4336%" y="773" width="15.6651%" height="15" fill="rgb(220,139,14)" fg:x="36799" fg:w="17242"/><text x="33.6836%" y="783.50">async_task::raw::RawTask..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (17,242 samples, 15.67%)</title><rect x="33.4336%" y="757" width="15.6651%" height="15" fill="rgb(247,54,32)" fg:x="36799" fg:w="17242"/><text x="33.6836%" y="767.50">&lt;core::pin::Pin&lt;P&gt; as co..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17,242 samples, 15.67%)</title><rect x="33.4336%" y="741" width="15.6651%" height="15" fill="rgb(252,131,39)" fg:x="36799" fg:w="17242"/><text x="33.6836%" y="751.50">&lt;core::future::from_gene..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (17,242 samples, 15.67%)</title><rect x="33.4336%" y="725" width="15.6651%" height="15" fill="rgb(210,108,39)" fg:x="36799" fg:w="17242"/><text x="33.6836%" y="735.50">async_executor::Executor..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (17,242 samples, 15.67%)</title><rect x="33.4336%" y="709" width="15.6651%" height="15" fill="rgb(205,23,29)" fg:x="36799" fg:w="17242"/><text x="33.6836%" y="719.50">&lt;async_std::task::builde..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (17,242 samples, 15.67%)</title><rect x="33.4336%" y="693" width="15.6651%" height="15" fill="rgb(246,139,46)" fg:x="36799" fg:w="17242"/><text x="33.6836%" y="703.50">async_std::task::task_lo..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (17,242 samples, 15.67%)</title><rect x="33.4336%" y="677" width="15.6651%" height="15" fill="rgb(250,81,26)" fg:x="36799" fg:w="17242"/><text x="33.6836%" y="687.50">std::thread::local::Loca..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (17,242 samples, 15.67%)</title><rect x="33.4336%" y="661" width="15.6651%" height="15" fill="rgb(214,104,7)" fg:x="36799" fg:w="17242"/><text x="33.6836%" y="671.50">std::thread::local::Loca..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (17,242 samples, 15.67%)</title><rect x="33.4336%" y="645" width="15.6651%" height="15" fill="rgb(233,189,8)" fg:x="36799" fg:w="17242"/><text x="33.6836%" y="655.50">async_std::task::task_lo..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (17,242 samples, 15.67%)</title><rect x="33.4336%" y="629" width="15.6651%" height="15" fill="rgb(228,141,17)" fg:x="36799" fg:w="17242"/><text x="33.6836%" y="639.50">&lt;async_std::task::builde..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17,242 samples, 15.67%)</title><rect x="33.4336%" y="613" width="15.6651%" height="15" fill="rgb(247,157,1)" fg:x="36799" fg:w="17242"/><text x="33.6836%" y="623.50">&lt;core::future::from_gene..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (6,304 samples, 5.73%)</title><rect x="43.3712%" y="597" width="5.7275%" height="15" fill="rgb(249,225,5)" fg:x="47737" fg:w="6304"/><text x="43.6212%" y="607.50">tremor_..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="49.3268%" y="421" width="0.0118%" height="15" fill="rgb(242,55,13)" fg:x="54292" fg:w="13"/><text x="49.5768%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="49.3268%" y="405" width="0.0118%" height="15" fill="rgb(230,49,50)" fg:x="54292" fg:w="13"/><text x="49.5768%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value)&gt;&gt; (13 samples, 0.01%)</title><rect x="49.3268%" y="389" width="0.0118%" height="15" fill="rgb(241,111,38)" fg:x="54292" fg:w="13"/><text x="49.5768%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="49.3268%" y="373" width="0.0118%" height="15" fill="rgb(252,155,4)" fg:x="54292" fg:w="13"/><text x="49.5768%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::is_empty_singleton (12 samples, 0.01%)</title><rect x="49.3277%" y="357" width="0.0109%" height="15" fill="rgb(212,69,32)" fg:x="54293" fg:w="12"/><text x="49.5777%" y="367.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (28 samples, 0.03%)</title><rect x="49.3177%" y="437" width="0.0254%" height="15" fill="rgb(243,107,47)" fg:x="54282" fg:w="28"/><text x="49.5677%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (15 samples, 0.01%)</title><rect x="49.3522%" y="437" width="0.0136%" height="15" fill="rgb(247,130,12)" fg:x="54320" fg:w="15"/><text x="49.6022%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (15 samples, 0.01%)</title><rect x="49.3522%" y="421" width="0.0136%" height="15" fill="rgb(233,74,16)" fg:x="54320" fg:w="15"/><text x="49.6022%" y="431.50"></text></g><g><title>sn_rust_dealloc (136 samples, 0.12%)</title><rect x="49.4058%" y="277" width="0.1236%" height="15" fill="rgb(208,58,18)" fg:x="54379" fg:w="136"/><text x="49.6558%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (181 samples, 0.16%)</title><rect x="49.3922%" y="341" width="0.1644%" height="15" fill="rgb(242,225,1)" fg:x="54364" fg:w="181"/><text x="49.6422%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::vec::private::RVec&lt;u8&gt;]&gt; (181 samples, 0.16%)</title><rect x="49.3922%" y="325" width="0.1644%" height="15" fill="rgb(249,39,40)" fg:x="54364" fg:w="181"/><text x="49.6422%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (178 samples, 0.16%)</title><rect x="49.3949%" y="309" width="0.1617%" height="15" fill="rgb(207,72,44)" fg:x="54367" fg:w="178"/><text x="49.6449%" y="319.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (178 samples, 0.16%)</title><rect x="49.3949%" y="293" width="0.1617%" height="15" fill="rgb(215,193,12)" fg:x="54367" fg:w="178"/><text x="49.6449%" y="303.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (30 samples, 0.03%)</title><rect x="49.5294%" y="277" width="0.0273%" height="15" fill="rgb(248,41,39)" fg:x="54515" fg:w="30"/><text x="49.7794%" y="287.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (198 samples, 0.18%)</title><rect x="49.3849%" y="405" width="0.1799%" height="15" fill="rgb(253,85,4)" fg:x="54356" fg:w="198"/><text x="49.6349%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (195 samples, 0.18%)</title><rect x="49.3876%" y="389" width="0.1772%" height="15" fill="rgb(243,70,31)" fg:x="54359" fg:w="195"/><text x="49.6376%" y="399.50"></text></g><g><title>core::mem::drop (190 samples, 0.17%)</title><rect x="49.3922%" y="373" width="0.1726%" height="15" fill="rgb(253,195,26)" fg:x="54364" fg:w="190"/><text x="49.6422%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (190 samples, 0.17%)</title><rect x="49.3922%" y="357" width="0.1726%" height="15" fill="rgb(243,42,11)" fg:x="54364" fg:w="190"/><text x="49.6422%" y="367.50"></text></g><g><title>sn_rust_dealloc (25 samples, 0.02%)</title><rect x="49.5648%" y="405" width="0.0227%" height="15" fill="rgb(239,66,17)" fg:x="54554" fg:w="25"/><text x="49.8148%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (225 samples, 0.20%)</title><rect x="49.3840%" y="437" width="0.2044%" height="15" fill="rgb(217,132,21)" fg:x="54355" fg:w="225"/><text x="49.6340%" y="447.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (225 samples, 0.20%)</title><rect x="49.3840%" y="421" width="0.2044%" height="15" fill="rgb(252,202,21)" fg:x="54355" fg:w="225"/><text x="49.6340%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (82 samples, 0.07%)</title><rect x="49.5930%" y="389" width="0.0745%" height="15" fill="rgb(233,98,36)" fg:x="54585" fg:w="82"/><text x="49.8430%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (81 samples, 0.07%)</title><rect x="49.5939%" y="373" width="0.0736%" height="15" fill="rgb(216,153,54)" fg:x="54586" fg:w="81"/><text x="49.8439%" y="383.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (81 samples, 0.07%)</title><rect x="49.5939%" y="357" width="0.0736%" height="15" fill="rgb(250,99,7)" fg:x="54586" fg:w="81"/><text x="49.8439%" y="367.50"></text></g><g><title>sn_rust_dealloc (76 samples, 0.07%)</title><rect x="49.5984%" y="341" width="0.0690%" height="15" fill="rgb(207,56,50)" fg:x="54591" fg:w="76"/><text x="49.8484%" y="351.50"></text></g><g><title>sn_rust_dealloc (114 samples, 0.10%)</title><rect x="49.9618%" y="213" width="0.1036%" height="15" fill="rgb(244,61,34)" fg:x="54991" fg:w="114"/><text x="50.2118%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (429 samples, 0.39%)</title><rect x="49.6766%" y="293" width="0.3898%" height="15" fill="rgb(241,50,38)" fg:x="54677" fg:w="429"/><text x="49.9266%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (429 samples, 0.39%)</title><rect x="49.6766%" y="277" width="0.3898%" height="15" fill="rgb(212,166,30)" fg:x="54677" fg:w="429"/><text x="49.9266%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (422 samples, 0.38%)</title><rect x="49.6829%" y="261" width="0.3834%" height="15" fill="rgb(249,127,32)" fg:x="54684" fg:w="422"/><text x="49.9329%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (422 samples, 0.38%)</title><rect x="49.6829%" y="245" width="0.3834%" height="15" fill="rgb(209,103,0)" fg:x="54684" fg:w="422"/><text x="49.9329%" y="255.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (422 samples, 0.38%)</title><rect x="49.6829%" y="229" width="0.3834%" height="15" fill="rgb(238,209,51)" fg:x="54684" fg:w="422"/><text x="49.9329%" y="239.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (449 samples, 0.41%)</title><rect x="49.6693%" y="357" width="0.4079%" height="15" fill="rgb(237,56,23)" fg:x="54669" fg:w="449"/><text x="49.9193%" y="367.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (445 samples, 0.40%)</title><rect x="49.6729%" y="341" width="0.4043%" height="15" fill="rgb(215,153,46)" fg:x="54673" fg:w="445"/><text x="49.9229%" y="351.50"></text></g><g><title>core::mem::drop (441 samples, 0.40%)</title><rect x="49.6766%" y="325" width="0.4007%" height="15" fill="rgb(224,49,31)" fg:x="54677" fg:w="441"/><text x="49.9266%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (441 samples, 0.40%)</title><rect x="49.6766%" y="309" width="0.4007%" height="15" fill="rgb(250,18,42)" fg:x="54677" fg:w="441"/><text x="49.9266%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::string::RString&gt;&gt; (12 samples, 0.01%)</title><rect x="50.0663%" y="293" width="0.0109%" height="15" fill="rgb(215,176,39)" fg:x="55106" fg:w="12"/><text x="50.3163%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.01%)</title><rect x="50.0663%" y="277" width="0.0109%" height="15" fill="rgb(223,77,29)" fg:x="55106" fg:w="12"/><text x="50.3163%" y="287.50"></text></g><g><title>sn_rust_dealloc (40 samples, 0.04%)</title><rect x="50.0772%" y="357" width="0.0363%" height="15" fill="rgb(234,94,52)" fg:x="55118" fg:w="40"/><text x="50.3272%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (585 samples, 0.53%)</title><rect x="49.5884%" y="421" width="0.5315%" height="15" fill="rgb(220,154,50)" fg:x="54580" fg:w="585"/><text x="49.8384%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (583 samples, 0.53%)</title><rect x="49.5902%" y="405" width="0.5297%" height="15" fill="rgb(212,11,10)" fg:x="54582" fg:w="583"/><text x="49.8402%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (498 samples, 0.45%)</title><rect x="49.6675%" y="389" width="0.4525%" height="15" fill="rgb(205,166,19)" fg:x="54667" fg:w="498"/><text x="49.9175%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (498 samples, 0.45%)</title><rect x="49.6675%" y="373" width="0.4525%" height="15" fill="rgb(244,198,16)" fg:x="54667" fg:w="498"/><text x="49.9175%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (12 samples, 0.01%)</title><rect x="50.1199%" y="421" width="0.0109%" height="15" fill="rgb(219,69,12)" fg:x="55165" fg:w="12"/><text x="50.3699%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (12 samples, 0.01%)</title><rect x="50.1199%" y="405" width="0.0109%" height="15" fill="rgb(245,30,7)" fg:x="55165" fg:w="12"/><text x="50.3699%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (12 samples, 0.01%)</title><rect x="50.1199%" y="389" width="0.0109%" height="15" fill="rgb(218,221,48)" fg:x="55165" fg:w="12"/><text x="50.3699%" y="399.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::next_n (26 samples, 0.02%)</title><rect x="50.1590%" y="277" width="0.0236%" height="15" fill="rgb(216,66,15)" fg:x="55208" fg:w="26"/><text x="50.4090%" y="287.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (15 samples, 0.01%)</title><rect x="50.1690%" y="261" width="0.0136%" height="15" fill="rgb(226,122,50)" fg:x="55219" fg:w="15"/><text x="50.4190%" y="271.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (14 samples, 0.01%)</title><rect x="50.1826%" y="277" width="0.0127%" height="15" fill="rgb(239,156,16)" fg:x="55234" fg:w="14"/><text x="50.4326%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (62 samples, 0.06%)</title><rect x="50.1526%" y="309" width="0.0563%" height="15" fill="rgb(224,27,38)" fg:x="55201" fg:w="62"/><text x="50.4026%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (62 samples, 0.06%)</title><rect x="50.1526%" y="293" width="0.0563%" height="15" fill="rgb(224,39,27)" fg:x="55201" fg:w="62"/><text x="50.4026%" y="303.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (15 samples, 0.01%)</title><rect x="50.1953%" y="277" width="0.0136%" height="15" fill="rgb(215,92,29)" fg:x="55248" fg:w="15"/><text x="50.4453%" y="287.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (13 samples, 0.01%)</title><rect x="50.2171%" y="277" width="0.0118%" height="15" fill="rgb(207,159,16)" fg:x="55272" fg:w="13"/><text x="50.4671%" y="287.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (13 samples, 0.01%)</title><rect x="50.2171%" y="261" width="0.0118%" height="15" fill="rgb(238,163,47)" fg:x="55272" fg:w="13"/><text x="50.4671%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;&gt; (509 samples, 0.46%)</title><rect x="50.2290%" y="261" width="0.4624%" height="15" fill="rgb(219,91,49)" fg:x="55285" fg:w="509"/><text x="50.4790%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt; (30 samples, 0.03%)</title><rect x="50.6641%" y="245" width="0.0273%" height="15" fill="rgb(227,167,31)" fg:x="55764" fg:w="30"/><text x="50.9141%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (601 samples, 0.55%)</title><rect x="50.2290%" y="277" width="0.5460%" height="15" fill="rgb(234,80,54)" fg:x="55285" fg:w="601"/><text x="50.4790%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (92 samples, 0.08%)</title><rect x="50.6914%" y="261" width="0.0836%" height="15" fill="rgb(212,114,2)" fg:x="55794" fg:w="92"/><text x="50.9414%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (690 samples, 0.63%)</title><rect x="50.2090%" y="293" width="0.6269%" height="15" fill="rgb(234,50,24)" fg:x="55263" fg:w="690"/><text x="50.4590%" y="303.50"></text></g><g><title>sn_rust_dealloc (67 samples, 0.06%)</title><rect x="50.7750%" y="277" width="0.0609%" height="15" fill="rgb(221,68,8)" fg:x="55886" fg:w="67"/><text x="51.0250%" y="287.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::drop (697 samples, 0.63%)</title><rect x="50.2090%" y="309" width="0.6333%" height="15" fill="rgb(254,180,31)" fg:x="55263" fg:w="697"/><text x="50.4590%" y="319.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (472 samples, 0.43%)</title><rect x="50.8522%" y="277" width="0.4288%" height="15" fill="rgb(247,130,50)" fg:x="55971" fg:w="472"/><text x="51.1022%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (472 samples, 0.43%)</title><rect x="50.8522%" y="261" width="0.4288%" height="15" fill="rgb(211,109,4)" fg:x="55971" fg:w="472"/><text x="51.1022%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (1,272 samples, 1.16%)</title><rect x="50.1481%" y="325" width="1.1557%" height="15" fill="rgb(238,50,21)" fg:x="55196" fg:w="1272"/><text x="50.3981%" y="335.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (499 samples, 0.45%)</title><rect x="50.8504%" y="309" width="0.4534%" height="15" fill="rgb(225,57,45)" fg:x="55969" fg:w="499"/><text x="51.1004%" y="319.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (499 samples, 0.45%)</title><rect x="50.8504%" y="293" width="0.4534%" height="15" fill="rgb(209,196,50)" fg:x="55969" fg:w="499"/><text x="51.1004%" y="303.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_full (25 samples, 0.02%)</title><rect x="51.2810%" y="277" width="0.0227%" height="15" fill="rgb(242,140,13)" fg:x="56443" fg:w="25"/><text x="51.5310%" y="287.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (16 samples, 0.01%)</title><rect x="51.2892%" y="261" width="0.0145%" height="15" fill="rgb(217,111,7)" fg:x="56452" fg:w="16"/><text x="51.5392%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (16 samples, 0.01%)</title><rect x="51.2892%" y="245" width="0.0145%" height="15" fill="rgb(253,193,51)" fg:x="56452" fg:w="16"/><text x="51.5392%" y="255.50"></text></g><g><title>sn_rust_dealloc (54 samples, 0.05%)</title><rect x="51.3056%" y="229" width="0.0491%" height="15" fill="rgb(252,70,29)" fg:x="56470" fg:w="54"/><text x="51.5556%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::deallocate (71 samples, 0.06%)</title><rect x="51.3056%" y="293" width="0.0645%" height="15" fill="rgb(232,127,12)" fg:x="56470" fg:w="71"/><text x="51.5556%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (71 samples, 0.06%)</title><rect x="51.3056%" y="277" width="0.0645%" height="15" fill="rgb(211,180,21)" fg:x="56470" fg:w="71"/><text x="51.5556%" y="287.50"></text></g><g><title>__rg_dealloc (71 samples, 0.06%)</title><rect x="51.3056%" y="261" width="0.0645%" height="15" fill="rgb(229,72,13)" fg:x="56470" fg:w="71"/><text x="51.5556%" y="271.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (71 samples, 0.06%)</title><rect x="51.3056%" y="245" width="0.0645%" height="15" fill="rgb(240,211,49)" fg:x="56470" fg:w="71"/><text x="51.5556%" y="255.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (17 samples, 0.02%)</title><rect x="51.3546%" y="229" width="0.0154%" height="15" fill="rgb(219,149,40)" fg:x="56524" fg:w="17"/><text x="51.6046%" y="239.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::free_buckets (85 samples, 0.08%)</title><rect x="51.3038%" y="325" width="0.0772%" height="15" fill="rgb(210,127,46)" fg:x="56468" fg:w="85"/><text x="51.5538%" y="335.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::free_buckets (85 samples, 0.08%)</title><rect x="51.3038%" y="309" width="0.0772%" height="15" fill="rgb(220,106,7)" fg:x="56468" fg:w="85"/><text x="51.5538%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (1,653 samples, 1.50%)</title><rect x="50.1481%" y="389" width="1.5018%" height="15" fill="rgb(249,31,22)" fg:x="55196" fg:w="1653"/><text x="50.3981%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (1,653 samples, 1.50%)</title><rect x="50.1481%" y="373" width="1.5018%" height="15" fill="rgb(253,1,49)" fg:x="55196" fg:w="1653"/><text x="50.3981%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (1,653 samples, 1.50%)</title><rect x="50.1481%" y="357" width="1.5018%" height="15" fill="rgb(227,144,33)" fg:x="55196" fg:w="1653"/><text x="50.3981%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,653 samples, 1.50%)</title><rect x="50.1481%" y="341" width="1.5018%" height="15" fill="rgb(249,163,44)" fg:x="55196" fg:w="1653"/><text x="50.3981%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::is_empty_singleton (296 samples, 0.27%)</title><rect x="51.3810%" y="325" width="0.2689%" height="15" fill="rgb(234,15,39)" fg:x="56553" fg:w="296"/><text x="51.6310%" y="335.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (1,673 samples, 1.52%)</title><rect x="50.1390%" y="405" width="1.5200%" height="15" fill="rgb(207,66,16)" fg:x="55186" fg:w="1673"/><text x="50.3890%" y="415.50"></text></g><g><title>abi_stable::std_types::arc::private::RArc&lt;T&gt;::data (205 samples, 0.19%)</title><rect x="51.6854%" y="245" width="0.1863%" height="15" fill="rgb(233,112,24)" fg:x="56888" fg:w="205"/><text x="51.9354%" y="255.50"></text></g><g><title>core::mem::drop (492 samples, 0.45%)</title><rect x="51.8807%" y="165" width="0.4470%" height="15" fill="rgb(230,90,22)" fg:x="57103" fg:w="492"/><text x="52.1307%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (492 samples, 0.45%)</title><rect x="51.8807%" y="149" width="0.4470%" height="15" fill="rgb(229,61,13)" fg:x="57103" fg:w="492"/><text x="52.1307%" y="159.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (492 samples, 0.45%)</title><rect x="51.8807%" y="133" width="0.4470%" height="15" fill="rgb(225,57,24)" fg:x="57103" fg:w="492"/><text x="52.1307%" y="143.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (480 samples, 0.44%)</title><rect x="51.8916%" y="117" width="0.4361%" height="15" fill="rgb(208,169,48)" fg:x="57115" fg:w="480"/><text x="52.1416%" y="127.50"></text></g><g><title>core::sync::atomic::atomic_sub (480 samples, 0.44%)</title><rect x="51.8916%" y="101" width="0.4361%" height="15" fill="rgb(244,218,51)" fg:x="57115" fg:w="480"/><text x="52.1416%" y="111.50"></text></g><g><title>sn_rust_dealloc (90 samples, 0.08%)</title><rect x="52.3413%" y="117" width="0.0818%" height="15" fill="rgb(214,148,10)" fg:x="57610" fg:w="90"/><text x="52.5913%" y="127.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (624 samples, 0.57%)</title><rect x="51.8771%" y="181" width="0.5669%" height="15" fill="rgb(225,174,27)" fg:x="57099" fg:w="624"/><text x="52.1271%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (128 samples, 0.12%)</title><rect x="52.3277%" y="165" width="0.1163%" height="15" fill="rgb(230,96,26)" fg:x="57595" fg:w="128"/><text x="52.5777%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (128 samples, 0.12%)</title><rect x="52.3277%" y="149" width="0.1163%" height="15" fill="rgb(232,10,30)" fg:x="57595" fg:w="128"/><text x="52.5777%" y="159.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (128 samples, 0.12%)</title><rect x="52.3277%" y="133" width="0.1163%" height="15" fill="rgb(222,8,50)" fg:x="57595" fg:w="128"/><text x="52.5777%" y="143.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (23 samples, 0.02%)</title><rect x="52.4231%" y="117" width="0.0209%" height="15" fill="rgb(213,81,27)" fg:x="57700" fg:w="23"/><text x="52.6731%" y="127.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (518 samples, 0.47%)</title><rect x="52.4440%" y="181" width="0.4706%" height="15" fill="rgb(245,50,10)" fg:x="57723" fg:w="518"/><text x="52.6940%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_sub (518 samples, 0.47%)</title><rect x="52.4440%" y="165" width="0.4706%" height="15" fill="rgb(216,100,18)" fg:x="57723" fg:w="518"/><text x="52.6940%" y="175.50"></text></g><g><title>sn_rust_dealloc (37 samples, 0.03%)</title><rect x="52.9146%" y="181" width="0.0336%" height="15" fill="rgb(236,147,54)" fg:x="58241" fg:w="37"/><text x="53.1646%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,413 samples, 1.28%)</title><rect x="51.6654%" y="309" width="1.2838%" height="15" fill="rgb(205,143,26)" fg:x="56866" fg:w="1413"/><text x="51.9154%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (1,413 samples, 1.28%)</title><rect x="51.6654%" y="293" width="1.2838%" height="15" fill="rgb(236,26,9)" fg:x="56866" fg:w="1413"/><text x="51.9154%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (1,402 samples, 1.27%)</title><rect x="51.6754%" y="277" width="1.2738%" height="15" fill="rgb(221,165,53)" fg:x="56877" fg:w="1402"/><text x="51.9254%" y="287.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (1,402 samples, 1.27%)</title><rect x="51.6754%" y="261" width="1.2738%" height="15" fill="rgb(214,110,17)" fg:x="56877" fg:w="1402"/><text x="51.9254%" y="271.50"></text></g><g><title>abi_stable::std_types::arc::vtable_mod::destructor_arc (1,186 samples, 1.08%)</title><rect x="51.8716%" y="245" width="1.0775%" height="15" fill="rgb(237,197,12)" fg:x="57093" fg:w="1186"/><text x="52.1216%" y="255.50"></text></g><g><title>core::mem::drop (1,180 samples, 1.07%)</title><rect x="51.8771%" y="229" width="1.0721%" height="15" fill="rgb(205,84,17)" fg:x="57099" fg:w="1180"/><text x="52.1271%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (1,180 samples, 1.07%)</title><rect x="51.8771%" y="213" width="1.0721%" height="15" fill="rgb(237,18,45)" fg:x="57099" fg:w="1180"/><text x="52.1271%" y="223.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1,180 samples, 1.07%)</title><rect x="51.8771%" y="197" width="1.0721%" height="15" fill="rgb(221,87,14)" fg:x="57099" fg:w="1180"/><text x="52.1271%" y="207.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (1,432 samples, 1.30%)</title><rect x="51.6590%" y="373" width="1.3010%" height="15" fill="rgb(238,186,15)" fg:x="56859" fg:w="1432"/><text x="51.9090%" y="383.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (1,426 samples, 1.30%)</title><rect x="51.6645%" y="357" width="1.2956%" height="15" fill="rgb(208,115,11)" fg:x="56865" fg:w="1426"/><text x="51.9145%" y="367.50"></text></g><g><title>core::mem::drop (1,425 samples, 1.29%)</title><rect x="51.6654%" y="341" width="1.2947%" height="15" fill="rgb(254,175,0)" fg:x="56866" fg:w="1425"/><text x="51.9154%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (1,425 samples, 1.29%)</title><rect x="51.6654%" y="325" width="1.2947%" height="15" fill="rgb(227,24,42)" fg:x="56866" fg:w="1425"/><text x="51.9154%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (12 samples, 0.01%)</title><rect x="52.9491%" y="309" width="0.0109%" height="15" fill="rgb(223,211,37)" fg:x="58279" fg:w="12"/><text x="53.1991%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.01%)</title><rect x="52.9491%" y="293" width="0.0109%" height="15" fill="rgb(235,49,27)" fg:x="58279" fg:w="12"/><text x="53.1991%" y="303.50"></text></g><g><title>sn_rust_dealloc (37 samples, 0.03%)</title><rect x="52.9600%" y="373" width="0.0336%" height="15" fill="rgb(254,97,51)" fg:x="58291" fg:w="37"/><text x="53.2100%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (1,471 samples, 1.34%)</title><rect x="51.6590%" y="405" width="1.3365%" height="15" fill="rgb(249,51,40)" fg:x="56859" fg:w="1471"/><text x="51.9090%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (1,471 samples, 1.34%)</title><rect x="51.6590%" y="389" width="1.3365%" height="15" fill="rgb(210,128,45)" fg:x="56859" fg:w="1471"/><text x="51.9090%" y="399.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::next_n (58 samples, 0.05%)</title><rect x="53.0418%" y="197" width="0.0527%" height="15" fill="rgb(224,137,50)" fg:x="58381" fg:w="58"/><text x="53.2918%" y="207.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (53 samples, 0.05%)</title><rect x="53.0464%" y="181" width="0.0482%" height="15" fill="rgb(242,15,9)" fg:x="58386" fg:w="53"/><text x="53.2964%" y="191.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (15 samples, 0.01%)</title><rect x="53.0945%" y="197" width="0.0136%" height="15" fill="rgb(233,187,41)" fg:x="58439" fg:w="15"/><text x="53.3445%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (141 samples, 0.13%)</title><rect x="53.0327%" y="229" width="0.1281%" height="15" fill="rgb(227,2,29)" fg:x="58371" fg:w="141"/><text x="53.2827%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (141 samples, 0.13%)</title><rect x="53.0327%" y="213" width="0.1281%" height="15" fill="rgb(222,70,3)" fg:x="58371" fg:w="141"/><text x="53.2827%" y="223.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (58 samples, 0.05%)</title><rect x="53.1081%" y="197" width="0.0527%" height="15" fill="rgb(213,11,42)" fg:x="58454" fg:w="58"/><text x="53.3581%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (401 samples, 0.36%)</title><rect x="53.2281%" y="133" width="0.3643%" height="15" fill="rgb(225,150,9)" fg:x="58586" fg:w="401"/><text x="53.4781%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tremor_value::value::Value]&gt; (392 samples, 0.36%)</title><rect x="53.2362%" y="117" width="0.3561%" height="15" fill="rgb(230,162,45)" fg:x="58595" fg:w="392"/><text x="53.4862%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (362 samples, 0.33%)</title><rect x="53.2635%" y="101" width="0.3289%" height="15" fill="rgb(222,14,52)" fg:x="58625" fg:w="362"/><text x="53.5135%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt; (30 samples, 0.03%)</title><rect x="53.5651%" y="85" width="0.0273%" height="15" fill="rgb(254,198,14)" fg:x="58957" fg:w="30"/><text x="53.8151%" y="95.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (434 samples, 0.39%)</title><rect x="53.2181%" y="197" width="0.3943%" height="15" fill="rgb(220,217,30)" fg:x="58575" fg:w="434"/><text x="53.4681%" y="207.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (431 samples, 0.39%)</title><rect x="53.2208%" y="181" width="0.3916%" height="15" fill="rgb(215,146,41)" fg:x="58578" fg:w="431"/><text x="53.4708%" y="191.50"></text></g><g><title>core::mem::drop (423 samples, 0.38%)</title><rect x="53.2281%" y="165" width="0.3843%" height="15" fill="rgb(217,27,36)" fg:x="58586" fg:w="423"/><text x="53.4781%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;tremor_value::value::Value&gt;&gt; (423 samples, 0.38%)</title><rect x="53.2281%" y="149" width="0.3843%" height="15" fill="rgb(219,218,39)" fg:x="58586" fg:w="423"/><text x="53.4781%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;tremor_value::value::Value&gt;&gt; (22 samples, 0.02%)</title><rect x="53.5924%" y="133" width="0.0200%" height="15" fill="rgb(219,4,42)" fg:x="58987" fg:w="22"/><text x="53.8424%" y="143.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.02%)</title><rect x="53.5924%" y="117" width="0.0200%" height="15" fill="rgb(249,119,36)" fg:x="58987" fg:w="22"/><text x="53.8424%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (15 samples, 0.01%)</title><rect x="53.5987%" y="101" width="0.0136%" height="15" fill="rgb(209,23,33)" fg:x="58994" fg:w="15"/><text x="53.8487%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;&gt; (145 samples, 0.13%)</title><rect x="53.6160%" y="181" width="0.1317%" height="15" fill="rgb(211,10,0)" fg:x="59013" fg:w="145"/><text x="53.8660%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt; (53 samples, 0.05%)</title><rect x="53.6996%" y="165" width="0.0482%" height="15" fill="rgb(208,99,37)" fg:x="59105" fg:w="53"/><text x="53.9496%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (316 samples, 0.29%)</title><rect x="53.6124%" y="197" width="0.2871%" height="15" fill="rgb(213,132,31)" fg:x="59009" fg:w="316"/><text x="53.8624%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (167 samples, 0.15%)</title><rect x="53.7478%" y="181" width="0.1517%" height="15" fill="rgb(243,129,40)" fg:x="59158" fg:w="167"/><text x="53.9978%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_value::value::Value&gt;&gt; (17 samples, 0.02%)</title><rect x="53.8840%" y="165" width="0.0154%" height="15" fill="rgb(210,66,33)" fg:x="59308" fg:w="17"/><text x="54.1340%" y="175.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (17 samples, 0.02%)</title><rect x="53.8840%" y="149" width="0.0154%" height="15" fill="rgb(209,189,4)" fg:x="59308" fg:w="17"/><text x="54.1340%" y="159.50"></text></g><g><title>sn_rust_dealloc (154 samples, 0.14%)</title><rect x="53.8995%" y="197" width="0.1399%" height="15" fill="rgb(214,107,37)" fg:x="59325" fg:w="154"/><text x="54.1495%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (983 samples, 0.89%)</title><rect x="53.1608%" y="213" width="0.8931%" height="15" fill="rgb(245,88,54)" fg:x="58512" fg:w="983"/><text x="53.4108%" y="223.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (16 samples, 0.01%)</title><rect x="54.0394%" y="197" width="0.0145%" height="15" fill="rgb(205,146,20)" fg:x="59479" fg:w="16"/><text x="54.2894%" y="207.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::drop (986 samples, 0.90%)</title><rect x="53.1608%" y="229" width="0.8958%" height="15" fill="rgb(220,161,25)" fg:x="58512" fg:w="986"/><text x="53.4108%" y="239.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (1,147 samples, 1.04%)</title><rect x="53.0327%" y="245" width="1.0421%" height="15" fill="rgb(215,152,15)" fg:x="58371" fg:w="1147"/><text x="53.2827%" y="255.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (20 samples, 0.02%)</title><rect x="54.0567%" y="229" width="0.0182%" height="15" fill="rgb(233,192,44)" fg:x="59498" fg:w="20"/><text x="54.3067%" y="239.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (16 samples, 0.01%)</title><rect x="54.0603%" y="213" width="0.0145%" height="15" fill="rgb(240,170,46)" fg:x="59502" fg:w="16"/><text x="54.3103%" y="223.50"></text></g><g><title>sn_rust_dealloc (104 samples, 0.09%)</title><rect x="54.0857%" y="149" width="0.0945%" height="15" fill="rgb(207,104,33)" fg:x="59530" fg:w="104"/><text x="54.3357%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::deallocate (1,100 samples, 1.00%)</title><rect x="54.0803%" y="213" width="0.9994%" height="15" fill="rgb(219,21,39)" fg:x="59524" fg:w="1100"/><text x="54.3303%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (1,100 samples, 1.00%)</title><rect x="54.0803%" y="197" width="0.9994%" height="15" fill="rgb(214,133,29)" fg:x="59524" fg:w="1100"/><text x="54.3303%" y="207.50"></text></g><g><title>__rg_dealloc (1,100 samples, 1.00%)</title><rect x="54.0803%" y="181" width="0.9994%" height="15" fill="rgb(226,93,6)" fg:x="59524" fg:w="1100"/><text x="54.3303%" y="191.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (1,100 samples, 1.00%)</title><rect x="54.0803%" y="165" width="0.9994%" height="15" fill="rgb(252,222,34)" fg:x="59524" fg:w="1100"/><text x="54.3303%" y="175.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (990 samples, 0.90%)</title><rect x="54.1802%" y="149" width="0.8995%" height="15" fill="rgb(252,92,48)" fg:x="59634" fg:w="990"/><text x="54.4302%" y="159.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::free_buckets (1,113 samples, 1.01%)</title><rect x="54.0748%" y="245" width="1.0112%" height="15" fill="rgb(245,223,24)" fg:x="59518" fg:w="1113"/><text x="54.3248%" y="255.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::free_buckets (1,113 samples, 1.01%)</title><rect x="54.0748%" y="229" width="1.0112%" height="15" fill="rgb(205,176,3)" fg:x="59518" fg:w="1113"/><text x="54.3248%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (2,270 samples, 2.06%)</title><rect x="53.0327%" y="309" width="2.0624%" height="15" fill="rgb(235,151,15)" fg:x="58371" fg:w="2270"/><text x="53.2827%" y="319.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (2,270 samples, 2.06%)</title><rect x="53.0327%" y="293" width="2.0624%" height="15" fill="rgb(237,209,11)" fg:x="58371" fg:w="2270"/><text x="53.2827%" y="303.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (2,270 samples, 2.06%)</title><rect x="53.0327%" y="277" width="2.0624%" height="15" fill="rgb(243,227,24)" fg:x="58371" fg:w="2270"/><text x="53.2827%" y="287.50">c..</text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,270 samples, 2.06%)</title><rect x="53.0327%" y="261" width="2.0624%" height="15" fill="rgb(239,193,16)" fg:x="58371" fg:w="2270"/><text x="53.2827%" y="271.50">&lt;..</text></g><g><title>abi_stable::std_types::boxed::destroy_box (2,287 samples, 2.08%)</title><rect x="53.0291%" y="325" width="2.0778%" height="15" fill="rgb(231,27,9)" fg:x="58367" fg:w="2287"/><text x="53.2791%" y="335.50">a..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="55.0951%" y="309" width="0.0118%" height="15" fill="rgb(219,169,10)" fg:x="60641" fg:w="13"/><text x="55.3451%" y="319.50"></text></g><g><title>alloc::alloc::box_free (13 samples, 0.01%)</title><rect x="55.0951%" y="293" width="0.0118%" height="15" fill="rgb(244,229,43)" fg:x="60641" fg:w="13"/><text x="55.3451%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.01%)</title><rect x="55.0951%" y="277" width="0.0118%" height="15" fill="rgb(254,38,20)" fg:x="60641" fg:w="13"/><text x="55.3451%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.01%)</title><rect x="55.0951%" y="261" width="0.0118%" height="15" fill="rgb(250,47,30)" fg:x="60641" fg:w="13"/><text x="55.3451%" y="271.50"></text></g><g><title>__rg_dealloc (13 samples, 0.01%)</title><rect x="55.0951%" y="245" width="0.0118%" height="15" fill="rgb(224,124,36)" fg:x="60641" fg:w="13"/><text x="55.3451%" y="255.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (13 samples, 0.01%)</title><rect x="55.0951%" y="229" width="0.0118%" height="15" fill="rgb(246,68,51)" fg:x="60641" fg:w="13"/><text x="55.3451%" y="239.50"></text></g><g><title>sn_rust_dealloc (74 samples, 0.07%)</title><rect x="55.1069%" y="325" width="0.0672%" height="15" fill="rgb(253,43,49)" fg:x="60654" fg:w="74"/><text x="55.3569%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (2,410 samples, 2.19%)</title><rect x="52.9955%" y="405" width="2.1896%" height="15" fill="rgb(219,54,36)" fg:x="58330" fg:w="2410"/><text x="53.2455%" y="415.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (2,410 samples, 2.19%)</title><rect x="52.9955%" y="389" width="2.1896%" height="15" fill="rgb(227,133,34)" fg:x="58330" fg:w="2410"/><text x="53.2455%" y="399.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (2,392 samples, 2.17%)</title><rect x="53.0118%" y="373" width="2.1732%" height="15" fill="rgb(247,227,15)" fg:x="58348" fg:w="2392"/><text x="53.2618%" y="383.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (2,392 samples, 2.17%)</title><rect x="53.0118%" y="357" width="2.1732%" height="15" fill="rgb(229,96,14)" fg:x="58348" fg:w="2392"/><text x="53.2618%" y="367.50">c..</text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (2,392 samples, 2.17%)</title><rect x="53.0118%" y="341" width="2.1732%" height="15" fill="rgb(220,79,17)" fg:x="58348" fg:w="2392"/><text x="53.2618%" y="351.50">a..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (12 samples, 0.01%)</title><rect x="55.1742%" y="325" width="0.0109%" height="15" fill="rgb(205,131,53)" fg:x="60728" fg:w="12"/><text x="55.4242%" y="335.50"></text></g><g><title>sn_rust_dealloc (27 samples, 0.02%)</title><rect x="55.1851%" y="405" width="0.0245%" height="15" fill="rgb(209,50,29)" fg:x="60740" fg:w="27"/><text x="55.4351%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (6,195 samples, 5.63%)</title><rect x="49.5884%" y="437" width="5.6284%" height="15" fill="rgb(245,86,46)" fg:x="54580" fg:w="6195"/><text x="49.8384%" y="447.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (5,590 samples, 5.08%)</title><rect x="50.1381%" y="421" width="5.0788%" height="15" fill="rgb(235,66,46)" fg:x="55185" fg:w="5590"/><text x="50.3881%" y="431.50">core::..</text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::mut_at (19 samples, 0.02%)</title><rect x="55.3041%" y="389" width="0.0173%" height="15" fill="rgb(232,148,31)" fg:x="60871" fg:w="19"/><text x="55.5541%" y="399.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::index_for (17 samples, 0.02%)</title><rect x="55.3059%" y="373" width="0.0154%" height="15" fill="rgb(217,149,8)" fg:x="60873" fg:w="17"/><text x="55.5559%" y="383.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (116 samples, 0.11%)</title><rect x="55.2205%" y="437" width="0.1054%" height="15" fill="rgb(209,183,11)" fg:x="60779" fg:w="116"/><text x="55.4705%" y="447.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n (111 samples, 0.10%)</title><rect x="55.2250%" y="421" width="0.1008%" height="15" fill="rgb(208,55,20)" fg:x="60784" fg:w="111"/><text x="55.4750%" y="431.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n_inner (111 samples, 0.10%)</title><rect x="55.2250%" y="405" width="0.1008%" height="15" fill="rgb(218,39,14)" fg:x="60784" fg:w="111"/><text x="55.4750%" y="415.50"></text></g><g><title>sn_rust_dealloc (43 samples, 0.04%)</title><rect x="55.3259%" y="437" width="0.0391%" height="15" fill="rgb(216,169,33)" fg:x="60895" fg:w="43"/><text x="55.5759%" y="447.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (15 samples, 0.01%)</title><rect x="55.3804%" y="421" width="0.0136%" height="15" fill="rgb(233,80,24)" fg:x="60955" fg:w="15"/><text x="55.6304%" y="431.50"></text></g><g><title>core::time::Duration::as_nanos (17 samples, 0.02%)</title><rect x="55.3940%" y="421" width="0.0154%" height="15" fill="rgb(213,179,31)" fg:x="60970" fg:w="17"/><text x="55.6440%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (73 samples, 0.07%)</title><rect x="55.4095%" y="405" width="0.0663%" height="15" fill="rgb(209,19,5)" fg:x="60987" fg:w="73"/><text x="55.6595%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (27 samples, 0.02%)</title><rect x="55.4985%" y="373" width="0.0245%" height="15" fill="rgb(219,18,35)" fg:x="61085" fg:w="27"/><text x="55.7485%" y="383.50"></text></g><g><title>core::cmp::PartialOrd::ge (27 samples, 0.02%)</title><rect x="55.4985%" y="357" width="0.0245%" height="15" fill="rgb(209,169,16)" fg:x="61085" fg:w="27"/><text x="55.7485%" y="367.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (27 samples, 0.02%)</title><rect x="55.4985%" y="341" width="0.0245%" height="15" fill="rgb(245,90,51)" fg:x="61085" fg:w="27"/><text x="55.7485%" y="351.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (27 samples, 0.02%)</title><rect x="55.4985%" y="325" width="0.0245%" height="15" fill="rgb(220,99,45)" fg:x="61085" fg:w="27"/><text x="55.7485%" y="335.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (27 samples, 0.02%)</title><rect x="55.4985%" y="309" width="0.0245%" height="15" fill="rgb(249,89,25)" fg:x="61085" fg:w="27"/><text x="55.7485%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (13 samples, 0.01%)</title><rect x="55.5112%" y="293" width="0.0118%" height="15" fill="rgb(239,193,0)" fg:x="61099" fg:w="13"/><text x="55.7612%" y="303.50"></text></g><g><title>std::time::SystemTime::duration_since (138 samples, 0.13%)</title><rect x="55.4095%" y="421" width="0.1254%" height="15" fill="rgb(231,126,1)" fg:x="60987" fg:w="138"/><text x="55.6595%" y="431.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (65 samples, 0.06%)</title><rect x="55.4758%" y="405" width="0.0591%" height="15" fill="rgb(243,166,3)" fg:x="61060" fg:w="65"/><text x="55.7258%" y="415.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (65 samples, 0.06%)</title><rect x="55.4758%" y="389" width="0.0591%" height="15" fill="rgb(223,22,34)" fg:x="61060" fg:w="65"/><text x="55.7258%" y="399.50"></text></g><g><title>core::time::Duration::new (13 samples, 0.01%)</title><rect x="55.5230%" y="373" width="0.0118%" height="15" fill="rgb(251,52,51)" fg:x="61112" fg:w="13"/><text x="55.7730%" y="383.50"></text></g><g><title>tremor_common::time::nanotime (459 samples, 0.42%)</title><rect x="55.3686%" y="437" width="0.4170%" height="15" fill="rgb(221,165,28)" fg:x="60942" fg:w="459"/><text x="55.6186%" y="447.50"></text></g><g><title>std::time::SystemTime::now (276 samples, 0.25%)</title><rect x="55.5349%" y="421" width="0.2508%" height="15" fill="rgb(218,121,47)" fg:x="61125" fg:w="276"/><text x="55.7849%" y="431.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (276 samples, 0.25%)</title><rect x="55.5349%" y="405" width="0.2508%" height="15" fill="rgb(209,120,9)" fg:x="61125" fg:w="276"/><text x="55.7849%" y="415.50"></text></g><g><title>std::sys::unix::time::inner::now (276 samples, 0.25%)</title><rect x="55.5349%" y="389" width="0.2508%" height="15" fill="rgb(236,68,12)" fg:x="61125" fg:w="276"/><text x="55.7849%" y="399.50"></text></g><g><title>__clock_gettime (211 samples, 0.19%)</title><rect x="55.5939%" y="373" width="0.1917%" height="15" fill="rgb(225,194,26)" fg:x="61190" fg:w="211"/><text x="55.8439%" y="383.50"></text></g><g><title>__vdso_clock_gettime (204 samples, 0.19%)</title><rect x="55.6003%" y="357" width="0.1853%" height="15" fill="rgb(231,84,39)" fg:x="61197" fg:w="204"/><text x="55.8503%" y="367.50"></text></g><g><title>[[vdso]] (181 samples, 0.16%)</title><rect x="55.6212%" y="341" width="0.1644%" height="15" fill="rgb(210,11,45)" fg:x="61220" fg:w="181"/><text x="55.8712%" y="351.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (91 samples, 0.08%)</title><rect x="55.7902%" y="421" width="0.0827%" height="15" fill="rgb(224,54,52)" fg:x="61406" fg:w="91"/><text x="56.0402%" y="431.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (7,451 samples, 6.77%)</title><rect x="49.1060%" y="725" width="6.7696%" height="15" fill="rgb(238,102,14)" fg:x="54049" fg:w="7451"/><text x="49.3560%" y="735.50">tremor_ru..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,451 samples, 6.77%)</title><rect x="49.1060%" y="709" width="6.7696%" height="15" fill="rgb(243,160,52)" fg:x="54049" fg:w="7451"/><text x="49.3560%" y="719.50">&lt;core::fu..</text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (7,451 samples, 6.77%)</title><rect x="49.1060%" y="693" width="6.7696%" height="15" fill="rgb(216,114,19)" fg:x="54049" fg:w="7451"/><text x="49.3560%" y="703.50">tremor_ru..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,451 samples, 6.77%)</title><rect x="49.1060%" y="677" width="6.7696%" height="15" fill="rgb(244,166,37)" fg:x="54049" fg:w="7451"/><text x="49.3560%" y="687.50">&lt;async_ff..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,451 samples, 6.77%)</title><rect x="49.1060%" y="661" width="6.7696%" height="15" fill="rgb(246,29,44)" fg:x="54049" fg:w="7451"/><text x="49.3560%" y="671.50">&lt;async_ff..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (7,451 samples, 6.77%)</title><rect x="49.1060%" y="645" width="6.7696%" height="15" fill="rgb(215,56,53)" fg:x="54049" fg:w="7451"/><text x="49.3560%" y="655.50">&lt;core::ta..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (7,451 samples, 6.77%)</title><rect x="49.1060%" y="629" width="6.7696%" height="15" fill="rgb(217,60,2)" fg:x="54049" fg:w="7451"/><text x="49.3560%" y="639.50">&lt;async_ff..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (7,451 samples, 6.77%)</title><rect x="49.1060%" y="613" width="6.7696%" height="15" fill="rgb(207,26,24)" fg:x="54049" fg:w="7451"/><text x="49.3560%" y="623.50">async_ffi..</text></g><g><title>std::panic::catch_unwind (7,451 samples, 6.77%)</title><rect x="49.1060%" y="597" width="6.7696%" height="15" fill="rgb(252,210,15)" fg:x="54049" fg:w="7451"/><text x="49.3560%" y="607.50">std::pani..</text></g><g><title>std::panicking::try (7,451 samples, 6.77%)</title><rect x="49.1060%" y="581" width="6.7696%" height="15" fill="rgb(253,209,26)" fg:x="54049" fg:w="7451"/><text x="49.3560%" y="591.50">std::pani..</text></g><g><title>std::panicking::try::do_call (7,451 samples, 6.77%)</title><rect x="49.1060%" y="565" width="6.7696%" height="15" fill="rgb(238,170,14)" fg:x="54049" fg:w="7451"/><text x="49.3560%" y="575.50">std::pani..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (7,451 samples, 6.77%)</title><rect x="49.1060%" y="549" width="6.7696%" height="15" fill="rgb(216,178,15)" fg:x="54049" fg:w="7451"/><text x="49.3560%" y="559.50">&lt;core::pa..</text></g><g><title>core::ops::function::FnOnce::call_once (7,451 samples, 6.77%)</title><rect x="49.1060%" y="533" width="6.7696%" height="15" fill="rgb(250,197,2)" fg:x="54049" fg:w="7451"/><text x="49.3560%" y="543.50">core::ops..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (7,451 samples, 6.77%)</title><rect x="49.1060%" y="517" width="6.7696%" height="15" fill="rgb(212,70,42)" fg:x="54049" fg:w="7451"/><text x="49.3560%" y="527.50">async_ffi..</text></g><g><title>async_ffi::FfiContext::with_context (7,451 samples, 6.77%)</title><rect x="49.1060%" y="501" width="6.7696%" height="15" fill="rgb(227,213,9)" fg:x="54049" fg:w="7451"/><text x="49.3560%" y="511.50">async_ffi..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (7,451 samples, 6.77%)</title><rect x="49.1060%" y="485" width="6.7696%" height="15" fill="rgb(245,99,25)" fg:x="54049" fg:w="7451"/><text x="49.3560%" y="495.50">async_ffi..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,451 samples, 6.77%)</title><rect x="49.1060%" y="469" width="6.7696%" height="15" fill="rgb(250,82,29)" fg:x="54049" fg:w="7451"/><text x="49.3560%" y="479.50">&lt;core::fu..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (7,445 samples, 6.76%)</title><rect x="49.1114%" y="453" width="6.7641%" height="15" fill="rgb(241,226,54)" fg:x="54055" fg:w="7445"/><text x="49.3614%" y="463.50">&lt;tremor_r..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (99 samples, 0.09%)</title><rect x="55.7856%" y="437" width="0.0899%" height="15" fill="rgb(221,99,41)" fg:x="61401" fg:w="99"/><text x="56.0356%" y="447.50"></text></g><g><title>[libc-2.31.so] (57 samples, 0.05%)</title><rect x="55.8819%" y="597" width="0.0518%" height="15" fill="rgb(213,90,21)" fg:x="61507" fg:w="57"/><text x="56.1319%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (93 samples, 0.08%)</title><rect x="56.0300%" y="517" width="0.0845%" height="15" fill="rgb(205,208,24)" fg:x="61670" fg:w="93"/><text x="56.2800%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (93 samples, 0.08%)</title><rect x="56.0300%" y="501" width="0.0845%" height="15" fill="rgb(246,31,12)" fg:x="61670" fg:w="93"/><text x="56.2800%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (278 samples, 0.25%)</title><rect x="56.1145%" y="517" width="0.2526%" height="15" fill="rgb(213,154,6)" fg:x="61763" fg:w="278"/><text x="56.3645%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_load (278 samples, 0.25%)</title><rect x="56.1145%" y="501" width="0.2526%" height="15" fill="rgb(222,163,29)" fg:x="61763" fg:w="278"/><text x="56.3645%" y="511.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (426 samples, 0.39%)</title><rect x="55.9828%" y="549" width="0.3870%" height="15" fill="rgb(227,201,8)" fg:x="61618" fg:w="426"/><text x="56.2328%" y="559.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (409 samples, 0.37%)</title><rect x="55.9982%" y="533" width="0.3716%" height="15" fill="rgb(233,9,32)" fg:x="61635" fg:w="409"/><text x="56.2482%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (39 samples, 0.04%)</title><rect x="56.3762%" y="533" width="0.0354%" height="15" fill="rgb(217,54,24)" fg:x="62051" fg:w="39"/><text x="56.6262%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (36 samples, 0.03%)</title><rect x="56.3789%" y="517" width="0.0327%" height="15" fill="rgb(235,192,0)" fg:x="62054" fg:w="36"/><text x="56.6289%" y="527.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (36 samples, 0.03%)</title><rect x="56.3789%" y="501" width="0.0327%" height="15" fill="rgb(235,45,9)" fg:x="62054" fg:w="36"/><text x="56.6289%" y="511.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (35 samples, 0.03%)</title><rect x="56.3798%" y="485" width="0.0318%" height="15" fill="rgb(246,42,40)" fg:x="62055" fg:w="35"/><text x="56.6298%" y="495.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (34 samples, 0.03%)</title><rect x="56.3807%" y="469" width="0.0309%" height="15" fill="rgb(248,111,24)" fg:x="62056" fg:w="34"/><text x="56.6307%" y="479.50"></text></g><g><title>__GI___pthread_mutex_unlock (34 samples, 0.03%)</title><rect x="56.3807%" y="453" width="0.0309%" height="15" fill="rgb(249,65,22)" fg:x="62056" fg:w="34"/><text x="56.6307%" y="463.50"></text></g><g><title>event_listener::Inner::lock (47 samples, 0.04%)</title><rect x="56.4180%" y="533" width="0.0427%" height="15" fill="rgb(238,111,51)" fg:x="62097" fg:w="47"/><text x="56.6680%" y="543.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (47 samples, 0.04%)</title><rect x="56.4180%" y="517" width="0.0427%" height="15" fill="rgb(250,118,22)" fg:x="62097" fg:w="47"/><text x="56.6680%" y="527.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (45 samples, 0.04%)</title><rect x="56.4198%" y="501" width="0.0409%" height="15" fill="rgb(234,84,26)" fg:x="62099" fg:w="45"/><text x="56.6698%" y="511.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (44 samples, 0.04%)</title><rect x="56.4207%" y="485" width="0.0400%" height="15" fill="rgb(243,172,12)" fg:x="62100" fg:w="44"/><text x="56.6707%" y="495.50"></text></g><g><title>__GI___pthread_mutex_lock (44 samples, 0.04%)</title><rect x="56.4207%" y="469" width="0.0400%" height="15" fill="rgb(236,150,49)" fg:x="62100" fg:w="44"/><text x="56.6707%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (30 samples, 0.03%)</title><rect x="56.4707%" y="437" width="0.0273%" height="15" fill="rgb(225,197,26)" fg:x="62155" fg:w="30"/><text x="56.7207%" y="447.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.03%)</title><rect x="56.4707%" y="421" width="0.0273%" height="15" fill="rgb(214,17,42)" fg:x="62155" fg:w="30"/><text x="56.7207%" y="431.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (27 samples, 0.02%)</title><rect x="56.4734%" y="405" width="0.0245%" height="15" fill="rgb(224,165,40)" fg:x="62158" fg:w="27"/><text x="56.7234%" y="415.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (27 samples, 0.02%)</title><rect x="56.4734%" y="389" width="0.0245%" height="15" fill="rgb(246,100,4)" fg:x="62158" fg:w="27"/><text x="56.7234%" y="399.50"></text></g><g><title>__GI___pthread_mutex_unlock (27 samples, 0.02%)</title><rect x="56.4734%" y="373" width="0.0245%" height="15" fill="rgb(222,103,0)" fg:x="62158" fg:w="27"/><text x="56.7234%" y="383.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (13 samples, 0.01%)</title><rect x="56.5243%" y="357" width="0.0118%" height="15" fill="rgb(227,189,26)" fg:x="62214" fg:w="13"/><text x="56.7743%" y="367.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (13 samples, 0.01%)</title><rect x="56.5243%" y="341" width="0.0118%" height="15" fill="rgb(214,202,17)" fg:x="62214" fg:w="13"/><text x="56.7743%" y="351.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (13 samples, 0.01%)</title><rect x="56.5243%" y="325" width="0.0118%" height="15" fill="rgb(229,111,3)" fg:x="62214" fg:w="13"/><text x="56.7743%" y="335.50"></text></g><g><title>__pthread_cond_signal (13 samples, 0.01%)</title><rect x="56.5243%" y="309" width="0.0118%" height="15" fill="rgb(229,172,15)" fg:x="62214" fg:w="13"/><text x="56.7743%" y="319.50"></text></g><g><title>parking::Unparker::unpark (54 samples, 0.05%)</title><rect x="56.5097%" y="389" width="0.0491%" height="15" fill="rgb(230,224,35)" fg:x="62198" fg:w="54"/><text x="56.7597%" y="399.50"></text></g><g><title>parking::Inner::unpark (50 samples, 0.05%)</title><rect x="56.5134%" y="373" width="0.0454%" height="15" fill="rgb(251,141,6)" fg:x="62202" fg:w="50"/><text x="56.7634%" y="383.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (25 samples, 0.02%)</title><rect x="56.5361%" y="357" width="0.0227%" height="15" fill="rgb(225,208,6)" fg:x="62227" fg:w="25"/><text x="56.7861%" y="367.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (25 samples, 0.02%)</title><rect x="56.5361%" y="341" width="0.0227%" height="15" fill="rgb(246,181,16)" fg:x="62227" fg:w="25"/><text x="56.7861%" y="351.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (25 samples, 0.02%)</title><rect x="56.5361%" y="325" width="0.0227%" height="15" fill="rgb(227,129,36)" fg:x="62227" fg:w="25"/><text x="56.7861%" y="335.50"></text></g><g><title>__GI___pthread_mutex_lock (25 samples, 0.02%)</title><rect x="56.5361%" y="309" width="0.0227%" height="15" fill="rgb(248,117,24)" fg:x="62227" fg:w="25"/><text x="56.7861%" y="319.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (60 samples, 0.05%)</title><rect x="56.5052%" y="405" width="0.0545%" height="15" fill="rgb(214,185,35)" fg:x="62193" fg:w="60"/><text x="56.7552%" y="415.50"></text></g><g><title>core::task::wake::Waker::wake (72 samples, 0.07%)</title><rect x="56.5043%" y="437" width="0.0654%" height="15" fill="rgb(236,150,34)" fg:x="62192" fg:w="72"/><text x="56.7543%" y="447.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (71 samples, 0.06%)</title><rect x="56.5052%" y="421" width="0.0645%" height="15" fill="rgb(243,228,27)" fg:x="62193" fg:w="71"/><text x="56.7552%" y="431.50"></text></g><g><title>async_executor::State::notify (133 samples, 0.12%)</title><rect x="56.4652%" y="453" width="0.1208%" height="15" fill="rgb(245,77,44)" fg:x="62149" fg:w="133"/><text x="56.7152%" y="463.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (18 samples, 0.02%)</title><rect x="56.5697%" y="437" width="0.0164%" height="15" fill="rgb(235,214,42)" fg:x="62264" fg:w="18"/><text x="56.8197%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (18 samples, 0.02%)</title><rect x="56.5697%" y="421" width="0.0164%" height="15" fill="rgb(221,74,3)" fg:x="62264" fg:w="18"/><text x="56.8197%" y="431.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (15 samples, 0.01%)</title><rect x="56.5724%" y="405" width="0.0136%" height="15" fill="rgb(206,121,29)" fg:x="62267" fg:w="15"/><text x="56.8224%" y="415.50"></text></g><g><title>__GI___pthread_mutex_lock (15 samples, 0.01%)</title><rect x="56.5724%" y="389" width="0.0136%" height="15" fill="rgb(249,131,53)" fg:x="62267" fg:w="15"/><text x="56.8224%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (21 samples, 0.02%)</title><rect x="56.5888%" y="421" width="0.0191%" height="15" fill="rgb(236,170,29)" fg:x="62285" fg:w="21"/><text x="56.8388%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (21 samples, 0.02%)</title><rect x="56.5888%" y="405" width="0.0191%" height="15" fill="rgb(247,96,15)" fg:x="62285" fg:w="21"/><text x="56.8388%" y="415.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (170 samples, 0.15%)</title><rect x="56.4652%" y="469" width="0.1545%" height="15" fill="rgb(211,210,7)" fg:x="62149" fg:w="170"/><text x="56.7152%" y="479.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (37 samples, 0.03%)</title><rect x="56.5860%" y="453" width="0.0336%" height="15" fill="rgb(240,88,50)" fg:x="62282" fg:w="37"/><text x="56.8360%" y="463.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (36 samples, 0.03%)</title><rect x="56.5870%" y="437" width="0.0327%" height="15" fill="rgb(209,229,26)" fg:x="62283" fg:w="36"/><text x="56.8370%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (25 samples, 0.02%)</title><rect x="56.6197%" y="469" width="0.0227%" height="15" fill="rgb(210,68,23)" fg:x="62319" fg:w="25"/><text x="56.8697%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (25 samples, 0.02%)</title><rect x="56.6197%" y="453" width="0.0227%" height="15" fill="rgb(229,180,13)" fg:x="62319" fg:w="25"/><text x="56.8697%" y="463.50"></text></g><g><title>event_listener::List::notify (203 samples, 0.18%)</title><rect x="56.4607%" y="533" width="0.1844%" height="15" fill="rgb(236,53,44)" fg:x="62144" fg:w="203"/><text x="56.7107%" y="543.50"></text></g><g><title>core::task::wake::Waker::wake (202 samples, 0.18%)</title><rect x="56.4616%" y="517" width="0.1835%" height="15" fill="rgb(244,214,29)" fg:x="62145" fg:w="202"/><text x="56.7116%" y="527.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (202 samples, 0.18%)</title><rect x="56.4616%" y="501" width="0.1835%" height="15" fill="rgb(220,75,29)" fg:x="62145" fg:w="202"/><text x="56.7116%" y="511.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (198 samples, 0.18%)</title><rect x="56.4652%" y="485" width="0.1799%" height="15" fill="rgb(214,183,37)" fg:x="62149" fg:w="198"/><text x="56.7152%" y="495.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (1,029 samples, 0.93%)</title><rect x="55.9773%" y="565" width="0.9349%" height="15" fill="rgb(239,117,29)" fg:x="61612" fg:w="1029"/><text x="56.2273%" y="575.50"></text></g><g><title>event_listener::Event::notify (597 samples, 0.54%)</title><rect x="56.3698%" y="549" width="0.5424%" height="15" fill="rgb(237,171,35)" fg:x="62044" fg:w="597"/><text x="56.6198%" y="559.50"></text></g><g><title>event_listener::full_fence (294 samples, 0.27%)</title><rect x="56.6451%" y="533" width="0.2671%" height="15" fill="rgb(229,178,53)" fg:x="62347" fg:w="294"/><text x="56.8951%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (291 samples, 0.26%)</title><rect x="56.6478%" y="517" width="0.2644%" height="15" fill="rgb(210,102,19)" fg:x="62350" fg:w="291"/><text x="56.8978%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (291 samples, 0.26%)</title><rect x="56.6478%" y="501" width="0.2644%" height="15" fill="rgb(235,127,22)" fg:x="62350" fg:w="291"/><text x="56.8978%" y="511.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (1,122 samples, 1.02%)</title><rect x="55.9546%" y="581" width="1.0194%" height="15" fill="rgb(244,31,31)" fg:x="61587" fg:w="1122"/><text x="56.2046%" y="591.50"></text></g><g><title>event_listener::Event::notify (57 samples, 0.05%)</title><rect x="56.9222%" y="565" width="0.0518%" height="15" fill="rgb(231,43,21)" fg:x="62652" fg:w="57"/><text x="57.1722%" y="575.50"></text></g><g><title>event_listener::full_fence (57 samples, 0.05%)</title><rect x="56.9222%" y="549" width="0.0518%" height="15" fill="rgb(217,131,35)" fg:x="62652" fg:w="57"/><text x="57.1722%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (57 samples, 0.05%)</title><rect x="56.9222%" y="533" width="0.0518%" height="15" fill="rgb(221,149,4)" fg:x="62652" fg:w="57"/><text x="57.1722%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (57 samples, 0.05%)</title><rect x="56.9222%" y="517" width="0.0518%" height="15" fill="rgb(232,170,28)" fg:x="62652" fg:w="57"/><text x="57.1722%" y="527.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,211 samples, 1.10%)</title><rect x="55.8756%" y="645" width="1.1002%" height="15" fill="rgb(238,56,10)" fg:x="61500" fg:w="1211"/><text x="56.1256%" y="655.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (1,211 samples, 1.10%)</title><rect x="55.8756%" y="629" width="1.1002%" height="15" fill="rgb(235,196,14)" fg:x="61500" fg:w="1211"/><text x="56.1256%" y="639.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,211 samples, 1.10%)</title><rect x="55.8756%" y="613" width="1.1002%" height="15" fill="rgb(216,45,48)" fg:x="61500" fg:w="1211"/><text x="56.1256%" y="623.50"></text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (1,147 samples, 1.04%)</title><rect x="55.9337%" y="597" width="1.0421%" height="15" fill="rgb(238,213,17)" fg:x="61564" fg:w="1147"/><text x="56.1837%" y="607.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.02%)</title><rect x="57.2284%" y="629" width="0.0154%" height="15" fill="rgb(212,13,2)" fg:x="62989" fg:w="17"/><text x="57.4784%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (62 samples, 0.06%)</title><rect x="57.4583%" y="501" width="0.0563%" height="15" fill="rgb(240,114,20)" fg:x="63242" fg:w="62"/><text x="57.7083%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (62 samples, 0.06%)</title><rect x="57.4583%" y="485" width="0.0563%" height="15" fill="rgb(228,41,40)" fg:x="63242" fg:w="62"/><text x="57.7083%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (62 samples, 0.06%)</title><rect x="57.4583%" y="469" width="0.0563%" height="15" fill="rgb(244,132,35)" fg:x="63242" fg:w="62"/><text x="57.7083%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (62 samples, 0.06%)</title><rect x="57.4583%" y="453" width="0.0563%" height="15" fill="rgb(253,189,4)" fg:x="63242" fg:w="62"/><text x="57.7083%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (62 samples, 0.06%)</title><rect x="57.4583%" y="437" width="0.0563%" height="15" fill="rgb(224,37,19)" fg:x="63242" fg:w="62"/><text x="57.7083%" y="447.50"></text></g><g><title>alloc::alloc::alloc (57 samples, 0.05%)</title><rect x="57.4628%" y="421" width="0.0518%" height="15" fill="rgb(235,223,18)" fg:x="63247" fg:w="57"/><text x="57.7128%" y="431.50"></text></g><g><title>__rg_alloc (57 samples, 0.05%)</title><rect x="57.4628%" y="405" width="0.0518%" height="15" fill="rgb(235,163,25)" fg:x="63247" fg:w="57"/><text x="57.7128%" y="415.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (57 samples, 0.05%)</title><rect x="57.4628%" y="389" width="0.0518%" height="15" fill="rgb(217,145,28)" fg:x="63247" fg:w="57"/><text x="57.7128%" y="399.50"></text></g><g><title>sn_rust_alloc (51 samples, 0.05%)</title><rect x="57.4682%" y="373" width="0.0463%" height="15" fill="rgb(223,223,32)" fg:x="63253" fg:w="51"/><text x="57.7182%" y="383.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (17 samples, 0.02%)</title><rect x="57.4991%" y="357" width="0.0154%" height="15" fill="rgb(227,189,39)" fg:x="63287" fg:w="17"/><text x="57.7491%" y="367.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (94 samples, 0.09%)</title><rect x="57.4446%" y="613" width="0.0854%" height="15" fill="rgb(248,10,22)" fg:x="63227" fg:w="94"/><text x="57.6946%" y="623.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (89 samples, 0.08%)</title><rect x="57.4492%" y="597" width="0.0809%" height="15" fill="rgb(248,46,39)" fg:x="63232" fg:w="89"/><text x="57.6992%" y="607.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (83 samples, 0.08%)</title><rect x="57.4546%" y="581" width="0.0754%" height="15" fill="rgb(248,113,48)" fg:x="63238" fg:w="83"/><text x="57.7046%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (79 samples, 0.07%)</title><rect x="57.4583%" y="565" width="0.0718%" height="15" fill="rgb(245,16,25)" fg:x="63242" fg:w="79"/><text x="57.7083%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (79 samples, 0.07%)</title><rect x="57.4583%" y="549" width="0.0718%" height="15" fill="rgb(249,152,16)" fg:x="63242" fg:w="79"/><text x="57.7083%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (79 samples, 0.07%)</title><rect x="57.4583%" y="533" width="0.0718%" height="15" fill="rgb(250,16,1)" fg:x="63242" fg:w="79"/><text x="57.7083%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (79 samples, 0.07%)</title><rect x="57.4583%" y="517" width="0.0718%" height="15" fill="rgb(249,138,3)" fg:x="63242" fg:w="79"/><text x="57.7083%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (17 samples, 0.02%)</title><rect x="57.5146%" y="501" width="0.0154%" height="15" fill="rgb(227,71,41)" fg:x="63304" fg:w="17"/><text x="57.7646%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (17 samples, 0.02%)</title><rect x="57.5146%" y="485" width="0.0154%" height="15" fill="rgb(209,184,23)" fg:x="63304" fg:w="17"/><text x="57.7646%" y="495.50"></text></g><g><title>[libc-2.31.so] (14 samples, 0.01%)</title><rect x="57.5173%" y="469" width="0.0127%" height="15" fill="rgb(223,215,31)" fg:x="63307" fg:w="14"/><text x="57.7673%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (33 samples, 0.03%)</title><rect x="57.5536%" y="405" width="0.0300%" height="15" fill="rgb(210,146,28)" fg:x="63347" fg:w="33"/><text x="57.8036%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (33 samples, 0.03%)</title><rect x="57.5536%" y="389" width="0.0300%" height="15" fill="rgb(209,183,41)" fg:x="63347" fg:w="33"/><text x="57.8036%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (33 samples, 0.03%)</title><rect x="57.5536%" y="373" width="0.0300%" height="15" fill="rgb(209,224,45)" fg:x="63347" fg:w="33"/><text x="57.8036%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (30 samples, 0.03%)</title><rect x="57.5564%" y="357" width="0.0273%" height="15" fill="rgb(224,209,51)" fg:x="63350" fg:w="30"/><text x="57.8064%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (30 samples, 0.03%)</title><rect x="57.5564%" y="341" width="0.0273%" height="15" fill="rgb(223,17,39)" fg:x="63350" fg:w="30"/><text x="57.8064%" y="351.50"></text></g><g><title>alloc::alloc::alloc (30 samples, 0.03%)</title><rect x="57.5564%" y="325" width="0.0273%" height="15" fill="rgb(234,204,37)" fg:x="63350" fg:w="30"/><text x="57.8064%" y="335.50"></text></g><g><title>__rg_alloc (30 samples, 0.03%)</title><rect x="57.5564%" y="309" width="0.0273%" height="15" fill="rgb(236,120,5)" fg:x="63350" fg:w="30"/><text x="57.8064%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (30 samples, 0.03%)</title><rect x="57.5564%" y="293" width="0.0273%" height="15" fill="rgb(248,97,27)" fg:x="63350" fg:w="30"/><text x="57.8064%" y="303.50"></text></g><g><title>sn_rust_alloc (28 samples, 0.03%)</title><rect x="57.5582%" y="277" width="0.0254%" height="15" fill="rgb(240,66,17)" fg:x="63352" fg:w="28"/><text x="57.8082%" y="287.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (55 samples, 0.05%)</title><rect x="57.5509%" y="517" width="0.0500%" height="15" fill="rgb(210,79,3)" fg:x="63344" fg:w="55"/><text x="57.8009%" y="527.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (55 samples, 0.05%)</title><rect x="57.5509%" y="501" width="0.0500%" height="15" fill="rgb(214,176,27)" fg:x="63344" fg:w="55"/><text x="57.8009%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (55 samples, 0.05%)</title><rect x="57.5509%" y="485" width="0.0500%" height="15" fill="rgb(235,185,3)" fg:x="63344" fg:w="55"/><text x="57.8009%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (52 samples, 0.05%)</title><rect x="57.5536%" y="469" width="0.0472%" height="15" fill="rgb(227,24,12)" fg:x="63347" fg:w="52"/><text x="57.8036%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (52 samples, 0.05%)</title><rect x="57.5536%" y="453" width="0.0472%" height="15" fill="rgb(252,169,48)" fg:x="63347" fg:w="52"/><text x="57.8036%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (52 samples, 0.05%)</title><rect x="57.5536%" y="437" width="0.0472%" height="15" fill="rgb(212,65,1)" fg:x="63347" fg:w="52"/><text x="57.8036%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (52 samples, 0.05%)</title><rect x="57.5536%" y="421" width="0.0472%" height="15" fill="rgb(242,39,24)" fg:x="63347" fg:w="52"/><text x="57.8036%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (19 samples, 0.02%)</title><rect x="57.5836%" y="405" width="0.0173%" height="15" fill="rgb(249,32,23)" fg:x="63380" fg:w="19"/><text x="57.8336%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (19 samples, 0.02%)</title><rect x="57.5836%" y="389" width="0.0173%" height="15" fill="rgb(251,195,23)" fg:x="63380" fg:w="19"/><text x="57.8336%" y="399.50"></text></g><g><title>[libc-2.31.so] (19 samples, 0.02%)</title><rect x="57.5836%" y="373" width="0.0173%" height="15" fill="rgb(236,174,8)" fg:x="63380" fg:w="19"/><text x="57.8336%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (15 samples, 0.01%)</title><rect x="57.6054%" y="469" width="0.0136%" height="15" fill="rgb(220,197,8)" fg:x="63404" fg:w="15"/><text x="57.8554%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (15 samples, 0.01%)</title><rect x="57.6054%" y="453" width="0.0136%" height="15" fill="rgb(240,108,37)" fg:x="63404" fg:w="15"/><text x="57.8554%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (21 samples, 0.02%)</title><rect x="57.6036%" y="517" width="0.0191%" height="15" fill="rgb(232,176,24)" fg:x="63402" fg:w="21"/><text x="57.8536%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (19 samples, 0.02%)</title><rect x="57.6054%" y="501" width="0.0173%" height="15" fill="rgb(243,35,29)" fg:x="63404" fg:w="19"/><text x="57.8554%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (19 samples, 0.02%)</title><rect x="57.6054%" y="485" width="0.0173%" height="15" fill="rgb(210,37,18)" fg:x="63404" fg:w="19"/><text x="57.8554%" y="495.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (414 samples, 0.38%)</title><rect x="57.2475%" y="629" width="0.3761%" height="15" fill="rgb(224,184,40)" fg:x="63010" fg:w="414"/><text x="57.4975%" y="639.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (103 samples, 0.09%)</title><rect x="57.5300%" y="613" width="0.0936%" height="15" fill="rgb(236,39,29)" fg:x="63321" fg:w="103"/><text x="57.7800%" y="623.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (87 samples, 0.08%)</title><rect x="57.5446%" y="597" width="0.0790%" height="15" fill="rgb(232,48,39)" fg:x="63337" fg:w="87"/><text x="57.7946%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (87 samples, 0.08%)</title><rect x="57.5446%" y="581" width="0.0790%" height="15" fill="rgb(236,34,42)" fg:x="63337" fg:w="87"/><text x="57.7946%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (87 samples, 0.08%)</title><rect x="57.5446%" y="565" width="0.0790%" height="15" fill="rgb(243,106,37)" fg:x="63337" fg:w="87"/><text x="57.7946%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (87 samples, 0.08%)</title><rect x="57.5446%" y="549" width="0.0790%" height="15" fill="rgb(218,96,6)" fg:x="63337" fg:w="87"/><text x="57.7946%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (87 samples, 0.08%)</title><rect x="57.5446%" y="533" width="0.0790%" height="15" fill="rgb(235,130,12)" fg:x="63337" fg:w="87"/><text x="57.7946%" y="543.50"></text></g><g><title>[libc-2.31.so] (38 samples, 0.03%)</title><rect x="57.6236%" y="629" width="0.0345%" height="15" fill="rgb(231,95,0)" fg:x="63424" fg:w="38"/><text x="57.8736%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (160 samples, 0.15%)</title><rect x="57.6581%" y="629" width="0.1454%" height="15" fill="rgb(228,12,23)" fg:x="63462" fg:w="160"/><text x="57.9081%" y="639.50"></text></g><g><title>core::ptr::write (147 samples, 0.13%)</title><rect x="57.6699%" y="613" width="0.1336%" height="15" fill="rgb(216,12,1)" fg:x="63475" fg:w="147"/><text x="57.9199%" y="623.50"></text></g><g><title>[libc-2.31.so] (143 samples, 0.13%)</title><rect x="57.6736%" y="597" width="0.1299%" height="15" fill="rgb(219,59,3)" fg:x="63479" fg:w="143"/><text x="57.9236%" y="607.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (314 samples, 0.29%)</title><rect x="57.8326%" y="469" width="0.2853%" height="15" fill="rgb(215,208,46)" fg:x="63654" fg:w="314"/><text x="58.0826%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (356 samples, 0.32%)</title><rect x="57.8035%" y="629" width="0.3234%" height="15" fill="rgb(254,224,29)" fg:x="63622" fg:w="356"/><text x="58.0535%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (356 samples, 0.32%)</title><rect x="57.8035%" y="613" width="0.3234%" height="15" fill="rgb(232,14,29)" fg:x="63622" fg:w="356"/><text x="58.0535%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (353 samples, 0.32%)</title><rect x="57.8062%" y="597" width="0.3207%" height="15" fill="rgb(208,45,52)" fg:x="63625" fg:w="353"/><text x="58.0562%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (353 samples, 0.32%)</title><rect x="57.8062%" y="581" width="0.3207%" height="15" fill="rgb(234,191,28)" fg:x="63625" fg:w="353"/><text x="58.0562%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (350 samples, 0.32%)</title><rect x="57.8090%" y="565" width="0.3180%" height="15" fill="rgb(244,67,43)" fg:x="63628" fg:w="350"/><text x="58.0590%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (350 samples, 0.32%)</title><rect x="57.8090%" y="549" width="0.3180%" height="15" fill="rgb(236,189,24)" fg:x="63628" fg:w="350"/><text x="58.0590%" y="559.50"></text></g><g><title>alloc::alloc::alloc (350 samples, 0.32%)</title><rect x="57.8090%" y="533" width="0.3180%" height="15" fill="rgb(239,214,33)" fg:x="63628" fg:w="350"/><text x="58.0590%" y="543.50"></text></g><g><title>__rg_alloc (350 samples, 0.32%)</title><rect x="57.8090%" y="517" width="0.3180%" height="15" fill="rgb(226,176,41)" fg:x="63628" fg:w="350"/><text x="58.0590%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (350 samples, 0.32%)</title><rect x="57.8090%" y="501" width="0.3180%" height="15" fill="rgb(248,47,8)" fg:x="63628" fg:w="350"/><text x="58.0590%" y="511.50"></text></g><g><title>sn_rust_alloc (350 samples, 0.32%)</title><rect x="57.8090%" y="485" width="0.3180%" height="15" fill="rgb(218,81,44)" fg:x="63628" fg:w="350"/><text x="58.0590%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (22 samples, 0.02%)</title><rect x="58.1378%" y="533" width="0.0200%" height="15" fill="rgb(213,98,6)" fg:x="63990" fg:w="22"/><text x="58.3878%" y="543.50"></text></g><g><title>alloc::alloc::dealloc (22 samples, 0.02%)</title><rect x="58.1378%" y="517" width="0.0200%" height="15" fill="rgb(222,85,22)" fg:x="63990" fg:w="22"/><text x="58.3878%" y="527.50"></text></g><g><title>__rg_dealloc (22 samples, 0.02%)</title><rect x="58.1378%" y="501" width="0.0200%" height="15" fill="rgb(239,46,39)" fg:x="63990" fg:w="22"/><text x="58.3878%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (22 samples, 0.02%)</title><rect x="58.1378%" y="485" width="0.0200%" height="15" fill="rgb(237,12,29)" fg:x="63990" fg:w="22"/><text x="58.3878%" y="495.50"></text></g><g><title>sn_rust_dealloc (22 samples, 0.02%)</title><rect x="58.1378%" y="469" width="0.0200%" height="15" fill="rgb(214,77,8)" fg:x="63990" fg:w="22"/><text x="58.3878%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (35 samples, 0.03%)</title><rect x="58.1269%" y="629" width="0.0318%" height="15" fill="rgb(217,168,37)" fg:x="63978" fg:w="35"/><text x="58.3769%" y="639.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.03%)</title><rect x="58.1269%" y="613" width="0.0318%" height="15" fill="rgb(221,217,23)" fg:x="63978" fg:w="35"/><text x="58.3769%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (30 samples, 0.03%)</title><rect x="58.1315%" y="597" width="0.0273%" height="15" fill="rgb(243,229,36)" fg:x="63983" fg:w="30"/><text x="58.3815%" y="607.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.03%)</title><rect x="58.1315%" y="581" width="0.0273%" height="15" fill="rgb(251,163,40)" fg:x="63983" fg:w="30"/><text x="58.3815%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (23 samples, 0.02%)</title><rect x="58.1378%" y="565" width="0.0209%" height="15" fill="rgb(237,222,12)" fg:x="63990" fg:w="23"/><text x="58.3878%" y="575.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="58.1378%" y="549" width="0.0209%" height="15" fill="rgb(248,132,6)" fg:x="63990" fg:w="23"/><text x="58.3878%" y="559.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (2,527 samples, 2.30%)</title><rect x="55.8756%" y="725" width="2.2959%" height="15" fill="rgb(227,167,50)" fg:x="61500" fg:w="2527"/><text x="56.1256%" y="735.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,527 samples, 2.30%)</title><rect x="55.8756%" y="709" width="2.2959%" height="15" fill="rgb(242,84,37)" fg:x="61500" fg:w="2527"/><text x="56.1256%" y="719.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (2,527 samples, 2.30%)</title><rect x="55.8756%" y="693" width="2.2959%" height="15" fill="rgb(212,4,50)" fg:x="61500" fg:w="2527"/><text x="56.1256%" y="703.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,527 samples, 2.30%)</title><rect x="55.8756%" y="677" width="2.2959%" height="15" fill="rgb(230,228,32)" fg:x="61500" fg:w="2527"/><text x="56.1256%" y="687.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (2,527 samples, 2.30%)</title><rect x="55.8756%" y="661" width="2.2959%" height="15" fill="rgb(248,217,23)" fg:x="61500" fg:w="2527"/><text x="56.1256%" y="671.50">t..</text></g><g><title>tremor_runtime::connectors::source::build_events (1,316 samples, 1.20%)</title><rect x="56.9758%" y="645" width="1.1956%" height="15" fill="rgb(238,197,32)" fg:x="62711" fg:w="1316"/><text x="57.2258%" y="655.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (136 samples, 0.12%)</title><rect x="58.1715%" y="629" width="0.1236%" height="15" fill="rgb(236,106,1)" fg:x="64027" fg:w="136"/><text x="58.4215%" y="639.50"></text></g><g><title>[libc-2.31.so] (106 samples, 0.10%)</title><rect x="58.1987%" y="613" width="0.0963%" height="15" fill="rgb(219,228,13)" fg:x="64057" fg:w="106"/><text x="58.4487%" y="623.50"></text></g><g><title>[libc-2.31.so] (54 samples, 0.05%)</title><rect x="58.3822%" y="613" width="0.0491%" height="15" fill="rgb(238,30,35)" fg:x="64259" fg:w="54"/><text x="58.6322%" y="623.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (14 samples, 0.01%)</title><rect x="58.4477%" y="581" width="0.0127%" height="15" fill="rgb(236,70,23)" fg:x="64331" fg:w="14"/><text x="58.6977%" y="591.50"></text></g><g><title>[libc-2.31.so] (104 samples, 0.09%)</title><rect x="58.4604%" y="581" width="0.0945%" height="15" fill="rgb(249,104,48)" fg:x="64345" fg:w="104"/><text x="58.7104%" y="591.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (190 samples, 0.17%)</title><rect x="58.4404%" y="597" width="0.1726%" height="15" fill="rgb(254,117,50)" fg:x="64323" fg:w="190"/><text x="58.6904%" y="607.50"></text></g><g><title>alloc::alloc::exchange_malloc (64 samples, 0.06%)</title><rect x="58.5549%" y="581" width="0.0581%" height="15" fill="rgb(223,152,4)" fg:x="64449" fg:w="64"/><text x="58.8049%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (64 samples, 0.06%)</title><rect x="58.5549%" y="565" width="0.0581%" height="15" fill="rgb(245,6,2)" fg:x="64449" fg:w="64"/><text x="58.8049%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (64 samples, 0.06%)</title><rect x="58.5549%" y="549" width="0.0581%" height="15" fill="rgb(249,150,24)" fg:x="64449" fg:w="64"/><text x="58.8049%" y="559.50"></text></g><g><title>alloc::alloc::alloc (64 samples, 0.06%)</title><rect x="58.5549%" y="533" width="0.0581%" height="15" fill="rgb(228,185,42)" fg:x="64449" fg:w="64"/><text x="58.8049%" y="543.50"></text></g><g><title>__rg_alloc (64 samples, 0.06%)</title><rect x="58.5549%" y="517" width="0.0581%" height="15" fill="rgb(226,39,33)" fg:x="64449" fg:w="64"/><text x="58.8049%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (64 samples, 0.06%)</title><rect x="58.5549%" y="501" width="0.0581%" height="15" fill="rgb(221,166,19)" fg:x="64449" fg:w="64"/><text x="58.8049%" y="511.50"></text></g><g><title>sn_rust_alloc (62 samples, 0.06%)</title><rect x="58.5567%" y="485" width="0.0563%" height="15" fill="rgb(209,109,2)" fg:x="64451" fg:w="62"/><text x="58.8067%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (13 samples, 0.01%)</title><rect x="58.6012%" y="469" width="0.0118%" height="15" fill="rgb(252,216,26)" fg:x="64500" fg:w="13"/><text x="58.8512%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (257 samples, 0.23%)</title><rect x="58.4331%" y="613" width="0.2335%" height="15" fill="rgb(227,173,36)" fg:x="64315" fg:w="257"/><text x="58.6831%" y="623.50"></text></g><g><title>[libc-2.31.so] (59 samples, 0.05%)</title><rect x="58.6130%" y="597" width="0.0536%" height="15" fill="rgb(209,90,7)" fg:x="64513" fg:w="59"/><text x="58.8630%" y="607.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (414 samples, 0.38%)</title><rect x="58.2950%" y="629" width="0.3761%" height="15" fill="rgb(250,194,11)" fg:x="64163" fg:w="414"/><text x="58.5450%" y="639.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (10,536 samples, 9.57%)</title><rect x="49.1005%" y="901" width="9.5724%" height="15" fill="rgb(220,72,50)" fg:x="54043" fg:w="10536"/><text x="49.3505%" y="911.50">async_task::ra..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (10,530 samples, 9.57%)</title><rect x="49.1060%" y="885" width="9.5670%" height="15" fill="rgb(222,106,48)" fg:x="54049" fg:w="10530"/><text x="49.3560%" y="895.50">&lt;core::pin::Pi..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,530 samples, 9.57%)</title><rect x="49.1060%" y="869" width="9.5670%" height="15" fill="rgb(216,220,45)" fg:x="54049" fg:w="10530"/><text x="49.3560%" y="879.50">&lt;core::future:..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (10,530 samples, 9.57%)</title><rect x="49.1060%" y="853" width="9.5670%" height="15" fill="rgb(234,112,18)" fg:x="54049" fg:w="10530"/><text x="49.3560%" y="863.50">async_executor..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (10,530 samples, 9.57%)</title><rect x="49.1060%" y="837" width="9.5670%" height="15" fill="rgb(206,179,9)" fg:x="54049" fg:w="10530"/><text x="49.3560%" y="847.50">&lt;async_std::ta..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (10,530 samples, 9.57%)</title><rect x="49.1060%" y="821" width="9.5670%" height="15" fill="rgb(215,115,40)" fg:x="54049" fg:w="10530"/><text x="49.3560%" y="831.50">async_std::tas..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (10,530 samples, 9.57%)</title><rect x="49.1060%" y="805" width="9.5670%" height="15" fill="rgb(222,69,34)" fg:x="54049" fg:w="10530"/><text x="49.3560%" y="815.50">std::thread::l..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (10,530 samples, 9.57%)</title><rect x="49.1060%" y="789" width="9.5670%" height="15" fill="rgb(209,161,10)" fg:x="54049" fg:w="10530"/><text x="49.3560%" y="799.50">std::thread::l..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (10,530 samples, 9.57%)</title><rect x="49.1060%" y="773" width="9.5670%" height="15" fill="rgb(217,6,38)" fg:x="54049" fg:w="10530"/><text x="49.3560%" y="783.50">async_std::tas..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (10,530 samples, 9.57%)</title><rect x="49.1060%" y="757" width="9.5670%" height="15" fill="rgb(229,229,48)" fg:x="54049" fg:w="10530"/><text x="49.3560%" y="767.50">&lt;async_std::ta..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,530 samples, 9.57%)</title><rect x="49.1060%" y="741" width="9.5670%" height="15" fill="rgb(225,21,28)" fg:x="54049" fg:w="10530"/><text x="49.3560%" y="751.50">&lt;core::future:..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (552 samples, 0.50%)</title><rect x="58.1715%" y="725" width="0.5015%" height="15" fill="rgb(206,33,13)" fg:x="64027" fg:w="552"/><text x="58.4215%" y="735.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (552 samples, 0.50%)</title><rect x="58.1715%" y="709" width="0.5015%" height="15" fill="rgb(242,178,17)" fg:x="64027" fg:w="552"/><text x="58.4215%" y="719.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (552 samples, 0.50%)</title><rect x="58.1715%" y="693" width="0.5015%" height="15" fill="rgb(220,162,5)" fg:x="64027" fg:w="552"/><text x="58.4215%" y="703.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (552 samples, 0.50%)</title><rect x="58.1715%" y="677" width="0.5015%" height="15" fill="rgb(210,33,43)" fg:x="64027" fg:w="552"/><text x="58.4215%" y="687.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (552 samples, 0.50%)</title><rect x="58.1715%" y="661" width="0.5015%" height="15" fill="rgb(216,116,54)" fg:x="64027" fg:w="552"/><text x="58.4215%" y="671.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (552 samples, 0.50%)</title><rect x="58.1715%" y="645" width="0.5015%" height="15" fill="rgb(249,92,24)" fg:x="64027" fg:w="552"/><text x="58.4215%" y="655.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (29 samples, 0.03%)</title><rect x="58.6757%" y="901" width="0.0263%" height="15" fill="rgb(231,189,14)" fg:x="64582" fg:w="29"/><text x="58.9257%" y="911.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (12 samples, 0.01%)</title><rect x="58.7021%" y="901" width="0.0109%" height="15" fill="rgb(230,8,41)" fg:x="64611" fg:w="12"/><text x="58.9521%" y="911.50"></text></g><g><title>core::str::converts::from_utf8 (140 samples, 0.13%)</title><rect x="58.7411%" y="901" width="0.1272%" height="15" fill="rgb(249,7,27)" fg:x="64654" fg:w="140"/><text x="58.9911%" y="911.50"></text></g><g><title>event_listener::Event::notify (38 samples, 0.03%)</title><rect x="58.8701%" y="901" width="0.0345%" height="15" fill="rgb(232,86,5)" fg:x="64796" fg:w="38"/><text x="59.1201%" y="911.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (54 samples, 0.05%)</title><rect x="58.9074%" y="901" width="0.0491%" height="15" fill="rgb(224,175,18)" fg:x="64837" fg:w="54"/><text x="59.1574%" y="911.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (22 samples, 0.02%)</title><rect x="58.9574%" y="901" width="0.0200%" height="15" fill="rgb(220,129,12)" fg:x="64892" fg:w="22"/><text x="59.2074%" y="911.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (44 samples, 0.04%)</title><rect x="58.9773%" y="901" width="0.0400%" height="15" fill="rgb(210,19,36)" fg:x="64914" fg:w="44"/><text x="59.2273%" y="911.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::get_mut (17 samples, 0.02%)</title><rect x="59.0173%" y="901" width="0.0154%" height="15" fill="rgb(219,96,14)" fg:x="64958" fg:w="17"/><text x="59.2673%" y="911.50"></text></g><g><title>parking::Inner::park (17 samples, 0.02%)</title><rect x="59.0328%" y="901" width="0.0154%" height="15" fill="rgb(249,106,1)" fg:x="64975" fg:w="17"/><text x="59.2828%" y="911.50"></text></g><g><title>polling::epoll::Poller::wait (12 samples, 0.01%)</title><rect x="59.0500%" y="901" width="0.0109%" height="15" fill="rgb(249,155,20)" fg:x="64994" fg:w="12"/><text x="59.3000%" y="911.50"></text></g><g><title>rmp::encode::uint::write_uint (37 samples, 0.03%)</title><rect x="59.0609%" y="901" width="0.0336%" height="15" fill="rgb(244,168,9)" fg:x="65006" fg:w="37"/><text x="59.3109%" y="911.50"></text></g><g><title>sn_rust_alloc (76 samples, 0.07%)</title><rect x="59.1218%" y="901" width="0.0690%" height="15" fill="rgb(216,23,50)" fg:x="65073" fg:w="76"/><text x="59.3718%" y="911.50"></text></g><g><title>sn_rust_realloc (24 samples, 0.02%)</title><rect x="59.1927%" y="901" width="0.0218%" height="15" fill="rgb(224,219,20)" fg:x="65151" fg:w="24"/><text x="59.4427%" y="911.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (36 samples, 0.03%)</title><rect x="59.2254%" y="901" width="0.0327%" height="15" fill="rgb(222,156,15)" fg:x="65187" fg:w="36"/><text x="59.4754%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (24 samples, 0.02%)</title><rect x="59.4253%" y="453" width="0.0218%" height="15" fill="rgb(231,97,17)" fg:x="65407" fg:w="24"/><text x="59.6753%" y="463.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (24 samples, 0.02%)</title><rect x="59.4253%" y="437" width="0.0218%" height="15" fill="rgb(218,70,48)" fg:x="65407" fg:w="24"/><text x="59.6753%" y="447.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (24 samples, 0.02%)</title><rect x="59.4253%" y="421" width="0.0218%" height="15" fill="rgb(212,196,52)" fg:x="65407" fg:w="24"/><text x="59.6753%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (42 samples, 0.04%)</title><rect x="59.4725%" y="421" width="0.0382%" height="15" fill="rgb(243,203,18)" fg:x="65459" fg:w="42"/><text x="59.7225%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (42 samples, 0.04%)</title><rect x="59.4725%" y="405" width="0.0382%" height="15" fill="rgb(252,125,41)" fg:x="65459" fg:w="42"/><text x="59.7225%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (33 samples, 0.03%)</title><rect x="59.4807%" y="389" width="0.0300%" height="15" fill="rgb(223,180,33)" fg:x="65468" fg:w="33"/><text x="59.7307%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (33 samples, 0.03%)</title><rect x="59.4807%" y="373" width="0.0300%" height="15" fill="rgb(254,159,46)" fg:x="65468" fg:w="33"/><text x="59.7307%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (33 samples, 0.03%)</title><rect x="59.4807%" y="357" width="0.0300%" height="15" fill="rgb(254,38,10)" fg:x="65468" fg:w="33"/><text x="59.7307%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (33 samples, 0.03%)</title><rect x="59.4807%" y="341" width="0.0300%" height="15" fill="rgb(208,217,32)" fg:x="65468" fg:w="33"/><text x="59.7307%" y="351.50"></text></g><g><title>alloc::alloc::alloc (33 samples, 0.03%)</title><rect x="59.4807%" y="325" width="0.0300%" height="15" fill="rgb(221,120,13)" fg:x="65468" fg:w="33"/><text x="59.7307%" y="335.50"></text></g><g><title>__rg_alloc (33 samples, 0.03%)</title><rect x="59.4807%" y="309" width="0.0300%" height="15" fill="rgb(246,54,52)" fg:x="65468" fg:w="33"/><text x="59.7307%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (33 samples, 0.03%)</title><rect x="59.4807%" y="293" width="0.0300%" height="15" fill="rgb(242,34,25)" fg:x="65468" fg:w="33"/><text x="59.7307%" y="303.50"></text></g><g><title>sn_rust_alloc (31 samples, 0.03%)</title><rect x="59.4825%" y="277" width="0.0282%" height="15" fill="rgb(247,209,9)" fg:x="65470" fg:w="31"/><text x="59.7325%" y="287.50"></text></g><g><title>&lt;tremor_runtime::codec::msgpack::MsgPack as tremor_runtime::codec::Codec&gt;::encode (68 samples, 0.06%)</title><rect x="59.4552%" y="453" width="0.0618%" height="15" fill="rgb(228,71,26)" fg:x="65440" fg:w="68"/><text x="59.7052%" y="463.50"></text></g><g><title>rmp_serde::encode::to_vec (58 samples, 0.05%)</title><rect x="59.4643%" y="437" width="0.0527%" height="15" fill="rgb(222,145,49)" fg:x="65450" fg:w="58"/><text x="59.7143%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (35 samples, 0.03%)</title><rect x="59.6061%" y="181" width="0.0318%" height="15" fill="rgb(218,121,17)" fg:x="65606" fg:w="35"/><text x="59.8561%" y="191.50"></text></g><g><title>alloc::alloc::dealloc (35 samples, 0.03%)</title><rect x="59.6061%" y="165" width="0.0318%" height="15" fill="rgb(244,50,7)" fg:x="65606" fg:w="35"/><text x="59.8561%" y="175.50"></text></g><g><title>__rg_dealloc (35 samples, 0.03%)</title><rect x="59.6061%" y="149" width="0.0318%" height="15" fill="rgb(246,229,37)" fg:x="65606" fg:w="35"/><text x="59.8561%" y="159.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (35 samples, 0.03%)</title><rect x="59.6061%" y="133" width="0.0318%" height="15" fill="rgb(225,18,5)" fg:x="65606" fg:w="35"/><text x="59.8561%" y="143.50"></text></g><g><title>sn_rust_dealloc (31 samples, 0.03%)</title><rect x="59.6097%" y="117" width="0.0282%" height="15" fill="rgb(213,204,8)" fg:x="65610" fg:w="31"/><text x="59.8597%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (45 samples, 0.04%)</title><rect x="59.5997%" y="277" width="0.0409%" height="15" fill="rgb(238,103,6)" fg:x="65599" fg:w="45"/><text x="59.8497%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (45 samples, 0.04%)</title><rect x="59.5997%" y="261" width="0.0409%" height="15" fill="rgb(222,25,35)" fg:x="65599" fg:w="45"/><text x="59.8497%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (38 samples, 0.03%)</title><rect x="59.6061%" y="245" width="0.0345%" height="15" fill="rgb(213,203,35)" fg:x="65606" fg:w="38"/><text x="59.8561%" y="255.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 0.03%)</title><rect x="59.6061%" y="229" width="0.0345%" height="15" fill="rgb(221,79,53)" fg:x="65606" fg:w="38"/><text x="59.8561%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (38 samples, 0.03%)</title><rect x="59.6061%" y="213" width="0.0345%" height="15" fill="rgb(243,200,35)" fg:x="65606" fg:w="38"/><text x="59.8561%" y="223.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 0.03%)</title><rect x="59.6061%" y="197" width="0.0345%" height="15" fill="rgb(248,60,25)" fg:x="65606" fg:w="38"/><text x="59.8561%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (60 samples, 0.05%)</title><rect x="59.5879%" y="325" width="0.0545%" height="15" fill="rgb(227,53,46)" fg:x="65586" fg:w="60"/><text x="59.8379%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (57 samples, 0.05%)</title><rect x="59.5906%" y="309" width="0.0518%" height="15" fill="rgb(216,120,32)" fg:x="65589" fg:w="57"/><text x="59.8406%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (57 samples, 0.05%)</title><rect x="59.5906%" y="293" width="0.0518%" height="15" fill="rgb(220,134,1)" fg:x="65589" fg:w="57"/><text x="59.8406%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (79 samples, 0.07%)</title><rect x="59.5752%" y="341" width="0.0718%" height="15" fill="rgb(237,168,5)" fg:x="65572" fg:w="79"/><text x="59.8252%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (37 samples, 0.03%)</title><rect x="59.6469%" y="341" width="0.0336%" height="15" fill="rgb(231,100,33)" fg:x="65651" fg:w="37"/><text x="59.8969%" y="351.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (26 samples, 0.02%)</title><rect x="59.6569%" y="325" width="0.0236%" height="15" fill="rgb(236,177,47)" fg:x="65662" fg:w="26"/><text x="59.9069%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (26 samples, 0.02%)</title><rect x="59.6569%" y="309" width="0.0236%" height="15" fill="rgb(235,7,49)" fg:x="65662" fg:w="26"/><text x="59.9069%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (115 samples, 0.10%)</title><rect x="59.6860%" y="277" width="0.1045%" height="15" fill="rgb(232,119,22)" fg:x="65694" fg:w="115"/><text x="59.9360%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (115 samples, 0.10%)</title><rect x="59.6860%" y="261" width="0.1045%" height="15" fill="rgb(254,73,53)" fg:x="65694" fg:w="115"/><text x="59.9360%" y="271.50"></text></g><g><title>alloc::alloc::alloc (110 samples, 0.10%)</title><rect x="59.6905%" y="245" width="0.0999%" height="15" fill="rgb(251,35,20)" fg:x="65699" fg:w="110"/><text x="59.9405%" y="255.50"></text></g><g><title>__rg_alloc (110 samples, 0.10%)</title><rect x="59.6905%" y="229" width="0.0999%" height="15" fill="rgb(241,119,20)" fg:x="65699" fg:w="110"/><text x="59.9405%" y="239.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (110 samples, 0.10%)</title><rect x="59.6905%" y="213" width="0.0999%" height="15" fill="rgb(207,102,14)" fg:x="65699" fg:w="110"/><text x="59.9405%" y="223.50"></text></g><g><title>sn_rust_alloc (103 samples, 0.09%)</title><rect x="59.6969%" y="197" width="0.0936%" height="15" fill="rgb(248,201,50)" fg:x="65706" fg:w="103"/><text x="59.9469%" y="207.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (575 samples, 0.52%)</title><rect x="59.2708%" y="773" width="0.5224%" height="15" fill="rgb(222,185,44)" fg:x="65237" fg:w="575"/><text x="59.5208%" y="783.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (575 samples, 0.52%)</title><rect x="59.2708%" y="757" width="0.5224%" height="15" fill="rgb(218,107,18)" fg:x="65237" fg:w="575"/><text x="59.5208%" y="767.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (575 samples, 0.52%)</title><rect x="59.2708%" y="741" width="0.5224%" height="15" fill="rgb(237,177,39)" fg:x="65237" fg:w="575"/><text x="59.5208%" y="751.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (575 samples, 0.52%)</title><rect x="59.2708%" y="725" width="0.5224%" height="15" fill="rgb(246,69,6)" fg:x="65237" fg:w="575"/><text x="59.5208%" y="735.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (575 samples, 0.52%)</title><rect x="59.2708%" y="709" width="0.5224%" height="15" fill="rgb(234,208,37)" fg:x="65237" fg:w="575"/><text x="59.5208%" y="719.50"></text></g><g><title>std::panic::catch_unwind (575 samples, 0.52%)</title><rect x="59.2708%" y="693" width="0.5224%" height="15" fill="rgb(225,4,6)" fg:x="65237" fg:w="575"/><text x="59.5208%" y="703.50"></text></g><g><title>std::panicking::try (575 samples, 0.52%)</title><rect x="59.2708%" y="677" width="0.5224%" height="15" fill="rgb(233,45,0)" fg:x="65237" fg:w="575"/><text x="59.5208%" y="687.50"></text></g><g><title>std::panicking::try::do_call (575 samples, 0.52%)</title><rect x="59.2708%" y="661" width="0.5224%" height="15" fill="rgb(226,136,5)" fg:x="65237" fg:w="575"/><text x="59.5208%" y="671.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (575 samples, 0.52%)</title><rect x="59.2708%" y="645" width="0.5224%" height="15" fill="rgb(211,91,47)" fg:x="65237" fg:w="575"/><text x="59.5208%" y="655.50"></text></g><g><title>core::ops::function::FnOnce::call_once (575 samples, 0.52%)</title><rect x="59.2708%" y="629" width="0.5224%" height="15" fill="rgb(242,88,51)" fg:x="65237" fg:w="575"/><text x="59.5208%" y="639.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (575 samples, 0.52%)</title><rect x="59.2708%" y="613" width="0.5224%" height="15" fill="rgb(230,91,28)" fg:x="65237" fg:w="575"/><text x="59.5208%" y="623.50"></text></g><g><title>async_ffi::FfiContext::with_context (575 samples, 0.52%)</title><rect x="59.2708%" y="597" width="0.5224%" height="15" fill="rgb(254,186,29)" fg:x="65237" fg:w="575"/><text x="59.5208%" y="607.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (575 samples, 0.52%)</title><rect x="59.2708%" y="581" width="0.5224%" height="15" fill="rgb(238,6,4)" fg:x="65237" fg:w="575"/><text x="59.5208%" y="591.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (575 samples, 0.52%)</title><rect x="59.2708%" y="565" width="0.5224%" height="15" fill="rgb(221,151,16)" fg:x="65237" fg:w="575"/><text x="59.5208%" y="575.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (575 samples, 0.52%)</title><rect x="59.2708%" y="549" width="0.5224%" height="15" fill="rgb(251,143,52)" fg:x="65237" fg:w="575"/><text x="59.5208%" y="559.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (575 samples, 0.52%)</title><rect x="59.2708%" y="533" width="0.5224%" height="15" fill="rgb(206,90,15)" fg:x="65237" fg:w="575"/><text x="59.5208%" y="543.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (575 samples, 0.52%)</title><rect x="59.2708%" y="517" width="0.5224%" height="15" fill="rgb(218,35,8)" fg:x="65237" fg:w="575"/><text x="59.5208%" y="527.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (575 samples, 0.52%)</title><rect x="59.2708%" y="501" width="0.5224%" height="15" fill="rgb(239,215,6)" fg:x="65237" fg:w="575"/><text x="59.5208%" y="511.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (575 samples, 0.52%)</title><rect x="59.2708%" y="485" width="0.5224%" height="15" fill="rgb(245,116,39)" fg:x="65237" fg:w="575"/><text x="59.5208%" y="495.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (575 samples, 0.52%)</title><rect x="59.2708%" y="469" width="0.5224%" height="15" fill="rgb(242,65,28)" fg:x="65237" fg:w="575"/><text x="59.5208%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (304 samples, 0.28%)</title><rect x="59.5170%" y="453" width="0.2762%" height="15" fill="rgb(252,132,53)" fg:x="65508" fg:w="304"/><text x="59.7670%" y="463.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::iter::traits::collect::FromIterator&lt;T&gt; for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::from_iter (304 samples, 0.28%)</title><rect x="59.5170%" y="437" width="0.2762%" height="15" fill="rgb(224,159,50)" fg:x="65508" fg:w="304"/><text x="59.7670%" y="447.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (304 samples, 0.28%)</title><rect x="59.5170%" y="421" width="0.2762%" height="15" fill="rgb(224,93,4)" fg:x="65508" fg:w="304"/><text x="59.7670%" y="431.50"></text></g><g><title>core::ops::function::FnOnce::call_once (302 samples, 0.27%)</title><rect x="59.5188%" y="405" width="0.2744%" height="15" fill="rgb(208,81,34)" fg:x="65510" fg:w="302"/><text x="59.7688%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (302 samples, 0.27%)</title><rect x="59.5188%" y="389" width="0.2744%" height="15" fill="rgb(233,92,54)" fg:x="65510" fg:w="302"/><text x="59.7688%" y="399.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (297 samples, 0.27%)</title><rect x="59.5234%" y="373" width="0.2698%" height="15" fill="rgb(237,21,14)" fg:x="65515" fg:w="297"/><text x="59.7734%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (244 samples, 0.22%)</title><rect x="59.5715%" y="357" width="0.2217%" height="15" fill="rgb(249,128,51)" fg:x="65568" fg:w="244"/><text x="59.8215%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (124 samples, 0.11%)</title><rect x="59.6806%" y="341" width="0.1127%" height="15" fill="rgb(223,129,24)" fg:x="65688" fg:w="124"/><text x="59.9306%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (124 samples, 0.11%)</title><rect x="59.6806%" y="325" width="0.1127%" height="15" fill="rgb(231,168,25)" fg:x="65688" fg:w="124"/><text x="59.9306%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (123 samples, 0.11%)</title><rect x="59.6815%" y="309" width="0.1118%" height="15" fill="rgb(224,39,20)" fg:x="65689" fg:w="123"/><text x="59.9315%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (123 samples, 0.11%)</title><rect x="59.6815%" y="293" width="0.1118%" height="15" fill="rgb(225,152,53)" fg:x="65689" fg:w="123"/><text x="59.9315%" y="303.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (576 samples, 0.52%)</title><rect x="59.2708%" y="821" width="0.5233%" height="15" fill="rgb(252,17,24)" fg:x="65237" fg:w="576"/><text x="59.5208%" y="831.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (576 samples, 0.52%)</title><rect x="59.2708%" y="805" width="0.5233%" height="15" fill="rgb(250,114,30)" fg:x="65237" fg:w="576"/><text x="59.5208%" y="815.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (576 samples, 0.52%)</title><rect x="59.2708%" y="789" width="0.5233%" height="15" fill="rgb(229,5,4)" fg:x="65237" fg:w="576"/><text x="59.5208%" y="799.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (47 samples, 0.04%)</title><rect x="60.0313%" y="469" width="0.0427%" height="15" fill="rgb(225,176,49)" fg:x="66074" fg:w="47"/><text x="60.2813%" y="479.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::default::Default&gt;::default (88 samples, 0.08%)</title><rect x="59.9958%" y="693" width="0.0800%" height="15" fill="rgb(224,221,49)" fg:x="66035" fg:w="88"/><text x="60.2458%" y="703.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (80 samples, 0.07%)</title><rect x="60.0031%" y="677" width="0.0727%" height="15" fill="rgb(253,169,27)" fg:x="66043" fg:w="80"/><text x="60.2531%" y="687.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (80 samples, 0.07%)</title><rect x="60.0031%" y="661" width="0.0727%" height="15" fill="rgb(211,206,16)" fg:x="66043" fg:w="80"/><text x="60.2531%" y="671.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (80 samples, 0.07%)</title><rect x="60.0031%" y="645" width="0.0727%" height="15" fill="rgb(244,87,35)" fg:x="66043" fg:w="80"/><text x="60.2531%" y="655.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (80 samples, 0.07%)</title><rect x="60.0031%" y="629" width="0.0727%" height="15" fill="rgb(246,28,10)" fg:x="66043" fg:w="80"/><text x="60.2531%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (80 samples, 0.07%)</title><rect x="60.0031%" y="613" width="0.0727%" height="15" fill="rgb(229,12,44)" fg:x="66043" fg:w="80"/><text x="60.2531%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (76 samples, 0.07%)</title><rect x="60.0067%" y="597" width="0.0690%" height="15" fill="rgb(210,145,37)" fg:x="66047" fg:w="76"/><text x="60.2567%" y="607.50"></text></g><g><title>alloc::alloc::exchange_malloc (72 samples, 0.07%)</title><rect x="60.0104%" y="581" width="0.0654%" height="15" fill="rgb(227,112,52)" fg:x="66051" fg:w="72"/><text x="60.2604%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (72 samples, 0.07%)</title><rect x="60.0104%" y="565" width="0.0654%" height="15" fill="rgb(238,155,34)" fg:x="66051" fg:w="72"/><text x="60.2604%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (72 samples, 0.07%)</title><rect x="60.0104%" y="549" width="0.0654%" height="15" fill="rgb(239,226,36)" fg:x="66051" fg:w="72"/><text x="60.2604%" y="559.50"></text></g><g><title>alloc::alloc::alloc (72 samples, 0.07%)</title><rect x="60.0104%" y="533" width="0.0654%" height="15" fill="rgb(230,16,23)" fg:x="66051" fg:w="72"/><text x="60.2604%" y="543.50"></text></g><g><title>__rg_alloc (72 samples, 0.07%)</title><rect x="60.0104%" y="517" width="0.0654%" height="15" fill="rgb(236,171,36)" fg:x="66051" fg:w="72"/><text x="60.2604%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (72 samples, 0.07%)</title><rect x="60.0104%" y="501" width="0.0654%" height="15" fill="rgb(221,22,14)" fg:x="66051" fg:w="72"/><text x="60.2604%" y="511.50"></text></g><g><title>sn_rust_alloc (65 samples, 0.06%)</title><rect x="60.0167%" y="485" width="0.0591%" height="15" fill="rgb(242,43,11)" fg:x="66058" fg:w="65"/><text x="60.2667%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (191 samples, 0.17%)</title><rect x="60.2239%" y="453" width="0.1735%" height="15" fill="rgb(232,69,23)" fg:x="66286" fg:w="191"/><text x="60.4739%" y="463.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (291 samples, 0.26%)</title><rect x="60.1385%" y="613" width="0.2644%" height="15" fill="rgb(216,180,54)" fg:x="66192" fg:w="291"/><text x="60.3885%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (291 samples, 0.26%)</title><rect x="60.1385%" y="597" width="0.2644%" height="15" fill="rgb(216,5,24)" fg:x="66192" fg:w="291"/><text x="60.3885%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (282 samples, 0.26%)</title><rect x="60.1466%" y="581" width="0.2562%" height="15" fill="rgb(225,89,9)" fg:x="66201" fg:w="282"/><text x="60.3966%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (277 samples, 0.25%)</title><rect x="60.1512%" y="565" width="0.2517%" height="15" fill="rgb(243,75,33)" fg:x="66206" fg:w="277"/><text x="60.4012%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (272 samples, 0.25%)</title><rect x="60.1557%" y="549" width="0.2471%" height="15" fill="rgb(247,141,45)" fg:x="66211" fg:w="272"/><text x="60.4057%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (272 samples, 0.25%)</title><rect x="60.1557%" y="533" width="0.2471%" height="15" fill="rgb(232,177,36)" fg:x="66211" fg:w="272"/><text x="60.4057%" y="543.50"></text></g><g><title>alloc::alloc::alloc (272 samples, 0.25%)</title><rect x="60.1557%" y="517" width="0.2471%" height="15" fill="rgb(219,125,36)" fg:x="66211" fg:w="272"/><text x="60.4057%" y="527.50"></text></g><g><title>__rg_alloc (272 samples, 0.25%)</title><rect x="60.1557%" y="501" width="0.2471%" height="15" fill="rgb(227,94,9)" fg:x="66211" fg:w="272"/><text x="60.4057%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (272 samples, 0.25%)</title><rect x="60.1557%" y="485" width="0.2471%" height="15" fill="rgb(240,34,52)" fg:x="66211" fg:w="272"/><text x="60.4057%" y="495.50"></text></g><g><title>sn_rust_alloc (269 samples, 0.24%)</title><rect x="60.1585%" y="469" width="0.2444%" height="15" fill="rgb(216,45,12)" fg:x="66214" fg:w="269"/><text x="60.4085%" y="479.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (314 samples, 0.29%)</title><rect x="60.1248%" y="629" width="0.2853%" height="15" fill="rgb(246,21,19)" fg:x="66177" fg:w="314"/><text x="60.3748%" y="639.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (649 samples, 0.59%)</title><rect x="60.0767%" y="677" width="0.5896%" height="15" fill="rgb(213,98,42)" fg:x="66124" fg:w="649"/><text x="60.3267%" y="687.50"></text></g><g><title>value_trait::Builder::object (602 samples, 0.55%)</title><rect x="60.1194%" y="661" width="0.5469%" height="15" fill="rgb(250,136,47)" fg:x="66171" fg:w="602"/><text x="60.3694%" y="671.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (602 samples, 0.55%)</title><rect x="60.1194%" y="645" width="0.5469%" height="15" fill="rgb(251,124,27)" fg:x="66171" fg:w="602"/><text x="60.3694%" y="655.50"></text></g><g><title>tremor_value::value::Value::Object (282 samples, 0.26%)</title><rect x="60.4101%" y="629" width="0.2562%" height="15" fill="rgb(229,180,14)" fg:x="66491" fg:w="282"/><text x="60.6601%" y="639.50"></text></g><g><title>&lt;tremor_pipeline::event::Event as core::default::Default&gt;::default (769 samples, 0.70%)</title><rect x="59.9686%" y="709" width="0.6987%" height="15" fill="rgb(245,216,25)" fg:x="66005" fg:w="769"/><text x="60.2186%" y="719.50"></text></g><g><title>&lt;tremor_script::srs::EventPayload as core::default::Default&gt;::default (651 samples, 0.59%)</title><rect x="60.0758%" y="693" width="0.5915%" height="15" fill="rgb(251,43,5)" fg:x="66123" fg:w="651"/><text x="60.3258%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (23 samples, 0.02%)</title><rect x="60.6899%" y="693" width="0.0209%" height="15" fill="rgb(250,128,24)" fg:x="66799" fg:w="23"/><text x="60.9399%" y="703.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (23 samples, 0.02%)</title><rect x="60.6899%" y="677" width="0.0209%" height="15" fill="rgb(217,117,27)" fg:x="66799" fg:w="23"/><text x="60.9399%" y="687.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (20 samples, 0.02%)</title><rect x="60.6927%" y="661" width="0.0182%" height="15" fill="rgb(245,147,4)" fg:x="66802" fg:w="20"/><text x="60.9427%" y="671.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (20 samples, 0.02%)</title><rect x="60.6927%" y="645" width="0.0182%" height="15" fill="rgb(242,201,35)" fg:x="66802" fg:w="20"/><text x="60.9427%" y="655.50"></text></g><g><title>core::mem::drop (12 samples, 0.01%)</title><rect x="60.6999%" y="629" width="0.0109%" height="15" fill="rgb(218,181,1)" fg:x="66810" fg:w="12"/><text x="60.9499%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (12 samples, 0.01%)</title><rect x="60.6999%" y="613" width="0.0109%" height="15" fill="rgb(222,6,29)" fg:x="66810" fg:w="12"/><text x="60.9499%" y="623.50"></text></g><g><title>sn_rust_dealloc (26 samples, 0.02%)</title><rect x="60.7336%" y="613" width="0.0236%" height="15" fill="rgb(208,186,3)" fg:x="66847" fg:w="26"/><text x="60.9836%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (52 samples, 0.05%)</title><rect x="60.7108%" y="693" width="0.0472%" height="15" fill="rgb(216,36,26)" fg:x="66822" fg:w="52"/><text x="60.9608%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (52 samples, 0.05%)</title><rect x="60.7108%" y="677" width="0.0472%" height="15" fill="rgb(248,201,23)" fg:x="66822" fg:w="52"/><text x="60.9608%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (40 samples, 0.04%)</title><rect x="60.7217%" y="661" width="0.0363%" height="15" fill="rgb(251,170,31)" fg:x="66834" fg:w="40"/><text x="60.9717%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (40 samples, 0.04%)</title><rect x="60.7217%" y="645" width="0.0363%" height="15" fill="rgb(207,110,25)" fg:x="66834" fg:w="40"/><text x="60.9717%" y="655.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (40 samples, 0.04%)</title><rect x="60.7217%" y="629" width="0.0363%" height="15" fill="rgb(250,54,15)" fg:x="66834" fg:w="40"/><text x="60.9717%" y="639.50"></text></g><g><title>sn_rust_dealloc (12 samples, 0.01%)</title><rect x="60.7581%" y="693" width="0.0109%" height="15" fill="rgb(227,68,33)" fg:x="66874" fg:w="12"/><text x="61.0081%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (101 samples, 0.09%)</title><rect x="60.6809%" y="709" width="0.0918%" height="15" fill="rgb(238,34,41)" fg:x="66789" fg:w="101"/><text x="60.9309%" y="719.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (1,083 samples, 0.98%)</title><rect x="59.7950%" y="725" width="0.9840%" height="15" fill="rgb(220,11,15)" fg:x="65814" fg:w="1083"/><text x="60.0450%" y="735.50"></text></g><g><title>alloc::alloc::exchange_malloc (29 samples, 0.03%)</title><rect x="60.7935%" y="709" width="0.0263%" height="15" fill="rgb(246,111,35)" fg:x="66913" fg:w="29"/><text x="61.0435%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (29 samples, 0.03%)</title><rect x="60.7935%" y="693" width="0.0263%" height="15" fill="rgb(209,88,53)" fg:x="66913" fg:w="29"/><text x="61.0435%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (29 samples, 0.03%)</title><rect x="60.7935%" y="677" width="0.0263%" height="15" fill="rgb(231,185,47)" fg:x="66913" fg:w="29"/><text x="61.0435%" y="687.50"></text></g><g><title>alloc::alloc::alloc (29 samples, 0.03%)</title><rect x="60.7935%" y="661" width="0.0263%" height="15" fill="rgb(233,154,1)" fg:x="66913" fg:w="29"/><text x="61.0435%" y="671.50"></text></g><g><title>__rg_alloc (29 samples, 0.03%)</title><rect x="60.7935%" y="645" width="0.0263%" height="15" fill="rgb(225,15,46)" fg:x="66913" fg:w="29"/><text x="61.0435%" y="655.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (29 samples, 0.03%)</title><rect x="60.7935%" y="629" width="0.0263%" height="15" fill="rgb(211,135,41)" fg:x="66913" fg:w="29"/><text x="61.0435%" y="639.50"></text></g><g><title>sn_rust_alloc (26 samples, 0.02%)</title><rect x="60.7962%" y="613" width="0.0236%" height="15" fill="rgb(208,54,0)" fg:x="66916" fg:w="26"/><text x="61.0462%" y="623.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (50 samples, 0.05%)</title><rect x="60.7790%" y="725" width="0.0454%" height="15" fill="rgb(244,136,14)" fg:x="66897" fg:w="50"/><text x="61.0290%" y="735.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (56 samples, 0.05%)</title><rect x="60.9462%" y="709" width="0.0509%" height="15" fill="rgb(241,56,14)" fg:x="67081" fg:w="56"/><text x="61.1962%" y="719.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::new (41 samples, 0.04%)</title><rect x="60.9970%" y="709" width="0.0373%" height="15" fill="rgb(205,80,24)" fg:x="67137" fg:w="41"/><text x="61.2470%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (40 samples, 0.04%)</title><rect x="60.9979%" y="693" width="0.0363%" height="15" fill="rgb(220,57,4)" fg:x="67138" fg:w="40"/><text x="61.2479%" y="703.50"></text></g><g><title>alloc::alloc::exchange_malloc (35 samples, 0.03%)</title><rect x="61.0025%" y="677" width="0.0318%" height="15" fill="rgb(226,193,50)" fg:x="67143" fg:w="35"/><text x="61.2525%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (35 samples, 0.03%)</title><rect x="61.0025%" y="661" width="0.0318%" height="15" fill="rgb(231,168,22)" fg:x="67143" fg:w="35"/><text x="61.2525%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (35 samples, 0.03%)</title><rect x="61.0025%" y="645" width="0.0318%" height="15" fill="rgb(254,215,14)" fg:x="67143" fg:w="35"/><text x="61.2525%" y="655.50"></text></g><g><title>alloc::alloc::alloc (34 samples, 0.03%)</title><rect x="61.0034%" y="629" width="0.0309%" height="15" fill="rgb(211,115,16)" fg:x="67144" fg:w="34"/><text x="61.2534%" y="639.50"></text></g><g><title>__rg_alloc (34 samples, 0.03%)</title><rect x="61.0034%" y="613" width="0.0309%" height="15" fill="rgb(236,210,16)" fg:x="67144" fg:w="34"/><text x="61.2534%" y="623.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (34 samples, 0.03%)</title><rect x="61.0034%" y="597" width="0.0309%" height="15" fill="rgb(221,94,12)" fg:x="67144" fg:w="34"/><text x="61.2534%" y="607.50"></text></g><g><title>sn_rust_alloc (30 samples, 0.03%)</title><rect x="61.0070%" y="581" width="0.0273%" height="15" fill="rgb(235,218,49)" fg:x="67148" fg:w="30"/><text x="61.2570%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (22 samples, 0.02%)</title><rect x="61.0143%" y="565" width="0.0200%" height="15" fill="rgb(217,114,14)" fg:x="67156" fg:w="22"/><text x="61.2643%" y="575.50"></text></g><g><title>alloc::alloc::exchange_malloc (29 samples, 0.03%)</title><rect x="61.0343%" y="709" width="0.0263%" height="15" fill="rgb(216,145,22)" fg:x="67178" fg:w="29"/><text x="61.2843%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (29 samples, 0.03%)</title><rect x="61.0343%" y="693" width="0.0263%" height="15" fill="rgb(217,112,39)" fg:x="67178" fg:w="29"/><text x="61.2843%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (29 samples, 0.03%)</title><rect x="61.0343%" y="677" width="0.0263%" height="15" fill="rgb(225,85,32)" fg:x="67178" fg:w="29"/><text x="61.2843%" y="687.50"></text></g><g><title>alloc::alloc::alloc (25 samples, 0.02%)</title><rect x="61.0379%" y="661" width="0.0227%" height="15" fill="rgb(245,209,47)" fg:x="67182" fg:w="25"/><text x="61.2879%" y="671.50"></text></g><g><title>__rg_alloc (25 samples, 0.02%)</title><rect x="61.0379%" y="645" width="0.0227%" height="15" fill="rgb(218,220,15)" fg:x="67182" fg:w="25"/><text x="61.2879%" y="655.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (25 samples, 0.02%)</title><rect x="61.0379%" y="629" width="0.0227%" height="15" fill="rgb(222,202,31)" fg:x="67182" fg:w="25"/><text x="61.2879%" y="639.50"></text></g><g><title>sn_rust_alloc (21 samples, 0.02%)</title><rect x="61.0416%" y="613" width="0.0191%" height="15" fill="rgb(243,203,4)" fg:x="67186" fg:w="21"/><text x="61.2916%" y="623.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (41 samples, 0.04%)</title><rect x="61.2196%" y="581" width="0.0373%" height="15" fill="rgb(237,92,17)" fg:x="67382" fg:w="41"/><text x="61.4696%" y="591.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (37 samples, 0.03%)</title><rect x="61.2233%" y="565" width="0.0336%" height="15" fill="rgb(231,119,7)" fg:x="67386" fg:w="37"/><text x="61.4733%" y="575.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (37 samples, 0.03%)</title><rect x="61.2233%" y="549" width="0.0336%" height="15" fill="rgb(237,82,41)" fg:x="67386" fg:w="37"/><text x="61.4733%" y="559.50"></text></g><g><title>alloc::alloc::exchange_malloc (35 samples, 0.03%)</title><rect x="61.2251%" y="533" width="0.0318%" height="15" fill="rgb(226,81,48)" fg:x="67388" fg:w="35"/><text x="61.4751%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (35 samples, 0.03%)</title><rect x="61.2251%" y="517" width="0.0318%" height="15" fill="rgb(234,70,51)" fg:x="67388" fg:w="35"/><text x="61.4751%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (35 samples, 0.03%)</title><rect x="61.2251%" y="501" width="0.0318%" height="15" fill="rgb(251,86,4)" fg:x="67388" fg:w="35"/><text x="61.4751%" y="511.50"></text></g><g><title>alloc::alloc::alloc (35 samples, 0.03%)</title><rect x="61.2251%" y="485" width="0.0318%" height="15" fill="rgb(244,144,28)" fg:x="67388" fg:w="35"/><text x="61.4751%" y="495.50"></text></g><g><title>__rg_alloc (35 samples, 0.03%)</title><rect x="61.2251%" y="469" width="0.0318%" height="15" fill="rgb(232,161,39)" fg:x="67388" fg:w="35"/><text x="61.4751%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (35 samples, 0.03%)</title><rect x="61.2251%" y="453" width="0.0318%" height="15" fill="rgb(247,34,51)" fg:x="67388" fg:w="35"/><text x="61.4751%" y="463.50"></text></g><g><title>sn_rust_alloc (34 samples, 0.03%)</title><rect x="61.2260%" y="437" width="0.0309%" height="15" fill="rgb(225,132,2)" fg:x="67389" fg:w="34"/><text x="61.4760%" y="447.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (18 samples, 0.02%)</title><rect x="61.2405%" y="421" width="0.0164%" height="15" fill="rgb(209,159,44)" fg:x="67405" fg:w="18"/><text x="61.4905%" y="431.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (83 samples, 0.08%)</title><rect x="61.1878%" y="693" width="0.0754%" height="15" fill="rgb(251,214,1)" fg:x="67347" fg:w="83"/><text x="61.4378%" y="703.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (57 samples, 0.05%)</title><rect x="61.2115%" y="677" width="0.0518%" height="15" fill="rgb(247,84,47)" fg:x="67373" fg:w="57"/><text x="61.4615%" y="687.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (57 samples, 0.05%)</title><rect x="61.2115%" y="661" width="0.0518%" height="15" fill="rgb(240,111,43)" fg:x="67373" fg:w="57"/><text x="61.4615%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (51 samples, 0.05%)</title><rect x="61.2169%" y="645" width="0.0463%" height="15" fill="rgb(215,214,35)" fg:x="67379" fg:w="51"/><text x="61.4669%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (49 samples, 0.04%)</title><rect x="61.2187%" y="629" width="0.0445%" height="15" fill="rgb(248,207,23)" fg:x="67381" fg:w="49"/><text x="61.4687%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (48 samples, 0.04%)</title><rect x="61.2196%" y="613" width="0.0436%" height="15" fill="rgb(214,186,4)" fg:x="67382" fg:w="48"/><text x="61.4696%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (48 samples, 0.04%)</title><rect x="61.2196%" y="597" width="0.0436%" height="15" fill="rgb(220,133,22)" fg:x="67382" fg:w="48"/><text x="61.4696%" y="607.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,749 samples, 1.59%)</title><rect x="59.7941%" y="805" width="1.5890%" height="15" fill="rgb(239,134,19)" fg:x="65813" fg:w="1749"/><text x="60.0441%" y="815.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (1,749 samples, 1.59%)</title><rect x="59.7941%" y="789" width="1.5890%" height="15" fill="rgb(250,140,9)" fg:x="65813" fg:w="1749"/><text x="60.0441%" y="799.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,749 samples, 1.59%)</title><rect x="59.7941%" y="773" width="1.5890%" height="15" fill="rgb(225,59,14)" fg:x="65813" fg:w="1749"/><text x="60.0441%" y="783.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (1,749 samples, 1.59%)</title><rect x="59.7941%" y="757" width="1.5890%" height="15" fill="rgb(214,152,51)" fg:x="65813" fg:w="1749"/><text x="60.0441%" y="767.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (1,748 samples, 1.59%)</title><rect x="59.7950%" y="741" width="1.5881%" height="15" fill="rgb(251,227,43)" fg:x="65814" fg:w="1748"/><text x="60.0450%" y="751.50"></text></g><g><title>tremor_script::srs::EventPayload::try_new (615 samples, 0.56%)</title><rect x="60.8244%" y="725" width="0.5588%" height="15" fill="rgb(241,96,17)" fg:x="66947" fg:w="615"/><text x="61.0744%" y="735.50"></text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (353 samples, 0.32%)</title><rect x="61.0625%" y="709" width="0.3207%" height="15" fill="rgb(234,198,43)" fg:x="67209" fg:w="353"/><text x="61.3125%" y="719.50"></text></g><g><title>tremor_script::srs::ValueAndMeta::from_parts (132 samples, 0.12%)</title><rect x="61.2632%" y="693" width="0.1199%" height="15" fill="rgb(220,108,29)" fg:x="67430" fg:w="132"/><text x="61.5132%" y="703.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (95 samples, 0.09%)</title><rect x="61.3877%" y="645" width="0.0863%" height="15" fill="rgb(226,163,33)" fg:x="67567" fg:w="95"/><text x="61.6377%" y="655.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (95 samples, 0.09%)</title><rect x="61.3877%" y="629" width="0.0863%" height="15" fill="rgb(205,194,45)" fg:x="67567" fg:w="95"/><text x="61.6377%" y="639.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (95 samples, 0.09%)</title><rect x="61.3877%" y="613" width="0.0863%" height="15" fill="rgb(206,143,44)" fg:x="67567" fg:w="95"/><text x="61.6377%" y="623.50"></text></g><g><title>[libc-2.31.so] (89 samples, 0.08%)</title><rect x="61.3932%" y="597" width="0.0809%" height="15" fill="rgb(236,136,36)" fg:x="67573" fg:w="89"/><text x="61.6432%" y="607.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (2,041 samples, 1.85%)</title><rect x="59.7941%" y="821" width="1.8543%" height="15" fill="rgb(249,172,42)" fg:x="65813" fg:w="2041"/><text x="60.0441%" y="831.50">t..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (292 samples, 0.27%)</title><rect x="61.3832%" y="805" width="0.2653%" height="15" fill="rgb(216,139,23)" fg:x="67562" fg:w="292"/><text x="61.6332%" y="815.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (292 samples, 0.27%)</title><rect x="61.3832%" y="789" width="0.2653%" height="15" fill="rgb(207,166,20)" fg:x="67562" fg:w="292"/><text x="61.6332%" y="799.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (292 samples, 0.27%)</title><rect x="61.3832%" y="773" width="0.2653%" height="15" fill="rgb(210,209,22)" fg:x="67562" fg:w="292"/><text x="61.6332%" y="783.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (292 samples, 0.27%)</title><rect x="61.3832%" y="757" width="0.2653%" height="15" fill="rgb(232,118,20)" fg:x="67562" fg:w="292"/><text x="61.6332%" y="767.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (292 samples, 0.27%)</title><rect x="61.3832%" y="741" width="0.2653%" height="15" fill="rgb(238,113,42)" fg:x="67562" fg:w="292"/><text x="61.6332%" y="751.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (292 samples, 0.27%)</title><rect x="61.3832%" y="725" width="0.2653%" height="15" fill="rgb(231,42,5)" fg:x="67562" fg:w="292"/><text x="61.6332%" y="735.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (292 samples, 0.27%)</title><rect x="61.3832%" y="709" width="0.2653%" height="15" fill="rgb(243,166,24)" fg:x="67562" fg:w="292"/><text x="61.6332%" y="719.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (292 samples, 0.27%)</title><rect x="61.3832%" y="693" width="0.2653%" height="15" fill="rgb(237,226,12)" fg:x="67562" fg:w="292"/><text x="61.6332%" y="703.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (292 samples, 0.27%)</title><rect x="61.3832%" y="677" width="0.2653%" height="15" fill="rgb(229,133,24)" fg:x="67562" fg:w="292"/><text x="61.6332%" y="687.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (292 samples, 0.27%)</title><rect x="61.3832%" y="661" width="0.2653%" height="15" fill="rgb(238,33,43)" fg:x="67562" fg:w="292"/><text x="61.6332%" y="671.50"></text></g><g><title>std::panic::catch_unwind (192 samples, 0.17%)</title><rect x="61.4740%" y="645" width="0.1744%" height="15" fill="rgb(227,59,38)" fg:x="67662" fg:w="192"/><text x="61.7240%" y="655.50"></text></g><g><title>std::panicking::try (192 samples, 0.17%)</title><rect x="61.4740%" y="629" width="0.1744%" height="15" fill="rgb(230,97,0)" fg:x="67662" fg:w="192"/><text x="61.7240%" y="639.50"></text></g><g><title>std::panicking::try::do_call (192 samples, 0.17%)</title><rect x="61.4740%" y="613" width="0.1744%" height="15" fill="rgb(250,173,50)" fg:x="67662" fg:w="192"/><text x="61.7240%" y="623.50"></text></g><g><title>[libc-2.31.so] (137 samples, 0.12%)</title><rect x="61.5240%" y="597" width="0.1245%" height="15" fill="rgb(240,15,50)" fg:x="67717" fg:w="137"/><text x="61.7740%" y="607.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (72 samples, 0.07%)</title><rect x="61.7139%" y="693" width="0.0654%" height="15" fill="rgb(221,93,22)" fg:x="67926" fg:w="72"/><text x="61.9639%" y="703.50"></text></g><g><title>core::mem::replace (72 samples, 0.07%)</title><rect x="61.7139%" y="677" width="0.0654%" height="15" fill="rgb(245,180,53)" fg:x="67926" fg:w="72"/><text x="61.9639%" y="687.50"></text></g><g><title>core::ptr::read (72 samples, 0.07%)</title><rect x="61.7139%" y="661" width="0.0654%" height="15" fill="rgb(231,88,51)" fg:x="67926" fg:w="72"/><text x="61.9639%" y="671.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (107 samples, 0.10%)</title><rect x="61.6966%" y="709" width="0.0972%" height="15" fill="rgb(240,58,21)" fg:x="67907" fg:w="107"/><text x="61.9466%" y="719.50"></text></g><g><title>core::mem::drop (16 samples, 0.01%)</title><rect x="61.7793%" y="693" width="0.0145%" height="15" fill="rgb(237,21,10)" fg:x="67998" fg:w="16"/><text x="62.0293%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (16 samples, 0.01%)</title><rect x="61.7793%" y="677" width="0.0145%" height="15" fill="rgb(218,43,11)" fg:x="67998" fg:w="16"/><text x="62.0293%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (115 samples, 0.10%)</title><rect x="61.7938%" y="709" width="0.1045%" height="15" fill="rgb(218,221,29)" fg:x="68014" fg:w="115"/><text x="62.0438%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (106 samples, 0.10%)</title><rect x="61.8020%" y="693" width="0.0963%" height="15" fill="rgb(214,118,42)" fg:x="68023" fg:w="106"/><text x="62.0520%" y="703.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (106 samples, 0.10%)</title><rect x="61.8020%" y="677" width="0.0963%" height="15" fill="rgb(251,200,26)" fg:x="68023" fg:w="106"/><text x="62.0520%" y="687.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (98 samples, 0.09%)</title><rect x="61.8093%" y="661" width="0.0890%" height="15" fill="rgb(237,101,39)" fg:x="68031" fg:w="98"/><text x="62.0593%" y="671.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (98 samples, 0.09%)</title><rect x="61.8093%" y="645" width="0.0890%" height="15" fill="rgb(251,117,11)" fg:x="68031" fg:w="98"/><text x="62.0593%" y="655.50"></text></g><g><title>__GI___pthread_mutex_unlock (94 samples, 0.09%)</title><rect x="61.8129%" y="629" width="0.0854%" height="15" fill="rgb(216,223,23)" fg:x="68035" fg:w="94"/><text x="62.0629%" y="639.50"></text></g><g><title>core::task::wake::Waker::will_wake (12 samples, 0.01%)</title><rect x="61.8983%" y="709" width="0.0109%" height="15" fill="rgb(251,54,12)" fg:x="68129" fg:w="12"/><text x="62.1483%" y="719.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (12 samples, 0.01%)</title><rect x="61.8983%" y="693" width="0.0109%" height="15" fill="rgb(254,176,54)" fg:x="68129" fg:w="12"/><text x="62.1483%" y="703.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (893 samples, 0.81%)</title><rect x="61.6485%" y="805" width="0.8113%" height="15" fill="rgb(210,32,8)" fg:x="67854" fg:w="893"/><text x="61.8985%" y="815.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (893 samples, 0.81%)</title><rect x="61.6485%" y="789" width="0.8113%" height="15" fill="rgb(235,52,38)" fg:x="67854" fg:w="893"/><text x="61.8985%" y="799.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (893 samples, 0.81%)</title><rect x="61.6485%" y="773" width="0.8113%" height="15" fill="rgb(231,4,44)" fg:x="67854" fg:w="893"/><text x="61.8985%" y="783.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (893 samples, 0.81%)</title><rect x="61.6485%" y="757" width="0.8113%" height="15" fill="rgb(249,2,32)" fg:x="67854" fg:w="893"/><text x="61.8985%" y="767.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (893 samples, 0.81%)</title><rect x="61.6485%" y="741" width="0.8113%" height="15" fill="rgb(224,65,26)" fg:x="67854" fg:w="893"/><text x="61.8985%" y="751.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (893 samples, 0.81%)</title><rect x="61.6485%" y="725" width="0.8113%" height="15" fill="rgb(250,73,40)" fg:x="67854" fg:w="893"/><text x="61.8985%" y="735.50"></text></g><g><title>event_listener::Inner::lock (606 samples, 0.55%)</title><rect x="61.9092%" y="709" width="0.5506%" height="15" fill="rgb(253,177,16)" fg:x="68141" fg:w="606"/><text x="62.1592%" y="719.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (597 samples, 0.54%)</title><rect x="61.9174%" y="693" width="0.5424%" height="15" fill="rgb(217,32,34)" fg:x="68150" fg:w="597"/><text x="62.1674%" y="703.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (593 samples, 0.54%)</title><rect x="61.9210%" y="677" width="0.5388%" height="15" fill="rgb(212,7,10)" fg:x="68154" fg:w="593"/><text x="62.1710%" y="687.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (581 samples, 0.53%)</title><rect x="61.9319%" y="661" width="0.5279%" height="15" fill="rgb(245,89,8)" fg:x="68166" fg:w="581"/><text x="62.1819%" y="671.50"></text></g><g><title>__GI___pthread_mutex_lock (581 samples, 0.53%)</title><rect x="61.9319%" y="645" width="0.5279%" height="15" fill="rgb(237,16,53)" fg:x="68166" fg:w="581"/><text x="62.1819%" y="655.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (325 samples, 0.30%)</title><rect x="62.5543%" y="677" width="0.2953%" height="15" fill="rgb(250,204,30)" fg:x="68851" fg:w="325"/><text x="62.8043%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (15 samples, 0.01%)</title><rect x="62.8359%" y="661" width="0.0136%" height="15" fill="rgb(208,77,27)" fg:x="69161" fg:w="15"/><text x="63.0859%" y="671.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (15 samples, 0.01%)</title><rect x="62.8514%" y="661" width="0.0136%" height="15" fill="rgb(250,204,28)" fg:x="69178" fg:w="15"/><text x="63.1014%" y="671.50"></text></g><g><title>[libc-2.31.so] (17 samples, 0.02%)</title><rect x="62.8650%" y="661" width="0.0154%" height="15" fill="rgb(244,63,21)" fg:x="69193" fg:w="17"/><text x="63.1150%" y="671.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;tremor_pipeline::event::Event&gt;&gt;::from (37 samples, 0.03%)</title><rect x="62.8496%" y="677" width="0.0336%" height="15" fill="rgb(236,85,44)" fg:x="69176" fg:w="37"/><text x="63.0996%" y="687.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (378 samples, 0.34%)</title><rect x="62.5470%" y="693" width="0.3434%" height="15" fill="rgb(215,98,4)" fg:x="68843" fg:w="378"/><text x="62.7970%" y="703.50"></text></g><g><title>[libc-2.31.so] (231 samples, 0.21%)</title><rect x="62.8904%" y="693" width="0.2099%" height="15" fill="rgb(235,38,11)" fg:x="69221" fg:w="231"/><text x="63.1404%" y="703.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (18 samples, 0.02%)</title><rect x="63.1239%" y="581" width="0.0164%" height="15" fill="rgb(254,186,25)" fg:x="69478" fg:w="18"/><text x="63.3739%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (48 samples, 0.04%)</title><rect x="63.1003%" y="693" width="0.0436%" height="15" fill="rgb(225,55,31)" fg:x="69452" fg:w="48"/><text x="63.3503%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (48 samples, 0.04%)</title><rect x="63.1003%" y="677" width="0.0436%" height="15" fill="rgb(211,15,21)" fg:x="69452" fg:w="48"/><text x="63.3503%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (48 samples, 0.04%)</title><rect x="63.1003%" y="661" width="0.0436%" height="15" fill="rgb(215,187,41)" fg:x="69452" fg:w="48"/><text x="63.3503%" y="671.50"></text></g><g><title>alloc::alloc::alloc (48 samples, 0.04%)</title><rect x="63.1003%" y="645" width="0.0436%" height="15" fill="rgb(248,69,32)" fg:x="69452" fg:w="48"/><text x="63.3503%" y="655.50"></text></g><g><title>__rg_alloc (48 samples, 0.04%)</title><rect x="63.1003%" y="629" width="0.0436%" height="15" fill="rgb(252,102,52)" fg:x="69452" fg:w="48"/><text x="63.3503%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (48 samples, 0.04%)</title><rect x="63.1003%" y="613" width="0.0436%" height="15" fill="rgb(253,140,32)" fg:x="69452" fg:w="48"/><text x="63.3503%" y="623.50"></text></g><g><title>sn_rust_alloc (48 samples, 0.04%)</title><rect x="63.1003%" y="597" width="0.0436%" height="15" fill="rgb(216,56,42)" fg:x="69452" fg:w="48"/><text x="63.3503%" y="607.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (18 samples, 0.02%)</title><rect x="63.1494%" y="693" width="0.0164%" height="15" fill="rgb(216,184,14)" fg:x="69506" fg:w="18"/><text x="63.3994%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.01%)</title><rect x="63.1794%" y="613" width="0.0127%" height="15" fill="rgb(237,187,27)" fg:x="69539" fg:w="14"/><text x="63.4294%" y="623.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.01%)</title><rect x="63.1794%" y="597" width="0.0127%" height="15" fill="rgb(219,65,3)" fg:x="69539" fg:w="14"/><text x="63.4294%" y="607.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (199 samples, 0.18%)</title><rect x="63.1657%" y="693" width="0.1808%" height="15" fill="rgb(245,83,25)" fg:x="69524" fg:w="199"/><text x="63.4157%" y="703.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (189 samples, 0.17%)</title><rect x="63.1748%" y="677" width="0.1717%" height="15" fill="rgb(214,205,45)" fg:x="69534" fg:w="189"/><text x="63.4248%" y="687.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (189 samples, 0.17%)</title><rect x="63.1748%" y="661" width="0.1717%" height="15" fill="rgb(241,20,18)" fg:x="69534" fg:w="189"/><text x="63.4248%" y="671.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_hash (189 samples, 0.17%)</title><rect x="63.1748%" y="645" width="0.1717%" height="15" fill="rgb(232,163,23)" fg:x="69534" fg:w="189"/><text x="63.4248%" y="655.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::search (189 samples, 0.17%)</title><rect x="63.1748%" y="629" width="0.1717%" height="15" fill="rgb(214,5,46)" fg:x="69534" fg:w="189"/><text x="63.4248%" y="639.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (170 samples, 0.15%)</title><rect x="63.1921%" y="613" width="0.1545%" height="15" fill="rgb(229,78,17)" fg:x="69553" fg:w="170"/><text x="63.4421%" y="623.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (161 samples, 0.15%)</title><rect x="63.2003%" y="597" width="0.1463%" height="15" fill="rgb(248,89,10)" fg:x="69562" fg:w="161"/><text x="63.4503%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (161 samples, 0.15%)</title><rect x="63.2003%" y="581" width="0.1463%" height="15" fill="rgb(248,54,15)" fg:x="69562" fg:w="161"/><text x="63.4503%" y="591.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (161 samples, 0.15%)</title><rect x="63.2003%" y="565" width="0.1463%" height="15" fill="rgb(223,116,6)" fg:x="69562" fg:w="161"/><text x="63.4503%" y="575.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (161 samples, 0.15%)</title><rect x="63.2003%" y="549" width="0.1463%" height="15" fill="rgb(205,125,38)" fg:x="69562" fg:w="161"/><text x="63.4503%" y="559.50"></text></g><g><title>[libc-2.31.so] (135 samples, 0.12%)</title><rect x="63.2239%" y="533" width="0.1227%" height="15" fill="rgb(251,78,38)" fg:x="69588" fg:w="135"/><text x="63.4739%" y="543.50"></text></g><g><title>ahash::operations::folded_multiply (18 samples, 0.02%)</title><rect x="63.3520%" y="613" width="0.0164%" height="15" fill="rgb(253,78,28)" fg:x="69729" fg:w="18"/><text x="63.6020%" y="623.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (13 samples, 0.01%)</title><rect x="63.3565%" y="597" width="0.0118%" height="15" fill="rgb(209,120,3)" fg:x="69734" fg:w="13"/><text x="63.6065%" y="607.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (24 samples, 0.02%)</title><rect x="63.3520%" y="629" width="0.0218%" height="15" fill="rgb(238,229,9)" fg:x="69729" fg:w="24"/><text x="63.6020%" y="639.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (34 samples, 0.03%)</title><rect x="63.3956%" y="581" width="0.0309%" height="15" fill="rgb(253,159,18)" fg:x="69777" fg:w="34"/><text x="63.6456%" y="591.50"></text></g><g><title>ahash::operations::folded_multiply (24 samples, 0.02%)</title><rect x="63.4047%" y="565" width="0.0218%" height="15" fill="rgb(244,42,34)" fg:x="69787" fg:w="24"/><text x="63.6547%" y="575.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (23 samples, 0.02%)</title><rect x="63.4056%" y="549" width="0.0209%" height="15" fill="rgb(224,8,7)" fg:x="69788" fg:w="23"/><text x="63.6556%" y="559.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (58 samples, 0.05%)</title><rect x="63.3829%" y="597" width="0.0527%" height="15" fill="rgb(210,201,45)" fg:x="69763" fg:w="58"/><text x="63.6329%" y="607.50"></text></g><g><title>hashbrown::map::make_hash (121 samples, 0.11%)</title><rect x="63.3474%" y="645" width="0.1099%" height="15" fill="rgb(252,185,21)" fg:x="69724" fg:w="121"/><text x="63.5974%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (82 samples, 0.07%)</title><rect x="63.3829%" y="629" width="0.0745%" height="15" fill="rgb(223,131,1)" fg:x="69763" fg:w="82"/><text x="63.6329%" y="639.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (82 samples, 0.07%)</title><rect x="63.3829%" y="613" width="0.0745%" height="15" fill="rgb(245,141,16)" fg:x="69763" fg:w="82"/><text x="63.6329%" y="623.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u8 (24 samples, 0.02%)</title><rect x="63.4356%" y="597" width="0.0218%" height="15" fill="rgb(229,55,45)" fg:x="69821" fg:w="24"/><text x="63.6856%" y="607.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (24 samples, 0.02%)</title><rect x="63.4356%" y="581" width="0.0218%" height="15" fill="rgb(208,92,15)" fg:x="69821" fg:w="24"/><text x="63.6856%" y="591.50"></text></g><g><title>ahash::operations::folded_multiply (12 samples, 0.01%)</title><rect x="63.4465%" y="565" width="0.0109%" height="15" fill="rgb(234,185,47)" fg:x="69833" fg:w="12"/><text x="63.6965%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="63.4828%" y="597" width="0.0145%" height="15" fill="rgb(253,104,50)" fg:x="69873" fg:w="16"/><text x="63.7328%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.02%)</title><rect x="63.4828%" y="613" width="0.0173%" height="15" fill="rgb(205,70,7)" fg:x="69873" fg:w="19"/><text x="63.7328%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (156 samples, 0.14%)</title><rect x="63.5001%" y="597" width="0.1417%" height="15" fill="rgb(240,178,43)" fg:x="69892" fg:w="156"/><text x="63.7501%" y="607.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (148 samples, 0.13%)</title><rect x="63.5074%" y="581" width="0.1345%" height="15" fill="rgb(214,112,2)" fg:x="69900" fg:w="148"/><text x="63.7574%" y="591.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (148 samples, 0.13%)</title><rect x="63.5074%" y="565" width="0.1345%" height="15" fill="rgb(206,46,17)" fg:x="69900" fg:w="148"/><text x="63.7574%" y="575.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (148 samples, 0.13%)</title><rect x="63.5074%" y="549" width="0.1345%" height="15" fill="rgb(225,220,16)" fg:x="69900" fg:w="148"/><text x="63.7574%" y="559.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (148 samples, 0.13%)</title><rect x="63.5074%" y="533" width="0.1345%" height="15" fill="rgb(238,65,40)" fg:x="69900" fg:w="148"/><text x="63.7574%" y="543.50"></text></g><g><title>[libc-2.31.so] (66 samples, 0.06%)</title><rect x="63.5819%" y="517" width="0.0600%" height="15" fill="rgb(230,151,21)" fg:x="69982" fg:w="66"/><text x="63.8319%" y="527.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (255 samples, 0.23%)</title><rect x="63.5001%" y="613" width="0.2317%" height="15" fill="rgb(218,58,49)" fg:x="69892" fg:w="255"/><text x="63.7501%" y="623.50"></text></g><g><title>&lt;lru::KeyRef&lt;K&gt; as core::borrow::Borrow&lt;K&gt;&gt;::borrow (99 samples, 0.09%)</title><rect x="63.6418%" y="597" width="0.0899%" height="15" fill="rgb(219,179,14)" fg:x="70048" fg:w="99"/><text x="63.8918%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (545 samples, 0.50%)</title><rect x="63.3474%" y="677" width="0.4952%" height="15" fill="rgb(223,72,1)" fg:x="69724" fg:w="545"/><text x="63.5974%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (545 samples, 0.50%)</title><rect x="63.3474%" y="661" width="0.4952%" height="15" fill="rgb(238,126,10)" fg:x="69724" fg:w="545"/><text x="63.5974%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (424 samples, 0.39%)</title><rect x="63.4574%" y="645" width="0.3852%" height="15" fill="rgb(224,206,38)" fg:x="69845" fg:w="424"/><text x="63.7074%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (424 samples, 0.39%)</title><rect x="63.4574%" y="629" width="0.3852%" height="15" fill="rgb(212,201,54)" fg:x="69845" fg:w="424"/><text x="63.7074%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (122 samples, 0.11%)</title><rect x="63.7318%" y="613" width="0.1108%" height="15" fill="rgb(218,154,48)" fg:x="70147" fg:w="122"/><text x="63.9818%" y="623.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (122 samples, 0.11%)</title><rect x="63.7318%" y="597" width="0.1108%" height="15" fill="rgb(232,93,24)" fg:x="70147" fg:w="122"/><text x="63.9818%" y="607.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (122 samples, 0.11%)</title><rect x="63.7318%" y="581" width="0.1108%" height="15" fill="rgb(245,30,21)" fg:x="70147" fg:w="122"/><text x="63.9818%" y="591.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (116 samples, 0.11%)</title><rect x="63.7372%" y="565" width="0.1054%" height="15" fill="rgb(242,148,29)" fg:x="70153" fg:w="116"/><text x="63.9872%" y="575.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (116 samples, 0.11%)</title><rect x="63.7372%" y="549" width="0.1054%" height="15" fill="rgb(244,153,54)" fg:x="70153" fg:w="116"/><text x="63.9872%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (116 samples, 0.11%)</title><rect x="63.7372%" y="533" width="0.1054%" height="15" fill="rgb(252,87,22)" fg:x="70153" fg:w="116"/><text x="63.9872%" y="543.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::attach (19 samples, 0.02%)</title><rect x="63.8426%" y="677" width="0.0173%" height="15" fill="rgb(210,51,29)" fg:x="70269" fg:w="19"/><text x="64.0926%" y="687.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::get_mut (577 samples, 0.52%)</title><rect x="63.3465%" y="693" width="0.5242%" height="15" fill="rgb(242,136,47)" fg:x="69723" fg:w="577"/><text x="63.5965%" y="703.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::detach (12 samples, 0.01%)</title><rect x="63.8599%" y="677" width="0.0109%" height="15" fill="rgb(238,68,4)" fg:x="70288" fg:w="12"/><text x="64.1099%" y="687.50"></text></g><g><title>sn_rust_dealloc (21 samples, 0.02%)</title><rect x="63.8708%" y="693" width="0.0191%" height="15" fill="rgb(242,161,30)" fg:x="70300" fg:w="21"/><text x="64.1208%" y="703.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (28 samples, 0.03%)</title><rect x="63.9689%" y="485" width="0.0254%" height="15" fill="rgb(218,58,44)" fg:x="70408" fg:w="28"/><text x="64.2189%" y="495.50"></text></g><g><title>tremor_value::value::serialize::&lt;impl value_trait::Writable for tremor_value::value::Value&gt;::encode (117 samples, 0.11%)</title><rect x="63.8998%" y="693" width="0.1063%" height="15" fill="rgb(252,125,32)" fg:x="70332" fg:w="117"/><text x="64.1498%" y="703.50"></text></g><g><title>value_trait::generator::DumpGenerator&lt;VT&gt;::new (83 samples, 0.08%)</title><rect x="63.9307%" y="677" width="0.0754%" height="15" fill="rgb(219,178,0)" fg:x="70366" fg:w="83"/><text x="64.1807%" y="687.50"></text></g><g><title>&lt;value_trait::generator::DumpGenerator&lt;VT&gt; as core::default::Default&gt;::default (83 samples, 0.08%)</title><rect x="63.9307%" y="661" width="0.0754%" height="15" fill="rgb(213,152,7)" fg:x="70366" fg:w="83"/><text x="64.1807%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (81 samples, 0.07%)</title><rect x="63.9325%" y="645" width="0.0736%" height="15" fill="rgb(249,109,34)" fg:x="70368" fg:w="81"/><text x="64.1825%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (81 samples, 0.07%)</title><rect x="63.9325%" y="629" width="0.0736%" height="15" fill="rgb(232,96,21)" fg:x="70368" fg:w="81"/><text x="64.1825%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (81 samples, 0.07%)</title><rect x="63.9325%" y="613" width="0.0736%" height="15" fill="rgb(228,27,39)" fg:x="70368" fg:w="81"/><text x="64.1825%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (81 samples, 0.07%)</title><rect x="63.9325%" y="597" width="0.0736%" height="15" fill="rgb(211,182,52)" fg:x="70368" fg:w="81"/><text x="64.1825%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (81 samples, 0.07%)</title><rect x="63.9325%" y="581" width="0.0736%" height="15" fill="rgb(234,178,38)" fg:x="70368" fg:w="81"/><text x="64.1825%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (81 samples, 0.07%)</title><rect x="63.9325%" y="565" width="0.0736%" height="15" fill="rgb(221,111,3)" fg:x="70368" fg:w="81"/><text x="64.1825%" y="575.50"></text></g><g><title>alloc::alloc::alloc (79 samples, 0.07%)</title><rect x="63.9344%" y="549" width="0.0718%" height="15" fill="rgb(228,175,21)" fg:x="70370" fg:w="79"/><text x="64.1844%" y="559.50"></text></g><g><title>__rg_alloc (79 samples, 0.07%)</title><rect x="63.9344%" y="533" width="0.0718%" height="15" fill="rgb(228,174,43)" fg:x="70370" fg:w="79"/><text x="64.1844%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (79 samples, 0.07%)</title><rect x="63.9344%" y="517" width="0.0718%" height="15" fill="rgb(211,191,0)" fg:x="70370" fg:w="79"/><text x="64.1844%" y="527.50"></text></g><g><title>sn_rust_alloc (72 samples, 0.07%)</title><rect x="63.9407%" y="501" width="0.0654%" height="15" fill="rgb(253,117,3)" fg:x="70377" fg:w="72"/><text x="64.1907%" y="511.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (13 samples, 0.01%)</title><rect x="63.9943%" y="485" width="0.0118%" height="15" fill="rgb(241,127,19)" fg:x="70436" fg:w="13"/><text x="64.2443%" y="495.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write (57 samples, 0.05%)</title><rect x="64.2333%" y="405" width="0.0518%" height="15" fill="rgb(218,103,12)" fg:x="70699" fg:w="57"/><text x="64.4833%" y="415.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher (53 samples, 0.05%)</title><rect x="64.2369%" y="389" width="0.0482%" height="15" fill="rgb(236,214,43)" fg:x="70703" fg:w="53"/><text x="64.4869%" y="399.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher::{{closure}} (52 samples, 0.05%)</title><rect x="64.2378%" y="373" width="0.0472%" height="15" fill="rgb(244,144,19)" fg:x="70704" fg:w="52"/><text x="64.4878%" y="383.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (52 samples, 0.05%)</title><rect x="64.2378%" y="357" width="0.0472%" height="15" fill="rgb(246,188,10)" fg:x="70704" fg:w="52"/><text x="64.4878%" y="367.50"></text></g><g><title>fxhash::write (39 samples, 0.04%)</title><rect x="64.2496%" y="341" width="0.0354%" height="15" fill="rgb(212,193,33)" fg:x="70717" fg:w="39"/><text x="64.4996%" y="351.50"></text></g><g><title>fxhash::write64 (39 samples, 0.04%)</title><rect x="64.2496%" y="325" width="0.0354%" height="15" fill="rgb(241,51,29)" fg:x="70717" fg:w="39"/><text x="64.4996%" y="335.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (23 samples, 0.02%)</title><rect x="64.2642%" y="309" width="0.0209%" height="15" fill="rgb(211,58,19)" fg:x="70733" fg:w="23"/><text x="64.5142%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (16 samples, 0.01%)</title><rect x="64.2705%" y="293" width="0.0145%" height="15" fill="rgb(229,111,26)" fg:x="70740" fg:w="16"/><text x="64.5205%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (237 samples, 0.22%)</title><rect x="64.0952%" y="517" width="0.2153%" height="15" fill="rgb(213,115,40)" fg:x="70547" fg:w="237"/><text x="64.3452%" y="527.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (228 samples, 0.21%)</title><rect x="64.1034%" y="501" width="0.2071%" height="15" fill="rgb(209,56,44)" fg:x="70556" fg:w="228"/><text x="64.3534%" y="511.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_query::MapQuery&lt;K&gt; as core::hash::Hash&gt;::hash (225 samples, 0.20%)</title><rect x="64.1061%" y="485" width="0.2044%" height="15" fill="rgb(230,108,32)" fg:x="70559" fg:w="225"/><text x="64.3561%" y="495.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash (92 samples, 0.08%)</title><rect x="64.2269%" y="469" width="0.0836%" height="15" fill="rgb(216,165,31)" fg:x="70692" fg:w="92"/><text x="64.4769%" y="479.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash::{{closure}} (85 samples, 0.08%)</title><rect x="64.2333%" y="453" width="0.0772%" height="15" fill="rgb(218,122,21)" fg:x="70699" fg:w="85"/><text x="64.4833%" y="463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (85 samples, 0.08%)</title><rect x="64.2333%" y="437" width="0.0772%" height="15" fill="rgb(223,224,47)" fg:x="70699" fg:w="85"/><text x="64.4833%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (85 samples, 0.08%)</title><rect x="64.2333%" y="421" width="0.0772%" height="15" fill="rgb(238,102,44)" fg:x="70699" fg:w="85"/><text x="64.4833%" y="431.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write_u8 (28 samples, 0.03%)</title><rect x="64.2851%" y="405" width="0.0254%" height="15" fill="rgb(236,46,40)" fg:x="70756" fg:w="28"/><text x="64.5351%" y="415.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_u8_Hasher (28 samples, 0.03%)</title><rect x="64.2851%" y="389" width="0.0254%" height="15" fill="rgb(247,202,50)" fg:x="70756" fg:w="28"/><text x="64.5351%" y="399.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_u8_Hasher::{{closure}} (28 samples, 0.03%)</title><rect x="64.2851%" y="373" width="0.0254%" height="15" fill="rgb(209,99,20)" fg:x="70756" fg:w="28"/><text x="64.5351%" y="383.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (28 samples, 0.03%)</title><rect x="64.2851%" y="357" width="0.0254%" height="15" fill="rgb(252,27,34)" fg:x="70756" fg:w="28"/><text x="64.5351%" y="367.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (28 samples, 0.03%)</title><rect x="64.2851%" y="341" width="0.0254%" height="15" fill="rgb(215,206,23)" fg:x="70756" fg:w="28"/><text x="64.5351%" y="351.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (15 samples, 0.01%)</title><rect x="64.3269%" y="453" width="0.0136%" height="15" fill="rgb(212,135,36)" fg:x="70802" fg:w="15"/><text x="64.5769%" y="463.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (13 samples, 0.01%)</title><rect x="64.3287%" y="437" width="0.0118%" height="15" fill="rgb(240,189,1)" fg:x="70804" fg:w="13"/><text x="64.5787%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (18 samples, 0.02%)</title><rect x="64.3269%" y="469" width="0.0164%" height="15" fill="rgb(242,56,20)" fg:x="70802" fg:w="18"/><text x="64.5769%" y="479.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (26 samples, 0.02%)</title><rect x="64.3641%" y="469" width="0.0236%" height="15" fill="rgb(247,132,33)" fg:x="70843" fg:w="26"/><text x="64.6141%" y="479.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (26 samples, 0.02%)</title><rect x="64.3641%" y="453" width="0.0236%" height="15" fill="rgb(208,149,11)" fg:x="70843" fg:w="26"/><text x="64.6141%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (92 samples, 0.08%)</title><rect x="64.3105%" y="517" width="0.0836%" height="15" fill="rgb(211,33,11)" fg:x="70784" fg:w="92"/><text x="64.5605%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (92 samples, 0.08%)</title><rect x="64.3105%" y="501" width="0.0836%" height="15" fill="rgb(221,29,38)" fg:x="70784" fg:w="92"/><text x="64.5605%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (92 samples, 0.08%)</title><rect x="64.3105%" y="485" width="0.0836%" height="15" fill="rgb(206,182,49)" fg:x="70784" fg:w="92"/><text x="64.5605%" y="495.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (344 samples, 0.31%)</title><rect x="64.0852%" y="613" width="0.3125%" height="15" fill="rgb(216,140,1)" fg:x="70536" fg:w="344"/><text x="64.3352%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (344 samples, 0.31%)</title><rect x="64.0852%" y="597" width="0.3125%" height="15" fill="rgb(232,57,40)" fg:x="70536" fg:w="344"/><text x="64.3352%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (338 samples, 0.31%)</title><rect x="64.0906%" y="581" width="0.3071%" height="15" fill="rgb(224,186,18)" fg:x="70542" fg:w="338"/><text x="64.3406%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem::{{closure}} (338 samples, 0.31%)</title><rect x="64.0906%" y="565" width="0.3071%" height="15" fill="rgb(215,121,11)" fg:x="70542" fg:w="338"/><text x="64.3406%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (334 samples, 0.30%)</title><rect x="64.0943%" y="549" width="0.3035%" height="15" fill="rgb(245,147,10)" fg:x="70546" fg:w="334"/><text x="64.3443%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (333 samples, 0.30%)</title><rect x="64.0952%" y="533" width="0.3025%" height="15" fill="rgb(238,153,13)" fg:x="70547" fg:w="333"/><text x="64.3452%" y="543.50"></text></g><g><title>value_trait::ValueAccess::get (437 samples, 0.40%)</title><rect x="64.0061%" y="693" width="0.3970%" height="15" fill="rgb(233,108,0)" fg:x="70449" fg:w="437"/><text x="64.2561%" y="703.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (437 samples, 0.40%)</title><rect x="64.0061%" y="677" width="0.3970%" height="15" fill="rgb(212,157,17)" fg:x="70449" fg:w="437"/><text x="64.2561%" y="687.50"></text></g><g><title>value_trait::ValueAccess::get::{{closure}} (437 samples, 0.40%)</title><rect x="64.0061%" y="661" width="0.3970%" height="15" fill="rgb(225,213,38)" fg:x="70449" fg:w="437"/><text x="64.2561%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;MapK,MapE,S&gt; as value_trait::object::Object&gt;::get (437 samples, 0.40%)</title><rect x="64.0061%" y="645" width="0.3970%" height="15" fill="rgb(248,16,11)" fg:x="70449" fg:w="437"/><text x="64.2561%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::get (437 samples, 0.40%)</title><rect x="64.0061%" y="629" width="0.3970%" height="15" fill="rgb(241,33,4)" fg:x="70449" fg:w="437"/><text x="64.2561%" y="639.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write (37 samples, 0.03%)</title><rect x="64.6794%" y="389" width="0.0336%" height="15" fill="rgb(222,26,43)" fg:x="71190" fg:w="37"/><text x="64.9294%" y="399.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher (28 samples, 0.03%)</title><rect x="64.6876%" y="373" width="0.0254%" height="15" fill="rgb(243,29,36)" fg:x="71199" fg:w="28"/><text x="64.9376%" y="383.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher::{{closure}} (23 samples, 0.02%)</title><rect x="64.6921%" y="357" width="0.0209%" height="15" fill="rgb(241,9,27)" fg:x="71204" fg:w="23"/><text x="64.9421%" y="367.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (23 samples, 0.02%)</title><rect x="64.6921%" y="341" width="0.0209%" height="15" fill="rgb(205,117,26)" fg:x="71204" fg:w="23"/><text x="64.9421%" y="351.50"></text></g><g><title>fxhash::write (23 samples, 0.02%)</title><rect x="64.6921%" y="325" width="0.0209%" height="15" fill="rgb(209,80,39)" fg:x="71204" fg:w="23"/><text x="64.9421%" y="335.50"></text></g><g><title>fxhash::write64 (23 samples, 0.02%)</title><rect x="64.6921%" y="309" width="0.0209%" height="15" fill="rgb(239,155,6)" fg:x="71204" fg:w="23"/><text x="64.9421%" y="319.50"></text></g><g><title>hashbrown::map::make_hash (184 samples, 0.17%)</title><rect x="64.5540%" y="501" width="0.1672%" height="15" fill="rgb(212,104,12)" fg:x="71052" fg:w="184"/><text x="64.8040%" y="511.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (174 samples, 0.16%)</title><rect x="64.5631%" y="485" width="0.1581%" height="15" fill="rgb(234,204,3)" fg:x="71062" fg:w="174"/><text x="64.8131%" y="495.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_query::MapQuery&lt;K&gt; as core::hash::Hash&gt;::hash (172 samples, 0.16%)</title><rect x="64.5649%" y="469" width="0.1563%" height="15" fill="rgb(251,218,7)" fg:x="71064" fg:w="172"/><text x="64.8149%" y="479.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash (50 samples, 0.05%)</title><rect x="64.6757%" y="453" width="0.0454%" height="15" fill="rgb(221,81,32)" fg:x="71186" fg:w="50"/><text x="64.9257%" y="463.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash::{{closure}} (46 samples, 0.04%)</title><rect x="64.6794%" y="437" width="0.0418%" height="15" fill="rgb(214,152,26)" fg:x="71190" fg:w="46"/><text x="64.9294%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (46 samples, 0.04%)</title><rect x="64.6794%" y="421" width="0.0418%" height="15" fill="rgb(223,22,3)" fg:x="71190" fg:w="46"/><text x="64.9294%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (46 samples, 0.04%)</title><rect x="64.6794%" y="405" width="0.0418%" height="15" fill="rgb(207,174,7)" fg:x="71190" fg:w="46"/><text x="64.9294%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.01%)</title><rect x="64.7339%" y="453" width="0.0127%" height="15" fill="rgb(224,19,52)" fg:x="71250" fg:w="14"/><text x="64.9839%" y="463.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (14 samples, 0.01%)</title><rect x="64.7339%" y="437" width="0.0127%" height="15" fill="rgb(228,24,14)" fg:x="71250" fg:w="14"/><text x="64.9839%" y="447.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (83 samples, 0.08%)</title><rect x="64.7466%" y="437" width="0.0754%" height="15" fill="rgb(230,153,43)" fg:x="71264" fg:w="83"/><text x="64.9966%" y="447.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (79 samples, 0.07%)</title><rect x="64.7502%" y="421" width="0.0718%" height="15" fill="rgb(231,106,12)" fg:x="71268" fg:w="79"/><text x="65.0002%" y="431.50"></text></g><g><title>abi_stable::std_types::map::map_query::MapQuery&lt;K&gt;::is_equal (64 samples, 0.06%)</title><rect x="64.7639%" y="405" width="0.0581%" height="15" fill="rgb(215,92,2)" fg:x="71283" fg:w="64"/><text x="65.0139%" y="415.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (64 samples, 0.06%)</title><rect x="64.7639%" y="389" width="0.0581%" height="15" fill="rgb(249,143,25)" fg:x="71283" fg:w="64"/><text x="65.0139%" y="399.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (64 samples, 0.06%)</title><rect x="64.7639%" y="373" width="0.0581%" height="15" fill="rgb(252,7,35)" fg:x="71283" fg:w="64"/><text x="65.0139%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (61 samples, 0.06%)</title><rect x="64.7666%" y="357" width="0.0554%" height="15" fill="rgb(216,69,40)" fg:x="71286" fg:w="61"/><text x="65.0166%" y="367.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (61 samples, 0.06%)</title><rect x="64.7666%" y="341" width="0.0554%" height="15" fill="rgb(240,36,33)" fg:x="71286" fg:w="61"/><text x="65.0166%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (61 samples, 0.06%)</title><rect x="64.7666%" y="325" width="0.0554%" height="15" fill="rgb(231,128,14)" fg:x="71286" fg:w="61"/><text x="65.0166%" y="335.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (61 samples, 0.06%)</title><rect x="64.7666%" y="309" width="0.0554%" height="15" fill="rgb(245,143,14)" fg:x="71286" fg:w="61"/><text x="65.0166%" y="319.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (61 samples, 0.06%)</title><rect x="64.7666%" y="293" width="0.0554%" height="15" fill="rgb(222,130,28)" fg:x="71286" fg:w="61"/><text x="65.0166%" y="303.50"></text></g><g><title>[libc-2.31.so] (52 samples, 0.05%)</title><rect x="64.7748%" y="277" width="0.0472%" height="15" fill="rgb(212,10,48)" fg:x="71295" fg:w="52"/><text x="65.0248%" y="287.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (93 samples, 0.08%)</title><rect x="64.7466%" y="453" width="0.0845%" height="15" fill="rgb(254,118,45)" fg:x="71264" fg:w="93"/><text x="64.9966%" y="463.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (354 samples, 0.32%)</title><rect x="64.5395%" y="597" width="0.3216%" height="15" fill="rgb(228,6,45)" fg:x="71036" fg:w="354"/><text x="64.7895%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (351 samples, 0.32%)</title><rect x="64.5422%" y="581" width="0.3189%" height="15" fill="rgb(241,18,35)" fg:x="71039" fg:w="351"/><text x="64.7922%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (351 samples, 0.32%)</title><rect x="64.5422%" y="565" width="0.3189%" height="15" fill="rgb(227,214,53)" fg:x="71039" fg:w="351"/><text x="64.7922%" y="575.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem::{{closure}} (351 samples, 0.32%)</title><rect x="64.5422%" y="549" width="0.3189%" height="15" fill="rgb(224,107,51)" fg:x="71039" fg:w="351"/><text x="64.7922%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (342 samples, 0.31%)</title><rect x="64.5504%" y="533" width="0.3107%" height="15" fill="rgb(248,60,28)" fg:x="71048" fg:w="342"/><text x="64.8004%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (338 samples, 0.31%)</title><rect x="64.5540%" y="517" width="0.3071%" height="15" fill="rgb(249,101,23)" fg:x="71052" fg:w="338"/><text x="64.8040%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (154 samples, 0.14%)</title><rect x="64.7212%" y="501" width="0.1399%" height="15" fill="rgb(228,51,19)" fg:x="71236" fg:w="154"/><text x="64.9712%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (154 samples, 0.14%)</title><rect x="64.7212%" y="485" width="0.1399%" height="15" fill="rgb(213,20,6)" fg:x="71236" fg:w="154"/><text x="64.9712%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (154 samples, 0.14%)</title><rect x="64.7212%" y="469" width="0.1399%" height="15" fill="rgb(212,124,10)" fg:x="71236" fg:w="154"/><text x="64.9712%" y="479.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (13 samples, 0.01%)</title><rect x="64.8493%" y="453" width="0.0118%" height="15" fill="rgb(248,3,40)" fg:x="71377" fg:w="13"/><text x="65.0993%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (13 samples, 0.01%)</title><rect x="64.8493%" y="437" width="0.0118%" height="15" fill="rgb(223,178,23)" fg:x="71377" fg:w="13"/><text x="65.0993%" y="447.50"></text></g><g><title>value_trait::ValueAccess::get_str (512 samples, 0.47%)</title><rect x="64.4032%" y="693" width="0.4652%" height="15" fill="rgb(240,132,45)" fg:x="70886" fg:w="512"/><text x="64.6532%" y="703.50"></text></g><g><title>value_trait::ValueAccess::get (507 samples, 0.46%)</title><rect x="64.4077%" y="677" width="0.4606%" height="15" fill="rgb(245,164,36)" fg:x="70891" fg:w="507"/><text x="64.6577%" y="687.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (507 samples, 0.46%)</title><rect x="64.4077%" y="661" width="0.4606%" height="15" fill="rgb(231,188,53)" fg:x="70891" fg:w="507"/><text x="64.6577%" y="671.50"></text></g><g><title>value_trait::ValueAccess::get::{{closure}} (500 samples, 0.45%)</title><rect x="64.4141%" y="645" width="0.4543%" height="15" fill="rgb(237,198,39)" fg:x="70898" fg:w="500"/><text x="64.6641%" y="655.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;MapK,MapE,S&gt; as value_trait::object::Object&gt;::get (500 samples, 0.45%)</title><rect x="64.4141%" y="629" width="0.4543%" height="15" fill="rgb(223,120,35)" fg:x="70898" fg:w="500"/><text x="64.6641%" y="639.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::get (500 samples, 0.45%)</title><rect x="64.4141%" y="613" width="0.4543%" height="15" fill="rgb(253,107,49)" fg:x="70898" fg:w="500"/><text x="64.6641%" y="623.50"></text></g><g><title>&lt;u64 as core::ops::arith::Add&gt;::add (32 samples, 0.03%)</title><rect x="64.8911%" y="645" width="0.0291%" height="15" fill="rgb(216,44,31)" fg:x="71423" fg:w="32"/><text x="65.1411%" y="655.50"></text></g><g><title>window::SlidingWindow&lt;T&gt;::add (43 samples, 0.04%)</title><rect x="64.8856%" y="661" width="0.0391%" height="15" fill="rgb(253,87,21)" fg:x="71417" fg:w="43"/><text x="65.1356%" y="671.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (2,714 samples, 2.47%)</title><rect x="62.4598%" y="725" width="2.4658%" height="15" fill="rgb(226,18,2)" fg:x="68747" fg:w="2714"/><text x="62.7098%" y="735.50">&lt;t..</text></g><g><title>&lt;tremor_pipeline::op::grouper::bucket::Grouper as tremor_pipeline::op::Operator&gt;::on_event (2,714 samples, 2.47%)</title><rect x="62.4598%" y="709" width="2.4658%" height="15" fill="rgb(216,8,46)" fg:x="68747" fg:w="2714"/><text x="62.7098%" y="719.50">&lt;t..</text></g><g><title>window::TimeWindow::inc_t (63 samples, 0.06%)</title><rect x="64.8684%" y="693" width="0.0572%" height="15" fill="rgb(226,140,39)" fg:x="71398" fg:w="63"/><text x="65.1184%" y="703.50"></text></g><g><title>window::TimeWindow::add_t (61 samples, 0.06%)</title><rect x="64.8702%" y="677" width="0.0554%" height="15" fill="rgb(221,194,54)" fg:x="71400" fg:w="61"/><text x="65.1202%" y="687.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (41 samples, 0.04%)</title><rect x="64.9429%" y="677" width="0.0373%" height="15" fill="rgb(213,92,11)" fg:x="71480" fg:w="41"/><text x="65.1929%" y="687.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (6,302 samples, 5.73%)</title><rect x="59.2581%" y="901" width="5.7257%" height="15" fill="rgb(229,162,46)" fg:x="65223" fg:w="6302"/><text x="59.5081%" y="911.50">std::th..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (6,295 samples, 5.72%)</title><rect x="59.2644%" y="885" width="5.7193%" height="15" fill="rgb(214,111,36)" fg:x="65230" fg:w="6295"/><text x="59.5144%" y="895.50">std::th..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (6,288 samples, 5.71%)</title><rect x="59.2708%" y="869" width="5.7129%" height="15" fill="rgb(207,6,21)" fg:x="65237" fg:w="6288"/><text x="59.5208%" y="879.50">async_s..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (6,288 samples, 5.71%)</title><rect x="59.2708%" y="853" width="5.7129%" height="15" fill="rgb(213,127,38)" fg:x="65237" fg:w="6288"/><text x="59.5208%" y="863.50">&lt;async_..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,288 samples, 5.71%)</title><rect x="59.2708%" y="837" width="5.7129%" height="15" fill="rgb(238,118,32)" fg:x="65237" fg:w="6288"/><text x="59.5208%" y="847.50">&lt;core::..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (3,671 samples, 3.34%)</title><rect x="61.6485%" y="821" width="3.3353%" height="15" fill="rgb(240,139,39)" fg:x="67854" fg:w="3671"/><text x="61.8985%" y="831.50">tre..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,778 samples, 2.52%)</title><rect x="62.4598%" y="805" width="2.5239%" height="15" fill="rgb(235,10,37)" fg:x="68747" fg:w="2778"/><text x="62.7098%" y="815.50">&lt;c..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (2,778 samples, 2.52%)</title><rect x="62.4598%" y="789" width="2.5239%" height="15" fill="rgb(249,171,38)" fg:x="68747" fg:w="2778"/><text x="62.7098%" y="799.50">tr..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (2,778 samples, 2.52%)</title><rect x="62.4598%" y="773" width="2.5239%" height="15" fill="rgb(242,144,32)" fg:x="68747" fg:w="2778"/><text x="62.7098%" y="783.50">tr..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (2,778 samples, 2.52%)</title><rect x="62.4598%" y="757" width="2.5239%" height="15" fill="rgb(217,117,21)" fg:x="68747" fg:w="2778"/><text x="62.7098%" y="767.50">tr..</text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (2,778 samples, 2.52%)</title><rect x="62.4598%" y="741" width="2.5239%" height="15" fill="rgb(249,87,1)" fg:x="68747" fg:w="2778"/><text x="62.7098%" y="751.50">&lt;t..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (64 samples, 0.06%)</title><rect x="64.9256%" y="725" width="0.0581%" height="15" fill="rgb(248,196,48)" fg:x="71461" fg:w="64"/><text x="65.1756%" y="735.50"></text></g><g><title>tremor_script::srs::EventPayload::rent_mut (64 samples, 0.06%)</title><rect x="64.9256%" y="709" width="0.0581%" height="15" fill="rgb(251,206,33)" fg:x="71461" fg:w="64"/><text x="65.1756%" y="719.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (57 samples, 0.05%)</title><rect x="64.9319%" y="693" width="0.0518%" height="15" fill="rgb(232,141,28)" fg:x="71468" fg:w="57"/><text x="65.1819%" y="703.50"></text></g><g><title>tremor_common::time::nanotime (25 samples, 0.02%)</title><rect x="64.9837%" y="901" width="0.0227%" height="15" fill="rgb(209,167,14)" fg:x="71525" fg:w="25"/><text x="65.2337%" y="911.50"></text></g><g><title>std::time::SystemTime::now (25 samples, 0.02%)</title><rect x="64.9837%" y="885" width="0.0227%" height="15" fill="rgb(225,11,50)" fg:x="71525" fg:w="25"/><text x="65.2337%" y="895.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (25 samples, 0.02%)</title><rect x="64.9837%" y="869" width="0.0227%" height="15" fill="rgb(209,50,20)" fg:x="71525" fg:w="25"/><text x="65.2337%" y="879.50"></text></g><g><title>std::sys::unix::time::inner::now (25 samples, 0.02%)</title><rect x="64.9837%" y="853" width="0.0227%" height="15" fill="rgb(212,17,46)" fg:x="71525" fg:w="25"/><text x="65.2337%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (14 samples, 0.01%)</title><rect x="65.0900%" y="757" width="0.0127%" height="15" fill="rgb(216,101,39)" fg:x="71642" fg:w="14"/><text x="65.3400%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_add (14 samples, 0.01%)</title><rect x="65.0900%" y="741" width="0.0127%" height="15" fill="rgb(212,228,48)" fg:x="71642" fg:w="14"/><text x="65.3400%" y="751.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (18 samples, 0.02%)</title><rect x="65.0882%" y="789" width="0.0164%" height="15" fill="rgb(250,6,50)" fg:x="71640" fg:w="18"/><text x="65.3382%" y="799.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (16 samples, 0.01%)</title><rect x="65.0900%" y="773" width="0.0145%" height="15" fill="rgb(250,160,48)" fg:x="71642" fg:w="16"/><text x="65.3400%" y="783.50"></text></g><g><title>core::mem::drop (31 samples, 0.03%)</title><rect x="65.1155%" y="789" width="0.0282%" height="15" fill="rgb(244,216,33)" fg:x="71670" fg:w="31"/><text x="65.3655%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (31 samples, 0.03%)</title><rect x="65.1155%" y="773" width="0.0282%" height="15" fill="rgb(207,157,5)" fg:x="71670" fg:w="31"/><text x="65.3655%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (29 samples, 0.03%)</title><rect x="65.1173%" y="757" width="0.0263%" height="15" fill="rgb(228,199,8)" fg:x="71672" fg:w="29"/><text x="65.3673%" y="767.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.03%)</title><rect x="65.1173%" y="741" width="0.0263%" height="15" fill="rgb(227,80,20)" fg:x="71672" fg:w="29"/><text x="65.3673%" y="751.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (27 samples, 0.02%)</title><rect x="65.1191%" y="725" width="0.0245%" height="15" fill="rgb(222,9,33)" fg:x="71674" fg:w="27"/><text x="65.3691%" y="735.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (27 samples, 0.02%)</title><rect x="65.1191%" y="709" width="0.0245%" height="15" fill="rgb(239,44,28)" fg:x="71674" fg:w="27"/><text x="65.3691%" y="719.50"></text></g><g><title>__GI___pthread_mutex_unlock (27 samples, 0.02%)</title><rect x="65.1191%" y="693" width="0.0245%" height="15" fill="rgb(249,187,43)" fg:x="71674" fg:w="27"/><text x="65.3691%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (25 samples, 0.02%)</title><rect x="65.1436%" y="789" width="0.0227%" height="15" fill="rgb(216,141,28)" fg:x="71701" fg:w="25"/><text x="65.3936%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (24 samples, 0.02%)</title><rect x="65.1445%" y="773" width="0.0218%" height="15" fill="rgb(230,154,53)" fg:x="71702" fg:w="24"/><text x="65.3945%" y="783.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.02%)</title><rect x="65.1445%" y="757" width="0.0218%" height="15" fill="rgb(227,82,4)" fg:x="71702" fg:w="24"/><text x="65.3945%" y="767.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (23 samples, 0.02%)</title><rect x="65.1455%" y="741" width="0.0209%" height="15" fill="rgb(220,107,16)" fg:x="71703" fg:w="23"/><text x="65.3955%" y="751.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (23 samples, 0.02%)</title><rect x="65.1455%" y="725" width="0.0209%" height="15" fill="rgb(207,187,2)" fg:x="71703" fg:w="23"/><text x="65.3955%" y="735.50"></text></g><g><title>__GI___pthread_mutex_unlock (23 samples, 0.02%)</title><rect x="65.1455%" y="709" width="0.0209%" height="15" fill="rgb(210,162,52)" fg:x="71703" fg:w="23"/><text x="65.3955%" y="719.50"></text></g><g><title>std::sync::poison::Flag::get (16 samples, 0.01%)</title><rect x="65.1709%" y="725" width="0.0145%" height="15" fill="rgb(217,216,49)" fg:x="71731" fg:w="16"/><text x="65.4209%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (16 samples, 0.01%)</title><rect x="65.1709%" y="709" width="0.0145%" height="15" fill="rgb(218,146,49)" fg:x="71731" fg:w="16"/><text x="65.4209%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_load (16 samples, 0.01%)</title><rect x="65.1709%" y="693" width="0.0145%" height="15" fill="rgb(216,55,40)" fg:x="71731" fg:w="16"/><text x="65.4209%" y="703.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (23 samples, 0.02%)</title><rect x="65.1709%" y="757" width="0.0209%" height="15" fill="rgb(208,196,21)" fg:x="71731" fg:w="23"/><text x="65.4209%" y="767.50"></text></g><g><title>std::sync::poison::Flag::borrow (23 samples, 0.02%)</title><rect x="65.1709%" y="741" width="0.0209%" height="15" fill="rgb(242,117,42)" fg:x="71731" fg:w="23"/><text x="65.4209%" y="751.50"></text></g><g><title>event_listener::Inner::lock (283 samples, 0.26%)</title><rect x="65.1673%" y="789" width="0.2571%" height="15" fill="rgb(210,11,23)" fg:x="71727" fg:w="283"/><text x="65.4173%" y="799.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (279 samples, 0.25%)</title><rect x="65.1709%" y="773" width="0.2535%" height="15" fill="rgb(217,110,2)" fg:x="71731" fg:w="279"/><text x="65.4209%" y="783.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (256 samples, 0.23%)</title><rect x="65.1918%" y="757" width="0.2326%" height="15" fill="rgb(229,77,54)" fg:x="71754" fg:w="256"/><text x="65.4418%" y="767.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (192 samples, 0.17%)</title><rect x="65.2499%" y="741" width="0.1744%" height="15" fill="rgb(218,53,16)" fg:x="71818" fg:w="192"/><text x="65.4999%" y="751.50"></text></g><g><title>__GI___pthread_mutex_lock (192 samples, 0.17%)</title><rect x="65.2499%" y="725" width="0.1744%" height="15" fill="rgb(215,38,13)" fg:x="71818" fg:w="192"/><text x="65.4999%" y="735.50"></text></g><g><title>__lll_lock_wait (44 samples, 0.04%)</title><rect x="65.3844%" y="709" width="0.0400%" height="15" fill="rgb(235,42,18)" fg:x="71966" fg:w="44"/><text x="65.6344%" y="719.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (451 samples, 0.41%)</title><rect x="65.0664%" y="805" width="0.4098%" height="15" fill="rgb(219,66,54)" fg:x="71616" fg:w="451"/><text x="65.3164%" y="815.50"></text></g><g><title>event_listener::List::remove (57 samples, 0.05%)</title><rect x="65.4244%" y="789" width="0.0518%" height="15" fill="rgb(222,205,4)" fg:x="72010" fg:w="57"/><text x="65.6744%" y="799.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (36 samples, 0.03%)</title><rect x="65.4435%" y="773" width="0.0327%" height="15" fill="rgb(227,213,46)" fg:x="72031" fg:w="36"/><text x="65.6935%" y="783.50"></text></g><g><title>core::mem::replace (36 samples, 0.03%)</title><rect x="65.4435%" y="757" width="0.0327%" height="15" fill="rgb(250,145,42)" fg:x="72031" fg:w="36"/><text x="65.6935%" y="767.50"></text></g><g><title>core::ptr::read (36 samples, 0.03%)</title><rect x="65.4435%" y="741" width="0.0327%" height="15" fill="rgb(219,15,2)" fg:x="72031" fg:w="36"/><text x="65.6935%" y="751.50"></text></g><g><title>[libc-2.31.so] (281 samples, 0.26%)</title><rect x="65.4762%" y="805" width="0.2553%" height="15" fill="rgb(231,181,52)" fg:x="72067" fg:w="281"/><text x="65.7262%" y="815.50"></text></g><g><title>[libc-2.31.so] (582 samples, 0.53%)</title><rect x="65.7469%" y="789" width="0.5288%" height="15" fill="rgb(235,1,42)" fg:x="72365" fg:w="582"/><text x="65.9969%" y="799.50"></text></g><g><title>[libc-2.31.so] (87 samples, 0.08%)</title><rect x="66.4574%" y="757" width="0.0790%" height="15" fill="rgb(249,88,27)" fg:x="73147" fg:w="87"/><text x="66.7074%" y="767.50"></text></g><g><title>concurrent_queue::full_fence (80 samples, 0.07%)</title><rect x="66.5364%" y="757" width="0.0727%" height="15" fill="rgb(235,145,16)" fg:x="73234" fg:w="80"/><text x="66.7864%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (76 samples, 0.07%)</title><rect x="66.5401%" y="741" width="0.0690%" height="15" fill="rgb(237,114,19)" fg:x="73238" fg:w="76"/><text x="66.7901%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (76 samples, 0.07%)</title><rect x="66.5401%" y="725" width="0.0690%" height="15" fill="rgb(238,51,50)" fg:x="73238" fg:w="76"/><text x="66.7901%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (76 samples, 0.07%)</title><rect x="66.5401%" y="709" width="0.0690%" height="15" fill="rgb(205,194,25)" fg:x="73238" fg:w="76"/><text x="66.7901%" y="719.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (444 samples, 0.40%)</title><rect x="66.6119%" y="757" width="0.4034%" height="15" fill="rgb(215,203,17)" fg:x="73317" fg:w="444"/><text x="66.8619%" y="767.50"></text></g><g><title>core::ptr::read (444 samples, 0.40%)</title><rect x="66.6119%" y="741" width="0.4034%" height="15" fill="rgb(233,112,49)" fg:x="73317" fg:w="444"/><text x="66.8619%" y="751.50"></text></g><g><title>[libc-2.31.so] (444 samples, 0.40%)</title><rect x="66.6119%" y="725" width="0.4034%" height="15" fill="rgb(241,130,26)" fg:x="73317" fg:w="444"/><text x="66.8619%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (223 samples, 0.20%)</title><rect x="67.0152%" y="757" width="0.2026%" height="15" fill="rgb(252,223,19)" fg:x="73761" fg:w="223"/><text x="67.2652%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (223 samples, 0.20%)</title><rect x="67.0152%" y="741" width="0.2026%" height="15" fill="rgb(211,95,25)" fg:x="73761" fg:w="223"/><text x="67.2652%" y="751.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (1,432 samples, 1.30%)</title><rect x="66.2757%" y="789" width="1.3010%" height="15" fill="rgb(251,182,27)" fg:x="72947" fg:w="1432"/><text x="66.5257%" y="799.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (1,387 samples, 1.26%)</title><rect x="66.3166%" y="773" width="1.2602%" height="15" fill="rgb(238,24,4)" fg:x="72992" fg:w="1387"/><text x="66.5666%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (395 samples, 0.36%)</title><rect x="67.2179%" y="757" width="0.3589%" height="15" fill="rgb(224,220,25)" fg:x="73984" fg:w="395"/><text x="67.4679%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_load (395 samples, 0.36%)</title><rect x="67.2179%" y="741" width="0.3589%" height="15" fill="rgb(239,133,26)" fg:x="73984" fg:w="395"/><text x="67.4679%" y="751.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (2,162 samples, 1.96%)</title><rect x="65.7315%" y="805" width="1.9643%" height="15" fill="rgb(211,94,48)" fg:x="72348" fg:w="2162"/><text x="65.9815%" y="815.50">a..</text></g><g><title>event_listener::Event::notify (131 samples, 0.12%)</title><rect x="67.5767%" y="789" width="0.1190%" height="15" fill="rgb(239,87,6)" fg:x="74379" fg:w="131"/><text x="67.8267%" y="799.50"></text></g><g><title>event_listener::full_fence (125 samples, 0.11%)</title><rect x="67.5822%" y="773" width="0.1136%" height="15" fill="rgb(227,62,0)" fg:x="74385" fg:w="125"/><text x="67.8322%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (125 samples, 0.11%)</title><rect x="67.5822%" y="757" width="0.1136%" height="15" fill="rgb(211,226,4)" fg:x="74385" fg:w="125"/><text x="67.8322%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (125 samples, 0.11%)</title><rect x="67.5822%" y="741" width="0.1136%" height="15" fill="rgb(253,38,52)" fg:x="74385" fg:w="125"/><text x="67.8322%" y="751.50"></text></g><g><title>event_listener::Inner::lock (13 samples, 0.01%)</title><rect x="67.7103%" y="757" width="0.0118%" height="15" fill="rgb(229,126,40)" fg:x="74526" fg:w="13"/><text x="67.9603%" y="767.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (13 samples, 0.01%)</title><rect x="67.7103%" y="741" width="0.0118%" height="15" fill="rgb(229,165,44)" fg:x="74526" fg:w="13"/><text x="67.9603%" y="751.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (13 samples, 0.01%)</title><rect x="67.7103%" y="725" width="0.0118%" height="15" fill="rgb(247,95,47)" fg:x="74526" fg:w="13"/><text x="67.9603%" y="735.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (18 samples, 0.02%)</title><rect x="67.7076%" y="773" width="0.0164%" height="15" fill="rgb(216,140,30)" fg:x="74523" fg:w="18"/><text x="67.9576%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (51 samples, 0.05%)</title><rect x="67.7048%" y="805" width="0.0463%" height="15" fill="rgb(246,214,8)" fg:x="74520" fg:w="51"/><text x="67.9548%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (48 samples, 0.04%)</title><rect x="67.7076%" y="789" width="0.0436%" height="15" fill="rgb(227,224,15)" fg:x="74523" fg:w="48"/><text x="67.9576%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (30 samples, 0.03%)</title><rect x="67.7239%" y="773" width="0.0273%" height="15" fill="rgb(233,175,4)" fg:x="74541" fg:w="30"/><text x="67.9739%" y="783.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.03%)</title><rect x="67.7239%" y="757" width="0.0273%" height="15" fill="rgb(221,66,45)" fg:x="74541" fg:w="30"/><text x="67.9739%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (30 samples, 0.03%)</title><rect x="67.7239%" y="741" width="0.0273%" height="15" fill="rgb(221,178,18)" fg:x="74541" fg:w="30"/><text x="67.9739%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_sub (30 samples, 0.03%)</title><rect x="67.7239%" y="725" width="0.0273%" height="15" fill="rgb(213,81,29)" fg:x="74541" fg:w="30"/><text x="67.9739%" y="735.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (55 samples, 0.05%)</title><rect x="67.7539%" y="789" width="0.0500%" height="15" fill="rgb(220,89,49)" fg:x="74574" fg:w="55"/><text x="68.0039%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (55 samples, 0.05%)</title><rect x="67.7539%" y="773" width="0.0500%" height="15" fill="rgb(227,60,33)" fg:x="74574" fg:w="55"/><text x="68.0039%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_add (55 samples, 0.05%)</title><rect x="67.7539%" y="757" width="0.0500%" height="15" fill="rgb(205,113,12)" fg:x="74574" fg:w="55"/><text x="68.0039%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (33 samples, 0.03%)</title><rect x="67.8039%" y="789" width="0.0300%" height="15" fill="rgb(211,32,1)" fg:x="74629" fg:w="33"/><text x="68.0539%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (33 samples, 0.03%)</title><rect x="67.8039%" y="773" width="0.0300%" height="15" fill="rgb(246,2,12)" fg:x="74629" fg:w="33"/><text x="68.0539%" y="783.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.03%)</title><rect x="67.8039%" y="757" width="0.0300%" height="15" fill="rgb(243,37,27)" fg:x="74629" fg:w="33"/><text x="68.0539%" y="767.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (29 samples, 0.03%)</title><rect x="67.8075%" y="741" width="0.0263%" height="15" fill="rgb(248,211,31)" fg:x="74633" fg:w="29"/><text x="68.0575%" y="751.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (29 samples, 0.03%)</title><rect x="67.8075%" y="725" width="0.0263%" height="15" fill="rgb(242,146,47)" fg:x="74633" fg:w="29"/><text x="68.0575%" y="735.50"></text></g><g><title>__GI___pthread_mutex_unlock (28 samples, 0.03%)</title><rect x="67.8084%" y="709" width="0.0254%" height="15" fill="rgb(206,70,20)" fg:x="74634" fg:w="28"/><text x="68.0584%" y="719.50"></text></g><g><title>event_listener::Inner::lock (58 samples, 0.05%)</title><rect x="67.8357%" y="789" width="0.0527%" height="15" fill="rgb(215,10,51)" fg:x="74664" fg:w="58"/><text x="68.0857%" y="799.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (56 samples, 0.05%)</title><rect x="67.8375%" y="773" width="0.0509%" height="15" fill="rgb(243,178,53)" fg:x="74666" fg:w="56"/><text x="68.0875%" y="783.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (56 samples, 0.05%)</title><rect x="67.8375%" y="757" width="0.0509%" height="15" fill="rgb(233,221,20)" fg:x="74666" fg:w="56"/><text x="68.0875%" y="767.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (56 samples, 0.05%)</title><rect x="67.8375%" y="741" width="0.0509%" height="15" fill="rgb(218,95,35)" fg:x="74666" fg:w="56"/><text x="68.0875%" y="751.50"></text></g><g><title>__GI___pthread_mutex_lock (56 samples, 0.05%)</title><rect x="67.8375%" y="725" width="0.0509%" height="15" fill="rgb(229,13,5)" fg:x="74666" fg:w="56"/><text x="68.0875%" y="735.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,182 samples, 2.89%)</title><rect x="65.0228%" y="885" width="2.8910%" height="15" fill="rgb(252,164,30)" fg:x="71568" fg:w="3182"/><text x="65.2728%" y="895.50">&lt;a..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (3,182 samples, 2.89%)</title><rect x="65.0228%" y="869" width="2.8910%" height="15" fill="rgb(232,68,36)" fg:x="71568" fg:w="3182"/><text x="65.2728%" y="879.50">&lt;t..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (3,182 samples, 2.89%)</title><rect x="65.0228%" y="853" width="2.8910%" height="15" fill="rgb(219,59,54)" fg:x="71568" fg:w="3182"/><text x="65.2728%" y="863.50">&lt;a..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (3,182 samples, 2.89%)</title><rect x="65.0228%" y="837" width="2.8910%" height="15" fill="rgb(250,92,33)" fg:x="71568" fg:w="3182"/><text x="65.2728%" y="847.50">&lt;a..</text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (3,182 samples, 2.89%)</title><rect x="65.0228%" y="821" width="2.8910%" height="15" fill="rgb(229,162,54)" fg:x="71568" fg:w="3182"/><text x="65.2728%" y="831.50">&lt;a..</text></g><g><title>event_listener::Event::listen (179 samples, 0.16%)</title><rect x="67.7512%" y="805" width="0.1626%" height="15" fill="rgb(244,114,52)" fg:x="74571" fg:w="179"/><text x="68.0012%" y="815.50"></text></g><g><title>event_listener::full_fence (24 samples, 0.02%)</title><rect x="67.8920%" y="789" width="0.0218%" height="15" fill="rgb(212,211,43)" fg:x="74726" fg:w="24"/><text x="68.1420%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (24 samples, 0.02%)</title><rect x="67.8920%" y="773" width="0.0218%" height="15" fill="rgb(226,147,8)" fg:x="74726" fg:w="24"/><text x="68.1420%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (24 samples, 0.02%)</title><rect x="67.8920%" y="757" width="0.0218%" height="15" fill="rgb(226,23,13)" fg:x="74726" fg:w="24"/><text x="68.1420%" y="767.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_map::{{closure}} (20 samples, 0.02%)</title><rect x="67.9638%" y="421" width="0.0182%" height="15" fill="rgb(240,63,4)" fg:x="74805" fg:w="20"/><text x="68.2138%" y="431.50"></text></g><g><title>rmp::encode::write_map_len (19 samples, 0.02%)</title><rect x="67.9647%" y="405" width="0.0173%" height="15" fill="rgb(221,1,32)" fg:x="74806" fg:w="19"/><text x="68.2147%" y="415.50"></text></g><g><title>rmp::encode::write_marker (13 samples, 0.01%)</title><rect x="67.9701%" y="389" width="0.0118%" height="15" fill="rgb(242,117,10)" fg:x="74812" fg:w="13"/><text x="68.2201%" y="399.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_map (23 samples, 0.02%)</title><rect x="67.9638%" y="453" width="0.0209%" height="15" fill="rgb(249,172,44)" fg:x="74805" fg:w="23"/><text x="68.2138%" y="463.50"></text></g><g><title>rmp_serde::encode::Serializer&lt;W,C&gt;::maybe_unknown_len_compound (23 samples, 0.02%)</title><rect x="67.9638%" y="437" width="0.0209%" height="15" fill="rgb(244,46,45)" fg:x="74805" fg:w="23"/><text x="68.2138%" y="447.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (122 samples, 0.11%)</title><rect x="67.9847%" y="453" width="0.1108%" height="15" fill="rgb(206,43,17)" fg:x="74828" fg:w="122"/><text x="68.2347%" y="463.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (57 samples, 0.05%)</title><rect x="68.0955%" y="453" width="0.0518%" height="15" fill="rgb(239,218,39)" fg:x="74950" fg:w="57"/><text x="68.3455%" y="463.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as abi_stable::traits::IntoReprRust&gt;::into_rust (42 samples, 0.04%)</title><rect x="68.1573%" y="437" width="0.0382%" height="15" fill="rgb(208,169,54)" fg:x="75018" fg:w="42"/><text x="68.4073%" y="447.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (42 samples, 0.04%)</title><rect x="68.1573%" y="421" width="0.0382%" height="15" fill="rgb(247,25,42)" fg:x="75018" fg:w="42"/><text x="68.4073%" y="431.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (42 samples, 0.04%)</title><rect x="68.1573%" y="405" width="0.0382%" height="15" fill="rgb(226,23,31)" fg:x="75018" fg:w="42"/><text x="68.4073%" y="415.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::next_n (58 samples, 0.05%)</title><rect x="68.3226%" y="341" width="0.0527%" height="15" fill="rgb(247,16,28)" fg:x="75200" fg:w="58"/><text x="68.5726%" y="351.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (56 samples, 0.05%)</title><rect x="68.3245%" y="325" width="0.0509%" height="15" fill="rgb(231,147,38)" fg:x="75202" fg:w="56"/><text x="68.5745%" y="335.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (69 samples, 0.06%)</title><rect x="68.3753%" y="341" width="0.0627%" height="15" fill="rgb(253,81,48)" fg:x="75258" fg:w="69"/><text x="68.6253%" y="351.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (198 samples, 0.18%)</title><rect x="68.2600%" y="389" width="0.1799%" height="15" fill="rgb(249,222,43)" fg:x="75131" fg:w="198"/><text x="68.5100%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (198 samples, 0.18%)</title><rect x="68.2600%" y="373" width="0.1799%" height="15" fill="rgb(221,3,27)" fg:x="75131" fg:w="198"/><text x="68.5100%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (175 samples, 0.16%)</title><rect x="68.2808%" y="357" width="0.1590%" height="15" fill="rgb(228,180,5)" fg:x="75154" fg:w="175"/><text x="68.5308%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,069 samples, 0.97%)</title><rect x="68.2445%" y="405" width="0.9712%" height="15" fill="rgb(227,131,42)" fg:x="75114" fg:w="1069"/><text x="68.4945%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (854 samples, 0.78%)</title><rect x="68.4398%" y="389" width="0.7759%" height="15" fill="rgb(212,3,39)" fg:x="75329" fg:w="854"/><text x="68.6898%" y="399.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (854 samples, 0.78%)</title><rect x="68.4398%" y="373" width="0.7759%" height="15" fill="rgb(226,45,5)" fg:x="75329" fg:w="854"/><text x="68.6898%" y="383.50"></text></g><g><title>core::ops::function::FnMut::call_mut (854 samples, 0.78%)</title><rect x="68.4398%" y="357" width="0.7759%" height="15" fill="rgb(215,167,45)" fg:x="75329" fg:w="854"/><text x="68.6898%" y="367.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::map_iter_ref (854 samples, 0.78%)</title><rect x="68.4398%" y="341" width="0.7759%" height="15" fill="rgb(250,218,53)" fg:x="75329" fg:w="854"/><text x="68.6898%" y="351.50"></text></g><g><title>abi_stable::std_types::map::map_key::MapKey&lt;K&gt;::as_ref (854 samples, 0.78%)</title><rect x="68.4398%" y="325" width="0.7759%" height="15" fill="rgb(207,140,0)" fg:x="75329" fg:w="854"/><text x="68.6898%" y="335.50"></text></g><g><title>abi_stable::erased_types::iterator::next (1,140 samples, 1.04%)</title><rect x="68.2000%" y="437" width="1.0357%" height="15" fill="rgb(238,133,51)" fg:x="75065" fg:w="1140"/><text x="68.4500%" y="447.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (1,091 samples, 0.99%)</title><rect x="68.2445%" y="421" width="0.9912%" height="15" fill="rgb(218,203,53)" fg:x="75114" fg:w="1091"/><text x="68.4945%" y="431.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl abi_stable::traits::IntoReprC for core::option::Option&lt;T&gt;&gt;::into_c (22 samples, 0.02%)</title><rect x="69.2157%" y="405" width="0.0200%" height="15" fill="rgb(226,184,25)" fg:x="76183" fg:w="22"/><text x="69.4657%" y="415.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (22 samples, 0.02%)</title><rect x="69.2157%" y="389" width="0.0200%" height="15" fill="rgb(231,121,21)" fg:x="76183" fg:w="22"/><text x="69.4657%" y="399.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as core::convert::From&lt;core::option::Option&lt;T&gt;&gt;&gt;::from (22 samples, 0.02%)</title><rect x="69.2157%" y="373" width="0.0200%" height="15" fill="rgb(251,14,34)" fg:x="76183" fg:w="22"/><text x="69.4657%" y="383.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (14 samples, 0.01%)</title><rect x="69.2675%" y="405" width="0.0127%" height="15" fill="rgb(249,193,11)" fg:x="76240" fg:w="14"/><text x="69.5175%" y="415.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (14 samples, 0.01%)</title><rect x="69.2675%" y="389" width="0.0127%" height="15" fill="rgb(220,172,37)" fg:x="76240" fg:w="14"/><text x="69.5175%" y="399.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (1,282 samples, 1.16%)</title><rect x="68.1573%" y="453" width="1.1648%" height="15" fill="rgb(231,229,43)" fg:x="75018" fg:w="1282"/><text x="68.4073%" y="463.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (95 samples, 0.09%)</title><rect x="69.2357%" y="437" width="0.0863%" height="15" fill="rgb(250,161,5)" fg:x="76205" fg:w="95"/><text x="69.4857%" y="447.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (95 samples, 0.09%)</title><rect x="69.2357%" y="421" width="0.0863%" height="15" fill="rgb(218,225,18)" fg:x="76205" fg:w="95"/><text x="69.4857%" y="431.50"></text></g><g><title>abi_stable::erased_types::vtable::_::&lt;impl abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;&gt;::_iter (46 samples, 0.04%)</title><rect x="69.2803%" y="405" width="0.0418%" height="15" fill="rgb(245,45,42)" fg:x="76254" fg:w="46"/><text x="69.5303%" y="415.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (21 samples, 0.02%)</title><rect x="69.3329%" y="373" width="0.0191%" height="15" fill="rgb(211,115,1)" fg:x="76312" fg:w="21"/><text x="69.5829%" y="383.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (18 samples, 0.02%)</title><rect x="69.3357%" y="357" width="0.0164%" height="15" fill="rgb(248,133,52)" fg:x="76315" fg:w="18"/><text x="69.5857%" y="367.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (18 samples, 0.02%)</title><rect x="69.3357%" y="341" width="0.0164%" height="15" fill="rgb(238,100,21)" fg:x="76315" fg:w="18"/><text x="69.5857%" y="351.50"></text></g><g><title>alloc::alloc::exchange_malloc (14 samples, 0.01%)</title><rect x="69.3393%" y="325" width="0.0127%" height="15" fill="rgb(247,144,11)" fg:x="76319" fg:w="14"/><text x="69.5893%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 0.01%)</title><rect x="69.3393%" y="309" width="0.0127%" height="15" fill="rgb(206,164,16)" fg:x="76319" fg:w="14"/><text x="69.5893%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.01%)</title><rect x="69.3393%" y="293" width="0.0127%" height="15" fill="rgb(222,34,3)" fg:x="76319" fg:w="14"/><text x="69.5893%" y="303.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.01%)</title><rect x="69.3393%" y="277" width="0.0127%" height="15" fill="rgb(248,82,4)" fg:x="76319" fg:w="14"/><text x="69.5893%" y="287.50"></text></g><g><title>__rg_alloc (14 samples, 0.01%)</title><rect x="69.3393%" y="261" width="0.0127%" height="15" fill="rgb(228,81,46)" fg:x="76319" fg:w="14"/><text x="69.5893%" y="271.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (14 samples, 0.01%)</title><rect x="69.3393%" y="245" width="0.0127%" height="15" fill="rgb(227,67,47)" fg:x="76319" fg:w="14"/><text x="69.5893%" y="255.50"></text></g><g><title>sn_rust_alloc (14 samples, 0.01%)</title><rect x="69.3393%" y="229" width="0.0127%" height="15" fill="rgb(215,93,53)" fg:x="76319" fg:w="14"/><text x="69.5893%" y="239.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (184 samples, 0.17%)</title><rect x="69.3220%" y="453" width="0.1672%" height="15" fill="rgb(248,194,39)" fg:x="76300" fg:w="184"/><text x="69.5720%" y="463.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (182 samples, 0.17%)</title><rect x="69.3239%" y="437" width="0.1654%" height="15" fill="rgb(215,5,19)" fg:x="76302" fg:w="182"/><text x="69.5739%" y="447.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (182 samples, 0.17%)</title><rect x="69.3239%" y="421" width="0.1654%" height="15" fill="rgb(226,215,51)" fg:x="76302" fg:w="182"/><text x="69.5739%" y="431.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (172 samples, 0.16%)</title><rect x="69.3329%" y="405" width="0.1563%" height="15" fill="rgb(225,56,26)" fg:x="76312" fg:w="172"/><text x="69.5829%" y="415.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (172 samples, 0.16%)</title><rect x="69.3329%" y="389" width="0.1563%" height="15" fill="rgb(222,75,29)" fg:x="76312" fg:w="172"/><text x="69.5829%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (151 samples, 0.14%)</title><rect x="69.3520%" y="373" width="0.1372%" height="15" fill="rgb(236,139,6)" fg:x="76333" fg:w="151"/><text x="69.6020%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (151 samples, 0.14%)</title><rect x="69.3520%" y="357" width="0.1372%" height="15" fill="rgb(223,137,36)" fg:x="76333" fg:w="151"/><text x="69.6020%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (150 samples, 0.14%)</title><rect x="69.3529%" y="341" width="0.1363%" height="15" fill="rgb(226,99,2)" fg:x="76334" fg:w="150"/><text x="69.6029%" y="351.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (147 samples, 0.13%)</title><rect x="69.3557%" y="325" width="0.1336%" height="15" fill="rgb(206,133,23)" fg:x="76337" fg:w="147"/><text x="69.6057%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (147 samples, 0.13%)</title><rect x="69.3557%" y="309" width="0.1336%" height="15" fill="rgb(243,173,15)" fg:x="76337" fg:w="147"/><text x="69.6057%" y="319.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::len (74 samples, 0.07%)</title><rect x="69.4892%" y="453" width="0.0672%" height="15" fill="rgb(228,69,28)" fg:x="76484" fg:w="74"/><text x="69.7392%" y="463.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::len (69 samples, 0.06%)</title><rect x="69.4938%" y="437" width="0.0627%" height="15" fill="rgb(212,51,22)" fg:x="76489" fg:w="69"/><text x="69.7438%" y="447.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (69 samples, 0.06%)</title><rect x="69.4938%" y="421" width="0.0627%" height="15" fill="rgb(227,113,0)" fg:x="76489" fg:w="69"/><text x="69.7438%" y="431.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (69 samples, 0.06%)</title><rect x="69.4938%" y="405" width="0.0627%" height="15" fill="rgb(252,84,27)" fg:x="76489" fg:w="69"/><text x="69.7438%" y="415.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::len::{{closure}} (69 samples, 0.06%)</title><rect x="69.4938%" y="389" width="0.0627%" height="15" fill="rgb(223,145,39)" fg:x="76489" fg:w="69"/><text x="69.7438%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::len (69 samples, 0.06%)</title><rect x="69.4938%" y="373" width="0.0627%" height="15" fill="rgb(239,219,30)" fg:x="76489" fg:w="69"/><text x="69.7438%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt; (67 samples, 0.06%)</title><rect x="69.5564%" y="453" width="0.0609%" height="15" fill="rgb(224,196,39)" fg:x="76558" fg:w="67"/><text x="69.8064%" y="463.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (67 samples, 0.06%)</title><rect x="69.5564%" y="437" width="0.0609%" height="15" fill="rgb(205,35,43)" fg:x="76558" fg:w="67"/><text x="69.8064%" y="447.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (67 samples, 0.06%)</title><rect x="69.5564%" y="421" width="0.0609%" height="15" fill="rgb(228,201,21)" fg:x="76558" fg:w="67"/><text x="69.8064%" y="431.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (64 samples, 0.06%)</title><rect x="69.5592%" y="405" width="0.0581%" height="15" fill="rgb(237,118,16)" fg:x="76561" fg:w="64"/><text x="69.8092%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (64 samples, 0.06%)</title><rect x="69.5592%" y="389" width="0.0581%" height="15" fill="rgb(241,17,19)" fg:x="76561" fg:w="64"/><text x="69.8092%" y="399.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (64 samples, 0.06%)</title><rect x="69.5592%" y="373" width="0.0581%" height="15" fill="rgb(214,10,25)" fg:x="76561" fg:w="64"/><text x="69.8092%" y="383.50"></text></g><g><title>sn_rust_dealloc (55 samples, 0.05%)</title><rect x="69.5674%" y="357" width="0.0500%" height="15" fill="rgb(238,37,29)" fg:x="76570" fg:w="55"/><text x="69.8174%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (43 samples, 0.04%)</title><rect x="69.7872%" y="229" width="0.0391%" height="15" fill="rgb(253,83,25)" fg:x="76812" fg:w="43"/><text x="70.0372%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (43 samples, 0.04%)</title><rect x="69.7872%" y="213" width="0.0391%" height="15" fill="rgb(234,192,12)" fg:x="76812" fg:w="43"/><text x="70.0372%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (53 samples, 0.05%)</title><rect x="69.7809%" y="261" width="0.0482%" height="15" fill="rgb(241,216,45)" fg:x="76805" fg:w="53"/><text x="70.0309%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (49 samples, 0.04%)</title><rect x="69.7845%" y="245" width="0.0445%" height="15" fill="rgb(242,22,33)" fg:x="76809" fg:w="49"/><text x="70.0345%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (856 samples, 0.78%)</title><rect x="69.8290%" y="261" width="0.7777%" height="15" fill="rgb(231,105,49)" fg:x="76858" fg:w="856"/><text x="70.0790%" y="271.50"></text></g><g><title>[libc-2.31.so] (816 samples, 0.74%)</title><rect x="69.8654%" y="245" width="0.7414%" height="15" fill="rgb(218,204,15)" fg:x="76898" fg:w="816"/><text x="70.1154%" y="255.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (920 samples, 0.84%)</title><rect x="69.7718%" y="357" width="0.8359%" height="15" fill="rgb(235,138,41)" fg:x="76795" fg:w="920"/><text x="70.0218%" y="367.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (920 samples, 0.84%)</title><rect x="69.7718%" y="341" width="0.8359%" height="15" fill="rgb(246,0,9)" fg:x="76795" fg:w="920"/><text x="70.0218%" y="351.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (920 samples, 0.84%)</title><rect x="69.7718%" y="325" width="0.8359%" height="15" fill="rgb(210,74,4)" fg:x="76795" fg:w="920"/><text x="70.0218%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (920 samples, 0.84%)</title><rect x="69.7718%" y="309" width="0.8359%" height="15" fill="rgb(250,60,41)" fg:x="76795" fg:w="920"/><text x="70.0218%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (920 samples, 0.84%)</title><rect x="69.7718%" y="293" width="0.8359%" height="15" fill="rgb(220,115,12)" fg:x="76795" fg:w="920"/><text x="70.0218%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (920 samples, 0.84%)</title><rect x="69.7718%" y="277" width="0.8359%" height="15" fill="rgb(237,100,13)" fg:x="76795" fg:w="920"/><text x="70.0218%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (37 samples, 0.03%)</title><rect x="70.7603%" y="213" width="0.0336%" height="15" fill="rgb(213,55,26)" fg:x="77883" fg:w="37"/><text x="71.0103%" y="223.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (18 samples, 0.02%)</title><rect x="70.8193%" y="149" width="0.0164%" height="15" fill="rgb(216,17,4)" fg:x="77948" fg:w="18"/><text x="71.0693%" y="159.50"></text></g><g><title>[libc-2.31.so] (72 samples, 0.07%)</title><rect x="71.0892%" y="37" width="0.0654%" height="15" fill="rgb(220,153,47)" fg:x="78245" fg:w="72"/><text x="71.3392%" y="47.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (25 samples, 0.02%)</title><rect x="71.1646%" y="37" width="0.0227%" height="15" fill="rgb(215,131,9)" fg:x="78328" fg:w="25"/><text x="71.4146%" y="47.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (382 samples, 0.35%)</title><rect x="70.8575%" y="133" width="0.3471%" height="15" fill="rgb(233,46,42)" fg:x="77990" fg:w="382"/><text x="71.1075%" y="143.50"></text></g><g><title>alloc::alloc::Global::grow_impl (382 samples, 0.35%)</title><rect x="70.8575%" y="117" width="0.3471%" height="15" fill="rgb(226,86,7)" fg:x="77990" fg:w="382"/><text x="71.1075%" y="127.50"></text></g><g><title>alloc::alloc::realloc (382 samples, 0.35%)</title><rect x="70.8575%" y="101" width="0.3471%" height="15" fill="rgb(239,226,21)" fg:x="77990" fg:w="382"/><text x="71.1075%" y="111.50"></text></g><g><title>__rg_realloc (382 samples, 0.35%)</title><rect x="70.8575%" y="85" width="0.3471%" height="15" fill="rgb(244,137,22)" fg:x="77990" fg:w="382"/><text x="71.1075%" y="95.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (382 samples, 0.35%)</title><rect x="70.8575%" y="69" width="0.3471%" height="15" fill="rgb(211,139,35)" fg:x="77990" fg:w="382"/><text x="71.1075%" y="79.50"></text></g><g><title>sn_rust_realloc (382 samples, 0.35%)</title><rect x="70.8575%" y="53" width="0.3471%" height="15" fill="rgb(214,62,50)" fg:x="77990" fg:w="382"/><text x="71.1075%" y="63.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (19 samples, 0.02%)</title><rect x="71.1873%" y="37" width="0.0173%" height="15" fill="rgb(212,113,44)" fg:x="78353" fg:w="19"/><text x="71.4373%" y="47.50"></text></g><g><title>alloc::raw_vec::finish_grow (398 samples, 0.36%)</title><rect x="70.8448%" y="149" width="0.3616%" height="15" fill="rgb(226,150,43)" fg:x="77976" fg:w="398"/><text x="71.0948%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (458 samples, 0.42%)</title><rect x="70.7939%" y="213" width="0.4161%" height="15" fill="rgb(250,71,37)" fg:x="77920" fg:w="458"/><text x="71.0439%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (458 samples, 0.42%)</title><rect x="70.7939%" y="197" width="0.4161%" height="15" fill="rgb(219,76,19)" fg:x="77920" fg:w="458"/><text x="71.0439%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (441 samples, 0.40%)</title><rect x="70.8093%" y="181" width="0.4007%" height="15" fill="rgb(250,39,11)" fg:x="77937" fg:w="441"/><text x="71.0593%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (441 samples, 0.40%)</title><rect x="70.8093%" y="165" width="0.4007%" height="15" fill="rgb(230,64,31)" fg:x="77937" fg:w="441"/><text x="71.0593%" y="175.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (529 samples, 0.48%)</title><rect x="70.7457%" y="325" width="0.4806%" height="15" fill="rgb(208,222,23)" fg:x="77867" fg:w="529"/><text x="70.9957%" y="335.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (529 samples, 0.48%)</title><rect x="70.7457%" y="309" width="0.4806%" height="15" fill="rgb(227,125,18)" fg:x="77867" fg:w="529"/><text x="70.9957%" y="319.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (529 samples, 0.48%)</title><rect x="70.7457%" y="293" width="0.4806%" height="15" fill="rgb(234,210,9)" fg:x="77867" fg:w="529"/><text x="70.9957%" y="303.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (529 samples, 0.48%)</title><rect x="70.7457%" y="277" width="0.4806%" height="15" fill="rgb(217,127,24)" fg:x="77867" fg:w="529"/><text x="70.9957%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (529 samples, 0.48%)</title><rect x="70.7457%" y="261" width="0.4806%" height="15" fill="rgb(239,141,48)" fg:x="77867" fg:w="529"/><text x="70.9957%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (529 samples, 0.48%)</title><rect x="70.7457%" y="245" width="0.4806%" height="15" fill="rgb(227,109,8)" fg:x="77867" fg:w="529"/><text x="70.9957%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (529 samples, 0.48%)</title><rect x="70.7457%" y="229" width="0.4806%" height="15" fill="rgb(235,184,23)" fg:x="77867" fg:w="529"/><text x="70.9957%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (18 samples, 0.02%)</title><rect x="71.2100%" y="213" width="0.0164%" height="15" fill="rgb(227,226,48)" fg:x="78378" fg:w="18"/><text x="71.4600%" y="223.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeMap&gt;::serialize_key (1,951 samples, 1.77%)</title><rect x="69.6618%" y="437" width="1.7726%" height="15" fill="rgb(206,150,11)" fg:x="76674" fg:w="1951"/><text x="69.9118%" y="447.50">&lt;..</text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeSeq&gt;::serialize_element (1,951 samples, 1.77%)</title><rect x="69.6618%" y="421" width="1.7726%" height="15" fill="rgb(254,2,33)" fg:x="76674" fg:w="1951"/><text x="69.9118%" y="431.50">&lt;..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for str&gt;::serialize (1,911 samples, 1.74%)</title><rect x="69.6982%" y="405" width="1.7362%" height="15" fill="rgb(243,160,20)" fg:x="76714" fg:w="1911"/><text x="69.9482%" y="415.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_str (1,911 samples, 1.74%)</title><rect x="69.6982%" y="389" width="1.7362%" height="15" fill="rgb(218,208,30)" fg:x="76714" fg:w="1911"/><text x="69.9482%" y="399.50"></text></g><g><title>rmp::encode::str::write_str (1,831 samples, 1.66%)</title><rect x="69.7709%" y="373" width="1.6635%" height="15" fill="rgb(224,120,49)" fg:x="76794" fg:w="1831"/><text x="70.0209%" y="383.50"></text></g><g><title>rmp::encode::str::write_str_len (910 samples, 0.83%)</title><rect x="70.6076%" y="357" width="0.8268%" height="15" fill="rgb(246,12,2)" fg:x="77715" fg:w="910"/><text x="70.8576%" y="367.50"></text></g><g><title>rmp::encode::write_marker (786 samples, 0.71%)</title><rect x="70.7203%" y="341" width="0.7141%" height="15" fill="rgb(236,117,3)" fg:x="77839" fg:w="786"/><text x="70.9703%" y="351.50"></text></g><g><title>rmp::marker::Marker::to_u8 (229 samples, 0.21%)</title><rect x="71.2264%" y="325" width="0.2081%" height="15" fill="rgb(216,128,52)" fg:x="78396" fg:w="229"/><text x="71.4764%" y="335.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_bool (52 samples, 0.05%)</title><rect x="71.7488%" y="389" width="0.0472%" height="15" fill="rgb(246,145,19)" fg:x="78971" fg:w="52"/><text x="71.9988%" y="399.50"></text></g><g><title>rmp::encode::write_bool (45 samples, 0.04%)</title><rect x="71.7551%" y="373" width="0.0409%" height="15" fill="rgb(222,11,46)" fg:x="78978" fg:w="45"/><text x="72.0051%" y="383.50"></text></g><g><title>rmp::encode::write_marker (37 samples, 0.03%)</title><rect x="71.7624%" y="357" width="0.0336%" height="15" fill="rgb(245,82,36)" fg:x="78986" fg:w="37"/><text x="72.0124%" y="367.50"></text></g><g><title>rmp::marker::Marker::to_u8 (23 samples, 0.02%)</title><rect x="71.7751%" y="341" width="0.0209%" height="15" fill="rgb(250,73,51)" fg:x="79000" fg:w="23"/><text x="72.0251%" y="351.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (18 samples, 0.02%)</title><rect x="71.8151%" y="309" width="0.0164%" height="15" fill="rgb(221,189,23)" fg:x="79044" fg:w="18"/><text x="72.0651%" y="319.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (18 samples, 0.02%)</title><rect x="71.8151%" y="293" width="0.0164%" height="15" fill="rgb(210,33,7)" fg:x="79044" fg:w="18"/><text x="72.0651%" y="303.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (18 samples, 0.02%)</title><rect x="71.8151%" y="277" width="0.0164%" height="15" fill="rgb(210,107,22)" fg:x="79044" fg:w="18"/><text x="72.0651%" y="287.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (18 samples, 0.02%)</title><rect x="71.8151%" y="261" width="0.0164%" height="15" fill="rgb(222,116,37)" fg:x="79044" fg:w="18"/><text x="72.0651%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (18 samples, 0.02%)</title><rect x="71.8151%" y="245" width="0.0164%" height="15" fill="rgb(254,17,48)" fg:x="79044" fg:w="18"/><text x="72.0651%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (18 samples, 0.02%)</title><rect x="71.8151%" y="229" width="0.0164%" height="15" fill="rgb(224,36,32)" fg:x="79044" fg:w="18"/><text x="72.0651%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (18 samples, 0.02%)</title><rect x="71.8151%" y="213" width="0.0164%" height="15" fill="rgb(232,90,46)" fg:x="79044" fg:w="18"/><text x="72.0651%" y="223.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_seq::{{closure}} (41 samples, 0.04%)</title><rect x="71.7960%" y="357" width="0.0373%" height="15" fill="rgb(241,66,40)" fg:x="79023" fg:w="41"/><text x="72.0460%" y="367.50"></text></g><g><title>rmp::encode::write_array_len (39 samples, 0.04%)</title><rect x="71.7978%" y="341" width="0.0354%" height="15" fill="rgb(249,184,29)" fg:x="79025" fg:w="39"/><text x="72.0478%" y="351.50"></text></g><g><title>rmp::encode::write_marker (23 samples, 0.02%)</title><rect x="71.8124%" y="325" width="0.0209%" height="15" fill="rgb(231,181,1)" fg:x="79041" fg:w="23"/><text x="72.0624%" y="335.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_seq (47 samples, 0.04%)</title><rect x="71.7960%" y="389" width="0.0427%" height="15" fill="rgb(224,94,2)" fg:x="79023" fg:w="47"/><text x="72.0460%" y="399.50"></text></g><g><title>rmp_serde::encode::Serializer&lt;W,C&gt;::maybe_unknown_len_compound (47 samples, 0.04%)</title><rect x="71.7960%" y="373" width="0.0427%" height="15" fill="rgb(229,170,15)" fg:x="79023" fg:w="47"/><text x="72.0460%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (30 samples, 0.03%)</title><rect x="71.9241%" y="229" width="0.0273%" height="15" fill="rgb(240,127,35)" fg:x="79164" fg:w="30"/><text x="72.1741%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (27 samples, 0.02%)</title><rect x="71.9268%" y="213" width="0.0245%" height="15" fill="rgb(248,196,34)" fg:x="79167" fg:w="27"/><text x="72.1768%" y="223.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (15 samples, 0.01%)</title><rect x="71.9623%" y="197" width="0.0136%" height="15" fill="rgb(236,137,7)" fg:x="79206" fg:w="15"/><text x="72.2123%" y="207.50"></text></g><g><title>[libc-2.31.so] (20 samples, 0.02%)</title><rect x="72.1985%" y="85" width="0.0182%" height="15" fill="rgb(235,127,16)" fg:x="79466" fg:w="20"/><text x="72.4485%" y="95.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (274 samples, 0.25%)</title><rect x="71.9923%" y="181" width="0.2489%" height="15" fill="rgb(250,192,54)" fg:x="79239" fg:w="274"/><text x="72.2423%" y="191.50"></text></g><g><title>alloc::alloc::Global::grow_impl (274 samples, 0.25%)</title><rect x="71.9923%" y="165" width="0.2489%" height="15" fill="rgb(218,98,20)" fg:x="79239" fg:w="274"/><text x="72.2423%" y="175.50"></text></g><g><title>alloc::alloc::realloc (271 samples, 0.25%)</title><rect x="71.9950%" y="149" width="0.2462%" height="15" fill="rgb(230,176,47)" fg:x="79242" fg:w="271"/><text x="72.2450%" y="159.50"></text></g><g><title>__rg_realloc (271 samples, 0.25%)</title><rect x="71.9950%" y="133" width="0.2462%" height="15" fill="rgb(244,2,33)" fg:x="79242" fg:w="271"/><text x="72.2450%" y="143.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (271 samples, 0.25%)</title><rect x="71.9950%" y="117" width="0.2462%" height="15" fill="rgb(231,100,17)" fg:x="79242" fg:w="271"/><text x="72.2450%" y="127.50"></text></g><g><title>sn_rust_realloc (270 samples, 0.25%)</title><rect x="71.9959%" y="101" width="0.2453%" height="15" fill="rgb(245,23,12)" fg:x="79243" fg:w="270"/><text x="72.2459%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (289 samples, 0.26%)</title><rect x="71.9795%" y="197" width="0.2626%" height="15" fill="rgb(249,55,22)" fg:x="79225" fg:w="289"/><text x="72.2295%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (363 samples, 0.33%)</title><rect x="71.9141%" y="261" width="0.3298%" height="15" fill="rgb(207,134,9)" fg:x="79153" fg:w="363"/><text x="72.1641%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (360 samples, 0.33%)</title><rect x="71.9168%" y="245" width="0.3271%" height="15" fill="rgb(218,134,0)" fg:x="79156" fg:w="360"/><text x="72.1668%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (322 samples, 0.29%)</title><rect x="71.9514%" y="229" width="0.2926%" height="15" fill="rgb(213,212,33)" fg:x="79194" fg:w="322"/><text x="72.2014%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (322 samples, 0.29%)</title><rect x="71.9514%" y="213" width="0.2926%" height="15" fill="rgb(252,106,18)" fg:x="79194" fg:w="322"/><text x="72.2014%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (453 samples, 0.41%)</title><rect x="72.2439%" y="261" width="0.4116%" height="15" fill="rgb(208,126,42)" fg:x="79516" fg:w="453"/><text x="72.4939%" y="271.50"></text></g><g><title>[libc-2.31.so] (426 samples, 0.39%)</title><rect x="72.2685%" y="245" width="0.3870%" height="15" fill="rgb(246,175,29)" fg:x="79543" fg:w="426"/><text x="72.5185%" y="255.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (837 samples, 0.76%)</title><rect x="71.8969%" y="357" width="0.7605%" height="15" fill="rgb(215,13,50)" fg:x="79134" fg:w="837"/><text x="72.1469%" y="367.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (837 samples, 0.76%)</title><rect x="71.8969%" y="341" width="0.7605%" height="15" fill="rgb(216,172,15)" fg:x="79134" fg:w="837"/><text x="72.1469%" y="351.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (837 samples, 0.76%)</title><rect x="71.8969%" y="325" width="0.7605%" height="15" fill="rgb(212,103,13)" fg:x="79134" fg:w="837"/><text x="72.1469%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (837 samples, 0.76%)</title><rect x="71.8969%" y="309" width="0.7605%" height="15" fill="rgb(231,171,36)" fg:x="79134" fg:w="837"/><text x="72.1469%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (837 samples, 0.76%)</title><rect x="71.8969%" y="293" width="0.7605%" height="15" fill="rgb(250,123,20)" fg:x="79134" fg:w="837"/><text x="72.1469%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (837 samples, 0.76%)</title><rect x="71.8969%" y="277" width="0.7605%" height="15" fill="rgb(212,53,50)" fg:x="79134" fg:w="837"/><text x="72.1469%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (36 samples, 0.03%)</title><rect x="72.7364%" y="213" width="0.0327%" height="15" fill="rgb(243,54,12)" fg:x="80058" fg:w="36"/><text x="72.9864%" y="223.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (69 samples, 0.06%)</title><rect x="72.7236%" y="325" width="0.0627%" height="15" fill="rgb(234,101,34)" fg:x="80044" fg:w="69"/><text x="72.9736%" y="335.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (69 samples, 0.06%)</title><rect x="72.7236%" y="309" width="0.0627%" height="15" fill="rgb(254,67,22)" fg:x="80044" fg:w="69"/><text x="72.9736%" y="319.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (69 samples, 0.06%)</title><rect x="72.7236%" y="293" width="0.0627%" height="15" fill="rgb(250,35,47)" fg:x="80044" fg:w="69"/><text x="72.9736%" y="303.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (69 samples, 0.06%)</title><rect x="72.7236%" y="277" width="0.0627%" height="15" fill="rgb(226,126,38)" fg:x="80044" fg:w="69"/><text x="72.9736%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (69 samples, 0.06%)</title><rect x="72.7236%" y="261" width="0.0627%" height="15" fill="rgb(216,138,53)" fg:x="80044" fg:w="69"/><text x="72.9736%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (69 samples, 0.06%)</title><rect x="72.7236%" y="245" width="0.0627%" height="15" fill="rgb(246,199,43)" fg:x="80044" fg:w="69"/><text x="72.9736%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (69 samples, 0.06%)</title><rect x="72.7236%" y="229" width="0.0627%" height="15" fill="rgb(232,125,11)" fg:x="80044" fg:w="69"/><text x="72.9736%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (19 samples, 0.02%)</title><rect x="72.7691%" y="213" width="0.0173%" height="15" fill="rgb(218,219,45)" fg:x="80094" fg:w="19"/><text x="73.0191%" y="223.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_str (1,095 samples, 0.99%)</title><rect x="71.8387%" y="389" width="0.9949%" height="15" fill="rgb(216,102,54)" fg:x="79070" fg:w="1095"/><text x="72.0887%" y="399.50"></text></g><g><title>rmp::encode::str::write_str (1,034 samples, 0.94%)</title><rect x="71.8941%" y="373" width="0.9394%" height="15" fill="rgb(250,228,7)" fg:x="79131" fg:w="1034"/><text x="72.1441%" y="383.50"></text></g><g><title>rmp::encode::str::write_str_len (194 samples, 0.18%)</title><rect x="72.6573%" y="357" width="0.1763%" height="15" fill="rgb(226,125,25)" fg:x="79971" fg:w="194"/><text x="72.9073%" y="367.50"></text></g><g><title>rmp::encode::write_marker (139 samples, 0.13%)</title><rect x="72.7073%" y="341" width="0.1263%" height="15" fill="rgb(224,165,27)" fg:x="80026" fg:w="139"/><text x="72.9573%" y="351.50"></text></g><g><title>rmp::marker::Marker::to_u8 (52 samples, 0.05%)</title><rect x="72.7863%" y="325" width="0.0472%" height="15" fill="rgb(233,86,3)" fg:x="80113" fg:w="52"/><text x="73.0363%" y="335.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_u64 (32 samples, 0.03%)</title><rect x="72.8336%" y="389" width="0.0291%" height="15" fill="rgb(228,116,20)" fg:x="80165" fg:w="32"/><text x="73.0836%" y="399.50"></text></g><g><title>rmp::encode::uint::write_uint (27 samples, 0.02%)</title><rect x="72.8381%" y="373" width="0.0245%" height="15" fill="rgb(209,192,17)" fg:x="80170" fg:w="27"/><text x="73.0881%" y="383.50"></text></g><g><title>rmp::encode::uint::write_pfix (22 samples, 0.02%)</title><rect x="72.8427%" y="357" width="0.0200%" height="15" fill="rgb(224,88,34)" fg:x="80175" fg:w="22"/><text x="73.0927%" y="367.50"></text></g><g><title>rmp::encode::write_marker (15 samples, 0.01%)</title><rect x="72.8490%" y="341" width="0.0136%" height="15" fill="rgb(233,38,6)" fg:x="80182" fg:w="15"/><text x="73.0990%" y="351.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (27 samples, 0.02%)</title><rect x="72.8626%" y="389" width="0.0245%" height="15" fill="rgb(212,59,30)" fg:x="80197" fg:w="27"/><text x="73.1126%" y="399.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (63 samples, 0.06%)</title><rect x="72.8872%" y="389" width="0.0572%" height="15" fill="rgb(213,80,3)" fg:x="80224" fg:w="63"/><text x="73.1372%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 0.04%)</title><rect x="72.9444%" y="389" width="0.0418%" height="15" fill="rgb(251,178,7)" fg:x="80287" fg:w="46"/><text x="73.1944%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (12 samples, 0.01%)</title><rect x="73.0325%" y="373" width="0.0109%" height="15" fill="rgb(213,154,26)" fg:x="80384" fg:w="12"/><text x="73.2825%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (29 samples, 0.03%)</title><rect x="74.0792%" y="229" width="0.0263%" height="15" fill="rgb(238,165,49)" fg:x="81536" fg:w="29"/><text x="74.3292%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (26 samples, 0.02%)</title><rect x="74.0819%" y="213" width="0.0236%" height="15" fill="rgb(248,91,46)" fg:x="81539" fg:w="26"/><text x="74.3319%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (19 samples, 0.02%)</title><rect x="74.0883%" y="197" width="0.0173%" height="15" fill="rgb(244,21,52)" fg:x="81546" fg:w="19"/><text x="74.3383%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (17 samples, 0.02%)</title><rect x="74.0901%" y="181" width="0.0154%" height="15" fill="rgb(247,122,20)" fg:x="81548" fg:w="17"/><text x="74.3401%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (144 samples, 0.13%)</title><rect x="74.1055%" y="229" width="0.1308%" height="15" fill="rgb(218,27,9)" fg:x="81565" fg:w="144"/><text x="74.3555%" y="239.50"></text></g><g><title>[libc-2.31.so] (131 samples, 0.12%)</title><rect x="74.1173%" y="213" width="0.1190%" height="15" fill="rgb(246,7,6)" fg:x="81578" fg:w="131"/><text x="74.3673%" y="223.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (190 samples, 0.17%)</title><rect x="74.0647%" y="325" width="0.1726%" height="15" fill="rgb(227,135,54)" fg:x="81520" fg:w="190"/><text x="74.3147%" y="335.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (190 samples, 0.17%)</title><rect x="74.0647%" y="309" width="0.1726%" height="15" fill="rgb(247,14,11)" fg:x="81520" fg:w="190"/><text x="74.3147%" y="319.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (190 samples, 0.17%)</title><rect x="74.0647%" y="293" width="0.1726%" height="15" fill="rgb(206,149,34)" fg:x="81520" fg:w="190"/><text x="74.3147%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (190 samples, 0.17%)</title><rect x="74.0647%" y="277" width="0.1726%" height="15" fill="rgb(227,228,4)" fg:x="81520" fg:w="190"/><text x="74.3147%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (190 samples, 0.17%)</title><rect x="74.0647%" y="261" width="0.1726%" height="15" fill="rgb(238,218,28)" fg:x="81520" fg:w="190"/><text x="74.3147%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (190 samples, 0.17%)</title><rect x="74.0647%" y="245" width="0.1726%" height="15" fill="rgb(252,86,40)" fg:x="81520" fg:w="190"/><text x="74.3147%" y="255.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (48 samples, 0.04%)</title><rect x="74.2954%" y="293" width="0.0436%" height="15" fill="rgb(251,225,11)" fg:x="81774" fg:w="48"/><text x="74.5454%" y="303.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (48 samples, 0.04%)</title><rect x="74.2954%" y="277" width="0.0436%" height="15" fill="rgb(206,46,49)" fg:x="81774" fg:w="48"/><text x="74.5454%" y="287.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (48 samples, 0.04%)</title><rect x="74.2954%" y="261" width="0.0436%" height="15" fill="rgb(245,128,24)" fg:x="81774" fg:w="48"/><text x="74.5454%" y="271.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (48 samples, 0.04%)</title><rect x="74.2954%" y="245" width="0.0436%" height="15" fill="rgb(219,177,34)" fg:x="81774" fg:w="48"/><text x="74.5454%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (48 samples, 0.04%)</title><rect x="74.2954%" y="229" width="0.0436%" height="15" fill="rgb(218,60,48)" fg:x="81774" fg:w="48"/><text x="74.5454%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (48 samples, 0.04%)</title><rect x="74.2954%" y="213" width="0.0436%" height="15" fill="rgb(221,11,5)" fg:x="81774" fg:w="48"/><text x="74.5454%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (48 samples, 0.04%)</title><rect x="74.2954%" y="197" width="0.0436%" height="15" fill="rgb(220,148,13)" fg:x="81774" fg:w="48"/><text x="74.5454%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (41 samples, 0.04%)</title><rect x="74.3018%" y="181" width="0.0373%" height="15" fill="rgb(210,16,3)" fg:x="81781" fg:w="41"/><text x="74.5518%" y="191.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_str (361 samples, 0.33%)</title><rect x="74.0401%" y="357" width="0.3280%" height="15" fill="rgb(236,80,2)" fg:x="81493" fg:w="361"/><text x="74.2901%" y="367.50"></text></g><g><title>rmp::encode::str::write_str (334 samples, 0.30%)</title><rect x="74.0647%" y="341" width="0.3035%" height="15" fill="rgb(239,129,19)" fg:x="81520" fg:w="334"/><text x="74.3147%" y="351.50"></text></g><g><title>rmp::encode::str::write_str_len (144 samples, 0.13%)</title><rect x="74.2373%" y="325" width="0.1308%" height="15" fill="rgb(220,106,35)" fg:x="81710" fg:w="144"/><text x="74.4873%" y="335.50"></text></g><g><title>rmp::encode::write_marker (108 samples, 0.10%)</title><rect x="74.2700%" y="309" width="0.0981%" height="15" fill="rgb(252,139,45)" fg:x="81746" fg:w="108"/><text x="74.5200%" y="319.50"></text></g><g><title>rmp::marker::Marker::to_u8 (32 samples, 0.03%)</title><rect x="74.3390%" y="293" width="0.0291%" height="15" fill="rgb(229,8,36)" fg:x="81822" fg:w="32"/><text x="74.5890%" y="303.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (36 samples, 0.03%)</title><rect x="74.3708%" y="341" width="0.0327%" height="15" fill="rgb(230,126,33)" fg:x="81857" fg:w="36"/><text x="74.6208%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (34 samples, 0.03%)</title><rect x="74.5516%" y="181" width="0.0309%" height="15" fill="rgb(239,140,21)" fg:x="82056" fg:w="34"/><text x="74.8016%" y="191.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (67 samples, 0.06%)</title><rect x="74.5516%" y="293" width="0.0609%" height="15" fill="rgb(254,104,9)" fg:x="82056" fg:w="67"/><text x="74.8016%" y="303.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (67 samples, 0.06%)</title><rect x="74.5516%" y="277" width="0.0609%" height="15" fill="rgb(239,52,14)" fg:x="82056" fg:w="67"/><text x="74.8016%" y="287.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (67 samples, 0.06%)</title><rect x="74.5516%" y="261" width="0.0609%" height="15" fill="rgb(208,227,44)" fg:x="82056" fg:w="67"/><text x="74.8016%" y="271.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (67 samples, 0.06%)</title><rect x="74.5516%" y="245" width="0.0609%" height="15" fill="rgb(246,18,19)" fg:x="82056" fg:w="67"/><text x="74.8016%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (67 samples, 0.06%)</title><rect x="74.5516%" y="229" width="0.0609%" height="15" fill="rgb(235,228,25)" fg:x="82056" fg:w="67"/><text x="74.8016%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (67 samples, 0.06%)</title><rect x="74.5516%" y="213" width="0.0609%" height="15" fill="rgb(240,156,20)" fg:x="82056" fg:w="67"/><text x="74.8016%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (67 samples, 0.06%)</title><rect x="74.5516%" y="197" width="0.0609%" height="15" fill="rgb(224,8,20)" fg:x="82056" fg:w="67"/><text x="74.8016%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (32 samples, 0.03%)</title><rect x="74.5834%" y="181" width="0.0291%" height="15" fill="rgb(214,12,52)" fg:x="82091" fg:w="32"/><text x="74.8334%" y="191.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_u64 (398 samples, 0.36%)</title><rect x="74.3681%" y="357" width="0.3616%" height="15" fill="rgb(211,220,47)" fg:x="81854" fg:w="398"/><text x="74.6181%" y="367.50"></text></g><g><title>rmp::encode::uint::write_uint (359 samples, 0.33%)</title><rect x="74.4035%" y="341" width="0.3262%" height="15" fill="rgb(250,173,5)" fg:x="81893" fg:w="359"/><text x="74.6535%" y="351.50"></text></g><g><title>rmp::encode::uint::write_pfix (277 samples, 0.25%)</title><rect x="74.4780%" y="325" width="0.2517%" height="15" fill="rgb(250,125,52)" fg:x="81975" fg:w="277"/><text x="74.7280%" y="335.50"></text></g><g><title>rmp::encode::write_marker (213 samples, 0.19%)</title><rect x="74.5362%" y="309" width="0.1935%" height="15" fill="rgb(209,133,18)" fg:x="82039" fg:w="213"/><text x="74.7862%" y="319.50"></text></g><g><title>rmp::marker::Marker::to_u8 (129 samples, 0.12%)</title><rect x="74.6125%" y="293" width="0.1172%" height="15" fill="rgb(216,173,22)" fg:x="82123" fg:w="129"/><text x="74.8625%" y="303.50"></text></g><g><title>&lt;tremor_runtime::codec::msgpack::MsgPack as tremor_runtime::codec::Codec&gt;::encode (7,581 samples, 6.89%)</title><rect x="67.9138%" y="533" width="6.8877%" height="15" fill="rgb(205,3,22)" fg:x="74750" fg:w="7581"/><text x="68.1638%" y="543.50">&lt;tremor_r..</text></g><g><title>rmp_serde::encode::to_vec (7,581 samples, 6.89%)</title><rect x="67.9138%" y="517" width="6.8877%" height="15" fill="rgb(248,22,20)" fg:x="74750" fg:w="7581"/><text x="68.1638%" y="527.50">rmp_serde..</text></g><g><title>rmp_serde::encode::write (7,581 samples, 6.89%)</title><rect x="67.9138%" y="501" width="6.8877%" height="15" fill="rgb(233,6,29)" fg:x="74750" fg:w="7581"/><text x="68.1638%" y="511.50">rmp_serde..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (7,581 samples, 6.89%)</title><rect x="67.9138%" y="485" width="6.8877%" height="15" fill="rgb(240,22,54)" fg:x="74750" fg:w="7581"/><text x="68.1638%" y="495.50">serde::se..</text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (7,581 samples, 6.89%)</title><rect x="67.9138%" y="469" width="6.8877%" height="15" fill="rgb(231,133,32)" fg:x="74750" fg:w="7581"/><text x="68.1638%" y="479.50">tremor_va..</text></g><g><title>serde::ser::SerializeMap::serialize_entry (5,706 samples, 5.18%)</title><rect x="69.6173%" y="453" width="5.1842%" height="15" fill="rgb(248,193,4)" fg:x="76625" fg:w="5706"/><text x="69.8673%" y="463.50">serde:..</text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeMap&gt;::serialize_value (3,706 samples, 3.37%)</title><rect x="71.4344%" y="437" width="3.3671%" height="15" fill="rgb(211,178,46)" fg:x="78625" fg:w="3706"/><text x="71.6844%" y="447.50">&lt;rm..</text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeSeq&gt;::serialize_element (3,706 samples, 3.37%)</title><rect x="71.4344%" y="421" width="3.3671%" height="15" fill="rgb(224,5,42)" fg:x="78625" fg:w="3706"/><text x="71.6844%" y="431.50">&lt;rm..</text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (3,603 samples, 3.27%)</title><rect x="71.5280%" y="405" width="3.2735%" height="15" fill="rgb(239,176,25)" fg:x="78728" fg:w="3603"/><text x="71.7780%" y="415.50">tre..</text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeSeq&gt;::serialize_element (1,995 samples, 1.81%)</title><rect x="72.9889%" y="389" width="1.8125%" height="15" fill="rgb(245,187,50)" fg:x="80336" fg:w="1995"/><text x="73.2389%" y="399.50">&lt;..</text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (1,935 samples, 1.76%)</title><rect x="73.0434%" y="373" width="1.7580%" height="15" fill="rgb(248,24,15)" fg:x="80396" fg:w="1935"/><text x="73.2934%" y="383.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (79 samples, 0.07%)</title><rect x="74.7297%" y="357" width="0.0718%" height="15" fill="rgb(205,166,13)" fg:x="82252" fg:w="79"/><text x="74.9797%" y="367.50"></text></g><g><title>alloc::alloc::exchange_malloc (30 samples, 0.03%)</title><rect x="74.8242%" y="517" width="0.0273%" height="15" fill="rgb(208,114,23)" fg:x="82356" fg:w="30"/><text x="75.0742%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (30 samples, 0.03%)</title><rect x="74.8242%" y="501" width="0.0273%" height="15" fill="rgb(239,127,18)" fg:x="82356" fg:w="30"/><text x="75.0742%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (30 samples, 0.03%)</title><rect x="74.8242%" y="485" width="0.0273%" height="15" fill="rgb(219,154,28)" fg:x="82356" fg:w="30"/><text x="75.0742%" y="495.50"></text></g><g><title>alloc::alloc::alloc (28 samples, 0.03%)</title><rect x="74.8260%" y="469" width="0.0254%" height="15" fill="rgb(225,157,23)" fg:x="82358" fg:w="28"/><text x="75.0760%" y="479.50"></text></g><g><title>__rg_alloc (28 samples, 0.03%)</title><rect x="74.8260%" y="453" width="0.0254%" height="15" fill="rgb(219,8,6)" fg:x="82358" fg:w="28"/><text x="75.0760%" y="463.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (28 samples, 0.03%)</title><rect x="74.8260%" y="437" width="0.0254%" height="15" fill="rgb(212,47,6)" fg:x="82358" fg:w="28"/><text x="75.0760%" y="447.50"></text></g><g><title>sn_rust_alloc (28 samples, 0.03%)</title><rect x="74.8260%" y="421" width="0.0254%" height="15" fill="rgb(224,190,4)" fg:x="82358" fg:w="28"/><text x="75.0760%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (15 samples, 0.01%)</title><rect x="74.8787%" y="501" width="0.0136%" height="15" fill="rgb(239,183,29)" fg:x="82416" fg:w="15"/><text x="75.1287%" y="511.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (46 samples, 0.04%)</title><rect x="74.9014%" y="485" width="0.0418%" height="15" fill="rgb(213,57,7)" fg:x="82441" fg:w="46"/><text x="75.1514%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (18 samples, 0.02%)</title><rect x="74.9650%" y="453" width="0.0164%" height="15" fill="rgb(216,148,1)" fg:x="82511" fg:w="18"/><text x="75.2150%" y="463.50"></text></g><g><title>core::cmp::PartialOrd::ge (18 samples, 0.02%)</title><rect x="74.9650%" y="437" width="0.0164%" height="15" fill="rgb(236,182,29)" fg:x="82511" fg:w="18"/><text x="75.2150%" y="447.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (18 samples, 0.02%)</title><rect x="74.9650%" y="421" width="0.0164%" height="15" fill="rgb(244,120,48)" fg:x="82511" fg:w="18"/><text x="75.2150%" y="431.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (18 samples, 0.02%)</title><rect x="74.9650%" y="405" width="0.0164%" height="15" fill="rgb(206,71,34)" fg:x="82511" fg:w="18"/><text x="75.2150%" y="415.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (18 samples, 0.02%)</title><rect x="74.9650%" y="389" width="0.0164%" height="15" fill="rgb(242,32,6)" fg:x="82511" fg:w="18"/><text x="75.2150%" y="399.50"></text></g><g><title>std::time::SystemTime::duration_since (97 samples, 0.09%)</title><rect x="74.9014%" y="501" width="0.0881%" height="15" fill="rgb(241,35,3)" fg:x="82441" fg:w="97"/><text x="75.1514%" y="511.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (51 samples, 0.05%)</title><rect x="74.9432%" y="485" width="0.0463%" height="15" fill="rgb(222,62,19)" fg:x="82487" fg:w="51"/><text x="75.1932%" y="495.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (51 samples, 0.05%)</title><rect x="74.9432%" y="469" width="0.0463%" height="15" fill="rgb(223,110,41)" fg:x="82487" fg:w="51"/><text x="75.1932%" y="479.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (11,178 samples, 10.16%)</title><rect x="65.0219%" y="901" width="10.1557%" height="15" fill="rgb(208,224,4)" fg:x="71567" fg:w="11178"/><text x="65.2719%" y="911.50">tremor_runtime:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,995 samples, 7.26%)</title><rect x="67.9138%" y="885" width="7.2638%" height="15" fill="rgb(241,137,19)" fg:x="74750" fg:w="7995"/><text x="68.1638%" y="895.50">&lt;core::fut..</text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (7,995 samples, 7.26%)</title><rect x="67.9138%" y="869" width="7.2638%" height="15" fill="rgb(244,24,17)" fg:x="74750" fg:w="7995"/><text x="68.1638%" y="879.50">tremor_run..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,995 samples, 7.26%)</title><rect x="67.9138%" y="853" width="7.2638%" height="15" fill="rgb(245,178,49)" fg:x="74750" fg:w="7995"/><text x="68.1638%" y="863.50">&lt;async_ffi..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,995 samples, 7.26%)</title><rect x="67.9138%" y="837" width="7.2638%" height="15" fill="rgb(219,160,38)" fg:x="74750" fg:w="7995"/><text x="68.1638%" y="847.50">&lt;async_ffi..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (7,995 samples, 7.26%)</title><rect x="67.9138%" y="821" width="7.2638%" height="15" fill="rgb(228,137,14)" fg:x="74750" fg:w="7995"/><text x="68.1638%" y="831.50">&lt;core::tas..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (7,995 samples, 7.26%)</title><rect x="67.9138%" y="805" width="7.2638%" height="15" fill="rgb(237,134,11)" fg:x="74750" fg:w="7995"/><text x="68.1638%" y="815.50">&lt;async_ffi..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (7,995 samples, 7.26%)</title><rect x="67.9138%" y="789" width="7.2638%" height="15" fill="rgb(211,126,44)" fg:x="74750" fg:w="7995"/><text x="68.1638%" y="799.50">async_ffi:..</text></g><g><title>std::panic::catch_unwind (7,995 samples, 7.26%)</title><rect x="67.9138%" y="773" width="7.2638%" height="15" fill="rgb(226,171,33)" fg:x="74750" fg:w="7995"/><text x="68.1638%" y="783.50">std::panic..</text></g><g><title>std::panicking::try (7,995 samples, 7.26%)</title><rect x="67.9138%" y="757" width="7.2638%" height="15" fill="rgb(253,99,13)" fg:x="74750" fg:w="7995"/><text x="68.1638%" y="767.50">std::panic..</text></g><g><title>std::panicking::try::do_call (7,995 samples, 7.26%)</title><rect x="67.9138%" y="741" width="7.2638%" height="15" fill="rgb(244,48,7)" fg:x="74750" fg:w="7995"/><text x="68.1638%" y="751.50">std::panic..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (7,995 samples, 7.26%)</title><rect x="67.9138%" y="725" width="7.2638%" height="15" fill="rgb(244,217,54)" fg:x="74750" fg:w="7995"/><text x="68.1638%" y="735.50">&lt;core::pan..</text></g><g><title>core::ops::function::FnOnce::call_once (7,995 samples, 7.26%)</title><rect x="67.9138%" y="709" width="7.2638%" height="15" fill="rgb(224,15,18)" fg:x="74750" fg:w="7995"/><text x="68.1638%" y="719.50">core::ops:..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (7,995 samples, 7.26%)</title><rect x="67.9138%" y="693" width="7.2638%" height="15" fill="rgb(244,99,12)" fg:x="74750" fg:w="7995"/><text x="68.1638%" y="703.50">async_ffi:..</text></g><g><title>async_ffi::FfiContext::with_context (7,995 samples, 7.26%)</title><rect x="67.9138%" y="677" width="7.2638%" height="15" fill="rgb(233,226,8)" fg:x="74750" fg:w="7995"/><text x="68.1638%" y="687.50">async_ffi:..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (7,995 samples, 7.26%)</title><rect x="67.9138%" y="661" width="7.2638%" height="15" fill="rgb(229,211,3)" fg:x="74750" fg:w="7995"/><text x="68.1638%" y="671.50">async_ffi:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,995 samples, 7.26%)</title><rect x="67.9138%" y="645" width="7.2638%" height="15" fill="rgb(216,140,21)" fg:x="74750" fg:w="7995"/><text x="68.1638%" y="655.50">&lt;core::fut..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (7,995 samples, 7.26%)</title><rect x="67.9138%" y="629" width="7.2638%" height="15" fill="rgb(234,122,30)" fg:x="74750" fg:w="7995"/><text x="68.1638%" y="639.50">&lt;tremor_ru..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (7,995 samples, 7.26%)</title><rect x="67.9138%" y="613" width="7.2638%" height="15" fill="rgb(236,25,46)" fg:x="74750" fg:w="7995"/><text x="68.1638%" y="623.50">tremor_run..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (7,995 samples, 7.26%)</title><rect x="67.9138%" y="597" width="7.2638%" height="15" fill="rgb(217,52,54)" fg:x="74750" fg:w="7995"/><text x="68.1638%" y="607.50">tremor_run..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (7,995 samples, 7.26%)</title><rect x="67.9138%" y="581" width="7.2638%" height="15" fill="rgb(222,29,26)" fg:x="74750" fg:w="7995"/><text x="68.1638%" y="591.50">tremor_run..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (7,995 samples, 7.26%)</title><rect x="67.9138%" y="565" width="7.2638%" height="15" fill="rgb(216,177,29)" fg:x="74750" fg:w="7995"/><text x="68.1638%" y="575.50">tremor_run..</text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (7,995 samples, 7.26%)</title><rect x="67.9138%" y="549" width="7.2638%" height="15" fill="rgb(247,136,51)" fg:x="74750" fg:w="7995"/><text x="68.1638%" y="559.50">&lt;tremor_ru..</text></g><g><title>tremor_runtime::postprocessor::postprocess (414 samples, 0.38%)</title><rect x="74.8015%" y="533" width="0.3761%" height="15" fill="rgb(231,47,47)" fg:x="82331" fg:w="414"/><text x="75.0515%" y="543.50"></text></g><g><title>tremor_common::time::nanotime (343 samples, 0.31%)</title><rect x="74.8660%" y="517" width="0.3116%" height="15" fill="rgb(211,192,36)" fg:x="82402" fg:w="343"/><text x="75.1160%" y="527.50"></text></g><g><title>std::time::SystemTime::now (207 samples, 0.19%)</title><rect x="74.9896%" y="501" width="0.1881%" height="15" fill="rgb(229,156,32)" fg:x="82538" fg:w="207"/><text x="75.2396%" y="511.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (207 samples, 0.19%)</title><rect x="74.9896%" y="485" width="0.1881%" height="15" fill="rgb(248,213,20)" fg:x="82538" fg:w="207"/><text x="75.2396%" y="495.50"></text></g><g><title>std::sys::unix::time::inner::now (207 samples, 0.19%)</title><rect x="74.9896%" y="469" width="0.1881%" height="15" fill="rgb(217,64,7)" fg:x="82538" fg:w="207"/><text x="75.2396%" y="479.50"></text></g><g><title>__clock_gettime (168 samples, 0.15%)</title><rect x="75.0250%" y="453" width="0.1526%" height="15" fill="rgb(232,142,8)" fg:x="82577" fg:w="168"/><text x="75.2750%" y="463.50"></text></g><g><title>__vdso_clock_gettime (162 samples, 0.15%)</title><rect x="75.0304%" y="437" width="0.1472%" height="15" fill="rgb(224,92,44)" fg:x="82583" fg:w="162"/><text x="75.2804%" y="447.50"></text></g><g><title>[[vdso]] (140 samples, 0.13%)</title><rect x="75.0504%" y="421" width="0.1272%" height="15" fill="rgb(214,169,17)" fg:x="82605" fg:w="140"/><text x="75.3004%" y="431.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (15 samples, 0.01%)</title><rect x="75.3339%" y="757" width="0.0136%" height="15" fill="rgb(210,59,37)" fg:x="82917" fg:w="15"/><text x="75.5839%" y="767.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (15 samples, 0.01%)</title><rect x="75.3339%" y="741" width="0.0136%" height="15" fill="rgb(214,116,48)" fg:x="82917" fg:w="15"/><text x="75.5839%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (15 samples, 0.01%)</title><rect x="75.3339%" y="725" width="0.0136%" height="15" fill="rgb(244,191,6)" fg:x="82917" fg:w="15"/><text x="75.5839%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_add (15 samples, 0.01%)</title><rect x="75.3339%" y="709" width="0.0136%" height="15" fill="rgb(241,50,52)" fg:x="82917" fg:w="15"/><text x="75.5839%" y="719.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (60 samples, 0.05%)</title><rect x="75.3820%" y="741" width="0.0545%" height="15" fill="rgb(236,75,39)" fg:x="82970" fg:w="60"/><text x="75.6320%" y="751.50"></text></g><g><title>core::mem::replace (60 samples, 0.05%)</title><rect x="75.3820%" y="725" width="0.0545%" height="15" fill="rgb(236,99,0)" fg:x="82970" fg:w="60"/><text x="75.6320%" y="735.50"></text></g><g><title>core::ptr::read (60 samples, 0.05%)</title><rect x="75.3820%" y="709" width="0.0545%" height="15" fill="rgb(207,202,15)" fg:x="82970" fg:w="60"/><text x="75.6320%" y="719.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (116 samples, 0.11%)</title><rect x="75.3521%" y="757" width="0.1054%" height="15" fill="rgb(233,207,14)" fg:x="82937" fg:w="116"/><text x="75.6021%" y="767.50"></text></g><g><title>core::mem::drop (23 samples, 0.02%)</title><rect x="75.4366%" y="741" width="0.0209%" height="15" fill="rgb(226,27,51)" fg:x="83030" fg:w="23"/><text x="75.6866%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (23 samples, 0.02%)</title><rect x="75.4366%" y="725" width="0.0209%" height="15" fill="rgb(206,104,42)" fg:x="83030" fg:w="23"/><text x="75.6866%" y="735.50"></text></g><g><title>core::mem::drop (14 samples, 0.01%)</title><rect x="75.4575%" y="757" width="0.0127%" height="15" fill="rgb(212,225,4)" fg:x="83053" fg:w="14"/><text x="75.7075%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (14 samples, 0.01%)</title><rect x="75.4575%" y="741" width="0.0127%" height="15" fill="rgb(233,96,42)" fg:x="83053" fg:w="14"/><text x="75.7075%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (13 samples, 0.01%)</title><rect x="75.4584%" y="725" width="0.0118%" height="15" fill="rgb(229,21,32)" fg:x="83054" fg:w="13"/><text x="75.7084%" y="735.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="75.4584%" y="709" width="0.0118%" height="15" fill="rgb(226,216,24)" fg:x="83054" fg:w="13"/><text x="75.7084%" y="719.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (13 samples, 0.01%)</title><rect x="75.4584%" y="693" width="0.0118%" height="15" fill="rgb(221,163,17)" fg:x="83054" fg:w="13"/><text x="75.7084%" y="703.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (13 samples, 0.01%)</title><rect x="75.4584%" y="677" width="0.0118%" height="15" fill="rgb(216,216,42)" fg:x="83054" fg:w="13"/><text x="75.7084%" y="687.50"></text></g><g><title>__GI___pthread_mutex_unlock (13 samples, 0.01%)</title><rect x="75.4584%" y="661" width="0.0118%" height="15" fill="rgb(240,118,7)" fg:x="83054" fg:w="13"/><text x="75.7084%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (149 samples, 0.14%)</title><rect x="75.4702%" y="757" width="0.1354%" height="15" fill="rgb(221,67,37)" fg:x="83067" fg:w="149"/><text x="75.7202%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (144 samples, 0.13%)</title><rect x="75.4747%" y="741" width="0.1308%" height="15" fill="rgb(241,32,44)" fg:x="83072" fg:w="144"/><text x="75.7247%" y="751.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (144 samples, 0.13%)</title><rect x="75.4747%" y="725" width="0.1308%" height="15" fill="rgb(235,204,43)" fg:x="83072" fg:w="144"/><text x="75.7247%" y="735.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (134 samples, 0.12%)</title><rect x="75.4838%" y="709" width="0.1217%" height="15" fill="rgb(213,116,10)" fg:x="83082" fg:w="134"/><text x="75.7338%" y="719.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (134 samples, 0.12%)</title><rect x="75.4838%" y="693" width="0.1217%" height="15" fill="rgb(239,15,48)" fg:x="83082" fg:w="134"/><text x="75.7338%" y="703.50"></text></g><g><title>__GI___pthread_mutex_unlock (129 samples, 0.12%)</title><rect x="75.4883%" y="677" width="0.1172%" height="15" fill="rgb(207,123,36)" fg:x="83087" fg:w="129"/><text x="75.7383%" y="687.50"></text></g><g><title>core::task::wake::Waker::will_wake (29 samples, 0.03%)</title><rect x="75.6055%" y="757" width="0.0263%" height="15" fill="rgb(209,103,30)" fg:x="83216" fg:w="29"/><text x="75.8555%" y="767.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (29 samples, 0.03%)</title><rect x="75.6055%" y="741" width="0.0263%" height="15" fill="rgb(238,100,19)" fg:x="83216" fg:w="29"/><text x="75.8555%" y="751.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (23 samples, 0.02%)</title><rect x="75.6110%" y="725" width="0.0209%" height="15" fill="rgb(244,30,14)" fg:x="83222" fg:w="23"/><text x="75.8610%" y="735.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (23 samples, 0.02%)</title><rect x="75.6110%" y="709" width="0.0209%" height="15" fill="rgb(249,174,6)" fg:x="83222" fg:w="23"/><text x="75.8610%" y="719.50"></text></g><g><title>std::sync::poison::Flag::get (12 samples, 0.01%)</title><rect x="75.6392%" y="693" width="0.0109%" height="15" fill="rgb(235,213,41)" fg:x="83253" fg:w="12"/><text x="75.8892%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (12 samples, 0.01%)</title><rect x="75.6392%" y="677" width="0.0109%" height="15" fill="rgb(213,118,6)" fg:x="83253" fg:w="12"/><text x="75.8892%" y="687.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (18 samples, 0.02%)</title><rect x="75.6392%" y="725" width="0.0164%" height="15" fill="rgb(235,44,51)" fg:x="83253" fg:w="18"/><text x="75.8892%" y="735.50"></text></g><g><title>std::sync::poison::Flag::borrow (18 samples, 0.02%)</title><rect x="75.6392%" y="709" width="0.0164%" height="15" fill="rgb(217,9,53)" fg:x="83253" fg:w="18"/><text x="75.8892%" y="719.50"></text></g><g><title>event_listener::Inner::lock (347 samples, 0.32%)</title><rect x="75.6319%" y="757" width="0.3153%" height="15" fill="rgb(237,172,34)" fg:x="83245" fg:w="347"/><text x="75.8819%" y="767.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (339 samples, 0.31%)</title><rect x="75.6392%" y="741" width="0.3080%" height="15" fill="rgb(206,206,11)" fg:x="83253" fg:w="339"/><text x="75.8892%" y="751.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (321 samples, 0.29%)</title><rect x="75.6555%" y="725" width="0.2916%" height="15" fill="rgb(214,149,29)" fg:x="83271" fg:w="321"/><text x="75.9055%" y="735.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (309 samples, 0.28%)</title><rect x="75.6664%" y="709" width="0.2807%" height="15" fill="rgb(208,123,3)" fg:x="83283" fg:w="309"/><text x="75.9164%" y="719.50"></text></g><g><title>__GI___pthread_mutex_lock (309 samples, 0.28%)</title><rect x="75.6664%" y="693" width="0.2807%" height="15" fill="rgb(229,126,4)" fg:x="83283" fg:w="309"/><text x="75.9164%" y="703.50"></text></g><g><title>__lll_lock_wait (40 samples, 0.04%)</title><rect x="75.9108%" y="677" width="0.0363%" height="15" fill="rgb(222,92,36)" fg:x="83552" fg:w="40"/><text x="76.1608%" y="687.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (771 samples, 0.70%)</title><rect x="75.2785%" y="773" width="0.7005%" height="15" fill="rgb(216,39,41)" fg:x="82856" fg:w="771"/><text x="75.5285%" y="783.50"></text></g><g><title>event_listener::List::remove (35 samples, 0.03%)</title><rect x="75.9472%" y="757" width="0.0318%" height="15" fill="rgb(253,127,28)" fg:x="83592" fg:w="35"/><text x="76.1972%" y="767.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (20 samples, 0.02%)</title><rect x="75.9608%" y="741" width="0.0182%" height="15" fill="rgb(249,152,51)" fg:x="83607" fg:w="20"/><text x="76.2108%" y="751.50"></text></g><g><title>core::mem::replace (20 samples, 0.02%)</title><rect x="75.9608%" y="725" width="0.0182%" height="15" fill="rgb(209,123,42)" fg:x="83607" fg:w="20"/><text x="76.2108%" y="735.50"></text></g><g><title>core::ptr::read (20 samples, 0.02%)</title><rect x="75.9608%" y="709" width="0.0182%" height="15" fill="rgb(241,118,22)" fg:x="83607" fg:w="20"/><text x="76.2108%" y="719.50"></text></g><g><title>concurrent_queue::full_fence (14 samples, 0.01%)</title><rect x="76.0580%" y="725" width="0.0127%" height="15" fill="rgb(208,25,7)" fg:x="83714" fg:w="14"/><text x="76.3080%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (14 samples, 0.01%)</title><rect x="76.0580%" y="709" width="0.0127%" height="15" fill="rgb(243,144,39)" fg:x="83714" fg:w="14"/><text x="76.3080%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (14 samples, 0.01%)</title><rect x="76.0580%" y="693" width="0.0127%" height="15" fill="rgb(250,50,5)" fg:x="83714" fg:w="14"/><text x="76.3080%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (14 samples, 0.01%)</title><rect x="76.0580%" y="677" width="0.0127%" height="15" fill="rgb(207,67,11)" fg:x="83714" fg:w="14"/><text x="76.3080%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (59 samples, 0.05%)</title><rect x="76.0734%" y="725" width="0.0536%" height="15" fill="rgb(245,204,40)" fg:x="83731" fg:w="59"/><text x="76.3234%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (59 samples, 0.05%)</title><rect x="76.0734%" y="709" width="0.0536%" height="15" fill="rgb(238,228,24)" fg:x="83731" fg:w="59"/><text x="76.3234%" y="719.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (415 samples, 0.38%)</title><rect x="75.9871%" y="757" width="0.3770%" height="15" fill="rgb(217,116,22)" fg:x="83636" fg:w="415"/><text x="76.2371%" y="767.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (396 samples, 0.36%)</title><rect x="76.0044%" y="741" width="0.3598%" height="15" fill="rgb(234,98,12)" fg:x="83655" fg:w="396"/><text x="76.2544%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (261 samples, 0.24%)</title><rect x="76.1271%" y="725" width="0.2371%" height="15" fill="rgb(242,170,50)" fg:x="83790" fg:w="261"/><text x="76.3771%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_load (261 samples, 0.24%)</title><rect x="76.1271%" y="709" width="0.2371%" height="15" fill="rgb(235,7,5)" fg:x="83790" fg:w="261"/><text x="76.3771%" y="719.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (881 samples, 0.80%)</title><rect x="75.9790%" y="773" width="0.8004%" height="15" fill="rgb(241,114,28)" fg:x="83627" fg:w="881"/><text x="76.2290%" y="783.50"></text></g><g><title>event_listener::Event::notify (457 samples, 0.42%)</title><rect x="76.3642%" y="757" width="0.4152%" height="15" fill="rgb(246,112,42)" fg:x="84051" fg:w="457"/><text x="76.6142%" y="767.50"></text></g><g><title>event_listener::full_fence (448 samples, 0.41%)</title><rect x="76.3724%" y="741" width="0.4070%" height="15" fill="rgb(248,228,14)" fg:x="84060" fg:w="448"/><text x="76.6224%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (448 samples, 0.41%)</title><rect x="76.3724%" y="725" width="0.4070%" height="15" fill="rgb(208,133,18)" fg:x="84060" fg:w="448"/><text x="76.6224%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (448 samples, 0.41%)</title><rect x="76.3724%" y="709" width="0.4070%" height="15" fill="rgb(207,35,49)" fg:x="84060" fg:w="448"/><text x="76.6224%" y="719.50"></text></g><g><title>event_listener::Inner::lock (28 samples, 0.03%)</title><rect x="76.7985%" y="725" width="0.0254%" height="15" fill="rgb(205,68,36)" fg:x="84529" fg:w="28"/><text x="77.0485%" y="735.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (28 samples, 0.03%)</title><rect x="76.7985%" y="709" width="0.0254%" height="15" fill="rgb(245,62,40)" fg:x="84529" fg:w="28"/><text x="77.0485%" y="719.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (25 samples, 0.02%)</title><rect x="76.8012%" y="693" width="0.0227%" height="15" fill="rgb(228,27,24)" fg:x="84532" fg:w="25"/><text x="77.0512%" y="703.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (22 samples, 0.02%)</title><rect x="76.8039%" y="677" width="0.0200%" height="15" fill="rgb(253,19,12)" fg:x="84535" fg:w="22"/><text x="77.0539%" y="687.50"></text></g><g><title>__GI___pthread_mutex_lock (22 samples, 0.02%)</title><rect x="76.8039%" y="661" width="0.0200%" height="15" fill="rgb(232,28,20)" fg:x="84535" fg:w="22"/><text x="77.0539%" y="671.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (40 samples, 0.04%)</title><rect x="76.7912%" y="741" width="0.0363%" height="15" fill="rgb(218,35,51)" fg:x="84521" fg:w="40"/><text x="77.0412%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (63 samples, 0.06%)</title><rect x="76.7839%" y="773" width="0.0572%" height="15" fill="rgb(212,90,40)" fg:x="84513" fg:w="63"/><text x="77.0339%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (55 samples, 0.05%)</title><rect x="76.7912%" y="757" width="0.0500%" height="15" fill="rgb(220,172,12)" fg:x="84521" fg:w="55"/><text x="77.0412%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (15 samples, 0.01%)</title><rect x="76.8275%" y="741" width="0.0136%" height="15" fill="rgb(226,159,20)" fg:x="84561" fg:w="15"/><text x="77.0775%" y="751.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="76.8275%" y="725" width="0.0136%" height="15" fill="rgb(234,205,16)" fg:x="84561" fg:w="15"/><text x="77.0775%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (15 samples, 0.01%)</title><rect x="76.8275%" y="709" width="0.0136%" height="15" fill="rgb(207,9,39)" fg:x="84561" fg:w="15"/><text x="77.0775%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_sub (15 samples, 0.01%)</title><rect x="76.8275%" y="693" width="0.0136%" height="15" fill="rgb(249,143,15)" fg:x="84561" fg:w="15"/><text x="77.0775%" y="703.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (27 samples, 0.02%)</title><rect x="76.8412%" y="757" width="0.0245%" height="15" fill="rgb(253,133,29)" fg:x="84576" fg:w="27"/><text x="77.0912%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (27 samples, 0.02%)</title><rect x="76.8412%" y="741" width="0.0245%" height="15" fill="rgb(221,187,0)" fg:x="84576" fg:w="27"/><text x="77.0912%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_add (27 samples, 0.02%)</title><rect x="76.8412%" y="725" width="0.0245%" height="15" fill="rgb(205,204,26)" fg:x="84576" fg:w="27"/><text x="77.0912%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (17 samples, 0.02%)</title><rect x="76.8657%" y="757" width="0.0154%" height="15" fill="rgb(224,68,54)" fg:x="84603" fg:w="17"/><text x="77.1157%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (16 samples, 0.01%)</title><rect x="76.8666%" y="741" width="0.0145%" height="15" fill="rgb(209,67,4)" fg:x="84604" fg:w="16"/><text x="77.1166%" y="751.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="76.8666%" y="725" width="0.0145%" height="15" fill="rgb(228,229,18)" fg:x="84604" fg:w="16"/><text x="77.1166%" y="735.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (15 samples, 0.01%)</title><rect x="76.8675%" y="709" width="0.0136%" height="15" fill="rgb(231,89,13)" fg:x="84605" fg:w="15"/><text x="77.1175%" y="719.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (15 samples, 0.01%)</title><rect x="76.8675%" y="693" width="0.0136%" height="15" fill="rgb(210,182,18)" fg:x="84605" fg:w="15"/><text x="77.1175%" y="703.50"></text></g><g><title>__GI___pthread_mutex_unlock (13 samples, 0.01%)</title><rect x="76.8693%" y="677" width="0.0118%" height="15" fill="rgb(240,105,2)" fg:x="84607" fg:w="13"/><text x="77.1193%" y="687.50"></text></g><g><title>event_listener::Inner::lock (28 samples, 0.03%)</title><rect x="76.8811%" y="757" width="0.0254%" height="15" fill="rgb(207,170,50)" fg:x="84620" fg:w="28"/><text x="77.1311%" y="767.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (28 samples, 0.03%)</title><rect x="76.8811%" y="741" width="0.0254%" height="15" fill="rgb(232,133,24)" fg:x="84620" fg:w="28"/><text x="77.1311%" y="751.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (28 samples, 0.03%)</title><rect x="76.8811%" y="725" width="0.0254%" height="15" fill="rgb(235,166,27)" fg:x="84620" fg:w="28"/><text x="77.1311%" y="735.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (28 samples, 0.03%)</title><rect x="76.8811%" y="709" width="0.0254%" height="15" fill="rgb(209,19,13)" fg:x="84620" fg:w="28"/><text x="77.1311%" y="719.50"></text></g><g><title>__GI___pthread_mutex_lock (28 samples, 0.03%)</title><rect x="76.8811%" y="693" width="0.0254%" height="15" fill="rgb(226,79,39)" fg:x="84620" fg:w="28"/><text x="77.1311%" y="703.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (1,838 samples, 1.67%)</title><rect x="75.2449%" y="789" width="1.6699%" height="15" fill="rgb(222,163,10)" fg:x="82819" fg:w="1838"/><text x="75.4949%" y="799.50"></text></g><g><title>event_listener::Event::listen (81 samples, 0.07%)</title><rect x="76.8412%" y="773" width="0.0736%" height="15" fill="rgb(214,44,19)" fg:x="84576" fg:w="81"/><text x="77.0912%" y="783.50"></text></g><g><title>[libc-2.31.so] (79 samples, 0.07%)</title><rect x="76.9175%" y="773" width="0.0718%" height="15" fill="rgb(210,217,13)" fg:x="84660" fg:w="79"/><text x="77.1675%" y="783.50"></text></g><g><title>[libc-2.31.so] (435 samples, 0.40%)</title><rect x="76.9902%" y="741" width="0.3952%" height="15" fill="rgb(237,61,54)" fg:x="84740" fg:w="435"/><text x="77.2402%" y="751.50"></text></g><g><title>sn_rust_dealloc (34 samples, 0.03%)</title><rect x="77.3881%" y="661" width="0.0309%" height="15" fill="rgb(226,184,24)" fg:x="85178" fg:w="34"/><text x="77.6381%" y="671.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (2,548 samples, 2.31%)</title><rect x="75.2103%" y="821" width="2.3150%" height="15" fill="rgb(223,226,4)" fg:x="82781" fg:w="2548"/><text x="75.4603%" y="831.50">&lt;..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (2,536 samples, 2.30%)</title><rect x="75.2212%" y="805" width="2.3041%" height="15" fill="rgb(210,26,41)" fg:x="82793" fg:w="2536"/><text x="75.4712%" y="815.50">&lt;..</text></g><g><title>core::option::Option&lt;T&gt;::map (672 samples, 0.61%)</title><rect x="76.9148%" y="789" width="0.6105%" height="15" fill="rgb(220,221,6)" fg:x="84657" fg:w="672"/><text x="77.1648%" y="799.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (590 samples, 0.54%)</title><rect x="76.9893%" y="773" width="0.5360%" height="15" fill="rgb(225,89,49)" fg:x="84739" fg:w="590"/><text x="77.2393%" y="783.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}}::{{closure}} (590 samples, 0.54%)</title><rect x="76.9893%" y="757" width="0.5360%" height="15" fill="rgb(218,70,45)" fg:x="84739" fg:w="590"/><text x="77.2393%" y="767.50"></text></g><g><title>alloc::alloc::box_free (154 samples, 0.14%)</title><rect x="77.3854%" y="741" width="0.1399%" height="15" fill="rgb(238,166,21)" fg:x="85175" fg:w="154"/><text x="77.6354%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (154 samples, 0.14%)</title><rect x="77.3854%" y="725" width="0.1399%" height="15" fill="rgb(224,141,44)" fg:x="85175" fg:w="154"/><text x="77.6354%" y="735.50"></text></g><g><title>alloc::alloc::dealloc (154 samples, 0.14%)</title><rect x="77.3854%" y="709" width="0.1399%" height="15" fill="rgb(230,12,49)" fg:x="85175" fg:w="154"/><text x="77.6354%" y="719.50"></text></g><g><title>__rg_dealloc (154 samples, 0.14%)</title><rect x="77.3854%" y="693" width="0.1399%" height="15" fill="rgb(212,174,12)" fg:x="85175" fg:w="154"/><text x="77.6354%" y="703.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (154 samples, 0.14%)</title><rect x="77.3854%" y="677" width="0.1399%" height="15" fill="rgb(246,67,9)" fg:x="85175" fg:w="154"/><text x="77.6354%" y="687.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (117 samples, 0.11%)</title><rect x="77.4190%" y="661" width="0.1063%" height="15" fill="rgb(239,35,23)" fg:x="85212" fg:w="117"/><text x="77.6690%" y="671.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,040 samples, 2.76%)</title><rect x="75.1867%" y="885" width="2.7620%" height="15" fill="rgb(211,167,0)" fg:x="82755" fg:w="3040"/><text x="75.4367%" y="895.50">&lt;a..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (3,029 samples, 2.75%)</title><rect x="75.1967%" y="869" width="2.7520%" height="15" fill="rgb(225,119,45)" fg:x="82766" fg:w="3029"/><text x="75.4467%" y="879.50">&lt;t..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (3,029 samples, 2.75%)</title><rect x="75.1967%" y="853" width="2.7520%" height="15" fill="rgb(210,162,6)" fg:x="82766" fg:w="3029"/><text x="75.4467%" y="863.50">&lt;a..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (3,029 samples, 2.75%)</title><rect x="75.1967%" y="837" width="2.7520%" height="15" fill="rgb(208,118,35)" fg:x="82766" fg:w="3029"/><text x="75.4467%" y="847.50">&lt;t..</text></g><g><title>[libc-2.31.so] (466 samples, 0.42%)</title><rect x="77.5253%" y="821" width="0.4234%" height="15" fill="rgb(239,4,53)" fg:x="85329" fg:w="466"/><text x="77.7753%" y="831.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (67 samples, 0.06%)</title><rect x="77.9487%" y="805" width="0.0609%" height="15" fill="rgb(213,130,21)" fg:x="85795" fg:w="67"/><text x="78.1987%" y="815.50"></text></g><g><title>&lt;tremor_pipeline::op::grouper::bucket::Grouper as tremor_pipeline::op::Operator&gt;::on_event (67 samples, 0.06%)</title><rect x="77.9487%" y="789" width="0.0609%" height="15" fill="rgb(235,148,0)" fg:x="85795" fg:w="67"/><text x="78.1987%" y="799.50"></text></g><g><title>tremor_value::value::serialize::&lt;impl value_trait::Writable for tremor_value::value::Value&gt;::encode (67 samples, 0.06%)</title><rect x="77.9487%" y="773" width="0.0609%" height="15" fill="rgb(244,224,18)" fg:x="85795" fg:w="67"/><text x="78.1987%" y="783.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (67 samples, 0.06%)</title><rect x="77.9487%" y="757" width="0.0609%" height="15" fill="rgb(211,214,4)" fg:x="85795" fg:w="67"/><text x="78.1987%" y="767.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string (27 samples, 0.02%)</title><rect x="77.9850%" y="741" width="0.0245%" height="15" fill="rgb(206,119,25)" fg:x="85835" fg:w="27"/><text x="78.2350%" y="751.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (26 samples, 0.02%)</title><rect x="77.9859%" y="725" width="0.0236%" height="15" fill="rgb(243,93,47)" fg:x="85836" fg:w="26"/><text x="78.2359%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (26 samples, 0.02%)</title><rect x="78.2721%" y="677" width="0.0236%" height="15" fill="rgb(224,194,6)" fg:x="86151" fg:w="26"/><text x="78.5221%" y="687.50"></text></g><g><title>tremor_script::interpreter::LocalStack::with_size (166 samples, 0.15%)</title><rect x="78.1586%" y="725" width="0.1508%" height="15" fill="rgb(243,229,6)" fg:x="86026" fg:w="166"/><text x="78.4086%" y="735.50"></text></g><g><title>alloc::vec::from_elem (166 samples, 0.15%)</title><rect x="78.1586%" y="709" width="0.1508%" height="15" fill="rgb(207,23,50)" fg:x="86026" fg:w="166"/><text x="78.4086%" y="719.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (159 samples, 0.14%)</title><rect x="78.1649%" y="693" width="0.1445%" height="15" fill="rgb(253,192,32)" fg:x="86033" fg:w="159"/><text x="78.4149%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (15 samples, 0.01%)</title><rect x="78.2957%" y="677" width="0.0136%" height="15" fill="rgb(213,21,6)" fg:x="86177" fg:w="15"/><text x="78.5457%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (18 samples, 0.02%)</title><rect x="78.4711%" y="485" width="0.0164%" height="15" fill="rgb(243,151,13)" fg:x="86370" fg:w="18"/><text x="78.7211%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (18 samples, 0.02%)</title><rect x="78.4711%" y="469" width="0.0164%" height="15" fill="rgb(233,165,41)" fg:x="86370" fg:w="18"/><text x="78.7211%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (18 samples, 0.02%)</title><rect x="78.4711%" y="453" width="0.0164%" height="15" fill="rgb(246,176,45)" fg:x="86370" fg:w="18"/><text x="78.7211%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.02%)</title><rect x="78.4720%" y="437" width="0.0154%" height="15" fill="rgb(217,170,52)" fg:x="86371" fg:w="17"/><text x="78.7220%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.02%)</title><rect x="78.4720%" y="421" width="0.0154%" height="15" fill="rgb(214,203,54)" fg:x="86371" fg:w="17"/><text x="78.7220%" y="431.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.02%)</title><rect x="78.4720%" y="405" width="0.0154%" height="15" fill="rgb(248,215,49)" fg:x="86371" fg:w="17"/><text x="78.7220%" y="415.50"></text></g><g><title>__rg_alloc (17 samples, 0.02%)</title><rect x="78.4720%" y="389" width="0.0154%" height="15" fill="rgb(208,46,10)" fg:x="86371" fg:w="17"/><text x="78.7220%" y="399.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (17 samples, 0.02%)</title><rect x="78.4720%" y="373" width="0.0154%" height="15" fill="rgb(254,5,31)" fg:x="86371" fg:w="17"/><text x="78.7220%" y="383.50"></text></g><g><title>sn_rust_alloc (17 samples, 0.02%)</title><rect x="78.4720%" y="357" width="0.0154%" height="15" fill="rgb(222,104,33)" fg:x="86371" fg:w="17"/><text x="78.7220%" y="367.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (27 samples, 0.02%)</title><rect x="78.4666%" y="629" width="0.0245%" height="15" fill="rgb(248,49,16)" fg:x="86365" fg:w="27"/><text x="78.7166%" y="639.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::clone::Clone&gt;::clone (25 samples, 0.02%)</title><rect x="78.4684%" y="613" width="0.0227%" height="15" fill="rgb(232,198,41)" fg:x="86367" fg:w="25"/><text x="78.7184%" y="623.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (22 samples, 0.02%)</title><rect x="78.4711%" y="597" width="0.0200%" height="15" fill="rgb(214,125,3)" fg:x="86370" fg:w="22"/><text x="78.7211%" y="607.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (22 samples, 0.02%)</title><rect x="78.4711%" y="581" width="0.0200%" height="15" fill="rgb(229,220,28)" fg:x="86370" fg:w="22"/><text x="78.7211%" y="591.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (22 samples, 0.02%)</title><rect x="78.4711%" y="565" width="0.0200%" height="15" fill="rgb(222,64,37)" fg:x="86370" fg:w="22"/><text x="78.7211%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (22 samples, 0.02%)</title><rect x="78.4711%" y="549" width="0.0200%" height="15" fill="rgb(249,184,13)" fg:x="86370" fg:w="22"/><text x="78.7211%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (22 samples, 0.02%)</title><rect x="78.4711%" y="533" width="0.0200%" height="15" fill="rgb(252,176,6)" fg:x="86370" fg:w="22"/><text x="78.7211%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (22 samples, 0.02%)</title><rect x="78.4711%" y="517" width="0.0200%" height="15" fill="rgb(228,153,7)" fg:x="86370" fg:w="22"/><text x="78.7211%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (22 samples, 0.02%)</title><rect x="78.4711%" y="501" width="0.0200%" height="15" fill="rgb(242,193,5)" fg:x="86370" fg:w="22"/><text x="78.7211%" y="511.50"></text></g><g><title>alloc::borrow::Cow&lt;B&gt;::into_owned (29 samples, 0.03%)</title><rect x="78.4666%" y="661" width="0.0263%" height="15" fill="rgb(232,140,9)" fg:x="86365" fg:w="29"/><text x="78.7166%" y="671.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (29 samples, 0.03%)</title><rect x="78.4666%" y="645" width="0.0263%" height="15" fill="rgb(213,222,16)" fg:x="86365" fg:w="29"/><text x="78.7166%" y="655.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (16 samples, 0.01%)</title><rect x="78.4956%" y="661" width="0.0145%" height="15" fill="rgb(222,75,50)" fg:x="86397" fg:w="16"/><text x="78.7456%" y="671.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (21 samples, 0.02%)</title><rect x="78.5102%" y="661" width="0.0191%" height="15" fill="rgb(205,180,2)" fg:x="86413" fg:w="21"/><text x="78.7602%" y="671.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (146 samples, 0.13%)</title><rect x="78.3975%" y="693" width="0.1326%" height="15" fill="rgb(216,34,7)" fg:x="86289" fg:w="146"/><text x="78.6475%" y="703.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (125 samples, 0.11%)</title><rect x="78.4166%" y="677" width="0.1136%" height="15" fill="rgb(253,16,32)" fg:x="86310" fg:w="125"/><text x="78.6666%" y="687.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (12 samples, 0.01%)</title><rect x="78.5638%" y="661" width="0.0109%" height="15" fill="rgb(208,97,28)" fg:x="86472" fg:w="12"/><text x="78.8138%" y="671.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (82 samples, 0.07%)</title><rect x="78.5838%" y="533" width="0.0745%" height="15" fill="rgb(225,92,11)" fg:x="86494" fg:w="82"/><text x="78.8338%" y="543.50"></text></g><g><title>tremor_value::value::cmp::&lt;impl core::cmp::PartialEq for tremor_value::value::Value&gt;::eq (82 samples, 0.07%)</title><rect x="78.5838%" y="517" width="0.0745%" height="15" fill="rgb(243,38,12)" fg:x="86494" fg:w="82"/><text x="78.8338%" y="527.50"></text></g><g><title>[libc-2.31.so] (14 samples, 0.01%)</title><rect x="78.6455%" y="501" width="0.0127%" height="15" fill="rgb(208,139,16)" fg:x="86562" fg:w="14"/><text x="78.8955%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (92 samples, 0.08%)</title><rect x="78.5810%" y="613" width="0.0836%" height="15" fill="rgb(227,24,9)" fg:x="86491" fg:w="92"/><text x="78.8310%" y="623.50"></text></g><g><title>tremor_script::std_lib::array::load::&lt;impl tremor_script::registry::TremorFn for tremor_script::std_lib::array::load::contains::Func&gt;::invoke::{{closure}} (92 samples, 0.08%)</title><rect x="78.5810%" y="597" width="0.0836%" height="15" fill="rgb(206,62,11)" fg:x="86491" fg:w="92"/><text x="78.8310%" y="607.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (89 samples, 0.08%)</title><rect x="78.5838%" y="581" width="0.0809%" height="15" fill="rgb(228,134,27)" fg:x="86494" fg:w="89"/><text x="78.8338%" y="591.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (89 samples, 0.08%)</title><rect x="78.5838%" y="565" width="0.0809%" height="15" fill="rgb(205,55,33)" fg:x="86494" fg:w="89"/><text x="78.8338%" y="575.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (89 samples, 0.08%)</title><rect x="78.5838%" y="549" width="0.0809%" height="15" fill="rgb(243,75,43)" fg:x="86494" fg:w="89"/><text x="78.8338%" y="559.50"></text></g><g><title>tremor_script::ast::Invocable::invoke (94 samples, 0.09%)</title><rect x="78.5810%" y="661" width="0.0854%" height="15" fill="rgb(223,27,42)" fg:x="86491" fg:w="94"/><text x="78.8310%" y="671.50"></text></g><g><title>tremor_script::registry::TremorFnWrapper::invoke (94 samples, 0.09%)</title><rect x="78.5810%" y="645" width="0.0854%" height="15" fill="rgb(232,189,33)" fg:x="86491" fg:w="94"/><text x="78.8310%" y="655.50"></text></g><g><title>tremor_script::std_lib::array::load::&lt;impl tremor_script::registry::TremorFn for tremor_script::std_lib::array::load::contains::Func&gt;::invoke (94 samples, 0.09%)</title><rect x="78.5810%" y="629" width="0.0854%" height="15" fill="rgb(210,9,39)" fg:x="86491" fg:w="94"/><text x="78.8310%" y="639.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (165 samples, 0.15%)</title><rect x="78.5302%" y="693" width="0.1499%" height="15" fill="rgb(242,85,26)" fg:x="86435" fg:w="165"/><text x="78.7802%" y="703.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::invoke2 (148 samples, 0.13%)</title><rect x="78.5456%" y="677" width="0.1345%" height="15" fill="rgb(248,44,4)" fg:x="86452" fg:w="148"/><text x="78.7956%" y="687.50"></text></g><g><title>tremor_script::interpreter::imut_expr::eval_for_fn_arg (15 samples, 0.01%)</title><rect x="78.6664%" y="661" width="0.0136%" height="15" fill="rgb(250,96,46)" fg:x="86585" fg:w="15"/><text x="78.9164%" y="671.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (378 samples, 0.34%)</title><rect x="78.3784%" y="709" width="0.3434%" height="15" fill="rgb(229,116,26)" fg:x="86268" fg:w="378"/><text x="78.6284%" y="719.50"></text></g><g><title>tremor_script::interpreter::test_predicate_expr (46 samples, 0.04%)</title><rect x="78.6801%" y="693" width="0.0418%" height="15" fill="rgb(246,94,34)" fg:x="86600" fg:w="46"/><text x="78.9301%" y="703.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (17 samples, 0.02%)</title><rect x="78.8990%" y="693" width="0.0154%" height="15" fill="rgb(251,73,21)" fg:x="86841" fg:w="17"/><text x="79.1490%" y="703.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::ops::deref::Deref&gt;::deref (12 samples, 0.01%)</title><rect x="78.9145%" y="693" width="0.0109%" height="15" fill="rgb(254,121,25)" fg:x="86858" fg:w="12"/><text x="79.1645%" y="703.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.02%)</title><rect x="78.9254%" y="693" width="0.0236%" height="15" fill="rgb(215,161,49)" fg:x="86870" fg:w="26"/><text x="79.1754%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::borrow::Cow&lt;tremor_value::value::Value&gt;&gt;&gt; (24 samples, 0.02%)</title><rect x="78.9535%" y="693" width="0.0218%" height="15" fill="rgb(221,43,13)" fg:x="86901" fg:w="24"/><text x="79.2035%" y="703.50"></text></g><g><title>tremor_script::ast::ClauseGroup&lt;Ex&gt;::precondition (33 samples, 0.03%)</title><rect x="78.9753%" y="693" width="0.0300%" height="15" fill="rgb(249,5,37)" fg:x="86925" fg:w="33"/><text x="79.2253%" y="703.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (33 samples, 0.03%)</title><rect x="78.9753%" y="677" width="0.0300%" height="15" fill="rgb(226,25,44)" fg:x="86925" fg:w="33"/><text x="79.2253%" y="687.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="79.2906%" y="677" width="0.0136%" height="15" fill="rgb(238,189,16)" fg:x="87272" fg:w="15"/><text x="79.5406%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (86 samples, 0.08%)</title><rect x="79.9620%" y="485" width="0.0781%" height="15" fill="rgb(251,186,8)" fg:x="88011" fg:w="86"/><text x="80.2120%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (86 samples, 0.08%)</title><rect x="79.9620%" y="469" width="0.0781%" height="15" fill="rgb(254,34,31)" fg:x="88011" fg:w="86"/><text x="80.2120%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (86 samples, 0.08%)</title><rect x="79.9620%" y="453" width="0.0781%" height="15" fill="rgb(225,215,27)" fg:x="88011" fg:w="86"/><text x="80.2120%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (86 samples, 0.08%)</title><rect x="79.9620%" y="437" width="0.0781%" height="15" fill="rgb(221,192,48)" fg:x="88011" fg:w="86"/><text x="80.2120%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (86 samples, 0.08%)</title><rect x="79.9620%" y="421" width="0.0781%" height="15" fill="rgb(219,137,20)" fg:x="88011" fg:w="86"/><text x="80.2120%" y="431.50"></text></g><g><title>alloc::alloc::alloc (86 samples, 0.08%)</title><rect x="79.9620%" y="405" width="0.0781%" height="15" fill="rgb(219,84,11)" fg:x="88011" fg:w="86"/><text x="80.2120%" y="415.50"></text></g><g><title>__rg_alloc (86 samples, 0.08%)</title><rect x="79.9620%" y="389" width="0.0781%" height="15" fill="rgb(224,10,23)" fg:x="88011" fg:w="86"/><text x="80.2120%" y="399.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (86 samples, 0.08%)</title><rect x="79.9620%" y="373" width="0.0781%" height="15" fill="rgb(248,22,39)" fg:x="88011" fg:w="86"/><text x="80.2120%" y="383.50"></text></g><g><title>sn_rust_alloc (83 samples, 0.08%)</title><rect x="79.9647%" y="357" width="0.0754%" height="15" fill="rgb(212,154,20)" fg:x="88014" fg:w="83"/><text x="80.2147%" y="367.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::clone::Clone&gt;::clone (118 samples, 0.11%)</title><rect x="79.9493%" y="613" width="0.1072%" height="15" fill="rgb(236,199,50)" fg:x="87997" fg:w="118"/><text x="80.1993%" y="623.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (106 samples, 0.10%)</title><rect x="79.9602%" y="597" width="0.0963%" height="15" fill="rgb(211,9,17)" fg:x="88009" fg:w="106"/><text x="80.2102%" y="607.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (106 samples, 0.10%)</title><rect x="79.9602%" y="581" width="0.0963%" height="15" fill="rgb(243,216,36)" fg:x="88009" fg:w="106"/><text x="80.2102%" y="591.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (106 samples, 0.10%)</title><rect x="79.9602%" y="565" width="0.0963%" height="15" fill="rgb(250,2,10)" fg:x="88009" fg:w="106"/><text x="80.2102%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (104 samples, 0.09%)</title><rect x="79.9620%" y="549" width="0.0945%" height="15" fill="rgb(226,50,48)" fg:x="88011" fg:w="104"/><text x="80.2120%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (104 samples, 0.09%)</title><rect x="79.9620%" y="533" width="0.0945%" height="15" fill="rgb(243,81,16)" fg:x="88011" fg:w="104"/><text x="80.2120%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (104 samples, 0.09%)</title><rect x="79.9620%" y="517" width="0.0945%" height="15" fill="rgb(250,14,2)" fg:x="88011" fg:w="104"/><text x="80.2120%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (104 samples, 0.09%)</title><rect x="79.9620%" y="501" width="0.0945%" height="15" fill="rgb(233,135,29)" fg:x="88011" fg:w="104"/><text x="80.2120%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (18 samples, 0.02%)</title><rect x="80.0402%" y="485" width="0.0164%" height="15" fill="rgb(224,64,43)" fg:x="88097" fg:w="18"/><text x="80.2902%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (18 samples, 0.02%)</title><rect x="80.0402%" y="469" width="0.0164%" height="15" fill="rgb(238,84,13)" fg:x="88097" fg:w="18"/><text x="80.2902%" y="479.50"></text></g><g><title>[libc-2.31.so] (15 samples, 0.01%)</title><rect x="80.0429%" y="453" width="0.0136%" height="15" fill="rgb(253,48,26)" fg:x="88100" fg:w="15"/><text x="80.2929%" y="463.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (165 samples, 0.15%)</title><rect x="79.9093%" y="629" width="0.1499%" height="15" fill="rgb(205,223,31)" fg:x="87953" fg:w="165"/><text x="80.1593%" y="639.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (13 samples, 0.01%)</title><rect x="80.0592%" y="629" width="0.0118%" height="15" fill="rgb(221,41,32)" fg:x="88118" fg:w="13"/><text x="80.3092%" y="639.50"></text></g><g><title>alloc::borrow::Cow&lt;B&gt;::into_owned (191 samples, 0.17%)</title><rect x="79.9002%" y="661" width="0.1735%" height="15" fill="rgb(213,158,31)" fg:x="87943" fg:w="191"/><text x="80.1502%" y="671.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (191 samples, 0.17%)</title><rect x="79.9002%" y="645" width="0.1735%" height="15" fill="rgb(245,126,43)" fg:x="87943" fg:w="191"/><text x="80.1502%" y="655.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (266 samples, 0.24%)</title><rect x="80.0847%" y="661" width="0.2417%" height="15" fill="rgb(227,7,22)" fg:x="88146" fg:w="266"/><text x="80.3347%" y="671.50"></text></g><g><title>tremor_script::ast::Path::segments (41 samples, 0.04%)</title><rect x="80.4590%" y="645" width="0.0373%" height="15" fill="rgb(252,90,44)" fg:x="88558" fg:w="41"/><text x="80.7090%" y="655.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.03%)</title><rect x="80.7761%" y="629" width="0.0263%" height="15" fill="rgb(253,91,0)" fg:x="88907" fg:w="29"/><text x="81.0261%" y="639.50"></text></g><g><title>sn_rust_dealloc (285 samples, 0.26%)</title><rect x="80.8869%" y="389" width="0.2589%" height="15" fill="rgb(252,175,49)" fg:x="89029" fg:w="285"/><text x="81.1369%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::deallocate (415 samples, 0.38%)</title><rect x="80.8787%" y="453" width="0.3770%" height="15" fill="rgb(246,150,1)" fg:x="89020" fg:w="415"/><text x="81.1287%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (415 samples, 0.38%)</title><rect x="80.8787%" y="437" width="0.3770%" height="15" fill="rgb(241,192,25)" fg:x="89020" fg:w="415"/><text x="81.1287%" y="447.50"></text></g><g><title>__rg_dealloc (415 samples, 0.38%)</title><rect x="80.8787%" y="421" width="0.3770%" height="15" fill="rgb(239,187,11)" fg:x="89020" fg:w="415"/><text x="81.1287%" y="431.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (415 samples, 0.38%)</title><rect x="80.8787%" y="405" width="0.3770%" height="15" fill="rgb(218,202,51)" fg:x="89020" fg:w="415"/><text x="81.1287%" y="415.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (121 samples, 0.11%)</title><rect x="81.1459%" y="389" width="0.1099%" height="15" fill="rgb(225,176,8)" fg:x="89314" fg:w="121"/><text x="81.3959%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::free_buckets (440 samples, 0.40%)</title><rect x="80.8733%" y="485" width="0.3998%" height="15" fill="rgb(219,122,41)" fg:x="89014" fg:w="440"/><text x="81.1233%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::free_buckets (440 samples, 0.40%)</title><rect x="80.8733%" y="469" width="0.3998%" height="15" fill="rgb(248,140,20)" fg:x="89014" fg:w="440"/><text x="81.1233%" y="479.50"></text></g><g><title>hashbrown::raw::inner::TableLayout::calculate_layout_for (15 samples, 0.01%)</title><rect x="81.2594%" y="453" width="0.0136%" height="15" fill="rgb(245,41,37)" fg:x="89439" fg:w="15"/><text x="81.5094%" y="463.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (14 samples, 0.01%)</title><rect x="81.2603%" y="437" width="0.0127%" height="15" fill="rgb(235,82,39)" fg:x="89440" fg:w="14"/><text x="81.5103%" y="447.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (14 samples, 0.01%)</title><rect x="81.2603%" y="421" width="0.0127%" height="15" fill="rgb(230,108,42)" fg:x="89440" fg:w="14"/><text x="81.5103%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (453 samples, 0.41%)</title><rect x="80.8669%" y="549" width="0.4116%" height="15" fill="rgb(215,150,50)" fg:x="89007" fg:w="453"/><text x="81.1169%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (453 samples, 0.41%)</title><rect x="80.8669%" y="533" width="0.4116%" height="15" fill="rgb(233,212,5)" fg:x="89007" fg:w="453"/><text x="81.1169%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (453 samples, 0.41%)</title><rect x="80.8669%" y="517" width="0.4116%" height="15" fill="rgb(245,80,22)" fg:x="89007" fg:w="453"/><text x="81.1169%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (453 samples, 0.41%)</title><rect x="80.8669%" y="501" width="0.4116%" height="15" fill="rgb(238,129,16)" fg:x="89007" fg:w="453"/><text x="81.1169%" y="511.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (475 samples, 0.43%)</title><rect x="80.8551%" y="565" width="0.4316%" height="15" fill="rgb(240,19,0)" fg:x="88994" fg:w="475"/><text x="81.1051%" y="575.50"></text></g><g><title>sn_rust_dealloc (89 samples, 0.08%)</title><rect x="81.2867%" y="565" width="0.0809%" height="15" fill="rgb(232,42,35)" fg:x="89469" fg:w="89"/><text x="81.5367%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (630 samples, 0.57%)</title><rect x="80.8024%" y="629" width="0.5724%" height="15" fill="rgb(223,130,24)" fg:x="88936" fg:w="630"/><text x="81.0524%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (606 samples, 0.55%)</title><rect x="80.8242%" y="613" width="0.5506%" height="15" fill="rgb(237,16,22)" fg:x="88960" fg:w="606"/><text x="81.0742%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (606 samples, 0.55%)</title><rect x="80.8242%" y="597" width="0.5506%" height="15" fill="rgb(248,192,20)" fg:x="88960" fg:w="606"/><text x="81.0742%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (606 samples, 0.55%)</title><rect x="80.8242%" y="581" width="0.5506%" height="15" fill="rgb(233,167,2)" fg:x="88960" fg:w="606"/><text x="81.0742%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (163 samples, 0.15%)</title><rect x="81.4548%" y="405" width="0.1481%" height="15" fill="rgb(252,71,44)" fg:x="89654" fg:w="163"/><text x="81.7048%" y="415.50"></text></g><g><title>hashbrown::raw::inner::h2 (22 samples, 0.02%)</title><rect x="81.6029%" y="405" width="0.0200%" height="15" fill="rgb(238,37,47)" fg:x="89817" fg:w="22"/><text x="81.8529%" y="415.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (22 samples, 0.02%)</title><rect x="81.6228%" y="405" width="0.0200%" height="15" fill="rgb(214,202,54)" fg:x="89839" fg:w="22"/><text x="81.8728%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (22 samples, 0.02%)</title><rect x="81.6228%" y="389" width="0.0200%" height="15" fill="rgb(254,165,40)" fg:x="89839" fg:w="22"/><text x="81.8728%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (22 samples, 0.02%)</title><rect x="81.6228%" y="373" width="0.0200%" height="15" fill="rgb(246,173,38)" fg:x="89839" fg:w="22"/><text x="81.8728%" y="383.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck::{{closure}}::{{closure}} (246 samples, 0.22%)</title><rect x="81.4430%" y="501" width="0.2235%" height="15" fill="rgb(215,3,27)" fg:x="89641" fg:w="246"/><text x="81.6930%" y="511.50"></text></g><g><title>hashbrown::map::RawEntryBuilderMut&lt;K,V,S,A&gt;::from_key_hashed_nocheck (246 samples, 0.22%)</title><rect x="81.4430%" y="485" width="0.2235%" height="15" fill="rgb(239,169,51)" fg:x="89641" fg:w="246"/><text x="81.6930%" y="495.50"></text></g><g><title>hashbrown::map::RawEntryBuilderMut&lt;K,V,S,A&gt;::from_hash (246 samples, 0.22%)</title><rect x="81.4430%" y="469" width="0.2235%" height="15" fill="rgb(212,5,25)" fg:x="89641" fg:w="246"/><text x="81.6930%" y="479.50"></text></g><g><title>hashbrown::map::RawEntryBuilderMut&lt;K,V,S,A&gt;::search (246 samples, 0.22%)</title><rect x="81.4430%" y="453" width="0.2235%" height="15" fill="rgb(243,45,17)" fg:x="89641" fg:w="246"/><text x="81.6930%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (246 samples, 0.22%)</title><rect x="81.4430%" y="437" width="0.2235%" height="15" fill="rgb(242,97,9)" fg:x="89641" fg:w="246"/><text x="81.6930%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (246 samples, 0.22%)</title><rect x="81.4430%" y="421" width="0.2235%" height="15" fill="rgb(228,71,31)" fg:x="89641" fg:w="246"/><text x="81.6930%" y="431.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty (16 samples, 0.01%)</title><rect x="81.6519%" y="405" width="0.0145%" height="15" fill="rgb(252,184,16)" fg:x="89871" fg:w="16"/><text x="81.9019%" y="415.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (16 samples, 0.01%)</title><rect x="81.6519%" y="389" width="0.0145%" height="15" fill="rgb(236,169,46)" fg:x="89871" fg:w="16"/><text x="81.9019%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (16 samples, 0.01%)</title><rect x="81.6519%" y="373" width="0.0145%" height="15" fill="rgb(207,17,47)" fg:x="89871" fg:w="16"/><text x="81.9019%" y="383.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_mut_key_hashed_nocheck (308 samples, 0.28%)</title><rect x="81.4021%" y="597" width="0.2798%" height="15" fill="rgb(206,201,28)" fg:x="89596" fg:w="308"/><text x="81.6521%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck (293 samples, 0.27%)</title><rect x="81.4157%" y="581" width="0.2662%" height="15" fill="rgb(224,184,23)" fg:x="89611" fg:w="293"/><text x="81.6657%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (277 samples, 0.25%)</title><rect x="81.4302%" y="565" width="0.2517%" height="15" fill="rgb(208,139,48)" fg:x="89627" fg:w="277"/><text x="81.6802%" y="575.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (266 samples, 0.24%)</title><rect x="81.4402%" y="549" width="0.2417%" height="15" fill="rgb(208,130,10)" fg:x="89638" fg:w="266"/><text x="81.6902%" y="559.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck::{{closure}} (266 samples, 0.24%)</title><rect x="81.4402%" y="533" width="0.2417%" height="15" fill="rgb(211,213,45)" fg:x="89638" fg:w="266"/><text x="81.6902%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (263 samples, 0.24%)</title><rect x="81.4430%" y="517" width="0.2389%" height="15" fill="rgb(235,100,30)" fg:x="89641" fg:w="263"/><text x="81.6930%" y="527.50"></text></g><g><title>core::mem::replace (17 samples, 0.02%)</title><rect x="81.6665%" y="501" width="0.0154%" height="15" fill="rgb(206,144,31)" fg:x="89887" fg:w="17"/><text x="81.9165%" y="511.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (398 samples, 0.36%)</title><rect x="82.0453%" y="581" width="0.3616%" height="15" fill="rgb(224,200,26)" fg:x="90304" fg:w="398"/><text x="82.2953%" y="591.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::clone::Clone&gt;::clone (18 samples, 0.02%)</title><rect x="82.5768%" y="565" width="0.0164%" height="15" fill="rgb(247,104,53)" fg:x="90889" fg:w="18"/><text x="82.8268%" y="575.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (2,670 samples, 2.43%)</title><rect x="80.3263%" y="661" width="2.4258%" height="15" fill="rgb(220,14,17)" fg:x="88412" fg:w="2670"/><text x="80.5763%" y="671.50">tr..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (2,483 samples, 2.26%)</title><rect x="80.4962%" y="645" width="2.2559%" height="15" fill="rgb(230,140,40)" fg:x="88599" fg:w="2483"/><text x="80.7462%" y="655.50">t..</text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (1,506 samples, 1.37%)</title><rect x="81.3839%" y="629" width="1.3683%" height="15" fill="rgb(229,2,41)" fg:x="89576" fg:w="1506"/><text x="81.6339%" y="639.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (1,497 samples, 1.36%)</title><rect x="81.3921%" y="613" width="1.3601%" height="15" fill="rgb(232,89,16)" fg:x="89585" fg:w="1497"/><text x="81.6421%" y="623.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (1,178 samples, 1.07%)</title><rect x="81.6819%" y="597" width="1.0703%" height="15" fill="rgb(247,59,52)" fg:x="89904" fg:w="1178"/><text x="81.9319%" y="607.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut::{{closure}} (380 samples, 0.35%)</title><rect x="82.4069%" y="581" width="0.3452%" height="15" fill="rgb(226,110,21)" fg:x="90702" fg:w="380"/><text x="82.6569%" y="591.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (175 samples, 0.16%)</title><rect x="82.5932%" y="565" width="0.1590%" height="15" fill="rgb(224,176,43)" fg:x="90907" fg:w="175"/><text x="82.8432%" y="575.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (175 samples, 0.16%)</title><rect x="82.5932%" y="549" width="0.1590%" height="15" fill="rgb(221,73,6)" fg:x="90907" fg:w="175"/><text x="82.8432%" y="559.50"></text></g><g><title>tremor_value::value::Value::Object (170 samples, 0.15%)</title><rect x="82.5977%" y="533" width="0.1545%" height="15" fill="rgb(232,78,19)" fg:x="90912" fg:w="170"/><text x="82.8477%" y="543.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (4,700 samples, 4.27%)</title><rect x="79.0053%" y="693" width="4.2702%" height="15" fill="rgb(233,112,48)" fg:x="86958" fg:w="4700"/><text x="79.2553%" y="703.50">tremo..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (4,366 samples, 3.97%)</title><rect x="79.3088%" y="677" width="3.9667%" height="15" fill="rgb(243,131,47)" fg:x="87292" fg:w="4366"/><text x="79.5588%" y="687.50">trem..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (576 samples, 0.52%)</title><rect x="82.7522%" y="661" width="0.5233%" height="15" fill="rgb(226,51,1)" fg:x="91082" fg:w="576"/><text x="83.0022%" y="671.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::ValueAccess&gt;::as_str (50 samples, 0.05%)</title><rect x="83.2301%" y="645" width="0.0454%" height="15" fill="rgb(247,58,7)" fg:x="91608" fg:w="50"/><text x="83.4801%" y="655.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.02%)</title><rect x="83.4681%" y="645" width="0.0200%" height="15" fill="rgb(209,7,32)" fg:x="91870" fg:w="22"/><text x="83.7181%" y="655.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (20 samples, 0.02%)</title><rect x="83.4881%" y="645" width="0.0182%" height="15" fill="rgb(209,39,41)" fg:x="91892" fg:w="20"/><text x="83.7381%" y="655.50"></text></g><g><title>tremor_script::ast::Path::segments (114 samples, 0.10%)</title><rect x="83.5063%" y="645" width="0.1036%" height="15" fill="rgb(226,182,46)" fg:x="91912" fg:w="114"/><text x="83.7563%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.02%)</title><rect x="83.8052%" y="405" width="0.0182%" height="15" fill="rgb(230,219,10)" fg:x="92241" fg:w="20"/><text x="84.0552%" y="415.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (20 samples, 0.02%)</title><rect x="83.8052%" y="389" width="0.0182%" height="15" fill="rgb(227,175,30)" fg:x="92241" fg:w="20"/><text x="84.0552%" y="399.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search::{{closure}} (1,000 samples, 0.91%)</title><rect x="83.8233%" y="389" width="0.9085%" height="15" fill="rgb(217,2,50)" fg:x="92261" fg:w="1000"/><text x="84.0733%" y="399.50"></text></g><g><title>hashbrown::map::equivalent::{{closure}} (995 samples, 0.90%)</title><rect x="83.8279%" y="373" width="0.9040%" height="15" fill="rgb(229,160,0)" fg:x="92266" fg:w="995"/><text x="84.0779%" y="383.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (995 samples, 0.90%)</title><rect x="83.8279%" y="357" width="0.9040%" height="15" fill="rgb(207,78,37)" fg:x="92266" fg:w="995"/><text x="84.0779%" y="367.50"></text></g><g><title>abi_stable::std_types::map::map_query::MapQuery&lt;K&gt;::is_equal (560 samples, 0.51%)</title><rect x="84.2231%" y="341" width="0.5088%" height="15" fill="rgb(225,57,0)" fg:x="92701" fg:w="560"/><text x="84.4731%" y="351.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (560 samples, 0.51%)</title><rect x="84.2231%" y="325" width="0.5088%" height="15" fill="rgb(232,154,2)" fg:x="92701" fg:w="560"/><text x="84.4731%" y="335.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (560 samples, 0.51%)</title><rect x="84.2231%" y="309" width="0.5088%" height="15" fill="rgb(241,212,25)" fg:x="92701" fg:w="560"/><text x="84.4731%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (556 samples, 0.51%)</title><rect x="84.2267%" y="293" width="0.5052%" height="15" fill="rgb(226,69,20)" fg:x="92705" fg:w="556"/><text x="84.4767%" y="303.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (556 samples, 0.51%)</title><rect x="84.2267%" y="277" width="0.5052%" height="15" fill="rgb(247,184,54)" fg:x="92705" fg:w="556"/><text x="84.4767%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (556 samples, 0.51%)</title><rect x="84.2267%" y="261" width="0.5052%" height="15" fill="rgb(210,145,0)" fg:x="92705" fg:w="556"/><text x="84.4767%" y="271.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (556 samples, 0.51%)</title><rect x="84.2267%" y="245" width="0.5052%" height="15" fill="rgb(253,82,12)" fg:x="92705" fg:w="556"/><text x="84.4767%" y="255.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (556 samples, 0.51%)</title><rect x="84.2267%" y="229" width="0.5052%" height="15" fill="rgb(245,42,11)" fg:x="92705" fg:w="556"/><text x="84.4767%" y="239.50"></text></g><g><title>[libc-2.31.so] (549 samples, 0.50%)</title><rect x="84.2331%" y="213" width="0.4988%" height="15" fill="rgb(219,147,32)" fg:x="92712" fg:w="549"/><text x="84.4831%" y="223.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (1,019 samples, 0.93%)</title><rect x="83.8233%" y="405" width="0.9258%" height="15" fill="rgb(246,12,7)" fg:x="92261" fg:w="1019"/><text x="84.0733%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::bucket (19 samples, 0.02%)</title><rect x="84.7319%" y="389" width="0.0173%" height="15" fill="rgb(243,50,9)" fg:x="93261" fg:w="19"/><text x="84.9819%" y="399.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::from_base_index (19 samples, 0.02%)</title><rect x="84.7319%" y="373" width="0.0173%" height="15" fill="rgb(219,149,6)" fg:x="93261" fg:w="19"/><text x="84.9819%" y="383.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (13 samples, 0.01%)</title><rect x="84.7373%" y="357" width="0.0118%" height="15" fill="rgb(241,51,42)" fg:x="93267" fg:w="13"/><text x="84.9873%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (142 samples, 0.13%)</title><rect x="84.7492%" y="405" width="0.1290%" height="15" fill="rgb(226,128,27)" fg:x="93280" fg:w="142"/><text x="84.9992%" y="415.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (411 samples, 0.37%)</title><rect x="84.8863%" y="405" width="0.3734%" height="15" fill="rgb(244,144,4)" fg:x="93431" fg:w="411"/><text x="85.1363%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (411 samples, 0.37%)</title><rect x="84.8863%" y="389" width="0.3734%" height="15" fill="rgb(221,4,13)" fg:x="93431" fg:w="411"/><text x="85.1363%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (411 samples, 0.37%)</title><rect x="84.8863%" y="373" width="0.3734%" height="15" fill="rgb(208,170,28)" fg:x="93431" fg:w="411"/><text x="85.1363%" y="383.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (1,642 samples, 1.49%)</title><rect x="83.7752%" y="565" width="1.4918%" height="15" fill="rgb(226,131,13)" fg:x="92208" fg:w="1642"/><text x="84.0252%" y="575.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (1,631 samples, 1.48%)</title><rect x="83.7852%" y="549" width="1.4818%" height="15" fill="rgb(215,72,41)" fg:x="92219" fg:w="1631"/><text x="84.0352%" y="559.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (1,631 samples, 1.48%)</title><rect x="83.7852%" y="533" width="1.4818%" height="15" fill="rgb(243,108,20)" fg:x="92219" fg:w="1631"/><text x="84.0352%" y="543.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck::{{closure}} (1,631 samples, 1.48%)</title><rect x="83.7852%" y="517" width="1.4818%" height="15" fill="rgb(230,189,17)" fg:x="92219" fg:w="1631"/><text x="84.0352%" y="527.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_key_hashed_nocheck (1,619 samples, 1.47%)</title><rect x="83.7961%" y="501" width="1.4709%" height="15" fill="rgb(220,50,17)" fg:x="92231" fg:w="1619"/><text x="84.0461%" y="511.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_hash (1,619 samples, 1.47%)</title><rect x="83.7961%" y="485" width="1.4709%" height="15" fill="rgb(248,152,48)" fg:x="92231" fg:w="1619"/><text x="84.0461%" y="495.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search (1,619 samples, 1.47%)</title><rect x="83.7961%" y="469" width="1.4709%" height="15" fill="rgb(244,91,11)" fg:x="92231" fg:w="1619"/><text x="84.0461%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (1,615 samples, 1.47%)</title><rect x="83.7997%" y="453" width="1.4673%" height="15" fill="rgb(220,157,5)" fg:x="92235" fg:w="1615"/><text x="84.0497%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (1,615 samples, 1.47%)</title><rect x="83.7997%" y="437" width="1.4673%" height="15" fill="rgb(253,137,8)" fg:x="92235" fg:w="1615"/><text x="84.0497%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (1,615 samples, 1.47%)</title><rect x="83.7997%" y="421" width="1.4673%" height="15" fill="rgb(217,137,51)" fg:x="92235" fg:w="1615"/><text x="84.0497%" y="431.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_key_hashed_nocheck (1,829 samples, 1.66%)</title><rect x="83.6117%" y="581" width="1.6617%" height="15" fill="rgb(218,209,53)" fg:x="92028" fg:w="1829"/><text x="83.8617%" y="591.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (2,201 samples, 2.00%)</title><rect x="83.2755%" y="693" width="1.9997%" height="15" fill="rgb(249,137,25)" fg:x="91658" fg:w="2201"/><text x="83.5255%" y="703.50">t..</text></g><g><title>tremor_script::interpreter::resolve (2,140 samples, 1.94%)</title><rect x="83.3309%" y="677" width="1.9443%" height="15" fill="rgb(239,155,26)" fg:x="91719" fg:w="2140"/><text x="83.5809%" y="687.50">t..</text></g><g><title>tremor_script::interpreter::resolve_value (2,068 samples, 1.88%)</title><rect x="83.3963%" y="661" width="1.8789%" height="15" fill="rgb(227,85,46)" fg:x="91791" fg:w="2068"/><text x="83.6463%" y="671.50">t..</text></g><g><title>tremor_value::known_key::KnownKey::lookup (1,833 samples, 1.67%)</title><rect x="83.6098%" y="645" width="1.6654%" height="15" fill="rgb(251,107,43)" fg:x="92026" fg:w="1833"/><text x="83.8598%" y="655.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (1,833 samples, 1.67%)</title><rect x="83.6098%" y="629" width="1.6654%" height="15" fill="rgb(234,170,33)" fg:x="92026" fg:w="1833"/><text x="83.8598%" y="639.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (1,833 samples, 1.67%)</title><rect x="83.6098%" y="613" width="1.6654%" height="15" fill="rgb(206,29,35)" fg:x="92026" fg:w="1833"/><text x="83.8598%" y="623.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (1,833 samples, 1.67%)</title><rect x="83.6098%" y="597" width="1.6654%" height="15" fill="rgb(227,138,25)" fg:x="92026" fg:w="1833"/><text x="83.8598%" y="607.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::borrow::Borrow&lt;B&gt;&gt;::borrow (77 samples, 0.07%)</title><rect x="85.8231%" y="677" width="0.0700%" height="15" fill="rgb(249,131,35)" fg:x="94462" fg:w="77"/><text x="86.0731%" y="687.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::ops::deref::Deref&gt;::deref (77 samples, 0.07%)</title><rect x="85.8231%" y="661" width="0.0700%" height="15" fill="rgb(239,6,40)" fg:x="94462" fg:w="77"/><text x="86.0731%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::borrow::Cow&lt;tremor_value::value::Value&gt;&gt; (15 samples, 0.01%)</title><rect x="85.8930%" y="677" width="0.0136%" height="15" fill="rgb(246,136,47)" fg:x="94539" fg:w="15"/><text x="86.1430%" y="687.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (67 samples, 0.06%)</title><rect x="85.9066%" y="677" width="0.0609%" height="15" fill="rgb(253,58,26)" fg:x="94554" fg:w="67"/><text x="86.1566%" y="687.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (61 samples, 0.06%)</title><rect x="85.9739%" y="661" width="0.0554%" height="15" fill="rgb(237,141,10)" fg:x="94628" fg:w="61"/><text x="86.2239%" y="671.50"></text></g><g><title>tremor_script::interpreter::test_guard (72 samples, 0.07%)</title><rect x="85.9675%" y="677" width="0.0654%" height="15" fill="rgb(234,156,12)" fg:x="94621" fg:w="72"/><text x="86.2175%" y="687.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (9,323 samples, 8.47%)</title><rect x="77.9487%" y="869" width="8.4704%" height="15" fill="rgb(243,224,36)" fg:x="85795" fg:w="9323"/><text x="78.1987%" y="879.50">tremor_pipel..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (9,323 samples, 8.47%)</title><rect x="77.9487%" y="853" width="8.4704%" height="15" fill="rgb(205,229,51)" fg:x="85795" fg:w="9323"/><text x="78.1987%" y="863.50">tremor_pipel..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (9,323 samples, 8.47%)</title><rect x="77.9487%" y="837" width="8.4704%" height="15" fill="rgb(223,189,4)" fg:x="85795" fg:w="9323"/><text x="78.1987%" y="847.50">tremor_pipel..</text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (9,323 samples, 8.47%)</title><rect x="77.9487%" y="821" width="8.4704%" height="15" fill="rgb(249,167,54)" fg:x="85795" fg:w="9323"/><text x="78.1987%" y="831.50">&lt;tremor_pipe..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (9,256 samples, 8.41%)</title><rect x="78.0096%" y="805" width="8.4095%" height="15" fill="rgb(218,34,28)" fg:x="85862" fg:w="9256"/><text x="78.2596%" y="815.50">&lt;tremor_pipe..</text></g><g><title>tremor_script::srs::EventPayload::rent_mut (9,256 samples, 8.41%)</title><rect x="78.0096%" y="789" width="8.4095%" height="15" fill="rgb(232,109,42)" fg:x="85862" fg:w="9256"/><text x="78.2596%" y="799.50">tremor_scrip..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (9,256 samples, 8.41%)</title><rect x="78.0096%" y="773" width="8.4095%" height="15" fill="rgb(248,214,46)" fg:x="85862" fg:w="9256"/><text x="78.2596%" y="783.50">&lt;tremor_pipe..</text></g><g><title>tremor_script::script::Script::run (9,256 samples, 8.41%)</title><rect x="78.0096%" y="757" width="8.4095%" height="15" fill="rgb(244,216,40)" fg:x="85862" fg:w="9256"/><text x="78.2596%" y="767.50">tremor_scrip..</text></g><g><title>tremor_script::ast::Script::run (9,256 samples, 8.41%)</title><rect x="78.0096%" y="741" width="8.4095%" height="15" fill="rgb(231,226,31)" fg:x="85862" fg:w="9256"/><text x="78.2596%" y="751.50">tremor_scrip..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (8,926 samples, 8.11%)</title><rect x="78.3094%" y="725" width="8.1097%" height="15" fill="rgb(238,38,43)" fg:x="86192" fg:w="8926"/><text x="78.5594%" y="735.50">tremor_scri..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (8,472 samples, 7.70%)</title><rect x="78.7219%" y="709" width="7.6972%" height="15" fill="rgb(208,88,43)" fg:x="86646" fg:w="8472"/><text x="78.9719%" y="719.50">tremor_scri..</text></g><g><title>tremor_script::interpreter::test_predicate_expr (1,259 samples, 1.14%)</title><rect x="85.2752%" y="693" width="1.1439%" height="15" fill="rgb(205,136,37)" fg:x="93859" fg:w="1259"/><text x="85.5252%" y="703.50"></text></g><g><title>tremor_script::interpreter::val_eq (425 samples, 0.39%)</title><rect x="86.0329%" y="677" width="0.3861%" height="15" fill="rgb(237,34,14)" fg:x="94693" fg:w="425"/><text x="86.2829%" y="687.50"></text></g><g><title>[libc-2.31.so] (290 samples, 0.26%)</title><rect x="86.1556%" y="661" width="0.2635%" height="15" fill="rgb(236,193,44)" fg:x="94828" fg:w="290"/><text x="86.4056%" y="671.50"></text></g><g><title>[libc-2.31.so] (61 samples, 0.06%)</title><rect x="86.4218%" y="837" width="0.0554%" height="15" fill="rgb(231,48,10)" fg:x="95121" fg:w="61"/><text x="86.6718%" y="847.50"></text></g><g><title>[libc-2.31.so] (191 samples, 0.17%)</title><rect x="86.6162%" y="773" width="0.1735%" height="15" fill="rgb(213,141,34)" fg:x="95335" fg:w="191"/><text x="86.8662%" y="783.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (83 samples, 0.08%)</title><rect x="86.8343%" y="757" width="0.0754%" height="15" fill="rgb(249,130,34)" fg:x="95575" fg:w="83"/><text x="87.0843%" y="767.50"></text></g><g><title>core::ptr::write (83 samples, 0.08%)</title><rect x="86.8343%" y="741" width="0.0754%" height="15" fill="rgb(219,42,41)" fg:x="95575" fg:w="83"/><text x="87.0843%" y="751.50"></text></g><g><title>[libc-2.31.so] (80 samples, 0.07%)</title><rect x="86.8370%" y="725" width="0.0727%" height="15" fill="rgb(224,100,54)" fg:x="95578" fg:w="80"/><text x="87.0870%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (168 samples, 0.15%)</title><rect x="86.9097%" y="757" width="0.1526%" height="15" fill="rgb(229,200,27)" fg:x="95658" fg:w="168"/><text x="87.1597%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (168 samples, 0.15%)</title><rect x="86.9097%" y="741" width="0.1526%" height="15" fill="rgb(217,118,10)" fg:x="95658" fg:w="168"/><text x="87.1597%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (124 samples, 0.11%)</title><rect x="87.0623%" y="757" width="0.1127%" height="15" fill="rgb(206,22,3)" fg:x="95826" fg:w="124"/><text x="87.3123%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_load (121 samples, 0.11%)</title><rect x="87.0650%" y="741" width="0.1099%" height="15" fill="rgb(232,163,46)" fg:x="95829" fg:w="121"/><text x="87.3150%" y="751.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (669 samples, 0.61%)</title><rect x="86.5699%" y="789" width="0.6078%" height="15" fill="rgb(206,95,13)" fg:x="95284" fg:w="669"/><text x="86.8199%" y="799.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (427 samples, 0.39%)</title><rect x="86.7897%" y="773" width="0.3879%" height="15" fill="rgb(253,154,18)" fg:x="95526" fg:w="427"/><text x="87.0397%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (55 samples, 0.05%)</title><rect x="87.1831%" y="773" width="0.0500%" height="15" fill="rgb(219,32,23)" fg:x="95959" fg:w="55"/><text x="87.4331%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (55 samples, 0.05%)</title><rect x="87.1831%" y="757" width="0.0500%" height="15" fill="rgb(230,191,45)" fg:x="95959" fg:w="55"/><text x="87.4331%" y="767.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (55 samples, 0.05%)</title><rect x="87.1831%" y="741" width="0.0500%" height="15" fill="rgb(229,64,36)" fg:x="95959" fg:w="55"/><text x="87.4331%" y="751.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (54 samples, 0.05%)</title><rect x="87.1841%" y="725" width="0.0491%" height="15" fill="rgb(205,129,25)" fg:x="95960" fg:w="54"/><text x="87.4341%" y="735.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (54 samples, 0.05%)</title><rect x="87.1841%" y="709" width="0.0491%" height="15" fill="rgb(254,112,7)" fg:x="95960" fg:w="54"/><text x="87.4341%" y="719.50"></text></g><g><title>__GI___pthread_mutex_unlock (54 samples, 0.05%)</title><rect x="87.1841%" y="693" width="0.0491%" height="15" fill="rgb(226,53,48)" fg:x="95960" fg:w="54"/><text x="87.4341%" y="703.50"></text></g><g><title>event_listener::Inner::lock (88 samples, 0.08%)</title><rect x="87.2477%" y="773" width="0.0800%" height="15" fill="rgb(214,153,38)" fg:x="96030" fg:w="88"/><text x="87.4977%" y="783.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (87 samples, 0.08%)</title><rect x="87.2486%" y="757" width="0.0790%" height="15" fill="rgb(243,101,7)" fg:x="96031" fg:w="87"/><text x="87.4986%" y="767.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (86 samples, 0.08%)</title><rect x="87.2495%" y="741" width="0.0781%" height="15" fill="rgb(240,140,22)" fg:x="96032" fg:w="86"/><text x="87.4995%" y="751.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (85 samples, 0.08%)</title><rect x="87.2504%" y="725" width="0.0772%" height="15" fill="rgb(235,114,2)" fg:x="96033" fg:w="85"/><text x="87.5004%" y="735.50"></text></g><g><title>__GI___pthread_mutex_lock (85 samples, 0.08%)</title><rect x="87.2504%" y="709" width="0.0772%" height="15" fill="rgb(242,59,12)" fg:x="96033" fg:w="85"/><text x="87.5004%" y="719.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_waker (18 samples, 0.02%)</title><rect x="87.3312%" y="725" width="0.0164%" height="15" fill="rgb(252,134,9)" fg:x="96122" fg:w="18"/><text x="87.5812%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (17 samples, 0.02%)</title><rect x="87.3321%" y="709" width="0.0154%" height="15" fill="rgb(236,4,44)" fg:x="96123" fg:w="17"/><text x="87.5821%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_sub (17 samples, 0.02%)</title><rect x="87.3321%" y="693" width="0.0154%" height="15" fill="rgb(254,172,41)" fg:x="96123" fg:w="17"/><text x="87.5821%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (72 samples, 0.07%)</title><rect x="87.3530%" y="677" width="0.0654%" height="15" fill="rgb(244,63,20)" fg:x="96146" fg:w="72"/><text x="87.6030%" y="687.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (72 samples, 0.07%)</title><rect x="87.3530%" y="661" width="0.0654%" height="15" fill="rgb(250,73,31)" fg:x="96146" fg:w="72"/><text x="87.6030%" y="671.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (72 samples, 0.07%)</title><rect x="87.3530%" y="645" width="0.0654%" height="15" fill="rgb(241,38,36)" fg:x="96146" fg:w="72"/><text x="87.6030%" y="655.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (72 samples, 0.07%)</title><rect x="87.3530%" y="629" width="0.0654%" height="15" fill="rgb(245,211,2)" fg:x="96146" fg:w="72"/><text x="87.6030%" y="639.50"></text></g><g><title>__GI___pthread_mutex_unlock (72 samples, 0.07%)</title><rect x="87.3530%" y="613" width="0.0654%" height="15" fill="rgb(206,120,28)" fg:x="96146" fg:w="72"/><text x="87.6030%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (23 samples, 0.02%)</title><rect x="87.4185%" y="677" width="0.0209%" height="15" fill="rgb(211,59,34)" fg:x="96218" fg:w="23"/><text x="87.6685%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (23 samples, 0.02%)</title><rect x="87.4185%" y="661" width="0.0209%" height="15" fill="rgb(233,168,5)" fg:x="96218" fg:w="23"/><text x="87.6685%" y="671.50"></text></g><g><title>async_io::reactor::Reactor::notify (12 samples, 0.01%)</title><rect x="87.4466%" y="629" width="0.0109%" height="15" fill="rgb(234,33,13)" fg:x="96249" fg:w="12"/><text x="87.6966%" y="639.50"></text></g><g><title>polling::Poller::notify (12 samples, 0.01%)</title><rect x="87.4466%" y="613" width="0.0109%" height="15" fill="rgb(231,150,26)" fg:x="96249" fg:w="12"/><text x="87.6966%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (43 samples, 0.04%)</title><rect x="87.4866%" y="597" width="0.0391%" height="15" fill="rgb(217,191,4)" fg:x="96293" fg:w="43"/><text x="87.7366%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_swap (43 samples, 0.04%)</title><rect x="87.4866%" y="581" width="0.0391%" height="15" fill="rgb(246,198,38)" fg:x="96293" fg:w="43"/><text x="87.7366%" y="591.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (48 samples, 0.04%)</title><rect x="87.5257%" y="597" width="0.0436%" height="15" fill="rgb(245,64,37)" fg:x="96336" fg:w="48"/><text x="87.7757%" y="607.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (48 samples, 0.04%)</title><rect x="87.5257%" y="581" width="0.0436%" height="15" fill="rgb(250,30,36)" fg:x="96336" fg:w="48"/><text x="87.7757%" y="591.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (48 samples, 0.04%)</title><rect x="87.5257%" y="565" width="0.0436%" height="15" fill="rgb(217,86,53)" fg:x="96336" fg:w="48"/><text x="87.7757%" y="575.50"></text></g><g><title>__pthread_cond_signal (48 samples, 0.04%)</title><rect x="87.5257%" y="549" width="0.0436%" height="15" fill="rgb(228,157,16)" fg:x="96336" fg:w="48"/><text x="87.7757%" y="559.50"></text></g><g><title>parking::Unparker::unpark (161 samples, 0.15%)</title><rect x="87.4584%" y="629" width="0.1463%" height="15" fill="rgb(217,59,31)" fg:x="96262" fg:w="161"/><text x="87.7084%" y="639.50"></text></g><g><title>parking::Inner::unpark (140 samples, 0.13%)</title><rect x="87.4775%" y="613" width="0.1272%" height="15" fill="rgb(237,138,41)" fg:x="96283" fg:w="140"/><text x="87.7275%" y="623.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (39 samples, 0.04%)</title><rect x="87.5693%" y="597" width="0.0354%" height="15" fill="rgb(227,91,49)" fg:x="96384" fg:w="39"/><text x="87.8193%" y="607.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (38 samples, 0.03%)</title><rect x="87.5702%" y="581" width="0.0345%" height="15" fill="rgb(247,21,44)" fg:x="96385" fg:w="38"/><text x="87.8202%" y="591.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (37 samples, 0.03%)</title><rect x="87.5711%" y="565" width="0.0336%" height="15" fill="rgb(219,210,51)" fg:x="96386" fg:w="37"/><text x="87.8211%" y="575.50"></text></g><g><title>__GI___pthread_mutex_lock (37 samples, 0.03%)</title><rect x="87.5711%" y="549" width="0.0336%" height="15" fill="rgb(209,140,6)" fg:x="96386" fg:w="37"/><text x="87.8211%" y="559.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (186 samples, 0.17%)</title><rect x="87.4394%" y="645" width="0.1690%" height="15" fill="rgb(221,188,24)" fg:x="96241" fg:w="186"/><text x="87.6894%" y="655.50"></text></g><g><title>core::task::wake::Waker::wake (225 samples, 0.20%)</title><rect x="87.4394%" y="677" width="0.2044%" height="15" fill="rgb(232,154,20)" fg:x="96241" fg:w="225"/><text x="87.6894%" y="687.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (225 samples, 0.20%)</title><rect x="87.4394%" y="661" width="0.2044%" height="15" fill="rgb(244,137,50)" fg:x="96241" fg:w="225"/><text x="87.6894%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (39 samples, 0.04%)</title><rect x="87.6083%" y="645" width="0.0354%" height="15" fill="rgb(225,185,43)" fg:x="96427" fg:w="39"/><text x="87.8583%" y="655.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (39 samples, 0.04%)</title><rect x="87.6083%" y="629" width="0.0354%" height="15" fill="rgb(213,205,38)" fg:x="96427" fg:w="39"/><text x="87.8583%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (38 samples, 0.03%)</title><rect x="87.6093%" y="613" width="0.0345%" height="15" fill="rgb(236,73,12)" fg:x="96428" fg:w="38"/><text x="87.8593%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_sub (38 samples, 0.03%)</title><rect x="87.6093%" y="597" width="0.0345%" height="15" fill="rgb(235,219,13)" fg:x="96428" fg:w="38"/><text x="87.8593%" y="607.50"></text></g><g><title>async_executor::State::notify (390 samples, 0.35%)</title><rect x="87.3485%" y="693" width="0.3543%" height="15" fill="rgb(218,59,36)" fg:x="96141" fg:w="390"/><text x="87.5985%" y="703.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (65 samples, 0.06%)</title><rect x="87.6438%" y="677" width="0.0591%" height="15" fill="rgb(205,110,39)" fg:x="96466" fg:w="65"/><text x="87.8938%" y="687.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (65 samples, 0.06%)</title><rect x="87.6438%" y="661" width="0.0591%" height="15" fill="rgb(218,206,42)" fg:x="96466" fg:w="65"/><text x="87.8938%" y="671.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (62 samples, 0.06%)</title><rect x="87.6465%" y="645" width="0.0563%" height="15" fill="rgb(248,125,24)" fg:x="96469" fg:w="62"/><text x="87.8965%" y="655.50"></text></g><g><title>__GI___pthread_mutex_lock (62 samples, 0.06%)</title><rect x="87.6465%" y="629" width="0.0563%" height="15" fill="rgb(242,28,27)" fg:x="96469" fg:w="62"/><text x="87.8965%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (58 samples, 0.05%)</title><rect x="87.7092%" y="661" width="0.0527%" height="15" fill="rgb(216,228,15)" fg:x="96538" fg:w="58"/><text x="87.9592%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (58 samples, 0.05%)</title><rect x="87.7092%" y="645" width="0.0527%" height="15" fill="rgb(235,116,46)" fg:x="96538" fg:w="58"/><text x="87.9592%" y="655.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (472 samples, 0.43%)</title><rect x="87.3485%" y="709" width="0.4288%" height="15" fill="rgb(224,18,32)" fg:x="96141" fg:w="472"/><text x="87.5985%" y="719.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (82 samples, 0.07%)</title><rect x="87.7028%" y="693" width="0.0745%" height="15" fill="rgb(252,5,12)" fg:x="96531" fg:w="82"/><text x="87.9528%" y="703.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (80 samples, 0.07%)</title><rect x="87.7046%" y="677" width="0.0727%" height="15" fill="rgb(251,36,5)" fg:x="96533" fg:w="80"/><text x="87.9546%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (17 samples, 0.02%)</title><rect x="87.7619%" y="661" width="0.0154%" height="15" fill="rgb(217,53,14)" fg:x="96596" fg:w="17"/><text x="88.0119%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_or (17 samples, 0.02%)</title><rect x="87.7619%" y="645" width="0.0154%" height="15" fill="rgb(215,86,45)" fg:x="96596" fg:w="17"/><text x="88.0119%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (92 samples, 0.08%)</title><rect x="87.7773%" y="709" width="0.0836%" height="15" fill="rgb(242,169,11)" fg:x="96613" fg:w="92"/><text x="88.0273%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (92 samples, 0.08%)</title><rect x="87.7773%" y="693" width="0.0836%" height="15" fill="rgb(211,213,45)" fg:x="96613" fg:w="92"/><text x="88.0273%" y="703.50"></text></g><g><title>event_listener::List::notify (590 samples, 0.54%)</title><rect x="87.3276%" y="773" width="0.5360%" height="15" fill="rgb(205,88,11)" fg:x="96118" fg:w="590"/><text x="87.5776%" y="783.50"></text></g><g><title>core::task::wake::Waker::wake (587 samples, 0.53%)</title><rect x="87.3303%" y="757" width="0.5333%" height="15" fill="rgb(252,69,26)" fg:x="96121" fg:w="587"/><text x="87.5803%" y="767.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (587 samples, 0.53%)</title><rect x="87.3303%" y="741" width="0.5333%" height="15" fill="rgb(246,123,37)" fg:x="96121" fg:w="587"/><text x="87.5803%" y="751.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (568 samples, 0.52%)</title><rect x="87.3476%" y="725" width="0.5161%" height="15" fill="rgb(212,205,5)" fg:x="96140" fg:w="568"/><text x="87.5976%" y="735.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (2,128 samples, 1.93%)</title><rect x="86.5626%" y="805" width="1.9334%" height="15" fill="rgb(253,148,0)" fg:x="95276" fg:w="2128"/><text x="86.8126%" y="815.50">a..</text></g><g><title>event_listener::Event::notify (1,451 samples, 1.32%)</title><rect x="87.1777%" y="789" width="1.3183%" height="15" fill="rgb(239,22,4)" fg:x="95953" fg:w="1451"/><text x="87.4277%" y="799.50"></text></g><g><title>event_listener::full_fence (696 samples, 0.63%)</title><rect x="87.8636%" y="773" width="0.6323%" height="15" fill="rgb(226,26,53)" fg:x="96708" fg:w="696"/><text x="88.1136%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (685 samples, 0.62%)</title><rect x="87.8736%" y="757" width="0.6224%" height="15" fill="rgb(225,229,45)" fg:x="96719" fg:w="685"/><text x="88.1236%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (685 samples, 0.62%)</title><rect x="87.8736%" y="741" width="0.6224%" height="15" fill="rgb(220,60,37)" fg:x="96719" fg:w="685"/><text x="88.1236%" y="751.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::capacity (15 samples, 0.01%)</title><rect x="88.4960%" y="805" width="0.0136%" height="15" fill="rgb(217,180,35)" fg:x="97404" fg:w="15"/><text x="88.7460%" y="815.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (2,269 samples, 2.06%)</title><rect x="86.5372%" y="821" width="2.0615%" height="15" fill="rgb(229,7,53)" fg:x="95248" fg:w="2269"/><text x="86.7872%" y="831.50">&lt;..</text></g><g><title>event_listener::Event::notify (96 samples, 0.09%)</title><rect x="88.5114%" y="805" width="0.0872%" height="15" fill="rgb(254,137,3)" fg:x="97421" fg:w="96"/><text x="88.7614%" y="815.50"></text></g><g><title>event_listener::full_fence (91 samples, 0.08%)</title><rect x="88.5160%" y="789" width="0.0827%" height="15" fill="rgb(215,140,41)" fg:x="97426" fg:w="91"/><text x="88.7660%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (91 samples, 0.08%)</title><rect x="88.5160%" y="773" width="0.0827%" height="15" fill="rgb(250,80,15)" fg:x="97426" fg:w="91"/><text x="88.7660%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (91 samples, 0.08%)</title><rect x="88.5160%" y="757" width="0.0827%" height="15" fill="rgb(252,191,6)" fg:x="97426" fg:w="91"/><text x="88.7660%" y="767.50"></text></g><g><title>[libc-2.31.so] (284 samples, 0.26%)</title><rect x="88.6005%" y="821" width="0.2580%" height="15" fill="rgb(246,217,18)" fg:x="97519" fg:w="284"/><text x="88.8505%" y="831.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,014 samples, 10.92%)</title><rect x="77.9487%" y="885" width="10.9153%" height="15" fill="rgb(223,93,7)" fg:x="85795" fg:w="12014"/><text x="78.1987%" y="895.50">&lt;core::future::f..</text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (2,691 samples, 2.44%)</title><rect x="86.4191%" y="869" width="2.4449%" height="15" fill="rgb(225,55,52)" fg:x="95118" fg:w="2691"/><text x="86.6691%" y="879.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,691 samples, 2.44%)</title><rect x="86.4191%" y="853" width="2.4449%" height="15" fill="rgb(240,31,24)" fg:x="95118" fg:w="2691"/><text x="86.6691%" y="863.50">&lt;c..</text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (2,627 samples, 2.39%)</title><rect x="86.4772%" y="837" width="2.3867%" height="15" fill="rgb(205,56,52)" fg:x="95182" fg:w="2627"/><text x="86.7272%" y="847.50">tr..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (15,055 samples, 13.68%)</title><rect x="75.1867%" y="901" width="13.6782%" height="15" fill="rgb(246,146,12)" fg:x="82755" fg:w="15055"/><text x="75.4367%" y="911.50">tremor_runtime::pipel..</text></g><g><title>tremor_runtime::postprocessor::postprocess (14 samples, 0.01%)</title><rect x="88.8658%" y="901" width="0.0127%" height="15" fill="rgb(239,84,36)" fg:x="97811" fg:w="14"/><text x="89.1158%" y="911.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.02%)</title><rect x="88.9739%" y="757" width="0.0164%" height="15" fill="rgb(207,41,40)" fg:x="97930" fg:w="18"/><text x="89.2239%" y="767.50"></text></g><g><title>tremor_script::ast::Path::segments (13 samples, 0.01%)</title><rect x="88.9930%" y="757" width="0.0118%" height="15" fill="rgb(241,179,25)" fg:x="97951" fg:w="13"/><text x="89.2430%" y="767.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search::{{closure}} (70 samples, 0.06%)</title><rect x="89.1656%" y="501" width="0.0636%" height="15" fill="rgb(210,0,34)" fg:x="98141" fg:w="70"/><text x="89.4156%" y="511.50"></text></g><g><title>hashbrown::map::equivalent::{{closure}} (70 samples, 0.06%)</title><rect x="89.1656%" y="485" width="0.0636%" height="15" fill="rgb(225,217,29)" fg:x="98141" fg:w="70"/><text x="89.4156%" y="495.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (70 samples, 0.06%)</title><rect x="89.1656%" y="469" width="0.0636%" height="15" fill="rgb(216,191,38)" fg:x="98141" fg:w="70"/><text x="89.4156%" y="479.50"></text></g><g><title>abi_stable::std_types::map::map_query::MapQuery&lt;K&gt;::is_equal (52 samples, 0.05%)</title><rect x="89.1819%" y="453" width="0.0472%" height="15" fill="rgb(232,140,52)" fg:x="98159" fg:w="52"/><text x="89.4319%" y="463.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (52 samples, 0.05%)</title><rect x="89.1819%" y="437" width="0.0472%" height="15" fill="rgb(223,158,51)" fg:x="98159" fg:w="52"/><text x="89.4319%" y="447.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (52 samples, 0.05%)</title><rect x="89.1819%" y="421" width="0.0472%" height="15" fill="rgb(235,29,51)" fg:x="98159" fg:w="52"/><text x="89.4319%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (52 samples, 0.05%)</title><rect x="89.1819%" y="405" width="0.0472%" height="15" fill="rgb(215,181,18)" fg:x="98159" fg:w="52"/><text x="89.4319%" y="415.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (52 samples, 0.05%)</title><rect x="89.1819%" y="389" width="0.0472%" height="15" fill="rgb(227,125,34)" fg:x="98159" fg:w="52"/><text x="89.4319%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (52 samples, 0.05%)</title><rect x="89.1819%" y="373" width="0.0472%" height="15" fill="rgb(230,197,49)" fg:x="98159" fg:w="52"/><text x="89.4319%" y="383.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (52 samples, 0.05%)</title><rect x="89.1819%" y="357" width="0.0472%" height="15" fill="rgb(239,141,16)" fg:x="98159" fg:w="52"/><text x="89.4319%" y="367.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (52 samples, 0.05%)</title><rect x="89.1819%" y="341" width="0.0472%" height="15" fill="rgb(225,105,43)" fg:x="98159" fg:w="52"/><text x="89.4319%" y="351.50"></text></g><g><title>[libc-2.31.so] (37 samples, 0.03%)</title><rect x="89.1956%" y="325" width="0.0336%" height="15" fill="rgb(214,131,14)" fg:x="98174" fg:w="37"/><text x="89.4456%" y="335.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (74 samples, 0.07%)</title><rect x="89.1656%" y="517" width="0.0672%" height="15" fill="rgb(229,177,11)" fg:x="98141" fg:w="74"/><text x="89.4156%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (12 samples, 0.01%)</title><rect x="89.2328%" y="517" width="0.0109%" height="15" fill="rgb(231,180,14)" fg:x="98215" fg:w="12"/><text x="89.4828%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (127 samples, 0.12%)</title><rect x="89.1356%" y="677" width="0.1154%" height="15" fill="rgb(232,88,2)" fg:x="98108" fg:w="127"/><text x="89.3856%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (120 samples, 0.11%)</title><rect x="89.1420%" y="661" width="0.1090%" height="15" fill="rgb(205,220,8)" fg:x="98115" fg:w="120"/><text x="89.3920%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (120 samples, 0.11%)</title><rect x="89.1420%" y="645" width="0.1090%" height="15" fill="rgb(225,23,53)" fg:x="98115" fg:w="120"/><text x="89.3920%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck::{{closure}} (120 samples, 0.11%)</title><rect x="89.1420%" y="629" width="0.1090%" height="15" fill="rgb(213,62,29)" fg:x="98115" fg:w="120"/><text x="89.3920%" y="639.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_key_hashed_nocheck (115 samples, 0.10%)</title><rect x="89.1465%" y="613" width="0.1045%" height="15" fill="rgb(227,75,7)" fg:x="98120" fg:w="115"/><text x="89.3965%" y="623.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_hash (115 samples, 0.10%)</title><rect x="89.1465%" y="597" width="0.1045%" height="15" fill="rgb(207,105,14)" fg:x="98120" fg:w="115"/><text x="89.3965%" y="607.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search (115 samples, 0.10%)</title><rect x="89.1465%" y="581" width="0.1045%" height="15" fill="rgb(245,62,29)" fg:x="98120" fg:w="115"/><text x="89.3965%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (110 samples, 0.10%)</title><rect x="89.1511%" y="565" width="0.0999%" height="15" fill="rgb(236,202,4)" fg:x="98125" fg:w="110"/><text x="89.4011%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (110 samples, 0.10%)</title><rect x="89.1511%" y="549" width="0.0999%" height="15" fill="rgb(250,67,1)" fg:x="98125" fg:w="110"/><text x="89.4011%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (110 samples, 0.10%)</title><rect x="89.1511%" y="533" width="0.0999%" height="15" fill="rgb(253,115,44)" fg:x="98125" fg:w="110"/><text x="89.4011%" y="543.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_key_hashed_nocheck (273 samples, 0.25%)</title><rect x="89.0057%" y="693" width="0.2480%" height="15" fill="rgb(251,139,18)" fg:x="97965" fg:w="273"/><text x="89.2557%" y="703.50"></text></g><g><title>tremor_script::ast::Script::run (412 samples, 0.37%)</title><rect x="88.8858%" y="901" width="0.3743%" height="15" fill="rgb(218,22,32)" fg:x="97833" fg:w="412"/><text x="89.1358%" y="911.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (408 samples, 0.37%)</title><rect x="88.8894%" y="885" width="0.3707%" height="15" fill="rgb(243,53,5)" fg:x="97837" fg:w="408"/><text x="89.1394%" y="895.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (408 samples, 0.37%)</title><rect x="88.8894%" y="869" width="0.3707%" height="15" fill="rgb(227,56,16)" fg:x="97837" fg:w="408"/><text x="89.1394%" y="879.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (408 samples, 0.37%)</title><rect x="88.8894%" y="853" width="0.3707%" height="15" fill="rgb(245,53,0)" fg:x="97837" fg:w="408"/><text x="89.1394%" y="863.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (408 samples, 0.37%)</title><rect x="88.8894%" y="837" width="0.3707%" height="15" fill="rgb(216,170,35)" fg:x="97837" fg:w="408"/><text x="89.1394%" y="847.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (408 samples, 0.37%)</title><rect x="88.8894%" y="821" width="0.3707%" height="15" fill="rgb(211,200,8)" fg:x="97837" fg:w="408"/><text x="89.1394%" y="831.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (408 samples, 0.37%)</title><rect x="88.8894%" y="805" width="0.3707%" height="15" fill="rgb(228,204,44)" fg:x="97837" fg:w="408"/><text x="89.1394%" y="815.50"></text></g><g><title>tremor_script::interpreter::resolve (408 samples, 0.37%)</title><rect x="88.8894%" y="789" width="0.3707%" height="15" fill="rgb(214,121,17)" fg:x="97837" fg:w="408"/><text x="89.1394%" y="799.50"></text></g><g><title>tremor_script::interpreter::resolve_value (408 samples, 0.37%)</title><rect x="88.8894%" y="773" width="0.3707%" height="15" fill="rgb(233,64,38)" fg:x="97837" fg:w="408"/><text x="89.1394%" y="783.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup (281 samples, 0.26%)</title><rect x="89.0048%" y="757" width="0.2553%" height="15" fill="rgb(253,54,19)" fg:x="97964" fg:w="281"/><text x="89.2548%" y="767.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (280 samples, 0.25%)</title><rect x="89.0057%" y="741" width="0.2544%" height="15" fill="rgb(253,94,18)" fg:x="97965" fg:w="280"/><text x="89.2557%" y="751.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (280 samples, 0.25%)</title><rect x="89.0057%" y="725" width="0.2544%" height="15" fill="rgb(227,57,52)" fg:x="97965" fg:w="280"/><text x="89.2557%" y="735.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (280 samples, 0.25%)</title><rect x="89.0057%" y="709" width="0.2544%" height="15" fill="rgb(230,228,50)" fg:x="97965" fg:w="280"/><text x="89.2557%" y="719.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (33 samples, 0.03%)</title><rect x="89.2601%" y="901" width="0.0300%" height="15" fill="rgb(217,205,27)" fg:x="98245" fg:w="33"/><text x="89.5101%" y="911.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (14 samples, 0.01%)</title><rect x="89.2901%" y="901" width="0.0127%" height="15" fill="rgb(252,71,50)" fg:x="98278" fg:w="14"/><text x="89.5401%" y="911.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (48 samples, 0.04%)</title><rect x="89.3246%" y="885" width="0.0436%" height="15" fill="rgb(209,86,4)" fg:x="98316" fg:w="48"/><text x="89.5746%" y="895.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (48 samples, 0.04%)</title><rect x="89.3246%" y="869" width="0.0436%" height="15" fill="rgb(229,94,0)" fg:x="98316" fg:w="48"/><text x="89.5746%" y="879.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (48 samples, 0.04%)</title><rect x="89.3246%" y="853" width="0.0436%" height="15" fill="rgb(252,223,21)" fg:x="98316" fg:w="48"/><text x="89.5746%" y="863.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (48 samples, 0.04%)</title><rect x="89.3246%" y="837" width="0.0436%" height="15" fill="rgb(230,210,4)" fg:x="98316" fg:w="48"/><text x="89.5746%" y="847.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (48 samples, 0.04%)</title><rect x="89.3246%" y="821" width="0.0436%" height="15" fill="rgb(240,149,38)" fg:x="98316" fg:w="48"/><text x="89.5746%" y="831.50"></text></g><g><title>tremor_script::interpreter::resolve (48 samples, 0.04%)</title><rect x="89.3246%" y="805" width="0.0436%" height="15" fill="rgb(254,105,20)" fg:x="98316" fg:w="48"/><text x="89.5746%" y="815.50"></text></g><g><title>tremor_script::interpreter::resolve_value (48 samples, 0.04%)</title><rect x="89.3246%" y="789" width="0.0436%" height="15" fill="rgb(253,87,46)" fg:x="98316" fg:w="48"/><text x="89.5746%" y="799.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup (41 samples, 0.04%)</title><rect x="89.3309%" y="773" width="0.0373%" height="15" fill="rgb(253,116,33)" fg:x="98323" fg:w="41"/><text x="89.5809%" y="783.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (40 samples, 0.04%)</title><rect x="89.3319%" y="757" width="0.0363%" height="15" fill="rgb(229,198,5)" fg:x="98324" fg:w="40"/><text x="89.5819%" y="767.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (40 samples, 0.04%)</title><rect x="89.3319%" y="741" width="0.0363%" height="15" fill="rgb(242,38,37)" fg:x="98324" fg:w="40"/><text x="89.5819%" y="751.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (40 samples, 0.04%)</title><rect x="89.3319%" y="725" width="0.0363%" height="15" fill="rgb(242,69,53)" fg:x="98324" fg:w="40"/><text x="89.5819%" y="735.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_key_hashed_nocheck (40 samples, 0.04%)</title><rect x="89.3319%" y="709" width="0.0363%" height="15" fill="rgb(249,80,16)" fg:x="98324" fg:w="40"/><text x="89.5819%" y="719.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (70 samples, 0.06%)</title><rect x="89.3055%" y="901" width="0.0636%" height="15" fill="rgb(206,128,11)" fg:x="98295" fg:w="70"/><text x="89.5555%" y="911.50"></text></g><g><title>tremor_script::interpreter::val_eq (56 samples, 0.05%)</title><rect x="89.3836%" y="901" width="0.0509%" height="15" fill="rgb(212,35,20)" fg:x="98381" fg:w="56"/><text x="89.6336%" y="911.50"></text></g><g><title>core::mem::swap (18 samples, 0.02%)</title><rect x="89.4781%" y="485" width="0.0164%" height="15" fill="rgb(236,79,13)" fg:x="98485" fg:w="18"/><text x="89.7281%" y="495.50"></text></g><g><title>core::mem::swap_simple (18 samples, 0.02%)</title><rect x="89.4781%" y="469" width="0.0164%" height="15" fill="rgb(233,123,3)" fg:x="98485" fg:w="18"/><text x="89.7281%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (31 samples, 0.03%)</title><rect x="89.4781%" y="501" width="0.0282%" height="15" fill="rgb(214,93,52)" fg:x="98485" fg:w="31"/><text x="89.7281%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (13 samples, 0.01%)</title><rect x="89.4945%" y="485" width="0.0118%" height="15" fill="rgb(251,37,40)" fg:x="98503" fg:w="13"/><text x="89.7445%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (12 samples, 0.01%)</title><rect x="89.4954%" y="469" width="0.0109%" height="15" fill="rgb(227,80,54)" fg:x="98504" fg:w="12"/><text x="89.7454%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (35 samples, 0.03%)</title><rect x="89.4763%" y="549" width="0.0318%" height="15" fill="rgb(254,48,11)" fg:x="98483" fg:w="35"/><text x="89.7263%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (35 samples, 0.03%)</title><rect x="89.4763%" y="533" width="0.0318%" height="15" fill="rgb(235,193,26)" fg:x="98483" fg:w="35"/><text x="89.7263%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (33 samples, 0.03%)</title><rect x="89.4781%" y="517" width="0.0300%" height="15" fill="rgb(229,99,21)" fg:x="98485" fg:w="33"/><text x="89.7281%" y="527.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (82 samples, 0.07%)</title><rect x="89.4400%" y="693" width="0.0745%" height="15" fill="rgb(211,140,41)" fg:x="98443" fg:w="82"/><text x="89.6900%" y="703.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (82 samples, 0.07%)</title><rect x="89.4400%" y="677" width="0.0745%" height="15" fill="rgb(240,227,30)" fg:x="98443" fg:w="82"/><text x="89.6900%" y="687.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}} (82 samples, 0.07%)</title><rect x="89.4400%" y="661" width="0.0745%" height="15" fill="rgb(215,224,45)" fg:x="98443" fg:w="82"/><text x="89.6900%" y="671.50"></text></g><g><title>abi_stable::traits::ErasedType::run_downcast_as_mut (82 samples, 0.07%)</title><rect x="89.4400%" y="645" width="0.0745%" height="15" fill="rgb(206,123,31)" fg:x="98443" fg:w="82"/><text x="89.6900%" y="655.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}}::{{closure}} (82 samples, 0.07%)</title><rect x="89.4400%" y="629" width="0.0745%" height="15" fill="rgb(210,138,16)" fg:x="98443" fg:w="82"/><text x="89.6900%" y="639.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert (82 samples, 0.07%)</title><rect x="89.4400%" y="613" width="0.0745%" height="15" fill="rgb(228,57,28)" fg:x="98443" fg:w="82"/><text x="89.6900%" y="623.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert_hashed_nocheck (82 samples, 0.07%)</title><rect x="89.4400%" y="597" width="0.0745%" height="15" fill="rgb(242,170,10)" fg:x="98443" fg:w="82"/><text x="89.6900%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_entry (65 samples, 0.06%)</title><rect x="89.4554%" y="581" width="0.0591%" height="15" fill="rgb(228,214,39)" fg:x="98460" fg:w="65"/><text x="89.7054%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (46 samples, 0.04%)</title><rect x="89.4727%" y="565" width="0.0418%" height="15" fill="rgb(218,179,33)" fg:x="98479" fg:w="46"/><text x="89.7227%" y="575.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (153 samples, 0.14%)</title><rect x="89.4400%" y="773" width="0.1390%" height="15" fill="rgb(235,193,39)" fg:x="98443" fg:w="153"/><text x="89.6900%" y="783.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (153 samples, 0.14%)</title><rect x="89.4400%" y="757" width="0.1390%" height="15" fill="rgb(219,221,36)" fg:x="98443" fg:w="153"/><text x="89.6900%" y="767.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (153 samples, 0.14%)</title><rect x="89.4400%" y="741" width="0.1390%" height="15" fill="rgb(248,218,19)" fg:x="98443" fg:w="153"/><text x="89.6900%" y="751.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (153 samples, 0.14%)</title><rect x="89.4400%" y="725" width="0.1390%" height="15" fill="rgb(205,50,9)" fg:x="98443" fg:w="153"/><text x="89.6900%" y="735.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (153 samples, 0.14%)</title><rect x="89.4400%" y="709" width="0.1390%" height="15" fill="rgb(238,81,28)" fg:x="98443" fg:w="153"/><text x="89.6900%" y="719.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut::{{closure}} (71 samples, 0.06%)</title><rect x="89.5145%" y="693" width="0.0645%" height="15" fill="rgb(235,110,19)" fg:x="98525" fg:w="71"/><text x="89.7645%" y="703.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (71 samples, 0.06%)</title><rect x="89.5145%" y="677" width="0.0645%" height="15" fill="rgb(214,7,14)" fg:x="98525" fg:w="71"/><text x="89.7645%" y="687.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (71 samples, 0.06%)</title><rect x="89.5145%" y="661" width="0.0645%" height="15" fill="rgb(211,77,3)" fg:x="98525" fg:w="71"/><text x="89.7645%" y="671.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (71 samples, 0.06%)</title><rect x="89.5145%" y="645" width="0.0645%" height="15" fill="rgb(229,5,9)" fg:x="98525" fg:w="71"/><text x="89.7645%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (71 samples, 0.06%)</title><rect x="89.5145%" y="629" width="0.0645%" height="15" fill="rgb(225,90,11)" fg:x="98525" fg:w="71"/><text x="89.7645%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (71 samples, 0.06%)</title><rect x="89.5145%" y="613" width="0.0645%" height="15" fill="rgb(242,56,8)" fg:x="98525" fg:w="71"/><text x="89.7645%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (71 samples, 0.06%)</title><rect x="89.5145%" y="597" width="0.0645%" height="15" fill="rgb(249,212,39)" fg:x="98525" fg:w="71"/><text x="89.7645%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (71 samples, 0.06%)</title><rect x="89.5145%" y="581" width="0.0645%" height="15" fill="rgb(236,90,9)" fg:x="98525" fg:w="71"/><text x="89.7645%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (71 samples, 0.06%)</title><rect x="89.5145%" y="565" width="0.0645%" height="15" fill="rgb(206,88,35)" fg:x="98525" fg:w="71"/><text x="89.7645%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (71 samples, 0.06%)</title><rect x="89.5145%" y="549" width="0.0645%" height="15" fill="rgb(205,126,30)" fg:x="98525" fg:w="71"/><text x="89.7645%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (71 samples, 0.06%)</title><rect x="89.5145%" y="533" width="0.0645%" height="15" fill="rgb(230,176,12)" fg:x="98525" fg:w="71"/><text x="89.7645%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (71 samples, 0.06%)</title><rect x="89.5145%" y="517" width="0.0645%" height="15" fill="rgb(243,19,9)" fg:x="98525" fg:w="71"/><text x="89.7645%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (71 samples, 0.06%)</title><rect x="89.5145%" y="501" width="0.0645%" height="15" fill="rgb(245,171,17)" fg:x="98525" fg:w="71"/><text x="89.7645%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (71 samples, 0.06%)</title><rect x="89.5145%" y="485" width="0.0645%" height="15" fill="rgb(227,52,21)" fg:x="98525" fg:w="71"/><text x="89.7645%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (71 samples, 0.06%)</title><rect x="89.5145%" y="469" width="0.0645%" height="15" fill="rgb(238,69,14)" fg:x="98525" fg:w="71"/><text x="89.7645%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (71 samples, 0.06%)</title><rect x="89.5145%" y="453" width="0.0645%" height="15" fill="rgb(241,156,39)" fg:x="98525" fg:w="71"/><text x="89.7645%" y="463.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (71 samples, 0.06%)</title><rect x="89.5145%" y="437" width="0.0645%" height="15" fill="rgb(212,227,28)" fg:x="98525" fg:w="71"/><text x="89.7645%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (71 samples, 0.06%)</title><rect x="89.5145%" y="421" width="0.0645%" height="15" fill="rgb(209,118,27)" fg:x="98525" fg:w="71"/><text x="89.7645%" y="431.50"></text></g><g><title>alloc::alloc::alloc (71 samples, 0.06%)</title><rect x="89.5145%" y="405" width="0.0645%" height="15" fill="rgb(226,102,5)" fg:x="98525" fg:w="71"/><text x="89.7645%" y="415.50"></text></g><g><title>__rg_alloc (71 samples, 0.06%)</title><rect x="89.5145%" y="389" width="0.0645%" height="15" fill="rgb(223,34,3)" fg:x="98525" fg:w="71"/><text x="89.7645%" y="399.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (71 samples, 0.06%)</title><rect x="89.5145%" y="373" width="0.0645%" height="15" fill="rgb(221,81,38)" fg:x="98525" fg:w="71"/><text x="89.7645%" y="383.50"></text></g><g><title>sn_rust_alloc (71 samples, 0.06%)</title><rect x="89.5145%" y="357" width="0.0645%" height="15" fill="rgb(236,219,28)" fg:x="98525" fg:w="71"/><text x="89.7645%" y="367.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (71 samples, 0.06%)</title><rect x="89.5145%" y="341" width="0.0645%" height="15" fill="rgb(213,200,14)" fg:x="98525" fg:w="71"/><text x="89.7645%" y="351.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (164 samples, 0.15%)</title><rect x="89.4400%" y="805" width="0.1490%" height="15" fill="rgb(240,33,19)" fg:x="98443" fg:w="164"/><text x="89.6900%" y="815.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (164 samples, 0.15%)</title><rect x="89.4400%" y="789" width="0.1490%" height="15" fill="rgb(233,113,27)" fg:x="98443" fg:w="164"/><text x="89.6900%" y="799.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search::{{closure}} (21 samples, 0.02%)</title><rect x="89.6271%" y="453" width="0.0191%" height="15" fill="rgb(220,221,18)" fg:x="98649" fg:w="21"/><text x="89.8771%" y="463.50"></text></g><g><title>hashbrown::map::equivalent::{{closure}} (21 samples, 0.02%)</title><rect x="89.6271%" y="437" width="0.0191%" height="15" fill="rgb(238,92,8)" fg:x="98649" fg:w="21"/><text x="89.8771%" y="447.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (21 samples, 0.02%)</title><rect x="89.6271%" y="421" width="0.0191%" height="15" fill="rgb(222,164,16)" fg:x="98649" fg:w="21"/><text x="89.8771%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (22 samples, 0.02%)</title><rect x="89.6271%" y="469" width="0.0200%" height="15" fill="rgb(241,119,3)" fg:x="98649" fg:w="22"/><text x="89.8771%" y="479.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (230 samples, 0.21%)</title><rect x="89.4400%" y="821" width="0.2090%" height="15" fill="rgb(241,44,8)" fg:x="98443" fg:w="230"/><text x="89.6900%" y="831.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (66 samples, 0.06%)</title><rect x="89.5890%" y="805" width="0.0600%" height="15" fill="rgb(230,36,40)" fg:x="98607" fg:w="66"/><text x="89.8390%" y="815.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::invoke2 (66 samples, 0.06%)</title><rect x="89.5890%" y="789" width="0.0600%" height="15" fill="rgb(243,16,36)" fg:x="98607" fg:w="66"/><text x="89.8390%" y="799.50"></text></g><g><title>tremor_script::interpreter::imut_expr::eval_for_fn_arg (66 samples, 0.06%)</title><rect x="89.5890%" y="773" width="0.0600%" height="15" fill="rgb(231,4,26)" fg:x="98607" fg:w="66"/><text x="89.8390%" y="783.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (66 samples, 0.06%)</title><rect x="89.5890%" y="757" width="0.0600%" height="15" fill="rgb(240,9,31)" fg:x="98607" fg:w="66"/><text x="89.8390%" y="767.50"></text></g><g><title>tremor_script::interpreter::resolve (66 samples, 0.06%)</title><rect x="89.5890%" y="741" width="0.0600%" height="15" fill="rgb(207,173,15)" fg:x="98607" fg:w="66"/><text x="89.8390%" y="751.50"></text></g><g><title>tremor_script::interpreter::resolve_value (66 samples, 0.06%)</title><rect x="89.5890%" y="725" width="0.0600%" height="15" fill="rgb(224,192,53)" fg:x="98607" fg:w="66"/><text x="89.8390%" y="735.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup (60 samples, 0.05%)</title><rect x="89.5944%" y="709" width="0.0545%" height="15" fill="rgb(223,67,28)" fg:x="98613" fg:w="60"/><text x="89.8444%" y="719.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (60 samples, 0.05%)</title><rect x="89.5944%" y="693" width="0.0545%" height="15" fill="rgb(211,20,47)" fg:x="98613" fg:w="60"/><text x="89.8444%" y="703.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (60 samples, 0.05%)</title><rect x="89.5944%" y="677" width="0.0545%" height="15" fill="rgb(240,228,2)" fg:x="98613" fg:w="60"/><text x="89.8444%" y="687.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (60 samples, 0.05%)</title><rect x="89.5944%" y="661" width="0.0545%" height="15" fill="rgb(248,151,12)" fg:x="98613" fg:w="60"/><text x="89.8444%" y="671.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_key_hashed_nocheck (60 samples, 0.05%)</title><rect x="89.5944%" y="645" width="0.0545%" height="15" fill="rgb(244,8,39)" fg:x="98613" fg:w="60"/><text x="89.8444%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (25 samples, 0.02%)</title><rect x="89.6262%" y="629" width="0.0227%" height="15" fill="rgb(222,26,8)" fg:x="98648" fg:w="25"/><text x="89.8762%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (25 samples, 0.02%)</title><rect x="89.6262%" y="613" width="0.0227%" height="15" fill="rgb(213,106,44)" fg:x="98648" fg:w="25"/><text x="89.8762%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (25 samples, 0.02%)</title><rect x="89.6262%" y="597" width="0.0227%" height="15" fill="rgb(214,129,20)" fg:x="98648" fg:w="25"/><text x="89.8762%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck::{{closure}} (25 samples, 0.02%)</title><rect x="89.6262%" y="581" width="0.0227%" height="15" fill="rgb(212,32,13)" fg:x="98648" fg:w="25"/><text x="89.8762%" y="591.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_key_hashed_nocheck (25 samples, 0.02%)</title><rect x="89.6262%" y="565" width="0.0227%" height="15" fill="rgb(208,168,33)" fg:x="98648" fg:w="25"/><text x="89.8762%" y="575.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_hash (25 samples, 0.02%)</title><rect x="89.6262%" y="549" width="0.0227%" height="15" fill="rgb(231,207,8)" fg:x="98648" fg:w="25"/><text x="89.8762%" y="559.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search (25 samples, 0.02%)</title><rect x="89.6262%" y="533" width="0.0227%" height="15" fill="rgb(235,219,23)" fg:x="98648" fg:w="25"/><text x="89.8762%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (25 samples, 0.02%)</title><rect x="89.6262%" y="517" width="0.0227%" height="15" fill="rgb(226,216,26)" fg:x="98648" fg:w="25"/><text x="89.8762%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (25 samples, 0.02%)</title><rect x="89.6262%" y="501" width="0.0227%" height="15" fill="rgb(239,137,16)" fg:x="98648" fg:w="25"/><text x="89.8762%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (25 samples, 0.02%)</title><rect x="89.6262%" y="485" width="0.0227%" height="15" fill="rgb(207,12,36)" fg:x="98648" fg:w="25"/><text x="89.8762%" y="495.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (24 samples, 0.02%)</title><rect x="89.6489%" y="773" width="0.0218%" height="15" fill="rgb(210,214,24)" fg:x="98673" fg:w="24"/><text x="89.8989%" y="783.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (24 samples, 0.02%)</title><rect x="89.6489%" y="757" width="0.0218%" height="15" fill="rgb(206,56,30)" fg:x="98673" fg:w="24"/><text x="89.8989%" y="767.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (24 samples, 0.02%)</title><rect x="89.6489%" y="741" width="0.0218%" height="15" fill="rgb(228,143,26)" fg:x="98673" fg:w="24"/><text x="89.8989%" y="751.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (24 samples, 0.02%)</title><rect x="89.6489%" y="725" width="0.0218%" height="15" fill="rgb(216,218,46)" fg:x="98673" fg:w="24"/><text x="89.8989%" y="735.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (24 samples, 0.02%)</title><rect x="89.6489%" y="709" width="0.0218%" height="15" fill="rgb(206,6,19)" fg:x="98673" fg:w="24"/><text x="89.8989%" y="719.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (24 samples, 0.02%)</title><rect x="89.6489%" y="693" width="0.0218%" height="15" fill="rgb(239,177,51)" fg:x="98673" fg:w="24"/><text x="89.8989%" y="703.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (24 samples, 0.02%)</title><rect x="89.6489%" y="677" width="0.0218%" height="15" fill="rgb(216,55,25)" fg:x="98673" fg:w="24"/><text x="89.8989%" y="687.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}} (24 samples, 0.02%)</title><rect x="89.6489%" y="661" width="0.0218%" height="15" fill="rgb(231,163,29)" fg:x="98673" fg:w="24"/><text x="89.8989%" y="671.50"></text></g><g><title>abi_stable::traits::ErasedType::run_downcast_as_mut (24 samples, 0.02%)</title><rect x="89.6489%" y="645" width="0.0218%" height="15" fill="rgb(232,149,50)" fg:x="98673" fg:w="24"/><text x="89.8989%" y="655.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}}::{{closure}} (24 samples, 0.02%)</title><rect x="89.6489%" y="629" width="0.0218%" height="15" fill="rgb(223,142,48)" fg:x="98673" fg:w="24"/><text x="89.8989%" y="639.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert (24 samples, 0.02%)</title><rect x="89.6489%" y="613" width="0.0218%" height="15" fill="rgb(245,83,23)" fg:x="98673" fg:w="24"/><text x="89.8989%" y="623.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert_hashed_nocheck (24 samples, 0.02%)</title><rect x="89.6489%" y="597" width="0.0218%" height="15" fill="rgb(224,63,2)" fg:x="98673" fg:w="24"/><text x="89.8989%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_entry (24 samples, 0.02%)</title><rect x="89.6489%" y="581" width="0.0218%" height="15" fill="rgb(218,65,53)" fg:x="98673" fg:w="24"/><text x="89.8989%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (24 samples, 0.02%)</title><rect x="89.6489%" y="565" width="0.0218%" height="15" fill="rgb(221,84,29)" fg:x="98673" fg:w="24"/><text x="89.8989%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (24 samples, 0.02%)</title><rect x="89.6489%" y="549" width="0.0218%" height="15" fill="rgb(234,0,32)" fg:x="98673" fg:w="24"/><text x="89.8989%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (24 samples, 0.02%)</title><rect x="89.6489%" y="533" width="0.0218%" height="15" fill="rgb(206,20,16)" fg:x="98673" fg:w="24"/><text x="89.8989%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (24 samples, 0.02%)</title><rect x="89.6489%" y="517" width="0.0218%" height="15" fill="rgb(244,172,18)" fg:x="98673" fg:w="24"/><text x="89.8989%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (24 samples, 0.02%)</title><rect x="89.6489%" y="501" width="0.0218%" height="15" fill="rgb(254,133,1)" fg:x="98673" fg:w="24"/><text x="89.8989%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (24 samples, 0.02%)</title><rect x="89.6489%" y="485" width="0.0218%" height="15" fill="rgb(222,206,41)" fg:x="98673" fg:w="24"/><text x="89.8989%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (24 samples, 0.02%)</title><rect x="89.6489%" y="469" width="0.0218%" height="15" fill="rgb(212,3,42)" fg:x="98673" fg:w="24"/><text x="89.8989%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (24 samples, 0.02%)</title><rect x="89.6489%" y="453" width="0.0218%" height="15" fill="rgb(241,11,4)" fg:x="98673" fg:w="24"/><text x="89.8989%" y="463.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (24 samples, 0.02%)</title><rect x="89.6489%" y="437" width="0.0218%" height="15" fill="rgb(205,19,26)" fg:x="98673" fg:w="24"/><text x="89.8989%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (24 samples, 0.02%)</title><rect x="89.6489%" y="421" width="0.0218%" height="15" fill="rgb(210,179,32)" fg:x="98673" fg:w="24"/><text x="89.8989%" y="431.50"></text></g><g><title>alloc::alloc::alloc (24 samples, 0.02%)</title><rect x="89.6489%" y="405" width="0.0218%" height="15" fill="rgb(227,116,49)" fg:x="98673" fg:w="24"/><text x="89.8989%" y="415.50"></text></g><g><title>__rg_alloc (24 samples, 0.02%)</title><rect x="89.6489%" y="389" width="0.0218%" height="15" fill="rgb(211,146,6)" fg:x="98673" fg:w="24"/><text x="89.8989%" y="399.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (24 samples, 0.02%)</title><rect x="89.6489%" y="373" width="0.0218%" height="15" fill="rgb(219,44,39)" fg:x="98673" fg:w="24"/><text x="89.8989%" y="383.50"></text></g><g><title>sn_rust_alloc (24 samples, 0.02%)</title><rect x="89.6489%" y="357" width="0.0218%" height="15" fill="rgb(234,128,11)" fg:x="98673" fg:w="24"/><text x="89.8989%" y="367.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (24 samples, 0.02%)</title><rect x="89.6489%" y="341" width="0.0218%" height="15" fill="rgb(220,183,53)" fg:x="98673" fg:w="24"/><text x="89.8989%" y="351.50"></text></g><g><title>tremor_script::srs::EventPayload::rent_mut (302 samples, 0.27%)</title><rect x="89.4345%" y="901" width="0.2744%" height="15" fill="rgb(213,219,32)" fg:x="98437" fg:w="302"/><text x="89.6845%" y="911.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (296 samples, 0.27%)</title><rect x="89.4400%" y="885" width="0.2689%" height="15" fill="rgb(232,156,16)" fg:x="98443" fg:w="296"/><text x="89.6900%" y="895.50"></text></g><g><title>tremor_script::script::Script::run (296 samples, 0.27%)</title><rect x="89.4400%" y="869" width="0.2689%" height="15" fill="rgb(246,135,34)" fg:x="98443" fg:w="296"/><text x="89.6900%" y="879.50"></text></g><g><title>tremor_script::ast::Script::run (296 samples, 0.27%)</title><rect x="89.4400%" y="853" width="0.2689%" height="15" fill="rgb(241,99,0)" fg:x="98443" fg:w="296"/><text x="89.6900%" y="863.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (296 samples, 0.27%)</title><rect x="89.4400%" y="837" width="0.2689%" height="15" fill="rgb(222,103,45)" fg:x="98443" fg:w="296"/><text x="89.6900%" y="847.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (66 samples, 0.06%)</title><rect x="89.6489%" y="821" width="0.0600%" height="15" fill="rgb(212,57,4)" fg:x="98673" fg:w="66"/><text x="89.8989%" y="831.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (66 samples, 0.06%)</title><rect x="89.6489%" y="805" width="0.0600%" height="15" fill="rgb(215,68,47)" fg:x="98673" fg:w="66"/><text x="89.8989%" y="815.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (66 samples, 0.06%)</title><rect x="89.6489%" y="789" width="0.0600%" height="15" fill="rgb(230,84,2)" fg:x="98673" fg:w="66"/><text x="89.8989%" y="799.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (42 samples, 0.04%)</title><rect x="89.6707%" y="773" width="0.0382%" height="15" fill="rgb(220,102,14)" fg:x="98697" fg:w="42"/><text x="89.9207%" y="783.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (42 samples, 0.04%)</title><rect x="89.6707%" y="757" width="0.0382%" height="15" fill="rgb(240,10,32)" fg:x="98697" fg:w="42"/><text x="89.9207%" y="767.50"></text></g><g><title>tremor_script::interpreter::resolve (42 samples, 0.04%)</title><rect x="89.6707%" y="741" width="0.0382%" height="15" fill="rgb(215,47,27)" fg:x="98697" fg:w="42"/><text x="89.9207%" y="751.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_u64 (34 samples, 0.03%)</title><rect x="89.9878%" y="885" width="0.0309%" height="15" fill="rgb(233,188,43)" fg:x="99046" fg:w="34"/><text x="90.2378%" y="895.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (41 samples, 0.04%)</title><rect x="90.0187%" y="885" width="0.0373%" height="15" fill="rgb(253,190,1)" fg:x="99080" fg:w="41"/><text x="90.2687%" y="895.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeMap&gt;::serialize_key (14 samples, 0.01%)</title><rect x="90.0623%" y="869" width="0.0127%" height="15" fill="rgb(206,114,52)" fg:x="99128" fg:w="14"/><text x="90.3123%" y="879.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeSeq&gt;::serialize_element (14 samples, 0.01%)</title><rect x="90.0623%" y="853" width="0.0127%" height="15" fill="rgb(233,120,37)" fg:x="99128" fg:w="14"/><text x="90.3123%" y="863.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for str&gt;::serialize (14 samples, 0.01%)</title><rect x="90.0623%" y="837" width="0.0127%" height="15" fill="rgb(214,52,39)" fg:x="99128" fg:w="14"/><text x="90.3123%" y="847.50"></text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (395 samples, 0.36%)</title><rect x="89.7207%" y="901" width="0.3589%" height="15" fill="rgb(223,80,29)" fg:x="98752" fg:w="395"/><text x="89.9707%" y="911.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (19 samples, 0.02%)</title><rect x="90.0623%" y="885" width="0.0173%" height="15" fill="rgb(230,101,40)" fg:x="99128" fg:w="19"/><text x="90.3123%" y="895.50"></text></g><g><title>[unknown] (93,009 samples, 84.50%)</title><rect x="5.5957%" y="917" width="84.5029%" height="15" fill="rgb(219,211,8)" fg:x="6159" fg:w="93009"/><text x="5.8457%" y="927.50">[unknown]</text></g><g><title>window::TimeWindow::add_t (17 samples, 0.02%)</title><rect x="90.0832%" y="901" width="0.0154%" height="15" fill="rgb(252,126,28)" fg:x="99151" fg:w="17"/><text x="90.3332%" y="911.50"></text></g><g><title>anon.07d2a999f171a24996f271345231b7db.171.llvm.5264816588596360844 (18 samples, 0.02%)</title><rect x="90.1541%" y="917" width="0.0164%" height="15" fill="rgb(215,56,38)" fg:x="99229" fg:w="18"/><text x="90.4041%" y="927.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (18 samples, 0.02%)</title><rect x="90.1541%" y="901" width="0.0164%" height="15" fill="rgb(249,55,44)" fg:x="99229" fg:w="18"/><text x="90.4041%" y="911.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (22 samples, 0.02%)</title><rect x="90.1904%" y="901" width="0.0200%" height="15" fill="rgb(220,221,32)" fg:x="99269" fg:w="22"/><text x="90.4404%" y="911.50"></text></g><g><title>anon.a92b65dce0c6862938e99fda8bcdfe22.34.llvm.2716098514989274932 (33 samples, 0.03%)</title><rect x="90.1904%" y="917" width="0.0300%" height="15" fill="rgb(212,216,41)" fg:x="99269" fg:w="33"/><text x="90.4404%" y="927.50"></text></g><g><title>sn_rust_dealloc (12 samples, 0.01%)</title><rect x="90.2558%" y="901" width="0.0109%" height="15" fill="rgb(228,213,43)" fg:x="99341" fg:w="12"/><text x="90.5058%" y="911.50"></text></g><g><title>anon.ad6b3c7efd403fc0bec16b3e2cfcb681.24.llvm.10493242232810447988 (43 samples, 0.04%)</title><rect x="90.2313%" y="917" width="0.0391%" height="15" fill="rgb(211,31,26)" fg:x="99314" fg:w="43"/><text x="90.4813%" y="927.50"></text></g><g><title>anon.ad6b3c7efd403fc0bec16b3e2cfcb681.25.llvm.10493242232810447988 (17 samples, 0.02%)</title><rect x="90.2704%" y="917" width="0.0154%" height="15" fill="rgb(229,202,19)" fg:x="99357" fg:w="17"/><text x="90.5204%" y="927.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (13 samples, 0.01%)</title><rect x="90.2985%" y="901" width="0.0118%" height="15" fill="rgb(229,105,46)" fg:x="99388" fg:w="13"/><text x="90.5485%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tremor_value::value::Value]&gt; (15 samples, 0.01%)</title><rect x="90.3104%" y="901" width="0.0136%" height="15" fill="rgb(235,108,1)" fg:x="99401" fg:w="15"/><text x="90.5604%" y="911.50"></text></g><g><title>anon.b1d8c7f42bff7d5998958fa920d1dee2.46.llvm.13525319545232520578 (48 samples, 0.04%)</title><rect x="90.2858%" y="917" width="0.0436%" height="15" fill="rgb(245,111,35)" fg:x="99374" fg:w="48"/><text x="90.5358%" y="927.50"></text></g><g><title>anon.c6676277d9159002154b1ad830e38ffe.16.llvm.16537282876649417011 (19 samples, 0.02%)</title><rect x="90.3294%" y="917" width="0.0173%" height="15" fill="rgb(219,185,31)" fg:x="99422" fg:w="19"/><text x="90.5794%" y="927.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (22 samples, 0.02%)</title><rect x="90.3803%" y="885" width="0.0200%" height="15" fill="rgb(214,4,43)" fg:x="99478" fg:w="22"/><text x="90.6303%" y="895.50"></text></g><g><title>async_task::runnable::Runnable::run (22 samples, 0.02%)</title><rect x="90.3803%" y="869" width="0.0200%" height="15" fill="rgb(235,227,40)" fg:x="99478" fg:w="22"/><text x="90.6303%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (13 samples, 0.01%)</title><rect x="90.4285%" y="805" width="0.0118%" height="15" fill="rgb(230,88,30)" fg:x="99531" fg:w="13"/><text x="90.6785%" y="815.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (92 samples, 0.08%)</title><rect x="90.3585%" y="901" width="0.0836%" height="15" fill="rgb(216,217,1)" fg:x="99454" fg:w="92"/><text x="90.6085%" y="911.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (43 samples, 0.04%)</title><rect x="90.4030%" y="885" width="0.0391%" height="15" fill="rgb(248,139,50)" fg:x="99503" fg:w="43"/><text x="90.6530%" y="895.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (33 samples, 0.03%)</title><rect x="90.4121%" y="869" width="0.0300%" height="15" fill="rgb(233,1,21)" fg:x="99513" fg:w="33"/><text x="90.6621%" y="879.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (30 samples, 0.03%)</title><rect x="90.4148%" y="853" width="0.0273%" height="15" fill="rgb(215,183,12)" fg:x="99516" fg:w="30"/><text x="90.6648%" y="863.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (25 samples, 0.02%)</title><rect x="90.4194%" y="837" width="0.0227%" height="15" fill="rgb(229,104,42)" fg:x="99521" fg:w="25"/><text x="90.6694%" y="847.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (25 samples, 0.02%)</title><rect x="90.4194%" y="821" width="0.0227%" height="15" fill="rgb(243,34,48)" fg:x="99521" fg:w="25"/><text x="90.6694%" y="831.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (34 samples, 0.03%)</title><rect x="90.4694%" y="853" width="0.0309%" height="15" fill="rgb(239,11,44)" fg:x="99576" fg:w="34"/><text x="90.7194%" y="863.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (67 samples, 0.06%)</title><rect x="90.4430%" y="901" width="0.0609%" height="15" fill="rgb(231,98,35)" fg:x="99547" fg:w="67"/><text x="90.6930%" y="911.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (64 samples, 0.06%)</title><rect x="90.4457%" y="885" width="0.0581%" height="15" fill="rgb(233,28,25)" fg:x="99550" fg:w="64"/><text x="90.6957%" y="895.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (56 samples, 0.05%)</title><rect x="90.4530%" y="869" width="0.0509%" height="15" fill="rgb(234,123,11)" fg:x="99558" fg:w="56"/><text x="90.7030%" y="879.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (34 samples, 0.03%)</title><rect x="90.5202%" y="901" width="0.0309%" height="15" fill="rgb(220,69,3)" fg:x="99632" fg:w="34"/><text x="90.7702%" y="911.50"></text></g><g><title>parking::Inner::park (12 samples, 0.01%)</title><rect x="90.5529%" y="901" width="0.0109%" height="15" fill="rgb(214,64,36)" fg:x="99668" fg:w="12"/><text x="90.8029%" y="911.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (71 samples, 0.06%)</title><rect x="90.6256%" y="885" width="0.0645%" height="15" fill="rgb(211,138,32)" fg:x="99748" fg:w="71"/><text x="90.8756%" y="895.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (60 samples, 0.05%)</title><rect x="90.6356%" y="869" width="0.0545%" height="15" fill="rgb(213,118,47)" fg:x="99759" fg:w="60"/><text x="90.8856%" y="879.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (55 samples, 0.05%)</title><rect x="90.6402%" y="853" width="0.0500%" height="15" fill="rgb(243,124,49)" fg:x="99764" fg:w="55"/><text x="90.8902%" y="863.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (55 samples, 0.05%)</title><rect x="90.6402%" y="837" width="0.0500%" height="15" fill="rgb(221,30,28)" fg:x="99764" fg:w="55"/><text x="90.8902%" y="847.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue_events (39 samples, 0.04%)</title><rect x="90.6547%" y="821" width="0.0354%" height="15" fill="rgb(246,37,13)" fg:x="99780" fg:w="39"/><text x="90.9047%" y="831.50"></text></g><g><title>async_io::reactor::Reactor::get::REACTOR (377 samples, 0.34%)</title><rect x="90.3549%" y="917" width="0.3425%" height="15" fill="rgb(249,66,14)" fg:x="99450" fg:w="377"/><text x="90.6049%" y="927.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (132 samples, 0.12%)</title><rect x="90.5775%" y="901" width="0.1199%" height="15" fill="rgb(213,166,5)" fg:x="99695" fg:w="132"/><text x="90.8275%" y="911.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (22 samples, 0.02%)</title><rect x="91.1580%" y="213" width="0.0200%" height="15" fill="rgb(221,66,24)" fg:x="100334" fg:w="22"/><text x="91.4080%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (21 samples, 0.02%)</title><rect x="91.1589%" y="197" width="0.0191%" height="15" fill="rgb(210,132,17)" fg:x="100335" fg:w="21"/><text x="91.4089%" y="207.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (21 samples, 0.02%)</title><rect x="91.1589%" y="181" width="0.0191%" height="15" fill="rgb(243,202,5)" fg:x="100335" fg:w="21"/><text x="91.4089%" y="191.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (21 samples, 0.02%)</title><rect x="91.1589%" y="165" width="0.0191%" height="15" fill="rgb(233,70,48)" fg:x="100335" fg:w="21"/><text x="91.4089%" y="175.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (21 samples, 0.02%)</title><rect x="91.1589%" y="149" width="0.0191%" height="15" fill="rgb(238,41,26)" fg:x="100335" fg:w="21"/><text x="91.4089%" y="159.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (54 samples, 0.05%)</title><rect x="91.1780%" y="213" width="0.0491%" height="15" fill="rgb(241,19,31)" fg:x="100356" fg:w="54"/><text x="91.4280%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (271 samples, 0.25%)</title><rect x="91.0308%" y="261" width="0.2462%" height="15" fill="rgb(214,76,10)" fg:x="100194" fg:w="271"/><text x="91.2808%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (222 samples, 0.20%)</title><rect x="91.0754%" y="245" width="0.2017%" height="15" fill="rgb(254,202,22)" fg:x="100243" fg:w="222"/><text x="91.3254%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (184 samples, 0.17%)</title><rect x="91.1099%" y="229" width="0.1672%" height="15" fill="rgb(214,72,24)" fg:x="100281" fg:w="184"/><text x="91.3599%" y="239.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (55 samples, 0.05%)</title><rect x="91.2271%" y="213" width="0.0500%" height="15" fill="rgb(221,92,46)" fg:x="100410" fg:w="55"/><text x="91.4771%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (55 samples, 0.05%)</title><rect x="91.2271%" y="197" width="0.0500%" height="15" fill="rgb(246,13,50)" fg:x="100410" fg:w="55"/><text x="91.4771%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (13 samples, 0.01%)</title><rect x="91.2652%" y="181" width="0.0118%" height="15" fill="rgb(240,165,38)" fg:x="100452" fg:w="13"/><text x="91.5152%" y="191.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (13 samples, 0.01%)</title><rect x="91.2652%" y="165" width="0.0118%" height="15" fill="rgb(241,24,51)" fg:x="100452" fg:w="13"/><text x="91.5152%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (297 samples, 0.27%)</title><rect x="91.0308%" y="309" width="0.2698%" height="15" fill="rgb(227,51,44)" fg:x="100194" fg:w="297"/><text x="91.2808%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (297 samples, 0.27%)</title><rect x="91.0308%" y="293" width="0.2698%" height="15" fill="rgb(231,121,3)" fg:x="100194" fg:w="297"/><text x="91.2808%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (297 samples, 0.27%)</title><rect x="91.0308%" y="277" width="0.2698%" height="15" fill="rgb(245,3,41)" fg:x="100194" fg:w="297"/><text x="91.2808%" y="287.50"></text></g><g><title>core::ops::control_flow::ControlFlow&lt;R,&lt;R as core::ops::try_trait::Try&gt;::Output&gt;::into_try (26 samples, 0.02%)</title><rect x="91.2771%" y="261" width="0.0236%" height="15" fill="rgb(214,13,26)" fg:x="100465" fg:w="26"/><text x="91.5271%" y="271.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::len (803 samples, 0.73%)</title><rect x="91.6023%" y="277" width="0.7296%" height="15" fill="rgb(252,75,11)" fg:x="100823" fg:w="803"/><text x="91.8523%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (563 samples, 0.51%)</title><rect x="91.8204%" y="261" width="0.5115%" height="15" fill="rgb(218,226,17)" fg:x="101063" fg:w="563"/><text x="92.0704%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_load (563 samples, 0.51%)</title><rect x="91.8204%" y="245" width="0.5115%" height="15" fill="rgb(248,89,38)" fg:x="101063" fg:w="563"/><text x="92.0704%" y="255.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::len (1,072 samples, 0.97%)</title><rect x="91.3652%" y="293" width="0.9740%" height="15" fill="rgb(237,73,46)" fg:x="100562" fg:w="1072"/><text x="91.6152%" y="303.50"></text></g><g><title>async_executor::steal (1,145 samples, 1.04%)</title><rect x="91.3007%" y="309" width="1.0403%" height="15" fill="rgb(242,78,33)" fg:x="100491" fg:w="1145"/><text x="91.5507%" y="319.50"></text></g><g><title>concurrent_queue::full_fence (1,043 samples, 0.95%)</title><rect x="92.8052%" y="277" width="0.9476%" height="15" fill="rgb(235,60,3)" fg:x="102147" fg:w="1043"/><text x="93.0552%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (1,006 samples, 0.91%)</title><rect x="92.8388%" y="261" width="0.9140%" height="15" fill="rgb(216,172,19)" fg:x="102184" fg:w="1006"/><text x="93.0888%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1,006 samples, 0.91%)</title><rect x="92.8388%" y="245" width="0.9140%" height="15" fill="rgb(227,6,42)" fg:x="102184" fg:w="1006"/><text x="93.0888%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1,006 samples, 0.91%)</title><rect x="92.8388%" y="229" width="0.9140%" height="15" fill="rgb(223,207,42)" fg:x="102184" fg:w="1006"/><text x="93.0888%" y="239.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (1,530 samples, 1.39%)</title><rect x="92.4745%" y="293" width="1.3901%" height="15" fill="rgb(246,138,30)" fg:x="101783" fg:w="1530"/><text x="92.7245%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (123 samples, 0.11%)</title><rect x="93.7528%" y="277" width="0.1118%" height="15" fill="rgb(251,199,47)" fg:x="103190" fg:w="123"/><text x="94.0028%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_load (123 samples, 0.11%)</title><rect x="93.7528%" y="261" width="0.1118%" height="15" fill="rgb(228,218,44)" fg:x="103190" fg:w="123"/><text x="94.0028%" y="271.50"></text></g><g><title>concurrent_queue::full_fence (141 samples, 0.13%)</title><rect x="93.8982%" y="277" width="0.1281%" height="15" fill="rgb(220,68,6)" fg:x="103350" fg:w="141"/><text x="94.1482%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (137 samples, 0.12%)</title><rect x="93.9018%" y="261" width="0.1245%" height="15" fill="rgb(240,60,26)" fg:x="103354" fg:w="137"/><text x="94.1518%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (137 samples, 0.12%)</title><rect x="93.9018%" y="245" width="0.1245%" height="15" fill="rgb(211,200,19)" fg:x="103354" fg:w="137"/><text x="94.1518%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (137 samples, 0.12%)</title><rect x="93.9018%" y="229" width="0.1245%" height="15" fill="rgb(242,145,30)" fg:x="103354" fg:w="137"/><text x="94.1518%" y="239.50"></text></g><g><title>concurrent_queue::unbounded::Slot&lt;T&gt;::wait_write (22 samples, 0.02%)</title><rect x="94.0309%" y="277" width="0.0200%" height="15" fill="rgb(225,64,13)" fg:x="103496" fg:w="22"/><text x="94.2809%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (21 samples, 0.02%)</title><rect x="94.0318%" y="261" width="0.0191%" height="15" fill="rgb(218,103,35)" fg:x="103497" fg:w="21"/><text x="94.2818%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_load (21 samples, 0.02%)</title><rect x="94.0318%" y="245" width="0.0191%" height="15" fill="rgb(216,93,46)" fg:x="103497" fg:w="21"/><text x="94.2818%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (48 samples, 0.04%)</title><rect x="94.0636%" y="277" width="0.0436%" height="15" fill="rgb(225,159,27)" fg:x="103532" fg:w="48"/><text x="94.3136%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (48 samples, 0.04%)</title><rect x="94.0636%" y="261" width="0.0436%" height="15" fill="rgb(225,204,11)" fg:x="103532" fg:w="48"/><text x="94.3136%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (75 samples, 0.07%)</title><rect x="94.1072%" y="277" width="0.0681%" height="15" fill="rgb(205,56,4)" fg:x="103580" fg:w="75"/><text x="94.3572%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_or (75 samples, 0.07%)</title><rect x="94.1072%" y="261" width="0.0681%" height="15" fill="rgb(206,6,35)" fg:x="103580" fg:w="75"/><text x="94.3572%" y="271.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (2,148 samples, 1.95%)</title><rect x="92.3410%" y="309" width="1.9516%" height="15" fill="rgb(247,73,52)" fg:x="101636" fg:w="2148"/><text x="92.5910%" y="319.50">c..</text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (471 samples, 0.43%)</title><rect x="93.8646%" y="293" width="0.4279%" height="15" fill="rgb(246,97,4)" fg:x="103313" fg:w="471"/><text x="94.1146%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (129 samples, 0.12%)</title><rect x="94.1753%" y="277" width="0.1172%" height="15" fill="rgb(212,37,15)" fg:x="103655" fg:w="129"/><text x="94.4253%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_load (129 samples, 0.12%)</title><rect x="94.1753%" y="261" width="0.1172%" height="15" fill="rgb(208,130,40)" fg:x="103655" fg:w="129"/><text x="94.4253%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (120 samples, 0.11%)</title><rect x="94.3007%" y="245" width="0.1090%" height="15" fill="rgb(236,55,29)" fg:x="103793" fg:w="120"/><text x="94.5507%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_sub (120 samples, 0.11%)</title><rect x="94.3007%" y="229" width="0.1090%" height="15" fill="rgb(209,156,45)" fg:x="103793" fg:w="120"/><text x="94.5507%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (250 samples, 0.23%)</title><rect x="94.2925%" y="309" width="0.2271%" height="15" fill="rgb(249,107,4)" fg:x="103784" fg:w="250"/><text x="94.5425%" y="319.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (250 samples, 0.23%)</title><rect x="94.2925%" y="293" width="0.2271%" height="15" fill="rgb(227,7,13)" fg:x="103784" fg:w="250"/><text x="94.5425%" y="303.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read_unlock (249 samples, 0.23%)</title><rect x="94.2934%" y="277" width="0.2262%" height="15" fill="rgb(250,129,14)" fg:x="103785" fg:w="249"/><text x="94.5434%" y="287.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read_unlock (241 samples, 0.22%)</title><rect x="94.3007%" y="261" width="0.2190%" height="15" fill="rgb(229,92,13)" fg:x="103793" fg:w="241"/><text x="94.5507%" y="271.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::raw_unlock (121 samples, 0.11%)</title><rect x="94.4097%" y="245" width="0.1099%" height="15" fill="rgb(245,98,39)" fg:x="103913" fg:w="121"/><text x="94.6597%" y="255.50"></text></g><g><title>__GI___pthread_rwlock_unlock (121 samples, 0.11%)</title><rect x="94.4097%" y="229" width="0.1099%" height="15" fill="rgb(234,135,48)" fg:x="103913" fg:w="121"/><text x="94.6597%" y="239.50"></text></g><g><title>fastrand::usize (20 samples, 0.02%)</title><rect x="94.5197%" y="309" width="0.0182%" height="15" fill="rgb(230,98,28)" fg:x="104034" fg:w="20"/><text x="94.7697%" y="319.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (20 samples, 0.02%)</title><rect x="94.5197%" y="293" width="0.0182%" height="15" fill="rgb(223,121,0)" fg:x="104034" fg:w="20"/><text x="94.7697%" y="303.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (17 samples, 0.02%)</title><rect x="94.5224%" y="277" width="0.0154%" height="15" fill="rgb(234,173,33)" fg:x="104037" fg:w="17"/><text x="94.7724%" y="287.50"></text></g><g><title>fastrand::usize::{{closure}} (14 samples, 0.01%)</title><rect x="94.5251%" y="261" width="0.0127%" height="15" fill="rgb(245,47,8)" fg:x="104040" fg:w="14"/><text x="94.7751%" y="271.50"></text></g><g><title>fastrand::Rng::usize (14 samples, 0.01%)</title><rect x="94.5251%" y="245" width="0.0127%" height="15" fill="rgb(205,17,20)" fg:x="104040" fg:w="14"/><text x="94.7751%" y="255.50"></text></g><g><title>fastrand::Rng::gen_mod_u64 (14 samples, 0.01%)</title><rect x="94.5251%" y="229" width="0.0127%" height="15" fill="rgb(232,151,16)" fg:x="104040" fg:w="14"/><text x="94.7751%" y="239.50"></text></g><g><title>std::sync::rwlock::RwLockReadGuard&lt;T&gt;::new (13 samples, 0.01%)</title><rect x="94.5378%" y="293" width="0.0118%" height="15" fill="rgb(208,30,32)" fg:x="104054" fg:w="13"/><text x="94.7878%" y="303.50"></text></g><g><title>std::sync::poison::Flag::borrow (13 samples, 0.01%)</title><rect x="94.5378%" y="277" width="0.0118%" height="15" fill="rgb(254,26,3)" fg:x="104054" fg:w="13"/><text x="94.7878%" y="287.50"></text></g><g><title>__GI___pthread_rwlock_rdlock (294 samples, 0.27%)</title><rect x="94.5742%" y="261" width="0.2671%" height="15" fill="rgb(240,177,30)" fg:x="104094" fg:w="294"/><text x="94.8242%" y="271.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (4,504 samples, 4.09%)</title><rect x="90.8473%" y="325" width="4.0921%" height="15" fill="rgb(248,76,44)" fg:x="99992" fg:w="4504"/><text x="91.0973%" y="335.50">asyn..</text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (442 samples, 0.40%)</title><rect x="94.5378%" y="309" width="0.4016%" height="15" fill="rgb(241,186,54)" fg:x="104054" fg:w="442"/><text x="94.7878%" y="319.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read (429 samples, 0.39%)</title><rect x="94.5496%" y="293" width="0.3898%" height="15" fill="rgb(249,171,29)" fg:x="104067" fg:w="429"/><text x="94.7996%" y="303.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read (412 samples, 0.37%)</title><rect x="94.5651%" y="277" width="0.3743%" height="15" fill="rgb(237,151,44)" fg:x="104084" fg:w="412"/><text x="94.8151%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (108 samples, 0.10%)</title><rect x="94.8413%" y="261" width="0.0981%" height="15" fill="rgb(228,174,30)" fg:x="104388" fg:w="108"/><text x="95.0913%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_add (108 samples, 0.10%)</title><rect x="94.8413%" y="245" width="0.0981%" height="15" fill="rgb(252,14,37)" fg:x="104388" fg:w="108"/><text x="95.0913%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (20 samples, 0.02%)</title><rect x="94.9449%" y="309" width="0.0182%" height="15" fill="rgb(207,111,40)" fg:x="104502" fg:w="20"/><text x="95.1949%" y="319.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.02%)</title><rect x="94.9449%" y="293" width="0.0182%" height="15" fill="rgb(248,171,54)" fg:x="104502" fg:w="20"/><text x="95.1949%" y="303.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (20 samples, 0.02%)</title><rect x="94.9449%" y="277" width="0.0182%" height="15" fill="rgb(211,127,2)" fg:x="104502" fg:w="20"/><text x="95.1949%" y="287.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (20 samples, 0.02%)</title><rect x="94.9449%" y="261" width="0.0182%" height="15" fill="rgb(236,87,47)" fg:x="104502" fg:w="20"/><text x="95.1949%" y="271.50"></text></g><g><title>__GI___pthread_mutex_unlock (20 samples, 0.02%)</title><rect x="94.9449%" y="245" width="0.0182%" height="15" fill="rgb(223,190,45)" fg:x="104502" fg:w="20"/><text x="95.1949%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (30 samples, 0.03%)</title><rect x="94.9630%" y="309" width="0.0273%" height="15" fill="rgb(215,5,16)" fg:x="104522" fg:w="30"/><text x="95.2130%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (30 samples, 0.03%)</title><rect x="94.9630%" y="293" width="0.0273%" height="15" fill="rgb(252,82,33)" fg:x="104522" fg:w="30"/><text x="95.2130%" y="303.50"></text></g><g><title>__libc_write (13 samples, 0.01%)</title><rect x="95.0012%" y="213" width="0.0118%" height="15" fill="rgb(247,213,44)" fg:x="104564" fg:w="13"/><text x="95.2512%" y="223.50"></text></g><g><title>async_io::reactor::Reactor::notify (23 samples, 0.02%)</title><rect x="94.9930%" y="261" width="0.0209%" height="15" fill="rgb(205,196,44)" fg:x="104555" fg:w="23"/><text x="95.2430%" y="271.50"></text></g><g><title>polling::Poller::notify (22 samples, 0.02%)</title><rect x="94.9939%" y="245" width="0.0200%" height="15" fill="rgb(237,96,54)" fg:x="104556" fg:w="22"/><text x="95.2439%" y="255.50"></text></g><g><title>polling::epoll::Poller::notify (16 samples, 0.01%)</title><rect x="94.9994%" y="229" width="0.0145%" height="15" fill="rgb(230,113,34)" fg:x="104562" fg:w="16"/><text x="95.2494%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (71 samples, 0.06%)</title><rect x="95.0512%" y="229" width="0.0645%" height="15" fill="rgb(221,224,12)" fg:x="104619" fg:w="71"/><text x="95.3012%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_swap (71 samples, 0.06%)</title><rect x="95.0512%" y="213" width="0.0645%" height="15" fill="rgb(219,112,44)" fg:x="104619" fg:w="71"/><text x="95.3012%" y="223.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (82 samples, 0.07%)</title><rect x="95.1157%" y="229" width="0.0745%" height="15" fill="rgb(210,31,13)" fg:x="104690" fg:w="82"/><text x="95.3657%" y="239.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (82 samples, 0.07%)</title><rect x="95.1157%" y="213" width="0.0745%" height="15" fill="rgb(230,25,16)" fg:x="104690" fg:w="82"/><text x="95.3657%" y="223.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (82 samples, 0.07%)</title><rect x="95.1157%" y="197" width="0.0745%" height="15" fill="rgb(246,108,53)" fg:x="104690" fg:w="82"/><text x="95.3657%" y="207.50"></text></g><g><title>__pthread_cond_signal (82 samples, 0.07%)</title><rect x="95.1157%" y="181" width="0.0745%" height="15" fill="rgb(241,172,50)" fg:x="104690" fg:w="82"/><text x="95.3657%" y="191.50"></text></g><g><title>parking::Unparker::unpark (283 samples, 0.26%)</title><rect x="95.0184%" y="261" width="0.2571%" height="15" fill="rgb(235,141,10)" fg:x="104583" fg:w="283"/><text x="95.2684%" y="271.50"></text></g><g><title>parking::Inner::unpark (257 samples, 0.23%)</title><rect x="95.0421%" y="245" width="0.2335%" height="15" fill="rgb(220,174,43)" fg:x="104609" fg:w="257"/><text x="95.2921%" y="255.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (94 samples, 0.09%)</title><rect x="95.1902%" y="229" width="0.0854%" height="15" fill="rgb(215,181,40)" fg:x="104772" fg:w="94"/><text x="95.4402%" y="239.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (94 samples, 0.09%)</title><rect x="95.1902%" y="213" width="0.0854%" height="15" fill="rgb(230,97,2)" fg:x="104772" fg:w="94"/><text x="95.4402%" y="223.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (91 samples, 0.08%)</title><rect x="95.1929%" y="197" width="0.0827%" height="15" fill="rgb(211,25,27)" fg:x="104775" fg:w="91"/><text x="95.4429%" y="207.50"></text></g><g><title>__GI___pthread_mutex_lock (91 samples, 0.08%)</title><rect x="95.1929%" y="181" width="0.0827%" height="15" fill="rgb(230,87,26)" fg:x="104775" fg:w="91"/><text x="95.4429%" y="191.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (325 samples, 0.30%)</title><rect x="94.9903%" y="277" width="0.2953%" height="15" fill="rgb(227,160,17)" fg:x="104552" fg:w="325"/><text x="95.2403%" y="287.50"></text></g><g><title>core::task::wake::Waker::wake (380 samples, 0.35%)</title><rect x="94.9903%" y="309" width="0.3452%" height="15" fill="rgb(244,85,34)" fg:x="104552" fg:w="380"/><text x="95.2403%" y="319.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (380 samples, 0.35%)</title><rect x="94.9903%" y="293" width="0.3452%" height="15" fill="rgb(207,70,0)" fg:x="104552" fg:w="380"/><text x="95.2403%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (55 samples, 0.05%)</title><rect x="95.2856%" y="277" width="0.0500%" height="15" fill="rgb(223,129,7)" fg:x="104877" fg:w="55"/><text x="95.5356%" y="287.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (55 samples, 0.05%)</title><rect x="95.2856%" y="261" width="0.0500%" height="15" fill="rgb(246,105,7)" fg:x="104877" fg:w="55"/><text x="95.5356%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (53 samples, 0.05%)</title><rect x="95.2874%" y="245" width="0.0482%" height="15" fill="rgb(215,154,42)" fg:x="104879" fg:w="53"/><text x="95.5374%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_sub (53 samples, 0.05%)</title><rect x="95.2874%" y="229" width="0.0482%" height="15" fill="rgb(220,215,30)" fg:x="104879" fg:w="53"/><text x="95.5374%" y="239.50"></text></g><g><title>async_executor::State::notify (456 samples, 0.41%)</title><rect x="94.9394%" y="325" width="0.4143%" height="15" fill="rgb(228,81,51)" fg:x="104496" fg:w="456"/><text x="95.1894%" y="335.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (20 samples, 0.02%)</title><rect x="95.3355%" y="309" width="0.0182%" height="15" fill="rgb(247,71,54)" fg:x="104932" fg:w="20"/><text x="95.5855%" y="319.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (18 samples, 0.02%)</title><rect x="95.3373%" y="293" width="0.0164%" height="15" fill="rgb(234,176,34)" fg:x="104934" fg:w="18"/><text x="95.5873%" y="303.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (17 samples, 0.02%)</title><rect x="95.3383%" y="277" width="0.0154%" height="15" fill="rgb(241,103,54)" fg:x="104935" fg:w="17"/><text x="95.5883%" y="287.50"></text></g><g><title>__GI___pthread_mutex_lock (17 samples, 0.02%)</title><rect x="95.3383%" y="261" width="0.0154%" height="15" fill="rgb(228,22,34)" fg:x="104935" fg:w="17"/><text x="95.5883%" y="271.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (88 samples, 0.08%)</title><rect x="95.3601%" y="293" width="0.0800%" height="15" fill="rgb(241,179,48)" fg:x="104959" fg:w="88"/><text x="95.6101%" y="303.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (86 samples, 0.08%)</title><rect x="95.3619%" y="277" width="0.0781%" height="15" fill="rgb(235,167,37)" fg:x="104961" fg:w="86"/><text x="95.6119%" y="287.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (85 samples, 0.08%)</title><rect x="95.3628%" y="261" width="0.0772%" height="15" fill="rgb(213,109,30)" fg:x="104962" fg:w="85"/><text x="95.6128%" y="271.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (85 samples, 0.08%)</title><rect x="95.3628%" y="245" width="0.0772%" height="15" fill="rgb(222,172,16)" fg:x="104962" fg:w="85"/><text x="95.6128%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (85 samples, 0.08%)</title><rect x="95.3628%" y="229" width="0.0772%" height="15" fill="rgb(233,192,5)" fg:x="104962" fg:w="85"/><text x="95.6128%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_add (85 samples, 0.08%)</title><rect x="95.3628%" y="213" width="0.0772%" height="15" fill="rgb(247,189,41)" fg:x="104962" fg:w="85"/><text x="95.6128%" y="223.50"></text></g><g><title>async_executor::Sleepers::insert (105 samples, 0.10%)</title><rect x="95.3601%" y="309" width="0.0954%" height="15" fill="rgb(218,134,47)" fg:x="104959" fg:w="105"/><text x="95.6101%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (13 samples, 0.01%)</title><rect x="95.4436%" y="293" width="0.0118%" height="15" fill="rgb(216,29,3)" fg:x="105051" fg:w="13"/><text x="95.6936%" y="303.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="95.4963%" y="293" width="0.0136%" height="15" fill="rgb(246,140,12)" fg:x="105109" fg:w="15"/><text x="95.7463%" y="303.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (38 samples, 0.03%)</title><rect x="95.5100%" y="293" width="0.0345%" height="15" fill="rgb(230,136,11)" fg:x="105124" fg:w="38"/><text x="95.7600%" y="303.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (37 samples, 0.03%)</title><rect x="95.5109%" y="277" width="0.0336%" height="15" fill="rgb(247,22,47)" fg:x="105125" fg:w="37"/><text x="95.7609%" y="287.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (37 samples, 0.03%)</title><rect x="95.5109%" y="261" width="0.0336%" height="15" fill="rgb(218,84,22)" fg:x="105125" fg:w="37"/><text x="95.7609%" y="271.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (37 samples, 0.03%)</title><rect x="95.5109%" y="245" width="0.0336%" height="15" fill="rgb(216,87,39)" fg:x="105125" fg:w="37"/><text x="95.7609%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (37 samples, 0.03%)</title><rect x="95.5109%" y="229" width="0.0336%" height="15" fill="rgb(221,178,8)" fg:x="105125" fg:w="37"/><text x="95.7609%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_add (37 samples, 0.03%)</title><rect x="95.5109%" y="213" width="0.0336%" height="15" fill="rgb(230,42,11)" fg:x="105125" fg:w="37"/><text x="95.7609%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (21 samples, 0.02%)</title><rect x="95.5445%" y="293" width="0.0191%" height="15" fill="rgb(237,229,4)" fg:x="105162" fg:w="21"/><text x="95.7945%" y="303.50"></text></g><g><title>core::ptr::write (19 samples, 0.02%)</title><rect x="95.5463%" y="277" width="0.0173%" height="15" fill="rgb(222,31,33)" fg:x="105164" fg:w="19"/><text x="95.7963%" y="287.50"></text></g><g><title>async_executor::Sleepers::update (121 samples, 0.11%)</title><rect x="95.4609%" y="309" width="0.1099%" height="15" fill="rgb(210,17,39)" fg:x="105070" fg:w="121"/><text x="95.7109%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (127 samples, 0.12%)</title><rect x="95.5708%" y="309" width="0.1154%" height="15" fill="rgb(244,93,20)" fg:x="105191" fg:w="127"/><text x="95.8208%" y="319.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (127 samples, 0.12%)</title><rect x="95.5708%" y="293" width="0.1154%" height="15" fill="rgb(210,40,47)" fg:x="105191" fg:w="127"/><text x="95.8208%" y="303.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (121 samples, 0.11%)</title><rect x="95.5763%" y="277" width="0.1099%" height="15" fill="rgb(239,211,47)" fg:x="105197" fg:w="121"/><text x="95.8263%" y="287.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (121 samples, 0.11%)</title><rect x="95.5763%" y="261" width="0.1099%" height="15" fill="rgb(251,223,49)" fg:x="105197" fg:w="121"/><text x="95.8263%" y="271.50"></text></g><g><title>__GI___pthread_mutex_unlock (118 samples, 0.11%)</title><rect x="95.5790%" y="245" width="0.1072%" height="15" fill="rgb(221,149,5)" fg:x="105200" fg:w="118"/><text x="95.8290%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (177 samples, 0.16%)</title><rect x="95.6862%" y="309" width="0.1608%" height="15" fill="rgb(219,224,51)" fg:x="105318" fg:w="177"/><text x="95.9362%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_swap (177 samples, 0.16%)</title><rect x="95.6862%" y="293" width="0.1608%" height="15" fill="rgb(223,7,8)" fg:x="105318" fg:w="177"/><text x="95.9362%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (105 samples, 0.10%)</title><rect x="95.8470%" y="309" width="0.0954%" height="15" fill="rgb(241,217,22)" fg:x="105495" fg:w="105"/><text x="96.0970%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_store (105 samples, 0.10%)</title><rect x="95.8470%" y="293" width="0.0954%" height="15" fill="rgb(248,209,0)" fg:x="105495" fg:w="105"/><text x="96.0970%" y="303.50"></text></g><g><title>async_executor::Ticker::sleep (996 samples, 0.90%)</title><rect x="95.3537%" y="325" width="0.9049%" height="15" fill="rgb(217,205,4)" fg:x="104952" fg:w="996"/><text x="95.6037%" y="335.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (348 samples, 0.32%)</title><rect x="95.9424%" y="309" width="0.3162%" height="15" fill="rgb(228,124,39)" fg:x="105600" fg:w="348"/><text x="96.1924%" y="319.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (339 samples, 0.31%)</title><rect x="95.9506%" y="293" width="0.3080%" height="15" fill="rgb(250,116,42)" fg:x="105609" fg:w="339"/><text x="96.2006%" y="303.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (333 samples, 0.30%)</title><rect x="95.9561%" y="277" width="0.3025%" height="15" fill="rgb(223,202,9)" fg:x="105615" fg:w="333"/><text x="96.2061%" y="287.50"></text></g><g><title>__GI___pthread_mutex_lock (333 samples, 0.30%)</title><rect x="95.9561%" y="261" width="0.3025%" height="15" fill="rgb(242,222,40)" fg:x="105615" fg:w="333"/><text x="96.2061%" y="271.50"></text></g><g><title>__lll_lock_wait (14 samples, 0.01%)</title><rect x="96.2459%" y="245" width="0.0127%" height="15" fill="rgb(229,99,46)" fg:x="105934" fg:w="14"/><text x="96.4959%" y="255.50"></text></g><g><title>async_executor::Sleepers::remove (64 samples, 0.06%)</title><rect x="96.2632%" y="309" width="0.0581%" height="15" fill="rgb(225,56,46)" fg:x="105953" fg:w="64"/><text x="96.5132%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,core::task::wake::Waker)&gt; (34 samples, 0.03%)</title><rect x="96.2904%" y="293" width="0.0309%" height="15" fill="rgb(227,94,5)" fg:x="105983" fg:w="34"/><text x="96.5404%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (34 samples, 0.03%)</title><rect x="96.2904%" y="277" width="0.0309%" height="15" fill="rgb(205,112,38)" fg:x="105983" fg:w="34"/><text x="96.5404%" y="287.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (34 samples, 0.03%)</title><rect x="96.2904%" y="261" width="0.0309%" height="15" fill="rgb(231,133,46)" fg:x="105983" fg:w="34"/><text x="96.5404%" y="271.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::drop_waker (33 samples, 0.03%)</title><rect x="96.2913%" y="245" width="0.0300%" height="15" fill="rgb(217,16,9)" fg:x="105984" fg:w="33"/><text x="96.5413%" y="255.50"></text></g><g><title>core::mem::drop (33 samples, 0.03%)</title><rect x="96.2913%" y="229" width="0.0300%" height="15" fill="rgb(249,173,9)" fg:x="105984" fg:w="33"/><text x="96.5413%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (33 samples, 0.03%)</title><rect x="96.2913%" y="213" width="0.0300%" height="15" fill="rgb(205,163,53)" fg:x="105984" fg:w="33"/><text x="96.5413%" y="223.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.03%)</title><rect x="96.2913%" y="197" width="0.0300%" height="15" fill="rgb(217,54,41)" fg:x="105984" fg:w="33"/><text x="96.5413%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (33 samples, 0.03%)</title><rect x="96.2913%" y="181" width="0.0300%" height="15" fill="rgb(228,216,12)" fg:x="105984" fg:w="33"/><text x="96.5413%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_sub (33 samples, 0.03%)</title><rect x="96.2913%" y="165" width="0.0300%" height="15" fill="rgb(244,228,15)" fg:x="105984" fg:w="33"/><text x="96.5413%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (34 samples, 0.03%)</title><rect x="96.3213%" y="309" width="0.0309%" height="15" fill="rgb(221,176,53)" fg:x="106017" fg:w="34"/><text x="96.5713%" y="319.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 0.03%)</title><rect x="96.3213%" y="293" width="0.0309%" height="15" fill="rgb(205,94,34)" fg:x="106017" fg:w="34"/><text x="96.5713%" y="303.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (32 samples, 0.03%)</title><rect x="96.3231%" y="277" width="0.0291%" height="15" fill="rgb(213,110,48)" fg:x="106019" fg:w="32"/><text x="96.5731%" y="287.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (32 samples, 0.03%)</title><rect x="96.3231%" y="261" width="0.0291%" height="15" fill="rgb(236,142,28)" fg:x="106019" fg:w="32"/><text x="96.5731%" y="271.50"></text></g><g><title>__GI___pthread_mutex_unlock (32 samples, 0.03%)</title><rect x="96.3231%" y="245" width="0.0291%" height="15" fill="rgb(225,135,29)" fg:x="106019" fg:w="32"/><text x="96.5731%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (42 samples, 0.04%)</title><rect x="96.3522%" y="309" width="0.0382%" height="15" fill="rgb(252,45,31)" fg:x="106051" fg:w="42"/><text x="96.6022%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_swap (42 samples, 0.04%)</title><rect x="96.3522%" y="293" width="0.0382%" height="15" fill="rgb(211,187,50)" fg:x="106051" fg:w="42"/><text x="96.6022%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (59 samples, 0.05%)</title><rect x="96.3903%" y="309" width="0.0536%" height="15" fill="rgb(229,109,7)" fg:x="106093" fg:w="59"/><text x="96.6403%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_swap (59 samples, 0.05%)</title><rect x="96.3903%" y="293" width="0.0536%" height="15" fill="rgb(251,131,51)" fg:x="106093" fg:w="59"/><text x="96.6403%" y="303.50"></text></g><g><title>async_executor::Ticker::wake (254 samples, 0.23%)</title><rect x="96.2586%" y="325" width="0.2308%" height="15" fill="rgb(251,180,35)" fg:x="105948" fg:w="254"/><text x="96.5086%" y="335.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (50 samples, 0.05%)</title><rect x="96.4440%" y="309" width="0.0454%" height="15" fill="rgb(211,46,32)" fg:x="106152" fg:w="50"/><text x="96.6940%" y="319.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (48 samples, 0.04%)</title><rect x="96.4458%" y="293" width="0.0436%" height="15" fill="rgb(248,123,17)" fg:x="106154" fg:w="48"/><text x="96.6958%" y="303.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (44 samples, 0.04%)</title><rect x="96.4494%" y="277" width="0.0400%" height="15" fill="rgb(227,141,18)" fg:x="106158" fg:w="44"/><text x="96.6994%" y="287.50"></text></g><g><title>__GI___pthread_mutex_lock (44 samples, 0.04%)</title><rect x="96.4494%" y="261" width="0.0400%" height="15" fill="rgb(216,102,9)" fg:x="106158" fg:w="44"/><text x="96.6994%" y="271.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,225 samples, 5.66%)</title><rect x="90.8346%" y="389" width="5.6557%" height="15" fill="rgb(253,47,13)" fg:x="99978" fg:w="6225"/><text x="91.0846%" y="399.50">&lt;core::..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (6,225 samples, 5.66%)</title><rect x="90.8346%" y="373" width="5.6557%" height="15" fill="rgb(226,93,23)" fg:x="99978" fg:w="6225"/><text x="91.0846%" y="383.50">async_e..</text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (6,215 samples, 5.65%)</title><rect x="90.8437%" y="357" width="5.6466%" height="15" fill="rgb(247,104,17)" fg:x="99988" fg:w="6215"/><text x="91.0937%" y="367.50">&lt;future..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (6,213 samples, 5.64%)</title><rect x="90.8455%" y="341" width="5.6448%" height="15" fill="rgb(233,203,26)" fg:x="99990" fg:w="6213"/><text x="91.0955%" y="351.50">async_e..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,272 samples, 5.70%)</title><rect x="90.8092%" y="421" width="5.6984%" height="15" fill="rgb(244,98,49)" fg:x="99950" fg:w="6272"/><text x="91.0592%" y="431.50">&lt;core::..</text></g><g><title>async_executor::Runner::runnable::{{closure}} (6,270 samples, 5.70%)</title><rect x="90.8110%" y="405" width="5.6966%" height="15" fill="rgb(235,134,22)" fg:x="99952" fg:w="6270"/><text x="91.0610%" y="415.50">async_e..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (19 samples, 0.02%)</title><rect x="96.4903%" y="389" width="0.0173%" height="15" fill="rgb(221,70,32)" fg:x="106203" fg:w="19"/><text x="96.7403%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_add (19 samples, 0.02%)</title><rect x="96.4903%" y="373" width="0.0173%" height="15" fill="rgb(238,15,50)" fg:x="106203" fg:w="19"/><text x="96.7403%" y="383.50"></text></g><g><title>[libc-2.31.so] (49 samples, 0.04%)</title><rect x="96.6702%" y="277" width="0.0445%" height="15" fill="rgb(215,221,48)" fg:x="106401" fg:w="49"/><text x="96.9202%" y="287.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (20 samples, 0.02%)</title><rect x="96.7265%" y="261" width="0.0182%" height="15" fill="rgb(236,73,3)" fg:x="106463" fg:w="20"/><text x="96.9765%" y="271.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (19 samples, 0.02%)</title><rect x="96.7274%" y="245" width="0.0173%" height="15" fill="rgb(250,107,11)" fg:x="106464" fg:w="19"/><text x="96.9774%" y="255.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (176 samples, 0.16%)</title><rect x="96.5920%" y="389" width="0.1599%" height="15" fill="rgb(242,39,14)" fg:x="106315" fg:w="176"/><text x="96.8420%" y="399.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (176 samples, 0.16%)</title><rect x="96.5920%" y="373" width="0.1599%" height="15" fill="rgb(248,164,37)" fg:x="106315" fg:w="176"/><text x="96.8420%" y="383.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (167 samples, 0.15%)</title><rect x="96.6002%" y="357" width="0.1517%" height="15" fill="rgb(217,60,12)" fg:x="106324" fg:w="167"/><text x="96.8502%" y="367.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (94 samples, 0.09%)</title><rect x="96.6665%" y="341" width="0.0854%" height="15" fill="rgb(240,125,29)" fg:x="106397" fg:w="94"/><text x="96.9165%" y="351.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (94 samples, 0.09%)</title><rect x="96.6665%" y="325" width="0.0854%" height="15" fill="rgb(208,207,28)" fg:x="106397" fg:w="94"/><text x="96.9165%" y="335.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (94 samples, 0.09%)</title><rect x="96.6665%" y="309" width="0.0854%" height="15" fill="rgb(209,159,27)" fg:x="106397" fg:w="94"/><text x="96.9165%" y="319.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (92 samples, 0.08%)</title><rect x="96.6684%" y="293" width="0.0836%" height="15" fill="rgb(251,176,53)" fg:x="106399" fg:w="92"/><text x="96.9184%" y="303.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (30 samples, 0.03%)</title><rect x="96.7247%" y="277" width="0.0273%" height="15" fill="rgb(211,85,7)" fg:x="106461" fg:w="30"/><text x="96.9747%" y="287.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_ref (20 samples, 0.02%)</title><rect x="96.7519%" y="389" width="0.0182%" height="15" fill="rgb(216,64,54)" fg:x="106491" fg:w="20"/><text x="97.0019%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (20 samples, 0.02%)</title><rect x="96.7519%" y="373" width="0.0182%" height="15" fill="rgb(217,54,24)" fg:x="106491" fg:w="20"/><text x="97.0019%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_sub (20 samples, 0.02%)</title><rect x="96.7519%" y="357" width="0.0182%" height="15" fill="rgb(208,206,53)" fg:x="106491" fg:w="20"/><text x="97.0019%" y="367.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (12 samples, 0.01%)</title><rect x="96.7728%" y="309" width="0.0109%" height="15" fill="rgb(251,74,39)" fg:x="106514" fg:w="12"/><text x="97.0228%" y="319.50"></text></g><g><title>core::task::wake::Waker::wake (14 samples, 0.01%)</title><rect x="96.7728%" y="341" width="0.0127%" height="15" fill="rgb(226,47,5)" fg:x="106514" fg:w="14"/><text x="97.0228%" y="351.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (14 samples, 0.01%)</title><rect x="96.7728%" y="325" width="0.0127%" height="15" fill="rgb(234,111,33)" fg:x="106514" fg:w="14"/><text x="97.0228%" y="335.50"></text></g><g><title>async_executor::State::notify (20 samples, 0.02%)</title><rect x="96.7701%" y="357" width="0.0182%" height="15" fill="rgb(251,14,10)" fg:x="106511" fg:w="20"/><text x="97.0201%" y="367.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (31 samples, 0.03%)</title><rect x="96.7701%" y="373" width="0.0282%" height="15" fill="rgb(232,43,0)" fg:x="106511" fg:w="31"/><text x="97.0201%" y="383.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::schedule (32 samples, 0.03%)</title><rect x="96.7701%" y="389" width="0.0291%" height="15" fill="rgb(222,68,43)" fg:x="106511" fg:w="32"/><text x="97.0201%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (167 samples, 0.15%)</title><rect x="96.7992%" y="389" width="0.1517%" height="15" fill="rgb(217,24,23)" fg:x="106543" fg:w="167"/><text x="97.0492%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (167 samples, 0.15%)</title><rect x="96.7992%" y="373" width="0.1517%" height="15" fill="rgb(229,209,14)" fg:x="106543" fg:w="167"/><text x="97.0492%" y="383.50"></text></g><g><title>async_task::runnable::Runnable::run (498 samples, 0.45%)</title><rect x="96.5076%" y="421" width="0.4525%" height="15" fill="rgb(250,149,48)" fg:x="106222" fg:w="498"/><text x="96.7576%" y="431.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (462 samples, 0.42%)</title><rect x="96.5403%" y="405" width="0.4197%" height="15" fill="rgb(210,120,37)" fg:x="106258" fg:w="462"/><text x="96.7903%" y="415.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (6,816 samples, 6.19%)</title><rect x="90.8010%" y="469" width="6.1926%" height="15" fill="rgb(210,21,8)" fg:x="99941" fg:w="6816"/><text x="91.0510%" y="479.50">&lt;futures..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,816 samples, 6.19%)</title><rect x="90.8010%" y="453" width="6.1926%" height="15" fill="rgb(243,145,7)" fg:x="99941" fg:w="6816"/><text x="91.0510%" y="463.50">&lt;core::f..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (6,814 samples, 6.19%)</title><rect x="90.8028%" y="437" width="6.1908%" height="15" fill="rgb(238,178,32)" fg:x="99943" fg:w="6814"/><text x="91.0528%" y="447.50">async_ex..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (37 samples, 0.03%)</title><rect x="96.9600%" y="421" width="0.0336%" height="15" fill="rgb(222,4,10)" fg:x="106720" fg:w="37"/><text x="97.2100%" y="431.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (37 samples, 0.03%)</title><rect x="96.9600%" y="405" width="0.0336%" height="15" fill="rgb(239,7,37)" fg:x="106720" fg:w="37"/><text x="97.2100%" y="415.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (6,847 samples, 6.22%)</title><rect x="90.7783%" y="485" width="6.2208%" height="15" fill="rgb(215,31,37)" fg:x="99916" fg:w="6847"/><text x="91.0283%" y="495.50">async_ex..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="97.0845%" y="277" width="0.0136%" height="15" fill="rgb(224,83,33)" fg:x="106857" fg:w="15"/><text x="97.3345%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (15 samples, 0.01%)</title><rect x="97.0845%" y="261" width="0.0136%" height="15" fill="rgb(239,55,3)" fg:x="106857" fg:w="15"/><text x="97.3345%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (15 samples, 0.01%)</title><rect x="97.0845%" y="245" width="0.0136%" height="15" fill="rgb(247,92,11)" fg:x="106857" fg:w="15"/><text x="97.3345%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (15 samples, 0.01%)</title><rect x="97.0845%" y="229" width="0.0136%" height="15" fill="rgb(239,200,7)" fg:x="106857" fg:w="15"/><text x="97.3345%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (15 samples, 0.01%)</title><rect x="97.0845%" y="213" width="0.0136%" height="15" fill="rgb(227,115,8)" fg:x="106857" fg:w="15"/><text x="97.3345%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (15 samples, 0.01%)</title><rect x="97.0845%" y="197" width="0.0136%" height="15" fill="rgb(215,189,27)" fg:x="106857" fg:w="15"/><text x="97.3345%" y="207.50"></text></g><g><title>concurrent_queue::full_fence (36 samples, 0.03%)</title><rect x="97.1163%" y="245" width="0.0327%" height="15" fill="rgb(251,216,39)" fg:x="106892" fg:w="36"/><text x="97.3663%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (36 samples, 0.03%)</title><rect x="97.1163%" y="229" width="0.0327%" height="15" fill="rgb(207,29,47)" fg:x="106892" fg:w="36"/><text x="97.3663%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (36 samples, 0.03%)</title><rect x="97.1163%" y="213" width="0.0327%" height="15" fill="rgb(210,71,34)" fg:x="106892" fg:w="36"/><text x="97.3663%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (36 samples, 0.03%)</title><rect x="97.1163%" y="197" width="0.0327%" height="15" fill="rgb(253,217,51)" fg:x="106892" fg:w="36"/><text x="97.3663%" y="207.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (77 samples, 0.07%)</title><rect x="97.1081%" y="261" width="0.0700%" height="15" fill="rgb(222,117,46)" fg:x="106883" fg:w="77"/><text x="97.3581%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (32 samples, 0.03%)</title><rect x="97.1490%" y="245" width="0.0291%" height="15" fill="rgb(226,132,6)" fg:x="106928" fg:w="32"/><text x="97.3990%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_load (32 samples, 0.03%)</title><rect x="97.1490%" y="229" width="0.0291%" height="15" fill="rgb(254,145,51)" fg:x="106928" fg:w="32"/><text x="97.3990%" y="239.50"></text></g><g><title>concurrent_queue::full_fence (22 samples, 0.02%)</title><rect x="97.1844%" y="245" width="0.0200%" height="15" fill="rgb(231,199,27)" fg:x="106967" fg:w="22"/><text x="97.4344%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (22 samples, 0.02%)</title><rect x="97.1844%" y="229" width="0.0200%" height="15" fill="rgb(245,158,14)" fg:x="106967" fg:w="22"/><text x="97.4344%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (22 samples, 0.02%)</title><rect x="97.1844%" y="213" width="0.0200%" height="15" fill="rgb(240,113,14)" fg:x="106967" fg:w="22"/><text x="97.4344%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (22 samples, 0.02%)</title><rect x="97.1844%" y="197" width="0.0200%" height="15" fill="rgb(210,20,13)" fg:x="106967" fg:w="22"/><text x="97.4344%" y="207.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (144 samples, 0.13%)</title><rect x="97.0981%" y="277" width="0.1308%" height="15" fill="rgb(241,144,13)" fg:x="106872" fg:w="144"/><text x="97.3481%" y="287.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (56 samples, 0.05%)</title><rect x="97.1781%" y="261" width="0.0509%" height="15" fill="rgb(235,43,34)" fg:x="106960" fg:w="56"/><text x="97.4281%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (26 samples, 0.02%)</title><rect x="97.2053%" y="245" width="0.0236%" height="15" fill="rgb(208,36,20)" fg:x="106990" fg:w="26"/><text x="97.4553%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_load (26 samples, 0.02%)</title><rect x="97.2053%" y="229" width="0.0236%" height="15" fill="rgb(239,204,10)" fg:x="106990" fg:w="26"/><text x="97.4553%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (25 samples, 0.02%)</title><rect x="97.2317%" y="213" width="0.0227%" height="15" fill="rgb(217,84,43)" fg:x="107019" fg:w="25"/><text x="97.4817%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_sub (25 samples, 0.02%)</title><rect x="97.2317%" y="197" width="0.0227%" height="15" fill="rgb(241,170,50)" fg:x="107019" fg:w="25"/><text x="97.4817%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (75 samples, 0.07%)</title><rect x="97.2289%" y="277" width="0.0681%" height="15" fill="rgb(226,205,29)" fg:x="107016" fg:w="75"/><text x="97.4789%" y="287.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (75 samples, 0.07%)</title><rect x="97.2289%" y="261" width="0.0681%" height="15" fill="rgb(233,113,1)" fg:x="107016" fg:w="75"/><text x="97.4789%" y="271.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read_unlock (72 samples, 0.07%)</title><rect x="97.2317%" y="245" width="0.0654%" height="15" fill="rgb(253,98,13)" fg:x="107019" fg:w="72"/><text x="97.4817%" y="255.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read_unlock (72 samples, 0.07%)</title><rect x="97.2317%" y="229" width="0.0654%" height="15" fill="rgb(211,115,12)" fg:x="107019" fg:w="72"/><text x="97.4817%" y="239.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::raw_unlock (47 samples, 0.04%)</title><rect x="97.2544%" y="213" width="0.0427%" height="15" fill="rgb(208,12,16)" fg:x="107044" fg:w="47"/><text x="97.5044%" y="223.50"></text></g><g><title>__GI___pthread_rwlock_unlock (47 samples, 0.04%)</title><rect x="97.2544%" y="197" width="0.0427%" height="15" fill="rgb(237,193,54)" fg:x="107044" fg:w="47"/><text x="97.5044%" y="207.50"></text></g><g><title>__GI___pthread_rwlock_rdlock (26 samples, 0.02%)</title><rect x="97.3107%" y="229" width="0.0236%" height="15" fill="rgb(243,22,42)" fg:x="107106" fg:w="26"/><text x="97.5607%" y="239.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (308 samples, 0.28%)</title><rect x="97.0790%" y="293" width="0.2798%" height="15" fill="rgb(233,151,36)" fg:x="106851" fg:w="308"/><text x="97.3290%" y="303.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (58 samples, 0.05%)</title><rect x="97.3062%" y="277" width="0.0527%" height="15" fill="rgb(237,57,45)" fg:x="107101" fg:w="58"/><text x="97.5562%" y="287.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read (55 samples, 0.05%)</title><rect x="97.3089%" y="261" width="0.0500%" height="15" fill="rgb(221,88,17)" fg:x="107104" fg:w="55"/><text x="97.5589%" y="271.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read (55 samples, 0.05%)</title><rect x="97.3089%" y="245" width="0.0500%" height="15" fill="rgb(230,79,15)" fg:x="107104" fg:w="55"/><text x="97.5589%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (27 samples, 0.02%)</title><rect x="97.3343%" y="229" width="0.0245%" height="15" fill="rgb(213,57,13)" fg:x="107132" fg:w="27"/><text x="97.5843%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_add (27 samples, 0.02%)</title><rect x="97.3343%" y="213" width="0.0245%" height="15" fill="rgb(222,116,39)" fg:x="107132" fg:w="27"/><text x="97.5843%" y="223.50"></text></g><g><title>async_executor::Sleepers::update (20 samples, 0.02%)</title><rect x="97.3607%" y="277" width="0.0182%" height="15" fill="rgb(245,107,2)" fg:x="107161" fg:w="20"/><text x="97.6107%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (32 samples, 0.03%)</title><rect x="97.3788%" y="277" width="0.0291%" height="15" fill="rgb(238,1,10)" fg:x="107181" fg:w="32"/><text x="97.6288%" y="287.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.03%)</title><rect x="97.3788%" y="261" width="0.0291%" height="15" fill="rgb(249,4,48)" fg:x="107181" fg:w="32"/><text x="97.6288%" y="271.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (31 samples, 0.03%)</title><rect x="97.3798%" y="245" width="0.0282%" height="15" fill="rgb(223,151,18)" fg:x="107182" fg:w="31"/><text x="97.6298%" y="255.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (30 samples, 0.03%)</title><rect x="97.3807%" y="229" width="0.0273%" height="15" fill="rgb(227,65,43)" fg:x="107183" fg:w="30"/><text x="97.6307%" y="239.50"></text></g><g><title>__GI___pthread_mutex_unlock (30 samples, 0.03%)</title><rect x="97.3807%" y="213" width="0.0273%" height="15" fill="rgb(218,40,45)" fg:x="107183" fg:w="30"/><text x="97.6307%" y="223.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (427 samples, 0.39%)</title><rect x="97.0563%" y="405" width="0.3879%" height="15" fill="rgb(252,121,31)" fg:x="106826" fg:w="427"/><text x="97.3063%" y="415.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (415 samples, 0.38%)</title><rect x="97.0672%" y="389" width="0.3770%" height="15" fill="rgb(219,158,43)" fg:x="106838" fg:w="415"/><text x="97.3172%" y="399.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}} (415 samples, 0.38%)</title><rect x="97.0672%" y="373" width="0.3770%" height="15" fill="rgb(231,162,42)" fg:x="106838" fg:w="415"/><text x="97.3172%" y="383.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (409 samples, 0.37%)</title><rect x="97.0727%" y="357" width="0.3716%" height="15" fill="rgb(217,179,25)" fg:x="106844" fg:w="409"/><text x="97.3227%" y="367.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (409 samples, 0.37%)</title><rect x="97.0727%" y="341" width="0.3716%" height="15" fill="rgb(206,212,31)" fg:x="106844" fg:w="409"/><text x="97.3227%" y="351.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (406 samples, 0.37%)</title><rect x="97.0754%" y="325" width="0.3689%" height="15" fill="rgb(235,144,12)" fg:x="106847" fg:w="406"/><text x="97.3254%" y="335.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (404 samples, 0.37%)</title><rect x="97.0772%" y="309" width="0.3671%" height="15" fill="rgb(213,51,10)" fg:x="106849" fg:w="404"/><text x="97.3272%" y="319.50"></text></g><g><title>async_executor::Ticker::sleep (94 samples, 0.09%)</title><rect x="97.3589%" y="293" width="0.0854%" height="15" fill="rgb(231,145,14)" fg:x="107159" fg:w="94"/><text x="97.6089%" y="303.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (40 samples, 0.04%)</title><rect x="97.4079%" y="277" width="0.0363%" height="15" fill="rgb(235,15,28)" fg:x="107213" fg:w="40"/><text x="97.6579%" y="287.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (39 samples, 0.04%)</title><rect x="97.4088%" y="261" width="0.0354%" height="15" fill="rgb(237,206,10)" fg:x="107214" fg:w="39"/><text x="97.6588%" y="271.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (39 samples, 0.04%)</title><rect x="97.4088%" y="245" width="0.0354%" height="15" fill="rgb(236,227,27)" fg:x="107214" fg:w="39"/><text x="97.6588%" y="255.50"></text></g><g><title>__GI___pthread_mutex_lock (39 samples, 0.04%)</title><rect x="97.4088%" y="229" width="0.0354%" height="15" fill="rgb(246,83,35)" fg:x="107214" fg:w="39"/><text x="97.6588%" y="239.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (28 samples, 0.03%)</title><rect x="97.4897%" y="341" width="0.0254%" height="15" fill="rgb(220,136,24)" fg:x="107303" fg:w="28"/><text x="97.7397%" y="351.50"></text></g><g><title>core::mem::replace (28 samples, 0.03%)</title><rect x="97.4897%" y="325" width="0.0254%" height="15" fill="rgb(217,3,25)" fg:x="107303" fg:w="28"/><text x="97.7397%" y="335.50"></text></g><g><title>core::ptr::read (28 samples, 0.03%)</title><rect x="97.4897%" y="309" width="0.0254%" height="15" fill="rgb(239,24,14)" fg:x="107303" fg:w="28"/><text x="97.7397%" y="319.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (43 samples, 0.04%)</title><rect x="97.4833%" y="357" width="0.0391%" height="15" fill="rgb(244,16,53)" fg:x="107296" fg:w="43"/><text x="97.7333%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (39 samples, 0.04%)</title><rect x="97.5224%" y="357" width="0.0354%" height="15" fill="rgb(208,175,44)" fg:x="107339" fg:w="39"/><text x="97.7724%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (38 samples, 0.03%)</title><rect x="97.5233%" y="341" width="0.0345%" height="15" fill="rgb(252,18,48)" fg:x="107340" fg:w="38"/><text x="97.7733%" y="351.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 0.03%)</title><rect x="97.5233%" y="325" width="0.0345%" height="15" fill="rgb(234,199,32)" fg:x="107340" fg:w="38"/><text x="97.7733%" y="335.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (34 samples, 0.03%)</title><rect x="97.5269%" y="309" width="0.0309%" height="15" fill="rgb(225,77,54)" fg:x="107344" fg:w="34"/><text x="97.7769%" y="319.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (32 samples, 0.03%)</title><rect x="97.5288%" y="293" width="0.0291%" height="15" fill="rgb(225,42,25)" fg:x="107346" fg:w="32"/><text x="97.7788%" y="303.50"></text></g><g><title>__GI___pthread_mutex_unlock (31 samples, 0.03%)</title><rect x="97.5297%" y="277" width="0.0282%" height="15" fill="rgb(242,227,46)" fg:x="107347" fg:w="31"/><text x="97.7797%" y="287.50"></text></g><g><title>core::task::wake::Waker::will_wake (20 samples, 0.02%)</title><rect x="97.5578%" y="357" width="0.0182%" height="15" fill="rgb(246,197,35)" fg:x="107378" fg:w="20"/><text x="97.8078%" y="367.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (20 samples, 0.02%)</title><rect x="97.5578%" y="341" width="0.0182%" height="15" fill="rgb(215,159,26)" fg:x="107378" fg:w="20"/><text x="97.8078%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (17 samples, 0.02%)</title><rect x="97.5606%" y="325" width="0.0154%" height="15" fill="rgb(212,194,50)" fg:x="107381" fg:w="17"/><text x="97.8106%" y="335.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (17 samples, 0.02%)</title><rect x="97.5606%" y="309" width="0.0154%" height="15" fill="rgb(246,132,1)" fg:x="107381" fg:w="17"/><text x="97.8106%" y="319.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (243 samples, 0.22%)</title><rect x="97.4706%" y="373" width="0.2208%" height="15" fill="rgb(217,71,7)" fg:x="107282" fg:w="243"/><text x="97.7206%" y="383.50"></text></g><g><title>event_listener::Inner::lock (127 samples, 0.12%)</title><rect x="97.5760%" y="357" width="0.1154%" height="15" fill="rgb(252,59,32)" fg:x="107398" fg:w="127"/><text x="97.8260%" y="367.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (125 samples, 0.11%)</title><rect x="97.5778%" y="341" width="0.1136%" height="15" fill="rgb(253,204,25)" fg:x="107400" fg:w="125"/><text x="97.8278%" y="351.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (124 samples, 0.11%)</title><rect x="97.5787%" y="325" width="0.1127%" height="15" fill="rgb(232,21,16)" fg:x="107401" fg:w="124"/><text x="97.8287%" y="335.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (111 samples, 0.10%)</title><rect x="97.5905%" y="309" width="0.1008%" height="15" fill="rgb(248,90,29)" fg:x="107414" fg:w="111"/><text x="97.8405%" y="319.50"></text></g><g><title>__GI___pthread_mutex_lock (111 samples, 0.10%)</title><rect x="97.5905%" y="293" width="0.1008%" height="15" fill="rgb(249,223,7)" fg:x="107414" fg:w="111"/><text x="97.8405%" y="303.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (769 samples, 0.70%)</title><rect x="97.0509%" y="421" width="0.6987%" height="15" fill="rgb(231,119,42)" fg:x="106820" fg:w="769"/><text x="97.3009%" y="431.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}} (336 samples, 0.31%)</title><rect x="97.4443%" y="405" width="0.3053%" height="15" fill="rgb(215,41,35)" fg:x="107253" fg:w="336"/><text x="97.6943%" y="415.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (320 samples, 0.29%)</title><rect x="97.4588%" y="389" width="0.2907%" height="15" fill="rgb(220,44,45)" fg:x="107269" fg:w="320"/><text x="97.7088%" y="399.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (64 samples, 0.06%)</title><rect x="97.6914%" y="373" width="0.0581%" height="15" fill="rgb(253,197,36)" fg:x="107525" fg:w="64"/><text x="97.9414%" y="383.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (63 samples, 0.06%)</title><rect x="97.6923%" y="357" width="0.0572%" height="15" fill="rgb(245,225,54)" fg:x="107526" fg:w="63"/><text x="97.9423%" y="367.50"></text></g><g><title>concurrent_queue::single::Single&lt;T&gt;::pop (39 samples, 0.04%)</title><rect x="97.7141%" y="341" width="0.0354%" height="15" fill="rgb(239,94,37)" fg:x="107550" fg:w="39"/><text x="97.9641%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (36 samples, 0.03%)</title><rect x="97.7168%" y="325" width="0.0327%" height="15" fill="rgb(242,217,10)" fg:x="107553" fg:w="36"/><text x="97.9668%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (36 samples, 0.03%)</title><rect x="97.7168%" y="309" width="0.0327%" height="15" fill="rgb(250,193,7)" fg:x="107553" fg:w="36"/><text x="97.9668%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (36 samples, 0.03%)</title><rect x="97.7168%" y="293" width="0.0327%" height="15" fill="rgb(230,104,19)" fg:x="107553" fg:w="36"/><text x="97.9668%" y="303.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (774 samples, 0.70%)</title><rect x="97.0481%" y="437" width="0.7032%" height="15" fill="rgb(230,181,4)" fg:x="106817" fg:w="774"/><text x="97.2981%" y="447.50"></text></g><g><title>async_executor::Executor::state (19 samples, 0.02%)</title><rect x="97.7513%" y="437" width="0.0173%" height="15" fill="rgb(216,219,49)" fg:x="107591" fg:w="19"/><text x="98.0013%" y="447.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (19 samples, 0.02%)</title><rect x="97.7513%" y="421" width="0.0173%" height="15" fill="rgb(254,144,0)" fg:x="107591" fg:w="19"/><text x="98.0013%" y="431.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (19 samples, 0.02%)</title><rect x="97.7513%" y="405" width="0.0173%" height="15" fill="rgb(205,209,38)" fg:x="107591" fg:w="19"/><text x="98.0013%" y="415.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (19 samples, 0.02%)</title><rect x="97.7513%" y="389" width="0.0173%" height="15" fill="rgb(240,21,42)" fg:x="107591" fg:w="19"/><text x="98.0013%" y="399.50"></text></g><g><title>once_cell::imp::initialize_or_wait (19 samples, 0.02%)</title><rect x="97.7513%" y="373" width="0.0173%" height="15" fill="rgb(241,132,3)" fg:x="107591" fg:w="19"/><text x="98.0013%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (19 samples, 0.02%)</title><rect x="97.7513%" y="357" width="0.0173%" height="15" fill="rgb(225,14,2)" fg:x="107591" fg:w="19"/><text x="98.0013%" y="367.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (19 samples, 0.02%)</title><rect x="97.7513%" y="341" width="0.0173%" height="15" fill="rgb(210,141,35)" fg:x="107591" fg:w="19"/><text x="98.0013%" y="351.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (19 samples, 0.02%)</title><rect x="97.7513%" y="325" width="0.0173%" height="15" fill="rgb(251,14,44)" fg:x="107591" fg:w="19"/><text x="98.0013%" y="335.50"></text></g><g><title>async_executor::Executor::state::{{closure}} (19 samples, 0.02%)</title><rect x="97.7513%" y="309" width="0.0173%" height="15" fill="rgb(247,48,18)" fg:x="107591" fg:w="19"/><text x="98.0013%" y="319.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (7,740 samples, 7.03%)</title><rect x="90.7419%" y="517" width="7.0321%" height="15" fill="rgb(225,0,40)" fg:x="99876" fg:w="7740"/><text x="90.9919%" y="527.50">&lt;futures_..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,702 samples, 7.00%)</title><rect x="90.7764%" y="501" width="6.9976%" height="15" fill="rgb(221,31,33)" fg:x="99914" fg:w="7702"/><text x="91.0264%" y="511.50">&lt;core::fu..</text></g><g><title>async_executor::LocalExecutor::run::{{closure}} (853 samples, 0.77%)</title><rect x="96.9991%" y="485" width="0.7750%" height="15" fill="rgb(237,42,40)" fg:x="106763" fg:w="853"/><text x="97.2491%" y="495.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (803 samples, 0.73%)</title><rect x="97.0445%" y="469" width="0.7296%" height="15" fill="rgb(233,51,29)" fg:x="106813" fg:w="803"/><text x="97.2945%" y="479.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (803 samples, 0.73%)</title><rect x="97.0445%" y="453" width="0.7296%" height="15" fill="rgb(226,58,20)" fg:x="106813" fg:w="803"/><text x="97.2945%" y="463.50"></text></g><g><title>async_io::reactor::Reactor::try_lock (150 samples, 0.14%)</title><rect x="97.7831%" y="517" width="0.1363%" height="15" fill="rgb(208,98,7)" fg:x="107626" fg:w="150"/><text x="98.0331%" y="527.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (150 samples, 0.14%)</title><rect x="97.7831%" y="501" width="0.1363%" height="15" fill="rgb(228,143,44)" fg:x="107626" fg:w="150"/><text x="98.0331%" y="511.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (148 samples, 0.13%)</title><rect x="97.7850%" y="485" width="0.1345%" height="15" fill="rgb(246,55,38)" fg:x="107628" fg:w="148"/><text x="98.0350%" y="495.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::try_lock (142 samples, 0.13%)</title><rect x="97.7904%" y="469" width="0.1290%" height="15" fill="rgb(247,87,16)" fg:x="107634" fg:w="142"/><text x="98.0404%" y="479.50"></text></g><g><title>__GI___pthread_mutex_trylock (142 samples, 0.13%)</title><rect x="97.7904%" y="453" width="0.1290%" height="15" fill="rgb(234,129,42)" fg:x="107634" fg:w="142"/><text x="98.0404%" y="463.50"></text></g><g><title>sn_rust_dealloc (12 samples, 0.01%)</title><rect x="97.9385%" y="341" width="0.0109%" height="15" fill="rgb(220,82,16)" fg:x="107797" fg:w="12"/><text x="98.1885%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 0.01%)</title><rect x="97.9367%" y="405" width="0.0145%" height="15" fill="rgb(211,88,4)" fg:x="107795" fg:w="16"/><text x="98.1867%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 0.01%)</title><rect x="97.9367%" y="389" width="0.0145%" height="15" fill="rgb(248,151,21)" fg:x="107795" fg:w="16"/><text x="98.1867%" y="399.50"></text></g><g><title>__rg_dealloc (16 samples, 0.01%)</title><rect x="97.9367%" y="373" width="0.0145%" height="15" fill="rgb(238,163,6)" fg:x="107795" fg:w="16"/><text x="98.1867%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (16 samples, 0.01%)</title><rect x="97.9367%" y="357" width="0.0145%" height="15" fill="rgb(209,183,11)" fg:x="107795" fg:w="16"/><text x="98.1867%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.02%)</title><rect x="97.9349%" y="485" width="0.0173%" height="15" fill="rgb(219,37,20)" fg:x="107793" fg:w="19"/><text x="98.1849%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V&gt;::dying_next (17 samples, 0.02%)</title><rect x="97.9367%" y="469" width="0.0154%" height="15" fill="rgb(210,158,4)" fg:x="107795" fg:w="17"/><text x="98.1867%" y="479.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (17 samples, 0.02%)</title><rect x="97.9367%" y="453" width="0.0154%" height="15" fill="rgb(221,167,53)" fg:x="107795" fg:w="17"/><text x="98.1867%" y="463.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (17 samples, 0.02%)</title><rect x="97.9367%" y="437" width="0.0154%" height="15" fill="rgb(237,151,45)" fg:x="107795" fg:w="17"/><text x="98.1867%" y="447.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (17 samples, 0.02%)</title><rect x="97.9367%" y="421" width="0.0154%" height="15" fill="rgb(231,39,3)" fg:x="107795" fg:w="17"/><text x="98.1867%" y="431.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::Edge&gt;::move_suffix (15 samples, 0.01%)</title><rect x="97.9703%" y="453" width="0.0136%" height="15" fill="rgb(212,167,28)" fg:x="107832" fg:w="15"/><text x="98.2203%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::split_off (68 samples, 0.06%)</title><rect x="97.9612%" y="485" width="0.0618%" height="15" fill="rgb(232,178,8)" fg:x="107822" fg:w="68"/><text x="98.2112%" y="495.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::split_off (65 samples, 0.06%)</title><rect x="97.9639%" y="469" width="0.0591%" height="15" fill="rgb(225,151,20)" fg:x="107825" fg:w="65"/><text x="98.2139%" y="479.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::new_pillar (34 samples, 0.03%)</title><rect x="97.9921%" y="453" width="0.0309%" height="15" fill="rgb(238,3,37)" fg:x="107856" fg:w="34"/><text x="98.2421%" y="463.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (34 samples, 0.03%)</title><rect x="97.9921%" y="437" width="0.0309%" height="15" fill="rgb(251,147,42)" fg:x="107856" fg:w="34"/><text x="98.2421%" y="447.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (34 samples, 0.03%)</title><rect x="97.9921%" y="421" width="0.0309%" height="15" fill="rgb(208,173,10)" fg:x="107856" fg:w="34"/><text x="98.2421%" y="431.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (34 samples, 0.03%)</title><rect x="97.9921%" y="405" width="0.0309%" height="15" fill="rgb(246,225,4)" fg:x="107856" fg:w="34"/><text x="98.2421%" y="415.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new_uninit (34 samples, 0.03%)</title><rect x="97.9921%" y="389" width="0.0309%" height="15" fill="rgb(248,102,6)" fg:x="107856" fg:w="34"/><text x="98.2421%" y="399.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (34 samples, 0.03%)</title><rect x="97.9921%" y="373" width="0.0309%" height="15" fill="rgb(232,6,21)" fg:x="107856" fg:w="34"/><text x="98.2421%" y="383.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (34 samples, 0.03%)</title><rect x="97.9921%" y="357" width="0.0309%" height="15" fill="rgb(221,179,22)" fg:x="107856" fg:w="34"/><text x="98.2421%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (34 samples, 0.03%)</title><rect x="97.9921%" y="341" width="0.0309%" height="15" fill="rgb(252,50,20)" fg:x="107856" fg:w="34"/><text x="98.2421%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (34 samples, 0.03%)</title><rect x="97.9921%" y="325" width="0.0309%" height="15" fill="rgb(222,56,38)" fg:x="107856" fg:w="34"/><text x="98.2421%" y="335.50"></text></g><g><title>alloc::alloc::alloc (34 samples, 0.03%)</title><rect x="97.9921%" y="309" width="0.0309%" height="15" fill="rgb(206,193,29)" fg:x="107856" fg:w="34"/><text x="98.2421%" y="319.50"></text></g><g><title>__rg_alloc (34 samples, 0.03%)</title><rect x="97.9921%" y="293" width="0.0309%" height="15" fill="rgb(239,192,45)" fg:x="107856" fg:w="34"/><text x="98.2421%" y="303.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (34 samples, 0.03%)</title><rect x="97.9921%" y="277" width="0.0309%" height="15" fill="rgb(254,18,36)" fg:x="107856" fg:w="34"/><text x="98.2421%" y="287.50"></text></g><g><title>sn_rust_alloc (34 samples, 0.03%)</title><rect x="97.9921%" y="261" width="0.0309%" height="15" fill="rgb(221,127,11)" fg:x="107856" fg:w="34"/><text x="98.2421%" y="271.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (21 samples, 0.02%)</title><rect x="98.0294%" y="469" width="0.0191%" height="15" fill="rgb(234,146,35)" fg:x="107897" fg:w="21"/><text x="98.2794%" y="479.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (21 samples, 0.02%)</title><rect x="98.0294%" y="453" width="0.0191%" height="15" fill="rgb(254,201,37)" fg:x="107897" fg:w="21"/><text x="98.2794%" y="463.50"></text></g><g><title>async_io::reactor::Reactor::process_timer_ops (29 samples, 0.03%)</title><rect x="98.0230%" y="485" width="0.0263%" height="15" fill="rgb(211,202,23)" fg:x="107890" fg:w="29"/><text x="98.2730%" y="495.50"></text></g><g><title>core::mem::drop (59 samples, 0.05%)</title><rect x="98.0494%" y="485" width="0.0536%" height="15" fill="rgb(237,91,2)" fg:x="107919" fg:w="59"/><text x="98.2994%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::collections::btree::map::BTreeMap&lt;(std::time::Instant,usize),core::task::wake::Waker&gt;&gt;&gt; (59 samples, 0.05%)</title><rect x="98.0494%" y="469" width="0.0536%" height="15" fill="rgb(226,228,36)" fg:x="107919" fg:w="59"/><text x="98.2994%" y="479.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (59 samples, 0.05%)</title><rect x="98.0494%" y="453" width="0.0536%" height="15" fill="rgb(213,63,50)" fg:x="107919" fg:w="59"/><text x="98.2994%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (59 samples, 0.05%)</title><rect x="98.0494%" y="437" width="0.0536%" height="15" fill="rgb(235,194,19)" fg:x="107919" fg:w="59"/><text x="98.2994%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (53 samples, 0.05%)</title><rect x="98.0548%" y="421" width="0.0482%" height="15" fill="rgb(207,204,18)" fg:x="107925" fg:w="53"/><text x="98.3048%" y="431.50"></text></g><g><title>__GI___pthread_mutex_unlock (53 samples, 0.05%)</title><rect x="98.0548%" y="405" width="0.0482%" height="15" fill="rgb(248,8,7)" fg:x="107925" fg:w="53"/><text x="98.3048%" y="415.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (27 samples, 0.02%)</title><rect x="98.1111%" y="485" width="0.0245%" height="15" fill="rgb(223,145,47)" fg:x="107987" fg:w="27"/><text x="98.3611%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (26 samples, 0.02%)</title><rect x="98.1120%" y="469" width="0.0236%" height="15" fill="rgb(228,84,11)" fg:x="107988" fg:w="26"/><text x="98.3620%" y="479.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (26 samples, 0.02%)</title><rect x="98.1120%" y="453" width="0.0236%" height="15" fill="rgb(218,76,45)" fg:x="107988" fg:w="26"/><text x="98.3620%" y="463.50"></text></g><g><title>__GI___pthread_mutex_lock (26 samples, 0.02%)</title><rect x="98.1120%" y="437" width="0.0236%" height="15" fill="rgb(223,80,15)" fg:x="107988" fg:w="26"/><text x="98.3620%" y="447.50"></text></g><g><title>async_io::reactor::Reactor::process_timers (266 samples, 0.24%)</title><rect x="97.9285%" y="501" width="0.2417%" height="15" fill="rgb(219,218,33)" fg:x="107786" fg:w="266"/><text x="98.1785%" y="511.50"></text></g><g><title>std::time::Instant::now (38 samples, 0.03%)</title><rect x="98.1357%" y="485" width="0.0345%" height="15" fill="rgb(208,51,11)" fg:x="108014" fg:w="38"/><text x="98.3857%" y="495.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (38 samples, 0.03%)</title><rect x="98.1357%" y="469" width="0.0345%" height="15" fill="rgb(229,165,39)" fg:x="108014" fg:w="38"/><text x="98.3857%" y="479.50"></text></g><g><title>std::sys::unix::time::inner::now (38 samples, 0.03%)</title><rect x="98.1357%" y="453" width="0.0345%" height="15" fill="rgb(241,100,24)" fg:x="108014" fg:w="38"/><text x="98.3857%" y="463.50"></text></g><g><title>__clock_gettime (38 samples, 0.03%)</title><rect x="98.1357%" y="437" width="0.0345%" height="15" fill="rgb(228,14,23)" fg:x="108014" fg:w="38"/><text x="98.3857%" y="447.50"></text></g><g><title>__vdso_clock_gettime (31 samples, 0.03%)</title><rect x="98.1420%" y="421" width="0.0282%" height="15" fill="rgb(247,116,52)" fg:x="108021" fg:w="31"/><text x="98.3920%" y="431.50"></text></g><g><title>[[vdso]] (26 samples, 0.02%)</title><rect x="98.1466%" y="405" width="0.0236%" height="15" fill="rgb(216,149,33)" fg:x="108026" fg:w="26"/><text x="98.3966%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;polling::epoll::Events&gt;&gt; (28 samples, 0.03%)</title><rect x="98.1965%" y="485" width="0.0254%" height="15" fill="rgb(238,142,29)" fg:x="108081" fg:w="28"/><text x="98.4465%" y="495.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.03%)</title><rect x="98.1965%" y="469" width="0.0254%" height="15" fill="rgb(224,83,40)" fg:x="108081" fg:w="28"/><text x="98.4465%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (27 samples, 0.02%)</title><rect x="98.1974%" y="453" width="0.0245%" height="15" fill="rgb(234,165,11)" fg:x="108082" fg:w="27"/><text x="98.4474%" y="463.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (27 samples, 0.02%)</title><rect x="98.1974%" y="437" width="0.0245%" height="15" fill="rgb(215,96,23)" fg:x="108082" fg:w="27"/><text x="98.4474%" y="447.50"></text></g><g><title>__GI___pthread_mutex_unlock (27 samples, 0.02%)</title><rect x="98.1974%" y="421" width="0.0245%" height="15" fill="rgb(233,179,26)" fg:x="108082" fg:w="27"/><text x="98.4474%" y="431.50"></text></g><g><title>__libc_read (56 samples, 0.05%)</title><rect x="98.2620%" y="469" width="0.0509%" height="15" fill="rgb(225,129,33)" fg:x="108153" fg:w="56"/><text x="98.5120%" y="479.50"></text></g><g><title>__pthread_enable_asynccancel (32 samples, 0.03%)</title><rect x="98.2838%" y="453" width="0.0291%" height="15" fill="rgb(237,49,13)" fg:x="108177" fg:w="32"/><text x="98.5338%" y="463.50"></text></g><g><title>epoll_wait (108 samples, 0.10%)</title><rect x="98.3128%" y="469" width="0.0981%" height="15" fill="rgb(211,3,31)" fg:x="108209" fg:w="108"/><text x="98.5628%" y="479.50"></text></g><g><title>[libc-2.31.so] (24 samples, 0.02%)</title><rect x="98.3891%" y="453" width="0.0218%" height="15" fill="rgb(216,152,19)" fg:x="108293" fg:w="24"/><text x="98.6391%" y="463.50"></text></g><g><title>polling::epoll::Poller::modify (35 samples, 0.03%)</title><rect x="98.4155%" y="469" width="0.0318%" height="15" fill="rgb(251,121,35)" fg:x="108322" fg:w="35"/><text x="98.6655%" y="479.50"></text></g><g><title>polling::epoll::Poller::ctl (33 samples, 0.03%)</title><rect x="98.4173%" y="453" width="0.0300%" height="15" fill="rgb(210,217,47)" fg:x="108324" fg:w="33"/><text x="98.6673%" y="463.50"></text></g><g><title>epoll_ctl (31 samples, 0.03%)</title><rect x="98.4191%" y="437" width="0.0282%" height="15" fill="rgb(244,116,22)" fg:x="108326" fg:w="31"/><text x="98.6691%" y="447.50"></text></g><g><title>polling::epoll::Poller::wait (259 samples, 0.24%)</title><rect x="98.2238%" y="485" width="0.2353%" height="15" fill="rgb(228,17,21)" fg:x="108111" fg:w="259"/><text x="98.4738%" y="495.50"></text></g><g><title>syscall (13 samples, 0.01%)</title><rect x="98.4473%" y="469" width="0.0118%" height="15" fill="rgb(240,149,34)" fg:x="108357" fg:w="13"/><text x="98.6973%" y="479.50"></text></g><g><title>async_io::reactor::ReactorLock::react (607 samples, 0.55%)</title><rect x="97.9194%" y="517" width="0.5515%" height="15" fill="rgb(208,125,47)" fg:x="107776" fg:w="607"/><text x="98.1694%" y="527.50"></text></g><g><title>polling::Poller::wait (321 samples, 0.29%)</title><rect x="98.1793%" y="501" width="0.2916%" height="15" fill="rgb(249,186,39)" fg:x="108062" fg:w="321"/><text x="98.4293%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (13 samples, 0.01%)</title><rect x="98.4591%" y="485" width="0.0118%" height="15" fill="rgb(240,220,33)" fg:x="108370" fg:w="13"/><text x="98.7091%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (13 samples, 0.01%)</title><rect x="98.4591%" y="469" width="0.0118%" height="15" fill="rgb(243,110,23)" fg:x="108370" fg:w="13"/><text x="98.7091%" y="479.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::try_lock (12 samples, 0.01%)</title><rect x="98.4600%" y="453" width="0.0109%" height="15" fill="rgb(219,163,46)" fg:x="108371" fg:w="12"/><text x="98.7100%" y="463.50"></text></g><g><title>__GI___pthread_mutex_trylock (12 samples, 0.01%)</title><rect x="98.4600%" y="437" width="0.0109%" height="15" fill="rgb(216,126,30)" fg:x="108371" fg:w="12"/><text x="98.7100%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_io::driver::CallOnDrop&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (12 samples, 0.01%)</title><rect x="98.4709%" y="517" width="0.0109%" height="15" fill="rgb(208,139,11)" fg:x="108383" fg:w="12"/><text x="98.7209%" y="527.50"></text></g><g><title>&lt;async_io::driver::CallOnDrop&lt;F&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.01%)</title><rect x="98.4709%" y="501" width="0.0109%" height="15" fill="rgb(213,118,36)" fg:x="108383" fg:w="12"/><text x="98.7209%" y="511.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (12 samples, 0.01%)</title><rect x="98.4709%" y="485" width="0.0109%" height="15" fill="rgb(226,43,17)" fg:x="108383" fg:w="12"/><text x="98.7209%" y="495.50"></text></g><g><title>__GI___pthread_mutex_unlock (78 samples, 0.07%)</title><rect x="98.5182%" y="485" width="0.0709%" height="15" fill="rgb(254,217,4)" fg:x="108435" fg:w="78"/><text x="98.7682%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (89 samples, 0.08%)</title><rect x="98.5899%" y="485" width="0.0809%" height="15" fill="rgb(210,134,47)" fg:x="108514" fg:w="89"/><text x="98.8399%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (89 samples, 0.08%)</title><rect x="98.5899%" y="469" width="0.0809%" height="15" fill="rgb(237,24,49)" fg:x="108514" fg:w="89"/><text x="98.8399%" y="479.50"></text></g><g><title>std::sync::poison::Flag::get (81 samples, 0.07%)</title><rect x="98.6708%" y="469" width="0.0736%" height="15" fill="rgb(251,39,46)" fg:x="108603" fg:w="81"/><text x="98.9208%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (81 samples, 0.07%)</title><rect x="98.6708%" y="453" width="0.0736%" height="15" fill="rgb(251,220,3)" fg:x="108603" fg:w="81"/><text x="98.9208%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_load (79 samples, 0.07%)</title><rect x="98.6726%" y="437" width="0.0718%" height="15" fill="rgb(228,105,12)" fg:x="108605" fg:w="79"/><text x="98.9226%" y="447.50"></text></g><g><title>__pthread_disable_asynccancel (54 samples, 0.05%)</title><rect x="99.1787%" y="421" width="0.0491%" height="15" fill="rgb(215,196,1)" fg:x="109162" fg:w="54"/><text x="99.4287%" y="431.50"></text></g><g><title>__pthread_enable_asynccancel (14 samples, 0.01%)</title><rect x="99.2277%" y="421" width="0.0127%" height="15" fill="rgb(214,33,39)" fg:x="109216" fg:w="14"/><text x="99.4777%" y="431.50"></text></g><g><title>__pthread_mutex_cond_lock (42 samples, 0.04%)</title><rect x="99.2405%" y="421" width="0.0382%" height="15" fill="rgb(220,19,52)" fg:x="109230" fg:w="42"/><text x="99.4905%" y="431.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::wait (601 samples, 0.55%)</title><rect x="98.7444%" y="453" width="0.5460%" height="15" fill="rgb(221,78,38)" fg:x="108684" fg:w="601"/><text x="98.9944%" y="463.50"></text></g><g><title>__pthread_cond_wait (601 samples, 0.55%)</title><rect x="98.7444%" y="437" width="0.5460%" height="15" fill="rgb(253,30,16)" fg:x="108684" fg:w="601"/><text x="98.9944%" y="447.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (13 samples, 0.01%)</title><rect x="99.2786%" y="421" width="0.0118%" height="15" fill="rgb(242,65,0)" fg:x="109272" fg:w="13"/><text x="99.5286%" y="431.50"></text></g><g><title>std::sync::condvar::Condvar::wait (695 samples, 0.63%)</title><rect x="98.6708%" y="485" width="0.6314%" height="15" fill="rgb(235,201,12)" fg:x="108603" fg:w="695"/><text x="98.9208%" y="495.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (614 samples, 0.56%)</title><rect x="98.7444%" y="469" width="0.5578%" height="15" fill="rgb(233,161,9)" fg:x="108684" fg:w="614"/><text x="98.9944%" y="479.50"></text></g><g><title>std::sys_common::condvar::check::SameMutexCheck::verify (13 samples, 0.01%)</title><rect x="99.2904%" y="453" width="0.0118%" height="15" fill="rgb(241,207,41)" fg:x="109285" fg:w="13"/><text x="99.5404%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::compare_exchange (13 samples, 0.01%)</title><rect x="99.2904%" y="437" width="0.0118%" height="15" fill="rgb(212,69,46)" fg:x="109285" fg:w="13"/><text x="99.5404%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (13 samples, 0.01%)</title><rect x="99.2904%" y="421" width="0.0118%" height="15" fill="rgb(239,69,45)" fg:x="109285" fg:w="13"/><text x="99.5404%" y="431.50"></text></g><g><title>parking::Parker::park (904 samples, 0.82%)</title><rect x="98.5073%" y="517" width="0.8213%" height="15" fill="rgb(242,117,48)" fg:x="108423" fg:w="904"/><text x="98.7573%" y="527.50"></text></g><g><title>parking::Inner::park (901 samples, 0.82%)</title><rect x="98.5100%" y="501" width="0.8186%" height="15" fill="rgb(228,41,36)" fg:x="108426" fg:w="901"/><text x="98.7600%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (29 samples, 0.03%)</title><rect x="99.3022%" y="485" width="0.0263%" height="15" fill="rgb(212,3,32)" fg:x="109298" fg:w="29"/><text x="99.5522%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (28 samples, 0.03%)</title><rect x="99.3031%" y="469" width="0.0254%" height="15" fill="rgb(233,41,49)" fg:x="109299" fg:w="28"/><text x="99.5531%" y="479.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (27 samples, 0.02%)</title><rect x="99.3041%" y="453" width="0.0245%" height="15" fill="rgb(252,170,49)" fg:x="109300" fg:w="27"/><text x="99.5541%" y="463.50"></text></g><g><title>__GI___pthread_mutex_lock (27 samples, 0.02%)</title><rect x="99.3041%" y="437" width="0.0245%" height="15" fill="rgb(229,53,26)" fg:x="109300" fg:w="27"/><text x="99.5541%" y="447.50"></text></g><g><title>parking::Parker::park_timeout (149 samples, 0.14%)</title><rect x="99.3286%" y="517" width="0.1354%" height="15" fill="rgb(217,157,12)" fg:x="109327" fg:w="149"/><text x="99.5786%" y="527.50"></text></g><g><title>parking::Inner::park (117 samples, 0.11%)</title><rect x="99.3577%" y="501" width="0.1063%" height="15" fill="rgb(227,17,9)" fg:x="109359" fg:w="117"/><text x="99.6077%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (112 samples, 0.10%)</title><rect x="99.3622%" y="485" width="0.1018%" height="15" fill="rgb(218,84,12)" fg:x="109364" fg:w="112"/><text x="99.6122%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (112 samples, 0.10%)</title><rect x="99.3622%" y="469" width="0.1018%" height="15" fill="rgb(212,79,24)" fg:x="109364" fg:w="112"/><text x="99.6122%" y="479.50"></text></g><g><title>std::panic::catch_unwind (9,664 samples, 8.78%)</title><rect x="90.7110%" y="677" width="8.7802%" height="15" fill="rgb(217,222,37)" fg:x="99842" fg:w="9664"/><text x="90.9610%" y="687.50">std::panic::..</text></g><g><title>std::panicking::try (9,664 samples, 8.78%)</title><rect x="90.7110%" y="661" width="8.7802%" height="15" fill="rgb(246,208,8)" fg:x="99842" fg:w="9664"/><text x="90.9610%" y="671.50">std::panicki..</text></g><g><title>std::panicking::try::do_call (9,664 samples, 8.78%)</title><rect x="90.7110%" y="645" width="8.7802%" height="15" fill="rgb(244,133,10)" fg:x="99842" fg:w="9664"/><text x="90.9610%" y="655.50">std::panicki..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (9,664 samples, 8.78%)</title><rect x="90.7110%" y="629" width="8.7802%" height="15" fill="rgb(209,219,41)" fg:x="99842" fg:w="9664"/><text x="90.9610%" y="639.50">async_global..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (9,664 samples, 8.78%)</title><rect x="90.7110%" y="613" width="8.7802%" height="15" fill="rgb(253,175,45)" fg:x="99842" fg:w="9664"/><text x="90.9610%" y="623.50">std::thread:..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (9,664 samples, 8.78%)</title><rect x="90.7110%" y="597" width="8.7802%" height="15" fill="rgb(235,100,37)" fg:x="99842" fg:w="9664"/><text x="90.9610%" y="607.50">std::thread:..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (9,664 samples, 8.78%)</title><rect x="90.7110%" y="581" width="8.7802%" height="15" fill="rgb(225,87,19)" fg:x="99842" fg:w="9664"/><text x="90.9610%" y="591.50">async_global..</text></g><g><title>async_global_executor::reactor::block_on (9,664 samples, 8.78%)</title><rect x="90.7110%" y="565" width="8.7802%" height="15" fill="rgb(217,152,17)" fg:x="99842" fg:w="9664"/><text x="90.9610%" y="575.50">async_global..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (9,664 samples, 8.78%)</title><rect x="90.7110%" y="549" width="8.7802%" height="15" fill="rgb(235,72,13)" fg:x="99842" fg:w="9664"/><text x="90.9610%" y="559.50">async_global..</text></g><g><title>async_io::driver::block_on (9,664 samples, 8.78%)</title><rect x="90.7110%" y="533" width="8.7802%" height="15" fill="rgb(233,140,18)" fg:x="99842" fg:w="9664"/><text x="90.9610%" y="543.50">async_io::dr..</text></g><g><title>std::time::Instant::now (21 samples, 0.02%)</title><rect x="99.4721%" y="517" width="0.0191%" height="15" fill="rgb(207,212,28)" fg:x="109485" fg:w="21"/><text x="99.7221%" y="527.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (21 samples, 0.02%)</title><rect x="99.4721%" y="501" width="0.0191%" height="15" fill="rgb(220,130,25)" fg:x="109485" fg:w="21"/><text x="99.7221%" y="511.50"></text></g><g><title>std::sys::unix::time::inner::now (21 samples, 0.02%)</title><rect x="99.4721%" y="485" width="0.0191%" height="15" fill="rgb(205,55,34)" fg:x="109485" fg:w="21"/><text x="99.7221%" y="495.50"></text></g><g><title>__clock_gettime (19 samples, 0.02%)</title><rect x="99.4740%" y="469" width="0.0173%" height="15" fill="rgb(237,54,35)" fg:x="109487" fg:w="19"/><text x="99.7240%" y="479.50"></text></g><g><title>__vdso_clock_gettime (18 samples, 0.02%)</title><rect x="99.4749%" y="453" width="0.0164%" height="15" fill="rgb(208,67,23)" fg:x="109488" fg:w="18"/><text x="99.7249%" y="463.50"></text></g><g><title>[[vdso]] (17 samples, 0.02%)</title><rect x="99.4758%" y="437" width="0.0154%" height="15" fill="rgb(206,207,50)" fg:x="109489" fg:w="17"/><text x="99.7258%" y="447.50"></text></g><g><title>std::panic::catch_unwind (9,673 samples, 8.79%)</title><rect x="90.7038%" y="805" width="8.7884%" height="15" fill="rgb(213,211,42)" fg:x="99834" fg:w="9673"/><text x="90.9538%" y="815.50">std::panic::..</text></g><g><title>std::panicking::try (9,673 samples, 8.79%)</title><rect x="90.7038%" y="789" width="8.7884%" height="15" fill="rgb(252,197,50)" fg:x="99834" fg:w="9673"/><text x="90.9538%" y="799.50">std::panicki..</text></g><g><title>std::panicking::try::do_call (9,673 samples, 8.79%)</title><rect x="90.7038%" y="773" width="8.7884%" height="15" fill="rgb(251,211,41)" fg:x="99834" fg:w="9673"/><text x="90.9538%" y="783.50">std::panicki..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (9,673 samples, 8.79%)</title><rect x="90.7038%" y="757" width="8.7884%" height="15" fill="rgb(229,211,5)" fg:x="99834" fg:w="9673"/><text x="90.9538%" y="767.50">&lt;core::panic..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (9,673 samples, 8.79%)</title><rect x="90.7038%" y="741" width="8.7884%" height="15" fill="rgb(239,36,31)" fg:x="99834" fg:w="9673"/><text x="90.9538%" y="751.50">std::thread:..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (9,673 samples, 8.79%)</title><rect x="90.7038%" y="725" width="8.7884%" height="15" fill="rgb(248,67,31)" fg:x="99834" fg:w="9673"/><text x="90.9538%" y="735.50">std::sys_com..</text></g><g><title>core::ops::function::FnOnce::call_once (9,673 samples, 8.79%)</title><rect x="90.7038%" y="709" width="8.7884%" height="15" fill="rgb(249,55,44)" fg:x="99834" fg:w="9673"/><text x="90.9538%" y="719.50">core::ops::f..</text></g><g><title>async_global_executor::threading::thread_main_loop (9,673 samples, 8.79%)</title><rect x="90.7038%" y="693" width="8.7884%" height="15" fill="rgb(216,82,12)" fg:x="99834" fg:w="9673"/><text x="90.9538%" y="703.50">async_global..</text></g><g><title>clone (9,683 samples, 8.80%)</title><rect x="90.6992%" y="917" width="8.7974%" height="15" fill="rgb(242,174,1)" fg:x="99829" fg:w="9683"/><text x="90.9492%" y="927.50">clone</text></g><g><title>start_thread (9,678 samples, 8.79%)</title><rect x="90.7038%" y="901" width="8.7929%" height="15" fill="rgb(208,120,29)" fg:x="99834" fg:w="9678"/><text x="90.9538%" y="911.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (9,678 samples, 8.79%)</title><rect x="90.7038%" y="885" width="8.7929%" height="15" fill="rgb(221,105,43)" fg:x="99834" fg:w="9678"/><text x="90.9538%" y="895.50">std::sys::un..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (9,678 samples, 8.79%)</title><rect x="90.7038%" y="869" width="8.7929%" height="15" fill="rgb(234,124,22)" fg:x="99834" fg:w="9678"/><text x="90.9538%" y="879.50">&lt;alloc::boxe..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (9,678 samples, 8.79%)</title><rect x="90.7038%" y="853" width="8.7929%" height="15" fill="rgb(212,23,30)" fg:x="99834" fg:w="9678"/><text x="90.9538%" y="863.50">&lt;alloc::boxe..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (9,678 samples, 8.79%)</title><rect x="90.7038%" y="837" width="8.7929%" height="15" fill="rgb(219,122,53)" fg:x="99834" fg:w="9678"/><text x="90.9538%" y="847.50">core::ops::f..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (9,678 samples, 8.79%)</title><rect x="90.7038%" y="821" width="8.7929%" height="15" fill="rgb(248,84,24)" fg:x="99834" fg:w="9678"/><text x="90.9538%" y="831.50">std::thread:..</text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (65 samples, 0.06%)</title><rect x="99.4967%" y="917" width="0.0591%" height="15" fill="rgb(245,115,18)" fg:x="109512" fg:w="65"/><text x="99.7467%" y="927.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (22 samples, 0.02%)</title><rect x="99.5748%" y="917" width="0.0200%" height="15" fill="rgb(227,176,51)" fg:x="109598" fg:w="22"/><text x="99.8248%" y="927.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (13 samples, 0.01%)</title><rect x="99.6048%" y="917" width="0.0118%" height="15" fill="rgb(229,63,42)" fg:x="109631" fg:w="13"/><text x="99.8548%" y="927.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (108 samples, 0.10%)</title><rect x="99.6184%" y="917" width="0.0981%" height="15" fill="rgb(247,202,24)" fg:x="109646" fg:w="108"/><text x="99.8684%" y="927.50"></text></g><g><title>async-std/runti (109,694 samples, 99.66%)</title><rect x="0.0600%" y="933" width="99.6620%" height="15" fill="rgb(244,173,20)" fg:x="66" fg:w="109694"/><text x="0.3100%" y="943.50">async-std/runti</text></g><g><title>blocking-3 (16 samples, 0.01%)</title><rect x="99.7220%" y="933" width="0.0145%" height="15" fill="rgb(242,81,47)" fg:x="109760" fg:w="16"/><text x="99.9720%" y="943.50"></text></g><g><title>clone (16 samples, 0.01%)</title><rect x="99.7220%" y="917" width="0.0145%" height="15" fill="rgb(231,185,54)" fg:x="109760" fg:w="16"/><text x="99.9720%" y="927.50"></text></g><g><title>[ld-2.31.so] (12 samples, 0.01%)</title><rect x="99.7402%" y="917" width="0.0109%" height="15" fill="rgb(243,55,32)" fg:x="109780" fg:w="12"/><text x="99.9902%" y="927.50"></text></g><g><title>pdk-hashbrown (244 samples, 0.22%)</title><rect x="99.7383%" y="933" width="0.2217%" height="15" fill="rgb(208,167,19)" fg:x="109778" fg:w="244"/><text x="99.9883%" y="943.50"></text></g><g><title>clone (221 samples, 0.20%)</title><rect x="99.7592%" y="917" width="0.2008%" height="15" fill="rgb(231,72,35)" fg:x="109801" fg:w="221"/><text x="100.0092%" y="927.50"></text></g><g><title>start_thread (36 samples, 0.03%)</title><rect x="99.9273%" y="901" width="0.0327%" height="15" fill="rgb(250,173,51)" fg:x="109986" fg:w="36"/><text x="100.1773%" y="911.50"></text></g><g><title>all (110,066 samples, 100%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(209,5,22)" fg:x="0" fg:w="110066"/><text x="0.2500%" y="959.50"></text></g><g><title>tokio-runtime-w (44 samples, 0.04%)</title><rect x="99.9600%" y="933" width="0.0400%" height="15" fill="rgb(250,174,19)" fg:x="110022" fg:w="44"/><text x="100.2100%" y="943.50"></text></g><g><title>clone (43 samples, 0.04%)</title><rect x="99.9609%" y="917" width="0.0391%" height="15" fill="rgb(217,3,49)" fg:x="110023" fg:w="43"/><text x="100.2109%" y="927.50"></text></g><g><title>start_thread (43 samples, 0.04%)</title><rect x="99.9609%" y="901" width="0.0391%" height="15" fill="rgb(218,225,5)" fg:x="110023" fg:w="43"/><text x="100.2109%" y="911.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (43 samples, 0.04%)</title><rect x="99.9609%" y="885" width="0.0391%" height="15" fill="rgb(236,89,11)" fg:x="110023" fg:w="43"/><text x="100.2109%" y="895.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (43 samples, 0.04%)</title><rect x="99.9609%" y="869" width="0.0391%" height="15" fill="rgb(206,33,28)" fg:x="110023" fg:w="43"/><text x="100.2109%" y="879.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (43 samples, 0.04%)</title><rect x="99.9609%" y="853" width="0.0391%" height="15" fill="rgb(241,56,42)" fg:x="110023" fg:w="43"/><text x="100.2109%" y="863.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (43 samples, 0.04%)</title><rect x="99.9609%" y="837" width="0.0391%" height="15" fill="rgb(222,44,11)" fg:x="110023" fg:w="43"/><text x="100.2109%" y="847.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (43 samples, 0.04%)</title><rect x="99.9609%" y="821" width="0.0391%" height="15" fill="rgb(234,111,20)" fg:x="110023" fg:w="43"/><text x="100.2109%" y="831.50"></text></g><g><title>std::panic::catch_unwind (43 samples, 0.04%)</title><rect x="99.9609%" y="805" width="0.0391%" height="15" fill="rgb(237,77,6)" fg:x="110023" fg:w="43"/><text x="100.2109%" y="815.50"></text></g><g><title>std::panicking::try (43 samples, 0.04%)</title><rect x="99.9609%" y="789" width="0.0391%" height="15" fill="rgb(235,111,23)" fg:x="110023" fg:w="43"/><text x="100.2109%" y="799.50"></text></g><g><title>std::panicking::try::do_call (43 samples, 0.04%)</title><rect x="99.9609%" y="773" width="0.0391%" height="15" fill="rgb(251,135,29)" fg:x="110023" fg:w="43"/><text x="100.2109%" y="783.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (43 samples, 0.04%)</title><rect x="99.9609%" y="757" width="0.0391%" height="15" fill="rgb(217,57,1)" fg:x="110023" fg:w="43"/><text x="100.2109%" y="767.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (43 samples, 0.04%)</title><rect x="99.9609%" y="741" width="0.0391%" height="15" fill="rgb(249,119,31)" fg:x="110023" fg:w="43"/><text x="100.2109%" y="751.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (43 samples, 0.04%)</title><rect x="99.9609%" y="725" width="0.0391%" height="15" fill="rgb(233,164,33)" fg:x="110023" fg:w="43"/><text x="100.2109%" y="735.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (43 samples, 0.04%)</title><rect x="99.9609%" y="709" width="0.0391%" height="15" fill="rgb(250,217,43)" fg:x="110023" fg:w="43"/><text x="100.2109%" y="719.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (43 samples, 0.04%)</title><rect x="99.9609%" y="693" width="0.0391%" height="15" fill="rgb(232,154,50)" fg:x="110023" fg:w="43"/><text x="100.2109%" y="703.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (43 samples, 0.04%)</title><rect x="99.9609%" y="677" width="0.0391%" height="15" fill="rgb(227,190,8)" fg:x="110023" fg:w="43"/><text x="100.2109%" y="687.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (43 samples, 0.04%)</title><rect x="99.9609%" y="661" width="0.0391%" height="15" fill="rgb(209,217,32)" fg:x="110023" fg:w="43"/><text x="100.2109%" y="671.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (43 samples, 0.04%)</title><rect x="99.9609%" y="645" width="0.0391%" height="15" fill="rgb(243,203,50)" fg:x="110023" fg:w="43"/><text x="100.2109%" y="655.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (43 samples, 0.04%)</title><rect x="99.9609%" y="629" width="0.0391%" height="15" fill="rgb(232,152,27)" fg:x="110023" fg:w="43"/><text x="100.2109%" y="639.50"></text></g><g><title>__GI___pthread_mutex_lock (43 samples, 0.04%)</title><rect x="99.9609%" y="613" width="0.0391%" height="15" fill="rgb(240,34,29)" fg:x="110023" fg:w="43"/><text x="100.2109%" y="623.50"></text></g><g><title>__lll_lock_wait (40 samples, 0.04%)</title><rect x="99.9637%" y="597" width="0.0363%" height="15" fill="rgb(215,185,52)" fg:x="110026" fg:w="40"/><text x="100.2137%" y="607.50"></text></g></svg></svg>