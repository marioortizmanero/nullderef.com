<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1046" onload="init(evt)" viewBox="0 0 1200 1046" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1046" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1029.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1029.00"> </text><svg id="frames" x="10" width="1180" total_samples="112947"><g><title>async-io (35 samples, 0.03%)</title><rect x="0.0000%" y="981" width="0.0310%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="35"/><text x="0.2500%" y="991.50"></text></g><g><title>clone (35 samples, 0.03%)</title><rect x="0.0000%" y="965" width="0.0310%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="35"/><text x="0.2500%" y="975.50"></text></g><g><title>start_thread (35 samples, 0.03%)</title><rect x="0.0000%" y="949" width="0.0310%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="35"/><text x="0.2500%" y="959.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (35 samples, 0.03%)</title><rect x="0.0000%" y="933" width="0.0310%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="35"/><text x="0.2500%" y="943.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (35 samples, 0.03%)</title><rect x="0.0000%" y="917" width="0.0310%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="35"/><text x="0.2500%" y="927.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (35 samples, 0.03%)</title><rect x="0.0000%" y="901" width="0.0310%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="35"/><text x="0.2500%" y="911.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (35 samples, 0.03%)</title><rect x="0.0000%" y="885" width="0.0310%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="35"/><text x="0.2500%" y="895.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (35 samples, 0.03%)</title><rect x="0.0000%" y="869" width="0.0310%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="35"/><text x="0.2500%" y="879.50"></text></g><g><title>std::panic::catch_unwind (35 samples, 0.03%)</title><rect x="0.0000%" y="853" width="0.0310%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="35"/><text x="0.2500%" y="863.50"></text></g><g><title>std::panicking::try (35 samples, 0.03%)</title><rect x="0.0000%" y="837" width="0.0310%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="35"/><text x="0.2500%" y="847.50"></text></g><g><title>std::panicking::try::do_call (35 samples, 0.03%)</title><rect x="0.0000%" y="821" width="0.0310%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="35"/><text x="0.2500%" y="831.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (35 samples, 0.03%)</title><rect x="0.0000%" y="805" width="0.0310%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="35"/><text x="0.2500%" y="815.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (35 samples, 0.03%)</title><rect x="0.0000%" y="789" width="0.0310%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="35"/><text x="0.2500%" y="799.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (35 samples, 0.03%)</title><rect x="0.0000%" y="773" width="0.0310%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="35"/><text x="0.2500%" y="783.50"></text></g><g><title>async_io::driver::UNPARKER::{{closure}}::{{closure}} (35 samples, 0.03%)</title><rect x="0.0000%" y="757" width="0.0310%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="35"/><text x="0.2500%" y="767.50"></text></g><g><title>async_io::driver::main_loop (35 samples, 0.03%)</title><rect x="0.0000%" y="741" width="0.0310%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="35"/><text x="0.2500%" y="751.50"></text></g><g><title>parking::Parker::park_timeout (34 samples, 0.03%)</title><rect x="0.0009%" y="725" width="0.0301%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="34"/><text x="0.2509%" y="735.50"></text></g><g><title>parking::Inner::park (34 samples, 0.03%)</title><rect x="0.0009%" y="709" width="0.0301%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="34"/><text x="0.2509%" y="719.50"></text></g><g><title>std::sync::condvar::Condvar::wait_timeout (33 samples, 0.03%)</title><rect x="0.0018%" y="693" width="0.0292%" height="15" fill="rgb(221,200,47)" fg:x="2" fg:w="33"/><text x="0.2518%" y="703.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait_timeout (33 samples, 0.03%)</title><rect x="0.0018%" y="677" width="0.0292%" height="15" fill="rgb(226,26,5)" fg:x="2" fg:w="33"/><text x="0.2518%" y="687.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait_timeout (33 samples, 0.03%)</title><rect x="0.0018%" y="661" width="0.0292%" height="15" fill="rgb(249,33,26)" fg:x="2" fg:w="33"/><text x="0.2518%" y="671.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait_optional_timeout (33 samples, 0.03%)</title><rect x="0.0018%" y="645" width="0.0292%" height="15" fill="rgb(235,183,28)" fg:x="2" fg:w="33"/><text x="0.2518%" y="655.50"></text></g><g><title>std::sys::unix::futex::futex_wait (32 samples, 0.03%)</title><rect x="0.0027%" y="629" width="0.0283%" height="15" fill="rgb(221,5,38)" fg:x="3" fg:w="32"/><text x="0.2527%" y="639.50"></text></g><g><title>syscall (28 samples, 0.02%)</title><rect x="0.0062%" y="613" width="0.0248%" height="15" fill="rgb(247,18,42)" fg:x="7" fg:w="28"/><text x="0.2562%" y="623.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (33 samples, 0.03%)</title><rect x="0.0398%" y="965" width="0.0292%" height="15" fill="rgb(241,131,45)" fg:x="45" fg:w="33"/><text x="0.2898%" y="975.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (15 samples, 0.01%)</title><rect x="0.0788%" y="965" width="0.0133%" height="15" fill="rgb(249,31,29)" fg:x="89" fg:w="15"/><text x="0.3288%" y="975.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_key (41 samples, 0.04%)</title><rect x="0.3798%" y="917" width="0.0363%" height="15" fill="rgb(225,111,53)" fg:x="429" fg:w="41"/><text x="0.6298%" y="927.50"></text></g><g><title>serde::de::MapAccess::next_key (41 samples, 0.04%)</title><rect x="0.3798%" y="901" width="0.0363%" height="15" fill="rgb(238,160,17)" fg:x="429" fg:w="41"/><text x="0.6298%" y="911.50"></text></g><g><title>&lt;rmp_serde::decode::MapAccess&lt;R,C&gt; as serde::de::MapAccess&gt;::next_key_seed (41 samples, 0.04%)</title><rect x="0.3798%" y="885" width="0.0363%" height="15" fill="rgb(214,148,48)" fg:x="429" fg:w="41"/><text x="0.6298%" y="895.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (41 samples, 0.04%)</title><rect x="0.3798%" y="869" width="0.0363%" height="15" fill="rgb(232,36,49)" fg:x="429" fg:w="41"/><text x="0.6298%" y="879.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for &amp;str&gt;::deserialize (41 samples, 0.04%)</title><rect x="0.3798%" y="853" width="0.0363%" height="15" fill="rgb(209,103,24)" fg:x="429" fg:w="41"/><text x="0.6298%" y="863.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_str (41 samples, 0.04%)</title><rect x="0.3798%" y="837" width="0.0363%" height="15" fill="rgb(229,88,8)" fg:x="429" fg:w="41"/><text x="0.6298%" y="847.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_value (41 samples, 0.04%)</title><rect x="0.4161%" y="917" width="0.0363%" height="15" fill="rgb(213,181,19)" fg:x="470" fg:w="41"/><text x="0.6661%" y="927.50"></text></g><g><title>serde::de::MapAccess::next_value (41 samples, 0.04%)</title><rect x="0.4161%" y="901" width="0.0363%" height="15" fill="rgb(254,191,54)" fg:x="470" fg:w="41"/><text x="0.6661%" y="911.50"></text></g><g><title>&lt;rmp_serde::decode::MapAccess&lt;R,C&gt; as serde::de::MapAccess&gt;::next_value_seed (41 samples, 0.04%)</title><rect x="0.4161%" y="885" width="0.0363%" height="15" fill="rgb(241,83,37)" fg:x="470" fg:w="41"/><text x="0.6661%" y="895.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (41 samples, 0.04%)</title><rect x="0.4161%" y="869" width="0.0363%" height="15" fill="rgb(233,36,39)" fg:x="470" fg:w="41"/><text x="0.6661%" y="879.50"></text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (41 samples, 0.04%)</title><rect x="0.4161%" y="853" width="0.0363%" height="15" fill="rgb(226,3,54)" fg:x="470" fg:w="41"/><text x="0.6661%" y="863.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_map (137 samples, 0.12%)</title><rect x="0.3364%" y="933" width="0.1213%" height="15" fill="rgb(245,192,40)" fg:x="380" fg:w="137"/><text x="0.5864%" y="943.50"></text></g><g><title>&lt;&amp;mut A as serde::de::SeqAccess&gt;::next_element (54 samples, 0.05%)</title><rect x="0.4577%" y="917" width="0.0478%" height="15" fill="rgb(238,167,29)" fg:x="517" fg:w="54"/><text x="0.7077%" y="927.50"></text></g><g><title>serde::de::SeqAccess::next_element (54 samples, 0.05%)</title><rect x="0.4577%" y="901" width="0.0478%" height="15" fill="rgb(232,182,51)" fg:x="517" fg:w="54"/><text x="0.7077%" y="911.50"></text></g><g><title>&lt;rmp_serde::decode::SeqAccess&lt;R,C&gt; as serde::de::SeqAccess&gt;::next_element_seed (54 samples, 0.05%)</title><rect x="0.4577%" y="885" width="0.0478%" height="15" fill="rgb(231,60,39)" fg:x="517" fg:w="54"/><text x="0.7077%" y="895.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (54 samples, 0.05%)</title><rect x="0.4577%" y="869" width="0.0478%" height="15" fill="rgb(208,69,12)" fg:x="517" fg:w="54"/><text x="0.7077%" y="879.50"></text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (54 samples, 0.05%)</title><rect x="0.4577%" y="853" width="0.0478%" height="15" fill="rgb(235,93,37)" fg:x="517" fg:w="54"/><text x="0.7077%" y="863.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_seq (65 samples, 0.06%)</title><rect x="0.4577%" y="933" width="0.0575%" height="15" fill="rgb(213,116,39)" fg:x="517" fg:w="65"/><text x="0.7077%" y="943.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (553 samples, 0.49%)</title><rect x="0.1116%" y="949" width="0.4896%" height="15" fill="rgb(222,207,29)" fg:x="126" fg:w="553"/><text x="0.3616%" y="959.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::read_str_data (97 samples, 0.09%)</title><rect x="0.5153%" y="933" width="0.0859%" height="15" fill="rgb(206,96,30)" fg:x="582" fg:w="97"/><text x="0.7653%" y="943.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (21 samples, 0.02%)</title><rect x="0.6012%" y="949" width="0.0186%" height="15" fill="rgb(218,138,4)" fg:x="679" fg:w="21"/><text x="0.8512%" y="959.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (13 samples, 0.01%)</title><rect x="0.6198%" y="949" width="0.0115%" height="15" fill="rgb(250,191,14)" fg:x="700" fg:w="13"/><text x="0.8698%" y="959.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (22 samples, 0.02%)</title><rect x="0.6313%" y="949" width="0.0195%" height="15" fill="rgb(239,60,40)" fg:x="713" fg:w="22"/><text x="0.8813%" y="959.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.02%)</title><rect x="0.6507%" y="949" width="0.0195%" height="15" fill="rgb(206,27,48)" fg:x="735" fg:w="22"/><text x="0.9007%" y="959.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.02%)</title><rect x="0.6738%" y="949" width="0.0186%" height="15" fill="rgb(225,35,8)" fg:x="761" fg:w="21"/><text x="0.9238%" y="959.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (13 samples, 0.01%)</title><rect x="0.6924%" y="949" width="0.0115%" height="15" fill="rgb(250,213,24)" fg:x="782" fg:w="13"/><text x="0.9424%" y="959.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (13 samples, 0.01%)</title><rect x="0.6924%" y="933" width="0.0115%" height="15" fill="rgb(247,123,22)" fg:x="782" fg:w="13"/><text x="0.9424%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (13 samples, 0.01%)</title><rect x="0.6924%" y="917" width="0.0115%" height="15" fill="rgb(231,138,38)" fg:x="782" fg:w="13"/><text x="0.9424%" y="927.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (13 samples, 0.01%)</title><rect x="0.6924%" y="901" width="0.0115%" height="15" fill="rgb(231,145,46)" fg:x="782" fg:w="13"/><text x="0.9424%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (14 samples, 0.01%)</title><rect x="0.7039%" y="949" width="0.0124%" height="15" fill="rgb(251,118,11)" fg:x="795" fg:w="14"/><text x="0.9539%" y="959.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (50 samples, 0.04%)</title><rect x="0.7242%" y="949" width="0.0443%" height="15" fill="rgb(217,147,25)" fg:x="818" fg:w="50"/><text x="0.9742%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event),alloc::alloc::Global&gt;&gt; (14 samples, 0.01%)</title><rect x="0.7561%" y="933" width="0.0124%" height="15" fill="rgb(247,81,37)" fg:x="854" fg:w="14"/><text x="1.0061%" y="943.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="0.7561%" y="917" width="0.0124%" height="15" fill="rgb(209,12,38)" fg:x="854" fg:w="14"/><text x="1.0061%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (14 samples, 0.01%)</title><rect x="0.7561%" y="901" width="0.0124%" height="15" fill="rgb(227,1,9)" fg:x="854" fg:w="14"/><text x="1.0061%" y="911.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="0.7561%" y="885" width="0.0124%" height="15" fill="rgb(248,47,43)" fg:x="854" fg:w="14"/><text x="1.0061%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.01%)</title><rect x="0.7561%" y="869" width="0.0124%" height="15" fill="rgb(221,10,30)" fg:x="854" fg:w="14"/><text x="1.0061%" y="879.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.01%)</title><rect x="0.7561%" y="853" width="0.0124%" height="15" fill="rgb(210,229,1)" fg:x="854" fg:w="14"/><text x="1.0061%" y="863.50"></text></g><g><title>__rg_dealloc (14 samples, 0.01%)</title><rect x="0.7561%" y="837" width="0.0124%" height="15" fill="rgb(222,148,37)" fg:x="854" fg:w="14"/><text x="1.0061%" y="847.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (14 samples, 0.01%)</title><rect x="0.7561%" y="821" width="0.0124%" height="15" fill="rgb(234,67,33)" fg:x="854" fg:w="14"/><text x="1.0061%" y="831.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (20 samples, 0.02%)</title><rect x="0.8314%" y="933" width="0.0177%" height="15" fill="rgb(247,98,35)" fg:x="939" fg:w="20"/><text x="1.0814%" y="943.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (92 samples, 0.08%)</title><rect x="0.7685%" y="949" width="0.0815%" height="15" fill="rgb(247,138,52)" fg:x="868" fg:w="92"/><text x="1.0185%" y="959.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (16 samples, 0.01%)</title><rect x="0.8880%" y="933" width="0.0142%" height="15" fill="rgb(213,79,30)" fg:x="1003" fg:w="16"/><text x="1.1380%" y="943.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (54 samples, 0.05%)</title><rect x="0.8579%" y="949" width="0.0478%" height="15" fill="rgb(246,177,23)" fg:x="969" fg:w="54"/><text x="1.1079%" y="959.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::Sink&gt;::on_event::{{closure}} (21 samples, 0.02%)</title><rect x="1.0527%" y="933" width="0.0186%" height="15" fill="rgb(230,62,27)" fg:x="1189" fg:w="21"/><text x="1.3027%" y="943.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::route_events::{{closure}} (32 samples, 0.03%)</title><rect x="1.0731%" y="933" width="0.0283%" height="15" fill="rgb(216,154,8)" fg:x="1212" fg:w="32"/><text x="1.3231%" y="943.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (294 samples, 0.26%)</title><rect x="0.9057%" y="949" width="0.2603%" height="15" fill="rgb(244,35,45)" fg:x="1023" fg:w="294"/><text x="1.1557%" y="959.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (59 samples, 0.05%)</title><rect x="1.1138%" y="933" width="0.0522%" height="15" fill="rgb(251,115,12)" fg:x="1258" fg:w="59"/><text x="1.3638%" y="943.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (64 samples, 0.06%)</title><rect x="1.1660%" y="949" width="0.0567%" height="15" fill="rgb(240,54,50)" fg:x="1317" fg:w="64"/><text x="1.4160%" y="959.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (14 samples, 0.01%)</title><rect x="1.2254%" y="949" width="0.0124%" height="15" fill="rgb(233,84,52)" fg:x="1384" fg:w="14"/><text x="1.4754%" y="959.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (35 samples, 0.03%)</title><rect x="1.2377%" y="949" width="0.0310%" height="15" fill="rgb(207,117,47)" fg:x="1398" fg:w="35"/><text x="1.4877%" y="959.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeMap&gt;::end (27 samples, 0.02%)</title><rect x="1.2687%" y="949" width="0.0239%" height="15" fill="rgb(249,43,39)" fg:x="1433" fg:w="27"/><text x="1.5187%" y="959.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeSeq&gt;::end (41 samples, 0.04%)</title><rect x="1.2926%" y="949" width="0.0363%" height="15" fill="rgb(209,38,44)" fg:x="1460" fg:w="41"/><text x="1.5426%" y="959.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (34 samples, 0.03%)</title><rect x="1.3289%" y="949" width="0.0301%" height="15" fill="rgb(236,212,23)" fg:x="1501" fg:w="34"/><text x="1.5789%" y="959.50"></text></g><g><title>&lt;tremor_pipeline::op::grouper::bucket::Grouper as tremor_pipeline::op::Operator&gt;::on_event (47 samples, 0.04%)</title><rect x="1.3590%" y="949" width="0.0416%" height="15" fill="rgb(242,79,21)" fg:x="1535" fg:w="47"/><text x="1.6090%" y="959.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (28 samples, 0.02%)</title><rect x="1.4007%" y="949" width="0.0248%" height="15" fill="rgb(211,96,35)" fg:x="1582" fg:w="28"/><text x="1.6507%" y="959.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (83 samples, 0.07%)</title><rect x="1.4405%" y="949" width="0.0735%" height="15" fill="rgb(253,215,40)" fg:x="1627" fg:w="83"/><text x="1.6905%" y="959.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (36 samples, 0.03%)</title><rect x="1.4821%" y="933" width="0.0319%" height="15" fill="rgb(211,81,21)" fg:x="1674" fg:w="36"/><text x="1.7321%" y="943.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (23 samples, 0.02%)</title><rect x="1.4936%" y="917" width="0.0204%" height="15" fill="rgb(208,190,38)" fg:x="1687" fg:w="23"/><text x="1.7436%" y="927.50"></text></g><g><title>[libc-2.31.so] (158 samples, 0.14%)</title><rect x="1.5370%" y="949" width="0.1399%" height="15" fill="rgb(235,213,38)" fg:x="1736" fg:w="158"/><text x="1.7870%" y="959.50"></text></g><g><title>__clock_gettime (43 samples, 0.04%)</title><rect x="1.6769%" y="949" width="0.0381%" height="15" fill="rgb(237,122,38)" fg:x="1894" fg:w="43"/><text x="1.9269%" y="959.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (14 samples, 0.01%)</title><rect x="1.7212%" y="949" width="0.0124%" height="15" fill="rgb(244,218,35)" fg:x="1944" fg:w="14"/><text x="1.9712%" y="959.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (34 samples, 0.03%)</title><rect x="1.7336%" y="949" width="0.0301%" height="15" fill="rgb(240,68,47)" fg:x="1958" fg:w="34"/><text x="1.9836%" y="959.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (25 samples, 0.02%)</title><rect x="1.7415%" y="933" width="0.0221%" height="15" fill="rgb(210,16,53)" fg:x="1967" fg:w="25"/><text x="1.9915%" y="943.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (22 samples, 0.02%)</title><rect x="1.7442%" y="917" width="0.0195%" height="15" fill="rgb(235,124,12)" fg:x="1970" fg:w="22"/><text x="1.9942%" y="927.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (22 samples, 0.02%)</title><rect x="1.7442%" y="901" width="0.0195%" height="15" fill="rgb(224,169,11)" fg:x="1970" fg:w="22"/><text x="1.9942%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (24 samples, 0.02%)</title><rect x="1.7637%" y="949" width="0.0212%" height="15" fill="rgb(250,166,2)" fg:x="1992" fg:w="24"/><text x="2.0137%" y="959.50"></text></g><g><title>async_executor::Ticker::wake (15 samples, 0.01%)</title><rect x="1.8177%" y="949" width="0.0133%" height="15" fill="rgb(242,216,29)" fg:x="2053" fg:w="15"/><text x="2.0677%" y="959.50"></text></g><g><title>async_executor::steal (158 samples, 0.14%)</title><rect x="1.8309%" y="949" width="0.1399%" height="15" fill="rgb(230,116,27)" fg:x="2068" fg:w="158"/><text x="2.0809%" y="959.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (239 samples, 0.21%)</title><rect x="1.9939%" y="949" width="0.2116%" height="15" fill="rgb(228,99,48)" fg:x="2252" fg:w="239"/><text x="2.2439%" y="959.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (23 samples, 0.02%)</title><rect x="2.2055%" y="949" width="0.0204%" height="15" fill="rgb(253,11,6)" fg:x="2491" fg:w="23"/><text x="2.4555%" y="959.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (31 samples, 0.03%)</title><rect x="2.2258%" y="949" width="0.0274%" height="15" fill="rgb(247,143,39)" fg:x="2514" fg:w="31"/><text x="2.4758%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager&lt;tremor_runtime::connectors::impls::bench::Blaster&gt;::handle_data::{{closure}}&gt;&gt; (17 samples, 0.02%)</title><rect x="2.2825%" y="949" width="0.0151%" height="15" fill="rgb(236,97,10)" fg:x="2578" fg:w="17"/><text x="2.5325%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager&lt;tremor_runtime::connectors::impls::bench::Blaster&gt;::handle_source_reply::{{closure}}&gt;&gt; (18 samples, 0.02%)</title><rect x="2.2975%" y="949" width="0.0159%" height="15" fill="rgb(233,208,19)" fg:x="2595" fg:w="18"/><text x="2.5475%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager&lt;tremor_runtime::connectors::impls::cb::CbSource&gt;::route_events::{{closure}}&gt;&gt; (17 samples, 0.02%)</title><rect x="2.3135%" y="949" width="0.0151%" height="15" fill="rgb(216,164,2)" fg:x="2613" fg:w="17"/><text x="2.5635%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt;&gt; (97 samples, 0.09%)</title><rect x="2.3374%" y="949" width="0.0859%" height="15" fill="rgb(220,129,5)" fg:x="2640" fg:w="97"/><text x="2.5874%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt; (91 samples, 0.08%)</title><rect x="2.3427%" y="933" width="0.0806%" height="15" fill="rgb(242,17,10)" fg:x="2646" fg:w="91"/><text x="2.5927%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::send_events::{{closure}}&gt;&gt; (16 samples, 0.01%)</title><rect x="2.4233%" y="949" width="0.0142%" height="15" fill="rgb(242,107,0)" fg:x="2737" fg:w="16"/><text x="2.6733%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (108 samples, 0.10%)</title><rect x="2.4436%" y="949" width="0.0956%" height="15" fill="rgb(251,28,31)" fg:x="2760" fg:w="108"/><text x="2.6936%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (30 samples, 0.03%)</title><rect x="2.5543%" y="933" width="0.0266%" height="15" fill="rgb(233,223,10)" fg:x="2885" fg:w="30"/><text x="2.8043%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (30 samples, 0.03%)</title><rect x="2.5543%" y="917" width="0.0266%" height="15" fill="rgb(215,21,27)" fg:x="2885" fg:w="30"/><text x="2.8043%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (30 samples, 0.03%)</title><rect x="2.5543%" y="901" width="0.0266%" height="15" fill="rgb(232,23,21)" fg:x="2885" fg:w="30"/><text x="2.8043%" y="911.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.03%)</title><rect x="2.5543%" y="885" width="0.0266%" height="15" fill="rgb(244,5,23)" fg:x="2885" fg:w="30"/><text x="2.8043%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (30 samples, 0.03%)</title><rect x="2.5543%" y="869" width="0.0266%" height="15" fill="rgb(226,81,46)" fg:x="2885" fg:w="30"/><text x="2.8043%" y="879.50"></text></g><g><title>alloc::alloc::dealloc (30 samples, 0.03%)</title><rect x="2.5543%" y="853" width="0.0266%" height="15" fill="rgb(247,70,30)" fg:x="2885" fg:w="30"/><text x="2.8043%" y="863.50"></text></g><g><title>__rg_dealloc (30 samples, 0.03%)</title><rect x="2.5543%" y="837" width="0.0266%" height="15" fill="rgb(212,68,19)" fg:x="2885" fg:w="30"/><text x="2.8043%" y="847.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (30 samples, 0.03%)</title><rect x="2.5543%" y="821" width="0.0266%" height="15" fill="rgb(240,187,13)" fg:x="2885" fg:w="30"/><text x="2.8043%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (51 samples, 0.05%)</title><rect x="2.5410%" y="949" width="0.0452%" height="15" fill="rgb(223,113,26)" fg:x="2870" fg:w="51"/><text x="2.7910%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (20 samples, 0.02%)</title><rect x="2.5862%" y="949" width="0.0177%" height="15" fill="rgb(206,192,2)" fg:x="2921" fg:w="20"/><text x="2.8362%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt;&gt; (39 samples, 0.03%)</title><rect x="2.6632%" y="933" width="0.0345%" height="15" fill="rgb(241,108,4)" fg:x="3008" fg:w="39"/><text x="2.9132%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (39 samples, 0.03%)</title><rect x="2.6632%" y="917" width="0.0345%" height="15" fill="rgb(247,173,49)" fg:x="3008" fg:w="39"/><text x="2.9132%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (30 samples, 0.03%)</title><rect x="2.6977%" y="933" width="0.0266%" height="15" fill="rgb(224,114,35)" fg:x="3047" fg:w="30"/><text x="2.9477%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (139 samples, 0.12%)</title><rect x="2.6039%" y="949" width="0.1231%" height="15" fill="rgb(245,159,27)" fg:x="2941" fg:w="139"/><text x="2.8539%" y="959.50"></text></g><g><title>core::str::converts::from_utf8 (67 samples, 0.06%)</title><rect x="2.7269%" y="949" width="0.0593%" height="15" fill="rgb(245,172,44)" fg:x="3080" fg:w="67"/><text x="2.9769%" y="959.50"></text></g><g><title>event_listener::Event::notify (94 samples, 0.08%)</title><rect x="2.7916%" y="949" width="0.0832%" height="15" fill="rgb(236,23,11)" fg:x="3153" fg:w="94"/><text x="3.0416%" y="959.50"></text></g><g><title>event_listener::full_fence (40 samples, 0.04%)</title><rect x="2.8394%" y="933" width="0.0354%" height="15" fill="rgb(205,117,38)" fg:x="3207" fg:w="40"/><text x="3.0894%" y="943.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (22 samples, 0.02%)</title><rect x="2.8819%" y="949" width="0.0195%" height="15" fill="rgb(237,72,25)" fg:x="3255" fg:w="22"/><text x="3.1319%" y="959.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::insert (139 samples, 0.12%)</title><rect x="2.9014%" y="949" width="0.1231%" height="15" fill="rgb(244,70,9)" fg:x="3277" fg:w="139"/><text x="3.1514%" y="959.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::insert (22 samples, 0.02%)</title><rect x="3.0049%" y="933" width="0.0195%" height="15" fill="rgb(217,125,39)" fg:x="3394" fg:w="22"/><text x="3.2549%" y="943.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;mut B&gt; for &amp;A&gt;::eq (22 samples, 0.02%)</title><rect x="3.0049%" y="917" width="0.0195%" height="15" fill="rgb(235,36,10)" fg:x="3394" fg:w="22"/><text x="3.2549%" y="927.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (22 samples, 0.02%)</title><rect x="3.0049%" y="901" width="0.0195%" height="15" fill="rgb(251,123,47)" fg:x="3394" fg:w="22"/><text x="3.2549%" y="911.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (22 samples, 0.02%)</title><rect x="3.0049%" y="885" width="0.0195%" height="15" fill="rgb(221,13,13)" fg:x="3394" fg:w="22"/><text x="3.2549%" y="895.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (22 samples, 0.02%)</title><rect x="3.0049%" y="869" width="0.0195%" height="15" fill="rgb(238,131,9)" fg:x="3394" fg:w="22"/><text x="3.2549%" y="879.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (22 samples, 0.02%)</title><rect x="3.0049%" y="853" width="0.0195%" height="15" fill="rgb(211,50,8)" fg:x="3394" fg:w="22"/><text x="3.2549%" y="863.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (22 samples, 0.02%)</title><rect x="3.0049%" y="837" width="0.0195%" height="15" fill="rgb(245,182,24)" fg:x="3394" fg:w="22"/><text x="3.2549%" y="847.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (22 samples, 0.02%)</title><rect x="3.0049%" y="821" width="0.0195%" height="15" fill="rgb(242,14,37)" fg:x="3394" fg:w="22"/><text x="3.2549%" y="831.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (23 samples, 0.02%)</title><rect x="3.0244%" y="949" width="0.0204%" height="15" fill="rgb(246,228,12)" fg:x="3416" fg:w="23"/><text x="3.2744%" y="959.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (123 samples, 0.11%)</title><rect x="3.3299%" y="933" width="0.1089%" height="15" fill="rgb(213,55,15)" fg:x="3761" fg:w="123"/><text x="3.5799%" y="943.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (123 samples, 0.11%)</title><rect x="3.3299%" y="917" width="0.1089%" height="15" fill="rgb(209,9,3)" fg:x="3761" fg:w="123"/><text x="3.5799%" y="927.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (123 samples, 0.11%)</title><rect x="3.3299%" y="901" width="0.1089%" height="15" fill="rgb(230,59,30)" fg:x="3761" fg:w="123"/><text x="3.5799%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (123 samples, 0.11%)</title><rect x="3.3299%" y="885" width="0.1089%" height="15" fill="rgb(209,121,21)" fg:x="3761" fg:w="123"/><text x="3.5799%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (123 samples, 0.11%)</title><rect x="3.3299%" y="869" width="0.1089%" height="15" fill="rgb(220,109,13)" fg:x="3761" fg:w="123"/><text x="3.5799%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (123 samples, 0.11%)</title><rect x="3.3299%" y="853" width="0.1089%" height="15" fill="rgb(232,18,1)" fg:x="3761" fg:w="123"/><text x="3.5799%" y="863.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (115 samples, 0.10%)</title><rect x="3.3370%" y="837" width="0.1018%" height="15" fill="rgb(215,41,42)" fg:x="3769" fg:w="115"/><text x="3.5870%" y="847.50"></text></g><g><title>rmp::encode::str::write_str (470 samples, 0.42%)</title><rect x="3.0660%" y="949" width="0.4161%" height="15" fill="rgb(224,123,36)" fg:x="3463" fg:w="470"/><text x="3.3160%" y="959.50"></text></g><g><title>rmp::encode::str::write_str_len (49 samples, 0.04%)</title><rect x="3.4388%" y="933" width="0.0434%" height="15" fill="rgb(240,125,3)" fg:x="3884" fg:w="49"/><text x="3.6888%" y="943.50"></text></g><g><title>rmp::encode::uint::write_uint (159 samples, 0.14%)</title><rect x="3.4822%" y="949" width="0.1408%" height="15" fill="rgb(205,98,50)" fg:x="3933" fg:w="159"/><text x="3.7322%" y="959.50"></text></g><g><title>rmp::encode::uint::write_pfix (14 samples, 0.01%)</title><rect x="3.6105%" y="933" width="0.0124%" height="15" fill="rgb(205,185,37)" fg:x="4078" fg:w="14"/><text x="3.8605%" y="943.50"></text></g><g><title>rmp::encode::write_array_len (38 samples, 0.03%)</title><rect x="3.6229%" y="949" width="0.0336%" height="15" fill="rgb(238,207,15)" fg:x="4092" fg:w="38"/><text x="3.8729%" y="959.50"></text></g><g><title>rmp::encode::write_marker (324 samples, 0.29%)</title><rect x="3.6654%" y="949" width="0.2869%" height="15" fill="rgb(213,199,42)" fg:x="4140" fg:w="324"/><text x="3.9154%" y="959.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (205 samples, 0.18%)</title><rect x="3.9523%" y="949" width="0.1815%" height="15" fill="rgb(235,201,11)" fg:x="4464" fg:w="205"/><text x="4.2023%" y="959.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeMap&gt;::serialize_value (74 samples, 0.07%)</title><rect x="4.0683%" y="933" width="0.0655%" height="15" fill="rgb(207,46,11)" fg:x="4595" fg:w="74"/><text x="4.3183%" y="943.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeSeq&gt;::serialize_element (74 samples, 0.07%)</title><rect x="4.0683%" y="917" width="0.0655%" height="15" fill="rgb(241,35,35)" fg:x="4595" fg:w="74"/><text x="4.3183%" y="927.50"></text></g><g><title>sn_rust_alloc (116 samples, 0.10%)</title><rect x="4.1338%" y="949" width="0.1027%" height="15" fill="rgb(243,32,47)" fg:x="4669" fg:w="116"/><text x="4.3838%" y="959.50"></text></g><g><title>sn_rust_dealloc (49 samples, 0.04%)</title><rect x="4.2365%" y="949" width="0.0434%" height="15" fill="rgb(247,202,23)" fg:x="4785" fg:w="49"/><text x="4.4865%" y="959.50"></text></g><g><title>sn_rust_realloc (25 samples, 0.02%)</title><rect x="4.2799%" y="949" width="0.0221%" height="15" fill="rgb(219,102,11)" fg:x="4834" fg:w="25"/><text x="4.5299%" y="959.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (27 samples, 0.02%)</title><rect x="4.3020%" y="949" width="0.0239%" height="15" fill="rgb(243,110,44)" fg:x="4859" fg:w="27"/><text x="4.5520%" y="959.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (26 samples, 0.02%)</title><rect x="4.3259%" y="949" width="0.0230%" height="15" fill="rgb(222,74,54)" fg:x="4886" fg:w="26"/><text x="4.5759%" y="959.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (33 samples, 0.03%)</title><rect x="4.3640%" y="949" width="0.0292%" height="15" fill="rgb(216,99,12)" fg:x="4929" fg:w="33"/><text x="4.6140%" y="959.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (30 samples, 0.03%)</title><rect x="4.3932%" y="949" width="0.0266%" height="15" fill="rgb(226,22,26)" fg:x="4962" fg:w="30"/><text x="4.6432%" y="959.50"></text></g><g><title>tremor_common::time::nanotime (21 samples, 0.02%)</title><rect x="4.4277%" y="949" width="0.0186%" height="15" fill="rgb(217,163,10)" fg:x="5001" fg:w="21"/><text x="4.6777%" y="959.50"></text></g><g><title>std::time::SystemTime::now (14 samples, 0.01%)</title><rect x="4.4339%" y="933" width="0.0124%" height="15" fill="rgb(213,25,53)" fg:x="5008" fg:w="14"/><text x="4.6839%" y="943.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (14 samples, 0.01%)</title><rect x="4.4339%" y="917" width="0.0124%" height="15" fill="rgb(252,105,26)" fg:x="5008" fg:w="14"/><text x="4.6839%" y="927.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (14 samples, 0.01%)</title><rect x="4.4339%" y="901" width="0.0124%" height="15" fill="rgb(220,39,43)" fg:x="5008" fg:w="14"/><text x="4.6839%" y="911.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_input (23 samples, 0.02%)</title><rect x="4.4463%" y="949" width="0.0204%" height="15" fill="rgb(229,68,48)" fg:x="5022" fg:w="23"/><text x="4.6963%" y="959.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_output (12 samples, 0.01%)</title><rect x="4.4667%" y="949" width="0.0106%" height="15" fill="rgb(252,8,32)" fg:x="5045" fg:w="12"/><text x="4.7167%" y="959.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (13 samples, 0.01%)</title><rect x="4.5021%" y="949" width="0.0115%" height="15" fill="rgb(223,20,43)" fg:x="5085" fg:w="13"/><text x="4.7521%" y="959.50"></text></g><g><title>tremor_script::ast::Script::run (47 samples, 0.04%)</title><rect x="4.5136%" y="949" width="0.0416%" height="15" fill="rgb(229,81,49)" fg:x="5098" fg:w="47"/><text x="4.7636%" y="959.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (26 samples, 0.02%)</title><rect x="4.5552%" y="949" width="0.0230%" height="15" fill="rgb(236,28,36)" fg:x="5145" fg:w="26"/><text x="4.8052%" y="959.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (58 samples, 0.05%)</title><rect x="4.5783%" y="949" width="0.0514%" height="15" fill="rgb(249,185,26)" fg:x="5171" fg:w="58"/><text x="4.8283%" y="959.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (70 samples, 0.06%)</title><rect x="4.6296%" y="949" width="0.0620%" height="15" fill="rgb(249,174,33)" fg:x="5229" fg:w="70"/><text x="4.8796%" y="959.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (14 samples, 0.01%)</title><rect x="4.6916%" y="949" width="0.0124%" height="15" fill="rgb(233,201,37)" fg:x="5299" fg:w="14"/><text x="4.9416%" y="959.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (157 samples, 0.14%)</title><rect x="4.7040%" y="949" width="0.1390%" height="15" fill="rgb(221,78,26)" fg:x="5313" fg:w="157"/><text x="4.9540%" y="959.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (146 samples, 0.13%)</title><rect x="4.8430%" y="949" width="0.1293%" height="15" fill="rgb(250,127,30)" fg:x="5470" fg:w="146"/><text x="5.0930%" y="959.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (181 samples, 0.16%)</title><rect x="4.9811%" y="949" width="0.1603%" height="15" fill="rgb(230,49,44)" fg:x="5626" fg:w="181"/><text x="5.2311%" y="959.50"></text></g><g><title>tremor_script::interpreter::resolve (33 samples, 0.03%)</title><rect x="5.1121%" y="933" width="0.0292%" height="15" fill="rgb(229,67,23)" fg:x="5774" fg:w="33"/><text x="5.3621%" y="943.50"></text></g><g><title>tremor_script::interpreter::resolve_value (115 samples, 0.10%)</title><rect x="5.1413%" y="949" width="0.1018%" height="15" fill="rgb(249,83,47)" fg:x="5807" fg:w="115"/><text x="5.3913%" y="959.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup (13 samples, 0.01%)</title><rect x="5.2317%" y="933" width="0.0115%" height="15" fill="rgb(215,43,3)" fg:x="5909" fg:w="13"/><text x="5.4817%" y="943.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (13 samples, 0.01%)</title><rect x="5.2317%" y="917" width="0.0115%" height="15" fill="rgb(238,154,13)" fg:x="5909" fg:w="13"/><text x="5.4817%" y="927.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (13 samples, 0.01%)</title><rect x="5.2317%" y="901" width="0.0115%" height="15" fill="rgb(219,56,2)" fg:x="5909" fg:w="13"/><text x="5.4817%" y="911.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (13 samples, 0.01%)</title><rect x="5.2317%" y="885" width="0.0115%" height="15" fill="rgb(233,0,4)" fg:x="5909" fg:w="13"/><text x="5.4817%" y="895.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_key_hashed_nocheck (13 samples, 0.01%)</title><rect x="5.2317%" y="869" width="0.0115%" height="15" fill="rgb(235,30,7)" fg:x="5909" fg:w="13"/><text x="5.4817%" y="879.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_key_hashed_nocheck (13 samples, 0.01%)</title><rect x="5.2317%" y="853" width="0.0115%" height="15" fill="rgb(250,79,13)" fg:x="5909" fg:w="13"/><text x="5.4817%" y="863.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_hash (13 samples, 0.01%)</title><rect x="5.2317%" y="837" width="0.0115%" height="15" fill="rgb(211,146,34)" fg:x="5909" fg:w="13"/><text x="5.4817%" y="847.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::search (13 samples, 0.01%)</title><rect x="5.2317%" y="821" width="0.0115%" height="15" fill="rgb(228,22,38)" fg:x="5909" fg:w="13"/><text x="5.4817%" y="831.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (13 samples, 0.01%)</title><rect x="5.2317%" y="805" width="0.0115%" height="15" fill="rgb(235,168,5)" fg:x="5909" fg:w="13"/><text x="5.4817%" y="815.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (13 samples, 0.01%)</title><rect x="5.2317%" y="789" width="0.0115%" height="15" fill="rgb(221,155,16)" fg:x="5909" fg:w="13"/><text x="5.4817%" y="799.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (13 samples, 0.01%)</title><rect x="5.2317%" y="773" width="0.0115%" height="15" fill="rgb(215,215,53)" fg:x="5909" fg:w="13"/><text x="5.4817%" y="783.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (13 samples, 0.01%)</title><rect x="5.2317%" y="757" width="0.0115%" height="15" fill="rgb(223,4,10)" fg:x="5909" fg:w="13"/><text x="5.4817%" y="767.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (13 samples, 0.01%)</title><rect x="5.2317%" y="741" width="0.0115%" height="15" fill="rgb(234,103,6)" fg:x="5909" fg:w="13"/><text x="5.4817%" y="751.50"></text></g><g><title>tremor_script::interpreter::test_guard (38 samples, 0.03%)</title><rect x="5.2432%" y="949" width="0.0336%" height="15" fill="rgb(227,97,0)" fg:x="5922" fg:w="38"/><text x="5.4932%" y="959.50"></text></g><g><title>tremor_script::interpreter::test_predicate_expr (162 samples, 0.14%)</title><rect x="5.2768%" y="949" width="0.1434%" height="15" fill="rgb(234,150,53)" fg:x="5960" fg:w="162"/><text x="5.5268%" y="959.50"></text></g><g><title>tremor_script::interpreter::val_eq (70 samples, 0.06%)</title><rect x="5.4202%" y="949" width="0.0620%" height="15" fill="rgb(228,201,54)" fg:x="6122" fg:w="70"/><text x="5.6702%" y="959.50"></text></g><g><title>tremor_script::srs::EventPayload::rent_mut (12 samples, 0.01%)</title><rect x="5.4822%" y="949" width="0.0106%" height="15" fill="rgb(222,22,37)" fg:x="6192" fg:w="12"/><text x="5.7322%" y="959.50"></text></g><g><title>tremor_script::srs::EventPayload::try_new (20 samples, 0.02%)</title><rect x="5.4928%" y="949" width="0.0177%" height="15" fill="rgb(237,53,32)" fg:x="6204" fg:w="20"/><text x="5.7428%" y="959.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (89 samples, 0.08%)</title><rect x="5.7824%" y="917" width="0.0788%" height="15" fill="rgb(233,25,53)" fg:x="6531" fg:w="89"/><text x="6.0324%" y="927.50"></text></g><g><title>rmp::encode::write_marker (89 samples, 0.08%)</title><rect x="5.7824%" y="901" width="0.0788%" height="15" fill="rgb(210,40,34)" fg:x="6531" fg:w="89"/><text x="6.0324%" y="911.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_bool (93 samples, 0.08%)</title><rect x="5.7824%" y="933" width="0.0823%" height="15" fill="rgb(241,220,44)" fg:x="6531" fg:w="93"/><text x="6.0324%" y="943.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_str (35 samples, 0.03%)</title><rect x="5.8656%" y="933" width="0.0310%" height="15" fill="rgb(235,28,35)" fg:x="6625" fg:w="35"/><text x="6.1156%" y="943.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_u64 (25 samples, 0.02%)</title><rect x="5.8966%" y="933" width="0.0221%" height="15" fill="rgb(210,56,17)" fg:x="6660" fg:w="25"/><text x="6.1466%" y="943.50"></text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (506 samples, 0.45%)</title><rect x="5.5159%" y="949" width="0.4480%" height="15" fill="rgb(224,130,29)" fg:x="6230" fg:w="506"/><text x="5.7659%" y="959.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeSeq&gt;::serialize_element (51 samples, 0.05%)</title><rect x="5.9187%" y="933" width="0.0452%" height="15" fill="rgb(235,212,8)" fg:x="6685" fg:w="51"/><text x="6.1687%" y="943.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (19 samples, 0.02%)</title><rect x="5.9683%" y="949" width="0.0168%" height="15" fill="rgb(223,33,50)" fg:x="6741" fg:w="19"/><text x="6.2183%" y="959.50"></text></g><g><title>value_trait::ValueAccess::get (102 samples, 0.09%)</title><rect x="5.9931%" y="949" width="0.0903%" height="15" fill="rgb(219,149,13)" fg:x="6769" fg:w="102"/><text x="6.2431%" y="959.50"></text></g><g><title>[anon] (6,762 samples, 5.99%)</title><rect x="0.1116%" y="965" width="5.9869%" height="15" fill="rgb(250,156,29)" fg:x="126" fg:w="6762"/><text x="0.3616%" y="975.50">[anon]</text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (15 samples, 0.01%)</title><rect x="6.1046%" y="949" width="0.0133%" height="15" fill="rgb(216,193,19)" fg:x="6895" fg:w="15"/><text x="6.3546%" y="959.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (23 samples, 0.02%)</title><rect x="6.1179%" y="949" width="0.0204%" height="15" fill="rgb(216,135,14)" fg:x="6910" fg:w="23"/><text x="6.3679%" y="959.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::Source&gt;::pull_data::{{closure}} (22 samples, 0.02%)</title><rect x="6.1188%" y="933" width="0.0195%" height="15" fill="rgb(241,47,5)" fg:x="6911" fg:w="22"/><text x="6.3688%" y="943.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (15 samples, 0.01%)</title><rect x="6.1454%" y="949" width="0.0133%" height="15" fill="rgb(233,42,35)" fg:x="6941" fg:w="15"/><text x="6.3954%" y="959.50"></text></g><g><title>[libc-2.31.so] (107 samples, 0.09%)</title><rect x="6.0984%" y="965" width="0.0947%" height="15" fill="rgb(231,13,6)" fg:x="6888" fg:w="107"/><text x="6.3484%" y="975.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (22 samples, 0.02%)</title><rect x="6.1932%" y="949" width="0.0195%" height="15" fill="rgb(207,181,40)" fg:x="6995" fg:w="22"/><text x="6.4432%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tremor_value::value::Value]&gt; (48 samples, 0.04%)</title><rect x="6.2224%" y="949" width="0.0425%" height="15" fill="rgb(254,173,49)" fg:x="7028" fg:w="48"/><text x="6.4724%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (733 samples, 0.65%)</title><rect x="6.2649%" y="949" width="0.6490%" height="15" fill="rgb(221,1,38)" fg:x="7076" fg:w="733"/><text x="6.5149%" y="959.50"></text></g><g><title>[tremor-main] (815 samples, 0.72%)</title><rect x="6.1932%" y="965" width="0.7216%" height="15" fill="rgb(206,124,46)" fg:x="6995" fg:w="815"/><text x="6.4432%" y="975.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (385 samples, 0.34%)</title><rect x="6.9147%" y="949" width="0.3409%" height="15" fill="rgb(249,21,11)" fg:x="7810" fg:w="385"/><text x="7.1647%" y="959.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::read_str_data (26 samples, 0.02%)</title><rect x="7.2326%" y="933" width="0.0230%" height="15" fill="rgb(222,201,40)" fg:x="8169" fg:w="26"/><text x="7.4826%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (53 samples, 0.05%)</title><rect x="7.2893%" y="949" width="0.0469%" height="15" fill="rgb(235,61,29)" fg:x="8233" fg:w="53"/><text x="7.5393%" y="959.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (16 samples, 0.01%)</title><rect x="7.3220%" y="933" width="0.0142%" height="15" fill="rgb(219,207,3)" fg:x="8270" fg:w="16"/><text x="7.5720%" y="943.50"></text></g><g><title>alloc::slice::hack::to_vec (16 samples, 0.01%)</title><rect x="7.3220%" y="917" width="0.0142%" height="15" fill="rgb(222,56,46)" fg:x="8270" fg:w="16"/><text x="7.5720%" y="927.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (16 samples, 0.01%)</title><rect x="7.3220%" y="901" width="0.0142%" height="15" fill="rgb(239,76,54)" fg:x="8270" fg:w="16"/><text x="7.5720%" y="911.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="7.3415%" y="949" width="0.0142%" height="15" fill="rgb(231,124,27)" fg:x="8292" fg:w="16"/><text x="7.5915%" y="959.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (12 samples, 0.01%)</title><rect x="7.3610%" y="949" width="0.0106%" height="15" fill="rgb(249,195,6)" fg:x="8314" fg:w="12"/><text x="7.6110%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (204 samples, 0.18%)</title><rect x="7.4451%" y="469" width="0.1806%" height="15" fill="rgb(237,174,47)" fg:x="8409" fg:w="204"/><text x="7.6951%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (204 samples, 0.18%)</title><rect x="7.4451%" y="453" width="0.1806%" height="15" fill="rgb(206,201,31)" fg:x="8409" fg:w="204"/><text x="7.6951%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (249 samples, 0.22%)</title><rect x="7.6257%" y="469" width="0.2205%" height="15" fill="rgb(231,57,52)" fg:x="8613" fg:w="249"/><text x="7.8757%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_load (248 samples, 0.22%)</title><rect x="7.6266%" y="453" width="0.2196%" height="15" fill="rgb(248,177,22)" fg:x="8614" fg:w="248"/><text x="7.8766%" y="463.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (492 samples, 0.44%)</title><rect x="7.4114%" y="501" width="0.4356%" height="15" fill="rgb(215,211,37)" fg:x="8371" fg:w="492"/><text x="7.6614%" y="511.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (492 samples, 0.44%)</title><rect x="7.4114%" y="485" width="0.4356%" height="15" fill="rgb(241,128,51)" fg:x="8371" fg:w="492"/><text x="7.6614%" y="495.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (880 samples, 0.78%)</title><rect x="7.4114%" y="517" width="0.7791%" height="15" fill="rgb(227,165,31)" fg:x="8371" fg:w="880"/><text x="7.6614%" y="527.50"></text></g><g><title>event_listener::Event::notify (388 samples, 0.34%)</title><rect x="7.8470%" y="501" width="0.3435%" height="15" fill="rgb(228,167,24)" fg:x="8863" fg:w="388"/><text x="8.0970%" y="511.50"></text></g><g><title>event_listener::full_fence (359 samples, 0.32%)</title><rect x="7.8727%" y="485" width="0.3178%" height="15" fill="rgb(228,143,12)" fg:x="8892" fg:w="359"/><text x="8.1227%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (359 samples, 0.32%)</title><rect x="7.8727%" y="469" width="0.3178%" height="15" fill="rgb(249,149,8)" fg:x="8892" fg:w="359"/><text x="8.1227%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (359 samples, 0.32%)</title><rect x="7.8727%" y="453" width="0.3178%" height="15" fill="rgb(243,35,44)" fg:x="8892" fg:w="359"/><text x="8.1227%" y="463.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (986 samples, 0.87%)</title><rect x="7.4114%" y="933" width="0.8730%" height="15" fill="rgb(246,89,9)" fg:x="8371" fg:w="986"/><text x="7.6614%" y="943.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (986 samples, 0.87%)</title><rect x="7.4114%" y="917" width="0.8730%" height="15" fill="rgb(233,213,13)" fg:x="8371" fg:w="986"/><text x="7.6614%" y="927.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (986 samples, 0.87%)</title><rect x="7.4114%" y="901" width="0.8730%" height="15" fill="rgb(233,141,41)" fg:x="8371" fg:w="986"/><text x="7.6614%" y="911.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (986 samples, 0.87%)</title><rect x="7.4114%" y="885" width="0.8730%" height="15" fill="rgb(239,167,4)" fg:x="8371" fg:w="986"/><text x="7.6614%" y="895.50"></text></g><g><title>async_task::runnable::Runnable::run (986 samples, 0.87%)</title><rect x="7.4114%" y="869" width="0.8730%" height="15" fill="rgb(209,217,16)" fg:x="8371" fg:w="986"/><text x="7.6614%" y="879.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (986 samples, 0.87%)</title><rect x="7.4114%" y="853" width="0.8730%" height="15" fill="rgb(219,88,35)" fg:x="8371" fg:w="986"/><text x="7.6614%" y="863.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (986 samples, 0.87%)</title><rect x="7.4114%" y="837" width="0.8730%" height="15" fill="rgb(220,193,23)" fg:x="8371" fg:w="986"/><text x="7.6614%" y="847.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (986 samples, 0.87%)</title><rect x="7.4114%" y="821" width="0.8730%" height="15" fill="rgb(230,90,52)" fg:x="8371" fg:w="986"/><text x="7.6614%" y="831.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (986 samples, 0.87%)</title><rect x="7.4114%" y="805" width="0.8730%" height="15" fill="rgb(252,106,19)" fg:x="8371" fg:w="986"/><text x="7.6614%" y="815.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (986 samples, 0.87%)</title><rect x="7.4114%" y="789" width="0.8730%" height="15" fill="rgb(206,74,20)" fg:x="8371" fg:w="986"/><text x="7.6614%" y="799.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (986 samples, 0.87%)</title><rect x="7.4114%" y="773" width="0.8730%" height="15" fill="rgb(230,138,44)" fg:x="8371" fg:w="986"/><text x="7.6614%" y="783.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (986 samples, 0.87%)</title><rect x="7.4114%" y="757" width="0.8730%" height="15" fill="rgb(235,182,43)" fg:x="8371" fg:w="986"/><text x="7.6614%" y="767.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (986 samples, 0.87%)</title><rect x="7.4114%" y="741" width="0.8730%" height="15" fill="rgb(242,16,51)" fg:x="8371" fg:w="986"/><text x="7.6614%" y="751.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (986 samples, 0.87%)</title><rect x="7.4114%" y="725" width="0.8730%" height="15" fill="rgb(248,9,4)" fg:x="8371" fg:w="986"/><text x="7.6614%" y="735.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (986 samples, 0.87%)</title><rect x="7.4114%" y="709" width="0.8730%" height="15" fill="rgb(210,31,22)" fg:x="8371" fg:w="986"/><text x="7.6614%" y="719.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (986 samples, 0.87%)</title><rect x="7.4114%" y="693" width="0.8730%" height="15" fill="rgb(239,54,39)" fg:x="8371" fg:w="986"/><text x="7.6614%" y="703.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::run::{{closure}} (986 samples, 0.87%)</title><rect x="7.4114%" y="677" width="0.8730%" height="15" fill="rgb(230,99,41)" fg:x="8371" fg:w="986"/><text x="7.6614%" y="687.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (986 samples, 0.87%)</title><rect x="7.4114%" y="661" width="0.8730%" height="15" fill="rgb(253,106,12)" fg:x="8371" fg:w="986"/><text x="7.6614%" y="671.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_source_reply::{{closure}} (986 samples, 0.87%)</title><rect x="7.4114%" y="645" width="0.8730%" height="15" fill="rgb(213,46,41)" fg:x="8371" fg:w="986"/><text x="7.6614%" y="655.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (986 samples, 0.87%)</title><rect x="7.4114%" y="629" width="0.8730%" height="15" fill="rgb(215,133,35)" fg:x="8371" fg:w="986"/><text x="7.6614%" y="639.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_data::{{closure}} (986 samples, 0.87%)</title><rect x="7.4114%" y="613" width="0.8730%" height="15" fill="rgb(213,28,5)" fg:x="8371" fg:w="986"/><text x="7.6614%" y="623.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (986 samples, 0.87%)</title><rect x="7.4114%" y="597" width="0.8730%" height="15" fill="rgb(215,77,49)" fg:x="8371" fg:w="986"/><text x="7.6614%" y="607.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::route_events::{{closure}} (986 samples, 0.87%)</title><rect x="7.4114%" y="581" width="0.8730%" height="15" fill="rgb(248,100,22)" fg:x="8371" fg:w="986"/><text x="7.6614%" y="591.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (986 samples, 0.87%)</title><rect x="7.4114%" y="565" width="0.8730%" height="15" fill="rgb(208,67,9)" fg:x="8371" fg:w="986"/><text x="7.6614%" y="575.50"></text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (986 samples, 0.87%)</title><rect x="7.4114%" y="549" width="0.8730%" height="15" fill="rgb(219,133,21)" fg:x="8371" fg:w="986"/><text x="7.6614%" y="559.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (986 samples, 0.87%)</title><rect x="7.4114%" y="533" width="0.8730%" height="15" fill="rgb(246,46,29)" fg:x="8371" fg:w="986"/><text x="7.6614%" y="543.50"></text></g><g><title>event_listener::Event::notify (106 samples, 0.09%)</title><rect x="8.1906%" y="517" width="0.0938%" height="15" fill="rgb(246,185,52)" fg:x="9251" fg:w="106"/><text x="8.4406%" y="527.50"></text></g><g><title>event_listener::full_fence (101 samples, 0.09%)</title><rect x="8.1950%" y="501" width="0.0894%" height="15" fill="rgb(252,136,11)" fg:x="9256" fg:w="101"/><text x="8.4450%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (101 samples, 0.09%)</title><rect x="8.1950%" y="485" width="0.0894%" height="15" fill="rgb(219,138,53)" fg:x="9256" fg:w="101"/><text x="8.4450%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (101 samples, 0.09%)</title><rect x="8.1950%" y="469" width="0.0894%" height="15" fill="rgb(211,51,23)" fg:x="9256" fg:w="101"/><text x="8.4450%" y="479.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::default::Default&gt;::default (86 samples, 0.08%)</title><rect x="8.5350%" y="677" width="0.0761%" height="15" fill="rgb(247,221,28)" fg:x="9640" fg:w="86"/><text x="8.7850%" y="687.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (71 samples, 0.06%)</title><rect x="9.0786%" y="485" width="0.0629%" height="15" fill="rgb(251,222,45)" fg:x="10254" fg:w="71"/><text x="9.3286%" y="495.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (382 samples, 0.34%)</title><rect x="8.8041%" y="613" width="0.3382%" height="15" fill="rgb(217,162,53)" fg:x="9944" fg:w="382"/><text x="9.0541%" y="623.50"></text></g><g><title>alloc::alloc::exchange_malloc (152 samples, 0.13%)</title><rect x="9.0078%" y="597" width="0.1346%" height="15" fill="rgb(229,93,14)" fg:x="10174" fg:w="152"/><text x="9.2578%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (152 samples, 0.13%)</title><rect x="9.0078%" y="581" width="0.1346%" height="15" fill="rgb(209,67,49)" fg:x="10174" fg:w="152"/><text x="9.2578%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (152 samples, 0.13%)</title><rect x="9.0078%" y="565" width="0.1346%" height="15" fill="rgb(213,87,29)" fg:x="10174" fg:w="152"/><text x="9.2578%" y="575.50"></text></g><g><title>alloc::alloc::alloc (151 samples, 0.13%)</title><rect x="9.0087%" y="549" width="0.1337%" height="15" fill="rgb(205,151,52)" fg:x="10175" fg:w="151"/><text x="9.2587%" y="559.50"></text></g><g><title>__rg_alloc (151 samples, 0.13%)</title><rect x="9.0087%" y="533" width="0.1337%" height="15" fill="rgb(253,215,39)" fg:x="10175" fg:w="151"/><text x="9.2587%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (151 samples, 0.13%)</title><rect x="9.0087%" y="517" width="0.1337%" height="15" fill="rgb(221,220,41)" fg:x="10175" fg:w="151"/><text x="9.2587%" y="527.50"></text></g><g><title>sn_rust_alloc (133 samples, 0.12%)</title><rect x="9.0246%" y="501" width="0.1178%" height="15" fill="rgb(218,133,21)" fg:x="10193" fg:w="133"/><text x="9.2746%" y="511.50"></text></g><g><title>&lt;tremor_pipeline::event::Event as core::default::Default&gt;::default (717 samples, 0.63%)</title><rect x="8.5137%" y="693" width="0.6348%" height="15" fill="rgb(221,193,43)" fg:x="9616" fg:w="717"/><text x="8.7637%" y="703.50"></text></g><g><title>&lt;tremor_script::srs::EventPayload as core::default::Default&gt;::default (607 samples, 0.54%)</title><rect x="8.6111%" y="677" width="0.5374%" height="15" fill="rgb(240,128,52)" fg:x="9726" fg:w="607"/><text x="8.8611%" y="687.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (396 samples, 0.35%)</title><rect x="8.7979%" y="661" width="0.3506%" height="15" fill="rgb(253,114,12)" fg:x="9937" fg:w="396"/><text x="9.0479%" y="671.50"></text></g><g><title>value_trait::Builder::object (389 samples, 0.34%)</title><rect x="8.8041%" y="645" width="0.3444%" height="15" fill="rgb(215,223,47)" fg:x="9944" fg:w="389"/><text x="9.0541%" y="655.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (389 samples, 0.34%)</title><rect x="8.8041%" y="629" width="0.3444%" height="15" fill="rgb(248,225,23)" fg:x="9944" fg:w="389"/><text x="9.0541%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (29 samples, 0.03%)</title><rect x="9.1565%" y="661" width="0.0257%" height="15" fill="rgb(250,108,0)" fg:x="10342" fg:w="29"/><text x="9.4065%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt;&gt; (17 samples, 0.02%)</title><rect x="9.1671%" y="645" width="0.0151%" height="15" fill="rgb(228,208,7)" fg:x="10354" fg:w="17"/><text x="9.4171%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (14 samples, 0.01%)</title><rect x="9.1698%" y="629" width="0.0124%" height="15" fill="rgb(244,45,10)" fg:x="10357" fg:w="14"/><text x="9.4198%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (14 samples, 0.01%)</title><rect x="9.1698%" y="613" width="0.0124%" height="15" fill="rgb(207,125,25)" fg:x="10357" fg:w="14"/><text x="9.4198%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (64 samples, 0.06%)</title><rect x="9.1503%" y="693" width="0.0567%" height="15" fill="rgb(210,195,18)" fg:x="10335" fg:w="64"/><text x="9.4003%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (57 samples, 0.05%)</title><rect x="9.1565%" y="677" width="0.0505%" height="15" fill="rgb(249,80,12)" fg:x="10342" fg:w="57"/><text x="9.4065%" y="687.50"></text></g><g><title>sn_rust_dealloc (28 samples, 0.02%)</title><rect x="9.1822%" y="661" width="0.0248%" height="15" fill="rgb(221,65,9)" fg:x="10371" fg:w="28"/><text x="9.4322%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (27 samples, 0.02%)</title><rect x="9.2070%" y="693" width="0.0239%" height="15" fill="rgb(235,49,36)" fg:x="10399" fg:w="27"/><text x="9.4570%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt;&gt; (18 samples, 0.02%)</title><rect x="9.2149%" y="677" width="0.0159%" height="15" fill="rgb(225,32,20)" fg:x="10408" fg:w="18"/><text x="9.4649%" y="687.50"></text></g><g><title>sn_rust_dealloc (27 samples, 0.02%)</title><rect x="9.2309%" y="693" width="0.0239%" height="15" fill="rgb(215,141,46)" fg:x="10426" fg:w="27"/><text x="9.4809%" y="703.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (1,104 samples, 0.98%)</title><rect x="8.2844%" y="709" width="0.9774%" height="15" fill="rgb(250,160,47)" fg:x="9357" fg:w="1104"/><text x="8.5344%" y="719.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (25 samples, 0.02%)</title><rect x="9.3132%" y="581" width="0.0221%" height="15" fill="rgb(216,222,40)" fg:x="10519" fg:w="25"/><text x="9.5632%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (56 samples, 0.05%)</title><rect x="9.2867%" y="693" width="0.0496%" height="15" fill="rgb(234,217,39)" fg:x="10489" fg:w="56"/><text x="9.5367%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (56 samples, 0.05%)</title><rect x="9.2867%" y="677" width="0.0496%" height="15" fill="rgb(207,178,40)" fg:x="10489" fg:w="56"/><text x="9.5367%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (56 samples, 0.05%)</title><rect x="9.2867%" y="661" width="0.0496%" height="15" fill="rgb(221,136,13)" fg:x="10489" fg:w="56"/><text x="9.5367%" y="671.50"></text></g><g><title>alloc::alloc::alloc (55 samples, 0.05%)</title><rect x="9.2875%" y="645" width="0.0487%" height="15" fill="rgb(249,199,10)" fg:x="10490" fg:w="55"/><text x="9.5375%" y="655.50"></text></g><g><title>__rg_alloc (55 samples, 0.05%)</title><rect x="9.2875%" y="629" width="0.0487%" height="15" fill="rgb(249,222,13)" fg:x="10490" fg:w="55"/><text x="9.5375%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (55 samples, 0.05%)</title><rect x="9.2875%" y="613" width="0.0487%" height="15" fill="rgb(244,185,38)" fg:x="10490" fg:w="55"/><text x="9.5375%" y="623.50"></text></g><g><title>sn_rust_alloc (55 samples, 0.05%)</title><rect x="9.2875%" y="597" width="0.0487%" height="15" fill="rgb(236,202,9)" fg:x="10490" fg:w="55"/><text x="9.5375%" y="607.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (97 samples, 0.09%)</title><rect x="9.2619%" y="709" width="0.0859%" height="15" fill="rgb(250,229,37)" fg:x="10461" fg:w="97"/><text x="9.5119%" y="719.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (72 samples, 0.06%)</title><rect x="9.5177%" y="693" width="0.0637%" height="15" fill="rgb(206,174,23)" fg:x="10750" fg:w="72"/><text x="9.7677%" y="703.50"></text></g><g><title>alloc::alloc::exchange_malloc (45 samples, 0.04%)</title><rect x="9.5815%" y="693" width="0.0398%" height="15" fill="rgb(211,33,43)" fg:x="10822" fg:w="45"/><text x="9.8315%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (45 samples, 0.04%)</title><rect x="9.5815%" y="677" width="0.0398%" height="15" fill="rgb(245,58,50)" fg:x="10822" fg:w="45"/><text x="9.8315%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (45 samples, 0.04%)</title><rect x="9.5815%" y="661" width="0.0398%" height="15" fill="rgb(244,68,36)" fg:x="10822" fg:w="45"/><text x="9.8315%" y="671.50"></text></g><g><title>alloc::alloc::alloc (42 samples, 0.04%)</title><rect x="9.5841%" y="645" width="0.0372%" height="15" fill="rgb(232,229,15)" fg:x="10825" fg:w="42"/><text x="9.8341%" y="655.50"></text></g><g><title>__rg_alloc (42 samples, 0.04%)</title><rect x="9.5841%" y="629" width="0.0372%" height="15" fill="rgb(254,30,23)" fg:x="10825" fg:w="42"/><text x="9.8341%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (42 samples, 0.04%)</title><rect x="9.5841%" y="613" width="0.0372%" height="15" fill="rgb(235,160,14)" fg:x="10825" fg:w="42"/><text x="9.8341%" y="623.50"></text></g><g><title>sn_rust_alloc (38 samples, 0.03%)</title><rect x="9.5877%" y="597" width="0.0336%" height="15" fill="rgb(212,155,44)" fg:x="10829" fg:w="38"/><text x="9.8377%" y="607.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (16 samples, 0.01%)</title><rect x="9.6072%" y="581" width="0.0142%" height="15" fill="rgb(226,2,50)" fg:x="10851" fg:w="16"/><text x="9.8572%" y="591.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (97 samples, 0.09%)</title><rect x="9.6213%" y="693" width="0.0859%" height="15" fill="rgb(234,177,6)" fg:x="10867" fg:w="97"/><text x="9.8713%" y="703.50"></text></g><g><title>alloc::alloc::exchange_malloc (91 samples, 0.08%)</title><rect x="9.6266%" y="677" width="0.0806%" height="15" fill="rgb(217,24,9)" fg:x="10873" fg:w="91"/><text x="9.8766%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (91 samples, 0.08%)</title><rect x="9.6266%" y="661" width="0.0806%" height="15" fill="rgb(220,13,46)" fg:x="10873" fg:w="91"/><text x="9.8766%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (91 samples, 0.08%)</title><rect x="9.6266%" y="645" width="0.0806%" height="15" fill="rgb(239,221,27)" fg:x="10873" fg:w="91"/><text x="9.8766%" y="655.50"></text></g><g><title>alloc::alloc::alloc (91 samples, 0.08%)</title><rect x="9.6266%" y="629" width="0.0806%" height="15" fill="rgb(222,198,25)" fg:x="10873" fg:w="91"/><text x="9.8766%" y="639.50"></text></g><g><title>__rg_alloc (91 samples, 0.08%)</title><rect x="9.6266%" y="613" width="0.0806%" height="15" fill="rgb(211,99,13)" fg:x="10873" fg:w="91"/><text x="9.8766%" y="623.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (91 samples, 0.08%)</title><rect x="9.6266%" y="597" width="0.0806%" height="15" fill="rgb(232,111,31)" fg:x="10873" fg:w="91"/><text x="9.8766%" y="607.50"></text></g><g><title>sn_rust_alloc (88 samples, 0.08%)</title><rect x="9.6293%" y="581" width="0.0779%" height="15" fill="rgb(245,82,37)" fg:x="10876" fg:w="88"/><text x="9.8793%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (61 samples, 0.05%)</title><rect x="9.6532%" y="565" width="0.0540%" height="15" fill="rgb(227,149,46)" fg:x="10903" fg:w="61"/><text x="9.9032%" y="575.50"></text></g><g><title>&lt;halfbrown::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (101 samples, 0.09%)</title><rect x="9.8462%" y="629" width="0.0894%" height="15" fill="rgb(218,36,50)" fg:x="11121" fg:w="101"/><text x="10.0962%" y="639.50"></text></g><g><title>&lt;halfbrown::HashMapInt&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (83 samples, 0.07%)</title><rect x="9.8621%" y="613" width="0.0735%" height="15" fill="rgb(226,80,48)" fg:x="11139" fg:w="83"/><text x="10.1121%" y="623.50"></text></g><g><title>&lt;halfbrown::vecmap::VecMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (78 samples, 0.07%)</title><rect x="9.8666%" y="597" width="0.0691%" height="15" fill="rgb(238,224,15)" fg:x="11144" fg:w="78"/><text x="10.1166%" y="607.50"></text></g><g><title>&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (121 samples, 0.11%)</title><rect x="9.8462%" y="645" width="0.1071%" height="15" fill="rgb(241,136,10)" fg:x="11121" fg:w="121"/><text x="10.0962%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (20 samples, 0.02%)</title><rect x="9.9356%" y="629" width="0.0177%" height="15" fill="rgb(208,32,45)" fg:x="11222" fg:w="20"/><text x="10.1856%" y="639.50"></text></g><g><title>core::ptr::write (20 samples, 0.02%)</title><rect x="9.9356%" y="613" width="0.0177%" height="15" fill="rgb(207,135,9)" fg:x="11222" fg:w="20"/><text x="10.1856%" y="623.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (173 samples, 0.15%)</title><rect x="9.8294%" y="677" width="0.1532%" height="15" fill="rgb(206,86,44)" fg:x="11102" fg:w="173"/><text x="10.0794%" y="687.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (156 samples, 0.14%)</title><rect x="9.8444%" y="661" width="0.1381%" height="15" fill="rgb(245,177,15)" fg:x="11119" fg:w="156"/><text x="10.0944%" y="671.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (33 samples, 0.03%)</title><rect x="9.9533%" y="645" width="0.0292%" height="15" fill="rgb(206,64,50)" fg:x="11242" fg:w="33"/><text x="10.2033%" y="655.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (33 samples, 0.03%)</title><rect x="9.9533%" y="629" width="0.0292%" height="15" fill="rgb(234,36,40)" fg:x="11242" fg:w="33"/><text x="10.2033%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (33 samples, 0.03%)</title><rect x="9.9533%" y="613" width="0.0292%" height="15" fill="rgb(213,64,8)" fg:x="11242" fg:w="33"/><text x="10.2033%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (33 samples, 0.03%)</title><rect x="9.9533%" y="597" width="0.0292%" height="15" fill="rgb(210,75,36)" fg:x="11242" fg:w="33"/><text x="10.2033%" y="607.50"></text></g><g><title>alloc::alloc::alloc (33 samples, 0.03%)</title><rect x="9.9533%" y="581" width="0.0292%" height="15" fill="rgb(229,88,21)" fg:x="11242" fg:w="33"/><text x="10.2033%" y="591.50"></text></g><g><title>__rg_alloc (33 samples, 0.03%)</title><rect x="9.9533%" y="565" width="0.0292%" height="15" fill="rgb(252,204,47)" fg:x="11242" fg:w="33"/><text x="10.2033%" y="575.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (33 samples, 0.03%)</title><rect x="9.9533%" y="549" width="0.0292%" height="15" fill="rgb(208,77,27)" fg:x="11242" fg:w="33"/><text x="10.2033%" y="559.50"></text></g><g><title>sn_rust_alloc (33 samples, 0.03%)</title><rect x="9.9533%" y="533" width="0.0292%" height="15" fill="rgb(221,76,26)" fg:x="11242" fg:w="33"/><text x="10.2033%" y="543.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::run::{{closure}} (2,095 samples, 1.85%)</title><rect x="8.2844%" y="805" width="1.8549%" height="15" fill="rgb(225,139,18)" fg:x="9357" fg:w="2095"/><text x="8.5344%" y="815.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,095 samples, 1.85%)</title><rect x="8.2844%" y="789" width="1.8549%" height="15" fill="rgb(230,137,11)" fg:x="9357" fg:w="2095"/><text x="8.5344%" y="799.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_source_reply::{{closure}} (2,095 samples, 1.85%)</title><rect x="8.2844%" y="773" width="1.8549%" height="15" fill="rgb(212,28,1)" fg:x="9357" fg:w="2095"/><text x="8.5344%" y="783.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,095 samples, 1.85%)</title><rect x="8.2844%" y="757" width="1.8549%" height="15" fill="rgb(248,164,17)" fg:x="9357" fg:w="2095"/><text x="8.5344%" y="767.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_data::{{closure}} (2,095 samples, 1.85%)</title><rect x="8.2844%" y="741" width="1.8549%" height="15" fill="rgb(222,171,42)" fg:x="9357" fg:w="2095"/><text x="8.5344%" y="751.50">t..</text></g><g><title>tremor_runtime::connectors::source::build_events (2,095 samples, 1.85%)</title><rect x="8.2844%" y="725" width="1.8549%" height="15" fill="rgb(243,84,45)" fg:x="9357" fg:w="2095"/><text x="8.5344%" y="735.50">t..</text></g><g><title>tremor_script::srs::EventPayload::try_new (894 samples, 0.79%)</title><rect x="9.3477%" y="709" width="0.7915%" height="15" fill="rgb(252,49,23)" fg:x="10558" fg:w="894"/><text x="9.5977%" y="719.50"></text></g><g><title>tremor_runtime::connectors::source::build_last_events::{{closure}} (484 samples, 0.43%)</title><rect x="9.7107%" y="693" width="0.4285%" height="15" fill="rgb(215,19,7)" fg:x="10968" fg:w="484"/><text x="9.9607%" y="703.50"></text></g><g><title>tremor_script::srs::ValueAndMeta::from_parts (177 samples, 0.16%)</title><rect x="9.9826%" y="677" width="0.1567%" height="15" fill="rgb(238,81,41)" fg:x="11275" fg:w="177"/><text x="10.2326%" y="687.50"></text></g><g><title>core::hint::spin_loop (185 samples, 0.16%)</title><rect x="10.2384%" y="565" width="0.1638%" height="15" fill="rgb(210,199,37)" fg:x="11564" fg:w="185"/><text x="10.4884%" y="575.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (185 samples, 0.16%)</title><rect x="10.2384%" y="549" width="0.1638%" height="15" fill="rgb(244,192,49)" fg:x="11564" fg:w="185"/><text x="10.4884%" y="559.50"></text></g><g><title>event_listener::Inner::lock (214 samples, 0.19%)</title><rect x="10.2172%" y="661" width="0.1895%" height="15" fill="rgb(226,211,11)" fg:x="11540" fg:w="214"/><text x="10.4672%" y="671.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (214 samples, 0.19%)</title><rect x="10.2172%" y="645" width="0.1895%" height="15" fill="rgb(236,162,54)" fg:x="11540" fg:w="214"/><text x="10.4672%" y="655.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (210 samples, 0.19%)</title><rect x="10.2207%" y="629" width="0.1859%" height="15" fill="rgb(220,229,9)" fg:x="11544" fg:w="210"/><text x="10.4707%" y="639.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (210 samples, 0.19%)</title><rect x="10.2207%" y="613" width="0.1859%" height="15" fill="rgb(250,87,22)" fg:x="11544" fg:w="210"/><text x="10.4707%" y="623.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (200 samples, 0.18%)</title><rect x="10.2296%" y="597" width="0.1771%" height="15" fill="rgb(239,43,17)" fg:x="11554" fg:w="200"/><text x="10.4796%" y="607.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (192 samples, 0.17%)</title><rect x="10.2367%" y="581" width="0.1700%" height="15" fill="rgb(231,177,25)" fg:x="11562" fg:w="192"/><text x="10.4867%" y="591.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (245 samples, 0.22%)</title><rect x="10.1950%" y="677" width="0.2169%" height="15" fill="rgb(219,179,1)" fg:x="11515" fg:w="245"/><text x="10.4450%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (95 samples, 0.08%)</title><rect x="10.4837%" y="629" width="0.0841%" height="15" fill="rgb(238,219,53)" fg:x="11841" fg:w="95"/><text x="10.7337%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (95 samples, 0.08%)</title><rect x="10.4837%" y="613" width="0.0841%" height="15" fill="rgb(232,167,36)" fg:x="11841" fg:w="95"/><text x="10.7337%" y="623.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (383 samples, 0.34%)</title><rect x="10.4244%" y="661" width="0.3391%" height="15" fill="rgb(244,19,51)" fg:x="11774" fg:w="383"/><text x="10.6744%" y="671.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (368 samples, 0.33%)</title><rect x="10.4376%" y="645" width="0.3258%" height="15" fill="rgb(224,6,22)" fg:x="11789" fg:w="368"/><text x="10.6876%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (221 samples, 0.20%)</title><rect x="10.5678%" y="629" width="0.1957%" height="15" fill="rgb(224,145,5)" fg:x="11936" fg:w="221"/><text x="10.8178%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_load (221 samples, 0.20%)</title><rect x="10.5678%" y="613" width="0.1957%" height="15" fill="rgb(234,130,49)" fg:x="11936" fg:w="221"/><text x="10.8178%" y="623.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (881 samples, 0.78%)</title><rect x="10.4120%" y="677" width="0.7800%" height="15" fill="rgb(254,6,2)" fg:x="11760" fg:w="881"/><text x="10.6620%" y="687.50"></text></g><g><title>event_listener::Event::notify (484 samples, 0.43%)</title><rect x="10.7635%" y="661" width="0.4285%" height="15" fill="rgb(208,96,46)" fg:x="12157" fg:w="484"/><text x="11.0135%" y="671.50"></text></g><g><title>event_listener::full_fence (477 samples, 0.42%)</title><rect x="10.7697%" y="645" width="0.4223%" height="15" fill="rgb(239,3,39)" fg:x="12164" fg:w="477"/><text x="11.0197%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (477 samples, 0.42%)</title><rect x="10.7697%" y="629" width="0.4223%" height="15" fill="rgb(233,210,1)" fg:x="12164" fg:w="477"/><text x="11.0197%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (477 samples, 0.42%)</title><rect x="10.7697%" y="613" width="0.4223%" height="15" fill="rgb(244,137,37)" fg:x="12164" fg:w="477"/><text x="11.0197%" y="623.50"></text></g><g><title>event_listener::Inner::lock (13 samples, 0.01%)</title><rect x="11.2079%" y="629" width="0.0115%" height="15" fill="rgb(240,136,2)" fg:x="12659" fg:w="13"/><text x="11.4579%" y="639.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (13 samples, 0.01%)</title><rect x="11.2079%" y="613" width="0.0115%" height="15" fill="rgb(239,18,37)" fg:x="12659" fg:w="13"/><text x="11.4579%" y="623.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (12 samples, 0.01%)</title><rect x="11.2088%" y="597" width="0.0106%" height="15" fill="rgb(218,185,22)" fg:x="12660" fg:w="12"/><text x="11.4588%" y="607.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (12 samples, 0.01%)</title><rect x="11.2088%" y="581" width="0.0106%" height="15" fill="rgb(225,218,4)" fg:x="12660" fg:w="12"/><text x="11.4588%" y="591.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (18 samples, 0.02%)</title><rect x="11.2044%" y="645" width="0.0159%" height="15" fill="rgb(230,182,32)" fg:x="12655" fg:w="18"/><text x="11.4544%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (29 samples, 0.03%)</title><rect x="11.1991%" y="677" width="0.0257%" height="15" fill="rgb(242,56,43)" fg:x="12649" fg:w="29"/><text x="11.4491%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (23 samples, 0.02%)</title><rect x="11.2044%" y="661" width="0.0204%" height="15" fill="rgb(233,99,24)" fg:x="12655" fg:w="23"/><text x="11.4544%" y="671.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (12 samples, 0.01%)</title><rect x="11.2256%" y="661" width="0.0106%" height="15" fill="rgb(234,209,42)" fg:x="12679" fg:w="12"/><text x="11.4756%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (12 samples, 0.01%)</title><rect x="11.2256%" y="645" width="0.0106%" height="15" fill="rgb(227,7,12)" fg:x="12679" fg:w="12"/><text x="11.4756%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_add (12 samples, 0.01%)</title><rect x="11.2256%" y="629" width="0.0106%" height="15" fill="rgb(245,203,43)" fg:x="12679" fg:w="12"/><text x="11.4756%" y="639.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (1,225 samples, 1.08%)</title><rect x="10.1703%" y="693" width="1.0846%" height="15" fill="rgb(238,205,33)" fg:x="11487" fg:w="1225"/><text x="10.4203%" y="703.50"></text></g><g><title>event_listener::Event::listen (34 samples, 0.03%)</title><rect x="11.2247%" y="677" width="0.0301%" height="15" fill="rgb(231,56,7)" fg:x="12678" fg:w="34"/><text x="11.4747%" y="687.50"></text></g><g><title>[libc-2.31.so] (135 samples, 0.12%)</title><rect x="11.2584%" y="677" width="0.1195%" height="15" fill="rgb(244,186,29)" fg:x="12716" fg:w="135"/><text x="11.5084%" y="687.50"></text></g><g><title>[libc-2.31.so] (433 samples, 0.38%)</title><rect x="11.3814%" y="645" width="0.3834%" height="15" fill="rgb(234,111,31)" fg:x="12855" fg:w="433"/><text x="11.6314%" y="655.50"></text></g><g><title>sn_rust_dealloc (51 samples, 0.05%)</title><rect x="11.7666%" y="565" width="0.0452%" height="15" fill="rgb(241,149,10)" fg:x="13290" fg:w="51"/><text x="12.0166%" y="575.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (2,000 samples, 1.77%)</title><rect x="10.1552%" y="725" width="1.7707%" height="15" fill="rgb(249,206,44)" fg:x="11470" fg:w="2000"/><text x="10.4052%" y="735.50">&lt;..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (1,992 samples, 1.76%)</title><rect x="10.1623%" y="709" width="1.7637%" height="15" fill="rgb(251,153,30)" fg:x="11478" fg:w="1992"/><text x="10.4123%" y="719.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (758 samples, 0.67%)</title><rect x="11.2548%" y="693" width="0.6711%" height="15" fill="rgb(239,152,38)" fg:x="12712" fg:w="758"/><text x="11.5048%" y="703.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (619 samples, 0.55%)</title><rect x="11.3779%" y="677" width="0.5480%" height="15" fill="rgb(249,139,47)" fg:x="12851" fg:w="619"/><text x="11.6279%" y="687.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}}::{{closure}} (619 samples, 0.55%)</title><rect x="11.3779%" y="661" width="0.5480%" height="15" fill="rgb(244,64,35)" fg:x="12851" fg:w="619"/><text x="11.6279%" y="671.50"></text></g><g><title>alloc::alloc::box_free (182 samples, 0.16%)</title><rect x="11.7648%" y="645" width="0.1611%" height="15" fill="rgb(216,46,15)" fg:x="13288" fg:w="182"/><text x="12.0148%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (182 samples, 0.16%)</title><rect x="11.7648%" y="629" width="0.1611%" height="15" fill="rgb(250,74,19)" fg:x="13288" fg:w="182"/><text x="12.0148%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (182 samples, 0.16%)</title><rect x="11.7648%" y="613" width="0.1611%" height="15" fill="rgb(249,42,33)" fg:x="13288" fg:w="182"/><text x="12.0148%" y="623.50"></text></g><g><title>__rg_dealloc (182 samples, 0.16%)</title><rect x="11.7648%" y="597" width="0.1611%" height="15" fill="rgb(242,149,17)" fg:x="13288" fg:w="182"/><text x="12.0148%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (182 samples, 0.16%)</title><rect x="11.7648%" y="581" width="0.1611%" height="15" fill="rgb(244,29,21)" fg:x="13288" fg:w="182"/><text x="12.0148%" y="591.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (129 samples, 0.11%)</title><rect x="11.8117%" y="565" width="0.1142%" height="15" fill="rgb(220,130,37)" fg:x="13341" fg:w="129"/><text x="12.0617%" y="575.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,587 samples, 2.29%)</title><rect x="10.1393%" y="789" width="2.2905%" height="15" fill="rgb(211,67,2)" fg:x="11452" fg:w="2587"/><text x="10.3893%" y="799.50">&lt;..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (2,587 samples, 2.29%)</title><rect x="10.1393%" y="773" width="2.2905%" height="15" fill="rgb(235,68,52)" fg:x="11452" fg:w="2587"/><text x="10.3893%" y="783.50">&lt;..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (2,587 samples, 2.29%)</title><rect x="10.1393%" y="757" width="2.2905%" height="15" fill="rgb(246,142,3)" fg:x="11452" fg:w="2587"/><text x="10.3893%" y="767.50">&lt;..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (2,587 samples, 2.29%)</title><rect x="10.1393%" y="741" width="2.2905%" height="15" fill="rgb(241,25,7)" fg:x="11452" fg:w="2587"/><text x="10.3893%" y="751.50">&lt;..</text></g><g><title>[libc-2.31.so] (569 samples, 0.50%)</title><rect x="11.9259%" y="725" width="0.5038%" height="15" fill="rgb(242,119,39)" fg:x="13470" fg:w="569"/><text x="12.1759%" y="735.50"></text></g><g><title>&lt;value_trait::generator::DumpGenerator&lt;VT&gt; as value_trait::generator::BaseGenerator&gt;::write (12 samples, 0.01%)</title><rect x="12.4501%" y="645" width="0.0106%" height="15" fill="rgb(241,98,45)" fg:x="14062" fg:w="12"/><text x="12.7001%" y="655.50"></text></g><g><title>value_trait::generator::extend_from_slice (12 samples, 0.01%)</title><rect x="12.4501%" y="629" width="0.0106%" height="15" fill="rgb(254,28,30)" fg:x="14062" fg:w="12"/><text x="12.7001%" y="639.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (67 samples, 0.06%)</title><rect x="12.4297%" y="709" width="0.0593%" height="15" fill="rgb(241,142,54)" fg:x="14039" fg:w="67"/><text x="12.6797%" y="719.50"></text></g><g><title>&lt;tremor_pipeline::op::grouper::bucket::Grouper as tremor_pipeline::op::Operator&gt;::on_event (67 samples, 0.06%)</title><rect x="12.4297%" y="693" width="0.0593%" height="15" fill="rgb(222,85,15)" fg:x="14039" fg:w="67"/><text x="12.6797%" y="703.50"></text></g><g><title>tremor_value::value::serialize::&lt;impl value_trait::Writable for tremor_value::value::Value&gt;::encode (67 samples, 0.06%)</title><rect x="12.4297%" y="677" width="0.0593%" height="15" fill="rgb(210,85,47)" fg:x="14039" fg:w="67"/><text x="12.6797%" y="687.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (67 samples, 0.06%)</title><rect x="12.4297%" y="661" width="0.0593%" height="15" fill="rgb(224,206,25)" fg:x="14039" fg:w="67"/><text x="12.6797%" y="671.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string (32 samples, 0.03%)</title><rect x="12.4607%" y="645" width="0.0283%" height="15" fill="rgb(243,201,19)" fg:x="14074" fg:w="32"/><text x="12.7107%" y="655.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (27 samples, 0.02%)</title><rect x="12.4651%" y="629" width="0.0239%" height="15" fill="rgb(236,59,4)" fg:x="14079" fg:w="27"/><text x="12.7151%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (13 samples, 0.01%)</title><rect x="12.5953%" y="629" width="0.0115%" height="15" fill="rgb(254,179,45)" fg:x="14226" fg:w="13"/><text x="12.8453%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::peekable::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="12.6068%" y="629" width="0.0142%" height="15" fill="rgb(226,14,10)" fg:x="14239" fg:w="16"/><text x="12.8568%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (29 samples, 0.03%)</title><rect x="12.8450%" y="581" width="0.0257%" height="15" fill="rgb(244,27,41)" fg:x="14508" fg:w="29"/><text x="13.0950%" y="591.50"></text></g><g><title>tremor_script::interpreter::LocalStack::with_size (259 samples, 0.23%)</title><rect x="12.6493%" y="629" width="0.2293%" height="15" fill="rgb(235,35,32)" fg:x="14287" fg:w="259"/><text x="12.8993%" y="639.50"></text></g><g><title>alloc::vec::from_elem (259 samples, 0.23%)</title><rect x="12.6493%" y="613" width="0.2293%" height="15" fill="rgb(218,68,31)" fg:x="14287" fg:w="259"/><text x="12.8993%" y="623.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (256 samples, 0.23%)</title><rect x="12.6520%" y="597" width="0.2267%" height="15" fill="rgb(207,120,37)" fg:x="14290" fg:w="256"/><text x="12.9020%" y="607.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (513 samples, 0.45%)</title><rect x="12.4297%" y="773" width="0.4542%" height="15" fill="rgb(227,98,0)" fg:x="14039" fg:w="513"/><text x="12.6797%" y="783.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (513 samples, 0.45%)</title><rect x="12.4297%" y="757" width="0.4542%" height="15" fill="rgb(207,7,3)" fg:x="14039" fg:w="513"/><text x="12.6797%" y="767.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (513 samples, 0.45%)</title><rect x="12.4297%" y="741" width="0.4542%" height="15" fill="rgb(206,98,19)" fg:x="14039" fg:w="513"/><text x="12.6797%" y="751.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (513 samples, 0.45%)</title><rect x="12.4297%" y="725" width="0.4542%" height="15" fill="rgb(217,5,26)" fg:x="14039" fg:w="513"/><text x="12.6797%" y="735.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (446 samples, 0.39%)</title><rect x="12.4890%" y="709" width="0.3949%" height="15" fill="rgb(235,190,38)" fg:x="14106" fg:w="446"/><text x="12.7390%" y="719.50"></text></g><g><title>tremor_script::srs::EventPayload::rent_mut (446 samples, 0.39%)</title><rect x="12.4890%" y="693" width="0.3949%" height="15" fill="rgb(247,86,24)" fg:x="14106" fg:w="446"/><text x="12.7390%" y="703.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (446 samples, 0.39%)</title><rect x="12.4890%" y="677" width="0.3949%" height="15" fill="rgb(205,101,16)" fg:x="14106" fg:w="446"/><text x="12.7390%" y="687.50"></text></g><g><title>tremor_script::script::Script::run (446 samples, 0.39%)</title><rect x="12.4890%" y="661" width="0.3949%" height="15" fill="rgb(246,168,33)" fg:x="14106" fg:w="446"/><text x="12.7390%" y="671.50"></text></g><g><title>tremor_script::ast::Script::run (446 samples, 0.39%)</title><rect x="12.4890%" y="645" width="0.3949%" height="15" fill="rgb(231,114,1)" fg:x="14106" fg:w="446"/><text x="12.7390%" y="655.50"></text></g><g><title>[libc-2.31.so] (69 samples, 0.06%)</title><rect x="12.8848%" y="741" width="0.0611%" height="15" fill="rgb(207,184,53)" fg:x="14553" fg:w="69"/><text x="13.1348%" y="751.50"></text></g><g><title>[libc-2.31.so] (491 samples, 0.43%)</title><rect x="13.0477%" y="725" width="0.4347%" height="15" fill="rgb(224,95,51)" fg:x="14737" fg:w="491"/><text x="13.2977%" y="735.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,911 samples, 6.12%)</title><rect x="7.3716%" y="949" width="6.1188%" height="15" fill="rgb(212,188,45)" fg:x="8326" fg:w="6911"/><text x="7.6216%" y="959.50">&lt;core::f..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (5,880 samples, 5.21%)</title><rect x="8.2844%" y="933" width="5.2060%" height="15" fill="rgb(223,154,38)" fg:x="9357" fg:w="5880"/><text x="8.5344%" y="943.50">async_..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (5,880 samples, 5.21%)</title><rect x="8.2844%" y="917" width="5.2060%" height="15" fill="rgb(251,22,52)" fg:x="9357" fg:w="5880"/><text x="8.5344%" y="927.50">&lt;async..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (5,880 samples, 5.21%)</title><rect x="8.2844%" y="901" width="5.2060%" height="15" fill="rgb(229,209,22)" fg:x="9357" fg:w="5880"/><text x="8.5344%" y="911.50">async_..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (5,880 samples, 5.21%)</title><rect x="8.2844%" y="885" width="5.2060%" height="15" fill="rgb(234,138,34)" fg:x="9357" fg:w="5880"/><text x="8.5344%" y="895.50">std::t..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (5,880 samples, 5.21%)</title><rect x="8.2844%" y="869" width="5.2060%" height="15" fill="rgb(212,95,11)" fg:x="9357" fg:w="5880"/><text x="8.5344%" y="879.50">std::t..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (5,880 samples, 5.21%)</title><rect x="8.2844%" y="853" width="5.2060%" height="15" fill="rgb(240,179,47)" fg:x="9357" fg:w="5880"/><text x="8.5344%" y="863.50">async_..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (5,880 samples, 5.21%)</title><rect x="8.2844%" y="837" width="5.2060%" height="15" fill="rgb(240,163,11)" fg:x="9357" fg:w="5880"/><text x="8.5344%" y="847.50">&lt;async..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,880 samples, 5.21%)</title><rect x="8.2844%" y="821" width="5.2060%" height="15" fill="rgb(236,37,12)" fg:x="9357" fg:w="5880"/><text x="8.5344%" y="831.50">&lt;core:..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (3,785 samples, 3.35%)</title><rect x="10.1393%" y="805" width="3.3511%" height="15" fill="rgb(232,164,16)" fg:x="11452" fg:w="3785"/><text x="10.3893%" y="815.50">tre..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,198 samples, 1.06%)</title><rect x="12.4297%" y="789" width="1.0607%" height="15" fill="rgb(244,205,15)" fg:x="14039" fg:w="1198"/><text x="12.6797%" y="799.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (685 samples, 0.61%)</title><rect x="12.8839%" y="773" width="0.6065%" height="15" fill="rgb(223,117,47)" fg:x="14552" fg:w="685"/><text x="13.1339%" y="783.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (685 samples, 0.61%)</title><rect x="12.8839%" y="757" width="0.6065%" height="15" fill="rgb(244,107,35)" fg:x="14552" fg:w="685"/><text x="13.1339%" y="767.50"></text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (615 samples, 0.54%)</title><rect x="12.9459%" y="741" width="0.5445%" height="15" fill="rgb(205,140,8)" fg:x="14622" fg:w="615"/><text x="13.1959%" y="751.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (13 samples, 0.01%)</title><rect x="13.4904%" y="949" width="0.0115%" height="15" fill="rgb(228,84,46)" fg:x="15237" fg:w="13"/><text x="13.7404%" y="959.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (37 samples, 0.03%)</title><rect x="13.5267%" y="853" width="0.0328%" height="15" fill="rgb(254,188,9)" fg:x="15278" fg:w="37"/><text x="13.7767%" y="863.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (37 samples, 0.03%)</title><rect x="13.5267%" y="837" width="0.0328%" height="15" fill="rgb(206,112,54)" fg:x="15278" fg:w="37"/><text x="13.7767%" y="847.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (37 samples, 0.03%)</title><rect x="13.5267%" y="821" width="0.0328%" height="15" fill="rgb(216,84,49)" fg:x="15278" fg:w="37"/><text x="13.7767%" y="831.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (37 samples, 0.03%)</title><rect x="13.5267%" y="805" width="0.0328%" height="15" fill="rgb(214,194,35)" fg:x="15278" fg:w="37"/><text x="13.7767%" y="815.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (124 samples, 0.11%)</title><rect x="13.5232%" y="949" width="0.1098%" height="15" fill="rgb(249,28,3)" fg:x="15274" fg:w="124"/><text x="13.7732%" y="959.50"></text></g><g><title>tremor_script::srs::EventPayload::rent_mut (120 samples, 0.11%)</title><rect x="13.5267%" y="933" width="0.1062%" height="15" fill="rgb(222,56,52)" fg:x="15278" fg:w="120"/><text x="13.7767%" y="943.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (120 samples, 0.11%)</title><rect x="13.5267%" y="917" width="0.1062%" height="15" fill="rgb(245,217,50)" fg:x="15278" fg:w="120"/><text x="13.7767%" y="927.50"></text></g><g><title>tremor_script::script::Script::run (120 samples, 0.11%)</title><rect x="13.5267%" y="901" width="0.1062%" height="15" fill="rgb(213,201,24)" fg:x="15278" fg:w="120"/><text x="13.7767%" y="911.50"></text></g><g><title>tremor_script::ast::Script::run (120 samples, 0.11%)</title><rect x="13.5267%" y="885" width="0.1062%" height="15" fill="rgb(248,116,28)" fg:x="15278" fg:w="120"/><text x="13.7767%" y="895.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (120 samples, 0.11%)</title><rect x="13.5267%" y="869" width="0.1062%" height="15" fill="rgb(219,72,43)" fg:x="15278" fg:w="120"/><text x="13.7767%" y="879.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (83 samples, 0.07%)</title><rect x="13.5595%" y="853" width="0.0735%" height="15" fill="rgb(209,138,14)" fg:x="15315" fg:w="83"/><text x="13.8095%" y="863.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (83 samples, 0.07%)</title><rect x="13.5595%" y="837" width="0.0735%" height="15" fill="rgb(222,18,33)" fg:x="15315" fg:w="83"/><text x="13.8095%" y="847.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (83 samples, 0.07%)</title><rect x="13.5595%" y="821" width="0.0735%" height="15" fill="rgb(213,199,7)" fg:x="15315" fg:w="83"/><text x="13.8095%" y="831.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (83 samples, 0.07%)</title><rect x="13.5595%" y="805" width="0.0735%" height="15" fill="rgb(250,110,10)" fg:x="15315" fg:w="83"/><text x="13.8095%" y="815.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (83 samples, 0.07%)</title><rect x="13.5595%" y="789" width="0.0735%" height="15" fill="rgb(248,123,6)" fg:x="15315" fg:w="83"/><text x="13.8095%" y="799.50"></text></g><g><title>tremor_script::interpreter::resolve (20 samples, 0.02%)</title><rect x="13.6152%" y="773" width="0.0177%" height="15" fill="rgb(206,91,31)" fg:x="15378" fg:w="20"/><text x="13.8652%" y="783.50"></text></g><g><title>&lt;tremor_runtime::codec::msgpack::MsgPack as tremor_runtime::codec::Codec&gt;::encode (36 samples, 0.03%)</title><rect x="13.6338%" y="949" width="0.0319%" height="15" fill="rgb(211,154,13)" fg:x="15399" fg:w="36"/><text x="13.8838%" y="959.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (17 samples, 0.02%)</title><rect x="13.6701%" y="949" width="0.0151%" height="15" fill="rgb(225,148,7)" fg:x="15440" fg:w="17"/><text x="13.9201%" y="959.50"></text></g><g><title>[libc-2.31.so] (173 samples, 0.15%)</title><rect x="13.6985%" y="949" width="0.1532%" height="15" fill="rgb(220,160,43)" fg:x="15472" fg:w="173"/><text x="13.9485%" y="959.50"></text></g><g><title>__clock_gettime (30 samples, 0.03%)</title><rect x="13.8516%" y="949" width="0.0266%" height="15" fill="rgb(213,52,39)" fg:x="15645" fg:w="30"/><text x="14.1016%" y="959.50"></text></g><g><title>__vdso_clock_gettime (18 samples, 0.02%)</title><rect x="13.8791%" y="949" width="0.0159%" height="15" fill="rgb(243,137,7)" fg:x="15676" fg:w="18"/><text x="14.1291%" y="959.50"></text></g><g><title>alloc::raw_vec::finish_grow (80 samples, 0.07%)</title><rect x="13.9012%" y="949" width="0.0708%" height="15" fill="rgb(230,79,13)" fg:x="15701" fg:w="80"/><text x="14.1512%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (16 samples, 0.01%)</title><rect x="13.9579%" y="933" width="0.0142%" height="15" fill="rgb(247,105,23)" fg:x="15765" fg:w="16"/><text x="14.2079%" y="943.50"></text></g><g><title>alloc::alloc::Global::grow_impl (16 samples, 0.01%)</title><rect x="13.9579%" y="917" width="0.0142%" height="15" fill="rgb(223,179,41)" fg:x="15765" fg:w="16"/><text x="14.2079%" y="927.50"></text></g><g><title>alloc::alloc::realloc (16 samples, 0.01%)</title><rect x="13.9579%" y="901" width="0.0142%" height="15" fill="rgb(218,9,34)" fg:x="15765" fg:w="16"/><text x="14.2079%" y="911.50"></text></g><g><title>__rg_realloc (16 samples, 0.01%)</title><rect x="13.9579%" y="885" width="0.0142%" height="15" fill="rgb(222,106,8)" fg:x="15765" fg:w="16"/><text x="14.2079%" y="895.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (16 samples, 0.01%)</title><rect x="13.9579%" y="869" width="0.0142%" height="15" fill="rgb(211,220,0)" fg:x="15765" fg:w="16"/><text x="14.2079%" y="879.50"></text></g><g><title>async_executor::Ticker::sleep (17 samples, 0.02%)</title><rect x="13.9774%" y="949" width="0.0151%" height="15" fill="rgb(229,52,16)" fg:x="15787" fg:w="17"/><text x="14.2274%" y="959.50"></text></g><g><title>async_executor::steal (106 samples, 0.09%)</title><rect x="13.9924%" y="949" width="0.0938%" height="15" fill="rgb(212,155,18)" fg:x="15804" fg:w="106"/><text x="14.2424%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (32 samples, 0.03%)</title><rect x="14.1323%" y="469" width="0.0283%" height="15" fill="rgb(242,21,14)" fg:x="15962" fg:w="32"/><text x="14.3823%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_add (32 samples, 0.03%)</title><rect x="14.1323%" y="453" width="0.0283%" height="15" fill="rgb(222,19,48)" fg:x="15962" fg:w="32"/><text x="14.3823%" y="463.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (35 samples, 0.03%)</title><rect x="14.1323%" y="501" width="0.0310%" height="15" fill="rgb(232,45,27)" fg:x="15962" fg:w="35"/><text x="14.3823%" y="511.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (35 samples, 0.03%)</title><rect x="14.1323%" y="485" width="0.0310%" height="15" fill="rgb(249,103,42)" fg:x="15962" fg:w="35"/><text x="14.3823%" y="495.50"></text></g><g><title>core::mem::drop (26 samples, 0.02%)</title><rect x="14.1704%" y="501" width="0.0230%" height="15" fill="rgb(246,81,33)" fg:x="16005" fg:w="26"/><text x="14.4204%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (26 samples, 0.02%)</title><rect x="14.1704%" y="485" width="0.0230%" height="15" fill="rgb(252,33,42)" fg:x="16005" fg:w="26"/><text x="14.4204%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (23 samples, 0.02%)</title><rect x="14.1730%" y="469" width="0.0204%" height="15" fill="rgb(209,212,41)" fg:x="16008" fg:w="23"/><text x="14.4230%" y="479.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="14.1730%" y="453" width="0.0204%" height="15" fill="rgb(207,154,6)" fg:x="16008" fg:w="23"/><text x="14.4230%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (21 samples, 0.02%)</title><rect x="14.1748%" y="437" width="0.0186%" height="15" fill="rgb(223,64,47)" fg:x="16010" fg:w="21"/><text x="14.4248%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (21 samples, 0.02%)</title><rect x="14.1748%" y="421" width="0.0186%" height="15" fill="rgb(211,161,38)" fg:x="16010" fg:w="21"/><text x="14.4248%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (21 samples, 0.02%)</title><rect x="14.1748%" y="405" width="0.0186%" height="15" fill="rgb(219,138,40)" fg:x="16010" fg:w="21"/><text x="14.4248%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_swap (21 samples, 0.02%)</title><rect x="14.1748%" y="389" width="0.0186%" height="15" fill="rgb(241,228,46)" fg:x="16010" fg:w="21"/><text x="14.4248%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (38 samples, 0.03%)</title><rect x="14.1934%" y="501" width="0.0336%" height="15" fill="rgb(223,209,38)" fg:x="16031" fg:w="38"/><text x="14.4434%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (37 samples, 0.03%)</title><rect x="14.1943%" y="485" width="0.0328%" height="15" fill="rgb(236,164,45)" fg:x="16032" fg:w="37"/><text x="14.4443%" y="495.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.03%)</title><rect x="14.1943%" y="469" width="0.0328%" height="15" fill="rgb(231,15,5)" fg:x="16032" fg:w="37"/><text x="14.4443%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (37 samples, 0.03%)</title><rect x="14.1943%" y="453" width="0.0328%" height="15" fill="rgb(252,35,15)" fg:x="16032" fg:w="37"/><text x="14.4443%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (37 samples, 0.03%)</title><rect x="14.1943%" y="437" width="0.0328%" height="15" fill="rgb(248,181,18)" fg:x="16032" fg:w="37"/><text x="14.4443%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (37 samples, 0.03%)</title><rect x="14.1943%" y="421" width="0.0328%" height="15" fill="rgb(233,39,42)" fg:x="16032" fg:w="37"/><text x="14.4443%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_swap (37 samples, 0.03%)</title><rect x="14.1943%" y="405" width="0.0328%" height="15" fill="rgb(238,110,33)" fg:x="16032" fg:w="37"/><text x="14.4443%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (111 samples, 0.10%)</title><rect x="14.2368%" y="437" width="0.0983%" height="15" fill="rgb(233,195,10)" fg:x="16080" fg:w="111"/><text x="14.4868%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (111 samples, 0.10%)</title><rect x="14.2368%" y="421" width="0.0983%" height="15" fill="rgb(254,105,3)" fg:x="16080" fg:w="111"/><text x="14.4868%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (27 samples, 0.02%)</title><rect x="14.3421%" y="421" width="0.0239%" height="15" fill="rgb(221,225,9)" fg:x="16199" fg:w="27"/><text x="14.5921%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (27 samples, 0.02%)</title><rect x="14.3421%" y="405" width="0.0239%" height="15" fill="rgb(224,227,45)" fg:x="16199" fg:w="27"/><text x="14.5921%" y="415.50"></text></g><g><title>core::hint::spin_loop (1,131 samples, 1.00%)</title><rect x="14.3713%" y="405" width="1.0014%" height="15" fill="rgb(229,198,43)" fg:x="16232" fg:w="1131"/><text x="14.6213%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (1,131 samples, 1.00%)</title><rect x="14.3713%" y="389" width="1.0014%" height="15" fill="rgb(206,209,35)" fg:x="16232" fg:w="1131"/><text x="14.6213%" y="399.50"></text></g><g><title>event_listener::Inner::lock (1,337 samples, 1.18%)</title><rect x="14.2297%" y="501" width="1.1837%" height="15" fill="rgb(245,195,53)" fg:x="16072" fg:w="1337"/><text x="14.4797%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (1,335 samples, 1.18%)</title><rect x="14.2315%" y="485" width="1.1820%" height="15" fill="rgb(240,92,26)" fg:x="16074" fg:w="1335"/><text x="14.4815%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (1,331 samples, 1.18%)</title><rect x="14.2350%" y="469" width="1.1784%" height="15" fill="rgb(207,40,23)" fg:x="16078" fg:w="1331"/><text x="14.4850%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (1,331 samples, 1.18%)</title><rect x="14.2350%" y="453" width="1.1784%" height="15" fill="rgb(223,111,35)" fg:x="16078" fg:w="1331"/><text x="14.4850%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (1,218 samples, 1.08%)</title><rect x="14.3350%" y="437" width="1.0784%" height="15" fill="rgb(229,147,28)" fg:x="16191" fg:w="1218"/><text x="14.5850%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (1,183 samples, 1.05%)</title><rect x="14.3660%" y="421" width="1.0474%" height="15" fill="rgb(211,29,28)" fg:x="16226" fg:w="1183"/><text x="14.6160%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (46 samples, 0.04%)</title><rect x="15.3727%" y="405" width="0.0407%" height="15" fill="rgb(228,72,33)" fg:x="17363" fg:w="46"/><text x="15.6227%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (46 samples, 0.04%)</title><rect x="15.3727%" y="389" width="0.0407%" height="15" fill="rgb(205,214,31)" fg:x="17363" fg:w="46"/><text x="15.6227%" y="399.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (1,517 samples, 1.34%)</title><rect x="14.1128%" y="517" width="1.3431%" height="15" fill="rgb(224,111,15)" fg:x="15940" fg:w="1517"/><text x="14.3628%" y="527.50"></text></g><g><title>event_listener::List::remove (48 samples, 0.04%)</title><rect x="15.4134%" y="501" width="0.0425%" height="15" fill="rgb(253,21,26)" fg:x="17409" fg:w="48"/><text x="15.6634%" y="511.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (25 samples, 0.02%)</title><rect x="15.4338%" y="485" width="0.0221%" height="15" fill="rgb(245,139,43)" fg:x="17432" fg:w="25"/><text x="15.6838%" y="495.50"></text></g><g><title>core::mem::replace (25 samples, 0.02%)</title><rect x="15.4338%" y="469" width="0.0221%" height="15" fill="rgb(252,170,7)" fg:x="17432" fg:w="25"/><text x="15.6838%" y="479.50"></text></g><g><title>core::ptr::read (25 samples, 0.02%)</title><rect x="15.4338%" y="453" width="0.0221%" height="15" fill="rgb(231,118,14)" fg:x="17432" fg:w="25"/><text x="15.6838%" y="463.50"></text></g><g><title>[libc-2.31.so] (315 samples, 0.28%)</title><rect x="15.4559%" y="517" width="0.2789%" height="15" fill="rgb(238,83,0)" fg:x="17457" fg:w="315"/><text x="15.7059%" y="527.50"></text></g><g><title>[libc-2.31.so] (815 samples, 0.72%)</title><rect x="15.7578%" y="501" width="0.7216%" height="15" fill="rgb(221,39,39)" fg:x="17798" fg:w="815"/><text x="16.0078%" y="511.50"></text></g><g><title>[libc-2.31.so] (120 samples, 0.11%)</title><rect x="16.6246%" y="469" width="0.1062%" height="15" fill="rgb(222,119,46)" fg:x="18777" fg:w="120"/><text x="16.8746%" y="479.50"></text></g><g><title>concurrent_queue::full_fence (202 samples, 0.18%)</title><rect x="16.7309%" y="469" width="0.1788%" height="15" fill="rgb(222,165,49)" fg:x="18897" fg:w="202"/><text x="16.9809%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (196 samples, 0.17%)</title><rect x="16.7362%" y="453" width="0.1735%" height="15" fill="rgb(219,113,52)" fg:x="18903" fg:w="196"/><text x="16.9862%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (196 samples, 0.17%)</title><rect x="16.7362%" y="437" width="0.1735%" height="15" fill="rgb(214,7,15)" fg:x="18903" fg:w="196"/><text x="16.9862%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (196 samples, 0.17%)</title><rect x="16.7362%" y="421" width="0.1735%" height="15" fill="rgb(235,32,4)" fg:x="18903" fg:w="196"/><text x="16.9862%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (609 samples, 0.54%)</title><rect x="16.9115%" y="469" width="0.5392%" height="15" fill="rgb(238,90,54)" fg:x="19101" fg:w="609"/><text x="17.1615%" y="479.50"></text></g><g><title>core::ptr::read (609 samples, 0.54%)</title><rect x="16.9115%" y="453" width="0.5392%" height="15" fill="rgb(213,208,19)" fg:x="19101" fg:w="609"/><text x="17.1615%" y="463.50"></text></g><g><title>[libc-2.31.so] (609 samples, 0.54%)</title><rect x="16.9115%" y="437" width="0.5392%" height="15" fill="rgb(233,156,4)" fg:x="19101" fg:w="609"/><text x="17.1615%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (340 samples, 0.30%)</title><rect x="17.4507%" y="469" width="0.3010%" height="15" fill="rgb(207,194,5)" fg:x="19710" fg:w="340"/><text x="17.7007%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (340 samples, 0.30%)</title><rect x="17.4507%" y="453" width="0.3010%" height="15" fill="rgb(206,111,30)" fg:x="19710" fg:w="340"/><text x="17.7007%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (547 samples, 0.48%)</title><rect x="17.7517%" y="469" width="0.4843%" height="15" fill="rgb(243,70,54)" fg:x="20050" fg:w="547"/><text x="18.0017%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_load (547 samples, 0.48%)</title><rect x="17.7517%" y="453" width="0.4843%" height="15" fill="rgb(242,28,8)" fg:x="20050" fg:w="547"/><text x="18.0017%" y="463.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (1,985 samples, 1.76%)</title><rect x="16.4794%" y="501" width="1.7575%" height="15" fill="rgb(219,106,18)" fg:x="18613" fg:w="1985"/><text x="16.7294%" y="511.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (1,965 samples, 1.74%)</title><rect x="16.4971%" y="485" width="1.7398%" height="15" fill="rgb(244,222,10)" fg:x="18633" fg:w="1965"/><text x="16.7471%" y="495.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (3,018 samples, 2.67%)</title><rect x="15.7348%" y="517" width="2.6720%" height="15" fill="rgb(236,179,52)" fg:x="17772" fg:w="3018"/><text x="15.9848%" y="527.50">as..</text></g><g><title>event_listener::Event::notify (192 samples, 0.17%)</title><rect x="18.2369%" y="501" width="0.1700%" height="15" fill="rgb(213,23,39)" fg:x="20598" fg:w="192"/><text x="18.4869%" y="511.50"></text></g><g><title>event_listener::full_fence (174 samples, 0.15%)</title><rect x="18.2528%" y="485" width="0.1541%" height="15" fill="rgb(238,48,10)" fg:x="20616" fg:w="174"/><text x="18.5028%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (173 samples, 0.15%)</title><rect x="18.2537%" y="469" width="0.1532%" height="15" fill="rgb(251,196,23)" fg:x="20617" fg:w="173"/><text x="18.5037%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (173 samples, 0.15%)</title><rect x="18.2537%" y="453" width="0.1532%" height="15" fill="rgb(250,152,24)" fg:x="20617" fg:w="173"/><text x="18.5037%" y="463.50"></text></g><g><title>event_listener::Inner::lock (15 samples, 0.01%)</title><rect x="18.4272%" y="469" width="0.0133%" height="15" fill="rgb(209,150,17)" fg:x="20813" fg:w="15"/><text x="18.6772%" y="479.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (15 samples, 0.01%)</title><rect x="18.4272%" y="453" width="0.0133%" height="15" fill="rgb(234,202,34)" fg:x="20813" fg:w="15"/><text x="18.6772%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (14 samples, 0.01%)</title><rect x="18.4281%" y="437" width="0.0124%" height="15" fill="rgb(253,148,53)" fg:x="20814" fg:w="14"/><text x="18.6781%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (14 samples, 0.01%)</title><rect x="18.4281%" y="421" width="0.0124%" height="15" fill="rgb(218,129,16)" fg:x="20814" fg:w="14"/><text x="18.6781%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (14 samples, 0.01%)</title><rect x="18.4281%" y="405" width="0.0124%" height="15" fill="rgb(216,85,19)" fg:x="20814" fg:w="14"/><text x="18.6781%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (14 samples, 0.01%)</title><rect x="18.4281%" y="389" width="0.0124%" height="15" fill="rgb(235,228,7)" fg:x="20814" fg:w="14"/><text x="18.6781%" y="399.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (28 samples, 0.02%)</title><rect x="18.4201%" y="485" width="0.0248%" height="15" fill="rgb(245,175,0)" fg:x="20805" fg:w="28"/><text x="18.6701%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (83 samples, 0.07%)</title><rect x="18.4113%" y="517" width="0.0735%" height="15" fill="rgb(208,168,36)" fg:x="20795" fg:w="83"/><text x="18.6613%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (73 samples, 0.06%)</title><rect x="18.4201%" y="501" width="0.0646%" height="15" fill="rgb(246,171,24)" fg:x="20805" fg:w="73"/><text x="18.6701%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (45 samples, 0.04%)</title><rect x="18.4449%" y="485" width="0.0398%" height="15" fill="rgb(215,142,24)" fg:x="20833" fg:w="45"/><text x="18.6949%" y="495.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (45 samples, 0.04%)</title><rect x="18.4449%" y="469" width="0.0398%" height="15" fill="rgb(250,187,7)" fg:x="20833" fg:w="45"/><text x="18.6949%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (45 samples, 0.04%)</title><rect x="18.4449%" y="453" width="0.0398%" height="15" fill="rgb(228,66,33)" fg:x="20833" fg:w="45"/><text x="18.6949%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_sub (45 samples, 0.04%)</title><rect x="18.4449%" y="437" width="0.0398%" height="15" fill="rgb(234,215,21)" fg:x="20833" fg:w="45"/><text x="18.6949%" y="447.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (42 samples, 0.04%)</title><rect x="18.4910%" y="501" width="0.0372%" height="15" fill="rgb(222,191,20)" fg:x="20885" fg:w="42"/><text x="18.7410%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (42 samples, 0.04%)</title><rect x="18.4910%" y="485" width="0.0372%" height="15" fill="rgb(245,79,54)" fg:x="20885" fg:w="42"/><text x="18.7410%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_add (42 samples, 0.04%)</title><rect x="18.4910%" y="469" width="0.0372%" height="15" fill="rgb(240,10,37)" fg:x="20885" fg:w="42"/><text x="18.7410%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (76 samples, 0.07%)</title><rect x="18.5282%" y="501" width="0.0673%" height="15" fill="rgb(214,192,32)" fg:x="20927" fg:w="76"/><text x="18.7782%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (73 samples, 0.06%)</title><rect x="18.5308%" y="485" width="0.0646%" height="15" fill="rgb(209,36,54)" fg:x="20930" fg:w="73"/><text x="18.7808%" y="495.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (73 samples, 0.06%)</title><rect x="18.5308%" y="469" width="0.0646%" height="15" fill="rgb(220,10,11)" fg:x="20930" fg:w="73"/><text x="18.7808%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (73 samples, 0.06%)</title><rect x="18.5308%" y="453" width="0.0646%" height="15" fill="rgb(221,106,17)" fg:x="20930" fg:w="73"/><text x="18.7808%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (73 samples, 0.06%)</title><rect x="18.5308%" y="437" width="0.0646%" height="15" fill="rgb(251,142,44)" fg:x="20930" fg:w="73"/><text x="18.7808%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (73 samples, 0.06%)</title><rect x="18.5308%" y="421" width="0.0646%" height="15" fill="rgb(238,13,15)" fg:x="20930" fg:w="73"/><text x="18.7808%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_swap (73 samples, 0.06%)</title><rect x="18.5308%" y="405" width="0.0646%" height="15" fill="rgb(208,107,27)" fg:x="20930" fg:w="73"/><text x="18.7808%" y="415.50"></text></g><g><title>event_listener::Inner::lock (26 samples, 0.02%)</title><rect x="18.5972%" y="501" width="0.0230%" height="15" fill="rgb(205,136,37)" fg:x="21005" fg:w="26"/><text x="18.8472%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (25 samples, 0.02%)</title><rect x="18.5981%" y="485" width="0.0221%" height="15" fill="rgb(250,205,27)" fg:x="21006" fg:w="25"/><text x="18.8481%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (22 samples, 0.02%)</title><rect x="18.6008%" y="469" width="0.0195%" height="15" fill="rgb(210,80,43)" fg:x="21009" fg:w="22"/><text x="18.8508%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (22 samples, 0.02%)</title><rect x="18.6008%" y="453" width="0.0195%" height="15" fill="rgb(247,160,36)" fg:x="21009" fg:w="22"/><text x="18.8508%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (22 samples, 0.02%)</title><rect x="18.6008%" y="437" width="0.0195%" height="15" fill="rgb(234,13,49)" fg:x="21009" fg:w="22"/><text x="18.8508%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (22 samples, 0.02%)</title><rect x="18.6008%" y="421" width="0.0195%" height="15" fill="rgb(234,122,0)" fg:x="21009" fg:w="22"/><text x="18.8508%" y="431.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,163 samples, 4.57%)</title><rect x="14.0871%" y="597" width="4.5712%" height="15" fill="rgb(207,146,38)" fg:x="15911" fg:w="5163"/><text x="14.3371%" y="607.50">&lt;asyn..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (5,163 samples, 4.57%)</title><rect x="14.0871%" y="581" width="4.5712%" height="15" fill="rgb(207,177,25)" fg:x="15911" fg:w="5163"/><text x="14.3371%" y="591.50">&lt;trem..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (5,163 samples, 4.57%)</title><rect x="14.0871%" y="565" width="4.5712%" height="15" fill="rgb(211,178,42)" fg:x="15911" fg:w="5163"/><text x="14.3371%" y="575.50">&lt;asyn..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (5,163 samples, 4.57%)</title><rect x="14.0871%" y="549" width="4.5712%" height="15" fill="rgb(230,69,54)" fg:x="15911" fg:w="5163"/><text x="14.3371%" y="559.50">&lt;asyn..</text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (5,163 samples, 4.57%)</title><rect x="14.0871%" y="533" width="4.5712%" height="15" fill="rgb(214,135,41)" fg:x="15911" fg:w="5163"/><text x="14.3371%" y="543.50">&lt;asyn..</text></g><g><title>event_listener::Event::listen (196 samples, 0.17%)</title><rect x="18.4848%" y="517" width="0.1735%" height="15" fill="rgb(237,67,25)" fg:x="20878" fg:w="196"/><text x="18.7348%" y="527.50"></text></g><g><title>event_listener::full_fence (35 samples, 0.03%)</title><rect x="18.6273%" y="501" width="0.0310%" height="15" fill="rgb(222,189,50)" fg:x="21039" fg:w="35"/><text x="18.8773%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (34 samples, 0.03%)</title><rect x="18.6282%" y="485" width="0.0301%" height="15" fill="rgb(245,148,34)" fg:x="21040" fg:w="34"/><text x="18.8782%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (34 samples, 0.03%)</title><rect x="18.6282%" y="469" width="0.0301%" height="15" fill="rgb(222,29,6)" fg:x="21040" fg:w="34"/><text x="18.8782%" y="479.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (76 samples, 0.07%)</title><rect x="18.6858%" y="501" width="0.0673%" height="15" fill="rgb(221,189,43)" fg:x="21105" fg:w="76"/><text x="18.9358%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (56 samples, 0.05%)</title><rect x="18.7991%" y="469" width="0.0496%" height="15" fill="rgb(207,36,27)" fg:x="21233" fg:w="56"/><text x="19.0491%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (56 samples, 0.05%)</title><rect x="18.7991%" y="453" width="0.0496%" height="15" fill="rgb(217,90,24)" fg:x="21233" fg:w="56"/><text x="19.0491%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (52 samples, 0.05%)</title><rect x="18.8026%" y="437" width="0.0460%" height="15" fill="rgb(224,66,35)" fg:x="21237" fg:w="52"/><text x="19.0526%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (52 samples, 0.05%)</title><rect x="18.8026%" y="421" width="0.0460%" height="15" fill="rgb(221,13,50)" fg:x="21237" fg:w="52"/><text x="19.0526%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (52 samples, 0.05%)</title><rect x="18.8026%" y="405" width="0.0460%" height="15" fill="rgb(236,68,49)" fg:x="21237" fg:w="52"/><text x="19.0526%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (52 samples, 0.05%)</title><rect x="18.8026%" y="389" width="0.0460%" height="15" fill="rgb(229,146,28)" fg:x="21237" fg:w="52"/><text x="19.0526%" y="399.50"></text></g><g><title>alloc::alloc::alloc (52 samples, 0.05%)</title><rect x="18.8026%" y="373" width="0.0460%" height="15" fill="rgb(225,31,38)" fg:x="21237" fg:w="52"/><text x="19.0526%" y="383.50"></text></g><g><title>__rg_alloc (52 samples, 0.05%)</title><rect x="18.8026%" y="357" width="0.0460%" height="15" fill="rgb(250,208,3)" fg:x="21237" fg:w="52"/><text x="19.0526%" y="367.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (52 samples, 0.05%)</title><rect x="18.8026%" y="341" width="0.0460%" height="15" fill="rgb(246,54,23)" fg:x="21237" fg:w="52"/><text x="19.0526%" y="351.50"></text></g><g><title>sn_rust_alloc (45 samples, 0.04%)</title><rect x="18.8088%" y="325" width="0.0398%" height="15" fill="rgb(243,76,11)" fg:x="21244" fg:w="45"/><text x="19.0588%" y="335.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_map::{{closure}} (21 samples, 0.02%)</title><rect x="18.9682%" y="389" width="0.0186%" height="15" fill="rgb(245,21,50)" fg:x="21424" fg:w="21"/><text x="19.2182%" y="399.50"></text></g><g><title>rmp::encode::write_map_len (21 samples, 0.02%)</title><rect x="18.9682%" y="373" width="0.0186%" height="15" fill="rgb(228,9,43)" fg:x="21424" fg:w="21"/><text x="19.2182%" y="383.50"></text></g><g><title>rmp::encode::write_marker (14 samples, 0.01%)</title><rect x="18.9744%" y="357" width="0.0124%" height="15" fill="rgb(208,100,47)" fg:x="21431" fg:w="14"/><text x="19.2244%" y="367.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_map (25 samples, 0.02%)</title><rect x="18.9682%" y="421" width="0.0221%" height="15" fill="rgb(232,26,8)" fg:x="21424" fg:w="25"/><text x="19.2182%" y="431.50"></text></g><g><title>rmp_serde::encode::Serializer&lt;W,C&gt;::maybe_unknown_len_compound (25 samples, 0.02%)</title><rect x="18.9682%" y="405" width="0.0221%" height="15" fill="rgb(216,166,38)" fg:x="21424" fg:w="25"/><text x="19.2182%" y="415.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::deref::Deref&gt;::deref (343 samples, 0.30%)</title><rect x="18.9903%" y="421" width="0.3037%" height="15" fill="rgb(251,202,51)" fg:x="21449" fg:w="343"/><text x="19.2403%" y="431.50"></text></g><g><title>beef::generic::Cow&lt;T,U&gt;::borrow (343 samples, 0.30%)</title><rect x="18.9903%" y="405" width="0.3037%" height="15" fill="rgb(254,216,34)" fg:x="21449" fg:w="343"/><text x="19.2403%" y="415.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (71 samples, 0.06%)</title><rect x="19.2940%" y="421" width="0.0629%" height="15" fill="rgb(251,32,27)" fg:x="21792" fg:w="71"/><text x="19.5440%" y="431.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::len (122 samples, 0.11%)</title><rect x="19.3693%" y="421" width="0.1080%" height="15" fill="rgb(208,127,28)" fg:x="21877" fg:w="122"/><text x="19.6193%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (49 samples, 0.04%)</title><rect x="19.5339%" y="373" width="0.0434%" height="15" fill="rgb(224,137,22)" fg:x="22063" fg:w="49"/><text x="19.7839%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (62 samples, 0.05%)</title><rect x="19.7969%" y="197" width="0.0549%" height="15" fill="rgb(254,70,32)" fg:x="22360" fg:w="62"/><text x="20.0469%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (62 samples, 0.05%)</title><rect x="19.7969%" y="181" width="0.0549%" height="15" fill="rgb(229,75,37)" fg:x="22360" fg:w="62"/><text x="20.0469%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (102 samples, 0.09%)</title><rect x="19.7686%" y="229" width="0.0903%" height="15" fill="rgb(252,64,23)" fg:x="22328" fg:w="102"/><text x="20.0186%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (87 samples, 0.08%)</title><rect x="19.7818%" y="213" width="0.0770%" height="15" fill="rgb(232,162,48)" fg:x="22343" fg:w="87"/><text x="20.0318%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (869 samples, 0.77%)</title><rect x="19.8589%" y="229" width="0.7694%" height="15" fill="rgb(246,160,12)" fg:x="22430" fg:w="869"/><text x="20.1089%" y="239.50"></text></g><g><title>[libc-2.31.so] (816 samples, 0.72%)</title><rect x="19.9058%" y="213" width="0.7225%" height="15" fill="rgb(247,166,0)" fg:x="22483" fg:w="816"/><text x="20.1558%" y="223.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (1,052 samples, 0.93%)</title><rect x="19.7048%" y="325" width="0.9314%" height="15" fill="rgb(249,219,21)" fg:x="22256" fg:w="1052"/><text x="19.9548%" y="335.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1,052 samples, 0.93%)</title><rect x="19.7048%" y="309" width="0.9314%" height="15" fill="rgb(205,209,3)" fg:x="22256" fg:w="1052"/><text x="19.9548%" y="319.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1,052 samples, 0.93%)</title><rect x="19.7048%" y="293" width="0.9314%" height="15" fill="rgb(243,44,1)" fg:x="22256" fg:w="1052"/><text x="19.9548%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1,052 samples, 0.93%)</title><rect x="19.7048%" y="277" width="0.9314%" height="15" fill="rgb(206,159,16)" fg:x="22256" fg:w="1052"/><text x="19.9548%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1,052 samples, 0.93%)</title><rect x="19.7048%" y="261" width="0.9314%" height="15" fill="rgb(244,77,30)" fg:x="22256" fg:w="1052"/><text x="19.9548%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1,052 samples, 0.93%)</title><rect x="19.7048%" y="245" width="0.9314%" height="15" fill="rgb(218,69,12)" fg:x="22256" fg:w="1052"/><text x="19.9548%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (88 samples, 0.08%)</title><rect x="20.8363%" y="181" width="0.0779%" height="15" fill="rgb(212,87,7)" fg:x="23534" fg:w="88"/><text x="21.0863%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (77 samples, 0.07%)</title><rect x="20.8461%" y="165" width="0.0682%" height="15" fill="rgb(245,114,25)" fg:x="23545" fg:w="77"/><text x="21.0961%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (72 samples, 0.06%)</title><rect x="20.8505%" y="149" width="0.0637%" height="15" fill="rgb(210,61,42)" fg:x="23550" fg:w="72"/><text x="21.1005%" y="159.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (241 samples, 0.21%)</title><rect x="20.7894%" y="293" width="0.2134%" height="15" fill="rgb(211,52,33)" fg:x="23481" fg:w="241"/><text x="21.0394%" y="303.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (241 samples, 0.21%)</title><rect x="20.7894%" y="277" width="0.2134%" height="15" fill="rgb(234,58,33)" fg:x="23481" fg:w="241"/><text x="21.0394%" y="287.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (241 samples, 0.21%)</title><rect x="20.7894%" y="261" width="0.2134%" height="15" fill="rgb(220,115,36)" fg:x="23481" fg:w="241"/><text x="21.0394%" y="271.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (241 samples, 0.21%)</title><rect x="20.7894%" y="245" width="0.2134%" height="15" fill="rgb(243,153,54)" fg:x="23481" fg:w="241"/><text x="21.0394%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (241 samples, 0.21%)</title><rect x="20.7894%" y="229" width="0.2134%" height="15" fill="rgb(251,47,18)" fg:x="23481" fg:w="241"/><text x="21.0394%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (241 samples, 0.21%)</title><rect x="20.7894%" y="213" width="0.2134%" height="15" fill="rgb(242,102,42)" fg:x="23481" fg:w="241"/><text x="21.0394%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (241 samples, 0.21%)</title><rect x="20.7894%" y="197" width="0.2134%" height="15" fill="rgb(234,31,38)" fg:x="23481" fg:w="241"/><text x="21.0394%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (100 samples, 0.09%)</title><rect x="20.9142%" y="181" width="0.0885%" height="15" fill="rgb(221,117,51)" fg:x="23622" fg:w="100"/><text x="21.1642%" y="191.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeMap&gt;::serialize_key (1,870 samples, 1.66%)</title><rect x="19.5331%" y="405" width="1.6556%" height="15" fill="rgb(212,20,18)" fg:x="22062" fg:w="1870"/><text x="19.7831%" y="415.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeSeq&gt;::serialize_element (1,870 samples, 1.66%)</title><rect x="19.5331%" y="389" width="1.6556%" height="15" fill="rgb(245,133,36)" fg:x="22062" fg:w="1870"/><text x="19.7831%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for str&gt;::serialize (1,820 samples, 1.61%)</title><rect x="19.5773%" y="373" width="1.6114%" height="15" fill="rgb(212,6,19)" fg:x="22112" fg:w="1820"/><text x="19.8273%" y="383.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_str (1,820 samples, 1.61%)</title><rect x="19.5773%" y="357" width="1.6114%" height="15" fill="rgb(218,1,36)" fg:x="22112" fg:w="1820"/><text x="19.8273%" y="367.50"></text></g><g><title>rmp::encode::str::write_str (1,690 samples, 1.50%)</title><rect x="19.6924%" y="341" width="1.4963%" height="15" fill="rgb(246,84,54)" fg:x="22242" fg:w="1690"/><text x="19.9424%" y="351.50"></text></g><g><title>rmp::encode::str::write_str_len (624 samples, 0.55%)</title><rect x="20.6362%" y="325" width="0.5525%" height="15" fill="rgb(242,110,6)" fg:x="23308" fg:w="624"/><text x="20.8862%" y="335.50"></text></g><g><title>rmp::encode::write_marker (461 samples, 0.41%)</title><rect x="20.7805%" y="309" width="0.4082%" height="15" fill="rgb(214,47,5)" fg:x="23471" fg:w="461"/><text x="21.0305%" y="319.50"></text></g><g><title>rmp::marker::Marker::to_u8 (210 samples, 0.19%)</title><rect x="21.0028%" y="293" width="0.1859%" height="15" fill="rgb(218,159,25)" fg:x="23722" fg:w="210"/><text x="21.2528%" y="303.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager&lt;S&gt;::run::{{closure}} (8,094 samples, 7.17%)</title><rect x="14.0871%" y="613" width="7.1662%" height="15" fill="rgb(215,211,28)" fg:x="15911" fg:w="8094"/><text x="14.3371%" y="623.50">tremor_run..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (2,931 samples, 2.60%)</title><rect x="18.6583%" y="597" width="2.5950%" height="15" fill="rgb(238,59,32)" fg:x="21074" fg:w="2931"/><text x="18.9083%" y="607.50">&lt;c..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,931 samples, 2.60%)</title><rect x="18.6583%" y="581" width="2.5950%" height="15" fill="rgb(226,82,3)" fg:x="21074" fg:w="2931"/><text x="18.9083%" y="591.50">&lt;c..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::Sink&gt;::on_event::{{closure}} (2,931 samples, 2.60%)</title><rect x="18.6583%" y="565" width="2.5950%" height="15" fill="rgb(240,164,32)" fg:x="21074" fg:w="2931"/><text x="18.9083%" y="575.50">&lt;t..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize (2,930 samples, 2.59%)</title><rect x="18.6592%" y="549" width="2.5941%" height="15" fill="rgb(232,46,7)" fg:x="21075" fg:w="2930"/><text x="18.9092%" y="559.50">tr..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize_for_stream (2,930 samples, 2.59%)</title><rect x="18.6592%" y="533" width="2.5941%" height="15" fill="rgb(229,129,53)" fg:x="21075" fg:w="2930"/><text x="18.9092%" y="543.50">tr..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize_for_stream_with_codec (2,930 samples, 2.59%)</title><rect x="18.6592%" y="517" width="2.5941%" height="15" fill="rgb(234,188,29)" fg:x="21075" fg:w="2930"/><text x="18.9092%" y="527.50">tr..</text></g><g><title>&lt;tremor_runtime::codec::msgpack::MsgPack as tremor_runtime::codec::Codec&gt;::encode (2,824 samples, 2.50%)</title><rect x="18.7530%" y="501" width="2.5003%" height="15" fill="rgb(246,141,4)" fg:x="21181" fg:w="2824"/><text x="19.0030%" y="511.50">&lt;t..</text></g><g><title>rmp_serde::encode::to_vec (2,788 samples, 2.47%)</title><rect x="18.7849%" y="485" width="2.4684%" height="15" fill="rgb(229,23,39)" fg:x="21217" fg:w="2788"/><text x="19.0349%" y="495.50">rm..</text></g><g><title>rmp_serde::encode::write (2,716 samples, 2.40%)</title><rect x="18.8487%" y="469" width="2.4047%" height="15" fill="rgb(206,12,3)" fg:x="21289" fg:w="2716"/><text x="19.0987%" y="479.50">rm..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2,713 samples, 2.40%)</title><rect x="18.8513%" y="453" width="2.4020%" height="15" fill="rgb(252,226,20)" fg:x="21292" fg:w="2713"/><text x="19.1013%" y="463.50">se..</text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (2,710 samples, 2.40%)</title><rect x="18.8540%" y="437" width="2.3994%" height="15" fill="rgb(216,123,35)" fg:x="21295" fg:w="2710"/><text x="19.1040%" y="447.50">tr..</text></g><g><title>serde::ser::SerializeMap::serialize_entry (2,006 samples, 1.78%)</title><rect x="19.4773%" y="421" width="1.7761%" height="15" fill="rgb(212,68,40)" fg:x="21999" fg:w="2006"/><text x="19.7273%" y="431.50">s..</text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeMap&gt;::serialize_value (73 samples, 0.06%)</title><rect x="21.1887%" y="405" width="0.0646%" height="15" fill="rgb(254,125,32)" fg:x="23932" fg:w="73"/><text x="21.4387%" y="415.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeSeq&gt;::serialize_element (73 samples, 0.06%)</title><rect x="21.1887%" y="389" width="0.0646%" height="15" fill="rgb(253,97,22)" fg:x="23932" fg:w="73"/><text x="21.4387%" y="399.50"></text></g><g><title>[libc-2.31.so] (150 samples, 0.13%)</title><rect x="21.4720%" y="581" width="0.1328%" height="15" fill="rgb(241,101,14)" fg:x="24252" fg:w="150"/><text x="21.7220%" y="591.50"></text></g><g><title>[libc-2.31.so] (201 samples, 0.18%)</title><rect x="21.8102%" y="549" width="0.1780%" height="15" fill="rgb(238,103,29)" fg:x="24634" fg:w="201"/><text x="22.0602%" y="559.50"></text></g><g><title>[libc-2.31.so] (82 samples, 0.07%)</title><rect x="22.1298%" y="533" width="0.0726%" height="15" fill="rgb(233,195,47)" fg:x="24995" fg:w="82"/><text x="22.3798%" y="543.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (32 samples, 0.03%)</title><rect x="22.2786%" y="341" width="0.0283%" height="15" fill="rgb(246,218,30)" fg:x="25163" fg:w="32"/><text x="22.5286%" y="351.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (105 samples, 0.09%)</title><rect x="22.2148%" y="469" width="0.0930%" height="15" fill="rgb(219,145,47)" fg:x="25091" fg:w="105"/><text x="22.4648%" y="479.50"></text></g><g><title>alloc::alloc::exchange_malloc (55 samples, 0.05%)</title><rect x="22.2591%" y="453" width="0.0487%" height="15" fill="rgb(243,12,26)" fg:x="25141" fg:w="55"/><text x="22.5091%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (55 samples, 0.05%)</title><rect x="22.2591%" y="437" width="0.0487%" height="15" fill="rgb(214,87,16)" fg:x="25141" fg:w="55"/><text x="22.5091%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (55 samples, 0.05%)</title><rect x="22.2591%" y="421" width="0.0487%" height="15" fill="rgb(208,99,42)" fg:x="25141" fg:w="55"/><text x="22.5091%" y="431.50"></text></g><g><title>alloc::alloc::alloc (55 samples, 0.05%)</title><rect x="22.2591%" y="405" width="0.0487%" height="15" fill="rgb(253,99,2)" fg:x="25141" fg:w="55"/><text x="22.5091%" y="415.50"></text></g><g><title>__rg_alloc (55 samples, 0.05%)</title><rect x="22.2591%" y="389" width="0.0487%" height="15" fill="rgb(220,168,23)" fg:x="25141" fg:w="55"/><text x="22.5091%" y="399.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (55 samples, 0.05%)</title><rect x="22.2591%" y="373" width="0.0487%" height="15" fill="rgb(242,38,24)" fg:x="25141" fg:w="55"/><text x="22.5091%" y="383.50"></text></g><g><title>sn_rust_alloc (53 samples, 0.05%)</title><rect x="22.2609%" y="357" width="0.0469%" height="15" fill="rgb(225,182,9)" fg:x="25143" fg:w="53"/><text x="22.5109%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (122 samples, 0.11%)</title><rect x="22.2051%" y="533" width="0.1080%" height="15" fill="rgb(243,178,37)" fg:x="25080" fg:w="122"/><text x="22.4551%" y="543.50"></text></g><g><title>core::ops::function::FnOnce::call_once (119 samples, 0.11%)</title><rect x="22.2078%" y="517" width="0.1054%" height="15" fill="rgb(232,139,19)" fg:x="25083" fg:w="119"/><text x="22.4578%" y="527.50"></text></g><g><title>value_trait::Builder::object (116 samples, 0.10%)</title><rect x="22.2104%" y="501" width="0.1027%" height="15" fill="rgb(225,201,24)" fg:x="25086" fg:w="116"/><text x="22.4604%" y="511.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (111 samples, 0.10%)</title><rect x="22.2148%" y="485" width="0.0983%" height="15" fill="rgb(221,47,46)" fg:x="25091" fg:w="111"/><text x="22.4648%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (58 samples, 0.05%)</title><rect x="22.3291%" y="453" width="0.0514%" height="15" fill="rgb(249,23,13)" fg:x="25220" fg:w="58"/><text x="22.5791%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (58 samples, 0.05%)</title><rect x="22.3291%" y="437" width="0.0514%" height="15" fill="rgb(219,9,5)" fg:x="25220" fg:w="58"/><text x="22.5791%" y="447.50"></text></g><g><title>__rg_dealloc (58 samples, 0.05%)</title><rect x="22.3291%" y="421" width="0.0514%" height="15" fill="rgb(254,171,16)" fg:x="25220" fg:w="58"/><text x="22.5791%" y="431.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (58 samples, 0.05%)</title><rect x="22.3291%" y="405" width="0.0514%" height="15" fill="rgb(230,171,20)" fg:x="25220" fg:w="58"/><text x="22.5791%" y="415.50"></text></g><g><title>sn_rust_dealloc (58 samples, 0.05%)</title><rect x="22.3291%" y="389" width="0.0514%" height="15" fill="rgb(210,71,41)" fg:x="25220" fg:w="58"/><text x="22.5791%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (63 samples, 0.06%)</title><rect x="22.3264%" y="517" width="0.0558%" height="15" fill="rgb(206,173,20)" fg:x="25217" fg:w="63"/><text x="22.5764%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (63 samples, 0.06%)</title><rect x="22.3264%" y="501" width="0.0558%" height="15" fill="rgb(233,88,34)" fg:x="25217" fg:w="63"/><text x="22.5764%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (63 samples, 0.06%)</title><rect x="22.3264%" y="485" width="0.0558%" height="15" fill="rgb(223,209,46)" fg:x="25217" fg:w="63"/><text x="22.5764%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (63 samples, 0.06%)</title><rect x="22.3264%" y="469" width="0.0558%" height="15" fill="rgb(250,43,18)" fg:x="25217" fg:w="63"/><text x="22.5764%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (42 samples, 0.04%)</title><rect x="22.3875%" y="405" width="0.0372%" height="15" fill="rgb(208,13,10)" fg:x="25286" fg:w="42"/><text x="22.6375%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (42 samples, 0.04%)</title><rect x="22.3875%" y="389" width="0.0372%" height="15" fill="rgb(212,200,36)" fg:x="25286" fg:w="42"/><text x="22.6375%" y="399.50"></text></g><g><title>__rg_dealloc (42 samples, 0.04%)</title><rect x="22.3875%" y="373" width="0.0372%" height="15" fill="rgb(225,90,30)" fg:x="25286" fg:w="42"/><text x="22.6375%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (42 samples, 0.04%)</title><rect x="22.3875%" y="357" width="0.0372%" height="15" fill="rgb(236,182,39)" fg:x="25286" fg:w="42"/><text x="22.6375%" y="367.50"></text></g><g><title>sn_rust_dealloc (33 samples, 0.03%)</title><rect x="22.3955%" y="341" width="0.0292%" height="15" fill="rgb(212,144,35)" fg:x="25295" fg:w="33"/><text x="22.6455%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (55 samples, 0.05%)</title><rect x="22.3822%" y="501" width="0.0487%" height="15" fill="rgb(228,63,44)" fg:x="25280" fg:w="55"/><text x="22.6322%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (55 samples, 0.05%)</title><rect x="22.3822%" y="485" width="0.0487%" height="15" fill="rgb(228,109,6)" fg:x="25280" fg:w="55"/><text x="22.6322%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (50 samples, 0.04%)</title><rect x="22.3866%" y="469" width="0.0443%" height="15" fill="rgb(238,117,24)" fg:x="25285" fg:w="50"/><text x="22.6366%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (50 samples, 0.04%)</title><rect x="22.3866%" y="453" width="0.0443%" height="15" fill="rgb(242,26,26)" fg:x="25285" fg:w="50"/><text x="22.6366%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (50 samples, 0.04%)</title><rect x="22.3866%" y="437" width="0.0443%" height="15" fill="rgb(221,92,48)" fg:x="25285" fg:w="50"/><text x="22.6366%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (50 samples, 0.04%)</title><rect x="22.3866%" y="421" width="0.0443%" height="15" fill="rgb(209,209,32)" fg:x="25285" fg:w="50"/><text x="22.6366%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (125 samples, 0.11%)</title><rect x="22.3264%" y="533" width="0.1107%" height="15" fill="rgb(221,70,22)" fg:x="25217" fg:w="125"/><text x="22.5764%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (62 samples, 0.05%)</title><rect x="22.3822%" y="517" width="0.0549%" height="15" fill="rgb(248,145,5)" fg:x="25280" fg:w="62"/><text x="22.6322%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.01%)</title><rect x="22.4521%" y="437" width="0.0106%" height="15" fill="rgb(226,116,26)" fg:x="25359" fg:w="12"/><text x="22.7021%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (31 samples, 0.03%)</title><rect x="22.4371%" y="533" width="0.0274%" height="15" fill="rgb(244,5,17)" fg:x="25342" fg:w="31"/><text x="22.6871%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt;&gt; (23 samples, 0.02%)</title><rect x="22.4442%" y="517" width="0.0204%" height="15" fill="rgb(252,159,33)" fg:x="25350" fg:w="23"/><text x="22.6942%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (21 samples, 0.02%)</title><rect x="22.4459%" y="501" width="0.0186%" height="15" fill="rgb(206,71,0)" fg:x="25352" fg:w="21"/><text x="22.6959%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (21 samples, 0.02%)</title><rect x="22.4459%" y="485" width="0.0186%" height="15" fill="rgb(233,118,54)" fg:x="25352" fg:w="21"/><text x="22.6959%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::vecmap::VecMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (14 samples, 0.01%)</title><rect x="22.4521%" y="469" width="0.0124%" height="15" fill="rgb(234,83,48)" fg:x="25359" fg:w="14"/><text x="22.7021%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)&gt;&gt; (14 samples, 0.01%)</title><rect x="22.4521%" y="453" width="0.0124%" height="15" fill="rgb(228,3,54)" fg:x="25359" fg:w="14"/><text x="22.7021%" y="463.50"></text></g><g><title>sn_rust_dealloc (43 samples, 0.04%)</title><rect x="22.4645%" y="533" width="0.0381%" height="15" fill="rgb(226,155,13)" fg:x="25373" fg:w="43"/><text x="22.7145%" y="543.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (15 samples, 0.01%)</title><rect x="22.5106%" y="517" width="0.0133%" height="15" fill="rgb(241,28,37)" fg:x="25425" fg:w="15"/><text x="22.7606%" y="527.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (55 samples, 0.05%)</title><rect x="22.5336%" y="501" width="0.0487%" height="15" fill="rgb(233,93,10)" fg:x="25451" fg:w="55"/><text x="22.7836%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (18 samples, 0.02%)</title><rect x="22.6018%" y="469" width="0.0159%" height="15" fill="rgb(225,113,19)" fg:x="25528" fg:w="18"/><text x="22.8518%" y="479.50"></text></g><g><title>core::cmp::PartialOrd::ge (18 samples, 0.02%)</title><rect x="22.6018%" y="453" width="0.0159%" height="15" fill="rgb(241,2,18)" fg:x="25528" fg:w="18"/><text x="22.8518%" y="463.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (18 samples, 0.02%)</title><rect x="22.6018%" y="437" width="0.0159%" height="15" fill="rgb(228,207,21)" fg:x="25528" fg:w="18"/><text x="22.8518%" y="447.50"></text></g><g><title>std::time::SystemTime::duration_since (112 samples, 0.10%)</title><rect x="22.5336%" y="517" width="0.0992%" height="15" fill="rgb(213,211,35)" fg:x="25451" fg:w="112"/><text x="22.7836%" y="527.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (57 samples, 0.05%)</title><rect x="22.5823%" y="501" width="0.0505%" height="15" fill="rgb(209,83,10)" fg:x="25506" fg:w="57"/><text x="22.8323%" y="511.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (56 samples, 0.05%)</title><rect x="22.5832%" y="485" width="0.0496%" height="15" fill="rgb(209,164,1)" fg:x="25507" fg:w="56"/><text x="22.8332%" y="495.50"></text></g><g><title>core::time::Duration::new (17 samples, 0.02%)</title><rect x="22.6177%" y="469" width="0.0151%" height="15" fill="rgb(213,184,43)" fg:x="25546" fg:w="17"/><text x="22.8677%" y="479.50"></text></g><g><title>tremor_common::time::nanotime (417 samples, 0.37%)</title><rect x="22.5026%" y="533" width="0.3692%" height="15" fill="rgb(231,61,34)" fg:x="25416" fg:w="417"/><text x="22.7526%" y="543.50"></text></g><g><title>std::time::SystemTime::now (270 samples, 0.24%)</title><rect x="22.6327%" y="517" width="0.2391%" height="15" fill="rgb(235,75,3)" fg:x="25563" fg:w="270"/><text x="22.8827%" y="527.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (270 samples, 0.24%)</title><rect x="22.6327%" y="501" width="0.2391%" height="15" fill="rgb(220,106,47)" fg:x="25563" fg:w="270"/><text x="22.8827%" y="511.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (270 samples, 0.24%)</title><rect x="22.6327%" y="485" width="0.2391%" height="15" fill="rgb(210,196,33)" fg:x="25563" fg:w="270"/><text x="22.8827%" y="495.50"></text></g><g><title>__clock_gettime (218 samples, 0.19%)</title><rect x="22.6788%" y="469" width="0.1930%" height="15" fill="rgb(229,154,42)" fg:x="25615" fg:w="218"/><text x="22.9288%" y="479.50"></text></g><g><title>__vdso_clock_gettime (207 samples, 0.18%)</title><rect x="22.6885%" y="453" width="0.1833%" height="15" fill="rgb(228,114,26)" fg:x="25626" fg:w="207"/><text x="22.9385%" y="463.50"></text></g><g><title>[[vdso]] (185 samples, 0.16%)</title><rect x="22.7080%" y="437" width="0.1638%" height="15" fill="rgb(208,144,1)" fg:x="25648" fg:w="185"/><text x="22.9580%" y="447.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,249 samples, 1.11%)</title><rect x="21.8023%" y="565" width="1.1058%" height="15" fill="rgb(239,112,37)" fg:x="24625" fg:w="1249"/><text x="22.0523%" y="575.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_data::{{closure}} (1,039 samples, 0.92%)</title><rect x="21.9882%" y="549" width="0.9199%" height="15" fill="rgb(210,96,50)" fg:x="24835" fg:w="1039"/><text x="22.2382%" y="559.50"></text></g><g><title>tremor_runtime::connectors::source::Streams::get_or_create_stream (41 samples, 0.04%)</title><rect x="22.8718%" y="533" width="0.0363%" height="15" fill="rgb(222,178,2)" fg:x="25833" fg:w="41"/><text x="23.1218%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (36 samples, 0.03%)</title><rect x="22.8762%" y="517" width="0.0319%" height="15" fill="rgb(226,74,18)" fg:x="25838" fg:w="36"/><text x="23.1262%" y="527.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (21 samples, 0.02%)</title><rect x="22.8895%" y="501" width="0.0186%" height="15" fill="rgb(225,67,54)" fg:x="25853" fg:w="21"/><text x="23.1395%" y="511.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (21 samples, 0.02%)</title><rect x="22.8895%" y="485" width="0.0186%" height="15" fill="rgb(251,92,32)" fg:x="25853" fg:w="21"/><text x="23.1395%" y="495.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (21 samples, 0.02%)</title><rect x="22.8895%" y="469" width="0.0186%" height="15" fill="rgb(228,149,22)" fg:x="25853" fg:w="21"/><text x="23.1395%" y="479.50"></text></g><g><title>[libc-2.31.so] (184 samples, 0.16%)</title><rect x="22.9107%" y="565" width="0.1629%" height="15" fill="rgb(243,54,13)" fg:x="25877" fg:w="184"/><text x="23.1607%" y="575.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,820 samples, 1.61%)</title><rect x="21.4720%" y="597" width="1.6114%" height="15" fill="rgb(243,180,28)" fg:x="24252" fg:w="1820"/><text x="21.7220%" y="607.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_source_reply::{{closure}} (1,670 samples, 1.48%)</title><rect x="21.6048%" y="581" width="1.4786%" height="15" fill="rgb(208,167,24)" fg:x="24402" fg:w="1670"/><text x="21.8548%" y="591.50"></text></g><g><title>[libc-2.31.so] (279 samples, 0.25%)</title><rect x="23.3074%" y="581" width="0.2470%" height="15" fill="rgb(245,73,45)" fg:x="26325" fg:w="279"/><text x="23.5574%" y="591.50"></text></g><g><title>sn_rust_dealloc (27 samples, 0.02%)</title><rect x="23.5580%" y="469" width="0.0239%" height="15" fill="rgb(237,203,48)" fg:x="26608" fg:w="27"/><text x="23.8080%" y="479.50"></text></g><g><title>alloc::alloc::box_free (29 samples, 0.03%)</title><rect x="23.5580%" y="549" width="0.0257%" height="15" fill="rgb(211,197,16)" fg:x="26608" fg:w="29"/><text x="23.8080%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (29 samples, 0.03%)</title><rect x="23.5580%" y="533" width="0.0257%" height="15" fill="rgb(243,99,51)" fg:x="26608" fg:w="29"/><text x="23.8080%" y="543.50"></text></g><g><title>alloc::alloc::dealloc (29 samples, 0.03%)</title><rect x="23.5580%" y="517" width="0.0257%" height="15" fill="rgb(215,123,29)" fg:x="26608" fg:w="29"/><text x="23.8080%" y="527.50"></text></g><g><title>__rg_dealloc (29 samples, 0.03%)</title><rect x="23.5580%" y="501" width="0.0257%" height="15" fill="rgb(239,186,37)" fg:x="26608" fg:w="29"/><text x="23.8080%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (29 samples, 0.03%)</title><rect x="23.5580%" y="485" width="0.0257%" height="15" fill="rgb(252,136,39)" fg:x="26608" fg:w="29"/><text x="23.8080%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;tremor_runtime::connectors::source::SourceReply,tremor_runtime::errors::Error&gt;+core::marker::Send&gt;&gt;&gt; (30 samples, 0.03%)</title><rect x="23.5580%" y="581" width="0.0266%" height="15" fill="rgb(223,213,32)" fg:x="26608" fg:w="30"/><text x="23.8080%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;tremor_runtime::connectors::source::SourceReply,tremor_runtime::errors::Error&gt;+core::marker::Send&gt;&gt; (30 samples, 0.03%)</title><rect x="23.5580%" y="565" width="0.0266%" height="15" fill="rgb(233,115,5)" fg:x="26608" fg:w="30"/><text x="23.8080%" y="575.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (575 samples, 0.51%)</title><rect x="23.0834%" y="597" width="0.5091%" height="15" fill="rgb(207,226,44)" fg:x="26072" fg:w="575"/><text x="23.3334%" y="607.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (129 samples, 0.11%)</title><rect x="23.7554%" y="453" width="0.1142%" height="15" fill="rgb(208,126,0)" fg:x="26831" fg:w="129"/><text x="24.0054%" y="463.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (315 samples, 0.28%)</title><rect x="23.5925%" y="581" width="0.2789%" height="15" fill="rgb(244,66,21)" fg:x="26647" fg:w="315"/><text x="23.8425%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (172 samples, 0.15%)</title><rect x="23.7191%" y="565" width="0.1523%" height="15" fill="rgb(222,97,12)" fg:x="26790" fg:w="172"/><text x="23.9691%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (172 samples, 0.15%)</title><rect x="23.7191%" y="549" width="0.1523%" height="15" fill="rgb(219,213,19)" fg:x="26790" fg:w="172"/><text x="23.9691%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (172 samples, 0.15%)</title><rect x="23.7191%" y="533" width="0.1523%" height="15" fill="rgb(252,169,30)" fg:x="26790" fg:w="172"/><text x="23.9691%" y="543.50"></text></g><g><title>alloc::alloc::alloc (167 samples, 0.15%)</title><rect x="23.7235%" y="517" width="0.1479%" height="15" fill="rgb(206,32,51)" fg:x="26795" fg:w="167"/><text x="23.9735%" y="527.50"></text></g><g><title>__rg_alloc (167 samples, 0.15%)</title><rect x="23.7235%" y="501" width="0.1479%" height="15" fill="rgb(250,172,42)" fg:x="26795" fg:w="167"/><text x="23.9735%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (167 samples, 0.15%)</title><rect x="23.7235%" y="485" width="0.1479%" height="15" fill="rgb(209,34,43)" fg:x="26795" fg:w="167"/><text x="23.9735%" y="495.50"></text></g><g><title>sn_rust_alloc (163 samples, 0.14%)</title><rect x="23.7271%" y="469" width="0.1443%" height="15" fill="rgb(223,11,35)" fg:x="26799" fg:w="163"/><text x="23.9771%" y="479.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::Source&gt;::pull_data (319 samples, 0.28%)</title><rect x="23.5925%" y="597" width="0.2824%" height="15" fill="rgb(251,219,26)" fg:x="26647" fg:w="319"/><text x="23.8425%" y="607.50"></text></g><g><title>[libc-2.31.so] (176 samples, 0.16%)</title><rect x="23.8749%" y="597" width="0.1558%" height="15" fill="rgb(231,119,3)" fg:x="26966" fg:w="176"/><text x="24.1249%" y="607.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::run::{{closure}} (3,153 samples, 2.79%)</title><rect x="21.2533%" y="613" width="2.7916%" height="15" fill="rgb(216,97,11)" fg:x="24005" fg:w="3153"/><text x="21.5033%" y="623.50">tr..</text></g><g><title>[libc-2.31.so] (305 samples, 0.27%)</title><rect x="24.3867%" y="581" width="0.2700%" height="15" fill="rgb(223,59,9)" fg:x="27544" fg:w="305"/><text x="24.6367%" y="591.50"></text></g><g><title>[libc-2.31.so] (398 samples, 0.35%)</title><rect x="24.7302%" y="565" width="0.3524%" height="15" fill="rgb(233,93,31)" fg:x="27932" fg:w="398"/><text x="24.9802%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (176 samples, 0.16%)</title><rect x="25.0826%" y="565" width="0.1558%" height="15" fill="rgb(239,81,33)" fg:x="28330" fg:w="176"/><text x="25.3326%" y="575.50"></text></g><g><title>core::ptr::write (162 samples, 0.14%)</title><rect x="25.0950%" y="549" width="0.1434%" height="15" fill="rgb(213,120,34)" fg:x="28344" fg:w="162"/><text x="25.3450%" y="559.50"></text></g><g><title>[libc-2.31.so] (162 samples, 0.14%)</title><rect x="25.0950%" y="533" width="0.1434%" height="15" fill="rgb(243,49,53)" fg:x="28344" fg:w="162"/><text x="25.3450%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (15 samples, 0.01%)</title><rect x="25.2384%" y="565" width="0.0133%" height="15" fill="rgb(247,216,33)" fg:x="28506" fg:w="15"/><text x="25.4884%" y="575.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (452 samples, 0.40%)</title><rect x="25.2579%" y="565" width="0.4002%" height="15" fill="rgb(226,26,14)" fg:x="28528" fg:w="452"/><text x="25.5079%" y="575.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (449 samples, 0.40%)</title><rect x="25.2605%" y="549" width="0.3975%" height="15" fill="rgb(215,49,53)" fg:x="28531" fg:w="449"/><text x="25.5105%" y="559.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (424 samples, 0.38%)</title><rect x="25.2827%" y="533" width="0.3754%" height="15" fill="rgb(245,162,40)" fg:x="28556" fg:w="424"/><text x="25.5327%" y="543.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (424 samples, 0.38%)</title><rect x="25.2827%" y="517" width="0.3754%" height="15" fill="rgb(229,68,17)" fg:x="28556" fg:w="424"/><text x="25.5327%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (424 samples, 0.38%)</title><rect x="25.2827%" y="501" width="0.3754%" height="15" fill="rgb(213,182,10)" fg:x="28556" fg:w="424"/><text x="25.5327%" y="511.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (424 samples, 0.38%)</title><rect x="25.2827%" y="485" width="0.3754%" height="15" fill="rgb(245,125,30)" fg:x="28556" fg:w="424"/><text x="25.5327%" y="495.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (424 samples, 0.38%)</title><rect x="25.2827%" y="469" width="0.3754%" height="15" fill="rgb(232,202,2)" fg:x="28556" fg:w="424"/><text x="25.5327%" y="479.50"></text></g><g><title>[libc-2.31.so] (412 samples, 0.36%)</title><rect x="25.2933%" y="453" width="0.3648%" height="15" fill="rgb(237,140,51)" fg:x="28568" fg:w="412"/><text x="25.5433%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (22 samples, 0.02%)</title><rect x="25.6634%" y="549" width="0.0195%" height="15" fill="rgb(236,157,25)" fg:x="28986" fg:w="22"/><text x="25.9134%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (21 samples, 0.02%)</title><rect x="25.6642%" y="533" width="0.0186%" height="15" fill="rgb(219,209,0)" fg:x="28987" fg:w="21"/><text x="25.9142%" y="543.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::reverse (12 samples, 0.01%)</title><rect x="25.6828%" y="549" width="0.0106%" height="15" fill="rgb(240,116,54)" fg:x="29008" fg:w="12"/><text x="25.9328%" y="559.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.02%)</title><rect x="26.4673%" y="533" width="0.0195%" height="15" fill="rgb(216,10,36)" fg:x="29894" fg:w="22"/><text x="26.7173%" y="543.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (337 samples, 0.30%)</title><rect x="26.4868%" y="533" width="0.2984%" height="15" fill="rgb(222,72,44)" fg:x="29916" fg:w="337"/><text x="26.7368%" y="543.50"></text></g><g><title>[libc-2.31.so] (282 samples, 0.25%)</title><rect x="26.5355%" y="517" width="0.2497%" height="15" fill="rgb(232,159,9)" fg:x="29971" fg:w="282"/><text x="26.7855%" y="527.50"></text></g><g><title>[libc-2.31.so] (138 samples, 0.12%)</title><rect x="26.7851%" y="533" width="0.1222%" height="15" fill="rgb(210,39,32)" fg:x="30253" fg:w="138"/><text x="27.0351%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (788 samples, 0.70%)</title><rect x="26.9091%" y="533" width="0.6977%" height="15" fill="rgb(216,194,45)" fg:x="30393" fg:w="788"/><text x="27.1591%" y="543.50"></text></g><g><title>core::ptr::read (776 samples, 0.69%)</title><rect x="26.9197%" y="517" width="0.6870%" height="15" fill="rgb(218,18,35)" fg:x="30405" fg:w="776"/><text x="27.1697%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (191 samples, 0.17%)</title><rect x="27.6068%" y="533" width="0.1691%" height="15" fill="rgb(207,83,51)" fg:x="31181" fg:w="191"/><text x="27.8568%" y="543.50"></text></g><g><title>core::ptr::write (180 samples, 0.16%)</title><rect x="27.6165%" y="517" width="0.1594%" height="15" fill="rgb(225,63,43)" fg:x="31192" fg:w="180"/><text x="27.8665%" y="527.50"></text></g><g><title>[libc-2.31.so] (179 samples, 0.16%)</title><rect x="27.6174%" y="501" width="0.1585%" height="15" fill="rgb(207,57,36)" fg:x="31193" fg:w="179"/><text x="27.8674%" y="511.50"></text></g><g><title>alloc::vec::into_iter::IntoIter&lt;T,A&gt;::as_raw_mut_slice (24 samples, 0.02%)</title><rect x="27.7953%" y="501" width="0.0212%" height="15" fill="rgb(216,99,33)" fg:x="31394" fg:w="24"/><text x="28.0453%" y="511.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (12 samples, 0.01%)</title><rect x="27.8060%" y="485" width="0.0106%" height="15" fill="rgb(225,42,16)" fg:x="31406" fg:w="12"/><text x="28.0560%" y="495.50"></text></g><g><title>core::iter::traits::exact_size::ExactSizeIterator::len (12 samples, 0.01%)</title><rect x="27.8060%" y="469" width="0.0106%" height="15" fill="rgb(220,201,45)" fg:x="31406" fg:w="12"/><text x="28.0560%" y="479.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (12 samples, 0.01%)</title><rect x="27.8060%" y="453" width="0.0106%" height="15" fill="rgb(225,33,4)" fg:x="31406" fg:w="12"/><text x="28.0560%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (12 samples, 0.01%)</title><rect x="27.8060%" y="437" width="0.0106%" height="15" fill="rgb(224,33,50)" fg:x="31406" fg:w="12"/><text x="28.0560%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;tremor_pipeline::event::Event&gt;&gt; (64 samples, 0.06%)</title><rect x="27.7759%" y="533" width="0.0567%" height="15" fill="rgb(246,198,51)" fg:x="31372" fg:w="64"/><text x="28.0259%" y="543.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (50 samples, 0.04%)</title><rect x="27.7883%" y="517" width="0.0443%" height="15" fill="rgb(205,22,4)" fg:x="31386" fg:w="50"/><text x="28.0383%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tremor_pipeline::event::Event]&gt; (12 samples, 0.01%)</title><rect x="27.8219%" y="501" width="0.0106%" height="15" fill="rgb(206,3,8)" fg:x="31424" fg:w="12"/><text x="28.0719%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (15 samples, 0.01%)</title><rect x="27.8325%" y="533" width="0.0133%" height="15" fill="rgb(251,23,15)" fg:x="31436" fg:w="15"/><text x="28.0825%" y="543.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="27.8325%" y="517" width="0.0133%" height="15" fill="rgb(252,88,28)" fg:x="31436" fg:w="15"/><text x="28.0825%" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (20 samples, 0.02%)</title><rect x="27.8458%" y="533" width="0.0177%" height="15" fill="rgb(212,127,14)" fg:x="31451" fg:w="20"/><text x="28.0958%" y="543.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (20 samples, 0.02%)</title><rect x="27.8458%" y="517" width="0.0177%" height="15" fill="rgb(247,145,37)" fg:x="31451" fg:w="20"/><text x="28.0958%" y="527.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (20 samples, 0.02%)</title><rect x="27.8458%" y="501" width="0.0177%" height="15" fill="rgb(209,117,53)" fg:x="31451" fg:w="20"/><text x="28.0958%" y="511.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (20 samples, 0.02%)</title><rect x="27.8458%" y="485" width="0.0177%" height="15" fill="rgb(212,90,42)" fg:x="31451" fg:w="20"/><text x="28.0958%" y="495.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (115 samples, 0.10%)</title><rect x="28.2903%" y="517" width="0.1018%" height="15" fill="rgb(218,164,37)" fg:x="31953" fg:w="115"/><text x="28.5403%" y="527.50"></text></g><g><title>core::ptr::read (80 samples, 0.07%)</title><rect x="28.3212%" y="501" width="0.0708%" height="15" fill="rgb(246,65,34)" fg:x="31988" fg:w="80"/><text x="28.5712%" y="511.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::clone::Clone&gt;::clone (25 samples, 0.02%)</title><rect x="28.3921%" y="517" width="0.0221%" height="15" fill="rgb(231,100,33)" fg:x="32068" fg:w="25"/><text x="28.6421%" y="527.50"></text></g><g><title>[libc-2.31.so] (172 samples, 0.15%)</title><rect x="28.4142%" y="517" width="0.1523%" height="15" fill="rgb(228,126,14)" fg:x="32093" fg:w="172"/><text x="28.6642%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (366 samples, 0.32%)</title><rect x="28.5665%" y="517" width="0.3240%" height="15" fill="rgb(215,173,21)" fg:x="32265" fg:w="366"/><text x="28.8165%" y="527.50"></text></g><g><title>core::ptr::write (342 samples, 0.30%)</title><rect x="28.5877%" y="501" width="0.3028%" height="15" fill="rgb(210,6,40)" fg:x="32289" fg:w="342"/><text x="28.8377%" y="511.50"></text></g><g><title>[libc-2.31.so] (337 samples, 0.30%)</title><rect x="28.5922%" y="485" width="0.2984%" height="15" fill="rgb(212,48,18)" fg:x="32294" fg:w="337"/><text x="28.8422%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (23 samples, 0.02%)</title><rect x="28.8905%" y="517" width="0.0204%" height="15" fill="rgb(230,214,11)" fg:x="32631" fg:w="23"/><text x="29.1405%" y="527.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue_events::{{closure}} (23 samples, 0.02%)</title><rect x="28.8905%" y="501" width="0.0204%" height="15" fill="rgb(254,105,39)" fg:x="32631" fg:w="23"/><text x="29.1405%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_last (19 samples, 0.02%)</title><rect x="28.8941%" y="485" width="0.0168%" height="15" fill="rgb(245,158,5)" fg:x="32635" fg:w="19"/><text x="29.1441%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;)&gt; (15 samples, 0.01%)</title><rect x="28.9109%" y="517" width="0.0133%" height="15" fill="rgb(249,208,11)" fg:x="32654" fg:w="15"/><text x="29.1609%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (15 samples, 0.01%)</title><rect x="28.9109%" y="501" width="0.0133%" height="15" fill="rgb(210,39,28)" fg:x="32654" fg:w="15"/><text x="29.1609%" y="511.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="28.9109%" y="485" width="0.0133%" height="15" fill="rgb(211,56,53)" fg:x="32654" fg:w="15"/><text x="29.1609%" y="495.50"></text></g><g><title>alloc::vec::into_iter::IntoIter&lt;T,A&gt;::as_raw_mut_slice (19 samples, 0.02%)</title><rect x="28.9339%" y="485" width="0.0168%" height="15" fill="rgb(226,201,30)" fg:x="32680" fg:w="19"/><text x="29.1839%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event),alloc::alloc::Global&gt;&gt; (28 samples, 0.02%)</title><rect x="28.9507%" y="485" width="0.0248%" height="15" fill="rgb(239,101,34)" fg:x="32699" fg:w="28"/><text x="29.2007%" y="495.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.02%)</title><rect x="28.9507%" y="469" width="0.0248%" height="15" fill="rgb(226,209,5)" fg:x="32699" fg:w="28"/><text x="29.2007%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (20 samples, 0.02%)</title><rect x="28.9578%" y="453" width="0.0177%" height="15" fill="rgb(250,105,47)" fg:x="32707" fg:w="20"/><text x="29.2078%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.02%)</title><rect x="28.9578%" y="437" width="0.0177%" height="15" fill="rgb(230,72,3)" fg:x="32707" fg:w="20"/><text x="29.2078%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (20 samples, 0.02%)</title><rect x="28.9578%" y="421" width="0.0177%" height="15" fill="rgb(232,218,39)" fg:x="32707" fg:w="20"/><text x="29.2078%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (20 samples, 0.02%)</title><rect x="28.9578%" y="405" width="0.0177%" height="15" fill="rgb(248,166,6)" fg:x="32707" fg:w="20"/><text x="29.2078%" y="415.50"></text></g><g><title>__rg_dealloc (20 samples, 0.02%)</title><rect x="28.9578%" y="389" width="0.0177%" height="15" fill="rgb(247,89,20)" fg:x="32707" fg:w="20"/><text x="29.2078%" y="399.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (20 samples, 0.02%)</title><rect x="28.9578%" y="373" width="0.0177%" height="15" fill="rgb(248,130,54)" fg:x="32707" fg:w="20"/><text x="29.2078%" y="383.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (69 samples, 0.06%)</title><rect x="28.9339%" y="501" width="0.0611%" height="15" fill="rgb(234,196,4)" fg:x="32680" fg:w="69"/><text x="29.1839%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)]&gt; (22 samples, 0.02%)</title><rect x="28.9755%" y="485" width="0.0195%" height="15" fill="rgb(250,143,31)" fg:x="32727" fg:w="22"/><text x="29.2255%" y="495.50"></text></g><g><title>sn_rust_dealloc (103 samples, 0.09%)</title><rect x="28.9950%" y="501" width="0.0912%" height="15" fill="rgb(211,110,34)" fg:x="32749" fg:w="103"/><text x="29.2450%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (198 samples, 0.18%)</title><rect x="28.9242%" y="517" width="0.1753%" height="15" fill="rgb(215,124,48)" fg:x="32669" fg:w="198"/><text x="29.1742%" y="527.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (15 samples, 0.01%)</title><rect x="29.0862%" y="501" width="0.0133%" height="15" fill="rgb(216,46,13)" fg:x="32852" fg:w="15"/><text x="29.3362%" y="511.50"></text></g><g><title>core::slice::iter::&lt;impl core::iter::traits::collect::IntoIterator for &amp;[T]&gt;::into_iter (12 samples, 0.01%)</title><rect x="29.1013%" y="517" width="0.0106%" height="15" fill="rgb(205,184,25)" fg:x="32869" fg:w="12"/><text x="29.3513%" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (12 samples, 0.01%)</title><rect x="29.1013%" y="501" width="0.0106%" height="15" fill="rgb(228,1,10)" fg:x="32869" fg:w="12"/><text x="29.3513%" y="511.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (12 samples, 0.01%)</title><rect x="29.1013%" y="485" width="0.0106%" height="15" fill="rgb(213,116,27)" fg:x="32869" fg:w="12"/><text x="29.3513%" y="495.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (85 samples, 0.08%)</title><rect x="29.1225%" y="485" width="0.0753%" height="15" fill="rgb(241,95,50)" fg:x="32893" fg:w="85"/><text x="29.3725%" y="495.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (46 samples, 0.04%)</title><rect x="29.1570%" y="469" width="0.0407%" height="15" fill="rgb(238,48,32)" fg:x="32932" fg:w="46"/><text x="29.4070%" y="479.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (46 samples, 0.04%)</title><rect x="29.1570%" y="453" width="0.0407%" height="15" fill="rgb(235,113,49)" fg:x="32932" fg:w="46"/><text x="29.4070%" y="463.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (101 samples, 0.09%)</title><rect x="29.2234%" y="453" width="0.0894%" height="15" fill="rgb(205,127,43)" fg:x="33007" fg:w="101"/><text x="29.4734%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (101 samples, 0.09%)</title><rect x="29.2234%" y="437" width="0.0894%" height="15" fill="rgb(250,162,2)" fg:x="33007" fg:w="101"/><text x="29.4734%" y="447.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (101 samples, 0.09%)</title><rect x="29.2234%" y="421" width="0.0894%" height="15" fill="rgb(220,13,41)" fg:x="33007" fg:w="101"/><text x="29.4734%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (101 samples, 0.09%)</title><rect x="29.2234%" y="405" width="0.0894%" height="15" fill="rgb(249,221,25)" fg:x="33007" fg:w="101"/><text x="29.4734%" y="415.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (101 samples, 0.09%)</title><rect x="29.2234%" y="389" width="0.0894%" height="15" fill="rgb(215,208,19)" fg:x="33007" fg:w="101"/><text x="29.4734%" y="399.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (101 samples, 0.09%)</title><rect x="29.2234%" y="373" width="0.0894%" height="15" fill="rgb(236,175,2)" fg:x="33007" fg:w="101"/><text x="29.4734%" y="383.50"></text></g><g><title>[libc-2.31.so] (69 samples, 0.06%)</title><rect x="29.2518%" y="357" width="0.0611%" height="15" fill="rgb(241,52,2)" fg:x="33039" fg:w="69"/><text x="29.5018%" y="367.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (230 samples, 0.20%)</title><rect x="29.1119%" y="517" width="0.2036%" height="15" fill="rgb(248,140,14)" fg:x="32881" fg:w="230"/><text x="29.3619%" y="527.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (219 samples, 0.19%)</title><rect x="29.1216%" y="501" width="0.1939%" height="15" fill="rgb(253,22,42)" fg:x="32892" fg:w="219"/><text x="29.3716%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (133 samples, 0.12%)</title><rect x="29.1978%" y="485" width="0.1178%" height="15" fill="rgb(234,61,47)" fg:x="32978" fg:w="133"/><text x="29.4478%" y="495.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (K,L)&gt;::eq (133 samples, 0.12%)</title><rect x="29.1978%" y="469" width="0.1178%" height="15" fill="rgb(208,226,15)" fg:x="32978" fg:w="133"/><text x="29.4478%" y="479.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (30 samples, 0.03%)</title><rect x="29.3368%" y="485" width="0.0266%" height="15" fill="rgb(217,221,4)" fg:x="33135" fg:w="30"/><text x="29.5868%" y="495.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (14 samples, 0.01%)</title><rect x="29.3837%" y="469" width="0.0124%" height="15" fill="rgb(212,174,34)" fg:x="33188" fg:w="14"/><text x="29.6337%" y="479.50"></text></g><g><title>&lt;halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt; as core::convert::From&lt;halfbrown::vecmap::raw_entry::RawEntryMut&lt;K,V,S&gt;&gt;&gt;::from (14 samples, 0.01%)</title><rect x="29.3837%" y="453" width="0.0124%" height="15" fill="rgb(253,83,4)" fg:x="33188" fg:w="14"/><text x="29.6337%" y="463.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (151 samples, 0.13%)</title><rect x="29.3633%" y="485" width="0.1337%" height="15" fill="rgb(250,195,49)" fg:x="33165" fg:w="151"/><text x="29.6133%" y="495.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (114 samples, 0.10%)</title><rect x="29.3961%" y="469" width="0.1009%" height="15" fill="rgb(241,192,25)" fg:x="33202" fg:w="114"/><text x="29.6461%" y="479.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (114 samples, 0.10%)</title><rect x="29.3961%" y="453" width="0.1009%" height="15" fill="rgb(208,124,10)" fg:x="33202" fg:w="114"/><text x="29.6461%" y="463.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_hash (114 samples, 0.10%)</title><rect x="29.3961%" y="437" width="0.1009%" height="15" fill="rgb(222,33,0)" fg:x="33202" fg:w="114"/><text x="29.6461%" y="447.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::search (114 samples, 0.10%)</title><rect x="29.3961%" y="421" width="0.1009%" height="15" fill="rgb(234,209,28)" fg:x="33202" fg:w="114"/><text x="29.6461%" y="431.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (91 samples, 0.08%)</title><rect x="29.4165%" y="405" width="0.0806%" height="15" fill="rgb(224,11,23)" fg:x="33225" fg:w="91"/><text x="29.6665%" y="415.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (91 samples, 0.08%)</title><rect x="29.4165%" y="389" width="0.0806%" height="15" fill="rgb(232,99,1)" fg:x="33225" fg:w="91"/><text x="29.6665%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (85 samples, 0.08%)</title><rect x="29.4218%" y="373" width="0.0753%" height="15" fill="rgb(237,95,45)" fg:x="33231" fg:w="85"/><text x="29.6718%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (85 samples, 0.08%)</title><rect x="29.4218%" y="357" width="0.0753%" height="15" fill="rgb(208,109,11)" fg:x="33231" fg:w="85"/><text x="29.6718%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (85 samples, 0.08%)</title><rect x="29.4218%" y="341" width="0.0753%" height="15" fill="rgb(216,190,48)" fg:x="33231" fg:w="85"/><text x="29.6718%" y="351.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (85 samples, 0.08%)</title><rect x="29.4218%" y="325" width="0.0753%" height="15" fill="rgb(251,171,36)" fg:x="33231" fg:w="85"/><text x="29.6718%" y="335.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (85 samples, 0.08%)</title><rect x="29.4218%" y="309" width="0.0753%" height="15" fill="rgb(230,62,22)" fg:x="33231" fg:w="85"/><text x="29.6718%" y="319.50"></text></g><g><title>[libc-2.31.so] (48 samples, 0.04%)</title><rect x="29.4545%" y="293" width="0.0425%" height="15" fill="rgb(225,114,35)" fg:x="33268" fg:w="48"/><text x="29.7045%" y="303.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue_events (1,890 samples, 1.67%)</title><rect x="27.8635%" y="533" width="1.6734%" height="15" fill="rgb(215,118,42)" fg:x="31471" fg:w="1890"/><text x="28.1135%" y="543.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_input (250 samples, 0.22%)</title><rect x="29.3155%" y="517" width="0.2213%" height="15" fill="rgb(243,119,21)" fg:x="33111" fg:w="250"/><text x="29.5655%" y="527.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_input_n (248 samples, 0.22%)</title><rect x="29.3173%" y="501" width="0.2196%" height="15" fill="rgb(252,177,53)" fg:x="33113" fg:w="248"/><text x="29.5673%" y="511.50"></text></g><g><title>halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt;::or_insert_with (45 samples, 0.04%)</title><rect x="29.4970%" y="485" width="0.0398%" height="15" fill="rgb(237,209,29)" fg:x="33316" fg:w="45"/><text x="29.7470%" y="495.50"></text></g><g><title>halfbrown::raw_entry::RawOccupiedEntryMut&lt;K,V,S&gt;::into_key_value (23 samples, 0.02%)</title><rect x="29.5165%" y="469" width="0.0204%" height="15" fill="rgb(212,65,23)" fg:x="33338" fg:w="23"/><text x="29.7665%" y="479.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (21 samples, 0.02%)</title><rect x="29.5555%" y="501" width="0.0186%" height="15" fill="rgb(230,222,46)" fg:x="33382" fg:w="21"/><text x="29.8055%" y="511.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (21 samples, 0.02%)</title><rect x="29.6033%" y="485" width="0.0186%" height="15" fill="rgb(215,135,32)" fg:x="33436" fg:w="21"/><text x="29.8533%" y="495.50"></text></g><g><title>&lt;halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt; as core::convert::From&lt;halfbrown::vecmap::raw_entry::RawEntryMut&lt;K,V,S&gt;&gt;&gt;::from (21 samples, 0.02%)</title><rect x="29.6033%" y="469" width="0.0186%" height="15" fill="rgb(246,101,22)" fg:x="33436" fg:w="21"/><text x="29.8533%" y="479.50"></text></g><g><title>halfbrown::raw_entry::RawEntryMut::Occupied (13 samples, 0.01%)</title><rect x="29.6103%" y="453" width="0.0115%" height="15" fill="rgb(206,107,13)" fg:x="33444" fg:w="13"/><text x="29.8603%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.01%)</title><rect x="29.6343%" y="421" width="0.0124%" height="15" fill="rgb(250,100,44)" fg:x="33471" fg:w="14"/><text x="29.8843%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.01%)</title><rect x="29.6343%" y="405" width="0.0124%" height="15" fill="rgb(231,147,38)" fg:x="33471" fg:w="14"/><text x="29.8843%" y="415.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (165 samples, 0.15%)</title><rect x="29.5740%" y="501" width="0.1461%" height="15" fill="rgb(229,8,40)" fg:x="33403" fg:w="165"/><text x="29.8240%" y="511.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (111 samples, 0.10%)</title><rect x="29.6219%" y="485" width="0.0983%" height="15" fill="rgb(221,135,30)" fg:x="33457" fg:w="111"/><text x="29.8719%" y="495.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (111 samples, 0.10%)</title><rect x="29.6219%" y="469" width="0.0983%" height="15" fill="rgb(249,193,18)" fg:x="33457" fg:w="111"/><text x="29.8719%" y="479.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_hash (111 samples, 0.10%)</title><rect x="29.6219%" y="453" width="0.0983%" height="15" fill="rgb(209,133,39)" fg:x="33457" fg:w="111"/><text x="29.8719%" y="463.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::search (111 samples, 0.10%)</title><rect x="29.6219%" y="437" width="0.0983%" height="15" fill="rgb(232,100,14)" fg:x="33457" fg:w="111"/><text x="29.8719%" y="447.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (83 samples, 0.07%)</title><rect x="29.6466%" y="421" width="0.0735%" height="15" fill="rgb(224,185,1)" fg:x="33485" fg:w="83"/><text x="29.8966%" y="431.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (83 samples, 0.07%)</title><rect x="29.6466%" y="405" width="0.0735%" height="15" fill="rgb(223,139,8)" fg:x="33485" fg:w="83"/><text x="29.8966%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (82 samples, 0.07%)</title><rect x="29.6475%" y="389" width="0.0726%" height="15" fill="rgb(232,213,38)" fg:x="33486" fg:w="82"/><text x="29.8975%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (82 samples, 0.07%)</title><rect x="29.6475%" y="373" width="0.0726%" height="15" fill="rgb(207,94,22)" fg:x="33486" fg:w="82"/><text x="29.8975%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (82 samples, 0.07%)</title><rect x="29.6475%" y="357" width="0.0726%" height="15" fill="rgb(219,183,54)" fg:x="33486" fg:w="82"/><text x="29.8975%" y="367.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (82 samples, 0.07%)</title><rect x="29.6475%" y="341" width="0.0726%" height="15" fill="rgb(216,185,54)" fg:x="33486" fg:w="82"/><text x="29.8975%" y="351.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (82 samples, 0.07%)</title><rect x="29.6475%" y="325" width="0.0726%" height="15" fill="rgb(254,217,39)" fg:x="33486" fg:w="82"/><text x="29.8975%" y="335.50"></text></g><g><title>[libc-2.31.so] (56 samples, 0.05%)</title><rect x="29.6706%" y="309" width="0.0496%" height="15" fill="rgb(240,178,23)" fg:x="33512" fg:w="56"/><text x="29.9206%" y="319.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (5,764 samples, 5.10%)</title><rect x="24.6567%" y="581" width="5.1033%" height="15" fill="rgb(218,11,47)" fg:x="27849" fg:w="5764"/><text x="24.9067%" y="591.50">tremor..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (4,633 samples, 4.10%)</title><rect x="25.6581%" y="565" width="4.1019%" height="15" fill="rgb(218,51,51)" fg:x="28980" fg:w="4633"/><text x="25.9081%" y="575.50">trem..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (4,593 samples, 4.07%)</title><rect x="25.6935%" y="549" width="4.0665%" height="15" fill="rgb(238,126,27)" fg:x="29020" fg:w="4593"/><text x="25.9435%" y="559.50">trem..</text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_output (250 samples, 0.22%)</title><rect x="29.5386%" y="533" width="0.2213%" height="15" fill="rgb(249,202,22)" fg:x="33363" fg:w="250"/><text x="29.7886%" y="543.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_output_n (245 samples, 0.22%)</title><rect x="29.5431%" y="517" width="0.2169%" height="15" fill="rgb(254,195,49)" fg:x="33368" fg:w="245"/><text x="29.7931%" y="527.50"></text></g><g><title>halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt;::or_insert_with (45 samples, 0.04%)</title><rect x="29.7201%" y="501" width="0.0398%" height="15" fill="rgb(208,123,14)" fg:x="33568" fg:w="45"/><text x="29.9701%" y="511.50"></text></g><g><title>halfbrown::raw_entry::RawOccupiedEntryMut&lt;K,V,S&gt;::into_key_value (21 samples, 0.02%)</title><rect x="29.7414%" y="485" width="0.0186%" height="15" fill="rgb(224,200,8)" fg:x="33592" fg:w="21"/><text x="29.9914%" y="495.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,198 samples, 5.49%)</title><rect x="24.3690%" y="597" width="5.4875%" height="15" fill="rgb(217,61,36)" fg:x="27524" fg:w="6198"/><text x="24.6190%" y="607.50">&lt;core::..</text></g><g><title>tremor_runtime::pipeline::handle_insights::{{closure}} (109 samples, 0.10%)</title><rect x="29.7600%" y="581" width="0.0965%" height="15" fill="rgb(206,35,45)" fg:x="33613" fg:w="109"/><text x="30.0100%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::is_empty (23 samples, 0.02%)</title><rect x="29.8361%" y="565" width="0.0204%" height="15" fill="rgb(217,65,33)" fg:x="33699" fg:w="23"/><text x="30.0861%" y="575.50"></text></g><g><title>[libc-2.31.so] (760 samples, 0.67%)</title><rect x="29.8565%" y="597" width="0.6729%" height="15" fill="rgb(222,158,48)" fg:x="33722" fg:w="760"/><text x="30.1065%" y="607.50"></text></g><g><title>sn_rust_dealloc (97 samples, 0.09%)</title><rect x="30.5311%" y="437" width="0.0859%" height="15" fill="rgb(254,2,54)" fg:x="34484" fg:w="97"/><text x="30.7811%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (101 samples, 0.09%)</title><rect x="30.5294%" y="597" width="0.0894%" height="15" fill="rgb(250,143,38)" fg:x="34482" fg:w="101"/><text x="30.7794%" y="607.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (101 samples, 0.09%)</title><rect x="30.5294%" y="581" width="0.0894%" height="15" fill="rgb(248,25,0)" fg:x="34482" fg:w="101"/><text x="30.7794%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (99 samples, 0.09%)</title><rect x="30.5311%" y="565" width="0.0877%" height="15" fill="rgb(206,152,27)" fg:x="34484" fg:w="99"/><text x="30.7811%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (99 samples, 0.09%)</title><rect x="30.5311%" y="549" width="0.0877%" height="15" fill="rgb(240,77,30)" fg:x="34484" fg:w="99"/><text x="30.7811%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (99 samples, 0.09%)</title><rect x="30.5311%" y="533" width="0.0877%" height="15" fill="rgb(231,5,3)" fg:x="34484" fg:w="99"/><text x="30.7811%" y="543.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (99 samples, 0.09%)</title><rect x="30.5311%" y="517" width="0.0877%" height="15" fill="rgb(207,226,32)" fg:x="34484" fg:w="99"/><text x="30.7811%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (99 samples, 0.09%)</title><rect x="30.5311%" y="501" width="0.0877%" height="15" fill="rgb(222,207,47)" fg:x="34484" fg:w="99"/><text x="30.7811%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (99 samples, 0.09%)</title><rect x="30.5311%" y="485" width="0.0877%" height="15" fill="rgb(229,115,45)" fg:x="34484" fg:w="99"/><text x="30.7811%" y="495.50"></text></g><g><title>__rg_dealloc (99 samples, 0.09%)</title><rect x="30.5311%" y="469" width="0.0877%" height="15" fill="rgb(224,191,6)" fg:x="34484" fg:w="99"/><text x="30.7811%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (99 samples, 0.09%)</title><rect x="30.5311%" y="453" width="0.0877%" height="15" fill="rgb(230,227,24)" fg:x="34484" fg:w="99"/><text x="30.7811%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt;&gt; (38 samples, 0.03%)</title><rect x="30.6223%" y="597" width="0.0336%" height="15" fill="rgb(228,80,19)" fg:x="34587" fg:w="38"/><text x="30.8723%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt; (38 samples, 0.03%)</title><rect x="30.6223%" y="581" width="0.0336%" height="15" fill="rgb(247,229,0)" fg:x="34587" fg:w="38"/><text x="30.8723%" y="591.50"></text></g><g><title>async_global_executor::reactor::block_on (18,719 samples, 16.57%)</title><rect x="14.0863%" y="949" width="16.5733%" height="15" fill="rgb(237,194,15)" fg:x="15910" fg:w="18719"/><text x="14.3363%" y="959.50">async_global_executor::rea..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (18,719 samples, 16.57%)</title><rect x="14.0863%" y="933" width="16.5733%" height="15" fill="rgb(219,203,20)" fg:x="15910" fg:w="18719"/><text x="14.3363%" y="943.50">async_global_executor::rea..</text></g><g><title>async_io::driver::block_on (18,719 samples, 16.57%)</title><rect x="14.0863%" y="917" width="16.5733%" height="15" fill="rgb(234,128,8)" fg:x="15910" fg:w="18719"/><text x="14.3363%" y="927.50">async_io::driver::block_on</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (18,719 samples, 16.57%)</title><rect x="14.0863%" y="901" width="16.5733%" height="15" fill="rgb(248,202,8)" fg:x="15910" fg:w="18719"/><text x="14.3363%" y="911.50">&lt;futures_lite::future::Or&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,719 samples, 16.57%)</title><rect x="14.0863%" y="885" width="16.5733%" height="15" fill="rgb(206,104,37)" fg:x="15910" fg:w="18719"/><text x="14.3363%" y="895.50">&lt;core::future::from_genera..</text></g><g><title>async_executor::Executor::run::{{closure}} (18,719 samples, 16.57%)</title><rect x="14.0863%" y="869" width="16.5733%" height="15" fill="rgb(223,8,27)" fg:x="15910" fg:w="18719"/><text x="14.3363%" y="879.50">async_executor::Executor::..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (18,719 samples, 16.57%)</title><rect x="14.0863%" y="853" width="16.5733%" height="15" fill="rgb(216,217,28)" fg:x="15910" fg:w="18719"/><text x="14.3363%" y="863.50">&lt;futures_lite::future::Or&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,719 samples, 16.57%)</title><rect x="14.0863%" y="837" width="16.5733%" height="15" fill="rgb(249,199,1)" fg:x="15910" fg:w="18719"/><text x="14.3363%" y="847.50">&lt;core::future::from_genera..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (18,719 samples, 16.57%)</title><rect x="14.0863%" y="821" width="16.5733%" height="15" fill="rgb(240,85,17)" fg:x="15910" fg:w="18719"/><text x="14.3363%" y="831.50">async_executor::Executor::..</text></g><g><title>async_task::runnable::Runnable::run (18,719 samples, 16.57%)</title><rect x="14.0863%" y="805" width="16.5733%" height="15" fill="rgb(206,108,45)" fg:x="15910" fg:w="18719"/><text x="14.3363%" y="815.50">async_task::runnable::Runn..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (18,719 samples, 16.57%)</title><rect x="14.0863%" y="789" width="16.5733%" height="15" fill="rgb(245,210,41)" fg:x="15910" fg:w="18719"/><text x="14.3363%" y="799.50">async_task::raw::RawTask&lt;F..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (18,718 samples, 16.57%)</title><rect x="14.0871%" y="773" width="16.5724%" height="15" fill="rgb(206,13,37)" fg:x="15911" fg:w="18718"/><text x="14.3371%" y="783.50">&lt;core::pin::Pin&lt;P&gt; as core..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,718 samples, 16.57%)</title><rect x="14.0871%" y="757" width="16.5724%" height="15" fill="rgb(250,61,18)" fg:x="15911" fg:w="18718"/><text x="14.3371%" y="767.50">&lt;core::future::from_genera..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (18,718 samples, 16.57%)</title><rect x="14.0871%" y="741" width="16.5724%" height="15" fill="rgb(235,172,48)" fg:x="15911" fg:w="18718"/><text x="14.3371%" y="751.50">async_executor::Executor::..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (18,718 samples, 16.57%)</title><rect x="14.0871%" y="725" width="16.5724%" height="15" fill="rgb(249,201,17)" fg:x="15911" fg:w="18718"/><text x="14.3371%" y="735.50">&lt;async_std::task::builder:..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (18,718 samples, 16.57%)</title><rect x="14.0871%" y="709" width="16.5724%" height="15" fill="rgb(219,208,6)" fg:x="15911" fg:w="18718"/><text x="14.3371%" y="719.50">async_std::task::task_loca..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (18,718 samples, 16.57%)</title><rect x="14.0871%" y="693" width="16.5724%" height="15" fill="rgb(248,31,23)" fg:x="15911" fg:w="18718"/><text x="14.3371%" y="703.50">std::thread::local::LocalK..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (18,718 samples, 16.57%)</title><rect x="14.0871%" y="677" width="16.5724%" height="15" fill="rgb(245,15,42)" fg:x="15911" fg:w="18718"/><text x="14.3371%" y="687.50">std::thread::local::LocalK..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (18,718 samples, 16.57%)</title><rect x="14.0871%" y="661" width="16.5724%" height="15" fill="rgb(222,217,39)" fg:x="15911" fg:w="18718"/><text x="14.3371%" y="671.50">async_std::task::task_loca..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (18,718 samples, 16.57%)</title><rect x="14.0871%" y="645" width="16.5724%" height="15" fill="rgb(210,219,27)" fg:x="15911" fg:w="18718"/><text x="14.3371%" y="655.50">&lt;async_std::task::builder:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,718 samples, 16.57%)</title><rect x="14.0871%" y="629" width="16.5724%" height="15" fill="rgb(252,166,36)" fg:x="15911" fg:w="18718"/><text x="14.3371%" y="639.50">&lt;core::future::from_genera..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (7,471 samples, 6.61%)</title><rect x="24.0449%" y="613" width="6.6146%" height="15" fill="rgb(245,132,34)" fg:x="27158" fg:w="7471"/><text x="24.2949%" y="623.50">tremor_ru..</text></g><g><title>[libc-2.31.so] (367 samples, 0.32%)</title><rect x="30.7339%" y="405" width="0.3249%" height="15" fill="rgb(236,54,3)" fg:x="34713" fg:w="367"/><text x="30.9839%" y="415.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (398 samples, 0.35%)</title><rect x="30.7117%" y="421" width="0.3524%" height="15" fill="rgb(241,173,43)" fg:x="34688" fg:w="398"/><text x="30.9617%" y="431.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (612 samples, 0.54%)</title><rect x="30.6728%" y="437" width="0.5418%" height="15" fill="rgb(215,190,9)" fg:x="34644" fg:w="612"/><text x="30.9228%" y="447.50"></text></g><g><title>[libc-2.31.so] (170 samples, 0.15%)</title><rect x="31.0641%" y="421" width="0.1505%" height="15" fill="rgb(242,101,16)" fg:x="35086" fg:w="170"/><text x="31.3141%" y="431.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (630 samples, 0.56%)</title><rect x="30.6595%" y="469" width="0.5578%" height="15" fill="rgb(223,190,21)" fg:x="34629" fg:w="630"/><text x="30.9095%" y="479.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (630 samples, 0.56%)</title><rect x="30.6595%" y="453" width="0.5578%" height="15" fill="rgb(215,228,25)" fg:x="34629" fg:w="630"/><text x="30.9095%" y="463.50"></text></g><g><title>&lt;tremor_pipeline::event::ValueIter as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.02%)</title><rect x="33.8849%" y="421" width="0.0195%" height="15" fill="rgb(225,36,22)" fg:x="38272" fg:w="22"/><text x="34.1349%" y="431.50"></text></g><g><title>[libc-2.31.so] (165 samples, 0.15%)</title><rect x="33.9044%" y="421" width="0.1461%" height="15" fill="rgb(251,106,46)" fg:x="38294" fg:w="165"/><text x="34.1544%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (21 samples, 0.02%)</title><rect x="34.0540%" y="421" width="0.0186%" height="15" fill="rgb(208,90,1)" fg:x="38463" fg:w="21"/><text x="34.3040%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (21 samples, 0.02%)</title><rect x="34.0540%" y="405" width="0.0186%" height="15" fill="rgb(243,10,4)" fg:x="38463" fg:w="21"/><text x="34.3040%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (19 samples, 0.02%)</title><rect x="34.0726%" y="421" width="0.0168%" height="15" fill="rgb(212,137,27)" fg:x="38484" fg:w="19"/><text x="34.3226%" y="431.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (19 samples, 0.02%)</title><rect x="34.0726%" y="405" width="0.0168%" height="15" fill="rgb(231,220,49)" fg:x="38484" fg:w="19"/><text x="34.3226%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (19 samples, 0.02%)</title><rect x="34.0726%" y="389" width="0.0168%" height="15" fill="rgb(237,96,20)" fg:x="38484" fg:w="19"/><text x="34.3226%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (19 samples, 0.02%)</title><rect x="34.0726%" y="373" width="0.0168%" height="15" fill="rgb(239,229,30)" fg:x="38484" fg:w="19"/><text x="34.3226%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::iter (15 samples, 0.01%)</title><rect x="34.0894%" y="421" width="0.0133%" height="15" fill="rgb(219,65,33)" fg:x="38503" fg:w="15"/><text x="34.3394%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (15 samples, 0.01%)</title><rect x="34.0894%" y="405" width="0.0133%" height="15" fill="rgb(243,134,7)" fg:x="38503" fg:w="15"/><text x="34.3394%" y="415.50"></text></g><g><title>sn_rust_dealloc (78 samples, 0.07%)</title><rect x="34.1249%" y="261" width="0.0691%" height="15" fill="rgb(216,177,54)" fg:x="38543" fg:w="78"/><text x="34.3749%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (122 samples, 0.11%)</title><rect x="34.1027%" y="405" width="0.1080%" height="15" fill="rgb(211,160,20)" fg:x="38518" fg:w="122"/><text x="34.3527%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;u8&gt;]&gt; (122 samples, 0.11%)</title><rect x="34.1027%" y="389" width="0.1080%" height="15" fill="rgb(239,85,39)" fg:x="38518" fg:w="122"/><text x="34.3527%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (112 samples, 0.10%)</title><rect x="34.1116%" y="373" width="0.0992%" height="15" fill="rgb(232,125,22)" fg:x="38528" fg:w="112"/><text x="34.3616%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (112 samples, 0.10%)</title><rect x="34.1116%" y="357" width="0.0992%" height="15" fill="rgb(244,57,34)" fg:x="38528" fg:w="112"/><text x="34.3616%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (112 samples, 0.10%)</title><rect x="34.1116%" y="341" width="0.0992%" height="15" fill="rgb(214,203,32)" fg:x="38528" fg:w="112"/><text x="34.3616%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (106 samples, 0.09%)</title><rect x="34.1169%" y="325" width="0.0938%" height="15" fill="rgb(207,58,43)" fg:x="38534" fg:w="106"/><text x="34.3669%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (106 samples, 0.09%)</title><rect x="34.1169%" y="309" width="0.0938%" height="15" fill="rgb(215,193,15)" fg:x="38534" fg:w="106"/><text x="34.3669%" y="319.50"></text></g><g><title>__rg_dealloc (106 samples, 0.09%)</title><rect x="34.1169%" y="293" width="0.0938%" height="15" fill="rgb(232,15,44)" fg:x="38534" fg:w="106"/><text x="34.3669%" y="303.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (106 samples, 0.09%)</title><rect x="34.1169%" y="277" width="0.0938%" height="15" fill="rgb(212,3,48)" fg:x="38534" fg:w="106"/><text x="34.3669%" y="287.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (19 samples, 0.02%)</title><rect x="34.1939%" y="261" width="0.0168%" height="15" fill="rgb(218,128,7)" fg:x="38621" fg:w="19"/><text x="34.4439%" y="271.50"></text></g><g><title>sn_rust_dealloc (40 samples, 0.04%)</title><rect x="34.2160%" y="309" width="0.0354%" height="15" fill="rgb(226,216,39)" fg:x="38646" fg:w="40"/><text x="34.4660%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (47 samples, 0.04%)</title><rect x="34.2107%" y="373" width="0.0416%" height="15" fill="rgb(243,47,51)" fg:x="38640" fg:w="47"/><text x="34.4607%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (47 samples, 0.04%)</title><rect x="34.2107%" y="357" width="0.0416%" height="15" fill="rgb(241,183,40)" fg:x="38640" fg:w="47"/><text x="34.4607%" y="367.50"></text></g><g><title>__rg_dealloc (47 samples, 0.04%)</title><rect x="34.2107%" y="341" width="0.0416%" height="15" fill="rgb(231,217,32)" fg:x="38640" fg:w="47"/><text x="34.4607%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (47 samples, 0.04%)</title><rect x="34.2107%" y="325" width="0.0416%" height="15" fill="rgb(229,61,38)" fg:x="38640" fg:w="47"/><text x="34.4607%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (172 samples, 0.15%)</title><rect x="34.1027%" y="421" width="0.1523%" height="15" fill="rgb(225,210,5)" fg:x="38518" fg:w="172"/><text x="34.3527%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (50 samples, 0.04%)</title><rect x="34.2107%" y="405" width="0.0443%" height="15" fill="rgb(231,79,45)" fg:x="38640" fg:w="50"/><text x="34.4607%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (50 samples, 0.04%)</title><rect x="34.2107%" y="389" width="0.0443%" height="15" fill="rgb(224,100,7)" fg:x="38640" fg:w="50"/><text x="34.4607%" y="399.50"></text></g><g><title>sn_rust_dealloc (187 samples, 0.17%)</title><rect x="34.2780%" y="245" width="0.1656%" height="15" fill="rgb(241,198,18)" fg:x="38716" fg:w="187"/><text x="34.5280%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (202 samples, 0.18%)</title><rect x="34.2683%" y="373" width="0.1788%" height="15" fill="rgb(252,97,53)" fg:x="38705" fg:w="202"/><text x="34.5183%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (202 samples, 0.18%)</title><rect x="34.2683%" y="357" width="0.1788%" height="15" fill="rgb(220,88,7)" fg:x="38705" fg:w="202"/><text x="34.5183%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (202 samples, 0.18%)</title><rect x="34.2683%" y="341" width="0.1788%" height="15" fill="rgb(213,176,14)" fg:x="38705" fg:w="202"/><text x="34.5183%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (202 samples, 0.18%)</title><rect x="34.2683%" y="325" width="0.1788%" height="15" fill="rgb(246,73,7)" fg:x="38705" fg:w="202"/><text x="34.5183%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (199 samples, 0.18%)</title><rect x="34.2709%" y="309" width="0.1762%" height="15" fill="rgb(245,64,36)" fg:x="38708" fg:w="199"/><text x="34.5209%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (199 samples, 0.18%)</title><rect x="34.2709%" y="293" width="0.1762%" height="15" fill="rgb(245,80,10)" fg:x="38708" fg:w="199"/><text x="34.5209%" y="303.50"></text></g><g><title>__rg_dealloc (199 samples, 0.18%)</title><rect x="34.2709%" y="277" width="0.1762%" height="15" fill="rgb(232,107,50)" fg:x="38708" fg:w="199"/><text x="34.5209%" y="287.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (199 samples, 0.18%)</title><rect x="34.2709%" y="261" width="0.1762%" height="15" fill="rgb(253,3,0)" fg:x="38708" fg:w="199"/><text x="34.5209%" y="271.50"></text></g><g><title>sn_rust_dealloc (177 samples, 0.16%)</title><rect x="34.8491%" y="197" width="0.1567%" height="15" fill="rgb(212,99,53)" fg:x="39361" fg:w="177"/><text x="35.0991%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (193 samples, 0.17%)</title><rect x="34.8464%" y="261" width="0.1709%" height="15" fill="rgb(249,111,54)" fg:x="39358" fg:w="193"/><text x="35.0964%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (193 samples, 0.17%)</title><rect x="34.8464%" y="245" width="0.1709%" height="15" fill="rgb(249,55,30)" fg:x="39358" fg:w="193"/><text x="35.0964%" y="255.50"></text></g><g><title>__rg_dealloc (193 samples, 0.17%)</title><rect x="34.8464%" y="229" width="0.1709%" height="15" fill="rgb(237,47,42)" fg:x="39358" fg:w="193"/><text x="35.0964%" y="239.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (193 samples, 0.17%)</title><rect x="34.8464%" y="213" width="0.1709%" height="15" fill="rgb(211,20,18)" fg:x="39358" fg:w="193"/><text x="35.0964%" y="223.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (13 samples, 0.01%)</title><rect x="35.0058%" y="197" width="0.0115%" height="15" fill="rgb(231,203,46)" fg:x="39538" fg:w="13"/><text x="35.2558%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (658 samples, 0.58%)</title><rect x="34.4471%" y="357" width="0.5826%" height="15" fill="rgb(237,142,3)" fg:x="38907" fg:w="658"/><text x="34.6971%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (655 samples, 0.58%)</title><rect x="34.4498%" y="341" width="0.5799%" height="15" fill="rgb(241,107,1)" fg:x="38910" fg:w="655"/><text x="34.6998%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (646 samples, 0.57%)</title><rect x="34.4578%" y="325" width="0.5719%" height="15" fill="rgb(229,83,13)" fg:x="38919" fg:w="646"/><text x="34.7078%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (646 samples, 0.57%)</title><rect x="34.4578%" y="309" width="0.5719%" height="15" fill="rgb(241,91,40)" fg:x="38919" fg:w="646"/><text x="34.7078%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (646 samples, 0.57%)</title><rect x="34.4578%" y="293" width="0.5719%" height="15" fill="rgb(225,3,45)" fg:x="38919" fg:w="646"/><text x="34.7078%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (646 samples, 0.57%)</title><rect x="34.4578%" y="277" width="0.5719%" height="15" fill="rgb(244,223,14)" fg:x="38919" fg:w="646"/><text x="34.7078%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (14 samples, 0.01%)</title><rect x="35.0173%" y="261" width="0.0124%" height="15" fill="rgb(224,124,37)" fg:x="39551" fg:w="14"/><text x="35.2673%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (878 samples, 0.78%)</title><rect x="34.2612%" y="389" width="0.7774%" height="15" fill="rgb(251,171,30)" fg:x="38697" fg:w="878"/><text x="34.5112%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (668 samples, 0.59%)</title><rect x="34.4471%" y="373" width="0.5914%" height="15" fill="rgb(236,46,54)" fg:x="38907" fg:w="668"/><text x="34.6971%" y="383.50"></text></g><g><title>sn_rust_dealloc (63 samples, 0.06%)</title><rect x="35.0386%" y="389" width="0.0558%" height="15" fill="rgb(245,213,5)" fg:x="39575" fg:w="63"/><text x="35.2886%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (968 samples, 0.86%)</title><rect x="34.2612%" y="405" width="0.8570%" height="15" fill="rgb(230,144,27)" fg:x="38697" fg:w="968"/><text x="34.5112%" y="415.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (27 samples, 0.02%)</title><rect x="35.0943%" y="389" width="0.0239%" height="15" fill="rgb(220,86,6)" fg:x="39638" fg:w="27"/><text x="35.3443%" y="399.50"></text></g><g><title>core::mem::drop (652 samples, 0.58%)</title><rect x="35.4857%" y="293" width="0.5773%" height="15" fill="rgb(240,20,13)" fg:x="40080" fg:w="652"/><text x="35.7357%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;alloc::string::String&gt;&gt; (652 samples, 0.58%)</title><rect x="35.4857%" y="277" width="0.5773%" height="15" fill="rgb(217,89,34)" fg:x="40080" fg:w="652"/><text x="35.7357%" y="287.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (652 samples, 0.58%)</title><rect x="35.4857%" y="261" width="0.5773%" height="15" fill="rgb(229,13,5)" fg:x="40080" fg:w="652"/><text x="35.7357%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (638 samples, 0.56%)</title><rect x="35.4981%" y="245" width="0.5649%" height="15" fill="rgb(244,67,35)" fg:x="40094" fg:w="638"/><text x="35.7481%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_sub (638 samples, 0.56%)</title><rect x="35.4981%" y="229" width="0.5649%" height="15" fill="rgb(221,40,2)" fg:x="40094" fg:w="638"/><text x="35.7481%" y="239.50"></text></g><g><title>sn_rust_dealloc (116 samples, 0.10%)</title><rect x="36.0789%" y="165" width="0.1027%" height="15" fill="rgb(237,157,21)" fg:x="40750" fg:w="116"/><text x="36.3289%" y="175.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (983 samples, 0.87%)</title><rect x="35.4848%" y="309" width="0.8703%" height="15" fill="rgb(222,94,11)" fg:x="40079" fg:w="983"/><text x="35.7348%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (330 samples, 0.29%)</title><rect x="36.0629%" y="293" width="0.2922%" height="15" fill="rgb(249,113,6)" fg:x="40732" fg:w="330"/><text x="36.3129%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (330 samples, 0.29%)</title><rect x="36.0629%" y="277" width="0.2922%" height="15" fill="rgb(238,137,36)" fg:x="40732" fg:w="330"/><text x="36.3129%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (330 samples, 0.29%)</title><rect x="36.0629%" y="261" width="0.2922%" height="15" fill="rgb(210,102,26)" fg:x="40732" fg:w="330"/><text x="36.3129%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (330 samples, 0.29%)</title><rect x="36.0629%" y="245" width="0.2922%" height="15" fill="rgb(218,30,30)" fg:x="40732" fg:w="330"/><text x="36.3129%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (312 samples, 0.28%)</title><rect x="36.0789%" y="229" width="0.2762%" height="15" fill="rgb(214,67,26)" fg:x="40750" fg:w="312"/><text x="36.3289%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (312 samples, 0.28%)</title><rect x="36.0789%" y="213" width="0.2762%" height="15" fill="rgb(251,9,53)" fg:x="40750" fg:w="312"/><text x="36.3289%" y="223.50"></text></g><g><title>__rg_dealloc (312 samples, 0.28%)</title><rect x="36.0789%" y="197" width="0.2762%" height="15" fill="rgb(228,204,25)" fg:x="40750" fg:w="312"/><text x="36.3289%" y="207.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (312 samples, 0.28%)</title><rect x="36.0789%" y="181" width="0.2762%" height="15" fill="rgb(207,153,8)" fg:x="40750" fg:w="312"/><text x="36.3289%" y="191.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (196 samples, 0.17%)</title><rect x="36.1816%" y="165" width="0.1735%" height="15" fill="rgb(242,9,16)" fg:x="40866" fg:w="196"/><text x="36.4316%" y="175.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (680 samples, 0.60%)</title><rect x="36.3551%" y="309" width="0.6021%" height="15" fill="rgb(217,211,10)" fg:x="41062" fg:w="680"/><text x="36.6051%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_sub (680 samples, 0.60%)</title><rect x="36.3551%" y="293" width="0.6021%" height="15" fill="rgb(219,228,52)" fg:x="41062" fg:w="680"/><text x="36.6051%" y="303.50"></text></g><g><title>sn_rust_dealloc (71 samples, 0.06%)</title><rect x="36.9572%" y="309" width="0.0629%" height="15" fill="rgb(231,92,29)" fg:x="41742" fg:w="71"/><text x="37.2072%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,179 samples, 1.93%)</title><rect x="35.1236%" y="373" width="1.9292%" height="15" fill="rgb(232,8,23)" fg:x="39671" fg:w="2179"/><text x="35.3736%" y="383.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;[alloc::sync::Arc&lt;core::pin::Pin&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;]&gt; (2,179 samples, 1.93%)</title><rect x="35.1236%" y="357" width="1.9292%" height="15" fill="rgb(216,211,34)" fg:x="39671" fg:w="2179"/><text x="35.3736%" y="367.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;core::pin::Pin&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;&gt; (2,161 samples, 1.91%)</title><rect x="35.1395%" y="341" width="1.9133%" height="15" fill="rgb(236,151,0)" fg:x="39689" fg:w="2161"/><text x="35.3895%" y="351.50">c..</text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2,161 samples, 1.91%)</title><rect x="35.1395%" y="325" width="1.9133%" height="15" fill="rgb(209,168,3)" fg:x="39689" fg:w="2161"/><text x="35.3895%" y="335.50">&lt;..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (37 samples, 0.03%)</title><rect x="37.0200%" y="309" width="0.0328%" height="15" fill="rgb(208,129,28)" fg:x="41813" fg:w="37"/><text x="37.2700%" y="319.50"></text></g><g><title>sn_rust_dealloc (50 samples, 0.04%)</title><rect x="37.0607%" y="277" width="0.0443%" height="15" fill="rgb(229,78,22)" fg:x="41859" fg:w="50"/><text x="37.3107%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (56 samples, 0.05%)</title><rect x="37.0563%" y="341" width="0.0496%" height="15" fill="rgb(228,187,13)" fg:x="41854" fg:w="56"/><text x="37.3063%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (56 samples, 0.05%)</title><rect x="37.0563%" y="325" width="0.0496%" height="15" fill="rgb(240,119,24)" fg:x="41854" fg:w="56"/><text x="37.3063%" y="335.50"></text></g><g><title>__rg_dealloc (56 samples, 0.05%)</title><rect x="37.0563%" y="309" width="0.0496%" height="15" fill="rgb(209,194,42)" fg:x="41854" fg:w="56"/><text x="37.3063%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (56 samples, 0.05%)</title><rect x="37.0563%" y="293" width="0.0496%" height="15" fill="rgb(247,200,46)" fg:x="41854" fg:w="56"/><text x="37.3063%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;core::pin::Pin&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;&gt;&gt; (2,243 samples, 1.99%)</title><rect x="35.1236%" y="389" width="1.9859%" height="15" fill="rgb(218,76,16)" fg:x="39671" fg:w="2243"/><text x="35.3736%" y="399.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::sync::Arc&lt;core::pin::Pin&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;&gt;&gt; (64 samples, 0.06%)</title><rect x="37.0528%" y="373" width="0.0567%" height="15" fill="rgb(225,21,48)" fg:x="41850" fg:w="64"/><text x="37.3028%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (64 samples, 0.06%)</title><rect x="37.0528%" y="357" width="0.0567%" height="15" fill="rgb(239,223,50)" fg:x="41850" fg:w="64"/><text x="37.3028%" y="367.50"></text></g><g><title>[tremor-main] (28 samples, 0.02%)</title><rect x="37.2564%" y="229" width="0.0248%" height="15" fill="rgb(244,45,21)" fg:x="42080" fg:w="28"/><text x="37.5064%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (28 samples, 0.02%)</title><rect x="37.2564%" y="213" width="0.0248%" height="15" fill="rgb(232,33,43)" fg:x="42080" fg:w="28"/><text x="37.5064%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (86 samples, 0.08%)</title><rect x="37.2812%" y="229" width="0.0761%" height="15" fill="rgb(209,8,3)" fg:x="42108" fg:w="86"/><text x="37.5312%" y="239.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (86 samples, 0.08%)</title><rect x="37.2812%" y="213" width="0.0761%" height="15" fill="rgb(214,25,53)" fg:x="42108" fg:w="86"/><text x="37.5312%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (582 samples, 0.52%)</title><rect x="37.5778%" y="197" width="0.5153%" height="15" fill="rgb(254,186,54)" fg:x="42443" fg:w="582"/><text x="37.8278%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tremor_value::value::Value]&gt; (560 samples, 0.50%)</title><rect x="37.5973%" y="181" width="0.4958%" height="15" fill="rgb(208,174,49)" fg:x="42465" fg:w="560"/><text x="37.8473%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (437 samples, 0.39%)</title><rect x="37.7062%" y="165" width="0.3869%" height="15" fill="rgb(233,191,51)" fg:x="42588" fg:w="437"/><text x="37.9562%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (873 samples, 0.77%)</title><rect x="37.3573%" y="229" width="0.7729%" height="15" fill="rgb(222,134,10)" fg:x="42194" fg:w="873"/><text x="37.6073%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;tremor_value::value::Value&gt;&gt; (624 samples, 0.55%)</title><rect x="37.5778%" y="213" width="0.5525%" height="15" fill="rgb(230,226,20)" fg:x="42443" fg:w="624"/><text x="37.8278%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;tremor_value::value::Value&gt;&gt; (42 samples, 0.04%)</title><rect x="38.0931%" y="197" width="0.0372%" height="15" fill="rgb(251,111,25)" fg:x="43025" fg:w="42"/><text x="38.3431%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (42 samples, 0.04%)</title><rect x="38.0931%" y="181" width="0.0372%" height="15" fill="rgb(224,40,46)" fg:x="43025" fg:w="42"/><text x="38.3431%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (22 samples, 0.02%)</title><rect x="38.1108%" y="165" width="0.0195%" height="15" fill="rgb(236,108,47)" fg:x="43045" fg:w="22"/><text x="38.3608%" y="175.50"></text></g><g><title>core::alloc::layout::Layout::array (18 samples, 0.02%)</title><rect x="38.1143%" y="149" width="0.0159%" height="15" fill="rgb(234,93,0)" fg:x="43049" fg:w="18"/><text x="38.3643%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (18 samples, 0.02%)</title><rect x="38.1143%" y="133" width="0.0159%" height="15" fill="rgb(224,213,32)" fg:x="43049" fg:w="18"/><text x="38.3643%" y="143.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (18 samples, 0.02%)</title><rect x="38.1143%" y="117" width="0.0159%" height="15" fill="rgb(251,11,48)" fg:x="43049" fg:w="18"/><text x="38.3643%" y="127.50"></text></g><g><title>sn_rust_dealloc (283 samples, 0.25%)</title><rect x="38.1303%" y="229" width="0.2506%" height="15" fill="rgb(236,173,5)" fg:x="43067" fg:w="283"/><text x="38.3803%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,532 samples, 1.36%)</title><rect x="37.1643%" y="277" width="1.3564%" height="15" fill="rgb(230,95,12)" fg:x="41976" fg:w="1532"/><text x="37.4143%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)]&gt; (1,531 samples, 1.36%)</title><rect x="37.1652%" y="261" width="1.3555%" height="15" fill="rgb(232,209,1)" fg:x="41977" fg:w="1531"/><text x="37.4152%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)&gt; (1,499 samples, 1.33%)</title><rect x="37.1936%" y="245" width="1.3272%" height="15" fill="rgb(232,6,1)" fg:x="42009" fg:w="1499"/><text x="37.4436%" y="255.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (158 samples, 0.14%)</title><rect x="38.3808%" y="229" width="0.1399%" height="15" fill="rgb(210,224,50)" fg:x="43350" fg:w="158"/><text x="38.6308%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (1,582 samples, 1.40%)</title><rect x="37.1413%" y="325" width="1.4007%" height="15" fill="rgb(228,127,35)" fg:x="41950" fg:w="1582"/><text x="37.3913%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::vecmap::VecMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (1,556 samples, 1.38%)</title><rect x="37.1643%" y="309" width="1.3776%" height="15" fill="rgb(245,102,45)" fg:x="41976" fg:w="1556"/><text x="37.4143%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)&gt;&gt; (1,556 samples, 1.38%)</title><rect x="37.1643%" y="293" width="1.3776%" height="15" fill="rgb(214,1,49)" fg:x="41976" fg:w="1556"/><text x="37.4143%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)&gt;&gt; (24 samples, 0.02%)</title><rect x="38.5207%" y="277" width="0.0212%" height="15" fill="rgb(226,163,40)" fg:x="43508" fg:w="24"/><text x="38.7707%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.02%)</title><rect x="38.5207%" y="261" width="0.0212%" height="15" fill="rgb(239,212,28)" fg:x="43508" fg:w="24"/><text x="38.7707%" y="271.50"></text></g><g><title>sn_rust_dealloc (102 samples, 0.09%)</title><rect x="38.5420%" y="325" width="0.0903%" height="15" fill="rgb(220,20,13)" fg:x="43532" fg:w="102"/><text x="38.7920%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (2,066 samples, 1.83%)</title><rect x="37.1121%" y="373" width="1.8292%" height="15" fill="rgb(210,164,35)" fg:x="41917" fg:w="2066"/><text x="37.3621%" y="383.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt;&gt; (2,040 samples, 1.81%)</title><rect x="37.1351%" y="357" width="1.8062%" height="15" fill="rgb(248,109,41)" fg:x="41943" fg:w="2040"/><text x="37.3851%" y="367.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (2,033 samples, 1.80%)</title><rect x="37.1413%" y="341" width="1.8000%" height="15" fill="rgb(238,23,50)" fg:x="41950" fg:w="2033"/><text x="37.3913%" y="351.50">c..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (349 samples, 0.31%)</title><rect x="38.6323%" y="325" width="0.3090%" height="15" fill="rgb(211,48,49)" fg:x="43634" fg:w="349"/><text x="38.8823%" y="335.50"></text></g><g><title>sn_rust_dealloc (80 samples, 0.07%)</title><rect x="38.9413%" y="373" width="0.0708%" height="15" fill="rgb(223,36,21)" fg:x="43983" fg:w="80"/><text x="39.1913%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (4,408 samples, 3.90%)</title><rect x="35.1236%" y="405" width="3.9027%" height="15" fill="rgb(207,123,46)" fg:x="39671" fg:w="4408"/><text x="35.3736%" y="415.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (2,165 samples, 1.92%)</title><rect x="37.1094%" y="389" width="1.9168%" height="15" fill="rgb(240,218,32)" fg:x="41914" fg:w="2165"/><text x="37.3594%" y="399.50">c..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (16 samples, 0.01%)</title><rect x="39.0121%" y="373" width="0.0142%" height="15" fill="rgb(252,5,43)" fg:x="44063" fg:w="16"/><text x="39.2621%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (642 samples, 0.57%)</title><rect x="39.4840%" y="261" width="0.5684%" height="15" fill="rgb(252,84,19)" fg:x="44596" fg:w="642"/><text x="39.7340%" y="271.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (642 samples, 0.57%)</title><rect x="39.4840%" y="245" width="0.5684%" height="15" fill="rgb(243,152,39)" fg:x="44596" fg:w="642"/><text x="39.7340%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (115 samples, 0.10%)</title><rect x="40.0524%" y="261" width="0.1018%" height="15" fill="rgb(234,160,15)" fg:x="45238" fg:w="115"/><text x="40.3024%" y="271.50"></text></g><g><title>sn_rust_dealloc (134 samples, 0.12%)</title><rect x="40.1542%" y="261" width="0.1186%" height="15" fill="rgb(237,34,20)" fg:x="45353" fg:w="134"/><text x="40.4042%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (957 samples, 0.85%)</title><rect x="39.4291%" y="309" width="0.8473%" height="15" fill="rgb(229,97,13)" fg:x="44534" fg:w="957"/><text x="39.6791%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)]&gt; (951 samples, 0.84%)</title><rect x="39.4344%" y="293" width="0.8420%" height="15" fill="rgb(234,71,50)" fg:x="44540" fg:w="951"/><text x="39.6844%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)&gt; (904 samples, 0.80%)</title><rect x="39.4760%" y="277" width="0.8004%" height="15" fill="rgb(253,155,4)" fg:x="44587" fg:w="904"/><text x="39.7260%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (1,412 samples, 1.25%)</title><rect x="39.0431%" y="357" width="1.2501%" height="15" fill="rgb(222,185,37)" fg:x="44098" fg:w="1412"/><text x="39.2931%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::vecmap::VecMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (976 samples, 0.86%)</title><rect x="39.4291%" y="341" width="0.8641%" height="15" fill="rgb(251,177,13)" fg:x="44534" fg:w="976"/><text x="39.6791%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)&gt;&gt; (976 samples, 0.86%)</title><rect x="39.4291%" y="325" width="0.8641%" height="15" fill="rgb(250,179,40)" fg:x="44534" fg:w="976"/><text x="39.6791%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)&gt;&gt; (19 samples, 0.02%)</title><rect x="40.2764%" y="309" width="0.0168%" height="15" fill="rgb(242,44,2)" fg:x="45491" fg:w="19"/><text x="40.5264%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.02%)</title><rect x="40.2764%" y="293" width="0.0168%" height="15" fill="rgb(216,177,13)" fg:x="45491" fg:w="19"/><text x="40.5264%" y="303.50"></text></g><g><title>sn_rust_dealloc (44 samples, 0.04%)</title><rect x="40.2932%" y="357" width="0.0390%" height="15" fill="rgb(216,106,43)" fg:x="45510" fg:w="44"/><text x="40.5432%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (1,520 samples, 1.35%)</title><rect x="39.0263%" y="405" width="1.3458%" height="15" fill="rgb(216,183,2)" fg:x="44079" fg:w="1520"/><text x="39.2763%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt;&gt; (1,503 samples, 1.33%)</title><rect x="39.0413%" y="389" width="1.3307%" height="15" fill="rgb(249,75,3)" fg:x="44096" fg:w="1503"/><text x="39.2913%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (1,501 samples, 1.33%)</title><rect x="39.0431%" y="373" width="1.3289%" height="15" fill="rgb(219,67,39)" fg:x="44098" fg:w="1501"/><text x="39.2931%" y="383.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (45 samples, 0.04%)</title><rect x="40.3322%" y="357" width="0.0398%" height="15" fill="rgb(253,228,2)" fg:x="45554" fg:w="45"/><text x="40.5822%" y="367.50"></text></g><g><title>sn_rust_dealloc (42 samples, 0.04%)</title><rect x="40.3720%" y="405" width="0.0372%" height="15" fill="rgb(235,138,27)" fg:x="45599" fg:w="42"/><text x="40.6220%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (6,977 samples, 6.18%)</title><rect x="34.2550%" y="421" width="6.1772%" height="15" fill="rgb(236,97,51)" fg:x="38690" fg:w="6977"/><text x="34.5050%" y="431.50">core::pt..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (26 samples, 0.02%)</title><rect x="40.4092%" y="405" width="0.0230%" height="15" fill="rgb(240,80,30)" fg:x="45641" fg:w="26"/><text x="40.6592%" y="415.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::mut_at (36 samples, 0.03%)</title><rect x="40.4960%" y="373" width="0.0319%" height="15" fill="rgb(230,178,19)" fg:x="45739" fg:w="36"/><text x="40.7460%" y="383.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::index_for (34 samples, 0.03%)</title><rect x="40.4978%" y="357" width="0.0301%" height="15" fill="rgb(210,190,27)" fg:x="45741" fg:w="34"/><text x="40.7478%" y="367.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (111 samples, 0.10%)</title><rect x="40.4367%" y="421" width="0.0983%" height="15" fill="rgb(222,107,31)" fg:x="45672" fg:w="111"/><text x="40.6867%" y="431.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n (111 samples, 0.10%)</title><rect x="40.4367%" y="405" width="0.0983%" height="15" fill="rgb(216,127,34)" fg:x="45672" fg:w="111"/><text x="40.6867%" y="415.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n_inner (111 samples, 0.10%)</title><rect x="40.4367%" y="389" width="0.0983%" height="15" fill="rgb(234,116,52)" fg:x="45672" fg:w="111"/><text x="40.6867%" y="399.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (27 samples, 0.02%)</title><rect x="40.5526%" y="405" width="0.0239%" height="15" fill="rgb(222,124,15)" fg:x="45803" fg:w="27"/><text x="40.8026%" y="415.50"></text></g><g><title>core::time::Duration::as_nanos (26 samples, 0.02%)</title><rect x="40.5766%" y="405" width="0.0230%" height="15" fill="rgb(231,179,28)" fg:x="45830" fg:w="26"/><text x="40.8266%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (89 samples, 0.08%)</title><rect x="40.5996%" y="389" width="0.0788%" height="15" fill="rgb(226,93,45)" fg:x="45856" fg:w="89"/><text x="40.8496%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (44 samples, 0.04%)</title><rect x="40.7102%" y="357" width="0.0390%" height="15" fill="rgb(215,8,51)" fg:x="45981" fg:w="44"/><text x="40.9602%" y="367.50"></text></g><g><title>core::cmp::PartialOrd::ge (44 samples, 0.04%)</title><rect x="40.7102%" y="341" width="0.0390%" height="15" fill="rgb(223,106,5)" fg:x="45981" fg:w="44"/><text x="40.9602%" y="351.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (44 samples, 0.04%)</title><rect x="40.7102%" y="325" width="0.0390%" height="15" fill="rgb(250,191,5)" fg:x="45981" fg:w="44"/><text x="40.9602%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (23 samples, 0.02%)</title><rect x="40.7288%" y="309" width="0.0204%" height="15" fill="rgb(242,132,44)" fg:x="46002" fg:w="23"/><text x="40.9788%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (23 samples, 0.02%)</title><rect x="40.7288%" y="293" width="0.0204%" height="15" fill="rgb(251,152,29)" fg:x="46002" fg:w="23"/><text x="40.9788%" y="303.50"></text></g><g><title>std::time::SystemTime::duration_since (184 samples, 0.16%)</title><rect x="40.5996%" y="405" width="0.1629%" height="15" fill="rgb(218,179,5)" fg:x="45856" fg:w="184"/><text x="40.8496%" y="415.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (95 samples, 0.08%)</title><rect x="40.6784%" y="389" width="0.0841%" height="15" fill="rgb(227,67,19)" fg:x="45945" fg:w="95"/><text x="40.9284%" y="399.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (95 samples, 0.08%)</title><rect x="40.6784%" y="373" width="0.0841%" height="15" fill="rgb(233,119,31)" fg:x="45945" fg:w="95"/><text x="40.9284%" y="383.50"></text></g><g><title>core::time::Duration::new (15 samples, 0.01%)</title><rect x="40.7492%" y="357" width="0.0133%" height="15" fill="rgb(241,120,22)" fg:x="46025" fg:w="15"/><text x="40.9992%" y="367.50"></text></g><g><title>tremor_common::time::nanotime (651 samples, 0.58%)</title><rect x="40.5349%" y="421" width="0.5764%" height="15" fill="rgb(224,102,30)" fg:x="45783" fg:w="651"/><text x="40.7849%" y="431.50"></text></g><g><title>std::time::SystemTime::now (394 samples, 0.35%)</title><rect x="40.7625%" y="405" width="0.3488%" height="15" fill="rgb(210,164,37)" fg:x="46040" fg:w="394"/><text x="41.0125%" y="415.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (394 samples, 0.35%)</title><rect x="40.7625%" y="389" width="0.3488%" height="15" fill="rgb(226,191,16)" fg:x="46040" fg:w="394"/><text x="41.0125%" y="399.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (394 samples, 0.35%)</title><rect x="40.7625%" y="373" width="0.3488%" height="15" fill="rgb(214,40,45)" fg:x="46040" fg:w="394"/><text x="41.0125%" y="383.50"></text></g><g><title>__clock_gettime (292 samples, 0.26%)</title><rect x="40.8528%" y="357" width="0.2585%" height="15" fill="rgb(244,29,26)" fg:x="46142" fg:w="292"/><text x="41.1028%" y="367.50"></text></g><g><title>__vdso_clock_gettime (276 samples, 0.24%)</title><rect x="40.8670%" y="341" width="0.2444%" height="15" fill="rgb(216,16,5)" fg:x="46158" fg:w="276"/><text x="41.1170%" y="351.50"></text></g><g><title>[[vdso]] (236 samples, 0.21%)</title><rect x="40.9024%" y="325" width="0.2089%" height="15" fill="rgb(249,76,35)" fg:x="46198" fg:w="236"/><text x="41.1524%" y="335.50"></text></g><g><title>async_global_executor::threading::thread_main_loop (11,814 samples, 10.46%)</title><rect x="30.6595%" y="949" width="10.4598%" height="15" fill="rgb(207,11,44)" fg:x="34629" fg:w="11814"/><text x="30.9095%" y="959.50">async_global_ex..</text></g><g><title>std::panic::catch_unwind (11,814 samples, 10.46%)</title><rect x="30.6595%" y="933" width="10.4598%" height="15" fill="rgb(228,190,49)" fg:x="34629" fg:w="11814"/><text x="30.9095%" y="943.50">std::panic::cat..</text></g><g><title>std::panicking::try (11,814 samples, 10.46%)</title><rect x="30.6595%" y="917" width="10.4598%" height="15" fill="rgb(214,173,12)" fg:x="34629" fg:w="11814"/><text x="30.9095%" y="927.50">std::panicking:..</text></g><g><title>std::panicking::try::do_call (11,814 samples, 10.46%)</title><rect x="30.6595%" y="901" width="10.4598%" height="15" fill="rgb(218,26,35)" fg:x="34629" fg:w="11814"/><text x="30.9095%" y="911.50">std::panicking:..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (11,814 samples, 10.46%)</title><rect x="30.6595%" y="885" width="10.4598%" height="15" fill="rgb(220,200,19)" fg:x="34629" fg:w="11814"/><text x="30.9095%" y="895.50">async_global_ex..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (11,814 samples, 10.46%)</title><rect x="30.6595%" y="869" width="10.4598%" height="15" fill="rgb(239,95,49)" fg:x="34629" fg:w="11814"/><text x="30.9095%" y="879.50">std::thread::lo..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (11,814 samples, 10.46%)</title><rect x="30.6595%" y="853" width="10.4598%" height="15" fill="rgb(235,85,53)" fg:x="34629" fg:w="11814"/><text x="30.9095%" y="863.50">std::thread::lo..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (11,814 samples, 10.46%)</title><rect x="30.6595%" y="837" width="10.4598%" height="15" fill="rgb(233,133,31)" fg:x="34629" fg:w="11814"/><text x="30.9095%" y="847.50">async_global_ex..</text></g><g><title>async_global_executor::reactor::block_on (11,814 samples, 10.46%)</title><rect x="30.6595%" y="821" width="10.4598%" height="15" fill="rgb(218,25,20)" fg:x="34629" fg:w="11814"/><text x="30.9095%" y="831.50">async_global_ex..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (11,814 samples, 10.46%)</title><rect x="30.6595%" y="805" width="10.4598%" height="15" fill="rgb(252,210,38)" fg:x="34629" fg:w="11814"/><text x="30.9095%" y="815.50">async_global_ex..</text></g><g><title>async_io::driver::block_on (11,814 samples, 10.46%)</title><rect x="30.6595%" y="789" width="10.4598%" height="15" fill="rgb(242,134,21)" fg:x="34629" fg:w="11814"/><text x="30.9095%" y="799.50">async_io::drive..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (11,814 samples, 10.46%)</title><rect x="30.6595%" y="773" width="10.4598%" height="15" fill="rgb(213,28,48)" fg:x="34629" fg:w="11814"/><text x="30.9095%" y="783.50">&lt;futures_lite::..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,814 samples, 10.46%)</title><rect x="30.6595%" y="757" width="10.4598%" height="15" fill="rgb(250,196,2)" fg:x="34629" fg:w="11814"/><text x="30.9095%" y="767.50">&lt;core::future::..</text></g><g><title>async_executor::Executor::run::{{closure}} (11,814 samples, 10.46%)</title><rect x="30.6595%" y="741" width="10.4598%" height="15" fill="rgb(227,5,17)" fg:x="34629" fg:w="11814"/><text x="30.9095%" y="751.50">async_executor:..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (11,814 samples, 10.46%)</title><rect x="30.6595%" y="725" width="10.4598%" height="15" fill="rgb(221,226,24)" fg:x="34629" fg:w="11814"/><text x="30.9095%" y="735.50">&lt;futures_lite::..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,814 samples, 10.46%)</title><rect x="30.6595%" y="709" width="10.4598%" height="15" fill="rgb(211,5,48)" fg:x="34629" fg:w="11814"/><text x="30.9095%" y="719.50">&lt;core::future::..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (11,814 samples, 10.46%)</title><rect x="30.6595%" y="693" width="10.4598%" height="15" fill="rgb(219,150,6)" fg:x="34629" fg:w="11814"/><text x="30.9095%" y="703.50">async_executor:..</text></g><g><title>async_task::runnable::Runnable::run (11,814 samples, 10.46%)</title><rect x="30.6595%" y="677" width="10.4598%" height="15" fill="rgb(251,46,16)" fg:x="34629" fg:w="11814"/><text x="30.9095%" y="687.50">async_task::run..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (11,814 samples, 10.46%)</title><rect x="30.6595%" y="661" width="10.4598%" height="15" fill="rgb(220,204,40)" fg:x="34629" fg:w="11814"/><text x="30.9095%" y="671.50">async_task::raw..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (11,814 samples, 10.46%)</title><rect x="30.6595%" y="645" width="10.4598%" height="15" fill="rgb(211,85,2)" fg:x="34629" fg:w="11814"/><text x="30.9095%" y="655.50">&lt;core::pin::Pin..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,814 samples, 10.46%)</title><rect x="30.6595%" y="629" width="10.4598%" height="15" fill="rgb(229,17,7)" fg:x="34629" fg:w="11814"/><text x="30.9095%" y="639.50">&lt;core::future::..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (11,814 samples, 10.46%)</title><rect x="30.6595%" y="613" width="10.4598%" height="15" fill="rgb(239,72,28)" fg:x="34629" fg:w="11814"/><text x="30.9095%" y="623.50">async_executor:..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (11,814 samples, 10.46%)</title><rect x="30.6595%" y="597" width="10.4598%" height="15" fill="rgb(230,47,54)" fg:x="34629" fg:w="11814"/><text x="30.9095%" y="607.50">&lt;async_std::tas..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (11,814 samples, 10.46%)</title><rect x="30.6595%" y="581" width="10.4598%" height="15" fill="rgb(214,50,8)" fg:x="34629" fg:w="11814"/><text x="30.9095%" y="591.50">async_std::task..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (11,814 samples, 10.46%)</title><rect x="30.6595%" y="565" width="10.4598%" height="15" fill="rgb(216,198,43)" fg:x="34629" fg:w="11814"/><text x="30.9095%" y="575.50">std::thread::lo..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (11,814 samples, 10.46%)</title><rect x="30.6595%" y="549" width="10.4598%" height="15" fill="rgb(234,20,35)" fg:x="34629" fg:w="11814"/><text x="30.9095%" y="559.50">std::thread::lo..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (11,814 samples, 10.46%)</title><rect x="30.6595%" y="533" width="10.4598%" height="15" fill="rgb(254,45,19)" fg:x="34629" fg:w="11814"/><text x="30.9095%" y="543.50">async_std::task..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (11,814 samples, 10.46%)</title><rect x="30.6595%" y="517" width="10.4598%" height="15" fill="rgb(219,14,44)" fg:x="34629" fg:w="11814"/><text x="30.9095%" y="527.50">&lt;async_std::tas..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,814 samples, 10.46%)</title><rect x="30.6595%" y="501" width="10.4598%" height="15" fill="rgb(217,220,26)" fg:x="34629" fg:w="11814"/><text x="30.9095%" y="511.50">&lt;core::future::..</text></g><g><title>tremor_runtime::connectors::sink::SinkManager&lt;S&gt;::run::{{closure}} (11,814 samples, 10.46%)</title><rect x="30.6595%" y="485" width="10.4598%" height="15" fill="rgb(213,158,28)" fg:x="34629" fg:w="11814"/><text x="30.9095%" y="495.50">tremor_runtime:..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (11,184 samples, 9.90%)</title><rect x="31.2173%" y="469" width="9.9020%" height="15" fill="rgb(252,51,52)" fg:x="35259" fg:w="11184"/><text x="31.4673%" y="479.50">&lt;core::pin::Pi..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,184 samples, 9.90%)</title><rect x="31.2173%" y="453" width="9.9020%" height="15" fill="rgb(246,89,16)" fg:x="35259" fg:w="11184"/><text x="31.4673%" y="463.50">&lt;core::future:..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::Sink&gt;::on_event::{{closure}} (8,376 samples, 7.42%)</title><rect x="33.7034%" y="437" width="7.4159%" height="15" fill="rgb(216,158,49)" fg:x="38067" fg:w="8376"/><text x="33.9534%" y="447.50">&lt;tremor_ru..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (62 samples, 0.05%)</title><rect x="41.1211%" y="181" width="0.0549%" height="15" fill="rgb(236,107,19)" fg:x="46445" fg:w="62"/><text x="41.3711%" y="191.50"></text></g><g><title>alloc::alloc::Global::grow_impl (62 samples, 0.05%)</title><rect x="41.1211%" y="165" width="0.0549%" height="15" fill="rgb(228,185,30)" fg:x="46445" fg:w="62"/><text x="41.3711%" y="175.50"></text></g><g><title>alloc::alloc::realloc (61 samples, 0.05%)</title><rect x="41.1219%" y="149" width="0.0540%" height="15" fill="rgb(246,134,8)" fg:x="46446" fg:w="61"/><text x="41.3719%" y="159.50"></text></g><g><title>__rg_realloc (61 samples, 0.05%)</title><rect x="41.1219%" y="133" width="0.0540%" height="15" fill="rgb(214,143,50)" fg:x="46446" fg:w="61"/><text x="41.3719%" y="143.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (61 samples, 0.05%)</title><rect x="41.1219%" y="117" width="0.0540%" height="15" fill="rgb(228,75,8)" fg:x="46446" fg:w="61"/><text x="41.3719%" y="127.50"></text></g><g><title>sn_rust_realloc (61 samples, 0.05%)</title><rect x="41.1219%" y="101" width="0.0540%" height="15" fill="rgb(207,175,4)" fg:x="46446" fg:w="61"/><text x="41.3719%" y="111.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (65 samples, 0.06%)</title><rect x="41.1193%" y="357" width="0.0575%" height="15" fill="rgb(205,108,24)" fg:x="46443" fg:w="65"/><text x="41.3693%" y="367.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (65 samples, 0.06%)</title><rect x="41.1193%" y="341" width="0.0575%" height="15" fill="rgb(244,120,49)" fg:x="46443" fg:w="65"/><text x="41.3693%" y="351.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (65 samples, 0.06%)</title><rect x="41.1193%" y="325" width="0.0575%" height="15" fill="rgb(223,47,38)" fg:x="46443" fg:w="65"/><text x="41.3693%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (65 samples, 0.06%)</title><rect x="41.1193%" y="309" width="0.0575%" height="15" fill="rgb(229,179,11)" fg:x="46443" fg:w="65"/><text x="41.3693%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (65 samples, 0.06%)</title><rect x="41.1193%" y="293" width="0.0575%" height="15" fill="rgb(231,122,1)" fg:x="46443" fg:w="65"/><text x="41.3693%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (65 samples, 0.06%)</title><rect x="41.1193%" y="277" width="0.0575%" height="15" fill="rgb(245,119,9)" fg:x="46443" fg:w="65"/><text x="41.3693%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (65 samples, 0.06%)</title><rect x="41.1193%" y="261" width="0.0575%" height="15" fill="rgb(241,163,25)" fg:x="46443" fg:w="65"/><text x="41.3693%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (65 samples, 0.06%)</title><rect x="41.1193%" y="245" width="0.0575%" height="15" fill="rgb(217,214,3)" fg:x="46443" fg:w="65"/><text x="41.3693%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (65 samples, 0.06%)</title><rect x="41.1193%" y="229" width="0.0575%" height="15" fill="rgb(240,86,28)" fg:x="46443" fg:w="65"/><text x="41.3693%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (65 samples, 0.06%)</title><rect x="41.1193%" y="213" width="0.0575%" height="15" fill="rgb(215,47,9)" fg:x="46443" fg:w="65"/><text x="41.3693%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (65 samples, 0.06%)</title><rect x="41.1193%" y="197" width="0.0575%" height="15" fill="rgb(252,25,45)" fg:x="46443" fg:w="65"/><text x="41.3693%" y="207.50"></text></g><g><title>[libc-2.31.so] (99 samples, 0.09%)</title><rect x="41.3760%" y="37" width="0.0877%" height="15" fill="rgb(251,164,9)" fg:x="46733" fg:w="99"/><text x="41.6260%" y="47.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (14 samples, 0.01%)</title><rect x="41.4664%" y="37" width="0.0124%" height="15" fill="rgb(233,194,0)" fg:x="46835" fg:w="14"/><text x="41.7164%" y="47.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (13 samples, 0.01%)</title><rect x="41.4787%" y="37" width="0.0115%" height="15" fill="rgb(249,111,24)" fg:x="46849" fg:w="13"/><text x="41.7287%" y="47.50"></text></g><g><title>alloc::raw_vec::finish_grow (352 samples, 0.31%)</title><rect x="41.1945%" y="149" width="0.3117%" height="15" fill="rgb(250,223,3)" fg:x="46528" fg:w="352"/><text x="41.4445%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (337 samples, 0.30%)</title><rect x="41.2078%" y="133" width="0.2984%" height="15" fill="rgb(236,178,37)" fg:x="46543" fg:w="337"/><text x="41.4578%" y="143.50"></text></g><g><title>alloc::alloc::Global::grow_impl (337 samples, 0.30%)</title><rect x="41.2078%" y="117" width="0.2984%" height="15" fill="rgb(241,158,50)" fg:x="46543" fg:w="337"/><text x="41.4578%" y="127.50"></text></g><g><title>alloc::alloc::realloc (337 samples, 0.30%)</title><rect x="41.2078%" y="101" width="0.2984%" height="15" fill="rgb(213,121,41)" fg:x="46543" fg:w="337"/><text x="41.4578%" y="111.50"></text></g><g><title>__rg_realloc (337 samples, 0.30%)</title><rect x="41.2078%" y="85" width="0.2984%" height="15" fill="rgb(240,92,3)" fg:x="46543" fg:w="337"/><text x="41.4578%" y="95.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (337 samples, 0.30%)</title><rect x="41.2078%" y="69" width="0.2984%" height="15" fill="rgb(205,123,3)" fg:x="46543" fg:w="337"/><text x="41.4578%" y="79.50"></text></g><g><title>sn_rust_realloc (334 samples, 0.30%)</title><rect x="41.2105%" y="53" width="0.2957%" height="15" fill="rgb(205,97,47)" fg:x="46546" fg:w="334"/><text x="41.4605%" y="63.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (18 samples, 0.02%)</title><rect x="41.4903%" y="37" width="0.0159%" height="15" fill="rgb(247,152,14)" fg:x="46862" fg:w="18"/><text x="41.7403%" y="47.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeMap&gt;::serialize_key (442 samples, 0.39%)</title><rect x="41.1193%" y="437" width="0.3913%" height="15" fill="rgb(248,195,53)" fg:x="46443" fg:w="442"/><text x="41.3693%" y="447.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeSeq&gt;::serialize_element (442 samples, 0.39%)</title><rect x="41.1193%" y="421" width="0.3913%" height="15" fill="rgb(226,201,16)" fg:x="46443" fg:w="442"/><text x="41.3693%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for str&gt;::serialize (442 samples, 0.39%)</title><rect x="41.1193%" y="405" width="0.3913%" height="15" fill="rgb(205,98,0)" fg:x="46443" fg:w="442"/><text x="41.3693%" y="415.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_str (442 samples, 0.39%)</title><rect x="41.1193%" y="389" width="0.3913%" height="15" fill="rgb(214,191,48)" fg:x="46443" fg:w="442"/><text x="41.3693%" y="399.50"></text></g><g><title>rmp::encode::str::write_str (442 samples, 0.39%)</title><rect x="41.1193%" y="373" width="0.3913%" height="15" fill="rgb(237,112,39)" fg:x="46443" fg:w="442"/><text x="41.3693%" y="383.50"></text></g><g><title>rmp::encode::str::write_str_len (377 samples, 0.33%)</title><rect x="41.1768%" y="357" width="0.3338%" height="15" fill="rgb(247,203,27)" fg:x="46508" fg:w="377"/><text x="41.4268%" y="367.50"></text></g><g><title>rmp::encode::write_marker (377 samples, 0.33%)</title><rect x="41.1768%" y="341" width="0.3338%" height="15" fill="rgb(235,124,28)" fg:x="46508" fg:w="377"/><text x="41.4268%" y="351.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (377 samples, 0.33%)</title><rect x="41.1768%" y="325" width="0.3338%" height="15" fill="rgb(208,207,46)" fg:x="46508" fg:w="377"/><text x="41.4268%" y="335.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (377 samples, 0.33%)</title><rect x="41.1768%" y="309" width="0.3338%" height="15" fill="rgb(234,176,4)" fg:x="46508" fg:w="377"/><text x="41.4268%" y="319.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (377 samples, 0.33%)</title><rect x="41.1768%" y="293" width="0.3338%" height="15" fill="rgb(230,133,28)" fg:x="46508" fg:w="377"/><text x="41.4268%" y="303.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (377 samples, 0.33%)</title><rect x="41.1768%" y="277" width="0.3338%" height="15" fill="rgb(211,137,40)" fg:x="46508" fg:w="377"/><text x="41.4268%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (377 samples, 0.33%)</title><rect x="41.1768%" y="261" width="0.3338%" height="15" fill="rgb(254,35,13)" fg:x="46508" fg:w="377"/><text x="41.4268%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (377 samples, 0.33%)</title><rect x="41.1768%" y="245" width="0.3338%" height="15" fill="rgb(225,49,51)" fg:x="46508" fg:w="377"/><text x="41.4268%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (377 samples, 0.33%)</title><rect x="41.1768%" y="229" width="0.3338%" height="15" fill="rgb(251,10,15)" fg:x="46508" fg:w="377"/><text x="41.4268%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (377 samples, 0.33%)</title><rect x="41.1768%" y="213" width="0.3338%" height="15" fill="rgb(228,207,15)" fg:x="46508" fg:w="377"/><text x="41.4268%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (377 samples, 0.33%)</title><rect x="41.1768%" y="197" width="0.3338%" height="15" fill="rgb(241,99,19)" fg:x="46508" fg:w="377"/><text x="41.4268%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (377 samples, 0.33%)</title><rect x="41.1768%" y="181" width="0.3338%" height="15" fill="rgb(207,104,49)" fg:x="46508" fg:w="377"/><text x="41.4268%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (377 samples, 0.33%)</title><rect x="41.1768%" y="165" width="0.3338%" height="15" fill="rgb(234,99,18)" fg:x="46508" fg:w="377"/><text x="41.4268%" y="175.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (12 samples, 0.01%)</title><rect x="41.9126%" y="341" width="0.0106%" height="15" fill="rgb(213,191,49)" fg:x="47339" fg:w="12"/><text x="42.1626%" y="351.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (12 samples, 0.01%)</title><rect x="41.9126%" y="325" width="0.0106%" height="15" fill="rgb(210,226,19)" fg:x="47339" fg:w="12"/><text x="42.1626%" y="335.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (12 samples, 0.01%)</title><rect x="41.9126%" y="309" width="0.0106%" height="15" fill="rgb(229,97,18)" fg:x="47339" fg:w="12"/><text x="42.1626%" y="319.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (12 samples, 0.01%)</title><rect x="41.9126%" y="293" width="0.0106%" height="15" fill="rgb(211,167,15)" fg:x="47339" fg:w="12"/><text x="42.1626%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (12 samples, 0.01%)</title><rect x="41.9126%" y="277" width="0.0106%" height="15" fill="rgb(210,169,34)" fg:x="47339" fg:w="12"/><text x="42.1626%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (12 samples, 0.01%)</title><rect x="41.9126%" y="261" width="0.0106%" height="15" fill="rgb(241,121,31)" fg:x="47339" fg:w="12"/><text x="42.1626%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (12 samples, 0.01%)</title><rect x="41.9126%" y="245" width="0.0106%" height="15" fill="rgb(232,40,11)" fg:x="47339" fg:w="12"/><text x="42.1626%" y="255.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_bool (39 samples, 0.03%)</title><rect x="41.9011%" y="389" width="0.0345%" height="15" fill="rgb(205,86,26)" fg:x="47326" fg:w="39"/><text x="42.1511%" y="399.50"></text></g><g><title>rmp::encode::write_bool (37 samples, 0.03%)</title><rect x="41.9028%" y="373" width="0.0328%" height="15" fill="rgb(231,126,28)" fg:x="47328" fg:w="37"/><text x="42.1528%" y="383.50"></text></g><g><title>rmp::encode::write_marker (30 samples, 0.03%)</title><rect x="41.9090%" y="357" width="0.0266%" height="15" fill="rgb(219,221,18)" fg:x="47335" fg:w="30"/><text x="42.1590%" y="367.50"></text></g><g><title>rmp::marker::Marker::to_u8 (14 samples, 0.01%)</title><rect x="41.9232%" y="341" width="0.0124%" height="15" fill="rgb(211,40,0)" fg:x="47351" fg:w="14"/><text x="42.1732%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (14 samples, 0.01%)</title><rect x="41.9604%" y="197" width="0.0124%" height="15" fill="rgb(239,85,43)" fg:x="47393" fg:w="14"/><text x="42.2104%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (13 samples, 0.01%)</title><rect x="41.9613%" y="181" width="0.0115%" height="15" fill="rgb(231,55,21)" fg:x="47394" fg:w="13"/><text x="42.2113%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (13 samples, 0.01%)</title><rect x="41.9613%" y="165" width="0.0115%" height="15" fill="rgb(225,184,43)" fg:x="47394" fg:w="13"/><text x="42.2113%" y="175.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (36 samples, 0.03%)</title><rect x="41.9542%" y="309" width="0.0319%" height="15" fill="rgb(251,158,41)" fg:x="47386" fg:w="36"/><text x="42.2042%" y="319.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (36 samples, 0.03%)</title><rect x="41.9542%" y="293" width="0.0319%" height="15" fill="rgb(234,159,37)" fg:x="47386" fg:w="36"/><text x="42.2042%" y="303.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (36 samples, 0.03%)</title><rect x="41.9542%" y="277" width="0.0319%" height="15" fill="rgb(216,204,22)" fg:x="47386" fg:w="36"/><text x="42.2042%" y="287.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (36 samples, 0.03%)</title><rect x="41.9542%" y="261" width="0.0319%" height="15" fill="rgb(214,17,3)" fg:x="47386" fg:w="36"/><text x="42.2042%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (36 samples, 0.03%)</title><rect x="41.9542%" y="245" width="0.0319%" height="15" fill="rgb(212,111,17)" fg:x="47386" fg:w="36"/><text x="42.2042%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (36 samples, 0.03%)</title><rect x="41.9542%" y="229" width="0.0319%" height="15" fill="rgb(221,157,24)" fg:x="47386" fg:w="36"/><text x="42.2042%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (36 samples, 0.03%)</title><rect x="41.9542%" y="213" width="0.0319%" height="15" fill="rgb(252,16,13)" fg:x="47386" fg:w="36"/><text x="42.2042%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (15 samples, 0.01%)</title><rect x="41.9728%" y="197" width="0.0133%" height="15" fill="rgb(221,62,2)" fg:x="47407" fg:w="15"/><text x="42.2228%" y="207.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_seq::{{closure}} (63 samples, 0.06%)</title><rect x="41.9356%" y="357" width="0.0558%" height="15" fill="rgb(247,87,22)" fg:x="47365" fg:w="63"/><text x="42.1856%" y="367.50"></text></g><g><title>rmp::encode::write_array_len (52 samples, 0.05%)</title><rect x="41.9453%" y="341" width="0.0460%" height="15" fill="rgb(215,73,9)" fg:x="47376" fg:w="52"/><text x="42.1953%" y="351.50"></text></g><g><title>rmp::encode::write_marker (42 samples, 0.04%)</title><rect x="41.9542%" y="325" width="0.0372%" height="15" fill="rgb(207,175,33)" fg:x="47386" fg:w="42"/><text x="42.2042%" y="335.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_seq (67 samples, 0.06%)</title><rect x="41.9356%" y="389" width="0.0593%" height="15" fill="rgb(243,129,54)" fg:x="47365" fg:w="67"/><text x="42.1856%" y="399.50"></text></g><g><title>rmp_serde::encode::Serializer&lt;W,C&gt;::maybe_unknown_len_compound (67 samples, 0.06%)</title><rect x="41.9356%" y="373" width="0.0593%" height="15" fill="rgb(227,119,45)" fg:x="47365" fg:w="67"/><text x="42.1856%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (54 samples, 0.05%)</title><rect x="42.2357%" y="229" width="0.0478%" height="15" fill="rgb(205,109,36)" fg:x="47704" fg:w="54"/><text x="42.4857%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (43 samples, 0.04%)</title><rect x="42.2455%" y="213" width="0.0381%" height="15" fill="rgb(205,6,39)" fg:x="47715" fg:w="43"/><text x="42.4955%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (13 samples, 0.01%)</title><rect x="42.2915%" y="197" width="0.0115%" height="15" fill="rgb(221,32,16)" fg:x="47767" fg:w="13"/><text x="42.5415%" y="207.50"></text></g><g><title>[libc-2.31.so] (37 samples, 0.03%)</title><rect x="42.5279%" y="85" width="0.0328%" height="15" fill="rgb(228,144,50)" fg:x="48034" fg:w="37"/><text x="42.7779%" y="95.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (310 samples, 0.27%)</title><rect x="42.3181%" y="181" width="0.2745%" height="15" fill="rgb(229,201,53)" fg:x="47797" fg:w="310"/><text x="42.5681%" y="191.50"></text></g><g><title>alloc::alloc::Global::grow_impl (310 samples, 0.27%)</title><rect x="42.3181%" y="165" width="0.2745%" height="15" fill="rgb(249,153,27)" fg:x="47797" fg:w="310"/><text x="42.5681%" y="175.50"></text></g><g><title>alloc::alloc::realloc (310 samples, 0.27%)</title><rect x="42.3181%" y="149" width="0.2745%" height="15" fill="rgb(227,106,25)" fg:x="47797" fg:w="310"/><text x="42.5681%" y="159.50"></text></g><g><title>__rg_realloc (310 samples, 0.27%)</title><rect x="42.3181%" y="133" width="0.2745%" height="15" fill="rgb(230,65,29)" fg:x="47797" fg:w="310"/><text x="42.5681%" y="143.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (310 samples, 0.27%)</title><rect x="42.3181%" y="117" width="0.2745%" height="15" fill="rgb(221,57,46)" fg:x="47797" fg:w="310"/><text x="42.5681%" y="127.50"></text></g><g><title>sn_rust_realloc (308 samples, 0.27%)</title><rect x="42.3198%" y="101" width="0.2727%" height="15" fill="rgb(229,161,17)" fg:x="47799" fg:w="308"/><text x="42.5698%" y="111.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (14 samples, 0.01%)</title><rect x="42.5801%" y="85" width="0.0124%" height="15" fill="rgb(222,213,11)" fg:x="48093" fg:w="14"/><text x="42.8301%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (329 samples, 0.29%)</title><rect x="42.3039%" y="197" width="0.2913%" height="15" fill="rgb(235,35,13)" fg:x="47781" fg:w="329"/><text x="42.5539%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (440 samples, 0.39%)</title><rect x="42.2207%" y="261" width="0.3896%" height="15" fill="rgb(233,158,34)" fg:x="47687" fg:w="440"/><text x="42.4707%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (435 samples, 0.39%)</title><rect x="42.2251%" y="245" width="0.3851%" height="15" fill="rgb(215,151,48)" fg:x="47692" fg:w="435"/><text x="42.4751%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (369 samples, 0.33%)</title><rect x="42.2835%" y="229" width="0.3267%" height="15" fill="rgb(229,84,14)" fg:x="47758" fg:w="369"/><text x="42.5335%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (369 samples, 0.33%)</title><rect x="42.2835%" y="213" width="0.3267%" height="15" fill="rgb(229,68,14)" fg:x="47758" fg:w="369"/><text x="42.5335%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (728 samples, 0.64%)</title><rect x="42.6103%" y="261" width="0.6446%" height="15" fill="rgb(243,106,26)" fg:x="48127" fg:w="728"/><text x="42.8603%" y="271.50"></text></g><g><title>[libc-2.31.so] (691 samples, 0.61%)</title><rect x="42.6430%" y="245" width="0.6118%" height="15" fill="rgb(206,45,38)" fg:x="48164" fg:w="691"/><text x="42.8930%" y="255.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (1,222 samples, 1.08%)</title><rect x="42.1844%" y="357" width="1.0819%" height="15" fill="rgb(226,6,15)" fg:x="47646" fg:w="1222"/><text x="42.4344%" y="367.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1,222 samples, 1.08%)</title><rect x="42.1844%" y="341" width="1.0819%" height="15" fill="rgb(232,22,54)" fg:x="47646" fg:w="1222"/><text x="42.4344%" y="351.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1,222 samples, 1.08%)</title><rect x="42.1844%" y="325" width="1.0819%" height="15" fill="rgb(229,222,32)" fg:x="47646" fg:w="1222"/><text x="42.4344%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1,222 samples, 1.08%)</title><rect x="42.1844%" y="309" width="1.0819%" height="15" fill="rgb(228,62,29)" fg:x="47646" fg:w="1222"/><text x="42.4344%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1,222 samples, 1.08%)</title><rect x="42.1844%" y="293" width="1.0819%" height="15" fill="rgb(251,103,34)" fg:x="47646" fg:w="1222"/><text x="42.4344%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1,222 samples, 1.08%)</title><rect x="42.1844%" y="277" width="1.0819%" height="15" fill="rgb(233,12,30)" fg:x="47646" fg:w="1222"/><text x="42.4344%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (13 samples, 0.01%)</title><rect x="43.2548%" y="261" width="0.0115%" height="15" fill="rgb(238,52,0)" fg:x="48855" fg:w="13"/><text x="43.5048%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (13 samples, 0.01%)</title><rect x="43.2548%" y="245" width="0.0115%" height="15" fill="rgb(223,98,5)" fg:x="48855" fg:w="13"/><text x="43.5048%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (35 samples, 0.03%)</title><rect x="43.3761%" y="213" width="0.0310%" height="15" fill="rgb(228,75,37)" fg:x="48992" fg:w="35"/><text x="43.6261%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (33 samples, 0.03%)</title><rect x="43.4071%" y="213" width="0.0292%" height="15" fill="rgb(205,115,49)" fg:x="49027" fg:w="33"/><text x="43.6571%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (27 samples, 0.02%)</title><rect x="43.4124%" y="197" width="0.0239%" height="15" fill="rgb(250,154,43)" fg:x="49033" fg:w="27"/><text x="43.6624%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (23 samples, 0.02%)</title><rect x="43.4159%" y="181" width="0.0204%" height="15" fill="rgb(226,43,29)" fg:x="49037" fg:w="23"/><text x="43.6659%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (23 samples, 0.02%)</title><rect x="43.4159%" y="165" width="0.0204%" height="15" fill="rgb(249,228,39)" fg:x="49037" fg:w="23"/><text x="43.6659%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (21 samples, 0.02%)</title><rect x="43.4177%" y="149" width="0.0186%" height="15" fill="rgb(216,79,43)" fg:x="49039" fg:w="21"/><text x="43.6677%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (21 samples, 0.02%)</title><rect x="43.4177%" y="133" width="0.0186%" height="15" fill="rgb(228,95,12)" fg:x="49039" fg:w="21"/><text x="43.6677%" y="143.50"></text></g><g><title>alloc::alloc::Global::grow_impl (21 samples, 0.02%)</title><rect x="43.4177%" y="117" width="0.0186%" height="15" fill="rgb(249,221,15)" fg:x="49039" fg:w="21"/><text x="43.6677%" y="127.50"></text></g><g><title>alloc::alloc::realloc (21 samples, 0.02%)</title><rect x="43.4177%" y="101" width="0.0186%" height="15" fill="rgb(233,34,13)" fg:x="49039" fg:w="21"/><text x="43.6677%" y="111.50"></text></g><g><title>__rg_realloc (21 samples, 0.02%)</title><rect x="43.4177%" y="85" width="0.0186%" height="15" fill="rgb(214,103,39)" fg:x="49039" fg:w="21"/><text x="43.6677%" y="95.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (21 samples, 0.02%)</title><rect x="43.4177%" y="69" width="0.0186%" height="15" fill="rgb(251,126,39)" fg:x="49039" fg:w="21"/><text x="43.6677%" y="79.50"></text></g><g><title>sn_rust_realloc (20 samples, 0.02%)</title><rect x="43.4186%" y="53" width="0.0177%" height="15" fill="rgb(214,216,36)" fg:x="49040" fg:w="20"/><text x="43.6686%" y="63.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (88 samples, 0.08%)</title><rect x="43.3726%" y="325" width="0.0779%" height="15" fill="rgb(220,221,8)" fg:x="48988" fg:w="88"/><text x="43.6226%" y="335.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (88 samples, 0.08%)</title><rect x="43.3726%" y="309" width="0.0779%" height="15" fill="rgb(240,216,3)" fg:x="48988" fg:w="88"/><text x="43.6226%" y="319.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (88 samples, 0.08%)</title><rect x="43.3726%" y="293" width="0.0779%" height="15" fill="rgb(232,218,17)" fg:x="48988" fg:w="88"/><text x="43.6226%" y="303.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (88 samples, 0.08%)</title><rect x="43.3726%" y="277" width="0.0779%" height="15" fill="rgb(229,163,45)" fg:x="48988" fg:w="88"/><text x="43.6226%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (88 samples, 0.08%)</title><rect x="43.3726%" y="261" width="0.0779%" height="15" fill="rgb(231,110,42)" fg:x="48988" fg:w="88"/><text x="43.6226%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (88 samples, 0.08%)</title><rect x="43.3726%" y="245" width="0.0779%" height="15" fill="rgb(208,170,48)" fg:x="48988" fg:w="88"/><text x="43.6226%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (88 samples, 0.08%)</title><rect x="43.3726%" y="229" width="0.0779%" height="15" fill="rgb(239,116,25)" fg:x="48988" fg:w="88"/><text x="43.6226%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (16 samples, 0.01%)</title><rect x="43.4363%" y="213" width="0.0142%" height="15" fill="rgb(219,200,50)" fg:x="49060" fg:w="16"/><text x="43.6863%" y="223.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_str (1,743 samples, 1.54%)</title><rect x="41.9949%" y="389" width="1.5432%" height="15" fill="rgb(245,200,0)" fg:x="47432" fg:w="1743"/><text x="42.2449%" y="399.50"></text></g><g><title>rmp::encode::str::write_str (1,584 samples, 1.40%)</title><rect x="42.1357%" y="373" width="1.4024%" height="15" fill="rgb(245,119,33)" fg:x="47591" fg:w="1584"/><text x="42.3857%" y="383.50"></text></g><g><title>rmp::encode::str::write_str_len (307 samples, 0.27%)</title><rect x="43.2663%" y="357" width="0.2718%" height="15" fill="rgb(231,125,12)" fg:x="48868" fg:w="307"/><text x="43.5163%" y="367.50"></text></g><g><title>rmp::encode::write_marker (218 samples, 0.19%)</title><rect x="43.3451%" y="341" width="0.1930%" height="15" fill="rgb(216,96,41)" fg:x="48957" fg:w="218"/><text x="43.5951%" y="351.50"></text></g><g><title>rmp::marker::Marker::to_u8 (99 samples, 0.09%)</title><rect x="43.4505%" y="325" width="0.0877%" height="15" fill="rgb(248,43,45)" fg:x="49076" fg:w="99"/><text x="43.7005%" y="335.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (14 samples, 0.01%)</title><rect x="43.5603%" y="325" width="0.0124%" height="15" fill="rgb(217,222,7)" fg:x="49200" fg:w="14"/><text x="43.8103%" y="335.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (14 samples, 0.01%)</title><rect x="43.5603%" y="309" width="0.0124%" height="15" fill="rgb(233,28,6)" fg:x="49200" fg:w="14"/><text x="43.8103%" y="319.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (14 samples, 0.01%)</title><rect x="43.5603%" y="293" width="0.0124%" height="15" fill="rgb(231,218,15)" fg:x="49200" fg:w="14"/><text x="43.8103%" y="303.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (14 samples, 0.01%)</title><rect x="43.5603%" y="277" width="0.0124%" height="15" fill="rgb(226,171,48)" fg:x="49200" fg:w="14"/><text x="43.8103%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (14 samples, 0.01%)</title><rect x="43.5603%" y="261" width="0.0124%" height="15" fill="rgb(235,201,9)" fg:x="49200" fg:w="14"/><text x="43.8103%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (14 samples, 0.01%)</title><rect x="43.5603%" y="245" width="0.0124%" height="15" fill="rgb(217,80,15)" fg:x="49200" fg:w="14"/><text x="43.8103%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (14 samples, 0.01%)</title><rect x="43.5603%" y="229" width="0.0124%" height="15" fill="rgb(219,152,8)" fg:x="49200" fg:w="14"/><text x="43.8103%" y="239.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_u64 (54 samples, 0.05%)</title><rect x="43.5381%" y="389" width="0.0478%" height="15" fill="rgb(243,107,38)" fg:x="49175" fg:w="54"/><text x="43.7881%" y="399.50"></text></g><g><title>rmp::encode::uint::write_uint (45 samples, 0.04%)</title><rect x="43.5461%" y="373" width="0.0398%" height="15" fill="rgb(231,17,5)" fg:x="49184" fg:w="45"/><text x="43.7961%" y="383.50"></text></g><g><title>rmp::encode::uint::write_pfix (36 samples, 0.03%)</title><rect x="43.5541%" y="357" width="0.0319%" height="15" fill="rgb(209,25,54)" fg:x="49193" fg:w="36"/><text x="43.8041%" y="367.50"></text></g><g><title>rmp::encode::write_marker (31 samples, 0.03%)</title><rect x="43.5585%" y="341" width="0.0274%" height="15" fill="rgb(219,0,2)" fg:x="49198" fg:w="31"/><text x="43.8085%" y="351.50"></text></g><g><title>rmp::marker::Marker::to_u8 (15 samples, 0.01%)</title><rect x="43.5726%" y="325" width="0.0133%" height="15" fill="rgb(246,9,5)" fg:x="49214" fg:w="15"/><text x="43.8226%" y="335.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (106 samples, 0.09%)</title><rect x="43.5957%" y="389" width="0.0938%" height="15" fill="rgb(226,159,4)" fg:x="49240" fg:w="106"/><text x="43.8457%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.02%)</title><rect x="43.6895%" y="389" width="0.0195%" height="15" fill="rgb(219,175,34)" fg:x="49346" fg:w="22"/><text x="43.9395%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (32 samples, 0.03%)</title><rect x="43.7905%" y="373" width="0.0283%" height="15" fill="rgb(236,10,46)" fg:x="49460" fg:w="32"/><text x="44.0405%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (33 samples, 0.03%)</title><rect x="45.3505%" y="229" width="0.0292%" height="15" fill="rgb(240,211,16)" fg:x="51222" fg:w="33"/><text x="45.6005%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (29 samples, 0.03%)</title><rect x="45.3540%" y="213" width="0.0257%" height="15" fill="rgb(205,3,43)" fg:x="51226" fg:w="29"/><text x="45.6040%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (20 samples, 0.02%)</title><rect x="45.3620%" y="197" width="0.0177%" height="15" fill="rgb(245,7,22)" fg:x="51235" fg:w="20"/><text x="45.6120%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (20 samples, 0.02%)</title><rect x="45.3620%" y="181" width="0.0177%" height="15" fill="rgb(239,132,32)" fg:x="51235" fg:w="20"/><text x="45.6120%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (174 samples, 0.15%)</title><rect x="45.3797%" y="229" width="0.1541%" height="15" fill="rgb(228,202,34)" fg:x="51255" fg:w="174"/><text x="45.6297%" y="239.50"></text></g><g><title>[libc-2.31.so] (147 samples, 0.13%)</title><rect x="45.4036%" y="213" width="0.1301%" height="15" fill="rgb(254,200,22)" fg:x="51282" fg:w="147"/><text x="45.6536%" y="223.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (231 samples, 0.20%)</title><rect x="45.3301%" y="325" width="0.2045%" height="15" fill="rgb(219,10,39)" fg:x="51199" fg:w="231"/><text x="45.5801%" y="335.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (231 samples, 0.20%)</title><rect x="45.3301%" y="309" width="0.2045%" height="15" fill="rgb(226,210,39)" fg:x="51199" fg:w="231"/><text x="45.5801%" y="319.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (231 samples, 0.20%)</title><rect x="45.3301%" y="293" width="0.2045%" height="15" fill="rgb(208,219,16)" fg:x="51199" fg:w="231"/><text x="45.5801%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (231 samples, 0.20%)</title><rect x="45.3301%" y="277" width="0.2045%" height="15" fill="rgb(216,158,51)" fg:x="51199" fg:w="231"/><text x="45.5801%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (231 samples, 0.20%)</title><rect x="45.3301%" y="261" width="0.2045%" height="15" fill="rgb(233,14,44)" fg:x="51199" fg:w="231"/><text x="45.5801%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (231 samples, 0.20%)</title><rect x="45.3301%" y="245" width="0.2045%" height="15" fill="rgb(237,97,39)" fg:x="51199" fg:w="231"/><text x="45.5801%" y="255.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (57 samples, 0.05%)</title><rect x="45.6143%" y="293" width="0.0505%" height="15" fill="rgb(218,198,43)" fg:x="51520" fg:w="57"/><text x="45.8643%" y="303.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (57 samples, 0.05%)</title><rect x="45.6143%" y="277" width="0.0505%" height="15" fill="rgb(231,104,20)" fg:x="51520" fg:w="57"/><text x="45.8643%" y="287.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (57 samples, 0.05%)</title><rect x="45.6143%" y="261" width="0.0505%" height="15" fill="rgb(254,36,13)" fg:x="51520" fg:w="57"/><text x="45.8643%" y="271.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (57 samples, 0.05%)</title><rect x="45.6143%" y="245" width="0.0505%" height="15" fill="rgb(248,14,50)" fg:x="51520" fg:w="57"/><text x="45.8643%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (57 samples, 0.05%)</title><rect x="45.6143%" y="229" width="0.0505%" height="15" fill="rgb(217,107,29)" fg:x="51520" fg:w="57"/><text x="45.8643%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (57 samples, 0.05%)</title><rect x="45.6143%" y="213" width="0.0505%" height="15" fill="rgb(251,169,33)" fg:x="51520" fg:w="57"/><text x="45.8643%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (57 samples, 0.05%)</title><rect x="45.6143%" y="197" width="0.0505%" height="15" fill="rgb(217,108,32)" fg:x="51520" fg:w="57"/><text x="45.8643%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (47 samples, 0.04%)</title><rect x="45.6232%" y="181" width="0.0416%" height="15" fill="rgb(219,66,42)" fg:x="51530" fg:w="47"/><text x="45.8732%" y="191.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_str (501 samples, 0.44%)</title><rect x="45.2796%" y="357" width="0.4436%" height="15" fill="rgb(206,180,7)" fg:x="51142" fg:w="501"/><text x="45.5296%" y="367.50"></text></g><g><title>rmp::encode::str::write_str (461 samples, 0.41%)</title><rect x="45.3151%" y="341" width="0.4082%" height="15" fill="rgb(208,226,31)" fg:x="51182" fg:w="461"/><text x="45.5651%" y="351.50"></text></g><g><title>rmp::encode::str::write_str_len (213 samples, 0.19%)</title><rect x="45.5346%" y="325" width="0.1886%" height="15" fill="rgb(218,26,49)" fg:x="51430" fg:w="213"/><text x="45.7846%" y="335.50"></text></g><g><title>rmp::encode::write_marker (165 samples, 0.15%)</title><rect x="45.5771%" y="309" width="0.1461%" height="15" fill="rgb(233,197,48)" fg:x="51478" fg:w="165"/><text x="45.8271%" y="319.50"></text></g><g><title>rmp::marker::Marker::to_u8 (66 samples, 0.06%)</title><rect x="45.6648%" y="293" width="0.0584%" height="15" fill="rgb(252,181,51)" fg:x="51577" fg:w="66"/><text x="45.9148%" y="303.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (57 samples, 0.05%)</title><rect x="45.7453%" y="341" width="0.0505%" height="15" fill="rgb(253,90,19)" fg:x="51668" fg:w="57"/><text x="45.9953%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and (58 samples, 0.05%)</title><rect x="45.8835%" y="325" width="0.0514%" height="15" fill="rgb(215,171,30)" fg:x="51824" fg:w="58"/><text x="46.1335%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (42 samples, 0.04%)</title><rect x="45.9924%" y="181" width="0.0372%" height="15" fill="rgb(214,222,9)" fg:x="51947" fg:w="42"/><text x="46.2424%" y="191.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (137 samples, 0.12%)</title><rect x="45.9924%" y="293" width="0.1213%" height="15" fill="rgb(223,3,22)" fg:x="51947" fg:w="137"/><text x="46.2424%" y="303.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (137 samples, 0.12%)</title><rect x="45.9924%" y="277" width="0.1213%" height="15" fill="rgb(225,196,46)" fg:x="51947" fg:w="137"/><text x="46.2424%" y="287.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (137 samples, 0.12%)</title><rect x="45.9924%" y="261" width="0.1213%" height="15" fill="rgb(209,110,37)" fg:x="51947" fg:w="137"/><text x="46.2424%" y="271.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (137 samples, 0.12%)</title><rect x="45.9924%" y="245" width="0.1213%" height="15" fill="rgb(249,89,12)" fg:x="51947" fg:w="137"/><text x="46.2424%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (137 samples, 0.12%)</title><rect x="45.9924%" y="229" width="0.1213%" height="15" fill="rgb(226,27,33)" fg:x="51947" fg:w="137"/><text x="46.2424%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (137 samples, 0.12%)</title><rect x="45.9924%" y="213" width="0.1213%" height="15" fill="rgb(213,82,22)" fg:x="51947" fg:w="137"/><text x="46.2424%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (137 samples, 0.12%)</title><rect x="45.9924%" y="197" width="0.1213%" height="15" fill="rgb(248,140,0)" fg:x="51947" fg:w="137"/><text x="46.2424%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (87 samples, 0.08%)</title><rect x="46.0366%" y="181" width="0.0770%" height="15" fill="rgb(228,106,3)" fg:x="51997" fg:w="87"/><text x="46.2866%" y="191.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_u64 (590 samples, 0.52%)</title><rect x="45.7232%" y="357" width="0.5224%" height="15" fill="rgb(209,23,37)" fg:x="51643" fg:w="590"/><text x="45.9732%" y="367.50"></text></g><g><title>rmp::encode::uint::write_uint (508 samples, 0.45%)</title><rect x="45.7958%" y="341" width="0.4498%" height="15" fill="rgb(241,93,50)" fg:x="51725" fg:w="508"/><text x="46.0458%" y="351.50"></text></g><g><title>rmp::encode::uint::write_pfix (351 samples, 0.31%)</title><rect x="45.9348%" y="325" width="0.3108%" height="15" fill="rgb(253,46,43)" fg:x="51882" fg:w="351"/><text x="46.1848%" y="335.50"></text></g><g><title>rmp::encode::write_marker (312 samples, 0.28%)</title><rect x="45.9693%" y="309" width="0.2762%" height="15" fill="rgb(226,206,43)" fg:x="51921" fg:w="312"/><text x="46.2193%" y="319.50"></text></g><g><title>rmp::marker::Marker::to_u8 (149 samples, 0.13%)</title><rect x="46.1137%" y="293" width="0.1319%" height="15" fill="rgb(217,54,7)" fg:x="52084" fg:w="149"/><text x="46.3637%" y="303.50"></text></g><g><title>&lt;tremor_runtime::codec::msgpack::MsgPack as tremor_runtime::codec::Codec&gt;::encode (5,871 samples, 5.20%)</title><rect x="41.1193%" y="533" width="5.1980%" height="15" fill="rgb(223,5,52)" fg:x="46443" fg:w="5871"/><text x="41.3693%" y="543.50">&lt;tremo..</text></g><g><title>rmp_serde::encode::to_vec (5,871 samples, 5.20%)</title><rect x="41.1193%" y="517" width="5.1980%" height="15" fill="rgb(206,52,46)" fg:x="46443" fg:w="5871"/><text x="41.3693%" y="527.50">rmp_se..</text></g><g><title>rmp_serde::encode::write (5,871 samples, 5.20%)</title><rect x="41.1193%" y="501" width="5.1980%" height="15" fill="rgb(253,136,11)" fg:x="46443" fg:w="5871"/><text x="41.3693%" y="511.50">rmp_se..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5,871 samples, 5.20%)</title><rect x="41.1193%" y="485" width="5.1980%" height="15" fill="rgb(208,106,33)" fg:x="46443" fg:w="5871"/><text x="41.3693%" y="495.50">serde:..</text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (5,871 samples, 5.20%)</title><rect x="41.1193%" y="469" width="5.1980%" height="15" fill="rgb(206,54,4)" fg:x="46443" fg:w="5871"/><text x="41.3693%" y="479.50">tremor..</text></g><g><title>serde::ser::SerializeMap::serialize_entry (5,871 samples, 5.20%)</title><rect x="41.1193%" y="453" width="5.1980%" height="15" fill="rgb(213,3,15)" fg:x="46443" fg:w="5871"/><text x="41.3693%" y="463.50">serde:..</text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeMap&gt;::serialize_value (5,429 samples, 4.81%)</title><rect x="41.5106%" y="437" width="4.8067%" height="15" fill="rgb(252,211,39)" fg:x="46885" fg:w="5429"/><text x="41.7606%" y="447.50">&lt;rmp_s..</text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeSeq&gt;::serialize_element (5,429 samples, 4.81%)</title><rect x="41.5106%" y="421" width="4.8067%" height="15" fill="rgb(223,6,36)" fg:x="46885" fg:w="5429"/><text x="41.7606%" y="431.50">&lt;rmp_s..</text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (5,429 samples, 4.81%)</title><rect x="41.5106%" y="405" width="4.8067%" height="15" fill="rgb(252,169,45)" fg:x="46885" fg:w="5429"/><text x="41.7606%" y="415.50">tremor..</text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeSeq&gt;::serialize_element (2,937 samples, 2.60%)</title><rect x="43.7170%" y="389" width="2.6003%" height="15" fill="rgb(212,48,26)" fg:x="49377" fg:w="2937"/><text x="43.9670%" y="399.50">&lt;r..</text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (2,822 samples, 2.50%)</title><rect x="43.8188%" y="373" width="2.4985%" height="15" fill="rgb(251,102,48)" fg:x="49492" fg:w="2822"/><text x="44.0688%" y="383.50">tr..</text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::deref::Deref&gt;::deref (81 samples, 0.07%)</title><rect x="46.2456%" y="357" width="0.0717%" height="15" fill="rgb(243,208,16)" fg:x="52233" fg:w="81"/><text x="46.4956%" y="367.50"></text></g><g><title>beef::generic::Cow&lt;T,U&gt;::borrow (81 samples, 0.07%)</title><rect x="46.2456%" y="341" width="0.0717%" height="15" fill="rgb(219,96,24)" fg:x="52233" fg:w="81"/><text x="46.4956%" y="351.50"></text></g><g><title>alloc::alloc::exchange_malloc (38 samples, 0.03%)</title><rect x="46.3474%" y="517" width="0.0336%" height="15" fill="rgb(219,33,29)" fg:x="52348" fg:w="38"/><text x="46.5974%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (38 samples, 0.03%)</title><rect x="46.3474%" y="501" width="0.0336%" height="15" fill="rgb(223,176,5)" fg:x="52348" fg:w="38"/><text x="46.5974%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (38 samples, 0.03%)</title><rect x="46.3474%" y="485" width="0.0336%" height="15" fill="rgb(228,140,14)" fg:x="52348" fg:w="38"/><text x="46.5974%" y="495.50"></text></g><g><title>alloc::alloc::alloc (34 samples, 0.03%)</title><rect x="46.3509%" y="469" width="0.0301%" height="15" fill="rgb(217,179,31)" fg:x="52352" fg:w="34"/><text x="46.6009%" y="479.50"></text></g><g><title>__rg_alloc (34 samples, 0.03%)</title><rect x="46.3509%" y="453" width="0.0301%" height="15" fill="rgb(230,9,30)" fg:x="52352" fg:w="34"/><text x="46.6009%" y="463.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (34 samples, 0.03%)</title><rect x="46.3509%" y="437" width="0.0301%" height="15" fill="rgb(230,136,20)" fg:x="52352" fg:w="34"/><text x="46.6009%" y="447.50"></text></g><g><title>sn_rust_alloc (34 samples, 0.03%)</title><rect x="46.3509%" y="421" width="0.0301%" height="15" fill="rgb(215,210,22)" fg:x="52352" fg:w="34"/><text x="46.6009%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (27 samples, 0.02%)</title><rect x="46.4094%" y="501" width="0.0239%" height="15" fill="rgb(218,43,5)" fg:x="52418" fg:w="27"/><text x="46.6594%" y="511.50"></text></g><g><title>core::time::Duration::as_nanos (22 samples, 0.02%)</title><rect x="46.4333%" y="501" width="0.0195%" height="15" fill="rgb(216,11,5)" fg:x="52445" fg:w="22"/><text x="46.6833%" y="511.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (69 samples, 0.06%)</title><rect x="46.4528%" y="485" width="0.0611%" height="15" fill="rgb(209,82,29)" fg:x="52467" fg:w="69"/><text x="46.7028%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (24 samples, 0.02%)</title><rect x="46.5395%" y="453" width="0.0212%" height="15" fill="rgb(244,115,12)" fg:x="52565" fg:w="24"/><text x="46.7895%" y="463.50"></text></g><g><title>core::cmp::PartialOrd::ge (24 samples, 0.02%)</title><rect x="46.5395%" y="437" width="0.0212%" height="15" fill="rgb(222,82,18)" fg:x="52565" fg:w="24"/><text x="46.7895%" y="447.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (24 samples, 0.02%)</title><rect x="46.5395%" y="421" width="0.0212%" height="15" fill="rgb(249,227,8)" fg:x="52565" fg:w="24"/><text x="46.7895%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (16 samples, 0.01%)</title><rect x="46.5466%" y="405" width="0.0142%" height="15" fill="rgb(253,141,45)" fg:x="52573" fg:w="16"/><text x="46.7966%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (16 samples, 0.01%)</title><rect x="46.5466%" y="389" width="0.0142%" height="15" fill="rgb(234,184,4)" fg:x="52573" fg:w="16"/><text x="46.7966%" y="399.50"></text></g><g><title>std::time::SystemTime::duration_since (139 samples, 0.12%)</title><rect x="46.4528%" y="501" width="0.1231%" height="15" fill="rgb(218,194,23)" fg:x="52467" fg:w="139"/><text x="46.7028%" y="511.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (70 samples, 0.06%)</title><rect x="46.5139%" y="485" width="0.0620%" height="15" fill="rgb(235,66,41)" fg:x="52536" fg:w="70"/><text x="46.7639%" y="495.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (70 samples, 0.06%)</title><rect x="46.5139%" y="469" width="0.0620%" height="15" fill="rgb(245,217,1)" fg:x="52536" fg:w="70"/><text x="46.7639%" y="479.50"></text></g><g><title>core::time::Duration::new (17 samples, 0.02%)</title><rect x="46.5608%" y="453" width="0.0151%" height="15" fill="rgb(229,91,1)" fg:x="52589" fg:w="17"/><text x="46.8108%" y="463.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager&lt;S&gt;::run::{{closure}} (6,465 samples, 5.72%)</title><rect x="41.1193%" y="645" width="5.7239%" height="15" fill="rgb(207,101,30)" fg:x="46443" fg:w="6465"/><text x="41.3693%" y="655.50">tremor_..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (6,465 samples, 5.72%)</title><rect x="41.1193%" y="629" width="5.7239%" height="15" fill="rgb(223,82,49)" fg:x="46443" fg:w="6465"/><text x="41.3693%" y="639.50">&lt;core::..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,465 samples, 5.72%)</title><rect x="41.1193%" y="613" width="5.7239%" height="15" fill="rgb(218,167,17)" fg:x="46443" fg:w="6465"/><text x="41.3693%" y="623.50">&lt;core::..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::Sink&gt;::on_event::{{closure}} (6,465 samples, 5.72%)</title><rect x="41.1193%" y="597" width="5.7239%" height="15" fill="rgb(208,103,14)" fg:x="46443" fg:w="6465"/><text x="41.3693%" y="607.50">&lt;tremor..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize (6,465 samples, 5.72%)</title><rect x="41.1193%" y="581" width="5.7239%" height="15" fill="rgb(238,20,8)" fg:x="46443" fg:w="6465"/><text x="41.3693%" y="591.50">tremor_..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize_for_stream (6,465 samples, 5.72%)</title><rect x="41.1193%" y="565" width="5.7239%" height="15" fill="rgb(218,80,54)" fg:x="46443" fg:w="6465"/><text x="41.3693%" y="575.50">tremor_..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize_for_stream_with_codec (6,465 samples, 5.72%)</title><rect x="41.1193%" y="549" width="5.7239%" height="15" fill="rgb(240,144,17)" fg:x="46443" fg:w="6465"/><text x="41.3693%" y="559.50">tremor_..</text></g><g><title>tremor_runtime::postprocessor::postprocess (594 samples, 0.53%)</title><rect x="46.3173%" y="533" width="0.5259%" height="15" fill="rgb(245,27,50)" fg:x="52314" fg:w="594"/><text x="46.5673%" y="543.50"></text></g><g><title>tremor_common::time::nanotime (505 samples, 0.45%)</title><rect x="46.3961%" y="517" width="0.4471%" height="15" fill="rgb(251,51,7)" fg:x="52403" fg:w="505"/><text x="46.6461%" y="527.50"></text></g><g><title>std::time::SystemTime::now (302 samples, 0.27%)</title><rect x="46.5758%" y="501" width="0.2674%" height="15" fill="rgb(245,217,29)" fg:x="52606" fg:w="302"/><text x="46.8258%" y="511.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (302 samples, 0.27%)</title><rect x="46.5758%" y="485" width="0.2674%" height="15" fill="rgb(221,176,29)" fg:x="52606" fg:w="302"/><text x="46.8258%" y="495.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (302 samples, 0.27%)</title><rect x="46.5758%" y="469" width="0.2674%" height="15" fill="rgb(212,180,24)" fg:x="52606" fg:w="302"/><text x="46.8258%" y="479.50"></text></g><g><title>__clock_gettime (256 samples, 0.23%)</title><rect x="46.6166%" y="453" width="0.2267%" height="15" fill="rgb(254,24,2)" fg:x="52652" fg:w="256"/><text x="46.8666%" y="463.50"></text></g><g><title>__vdso_clock_gettime (235 samples, 0.21%)</title><rect x="46.6351%" y="437" width="0.2081%" height="15" fill="rgb(230,100,2)" fg:x="52673" fg:w="235"/><text x="46.8851%" y="447.50"></text></g><g><title>[[vdso]] (211 samples, 0.19%)</title><rect x="46.6564%" y="421" width="0.1868%" height="15" fill="rgb(219,142,25)" fg:x="52697" fg:w="211"/><text x="46.9064%" y="431.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (208 samples, 0.18%)</title><rect x="46.9468%" y="533" width="0.1842%" height="15" fill="rgb(240,73,43)" fg:x="53025" fg:w="208"/><text x="47.1968%" y="543.50"></text></g><g><title>core::ptr::read (197 samples, 0.17%)</title><rect x="46.9565%" y="517" width="0.1744%" height="15" fill="rgb(214,114,15)" fg:x="53036" fg:w="197"/><text x="47.2065%" y="527.50"></text></g><g><title>[libc-2.31.so] (194 samples, 0.17%)</title><rect x="46.9592%" y="501" width="0.1718%" height="15" fill="rgb(207,130,4)" fg:x="53039" fg:w="194"/><text x="47.2092%" y="511.50"></text></g><g><title>[libc-2.31.so] (84 samples, 0.07%)</title><rect x="47.1372%" y="517" width="0.0744%" height="15" fill="rgb(221,25,40)" fg:x="53240" fg:w="84"/><text x="47.3872%" y="527.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (20 samples, 0.02%)</title><rect x="47.2602%" y="485" width="0.0177%" height="15" fill="rgb(241,184,7)" fg:x="53379" fg:w="20"/><text x="47.5102%" y="495.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::capacity (12 samples, 0.01%)</title><rect x="47.2779%" y="485" width="0.0106%" height="15" fill="rgb(235,159,4)" fg:x="53399" fg:w="12"/><text x="47.5279%" y="495.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (61 samples, 0.05%)</title><rect x="47.2354%" y="501" width="0.0540%" height="15" fill="rgb(214,87,48)" fg:x="53351" fg:w="61"/><text x="47.4854%" y="511.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (186 samples, 0.16%)</title><rect x="47.1310%" y="533" width="0.1647%" height="15" fill="rgb(246,198,24)" fg:x="53233" fg:w="186"/><text x="47.3810%" y="543.50"></text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (95 samples, 0.08%)</title><rect x="47.2115%" y="517" width="0.0841%" height="15" fill="rgb(209,66,40)" fg:x="53324" fg:w="95"/><text x="47.4615%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (99 samples, 0.09%)</title><rect x="47.2965%" y="405" width="0.0877%" height="15" fill="rgb(233,147,39)" fg:x="53420" fg:w="99"/><text x="47.5465%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (99 samples, 0.09%)</title><rect x="47.2965%" y="389" width="0.0877%" height="15" fill="rgb(231,145,52)" fg:x="53420" fg:w="99"/><text x="47.5465%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (99 samples, 0.09%)</title><rect x="47.2965%" y="373" width="0.0877%" height="15" fill="rgb(206,20,26)" fg:x="53420" fg:w="99"/><text x="47.5465%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (99 samples, 0.09%)</title><rect x="47.2965%" y="357" width="0.0877%" height="15" fill="rgb(238,220,4)" fg:x="53420" fg:w="99"/><text x="47.5465%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (99 samples, 0.09%)</title><rect x="47.2965%" y="341" width="0.0877%" height="15" fill="rgb(252,195,42)" fg:x="53420" fg:w="99"/><text x="47.5465%" y="351.50"></text></g><g><title>alloc::alloc::alloc (99 samples, 0.09%)</title><rect x="47.2965%" y="325" width="0.0877%" height="15" fill="rgb(209,10,6)" fg:x="53420" fg:w="99"/><text x="47.5465%" y="335.50"></text></g><g><title>__rg_alloc (99 samples, 0.09%)</title><rect x="47.2965%" y="309" width="0.0877%" height="15" fill="rgb(229,3,52)" fg:x="53420" fg:w="99"/><text x="47.5465%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (99 samples, 0.09%)</title><rect x="47.2965%" y="293" width="0.0877%" height="15" fill="rgb(253,49,37)" fg:x="53420" fg:w="99"/><text x="47.5465%" y="303.50"></text></g><g><title>sn_rust_alloc (95 samples, 0.08%)</title><rect x="47.3001%" y="277" width="0.0841%" height="15" fill="rgb(240,103,49)" fg:x="53424" fg:w="95"/><text x="47.5501%" y="287.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (125 samples, 0.11%)</title><rect x="47.2965%" y="533" width="0.1107%" height="15" fill="rgb(250,182,30)" fg:x="53420" fg:w="125"/><text x="47.5465%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (125 samples, 0.11%)</title><rect x="47.2965%" y="517" width="0.1107%" height="15" fill="rgb(248,8,30)" fg:x="53420" fg:w="125"/><text x="47.5465%" y="527.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (125 samples, 0.11%)</title><rect x="47.2965%" y="501" width="0.1107%" height="15" fill="rgb(237,120,30)" fg:x="53420" fg:w="125"/><text x="47.5465%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (125 samples, 0.11%)</title><rect x="47.2965%" y="485" width="0.1107%" height="15" fill="rgb(221,146,34)" fg:x="53420" fg:w="125"/><text x="47.5465%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (125 samples, 0.11%)</title><rect x="47.2965%" y="469" width="0.1107%" height="15" fill="rgb(242,55,13)" fg:x="53420" fg:w="125"/><text x="47.5465%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (125 samples, 0.11%)</title><rect x="47.2965%" y="453" width="0.1107%" height="15" fill="rgb(242,112,31)" fg:x="53420" fg:w="125"/><text x="47.5465%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (125 samples, 0.11%)</title><rect x="47.2965%" y="437" width="0.1107%" height="15" fill="rgb(249,192,27)" fg:x="53420" fg:w="125"/><text x="47.5465%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (125 samples, 0.11%)</title><rect x="47.2965%" y="421" width="0.1107%" height="15" fill="rgb(208,204,44)" fg:x="53420" fg:w="125"/><text x="47.5465%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (26 samples, 0.02%)</title><rect x="47.3842%" y="405" width="0.0230%" height="15" fill="rgb(208,93,54)" fg:x="53519" fg:w="26"/><text x="47.6342%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (26 samples, 0.02%)</title><rect x="47.3842%" y="389" width="0.0230%" height="15" fill="rgb(242,1,31)" fg:x="53519" fg:w="26"/><text x="47.6342%" y="399.50"></text></g><g><title>[libc-2.31.so] (21 samples, 0.02%)</title><rect x="47.3886%" y="373" width="0.0186%" height="15" fill="rgb(241,83,25)" fg:x="53524" fg:w="21"/><text x="47.6386%" y="383.50"></text></g><g><title>[libc-2.31.so] (344 samples, 0.30%)</title><rect x="47.4072%" y="533" width="0.3046%" height="15" fill="rgb(205,169,50)" fg:x="53545" fg:w="344"/><text x="47.6572%" y="543.50"></text></g><g><title>[libc-2.31.so] (182 samples, 0.16%)</title><rect x="47.7188%" y="517" width="0.1611%" height="15" fill="rgb(239,186,37)" fg:x="53897" fg:w="182"/><text x="47.9688%" y="527.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (421 samples, 0.37%)</title><rect x="47.9260%" y="405" width="0.3727%" height="15" fill="rgb(205,221,10)" fg:x="54131" fg:w="421"/><text x="48.1760%" y="415.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (674 samples, 0.60%)</title><rect x="47.7118%" y="533" width="0.5967%" height="15" fill="rgb(218,196,15)" fg:x="53889" fg:w="674"/><text x="47.9618%" y="543.50"></text></g><g><title>alloc::alloc::exchange_malloc (484 samples, 0.43%)</title><rect x="47.8800%" y="517" width="0.4285%" height="15" fill="rgb(218,196,35)" fg:x="54079" fg:w="484"/><text x="48.1300%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (484 samples, 0.43%)</title><rect x="47.8800%" y="501" width="0.4285%" height="15" fill="rgb(233,63,24)" fg:x="54079" fg:w="484"/><text x="48.1300%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (484 samples, 0.43%)</title><rect x="47.8800%" y="485" width="0.4285%" height="15" fill="rgb(225,8,4)" fg:x="54079" fg:w="484"/><text x="48.1300%" y="495.50"></text></g><g><title>alloc::alloc::alloc (484 samples, 0.43%)</title><rect x="47.8800%" y="469" width="0.4285%" height="15" fill="rgb(234,105,35)" fg:x="54079" fg:w="484"/><text x="48.1300%" y="479.50"></text></g><g><title>__rg_alloc (484 samples, 0.43%)</title><rect x="47.8800%" y="453" width="0.4285%" height="15" fill="rgb(236,21,32)" fg:x="54079" fg:w="484"/><text x="48.1300%" y="463.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (484 samples, 0.43%)</title><rect x="47.8800%" y="437" width="0.4285%" height="15" fill="rgb(228,109,6)" fg:x="54079" fg:w="484"/><text x="48.1300%" y="447.50"></text></g><g><title>sn_rust_alloc (484 samples, 0.43%)</title><rect x="47.8800%" y="421" width="0.4285%" height="15" fill="rgb(229,215,31)" fg:x="54079" fg:w="484"/><text x="48.1300%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event),alloc::alloc::Global&gt;&gt; (16 samples, 0.01%)</title><rect x="48.3191%" y="501" width="0.0142%" height="15" fill="rgb(221,52,54)" fg:x="54575" fg:w="16"/><text x="48.5691%" y="511.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="48.3191%" y="485" width="0.0142%" height="15" fill="rgb(252,129,43)" fg:x="54575" fg:w="16"/><text x="48.5691%" y="495.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.03%)</title><rect x="48.3085%" y="517" width="0.0266%" height="15" fill="rgb(248,183,27)" fg:x="54563" fg:w="30"/><text x="48.5585%" y="527.50"></text></g><g><title>sn_rust_dealloc (28 samples, 0.02%)</title><rect x="48.3351%" y="517" width="0.0248%" height="15" fill="rgb(250,0,22)" fg:x="54593" fg:w="28"/><text x="48.5851%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (65 samples, 0.06%)</title><rect x="48.3085%" y="533" width="0.0575%" height="15" fill="rgb(213,166,10)" fg:x="54563" fg:w="65"/><text x="48.5585%" y="543.50"></text></g><g><title>core::str::&lt;impl str&gt;::eq_ignore_ascii_case (20 samples, 0.02%)</title><rect x="48.3731%" y="533" width="0.0177%" height="15" fill="rgb(207,163,36)" fg:x="54636" fg:w="20"/><text x="48.6231%" y="543.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case (20 samples, 0.02%)</title><rect x="48.3731%" y="517" width="0.0177%" height="15" fill="rgb(208,122,22)" fg:x="54636" fg:w="20"/><text x="48.6231%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (20 samples, 0.02%)</title><rect x="48.3731%" y="501" width="0.0177%" height="15" fill="rgb(207,104,49)" fg:x="54636" fg:w="20"/><text x="48.6231%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (20 samples, 0.02%)</title><rect x="48.3731%" y="485" width="0.0177%" height="15" fill="rgb(248,211,50)" fg:x="54636" fg:w="20"/><text x="48.6231%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::{{closure}} (13 samples, 0.01%)</title><rect x="48.3793%" y="469" width="0.0115%" height="15" fill="rgb(217,13,45)" fg:x="54643" fg:w="13"/><text x="48.6293%" y="479.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case::{{closure}} (13 samples, 0.01%)</title><rect x="48.3793%" y="453" width="0.0115%" height="15" fill="rgb(211,216,49)" fg:x="54643" fg:w="13"/><text x="48.6293%" y="463.50"></text></g><g><title>core::num::&lt;impl u8&gt;::eq_ignore_ascii_case (13 samples, 0.01%)</title><rect x="48.3793%" y="437" width="0.0115%" height="15" fill="rgb(221,58,53)" fg:x="54643" fg:w="13"/><text x="48.6293%" y="447.50"></text></g><g><title>core::num::&lt;impl u8&gt;::to_ascii_lowercase (13 samples, 0.01%)</title><rect x="48.3793%" y="421" width="0.0115%" height="15" fill="rgb(220,112,41)" fg:x="54643" fg:w="13"/><text x="48.6293%" y="431.50"></text></g><g><title>tremor_runtime::connectors::utils::metrics::SourceReporter::periodic_flush (12 samples, 0.01%)</title><rect x="48.3926%" y="533" width="0.0106%" height="15" fill="rgb(236,38,28)" fg:x="54658" fg:w="12"/><text x="48.6426%" y="543.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,779 samples, 1.58%)</title><rect x="46.8432%" y="629" width="1.5751%" height="15" fill="rgb(227,195,22)" fg:x="52908" fg:w="1779"/><text x="47.0932%" y="639.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_source_reply::{{closure}} (1,779 samples, 1.58%)</title><rect x="46.8432%" y="613" width="1.5751%" height="15" fill="rgb(214,55,33)" fg:x="52908" fg:w="1779"/><text x="47.0932%" y="623.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,779 samples, 1.58%)</title><rect x="46.8432%" y="597" width="1.5751%" height="15" fill="rgb(248,80,13)" fg:x="52908" fg:w="1779"/><text x="47.0932%" y="607.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_data::{{closure}} (1,779 samples, 1.58%)</title><rect x="46.8432%" y="581" width="1.5751%" height="15" fill="rgb(238,52,6)" fg:x="52908" fg:w="1779"/><text x="47.0932%" y="591.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,779 samples, 1.58%)</title><rect x="46.8432%" y="565" width="1.5751%" height="15" fill="rgb(224,198,47)" fg:x="52908" fg:w="1779"/><text x="47.0932%" y="575.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::route_events::{{closure}} (1,770 samples, 1.57%)</title><rect x="46.8512%" y="549" width="1.5671%" height="15" fill="rgb(233,171,20)" fg:x="52917" fg:w="1770"/><text x="47.1012%" y="559.50"></text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (17 samples, 0.02%)</title><rect x="48.4032%" y="533" width="0.0151%" height="15" fill="rgb(241,30,25)" fg:x="54670" fg:w="17"/><text x="48.6532%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (17 samples, 0.02%)</title><rect x="48.4032%" y="517" width="0.0151%" height="15" fill="rgb(207,171,38)" fg:x="54670" fg:w="17"/><text x="48.6532%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (17 samples, 0.02%)</title><rect x="48.4032%" y="501" width="0.0151%" height="15" fill="rgb(234,70,1)" fg:x="54670" fg:w="17"/><text x="48.6532%" y="511.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (64 samples, 0.06%)</title><rect x="48.4873%" y="549" width="0.0567%" height="15" fill="rgb(232,178,18)" fg:x="54765" fg:w="64"/><text x="48.7373%" y="559.50"></text></g><g><title>core::mem::replace (64 samples, 0.06%)</title><rect x="48.4873%" y="533" width="0.0567%" height="15" fill="rgb(241,78,40)" fg:x="54765" fg:w="64"/><text x="48.7373%" y="543.50"></text></g><g><title>core::ptr::read (64 samples, 0.06%)</title><rect x="48.4873%" y="517" width="0.0567%" height="15" fill="rgb(222,35,25)" fg:x="54765" fg:w="64"/><text x="48.7373%" y="527.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (101 samples, 0.09%)</title><rect x="48.4688%" y="565" width="0.0894%" height="15" fill="rgb(207,92,16)" fg:x="54744" fg:w="101"/><text x="48.7188%" y="575.50"></text></g><g><title>core::mem::drop (16 samples, 0.01%)</title><rect x="48.5440%" y="549" width="0.0142%" height="15" fill="rgb(216,59,51)" fg:x="54829" fg:w="16"/><text x="48.7940%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (16 samples, 0.01%)</title><rect x="48.5440%" y="533" width="0.0142%" height="15" fill="rgb(213,80,28)" fg:x="54829" fg:w="16"/><text x="48.7940%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (83 samples, 0.07%)</title><rect x="48.5582%" y="565" width="0.0735%" height="15" fill="rgb(220,93,7)" fg:x="54845" fg:w="83"/><text x="48.8082%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (81 samples, 0.07%)</title><rect x="48.5599%" y="549" width="0.0717%" height="15" fill="rgb(225,24,44)" fg:x="54847" fg:w="81"/><text x="48.8099%" y="559.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (81 samples, 0.07%)</title><rect x="48.5599%" y="533" width="0.0717%" height="15" fill="rgb(243,74,40)" fg:x="54847" fg:w="81"/><text x="48.8099%" y="543.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (80 samples, 0.07%)</title><rect x="48.5608%" y="517" width="0.0708%" height="15" fill="rgb(228,39,7)" fg:x="54848" fg:w="80"/><text x="48.8108%" y="527.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (80 samples, 0.07%)</title><rect x="48.5608%" y="501" width="0.0708%" height="15" fill="rgb(227,79,8)" fg:x="54848" fg:w="80"/><text x="48.8108%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (80 samples, 0.07%)</title><rect x="48.5608%" y="485" width="0.0708%" height="15" fill="rgb(236,58,11)" fg:x="54848" fg:w="80"/><text x="48.8108%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_swap (80 samples, 0.07%)</title><rect x="48.5608%" y="469" width="0.0708%" height="15" fill="rgb(249,63,35)" fg:x="54848" fg:w="80"/><text x="48.8108%" y="479.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (343 samples, 0.30%)</title><rect x="48.4360%" y="581" width="0.3037%" height="15" fill="rgb(252,114,16)" fg:x="54707" fg:w="343"/><text x="48.6860%" y="591.50"></text></g><g><title>event_listener::Inner::lock (103 samples, 0.09%)</title><rect x="48.6485%" y="565" width="0.0912%" height="15" fill="rgb(254,151,24)" fg:x="54947" fg:w="103"/><text x="48.8985%" y="575.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (98 samples, 0.09%)</title><rect x="48.6529%" y="549" width="0.0868%" height="15" fill="rgb(253,54,39)" fg:x="54952" fg:w="98"/><text x="48.9029%" y="559.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (90 samples, 0.08%)</title><rect x="48.6600%" y="533" width="0.0797%" height="15" fill="rgb(243,25,45)" fg:x="54960" fg:w="90"/><text x="48.9100%" y="543.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (90 samples, 0.08%)</title><rect x="48.6600%" y="517" width="0.0797%" height="15" fill="rgb(234,134,9)" fg:x="54960" fg:w="90"/><text x="48.9100%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (90 samples, 0.08%)</title><rect x="48.6600%" y="501" width="0.0797%" height="15" fill="rgb(227,166,31)" fg:x="54960" fg:w="90"/><text x="48.9100%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (90 samples, 0.08%)</title><rect x="48.6600%" y="485" width="0.0797%" height="15" fill="rgb(245,143,41)" fg:x="54960" fg:w="90"/><text x="48.9100%" y="495.50"></text></g><g><title>concurrent_queue::full_fence (102 samples, 0.09%)</title><rect x="48.7760%" y="533" width="0.0903%" height="15" fill="rgb(238,181,32)" fg:x="55091" fg:w="102"/><text x="49.0260%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (102 samples, 0.09%)</title><rect x="48.7760%" y="517" width="0.0903%" height="15" fill="rgb(224,113,18)" fg:x="55091" fg:w="102"/><text x="49.0260%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (102 samples, 0.09%)</title><rect x="48.7760%" y="501" width="0.0903%" height="15" fill="rgb(240,229,28)" fg:x="55091" fg:w="102"/><text x="49.0260%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (102 samples, 0.09%)</title><rect x="48.7760%" y="485" width="0.0903%" height="15" fill="rgb(250,185,3)" fg:x="55091" fg:w="102"/><text x="49.0260%" y="495.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (512 samples, 0.45%)</title><rect x="48.4183%" y="597" width="0.4533%" height="15" fill="rgb(212,59,25)" fg:x="54687" fg:w="512"/><text x="48.6683%" y="607.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (149 samples, 0.13%)</title><rect x="48.7397%" y="581" width="0.1319%" height="15" fill="rgb(221,87,20)" fg:x="55050" fg:w="149"/><text x="48.9897%" y="591.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (140 samples, 0.12%)</title><rect x="48.7476%" y="565" width="0.1240%" height="15" fill="rgb(213,74,28)" fg:x="55059" fg:w="140"/><text x="48.9976%" y="575.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (130 samples, 0.12%)</title><rect x="48.7565%" y="549" width="0.1151%" height="15" fill="rgb(224,132,34)" fg:x="55069" fg:w="130"/><text x="49.0065%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (206 samples, 0.18%)</title><rect x="49.3860%" y="453" width="0.1824%" height="15" fill="rgb(222,101,24)" fg:x="55780" fg:w="206"/><text x="49.6360%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (206 samples, 0.18%)</title><rect x="49.3860%" y="437" width="0.1824%" height="15" fill="rgb(254,142,4)" fg:x="55780" fg:w="206"/><text x="49.6360%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (206 samples, 0.18%)</title><rect x="49.3860%" y="421" width="0.1824%" height="15" fill="rgb(230,229,49)" fg:x="55780" fg:w="206"/><text x="49.6360%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (200 samples, 0.18%)</title><rect x="49.3913%" y="405" width="0.1771%" height="15" fill="rgb(238,70,47)" fg:x="55786" fg:w="200"/><text x="49.6413%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (200 samples, 0.18%)</title><rect x="49.3913%" y="389" width="0.1771%" height="15" fill="rgb(231,160,17)" fg:x="55786" fg:w="200"/><text x="49.6413%" y="399.50"></text></g><g><title>alloc::alloc::alloc (200 samples, 0.18%)</title><rect x="49.3913%" y="373" width="0.1771%" height="15" fill="rgb(218,68,53)" fg:x="55786" fg:w="200"/><text x="49.6413%" y="383.50"></text></g><g><title>__rg_alloc (200 samples, 0.18%)</title><rect x="49.3913%" y="357" width="0.1771%" height="15" fill="rgb(236,111,10)" fg:x="55786" fg:w="200"/><text x="49.6413%" y="367.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (200 samples, 0.18%)</title><rect x="49.3913%" y="341" width="0.1771%" height="15" fill="rgb(224,34,41)" fg:x="55786" fg:w="200"/><text x="49.6413%" y="351.50"></text></g><g><title>sn_rust_alloc (190 samples, 0.17%)</title><rect x="49.4002%" y="325" width="0.1682%" height="15" fill="rgb(241,118,19)" fg:x="55796" fg:w="190"/><text x="49.6502%" y="335.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (19 samples, 0.02%)</title><rect x="49.5516%" y="309" width="0.0168%" height="15" fill="rgb(238,129,25)" fg:x="55967" fg:w="19"/><text x="49.8016%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (250 samples, 0.22%)</title><rect x="49.3754%" y="533" width="0.2213%" height="15" fill="rgb(238,22,31)" fg:x="55768" fg:w="250"/><text x="49.6254%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (240 samples, 0.21%)</title><rect x="49.3842%" y="517" width="0.2125%" height="15" fill="rgb(222,174,48)" fg:x="55778" fg:w="240"/><text x="49.6342%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (240 samples, 0.21%)</title><rect x="49.3842%" y="501" width="0.2125%" height="15" fill="rgb(206,152,40)" fg:x="55778" fg:w="240"/><text x="49.6342%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (240 samples, 0.21%)</title><rect x="49.3842%" y="485" width="0.2125%" height="15" fill="rgb(218,99,54)" fg:x="55778" fg:w="240"/><text x="49.6342%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (240 samples, 0.21%)</title><rect x="49.3842%" y="469" width="0.2125%" height="15" fill="rgb(220,174,26)" fg:x="55778" fg:w="240"/><text x="49.6342%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (32 samples, 0.03%)</title><rect x="49.5684%" y="453" width="0.0283%" height="15" fill="rgb(245,116,9)" fg:x="55986" fg:w="32"/><text x="49.8184%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (32 samples, 0.03%)</title><rect x="49.5684%" y="437" width="0.0283%" height="15" fill="rgb(209,72,35)" fg:x="55986" fg:w="32"/><text x="49.8184%" y="447.50"></text></g><g><title>[libc-2.31.so] (27 samples, 0.02%)</title><rect x="49.5728%" y="421" width="0.0239%" height="15" fill="rgb(226,126,21)" fg:x="55991" fg:w="27"/><text x="49.8228%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (107 samples, 0.09%)</title><rect x="49.6277%" y="389" width="0.0947%" height="15" fill="rgb(227,192,1)" fg:x="56053" fg:w="107"/><text x="49.8777%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (107 samples, 0.09%)</title><rect x="49.6277%" y="373" width="0.0947%" height="15" fill="rgb(237,180,29)" fg:x="56053" fg:w="107"/><text x="49.8777%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (107 samples, 0.09%)</title><rect x="49.6277%" y="357" width="0.0947%" height="15" fill="rgb(230,197,35)" fg:x="56053" fg:w="107"/><text x="49.8777%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (104 samples, 0.09%)</title><rect x="49.6304%" y="341" width="0.0921%" height="15" fill="rgb(246,193,31)" fg:x="56056" fg:w="104"/><text x="49.8804%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (104 samples, 0.09%)</title><rect x="49.6304%" y="325" width="0.0921%" height="15" fill="rgb(241,36,4)" fg:x="56056" fg:w="104"/><text x="49.8804%" y="335.50"></text></g><g><title>alloc::alloc::alloc (104 samples, 0.09%)</title><rect x="49.6304%" y="309" width="0.0921%" height="15" fill="rgb(241,130,17)" fg:x="56056" fg:w="104"/><text x="49.8804%" y="319.50"></text></g><g><title>__rg_alloc (104 samples, 0.09%)</title><rect x="49.6304%" y="293" width="0.0921%" height="15" fill="rgb(206,137,32)" fg:x="56056" fg:w="104"/><text x="49.8804%" y="303.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (104 samples, 0.09%)</title><rect x="49.6304%" y="277" width="0.0921%" height="15" fill="rgb(237,228,51)" fg:x="56056" fg:w="104"/><text x="49.8804%" y="287.50"></text></g><g><title>sn_rust_alloc (98 samples, 0.09%)</title><rect x="49.6357%" y="261" width="0.0868%" height="15" fill="rgb(243,6,42)" fg:x="56062" fg:w="98"/><text x="49.8857%" y="271.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (50 samples, 0.04%)</title><rect x="49.6782%" y="245" width="0.0443%" height="15" fill="rgb(251,74,28)" fg:x="56110" fg:w="50"/><text x="49.9282%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (196 samples, 0.17%)</title><rect x="49.6127%" y="469" width="0.1735%" height="15" fill="rgb(218,20,49)" fg:x="56036" fg:w="196"/><text x="49.8627%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (179 samples, 0.16%)</title><rect x="49.6277%" y="453" width="0.1585%" height="15" fill="rgb(238,28,14)" fg:x="56053" fg:w="179"/><text x="49.8777%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (179 samples, 0.16%)</title><rect x="49.6277%" y="437" width="0.1585%" height="15" fill="rgb(229,40,46)" fg:x="56053" fg:w="179"/><text x="49.8777%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (179 samples, 0.16%)</title><rect x="49.6277%" y="421" width="0.1585%" height="15" fill="rgb(244,195,20)" fg:x="56053" fg:w="179"/><text x="49.8777%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (179 samples, 0.16%)</title><rect x="49.6277%" y="405" width="0.1585%" height="15" fill="rgb(253,56,35)" fg:x="56053" fg:w="179"/><text x="49.8777%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (72 samples, 0.06%)</title><rect x="49.7224%" y="389" width="0.0637%" height="15" fill="rgb(210,149,44)" fg:x="56160" fg:w="72"/><text x="49.9724%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (72 samples, 0.06%)</title><rect x="49.7224%" y="373" width="0.0637%" height="15" fill="rgb(240,135,12)" fg:x="56160" fg:w="72"/><text x="49.9724%" y="383.50"></text></g><g><title>[libc-2.31.so] (66 samples, 0.06%)</title><rect x="49.7277%" y="357" width="0.0584%" height="15" fill="rgb(251,24,50)" fg:x="56166" fg:w="66"/><text x="49.9777%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (53 samples, 0.05%)</title><rect x="49.8057%" y="421" width="0.0469%" height="15" fill="rgb(243,200,47)" fg:x="56254" fg:w="53"/><text x="50.0557%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (53 samples, 0.05%)</title><rect x="49.8057%" y="405" width="0.0469%" height="15" fill="rgb(224,166,26)" fg:x="56254" fg:w="53"/><text x="50.0557%" y="415.50"></text></g><g><title>alloc::alloc::alloc (51 samples, 0.05%)</title><rect x="49.8074%" y="389" width="0.0452%" height="15" fill="rgb(233,0,47)" fg:x="56256" fg:w="51"/><text x="50.0574%" y="399.50"></text></g><g><title>__rg_alloc (51 samples, 0.05%)</title><rect x="49.8074%" y="373" width="0.0452%" height="15" fill="rgb(253,80,5)" fg:x="56256" fg:w="51"/><text x="50.0574%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (51 samples, 0.05%)</title><rect x="49.8074%" y="357" width="0.0452%" height="15" fill="rgb(214,133,25)" fg:x="56256" fg:w="51"/><text x="50.0574%" y="367.50"></text></g><g><title>sn_rust_alloc (51 samples, 0.05%)</title><rect x="49.8074%" y="341" width="0.0452%" height="15" fill="rgb(209,27,14)" fg:x="56256" fg:w="51"/><text x="50.0574%" y="351.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (15 samples, 0.01%)</title><rect x="49.8393%" y="325" width="0.0133%" height="15" fill="rgb(219,102,51)" fg:x="56292" fg:w="15"/><text x="50.0893%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (70 samples, 0.06%)</title><rect x="49.7977%" y="469" width="0.0620%" height="15" fill="rgb(237,18,16)" fg:x="56245" fg:w="70"/><text x="50.0477%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (61 samples, 0.05%)</title><rect x="49.8057%" y="453" width="0.0540%" height="15" fill="rgb(241,85,17)" fg:x="56254" fg:w="61"/><text x="50.0557%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (61 samples, 0.05%)</title><rect x="49.8057%" y="437" width="0.0540%" height="15" fill="rgb(236,90,42)" fg:x="56254" fg:w="61"/><text x="50.0557%" y="447.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (839 samples, 0.74%)</title><rect x="49.1186%" y="549" width="0.7428%" height="15" fill="rgb(249,57,21)" fg:x="55478" fg:w="839"/><text x="49.3686%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (299 samples, 0.26%)</title><rect x="49.5967%" y="533" width="0.2647%" height="15" fill="rgb(243,12,36)" fg:x="56018" fg:w="299"/><text x="49.8467%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (287 samples, 0.25%)</title><rect x="49.6073%" y="517" width="0.2541%" height="15" fill="rgb(253,128,47)" fg:x="56030" fg:w="287"/><text x="49.8573%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (287 samples, 0.25%)</title><rect x="49.6073%" y="501" width="0.2541%" height="15" fill="rgb(207,33,20)" fg:x="56030" fg:w="287"/><text x="49.8573%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (287 samples, 0.25%)</title><rect x="49.6073%" y="485" width="0.2541%" height="15" fill="rgb(233,215,35)" fg:x="56030" fg:w="287"/><text x="49.8573%" y="495.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (22 samples, 0.02%)</title><rect x="49.8853%" y="469" width="0.0195%" height="15" fill="rgb(249,188,52)" fg:x="56344" fg:w="22"/><text x="50.1353%" y="479.50"></text></g><g><title>core::time::Duration::as_nanos (22 samples, 0.02%)</title><rect x="49.9048%" y="469" width="0.0195%" height="15" fill="rgb(225,12,32)" fg:x="56366" fg:w="22"/><text x="50.1548%" y="479.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (62 samples, 0.05%)</title><rect x="49.9243%" y="453" width="0.0549%" height="15" fill="rgb(247,98,14)" fg:x="56388" fg:w="62"/><text x="50.1743%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (30 samples, 0.03%)</title><rect x="49.9969%" y="421" width="0.0266%" height="15" fill="rgb(247,219,48)" fg:x="56470" fg:w="30"/><text x="50.2469%" y="431.50"></text></g><g><title>core::cmp::PartialOrd::ge (30 samples, 0.03%)</title><rect x="49.9969%" y="405" width="0.0266%" height="15" fill="rgb(253,60,48)" fg:x="56470" fg:w="30"/><text x="50.2469%" y="415.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (29 samples, 0.03%)</title><rect x="49.9978%" y="389" width="0.0257%" height="15" fill="rgb(245,15,52)" fg:x="56471" fg:w="29"/><text x="50.2478%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (17 samples, 0.02%)</title><rect x="50.0084%" y="373" width="0.0151%" height="15" fill="rgb(220,133,28)" fg:x="56483" fg:w="17"/><text x="50.2584%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (17 samples, 0.02%)</title><rect x="50.0084%" y="357" width="0.0151%" height="15" fill="rgb(217,180,4)" fg:x="56483" fg:w="17"/><text x="50.2584%" y="367.50"></text></g><g><title>std::time::SystemTime::duration_since (123 samples, 0.11%)</title><rect x="49.9243%" y="469" width="0.1089%" height="15" fill="rgb(251,24,1)" fg:x="56388" fg:w="123"/><text x="50.1743%" y="479.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (61 samples, 0.05%)</title><rect x="49.9792%" y="453" width="0.0540%" height="15" fill="rgb(212,185,49)" fg:x="56450" fg:w="61"/><text x="50.2292%" y="463.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (61 samples, 0.05%)</title><rect x="49.9792%" y="437" width="0.0540%" height="15" fill="rgb(215,175,22)" fg:x="56450" fg:w="61"/><text x="50.2292%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (444 samples, 0.39%)</title><rect x="49.8614%" y="549" width="0.3931%" height="15" fill="rgb(250,205,14)" fg:x="56317" fg:w="444"/><text x="50.1114%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (444 samples, 0.39%)</title><rect x="49.8614%" y="533" width="0.3931%" height="15" fill="rgb(225,211,22)" fg:x="56317" fg:w="444"/><text x="50.1114%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any::check::{{closure}} (436 samples, 0.39%)</title><rect x="49.8685%" y="517" width="0.3860%" height="15" fill="rgb(251,179,42)" fg:x="56325" fg:w="436"/><text x="50.1185%" y="527.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::Source&gt;::pull_data::{{closure}}::{{closure}} (436 samples, 0.39%)</title><rect x="49.8685%" y="501" width="0.3860%" height="15" fill="rgb(208,216,51)" fg:x="56325" fg:w="436"/><text x="50.1185%" y="511.50"></text></g><g><title>tremor_common::time::nanotime (431 samples, 0.38%)</title><rect x="49.8729%" y="485" width="0.3816%" height="15" fill="rgb(235,36,11)" fg:x="56330" fg:w="431"/><text x="50.1229%" y="495.50"></text></g><g><title>std::time::SystemTime::now (250 samples, 0.22%)</title><rect x="50.0332%" y="469" width="0.2213%" height="15" fill="rgb(213,189,28)" fg:x="56511" fg:w="250"/><text x="50.2832%" y="479.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (250 samples, 0.22%)</title><rect x="50.0332%" y="453" width="0.2213%" height="15" fill="rgb(227,203,42)" fg:x="56511" fg:w="250"/><text x="50.2832%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (250 samples, 0.22%)</title><rect x="50.0332%" y="437" width="0.2213%" height="15" fill="rgb(244,72,36)" fg:x="56511" fg:w="250"/><text x="50.2832%" y="447.50"></text></g><g><title>__clock_gettime (202 samples, 0.18%)</title><rect x="50.0757%" y="421" width="0.1788%" height="15" fill="rgb(213,53,17)" fg:x="56559" fg:w="202"/><text x="50.3257%" y="431.50"></text></g><g><title>__vdso_clock_gettime (190 samples, 0.17%)</title><rect x="50.0863%" y="405" width="0.1682%" height="15" fill="rgb(207,167,3)" fg:x="56571" fg:w="190"/><text x="50.3363%" y="415.50"></text></g><g><title>[[vdso]] (166 samples, 0.15%)</title><rect x="50.1076%" y="389" width="0.1470%" height="15" fill="rgb(216,98,30)" fg:x="56595" fg:w="166"/><text x="50.3576%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (40 samples, 0.04%)</title><rect x="50.2758%" y="517" width="0.0354%" height="15" fill="rgb(236,123,15)" fg:x="56785" fg:w="40"/><text x="50.5258%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (13 samples, 0.01%)</title><rect x="50.2997%" y="501" width="0.0115%" height="15" fill="rgb(248,81,50)" fg:x="56812" fg:w="13"/><text x="50.5497%" y="511.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (633 samples, 0.56%)</title><rect x="50.4963%" y="325" width="0.5604%" height="15" fill="rgb(214,120,4)" fg:x="57034" fg:w="633"/><text x="50.7463%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (859 samples, 0.76%)</title><rect x="50.3112%" y="469" width="0.7605%" height="15" fill="rgb(208,179,34)" fg:x="56825" fg:w="859"/><text x="50.5612%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (857 samples, 0.76%)</title><rect x="50.3130%" y="453" width="0.7588%" height="15" fill="rgb(227,140,7)" fg:x="56827" fg:w="857"/><text x="50.5630%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (857 samples, 0.76%)</title><rect x="50.3130%" y="437" width="0.7588%" height="15" fill="rgb(214,22,6)" fg:x="56827" fg:w="857"/><text x="50.5630%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (857 samples, 0.76%)</title><rect x="50.3130%" y="421" width="0.7588%" height="15" fill="rgb(207,137,27)" fg:x="56827" fg:w="857"/><text x="50.5630%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (857 samples, 0.76%)</title><rect x="50.3130%" y="405" width="0.7588%" height="15" fill="rgb(210,8,46)" fg:x="56827" fg:w="857"/><text x="50.5630%" y="415.50"></text></g><g><title>alloc::alloc::alloc (857 samples, 0.76%)</title><rect x="50.3130%" y="389" width="0.7588%" height="15" fill="rgb(240,16,54)" fg:x="56827" fg:w="857"/><text x="50.5630%" y="399.50"></text></g><g><title>__rg_alloc (857 samples, 0.76%)</title><rect x="50.3130%" y="373" width="0.7588%" height="15" fill="rgb(211,209,29)" fg:x="56827" fg:w="857"/><text x="50.5630%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (857 samples, 0.76%)</title><rect x="50.3130%" y="357" width="0.7588%" height="15" fill="rgb(226,228,24)" fg:x="56827" fg:w="857"/><text x="50.5630%" y="367.50"></text></g><g><title>sn_rust_alloc (855 samples, 0.76%)</title><rect x="50.3147%" y="341" width="0.7570%" height="15" fill="rgb(222,84,9)" fg:x="56829" fg:w="855"/><text x="50.5647%" y="351.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (17 samples, 0.02%)</title><rect x="51.0567%" y="325" width="0.0151%" height="15" fill="rgb(234,203,30)" fg:x="57667" fg:w="17"/><text x="51.3067%" y="335.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,689 samples, 2.38%)</title><rect x="48.8716%" y="581" width="2.3808%" height="15" fill="rgb(238,109,14)" fg:x="55199" fg:w="2689"/><text x="49.1216%" y="591.50">&lt;c..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::Source&gt;::pull_data::{{closure}} (2,668 samples, 2.36%)</title><rect x="48.8902%" y="565" width="2.3622%" height="15" fill="rgb(233,206,34)" fg:x="55220" fg:w="2668"/><text x="49.1402%" y="575.50">&lt;t..</text></g><g><title>tremor_runtime::connectors::impls::bench::Acc::next (1,118 samples, 0.99%)</title><rect x="50.2625%" y="549" width="0.9898%" height="15" fill="rgb(220,167,47)" fg:x="56770" fg:w="1118"/><text x="50.5125%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,103 samples, 0.98%)</title><rect x="50.2758%" y="533" width="0.9766%" height="15" fill="rgb(238,105,10)" fg:x="56785" fg:w="1103"/><text x="50.5258%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,063 samples, 0.94%)</title><rect x="50.3112%" y="517" width="0.9411%" height="15" fill="rgb(213,227,17)" fg:x="56825" fg:w="1063"/><text x="50.5612%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1,063 samples, 0.94%)</title><rect x="50.3112%" y="501" width="0.9411%" height="15" fill="rgb(217,132,38)" fg:x="56825" fg:w="1063"/><text x="50.5612%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,063 samples, 0.94%)</title><rect x="50.3112%" y="485" width="0.9411%" height="15" fill="rgb(242,146,4)" fg:x="56825" fg:w="1063"/><text x="50.5612%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (204 samples, 0.18%)</title><rect x="51.0717%" y="469" width="0.1806%" height="15" fill="rgb(212,61,9)" fg:x="57684" fg:w="204"/><text x="51.3217%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (204 samples, 0.18%)</title><rect x="51.0717%" y="453" width="0.1806%" height="15" fill="rgb(247,126,22)" fg:x="57684" fg:w="204"/><text x="51.3217%" y="463.50"></text></g><g><title>[libc-2.31.so] (204 samples, 0.18%)</title><rect x="51.0717%" y="437" width="0.1806%" height="15" fill="rgb(220,196,2)" fg:x="57684" fg:w="204"/><text x="51.3217%" y="447.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (2,690 samples, 2.38%)</title><rect x="48.8716%" y="597" width="2.3816%" height="15" fill="rgb(208,46,4)" fg:x="55199" fg:w="2690"/><text x="49.1216%" y="607.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::run::{{closure}} (4,982 samples, 4.41%)</title><rect x="46.8432%" y="645" width="4.4109%" height="15" fill="rgb(252,104,46)" fg:x="52908" fg:w="4982"/><text x="47.0932%" y="655.50">tremo..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (3,203 samples, 2.84%)</title><rect x="48.4183%" y="629" width="2.8358%" height="15" fill="rgb(237,152,48)" fg:x="54687" fg:w="3203"/><text x="48.6683%" y="639.50">&lt;f..</text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (3,203 samples, 2.84%)</title><rect x="48.4183%" y="613" width="2.8358%" height="15" fill="rgb(221,59,37)" fg:x="54687" fg:w="3203"/><text x="48.6683%" y="623.50">fu..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (372 samples, 0.33%)</title><rect x="51.2665%" y="597" width="0.3294%" height="15" fill="rgb(209,202,51)" fg:x="57904" fg:w="372"/><text x="51.5165%" y="607.50"></text></g><g><title>[libc-2.31.so] (322 samples, 0.29%)</title><rect x="51.3108%" y="581" width="0.2851%" height="15" fill="rgb(228,81,30)" fg:x="57954" fg:w="322"/><text x="51.5608%" y="591.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (552 samples, 0.49%)</title><rect x="51.2541%" y="629" width="0.4887%" height="15" fill="rgb(227,42,39)" fg:x="57890" fg:w="552"/><text x="51.5041%" y="639.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (552 samples, 0.49%)</title><rect x="51.2541%" y="613" width="0.4887%" height="15" fill="rgb(221,26,2)" fg:x="57890" fg:w="552"/><text x="51.5041%" y="623.50"></text></g><g><title>[libc-2.31.so] (166 samples, 0.15%)</title><rect x="51.5959%" y="597" width="0.1470%" height="15" fill="rgb(254,61,31)" fg:x="58276" fg:w="166"/><text x="51.8459%" y="607.50"></text></g><g><title>[libc-2.31.so] (80 samples, 0.07%)</title><rect x="51.7597%" y="613" width="0.0708%" height="15" fill="rgb(222,173,38)" fg:x="58461" fg:w="80"/><text x="52.0097%" y="623.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (176 samples, 0.16%)</title><rect x="51.8305%" y="549" width="0.1558%" height="15" fill="rgb(218,50,12)" fg:x="58541" fg:w="176"/><text x="52.0805%" y="559.50"></text></g><g><title>[libc-2.31.so] (135 samples, 0.12%)</title><rect x="51.8668%" y="533" width="0.1195%" height="15" fill="rgb(223,88,40)" fg:x="58582" fg:w="135"/><text x="52.1168%" y="543.50"></text></g><g><title>[libc-2.31.so] (77 samples, 0.07%)</title><rect x="52.0961%" y="533" width="0.0682%" height="15" fill="rgb(237,54,19)" fg:x="58841" fg:w="77"/><text x="52.3461%" y="543.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (458 samples, 0.41%)</title><rect x="52.1776%" y="501" width="0.4055%" height="15" fill="rgb(251,129,25)" fg:x="58933" fg:w="458"/><text x="52.4276%" y="511.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (434 samples, 0.38%)</title><rect x="52.1988%" y="485" width="0.3843%" height="15" fill="rgb(238,97,19)" fg:x="58957" fg:w="434"/><text x="52.4488%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (17 samples, 0.02%)</title><rect x="52.5680%" y="469" width="0.0151%" height="15" fill="rgb(240,169,18)" fg:x="59374" fg:w="17"/><text x="52.8180%" y="479.50"></text></g><g><title>[libc-2.31.so] (103 samples, 0.09%)</title><rect x="52.5831%" y="501" width="0.0912%" height="15" fill="rgb(230,187,49)" fg:x="59391" fg:w="103"/><text x="52.8331%" y="511.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (45 samples, 0.04%)</title><rect x="52.7929%" y="389" width="0.0398%" height="15" fill="rgb(209,44,26)" fg:x="59628" fg:w="45"/><text x="53.0429%" y="399.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (753 samples, 0.67%)</title><rect x="52.1731%" y="517" width="0.6667%" height="15" fill="rgb(244,0,6)" fg:x="58928" fg:w="753"/><text x="52.4231%" y="527.50"></text></g><g><title>alloc::alloc::exchange_malloc (187 samples, 0.17%)</title><rect x="52.6743%" y="501" width="0.1656%" height="15" fill="rgb(248,18,21)" fg:x="59494" fg:w="187"/><text x="52.9243%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (181 samples, 0.16%)</title><rect x="52.6796%" y="485" width="0.1603%" height="15" fill="rgb(245,180,19)" fg:x="59500" fg:w="181"/><text x="52.9296%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (181 samples, 0.16%)</title><rect x="52.6796%" y="469" width="0.1603%" height="15" fill="rgb(252,118,36)" fg:x="59500" fg:w="181"/><text x="52.9296%" y="479.50"></text></g><g><title>alloc::alloc::alloc (181 samples, 0.16%)</title><rect x="52.6796%" y="453" width="0.1603%" height="15" fill="rgb(210,224,19)" fg:x="59500" fg:w="181"/><text x="52.9296%" y="463.50"></text></g><g><title>__rg_alloc (181 samples, 0.16%)</title><rect x="52.6796%" y="437" width="0.1603%" height="15" fill="rgb(218,30,24)" fg:x="59500" fg:w="181"/><text x="52.9296%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (181 samples, 0.16%)</title><rect x="52.6796%" y="421" width="0.1603%" height="15" fill="rgb(219,75,50)" fg:x="59500" fg:w="181"/><text x="52.9296%" y="431.50"></text></g><g><title>sn_rust_alloc (178 samples, 0.16%)</title><rect x="52.6822%" y="405" width="0.1576%" height="15" fill="rgb(234,72,50)" fg:x="59503" fg:w="178"/><text x="52.9322%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (849 samples, 0.75%)</title><rect x="52.1669%" y="533" width="0.7517%" height="15" fill="rgb(219,100,48)" fg:x="58921" fg:w="849"/><text x="52.4169%" y="543.50"></text></g><g><title>[libc-2.31.so] (89 samples, 0.08%)</title><rect x="52.8398%" y="517" width="0.0788%" height="15" fill="rgb(253,5,41)" fg:x="59681" fg:w="89"/><text x="53.0898%" y="527.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (1,237 samples, 1.10%)</title><rect x="51.8305%" y="613" width="1.0952%" height="15" fill="rgb(247,181,11)" fg:x="58541" fg:w="1237"/><text x="52.0805%" y="623.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (1,237 samples, 1.10%)</title><rect x="51.8305%" y="597" width="1.0952%" height="15" fill="rgb(222,223,25)" fg:x="58541" fg:w="1237"/><text x="52.0805%" y="607.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (1,237 samples, 1.10%)</title><rect x="51.8305%" y="581" width="1.0952%" height="15" fill="rgb(214,198,28)" fg:x="58541" fg:w="1237"/><text x="52.0805%" y="591.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (1,237 samples, 1.10%)</title><rect x="51.8305%" y="565" width="1.0952%" height="15" fill="rgb(230,46,43)" fg:x="58541" fg:w="1237"/><text x="52.0805%" y="575.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (1,061 samples, 0.94%)</title><rect x="51.9863%" y="549" width="0.9394%" height="15" fill="rgb(233,65,53)" fg:x="58717" fg:w="1061"/><text x="52.2363%" y="559.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.02%)</title><rect x="53.0718%" y="581" width="0.0159%" height="15" fill="rgb(221,121,27)" fg:x="59943" fg:w="18"/><text x="53.3218%" y="591.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (123 samples, 0.11%)</title><rect x="53.0718%" y="597" width="0.1089%" height="15" fill="rgb(247,70,47)" fg:x="59943" fg:w="123"/><text x="53.3218%" y="607.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (105 samples, 0.09%)</title><rect x="53.0877%" y="581" width="0.0930%" height="15" fill="rgb(228,85,35)" fg:x="59961" fg:w="105"/><text x="53.3377%" y="591.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (105 samples, 0.09%)</title><rect x="53.0877%" y="565" width="0.0930%" height="15" fill="rgb(209,50,18)" fg:x="59961" fg:w="105"/><text x="53.3377%" y="575.50"></text></g><g><title>core::ptr::read (105 samples, 0.09%)</title><rect x="53.0877%" y="549" width="0.0930%" height="15" fill="rgb(250,19,35)" fg:x="59961" fg:w="105"/><text x="53.3377%" y="559.50"></text></g><g><title>[libc-2.31.so] (102 samples, 0.09%)</title><rect x="53.0904%" y="533" width="0.0903%" height="15" fill="rgb(253,107,29)" fg:x="59964" fg:w="102"/><text x="53.3404%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (181 samples, 0.16%)</title><rect x="53.1816%" y="469" width="0.1603%" height="15" fill="rgb(252,179,29)" fg:x="60067" fg:w="181"/><text x="53.4316%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (181 samples, 0.16%)</title><rect x="53.1816%" y="453" width="0.1603%" height="15" fill="rgb(238,194,6)" fg:x="60067" fg:w="181"/><text x="53.4316%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (181 samples, 0.16%)</title><rect x="53.1816%" y="437" width="0.1603%" height="15" fill="rgb(238,164,29)" fg:x="60067" fg:w="181"/><text x="53.4316%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (179 samples, 0.16%)</title><rect x="53.1834%" y="421" width="0.1585%" height="15" fill="rgb(224,25,9)" fg:x="60069" fg:w="179"/><text x="53.4334%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (179 samples, 0.16%)</title><rect x="53.1834%" y="405" width="0.1585%" height="15" fill="rgb(244,153,23)" fg:x="60069" fg:w="179"/><text x="53.4334%" y="415.50"></text></g><g><title>alloc::alloc::alloc (179 samples, 0.16%)</title><rect x="53.1834%" y="389" width="0.1585%" height="15" fill="rgb(212,203,14)" fg:x="60069" fg:w="179"/><text x="53.4334%" y="399.50"></text></g><g><title>__rg_alloc (179 samples, 0.16%)</title><rect x="53.1834%" y="373" width="0.1585%" height="15" fill="rgb(220,164,20)" fg:x="60069" fg:w="179"/><text x="53.4334%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (179 samples, 0.16%)</title><rect x="53.1834%" y="357" width="0.1585%" height="15" fill="rgb(222,203,48)" fg:x="60069" fg:w="179"/><text x="53.4334%" y="367.50"></text></g><g><title>sn_rust_alloc (172 samples, 0.15%)</title><rect x="53.1895%" y="341" width="0.1523%" height="15" fill="rgb(215,159,22)" fg:x="60076" fg:w="172"/><text x="53.4395%" y="351.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (196 samples, 0.17%)</title><rect x="53.1816%" y="597" width="0.1735%" height="15" fill="rgb(216,183,47)" fg:x="60067" fg:w="196"/><text x="53.4316%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (196 samples, 0.17%)</title><rect x="53.1816%" y="581" width="0.1735%" height="15" fill="rgb(229,195,25)" fg:x="60067" fg:w="196"/><text x="53.4316%" y="591.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (196 samples, 0.17%)</title><rect x="53.1816%" y="565" width="0.1735%" height="15" fill="rgb(224,132,51)" fg:x="60067" fg:w="196"/><text x="53.4316%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (196 samples, 0.17%)</title><rect x="53.1816%" y="549" width="0.1735%" height="15" fill="rgb(240,63,7)" fg:x="60067" fg:w="196"/><text x="53.4316%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (196 samples, 0.17%)</title><rect x="53.1816%" y="533" width="0.1735%" height="15" fill="rgb(249,182,41)" fg:x="60067" fg:w="196"/><text x="53.4316%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (196 samples, 0.17%)</title><rect x="53.1816%" y="517" width="0.1735%" height="15" fill="rgb(243,47,26)" fg:x="60067" fg:w="196"/><text x="53.4316%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (196 samples, 0.17%)</title><rect x="53.1816%" y="501" width="0.1735%" height="15" fill="rgb(233,48,2)" fg:x="60067" fg:w="196"/><text x="53.4316%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (196 samples, 0.17%)</title><rect x="53.1816%" y="485" width="0.1735%" height="15" fill="rgb(244,165,34)" fg:x="60067" fg:w="196"/><text x="53.4316%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (15 samples, 0.01%)</title><rect x="53.3418%" y="469" width="0.0133%" height="15" fill="rgb(207,89,7)" fg:x="60248" fg:w="15"/><text x="53.5918%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (15 samples, 0.01%)</title><rect x="53.3418%" y="453" width="0.0133%" height="15" fill="rgb(244,117,36)" fg:x="60248" fg:w="15"/><text x="53.5918%" y="463.50"></text></g><g><title>[libc-2.31.so] (12 samples, 0.01%)</title><rect x="53.3445%" y="437" width="0.0106%" height="15" fill="rgb(226,144,34)" fg:x="60251" fg:w="12"/><text x="53.5945%" y="447.50"></text></g><g><title>[libc-2.31.so] (410 samples, 0.36%)</title><rect x="53.3551%" y="597" width="0.3630%" height="15" fill="rgb(213,23,19)" fg:x="60263" fg:w="410"/><text x="53.6051%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (20 samples, 0.02%)</title><rect x="53.7261%" y="597" width="0.0177%" height="15" fill="rgb(217,75,12)" fg:x="60682" fg:w="20"/><text x="53.9761%" y="607.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.02%)</title><rect x="53.7261%" y="581" width="0.0177%" height="15" fill="rgb(224,159,17)" fg:x="60682" fg:w="20"/><text x="53.9761%" y="591.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (138 samples, 0.12%)</title><rect x="53.7615%" y="565" width="0.1222%" height="15" fill="rgb(217,118,1)" fg:x="60722" fg:w="138"/><text x="54.0115%" y="575.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (132 samples, 0.12%)</title><rect x="53.7668%" y="549" width="0.1169%" height="15" fill="rgb(232,180,48)" fg:x="60728" fg:w="132"/><text x="54.0168%" y="559.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (132 samples, 0.12%)</title><rect x="53.7668%" y="533" width="0.1169%" height="15" fill="rgb(230,27,33)" fg:x="60728" fg:w="132"/><text x="54.0168%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (132 samples, 0.12%)</title><rect x="53.7668%" y="517" width="0.1169%" height="15" fill="rgb(205,31,21)" fg:x="60728" fg:w="132"/><text x="54.0168%" y="527.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (132 samples, 0.12%)</title><rect x="53.7668%" y="501" width="0.1169%" height="15" fill="rgb(253,59,4)" fg:x="60728" fg:w="132"/><text x="54.0168%" y="511.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (132 samples, 0.12%)</title><rect x="53.7668%" y="485" width="0.1169%" height="15" fill="rgb(224,201,9)" fg:x="60728" fg:w="132"/><text x="54.0168%" y="495.50"></text></g><g><title>[libc-2.31.so] (102 samples, 0.09%)</title><rect x="53.7934%" y="469" width="0.0903%" height="15" fill="rgb(229,206,30)" fg:x="60758" fg:w="102"/><text x="54.0434%" y="479.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (154 samples, 0.14%)</title><rect x="53.7535%" y="597" width="0.1363%" height="15" fill="rgb(212,67,47)" fg:x="60713" fg:w="154"/><text x="54.0035%" y="607.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get_mut (151 samples, 0.13%)</title><rect x="53.7562%" y="581" width="0.1337%" height="15" fill="rgb(211,96,50)" fg:x="60716" fg:w="151"/><text x="54.0062%" y="591.50"></text></g><g><title>async_io::driver::block_on (14,464 samples, 12.81%)</title><rect x="41.1193%" y="949" width="12.8060%" height="15" fill="rgb(252,114,18)" fg:x="46443" fg:w="14464"/><text x="41.3693%" y="959.50">async_io::driver::b..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (14,464 samples, 12.81%)</title><rect x="41.1193%" y="933" width="12.8060%" height="15" fill="rgb(223,58,37)" fg:x="46443" fg:w="14464"/><text x="41.3693%" y="943.50">&lt;futures_lite::futu..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14,464 samples, 12.81%)</title><rect x="41.1193%" y="917" width="12.8060%" height="15" fill="rgb(237,70,4)" fg:x="46443" fg:w="14464"/><text x="41.3693%" y="927.50">&lt;core::future::from..</text></g><g><title>async_executor::Executor::run::{{closure}} (14,464 samples, 12.81%)</title><rect x="41.1193%" y="901" width="12.8060%" height="15" fill="rgb(244,85,46)" fg:x="46443" fg:w="14464"/><text x="41.3693%" y="911.50">async_executor::Exe..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (14,464 samples, 12.81%)</title><rect x="41.1193%" y="885" width="12.8060%" height="15" fill="rgb(223,39,52)" fg:x="46443" fg:w="14464"/><text x="41.3693%" y="895.50">&lt;futures_lite::futu..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14,464 samples, 12.81%)</title><rect x="41.1193%" y="869" width="12.8060%" height="15" fill="rgb(218,200,14)" fg:x="46443" fg:w="14464"/><text x="41.3693%" y="879.50">&lt;core::future::from..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (14,464 samples, 12.81%)</title><rect x="41.1193%" y="853" width="12.8060%" height="15" fill="rgb(208,171,16)" fg:x="46443" fg:w="14464"/><text x="41.3693%" y="863.50">async_executor::Exe..</text></g><g><title>async_task::runnable::Runnable::run (14,464 samples, 12.81%)</title><rect x="41.1193%" y="837" width="12.8060%" height="15" fill="rgb(234,200,18)" fg:x="46443" fg:w="14464"/><text x="41.3693%" y="847.50">async_task::runnabl..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (14,464 samples, 12.81%)</title><rect x="41.1193%" y="821" width="12.8060%" height="15" fill="rgb(228,45,11)" fg:x="46443" fg:w="14464"/><text x="41.3693%" y="831.50">async_task::raw::Ra..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (14,464 samples, 12.81%)</title><rect x="41.1193%" y="805" width="12.8060%" height="15" fill="rgb(237,182,11)" fg:x="46443" fg:w="14464"/><text x="41.3693%" y="815.50">&lt;core::pin::Pin&lt;P&gt; ..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14,464 samples, 12.81%)</title><rect x="41.1193%" y="789" width="12.8060%" height="15" fill="rgb(241,175,49)" fg:x="46443" fg:w="14464"/><text x="41.3693%" y="799.50">&lt;core::future::from..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (14,464 samples, 12.81%)</title><rect x="41.1193%" y="773" width="12.8060%" height="15" fill="rgb(247,38,35)" fg:x="46443" fg:w="14464"/><text x="41.3693%" y="783.50">async_executor::Exe..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (14,464 samples, 12.81%)</title><rect x="41.1193%" y="757" width="12.8060%" height="15" fill="rgb(228,39,49)" fg:x="46443" fg:w="14464"/><text x="41.3693%" y="767.50">&lt;async_std::task::b..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (14,464 samples, 12.81%)</title><rect x="41.1193%" y="741" width="12.8060%" height="15" fill="rgb(226,101,26)" fg:x="46443" fg:w="14464"/><text x="41.3693%" y="751.50">async_std::task::ta..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (14,464 samples, 12.81%)</title><rect x="41.1193%" y="725" width="12.8060%" height="15" fill="rgb(206,141,19)" fg:x="46443" fg:w="14464"/><text x="41.3693%" y="735.50">std::thread::local:..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (14,464 samples, 12.81%)</title><rect x="41.1193%" y="709" width="12.8060%" height="15" fill="rgb(211,200,13)" fg:x="46443" fg:w="14464"/><text x="41.3693%" y="719.50">std::thread::local:..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (14,464 samples, 12.81%)</title><rect x="41.1193%" y="693" width="12.8060%" height="15" fill="rgb(241,121,6)" fg:x="46443" fg:w="14464"/><text x="41.3693%" y="703.50">async_std::task::ta..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (14,464 samples, 12.81%)</title><rect x="41.1193%" y="677" width="12.8060%" height="15" fill="rgb(234,221,29)" fg:x="46443" fg:w="14464"/><text x="41.3693%" y="687.50">&lt;async_std::task::b..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14,464 samples, 12.81%)</title><rect x="41.1193%" y="661" width="12.8060%" height="15" fill="rgb(229,136,5)" fg:x="46443" fg:w="14464"/><text x="41.3693%" y="671.50">&lt;core::future::from..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (3,017 samples, 2.67%)</title><rect x="51.2541%" y="645" width="2.6712%" height="15" fill="rgb(238,36,11)" fg:x="57890" fg:w="3017"/><text x="51.5041%" y="655.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,465 samples, 2.18%)</title><rect x="51.7429%" y="629" width="2.1824%" height="15" fill="rgb(251,55,41)" fg:x="58442" fg:w="2465"/><text x="51.9929%" y="639.50">&lt;..</text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (1,129 samples, 1.00%)</title><rect x="52.9257%" y="613" width="0.9996%" height="15" fill="rgb(242,34,40)" fg:x="59778" fg:w="1129"/><text x="53.1757%" y="623.50"></text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (40 samples, 0.04%)</title><rect x="53.8899%" y="597" width="0.0354%" height="15" fill="rgb(215,42,17)" fg:x="60867" fg:w="40"/><text x="54.1399%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (40 samples, 0.04%)</title><rect x="53.8899%" y="581" width="0.0354%" height="15" fill="rgb(207,44,46)" fg:x="60867" fg:w="40"/><text x="54.1399%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (40 samples, 0.04%)</title><rect x="53.8899%" y="565" width="0.0354%" height="15" fill="rgb(211,206,28)" fg:x="60867" fg:w="40"/><text x="54.1399%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (26 samples, 0.02%)</title><rect x="53.9023%" y="549" width="0.0230%" height="15" fill="rgb(237,167,16)" fg:x="60881" fg:w="26"/><text x="54.1523%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (14 samples, 0.01%)</title><rect x="53.9581%" y="485" width="0.0124%" height="15" fill="rgb(233,66,6)" fg:x="60944" fg:w="14"/><text x="54.2081%" y="495.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="53.9581%" y="469" width="0.0124%" height="15" fill="rgb(246,123,29)" fg:x="60944" fg:w="14"/><text x="54.2081%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (13 samples, 0.01%)</title><rect x="53.9589%" y="453" width="0.0115%" height="15" fill="rgb(209,62,40)" fg:x="60945" fg:w="13"/><text x="54.2089%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (13 samples, 0.01%)</title><rect x="53.9589%" y="437" width="0.0115%" height="15" fill="rgb(218,4,25)" fg:x="60945" fg:w="13"/><text x="54.2089%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (13 samples, 0.01%)</title><rect x="53.9589%" y="421" width="0.0115%" height="15" fill="rgb(253,91,49)" fg:x="60945" fg:w="13"/><text x="54.2089%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_swap (13 samples, 0.01%)</title><rect x="53.9589%" y="405" width="0.0115%" height="15" fill="rgb(228,155,29)" fg:x="60945" fg:w="13"/><text x="54.2089%" y="415.50"></text></g><g><title>parking::Unparker::unpark (15 samples, 0.01%)</title><rect x="53.9837%" y="437" width="0.0133%" height="15" fill="rgb(243,57,37)" fg:x="60973" fg:w="15"/><text x="54.2337%" y="447.50"></text></g><g><title>parking::Inner::unpark (14 samples, 0.01%)</title><rect x="53.9846%" y="421" width="0.0124%" height="15" fill="rgb(244,167,17)" fg:x="60974" fg:w="14"/><text x="54.2346%" y="431.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (28 samples, 0.02%)</title><rect x="53.9740%" y="453" width="0.0248%" height="15" fill="rgb(207,181,38)" fg:x="60962" fg:w="28"/><text x="54.2240%" y="463.50"></text></g><g><title>core::task::wake::Waker::wake (40 samples, 0.04%)</title><rect x="53.9740%" y="485" width="0.0354%" height="15" fill="rgb(211,8,23)" fg:x="60962" fg:w="40"/><text x="54.2240%" y="495.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (40 samples, 0.04%)</title><rect x="53.9740%" y="469" width="0.0354%" height="15" fill="rgb(235,11,44)" fg:x="60962" fg:w="40"/><text x="54.2240%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (12 samples, 0.01%)</title><rect x="53.9988%" y="453" width="0.0106%" height="15" fill="rgb(248,18,52)" fg:x="60990" fg:w="12"/><text x="54.2488%" y="463.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.01%)</title><rect x="53.9988%" y="437" width="0.0106%" height="15" fill="rgb(208,4,7)" fg:x="60990" fg:w="12"/><text x="54.2488%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (12 samples, 0.01%)</title><rect x="53.9988%" y="421" width="0.0106%" height="15" fill="rgb(240,17,39)" fg:x="60990" fg:w="12"/><text x="54.2488%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_sub (12 samples, 0.01%)</title><rect x="53.9988%" y="405" width="0.0106%" height="15" fill="rgb(207,170,3)" fg:x="60990" fg:w="12"/><text x="54.2488%" y="415.50"></text></g><g><title>async_executor::State::notify (71 samples, 0.06%)</title><rect x="53.9554%" y="501" width="0.0629%" height="15" fill="rgb(236,100,52)" fg:x="60941" fg:w="71"/><text x="54.2054%" y="511.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (88 samples, 0.08%)</title><rect x="53.9554%" y="517" width="0.0779%" height="15" fill="rgb(246,78,51)" fg:x="60941" fg:w="88"/><text x="54.2054%" y="527.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (17 samples, 0.02%)</title><rect x="54.0183%" y="501" width="0.0151%" height="15" fill="rgb(211,17,15)" fg:x="61012" fg:w="17"/><text x="54.2683%" y="511.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (15 samples, 0.01%)</title><rect x="54.0200%" y="485" width="0.0133%" height="15" fill="rgb(209,59,46)" fg:x="61014" fg:w="15"/><text x="54.2700%" y="495.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (115 samples, 0.10%)</title><rect x="53.9448%" y="693" width="0.1018%" height="15" fill="rgb(210,92,25)" fg:x="60929" fg:w="115"/><text x="54.1948%" y="703.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::route_events::{{closure}} (115 samples, 0.10%)</title><rect x="53.9448%" y="677" width="0.1018%" height="15" fill="rgb(238,174,52)" fg:x="60929" fg:w="115"/><text x="54.1948%" y="687.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (115 samples, 0.10%)</title><rect x="53.9448%" y="661" width="0.1018%" height="15" fill="rgb(230,73,7)" fg:x="60929" fg:w="115"/><text x="54.1948%" y="671.50"></text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (115 samples, 0.10%)</title><rect x="53.9448%" y="645" width="0.1018%" height="15" fill="rgb(243,124,40)" fg:x="60929" fg:w="115"/><text x="54.1948%" y="655.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (115 samples, 0.10%)</title><rect x="53.9448%" y="629" width="0.1018%" height="15" fill="rgb(244,170,11)" fg:x="60929" fg:w="115"/><text x="54.1948%" y="639.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (115 samples, 0.10%)</title><rect x="53.9448%" y="613" width="0.1018%" height="15" fill="rgb(207,114,54)" fg:x="60929" fg:w="115"/><text x="54.1948%" y="623.50"></text></g><g><title>event_listener::Event::notify (115 samples, 0.10%)</title><rect x="53.9448%" y="597" width="0.1018%" height="15" fill="rgb(205,42,20)" fg:x="60929" fg:w="115"/><text x="54.1948%" y="607.50"></text></g><g><title>event_listener::List::notify (113 samples, 0.10%)</title><rect x="53.9465%" y="581" width="0.1000%" height="15" fill="rgb(230,30,28)" fg:x="60931" fg:w="113"/><text x="54.1965%" y="591.50"></text></g><g><title>core::task::wake::Waker::wake (111 samples, 0.10%)</title><rect x="53.9483%" y="565" width="0.0983%" height="15" fill="rgb(205,73,54)" fg:x="60933" fg:w="111"/><text x="54.1983%" y="575.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (111 samples, 0.10%)</title><rect x="53.9483%" y="549" width="0.0983%" height="15" fill="rgb(254,227,23)" fg:x="60933" fg:w="111"/><text x="54.1983%" y="559.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (104 samples, 0.09%)</title><rect x="53.9545%" y="533" width="0.0921%" height="15" fill="rgb(228,202,34)" fg:x="60940" fg:w="104"/><text x="54.2045%" y="543.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.02%)</title><rect x="54.5787%" y="677" width="0.0221%" height="15" fill="rgb(222,225,37)" fg:x="61645" fg:w="25"/><text x="54.8287%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (81 samples, 0.07%)</title><rect x="54.7372%" y="581" width="0.0717%" height="15" fill="rgb(221,14,54)" fg:x="61824" fg:w="81"/><text x="54.9872%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (81 samples, 0.07%)</title><rect x="54.7372%" y="565" width="0.0717%" height="15" fill="rgb(254,102,2)" fg:x="61824" fg:w="81"/><text x="54.9872%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (81 samples, 0.07%)</title><rect x="54.7372%" y="549" width="0.0717%" height="15" fill="rgb(232,104,17)" fg:x="61824" fg:w="81"/><text x="54.9872%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (80 samples, 0.07%)</title><rect x="54.7381%" y="533" width="0.0708%" height="15" fill="rgb(250,220,14)" fg:x="61825" fg:w="80"/><text x="54.9881%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (80 samples, 0.07%)</title><rect x="54.7381%" y="517" width="0.0708%" height="15" fill="rgb(241,158,9)" fg:x="61825" fg:w="80"/><text x="54.9881%" y="527.50"></text></g><g><title>alloc::alloc::alloc (80 samples, 0.07%)</title><rect x="54.7381%" y="501" width="0.0708%" height="15" fill="rgb(246,9,43)" fg:x="61825" fg:w="80"/><text x="54.9881%" y="511.50"></text></g><g><title>__rg_alloc (80 samples, 0.07%)</title><rect x="54.7381%" y="485" width="0.0708%" height="15" fill="rgb(206,73,33)" fg:x="61825" fg:w="80"/><text x="54.9881%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (80 samples, 0.07%)</title><rect x="54.7381%" y="469" width="0.0708%" height="15" fill="rgb(222,79,8)" fg:x="61825" fg:w="80"/><text x="54.9881%" y="479.50"></text></g><g><title>sn_rust_alloc (73 samples, 0.06%)</title><rect x="54.7443%" y="453" width="0.0646%" height="15" fill="rgb(234,8,54)" fg:x="61832" fg:w="73"/><text x="54.9943%" y="463.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (19 samples, 0.02%)</title><rect x="54.7921%" y="437" width="0.0168%" height="15" fill="rgb(209,134,38)" fg:x="61886" fg:w="19"/><text x="55.0421%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (136 samples, 0.12%)</title><rect x="54.7239%" y="661" width="0.1204%" height="15" fill="rgb(230,127,29)" fg:x="61809" fg:w="136"/><text x="54.9739%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (121 samples, 0.11%)</title><rect x="54.7372%" y="645" width="0.1071%" height="15" fill="rgb(242,44,41)" fg:x="61824" fg:w="121"/><text x="54.9872%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (121 samples, 0.11%)</title><rect x="54.7372%" y="629" width="0.1071%" height="15" fill="rgb(222,56,43)" fg:x="61824" fg:w="121"/><text x="54.9872%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (121 samples, 0.11%)</title><rect x="54.7372%" y="613" width="0.1071%" height="15" fill="rgb(238,39,47)" fg:x="61824" fg:w="121"/><text x="54.9872%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (121 samples, 0.11%)</title><rect x="54.7372%" y="597" width="0.1071%" height="15" fill="rgb(226,79,43)" fg:x="61824" fg:w="121"/><text x="54.9872%" y="607.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (40 samples, 0.04%)</title><rect x="54.8089%" y="581" width="0.0354%" height="15" fill="rgb(242,105,53)" fg:x="61905" fg:w="40"/><text x="55.0589%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (40 samples, 0.04%)</title><rect x="54.8089%" y="565" width="0.0354%" height="15" fill="rgb(251,132,46)" fg:x="61905" fg:w="40"/><text x="55.0589%" y="575.50"></text></g><g><title>[libc-2.31.so] (29 samples, 0.03%)</title><rect x="54.8186%" y="549" width="0.0257%" height="15" fill="rgb(231,77,14)" fg:x="61916" fg:w="29"/><text x="55.0686%" y="559.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (35 samples, 0.03%)</title><rect x="54.8656%" y="373" width="0.0310%" height="15" fill="rgb(240,135,9)" fg:x="61969" fg:w="35"/><text x="55.1156%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (57 samples, 0.05%)</title><rect x="54.8470%" y="517" width="0.0505%" height="15" fill="rgb(248,109,14)" fg:x="61948" fg:w="57"/><text x="55.0970%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (57 samples, 0.05%)</title><rect x="54.8470%" y="501" width="0.0505%" height="15" fill="rgb(227,146,52)" fg:x="61948" fg:w="57"/><text x="55.0970%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (57 samples, 0.05%)</title><rect x="54.8470%" y="485" width="0.0505%" height="15" fill="rgb(232,54,3)" fg:x="61948" fg:w="57"/><text x="55.0970%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (54 samples, 0.05%)</title><rect x="54.8496%" y="469" width="0.0478%" height="15" fill="rgb(229,201,43)" fg:x="61951" fg:w="54"/><text x="55.0996%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (54 samples, 0.05%)</title><rect x="54.8496%" y="453" width="0.0478%" height="15" fill="rgb(252,161,33)" fg:x="61951" fg:w="54"/><text x="55.0996%" y="463.50"></text></g><g><title>alloc::alloc::alloc (54 samples, 0.05%)</title><rect x="54.8496%" y="437" width="0.0478%" height="15" fill="rgb(226,146,40)" fg:x="61951" fg:w="54"/><text x="55.0996%" y="447.50"></text></g><g><title>__rg_alloc (54 samples, 0.05%)</title><rect x="54.8496%" y="421" width="0.0478%" height="15" fill="rgb(219,47,25)" fg:x="61951" fg:w="54"/><text x="55.0996%" y="431.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (54 samples, 0.05%)</title><rect x="54.8496%" y="405" width="0.0478%" height="15" fill="rgb(250,135,13)" fg:x="61951" fg:w="54"/><text x="55.0996%" y="415.50"></text></g><g><title>sn_rust_alloc (52 samples, 0.05%)</title><rect x="54.8514%" y="389" width="0.0460%" height="15" fill="rgb(219,229,18)" fg:x="61953" fg:w="52"/><text x="55.1014%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (83 samples, 0.07%)</title><rect x="54.8470%" y="597" width="0.0735%" height="15" fill="rgb(217,152,27)" fg:x="61948" fg:w="83"/><text x="55.0970%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (83 samples, 0.07%)</title><rect x="54.8470%" y="581" width="0.0735%" height="15" fill="rgb(225,71,47)" fg:x="61948" fg:w="83"/><text x="55.0970%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (83 samples, 0.07%)</title><rect x="54.8470%" y="565" width="0.0735%" height="15" fill="rgb(220,139,14)" fg:x="61948" fg:w="83"/><text x="55.0970%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (83 samples, 0.07%)</title><rect x="54.8470%" y="549" width="0.0735%" height="15" fill="rgb(247,54,32)" fg:x="61948" fg:w="83"/><text x="55.0970%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (83 samples, 0.07%)</title><rect x="54.8470%" y="533" width="0.0735%" height="15" fill="rgb(252,131,39)" fg:x="61948" fg:w="83"/><text x="55.0970%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (26 samples, 0.02%)</title><rect x="54.8974%" y="517" width="0.0230%" height="15" fill="rgb(210,108,39)" fg:x="62005" fg:w="26"/><text x="55.1474%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (26 samples, 0.02%)</title><rect x="54.8974%" y="501" width="0.0230%" height="15" fill="rgb(205,23,29)" fg:x="62005" fg:w="26"/><text x="55.1474%" y="511.50"></text></g><g><title>[libc-2.31.so] (20 samples, 0.02%)</title><rect x="54.9027%" y="485" width="0.0177%" height="15" fill="rgb(246,139,46)" fg:x="62011" fg:w="20"/><text x="55.1527%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="54.9204%" y="597" width="0.0115%" height="15" fill="rgb(250,81,26)" fg:x="62031" fg:w="13"/><text x="55.1704%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (47 samples, 0.04%)</title><rect x="54.9444%" y="549" width="0.0416%" height="15" fill="rgb(214,104,7)" fg:x="62058" fg:w="47"/><text x="55.1944%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (47 samples, 0.04%)</title><rect x="54.9444%" y="533" width="0.0416%" height="15" fill="rgb(233,189,8)" fg:x="62058" fg:w="47"/><text x="55.1944%" y="543.50"></text></g><g><title>alloc::alloc::alloc (46 samples, 0.04%)</title><rect x="54.9452%" y="517" width="0.0407%" height="15" fill="rgb(228,141,17)" fg:x="62059" fg:w="46"/><text x="55.1952%" y="527.50"></text></g><g><title>__rg_alloc (46 samples, 0.04%)</title><rect x="54.9452%" y="501" width="0.0407%" height="15" fill="rgb(247,157,1)" fg:x="62059" fg:w="46"/><text x="55.1952%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (46 samples, 0.04%)</title><rect x="54.9452%" y="485" width="0.0407%" height="15" fill="rgb(249,225,5)" fg:x="62059" fg:w="46"/><text x="55.1952%" y="495.50"></text></g><g><title>sn_rust_alloc (46 samples, 0.04%)</title><rect x="54.9452%" y="469" width="0.0407%" height="15" fill="rgb(242,55,13)" fg:x="62059" fg:w="46"/><text x="55.1952%" y="479.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (22 samples, 0.02%)</title><rect x="54.9665%" y="453" width="0.0195%" height="15" fill="rgb(230,49,50)" fg:x="62083" fg:w="22"/><text x="55.2165%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (66 samples, 0.06%)</title><rect x="54.9320%" y="597" width="0.0584%" height="15" fill="rgb(241,111,38)" fg:x="62044" fg:w="66"/><text x="55.1820%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (59 samples, 0.05%)</title><rect x="54.9382%" y="581" width="0.0522%" height="15" fill="rgb(252,155,4)" fg:x="62051" fg:w="59"/><text x="55.1882%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (59 samples, 0.05%)</title><rect x="54.9382%" y="565" width="0.0522%" height="15" fill="rgb(212,69,32)" fg:x="62051" fg:w="59"/><text x="55.1882%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (167 samples, 0.15%)</title><rect x="54.8443%" y="661" width="0.1479%" height="15" fill="rgb(243,107,47)" fg:x="61945" fg:w="167"/><text x="55.0943%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (167 samples, 0.15%)</title><rect x="54.8443%" y="645" width="0.1479%" height="15" fill="rgb(247,130,12)" fg:x="61945" fg:w="167"/><text x="55.0943%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (167 samples, 0.15%)</title><rect x="54.8443%" y="629" width="0.1479%" height="15" fill="rgb(233,74,16)" fg:x="61945" fg:w="167"/><text x="55.0943%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (167 samples, 0.15%)</title><rect x="54.8443%" y="613" width="0.1479%" height="15" fill="rgb(208,58,18)" fg:x="61945" fg:w="167"/><text x="55.0943%" y="623.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (443 samples, 0.39%)</title><rect x="54.6061%" y="677" width="0.3922%" height="15" fill="rgb(242,225,1)" fg:x="61676" fg:w="443"/><text x="54.8561%" y="687.50"></text></g><g><title>[libc-2.31.so] (54 samples, 0.05%)</title><rect x="54.9984%" y="677" width="0.0478%" height="15" fill="rgb(249,39,40)" fg:x="62119" fg:w="54"/><text x="55.2484%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (179 samples, 0.16%)</title><rect x="55.0506%" y="677" width="0.1585%" height="15" fill="rgb(207,72,44)" fg:x="62178" fg:w="179"/><text x="55.3006%" y="687.50"></text></g><g><title>core::ptr::write (168 samples, 0.15%)</title><rect x="55.0603%" y="661" width="0.1487%" height="15" fill="rgb(215,193,12)" fg:x="62189" fg:w="168"/><text x="55.3103%" y="671.50"></text></g><g><title>[libc-2.31.so] (168 samples, 0.15%)</title><rect x="55.0603%" y="645" width="0.1487%" height="15" fill="rgb(248,41,39)" fg:x="62189" fg:w="168"/><text x="55.3103%" y="655.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (442 samples, 0.39%)</title><rect x="55.2560%" y="517" width="0.3913%" height="15" fill="rgb(253,85,4)" fg:x="62410" fg:w="442"/><text x="55.5060%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (481 samples, 0.43%)</title><rect x="55.2259%" y="613" width="0.4259%" height="15" fill="rgb(243,70,31)" fg:x="62376" fg:w="481"/><text x="55.4759%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (481 samples, 0.43%)</title><rect x="55.2259%" y="597" width="0.4259%" height="15" fill="rgb(253,195,26)" fg:x="62376" fg:w="481"/><text x="55.4759%" y="607.50"></text></g><g><title>alloc::alloc::alloc (481 samples, 0.43%)</title><rect x="55.2259%" y="581" width="0.4259%" height="15" fill="rgb(243,42,11)" fg:x="62376" fg:w="481"/><text x="55.4759%" y="591.50"></text></g><g><title>__rg_alloc (481 samples, 0.43%)</title><rect x="55.2259%" y="565" width="0.4259%" height="15" fill="rgb(239,66,17)" fg:x="62376" fg:w="481"/><text x="55.4759%" y="575.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (481 samples, 0.43%)</title><rect x="55.2259%" y="549" width="0.4259%" height="15" fill="rgb(217,132,21)" fg:x="62376" fg:w="481"/><text x="55.4759%" y="559.50"></text></g><g><title>sn_rust_alloc (479 samples, 0.42%)</title><rect x="55.2277%" y="533" width="0.4241%" height="15" fill="rgb(252,202,21)" fg:x="62378" fg:w="479"/><text x="55.4777%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (506 samples, 0.45%)</title><rect x="55.2091%" y="677" width="0.4480%" height="15" fill="rgb(233,98,36)" fg:x="62357" fg:w="506"/><text x="55.4591%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (506 samples, 0.45%)</title><rect x="55.2091%" y="661" width="0.4480%" height="15" fill="rgb(216,153,54)" fg:x="62357" fg:w="506"/><text x="55.4591%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (497 samples, 0.44%)</title><rect x="55.2170%" y="645" width="0.4400%" height="15" fill="rgb(250,99,7)" fg:x="62366" fg:w="497"/><text x="55.4670%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (497 samples, 0.44%)</title><rect x="55.2170%" y="629" width="0.4400%" height="15" fill="rgb(207,56,50)" fg:x="62366" fg:w="497"/><text x="55.4670%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (31 samples, 0.03%)</title><rect x="55.6606%" y="581" width="0.0274%" height="15" fill="rgb(244,61,34)" fg:x="62867" fg:w="31"/><text x="55.9106%" y="591.50"></text></g><g><title>alloc::alloc::dealloc (31 samples, 0.03%)</title><rect x="55.6606%" y="565" width="0.0274%" height="15" fill="rgb(241,50,38)" fg:x="62867" fg:w="31"/><text x="55.9106%" y="575.50"></text></g><g><title>__rg_dealloc (31 samples, 0.03%)</title><rect x="55.6606%" y="549" width="0.0274%" height="15" fill="rgb(212,166,30)" fg:x="62867" fg:w="31"/><text x="55.9106%" y="559.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (31 samples, 0.03%)</title><rect x="55.6606%" y="533" width="0.0274%" height="15" fill="rgb(249,127,32)" fg:x="62867" fg:w="31"/><text x="55.9106%" y="543.50"></text></g><g><title>sn_rust_dealloc (26 samples, 0.02%)</title><rect x="55.6650%" y="517" width="0.0230%" height="15" fill="rgb(209,103,0)" fg:x="62872" fg:w="26"/><text x="55.9150%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (40 samples, 0.04%)</title><rect x="55.6571%" y="677" width="0.0354%" height="15" fill="rgb(238,209,51)" fg:x="62863" fg:w="40"/><text x="55.9071%" y="687.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 0.04%)</title><rect x="55.6571%" y="661" width="0.0354%" height="15" fill="rgb(237,56,23)" fg:x="62863" fg:w="40"/><text x="55.9071%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (36 samples, 0.03%)</title><rect x="55.6606%" y="645" width="0.0319%" height="15" fill="rgb(215,153,46)" fg:x="62867" fg:w="36"/><text x="55.9106%" y="655.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (36 samples, 0.03%)</title><rect x="55.6606%" y="629" width="0.0319%" height="15" fill="rgb(224,49,31)" fg:x="62867" fg:w="36"/><text x="55.9106%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (36 samples, 0.03%)</title><rect x="55.6606%" y="613" width="0.0319%" height="15" fill="rgb(250,18,42)" fg:x="62867" fg:w="36"/><text x="55.9106%" y="623.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (36 samples, 0.03%)</title><rect x="55.6606%" y="597" width="0.0319%" height="15" fill="rgb(215,176,39)" fg:x="62867" fg:w="36"/><text x="55.9106%" y="607.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (21 samples, 0.02%)</title><rect x="55.6925%" y="677" width="0.0186%" height="15" fill="rgb(223,77,29)" fg:x="62903" fg:w="21"/><text x="55.9425%" y="687.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::run::{{closure}} (2,001 samples, 1.77%)</title><rect x="53.9448%" y="773" width="1.7716%" height="15" fill="rgb(234,94,52)" fg:x="60929" fg:w="2001"/><text x="54.1948%" y="783.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,001 samples, 1.77%)</title><rect x="53.9448%" y="757" width="1.7716%" height="15" fill="rgb(220,154,50)" fg:x="60929" fg:w="2001"/><text x="54.1948%" y="767.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_source_reply::{{closure}} (2,001 samples, 1.77%)</title><rect x="53.9448%" y="741" width="1.7716%" height="15" fill="rgb(212,11,10)" fg:x="60929" fg:w="2001"/><text x="54.1948%" y="751.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,001 samples, 1.77%)</title><rect x="53.9448%" y="725" width="1.7716%" height="15" fill="rgb(205,166,19)" fg:x="60929" fg:w="2001"/><text x="54.1948%" y="735.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_data::{{closure}} (2,001 samples, 1.77%)</title><rect x="53.9448%" y="709" width="1.7716%" height="15" fill="rgb(244,198,16)" fg:x="60929" fg:w="2001"/><text x="54.1948%" y="719.50">t..</text></g><g><title>tremor_runtime::connectors::source::build_events (1,886 samples, 1.67%)</title><rect x="54.0466%" y="693" width="1.6698%" height="15" fill="rgb(219,69,12)" fg:x="61044" fg:w="1886"/><text x="54.2966%" y="703.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (119 samples, 0.11%)</title><rect x="55.7863%" y="645" width="0.1054%" height="15" fill="rgb(245,30,7)" fg:x="63009" fg:w="119"/><text x="56.0363%" y="655.50"></text></g><g><title>core::mem::replace (119 samples, 0.11%)</title><rect x="55.7863%" y="629" width="0.1054%" height="15" fill="rgb(218,221,48)" fg:x="63009" fg:w="119"/><text x="56.0363%" y="639.50"></text></g><g><title>core::ptr::read (119 samples, 0.11%)</title><rect x="55.7863%" y="613" width="0.1054%" height="15" fill="rgb(216,66,15)" fg:x="63009" fg:w="119"/><text x="56.0363%" y="623.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (168 samples, 0.15%)</title><rect x="55.7633%" y="661" width="0.1487%" height="15" fill="rgb(226,122,50)" fg:x="62983" fg:w="168"/><text x="56.0133%" y="671.50"></text></g><g><title>core::mem::drop (23 samples, 0.02%)</title><rect x="55.8917%" y="645" width="0.0204%" height="15" fill="rgb(239,156,16)" fg:x="63128" fg:w="23"/><text x="56.1417%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (23 samples, 0.02%)</title><rect x="55.8917%" y="629" width="0.0204%" height="15" fill="rgb(224,27,38)" fg:x="63128" fg:w="23"/><text x="56.1417%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (132 samples, 0.12%)</title><rect x="55.9121%" y="661" width="0.1169%" height="15" fill="rgb(224,39,27)" fg:x="63151" fg:w="132"/><text x="56.1621%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (130 samples, 0.12%)</title><rect x="55.9138%" y="645" width="0.1151%" height="15" fill="rgb(215,92,29)" fg:x="63153" fg:w="130"/><text x="56.1638%" y="655.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (130 samples, 0.12%)</title><rect x="55.9138%" y="629" width="0.1151%" height="15" fill="rgb(207,159,16)" fg:x="63153" fg:w="130"/><text x="56.1638%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (118 samples, 0.10%)</title><rect x="55.9245%" y="613" width="0.1045%" height="15" fill="rgb(238,163,47)" fg:x="63165" fg:w="118"/><text x="56.1745%" y="623.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (118 samples, 0.10%)</title><rect x="55.9245%" y="597" width="0.1045%" height="15" fill="rgb(219,91,49)" fg:x="63165" fg:w="118"/><text x="56.1745%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (118 samples, 0.10%)</title><rect x="55.9245%" y="581" width="0.1045%" height="15" fill="rgb(227,167,31)" fg:x="63165" fg:w="118"/><text x="56.1745%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_swap (118 samples, 0.10%)</title><rect x="55.9245%" y="565" width="0.1045%" height="15" fill="rgb(234,80,54)" fg:x="63165" fg:w="118"/><text x="56.1745%" y="575.50"></text></g><g><title>core::task::wake::Waker::will_wake (13 samples, 0.01%)</title><rect x="56.0316%" y="661" width="0.0115%" height="15" fill="rgb(212,114,2)" fg:x="63286" fg:w="13"/><text x="56.2816%" y="671.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (13 samples, 0.01%)</title><rect x="56.0316%" y="645" width="0.0115%" height="15" fill="rgb(234,50,24)" fg:x="63286" fg:w="13"/><text x="56.2816%" y="655.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (13 samples, 0.01%)</title><rect x="56.0316%" y="629" width="0.0115%" height="15" fill="rgb(221,68,8)" fg:x="63286" fg:w="13"/><text x="56.2816%" y="639.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (13 samples, 0.01%)</title><rect x="56.0316%" y="613" width="0.0115%" height="15" fill="rgb(254,180,31)" fg:x="63286" fg:w="13"/><text x="56.2816%" y="623.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (13 samples, 0.01%)</title><rect x="56.0484%" y="629" width="0.0115%" height="15" fill="rgb(247,130,50)" fg:x="63305" fg:w="13"/><text x="56.2984%" y="639.50"></text></g><g><title>std::sync::poison::Flag::borrow (13 samples, 0.01%)</title><rect x="56.0484%" y="613" width="0.0115%" height="15" fill="rgb(211,109,4)" fg:x="63305" fg:w="13"/><text x="56.2984%" y="623.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (1,147 samples, 1.02%)</title><rect x="55.7279%" y="677" width="1.0155%" height="15" fill="rgb(238,50,21)" fg:x="62943" fg:w="1147"/><text x="55.9779%" y="687.50"></text></g><g><title>event_listener::Inner::lock (791 samples, 0.70%)</title><rect x="56.0431%" y="661" width="0.7003%" height="15" fill="rgb(225,57,45)" fg:x="63299" fg:w="791"/><text x="56.2931%" y="671.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (785 samples, 0.70%)</title><rect x="56.0484%" y="645" width="0.6950%" height="15" fill="rgb(209,196,50)" fg:x="63305" fg:w="785"/><text x="56.2984%" y="655.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (772 samples, 0.68%)</title><rect x="56.0599%" y="629" width="0.6835%" height="15" fill="rgb(242,140,13)" fg:x="63318" fg:w="772"/><text x="56.3099%" y="639.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (772 samples, 0.68%)</title><rect x="56.0599%" y="613" width="0.6835%" height="15" fill="rgb(217,111,7)" fg:x="63318" fg:w="772"/><text x="56.3099%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (772 samples, 0.68%)</title><rect x="56.0599%" y="597" width="0.6835%" height="15" fill="rgb(253,193,51)" fg:x="63318" fg:w="772"/><text x="56.3099%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (772 samples, 0.68%)</title><rect x="56.0599%" y="581" width="0.6835%" height="15" fill="rgb(252,70,29)" fg:x="63318" fg:w="772"/><text x="56.3099%" y="591.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,166 samples, 1.03%)</title><rect x="55.7164%" y="757" width="1.0323%" height="15" fill="rgb(232,127,12)" fg:x="62930" fg:w="1166"/><text x="55.9664%" y="767.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (1,166 samples, 1.03%)</title><rect x="55.7164%" y="741" width="1.0323%" height="15" fill="rgb(211,180,21)" fg:x="62930" fg:w="1166"/><text x="55.9664%" y="751.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (1,166 samples, 1.03%)</title><rect x="55.7164%" y="725" width="1.0323%" height="15" fill="rgb(229,72,13)" fg:x="62930" fg:w="1166"/><text x="55.9664%" y="735.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (1,166 samples, 1.03%)</title><rect x="55.7164%" y="709" width="1.0323%" height="15" fill="rgb(240,211,49)" fg:x="62930" fg:w="1166"/><text x="55.9664%" y="719.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (1,166 samples, 1.03%)</title><rect x="55.7164%" y="693" width="1.0323%" height="15" fill="rgb(219,149,40)" fg:x="62930" fg:w="1166"/><text x="55.9664%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="57.1773%" y="597" width="0.0133%" height="15" fill="rgb(210,127,46)" fg:x="64580" fg:w="15"/><text x="57.4273%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)]&gt; (15 samples, 0.01%)</title><rect x="57.1773%" y="581" width="0.0133%" height="15" fill="rgb(220,106,7)" fg:x="64580" fg:w="15"/><text x="57.4273%" y="591.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (364 samples, 0.32%)</title><rect x="56.8709%" y="629" width="0.3223%" height="15" fill="rgb(249,31,22)" fg:x="64234" fg:w="364"/><text x="57.1209%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (18 samples, 0.02%)</title><rect x="57.1773%" y="613" width="0.0159%" height="15" fill="rgb(253,1,49)" fg:x="64580" fg:w="18"/><text x="57.4273%" y="623.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;tremor_pipeline::event::Event&gt;&gt;::from (33 samples, 0.03%)</title><rect x="57.1932%" y="629" width="0.0292%" height="15" fill="rgb(227,144,33)" fg:x="64598" fg:w="33"/><text x="57.4432%" y="639.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (410 samples, 0.36%)</title><rect x="56.8630%" y="645" width="0.3630%" height="15" fill="rgb(249,163,44)" fg:x="64225" fg:w="410"/><text x="57.1130%" y="655.50"></text></g><g><title>[libc-2.31.so] (298 samples, 0.26%)</title><rect x="57.2260%" y="645" width="0.2638%" height="15" fill="rgb(234,15,39)" fg:x="64635" fg:w="298"/><text x="57.4760%" y="655.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (60 samples, 0.05%)</title><rect x="57.5288%" y="533" width="0.0531%" height="15" fill="rgb(207,66,16)" fg:x="64977" fg:w="60"/><text x="57.7788%" y="543.50"></text></g><g><title>alloc::alloc::exchange_malloc (109 samples, 0.10%)</title><rect x="57.4898%" y="645" width="0.0965%" height="15" fill="rgb(233,112,24)" fg:x="64933" fg:w="109"/><text x="57.7398%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (109 samples, 0.10%)</title><rect x="57.4898%" y="629" width="0.0965%" height="15" fill="rgb(230,90,22)" fg:x="64933" fg:w="109"/><text x="57.7398%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (109 samples, 0.10%)</title><rect x="57.4898%" y="613" width="0.0965%" height="15" fill="rgb(229,61,13)" fg:x="64933" fg:w="109"/><text x="57.7398%" y="623.50"></text></g><g><title>alloc::alloc::alloc (109 samples, 0.10%)</title><rect x="57.4898%" y="597" width="0.0965%" height="15" fill="rgb(225,57,24)" fg:x="64933" fg:w="109"/><text x="57.7398%" y="607.50"></text></g><g><title>__rg_alloc (109 samples, 0.10%)</title><rect x="57.4898%" y="581" width="0.0965%" height="15" fill="rgb(208,169,48)" fg:x="64933" fg:w="109"/><text x="57.7398%" y="591.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (109 samples, 0.10%)</title><rect x="57.4898%" y="565" width="0.0965%" height="15" fill="rgb(244,218,51)" fg:x="64933" fg:w="109"/><text x="57.7398%" y="575.50"></text></g><g><title>sn_rust_alloc (106 samples, 0.09%)</title><rect x="57.4925%" y="549" width="0.0938%" height="15" fill="rgb(214,148,10)" fg:x="64936" fg:w="106"/><text x="57.7425%" y="559.50"></text></g><g><title>alloc::str::&lt;impl core::borrow::Borrow&lt;str&gt; for alloc::string::String&gt;::borrow (15 samples, 0.01%)</title><rect x="57.6244%" y="549" width="0.0133%" height="15" fill="rgb(225,174,27)" fg:x="65085" fg:w="15"/><text x="57.8744%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;core::ops::range::RangeFull&gt;&gt;::index (15 samples, 0.01%)</title><rect x="57.6244%" y="533" width="0.0133%" height="15" fill="rgb(230,96,26)" fg:x="65085" fg:w="15"/><text x="57.8744%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (15 samples, 0.01%)</title><rect x="57.6244%" y="517" width="0.0133%" height="15" fill="rgb(232,10,30)" fg:x="65085" fg:w="15"/><text x="57.8744%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (15 samples, 0.01%)</title><rect x="57.6244%" y="501" width="0.0133%" height="15" fill="rgb(222,8,50)" fg:x="65085" fg:w="15"/><text x="57.8744%" y="511.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (276 samples, 0.24%)</title><rect x="57.6031%" y="645" width="0.2444%" height="15" fill="rgb(213,81,27)" fg:x="65061" fg:w="276"/><text x="57.8531%" y="655.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (270 samples, 0.24%)</title><rect x="57.6084%" y="629" width="0.2391%" height="15" fill="rgb(245,50,10)" fg:x="65067" fg:w="270"/><text x="57.8584%" y="639.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (270 samples, 0.24%)</title><rect x="57.6084%" y="613" width="0.2391%" height="15" fill="rgb(216,100,18)" fg:x="65067" fg:w="270"/><text x="57.8584%" y="623.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_hash (270 samples, 0.24%)</title><rect x="57.6084%" y="597" width="0.2391%" height="15" fill="rgb(236,147,54)" fg:x="65067" fg:w="270"/><text x="57.8584%" y="607.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::search (270 samples, 0.24%)</title><rect x="57.6084%" y="581" width="0.2391%" height="15" fill="rgb(205,143,26)" fg:x="65067" fg:w="270"/><text x="57.8584%" y="591.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (252 samples, 0.22%)</title><rect x="57.6244%" y="565" width="0.2231%" height="15" fill="rgb(236,26,9)" fg:x="65085" fg:w="252"/><text x="57.8744%" y="575.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (237 samples, 0.21%)</title><rect x="57.6377%" y="549" width="0.2098%" height="15" fill="rgb(221,165,53)" fg:x="65100" fg:w="237"/><text x="57.8877%" y="559.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (237 samples, 0.21%)</title><rect x="57.6377%" y="533" width="0.2098%" height="15" fill="rgb(214,110,17)" fg:x="65100" fg:w="237"/><text x="57.8877%" y="543.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (237 samples, 0.21%)</title><rect x="57.6377%" y="517" width="0.2098%" height="15" fill="rgb(237,197,12)" fg:x="65100" fg:w="237"/><text x="57.8877%" y="527.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (237 samples, 0.21%)</title><rect x="57.6377%" y="501" width="0.2098%" height="15" fill="rgb(205,84,17)" fg:x="65100" fg:w="237"/><text x="57.8877%" y="511.50"></text></g><g><title>[libc-2.31.so] (180 samples, 0.16%)</title><rect x="57.6881%" y="485" width="0.1594%" height="15" fill="rgb(237,18,45)" fg:x="65157" fg:w="180"/><text x="57.9381%" y="495.50"></text></g><g><title>ahash::operations::folded_multiply (25 samples, 0.02%)</title><rect x="57.8537%" y="565" width="0.0221%" height="15" fill="rgb(221,87,14)" fg:x="65344" fg:w="25"/><text x="58.1037%" y="575.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (13 samples, 0.01%)</title><rect x="57.8643%" y="549" width="0.0115%" height="15" fill="rgb(238,186,15)" fg:x="65356" fg:w="13"/><text x="58.1143%" y="559.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (34 samples, 0.03%)</title><rect x="57.8537%" y="581" width="0.0301%" height="15" fill="rgb(208,115,11)" fg:x="65344" fg:w="34"/><text x="58.1037%" y="591.50"></text></g><g><title>ahash::operations::folded_multiply (24 samples, 0.02%)</title><rect x="57.9139%" y="501" width="0.0212%" height="15" fill="rgb(254,175,0)" fg:x="65412" fg:w="24"/><text x="58.1639%" y="511.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (20 samples, 0.02%)</title><rect x="57.9174%" y="485" width="0.0177%" height="15" fill="rgb(227,24,42)" fg:x="65416" fg:w="20"/><text x="58.1674%" y="495.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (33 samples, 0.03%)</title><rect x="57.9068%" y="517" width="0.0292%" height="15" fill="rgb(223,211,37)" fg:x="65404" fg:w="33"/><text x="58.1568%" y="527.50"></text></g><g><title>ahash::operations::read_small (14 samples, 0.01%)</title><rect x="57.9360%" y="517" width="0.0124%" height="15" fill="rgb(235,49,27)" fg:x="65437" fg:w="14"/><text x="58.1860%" y="527.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (67 samples, 0.06%)</title><rect x="57.8918%" y="533" width="0.0593%" height="15" fill="rgb(254,97,51)" fg:x="65387" fg:w="67"/><text x="58.1418%" y="543.50"></text></g><g><title>hashbrown::map::make_hash (134 samples, 0.12%)</title><rect x="57.8501%" y="597" width="0.1186%" height="15" fill="rgb(249,51,40)" fg:x="65340" fg:w="134"/><text x="58.1001%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (90 samples, 0.08%)</title><rect x="57.8891%" y="581" width="0.0797%" height="15" fill="rgb(210,128,45)" fg:x="65384" fg:w="90"/><text x="58.1391%" y="591.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (87 samples, 0.08%)</title><rect x="57.8918%" y="565" width="0.0770%" height="15" fill="rgb(224,137,50)" fg:x="65387" fg:w="87"/><text x="58.1418%" y="575.50"></text></g><g><title>core::hash::Hasher::write_str (87 samples, 0.08%)</title><rect x="57.8918%" y="549" width="0.0770%" height="15" fill="rgb(242,15,9)" fg:x="65387" fg:w="87"/><text x="58.1418%" y="559.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u8 (20 samples, 0.02%)</title><rect x="57.9511%" y="533" width="0.0177%" height="15" fill="rgb(233,187,41)" fg:x="65454" fg:w="20"/><text x="58.2011%" y="543.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (20 samples, 0.02%)</title><rect x="57.9511%" y="517" width="0.0177%" height="15" fill="rgb(227,2,29)" fg:x="65454" fg:w="20"/><text x="58.2011%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.02%)</title><rect x="57.9989%" y="549" width="0.0248%" height="15" fill="rgb(222,70,3)" fg:x="65508" fg:w="28"/><text x="58.2489%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 0.03%)</title><rect x="57.9989%" y="565" width="0.0319%" height="15" fill="rgb(213,11,42)" fg:x="65508" fg:w="36"/><text x="58.2489%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;core::ops::range::RangeFull&gt;&gt;::index (20 samples, 0.02%)</title><rect x="58.0308%" y="533" width="0.0177%" height="15" fill="rgb(225,150,9)" fg:x="65544" fg:w="20"/><text x="58.2808%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (20 samples, 0.02%)</title><rect x="58.0308%" y="517" width="0.0177%" height="15" fill="rgb(230,162,45)" fg:x="65544" fg:w="20"/><text x="58.2808%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (20 samples, 0.02%)</title><rect x="58.0308%" y="501" width="0.0177%" height="15" fill="rgb(222,14,52)" fg:x="65544" fg:w="20"/><text x="58.2808%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (171 samples, 0.15%)</title><rect x="58.0308%" y="549" width="0.1514%" height="15" fill="rgb(254,198,14)" fg:x="65544" fg:w="171"/><text x="58.2808%" y="559.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (151 samples, 0.13%)</title><rect x="58.0485%" y="533" width="0.1337%" height="15" fill="rgb(220,217,30)" fg:x="65564" fg:w="151"/><text x="58.2985%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (151 samples, 0.13%)</title><rect x="58.0485%" y="517" width="0.1337%" height="15" fill="rgb(215,146,41)" fg:x="65564" fg:w="151"/><text x="58.2985%" y="527.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (151 samples, 0.13%)</title><rect x="58.0485%" y="501" width="0.1337%" height="15" fill="rgb(217,27,36)" fg:x="65564" fg:w="151"/><text x="58.2985%" y="511.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (151 samples, 0.13%)</title><rect x="58.0485%" y="485" width="0.1337%" height="15" fill="rgb(219,218,39)" fg:x="65564" fg:w="151"/><text x="58.2985%" y="495.50"></text></g><g><title>[libc-2.31.so] (64 samples, 0.06%)</title><rect x="58.1255%" y="469" width="0.0567%" height="15" fill="rgb(219,4,42)" fg:x="65651" fg:w="64"/><text x="58.3755%" y="479.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (304 samples, 0.27%)</title><rect x="58.0308%" y="565" width="0.2692%" height="15" fill="rgb(249,119,36)" fg:x="65544" fg:w="304"/><text x="58.2808%" y="575.50"></text></g><g><title>&lt;lru::KeyRef&lt;K&gt; as core::borrow::Borrow&lt;K&gt;&gt;::borrow (133 samples, 0.12%)</title><rect x="58.1822%" y="549" width="0.1178%" height="15" fill="rgb(209,23,33)" fg:x="65715" fg:w="133"/><text x="58.4322%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (670 samples, 0.59%)</title><rect x="57.8501%" y="629" width="0.5932%" height="15" fill="rgb(211,10,0)" fg:x="65340" fg:w="670"/><text x="58.1001%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (670 samples, 0.59%)</title><rect x="57.8501%" y="613" width="0.5932%" height="15" fill="rgb(208,99,37)" fg:x="65340" fg:w="670"/><text x="58.1001%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (536 samples, 0.47%)</title><rect x="57.9688%" y="597" width="0.4746%" height="15" fill="rgb(213,132,31)" fg:x="65474" fg:w="536"/><text x="58.2188%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (536 samples, 0.47%)</title><rect x="57.9688%" y="581" width="0.4746%" height="15" fill="rgb(243,129,40)" fg:x="65474" fg:w="536"/><text x="58.2188%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (162 samples, 0.14%)</title><rect x="58.2999%" y="565" width="0.1434%" height="15" fill="rgb(210,66,33)" fg:x="65848" fg:w="162"/><text x="58.5499%" y="575.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (162 samples, 0.14%)</title><rect x="58.2999%" y="549" width="0.1434%" height="15" fill="rgb(209,189,4)" fg:x="65848" fg:w="162"/><text x="58.5499%" y="559.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (162 samples, 0.14%)</title><rect x="58.2999%" y="533" width="0.1434%" height="15" fill="rgb(214,107,37)" fg:x="65848" fg:w="162"/><text x="58.5499%" y="543.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (154 samples, 0.14%)</title><rect x="58.3070%" y="517" width="0.1363%" height="15" fill="rgb(245,88,54)" fg:x="65856" fg:w="154"/><text x="58.5570%" y="527.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (154 samples, 0.14%)</title><rect x="58.3070%" y="501" width="0.1363%" height="15" fill="rgb(205,146,20)" fg:x="65856" fg:w="154"/><text x="58.5570%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (154 samples, 0.14%)</title><rect x="58.3070%" y="485" width="0.1363%" height="15" fill="rgb(220,161,25)" fg:x="65856" fg:w="154"/><text x="58.5570%" y="495.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::attach (76 samples, 0.07%)</title><rect x="58.4433%" y="629" width="0.0673%" height="15" fill="rgb(215,152,15)" fg:x="66010" fg:w="76"/><text x="58.6933%" y="639.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::get_mut (768 samples, 0.68%)</title><rect x="57.8484%" y="645" width="0.6800%" height="15" fill="rgb(233,192,44)" fg:x="65338" fg:w="768"/><text x="58.0984%" y="655.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::detach (20 samples, 0.02%)</title><rect x="58.5106%" y="629" width="0.0177%" height="15" fill="rgb(240,170,46)" fg:x="66086" fg:w="20"/><text x="58.7606%" y="639.50"></text></g><g><title>sn_rust_dealloc (30 samples, 0.03%)</title><rect x="58.5283%" y="645" width="0.0266%" height="15" fill="rgb(207,104,33)" fg:x="66106" fg:w="30"/><text x="58.7783%" y="655.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (94 samples, 0.08%)</title><rect x="58.6992%" y="437" width="0.0832%" height="15" fill="rgb(219,21,39)" fg:x="66299" fg:w="94"/><text x="58.9492%" y="447.50"></text></g><g><title>tremor_value::value::serialize::&lt;impl value_trait::Writable for tremor_value::value::Value&gt;::encode (269 samples, 0.24%)</title><rect x="58.5602%" y="645" width="0.2382%" height="15" fill="rgb(214,133,29)" fg:x="66142" fg:w="269"/><text x="58.8102%" y="655.50"></text></g><g><title>value_trait::generator::DumpGenerator&lt;VT&gt;::new (214 samples, 0.19%)</title><rect x="58.6089%" y="629" width="0.1895%" height="15" fill="rgb(226,93,6)" fg:x="66197" fg:w="214"/><text x="58.8589%" y="639.50"></text></g><g><title>&lt;value_trait::generator::DumpGenerator&lt;VT&gt; as core::default::Default&gt;::default (214 samples, 0.19%)</title><rect x="58.6089%" y="613" width="0.1895%" height="15" fill="rgb(252,222,34)" fg:x="66197" fg:w="214"/><text x="58.8589%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (211 samples, 0.19%)</title><rect x="58.6116%" y="597" width="0.1868%" height="15" fill="rgb(252,92,48)" fg:x="66200" fg:w="211"/><text x="58.8616%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (211 samples, 0.19%)</title><rect x="58.6116%" y="581" width="0.1868%" height="15" fill="rgb(245,223,24)" fg:x="66200" fg:w="211"/><text x="58.8616%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (211 samples, 0.19%)</title><rect x="58.6116%" y="565" width="0.1868%" height="15" fill="rgb(205,176,3)" fg:x="66200" fg:w="211"/><text x="58.8616%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (211 samples, 0.19%)</title><rect x="58.6116%" y="549" width="0.1868%" height="15" fill="rgb(235,151,15)" fg:x="66200" fg:w="211"/><text x="58.8616%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (211 samples, 0.19%)</title><rect x="58.6116%" y="533" width="0.1868%" height="15" fill="rgb(237,209,11)" fg:x="66200" fg:w="211"/><text x="58.8616%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (211 samples, 0.19%)</title><rect x="58.6116%" y="517" width="0.1868%" height="15" fill="rgb(243,227,24)" fg:x="66200" fg:w="211"/><text x="58.8616%" y="527.50"></text></g><g><title>alloc::alloc::alloc (210 samples, 0.19%)</title><rect x="58.6124%" y="501" width="0.1859%" height="15" fill="rgb(239,193,16)" fg:x="66201" fg:w="210"/><text x="58.8624%" y="511.50"></text></g><g><title>__rg_alloc (210 samples, 0.19%)</title><rect x="58.6124%" y="485" width="0.1859%" height="15" fill="rgb(231,27,9)" fg:x="66201" fg:w="210"/><text x="58.8624%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (210 samples, 0.19%)</title><rect x="58.6124%" y="469" width="0.1859%" height="15" fill="rgb(219,169,10)" fg:x="66201" fg:w="210"/><text x="58.8624%" y="479.50"></text></g><g><title>sn_rust_alloc (209 samples, 0.19%)</title><rect x="58.6133%" y="453" width="0.1850%" height="15" fill="rgb(244,229,43)" fg:x="66202" fg:w="209"/><text x="58.8633%" y="463.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (18 samples, 0.02%)</title><rect x="58.7824%" y="437" width="0.0159%" height="15" fill="rgb(254,38,20)" fg:x="66393" fg:w="18"/><text x="59.0324%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="58.8143%" y="549" width="0.0115%" height="15" fill="rgb(250,47,30)" fg:x="66429" fg:w="13"/><text x="59.0643%" y="559.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (43 samples, 0.04%)</title><rect x="58.8081%" y="565" width="0.0381%" height="15" fill="rgb(224,124,36)" fg:x="66422" fg:w="43"/><text x="59.0581%" y="575.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (23 samples, 0.02%)</title><rect x="58.8258%" y="549" width="0.0204%" height="15" fill="rgb(246,68,51)" fg:x="66442" fg:w="23"/><text x="59.0758%" y="559.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (23 samples, 0.02%)</title><rect x="58.8258%" y="533" width="0.0204%" height="15" fill="rgb(253,43,49)" fg:x="66442" fg:w="23"/><text x="59.0758%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (23 samples, 0.02%)</title><rect x="58.8258%" y="517" width="0.0204%" height="15" fill="rgb(219,54,36)" fg:x="66442" fg:w="23"/><text x="59.0758%" y="527.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (23 samples, 0.02%)</title><rect x="58.8258%" y="501" width="0.0204%" height="15" fill="rgb(227,133,34)" fg:x="66442" fg:w="23"/><text x="59.0758%" y="511.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (23 samples, 0.02%)</title><rect x="58.8258%" y="485" width="0.0204%" height="15" fill="rgb(247,227,15)" fg:x="66442" fg:w="23"/><text x="59.0758%" y="495.50"></text></g><g><title>value_trait::ValueAccess::get (59 samples, 0.05%)</title><rect x="58.7984%" y="645" width="0.0522%" height="15" fill="rgb(229,96,14)" fg:x="66411" fg:w="59"/><text x="59.0484%" y="655.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (54 samples, 0.05%)</title><rect x="58.8028%" y="629" width="0.0478%" height="15" fill="rgb(220,79,17)" fg:x="66416" fg:w="54"/><text x="59.0528%" y="639.50"></text></g><g><title>value_trait::ValueAccess::get::{{closure}} (53 samples, 0.05%)</title><rect x="58.8037%" y="613" width="0.0469%" height="15" fill="rgb(205,131,53)" fg:x="66417" fg:w="53"/><text x="59.0537%" y="623.50"></text></g><g><title>&lt;halfbrown::HashMap&lt;MapK,MapE&gt; as value_trait::object::Object&gt;::get (53 samples, 0.05%)</title><rect x="58.8037%" y="597" width="0.0469%" height="15" fill="rgb(209,50,29)" fg:x="66417" fg:w="53"/><text x="59.0537%" y="607.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (53 samples, 0.05%)</title><rect x="58.8037%" y="581" width="0.0469%" height="15" fill="rgb(245,86,46)" fg:x="66417" fg:w="53"/><text x="59.0537%" y="591.50"></text></g><g><title>value_trait::ValueAccess::get_str (163 samples, 0.14%)</title><rect x="58.8506%" y="645" width="0.1443%" height="15" fill="rgb(235,66,46)" fg:x="66470" fg:w="163"/><text x="59.1006%" y="655.50"></text></g><g><title>value_trait::ValueAccess::get (148 samples, 0.13%)</title><rect x="58.8639%" y="629" width="0.1310%" height="15" fill="rgb(232,148,31)" fg:x="66485" fg:w="148"/><text x="59.1139%" y="639.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (134 samples, 0.12%)</title><rect x="58.8763%" y="613" width="0.1186%" height="15" fill="rgb(217,149,8)" fg:x="66499" fg:w="134"/><text x="59.1263%" y="623.50"></text></g><g><title>value_trait::ValueAccess::get::{{closure}} (134 samples, 0.12%)</title><rect x="58.8763%" y="597" width="0.1186%" height="15" fill="rgb(209,183,11)" fg:x="66499" fg:w="134"/><text x="59.1263%" y="607.50"></text></g><g><title>&lt;halfbrown::HashMap&lt;MapK,MapE&gt; as value_trait::object::Object&gt;::get (134 samples, 0.12%)</title><rect x="58.8763%" y="581" width="0.1186%" height="15" fill="rgb(208,55,20)" fg:x="66499" fg:w="134"/><text x="59.1263%" y="591.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (134 samples, 0.12%)</title><rect x="58.8763%" y="565" width="0.1186%" height="15" fill="rgb(218,39,14)" fg:x="66499" fg:w="134"/><text x="59.1263%" y="575.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (107 samples, 0.09%)</title><rect x="58.9002%" y="549" width="0.0947%" height="15" fill="rgb(216,169,33)" fg:x="66526" fg:w="107"/><text x="59.1502%" y="559.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (84 samples, 0.07%)</title><rect x="58.9206%" y="533" width="0.0744%" height="15" fill="rgb(233,80,24)" fg:x="66549" fg:w="84"/><text x="59.1706%" y="543.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (84 samples, 0.07%)</title><rect x="58.9206%" y="517" width="0.0744%" height="15" fill="rgb(213,179,31)" fg:x="66549" fg:w="84"/><text x="59.1706%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (84 samples, 0.07%)</title><rect x="58.9206%" y="501" width="0.0744%" height="15" fill="rgb(209,19,5)" fg:x="66549" fg:w="84"/><text x="59.1706%" y="511.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (84 samples, 0.07%)</title><rect x="58.9206%" y="485" width="0.0744%" height="15" fill="rgb(219,18,35)" fg:x="66549" fg:w="84"/><text x="59.1706%" y="495.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (84 samples, 0.07%)</title><rect x="58.9206%" y="469" width="0.0744%" height="15" fill="rgb(209,169,16)" fg:x="66549" fg:w="84"/><text x="59.1706%" y="479.50"></text></g><g><title>[libc-2.31.so] (69 samples, 0.06%)</title><rect x="58.9338%" y="453" width="0.0611%" height="15" fill="rgb(245,90,51)" fg:x="66564" fg:w="69"/><text x="59.1838%" y="463.50"></text></g><g><title>&lt;u64 as core::ops::arith::Add&gt;::add (64 samples, 0.06%)</title><rect x="59.0171%" y="597" width="0.0567%" height="15" fill="rgb(220,99,45)" fg:x="66658" fg:w="64"/><text x="59.2671%" y="607.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (2,629 samples, 2.33%)</title><rect x="56.7487%" y="677" width="2.3276%" height="15" fill="rgb(249,89,25)" fg:x="64096" fg:w="2629"/><text x="56.9987%" y="687.50">&lt;..</text></g><g><title>&lt;tremor_pipeline::op::grouper::bucket::Grouper as tremor_pipeline::op::Operator&gt;::on_event (2,629 samples, 2.33%)</title><rect x="56.7487%" y="661" width="2.3276%" height="15" fill="rgb(239,193,0)" fg:x="64096" fg:w="2629"/><text x="56.9987%" y="671.50">&lt;..</text></g><g><title>window::TimeWindow::inc_t (92 samples, 0.08%)</title><rect x="58.9949%" y="645" width="0.0815%" height="15" fill="rgb(231,126,1)" fg:x="66633" fg:w="92"/><text x="59.2449%" y="655.50"></text></g><g><title>window::TimeWindow::add_t (92 samples, 0.08%)</title><rect x="58.9949%" y="629" width="0.0815%" height="15" fill="rgb(243,166,3)" fg:x="66633" fg:w="92"/><text x="59.2449%" y="639.50"></text></g><g><title>window::SlidingWindow&lt;T&gt;::add (73 samples, 0.06%)</title><rect x="59.0117%" y="613" width="0.0646%" height="15" fill="rgb(223,22,34)" fg:x="66652" fg:w="73"/><text x="59.2617%" y="623.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (65 samples, 0.06%)</title><rect x="59.1029%" y="629" width="0.0575%" height="15" fill="rgb(251,52,51)" fg:x="66755" fg:w="65"/><text x="59.3529%" y="639.50"></text></g><g><title>tremor_script::script::Script::run (12 samples, 0.01%)</title><rect x="59.1605%" y="629" width="0.0106%" height="15" fill="rgb(221,165,28)" fg:x="66820" fg:w="12"/><text x="59.4105%" y="639.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (5,905 samples, 5.23%)</title><rect x="53.9439%" y="949" width="5.2281%" height="15" fill="rgb(218,121,47)" fg:x="60928" fg:w="5905"/><text x="54.1939%" y="959.50">async_..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (5,904 samples, 5.23%)</title><rect x="53.9448%" y="933" width="5.2272%" height="15" fill="rgb(209,120,9)" fg:x="60929" fg:w="5904"/><text x="54.1948%" y="943.50">&lt;core:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,904 samples, 5.23%)</title><rect x="53.9448%" y="917" width="5.2272%" height="15" fill="rgb(236,68,12)" fg:x="60929" fg:w="5904"/><text x="54.1948%" y="927.50">&lt;core:..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (5,904 samples, 5.23%)</title><rect x="53.9448%" y="901" width="5.2272%" height="15" fill="rgb(225,194,26)" fg:x="60929" fg:w="5904"/><text x="54.1948%" y="911.50">async_..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (5,904 samples, 5.23%)</title><rect x="53.9448%" y="885" width="5.2272%" height="15" fill="rgb(231,84,39)" fg:x="60929" fg:w="5904"/><text x="54.1948%" y="895.50">&lt;async..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (5,904 samples, 5.23%)</title><rect x="53.9448%" y="869" width="5.2272%" height="15" fill="rgb(210,11,45)" fg:x="60929" fg:w="5904"/><text x="54.1948%" y="879.50">async_..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (5,904 samples, 5.23%)</title><rect x="53.9448%" y="853" width="5.2272%" height="15" fill="rgb(224,54,52)" fg:x="60929" fg:w="5904"/><text x="54.1948%" y="863.50">std::t..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (5,904 samples, 5.23%)</title><rect x="53.9448%" y="837" width="5.2272%" height="15" fill="rgb(238,102,14)" fg:x="60929" fg:w="5904"/><text x="54.1948%" y="847.50">std::t..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (5,904 samples, 5.23%)</title><rect x="53.9448%" y="821" width="5.2272%" height="15" fill="rgb(243,160,52)" fg:x="60929" fg:w="5904"/><text x="54.1948%" y="831.50">async_..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (5,904 samples, 5.23%)</title><rect x="53.9448%" y="805" width="5.2272%" height="15" fill="rgb(216,114,19)" fg:x="60929" fg:w="5904"/><text x="54.1948%" y="815.50">&lt;async..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,904 samples, 5.23%)</title><rect x="53.9448%" y="789" width="5.2272%" height="15" fill="rgb(244,166,37)" fg:x="60929" fg:w="5904"/><text x="54.1948%" y="799.50">&lt;core:..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (3,903 samples, 3.46%)</title><rect x="55.7164%" y="773" width="3.4556%" height="15" fill="rgb(246,29,44)" fg:x="62930" fg:w="3903"/><text x="55.9664%" y="783.50">tre..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,737 samples, 2.42%)</title><rect x="56.7487%" y="757" width="2.4233%" height="15" fill="rgb(215,56,53)" fg:x="64096" fg:w="2737"/><text x="56.9987%" y="767.50">&lt;c..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (2,737 samples, 2.42%)</title><rect x="56.7487%" y="741" width="2.4233%" height="15" fill="rgb(217,60,2)" fg:x="64096" fg:w="2737"/><text x="56.9987%" y="751.50">tr..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (2,737 samples, 2.42%)</title><rect x="56.7487%" y="725" width="2.4233%" height="15" fill="rgb(207,26,24)" fg:x="64096" fg:w="2737"/><text x="56.9987%" y="735.50">tr..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (2,737 samples, 2.42%)</title><rect x="56.7487%" y="709" width="2.4233%" height="15" fill="rgb(252,210,15)" fg:x="64096" fg:w="2737"/><text x="56.9987%" y="719.50">tr..</text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (2,737 samples, 2.42%)</title><rect x="56.7487%" y="693" width="2.4233%" height="15" fill="rgb(253,209,26)" fg:x="64096" fg:w="2737"/><text x="56.9987%" y="703.50">&lt;t..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (108 samples, 0.10%)</title><rect x="59.0764%" y="677" width="0.0956%" height="15" fill="rgb(238,170,14)" fg:x="66725" fg:w="108"/><text x="59.3264%" y="687.50"></text></g><g><title>tremor_script::srs::EventPayload::rent_mut (108 samples, 0.10%)</title><rect x="59.0764%" y="661" width="0.0956%" height="15" fill="rgb(216,178,15)" fg:x="66725" fg:w="108"/><text x="59.3264%" y="671.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (103 samples, 0.09%)</title><rect x="59.0808%" y="645" width="0.0912%" height="15" fill="rgb(250,197,2)" fg:x="66730" fg:w="103"/><text x="59.3308%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (52 samples, 0.05%)</title><rect x="59.2234%" y="949" width="0.0460%" height="15" fill="rgb(212,70,42)" fg:x="66891" fg:w="52"/><text x="59.4734%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::vecmap::VecMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (22 samples, 0.02%)</title><rect x="59.2499%" y="933" width="0.0195%" height="15" fill="rgb(227,213,9)" fg:x="66921" fg:w="22"/><text x="59.4999%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)&gt;&gt; (22 samples, 0.02%)</title><rect x="59.2499%" y="917" width="0.0195%" height="15" fill="rgb(245,99,25)" fg:x="66921" fg:w="22"/><text x="59.4999%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.02%)</title><rect x="59.2499%" y="901" width="0.0195%" height="15" fill="rgb(250,82,29)" fg:x="66921" fg:w="22"/><text x="59.4999%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)]&gt; (22 samples, 0.02%)</title><rect x="59.2499%" y="885" width="0.0195%" height="15" fill="rgb(241,226,54)" fg:x="66921" fg:w="22"/><text x="59.4999%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)&gt; (22 samples, 0.02%)</title><rect x="59.2499%" y="869" width="0.0195%" height="15" fill="rgb(221,99,41)" fg:x="66921" fg:w="22"/><text x="59.4999%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (12 samples, 0.01%)</title><rect x="59.2694%" y="949" width="0.0106%" height="15" fill="rgb(213,90,21)" fg:x="66943" fg:w="12"/><text x="59.5194%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (28 samples, 0.02%)</title><rect x="59.2880%" y="949" width="0.0248%" height="15" fill="rgb(205,208,24)" fg:x="66964" fg:w="28"/><text x="59.5380%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (26 samples, 0.02%)</title><rect x="59.2898%" y="933" width="0.0230%" height="15" fill="rgb(246,31,12)" fg:x="66966" fg:w="26"/><text x="59.5398%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (163 samples, 0.14%)</title><rect x="59.3252%" y="933" width="0.1443%" height="15" fill="rgb(213,154,6)" fg:x="67006" fg:w="163"/><text x="59.5752%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tremor_value::value::Value]&gt; (17 samples, 0.02%)</title><rect x="59.4544%" y="917" width="0.0151%" height="15" fill="rgb(222,163,29)" fg:x="67152" fg:w="17"/><text x="59.7044%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (186 samples, 0.16%)</title><rect x="59.3128%" y="949" width="0.1647%" height="15" fill="rgb(227,201,8)" fg:x="66992" fg:w="186"/><text x="59.5628%" y="959.50"></text></g><g><title>core::str::converts::from_utf8 (179 samples, 0.16%)</title><rect x="59.4775%" y="949" width="0.1585%" height="15" fill="rgb(233,9,32)" fg:x="67178" fg:w="179"/><text x="59.7275%" y="959.50"></text></g><g><title>event_listener::Event::notify (38 samples, 0.03%)</title><rect x="59.6386%" y="949" width="0.0336%" height="15" fill="rgb(217,54,24)" fg:x="67360" fg:w="38"/><text x="59.8886%" y="959.50"></text></g><g><title>event_listener::full_fence (16 samples, 0.01%)</title><rect x="59.6581%" y="933" width="0.0142%" height="15" fill="rgb(235,192,0)" fg:x="67382" fg:w="16"/><text x="59.9081%" y="943.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::insert (78 samples, 0.07%)</title><rect x="59.6758%" y="949" width="0.0691%" height="15" fill="rgb(235,45,9)" fg:x="67402" fg:w="78"/><text x="59.9258%" y="959.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (66 samples, 0.06%)</title><rect x="59.7448%" y="949" width="0.0584%" height="15" fill="rgb(246,42,40)" fg:x="67480" fg:w="66"/><text x="59.9948%" y="959.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::get_mut (17 samples, 0.02%)</title><rect x="59.8095%" y="949" width="0.0151%" height="15" fill="rgb(248,111,24)" fg:x="67553" fg:w="17"/><text x="60.0595%" y="959.50"></text></g><g><title>parking::Inner::park (19 samples, 0.02%)</title><rect x="59.8245%" y="949" width="0.0168%" height="15" fill="rgb(249,65,22)" fg:x="67570" fg:w="19"/><text x="60.0745%" y="959.50"></text></g><g><title>polling::epoll::Poller::wait (29 samples, 0.03%)</title><rect x="59.8458%" y="949" width="0.0257%" height="15" fill="rgb(238,111,51)" fg:x="67594" fg:w="29"/><text x="60.0958%" y="959.50"></text></g><g><title>rmp::encode::str::write_str (61 samples, 0.05%)</title><rect x="59.8714%" y="949" width="0.0540%" height="15" fill="rgb(250,118,22)" fg:x="67623" fg:w="61"/><text x="60.1214%" y="959.50"></text></g><g><title>rmp::encode::write_marker (59 samples, 0.05%)</title><rect x="59.9370%" y="949" width="0.0522%" height="15" fill="rgb(234,84,26)" fg:x="67697" fg:w="59"/><text x="60.1870%" y="959.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (157 samples, 0.14%)</title><rect x="59.9892%" y="949" width="0.1390%" height="15" fill="rgb(243,172,12)" fg:x="67756" fg:w="157"/><text x="60.2392%" y="959.50"></text></g><g><title>sn_rust_alloc (65 samples, 0.06%)</title><rect x="60.1282%" y="949" width="0.0575%" height="15" fill="rgb(236,150,49)" fg:x="67913" fg:w="65"/><text x="60.3782%" y="959.50"></text></g><g><title>sn_rust_dealloc (36 samples, 0.03%)</title><rect x="60.1858%" y="949" width="0.0319%" height="15" fill="rgb(225,197,26)" fg:x="67978" fg:w="36"/><text x="60.4358%" y="959.50"></text></g><g><title>sn_rust_realloc (24 samples, 0.02%)</title><rect x="60.2176%" y="949" width="0.0212%" height="15" fill="rgb(214,17,42)" fg:x="68014" fg:w="24"/><text x="60.4676%" y="959.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (30 samples, 0.03%)</title><rect x="60.2460%" y="949" width="0.0266%" height="15" fill="rgb(224,165,40)" fg:x="68046" fg:w="30"/><text x="60.4960%" y="959.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (191 samples, 0.17%)</title><rect x="60.2743%" y="725" width="0.1691%" height="15" fill="rgb(246,100,4)" fg:x="68078" fg:w="191"/><text x="60.5243%" y="735.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (31 samples, 0.03%)</title><rect x="60.4434%" y="725" width="0.0274%" height="15" fill="rgb(222,103,0)" fg:x="68269" fg:w="31"/><text x="60.6934%" y="735.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (109 samples, 0.10%)</title><rect x="60.8542%" y="597" width="0.0965%" height="15" fill="rgb(227,189,26)" fg:x="68733" fg:w="109"/><text x="61.1042%" y="607.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for &amp;str&gt;::deserialize (109 samples, 0.10%)</title><rect x="60.8542%" y="581" width="0.0965%" height="15" fill="rgb(214,202,17)" fg:x="68733" fg:w="109"/><text x="61.1042%" y="591.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_str (109 samples, 0.10%)</title><rect x="60.8542%" y="565" width="0.0965%" height="15" fill="rgb(229,111,3)" fg:x="68733" fg:w="109"/><text x="61.1042%" y="575.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (53 samples, 0.05%)</title><rect x="60.9038%" y="549" width="0.0469%" height="15" fill="rgb(229,172,15)" fg:x="68789" fg:w="53"/><text x="61.1538%" y="559.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_key (247 samples, 0.22%)</title><rect x="60.8436%" y="645" width="0.2187%" height="15" fill="rgb(230,224,35)" fg:x="68721" fg:w="247"/><text x="61.0936%" y="655.50"></text></g><g><title>serde::de::MapAccess::next_key (247 samples, 0.22%)</title><rect x="60.8436%" y="629" width="0.2187%" height="15" fill="rgb(251,141,6)" fg:x="68721" fg:w="247"/><text x="61.0936%" y="639.50"></text></g><g><title>&lt;rmp_serde::decode::MapAccess&lt;R,C&gt; as serde::de::MapAccess&gt;::next_key_seed (247 samples, 0.22%)</title><rect x="60.8436%" y="613" width="0.2187%" height="15" fill="rgb(225,208,6)" fg:x="68721" fg:w="247"/><text x="61.0936%" y="623.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (126 samples, 0.11%)</title><rect x="60.9507%" y="597" width="0.1116%" height="15" fill="rgb(246,181,16)" fg:x="68842" fg:w="126"/><text x="61.2007%" y="607.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_value (51 samples, 0.05%)</title><rect x="61.0623%" y="645" width="0.0452%" height="15" fill="rgb(227,129,36)" fg:x="68968" fg:w="51"/><text x="61.3123%" y="655.50"></text></g><g><title>serde::de::MapAccess::next_value (51 samples, 0.05%)</title><rect x="61.0623%" y="629" width="0.0452%" height="15" fill="rgb(248,117,24)" fg:x="68968" fg:w="51"/><text x="61.3123%" y="639.50"></text></g><g><title>&lt;rmp_serde::decode::MapAccess&lt;R,C&gt; as serde::de::MapAccess&gt;::next_value_seed (51 samples, 0.05%)</title><rect x="61.0623%" y="613" width="0.0452%" height="15" fill="rgb(214,185,35)" fg:x="68968" fg:w="51"/><text x="61.3123%" y="623.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (51 samples, 0.05%)</title><rect x="61.0623%" y="597" width="0.0452%" height="15" fill="rgb(236,150,34)" fg:x="68968" fg:w="51"/><text x="61.3123%" y="607.50"></text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (51 samples, 0.05%)</title><rect x="61.0623%" y="581" width="0.0452%" height="15" fill="rgb(243,228,27)" fg:x="68968" fg:w="51"/><text x="61.3123%" y="591.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (50 samples, 0.04%)</title><rect x="61.0632%" y="565" width="0.0443%" height="15" fill="rgb(245,77,44)" fg:x="68969" fg:w="50"/><text x="61.3132%" y="575.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (694 samples, 0.61%)</title><rect x="61.1127%" y="645" width="0.6144%" height="15" fill="rgb(235,214,42)" fg:x="69025" fg:w="694"/><text x="61.3627%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;tremor_value::value::Value&gt;&gt; (54 samples, 0.05%)</title><rect x="61.7272%" y="645" width="0.0478%" height="15" fill="rgb(221,74,3)" fg:x="69719" fg:w="54"/><text x="61.9772%" y="655.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::insert (48 samples, 0.04%)</title><rect x="61.7750%" y="645" width="0.0425%" height="15" fill="rgb(206,121,29)" fg:x="69773" fg:w="48"/><text x="62.0250%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (149 samples, 0.13%)</title><rect x="61.8281%" y="549" width="0.1319%" height="15" fill="rgb(249,131,53)" fg:x="69833" fg:w="149"/><text x="62.0781%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (149 samples, 0.13%)</title><rect x="61.8281%" y="533" width="0.1319%" height="15" fill="rgb(236,170,29)" fg:x="69833" fg:w="149"/><text x="62.0781%" y="543.50"></text></g><g><title>alloc::alloc::alloc (149 samples, 0.13%)</title><rect x="61.8281%" y="517" width="0.1319%" height="15" fill="rgb(247,96,15)" fg:x="69833" fg:w="149"/><text x="62.0781%" y="527.50"></text></g><g><title>__rg_alloc (149 samples, 0.13%)</title><rect x="61.8281%" y="501" width="0.1319%" height="15" fill="rgb(211,210,7)" fg:x="69833" fg:w="149"/><text x="62.0781%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (149 samples, 0.13%)</title><rect x="61.8281%" y="485" width="0.1319%" height="15" fill="rgb(240,88,50)" fg:x="69833" fg:w="149"/><text x="62.0781%" y="495.50"></text></g><g><title>sn_rust_alloc (149 samples, 0.13%)</title><rect x="61.8281%" y="469" width="0.1319%" height="15" fill="rgb(209,229,26)" fg:x="69833" fg:w="149"/><text x="62.0781%" y="479.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (18 samples, 0.02%)</title><rect x="61.9441%" y="453" width="0.0159%" height="15" fill="rgb(210,68,23)" fg:x="69964" fg:w="18"/><text x="62.1941%" y="463.50"></text></g><g><title>halfbrown::HashMap&lt;K,V&gt;::with_capacity (165 samples, 0.15%)</title><rect x="61.8175%" y="645" width="0.1461%" height="15" fill="rgb(229,180,13)" fg:x="69821" fg:w="165"/><text x="62.0675%" y="655.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V&gt;::with_capacity (161 samples, 0.14%)</title><rect x="61.8210%" y="629" width="0.1425%" height="15" fill="rgb(236,53,44)" fg:x="69825" fg:w="161"/><text x="62.0710%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (161 samples, 0.14%)</title><rect x="61.8210%" y="613" width="0.1425%" height="15" fill="rgb(244,214,29)" fg:x="69825" fg:w="161"/><text x="62.0710%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (161 samples, 0.14%)</title><rect x="61.8210%" y="597" width="0.1425%" height="15" fill="rgb(220,75,29)" fg:x="69825" fg:w="161"/><text x="62.0710%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (161 samples, 0.14%)</title><rect x="61.8210%" y="581" width="0.1425%" height="15" fill="rgb(214,183,37)" fg:x="69825" fg:w="161"/><text x="62.0710%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (161 samples, 0.14%)</title><rect x="61.8210%" y="565" width="0.1425%" height="15" fill="rgb(239,117,29)" fg:x="69825" fg:w="161"/><text x="62.0710%" y="575.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_map (1,741 samples, 1.54%)</title><rect x="60.5036%" y="661" width="1.5414%" height="15" fill="rgb(237,171,35)" fg:x="68337" fg:w="1741"/><text x="60.7536%" y="671.50"></text></g><g><title>tremor_value::value::from::&lt;impl core::convert::From&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; for tremor_value::value::Value&gt;::from (92 samples, 0.08%)</title><rect x="61.9636%" y="645" width="0.0815%" height="15" fill="rgb(229,178,53)" fg:x="69986" fg:w="92"/><text x="62.2136%" y="655.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (83 samples, 0.07%)</title><rect x="61.9715%" y="629" width="0.0735%" height="15" fill="rgb(210,102,19)" fg:x="69995" fg:w="83"/><text x="62.2215%" y="639.50"></text></g><g><title>alloc::alloc::exchange_malloc (42 samples, 0.04%)</title><rect x="62.0078%" y="613" width="0.0372%" height="15" fill="rgb(235,127,22)" fg:x="70036" fg:w="42"/><text x="62.2578%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (42 samples, 0.04%)</title><rect x="62.0078%" y="597" width="0.0372%" height="15" fill="rgb(244,31,31)" fg:x="70036" fg:w="42"/><text x="62.2578%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (42 samples, 0.04%)</title><rect x="62.0078%" y="581" width="0.0372%" height="15" fill="rgb(231,43,21)" fg:x="70036" fg:w="42"/><text x="62.2578%" y="591.50"></text></g><g><title>alloc::alloc::alloc (41 samples, 0.04%)</title><rect x="62.0087%" y="565" width="0.0363%" height="15" fill="rgb(217,131,35)" fg:x="70037" fg:w="41"/><text x="62.2587%" y="575.50"></text></g><g><title>__rg_alloc (41 samples, 0.04%)</title><rect x="62.0087%" y="549" width="0.0363%" height="15" fill="rgb(221,149,4)" fg:x="70037" fg:w="41"/><text x="62.2587%" y="559.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (41 samples, 0.04%)</title><rect x="62.0087%" y="533" width="0.0363%" height="15" fill="rgb(232,170,28)" fg:x="70037" fg:w="41"/><text x="62.2587%" y="543.50"></text></g><g><title>sn_rust_alloc (38 samples, 0.03%)</title><rect x="62.0114%" y="517" width="0.0336%" height="15" fill="rgb(238,56,10)" fg:x="70040" fg:w="38"/><text x="62.2614%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (21 samples, 0.02%)</title><rect x="62.0450%" y="645" width="0.0186%" height="15" fill="rgb(235,196,14)" fg:x="70078" fg:w="21"/><text x="62.2950%" y="655.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker::{{closure}} (17 samples, 0.02%)</title><rect x="62.0486%" y="629" width="0.0151%" height="15" fill="rgb(216,45,48)" fg:x="70082" fg:w="17"/><text x="62.2986%" y="639.50"></text></g><g><title>rmp::decode::read_marker (17 samples, 0.02%)</title><rect x="62.0486%" y="613" width="0.0151%" height="15" fill="rgb(238,213,17)" fg:x="70082" fg:w="17"/><text x="62.2986%" y="623.50"></text></g><g><title>&lt;tremor_runtime::codec::msgpack::MsgPack as tremor_runtime::codec::Codec&gt;::decode (2,093 samples, 1.85%)</title><rect x="60.2743%" y="741" width="1.8531%" height="15" fill="rgb(212,13,2)" fg:x="68078" fg:w="2093"/><text x="60.5243%" y="751.50">&lt;..</text></g><g><title>rmp_serde::decode::from_slice (1,871 samples, 1.66%)</title><rect x="60.4708%" y="725" width="1.6565%" height="15" fill="rgb(240,114,20)" fg:x="68300" fg:w="1871"/><text x="60.7208%" y="735.50"></text></g><g><title>rmp_serde::decode::from_read_ref (1,871 samples, 1.66%)</title><rect x="60.4708%" y="709" width="1.6565%" height="15" fill="rgb(228,41,40)" fg:x="68300" fg:w="1871"/><text x="60.7208%" y="719.50"></text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (1,864 samples, 1.65%)</title><rect x="60.4770%" y="693" width="1.6503%" height="15" fill="rgb(244,132,35)" fg:x="68307" fg:w="1864"/><text x="60.7270%" y="703.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (1,864 samples, 1.65%)</title><rect x="60.4770%" y="677" width="1.6503%" height="15" fill="rgb(253,189,4)" fg:x="68307" fg:w="1864"/><text x="60.7270%" y="687.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker (93 samples, 0.08%)</title><rect x="62.0450%" y="661" width="0.0823%" height="15" fill="rgb(224,37,19)" fg:x="70078" fg:w="93"/><text x="62.2950%" y="671.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (72 samples, 0.06%)</title><rect x="62.0636%" y="645" width="0.0637%" height="15" fill="rgb(235,223,18)" fg:x="70099" fg:w="72"/><text x="62.3136%" y="655.50"></text></g><g><title>core::mem::replace (72 samples, 0.06%)</title><rect x="62.0636%" y="629" width="0.0637%" height="15" fill="rgb(235,163,25)" fg:x="70099" fg:w="72"/><text x="62.3136%" y="639.50"></text></g><g><title>core::ptr::read (72 samples, 0.06%)</title><rect x="62.0636%" y="613" width="0.0637%" height="15" fill="rgb(217,145,28)" fg:x="70099" fg:w="72"/><text x="62.3136%" y="623.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,158 samples, 1.91%)</title><rect x="60.2743%" y="853" width="1.9106%" height="15" fill="rgb(223,223,32)" fg:x="68078" fg:w="2158"/><text x="60.5243%" y="863.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_source_reply::{{closure}} (2,158 samples, 1.91%)</title><rect x="60.2743%" y="837" width="1.9106%" height="15" fill="rgb(227,189,39)" fg:x="68078" fg:w="2158"/><text x="60.5243%" y="847.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,158 samples, 1.91%)</title><rect x="60.2743%" y="821" width="1.9106%" height="15" fill="rgb(248,10,22)" fg:x="68078" fg:w="2158"/><text x="60.5243%" y="831.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_data::{{closure}} (2,158 samples, 1.91%)</title><rect x="60.2743%" y="805" width="1.9106%" height="15" fill="rgb(248,46,39)" fg:x="68078" fg:w="2158"/><text x="60.5243%" y="815.50">t..</text></g><g><title>tremor_runtime::connectors::source::build_events (2,158 samples, 1.91%)</title><rect x="60.2743%" y="789" width="1.9106%" height="15" fill="rgb(248,113,48)" fg:x="68078" fg:w="2158"/><text x="60.5243%" y="799.50">t..</text></g><g><title>tremor_script::srs::EventPayload::try_new (2,158 samples, 1.91%)</title><rect x="60.2743%" y="773" width="1.9106%" height="15" fill="rgb(245,16,25)" fg:x="68078" fg:w="2158"/><text x="60.5243%" y="783.50">t..</text></g><g><title>tremor_runtime::connectors::source::build_last_events::{{closure}} (2,158 samples, 1.91%)</title><rect x="60.2743%" y="757" width="1.9106%" height="15" fill="rgb(249,152,16)" fg:x="68078" fg:w="2158"/><text x="60.5243%" y="767.50">t..</text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (65 samples, 0.06%)</title><rect x="62.1274%" y="741" width="0.0575%" height="15" fill="rgb(250,16,1)" fg:x="70171" fg:w="65"/><text x="62.3774%" y="751.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (65 samples, 0.06%)</title><rect x="62.1274%" y="725" width="0.0575%" height="15" fill="rgb(249,138,3)" fg:x="70171" fg:w="65"/><text x="62.3774%" y="735.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (56 samples, 0.05%)</title><rect x="62.1353%" y="709" width="0.0496%" height="15" fill="rgb(227,71,41)" fg:x="70180" fg:w="56"/><text x="62.3853%" y="719.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (56 samples, 0.05%)</title><rect x="62.1353%" y="693" width="0.0496%" height="15" fill="rgb(209,184,23)" fg:x="70180" fg:w="56"/><text x="62.3853%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (56 samples, 0.05%)</title><rect x="62.1353%" y="677" width="0.0496%" height="15" fill="rgb(223,215,31)" fg:x="70180" fg:w="56"/><text x="62.3853%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (56 samples, 0.05%)</title><rect x="62.1353%" y="661" width="0.0496%" height="15" fill="rgb(210,146,28)" fg:x="70180" fg:w="56"/><text x="62.3853%" y="671.50"></text></g><g><title>alloc::alloc::alloc (56 samples, 0.05%)</title><rect x="62.1353%" y="645" width="0.0496%" height="15" fill="rgb(209,183,41)" fg:x="70180" fg:w="56"/><text x="62.3853%" y="655.50"></text></g><g><title>__rg_alloc (56 samples, 0.05%)</title><rect x="62.1353%" y="629" width="0.0496%" height="15" fill="rgb(209,224,45)" fg:x="70180" fg:w="56"/><text x="62.3853%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (56 samples, 0.05%)</title><rect x="62.1353%" y="613" width="0.0496%" height="15" fill="rgb(224,209,51)" fg:x="70180" fg:w="56"/><text x="62.3853%" y="623.50"></text></g><g><title>sn_rust_alloc (56 samples, 0.05%)</title><rect x="62.1353%" y="597" width="0.0496%" height="15" fill="rgb(223,17,39)" fg:x="70180" fg:w="56"/><text x="62.3853%" y="607.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (56 samples, 0.05%)</title><rect x="62.1353%" y="581" width="0.0496%" height="15" fill="rgb(234,204,37)" fg:x="70180" fg:w="56"/><text x="62.3853%" y="591.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::run::{{closure}} (2,159 samples, 1.91%)</title><rect x="60.2743%" y="869" width="1.9115%" height="15" fill="rgb(236,120,5)" fg:x="68078" fg:w="2159"/><text x="60.5243%" y="879.50">t..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2,189 samples, 1.94%)</title><rect x="60.2725%" y="949" width="1.9381%" height="15" fill="rgb(248,97,27)" fg:x="68076" fg:w="2189"/><text x="60.5225%" y="959.50">s..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2,187 samples, 1.94%)</title><rect x="60.2743%" y="933" width="1.9363%" height="15" fill="rgb(240,66,17)" fg:x="68078" fg:w="2187"/><text x="60.5243%" y="943.50">s..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (2,187 samples, 1.94%)</title><rect x="60.2743%" y="917" width="1.9363%" height="15" fill="rgb(210,79,3)" fg:x="68078" fg:w="2187"/><text x="60.5243%" y="927.50">a..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (2,187 samples, 1.94%)</title><rect x="60.2743%" y="901" width="1.9363%" height="15" fill="rgb(214,176,27)" fg:x="68078" fg:w="2187"/><text x="60.5243%" y="911.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,187 samples, 1.94%)</title><rect x="60.2743%" y="885" width="1.9363%" height="15" fill="rgb(235,185,3)" fg:x="68078" fg:w="2187"/><text x="60.5243%" y="895.50">&lt;..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (28 samples, 0.02%)</title><rect x="62.1858%" y="869" width="0.0248%" height="15" fill="rgb(227,24,12)" fg:x="70237" fg:w="28"/><text x="62.4358%" y="879.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (28 samples, 0.02%)</title><rect x="62.1858%" y="853" width="0.0248%" height="15" fill="rgb(252,169,48)" fg:x="70237" fg:w="28"/><text x="62.4358%" y="863.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (28 samples, 0.02%)</title><rect x="62.1858%" y="837" width="0.0248%" height="15" fill="rgb(212,65,1)" fg:x="70237" fg:w="28"/><text x="62.4358%" y="847.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (28 samples, 0.02%)</title><rect x="62.1858%" y="821" width="0.0248%" height="15" fill="rgb(242,39,24)" fg:x="70237" fg:w="28"/><text x="62.4358%" y="831.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (28 samples, 0.02%)</title><rect x="62.1858%" y="805" width="0.0248%" height="15" fill="rgb(249,32,23)" fg:x="70237" fg:w="28"/><text x="62.4358%" y="815.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (28 samples, 0.02%)</title><rect x="62.1858%" y="789" width="0.0248%" height="15" fill="rgb(251,195,23)" fg:x="70237" fg:w="28"/><text x="62.4358%" y="799.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (28 samples, 0.02%)</title><rect x="62.1858%" y="773" width="0.0248%" height="15" fill="rgb(236,174,8)" fg:x="70237" fg:w="28"/><text x="62.4358%" y="783.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (28 samples, 0.02%)</title><rect x="62.1858%" y="757" width="0.0248%" height="15" fill="rgb(220,197,8)" fg:x="70237" fg:w="28"/><text x="62.4358%" y="767.50"></text></g><g><title>tremor_common::time::nanotime (20 samples, 0.02%)</title><rect x="62.2106%" y="949" width="0.0177%" height="15" fill="rgb(240,108,37)" fg:x="70265" fg:w="20"/><text x="62.4606%" y="959.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (30 samples, 0.03%)</title><rect x="62.2363%" y="901" width="0.0266%" height="15" fill="rgb(232,176,24)" fg:x="70294" fg:w="30"/><text x="62.4863%" y="911.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (14 samples, 0.01%)</title><rect x="62.2504%" y="885" width="0.0124%" height="15" fill="rgb(243,35,29)" fg:x="70310" fg:w="14"/><text x="62.5004%" y="895.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_input (42 samples, 0.04%)</title><rect x="62.2283%" y="949" width="0.0372%" height="15" fill="rgb(210,37,18)" fg:x="70285" fg:w="42"/><text x="62.4783%" y="959.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_input_n (33 samples, 0.03%)</title><rect x="62.2363%" y="933" width="0.0292%" height="15" fill="rgb(224,184,40)" fg:x="70294" fg:w="33"/><text x="62.4863%" y="943.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (33 samples, 0.03%)</title><rect x="62.2363%" y="917" width="0.0292%" height="15" fill="rgb(236,39,29)" fg:x="70294" fg:w="33"/><text x="62.4863%" y="927.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize_for_stream_with_codec (51 samples, 0.05%)</title><rect x="62.2655%" y="949" width="0.0452%" height="15" fill="rgb(232,48,39)" fg:x="70327" fg:w="51"/><text x="62.5155%" y="959.50"></text></g><g><title>core::str::converts::from_utf8 (1,062 samples, 0.94%)</title><rect x="63.4236%" y="597" width="0.9403%" height="15" fill="rgb(236,34,42)" fg:x="71635" fg:w="1062"/><text x="63.6736%" y="607.50"></text></g><g><title>core::str::validations::run_utf8_validation (972 samples, 0.86%)</title><rect x="63.5032%" y="581" width="0.8606%" height="15" fill="rgb(243,106,37)" fg:x="71725" fg:w="972"/><text x="63.7532%" y="591.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::read_str_data (2,279 samples, 2.02%)</title><rect x="62.4470%" y="613" width="2.0178%" height="15" fill="rgb(218,96,6)" fg:x="70532" fg:w="2279"/><text x="62.6970%" y="623.50">r..</text></g><g><title>rmp_serde::decode::read_bin_data (114 samples, 0.10%)</title><rect x="64.3638%" y="597" width="0.1009%" height="15" fill="rgb(235,130,12)" fg:x="72697" fg:w="114"/><text x="64.6138%" y="607.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as rmp_serde::decode::ReadSlice&gt;::read_slice (114 samples, 0.10%)</title><rect x="64.3638%" y="581" width="0.1009%" height="15" fill="rgb(231,95,0)" fg:x="72697" fg:w="114"/><text x="64.6138%" y="591.50"></text></g><g><title>rmp::decode::RmpRead::read_u8 (91 samples, 0.08%)</title><rect x="64.5134%" y="549" width="0.0806%" height="15" fill="rgb(228,12,23)" fg:x="72866" fg:w="91"/><text x="64.7634%" y="559.50"></text></g><g><title>&lt;T as rmp::decode::RmpRead&gt;::read_exact_buf (91 samples, 0.08%)</title><rect x="64.5134%" y="533" width="0.0806%" height="15" fill="rgb(216,12,1)" fg:x="72866" fg:w="91"/><text x="64.7634%" y="543.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as std::io::Read&gt;::read_exact (91 samples, 0.08%)</title><rect x="64.5134%" y="517" width="0.0806%" height="15" fill="rgb(219,59,3)" fg:x="72866" fg:w="91"/><text x="64.7634%" y="527.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_exact (91 samples, 0.08%)</title><rect x="64.5134%" y="501" width="0.0806%" height="15" fill="rgb(215,208,46)" fg:x="72866" fg:w="91"/><text x="64.7634%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (51 samples, 0.05%)</title><rect x="64.5489%" y="485" width="0.0452%" height="15" fill="rgb(254,224,29)" fg:x="72906" fg:w="51"/><text x="64.7989%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (51 samples, 0.05%)</title><rect x="64.5489%" y="469" width="0.0452%" height="15" fill="rgb(232,14,29)" fg:x="72906" fg:w="51"/><text x="64.7989%" y="479.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (51 samples, 0.05%)</title><rect x="64.5489%" y="453" width="0.0452%" height="15" fill="rgb(208,45,52)" fg:x="72906" fg:w="51"/><text x="64.7989%" y="463.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (51 samples, 0.05%)</title><rect x="64.5489%" y="437" width="0.0452%" height="15" fill="rgb(234,191,28)" fg:x="72906" fg:w="51"/><text x="64.7989%" y="447.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (51 samples, 0.05%)</title><rect x="64.5489%" y="421" width="0.0452%" height="15" fill="rgb(244,67,43)" fg:x="72906" fg:w="51"/><text x="64.7989%" y="431.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_key (2,745 samples, 2.43%)</title><rect x="62.3124%" y="725" width="2.4303%" height="15" fill="rgb(236,189,24)" fg:x="70380" fg:w="2745"/><text x="62.5624%" y="735.50">&lt;&amp;..</text></g><g><title>serde::de::MapAccess::next_key (2,745 samples, 2.43%)</title><rect x="62.3124%" y="709" width="2.4303%" height="15" fill="rgb(239,214,33)" fg:x="70380" fg:w="2745"/><text x="62.5624%" y="719.50">se..</text></g><g><title>&lt;rmp_serde::decode::MapAccess&lt;R,C&gt; as serde::de::MapAccess&gt;::next_key_seed (2,745 samples, 2.43%)</title><rect x="62.3124%" y="693" width="2.4303%" height="15" fill="rgb(226,176,41)" fg:x="70380" fg:w="2745"/><text x="62.5624%" y="703.50">&lt;r..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2,745 samples, 2.43%)</title><rect x="62.3124%" y="677" width="2.4303%" height="15" fill="rgb(248,47,8)" fg:x="70380" fg:w="2745"/><text x="62.5624%" y="687.50">&lt;c..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for &amp;str&gt;::deserialize (2,745 samples, 2.43%)</title><rect x="62.3124%" y="661" width="2.4303%" height="15" fill="rgb(218,81,44)" fg:x="70380" fg:w="2745"/><text x="62.5624%" y="671.50">se..</text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_str (2,745 samples, 2.43%)</title><rect x="62.3124%" y="645" width="2.4303%" height="15" fill="rgb(213,98,6)" fg:x="70380" fg:w="2745"/><text x="62.5624%" y="655.50">&lt;&amp;..</text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (2,745 samples, 2.43%)</title><rect x="62.3124%" y="629" width="2.4303%" height="15" fill="rgb(222,85,22)" fg:x="70380" fg:w="2745"/><text x="62.5624%" y="639.50">&lt;&amp;..</text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker (314 samples, 0.28%)</title><rect x="64.4647%" y="613" width="0.2780%" height="15" fill="rgb(239,46,39)" fg:x="72811" fg:w="314"/><text x="64.7147%" y="623.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (314 samples, 0.28%)</title><rect x="64.4647%" y="597" width="0.2780%" height="15" fill="rgb(237,12,29)" fg:x="72811" fg:w="314"/><text x="64.7147%" y="607.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker::{{closure}} (259 samples, 0.23%)</title><rect x="64.5134%" y="581" width="0.2293%" height="15" fill="rgb(214,77,8)" fg:x="72866" fg:w="259"/><text x="64.7634%" y="591.50"></text></g><g><title>rmp::decode::read_marker (259 samples, 0.23%)</title><rect x="64.5134%" y="565" width="0.2293%" height="15" fill="rgb(217,168,37)" fg:x="72866" fg:w="259"/><text x="64.7634%" y="575.50"></text></g><g><title>rmp::marker::Marker::from_u8 (168 samples, 0.15%)</title><rect x="64.5940%" y="549" width="0.1487%" height="15" fill="rgb(221,217,23)" fg:x="72957" fg:w="168"/><text x="64.8440%" y="559.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_u8 (27 samples, 0.02%)</title><rect x="65.6467%" y="517" width="0.0239%" height="15" fill="rgb(243,229,36)" fg:x="74146" fg:w="27"/><text x="65.8967%" y="527.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;u8&gt; for u64&gt;::from (27 samples, 0.02%)</title><rect x="65.6467%" y="501" width="0.0239%" height="15" fill="rgb(251,163,40)" fg:x="74146" fg:w="27"/><text x="65.8967%" y="511.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_borrowed_str (34 samples, 0.03%)</title><rect x="65.7016%" y="501" width="0.0301%" height="15" fill="rgb(237,222,12)" fg:x="74208" fg:w="34"/><text x="65.9516%" y="511.50"></text></g><g><title>core::str::converts::from_utf8 (238 samples, 0.21%)</title><rect x="65.7317%" y="501" width="0.2107%" height="15" fill="rgb(248,132,6)" fg:x="74242" fg:w="238"/><text x="65.9817%" y="511.50"></text></g><g><title>core::str::validations::run_utf8_validation (209 samples, 0.19%)</title><rect x="65.7574%" y="485" width="0.1850%" height="15" fill="rgb(227,167,50)" fg:x="74271" fg:w="209"/><text x="66.0074%" y="495.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::read_str_data (376 samples, 0.33%)</title><rect x="65.6706%" y="517" width="0.3329%" height="15" fill="rgb(242,84,37)" fg:x="74173" fg:w="376"/><text x="65.9206%" y="527.50"></text></g><g><title>rmp_serde::decode::read_bin_data (69 samples, 0.06%)</title><rect x="65.9424%" y="501" width="0.0611%" height="15" fill="rgb(212,4,50)" fg:x="74480" fg:w="69"/><text x="66.1924%" y="511.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as rmp_serde::decode::ReadSlice&gt;::read_slice (69 samples, 0.06%)</title><rect x="65.9424%" y="485" width="0.0611%" height="15" fill="rgb(230,228,32)" fg:x="74480" fg:w="69"/><text x="66.1924%" y="495.50"></text></g><g><title>rmp::decode::RmpRead::read_u8 (118 samples, 0.10%)</title><rect x="66.0106%" y="453" width="0.1045%" height="15" fill="rgb(248,217,23)" fg:x="74557" fg:w="118"/><text x="66.2606%" y="463.50"></text></g><g><title>&lt;T as rmp::decode::RmpRead&gt;::read_exact_buf (118 samples, 0.10%)</title><rect x="66.0106%" y="437" width="0.1045%" height="15" fill="rgb(238,197,32)" fg:x="74557" fg:w="118"/><text x="66.2606%" y="447.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as std::io::Read&gt;::read_exact (118 samples, 0.10%)</title><rect x="66.0106%" y="421" width="0.1045%" height="15" fill="rgb(236,106,1)" fg:x="74557" fg:w="118"/><text x="66.2606%" y="431.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_exact (118 samples, 0.10%)</title><rect x="66.0106%" y="405" width="0.1045%" height="15" fill="rgb(219,228,13)" fg:x="74557" fg:w="118"/><text x="66.2606%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (62 samples, 0.05%)</title><rect x="66.0602%" y="389" width="0.0549%" height="15" fill="rgb(238,30,35)" fg:x="74613" fg:w="62"/><text x="66.3102%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (62 samples, 0.05%)</title><rect x="66.0602%" y="373" width="0.0549%" height="15" fill="rgb(236,70,23)" fg:x="74613" fg:w="62"/><text x="66.3102%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (62 samples, 0.05%)</title><rect x="66.0602%" y="357" width="0.0549%" height="15" fill="rgb(249,104,48)" fg:x="74613" fg:w="62"/><text x="66.3102%" y="367.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (62 samples, 0.05%)</title><rect x="66.0602%" y="341" width="0.0549%" height="15" fill="rgb(254,117,50)" fg:x="74613" fg:w="62"/><text x="66.3102%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (62 samples, 0.05%)</title><rect x="66.0602%" y="325" width="0.0549%" height="15" fill="rgb(223,152,4)" fg:x="74613" fg:w="62"/><text x="66.3102%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (54 samples, 0.05%)</title><rect x="66.0673%" y="309" width="0.0478%" height="15" fill="rgb(245,6,2)" fg:x="74621" fg:w="54"/><text x="66.3173%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (54 samples, 0.05%)</title><rect x="66.0673%" y="293" width="0.0478%" height="15" fill="rgb(249,150,24)" fg:x="74621" fg:w="54"/><text x="66.3173%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (190 samples, 0.17%)</title><rect x="66.0035%" y="501" width="0.1682%" height="15" fill="rgb(228,185,42)" fg:x="74549" fg:w="190"/><text x="66.2535%" y="511.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker::{{closure}} (182 samples, 0.16%)</title><rect x="66.0106%" y="485" width="0.1611%" height="15" fill="rgb(226,39,33)" fg:x="74557" fg:w="182"/><text x="66.2606%" y="495.50"></text></g><g><title>rmp::decode::read_marker (182 samples, 0.16%)</title><rect x="66.0106%" y="469" width="0.1611%" height="15" fill="rgb(221,166,19)" fg:x="74557" fg:w="182"/><text x="66.2606%" y="479.50"></text></g><g><title>rmp::marker::Marker::from_u8 (64 samples, 0.06%)</title><rect x="66.1151%" y="453" width="0.0567%" height="15" fill="rgb(209,109,2)" fg:x="74675" fg:w="64"/><text x="66.3651%" y="463.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (908 samples, 0.80%)</title><rect x="65.4015%" y="565" width="0.8039%" height="15" fill="rgb(252,216,26)" fg:x="73869" fg:w="908"/><text x="65.6515%" y="575.50"></text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (908 samples, 0.80%)</title><rect x="65.4015%" y="549" width="0.8039%" height="15" fill="rgb(227,173,36)" fg:x="73869" fg:w="908"/><text x="65.6515%" y="559.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (850 samples, 0.75%)</title><rect x="65.4528%" y="533" width="0.7526%" height="15" fill="rgb(209,90,7)" fg:x="73927" fg:w="850"/><text x="65.7028%" y="543.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker (228 samples, 0.20%)</title><rect x="66.0035%" y="517" width="0.2019%" height="15" fill="rgb(250,194,11)" fg:x="74549" fg:w="228"/><text x="66.2535%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (38 samples, 0.03%)</title><rect x="66.1717%" y="501" width="0.0336%" height="15" fill="rgb(220,72,50)" fg:x="74739" fg:w="38"/><text x="66.4217%" y="511.50"></text></g><g><title>core::mem::replace (38 samples, 0.03%)</title><rect x="66.1717%" y="485" width="0.0336%" height="15" fill="rgb(222,106,48)" fg:x="74739" fg:w="38"/><text x="66.4217%" y="495.50"></text></g><g><title>core::ptr::read (38 samples, 0.03%)</title><rect x="66.1717%" y="469" width="0.0336%" height="15" fill="rgb(216,220,45)" fg:x="74739" fg:w="38"/><text x="66.4217%" y="479.50"></text></g><g><title>&lt;&amp;mut A as serde::de::SeqAccess&gt;::next_element (1,973 samples, 1.75%)</title><rect x="65.3475%" y="613" width="1.7468%" height="15" fill="rgb(234,112,18)" fg:x="73808" fg:w="1973"/><text x="65.5975%" y="623.50"></text></g><g><title>serde::de::SeqAccess::next_element (1,973 samples, 1.75%)</title><rect x="65.3475%" y="597" width="1.7468%" height="15" fill="rgb(206,179,9)" fg:x="73808" fg:w="1973"/><text x="65.5975%" y="607.50"></text></g><g><title>&lt;rmp_serde::decode::SeqAccess&lt;R,C&gt; as serde::de::SeqAccess&gt;::next_element_seed (1,973 samples, 1.75%)</title><rect x="65.3475%" y="581" width="1.7468%" height="15" fill="rgb(215,115,40)" fg:x="73808" fg:w="1973"/><text x="65.5975%" y="591.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1,004 samples, 0.89%)</title><rect x="66.2054%" y="565" width="0.8889%" height="15" fill="rgb(222,69,34)" fg:x="74777" fg:w="1004"/><text x="66.4554%" y="575.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (112 samples, 0.10%)</title><rect x="67.0952%" y="613" width="0.0992%" height="15" fill="rgb(209,161,10)" fg:x="75782" fg:w="112"/><text x="67.3452%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (58 samples, 0.05%)</title><rect x="67.1943%" y="597" width="0.0514%" height="15" fill="rgb(217,6,38)" fg:x="75894" fg:w="58"/><text x="67.4443%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (994 samples, 0.88%)</title><rect x="67.1943%" y="613" width="0.8801%" height="15" fill="rgb(229,229,48)" fg:x="75894" fg:w="994"/><text x="67.4443%" y="623.50"></text></g><g><title>core::ptr::write (936 samples, 0.83%)</title><rect x="67.2457%" y="597" width="0.8287%" height="15" fill="rgb(225,21,28)" fg:x="75952" fg:w="936"/><text x="67.4957%" y="607.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (429 samples, 0.38%)</title><rect x="68.1762%" y="453" width="0.3798%" height="15" fill="rgb(206,33,13)" fg:x="77003" fg:w="429"/><text x="68.4262%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (546 samples, 0.48%)</title><rect x="68.0797%" y="549" width="0.4834%" height="15" fill="rgb(242,178,17)" fg:x="76894" fg:w="546"/><text x="68.3297%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (546 samples, 0.48%)</title><rect x="68.0797%" y="533" width="0.4834%" height="15" fill="rgb(220,162,5)" fg:x="76894" fg:w="546"/><text x="68.3297%" y="543.50"></text></g><g><title>alloc::alloc::alloc (543 samples, 0.48%)</title><rect x="68.0824%" y="517" width="0.4808%" height="15" fill="rgb(210,33,43)" fg:x="76897" fg:w="543"/><text x="68.3324%" y="527.50"></text></g><g><title>__rg_alloc (543 samples, 0.48%)</title><rect x="68.0824%" y="501" width="0.4808%" height="15" fill="rgb(216,116,54)" fg:x="76897" fg:w="543"/><text x="68.3324%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (543 samples, 0.48%)</title><rect x="68.0824%" y="485" width="0.4808%" height="15" fill="rgb(249,92,24)" fg:x="76897" fg:w="543"/><text x="68.3324%" y="495.50"></text></g><g><title>sn_rust_alloc (543 samples, 0.48%)</title><rect x="68.0824%" y="469" width="0.4808%" height="15" fill="rgb(231,189,14)" fg:x="76897" fg:w="543"/><text x="68.3324%" y="479.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_seq (3,954 samples, 3.50%)</title><rect x="65.0668%" y="629" width="3.5008%" height="15" fill="rgb(230,8,41)" fg:x="73491" fg:w="3954"/><text x="65.3168%" y="639.50">&lt;tr..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (557 samples, 0.49%)</title><rect x="68.0744%" y="613" width="0.4932%" height="15" fill="rgb(249,7,27)" fg:x="76888" fg:w="557"/><text x="68.3244%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (557 samples, 0.49%)</title><rect x="68.0744%" y="597" width="0.4932%" height="15" fill="rgb(232,86,5)" fg:x="76888" fg:w="557"/><text x="68.3244%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (551 samples, 0.49%)</title><rect x="68.0797%" y="581" width="0.4878%" height="15" fill="rgb(224,175,18)" fg:x="76894" fg:w="551"/><text x="68.3297%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (551 samples, 0.49%)</title><rect x="68.0797%" y="565" width="0.4878%" height="15" fill="rgb(220,129,12)" fg:x="76894" fg:w="551"/><text x="68.3297%" y="575.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_borrowed_str (49 samples, 0.04%)</title><rect x="68.6641%" y="613" width="0.0434%" height="15" fill="rgb(210,19,36)" fg:x="77554" fg:w="49"/><text x="68.9141%" y="623.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (19 samples, 0.02%)</title><rect x="69.6061%" y="581" width="0.0168%" height="15" fill="rgb(219,96,14)" fg:x="78618" fg:w="19"/><text x="69.8561%" y="591.50"></text></g><g><title>core::str::converts::from_utf8 (1,063 samples, 0.94%)</title><rect x="68.7074%" y="613" width="0.9411%" height="15" fill="rgb(249,106,1)" fg:x="77603" fg:w="1063"/><text x="68.9574%" y="623.50"></text></g><g><title>core::str::validations::run_utf8_validation (968 samples, 0.86%)</title><rect x="68.7916%" y="597" width="0.8570%" height="15" fill="rgb(249,155,20)" fg:x="77698" fg:w="968"/><text x="69.0416%" y="607.50"></text></g><g><title>core::str::validations::contains_nonascii (29 samples, 0.03%)</title><rect x="69.6229%" y="581" width="0.0257%" height="15" fill="rgb(244,168,9)" fg:x="78637" fg:w="29"/><text x="69.8729%" y="591.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::read_str_data (1,327 samples, 1.17%)</title><rect x="68.5684%" y="629" width="1.1749%" height="15" fill="rgb(216,23,50)" fg:x="77446" fg:w="1327"/><text x="68.8184%" y="639.50"></text></g><g><title>rmp_serde::decode::read_bin_data (107 samples, 0.09%)</title><rect x="69.6486%" y="613" width="0.0947%" height="15" fill="rgb(224,219,20)" fg:x="78666" fg:w="107"/><text x="69.8986%" y="623.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as rmp_serde::decode::ReadSlice&gt;::read_slice (107 samples, 0.09%)</title><rect x="69.6486%" y="597" width="0.0947%" height="15" fill="rgb(222,156,15)" fg:x="78666" fg:w="107"/><text x="69.8986%" y="607.50"></text></g><g><title>rmp::decode::RmpRead::read_u8 (107 samples, 0.09%)</title><rect x="69.7433%" y="565" width="0.0947%" height="15" fill="rgb(231,97,17)" fg:x="78773" fg:w="107"/><text x="69.9933%" y="575.50"></text></g><g><title>&lt;T as rmp::decode::RmpRead&gt;::read_exact_buf (107 samples, 0.09%)</title><rect x="69.7433%" y="549" width="0.0947%" height="15" fill="rgb(218,70,48)" fg:x="78773" fg:w="107"/><text x="69.9933%" y="559.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as std::io::Read&gt;::read_exact (107 samples, 0.09%)</title><rect x="69.7433%" y="533" width="0.0947%" height="15" fill="rgb(212,196,52)" fg:x="78773" fg:w="107"/><text x="69.9933%" y="543.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_exact (107 samples, 0.09%)</title><rect x="69.7433%" y="517" width="0.0947%" height="15" fill="rgb(243,203,18)" fg:x="78773" fg:w="107"/><text x="69.9933%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (291 samples, 0.26%)</title><rect x="69.7433%" y="613" width="0.2576%" height="15" fill="rgb(252,125,41)" fg:x="78773" fg:w="291"/><text x="69.9933%" y="623.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker::{{closure}} (291 samples, 0.26%)</title><rect x="69.7433%" y="597" width="0.2576%" height="15" fill="rgb(223,180,33)" fg:x="78773" fg:w="291"/><text x="69.9933%" y="607.50"></text></g><g><title>rmp::decode::read_marker (291 samples, 0.26%)</title><rect x="69.7433%" y="581" width="0.2576%" height="15" fill="rgb(254,159,46)" fg:x="78773" fg:w="291"/><text x="69.9933%" y="591.50"></text></g><g><title>rmp::marker::Marker::from_u8 (184 samples, 0.16%)</title><rect x="69.8381%" y="565" width="0.1629%" height="15" fill="rgb(254,38,10)" fg:x="78880" fg:w="184"/><text x="70.0881%" y="575.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker (350 samples, 0.31%)</title><rect x="69.7433%" y="629" width="0.3099%" height="15" fill="rgb(208,217,32)" fg:x="78773" fg:w="350"/><text x="69.9933%" y="639.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (59 samples, 0.05%)</title><rect x="70.0010%" y="613" width="0.0522%" height="15" fill="rgb(221,120,13)" fg:x="79064" fg:w="59"/><text x="70.2510%" y="623.50"></text></g><g><title>core::mem::replace (59 samples, 0.05%)</title><rect x="70.0010%" y="597" width="0.0522%" height="15" fill="rgb(246,54,52)" fg:x="79064" fg:w="59"/><text x="70.2510%" y="607.50"></text></g><g><title>core::ptr::write (55 samples, 0.05%)</title><rect x="70.0045%" y="581" width="0.0487%" height="15" fill="rgb(242,34,25)" fg:x="79068" fg:w="55"/><text x="70.2545%" y="591.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_value (6,019 samples, 5.33%)</title><rect x="64.7428%" y="725" width="5.3290%" height="15" fill="rgb(247,209,9)" fg:x="73125" fg:w="6019"/><text x="64.9928%" y="735.50">&lt;&amp;mut A..</text></g><g><title>serde::de::MapAccess::next_value (6,019 samples, 5.33%)</title><rect x="64.7428%" y="709" width="5.3290%" height="15" fill="rgb(228,71,26)" fg:x="73125" fg:w="6019"/><text x="64.9928%" y="719.50">serde::..</text></g><g><title>&lt;rmp_serde::decode::MapAccess&lt;R,C&gt; as serde::de::MapAccess&gt;::next_value_seed (6,019 samples, 5.33%)</title><rect x="64.7428%" y="693" width="5.3290%" height="15" fill="rgb(222,145,49)" fg:x="73125" fg:w="6019"/><text x="64.9928%" y="703.50">&lt;rmp_se..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6,019 samples, 5.33%)</title><rect x="64.7428%" y="677" width="5.3290%" height="15" fill="rgb(218,121,17)" fg:x="73125" fg:w="6019"/><text x="64.9928%" y="687.50">&lt;core::..</text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (6,019 samples, 5.33%)</title><rect x="64.7428%" y="661" width="5.3290%" height="15" fill="rgb(244,50,7)" fg:x="73125" fg:w="6019"/><text x="64.9928%" y="671.50">tremor_..</text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (6,019 samples, 5.33%)</title><rect x="64.7428%" y="645" width="5.3290%" height="15" fill="rgb(246,229,37)" fg:x="73125" fg:w="6019"/><text x="64.9928%" y="655.50">&lt;&amp;mut r..</text></g><g><title>rmp_serde::decode::read_u8 (13 samples, 0.01%)</title><rect x="70.0603%" y="629" width="0.0115%" height="15" fill="rgb(225,18,5)" fg:x="79131" fg:w="13"/><text x="70.3103%" y="639.50"></text></g><g><title>byteorder::io::ReadBytesExt::read_u8 (13 samples, 0.01%)</title><rect x="70.0603%" y="613" width="0.0115%" height="15" fill="rgb(213,204,8)" fg:x="79131" fg:w="13"/><text x="70.3103%" y="623.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as std::io::Read&gt;::read_exact (13 samples, 0.01%)</title><rect x="70.0603%" y="597" width="0.0115%" height="15" fill="rgb(238,103,6)" fg:x="79131" fg:w="13"/><text x="70.3103%" y="607.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_exact (13 samples, 0.01%)</title><rect x="70.0603%" y="581" width="0.0115%" height="15" fill="rgb(222,25,35)" fg:x="79131" fg:w="13"/><text x="70.3103%" y="591.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 0.04%)</title><rect x="70.4463%" y="693" width="0.0407%" height="15" fill="rgb(213,203,35)" fg:x="79567" fg:w="46"/><text x="70.6963%" y="703.50"></text></g><g><title>beef::generic::Cow&lt;T,U&gt;::borrow (13 samples, 0.01%)</title><rect x="70.4870%" y="661" width="0.0115%" height="15" fill="rgb(221,79,53)" fg:x="79613" fg:w="13"/><text x="70.7370%" y="671.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;mut B&gt; for &amp;A&gt;::eq (571 samples, 0.51%)</title><rect x="70.4870%" y="693" width="0.5055%" height="15" fill="rgb(243,200,35)" fg:x="79613" fg:w="571"/><text x="70.7370%" y="703.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (571 samples, 0.51%)</title><rect x="70.4870%" y="677" width="0.5055%" height="15" fill="rgb(248,60,25)" fg:x="79613" fg:w="571"/><text x="70.7370%" y="687.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (558 samples, 0.49%)</title><rect x="70.4986%" y="661" width="0.4940%" height="15" fill="rgb(227,53,46)" fg:x="79626" fg:w="558"/><text x="70.7486%" y="671.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (558 samples, 0.49%)</title><rect x="70.4986%" y="645" width="0.4940%" height="15" fill="rgb(216,120,32)" fg:x="79626" fg:w="558"/><text x="70.7486%" y="655.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (558 samples, 0.49%)</title><rect x="70.4986%" y="629" width="0.4940%" height="15" fill="rgb(220,134,1)" fg:x="79626" fg:w="558"/><text x="70.7486%" y="639.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (558 samples, 0.49%)</title><rect x="70.4986%" y="613" width="0.4940%" height="15" fill="rgb(237,168,5)" fg:x="79626" fg:w="558"/><text x="70.7486%" y="623.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (558 samples, 0.49%)</title><rect x="70.4986%" y="597" width="0.4940%" height="15" fill="rgb(231,100,33)" fg:x="79626" fg:w="558"/><text x="70.7486%" y="607.50"></text></g><g><title>[libc-2.31.so] (233 samples, 0.21%)</title><rect x="70.7863%" y="581" width="0.2063%" height="15" fill="rgb(236,177,47)" fg:x="79951" fg:w="233"/><text x="71.0363%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (56 samples, 0.05%)</title><rect x="71.2511%" y="661" width="0.0496%" height="15" fill="rgb(235,7,49)" fg:x="80476" fg:w="56"/><text x="71.5011%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (56 samples, 0.05%)</title><rect x="71.2511%" y="645" width="0.0496%" height="15" fill="rgb(232,119,22)" fg:x="80476" fg:w="56"/><text x="71.5011%" y="655.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::insert (2,303 samples, 2.04%)</title><rect x="70.0718%" y="725" width="2.0390%" height="15" fill="rgb(254,73,53)" fg:x="79144" fg:w="2303"/><text x="70.3218%" y="735.50">h..</text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::insert (1,988 samples, 1.76%)</title><rect x="70.3507%" y="709" width="1.7601%" height="15" fill="rgb(251,35,20)" fg:x="79459" fg:w="1988"/><text x="70.6007%" y="719.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::insert_idx (1,263 samples, 1.12%)</title><rect x="70.9926%" y="693" width="1.1182%" height="15" fill="rgb(241,119,20)" fg:x="80184" fg:w="1263"/><text x="71.2426%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (972 samples, 0.86%)</title><rect x="71.2502%" y="677" width="0.8606%" height="15" fill="rgb(207,102,14)" fg:x="80475" fg:w="972"/><text x="71.5002%" y="687.50"></text></g><g><title>core::ptr::write (915 samples, 0.81%)</title><rect x="71.3007%" y="661" width="0.8101%" height="15" fill="rgb(248,201,50)" fg:x="80532" fg:w="915"/><text x="71.5507%" y="671.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (1,117 samples, 0.99%)</title><rect x="72.1108%" y="533" width="0.9890%" height="15" fill="rgb(222,185,44)" fg:x="81447" fg:w="1117"/><text x="72.3608%" y="543.50"></text></g><g><title>halfbrown::HashMap&lt;K,V&gt;::with_capacity (1,121 samples, 0.99%)</title><rect x="72.1108%" y="725" width="0.9925%" height="15" fill="rgb(218,107,18)" fg:x="81447" fg:w="1121"/><text x="72.3608%" y="735.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V&gt;::with_capacity (1,121 samples, 0.99%)</title><rect x="72.1108%" y="709" width="0.9925%" height="15" fill="rgb(237,177,39)" fg:x="81447" fg:w="1121"/><text x="72.3608%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,121 samples, 0.99%)</title><rect x="72.1108%" y="693" width="0.9925%" height="15" fill="rgb(246,69,6)" fg:x="81447" fg:w="1121"/><text x="72.3608%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,121 samples, 0.99%)</title><rect x="72.1108%" y="677" width="0.9925%" height="15" fill="rgb(234,208,37)" fg:x="81447" fg:w="1121"/><text x="72.3608%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,121 samples, 0.99%)</title><rect x="72.1108%" y="661" width="0.9925%" height="15" fill="rgb(225,4,6)" fg:x="81447" fg:w="1121"/><text x="72.3608%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,121 samples, 0.99%)</title><rect x="72.1108%" y="645" width="0.9925%" height="15" fill="rgb(233,45,0)" fg:x="81447" fg:w="1121"/><text x="72.3608%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,121 samples, 0.99%)</title><rect x="72.1108%" y="629" width="0.9925%" height="15" fill="rgb(226,136,5)" fg:x="81447" fg:w="1121"/><text x="72.3608%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,121 samples, 0.99%)</title><rect x="72.1108%" y="613" width="0.9925%" height="15" fill="rgb(211,91,47)" fg:x="81447" fg:w="1121"/><text x="72.3608%" y="623.50"></text></g><g><title>alloc::alloc::alloc (1,121 samples, 0.99%)</title><rect x="72.1108%" y="597" width="0.9925%" height="15" fill="rgb(242,88,51)" fg:x="81447" fg:w="1121"/><text x="72.3608%" y="607.50"></text></g><g><title>__rg_alloc (1,121 samples, 0.99%)</title><rect x="72.1108%" y="581" width="0.9925%" height="15" fill="rgb(230,91,28)" fg:x="81447" fg:w="1121"/><text x="72.3608%" y="591.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1,121 samples, 0.99%)</title><rect x="72.1108%" y="565" width="0.9925%" height="15" fill="rgb(254,186,29)" fg:x="81447" fg:w="1121"/><text x="72.3608%" y="575.50"></text></g><g><title>sn_rust_alloc (1,121 samples, 0.99%)</title><rect x="72.1108%" y="549" width="0.9925%" height="15" fill="rgb(238,6,4)" fg:x="81447" fg:w="1121"/><text x="72.3608%" y="559.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::run::{{closure}} (12,223 samples, 10.82%)</title><rect x="62.3124%" y="949" width="10.8219%" height="15" fill="rgb(221,151,16)" fg:x="70380" fg:w="12223"/><text x="62.5624%" y="959.50">tremor_runtime::..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,223 samples, 10.82%)</title><rect x="62.3124%" y="933" width="10.8219%" height="15" fill="rgb(251,143,52)" fg:x="70380" fg:w="12223"/><text x="62.5624%" y="943.50">&lt;core::future::f..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_source_reply::{{closure}} (12,223 samples, 10.82%)</title><rect x="62.3124%" y="917" width="10.8219%" height="15" fill="rgb(206,90,15)" fg:x="70380" fg:w="12223"/><text x="62.5624%" y="927.50">tremor_runtime::..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,223 samples, 10.82%)</title><rect x="62.3124%" y="901" width="10.8219%" height="15" fill="rgb(218,35,8)" fg:x="70380" fg:w="12223"/><text x="62.5624%" y="911.50">&lt;core::future::f..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_data::{{closure}} (12,223 samples, 10.82%)</title><rect x="62.3124%" y="885" width="10.8219%" height="15" fill="rgb(239,215,6)" fg:x="70380" fg:w="12223"/><text x="62.5624%" y="895.50">tremor_runtime::..</text></g><g><title>tremor_runtime::connectors::source::build_events (12,223 samples, 10.82%)</title><rect x="62.3124%" y="869" width="10.8219%" height="15" fill="rgb(245,116,39)" fg:x="70380" fg:w="12223"/><text x="62.5624%" y="879.50">tremor_runtime::..</text></g><g><title>tremor_script::srs::EventPayload::try_new (12,223 samples, 10.82%)</title><rect x="62.3124%" y="853" width="10.8219%" height="15" fill="rgb(242,65,28)" fg:x="70380" fg:w="12223"/><text x="62.5624%" y="863.50">tremor_script::s..</text></g><g><title>tremor_runtime::connectors::source::build_last_events::{{closure}} (12,223 samples, 10.82%)</title><rect x="62.3124%" y="837" width="10.8219%" height="15" fill="rgb(252,132,53)" fg:x="70380" fg:w="12223"/><text x="62.5624%" y="847.50">tremor_runtime::..</text></g><g><title>&lt;tremor_runtime::codec::msgpack::MsgPack as tremor_runtime::codec::Codec&gt;::decode (12,223 samples, 10.82%)</title><rect x="62.3124%" y="821" width="10.8219%" height="15" fill="rgb(224,159,50)" fg:x="70380" fg:w="12223"/><text x="62.5624%" y="831.50">&lt;tremor_runtime:..</text></g><g><title>rmp_serde::decode::from_slice (12,223 samples, 10.82%)</title><rect x="62.3124%" y="805" width="10.8219%" height="15" fill="rgb(224,93,4)" fg:x="70380" fg:w="12223"/><text x="62.5624%" y="815.50">rmp_serde::decod..</text></g><g><title>rmp_serde::decode::from_read_ref (12,223 samples, 10.82%)</title><rect x="62.3124%" y="789" width="10.8219%" height="15" fill="rgb(208,81,34)" fg:x="70380" fg:w="12223"/><text x="62.5624%" y="799.50">rmp_serde::decod..</text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (12,223 samples, 10.82%)</title><rect x="62.3124%" y="773" width="10.8219%" height="15" fill="rgb(233,92,54)" fg:x="70380" fg:w="12223"/><text x="62.5624%" y="783.50">tremor_value::se..</text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (12,223 samples, 10.82%)</title><rect x="62.3124%" y="757" width="10.8219%" height="15" fill="rgb(237,21,14)" fg:x="70380" fg:w="12223"/><text x="62.5624%" y="767.50">&lt;&amp;mut rmp_serde:..</text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_map (12,223 samples, 10.82%)</title><rect x="62.3124%" y="741" width="10.8219%" height="15" fill="rgb(249,128,51)" fg:x="70380" fg:w="12223"/><text x="62.5624%" y="751.50">&lt;tremor_value::s..</text></g><g><title>tremor_value::value::from::&lt;impl core::convert::From&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; for tremor_value::value::Value&gt;::from (35 samples, 0.03%)</title><rect x="73.1033%" y="725" width="0.0310%" height="15" fill="rgb(223,129,24)" fg:x="82568" fg:w="35"/><text x="73.3533%" y="735.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (35 samples, 0.03%)</title><rect x="73.1033%" y="709" width="0.0310%" height="15" fill="rgb(231,168,25)" fg:x="82568" fg:w="35"/><text x="73.3533%" y="719.50"></text></g><g><title>alloc::alloc::exchange_malloc (35 samples, 0.03%)</title><rect x="73.1033%" y="693" width="0.0310%" height="15" fill="rgb(224,39,20)" fg:x="82568" fg:w="35"/><text x="73.3533%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (35 samples, 0.03%)</title><rect x="73.1033%" y="677" width="0.0310%" height="15" fill="rgb(225,152,53)" fg:x="82568" fg:w="35"/><text x="73.3533%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (35 samples, 0.03%)</title><rect x="73.1033%" y="661" width="0.0310%" height="15" fill="rgb(252,17,24)" fg:x="82568" fg:w="35"/><text x="73.3533%" y="671.50"></text></g><g><title>alloc::alloc::alloc (35 samples, 0.03%)</title><rect x="73.1033%" y="645" width="0.0310%" height="15" fill="rgb(250,114,30)" fg:x="82568" fg:w="35"/><text x="73.3533%" y="655.50"></text></g><g><title>__rg_alloc (35 samples, 0.03%)</title><rect x="73.1033%" y="629" width="0.0310%" height="15" fill="rgb(229,5,4)" fg:x="82568" fg:w="35"/><text x="73.3533%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (35 samples, 0.03%)</title><rect x="73.1033%" y="613" width="0.0310%" height="15" fill="rgb(225,176,49)" fg:x="82568" fg:w="35"/><text x="73.3533%" y="623.50"></text></g><g><title>sn_rust_alloc (35 samples, 0.03%)</title><rect x="73.1033%" y="597" width="0.0310%" height="15" fill="rgb(224,221,49)" fg:x="82568" fg:w="35"/><text x="73.3533%" y="607.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (35 samples, 0.03%)</title><rect x="73.1033%" y="581" width="0.0310%" height="15" fill="rgb(253,169,27)" fg:x="82568" fg:w="35"/><text x="73.3533%" y="591.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (13 samples, 0.01%)</title><rect x="73.1582%" y="933" width="0.0115%" height="15" fill="rgb(211,206,16)" fg:x="82630" fg:w="13"/><text x="73.4082%" y="943.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (41 samples, 0.04%)</title><rect x="73.1414%" y="949" width="0.0363%" height="15" fill="rgb(244,87,35)" fg:x="82611" fg:w="41"/><text x="73.3914%" y="959.50"></text></g><g><title>tremor_runtime::connectors::utils::metrics::SourceReporter::periodic_flush (15 samples, 0.01%)</title><rect x="73.1777%" y="949" width="0.0133%" height="15" fill="rgb(246,28,10)" fg:x="82652" fg:w="15"/><text x="73.4277%" y="959.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (78 samples, 0.07%)</title><rect x="73.2441%" y="789" width="0.0691%" height="15" fill="rgb(229,12,44)" fg:x="82727" fg:w="78"/><text x="73.4941%" y="799.50"></text></g><g><title>core::mem::replace (78 samples, 0.07%)</title><rect x="73.2441%" y="773" width="0.0691%" height="15" fill="rgb(210,145,37)" fg:x="82727" fg:w="78"/><text x="73.4941%" y="783.50"></text></g><g><title>core::ptr::read (78 samples, 0.07%)</title><rect x="73.2441%" y="757" width="0.0691%" height="15" fill="rgb(227,112,52)" fg:x="82727" fg:w="78"/><text x="73.4941%" y="767.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (113 samples, 0.10%)</title><rect x="73.2317%" y="805" width="0.1000%" height="15" fill="rgb(238,155,34)" fg:x="82713" fg:w="113"/><text x="73.4817%" y="815.50"></text></g><g><title>core::mem::drop (21 samples, 0.02%)</title><rect x="73.3131%" y="789" width="0.0186%" height="15" fill="rgb(239,226,36)" fg:x="82805" fg:w="21"/><text x="73.5631%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (21 samples, 0.02%)</title><rect x="73.3131%" y="773" width="0.0186%" height="15" fill="rgb(230,16,23)" fg:x="82805" fg:w="21"/><text x="73.5631%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (122 samples, 0.11%)</title><rect x="73.3317%" y="805" width="0.1080%" height="15" fill="rgb(236,171,36)" fg:x="82826" fg:w="122"/><text x="73.5817%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (118 samples, 0.10%)</title><rect x="73.3353%" y="789" width="0.1045%" height="15" fill="rgb(221,22,14)" fg:x="82830" fg:w="118"/><text x="73.5853%" y="799.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (118 samples, 0.10%)</title><rect x="73.3353%" y="773" width="0.1045%" height="15" fill="rgb(242,43,11)" fg:x="82830" fg:w="118"/><text x="73.5853%" y="783.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (113 samples, 0.10%)</title><rect x="73.3397%" y="757" width="0.1000%" height="15" fill="rgb(232,69,23)" fg:x="82835" fg:w="113"/><text x="73.5897%" y="767.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (113 samples, 0.10%)</title><rect x="73.3397%" y="741" width="0.1000%" height="15" fill="rgb(216,180,54)" fg:x="82835" fg:w="113"/><text x="73.5897%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (113 samples, 0.10%)</title><rect x="73.3397%" y="725" width="0.1000%" height="15" fill="rgb(216,5,24)" fg:x="82835" fg:w="113"/><text x="73.5897%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_swap (113 samples, 0.10%)</title><rect x="73.3397%" y="709" width="0.1000%" height="15" fill="rgb(225,89,9)" fg:x="82835" fg:w="113"/><text x="73.5897%" y="719.50"></text></g><g><title>core::task::wake::Waker::will_wake (15 samples, 0.01%)</title><rect x="73.4460%" y="805" width="0.0133%" height="15" fill="rgb(243,75,33)" fg:x="82955" fg:w="15"/><text x="73.6960%" y="815.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (15 samples, 0.01%)</title><rect x="73.4460%" y="789" width="0.0133%" height="15" fill="rgb(247,141,45)" fg:x="82955" fg:w="15"/><text x="73.6960%" y="799.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (15 samples, 0.01%)</title><rect x="73.4460%" y="773" width="0.0133%" height="15" fill="rgb(232,177,36)" fg:x="82955" fg:w="15"/><text x="73.6960%" y="783.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (15 samples, 0.01%)</title><rect x="73.4460%" y="757" width="0.0133%" height="15" fill="rgb(219,125,36)" fg:x="82955" fg:w="15"/><text x="73.6960%" y="767.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (14 samples, 0.01%)</title><rect x="73.4707%" y="773" width="0.0124%" height="15" fill="rgb(227,94,9)" fg:x="82983" fg:w="14"/><text x="73.7207%" y="783.50"></text></g><g><title>std::sync::poison::Flag::borrow (14 samples, 0.01%)</title><rect x="73.4707%" y="757" width="0.0124%" height="15" fill="rgb(240,34,52)" fg:x="82983" fg:w="14"/><text x="73.7207%" y="767.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (484 samples, 0.43%)</title><rect x="73.1980%" y="933" width="0.4285%" height="15" fill="rgb(216,45,12)" fg:x="82675" fg:w="484"/><text x="73.4480%" y="943.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (484 samples, 0.43%)</title><rect x="73.1980%" y="917" width="0.4285%" height="15" fill="rgb(246,21,19)" fg:x="82675" fg:w="484"/><text x="73.4480%" y="927.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (484 samples, 0.43%)</title><rect x="73.1980%" y="901" width="0.4285%" height="15" fill="rgb(213,98,42)" fg:x="82675" fg:w="484"/><text x="73.4480%" y="911.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (484 samples, 0.43%)</title><rect x="73.1980%" y="885" width="0.4285%" height="15" fill="rgb(250,136,47)" fg:x="82675" fg:w="484"/><text x="73.4480%" y="895.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (484 samples, 0.43%)</title><rect x="73.1980%" y="869" width="0.4285%" height="15" fill="rgb(251,124,27)" fg:x="82675" fg:w="484"/><text x="73.4480%" y="879.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (484 samples, 0.43%)</title><rect x="73.1980%" y="853" width="0.4285%" height="15" fill="rgb(229,180,14)" fg:x="82675" fg:w="484"/><text x="73.4480%" y="863.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (484 samples, 0.43%)</title><rect x="73.1980%" y="837" width="0.4285%" height="15" fill="rgb(245,216,25)" fg:x="82675" fg:w="484"/><text x="73.4480%" y="847.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (484 samples, 0.43%)</title><rect x="73.1980%" y="821" width="0.4285%" height="15" fill="rgb(251,43,5)" fg:x="82675" fg:w="484"/><text x="73.4480%" y="831.50"></text></g><g><title>event_listener::Inner::lock (189 samples, 0.17%)</title><rect x="73.4592%" y="805" width="0.1673%" height="15" fill="rgb(250,128,24)" fg:x="82970" fg:w="189"/><text x="73.7092%" y="815.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (176 samples, 0.16%)</title><rect x="73.4707%" y="789" width="0.1558%" height="15" fill="rgb(217,117,27)" fg:x="82983" fg:w="176"/><text x="73.7207%" y="799.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (162 samples, 0.14%)</title><rect x="73.4831%" y="773" width="0.1434%" height="15" fill="rgb(245,147,4)" fg:x="82997" fg:w="162"/><text x="73.7331%" y="783.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (162 samples, 0.14%)</title><rect x="73.4831%" y="757" width="0.1434%" height="15" fill="rgb(242,201,35)" fg:x="82997" fg:w="162"/><text x="73.7331%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (162 samples, 0.14%)</title><rect x="73.4831%" y="741" width="0.1434%" height="15" fill="rgb(218,181,1)" fg:x="82997" fg:w="162"/><text x="73.7331%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (162 samples, 0.14%)</title><rect x="73.4831%" y="725" width="0.1434%" height="15" fill="rgb(222,6,29)" fg:x="82997" fg:w="162"/><text x="73.7331%" y="735.50"></text></g><g><title>alloc::borrow::Cow&lt;B&gt;::into_owned (16 samples, 0.01%)</title><rect x="73.8267%" y="709" width="0.0142%" height="15" fill="rgb(208,186,3)" fg:x="83385" fg:w="16"/><text x="74.0767%" y="719.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (15 samples, 0.01%)</title><rect x="73.8275%" y="693" width="0.0133%" height="15" fill="rgb(216,36,26)" fg:x="83386" fg:w="15"/><text x="74.0775%" y="703.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (14 samples, 0.01%)</title><rect x="73.8284%" y="677" width="0.0124%" height="15" fill="rgb(248,201,23)" fg:x="83387" fg:w="14"/><text x="74.0784%" y="687.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (53 samples, 0.05%)</title><rect x="73.8408%" y="709" width="0.0469%" height="15" fill="rgb(251,170,31)" fg:x="83401" fg:w="53"/><text x="74.0908%" y="719.50"></text></g><g><title>sn_rust_dealloc (41 samples, 0.04%)</title><rect x="73.9329%" y="629" width="0.0363%" height="15" fill="rgb(207,110,25)" fg:x="83505" fg:w="41"/><text x="74.1829%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (70 samples, 0.06%)</title><rect x="73.9205%" y="677" width="0.0620%" height="15" fill="rgb(250,54,15)" fg:x="83491" fg:w="70"/><text x="74.1705%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt;&gt; (64 samples, 0.06%)</title><rect x="73.9258%" y="661" width="0.0567%" height="15" fill="rgb(227,68,33)" fg:x="83497" fg:w="64"/><text x="74.1758%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (62 samples, 0.05%)</title><rect x="73.9276%" y="645" width="0.0549%" height="15" fill="rgb(238,34,41)" fg:x="83499" fg:w="62"/><text x="74.1776%" y="655.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (15 samples, 0.01%)</title><rect x="73.9692%" y="629" width="0.0133%" height="15" fill="rgb(220,11,15)" fg:x="83546" fg:w="15"/><text x="74.2192%" y="639.50"></text></g><g><title>sn_rust_dealloc (15 samples, 0.01%)</title><rect x="73.9825%" y="677" width="0.0133%" height="15" fill="rgb(246,111,35)" fg:x="83561" fg:w="15"/><text x="74.2325%" y="687.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (21 samples, 0.02%)</title><rect x="74.0011%" y="645" width="0.0186%" height="15" fill="rgb(209,88,53)" fg:x="83582" fg:w="21"/><text x="74.2511%" y="655.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (13 samples, 0.01%)</title><rect x="74.0197%" y="645" width="0.0115%" height="15" fill="rgb(231,185,47)" fg:x="83603" fg:w="13"/><text x="74.2697%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (13 samples, 0.01%)</title><rect x="74.0418%" y="565" width="0.0115%" height="15" fill="rgb(233,154,1)" fg:x="83628" fg:w="13"/><text x="74.2918%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (13 samples, 0.01%)</title><rect x="74.0418%" y="549" width="0.0115%" height="15" fill="rgb(225,15,46)" fg:x="83628" fg:w="13"/><text x="74.2918%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (13 samples, 0.01%)</title><rect x="74.0418%" y="533" width="0.0115%" height="15" fill="rgb(211,135,41)" fg:x="83628" fg:w="13"/><text x="74.2918%" y="543.50"></text></g><g><title>sn_rust_alloc (12 samples, 0.01%)</title><rect x="74.0427%" y="517" width="0.0106%" height="15" fill="rgb(208,54,0)" fg:x="83629" fg:w="12"/><text x="74.2927%" y="527.50"></text></g><g><title>halfbrown::raw_entry::RawVacantEntryMut&lt;K,V,S&gt;::insert (57 samples, 0.05%)</title><rect x="74.0312%" y="629" width="0.0505%" height="15" fill="rgb(244,136,14)" fg:x="83616" fg:w="57"/><text x="74.2812%" y="639.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawVacantEntryMut&lt;K,V,S&gt;::insert (55 samples, 0.05%)</title><rect x="74.0330%" y="613" width="0.0487%" height="15" fill="rgb(241,56,14)" fg:x="83618" fg:w="55"/><text x="74.2830%" y="623.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::insert_idx (54 samples, 0.05%)</title><rect x="74.0338%" y="597" width="0.0478%" height="15" fill="rgb(205,80,24)" fg:x="83619" fg:w="54"/><text x="74.2838%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (51 samples, 0.05%)</title><rect x="74.0365%" y="581" width="0.0452%" height="15" fill="rgb(220,57,4)" fg:x="83622" fg:w="51"/><text x="74.2865%" y="591.50"></text></g><g><title>core::ptr::write (29 samples, 0.03%)</title><rect x="74.0560%" y="565" width="0.0257%" height="15" fill="rgb(226,193,50)" fg:x="83644" fg:w="29"/><text x="74.3060%" y="575.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (50 samples, 0.04%)</title><rect x="74.0843%" y="581" width="0.0443%" height="15" fill="rgb(231,168,22)" fg:x="83676" fg:w="50"/><text x="74.3343%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (13 samples, 0.01%)</title><rect x="74.1171%" y="565" width="0.0115%" height="15" fill="rgb(254,215,14)" fg:x="83713" fg:w="13"/><text x="74.3671%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (13 samples, 0.01%)</title><rect x="74.1171%" y="549" width="0.0115%" height="15" fill="rgb(211,115,16)" fg:x="83713" fg:w="13"/><text x="74.3671%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (13 samples, 0.01%)</title><rect x="74.1171%" y="533" width="0.0115%" height="15" fill="rgb(236,210,16)" fg:x="83713" fg:w="13"/><text x="74.3671%" y="543.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (105 samples, 0.09%)</title><rect x="74.1507%" y="389" width="0.0930%" height="15" fill="rgb(221,94,12)" fg:x="83751" fg:w="105"/><text x="74.4007%" y="399.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (404 samples, 0.36%)</title><rect x="73.8878%" y="709" width="0.3577%" height="15" fill="rgb(235,218,49)" fg:x="83454" fg:w="404"/><text x="74.1378%" y="719.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (386 samples, 0.34%)</title><rect x="73.9037%" y="693" width="0.3418%" height="15" fill="rgb(217,114,14)" fg:x="83472" fg:w="386"/><text x="74.1537%" y="703.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (280 samples, 0.25%)</title><rect x="73.9975%" y="677" width="0.2479%" height="15" fill="rgb(216,145,22)" fg:x="83578" fg:w="280"/><text x="74.2475%" y="687.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (278 samples, 0.25%)</title><rect x="73.9993%" y="661" width="0.2461%" height="15" fill="rgb(217,112,39)" fg:x="83580" fg:w="278"/><text x="74.2493%" y="671.50"></text></g><g><title>halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt;::or_insert_with (242 samples, 0.21%)</title><rect x="74.0312%" y="645" width="0.2143%" height="15" fill="rgb(225,85,32)" fg:x="83616" fg:w="242"/><text x="74.2812%" y="655.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut::{{closure}} (185 samples, 0.16%)</title><rect x="74.0816%" y="629" width="0.1638%" height="15" fill="rgb(245,209,47)" fg:x="83673" fg:w="185"/><text x="74.3316%" y="639.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (182 samples, 0.16%)</title><rect x="74.0843%" y="613" width="0.1611%" height="15" fill="rgb(218,220,15)" fg:x="83676" fg:w="182"/><text x="74.3343%" y="623.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (182 samples, 0.16%)</title><rect x="74.0843%" y="597" width="0.1611%" height="15" fill="rgb(222,202,31)" fg:x="83676" fg:w="182"/><text x="74.3343%" y="607.50"></text></g><g><title>halfbrown::HashMap&lt;K,V&gt;::with_capacity (132 samples, 0.12%)</title><rect x="74.1286%" y="581" width="0.1169%" height="15" fill="rgb(243,203,4)" fg:x="83726" fg:w="132"/><text x="74.3786%" y="591.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V&gt;::with_capacity (130 samples, 0.12%)</title><rect x="74.1303%" y="565" width="0.1151%" height="15" fill="rgb(237,92,17)" fg:x="83728" fg:w="130"/><text x="74.3803%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (130 samples, 0.12%)</title><rect x="74.1303%" y="549" width="0.1151%" height="15" fill="rgb(231,119,7)" fg:x="83728" fg:w="130"/><text x="74.3803%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (130 samples, 0.12%)</title><rect x="74.1303%" y="533" width="0.1151%" height="15" fill="rgb(237,82,41)" fg:x="83728" fg:w="130"/><text x="74.3803%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (130 samples, 0.12%)</title><rect x="74.1303%" y="517" width="0.1151%" height="15" fill="rgb(226,81,48)" fg:x="83728" fg:w="130"/><text x="74.3803%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (130 samples, 0.12%)</title><rect x="74.1303%" y="501" width="0.1151%" height="15" fill="rgb(234,70,51)" fg:x="83728" fg:w="130"/><text x="74.3803%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (130 samples, 0.12%)</title><rect x="74.1303%" y="485" width="0.1151%" height="15" fill="rgb(251,86,4)" fg:x="83728" fg:w="130"/><text x="74.3803%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (130 samples, 0.12%)</title><rect x="74.1303%" y="469" width="0.1151%" height="15" fill="rgb(244,144,28)" fg:x="83728" fg:w="130"/><text x="74.3803%" y="479.50"></text></g><g><title>alloc::alloc::alloc (130 samples, 0.12%)</title><rect x="74.1303%" y="453" width="0.1151%" height="15" fill="rgb(232,161,39)" fg:x="83728" fg:w="130"/><text x="74.3803%" y="463.50"></text></g><g><title>__rg_alloc (130 samples, 0.12%)</title><rect x="74.1303%" y="437" width="0.1151%" height="15" fill="rgb(247,34,51)" fg:x="83728" fg:w="130"/><text x="74.3803%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (130 samples, 0.12%)</title><rect x="74.1303%" y="421" width="0.1151%" height="15" fill="rgb(225,132,2)" fg:x="83728" fg:w="130"/><text x="74.3803%" y="431.50"></text></g><g><title>sn_rust_alloc (129 samples, 0.11%)</title><rect x="74.1312%" y="405" width="0.1142%" height="15" fill="rgb(209,159,44)" fg:x="83729" fg:w="129"/><text x="74.3812%" y="415.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (593 samples, 0.53%)</title><rect x="73.7222%" y="741" width="0.5250%" height="15" fill="rgb(251,214,1)" fg:x="83267" fg:w="593"/><text x="73.9722%" y="751.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (548 samples, 0.49%)</title><rect x="73.7620%" y="725" width="0.4852%" height="15" fill="rgb(247,84,47)" fg:x="83312" fg:w="548"/><text x="74.0120%" y="735.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (14 samples, 0.01%)</title><rect x="74.2826%" y="709" width="0.0124%" height="15" fill="rgb(240,111,43)" fg:x="83900" fg:w="14"/><text x="74.5326%" y="719.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (113 samples, 0.10%)</title><rect x="74.3030%" y="581" width="0.1000%" height="15" fill="rgb(215,214,35)" fg:x="83923" fg:w="113"/><text x="74.5530%" y="591.50"></text></g><g><title>tremor_value::value::cmp::&lt;impl core::cmp::PartialEq for tremor_value::value::Value&gt;::eq (113 samples, 0.10%)</title><rect x="74.3030%" y="565" width="0.1000%" height="15" fill="rgb(248,207,23)" fg:x="83923" fg:w="113"/><text x="74.5530%" y="575.50"></text></g><g><title>[libc-2.31.so] (22 samples, 0.02%)</title><rect x="74.3836%" y="549" width="0.0195%" height="15" fill="rgb(214,186,4)" fg:x="84014" fg:w="22"/><text x="74.6336%" y="559.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (120 samples, 0.11%)</title><rect x="74.2977%" y="661" width="0.1062%" height="15" fill="rgb(220,133,22)" fg:x="83917" fg:w="120"/><text x="74.5477%" y="671.50"></text></g><g><title>tremor_script::std_lib::array::load::&lt;impl tremor_script::registry::TremorFn for tremor_script::std_lib::array::load::contains::Func&gt;::invoke::{{closure}} (120 samples, 0.11%)</title><rect x="74.2977%" y="645" width="0.1062%" height="15" fill="rgb(239,134,19)" fg:x="83917" fg:w="120"/><text x="74.5477%" y="655.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (118 samples, 0.10%)</title><rect x="74.2995%" y="629" width="0.1045%" height="15" fill="rgb(250,140,9)" fg:x="83919" fg:w="118"/><text x="74.5495%" y="639.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (118 samples, 0.10%)</title><rect x="74.2995%" y="613" width="0.1045%" height="15" fill="rgb(225,59,14)" fg:x="83919" fg:w="118"/><text x="74.5495%" y="623.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (118 samples, 0.10%)</title><rect x="74.2995%" y="597" width="0.1045%" height="15" fill="rgb(214,152,51)" fg:x="83919" fg:w="118"/><text x="74.5495%" y="607.50"></text></g><g><title>tremor_script::ast::Invocable::invoke (122 samples, 0.11%)</title><rect x="74.2968%" y="709" width="0.1080%" height="15" fill="rgb(251,227,43)" fg:x="83916" fg:w="122"/><text x="74.5468%" y="719.50"></text></g><g><title>tremor_script::registry::TremorFnWrapper::invoke (121 samples, 0.11%)</title><rect x="74.2977%" y="693" width="0.1071%" height="15" fill="rgb(241,96,17)" fg:x="83917" fg:w="121"/><text x="74.5477%" y="703.50"></text></g><g><title>tremor_script::std_lib::array::load::&lt;impl tremor_script::registry::TremorFn for tremor_script::std_lib::array::load::contains::Func&gt;::invoke (121 samples, 0.11%)</title><rect x="74.2977%" y="677" width="0.1071%" height="15" fill="rgb(234,198,43)" fg:x="83917" fg:w="121"/><text x="74.5477%" y="687.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_key_hashed_nocheck (46 samples, 0.04%)</title><rect x="74.4455%" y="581" width="0.0407%" height="15" fill="rgb(220,108,29)" fg:x="84084" fg:w="46"/><text x="74.6955%" y="591.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_key_hashed_nocheck (45 samples, 0.04%)</title><rect x="74.4464%" y="565" width="0.0398%" height="15" fill="rgb(226,163,33)" fg:x="84085" fg:w="45"/><text x="74.6964%" y="575.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_hash (45 samples, 0.04%)</title><rect x="74.4464%" y="549" width="0.0398%" height="15" fill="rgb(205,194,45)" fg:x="84085" fg:w="45"/><text x="74.6964%" y="559.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::search (45 samples, 0.04%)</title><rect x="74.4464%" y="533" width="0.0398%" height="15" fill="rgb(206,143,44)" fg:x="84085" fg:w="45"/><text x="74.6964%" y="543.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (41 samples, 0.04%)</title><rect x="74.4500%" y="517" width="0.0363%" height="15" fill="rgb(236,136,36)" fg:x="84089" fg:w="41"/><text x="74.7000%" y="527.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (39 samples, 0.03%)</title><rect x="74.4517%" y="501" width="0.0345%" height="15" fill="rgb(249,172,42)" fg:x="84091" fg:w="39"/><text x="74.7017%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (39 samples, 0.03%)</title><rect x="74.4517%" y="485" width="0.0345%" height="15" fill="rgb(216,139,23)" fg:x="84091" fg:w="39"/><text x="74.7017%" y="495.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (39 samples, 0.03%)</title><rect x="74.4517%" y="469" width="0.0345%" height="15" fill="rgb(207,166,20)" fg:x="84091" fg:w="39"/><text x="74.7017%" y="479.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (39 samples, 0.03%)</title><rect x="74.4517%" y="453" width="0.0345%" height="15" fill="rgb(210,209,22)" fg:x="84091" fg:w="39"/><text x="74.7017%" y="463.50"></text></g><g><title>[libc-2.31.so] (23 samples, 0.02%)</title><rect x="74.4659%" y="437" width="0.0204%" height="15" fill="rgb(232,118,20)" fg:x="84107" fg:w="23"/><text x="74.7159%" y="447.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (271 samples, 0.24%)</title><rect x="74.2472%" y="741" width="0.2399%" height="15" fill="rgb(238,113,42)" fg:x="83860" fg:w="271"/><text x="74.4972%" y="751.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::invoke2 (262 samples, 0.23%)</title><rect x="74.2552%" y="725" width="0.2320%" height="15" fill="rgb(231,42,5)" fg:x="83869" fg:w="262"/><text x="74.5052%" y="735.50"></text></g><g><title>tremor_script::interpreter::imut_expr::eval_for_fn_arg (93 samples, 0.08%)</title><rect x="74.4048%" y="709" width="0.0823%" height="15" fill="rgb(243,166,24)" fg:x="84038" fg:w="93"/><text x="74.6548%" y="719.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (77 samples, 0.07%)</title><rect x="74.4190%" y="693" width="0.0682%" height="15" fill="rgb(237,226,12)" fg:x="84054" fg:w="77"/><text x="74.6690%" y="703.50"></text></g><g><title>tremor_script::interpreter::resolve (70 samples, 0.06%)</title><rect x="74.4252%" y="677" width="0.0620%" height="15" fill="rgb(229,133,24)" fg:x="84061" fg:w="70"/><text x="74.6752%" y="687.50"></text></g><g><title>tremor_script::interpreter::resolve_value (66 samples, 0.06%)</title><rect x="74.4287%" y="661" width="0.0584%" height="15" fill="rgb(238,33,43)" fg:x="84065" fg:w="66"/><text x="74.6787%" y="671.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup (48 samples, 0.04%)</title><rect x="74.4447%" y="645" width="0.0425%" height="15" fill="rgb(227,59,38)" fg:x="84083" fg:w="48"/><text x="74.6947%" y="655.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (48 samples, 0.04%)</title><rect x="74.4447%" y="629" width="0.0425%" height="15" fill="rgb(230,97,0)" fg:x="84083" fg:w="48"/><text x="74.6947%" y="639.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (48 samples, 0.04%)</title><rect x="74.4447%" y="613" width="0.0425%" height="15" fill="rgb(250,173,50)" fg:x="84083" fg:w="48"/><text x="74.6947%" y="623.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (48 samples, 0.04%)</title><rect x="74.4447%" y="597" width="0.0425%" height="15" fill="rgb(240,15,50)" fg:x="84083" fg:w="48"/><text x="74.6947%" y="607.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (921 samples, 0.82%)</title><rect x="73.6939%" y="757" width="0.8154%" height="15" fill="rgb(221,93,22)" fg:x="83235" fg:w="921"/><text x="73.9439%" y="767.50"></text></g><g><title>tremor_script::interpreter::test_predicate_expr (25 samples, 0.02%)</title><rect x="74.4871%" y="741" width="0.0221%" height="15" fill="rgb(245,180,53)" fg:x="84131" fg:w="25"/><text x="74.7371%" y="751.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.03%)</title><rect x="74.7678%" y="741" width="0.0257%" height="15" fill="rgb(231,88,51)" fg:x="84448" fg:w="29"/><text x="75.0178%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::borrow::Cow&lt;tremor_value::value::Value&gt;&gt;&gt; (30 samples, 0.03%)</title><rect x="74.7979%" y="741" width="0.0266%" height="15" fill="rgb(240,58,21)" fg:x="84482" fg:w="30"/><text x="75.0479%" y="751.50"></text></g><g><title>tremor_script::ast::ClauseGroup&lt;Ex&gt;::precondition (30 samples, 0.03%)</title><rect x="74.8245%" y="741" width="0.0266%" height="15" fill="rgb(237,21,10)" fg:x="84512" fg:w="30"/><text x="75.0745%" y="751.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (30 samples, 0.03%)</title><rect x="74.8245%" y="725" width="0.0266%" height="15" fill="rgb(218,43,11)" fg:x="84512" fg:w="30"/><text x="75.0745%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (74 samples, 0.07%)</title><rect x="76.1561%" y="549" width="0.0655%" height="15" fill="rgb(218,221,29)" fg:x="86016" fg:w="74"/><text x="76.4061%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (74 samples, 0.07%)</title><rect x="76.1561%" y="533" width="0.0655%" height="15" fill="rgb(214,118,42)" fg:x="86016" fg:w="74"/><text x="76.4061%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (74 samples, 0.07%)</title><rect x="76.1561%" y="517" width="0.0655%" height="15" fill="rgb(251,200,26)" fg:x="86016" fg:w="74"/><text x="76.4061%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (74 samples, 0.07%)</title><rect x="76.1561%" y="501" width="0.0655%" height="15" fill="rgb(237,101,39)" fg:x="86016" fg:w="74"/><text x="76.4061%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (74 samples, 0.07%)</title><rect x="76.1561%" y="485" width="0.0655%" height="15" fill="rgb(251,117,11)" fg:x="86016" fg:w="74"/><text x="76.4061%" y="495.50"></text></g><g><title>alloc::alloc::alloc (71 samples, 0.06%)</title><rect x="76.1587%" y="469" width="0.0629%" height="15" fill="rgb(216,223,23)" fg:x="86019" fg:w="71"/><text x="76.4087%" y="479.50"></text></g><g><title>__rg_alloc (71 samples, 0.06%)</title><rect x="76.1587%" y="453" width="0.0629%" height="15" fill="rgb(251,54,12)" fg:x="86019" fg:w="71"/><text x="76.4087%" y="463.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (71 samples, 0.06%)</title><rect x="76.1587%" y="437" width="0.0629%" height="15" fill="rgb(254,176,54)" fg:x="86019" fg:w="71"/><text x="76.4087%" y="447.50"></text></g><g><title>sn_rust_alloc (67 samples, 0.06%)</title><rect x="76.1623%" y="421" width="0.0593%" height="15" fill="rgb(210,32,8)" fg:x="86023" fg:w="67"/><text x="76.4123%" y="431.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (90 samples, 0.08%)</title><rect x="76.1561%" y="645" width="0.0797%" height="15" fill="rgb(235,52,38)" fg:x="86016" fg:w="90"/><text x="76.4061%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (90 samples, 0.08%)</title><rect x="76.1561%" y="629" width="0.0797%" height="15" fill="rgb(231,4,44)" fg:x="86016" fg:w="90"/><text x="76.4061%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (90 samples, 0.08%)</title><rect x="76.1561%" y="613" width="0.0797%" height="15" fill="rgb(249,2,32)" fg:x="86016" fg:w="90"/><text x="76.4061%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (90 samples, 0.08%)</title><rect x="76.1561%" y="597" width="0.0797%" height="15" fill="rgb(224,65,26)" fg:x="86016" fg:w="90"/><text x="76.4061%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (90 samples, 0.08%)</title><rect x="76.1561%" y="581" width="0.0797%" height="15" fill="rgb(250,73,40)" fg:x="86016" fg:w="90"/><text x="76.4061%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (90 samples, 0.08%)</title><rect x="76.1561%" y="565" width="0.0797%" height="15" fill="rgb(253,177,16)" fg:x="86016" fg:w="90"/><text x="76.4061%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (16 samples, 0.01%)</title><rect x="76.2216%" y="549" width="0.0142%" height="15" fill="rgb(217,32,34)" fg:x="86090" fg:w="16"/><text x="76.4716%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (16 samples, 0.01%)</title><rect x="76.2216%" y="533" width="0.0142%" height="15" fill="rgb(212,7,10)" fg:x="86090" fg:w="16"/><text x="76.4716%" y="543.50"></text></g><g><title>[libc-2.31.so] (13 samples, 0.01%)</title><rect x="76.2242%" y="517" width="0.0115%" height="15" fill="rgb(245,89,8)" fg:x="86093" fg:w="13"/><text x="76.4742%" y="527.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (161 samples, 0.14%)</title><rect x="76.0985%" y="693" width="0.1425%" height="15" fill="rgb(237,16,53)" fg:x="85951" fg:w="161"/><text x="76.3485%" y="703.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (147 samples, 0.13%)</title><rect x="76.1109%" y="677" width="0.1301%" height="15" fill="rgb(250,204,30)" fg:x="85965" fg:w="147"/><text x="76.3609%" y="687.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::clone::Clone&gt;::clone (108 samples, 0.10%)</title><rect x="76.1454%" y="661" width="0.0956%" height="15" fill="rgb(208,77,27)" fg:x="86004" fg:w="108"/><text x="76.3954%" y="671.50"></text></g><g><title>alloc::borrow::Cow&lt;B&gt;::into_owned (202 samples, 0.18%)</title><rect x="76.0702%" y="709" width="0.1788%" height="15" fill="rgb(250,204,28)" fg:x="85919" fg:w="202"/><text x="76.3202%" y="719.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (717 samples, 0.63%)</title><rect x="76.2570%" y="709" width="0.6348%" height="15" fill="rgb(244,63,21)" fg:x="86130" fg:w="717"/><text x="76.5070%" y="719.50"></text></g><g><title>tremor_script::ast::Path::segments (42 samples, 0.04%)</title><rect x="77.0060%" y="693" width="0.0372%" height="15" fill="rgb(236,85,44)" fg:x="86976" fg:w="42"/><text x="77.2560%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (30 samples, 0.03%)</title><rect x="77.2176%" y="677" width="0.0266%" height="15" fill="rgb(215,98,4)" fg:x="87215" fg:w="30"/><text x="77.4676%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (18 samples, 0.02%)</title><rect x="77.2283%" y="661" width="0.0159%" height="15" fill="rgb(235,38,11)" fg:x="87227" fg:w="18"/><text x="77.4783%" y="671.50"></text></g><g><title>alloc::alloc::box_free (14 samples, 0.01%)</title><rect x="77.3186%" y="645" width="0.0124%" height="15" fill="rgb(254,186,25)" fg:x="87329" fg:w="14"/><text x="77.5686%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.01%)</title><rect x="77.3186%" y="629" width="0.0124%" height="15" fill="rgb(225,55,31)" fg:x="87329" fg:w="14"/><text x="77.5686%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.01%)</title><rect x="77.3186%" y="613" width="0.0124%" height="15" fill="rgb(211,15,21)" fg:x="87329" fg:w="14"/><text x="77.5686%" y="623.50"></text></g><g><title>__rg_dealloc (14 samples, 0.01%)</title><rect x="77.3186%" y="597" width="0.0124%" height="15" fill="rgb(215,187,41)" fg:x="87329" fg:w="14"/><text x="77.5686%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (14 samples, 0.01%)</title><rect x="77.3186%" y="581" width="0.0124%" height="15" fill="rgb(248,69,32)" fg:x="87329" fg:w="14"/><text x="77.5686%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.03%)</title><rect x="77.3593%" y="581" width="0.0266%" height="15" fill="rgb(252,102,52)" fg:x="87375" fg:w="30"/><text x="77.6093%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)]&gt; (30 samples, 0.03%)</title><rect x="77.3593%" y="565" width="0.0266%" height="15" fill="rgb(253,140,32)" fg:x="87375" fg:w="30"/><text x="77.6093%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 0.01%)</title><rect x="77.3956%" y="549" width="0.0142%" height="15" fill="rgb(216,56,42)" fg:x="87416" fg:w="16"/><text x="77.6456%" y="559.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 0.01%)</title><rect x="77.3956%" y="533" width="0.0142%" height="15" fill="rgb(216,184,14)" fg:x="87416" fg:w="16"/><text x="77.6456%" y="543.50"></text></g><g><title>__rg_dealloc (16 samples, 0.01%)</title><rect x="77.3956%" y="517" width="0.0142%" height="15" fill="rgb(237,187,27)" fg:x="87416" fg:w="16"/><text x="77.6456%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (16 samples, 0.01%)</title><rect x="77.3956%" y="501" width="0.0142%" height="15" fill="rgb(219,65,3)" fg:x="87416" fg:w="16"/><text x="77.6456%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (90 samples, 0.08%)</title><rect x="77.3310%" y="629" width="0.0797%" height="15" fill="rgb(245,83,25)" fg:x="87343" fg:w="90"/><text x="77.5810%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::vecmap::VecMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (58 samples, 0.05%)</title><rect x="77.3593%" y="613" width="0.0514%" height="15" fill="rgb(214,205,45)" fg:x="87375" fg:w="58"/><text x="77.6093%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)&gt;&gt; (58 samples, 0.05%)</title><rect x="77.3593%" y="597" width="0.0514%" height="15" fill="rgb(241,20,18)" fg:x="87375" fg:w="58"/><text x="77.6093%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)&gt;&gt; (28 samples, 0.02%)</title><rect x="77.3859%" y="581" width="0.0248%" height="15" fill="rgb(232,163,23)" fg:x="87405" fg:w="28"/><text x="77.6359%" y="591.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.02%)</title><rect x="77.3859%" y="565" width="0.0248%" height="15" fill="rgb(214,5,46)" fg:x="87405" fg:w="28"/><text x="77.6359%" y="575.50"></text></g><g><title>sn_rust_dealloc (379 samples, 0.34%)</title><rect x="77.4106%" y="629" width="0.3356%" height="15" fill="rgb(229,78,17)" fg:x="87433" fg:w="379"/><text x="77.6606%" y="639.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (135 samples, 0.12%)</title><rect x="77.7462%" y="629" width="0.1195%" height="15" fill="rgb(248,89,10)" fg:x="87812" fg:w="135"/><text x="77.9962%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (694 samples, 0.61%)</title><rect x="77.2522%" y="677" width="0.6144%" height="15" fill="rgb(248,54,15)" fg:x="87254" fg:w="694"/><text x="77.5022%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt;&gt; (640 samples, 0.57%)</title><rect x="77.3000%" y="661" width="0.5666%" height="15" fill="rgb(223,116,6)" fg:x="87308" fg:w="640"/><text x="77.5500%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (605 samples, 0.54%)</title><rect x="77.3310%" y="645" width="0.5356%" height="15" fill="rgb(205,125,38)" fg:x="87343" fg:w="605"/><text x="77.5810%" y="655.50"></text></g><g><title>sn_rust_dealloc (129 samples, 0.11%)</title><rect x="77.8666%" y="677" width="0.1142%" height="15" fill="rgb(251,78,38)" fg:x="87948" fg:w="129"/><text x="78.1166%" y="687.50"></text></g><g><title>tremor_script::ast::Path::segments (13 samples, 0.01%)</title><rect x="77.9861%" y="677" width="0.0115%" height="15" fill="rgb(253,78,28)" fg:x="88083" fg:w="13"/><text x="78.2361%" y="687.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (252 samples, 0.22%)</title><rect x="78.0233%" y="645" width="0.2231%" height="15" fill="rgb(209,120,3)" fg:x="88125" fg:w="252"/><text x="78.2733%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.02%)</title><rect x="78.2633%" y="581" width="0.0177%" height="15" fill="rgb(238,229,9)" fg:x="88396" fg:w="20"/><text x="78.5133%" y="591.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.02%)</title><rect x="78.2633%" y="565" width="0.0177%" height="15" fill="rgb(253,159,18)" fg:x="88396" fg:w="20"/><text x="78.5133%" y="575.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (57 samples, 0.05%)</title><rect x="78.2464%" y="645" width="0.0505%" height="15" fill="rgb(244,42,34)" fg:x="88377" fg:w="57"/><text x="78.4964%" y="655.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (49 samples, 0.04%)</title><rect x="78.2535%" y="629" width="0.0434%" height="15" fill="rgb(224,8,7)" fg:x="88385" fg:w="49"/><text x="78.5035%" y="639.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_hash (49 samples, 0.04%)</title><rect x="78.2535%" y="613" width="0.0434%" height="15" fill="rgb(210,201,45)" fg:x="88385" fg:w="49"/><text x="78.5035%" y="623.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::search (49 samples, 0.04%)</title><rect x="78.2535%" y="597" width="0.0434%" height="15" fill="rgb(252,185,21)" fg:x="88385" fg:w="49"/><text x="78.5035%" y="607.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (18 samples, 0.02%)</title><rect x="78.2810%" y="581" width="0.0159%" height="15" fill="rgb(223,131,1)" fg:x="88416" fg:w="18"/><text x="78.5310%" y="591.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (18 samples, 0.02%)</title><rect x="78.2810%" y="565" width="0.0159%" height="15" fill="rgb(245,141,16)" fg:x="88416" fg:w="18"/><text x="78.5310%" y="575.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (18 samples, 0.02%)</title><rect x="78.2810%" y="549" width="0.0159%" height="15" fill="rgb(229,55,45)" fg:x="88416" fg:w="18"/><text x="78.5310%" y="559.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (18 samples, 0.02%)</title><rect x="78.2810%" y="533" width="0.0159%" height="15" fill="rgb(208,92,15)" fg:x="88416" fg:w="18"/><text x="78.5310%" y="543.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (18 samples, 0.02%)</title><rect x="78.2810%" y="517" width="0.0159%" height="15" fill="rgb(234,185,47)" fg:x="88416" fg:w="18"/><text x="78.5310%" y="527.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get_mut_idx (22 samples, 0.02%)</title><rect x="78.3075%" y="597" width="0.0195%" height="15" fill="rgb(253,104,50)" fg:x="88446" fg:w="22"/><text x="78.5575%" y="607.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (32 samples, 0.03%)</title><rect x="78.4784%" y="501" width="0.0283%" height="15" fill="rgb(205,70,7)" fg:x="88639" fg:w="32"/><text x="78.7284%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (143 samples, 0.13%)</title><rect x="78.3890%" y="533" width="0.1266%" height="15" fill="rgb(240,178,43)" fg:x="88538" fg:w="143"/><text x="78.6390%" y="543.50"></text></g><g><title>sn_rust_alloc (128 samples, 0.11%)</title><rect x="78.4023%" y="517" width="0.1133%" height="15" fill="rgb(214,112,2)" fg:x="88553" fg:w="128"/><text x="78.6523%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (174 samples, 0.15%)</title><rect x="78.3819%" y="565" width="0.1541%" height="15" fill="rgb(206,46,17)" fg:x="88530" fg:w="174"/><text x="78.6319%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (174 samples, 0.15%)</title><rect x="78.3819%" y="549" width="0.1541%" height="15" fill="rgb(225,220,16)" fg:x="88530" fg:w="174"/><text x="78.6319%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (12 samples, 0.01%)</title><rect x="78.5421%" y="565" width="0.0106%" height="15" fill="rgb(238,65,40)" fg:x="88711" fg:w="12"/><text x="78.7921%" y="575.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (12 samples, 0.01%)</title><rect x="78.5421%" y="549" width="0.0106%" height="15" fill="rgb(230,151,21)" fg:x="88711" fg:w="12"/><text x="78.7921%" y="559.50"></text></g><g><title>halfbrown::raw_entry::RawVacantEntryMut&lt;K,V,S&gt;::insert (525 samples, 0.46%)</title><rect x="78.2969%" y="629" width="0.4648%" height="15" fill="rgb(218,58,49)" fg:x="88434" fg:w="525"/><text x="78.5469%" y="639.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawVacantEntryMut&lt;K,V,S&gt;::insert (513 samples, 0.45%)</title><rect x="78.3075%" y="613" width="0.4542%" height="15" fill="rgb(219,179,14)" fg:x="88446" fg:w="513"/><text x="78.5575%" y="623.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::insert_idx (491 samples, 0.43%)</title><rect x="78.3270%" y="597" width="0.4347%" height="15" fill="rgb(223,72,1)" fg:x="88468" fg:w="491"/><text x="78.5770%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (473 samples, 0.42%)</title><rect x="78.3429%" y="581" width="0.4188%" height="15" fill="rgb(238,126,10)" fg:x="88486" fg:w="473"/><text x="78.5929%" y="591.50"></text></g><g><title>core::ptr::write (236 samples, 0.21%)</title><rect x="78.5528%" y="565" width="0.2089%" height="15" fill="rgb(224,206,38)" fg:x="88723" fg:w="236"/><text x="78.8028%" y="575.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::clone::Clone&gt;::clone (45 samples, 0.04%)</title><rect x="78.7617%" y="613" width="0.0398%" height="15" fill="rgb(212,201,54)" fg:x="88959" fg:w="45"/><text x="79.0117%" y="623.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (20 samples, 0.02%)</title><rect x="78.7839%" y="597" width="0.0177%" height="15" fill="rgb(218,154,48)" fg:x="88984" fg:w="20"/><text x="79.0339%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (20 samples, 0.02%)</title><rect x="78.7839%" y="581" width="0.0177%" height="15" fill="rgb(232,93,24)" fg:x="88984" fg:w="20"/><text x="79.0339%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (20 samples, 0.02%)</title><rect x="78.7839%" y="565" width="0.0177%" height="15" fill="rgb(245,30,21)" fg:x="88984" fg:w="20"/><text x="79.0339%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (20 samples, 0.02%)</title><rect x="78.7839%" y="549" width="0.0177%" height="15" fill="rgb(242,148,29)" fg:x="88984" fg:w="20"/><text x="79.0339%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (20 samples, 0.02%)</title><rect x="78.7839%" y="533" width="0.0177%" height="15" fill="rgb(244,153,54)" fg:x="88984" fg:w="20"/><text x="79.0339%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (20 samples, 0.02%)</title><rect x="78.7839%" y="517" width="0.0177%" height="15" fill="rgb(252,87,22)" fg:x="88984" fg:w="20"/><text x="79.0339%" y="527.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (17 samples, 0.02%)</title><rect x="79.1424%" y="453" width="0.0151%" height="15" fill="rgb(210,51,29)" fg:x="89389" fg:w="17"/><text x="79.3924%" y="463.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (404 samples, 0.36%)</title><rect x="78.8016%" y="581" width="0.3577%" height="15" fill="rgb(242,136,47)" fg:x="89004" fg:w="404"/><text x="79.0516%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (113 samples, 0.10%)</title><rect x="79.0592%" y="565" width="0.1000%" height="15" fill="rgb(238,68,4)" fg:x="89295" fg:w="113"/><text x="79.3092%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (113 samples, 0.10%)</title><rect x="79.0592%" y="549" width="0.1000%" height="15" fill="rgb(242,161,30)" fg:x="89295" fg:w="113"/><text x="79.3092%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (113 samples, 0.10%)</title><rect x="79.0592%" y="533" width="0.1000%" height="15" fill="rgb(218,58,44)" fg:x="89295" fg:w="113"/><text x="79.3092%" y="543.50"></text></g><g><title>alloc::alloc::alloc (95 samples, 0.08%)</title><rect x="79.0751%" y="517" width="0.0841%" height="15" fill="rgb(252,125,32)" fg:x="89313" fg:w="95"/><text x="79.3251%" y="527.50"></text></g><g><title>__rg_alloc (95 samples, 0.08%)</title><rect x="79.0751%" y="501" width="0.0841%" height="15" fill="rgb(219,178,0)" fg:x="89313" fg:w="95"/><text x="79.3251%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (95 samples, 0.08%)</title><rect x="79.0751%" y="485" width="0.0841%" height="15" fill="rgb(213,152,7)" fg:x="89313" fg:w="95"/><text x="79.3251%" y="495.50"></text></g><g><title>sn_rust_alloc (82 samples, 0.07%)</title><rect x="79.0867%" y="469" width="0.0726%" height="15" fill="rgb(249,109,34)" fg:x="89326" fg:w="82"/><text x="79.3367%" y="479.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (1,007 samples, 0.89%)</title><rect x="79.3177%" y="389" width="0.8916%" height="15" fill="rgb(232,96,21)" fg:x="89587" fg:w="1007"/><text x="79.5677%" y="399.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (3,777 samples, 3.34%)</title><rect x="76.8918%" y="709" width="3.3440%" height="15" fill="rgb(228,27,39)" fg:x="86847" fg:w="3777"/><text x="77.1418%" y="719.50">tre..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (3,606 samples, 3.19%)</title><rect x="77.0432%" y="693" width="3.1926%" height="15" fill="rgb(211,182,52)" fg:x="87018" fg:w="3606"/><text x="77.2932%" y="703.50">tre..</text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (2,528 samples, 2.24%)</title><rect x="77.9976%" y="677" width="2.2382%" height="15" fill="rgb(234,178,38)" fg:x="88096" fg:w="2528"/><text x="78.2476%" y="687.50">t..</text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (2,510 samples, 2.22%)</title><rect x="78.0136%" y="661" width="2.2223%" height="15" fill="rgb(221,111,3)" fg:x="88114" fg:w="2510"/><text x="78.2636%" y="671.50">t..</text></g><g><title>halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt;::or_insert_with (2,190 samples, 1.94%)</title><rect x="78.2969%" y="645" width="1.9390%" height="15" fill="rgb(228,175,21)" fg:x="88434" fg:w="2190"/><text x="78.5469%" y="655.50">h..</text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut::{{closure}} (1,665 samples, 1.47%)</title><rect x="78.7617%" y="629" width="1.4741%" height="15" fill="rgb(228,174,43)" fg:x="88959" fg:w="1665"/><text x="79.0117%" y="639.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (1,620 samples, 1.43%)</title><rect x="78.8016%" y="613" width="1.4343%" height="15" fill="rgb(211,191,0)" fg:x="89004" fg:w="1620"/><text x="79.0516%" y="623.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (1,620 samples, 1.43%)</title><rect x="78.8016%" y="597" width="1.4343%" height="15" fill="rgb(253,117,3)" fg:x="89004" fg:w="1620"/><text x="79.0516%" y="607.50"></text></g><g><title>halfbrown::HashMap&lt;K,V&gt;::with_capacity (1,216 samples, 1.08%)</title><rect x="79.1593%" y="581" width="1.0766%" height="15" fill="rgb(241,127,19)" fg:x="89408" fg:w="1216"/><text x="79.4093%" y="591.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V&gt;::with_capacity (1,198 samples, 1.06%)</title><rect x="79.1752%" y="565" width="1.0607%" height="15" fill="rgb(218,103,12)" fg:x="89426" fg:w="1198"/><text x="79.4252%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,198 samples, 1.06%)</title><rect x="79.1752%" y="549" width="1.0607%" height="15" fill="rgb(236,214,43)" fg:x="89426" fg:w="1198"/><text x="79.4252%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,198 samples, 1.06%)</title><rect x="79.1752%" y="533" width="1.0607%" height="15" fill="rgb(244,144,19)" fg:x="89426" fg:w="1198"/><text x="79.4252%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,198 samples, 1.06%)</title><rect x="79.1752%" y="517" width="1.0607%" height="15" fill="rgb(246,188,10)" fg:x="89426" fg:w="1198"/><text x="79.4252%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,198 samples, 1.06%)</title><rect x="79.1752%" y="501" width="1.0607%" height="15" fill="rgb(212,193,33)" fg:x="89426" fg:w="1198"/><text x="79.4252%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,198 samples, 1.06%)</title><rect x="79.1752%" y="485" width="1.0607%" height="15" fill="rgb(241,51,29)" fg:x="89426" fg:w="1198"/><text x="79.4252%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,198 samples, 1.06%)</title><rect x="79.1752%" y="469" width="1.0607%" height="15" fill="rgb(211,58,19)" fg:x="89426" fg:w="1198"/><text x="79.4252%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1,197 samples, 1.06%)</title><rect x="79.1761%" y="453" width="1.0598%" height="15" fill="rgb(229,111,26)" fg:x="89427" fg:w="1197"/><text x="79.4261%" y="463.50"></text></g><g><title>__rg_alloc (1,197 samples, 1.06%)</title><rect x="79.1761%" y="437" width="1.0598%" height="15" fill="rgb(213,115,40)" fg:x="89427" fg:w="1197"/><text x="79.4261%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1,197 samples, 1.06%)</title><rect x="79.1761%" y="421" width="1.0598%" height="15" fill="rgb(209,56,44)" fg:x="89427" fg:w="1197"/><text x="79.4261%" y="431.50"></text></g><g><title>sn_rust_alloc (1,175 samples, 1.04%)</title><rect x="79.1956%" y="405" width="1.0403%" height="15" fill="rgb(230,108,32)" fg:x="89449" fg:w="1175"/><text x="79.4456%" y="415.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (30 samples, 0.03%)</title><rect x="80.2093%" y="389" width="0.0266%" height="15" fill="rgb(216,165,31)" fg:x="90594" fg:w="30"/><text x="80.4593%" y="399.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (6,406 samples, 5.67%)</title><rect x="74.8510%" y="741" width="5.6717%" height="15" fill="rgb(218,122,21)" fg:x="84542" fg:w="6406"/><text x="75.1010%" y="751.50">tremor_..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (5,946 samples, 5.26%)</title><rect x="75.2583%" y="725" width="5.2644%" height="15" fill="rgb(223,224,47)" fg:x="85002" fg:w="5946"/><text x="75.5083%" y="735.50">tremor..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (324 samples, 0.29%)</title><rect x="80.2359%" y="709" width="0.2869%" height="15" fill="rgb(238,102,44)" fg:x="90624" fg:w="324"/><text x="80.4859%" y="719.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (15 samples, 0.01%)</title><rect x="80.5094%" y="693" width="0.0133%" height="15" fill="rgb(236,46,40)" fg:x="90933" fg:w="15"/><text x="80.7594%" y="703.50"></text></g><g><title>tremor_script::ast::Path::segments (20 samples, 0.02%)</title><rect x="80.7370%" y="693" width="0.0177%" height="15" fill="rgb(247,202,50)" fg:x="91190" fg:w="20"/><text x="80.9870%" y="703.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry (455 samples, 0.40%)</title><rect x="80.7609%" y="629" width="0.4028%" height="15" fill="rgb(209,99,20)" fg:x="91217" fg:w="455"/><text x="81.0109%" y="639.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (27 samples, 0.02%)</title><rect x="81.1637%" y="565" width="0.0239%" height="15" fill="rgb(252,27,34)" fg:x="91672" fg:w="27"/><text x="81.4137%" y="575.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (27 samples, 0.02%)</title><rect x="81.1637%" y="549" width="0.0239%" height="15" fill="rgb(215,206,23)" fg:x="91672" fg:w="27"/><text x="81.4137%" y="559.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (27 samples, 0.02%)</title><rect x="81.1637%" y="533" width="0.0239%" height="15" fill="rgb(212,135,36)" fg:x="91672" fg:w="27"/><text x="81.4137%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (27 samples, 0.02%)</title><rect x="81.1637%" y="517" width="0.0239%" height="15" fill="rgb(240,189,1)" fg:x="91672" fg:w="27"/><text x="81.4137%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (27 samples, 0.02%)</title><rect x="81.1637%" y="501" width="0.0239%" height="15" fill="rgb(242,56,20)" fg:x="91672" fg:w="27"/><text x="81.4137%" y="511.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::borrow::Borrow&lt;T&gt;&gt;::borrow (12 samples, 0.01%)</title><rect x="81.1947%" y="549" width="0.0106%" height="15" fill="rgb(247,132,33)" fg:x="91707" fg:w="12"/><text x="81.4447%" y="559.50"></text></g><g><title>beef::generic::Cow&lt;T,U&gt;::borrow (12 samples, 0.01%)</title><rect x="81.1947%" y="533" width="0.0106%" height="15" fill="rgb(208,149,11)" fg:x="91707" fg:w="12"/><text x="81.4447%" y="543.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_key_hashed_nocheck (1,509 samples, 1.34%)</title><rect x="81.1637%" y="629" width="1.3360%" height="15" fill="rgb(211,33,11)" fg:x="91672" fg:w="1509"/><text x="81.4137%" y="639.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_key_hashed_nocheck (1,509 samples, 1.34%)</title><rect x="81.1637%" y="613" width="1.3360%" height="15" fill="rgb(221,29,38)" fg:x="91672" fg:w="1509"/><text x="81.4137%" y="623.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_hash (1,509 samples, 1.34%)</title><rect x="81.1637%" y="597" width="1.3360%" height="15" fill="rgb(206,182,49)" fg:x="91672" fg:w="1509"/><text x="81.4137%" y="607.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::search (1,509 samples, 1.34%)</title><rect x="81.1637%" y="581" width="1.3360%" height="15" fill="rgb(216,140,1)" fg:x="91672" fg:w="1509"/><text x="81.4137%" y="591.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (1,474 samples, 1.31%)</title><rect x="81.1947%" y="565" width="1.3050%" height="15" fill="rgb(232,57,40)" fg:x="91707" fg:w="1474"/><text x="81.4447%" y="575.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1,462 samples, 1.29%)</title><rect x="81.2053%" y="549" width="1.2944%" height="15" fill="rgb(224,186,18)" fg:x="91719" fg:w="1462"/><text x="81.4553%" y="559.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,462 samples, 1.29%)</title><rect x="81.2053%" y="533" width="1.2944%" height="15" fill="rgb(215,121,11)" fg:x="91719" fg:w="1462"/><text x="81.4553%" y="543.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1,462 samples, 1.29%)</title><rect x="81.2053%" y="517" width="1.2944%" height="15" fill="rgb(245,147,10)" fg:x="91719" fg:w="1462"/><text x="81.4553%" y="527.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1,462 samples, 1.29%)</title><rect x="81.2053%" y="501" width="1.2944%" height="15" fill="rgb(238,153,13)" fg:x="91719" fg:w="1462"/><text x="81.4553%" y="511.50"></text></g><g><title>[libc-2.31.so] (689 samples, 0.61%)</title><rect x="81.8897%" y="485" width="0.6100%" height="15" fill="rgb(233,108,0)" fg:x="92492" fg:w="689"/><text x="82.1397%" y="495.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (2,240 samples, 1.98%)</title><rect x="80.5227%" y="741" width="1.9832%" height="15" fill="rgb(212,157,17)" fg:x="90948" fg:w="2240"/><text x="80.7727%" y="751.50">t..</text></g><g><title>tremor_script::interpreter::resolve (2,185 samples, 1.93%)</title><rect x="80.5714%" y="725" width="1.9345%" height="15" fill="rgb(225,213,38)" fg:x="91003" fg:w="2185"/><text x="80.8214%" y="735.50">t..</text></g><g><title>tremor_script::interpreter::resolve_value (2,156 samples, 1.91%)</title><rect x="80.5971%" y="709" width="1.9089%" height="15" fill="rgb(248,16,11)" fg:x="91032" fg:w="2156"/><text x="80.8471%" y="719.50">t..</text></g><g><title>tremor_value::known_key::KnownKey::lookup (1,978 samples, 1.75%)</title><rect x="80.7547%" y="693" width="1.7513%" height="15" fill="rgb(241,33,4)" fg:x="91210" fg:w="1978"/><text x="81.0047%" y="703.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (1,977 samples, 1.75%)</title><rect x="80.7556%" y="677" width="1.7504%" height="15" fill="rgb(222,26,43)" fg:x="91211" fg:w="1977"/><text x="81.0056%" y="687.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (1,971 samples, 1.75%)</title><rect x="80.7609%" y="661" width="1.7451%" height="15" fill="rgb(243,29,36)" fg:x="91217" fg:w="1971"/><text x="81.0109%" y="671.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (1,971 samples, 1.75%)</title><rect x="80.7609%" y="645" width="1.7451%" height="15" fill="rgb(241,9,27)" fg:x="91217" fg:w="1971"/><text x="81.0109%" y="655.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::borrow::Borrow&lt;B&gt;&gt;::borrow (108 samples, 0.10%)</title><rect x="83.1992%" y="725" width="0.0956%" height="15" fill="rgb(205,117,26)" fg:x="93971" fg:w="108"/><text x="83.4492%" y="735.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::ops::deref::Deref&gt;::deref (108 samples, 0.10%)</title><rect x="83.1992%" y="709" width="0.0956%" height="15" fill="rgb(209,80,39)" fg:x="93971" fg:w="108"/><text x="83.4492%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::borrow::Cow&lt;tremor_value::value::Value&gt;&gt; (19 samples, 0.02%)</title><rect x="83.2948%" y="725" width="0.0168%" height="15" fill="rgb(239,155,6)" fg:x="94079" fg:w="19"/><text x="83.5448%" y="735.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (105 samples, 0.09%)</title><rect x="83.3116%" y="725" width="0.0930%" height="15" fill="rgb(212,104,12)" fg:x="94098" fg:w="105"/><text x="83.5616%" y="735.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (60 samples, 0.05%)</title><rect x="83.4117%" y="709" width="0.0531%" height="15" fill="rgb(234,204,3)" fg:x="94211" fg:w="60"/><text x="83.6617%" y="719.50"></text></g><g><title>tremor_script::interpreter::test_guard (69 samples, 0.06%)</title><rect x="83.4046%" y="725" width="0.0611%" height="15" fill="rgb(251,218,7)" fg:x="94203" fg:w="69"/><text x="83.6546%" y="735.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (11,575 samples, 10.25%)</title><rect x="73.6266%" y="917" width="10.2482%" height="15" fill="rgb(221,81,32)" fg:x="83159" fg:w="11575"/><text x="73.8766%" y="927.50">tremor_pipeline..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (11,575 samples, 10.25%)</title><rect x="73.6266%" y="901" width="10.2482%" height="15" fill="rgb(214,152,26)" fg:x="83159" fg:w="11575"/><text x="73.8766%" y="911.50">tremor_pipeline..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (11,575 samples, 10.25%)</title><rect x="73.6266%" y="885" width="10.2482%" height="15" fill="rgb(223,22,3)" fg:x="83159" fg:w="11575"/><text x="73.8766%" y="895.50">tremor_pipeline..</text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (11,575 samples, 10.25%)</title><rect x="73.6266%" y="869" width="10.2482%" height="15" fill="rgb(207,174,7)" fg:x="83159" fg:w="11575"/><text x="73.8766%" y="879.50">&lt;tremor_pipelin..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (11,575 samples, 10.25%)</title><rect x="73.6266%" y="853" width="10.2482%" height="15" fill="rgb(224,19,52)" fg:x="83159" fg:w="11575"/><text x="73.8766%" y="863.50">&lt;tremor_pipelin..</text></g><g><title>tremor_script::srs::EventPayload::rent_mut (11,575 samples, 10.25%)</title><rect x="73.6266%" y="837" width="10.2482%" height="15" fill="rgb(228,24,14)" fg:x="83159" fg:w="11575"/><text x="73.8766%" y="847.50">tremor_script::..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (11,575 samples, 10.25%)</title><rect x="73.6266%" y="821" width="10.2482%" height="15" fill="rgb(230,153,43)" fg:x="83159" fg:w="11575"/><text x="73.8766%" y="831.50">&lt;tremor_pipelin..</text></g><g><title>tremor_script::script::Script::run (11,575 samples, 10.25%)</title><rect x="73.6266%" y="805" width="10.2482%" height="15" fill="rgb(231,106,12)" fg:x="83159" fg:w="11575"/><text x="73.8766%" y="815.50">tremor_script::..</text></g><g><title>tremor_script::ast::Script::run (11,575 samples, 10.25%)</title><rect x="73.6266%" y="789" width="10.2482%" height="15" fill="rgb(215,92,2)" fg:x="83159" fg:w="11575"/><text x="73.8766%" y="799.50">tremor_script::..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (11,575 samples, 10.25%)</title><rect x="73.6266%" y="773" width="10.2482%" height="15" fill="rgb(249,143,25)" fg:x="83159" fg:w="11575"/><text x="73.8766%" y="783.50">tremor_script::..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (10,578 samples, 9.37%)</title><rect x="74.5093%" y="757" width="9.3655%" height="15" fill="rgb(252,7,35)" fg:x="84156" fg:w="10578"/><text x="74.7593%" y="767.50">tremor_script..</text></g><g><title>tremor_script::interpreter::test_predicate_expr (1,546 samples, 1.37%)</title><rect x="82.5060%" y="741" width="1.3688%" height="15" fill="rgb(216,69,40)" fg:x="93188" fg:w="1546"/><text x="82.7560%" y="751.50"></text></g><g><title>tremor_script::interpreter::val_eq (462 samples, 0.41%)</title><rect x="83.4657%" y="725" width="0.4090%" height="15" fill="rgb(240,36,33)" fg:x="94272" fg:w="462"/><text x="83.7157%" y="735.50"></text></g><g><title>[libc-2.31.so] (287 samples, 0.25%)</title><rect x="83.6206%" y="709" width="0.2541%" height="15" fill="rgb(231,128,14)" fg:x="94447" fg:w="287"/><text x="83.8706%" y="719.50"></text></g><g><title>[libc-2.31.so] (161 samples, 0.14%)</title><rect x="83.9650%" y="821" width="0.1425%" height="15" fill="rgb(245,143,14)" fg:x="94836" fg:w="161"/><text x="84.2150%" y="831.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (110 samples, 0.10%)</title><rect x="84.1465%" y="805" width="0.0974%" height="15" fill="rgb(222,130,28)" fg:x="95041" fg:w="110"/><text x="84.3965%" y="815.50"></text></g><g><title>core::ptr::write (110 samples, 0.10%)</title><rect x="84.1465%" y="789" width="0.0974%" height="15" fill="rgb(212,10,48)" fg:x="95041" fg:w="110"/><text x="84.3965%" y="799.50"></text></g><g><title>[libc-2.31.so] (107 samples, 0.09%)</title><rect x="84.1492%" y="773" width="0.0947%" height="15" fill="rgb(254,118,45)" fg:x="95044" fg:w="107"/><text x="84.3992%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (208 samples, 0.18%)</title><rect x="84.2439%" y="805" width="0.1842%" height="15" fill="rgb(228,6,45)" fg:x="95151" fg:w="208"/><text x="84.4939%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (208 samples, 0.18%)</title><rect x="84.2439%" y="789" width="0.1842%" height="15" fill="rgb(241,18,35)" fg:x="95151" fg:w="208"/><text x="84.4939%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (207 samples, 0.18%)</title><rect x="84.4281%" y="805" width="0.1833%" height="15" fill="rgb(227,214,53)" fg:x="95359" fg:w="207"/><text x="84.6781%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_load (204 samples, 0.18%)</title><rect x="84.4308%" y="789" width="0.1806%" height="15" fill="rgb(224,107,51)" fg:x="95362" fg:w="204"/><text x="84.6808%" y="799.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (783 samples, 0.69%)</title><rect x="83.9234%" y="837" width="0.6932%" height="15" fill="rgb(248,60,28)" fg:x="94789" fg:w="783"/><text x="84.1734%" y="847.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (575 samples, 0.51%)</title><rect x="84.1076%" y="821" width="0.5091%" height="15" fill="rgb(249,101,23)" fg:x="94997" fg:w="575"/><text x="84.3576%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (58 samples, 0.05%)</title><rect x="84.6246%" y="821" width="0.0514%" height="15" fill="rgb(228,51,19)" fg:x="95581" fg:w="58"/><text x="84.8746%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (54 samples, 0.05%)</title><rect x="84.6282%" y="805" width="0.0478%" height="15" fill="rgb(213,20,6)" fg:x="95585" fg:w="54"/><text x="84.8782%" y="815.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (54 samples, 0.05%)</title><rect x="84.6282%" y="789" width="0.0478%" height="15" fill="rgb(212,124,10)" fg:x="95585" fg:w="54"/><text x="84.8782%" y="799.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (49 samples, 0.04%)</title><rect x="84.6326%" y="773" width="0.0434%" height="15" fill="rgb(248,3,40)" fg:x="95590" fg:w="49"/><text x="84.8826%" y="783.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (49 samples, 0.04%)</title><rect x="84.6326%" y="757" width="0.0434%" height="15" fill="rgb(223,178,23)" fg:x="95590" fg:w="49"/><text x="84.8826%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (49 samples, 0.04%)</title><rect x="84.6326%" y="741" width="0.0434%" height="15" fill="rgb(240,132,45)" fg:x="95590" fg:w="49"/><text x="84.8826%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_swap (49 samples, 0.04%)</title><rect x="84.6326%" y="725" width="0.0434%" height="15" fill="rgb(245,164,36)" fg:x="95590" fg:w="49"/><text x="84.8826%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (35 samples, 0.03%)</title><rect x="84.6760%" y="821" width="0.0310%" height="15" fill="rgb(231,188,53)" fg:x="95639" fg:w="35"/><text x="84.9260%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_load (35 samples, 0.03%)</title><rect x="84.6760%" y="805" width="0.0310%" height="15" fill="rgb(237,198,39)" fg:x="95639" fg:w="35"/><text x="84.9260%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (56 samples, 0.05%)</title><rect x="84.7132%" y="757" width="0.0496%" height="15" fill="rgb(223,120,35)" fg:x="95681" fg:w="56"/><text x="84.9632%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (56 samples, 0.05%)</title><rect x="84.7132%" y="741" width="0.0496%" height="15" fill="rgb(253,107,49)" fg:x="95681" fg:w="56"/><text x="84.9632%" y="751.50"></text></g><g><title>event_listener::Inner::lock (65 samples, 0.06%)</title><rect x="84.7079%" y="821" width="0.0575%" height="15" fill="rgb(216,44,31)" fg:x="95675" fg:w="65"/><text x="84.9579%" y="831.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (62 samples, 0.05%)</title><rect x="84.7105%" y="805" width="0.0549%" height="15" fill="rgb(253,87,21)" fg:x="95678" fg:w="62"/><text x="84.9605%" y="815.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (59 samples, 0.05%)</title><rect x="84.7132%" y="789" width="0.0522%" height="15" fill="rgb(226,18,2)" fg:x="95681" fg:w="59"/><text x="84.9632%" y="799.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (59 samples, 0.05%)</title><rect x="84.7132%" y="773" width="0.0522%" height="15" fill="rgb(216,8,46)" fg:x="95681" fg:w="59"/><text x="84.9632%" y="783.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_waker (26 samples, 0.02%)</title><rect x="84.7769%" y="773" width="0.0230%" height="15" fill="rgb(226,140,39)" fg:x="95753" fg:w="26"/><text x="85.0269%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (25 samples, 0.02%)</title><rect x="84.7778%" y="757" width="0.0221%" height="15" fill="rgb(221,194,54)" fg:x="95754" fg:w="25"/><text x="85.0278%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_sub (25 samples, 0.02%)</title><rect x="84.7778%" y="741" width="0.0221%" height="15" fill="rgb(213,92,11)" fg:x="95754" fg:w="25"/><text x="85.0278%" y="751.50"></text></g><g><title>async_executor::Sleepers::notify (22 samples, 0.02%)</title><rect x="84.8079%" y="725" width="0.0195%" height="15" fill="rgb(229,162,46)" fg:x="95788" fg:w="22"/><text x="85.0579%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (20 samples, 0.02%)</title><rect x="84.8097%" y="709" width="0.0177%" height="15" fill="rgb(214,111,36)" fg:x="95790" fg:w="20"/><text x="85.0597%" y="719.50"></text></g><g><title>core::ptr::read (18 samples, 0.02%)</title><rect x="84.8115%" y="693" width="0.0159%" height="15" fill="rgb(207,6,21)" fg:x="95792" fg:w="18"/><text x="85.0615%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (68 samples, 0.06%)</title><rect x="84.8309%" y="661" width="0.0602%" height="15" fill="rgb(213,127,38)" fg:x="95814" fg:w="68"/><text x="85.0809%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_swap (68 samples, 0.06%)</title><rect x="84.8309%" y="645" width="0.0602%" height="15" fill="rgb(238,118,32)" fg:x="95814" fg:w="68"/><text x="85.0809%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (75 samples, 0.07%)</title><rect x="84.8274%" y="725" width="0.0664%" height="15" fill="rgb(240,139,39)" fg:x="95810" fg:w="75"/><text x="85.0774%" y="735.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (75 samples, 0.07%)</title><rect x="84.8274%" y="709" width="0.0664%" height="15" fill="rgb(235,10,37)" fg:x="95810" fg:w="75"/><text x="85.0774%" y="719.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (72 samples, 0.06%)</title><rect x="84.8301%" y="693" width="0.0637%" height="15" fill="rgb(249,171,38)" fg:x="95813" fg:w="72"/><text x="85.0801%" y="703.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (72 samples, 0.06%)</title><rect x="84.8301%" y="677" width="0.0637%" height="15" fill="rgb(242,144,32)" fg:x="95813" fg:w="72"/><text x="85.0801%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (37 samples, 0.03%)</title><rect x="84.8938%" y="725" width="0.0328%" height="15" fill="rgb(217,117,21)" fg:x="95885" fg:w="37"/><text x="85.1438%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (37 samples, 0.03%)</title><rect x="84.8938%" y="709" width="0.0328%" height="15" fill="rgb(249,87,1)" fg:x="95885" fg:w="37"/><text x="85.1438%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (13 samples, 0.01%)</title><rect x="84.9452%" y="645" width="0.0115%" height="15" fill="rgb(248,196,48)" fg:x="95943" fg:w="13"/><text x="85.1952%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (13 samples, 0.01%)</title><rect x="84.9452%" y="629" width="0.0115%" height="15" fill="rgb(251,206,33)" fg:x="95943" fg:w="13"/><text x="85.1952%" y="639.50"></text></g><g><title>async_io::reactor::Reactor::notify (48 samples, 0.04%)</title><rect x="84.9398%" y="677" width="0.0425%" height="15" fill="rgb(232,141,28)" fg:x="95937" fg:w="48"/><text x="85.1898%" y="687.50"></text></g><g><title>polling::Poller::notify (42 samples, 0.04%)</title><rect x="84.9452%" y="661" width="0.0372%" height="15" fill="rgb(209,167,14)" fg:x="95943" fg:w="42"/><text x="85.1952%" y="671.50"></text></g><g><title>polling::epoll::Poller::notify (28 samples, 0.02%)</title><rect x="84.9575%" y="645" width="0.0248%" height="15" fill="rgb(225,11,50)" fg:x="95957" fg:w="28"/><text x="85.2075%" y="655.50"></text></g><g><title>__libc_write (25 samples, 0.02%)</title><rect x="84.9602%" y="629" width="0.0221%" height="15" fill="rgb(209,50,20)" fg:x="95960" fg:w="25"/><text x="85.2102%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (56 samples, 0.05%)</title><rect x="85.0151%" y="645" width="0.0496%" height="15" fill="rgb(212,17,46)" fg:x="96022" fg:w="56"/><text x="85.2651%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_swap (56 samples, 0.05%)</title><rect x="85.0151%" y="629" width="0.0496%" height="15" fill="rgb(216,101,39)" fg:x="96022" fg:w="56"/><text x="85.2651%" y="639.50"></text></g><g><title>parking::Unparker::unpark (104 samples, 0.09%)</title><rect x="84.9868%" y="677" width="0.0921%" height="15" fill="rgb(212,228,48)" fg:x="95990" fg:w="104"/><text x="85.2368%" y="687.50"></text></g><g><title>parking::Inner::unpark (84 samples, 0.07%)</title><rect x="85.0045%" y="661" width="0.0744%" height="15" fill="rgb(250,6,50)" fg:x="96010" fg:w="84"/><text x="85.2545%" y="671.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (178 samples, 0.16%)</title><rect x="84.9266%" y="693" width="0.1576%" height="15" fill="rgb(250,160,48)" fg:x="95922" fg:w="178"/><text x="85.1766%" y="703.50"></text></g><g><title>core::task::wake::Waker::wake (256 samples, 0.23%)</title><rect x="84.9266%" y="725" width="0.2267%" height="15" fill="rgb(244,216,33)" fg:x="95922" fg:w="256"/><text x="85.1766%" y="735.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (256 samples, 0.23%)</title><rect x="84.9266%" y="709" width="0.2267%" height="15" fill="rgb(207,157,5)" fg:x="95922" fg:w="256"/><text x="85.1766%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (78 samples, 0.07%)</title><rect x="85.0842%" y="693" width="0.0691%" height="15" fill="rgb(228,199,8)" fg:x="96100" fg:w="78"/><text x="85.3342%" y="703.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (78 samples, 0.07%)</title><rect x="85.0842%" y="677" width="0.0691%" height="15" fill="rgb(227,80,20)" fg:x="96100" fg:w="78"/><text x="85.3342%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (71 samples, 0.06%)</title><rect x="85.0904%" y="661" width="0.0629%" height="15" fill="rgb(222,9,33)" fg:x="96107" fg:w="71"/><text x="85.3404%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_sub (71 samples, 0.06%)</title><rect x="85.0904%" y="645" width="0.0629%" height="15" fill="rgb(239,44,28)" fg:x="96107" fg:w="71"/><text x="85.3404%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (59 samples, 0.05%)</title><rect x="85.1665%" y="677" width="0.0522%" height="15" fill="rgb(249,187,43)" fg:x="96193" fg:w="59"/><text x="85.4165%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (59 samples, 0.05%)</title><rect x="85.1665%" y="661" width="0.0522%" height="15" fill="rgb(216,141,28)" fg:x="96193" fg:w="59"/><text x="85.4165%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (13 samples, 0.01%)</title><rect x="85.2196%" y="661" width="0.0115%" height="15" fill="rgb(230,154,53)" fg:x="96253" fg:w="13"/><text x="85.4696%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (13 samples, 0.01%)</title><rect x="85.2196%" y="645" width="0.0115%" height="15" fill="rgb(227,82,4)" fg:x="96253" fg:w="13"/><text x="85.4696%" y="655.50"></text></g><g><title>async_executor::State::notify (517 samples, 0.46%)</title><rect x="84.8035%" y="741" width="0.4577%" height="15" fill="rgb(220,107,16)" fg:x="95783" fg:w="517"/><text x="85.0535%" y="751.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (122 samples, 0.11%)</title><rect x="85.1532%" y="725" width="0.1080%" height="15" fill="rgb(207,187,2)" fg:x="96178" fg:w="122"/><text x="85.4032%" y="735.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (113 samples, 0.10%)</title><rect x="85.1612%" y="709" width="0.1000%" height="15" fill="rgb(210,162,52)" fg:x="96187" fg:w="113"/><text x="85.4112%" y="719.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (113 samples, 0.10%)</title><rect x="85.1612%" y="693" width="0.1000%" height="15" fill="rgb(217,216,49)" fg:x="96187" fg:w="113"/><text x="85.4112%" y="703.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (48 samples, 0.04%)</title><rect x="85.2187%" y="677" width="0.0425%" height="15" fill="rgb(218,146,49)" fg:x="96252" fg:w="48"/><text x="85.4687%" y="687.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (24 samples, 0.02%)</title><rect x="85.2400%" y="661" width="0.0212%" height="15" fill="rgb(216,55,40)" fg:x="96276" fg:w="24"/><text x="85.4900%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (14 samples, 0.01%)</title><rect x="85.2488%" y="645" width="0.0124%" height="15" fill="rgb(208,196,21)" fg:x="96286" fg:w="14"/><text x="85.4988%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_load (14 samples, 0.01%)</title><rect x="85.2488%" y="629" width="0.0124%" height="15" fill="rgb(242,117,42)" fg:x="96286" fg:w="14"/><text x="85.4988%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (103 samples, 0.09%)</title><rect x="85.2719%" y="709" width="0.0912%" height="15" fill="rgb(210,11,23)" fg:x="96312" fg:w="103"/><text x="85.5219%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (103 samples, 0.09%)</title><rect x="85.2719%" y="693" width="0.0912%" height="15" fill="rgb(217,110,2)" fg:x="96312" fg:w="103"/><text x="85.5219%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (43 samples, 0.04%)</title><rect x="85.3630%" y="709" width="0.0381%" height="15" fill="rgb(229,77,54)" fg:x="96415" fg:w="43"/><text x="85.6130%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_or (43 samples, 0.04%)</title><rect x="85.3630%" y="693" width="0.0381%" height="15" fill="rgb(218,53,16)" fg:x="96415" fg:w="43"/><text x="85.6130%" y="703.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (677 samples, 0.60%)</title><rect x="84.8026%" y="757" width="0.5994%" height="15" fill="rgb(215,38,13)" fg:x="95782" fg:w="677"/><text x="85.0526%" y="767.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (159 samples, 0.14%)</title><rect x="85.2612%" y="741" width="0.1408%" height="15" fill="rgb(235,42,18)" fg:x="96300" fg:w="159"/><text x="85.5112%" y="751.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (157 samples, 0.14%)</title><rect x="85.2630%" y="725" width="0.1390%" height="15" fill="rgb(219,66,54)" fg:x="96302" fg:w="157"/><text x="85.5130%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (159 samples, 0.14%)</title><rect x="85.4020%" y="757" width="0.1408%" height="15" fill="rgb(222,205,4)" fg:x="96459" fg:w="159"/><text x="85.6520%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (159 samples, 0.14%)</title><rect x="85.4020%" y="741" width="0.1408%" height="15" fill="rgb(227,213,46)" fg:x="96459" fg:w="159"/><text x="85.6520%" y="751.50"></text></g><g><title>event_listener::List::notify (915 samples, 0.81%)</title><rect x="84.7654%" y="821" width="0.8101%" height="15" fill="rgb(250,145,42)" fg:x="95740" fg:w="915"/><text x="85.0154%" y="831.50"></text></g><g><title>core::task::wake::Waker::wake (904 samples, 0.80%)</title><rect x="84.7752%" y="805" width="0.8004%" height="15" fill="rgb(219,15,2)" fg:x="95751" fg:w="904"/><text x="85.0252%" y="815.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (904 samples, 0.80%)</title><rect x="84.7752%" y="789" width="0.8004%" height="15" fill="rgb(231,181,52)" fg:x="95751" fg:w="904"/><text x="85.0252%" y="799.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (876 samples, 0.78%)</title><rect x="84.8000%" y="773" width="0.7756%" height="15" fill="rgb(235,1,42)" fg:x="95779" fg:w="876"/><text x="85.0500%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (37 samples, 0.03%)</title><rect x="85.5428%" y="757" width="0.0328%" height="15" fill="rgb(249,88,27)" fg:x="96618" fg:w="37"/><text x="85.7928%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_load (37 samples, 0.03%)</title><rect x="85.5428%" y="741" width="0.0328%" height="15" fill="rgb(235,145,16)" fg:x="96618" fg:w="37"/><text x="85.7928%" y="751.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (2,778 samples, 2.46%)</title><rect x="83.9164%" y="853" width="2.4596%" height="15" fill="rgb(237,114,19)" fg:x="94781" fg:w="2778"/><text x="84.1664%" y="863.50">as..</text></g><g><title>event_listener::Event::notify (1,987 samples, 1.76%)</title><rect x="84.6167%" y="837" width="1.7592%" height="15" fill="rgb(238,51,50)" fg:x="95572" fg:w="1987"/><text x="84.8667%" y="847.50"></text></g><g><title>event_listener::full_fence (904 samples, 0.80%)</title><rect x="85.5755%" y="821" width="0.8004%" height="15" fill="rgb(205,194,25)" fg:x="96655" fg:w="904"/><text x="85.8255%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (897 samples, 0.79%)</title><rect x="85.5817%" y="805" width="0.7942%" height="15" fill="rgb(215,203,17)" fg:x="96662" fg:w="897"/><text x="85.8317%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (897 samples, 0.79%)</title><rect x="85.5817%" y="789" width="0.7942%" height="15" fill="rgb(233,112,49)" fg:x="96662" fg:w="897"/><text x="85.8317%" y="799.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (15,042 samples, 13.32%)</title><rect x="73.1972%" y="949" width="13.3178%" height="15" fill="rgb(241,130,26)" fg:x="82674" fg:w="15042"/><text x="73.4472%" y="959.50">tremor_runtime::pipe..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14,557 samples, 12.89%)</title><rect x="73.6266%" y="933" width="12.8883%" height="15" fill="rgb(252,223,19)" fg:x="83159" fg:w="14557"/><text x="73.8766%" y="943.50">&lt;core::future::from..</text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (2,982 samples, 2.64%)</title><rect x="83.8747%" y="917" width="2.6402%" height="15" fill="rgb(211,95,25)" fg:x="94734" fg:w="2982"/><text x="84.1247%" y="927.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,982 samples, 2.64%)</title><rect x="83.8747%" y="901" width="2.6402%" height="15" fill="rgb(251,182,27)" fg:x="94734" fg:w="2982"/><text x="84.1247%" y="911.50">&lt;c..</text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (2,982 samples, 2.64%)</title><rect x="83.8747%" y="885" width="2.6402%" height="15" fill="rgb(238,24,4)" fg:x="94734" fg:w="2982"/><text x="84.1247%" y="895.50">tr..</text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (2,982 samples, 2.64%)</title><rect x="83.8747%" y="869" width="2.6402%" height="15" fill="rgb(224,220,25)" fg:x="94734" fg:w="2982"/><text x="84.1247%" y="879.50">&lt;a..</text></g><g><title>event_listener::Event::notify (148 samples, 0.13%)</title><rect x="86.3839%" y="853" width="0.1310%" height="15" fill="rgb(239,133,26)" fg:x="97568" fg:w="148"/><text x="86.6339%" y="863.50"></text></g><g><title>event_listener::full_fence (141 samples, 0.12%)</title><rect x="86.3901%" y="837" width="0.1248%" height="15" fill="rgb(211,94,48)" fg:x="97575" fg:w="141"/><text x="86.6401%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (135 samples, 0.12%)</title><rect x="86.3954%" y="821" width="0.1195%" height="15" fill="rgb(239,87,6)" fg:x="97581" fg:w="135"/><text x="86.6454%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (135 samples, 0.12%)</title><rect x="86.3954%" y="805" width="0.1195%" height="15" fill="rgb(227,62,0)" fg:x="97581" fg:w="135"/><text x="86.6454%" y="815.50"></text></g><g><title>tremor_runtime::postprocessor::postprocess (30 samples, 0.03%)</title><rect x="86.5149%" y="949" width="0.0266%" height="15" fill="rgb(211,226,4)" fg:x="97716" fg:w="30"/><text x="86.7649%" y="959.50"></text></g><g><title>tremor_script::ast::Script::run (48 samples, 0.04%)</title><rect x="86.5477%" y="949" width="0.0425%" height="15" fill="rgb(253,38,52)" fg:x="97753" fg:w="48"/><text x="86.7977%" y="959.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (41 samples, 0.04%)</title><rect x="86.5539%" y="933" width="0.0363%" height="15" fill="rgb(229,126,40)" fg:x="97760" fg:w="41"/><text x="86.8039%" y="943.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (41 samples, 0.04%)</title><rect x="86.5539%" y="917" width="0.0363%" height="15" fill="rgb(229,165,44)" fg:x="97760" fg:w="41"/><text x="86.8039%" y="927.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (41 samples, 0.04%)</title><rect x="86.5539%" y="901" width="0.0363%" height="15" fill="rgb(247,95,47)" fg:x="97760" fg:w="41"/><text x="86.8039%" y="911.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (41 samples, 0.04%)</title><rect x="86.5539%" y="885" width="0.0363%" height="15" fill="rgb(216,140,30)" fg:x="97760" fg:w="41"/><text x="86.8039%" y="895.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (41 samples, 0.04%)</title><rect x="86.5539%" y="869" width="0.0363%" height="15" fill="rgb(246,214,8)" fg:x="97760" fg:w="41"/><text x="86.8039%" y="879.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (41 samples, 0.04%)</title><rect x="86.5539%" y="853" width="0.0363%" height="15" fill="rgb(227,224,15)" fg:x="97760" fg:w="41"/><text x="86.8039%" y="863.50"></text></g><g><title>tremor_script::interpreter::resolve (41 samples, 0.04%)</title><rect x="86.5539%" y="837" width="0.0363%" height="15" fill="rgb(233,175,4)" fg:x="97760" fg:w="41"/><text x="86.8039%" y="847.50"></text></g><g><title>tremor_script::interpreter::resolve_value (41 samples, 0.04%)</title><rect x="86.5539%" y="821" width="0.0363%" height="15" fill="rgb(221,66,45)" fg:x="97760" fg:w="41"/><text x="86.8039%" y="831.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup (31 samples, 0.03%)</title><rect x="86.5627%" y="805" width="0.0274%" height="15" fill="rgb(221,178,18)" fg:x="97770" fg:w="31"/><text x="86.8127%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (31 samples, 0.03%)</title><rect x="86.5627%" y="789" width="0.0274%" height="15" fill="rgb(213,81,29)" fg:x="97770" fg:w="31"/><text x="86.8127%" y="799.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (31 samples, 0.03%)</title><rect x="86.5627%" y="773" width="0.0274%" height="15" fill="rgb(220,89,49)" fg:x="97770" fg:w="31"/><text x="86.8127%" y="783.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (31 samples, 0.03%)</title><rect x="86.5627%" y="757" width="0.0274%" height="15" fill="rgb(227,60,33)" fg:x="97770" fg:w="31"/><text x="86.8127%" y="767.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_key_hashed_nocheck (31 samples, 0.03%)</title><rect x="86.5627%" y="741" width="0.0274%" height="15" fill="rgb(205,113,12)" fg:x="97770" fg:w="31"/><text x="86.8127%" y="751.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_key_hashed_nocheck (31 samples, 0.03%)</title><rect x="86.5627%" y="725" width="0.0274%" height="15" fill="rgb(211,32,1)" fg:x="97770" fg:w="31"/><text x="86.8127%" y="735.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_hash (31 samples, 0.03%)</title><rect x="86.5627%" y="709" width="0.0274%" height="15" fill="rgb(246,2,12)" fg:x="97770" fg:w="31"/><text x="86.8127%" y="719.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::search (31 samples, 0.03%)</title><rect x="86.5627%" y="693" width="0.0274%" height="15" fill="rgb(243,37,27)" fg:x="97770" fg:w="31"/><text x="86.8127%" y="703.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (25 samples, 0.02%)</title><rect x="86.5680%" y="677" width="0.0221%" height="15" fill="rgb(248,211,31)" fg:x="97776" fg:w="25"/><text x="86.8180%" y="687.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (25 samples, 0.02%)</title><rect x="86.5680%" y="661" width="0.0221%" height="15" fill="rgb(242,146,47)" fg:x="97776" fg:w="25"/><text x="86.8180%" y="671.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (25 samples, 0.02%)</title><rect x="86.5680%" y="645" width="0.0221%" height="15" fill="rgb(206,70,20)" fg:x="97776" fg:w="25"/><text x="86.8180%" y="655.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (25 samples, 0.02%)</title><rect x="86.5680%" y="629" width="0.0221%" height="15" fill="rgb(215,10,51)" fg:x="97776" fg:w="25"/><text x="86.8180%" y="639.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (25 samples, 0.02%)</title><rect x="86.5680%" y="613" width="0.0221%" height="15" fill="rgb(243,178,53)" fg:x="97776" fg:w="25"/><text x="86.8180%" y="623.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (60 samples, 0.05%)</title><rect x="86.5902%" y="949" width="0.0531%" height="15" fill="rgb(233,221,20)" fg:x="97801" fg:w="60"/><text x="86.8402%" y="959.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (15 samples, 0.01%)</title><rect x="86.6610%" y="949" width="0.0133%" height="15" fill="rgb(218,95,35)" fg:x="97881" fg:w="15"/><text x="86.9110%" y="959.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (12 samples, 0.01%)</title><rect x="86.6743%" y="949" width="0.0106%" height="15" fill="rgb(229,13,5)" fg:x="97896" fg:w="12"/><text x="86.9243%" y="959.50"></text></g><g><title>tremor_script::interpreter::val_eq (110 samples, 0.10%)</title><rect x="86.6938%" y="949" width="0.0974%" height="15" fill="rgb(252,164,30)" fg:x="97918" fg:w="110"/><text x="86.9438%" y="959.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="86.8620%" y="757" width="0.0115%" height="15" fill="rgb(232,68,36)" fg:x="98108" fg:w="13"/><text x="87.1120%" y="767.50"></text></g><g><title>tremor_script::ast::Path::segments (12 samples, 0.01%)</title><rect x="86.8761%" y="757" width="0.0106%" height="15" fill="rgb(219,59,54)" fg:x="98124" fg:w="12"/><text x="87.1261%" y="767.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry (24 samples, 0.02%)</title><rect x="86.8921%" y="693" width="0.0212%" height="15" fill="rgb(250,92,33)" fg:x="98142" fg:w="24"/><text x="87.1421%" y="703.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_key_hashed_nocheck (121 samples, 0.11%)</title><rect x="86.9133%" y="693" width="0.1071%" height="15" fill="rgb(229,162,54)" fg:x="98166" fg:w="121"/><text x="87.1633%" y="703.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_key_hashed_nocheck (119 samples, 0.11%)</title><rect x="86.9151%" y="677" width="0.1054%" height="15" fill="rgb(244,114,52)" fg:x="98168" fg:w="119"/><text x="87.1651%" y="687.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_hash (119 samples, 0.11%)</title><rect x="86.9151%" y="661" width="0.1054%" height="15" fill="rgb(212,211,43)" fg:x="98168" fg:w="119"/><text x="87.1651%" y="671.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::search (119 samples, 0.11%)</title><rect x="86.9151%" y="645" width="0.1054%" height="15" fill="rgb(226,147,8)" fg:x="98168" fg:w="119"/><text x="87.1651%" y="655.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (112 samples, 0.10%)</title><rect x="86.9213%" y="629" width="0.0992%" height="15" fill="rgb(226,23,13)" fg:x="98175" fg:w="112"/><text x="87.1713%" y="639.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (107 samples, 0.09%)</title><rect x="86.9257%" y="613" width="0.0947%" height="15" fill="rgb(240,63,4)" fg:x="98180" fg:w="107"/><text x="87.1757%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (107 samples, 0.09%)</title><rect x="86.9257%" y="597" width="0.0947%" height="15" fill="rgb(221,1,32)" fg:x="98180" fg:w="107"/><text x="87.1757%" y="607.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (107 samples, 0.09%)</title><rect x="86.9257%" y="581" width="0.0947%" height="15" fill="rgb(242,117,10)" fg:x="98180" fg:w="107"/><text x="87.1757%" y="591.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (107 samples, 0.09%)</title><rect x="86.9257%" y="565" width="0.0947%" height="15" fill="rgb(249,172,44)" fg:x="98180" fg:w="107"/><text x="87.1757%" y="575.50"></text></g><g><title>[libc-2.31.so] (56 samples, 0.05%)</title><rect x="86.9709%" y="549" width="0.0496%" height="15" fill="rgb(244,46,45)" fg:x="98231" fg:w="56"/><text x="87.2209%" y="559.50"></text></g><g><title>tremor_script::srs::EventPayload::rent_mut (261 samples, 0.23%)</title><rect x="86.7911%" y="949" width="0.2311%" height="15" fill="rgb(206,43,17)" fg:x="98028" fg:w="261"/><text x="87.0411%" y="959.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (253 samples, 0.22%)</title><rect x="86.7982%" y="933" width="0.2240%" height="15" fill="rgb(239,218,39)" fg:x="98036" fg:w="253"/><text x="87.0482%" y="943.50"></text></g><g><title>tremor_script::script::Script::run (253 samples, 0.22%)</title><rect x="86.7982%" y="917" width="0.2240%" height="15" fill="rgb(208,169,54)" fg:x="98036" fg:w="253"/><text x="87.0482%" y="927.50"></text></g><g><title>tremor_script::ast::Script::run (253 samples, 0.22%)</title><rect x="86.7982%" y="901" width="0.2240%" height="15" fill="rgb(247,25,42)" fg:x="98036" fg:w="253"/><text x="87.0482%" y="911.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (253 samples, 0.22%)</title><rect x="86.7982%" y="885" width="0.2240%" height="15" fill="rgb(226,23,31)" fg:x="98036" fg:w="253"/><text x="87.0482%" y="895.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (247 samples, 0.22%)</title><rect x="86.8035%" y="869" width="0.2187%" height="15" fill="rgb(247,16,28)" fg:x="98042" fg:w="247"/><text x="87.0535%" y="879.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (247 samples, 0.22%)</title><rect x="86.8035%" y="853" width="0.2187%" height="15" fill="rgb(231,147,38)" fg:x="98042" fg:w="247"/><text x="87.0535%" y="863.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (247 samples, 0.22%)</title><rect x="86.8035%" y="837" width="0.2187%" height="15" fill="rgb(253,81,48)" fg:x="98042" fg:w="247"/><text x="87.0535%" y="847.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (247 samples, 0.22%)</title><rect x="86.8035%" y="821" width="0.2187%" height="15" fill="rgb(249,222,43)" fg:x="98042" fg:w="247"/><text x="87.0535%" y="831.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (247 samples, 0.22%)</title><rect x="86.8035%" y="805" width="0.2187%" height="15" fill="rgb(221,3,27)" fg:x="98042" fg:w="247"/><text x="87.0535%" y="815.50"></text></g><g><title>tremor_script::interpreter::resolve (247 samples, 0.22%)</title><rect x="86.8035%" y="789" width="0.2187%" height="15" fill="rgb(228,180,5)" fg:x="98042" fg:w="247"/><text x="87.0535%" y="799.50"></text></g><g><title>tremor_script::interpreter::resolve_value (247 samples, 0.22%)</title><rect x="86.8035%" y="773" width="0.2187%" height="15" fill="rgb(227,131,42)" fg:x="98042" fg:w="247"/><text x="87.0535%" y="783.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup (153 samples, 0.14%)</title><rect x="86.8868%" y="757" width="0.1355%" height="15" fill="rgb(212,3,39)" fg:x="98136" fg:w="153"/><text x="87.1368%" y="767.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (153 samples, 0.14%)</title><rect x="86.8868%" y="741" width="0.1355%" height="15" fill="rgb(226,45,5)" fg:x="98136" fg:w="153"/><text x="87.1368%" y="751.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (147 samples, 0.13%)</title><rect x="86.8921%" y="725" width="0.1301%" height="15" fill="rgb(215,167,45)" fg:x="98142" fg:w="147"/><text x="87.1421%" y="735.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (147 samples, 0.13%)</title><rect x="86.8921%" y="709" width="0.1301%" height="15" fill="rgb(250,218,53)" fg:x="98142" fg:w="147"/><text x="87.1421%" y="719.50"></text></g><g><title>tremor_script::srs::EventPayload::try_new (14 samples, 0.01%)</title><rect x="87.0222%" y="949" width="0.0124%" height="15" fill="rgb(207,140,0)" fg:x="98289" fg:w="14"/><text x="87.2722%" y="959.50"></text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (297 samples, 0.26%)</title><rect x="87.0346%" y="949" width="0.2630%" height="15" fill="rgb(238,133,51)" fg:x="98303" fg:w="297"/><text x="87.2846%" y="959.50"></text></g><g><title>[unknown] (90,816 samples, 80.41%)</title><rect x="6.9147%" y="965" width="80.4059%" height="15" fill="rgb(218,203,53)" fg:x="7810" fg:w="90816"/><text x="7.1647%" y="975.50">[unknown]</text></g><g><title>window::TimeWindow::add_t (24 samples, 0.02%)</title><rect x="87.2994%" y="949" width="0.0212%" height="15" fill="rgb(226,184,25)" fg:x="98602" fg:w="24"/><text x="87.5494%" y="959.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (13 samples, 0.01%)</title><rect x="87.3259%" y="949" width="0.0115%" height="15" fill="rgb(231,121,21)" fg:x="98632" fg:w="13"/><text x="87.5759%" y="959.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (23 samples, 0.02%)</title><rect x="87.3401%" y="949" width="0.0204%" height="15" fill="rgb(251,14,34)" fg:x="98648" fg:w="23"/><text x="87.5901%" y="959.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (19 samples, 0.02%)</title><rect x="87.3436%" y="933" width="0.0168%" height="15" fill="rgb(249,193,11)" fg:x="98652" fg:w="19"/><text x="87.5936%" y="943.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (19 samples, 0.02%)</title><rect x="87.3436%" y="917" width="0.0168%" height="15" fill="rgb(220,172,37)" fg:x="98652" fg:w="19"/><text x="87.5936%" y="927.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::run::{{closure}} (30 samples, 0.03%)</title><rect x="87.3746%" y="949" width="0.0266%" height="15" fill="rgb(231,229,43)" fg:x="98687" fg:w="30"/><text x="87.6246%" y="959.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (23 samples, 0.02%)</title><rect x="87.3808%" y="933" width="0.0204%" height="15" fill="rgb(250,161,5)" fg:x="98694" fg:w="23"/><text x="87.6308%" y="943.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_source_reply::{{closure}} (21 samples, 0.02%)</title><rect x="87.3826%" y="917" width="0.0186%" height="15" fill="rgb(218,225,18)" fg:x="98696" fg:w="21"/><text x="87.6326%" y="927.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (15 samples, 0.01%)</title><rect x="87.3879%" y="901" width="0.0133%" height="15" fill="rgb(245,45,42)" fg:x="98702" fg:w="15"/><text x="87.6379%" y="911.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_data::{{closure}} (15 samples, 0.01%)</title><rect x="87.3879%" y="885" width="0.0133%" height="15" fill="rgb(211,115,1)" fg:x="98702" fg:w="15"/><text x="87.6379%" y="895.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (14 samples, 0.01%)</title><rect x="87.4764%" y="869" width="0.0124%" height="15" fill="rgb(248,133,52)" fg:x="98802" fg:w="14"/><text x="87.7264%" y="879.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (75 samples, 0.07%)</title><rect x="87.4525%" y="933" width="0.0664%" height="15" fill="rgb(238,100,21)" fg:x="98775" fg:w="75"/><text x="87.7025%" y="943.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (69 samples, 0.06%)</title><rect x="87.4578%" y="917" width="0.0611%" height="15" fill="rgb(247,144,11)" fg:x="98781" fg:w="69"/><text x="87.7078%" y="927.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (55 samples, 0.05%)</title><rect x="87.4702%" y="901" width="0.0487%" height="15" fill="rgb(206,164,16)" fg:x="98795" fg:w="55"/><text x="87.7202%" y="911.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (55 samples, 0.05%)</title><rect x="87.4702%" y="885" width="0.0487%" height="15" fill="rgb(222,34,3)" fg:x="98795" fg:w="55"/><text x="87.7202%" y="895.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue_events (31 samples, 0.03%)</title><rect x="87.4915%" y="869" width="0.0274%" height="15" fill="rgb(248,82,4)" fg:x="98819" fg:w="31"/><text x="87.7415%" y="879.50"></text></g><g><title>__dso_handle (229 samples, 0.20%)</title><rect x="87.3206%" y="965" width="0.2027%" height="15" fill="rgb(228,81,46)" fg:x="98626" fg:w="229"/><text x="87.5706%" y="975.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (138 samples, 0.12%)</title><rect x="87.4012%" y="949" width="0.1222%" height="15" fill="rgb(227,67,47)" fg:x="98717" fg:w="138"/><text x="87.6512%" y="959.50"></text></g><g><title>anon.7ffb122119e4c1435beee04d7a36cdb5.9.llvm.14803035141670572092 (16 samples, 0.01%)</title><rect x="87.5366%" y="965" width="0.0142%" height="15" fill="rgb(215,93,53)" fg:x="98870" fg:w="16"/><text x="87.7866%" y="975.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (20 samples, 0.02%)</title><rect x="87.5703%" y="933" width="0.0177%" height="15" fill="rgb(248,194,39)" fg:x="98908" fg:w="20"/><text x="87.8203%" y="943.50"></text></g><g><title>async_task::runnable::Runnable::run (20 samples, 0.02%)</title><rect x="87.5703%" y="917" width="0.0177%" height="15" fill="rgb(215,5,19)" fg:x="98908" fg:w="20"/><text x="87.8203%" y="927.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (29 samples, 0.03%)</title><rect x="87.5641%" y="949" width="0.0257%" height="15" fill="rgb(226,215,51)" fg:x="98901" fg:w="29"/><text x="87.8141%" y="959.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (26 samples, 0.02%)</title><rect x="87.5898%" y="949" width="0.0230%" height="15" fill="rgb(225,56,26)" fg:x="98930" fg:w="26"/><text x="87.8398%" y="959.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (24 samples, 0.02%)</title><rect x="87.5915%" y="933" width="0.0212%" height="15" fill="rgb(222,75,29)" fg:x="98932" fg:w="24"/><text x="87.8415%" y="943.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (21 samples, 0.02%)</title><rect x="87.5942%" y="917" width="0.0186%" height="15" fill="rgb(236,139,6)" fg:x="98935" fg:w="21"/><text x="87.8442%" y="927.50"></text></g><g><title>polling::epoll::Poller::modify (20 samples, 0.02%)</title><rect x="87.6261%" y="949" width="0.0177%" height="15" fill="rgb(223,137,36)" fg:x="98971" fg:w="20"/><text x="87.8761%" y="959.50"></text></g><g><title>async_io::reactor::Reactor::get::REACTOR (96 samples, 0.08%)</title><rect x="87.5614%" y="965" width="0.0850%" height="15" fill="rgb(226,99,2)" fg:x="98898" fg:w="96"/><text x="87.8114%" y="975.50"></text></g><g><title>async_io::reactor::Reactor::insert_timer::ID_GENERATOR (22 samples, 0.02%)</title><rect x="87.6464%" y="965" width="0.0195%" height="15" fill="rgb(206,133,23)" fg:x="98994" fg:w="22"/><text x="87.8964%" y="975.50"></text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (12 samples, 0.01%)</title><rect x="87.6553%" y="949" width="0.0106%" height="15" fill="rgb(243,173,15)" fg:x="99004" fg:w="12"/><text x="87.9053%" y="959.50"></text></g><g><title>async_channel::bounded (18 samples, 0.02%)</title><rect x="87.6880%" y="725" width="0.0159%" height="15" fill="rgb(228,69,28)" fg:x="99041" fg:w="18"/><text x="87.9380%" y="735.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (18 samples, 0.02%)</title><rect x="87.6880%" y="709" width="0.0159%" height="15" fill="rgb(212,51,22)" fg:x="99041" fg:w="18"/><text x="87.9380%" y="719.50"></text></g><g><title>alloc::alloc::exchange_malloc (18 samples, 0.02%)</title><rect x="87.6880%" y="693" width="0.0159%" height="15" fill="rgb(227,113,0)" fg:x="99041" fg:w="18"/><text x="87.9380%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (18 samples, 0.02%)</title><rect x="87.6880%" y="677" width="0.0159%" height="15" fill="rgb(252,84,27)" fg:x="99041" fg:w="18"/><text x="87.9380%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (18 samples, 0.02%)</title><rect x="87.6880%" y="661" width="0.0159%" height="15" fill="rgb(223,145,39)" fg:x="99041" fg:w="18"/><text x="87.9380%" y="671.50"></text></g><g><title>alloc::alloc::alloc (18 samples, 0.02%)</title><rect x="87.6880%" y="645" width="0.0159%" height="15" fill="rgb(239,219,30)" fg:x="99041" fg:w="18"/><text x="87.9380%" y="655.50"></text></g><g><title>__rg_alloc (18 samples, 0.02%)</title><rect x="87.6880%" y="629" width="0.0159%" height="15" fill="rgb(224,196,39)" fg:x="99041" fg:w="18"/><text x="87.9380%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (18 samples, 0.02%)</title><rect x="87.6880%" y="613" width="0.0159%" height="15" fill="rgb(205,35,43)" fg:x="99041" fg:w="18"/><text x="87.9380%" y="623.50"></text></g><g><title>sn_rust_alloc (18 samples, 0.02%)</title><rect x="87.6880%" y="597" width="0.0159%" height="15" fill="rgb(228,201,21)" fg:x="99041" fg:w="18"/><text x="87.9380%" y="607.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::lazy_init&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long)#2}, unsigned long&gt; (18 samples, 0.02%)</title><rect x="87.6880%" y="581" width="0.0159%" height="15" fill="rgb(237,118,16)" fg:x="99041" fg:w="18"/><text x="87.9380%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (18 samples, 0.02%)</title><rect x="87.6880%" y="565" width="0.0159%" height="15" fill="rgb(241,17,19)" fg:x="99041" fg:w="18"/><text x="87.9380%" y="575.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (18 samples, 0.02%)</title><rect x="88.0068%" y="357" width="0.0159%" height="15" fill="rgb(214,10,25)" fg:x="99401" fg:w="18"/><text x="88.2568%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (30 samples, 0.03%)</title><rect x="88.1838%" y="261" width="0.0266%" height="15" fill="rgb(238,37,29)" fg:x="99601" fg:w="30"/><text x="88.4338%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (30 samples, 0.03%)</title><rect x="88.1838%" y="245" width="0.0266%" height="15" fill="rgb(253,83,25)" fg:x="99601" fg:w="30"/><text x="88.4338%" y="255.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (26 samples, 0.02%)</title><rect x="88.1874%" y="229" width="0.0230%" height="15" fill="rgb(234,192,12)" fg:x="99605" fg:w="26"/><text x="88.4374%" y="239.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (25 samples, 0.02%)</title><rect x="88.1883%" y="213" width="0.0221%" height="15" fill="rgb(241,216,45)" fg:x="99606" fg:w="25"/><text x="88.4383%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (25 samples, 0.02%)</title><rect x="88.1883%" y="197" width="0.0221%" height="15" fill="rgb(242,22,33)" fg:x="99606" fg:w="25"/><text x="88.4383%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (77 samples, 0.07%)</title><rect x="88.2104%" y="261" width="0.0682%" height="15" fill="rgb(231,105,49)" fg:x="99631" fg:w="77"/><text x="88.4604%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (344 samples, 0.30%)</title><rect x="88.0271%" y="309" width="0.3046%" height="15" fill="rgb(218,204,15)" fg:x="99424" fg:w="344"/><text x="88.2771%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (276 samples, 0.24%)</title><rect x="88.0873%" y="293" width="0.2444%" height="15" fill="rgb(235,138,41)" fg:x="99492" fg:w="276"/><text x="88.3373%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (221 samples, 0.20%)</title><rect x="88.1360%" y="277" width="0.1957%" height="15" fill="rgb(246,0,9)" fg:x="99547" fg:w="221"/><text x="88.3860%" y="287.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (60 samples, 0.05%)</title><rect x="88.2786%" y="261" width="0.0531%" height="15" fill="rgb(210,74,4)" fg:x="99708" fg:w="60"/><text x="88.5286%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (60 samples, 0.05%)</title><rect x="88.2786%" y="245" width="0.0531%" height="15" fill="rgb(250,60,41)" fg:x="99708" fg:w="60"/><text x="88.5286%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (28 samples, 0.02%)</title><rect x="88.3069%" y="229" width="0.0248%" height="15" fill="rgb(220,115,12)" fg:x="99740" fg:w="28"/><text x="88.5569%" y="239.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (28 samples, 0.02%)</title><rect x="88.3069%" y="213" width="0.0248%" height="15" fill="rgb(237,100,13)" fg:x="99740" fg:w="28"/><text x="88.5569%" y="223.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (24 samples, 0.02%)</title><rect x="88.3104%" y="197" width="0.0212%" height="15" fill="rgb(213,55,26)" fg:x="99744" fg:w="24"/><text x="88.5604%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (24 samples, 0.02%)</title><rect x="88.3104%" y="181" width="0.0212%" height="15" fill="rgb(216,17,4)" fg:x="99744" fg:w="24"/><text x="88.5604%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (366 samples, 0.32%)</title><rect x="88.0227%" y="357" width="0.3240%" height="15" fill="rgb(220,153,47)" fg:x="99419" fg:w="366"/><text x="88.2727%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (366 samples, 0.32%)</title><rect x="88.0227%" y="341" width="0.3240%" height="15" fill="rgb(215,131,9)" fg:x="99419" fg:w="366"/><text x="88.2727%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (366 samples, 0.32%)</title><rect x="88.0227%" y="325" width="0.3240%" height="15" fill="rgb(233,46,42)" fg:x="99419" fg:w="366"/><text x="88.2727%" y="335.50"></text></g><g><title>core::ops::control_flow::ControlFlow&lt;R,&lt;R as core::ops::try_trait::Try&gt;::Output&gt;::into_try (17 samples, 0.02%)</title><rect x="88.3317%" y="309" width="0.0151%" height="15" fill="rgb(226,86,7)" fg:x="99768" fg:w="17"/><text x="88.5817%" y="319.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::len (856 samples, 0.76%)</title><rect x="88.5885%" y="325" width="0.7579%" height="15" fill="rgb(239,226,21)" fg:x="100058" fg:w="856"/><text x="88.8385%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (638 samples, 0.56%)</title><rect x="88.7815%" y="309" width="0.5649%" height="15" fill="rgb(244,137,22)" fg:x="100276" fg:w="638"/><text x="89.0315%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_load (638 samples, 0.56%)</title><rect x="88.7815%" y="293" width="0.5649%" height="15" fill="rgb(211,139,35)" fg:x="100276" fg:w="638"/><text x="89.0315%" y="303.50"></text></g><g><title>async_executor::steal (1,140 samples, 1.01%)</title><rect x="88.3467%" y="357" width="1.0093%" height="15" fill="rgb(214,62,50)" fg:x="99785" fg:w="1140"/><text x="88.5967%" y="367.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::len (1,058 samples, 0.94%)</title><rect x="88.4193%" y="341" width="0.9367%" height="15" fill="rgb(212,113,44)" fg:x="99867" fg:w="1058"/><text x="88.6693%" y="351.50"></text></g><g><title>concurrent_queue::full_fence (1,224 samples, 1.08%)</title><rect x="89.9316%" y="325" width="1.0837%" height="15" fill="rgb(226,150,43)" fg:x="101575" fg:w="1224"/><text x="90.1816%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (1,203 samples, 1.07%)</title><rect x="89.9502%" y="309" width="1.0651%" height="15" fill="rgb(250,71,37)" fg:x="101596" fg:w="1203"/><text x="90.2002%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1,203 samples, 1.07%)</title><rect x="89.9502%" y="293" width="1.0651%" height="15" fill="rgb(219,76,19)" fg:x="101596" fg:w="1203"/><text x="90.2002%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1,203 samples, 1.07%)</title><rect x="89.9502%" y="277" width="1.0651%" height="15" fill="rgb(250,39,11)" fg:x="101596" fg:w="1203"/><text x="90.2002%" y="287.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (1,784 samples, 1.58%)</title><rect x="89.5314%" y="341" width="1.5795%" height="15" fill="rgb(230,64,31)" fg:x="101123" fg:w="1784"/><text x="89.7814%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (107 samples, 0.09%)</title><rect x="91.0161%" y="325" width="0.0947%" height="15" fill="rgb(208,222,23)" fg:x="102800" fg:w="107"/><text x="91.2661%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_load (74 samples, 0.07%)</title><rect x="91.0454%" y="309" width="0.0655%" height="15" fill="rgb(227,125,18)" fg:x="102833" fg:w="74"/><text x="91.2954%" y="319.50"></text></g><g><title>concurrent_queue::full_fence (162 samples, 0.14%)</title><rect x="91.1454%" y="325" width="0.1434%" height="15" fill="rgb(234,210,9)" fg:x="102946" fg:w="162"/><text x="91.3954%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (162 samples, 0.14%)</title><rect x="91.1454%" y="309" width="0.1434%" height="15" fill="rgb(217,127,24)" fg:x="102946" fg:w="162"/><text x="91.3954%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (162 samples, 0.14%)</title><rect x="91.1454%" y="293" width="0.1434%" height="15" fill="rgb(239,141,48)" fg:x="102946" fg:w="162"/><text x="91.3954%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (162 samples, 0.14%)</title><rect x="91.1454%" y="277" width="0.1434%" height="15" fill="rgb(227,109,8)" fg:x="102946" fg:w="162"/><text x="91.3954%" y="287.50"></text></g><g><title>concurrent_queue::unbounded::Slot&lt;T&gt;::wait_write (14 samples, 0.01%)</title><rect x="91.2915%" y="325" width="0.0124%" height="15" fill="rgb(235,184,23)" fg:x="103111" fg:w="14"/><text x="91.5415%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (12 samples, 0.01%)</title><rect x="91.2933%" y="309" width="0.0106%" height="15" fill="rgb(227,226,48)" fg:x="103113" fg:w="12"/><text x="91.5433%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_load (12 samples, 0.01%)</title><rect x="91.2933%" y="293" width="0.0106%" height="15" fill="rgb(206,150,11)" fg:x="103113" fg:w="12"/><text x="91.5433%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (16 samples, 0.01%)</title><rect x="91.3065%" y="325" width="0.0142%" height="15" fill="rgb(254,2,33)" fg:x="103128" fg:w="16"/><text x="91.5565%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_load (16 samples, 0.01%)</title><rect x="91.3065%" y="309" width="0.0142%" height="15" fill="rgb(243,160,20)" fg:x="103128" fg:w="16"/><text x="91.5565%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (63 samples, 0.06%)</title><rect x="91.3207%" y="325" width="0.0558%" height="15" fill="rgb(218,208,30)" fg:x="103144" fg:w="63"/><text x="91.5707%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (63 samples, 0.06%)</title><rect x="91.3207%" y="309" width="0.0558%" height="15" fill="rgb(224,120,49)" fg:x="103144" fg:w="63"/><text x="91.5707%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (76 samples, 0.07%)</title><rect x="91.3765%" y="325" width="0.0673%" height="15" fill="rgb(246,12,2)" fg:x="103207" fg:w="76"/><text x="91.6265%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_or (76 samples, 0.07%)</title><rect x="91.3765%" y="309" width="0.0673%" height="15" fill="rgb(236,117,3)" fg:x="103207" fg:w="76"/><text x="91.6265%" y="319.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (2,479 samples, 2.19%)</title><rect x="89.3561%" y="357" width="2.1948%" height="15" fill="rgb(216,128,52)" fg:x="100925" fg:w="2479"/><text x="89.6061%" y="367.50">c..</text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (497 samples, 0.44%)</title><rect x="91.1109%" y="341" width="0.4400%" height="15" fill="rgb(246,145,19)" fg:x="102907" fg:w="497"/><text x="91.3609%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (121 samples, 0.11%)</title><rect x="91.4438%" y="325" width="0.1071%" height="15" fill="rgb(222,11,46)" fg:x="103283" fg:w="121"/><text x="91.6938%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_load (121 samples, 0.11%)</title><rect x="91.4438%" y="309" width="0.1071%" height="15" fill="rgb(245,82,36)" fg:x="103283" fg:w="121"/><text x="91.6938%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (123 samples, 0.11%)</title><rect x="91.5509%" y="357" width="0.1089%" height="15" fill="rgb(250,73,51)" fg:x="103404" fg:w="123"/><text x="91.8009%" y="367.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (123 samples, 0.11%)</title><rect x="91.5509%" y="341" width="0.1089%" height="15" fill="rgb(221,189,23)" fg:x="103404" fg:w="123"/><text x="91.8009%" y="351.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read_unlock (123 samples, 0.11%)</title><rect x="91.5509%" y="325" width="0.1089%" height="15" fill="rgb(210,33,7)" fg:x="103404" fg:w="123"/><text x="91.8009%" y="335.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_unlock (123 samples, 0.11%)</title><rect x="91.5509%" y="309" width="0.1089%" height="15" fill="rgb(210,107,22)" fg:x="103404" fg:w="123"/><text x="91.8009%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (121 samples, 0.11%)</title><rect x="91.5527%" y="293" width="0.1071%" height="15" fill="rgb(222,116,37)" fg:x="103406" fg:w="121"/><text x="91.8027%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_sub (121 samples, 0.11%)</title><rect x="91.5527%" y="277" width="0.1071%" height="15" fill="rgb(254,17,48)" fg:x="103406" fg:w="121"/><text x="91.8027%" y="287.50"></text></g><g><title>fastrand::usize (35 samples, 0.03%)</title><rect x="91.6598%" y="357" width="0.0310%" height="15" fill="rgb(224,36,32)" fg:x="103527" fg:w="35"/><text x="91.9098%" y="367.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (30 samples, 0.03%)</title><rect x="91.6642%" y="341" width="0.0266%" height="15" fill="rgb(232,90,46)" fg:x="103532" fg:w="30"/><text x="91.9142%" y="351.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (30 samples, 0.03%)</title><rect x="91.6642%" y="325" width="0.0266%" height="15" fill="rgb(241,66,40)" fg:x="103532" fg:w="30"/><text x="91.9142%" y="335.50"></text></g><g><title>fastrand::usize::{{closure}} (16 samples, 0.01%)</title><rect x="91.6766%" y="309" width="0.0142%" height="15" fill="rgb(249,184,29)" fg:x="103546" fg:w="16"/><text x="91.9266%" y="319.50"></text></g><g><title>fastrand::Rng::usize (16 samples, 0.01%)</title><rect x="91.6766%" y="293" width="0.0142%" height="15" fill="rgb(231,181,1)" fg:x="103546" fg:w="16"/><text x="91.9266%" y="303.50"></text></g><g><title>fastrand::Rng::gen_mod_u64 (15 samples, 0.01%)</title><rect x="91.6775%" y="277" width="0.0133%" height="15" fill="rgb(224,94,2)" fg:x="103547" fg:w="15"/><text x="91.9275%" y="287.50"></text></g><g><title>std::sync::poison::Flag::get (18 samples, 0.02%)</title><rect x="91.6908%" y="309" width="0.0159%" height="15" fill="rgb(229,170,15)" fg:x="103562" fg:w="18"/><text x="91.9408%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (18 samples, 0.02%)</title><rect x="91.6908%" y="293" width="0.0159%" height="15" fill="rgb(240,127,35)" fg:x="103562" fg:w="18"/><text x="91.9408%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_load (17 samples, 0.02%)</title><rect x="91.6917%" y="277" width="0.0151%" height="15" fill="rgb(248,196,34)" fg:x="103563" fg:w="17"/><text x="91.9417%" y="287.50"></text></g><g><title>std::sync::rwlock::RwLockReadGuard&lt;T&gt;::new (21 samples, 0.02%)</title><rect x="91.6908%" y="341" width="0.0186%" height="15" fill="rgb(236,137,7)" fg:x="103562" fg:w="21"/><text x="91.9408%" y="351.50"></text></g><g><title>std::sync::poison::Flag::borrow (21 samples, 0.02%)</title><rect x="91.6908%" y="325" width="0.0186%" height="15" fill="rgb(235,127,16)" fg:x="103562" fg:w="21"/><text x="91.9408%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (193 samples, 0.17%)</title><rect x="91.7120%" y="309" width="0.1709%" height="15" fill="rgb(250,192,54)" fg:x="103586" fg:w="193"/><text x="91.9620%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (193 samples, 0.17%)</title><rect x="91.7120%" y="293" width="0.1709%" height="15" fill="rgb(218,98,20)" fg:x="103586" fg:w="193"/><text x="91.9620%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (35 samples, 0.03%)</title><rect x="91.8829%" y="309" width="0.0310%" height="15" fill="rgb(230,176,47)" fg:x="103779" fg:w="35"/><text x="92.1329%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_load (35 samples, 0.03%)</title><rect x="91.8829%" y="293" width="0.0310%" height="15" fill="rgb(244,2,33)" fg:x="103779" fg:w="35"/><text x="92.1329%" y="303.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (4,559 samples, 4.04%)</title><rect x="87.8864%" y="373" width="4.0364%" height="15" fill="rgb(231,100,17)" fg:x="99265" fg:w="4559"/><text x="88.1364%" y="383.50">asyn..</text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (262 samples, 0.23%)</title><rect x="91.6908%" y="357" width="0.2320%" height="15" fill="rgb(245,23,12)" fg:x="103562" fg:w="262"/><text x="91.9408%" y="367.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read (241 samples, 0.21%)</title><rect x="91.7094%" y="341" width="0.2134%" height="15" fill="rgb(249,55,22)" fg:x="103583" fg:w="241"/><text x="91.9594%" y="351.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (241 samples, 0.21%)</title><rect x="91.7094%" y="325" width="0.2134%" height="15" fill="rgb(207,134,9)" fg:x="103583" fg:w="241"/><text x="91.9594%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (32 samples, 0.03%)</title><rect x="91.9272%" y="293" width="0.0283%" height="15" fill="rgb(218,134,0)" fg:x="103829" fg:w="32"/><text x="92.1772%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_swap (32 samples, 0.03%)</title><rect x="91.9272%" y="277" width="0.0283%" height="15" fill="rgb(213,212,33)" fg:x="103829" fg:w="32"/><text x="92.1772%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (34 samples, 0.03%)</title><rect x="91.9263%" y="357" width="0.0301%" height="15" fill="rgb(252,106,18)" fg:x="103828" fg:w="34"/><text x="92.1763%" y="367.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 0.03%)</title><rect x="91.9263%" y="341" width="0.0301%" height="15" fill="rgb(208,126,42)" fg:x="103828" fg:w="34"/><text x="92.1763%" y="351.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (33 samples, 0.03%)</title><rect x="91.9272%" y="325" width="0.0292%" height="15" fill="rgb(246,175,29)" fg:x="103829" fg:w="33"/><text x="92.1772%" y="335.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (33 samples, 0.03%)</title><rect x="91.9272%" y="309" width="0.0292%" height="15" fill="rgb(215,13,50)" fg:x="103829" fg:w="33"/><text x="92.1772%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (53 samples, 0.05%)</title><rect x="91.9564%" y="357" width="0.0469%" height="15" fill="rgb(216,172,15)" fg:x="103862" fg:w="53"/><text x="92.2064%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (53 samples, 0.05%)</title><rect x="91.9564%" y="341" width="0.0469%" height="15" fill="rgb(212,103,13)" fg:x="103862" fg:w="53"/><text x="92.2064%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (14 samples, 0.01%)</title><rect x="92.0193%" y="277" width="0.0124%" height="15" fill="rgb(231,171,36)" fg:x="103933" fg:w="14"/><text x="92.2693%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (14 samples, 0.01%)</title><rect x="92.0193%" y="261" width="0.0124%" height="15" fill="rgb(250,123,20)" fg:x="103933" fg:w="14"/><text x="92.2693%" y="271.50"></text></g><g><title>async_io::reactor::Reactor::notify (64 samples, 0.06%)</title><rect x="92.0131%" y="309" width="0.0567%" height="15" fill="rgb(212,53,50)" fg:x="103926" fg:w="64"/><text x="92.2631%" y="319.50"></text></g><g><title>polling::Poller::notify (58 samples, 0.05%)</title><rect x="92.0184%" y="293" width="0.0514%" height="15" fill="rgb(243,54,12)" fg:x="103932" fg:w="58"/><text x="92.2684%" y="303.50"></text></g><g><title>polling::epoll::Poller::notify (43 samples, 0.04%)</title><rect x="92.0317%" y="277" width="0.0381%" height="15" fill="rgb(234,101,34)" fg:x="103947" fg:w="43"/><text x="92.2817%" y="287.50"></text></g><g><title>__libc_write (38 samples, 0.03%)</title><rect x="92.0361%" y="261" width="0.0336%" height="15" fill="rgb(254,67,22)" fg:x="103952" fg:w="38"/><text x="92.2861%" y="271.50"></text></g><g><title>__pthread_enable_asynccancel (19 samples, 0.02%)</title><rect x="92.0529%" y="245" width="0.0168%" height="15" fill="rgb(250,35,47)" fg:x="103971" fg:w="19"/><text x="92.3029%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (13 samples, 0.01%)</title><rect x="92.0697%" y="309" width="0.0115%" height="15" fill="rgb(226,126,38)" fg:x="103990" fg:w="13"/><text x="92.3197%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_load (12 samples, 0.01%)</title><rect x="92.0706%" y="293" width="0.0106%" height="15" fill="rgb(216,138,53)" fg:x="103991" fg:w="12"/><text x="92.3206%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (51 samples, 0.05%)</title><rect x="92.0981%" y="277" width="0.0452%" height="15" fill="rgb(246,199,43)" fg:x="104022" fg:w="51"/><text x="92.3481%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_swap (51 samples, 0.05%)</title><rect x="92.0981%" y="261" width="0.0452%" height="15" fill="rgb(232,125,11)" fg:x="104022" fg:w="51"/><text x="92.3481%" y="271.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (18 samples, 0.02%)</title><rect x="92.1432%" y="277" width="0.0159%" height="15" fill="rgb(218,219,45)" fg:x="104073" fg:w="18"/><text x="92.3932%" y="287.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (18 samples, 0.02%)</title><rect x="92.1432%" y="261" width="0.0159%" height="15" fill="rgb(216,102,54)" fg:x="104073" fg:w="18"/><text x="92.3932%" y="271.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::notify_one (18 samples, 0.02%)</title><rect x="92.1432%" y="245" width="0.0159%" height="15" fill="rgb(250,228,7)" fg:x="104073" fg:w="18"/><text x="92.3932%" y="255.50"></text></g><g><title>std::sys::unix::futex::futex_wake (13 samples, 0.01%)</title><rect x="92.1476%" y="229" width="0.0115%" height="15" fill="rgb(226,125,25)" fg:x="104078" fg:w="13"/><text x="92.3976%" y="239.50"></text></g><g><title>syscall (13 samples, 0.01%)</title><rect x="92.1476%" y="213" width="0.0115%" height="15" fill="rgb(224,165,27)" fg:x="104078" fg:w="13"/><text x="92.3976%" y="223.50"></text></g><g><title>parking::Unparker::unpark (93 samples, 0.08%)</title><rect x="92.0812%" y="309" width="0.0823%" height="15" fill="rgb(233,86,3)" fg:x="104003" fg:w="93"/><text x="92.3312%" y="319.50"></text></g><g><title>parking::Inner::unpark (83 samples, 0.07%)</title><rect x="92.0901%" y="293" width="0.0735%" height="15" fill="rgb(228,116,20)" fg:x="104013" fg:w="83"/><text x="92.3401%" y="303.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (189 samples, 0.17%)</title><rect x="92.0033%" y="325" width="0.1673%" height="15" fill="rgb(209,192,17)" fg:x="103915" fg:w="189"/><text x="92.2533%" y="335.50"></text></g><g><title>core::task::wake::Waker::wake (252 samples, 0.22%)</title><rect x="92.0033%" y="357" width="0.2231%" height="15" fill="rgb(224,88,34)" fg:x="103915" fg:w="252"/><text x="92.2533%" y="367.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (252 samples, 0.22%)</title><rect x="92.0033%" y="341" width="0.2231%" height="15" fill="rgb(233,38,6)" fg:x="103915" fg:w="252"/><text x="92.2533%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (63 samples, 0.06%)</title><rect x="92.1707%" y="325" width="0.0558%" height="15" fill="rgb(212,59,30)" fg:x="104104" fg:w="63"/><text x="92.4207%" y="335.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (63 samples, 0.06%)</title><rect x="92.1707%" y="309" width="0.0558%" height="15" fill="rgb(213,80,3)" fg:x="104104" fg:w="63"/><text x="92.4207%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (60 samples, 0.05%)</title><rect x="92.1733%" y="293" width="0.0531%" height="15" fill="rgb(251,178,7)" fg:x="104107" fg:w="60"/><text x="92.4233%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_sub (60 samples, 0.05%)</title><rect x="92.1733%" y="277" width="0.0531%" height="15" fill="rgb(213,154,26)" fg:x="104107" fg:w="60"/><text x="92.4233%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (17 samples, 0.02%)</title><rect x="92.2291%" y="309" width="0.0151%" height="15" fill="rgb(238,165,49)" fg:x="104170" fg:w="17"/><text x="92.4791%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (17 samples, 0.02%)</title><rect x="92.2291%" y="293" width="0.0151%" height="15" fill="rgb(248,91,46)" fg:x="104170" fg:w="17"/><text x="92.4791%" y="303.50"></text></g><g><title>async_executor::State::notify (370 samples, 0.33%)</title><rect x="91.9228%" y="373" width="0.3276%" height="15" fill="rgb(244,21,52)" fg:x="103824" fg:w="370"/><text x="92.1728%" y="383.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (27 samples, 0.02%)</title><rect x="92.2264%" y="357" width="0.0239%" height="15" fill="rgb(247,122,20)" fg:x="104167" fg:w="27"/><text x="92.4764%" y="367.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (24 samples, 0.02%)</title><rect x="92.2291%" y="341" width="0.0212%" height="15" fill="rgb(218,27,9)" fg:x="104170" fg:w="24"/><text x="92.4791%" y="351.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (24 samples, 0.02%)</title><rect x="92.2291%" y="325" width="0.0212%" height="15" fill="rgb(246,7,6)" fg:x="104170" fg:w="24"/><text x="92.4791%" y="335.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (74 samples, 0.07%)</title><rect x="92.2689%" y="341" width="0.0655%" height="15" fill="rgb(227,135,54)" fg:x="104215" fg:w="74"/><text x="92.5189%" y="351.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (72 samples, 0.06%)</title><rect x="92.2707%" y="325" width="0.0637%" height="15" fill="rgb(247,14,11)" fg:x="104217" fg:w="72"/><text x="92.5207%" y="335.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (70 samples, 0.06%)</title><rect x="92.2725%" y="309" width="0.0620%" height="15" fill="rgb(206,149,34)" fg:x="104219" fg:w="70"/><text x="92.5225%" y="319.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (70 samples, 0.06%)</title><rect x="92.2725%" y="293" width="0.0620%" height="15" fill="rgb(227,228,4)" fg:x="104219" fg:w="70"/><text x="92.5225%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (70 samples, 0.06%)</title><rect x="92.2725%" y="277" width="0.0620%" height="15" fill="rgb(238,218,28)" fg:x="104219" fg:w="70"/><text x="92.5225%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_add (70 samples, 0.06%)</title><rect x="92.2725%" y="261" width="0.0620%" height="15" fill="rgb(252,86,40)" fg:x="104219" fg:w="70"/><text x="92.5225%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (16 samples, 0.01%)</title><rect x="92.3345%" y="341" width="0.0142%" height="15" fill="rgb(251,225,11)" fg:x="104289" fg:w="16"/><text x="92.5845%" y="351.50"></text></g><g><title>async_executor::Sleepers::insert (114 samples, 0.10%)</title><rect x="92.2645%" y="357" width="0.1009%" height="15" fill="rgb(206,46,49)" fg:x="104210" fg:w="114"/><text x="92.5145%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (19 samples, 0.02%)</title><rect x="92.3486%" y="341" width="0.0168%" height="15" fill="rgb(245,128,24)" fg:x="104305" fg:w="19"/><text x="92.5986%" y="351.50"></text></g><g><title>core::ptr::write (13 samples, 0.01%)</title><rect x="92.3539%" y="325" width="0.0115%" height="15" fill="rgb(219,177,34)" fg:x="104311" fg:w="13"/><text x="92.6039%" y="335.50"></text></g><g><title>async_executor::Sleepers::is_notified (13 samples, 0.01%)</title><rect x="92.3654%" y="357" width="0.0115%" height="15" fill="rgb(218,60,48)" fg:x="104324" fg:w="13"/><text x="92.6154%" y="367.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.02%)</title><rect x="92.4416%" y="341" width="0.0195%" height="15" fill="rgb(221,11,5)" fg:x="104410" fg:w="22"/><text x="92.6916%" y="351.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (92 samples, 0.08%)</title><rect x="92.4611%" y="341" width="0.0815%" height="15" fill="rgb(220,148,13)" fg:x="104432" fg:w="92"/><text x="92.7111%" y="351.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (91 samples, 0.08%)</title><rect x="92.4620%" y="325" width="0.0806%" height="15" fill="rgb(210,16,3)" fg:x="104433" fg:w="91"/><text x="92.7120%" y="335.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (90 samples, 0.08%)</title><rect x="92.4628%" y="309" width="0.0797%" height="15" fill="rgb(236,80,2)" fg:x="104434" fg:w="90"/><text x="92.7128%" y="319.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (90 samples, 0.08%)</title><rect x="92.4628%" y="293" width="0.0797%" height="15" fill="rgb(239,129,19)" fg:x="104434" fg:w="90"/><text x="92.7128%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (90 samples, 0.08%)</title><rect x="92.4628%" y="277" width="0.0797%" height="15" fill="rgb(220,106,35)" fg:x="104434" fg:w="90"/><text x="92.7128%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_add (90 samples, 0.08%)</title><rect x="92.4628%" y="261" width="0.0797%" height="15" fill="rgb(252,139,45)" fg:x="104434" fg:w="90"/><text x="92.7128%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (20 samples, 0.02%)</title><rect x="92.5425%" y="341" width="0.0177%" height="15" fill="rgb(229,8,36)" fg:x="104524" fg:w="20"/><text x="92.7925%" y="351.50"></text></g><g><title>core::ptr::write (16 samples, 0.01%)</title><rect x="92.5461%" y="325" width="0.0142%" height="15" fill="rgb(230,126,33)" fg:x="104528" fg:w="16"/><text x="92.7961%" y="335.50"></text></g><g><title>async_executor::Sleepers::update (220 samples, 0.19%)</title><rect x="92.3770%" y="357" width="0.1948%" height="15" fill="rgb(239,140,21)" fg:x="104337" fg:w="220"/><text x="92.6270%" y="367.50"></text></g><g><title>core::task::wake::Waker::will_wake (13 samples, 0.01%)</title><rect x="92.5602%" y="341" width="0.0115%" height="15" fill="rgb(254,104,9)" fg:x="104544" fg:w="13"/><text x="92.8102%" y="351.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (13 samples, 0.01%)</title><rect x="92.5602%" y="325" width="0.0115%" height="15" fill="rgb(239,52,14)" fg:x="104544" fg:w="13"/><text x="92.8102%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (120 samples, 0.11%)</title><rect x="92.5717%" y="357" width="0.1062%" height="15" fill="rgb(208,227,44)" fg:x="104557" fg:w="120"/><text x="92.8217%" y="367.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (120 samples, 0.11%)</title><rect x="92.5717%" y="341" width="0.1062%" height="15" fill="rgb(246,18,19)" fg:x="104557" fg:w="120"/><text x="92.8217%" y="351.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (109 samples, 0.10%)</title><rect x="92.5815%" y="325" width="0.0965%" height="15" fill="rgb(235,228,25)" fg:x="104568" fg:w="109"/><text x="92.8315%" y="335.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (109 samples, 0.10%)</title><rect x="92.5815%" y="309" width="0.0965%" height="15" fill="rgb(240,156,20)" fg:x="104568" fg:w="109"/><text x="92.8315%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (109 samples, 0.10%)</title><rect x="92.5815%" y="293" width="0.0965%" height="15" fill="rgb(224,8,20)" fg:x="104568" fg:w="109"/><text x="92.8315%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_swap (109 samples, 0.10%)</title><rect x="92.5815%" y="277" width="0.0965%" height="15" fill="rgb(214,12,52)" fg:x="104568" fg:w="109"/><text x="92.8315%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (172 samples, 0.15%)</title><rect x="92.6780%" y="357" width="0.1523%" height="15" fill="rgb(211,220,47)" fg:x="104677" fg:w="172"/><text x="92.9280%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_swap (172 samples, 0.15%)</title><rect x="92.6780%" y="341" width="0.1523%" height="15" fill="rgb(250,173,5)" fg:x="104677" fg:w="172"/><text x="92.9280%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (96 samples, 0.08%)</title><rect x="92.8303%" y="357" width="0.0850%" height="15" fill="rgb(250,125,52)" fg:x="104849" fg:w="96"/><text x="93.0803%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_store (96 samples, 0.08%)</title><rect x="92.8303%" y="341" width="0.0850%" height="15" fill="rgb(209,133,18)" fg:x="104849" fg:w="96"/><text x="93.0803%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (116 samples, 0.10%)</title><rect x="92.9277%" y="309" width="0.1027%" height="15" fill="rgb(216,173,22)" fg:x="104959" fg:w="116"/><text x="93.1777%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (116 samples, 0.10%)</title><rect x="92.9277%" y="293" width="0.1027%" height="15" fill="rgb(205,3,22)" fg:x="104959" fg:w="116"/><text x="93.1777%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (18 samples, 0.02%)</title><rect x="93.0304%" y="293" width="0.0159%" height="15" fill="rgb(248,22,20)" fg:x="105075" fg:w="18"/><text x="93.2804%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (18 samples, 0.02%)</title><rect x="93.0304%" y="277" width="0.0159%" height="15" fill="rgb(233,6,29)" fg:x="105075" fg:w="18"/><text x="93.2804%" y="287.50"></text></g><g><title>core::hint::spin_loop (17 samples, 0.02%)</title><rect x="93.0525%" y="277" width="0.0151%" height="15" fill="rgb(240,22,54)" fg:x="105100" fg:w="17"/><text x="93.3025%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (17 samples, 0.02%)</title><rect x="93.0525%" y="261" width="0.0151%" height="15" fill="rgb(231,133,32)" fg:x="105100" fg:w="17"/><text x="93.3025%" y="271.50"></text></g><g><title>async_executor::Ticker::sleep (938 samples, 0.83%)</title><rect x="92.2503%" y="373" width="0.8305%" height="15" fill="rgb(248,193,4)" fg:x="104194" fg:w="938"/><text x="92.5003%" y="383.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (187 samples, 0.17%)</title><rect x="92.9153%" y="357" width="0.1656%" height="15" fill="rgb(211,178,46)" fg:x="104945" fg:w="187"/><text x="93.1653%" y="367.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (176 samples, 0.16%)</title><rect x="92.9250%" y="341" width="0.1558%" height="15" fill="rgb(224,5,42)" fg:x="104956" fg:w="176"/><text x="93.1750%" y="351.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (176 samples, 0.16%)</title><rect x="92.9250%" y="325" width="0.1558%" height="15" fill="rgb(239,176,25)" fg:x="104956" fg:w="176"/><text x="93.1750%" y="335.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (57 samples, 0.05%)</title><rect x="93.0304%" y="309" width="0.0505%" height="15" fill="rgb(245,187,50)" fg:x="105075" fg:w="57"/><text x="93.2804%" y="319.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (32 samples, 0.03%)</title><rect x="93.0525%" y="293" width="0.0283%" height="15" fill="rgb(248,24,15)" fg:x="105100" fg:w="32"/><text x="93.3025%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (15 samples, 0.01%)</title><rect x="93.0675%" y="277" width="0.0133%" height="15" fill="rgb(205,166,13)" fg:x="105117" fg:w="15"/><text x="93.3175%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_load (15 samples, 0.01%)</title><rect x="93.0675%" y="261" width="0.0133%" height="15" fill="rgb(208,114,23)" fg:x="105117" fg:w="15"/><text x="93.3175%" y="271.50"></text></g><g><title>async_executor::Sleepers::remove (64 samples, 0.06%)</title><rect x="93.0861%" y="357" width="0.0567%" height="15" fill="rgb(239,127,18)" fg:x="105138" fg:w="64"/><text x="93.3361%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,core::task::wake::Waker)&gt; (29 samples, 0.03%)</title><rect x="93.1171%" y="341" width="0.0257%" height="15" fill="rgb(219,154,28)" fg:x="105173" fg:w="29"/><text x="93.3671%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (29 samples, 0.03%)</title><rect x="93.1171%" y="325" width="0.0257%" height="15" fill="rgb(225,157,23)" fg:x="105173" fg:w="29"/><text x="93.3671%" y="335.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (29 samples, 0.03%)</title><rect x="93.1171%" y="309" width="0.0257%" height="15" fill="rgb(219,8,6)" fg:x="105173" fg:w="29"/><text x="93.3671%" y="319.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::drop_waker (29 samples, 0.03%)</title><rect x="93.1171%" y="293" width="0.0257%" height="15" fill="rgb(212,47,6)" fg:x="105173" fg:w="29"/><text x="93.3671%" y="303.50"></text></g><g><title>core::mem::drop (28 samples, 0.02%)</title><rect x="93.1180%" y="277" width="0.0248%" height="15" fill="rgb(224,190,4)" fg:x="105174" fg:w="28"/><text x="93.3680%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (28 samples, 0.02%)</title><rect x="93.1180%" y="261" width="0.0248%" height="15" fill="rgb(239,183,29)" fg:x="105174" fg:w="28"/><text x="93.3680%" y="271.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.02%)</title><rect x="93.1180%" y="245" width="0.0248%" height="15" fill="rgb(213,57,7)" fg:x="105174" fg:w="28"/><text x="93.3680%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (28 samples, 0.02%)</title><rect x="93.1180%" y="229" width="0.0248%" height="15" fill="rgb(216,148,1)" fg:x="105174" fg:w="28"/><text x="93.3680%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_sub (28 samples, 0.02%)</title><rect x="93.1180%" y="213" width="0.0248%" height="15" fill="rgb(236,182,29)" fg:x="105174" fg:w="28"/><text x="93.3680%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (28 samples, 0.02%)</title><rect x="93.1446%" y="293" width="0.0248%" height="15" fill="rgb(244,120,48)" fg:x="105204" fg:w="28"/><text x="93.3946%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_swap (28 samples, 0.02%)</title><rect x="93.1446%" y="277" width="0.0248%" height="15" fill="rgb(206,71,34)" fg:x="105204" fg:w="28"/><text x="93.3946%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (33 samples, 0.03%)</title><rect x="93.1428%" y="357" width="0.0292%" height="15" fill="rgb(242,32,6)" fg:x="105202" fg:w="33"/><text x="93.3928%" y="367.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.03%)</title><rect x="93.1428%" y="341" width="0.0292%" height="15" fill="rgb(241,35,3)" fg:x="105202" fg:w="33"/><text x="93.3928%" y="351.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (32 samples, 0.03%)</title><rect x="93.1437%" y="325" width="0.0283%" height="15" fill="rgb(222,62,19)" fg:x="105203" fg:w="32"/><text x="93.3937%" y="335.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (32 samples, 0.03%)</title><rect x="93.1437%" y="309" width="0.0283%" height="15" fill="rgb(223,110,41)" fg:x="105203" fg:w="32"/><text x="93.3937%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (48 samples, 0.04%)</title><rect x="93.1720%" y="357" width="0.0425%" height="15" fill="rgb(208,224,4)" fg:x="105235" fg:w="48"/><text x="93.4220%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_swap (48 samples, 0.04%)</title><rect x="93.1720%" y="341" width="0.0425%" height="15" fill="rgb(241,137,19)" fg:x="105235" fg:w="48"/><text x="93.4220%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (68 samples, 0.06%)</title><rect x="93.2145%" y="357" width="0.0602%" height="15" fill="rgb(244,24,17)" fg:x="105283" fg:w="68"/><text x="93.4645%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_swap (68 samples, 0.06%)</title><rect x="93.2145%" y="341" width="0.0602%" height="15" fill="rgb(245,178,49)" fg:x="105283" fg:w="68"/><text x="93.4645%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (47 samples, 0.04%)</title><rect x="93.2827%" y="309" width="0.0416%" height="15" fill="rgb(219,160,38)" fg:x="105360" fg:w="47"/><text x="93.5327%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (47 samples, 0.04%)</title><rect x="93.2827%" y="293" width="0.0416%" height="15" fill="rgb(228,137,14)" fg:x="105360" fg:w="47"/><text x="93.5327%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (12 samples, 0.01%)</title><rect x="93.3252%" y="293" width="0.0106%" height="15" fill="rgb(237,134,11)" fg:x="105408" fg:w="12"/><text x="93.5752%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (12 samples, 0.01%)</title><rect x="93.3252%" y="277" width="0.0106%" height="15" fill="rgb(211,126,44)" fg:x="105408" fg:w="12"/><text x="93.5752%" y="287.50"></text></g><g><title>async_executor::Ticker::wake (310 samples, 0.27%)</title><rect x="93.0808%" y="373" width="0.2745%" height="15" fill="rgb(226,171,33)" fg:x="105132" fg:w="310"/><text x="93.3308%" y="383.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (91 samples, 0.08%)</title><rect x="93.2747%" y="357" width="0.0806%" height="15" fill="rgb(253,99,13)" fg:x="105351" fg:w="91"/><text x="93.5247%" y="367.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (84 samples, 0.07%)</title><rect x="93.2809%" y="341" width="0.0744%" height="15" fill="rgb(244,48,7)" fg:x="105358" fg:w="84"/><text x="93.5309%" y="351.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (84 samples, 0.07%)</title><rect x="93.2809%" y="325" width="0.0744%" height="15" fill="rgb(244,217,54)" fg:x="105358" fg:w="84"/><text x="93.5309%" y="335.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (35 samples, 0.03%)</title><rect x="93.3243%" y="309" width="0.0310%" height="15" fill="rgb(224,15,18)" fg:x="105407" fg:w="35"/><text x="93.5743%" y="319.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (22 samples, 0.02%)</title><rect x="93.3358%" y="293" width="0.0195%" height="15" fill="rgb(244,99,12)" fg:x="105420" fg:w="22"/><text x="93.5858%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (13 samples, 0.01%)</title><rect x="93.3438%" y="277" width="0.0115%" height="15" fill="rgb(233,226,8)" fg:x="105429" fg:w="13"/><text x="93.5938%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_load (13 samples, 0.01%)</title><rect x="93.3438%" y="261" width="0.0115%" height="15" fill="rgb(229,211,3)" fg:x="105429" fg:w="13"/><text x="93.5938%" y="271.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,217 samples, 5.50%)</title><rect x="87.8580%" y="437" width="5.5044%" height="15" fill="rgb(216,140,21)" fg:x="99233" fg:w="6217"/><text x="88.1080%" y="447.50">&lt;core::..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (6,217 samples, 5.50%)</title><rect x="87.8580%" y="421" width="5.5044%" height="15" fill="rgb(234,122,30)" fg:x="99233" fg:w="6217"/><text x="88.1080%" y="431.50">async_e..</text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (6,197 samples, 5.49%)</title><rect x="87.8757%" y="405" width="5.4866%" height="15" fill="rgb(236,25,46)" fg:x="99253" fg:w="6197"/><text x="88.1257%" y="415.50">&lt;future..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (6,191 samples, 5.48%)</title><rect x="87.8810%" y="389" width="5.4813%" height="15" fill="rgb(217,52,54)" fg:x="99259" fg:w="6191"/><text x="88.1310%" y="399.50">async_e..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,278 samples, 5.56%)</title><rect x="87.8288%" y="469" width="5.5584%" height="15" fill="rgb(222,29,26)" fg:x="99200" fg:w="6278"/><text x="88.0788%" y="479.50">&lt;core::..</text></g><g><title>async_executor::Runner::runnable::{{closure}} (6,277 samples, 5.56%)</title><rect x="87.8297%" y="453" width="5.5575%" height="15" fill="rgb(216,177,29)" fg:x="99201" fg:w="6277"/><text x="88.0797%" y="463.50">async_e..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (28 samples, 0.02%)</title><rect x="93.3624%" y="437" width="0.0248%" height="15" fill="rgb(247,136,51)" fg:x="105450" fg:w="28"/><text x="93.6124%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_add (28 samples, 0.02%)</title><rect x="93.3624%" y="421" width="0.0248%" height="15" fill="rgb(231,47,47)" fg:x="105450" fg:w="28"/><text x="93.6124%" y="431.50"></text></g><g><title>[libc-2.31.so] (31 samples, 0.03%)</title><rect x="93.5111%" y="325" width="0.0274%" height="15" fill="rgb(211,192,36)" fg:x="105618" fg:w="31"/><text x="93.7611%" y="335.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12 samples, 0.01%)</title><rect x="93.8015%" y="261" width="0.0106%" height="15" fill="rgb(229,156,32)" fg:x="105946" fg:w="12"/><text x="94.0515%" y="271.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (155 samples, 0.14%)</title><rect x="93.8121%" y="261" width="0.1372%" height="15" fill="rgb(248,213,20)" fg:x="105958" fg:w="155"/><text x="94.0621%" y="271.50"></text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (155 samples, 0.14%)</title><rect x="93.8121%" y="245" width="0.1372%" height="15" fill="rgb(217,64,7)" fg:x="105958" fg:w="155"/><text x="94.0621%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (15 samples, 0.01%)</title><rect x="93.9361%" y="229" width="0.0133%" height="15" fill="rgb(232,142,8)" fg:x="106098" fg:w="15"/><text x="94.1861%" y="239.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (93 samples, 0.08%)</title><rect x="93.9556%" y="261" width="0.0823%" height="15" fill="rgb(224,92,44)" fg:x="106120" fg:w="93"/><text x="94.2056%" y="271.50"></text></g><g><title>[libc-2.31.so] (85 samples, 0.08%)</title><rect x="94.0406%" y="245" width="0.0753%" height="15" fill="rgb(214,169,17)" fg:x="106216" fg:w="85"/><text x="94.2906%" y="255.50"></text></g><g><title>[libc-2.31.so] (180 samples, 0.16%)</title><rect x="94.1238%" y="229" width="0.1594%" height="15" fill="rgb(210,59,37)" fg:x="106310" fg:w="180"/><text x="94.3738%" y="239.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (28 samples, 0.02%)</title><rect x="94.3646%" y="117" width="0.0248%" height="15" fill="rgb(214,116,48)" fg:x="106582" fg:w="28"/><text x="94.6146%" y="127.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (313 samples, 0.28%)</title><rect x="94.1158%" y="245" width="0.2771%" height="15" fill="rgb(244,191,6)" fg:x="106301" fg:w="313"/><text x="94.3658%" y="255.50"></text></g><g><title>alloc::alloc::exchange_malloc (124 samples, 0.11%)</title><rect x="94.2832%" y="229" width="0.1098%" height="15" fill="rgb(241,50,52)" fg:x="106490" fg:w="124"/><text x="94.5332%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (124 samples, 0.11%)</title><rect x="94.2832%" y="213" width="0.1098%" height="15" fill="rgb(236,75,39)" fg:x="106490" fg:w="124"/><text x="94.5332%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (124 samples, 0.11%)</title><rect x="94.2832%" y="197" width="0.1098%" height="15" fill="rgb(236,99,0)" fg:x="106490" fg:w="124"/><text x="94.5332%" y="207.50"></text></g><g><title>alloc::alloc::alloc (124 samples, 0.11%)</title><rect x="94.2832%" y="181" width="0.1098%" height="15" fill="rgb(207,202,15)" fg:x="106490" fg:w="124"/><text x="94.5332%" y="191.50"></text></g><g><title>__rg_alloc (124 samples, 0.11%)</title><rect x="94.2832%" y="165" width="0.1098%" height="15" fill="rgb(233,207,14)" fg:x="106490" fg:w="124"/><text x="94.5332%" y="175.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (124 samples, 0.11%)</title><rect x="94.2832%" y="149" width="0.1098%" height="15" fill="rgb(226,27,51)" fg:x="106490" fg:w="124"/><text x="94.5332%" y="159.50"></text></g><g><title>sn_rust_alloc (112 samples, 0.10%)</title><rect x="94.2938%" y="133" width="0.0992%" height="15" fill="rgb(206,104,42)" fg:x="106502" fg:w="112"/><text x="94.5438%" y="143.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::Sink&gt;::on_event (416 samples, 0.37%)</title><rect x="94.0379%" y="261" width="0.3683%" height="15" fill="rgb(212,225,4)" fg:x="106213" fg:w="416"/><text x="94.2879%" y="271.50"></text></g><g><title>core::future::from_generator (15 samples, 0.01%)</title><rect x="94.3929%" y="245" width="0.0133%" height="15" fill="rgb(233,96,42)" fg:x="106614" fg:w="15"/><text x="94.6429%" y="255.50"></text></g><g><title>&lt;tremor_pipeline::EventId as core::clone::Clone&gt;::clone (36 samples, 0.03%)</title><rect x="94.4213%" y="245" width="0.0319%" height="15" fill="rgb(229,21,32)" fg:x="106646" fg:w="36"/><text x="94.6713%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (15 samples, 0.01%)</title><rect x="94.4399%" y="229" width="0.0133%" height="15" fill="rgb(226,216,24)" fg:x="106667" fg:w="15"/><text x="94.6899%" y="239.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::ContraflowData as core::convert::From&lt;&amp;tremor_pipeline::event::Event&gt;&gt;::from (293 samples, 0.26%)</title><rect x="94.4062%" y="261" width="0.2594%" height="15" fill="rgb(221,163,17)" fg:x="106629" fg:w="293"/><text x="94.6562%" y="271.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (240 samples, 0.21%)</title><rect x="94.4532%" y="245" width="0.2125%" height="15" fill="rgb(216,216,42)" fg:x="106682" fg:w="240"/><text x="94.7032%" y="255.50"></text></g><g><title>[libc-2.31.so] (853 samples, 0.76%)</title><rect x="94.6656%" y="261" width="0.7552%" height="15" fill="rgb(240,118,7)" fg:x="106922" fg:w="853"/><text x="94.9156%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (58 samples, 0.05%)</title><rect x="95.4209%" y="261" width="0.0514%" height="15" fill="rgb(221,67,37)" fg:x="107775" fg:w="58"/><text x="95.6709%" y="271.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (58 samples, 0.05%)</title><rect x="95.4209%" y="245" width="0.0514%" height="15" fill="rgb(241,32,44)" fg:x="107775" fg:w="58"/><text x="95.6709%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (55 samples, 0.05%)</title><rect x="95.4235%" y="229" width="0.0487%" height="15" fill="rgb(235,204,43)" fg:x="107778" fg:w="55"/><text x="95.6735%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (55 samples, 0.05%)</title><rect x="95.4235%" y="213" width="0.0487%" height="15" fill="rgb(213,116,10)" fg:x="107778" fg:w="55"/><text x="95.6735%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (55 samples, 0.05%)</title><rect x="95.4235%" y="197" width="0.0487%" height="15" fill="rgb(239,15,48)" fg:x="107778" fg:w="55"/><text x="95.6735%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (55 samples, 0.05%)</title><rect x="95.4235%" y="181" width="0.0487%" height="15" fill="rgb(207,123,36)" fg:x="107778" fg:w="55"/><text x="95.6735%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (55 samples, 0.05%)</title><rect x="95.4235%" y="165" width="0.0487%" height="15" fill="rgb(209,103,30)" fg:x="107778" fg:w="55"/><text x="95.6735%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (55 samples, 0.05%)</title><rect x="95.4235%" y="149" width="0.0487%" height="15" fill="rgb(238,100,19)" fg:x="107778" fg:w="55"/><text x="95.6735%" y="159.50"></text></g><g><title>__rg_dealloc (55 samples, 0.05%)</title><rect x="95.4235%" y="133" width="0.0487%" height="15" fill="rgb(244,30,14)" fg:x="107778" fg:w="55"/><text x="95.6735%" y="143.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (55 samples, 0.05%)</title><rect x="95.4235%" y="117" width="0.0487%" height="15" fill="rgb(249,174,6)" fg:x="107778" fg:w="55"/><text x="95.6735%" y="127.50"></text></g><g><title>sn_rust_dealloc (49 samples, 0.04%)</title><rect x="95.4288%" y="101" width="0.0434%" height="15" fill="rgb(235,213,41)" fg:x="107784" fg:w="49"/><text x="95.6788%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt;&gt; (22 samples, 0.02%)</title><rect x="95.4722%" y="261" width="0.0195%" height="15" fill="rgb(213,118,6)" fg:x="107833" fg:w="22"/><text x="95.7222%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt; (22 samples, 0.02%)</title><rect x="95.4722%" y="245" width="0.0195%" height="15" fill="rgb(235,44,51)" fg:x="107833" fg:w="22"/><text x="95.7222%" y="255.50"></text></g><g><title>sn_rust_dealloc (27 samples, 0.02%)</title><rect x="95.5129%" y="149" width="0.0239%" height="15" fill="rgb(217,9,53)" fg:x="107879" fg:w="27"/><text x="95.7629%" y="159.50"></text></g><g><title>alloc::alloc::box_free (43 samples, 0.04%)</title><rect x="95.5014%" y="229" width="0.0381%" height="15" fill="rgb(237,172,34)" fg:x="107866" fg:w="43"/><text x="95.7514%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (43 samples, 0.04%)</title><rect x="95.5014%" y="213" width="0.0381%" height="15" fill="rgb(206,206,11)" fg:x="107866" fg:w="43"/><text x="95.7514%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (38 samples, 0.03%)</title><rect x="95.5059%" y="197" width="0.0336%" height="15" fill="rgb(214,149,29)" fg:x="107871" fg:w="38"/><text x="95.7559%" y="207.50"></text></g><g><title>__rg_dealloc (38 samples, 0.03%)</title><rect x="95.5059%" y="181" width="0.0336%" height="15" fill="rgb(208,123,3)" fg:x="107871" fg:w="38"/><text x="95.7559%" y="191.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (38 samples, 0.03%)</title><rect x="95.5059%" y="165" width="0.0336%" height="15" fill="rgb(229,126,4)" fg:x="107871" fg:w="38"/><text x="95.7559%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;tremor_runtime::connectors::sink::SinkReply,tremor_runtime::errors::Error&gt;+core::marker::Send&gt;&gt;&gt; (55 samples, 0.05%)</title><rect x="95.4917%" y="261" width="0.0487%" height="15" fill="rgb(222,92,36)" fg:x="107855" fg:w="55"/><text x="95.7417%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;tremor_runtime::connectors::sink::SinkReply,tremor_runtime::errors::Error&gt;+core::marker::Send&gt;&gt; (55 samples, 0.05%)</title><rect x="95.4917%" y="245" width="0.0487%" height="15" fill="rgb(216,39,41)" fg:x="107855" fg:w="55"/><text x="95.7417%" y="255.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (45 samples, 0.04%)</title><rect x="95.5714%" y="245" width="0.0398%" height="15" fill="rgb(253,127,28)" fg:x="107945" fg:w="45"/><text x="95.8214%" y="255.50"></text></g><g><title>core::time::Duration::as_nanos (39 samples, 0.03%)</title><rect x="95.6112%" y="245" width="0.0345%" height="15" fill="rgb(249,152,51)" fg:x="107990" fg:w="39"/><text x="95.8612%" y="255.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (174 samples, 0.15%)</title><rect x="95.6457%" y="229" width="0.1541%" height="15" fill="rgb(209,123,42)" fg:x="108029" fg:w="174"/><text x="95.8957%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (84 samples, 0.07%)</title><rect x="95.8786%" y="197" width="0.0744%" height="15" fill="rgb(241,118,22)" fg:x="108292" fg:w="84"/><text x="96.1286%" y="207.50"></text></g><g><title>core::cmp::PartialOrd::ge (84 samples, 0.07%)</title><rect x="95.8786%" y="181" width="0.0744%" height="15" fill="rgb(208,25,7)" fg:x="108292" fg:w="84"/><text x="96.1286%" y="191.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (81 samples, 0.07%)</title><rect x="95.8813%" y="165" width="0.0717%" height="15" fill="rgb(243,144,39)" fg:x="108295" fg:w="81"/><text x="96.1313%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (40 samples, 0.04%)</title><rect x="95.9176%" y="149" width="0.0354%" height="15" fill="rgb(250,50,5)" fg:x="108336" fg:w="40"/><text x="96.1676%" y="159.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (40 samples, 0.04%)</title><rect x="95.9176%" y="133" width="0.0354%" height="15" fill="rgb(207,67,11)" fg:x="108336" fg:w="40"/><text x="96.1676%" y="143.50"></text></g><g><title>std::time::SystemTime::duration_since (388 samples, 0.34%)</title><rect x="95.6457%" y="245" width="0.3435%" height="15" fill="rgb(245,204,40)" fg:x="108029" fg:w="388"/><text x="95.8957%" y="255.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (214 samples, 0.19%)</title><rect x="95.7998%" y="229" width="0.1895%" height="15" fill="rgb(238,228,24)" fg:x="108203" fg:w="214"/><text x="96.0498%" y="239.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (214 samples, 0.19%)</title><rect x="95.7998%" y="213" width="0.1895%" height="15" fill="rgb(217,116,22)" fg:x="108203" fg:w="214"/><text x="96.0498%" y="223.50"></text></g><g><title>core::time::Duration::new (41 samples, 0.04%)</title><rect x="95.9530%" y="197" width="0.0363%" height="15" fill="rgb(234,98,12)" fg:x="108376" fg:w="41"/><text x="96.2030%" y="207.50"></text></g><g><title>tremor_common::time::nanotime (1,321 samples, 1.17%)</title><rect x="95.5404%" y="261" width="1.1696%" height="15" fill="rgb(242,170,50)" fg:x="107910" fg:w="1321"/><text x="95.7904%" y="271.50"></text></g><g><title>std::time::SystemTime::now (814 samples, 0.72%)</title><rect x="95.9893%" y="245" width="0.7207%" height="15" fill="rgb(235,7,5)" fg:x="108417" fg:w="814"/><text x="96.2393%" y="255.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (814 samples, 0.72%)</title><rect x="95.9893%" y="229" width="0.7207%" height="15" fill="rgb(241,114,28)" fg:x="108417" fg:w="814"/><text x="96.2393%" y="239.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (814 samples, 0.72%)</title><rect x="95.9893%" y="213" width="0.7207%" height="15" fill="rgb(246,112,42)" fg:x="108417" fg:w="814"/><text x="96.2393%" y="223.50"></text></g><g><title>__clock_gettime (651 samples, 0.58%)</title><rect x="96.1336%" y="197" width="0.5764%" height="15" fill="rgb(248,228,14)" fg:x="108580" fg:w="651"/><text x="96.3836%" y="207.50"></text></g><g><title>__vdso_clock_gettime (619 samples, 0.55%)</title><rect x="96.1619%" y="181" width="0.5480%" height="15" fill="rgb(208,133,18)" fg:x="108612" fg:w="619"/><text x="96.4119%" y="191.50"></text></g><g><title>[[vdso]] (548 samples, 0.49%)</title><rect x="96.2248%" y="165" width="0.4852%" height="15" fill="rgb(207,35,49)" fg:x="108683" fg:w="548"/><text x="96.4748%" y="175.50"></text></g><g><title>core::mem::drop (26 samples, 0.02%)</title><rect x="96.7259%" y="197" width="0.0230%" height="15" fill="rgb(205,68,36)" fg:x="109249" fg:w="26"/><text x="96.9759%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,simd_json::value::owned::Value&gt;&gt; (26 samples, 0.02%)</title><rect x="96.7259%" y="181" width="0.0230%" height="15" fill="rgb(245,62,40)" fg:x="109249" fg:w="26"/><text x="96.9759%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.02%)</title><rect x="96.7321%" y="165" width="0.0168%" height="15" fill="rgb(228,27,24)" fg:x="109256" fg:w="19"/><text x="96.9821%" y="175.50"></text></g><g><title>tremor_pipeline::OpMeta::merge (52 samples, 0.05%)</title><rect x="96.7100%" y="261" width="0.0460%" height="15" fill="rgb(253,19,12)" fg:x="109231" fg:w="52"/><text x="96.9600%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (44 samples, 0.04%)</title><rect x="96.7170%" y="245" width="0.0390%" height="15" fill="rgb(232,28,20)" fg:x="109239" fg:w="44"/><text x="96.9670%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,simd_json::value::owned::Value&gt;&gt; (44 samples, 0.04%)</title><rect x="96.7170%" y="229" width="0.0390%" height="15" fill="rgb(218,35,51)" fg:x="109239" fg:w="44"/><text x="96.9670%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (44 samples, 0.04%)</title><rect x="96.7170%" y="213" width="0.0390%" height="15" fill="rgb(212,90,40)" fg:x="109239" fg:w="44"/><text x="96.9670%" y="223.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,639 samples, 3.22%)</title><rect x="93.5448%" y="293" width="3.2219%" height="15" fill="rgb(220,172,12)" fg:x="105656" fg:w="3639"/><text x="93.7948%" y="303.50">&lt;co..</text></g><g><title>tremor_runtime::connectors::sink::SinkManager&lt;S&gt;::run::{{closure}} (3,624 samples, 3.21%)</title><rect x="93.5580%" y="277" width="3.2086%" height="15" fill="rgb(226,159,20)" fg:x="105671" fg:w="3624"/><text x="93.8080%" y="287.50">tre..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (3,640 samples, 3.22%)</title><rect x="93.5448%" y="309" width="3.2228%" height="15" fill="rgb(234,205,16)" fg:x="105656" fg:w="3640"/><text x="93.7948%" y="319.50">&lt;as..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (3,740 samples, 3.31%)</title><rect x="93.4598%" y="437" width="3.3113%" height="15" fill="rgb(207,9,39)" fg:x="105560" fg:w="3740"/><text x="93.7098%" y="447.50">&lt;co..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,740 samples, 3.31%)</title><rect x="93.4598%" y="421" width="3.3113%" height="15" fill="rgb(249,143,15)" fg:x="105560" fg:w="3740"/><text x="93.7098%" y="431.50">&lt;co..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (3,737 samples, 3.31%)</title><rect x="93.4624%" y="405" width="3.3086%" height="15" fill="rgb(253,133,29)" fg:x="105563" fg:w="3737"/><text x="93.7124%" y="415.50">asy..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (3,688 samples, 3.27%)</title><rect x="93.5058%" y="389" width="3.2652%" height="15" fill="rgb(221,187,0)" fg:x="105612" fg:w="3688"/><text x="93.7558%" y="399.50">&lt;as..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (3,688 samples, 3.27%)</title><rect x="93.5058%" y="373" width="3.2652%" height="15" fill="rgb(205,204,26)" fg:x="105612" fg:w="3688"/><text x="93.7558%" y="383.50">asy..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3,686 samples, 3.26%)</title><rect x="93.5076%" y="357" width="3.2635%" height="15" fill="rgb(224,68,54)" fg:x="105614" fg:w="3686"/><text x="93.7576%" y="367.50">std..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3,686 samples, 3.26%)</title><rect x="93.5076%" y="341" width="3.2635%" height="15" fill="rgb(209,67,4)" fg:x="105614" fg:w="3686"/><text x="93.7576%" y="351.50">std..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (3,645 samples, 3.23%)</title><rect x="93.5439%" y="325" width="3.2272%" height="15" fill="rgb(228,229,18)" fg:x="105655" fg:w="3645"/><text x="93.7939%" y="335.50">asy..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_ref (23 samples, 0.02%)</title><rect x="96.7711%" y="437" width="0.0204%" height="15" fill="rgb(231,89,13)" fg:x="109300" fg:w="23"/><text x="97.0211%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (22 samples, 0.02%)</title><rect x="96.7719%" y="421" width="0.0195%" height="15" fill="rgb(210,182,18)" fg:x="109301" fg:w="22"/><text x="97.0219%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_sub (22 samples, 0.02%)</title><rect x="96.7719%" y="405" width="0.0195%" height="15" fill="rgb(240,105,2)" fg:x="109301" fg:w="22"/><text x="97.0219%" y="415.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::schedule (14 samples, 0.01%)</title><rect x="96.7914%" y="437" width="0.0124%" height="15" fill="rgb(207,170,50)" fg:x="109323" fg:w="14"/><text x="97.0414%" y="447.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (14 samples, 0.01%)</title><rect x="96.7914%" y="421" width="0.0124%" height="15" fill="rgb(232,133,24)" fg:x="109323" fg:w="14"/><text x="97.0414%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (195 samples, 0.17%)</title><rect x="96.8038%" y="437" width="0.1726%" height="15" fill="rgb(235,166,27)" fg:x="109337" fg:w="195"/><text x="97.0538%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (195 samples, 0.17%)</title><rect x="96.8038%" y="421" width="0.1726%" height="15" fill="rgb(209,19,13)" fg:x="109337" fg:w="195"/><text x="97.0538%" y="431.50"></text></g><g><title>async_task::runnable::Runnable::run (4,055 samples, 3.59%)</title><rect x="93.3880%" y="469" width="3.5902%" height="15" fill="rgb(226,79,39)" fg:x="105479" fg:w="4055"/><text x="93.6380%" y="479.50">asyn..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (4,022 samples, 3.56%)</title><rect x="93.4173%" y="453" width="3.5610%" height="15" fill="rgb(222,163,10)" fg:x="105512" fg:w="4022"/><text x="93.6673%" y="463.50">asyn..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (10,365 samples, 9.18%)</title><rect x="87.8155%" y="517" width="9.1769%" height="15" fill="rgb(214,44,19)" fg:x="99185" fg:w="10365"/><text x="88.0655%" y="527.50">&lt;futures_lite..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,365 samples, 9.18%)</title><rect x="87.8155%" y="501" width="9.1769%" height="15" fill="rgb(210,217,13)" fg:x="99185" fg:w="10365"/><text x="88.0655%" y="511.50">&lt;core::future..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (10,363 samples, 9.18%)</title><rect x="87.8173%" y="485" width="9.1751%" height="15" fill="rgb(237,61,54)" fg:x="99187" fg:w="10363"/><text x="88.0673%" y="495.50">async_executo..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (16 samples, 0.01%)</title><rect x="96.9782%" y="469" width="0.0142%" height="15" fill="rgb(226,184,24)" fg:x="109534" fg:w="16"/><text x="97.2282%" y="479.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (16 samples, 0.01%)</title><rect x="96.9782%" y="453" width="0.0142%" height="15" fill="rgb(223,226,4)" fg:x="109534" fg:w="16"/><text x="97.2282%" y="463.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (10,383 samples, 9.19%)</title><rect x="87.8014%" y="533" width="9.1928%" height="15" fill="rgb(210,26,41)" fg:x="99169" fg:w="10383"/><text x="88.0514%" y="543.50">async_executo..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.02%)</title><rect x="97.0491%" y="325" width="0.0186%" height="15" fill="rgb(220,221,6)" fg:x="109614" fg:w="21"/><text x="97.2991%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (21 samples, 0.02%)</title><rect x="97.0491%" y="309" width="0.0186%" height="15" fill="rgb(225,89,49)" fg:x="109614" fg:w="21"/><text x="97.2991%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (21 samples, 0.02%)</title><rect x="97.0491%" y="293" width="0.0186%" height="15" fill="rgb(218,70,45)" fg:x="109614" fg:w="21"/><text x="97.2991%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (21 samples, 0.02%)</title><rect x="97.0491%" y="277" width="0.0186%" height="15" fill="rgb(238,166,21)" fg:x="109614" fg:w="21"/><text x="97.2991%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (21 samples, 0.02%)</title><rect x="97.0491%" y="261" width="0.0186%" height="15" fill="rgb(224,141,44)" fg:x="109614" fg:w="21"/><text x="97.2991%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (19 samples, 0.02%)</title><rect x="97.0508%" y="245" width="0.0168%" height="15" fill="rgb(230,12,49)" fg:x="109616" fg:w="19"/><text x="97.3008%" y="255.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (14 samples, 0.01%)</title><rect x="97.0553%" y="229" width="0.0124%" height="15" fill="rgb(212,174,12)" fg:x="109621" fg:w="14"/><text x="97.3053%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (14 samples, 0.01%)</title><rect x="97.0553%" y="213" width="0.0124%" height="15" fill="rgb(246,67,9)" fg:x="109621" fg:w="14"/><text x="97.3053%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (14 samples, 0.01%)</title><rect x="97.0553%" y="197" width="0.0124%" height="15" fill="rgb(239,35,23)" fg:x="109621" fg:w="14"/><text x="97.3053%" y="207.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (14 samples, 0.01%)</title><rect x="97.0553%" y="181" width="0.0124%" height="15" fill="rgb(211,167,0)" fg:x="109621" fg:w="14"/><text x="97.3053%" y="191.50"></text></g><g><title>concurrent_queue::full_fence (45 samples, 0.04%)</title><rect x="97.0969%" y="293" width="0.0398%" height="15" fill="rgb(225,119,45)" fg:x="109668" fg:w="45"/><text x="97.3469%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (43 samples, 0.04%)</title><rect x="97.0986%" y="277" width="0.0381%" height="15" fill="rgb(210,162,6)" fg:x="109670" fg:w="43"/><text x="97.3486%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (43 samples, 0.04%)</title><rect x="97.0986%" y="261" width="0.0381%" height="15" fill="rgb(208,118,35)" fg:x="109670" fg:w="43"/><text x="97.3486%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (43 samples, 0.04%)</title><rect x="97.0986%" y="245" width="0.0381%" height="15" fill="rgb(239,4,53)" fg:x="109670" fg:w="43"/><text x="97.3486%" y="255.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (114 samples, 0.10%)</title><rect x="97.0836%" y="309" width="0.1009%" height="15" fill="rgb(213,130,21)" fg:x="109653" fg:w="114"/><text x="97.3336%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (54 samples, 0.05%)</title><rect x="97.1367%" y="293" width="0.0478%" height="15" fill="rgb(235,148,0)" fg:x="109713" fg:w="54"/><text x="97.3867%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_load (53 samples, 0.05%)</title><rect x="97.1376%" y="277" width="0.0469%" height="15" fill="rgb(244,224,18)" fg:x="109714" fg:w="53"/><text x="97.3876%" y="287.50"></text></g><g><title>concurrent_queue::full_fence (41 samples, 0.04%)</title><rect x="97.1907%" y="293" width="0.0363%" height="15" fill="rgb(211,214,4)" fg:x="109774" fg:w="41"/><text x="97.4407%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (41 samples, 0.04%)</title><rect x="97.1907%" y="277" width="0.0363%" height="15" fill="rgb(206,119,25)" fg:x="109774" fg:w="41"/><text x="97.4407%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (41 samples, 0.04%)</title><rect x="97.1907%" y="261" width="0.0363%" height="15" fill="rgb(243,93,47)" fg:x="109774" fg:w="41"/><text x="97.4407%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (41 samples, 0.04%)</title><rect x="97.1907%" y="245" width="0.0363%" height="15" fill="rgb(224,194,6)" fg:x="109774" fg:w="41"/><text x="97.4407%" y="255.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (192 samples, 0.17%)</title><rect x="97.0677%" y="325" width="0.1700%" height="15" fill="rgb(243,229,6)" fg:x="109635" fg:w="192"/><text x="97.3177%" y="335.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (60 samples, 0.05%)</title><rect x="97.1845%" y="309" width="0.0531%" height="15" fill="rgb(207,23,50)" fg:x="109767" fg:w="60"/><text x="97.4345%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (29 samples, 0.03%)</title><rect x="97.2376%" y="325" width="0.0257%" height="15" fill="rgb(253,192,32)" fg:x="109827" fg:w="29"/><text x="97.4876%" y="335.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.03%)</title><rect x="97.2376%" y="309" width="0.0257%" height="15" fill="rgb(213,21,6)" fg:x="109827" fg:w="29"/><text x="97.4876%" y="319.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read_unlock (28 samples, 0.02%)</title><rect x="97.2385%" y="293" width="0.0248%" height="15" fill="rgb(243,151,13)" fg:x="109828" fg:w="28"/><text x="97.4885%" y="303.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_unlock (28 samples, 0.02%)</title><rect x="97.2385%" y="277" width="0.0248%" height="15" fill="rgb(233,165,41)" fg:x="109828" fg:w="28"/><text x="97.4885%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (26 samples, 0.02%)</title><rect x="97.2403%" y="261" width="0.0230%" height="15" fill="rgb(246,176,45)" fg:x="109830" fg:w="26"/><text x="97.4903%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_sub (26 samples, 0.02%)</title><rect x="97.2403%" y="245" width="0.0230%" height="15" fill="rgb(217,170,52)" fg:x="109830" fg:w="26"/><text x="97.4903%" y="255.50"></text></g><g><title>fastrand::usize (18 samples, 0.02%)</title><rect x="97.2633%" y="325" width="0.0159%" height="15" fill="rgb(214,203,54)" fg:x="109856" fg:w="18"/><text x="97.5133%" y="335.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (17 samples, 0.02%)</title><rect x="97.2642%" y="309" width="0.0151%" height="15" fill="rgb(248,215,49)" fg:x="109857" fg:w="17"/><text x="97.5142%" y="319.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (16 samples, 0.01%)</title><rect x="97.2651%" y="293" width="0.0142%" height="15" fill="rgb(208,46,10)" fg:x="109858" fg:w="16"/><text x="97.5151%" y="303.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (307 samples, 0.27%)</title><rect x="97.0358%" y="341" width="0.2718%" height="15" fill="rgb(254,5,31)" fg:x="109599" fg:w="307"/><text x="97.2858%" y="351.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (32 samples, 0.03%)</title><rect x="97.2793%" y="325" width="0.0283%" height="15" fill="rgb(222,104,33)" fg:x="109874" fg:w="32"/><text x="97.5293%" y="335.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read (29 samples, 0.03%)</title><rect x="97.2819%" y="309" width="0.0257%" height="15" fill="rgb(248,49,16)" fg:x="109877" fg:w="29"/><text x="97.5319%" y="319.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (29 samples, 0.03%)</title><rect x="97.2819%" y="293" width="0.0257%" height="15" fill="rgb(232,198,41)" fg:x="109877" fg:w="29"/><text x="97.5319%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (28 samples, 0.02%)</title><rect x="97.2828%" y="277" width="0.0248%" height="15" fill="rgb(214,125,3)" fg:x="109878" fg:w="28"/><text x="97.5328%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (28 samples, 0.02%)</title><rect x="97.2828%" y="261" width="0.0248%" height="15" fill="rgb(229,220,28)" fg:x="109878" fg:w="28"/><text x="97.5328%" y="271.50"></text></g><g><title>async_executor::Sleepers::update (19 samples, 0.02%)</title><rect x="97.3120%" y="325" width="0.0168%" height="15" fill="rgb(222,64,37)" fg:x="109911" fg:w="19"/><text x="97.5620%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (35 samples, 0.03%)</title><rect x="97.3288%" y="325" width="0.0310%" height="15" fill="rgb(249,184,13)" fg:x="109930" fg:w="35"/><text x="97.5788%" y="335.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.03%)</title><rect x="97.3288%" y="309" width="0.0310%" height="15" fill="rgb(252,176,6)" fg:x="109930" fg:w="35"/><text x="97.5788%" y="319.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (31 samples, 0.03%)</title><rect x="97.3324%" y="293" width="0.0274%" height="15" fill="rgb(228,153,7)" fg:x="109934" fg:w="31"/><text x="97.5824%" y="303.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (31 samples, 0.03%)</title><rect x="97.3324%" y="277" width="0.0274%" height="15" fill="rgb(242,193,5)" fg:x="109934" fg:w="31"/><text x="97.5824%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (31 samples, 0.03%)</title><rect x="97.3324%" y="261" width="0.0274%" height="15" fill="rgb(232,140,9)" fg:x="109934" fg:w="31"/><text x="97.5824%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_swap (31 samples, 0.03%)</title><rect x="97.3324%" y="245" width="0.0274%" height="15" fill="rgb(213,222,16)" fg:x="109934" fg:w="31"/><text x="97.5824%" y="255.50"></text></g><g><title>async_executor::Ticker::sleep (88 samples, 0.08%)</title><rect x="97.3076%" y="341" width="0.0779%" height="15" fill="rgb(222,75,50)" fg:x="109906" fg:w="88"/><text x="97.5576%" y="351.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (29 samples, 0.03%)</title><rect x="97.3598%" y="325" width="0.0257%" height="15" fill="rgb(205,180,2)" fg:x="109965" fg:w="29"/><text x="97.6098%" y="335.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (22 samples, 0.02%)</title><rect x="97.3660%" y="309" width="0.0195%" height="15" fill="rgb(216,34,7)" fg:x="109972" fg:w="22"/><text x="97.6160%" y="319.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (22 samples, 0.02%)</title><rect x="97.3660%" y="293" width="0.0195%" height="15" fill="rgb(253,16,32)" fg:x="109972" fg:w="22"/><text x="97.6160%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (22 samples, 0.02%)</title><rect x="97.3660%" y="277" width="0.0195%" height="15" fill="rgb(208,97,28)" fg:x="109972" fg:w="22"/><text x="97.6160%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (22 samples, 0.02%)</title><rect x="97.3660%" y="261" width="0.0195%" height="15" fill="rgb(225,92,11)" fg:x="109972" fg:w="22"/><text x="97.6160%" y="271.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (410 samples, 0.36%)</title><rect x="97.0243%" y="453" width="0.3630%" height="15" fill="rgb(243,38,12)" fg:x="109586" fg:w="410"/><text x="97.2743%" y="463.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (405 samples, 0.36%)</title><rect x="97.0287%" y="437" width="0.3586%" height="15" fill="rgb(208,139,16)" fg:x="109591" fg:w="405"/><text x="97.2787%" y="447.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}} (403 samples, 0.36%)</title><rect x="97.0305%" y="421" width="0.3568%" height="15" fill="rgb(227,24,9)" fg:x="109593" fg:w="403"/><text x="97.2805%" y="431.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (400 samples, 0.35%)</title><rect x="97.0331%" y="405" width="0.3541%" height="15" fill="rgb(206,62,11)" fg:x="109596" fg:w="400"/><text x="97.2831%" y="415.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (400 samples, 0.35%)</title><rect x="97.0331%" y="389" width="0.3541%" height="15" fill="rgb(228,134,27)" fg:x="109596" fg:w="400"/><text x="97.2831%" y="399.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (398 samples, 0.35%)</title><rect x="97.0349%" y="373" width="0.3524%" height="15" fill="rgb(205,55,33)" fg:x="109598" fg:w="398"/><text x="97.2849%" y="383.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (397 samples, 0.35%)</title><rect x="97.0358%" y="357" width="0.3515%" height="15" fill="rgb(243,75,43)" fg:x="109599" fg:w="397"/><text x="97.2858%" y="367.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (16 samples, 0.01%)</title><rect x="97.4236%" y="389" width="0.0142%" height="15" fill="rgb(223,27,42)" fg:x="110037" fg:w="16"/><text x="97.6736%" y="399.50"></text></g><g><title>core::mem::replace (16 samples, 0.01%)</title><rect x="97.4236%" y="373" width="0.0142%" height="15" fill="rgb(232,189,33)" fg:x="110037" fg:w="16"/><text x="97.6736%" y="383.50"></text></g><g><title>core::ptr::read (16 samples, 0.01%)</title><rect x="97.4236%" y="357" width="0.0142%" height="15" fill="rgb(210,9,39)" fg:x="110037" fg:w="16"/><text x="97.6736%" y="367.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (28 samples, 0.02%)</title><rect x="97.4174%" y="405" width="0.0248%" height="15" fill="rgb(242,85,26)" fg:x="110030" fg:w="28"/><text x="97.6674%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (32 samples, 0.03%)</title><rect x="97.4422%" y="405" width="0.0283%" height="15" fill="rgb(248,44,4)" fg:x="110058" fg:w="32"/><text x="97.6922%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (29 samples, 0.03%)</title><rect x="97.4448%" y="389" width="0.0257%" height="15" fill="rgb(250,96,46)" fg:x="110061" fg:w="29"/><text x="97.6948%" y="399.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.03%)</title><rect x="97.4448%" y="373" width="0.0257%" height="15" fill="rgb(229,116,26)" fg:x="110061" fg:w="29"/><text x="97.6948%" y="383.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (26 samples, 0.02%)</title><rect x="97.4475%" y="357" width="0.0230%" height="15" fill="rgb(246,94,34)" fg:x="110064" fg:w="26"/><text x="97.6975%" y="367.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (26 samples, 0.02%)</title><rect x="97.4475%" y="341" width="0.0230%" height="15" fill="rgb(251,73,21)" fg:x="110064" fg:w="26"/><text x="97.6975%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (26 samples, 0.02%)</title><rect x="97.4475%" y="325" width="0.0230%" height="15" fill="rgb(254,121,25)" fg:x="110064" fg:w="26"/><text x="97.6975%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_swap (26 samples, 0.02%)</title><rect x="97.4475%" y="309" width="0.0230%" height="15" fill="rgb(215,161,49)" fg:x="110064" fg:w="26"/><text x="97.6975%" y="319.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (128 samples, 0.11%)</title><rect x="97.4006%" y="421" width="0.1133%" height="15" fill="rgb(221,43,13)" fg:x="110011" fg:w="128"/><text x="97.6506%" y="431.50"></text></g><g><title>event_listener::Inner::lock (40 samples, 0.04%)</title><rect x="97.4785%" y="405" width="0.0354%" height="15" fill="rgb(249,5,37)" fg:x="110099" fg:w="40"/><text x="97.7285%" y="415.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (39 samples, 0.03%)</title><rect x="97.4793%" y="389" width="0.0345%" height="15" fill="rgb(226,25,44)" fg:x="110100" fg:w="39"/><text x="97.7293%" y="399.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (35 samples, 0.03%)</title><rect x="97.4829%" y="373" width="0.0310%" height="15" fill="rgb(238,189,16)" fg:x="110104" fg:w="35"/><text x="97.7329%" y="383.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (35 samples, 0.03%)</title><rect x="97.4829%" y="357" width="0.0310%" height="15" fill="rgb(251,186,8)" fg:x="110104" fg:w="35"/><text x="97.7329%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (35 samples, 0.03%)</title><rect x="97.4829%" y="341" width="0.0310%" height="15" fill="rgb(254,34,31)" fg:x="110104" fg:w="35"/><text x="97.7329%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (35 samples, 0.03%)</title><rect x="97.4829%" y="325" width="0.0310%" height="15" fill="rgb(225,215,27)" fg:x="110104" fg:w="35"/><text x="97.7329%" y="335.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (622 samples, 0.55%)</title><rect x="97.0181%" y="485" width="0.5507%" height="15" fill="rgb(221,192,48)" fg:x="109579" fg:w="622"/><text x="97.2681%" y="495.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (616 samples, 0.55%)</title><rect x="97.0234%" y="469" width="0.5454%" height="15" fill="rgb(219,137,20)" fg:x="109585" fg:w="616"/><text x="97.2734%" y="479.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}} (205 samples, 0.18%)</title><rect x="97.3873%" y="453" width="0.1815%" height="15" fill="rgb(219,84,11)" fg:x="109996" fg:w="205"/><text x="97.6373%" y="463.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (200 samples, 0.18%)</title><rect x="97.3917%" y="437" width="0.1771%" height="15" fill="rgb(224,10,23)" fg:x="110001" fg:w="200"/><text x="97.6417%" y="447.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (62 samples, 0.05%)</title><rect x="97.5139%" y="421" width="0.0549%" height="15" fill="rgb(248,22,39)" fg:x="110139" fg:w="62"/><text x="97.7639%" y="431.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (62 samples, 0.05%)</title><rect x="97.5139%" y="405" width="0.0549%" height="15" fill="rgb(212,154,20)" fg:x="110139" fg:w="62"/><text x="97.7639%" y="415.50"></text></g><g><title>concurrent_queue::single::Single&lt;T&gt;::pop (43 samples, 0.04%)</title><rect x="97.5307%" y="389" width="0.0381%" height="15" fill="rgb(236,199,50)" fg:x="110158" fg:w="43"/><text x="97.7807%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (41 samples, 0.04%)</title><rect x="97.5325%" y="373" width="0.0363%" height="15" fill="rgb(211,9,17)" fg:x="110160" fg:w="41"/><text x="97.7825%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (41 samples, 0.04%)</title><rect x="97.5325%" y="357" width="0.0363%" height="15" fill="rgb(243,216,36)" fg:x="110160" fg:w="41"/><text x="97.7825%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (41 samples, 0.04%)</title><rect x="97.5325%" y="341" width="0.0363%" height="15" fill="rgb(250,2,10)" fg:x="110160" fg:w="41"/><text x="97.7825%" y="351.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (11,065 samples, 9.80%)</title><rect x="87.7775%" y="565" width="9.7966%" height="15" fill="rgb(226,50,48)" fg:x="99142" fg:w="11065"/><text x="88.0275%" y="575.50">&lt;futures_lite:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,040 samples, 9.77%)</title><rect x="87.7996%" y="549" width="9.7745%" height="15" fill="rgb(243,81,16)" fg:x="99167" fg:w="11040"/><text x="88.0496%" y="559.50">&lt;core::future:..</text></g><g><title>async_executor::LocalExecutor::run::{{closure}} (655 samples, 0.58%)</title><rect x="96.9942%" y="533" width="0.5799%" height="15" fill="rgb(250,14,2)" fg:x="109552" fg:w="655"/><text x="97.2442%" y="543.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (630 samples, 0.56%)</title><rect x="97.0163%" y="517" width="0.5578%" height="15" fill="rgb(233,135,29)" fg:x="109577" fg:w="630"/><text x="97.2663%" y="527.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (630 samples, 0.56%)</title><rect x="97.0163%" y="501" width="0.5578%" height="15" fill="rgb(224,64,43)" fg:x="109577" fg:w="630"/><text x="97.2663%" y="511.50"></text></g><g><title>async_io::reactor::Reactor::try_lock (48 samples, 0.04%)</title><rect x="97.5847%" y="565" width="0.0425%" height="15" fill="rgb(238,84,13)" fg:x="110219" fg:w="48"/><text x="97.8347%" y="575.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (48 samples, 0.04%)</title><rect x="97.5847%" y="549" width="0.0425%" height="15" fill="rgb(253,48,26)" fg:x="110219" fg:w="48"/><text x="97.8347%" y="559.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (38 samples, 0.03%)</title><rect x="97.5936%" y="533" width="0.0336%" height="15" fill="rgb(205,223,31)" fg:x="110229" fg:w="38"/><text x="97.8436%" y="543.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::try_lock (38 samples, 0.03%)</title><rect x="97.5936%" y="517" width="0.0336%" height="15" fill="rgb(221,41,32)" fg:x="110229" fg:w="38"/><text x="97.8436%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (38 samples, 0.03%)</title><rect x="97.5936%" y="501" width="0.0336%" height="15" fill="rgb(213,158,31)" fg:x="110229" fg:w="38"/><text x="97.8436%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (38 samples, 0.03%)</title><rect x="97.5936%" y="485" width="0.0336%" height="15" fill="rgb(245,126,43)" fg:x="110229" fg:w="38"/><text x="97.8436%" y="495.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::ne (30 samples, 0.03%)</title><rect x="97.6759%" y="549" width="0.0266%" height="15" fill="rgb(227,7,22)" fg:x="110322" fg:w="30"/><text x="97.9259%" y="559.50"></text></g><g><title>sn_rust_dealloc (66 samples, 0.06%)</title><rect x="97.7299%" y="389" width="0.0584%" height="15" fill="rgb(252,90,44)" fg:x="110383" fg:w="66"/><text x="97.9799%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (75 samples, 0.07%)</title><rect x="97.7290%" y="453" width="0.0664%" height="15" fill="rgb(253,91,0)" fg:x="110382" fg:w="75"/><text x="97.9790%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (74 samples, 0.07%)</title><rect x="97.7299%" y="437" width="0.0655%" height="15" fill="rgb(252,175,49)" fg:x="110383" fg:w="74"/><text x="97.9799%" y="447.50"></text></g><g><title>__rg_dealloc (74 samples, 0.07%)</title><rect x="97.7299%" y="421" width="0.0655%" height="15" fill="rgb(246,150,1)" fg:x="110383" fg:w="74"/><text x="97.9799%" y="431.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (74 samples, 0.07%)</title><rect x="97.7299%" y="405" width="0.0655%" height="15" fill="rgb(241,192,25)" fg:x="110383" fg:w="74"/><text x="97.9799%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (83 samples, 0.07%)</title><rect x="97.7237%" y="533" width="0.0735%" height="15" fill="rgb(239,187,11)" fg:x="110376" fg:w="83"/><text x="97.9737%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V&gt;::dying_next (82 samples, 0.07%)</title><rect x="97.7246%" y="517" width="0.0726%" height="15" fill="rgb(218,202,51)" fg:x="110377" fg:w="82"/><text x="97.9746%" y="527.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (78 samples, 0.07%)</title><rect x="97.7281%" y="501" width="0.0691%" height="15" fill="rgb(225,176,8)" fg:x="110381" fg:w="78"/><text x="97.9781%" y="511.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (78 samples, 0.07%)</title><rect x="97.7281%" y="485" width="0.0691%" height="15" fill="rgb(219,122,41)" fg:x="110381" fg:w="78"/><text x="97.9781%" y="495.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (77 samples, 0.07%)</title><rect x="97.7290%" y="469" width="0.0682%" height="15" fill="rgb(248,140,20)" fg:x="110382" fg:w="77"/><text x="97.9790%" y="479.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (12 samples, 0.01%)</title><rect x="97.7990%" y="485" width="0.0106%" height="15" fill="rgb(245,41,37)" fg:x="110461" fg:w="12"/><text x="98.0490%" y="495.50"></text></g><g><title>alloc::collections::btree::mem::replace (12 samples, 0.01%)</title><rect x="97.7990%" y="469" width="0.0106%" height="15" fill="rgb(235,82,39)" fg:x="110461" fg:w="12"/><text x="98.0490%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.02%)</title><rect x="97.7972%" y="533" width="0.0177%" height="15" fill="rgb(230,108,42)" fg:x="110459" fg:w="20"/><text x="98.0472%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.02%)</title><rect x="97.7972%" y="517" width="0.0177%" height="15" fill="rgb(215,150,50)" fg:x="110459" fg:w="20"/><text x="98.0472%" y="527.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Immut,K,V&gt;::next_unchecked (18 samples, 0.02%)</title><rect x="97.7990%" y="501" width="0.0159%" height="15" fill="rgb(233,212,5)" fg:x="110461" fg:w="18"/><text x="98.0490%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::Edge&gt;::move_suffix (38 samples, 0.03%)</title><rect x="97.8308%" y="501" width="0.0336%" height="15" fill="rgb(245,80,22)" fg:x="110497" fg:w="38"/><text x="98.0808%" y="511.50"></text></g><g><title>alloc::collections::btree::node::move_to_slice (26 samples, 0.02%)</title><rect x="97.8415%" y="485" width="0.0230%" height="15" fill="rgb(238,129,16)" fg:x="110509" fg:w="26"/><text x="98.0915%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (26 samples, 0.02%)</title><rect x="97.8415%" y="469" width="0.0230%" height="15" fill="rgb(240,19,0)" fg:x="110509" fg:w="26"/><text x="98.0915%" y="479.50"></text></g><g><title>[libc-2.31.so] (22 samples, 0.02%)</title><rect x="97.8450%" y="453" width="0.0195%" height="15" fill="rgb(232,42,35)" fg:x="110513" fg:w="22"/><text x="98.0950%" y="463.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (18 samples, 0.02%)</title><rect x="97.8716%" y="469" width="0.0159%" height="15" fill="rgb(223,130,24)" fg:x="110543" fg:w="18"/><text x="98.1216%" y="479.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (30 samples, 0.03%)</title><rect x="97.8663%" y="501" width="0.0266%" height="15" fill="rgb(237,16,22)" fg:x="110537" fg:w="30"/><text x="98.1163%" y="511.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (30 samples, 0.03%)</title><rect x="97.8663%" y="485" width="0.0266%" height="15" fill="rgb(248,192,20)" fg:x="110537" fg:w="30"/><text x="98.1163%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (15 samples, 0.01%)</title><rect x="97.9415%" y="293" width="0.0133%" height="15" fill="rgb(233,167,2)" fg:x="110622" fg:w="15"/><text x="98.1915%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::split_off (158 samples, 0.14%)</title><rect x="97.8202%" y="533" width="0.1399%" height="15" fill="rgb(252,71,44)" fg:x="110485" fg:w="158"/><text x="98.0702%" y="543.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::split_off (150 samples, 0.13%)</title><rect x="97.8273%" y="517" width="0.1328%" height="15" fill="rgb(238,37,47)" fg:x="110493" fg:w="150"/><text x="98.0773%" y="527.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::new_pillar (76 samples, 0.07%)</title><rect x="97.8928%" y="501" width="0.0673%" height="15" fill="rgb(214,202,54)" fg:x="110567" fg:w="76"/><text x="98.1428%" y="511.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (76 samples, 0.07%)</title><rect x="97.8928%" y="485" width="0.0673%" height="15" fill="rgb(254,165,40)" fg:x="110567" fg:w="76"/><text x="98.1428%" y="495.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (76 samples, 0.07%)</title><rect x="97.8928%" y="469" width="0.0673%" height="15" fill="rgb(246,173,38)" fg:x="110567" fg:w="76"/><text x="98.1428%" y="479.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (76 samples, 0.07%)</title><rect x="97.8928%" y="453" width="0.0673%" height="15" fill="rgb(215,3,27)" fg:x="110567" fg:w="76"/><text x="98.1428%" y="463.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new_uninit (76 samples, 0.07%)</title><rect x="97.8928%" y="437" width="0.0673%" height="15" fill="rgb(239,169,51)" fg:x="110567" fg:w="76"/><text x="98.1428%" y="447.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (76 samples, 0.07%)</title><rect x="97.8928%" y="421" width="0.0673%" height="15" fill="rgb(212,5,25)" fg:x="110567" fg:w="76"/><text x="98.1428%" y="431.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (76 samples, 0.07%)</title><rect x="97.8928%" y="405" width="0.0673%" height="15" fill="rgb(243,45,17)" fg:x="110567" fg:w="76"/><text x="98.1428%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (76 samples, 0.07%)</title><rect x="97.8928%" y="389" width="0.0673%" height="15" fill="rgb(242,97,9)" fg:x="110567" fg:w="76"/><text x="98.1428%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (76 samples, 0.07%)</title><rect x="97.8928%" y="373" width="0.0673%" height="15" fill="rgb(228,71,31)" fg:x="110567" fg:w="76"/><text x="98.1428%" y="383.50"></text></g><g><title>alloc::alloc::alloc (75 samples, 0.07%)</title><rect x="97.8937%" y="357" width="0.0664%" height="15" fill="rgb(252,184,16)" fg:x="110568" fg:w="75"/><text x="98.1437%" y="367.50"></text></g><g><title>__rg_alloc (75 samples, 0.07%)</title><rect x="97.8937%" y="341" width="0.0664%" height="15" fill="rgb(236,169,46)" fg:x="110568" fg:w="75"/><text x="98.1437%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (75 samples, 0.07%)</title><rect x="97.8937%" y="325" width="0.0664%" height="15" fill="rgb(207,17,47)" fg:x="110568" fg:w="75"/><text x="98.1437%" y="335.50"></text></g><g><title>sn_rust_alloc (74 samples, 0.07%)</title><rect x="97.8946%" y="309" width="0.0655%" height="15" fill="rgb(206,201,28)" fg:x="110569" fg:w="74"/><text x="98.1446%" y="319.50"></text></g><g><title>concurrent_queue::full_fence (35 samples, 0.03%)</title><rect x="97.9849%" y="485" width="0.0310%" height="15" fill="rgb(224,184,23)" fg:x="110671" fg:w="35"/><text x="98.2349%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (34 samples, 0.03%)</title><rect x="97.9858%" y="469" width="0.0301%" height="15" fill="rgb(208,139,48)" fg:x="110672" fg:w="34"/><text x="98.2358%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (34 samples, 0.03%)</title><rect x="97.9858%" y="453" width="0.0301%" height="15" fill="rgb(208,130,10)" fg:x="110672" fg:w="34"/><text x="98.2358%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (34 samples, 0.03%)</title><rect x="97.9858%" y="437" width="0.0301%" height="15" fill="rgb(211,213,45)" fg:x="110672" fg:w="34"/><text x="98.2358%" y="447.50"></text></g><g><title>async_io::reactor::Reactor::process_timer_ops (69 samples, 0.06%)</title><rect x="97.9601%" y="533" width="0.0611%" height="15" fill="rgb(235,100,30)" fg:x="110643" fg:w="69"/><text x="98.2101%" y="543.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (61 samples, 0.05%)</title><rect x="97.9672%" y="517" width="0.0540%" height="15" fill="rgb(206,144,31)" fg:x="110651" fg:w="61"/><text x="98.2172%" y="527.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (60 samples, 0.05%)</title><rect x="97.9681%" y="501" width="0.0531%" height="15" fill="rgb(224,200,26)" fg:x="110652" fg:w="60"/><text x="98.2181%" y="511.50"></text></g><g><title>core::mem::drop (65 samples, 0.06%)</title><rect x="98.0212%" y="533" width="0.0575%" height="15" fill="rgb(247,104,53)" fg:x="110712" fg:w="65"/><text x="98.2712%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::collections::btree::map::BTreeMap&lt;(std::time::Instant,usize),core::task::wake::Waker&gt;&gt;&gt; (65 samples, 0.06%)</title><rect x="98.0212%" y="517" width="0.0575%" height="15" fill="rgb(220,14,17)" fg:x="110712" fg:w="65"/><text x="98.2712%" y="527.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (65 samples, 0.06%)</title><rect x="98.0212%" y="501" width="0.0575%" height="15" fill="rgb(230,140,40)" fg:x="110712" fg:w="65"/><text x="98.2712%" y="511.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (62 samples, 0.05%)</title><rect x="98.0239%" y="485" width="0.0549%" height="15" fill="rgb(229,2,41)" fg:x="110715" fg:w="62"/><text x="98.2739%" y="495.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (62 samples, 0.05%)</title><rect x="98.0239%" y="469" width="0.0549%" height="15" fill="rgb(232,89,16)" fg:x="110715" fg:w="62"/><text x="98.2739%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (62 samples, 0.05%)</title><rect x="98.0239%" y="453" width="0.0549%" height="15" fill="rgb(247,59,52)" fg:x="110715" fg:w="62"/><text x="98.2739%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_swap (62 samples, 0.05%)</title><rect x="98.0239%" y="437" width="0.0549%" height="15" fill="rgb(226,110,21)" fg:x="110715" fg:w="62"/><text x="98.2739%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (33 samples, 0.03%)</title><rect x="98.0832%" y="533" width="0.0292%" height="15" fill="rgb(224,176,43)" fg:x="110782" fg:w="33"/><text x="98.3332%" y="543.50"></text></g><g><title>async_io::reactor::Reactor::process_timers::{{closure}} (21 samples, 0.02%)</title><rect x="98.0938%" y="517" width="0.0186%" height="15" fill="rgb(221,73,6)" fg:x="110794" fg:w="21"/><text x="98.3438%" y="527.50"></text></g><g><title>std::time::Instant::duration_since (21 samples, 0.02%)</title><rect x="98.0938%" y="501" width="0.0186%" height="15" fill="rgb(232,78,19)" fg:x="110794" fg:w="21"/><text x="98.3438%" y="511.50"></text></g><g><title>std::time::Instant::checked_duration_since (21 samples, 0.02%)</title><rect x="98.0938%" y="485" width="0.0186%" height="15" fill="rgb(233,112,48)" fg:x="110794" fg:w="21"/><text x="98.3438%" y="495.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (21 samples, 0.02%)</title><rect x="98.0938%" y="469" width="0.0186%" height="15" fill="rgb(243,131,47)" fg:x="110794" fg:w="21"/><text x="98.3438%" y="479.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (17 samples, 0.02%)</title><rect x="98.0973%" y="453" width="0.0151%" height="15" fill="rgb(226,51,1)" fg:x="110798" fg:w="17"/><text x="98.3473%" y="463.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (76 samples, 0.07%)</title><rect x="98.1150%" y="533" width="0.0673%" height="15" fill="rgb(247,58,7)" fg:x="110818" fg:w="76"/><text x="98.3650%" y="543.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (73 samples, 0.06%)</title><rect x="98.1177%" y="517" width="0.0646%" height="15" fill="rgb(209,7,32)" fg:x="110821" fg:w="73"/><text x="98.3677%" y="527.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (73 samples, 0.06%)</title><rect x="98.1177%" y="501" width="0.0646%" height="15" fill="rgb(209,39,41)" fg:x="110821" fg:w="73"/><text x="98.3677%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (73 samples, 0.06%)</title><rect x="98.1177%" y="485" width="0.0646%" height="15" fill="rgb(226,182,46)" fg:x="110821" fg:w="73"/><text x="98.3677%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (73 samples, 0.06%)</title><rect x="98.1177%" y="469" width="0.0646%" height="15" fill="rgb(230,219,10)" fg:x="110821" fg:w="73"/><text x="98.3677%" y="479.50"></text></g><g><title>async_io::reactor::Reactor::process_timers (620 samples, 0.55%)</title><rect x="97.7042%" y="549" width="0.5489%" height="15" fill="rgb(227,175,30)" fg:x="110354" fg:w="620"/><text x="97.9542%" y="559.50"></text></g><g><title>std::time::Instant::now (80 samples, 0.07%)</title><rect x="98.1823%" y="533" width="0.0708%" height="15" fill="rgb(217,2,50)" fg:x="110894" fg:w="80"/><text x="98.4323%" y="543.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (80 samples, 0.07%)</title><rect x="98.1823%" y="517" width="0.0708%" height="15" fill="rgb(229,160,0)" fg:x="110894" fg:w="80"/><text x="98.4323%" y="527.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (80 samples, 0.07%)</title><rect x="98.1823%" y="501" width="0.0708%" height="15" fill="rgb(207,78,37)" fg:x="110894" fg:w="80"/><text x="98.4323%" y="511.50"></text></g><g><title>__clock_gettime (78 samples, 0.07%)</title><rect x="98.1841%" y="485" width="0.0691%" height="15" fill="rgb(225,57,0)" fg:x="110896" fg:w="78"/><text x="98.4341%" y="495.50"></text></g><g><title>__vdso_clock_gettime (70 samples, 0.06%)</title><rect x="98.1912%" y="469" width="0.0620%" height="15" fill="rgb(232,154,2)" fg:x="110904" fg:w="70"/><text x="98.4412%" y="479.50"></text></g><g><title>[[vdso]] (67 samples, 0.06%)</title><rect x="98.1938%" y="453" width="0.0593%" height="15" fill="rgb(241,212,25)" fg:x="110907" fg:w="67"/><text x="98.4438%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (26 samples, 0.02%)</title><rect x="98.2558%" y="549" width="0.0230%" height="15" fill="rgb(226,69,20)" fg:x="110977" fg:w="26"/><text x="98.5058%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_add (26 samples, 0.02%)</title><rect x="98.2558%" y="533" width="0.0230%" height="15" fill="rgb(247,184,54)" fg:x="110977" fg:w="26"/><text x="98.5058%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;polling::epoll::Events&gt;&gt; (18 samples, 0.02%)</title><rect x="98.3311%" y="533" width="0.0159%" height="15" fill="rgb(210,145,0)" fg:x="111062" fg:w="18"/><text x="98.5811%" y="543.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.02%)</title><rect x="98.3311%" y="517" width="0.0159%" height="15" fill="rgb(253,82,12)" fg:x="111062" fg:w="18"/><text x="98.5811%" y="527.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (12 samples, 0.01%)</title><rect x="98.3364%" y="501" width="0.0106%" height="15" fill="rgb(245,42,11)" fg:x="111068" fg:w="12"/><text x="98.5864%" y="511.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (12 samples, 0.01%)</title><rect x="98.3364%" y="485" width="0.0106%" height="15" fill="rgb(219,147,32)" fg:x="111068" fg:w="12"/><text x="98.5864%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (12 samples, 0.01%)</title><rect x="98.3364%" y="469" width="0.0106%" height="15" fill="rgb(246,12,7)" fg:x="111068" fg:w="12"/><text x="98.5864%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_swap (12 samples, 0.01%)</title><rect x="98.3364%" y="453" width="0.0106%" height="15" fill="rgb(243,50,9)" fg:x="111068" fg:w="12"/><text x="98.5864%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (24 samples, 0.02%)</title><rect x="98.3470%" y="533" width="0.0212%" height="15" fill="rgb(219,149,6)" fg:x="111080" fg:w="24"/><text x="98.5970%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_swap (24 samples, 0.02%)</title><rect x="98.3470%" y="517" width="0.0212%" height="15" fill="rgb(241,51,42)" fg:x="111080" fg:w="24"/><text x="98.5970%" y="527.50"></text></g><g><title>__pthread_disable_asynccancel (15 samples, 0.01%)</title><rect x="98.5126%" y="501" width="0.0133%" height="15" fill="rgb(226,128,27)" fg:x="111267" fg:w="15"/><text x="98.7626%" y="511.50"></text></g><g><title>__libc_read (119 samples, 0.11%)</title><rect x="98.4763%" y="517" width="0.1054%" height="15" fill="rgb(244,144,4)" fg:x="111226" fg:w="119"/><text x="98.7263%" y="527.50"></text></g><g><title>__pthread_enable_asynccancel (63 samples, 0.06%)</title><rect x="98.5259%" y="501" width="0.0558%" height="15" fill="rgb(221,4,13)" fg:x="111282" fg:w="63"/><text x="98.7759%" y="511.50"></text></g><g><title>epoll_wait (169 samples, 0.15%)</title><rect x="98.5816%" y="517" width="0.1496%" height="15" fill="rgb(208,170,28)" fg:x="111345" fg:w="169"/><text x="98.8316%" y="527.50"></text></g><g><title>[libc-2.31.so] (50 samples, 0.04%)</title><rect x="98.6870%" y="501" width="0.0443%" height="15" fill="rgb(226,131,13)" fg:x="111464" fg:w="50"/><text x="98.9370%" y="511.50"></text></g><g><title>polling::epoll::Poller::modify (95 samples, 0.08%)</title><rect x="98.7321%" y="517" width="0.0841%" height="15" fill="rgb(215,72,41)" fg:x="111515" fg:w="95"/><text x="98.9821%" y="527.50"></text></g><g><title>polling::epoll::Poller::ctl (88 samples, 0.08%)</title><rect x="98.7383%" y="501" width="0.0779%" height="15" fill="rgb(243,108,20)" fg:x="111522" fg:w="88"/><text x="98.9883%" y="511.50"></text></g><g><title>epoll_ctl (76 samples, 0.07%)</title><rect x="98.7490%" y="485" width="0.0673%" height="15" fill="rgb(230,189,17)" fg:x="111534" fg:w="76"/><text x="98.9990%" y="495.50"></text></g><g><title>polling::epoll::Poller::wait (538 samples, 0.48%)</title><rect x="98.3700%" y="533" width="0.4763%" height="15" fill="rgb(220,50,17)" fg:x="111106" fg:w="538"/><text x="98.6200%" y="543.50"></text></g><g><title>syscall (34 samples, 0.03%)</title><rect x="98.8163%" y="517" width="0.0301%" height="15" fill="rgb(248,152,48)" fg:x="111610" fg:w="34"/><text x="99.0663%" y="527.50"></text></g><g><title>polling::Poller::wait (659 samples, 0.58%)</title><rect x="98.2850%" y="549" width="0.5835%" height="15" fill="rgb(244,91,11)" fg:x="111010" fg:w="659"/><text x="98.5350%" y="559.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (25 samples, 0.02%)</title><rect x="98.8464%" y="533" width="0.0221%" height="15" fill="rgb(220,157,5)" fg:x="111644" fg:w="25"/><text x="99.0964%" y="543.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (22 samples, 0.02%)</title><rect x="98.8490%" y="517" width="0.0195%" height="15" fill="rgb(253,137,8)" fg:x="111647" fg:w="22"/><text x="99.0990%" y="527.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::try_lock (22 samples, 0.02%)</title><rect x="98.8490%" y="501" width="0.0195%" height="15" fill="rgb(217,137,51)" fg:x="111647" fg:w="22"/><text x="99.0990%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (22 samples, 0.02%)</title><rect x="98.8490%" y="485" width="0.0195%" height="15" fill="rgb(218,209,53)" fg:x="111647" fg:w="22"/><text x="99.0990%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (22 samples, 0.02%)</title><rect x="98.8490%" y="469" width="0.0195%" height="15" fill="rgb(249,137,25)" fg:x="111647" fg:w="22"/><text x="99.0990%" y="479.50"></text></g><g><title>async_io::reactor::ReactorLock::react (1,403 samples, 1.24%)</title><rect x="97.6272%" y="565" width="1.2422%" height="15" fill="rgb(239,155,26)" fg:x="110267" fg:w="1403"/><text x="97.8772%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (25 samples, 0.02%)</title><rect x="98.8712%" y="517" width="0.0221%" height="15" fill="rgb(227,85,46)" fg:x="111672" fg:w="25"/><text x="99.1212%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_store (25 samples, 0.02%)</title><rect x="98.8712%" y="501" width="0.0221%" height="15" fill="rgb(251,107,43)" fg:x="111672" fg:w="25"/><text x="99.1212%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_io::driver::CallOnDrop&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (31 samples, 0.03%)</title><rect x="98.8694%" y="565" width="0.0274%" height="15" fill="rgb(234,170,33)" fg:x="111670" fg:w="31"/><text x="99.1194%" y="575.50"></text></g><g><title>&lt;async_io::driver::CallOnDrop&lt;F&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.03%)</title><rect x="98.8694%" y="549" width="0.0274%" height="15" fill="rgb(206,29,35)" fg:x="111670" fg:w="31"/><text x="99.1194%" y="559.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (31 samples, 0.03%)</title><rect x="98.8694%" y="533" width="0.0274%" height="15" fill="rgb(227,138,25)" fg:x="111670" fg:w="31"/><text x="99.1194%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (16 samples, 0.01%)</title><rect x="98.8995%" y="565" width="0.0142%" height="15" fill="rgb(249,131,35)" fg:x="111704" fg:w="16"/><text x="99.1495%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_store (16 samples, 0.01%)</title><rect x="98.8995%" y="549" width="0.0142%" height="15" fill="rgb(239,6,40)" fg:x="111704" fg:w="16"/><text x="99.1495%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;()&gt;&gt; (18 samples, 0.02%)</title><rect x="98.9260%" y="533" width="0.0159%" height="15" fill="rgb(246,136,47)" fg:x="111734" fg:w="18"/><text x="99.1760%" y="543.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.02%)</title><rect x="98.9260%" y="517" width="0.0159%" height="15" fill="rgb(253,58,26)" fg:x="111734" fg:w="18"/><text x="99.1760%" y="527.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (13 samples, 0.01%)</title><rect x="98.9305%" y="501" width="0.0115%" height="15" fill="rgb(237,141,10)" fg:x="111739" fg:w="13"/><text x="99.1805%" y="511.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (13 samples, 0.01%)</title><rect x="98.9305%" y="485" width="0.0115%" height="15" fill="rgb(234,156,12)" fg:x="111739" fg:w="13"/><text x="99.1805%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (12 samples, 0.01%)</title><rect x="98.9314%" y="469" width="0.0106%" height="15" fill="rgb(243,224,36)" fg:x="111740" fg:w="12"/><text x="99.1814%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_swap (12 samples, 0.01%)</title><rect x="98.9314%" y="453" width="0.0106%" height="15" fill="rgb(205,229,51)" fg:x="111740" fg:w="12"/><text x="99.1814%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (39 samples, 0.03%)</title><rect x="98.9420%" y="533" width="0.0345%" height="15" fill="rgb(223,189,4)" fg:x="111752" fg:w="39"/><text x="99.1920%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (39 samples, 0.03%)</title><rect x="98.9420%" y="517" width="0.0345%" height="15" fill="rgb(249,167,54)" fg:x="111752" fg:w="39"/><text x="99.1920%" y="527.50"></text></g><g><title>core::bool::&lt;impl bool&gt;::then (28 samples, 0.02%)</title><rect x="98.9809%" y="453" width="0.0248%" height="15" fill="rgb(218,34,28)" fg:x="111796" fg:w="28"/><text x="99.2309%" y="463.50"></text></g><g><title>std::sys::unix::futex::futex_wait (158 samples, 0.14%)</title><rect x="98.9792%" y="469" width="0.1399%" height="15" fill="rgb(232,109,42)" fg:x="111794" fg:w="158"/><text x="99.2292%" y="479.50"></text></g><g><title>syscall (127 samples, 0.11%)</title><rect x="99.0066%" y="453" width="0.1124%" height="15" fill="rgb(248,214,46)" fg:x="111825" fg:w="127"/><text x="99.2566%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (89 samples, 0.08%)</title><rect x="99.1191%" y="469" width="0.0788%" height="15" fill="rgb(244,216,40)" fg:x="111952" fg:w="89"/><text x="99.3691%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (89 samples, 0.08%)</title><rect x="99.1191%" y="453" width="0.0788%" height="15" fill="rgb(231,226,31)" fg:x="111952" fg:w="89"/><text x="99.3691%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (89 samples, 0.08%)</title><rect x="99.1191%" y="437" width="0.0788%" height="15" fill="rgb(238,38,43)" fg:x="111952" fg:w="89"/><text x="99.3691%" y="447.50"></text></g><g><title>std::sync::condvar::Condvar::wait (261 samples, 0.23%)</title><rect x="98.9765%" y="533" width="0.2311%" height="15" fill="rgb(208,88,43)" fg:x="111791" fg:w="261"/><text x="99.2265%" y="543.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (260 samples, 0.23%)</title><rect x="98.9774%" y="517" width="0.2302%" height="15" fill="rgb(205,136,37)" fg:x="111792" fg:w="260"/><text x="99.2274%" y="527.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait (260 samples, 0.23%)</title><rect x="98.9774%" y="501" width="0.2302%" height="15" fill="rgb(237,34,14)" fg:x="111792" fg:w="260"/><text x="99.2274%" y="511.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait_optional_timeout (260 samples, 0.23%)</title><rect x="98.9774%" y="485" width="0.2302%" height="15" fill="rgb(236,193,44)" fg:x="111792" fg:w="260"/><text x="99.2274%" y="495.50"></text></g><g><title>parking::Parker::park (340 samples, 0.30%)</title><rect x="98.9216%" y="565" width="0.3010%" height="15" fill="rgb(231,48,10)" fg:x="111729" fg:w="340"/><text x="99.1716%" y="575.50"></text></g><g><title>parking::Inner::park (339 samples, 0.30%)</title><rect x="98.9225%" y="549" width="0.3001%" height="15" fill="rgb(213,141,34)" fg:x="111730" fg:w="339"/><text x="99.1725%" y="559.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (17 samples, 0.02%)</title><rect x="99.2076%" y="533" width="0.0151%" height="15" fill="rgb(249,130,34)" fg:x="112052" fg:w="17"/><text x="99.4576%" y="543.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (12 samples, 0.01%)</title><rect x="99.2120%" y="517" width="0.0106%" height="15" fill="rgb(219,42,41)" fg:x="112057" fg:w="12"/><text x="99.4620%" y="527.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (12 samples, 0.01%)</title><rect x="99.2120%" y="501" width="0.0106%" height="15" fill="rgb(224,100,54)" fg:x="112057" fg:w="12"/><text x="99.4620%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (12 samples, 0.01%)</title><rect x="99.2120%" y="485" width="0.0106%" height="15" fill="rgb(229,200,27)" fg:x="112057" fg:w="12"/><text x="99.4620%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (12 samples, 0.01%)</title><rect x="99.2120%" y="469" width="0.0106%" height="15" fill="rgb(217,118,10)" fg:x="112057" fg:w="12"/><text x="99.4620%" y="479.50"></text></g><g><title>parking::Parker::park_timeout (261 samples, 0.23%)</title><rect x="99.2226%" y="565" width="0.2311%" height="15" fill="rgb(206,22,3)" fg:x="112069" fg:w="261"/><text x="99.4726%" y="575.50"></text></g><g><title>parking::Inner::park (228 samples, 0.20%)</title><rect x="99.2519%" y="549" width="0.2019%" height="15" fill="rgb(232,163,46)" fg:x="112102" fg:w="228"/><text x="99.5019%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (219 samples, 0.19%)</title><rect x="99.2598%" y="533" width="0.1939%" height="15" fill="rgb(206,95,13)" fg:x="112111" fg:w="219"/><text x="99.5098%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (219 samples, 0.19%)</title><rect x="99.2598%" y="517" width="0.1939%" height="15" fill="rgb(253,154,18)" fg:x="112111" fg:w="219"/><text x="99.5098%" y="527.50"></text></g><g><title>std::panic::catch_unwind (13,328 samples, 11.80%)</title><rect x="87.6880%" y="853" width="11.8002%" height="15" fill="rgb(219,32,23)" fg:x="99041" fg:w="13328"/><text x="87.9380%" y="863.50">std::panic::catch_..</text></g><g><title>std::panicking::try (13,328 samples, 11.80%)</title><rect x="87.6880%" y="837" width="11.8002%" height="15" fill="rgb(230,191,45)" fg:x="99041" fg:w="13328"/><text x="87.9380%" y="847.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (13,328 samples, 11.80%)</title><rect x="87.6880%" y="821" width="11.8002%" height="15" fill="rgb(229,64,36)" fg:x="99041" fg:w="13328"/><text x="87.9380%" y="831.50">std::panicking::tr..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (13,328 samples, 11.80%)</title><rect x="87.6880%" y="805" width="11.8002%" height="15" fill="rgb(205,129,25)" fg:x="99041" fg:w="13328"/><text x="87.9380%" y="815.50">&lt;core::panic::unwi..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (13,328 samples, 11.80%)</title><rect x="87.6880%" y="789" width="11.8002%" height="15" fill="rgb(254,112,7)" fg:x="99041" fg:w="13328"/><text x="87.9380%" y="799.50">std::thread::Build..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (13,328 samples, 11.80%)</title><rect x="87.6880%" y="773" width="11.8002%" height="15" fill="rgb(226,53,48)" fg:x="99041" fg:w="13328"/><text x="87.9380%" y="783.50">std::sys_common::b..</text></g><g><title>core::ops::function::FnOnce::call_once (13,328 samples, 11.80%)</title><rect x="87.6880%" y="757" width="11.8002%" height="15" fill="rgb(214,153,38)" fg:x="99041" fg:w="13328"/><text x="87.9380%" y="767.50">core::ops::functio..</text></g><g><title>async_global_executor::threading::thread_main_loop (13,328 samples, 11.80%)</title><rect x="87.6880%" y="741" width="11.8002%" height="15" fill="rgb(243,101,7)" fg:x="99041" fg:w="13328"/><text x="87.9380%" y="751.50">async_global_execu..</text></g><g><title>std::panic::catch_unwind (13,310 samples, 11.78%)</title><rect x="87.7040%" y="725" width="11.7843%" height="15" fill="rgb(240,140,22)" fg:x="99059" fg:w="13310"/><text x="87.9540%" y="735.50">std::panic::catch..</text></g><g><title>std::panicking::try (13,310 samples, 11.78%)</title><rect x="87.7040%" y="709" width="11.7843%" height="15" fill="rgb(235,114,2)" fg:x="99059" fg:w="13310"/><text x="87.9540%" y="719.50">std::panicking::t..</text></g><g><title>std::panicking::try::do_call (13,310 samples, 11.78%)</title><rect x="87.7040%" y="693" width="11.7843%" height="15" fill="rgb(242,59,12)" fg:x="99059" fg:w="13310"/><text x="87.9540%" y="703.50">std::panicking::t..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (13,310 samples, 11.78%)</title><rect x="87.7040%" y="677" width="11.7843%" height="15" fill="rgb(252,134,9)" fg:x="99059" fg:w="13310"/><text x="87.9540%" y="687.50">async_global_exec..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (13,310 samples, 11.78%)</title><rect x="87.7040%" y="661" width="11.7843%" height="15" fill="rgb(236,4,44)" fg:x="99059" fg:w="13310"/><text x="87.9540%" y="671.50">std::thread::loca..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (13,310 samples, 11.78%)</title><rect x="87.7040%" y="645" width="11.7843%" height="15" fill="rgb(254,172,41)" fg:x="99059" fg:w="13310"/><text x="87.9540%" y="655.50">std::thread::loca..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (13,310 samples, 11.78%)</title><rect x="87.7040%" y="629" width="11.7843%" height="15" fill="rgb(244,63,20)" fg:x="99059" fg:w="13310"/><text x="87.9540%" y="639.50">async_global_exec..</text></g><g><title>async_global_executor::reactor::block_on (13,310 samples, 11.78%)</title><rect x="87.7040%" y="613" width="11.7843%" height="15" fill="rgb(250,73,31)" fg:x="99059" fg:w="13310"/><text x="87.9540%" y="623.50">async_global_exec..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (13,309 samples, 11.78%)</title><rect x="87.7049%" y="597" width="11.7834%" height="15" fill="rgb(241,38,36)" fg:x="99060" fg:w="13309"/><text x="87.9549%" y="607.50">async_global_exec..</text></g><g><title>async_io::driver::block_on (13,309 samples, 11.78%)</title><rect x="87.7049%" y="581" width="11.7834%" height="15" fill="rgb(245,211,2)" fg:x="99060" fg:w="13309"/><text x="87.9549%" y="591.50">async_io::driver:..</text></g><g><title>std::time::Instant::now (28 samples, 0.02%)</title><rect x="99.4635%" y="565" width="0.0248%" height="15" fill="rgb(206,120,28)" fg:x="112341" fg:w="28"/><text x="99.7135%" y="575.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (28 samples, 0.02%)</title><rect x="99.4635%" y="549" width="0.0248%" height="15" fill="rgb(211,59,34)" fg:x="112341" fg:w="28"/><text x="99.7135%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (28 samples, 0.02%)</title><rect x="99.4635%" y="533" width="0.0248%" height="15" fill="rgb(233,168,5)" fg:x="112341" fg:w="28"/><text x="99.7135%" y="543.50"></text></g><g><title>__clock_gettime (23 samples, 0.02%)</title><rect x="99.4679%" y="517" width="0.0204%" height="15" fill="rgb(234,33,13)" fg:x="112346" fg:w="23"/><text x="99.7179%" y="527.50"></text></g><g><title>__vdso_clock_gettime (21 samples, 0.02%)</title><rect x="99.4697%" y="501" width="0.0186%" height="15" fill="rgb(231,150,26)" fg:x="112348" fg:w="21"/><text x="99.7197%" y="511.50"></text></g><g><title>[[vdso]] (18 samples, 0.02%)</title><rect x="99.4723%" y="485" width="0.0159%" height="15" fill="rgb(217,191,4)" fg:x="112351" fg:w="18"/><text x="99.7223%" y="495.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (13,333 samples, 11.80%)</title><rect x="87.6880%" y="917" width="11.8047%" height="15" fill="rgb(246,198,38)" fg:x="99041" fg:w="13333"/><text x="87.9380%" y="927.50">&lt;alloc::boxed::Box..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (13,333 samples, 11.80%)</title><rect x="87.6880%" y="901" width="11.8047%" height="15" fill="rgb(245,64,37)" fg:x="99041" fg:w="13333"/><text x="87.9380%" y="911.50">&lt;alloc::boxed::Box..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (13,333 samples, 11.80%)</title><rect x="87.6880%" y="885" width="11.8047%" height="15" fill="rgb(250,30,36)" fg:x="99041" fg:w="13333"/><text x="87.9380%" y="895.50">core::ops::functio..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (13,333 samples, 11.80%)</title><rect x="87.6880%" y="869" width="11.8047%" height="15" fill="rgb(217,86,53)" fg:x="99041" fg:w="13333"/><text x="87.9380%" y="879.50">std::thread::Build..</text></g><g><title>clone (13,359 samples, 11.83%)</title><rect x="87.6659%" y="965" width="11.8277%" height="15" fill="rgb(228,157,16)" fg:x="99016" fg:w="13359"/><text x="87.9159%" y="975.50">clone</text></g><g><title>start_thread (13,337 samples, 11.81%)</title><rect x="87.6854%" y="949" width="11.8082%" height="15" fill="rgb(217,59,31)" fg:x="99038" fg:w="13337"/><text x="87.9354%" y="959.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (13,334 samples, 11.81%)</title><rect x="87.6880%" y="933" width="11.8055%" height="15" fill="rgb(237,138,41)" fg:x="99041" fg:w="13334"/><text x="87.9380%" y="943.50">std::sys::unix::th..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (154 samples, 0.14%)</title><rect x="99.5485%" y="965" width="0.1363%" height="15" fill="rgb(227,91,49)" fg:x="112437" fg:w="154"/><text x="99.7985%" y="975.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (19 samples, 0.02%)</title><rect x="99.6848%" y="965" width="0.0168%" height="15" fill="rgb(247,21,44)" fg:x="112591" fg:w="19"/><text x="99.9348%" y="975.50"></text></g><g><title>async-std/runti (112,577 samples, 99.67%)</title><rect x="0.0310%" y="981" width="99.6724%" height="15" fill="rgb(219,210,51)" fg:x="35" fg:w="112577"/><text x="0.2810%" y="991.50">async-std/runti</text></g><g><title>std::sys::unix::futex::futex_wait (48 samples, 0.04%)</title><rect x="99.7246%" y="645" width="0.0425%" height="15" fill="rgb(209,140,6)" fg:x="112636" fg:w="48"/><text x="99.9746%" y="655.50"></text></g><g><title>syscall (48 samples, 0.04%)</title><rect x="99.7246%" y="629" width="0.0425%" height="15" fill="rgb(221,188,24)" fg:x="112636" fg:w="48"/><text x="99.9746%" y="639.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (54 samples, 0.05%)</title><rect x="99.7238%" y="725" width="0.0478%" height="15" fill="rgb(232,154,20)" fg:x="112635" fg:w="54"/><text x="99.9738%" y="735.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (54 samples, 0.05%)</title><rect x="99.7238%" y="709" width="0.0478%" height="15" fill="rgb(244,137,50)" fg:x="112635" fg:w="54"/><text x="99.9738%" y="719.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (53 samples, 0.05%)</title><rect x="99.7246%" y="693" width="0.0469%" height="15" fill="rgb(225,185,43)" fg:x="112636" fg:w="53"/><text x="99.9746%" y="703.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (53 samples, 0.05%)</title><rect x="99.7246%" y="677" width="0.0469%" height="15" fill="rgb(213,205,38)" fg:x="112636" fg:w="53"/><text x="99.9746%" y="687.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (53 samples, 0.05%)</title><rect x="99.7246%" y="661" width="0.0469%" height="15" fill="rgb(236,73,12)" fg:x="112636" fg:w="53"/><text x="99.9746%" y="671.50"></text></g><g><title>tokio-runtime-w (62 samples, 0.05%)</title><rect x="99.7220%" y="981" width="0.0549%" height="15" fill="rgb(235,219,13)" fg:x="112633" fg:w="62"/><text x="99.9720%" y="991.50"></text></g><g><title>clone (61 samples, 0.05%)</title><rect x="99.7229%" y="965" width="0.0540%" height="15" fill="rgb(218,59,36)" fg:x="112634" fg:w="61"/><text x="99.9729%" y="975.50"></text></g><g><title>start_thread (61 samples, 0.05%)</title><rect x="99.7229%" y="949" width="0.0540%" height="15" fill="rgb(205,110,39)" fg:x="112634" fg:w="61"/><text x="99.9729%" y="959.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (61 samples, 0.05%)</title><rect x="99.7229%" y="933" width="0.0540%" height="15" fill="rgb(218,206,42)" fg:x="112634" fg:w="61"/><text x="99.9729%" y="943.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (61 samples, 0.05%)</title><rect x="99.7229%" y="917" width="0.0540%" height="15" fill="rgb(248,125,24)" fg:x="112634" fg:w="61"/><text x="99.9729%" y="927.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (61 samples, 0.05%)</title><rect x="99.7229%" y="901" width="0.0540%" height="15" fill="rgb(242,28,27)" fg:x="112634" fg:w="61"/><text x="99.9729%" y="911.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (61 samples, 0.05%)</title><rect x="99.7229%" y="885" width="0.0540%" height="15" fill="rgb(216,228,15)" fg:x="112634" fg:w="61"/><text x="99.9729%" y="895.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (61 samples, 0.05%)</title><rect x="99.7229%" y="869" width="0.0540%" height="15" fill="rgb(235,116,46)" fg:x="112634" fg:w="61"/><text x="99.9729%" y="879.50"></text></g><g><title>std::panic::catch_unwind (61 samples, 0.05%)</title><rect x="99.7229%" y="853" width="0.0540%" height="15" fill="rgb(224,18,32)" fg:x="112634" fg:w="61"/><text x="99.9729%" y="863.50"></text></g><g><title>std::panicking::try (61 samples, 0.05%)</title><rect x="99.7229%" y="837" width="0.0540%" height="15" fill="rgb(252,5,12)" fg:x="112634" fg:w="61"/><text x="99.9729%" y="847.50"></text></g><g><title>std::panicking::try::do_call (61 samples, 0.05%)</title><rect x="99.7229%" y="821" width="0.0540%" height="15" fill="rgb(251,36,5)" fg:x="112634" fg:w="61"/><text x="99.9729%" y="831.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (61 samples, 0.05%)</title><rect x="99.7229%" y="805" width="0.0540%" height="15" fill="rgb(217,53,14)" fg:x="112634" fg:w="61"/><text x="99.9729%" y="815.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (61 samples, 0.05%)</title><rect x="99.7229%" y="789" width="0.0540%" height="15" fill="rgb(215,86,45)" fg:x="112634" fg:w="61"/><text x="99.9729%" y="799.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (61 samples, 0.05%)</title><rect x="99.7229%" y="773" width="0.0540%" height="15" fill="rgb(242,169,11)" fg:x="112634" fg:w="61"/><text x="99.9729%" y="783.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (61 samples, 0.05%)</title><rect x="99.7229%" y="757" width="0.0540%" height="15" fill="rgb(211,213,45)" fg:x="112634" fg:w="61"/><text x="99.9729%" y="767.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (61 samples, 0.05%)</title><rect x="99.7229%" y="741" width="0.0540%" height="15" fill="rgb(205,88,11)" fg:x="112634" fg:w="61"/><text x="99.9729%" y="751.50"></text></g><g><title>[ld-2.31.so] (14 samples, 0.01%)</title><rect x="99.7813%" y="965" width="0.0124%" height="15" fill="rgb(252,69,26)" fg:x="112700" fg:w="14"/><text x="100.0313%" y="975.50"></text></g><g><title>all (112,947 samples, 100%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(246,123,37)" fg:x="0" fg:w="112947"/><text x="0.2500%" y="1007.50"></text></g><g><title>tremor-main (252 samples, 0.22%)</title><rect x="99.7769%" y="981" width="0.2231%" height="15" fill="rgb(212,205,5)" fg:x="112695" fg:w="252"/><text x="100.0269%" y="991.50"></text></g><g><title>clone (222 samples, 0.20%)</title><rect x="99.8034%" y="965" width="0.1966%" height="15" fill="rgb(253,148,0)" fg:x="112725" fg:w="222"/><text x="100.0534%" y="975.50"></text></g><g><title>start_thread (38 samples, 0.03%)</title><rect x="99.9664%" y="949" width="0.0336%" height="15" fill="rgb(239,22,4)" fg:x="112909" fg:w="38"/><text x="100.2164%" y="959.50"></text></g></svg></svg>