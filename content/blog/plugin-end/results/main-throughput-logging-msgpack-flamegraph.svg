<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1046" onload="init(evt)" viewBox="0 0 1200 1046" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1046" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1029.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1029.00"> </text><svg id="frames" x="10" width="1180" total_samples="113175"><g><title>std::sys::unix::futex::futex_wait (69 samples, 0.06%)</title><rect x="0.0071%" y="629" width="0.0610%" height="15" fill="rgb(227,0,7)" fg:x="8" fg:w="69"/><text x="0.2571%" y="639.50"></text></g><g><title>syscall (60 samples, 0.05%)</title><rect x="0.0150%" y="613" width="0.0530%" height="15" fill="rgb(217,0,24)" fg:x="17" fg:w="60"/><text x="0.2650%" y="623.50"></text></g><g><title>async-io (80 samples, 0.07%)</title><rect x="0.0000%" y="981" width="0.0707%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="80"/><text x="0.2500%" y="991.50"></text></g><g><title>clone (79 samples, 0.07%)</title><rect x="0.0009%" y="965" width="0.0698%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="79"/><text x="0.2509%" y="975.50"></text></g><g><title>start_thread (79 samples, 0.07%)</title><rect x="0.0009%" y="949" width="0.0698%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="79"/><text x="0.2509%" y="959.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (79 samples, 0.07%)</title><rect x="0.0009%" y="933" width="0.0698%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="79"/><text x="0.2509%" y="943.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (79 samples, 0.07%)</title><rect x="0.0009%" y="917" width="0.0698%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="79"/><text x="0.2509%" y="927.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (79 samples, 0.07%)</title><rect x="0.0009%" y="901" width="0.0698%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="79"/><text x="0.2509%" y="911.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (79 samples, 0.07%)</title><rect x="0.0009%" y="885" width="0.0698%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="79"/><text x="0.2509%" y="895.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (79 samples, 0.07%)</title><rect x="0.0009%" y="869" width="0.0698%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="79"/><text x="0.2509%" y="879.50"></text></g><g><title>std::panic::catch_unwind (79 samples, 0.07%)</title><rect x="0.0009%" y="853" width="0.0698%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="79"/><text x="0.2509%" y="863.50"></text></g><g><title>std::panicking::try (79 samples, 0.07%)</title><rect x="0.0009%" y="837" width="0.0698%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="79"/><text x="0.2509%" y="847.50"></text></g><g><title>std::panicking::try::do_call (79 samples, 0.07%)</title><rect x="0.0009%" y="821" width="0.0698%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="79"/><text x="0.2509%" y="831.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (79 samples, 0.07%)</title><rect x="0.0009%" y="805" width="0.0698%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="79"/><text x="0.2509%" y="815.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (79 samples, 0.07%)</title><rect x="0.0009%" y="789" width="0.0698%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="79"/><text x="0.2509%" y="799.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (79 samples, 0.07%)</title><rect x="0.0009%" y="773" width="0.0698%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="79"/><text x="0.2509%" y="783.50"></text></g><g><title>async_io::driver::UNPARKER::{{closure}}::{{closure}} (79 samples, 0.07%)</title><rect x="0.0009%" y="757" width="0.0698%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="79"/><text x="0.2509%" y="767.50"></text></g><g><title>async_io::driver::main_loop (79 samples, 0.07%)</title><rect x="0.0009%" y="741" width="0.0698%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="79"/><text x="0.2509%" y="751.50"></text></g><g><title>parking::Parker::park_timeout (76 samples, 0.07%)</title><rect x="0.0035%" y="725" width="0.0672%" height="15" fill="rgb(221,200,47)" fg:x="4" fg:w="76"/><text x="0.2535%" y="735.50"></text></g><g><title>parking::Inner::park (76 samples, 0.07%)</title><rect x="0.0035%" y="709" width="0.0672%" height="15" fill="rgb(226,26,5)" fg:x="4" fg:w="76"/><text x="0.2535%" y="719.50"></text></g><g><title>std::sync::condvar::Condvar::wait_timeout (73 samples, 0.06%)</title><rect x="0.0062%" y="693" width="0.0645%" height="15" fill="rgb(249,33,26)" fg:x="7" fg:w="73"/><text x="0.2562%" y="703.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait_timeout (73 samples, 0.06%)</title><rect x="0.0062%" y="677" width="0.0645%" height="15" fill="rgb(235,183,28)" fg:x="7" fg:w="73"/><text x="0.2562%" y="687.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait_timeout (73 samples, 0.06%)</title><rect x="0.0062%" y="661" width="0.0645%" height="15" fill="rgb(221,5,38)" fg:x="7" fg:w="73"/><text x="0.2562%" y="671.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait_optional_timeout (73 samples, 0.06%)</title><rect x="0.0062%" y="645" width="0.0645%" height="15" fill="rgb(247,18,42)" fg:x="7" fg:w="73"/><text x="0.2562%" y="655.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (28 samples, 0.02%)</title><rect x="0.0848%" y="965" width="0.0247%" height="15" fill="rgb(241,131,45)" fg:x="96" fg:w="28"/><text x="0.3348%" y="975.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (12 samples, 0.01%)</title><rect x="0.0990%" y="949" width="0.0106%" height="15" fill="rgb(249,31,29)" fg:x="112" fg:w="12"/><text x="0.3490%" y="959.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::clone::Clone&gt;::clone (12 samples, 0.01%)</title><rect x="0.0990%" y="933" width="0.0106%" height="15" fill="rgb(225,111,53)" fg:x="112" fg:w="12"/><text x="0.3490%" y="943.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (12 samples, 0.01%)</title><rect x="0.0990%" y="917" width="0.0106%" height="15" fill="rgb(238,160,17)" fg:x="112" fg:w="12"/><text x="0.3490%" y="927.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (12 samples, 0.01%)</title><rect x="0.0990%" y="901" width="0.0106%" height="15" fill="rgb(214,148,48)" fg:x="112" fg:w="12"/><text x="0.3490%" y="911.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (12 samples, 0.01%)</title><rect x="0.0990%" y="885" width="0.0106%" height="15" fill="rgb(232,36,49)" fg:x="112" fg:w="12"/><text x="0.3490%" y="895.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (12 samples, 0.01%)</title><rect x="0.0990%" y="869" width="0.0106%" height="15" fill="rgb(209,103,24)" fg:x="112" fg:w="12"/><text x="0.3490%" y="879.50"></text></g><g><title>alloc::slice::hack::to_vec (12 samples, 0.01%)</title><rect x="0.0990%" y="853" width="0.0106%" height="15" fill="rgb(229,88,8)" fg:x="112" fg:w="12"/><text x="0.3490%" y="863.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (12 samples, 0.01%)</title><rect x="0.0990%" y="837" width="0.0106%" height="15" fill="rgb(213,181,19)" fg:x="112" fg:w="12"/><text x="0.3490%" y="847.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (15 samples, 0.01%)</title><rect x="0.1414%" y="965" width="0.0133%" height="15" fill="rgb(254,191,54)" fg:x="160" fg:w="15"/><text x="0.3914%" y="975.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_key (49 samples, 0.04%)</title><rect x="0.3967%" y="917" width="0.0433%" height="15" fill="rgb(241,83,37)" fg:x="449" fg:w="49"/><text x="0.6467%" y="927.50"></text></g><g><title>serde::de::MapAccess::next_key (49 samples, 0.04%)</title><rect x="0.3967%" y="901" width="0.0433%" height="15" fill="rgb(233,36,39)" fg:x="449" fg:w="49"/><text x="0.6467%" y="911.50"></text></g><g><title>&lt;rmp_serde::decode::MapAccess&lt;R,C&gt; as serde::de::MapAccess&gt;::next_key_seed (49 samples, 0.04%)</title><rect x="0.3967%" y="885" width="0.0433%" height="15" fill="rgb(226,3,54)" fg:x="449" fg:w="49"/><text x="0.6467%" y="895.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (49 samples, 0.04%)</title><rect x="0.3967%" y="869" width="0.0433%" height="15" fill="rgb(245,192,40)" fg:x="449" fg:w="49"/><text x="0.6467%" y="879.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for &amp;str&gt;::deserialize (49 samples, 0.04%)</title><rect x="0.3967%" y="853" width="0.0433%" height="15" fill="rgb(238,167,29)" fg:x="449" fg:w="49"/><text x="0.6467%" y="863.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_str (49 samples, 0.04%)</title><rect x="0.3967%" y="837" width="0.0433%" height="15" fill="rgb(232,182,51)" fg:x="449" fg:w="49"/><text x="0.6467%" y="847.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_value (51 samples, 0.05%)</title><rect x="0.4400%" y="917" width="0.0451%" height="15" fill="rgb(231,60,39)" fg:x="498" fg:w="51"/><text x="0.6900%" y="927.50"></text></g><g><title>serde::de::MapAccess::next_value (51 samples, 0.05%)</title><rect x="0.4400%" y="901" width="0.0451%" height="15" fill="rgb(208,69,12)" fg:x="498" fg:w="51"/><text x="0.6900%" y="911.50"></text></g><g><title>&lt;rmp_serde::decode::MapAccess&lt;R,C&gt; as serde::de::MapAccess&gt;::next_value_seed (51 samples, 0.05%)</title><rect x="0.4400%" y="885" width="0.0451%" height="15" fill="rgb(235,93,37)" fg:x="498" fg:w="51"/><text x="0.6900%" y="895.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (51 samples, 0.05%)</title><rect x="0.4400%" y="869" width="0.0451%" height="15" fill="rgb(213,116,39)" fg:x="498" fg:w="51"/><text x="0.6900%" y="879.50"></text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (51 samples, 0.05%)</title><rect x="0.4400%" y="853" width="0.0451%" height="15" fill="rgb(222,207,29)" fg:x="498" fg:w="51"/><text x="0.6900%" y="863.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_map (154 samples, 0.14%)</title><rect x="0.3587%" y="933" width="0.1361%" height="15" fill="rgb(206,96,30)" fg:x="406" fg:w="154"/><text x="0.6087%" y="943.50"></text></g><g><title>&lt;&amp;mut A as serde::de::SeqAccess&gt;::next_element (50 samples, 0.04%)</title><rect x="0.4948%" y="917" width="0.0442%" height="15" fill="rgb(218,138,4)" fg:x="560" fg:w="50"/><text x="0.7448%" y="927.50"></text></g><g><title>serde::de::SeqAccess::next_element (50 samples, 0.04%)</title><rect x="0.4948%" y="901" width="0.0442%" height="15" fill="rgb(250,191,14)" fg:x="560" fg:w="50"/><text x="0.7448%" y="911.50"></text></g><g><title>&lt;rmp_serde::decode::SeqAccess&lt;R,C&gt; as serde::de::SeqAccess&gt;::next_element_seed (50 samples, 0.04%)</title><rect x="0.4948%" y="885" width="0.0442%" height="15" fill="rgb(239,60,40)" fg:x="560" fg:w="50"/><text x="0.7448%" y="895.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (50 samples, 0.04%)</title><rect x="0.4948%" y="869" width="0.0442%" height="15" fill="rgb(206,27,48)" fg:x="560" fg:w="50"/><text x="0.7448%" y="879.50"></text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (50 samples, 0.04%)</title><rect x="0.4948%" y="853" width="0.0442%" height="15" fill="rgb(225,35,8)" fg:x="560" fg:w="50"/><text x="0.7448%" y="863.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_seq (61 samples, 0.05%)</title><rect x="0.4948%" y="933" width="0.0539%" height="15" fill="rgb(250,213,24)" fg:x="560" fg:w="61"/><text x="0.7448%" y="943.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (506 samples, 0.45%)</title><rect x="0.1635%" y="949" width="0.4471%" height="15" fill="rgb(247,123,22)" fg:x="185" fg:w="506"/><text x="0.4135%" y="959.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::read_str_data (70 samples, 0.06%)</title><rect x="0.5487%" y="933" width="0.0619%" height="15" fill="rgb(231,138,38)" fg:x="621" fg:w="70"/><text x="0.7987%" y="943.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (16 samples, 0.01%)</title><rect x="0.6106%" y="949" width="0.0141%" height="15" fill="rgb(231,145,46)" fg:x="691" fg:w="16"/><text x="0.8606%" y="959.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (12 samples, 0.01%)</title><rect x="0.6291%" y="949" width="0.0106%" height="15" fill="rgb(251,118,11)" fg:x="712" fg:w="12"/><text x="0.8791%" y="959.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.02%)</title><rect x="0.6397%" y="949" width="0.0177%" height="15" fill="rgb(217,147,25)" fg:x="724" fg:w="20"/><text x="0.8897%" y="959.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="0.6618%" y="949" width="0.0115%" height="15" fill="rgb(247,81,37)" fg:x="749" fg:w="13"/><text x="0.9118%" y="959.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (46 samples, 0.04%)</title><rect x="0.7007%" y="949" width="0.0406%" height="15" fill="rgb(209,12,38)" fg:x="793" fg:w="46"/><text x="0.9507%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event),alloc::alloc::Global&gt;&gt; (14 samples, 0.01%)</title><rect x="0.7290%" y="933" width="0.0124%" height="15" fill="rgb(227,1,9)" fg:x="825" fg:w="14"/><text x="0.9790%" y="943.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="0.7290%" y="917" width="0.0124%" height="15" fill="rgb(248,47,43)" fg:x="825" fg:w="14"/><text x="0.9790%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (14 samples, 0.01%)</title><rect x="0.7290%" y="901" width="0.0124%" height="15" fill="rgb(221,10,30)" fg:x="825" fg:w="14"/><text x="0.9790%" y="911.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="0.7290%" y="885" width="0.0124%" height="15" fill="rgb(210,229,1)" fg:x="825" fg:w="14"/><text x="0.9790%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.01%)</title><rect x="0.7290%" y="869" width="0.0124%" height="15" fill="rgb(222,148,37)" fg:x="825" fg:w="14"/><text x="0.9790%" y="879.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.01%)</title><rect x="0.7290%" y="853" width="0.0124%" height="15" fill="rgb(234,67,33)" fg:x="825" fg:w="14"/><text x="0.9790%" y="863.50"></text></g><g><title>__rg_dealloc (14 samples, 0.01%)</title><rect x="0.7290%" y="837" width="0.0124%" height="15" fill="rgb(247,98,35)" fg:x="825" fg:w="14"/><text x="0.9790%" y="847.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (14 samples, 0.01%)</title><rect x="0.7290%" y="821" width="0.0124%" height="15" fill="rgb(247,138,52)" fg:x="825" fg:w="14"/><text x="0.9790%" y="831.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (16 samples, 0.01%)</title><rect x="0.8094%" y="933" width="0.0141%" height="15" fill="rgb(213,79,30)" fg:x="916" fg:w="16"/><text x="1.0594%" y="943.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (94 samples, 0.08%)</title><rect x="0.7413%" y="949" width="0.0831%" height="15" fill="rgb(246,177,23)" fg:x="839" fg:w="94"/><text x="0.9913%" y="959.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (19 samples, 0.02%)</title><rect x="0.8244%" y="949" width="0.0168%" height="15" fill="rgb(230,62,27)" fg:x="933" fg:w="19"/><text x="1.0744%" y="959.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (13 samples, 0.01%)</title><rect x="0.9021%" y="933" width="0.0115%" height="15" fill="rgb(216,154,8)" fg:x="1021" fg:w="13"/><text x="1.1521%" y="943.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (87 samples, 0.08%)</title><rect x="0.8412%" y="949" width="0.0769%" height="15" fill="rgb(244,35,45)" fg:x="952" fg:w="87"/><text x="1.0912%" y="959.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::Sink&gt;::on_event::{{closure}} (14 samples, 0.01%)</title><rect x="1.0532%" y="933" width="0.0124%" height="15" fill="rgb(251,115,12)" fg:x="1192" fg:w="14"/><text x="1.3032%" y="943.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::route_events::{{closure}} (40 samples, 0.04%)</title><rect x="1.0691%" y="933" width="0.0353%" height="15" fill="rgb(240,54,50)" fg:x="1210" fg:w="40"/><text x="1.3191%" y="943.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (255 samples, 0.23%)</title><rect x="0.9180%" y="949" width="0.2253%" height="15" fill="rgb(233,84,52)" fg:x="1039" fg:w="255"/><text x="1.1680%" y="959.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (36 samples, 0.03%)</title><rect x="1.1116%" y="933" width="0.0318%" height="15" fill="rgb(207,117,47)" fg:x="1258" fg:w="36"/><text x="1.3616%" y="943.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (67 samples, 0.06%)</title><rect x="1.1434%" y="949" width="0.0592%" height="15" fill="rgb(249,43,39)" fg:x="1294" fg:w="67"/><text x="1.3934%" y="959.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (24 samples, 0.02%)</title><rect x="1.2079%" y="949" width="0.0212%" height="15" fill="rgb(209,38,44)" fg:x="1367" fg:w="24"/><text x="1.4579%" y="959.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (18 samples, 0.02%)</title><rect x="1.2291%" y="949" width="0.0159%" height="15" fill="rgb(236,212,23)" fg:x="1391" fg:w="18"/><text x="1.4791%" y="959.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeMap&gt;::end (17 samples, 0.02%)</title><rect x="1.2450%" y="949" width="0.0150%" height="15" fill="rgb(242,79,21)" fg:x="1409" fg:w="17"/><text x="1.4950%" y="959.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeSeq&gt;::end (41 samples, 0.04%)</title><rect x="1.2600%" y="949" width="0.0362%" height="15" fill="rgb(211,96,35)" fg:x="1426" fg:w="41"/><text x="1.5100%" y="959.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (25 samples, 0.02%)</title><rect x="1.2962%" y="949" width="0.0221%" height="15" fill="rgb(253,215,40)" fg:x="1467" fg:w="25"/><text x="1.5462%" y="959.50"></text></g><g><title>&lt;tremor_pipeline::op::grouper::bucket::Grouper as tremor_pipeline::op::Operator&gt;::on_event (66 samples, 0.06%)</title><rect x="1.3183%" y="949" width="0.0583%" height="15" fill="rgb(211,81,21)" fg:x="1492" fg:w="66"/><text x="1.5683%" y="959.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (22 samples, 0.02%)</title><rect x="1.3766%" y="949" width="0.0194%" height="15" fill="rgb(208,190,38)" fg:x="1558" fg:w="22"/><text x="1.6266%" y="959.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (76 samples, 0.07%)</title><rect x="1.4137%" y="949" width="0.0672%" height="15" fill="rgb(235,213,38)" fg:x="1600" fg:w="76"/><text x="1.6637%" y="959.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (31 samples, 0.03%)</title><rect x="1.4535%" y="933" width="0.0274%" height="15" fill="rgb(237,122,38)" fg:x="1645" fg:w="31"/><text x="1.7035%" y="943.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (25 samples, 0.02%)</title><rect x="1.4588%" y="917" width="0.0221%" height="15" fill="rgb(244,218,35)" fg:x="1651" fg:w="25"/><text x="1.7088%" y="927.50"></text></g><g><title>[[vdso]] (14 samples, 0.01%)</title><rect x="1.4950%" y="949" width="0.0124%" height="15" fill="rgb(240,68,47)" fg:x="1692" fg:w="14"/><text x="1.7450%" y="959.50"></text></g><g><title>[libc-2.31.so] (173 samples, 0.15%)</title><rect x="1.5074%" y="949" width="0.1529%" height="15" fill="rgb(210,16,53)" fg:x="1706" fg:w="173"/><text x="1.7574%" y="959.50"></text></g><g><title>__clock_gettime (38 samples, 0.03%)</title><rect x="1.6603%" y="949" width="0.0336%" height="15" fill="rgb(235,124,12)" fg:x="1879" fg:w="38"/><text x="1.9103%" y="959.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (41 samples, 0.04%)</title><rect x="1.7036%" y="949" width="0.0362%" height="15" fill="rgb(224,169,11)" fg:x="1928" fg:w="41"/><text x="1.9536%" y="959.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (35 samples, 0.03%)</title><rect x="1.7089%" y="933" width="0.0309%" height="15" fill="rgb(250,166,2)" fg:x="1934" fg:w="35"/><text x="1.9589%" y="943.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (31 samples, 0.03%)</title><rect x="1.7124%" y="917" width="0.0274%" height="15" fill="rgb(242,216,29)" fg:x="1938" fg:w="31"/><text x="1.9624%" y="927.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (31 samples, 0.03%)</title><rect x="1.7124%" y="901" width="0.0274%" height="15" fill="rgb(230,116,27)" fg:x="1938" fg:w="31"/><text x="1.9624%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (17 samples, 0.02%)</title><rect x="1.7398%" y="949" width="0.0150%" height="15" fill="rgb(228,99,48)" fg:x="1969" fg:w="17"/><text x="1.9898%" y="959.50"></text></g><g><title>async_executor::steal (127 samples, 0.11%)</title><rect x="1.7946%" y="949" width="0.1122%" height="15" fill="rgb(253,11,6)" fg:x="2031" fg:w="127"/><text x="2.0446%" y="959.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (242 samples, 0.21%)</title><rect x="1.9262%" y="949" width="0.2138%" height="15" fill="rgb(247,143,39)" fg:x="2180" fg:w="242"/><text x="2.1762%" y="959.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (24 samples, 0.02%)</title><rect x="2.1400%" y="949" width="0.0212%" height="15" fill="rgb(236,97,10)" fg:x="2422" fg:w="24"/><text x="2.3900%" y="959.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (40 samples, 0.04%)</title><rect x="2.1613%" y="949" width="0.0353%" height="15" fill="rgb(233,208,19)" fg:x="2446" fg:w="40"/><text x="2.4113%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::Source&gt;::pull_data::{{closure}}&gt;&gt; (14 samples, 0.01%)</title><rect x="2.2099%" y="949" width="0.0124%" height="15" fill="rgb(216,164,2)" fg:x="2501" fg:w="14"/><text x="2.4599%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt;&gt; (18 samples, 0.02%)</title><rect x="2.2249%" y="949" width="0.0159%" height="15" fill="rgb(220,129,5)" fg:x="2518" fg:w="18"/><text x="2.4749%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt; (16 samples, 0.01%)</title><rect x="2.2266%" y="933" width="0.0141%" height="15" fill="rgb(242,17,10)" fg:x="2520" fg:w="16"/><text x="2.4766%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager&lt;tremor_runtime::connectors::impls::bench::Blaster&gt;::handle_data::{{closure}}&gt;&gt; (16 samples, 0.01%)</title><rect x="2.2408%" y="949" width="0.0141%" height="15" fill="rgb(242,107,0)" fg:x="2536" fg:w="16"/><text x="2.4908%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager&lt;tremor_runtime::connectors::impls::cb::CbSource&gt;::route_events::{{closure}}&gt;&gt; (15 samples, 0.01%)</title><rect x="2.2611%" y="949" width="0.0133%" height="15" fill="rgb(251,28,31)" fg:x="2559" fg:w="15"/><text x="2.5111%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::OutputTarget::send_event::{{closure}}&gt;&gt; (12 samples, 0.01%)</title><rect x="2.2744%" y="949" width="0.0106%" height="15" fill="rgb(233,223,10)" fg:x="2574" fg:w="12"/><text x="2.5244%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt;&gt; (15 samples, 0.01%)</title><rect x="2.2850%" y="949" width="0.0133%" height="15" fill="rgb(215,21,27)" fg:x="2586" fg:w="15"/><text x="2.5350%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::send_events::{{closure}}&gt;&gt; (12 samples, 0.01%)</title><rect x="2.2982%" y="949" width="0.0106%" height="15" fill="rgb(232,23,21)" fg:x="2601" fg:w="12"/><text x="2.5482%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (90 samples, 0.08%)</title><rect x="2.3150%" y="949" width="0.0795%" height="15" fill="rgb(244,5,23)" fg:x="2620" fg:w="90"/><text x="2.5650%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (23 samples, 0.02%)</title><rect x="2.4095%" y="933" width="0.0203%" height="15" fill="rgb(226,81,46)" fg:x="2727" fg:w="23"/><text x="2.6595%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (23 samples, 0.02%)</title><rect x="2.4095%" y="917" width="0.0203%" height="15" fill="rgb(247,70,30)" fg:x="2727" fg:w="23"/><text x="2.6595%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (23 samples, 0.02%)</title><rect x="2.4095%" y="901" width="0.0203%" height="15" fill="rgb(212,68,19)" fg:x="2727" fg:w="23"/><text x="2.6595%" y="911.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="2.4095%" y="885" width="0.0203%" height="15" fill="rgb(240,187,13)" fg:x="2727" fg:w="23"/><text x="2.6595%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (23 samples, 0.02%)</title><rect x="2.4095%" y="869" width="0.0203%" height="15" fill="rgb(223,113,26)" fg:x="2727" fg:w="23"/><text x="2.6595%" y="879.50"></text></g><g><title>alloc::alloc::dealloc (23 samples, 0.02%)</title><rect x="2.4095%" y="853" width="0.0203%" height="15" fill="rgb(206,192,2)" fg:x="2727" fg:w="23"/><text x="2.6595%" y="863.50"></text></g><g><title>__rg_dealloc (23 samples, 0.02%)</title><rect x="2.4095%" y="837" width="0.0203%" height="15" fill="rgb(241,108,4)" fg:x="2727" fg:w="23"/><text x="2.6595%" y="847.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (23 samples, 0.02%)</title><rect x="2.4095%" y="821" width="0.0203%" height="15" fill="rgb(247,173,49)" fg:x="2727" fg:w="23"/><text x="2.6595%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (37 samples, 0.03%)</title><rect x="2.4007%" y="949" width="0.0327%" height="15" fill="rgb(224,114,35)" fg:x="2717" fg:w="37"/><text x="2.6507%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (21 samples, 0.02%)</title><rect x="2.4334%" y="949" width="0.0186%" height="15" fill="rgb(245,159,27)" fg:x="2754" fg:w="21"/><text x="2.6834%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt;&gt; (39 samples, 0.03%)</title><rect x="2.4997%" y="933" width="0.0345%" height="15" fill="rgb(245,172,44)" fg:x="2829" fg:w="39"/><text x="2.7497%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (39 samples, 0.03%)</title><rect x="2.4997%" y="917" width="0.0345%" height="15" fill="rgb(236,23,11)" fg:x="2829" fg:w="39"/><text x="2.7497%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (35 samples, 0.03%)</title><rect x="2.5341%" y="933" width="0.0309%" height="15" fill="rgb(205,117,38)" fg:x="2868" fg:w="35"/><text x="2.7841%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (132 samples, 0.12%)</title><rect x="2.4520%" y="949" width="0.1166%" height="15" fill="rgb(237,72,25)" fg:x="2775" fg:w="132"/><text x="2.7020%" y="959.50"></text></g><g><title>core::str::converts::from_utf8 (58 samples, 0.05%)</title><rect x="2.5686%" y="949" width="0.0512%" height="15" fill="rgb(244,70,9)" fg:x="2907" fg:w="58"/><text x="2.8186%" y="959.50"></text></g><g><title>event_listener::Event::notify (103 samples, 0.09%)</title><rect x="2.6251%" y="949" width="0.0910%" height="15" fill="rgb(217,125,39)" fg:x="2971" fg:w="103"/><text x="2.8751%" y="959.50"></text></g><g><title>event_listener::full_fence (45 samples, 0.04%)</title><rect x="2.6764%" y="933" width="0.0398%" height="15" fill="rgb(235,36,10)" fg:x="3029" fg:w="45"/><text x="2.9264%" y="943.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (17 samples, 0.02%)</title><rect x="2.7250%" y="949" width="0.0150%" height="15" fill="rgb(251,123,47)" fg:x="3084" fg:w="17"/><text x="2.9750%" y="959.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::insert (148 samples, 0.13%)</title><rect x="2.7400%" y="949" width="0.1308%" height="15" fill="rgb(221,13,13)" fg:x="3101" fg:w="148"/><text x="2.9900%" y="959.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::insert (45 samples, 0.04%)</title><rect x="2.8310%" y="933" width="0.0398%" height="15" fill="rgb(238,131,9)" fg:x="3204" fg:w="45"/><text x="3.0810%" y="943.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;mut B&gt; for &amp;A&gt;::eq (45 samples, 0.04%)</title><rect x="2.8310%" y="917" width="0.0398%" height="15" fill="rgb(211,50,8)" fg:x="3204" fg:w="45"/><text x="3.0810%" y="927.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (45 samples, 0.04%)</title><rect x="2.8310%" y="901" width="0.0398%" height="15" fill="rgb(245,182,24)" fg:x="3204" fg:w="45"/><text x="3.0810%" y="911.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (45 samples, 0.04%)</title><rect x="2.8310%" y="885" width="0.0398%" height="15" fill="rgb(242,14,37)" fg:x="3204" fg:w="45"/><text x="3.0810%" y="895.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (45 samples, 0.04%)</title><rect x="2.8310%" y="869" width="0.0398%" height="15" fill="rgb(246,228,12)" fg:x="3204" fg:w="45"/><text x="3.0810%" y="879.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (45 samples, 0.04%)</title><rect x="2.8310%" y="853" width="0.0398%" height="15" fill="rgb(213,55,15)" fg:x="3204" fg:w="45"/><text x="3.0810%" y="863.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (45 samples, 0.04%)</title><rect x="2.8310%" y="837" width="0.0398%" height="15" fill="rgb(209,9,3)" fg:x="3204" fg:w="45"/><text x="3.0810%" y="847.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (45 samples, 0.04%)</title><rect x="2.8310%" y="821" width="0.0398%" height="15" fill="rgb(230,59,30)" fg:x="3204" fg:w="45"/><text x="3.0810%" y="831.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (27 samples, 0.02%)</title><rect x="2.8708%" y="949" width="0.0239%" height="15" fill="rgb(209,121,21)" fg:x="3249" fg:w="27"/><text x="3.1208%" y="959.50"></text></g><g><title>parking::Unparker::unpark (12 samples, 0.01%)</title><rect x="2.8999%" y="949" width="0.0106%" height="15" fill="rgb(220,109,13)" fg:x="3282" fg:w="12"/><text x="3.1499%" y="959.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (109 samples, 0.10%)</title><rect x="3.1624%" y="933" width="0.0963%" height="15" fill="rgb(232,18,1)" fg:x="3579" fg:w="109"/><text x="3.4124%" y="943.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (109 samples, 0.10%)</title><rect x="3.1624%" y="917" width="0.0963%" height="15" fill="rgb(215,41,42)" fg:x="3579" fg:w="109"/><text x="3.4124%" y="927.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (109 samples, 0.10%)</title><rect x="3.1624%" y="901" width="0.0963%" height="15" fill="rgb(224,123,36)" fg:x="3579" fg:w="109"/><text x="3.4124%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (109 samples, 0.10%)</title><rect x="3.1624%" y="885" width="0.0963%" height="15" fill="rgb(240,125,3)" fg:x="3579" fg:w="109"/><text x="3.4124%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (109 samples, 0.10%)</title><rect x="3.1624%" y="869" width="0.0963%" height="15" fill="rgb(205,98,50)" fg:x="3579" fg:w="109"/><text x="3.4124%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (109 samples, 0.10%)</title><rect x="3.1624%" y="853" width="0.0963%" height="15" fill="rgb(205,185,37)" fg:x="3579" fg:w="109"/><text x="3.4124%" y="863.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (102 samples, 0.09%)</title><rect x="3.1685%" y="837" width="0.0901%" height="15" fill="rgb(238,207,15)" fg:x="3586" fg:w="102"/><text x="3.4185%" y="847.50"></text></g><g><title>rmp::encode::str::write_str (454 samples, 0.40%)</title><rect x="2.9150%" y="949" width="0.4011%" height="15" fill="rgb(213,199,42)" fg:x="3299" fg:w="454"/><text x="3.1650%" y="959.50"></text></g><g><title>rmp::encode::str::write_str_len (65 samples, 0.06%)</title><rect x="3.2587%" y="933" width="0.0574%" height="15" fill="rgb(235,201,11)" fg:x="3688" fg:w="65"/><text x="3.5087%" y="943.50"></text></g><g><title>rmp::encode::uint::write_uint (163 samples, 0.14%)</title><rect x="3.3161%" y="949" width="0.1440%" height="15" fill="rgb(207,46,11)" fg:x="3753" fg:w="163"/><text x="3.5661%" y="959.50"></text></g><g><title>rmp::encode::uint::write_pfix (18 samples, 0.02%)</title><rect x="3.4442%" y="933" width="0.0159%" height="15" fill="rgb(241,35,35)" fg:x="3898" fg:w="18"/><text x="3.6942%" y="943.50"></text></g><g><title>rmp::encode::write_array_len (38 samples, 0.03%)</title><rect x="3.4601%" y="949" width="0.0336%" height="15" fill="rgb(243,32,47)" fg:x="3916" fg:w="38"/><text x="3.7101%" y="959.50"></text></g><g><title>rmp::encode::write_marker (335 samples, 0.30%)</title><rect x="3.4990%" y="949" width="0.2960%" height="15" fill="rgb(247,202,23)" fg:x="3960" fg:w="335"/><text x="3.7490%" y="959.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (185 samples, 0.16%)</title><rect x="3.7950%" y="949" width="0.1635%" height="15" fill="rgb(219,102,11)" fg:x="4295" fg:w="185"/><text x="4.0450%" y="959.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeMap&gt;::serialize_value (59 samples, 0.05%)</title><rect x="3.9063%" y="933" width="0.0521%" height="15" fill="rgb(243,110,44)" fg:x="4421" fg:w="59"/><text x="4.1563%" y="943.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeSeq&gt;::serialize_element (59 samples, 0.05%)</title><rect x="3.9063%" y="917" width="0.0521%" height="15" fill="rgb(222,74,54)" fg:x="4421" fg:w="59"/><text x="4.1563%" y="927.50"></text></g><g><title>sn_rust_alloc (97 samples, 0.09%)</title><rect x="3.9585%" y="949" width="0.0857%" height="15" fill="rgb(216,99,12)" fg:x="4480" fg:w="97"/><text x="4.2085%" y="959.50"></text></g><g><title>sn_rust_dealloc (55 samples, 0.05%)</title><rect x="4.0442%" y="949" width="0.0486%" height="15" fill="rgb(226,22,26)" fg:x="4577" fg:w="55"/><text x="4.2942%" y="959.50"></text></g><g><title>sn_rust_realloc (29 samples, 0.03%)</title><rect x="4.0928%" y="949" width="0.0256%" height="15" fill="rgb(217,163,10)" fg:x="4632" fg:w="29"/><text x="4.3428%" y="959.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (30 samples, 0.03%)</title><rect x="4.1184%" y="949" width="0.0265%" height="15" fill="rgb(213,25,53)" fg:x="4661" fg:w="30"/><text x="4.3684%" y="959.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (28 samples, 0.02%)</title><rect x="4.1449%" y="949" width="0.0247%" height="15" fill="rgb(252,105,26)" fg:x="4691" fg:w="28"/><text x="4.3949%" y="959.50"></text></g><g><title>std::sys::unix::futex::futex_wait (13 samples, 0.01%)</title><rect x="4.1705%" y="949" width="0.0115%" height="15" fill="rgb(220,39,43)" fg:x="4720" fg:w="13"/><text x="4.4205%" y="959.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (29 samples, 0.03%)</title><rect x="4.1873%" y="949" width="0.0256%" height="15" fill="rgb(229,68,48)" fg:x="4739" fg:w="29"/><text x="4.4373%" y="959.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (34 samples, 0.03%)</title><rect x="4.2129%" y="949" width="0.0300%" height="15" fill="rgb(252,8,32)" fg:x="4768" fg:w="34"/><text x="4.4629%" y="959.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (20 samples, 0.02%)</title><rect x="4.2253%" y="933" width="0.0177%" height="15" fill="rgb(223,20,43)" fg:x="4782" fg:w="20"/><text x="4.4753%" y="943.50"></text></g><g><title>tremor_common::time::nanotime (21 samples, 0.02%)</title><rect x="4.2501%" y="949" width="0.0186%" height="15" fill="rgb(229,81,49)" fg:x="4810" fg:w="21"/><text x="4.5001%" y="959.50"></text></g><g><title>std::time::SystemTime::now (13 samples, 0.01%)</title><rect x="4.2571%" y="933" width="0.0115%" height="15" fill="rgb(236,28,36)" fg:x="4818" fg:w="13"/><text x="4.5071%" y="943.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (13 samples, 0.01%)</title><rect x="4.2571%" y="917" width="0.0115%" height="15" fill="rgb(249,185,26)" fg:x="4818" fg:w="13"/><text x="4.5071%" y="927.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (13 samples, 0.01%)</title><rect x="4.2571%" y="901" width="0.0115%" height="15" fill="rgb(249,174,33)" fg:x="4818" fg:w="13"/><text x="4.5071%" y="911.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_input (19 samples, 0.02%)</title><rect x="4.2686%" y="949" width="0.0168%" height="15" fill="rgb(233,201,37)" fg:x="4831" fg:w="19"/><text x="4.5186%" y="959.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_output (13 samples, 0.01%)</title><rect x="4.2854%" y="949" width="0.0115%" height="15" fill="rgb(221,78,26)" fg:x="4850" fg:w="13"/><text x="4.5354%" y="959.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (16 samples, 0.01%)</title><rect x="4.3040%" y="949" width="0.0141%" height="15" fill="rgb(250,127,30)" fg:x="4871" fg:w="16"/><text x="4.5540%" y="959.50"></text></g><g><title>tremor_script::ast::Script::run (47 samples, 0.04%)</title><rect x="4.3402%" y="949" width="0.0415%" height="15" fill="rgb(230,49,44)" fg:x="4912" fg:w="47"/><text x="4.5902%" y="959.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (21 samples, 0.02%)</title><rect x="4.3817%" y="949" width="0.0186%" height="15" fill="rgb(229,67,23)" fg:x="4959" fg:w="21"/><text x="4.6317%" y="959.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (65 samples, 0.06%)</title><rect x="4.4003%" y="949" width="0.0574%" height="15" fill="rgb(249,83,47)" fg:x="4980" fg:w="65"/><text x="4.6503%" y="959.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (80 samples, 0.07%)</title><rect x="4.4577%" y="949" width="0.0707%" height="15" fill="rgb(215,43,3)" fg:x="5045" fg:w="80"/><text x="4.7077%" y="959.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (15 samples, 0.01%)</title><rect x="4.5284%" y="949" width="0.0133%" height="15" fill="rgb(238,154,13)" fg:x="5125" fg:w="15"/><text x="4.7784%" y="959.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (181 samples, 0.16%)</title><rect x="4.5416%" y="949" width="0.1599%" height="15" fill="rgb(219,56,2)" fg:x="5140" fg:w="181"/><text x="4.7916%" y="959.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (148 samples, 0.13%)</title><rect x="4.7016%" y="949" width="0.1308%" height="15" fill="rgb(233,0,4)" fg:x="5321" fg:w="148"/><text x="4.9516%" y="959.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::invoke2 (18 samples, 0.02%)</title><rect x="4.8323%" y="949" width="0.0159%" height="15" fill="rgb(235,30,7)" fg:x="5469" fg:w="18"/><text x="5.0823%" y="959.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (207 samples, 0.18%)</title><rect x="4.8482%" y="949" width="0.1829%" height="15" fill="rgb(250,79,13)" fg:x="5487" fg:w="207"/><text x="5.0982%" y="959.50"></text></g><g><title>tremor_script::interpreter::resolve (33 samples, 0.03%)</title><rect x="5.0020%" y="933" width="0.0292%" height="15" fill="rgb(211,146,34)" fg:x="5661" fg:w="33"/><text x="5.2520%" y="943.50"></text></g><g><title>tremor_script::interpreter::resolve_value (51 samples, 0.05%)</title><rect x="5.0311%" y="949" width="0.0451%" height="15" fill="rgb(228,22,38)" fg:x="5694" fg:w="51"/><text x="5.2811%" y="959.50"></text></g><g><title>tremor_script::interpreter::test_guard (35 samples, 0.03%)</title><rect x="5.0762%" y="949" width="0.0309%" height="15" fill="rgb(235,168,5)" fg:x="5745" fg:w="35"/><text x="5.3262%" y="959.50"></text></g><g><title>tremor_script::interpreter::test_predicate_expr (169 samples, 0.15%)</title><rect x="5.1071%" y="949" width="0.1493%" height="15" fill="rgb(221,155,16)" fg:x="5780" fg:w="169"/><text x="5.3571%" y="959.50"></text></g><g><title>tremor_script::interpreter::val_eq (65 samples, 0.06%)</title><rect x="5.2565%" y="949" width="0.0574%" height="15" fill="rgb(215,215,53)" fg:x="5949" fg:w="65"/><text x="5.5065%" y="959.50"></text></g><g><title>tremor_script::srs::EventPayload::try_new (17 samples, 0.02%)</title><rect x="5.3218%" y="949" width="0.0150%" height="15" fill="rgb(223,4,10)" fg:x="6023" fg:w="17"/><text x="5.5718%" y="959.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (76 samples, 0.07%)</title><rect x="5.6099%" y="917" width="0.0672%" height="15" fill="rgb(234,103,6)" fg:x="6349" fg:w="76"/><text x="5.8599%" y="927.50"></text></g><g><title>rmp::encode::write_marker (76 samples, 0.07%)</title><rect x="5.6099%" y="901" width="0.0672%" height="15" fill="rgb(227,97,0)" fg:x="6349" fg:w="76"/><text x="5.8599%" y="911.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_bool (80 samples, 0.07%)</title><rect x="5.6099%" y="933" width="0.0707%" height="15" fill="rgb(234,150,53)" fg:x="6349" fg:w="80"/><text x="5.8599%" y="943.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_str (44 samples, 0.04%)</title><rect x="5.6832%" y="933" width="0.0389%" height="15" fill="rgb(228,201,54)" fg:x="6432" fg:w="44"/><text x="5.9332%" y="943.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_u64 (34 samples, 0.03%)</title><rect x="5.7221%" y="933" width="0.0300%" height="15" fill="rgb(222,22,37)" fg:x="6476" fg:w="34"/><text x="5.9721%" y="943.50"></text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (520 samples, 0.46%)</title><rect x="5.3404%" y="949" width="0.4595%" height="15" fill="rgb(237,53,32)" fg:x="6044" fg:w="520"/><text x="5.5904%" y="959.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeSeq&gt;::serialize_element (54 samples, 0.05%)</title><rect x="5.7522%" y="933" width="0.0477%" height="15" fill="rgb(233,25,53)" fg:x="6510" fg:w="54"/><text x="6.0022%" y="943.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (17 samples, 0.02%)</title><rect x="5.8052%" y="949" width="0.0150%" height="15" fill="rgb(210,40,34)" fg:x="6570" fg:w="17"/><text x="6.0552%" y="959.50"></text></g><g><title>value_trait::ValueAccess::get (122 samples, 0.11%)</title><rect x="5.8255%" y="949" width="0.1078%" height="15" fill="rgb(241,220,44)" fg:x="6593" fg:w="122"/><text x="6.0755%" y="959.50"></text></g><g><title>[anon] (6,554 samples, 5.79%)</title><rect x="0.1635%" y="965" width="5.7910%" height="15" fill="rgb(235,28,35)" fg:x="185" fg:w="6554"/><text x="0.4135%" y="975.50">[anon]</text></g><g><title>window::TimeWindow::add_t (14 samples, 0.01%)</title><rect x="5.9421%" y="949" width="0.0124%" height="15" fill="rgb(210,56,17)" fg:x="6725" fg:w="14"/><text x="6.1921%" y="959.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (14 samples, 0.01%)</title><rect x="5.9775%" y="821" width="0.0124%" height="15" fill="rgb(224,130,29)" fg:x="6765" fg:w="14"/><text x="6.2275%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (14 samples, 0.01%)</title><rect x="5.9775%" y="805" width="0.0124%" height="15" fill="rgb(235,212,8)" fg:x="6765" fg:w="14"/><text x="6.2275%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (14 samples, 0.01%)</title><rect x="5.9775%" y="789" width="0.0124%" height="15" fill="rgb(223,33,50)" fg:x="6765" fg:w="14"/><text x="6.2275%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 0.01%)</title><rect x="5.9775%" y="773" width="0.0124%" height="15" fill="rgb(219,149,13)" fg:x="6765" fg:w="14"/><text x="6.2275%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.01%)</title><rect x="5.9775%" y="757" width="0.0124%" height="15" fill="rgb(250,156,29)" fg:x="6765" fg:w="14"/><text x="6.2275%" y="767.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.01%)</title><rect x="5.9775%" y="741" width="0.0124%" height="15" fill="rgb(216,193,19)" fg:x="6765" fg:w="14"/><text x="6.2275%" y="751.50"></text></g><g><title>__rg_alloc (14 samples, 0.01%)</title><rect x="5.9775%" y="725" width="0.0124%" height="15" fill="rgb(216,135,14)" fg:x="6765" fg:w="14"/><text x="6.2275%" y="735.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (14 samples, 0.01%)</title><rect x="5.9775%" y="709" width="0.0124%" height="15" fill="rgb(241,47,5)" fg:x="6765" fg:w="14"/><text x="6.2275%" y="719.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (20 samples, 0.02%)</title><rect x="5.9775%" y="917" width="0.0177%" height="15" fill="rgb(233,42,35)" fg:x="6765" fg:w="20"/><text x="6.2275%" y="927.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (20 samples, 0.02%)</title><rect x="5.9775%" y="901" width="0.0177%" height="15" fill="rgb(231,13,6)" fg:x="6765" fg:w="20"/><text x="6.2275%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (20 samples, 0.02%)</title><rect x="5.9775%" y="885" width="0.0177%" height="15" fill="rgb(207,181,40)" fg:x="6765" fg:w="20"/><text x="6.2275%" y="895.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (20 samples, 0.02%)</title><rect x="5.9775%" y="869" width="0.0177%" height="15" fill="rgb(254,173,49)" fg:x="6765" fg:w="20"/><text x="6.2275%" y="879.50"></text></g><g><title>alloc::slice::hack::to_vec (20 samples, 0.02%)</title><rect x="5.9775%" y="853" width="0.0177%" height="15" fill="rgb(221,1,38)" fg:x="6765" fg:w="20"/><text x="6.2275%" y="863.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (20 samples, 0.02%)</title><rect x="5.9775%" y="837" width="0.0177%" height="15" fill="rgb(206,124,46)" fg:x="6765" fg:w="20"/><text x="6.2275%" y="847.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (38 samples, 0.03%)</title><rect x="5.9722%" y="949" width="0.0336%" height="15" fill="rgb(249,21,11)" fg:x="6759" fg:w="38"/><text x="6.2222%" y="959.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::Source&gt;::pull_data::{{closure}} (32 samples, 0.03%)</title><rect x="5.9775%" y="933" width="0.0283%" height="15" fill="rgb(222,201,40)" fg:x="6765" fg:w="32"/><text x="6.2275%" y="943.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (14 samples, 0.01%)</title><rect x="6.0110%" y="949" width="0.0124%" height="15" fill="rgb(235,61,29)" fg:x="6803" fg:w="14"/><text x="6.2610%" y="959.50"></text></g><g><title>[libc-2.31.so] (119 samples, 0.11%)</title><rect x="5.9545%" y="965" width="0.1051%" height="15" fill="rgb(219,207,3)" fg:x="6739" fg:w="119"/><text x="6.2045%" y="975.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (46 samples, 0.04%)</title><rect x="6.0596%" y="949" width="0.0406%" height="15" fill="rgb(222,56,46)" fg:x="6858" fg:w="46"/><text x="6.3096%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tremor_value::value::Value]&gt; (53 samples, 0.05%)</title><rect x="6.1091%" y="949" width="0.0468%" height="15" fill="rgb(239,76,54)" fg:x="6914" fg:w="53"/><text x="6.3591%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (768 samples, 0.68%)</title><rect x="6.1560%" y="949" width="0.6786%" height="15" fill="rgb(231,124,27)" fg:x="6967" fg:w="768"/><text x="6.4060%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;tremor_value::value::Value&gt;&gt; (12 samples, 0.01%)</title><rect x="6.8239%" y="933" width="0.0106%" height="15" fill="rgb(249,195,6)" fg:x="7723" fg:w="12"/><text x="7.0739%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.01%)</title><rect x="6.8239%" y="917" width="0.0106%" height="15" fill="rgb(237,174,47)" fg:x="7723" fg:w="12"/><text x="7.0739%" y="927.50"></text></g><g><title>[main] (879 samples, 0.78%)</title><rect x="6.0596%" y="965" width="0.7767%" height="15" fill="rgb(206,201,31)" fg:x="6858" fg:w="879"/><text x="6.3096%" y="975.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (373 samples, 0.33%)</title><rect x="6.8363%" y="949" width="0.3296%" height="15" fill="rgb(231,57,52)" fg:x="7737" fg:w="373"/><text x="7.0863%" y="959.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::read_str_data (22 samples, 0.02%)</title><rect x="7.1465%" y="933" width="0.0194%" height="15" fill="rgb(248,177,22)" fg:x="8088" fg:w="22"/><text x="7.3965%" y="943.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="7.1774%" y="949" width="0.0115%" height="15" fill="rgb(215,211,37)" fg:x="8123" fg:w="13"/><text x="7.4274%" y="959.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (12 samples, 0.01%)</title><rect x="7.2233%" y="885" width="0.0106%" height="15" fill="rgb(241,128,51)" fg:x="8175" fg:w="12"/><text x="7.4733%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (12 samples, 0.01%)</title><rect x="7.2233%" y="869" width="0.0106%" height="15" fill="rgb(227,165,31)" fg:x="8175" fg:w="12"/><text x="7.4733%" y="879.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (12 samples, 0.01%)</title><rect x="7.2233%" y="853" width="0.0106%" height="15" fill="rgb(228,167,24)" fg:x="8175" fg:w="12"/><text x="7.4733%" y="863.50"></text></g><g><title>alloc::slice::hack::to_vec (12 samples, 0.01%)</title><rect x="7.2233%" y="837" width="0.0106%" height="15" fill="rgb(228,143,12)" fg:x="8175" fg:w="12"/><text x="7.4733%" y="847.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (12 samples, 0.01%)</title><rect x="7.2233%" y="821" width="0.0106%" height="15" fill="rgb(249,149,8)" fg:x="8175" fg:w="12"/><text x="7.4733%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (43 samples, 0.04%)</title><rect x="7.2021%" y="949" width="0.0380%" height="15" fill="rgb(243,35,44)" fg:x="8151" fg:w="43"/><text x="7.4521%" y="959.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (19 samples, 0.02%)</title><rect x="7.2233%" y="933" width="0.0168%" height="15" fill="rgb(246,89,9)" fg:x="8175" fg:w="19"/><text x="7.4733%" y="943.50"></text></g><g><title>alloc::slice::hack::to_vec (19 samples, 0.02%)</title><rect x="7.2233%" y="917" width="0.0168%" height="15" fill="rgb(233,213,13)" fg:x="8175" fg:w="19"/><text x="7.4733%" y="927.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (19 samples, 0.02%)</title><rect x="7.2233%" y="901" width="0.0168%" height="15" fill="rgb(233,141,41)" fg:x="8175" fg:w="19"/><text x="7.4733%" y="911.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="7.2419%" y="949" width="0.0133%" height="15" fill="rgb(239,167,4)" fg:x="8196" fg:w="15"/><text x="7.4919%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (169 samples, 0.15%)</title><rect x="7.3408%" y="469" width="0.1493%" height="15" fill="rgb(209,217,16)" fg:x="8308" fg:w="169"/><text x="7.5908%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (169 samples, 0.15%)</title><rect x="7.3408%" y="453" width="0.1493%" height="15" fill="rgb(219,88,35)" fg:x="8308" fg:w="169"/><text x="7.5908%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (278 samples, 0.25%)</title><rect x="7.4902%" y="469" width="0.2456%" height="15" fill="rgb(220,193,23)" fg:x="8477" fg:w="278"/><text x="7.7402%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_load (277 samples, 0.24%)</title><rect x="7.4911%" y="453" width="0.2448%" height="15" fill="rgb(230,90,52)" fg:x="8478" fg:w="277"/><text x="7.7411%" y="463.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (489 samples, 0.43%)</title><rect x="7.3082%" y="501" width="0.4321%" height="15" fill="rgb(252,106,19)" fg:x="8271" fg:w="489"/><text x="7.5582%" y="511.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (489 samples, 0.43%)</title><rect x="7.3082%" y="485" width="0.4321%" height="15" fill="rgb(206,74,20)" fg:x="8271" fg:w="489"/><text x="7.5582%" y="495.50"></text></g><g><title>event_listener::Inner::lock (15 samples, 0.01%)</title><rect x="7.7712%" y="485" width="0.0133%" height="15" fill="rgb(230,138,44)" fg:x="8795" fg:w="15"/><text x="8.0212%" y="495.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (14 samples, 0.01%)</title><rect x="7.7720%" y="469" width="0.0124%" height="15" fill="rgb(235,182,43)" fg:x="8796" fg:w="14"/><text x="8.0220%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (12 samples, 0.01%)</title><rect x="7.7738%" y="453" width="0.0106%" height="15" fill="rgb(242,16,51)" fg:x="8798" fg:w="12"/><text x="8.0238%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (12 samples, 0.01%)</title><rect x="7.7738%" y="437" width="0.0106%" height="15" fill="rgb(248,9,4)" fg:x="8798" fg:w="12"/><text x="8.0238%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (12 samples, 0.01%)</title><rect x="7.7738%" y="421" width="0.0106%" height="15" fill="rgb(210,31,22)" fg:x="8798" fg:w="12"/><text x="8.0238%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (12 samples, 0.01%)</title><rect x="7.7738%" y="405" width="0.0106%" height="15" fill="rgb(239,54,39)" fg:x="8798" fg:w="12"/><text x="8.0238%" y="415.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (897 samples, 0.79%)</title><rect x="7.3082%" y="517" width="0.7926%" height="15" fill="rgb(230,99,41)" fg:x="8271" fg:w="897"/><text x="7.5582%" y="527.50"></text></g><g><title>event_listener::Event::notify (408 samples, 0.36%)</title><rect x="7.7402%" y="501" width="0.3605%" height="15" fill="rgb(253,106,12)" fg:x="8760" fg:w="408"/><text x="7.9902%" y="511.50"></text></g><g><title>event_listener::full_fence (358 samples, 0.32%)</title><rect x="7.7844%" y="485" width="0.3163%" height="15" fill="rgb(213,46,41)" fg:x="8810" fg:w="358"/><text x="8.0344%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (356 samples, 0.31%)</title><rect x="7.7862%" y="469" width="0.3146%" height="15" fill="rgb(215,133,35)" fg:x="8812" fg:w="356"/><text x="8.0362%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (356 samples, 0.31%)</title><rect x="7.7862%" y="453" width="0.3146%" height="15" fill="rgb(213,28,5)" fg:x="8812" fg:w="356"/><text x="8.0362%" y="463.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (1,005 samples, 0.89%)</title><rect x="7.3082%" y="933" width="0.8880%" height="15" fill="rgb(215,77,49)" fg:x="8271" fg:w="1005"/><text x="7.5582%" y="943.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,005 samples, 0.89%)</title><rect x="7.3082%" y="917" width="0.8880%" height="15" fill="rgb(248,100,22)" fg:x="8271" fg:w="1005"/><text x="7.5582%" y="927.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,005 samples, 0.89%)</title><rect x="7.3082%" y="901" width="0.8880%" height="15" fill="rgb(208,67,9)" fg:x="8271" fg:w="1005"/><text x="7.5582%" y="911.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (1,005 samples, 0.89%)</title><rect x="7.3082%" y="885" width="0.8880%" height="15" fill="rgb(219,133,21)" fg:x="8271" fg:w="1005"/><text x="7.5582%" y="895.50"></text></g><g><title>async_task::runnable::Runnable::run (1,005 samples, 0.89%)</title><rect x="7.3082%" y="869" width="0.8880%" height="15" fill="rgb(246,46,29)" fg:x="8271" fg:w="1005"/><text x="7.5582%" y="879.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (1,005 samples, 0.89%)</title><rect x="7.3082%" y="853" width="0.8880%" height="15" fill="rgb(246,185,52)" fg:x="8271" fg:w="1005"/><text x="7.5582%" y="863.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,005 samples, 0.89%)</title><rect x="7.3082%" y="837" width="0.8880%" height="15" fill="rgb(252,136,11)" fg:x="8271" fg:w="1005"/><text x="7.5582%" y="847.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,005 samples, 0.89%)</title><rect x="7.3082%" y="821" width="0.8880%" height="15" fill="rgb(219,138,53)" fg:x="8271" fg:w="1005"/><text x="7.5582%" y="831.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (1,005 samples, 0.89%)</title><rect x="7.3082%" y="805" width="0.8880%" height="15" fill="rgb(211,51,23)" fg:x="8271" fg:w="1005"/><text x="7.5582%" y="815.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (1,005 samples, 0.89%)</title><rect x="7.3082%" y="789" width="0.8880%" height="15" fill="rgb(247,221,28)" fg:x="8271" fg:w="1005"/><text x="7.5582%" y="799.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (1,005 samples, 0.89%)</title><rect x="7.3082%" y="773" width="0.8880%" height="15" fill="rgb(251,222,45)" fg:x="8271" fg:w="1005"/><text x="7.5582%" y="783.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,005 samples, 0.89%)</title><rect x="7.3082%" y="757" width="0.8880%" height="15" fill="rgb(217,162,53)" fg:x="8271" fg:w="1005"/><text x="7.5582%" y="767.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,005 samples, 0.89%)</title><rect x="7.3082%" y="741" width="0.8880%" height="15" fill="rgb(229,93,14)" fg:x="8271" fg:w="1005"/><text x="7.5582%" y="751.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (1,005 samples, 0.89%)</title><rect x="7.3082%" y="725" width="0.8880%" height="15" fill="rgb(209,67,49)" fg:x="8271" fg:w="1005"/><text x="7.5582%" y="735.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,005 samples, 0.89%)</title><rect x="7.3082%" y="709" width="0.8880%" height="15" fill="rgb(213,87,29)" fg:x="8271" fg:w="1005"/><text x="7.5582%" y="719.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,005 samples, 0.89%)</title><rect x="7.3082%" y="693" width="0.8880%" height="15" fill="rgb(205,151,52)" fg:x="8271" fg:w="1005"/><text x="7.5582%" y="703.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::run::{{closure}} (1,005 samples, 0.89%)</title><rect x="7.3082%" y="677" width="0.8880%" height="15" fill="rgb(253,215,39)" fg:x="8271" fg:w="1005"/><text x="7.5582%" y="687.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,005 samples, 0.89%)</title><rect x="7.3082%" y="661" width="0.8880%" height="15" fill="rgb(221,220,41)" fg:x="8271" fg:w="1005"/><text x="7.5582%" y="671.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_source_reply::{{closure}} (1,005 samples, 0.89%)</title><rect x="7.3082%" y="645" width="0.8880%" height="15" fill="rgb(218,133,21)" fg:x="8271" fg:w="1005"/><text x="7.5582%" y="655.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,005 samples, 0.89%)</title><rect x="7.3082%" y="629" width="0.8880%" height="15" fill="rgb(221,193,43)" fg:x="8271" fg:w="1005"/><text x="7.5582%" y="639.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_data::{{closure}} (1,005 samples, 0.89%)</title><rect x="7.3082%" y="613" width="0.8880%" height="15" fill="rgb(240,128,52)" fg:x="8271" fg:w="1005"/><text x="7.5582%" y="623.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,005 samples, 0.89%)</title><rect x="7.3082%" y="597" width="0.8880%" height="15" fill="rgb(253,114,12)" fg:x="8271" fg:w="1005"/><text x="7.5582%" y="607.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::route_events::{{closure}} (1,005 samples, 0.89%)</title><rect x="7.3082%" y="581" width="0.8880%" height="15" fill="rgb(215,223,47)" fg:x="8271" fg:w="1005"/><text x="7.5582%" y="591.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,005 samples, 0.89%)</title><rect x="7.3082%" y="565" width="0.8880%" height="15" fill="rgb(248,225,23)" fg:x="8271" fg:w="1005"/><text x="7.5582%" y="575.50"></text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (1,005 samples, 0.89%)</title><rect x="7.3082%" y="549" width="0.8880%" height="15" fill="rgb(250,108,0)" fg:x="8271" fg:w="1005"/><text x="7.5582%" y="559.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (1,005 samples, 0.89%)</title><rect x="7.3082%" y="533" width="0.8880%" height="15" fill="rgb(228,208,7)" fg:x="8271" fg:w="1005"/><text x="7.5582%" y="543.50"></text></g><g><title>event_listener::Event::notify (108 samples, 0.10%)</title><rect x="8.1007%" y="517" width="0.0954%" height="15" fill="rgb(244,45,10)" fg:x="9168" fg:w="108"/><text x="8.3507%" y="527.50"></text></g><g><title>event_listener::full_fence (101 samples, 0.09%)</title><rect x="8.1069%" y="501" width="0.0892%" height="15" fill="rgb(207,125,25)" fg:x="9175" fg:w="101"/><text x="8.3569%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (101 samples, 0.09%)</title><rect x="8.1069%" y="485" width="0.0892%" height="15" fill="rgb(210,195,18)" fg:x="9175" fg:w="101"/><text x="8.3569%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (101 samples, 0.09%)</title><rect x="8.1069%" y="469" width="0.0892%" height="15" fill="rgb(249,80,12)" fg:x="9175" fg:w="101"/><text x="8.3569%" y="479.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::default::Default&gt;::default (57 samples, 0.05%)</title><rect x="8.4347%" y="677" width="0.0504%" height="15" fill="rgb(221,65,9)" fg:x="9546" fg:w="57"/><text x="8.6847%" y="687.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (101 samples, 0.09%)</title><rect x="8.9728%" y="485" width="0.0892%" height="15" fill="rgb(235,49,36)" fg:x="10155" fg:w="101"/><text x="9.2228%" y="495.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (419 samples, 0.37%)</title><rect x="8.6945%" y="613" width="0.3702%" height="15" fill="rgb(225,32,20)" fg:x="9840" fg:w="419"/><text x="8.9445%" y="623.50"></text></g><g><title>alloc::alloc::exchange_malloc (186 samples, 0.16%)</title><rect x="8.9004%" y="597" width="0.1643%" height="15" fill="rgb(215,141,46)" fg:x="10073" fg:w="186"/><text x="9.1504%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (186 samples, 0.16%)</title><rect x="8.9004%" y="581" width="0.1643%" height="15" fill="rgb(250,160,47)" fg:x="10073" fg:w="186"/><text x="9.1504%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (186 samples, 0.16%)</title><rect x="8.9004%" y="565" width="0.1643%" height="15" fill="rgb(216,222,40)" fg:x="10073" fg:w="186"/><text x="9.1504%" y="575.50"></text></g><g><title>alloc::alloc::alloc (182 samples, 0.16%)</title><rect x="8.9039%" y="549" width="0.1608%" height="15" fill="rgb(234,217,39)" fg:x="10077" fg:w="182"/><text x="9.1539%" y="559.50"></text></g><g><title>__rg_alloc (182 samples, 0.16%)</title><rect x="8.9039%" y="533" width="0.1608%" height="15" fill="rgb(207,178,40)" fg:x="10077" fg:w="182"/><text x="9.1539%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (182 samples, 0.16%)</title><rect x="8.9039%" y="517" width="0.1608%" height="15" fill="rgb(221,136,13)" fg:x="10077" fg:w="182"/><text x="9.1539%" y="527.50"></text></g><g><title>sn_rust_alloc (173 samples, 0.15%)</title><rect x="8.9119%" y="501" width="0.1529%" height="15" fill="rgb(249,199,10)" fg:x="10086" fg:w="173"/><text x="9.1619%" y="511.50"></text></g><g><title>&lt;tremor_pipeline::event::Event as core::default::Default&gt;::default (731 samples, 0.65%)</title><rect x="8.4250%" y="693" width="0.6459%" height="15" fill="rgb(249,222,13)" fg:x="9535" fg:w="731"/><text x="8.6750%" y="703.50"></text></g><g><title>&lt;tremor_script::srs::EventPayload as core::default::Default&gt;::default (663 samples, 0.59%)</title><rect x="8.4851%" y="677" width="0.5858%" height="15" fill="rgb(244,185,38)" fg:x="9603" fg:w="663"/><text x="8.7351%" y="687.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (439 samples, 0.39%)</title><rect x="8.6830%" y="661" width="0.3879%" height="15" fill="rgb(236,202,9)" fg:x="9827" fg:w="439"/><text x="8.9330%" y="671.50"></text></g><g><title>value_trait::Builder::object (426 samples, 0.38%)</title><rect x="8.6945%" y="645" width="0.3764%" height="15" fill="rgb(250,229,37)" fg:x="9840" fg:w="426"/><text x="8.9445%" y="655.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (426 samples, 0.38%)</title><rect x="8.6945%" y="629" width="0.3764%" height="15" fill="rgb(206,174,23)" fg:x="9840" fg:w="426"/><text x="8.9445%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (33 samples, 0.03%)</title><rect x="9.0789%" y="661" width="0.0292%" height="15" fill="rgb(211,33,43)" fg:x="10275" fg:w="33"/><text x="9.3289%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt;&gt; (23 samples, 0.02%)</title><rect x="9.0877%" y="645" width="0.0203%" height="15" fill="rgb(245,58,50)" fg:x="10285" fg:w="23"/><text x="9.3377%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (20 samples, 0.02%)</title><rect x="9.0903%" y="629" width="0.0177%" height="15" fill="rgb(244,68,36)" fg:x="10288" fg:w="20"/><text x="9.3403%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (20 samples, 0.02%)</title><rect x="9.0903%" y="613" width="0.0177%" height="15" fill="rgb(232,229,15)" fg:x="10288" fg:w="20"/><text x="9.3403%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::vecmap::VecMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (16 samples, 0.01%)</title><rect x="9.0939%" y="597" width="0.0141%" height="15" fill="rgb(254,30,23)" fg:x="10292" fg:w="16"/><text x="9.3439%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)&gt;&gt; (16 samples, 0.01%)</title><rect x="9.0939%" y="581" width="0.0141%" height="15" fill="rgb(235,160,14)" fg:x="10292" fg:w="16"/><text x="9.3439%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (62 samples, 0.05%)</title><rect x="9.0744%" y="693" width="0.0548%" height="15" fill="rgb(212,155,44)" fg:x="10270" fg:w="62"/><text x="9.3244%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (57 samples, 0.05%)</title><rect x="9.0789%" y="677" width="0.0504%" height="15" fill="rgb(226,2,50)" fg:x="10275" fg:w="57"/><text x="9.3289%" y="687.50"></text></g><g><title>sn_rust_dealloc (24 samples, 0.02%)</title><rect x="9.1080%" y="661" width="0.0212%" height="15" fill="rgb(234,177,6)" fg:x="10308" fg:w="24"/><text x="9.3580%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (28 samples, 0.02%)</title><rect x="9.1292%" y="693" width="0.0247%" height="15" fill="rgb(217,24,9)" fg:x="10332" fg:w="28"/><text x="9.3792%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt;&gt; (17 samples, 0.02%)</title><rect x="9.1389%" y="677" width="0.0150%" height="15" fill="rgb(220,13,46)" fg:x="10343" fg:w="17"/><text x="9.3889%" y="687.50"></text></g><g><title>sn_rust_dealloc (24 samples, 0.02%)</title><rect x="9.1540%" y="693" width="0.0212%" height="15" fill="rgb(239,221,27)" fg:x="10360" fg:w="24"/><text x="9.4040%" y="703.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (1,115 samples, 0.99%)</title><rect x="8.1962%" y="709" width="0.9852%" height="15" fill="rgb(222,198,25)" fg:x="9276" fg:w="1115"/><text x="8.4462%" y="719.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (17 samples, 0.02%)</title><rect x="9.2220%" y="581" width="0.0150%" height="15" fill="rgb(211,99,13)" fg:x="10437" fg:w="17"/><text x="9.4720%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (42 samples, 0.04%)</title><rect x="9.2017%" y="693" width="0.0371%" height="15" fill="rgb(232,111,31)" fg:x="10414" fg:w="42"/><text x="9.4517%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (42 samples, 0.04%)</title><rect x="9.2017%" y="677" width="0.0371%" height="15" fill="rgb(245,82,37)" fg:x="10414" fg:w="42"/><text x="9.4517%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (42 samples, 0.04%)</title><rect x="9.2017%" y="661" width="0.0371%" height="15" fill="rgb(227,149,46)" fg:x="10414" fg:w="42"/><text x="9.4517%" y="671.50"></text></g><g><title>alloc::alloc::alloc (41 samples, 0.04%)</title><rect x="9.2026%" y="645" width="0.0362%" height="15" fill="rgb(218,36,50)" fg:x="10415" fg:w="41"/><text x="9.4526%" y="655.50"></text></g><g><title>__rg_alloc (41 samples, 0.04%)</title><rect x="9.2026%" y="629" width="0.0362%" height="15" fill="rgb(226,80,48)" fg:x="10415" fg:w="41"/><text x="9.4526%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (41 samples, 0.04%)</title><rect x="9.2026%" y="613" width="0.0362%" height="15" fill="rgb(238,224,15)" fg:x="10415" fg:w="41"/><text x="9.4526%" y="623.50"></text></g><g><title>sn_rust_alloc (41 samples, 0.04%)</title><rect x="9.2026%" y="597" width="0.0362%" height="15" fill="rgb(241,136,10)" fg:x="10415" fg:w="41"/><text x="9.4526%" y="607.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (82 samples, 0.07%)</title><rect x="9.1814%" y="709" width="0.0725%" height="15" fill="rgb(208,32,45)" fg:x="10391" fg:w="82"/><text x="9.4314%" y="719.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (58 samples, 0.05%)</title><rect x="9.4579%" y="693" width="0.0512%" height="15" fill="rgb(207,135,9)" fg:x="10704" fg:w="58"/><text x="9.7079%" y="703.50"></text></g><g><title>alloc::alloc::exchange_malloc (49 samples, 0.04%)</title><rect x="9.5092%" y="693" width="0.0433%" height="15" fill="rgb(206,86,44)" fg:x="10762" fg:w="49"/><text x="9.7592%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (49 samples, 0.04%)</title><rect x="9.5092%" y="677" width="0.0433%" height="15" fill="rgb(245,177,15)" fg:x="10762" fg:w="49"/><text x="9.7592%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (49 samples, 0.04%)</title><rect x="9.5092%" y="661" width="0.0433%" height="15" fill="rgb(206,64,50)" fg:x="10762" fg:w="49"/><text x="9.7592%" y="671.50"></text></g><g><title>alloc::alloc::alloc (47 samples, 0.04%)</title><rect x="9.5109%" y="645" width="0.0415%" height="15" fill="rgb(234,36,40)" fg:x="10764" fg:w="47"/><text x="9.7609%" y="655.50"></text></g><g><title>__rg_alloc (47 samples, 0.04%)</title><rect x="9.5109%" y="629" width="0.0415%" height="15" fill="rgb(213,64,8)" fg:x="10764" fg:w="47"/><text x="9.7609%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (47 samples, 0.04%)</title><rect x="9.5109%" y="613" width="0.0415%" height="15" fill="rgb(210,75,36)" fg:x="10764" fg:w="47"/><text x="9.7609%" y="623.50"></text></g><g><title>sn_rust_alloc (44 samples, 0.04%)</title><rect x="9.5136%" y="597" width="0.0389%" height="15" fill="rgb(229,88,21)" fg:x="10767" fg:w="44"/><text x="9.7636%" y="607.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (20 samples, 0.02%)</title><rect x="9.5348%" y="581" width="0.0177%" height="15" fill="rgb(252,204,47)" fg:x="10791" fg:w="20"/><text x="9.7848%" y="591.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (59 samples, 0.05%)</title><rect x="9.5525%" y="693" width="0.0521%" height="15" fill="rgb(208,77,27)" fg:x="10811" fg:w="59"/><text x="9.8025%" y="703.50"></text></g><g><title>alloc::alloc::exchange_malloc (53 samples, 0.05%)</title><rect x="9.5578%" y="677" width="0.0468%" height="15" fill="rgb(221,76,26)" fg:x="10817" fg:w="53"/><text x="9.8078%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (53 samples, 0.05%)</title><rect x="9.5578%" y="661" width="0.0468%" height="15" fill="rgb(225,139,18)" fg:x="10817" fg:w="53"/><text x="9.8078%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (53 samples, 0.05%)</title><rect x="9.5578%" y="645" width="0.0468%" height="15" fill="rgb(230,137,11)" fg:x="10817" fg:w="53"/><text x="9.8078%" y="655.50"></text></g><g><title>alloc::alloc::alloc (53 samples, 0.05%)</title><rect x="9.5578%" y="629" width="0.0468%" height="15" fill="rgb(212,28,1)" fg:x="10817" fg:w="53"/><text x="9.8078%" y="639.50"></text></g><g><title>__rg_alloc (53 samples, 0.05%)</title><rect x="9.5578%" y="613" width="0.0468%" height="15" fill="rgb(248,164,17)" fg:x="10817" fg:w="53"/><text x="9.8078%" y="623.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (53 samples, 0.05%)</title><rect x="9.5578%" y="597" width="0.0468%" height="15" fill="rgb(222,171,42)" fg:x="10817" fg:w="53"/><text x="9.8078%" y="607.50"></text></g><g><title>sn_rust_alloc (53 samples, 0.05%)</title><rect x="9.5578%" y="581" width="0.0468%" height="15" fill="rgb(243,84,45)" fg:x="10817" fg:w="53"/><text x="9.8078%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (37 samples, 0.03%)</title><rect x="9.5719%" y="565" width="0.0327%" height="15" fill="rgb(252,49,23)" fg:x="10833" fg:w="37"/><text x="9.8219%" y="575.50"></text></g><g><title>&lt;halfbrown::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (107 samples, 0.09%)</title><rect x="9.7530%" y="629" width="0.0945%" height="15" fill="rgb(215,19,7)" fg:x="11038" fg:w="107"/><text x="10.0030%" y="639.50"></text></g><g><title>&lt;halfbrown::HashMapInt&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (85 samples, 0.08%)</title><rect x="9.7725%" y="613" width="0.0751%" height="15" fill="rgb(238,81,41)" fg:x="11060" fg:w="85"/><text x="10.0225%" y="623.50"></text></g><g><title>&lt;halfbrown::vecmap::VecMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (82 samples, 0.07%)</title><rect x="9.7751%" y="597" width="0.0725%" height="15" fill="rgb(210,199,37)" fg:x="11063" fg:w="82"/><text x="10.0251%" y="607.50"></text></g><g><title>&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (133 samples, 0.12%)</title><rect x="9.7530%" y="645" width="0.1175%" height="15" fill="rgb(244,192,49)" fg:x="11038" fg:w="133"/><text x="10.0030%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (26 samples, 0.02%)</title><rect x="9.8476%" y="629" width="0.0230%" height="15" fill="rgb(226,211,11)" fg:x="11145" fg:w="26"/><text x="10.0976%" y="639.50"></text></g><g><title>core::ptr::write (26 samples, 0.02%)</title><rect x="9.8476%" y="613" width="0.0230%" height="15" fill="rgb(236,162,54)" fg:x="11145" fg:w="26"/><text x="10.0976%" y="623.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (183 samples, 0.16%)</title><rect x="9.7389%" y="677" width="0.1617%" height="15" fill="rgb(220,229,9)" fg:x="11022" fg:w="183"/><text x="9.9889%" y="687.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (170 samples, 0.15%)</title><rect x="9.7504%" y="661" width="0.1502%" height="15" fill="rgb(250,87,22)" fg:x="11035" fg:w="170"/><text x="10.0004%" y="671.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (34 samples, 0.03%)</title><rect x="9.8706%" y="645" width="0.0300%" height="15" fill="rgb(239,43,17)" fg:x="11171" fg:w="34"/><text x="10.1206%" y="655.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (34 samples, 0.03%)</title><rect x="9.8706%" y="629" width="0.0300%" height="15" fill="rgb(231,177,25)" fg:x="11171" fg:w="34"/><text x="10.1206%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (34 samples, 0.03%)</title><rect x="9.8706%" y="613" width="0.0300%" height="15" fill="rgb(219,179,1)" fg:x="11171" fg:w="34"/><text x="10.1206%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (34 samples, 0.03%)</title><rect x="9.8706%" y="597" width="0.0300%" height="15" fill="rgb(238,219,53)" fg:x="11171" fg:w="34"/><text x="10.1206%" y="607.50"></text></g><g><title>alloc::alloc::alloc (34 samples, 0.03%)</title><rect x="9.8706%" y="581" width="0.0300%" height="15" fill="rgb(232,167,36)" fg:x="11171" fg:w="34"/><text x="10.1206%" y="591.50"></text></g><g><title>__rg_alloc (34 samples, 0.03%)</title><rect x="9.8706%" y="565" width="0.0300%" height="15" fill="rgb(244,19,51)" fg:x="11171" fg:w="34"/><text x="10.1206%" y="575.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (34 samples, 0.03%)</title><rect x="9.8706%" y="549" width="0.0300%" height="15" fill="rgb(224,6,22)" fg:x="11171" fg:w="34"/><text x="10.1206%" y="559.50"></text></g><g><title>sn_rust_alloc (34 samples, 0.03%)</title><rect x="9.8706%" y="533" width="0.0300%" height="15" fill="rgb(224,145,5)" fg:x="11171" fg:w="34"/><text x="10.1206%" y="543.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::run::{{closure}} (2,123 samples, 1.88%)</title><rect x="8.1962%" y="805" width="1.8759%" height="15" fill="rgb(234,130,49)" fg:x="9276" fg:w="2123"/><text x="8.4462%" y="815.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,123 samples, 1.88%)</title><rect x="8.1962%" y="789" width="1.8759%" height="15" fill="rgb(254,6,2)" fg:x="9276" fg:w="2123"/><text x="8.4462%" y="799.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_source_reply::{{closure}} (2,123 samples, 1.88%)</title><rect x="8.1962%" y="773" width="1.8759%" height="15" fill="rgb(208,96,46)" fg:x="9276" fg:w="2123"/><text x="8.4462%" y="783.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,123 samples, 1.88%)</title><rect x="8.1962%" y="757" width="1.8759%" height="15" fill="rgb(239,3,39)" fg:x="9276" fg:w="2123"/><text x="8.4462%" y="767.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_data::{{closure}} (2,123 samples, 1.88%)</title><rect x="8.1962%" y="741" width="1.8759%" height="15" fill="rgb(233,210,1)" fg:x="9276" fg:w="2123"/><text x="8.4462%" y="751.50">t..</text></g><g><title>tremor_runtime::connectors::source::build_events (2,123 samples, 1.88%)</title><rect x="8.1962%" y="725" width="1.8759%" height="15" fill="rgb(244,137,37)" fg:x="9276" fg:w="2123"/><text x="8.4462%" y="735.50">t..</text></g><g><title>tremor_script::srs::EventPayload::try_new (926 samples, 0.82%)</title><rect x="9.2538%" y="709" width="0.8182%" height="15" fill="rgb(240,136,2)" fg:x="10473" fg:w="926"/><text x="9.5038%" y="719.50"></text></g><g><title>tremor_runtime::connectors::source::build_last_events::{{closure}} (521 samples, 0.46%)</title><rect x="9.6117%" y="693" width="0.4603%" height="15" fill="rgb(239,18,37)" fg:x="10878" fg:w="521"/><text x="9.8617%" y="703.50"></text></g><g><title>tremor_script::srs::ValueAndMeta::from_parts (194 samples, 0.17%)</title><rect x="9.9006%" y="677" width="0.1714%" height="15" fill="rgb(218,185,22)" fg:x="11205" fg:w="194"/><text x="10.1506%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (15 samples, 0.01%)</title><rect x="10.1462%" y="597" width="0.0133%" height="15" fill="rgb(225,218,4)" fg:x="11483" fg:w="15"/><text x="10.3962%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (15 samples, 0.01%)</title><rect x="10.1462%" y="581" width="0.0133%" height="15" fill="rgb(230,182,32)" fg:x="11483" fg:w="15"/><text x="10.3962%" y="591.50"></text></g><g><title>core::hint::spin_loop (204 samples, 0.18%)</title><rect x="10.1683%" y="565" width="0.1803%" height="15" fill="rgb(242,56,43)" fg:x="11508" fg:w="204"/><text x="10.4183%" y="575.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (204 samples, 0.18%)</title><rect x="10.1683%" y="549" width="0.1803%" height="15" fill="rgb(233,99,24)" fg:x="11508" fg:w="204"/><text x="10.4183%" y="559.50"></text></g><g><title>event_listener::Inner::lock (241 samples, 0.21%)</title><rect x="10.1436%" y="661" width="0.2129%" height="15" fill="rgb(234,209,42)" fg:x="11480" fg:w="241"/><text x="10.3936%" y="671.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (240 samples, 0.21%)</title><rect x="10.1445%" y="645" width="0.2121%" height="15" fill="rgb(227,7,12)" fg:x="11481" fg:w="240"/><text x="10.3945%" y="655.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (238 samples, 0.21%)</title><rect x="10.1462%" y="629" width="0.2103%" height="15" fill="rgb(245,203,43)" fg:x="11483" fg:w="238"/><text x="10.3962%" y="639.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (238 samples, 0.21%)</title><rect x="10.1462%" y="613" width="0.2103%" height="15" fill="rgb(238,205,33)" fg:x="11483" fg:w="238"/><text x="10.3962%" y="623.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (223 samples, 0.20%)</title><rect x="10.1595%" y="597" width="0.1970%" height="15" fill="rgb(231,56,7)" fg:x="11498" fg:w="223"/><text x="10.4095%" y="607.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (215 samples, 0.19%)</title><rect x="10.1666%" y="581" width="0.1900%" height="15" fill="rgb(244,186,29)" fg:x="11506" fg:w="215"/><text x="10.4166%" y="591.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (265 samples, 0.23%)</title><rect x="10.1294%" y="677" width="0.2342%" height="15" fill="rgb(234,111,31)" fg:x="11464" fg:w="265"/><text x="10.3794%" y="687.50"></text></g><g><title>concurrent_queue::full_fence (19 samples, 0.02%)</title><rect x="10.4334%" y="629" width="0.0168%" height="15" fill="rgb(241,149,10)" fg:x="11808" fg:w="19"/><text x="10.6834%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (19 samples, 0.02%)</title><rect x="10.4334%" y="613" width="0.0168%" height="15" fill="rgb(249,206,44)" fg:x="11808" fg:w="19"/><text x="10.6834%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (19 samples, 0.02%)</title><rect x="10.4334%" y="597" width="0.0168%" height="15" fill="rgb(251,153,30)" fg:x="11808" fg:w="19"/><text x="10.6834%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (19 samples, 0.02%)</title><rect x="10.4334%" y="581" width="0.0168%" height="15" fill="rgb(239,152,38)" fg:x="11808" fg:w="19"/><text x="10.6834%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (95 samples, 0.08%)</title><rect x="10.4502%" y="629" width="0.0839%" height="15" fill="rgb(249,139,47)" fg:x="11827" fg:w="95"/><text x="10.7002%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (95 samples, 0.08%)</title><rect x="10.4502%" y="613" width="0.0839%" height="15" fill="rgb(244,64,35)" fg:x="11827" fg:w="95"/><text x="10.7002%" y="623.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (387 samples, 0.34%)</title><rect x="10.3786%" y="661" width="0.3419%" height="15" fill="rgb(216,46,15)" fg:x="11746" fg:w="387"/><text x="10.6286%" y="671.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (374 samples, 0.33%)</title><rect x="10.3901%" y="645" width="0.3305%" height="15" fill="rgb(250,74,19)" fg:x="11759" fg:w="374"/><text x="10.6401%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (211 samples, 0.19%)</title><rect x="10.5341%" y="629" width="0.1864%" height="15" fill="rgb(249,42,33)" fg:x="11922" fg:w="211"/><text x="10.7841%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_load (211 samples, 0.19%)</title><rect x="10.5341%" y="613" width="0.1864%" height="15" fill="rgb(242,149,17)" fg:x="11922" fg:w="211"/><text x="10.7841%" y="623.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (870 samples, 0.77%)</title><rect x="10.3636%" y="677" width="0.7687%" height="15" fill="rgb(244,29,21)" fg:x="11729" fg:w="870"/><text x="10.6136%" y="687.50"></text></g><g><title>event_listener::Event::notify (466 samples, 0.41%)</title><rect x="10.7206%" y="661" width="0.4118%" height="15" fill="rgb(220,130,37)" fg:x="12133" fg:w="466"/><text x="10.9706%" y="671.50"></text></g><g><title>event_listener::full_fence (458 samples, 0.40%)</title><rect x="10.7276%" y="645" width="0.4047%" height="15" fill="rgb(211,67,2)" fg:x="12141" fg:w="458"/><text x="10.9776%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (458 samples, 0.40%)</title><rect x="10.7276%" y="629" width="0.4047%" height="15" fill="rgb(235,68,52)" fg:x="12141" fg:w="458"/><text x="10.9776%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (458 samples, 0.40%)</title><rect x="10.7276%" y="613" width="0.4047%" height="15" fill="rgb(246,142,3)" fg:x="12141" fg:w="458"/><text x="10.9776%" y="623.50"></text></g><g><title>event_listener::Inner::lock (12 samples, 0.01%)</title><rect x="11.1376%" y="629" width="0.0106%" height="15" fill="rgb(241,25,7)" fg:x="12605" fg:w="12"/><text x="11.3876%" y="639.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (12 samples, 0.01%)</title><rect x="11.1376%" y="613" width="0.0106%" height="15" fill="rgb(242,119,39)" fg:x="12605" fg:w="12"/><text x="11.3876%" y="623.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="11.1359%" y="645" width="0.0141%" height="15" fill="rgb(241,98,45)" fg:x="12603" fg:w="16"/><text x="11.3859%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (27 samples, 0.02%)</title><rect x="11.1359%" y="677" width="0.0239%" height="15" fill="rgb(254,28,30)" fg:x="12603" fg:w="27"/><text x="11.3859%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (27 samples, 0.02%)</title><rect x="11.1359%" y="661" width="0.0239%" height="15" fill="rgb(241,142,54)" fg:x="12603" fg:w="27"/><text x="11.3859%" y="671.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (22 samples, 0.02%)</title><rect x="11.1597%" y="661" width="0.0194%" height="15" fill="rgb(222,85,15)" fg:x="12630" fg:w="22"/><text x="11.4097%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (22 samples, 0.02%)</title><rect x="11.1597%" y="645" width="0.0194%" height="15" fill="rgb(210,85,47)" fg:x="12630" fg:w="22"/><text x="11.4097%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_add (22 samples, 0.02%)</title><rect x="11.1597%" y="629" width="0.0194%" height="15" fill="rgb(224,206,25)" fg:x="12630" fg:w="22"/><text x="11.4097%" y="639.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (1,243 samples, 1.10%)</title><rect x="10.1038%" y="693" width="1.0983%" height="15" fill="rgb(243,201,19)" fg:x="11435" fg:w="1243"/><text x="10.3538%" y="703.50"></text></g><g><title>event_listener::Event::listen (48 samples, 0.04%)</title><rect x="11.1597%" y="677" width="0.0424%" height="15" fill="rgb(236,59,4)" fg:x="12630" fg:w="48"/><text x="11.4097%" y="687.50"></text></g><g><title>[libc-2.31.so] (116 samples, 0.10%)</title><rect x="11.2057%" y="677" width="0.1025%" height="15" fill="rgb(254,179,45)" fg:x="12682" fg:w="116"/><text x="11.4557%" y="687.50"></text></g><g><title>[libc-2.31.so] (463 samples, 0.41%)</title><rect x="11.3090%" y="645" width="0.4091%" height="15" fill="rgb(226,14,10)" fg:x="12799" fg:w="463"/><text x="11.5590%" y="655.50"></text></g><g><title>sn_rust_dealloc (57 samples, 0.05%)</title><rect x="11.7208%" y="565" width="0.0504%" height="15" fill="rgb(244,27,41)" fg:x="13265" fg:w="57"/><text x="11.9708%" y="575.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (2,036 samples, 1.80%)</title><rect x="10.0844%" y="725" width="1.7990%" height="15" fill="rgb(235,35,32)" fg:x="11413" fg:w="2036"/><text x="10.3344%" y="735.50">&lt;..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (2,027 samples, 1.79%)</title><rect x="10.0923%" y="709" width="1.7910%" height="15" fill="rgb(218,68,31)" fg:x="11422" fg:w="2027"/><text x="10.3423%" y="719.50">&lt;..</text></g><g><title>core::option::Option&lt;T&gt;::map (771 samples, 0.68%)</title><rect x="11.2021%" y="693" width="0.6812%" height="15" fill="rgb(207,120,37)" fg:x="12678" fg:w="771"/><text x="11.4521%" y="703.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (651 samples, 0.58%)</title><rect x="11.3082%" y="677" width="0.5752%" height="15" fill="rgb(227,98,0)" fg:x="12798" fg:w="651"/><text x="11.5582%" y="687.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}}::{{closure}} (651 samples, 0.58%)</title><rect x="11.3082%" y="661" width="0.5752%" height="15" fill="rgb(207,7,3)" fg:x="12798" fg:w="651"/><text x="11.5582%" y="671.50"></text></g><g><title>alloc::alloc::box_free (187 samples, 0.17%)</title><rect x="11.7181%" y="645" width="0.1652%" height="15" fill="rgb(206,98,19)" fg:x="13262" fg:w="187"/><text x="11.9681%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (187 samples, 0.17%)</title><rect x="11.7181%" y="629" width="0.1652%" height="15" fill="rgb(217,5,26)" fg:x="13262" fg:w="187"/><text x="11.9681%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (187 samples, 0.17%)</title><rect x="11.7181%" y="613" width="0.1652%" height="15" fill="rgb(235,190,38)" fg:x="13262" fg:w="187"/><text x="11.9681%" y="623.50"></text></g><g><title>__rg_dealloc (187 samples, 0.17%)</title><rect x="11.7181%" y="597" width="0.1652%" height="15" fill="rgb(247,86,24)" fg:x="13262" fg:w="187"/><text x="11.9681%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (187 samples, 0.17%)</title><rect x="11.7181%" y="581" width="0.1652%" height="15" fill="rgb(205,101,16)" fg:x="13262" fg:w="187"/><text x="11.9681%" y="591.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (127 samples, 0.11%)</title><rect x="11.7712%" y="565" width="0.1122%" height="15" fill="rgb(246,168,33)" fg:x="13322" fg:w="127"/><text x="12.0212%" y="575.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,659 samples, 2.35%)</title><rect x="10.0720%" y="789" width="2.3495%" height="15" fill="rgb(231,114,1)" fg:x="11399" fg:w="2659"/><text x="10.3220%" y="799.50">&lt;..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (2,659 samples, 2.35%)</title><rect x="10.0720%" y="773" width="2.3495%" height="15" fill="rgb(207,184,53)" fg:x="11399" fg:w="2659"/><text x="10.3220%" y="783.50">&lt;..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (2,659 samples, 2.35%)</title><rect x="10.0720%" y="757" width="2.3495%" height="15" fill="rgb(224,95,51)" fg:x="11399" fg:w="2659"/><text x="10.3220%" y="767.50">&lt;..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (2,659 samples, 2.35%)</title><rect x="10.0720%" y="741" width="2.3495%" height="15" fill="rgb(212,188,45)" fg:x="11399" fg:w="2659"/><text x="10.3220%" y="751.50">&lt;..</text></g><g><title>[libc-2.31.so] (609 samples, 0.54%)</title><rect x="11.8834%" y="725" width="0.5381%" height="15" fill="rgb(223,154,38)" fg:x="13449" fg:w="609"/><text x="12.1334%" y="735.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (71 samples, 0.06%)</title><rect x="12.4215%" y="709" width="0.0627%" height="15" fill="rgb(251,22,52)" fg:x="14058" fg:w="71"/><text x="12.6715%" y="719.50"></text></g><g><title>&lt;tremor_pipeline::op::grouper::bucket::Grouper as tremor_pipeline::op::Operator&gt;::on_event (71 samples, 0.06%)</title><rect x="12.4215%" y="693" width="0.0627%" height="15" fill="rgb(229,209,22)" fg:x="14058" fg:w="71"/><text x="12.6715%" y="703.50"></text></g><g><title>tremor_value::value::serialize::&lt;impl value_trait::Writable for tremor_value::value::Value&gt;::encode (71 samples, 0.06%)</title><rect x="12.4215%" y="677" width="0.0627%" height="15" fill="rgb(234,138,34)" fg:x="14058" fg:w="71"/><text x="12.6715%" y="687.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (71 samples, 0.06%)</title><rect x="12.4215%" y="661" width="0.0627%" height="15" fill="rgb(212,95,11)" fg:x="14058" fg:w="71"/><text x="12.6715%" y="671.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string (38 samples, 0.03%)</title><rect x="12.4506%" y="645" width="0.0336%" height="15" fill="rgb(240,179,47)" fg:x="14091" fg:w="38"/><text x="12.7006%" y="655.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (32 samples, 0.03%)</title><rect x="12.4559%" y="629" width="0.0283%" height="15" fill="rgb(240,163,11)" fg:x="14097" fg:w="32"/><text x="12.7059%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (14 samples, 0.01%)</title><rect x="12.5947%" y="629" width="0.0124%" height="15" fill="rgb(236,37,12)" fg:x="14254" fg:w="14"/><text x="12.8447%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::interpreter::LocalStack&gt; (17 samples, 0.02%)</title><rect x="12.6309%" y="629" width="0.0150%" height="15" fill="rgb(232,164,16)" fg:x="14295" fg:w="17"/><text x="12.8809%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;tremor_value::value::Value&gt;&gt;&gt; (17 samples, 0.02%)</title><rect x="12.6309%" y="613" width="0.0150%" height="15" fill="rgb(244,205,15)" fg:x="14295" fg:w="17"/><text x="12.8809%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (28 samples, 0.02%)</title><rect x="12.8403%" y="581" width="0.0247%" height="15" fill="rgb(223,117,47)" fg:x="14532" fg:w="28"/><text x="13.0903%" y="591.50"></text></g><g><title>tremor_script::interpreter::LocalStack::with_size (248 samples, 0.22%)</title><rect x="12.6521%" y="629" width="0.2191%" height="15" fill="rgb(244,107,35)" fg:x="14319" fg:w="248"/><text x="12.9021%" y="639.50"></text></g><g><title>alloc::vec::from_elem (248 samples, 0.22%)</title><rect x="12.6521%" y="613" width="0.2191%" height="15" fill="rgb(205,140,8)" fg:x="14319" fg:w="248"/><text x="12.9021%" y="623.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (240 samples, 0.21%)</title><rect x="12.6592%" y="597" width="0.2121%" height="15" fill="rgb(228,84,46)" fg:x="14327" fg:w="240"/><text x="12.9092%" y="607.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (528 samples, 0.47%)</title><rect x="12.4215%" y="773" width="0.4665%" height="15" fill="rgb(254,188,9)" fg:x="14058" fg:w="528"/><text x="12.6715%" y="783.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (528 samples, 0.47%)</title><rect x="12.4215%" y="757" width="0.4665%" height="15" fill="rgb(206,112,54)" fg:x="14058" fg:w="528"/><text x="12.6715%" y="767.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (528 samples, 0.47%)</title><rect x="12.4215%" y="741" width="0.4665%" height="15" fill="rgb(216,84,49)" fg:x="14058" fg:w="528"/><text x="12.6715%" y="751.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (528 samples, 0.47%)</title><rect x="12.4215%" y="725" width="0.4665%" height="15" fill="rgb(214,194,35)" fg:x="14058" fg:w="528"/><text x="12.6715%" y="735.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (457 samples, 0.40%)</title><rect x="12.4842%" y="709" width="0.4038%" height="15" fill="rgb(249,28,3)" fg:x="14129" fg:w="457"/><text x="12.7342%" y="719.50"></text></g><g><title>tremor_script::srs::EventPayload::rent_mut (457 samples, 0.40%)</title><rect x="12.4842%" y="693" width="0.4038%" height="15" fill="rgb(222,56,52)" fg:x="14129" fg:w="457"/><text x="12.7342%" y="703.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (457 samples, 0.40%)</title><rect x="12.4842%" y="677" width="0.4038%" height="15" fill="rgb(245,217,50)" fg:x="14129" fg:w="457"/><text x="12.7342%" y="687.50"></text></g><g><title>tremor_script::script::Script::run (457 samples, 0.40%)</title><rect x="12.4842%" y="661" width="0.4038%" height="15" fill="rgb(213,201,24)" fg:x="14129" fg:w="457"/><text x="12.7342%" y="671.50"></text></g><g><title>tremor_script::ast::Script::run (457 samples, 0.40%)</title><rect x="12.4842%" y="645" width="0.4038%" height="15" fill="rgb(248,116,28)" fg:x="14129" fg:w="457"/><text x="12.7342%" y="655.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (19 samples, 0.02%)</title><rect x="12.8712%" y="629" width="0.0168%" height="15" fill="rgb(219,72,43)" fg:x="14567" fg:w="19"/><text x="13.1212%" y="639.50"></text></g><g><title>[libc-2.31.so] (89 samples, 0.08%)</title><rect x="12.8889%" y="741" width="0.0786%" height="15" fill="rgb(209,138,14)" fg:x="14587" fg:w="89"/><text x="13.1389%" y="751.50"></text></g><g><title>[libc-2.31.so] (580 samples, 0.51%)</title><rect x="13.0771%" y="725" width="0.5125%" height="15" fill="rgb(222,18,33)" fg:x="14800" fg:w="580"/><text x="13.3271%" y="735.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,336 samples, 1.18%)</title><rect x="12.4215%" y="789" width="1.1805%" height="15" fill="rgb(213,199,7)" fg:x="14058" fg:w="1336"/><text x="12.6715%" y="799.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (808 samples, 0.71%)</title><rect x="12.8880%" y="773" width="0.7139%" height="15" fill="rgb(250,110,10)" fg:x="14586" fg:w="808"/><text x="13.1380%" y="783.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (808 samples, 0.71%)</title><rect x="12.8880%" y="757" width="0.7139%" height="15" fill="rgb(248,123,6)" fg:x="14586" fg:w="808"/><text x="13.1380%" y="767.50"></text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (718 samples, 0.63%)</title><rect x="12.9675%" y="741" width="0.6344%" height="15" fill="rgb(206,91,31)" fg:x="14676" fg:w="718"/><text x="13.2175%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_channel::Send&lt;tremor_runtime::connectors::sink::SinkMsg&gt;&gt; (14 samples, 0.01%)</title><rect x="13.5896%" y="725" width="0.0124%" height="15" fill="rgb(211,154,13)" fg:x="15380" fg:w="14"/><text x="13.8396%" y="735.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,167 samples, 6.33%)</title><rect x="7.2702%" y="949" width="6.3327%" height="15" fill="rgb(225,148,7)" fg:x="8228" fg:w="7167"/><text x="7.5202%" y="959.50">&lt;core::f..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (6,119 samples, 5.41%)</title><rect x="8.1962%" y="933" width="5.4067%" height="15" fill="rgb(220,160,43)" fg:x="9276" fg:w="6119"/><text x="8.4462%" y="943.50">async_e..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (6,119 samples, 5.41%)</title><rect x="8.1962%" y="917" width="5.4067%" height="15" fill="rgb(213,52,39)" fg:x="9276" fg:w="6119"/><text x="8.4462%" y="927.50">&lt;async_..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (6,119 samples, 5.41%)</title><rect x="8.1962%" y="901" width="5.4067%" height="15" fill="rgb(243,137,7)" fg:x="9276" fg:w="6119"/><text x="8.4462%" y="911.50">async_s..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (6,119 samples, 5.41%)</title><rect x="8.1962%" y="885" width="5.4067%" height="15" fill="rgb(230,79,13)" fg:x="9276" fg:w="6119"/><text x="8.4462%" y="895.50">std::th..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (6,119 samples, 5.41%)</title><rect x="8.1962%" y="869" width="5.4067%" height="15" fill="rgb(247,105,23)" fg:x="9276" fg:w="6119"/><text x="8.4462%" y="879.50">std::th..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (6,119 samples, 5.41%)</title><rect x="8.1962%" y="853" width="5.4067%" height="15" fill="rgb(223,179,41)" fg:x="9276" fg:w="6119"/><text x="8.4462%" y="863.50">async_s..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (6,119 samples, 5.41%)</title><rect x="8.1962%" y="837" width="5.4067%" height="15" fill="rgb(218,9,34)" fg:x="9276" fg:w="6119"/><text x="8.4462%" y="847.50">&lt;async_..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,119 samples, 5.41%)</title><rect x="8.1962%" y="821" width="5.4067%" height="15" fill="rgb(222,106,8)" fg:x="9276" fg:w="6119"/><text x="8.4462%" y="831.50">&lt;core::..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (3,996 samples, 3.53%)</title><rect x="10.0720%" y="805" width="3.5308%" height="15" fill="rgb(211,220,0)" fg:x="11399" fg:w="3996"/><text x="10.3220%" y="815.50">tre..</text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (12 samples, 0.01%)</title><rect x="13.6028%" y="949" width="0.0106%" height="15" fill="rgb(229,52,16)" fg:x="15395" fg:w="12"/><text x="13.8528%" y="959.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (13 samples, 0.01%)</title><rect x="13.6267%" y="949" width="0.0115%" height="15" fill="rgb(212,155,18)" fg:x="15422" fg:w="13"/><text x="13.8767%" y="959.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (43 samples, 0.04%)</title><rect x="13.6470%" y="853" width="0.0380%" height="15" fill="rgb(242,21,14)" fg:x="15445" fg:w="43"/><text x="13.8970%" y="863.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (43 samples, 0.04%)</title><rect x="13.6470%" y="837" width="0.0380%" height="15" fill="rgb(222,19,48)" fg:x="15445" fg:w="43"/><text x="13.8970%" y="847.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (43 samples, 0.04%)</title><rect x="13.6470%" y="821" width="0.0380%" height="15" fill="rgb(232,45,27)" fg:x="15445" fg:w="43"/><text x="13.8970%" y="831.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (43 samples, 0.04%)</title><rect x="13.6470%" y="805" width="0.0380%" height="15" fill="rgb(249,103,42)" fg:x="15445" fg:w="43"/><text x="13.8970%" y="815.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (119 samples, 0.11%)</title><rect x="13.6417%" y="949" width="0.1051%" height="15" fill="rgb(246,81,33)" fg:x="15439" fg:w="119"/><text x="13.8917%" y="959.50"></text></g><g><title>tremor_script::srs::EventPayload::rent_mut (113 samples, 0.10%)</title><rect x="13.6470%" y="933" width="0.0998%" height="15" fill="rgb(252,33,42)" fg:x="15445" fg:w="113"/><text x="13.8970%" y="943.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (113 samples, 0.10%)</title><rect x="13.6470%" y="917" width="0.0998%" height="15" fill="rgb(209,212,41)" fg:x="15445" fg:w="113"/><text x="13.8970%" y="927.50"></text></g><g><title>tremor_script::script::Script::run (113 samples, 0.10%)</title><rect x="13.6470%" y="901" width="0.0998%" height="15" fill="rgb(207,154,6)" fg:x="15445" fg:w="113"/><text x="13.8970%" y="911.50"></text></g><g><title>tremor_script::ast::Script::run (113 samples, 0.10%)</title><rect x="13.6470%" y="885" width="0.0998%" height="15" fill="rgb(223,64,47)" fg:x="15445" fg:w="113"/><text x="13.8970%" y="895.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (113 samples, 0.10%)</title><rect x="13.6470%" y="869" width="0.0998%" height="15" fill="rgb(211,161,38)" fg:x="15445" fg:w="113"/><text x="13.8970%" y="879.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (70 samples, 0.06%)</title><rect x="13.6850%" y="853" width="0.0619%" height="15" fill="rgb(219,138,40)" fg:x="15488" fg:w="70"/><text x="13.9350%" y="863.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (70 samples, 0.06%)</title><rect x="13.6850%" y="837" width="0.0619%" height="15" fill="rgb(241,228,46)" fg:x="15488" fg:w="70"/><text x="13.9350%" y="847.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (70 samples, 0.06%)</title><rect x="13.6850%" y="821" width="0.0619%" height="15" fill="rgb(223,209,38)" fg:x="15488" fg:w="70"/><text x="13.9350%" y="831.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (70 samples, 0.06%)</title><rect x="13.6850%" y="805" width="0.0619%" height="15" fill="rgb(236,164,45)" fg:x="15488" fg:w="70"/><text x="13.9350%" y="815.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (70 samples, 0.06%)</title><rect x="13.6850%" y="789" width="0.0619%" height="15" fill="rgb(231,15,5)" fg:x="15488" fg:w="70"/><text x="13.9350%" y="799.50"></text></g><g><title>tremor_script::interpreter::resolve (14 samples, 0.01%)</title><rect x="13.7345%" y="773" width="0.0124%" height="15" fill="rgb(252,35,15)" fg:x="15544" fg:w="14"/><text x="13.9845%" y="783.50"></text></g><g><title>&lt;tremor_runtime::codec::msgpack::MsgPack as tremor_runtime::codec::Codec&gt;::encode (34 samples, 0.03%)</title><rect x="13.7513%" y="949" width="0.0300%" height="15" fill="rgb(248,181,18)" fg:x="15563" fg:w="34"/><text x="14.0013%" y="959.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (15 samples, 0.01%)</title><rect x="13.7848%" y="949" width="0.0133%" height="15" fill="rgb(233,39,42)" fg:x="15601" fg:w="15"/><text x="14.0348%" y="959.50"></text></g><g><title>[libc-2.31.so] (172 samples, 0.15%)</title><rect x="13.8052%" y="949" width="0.1520%" height="15" fill="rgb(238,110,33)" fg:x="15624" fg:w="172"/><text x="14.0552%" y="959.50"></text></g><g><title>__clock_gettime (30 samples, 0.03%)</title><rect x="13.9571%" y="949" width="0.0265%" height="15" fill="rgb(233,195,10)" fg:x="15796" fg:w="30"/><text x="14.2071%" y="959.50"></text></g><g><title>alloc::raw_vec::finish_grow (143 samples, 0.13%)</title><rect x="14.0102%" y="949" width="0.1264%" height="15" fill="rgb(254,105,3)" fg:x="15856" fg:w="143"/><text x="14.2602%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (14 samples, 0.01%)</title><rect x="14.1241%" y="933" width="0.0124%" height="15" fill="rgb(221,225,9)" fg:x="15985" fg:w="14"/><text x="14.3741%" y="943.50"></text></g><g><title>alloc::alloc::Global::grow_impl (14 samples, 0.01%)</title><rect x="14.1241%" y="917" width="0.0124%" height="15" fill="rgb(224,227,45)" fg:x="15985" fg:w="14"/><text x="14.3741%" y="927.50"></text></g><g><title>alloc::alloc::realloc (14 samples, 0.01%)</title><rect x="14.1241%" y="901" width="0.0124%" height="15" fill="rgb(229,198,43)" fg:x="15985" fg:w="14"/><text x="14.3741%" y="911.50"></text></g><g><title>__rg_realloc (14 samples, 0.01%)</title><rect x="14.1241%" y="885" width="0.0124%" height="15" fill="rgb(206,209,35)" fg:x="15985" fg:w="14"/><text x="14.3741%" y="895.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (14 samples, 0.01%)</title><rect x="14.1241%" y="869" width="0.0124%" height="15" fill="rgb(245,195,53)" fg:x="15985" fg:w="14"/><text x="14.3741%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (15 samples, 0.01%)</title><rect x="14.1365%" y="949" width="0.0133%" height="15" fill="rgb(240,92,26)" fg:x="15999" fg:w="15"/><text x="14.3865%" y="959.50"></text></g><g><title>async_executor::Ticker::sleep (19 samples, 0.02%)</title><rect x="14.1498%" y="949" width="0.0168%" height="15" fill="rgb(207,40,23)" fg:x="16014" fg:w="19"/><text x="14.3998%" y="959.50"></text></g><g><title>async_executor::steal (92 samples, 0.08%)</title><rect x="14.1666%" y="949" width="0.0813%" height="15" fill="rgb(223,111,35)" fg:x="16033" fg:w="92"/><text x="14.4166%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (22 samples, 0.02%)</title><rect x="14.2982%" y="469" width="0.0194%" height="15" fill="rgb(229,147,28)" fg:x="16182" fg:w="22"/><text x="14.5482%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_add (22 samples, 0.02%)</title><rect x="14.2982%" y="453" width="0.0194%" height="15" fill="rgb(211,29,28)" fg:x="16182" fg:w="22"/><text x="14.5482%" y="463.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (23 samples, 0.02%)</title><rect x="14.2982%" y="501" width="0.0203%" height="15" fill="rgb(228,72,33)" fg:x="16182" fg:w="23"/><text x="14.5482%" y="511.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (23 samples, 0.02%)</title><rect x="14.2982%" y="485" width="0.0203%" height="15" fill="rgb(205,214,31)" fg:x="16182" fg:w="23"/><text x="14.5482%" y="495.50"></text></g><g><title>core::mem::drop (40 samples, 0.04%)</title><rect x="14.3291%" y="501" width="0.0353%" height="15" fill="rgb(224,111,15)" fg:x="16217" fg:w="40"/><text x="14.5791%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (40 samples, 0.04%)</title><rect x="14.3291%" y="485" width="0.0353%" height="15" fill="rgb(253,21,26)" fg:x="16217" fg:w="40"/><text x="14.5791%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (39 samples, 0.03%)</title><rect x="14.3300%" y="469" width="0.0345%" height="15" fill="rgb(245,139,43)" fg:x="16218" fg:w="39"/><text x="14.5800%" y="479.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (39 samples, 0.03%)</title><rect x="14.3300%" y="453" width="0.0345%" height="15" fill="rgb(252,170,7)" fg:x="16218" fg:w="39"/><text x="14.5800%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (38 samples, 0.03%)</title><rect x="14.3309%" y="437" width="0.0336%" height="15" fill="rgb(231,118,14)" fg:x="16219" fg:w="38"/><text x="14.5809%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (38 samples, 0.03%)</title><rect x="14.3309%" y="421" width="0.0336%" height="15" fill="rgb(238,83,0)" fg:x="16219" fg:w="38"/><text x="14.5809%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (38 samples, 0.03%)</title><rect x="14.3309%" y="405" width="0.0336%" height="15" fill="rgb(221,39,39)" fg:x="16219" fg:w="38"/><text x="14.5809%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_swap (38 samples, 0.03%)</title><rect x="14.3309%" y="389" width="0.0336%" height="15" fill="rgb(222,119,46)" fg:x="16219" fg:w="38"/><text x="14.5809%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (22 samples, 0.02%)</title><rect x="14.3645%" y="501" width="0.0194%" height="15" fill="rgb(222,165,49)" fg:x="16257" fg:w="22"/><text x="14.6145%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (22 samples, 0.02%)</title><rect x="14.3645%" y="485" width="0.0194%" height="15" fill="rgb(219,113,52)" fg:x="16257" fg:w="22"/><text x="14.6145%" y="495.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.02%)</title><rect x="14.3645%" y="469" width="0.0194%" height="15" fill="rgb(214,7,15)" fg:x="16257" fg:w="22"/><text x="14.6145%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (18 samples, 0.02%)</title><rect x="14.3680%" y="453" width="0.0159%" height="15" fill="rgb(235,32,4)" fg:x="16261" fg:w="18"/><text x="14.6180%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (18 samples, 0.02%)</title><rect x="14.3680%" y="437" width="0.0159%" height="15" fill="rgb(238,90,54)" fg:x="16261" fg:w="18"/><text x="14.6180%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (18 samples, 0.02%)</title><rect x="14.3680%" y="421" width="0.0159%" height="15" fill="rgb(213,208,19)" fg:x="16261" fg:w="18"/><text x="14.6180%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_swap (18 samples, 0.02%)</title><rect x="14.3680%" y="405" width="0.0159%" height="15" fill="rgb(233,156,4)" fg:x="16261" fg:w="18"/><text x="14.6180%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (113 samples, 0.10%)</title><rect x="14.3928%" y="437" width="0.0998%" height="15" fill="rgb(207,194,5)" fg:x="16289" fg:w="113"/><text x="14.6428%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (113 samples, 0.10%)</title><rect x="14.3928%" y="421" width="0.0998%" height="15" fill="rgb(206,111,30)" fg:x="16289" fg:w="113"/><text x="14.6428%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (34 samples, 0.03%)</title><rect x="14.4997%" y="421" width="0.0300%" height="15" fill="rgb(243,70,54)" fg:x="16410" fg:w="34"/><text x="14.7497%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (34 samples, 0.03%)</title><rect x="14.4997%" y="405" width="0.0300%" height="15" fill="rgb(242,28,8)" fg:x="16410" fg:w="34"/><text x="14.7497%" y="415.50"></text></g><g><title>core::hint::spin_loop (955 samples, 0.84%)</title><rect x="14.5385%" y="405" width="0.8438%" height="15" fill="rgb(219,106,18)" fg:x="16454" fg:w="955"/><text x="14.7885%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (955 samples, 0.84%)</title><rect x="14.5385%" y="389" width="0.8438%" height="15" fill="rgb(244,222,10)" fg:x="16454" fg:w="955"/><text x="14.7885%" y="399.50"></text></g><g><title>event_listener::Inner::lock (1,165 samples, 1.03%)</title><rect x="14.3839%" y="501" width="1.0294%" height="15" fill="rgb(236,179,52)" fg:x="16279" fg:w="1165"/><text x="14.6339%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (1,165 samples, 1.03%)</title><rect x="14.3839%" y="485" width="1.0294%" height="15" fill="rgb(213,23,39)" fg:x="16279" fg:w="1165"/><text x="14.6339%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (1,157 samples, 1.02%)</title><rect x="14.3910%" y="469" width="1.0223%" height="15" fill="rgb(238,48,10)" fg:x="16287" fg:w="1157"/><text x="14.6410%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (1,157 samples, 1.02%)</title><rect x="14.3910%" y="453" width="1.0223%" height="15" fill="rgb(251,196,23)" fg:x="16287" fg:w="1157"/><text x="14.6410%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (1,042 samples, 0.92%)</title><rect x="14.4926%" y="437" width="0.9207%" height="15" fill="rgb(250,152,24)" fg:x="16402" fg:w="1042"/><text x="14.7426%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (1,000 samples, 0.88%)</title><rect x="14.5297%" y="421" width="0.8836%" height="15" fill="rgb(209,150,17)" fg:x="16444" fg:w="1000"/><text x="14.7797%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (35 samples, 0.03%)</title><rect x="15.3824%" y="405" width="0.0309%" height="15" fill="rgb(234,202,34)" fg:x="17409" fg:w="35"/><text x="15.6324%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (35 samples, 0.03%)</title><rect x="15.3824%" y="389" width="0.0309%" height="15" fill="rgb(253,148,53)" fg:x="17409" fg:w="35"/><text x="15.6324%" y="399.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (1,319 samples, 1.17%)</title><rect x="14.2797%" y="517" width="1.1655%" height="15" fill="rgb(218,129,16)" fg:x="16161" fg:w="1319"/><text x="14.5297%" y="527.50"></text></g><g><title>event_listener::List::remove (36 samples, 0.03%)</title><rect x="15.4133%" y="501" width="0.0318%" height="15" fill="rgb(216,85,19)" fg:x="17444" fg:w="36"/><text x="15.6633%" y="511.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (20 samples, 0.02%)</title><rect x="15.4274%" y="485" width="0.0177%" height="15" fill="rgb(235,228,7)" fg:x="17460" fg:w="20"/><text x="15.6774%" y="495.50"></text></g><g><title>core::mem::replace (20 samples, 0.02%)</title><rect x="15.4274%" y="469" width="0.0177%" height="15" fill="rgb(245,175,0)" fg:x="17460" fg:w="20"/><text x="15.6774%" y="479.50"></text></g><g><title>core::ptr::read (18 samples, 0.02%)</title><rect x="15.4292%" y="453" width="0.0159%" height="15" fill="rgb(208,168,36)" fg:x="17462" fg:w="18"/><text x="15.6792%" y="463.50"></text></g><g><title>[libc-2.31.so] (348 samples, 0.31%)</title><rect x="15.4451%" y="517" width="0.3075%" height="15" fill="rgb(246,171,24)" fg:x="17480" fg:w="348"/><text x="15.6951%" y="527.50"></text></g><g><title>[libc-2.31.so] (722 samples, 0.64%)</title><rect x="15.7756%" y="501" width="0.6380%" height="15" fill="rgb(215,142,24)" fg:x="17854" fg:w="722"/><text x="16.0256%" y="511.50"></text></g><g><title>[libc-2.31.so] (121 samples, 0.11%)</title><rect x="16.5558%" y="469" width="0.1069%" height="15" fill="rgb(250,187,7)" fg:x="18737" fg:w="121"/><text x="16.8058%" y="479.50"></text></g><g><title>concurrent_queue::full_fence (146 samples, 0.13%)</title><rect x="16.6627%" y="469" width="0.1290%" height="15" fill="rgb(228,66,33)" fg:x="18858" fg:w="146"/><text x="16.9127%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (138 samples, 0.12%)</title><rect x="16.6698%" y="453" width="0.1219%" height="15" fill="rgb(234,215,21)" fg:x="18866" fg:w="138"/><text x="16.9198%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (138 samples, 0.12%)</title><rect x="16.6698%" y="437" width="0.1219%" height="15" fill="rgb(222,191,20)" fg:x="18866" fg:w="138"/><text x="16.9198%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (138 samples, 0.12%)</title><rect x="16.6698%" y="421" width="0.1219%" height="15" fill="rgb(245,79,54)" fg:x="18866" fg:w="138"/><text x="16.9198%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (525 samples, 0.46%)</title><rect x="16.7996%" y="469" width="0.4639%" height="15" fill="rgb(240,10,37)" fg:x="19013" fg:w="525"/><text x="17.0496%" y="479.50"></text></g><g><title>core::ptr::read (525 samples, 0.46%)</title><rect x="16.7996%" y="453" width="0.4639%" height="15" fill="rgb(214,192,32)" fg:x="19013" fg:w="525"/><text x="17.0496%" y="463.50"></text></g><g><title>[libc-2.31.so] (525 samples, 0.46%)</title><rect x="16.7996%" y="437" width="0.4639%" height="15" fill="rgb(209,36,54)" fg:x="19013" fg:w="525"/><text x="17.0496%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (329 samples, 0.29%)</title><rect x="17.2635%" y="469" width="0.2907%" height="15" fill="rgb(220,10,11)" fg:x="19538" fg:w="329"/><text x="17.5135%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (329 samples, 0.29%)</title><rect x="17.2635%" y="453" width="0.2907%" height="15" fill="rgb(221,106,17)" fg:x="19538" fg:w="329"/><text x="17.5135%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (530 samples, 0.47%)</title><rect x="17.5542%" y="469" width="0.4683%" height="15" fill="rgb(251,142,44)" fg:x="19867" fg:w="530"/><text x="17.8042%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_load (530 samples, 0.47%)</title><rect x="17.5542%" y="453" width="0.4683%" height="15" fill="rgb(238,13,15)" fg:x="19867" fg:w="530"/><text x="17.8042%" y="463.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (1,823 samples, 1.61%)</title><rect x="16.4135%" y="501" width="1.6108%" height="15" fill="rgb(208,107,27)" fg:x="18576" fg:w="1823"/><text x="16.6635%" y="511.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (1,811 samples, 1.60%)</title><rect x="16.4241%" y="485" width="1.6002%" height="15" fill="rgb(205,136,37)" fg:x="18588" fg:w="1811"/><text x="16.6741%" y="495.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (2,763 samples, 2.44%)</title><rect x="15.7526%" y="517" width="2.4414%" height="15" fill="rgb(250,205,27)" fg:x="17828" fg:w="2763"/><text x="16.0026%" y="527.50">as..</text></g><g><title>event_listener::Event::notify (192 samples, 0.17%)</title><rect x="18.0243%" y="501" width="0.1696%" height="15" fill="rgb(210,80,43)" fg:x="20399" fg:w="192"/><text x="18.2743%" y="511.50"></text></g><g><title>event_listener::full_fence (177 samples, 0.16%)</title><rect x="18.0376%" y="485" width="0.1564%" height="15" fill="rgb(247,160,36)" fg:x="20414" fg:w="177"/><text x="18.2876%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (173 samples, 0.15%)</title><rect x="18.0411%" y="469" width="0.1529%" height="15" fill="rgb(234,13,49)" fg:x="20418" fg:w="173"/><text x="18.2911%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (173 samples, 0.15%)</title><rect x="18.0411%" y="453" width="0.1529%" height="15" fill="rgb(234,122,0)" fg:x="20418" fg:w="173"/><text x="18.2911%" y="463.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (18 samples, 0.02%)</title><rect x="18.2028%" y="485" width="0.0159%" height="15" fill="rgb(207,146,38)" fg:x="20601" fg:w="18"/><text x="18.4528%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (60 samples, 0.05%)</title><rect x="18.1992%" y="517" width="0.0530%" height="15" fill="rgb(207,177,25)" fg:x="20597" fg:w="60"/><text x="18.4492%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (56 samples, 0.05%)</title><rect x="18.2028%" y="501" width="0.0495%" height="15" fill="rgb(211,178,42)" fg:x="20601" fg:w="56"/><text x="18.4528%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (38 samples, 0.03%)</title><rect x="18.2187%" y="485" width="0.0336%" height="15" fill="rgb(230,69,54)" fg:x="20619" fg:w="38"/><text x="18.4687%" y="495.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 0.03%)</title><rect x="18.2187%" y="469" width="0.0336%" height="15" fill="rgb(214,135,41)" fg:x="20619" fg:w="38"/><text x="18.4687%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (37 samples, 0.03%)</title><rect x="18.2196%" y="453" width="0.0327%" height="15" fill="rgb(237,67,25)" fg:x="20620" fg:w="37"/><text x="18.4696%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_sub (37 samples, 0.03%)</title><rect x="18.2196%" y="437" width="0.0327%" height="15" fill="rgb(222,189,50)" fg:x="20620" fg:w="37"/><text x="18.4696%" y="447.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (50 samples, 0.04%)</title><rect x="18.2611%" y="501" width="0.0442%" height="15" fill="rgb(245,148,34)" fg:x="20667" fg:w="50"/><text x="18.5111%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (50 samples, 0.04%)</title><rect x="18.2611%" y="485" width="0.0442%" height="15" fill="rgb(222,29,6)" fg:x="20667" fg:w="50"/><text x="18.5111%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_add (50 samples, 0.04%)</title><rect x="18.2611%" y="469" width="0.0442%" height="15" fill="rgb(221,189,43)" fg:x="20667" fg:w="50"/><text x="18.5111%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (75 samples, 0.07%)</title><rect x="18.3053%" y="501" width="0.0663%" height="15" fill="rgb(207,36,27)" fg:x="20717" fg:w="75"/><text x="18.5553%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (74 samples, 0.07%)</title><rect x="18.3062%" y="485" width="0.0654%" height="15" fill="rgb(217,90,24)" fg:x="20718" fg:w="74"/><text x="18.5562%" y="495.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (74 samples, 0.07%)</title><rect x="18.3062%" y="469" width="0.0654%" height="15" fill="rgb(224,66,35)" fg:x="20718" fg:w="74"/><text x="18.5562%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (73 samples, 0.06%)</title><rect x="18.3070%" y="453" width="0.0645%" height="15" fill="rgb(221,13,50)" fg:x="20719" fg:w="73"/><text x="18.5570%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (73 samples, 0.06%)</title><rect x="18.3070%" y="437" width="0.0645%" height="15" fill="rgb(236,68,49)" fg:x="20719" fg:w="73"/><text x="18.5570%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (73 samples, 0.06%)</title><rect x="18.3070%" y="421" width="0.0645%" height="15" fill="rgb(229,146,28)" fg:x="20719" fg:w="73"/><text x="18.5570%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_swap (73 samples, 0.06%)</title><rect x="18.3070%" y="405" width="0.0645%" height="15" fill="rgb(225,31,38)" fg:x="20719" fg:w="73"/><text x="18.5570%" y="415.50"></text></g><g><title>event_listener::Inner::lock (20 samples, 0.02%)</title><rect x="18.3733%" y="501" width="0.0177%" height="15" fill="rgb(250,208,3)" fg:x="20794" fg:w="20"/><text x="18.6233%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (17 samples, 0.02%)</title><rect x="18.3760%" y="485" width="0.0150%" height="15" fill="rgb(246,54,23)" fg:x="20797" fg:w="17"/><text x="18.6260%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (17 samples, 0.02%)</title><rect x="18.3760%" y="469" width="0.0150%" height="15" fill="rgb(243,76,11)" fg:x="20797" fg:w="17"/><text x="18.6260%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (17 samples, 0.02%)</title><rect x="18.3760%" y="453" width="0.0150%" height="15" fill="rgb(245,21,50)" fg:x="20797" fg:w="17"/><text x="18.6260%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (17 samples, 0.02%)</title><rect x="18.3760%" y="437" width="0.0150%" height="15" fill="rgb(228,9,43)" fg:x="20797" fg:w="17"/><text x="18.6260%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (17 samples, 0.02%)</title><rect x="18.3760%" y="421" width="0.0150%" height="15" fill="rgb(208,100,47)" fg:x="20797" fg:w="17"/><text x="18.6260%" y="431.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,727 samples, 4.18%)</title><rect x="14.2478%" y="597" width="4.1767%" height="15" fill="rgb(232,26,8)" fg:x="16125" fg:w="4727"/><text x="14.4978%" y="607.50">&lt;asyn..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (4,727 samples, 4.18%)</title><rect x="14.2478%" y="581" width="4.1767%" height="15" fill="rgb(216,166,38)" fg:x="16125" fg:w="4727"/><text x="14.4978%" y="591.50">&lt;trem..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (4,727 samples, 4.18%)</title><rect x="14.2478%" y="565" width="4.1767%" height="15" fill="rgb(251,202,51)" fg:x="16125" fg:w="4727"/><text x="14.4978%" y="575.50">&lt;asyn..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (4,727 samples, 4.18%)</title><rect x="14.2478%" y="549" width="4.1767%" height="15" fill="rgb(254,216,34)" fg:x="16125" fg:w="4727"/><text x="14.4978%" y="559.50">&lt;asyn..</text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (4,727 samples, 4.18%)</title><rect x="14.2478%" y="533" width="4.1767%" height="15" fill="rgb(251,32,27)" fg:x="16125" fg:w="4727"/><text x="14.4978%" y="543.50">&lt;asyn..</text></g><g><title>event_listener::Event::listen (195 samples, 0.17%)</title><rect x="18.2523%" y="517" width="0.1723%" height="15" fill="rgb(208,127,28)" fg:x="20657" fg:w="195"/><text x="18.5023%" y="527.50"></text></g><g><title>event_listener::full_fence (32 samples, 0.03%)</title><rect x="18.3963%" y="501" width="0.0283%" height="15" fill="rgb(224,137,22)" fg:x="20820" fg:w="32"/><text x="18.6463%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (30 samples, 0.03%)</title><rect x="18.3981%" y="485" width="0.0265%" height="15" fill="rgb(254,70,32)" fg:x="20822" fg:w="30"/><text x="18.6481%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (30 samples, 0.03%)</title><rect x="18.3981%" y="469" width="0.0265%" height="15" fill="rgb(229,75,37)" fg:x="20822" fg:w="30"/><text x="18.6481%" y="479.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (94 samples, 0.08%)</title><rect x="18.4537%" y="501" width="0.0831%" height="15" fill="rgb(252,64,23)" fg:x="20885" fg:w="94"/><text x="18.7037%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (59 samples, 0.05%)</title><rect x="18.5757%" y="469" width="0.0521%" height="15" fill="rgb(232,162,48)" fg:x="21023" fg:w="59"/><text x="18.8257%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (59 samples, 0.05%)</title><rect x="18.5757%" y="453" width="0.0521%" height="15" fill="rgb(246,160,12)" fg:x="21023" fg:w="59"/><text x="18.8257%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (57 samples, 0.05%)</title><rect x="18.5774%" y="437" width="0.0504%" height="15" fill="rgb(247,166,0)" fg:x="21025" fg:w="57"/><text x="18.8274%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (57 samples, 0.05%)</title><rect x="18.5774%" y="421" width="0.0504%" height="15" fill="rgb(249,219,21)" fg:x="21025" fg:w="57"/><text x="18.8274%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (57 samples, 0.05%)</title><rect x="18.5774%" y="405" width="0.0504%" height="15" fill="rgb(205,209,3)" fg:x="21025" fg:w="57"/><text x="18.8274%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (57 samples, 0.05%)</title><rect x="18.5774%" y="389" width="0.0504%" height="15" fill="rgb(243,44,1)" fg:x="21025" fg:w="57"/><text x="18.8274%" y="399.50"></text></g><g><title>alloc::alloc::alloc (56 samples, 0.05%)</title><rect x="18.5783%" y="373" width="0.0495%" height="15" fill="rgb(206,159,16)" fg:x="21026" fg:w="56"/><text x="18.8283%" y="383.50"></text></g><g><title>__rg_alloc (56 samples, 0.05%)</title><rect x="18.5783%" y="357" width="0.0495%" height="15" fill="rgb(244,77,30)" fg:x="21026" fg:w="56"/><text x="18.8283%" y="367.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (56 samples, 0.05%)</title><rect x="18.5783%" y="341" width="0.0495%" height="15" fill="rgb(218,69,12)" fg:x="21026" fg:w="56"/><text x="18.8283%" y="351.50"></text></g><g><title>sn_rust_alloc (46 samples, 0.04%)</title><rect x="18.5871%" y="325" width="0.0406%" height="15" fill="rgb(212,87,7)" fg:x="21036" fg:w="46"/><text x="18.8371%" y="335.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_map::{{closure}} (20 samples, 0.02%)</title><rect x="18.7347%" y="389" width="0.0177%" height="15" fill="rgb(245,114,25)" fg:x="21203" fg:w="20"/><text x="18.9847%" y="399.50"></text></g><g><title>rmp::encode::write_map_len (20 samples, 0.02%)</title><rect x="18.7347%" y="373" width="0.0177%" height="15" fill="rgb(210,61,42)" fg:x="21203" fg:w="20"/><text x="18.9847%" y="383.50"></text></g><g><title>rmp::encode::write_marker (13 samples, 0.01%)</title><rect x="18.7409%" y="357" width="0.0115%" height="15" fill="rgb(211,52,33)" fg:x="21210" fg:w="13"/><text x="18.9909%" y="367.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_map (23 samples, 0.02%)</title><rect x="18.7347%" y="421" width="0.0203%" height="15" fill="rgb(234,58,33)" fg:x="21203" fg:w="23"/><text x="18.9847%" y="431.50"></text></g><g><title>rmp_serde::encode::Serializer&lt;W,C&gt;::maybe_unknown_len_compound (23 samples, 0.02%)</title><rect x="18.7347%" y="405" width="0.0203%" height="15" fill="rgb(220,115,36)" fg:x="21203" fg:w="23"/><text x="18.9847%" y="415.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::deref::Deref&gt;::deref (319 samples, 0.28%)</title><rect x="18.7550%" y="421" width="0.2819%" height="15" fill="rgb(243,153,54)" fg:x="21226" fg:w="319"/><text x="19.0050%" y="431.50"></text></g><g><title>beef::generic::Cow&lt;T,U&gt;::borrow (319 samples, 0.28%)</title><rect x="18.7550%" y="405" width="0.2819%" height="15" fill="rgb(251,47,18)" fg:x="21226" fg:w="319"/><text x="19.0050%" y="415.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (68 samples, 0.06%)</title><rect x="19.0369%" y="421" width="0.0601%" height="15" fill="rgb(242,102,42)" fg:x="21545" fg:w="68"/><text x="19.2869%" y="431.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::len (117 samples, 0.10%)</title><rect x="19.1120%" y="421" width="0.1034%" height="15" fill="rgb(234,31,38)" fg:x="21630" fg:w="117"/><text x="19.3620%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (77 samples, 0.07%)</title><rect x="19.2737%" y="373" width="0.0680%" height="15" fill="rgb(221,117,51)" fg:x="21813" fg:w="77"/><text x="19.5237%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (63 samples, 0.06%)</title><rect x="19.5582%" y="197" width="0.0557%" height="15" fill="rgb(212,20,18)" fg:x="22135" fg:w="63"/><text x="19.8082%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (62 samples, 0.05%)</title><rect x="19.5591%" y="181" width="0.0548%" height="15" fill="rgb(245,133,36)" fg:x="22136" fg:w="62"/><text x="19.8091%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (103 samples, 0.09%)</title><rect x="19.5282%" y="229" width="0.0910%" height="15" fill="rgb(212,6,19)" fg:x="22101" fg:w="103"/><text x="19.7782%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (87 samples, 0.08%)</title><rect x="19.5423%" y="213" width="0.0769%" height="15" fill="rgb(218,1,36)" fg:x="22117" fg:w="87"/><text x="19.7923%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (939 samples, 0.83%)</title><rect x="19.6192%" y="229" width="0.8297%" height="15" fill="rgb(246,84,54)" fg:x="22204" fg:w="939"/><text x="19.8692%" y="239.50"></text></g><g><title>[libc-2.31.so] (877 samples, 0.77%)</title><rect x="19.6740%" y="213" width="0.7749%" height="15" fill="rgb(242,110,6)" fg:x="22266" fg:w="877"/><text x="19.9240%" y="223.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (1,125 samples, 0.99%)</title><rect x="19.4610%" y="325" width="0.9940%" height="15" fill="rgb(214,47,5)" fg:x="22025" fg:w="1125"/><text x="19.7110%" y="335.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1,125 samples, 0.99%)</title><rect x="19.4610%" y="309" width="0.9940%" height="15" fill="rgb(218,159,25)" fg:x="22025" fg:w="1125"/><text x="19.7110%" y="319.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1,125 samples, 0.99%)</title><rect x="19.4610%" y="293" width="0.9940%" height="15" fill="rgb(215,211,28)" fg:x="22025" fg:w="1125"/><text x="19.7110%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1,125 samples, 0.99%)</title><rect x="19.4610%" y="277" width="0.9940%" height="15" fill="rgb(238,59,32)" fg:x="22025" fg:w="1125"/><text x="19.7110%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1,125 samples, 0.99%)</title><rect x="19.4610%" y="261" width="0.9940%" height="15" fill="rgb(226,82,3)" fg:x="22025" fg:w="1125"/><text x="19.7110%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1,125 samples, 0.99%)</title><rect x="19.4610%" y="245" width="0.9940%" height="15" fill="rgb(240,164,32)" fg:x="22025" fg:w="1125"/><text x="19.7110%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (58 samples, 0.05%)</title><rect x="20.6936%" y="181" width="0.0512%" height="15" fill="rgb(232,46,7)" fg:x="23420" fg:w="58"/><text x="20.9436%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (57 samples, 0.05%)</title><rect x="20.6945%" y="165" width="0.0504%" height="15" fill="rgb(229,129,53)" fg:x="23421" fg:w="57"/><text x="20.9445%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (52 samples, 0.05%)</title><rect x="20.6989%" y="149" width="0.0459%" height="15" fill="rgb(234,188,29)" fg:x="23426" fg:w="52"/><text x="20.9489%" y="159.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (209 samples, 0.18%)</title><rect x="20.6380%" y="293" width="0.1847%" height="15" fill="rgb(246,141,4)" fg:x="23357" fg:w="209"/><text x="20.8880%" y="303.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (209 samples, 0.18%)</title><rect x="20.6380%" y="277" width="0.1847%" height="15" fill="rgb(229,23,39)" fg:x="23357" fg:w="209"/><text x="20.8880%" y="287.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (209 samples, 0.18%)</title><rect x="20.6380%" y="261" width="0.1847%" height="15" fill="rgb(206,12,3)" fg:x="23357" fg:w="209"/><text x="20.8880%" y="271.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (209 samples, 0.18%)</title><rect x="20.6380%" y="245" width="0.1847%" height="15" fill="rgb(252,226,20)" fg:x="23357" fg:w="209"/><text x="20.8880%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (209 samples, 0.18%)</title><rect x="20.6380%" y="229" width="0.1847%" height="15" fill="rgb(216,123,35)" fg:x="23357" fg:w="209"/><text x="20.8880%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (209 samples, 0.18%)</title><rect x="20.6380%" y="213" width="0.1847%" height="15" fill="rgb(212,68,40)" fg:x="23357" fg:w="209"/><text x="20.8880%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (209 samples, 0.18%)</title><rect x="20.6380%" y="197" width="0.1847%" height="15" fill="rgb(254,125,32)" fg:x="23357" fg:w="209"/><text x="20.8880%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (88 samples, 0.08%)</title><rect x="20.7449%" y="181" width="0.0778%" height="15" fill="rgb(253,97,22)" fg:x="23478" fg:w="88"/><text x="20.9949%" y="191.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeMap&gt;::serialize_key (1,998 samples, 1.77%)</title><rect x="19.2737%" y="405" width="1.7654%" height="15" fill="rgb(241,101,14)" fg:x="21813" fg:w="1998"/><text x="19.5237%" y="415.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeSeq&gt;::serialize_element (1,998 samples, 1.77%)</title><rect x="19.2737%" y="389" width="1.7654%" height="15" fill="rgb(238,103,29)" fg:x="21813" fg:w="1998"/><text x="19.5237%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for str&gt;::serialize (1,921 samples, 1.70%)</title><rect x="19.3417%" y="373" width="1.6974%" height="15" fill="rgb(233,195,47)" fg:x="21890" fg:w="1921"/><text x="19.5917%" y="383.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_str (1,921 samples, 1.70%)</title><rect x="19.3417%" y="357" width="1.6974%" height="15" fill="rgb(246,218,30)" fg:x="21890" fg:w="1921"/><text x="19.5917%" y="367.50"></text></g><g><title>rmp::encode::str::write_str (1,796 samples, 1.59%)</title><rect x="19.4522%" y="341" width="1.5869%" height="15" fill="rgb(219,145,47)" fg:x="22015" fg:w="1796"/><text x="19.7022%" y="351.50"></text></g><g><title>rmp::encode::str::write_str_len (661 samples, 0.58%)</title><rect x="20.4550%" y="325" width="0.5841%" height="15" fill="rgb(243,12,26)" fg:x="23150" fg:w="661"/><text x="20.7050%" y="335.50"></text></g><g><title>rmp::encode::write_marker (460 samples, 0.41%)</title><rect x="20.6326%" y="309" width="0.4065%" height="15" fill="rgb(214,87,16)" fg:x="23351" fg:w="460"/><text x="20.8826%" y="319.50"></text></g><g><title>rmp::marker::Marker::to_u8 (245 samples, 0.22%)</title><rect x="20.8226%" y="293" width="0.2165%" height="15" fill="rgb(208,99,42)" fg:x="23566" fg:w="245"/><text x="21.0726%" y="303.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager&lt;S&gt;::run::{{closure}} (7,742 samples, 6.84%)</title><rect x="14.2478%" y="613" width="6.8407%" height="15" fill="rgb(253,99,2)" fg:x="16125" fg:w="7742"/><text x="14.4978%" y="623.50">tremor_ru..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (3,015 samples, 2.66%)</title><rect x="18.4246%" y="597" width="2.6640%" height="15" fill="rgb(220,168,23)" fg:x="20852" fg:w="3015"/><text x="18.6746%" y="607.50">&lt;c..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,015 samples, 2.66%)</title><rect x="18.4246%" y="581" width="2.6640%" height="15" fill="rgb(242,38,24)" fg:x="20852" fg:w="3015"/><text x="18.6746%" y="591.50">&lt;c..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::Sink&gt;::on_event::{{closure}} (3,015 samples, 2.66%)</title><rect x="18.4246%" y="565" width="2.6640%" height="15" fill="rgb(225,182,9)" fg:x="20852" fg:w="3015"/><text x="18.6746%" y="575.50">&lt;t..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize (3,015 samples, 2.66%)</title><rect x="18.4246%" y="549" width="2.6640%" height="15" fill="rgb(243,178,37)" fg:x="20852" fg:w="3015"/><text x="18.6746%" y="559.50">tr..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize_for_stream (3,015 samples, 2.66%)</title><rect x="18.4246%" y="533" width="2.6640%" height="15" fill="rgb(232,139,19)" fg:x="20852" fg:w="3015"/><text x="18.6746%" y="543.50">tr..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize_for_stream_with_codec (3,015 samples, 2.66%)</title><rect x="18.4246%" y="517" width="2.6640%" height="15" fill="rgb(225,201,24)" fg:x="20852" fg:w="3015"/><text x="18.6746%" y="527.50">tr..</text></g><g><title>&lt;tremor_runtime::codec::msgpack::MsgPack as tremor_runtime::codec::Codec&gt;::encode (2,888 samples, 2.55%)</title><rect x="18.5368%" y="501" width="2.5518%" height="15" fill="rgb(221,47,46)" fg:x="20979" fg:w="2888"/><text x="18.7868%" y="511.50">&lt;t..</text></g><g><title>rmp_serde::encode::to_vec (2,860 samples, 2.53%)</title><rect x="18.5615%" y="485" width="2.5271%" height="15" fill="rgb(249,23,13)" fg:x="21007" fg:w="2860"/><text x="18.8115%" y="495.50">rm..</text></g><g><title>rmp_serde::encode::write (2,785 samples, 2.46%)</title><rect x="18.6278%" y="469" width="2.4608%" height="15" fill="rgb(219,9,5)" fg:x="21082" fg:w="2785"/><text x="18.8778%" y="479.50">rm..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2,779 samples, 2.46%)</title><rect x="18.6331%" y="453" width="2.4555%" height="15" fill="rgb(254,171,16)" fg:x="21088" fg:w="2779"/><text x="18.8831%" y="463.50">se..</text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (2,773 samples, 2.45%)</title><rect x="18.6384%" y="437" width="2.4502%" height="15" fill="rgb(230,171,20)" fg:x="21094" fg:w="2773"/><text x="18.8884%" y="447.50">tr..</text></g><g><title>serde::ser::SerializeMap::serialize_entry (2,120 samples, 1.87%)</title><rect x="19.2154%" y="421" width="1.8732%" height="15" fill="rgb(210,71,41)" fg:x="21747" fg:w="2120"/><text x="19.4654%" y="431.50">s..</text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeMap&gt;::serialize_value (56 samples, 0.05%)</title><rect x="21.0391%" y="405" width="0.0495%" height="15" fill="rgb(206,173,20)" fg:x="23811" fg:w="56"/><text x="21.2891%" y="415.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeSeq&gt;::serialize_element (56 samples, 0.05%)</title><rect x="21.0391%" y="389" width="0.0495%" height="15" fill="rgb(233,88,34)" fg:x="23811" fg:w="56"/><text x="21.2891%" y="399.50"></text></g><g><title>[libc-2.31.so] (173 samples, 0.15%)</title><rect x="21.3112%" y="581" width="0.1529%" height="15" fill="rgb(223,209,46)" fg:x="24119" fg:w="173"/><text x="21.5612%" y="591.50"></text></g><g><title>[libc-2.31.so] (207 samples, 0.18%)</title><rect x="21.6656%" y="549" width="0.1829%" height="15" fill="rgb(250,43,18)" fg:x="24520" fg:w="207"/><text x="21.9156%" y="559.50"></text></g><g><title>[libc-2.31.so] (85 samples, 0.08%)</title><rect x="22.0057%" y="533" width="0.0751%" height="15" fill="rgb(208,13,10)" fg:x="24905" fg:w="85"/><text x="22.2557%" y="543.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (122 samples, 0.11%)</title><rect x="22.0959%" y="469" width="0.1078%" height="15" fill="rgb(212,200,36)" fg:x="25007" fg:w="122"/><text x="22.3459%" y="479.50"></text></g><g><title>alloc::alloc::exchange_malloc (66 samples, 0.06%)</title><rect x="22.1454%" y="453" width="0.0583%" height="15" fill="rgb(225,90,30)" fg:x="25063" fg:w="66"/><text x="22.3954%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (66 samples, 0.06%)</title><rect x="22.1454%" y="437" width="0.0583%" height="15" fill="rgb(236,182,39)" fg:x="25063" fg:w="66"/><text x="22.3954%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (66 samples, 0.06%)</title><rect x="22.1454%" y="421" width="0.0583%" height="15" fill="rgb(212,144,35)" fg:x="25063" fg:w="66"/><text x="22.3954%" y="431.50"></text></g><g><title>alloc::alloc::alloc (66 samples, 0.06%)</title><rect x="22.1454%" y="405" width="0.0583%" height="15" fill="rgb(228,63,44)" fg:x="25063" fg:w="66"/><text x="22.3954%" y="415.50"></text></g><g><title>__rg_alloc (66 samples, 0.06%)</title><rect x="22.1454%" y="389" width="0.0583%" height="15" fill="rgb(228,109,6)" fg:x="25063" fg:w="66"/><text x="22.3954%" y="399.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (66 samples, 0.06%)</title><rect x="22.1454%" y="373" width="0.0583%" height="15" fill="rgb(238,117,24)" fg:x="25063" fg:w="66"/><text x="22.3954%" y="383.50"></text></g><g><title>sn_rust_alloc (62 samples, 0.05%)</title><rect x="22.1489%" y="357" width="0.0548%" height="15" fill="rgb(242,26,26)" fg:x="25067" fg:w="62"/><text x="22.3989%" y="367.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (45 samples, 0.04%)</title><rect x="22.1639%" y="341" width="0.0398%" height="15" fill="rgb(221,92,48)" fg:x="25084" fg:w="45"/><text x="22.4139%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (141 samples, 0.12%)</title><rect x="22.0817%" y="533" width="0.1246%" height="15" fill="rgb(209,209,32)" fg:x="24991" fg:w="141"/><text x="22.3317%" y="543.50"></text></g><g><title>core::ops::function::FnOnce::call_once (138 samples, 0.12%)</title><rect x="22.0844%" y="517" width="0.1219%" height="15" fill="rgb(221,70,22)" fg:x="24994" fg:w="138"/><text x="22.3344%" y="527.50"></text></g><g><title>value_trait::Builder::object (131 samples, 0.12%)</title><rect x="22.0906%" y="501" width="0.1157%" height="15" fill="rgb(248,145,5)" fg:x="25001" fg:w="131"/><text x="22.3406%" y="511.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (125 samples, 0.11%)</title><rect x="22.0959%" y="485" width="0.1104%" height="15" fill="rgb(226,116,26)" fg:x="25007" fg:w="125"/><text x="22.3459%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (46 samples, 0.04%)</title><rect x="22.2222%" y="453" width="0.0406%" height="15" fill="rgb(244,5,17)" fg:x="25150" fg:w="46"/><text x="22.4722%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (46 samples, 0.04%)</title><rect x="22.2222%" y="437" width="0.0406%" height="15" fill="rgb(252,159,33)" fg:x="25150" fg:w="46"/><text x="22.4722%" y="447.50"></text></g><g><title>__rg_dealloc (46 samples, 0.04%)</title><rect x="22.2222%" y="421" width="0.0406%" height="15" fill="rgb(206,71,0)" fg:x="25150" fg:w="46"/><text x="22.4722%" y="431.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (46 samples, 0.04%)</title><rect x="22.2222%" y="405" width="0.0406%" height="15" fill="rgb(233,118,54)" fg:x="25150" fg:w="46"/><text x="22.4722%" y="415.50"></text></g><g><title>sn_rust_dealloc (46 samples, 0.04%)</title><rect x="22.2222%" y="389" width="0.0406%" height="15" fill="rgb(234,83,48)" fg:x="25150" fg:w="46"/><text x="22.4722%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (54 samples, 0.05%)</title><rect x="22.2187%" y="517" width="0.0477%" height="15" fill="rgb(228,3,54)" fg:x="25146" fg:w="54"/><text x="22.4687%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (54 samples, 0.05%)</title><rect x="22.2187%" y="501" width="0.0477%" height="15" fill="rgb(226,155,13)" fg:x="25146" fg:w="54"/><text x="22.4687%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (54 samples, 0.05%)</title><rect x="22.2187%" y="485" width="0.0477%" height="15" fill="rgb(241,28,37)" fg:x="25146" fg:w="54"/><text x="22.4687%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (54 samples, 0.05%)</title><rect x="22.2187%" y="469" width="0.0477%" height="15" fill="rgb(233,93,10)" fg:x="25146" fg:w="54"/><text x="22.4687%" y="479.50"></text></g><g><title>sn_rust_dealloc (36 samples, 0.03%)</title><rect x="22.2805%" y="341" width="0.0318%" height="15" fill="rgb(225,113,19)" fg:x="25216" fg:w="36"/><text x="22.5305%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (47 samples, 0.04%)</title><rect x="22.2735%" y="405" width="0.0415%" height="15" fill="rgb(241,2,18)" fg:x="25208" fg:w="47"/><text x="22.5235%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (47 samples, 0.04%)</title><rect x="22.2735%" y="389" width="0.0415%" height="15" fill="rgb(228,207,21)" fg:x="25208" fg:w="47"/><text x="22.5235%" y="399.50"></text></g><g><title>__rg_dealloc (47 samples, 0.04%)</title><rect x="22.2735%" y="373" width="0.0415%" height="15" fill="rgb(213,211,35)" fg:x="25208" fg:w="47"/><text x="22.5235%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (47 samples, 0.04%)</title><rect x="22.2735%" y="357" width="0.0415%" height="15" fill="rgb(209,83,10)" fg:x="25208" fg:w="47"/><text x="22.5235%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (61 samples, 0.05%)</title><rect x="22.2664%" y="501" width="0.0539%" height="15" fill="rgb(209,164,1)" fg:x="25200" fg:w="61"/><text x="22.5164%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (61 samples, 0.05%)</title><rect x="22.2664%" y="485" width="0.0539%" height="15" fill="rgb(213,184,43)" fg:x="25200" fg:w="61"/><text x="22.5164%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (56 samples, 0.05%)</title><rect x="22.2708%" y="469" width="0.0495%" height="15" fill="rgb(231,61,34)" fg:x="25205" fg:w="56"/><text x="22.5208%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (56 samples, 0.05%)</title><rect x="22.2708%" y="453" width="0.0495%" height="15" fill="rgb(235,75,3)" fg:x="25205" fg:w="56"/><text x="22.5208%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (56 samples, 0.05%)</title><rect x="22.2708%" y="437" width="0.0495%" height="15" fill="rgb(220,106,47)" fg:x="25205" fg:w="56"/><text x="22.5208%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (56 samples, 0.05%)</title><rect x="22.2708%" y="421" width="0.0495%" height="15" fill="rgb(210,196,33)" fg:x="25205" fg:w="56"/><text x="22.5208%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (120 samples, 0.11%)</title><rect x="22.2187%" y="533" width="0.1060%" height="15" fill="rgb(229,154,42)" fg:x="25146" fg:w="120"/><text x="22.4687%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (66 samples, 0.06%)</title><rect x="22.2664%" y="517" width="0.0583%" height="15" fill="rgb(228,114,26)" fg:x="25200" fg:w="66"/><text x="22.5164%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (33 samples, 0.03%)</title><rect x="22.3247%" y="533" width="0.0292%" height="15" fill="rgb(208,144,1)" fg:x="25266" fg:w="33"/><text x="22.5747%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt;&gt; (23 samples, 0.02%)</title><rect x="22.3336%" y="517" width="0.0203%" height="15" fill="rgb(239,112,37)" fg:x="25276" fg:w="23"/><text x="22.5836%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (19 samples, 0.02%)</title><rect x="22.3371%" y="501" width="0.0168%" height="15" fill="rgb(210,96,50)" fg:x="25280" fg:w="19"/><text x="22.5871%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (19 samples, 0.02%)</title><rect x="22.3371%" y="485" width="0.0168%" height="15" fill="rgb(222,178,2)" fg:x="25280" fg:w="19"/><text x="22.5871%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::vecmap::VecMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (13 samples, 0.01%)</title><rect x="22.3424%" y="469" width="0.0115%" height="15" fill="rgb(226,74,18)" fg:x="25286" fg:w="13"/><text x="22.5924%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)&gt;&gt; (13 samples, 0.01%)</title><rect x="22.3424%" y="453" width="0.0115%" height="15" fill="rgb(225,67,54)" fg:x="25286" fg:w="13"/><text x="22.5924%" y="463.50"></text></g><g><title>sn_rust_dealloc (53 samples, 0.05%)</title><rect x="22.3539%" y="533" width="0.0468%" height="15" fill="rgb(251,92,32)" fg:x="25299" fg:w="53"/><text x="22.6039%" y="543.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (12 samples, 0.01%)</title><rect x="22.4078%" y="517" width="0.0106%" height="15" fill="rgb(228,149,22)" fg:x="25360" fg:w="12"/><text x="22.6578%" y="527.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (54 samples, 0.05%)</title><rect x="22.4281%" y="501" width="0.0477%" height="15" fill="rgb(243,54,13)" fg:x="25383" fg:w="54"/><text x="22.6781%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (20 samples, 0.02%)</title><rect x="22.4935%" y="469" width="0.0177%" height="15" fill="rgb(243,180,28)" fg:x="25457" fg:w="20"/><text x="22.7435%" y="479.50"></text></g><g><title>core::cmp::PartialOrd::ge (20 samples, 0.02%)</title><rect x="22.4935%" y="453" width="0.0177%" height="15" fill="rgb(208,167,24)" fg:x="25457" fg:w="20"/><text x="22.7435%" y="463.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (20 samples, 0.02%)</title><rect x="22.4935%" y="437" width="0.0177%" height="15" fill="rgb(245,73,45)" fg:x="25457" fg:w="20"/><text x="22.7435%" y="447.50"></text></g><g><title>std::time::SystemTime::duration_since (109 samples, 0.10%)</title><rect x="22.4281%" y="517" width="0.0963%" height="15" fill="rgb(237,203,48)" fg:x="25383" fg:w="109"/><text x="22.6781%" y="527.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (55 samples, 0.05%)</title><rect x="22.4758%" y="501" width="0.0486%" height="15" fill="rgb(211,197,16)" fg:x="25437" fg:w="55"/><text x="22.7258%" y="511.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (55 samples, 0.05%)</title><rect x="22.4758%" y="485" width="0.0486%" height="15" fill="rgb(243,99,51)" fg:x="25437" fg:w="55"/><text x="22.7258%" y="495.50"></text></g><g><title>core::time::Duration::new (15 samples, 0.01%)</title><rect x="22.5112%" y="469" width="0.0133%" height="15" fill="rgb(215,123,29)" fg:x="25477" fg:w="15"/><text x="22.7612%" y="479.50"></text></g><g><title>tremor_common::time::nanotime (414 samples, 0.37%)</title><rect x="22.4007%" y="533" width="0.3658%" height="15" fill="rgb(239,186,37)" fg:x="25352" fg:w="414"/><text x="22.6507%" y="543.50"></text></g><g><title>std::time::SystemTime::now (274 samples, 0.24%)</title><rect x="22.5244%" y="517" width="0.2421%" height="15" fill="rgb(252,136,39)" fg:x="25492" fg:w="274"/><text x="22.7744%" y="527.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (274 samples, 0.24%)</title><rect x="22.5244%" y="501" width="0.2421%" height="15" fill="rgb(223,213,32)" fg:x="25492" fg:w="274"/><text x="22.7744%" y="511.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (274 samples, 0.24%)</title><rect x="22.5244%" y="485" width="0.2421%" height="15" fill="rgb(233,115,5)" fg:x="25492" fg:w="274"/><text x="22.7744%" y="495.50"></text></g><g><title>__clock_gettime (215 samples, 0.19%)</title><rect x="22.5765%" y="469" width="0.1900%" height="15" fill="rgb(207,226,44)" fg:x="25551" fg:w="215"/><text x="22.8265%" y="479.50"></text></g><g><title>__vdso_clock_gettime (210 samples, 0.19%)</title><rect x="22.5810%" y="453" width="0.1856%" height="15" fill="rgb(208,126,0)" fg:x="25556" fg:w="210"/><text x="22.8310%" y="463.50"></text></g><g><title>[[vdso]] (192 samples, 0.17%)</title><rect x="22.5969%" y="437" width="0.1696%" height="15" fill="rgb(244,66,21)" fg:x="25574" fg:w="192"/><text x="22.8469%" y="447.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,291 samples, 1.14%)</title><rect x="21.6620%" y="565" width="1.1407%" height="15" fill="rgb(222,97,12)" fg:x="24516" fg:w="1291"/><text x="21.9120%" y="575.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_data::{{closure}} (1,080 samples, 0.95%)</title><rect x="21.8485%" y="549" width="0.9543%" height="15" fill="rgb(219,213,19)" fg:x="24727" fg:w="1080"/><text x="22.0985%" y="559.50"></text></g><g><title>tremor_runtime::connectors::source::Streams::get_or_create_stream (41 samples, 0.04%)</title><rect x="22.7665%" y="533" width="0.0362%" height="15" fill="rgb(252,169,30)" fg:x="25766" fg:w="41"/><text x="23.0165%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (37 samples, 0.03%)</title><rect x="22.7700%" y="517" width="0.0327%" height="15" fill="rgb(206,32,51)" fg:x="25770" fg:w="37"/><text x="23.0200%" y="527.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (28 samples, 0.02%)</title><rect x="22.7780%" y="501" width="0.0247%" height="15" fill="rgb(250,172,42)" fg:x="25779" fg:w="28"/><text x="23.0280%" y="511.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (28 samples, 0.02%)</title><rect x="22.7780%" y="485" width="0.0247%" height="15" fill="rgb(209,34,43)" fg:x="25779" fg:w="28"/><text x="23.0280%" y="495.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (28 samples, 0.02%)</title><rect x="22.7780%" y="469" width="0.0247%" height="15" fill="rgb(223,11,35)" fg:x="25779" fg:w="28"/><text x="23.0280%" y="479.50"></text></g><g><title>[libc-2.31.so] (168 samples, 0.15%)</title><rect x="22.8054%" y="565" width="0.1484%" height="15" fill="rgb(251,219,26)" fg:x="25810" fg:w="168"/><text x="23.0554%" y="575.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,869 samples, 1.65%)</title><rect x="21.3112%" y="597" width="1.6514%" height="15" fill="rgb(231,119,3)" fg:x="24119" fg:w="1869"/><text x="21.5612%" y="607.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_source_reply::{{closure}} (1,696 samples, 1.50%)</title><rect x="21.4641%" y="581" width="1.4986%" height="15" fill="rgb(216,97,11)" fg:x="24292" fg:w="1696"/><text x="21.7141%" y="591.50"></text></g><g><title>[libc-2.31.so] (292 samples, 0.26%)</title><rect x="23.2039%" y="581" width="0.2580%" height="15" fill="rgb(223,59,9)" fg:x="26261" fg:w="292"/><text x="23.4539%" y="591.50"></text></g><g><title>sn_rust_dealloc (36 samples, 0.03%)</title><rect x="23.4681%" y="469" width="0.0318%" height="15" fill="rgb(233,93,31)" fg:x="26560" fg:w="36"/><text x="23.7181%" y="479.50"></text></g><g><title>alloc::alloc::box_free (43 samples, 0.04%)</title><rect x="23.4628%" y="549" width="0.0380%" height="15" fill="rgb(239,81,33)" fg:x="26554" fg:w="43"/><text x="23.7128%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (43 samples, 0.04%)</title><rect x="23.4628%" y="533" width="0.0380%" height="15" fill="rgb(213,120,34)" fg:x="26554" fg:w="43"/><text x="23.7128%" y="543.50"></text></g><g><title>alloc::alloc::dealloc (42 samples, 0.04%)</title><rect x="23.4637%" y="517" width="0.0371%" height="15" fill="rgb(243,49,53)" fg:x="26555" fg:w="42"/><text x="23.7137%" y="527.50"></text></g><g><title>__rg_dealloc (42 samples, 0.04%)</title><rect x="23.4637%" y="501" width="0.0371%" height="15" fill="rgb(247,216,33)" fg:x="26555" fg:w="42"/><text x="23.7137%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (42 samples, 0.04%)</title><rect x="23.4637%" y="485" width="0.0371%" height="15" fill="rgb(226,26,14)" fg:x="26555" fg:w="42"/><text x="23.7137%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;tremor_runtime::connectors::source::SourceReply,tremor_runtime::errors::Error&gt;+core::marker::Send&gt;&gt;&gt; (44 samples, 0.04%)</title><rect x="23.4628%" y="581" width="0.0389%" height="15" fill="rgb(215,49,53)" fg:x="26554" fg:w="44"/><text x="23.7128%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;tremor_runtime::connectors::source::SourceReply,tremor_runtime::errors::Error&gt;+core::marker::Send&gt;&gt; (44 samples, 0.04%)</title><rect x="23.4628%" y="565" width="0.0389%" height="15" fill="rgb(245,162,40)" fg:x="26554" fg:w="44"/><text x="23.7128%" y="575.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (624 samples, 0.55%)</title><rect x="22.9627%" y="597" width="0.5514%" height="15" fill="rgb(229,68,17)" fg:x="25988" fg:w="624"/><text x="23.2127%" y="607.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (14 samples, 0.01%)</title><rect x="23.5017%" y="581" width="0.0124%" height="15" fill="rgb(213,182,10)" fg:x="26598" fg:w="14"/><text x="23.7517%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (152 samples, 0.13%)</title><rect x="23.6572%" y="453" width="0.1343%" height="15" fill="rgb(245,125,30)" fg:x="26774" fg:w="152"/><text x="23.9072%" y="463.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (316 samples, 0.28%)</title><rect x="23.5140%" y="581" width="0.2792%" height="15" fill="rgb(232,202,2)" fg:x="26612" fg:w="316"/><text x="23.7640%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (189 samples, 0.17%)</title><rect x="23.6262%" y="565" width="0.1670%" height="15" fill="rgb(237,140,51)" fg:x="26739" fg:w="189"/><text x="23.8762%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (189 samples, 0.17%)</title><rect x="23.6262%" y="549" width="0.1670%" height="15" fill="rgb(236,157,25)" fg:x="26739" fg:w="189"/><text x="23.8762%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (189 samples, 0.17%)</title><rect x="23.6262%" y="533" width="0.1670%" height="15" fill="rgb(219,209,0)" fg:x="26739" fg:w="189"/><text x="23.8762%" y="543.50"></text></g><g><title>alloc::alloc::alloc (188 samples, 0.17%)</title><rect x="23.6271%" y="517" width="0.1661%" height="15" fill="rgb(240,116,54)" fg:x="26740" fg:w="188"/><text x="23.8771%" y="527.50"></text></g><g><title>__rg_alloc (188 samples, 0.17%)</title><rect x="23.6271%" y="501" width="0.1661%" height="15" fill="rgb(216,10,36)" fg:x="26740" fg:w="188"/><text x="23.8771%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (188 samples, 0.17%)</title><rect x="23.6271%" y="485" width="0.1661%" height="15" fill="rgb(222,72,44)" fg:x="26740" fg:w="188"/><text x="23.8771%" y="495.50"></text></g><g><title>sn_rust_alloc (180 samples, 0.16%)</title><rect x="23.6342%" y="469" width="0.1590%" height="15" fill="rgb(232,159,9)" fg:x="26748" fg:w="180"/><text x="23.8842%" y="479.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::Source&gt;::pull_data (319 samples, 0.28%)</title><rect x="23.5140%" y="597" width="0.2819%" height="15" fill="rgb(210,39,32)" fg:x="26612" fg:w="319"/><text x="23.7640%" y="607.50"></text></g><g><title>[libc-2.31.so] (197 samples, 0.17%)</title><rect x="23.7959%" y="597" width="0.1741%" height="15" fill="rgb(216,194,45)" fg:x="26931" fg:w="197"/><text x="24.0459%" y="607.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::run::{{closure}} (3,280 samples, 2.90%)</title><rect x="21.0886%" y="613" width="2.8982%" height="15" fill="rgb(218,18,35)" fg:x="23867" fg:w="3280"/><text x="21.3386%" y="623.50">tr..</text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (12 samples, 0.01%)</title><rect x="24.2527%" y="597" width="0.0106%" height="15" fill="rgb(207,83,51)" fg:x="27448" fg:w="12"/><text x="24.5027%" y="607.50"></text></g><g><title>[libc-2.31.so] (277 samples, 0.24%)</title><rect x="24.2863%" y="581" width="0.2448%" height="15" fill="rgb(225,63,43)" fg:x="27486" fg:w="277"/><text x="24.5363%" y="591.50"></text></g><g><title>[libc-2.31.so] (371 samples, 0.33%)</title><rect x="24.5982%" y="565" width="0.3278%" height="15" fill="rgb(207,57,36)" fg:x="27839" fg:w="371"/><text x="24.8482%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (191 samples, 0.17%)</title><rect x="24.9260%" y="565" width="0.1688%" height="15" fill="rgb(216,99,33)" fg:x="28210" fg:w="191"/><text x="25.1760%" y="575.50"></text></g><g><title>core::ptr::write (180 samples, 0.16%)</title><rect x="24.9357%" y="549" width="0.1590%" height="15" fill="rgb(225,42,16)" fg:x="28221" fg:w="180"/><text x="25.1857%" y="559.50"></text></g><g><title>[libc-2.31.so] (179 samples, 0.16%)</title><rect x="24.9366%" y="533" width="0.1582%" height="15" fill="rgb(220,201,45)" fg:x="28222" fg:w="179"/><text x="25.1866%" y="543.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (453 samples, 0.40%)</title><rect x="25.1107%" y="565" width="0.4003%" height="15" fill="rgb(225,33,4)" fg:x="28419" fg:w="453"/><text x="25.3607%" y="575.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (450 samples, 0.40%)</title><rect x="25.1133%" y="549" width="0.3976%" height="15" fill="rgb(224,33,50)" fg:x="28422" fg:w="450"/><text x="25.3633%" y="559.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (438 samples, 0.39%)</title><rect x="25.1239%" y="533" width="0.3870%" height="15" fill="rgb(246,198,51)" fg:x="28434" fg:w="438"/><text x="25.3739%" y="543.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (438 samples, 0.39%)</title><rect x="25.1239%" y="517" width="0.3870%" height="15" fill="rgb(205,22,4)" fg:x="28434" fg:w="438"/><text x="25.3739%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (438 samples, 0.39%)</title><rect x="25.1239%" y="501" width="0.3870%" height="15" fill="rgb(206,3,8)" fg:x="28434" fg:w="438"/><text x="25.3739%" y="511.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (438 samples, 0.39%)</title><rect x="25.1239%" y="485" width="0.3870%" height="15" fill="rgb(251,23,15)" fg:x="28434" fg:w="438"/><text x="25.3739%" y="495.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (438 samples, 0.39%)</title><rect x="25.1239%" y="469" width="0.3870%" height="15" fill="rgb(252,88,28)" fg:x="28434" fg:w="438"/><text x="25.3739%" y="479.50"></text></g><g><title>[libc-2.31.so] (433 samples, 0.38%)</title><rect x="25.1283%" y="453" width="0.3826%" height="15" fill="rgb(212,127,14)" fg:x="28439" fg:w="433"/><text x="25.3783%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::reverse (14 samples, 0.01%)</title><rect x="25.5207%" y="549" width="0.0124%" height="15" fill="rgb(247,145,37)" fg:x="28883" fg:w="14"/><text x="25.7707%" y="559.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.02%)</title><rect x="26.3026%" y="533" width="0.0150%" height="15" fill="rgb(209,117,53)" fg:x="29768" fg:w="17"/><text x="26.5526%" y="543.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (332 samples, 0.29%)</title><rect x="26.3176%" y="533" width="0.2934%" height="15" fill="rgb(212,90,42)" fg:x="29785" fg:w="332"/><text x="26.5676%" y="543.50"></text></g><g><title>[libc-2.31.so] (271 samples, 0.24%)</title><rect x="26.3715%" y="517" width="0.2395%" height="15" fill="rgb(218,164,37)" fg:x="29846" fg:w="271"/><text x="26.6215%" y="527.50"></text></g><g><title>[libc-2.31.so] (136 samples, 0.12%)</title><rect x="26.6110%" y="533" width="0.1202%" height="15" fill="rgb(246,65,34)" fg:x="30117" fg:w="136"/><text x="26.8610%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (775 samples, 0.68%)</title><rect x="26.7312%" y="533" width="0.6848%" height="15" fill="rgb(231,100,33)" fg:x="30253" fg:w="775"/><text x="26.9812%" y="543.50"></text></g><g><title>core::ptr::read (763 samples, 0.67%)</title><rect x="26.7418%" y="517" width="0.6742%" height="15" fill="rgb(228,126,14)" fg:x="30265" fg:w="763"/><text x="26.9918%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (174 samples, 0.15%)</title><rect x="27.4159%" y="533" width="0.1537%" height="15" fill="rgb(215,173,21)" fg:x="31028" fg:w="174"/><text x="27.6659%" y="543.50"></text></g><g><title>core::ptr::write (167 samples, 0.15%)</title><rect x="27.4221%" y="517" width="0.1476%" height="15" fill="rgb(210,6,40)" fg:x="31035" fg:w="167"/><text x="27.6721%" y="527.50"></text></g><g><title>[libc-2.31.so] (167 samples, 0.15%)</title><rect x="27.4221%" y="501" width="0.1476%" height="15" fill="rgb(212,48,18)" fg:x="31035" fg:w="167"/><text x="27.6721%" y="511.50"></text></g><g><title>alloc::vec::into_iter::IntoIter&lt;T,A&gt;::as_raw_mut_slice (22 samples, 0.02%)</title><rect x="27.5971%" y="501" width="0.0194%" height="15" fill="rgb(230,214,11)" fg:x="31233" fg:w="22"/><text x="27.8471%" y="511.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (16 samples, 0.01%)</title><rect x="27.6024%" y="485" width="0.0141%" height="15" fill="rgb(254,105,39)" fg:x="31239" fg:w="16"/><text x="27.8524%" y="495.50"></text></g><g><title>core::iter::traits::exact_size::ExactSizeIterator::len (16 samples, 0.01%)</title><rect x="27.6024%" y="469" width="0.0141%" height="15" fill="rgb(245,158,5)" fg:x="31239" fg:w="16"/><text x="27.8524%" y="479.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (16 samples, 0.01%)</title><rect x="27.6024%" y="453" width="0.0141%" height="15" fill="rgb(249,208,11)" fg:x="31239" fg:w="16"/><text x="27.8524%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (16 samples, 0.01%)</title><rect x="27.6024%" y="437" width="0.0141%" height="15" fill="rgb(210,39,28)" fg:x="31239" fg:w="16"/><text x="27.8524%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;tremor_pipeline::event::Event,alloc::alloc::Global&gt;&gt; (12 samples, 0.01%)</title><rect x="27.6165%" y="501" width="0.0106%" height="15" fill="rgb(211,56,53)" fg:x="31255" fg:w="12"/><text x="27.8665%" y="511.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.01%)</title><rect x="27.6165%" y="485" width="0.0106%" height="15" fill="rgb(226,201,30)" fg:x="31255" fg:w="12"/><text x="27.8665%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;tremor_pipeline::event::Event&gt;&gt; (12 samples, 0.01%)</title><rect x="27.6165%" y="469" width="0.0106%" height="15" fill="rgb(239,101,34)" fg:x="31255" fg:w="12"/><text x="27.8665%" y="479.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.01%)</title><rect x="27.6165%" y="453" width="0.0106%" height="15" fill="rgb(226,209,5)" fg:x="31255" fg:w="12"/><text x="27.8665%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (12 samples, 0.01%)</title><rect x="27.6165%" y="437" width="0.0106%" height="15" fill="rgb(250,105,47)" fg:x="31255" fg:w="12"/><text x="27.8665%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;tremor_pipeline::event::Event&gt;&gt; (86 samples, 0.08%)</title><rect x="27.5697%" y="533" width="0.0760%" height="15" fill="rgb(230,72,3)" fg:x="31202" fg:w="86"/><text x="27.8197%" y="543.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (59 samples, 0.05%)</title><rect x="27.5935%" y="517" width="0.0521%" height="15" fill="rgb(232,218,39)" fg:x="31229" fg:w="59"/><text x="27.8435%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tremor_pipeline::event::Event]&gt; (21 samples, 0.02%)</title><rect x="27.6271%" y="501" width="0.0186%" height="15" fill="rgb(248,166,6)" fg:x="31267" fg:w="21"/><text x="27.8771%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (13 samples, 0.01%)</title><rect x="27.6457%" y="533" width="0.0115%" height="15" fill="rgb(247,89,20)" fg:x="31288" fg:w="13"/><text x="27.8957%" y="543.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="27.6457%" y="517" width="0.0115%" height="15" fill="rgb(248,130,54)" fg:x="31288" fg:w="13"/><text x="27.8957%" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (13 samples, 0.01%)</title><rect x="27.6572%" y="533" width="0.0115%" height="15" fill="rgb(234,196,4)" fg:x="31301" fg:w="13"/><text x="27.9072%" y="543.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (13 samples, 0.01%)</title><rect x="27.6572%" y="517" width="0.0115%" height="15" fill="rgb(250,143,31)" fg:x="31301" fg:w="13"/><text x="27.9072%" y="527.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (13 samples, 0.01%)</title><rect x="27.6572%" y="501" width="0.0115%" height="15" fill="rgb(211,110,34)" fg:x="31301" fg:w="13"/><text x="27.9072%" y="511.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (13 samples, 0.01%)</title><rect x="27.6572%" y="485" width="0.0115%" height="15" fill="rgb(215,124,48)" fg:x="31301" fg:w="13"/><text x="27.9072%" y="495.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (104 samples, 0.09%)</title><rect x="28.1847%" y="517" width="0.0919%" height="15" fill="rgb(216,46,13)" fg:x="31898" fg:w="104"/><text x="28.4347%" y="527.50"></text></g><g><title>core::ptr::read (59 samples, 0.05%)</title><rect x="28.2244%" y="501" width="0.0521%" height="15" fill="rgb(205,184,25)" fg:x="31943" fg:w="59"/><text x="28.4744%" y="511.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::clone::Clone&gt;::clone (14 samples, 0.01%)</title><rect x="28.2766%" y="517" width="0.0124%" height="15" fill="rgb(228,1,10)" fg:x="32002" fg:w="14"/><text x="28.5266%" y="527.50"></text></g><g><title>[libc-2.31.so] (146 samples, 0.13%)</title><rect x="28.2925%" y="517" width="0.1290%" height="15" fill="rgb(213,116,27)" fg:x="32020" fg:w="146"/><text x="28.5425%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (487 samples, 0.43%)</title><rect x="28.4215%" y="517" width="0.4303%" height="15" fill="rgb(241,95,50)" fg:x="32166" fg:w="487"/><text x="28.6715%" y="527.50"></text></g><g><title>core::ptr::write (458 samples, 0.40%)</title><rect x="28.4471%" y="501" width="0.4047%" height="15" fill="rgb(238,48,32)" fg:x="32195" fg:w="458"/><text x="28.6971%" y="511.50"></text></g><g><title>[libc-2.31.so] (452 samples, 0.40%)</title><rect x="28.4524%" y="485" width="0.3994%" height="15" fill="rgb(235,113,49)" fg:x="32201" fg:w="452"/><text x="28.7024%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (18 samples, 0.02%)</title><rect x="28.8518%" y="517" width="0.0159%" height="15" fill="rgb(205,127,43)" fg:x="32653" fg:w="18"/><text x="29.1018%" y="527.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue_events::{{closure}} (18 samples, 0.02%)</title><rect x="28.8518%" y="501" width="0.0159%" height="15" fill="rgb(250,162,2)" fg:x="32653" fg:w="18"/><text x="29.1018%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_last (15 samples, 0.01%)</title><rect x="28.8544%" y="485" width="0.0133%" height="15" fill="rgb(220,13,41)" fg:x="32656" fg:w="15"/><text x="29.1044%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;)&gt; (32 samples, 0.03%)</title><rect x="28.8677%" y="517" width="0.0283%" height="15" fill="rgb(249,221,25)" fg:x="32671" fg:w="32"/><text x="29.1177%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (32 samples, 0.03%)</title><rect x="28.8677%" y="501" width="0.0283%" height="15" fill="rgb(215,208,19)" fg:x="32671" fg:w="32"/><text x="29.1177%" y="511.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.03%)</title><rect x="28.8677%" y="485" width="0.0283%" height="15" fill="rgb(236,175,2)" fg:x="32671" fg:w="32"/><text x="29.1177%" y="495.50"></text></g><g><title>alloc::vec::into_iter::IntoIter&lt;T,A&gt;::as_raw_mut_slice (20 samples, 0.02%)</title><rect x="28.9057%" y="485" width="0.0177%" height="15" fill="rgb(241,52,2)" fg:x="32714" fg:w="20"/><text x="29.1557%" y="495.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (12 samples, 0.01%)</title><rect x="28.9127%" y="469" width="0.0106%" height="15" fill="rgb(248,140,14)" fg:x="32722" fg:w="12"/><text x="29.1627%" y="479.50"></text></g><g><title>core::iter::traits::exact_size::ExactSizeIterator::len (12 samples, 0.01%)</title><rect x="28.9127%" y="453" width="0.0106%" height="15" fill="rgb(253,22,42)" fg:x="32722" fg:w="12"/><text x="29.1627%" y="463.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (12 samples, 0.01%)</title><rect x="28.9127%" y="437" width="0.0106%" height="15" fill="rgb(234,61,47)" fg:x="32722" fg:w="12"/><text x="29.1627%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (12 samples, 0.01%)</title><rect x="28.9127%" y="421" width="0.0106%" height="15" fill="rgb(208,226,15)" fg:x="32722" fg:w="12"/><text x="29.1627%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event),alloc::alloc::Global&gt;&gt; (35 samples, 0.03%)</title><rect x="28.9233%" y="485" width="0.0309%" height="15" fill="rgb(217,221,4)" fg:x="32734" fg:w="35"/><text x="29.1733%" y="495.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.03%)</title><rect x="28.9233%" y="469" width="0.0309%" height="15" fill="rgb(212,174,34)" fg:x="32734" fg:w="35"/><text x="29.1733%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (24 samples, 0.02%)</title><rect x="28.9331%" y="453" width="0.0212%" height="15" fill="rgb(253,83,4)" fg:x="32745" fg:w="24"/><text x="29.1831%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.02%)</title><rect x="28.9331%" y="437" width="0.0212%" height="15" fill="rgb(250,195,49)" fg:x="32745" fg:w="24"/><text x="29.1831%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (24 samples, 0.02%)</title><rect x="28.9331%" y="421" width="0.0212%" height="15" fill="rgb(241,192,25)" fg:x="32745" fg:w="24"/><text x="29.1831%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (24 samples, 0.02%)</title><rect x="28.9331%" y="405" width="0.0212%" height="15" fill="rgb(208,124,10)" fg:x="32745" fg:w="24"/><text x="29.1831%" y="415.50"></text></g><g><title>__rg_dealloc (24 samples, 0.02%)</title><rect x="28.9331%" y="389" width="0.0212%" height="15" fill="rgb(222,33,0)" fg:x="32745" fg:w="24"/><text x="29.1831%" y="399.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (24 samples, 0.02%)</title><rect x="28.9331%" y="373" width="0.0212%" height="15" fill="rgb(234,209,28)" fg:x="32745" fg:w="24"/><text x="29.1831%" y="383.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (76 samples, 0.07%)</title><rect x="28.9057%" y="501" width="0.0672%" height="15" fill="rgb(224,11,23)" fg:x="32714" fg:w="76"/><text x="29.1557%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)]&gt; (21 samples, 0.02%)</title><rect x="28.9543%" y="485" width="0.0186%" height="15" fill="rgb(232,99,1)" fg:x="32769" fg:w="21"/><text x="29.2043%" y="495.50"></text></g><g><title>sn_rust_dealloc (51 samples, 0.05%)</title><rect x="28.9728%" y="501" width="0.0451%" height="15" fill="rgb(237,95,45)" fg:x="32790" fg:w="51"/><text x="29.2228%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (154 samples, 0.14%)</title><rect x="28.8960%" y="517" width="0.1361%" height="15" fill="rgb(208,109,11)" fg:x="32703" fg:w="154"/><text x="29.1460%" y="527.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (16 samples, 0.01%)</title><rect x="29.0179%" y="501" width="0.0141%" height="15" fill="rgb(216,190,48)" fg:x="32841" fg:w="16"/><text x="29.2679%" y="511.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (70 samples, 0.06%)</title><rect x="29.0453%" y="485" width="0.0619%" height="15" fill="rgb(251,171,36)" fg:x="32872" fg:w="70"/><text x="29.2953%" y="495.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (40 samples, 0.04%)</title><rect x="29.0718%" y="469" width="0.0353%" height="15" fill="rgb(230,62,22)" fg:x="32902" fg:w="40"/><text x="29.3218%" y="479.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (40 samples, 0.04%)</title><rect x="29.0718%" y="453" width="0.0353%" height="15" fill="rgb(225,114,35)" fg:x="32902" fg:w="40"/><text x="29.3218%" y="463.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (126 samples, 0.11%)</title><rect x="29.1354%" y="453" width="0.1113%" height="15" fill="rgb(215,118,42)" fg:x="32974" fg:w="126"/><text x="29.3854%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (126 samples, 0.11%)</title><rect x="29.1354%" y="437" width="0.1113%" height="15" fill="rgb(243,119,21)" fg:x="32974" fg:w="126"/><text x="29.3854%" y="447.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (126 samples, 0.11%)</title><rect x="29.1354%" y="421" width="0.1113%" height="15" fill="rgb(252,177,53)" fg:x="32974" fg:w="126"/><text x="29.3854%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (126 samples, 0.11%)</title><rect x="29.1354%" y="405" width="0.1113%" height="15" fill="rgb(237,209,29)" fg:x="32974" fg:w="126"/><text x="29.3854%" y="415.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (126 samples, 0.11%)</title><rect x="29.1354%" y="389" width="0.1113%" height="15" fill="rgb(212,65,23)" fg:x="32974" fg:w="126"/><text x="29.3854%" y="399.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (126 samples, 0.11%)</title><rect x="29.1354%" y="373" width="0.1113%" height="15" fill="rgb(230,222,46)" fg:x="32974" fg:w="126"/><text x="29.3854%" y="383.50"></text></g><g><title>[libc-2.31.so] (93 samples, 0.08%)</title><rect x="29.1646%" y="357" width="0.0822%" height="15" fill="rgb(215,135,32)" fg:x="33007" fg:w="93"/><text x="29.4146%" y="367.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (233 samples, 0.21%)</title><rect x="29.0417%" y="517" width="0.2059%" height="15" fill="rgb(246,101,22)" fg:x="32868" fg:w="233"/><text x="29.2917%" y="527.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (229 samples, 0.20%)</title><rect x="29.0453%" y="501" width="0.2023%" height="15" fill="rgb(206,107,13)" fg:x="32872" fg:w="229"/><text x="29.2953%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (159 samples, 0.14%)</title><rect x="29.1071%" y="485" width="0.1405%" height="15" fill="rgb(250,100,44)" fg:x="32942" fg:w="159"/><text x="29.3571%" y="495.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (K,L)&gt;::eq (159 samples, 0.14%)</title><rect x="29.1071%" y="469" width="0.1405%" height="15" fill="rgb(231,147,38)" fg:x="32942" fg:w="159"/><text x="29.3571%" y="479.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (38 samples, 0.03%)</title><rect x="29.2671%" y="485" width="0.0336%" height="15" fill="rgb(229,8,40)" fg:x="33123" fg:w="38"/><text x="29.5171%" y="495.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (22 samples, 0.02%)</title><rect x="29.3192%" y="469" width="0.0194%" height="15" fill="rgb(221,135,30)" fg:x="33182" fg:w="22"/><text x="29.5692%" y="479.50"></text></g><g><title>&lt;halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt; as core::convert::From&lt;halfbrown::vecmap::raw_entry::RawEntryMut&lt;K,V,S&gt;&gt;&gt;::from (22 samples, 0.02%)</title><rect x="29.3192%" y="453" width="0.0194%" height="15" fill="rgb(249,193,18)" fg:x="33182" fg:w="22"/><text x="29.5692%" y="463.50"></text></g><g><title>halfbrown::raw_entry::RawEntryMut::Occupied (16 samples, 0.01%)</title><rect x="29.3245%" y="437" width="0.0141%" height="15" fill="rgb(209,133,39)" fg:x="33188" fg:w="16"/><text x="29.5745%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.02%)</title><rect x="29.3484%" y="405" width="0.0212%" height="15" fill="rgb(232,100,14)" fg:x="33215" fg:w="24"/><text x="29.5984%" y="415.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.02%)</title><rect x="29.3484%" y="389" width="0.0212%" height="15" fill="rgb(224,185,1)" fg:x="33215" fg:w="24"/><text x="29.5984%" y="399.50"></text></g><g><title>beef::generic::Cow&lt;T,U&gt;::borrow (12 samples, 0.01%)</title><rect x="29.3696%" y="373" width="0.0106%" height="15" fill="rgb(223,139,8)" fg:x="33239" fg:w="12"/><text x="29.6196%" y="383.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (225 samples, 0.20%)</title><rect x="29.3006%" y="485" width="0.1988%" height="15" fill="rgb(232,213,38)" fg:x="33161" fg:w="225"/><text x="29.5506%" y="495.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (182 samples, 0.16%)</title><rect x="29.3386%" y="469" width="0.1608%" height="15" fill="rgb(207,94,22)" fg:x="33204" fg:w="182"/><text x="29.5886%" y="479.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (182 samples, 0.16%)</title><rect x="29.3386%" y="453" width="0.1608%" height="15" fill="rgb(219,183,54)" fg:x="33204" fg:w="182"/><text x="29.5886%" y="463.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_hash (182 samples, 0.16%)</title><rect x="29.3386%" y="437" width="0.1608%" height="15" fill="rgb(216,185,54)" fg:x="33204" fg:w="182"/><text x="29.5886%" y="447.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::search (182 samples, 0.16%)</title><rect x="29.3386%" y="421" width="0.1608%" height="15" fill="rgb(254,217,39)" fg:x="33204" fg:w="182"/><text x="29.5886%" y="431.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (147 samples, 0.13%)</title><rect x="29.3696%" y="405" width="0.1299%" height="15" fill="rgb(240,178,23)" fg:x="33239" fg:w="147"/><text x="29.6196%" y="415.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (147 samples, 0.13%)</title><rect x="29.3696%" y="389" width="0.1299%" height="15" fill="rgb(218,11,47)" fg:x="33239" fg:w="147"/><text x="29.6196%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (135 samples, 0.12%)</title><rect x="29.3802%" y="373" width="0.1193%" height="15" fill="rgb(218,51,51)" fg:x="33251" fg:w="135"/><text x="29.6302%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (135 samples, 0.12%)</title><rect x="29.3802%" y="357" width="0.1193%" height="15" fill="rgb(238,126,27)" fg:x="33251" fg:w="135"/><text x="29.6302%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (135 samples, 0.12%)</title><rect x="29.3802%" y="341" width="0.1193%" height="15" fill="rgb(249,202,22)" fg:x="33251" fg:w="135"/><text x="29.6302%" y="351.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (135 samples, 0.12%)</title><rect x="29.3802%" y="325" width="0.1193%" height="15" fill="rgb(254,195,49)" fg:x="33251" fg:w="135"/><text x="29.6302%" y="335.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (135 samples, 0.12%)</title><rect x="29.3802%" y="309" width="0.1193%" height="15" fill="rgb(208,123,14)" fg:x="33251" fg:w="135"/><text x="29.6302%" y="319.50"></text></g><g><title>[libc-2.31.so] (57 samples, 0.05%)</title><rect x="29.4491%" y="293" width="0.0504%" height="15" fill="rgb(224,200,8)" fg:x="33329" fg:w="57"/><text x="29.6991%" y="303.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue_events (2,131 samples, 1.88%)</title><rect x="27.6687%" y="533" width="1.8829%" height="15" fill="rgb(217,61,36)" fg:x="31314" fg:w="2131"/><text x="27.9187%" y="543.50">t..</text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_input (344 samples, 0.30%)</title><rect x="29.2476%" y="517" width="0.3040%" height="15" fill="rgb(206,35,45)" fg:x="33101" fg:w="344"/><text x="29.4976%" y="527.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_input_n (341 samples, 0.30%)</title><rect x="29.2503%" y="501" width="0.3013%" height="15" fill="rgb(217,65,33)" fg:x="33104" fg:w="341"/><text x="29.5003%" y="511.50"></text></g><g><title>halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt;::or_insert_with (59 samples, 0.05%)</title><rect x="29.4994%" y="485" width="0.0521%" height="15" fill="rgb(222,158,48)" fg:x="33386" fg:w="59"/><text x="29.7494%" y="495.50"></text></g><g><title>halfbrown::raw_entry::RawOccupiedEntryMut&lt;K,V,S&gt;::into_key_value (37 samples, 0.03%)</title><rect x="29.5189%" y="469" width="0.0327%" height="15" fill="rgb(254,2,54)" fg:x="33408" fg:w="37"/><text x="29.7689%" y="479.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawOccupiedEntryMut&lt;K,V,S&gt;::into_key_value (15 samples, 0.01%)</title><rect x="29.5383%" y="453" width="0.0133%" height="15" fill="rgb(250,143,38)" fg:x="33430" fg:w="15"/><text x="29.7883%" y="463.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get_mut_idx (15 samples, 0.01%)</title><rect x="29.5383%" y="437" width="0.0133%" height="15" fill="rgb(248,25,0)" fg:x="33430" fg:w="15"/><text x="29.7883%" y="447.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (21 samples, 0.02%)</title><rect x="29.5816%" y="501" width="0.0186%" height="15" fill="rgb(206,152,27)" fg:x="33479" fg:w="21"/><text x="29.8316%" y="511.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (19 samples, 0.02%)</title><rect x="29.6267%" y="485" width="0.0168%" height="15" fill="rgb(240,77,30)" fg:x="33530" fg:w="19"/><text x="29.8767%" y="495.50"></text></g><g><title>&lt;halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt; as core::convert::From&lt;halfbrown::vecmap::raw_entry::RawEntryMut&lt;K,V,S&gt;&gt;&gt;::from (19 samples, 0.02%)</title><rect x="29.6267%" y="469" width="0.0168%" height="15" fill="rgb(231,5,3)" fg:x="33530" fg:w="19"/><text x="29.8767%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.02%)</title><rect x="29.6532%" y="421" width="0.0203%" height="15" fill="rgb(207,226,32)" fg:x="33560" fg:w="23"/><text x="29.9032%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.02%)</title><rect x="29.6532%" y="405" width="0.0203%" height="15" fill="rgb(222,207,47)" fg:x="33560" fg:w="23"/><text x="29.9032%" y="415.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (201 samples, 0.18%)</title><rect x="29.6002%" y="501" width="0.1776%" height="15" fill="rgb(229,115,45)" fg:x="33500" fg:w="201"/><text x="29.8502%" y="511.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (152 samples, 0.13%)</title><rect x="29.6435%" y="485" width="0.1343%" height="15" fill="rgb(224,191,6)" fg:x="33549" fg:w="152"/><text x="29.8935%" y="495.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (152 samples, 0.13%)</title><rect x="29.6435%" y="469" width="0.1343%" height="15" fill="rgb(230,227,24)" fg:x="33549" fg:w="152"/><text x="29.8935%" y="479.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_hash (152 samples, 0.13%)</title><rect x="29.6435%" y="453" width="0.1343%" height="15" fill="rgb(228,80,19)" fg:x="33549" fg:w="152"/><text x="29.8935%" y="463.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::search (152 samples, 0.13%)</title><rect x="29.6435%" y="437" width="0.1343%" height="15" fill="rgb(247,229,0)" fg:x="33549" fg:w="152"/><text x="29.8935%" y="447.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (118 samples, 0.10%)</title><rect x="29.6735%" y="421" width="0.1043%" height="15" fill="rgb(237,194,15)" fg:x="33583" fg:w="118"/><text x="29.9235%" y="431.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (118 samples, 0.10%)</title><rect x="29.6735%" y="405" width="0.1043%" height="15" fill="rgb(219,203,20)" fg:x="33583" fg:w="118"/><text x="29.9235%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (116 samples, 0.10%)</title><rect x="29.6753%" y="389" width="0.1025%" height="15" fill="rgb(234,128,8)" fg:x="33585" fg:w="116"/><text x="29.9253%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (116 samples, 0.10%)</title><rect x="29.6753%" y="373" width="0.1025%" height="15" fill="rgb(248,202,8)" fg:x="33585" fg:w="116"/><text x="29.9253%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (116 samples, 0.10%)</title><rect x="29.6753%" y="357" width="0.1025%" height="15" fill="rgb(206,104,37)" fg:x="33585" fg:w="116"/><text x="29.9253%" y="367.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (116 samples, 0.10%)</title><rect x="29.6753%" y="341" width="0.1025%" height="15" fill="rgb(223,8,27)" fg:x="33585" fg:w="116"/><text x="29.9253%" y="351.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (116 samples, 0.10%)</title><rect x="29.6753%" y="325" width="0.1025%" height="15" fill="rgb(216,217,28)" fg:x="33585" fg:w="116"/><text x="29.9253%" y="335.50"></text></g><g><title>[libc-2.31.so] (69 samples, 0.06%)</title><rect x="29.7168%" y="309" width="0.0610%" height="15" fill="rgb(249,199,1)" fg:x="33632" fg:w="69"/><text x="29.9668%" y="319.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (5,972 samples, 5.28%)</title><rect x="24.5310%" y="581" width="5.2768%" height="15" fill="rgb(240,85,17)" fg:x="27763" fg:w="5972"/><text x="24.7810%" y="591.50">tremor..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (4,863 samples, 4.30%)</title><rect x="25.5109%" y="565" width="4.2969%" height="15" fill="rgb(206,108,45)" fg:x="28872" fg:w="4863"/><text x="25.7609%" y="575.50">tremo..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (4,838 samples, 4.27%)</title><rect x="25.5330%" y="549" width="4.2748%" height="15" fill="rgb(245,210,41)" fg:x="28897" fg:w="4838"/><text x="25.7830%" y="559.50">tremo..</text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_output (290 samples, 0.26%)</title><rect x="29.5516%" y="533" width="0.2562%" height="15" fill="rgb(206,13,37)" fg:x="33445" fg:w="290"/><text x="29.8016%" y="543.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_output_n (272 samples, 0.24%)</title><rect x="29.5675%" y="517" width="0.2403%" height="15" fill="rgb(250,61,18)" fg:x="33463" fg:w="272"/><text x="29.8175%" y="527.50"></text></g><g><title>halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt;::or_insert_with (34 samples, 0.03%)</title><rect x="29.7778%" y="501" width="0.0300%" height="15" fill="rgb(235,172,48)" fg:x="33701" fg:w="34"/><text x="30.0278%" y="511.50"></text></g><g><title>halfbrown::raw_entry::RawOccupiedEntryMut&lt;K,V,S&gt;::into_key_value (20 samples, 0.02%)</title><rect x="29.7901%" y="485" width="0.0177%" height="15" fill="rgb(249,201,17)" fg:x="33715" fg:w="20"/><text x="30.0401%" y="495.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawOccupiedEntryMut&lt;K,V,S&gt;::into_key_value (12 samples, 0.01%)</title><rect x="29.7972%" y="469" width="0.0106%" height="15" fill="rgb(219,208,6)" fg:x="33723" fg:w="12"/><text x="30.0472%" y="479.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get_mut_idx (12 samples, 0.01%)</title><rect x="29.7972%" y="453" width="0.0106%" height="15" fill="rgb(248,31,23)" fg:x="33723" fg:w="12"/><text x="30.0472%" y="463.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,295 samples, 5.56%)</title><rect x="24.2704%" y="597" width="5.5622%" height="15" fill="rgb(245,15,42)" fg:x="27468" fg:w="6295"/><text x="24.5204%" y="607.50">&lt;core::..</text></g><g><title>tremor_runtime::pipeline::handle_insights::{{closure}} (28 samples, 0.02%)</title><rect x="29.8078%" y="581" width="0.0247%" height="15" fill="rgb(222,217,39)" fg:x="33735" fg:w="28"/><text x="30.0578%" y="591.50"></text></g><g><title>[libc-2.31.so] (721 samples, 0.64%)</title><rect x="29.8326%" y="597" width="0.6371%" height="15" fill="rgb(210,219,27)" fg:x="33763" fg:w="721"/><text x="30.0826%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (109 samples, 0.10%)</title><rect x="30.4696%" y="597" width="0.0963%" height="15" fill="rgb(252,166,36)" fg:x="34484" fg:w="109"/><text x="30.7196%" y="607.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (109 samples, 0.10%)</title><rect x="30.4696%" y="581" width="0.0963%" height="15" fill="rgb(245,132,34)" fg:x="34484" fg:w="109"/><text x="30.7196%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (101 samples, 0.09%)</title><rect x="30.4767%" y="565" width="0.0892%" height="15" fill="rgb(236,54,3)" fg:x="34492" fg:w="101"/><text x="30.7267%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (101 samples, 0.09%)</title><rect x="30.4767%" y="549" width="0.0892%" height="15" fill="rgb(241,173,43)" fg:x="34492" fg:w="101"/><text x="30.7267%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (101 samples, 0.09%)</title><rect x="30.4767%" y="533" width="0.0892%" height="15" fill="rgb(215,190,9)" fg:x="34492" fg:w="101"/><text x="30.7267%" y="543.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (101 samples, 0.09%)</title><rect x="30.4767%" y="517" width="0.0892%" height="15" fill="rgb(242,101,16)" fg:x="34492" fg:w="101"/><text x="30.7267%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (101 samples, 0.09%)</title><rect x="30.4767%" y="501" width="0.0892%" height="15" fill="rgb(223,190,21)" fg:x="34492" fg:w="101"/><text x="30.7267%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (101 samples, 0.09%)</title><rect x="30.4767%" y="485" width="0.0892%" height="15" fill="rgb(215,228,25)" fg:x="34492" fg:w="101"/><text x="30.7267%" y="495.50"></text></g><g><title>__rg_dealloc (101 samples, 0.09%)</title><rect x="30.4767%" y="469" width="0.0892%" height="15" fill="rgb(225,36,22)" fg:x="34492" fg:w="101"/><text x="30.7267%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (101 samples, 0.09%)</title><rect x="30.4767%" y="453" width="0.0892%" height="15" fill="rgb(251,106,46)" fg:x="34492" fg:w="101"/><text x="30.7267%" y="463.50"></text></g><g><title>sn_rust_dealloc (101 samples, 0.09%)</title><rect x="30.4767%" y="437" width="0.0892%" height="15" fill="rgb(208,90,1)" fg:x="34492" fg:w="101"/><text x="30.7267%" y="447.50"></text></g><g><title>async_global_executor::reactor::block_on (18,478 samples, 16.33%)</title><rect x="14.2478%" y="949" width="16.3269%" height="15" fill="rgb(243,10,4)" fg:x="16125" fg:w="18478"/><text x="14.4978%" y="959.50">async_global_executor::re..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (18,478 samples, 16.33%)</title><rect x="14.2478%" y="933" width="16.3269%" height="15" fill="rgb(212,137,27)" fg:x="16125" fg:w="18478"/><text x="14.4978%" y="943.50">async_global_executor::re..</text></g><g><title>async_io::driver::block_on (18,478 samples, 16.33%)</title><rect x="14.2478%" y="917" width="16.3269%" height="15" fill="rgb(231,220,49)" fg:x="16125" fg:w="18478"/><text x="14.4978%" y="927.50">async_io::driver::block_on</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (18,478 samples, 16.33%)</title><rect x="14.2478%" y="901" width="16.3269%" height="15" fill="rgb(237,96,20)" fg:x="16125" fg:w="18478"/><text x="14.4978%" y="911.50">&lt;futures_lite::future::Or..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,478 samples, 16.33%)</title><rect x="14.2478%" y="885" width="16.3269%" height="15" fill="rgb(239,229,30)" fg:x="16125" fg:w="18478"/><text x="14.4978%" y="895.50">&lt;core::future::from_gener..</text></g><g><title>async_executor::Executor::run::{{closure}} (18,478 samples, 16.33%)</title><rect x="14.2478%" y="869" width="16.3269%" height="15" fill="rgb(219,65,33)" fg:x="16125" fg:w="18478"/><text x="14.4978%" y="879.50">async_executor::Executor:..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (18,478 samples, 16.33%)</title><rect x="14.2478%" y="853" width="16.3269%" height="15" fill="rgb(243,134,7)" fg:x="16125" fg:w="18478"/><text x="14.4978%" y="863.50">&lt;futures_lite::future::Or..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,478 samples, 16.33%)</title><rect x="14.2478%" y="837" width="16.3269%" height="15" fill="rgb(216,177,54)" fg:x="16125" fg:w="18478"/><text x="14.4978%" y="847.50">&lt;core::future::from_gener..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (18,478 samples, 16.33%)</title><rect x="14.2478%" y="821" width="16.3269%" height="15" fill="rgb(211,160,20)" fg:x="16125" fg:w="18478"/><text x="14.4978%" y="831.50">async_executor::Executor:..</text></g><g><title>async_task::runnable::Runnable::run (18,478 samples, 16.33%)</title><rect x="14.2478%" y="805" width="16.3269%" height="15" fill="rgb(239,85,39)" fg:x="16125" fg:w="18478"/><text x="14.4978%" y="815.50">async_task::runnable::Run..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (18,478 samples, 16.33%)</title><rect x="14.2478%" y="789" width="16.3269%" height="15" fill="rgb(232,125,22)" fg:x="16125" fg:w="18478"/><text x="14.4978%" y="799.50">async_task::raw::RawTask&lt;..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (18,478 samples, 16.33%)</title><rect x="14.2478%" y="773" width="16.3269%" height="15" fill="rgb(244,57,34)" fg:x="16125" fg:w="18478"/><text x="14.4978%" y="783.50">&lt;core::pin::Pin&lt;P&gt; as cor..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,478 samples, 16.33%)</title><rect x="14.2478%" y="757" width="16.3269%" height="15" fill="rgb(214,203,32)" fg:x="16125" fg:w="18478"/><text x="14.4978%" y="767.50">&lt;core::future::from_gener..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (18,478 samples, 16.33%)</title><rect x="14.2478%" y="741" width="16.3269%" height="15" fill="rgb(207,58,43)" fg:x="16125" fg:w="18478"/><text x="14.4978%" y="751.50">async_executor::Executor:..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (18,478 samples, 16.33%)</title><rect x="14.2478%" y="725" width="16.3269%" height="15" fill="rgb(215,193,15)" fg:x="16125" fg:w="18478"/><text x="14.4978%" y="735.50">&lt;async_std::task::builder..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (18,478 samples, 16.33%)</title><rect x="14.2478%" y="709" width="16.3269%" height="15" fill="rgb(232,15,44)" fg:x="16125" fg:w="18478"/><text x="14.4978%" y="719.50">async_std::task::task_loc..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (18,478 samples, 16.33%)</title><rect x="14.2478%" y="693" width="16.3269%" height="15" fill="rgb(212,3,48)" fg:x="16125" fg:w="18478"/><text x="14.4978%" y="703.50">std::thread::local::Local..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (18,478 samples, 16.33%)</title><rect x="14.2478%" y="677" width="16.3269%" height="15" fill="rgb(218,128,7)" fg:x="16125" fg:w="18478"/><text x="14.4978%" y="687.50">std::thread::local::Local..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (18,478 samples, 16.33%)</title><rect x="14.2478%" y="661" width="16.3269%" height="15" fill="rgb(226,216,39)" fg:x="16125" fg:w="18478"/><text x="14.4978%" y="671.50">async_std::task::task_loc..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (18,478 samples, 16.33%)</title><rect x="14.2478%" y="645" width="16.3269%" height="15" fill="rgb(243,47,51)" fg:x="16125" fg:w="18478"/><text x="14.4978%" y="655.50">&lt;async_std::task::builder..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,478 samples, 16.33%)</title><rect x="14.2478%" y="629" width="16.3269%" height="15" fill="rgb(241,183,40)" fg:x="16125" fg:w="18478"/><text x="14.4978%" y="639.50">&lt;core::future::from_gener..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (7,456 samples, 6.59%)</title><rect x="23.9867%" y="613" width="6.5880%" height="15" fill="rgb(231,217,32)" fg:x="27147" fg:w="7456"/><text x="24.2367%" y="623.50">tremor_ru..</text></g><g><title>[libc-2.31.so] (338 samples, 0.30%)</title><rect x="30.6631%" y="405" width="0.2987%" height="15" fill="rgb(229,61,38)" fg:x="34703" fg:w="338"/><text x="30.9131%" y="415.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (368 samples, 0.33%)</title><rect x="30.6437%" y="421" width="0.3252%" height="15" fill="rgb(225,210,5)" fg:x="34681" fg:w="368"/><text x="30.8937%" y="431.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (576 samples, 0.51%)</title><rect x="30.5951%" y="437" width="0.5089%" height="15" fill="rgb(231,79,45)" fg:x="34626" fg:w="576"/><text x="30.8451%" y="447.50"></text></g><g><title>[libc-2.31.so] (153 samples, 0.14%)</title><rect x="30.9689%" y="421" width="0.1352%" height="15" fill="rgb(224,100,7)" fg:x="35049" fg:w="153"/><text x="31.2189%" y="431.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (602 samples, 0.53%)</title><rect x="30.5757%" y="469" width="0.5319%" height="15" fill="rgb(241,198,18)" fg:x="34604" fg:w="602"/><text x="30.8257%" y="479.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (602 samples, 0.53%)</title><rect x="30.5757%" y="453" width="0.5319%" height="15" fill="rgb(252,97,53)" fg:x="34604" fg:w="602"/><text x="30.8257%" y="463.50"></text></g><g><title>&lt;tremor_pipeline::event::ValueIter as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.01%)</title><rect x="33.7539%" y="421" width="0.0124%" height="15" fill="rgb(220,88,7)" fg:x="38201" fg:w="14"/><text x="34.0039%" y="431.50"></text></g><g><title>[libc-2.31.so] (175 samples, 0.15%)</title><rect x="33.7663%" y="421" width="0.1546%" height="15" fill="rgb(213,176,14)" fg:x="38215" fg:w="175"/><text x="34.0163%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.01%)</title><rect x="33.9342%" y="357" width="0.0106%" height="15" fill="rgb(246,73,7)" fg:x="38405" fg:w="12"/><text x="34.1842%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (17 samples, 0.02%)</title><rect x="33.9333%" y="421" width="0.0150%" height="15" fill="rgb(245,64,36)" fg:x="38404" fg:w="17"/><text x="34.1833%" y="431.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (17 samples, 0.02%)</title><rect x="33.9333%" y="405" width="0.0150%" height="15" fill="rgb(245,80,10)" fg:x="38404" fg:w="17"/><text x="34.1833%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (17 samples, 0.02%)</title><rect x="33.9333%" y="389" width="0.0150%" height="15" fill="rgb(232,107,50)" fg:x="38404" fg:w="17"/><text x="34.1833%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (17 samples, 0.02%)</title><rect x="33.9333%" y="373" width="0.0150%" height="15" fill="rgb(253,3,0)" fg:x="38404" fg:w="17"/><text x="34.1833%" y="383.50"></text></g><g><title>sn_rust_dealloc (70 samples, 0.06%)</title><rect x="33.9863%" y="261" width="0.0619%" height="15" fill="rgb(212,99,53)" fg:x="38464" fg:w="70"/><text x="34.2363%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (103 samples, 0.09%)</title><rect x="33.9748%" y="325" width="0.0910%" height="15" fill="rgb(249,111,54)" fg:x="38451" fg:w="103"/><text x="34.2248%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (103 samples, 0.09%)</title><rect x="33.9748%" y="309" width="0.0910%" height="15" fill="rgb(249,55,30)" fg:x="38451" fg:w="103"/><text x="34.2248%" y="319.50"></text></g><g><title>__rg_dealloc (103 samples, 0.09%)</title><rect x="33.9748%" y="293" width="0.0910%" height="15" fill="rgb(237,47,42)" fg:x="38451" fg:w="103"/><text x="34.2248%" y="303.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (103 samples, 0.09%)</title><rect x="33.9748%" y="277" width="0.0910%" height="15" fill="rgb(211,20,18)" fg:x="38451" fg:w="103"/><text x="34.2248%" y="287.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (20 samples, 0.02%)</title><rect x="34.0482%" y="261" width="0.0177%" height="15" fill="rgb(231,203,46)" fg:x="38534" fg:w="20"/><text x="34.2982%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (124 samples, 0.11%)</title><rect x="33.9580%" y="405" width="0.1096%" height="15" fill="rgb(237,142,3)" fg:x="38432" fg:w="124"/><text x="34.2080%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;u8&gt;]&gt; (124 samples, 0.11%)</title><rect x="33.9580%" y="389" width="0.1096%" height="15" fill="rgb(241,107,1)" fg:x="38432" fg:w="124"/><text x="34.2080%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (112 samples, 0.10%)</title><rect x="33.9686%" y="373" width="0.0990%" height="15" fill="rgb(229,83,13)" fg:x="38444" fg:w="112"/><text x="34.2186%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (112 samples, 0.10%)</title><rect x="33.9686%" y="357" width="0.0990%" height="15" fill="rgb(241,91,40)" fg:x="38444" fg:w="112"/><text x="34.2186%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (112 samples, 0.10%)</title><rect x="33.9686%" y="341" width="0.0990%" height="15" fill="rgb(225,3,45)" fg:x="38444" fg:w="112"/><text x="34.2186%" y="351.50"></text></g><g><title>sn_rust_dealloc (48 samples, 0.04%)</title><rect x="34.0764%" y="309" width="0.0424%" height="15" fill="rgb(244,223,14)" fg:x="38566" fg:w="48"/><text x="34.3264%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (59 samples, 0.05%)</title><rect x="34.0676%" y="373" width="0.0521%" height="15" fill="rgb(224,124,37)" fg:x="38556" fg:w="59"/><text x="34.3176%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (59 samples, 0.05%)</title><rect x="34.0676%" y="357" width="0.0521%" height="15" fill="rgb(251,171,30)" fg:x="38556" fg:w="59"/><text x="34.3176%" y="367.50"></text></g><g><title>__rg_dealloc (59 samples, 0.05%)</title><rect x="34.0676%" y="341" width="0.0521%" height="15" fill="rgb(236,46,54)" fg:x="38556" fg:w="59"/><text x="34.3176%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (59 samples, 0.05%)</title><rect x="34.0676%" y="325" width="0.0521%" height="15" fill="rgb(245,213,5)" fg:x="38556" fg:w="59"/><text x="34.3176%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (187 samples, 0.17%)</title><rect x="33.9580%" y="421" width="0.1652%" height="15" fill="rgb(230,144,27)" fg:x="38432" fg:w="187"/><text x="34.2080%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (63 samples, 0.06%)</title><rect x="34.0676%" y="405" width="0.0557%" height="15" fill="rgb(220,86,6)" fg:x="38556" fg:w="63"/><text x="34.3176%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (63 samples, 0.06%)</title><rect x="34.0676%" y="389" width="0.0557%" height="15" fill="rgb(240,20,13)" fg:x="38556" fg:w="63"/><text x="34.3176%" y="399.50"></text></g><g><title>sn_rust_dealloc (207 samples, 0.18%)</title><rect x="34.1480%" y="245" width="0.1829%" height="15" fill="rgb(217,89,34)" fg:x="38647" fg:w="207"/><text x="34.3980%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (226 samples, 0.20%)</title><rect x="34.1339%" y="373" width="0.1997%" height="15" fill="rgb(229,13,5)" fg:x="38631" fg:w="226"/><text x="34.3839%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (226 samples, 0.20%)</title><rect x="34.1339%" y="357" width="0.1997%" height="15" fill="rgb(244,67,35)" fg:x="38631" fg:w="226"/><text x="34.3839%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (226 samples, 0.20%)</title><rect x="34.1339%" y="341" width="0.1997%" height="15" fill="rgb(221,40,2)" fg:x="38631" fg:w="226"/><text x="34.3839%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (226 samples, 0.20%)</title><rect x="34.1339%" y="325" width="0.1997%" height="15" fill="rgb(237,157,21)" fg:x="38631" fg:w="226"/><text x="34.3839%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (225 samples, 0.20%)</title><rect x="34.1347%" y="309" width="0.1988%" height="15" fill="rgb(222,94,11)" fg:x="38632" fg:w="225"/><text x="34.3847%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (225 samples, 0.20%)</title><rect x="34.1347%" y="293" width="0.1988%" height="15" fill="rgb(249,113,6)" fg:x="38632" fg:w="225"/><text x="34.3847%" y="303.50"></text></g><g><title>__rg_dealloc (225 samples, 0.20%)</title><rect x="34.1347%" y="277" width="0.1988%" height="15" fill="rgb(238,137,36)" fg:x="38632" fg:w="225"/><text x="34.3847%" y="287.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (225 samples, 0.20%)</title><rect x="34.1347%" y="261" width="0.1988%" height="15" fill="rgb(210,102,26)" fg:x="38632" fg:w="225"/><text x="34.3847%" y="271.50"></text></g><g><title>sn_rust_dealloc (178 samples, 0.16%)</title><rect x="34.8125%" y="197" width="0.1573%" height="15" fill="rgb(218,30,30)" fg:x="39399" fg:w="178"/><text x="35.0625%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (192 samples, 0.17%)</title><rect x="34.8063%" y="261" width="0.1696%" height="15" fill="rgb(214,67,26)" fg:x="39392" fg:w="192"/><text x="35.0563%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (192 samples, 0.17%)</title><rect x="34.8063%" y="245" width="0.1696%" height="15" fill="rgb(251,9,53)" fg:x="39392" fg:w="192"/><text x="35.0563%" y="255.50"></text></g><g><title>__rg_dealloc (192 samples, 0.17%)</title><rect x="34.8063%" y="229" width="0.1696%" height="15" fill="rgb(228,204,25)" fg:x="39392" fg:w="192"/><text x="35.0563%" y="239.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (192 samples, 0.17%)</title><rect x="34.8063%" y="213" width="0.1696%" height="15" fill="rgb(207,153,8)" fg:x="39392" fg:w="192"/><text x="35.0563%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (739 samples, 0.65%)</title><rect x="34.3336%" y="357" width="0.6530%" height="15" fill="rgb(242,9,16)" fg:x="38857" fg:w="739"/><text x="34.5836%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (739 samples, 0.65%)</title><rect x="34.3336%" y="341" width="0.6530%" height="15" fill="rgb(217,211,10)" fg:x="38857" fg:w="739"/><text x="34.5836%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (731 samples, 0.65%)</title><rect x="34.3406%" y="325" width="0.6459%" height="15" fill="rgb(219,228,52)" fg:x="38865" fg:w="731"/><text x="34.5906%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (731 samples, 0.65%)</title><rect x="34.3406%" y="309" width="0.6459%" height="15" fill="rgb(231,92,29)" fg:x="38865" fg:w="731"/><text x="34.5906%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (731 samples, 0.65%)</title><rect x="34.3406%" y="293" width="0.6459%" height="15" fill="rgb(232,8,23)" fg:x="38865" fg:w="731"/><text x="34.5906%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (731 samples, 0.65%)</title><rect x="34.3406%" y="277" width="0.6459%" height="15" fill="rgb(216,211,34)" fg:x="38865" fg:w="731"/><text x="34.5906%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (12 samples, 0.01%)</title><rect x="34.9759%" y="261" width="0.0106%" height="15" fill="rgb(236,151,0)" fg:x="39584" fg:w="12"/><text x="35.2259%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (984 samples, 0.87%)</title><rect x="34.1294%" y="389" width="0.8694%" height="15" fill="rgb(209,168,3)" fg:x="38626" fg:w="984"/><text x="34.3794%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (753 samples, 0.67%)</title><rect x="34.3336%" y="373" width="0.6653%" height="15" fill="rgb(208,129,28)" fg:x="38857" fg:w="753"/><text x="34.5836%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::string::String&gt;&gt; (14 samples, 0.01%)</title><rect x="34.9865%" y="357" width="0.0124%" height="15" fill="rgb(229,78,22)" fg:x="39596" fg:w="14"/><text x="35.2365%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="34.9865%" y="341" width="0.0124%" height="15" fill="rgb(228,187,13)" fg:x="39596" fg:w="14"/><text x="35.2365%" y="351.50"></text></g><g><title>sn_rust_dealloc (50 samples, 0.04%)</title><rect x="34.9989%" y="389" width="0.0442%" height="15" fill="rgb(240,119,24)" fg:x="39610" fg:w="50"/><text x="35.2489%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (1,056 samples, 0.93%)</title><rect x="34.1286%" y="405" width="0.9331%" height="15" fill="rgb(209,194,42)" fg:x="38625" fg:w="1056"/><text x="34.3786%" y="415.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (21 samples, 0.02%)</title><rect x="35.0431%" y="389" width="0.0186%" height="15" fill="rgb(247,200,46)" fg:x="39660" fg:w="21"/><text x="35.2931%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (19 samples, 0.02%)</title><rect x="35.4213%" y="245" width="0.0168%" height="15" fill="rgb(218,76,16)" fg:x="40088" fg:w="19"/><text x="35.6713%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (19 samples, 0.02%)</title><rect x="35.4213%" y="229" width="0.0168%" height="15" fill="rgb(225,21,48)" fg:x="40088" fg:w="19"/><text x="35.6713%" y="239.50"></text></g><g><title>__rg_dealloc (19 samples, 0.02%)</title><rect x="35.4213%" y="213" width="0.0168%" height="15" fill="rgb(239,223,50)" fg:x="40088" fg:w="19"/><text x="35.6713%" y="223.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (19 samples, 0.02%)</title><rect x="35.4213%" y="197" width="0.0168%" height="15" fill="rgb(244,45,21)" fg:x="40088" fg:w="19"/><text x="35.6713%" y="207.50"></text></g><g><title>core::mem::drop (677 samples, 0.60%)</title><rect x="35.4213%" y="293" width="0.5982%" height="15" fill="rgb(232,33,43)" fg:x="40088" fg:w="677"/><text x="35.6713%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;alloc::string::String&gt;&gt; (677 samples, 0.60%)</title><rect x="35.4213%" y="277" width="0.5982%" height="15" fill="rgb(209,8,3)" fg:x="40088" fg:w="677"/><text x="35.6713%" y="287.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (677 samples, 0.60%)</title><rect x="35.4213%" y="261" width="0.5982%" height="15" fill="rgb(214,25,53)" fg:x="40088" fg:w="677"/><text x="35.6713%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (654 samples, 0.58%)</title><rect x="35.4416%" y="245" width="0.5779%" height="15" fill="rgb(254,186,54)" fg:x="40111" fg:w="654"/><text x="35.6916%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_sub (654 samples, 0.58%)</title><rect x="35.4416%" y="229" width="0.5779%" height="15" fill="rgb(208,174,49)" fg:x="40111" fg:w="654"/><text x="35.6916%" y="239.50"></text></g><g><title>sn_rust_dealloc (133 samples, 0.12%)</title><rect x="36.0362%" y="165" width="0.1175%" height="15" fill="rgb(233,191,51)" fg:x="40784" fg:w="133"/><text x="36.2862%" y="175.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1,010 samples, 0.89%)</title><rect x="35.4168%" y="309" width="0.8924%" height="15" fill="rgb(222,134,10)" fg:x="40083" fg:w="1010"/><text x="35.6668%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (328 samples, 0.29%)</title><rect x="36.0194%" y="293" width="0.2898%" height="15" fill="rgb(230,226,20)" fg:x="40765" fg:w="328"/><text x="36.2694%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (328 samples, 0.29%)</title><rect x="36.0194%" y="277" width="0.2898%" height="15" fill="rgb(251,111,25)" fg:x="40765" fg:w="328"/><text x="36.2694%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (328 samples, 0.29%)</title><rect x="36.0194%" y="261" width="0.2898%" height="15" fill="rgb(224,40,46)" fg:x="40765" fg:w="328"/><text x="36.2694%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (328 samples, 0.29%)</title><rect x="36.0194%" y="245" width="0.2898%" height="15" fill="rgb(236,108,47)" fg:x="40765" fg:w="328"/><text x="36.2694%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (309 samples, 0.27%)</title><rect x="36.0362%" y="229" width="0.2730%" height="15" fill="rgb(234,93,0)" fg:x="40784" fg:w="309"/><text x="36.2862%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (309 samples, 0.27%)</title><rect x="36.0362%" y="213" width="0.2730%" height="15" fill="rgb(224,213,32)" fg:x="40784" fg:w="309"/><text x="36.2862%" y="223.50"></text></g><g><title>__rg_dealloc (309 samples, 0.27%)</title><rect x="36.0362%" y="197" width="0.2730%" height="15" fill="rgb(251,11,48)" fg:x="40784" fg:w="309"/><text x="36.2862%" y="207.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (309 samples, 0.27%)</title><rect x="36.0362%" y="181" width="0.2730%" height="15" fill="rgb(236,173,5)" fg:x="40784" fg:w="309"/><text x="36.2862%" y="191.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (176 samples, 0.16%)</title><rect x="36.1537%" y="165" width="0.1555%" height="15" fill="rgb(230,95,12)" fg:x="40917" fg:w="176"/><text x="36.4037%" y="175.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (808 samples, 0.71%)</title><rect x="36.3093%" y="309" width="0.7139%" height="15" fill="rgb(232,209,1)" fg:x="41093" fg:w="808"/><text x="36.5593%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_sub (808 samples, 0.71%)</title><rect x="36.3093%" y="293" width="0.7139%" height="15" fill="rgb(232,6,1)" fg:x="41093" fg:w="808"/><text x="36.5593%" y="303.50"></text></g><g><title>sn_rust_dealloc (60 samples, 0.05%)</title><rect x="37.0232%" y="309" width="0.0530%" height="15" fill="rgb(210,224,50)" fg:x="41901" fg:w="60"/><text x="37.2732%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,305 samples, 2.04%)</title><rect x="35.0643%" y="373" width="2.0367%" height="15" fill="rgb(228,127,35)" fg:x="39684" fg:w="2305"/><text x="35.3143%" y="383.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;[alloc::sync::Arc&lt;core::pin::Pin&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;]&gt; (2,304 samples, 2.04%)</title><rect x="35.0652%" y="357" width="2.0358%" height="15" fill="rgb(245,102,45)" fg:x="39685" fg:w="2304"/><text x="35.3152%" y="367.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;core::pin::Pin&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;&gt; (2,295 samples, 2.03%)</title><rect x="35.0731%" y="341" width="2.0278%" height="15" fill="rgb(214,1,49)" fg:x="39694" fg:w="2295"/><text x="35.3231%" y="351.50">c..</text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2,295 samples, 2.03%)</title><rect x="35.0731%" y="325" width="2.0278%" height="15" fill="rgb(226,163,40)" fg:x="39694" fg:w="2295"/><text x="35.3231%" y="335.50">&lt;..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (28 samples, 0.02%)</title><rect x="37.0762%" y="309" width="0.0247%" height="15" fill="rgb(239,212,28)" fg:x="41961" fg:w="28"/><text x="37.3262%" y="319.50"></text></g><g><title>sn_rust_dealloc (59 samples, 0.05%)</title><rect x="37.1124%" y="277" width="0.0521%" height="15" fill="rgb(220,20,13)" fg:x="42002" fg:w="59"/><text x="37.3624%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;core::pin::Pin&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;&gt;&gt; (2,378 samples, 2.10%)</title><rect x="35.0643%" y="389" width="2.1012%" height="15" fill="rgb(210,164,35)" fg:x="39684" fg:w="2378"/><text x="35.3143%" y="399.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::sync::Arc&lt;core::pin::Pin&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;&gt;&gt; (73 samples, 0.06%)</title><rect x="37.1009%" y="373" width="0.0645%" height="15" fill="rgb(248,109,41)" fg:x="41989" fg:w="73"/><text x="37.3509%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (73 samples, 0.06%)</title><rect x="37.1009%" y="357" width="0.0645%" height="15" fill="rgb(238,23,50)" fg:x="41989" fg:w="73"/><text x="37.3509%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (67 samples, 0.06%)</title><rect x="37.1063%" y="341" width="0.0592%" height="15" fill="rgb(211,48,49)" fg:x="41995" fg:w="67"/><text x="37.3563%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (67 samples, 0.06%)</title><rect x="37.1063%" y="325" width="0.0592%" height="15" fill="rgb(223,36,21)" fg:x="41995" fg:w="67"/><text x="37.3563%" y="335.50"></text></g><g><title>__rg_dealloc (67 samples, 0.06%)</title><rect x="37.1063%" y="309" width="0.0592%" height="15" fill="rgb(207,123,46)" fg:x="41995" fg:w="67"/><text x="37.3563%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (67 samples, 0.06%)</title><rect x="37.1063%" y="293" width="0.0592%" height="15" fill="rgb(240,218,32)" fg:x="41995" fg:w="67"/><text x="37.3563%" y="303.50"></text></g><g><title>[main] (21 samples, 0.02%)</title><rect x="37.3121%" y="229" width="0.0186%" height="15" fill="rgb(252,5,43)" fg:x="42228" fg:w="21"/><text x="37.5621%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (21 samples, 0.02%)</title><rect x="37.3121%" y="213" width="0.0186%" height="15" fill="rgb(252,84,19)" fg:x="42228" fg:w="21"/><text x="37.5621%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (93 samples, 0.08%)</title><rect x="37.3307%" y="229" width="0.0822%" height="15" fill="rgb(243,152,39)" fg:x="42249" fg:w="93"/><text x="37.5807%" y="239.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (93 samples, 0.08%)</title><rect x="37.3307%" y="213" width="0.0822%" height="15" fill="rgb(234,160,15)" fg:x="42249" fg:w="93"/><text x="37.5807%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (747 samples, 0.66%)</title><rect x="37.6355%" y="197" width="0.6600%" height="15" fill="rgb(237,34,20)" fg:x="42594" fg:w="747"/><text x="37.8855%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tremor_value::value::Value]&gt; (730 samples, 0.65%)</title><rect x="37.6505%" y="181" width="0.6450%" height="15" fill="rgb(229,97,13)" fg:x="42611" fg:w="730"/><text x="37.9005%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (596 samples, 0.53%)</title><rect x="37.7689%" y="165" width="0.5266%" height="15" fill="rgb(234,71,50)" fg:x="42745" fg:w="596"/><text x="38.0189%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (1,046 samples, 0.92%)</title><rect x="37.4129%" y="229" width="0.9242%" height="15" fill="rgb(253,155,4)" fg:x="42342" fg:w="1046"/><text x="37.6629%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;tremor_value::value::Value&gt;&gt; (794 samples, 0.70%)</title><rect x="37.6355%" y="213" width="0.7016%" height="15" fill="rgb(222,185,37)" fg:x="42594" fg:w="794"/><text x="37.8855%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;tremor_value::value::Value&gt;&gt; (47 samples, 0.04%)</title><rect x="38.2956%" y="197" width="0.0415%" height="15" fill="rgb(251,177,13)" fg:x="43341" fg:w="47"/><text x="38.5456%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (47 samples, 0.04%)</title><rect x="38.2956%" y="181" width="0.0415%" height="15" fill="rgb(250,179,40)" fg:x="43341" fg:w="47"/><text x="38.5456%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (27 samples, 0.02%)</title><rect x="38.3132%" y="165" width="0.0239%" height="15" fill="rgb(242,44,2)" fg:x="43361" fg:w="27"/><text x="38.5632%" y="175.50"></text></g><g><title>core::alloc::layout::Layout::array (20 samples, 0.02%)</title><rect x="38.3194%" y="149" width="0.0177%" height="15" fill="rgb(216,177,13)" fg:x="43368" fg:w="20"/><text x="38.5694%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (20 samples, 0.02%)</title><rect x="38.3194%" y="133" width="0.0177%" height="15" fill="rgb(216,106,43)" fg:x="43368" fg:w="20"/><text x="38.5694%" y="143.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (20 samples, 0.02%)</title><rect x="38.3194%" y="117" width="0.0177%" height="15" fill="rgb(216,183,2)" fg:x="43368" fg:w="20"/><text x="38.5694%" y="127.50"></text></g><g><title>sn_rust_dealloc (236 samples, 0.21%)</title><rect x="38.3371%" y="229" width="0.2085%" height="15" fill="rgb(249,75,3)" fg:x="43388" fg:w="236"/><text x="38.5871%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,675 samples, 1.48%)</title><rect x="37.1937%" y="277" width="1.4800%" height="15" fill="rgb(219,67,39)" fg:x="42094" fg:w="1675"/><text x="37.4437%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)]&gt; (1,675 samples, 1.48%)</title><rect x="37.1937%" y="261" width="1.4800%" height="15" fill="rgb(253,228,2)" fg:x="42094" fg:w="1675"/><text x="37.4437%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)&gt; (1,646 samples, 1.45%)</title><rect x="37.2194%" y="245" width="1.4544%" height="15" fill="rgb(235,138,27)" fg:x="42123" fg:w="1646"/><text x="37.4694%" y="255.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (145 samples, 0.13%)</title><rect x="38.5456%" y="229" width="0.1281%" height="15" fill="rgb(236,97,51)" fg:x="43624" fg:w="145"/><text x="38.7956%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (1,713 samples, 1.51%)</title><rect x="37.1822%" y="325" width="1.5136%" height="15" fill="rgb(240,80,30)" fg:x="42081" fg:w="1713"/><text x="37.4322%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::vecmap::VecMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (1,700 samples, 1.50%)</title><rect x="37.1937%" y="309" width="1.5021%" height="15" fill="rgb(230,178,19)" fg:x="42094" fg:w="1700"/><text x="37.4437%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)&gt;&gt; (1,700 samples, 1.50%)</title><rect x="37.1937%" y="293" width="1.5021%" height="15" fill="rgb(210,190,27)" fg:x="42094" fg:w="1700"/><text x="37.4437%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)&gt;&gt; (25 samples, 0.02%)</title><rect x="38.6737%" y="277" width="0.0221%" height="15" fill="rgb(222,107,31)" fg:x="43769" fg:w="25"/><text x="38.9237%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.02%)</title><rect x="38.6737%" y="261" width="0.0221%" height="15" fill="rgb(216,127,34)" fg:x="43769" fg:w="25"/><text x="38.9237%" y="271.50"></text></g><g><title>sn_rust_dealloc (117 samples, 0.10%)</title><rect x="38.6958%" y="325" width="0.1034%" height="15" fill="rgb(234,116,52)" fg:x="43794" fg:w="117"/><text x="38.9458%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (2,201 samples, 1.94%)</title><rect x="37.1681%" y="373" width="1.9448%" height="15" fill="rgb(222,124,15)" fg:x="42065" fg:w="2201"/><text x="37.4181%" y="383.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt;&gt; (2,189 samples, 1.93%)</title><rect x="37.1787%" y="357" width="1.9342%" height="15" fill="rgb(231,179,28)" fg:x="42077" fg:w="2189"/><text x="37.4287%" y="367.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (2,185 samples, 1.93%)</title><rect x="37.1822%" y="341" width="1.9306%" height="15" fill="rgb(226,93,45)" fg:x="42081" fg:w="2185"/><text x="37.4322%" y="351.50">c..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (355 samples, 0.31%)</title><rect x="38.7992%" y="325" width="0.3137%" height="15" fill="rgb(215,8,51)" fg:x="43911" fg:w="355"/><text x="39.0492%" y="335.50"></text></g><g><title>sn_rust_dealloc (74 samples, 0.07%)</title><rect x="39.1129%" y="373" width="0.0654%" height="15" fill="rgb(223,106,5)" fg:x="44266" fg:w="74"/><text x="39.3629%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (4,674 samples, 4.13%)</title><rect x="35.0643%" y="405" width="4.1299%" height="15" fill="rgb(250,191,5)" fg:x="39684" fg:w="4674"/><text x="35.3143%" y="415.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (2,296 samples, 2.03%)</title><rect x="37.1655%" y="389" width="2.0287%" height="15" fill="rgb(242,132,44)" fg:x="42062" fg:w="2296"/><text x="37.4155%" y="399.50">c..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (18 samples, 0.02%)</title><rect x="39.1783%" y="373" width="0.0159%" height="15" fill="rgb(251,152,29)" fg:x="44340" fg:w="18"/><text x="39.4283%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (698 samples, 0.62%)</title><rect x="39.6969%" y="261" width="0.6167%" height="15" fill="rgb(218,179,5)" fg:x="44927" fg:w="698"/><text x="39.9469%" y="271.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (698 samples, 0.62%)</title><rect x="39.6969%" y="245" width="0.6167%" height="15" fill="rgb(227,67,19)" fg:x="44927" fg:w="698"/><text x="39.9469%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (94 samples, 0.08%)</title><rect x="40.3137%" y="261" width="0.0831%" height="15" fill="rgb(233,119,31)" fg:x="45625" fg:w="94"/><text x="40.5637%" y="271.50"></text></g><g><title>sn_rust_dealloc (196 samples, 0.17%)</title><rect x="40.3967%" y="261" width="0.1732%" height="15" fill="rgb(241,120,22)" fg:x="45719" fg:w="196"/><text x="40.6467%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,088 samples, 0.96%)</title><rect x="39.6156%" y="309" width="0.9613%" height="15" fill="rgb(224,102,30)" fg:x="44835" fg:w="1088"/><text x="39.8656%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)]&gt; (1,082 samples, 0.96%)</title><rect x="39.6209%" y="293" width="0.9560%" height="15" fill="rgb(210,164,37)" fg:x="44841" fg:w="1082"/><text x="39.8709%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)&gt; (1,018 samples, 0.90%)</title><rect x="39.6775%" y="277" width="0.8995%" height="15" fill="rgb(226,191,16)" fg:x="44905" fg:w="1018"/><text x="39.9275%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (1,561 samples, 1.38%)</title><rect x="39.2145%" y="357" width="1.3793%" height="15" fill="rgb(214,40,45)" fg:x="44381" fg:w="1561"/><text x="39.4645%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::vecmap::VecMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (1,107 samples, 0.98%)</title><rect x="39.6156%" y="341" width="0.9781%" height="15" fill="rgb(244,29,26)" fg:x="44835" fg:w="1107"/><text x="39.8656%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)&gt;&gt; (1,107 samples, 0.98%)</title><rect x="39.6156%" y="325" width="0.9781%" height="15" fill="rgb(216,16,5)" fg:x="44835" fg:w="1107"/><text x="39.8656%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)&gt;&gt; (19 samples, 0.02%)</title><rect x="40.5770%" y="309" width="0.0168%" height="15" fill="rgb(249,76,35)" fg:x="45923" fg:w="19"/><text x="40.8270%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.02%)</title><rect x="40.5770%" y="293" width="0.0168%" height="15" fill="rgb(207,11,44)" fg:x="45923" fg:w="19"/><text x="40.8270%" y="303.50"></text></g><g><title>sn_rust_dealloc (55 samples, 0.05%)</title><rect x="40.5938%" y="357" width="0.0486%" height="15" fill="rgb(228,190,49)" fg:x="45942" fg:w="55"/><text x="40.8438%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (1,696 samples, 1.50%)</title><rect x="39.1942%" y="405" width="1.4986%" height="15" fill="rgb(214,173,12)" fg:x="44358" fg:w="1696"/><text x="39.4442%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt;&gt; (1,676 samples, 1.48%)</title><rect x="39.2118%" y="389" width="1.4809%" height="15" fill="rgb(218,26,35)" fg:x="44378" fg:w="1676"/><text x="39.4618%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (1,673 samples, 1.48%)</title><rect x="39.2145%" y="373" width="1.4782%" height="15" fill="rgb(220,200,19)" fg:x="44381" fg:w="1673"/><text x="39.4645%" y="383.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (57 samples, 0.05%)</title><rect x="40.6424%" y="357" width="0.0504%" height="15" fill="rgb(239,95,49)" fg:x="45997" fg:w="57"/><text x="40.8924%" y="367.50"></text></g><g><title>sn_rust_dealloc (49 samples, 0.04%)</title><rect x="40.6927%" y="405" width="0.0433%" height="15" fill="rgb(235,85,53)" fg:x="46054" fg:w="49"/><text x="40.9427%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (7,513 samples, 6.64%)</title><rect x="34.1233%" y="421" width="6.6384%" height="15" fill="rgb(233,133,31)" fg:x="38619" fg:w="7513"/><text x="34.3733%" y="431.50">core::ptr..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (29 samples, 0.03%)</title><rect x="40.7360%" y="405" width="0.0256%" height="15" fill="rgb(218,25,20)" fg:x="46103" fg:w="29"/><text x="40.9860%" y="415.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::mut_at (35 samples, 0.03%)</title><rect x="40.8412%" y="373" width="0.0309%" height="15" fill="rgb(252,210,38)" fg:x="46222" fg:w="35"/><text x="41.0912%" y="383.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::index_for (30 samples, 0.03%)</title><rect x="40.8456%" y="357" width="0.0265%" height="15" fill="rgb(242,134,21)" fg:x="46227" fg:w="30"/><text x="41.0956%" y="367.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (128 samples, 0.11%)</title><rect x="40.7661%" y="421" width="0.1131%" height="15" fill="rgb(213,28,48)" fg:x="46137" fg:w="128"/><text x="41.0161%" y="431.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n (127 samples, 0.11%)</title><rect x="40.7670%" y="405" width="0.1122%" height="15" fill="rgb(250,196,2)" fg:x="46138" fg:w="127"/><text x="41.0170%" y="415.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n_inner (127 samples, 0.11%)</title><rect x="40.7670%" y="389" width="0.1122%" height="15" fill="rgb(227,5,17)" fg:x="46138" fg:w="127"/><text x="41.0170%" y="399.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (17 samples, 0.02%)</title><rect x="40.8942%" y="405" width="0.0150%" height="15" fill="rgb(221,226,24)" fg:x="46282" fg:w="17"/><text x="41.1442%" y="415.50"></text></g><g><title>core::time::Duration::as_nanos (19 samples, 0.02%)</title><rect x="40.9092%" y="405" width="0.0168%" height="15" fill="rgb(211,5,48)" fg:x="46299" fg:w="19"/><text x="41.1592%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (109 samples, 0.10%)</title><rect x="40.9260%" y="389" width="0.0963%" height="15" fill="rgb(219,150,6)" fg:x="46318" fg:w="109"/><text x="41.1760%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (43 samples, 0.04%)</title><rect x="41.0524%" y="357" width="0.0380%" height="15" fill="rgb(251,46,16)" fg:x="46461" fg:w="43"/><text x="41.3024%" y="367.50"></text></g><g><title>core::cmp::PartialOrd::ge (43 samples, 0.04%)</title><rect x="41.0524%" y="341" width="0.0380%" height="15" fill="rgb(220,204,40)" fg:x="46461" fg:w="43"/><text x="41.3024%" y="351.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (41 samples, 0.04%)</title><rect x="41.0541%" y="325" width="0.0362%" height="15" fill="rgb(211,85,2)" fg:x="46463" fg:w="41"/><text x="41.3041%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (19 samples, 0.02%)</title><rect x="41.0736%" y="309" width="0.0168%" height="15" fill="rgb(229,17,7)" fg:x="46485" fg:w="19"/><text x="41.3236%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (19 samples, 0.02%)</title><rect x="41.0736%" y="293" width="0.0168%" height="15" fill="rgb(239,72,28)" fg:x="46485" fg:w="19"/><text x="41.3236%" y="303.50"></text></g><g><title>std::time::SystemTime::duration_since (204 samples, 0.18%)</title><rect x="40.9260%" y="405" width="0.1803%" height="15" fill="rgb(230,47,54)" fg:x="46318" fg:w="204"/><text x="41.1760%" y="415.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (95 samples, 0.08%)</title><rect x="41.0223%" y="389" width="0.0839%" height="15" fill="rgb(214,50,8)" fg:x="46427" fg:w="95"/><text x="41.2723%" y="399.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (95 samples, 0.08%)</title><rect x="41.0223%" y="373" width="0.0839%" height="15" fill="rgb(216,198,43)" fg:x="46427" fg:w="95"/><text x="41.2723%" y="383.50"></text></g><g><title>core::time::Duration::new (18 samples, 0.02%)</title><rect x="41.0903%" y="357" width="0.0159%" height="15" fill="rgb(234,20,35)" fg:x="46504" fg:w="18"/><text x="41.3403%" y="367.50"></text></g><g><title>tremor_common::time::nanotime (656 samples, 0.58%)</title><rect x="40.8792%" y="421" width="0.5796%" height="15" fill="rgb(254,45,19)" fg:x="46265" fg:w="656"/><text x="41.1292%" y="431.50"></text></g><g><title>std::time::SystemTime::now (399 samples, 0.35%)</title><rect x="41.1063%" y="405" width="0.3526%" height="15" fill="rgb(219,14,44)" fg:x="46522" fg:w="399"/><text x="41.3563%" y="415.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (399 samples, 0.35%)</title><rect x="41.1063%" y="389" width="0.3526%" height="15" fill="rgb(217,220,26)" fg:x="46522" fg:w="399"/><text x="41.3563%" y="399.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (399 samples, 0.35%)</title><rect x="41.1063%" y="373" width="0.3526%" height="15" fill="rgb(213,158,28)" fg:x="46522" fg:w="399"/><text x="41.3563%" y="383.50"></text></g><g><title>__clock_gettime (310 samples, 0.27%)</title><rect x="41.1849%" y="357" width="0.2739%" height="15" fill="rgb(252,51,52)" fg:x="46611" fg:w="310"/><text x="41.4349%" y="367.50"></text></g><g><title>__vdso_clock_gettime (301 samples, 0.27%)</title><rect x="41.1928%" y="341" width="0.2660%" height="15" fill="rgb(246,89,16)" fg:x="46620" fg:w="301"/><text x="41.4428%" y="351.50"></text></g><g><title>[[vdso]] (253 samples, 0.22%)</title><rect x="41.2353%" y="325" width="0.2235%" height="15" fill="rgb(216,158,49)" fg:x="46668" fg:w="253"/><text x="41.4853%" y="335.50"></text></g><g><title>async_global_executor::threading::thread_main_loop (12,322 samples, 10.89%)</title><rect x="30.5748%" y="949" width="10.8876%" height="15" fill="rgb(236,107,19)" fg:x="34603" fg:w="12322"/><text x="30.8248%" y="959.50">async_global_exe..</text></g><g><title>std::panic::catch_unwind (12,322 samples, 10.89%)</title><rect x="30.5748%" y="933" width="10.8876%" height="15" fill="rgb(228,185,30)" fg:x="34603" fg:w="12322"/><text x="30.8248%" y="943.50">std::panic::catc..</text></g><g><title>std::panicking::try (12,322 samples, 10.89%)</title><rect x="30.5748%" y="917" width="10.8876%" height="15" fill="rgb(246,134,8)" fg:x="34603" fg:w="12322"/><text x="30.8248%" y="927.50">std::panicking::..</text></g><g><title>std::panicking::try::do_call (12,322 samples, 10.89%)</title><rect x="30.5748%" y="901" width="10.8876%" height="15" fill="rgb(214,143,50)" fg:x="34603" fg:w="12322"/><text x="30.8248%" y="911.50">std::panicking::..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (12,322 samples, 10.89%)</title><rect x="30.5748%" y="885" width="10.8876%" height="15" fill="rgb(228,75,8)" fg:x="34603" fg:w="12322"/><text x="30.8248%" y="895.50">async_global_exe..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (12,322 samples, 10.89%)</title><rect x="30.5748%" y="869" width="10.8876%" height="15" fill="rgb(207,175,4)" fg:x="34603" fg:w="12322"/><text x="30.8248%" y="879.50">std::thread::loc..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (12,322 samples, 10.89%)</title><rect x="30.5748%" y="853" width="10.8876%" height="15" fill="rgb(205,108,24)" fg:x="34603" fg:w="12322"/><text x="30.8248%" y="863.50">std::thread::loc..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (12,322 samples, 10.89%)</title><rect x="30.5748%" y="837" width="10.8876%" height="15" fill="rgb(244,120,49)" fg:x="34603" fg:w="12322"/><text x="30.8248%" y="847.50">async_global_exe..</text></g><g><title>async_global_executor::reactor::block_on (12,322 samples, 10.89%)</title><rect x="30.5748%" y="821" width="10.8876%" height="15" fill="rgb(223,47,38)" fg:x="34603" fg:w="12322"/><text x="30.8248%" y="831.50">async_global_exe..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (12,322 samples, 10.89%)</title><rect x="30.5748%" y="805" width="10.8876%" height="15" fill="rgb(229,179,11)" fg:x="34603" fg:w="12322"/><text x="30.8248%" y="815.50">async_global_exe..</text></g><g><title>async_io::driver::block_on (12,322 samples, 10.89%)</title><rect x="30.5748%" y="789" width="10.8876%" height="15" fill="rgb(231,122,1)" fg:x="34603" fg:w="12322"/><text x="30.8248%" y="799.50">async_io::driver..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (12,322 samples, 10.89%)</title><rect x="30.5748%" y="773" width="10.8876%" height="15" fill="rgb(245,119,9)" fg:x="34603" fg:w="12322"/><text x="30.8248%" y="783.50">&lt;futures_lite::f..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,322 samples, 10.89%)</title><rect x="30.5748%" y="757" width="10.8876%" height="15" fill="rgb(241,163,25)" fg:x="34603" fg:w="12322"/><text x="30.8248%" y="767.50">&lt;core::future::f..</text></g><g><title>async_executor::Executor::run::{{closure}} (12,322 samples, 10.89%)</title><rect x="30.5748%" y="741" width="10.8876%" height="15" fill="rgb(217,214,3)" fg:x="34603" fg:w="12322"/><text x="30.8248%" y="751.50">async_executor::..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (12,322 samples, 10.89%)</title><rect x="30.5748%" y="725" width="10.8876%" height="15" fill="rgb(240,86,28)" fg:x="34603" fg:w="12322"/><text x="30.8248%" y="735.50">&lt;futures_lite::f..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,322 samples, 10.89%)</title><rect x="30.5748%" y="709" width="10.8876%" height="15" fill="rgb(215,47,9)" fg:x="34603" fg:w="12322"/><text x="30.8248%" y="719.50">&lt;core::future::f..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (12,322 samples, 10.89%)</title><rect x="30.5748%" y="693" width="10.8876%" height="15" fill="rgb(252,25,45)" fg:x="34603" fg:w="12322"/><text x="30.8248%" y="703.50">async_executor::..</text></g><g><title>async_task::runnable::Runnable::run (12,322 samples, 10.89%)</title><rect x="30.5748%" y="677" width="10.8876%" height="15" fill="rgb(251,164,9)" fg:x="34603" fg:w="12322"/><text x="30.8248%" y="687.50">async_task::runn..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (12,322 samples, 10.89%)</title><rect x="30.5748%" y="661" width="10.8876%" height="15" fill="rgb(233,194,0)" fg:x="34603" fg:w="12322"/><text x="30.8248%" y="671.50">async_task::raw:..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (12,321 samples, 10.89%)</title><rect x="30.5757%" y="645" width="10.8867%" height="15" fill="rgb(249,111,24)" fg:x="34604" fg:w="12321"/><text x="30.8257%" y="655.50">&lt;core::pin::Pin&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,321 samples, 10.89%)</title><rect x="30.5757%" y="629" width="10.8867%" height="15" fill="rgb(250,223,3)" fg:x="34604" fg:w="12321"/><text x="30.8257%" y="639.50">&lt;core::future::f..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (12,321 samples, 10.89%)</title><rect x="30.5757%" y="613" width="10.8867%" height="15" fill="rgb(236,178,37)" fg:x="34604" fg:w="12321"/><text x="30.8257%" y="623.50">async_executor::..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (12,321 samples, 10.89%)</title><rect x="30.5757%" y="597" width="10.8867%" height="15" fill="rgb(241,158,50)" fg:x="34604" fg:w="12321"/><text x="30.8257%" y="607.50">&lt;async_std::task..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (12,321 samples, 10.89%)</title><rect x="30.5757%" y="581" width="10.8867%" height="15" fill="rgb(213,121,41)" fg:x="34604" fg:w="12321"/><text x="30.8257%" y="591.50">async_std::task:..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (12,321 samples, 10.89%)</title><rect x="30.5757%" y="565" width="10.8867%" height="15" fill="rgb(240,92,3)" fg:x="34604" fg:w="12321"/><text x="30.8257%" y="575.50">std::thread::loc..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (12,321 samples, 10.89%)</title><rect x="30.5757%" y="549" width="10.8867%" height="15" fill="rgb(205,123,3)" fg:x="34604" fg:w="12321"/><text x="30.8257%" y="559.50">std::thread::loc..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (12,321 samples, 10.89%)</title><rect x="30.5757%" y="533" width="10.8867%" height="15" fill="rgb(205,97,47)" fg:x="34604" fg:w="12321"/><text x="30.8257%" y="543.50">async_std::task:..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (12,321 samples, 10.89%)</title><rect x="30.5757%" y="517" width="10.8867%" height="15" fill="rgb(247,152,14)" fg:x="34604" fg:w="12321"/><text x="30.8257%" y="527.50">&lt;async_std::task..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,321 samples, 10.89%)</title><rect x="30.5757%" y="501" width="10.8867%" height="15" fill="rgb(248,195,53)" fg:x="34604" fg:w="12321"/><text x="30.8257%" y="511.50">&lt;core::future::f..</text></g><g><title>tremor_runtime::connectors::sink::SinkManager&lt;S&gt;::run::{{closure}} (12,321 samples, 10.89%)</title><rect x="30.5757%" y="485" width="10.8867%" height="15" fill="rgb(226,201,16)" fg:x="34604" fg:w="12321"/><text x="30.8257%" y="495.50">tremor_runtime::..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (11,719 samples, 10.35%)</title><rect x="31.1076%" y="469" width="10.3548%" height="15" fill="rgb(205,98,0)" fg:x="35206" fg:w="11719"/><text x="31.3576%" y="479.50">&lt;core::pin::Pin..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,719 samples, 10.35%)</title><rect x="31.1076%" y="453" width="10.3548%" height="15" fill="rgb(214,191,48)" fg:x="35206" fg:w="11719"/><text x="31.3576%" y="463.50">&lt;core::future::..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::Sink&gt;::on_event::{{closure}} (8,926 samples, 7.89%)</title><rect x="33.5754%" y="437" width="7.8869%" height="15" fill="rgb(237,112,39)" fg:x="37999" fg:w="8926"/><text x="33.8254%" y="447.50">&lt;tremor_run..</text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (53 samples, 0.05%)</title><rect x="41.4623%" y="357" width="0.0468%" height="15" fill="rgb(247,203,27)" fg:x="46925" fg:w="53"/><text x="41.7123%" y="367.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (53 samples, 0.05%)</title><rect x="41.4623%" y="341" width="0.0468%" height="15" fill="rgb(235,124,28)" fg:x="46925" fg:w="53"/><text x="41.7123%" y="351.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (53 samples, 0.05%)</title><rect x="41.4623%" y="325" width="0.0468%" height="15" fill="rgb(208,207,46)" fg:x="46925" fg:w="53"/><text x="41.7123%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (53 samples, 0.05%)</title><rect x="41.4623%" y="309" width="0.0468%" height="15" fill="rgb(234,176,4)" fg:x="46925" fg:w="53"/><text x="41.7123%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (53 samples, 0.05%)</title><rect x="41.4623%" y="293" width="0.0468%" height="15" fill="rgb(230,133,28)" fg:x="46925" fg:w="53"/><text x="41.7123%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (53 samples, 0.05%)</title><rect x="41.4623%" y="277" width="0.0468%" height="15" fill="rgb(211,137,40)" fg:x="46925" fg:w="53"/><text x="41.7123%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (53 samples, 0.05%)</title><rect x="41.4623%" y="261" width="0.0468%" height="15" fill="rgb(254,35,13)" fg:x="46925" fg:w="53"/><text x="41.7123%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (53 samples, 0.05%)</title><rect x="41.4623%" y="245" width="0.0468%" height="15" fill="rgb(225,49,51)" fg:x="46925" fg:w="53"/><text x="41.7123%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (53 samples, 0.05%)</title><rect x="41.4623%" y="229" width="0.0468%" height="15" fill="rgb(251,10,15)" fg:x="46925" fg:w="53"/><text x="41.7123%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (53 samples, 0.05%)</title><rect x="41.4623%" y="213" width="0.0468%" height="15" fill="rgb(228,207,15)" fg:x="46925" fg:w="53"/><text x="41.7123%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (53 samples, 0.05%)</title><rect x="41.4623%" y="197" width="0.0468%" height="15" fill="rgb(241,99,19)" fg:x="46925" fg:w="53"/><text x="41.7123%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (50 samples, 0.04%)</title><rect x="41.4650%" y="181" width="0.0442%" height="15" fill="rgb(207,104,49)" fg:x="46928" fg:w="50"/><text x="41.7150%" y="191.50"></text></g><g><title>alloc::alloc::Global::grow_impl (50 samples, 0.04%)</title><rect x="41.4650%" y="165" width="0.0442%" height="15" fill="rgb(234,99,18)" fg:x="46928" fg:w="50"/><text x="41.7150%" y="175.50"></text></g><g><title>alloc::alloc::realloc (50 samples, 0.04%)</title><rect x="41.4650%" y="149" width="0.0442%" height="15" fill="rgb(213,191,49)" fg:x="46928" fg:w="50"/><text x="41.7150%" y="159.50"></text></g><g><title>__rg_realloc (50 samples, 0.04%)</title><rect x="41.4650%" y="133" width="0.0442%" height="15" fill="rgb(210,226,19)" fg:x="46928" fg:w="50"/><text x="41.7150%" y="143.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (50 samples, 0.04%)</title><rect x="41.4650%" y="117" width="0.0442%" height="15" fill="rgb(229,97,18)" fg:x="46928" fg:w="50"/><text x="41.7150%" y="127.50"></text></g><g><title>sn_rust_realloc (49 samples, 0.04%)</title><rect x="41.4659%" y="101" width="0.0433%" height="15" fill="rgb(211,167,15)" fg:x="46929" fg:w="49"/><text x="41.7159%" y="111.50"></text></g><g><title>[libc-2.31.so] (96 samples, 0.08%)</title><rect x="41.7027%" y="37" width="0.0848%" height="15" fill="rgb(210,169,34)" fg:x="47197" fg:w="96"/><text x="41.9527%" y="47.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (13 samples, 0.01%)</title><rect x="41.7884%" y="37" width="0.0115%" height="15" fill="rgb(241,121,31)" fg:x="47294" fg:w="13"/><text x="42.0384%" y="47.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (28 samples, 0.02%)</title><rect x="41.7999%" y="37" width="0.0247%" height="15" fill="rgb(232,40,11)" fg:x="47307" fg:w="28"/><text x="42.0499%" y="47.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (336 samples, 0.30%)</title><rect x="41.5427%" y="133" width="0.2969%" height="15" fill="rgb(205,86,26)" fg:x="47016" fg:w="336"/><text x="41.7927%" y="143.50"></text></g><g><title>alloc::alloc::Global::grow_impl (336 samples, 0.30%)</title><rect x="41.5427%" y="117" width="0.2969%" height="15" fill="rgb(231,126,28)" fg:x="47016" fg:w="336"/><text x="41.7927%" y="127.50"></text></g><g><title>alloc::alloc::realloc (336 samples, 0.30%)</title><rect x="41.5427%" y="101" width="0.2969%" height="15" fill="rgb(219,221,18)" fg:x="47016" fg:w="336"/><text x="41.7927%" y="111.50"></text></g><g><title>__rg_realloc (336 samples, 0.30%)</title><rect x="41.5427%" y="85" width="0.2969%" height="15" fill="rgb(211,40,0)" fg:x="47016" fg:w="336"/><text x="41.7927%" y="95.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (336 samples, 0.30%)</title><rect x="41.5427%" y="69" width="0.2969%" height="15" fill="rgb(239,85,43)" fg:x="47016" fg:w="336"/><text x="41.7927%" y="79.50"></text></g><g><title>sn_rust_realloc (332 samples, 0.29%)</title><rect x="41.5463%" y="53" width="0.2934%" height="15" fill="rgb(231,55,21)" fg:x="47020" fg:w="332"/><text x="41.7963%" y="63.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (17 samples, 0.02%)</title><rect x="41.8246%" y="37" width="0.0150%" height="15" fill="rgb(225,184,43)" fg:x="47335" fg:w="17"/><text x="42.0746%" y="47.50"></text></g><g><title>alloc::raw_vec::finish_grow (355 samples, 0.31%)</title><rect x="41.5268%" y="149" width="0.3137%" height="15" fill="rgb(251,158,41)" fg:x="46998" fg:w="355"/><text x="41.7768%" y="159.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeMap&gt;::serialize_key (434 samples, 0.38%)</title><rect x="41.4623%" y="437" width="0.3835%" height="15" fill="rgb(234,159,37)" fg:x="46925" fg:w="434"/><text x="41.7123%" y="447.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeSeq&gt;::serialize_element (434 samples, 0.38%)</title><rect x="41.4623%" y="421" width="0.3835%" height="15" fill="rgb(216,204,22)" fg:x="46925" fg:w="434"/><text x="41.7123%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for str&gt;::serialize (434 samples, 0.38%)</title><rect x="41.4623%" y="405" width="0.3835%" height="15" fill="rgb(214,17,3)" fg:x="46925" fg:w="434"/><text x="41.7123%" y="415.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_str (434 samples, 0.38%)</title><rect x="41.4623%" y="389" width="0.3835%" height="15" fill="rgb(212,111,17)" fg:x="46925" fg:w="434"/><text x="41.7123%" y="399.50"></text></g><g><title>rmp::encode::str::write_str (434 samples, 0.38%)</title><rect x="41.4623%" y="373" width="0.3835%" height="15" fill="rgb(221,157,24)" fg:x="46925" fg:w="434"/><text x="41.7123%" y="383.50"></text></g><g><title>rmp::encode::str::write_str_len (381 samples, 0.34%)</title><rect x="41.5092%" y="357" width="0.3366%" height="15" fill="rgb(252,16,13)" fg:x="46978" fg:w="381"/><text x="41.7592%" y="367.50"></text></g><g><title>rmp::encode::write_marker (381 samples, 0.34%)</title><rect x="41.5092%" y="341" width="0.3366%" height="15" fill="rgb(221,62,2)" fg:x="46978" fg:w="381"/><text x="41.7592%" y="351.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (381 samples, 0.34%)</title><rect x="41.5092%" y="325" width="0.3366%" height="15" fill="rgb(247,87,22)" fg:x="46978" fg:w="381"/><text x="41.7592%" y="335.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (381 samples, 0.34%)</title><rect x="41.5092%" y="309" width="0.3366%" height="15" fill="rgb(215,73,9)" fg:x="46978" fg:w="381"/><text x="41.7592%" y="319.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (381 samples, 0.34%)</title><rect x="41.5092%" y="293" width="0.3366%" height="15" fill="rgb(207,175,33)" fg:x="46978" fg:w="381"/><text x="41.7592%" y="303.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (381 samples, 0.34%)</title><rect x="41.5092%" y="277" width="0.3366%" height="15" fill="rgb(243,129,54)" fg:x="46978" fg:w="381"/><text x="41.7592%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (381 samples, 0.34%)</title><rect x="41.5092%" y="261" width="0.3366%" height="15" fill="rgb(227,119,45)" fg:x="46978" fg:w="381"/><text x="41.7592%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (381 samples, 0.34%)</title><rect x="41.5092%" y="245" width="0.3366%" height="15" fill="rgb(205,109,36)" fg:x="46978" fg:w="381"/><text x="41.7592%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (381 samples, 0.34%)</title><rect x="41.5092%" y="229" width="0.3366%" height="15" fill="rgb(205,6,39)" fg:x="46978" fg:w="381"/><text x="41.7592%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (381 samples, 0.34%)</title><rect x="41.5092%" y="213" width="0.3366%" height="15" fill="rgb(221,32,16)" fg:x="46978" fg:w="381"/><text x="41.7592%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (381 samples, 0.34%)</title><rect x="41.5092%" y="197" width="0.3366%" height="15" fill="rgb(228,144,50)" fg:x="46978" fg:w="381"/><text x="41.7592%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (381 samples, 0.34%)</title><rect x="41.5092%" y="181" width="0.3366%" height="15" fill="rgb(229,201,53)" fg:x="46978" fg:w="381"/><text x="41.7592%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (381 samples, 0.34%)</title><rect x="41.5092%" y="165" width="0.3366%" height="15" fill="rgb(249,153,27)" fg:x="46978" fg:w="381"/><text x="41.7592%" y="175.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (15 samples, 0.01%)</title><rect x="42.2523%" y="341" width="0.0133%" height="15" fill="rgb(227,106,25)" fg:x="47819" fg:w="15"/><text x="42.5023%" y="351.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (15 samples, 0.01%)</title><rect x="42.2523%" y="325" width="0.0133%" height="15" fill="rgb(230,65,29)" fg:x="47819" fg:w="15"/><text x="42.5023%" y="335.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (15 samples, 0.01%)</title><rect x="42.2523%" y="309" width="0.0133%" height="15" fill="rgb(221,57,46)" fg:x="47819" fg:w="15"/><text x="42.5023%" y="319.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (15 samples, 0.01%)</title><rect x="42.2523%" y="293" width="0.0133%" height="15" fill="rgb(229,161,17)" fg:x="47819" fg:w="15"/><text x="42.5023%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (15 samples, 0.01%)</title><rect x="42.2523%" y="277" width="0.0133%" height="15" fill="rgb(222,213,11)" fg:x="47819" fg:w="15"/><text x="42.5023%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (15 samples, 0.01%)</title><rect x="42.2523%" y="261" width="0.0133%" height="15" fill="rgb(235,35,13)" fg:x="47819" fg:w="15"/><text x="42.5023%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (15 samples, 0.01%)</title><rect x="42.2523%" y="245" width="0.0133%" height="15" fill="rgb(233,158,34)" fg:x="47819" fg:w="15"/><text x="42.5023%" y="255.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_bool (43 samples, 0.04%)</title><rect x="42.2408%" y="389" width="0.0380%" height="15" fill="rgb(215,151,48)" fg:x="47806" fg:w="43"/><text x="42.4908%" y="399.50"></text></g><g><title>rmp::encode::write_bool (39 samples, 0.03%)</title><rect x="42.2443%" y="373" width="0.0345%" height="15" fill="rgb(229,84,14)" fg:x="47810" fg:w="39"/><text x="42.4943%" y="383.50"></text></g><g><title>rmp::encode::write_marker (33 samples, 0.03%)</title><rect x="42.2496%" y="357" width="0.0292%" height="15" fill="rgb(229,68,14)" fg:x="47816" fg:w="33"/><text x="42.4996%" y="367.50"></text></g><g><title>rmp::marker::Marker::to_u8 (15 samples, 0.01%)</title><rect x="42.2655%" y="341" width="0.0133%" height="15" fill="rgb(243,106,26)" fg:x="47834" fg:w="15"/><text x="42.5155%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (13 samples, 0.01%)</title><rect x="42.3062%" y="197" width="0.0115%" height="15" fill="rgb(206,45,38)" fg:x="47880" fg:w="13"/><text x="42.5562%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (12 samples, 0.01%)</title><rect x="42.3070%" y="181" width="0.0106%" height="15" fill="rgb(226,6,15)" fg:x="47881" fg:w="12"/><text x="42.5570%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (12 samples, 0.01%)</title><rect x="42.3070%" y="165" width="0.0106%" height="15" fill="rgb(232,22,54)" fg:x="47881" fg:w="12"/><text x="42.5570%" y="175.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (40 samples, 0.04%)</title><rect x="42.2947%" y="309" width="0.0353%" height="15" fill="rgb(229,222,32)" fg:x="47867" fg:w="40"/><text x="42.5447%" y="319.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (40 samples, 0.04%)</title><rect x="42.2947%" y="293" width="0.0353%" height="15" fill="rgb(228,62,29)" fg:x="47867" fg:w="40"/><text x="42.5447%" y="303.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (40 samples, 0.04%)</title><rect x="42.2947%" y="277" width="0.0353%" height="15" fill="rgb(251,103,34)" fg:x="47867" fg:w="40"/><text x="42.5447%" y="287.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (40 samples, 0.04%)</title><rect x="42.2947%" y="261" width="0.0353%" height="15" fill="rgb(233,12,30)" fg:x="47867" fg:w="40"/><text x="42.5447%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (40 samples, 0.04%)</title><rect x="42.2947%" y="245" width="0.0353%" height="15" fill="rgb(238,52,0)" fg:x="47867" fg:w="40"/><text x="42.5447%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (40 samples, 0.04%)</title><rect x="42.2947%" y="229" width="0.0353%" height="15" fill="rgb(223,98,5)" fg:x="47867" fg:w="40"/><text x="42.5447%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (40 samples, 0.04%)</title><rect x="42.2947%" y="213" width="0.0353%" height="15" fill="rgb(228,75,37)" fg:x="47867" fg:w="40"/><text x="42.5447%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.01%)</title><rect x="42.3176%" y="197" width="0.0124%" height="15" fill="rgb(205,115,49)" fg:x="47893" fg:w="14"/><text x="42.5676%" y="207.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_seq::{{closure}} (73 samples, 0.06%)</title><rect x="42.2788%" y="357" width="0.0645%" height="15" fill="rgb(250,154,43)" fg:x="47849" fg:w="73"/><text x="42.5288%" y="367.50"></text></g><g><title>rmp::encode::write_array_len (63 samples, 0.06%)</title><rect x="42.2876%" y="341" width="0.0557%" height="15" fill="rgb(226,43,29)" fg:x="47859" fg:w="63"/><text x="42.5376%" y="351.50"></text></g><g><title>rmp::encode::write_marker (55 samples, 0.05%)</title><rect x="42.2947%" y="325" width="0.0486%" height="15" fill="rgb(249,228,39)" fg:x="47867" fg:w="55"/><text x="42.5447%" y="335.50"></text></g><g><title>rmp::marker::Marker::to_u8 (15 samples, 0.01%)</title><rect x="42.3300%" y="309" width="0.0133%" height="15" fill="rgb(216,79,43)" fg:x="47907" fg:w="15"/><text x="42.5800%" y="319.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_seq (82 samples, 0.07%)</title><rect x="42.2788%" y="389" width="0.0725%" height="15" fill="rgb(228,95,12)" fg:x="47849" fg:w="82"/><text x="42.5288%" y="399.50"></text></g><g><title>rmp_serde::encode::Serializer&lt;W,C&gt;::maybe_unknown_len_compound (82 samples, 0.07%)</title><rect x="42.2788%" y="373" width="0.0725%" height="15" fill="rgb(249,221,15)" fg:x="47849" fg:w="82"/><text x="42.5288%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (46 samples, 0.04%)</title><rect x="42.5933%" y="229" width="0.0406%" height="15" fill="rgb(233,34,13)" fg:x="48205" fg:w="46"/><text x="42.8433%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (36 samples, 0.03%)</title><rect x="42.6022%" y="213" width="0.0318%" height="15" fill="rgb(214,103,39)" fg:x="48215" fg:w="36"/><text x="42.8522%" y="223.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (15 samples, 0.01%)</title><rect x="42.6366%" y="197" width="0.0133%" height="15" fill="rgb(251,126,39)" fg:x="48254" fg:w="15"/><text x="42.8866%" y="207.50"></text></g><g><title>[libc-2.31.so] (36 samples, 0.03%)</title><rect x="42.9247%" y="85" width="0.0318%" height="15" fill="rgb(214,216,36)" fg:x="48580" fg:w="36"/><text x="43.1747%" y="95.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (20 samples, 0.02%)</title><rect x="42.9627%" y="85" width="0.0177%" height="15" fill="rgb(220,221,8)" fg:x="48623" fg:w="20"/><text x="43.2127%" y="95.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (351 samples, 0.31%)</title><rect x="42.6790%" y="181" width="0.3101%" height="15" fill="rgb(240,216,3)" fg:x="48302" fg:w="351"/><text x="42.9290%" y="191.50"></text></g><g><title>alloc::alloc::Global::grow_impl (351 samples, 0.31%)</title><rect x="42.6790%" y="165" width="0.3101%" height="15" fill="rgb(232,218,17)" fg:x="48302" fg:w="351"/><text x="42.9290%" y="175.50"></text></g><g><title>alloc::alloc::realloc (350 samples, 0.31%)</title><rect x="42.6799%" y="149" width="0.3093%" height="15" fill="rgb(229,163,45)" fg:x="48303" fg:w="350"/><text x="42.9299%" y="159.50"></text></g><g><title>__rg_realloc (350 samples, 0.31%)</title><rect x="42.6799%" y="133" width="0.3093%" height="15" fill="rgb(231,110,42)" fg:x="48303" fg:w="350"/><text x="42.9299%" y="143.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (350 samples, 0.31%)</title><rect x="42.6799%" y="117" width="0.3093%" height="15" fill="rgb(208,170,48)" fg:x="48303" fg:w="350"/><text x="42.9299%" y="127.50"></text></g><g><title>sn_rust_realloc (347 samples, 0.31%)</title><rect x="42.6826%" y="101" width="0.3066%" height="15" fill="rgb(239,116,25)" fg:x="48306" fg:w="347"/><text x="42.9326%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (376 samples, 0.33%)</title><rect x="42.6614%" y="197" width="0.3322%" height="15" fill="rgb(219,200,50)" fg:x="48282" fg:w="376"/><text x="42.9114%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (487 samples, 0.43%)</title><rect x="42.5730%" y="261" width="0.4303%" height="15" fill="rgb(245,200,0)" fg:x="48182" fg:w="487"/><text x="42.8230%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (484 samples, 0.43%)</title><rect x="42.5757%" y="245" width="0.4277%" height="15" fill="rgb(245,119,33)" fg:x="48185" fg:w="484"/><text x="42.8257%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (418 samples, 0.37%)</title><rect x="42.6340%" y="229" width="0.3693%" height="15" fill="rgb(231,125,12)" fg:x="48251" fg:w="418"/><text x="42.8840%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (418 samples, 0.37%)</title><rect x="42.6340%" y="213" width="0.3693%" height="15" fill="rgb(216,96,41)" fg:x="48251" fg:w="418"/><text x="42.8840%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (710 samples, 0.63%)</title><rect x="43.0033%" y="261" width="0.6273%" height="15" fill="rgb(248,43,45)" fg:x="48669" fg:w="710"/><text x="43.2533%" y="271.50"></text></g><g><title>[libc-2.31.so] (677 samples, 0.60%)</title><rect x="43.0325%" y="245" width="0.5982%" height="15" fill="rgb(217,222,7)" fg:x="48702" fg:w="677"/><text x="43.2825%" y="255.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (1,273 samples, 1.12%)</title><rect x="42.5173%" y="357" width="1.1248%" height="15" fill="rgb(233,28,6)" fg:x="48119" fg:w="1273"/><text x="42.7673%" y="367.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1,273 samples, 1.12%)</title><rect x="42.5173%" y="341" width="1.1248%" height="15" fill="rgb(231,218,15)" fg:x="48119" fg:w="1273"/><text x="42.7673%" y="351.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1,273 samples, 1.12%)</title><rect x="42.5173%" y="325" width="1.1248%" height="15" fill="rgb(226,171,48)" fg:x="48119" fg:w="1273"/><text x="42.7673%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1,273 samples, 1.12%)</title><rect x="42.5173%" y="309" width="1.1248%" height="15" fill="rgb(235,201,9)" fg:x="48119" fg:w="1273"/><text x="42.7673%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1,273 samples, 1.12%)</title><rect x="42.5173%" y="293" width="1.1248%" height="15" fill="rgb(217,80,15)" fg:x="48119" fg:w="1273"/><text x="42.7673%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1,273 samples, 1.12%)</title><rect x="42.5173%" y="277" width="1.1248%" height="15" fill="rgb(219,152,8)" fg:x="48119" fg:w="1273"/><text x="42.7673%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (13 samples, 0.01%)</title><rect x="43.6307%" y="261" width="0.0115%" height="15" fill="rgb(243,107,38)" fg:x="49379" fg:w="13"/><text x="43.8807%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (13 samples, 0.01%)</title><rect x="43.6307%" y="245" width="0.0115%" height="15" fill="rgb(231,17,5)" fg:x="49379" fg:w="13"/><text x="43.8807%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (34 samples, 0.03%)</title><rect x="43.7676%" y="213" width="0.0300%" height="15" fill="rgb(209,25,54)" fg:x="49534" fg:w="34"/><text x="44.0176%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (34 samples, 0.03%)</title><rect x="43.7977%" y="213" width="0.0300%" height="15" fill="rgb(219,0,2)" fg:x="49568" fg:w="34"/><text x="44.0477%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (24 samples, 0.02%)</title><rect x="43.8065%" y="197" width="0.0212%" height="15" fill="rgb(246,9,5)" fg:x="49578" fg:w="24"/><text x="44.0565%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (17 samples, 0.02%)</title><rect x="43.8127%" y="181" width="0.0150%" height="15" fill="rgb(226,159,4)" fg:x="49585" fg:w="17"/><text x="44.0627%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (17 samples, 0.02%)</title><rect x="43.8127%" y="165" width="0.0150%" height="15" fill="rgb(219,175,34)" fg:x="49585" fg:w="17"/><text x="44.0627%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (13 samples, 0.01%)</title><rect x="43.8162%" y="149" width="0.0115%" height="15" fill="rgb(236,10,46)" fg:x="49589" fg:w="13"/><text x="44.0662%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (12 samples, 0.01%)</title><rect x="43.8171%" y="133" width="0.0106%" height="15" fill="rgb(240,211,16)" fg:x="49590" fg:w="12"/><text x="44.0671%" y="143.50"></text></g><g><title>alloc::alloc::Global::grow_impl (12 samples, 0.01%)</title><rect x="43.8171%" y="117" width="0.0106%" height="15" fill="rgb(205,3,43)" fg:x="49590" fg:w="12"/><text x="44.0671%" y="127.50"></text></g><g><title>alloc::alloc::realloc (12 samples, 0.01%)</title><rect x="43.8171%" y="101" width="0.0106%" height="15" fill="rgb(245,7,22)" fg:x="49590" fg:w="12"/><text x="44.0671%" y="111.50"></text></g><g><title>__rg_realloc (12 samples, 0.01%)</title><rect x="43.8171%" y="85" width="0.0106%" height="15" fill="rgb(239,132,32)" fg:x="49590" fg:w="12"/><text x="44.0671%" y="95.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (12 samples, 0.01%)</title><rect x="43.8171%" y="69" width="0.0106%" height="15" fill="rgb(228,202,34)" fg:x="49590" fg:w="12"/><text x="44.0671%" y="79.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (99 samples, 0.09%)</title><rect x="43.7588%" y="325" width="0.0875%" height="15" fill="rgb(254,200,22)" fg:x="49524" fg:w="99"/><text x="44.0088%" y="335.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (99 samples, 0.09%)</title><rect x="43.7588%" y="309" width="0.0875%" height="15" fill="rgb(219,10,39)" fg:x="49524" fg:w="99"/><text x="44.0088%" y="319.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (99 samples, 0.09%)</title><rect x="43.7588%" y="293" width="0.0875%" height="15" fill="rgb(226,210,39)" fg:x="49524" fg:w="99"/><text x="44.0088%" y="303.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (99 samples, 0.09%)</title><rect x="43.7588%" y="277" width="0.0875%" height="15" fill="rgb(208,219,16)" fg:x="49524" fg:w="99"/><text x="44.0088%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (99 samples, 0.09%)</title><rect x="43.7588%" y="261" width="0.0875%" height="15" fill="rgb(216,158,51)" fg:x="49524" fg:w="99"/><text x="44.0088%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (99 samples, 0.09%)</title><rect x="43.7588%" y="245" width="0.0875%" height="15" fill="rgb(233,14,44)" fg:x="49524" fg:w="99"/><text x="44.0088%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (99 samples, 0.09%)</title><rect x="43.7588%" y="229" width="0.0875%" height="15" fill="rgb(237,97,39)" fg:x="49524" fg:w="99"/><text x="44.0088%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (21 samples, 0.02%)</title><rect x="43.8277%" y="213" width="0.0186%" height="15" fill="rgb(218,198,43)" fg:x="49602" fg:w="21"/><text x="44.0777%" y="223.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_str (1,793 samples, 1.58%)</title><rect x="42.3512%" y="389" width="1.5843%" height="15" fill="rgb(231,104,20)" fg:x="47931" fg:w="1793"/><text x="42.6012%" y="399.50"></text></g><g><title>rmp::encode::str::write_str (1,654 samples, 1.46%)</title><rect x="42.4740%" y="373" width="1.4615%" height="15" fill="rgb(254,36,13)" fg:x="48070" fg:w="1654"/><text x="42.7240%" y="383.50"></text></g><g><title>rmp::encode::str::write_str_len (332 samples, 0.29%)</title><rect x="43.6421%" y="357" width="0.2934%" height="15" fill="rgb(248,14,50)" fg:x="49392" fg:w="332"/><text x="43.8921%" y="367.50"></text></g><g><title>rmp::encode::write_marker (245 samples, 0.22%)</title><rect x="43.7190%" y="341" width="0.2165%" height="15" fill="rgb(217,107,29)" fg:x="49479" fg:w="245"/><text x="43.9690%" y="351.50"></text></g><g><title>rmp::marker::Marker::to_u8 (101 samples, 0.09%)</title><rect x="43.8463%" y="325" width="0.0892%" height="15" fill="rgb(251,169,33)" fg:x="49623" fg:w="101"/><text x="44.0963%" y="335.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (18 samples, 0.02%)</title><rect x="43.9620%" y="325" width="0.0159%" height="15" fill="rgb(217,108,32)" fg:x="49754" fg:w="18"/><text x="44.2120%" y="335.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (18 samples, 0.02%)</title><rect x="43.9620%" y="309" width="0.0159%" height="15" fill="rgb(219,66,42)" fg:x="49754" fg:w="18"/><text x="44.2120%" y="319.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (18 samples, 0.02%)</title><rect x="43.9620%" y="293" width="0.0159%" height="15" fill="rgb(206,180,7)" fg:x="49754" fg:w="18"/><text x="44.2120%" y="303.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (18 samples, 0.02%)</title><rect x="43.9620%" y="277" width="0.0159%" height="15" fill="rgb(208,226,31)" fg:x="49754" fg:w="18"/><text x="44.2120%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (18 samples, 0.02%)</title><rect x="43.9620%" y="261" width="0.0159%" height="15" fill="rgb(218,26,49)" fg:x="49754" fg:w="18"/><text x="44.2120%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (18 samples, 0.02%)</title><rect x="43.9620%" y="245" width="0.0159%" height="15" fill="rgb(233,197,48)" fg:x="49754" fg:w="18"/><text x="44.2120%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (18 samples, 0.02%)</title><rect x="43.9620%" y="229" width="0.0159%" height="15" fill="rgb(252,181,51)" fg:x="49754" fg:w="18"/><text x="44.2120%" y="239.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_u64 (68 samples, 0.06%)</title><rect x="43.9355%" y="389" width="0.0601%" height="15" fill="rgb(253,90,19)" fg:x="49724" fg:w="68"/><text x="44.1855%" y="399.50"></text></g><g><title>rmp::encode::uint::write_uint (64 samples, 0.06%)</title><rect x="43.9390%" y="373" width="0.0565%" height="15" fill="rgb(215,171,30)" fg:x="49728" fg:w="64"/><text x="44.1890%" y="383.50"></text></g><g><title>rmp::encode::uint::write_pfix (47 samples, 0.04%)</title><rect x="43.9541%" y="357" width="0.0415%" height="15" fill="rgb(214,222,9)" fg:x="49745" fg:w="47"/><text x="44.2041%" y="367.50"></text></g><g><title>rmp::encode::write_marker (42 samples, 0.04%)</title><rect x="43.9585%" y="341" width="0.0371%" height="15" fill="rgb(223,3,22)" fg:x="49750" fg:w="42"/><text x="44.2085%" y="351.50"></text></g><g><title>rmp::marker::Marker::to_u8 (20 samples, 0.02%)</title><rect x="43.9779%" y="325" width="0.0177%" height="15" fill="rgb(225,196,46)" fg:x="49772" fg:w="20"/><text x="44.2279%" y="335.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::deref::Deref&gt;::deref (14 samples, 0.01%)</title><rect x="43.9956%" y="389" width="0.0124%" height="15" fill="rgb(209,110,37)" fg:x="49792" fg:w="14"/><text x="44.2456%" y="399.50"></text></g><g><title>beef::generic::Cow&lt;T,U&gt;::borrow (14 samples, 0.01%)</title><rect x="43.9956%" y="373" width="0.0124%" height="15" fill="rgb(249,89,12)" fg:x="49792" fg:w="14"/><text x="44.2456%" y="383.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (98 samples, 0.09%)</title><rect x="44.0080%" y="389" width="0.0866%" height="15" fill="rgb(226,27,33)" fg:x="49806" fg:w="98"/><text x="44.2580%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.02%)</title><rect x="44.0945%" y="389" width="0.0247%" height="15" fill="rgb(213,82,22)" fg:x="49904" fg:w="28"/><text x="44.3445%" y="399.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeSeq&gt;::end (14 samples, 0.01%)</title><rect x="44.1193%" y="389" width="0.0124%" height="15" fill="rgb(248,140,0)" fg:x="49932" fg:w="14"/><text x="44.3693%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (44 samples, 0.04%)</title><rect x="44.2121%" y="373" width="0.0389%" height="15" fill="rgb(228,106,3)" fg:x="50037" fg:w="44"/><text x="44.4621%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (36 samples, 0.03%)</title><rect x="45.8273%" y="229" width="0.0318%" height="15" fill="rgb(209,23,37)" fg:x="51865" fg:w="36"/><text x="46.0773%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (22 samples, 0.02%)</title><rect x="45.8396%" y="213" width="0.0194%" height="15" fill="rgb(241,93,50)" fg:x="51879" fg:w="22"/><text x="46.0896%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (19 samples, 0.02%)</title><rect x="45.8423%" y="197" width="0.0168%" height="15" fill="rgb(253,46,43)" fg:x="51882" fg:w="19"/><text x="46.0923%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (18 samples, 0.02%)</title><rect x="45.8432%" y="181" width="0.0159%" height="15" fill="rgb(226,206,43)" fg:x="51883" fg:w="18"/><text x="46.0932%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (196 samples, 0.17%)</title><rect x="45.8591%" y="229" width="0.1732%" height="15" fill="rgb(217,54,7)" fg:x="51901" fg:w="196"/><text x="46.1091%" y="239.50"></text></g><g><title>[libc-2.31.so] (178 samples, 0.16%)</title><rect x="45.8750%" y="213" width="0.1573%" height="15" fill="rgb(223,5,52)" fg:x="51919" fg:w="178"/><text x="46.1250%" y="223.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (254 samples, 0.22%)</title><rect x="45.8096%" y="325" width="0.2244%" height="15" fill="rgb(206,52,46)" fg:x="51845" fg:w="254"/><text x="46.0596%" y="335.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (254 samples, 0.22%)</title><rect x="45.8096%" y="309" width="0.2244%" height="15" fill="rgb(253,136,11)" fg:x="51845" fg:w="254"/><text x="46.0596%" y="319.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (254 samples, 0.22%)</title><rect x="45.8096%" y="293" width="0.2244%" height="15" fill="rgb(208,106,33)" fg:x="51845" fg:w="254"/><text x="46.0596%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (254 samples, 0.22%)</title><rect x="45.8096%" y="277" width="0.2244%" height="15" fill="rgb(206,54,4)" fg:x="51845" fg:w="254"/><text x="46.0596%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (254 samples, 0.22%)</title><rect x="45.8096%" y="261" width="0.2244%" height="15" fill="rgb(213,3,15)" fg:x="51845" fg:w="254"/><text x="46.0596%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (254 samples, 0.22%)</title><rect x="45.8096%" y="245" width="0.2244%" height="15" fill="rgb(252,211,39)" fg:x="51845" fg:w="254"/><text x="46.0596%" y="255.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (57 samples, 0.05%)</title><rect x="46.1180%" y="293" width="0.0504%" height="15" fill="rgb(223,6,36)" fg:x="52194" fg:w="57"/><text x="46.3680%" y="303.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (57 samples, 0.05%)</title><rect x="46.1180%" y="277" width="0.0504%" height="15" fill="rgb(252,169,45)" fg:x="52194" fg:w="57"/><text x="46.3680%" y="287.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (57 samples, 0.05%)</title><rect x="46.1180%" y="261" width="0.0504%" height="15" fill="rgb(212,48,26)" fg:x="52194" fg:w="57"/><text x="46.3680%" y="271.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (57 samples, 0.05%)</title><rect x="46.1180%" y="245" width="0.0504%" height="15" fill="rgb(251,102,48)" fg:x="52194" fg:w="57"/><text x="46.3680%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (57 samples, 0.05%)</title><rect x="46.1180%" y="229" width="0.0504%" height="15" fill="rgb(243,208,16)" fg:x="52194" fg:w="57"/><text x="46.3680%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (57 samples, 0.05%)</title><rect x="46.1180%" y="213" width="0.0504%" height="15" fill="rgb(219,96,24)" fg:x="52194" fg:w="57"/><text x="46.3680%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (57 samples, 0.05%)</title><rect x="46.1180%" y="197" width="0.0504%" height="15" fill="rgb(219,33,29)" fg:x="52194" fg:w="57"/><text x="46.3680%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (47 samples, 0.04%)</title><rect x="46.1268%" y="181" width="0.0415%" height="15" fill="rgb(223,176,5)" fg:x="52204" fg:w="47"/><text x="46.3768%" y="191.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_str (555 samples, 0.49%)</title><rect x="45.7274%" y="357" width="0.4904%" height="15" fill="rgb(228,140,14)" fg:x="51752" fg:w="555"/><text x="45.9774%" y="367.50"></text></g><g><title>rmp::encode::str::write_str (495 samples, 0.44%)</title><rect x="45.7804%" y="341" width="0.4374%" height="15" fill="rgb(217,179,31)" fg:x="51812" fg:w="495"/><text x="46.0304%" y="351.50"></text></g><g><title>rmp::encode::str::write_str_len (208 samples, 0.18%)</title><rect x="46.0340%" y="325" width="0.1838%" height="15" fill="rgb(230,9,30)" fg:x="52099" fg:w="208"/><text x="46.2840%" y="335.50"></text></g><g><title>rmp::encode::write_marker (154 samples, 0.14%)</title><rect x="46.0817%" y="309" width="0.1361%" height="15" fill="rgb(230,136,20)" fg:x="52153" fg:w="154"/><text x="46.3317%" y="319.50"></text></g><g><title>rmp::marker::Marker::to_u8 (56 samples, 0.05%)</title><rect x="46.1683%" y="293" width="0.0495%" height="15" fill="rgb(215,210,22)" fg:x="52251" fg:w="56"/><text x="46.4183%" y="303.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (42 samples, 0.04%)</title><rect x="46.2381%" y="341" width="0.0371%" height="15" fill="rgb(218,43,5)" fg:x="52330" fg:w="42"/><text x="46.4881%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and (55 samples, 0.05%)</title><rect x="46.3556%" y="325" width="0.0486%" height="15" fill="rgb(216,11,5)" fg:x="52463" fg:w="55"/><text x="46.6056%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (52 samples, 0.05%)</title><rect x="46.4520%" y="181" width="0.0459%" height="15" fill="rgb(209,82,29)" fg:x="52572" fg:w="52"/><text x="46.7020%" y="191.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (152 samples, 0.13%)</title><rect x="46.4520%" y="293" width="0.1343%" height="15" fill="rgb(244,115,12)" fg:x="52572" fg:w="152"/><text x="46.7020%" y="303.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (152 samples, 0.13%)</title><rect x="46.4520%" y="277" width="0.1343%" height="15" fill="rgb(222,82,18)" fg:x="52572" fg:w="152"/><text x="46.7020%" y="287.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (152 samples, 0.13%)</title><rect x="46.4520%" y="261" width="0.1343%" height="15" fill="rgb(249,227,8)" fg:x="52572" fg:w="152"/><text x="46.7020%" y="271.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (152 samples, 0.13%)</title><rect x="46.4520%" y="245" width="0.1343%" height="15" fill="rgb(253,141,45)" fg:x="52572" fg:w="152"/><text x="46.7020%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (152 samples, 0.13%)</title><rect x="46.4520%" y="229" width="0.1343%" height="15" fill="rgb(234,184,4)" fg:x="52572" fg:w="152"/><text x="46.7020%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (152 samples, 0.13%)</title><rect x="46.4520%" y="213" width="0.1343%" height="15" fill="rgb(218,194,23)" fg:x="52572" fg:w="152"/><text x="46.7020%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (152 samples, 0.13%)</title><rect x="46.4520%" y="197" width="0.1343%" height="15" fill="rgb(235,66,41)" fg:x="52572" fg:w="152"/><text x="46.7020%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (89 samples, 0.08%)</title><rect x="46.5076%" y="181" width="0.0786%" height="15" fill="rgb(245,217,1)" fg:x="52635" fg:w="89"/><text x="46.7576%" y="191.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_u64 (558 samples, 0.49%)</title><rect x="46.2178%" y="357" width="0.4930%" height="15" fill="rgb(229,91,1)" fg:x="52307" fg:w="558"/><text x="46.4678%" y="367.50"></text></g><g><title>rmp::encode::uint::write_uint (493 samples, 0.44%)</title><rect x="46.2752%" y="341" width="0.4356%" height="15" fill="rgb(207,101,30)" fg:x="52372" fg:w="493"/><text x="46.5252%" y="351.50"></text></g><g><title>rmp::encode::uint::write_pfix (347 samples, 0.31%)</title><rect x="46.4042%" y="325" width="0.3066%" height="15" fill="rgb(223,82,49)" fg:x="52518" fg:w="347"/><text x="46.6542%" y="335.50"></text></g><g><title>rmp::encode::write_marker (306 samples, 0.27%)</title><rect x="46.4405%" y="309" width="0.2704%" height="15" fill="rgb(218,167,17)" fg:x="52559" fg:w="306"/><text x="46.6905%" y="319.50"></text></g><g><title>rmp::marker::Marker::to_u8 (141 samples, 0.12%)</title><rect x="46.5863%" y="293" width="0.1246%" height="15" fill="rgb(208,103,14)" fg:x="52724" fg:w="141"/><text x="46.8363%" y="303.50"></text></g><g><title>&lt;tremor_runtime::codec::msgpack::MsgPack as tremor_runtime::codec::Codec&gt;::encode (6,024 samples, 5.32%)</title><rect x="41.4623%" y="533" width="5.3227%" height="15" fill="rgb(238,20,8)" fg:x="46925" fg:w="6024"/><text x="41.7123%" y="543.50">&lt;tremor..</text></g><g><title>rmp_serde::encode::to_vec (6,024 samples, 5.32%)</title><rect x="41.4623%" y="517" width="5.3227%" height="15" fill="rgb(218,80,54)" fg:x="46925" fg:w="6024"/><text x="41.7123%" y="527.50">rmp_ser..</text></g><g><title>rmp_serde::encode::write (6,024 samples, 5.32%)</title><rect x="41.4623%" y="501" width="5.3227%" height="15" fill="rgb(240,144,17)" fg:x="46925" fg:w="6024"/><text x="41.7123%" y="511.50">rmp_ser..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6,024 samples, 5.32%)</title><rect x="41.4623%" y="485" width="5.3227%" height="15" fill="rgb(245,27,50)" fg:x="46925" fg:w="6024"/><text x="41.7123%" y="495.50">serde::..</text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (6,024 samples, 5.32%)</title><rect x="41.4623%" y="469" width="5.3227%" height="15" fill="rgb(251,51,7)" fg:x="46925" fg:w="6024"/><text x="41.7123%" y="479.50">tremor_..</text></g><g><title>serde::ser::SerializeMap::serialize_entry (6,024 samples, 5.32%)</title><rect x="41.4623%" y="453" width="5.3227%" height="15" fill="rgb(245,217,29)" fg:x="46925" fg:w="6024"/><text x="41.7123%" y="463.50">serde::..</text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeMap&gt;::serialize_value (5,590 samples, 4.94%)</title><rect x="41.8458%" y="437" width="4.9393%" height="15" fill="rgb(221,176,29)" fg:x="47359" fg:w="5590"/><text x="42.0958%" y="447.50">&lt;rmp_s..</text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeSeq&gt;::serialize_element (5,590 samples, 4.94%)</title><rect x="41.8458%" y="421" width="4.9393%" height="15" fill="rgb(212,180,24)" fg:x="47359" fg:w="5590"/><text x="42.0958%" y="431.50">&lt;rmp_s..</text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (5,590 samples, 4.94%)</title><rect x="41.8458%" y="405" width="4.9393%" height="15" fill="rgb(254,24,2)" fg:x="47359" fg:w="5590"/><text x="42.0958%" y="415.50">tremor..</text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeSeq&gt;::serialize_element (3,003 samples, 2.65%)</title><rect x="44.1317%" y="389" width="2.6534%" height="15" fill="rgb(230,100,2)" fg:x="49946" fg:w="3003"/><text x="44.3817%" y="399.50">&lt;r..</text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (2,868 samples, 2.53%)</title><rect x="44.2509%" y="373" width="2.5341%" height="15" fill="rgb(219,142,25)" fg:x="50081" fg:w="2868"/><text x="44.5009%" y="383.50">tr..</text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::deref::Deref&gt;::deref (84 samples, 0.07%)</title><rect x="46.7108%" y="357" width="0.0742%" height="15" fill="rgb(240,73,43)" fg:x="52865" fg:w="84"/><text x="46.9608%" y="367.50"></text></g><g><title>beef::generic::Cow&lt;T,U&gt;::borrow (84 samples, 0.07%)</title><rect x="46.7108%" y="341" width="0.0742%" height="15" fill="rgb(214,114,15)" fg:x="52865" fg:w="84"/><text x="46.9608%" y="351.50"></text></g><g><title>alloc::alloc::exchange_malloc (37 samples, 0.03%)</title><rect x="46.8151%" y="517" width="0.0327%" height="15" fill="rgb(207,130,4)" fg:x="52983" fg:w="37"/><text x="47.0651%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (37 samples, 0.03%)</title><rect x="46.8151%" y="501" width="0.0327%" height="15" fill="rgb(221,25,40)" fg:x="52983" fg:w="37"/><text x="47.0651%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (37 samples, 0.03%)</title><rect x="46.8151%" y="485" width="0.0327%" height="15" fill="rgb(241,184,7)" fg:x="52983" fg:w="37"/><text x="47.0651%" y="495.50"></text></g><g><title>alloc::alloc::alloc (29 samples, 0.03%)</title><rect x="46.8222%" y="469" width="0.0256%" height="15" fill="rgb(235,159,4)" fg:x="52991" fg:w="29"/><text x="47.0722%" y="479.50"></text></g><g><title>__rg_alloc (29 samples, 0.03%)</title><rect x="46.8222%" y="453" width="0.0256%" height="15" fill="rgb(214,87,48)" fg:x="52991" fg:w="29"/><text x="47.0722%" y="463.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (29 samples, 0.03%)</title><rect x="46.8222%" y="437" width="0.0256%" height="15" fill="rgb(246,198,24)" fg:x="52991" fg:w="29"/><text x="47.0722%" y="447.50"></text></g><g><title>sn_rust_alloc (29 samples, 0.03%)</title><rect x="46.8222%" y="421" width="0.0256%" height="15" fill="rgb(209,66,40)" fg:x="52991" fg:w="29"/><text x="47.0722%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (22 samples, 0.02%)</title><rect x="46.8708%" y="501" width="0.0194%" height="15" fill="rgb(233,147,39)" fg:x="53046" fg:w="22"/><text x="47.1208%" y="511.50"></text></g><g><title>core::time::Duration::as_nanos (17 samples, 0.02%)</title><rect x="46.8902%" y="501" width="0.0150%" height="15" fill="rgb(231,145,52)" fg:x="53068" fg:w="17"/><text x="47.1402%" y="511.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (71 samples, 0.06%)</title><rect x="46.9052%" y="485" width="0.0627%" height="15" fill="rgb(206,20,26)" fg:x="53085" fg:w="71"/><text x="47.1552%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (30 samples, 0.03%)</title><rect x="46.9927%" y="453" width="0.0265%" height="15" fill="rgb(238,220,4)" fg:x="53184" fg:w="30"/><text x="47.2427%" y="463.50"></text></g><g><title>core::cmp::PartialOrd::ge (30 samples, 0.03%)</title><rect x="46.9927%" y="437" width="0.0265%" height="15" fill="rgb(252,195,42)" fg:x="53184" fg:w="30"/><text x="47.2427%" y="447.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (30 samples, 0.03%)</title><rect x="46.9927%" y="421" width="0.0265%" height="15" fill="rgb(209,10,6)" fg:x="53184" fg:w="30"/><text x="47.2427%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (15 samples, 0.01%)</title><rect x="47.0060%" y="405" width="0.0133%" height="15" fill="rgb(229,3,52)" fg:x="53199" fg:w="15"/><text x="47.2560%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (15 samples, 0.01%)</title><rect x="47.0060%" y="389" width="0.0133%" height="15" fill="rgb(253,49,37)" fg:x="53199" fg:w="15"/><text x="47.2560%" y="399.50"></text></g><g><title>std::time::SystemTime::duration_since (141 samples, 0.12%)</title><rect x="46.9052%" y="501" width="0.1246%" height="15" fill="rgb(240,103,49)" fg:x="53085" fg:w="141"/><text x="47.1552%" y="511.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (70 samples, 0.06%)</title><rect x="46.9680%" y="485" width="0.0619%" height="15" fill="rgb(250,182,30)" fg:x="53156" fg:w="70"/><text x="47.2180%" y="495.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (70 samples, 0.06%)</title><rect x="46.9680%" y="469" width="0.0619%" height="15" fill="rgb(248,8,30)" fg:x="53156" fg:w="70"/><text x="47.2180%" y="479.50"></text></g><g><title>core::time::Duration::new (12 samples, 0.01%)</title><rect x="47.0192%" y="453" width="0.0106%" height="15" fill="rgb(237,120,30)" fg:x="53214" fg:w="12"/><text x="47.2692%" y="463.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager&lt;S&gt;::run::{{closure}} (6,615 samples, 5.84%)</title><rect x="41.4623%" y="645" width="5.8449%" height="15" fill="rgb(221,146,34)" fg:x="46925" fg:w="6615"/><text x="41.7123%" y="655.50">tremor_..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (6,615 samples, 5.84%)</title><rect x="41.4623%" y="629" width="5.8449%" height="15" fill="rgb(242,55,13)" fg:x="46925" fg:w="6615"/><text x="41.7123%" y="639.50">&lt;core::..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,615 samples, 5.84%)</title><rect x="41.4623%" y="613" width="5.8449%" height="15" fill="rgb(242,112,31)" fg:x="46925" fg:w="6615"/><text x="41.7123%" y="623.50">&lt;core::..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::Sink&gt;::on_event::{{closure}} (6,615 samples, 5.84%)</title><rect x="41.4623%" y="597" width="5.8449%" height="15" fill="rgb(249,192,27)" fg:x="46925" fg:w="6615"/><text x="41.7123%" y="607.50">&lt;tremor..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize (6,615 samples, 5.84%)</title><rect x="41.4623%" y="581" width="5.8449%" height="15" fill="rgb(208,204,44)" fg:x="46925" fg:w="6615"/><text x="41.7123%" y="591.50">tremor_..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize_for_stream (6,615 samples, 5.84%)</title><rect x="41.4623%" y="565" width="5.8449%" height="15" fill="rgb(208,93,54)" fg:x="46925" fg:w="6615"/><text x="41.7123%" y="575.50">tremor_..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize_for_stream_with_codec (6,615 samples, 5.84%)</title><rect x="41.4623%" y="549" width="5.8449%" height="15" fill="rgb(242,1,31)" fg:x="46925" fg:w="6615"/><text x="41.7123%" y="559.50">tremor_..</text></g><g><title>tremor_runtime::postprocessor::postprocess (591 samples, 0.52%)</title><rect x="46.7851%" y="533" width="0.5222%" height="15" fill="rgb(241,83,25)" fg:x="52949" fg:w="591"/><text x="47.0351%" y="543.50"></text></g><g><title>tremor_common::time::nanotime (506 samples, 0.45%)</title><rect x="46.8602%" y="517" width="0.4471%" height="15" fill="rgb(205,169,50)" fg:x="53034" fg:w="506"/><text x="47.1102%" y="527.50"></text></g><g><title>std::time::SystemTime::now (314 samples, 0.28%)</title><rect x="47.0298%" y="501" width="0.2774%" height="15" fill="rgb(239,186,37)" fg:x="53226" fg:w="314"/><text x="47.2798%" y="511.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (314 samples, 0.28%)</title><rect x="47.0298%" y="485" width="0.2774%" height="15" fill="rgb(205,221,10)" fg:x="53226" fg:w="314"/><text x="47.2798%" y="495.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (314 samples, 0.28%)</title><rect x="47.0298%" y="469" width="0.2774%" height="15" fill="rgb(218,196,15)" fg:x="53226" fg:w="314"/><text x="47.2798%" y="479.50"></text></g><g><title>__clock_gettime (255 samples, 0.23%)</title><rect x="47.0820%" y="453" width="0.2253%" height="15" fill="rgb(218,196,35)" fg:x="53285" fg:w="255"/><text x="47.3320%" y="463.50"></text></g><g><title>__vdso_clock_gettime (236 samples, 0.21%)</title><rect x="47.0987%" y="437" width="0.2085%" height="15" fill="rgb(233,63,24)" fg:x="53304" fg:w="236"/><text x="47.3487%" y="447.50"></text></g><g><title>[[vdso]] (217 samples, 0.19%)</title><rect x="47.1155%" y="421" width="0.1917%" height="15" fill="rgb(225,8,4)" fg:x="53323" fg:w="217"/><text x="47.3655%" y="431.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (212 samples, 0.19%)</title><rect x="47.4062%" y="533" width="0.1873%" height="15" fill="rgb(234,105,35)" fg:x="53652" fg:w="212"/><text x="47.6562%" y="543.50"></text></g><g><title>core::ptr::read (199 samples, 0.18%)</title><rect x="47.4177%" y="517" width="0.1758%" height="15" fill="rgb(236,21,32)" fg:x="53665" fg:w="199"/><text x="47.6677%" y="527.50"></text></g><g><title>[libc-2.31.so] (194 samples, 0.17%)</title><rect x="47.4221%" y="501" width="0.1714%" height="15" fill="rgb(228,109,6)" fg:x="53670" fg:w="194"/><text x="47.6721%" y="511.50"></text></g><g><title>[libc-2.31.so] (68 samples, 0.06%)</title><rect x="47.6024%" y="517" width="0.0601%" height="15" fill="rgb(229,215,31)" fg:x="53874" fg:w="68"/><text x="47.8524%" y="527.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (15 samples, 0.01%)</title><rect x="47.6907%" y="485" width="0.0133%" height="15" fill="rgb(221,52,54)" fg:x="53974" fg:w="15"/><text x="47.9407%" y="495.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (42 samples, 0.04%)</title><rect x="47.6775%" y="501" width="0.0371%" height="15" fill="rgb(252,129,43)" fg:x="53959" fg:w="42"/><text x="47.9275%" y="511.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (139 samples, 0.12%)</title><rect x="47.5935%" y="533" width="0.1228%" height="15" fill="rgb(248,183,27)" fg:x="53864" fg:w="139"/><text x="47.8435%" y="543.50"></text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (61 samples, 0.05%)</title><rect x="47.6625%" y="517" width="0.0539%" height="15" fill="rgb(250,0,22)" fg:x="53942" fg:w="61"/><text x="47.9125%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (104 samples, 0.09%)</title><rect x="47.7173%" y="405" width="0.0919%" height="15" fill="rgb(213,166,10)" fg:x="54004" fg:w="104"/><text x="47.9673%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (104 samples, 0.09%)</title><rect x="47.7173%" y="389" width="0.0919%" height="15" fill="rgb(207,163,36)" fg:x="54004" fg:w="104"/><text x="47.9673%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (104 samples, 0.09%)</title><rect x="47.7173%" y="373" width="0.0919%" height="15" fill="rgb(208,122,22)" fg:x="54004" fg:w="104"/><text x="47.9673%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (104 samples, 0.09%)</title><rect x="47.7173%" y="357" width="0.0919%" height="15" fill="rgb(207,104,49)" fg:x="54004" fg:w="104"/><text x="47.9673%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (104 samples, 0.09%)</title><rect x="47.7173%" y="341" width="0.0919%" height="15" fill="rgb(248,211,50)" fg:x="54004" fg:w="104"/><text x="47.9673%" y="351.50"></text></g><g><title>alloc::alloc::alloc (104 samples, 0.09%)</title><rect x="47.7173%" y="325" width="0.0919%" height="15" fill="rgb(217,13,45)" fg:x="54004" fg:w="104"/><text x="47.9673%" y="335.50"></text></g><g><title>__rg_alloc (104 samples, 0.09%)</title><rect x="47.7173%" y="309" width="0.0919%" height="15" fill="rgb(211,216,49)" fg:x="54004" fg:w="104"/><text x="47.9673%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (104 samples, 0.09%)</title><rect x="47.7173%" y="293" width="0.0919%" height="15" fill="rgb(221,58,53)" fg:x="54004" fg:w="104"/><text x="47.9673%" y="303.50"></text></g><g><title>sn_rust_alloc (101 samples, 0.09%)</title><rect x="47.7199%" y="277" width="0.0892%" height="15" fill="rgb(220,112,41)" fg:x="54007" fg:w="101"/><text x="47.9699%" y="287.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (14 samples, 0.01%)</title><rect x="47.7968%" y="261" width="0.0124%" height="15" fill="rgb(236,38,28)" fg:x="54094" fg:w="14"/><text x="48.0468%" y="271.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (127 samples, 0.11%)</title><rect x="47.7173%" y="533" width="0.1122%" height="15" fill="rgb(227,195,22)" fg:x="54004" fg:w="127"/><text x="47.9673%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (127 samples, 0.11%)</title><rect x="47.7173%" y="517" width="0.1122%" height="15" fill="rgb(214,55,33)" fg:x="54004" fg:w="127"/><text x="47.9673%" y="527.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (127 samples, 0.11%)</title><rect x="47.7173%" y="501" width="0.1122%" height="15" fill="rgb(248,80,13)" fg:x="54004" fg:w="127"/><text x="47.9673%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (127 samples, 0.11%)</title><rect x="47.7173%" y="485" width="0.1122%" height="15" fill="rgb(238,52,6)" fg:x="54004" fg:w="127"/><text x="47.9673%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (127 samples, 0.11%)</title><rect x="47.7173%" y="469" width="0.1122%" height="15" fill="rgb(224,198,47)" fg:x="54004" fg:w="127"/><text x="47.9673%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (127 samples, 0.11%)</title><rect x="47.7173%" y="453" width="0.1122%" height="15" fill="rgb(233,171,20)" fg:x="54004" fg:w="127"/><text x="47.9673%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (127 samples, 0.11%)</title><rect x="47.7173%" y="437" width="0.1122%" height="15" fill="rgb(241,30,25)" fg:x="54004" fg:w="127"/><text x="47.9673%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (127 samples, 0.11%)</title><rect x="47.7173%" y="421" width="0.1122%" height="15" fill="rgb(207,171,38)" fg:x="54004" fg:w="127"/><text x="47.9673%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (23 samples, 0.02%)</title><rect x="47.8091%" y="405" width="0.0203%" height="15" fill="rgb(234,70,1)" fg:x="54108" fg:w="23"/><text x="48.0591%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (23 samples, 0.02%)</title><rect x="47.8091%" y="389" width="0.0203%" height="15" fill="rgb(232,178,18)" fg:x="54108" fg:w="23"/><text x="48.0591%" y="399.50"></text></g><g><title>[libc-2.31.so] (19 samples, 0.02%)</title><rect x="47.8127%" y="373" width="0.0168%" height="15" fill="rgb(241,78,40)" fg:x="54112" fg:w="19"/><text x="48.0627%" y="383.50"></text></g><g><title>[libc-2.31.so] (330 samples, 0.29%)</title><rect x="47.8295%" y="533" width="0.2916%" height="15" fill="rgb(222,35,25)" fg:x="54131" fg:w="330"/><text x="48.0795%" y="543.50"></text></g><g><title>[libc-2.31.so] (194 samples, 0.17%)</title><rect x="48.1246%" y="517" width="0.1714%" height="15" fill="rgb(207,92,16)" fg:x="54465" fg:w="194"/><text x="48.3746%" y="527.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (471 samples, 0.42%)</title><rect x="48.3243%" y="405" width="0.4162%" height="15" fill="rgb(216,59,51)" fg:x="54691" fg:w="471"/><text x="48.5743%" y="415.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (710 samples, 0.63%)</title><rect x="48.1211%" y="533" width="0.6273%" height="15" fill="rgb(213,80,28)" fg:x="54461" fg:w="710"/><text x="48.3711%" y="543.50"></text></g><g><title>alloc::alloc::exchange_malloc (512 samples, 0.45%)</title><rect x="48.2960%" y="517" width="0.4524%" height="15" fill="rgb(220,93,7)" fg:x="54659" fg:w="512"/><text x="48.5460%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (512 samples, 0.45%)</title><rect x="48.2960%" y="501" width="0.4524%" height="15" fill="rgb(225,24,44)" fg:x="54659" fg:w="512"/><text x="48.5460%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (512 samples, 0.45%)</title><rect x="48.2960%" y="485" width="0.4524%" height="15" fill="rgb(243,74,40)" fg:x="54659" fg:w="512"/><text x="48.5460%" y="495.50"></text></g><g><title>alloc::alloc::alloc (512 samples, 0.45%)</title><rect x="48.2960%" y="469" width="0.4524%" height="15" fill="rgb(228,39,7)" fg:x="54659" fg:w="512"/><text x="48.5460%" y="479.50"></text></g><g><title>__rg_alloc (512 samples, 0.45%)</title><rect x="48.2960%" y="453" width="0.4524%" height="15" fill="rgb(227,79,8)" fg:x="54659" fg:w="512"/><text x="48.5460%" y="463.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (512 samples, 0.45%)</title><rect x="48.2960%" y="437" width="0.4524%" height="15" fill="rgb(236,58,11)" fg:x="54659" fg:w="512"/><text x="48.5460%" y="447.50"></text></g><g><title>sn_rust_alloc (512 samples, 0.45%)</title><rect x="48.2960%" y="421" width="0.4524%" height="15" fill="rgb(249,63,35)" fg:x="54659" fg:w="512"/><text x="48.5460%" y="431.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="48.7484%" y="517" width="0.0203%" height="15" fill="rgb(252,114,16)" fg:x="55171" fg:w="23"/><text x="48.9984%" y="527.50"></text></g><g><title>sn_rust_dealloc (18 samples, 0.02%)</title><rect x="48.7687%" y="517" width="0.0159%" height="15" fill="rgb(254,151,24)" fg:x="55194" fg:w="18"/><text x="49.0187%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (44 samples, 0.04%)</title><rect x="48.7484%" y="533" width="0.0389%" height="15" fill="rgb(253,54,39)" fg:x="55171" fg:w="44"/><text x="48.9984%" y="543.50"></text></g><g><title>core::str::&lt;impl str&gt;::eq_ignore_ascii_case (21 samples, 0.02%)</title><rect x="48.7970%" y="533" width="0.0186%" height="15" fill="rgb(243,25,45)" fg:x="55226" fg:w="21"/><text x="49.0470%" y="543.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case (21 samples, 0.02%)</title><rect x="48.7970%" y="517" width="0.0186%" height="15" fill="rgb(234,134,9)" fg:x="55226" fg:w="21"/><text x="49.0470%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (19 samples, 0.02%)</title><rect x="48.7988%" y="501" width="0.0168%" height="15" fill="rgb(227,166,31)" fg:x="55228" fg:w="19"/><text x="49.0488%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (19 samples, 0.02%)</title><rect x="48.7988%" y="485" width="0.0168%" height="15" fill="rgb(245,143,41)" fg:x="55228" fg:w="19"/><text x="49.0488%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::{{closure}} (13 samples, 0.01%)</title><rect x="48.8041%" y="469" width="0.0115%" height="15" fill="rgb(238,181,32)" fg:x="55234" fg:w="13"/><text x="49.0541%" y="479.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case::{{closure}} (13 samples, 0.01%)</title><rect x="48.8041%" y="453" width="0.0115%" height="15" fill="rgb(224,113,18)" fg:x="55234" fg:w="13"/><text x="49.0541%" y="463.50"></text></g><g><title>core::num::&lt;impl u8&gt;::eq_ignore_ascii_case (13 samples, 0.01%)</title><rect x="48.8041%" y="437" width="0.0115%" height="15" fill="rgb(240,229,28)" fg:x="55234" fg:w="13"/><text x="49.0541%" y="447.50"></text></g><g><title>core::num::&lt;impl u8&gt;::to_ascii_lowercase (13 samples, 0.01%)</title><rect x="48.8041%" y="421" width="0.0115%" height="15" fill="rgb(250,185,3)" fg:x="55234" fg:w="13"/><text x="49.0541%" y="431.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,737 samples, 1.53%)</title><rect x="47.3073%" y="629" width="1.5348%" height="15" fill="rgb(212,59,25)" fg:x="53540" fg:w="1737"/><text x="47.5573%" y="639.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_source_reply::{{closure}} (1,737 samples, 1.53%)</title><rect x="47.3073%" y="613" width="1.5348%" height="15" fill="rgb(221,87,20)" fg:x="53540" fg:w="1737"/><text x="47.5573%" y="623.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,737 samples, 1.53%)</title><rect x="47.3073%" y="597" width="1.5348%" height="15" fill="rgb(213,74,28)" fg:x="53540" fg:w="1737"/><text x="47.5573%" y="607.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_data::{{closure}} (1,737 samples, 1.53%)</title><rect x="47.3073%" y="581" width="1.5348%" height="15" fill="rgb(224,132,34)" fg:x="53540" fg:w="1737"/><text x="47.5573%" y="591.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,737 samples, 1.53%)</title><rect x="47.3073%" y="565" width="1.5348%" height="15" fill="rgb(222,101,24)" fg:x="53540" fg:w="1737"/><text x="47.5573%" y="575.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::route_events::{{closure}} (1,733 samples, 1.53%)</title><rect x="47.3108%" y="549" width="1.5313%" height="15" fill="rgb(254,142,4)" fg:x="53544" fg:w="1733"/><text x="47.5608%" y="559.50"></text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (22 samples, 0.02%)</title><rect x="48.8226%" y="533" width="0.0194%" height="15" fill="rgb(230,229,49)" fg:x="55255" fg:w="22"/><text x="49.0726%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (22 samples, 0.02%)</title><rect x="48.8226%" y="517" width="0.0194%" height="15" fill="rgb(238,70,47)" fg:x="55255" fg:w="22"/><text x="49.0726%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (22 samples, 0.02%)</title><rect x="48.8226%" y="501" width="0.0194%" height="15" fill="rgb(231,160,17)" fg:x="55255" fg:w="22"/><text x="49.0726%" y="511.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (63 samples, 0.06%)</title><rect x="48.9092%" y="549" width="0.0557%" height="15" fill="rgb(218,68,53)" fg:x="55353" fg:w="63"/><text x="49.1592%" y="559.50"></text></g><g><title>core::mem::replace (63 samples, 0.06%)</title><rect x="48.9092%" y="533" width="0.0557%" height="15" fill="rgb(236,111,10)" fg:x="55353" fg:w="63"/><text x="49.1592%" y="543.50"></text></g><g><title>core::ptr::read (63 samples, 0.06%)</title><rect x="48.9092%" y="517" width="0.0557%" height="15" fill="rgb(224,34,41)" fg:x="55353" fg:w="63"/><text x="49.1592%" y="527.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (98 samples, 0.09%)</title><rect x="48.8942%" y="565" width="0.0866%" height="15" fill="rgb(241,118,19)" fg:x="55336" fg:w="98"/><text x="49.1442%" y="575.50"></text></g><g><title>core::mem::drop (18 samples, 0.02%)</title><rect x="48.9649%" y="549" width="0.0159%" height="15" fill="rgb(238,129,25)" fg:x="55416" fg:w="18"/><text x="49.2149%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (18 samples, 0.02%)</title><rect x="48.9649%" y="533" width="0.0159%" height="15" fill="rgb(238,22,31)" fg:x="55416" fg:w="18"/><text x="49.2149%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (87 samples, 0.08%)</title><rect x="48.9808%" y="565" width="0.0769%" height="15" fill="rgb(222,174,48)" fg:x="55434" fg:w="87"/><text x="49.2308%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (81 samples, 0.07%)</title><rect x="48.9861%" y="549" width="0.0716%" height="15" fill="rgb(206,152,40)" fg:x="55440" fg:w="81"/><text x="49.2361%" y="559.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (81 samples, 0.07%)</title><rect x="48.9861%" y="533" width="0.0716%" height="15" fill="rgb(218,99,54)" fg:x="55440" fg:w="81"/><text x="49.2361%" y="543.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (76 samples, 0.07%)</title><rect x="48.9905%" y="517" width="0.0672%" height="15" fill="rgb(220,174,26)" fg:x="55445" fg:w="76"/><text x="49.2405%" y="527.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (76 samples, 0.07%)</title><rect x="48.9905%" y="501" width="0.0672%" height="15" fill="rgb(245,116,9)" fg:x="55445" fg:w="76"/><text x="49.2405%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (76 samples, 0.07%)</title><rect x="48.9905%" y="485" width="0.0672%" height="15" fill="rgb(209,72,35)" fg:x="55445" fg:w="76"/><text x="49.2405%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_swap (76 samples, 0.07%)</title><rect x="48.9905%" y="469" width="0.0672%" height="15" fill="rgb(226,126,21)" fg:x="55445" fg:w="76"/><text x="49.2405%" y="479.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (335 samples, 0.30%)</title><rect x="48.8597%" y="581" width="0.2960%" height="15" fill="rgb(227,192,1)" fg:x="55297" fg:w="335"/><text x="49.1097%" y="591.50"></text></g><g><title>event_listener::Inner::lock (100 samples, 0.09%)</title><rect x="49.0674%" y="565" width="0.0884%" height="15" fill="rgb(237,180,29)" fg:x="55532" fg:w="100"/><text x="49.3174%" y="575.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (95 samples, 0.08%)</title><rect x="49.0718%" y="549" width="0.0839%" height="15" fill="rgb(230,197,35)" fg:x="55537" fg:w="95"/><text x="49.3218%" y="559.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (88 samples, 0.08%)</title><rect x="49.0780%" y="533" width="0.0778%" height="15" fill="rgb(246,193,31)" fg:x="55544" fg:w="88"/><text x="49.3280%" y="543.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (88 samples, 0.08%)</title><rect x="49.0780%" y="517" width="0.0778%" height="15" fill="rgb(241,36,4)" fg:x="55544" fg:w="88"/><text x="49.3280%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (88 samples, 0.08%)</title><rect x="49.0780%" y="501" width="0.0778%" height="15" fill="rgb(241,130,17)" fg:x="55544" fg:w="88"/><text x="49.3280%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (88 samples, 0.08%)</title><rect x="49.0780%" y="485" width="0.0778%" height="15" fill="rgb(206,137,32)" fg:x="55544" fg:w="88"/><text x="49.3280%" y="495.50"></text></g><g><title>concurrent_queue::full_fence (130 samples, 0.11%)</title><rect x="49.1973%" y="533" width="0.1149%" height="15" fill="rgb(237,228,51)" fg:x="55679" fg:w="130"/><text x="49.4473%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (130 samples, 0.11%)</title><rect x="49.1973%" y="517" width="0.1149%" height="15" fill="rgb(243,6,42)" fg:x="55679" fg:w="130"/><text x="49.4473%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (130 samples, 0.11%)</title><rect x="49.1973%" y="501" width="0.1149%" height="15" fill="rgb(251,74,28)" fg:x="55679" fg:w="130"/><text x="49.4473%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (130 samples, 0.11%)</title><rect x="49.1973%" y="485" width="0.1149%" height="15" fill="rgb(218,20,49)" fg:x="55679" fg:w="130"/><text x="49.4473%" y="495.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (538 samples, 0.48%)</title><rect x="48.8421%" y="597" width="0.4754%" height="15" fill="rgb(238,28,14)" fg:x="55277" fg:w="538"/><text x="49.0921%" y="607.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (183 samples, 0.16%)</title><rect x="49.1557%" y="581" width="0.1617%" height="15" fill="rgb(229,40,46)" fg:x="55632" fg:w="183"/><text x="49.4057%" y="591.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (173 samples, 0.15%)</title><rect x="49.1646%" y="565" width="0.1529%" height="15" fill="rgb(244,195,20)" fg:x="55642" fg:w="173"/><text x="49.4146%" y="575.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (162 samples, 0.14%)</title><rect x="49.1743%" y="549" width="0.1431%" height="15" fill="rgb(253,56,35)" fg:x="55653" fg:w="162"/><text x="49.4243%" y="559.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (20 samples, 0.02%)</title><rect x="49.9792%" y="309" width="0.0177%" height="15" fill="rgb(210,149,44)" fg:x="56564" fg:w="20"/><text x="50.2292%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (232 samples, 0.20%)</title><rect x="49.7937%" y="453" width="0.2050%" height="15" fill="rgb(240,135,12)" fg:x="56354" fg:w="232"/><text x="50.0437%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (232 samples, 0.20%)</title><rect x="49.7937%" y="437" width="0.2050%" height="15" fill="rgb(251,24,50)" fg:x="56354" fg:w="232"/><text x="50.0437%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (232 samples, 0.20%)</title><rect x="49.7937%" y="421" width="0.2050%" height="15" fill="rgb(243,200,47)" fg:x="56354" fg:w="232"/><text x="50.0437%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (216 samples, 0.19%)</title><rect x="49.8078%" y="405" width="0.1909%" height="15" fill="rgb(224,166,26)" fg:x="56370" fg:w="216"/><text x="50.0578%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (216 samples, 0.19%)</title><rect x="49.8078%" y="389" width="0.1909%" height="15" fill="rgb(233,0,47)" fg:x="56370" fg:w="216"/><text x="50.0578%" y="399.50"></text></g><g><title>alloc::alloc::alloc (216 samples, 0.19%)</title><rect x="49.8078%" y="373" width="0.1909%" height="15" fill="rgb(253,80,5)" fg:x="56370" fg:w="216"/><text x="50.0578%" y="383.50"></text></g><g><title>__rg_alloc (216 samples, 0.19%)</title><rect x="49.8078%" y="357" width="0.1909%" height="15" fill="rgb(214,133,25)" fg:x="56370" fg:w="216"/><text x="50.0578%" y="367.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (216 samples, 0.19%)</title><rect x="49.8078%" y="341" width="0.1909%" height="15" fill="rgb(209,27,14)" fg:x="56370" fg:w="216"/><text x="50.0578%" y="351.50"></text></g><g><title>sn_rust_alloc (207 samples, 0.18%)</title><rect x="49.8158%" y="325" width="0.1829%" height="15" fill="rgb(219,102,51)" fg:x="56379" fg:w="207"/><text x="50.0658%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (279 samples, 0.25%)</title><rect x="49.7787%" y="533" width="0.2465%" height="15" fill="rgb(237,18,16)" fg:x="56337" fg:w="279"/><text x="50.0287%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (265 samples, 0.23%)</title><rect x="49.7910%" y="517" width="0.2342%" height="15" fill="rgb(241,85,17)" fg:x="56351" fg:w="265"/><text x="50.0410%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (265 samples, 0.23%)</title><rect x="49.7910%" y="501" width="0.2342%" height="15" fill="rgb(236,90,42)" fg:x="56351" fg:w="265"/><text x="50.0410%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (265 samples, 0.23%)</title><rect x="49.7910%" y="485" width="0.2342%" height="15" fill="rgb(249,57,21)" fg:x="56351" fg:w="265"/><text x="50.0410%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (265 samples, 0.23%)</title><rect x="49.7910%" y="469" width="0.2342%" height="15" fill="rgb(243,12,36)" fg:x="56351" fg:w="265"/><text x="50.0410%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (30 samples, 0.03%)</title><rect x="49.9987%" y="453" width="0.0265%" height="15" fill="rgb(253,128,47)" fg:x="56586" fg:w="30"/><text x="50.2487%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (30 samples, 0.03%)</title><rect x="49.9987%" y="437" width="0.0265%" height="15" fill="rgb(207,33,20)" fg:x="56586" fg:w="30"/><text x="50.2487%" y="447.50"></text></g><g><title>[libc-2.31.so] (24 samples, 0.02%)</title><rect x="50.0040%" y="421" width="0.0212%" height="15" fill="rgb(233,215,35)" fg:x="56592" fg:w="24"/><text x="50.2540%" y="431.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (62 samples, 0.05%)</title><rect x="50.0897%" y="245" width="0.0548%" height="15" fill="rgb(249,188,52)" fg:x="56689" fg:w="62"/><text x="50.3397%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (122 samples, 0.11%)</title><rect x="50.0384%" y="389" width="0.1078%" height="15" fill="rgb(225,12,32)" fg:x="56631" fg:w="122"/><text x="50.2884%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (122 samples, 0.11%)</title><rect x="50.0384%" y="373" width="0.1078%" height="15" fill="rgb(247,98,14)" fg:x="56631" fg:w="122"/><text x="50.2884%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (122 samples, 0.11%)</title><rect x="50.0384%" y="357" width="0.1078%" height="15" fill="rgb(247,219,48)" fg:x="56631" fg:w="122"/><text x="50.2884%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (119 samples, 0.11%)</title><rect x="50.0411%" y="341" width="0.1051%" height="15" fill="rgb(253,60,48)" fg:x="56634" fg:w="119"/><text x="50.2911%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (119 samples, 0.11%)</title><rect x="50.0411%" y="325" width="0.1051%" height="15" fill="rgb(245,15,52)" fg:x="56634" fg:w="119"/><text x="50.2911%" y="335.50"></text></g><g><title>alloc::alloc::alloc (119 samples, 0.11%)</title><rect x="50.0411%" y="309" width="0.1051%" height="15" fill="rgb(220,133,28)" fg:x="56634" fg:w="119"/><text x="50.2911%" y="319.50"></text></g><g><title>__rg_alloc (119 samples, 0.11%)</title><rect x="50.0411%" y="293" width="0.1051%" height="15" fill="rgb(217,180,4)" fg:x="56634" fg:w="119"/><text x="50.2911%" y="303.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (119 samples, 0.11%)</title><rect x="50.0411%" y="277" width="0.1051%" height="15" fill="rgb(251,24,1)" fg:x="56634" fg:w="119"/><text x="50.2911%" y="287.50"></text></g><g><title>sn_rust_alloc (115 samples, 0.10%)</title><rect x="50.0446%" y="261" width="0.1016%" height="15" fill="rgb(212,185,49)" fg:x="56638" fg:w="115"/><text x="50.2946%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (206 samples, 0.18%)</title><rect x="50.0305%" y="469" width="0.1820%" height="15" fill="rgb(215,175,22)" fg:x="56622" fg:w="206"/><text x="50.2805%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (197 samples, 0.17%)</title><rect x="50.0384%" y="453" width="0.1741%" height="15" fill="rgb(250,205,14)" fg:x="56631" fg:w="197"/><text x="50.2884%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (197 samples, 0.17%)</title><rect x="50.0384%" y="437" width="0.1741%" height="15" fill="rgb(225,211,22)" fg:x="56631" fg:w="197"/><text x="50.2884%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (197 samples, 0.17%)</title><rect x="50.0384%" y="421" width="0.1741%" height="15" fill="rgb(251,179,42)" fg:x="56631" fg:w="197"/><text x="50.2884%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (197 samples, 0.17%)</title><rect x="50.0384%" y="405" width="0.1741%" height="15" fill="rgb(208,216,51)" fg:x="56631" fg:w="197"/><text x="50.2884%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (75 samples, 0.07%)</title><rect x="50.1462%" y="389" width="0.0663%" height="15" fill="rgb(235,36,11)" fg:x="56753" fg:w="75"/><text x="50.3962%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (75 samples, 0.07%)</title><rect x="50.1462%" y="373" width="0.0663%" height="15" fill="rgb(213,189,28)" fg:x="56753" fg:w="75"/><text x="50.3962%" y="383.50"></text></g><g><title>[libc-2.31.so] (70 samples, 0.06%)</title><rect x="50.1507%" y="357" width="0.0619%" height="15" fill="rgb(227,203,42)" fg:x="56758" fg:w="70"/><text x="50.4007%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.01%)</title><rect x="50.2125%" y="469" width="0.0124%" height="15" fill="rgb(244,72,36)" fg:x="56828" fg:w="14"/><text x="50.4625%" y="479.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (20 samples, 0.02%)</title><rect x="50.2646%" y="325" width="0.0177%" height="15" fill="rgb(213,53,17)" fg:x="56887" fg:w="20"/><text x="50.5146%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (63 samples, 0.06%)</title><rect x="50.2275%" y="421" width="0.0557%" height="15" fill="rgb(207,167,3)" fg:x="56845" fg:w="63"/><text x="50.4775%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (63 samples, 0.06%)</title><rect x="50.2275%" y="405" width="0.0557%" height="15" fill="rgb(216,98,30)" fg:x="56845" fg:w="63"/><text x="50.4775%" y="415.50"></text></g><g><title>alloc::alloc::alloc (62 samples, 0.05%)</title><rect x="50.2284%" y="389" width="0.0548%" height="15" fill="rgb(236,123,15)" fg:x="56846" fg:w="62"/><text x="50.4784%" y="399.50"></text></g><g><title>__rg_alloc (62 samples, 0.05%)</title><rect x="50.2284%" y="373" width="0.0548%" height="15" fill="rgb(248,81,50)" fg:x="56846" fg:w="62"/><text x="50.4784%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (62 samples, 0.05%)</title><rect x="50.2284%" y="357" width="0.0548%" height="15" fill="rgb(214,120,4)" fg:x="56846" fg:w="62"/><text x="50.4784%" y="367.50"></text></g><g><title>sn_rust_alloc (62 samples, 0.05%)</title><rect x="50.2284%" y="341" width="0.0548%" height="15" fill="rgb(208,179,34)" fg:x="56846" fg:w="62"/><text x="50.4784%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (67 samples, 0.06%)</title><rect x="50.2258%" y="469" width="0.0592%" height="15" fill="rgb(227,140,7)" fg:x="56843" fg:w="67"/><text x="50.4758%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (65 samples, 0.06%)</title><rect x="50.2275%" y="453" width="0.0574%" height="15" fill="rgb(214,22,6)" fg:x="56845" fg:w="65"/><text x="50.4775%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (65 samples, 0.06%)</title><rect x="50.2275%" y="437" width="0.0574%" height="15" fill="rgb(207,137,27)" fg:x="56845" fg:w="65"/><text x="50.4775%" y="447.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (846 samples, 0.75%)</title><rect x="49.5427%" y="549" width="0.7475%" height="15" fill="rgb(210,8,46)" fg:x="56070" fg:w="846"/><text x="49.7927%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (300 samples, 0.27%)</title><rect x="50.0252%" y="533" width="0.2651%" height="15" fill="rgb(240,16,54)" fg:x="56616" fg:w="300"/><text x="50.2752%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (298 samples, 0.26%)</title><rect x="50.0269%" y="517" width="0.2633%" height="15" fill="rgb(211,209,29)" fg:x="56618" fg:w="298"/><text x="50.2769%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (298 samples, 0.26%)</title><rect x="50.0269%" y="501" width="0.2633%" height="15" fill="rgb(226,228,24)" fg:x="56618" fg:w="298"/><text x="50.2769%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (298 samples, 0.26%)</title><rect x="50.0269%" y="485" width="0.2633%" height="15" fill="rgb(222,84,9)" fg:x="56618" fg:w="298"/><text x="50.2769%" y="495.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (15 samples, 0.01%)</title><rect x="50.3123%" y="469" width="0.0133%" height="15" fill="rgb(234,203,30)" fg:x="56941" fg:w="15"/><text x="50.5623%" y="479.50"></text></g><g><title>core::time::Duration::as_nanos (14 samples, 0.01%)</title><rect x="50.3256%" y="469" width="0.0124%" height="15" fill="rgb(238,109,14)" fg:x="56956" fg:w="14"/><text x="50.5756%" y="479.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (45 samples, 0.04%)</title><rect x="50.3380%" y="453" width="0.0398%" height="15" fill="rgb(233,206,34)" fg:x="56970" fg:w="45"/><text x="50.5880%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (24 samples, 0.02%)</title><rect x="50.3972%" y="421" width="0.0212%" height="15" fill="rgb(220,167,47)" fg:x="57037" fg:w="24"/><text x="50.6472%" y="431.50"></text></g><g><title>core::cmp::PartialOrd::ge (24 samples, 0.02%)</title><rect x="50.3972%" y="405" width="0.0212%" height="15" fill="rgb(238,105,10)" fg:x="57037" fg:w="24"/><text x="50.6472%" y="415.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (24 samples, 0.02%)</title><rect x="50.3972%" y="389" width="0.0212%" height="15" fill="rgb(213,227,17)" fg:x="57037" fg:w="24"/><text x="50.6472%" y="399.50"></text></g><g><title>std::time::SystemTime::duration_since (102 samples, 0.09%)</title><rect x="50.3380%" y="469" width="0.0901%" height="15" fill="rgb(217,132,38)" fg:x="56970" fg:w="102"/><text x="50.5880%" y="479.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (57 samples, 0.05%)</title><rect x="50.3777%" y="453" width="0.0504%" height="15" fill="rgb(242,146,4)" fg:x="57015" fg:w="57"/><text x="50.6277%" y="463.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (57 samples, 0.05%)</title><rect x="50.3777%" y="437" width="0.0504%" height="15" fill="rgb(212,61,9)" fg:x="57015" fg:w="57"/><text x="50.6277%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (439 samples, 0.39%)</title><rect x="50.2903%" y="549" width="0.3879%" height="15" fill="rgb(247,126,22)" fg:x="56916" fg:w="439"/><text x="50.5403%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (439 samples, 0.39%)</title><rect x="50.2903%" y="533" width="0.3879%" height="15" fill="rgb(220,196,2)" fg:x="56916" fg:w="439"/><text x="50.5403%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any::check::{{closure}} (426 samples, 0.38%)</title><rect x="50.3017%" y="517" width="0.3764%" height="15" fill="rgb(208,46,4)" fg:x="56929" fg:w="426"/><text x="50.5517%" y="527.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::Source&gt;::pull_data::{{closure}}::{{closure}} (426 samples, 0.38%)</title><rect x="50.3017%" y="501" width="0.3764%" height="15" fill="rgb(252,104,46)" fg:x="56929" fg:w="426"/><text x="50.5517%" y="511.50"></text></g><g><title>tremor_common::time::nanotime (425 samples, 0.38%)</title><rect x="50.3026%" y="485" width="0.3755%" height="15" fill="rgb(237,152,48)" fg:x="56930" fg:w="425"/><text x="50.5526%" y="495.50"></text></g><g><title>std::time::SystemTime::now (283 samples, 0.25%)</title><rect x="50.4281%" y="469" width="0.2501%" height="15" fill="rgb(221,59,37)" fg:x="57072" fg:w="283"/><text x="50.6781%" y="479.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (283 samples, 0.25%)</title><rect x="50.4281%" y="453" width="0.2501%" height="15" fill="rgb(209,202,51)" fg:x="57072" fg:w="283"/><text x="50.6781%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (283 samples, 0.25%)</title><rect x="50.4281%" y="437" width="0.2501%" height="15" fill="rgb(228,81,30)" fg:x="57072" fg:w="283"/><text x="50.6781%" y="447.50"></text></g><g><title>__clock_gettime (224 samples, 0.20%)</title><rect x="50.4802%" y="421" width="0.1979%" height="15" fill="rgb(227,42,39)" fg:x="57131" fg:w="224"/><text x="50.7302%" y="431.50"></text></g><g><title>__vdso_clock_gettime (213 samples, 0.19%)</title><rect x="50.4899%" y="405" width="0.1882%" height="15" fill="rgb(221,26,2)" fg:x="57142" fg:w="213"/><text x="50.7399%" y="415.50"></text></g><g><title>[[vdso]] (193 samples, 0.17%)</title><rect x="50.5076%" y="389" width="0.1705%" height="15" fill="rgb(254,61,31)" fg:x="57162" fg:w="193"/><text x="50.7576%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (24 samples, 0.02%)</title><rect x="50.7073%" y="517" width="0.0212%" height="15" fill="rgb(222,173,38)" fg:x="57388" fg:w="24"/><text x="50.9573%" y="527.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (641 samples, 0.57%)</title><rect x="50.8920%" y="325" width="0.5664%" height="15" fill="rgb(218,50,12)" fg:x="57597" fg:w="641"/><text x="51.1420%" y="335.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (12 samples, 0.01%)</title><rect x="51.4584%" y="325" width="0.0106%" height="15" fill="rgb(223,88,40)" fg:x="58238" fg:w="12"/><text x="51.7084%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (837 samples, 0.74%)</title><rect x="50.7303%" y="469" width="0.7396%" height="15" fill="rgb(237,54,19)" fg:x="57414" fg:w="837"/><text x="50.9803%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (836 samples, 0.74%)</title><rect x="50.7312%" y="453" width="0.7387%" height="15" fill="rgb(251,129,25)" fg:x="57415" fg:w="836"/><text x="50.9812%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (836 samples, 0.74%)</title><rect x="50.7312%" y="437" width="0.7387%" height="15" fill="rgb(238,97,19)" fg:x="57415" fg:w="836"/><text x="50.9812%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (831 samples, 0.73%)</title><rect x="50.7356%" y="421" width="0.7343%" height="15" fill="rgb(240,169,18)" fg:x="57420" fg:w="831"/><text x="50.9856%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (831 samples, 0.73%)</title><rect x="50.7356%" y="405" width="0.7343%" height="15" fill="rgb(230,187,49)" fg:x="57420" fg:w="831"/><text x="50.9856%" y="415.50"></text></g><g><title>alloc::alloc::alloc (831 samples, 0.73%)</title><rect x="50.7356%" y="389" width="0.7343%" height="15" fill="rgb(209,44,26)" fg:x="57420" fg:w="831"/><text x="50.9856%" y="399.50"></text></g><g><title>__rg_alloc (831 samples, 0.73%)</title><rect x="50.7356%" y="373" width="0.7343%" height="15" fill="rgb(244,0,6)" fg:x="57420" fg:w="831"/><text x="50.9856%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (831 samples, 0.73%)</title><rect x="50.7356%" y="357" width="0.7343%" height="15" fill="rgb(248,18,21)" fg:x="57420" fg:w="831"/><text x="50.9856%" y="367.50"></text></g><g><title>sn_rust_alloc (829 samples, 0.73%)</title><rect x="50.7374%" y="341" width="0.7325%" height="15" fill="rgb(245,180,19)" fg:x="57422" fg:w="829"/><text x="50.9874%" y="351.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,631 samples, 2.32%)</title><rect x="49.3174%" y="581" width="2.3247%" height="15" fill="rgb(252,118,36)" fg:x="55815" fg:w="2631"/><text x="49.5674%" y="591.50">&lt;..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::Source&gt;::pull_data::{{closure}} (2,616 samples, 2.31%)</title><rect x="49.3307%" y="565" width="2.3115%" height="15" fill="rgb(210,224,19)" fg:x="55830" fg:w="2616"/><text x="49.5807%" y="575.50">&lt;..</text></g><g><title>tremor_runtime::connectors::impls::bench::Acc::next (1,082 samples, 0.96%)</title><rect x="50.6861%" y="549" width="0.9560%" height="15" fill="rgb(218,30,24)" fg:x="57364" fg:w="1082"/><text x="50.9361%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,058 samples, 0.93%)</title><rect x="50.7073%" y="533" width="0.9348%" height="15" fill="rgb(219,75,50)" fg:x="57388" fg:w="1058"/><text x="50.9573%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,034 samples, 0.91%)</title><rect x="50.7285%" y="517" width="0.9136%" height="15" fill="rgb(234,72,50)" fg:x="57412" fg:w="1034"/><text x="50.9785%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1,034 samples, 0.91%)</title><rect x="50.7285%" y="501" width="0.9136%" height="15" fill="rgb(219,100,48)" fg:x="57412" fg:w="1034"/><text x="50.9785%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,034 samples, 0.91%)</title><rect x="50.7285%" y="485" width="0.9136%" height="15" fill="rgb(253,5,41)" fg:x="57412" fg:w="1034"/><text x="50.9785%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (195 samples, 0.17%)</title><rect x="51.4698%" y="469" width="0.1723%" height="15" fill="rgb(247,181,11)" fg:x="58251" fg:w="195"/><text x="51.7198%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (195 samples, 0.17%)</title><rect x="51.4698%" y="453" width="0.1723%" height="15" fill="rgb(222,223,25)" fg:x="58251" fg:w="195"/><text x="51.7198%" y="463.50"></text></g><g><title>[libc-2.31.so] (195 samples, 0.17%)</title><rect x="51.4698%" y="437" width="0.1723%" height="15" fill="rgb(214,198,28)" fg:x="58251" fg:w="195"/><text x="51.7198%" y="447.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (2,632 samples, 2.33%)</title><rect x="49.3174%" y="597" width="2.3256%" height="15" fill="rgb(230,46,43)" fg:x="55815" fg:w="2632"/><text x="49.5674%" y="607.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::run::{{closure}} (4,908 samples, 4.34%)</title><rect x="47.3073%" y="645" width="4.3366%" height="15" fill="rgb(233,65,53)" fg:x="53540" fg:w="4908"/><text x="47.5573%" y="655.50">tremo..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (3,171 samples, 2.80%)</title><rect x="48.8421%" y="629" width="2.8019%" height="15" fill="rgb(221,121,27)" fg:x="55277" fg:w="3171"/><text x="49.0921%" y="639.50">&lt;f..</text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (3,171 samples, 2.80%)</title><rect x="48.8421%" y="613" width="2.8019%" height="15" fill="rgb(247,70,47)" fg:x="55277" fg:w="3171"/><text x="49.0921%" y="623.50">fu..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (13 samples, 0.01%)</title><rect x="51.6907%" y="581" width="0.0115%" height="15" fill="rgb(228,85,35)" fg:x="58501" fg:w="13"/><text x="51.9407%" y="591.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (363 samples, 0.32%)</title><rect x="51.6598%" y="597" width="0.3207%" height="15" fill="rgb(209,50,18)" fg:x="58466" fg:w="363"/><text x="51.9098%" y="607.50"></text></g><g><title>[libc-2.31.so] (315 samples, 0.28%)</title><rect x="51.7022%" y="581" width="0.2783%" height="15" fill="rgb(250,19,35)" fg:x="58514" fg:w="315"/><text x="51.9522%" y="591.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (558 samples, 0.49%)</title><rect x="51.6439%" y="629" width="0.4930%" height="15" fill="rgb(253,107,29)" fg:x="58448" fg:w="558"/><text x="51.8939%" y="639.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (558 samples, 0.49%)</title><rect x="51.6439%" y="613" width="0.4930%" height="15" fill="rgb(252,179,29)" fg:x="58448" fg:w="558"/><text x="51.8939%" y="623.50"></text></g><g><title>[libc-2.31.so] (177 samples, 0.16%)</title><rect x="51.9806%" y="597" width="0.1564%" height="15" fill="rgb(238,194,6)" fg:x="58829" fg:w="177"/><text x="52.2306%" y="607.50"></text></g><g><title>[libc-2.31.so] (81 samples, 0.07%)</title><rect x="52.1484%" y="613" width="0.0716%" height="15" fill="rgb(238,164,29)" fg:x="59019" fg:w="81"/><text x="52.3984%" y="623.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (159 samples, 0.14%)</title><rect x="52.2200%" y="549" width="0.1405%" height="15" fill="rgb(224,25,9)" fg:x="59100" fg:w="159"/><text x="52.4700%" y="559.50"></text></g><g><title>[libc-2.31.so] (118 samples, 0.10%)</title><rect x="52.2562%" y="533" width="0.1043%" height="15" fill="rgb(244,153,23)" fg:x="59141" fg:w="118"/><text x="52.5062%" y="543.50"></text></g><g><title>[libc-2.31.so] (72 samples, 0.06%)</title><rect x="52.4665%" y="533" width="0.0636%" height="15" fill="rgb(212,203,14)" fg:x="59379" fg:w="72"/><text x="52.7165%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.02%)</title><rect x="52.9525%" y="453" width="0.0150%" height="15" fill="rgb(220,164,20)" fg:x="59929" fg:w="17"/><text x="53.2025%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)]&gt; (17 samples, 0.02%)</title><rect x="52.9525%" y="437" width="0.0150%" height="15" fill="rgb(222,203,48)" fg:x="59929" fg:w="17"/><text x="53.2025%" y="447.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (478 samples, 0.42%)</title><rect x="52.5487%" y="501" width="0.4224%" height="15" fill="rgb(215,159,22)" fg:x="59472" fg:w="478"/><text x="52.7987%" y="511.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (462 samples, 0.41%)</title><rect x="52.5628%" y="485" width="0.4082%" height="15" fill="rgb(216,183,47)" fg:x="59488" fg:w="462"/><text x="52.8128%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (21 samples, 0.02%)</title><rect x="52.9525%" y="469" width="0.0186%" height="15" fill="rgb(229,195,25)" fg:x="59929" fg:w="21"/><text x="53.2025%" y="479.50"></text></g><g><title>[libc-2.31.so] (96 samples, 0.08%)</title><rect x="52.9711%" y="501" width="0.0848%" height="15" fill="rgb(224,132,51)" fg:x="59950" fg:w="96"/><text x="53.2211%" y="511.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (50 samples, 0.04%)</title><rect x="53.1566%" y="389" width="0.0442%" height="15" fill="rgb(240,63,7)" fg:x="60160" fg:w="50"/><text x="53.4066%" y="399.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (760 samples, 0.67%)</title><rect x="52.5390%" y="517" width="0.6715%" height="15" fill="rgb(249,182,41)" fg:x="59461" fg:w="760"/><text x="52.7890%" y="527.50"></text></g><g><title>alloc::alloc::exchange_malloc (175 samples, 0.15%)</title><rect x="53.0559%" y="501" width="0.1546%" height="15" fill="rgb(243,47,26)" fg:x="60046" fg:w="175"/><text x="53.3059%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (169 samples, 0.15%)</title><rect x="53.0612%" y="485" width="0.1493%" height="15" fill="rgb(233,48,2)" fg:x="60052" fg:w="169"/><text x="53.3112%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (169 samples, 0.15%)</title><rect x="53.0612%" y="469" width="0.1493%" height="15" fill="rgb(244,165,34)" fg:x="60052" fg:w="169"/><text x="53.3112%" y="479.50"></text></g><g><title>alloc::alloc::alloc (169 samples, 0.15%)</title><rect x="53.0612%" y="453" width="0.1493%" height="15" fill="rgb(207,89,7)" fg:x="60052" fg:w="169"/><text x="53.3112%" y="463.50"></text></g><g><title>__rg_alloc (169 samples, 0.15%)</title><rect x="53.0612%" y="437" width="0.1493%" height="15" fill="rgb(244,117,36)" fg:x="60052" fg:w="169"/><text x="53.3112%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (169 samples, 0.15%)</title><rect x="53.0612%" y="421" width="0.1493%" height="15" fill="rgb(226,144,34)" fg:x="60052" fg:w="169"/><text x="53.3112%" y="431.50"></text></g><g><title>sn_rust_alloc (160 samples, 0.14%)</title><rect x="53.0691%" y="405" width="0.1414%" height="15" fill="rgb(213,23,19)" fg:x="60061" fg:w="160"/><text x="53.3191%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (834 samples, 0.74%)</title><rect x="52.5355%" y="533" width="0.7369%" height="15" fill="rgb(217,75,12)" fg:x="59457" fg:w="834"/><text x="52.7855%" y="543.50"></text></g><g><title>[libc-2.31.so] (70 samples, 0.06%)</title><rect x="53.2105%" y="517" width="0.0619%" height="15" fill="rgb(224,159,17)" fg:x="60221" fg:w="70"/><text x="53.4605%" y="527.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (1,198 samples, 1.06%)</title><rect x="52.2200%" y="613" width="1.0585%" height="15" fill="rgb(217,118,1)" fg:x="59100" fg:w="1198"/><text x="52.4700%" y="623.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (1,198 samples, 1.06%)</title><rect x="52.2200%" y="597" width="1.0585%" height="15" fill="rgb(232,180,48)" fg:x="59100" fg:w="1198"/><text x="52.4700%" y="607.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (1,198 samples, 1.06%)</title><rect x="52.2200%" y="581" width="1.0585%" height="15" fill="rgb(230,27,33)" fg:x="59100" fg:w="1198"/><text x="52.4700%" y="591.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (1,198 samples, 1.06%)</title><rect x="52.2200%" y="565" width="1.0585%" height="15" fill="rgb(205,31,21)" fg:x="59100" fg:w="1198"/><text x="52.4700%" y="575.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (1,039 samples, 0.92%)</title><rect x="52.3605%" y="549" width="0.9180%" height="15" fill="rgb(253,59,4)" fg:x="59259" fg:w="1039"/><text x="52.6105%" y="559.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (15 samples, 0.01%)</title><rect x="53.4349%" y="597" width="0.0133%" height="15" fill="rgb(224,201,9)" fg:x="60475" fg:w="15"/><text x="53.6849%" y="607.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (12 samples, 0.01%)</title><rect x="53.4482%" y="597" width="0.0106%" height="15" fill="rgb(229,206,30)" fg:x="60490" fg:w="12"/><text x="53.6982%" y="607.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.02%)</title><rect x="53.4623%" y="581" width="0.0159%" height="15" fill="rgb(212,67,47)" fg:x="60506" fg:w="18"/><text x="53.7123%" y="591.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (420 samples, 0.37%)</title><rect x="53.4623%" y="597" width="0.3711%" height="15" fill="rgb(211,96,50)" fg:x="60506" fg:w="420"/><text x="53.7123%" y="607.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (402 samples, 0.36%)</title><rect x="53.4782%" y="581" width="0.3552%" height="15" fill="rgb(252,114,18)" fg:x="60524" fg:w="402"/><text x="53.7282%" y="591.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (401 samples, 0.35%)</title><rect x="53.4791%" y="565" width="0.3543%" height="15" fill="rgb(223,58,37)" fg:x="60525" fg:w="401"/><text x="53.7291%" y="575.50"></text></g><g><title>core::ptr::read (401 samples, 0.35%)</title><rect x="53.4791%" y="549" width="0.3543%" height="15" fill="rgb(237,70,4)" fg:x="60525" fg:w="401"/><text x="53.7291%" y="559.50"></text></g><g><title>[libc-2.31.so] (399 samples, 0.35%)</title><rect x="53.4809%" y="533" width="0.3526%" height="15" fill="rgb(244,85,46)" fg:x="60527" fg:w="399"/><text x="53.7309%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (120 samples, 0.11%)</title><rect x="53.8405%" y="469" width="0.1060%" height="15" fill="rgb(223,39,52)" fg:x="60934" fg:w="120"/><text x="54.0905%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (120 samples, 0.11%)</title><rect x="53.8405%" y="453" width="0.1060%" height="15" fill="rgb(218,200,14)" fg:x="60934" fg:w="120"/><text x="54.0905%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (120 samples, 0.11%)</title><rect x="53.8405%" y="437" width="0.1060%" height="15" fill="rgb(208,171,16)" fg:x="60934" fg:w="120"/><text x="54.0905%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (117 samples, 0.10%)</title><rect x="53.8432%" y="421" width="0.1034%" height="15" fill="rgb(234,200,18)" fg:x="60937" fg:w="117"/><text x="54.0932%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (117 samples, 0.10%)</title><rect x="53.8432%" y="405" width="0.1034%" height="15" fill="rgb(228,45,11)" fg:x="60937" fg:w="117"/><text x="54.0932%" y="415.50"></text></g><g><title>alloc::alloc::alloc (117 samples, 0.10%)</title><rect x="53.8432%" y="389" width="0.1034%" height="15" fill="rgb(237,182,11)" fg:x="60937" fg:w="117"/><text x="54.0932%" y="399.50"></text></g><g><title>__rg_alloc (117 samples, 0.10%)</title><rect x="53.8432%" y="373" width="0.1034%" height="15" fill="rgb(241,175,49)" fg:x="60937" fg:w="117"/><text x="54.0932%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (117 samples, 0.10%)</title><rect x="53.8432%" y="357" width="0.1034%" height="15" fill="rgb(247,38,35)" fg:x="60937" fg:w="117"/><text x="54.0932%" y="367.50"></text></g><g><title>sn_rust_alloc (110 samples, 0.10%)</title><rect x="53.8493%" y="341" width="0.0972%" height="15" fill="rgb(228,39,49)" fg:x="60944" fg:w="110"/><text x="54.0993%" y="351.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (149 samples, 0.13%)</title><rect x="53.8405%" y="597" width="0.1317%" height="15" fill="rgb(226,101,26)" fg:x="60934" fg:w="149"/><text x="54.0905%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (149 samples, 0.13%)</title><rect x="53.8405%" y="581" width="0.1317%" height="15" fill="rgb(206,141,19)" fg:x="60934" fg:w="149"/><text x="54.0905%" y="591.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (149 samples, 0.13%)</title><rect x="53.8405%" y="565" width="0.1317%" height="15" fill="rgb(211,200,13)" fg:x="60934" fg:w="149"/><text x="54.0905%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (149 samples, 0.13%)</title><rect x="53.8405%" y="549" width="0.1317%" height="15" fill="rgb(241,121,6)" fg:x="60934" fg:w="149"/><text x="54.0905%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (149 samples, 0.13%)</title><rect x="53.8405%" y="533" width="0.1317%" height="15" fill="rgb(234,221,29)" fg:x="60934" fg:w="149"/><text x="54.0905%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (149 samples, 0.13%)</title><rect x="53.8405%" y="517" width="0.1317%" height="15" fill="rgb(229,136,5)" fg:x="60934" fg:w="149"/><text x="54.0905%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (149 samples, 0.13%)</title><rect x="53.8405%" y="501" width="0.1317%" height="15" fill="rgb(238,36,11)" fg:x="60934" fg:w="149"/><text x="54.0905%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (149 samples, 0.13%)</title><rect x="53.8405%" y="485" width="0.1317%" height="15" fill="rgb(251,55,41)" fg:x="60934" fg:w="149"/><text x="54.0905%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (29 samples, 0.03%)</title><rect x="53.9465%" y="469" width="0.0256%" height="15" fill="rgb(242,34,40)" fg:x="61054" fg:w="29"/><text x="54.1965%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (29 samples, 0.03%)</title><rect x="53.9465%" y="453" width="0.0256%" height="15" fill="rgb(215,42,17)" fg:x="61054" fg:w="29"/><text x="54.1965%" y="463.50"></text></g><g><title>[libc-2.31.so] (23 samples, 0.02%)</title><rect x="53.9518%" y="437" width="0.0203%" height="15" fill="rgb(207,44,46)" fg:x="61060" fg:w="23"/><text x="54.2018%" y="447.50"></text></g><g><title>[libc-2.31.so] (309 samples, 0.27%)</title><rect x="53.9722%" y="597" width="0.2730%" height="15" fill="rgb(211,206,28)" fg:x="61083" fg:w="309"/><text x="54.2222%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::drain (12 samples, 0.01%)</title><rect x="54.2452%" y="597" width="0.0106%" height="15" fill="rgb(237,167,16)" fg:x="61392" fg:w="12"/><text x="54.4952%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (19 samples, 0.02%)</title><rect x="54.2558%" y="597" width="0.0168%" height="15" fill="rgb(233,66,6)" fg:x="61404" fg:w="19"/><text x="54.5058%" y="607.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.02%)</title><rect x="54.2558%" y="581" width="0.0168%" height="15" fill="rgb(246,123,29)" fg:x="61404" fg:w="19"/><text x="54.5058%" y="591.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (46 samples, 0.04%)</title><rect x="54.2920%" y="565" width="0.0406%" height="15" fill="rgb(209,62,40)" fg:x="61445" fg:w="46"/><text x="54.5420%" y="575.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (42 samples, 0.04%)</title><rect x="54.2956%" y="549" width="0.0371%" height="15" fill="rgb(218,4,25)" fg:x="61449" fg:w="42"/><text x="54.5456%" y="559.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (42 samples, 0.04%)</title><rect x="54.2956%" y="533" width="0.0371%" height="15" fill="rgb(253,91,49)" fg:x="61449" fg:w="42"/><text x="54.5456%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (42 samples, 0.04%)</title><rect x="54.2956%" y="517" width="0.0371%" height="15" fill="rgb(228,155,29)" fg:x="61449" fg:w="42"/><text x="54.5456%" y="527.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (42 samples, 0.04%)</title><rect x="54.2956%" y="501" width="0.0371%" height="15" fill="rgb(243,57,37)" fg:x="61449" fg:w="42"/><text x="54.5456%" y="511.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (42 samples, 0.04%)</title><rect x="54.2956%" y="485" width="0.0371%" height="15" fill="rgb(244,167,17)" fg:x="61449" fg:w="42"/><text x="54.5456%" y="495.50"></text></g><g><title>[libc-2.31.so] (35 samples, 0.03%)</title><rect x="54.3017%" y="469" width="0.0309%" height="15" fill="rgb(207,181,38)" fg:x="61456" fg:w="35"/><text x="54.5517%" y="479.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (66 samples, 0.06%)</title><rect x="54.2858%" y="597" width="0.0583%" height="15" fill="rgb(211,8,23)" fg:x="61438" fg:w="66"/><text x="54.5358%" y="607.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get_mut (61 samples, 0.05%)</title><rect x="54.2903%" y="581" width="0.0539%" height="15" fill="rgb(235,11,44)" fg:x="61443" fg:w="61"/><text x="54.5403%" y="591.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="54.3327%" y="565" width="0.0115%" height="15" fill="rgb(248,18,52)" fg:x="61491" fg:w="13"/><text x="54.5827%" y="575.50"></text></g><g><title>async_io::driver::block_on (14,591 samples, 12.89%)</title><rect x="41.4623%" y="949" width="12.8924%" height="15" fill="rgb(208,4,7)" fg:x="46925" fg:w="14591"/><text x="41.7123%" y="959.50">async_io::driver::b..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (14,591 samples, 12.89%)</title><rect x="41.4623%" y="933" width="12.8924%" height="15" fill="rgb(240,17,39)" fg:x="46925" fg:w="14591"/><text x="41.7123%" y="943.50">&lt;futures_lite::futu..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14,591 samples, 12.89%)</title><rect x="41.4623%" y="917" width="12.8924%" height="15" fill="rgb(207,170,3)" fg:x="46925" fg:w="14591"/><text x="41.7123%" y="927.50">&lt;core::future::from..</text></g><g><title>async_executor::Executor::run::{{closure}} (14,591 samples, 12.89%)</title><rect x="41.4623%" y="901" width="12.8924%" height="15" fill="rgb(236,100,52)" fg:x="46925" fg:w="14591"/><text x="41.7123%" y="911.50">async_executor::Exe..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (14,591 samples, 12.89%)</title><rect x="41.4623%" y="885" width="12.8924%" height="15" fill="rgb(246,78,51)" fg:x="46925" fg:w="14591"/><text x="41.7123%" y="895.50">&lt;futures_lite::futu..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14,591 samples, 12.89%)</title><rect x="41.4623%" y="869" width="12.8924%" height="15" fill="rgb(211,17,15)" fg:x="46925" fg:w="14591"/><text x="41.7123%" y="879.50">&lt;core::future::from..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (14,591 samples, 12.89%)</title><rect x="41.4623%" y="853" width="12.8924%" height="15" fill="rgb(209,59,46)" fg:x="46925" fg:w="14591"/><text x="41.7123%" y="863.50">async_executor::Exe..</text></g><g><title>async_task::runnable::Runnable::run (14,591 samples, 12.89%)</title><rect x="41.4623%" y="837" width="12.8924%" height="15" fill="rgb(210,92,25)" fg:x="46925" fg:w="14591"/><text x="41.7123%" y="847.50">async_task::runnabl..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (14,591 samples, 12.89%)</title><rect x="41.4623%" y="821" width="12.8924%" height="15" fill="rgb(238,174,52)" fg:x="46925" fg:w="14591"/><text x="41.7123%" y="831.50">async_task::raw::Ra..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (14,591 samples, 12.89%)</title><rect x="41.4623%" y="805" width="12.8924%" height="15" fill="rgb(230,73,7)" fg:x="46925" fg:w="14591"/><text x="41.7123%" y="815.50">&lt;core::pin::Pin&lt;P&gt; ..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14,591 samples, 12.89%)</title><rect x="41.4623%" y="789" width="12.8924%" height="15" fill="rgb(243,124,40)" fg:x="46925" fg:w="14591"/><text x="41.7123%" y="799.50">&lt;core::future::from..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (14,591 samples, 12.89%)</title><rect x="41.4623%" y="773" width="12.8924%" height="15" fill="rgb(244,170,11)" fg:x="46925" fg:w="14591"/><text x="41.7123%" y="783.50">async_executor::Exe..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (14,591 samples, 12.89%)</title><rect x="41.4623%" y="757" width="12.8924%" height="15" fill="rgb(207,114,54)" fg:x="46925" fg:w="14591"/><text x="41.7123%" y="767.50">&lt;async_std::task::b..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (14,591 samples, 12.89%)</title><rect x="41.4623%" y="741" width="12.8924%" height="15" fill="rgb(205,42,20)" fg:x="46925" fg:w="14591"/><text x="41.7123%" y="751.50">async_std::task::ta..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (14,591 samples, 12.89%)</title><rect x="41.4623%" y="725" width="12.8924%" height="15" fill="rgb(230,30,28)" fg:x="46925" fg:w="14591"/><text x="41.7123%" y="735.50">std::thread::local:..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (14,591 samples, 12.89%)</title><rect x="41.4623%" y="709" width="12.8924%" height="15" fill="rgb(205,73,54)" fg:x="46925" fg:w="14591"/><text x="41.7123%" y="719.50">std::thread::local:..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (14,591 samples, 12.89%)</title><rect x="41.4623%" y="693" width="12.8924%" height="15" fill="rgb(254,227,23)" fg:x="46925" fg:w="14591"/><text x="41.7123%" y="703.50">async_std::task::ta..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (14,591 samples, 12.89%)</title><rect x="41.4623%" y="677" width="12.8924%" height="15" fill="rgb(228,202,34)" fg:x="46925" fg:w="14591"/><text x="41.7123%" y="687.50">&lt;async_std::task::b..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14,591 samples, 12.89%)</title><rect x="41.4623%" y="661" width="12.8924%" height="15" fill="rgb(222,225,37)" fg:x="46925" fg:w="14591"/><text x="41.7123%" y="671.50">&lt;core::future::from..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (3,068 samples, 2.71%)</title><rect x="51.6439%" y="645" width="2.7108%" height="15" fill="rgb(221,14,54)" fg:x="58448" fg:w="3068"/><text x="51.8939%" y="655.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,510 samples, 2.22%)</title><rect x="52.1370%" y="629" width="2.2178%" height="15" fill="rgb(254,102,2)" fg:x="59006" fg:w="2510"/><text x="52.3870%" y="639.50">&lt;..</text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (1,218 samples, 1.08%)</title><rect x="53.2786%" y="613" width="1.0762%" height="15" fill="rgb(232,104,17)" fg:x="60298" fg:w="1218"/><text x="53.5286%" y="623.50"></text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (12 samples, 0.01%)</title><rect x="54.3442%" y="597" width="0.0106%" height="15" fill="rgb(250,220,14)" fg:x="61504" fg:w="12"/><text x="54.5942%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (12 samples, 0.01%)</title><rect x="54.3442%" y="581" width="0.0106%" height="15" fill="rgb(241,158,9)" fg:x="61504" fg:w="12"/><text x="54.5942%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (12 samples, 0.01%)</title><rect x="54.3442%" y="565" width="0.0106%" height="15" fill="rgb(246,9,43)" fg:x="61504" fg:w="12"/><text x="54.5942%" y="575.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (23 samples, 0.02%)</title><rect x="54.4016%" y="453" width="0.0203%" height="15" fill="rgb(206,73,33)" fg:x="61569" fg:w="23"/><text x="54.6516%" y="463.50"></text></g><g><title>core::task::wake::Waker::wake (36 samples, 0.03%)</title><rect x="54.4016%" y="485" width="0.0318%" height="15" fill="rgb(222,79,8)" fg:x="61569" fg:w="36"/><text x="54.6516%" y="495.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (36 samples, 0.03%)</title><rect x="54.4016%" y="469" width="0.0318%" height="15" fill="rgb(234,8,54)" fg:x="61569" fg:w="36"/><text x="54.6516%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (13 samples, 0.01%)</title><rect x="54.4219%" y="453" width="0.0115%" height="15" fill="rgb(209,134,38)" fg:x="61592" fg:w="13"/><text x="54.6719%" y="463.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="54.4219%" y="437" width="0.0115%" height="15" fill="rgb(230,127,29)" fg:x="61592" fg:w="13"/><text x="54.6719%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (13 samples, 0.01%)</title><rect x="54.4219%" y="421" width="0.0115%" height="15" fill="rgb(242,44,41)" fg:x="61592" fg:w="13"/><text x="54.6719%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_sub (13 samples, 0.01%)</title><rect x="54.4219%" y="405" width="0.0115%" height="15" fill="rgb(222,56,43)" fg:x="61592" fg:w="13"/><text x="54.6719%" y="415.50"></text></g><g><title>async_executor::State::notify (67 samples, 0.06%)</title><rect x="54.3866%" y="501" width="0.0592%" height="15" fill="rgb(238,39,47)" fg:x="61552" fg:w="67"/><text x="54.6366%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (14 samples, 0.01%)</title><rect x="54.4334%" y="485" width="0.0124%" height="15" fill="rgb(226,79,43)" fg:x="61605" fg:w="14"/><text x="54.6834%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (12 samples, 0.01%)</title><rect x="54.4352%" y="469" width="0.0106%" height="15" fill="rgb(242,105,53)" fg:x="61607" fg:w="12"/><text x="54.6852%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (12 samples, 0.01%)</title><rect x="54.4352%" y="453" width="0.0106%" height="15" fill="rgb(251,132,46)" fg:x="61607" fg:w="12"/><text x="54.6852%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (13 samples, 0.01%)</title><rect x="54.4458%" y="469" width="0.0115%" height="15" fill="rgb(231,77,14)" fg:x="61619" fg:w="13"/><text x="54.6958%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (13 samples, 0.01%)</title><rect x="54.4458%" y="453" width="0.0115%" height="15" fill="rgb(240,135,9)" fg:x="61619" fg:w="13"/><text x="54.6958%" y="463.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (87 samples, 0.08%)</title><rect x="54.3866%" y="517" width="0.0769%" height="15" fill="rgb(248,109,14)" fg:x="61552" fg:w="87"/><text x="54.6366%" y="527.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (20 samples, 0.02%)</title><rect x="54.4458%" y="501" width="0.0177%" height="15" fill="rgb(227,146,52)" fg:x="61619" fg:w="20"/><text x="54.6958%" y="511.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (20 samples, 0.02%)</title><rect x="54.4458%" y="485" width="0.0177%" height="15" fill="rgb(232,54,3)" fg:x="61619" fg:w="20"/><text x="54.6958%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (18 samples, 0.02%)</title><rect x="54.4634%" y="517" width="0.0159%" height="15" fill="rgb(229,201,43)" fg:x="61639" fg:w="18"/><text x="54.7134%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (18 samples, 0.02%)</title><rect x="54.4634%" y="501" width="0.0159%" height="15" fill="rgb(252,161,33)" fg:x="61639" fg:w="18"/><text x="54.7134%" y="511.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (118 samples, 0.10%)</title><rect x="54.3777%" y="693" width="0.1043%" height="15" fill="rgb(226,146,40)" fg:x="61542" fg:w="118"/><text x="54.6277%" y="703.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::route_events::{{closure}} (118 samples, 0.10%)</title><rect x="54.3777%" y="677" width="0.1043%" height="15" fill="rgb(219,47,25)" fg:x="61542" fg:w="118"/><text x="54.6277%" y="687.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (118 samples, 0.10%)</title><rect x="54.3777%" y="661" width="0.1043%" height="15" fill="rgb(250,135,13)" fg:x="61542" fg:w="118"/><text x="54.6277%" y="671.50"></text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (118 samples, 0.10%)</title><rect x="54.3777%" y="645" width="0.1043%" height="15" fill="rgb(219,229,18)" fg:x="61542" fg:w="118"/><text x="54.6277%" y="655.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (118 samples, 0.10%)</title><rect x="54.3777%" y="629" width="0.1043%" height="15" fill="rgb(217,152,27)" fg:x="61542" fg:w="118"/><text x="54.6277%" y="639.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (118 samples, 0.10%)</title><rect x="54.3777%" y="613" width="0.1043%" height="15" fill="rgb(225,71,47)" fg:x="61542" fg:w="118"/><text x="54.6277%" y="623.50"></text></g><g><title>event_listener::Event::notify (118 samples, 0.10%)</title><rect x="54.3777%" y="597" width="0.1043%" height="15" fill="rgb(220,139,14)" fg:x="61542" fg:w="118"/><text x="54.6277%" y="607.50"></text></g><g><title>event_listener::List::notify (116 samples, 0.10%)</title><rect x="54.3795%" y="581" width="0.1025%" height="15" fill="rgb(247,54,32)" fg:x="61544" fg:w="116"/><text x="54.6295%" y="591.50"></text></g><g><title>core::task::wake::Waker::wake (115 samples, 0.10%)</title><rect x="54.3804%" y="565" width="0.1016%" height="15" fill="rgb(252,131,39)" fg:x="61545" fg:w="115"/><text x="54.6304%" y="575.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (115 samples, 0.10%)</title><rect x="54.3804%" y="549" width="0.1016%" height="15" fill="rgb(210,108,39)" fg:x="61545" fg:w="115"/><text x="54.6304%" y="559.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (108 samples, 0.10%)</title><rect x="54.3866%" y="533" width="0.0954%" height="15" fill="rgb(205,23,29)" fg:x="61552" fg:w="108"/><text x="54.6366%" y="543.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.02%)</title><rect x="55.0775%" y="677" width="0.0194%" height="15" fill="rgb(246,139,46)" fg:x="62334" fg:w="22"/><text x="55.3275%" y="687.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::clone::Clone&gt;::clone (13 samples, 0.01%)</title><rect x="55.0970%" y="677" width="0.0115%" height="15" fill="rgb(250,81,26)" fg:x="62356" fg:w="13"/><text x="55.3470%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (80 samples, 0.07%)</title><rect x="55.2737%" y="581" width="0.0707%" height="15" fill="rgb(214,104,7)" fg:x="62556" fg:w="80"/><text x="55.5237%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (80 samples, 0.07%)</title><rect x="55.2737%" y="565" width="0.0707%" height="15" fill="rgb(233,189,8)" fg:x="62556" fg:w="80"/><text x="55.5237%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (80 samples, 0.07%)</title><rect x="55.2737%" y="549" width="0.0707%" height="15" fill="rgb(228,141,17)" fg:x="62556" fg:w="80"/><text x="55.5237%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (77 samples, 0.07%)</title><rect x="55.2763%" y="533" width="0.0680%" height="15" fill="rgb(247,157,1)" fg:x="62559" fg:w="77"/><text x="55.5263%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (77 samples, 0.07%)</title><rect x="55.2763%" y="517" width="0.0680%" height="15" fill="rgb(249,225,5)" fg:x="62559" fg:w="77"/><text x="55.5263%" y="527.50"></text></g><g><title>alloc::alloc::alloc (77 samples, 0.07%)</title><rect x="55.2763%" y="501" width="0.0680%" height="15" fill="rgb(242,55,13)" fg:x="62559" fg:w="77"/><text x="55.5263%" y="511.50"></text></g><g><title>__rg_alloc (77 samples, 0.07%)</title><rect x="55.2763%" y="485" width="0.0680%" height="15" fill="rgb(230,49,50)" fg:x="62559" fg:w="77"/><text x="55.5263%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (77 samples, 0.07%)</title><rect x="55.2763%" y="469" width="0.0680%" height="15" fill="rgb(241,111,38)" fg:x="62559" fg:w="77"/><text x="55.5263%" y="479.50"></text></g><g><title>sn_rust_alloc (66 samples, 0.06%)</title><rect x="55.2861%" y="453" width="0.0583%" height="15" fill="rgb(252,155,4)" fg:x="62570" fg:w="66"/><text x="55.5361%" y="463.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (22 samples, 0.02%)</title><rect x="55.3249%" y="437" width="0.0194%" height="15" fill="rgb(212,69,32)" fg:x="62614" fg:w="22"/><text x="55.5749%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (143 samples, 0.13%)</title><rect x="55.2596%" y="661" width="0.1264%" height="15" fill="rgb(243,107,47)" fg:x="62540" fg:w="143"/><text x="55.5096%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (127 samples, 0.11%)</title><rect x="55.2737%" y="645" width="0.1122%" height="15" fill="rgb(247,130,12)" fg:x="62556" fg:w="127"/><text x="55.5237%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (127 samples, 0.11%)</title><rect x="55.2737%" y="629" width="0.1122%" height="15" fill="rgb(233,74,16)" fg:x="62556" fg:w="127"/><text x="55.5237%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (127 samples, 0.11%)</title><rect x="55.2737%" y="613" width="0.1122%" height="15" fill="rgb(208,58,18)" fg:x="62556" fg:w="127"/><text x="55.5237%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (127 samples, 0.11%)</title><rect x="55.2737%" y="597" width="0.1122%" height="15" fill="rgb(242,225,1)" fg:x="62556" fg:w="127"/><text x="55.5237%" y="607.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (47 samples, 0.04%)</title><rect x="55.3444%" y="581" width="0.0415%" height="15" fill="rgb(249,39,40)" fg:x="62636" fg:w="47"/><text x="55.5944%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (47 samples, 0.04%)</title><rect x="55.3444%" y="565" width="0.0415%" height="15" fill="rgb(207,72,44)" fg:x="62636" fg:w="47"/><text x="55.5944%" y="575.50"></text></g><g><title>[libc-2.31.so] (33 samples, 0.03%)</title><rect x="55.3567%" y="549" width="0.0292%" height="15" fill="rgb(215,193,12)" fg:x="62650" fg:w="33"/><text x="55.6067%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (68 samples, 0.06%)</title><rect x="55.3894%" y="517" width="0.0601%" height="15" fill="rgb(248,41,39)" fg:x="62687" fg:w="68"/><text x="55.6394%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (68 samples, 0.06%)</title><rect x="55.3894%" y="501" width="0.0601%" height="15" fill="rgb(253,85,4)" fg:x="62687" fg:w="68"/><text x="55.6394%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (68 samples, 0.06%)</title><rect x="55.3894%" y="485" width="0.0601%" height="15" fill="rgb(243,70,31)" fg:x="62687" fg:w="68"/><text x="55.6394%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (65 samples, 0.06%)</title><rect x="55.3921%" y="469" width="0.0574%" height="15" fill="rgb(253,195,26)" fg:x="62690" fg:w="65"/><text x="55.6421%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (65 samples, 0.06%)</title><rect x="55.3921%" y="453" width="0.0574%" height="15" fill="rgb(243,42,11)" fg:x="62690" fg:w="65"/><text x="55.6421%" y="463.50"></text></g><g><title>alloc::alloc::alloc (65 samples, 0.06%)</title><rect x="55.3921%" y="437" width="0.0574%" height="15" fill="rgb(239,66,17)" fg:x="62690" fg:w="65"/><text x="55.6421%" y="447.50"></text></g><g><title>__rg_alloc (65 samples, 0.06%)</title><rect x="55.3921%" y="421" width="0.0574%" height="15" fill="rgb(217,132,21)" fg:x="62690" fg:w="65"/><text x="55.6421%" y="431.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (65 samples, 0.06%)</title><rect x="55.3921%" y="405" width="0.0574%" height="15" fill="rgb(252,202,21)" fg:x="62690" fg:w="65"/><text x="55.6421%" y="415.50"></text></g><g><title>sn_rust_alloc (60 samples, 0.05%)</title><rect x="55.3965%" y="389" width="0.0530%" height="15" fill="rgb(233,98,36)" fg:x="62695" fg:w="60"/><text x="55.6465%" y="399.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (31 samples, 0.03%)</title><rect x="55.4221%" y="373" width="0.0274%" height="15" fill="rgb(216,153,54)" fg:x="62724" fg:w="31"/><text x="55.6721%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (99 samples, 0.09%)</title><rect x="55.3886%" y="597" width="0.0875%" height="15" fill="rgb(250,99,7)" fg:x="62686" fg:w="99"/><text x="55.6386%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (98 samples, 0.09%)</title><rect x="55.3894%" y="581" width="0.0866%" height="15" fill="rgb(207,56,50)" fg:x="62687" fg:w="98"/><text x="55.6394%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (98 samples, 0.09%)</title><rect x="55.3894%" y="565" width="0.0866%" height="15" fill="rgb(244,61,34)" fg:x="62687" fg:w="98"/><text x="55.6394%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (98 samples, 0.09%)</title><rect x="55.3894%" y="549" width="0.0866%" height="15" fill="rgb(241,50,38)" fg:x="62687" fg:w="98"/><text x="55.6394%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (98 samples, 0.09%)</title><rect x="55.3894%" y="533" width="0.0866%" height="15" fill="rgb(212,166,30)" fg:x="62687" fg:w="98"/><text x="55.6394%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (30 samples, 0.03%)</title><rect x="55.4495%" y="517" width="0.0265%" height="15" fill="rgb(249,127,32)" fg:x="62755" fg:w="30"/><text x="55.6995%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (30 samples, 0.03%)</title><rect x="55.4495%" y="501" width="0.0265%" height="15" fill="rgb(209,103,0)" fg:x="62755" fg:w="30"/><text x="55.6995%" y="511.50"></text></g><g><title>[libc-2.31.so] (27 samples, 0.02%)</title><rect x="55.4522%" y="485" width="0.0239%" height="15" fill="rgb(238,209,51)" fg:x="62758" fg:w="27"/><text x="55.7022%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.01%)</title><rect x="55.4760%" y="597" width="0.0124%" height="15" fill="rgb(237,56,23)" fg:x="62785" fg:w="14"/><text x="55.7260%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.01%)</title><rect x="55.4778%" y="581" width="0.0106%" height="15" fill="rgb(215,153,46)" fg:x="62787" fg:w="12"/><text x="55.7278%" y="591.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.01%)</title><rect x="55.4778%" y="565" width="0.0106%" height="15" fill="rgb(224,49,31)" fg:x="62787" fg:w="12"/><text x="55.7278%" y="575.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (19 samples, 0.02%)</title><rect x="55.5140%" y="453" width="0.0168%" height="15" fill="rgb(250,18,42)" fg:x="62828" fg:w="19"/><text x="55.7640%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (42 samples, 0.04%)</title><rect x="55.4946%" y="549" width="0.0371%" height="15" fill="rgb(215,176,39)" fg:x="62806" fg:w="42"/><text x="55.7446%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (42 samples, 0.04%)</title><rect x="55.4946%" y="533" width="0.0371%" height="15" fill="rgb(223,77,29)" fg:x="62806" fg:w="42"/><text x="55.7446%" y="543.50"></text></g><g><title>alloc::alloc::alloc (42 samples, 0.04%)</title><rect x="55.4946%" y="517" width="0.0371%" height="15" fill="rgb(234,94,52)" fg:x="62806" fg:w="42"/><text x="55.7446%" y="527.50"></text></g><g><title>__rg_alloc (42 samples, 0.04%)</title><rect x="55.4946%" y="501" width="0.0371%" height="15" fill="rgb(220,154,50)" fg:x="62806" fg:w="42"/><text x="55.7446%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (42 samples, 0.04%)</title><rect x="55.4946%" y="485" width="0.0371%" height="15" fill="rgb(212,11,10)" fg:x="62806" fg:w="42"/><text x="55.7446%" y="495.50"></text></g><g><title>sn_rust_alloc (40 samples, 0.04%)</title><rect x="55.4964%" y="469" width="0.0353%" height="15" fill="rgb(205,166,19)" fg:x="62808" fg:w="40"/><text x="55.7464%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (56 samples, 0.05%)</title><rect x="55.4884%" y="597" width="0.0495%" height="15" fill="rgb(244,198,16)" fg:x="62799" fg:w="56"/><text x="55.7384%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (50 samples, 0.04%)</title><rect x="55.4937%" y="581" width="0.0442%" height="15" fill="rgb(219,69,12)" fg:x="62805" fg:w="50"/><text x="55.7437%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (50 samples, 0.04%)</title><rect x="55.4937%" y="565" width="0.0442%" height="15" fill="rgb(245,30,7)" fg:x="62805" fg:w="50"/><text x="55.7437%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (181 samples, 0.16%)</title><rect x="55.3859%" y="661" width="0.1599%" height="15" fill="rgb(218,221,48)" fg:x="62683" fg:w="181"/><text x="55.6359%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (181 samples, 0.16%)</title><rect x="55.3859%" y="645" width="0.1599%" height="15" fill="rgb(216,66,15)" fg:x="62683" fg:w="181"/><text x="55.6359%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (181 samples, 0.16%)</title><rect x="55.3859%" y="629" width="0.1599%" height="15" fill="rgb(226,122,50)" fg:x="62683" fg:w="181"/><text x="55.6359%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (181 samples, 0.16%)</title><rect x="55.3859%" y="613" width="0.1599%" height="15" fill="rgb(239,156,16)" fg:x="62683" fg:w="181"/><text x="55.6359%" y="623.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (497 samples, 0.44%)</title><rect x="55.1085%" y="677" width="0.4391%" height="15" fill="rgb(224,27,38)" fg:x="62369" fg:w="497"/><text x="55.3585%" y="687.50"></text></g><g><title>[libc-2.31.so] (55 samples, 0.05%)</title><rect x="55.5476%" y="677" width="0.0486%" height="15" fill="rgb(224,39,27)" fg:x="62866" fg:w="55"/><text x="55.7976%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (198 samples, 0.17%)</title><rect x="55.6006%" y="677" width="0.1750%" height="15" fill="rgb(215,92,29)" fg:x="62926" fg:w="198"/><text x="55.8506%" y="687.50"></text></g><g><title>core::ptr::write (187 samples, 0.17%)</title><rect x="55.6103%" y="661" width="0.1652%" height="15" fill="rgb(207,159,16)" fg:x="62937" fg:w="187"/><text x="55.8603%" y="671.50"></text></g><g><title>[libc-2.31.so] (187 samples, 0.17%)</title><rect x="55.6103%" y="645" width="0.1652%" height="15" fill="rgb(238,163,47)" fg:x="62937" fg:w="187"/><text x="55.8603%" y="655.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (458 samples, 0.40%)</title><rect x="55.8162%" y="517" width="0.4047%" height="15" fill="rgb(219,91,49)" fg:x="63170" fg:w="458"/><text x="56.0662%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (500 samples, 0.44%)</title><rect x="55.7888%" y="613" width="0.4418%" height="15" fill="rgb(227,167,31)" fg:x="63139" fg:w="500"/><text x="56.0388%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (500 samples, 0.44%)</title><rect x="55.7888%" y="597" width="0.4418%" height="15" fill="rgb(234,80,54)" fg:x="63139" fg:w="500"/><text x="56.0388%" y="607.50"></text></g><g><title>alloc::alloc::alloc (500 samples, 0.44%)</title><rect x="55.7888%" y="581" width="0.4418%" height="15" fill="rgb(212,114,2)" fg:x="63139" fg:w="500"/><text x="56.0388%" y="591.50"></text></g><g><title>__rg_alloc (500 samples, 0.44%)</title><rect x="55.7888%" y="565" width="0.4418%" height="15" fill="rgb(234,50,24)" fg:x="63139" fg:w="500"/><text x="56.0388%" y="575.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (500 samples, 0.44%)</title><rect x="55.7888%" y="549" width="0.4418%" height="15" fill="rgb(221,68,8)" fg:x="63139" fg:w="500"/><text x="56.0388%" y="559.50"></text></g><g><title>sn_rust_alloc (495 samples, 0.44%)</title><rect x="55.7932%" y="533" width="0.4374%" height="15" fill="rgb(254,180,31)" fg:x="63144" fg:w="495"/><text x="56.0432%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (520 samples, 0.46%)</title><rect x="55.7756%" y="677" width="0.4595%" height="15" fill="rgb(247,130,50)" fg:x="63124" fg:w="520"/><text x="56.0256%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (520 samples, 0.46%)</title><rect x="55.7756%" y="661" width="0.4595%" height="15" fill="rgb(211,109,4)" fg:x="63124" fg:w="520"/><text x="56.0256%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (513 samples, 0.45%)</title><rect x="55.7818%" y="645" width="0.4533%" height="15" fill="rgb(238,50,21)" fg:x="63131" fg:w="513"/><text x="56.0318%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (513 samples, 0.45%)</title><rect x="55.7818%" y="629" width="0.4533%" height="15" fill="rgb(225,57,45)" fg:x="63131" fg:w="513"/><text x="56.0318%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (30 samples, 0.03%)</title><rect x="56.2386%" y="581" width="0.0265%" height="15" fill="rgb(209,196,50)" fg:x="63648" fg:w="30"/><text x="56.4886%" y="591.50"></text></g><g><title>alloc::alloc::dealloc (30 samples, 0.03%)</title><rect x="56.2386%" y="565" width="0.0265%" height="15" fill="rgb(242,140,13)" fg:x="63648" fg:w="30"/><text x="56.4886%" y="575.50"></text></g><g><title>__rg_dealloc (30 samples, 0.03%)</title><rect x="56.2386%" y="549" width="0.0265%" height="15" fill="rgb(217,111,7)" fg:x="63648" fg:w="30"/><text x="56.4886%" y="559.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (30 samples, 0.03%)</title><rect x="56.2386%" y="533" width="0.0265%" height="15" fill="rgb(253,193,51)" fg:x="63648" fg:w="30"/><text x="56.4886%" y="543.50"></text></g><g><title>sn_rust_dealloc (27 samples, 0.02%)</title><rect x="56.2412%" y="517" width="0.0239%" height="15" fill="rgb(252,70,29)" fg:x="63651" fg:w="27"/><text x="56.4912%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (37 samples, 0.03%)</title><rect x="56.2350%" y="677" width="0.0327%" height="15" fill="rgb(232,127,12)" fg:x="63644" fg:w="37"/><text x="56.4850%" y="687.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.03%)</title><rect x="56.2350%" y="661" width="0.0327%" height="15" fill="rgb(211,180,21)" fg:x="63644" fg:w="37"/><text x="56.4850%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (33 samples, 0.03%)</title><rect x="56.2386%" y="645" width="0.0292%" height="15" fill="rgb(229,72,13)" fg:x="63648" fg:w="33"/><text x="56.4886%" y="655.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.03%)</title><rect x="56.2386%" y="629" width="0.0292%" height="15" fill="rgb(240,211,49)" fg:x="63648" fg:w="33"/><text x="56.4886%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (33 samples, 0.03%)</title><rect x="56.2386%" y="613" width="0.0292%" height="15" fill="rgb(219,149,40)" fg:x="63648" fg:w="33"/><text x="56.4886%" y="623.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.03%)</title><rect x="56.2386%" y="597" width="0.0292%" height="15" fill="rgb(210,127,46)" fg:x="63648" fg:w="33"/><text x="56.4886%" y="607.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (15 samples, 0.01%)</title><rect x="56.2677%" y="677" width="0.0133%" height="15" fill="rgb(220,106,7)" fg:x="63681" fg:w="15"/><text x="56.5177%" y="687.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::run::{{closure}} (2,160 samples, 1.91%)</title><rect x="54.3777%" y="773" width="1.9085%" height="15" fill="rgb(249,31,22)" fg:x="61542" fg:w="2160"/><text x="54.6277%" y="783.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,160 samples, 1.91%)</title><rect x="54.3777%" y="757" width="1.9085%" height="15" fill="rgb(253,1,49)" fg:x="61542" fg:w="2160"/><text x="54.6277%" y="767.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_source_reply::{{closure}} (2,160 samples, 1.91%)</title><rect x="54.3777%" y="741" width="1.9085%" height="15" fill="rgb(227,144,33)" fg:x="61542" fg:w="2160"/><text x="54.6277%" y="751.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,160 samples, 1.91%)</title><rect x="54.3777%" y="725" width="1.9085%" height="15" fill="rgb(249,163,44)" fg:x="61542" fg:w="2160"/><text x="54.6277%" y="735.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_data::{{closure}} (2,160 samples, 1.91%)</title><rect x="54.3777%" y="709" width="1.9085%" height="15" fill="rgb(234,15,39)" fg:x="61542" fg:w="2160"/><text x="54.6277%" y="719.50">t..</text></g><g><title>tremor_runtime::connectors::source::build_events (2,042 samples, 1.80%)</title><rect x="54.4820%" y="693" width="1.8043%" height="15" fill="rgb(207,66,16)" fg:x="61660" fg:w="2042"/><text x="54.7320%" y="703.50">t..</text></g><g><title>core::cell::Cell&lt;T&gt;::replace (94 samples, 0.08%)</title><rect x="56.3640%" y="645" width="0.0831%" height="15" fill="rgb(233,112,24)" fg:x="63790" fg:w="94"/><text x="56.6140%" y="655.50"></text></g><g><title>core::mem::replace (94 samples, 0.08%)</title><rect x="56.3640%" y="629" width="0.0831%" height="15" fill="rgb(230,90,22)" fg:x="63790" fg:w="94"/><text x="56.6140%" y="639.50"></text></g><g><title>core::ptr::read (94 samples, 0.08%)</title><rect x="56.3640%" y="613" width="0.0831%" height="15" fill="rgb(229,61,13)" fg:x="63790" fg:w="94"/><text x="56.6140%" y="623.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (142 samples, 0.13%)</title><rect x="56.3428%" y="661" width="0.1255%" height="15" fill="rgb(225,57,24)" fg:x="63766" fg:w="142"/><text x="56.5928%" y="671.50"></text></g><g><title>core::mem::drop (24 samples, 0.02%)</title><rect x="56.4471%" y="645" width="0.0212%" height="15" fill="rgb(208,169,48)" fg:x="63884" fg:w="24"/><text x="56.6971%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (24 samples, 0.02%)</title><rect x="56.4471%" y="629" width="0.0212%" height="15" fill="rgb(244,218,51)" fg:x="63884" fg:w="24"/><text x="56.6971%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (140 samples, 0.12%)</title><rect x="56.4683%" y="661" width="0.1237%" height="15" fill="rgb(214,148,10)" fg:x="63908" fg:w="140"/><text x="56.7183%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (136 samples, 0.12%)</title><rect x="56.4718%" y="645" width="0.1202%" height="15" fill="rgb(225,174,27)" fg:x="63912" fg:w="136"/><text x="56.7218%" y="655.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (136 samples, 0.12%)</title><rect x="56.4718%" y="629" width="0.1202%" height="15" fill="rgb(230,96,26)" fg:x="63912" fg:w="136"/><text x="56.7218%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (118 samples, 0.10%)</title><rect x="56.4877%" y="613" width="0.1043%" height="15" fill="rgb(232,10,30)" fg:x="63930" fg:w="118"/><text x="56.7377%" y="623.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (118 samples, 0.10%)</title><rect x="56.4877%" y="597" width="0.1043%" height="15" fill="rgb(222,8,50)" fg:x="63930" fg:w="118"/><text x="56.7377%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (118 samples, 0.10%)</title><rect x="56.4877%" y="581" width="0.1043%" height="15" fill="rgb(213,81,27)" fg:x="63930" fg:w="118"/><text x="56.7377%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_swap (118 samples, 0.10%)</title><rect x="56.4877%" y="565" width="0.1043%" height="15" fill="rgb(245,50,10)" fg:x="63930" fg:w="118"/><text x="56.7377%" y="575.50"></text></g><g><title>core::task::wake::Waker::will_wake (18 samples, 0.02%)</title><rect x="56.6008%" y="661" width="0.0159%" height="15" fill="rgb(216,100,18)" fg:x="64058" fg:w="18"/><text x="56.8508%" y="671.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (18 samples, 0.02%)</title><rect x="56.6008%" y="645" width="0.0159%" height="15" fill="rgb(236,147,54)" fg:x="64058" fg:w="18"/><text x="56.8508%" y="655.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (16 samples, 0.01%)</title><rect x="56.6026%" y="629" width="0.0141%" height="15" fill="rgb(205,143,26)" fg:x="64060" fg:w="16"/><text x="56.8526%" y="639.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (16 samples, 0.01%)</title><rect x="56.6026%" y="613" width="0.0141%" height="15" fill="rgb(236,26,9)" fg:x="64060" fg:w="16"/><text x="56.8526%" y="623.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (1,134 samples, 1.00%)</title><rect x="56.3066%" y="677" width="1.0020%" height="15" fill="rgb(221,165,53)" fg:x="63725" fg:w="1134"/><text x="56.5566%" y="687.50"></text></g><g><title>event_listener::Inner::lock (783 samples, 0.69%)</title><rect x="56.6167%" y="661" width="0.6918%" height="15" fill="rgb(214,110,17)" fg:x="64076" fg:w="783"/><text x="56.8667%" y="671.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (776 samples, 0.69%)</title><rect x="56.6229%" y="645" width="0.6857%" height="15" fill="rgb(237,197,12)" fg:x="64083" fg:w="776"/><text x="56.8729%" y="655.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (765 samples, 0.68%)</title><rect x="56.6326%" y="629" width="0.6759%" height="15" fill="rgb(205,84,17)" fg:x="64094" fg:w="765"/><text x="56.8826%" y="639.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (765 samples, 0.68%)</title><rect x="56.6326%" y="613" width="0.6759%" height="15" fill="rgb(237,18,45)" fg:x="64094" fg:w="765"/><text x="56.8826%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (765 samples, 0.68%)</title><rect x="56.6326%" y="597" width="0.6759%" height="15" fill="rgb(221,87,14)" fg:x="64094" fg:w="765"/><text x="56.8826%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (765 samples, 0.68%)</title><rect x="56.6326%" y="581" width="0.6759%" height="15" fill="rgb(238,186,15)" fg:x="64094" fg:w="765"/><text x="56.8826%" y="591.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,164 samples, 1.03%)</title><rect x="56.2863%" y="757" width="1.0285%" height="15" fill="rgb(208,115,11)" fg:x="63702" fg:w="1164"/><text x="56.5363%" y="767.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (1,164 samples, 1.03%)</title><rect x="56.2863%" y="741" width="1.0285%" height="15" fill="rgb(254,175,0)" fg:x="63702" fg:w="1164"/><text x="56.5363%" y="751.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (1,164 samples, 1.03%)</title><rect x="56.2863%" y="725" width="1.0285%" height="15" fill="rgb(227,24,42)" fg:x="63702" fg:w="1164"/><text x="56.5363%" y="735.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (1,164 samples, 1.03%)</title><rect x="56.2863%" y="709" width="1.0285%" height="15" fill="rgb(223,211,37)" fg:x="63702" fg:w="1164"/><text x="56.5363%" y="719.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (1,164 samples, 1.03%)</title><rect x="56.2863%" y="693" width="1.0285%" height="15" fill="rgb(235,49,27)" fg:x="63702" fg:w="1164"/><text x="56.5363%" y="703.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (357 samples, 0.32%)</title><rect x="57.4429%" y="629" width="0.3154%" height="15" fill="rgb(254,97,51)" fg:x="65011" fg:w="357"/><text x="57.6929%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (12 samples, 0.01%)</title><rect x="57.7477%" y="613" width="0.0106%" height="15" fill="rgb(249,51,40)" fg:x="65356" fg:w="12"/><text x="57.9977%" y="623.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (14 samples, 0.01%)</title><rect x="57.7610%" y="613" width="0.0124%" height="15" fill="rgb(210,128,45)" fg:x="65371" fg:w="14"/><text x="58.0110%" y="623.50"></text></g><g><title>[libc-2.31.so] (15 samples, 0.01%)</title><rect x="57.7734%" y="613" width="0.0133%" height="15" fill="rgb(224,137,50)" fg:x="65385" fg:w="15"/><text x="58.0234%" y="623.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;tremor_pipeline::event::Event&gt;&gt;::from (34 samples, 0.03%)</title><rect x="57.7583%" y="629" width="0.0300%" height="15" fill="rgb(242,15,9)" fg:x="65368" fg:w="34"/><text x="58.0083%" y="639.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (405 samples, 0.36%)</title><rect x="57.4341%" y="645" width="0.3579%" height="15" fill="rgb(233,187,41)" fg:x="65001" fg:w="405"/><text x="57.6841%" y="655.50"></text></g><g><title>[libc-2.31.so] (353 samples, 0.31%)</title><rect x="57.7919%" y="645" width="0.3119%" height="15" fill="rgb(227,2,29)" fg:x="65406" fg:w="353"/><text x="58.0419%" y="655.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (48 samples, 0.04%)</title><rect x="58.1480%" y="533" width="0.0424%" height="15" fill="rgb(222,70,3)" fg:x="65809" fg:w="48"/><text x="58.3980%" y="543.50"></text></g><g><title>alloc::alloc::exchange_malloc (110 samples, 0.10%)</title><rect x="58.1038%" y="645" width="0.0972%" height="15" fill="rgb(213,11,42)" fg:x="65759" fg:w="110"/><text x="58.3538%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (110 samples, 0.10%)</title><rect x="58.1038%" y="629" width="0.0972%" height="15" fill="rgb(225,150,9)" fg:x="65759" fg:w="110"/><text x="58.3538%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (110 samples, 0.10%)</title><rect x="58.1038%" y="613" width="0.0972%" height="15" fill="rgb(230,162,45)" fg:x="65759" fg:w="110"/><text x="58.3538%" y="623.50"></text></g><g><title>alloc::alloc::alloc (110 samples, 0.10%)</title><rect x="58.1038%" y="597" width="0.0972%" height="15" fill="rgb(222,14,52)" fg:x="65759" fg:w="110"/><text x="58.3538%" y="607.50"></text></g><g><title>__rg_alloc (110 samples, 0.10%)</title><rect x="58.1038%" y="581" width="0.0972%" height="15" fill="rgb(254,198,14)" fg:x="65759" fg:w="110"/><text x="58.3538%" y="591.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (110 samples, 0.10%)</title><rect x="58.1038%" y="565" width="0.0972%" height="15" fill="rgb(220,217,30)" fg:x="65759" fg:w="110"/><text x="58.3538%" y="575.50"></text></g><g><title>sn_rust_alloc (105 samples, 0.09%)</title><rect x="58.1082%" y="549" width="0.0928%" height="15" fill="rgb(215,146,41)" fg:x="65764" fg:w="105"/><text x="58.3582%" y="559.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (12 samples, 0.01%)</title><rect x="58.1904%" y="533" width="0.0106%" height="15" fill="rgb(217,27,36)" fg:x="65857" fg:w="12"/><text x="58.4404%" y="543.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (17 samples, 0.02%)</title><rect x="58.2116%" y="645" width="0.0150%" height="15" fill="rgb(219,218,39)" fg:x="65881" fg:w="17"/><text x="58.4616%" y="655.50"></text></g><g><title>alloc::str::&lt;impl core::borrow::Borrow&lt;str&gt; for alloc::string::String&gt;::borrow (20 samples, 0.02%)</title><rect x="58.2478%" y="549" width="0.0177%" height="15" fill="rgb(219,4,42)" fg:x="65922" fg:w="20"/><text x="58.4978%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;core::ops::range::RangeFull&gt;&gt;::index (20 samples, 0.02%)</title><rect x="58.2478%" y="533" width="0.0177%" height="15" fill="rgb(249,119,36)" fg:x="65922" fg:w="20"/><text x="58.4978%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (20 samples, 0.02%)</title><rect x="58.2478%" y="517" width="0.0177%" height="15" fill="rgb(209,23,33)" fg:x="65922" fg:w="20"/><text x="58.4978%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (20 samples, 0.02%)</title><rect x="58.2478%" y="501" width="0.0177%" height="15" fill="rgb(211,10,0)" fg:x="65922" fg:w="20"/><text x="58.4978%" y="511.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (265 samples, 0.23%)</title><rect x="58.2266%" y="645" width="0.2342%" height="15" fill="rgb(208,99,37)" fg:x="65898" fg:w="265"/><text x="58.4766%" y="655.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (260 samples, 0.23%)</title><rect x="58.2311%" y="629" width="0.2297%" height="15" fill="rgb(213,132,31)" fg:x="65903" fg:w="260"/><text x="58.4811%" y="639.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (260 samples, 0.23%)</title><rect x="58.2311%" y="613" width="0.2297%" height="15" fill="rgb(243,129,40)" fg:x="65903" fg:w="260"/><text x="58.4811%" y="623.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_hash (260 samples, 0.23%)</title><rect x="58.2311%" y="597" width="0.2297%" height="15" fill="rgb(210,66,33)" fg:x="65903" fg:w="260"/><text x="58.4811%" y="607.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::search (260 samples, 0.23%)</title><rect x="58.2311%" y="581" width="0.2297%" height="15" fill="rgb(209,189,4)" fg:x="65903" fg:w="260"/><text x="58.4811%" y="591.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (241 samples, 0.21%)</title><rect x="58.2478%" y="565" width="0.2129%" height="15" fill="rgb(214,107,37)" fg:x="65922" fg:w="241"/><text x="58.4978%" y="575.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (221 samples, 0.20%)</title><rect x="58.2655%" y="549" width="0.1953%" height="15" fill="rgb(245,88,54)" fg:x="65942" fg:w="221"/><text x="58.5155%" y="559.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (221 samples, 0.20%)</title><rect x="58.2655%" y="533" width="0.1953%" height="15" fill="rgb(205,146,20)" fg:x="65942" fg:w="221"/><text x="58.5155%" y="543.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (221 samples, 0.20%)</title><rect x="58.2655%" y="517" width="0.1953%" height="15" fill="rgb(220,161,25)" fg:x="65942" fg:w="221"/><text x="58.5155%" y="527.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (221 samples, 0.20%)</title><rect x="58.2655%" y="501" width="0.1953%" height="15" fill="rgb(215,152,15)" fg:x="65942" fg:w="221"/><text x="58.5155%" y="511.50"></text></g><g><title>[libc-2.31.so] (169 samples, 0.15%)</title><rect x="58.3115%" y="485" width="0.1493%" height="15" fill="rgb(233,192,44)" fg:x="65994" fg:w="169"/><text x="58.5615%" y="495.50"></text></g><g><title>ahash::operations::folded_multiply (30 samples, 0.03%)</title><rect x="58.4652%" y="565" width="0.0265%" height="15" fill="rgb(240,170,46)" fg:x="66168" fg:w="30"/><text x="58.7152%" y="575.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (20 samples, 0.02%)</title><rect x="58.4740%" y="549" width="0.0177%" height="15" fill="rgb(207,104,33)" fg:x="66178" fg:w="20"/><text x="58.7240%" y="559.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (40 samples, 0.04%)</title><rect x="58.4652%" y="581" width="0.0353%" height="15" fill="rgb(219,21,39)" fg:x="66168" fg:w="40"/><text x="58.7152%" y="591.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (22 samples, 0.02%)</title><rect x="58.5226%" y="517" width="0.0194%" height="15" fill="rgb(214,133,29)" fg:x="66233" fg:w="22"/><text x="58.7726%" y="527.50"></text></g><g><title>ahash::operations::folded_multiply (17 samples, 0.02%)</title><rect x="58.5271%" y="501" width="0.0150%" height="15" fill="rgb(226,93,6)" fg:x="66238" fg:w="17"/><text x="58.7771%" y="511.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (13 samples, 0.01%)</title><rect x="58.5306%" y="485" width="0.0115%" height="15" fill="rgb(252,222,34)" fg:x="66242" fg:w="13"/><text x="58.7806%" y="495.50"></text></g><g><title>ahash::operations::read_small (13 samples, 0.01%)</title><rect x="58.5421%" y="517" width="0.0115%" height="15" fill="rgb(252,92,48)" fg:x="66255" fg:w="13"/><text x="58.7921%" y="527.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (58 samples, 0.05%)</title><rect x="58.5041%" y="533" width="0.0512%" height="15" fill="rgb(245,223,24)" fg:x="66212" fg:w="58"/><text x="58.7541%" y="543.50"></text></g><g><title>hashbrown::map::make_hash (130 samples, 0.11%)</title><rect x="58.4626%" y="597" width="0.1149%" height="15" fill="rgb(205,176,3)" fg:x="66165" fg:w="130"/><text x="58.7126%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (84 samples, 0.07%)</title><rect x="58.5032%" y="581" width="0.0742%" height="15" fill="rgb(235,151,15)" fg:x="66211" fg:w="84"/><text x="58.7532%" y="591.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (83 samples, 0.07%)</title><rect x="58.5041%" y="565" width="0.0733%" height="15" fill="rgb(237,209,11)" fg:x="66212" fg:w="83"/><text x="58.7541%" y="575.50"></text></g><g><title>core::hash::Hasher::write_str (83 samples, 0.07%)</title><rect x="58.5041%" y="549" width="0.0733%" height="15" fill="rgb(243,227,24)" fg:x="66212" fg:w="83"/><text x="58.7541%" y="559.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u8 (25 samples, 0.02%)</title><rect x="58.5553%" y="533" width="0.0221%" height="15" fill="rgb(239,193,16)" fg:x="66270" fg:w="25"/><text x="58.8053%" y="543.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (25 samples, 0.02%)</title><rect x="58.5553%" y="517" width="0.0221%" height="15" fill="rgb(231,27,9)" fg:x="66270" fg:w="25"/><text x="58.8053%" y="527.50"></text></g><g><title>ahash::operations::folded_multiply (13 samples, 0.01%)</title><rect x="58.5659%" y="501" width="0.0115%" height="15" fill="rgb(219,169,10)" fg:x="66282" fg:w="13"/><text x="58.8159%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.02%)</title><rect x="58.6163%" y="549" width="0.0168%" height="15" fill="rgb(244,229,43)" fg:x="66339" fg:w="19"/><text x="58.8663%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.02%)</title><rect x="58.6163%" y="565" width="0.0247%" height="15" fill="rgb(254,38,20)" fg:x="66339" fg:w="28"/><text x="58.8663%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;core::ops::range::RangeFull&gt;&gt;::index (18 samples, 0.02%)</title><rect x="58.6410%" y="533" width="0.0159%" height="15" fill="rgb(250,47,30)" fg:x="66367" fg:w="18"/><text x="58.8910%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (18 samples, 0.02%)</title><rect x="58.6410%" y="517" width="0.0159%" height="15" fill="rgb(224,124,36)" fg:x="66367" fg:w="18"/><text x="58.8910%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (18 samples, 0.02%)</title><rect x="58.6410%" y="501" width="0.0159%" height="15" fill="rgb(246,68,51)" fg:x="66367" fg:w="18"/><text x="58.8910%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (152 samples, 0.13%)</title><rect x="58.6410%" y="549" width="0.1343%" height="15" fill="rgb(253,43,49)" fg:x="66367" fg:w="152"/><text x="58.8910%" y="559.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (134 samples, 0.12%)</title><rect x="58.6569%" y="533" width="0.1184%" height="15" fill="rgb(219,54,36)" fg:x="66385" fg:w="134"/><text x="58.9069%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (134 samples, 0.12%)</title><rect x="58.6569%" y="517" width="0.1184%" height="15" fill="rgb(227,133,34)" fg:x="66385" fg:w="134"/><text x="58.9069%" y="527.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (134 samples, 0.12%)</title><rect x="58.6569%" y="501" width="0.1184%" height="15" fill="rgb(247,227,15)" fg:x="66385" fg:w="134"/><text x="58.9069%" y="511.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (134 samples, 0.12%)</title><rect x="58.6569%" y="485" width="0.1184%" height="15" fill="rgb(229,96,14)" fg:x="66385" fg:w="134"/><text x="58.9069%" y="495.50"></text></g><g><title>[libc-2.31.so] (41 samples, 0.04%)</title><rect x="58.7391%" y="469" width="0.0362%" height="15" fill="rgb(220,79,17)" fg:x="66478" fg:w="41"/><text x="58.9891%" y="479.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (265 samples, 0.23%)</title><rect x="58.6410%" y="565" width="0.2342%" height="15" fill="rgb(205,131,53)" fg:x="66367" fg:w="265"/><text x="58.8910%" y="575.50"></text></g><g><title>&lt;lru::KeyRef&lt;K&gt; as core::borrow::Borrow&lt;K&gt;&gt;::borrow (113 samples, 0.10%)</title><rect x="58.7753%" y="549" width="0.0998%" height="15" fill="rgb(209,50,29)" fg:x="66519" fg:w="113"/><text x="59.0253%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (616 samples, 0.54%)</title><rect x="58.4626%" y="629" width="0.5443%" height="15" fill="rgb(245,86,46)" fg:x="66165" fg:w="616"/><text x="58.7126%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (616 samples, 0.54%)</title><rect x="58.4626%" y="613" width="0.5443%" height="15" fill="rgb(235,66,46)" fg:x="66165" fg:w="616"/><text x="58.7126%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (486 samples, 0.43%)</title><rect x="58.5774%" y="597" width="0.4294%" height="15" fill="rgb(232,148,31)" fg:x="66295" fg:w="486"/><text x="58.8274%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (486 samples, 0.43%)</title><rect x="58.5774%" y="581" width="0.4294%" height="15" fill="rgb(217,149,8)" fg:x="66295" fg:w="486"/><text x="58.8274%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (149 samples, 0.13%)</title><rect x="58.8752%" y="565" width="0.1317%" height="15" fill="rgb(209,183,11)" fg:x="66632" fg:w="149"/><text x="59.1252%" y="575.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (149 samples, 0.13%)</title><rect x="58.8752%" y="549" width="0.1317%" height="15" fill="rgb(208,55,20)" fg:x="66632" fg:w="149"/><text x="59.1252%" y="559.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (149 samples, 0.13%)</title><rect x="58.8752%" y="533" width="0.1317%" height="15" fill="rgb(218,39,14)" fg:x="66632" fg:w="149"/><text x="59.1252%" y="543.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (141 samples, 0.12%)</title><rect x="58.8823%" y="517" width="0.1246%" height="15" fill="rgb(216,169,33)" fg:x="66640" fg:w="141"/><text x="59.1323%" y="527.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (141 samples, 0.12%)</title><rect x="58.8823%" y="501" width="0.1246%" height="15" fill="rgb(233,80,24)" fg:x="66640" fg:w="141"/><text x="59.1323%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (141 samples, 0.12%)</title><rect x="58.8823%" y="485" width="0.1246%" height="15" fill="rgb(213,179,31)" fg:x="66640" fg:w="141"/><text x="59.1323%" y="495.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::attach (49 samples, 0.04%)</title><rect x="59.0068%" y="629" width="0.0433%" height="15" fill="rgb(209,19,5)" fg:x="66781" fg:w="49"/><text x="59.2568%" y="639.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::get_mut (690 samples, 0.61%)</title><rect x="58.4608%" y="645" width="0.6097%" height="15" fill="rgb(219,18,35)" fg:x="66163" fg:w="690"/><text x="58.7108%" y="655.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::detach (23 samples, 0.02%)</title><rect x="59.0501%" y="629" width="0.0203%" height="15" fill="rgb(209,169,16)" fg:x="66830" fg:w="23"/><text x="59.3001%" y="639.50"></text></g><g><title>sn_rust_dealloc (24 samples, 0.02%)</title><rect x="59.0705%" y="645" width="0.0212%" height="15" fill="rgb(245,90,51)" fg:x="66853" fg:w="24"/><text x="59.3205%" y="655.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (98 samples, 0.09%)</title><rect x="59.2330%" y="437" width="0.0866%" height="15" fill="rgb(220,99,45)" fg:x="67037" fg:w="98"/><text x="59.4830%" y="447.50"></text></g><g><title>tremor_value::value::serialize::&lt;impl value_trait::Writable for tremor_value::value::Value&gt;::encode (272 samples, 0.24%)</title><rect x="59.0970%" y="645" width="0.2403%" height="15" fill="rgb(249,89,25)" fg:x="66883" fg:w="272"/><text x="59.3470%" y="655.50"></text></g><g><title>value_trait::generator::DumpGenerator&lt;VT&gt;::new (219 samples, 0.19%)</title><rect x="59.1438%" y="629" width="0.1935%" height="15" fill="rgb(239,193,0)" fg:x="66936" fg:w="219"/><text x="59.3938%" y="639.50"></text></g><g><title>&lt;value_trait::generator::DumpGenerator&lt;VT&gt; as core::default::Default&gt;::default (219 samples, 0.19%)</title><rect x="59.1438%" y="613" width="0.1935%" height="15" fill="rgb(231,126,1)" fg:x="66936" fg:w="219"/><text x="59.3938%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (208 samples, 0.18%)</title><rect x="59.1535%" y="597" width="0.1838%" height="15" fill="rgb(243,166,3)" fg:x="66947" fg:w="208"/><text x="59.4035%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (208 samples, 0.18%)</title><rect x="59.1535%" y="581" width="0.1838%" height="15" fill="rgb(223,22,34)" fg:x="66947" fg:w="208"/><text x="59.4035%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (208 samples, 0.18%)</title><rect x="59.1535%" y="565" width="0.1838%" height="15" fill="rgb(251,52,51)" fg:x="66947" fg:w="208"/><text x="59.4035%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (208 samples, 0.18%)</title><rect x="59.1535%" y="549" width="0.1838%" height="15" fill="rgb(221,165,28)" fg:x="66947" fg:w="208"/><text x="59.4035%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (208 samples, 0.18%)</title><rect x="59.1535%" y="533" width="0.1838%" height="15" fill="rgb(218,121,47)" fg:x="66947" fg:w="208"/><text x="59.4035%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (208 samples, 0.18%)</title><rect x="59.1535%" y="517" width="0.1838%" height="15" fill="rgb(209,120,9)" fg:x="66947" fg:w="208"/><text x="59.4035%" y="527.50"></text></g><g><title>alloc::alloc::alloc (203 samples, 0.18%)</title><rect x="59.1579%" y="501" width="0.1794%" height="15" fill="rgb(236,68,12)" fg:x="66952" fg:w="203"/><text x="59.4079%" y="511.50"></text></g><g><title>__rg_alloc (203 samples, 0.18%)</title><rect x="59.1579%" y="485" width="0.1794%" height="15" fill="rgb(225,194,26)" fg:x="66952" fg:w="203"/><text x="59.4079%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (203 samples, 0.18%)</title><rect x="59.1579%" y="469" width="0.1794%" height="15" fill="rgb(231,84,39)" fg:x="66952" fg:w="203"/><text x="59.4079%" y="479.50"></text></g><g><title>sn_rust_alloc (201 samples, 0.18%)</title><rect x="59.1597%" y="453" width="0.1776%" height="15" fill="rgb(210,11,45)" fg:x="66954" fg:w="201"/><text x="59.4097%" y="463.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (20 samples, 0.02%)</title><rect x="59.3196%" y="437" width="0.0177%" height="15" fill="rgb(224,54,52)" fg:x="67135" fg:w="20"/><text x="59.5696%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="59.3620%" y="549" width="0.0115%" height="15" fill="rgb(238,102,14)" fg:x="67183" fg:w="13"/><text x="59.6120%" y="559.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (44 samples, 0.04%)</title><rect x="59.3576%" y="565" width="0.0389%" height="15" fill="rgb(243,160,52)" fg:x="67178" fg:w="44"/><text x="59.6076%" y="575.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (26 samples, 0.02%)</title><rect x="59.3735%" y="549" width="0.0230%" height="15" fill="rgb(216,114,19)" fg:x="67196" fg:w="26"/><text x="59.6235%" y="559.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (26 samples, 0.02%)</title><rect x="59.3735%" y="533" width="0.0230%" height="15" fill="rgb(244,166,37)" fg:x="67196" fg:w="26"/><text x="59.6235%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (26 samples, 0.02%)</title><rect x="59.3735%" y="517" width="0.0230%" height="15" fill="rgb(246,29,44)" fg:x="67196" fg:w="26"/><text x="59.6235%" y="527.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (26 samples, 0.02%)</title><rect x="59.3735%" y="501" width="0.0230%" height="15" fill="rgb(215,56,53)" fg:x="67196" fg:w="26"/><text x="59.6235%" y="511.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (26 samples, 0.02%)</title><rect x="59.3735%" y="485" width="0.0230%" height="15" fill="rgb(217,60,2)" fg:x="67196" fg:w="26"/><text x="59.6235%" y="495.50"></text></g><g><title>value_trait::ValueAccess::get (70 samples, 0.06%)</title><rect x="59.3373%" y="645" width="0.0619%" height="15" fill="rgb(207,26,24)" fg:x="67155" fg:w="70"/><text x="59.5873%" y="655.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (60 samples, 0.05%)</title><rect x="59.3461%" y="629" width="0.0530%" height="15" fill="rgb(252,210,15)" fg:x="67165" fg:w="60"/><text x="59.5961%" y="639.50"></text></g><g><title>value_trait::ValueAccess::get::{{closure}} (53 samples, 0.05%)</title><rect x="59.3523%" y="613" width="0.0468%" height="15" fill="rgb(253,209,26)" fg:x="67172" fg:w="53"/><text x="59.6023%" y="623.50"></text></g><g><title>&lt;halfbrown::HashMap&lt;MapK,MapE&gt; as value_trait::object::Object&gt;::get (53 samples, 0.05%)</title><rect x="59.3523%" y="597" width="0.0468%" height="15" fill="rgb(238,170,14)" fg:x="67172" fg:w="53"/><text x="59.6023%" y="607.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (53 samples, 0.05%)</title><rect x="59.3523%" y="581" width="0.0468%" height="15" fill="rgb(216,178,15)" fg:x="67172" fg:w="53"/><text x="59.6023%" y="591.50"></text></g><g><title>value_trait::ValueAccess::get_str (164 samples, 0.14%)</title><rect x="59.3992%" y="645" width="0.1449%" height="15" fill="rgb(250,197,2)" fg:x="67225" fg:w="164"/><text x="59.6492%" y="655.50"></text></g><g><title>value_trait::ValueAccess::get (151 samples, 0.13%)</title><rect x="59.4106%" y="629" width="0.1334%" height="15" fill="rgb(212,70,42)" fg:x="67238" fg:w="151"/><text x="59.6606%" y="639.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (142 samples, 0.13%)</title><rect x="59.4186%" y="613" width="0.1255%" height="15" fill="rgb(227,213,9)" fg:x="67247" fg:w="142"/><text x="59.6686%" y="623.50"></text></g><g><title>value_trait::ValueAccess::get::{{closure}} (142 samples, 0.13%)</title><rect x="59.4186%" y="597" width="0.1255%" height="15" fill="rgb(245,99,25)" fg:x="67247" fg:w="142"/><text x="59.6686%" y="607.50"></text></g><g><title>&lt;halfbrown::HashMap&lt;MapK,MapE&gt; as value_trait::object::Object&gt;::get (142 samples, 0.13%)</title><rect x="59.4186%" y="581" width="0.1255%" height="15" fill="rgb(250,82,29)" fg:x="67247" fg:w="142"/><text x="59.6686%" y="591.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (142 samples, 0.13%)</title><rect x="59.4186%" y="565" width="0.1255%" height="15" fill="rgb(241,226,54)" fg:x="67247" fg:w="142"/><text x="59.6686%" y="575.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (120 samples, 0.11%)</title><rect x="59.4380%" y="549" width="0.1060%" height="15" fill="rgb(221,99,41)" fg:x="67269" fg:w="120"/><text x="59.6880%" y="559.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (103 samples, 0.09%)</title><rect x="59.4531%" y="533" width="0.0910%" height="15" fill="rgb(213,90,21)" fg:x="67286" fg:w="103"/><text x="59.7031%" y="543.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (103 samples, 0.09%)</title><rect x="59.4531%" y="517" width="0.0910%" height="15" fill="rgb(205,208,24)" fg:x="67286" fg:w="103"/><text x="59.7031%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (103 samples, 0.09%)</title><rect x="59.4531%" y="501" width="0.0910%" height="15" fill="rgb(246,31,12)" fg:x="67286" fg:w="103"/><text x="59.7031%" y="511.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (103 samples, 0.09%)</title><rect x="59.4531%" y="485" width="0.0910%" height="15" fill="rgb(213,154,6)" fg:x="67286" fg:w="103"/><text x="59.7031%" y="495.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (103 samples, 0.09%)</title><rect x="59.4531%" y="469" width="0.0910%" height="15" fill="rgb(222,163,29)" fg:x="67286" fg:w="103"/><text x="59.7031%" y="479.50"></text></g><g><title>[libc-2.31.so] (83 samples, 0.07%)</title><rect x="59.4707%" y="453" width="0.0733%" height="15" fill="rgb(227,201,8)" fg:x="67306" fg:w="83"/><text x="59.7207%" y="463.50"></text></g><g><title>&lt;u64 as core::ops::arith::Add&gt;::add (45 samples, 0.04%)</title><rect x="59.5838%" y="597" width="0.0398%" height="15" fill="rgb(233,9,32)" fg:x="67434" fg:w="45"/><text x="59.8338%" y="607.50"></text></g><g><title>window::SlidingWindow&lt;T&gt;::add (61 samples, 0.05%)</title><rect x="59.5732%" y="613" width="0.0539%" height="15" fill="rgb(217,54,24)" fg:x="67422" fg:w="61"/><text x="59.8232%" y="623.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (2,619 samples, 2.31%)</title><rect x="57.3148%" y="677" width="2.3141%" height="15" fill="rgb(235,192,0)" fg:x="64866" fg:w="2619"/><text x="57.5648%" y="687.50">&lt;..</text></g><g><title>&lt;tremor_pipeline::op::grouper::bucket::Grouper as tremor_pipeline::op::Operator&gt;::on_event (2,619 samples, 2.31%)</title><rect x="57.3148%" y="661" width="2.3141%" height="15" fill="rgb(235,45,9)" fg:x="64866" fg:w="2619"/><text x="57.5648%" y="671.50">&lt;..</text></g><g><title>window::TimeWindow::inc_t (96 samples, 0.08%)</title><rect x="59.5441%" y="645" width="0.0848%" height="15" fill="rgb(246,42,40)" fg:x="67389" fg:w="96"/><text x="59.7941%" y="655.50"></text></g><g><title>window::TimeWindow::add_t (93 samples, 0.08%)</title><rect x="59.5467%" y="629" width="0.0822%" height="15" fill="rgb(248,111,24)" fg:x="67392" fg:w="93"/><text x="59.7967%" y="639.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (63 samples, 0.06%)</title><rect x="59.6536%" y="629" width="0.0557%" height="15" fill="rgb(249,65,22)" fg:x="67513" fg:w="63"/><text x="59.9036%" y="639.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (2,723 samples, 2.41%)</title><rect x="57.3148%" y="741" width="2.4060%" height="15" fill="rgb(238,111,51)" fg:x="64866" fg:w="2723"/><text x="57.5648%" y="751.50">tr..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (2,723 samples, 2.41%)</title><rect x="57.3148%" y="725" width="2.4060%" height="15" fill="rgb(250,118,22)" fg:x="64866" fg:w="2723"/><text x="57.5648%" y="735.50">tr..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (2,723 samples, 2.41%)</title><rect x="57.3148%" y="709" width="2.4060%" height="15" fill="rgb(234,84,26)" fg:x="64866" fg:w="2723"/><text x="57.5648%" y="719.50">tr..</text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (2,723 samples, 2.41%)</title><rect x="57.3148%" y="693" width="2.4060%" height="15" fill="rgb(243,172,12)" fg:x="64866" fg:w="2723"/><text x="57.5648%" y="703.50">&lt;t..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (104 samples, 0.09%)</title><rect x="59.6289%" y="677" width="0.0919%" height="15" fill="rgb(236,150,49)" fg:x="67485" fg:w="104"/><text x="59.8789%" y="687.50"></text></g><g><title>tremor_script::srs::EventPayload::rent_mut (104 samples, 0.09%)</title><rect x="59.6289%" y="661" width="0.0919%" height="15" fill="rgb(225,197,26)" fg:x="67485" fg:w="104"/><text x="59.8789%" y="671.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (99 samples, 0.09%)</title><rect x="59.6333%" y="645" width="0.0875%" height="15" fill="rgb(214,17,42)" fg:x="67490" fg:w="99"/><text x="59.8833%" y="655.50"></text></g><g><title>tremor_script::script::Script::run (13 samples, 0.01%)</title><rect x="59.7093%" y="629" width="0.0115%" height="15" fill="rgb(224,165,40)" fg:x="67576" fg:w="13"/><text x="59.9593%" y="639.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (6,049 samples, 5.34%)</title><rect x="54.3769%" y="949" width="5.3448%" height="15" fill="rgb(246,100,4)" fg:x="61541" fg:w="6049"/><text x="54.6269%" y="959.50">async_t..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (6,048 samples, 5.34%)</title><rect x="54.3777%" y="933" width="5.3439%" height="15" fill="rgb(222,103,0)" fg:x="61542" fg:w="6048"/><text x="54.6277%" y="943.50">&lt;core::..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,048 samples, 5.34%)</title><rect x="54.3777%" y="917" width="5.3439%" height="15" fill="rgb(227,189,26)" fg:x="61542" fg:w="6048"/><text x="54.6277%" y="927.50">&lt;core::..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (6,048 samples, 5.34%)</title><rect x="54.3777%" y="901" width="5.3439%" height="15" fill="rgb(214,202,17)" fg:x="61542" fg:w="6048"/><text x="54.6277%" y="911.50">async_e..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (6,048 samples, 5.34%)</title><rect x="54.3777%" y="885" width="5.3439%" height="15" fill="rgb(229,111,3)" fg:x="61542" fg:w="6048"/><text x="54.6277%" y="895.50">&lt;async_..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (6,048 samples, 5.34%)</title><rect x="54.3777%" y="869" width="5.3439%" height="15" fill="rgb(229,172,15)" fg:x="61542" fg:w="6048"/><text x="54.6277%" y="879.50">async_s..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (6,048 samples, 5.34%)</title><rect x="54.3777%" y="853" width="5.3439%" height="15" fill="rgb(230,224,35)" fg:x="61542" fg:w="6048"/><text x="54.6277%" y="863.50">std::th..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (6,048 samples, 5.34%)</title><rect x="54.3777%" y="837" width="5.3439%" height="15" fill="rgb(251,141,6)" fg:x="61542" fg:w="6048"/><text x="54.6277%" y="847.50">std::th..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (6,048 samples, 5.34%)</title><rect x="54.3777%" y="821" width="5.3439%" height="15" fill="rgb(225,208,6)" fg:x="61542" fg:w="6048"/><text x="54.6277%" y="831.50">async_s..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (6,048 samples, 5.34%)</title><rect x="54.3777%" y="805" width="5.3439%" height="15" fill="rgb(246,181,16)" fg:x="61542" fg:w="6048"/><text x="54.6277%" y="815.50">&lt;async_..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,048 samples, 5.34%)</title><rect x="54.3777%" y="789" width="5.3439%" height="15" fill="rgb(227,129,36)" fg:x="61542" fg:w="6048"/><text x="54.6277%" y="799.50">&lt;core::..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (3,888 samples, 3.44%)</title><rect x="56.2863%" y="773" width="3.4354%" height="15" fill="rgb(248,117,24)" fg:x="63702" fg:w="3888"/><text x="56.5363%" y="783.50">tre..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,724 samples, 2.41%)</title><rect x="57.3148%" y="757" width="2.4069%" height="15" fill="rgb(214,185,35)" fg:x="64866" fg:w="2724"/><text x="57.5648%" y="767.50">&lt;c..</text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (17 samples, 0.02%)</title><rect x="59.7420%" y="949" width="0.0150%" height="15" fill="rgb(236,150,34)" fg:x="67613" fg:w="17"/><text x="59.9920%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (41 samples, 0.04%)</title><rect x="59.7897%" y="949" width="0.0362%" height="15" fill="rgb(243,228,27)" fg:x="67667" fg:w="41"/><text x="60.0397%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::vecmap::VecMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (27 samples, 0.02%)</title><rect x="59.8021%" y="933" width="0.0239%" height="15" fill="rgb(245,77,44)" fg:x="67681" fg:w="27"/><text x="60.0521%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)&gt;&gt; (27 samples, 0.02%)</title><rect x="59.8021%" y="917" width="0.0239%" height="15" fill="rgb(235,214,42)" fg:x="67681" fg:w="27"/><text x="60.0521%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.02%)</title><rect x="59.8021%" y="901" width="0.0239%" height="15" fill="rgb(221,74,3)" fg:x="67681" fg:w="27"/><text x="60.0521%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)]&gt; (27 samples, 0.02%)</title><rect x="59.8021%" y="885" width="0.0239%" height="15" fill="rgb(206,121,29)" fg:x="67681" fg:w="27"/><text x="60.0521%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)&gt; (27 samples, 0.02%)</title><rect x="59.8021%" y="869" width="0.0239%" height="15" fill="rgb(249,131,53)" fg:x="67681" fg:w="27"/><text x="60.0521%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (15 samples, 0.01%)</title><rect x="59.8259%" y="949" width="0.0133%" height="15" fill="rgb(236,170,29)" fg:x="67708" fg:w="15"/><text x="60.0759%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (22 samples, 0.02%)</title><rect x="59.8445%" y="949" width="0.0194%" height="15" fill="rgb(247,96,15)" fg:x="67729" fg:w="22"/><text x="60.0945%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (15 samples, 0.01%)</title><rect x="59.8507%" y="933" width="0.0133%" height="15" fill="rgb(211,210,7)" fg:x="67736" fg:w="15"/><text x="60.1007%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (177 samples, 0.16%)</title><rect x="59.8719%" y="933" width="0.1564%" height="15" fill="rgb(240,88,50)" fg:x="67760" fg:w="177"/><text x="60.1219%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tremor_value::value::Value]&gt; (20 samples, 0.02%)</title><rect x="60.0106%" y="917" width="0.0177%" height="15" fill="rgb(209,229,26)" fg:x="67917" fg:w="20"/><text x="60.2606%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (187 samples, 0.17%)</title><rect x="59.8639%" y="949" width="0.1652%" height="15" fill="rgb(210,68,23)" fg:x="67751" fg:w="187"/><text x="60.1139%" y="959.50"></text></g><g><title>core::str::converts::from_utf8 (160 samples, 0.14%)</title><rect x="60.0292%" y="949" width="0.1414%" height="15" fill="rgb(229,180,13)" fg:x="67938" fg:w="160"/><text x="60.2792%" y="959.50"></text></g><g><title>event_listener::Event::notify (41 samples, 0.04%)</title><rect x="60.1714%" y="949" width="0.0362%" height="15" fill="rgb(236,53,44)" fg:x="68099" fg:w="41"/><text x="60.4214%" y="959.50"></text></g><g><title>event_listener::full_fence (17 samples, 0.02%)</title><rect x="60.1926%" y="933" width="0.0150%" height="15" fill="rgb(244,214,29)" fg:x="68123" fg:w="17"/><text x="60.4426%" y="943.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::insert (82 samples, 0.07%)</title><rect x="60.2085%" y="949" width="0.0725%" height="15" fill="rgb(220,75,29)" fg:x="68141" fg:w="82"/><text x="60.4585%" y="959.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (79 samples, 0.07%)</title><rect x="60.2810%" y="949" width="0.0698%" height="15" fill="rgb(214,183,37)" fg:x="68223" fg:w="79"/><text x="60.5310%" y="959.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (12 samples, 0.01%)</title><rect x="60.3402%" y="933" width="0.0106%" height="15" fill="rgb(239,117,29)" fg:x="68290" fg:w="12"/><text x="60.5902%" y="943.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (12 samples, 0.01%)</title><rect x="60.3402%" y="917" width="0.0106%" height="15" fill="rgb(237,171,35)" fg:x="68290" fg:w="12"/><text x="60.5902%" y="927.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_hash (12 samples, 0.01%)</title><rect x="60.3402%" y="901" width="0.0106%" height="15" fill="rgb(229,178,53)" fg:x="68290" fg:w="12"/><text x="60.5902%" y="911.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::search (12 samples, 0.01%)</title><rect x="60.3402%" y="885" width="0.0106%" height="15" fill="rgb(210,102,19)" fg:x="68290" fg:w="12"/><text x="60.5902%" y="895.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (12 samples, 0.01%)</title><rect x="60.3402%" y="869" width="0.0106%" height="15" fill="rgb(235,127,22)" fg:x="68290" fg:w="12"/><text x="60.5902%" y="879.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (12 samples, 0.01%)</title><rect x="60.3402%" y="853" width="0.0106%" height="15" fill="rgb(244,31,31)" fg:x="68290" fg:w="12"/><text x="60.5902%" y="863.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (12 samples, 0.01%)</title><rect x="60.3402%" y="837" width="0.0106%" height="15" fill="rgb(231,43,21)" fg:x="68290" fg:w="12"/><text x="60.5902%" y="847.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (12 samples, 0.01%)</title><rect x="60.3402%" y="821" width="0.0106%" height="15" fill="rgb(217,131,35)" fg:x="68290" fg:w="12"/><text x="60.5902%" y="831.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (12 samples, 0.01%)</title><rect x="60.3402%" y="805" width="0.0106%" height="15" fill="rgb(221,149,4)" fg:x="68290" fg:w="12"/><text x="60.5902%" y="815.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (12 samples, 0.01%)</title><rect x="60.3402%" y="789" width="0.0106%" height="15" fill="rgb(232,170,28)" fg:x="68290" fg:w="12"/><text x="60.5902%" y="799.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (12 samples, 0.01%)</title><rect x="60.3402%" y="773" width="0.0106%" height="15" fill="rgb(238,56,10)" fg:x="68290" fg:w="12"/><text x="60.5902%" y="783.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (15 samples, 0.01%)</title><rect x="60.3508%" y="949" width="0.0133%" height="15" fill="rgb(235,196,14)" fg:x="68302" fg:w="15"/><text x="60.6008%" y="959.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::get_mut (23 samples, 0.02%)</title><rect x="60.3640%" y="949" width="0.0203%" height="15" fill="rgb(216,45,48)" fg:x="68317" fg:w="23"/><text x="60.6140%" y="959.50"></text></g><g><title>parking::Inner::park (16 samples, 0.01%)</title><rect x="60.3844%" y="949" width="0.0141%" height="15" fill="rgb(238,213,17)" fg:x="68340" fg:w="16"/><text x="60.6344%" y="959.50"></text></g><g><title>polling::epoll::Poller::wait (31 samples, 0.03%)</title><rect x="60.4073%" y="949" width="0.0274%" height="15" fill="rgb(212,13,2)" fg:x="68366" fg:w="31"/><text x="60.6573%" y="959.50"></text></g><g><title>rmp::encode::str::write_str (61 samples, 0.05%)</title><rect x="60.4347%" y="949" width="0.0539%" height="15" fill="rgb(240,114,20)" fg:x="68397" fg:w="61"/><text x="60.6847%" y="959.50"></text></g><g><title>rmp::encode::write_marker (55 samples, 0.05%)</title><rect x="60.5063%" y="949" width="0.0486%" height="15" fill="rgb(228,41,40)" fg:x="68478" fg:w="55"/><text x="60.7563%" y="959.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (116 samples, 0.10%)</title><rect x="60.5549%" y="949" width="0.1025%" height="15" fill="rgb(244,132,35)" fg:x="68533" fg:w="116"/><text x="60.8049%" y="959.50"></text></g><g><title>sn_rust_alloc (75 samples, 0.07%)</title><rect x="60.6574%" y="949" width="0.0663%" height="15" fill="rgb(253,189,4)" fg:x="68649" fg:w="75"/><text x="60.9074%" y="959.50"></text></g><g><title>sn_rust_dealloc (26 samples, 0.02%)</title><rect x="60.7237%" y="949" width="0.0230%" height="15" fill="rgb(224,37,19)" fg:x="68724" fg:w="26"/><text x="60.9737%" y="959.50"></text></g><g><title>sn_rust_realloc (17 samples, 0.02%)</title><rect x="60.7466%" y="949" width="0.0150%" height="15" fill="rgb(235,223,18)" fg:x="68750" fg:w="17"/><text x="60.9966%" y="959.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (30 samples, 0.03%)</title><rect x="60.7723%" y="949" width="0.0265%" height="15" fill="rgb(235,163,25)" fg:x="68779" fg:w="30"/><text x="61.0223%" y="959.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (184 samples, 0.16%)</title><rect x="60.8032%" y="725" width="0.1626%" height="15" fill="rgb(217,145,28)" fg:x="68814" fg:w="184"/><text x="61.0532%" y="735.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (25 samples, 0.02%)</title><rect x="60.9658%" y="725" width="0.0221%" height="15" fill="rgb(223,223,32)" fg:x="68998" fg:w="25"/><text x="61.2158%" y="735.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (105 samples, 0.09%)</title><rect x="61.3669%" y="597" width="0.0928%" height="15" fill="rgb(227,189,39)" fg:x="69452" fg:w="105"/><text x="61.6169%" y="607.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for &amp;str&gt;::deserialize (105 samples, 0.09%)</title><rect x="61.3669%" y="581" width="0.0928%" height="15" fill="rgb(248,10,22)" fg:x="69452" fg:w="105"/><text x="61.6169%" y="591.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_str (105 samples, 0.09%)</title><rect x="61.3669%" y="565" width="0.0928%" height="15" fill="rgb(248,46,39)" fg:x="69452" fg:w="105"/><text x="61.6169%" y="575.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (52 samples, 0.05%)</title><rect x="61.4137%" y="549" width="0.0459%" height="15" fill="rgb(248,113,48)" fg:x="69505" fg:w="52"/><text x="61.6637%" y="559.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_key (218 samples, 0.19%)</title><rect x="61.3634%" y="645" width="0.1926%" height="15" fill="rgb(245,16,25)" fg:x="69448" fg:w="218"/><text x="61.6134%" y="655.50"></text></g><g><title>serde::de::MapAccess::next_key (218 samples, 0.19%)</title><rect x="61.3634%" y="629" width="0.1926%" height="15" fill="rgb(249,152,16)" fg:x="69448" fg:w="218"/><text x="61.6134%" y="639.50"></text></g><g><title>&lt;rmp_serde::decode::MapAccess&lt;R,C&gt; as serde::de::MapAccess&gt;::next_key_seed (218 samples, 0.19%)</title><rect x="61.3634%" y="613" width="0.1926%" height="15" fill="rgb(250,16,1)" fg:x="69448" fg:w="218"/><text x="61.6134%" y="623.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (109 samples, 0.10%)</title><rect x="61.4597%" y="597" width="0.0963%" height="15" fill="rgb(249,138,3)" fg:x="69557" fg:w="109"/><text x="61.7097%" y="607.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_value (42 samples, 0.04%)</title><rect x="61.5560%" y="645" width="0.0371%" height="15" fill="rgb(227,71,41)" fg:x="69666" fg:w="42"/><text x="61.8060%" y="655.50"></text></g><g><title>serde::de::MapAccess::next_value (42 samples, 0.04%)</title><rect x="61.5560%" y="629" width="0.0371%" height="15" fill="rgb(209,184,23)" fg:x="69666" fg:w="42"/><text x="61.8060%" y="639.50"></text></g><g><title>&lt;rmp_serde::decode::MapAccess&lt;R,C&gt; as serde::de::MapAccess&gt;::next_value_seed (42 samples, 0.04%)</title><rect x="61.5560%" y="613" width="0.0371%" height="15" fill="rgb(223,215,31)" fg:x="69666" fg:w="42"/><text x="61.8060%" y="623.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (42 samples, 0.04%)</title><rect x="61.5560%" y="597" width="0.0371%" height="15" fill="rgb(210,146,28)" fg:x="69666" fg:w="42"/><text x="61.8060%" y="607.50"></text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (42 samples, 0.04%)</title><rect x="61.5560%" y="581" width="0.0371%" height="15" fill="rgb(209,183,41)" fg:x="69666" fg:w="42"/><text x="61.8060%" y="591.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (42 samples, 0.04%)</title><rect x="61.5560%" y="565" width="0.0371%" height="15" fill="rgb(209,224,45)" fg:x="69666" fg:w="42"/><text x="61.8060%" y="575.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (771 samples, 0.68%)</title><rect x="61.5949%" y="645" width="0.6812%" height="15" fill="rgb(224,209,51)" fg:x="69710" fg:w="771"/><text x="61.8449%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;tremor_value::value::Value&gt;&gt; (53 samples, 0.05%)</title><rect x="62.2761%" y="645" width="0.0468%" height="15" fill="rgb(223,17,39)" fg:x="70481" fg:w="53"/><text x="62.5261%" y="655.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::insert (37 samples, 0.03%)</title><rect x="62.3230%" y="645" width="0.0327%" height="15" fill="rgb(234,204,37)" fg:x="70534" fg:w="37"/><text x="62.5730%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (119 samples, 0.11%)</title><rect x="62.3645%" y="549" width="0.1051%" height="15" fill="rgb(236,120,5)" fg:x="70581" fg:w="119"/><text x="62.6145%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (119 samples, 0.11%)</title><rect x="62.3645%" y="533" width="0.1051%" height="15" fill="rgb(248,97,27)" fg:x="70581" fg:w="119"/><text x="62.6145%" y="543.50"></text></g><g><title>alloc::alloc::alloc (119 samples, 0.11%)</title><rect x="62.3645%" y="517" width="0.1051%" height="15" fill="rgb(240,66,17)" fg:x="70581" fg:w="119"/><text x="62.6145%" y="527.50"></text></g><g><title>__rg_alloc (119 samples, 0.11%)</title><rect x="62.3645%" y="501" width="0.1051%" height="15" fill="rgb(210,79,3)" fg:x="70581" fg:w="119"/><text x="62.6145%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (119 samples, 0.11%)</title><rect x="62.3645%" y="485" width="0.1051%" height="15" fill="rgb(214,176,27)" fg:x="70581" fg:w="119"/><text x="62.6145%" y="495.50"></text></g><g><title>sn_rust_alloc (119 samples, 0.11%)</title><rect x="62.3645%" y="469" width="0.1051%" height="15" fill="rgb(235,185,3)" fg:x="70581" fg:w="119"/><text x="62.6145%" y="479.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (22 samples, 0.02%)</title><rect x="62.4502%" y="453" width="0.0194%" height="15" fill="rgb(227,24,12)" fg:x="70678" fg:w="22"/><text x="62.7002%" y="463.50"></text></g><g><title>halfbrown::HashMap&lt;K,V&gt;::with_capacity (132 samples, 0.12%)</title><rect x="62.3556%" y="645" width="0.1166%" height="15" fill="rgb(252,169,48)" fg:x="70571" fg:w="132"/><text x="62.6056%" y="655.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V&gt;::with_capacity (128 samples, 0.11%)</title><rect x="62.3592%" y="629" width="0.1131%" height="15" fill="rgb(212,65,1)" fg:x="70575" fg:w="128"/><text x="62.6092%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (128 samples, 0.11%)</title><rect x="62.3592%" y="613" width="0.1131%" height="15" fill="rgb(242,39,24)" fg:x="70575" fg:w="128"/><text x="62.6092%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (128 samples, 0.11%)</title><rect x="62.3592%" y="597" width="0.1131%" height="15" fill="rgb(249,32,23)" fg:x="70575" fg:w="128"/><text x="62.6092%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (128 samples, 0.11%)</title><rect x="62.3592%" y="581" width="0.1131%" height="15" fill="rgb(251,195,23)" fg:x="70575" fg:w="128"/><text x="62.6092%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (128 samples, 0.11%)</title><rect x="62.3592%" y="565" width="0.1131%" height="15" fill="rgb(236,174,8)" fg:x="70575" fg:w="128"/><text x="62.6092%" y="575.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_map (1,710 samples, 1.51%)</title><rect x="61.0161%" y="661" width="1.5109%" height="15" fill="rgb(220,197,8)" fg:x="69055" fg:w="1710"/><text x="61.2661%" y="671.50"></text></g><g><title>tremor_value::value::from::&lt;impl core::convert::From&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; for tremor_value::value::Value&gt;::from (62 samples, 0.05%)</title><rect x="62.4723%" y="645" width="0.0548%" height="15" fill="rgb(240,108,37)" fg:x="70703" fg:w="62"/><text x="62.7223%" y="655.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (59 samples, 0.05%)</title><rect x="62.4749%" y="629" width="0.0521%" height="15" fill="rgb(232,176,24)" fg:x="70706" fg:w="59"/><text x="62.7249%" y="639.50"></text></g><g><title>alloc::alloc::exchange_malloc (27 samples, 0.02%)</title><rect x="62.5032%" y="613" width="0.0239%" height="15" fill="rgb(243,35,29)" fg:x="70738" fg:w="27"/><text x="62.7532%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (27 samples, 0.02%)</title><rect x="62.5032%" y="597" width="0.0239%" height="15" fill="rgb(210,37,18)" fg:x="70738" fg:w="27"/><text x="62.7532%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (27 samples, 0.02%)</title><rect x="62.5032%" y="581" width="0.0239%" height="15" fill="rgb(224,184,40)" fg:x="70738" fg:w="27"/><text x="62.7532%" y="591.50"></text></g><g><title>alloc::alloc::alloc (27 samples, 0.02%)</title><rect x="62.5032%" y="565" width="0.0239%" height="15" fill="rgb(236,39,29)" fg:x="70738" fg:w="27"/><text x="62.7532%" y="575.50"></text></g><g><title>__rg_alloc (27 samples, 0.02%)</title><rect x="62.5032%" y="549" width="0.0239%" height="15" fill="rgb(232,48,39)" fg:x="70738" fg:w="27"/><text x="62.7532%" y="559.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (27 samples, 0.02%)</title><rect x="62.5032%" y="533" width="0.0239%" height="15" fill="rgb(236,34,42)" fg:x="70738" fg:w="27"/><text x="62.7532%" y="543.50"></text></g><g><title>sn_rust_alloc (24 samples, 0.02%)</title><rect x="62.5059%" y="517" width="0.0212%" height="15" fill="rgb(243,106,37)" fg:x="70741" fg:w="24"/><text x="62.7559%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (16 samples, 0.01%)</title><rect x="62.5271%" y="645" width="0.0141%" height="15" fill="rgb(218,96,6)" fg:x="70765" fg:w="16"/><text x="62.7771%" y="655.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker::{{closure}} (13 samples, 0.01%)</title><rect x="62.5297%" y="629" width="0.0115%" height="15" fill="rgb(235,130,12)" fg:x="70768" fg:w="13"/><text x="62.7797%" y="639.50"></text></g><g><title>rmp::decode::read_marker (13 samples, 0.01%)</title><rect x="62.5297%" y="613" width="0.0115%" height="15" fill="rgb(231,95,0)" fg:x="70768" fg:w="13"/><text x="62.7797%" y="623.50"></text></g><g><title>&lt;tremor_runtime::codec::msgpack::MsgPack as tremor_runtime::codec::Codec&gt;::decode (2,027 samples, 1.79%)</title><rect x="60.8032%" y="741" width="1.7910%" height="15" fill="rgb(228,12,23)" fg:x="68814" fg:w="2027"/><text x="61.0532%" y="751.50">&lt;..</text></g><g><title>rmp_serde::decode::from_slice (1,818 samples, 1.61%)</title><rect x="60.9879%" y="725" width="1.6064%" height="15" fill="rgb(216,12,1)" fg:x="69023" fg:w="1818"/><text x="61.2379%" y="735.50"></text></g><g><title>rmp_serde::decode::from_read_ref (1,818 samples, 1.61%)</title><rect x="60.9879%" y="709" width="1.6064%" height="15" fill="rgb(219,59,3)" fg:x="69023" fg:w="1818"/><text x="61.2379%" y="719.50"></text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (1,811 samples, 1.60%)</title><rect x="60.9940%" y="693" width="1.6002%" height="15" fill="rgb(215,208,46)" fg:x="69030" fg:w="1811"/><text x="61.2440%" y="703.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (1,811 samples, 1.60%)</title><rect x="60.9940%" y="677" width="1.6002%" height="15" fill="rgb(254,224,29)" fg:x="69030" fg:w="1811"/><text x="61.2440%" y="687.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker (76 samples, 0.07%)</title><rect x="62.5271%" y="661" width="0.0672%" height="15" fill="rgb(232,14,29)" fg:x="70765" fg:w="76"/><text x="62.7771%" y="671.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (60 samples, 0.05%)</title><rect x="62.5412%" y="645" width="0.0530%" height="15" fill="rgb(208,45,52)" fg:x="70781" fg:w="60"/><text x="62.7912%" y="655.50"></text></g><g><title>core::mem::replace (60 samples, 0.05%)</title><rect x="62.5412%" y="629" width="0.0530%" height="15" fill="rgb(234,191,28)" fg:x="70781" fg:w="60"/><text x="62.7912%" y="639.50"></text></g><g><title>core::ptr::read (60 samples, 0.05%)</title><rect x="62.5412%" y="613" width="0.0530%" height="15" fill="rgb(244,67,43)" fg:x="70781" fg:w="60"/><text x="62.7912%" y="623.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,076 samples, 1.83%)</title><rect x="60.8023%" y="853" width="1.8343%" height="15" fill="rgb(236,189,24)" fg:x="68813" fg:w="2076"/><text x="61.0523%" y="863.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_source_reply::{{closure}} (2,076 samples, 1.83%)</title><rect x="60.8023%" y="837" width="1.8343%" height="15" fill="rgb(239,214,33)" fg:x="68813" fg:w="2076"/><text x="61.0523%" y="847.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,076 samples, 1.83%)</title><rect x="60.8023%" y="821" width="1.8343%" height="15" fill="rgb(226,176,41)" fg:x="68813" fg:w="2076"/><text x="61.0523%" y="831.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_data::{{closure}} (2,076 samples, 1.83%)</title><rect x="60.8023%" y="805" width="1.8343%" height="15" fill="rgb(248,47,8)" fg:x="68813" fg:w="2076"/><text x="61.0523%" y="815.50">t..</text></g><g><title>tremor_runtime::connectors::source::build_events (2,075 samples, 1.83%)</title><rect x="60.8032%" y="789" width="1.8334%" height="15" fill="rgb(218,81,44)" fg:x="68814" fg:w="2075"/><text x="61.0532%" y="799.50">t..</text></g><g><title>tremor_script::srs::EventPayload::try_new (2,075 samples, 1.83%)</title><rect x="60.8032%" y="773" width="1.8334%" height="15" fill="rgb(213,98,6)" fg:x="68814" fg:w="2075"/><text x="61.0532%" y="783.50">t..</text></g><g><title>tremor_runtime::connectors::source::build_last_events::{{closure}} (2,075 samples, 1.83%)</title><rect x="60.8032%" y="757" width="1.8334%" height="15" fill="rgb(222,85,22)" fg:x="68814" fg:w="2075"/><text x="61.0532%" y="767.50">t..</text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (48 samples, 0.04%)</title><rect x="62.5942%" y="741" width="0.0424%" height="15" fill="rgb(239,46,39)" fg:x="70841" fg:w="48"/><text x="62.8442%" y="751.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (48 samples, 0.04%)</title><rect x="62.5942%" y="725" width="0.0424%" height="15" fill="rgb(237,12,29)" fg:x="70841" fg:w="48"/><text x="62.8442%" y="735.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (42 samples, 0.04%)</title><rect x="62.5995%" y="709" width="0.0371%" height="15" fill="rgb(214,77,8)" fg:x="70847" fg:w="42"/><text x="62.8495%" y="719.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (42 samples, 0.04%)</title><rect x="62.5995%" y="693" width="0.0371%" height="15" fill="rgb(217,168,37)" fg:x="70847" fg:w="42"/><text x="62.8495%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (42 samples, 0.04%)</title><rect x="62.5995%" y="677" width="0.0371%" height="15" fill="rgb(221,217,23)" fg:x="70847" fg:w="42"/><text x="62.8495%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (42 samples, 0.04%)</title><rect x="62.5995%" y="661" width="0.0371%" height="15" fill="rgb(243,229,36)" fg:x="70847" fg:w="42"/><text x="62.8495%" y="671.50"></text></g><g><title>alloc::alloc::alloc (42 samples, 0.04%)</title><rect x="62.5995%" y="645" width="0.0371%" height="15" fill="rgb(251,163,40)" fg:x="70847" fg:w="42"/><text x="62.8495%" y="655.50"></text></g><g><title>__rg_alloc (42 samples, 0.04%)</title><rect x="62.5995%" y="629" width="0.0371%" height="15" fill="rgb(237,222,12)" fg:x="70847" fg:w="42"/><text x="62.8495%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (42 samples, 0.04%)</title><rect x="62.5995%" y="613" width="0.0371%" height="15" fill="rgb(248,132,6)" fg:x="70847" fg:w="42"/><text x="62.8495%" y="623.50"></text></g><g><title>sn_rust_alloc (42 samples, 0.04%)</title><rect x="62.5995%" y="597" width="0.0371%" height="15" fill="rgb(227,167,50)" fg:x="70847" fg:w="42"/><text x="62.8495%" y="607.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (42 samples, 0.04%)</title><rect x="62.5995%" y="581" width="0.0371%" height="15" fill="rgb(242,84,37)" fg:x="70847" fg:w="42"/><text x="62.8495%" y="591.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::run::{{closure}} (2,077 samples, 1.84%)</title><rect x="60.8023%" y="869" width="1.8352%" height="15" fill="rgb(212,4,50)" fg:x="68813" fg:w="2077"/><text x="61.0523%" y="879.50">t..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2,099 samples, 1.85%)</title><rect x="60.7988%" y="949" width="1.8546%" height="15" fill="rgb(230,228,32)" fg:x="68809" fg:w="2099"/><text x="61.0488%" y="959.50">s..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2,095 samples, 1.85%)</title><rect x="60.8023%" y="933" width="1.8511%" height="15" fill="rgb(248,217,23)" fg:x="68813" fg:w="2095"/><text x="61.0523%" y="943.50">s..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (2,095 samples, 1.85%)</title><rect x="60.8023%" y="917" width="1.8511%" height="15" fill="rgb(238,197,32)" fg:x="68813" fg:w="2095"/><text x="61.0523%" y="927.50">a..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (2,095 samples, 1.85%)</title><rect x="60.8023%" y="901" width="1.8511%" height="15" fill="rgb(236,106,1)" fg:x="68813" fg:w="2095"/><text x="61.0523%" y="911.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,095 samples, 1.85%)</title><rect x="60.8023%" y="885" width="1.8511%" height="15" fill="rgb(219,228,13)" fg:x="68813" fg:w="2095"/><text x="61.0523%" y="895.50">&lt;..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (18 samples, 0.02%)</title><rect x="62.6375%" y="869" width="0.0159%" height="15" fill="rgb(238,30,35)" fg:x="70890" fg:w="18"/><text x="62.8875%" y="879.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18 samples, 0.02%)</title><rect x="62.6375%" y="853" width="0.0159%" height="15" fill="rgb(236,70,23)" fg:x="70890" fg:w="18"/><text x="62.8875%" y="863.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (18 samples, 0.02%)</title><rect x="62.6375%" y="837" width="0.0159%" height="15" fill="rgb(249,104,48)" fg:x="70890" fg:w="18"/><text x="62.8875%" y="847.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (18 samples, 0.02%)</title><rect x="62.6375%" y="821" width="0.0159%" height="15" fill="rgb(254,117,50)" fg:x="70890" fg:w="18"/><text x="62.8875%" y="831.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (18 samples, 0.02%)</title><rect x="62.6375%" y="805" width="0.0159%" height="15" fill="rgb(223,152,4)" fg:x="70890" fg:w="18"/><text x="62.8875%" y="815.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (18 samples, 0.02%)</title><rect x="62.6375%" y="789" width="0.0159%" height="15" fill="rgb(245,6,2)" fg:x="70890" fg:w="18"/><text x="62.8875%" y="799.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (18 samples, 0.02%)</title><rect x="62.6375%" y="773" width="0.0159%" height="15" fill="rgb(249,150,24)" fg:x="70890" fg:w="18"/><text x="62.8875%" y="783.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (18 samples, 0.02%)</title><rect x="62.6375%" y="757" width="0.0159%" height="15" fill="rgb(228,185,42)" fg:x="70890" fg:w="18"/><text x="62.8875%" y="767.50"></text></g><g><title>tremor_common::time::nanotime (19 samples, 0.02%)</title><rect x="62.6534%" y="949" width="0.0168%" height="15" fill="rgb(226,39,33)" fg:x="70908" fg:w="19"/><text x="62.9034%" y="959.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (27 samples, 0.02%)</title><rect x="62.6773%" y="901" width="0.0239%" height="15" fill="rgb(221,166,19)" fg:x="70935" fg:w="27"/><text x="62.9273%" y="911.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (16 samples, 0.01%)</title><rect x="62.6870%" y="885" width="0.0141%" height="15" fill="rgb(209,109,2)" fg:x="70946" fg:w="16"/><text x="62.9370%" y="895.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (12 samples, 0.01%)</title><rect x="62.6905%" y="869" width="0.0106%" height="15" fill="rgb(252,216,26)" fg:x="70950" fg:w="12"/><text x="62.9405%" y="879.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_input (46 samples, 0.04%)</title><rect x="62.6702%" y="949" width="0.0406%" height="15" fill="rgb(227,173,36)" fg:x="70927" fg:w="46"/><text x="62.9202%" y="959.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_input_n (38 samples, 0.03%)</title><rect x="62.6773%" y="933" width="0.0336%" height="15" fill="rgb(209,90,7)" fg:x="70935" fg:w="38"/><text x="62.9273%" y="943.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (38 samples, 0.03%)</title><rect x="62.6773%" y="917" width="0.0336%" height="15" fill="rgb(250,194,11)" fg:x="70935" fg:w="38"/><text x="62.9273%" y="927.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize_for_stream_with_codec (22 samples, 0.02%)</title><rect x="62.7117%" y="949" width="0.0194%" height="15" fill="rgb(220,72,50)" fg:x="70974" fg:w="22"/><text x="62.9617%" y="959.50"></text></g><g><title>core::str::converts::from_utf8 (1,067 samples, 0.94%)</title><rect x="63.8348%" y="597" width="0.9428%" height="15" fill="rgb(222,106,48)" fg:x="72245" fg:w="1067"/><text x="64.0848%" y="607.50"></text></g><g><title>core::str::validations::run_utf8_validation (998 samples, 0.88%)</title><rect x="63.8957%" y="581" width="0.8818%" height="15" fill="rgb(216,220,45)" fg:x="72314" fg:w="998"/><text x="64.1457%" y="591.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::read_str_data (2,257 samples, 1.99%)</title><rect x="62.8725%" y="613" width="1.9943%" height="15" fill="rgb(234,112,18)" fg:x="71156" fg:w="2257"/><text x="63.1225%" y="623.50">r..</text></g><g><title>rmp_serde::decode::read_bin_data (101 samples, 0.09%)</title><rect x="64.7776%" y="597" width="0.0892%" height="15" fill="rgb(206,179,9)" fg:x="73312" fg:w="101"/><text x="65.0276%" y="607.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as rmp_serde::decode::ReadSlice&gt;::read_slice (101 samples, 0.09%)</title><rect x="64.7776%" y="581" width="0.0892%" height="15" fill="rgb(215,115,40)" fg:x="73312" fg:w="101"/><text x="65.0276%" y="591.50"></text></g><g><title>rmp::decode::RmpRead::read_u8 (114 samples, 0.10%)</title><rect x="64.9066%" y="549" width="0.1007%" height="15" fill="rgb(222,69,34)" fg:x="73458" fg:w="114"/><text x="65.1566%" y="559.50"></text></g><g><title>&lt;T as rmp::decode::RmpRead&gt;::read_exact_buf (114 samples, 0.10%)</title><rect x="64.9066%" y="533" width="0.1007%" height="15" fill="rgb(209,161,10)" fg:x="73458" fg:w="114"/><text x="65.1566%" y="543.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as std::io::Read&gt;::read_exact (114 samples, 0.10%)</title><rect x="64.9066%" y="517" width="0.1007%" height="15" fill="rgb(217,6,38)" fg:x="73458" fg:w="114"/><text x="65.1566%" y="527.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_exact (114 samples, 0.10%)</title><rect x="64.9066%" y="501" width="0.1007%" height="15" fill="rgb(229,229,48)" fg:x="73458" fg:w="114"/><text x="65.1566%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (57 samples, 0.05%)</title><rect x="64.9569%" y="485" width="0.0504%" height="15" fill="rgb(225,21,28)" fg:x="73515" fg:w="57"/><text x="65.2069%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (57 samples, 0.05%)</title><rect x="64.9569%" y="469" width="0.0504%" height="15" fill="rgb(206,33,13)" fg:x="73515" fg:w="57"/><text x="65.2069%" y="479.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (57 samples, 0.05%)</title><rect x="64.9569%" y="453" width="0.0504%" height="15" fill="rgb(242,178,17)" fg:x="73515" fg:w="57"/><text x="65.2069%" y="463.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (57 samples, 0.05%)</title><rect x="64.9569%" y="437" width="0.0504%" height="15" fill="rgb(220,162,5)" fg:x="73515" fg:w="57"/><text x="65.2069%" y="447.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (57 samples, 0.05%)</title><rect x="64.9569%" y="421" width="0.0504%" height="15" fill="rgb(210,33,43)" fg:x="73515" fg:w="57"/><text x="65.2069%" y="431.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_key (2,732 samples, 2.41%)</title><rect x="62.7329%" y="725" width="2.4140%" height="15" fill="rgb(216,116,54)" fg:x="70998" fg:w="2732"/><text x="62.9829%" y="735.50">&lt;&amp;..</text></g><g><title>serde::de::MapAccess::next_key (2,732 samples, 2.41%)</title><rect x="62.7329%" y="709" width="2.4140%" height="15" fill="rgb(249,92,24)" fg:x="70998" fg:w="2732"/><text x="62.9829%" y="719.50">se..</text></g><g><title>&lt;rmp_serde::decode::MapAccess&lt;R,C&gt; as serde::de::MapAccess&gt;::next_key_seed (2,732 samples, 2.41%)</title><rect x="62.7329%" y="693" width="2.4140%" height="15" fill="rgb(231,189,14)" fg:x="70998" fg:w="2732"/><text x="62.9829%" y="703.50">&lt;r..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2,732 samples, 2.41%)</title><rect x="62.7329%" y="677" width="2.4140%" height="15" fill="rgb(230,8,41)" fg:x="70998" fg:w="2732"/><text x="62.9829%" y="687.50">&lt;c..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for &amp;str&gt;::deserialize (2,732 samples, 2.41%)</title><rect x="62.7329%" y="661" width="2.4140%" height="15" fill="rgb(249,7,27)" fg:x="70998" fg:w="2732"/><text x="62.9829%" y="671.50">se..</text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_str (2,732 samples, 2.41%)</title><rect x="62.7329%" y="645" width="2.4140%" height="15" fill="rgb(232,86,5)" fg:x="70998" fg:w="2732"/><text x="62.9829%" y="655.50">&lt;&amp;..</text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (2,732 samples, 2.41%)</title><rect x="62.7329%" y="629" width="2.4140%" height="15" fill="rgb(224,175,18)" fg:x="70998" fg:w="2732"/><text x="62.9829%" y="639.50">&lt;&amp;..</text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker (317 samples, 0.28%)</title><rect x="64.8668%" y="613" width="0.2801%" height="15" fill="rgb(220,129,12)" fg:x="73413" fg:w="317"/><text x="65.1168%" y="623.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (317 samples, 0.28%)</title><rect x="64.8668%" y="597" width="0.2801%" height="15" fill="rgb(210,19,36)" fg:x="73413" fg:w="317"/><text x="65.1168%" y="607.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker::{{closure}} (272 samples, 0.24%)</title><rect x="64.9066%" y="581" width="0.2403%" height="15" fill="rgb(219,96,14)" fg:x="73458" fg:w="272"/><text x="65.1566%" y="591.50"></text></g><g><title>rmp::decode::read_marker (272 samples, 0.24%)</title><rect x="64.9066%" y="565" width="0.2403%" height="15" fill="rgb(249,106,1)" fg:x="73458" fg:w="272"/><text x="65.1566%" y="575.50"></text></g><g><title>rmp::marker::Marker::from_u8 (158 samples, 0.14%)</title><rect x="65.0073%" y="549" width="0.1396%" height="15" fill="rgb(249,155,20)" fg:x="73572" fg:w="158"/><text x="65.2573%" y="559.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_u8 (39 samples, 0.03%)</title><rect x="66.0066%" y="517" width="0.0345%" height="15" fill="rgb(244,168,9)" fg:x="74703" fg:w="39"/><text x="66.2566%" y="527.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;u8&gt; for u64&gt;::from (39 samples, 0.03%)</title><rect x="66.0066%" y="501" width="0.0345%" height="15" fill="rgb(216,23,50)" fg:x="74703" fg:w="39"/><text x="66.2566%" y="511.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_borrowed_str (22 samples, 0.02%)</title><rect x="66.0791%" y="501" width="0.0194%" height="15" fill="rgb(224,219,20)" fg:x="74785" fg:w="22"/><text x="66.3291%" y="511.50"></text></g><g><title>core::str::converts::from_utf8 (267 samples, 0.24%)</title><rect x="66.0985%" y="501" width="0.2359%" height="15" fill="rgb(222,156,15)" fg:x="74807" fg:w="267"/><text x="66.3485%" y="511.50"></text></g><g><title>core::str::validations::run_utf8_validation (242 samples, 0.21%)</title><rect x="66.1206%" y="485" width="0.2138%" height="15" fill="rgb(231,97,17)" fg:x="74832" fg:w="242"/><text x="66.3706%" y="495.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::read_str_data (401 samples, 0.35%)</title><rect x="66.0411%" y="517" width="0.3543%" height="15" fill="rgb(218,70,48)" fg:x="74742" fg:w="401"/><text x="66.2911%" y="527.50"></text></g><g><title>rmp_serde::decode::read_bin_data (69 samples, 0.06%)</title><rect x="66.3344%" y="501" width="0.0610%" height="15" fill="rgb(212,196,52)" fg:x="75074" fg:w="69"/><text x="66.5844%" y="511.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as rmp_serde::decode::ReadSlice&gt;::read_slice (69 samples, 0.06%)</title><rect x="66.3344%" y="485" width="0.0610%" height="15" fill="rgb(243,203,18)" fg:x="75074" fg:w="69"/><text x="66.5844%" y="495.50"></text></g><g><title>rmp::decode::RmpRead::read_u8 (101 samples, 0.09%)</title><rect x="66.4042%" y="453" width="0.0892%" height="15" fill="rgb(252,125,41)" fg:x="75153" fg:w="101"/><text x="66.6542%" y="463.50"></text></g><g><title>&lt;T as rmp::decode::RmpRead&gt;::read_exact_buf (101 samples, 0.09%)</title><rect x="66.4042%" y="437" width="0.0892%" height="15" fill="rgb(223,180,33)" fg:x="75153" fg:w="101"/><text x="66.6542%" y="447.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as std::io::Read&gt;::read_exact (101 samples, 0.09%)</title><rect x="66.4042%" y="421" width="0.0892%" height="15" fill="rgb(254,159,46)" fg:x="75153" fg:w="101"/><text x="66.6542%" y="431.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_exact (101 samples, 0.09%)</title><rect x="66.4042%" y="405" width="0.0892%" height="15" fill="rgb(254,38,10)" fg:x="75153" fg:w="101"/><text x="66.6542%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (50 samples, 0.04%)</title><rect x="66.4493%" y="389" width="0.0442%" height="15" fill="rgb(208,217,32)" fg:x="75204" fg:w="50"/><text x="66.6993%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (50 samples, 0.04%)</title><rect x="66.4493%" y="373" width="0.0442%" height="15" fill="rgb(221,120,13)" fg:x="75204" fg:w="50"/><text x="66.6993%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (50 samples, 0.04%)</title><rect x="66.4493%" y="357" width="0.0442%" height="15" fill="rgb(246,54,52)" fg:x="75204" fg:w="50"/><text x="66.6993%" y="367.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (50 samples, 0.04%)</title><rect x="66.4493%" y="341" width="0.0442%" height="15" fill="rgb(242,34,25)" fg:x="75204" fg:w="50"/><text x="66.6993%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (50 samples, 0.04%)</title><rect x="66.4493%" y="325" width="0.0442%" height="15" fill="rgb(247,209,9)" fg:x="75204" fg:w="50"/><text x="66.6993%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (40 samples, 0.04%)</title><rect x="66.4581%" y="309" width="0.0353%" height="15" fill="rgb(228,71,26)" fg:x="75214" fg:w="40"/><text x="66.7081%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (40 samples, 0.04%)</title><rect x="66.4581%" y="293" width="0.0353%" height="15" fill="rgb(222,145,49)" fg:x="75214" fg:w="40"/><text x="66.7081%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (193 samples, 0.17%)</title><rect x="66.3954%" y="501" width="0.1705%" height="15" fill="rgb(218,121,17)" fg:x="75143" fg:w="193"/><text x="66.6454%" y="511.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker::{{closure}} (183 samples, 0.16%)</title><rect x="66.4042%" y="485" width="0.1617%" height="15" fill="rgb(244,50,7)" fg:x="75153" fg:w="183"/><text x="66.6542%" y="495.50"></text></g><g><title>rmp::decode::read_marker (183 samples, 0.16%)</title><rect x="66.4042%" y="469" width="0.1617%" height="15" fill="rgb(246,229,37)" fg:x="75153" fg:w="183"/><text x="66.6542%" y="479.50"></text></g><g><title>rmp::marker::Marker::from_u8 (82 samples, 0.07%)</title><rect x="66.4935%" y="453" width="0.0725%" height="15" fill="rgb(225,18,5)" fg:x="75254" fg:w="82"/><text x="66.7435%" y="463.50"></text></g><g><title>core::ptr::read (49 samples, 0.04%)</title><rect x="66.5659%" y="469" width="0.0433%" height="15" fill="rgb(213,204,8)" fg:x="75336" fg:w="49"/><text x="66.8159%" y="479.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (942 samples, 0.83%)</title><rect x="65.7778%" y="565" width="0.8323%" height="15" fill="rgb(238,103,6)" fg:x="74444" fg:w="942"/><text x="66.0278%" y="575.50"></text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (942 samples, 0.83%)</title><rect x="65.7778%" y="549" width="0.8323%" height="15" fill="rgb(222,25,35)" fg:x="74444" fg:w="942"/><text x="66.0278%" y="559.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (883 samples, 0.78%)</title><rect x="65.8299%" y="533" width="0.7802%" height="15" fill="rgb(213,203,35)" fg:x="74503" fg:w="883"/><text x="66.0799%" y="543.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker (243 samples, 0.21%)</title><rect x="66.3954%" y="517" width="0.2147%" height="15" fill="rgb(221,79,53)" fg:x="75143" fg:w="243"/><text x="66.6454%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (50 samples, 0.04%)</title><rect x="66.5659%" y="501" width="0.0442%" height="15" fill="rgb(243,200,35)" fg:x="75336" fg:w="50"/><text x="66.8159%" y="511.50"></text></g><g><title>core::mem::replace (50 samples, 0.04%)</title><rect x="66.5659%" y="485" width="0.0442%" height="15" fill="rgb(248,60,25)" fg:x="75336" fg:w="50"/><text x="66.8159%" y="495.50"></text></g><g><title>&lt;&amp;mut A as serde::de::SeqAccess&gt;::next_element (2,058 samples, 1.82%)</title><rect x="65.7177%" y="613" width="1.8184%" height="15" fill="rgb(227,53,46)" fg:x="74376" fg:w="2058"/><text x="65.9677%" y="623.50">&lt;..</text></g><g><title>serde::de::SeqAccess::next_element (2,058 samples, 1.82%)</title><rect x="65.7177%" y="597" width="1.8184%" height="15" fill="rgb(216,120,32)" fg:x="74376" fg:w="2058"/><text x="65.9677%" y="607.50">s..</text></g><g><title>&lt;rmp_serde::decode::SeqAccess&lt;R,C&gt; as serde::de::SeqAccess&gt;::next_element_seed (2,058 samples, 1.82%)</title><rect x="65.7177%" y="581" width="1.8184%" height="15" fill="rgb(220,134,1)" fg:x="74376" fg:w="2058"/><text x="65.9677%" y="591.50">&lt;..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1,048 samples, 0.93%)</title><rect x="66.6101%" y="565" width="0.9260%" height="15" fill="rgb(237,168,5)" fg:x="75386" fg:w="1048"/><text x="66.8601%" y="575.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (115 samples, 0.10%)</title><rect x="67.5361%" y="613" width="0.1016%" height="15" fill="rgb(231,100,33)" fg:x="76434" fg:w="115"/><text x="67.7861%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (69 samples, 0.06%)</title><rect x="67.6377%" y="597" width="0.0610%" height="15" fill="rgb(236,177,47)" fg:x="76549" fg:w="69"/><text x="67.8877%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (985 samples, 0.87%)</title><rect x="67.6377%" y="613" width="0.8703%" height="15" fill="rgb(235,7,49)" fg:x="76549" fg:w="985"/><text x="67.8877%" y="623.50"></text></g><g><title>core::ptr::write (915 samples, 0.81%)</title><rect x="67.6996%" y="597" width="0.8085%" height="15" fill="rgb(232,119,22)" fg:x="76619" fg:w="915"/><text x="67.9496%" y="607.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (431 samples, 0.38%)</title><rect x="68.6017%" y="453" width="0.3808%" height="15" fill="rgb(254,73,53)" fg:x="77640" fg:w="431"/><text x="68.8517%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (539 samples, 0.48%)</title><rect x="68.5125%" y="549" width="0.4763%" height="15" fill="rgb(251,35,20)" fg:x="77539" fg:w="539"/><text x="68.7625%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (539 samples, 0.48%)</title><rect x="68.5125%" y="533" width="0.4763%" height="15" fill="rgb(241,119,20)" fg:x="77539" fg:w="539"/><text x="68.7625%" y="543.50"></text></g><g><title>alloc::alloc::alloc (533 samples, 0.47%)</title><rect x="68.5178%" y="517" width="0.4710%" height="15" fill="rgb(207,102,14)" fg:x="77545" fg:w="533"/><text x="68.7678%" y="527.50"></text></g><g><title>__rg_alloc (533 samples, 0.47%)</title><rect x="68.5178%" y="501" width="0.4710%" height="15" fill="rgb(248,201,50)" fg:x="77545" fg:w="533"/><text x="68.7678%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (533 samples, 0.47%)</title><rect x="68.5178%" y="485" width="0.4710%" height="15" fill="rgb(222,185,44)" fg:x="77545" fg:w="533"/><text x="68.7678%" y="495.50"></text></g><g><title>sn_rust_alloc (533 samples, 0.47%)</title><rect x="68.5178%" y="469" width="0.4710%" height="15" fill="rgb(218,107,18)" fg:x="77545" fg:w="533"/><text x="68.7678%" y="479.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_seq (4,001 samples, 3.54%)</title><rect x="65.4570%" y="629" width="3.5352%" height="15" fill="rgb(237,177,39)" fg:x="74081" fg:w="4001"/><text x="65.7070%" y="639.50">&lt;tr..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (548 samples, 0.48%)</title><rect x="68.5081%" y="613" width="0.4842%" height="15" fill="rgb(246,69,6)" fg:x="77534" fg:w="548"/><text x="68.7581%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (548 samples, 0.48%)</title><rect x="68.5081%" y="597" width="0.4842%" height="15" fill="rgb(234,208,37)" fg:x="77534" fg:w="548"/><text x="68.7581%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (543 samples, 0.48%)</title><rect x="68.5125%" y="581" width="0.4798%" height="15" fill="rgb(225,4,6)" fg:x="77539" fg:w="543"/><text x="68.7625%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (543 samples, 0.48%)</title><rect x="68.5125%" y="565" width="0.4798%" height="15" fill="rgb(233,45,0)" fg:x="77539" fg:w="543"/><text x="68.7625%" y="575.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_borrowed_str (57 samples, 0.05%)</title><rect x="69.1036%" y="613" width="0.0504%" height="15" fill="rgb(226,136,5)" fg:x="78208" fg:w="57"/><text x="69.3536%" y="623.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (21 samples, 0.02%)</title><rect x="69.9757%" y="581" width="0.0186%" height="15" fill="rgb(211,91,47)" fg:x="79195" fg:w="21"/><text x="70.2257%" y="591.50"></text></g><g><title>core::str::converts::from_utf8 (979 samples, 0.87%)</title><rect x="69.1540%" y="613" width="0.8650%" height="15" fill="rgb(242,88,51)" fg:x="78265" fg:w="979"/><text x="69.4040%" y="623.50"></text></g><g><title>core::str::validations::run_utf8_validation (870 samples, 0.77%)</title><rect x="69.2503%" y="597" width="0.7687%" height="15" fill="rgb(230,91,28)" fg:x="78374" fg:w="870"/><text x="69.5003%" y="607.50"></text></g><g><title>core::str::validations::contains_nonascii (28 samples, 0.02%)</title><rect x="69.9943%" y="581" width="0.0247%" height="15" fill="rgb(254,186,29)" fg:x="79216" fg:w="28"/><text x="70.2443%" y="591.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::read_str_data (1,243 samples, 1.10%)</title><rect x="68.9940%" y="629" width="1.0983%" height="15" fill="rgb(238,6,4)" fg:x="78084" fg:w="1243"/><text x="69.2440%" y="639.50"></text></g><g><title>rmp_serde::decode::read_bin_data (83 samples, 0.07%)</title><rect x="70.0190%" y="613" width="0.0733%" height="15" fill="rgb(221,151,16)" fg:x="79244" fg:w="83"/><text x="70.2690%" y="623.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as rmp_serde::decode::ReadSlice&gt;::read_slice (78 samples, 0.07%)</title><rect x="70.0234%" y="597" width="0.0689%" height="15" fill="rgb(251,143,52)" fg:x="79249" fg:w="78"/><text x="70.2734%" y="607.50"></text></g><g><title>rmp::decode::RmpRead::read_u8 (120 samples, 0.11%)</title><rect x="70.0923%" y="565" width="0.1060%" height="15" fill="rgb(206,90,15)" fg:x="79327" fg:w="120"/><text x="70.3423%" y="575.50"></text></g><g><title>&lt;T as rmp::decode::RmpRead&gt;::read_exact_buf (120 samples, 0.11%)</title><rect x="70.0923%" y="549" width="0.1060%" height="15" fill="rgb(218,35,8)" fg:x="79327" fg:w="120"/><text x="70.3423%" y="559.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as std::io::Read&gt;::read_exact (120 samples, 0.11%)</title><rect x="70.0923%" y="533" width="0.1060%" height="15" fill="rgb(239,215,6)" fg:x="79327" fg:w="120"/><text x="70.3423%" y="543.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_exact (120 samples, 0.11%)</title><rect x="70.0923%" y="517" width="0.1060%" height="15" fill="rgb(245,116,39)" fg:x="79327" fg:w="120"/><text x="70.3423%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (299 samples, 0.26%)</title><rect x="70.0923%" y="613" width="0.2642%" height="15" fill="rgb(242,65,28)" fg:x="79327" fg:w="299"/><text x="70.3423%" y="623.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker::{{closure}} (299 samples, 0.26%)</title><rect x="70.0923%" y="597" width="0.2642%" height="15" fill="rgb(252,132,53)" fg:x="79327" fg:w="299"/><text x="70.3423%" y="607.50"></text></g><g><title>rmp::decode::read_marker (299 samples, 0.26%)</title><rect x="70.0923%" y="581" width="0.2642%" height="15" fill="rgb(224,159,50)" fg:x="79327" fg:w="299"/><text x="70.3423%" y="591.50"></text></g><g><title>rmp::marker::Marker::from_u8 (179 samples, 0.16%)</title><rect x="70.1984%" y="565" width="0.1582%" height="15" fill="rgb(224,93,4)" fg:x="79447" fg:w="179"/><text x="70.4484%" y="575.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker (356 samples, 0.31%)</title><rect x="70.0923%" y="629" width="0.3146%" height="15" fill="rgb(208,81,34)" fg:x="79327" fg:w="356"/><text x="70.3423%" y="639.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (57 samples, 0.05%)</title><rect x="70.3565%" y="613" width="0.0504%" height="15" fill="rgb(233,92,54)" fg:x="79626" fg:w="57"/><text x="70.6065%" y="623.50"></text></g><g><title>core::mem::replace (57 samples, 0.05%)</title><rect x="70.3565%" y="597" width="0.0504%" height="15" fill="rgb(237,21,14)" fg:x="79626" fg:w="57"/><text x="70.6065%" y="607.50"></text></g><g><title>core::ptr::write (51 samples, 0.05%)</title><rect x="70.3618%" y="581" width="0.0451%" height="15" fill="rgb(249,128,51)" fg:x="79632" fg:w="51"/><text x="70.6118%" y="591.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_value (5,966 samples, 5.27%)</title><rect x="65.1469%" y="725" width="5.2715%" height="15" fill="rgb(223,129,24)" fg:x="73730" fg:w="5966"/><text x="65.3969%" y="735.50">&lt;&amp;mut ..</text></g><g><title>serde::de::MapAccess::next_value (5,966 samples, 5.27%)</title><rect x="65.1469%" y="709" width="5.2715%" height="15" fill="rgb(231,168,25)" fg:x="73730" fg:w="5966"/><text x="65.3969%" y="719.50">serde:..</text></g><g><title>&lt;rmp_serde::decode::MapAccess&lt;R,C&gt; as serde::de::MapAccess&gt;::next_value_seed (5,966 samples, 5.27%)</title><rect x="65.1469%" y="693" width="5.2715%" height="15" fill="rgb(224,39,20)" fg:x="73730" fg:w="5966"/><text x="65.3969%" y="703.50">&lt;rmp_s..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (5,966 samples, 5.27%)</title><rect x="65.1469%" y="677" width="5.2715%" height="15" fill="rgb(225,152,53)" fg:x="73730" fg:w="5966"/><text x="65.3969%" y="687.50">&lt;core:..</text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (5,966 samples, 5.27%)</title><rect x="65.1469%" y="661" width="5.2715%" height="15" fill="rgb(252,17,24)" fg:x="73730" fg:w="5966"/><text x="65.3969%" y="671.50">tremor..</text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (5,966 samples, 5.27%)</title><rect x="65.1469%" y="645" width="5.2715%" height="15" fill="rgb(250,114,30)" fg:x="73730" fg:w="5966"/><text x="65.3969%" y="655.50">&lt;&amp;mut ..</text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (44 samples, 0.04%)</title><rect x="70.7753%" y="693" width="0.0389%" height="15" fill="rgb(229,5,4)" fg:x="80100" fg:w="44"/><text x="71.0253%" y="703.50"></text></g><g><title>beef::generic::Cow&lt;T,U&gt;::borrow (16 samples, 0.01%)</title><rect x="70.8142%" y="661" width="0.0141%" height="15" fill="rgb(225,176,49)" fg:x="80144" fg:w="16"/><text x="71.0642%" y="671.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;mut B&gt; for &amp;A&gt;::eq (573 samples, 0.51%)</title><rect x="70.8142%" y="693" width="0.5063%" height="15" fill="rgb(224,221,49)" fg:x="80144" fg:w="573"/><text x="71.0642%" y="703.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (573 samples, 0.51%)</title><rect x="70.8142%" y="677" width="0.5063%" height="15" fill="rgb(253,169,27)" fg:x="80144" fg:w="573"/><text x="71.0642%" y="687.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (557 samples, 0.49%)</title><rect x="70.8284%" y="661" width="0.4922%" height="15" fill="rgb(211,206,16)" fg:x="80160" fg:w="557"/><text x="71.0784%" y="671.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (557 samples, 0.49%)</title><rect x="70.8284%" y="645" width="0.4922%" height="15" fill="rgb(244,87,35)" fg:x="80160" fg:w="557"/><text x="71.0784%" y="655.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (557 samples, 0.49%)</title><rect x="70.8284%" y="629" width="0.4922%" height="15" fill="rgb(246,28,10)" fg:x="80160" fg:w="557"/><text x="71.0784%" y="639.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (557 samples, 0.49%)</title><rect x="70.8284%" y="613" width="0.4922%" height="15" fill="rgb(229,12,44)" fg:x="80160" fg:w="557"/><text x="71.0784%" y="623.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (557 samples, 0.49%)</title><rect x="70.8284%" y="597" width="0.4922%" height="15" fill="rgb(210,145,37)" fg:x="80160" fg:w="557"/><text x="71.0784%" y="607.50"></text></g><g><title>[libc-2.31.so] (254 samples, 0.22%)</title><rect x="71.0961%" y="581" width="0.2244%" height="15" fill="rgb(227,112,52)" fg:x="80463" fg:w="254"/><text x="71.3461%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (43 samples, 0.04%)</title><rect x="71.6006%" y="661" width="0.0380%" height="15" fill="rgb(238,155,34)" fg:x="81034" fg:w="43"/><text x="71.8506%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (43 samples, 0.04%)</title><rect x="71.6006%" y="645" width="0.0380%" height="15" fill="rgb(239,226,36)" fg:x="81034" fg:w="43"/><text x="71.8506%" y="655.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::insert (2,014 samples, 1.78%)</title><rect x="70.6879%" y="709" width="1.7795%" height="15" fill="rgb(230,16,23)" fg:x="80001" fg:w="2014"/><text x="70.9379%" y="719.50">h..</text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::insert_idx (1,298 samples, 1.15%)</title><rect x="71.3205%" y="693" width="1.1469%" height="15" fill="rgb(236,171,36)" fg:x="80717" fg:w="1298"/><text x="71.5705%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (981 samples, 0.87%)</title><rect x="71.6006%" y="677" width="0.8668%" height="15" fill="rgb(221,22,14)" fg:x="81034" fg:w="981"/><text x="71.8506%" y="687.50"></text></g><g><title>core::ptr::write (938 samples, 0.83%)</title><rect x="71.6386%" y="661" width="0.8288%" height="15" fill="rgb(242,43,11)" fg:x="81077" fg:w="938"/><text x="71.8886%" y="671.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::insert (2,320 samples, 2.05%)</title><rect x="70.4184%" y="725" width="2.0499%" height="15" fill="rgb(232,69,23)" fg:x="79696" fg:w="2320"/><text x="70.6684%" y="735.50">h..</text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (1,017 samples, 0.90%)</title><rect x="72.4683%" y="533" width="0.8986%" height="15" fill="rgb(216,180,54)" fg:x="82016" fg:w="1017"/><text x="72.7183%" y="543.50"></text></g><g><title>halfbrown::HashMap&lt;K,V&gt;::with_capacity (1,022 samples, 0.90%)</title><rect x="72.4683%" y="725" width="0.9030%" height="15" fill="rgb(216,5,24)" fg:x="82016" fg:w="1022"/><text x="72.7183%" y="735.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V&gt;::with_capacity (1,022 samples, 0.90%)</title><rect x="72.4683%" y="709" width="0.9030%" height="15" fill="rgb(225,89,9)" fg:x="82016" fg:w="1022"/><text x="72.7183%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,022 samples, 0.90%)</title><rect x="72.4683%" y="693" width="0.9030%" height="15" fill="rgb(243,75,33)" fg:x="82016" fg:w="1022"/><text x="72.7183%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,022 samples, 0.90%)</title><rect x="72.4683%" y="677" width="0.9030%" height="15" fill="rgb(247,141,45)" fg:x="82016" fg:w="1022"/><text x="72.7183%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,022 samples, 0.90%)</title><rect x="72.4683%" y="661" width="0.9030%" height="15" fill="rgb(232,177,36)" fg:x="82016" fg:w="1022"/><text x="72.7183%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,022 samples, 0.90%)</title><rect x="72.4683%" y="645" width="0.9030%" height="15" fill="rgb(219,125,36)" fg:x="82016" fg:w="1022"/><text x="72.7183%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,022 samples, 0.90%)</title><rect x="72.4683%" y="629" width="0.9030%" height="15" fill="rgb(227,94,9)" fg:x="82016" fg:w="1022"/><text x="72.7183%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,022 samples, 0.90%)</title><rect x="72.4683%" y="613" width="0.9030%" height="15" fill="rgb(240,34,52)" fg:x="82016" fg:w="1022"/><text x="72.7183%" y="623.50"></text></g><g><title>alloc::alloc::alloc (1,022 samples, 0.90%)</title><rect x="72.4683%" y="597" width="0.9030%" height="15" fill="rgb(216,45,12)" fg:x="82016" fg:w="1022"/><text x="72.7183%" y="607.50"></text></g><g><title>__rg_alloc (1,022 samples, 0.90%)</title><rect x="72.4683%" y="581" width="0.9030%" height="15" fill="rgb(246,21,19)" fg:x="82016" fg:w="1022"/><text x="72.7183%" y="591.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1,022 samples, 0.90%)</title><rect x="72.4683%" y="565" width="0.9030%" height="15" fill="rgb(213,98,42)" fg:x="82016" fg:w="1022"/><text x="72.7183%" y="575.50"></text></g><g><title>sn_rust_alloc (1,022 samples, 0.90%)</title><rect x="72.4683%" y="549" width="0.9030%" height="15" fill="rgb(250,136,47)" fg:x="82016" fg:w="1022"/><text x="72.7183%" y="559.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::run::{{closure}} (12,079 samples, 10.67%)</title><rect x="62.7321%" y="949" width="10.6729%" height="15" fill="rgb(251,124,27)" fg:x="70997" fg:w="12079"/><text x="62.9821%" y="959.50">tremor_runtime::..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,079 samples, 10.67%)</title><rect x="62.7321%" y="933" width="10.6729%" height="15" fill="rgb(229,180,14)" fg:x="70997" fg:w="12079"/><text x="62.9821%" y="943.50">&lt;core::future::f..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_source_reply::{{closure}} (12,079 samples, 10.67%)</title><rect x="62.7321%" y="917" width="10.6729%" height="15" fill="rgb(245,216,25)" fg:x="70997" fg:w="12079"/><text x="62.9821%" y="927.50">tremor_runtime::..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,079 samples, 10.67%)</title><rect x="62.7321%" y="901" width="10.6729%" height="15" fill="rgb(251,43,5)" fg:x="70997" fg:w="12079"/><text x="62.9821%" y="911.50">&lt;core::future::f..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_data::{{closure}} (12,079 samples, 10.67%)</title><rect x="62.7321%" y="885" width="10.6729%" height="15" fill="rgb(250,128,24)" fg:x="70997" fg:w="12079"/><text x="62.9821%" y="895.50">tremor_runtime::..</text></g><g><title>tremor_runtime::connectors::source::build_events (12,079 samples, 10.67%)</title><rect x="62.7321%" y="869" width="10.6729%" height="15" fill="rgb(217,117,27)" fg:x="70997" fg:w="12079"/><text x="62.9821%" y="879.50">tremor_runtime::..</text></g><g><title>tremor_script::srs::EventPayload::try_new (12,078 samples, 10.67%)</title><rect x="62.7329%" y="853" width="10.6720%" height="15" fill="rgb(245,147,4)" fg:x="70998" fg:w="12078"/><text x="62.9829%" y="863.50">tremor_script::s..</text></g><g><title>tremor_runtime::connectors::source::build_last_events::{{closure}} (12,078 samples, 10.67%)</title><rect x="62.7329%" y="837" width="10.6720%" height="15" fill="rgb(242,201,35)" fg:x="70998" fg:w="12078"/><text x="62.9829%" y="847.50">tremor_runtime::..</text></g><g><title>&lt;tremor_runtime::codec::msgpack::MsgPack as tremor_runtime::codec::Codec&gt;::decode (12,078 samples, 10.67%)</title><rect x="62.7329%" y="821" width="10.6720%" height="15" fill="rgb(218,181,1)" fg:x="70998" fg:w="12078"/><text x="62.9829%" y="831.50">&lt;tremor_runtime:..</text></g><g><title>rmp_serde::decode::from_slice (12,078 samples, 10.67%)</title><rect x="62.7329%" y="805" width="10.6720%" height="15" fill="rgb(222,6,29)" fg:x="70998" fg:w="12078"/><text x="62.9829%" y="815.50">rmp_serde::decod..</text></g><g><title>rmp_serde::decode::from_read_ref (12,078 samples, 10.67%)</title><rect x="62.7329%" y="789" width="10.6720%" height="15" fill="rgb(208,186,3)" fg:x="70998" fg:w="12078"/><text x="62.9829%" y="799.50">rmp_serde::decod..</text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (12,078 samples, 10.67%)</title><rect x="62.7329%" y="773" width="10.6720%" height="15" fill="rgb(216,36,26)" fg:x="70998" fg:w="12078"/><text x="62.9829%" y="783.50">tremor_value::se..</text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (12,078 samples, 10.67%)</title><rect x="62.7329%" y="757" width="10.6720%" height="15" fill="rgb(248,201,23)" fg:x="70998" fg:w="12078"/><text x="62.9829%" y="767.50">&lt;&amp;mut rmp_serde:..</text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_map (12,078 samples, 10.67%)</title><rect x="62.7329%" y="741" width="10.6720%" height="15" fill="rgb(251,170,31)" fg:x="70998" fg:w="12078"/><text x="62.9829%" y="751.50">&lt;tremor_value::s..</text></g><g><title>tremor_value::value::from::&lt;impl core::convert::From&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; for tremor_value::value::Value&gt;::from (38 samples, 0.03%)</title><rect x="73.3713%" y="725" width="0.0336%" height="15" fill="rgb(207,110,25)" fg:x="83038" fg:w="38"/><text x="73.6213%" y="735.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (38 samples, 0.03%)</title><rect x="73.3713%" y="709" width="0.0336%" height="15" fill="rgb(250,54,15)" fg:x="83038" fg:w="38"/><text x="73.6213%" y="719.50"></text></g><g><title>alloc::alloc::exchange_malloc (38 samples, 0.03%)</title><rect x="73.3713%" y="693" width="0.0336%" height="15" fill="rgb(227,68,33)" fg:x="83038" fg:w="38"/><text x="73.6213%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (38 samples, 0.03%)</title><rect x="73.3713%" y="677" width="0.0336%" height="15" fill="rgb(238,34,41)" fg:x="83038" fg:w="38"/><text x="73.6213%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (38 samples, 0.03%)</title><rect x="73.3713%" y="661" width="0.0336%" height="15" fill="rgb(220,11,15)" fg:x="83038" fg:w="38"/><text x="73.6213%" y="671.50"></text></g><g><title>alloc::alloc::alloc (38 samples, 0.03%)</title><rect x="73.3713%" y="645" width="0.0336%" height="15" fill="rgb(246,111,35)" fg:x="83038" fg:w="38"/><text x="73.6213%" y="655.50"></text></g><g><title>__rg_alloc (38 samples, 0.03%)</title><rect x="73.3713%" y="629" width="0.0336%" height="15" fill="rgb(209,88,53)" fg:x="83038" fg:w="38"/><text x="73.6213%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (38 samples, 0.03%)</title><rect x="73.3713%" y="613" width="0.0336%" height="15" fill="rgb(231,185,47)" fg:x="83038" fg:w="38"/><text x="73.6213%" y="623.50"></text></g><g><title>sn_rust_alloc (38 samples, 0.03%)</title><rect x="73.3713%" y="597" width="0.0336%" height="15" fill="rgb(233,154,1)" fg:x="83038" fg:w="38"/><text x="73.6213%" y="607.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (38 samples, 0.03%)</title><rect x="73.3713%" y="581" width="0.0336%" height="15" fill="rgb(225,15,46)" fg:x="83038" fg:w="38"/><text x="73.6213%" y="591.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (17 samples, 0.02%)</title><rect x="73.4332%" y="933" width="0.0150%" height="15" fill="rgb(211,135,41)" fg:x="83108" fg:w="17"/><text x="73.6832%" y="943.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (48 samples, 0.04%)</title><rect x="73.4137%" y="949" width="0.0424%" height="15" fill="rgb(208,54,0)" fg:x="83086" fg:w="48"/><text x="73.6637%" y="959.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (77 samples, 0.07%)</title><rect x="73.5277%" y="789" width="0.0680%" height="15" fill="rgb(244,136,14)" fg:x="83215" fg:w="77"/><text x="73.7777%" y="799.50"></text></g><g><title>core::mem::replace (77 samples, 0.07%)</title><rect x="73.5277%" y="773" width="0.0680%" height="15" fill="rgb(241,56,14)" fg:x="83215" fg:w="77"/><text x="73.7777%" y="783.50"></text></g><g><title>core::ptr::read (77 samples, 0.07%)</title><rect x="73.5277%" y="757" width="0.0680%" height="15" fill="rgb(205,80,24)" fg:x="83215" fg:w="77"/><text x="73.7777%" y="767.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (135 samples, 0.12%)</title><rect x="73.5003%" y="805" width="0.1193%" height="15" fill="rgb(220,57,4)" fg:x="83184" fg:w="135"/><text x="73.7503%" y="815.50"></text></g><g><title>core::mem::drop (27 samples, 0.02%)</title><rect x="73.5958%" y="789" width="0.0239%" height="15" fill="rgb(226,193,50)" fg:x="83292" fg:w="27"/><text x="73.8458%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (27 samples, 0.02%)</title><rect x="73.5958%" y="773" width="0.0239%" height="15" fill="rgb(231,168,22)" fg:x="83292" fg:w="27"/><text x="73.8458%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (135 samples, 0.12%)</title><rect x="73.6196%" y="805" width="0.1193%" height="15" fill="rgb(254,215,14)" fg:x="83319" fg:w="135"/><text x="73.8696%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (131 samples, 0.12%)</title><rect x="73.6231%" y="789" width="0.1157%" height="15" fill="rgb(211,115,16)" fg:x="83323" fg:w="131"/><text x="73.8731%" y="799.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (131 samples, 0.12%)</title><rect x="73.6231%" y="773" width="0.1157%" height="15" fill="rgb(236,210,16)" fg:x="83323" fg:w="131"/><text x="73.8731%" y="783.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (123 samples, 0.11%)</title><rect x="73.6302%" y="757" width="0.1087%" height="15" fill="rgb(221,94,12)" fg:x="83331" fg:w="123"/><text x="73.8802%" y="767.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (123 samples, 0.11%)</title><rect x="73.6302%" y="741" width="0.1087%" height="15" fill="rgb(235,218,49)" fg:x="83331" fg:w="123"/><text x="73.8802%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (123 samples, 0.11%)</title><rect x="73.6302%" y="725" width="0.1087%" height="15" fill="rgb(217,114,14)" fg:x="83331" fg:w="123"/><text x="73.8802%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_swap (123 samples, 0.11%)</title><rect x="73.6302%" y="709" width="0.1087%" height="15" fill="rgb(216,145,22)" fg:x="83331" fg:w="123"/><text x="73.8802%" y="719.50"></text></g><g><title>core::task::wake::Waker::will_wake (18 samples, 0.02%)</title><rect x="73.7433%" y="805" width="0.0159%" height="15" fill="rgb(217,112,39)" fg:x="83459" fg:w="18"/><text x="73.9933%" y="815.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (18 samples, 0.02%)</title><rect x="73.7433%" y="789" width="0.0159%" height="15" fill="rgb(225,85,32)" fg:x="83459" fg:w="18"/><text x="73.9933%" y="799.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (18 samples, 0.02%)</title><rect x="73.7433%" y="773" width="0.0159%" height="15" fill="rgb(245,209,47)" fg:x="83459" fg:w="18"/><text x="73.9933%" y="783.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (18 samples, 0.02%)</title><rect x="73.7433%" y="757" width="0.0159%" height="15" fill="rgb(218,220,15)" fg:x="83459" fg:w="18"/><text x="73.9933%" y="767.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (15 samples, 0.01%)</title><rect x="73.7636%" y="773" width="0.0133%" height="15" fill="rgb(222,202,31)" fg:x="83482" fg:w="15"/><text x="74.0136%" y="783.50"></text></g><g><title>std::sync::poison::Flag::borrow (15 samples, 0.01%)</title><rect x="73.7636%" y="757" width="0.0133%" height="15" fill="rgb(243,203,4)" fg:x="83482" fg:w="15"/><text x="74.0136%" y="767.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (519 samples, 0.46%)</title><rect x="73.4659%" y="933" width="0.4586%" height="15" fill="rgb(237,92,17)" fg:x="83145" fg:w="519"/><text x="73.7159%" y="943.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (519 samples, 0.46%)</title><rect x="73.4659%" y="917" width="0.4586%" height="15" fill="rgb(231,119,7)" fg:x="83145" fg:w="519"/><text x="73.7159%" y="927.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (519 samples, 0.46%)</title><rect x="73.4659%" y="901" width="0.4586%" height="15" fill="rgb(237,82,41)" fg:x="83145" fg:w="519"/><text x="73.7159%" y="911.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (519 samples, 0.46%)</title><rect x="73.4659%" y="885" width="0.4586%" height="15" fill="rgb(226,81,48)" fg:x="83145" fg:w="519"/><text x="73.7159%" y="895.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (519 samples, 0.46%)</title><rect x="73.4659%" y="869" width="0.4586%" height="15" fill="rgb(234,70,51)" fg:x="83145" fg:w="519"/><text x="73.7159%" y="879.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (519 samples, 0.46%)</title><rect x="73.4659%" y="853" width="0.4586%" height="15" fill="rgb(251,86,4)" fg:x="83145" fg:w="519"/><text x="73.7159%" y="863.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (519 samples, 0.46%)</title><rect x="73.4659%" y="837" width="0.4586%" height="15" fill="rgb(244,144,28)" fg:x="83145" fg:w="519"/><text x="73.7159%" y="847.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (519 samples, 0.46%)</title><rect x="73.4659%" y="821" width="0.4586%" height="15" fill="rgb(232,161,39)" fg:x="83145" fg:w="519"/><text x="73.7159%" y="831.50"></text></g><g><title>event_listener::Inner::lock (187 samples, 0.17%)</title><rect x="73.7592%" y="805" width="0.1652%" height="15" fill="rgb(247,34,51)" fg:x="83477" fg:w="187"/><text x="74.0092%" y="815.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (182 samples, 0.16%)</title><rect x="73.7636%" y="789" width="0.1608%" height="15" fill="rgb(225,132,2)" fg:x="83482" fg:w="182"/><text x="74.0136%" y="799.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (167 samples, 0.15%)</title><rect x="73.7769%" y="773" width="0.1476%" height="15" fill="rgb(209,159,44)" fg:x="83497" fg:w="167"/><text x="74.0269%" y="783.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (167 samples, 0.15%)</title><rect x="73.7769%" y="757" width="0.1476%" height="15" fill="rgb(251,214,1)" fg:x="83497" fg:w="167"/><text x="74.0269%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (167 samples, 0.15%)</title><rect x="73.7769%" y="741" width="0.1476%" height="15" fill="rgb(247,84,47)" fg:x="83497" fg:w="167"/><text x="74.0269%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (167 samples, 0.15%)</title><rect x="73.7769%" y="725" width="0.1476%" height="15" fill="rgb(240,111,43)" fg:x="83497" fg:w="167"/><text x="74.0269%" y="735.50"></text></g><g><title>alloc::borrow::Cow&lt;B&gt;::into_owned (17 samples, 0.02%)</title><rect x="74.0835%" y="709" width="0.0150%" height="15" fill="rgb(215,214,35)" fg:x="83844" fg:w="17"/><text x="74.3335%" y="719.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (16 samples, 0.01%)</title><rect x="74.0844%" y="693" width="0.0141%" height="15" fill="rgb(248,207,23)" fg:x="83845" fg:w="16"/><text x="74.3344%" y="703.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (16 samples, 0.01%)</title><rect x="74.0844%" y="677" width="0.0141%" height="15" fill="rgb(214,186,4)" fg:x="83845" fg:w="16"/><text x="74.3344%" y="687.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (83 samples, 0.07%)</title><rect x="74.0985%" y="709" width="0.0733%" height="15" fill="rgb(220,133,22)" fg:x="83861" fg:w="83"/><text x="74.3485%" y="719.50"></text></g><g><title>sn_rust_dealloc (29 samples, 0.03%)</title><rect x="74.2240%" y="629" width="0.0256%" height="15" fill="rgb(239,134,19)" fg:x="84003" fg:w="29"/><text x="74.4740%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (66 samples, 0.06%)</title><rect x="74.2072%" y="677" width="0.0583%" height="15" fill="rgb(250,140,9)" fg:x="83984" fg:w="66"/><text x="74.4572%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt;&gt; (59 samples, 0.05%)</title><rect x="74.2134%" y="661" width="0.0521%" height="15" fill="rgb(225,59,14)" fg:x="83991" fg:w="59"/><text x="74.4634%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (53 samples, 0.05%)</title><rect x="74.2187%" y="645" width="0.0468%" height="15" fill="rgb(214,152,51)" fg:x="83997" fg:w="53"/><text x="74.4687%" y="655.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (18 samples, 0.02%)</title><rect x="74.2496%" y="629" width="0.0159%" height="15" fill="rgb(251,227,43)" fg:x="84032" fg:w="18"/><text x="74.4996%" y="639.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (26 samples, 0.02%)</title><rect x="74.2744%" y="645" width="0.0230%" height="15" fill="rgb(241,96,17)" fg:x="84060" fg:w="26"/><text x="74.5244%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (16 samples, 0.01%)</title><rect x="74.3088%" y="533" width="0.0141%" height="15" fill="rgb(234,198,43)" fg:x="84099" fg:w="16"/><text x="74.5588%" y="543.50"></text></g><g><title>sn_rust_alloc (15 samples, 0.01%)</title><rect x="74.3097%" y="517" width="0.0133%" height="15" fill="rgb(220,108,29)" fg:x="84100" fg:w="15"/><text x="74.5597%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (17 samples, 0.02%)</title><rect x="74.3088%" y="565" width="0.0150%" height="15" fill="rgb(226,163,33)" fg:x="84099" fg:w="17"/><text x="74.5588%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (17 samples, 0.02%)</title><rect x="74.3088%" y="549" width="0.0150%" height="15" fill="rgb(205,194,45)" fg:x="84099" fg:w="17"/><text x="74.5588%" y="559.50"></text></g><g><title>halfbrown::raw_entry::RawVacantEntryMut&lt;K,V,S&gt;::insert (56 samples, 0.05%)</title><rect x="74.3017%" y="629" width="0.0495%" height="15" fill="rgb(206,143,44)" fg:x="84091" fg:w="56"/><text x="74.5517%" y="639.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawVacantEntryMut&lt;K,V,S&gt;::insert (55 samples, 0.05%)</title><rect x="74.3026%" y="613" width="0.0486%" height="15" fill="rgb(236,136,36)" fg:x="84092" fg:w="55"/><text x="74.5526%" y="623.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::insert_idx (51 samples, 0.05%)</title><rect x="74.3062%" y="597" width="0.0451%" height="15" fill="rgb(249,172,42)" fg:x="84096" fg:w="51"/><text x="74.5562%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (50 samples, 0.04%)</title><rect x="74.3070%" y="581" width="0.0442%" height="15" fill="rgb(216,139,23)" fg:x="84097" fg:w="50"/><text x="74.5570%" y="591.50"></text></g><g><title>core::ptr::write (30 samples, 0.03%)</title><rect x="74.3247%" y="565" width="0.0265%" height="15" fill="rgb(207,166,20)" fg:x="84117" fg:w="30"/><text x="74.5747%" y="575.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (47 samples, 0.04%)</title><rect x="74.3583%" y="581" width="0.0415%" height="15" fill="rgb(210,209,22)" fg:x="84155" fg:w="47"/><text x="74.6083%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (15 samples, 0.01%)</title><rect x="74.3866%" y="565" width="0.0133%" height="15" fill="rgb(232,118,20)" fg:x="84187" fg:w="15"/><text x="74.6366%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (15 samples, 0.01%)</title><rect x="74.3866%" y="549" width="0.0133%" height="15" fill="rgb(238,113,42)" fg:x="84187" fg:w="15"/><text x="74.6366%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (15 samples, 0.01%)</title><rect x="74.3866%" y="533" width="0.0133%" height="15" fill="rgb(231,42,5)" fg:x="84187" fg:w="15"/><text x="74.6366%" y="543.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.01%)</title><rect x="74.3875%" y="517" width="0.0124%" height="15" fill="rgb(243,166,24)" fg:x="84188" fg:w="14"/><text x="74.6375%" y="527.50"></text></g><g><title>__rg_alloc (14 samples, 0.01%)</title><rect x="74.3875%" y="501" width="0.0124%" height="15" fill="rgb(237,226,12)" fg:x="84188" fg:w="14"/><text x="74.6375%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (14 samples, 0.01%)</title><rect x="74.3875%" y="485" width="0.0124%" height="15" fill="rgb(229,133,24)" fg:x="84188" fg:w="14"/><text x="74.6375%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (103 samples, 0.09%)</title><rect x="74.4175%" y="389" width="0.0910%" height="15" fill="rgb(238,33,43)" fg:x="84222" fg:w="103"/><text x="74.6675%" y="399.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (388 samples, 0.34%)</title><rect x="74.1719%" y="709" width="0.3428%" height="15" fill="rgb(227,59,38)" fg:x="83944" fg:w="388"/><text x="74.4219%" y="719.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (369 samples, 0.33%)</title><rect x="74.1886%" y="693" width="0.3260%" height="15" fill="rgb(230,97,0)" fg:x="83963" fg:w="369"/><text x="74.4386%" y="703.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (273 samples, 0.24%)</title><rect x="74.2735%" y="677" width="0.2412%" height="15" fill="rgb(250,173,50)" fg:x="84059" fg:w="273"/><text x="74.5235%" y="687.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (273 samples, 0.24%)</title><rect x="74.2735%" y="661" width="0.2412%" height="15" fill="rgb(240,15,50)" fg:x="84059" fg:w="273"/><text x="74.5235%" y="671.50"></text></g><g><title>halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt;::or_insert_with (241 samples, 0.21%)</title><rect x="74.3017%" y="645" width="0.2129%" height="15" fill="rgb(221,93,22)" fg:x="84091" fg:w="241"/><text x="74.5517%" y="655.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut::{{closure}} (185 samples, 0.16%)</title><rect x="74.3512%" y="629" width="0.1635%" height="15" fill="rgb(245,180,53)" fg:x="84147" fg:w="185"/><text x="74.6012%" y="639.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (177 samples, 0.16%)</title><rect x="74.3583%" y="613" width="0.1564%" height="15" fill="rgb(231,88,51)" fg:x="84155" fg:w="177"/><text x="74.6083%" y="623.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (177 samples, 0.16%)</title><rect x="74.3583%" y="597" width="0.1564%" height="15" fill="rgb(240,58,21)" fg:x="84155" fg:w="177"/><text x="74.6083%" y="607.50"></text></g><g><title>halfbrown::HashMap&lt;K,V&gt;::with_capacity (130 samples, 0.11%)</title><rect x="74.3998%" y="581" width="0.1149%" height="15" fill="rgb(237,21,10)" fg:x="84202" fg:w="130"/><text x="74.6498%" y="591.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V&gt;::with_capacity (128 samples, 0.11%)</title><rect x="74.4016%" y="565" width="0.1131%" height="15" fill="rgb(218,43,11)" fg:x="84204" fg:w="128"/><text x="74.6516%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (128 samples, 0.11%)</title><rect x="74.4016%" y="549" width="0.1131%" height="15" fill="rgb(218,221,29)" fg:x="84204" fg:w="128"/><text x="74.6516%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (128 samples, 0.11%)</title><rect x="74.4016%" y="533" width="0.1131%" height="15" fill="rgb(214,118,42)" fg:x="84204" fg:w="128"/><text x="74.6516%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (128 samples, 0.11%)</title><rect x="74.4016%" y="517" width="0.1131%" height="15" fill="rgb(251,200,26)" fg:x="84204" fg:w="128"/><text x="74.6516%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (128 samples, 0.11%)</title><rect x="74.4016%" y="501" width="0.1131%" height="15" fill="rgb(237,101,39)" fg:x="84204" fg:w="128"/><text x="74.6516%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (128 samples, 0.11%)</title><rect x="74.4016%" y="485" width="0.1131%" height="15" fill="rgb(251,117,11)" fg:x="84204" fg:w="128"/><text x="74.6516%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (128 samples, 0.11%)</title><rect x="74.4016%" y="469" width="0.1131%" height="15" fill="rgb(216,223,23)" fg:x="84204" fg:w="128"/><text x="74.6516%" y="479.50"></text></g><g><title>alloc::alloc::alloc (128 samples, 0.11%)</title><rect x="74.4016%" y="453" width="0.1131%" height="15" fill="rgb(251,54,12)" fg:x="84204" fg:w="128"/><text x="74.6516%" y="463.50"></text></g><g><title>__rg_alloc (128 samples, 0.11%)</title><rect x="74.4016%" y="437" width="0.1131%" height="15" fill="rgb(254,176,54)" fg:x="84204" fg:w="128"/><text x="74.6516%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (128 samples, 0.11%)</title><rect x="74.4016%" y="421" width="0.1131%" height="15" fill="rgb(210,32,8)" fg:x="84204" fg:w="128"/><text x="74.6516%" y="431.50"></text></g><g><title>sn_rust_alloc (127 samples, 0.11%)</title><rect x="74.4025%" y="405" width="0.1122%" height="15" fill="rgb(235,52,38)" fg:x="84205" fg:w="127"/><text x="74.6525%" y="415.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (595 samples, 0.53%)</title><rect x="73.9898%" y="741" width="0.5257%" height="15" fill="rgb(231,4,44)" fg:x="83738" fg:w="595"/><text x="74.2398%" y="751.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (558 samples, 0.49%)</title><rect x="74.0225%" y="725" width="0.4930%" height="15" fill="rgb(249,2,32)" fg:x="83775" fg:w="558"/><text x="74.2725%" y="735.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (19 samples, 0.02%)</title><rect x="74.5536%" y="709" width="0.0168%" height="15" fill="rgb(224,65,26)" fg:x="84376" fg:w="19"/><text x="74.8036%" y="719.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (119 samples, 0.11%)</title><rect x="74.5818%" y="581" width="0.1051%" height="15" fill="rgb(250,73,40)" fg:x="84408" fg:w="119"/><text x="74.8318%" y="591.50"></text></g><g><title>tremor_value::value::cmp::&lt;impl core::cmp::PartialEq for tremor_value::value::Value&gt;::eq (119 samples, 0.11%)</title><rect x="74.5818%" y="565" width="0.1051%" height="15" fill="rgb(253,177,16)" fg:x="84408" fg:w="119"/><text x="74.8318%" y="575.50"></text></g><g><title>[libc-2.31.so] (22 samples, 0.02%)</title><rect x="74.6676%" y="549" width="0.0194%" height="15" fill="rgb(217,32,34)" fg:x="84505" fg:w="22"/><text x="74.9176%" y="559.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (132 samples, 0.12%)</title><rect x="74.5765%" y="661" width="0.1166%" height="15" fill="rgb(212,7,10)" fg:x="84402" fg:w="132"/><text x="74.8265%" y="671.50"></text></g><g><title>tremor_script::std_lib::array::load::&lt;impl tremor_script::registry::TremorFn for tremor_script::std_lib::array::load::contains::Func&gt;::invoke::{{closure}} (132 samples, 0.12%)</title><rect x="74.5765%" y="645" width="0.1166%" height="15" fill="rgb(245,89,8)" fg:x="84402" fg:w="132"/><text x="74.8265%" y="655.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (131 samples, 0.12%)</title><rect x="74.5774%" y="629" width="0.1157%" height="15" fill="rgb(237,16,53)" fg:x="84403" fg:w="131"/><text x="74.8274%" y="639.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (131 samples, 0.12%)</title><rect x="74.5774%" y="613" width="0.1157%" height="15" fill="rgb(250,204,30)" fg:x="84403" fg:w="131"/><text x="74.8274%" y="623.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (131 samples, 0.12%)</title><rect x="74.5774%" y="597" width="0.1157%" height="15" fill="rgb(208,77,27)" fg:x="84403" fg:w="131"/><text x="74.8274%" y="607.50"></text></g><g><title>tremor_script::ast::Invocable::invoke (139 samples, 0.12%)</title><rect x="74.5730%" y="709" width="0.1228%" height="15" fill="rgb(250,204,28)" fg:x="84398" fg:w="139"/><text x="74.8230%" y="719.50"></text></g><g><title>tremor_script::registry::TremorFnWrapper::invoke (137 samples, 0.12%)</title><rect x="74.5748%" y="693" width="0.1211%" height="15" fill="rgb(244,63,21)" fg:x="84400" fg:w="137"/><text x="74.8248%" y="703.50"></text></g><g><title>tremor_script::std_lib::array::load::&lt;impl tremor_script::registry::TremorFn for tremor_script::std_lib::array::load::contains::Func&gt;::invoke (136 samples, 0.12%)</title><rect x="74.5757%" y="677" width="0.1202%" height="15" fill="rgb(236,85,44)" fg:x="84401" fg:w="136"/><text x="74.8257%" y="687.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (317 samples, 0.28%)</title><rect x="74.5156%" y="741" width="0.2801%" height="15" fill="rgb(215,98,4)" fg:x="84333" fg:w="317"/><text x="74.7656%" y="751.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::invoke2 (306 samples, 0.27%)</title><rect x="74.5253%" y="725" width="0.2704%" height="15" fill="rgb(235,38,11)" fg:x="84344" fg:w="306"/><text x="74.7753%" y="735.50"></text></g><g><title>tremor_script::interpreter::imut_expr::eval_for_fn_arg (113 samples, 0.10%)</title><rect x="74.6958%" y="709" width="0.0998%" height="15" fill="rgb(254,186,25)" fg:x="84537" fg:w="113"/><text x="74.9458%" y="719.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (92 samples, 0.08%)</title><rect x="74.7144%" y="693" width="0.0813%" height="15" fill="rgb(225,55,31)" fg:x="84558" fg:w="92"/><text x="74.9644%" y="703.50"></text></g><g><title>tremor_script::interpreter::resolve (79 samples, 0.07%)</title><rect x="74.7259%" y="677" width="0.0698%" height="15" fill="rgb(211,15,21)" fg:x="84571" fg:w="79"/><text x="74.9759%" y="687.50"></text></g><g><title>tremor_script::interpreter::resolve_value (77 samples, 0.07%)</title><rect x="74.7276%" y="661" width="0.0680%" height="15" fill="rgb(215,187,41)" fg:x="84573" fg:w="77"/><text x="74.9776%" y="671.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup (62 samples, 0.05%)</title><rect x="74.7409%" y="645" width="0.0548%" height="15" fill="rgb(248,69,32)" fg:x="84588" fg:w="62"/><text x="74.9909%" y="655.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (62 samples, 0.05%)</title><rect x="74.7409%" y="629" width="0.0548%" height="15" fill="rgb(252,102,52)" fg:x="84588" fg:w="62"/><text x="74.9909%" y="639.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (61 samples, 0.05%)</title><rect x="74.7418%" y="613" width="0.0539%" height="15" fill="rgb(253,140,32)" fg:x="84589" fg:w="61"/><text x="74.9918%" y="623.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (61 samples, 0.05%)</title><rect x="74.7418%" y="597" width="0.0539%" height="15" fill="rgb(216,56,42)" fg:x="84589" fg:w="61"/><text x="74.9918%" y="607.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_key_hashed_nocheck (61 samples, 0.05%)</title><rect x="74.7418%" y="581" width="0.0539%" height="15" fill="rgb(216,184,14)" fg:x="84589" fg:w="61"/><text x="74.9918%" y="591.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_key_hashed_nocheck (59 samples, 0.05%)</title><rect x="74.7435%" y="565" width="0.0521%" height="15" fill="rgb(237,187,27)" fg:x="84591" fg:w="59"/><text x="74.9935%" y="575.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_hash (59 samples, 0.05%)</title><rect x="74.7435%" y="549" width="0.0521%" height="15" fill="rgb(219,65,3)" fg:x="84591" fg:w="59"/><text x="74.9935%" y="559.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::search (59 samples, 0.05%)</title><rect x="74.7435%" y="533" width="0.0521%" height="15" fill="rgb(245,83,25)" fg:x="84591" fg:w="59"/><text x="74.9935%" y="543.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (59 samples, 0.05%)</title><rect x="74.7435%" y="517" width="0.0521%" height="15" fill="rgb(214,205,45)" fg:x="84591" fg:w="59"/><text x="74.9935%" y="527.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (52 samples, 0.05%)</title><rect x="74.7497%" y="501" width="0.0459%" height="15" fill="rgb(241,20,18)" fg:x="84598" fg:w="52"/><text x="74.9997%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (52 samples, 0.05%)</title><rect x="74.7497%" y="485" width="0.0459%" height="15" fill="rgb(232,163,23)" fg:x="84598" fg:w="52"/><text x="74.9997%" y="495.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (52 samples, 0.05%)</title><rect x="74.7497%" y="469" width="0.0459%" height="15" fill="rgb(214,5,46)" fg:x="84598" fg:w="52"/><text x="74.9997%" y="479.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (52 samples, 0.05%)</title><rect x="74.7497%" y="453" width="0.0459%" height="15" fill="rgb(229,78,17)" fg:x="84598" fg:w="52"/><text x="74.9997%" y="463.50"></text></g><g><title>[libc-2.31.so] (31 samples, 0.03%)</title><rect x="74.7683%" y="437" width="0.0274%" height="15" fill="rgb(248,89,10)" fg:x="84619" fg:w="31"/><text x="75.0183%" y="447.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (963 samples, 0.85%)</title><rect x="73.9766%" y="757" width="0.8509%" height="15" fill="rgb(248,54,15)" fg:x="83723" fg:w="963"/><text x="74.2266%" y="767.50"></text></g><g><title>tremor_script::interpreter::test_predicate_expr (36 samples, 0.03%)</title><rect x="74.7957%" y="741" width="0.0318%" height="15" fill="rgb(223,116,6)" fg:x="84650" fg:w="36"/><text x="75.0457%" y="751.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (15 samples, 0.01%)</title><rect x="75.0678%" y="741" width="0.0133%" height="15" fill="rgb(205,125,38)" fg:x="84958" fg:w="15"/><text x="75.3178%" y="751.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (15 samples, 0.01%)</title><rect x="75.0678%" y="725" width="0.0133%" height="15" fill="rgb(251,78,38)" fg:x="84958" fg:w="15"/><text x="75.3178%" y="735.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (15 samples, 0.01%)</title><rect x="75.0678%" y="709" width="0.0133%" height="15" fill="rgb(253,78,28)" fg:x="84958" fg:w="15"/><text x="75.3178%" y="719.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::ops::deref::Deref&gt;::deref (13 samples, 0.01%)</title><rect x="75.0811%" y="741" width="0.0115%" height="15" fill="rgb(209,120,3)" fg:x="84973" fg:w="13"/><text x="75.3311%" y="751.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.03%)</title><rect x="75.0926%" y="741" width="0.0256%" height="15" fill="rgb(238,229,9)" fg:x="84986" fg:w="29"/><text x="75.3426%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::borrow::Cow&lt;tremor_value::value::Value&gt;&gt;&gt; (25 samples, 0.02%)</title><rect x="75.1252%" y="741" width="0.0221%" height="15" fill="rgb(253,159,18)" fg:x="85023" fg:w="25"/><text x="75.3752%" y="751.50"></text></g><g><title>tremor_script::ast::ClauseGroup&lt;Ex&gt;::precondition (40 samples, 0.04%)</title><rect x="75.1473%" y="741" width="0.0353%" height="15" fill="rgb(244,42,34)" fg:x="85048" fg:w="40"/><text x="75.3973%" y="751.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (40 samples, 0.04%)</title><rect x="75.1473%" y="725" width="0.0353%" height="15" fill="rgb(224,8,7)" fg:x="85048" fg:w="40"/><text x="75.3973%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (62 samples, 0.05%)</title><rect x="76.5328%" y="549" width="0.0548%" height="15" fill="rgb(210,201,45)" fg:x="86616" fg:w="62"/><text x="76.7828%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (62 samples, 0.05%)</title><rect x="76.5328%" y="533" width="0.0548%" height="15" fill="rgb(252,185,21)" fg:x="86616" fg:w="62"/><text x="76.7828%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (62 samples, 0.05%)</title><rect x="76.5328%" y="517" width="0.0548%" height="15" fill="rgb(223,131,1)" fg:x="86616" fg:w="62"/><text x="76.7828%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (62 samples, 0.05%)</title><rect x="76.5328%" y="501" width="0.0548%" height="15" fill="rgb(245,141,16)" fg:x="86616" fg:w="62"/><text x="76.7828%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (62 samples, 0.05%)</title><rect x="76.5328%" y="485" width="0.0548%" height="15" fill="rgb(229,55,45)" fg:x="86616" fg:w="62"/><text x="76.7828%" y="495.50"></text></g><g><title>alloc::alloc::alloc (60 samples, 0.05%)</title><rect x="76.5346%" y="469" width="0.0530%" height="15" fill="rgb(208,92,15)" fg:x="86618" fg:w="60"/><text x="76.7846%" y="479.50"></text></g><g><title>__rg_alloc (60 samples, 0.05%)</title><rect x="76.5346%" y="453" width="0.0530%" height="15" fill="rgb(234,185,47)" fg:x="86618" fg:w="60"/><text x="76.7846%" y="463.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (60 samples, 0.05%)</title><rect x="76.5346%" y="437" width="0.0530%" height="15" fill="rgb(253,104,50)" fg:x="86618" fg:w="60"/><text x="76.7846%" y="447.50"></text></g><g><title>sn_rust_alloc (58 samples, 0.05%)</title><rect x="76.5363%" y="421" width="0.0512%" height="15" fill="rgb(205,70,7)" fg:x="86620" fg:w="58"/><text x="76.7863%" y="431.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (88 samples, 0.08%)</title><rect x="76.5328%" y="645" width="0.0778%" height="15" fill="rgb(240,178,43)" fg:x="86616" fg:w="88"/><text x="76.7828%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (88 samples, 0.08%)</title><rect x="76.5328%" y="629" width="0.0778%" height="15" fill="rgb(214,112,2)" fg:x="86616" fg:w="88"/><text x="76.7828%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (88 samples, 0.08%)</title><rect x="76.5328%" y="613" width="0.0778%" height="15" fill="rgb(206,46,17)" fg:x="86616" fg:w="88"/><text x="76.7828%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (88 samples, 0.08%)</title><rect x="76.5328%" y="597" width="0.0778%" height="15" fill="rgb(225,220,16)" fg:x="86616" fg:w="88"/><text x="76.7828%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (88 samples, 0.08%)</title><rect x="76.5328%" y="581" width="0.0778%" height="15" fill="rgb(238,65,40)" fg:x="86616" fg:w="88"/><text x="76.7828%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (88 samples, 0.08%)</title><rect x="76.5328%" y="565" width="0.0778%" height="15" fill="rgb(230,151,21)" fg:x="86616" fg:w="88"/><text x="76.7828%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (26 samples, 0.02%)</title><rect x="76.5876%" y="549" width="0.0230%" height="15" fill="rgb(218,58,49)" fg:x="86678" fg:w="26"/><text x="76.8376%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (26 samples, 0.02%)</title><rect x="76.5876%" y="533" width="0.0230%" height="15" fill="rgb(219,179,14)" fg:x="86678" fg:w="26"/><text x="76.8376%" y="543.50"></text></g><g><title>[libc-2.31.so] (26 samples, 0.02%)</title><rect x="76.5876%" y="517" width="0.0230%" height="15" fill="rgb(223,72,1)" fg:x="86678" fg:w="26"/><text x="76.8376%" y="527.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (164 samples, 0.14%)</title><rect x="76.4683%" y="693" width="0.1449%" height="15" fill="rgb(238,126,10)" fg:x="86543" fg:w="164"/><text x="76.7183%" y="703.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (154 samples, 0.14%)</title><rect x="76.4771%" y="677" width="0.1361%" height="15" fill="rgb(224,206,38)" fg:x="86553" fg:w="154"/><text x="76.7271%" y="687.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::clone::Clone&gt;::clone (98 samples, 0.09%)</title><rect x="76.5266%" y="661" width="0.0866%" height="15" fill="rgb(212,201,54)" fg:x="86609" fg:w="98"/><text x="76.7766%" y="671.50"></text></g><g><title>alloc::borrow::Cow&lt;B&gt;::into_owned (206 samples, 0.18%)</title><rect x="76.4374%" y="709" width="0.1820%" height="15" fill="rgb(218,154,48)" fg:x="86508" fg:w="206"/><text x="76.6874%" y="719.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (743 samples, 0.66%)</title><rect x="76.6291%" y="709" width="0.6565%" height="15" fill="rgb(232,93,24)" fg:x="86725" fg:w="743"/><text x="76.8791%" y="719.50"></text></g><g><title>tremor_script::ast::Path::segments (37 samples, 0.03%)</title><rect x="77.4367%" y="693" width="0.0327%" height="15" fill="rgb(245,30,21)" fg:x="87639" fg:w="37"/><text x="77.6867%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (29 samples, 0.03%)</title><rect x="77.6444%" y="677" width="0.0256%" height="15" fill="rgb(242,148,29)" fg:x="87874" fg:w="29"/><text x="77.8944%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (16 samples, 0.01%)</title><rect x="77.6558%" y="661" width="0.0141%" height="15" fill="rgb(244,153,54)" fg:x="87887" fg:w="16"/><text x="77.9058%" y="671.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="77.6700%" y="677" width="0.0115%" height="15" fill="rgb(252,87,22)" fg:x="87903" fg:w="13"/><text x="77.9200%" y="687.50"></text></g><g><title>alloc::alloc::box_free (12 samples, 0.01%)</title><rect x="77.7734%" y="645" width="0.0106%" height="15" fill="rgb(210,51,29)" fg:x="88020" fg:w="12"/><text x="78.0234%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (12 samples, 0.01%)</title><rect x="77.7734%" y="629" width="0.0106%" height="15" fill="rgb(242,136,47)" fg:x="88020" fg:w="12"/><text x="78.0234%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (12 samples, 0.01%)</title><rect x="77.7734%" y="613" width="0.0106%" height="15" fill="rgb(238,68,4)" fg:x="88020" fg:w="12"/><text x="78.0234%" y="623.50"></text></g><g><title>__rg_dealloc (12 samples, 0.01%)</title><rect x="77.7734%" y="597" width="0.0106%" height="15" fill="rgb(242,161,30)" fg:x="88020" fg:w="12"/><text x="78.0234%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (12 samples, 0.01%)</title><rect x="77.7734%" y="581" width="0.0106%" height="15" fill="rgb(218,58,44)" fg:x="88020" fg:w="12"/><text x="78.0234%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.03%)</title><rect x="77.8034%" y="581" width="0.0274%" height="15" fill="rgb(252,125,32)" fg:x="88054" fg:w="31"/><text x="78.0534%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)]&gt; (29 samples, 0.03%)</title><rect x="77.8052%" y="565" width="0.0256%" height="15" fill="rgb(219,178,0)" fg:x="88056" fg:w="29"/><text x="78.0552%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.01%)</title><rect x="77.8414%" y="549" width="0.0124%" height="15" fill="rgb(213,152,7)" fg:x="88097" fg:w="14"/><text x="78.0914%" y="559.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.01%)</title><rect x="77.8414%" y="533" width="0.0124%" height="15" fill="rgb(249,109,34)" fg:x="88097" fg:w="14"/><text x="78.0914%" y="543.50"></text></g><g><title>__rg_dealloc (14 samples, 0.01%)</title><rect x="77.8414%" y="517" width="0.0124%" height="15" fill="rgb(232,96,21)" fg:x="88097" fg:w="14"/><text x="78.0914%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (14 samples, 0.01%)</title><rect x="77.8414%" y="501" width="0.0124%" height="15" fill="rgb(228,27,39)" fg:x="88097" fg:w="14"/><text x="78.0914%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (80 samples, 0.07%)</title><rect x="77.7840%" y="629" width="0.0707%" height="15" fill="rgb(211,182,52)" fg:x="88032" fg:w="80"/><text x="78.0340%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::vecmap::VecMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (58 samples, 0.05%)</title><rect x="77.8034%" y="613" width="0.0512%" height="15" fill="rgb(234,178,38)" fg:x="88054" fg:w="58"/><text x="78.0534%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)&gt;&gt; (58 samples, 0.05%)</title><rect x="77.8034%" y="597" width="0.0512%" height="15" fill="rgb(221,111,3)" fg:x="88054" fg:w="58"/><text x="78.0534%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)&gt;&gt; (27 samples, 0.02%)</title><rect x="77.8308%" y="581" width="0.0239%" height="15" fill="rgb(228,175,21)" fg:x="88085" fg:w="27"/><text x="78.0808%" y="591.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.02%)</title><rect x="77.8308%" y="565" width="0.0239%" height="15" fill="rgb(228,174,43)" fg:x="88085" fg:w="27"/><text x="78.0808%" y="575.50"></text></g><g><title>sn_rust_dealloc (358 samples, 0.32%)</title><rect x="77.8546%" y="629" width="0.3163%" height="15" fill="rgb(211,191,0)" fg:x="88112" fg:w="358"/><text x="78.1046%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (659 samples, 0.58%)</title><rect x="77.6815%" y="677" width="0.5823%" height="15" fill="rgb(253,117,3)" fg:x="87916" fg:w="659"/><text x="77.9315%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt;&gt; (594 samples, 0.52%)</title><rect x="77.7389%" y="661" width="0.5249%" height="15" fill="rgb(241,127,19)" fg:x="87981" fg:w="594"/><text x="77.9889%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (543 samples, 0.48%)</title><rect x="77.7840%" y="645" width="0.4798%" height="15" fill="rgb(218,103,12)" fg:x="88032" fg:w="543"/><text x="78.0340%" y="655.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (105 samples, 0.09%)</title><rect x="78.1710%" y="629" width="0.0928%" height="15" fill="rgb(236,214,43)" fg:x="88470" fg:w="105"/><text x="78.4210%" y="639.50"></text></g><g><title>sn_rust_dealloc (138 samples, 0.12%)</title><rect x="78.2638%" y="677" width="0.1219%" height="15" fill="rgb(244,144,19)" fg:x="88575" fg:w="138"/><text x="78.5138%" y="687.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::deref::Deref&gt;::deref (16 samples, 0.01%)</title><rect x="78.4140%" y="645" width="0.0141%" height="15" fill="rgb(246,188,10)" fg:x="88745" fg:w="16"/><text x="78.6640%" y="655.50"></text></g><g><title>beef::generic::Cow&lt;T,U&gt;::borrow (16 samples, 0.01%)</title><rect x="78.4140%" y="629" width="0.0141%" height="15" fill="rgb(212,193,33)" fg:x="88745" fg:w="16"/><text x="78.6640%" y="639.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (270 samples, 0.24%)</title><rect x="78.4281%" y="645" width="0.2386%" height="15" fill="rgb(241,51,29)" fg:x="88761" fg:w="270"/><text x="78.6781%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (19 samples, 0.02%)</title><rect x="78.6835%" y="581" width="0.0168%" height="15" fill="rgb(211,58,19)" fg:x="89050" fg:w="19"/><text x="78.9335%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 0.03%)</title><rect x="78.7002%" y="581" width="0.0274%" height="15" fill="rgb(229,111,26)" fg:x="89069" fg:w="31"/><text x="78.9502%" y="591.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 0.03%)</title><rect x="78.7002%" y="565" width="0.0274%" height="15" fill="rgb(213,115,40)" fg:x="89069" fg:w="31"/><text x="78.9502%" y="575.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (81 samples, 0.07%)</title><rect x="78.6667%" y="645" width="0.0716%" height="15" fill="rgb(209,56,44)" fg:x="89031" fg:w="81"/><text x="78.9167%" y="655.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (62 samples, 0.05%)</title><rect x="78.6835%" y="629" width="0.0548%" height="15" fill="rgb(230,108,32)" fg:x="89050" fg:w="62"/><text x="78.9335%" y="639.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_hash (62 samples, 0.05%)</title><rect x="78.6835%" y="613" width="0.0548%" height="15" fill="rgb(216,165,31)" fg:x="89050" fg:w="62"/><text x="78.9335%" y="623.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::search (62 samples, 0.05%)</title><rect x="78.6835%" y="597" width="0.0548%" height="15" fill="rgb(218,122,21)" fg:x="89050" fg:w="62"/><text x="78.9335%" y="607.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (12 samples, 0.01%)</title><rect x="78.7276%" y="581" width="0.0106%" height="15" fill="rgb(223,224,47)" fg:x="89100" fg:w="12"/><text x="78.9776%" y="591.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (12 samples, 0.01%)</title><rect x="78.7276%" y="565" width="0.0106%" height="15" fill="rgb(238,102,44)" fg:x="89100" fg:w="12"/><text x="78.9776%" y="575.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (12 samples, 0.01%)</title><rect x="78.7276%" y="549" width="0.0106%" height="15" fill="rgb(236,46,40)" fg:x="89100" fg:w="12"/><text x="78.9776%" y="559.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (12 samples, 0.01%)</title><rect x="78.7276%" y="533" width="0.0106%" height="15" fill="rgb(247,202,50)" fg:x="89100" fg:w="12"/><text x="78.9776%" y="543.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (12 samples, 0.01%)</title><rect x="78.7276%" y="517" width="0.0106%" height="15" fill="rgb(209,99,20)" fg:x="89100" fg:w="12"/><text x="78.9776%" y="527.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get_mut_idx (23 samples, 0.02%)</title><rect x="78.7559%" y="597" width="0.0203%" height="15" fill="rgb(252,27,34)" fg:x="89132" fg:w="23"/><text x="79.0059%" y="607.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (26 samples, 0.02%)</title><rect x="78.9812%" y="501" width="0.0230%" height="15" fill="rgb(215,206,23)" fg:x="89387" fg:w="26"/><text x="79.2312%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (174 samples, 0.15%)</title><rect x="78.8566%" y="533" width="0.1537%" height="15" fill="rgb(212,135,36)" fg:x="89246" fg:w="174"/><text x="79.1066%" y="543.50"></text></g><g><title>sn_rust_alloc (153 samples, 0.14%)</title><rect x="78.8752%" y="517" width="0.1352%" height="15" fill="rgb(240,189,1)" fg:x="89267" fg:w="153"/><text x="79.1252%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (201 samples, 0.18%)</title><rect x="78.8407%" y="565" width="0.1776%" height="15" fill="rgb(242,56,20)" fg:x="89228" fg:w="201"/><text x="79.0907%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (201 samples, 0.18%)</title><rect x="78.8407%" y="549" width="0.1776%" height="15" fill="rgb(247,132,33)" fg:x="89228" fg:w="201"/><text x="79.0907%" y="559.50"></text></g><g><title>halfbrown::raw_entry::RawVacantEntryMut&lt;K,V,S&gt;::insert (581 samples, 0.51%)</title><rect x="78.7382%" y="629" width="0.5134%" height="15" fill="rgb(208,149,11)" fg:x="89112" fg:w="581"/><text x="78.9882%" y="639.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawVacantEntryMut&lt;K,V,S&gt;::insert (561 samples, 0.50%)</title><rect x="78.7559%" y="613" width="0.4957%" height="15" fill="rgb(211,33,11)" fg:x="89132" fg:w="561"/><text x="79.0059%" y="623.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::insert_idx (538 samples, 0.48%)</title><rect x="78.7762%" y="597" width="0.4754%" height="15" fill="rgb(221,29,38)" fg:x="89155" fg:w="538"/><text x="79.0262%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (509 samples, 0.45%)</title><rect x="78.8019%" y="581" width="0.4497%" height="15" fill="rgb(206,182,49)" fg:x="89184" fg:w="509"/><text x="79.0519%" y="591.50"></text></g><g><title>core::ptr::write (249 samples, 0.22%)</title><rect x="79.0316%" y="565" width="0.2200%" height="15" fill="rgb(216,140,1)" fg:x="89444" fg:w="249"/><text x="79.2816%" y="575.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::clone::Clone&gt;::clone (44 samples, 0.04%)</title><rect x="79.2516%" y="613" width="0.0389%" height="15" fill="rgb(232,57,40)" fg:x="89693" fg:w="44"/><text x="79.5016%" y="623.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (16 samples, 0.01%)</title><rect x="79.2763%" y="597" width="0.0141%" height="15" fill="rgb(224,186,18)" fg:x="89721" fg:w="16"/><text x="79.5263%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (16 samples, 0.01%)</title><rect x="79.2763%" y="581" width="0.0141%" height="15" fill="rgb(215,121,11)" fg:x="89721" fg:w="16"/><text x="79.5263%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (16 samples, 0.01%)</title><rect x="79.2763%" y="565" width="0.0141%" height="15" fill="rgb(245,147,10)" fg:x="89721" fg:w="16"/><text x="79.5263%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (16 samples, 0.01%)</title><rect x="79.2763%" y="549" width="0.0141%" height="15" fill="rgb(238,153,13)" fg:x="89721" fg:w="16"/><text x="79.5263%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (16 samples, 0.01%)</title><rect x="79.2763%" y="533" width="0.0141%" height="15" fill="rgb(233,108,0)" fg:x="89721" fg:w="16"/><text x="79.5263%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (16 samples, 0.01%)</title><rect x="79.2763%" y="517" width="0.0141%" height="15" fill="rgb(212,157,17)" fg:x="89721" fg:w="16"/><text x="79.5263%" y="527.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (15 samples, 0.01%)</title><rect x="79.6457%" y="453" width="0.0133%" height="15" fill="rgb(225,213,38)" fg:x="90139" fg:w="15"/><text x="79.8957%" y="463.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (424 samples, 0.37%)</title><rect x="79.2905%" y="581" width="0.3746%" height="15" fill="rgb(248,16,11)" fg:x="89737" fg:w="424"/><text x="79.5405%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (102 samples, 0.09%)</title><rect x="79.5750%" y="565" width="0.0901%" height="15" fill="rgb(241,33,4)" fg:x="90059" fg:w="102"/><text x="79.8250%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (102 samples, 0.09%)</title><rect x="79.5750%" y="549" width="0.0901%" height="15" fill="rgb(222,26,43)" fg:x="90059" fg:w="102"/><text x="79.8250%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (102 samples, 0.09%)</title><rect x="79.5750%" y="533" width="0.0901%" height="15" fill="rgb(243,29,36)" fg:x="90059" fg:w="102"/><text x="79.8250%" y="543.50"></text></g><g><title>alloc::alloc::alloc (94 samples, 0.08%)</title><rect x="79.5821%" y="517" width="0.0831%" height="15" fill="rgb(241,9,27)" fg:x="90067" fg:w="94"/><text x="79.8321%" y="527.50"></text></g><g><title>__rg_alloc (94 samples, 0.08%)</title><rect x="79.5821%" y="501" width="0.0831%" height="15" fill="rgb(205,117,26)" fg:x="90067" fg:w="94"/><text x="79.8321%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (94 samples, 0.08%)</title><rect x="79.5821%" y="485" width="0.0831%" height="15" fill="rgb(209,80,39)" fg:x="90067" fg:w="94"/><text x="79.8321%" y="495.50"></text></g><g><title>sn_rust_alloc (80 samples, 0.07%)</title><rect x="79.5944%" y="469" width="0.0707%" height="15" fill="rgb(239,155,6)" fg:x="90081" fg:w="80"/><text x="79.8444%" y="479.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (1,106 samples, 0.98%)</title><rect x="79.8118%" y="389" width="0.9772%" height="15" fill="rgb(212,104,12)" fg:x="90327" fg:w="1106"/><text x="80.0618%" y="399.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (3,993 samples, 3.53%)</title><rect x="77.2856%" y="709" width="3.5282%" height="15" fill="rgb(234,204,3)" fg:x="87468" fg:w="3993"/><text x="77.5356%" y="719.50">tre..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (3,785 samples, 3.34%)</title><rect x="77.4694%" y="693" width="3.3444%" height="15" fill="rgb(251,218,7)" fg:x="87676" fg:w="3785"/><text x="77.7194%" y="703.50">tre..</text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (2,733 samples, 2.41%)</title><rect x="78.3989%" y="677" width="2.4148%" height="15" fill="rgb(221,81,32)" fg:x="88728" fg:w="2733"/><text x="78.6489%" y="687.50">tr..</text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (2,716 samples, 2.40%)</title><rect x="78.4140%" y="661" width="2.3998%" height="15" fill="rgb(214,152,26)" fg:x="88745" fg:w="2716"/><text x="78.6640%" y="671.50">tr..</text></g><g><title>halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt;::or_insert_with (2,349 samples, 2.08%)</title><rect x="78.7382%" y="645" width="2.0755%" height="15" fill="rgb(223,22,3)" fg:x="89112" fg:w="2349"/><text x="78.9882%" y="655.50">h..</text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut::{{closure}} (1,768 samples, 1.56%)</title><rect x="79.2516%" y="629" width="1.5622%" height="15" fill="rgb(207,174,7)" fg:x="89693" fg:w="1768"/><text x="79.5016%" y="639.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (1,724 samples, 1.52%)</title><rect x="79.2905%" y="613" width="1.5233%" height="15" fill="rgb(224,19,52)" fg:x="89737" fg:w="1724"/><text x="79.5405%" y="623.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (1,724 samples, 1.52%)</title><rect x="79.2905%" y="597" width="1.5233%" height="15" fill="rgb(228,24,14)" fg:x="89737" fg:w="1724"/><text x="79.5405%" y="607.50"></text></g><g><title>halfbrown::HashMap&lt;K,V&gt;::with_capacity (1,300 samples, 1.15%)</title><rect x="79.6651%" y="581" width="1.1487%" height="15" fill="rgb(230,153,43)" fg:x="90161" fg:w="1300"/><text x="79.9151%" y="591.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V&gt;::with_capacity (1,285 samples, 1.14%)</title><rect x="79.6784%" y="565" width="1.1354%" height="15" fill="rgb(231,106,12)" fg:x="90176" fg:w="1285"/><text x="79.9284%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,285 samples, 1.14%)</title><rect x="79.6784%" y="549" width="1.1354%" height="15" fill="rgb(215,92,2)" fg:x="90176" fg:w="1285"/><text x="79.9284%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,285 samples, 1.14%)</title><rect x="79.6784%" y="533" width="1.1354%" height="15" fill="rgb(249,143,25)" fg:x="90176" fg:w="1285"/><text x="79.9284%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,285 samples, 1.14%)</title><rect x="79.6784%" y="517" width="1.1354%" height="15" fill="rgb(252,7,35)" fg:x="90176" fg:w="1285"/><text x="79.9284%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,285 samples, 1.14%)</title><rect x="79.6784%" y="501" width="1.1354%" height="15" fill="rgb(216,69,40)" fg:x="90176" fg:w="1285"/><text x="79.9284%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,285 samples, 1.14%)</title><rect x="79.6784%" y="485" width="1.1354%" height="15" fill="rgb(240,36,33)" fg:x="90176" fg:w="1285"/><text x="79.9284%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,285 samples, 1.14%)</title><rect x="79.6784%" y="469" width="1.1354%" height="15" fill="rgb(231,128,14)" fg:x="90176" fg:w="1285"/><text x="79.9284%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1,285 samples, 1.14%)</title><rect x="79.6784%" y="453" width="1.1354%" height="15" fill="rgb(245,143,14)" fg:x="90176" fg:w="1285"/><text x="79.9284%" y="463.50"></text></g><g><title>__rg_alloc (1,285 samples, 1.14%)</title><rect x="79.6784%" y="437" width="1.1354%" height="15" fill="rgb(222,130,28)" fg:x="90176" fg:w="1285"/><text x="79.9284%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1,285 samples, 1.14%)</title><rect x="79.6784%" y="421" width="1.1354%" height="15" fill="rgb(212,10,48)" fg:x="90176" fg:w="1285"/><text x="79.9284%" y="431.50"></text></g><g><title>sn_rust_alloc (1,266 samples, 1.12%)</title><rect x="79.6952%" y="405" width="1.1186%" height="15" fill="rgb(254,118,45)" fg:x="90195" fg:w="1266"/><text x="79.9452%" y="415.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (28 samples, 0.02%)</title><rect x="80.7890%" y="389" width="0.0247%" height="15" fill="rgb(228,6,45)" fg:x="91433" fg:w="28"/><text x="81.0390%" y="399.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (6,687 samples, 5.91%)</title><rect x="75.1827%" y="741" width="5.9085%" height="15" fill="rgb(241,18,35)" fg:x="85088" fg:w="6687"/><text x="75.4327%" y="751.50">tremor_s..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (6,236 samples, 5.51%)</title><rect x="75.5812%" y="725" width="5.5101%" height="15" fill="rgb(227,214,53)" fg:x="85539" fg:w="6236"/><text x="75.8312%" y="735.50">tremor_..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (314 samples, 0.28%)</title><rect x="80.8138%" y="709" width="0.2774%" height="15" fill="rgb(224,107,51)" fg:x="91461" fg:w="314"/><text x="81.0638%" y="719.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (18 samples, 0.02%)</title><rect x="81.0753%" y="693" width="0.0159%" height="15" fill="rgb(248,60,28)" fg:x="91757" fg:w="18"/><text x="81.3253%" y="703.50"></text></g><g><title>tremor_script::ast::Path::segments (14 samples, 0.01%)</title><rect x="81.3174%" y="693" width="0.0124%" height="15" fill="rgb(249,101,23)" fg:x="92031" fg:w="14"/><text x="81.5674%" y="703.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry (484 samples, 0.43%)</title><rect x="81.3333%" y="629" width="0.4277%" height="15" fill="rgb(228,51,19)" fg:x="92049" fg:w="484"/><text x="81.5833%" y="639.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (41 samples, 0.04%)</title><rect x="81.7628%" y="565" width="0.0362%" height="15" fill="rgb(213,20,6)" fg:x="92535" fg:w="41"/><text x="82.0128%" y="575.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (41 samples, 0.04%)</title><rect x="81.7628%" y="549" width="0.0362%" height="15" fill="rgb(212,124,10)" fg:x="92535" fg:w="41"/><text x="82.0128%" y="559.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (41 samples, 0.04%)</title><rect x="81.7628%" y="533" width="0.0362%" height="15" fill="rgb(248,3,40)" fg:x="92535" fg:w="41"/><text x="82.0128%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (41 samples, 0.04%)</title><rect x="81.7628%" y="517" width="0.0362%" height="15" fill="rgb(223,178,23)" fg:x="92535" fg:w="41"/><text x="82.0128%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (41 samples, 0.04%)</title><rect x="81.7628%" y="501" width="0.0362%" height="15" fill="rgb(240,132,45)" fg:x="92535" fg:w="41"/><text x="82.0128%" y="511.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_key_hashed_nocheck (1,625 samples, 1.44%)</title><rect x="81.7610%" y="629" width="1.4358%" height="15" fill="rgb(245,164,36)" fg:x="92533" fg:w="1625"/><text x="82.0110%" y="639.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_key_hashed_nocheck (1,623 samples, 1.43%)</title><rect x="81.7628%" y="613" width="1.4341%" height="15" fill="rgb(231,188,53)" fg:x="92535" fg:w="1623"/><text x="82.0128%" y="623.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_hash (1,623 samples, 1.43%)</title><rect x="81.7628%" y="597" width="1.4341%" height="15" fill="rgb(237,198,39)" fg:x="92535" fg:w="1623"/><text x="82.0128%" y="607.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::search (1,623 samples, 1.43%)</title><rect x="81.7628%" y="581" width="1.4341%" height="15" fill="rgb(223,120,35)" fg:x="92535" fg:w="1623"/><text x="82.0128%" y="591.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (1,574 samples, 1.39%)</title><rect x="81.8061%" y="565" width="1.3908%" height="15" fill="rgb(253,107,49)" fg:x="92584" fg:w="1574"/><text x="82.0561%" y="575.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1,564 samples, 1.38%)</title><rect x="81.8149%" y="549" width="1.3819%" height="15" fill="rgb(216,44,31)" fg:x="92594" fg:w="1564"/><text x="82.0649%" y="559.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,564 samples, 1.38%)</title><rect x="81.8149%" y="533" width="1.3819%" height="15" fill="rgb(253,87,21)" fg:x="92594" fg:w="1564"/><text x="82.0649%" y="543.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1,564 samples, 1.38%)</title><rect x="81.8149%" y="517" width="1.3819%" height="15" fill="rgb(226,18,2)" fg:x="92594" fg:w="1564"/><text x="82.0649%" y="527.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1,564 samples, 1.38%)</title><rect x="81.8149%" y="501" width="1.3819%" height="15" fill="rgb(216,8,46)" fg:x="92594" fg:w="1564"/><text x="82.0649%" y="511.50"></text></g><g><title>[libc-2.31.so] (770 samples, 0.68%)</title><rect x="82.5165%" y="485" width="0.6804%" height="15" fill="rgb(226,140,39)" fg:x="93388" fg:w="770"/><text x="82.7665%" y="495.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (2,389 samples, 2.11%)</title><rect x="81.0912%" y="741" width="2.1109%" height="15" fill="rgb(221,194,54)" fg:x="91775" fg:w="2389"/><text x="81.3412%" y="751.50">t..</text></g><g><title>tremor_script::interpreter::resolve (2,327 samples, 2.06%)</title><rect x="81.1460%" y="725" width="2.0561%" height="15" fill="rgb(213,92,11)" fg:x="91837" fg:w="2327"/><text x="81.3960%" y="735.50">t..</text></g><g><title>tremor_script::interpreter::resolve_value (2,294 samples, 2.03%)</title><rect x="81.1752%" y="709" width="2.0269%" height="15" fill="rgb(229,162,46)" fg:x="91870" fg:w="2294"/><text x="81.4252%" y="719.50">t..</text></g><g><title>tremor_value::known_key::KnownKey::lookup (2,119 samples, 1.87%)</title><rect x="81.3298%" y="693" width="1.8723%" height="15" fill="rgb(214,111,36)" fg:x="92045" fg:w="2119"/><text x="81.5798%" y="703.50">t..</text></g><g><title>core::option::Option&lt;T&gt;::and_then (2,119 samples, 1.87%)</title><rect x="81.3298%" y="677" width="1.8723%" height="15" fill="rgb(207,6,21)" fg:x="92045" fg:w="2119"/><text x="81.5798%" y="687.50">c..</text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (2,115 samples, 1.87%)</title><rect x="81.3333%" y="661" width="1.8688%" height="15" fill="rgb(213,127,38)" fg:x="92049" fg:w="2115"/><text x="81.5833%" y="671.50">t..</text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (2,115 samples, 1.87%)</title><rect x="81.3333%" y="645" width="1.8688%" height="15" fill="rgb(238,118,32)" fg:x="92049" fg:w="2115"/><text x="81.5833%" y="655.50">t..</text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::borrow::Borrow&lt;B&gt;&gt;::borrow (115 samples, 0.10%)</title><rect x="83.8781%" y="725" width="0.1016%" height="15" fill="rgb(240,139,39)" fg:x="94929" fg:w="115"/><text x="84.1281%" y="735.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::ops::deref::Deref&gt;::deref (115 samples, 0.10%)</title><rect x="83.8781%" y="709" width="0.1016%" height="15" fill="rgb(235,10,37)" fg:x="94929" fg:w="115"/><text x="84.1281%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::borrow::Cow&lt;tremor_value::value::Value&gt;&gt; (21 samples, 0.02%)</title><rect x="83.9797%" y="725" width="0.0186%" height="15" fill="rgb(249,171,38)" fg:x="95044" fg:w="21"/><text x="84.2297%" y="735.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (78 samples, 0.07%)</title><rect x="83.9982%" y="725" width="0.0689%" height="15" fill="rgb(242,144,32)" fg:x="95065" fg:w="78"/><text x="84.2482%" y="735.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (69 samples, 0.06%)</title><rect x="84.0716%" y="709" width="0.0610%" height="15" fill="rgb(217,117,21)" fg:x="95148" fg:w="69"/><text x="84.3216%" y="719.50"></text></g><g><title>tremor_script::interpreter::test_guard (80 samples, 0.07%)</title><rect x="84.0672%" y="725" width="0.0707%" height="15" fill="rgb(249,87,1)" fg:x="95143" fg:w="80"/><text x="84.3172%" y="735.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (12,061 samples, 10.66%)</title><rect x="73.9245%" y="917" width="10.6569%" height="15" fill="rgb(248,196,48)" fg:x="83664" fg:w="12061"/><text x="74.1745%" y="927.50">tremor_pipeline:..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (12,061 samples, 10.66%)</title><rect x="73.9245%" y="901" width="10.6569%" height="15" fill="rgb(251,206,33)" fg:x="83664" fg:w="12061"/><text x="74.1745%" y="911.50">tremor_pipeline:..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (12,061 samples, 10.66%)</title><rect x="73.9245%" y="885" width="10.6569%" height="15" fill="rgb(232,141,28)" fg:x="83664" fg:w="12061"/><text x="74.1745%" y="895.50">tremor_pipeline:..</text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (12,061 samples, 10.66%)</title><rect x="73.9245%" y="869" width="10.6569%" height="15" fill="rgb(209,167,14)" fg:x="83664" fg:w="12061"/><text x="74.1745%" y="879.50">&lt;tremor_pipeline..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (12,061 samples, 10.66%)</title><rect x="73.9245%" y="853" width="10.6569%" height="15" fill="rgb(225,11,50)" fg:x="83664" fg:w="12061"/><text x="74.1745%" y="863.50">&lt;tremor_pipeline..</text></g><g><title>tremor_script::srs::EventPayload::rent_mut (12,061 samples, 10.66%)</title><rect x="73.9245%" y="837" width="10.6569%" height="15" fill="rgb(209,50,20)" fg:x="83664" fg:w="12061"/><text x="74.1745%" y="847.50">tremor_script::s..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (12,061 samples, 10.66%)</title><rect x="73.9245%" y="821" width="10.6569%" height="15" fill="rgb(212,17,46)" fg:x="83664" fg:w="12061"/><text x="74.1745%" y="831.50">&lt;tremor_pipeline..</text></g><g><title>tremor_script::script::Script::run (12,061 samples, 10.66%)</title><rect x="73.9245%" y="805" width="10.6569%" height="15" fill="rgb(216,101,39)" fg:x="83664" fg:w="12061"/><text x="74.1745%" y="815.50">tremor_script::s..</text></g><g><title>tremor_script::ast::Script::run (12,061 samples, 10.66%)</title><rect x="73.9245%" y="789" width="10.6569%" height="15" fill="rgb(212,228,48)" fg:x="83664" fg:w="12061"/><text x="74.1745%" y="799.50">tremor_script::a..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (12,061 samples, 10.66%)</title><rect x="73.9245%" y="773" width="10.6569%" height="15" fill="rgb(250,6,50)" fg:x="83664" fg:w="12061"/><text x="74.1745%" y="783.50">tremor_script::i..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (11,039 samples, 9.75%)</title><rect x="74.8275%" y="757" width="9.7539%" height="15" fill="rgb(250,160,48)" fg:x="84686" fg:w="11039"/><text x="75.0775%" y="767.50">tremor_script:..</text></g><g><title>tremor_script::interpreter::test_predicate_expr (1,561 samples, 1.38%)</title><rect x="83.2021%" y="741" width="1.3793%" height="15" fill="rgb(244,216,33)" fg:x="94164" fg:w="1561"/><text x="83.4521%" y="751.50"></text></g><g><title>tremor_script::interpreter::val_eq (502 samples, 0.44%)</title><rect x="84.1378%" y="725" width="0.4436%" height="15" fill="rgb(207,157,5)" fg:x="95223" fg:w="502"/><text x="84.3878%" y="735.50"></text></g><g><title>[libc-2.31.so] (334 samples, 0.30%)</title><rect x="84.2863%" y="709" width="0.2951%" height="15" fill="rgb(228,199,8)" fg:x="95391" fg:w="334"/><text x="84.5363%" y="719.50"></text></g><g><title>[libc-2.31.so] (111 samples, 0.10%)</title><rect x="84.7139%" y="821" width="0.0981%" height="15" fill="rgb(227,80,20)" fg:x="95875" fg:w="111"/><text x="84.9639%" y="831.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (106 samples, 0.09%)</title><rect x="84.8668%" y="805" width="0.0937%" height="15" fill="rgb(222,9,33)" fg:x="96048" fg:w="106"/><text x="85.1168%" y="815.50"></text></g><g><title>core::ptr::write (106 samples, 0.09%)</title><rect x="84.8668%" y="789" width="0.0937%" height="15" fill="rgb(239,44,28)" fg:x="96048" fg:w="106"/><text x="85.1168%" y="799.50"></text></g><g><title>[libc-2.31.so] (101 samples, 0.09%)</title><rect x="84.8712%" y="773" width="0.0892%" height="15" fill="rgb(249,187,43)" fg:x="96053" fg:w="101"/><text x="85.1212%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (208 samples, 0.18%)</title><rect x="84.9605%" y="805" width="0.1838%" height="15" fill="rgb(216,141,28)" fg:x="96154" fg:w="208"/><text x="85.2105%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (208 samples, 0.18%)</title><rect x="84.9605%" y="789" width="0.1838%" height="15" fill="rgb(230,154,53)" fg:x="96154" fg:w="208"/><text x="85.2105%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (163 samples, 0.14%)</title><rect x="85.1442%" y="805" width="0.1440%" height="15" fill="rgb(227,82,4)" fg:x="96362" fg:w="163"/><text x="85.3942%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_load (158 samples, 0.14%)</title><rect x="85.1487%" y="789" width="0.1396%" height="15" fill="rgb(220,107,16)" fg:x="96367" fg:w="158"/><text x="85.3987%" y="799.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (748 samples, 0.66%)</title><rect x="84.6353%" y="837" width="0.6609%" height="15" fill="rgb(207,187,2)" fg:x="95786" fg:w="748"/><text x="84.8853%" y="847.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (548 samples, 0.48%)</title><rect x="84.8120%" y="821" width="0.4842%" height="15" fill="rgb(210,162,52)" fg:x="95986" fg:w="548"/><text x="85.0620%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (56 samples, 0.05%)</title><rect x="85.3068%" y="821" width="0.0495%" height="15" fill="rgb(217,216,49)" fg:x="96546" fg:w="56"/><text x="85.5568%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (53 samples, 0.05%)</title><rect x="85.3095%" y="805" width="0.0468%" height="15" fill="rgb(218,146,49)" fg:x="96549" fg:w="53"/><text x="85.5595%" y="815.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (53 samples, 0.05%)</title><rect x="85.3095%" y="789" width="0.0468%" height="15" fill="rgb(216,55,40)" fg:x="96549" fg:w="53"/><text x="85.5595%" y="799.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (50 samples, 0.04%)</title><rect x="85.3121%" y="773" width="0.0442%" height="15" fill="rgb(208,196,21)" fg:x="96552" fg:w="50"/><text x="85.5621%" y="783.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (50 samples, 0.04%)</title><rect x="85.3121%" y="757" width="0.0442%" height="15" fill="rgb(242,117,42)" fg:x="96552" fg:w="50"/><text x="85.5621%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (50 samples, 0.04%)</title><rect x="85.3121%" y="741" width="0.0442%" height="15" fill="rgb(210,11,23)" fg:x="96552" fg:w="50"/><text x="85.5621%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_swap (50 samples, 0.04%)</title><rect x="85.3121%" y="725" width="0.0442%" height="15" fill="rgb(217,110,2)" fg:x="96552" fg:w="50"/><text x="85.5621%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (24 samples, 0.02%)</title><rect x="85.3563%" y="821" width="0.0212%" height="15" fill="rgb(229,77,54)" fg:x="96602" fg:w="24"/><text x="85.6063%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_load (24 samples, 0.02%)</title><rect x="85.3563%" y="805" width="0.0212%" height="15" fill="rgb(218,53,16)" fg:x="96602" fg:w="24"/><text x="85.6063%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (33 samples, 0.03%)</title><rect x="85.3855%" y="757" width="0.0292%" height="15" fill="rgb(215,38,13)" fg:x="96635" fg:w="33"/><text x="85.6355%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (33 samples, 0.03%)</title><rect x="85.3855%" y="741" width="0.0292%" height="15" fill="rgb(235,42,18)" fg:x="96635" fg:w="33"/><text x="85.6355%" y="751.50"></text></g><g><title>event_listener::Inner::lock (44 samples, 0.04%)</title><rect x="85.3775%" y="821" width="0.0389%" height="15" fill="rgb(219,66,54)" fg:x="96626" fg:w="44"/><text x="85.6275%" y="831.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (38 samples, 0.03%)</title><rect x="85.3828%" y="805" width="0.0336%" height="15" fill="rgb(222,205,4)" fg:x="96632" fg:w="38"/><text x="85.6328%" y="815.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (35 samples, 0.03%)</title><rect x="85.3855%" y="789" width="0.0309%" height="15" fill="rgb(227,213,46)" fg:x="96635" fg:w="35"/><text x="85.6355%" y="799.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (35 samples, 0.03%)</title><rect x="85.3855%" y="773" width="0.0309%" height="15" fill="rgb(250,145,42)" fg:x="96635" fg:w="35"/><text x="85.6355%" y="783.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_waker (17 samples, 0.02%)</title><rect x="85.4288%" y="773" width="0.0150%" height="15" fill="rgb(219,15,2)" fg:x="96684" fg:w="17"/><text x="85.6788%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (17 samples, 0.02%)</title><rect x="85.4288%" y="757" width="0.0150%" height="15" fill="rgb(231,181,52)" fg:x="96684" fg:w="17"/><text x="85.6788%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_sub (17 samples, 0.02%)</title><rect x="85.4288%" y="741" width="0.0150%" height="15" fill="rgb(235,1,42)" fg:x="96684" fg:w="17"/><text x="85.6788%" y="751.50"></text></g><g><title>async_executor::Sleepers::notify (23 samples, 0.02%)</title><rect x="85.4509%" y="725" width="0.0203%" height="15" fill="rgb(249,88,27)" fg:x="96709" fg:w="23"/><text x="85.7009%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (12 samples, 0.01%)</title><rect x="85.4606%" y="709" width="0.0106%" height="15" fill="rgb(235,145,16)" fg:x="96720" fg:w="12"/><text x="85.7106%" y="719.50"></text></g><g><title>core::ptr::read (12 samples, 0.01%)</title><rect x="85.4606%" y="693" width="0.0106%" height="15" fill="rgb(237,114,19)" fg:x="96720" fg:w="12"/><text x="85.7106%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (54 samples, 0.05%)</title><rect x="85.4712%" y="725" width="0.0477%" height="15" fill="rgb(238,51,50)" fg:x="96732" fg:w="54"/><text x="85.7212%" y="735.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (54 samples, 0.05%)</title><rect x="85.4712%" y="709" width="0.0477%" height="15" fill="rgb(205,194,25)" fg:x="96732" fg:w="54"/><text x="85.7212%" y="719.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (53 samples, 0.05%)</title><rect x="85.4721%" y="693" width="0.0468%" height="15" fill="rgb(215,203,17)" fg:x="96733" fg:w="53"/><text x="85.7221%" y="703.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (53 samples, 0.05%)</title><rect x="85.4721%" y="677" width="0.0468%" height="15" fill="rgb(233,112,49)" fg:x="96733" fg:w="53"/><text x="85.7221%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (53 samples, 0.05%)</title><rect x="85.4721%" y="661" width="0.0468%" height="15" fill="rgb(241,130,26)" fg:x="96733" fg:w="53"/><text x="85.7221%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_swap (53 samples, 0.05%)</title><rect x="85.4721%" y="645" width="0.0468%" height="15" fill="rgb(252,223,19)" fg:x="96733" fg:w="53"/><text x="85.7221%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (31 samples, 0.03%)</title><rect x="85.5189%" y="725" width="0.0274%" height="15" fill="rgb(211,95,25)" fg:x="96786" fg:w="31"/><text x="85.7689%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (31 samples, 0.03%)</title><rect x="85.5189%" y="709" width="0.0274%" height="15" fill="rgb(251,182,27)" fg:x="96786" fg:w="31"/><text x="85.7689%" y="719.50"></text></g><g><title>async_io::reactor::Reactor::notify (33 samples, 0.03%)</title><rect x="85.5560%" y="677" width="0.0292%" height="15" fill="rgb(238,24,4)" fg:x="96828" fg:w="33"/><text x="85.8060%" y="687.50"></text></g><g><title>polling::Poller::notify (32 samples, 0.03%)</title><rect x="85.5569%" y="661" width="0.0283%" height="15" fill="rgb(224,220,25)" fg:x="96829" fg:w="32"/><text x="85.8069%" y="671.50"></text></g><g><title>polling::epoll::Poller::notify (23 samples, 0.02%)</title><rect x="85.5648%" y="645" width="0.0203%" height="15" fill="rgb(239,133,26)" fg:x="96838" fg:w="23"/><text x="85.8148%" y="655.50"></text></g><g><title>__libc_write (21 samples, 0.02%)</title><rect x="85.5666%" y="629" width="0.0186%" height="15" fill="rgb(211,94,48)" fg:x="96840" fg:w="21"/><text x="85.8166%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (54 samples, 0.05%)</title><rect x="85.6064%" y="645" width="0.0477%" height="15" fill="rgb(239,87,6)" fg:x="96885" fg:w="54"/><text x="85.8564%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_swap (54 samples, 0.05%)</title><rect x="85.6064%" y="629" width="0.0477%" height="15" fill="rgb(227,62,0)" fg:x="96885" fg:w="54"/><text x="85.8564%" y="639.50"></text></g><g><title>parking::Unparker::unpark (85 samples, 0.08%)</title><rect x="85.5913%" y="677" width="0.0751%" height="15" fill="rgb(211,226,4)" fg:x="96868" fg:w="85"/><text x="85.8413%" y="687.50"></text></g><g><title>parking::Inner::unpark (71 samples, 0.06%)</title><rect x="85.6037%" y="661" width="0.0627%" height="15" fill="rgb(253,38,52)" fg:x="96882" fg:w="71"/><text x="85.8537%" y="671.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (137 samples, 0.12%)</title><rect x="85.5463%" y="693" width="0.1211%" height="15" fill="rgb(229,126,40)" fg:x="96817" fg:w="137"/><text x="85.7963%" y="703.50"></text></g><g><title>core::task::wake::Waker::wake (201 samples, 0.18%)</title><rect x="85.5463%" y="725" width="0.1776%" height="15" fill="rgb(229,165,44)" fg:x="96817" fg:w="201"/><text x="85.7963%" y="735.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (201 samples, 0.18%)</title><rect x="85.5463%" y="709" width="0.1776%" height="15" fill="rgb(247,95,47)" fg:x="96817" fg:w="201"/><text x="85.7963%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (64 samples, 0.06%)</title><rect x="85.6673%" y="693" width="0.0565%" height="15" fill="rgb(216,140,30)" fg:x="96954" fg:w="64"/><text x="85.9173%" y="703.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (64 samples, 0.06%)</title><rect x="85.6673%" y="677" width="0.0565%" height="15" fill="rgb(246,214,8)" fg:x="96954" fg:w="64"/><text x="85.9173%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (62 samples, 0.05%)</title><rect x="85.6691%" y="661" width="0.0548%" height="15" fill="rgb(227,224,15)" fg:x="96956" fg:w="62"/><text x="85.9191%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_sub (62 samples, 0.05%)</title><rect x="85.6691%" y="645" width="0.0548%" height="15" fill="rgb(233,175,4)" fg:x="96956" fg:w="62"/><text x="85.9191%" y="655.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (12 samples, 0.01%)</title><rect x="85.7239%" y="709" width="0.0106%" height="15" fill="rgb(221,66,45)" fg:x="97018" fg:w="12"/><text x="85.9739%" y="719.50"></text></g><g><title>std::sync::poison::Flag::borrow (12 samples, 0.01%)</title><rect x="85.7239%" y="693" width="0.0106%" height="15" fill="rgb(221,178,18)" fg:x="97018" fg:w="12"/><text x="85.9739%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (46 samples, 0.04%)</title><rect x="85.7362%" y="677" width="0.0406%" height="15" fill="rgb(213,81,29)" fg:x="97032" fg:w="46"/><text x="85.9862%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (46 samples, 0.04%)</title><rect x="85.7362%" y="661" width="0.0406%" height="15" fill="rgb(220,89,49)" fg:x="97032" fg:w="46"/><text x="85.9862%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (12 samples, 0.01%)</title><rect x="85.7804%" y="661" width="0.0106%" height="15" fill="rgb(227,60,33)" fg:x="97082" fg:w="12"/><text x="86.0304%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (12 samples, 0.01%)</title><rect x="85.7804%" y="645" width="0.0106%" height="15" fill="rgb(205,113,12)" fg:x="97082" fg:w="12"/><text x="86.0304%" y="655.50"></text></g><g><title>core::hint::spin_loop (13 samples, 0.01%)</title><rect x="85.7999%" y="645" width="0.0115%" height="15" fill="rgb(211,32,1)" fg:x="97104" fg:w="13"/><text x="86.0499%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (13 samples, 0.01%)</title><rect x="85.7999%" y="629" width="0.0115%" height="15" fill="rgb(246,2,12)" fg:x="97104" fg:w="13"/><text x="86.0499%" y="639.50"></text></g><g><title>async_executor::State::notify (415 samples, 0.37%)</title><rect x="85.4482%" y="741" width="0.3667%" height="15" fill="rgb(243,37,27)" fg:x="96706" fg:w="415"/><text x="85.6982%" y="751.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (103 samples, 0.09%)</title><rect x="85.7239%" y="725" width="0.0910%" height="15" fill="rgb(248,211,31)" fg:x="97018" fg:w="103"/><text x="85.9739%" y="735.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (91 samples, 0.08%)</title><rect x="85.7345%" y="709" width="0.0804%" height="15" fill="rgb(242,146,47)" fg:x="97030" fg:w="91"/><text x="85.9845%" y="719.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (91 samples, 0.08%)</title><rect x="85.7345%" y="693" width="0.0804%" height="15" fill="rgb(206,70,20)" fg:x="97030" fg:w="91"/><text x="85.9845%" y="703.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (43 samples, 0.04%)</title><rect x="85.7769%" y="677" width="0.0380%" height="15" fill="rgb(215,10,51)" fg:x="97078" fg:w="43"/><text x="86.0269%" y="687.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (18 samples, 0.02%)</title><rect x="85.7990%" y="661" width="0.0159%" height="15" fill="rgb(243,178,53)" fg:x="97103" fg:w="18"/><text x="86.0490%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (96 samples, 0.08%)</title><rect x="85.8220%" y="709" width="0.0848%" height="15" fill="rgb(233,221,20)" fg:x="97129" fg:w="96"/><text x="86.0720%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (96 samples, 0.08%)</title><rect x="85.8220%" y="693" width="0.0848%" height="15" fill="rgb(218,95,35)" fg:x="97129" fg:w="96"/><text x="86.0720%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (44 samples, 0.04%)</title><rect x="85.9077%" y="709" width="0.0389%" height="15" fill="rgb(229,13,5)" fg:x="97226" fg:w="44"/><text x="86.1577%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_or (44 samples, 0.04%)</title><rect x="85.9077%" y="693" width="0.0389%" height="15" fill="rgb(252,164,30)" fg:x="97226" fg:w="44"/><text x="86.1577%" y="703.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (566 samples, 0.50%)</title><rect x="85.4482%" y="757" width="0.5001%" height="15" fill="rgb(232,68,36)" fg:x="96706" fg:w="566"/><text x="85.6982%" y="767.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (151 samples, 0.13%)</title><rect x="85.8149%" y="741" width="0.1334%" height="15" fill="rgb(219,59,54)" fg:x="97121" fg:w="151"/><text x="86.0649%" y="751.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (149 samples, 0.13%)</title><rect x="85.8167%" y="725" width="0.1317%" height="15" fill="rgb(250,92,33)" fg:x="97123" fg:w="149"/><text x="86.0667%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (159 samples, 0.14%)</title><rect x="85.9483%" y="757" width="0.1405%" height="15" fill="rgb(229,162,54)" fg:x="97272" fg:w="159"/><text x="86.1983%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (159 samples, 0.14%)</title><rect x="85.9483%" y="741" width="0.1405%" height="15" fill="rgb(244,114,52)" fg:x="97272" fg:w="159"/><text x="86.1983%" y="751.50"></text></g><g><title>event_listener::List::notify (792 samples, 0.70%)</title><rect x="85.4164%" y="821" width="0.6998%" height="15" fill="rgb(212,211,43)" fg:x="96670" fg:w="792"/><text x="85.6664%" y="831.50"></text></g><g><title>core::task::wake::Waker::wake (783 samples, 0.69%)</title><rect x="85.4243%" y="805" width="0.6918%" height="15" fill="rgb(226,147,8)" fg:x="96679" fg:w="783"/><text x="85.6743%" y="815.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (780 samples, 0.69%)</title><rect x="85.4270%" y="789" width="0.6892%" height="15" fill="rgb(226,23,13)" fg:x="96682" fg:w="780"/><text x="85.6770%" y="799.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (761 samples, 0.67%)</title><rect x="85.4438%" y="773" width="0.6724%" height="15" fill="rgb(240,63,4)" fg:x="96701" fg:w="761"/><text x="85.6938%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (31 samples, 0.03%)</title><rect x="86.0888%" y="757" width="0.0274%" height="15" fill="rgb(221,1,32)" fg:x="97431" fg:w="31"/><text x="86.3388%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_load (31 samples, 0.03%)</title><rect x="86.0888%" y="741" width="0.0274%" height="15" fill="rgb(242,117,10)" fg:x="97431" fg:w="31"/><text x="86.3388%" y="751.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (2,608 samples, 2.30%)</title><rect x="84.6247%" y="853" width="2.3044%" height="15" fill="rgb(249,172,44)" fg:x="95774" fg:w="2608"/><text x="84.8747%" y="863.50">a..</text></g><g><title>event_listener::Event::notify (1,848 samples, 1.63%)</title><rect x="85.2962%" y="837" width="1.6329%" height="15" fill="rgb(244,46,45)" fg:x="96534" fg:w="1848"/><text x="85.5462%" y="847.50"></text></g><g><title>event_listener::full_fence (920 samples, 0.81%)</title><rect x="86.1162%" y="821" width="0.8129%" height="15" fill="rgb(206,43,17)" fg:x="97462" fg:w="920"/><text x="86.3662%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (917 samples, 0.81%)</title><rect x="86.1188%" y="805" width="0.8102%" height="15" fill="rgb(239,218,39)" fg:x="97465" fg:w="917"/><text x="86.3688%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (917 samples, 0.81%)</title><rect x="86.1188%" y="789" width="0.8102%" height="15" fill="rgb(208,169,54)" fg:x="97465" fg:w="917"/><text x="86.3688%" y="799.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (15,392 samples, 13.60%)</title><rect x="73.4659%" y="949" width="13.6002%" height="15" fill="rgb(247,25,42)" fg:x="83145" fg:w="15392"/><text x="73.7159%" y="959.50">tremor_runtime::pipel..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14,873 samples, 13.14%)</title><rect x="73.9245%" y="933" width="13.1416%" height="15" fill="rgb(226,23,31)" fg:x="83664" fg:w="14873"/><text x="74.1745%" y="943.50">&lt;core::future::from_..</text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (2,812 samples, 2.48%)</title><rect x="84.5814%" y="917" width="2.4846%" height="15" fill="rgb(247,16,28)" fg:x="95725" fg:w="2812"/><text x="84.8314%" y="927.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,812 samples, 2.48%)</title><rect x="84.5814%" y="901" width="2.4846%" height="15" fill="rgb(231,147,38)" fg:x="95725" fg:w="2812"/><text x="84.8314%" y="911.50">&lt;c..</text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (2,812 samples, 2.48%)</title><rect x="84.5814%" y="885" width="2.4846%" height="15" fill="rgb(253,81,48)" fg:x="95725" fg:w="2812"/><text x="84.8314%" y="895.50">tr..</text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (2,812 samples, 2.48%)</title><rect x="84.5814%" y="869" width="2.4846%" height="15" fill="rgb(249,222,43)" fg:x="95725" fg:w="2812"/><text x="84.8314%" y="879.50">&lt;a..</text></g><g><title>event_listener::Event::notify (144 samples, 0.13%)</title><rect x="86.9388%" y="853" width="0.1272%" height="15" fill="rgb(221,3,27)" fg:x="98393" fg:w="144"/><text x="87.1888%" y="863.50"></text></g><g><title>event_listener::full_fence (137 samples, 0.12%)</title><rect x="86.9450%" y="837" width="0.1211%" height="15" fill="rgb(228,180,5)" fg:x="98400" fg:w="137"/><text x="87.1950%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (128 samples, 0.11%)</title><rect x="86.9529%" y="821" width="0.1131%" height="15" fill="rgb(227,131,42)" fg:x="98409" fg:w="128"/><text x="87.2029%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (128 samples, 0.11%)</title><rect x="86.9529%" y="805" width="0.1131%" height="15" fill="rgb(212,3,39)" fg:x="98409" fg:w="128"/><text x="87.2029%" y="815.50"></text></g><g><title>tremor_runtime::postprocessor::postprocess (17 samples, 0.02%)</title><rect x="87.0669%" y="949" width="0.0150%" height="15" fill="rgb(226,45,5)" fg:x="98538" fg:w="17"/><text x="87.3169%" y="959.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (16 samples, 0.01%)</title><rect x="87.0820%" y="949" width="0.0141%" height="15" fill="rgb(215,167,45)" fg:x="98555" fg:w="16"/><text x="87.3320%" y="959.50"></text></g><g><title>tremor_script::ast::Script::run (52 samples, 0.05%)</title><rect x="87.0979%" y="949" width="0.0459%" height="15" fill="rgb(250,218,53)" fg:x="98573" fg:w="52"/><text x="87.3479%" y="959.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (42 samples, 0.04%)</title><rect x="87.1067%" y="933" width="0.0371%" height="15" fill="rgb(207,140,0)" fg:x="98583" fg:w="42"/><text x="87.3567%" y="943.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (42 samples, 0.04%)</title><rect x="87.1067%" y="917" width="0.0371%" height="15" fill="rgb(238,133,51)" fg:x="98583" fg:w="42"/><text x="87.3567%" y="927.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (42 samples, 0.04%)</title><rect x="87.1067%" y="901" width="0.0371%" height="15" fill="rgb(218,203,53)" fg:x="98583" fg:w="42"/><text x="87.3567%" y="911.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (42 samples, 0.04%)</title><rect x="87.1067%" y="885" width="0.0371%" height="15" fill="rgb(226,184,25)" fg:x="98583" fg:w="42"/><text x="87.3567%" y="895.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (42 samples, 0.04%)</title><rect x="87.1067%" y="869" width="0.0371%" height="15" fill="rgb(231,121,21)" fg:x="98583" fg:w="42"/><text x="87.3567%" y="879.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (42 samples, 0.04%)</title><rect x="87.1067%" y="853" width="0.0371%" height="15" fill="rgb(251,14,34)" fg:x="98583" fg:w="42"/><text x="87.3567%" y="863.50"></text></g><g><title>tremor_script::interpreter::resolve (42 samples, 0.04%)</title><rect x="87.1067%" y="837" width="0.0371%" height="15" fill="rgb(249,193,11)" fg:x="98583" fg:w="42"/><text x="87.3567%" y="847.50"></text></g><g><title>tremor_script::interpreter::resolve_value (42 samples, 0.04%)</title><rect x="87.1067%" y="821" width="0.0371%" height="15" fill="rgb(220,172,37)" fg:x="98583" fg:w="42"/><text x="87.3567%" y="831.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup (30 samples, 0.03%)</title><rect x="87.1173%" y="805" width="0.0265%" height="15" fill="rgb(231,229,43)" fg:x="98595" fg:w="30"/><text x="87.3673%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (30 samples, 0.03%)</title><rect x="87.1173%" y="789" width="0.0265%" height="15" fill="rgb(250,161,5)" fg:x="98595" fg:w="30"/><text x="87.3673%" y="799.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (30 samples, 0.03%)</title><rect x="87.1173%" y="773" width="0.0265%" height="15" fill="rgb(218,225,18)" fg:x="98595" fg:w="30"/><text x="87.3673%" y="783.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (30 samples, 0.03%)</title><rect x="87.1173%" y="757" width="0.0265%" height="15" fill="rgb(245,45,42)" fg:x="98595" fg:w="30"/><text x="87.3673%" y="767.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_key_hashed_nocheck (29 samples, 0.03%)</title><rect x="87.1182%" y="741" width="0.0256%" height="15" fill="rgb(211,115,1)" fg:x="98596" fg:w="29"/><text x="87.3682%" y="751.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_key_hashed_nocheck (29 samples, 0.03%)</title><rect x="87.1182%" y="725" width="0.0256%" height="15" fill="rgb(248,133,52)" fg:x="98596" fg:w="29"/><text x="87.3682%" y="735.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_hash (29 samples, 0.03%)</title><rect x="87.1182%" y="709" width="0.0256%" height="15" fill="rgb(238,100,21)" fg:x="98596" fg:w="29"/><text x="87.3682%" y="719.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::search (29 samples, 0.03%)</title><rect x="87.1182%" y="693" width="0.0256%" height="15" fill="rgb(247,144,11)" fg:x="98596" fg:w="29"/><text x="87.3682%" y="703.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (21 samples, 0.02%)</title><rect x="87.1252%" y="677" width="0.0186%" height="15" fill="rgb(206,164,16)" fg:x="98604" fg:w="21"/><text x="87.3752%" y="687.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (21 samples, 0.02%)</title><rect x="87.1252%" y="661" width="0.0186%" height="15" fill="rgb(222,34,3)" fg:x="98604" fg:w="21"/><text x="87.3752%" y="671.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (21 samples, 0.02%)</title><rect x="87.1252%" y="645" width="0.0186%" height="15" fill="rgb(248,82,4)" fg:x="98604" fg:w="21"/><text x="87.3752%" y="655.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (21 samples, 0.02%)</title><rect x="87.1252%" y="629" width="0.0186%" height="15" fill="rgb(228,81,46)" fg:x="98604" fg:w="21"/><text x="87.3752%" y="639.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (21 samples, 0.02%)</title><rect x="87.1252%" y="613" width="0.0186%" height="15" fill="rgb(227,67,47)" fg:x="98604" fg:w="21"/><text x="87.3752%" y="623.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (39 samples, 0.03%)</title><rect x="87.1438%" y="949" width="0.0345%" height="15" fill="rgb(215,93,53)" fg:x="98625" fg:w="39"/><text x="87.3938%" y="959.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (16 samples, 0.01%)</title><rect x="87.1783%" y="949" width="0.0141%" height="15" fill="rgb(248,194,39)" fg:x="98664" fg:w="16"/><text x="87.4283%" y="959.50"></text></g><g><title>tremor_script::interpreter::val_eq (82 samples, 0.07%)</title><rect x="87.2260%" y="949" width="0.0725%" height="15" fill="rgb(215,5,19)" fg:x="98718" fg:w="82"/><text x="87.4760%" y="959.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry (25 samples, 0.02%)</title><rect x="87.4018%" y="693" width="0.0221%" height="15" fill="rgb(226,215,51)" fg:x="98917" fg:w="25"/><text x="87.6518%" y="703.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_key_hashed_nocheck (159 samples, 0.14%)</title><rect x="87.4239%" y="693" width="0.1405%" height="15" fill="rgb(225,56,26)" fg:x="98942" fg:w="159"/><text x="87.6739%" y="703.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_key_hashed_nocheck (152 samples, 0.13%)</title><rect x="87.4301%" y="677" width="0.1343%" height="15" fill="rgb(222,75,29)" fg:x="98949" fg:w="152"/><text x="87.6801%" y="687.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_hash (152 samples, 0.13%)</title><rect x="87.4301%" y="661" width="0.1343%" height="15" fill="rgb(236,139,6)" fg:x="98949" fg:w="152"/><text x="87.6801%" y="671.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::search (152 samples, 0.13%)</title><rect x="87.4301%" y="645" width="0.1343%" height="15" fill="rgb(223,137,36)" fg:x="98949" fg:w="152"/><text x="87.6801%" y="655.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (135 samples, 0.12%)</title><rect x="87.4451%" y="629" width="0.1193%" height="15" fill="rgb(226,99,2)" fg:x="98966" fg:w="135"/><text x="87.6951%" y="639.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (128 samples, 0.11%)</title><rect x="87.4513%" y="613" width="0.1131%" height="15" fill="rgb(206,133,23)" fg:x="98973" fg:w="128"/><text x="87.7013%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (128 samples, 0.11%)</title><rect x="87.4513%" y="597" width="0.1131%" height="15" fill="rgb(243,173,15)" fg:x="98973" fg:w="128"/><text x="87.7013%" y="607.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (128 samples, 0.11%)</title><rect x="87.4513%" y="581" width="0.1131%" height="15" fill="rgb(228,69,28)" fg:x="98973" fg:w="128"/><text x="87.7013%" y="591.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (128 samples, 0.11%)</title><rect x="87.4513%" y="565" width="0.1131%" height="15" fill="rgb(212,51,22)" fg:x="98973" fg:w="128"/><text x="87.7013%" y="575.50"></text></g><g><title>[libc-2.31.so] (76 samples, 0.07%)</title><rect x="87.4972%" y="549" width="0.0672%" height="15" fill="rgb(227,113,0)" fg:x="99025" fg:w="76"/><text x="87.7472%" y="559.50"></text></g><g><title>tremor_script::srs::EventPayload::rent_mut (307 samples, 0.27%)</title><rect x="87.2984%" y="949" width="0.2713%" height="15" fill="rgb(252,84,27)" fg:x="98800" fg:w="307"/><text x="87.5484%" y="959.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (298 samples, 0.26%)</title><rect x="87.3064%" y="933" width="0.2633%" height="15" fill="rgb(223,145,39)" fg:x="98809" fg:w="298"/><text x="87.5564%" y="943.50"></text></g><g><title>tremor_script::script::Script::run (298 samples, 0.26%)</title><rect x="87.3064%" y="917" width="0.2633%" height="15" fill="rgb(239,219,30)" fg:x="98809" fg:w="298"/><text x="87.5564%" y="927.50"></text></g><g><title>tremor_script::ast::Script::run (298 samples, 0.26%)</title><rect x="87.3064%" y="901" width="0.2633%" height="15" fill="rgb(224,196,39)" fg:x="98809" fg:w="298"/><text x="87.5564%" y="911.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (298 samples, 0.26%)</title><rect x="87.3064%" y="885" width="0.2633%" height="15" fill="rgb(205,35,43)" fg:x="98809" fg:w="298"/><text x="87.5564%" y="895.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (296 samples, 0.26%)</title><rect x="87.3082%" y="869" width="0.2615%" height="15" fill="rgb(228,201,21)" fg:x="98811" fg:w="296"/><text x="87.5582%" y="879.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (296 samples, 0.26%)</title><rect x="87.3082%" y="853" width="0.2615%" height="15" fill="rgb(237,118,16)" fg:x="98811" fg:w="296"/><text x="87.5582%" y="863.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (296 samples, 0.26%)</title><rect x="87.3082%" y="837" width="0.2615%" height="15" fill="rgb(241,17,19)" fg:x="98811" fg:w="296"/><text x="87.5582%" y="847.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (296 samples, 0.26%)</title><rect x="87.3082%" y="821" width="0.2615%" height="15" fill="rgb(214,10,25)" fg:x="98811" fg:w="296"/><text x="87.5582%" y="831.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (296 samples, 0.26%)</title><rect x="87.3082%" y="805" width="0.2615%" height="15" fill="rgb(238,37,29)" fg:x="98811" fg:w="296"/><text x="87.5582%" y="815.50"></text></g><g><title>tremor_script::interpreter::resolve (296 samples, 0.26%)</title><rect x="87.3082%" y="789" width="0.2615%" height="15" fill="rgb(253,83,25)" fg:x="98811" fg:w="296"/><text x="87.5582%" y="799.50"></text></g><g><title>tremor_script::interpreter::resolve_value (296 samples, 0.26%)</title><rect x="87.3082%" y="773" width="0.2615%" height="15" fill="rgb(234,192,12)" fg:x="98811" fg:w="296"/><text x="87.5582%" y="783.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup (192 samples, 0.17%)</title><rect x="87.4000%" y="757" width="0.1696%" height="15" fill="rgb(241,216,45)" fg:x="98915" fg:w="192"/><text x="87.6500%" y="767.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (192 samples, 0.17%)</title><rect x="87.4000%" y="741" width="0.1696%" height="15" fill="rgb(242,22,33)" fg:x="98915" fg:w="192"/><text x="87.6500%" y="751.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (190 samples, 0.17%)</title><rect x="87.4018%" y="725" width="0.1679%" height="15" fill="rgb(231,105,49)" fg:x="98917" fg:w="190"/><text x="87.6518%" y="735.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (190 samples, 0.17%)</title><rect x="87.4018%" y="709" width="0.1679%" height="15" fill="rgb(218,204,15)" fg:x="98917" fg:w="190"/><text x="87.6518%" y="719.50"></text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (278 samples, 0.25%)</title><rect x="87.5750%" y="949" width="0.2456%" height="15" fill="rgb(235,138,41)" fg:x="99113" fg:w="278"/><text x="87.8250%" y="959.50"></text></g><g><title>[unknown] (91,667 samples, 81.00%)</title><rect x="6.8363%" y="965" width="80.9958%" height="15" fill="rgb(246,0,9)" fg:x="7737" fg:w="91667"/><text x="7.0863%" y="975.50">[unknown]</text></g><g><title>window::TimeWindow::add_t (12 samples, 0.01%)</title><rect x="87.8215%" y="949" width="0.0106%" height="15" fill="rgb(210,74,4)" fg:x="99392" fg:w="12"/><text x="88.0715%" y="959.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (26 samples, 0.02%)</title><rect x="87.8427%" y="949" width="0.0230%" height="15" fill="rgb(250,60,41)" fg:x="99416" fg:w="26"/><text x="88.0927%" y="959.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (23 samples, 0.02%)</title><rect x="87.8454%" y="933" width="0.0203%" height="15" fill="rgb(220,115,12)" fg:x="99419" fg:w="23"/><text x="88.0954%" y="943.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (22 samples, 0.02%)</title><rect x="87.8463%" y="917" width="0.0194%" height="15" fill="rgb(237,100,13)" fg:x="99420" fg:w="22"/><text x="88.0963%" y="927.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (15 samples, 0.01%)</title><rect x="87.8657%" y="949" width="0.0133%" height="15" fill="rgb(213,55,26)" fg:x="99442" fg:w="15"/><text x="88.1157%" y="959.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (27 samples, 0.02%)</title><rect x="87.8904%" y="933" width="0.0239%" height="15" fill="rgb(216,17,4)" fg:x="99470" fg:w="27"/><text x="88.1404%" y="943.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_source_reply::{{closure}} (20 samples, 0.02%)</title><rect x="87.8966%" y="917" width="0.0177%" height="15" fill="rgb(220,153,47)" fg:x="99477" fg:w="20"/><text x="88.1466%" y="927.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12 samples, 0.01%)</title><rect x="87.9037%" y="901" width="0.0106%" height="15" fill="rgb(215,131,9)" fg:x="99485" fg:w="12"/><text x="88.1537%" y="911.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_data::{{closure}} (12 samples, 0.01%)</title><rect x="87.9037%" y="885" width="0.0106%" height="15" fill="rgb(233,46,42)" fg:x="99485" fg:w="12"/><text x="88.1537%" y="895.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::run::{{closure}} (38 samples, 0.03%)</title><rect x="87.8816%" y="949" width="0.0336%" height="15" fill="rgb(226,86,7)" fg:x="99460" fg:w="38"/><text x="88.1316%" y="959.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (72 samples, 0.06%)</title><rect x="87.9647%" y="933" width="0.0636%" height="15" fill="rgb(239,226,21)" fg:x="99554" fg:w="72"/><text x="88.2147%" y="943.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (69 samples, 0.06%)</title><rect x="87.9673%" y="917" width="0.0610%" height="15" fill="rgb(244,137,22)" fg:x="99557" fg:w="69"/><text x="88.2173%" y="927.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (55 samples, 0.05%)</title><rect x="87.9797%" y="901" width="0.0486%" height="15" fill="rgb(211,139,35)" fg:x="99571" fg:w="55"/><text x="88.2297%" y="911.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (55 samples, 0.05%)</title><rect x="87.9797%" y="885" width="0.0486%" height="15" fill="rgb(214,62,50)" fg:x="99571" fg:w="55"/><text x="88.2297%" y="895.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue_events (42 samples, 0.04%)</title><rect x="87.9912%" y="869" width="0.0371%" height="15" fill="rgb(212,113,44)" fg:x="99584" fg:w="42"/><text x="88.2412%" y="879.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (14 samples, 0.01%)</title><rect x="88.0159%" y="853" width="0.0124%" height="15" fill="rgb(226,150,43)" fg:x="99612" fg:w="14"/><text x="88.2659%" y="863.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (14 samples, 0.01%)</title><rect x="88.0159%" y="837" width="0.0124%" height="15" fill="rgb(250,71,37)" fg:x="99612" fg:w="14"/><text x="88.2659%" y="847.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (14 samples, 0.01%)</title><rect x="88.0159%" y="821" width="0.0124%" height="15" fill="rgb(219,76,19)" fg:x="99612" fg:w="14"/><text x="88.2659%" y="831.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (K,L)&gt;::eq (14 samples, 0.01%)</title><rect x="88.0159%" y="805" width="0.0124%" height="15" fill="rgb(250,39,11)" fg:x="99612" fg:w="14"/><text x="88.2659%" y="815.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (14 samples, 0.01%)</title><rect x="88.0159%" y="789" width="0.0124%" height="15" fill="rgb(230,64,31)" fg:x="99612" fg:w="14"/><text x="88.2659%" y="799.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (14 samples, 0.01%)</title><rect x="88.0159%" y="773" width="0.0124%" height="15" fill="rgb(208,222,23)" fg:x="99612" fg:w="14"/><text x="88.2659%" y="783.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (14 samples, 0.01%)</title><rect x="88.0159%" y="757" width="0.0124%" height="15" fill="rgb(227,125,18)" fg:x="99612" fg:w="14"/><text x="88.2659%" y="767.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (14 samples, 0.01%)</title><rect x="88.0159%" y="741" width="0.0124%" height="15" fill="rgb(234,210,9)" fg:x="99612" fg:w="14"/><text x="88.2659%" y="751.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (14 samples, 0.01%)</title><rect x="88.0159%" y="725" width="0.0124%" height="15" fill="rgb(217,127,24)" fg:x="99612" fg:w="14"/><text x="88.2659%" y="735.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (14 samples, 0.01%)</title><rect x="88.0159%" y="709" width="0.0124%" height="15" fill="rgb(239,141,48)" fg:x="99612" fg:w="14"/><text x="88.2659%" y="719.50"></text></g><g><title>__dso_handle (229 samples, 0.20%)</title><rect x="87.8321%" y="965" width="0.2023%" height="15" fill="rgb(227,109,8)" fg:x="99404" fg:w="229"/><text x="88.0821%" y="975.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (135 samples, 0.12%)</title><rect x="87.9152%" y="949" width="0.1193%" height="15" fill="rgb(235,184,23)" fg:x="99498" fg:w="135"/><text x="88.1652%" y="959.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::split_off (15 samples, 0.01%)</title><rect x="88.0362%" y="965" width="0.0133%" height="15" fill="rgb(227,226,48)" fg:x="99635" fg:w="15"/><text x="88.2862%" y="975.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (20 samples, 0.02%)</title><rect x="88.0733%" y="933" width="0.0177%" height="15" fill="rgb(206,150,11)" fg:x="99677" fg:w="20"/><text x="88.3233%" y="943.50"></text></g><g><title>async_task::runnable::Runnable::run (19 samples, 0.02%)</title><rect x="88.0742%" y="917" width="0.0168%" height="15" fill="rgb(254,2,33)" fg:x="99678" fg:w="19"/><text x="88.3242%" y="927.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (29 samples, 0.03%)</title><rect x="88.0672%" y="949" width="0.0256%" height="15" fill="rgb(243,160,20)" fg:x="99670" fg:w="29"/><text x="88.3172%" y="959.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (19 samples, 0.02%)</title><rect x="88.0928%" y="949" width="0.0168%" height="15" fill="rgb(218,208,30)" fg:x="99699" fg:w="19"/><text x="88.3428%" y="959.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (17 samples, 0.02%)</title><rect x="88.0945%" y="933" width="0.0150%" height="15" fill="rgb(224,120,49)" fg:x="99701" fg:w="17"/><text x="88.3445%" y="943.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (17 samples, 0.02%)</title><rect x="88.0945%" y="917" width="0.0150%" height="15" fill="rgb(246,12,2)" fg:x="99701" fg:w="17"/><text x="88.3445%" y="927.50"></text></g><g><title>polling::epoll::Poller::modify (25 samples, 0.02%)</title><rect x="88.1272%" y="949" width="0.0221%" height="15" fill="rgb(236,117,3)" fg:x="99738" fg:w="25"/><text x="88.3772%" y="959.50"></text></g><g><title>polling::epoll::Poller::ctl (12 samples, 0.01%)</title><rect x="88.1387%" y="933" width="0.0106%" height="15" fill="rgb(216,128,52)" fg:x="99751" fg:w="12"/><text x="88.3887%" y="943.50"></text></g><g><title>async_io::reactor::Reactor::get::REACTOR (97 samples, 0.09%)</title><rect x="88.0663%" y="965" width="0.0857%" height="15" fill="rgb(246,145,19)" fg:x="99669" fg:w="97"/><text x="88.3163%" y="975.50"></text></g><g><title>async_io::reactor::Reactor::insert_timer::ID_GENERATOR (27 samples, 0.02%)</title><rect x="88.1520%" y="965" width="0.0239%" height="15" fill="rgb(222,11,46)" fg:x="99766" fg:w="27"/><text x="88.4020%" y="975.50"></text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (13 samples, 0.01%)</title><rect x="88.1643%" y="949" width="0.0115%" height="15" fill="rgb(245,82,36)" fg:x="99780" fg:w="13"/><text x="88.4143%" y="959.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (20 samples, 0.02%)</title><rect x="88.1829%" y="565" width="0.0177%" height="15" fill="rgb(250,73,51)" fg:x="99801" fg:w="20"/><text x="88.4329%" y="575.50"></text></g><g><title>snmalloc::BackendAllocator&lt;snmalloc::PALLinux, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::StandardLocalState&lt;snmalloc::PALLinux, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt;, 14ul&gt; &gt;::alloc_chunk (13 samples, 0.01%)</title><rect x="88.1891%" y="549" width="0.0115%" height="15" fill="rgb(221,189,23)" fg:x="99808" fg:w="13"/><text x="88.4391%" y="559.50"></text></g><g><title>async_channel::bounded (25 samples, 0.02%)</title><rect x="88.1803%" y="725" width="0.0221%" height="15" fill="rgb(210,33,7)" fg:x="99798" fg:w="25"/><text x="88.4303%" y="735.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (25 samples, 0.02%)</title><rect x="88.1803%" y="709" width="0.0221%" height="15" fill="rgb(210,107,22)" fg:x="99798" fg:w="25"/><text x="88.4303%" y="719.50"></text></g><g><title>alloc::alloc::exchange_malloc (25 samples, 0.02%)</title><rect x="88.1803%" y="693" width="0.0221%" height="15" fill="rgb(222,116,37)" fg:x="99798" fg:w="25"/><text x="88.4303%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (25 samples, 0.02%)</title><rect x="88.1803%" y="677" width="0.0221%" height="15" fill="rgb(254,17,48)" fg:x="99798" fg:w="25"/><text x="88.4303%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (25 samples, 0.02%)</title><rect x="88.1803%" y="661" width="0.0221%" height="15" fill="rgb(224,36,32)" fg:x="99798" fg:w="25"/><text x="88.4303%" y="671.50"></text></g><g><title>alloc::alloc::alloc (25 samples, 0.02%)</title><rect x="88.1803%" y="645" width="0.0221%" height="15" fill="rgb(232,90,46)" fg:x="99798" fg:w="25"/><text x="88.4303%" y="655.50"></text></g><g><title>__rg_alloc (25 samples, 0.02%)</title><rect x="88.1803%" y="629" width="0.0221%" height="15" fill="rgb(241,66,40)" fg:x="99798" fg:w="25"/><text x="88.4303%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (25 samples, 0.02%)</title><rect x="88.1803%" y="613" width="0.0221%" height="15" fill="rgb(249,184,29)" fg:x="99798" fg:w="25"/><text x="88.4303%" y="623.50"></text></g><g><title>sn_rust_alloc (25 samples, 0.02%)</title><rect x="88.1803%" y="597" width="0.0221%" height="15" fill="rgb(231,181,1)" fg:x="99798" fg:w="25"/><text x="88.4303%" y="607.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::lazy_init&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long)#2}, unsigned long&gt; (25 samples, 0.02%)</title><rect x="88.1803%" y="581" width="0.0221%" height="15" fill="rgb(224,94,2)" fg:x="99798" fg:w="25"/><text x="88.4303%" y="591.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (24 samples, 0.02%)</title><rect x="88.4869%" y="357" width="0.0212%" height="15" fill="rgb(229,170,15)" fg:x="100145" fg:w="24"/><text x="88.7369%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (24 samples, 0.02%)</title><rect x="88.6256%" y="261" width="0.0212%" height="15" fill="rgb(240,127,35)" fg:x="100302" fg:w="24"/><text x="88.8756%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (23 samples, 0.02%)</title><rect x="88.6265%" y="245" width="0.0203%" height="15" fill="rgb(248,196,34)" fg:x="100303" fg:w="23"/><text x="88.8765%" y="255.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (20 samples, 0.02%)</title><rect x="88.6291%" y="229" width="0.0177%" height="15" fill="rgb(236,137,7)" fg:x="100306" fg:w="20"/><text x="88.8791%" y="239.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (20 samples, 0.02%)</title><rect x="88.6291%" y="213" width="0.0177%" height="15" fill="rgb(235,127,16)" fg:x="100306" fg:w="20"/><text x="88.8791%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (20 samples, 0.02%)</title><rect x="88.6291%" y="197" width="0.0177%" height="15" fill="rgb(250,192,54)" fg:x="100306" fg:w="20"/><text x="88.8791%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (70 samples, 0.06%)</title><rect x="88.6468%" y="261" width="0.0619%" height="15" fill="rgb(218,98,20)" fg:x="100326" fg:w="70"/><text x="88.8968%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (277 samples, 0.24%)</title><rect x="88.5116%" y="309" width="0.2448%" height="15" fill="rgb(230,176,47)" fg:x="100173" fg:w="277"/><text x="88.7616%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (237 samples, 0.21%)</title><rect x="88.5469%" y="293" width="0.2094%" height="15" fill="rgb(244,2,33)" fg:x="100213" fg:w="237"/><text x="88.7969%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (193 samples, 0.17%)</title><rect x="88.5858%" y="277" width="0.1705%" height="15" fill="rgb(231,100,17)" fg:x="100257" fg:w="193"/><text x="88.8358%" y="287.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (54 samples, 0.05%)</title><rect x="88.7086%" y="261" width="0.0477%" height="15" fill="rgb(245,23,12)" fg:x="100396" fg:w="54"/><text x="88.9586%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (54 samples, 0.05%)</title><rect x="88.7086%" y="245" width="0.0477%" height="15" fill="rgb(249,55,22)" fg:x="100396" fg:w="54"/><text x="88.9586%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (19 samples, 0.02%)</title><rect x="88.7396%" y="229" width="0.0168%" height="15" fill="rgb(207,134,9)" fg:x="100431" fg:w="19"/><text x="88.9896%" y="239.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (19 samples, 0.02%)</title><rect x="88.7396%" y="213" width="0.0168%" height="15" fill="rgb(218,134,0)" fg:x="100431" fg:w="19"/><text x="88.9896%" y="223.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (13 samples, 0.01%)</title><rect x="88.7449%" y="197" width="0.0115%" height="15" fill="rgb(213,212,33)" fg:x="100437" fg:w="13"/><text x="88.9949%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (13 samples, 0.01%)</title><rect x="88.7449%" y="181" width="0.0115%" height="15" fill="rgb(252,106,18)" fg:x="100437" fg:w="13"/><text x="88.9949%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (300 samples, 0.27%)</title><rect x="88.5081%" y="357" width="0.2651%" height="15" fill="rgb(208,126,42)" fg:x="100169" fg:w="300"/><text x="88.7581%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (300 samples, 0.27%)</title><rect x="88.5081%" y="341" width="0.2651%" height="15" fill="rgb(246,175,29)" fg:x="100169" fg:w="300"/><text x="88.7581%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (300 samples, 0.27%)</title><rect x="88.5081%" y="325" width="0.2651%" height="15" fill="rgb(215,13,50)" fg:x="100169" fg:w="300"/><text x="88.7581%" y="335.50"></text></g><g><title>core::ops::control_flow::ControlFlow&lt;R,&lt;R as core::ops::try_trait::Try&gt;::Output&gt;::into_try (19 samples, 0.02%)</title><rect x="88.7564%" y="309" width="0.0168%" height="15" fill="rgb(216,172,15)" fg:x="100450" fg:w="19"/><text x="89.0064%" y="319.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::len (861 samples, 0.76%)</title><rect x="88.9861%" y="325" width="0.7608%" height="15" fill="rgb(212,103,13)" fg:x="100710" fg:w="861"/><text x="89.2361%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (605 samples, 0.53%)</title><rect x="89.2123%" y="309" width="0.5346%" height="15" fill="rgb(231,171,36)" fg:x="100966" fg:w="605"/><text x="89.4623%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_load (605 samples, 0.53%)</title><rect x="89.2123%" y="293" width="0.5346%" height="15" fill="rgb(250,123,20)" fg:x="100966" fg:w="605"/><text x="89.4623%" y="303.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::len (1,044 samples, 0.92%)</title><rect x="88.8323%" y="341" width="0.9225%" height="15" fill="rgb(212,53,50)" fg:x="100536" fg:w="1044"/><text x="89.0823%" y="351.50"></text></g><g><title>async_executor::steal (1,112 samples, 0.98%)</title><rect x="88.7731%" y="357" width="0.9825%" height="15" fill="rgb(243,54,12)" fg:x="100469" fg:w="1112"/><text x="89.0231%" y="367.50"></text></g><g><title>concurrent_queue::full_fence (1,169 samples, 1.03%)</title><rect x="90.2894%" y="325" width="1.0329%" height="15" fill="rgb(234,101,34)" fg:x="102185" fg:w="1169"/><text x="90.5394%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (1,146 samples, 1.01%)</title><rect x="90.3097%" y="309" width="1.0126%" height="15" fill="rgb(254,67,22)" fg:x="102208" fg:w="1146"/><text x="90.5597%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1,146 samples, 1.01%)</title><rect x="90.3097%" y="293" width="1.0126%" height="15" fill="rgb(250,35,47)" fg:x="102208" fg:w="1146"/><text x="90.5597%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1,146 samples, 1.01%)</title><rect x="90.3097%" y="277" width="1.0126%" height="15" fill="rgb(226,126,38)" fg:x="102208" fg:w="1146"/><text x="90.5597%" y="287.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (1,658 samples, 1.46%)</title><rect x="89.9492%" y="341" width="1.4650%" height="15" fill="rgb(216,138,53)" fg:x="101800" fg:w="1658"/><text x="90.1992%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (104 samples, 0.09%)</title><rect x="91.3223%" y="325" width="0.0919%" height="15" fill="rgb(246,199,43)" fg:x="103354" fg:w="104"/><text x="91.5723%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_load (72 samples, 0.06%)</title><rect x="91.3506%" y="309" width="0.0636%" height="15" fill="rgb(232,125,11)" fg:x="103386" fg:w="72"/><text x="91.6006%" y="319.50"></text></g><g><title>concurrent_queue::full_fence (133 samples, 0.12%)</title><rect x="91.4460%" y="325" width="0.1175%" height="15" fill="rgb(218,219,45)" fg:x="103494" fg:w="133"/><text x="91.6960%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (133 samples, 0.12%)</title><rect x="91.4460%" y="309" width="0.1175%" height="15" fill="rgb(216,102,54)" fg:x="103494" fg:w="133"/><text x="91.6960%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (133 samples, 0.12%)</title><rect x="91.4460%" y="293" width="0.1175%" height="15" fill="rgb(250,228,7)" fg:x="103494" fg:w="133"/><text x="91.6960%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (133 samples, 0.12%)</title><rect x="91.4460%" y="277" width="0.1175%" height="15" fill="rgb(226,125,25)" fg:x="103494" fg:w="133"/><text x="91.6960%" y="287.50"></text></g><g><title>concurrent_queue::unbounded::Slot&lt;T&gt;::wait_write (21 samples, 0.02%)</title><rect x="91.5653%" y="325" width="0.0186%" height="15" fill="rgb(224,165,27)" fg:x="103629" fg:w="21"/><text x="91.8153%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (20 samples, 0.02%)</title><rect x="91.5662%" y="309" width="0.0177%" height="15" fill="rgb(233,86,3)" fg:x="103630" fg:w="20"/><text x="91.8162%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_load (20 samples, 0.02%)</title><rect x="91.5662%" y="293" width="0.0177%" height="15" fill="rgb(228,116,20)" fg:x="103630" fg:w="20"/><text x="91.8162%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (19 samples, 0.02%)</title><rect x="91.5874%" y="325" width="0.0168%" height="15" fill="rgb(209,192,17)" fg:x="103654" fg:w="19"/><text x="91.8374%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_load (19 samples, 0.02%)</title><rect x="91.5874%" y="309" width="0.0168%" height="15" fill="rgb(224,88,34)" fg:x="103654" fg:w="19"/><text x="91.8374%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (47 samples, 0.04%)</title><rect x="91.6042%" y="325" width="0.0415%" height="15" fill="rgb(233,38,6)" fg:x="103673" fg:w="47"/><text x="91.8542%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (47 samples, 0.04%)</title><rect x="91.6042%" y="309" width="0.0415%" height="15" fill="rgb(212,59,30)" fg:x="103673" fg:w="47"/><text x="91.8542%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (74 samples, 0.07%)</title><rect x="91.6457%" y="325" width="0.0654%" height="15" fill="rgb(213,80,3)" fg:x="103720" fg:w="74"/><text x="91.8957%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_or (74 samples, 0.07%)</title><rect x="91.6457%" y="309" width="0.0654%" height="15" fill="rgb(251,178,7)" fg:x="103720" fg:w="74"/><text x="91.8957%" y="319.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (2,343 samples, 2.07%)</title><rect x="89.7557%" y="357" width="2.0702%" height="15" fill="rgb(213,154,26)" fg:x="101581" fg:w="2343"/><text x="90.0057%" y="367.50">c..</text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (466 samples, 0.41%)</title><rect x="91.4142%" y="341" width="0.4118%" height="15" fill="rgb(238,165,49)" fg:x="103458" fg:w="466"/><text x="91.6642%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (130 samples, 0.11%)</title><rect x="91.7111%" y="325" width="0.1149%" height="15" fill="rgb(248,91,46)" fg:x="103794" fg:w="130"/><text x="91.9611%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_load (130 samples, 0.11%)</title><rect x="91.7111%" y="309" width="0.1149%" height="15" fill="rgb(244,21,52)" fg:x="103794" fg:w="130"/><text x="91.9611%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (115 samples, 0.10%)</title><rect x="91.8259%" y="357" width="0.1016%" height="15" fill="rgb(247,122,20)" fg:x="103924" fg:w="115"/><text x="92.0759%" y="367.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (115 samples, 0.10%)</title><rect x="91.8259%" y="341" width="0.1016%" height="15" fill="rgb(218,27,9)" fg:x="103924" fg:w="115"/><text x="92.0759%" y="351.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read_unlock (115 samples, 0.10%)</title><rect x="91.8259%" y="325" width="0.1016%" height="15" fill="rgb(246,7,6)" fg:x="103924" fg:w="115"/><text x="92.0759%" y="335.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_unlock (115 samples, 0.10%)</title><rect x="91.8259%" y="309" width="0.1016%" height="15" fill="rgb(227,135,54)" fg:x="103924" fg:w="115"/><text x="92.0759%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (105 samples, 0.09%)</title><rect x="91.8348%" y="293" width="0.0928%" height="15" fill="rgb(247,14,11)" fg:x="103934" fg:w="105"/><text x="92.0848%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_sub (105 samples, 0.09%)</title><rect x="91.8348%" y="277" width="0.0928%" height="15" fill="rgb(206,149,34)" fg:x="103934" fg:w="105"/><text x="92.0848%" y="287.50"></text></g><g><title>fastrand::usize (35 samples, 0.03%)</title><rect x="91.9275%" y="357" width="0.0309%" height="15" fill="rgb(227,228,4)" fg:x="104039" fg:w="35"/><text x="92.1775%" y="367.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (32 samples, 0.03%)</title><rect x="91.9302%" y="341" width="0.0283%" height="15" fill="rgb(238,218,28)" fg:x="104042" fg:w="32"/><text x="92.1802%" y="351.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (31 samples, 0.03%)</title><rect x="91.9311%" y="325" width="0.0274%" height="15" fill="rgb(252,86,40)" fg:x="104043" fg:w="31"/><text x="92.1811%" y="335.50"></text></g><g><title>fastrand::usize::{{closure}} (16 samples, 0.01%)</title><rect x="91.9443%" y="309" width="0.0141%" height="15" fill="rgb(251,225,11)" fg:x="104058" fg:w="16"/><text x="92.1943%" y="319.50"></text></g><g><title>fastrand::Rng::usize (16 samples, 0.01%)</title><rect x="91.9443%" y="293" width="0.0141%" height="15" fill="rgb(206,46,49)" fg:x="104058" fg:w="16"/><text x="92.1943%" y="303.50"></text></g><g><title>fastrand::Rng::gen_mod_u64 (14 samples, 0.01%)</title><rect x="91.9461%" y="277" width="0.0124%" height="15" fill="rgb(245,128,24)" fg:x="104060" fg:w="14"/><text x="92.1961%" y="287.50"></text></g><g><title>std::sync::poison::Flag::get (16 samples, 0.01%)</title><rect x="91.9585%" y="309" width="0.0141%" height="15" fill="rgb(219,177,34)" fg:x="104074" fg:w="16"/><text x="92.2085%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (16 samples, 0.01%)</title><rect x="91.9585%" y="293" width="0.0141%" height="15" fill="rgb(218,60,48)" fg:x="104074" fg:w="16"/><text x="92.2085%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_load (16 samples, 0.01%)</title><rect x="91.9585%" y="277" width="0.0141%" height="15" fill="rgb(221,11,5)" fg:x="104074" fg:w="16"/><text x="92.2085%" y="287.50"></text></g><g><title>std::sync::rwlock::RwLockReadGuard&lt;T&gt;::new (18 samples, 0.02%)</title><rect x="91.9585%" y="341" width="0.0159%" height="15" fill="rgb(220,148,13)" fg:x="104074" fg:w="18"/><text x="92.2085%" y="351.50"></text></g><g><title>std::sync::poison::Flag::borrow (18 samples, 0.02%)</title><rect x="91.9585%" y="325" width="0.0159%" height="15" fill="rgb(210,16,3)" fg:x="104074" fg:w="18"/><text x="92.2085%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (217 samples, 0.19%)</title><rect x="91.9779%" y="309" width="0.1917%" height="15" fill="rgb(236,80,2)" fg:x="104096" fg:w="217"/><text x="92.2279%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (217 samples, 0.19%)</title><rect x="91.9779%" y="293" width="0.1917%" height="15" fill="rgb(239,129,19)" fg:x="104096" fg:w="217"/><text x="92.2279%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (30 samples, 0.03%)</title><rect x="92.1696%" y="309" width="0.0265%" height="15" fill="rgb(220,106,35)" fg:x="104313" fg:w="30"/><text x="92.4196%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_load (30 samples, 0.03%)</title><rect x="92.1696%" y="293" width="0.0265%" height="15" fill="rgb(252,139,45)" fg:x="104313" fg:w="30"/><text x="92.4196%" y="303.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (4,329 samples, 3.83%)</title><rect x="88.3773%" y="373" width="3.8250%" height="15" fill="rgb(229,8,36)" fg:x="100021" fg:w="4329"/><text x="88.6273%" y="383.50">asyn..</text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (276 samples, 0.24%)</title><rect x="91.9585%" y="357" width="0.2439%" height="15" fill="rgb(230,126,33)" fg:x="104074" fg:w="276"/><text x="92.2085%" y="367.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read (258 samples, 0.23%)</title><rect x="91.9744%" y="341" width="0.2280%" height="15" fill="rgb(239,140,21)" fg:x="104092" fg:w="258"/><text x="92.2244%" y="351.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (258 samples, 0.23%)</title><rect x="91.9744%" y="325" width="0.2280%" height="15" fill="rgb(254,104,9)" fg:x="104092" fg:w="258"/><text x="92.2244%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (23 samples, 0.02%)</title><rect x="92.2068%" y="357" width="0.0203%" height="15" fill="rgb(239,52,14)" fg:x="104355" fg:w="23"/><text x="92.4568%" y="367.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="92.2068%" y="341" width="0.0203%" height="15" fill="rgb(208,227,44)" fg:x="104355" fg:w="23"/><text x="92.4568%" y="351.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (22 samples, 0.02%)</title><rect x="92.2076%" y="325" width="0.0194%" height="15" fill="rgb(246,18,19)" fg:x="104356" fg:w="22"/><text x="92.4576%" y="335.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (22 samples, 0.02%)</title><rect x="92.2076%" y="309" width="0.0194%" height="15" fill="rgb(235,228,25)" fg:x="104356" fg:w="22"/><text x="92.4576%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (22 samples, 0.02%)</title><rect x="92.2076%" y="293" width="0.0194%" height="15" fill="rgb(240,156,20)" fg:x="104356" fg:w="22"/><text x="92.4576%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_swap (22 samples, 0.02%)</title><rect x="92.2076%" y="277" width="0.0194%" height="15" fill="rgb(224,8,20)" fg:x="104356" fg:w="22"/><text x="92.4576%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (41 samples, 0.04%)</title><rect x="92.2271%" y="357" width="0.0362%" height="15" fill="rgb(214,12,52)" fg:x="104378" fg:w="41"/><text x="92.4771%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (41 samples, 0.04%)</title><rect x="92.2271%" y="341" width="0.0362%" height="15" fill="rgb(211,220,47)" fg:x="104378" fg:w="41"/><text x="92.4771%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (18 samples, 0.02%)</title><rect x="92.2810%" y="277" width="0.0159%" height="15" fill="rgb(250,173,5)" fg:x="104439" fg:w="18"/><text x="92.5310%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (18 samples, 0.02%)</title><rect x="92.2810%" y="261" width="0.0159%" height="15" fill="rgb(250,125,52)" fg:x="104439" fg:w="18"/><text x="92.5310%" y="271.50"></text></g><g><title>async_io::reactor::Reactor::notify (60 samples, 0.05%)</title><rect x="92.2748%" y="309" width="0.0530%" height="15" fill="rgb(209,133,18)" fg:x="104432" fg:w="60"/><text x="92.5248%" y="319.50"></text></g><g><title>polling::Poller::notify (53 samples, 0.05%)</title><rect x="92.2810%" y="293" width="0.0468%" height="15" fill="rgb(216,173,22)" fg:x="104439" fg:w="53"/><text x="92.5310%" y="303.50"></text></g><g><title>polling::epoll::Poller::notify (34 samples, 0.03%)</title><rect x="92.2978%" y="277" width="0.0300%" height="15" fill="rgb(205,3,22)" fg:x="104458" fg:w="34"/><text x="92.5478%" y="287.50"></text></g><g><title>__libc_write (31 samples, 0.03%)</title><rect x="92.3004%" y="261" width="0.0274%" height="15" fill="rgb(248,22,20)" fg:x="104461" fg:w="31"/><text x="92.5504%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (52 samples, 0.05%)</title><rect x="92.3614%" y="277" width="0.0459%" height="15" fill="rgb(233,6,29)" fg:x="104530" fg:w="52"/><text x="92.6114%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_swap (52 samples, 0.05%)</title><rect x="92.3614%" y="261" width="0.0459%" height="15" fill="rgb(240,22,54)" fg:x="104530" fg:w="52"/><text x="92.6114%" y="271.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (13 samples, 0.01%)</title><rect x="92.4073%" y="277" width="0.0115%" height="15" fill="rgb(231,133,32)" fg:x="104582" fg:w="13"/><text x="92.6573%" y="287.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (13 samples, 0.01%)</title><rect x="92.4073%" y="261" width="0.0115%" height="15" fill="rgb(248,193,4)" fg:x="104582" fg:w="13"/><text x="92.6573%" y="271.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::notify_one (13 samples, 0.01%)</title><rect x="92.4073%" y="245" width="0.0115%" height="15" fill="rgb(211,178,46)" fg:x="104582" fg:w="13"/><text x="92.6573%" y="255.50"></text></g><g><title>parking::Unparker::unpark (103 samples, 0.09%)</title><rect x="92.3349%" y="309" width="0.0910%" height="15" fill="rgb(224,5,42)" fg:x="104500" fg:w="103"/><text x="92.5849%" y="319.50"></text></g><g><title>parking::Inner::unpark (84 samples, 0.07%)</title><rect x="92.3517%" y="293" width="0.0742%" height="15" fill="rgb(239,176,25)" fg:x="104519" fg:w="84"/><text x="92.6017%" y="303.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (193 samples, 0.17%)</title><rect x="92.2633%" y="325" width="0.1705%" height="15" fill="rgb(245,187,50)" fg:x="104419" fg:w="193"/><text x="92.5133%" y="335.50"></text></g><g><title>core::task::wake::Waker::wake (273 samples, 0.24%)</title><rect x="92.2633%" y="357" width="0.2412%" height="15" fill="rgb(248,24,15)" fg:x="104419" fg:w="273"/><text x="92.5133%" y="367.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (273 samples, 0.24%)</title><rect x="92.2633%" y="341" width="0.2412%" height="15" fill="rgb(205,166,13)" fg:x="104419" fg:w="273"/><text x="92.5133%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (80 samples, 0.07%)</title><rect x="92.4338%" y="325" width="0.0707%" height="15" fill="rgb(208,114,23)" fg:x="104612" fg:w="80"/><text x="92.6838%" y="335.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (80 samples, 0.07%)</title><rect x="92.4338%" y="309" width="0.0707%" height="15" fill="rgb(239,127,18)" fg:x="104612" fg:w="80"/><text x="92.6838%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (74 samples, 0.07%)</title><rect x="92.4391%" y="293" width="0.0654%" height="15" fill="rgb(219,154,28)" fg:x="104618" fg:w="74"/><text x="92.6891%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_sub (74 samples, 0.07%)</title><rect x="92.4391%" y="277" width="0.0654%" height="15" fill="rgb(225,157,23)" fg:x="104618" fg:w="74"/><text x="92.6891%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (15 samples, 0.01%)</title><rect x="92.5072%" y="309" width="0.0133%" height="15" fill="rgb(219,8,6)" fg:x="104695" fg:w="15"/><text x="92.7572%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (15 samples, 0.01%)</title><rect x="92.5072%" y="293" width="0.0133%" height="15" fill="rgb(212,47,6)" fg:x="104695" fg:w="15"/><text x="92.7572%" y="303.50"></text></g><g><title>async_executor::State::notify (362 samples, 0.32%)</title><rect x="92.2023%" y="373" width="0.3199%" height="15" fill="rgb(224,190,4)" fg:x="104350" fg:w="362"/><text x="92.4523%" y="383.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (20 samples, 0.02%)</title><rect x="92.5045%" y="357" width="0.0177%" height="15" fill="rgb(239,183,29)" fg:x="104692" fg:w="20"/><text x="92.7545%" y="367.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (17 samples, 0.02%)</title><rect x="92.5072%" y="341" width="0.0150%" height="15" fill="rgb(213,57,7)" fg:x="104695" fg:w="17"/><text x="92.7572%" y="351.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (17 samples, 0.02%)</title><rect x="92.5072%" y="325" width="0.0150%" height="15" fill="rgb(216,148,1)" fg:x="104695" fg:w="17"/><text x="92.7572%" y="335.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (59 samples, 0.05%)</title><rect x="92.5452%" y="341" width="0.0521%" height="15" fill="rgb(236,182,29)" fg:x="104738" fg:w="59"/><text x="92.7952%" y="351.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (58 samples, 0.05%)</title><rect x="92.5461%" y="325" width="0.0512%" height="15" fill="rgb(244,120,48)" fg:x="104739" fg:w="58"/><text x="92.7961%" y="335.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (58 samples, 0.05%)</title><rect x="92.5461%" y="309" width="0.0512%" height="15" fill="rgb(206,71,34)" fg:x="104739" fg:w="58"/><text x="92.7961%" y="319.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (58 samples, 0.05%)</title><rect x="92.5461%" y="293" width="0.0512%" height="15" fill="rgb(242,32,6)" fg:x="104739" fg:w="58"/><text x="92.7961%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (58 samples, 0.05%)</title><rect x="92.5461%" y="277" width="0.0512%" height="15" fill="rgb(241,35,3)" fg:x="104739" fg:w="58"/><text x="92.7961%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_add (58 samples, 0.05%)</title><rect x="92.5461%" y="261" width="0.0512%" height="15" fill="rgb(222,62,19)" fg:x="104739" fg:w="58"/><text x="92.7961%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (24 samples, 0.02%)</title><rect x="92.5973%" y="341" width="0.0212%" height="15" fill="rgb(223,110,41)" fg:x="104797" fg:w="24"/><text x="92.8473%" y="351.50"></text></g><g><title>async_executor::Sleepers::insert (105 samples, 0.09%)</title><rect x="92.5408%" y="357" width="0.0928%" height="15" fill="rgb(208,224,4)" fg:x="104733" fg:w="105"/><text x="92.7908%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (17 samples, 0.02%)</title><rect x="92.6185%" y="341" width="0.0150%" height="15" fill="rgb(241,137,19)" fg:x="104821" fg:w="17"/><text x="92.8685%" y="351.50"></text></g><g><title>core::ptr::write (12 samples, 0.01%)</title><rect x="92.6229%" y="325" width="0.0106%" height="15" fill="rgb(244,24,17)" fg:x="104826" fg:w="12"/><text x="92.8729%" y="335.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (68 samples, 0.06%)</title><rect x="92.6989%" y="341" width="0.0601%" height="15" fill="rgb(245,178,49)" fg:x="104912" fg:w="68"/><text x="92.9489%" y="351.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (66 samples, 0.06%)</title><rect x="92.7007%" y="325" width="0.0583%" height="15" fill="rgb(219,160,38)" fg:x="104914" fg:w="66"/><text x="92.9507%" y="335.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (66 samples, 0.06%)</title><rect x="92.7007%" y="309" width="0.0583%" height="15" fill="rgb(228,137,14)" fg:x="104914" fg:w="66"/><text x="92.9507%" y="319.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (66 samples, 0.06%)</title><rect x="92.7007%" y="293" width="0.0583%" height="15" fill="rgb(237,134,11)" fg:x="104914" fg:w="66"/><text x="92.9507%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (66 samples, 0.06%)</title><rect x="92.7007%" y="277" width="0.0583%" height="15" fill="rgb(211,126,44)" fg:x="104914" fg:w="66"/><text x="92.9507%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_add (66 samples, 0.06%)</title><rect x="92.7007%" y="261" width="0.0583%" height="15" fill="rgb(226,171,33)" fg:x="104914" fg:w="66"/><text x="92.9507%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (27 samples, 0.02%)</title><rect x="92.7590%" y="341" width="0.0239%" height="15" fill="rgb(253,99,13)" fg:x="104980" fg:w="27"/><text x="93.0090%" y="351.50"></text></g><g><title>core::ptr::write (19 samples, 0.02%)</title><rect x="92.7661%" y="325" width="0.0168%" height="15" fill="rgb(244,48,7)" fg:x="104988" fg:w="19"/><text x="93.0161%" y="335.50"></text></g><g><title>async_executor::Sleepers::update (168 samples, 0.15%)</title><rect x="92.6424%" y="357" width="0.1484%" height="15" fill="rgb(244,217,54)" fg:x="104848" fg:w="168"/><text x="92.8924%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (129 samples, 0.11%)</title><rect x="92.7908%" y="357" width="0.1140%" height="15" fill="rgb(224,15,18)" fg:x="105016" fg:w="129"/><text x="93.0408%" y="367.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (129 samples, 0.11%)</title><rect x="92.7908%" y="341" width="0.1140%" height="15" fill="rgb(244,99,12)" fg:x="105016" fg:w="129"/><text x="93.0408%" y="351.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (118 samples, 0.10%)</title><rect x="92.8005%" y="325" width="0.1043%" height="15" fill="rgb(233,226,8)" fg:x="105027" fg:w="118"/><text x="93.0505%" y="335.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (118 samples, 0.10%)</title><rect x="92.8005%" y="309" width="0.1043%" height="15" fill="rgb(229,211,3)" fg:x="105027" fg:w="118"/><text x="93.0505%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (118 samples, 0.10%)</title><rect x="92.8005%" y="293" width="0.1043%" height="15" fill="rgb(216,140,21)" fg:x="105027" fg:w="118"/><text x="93.0505%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_swap (118 samples, 0.10%)</title><rect x="92.8005%" y="277" width="0.1043%" height="15" fill="rgb(234,122,30)" fg:x="105027" fg:w="118"/><text x="93.0505%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (109 samples, 0.10%)</title><rect x="92.9048%" y="357" width="0.0963%" height="15" fill="rgb(236,25,46)" fg:x="105145" fg:w="109"/><text x="93.1548%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_swap (109 samples, 0.10%)</title><rect x="92.9048%" y="341" width="0.0963%" height="15" fill="rgb(217,52,54)" fg:x="105145" fg:w="109"/><text x="93.1548%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (102 samples, 0.09%)</title><rect x="93.0011%" y="357" width="0.0901%" height="15" fill="rgb(222,29,26)" fg:x="105254" fg:w="102"/><text x="93.2511%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_store (102 samples, 0.09%)</title><rect x="93.0011%" y="341" width="0.0901%" height="15" fill="rgb(216,177,29)" fg:x="105254" fg:w="102"/><text x="93.2511%" y="351.50"></text></g><g><title>std::sync::poison::Flag::get (14 samples, 0.01%)</title><rect x="93.0974%" y="309" width="0.0124%" height="15" fill="rgb(247,136,51)" fg:x="105363" fg:w="14"/><text x="93.3474%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (14 samples, 0.01%)</title><rect x="93.0974%" y="293" width="0.0124%" height="15" fill="rgb(231,47,47)" fg:x="105363" fg:w="14"/><text x="93.3474%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_load (14 samples, 0.01%)</title><rect x="93.0974%" y="277" width="0.0124%" height="15" fill="rgb(211,192,36)" fg:x="105363" fg:w="14"/><text x="93.3474%" y="287.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (23 samples, 0.02%)</title><rect x="93.0912%" y="341" width="0.0203%" height="15" fill="rgb(229,156,32)" fg:x="105356" fg:w="23"/><text x="93.3412%" y="351.50"></text></g><g><title>std::sync::poison::Flag::borrow (23 samples, 0.02%)</title><rect x="93.0912%" y="325" width="0.0203%" height="15" fill="rgb(248,213,20)" fg:x="105356" fg:w="23"/><text x="93.3412%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (130 samples, 0.11%)</title><rect x="93.1133%" y="309" width="0.1149%" height="15" fill="rgb(217,64,7)" fg:x="105381" fg:w="130"/><text x="93.3633%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (130 samples, 0.11%)</title><rect x="93.1133%" y="293" width="0.1149%" height="15" fill="rgb(232,142,8)" fg:x="105381" fg:w="130"/><text x="93.3633%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (16 samples, 0.01%)</title><rect x="93.2300%" y="293" width="0.0141%" height="15" fill="rgb(224,92,44)" fg:x="105513" fg:w="16"/><text x="93.4800%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (16 samples, 0.01%)</title><rect x="93.2300%" y="277" width="0.0141%" height="15" fill="rgb(214,169,17)" fg:x="105513" fg:w="16"/><text x="93.4800%" y="287.50"></text></g><g><title>async_executor::Ticker::sleep (839 samples, 0.74%)</title><rect x="92.5222%" y="373" width="0.7413%" height="15" fill="rgb(210,59,37)" fg:x="104712" fg:w="839"/><text x="92.7722%" y="383.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (195 samples, 0.17%)</title><rect x="93.0912%" y="357" width="0.1723%" height="15" fill="rgb(214,116,48)" fg:x="105356" fg:w="195"/><text x="93.3412%" y="367.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (172 samples, 0.15%)</title><rect x="93.1116%" y="341" width="0.1520%" height="15" fill="rgb(244,191,6)" fg:x="105379" fg:w="172"/><text x="93.3616%" y="351.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (172 samples, 0.15%)</title><rect x="93.1116%" y="325" width="0.1520%" height="15" fill="rgb(241,50,52)" fg:x="105379" fg:w="172"/><text x="93.3616%" y="335.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (40 samples, 0.04%)</title><rect x="93.2282%" y="309" width="0.0353%" height="15" fill="rgb(236,75,39)" fg:x="105511" fg:w="40"/><text x="93.4782%" y="319.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (19 samples, 0.02%)</title><rect x="93.2467%" y="293" width="0.0168%" height="15" fill="rgb(236,99,0)" fg:x="105532" fg:w="19"/><text x="93.4967%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (14 samples, 0.01%)</title><rect x="93.2512%" y="277" width="0.0124%" height="15" fill="rgb(207,202,15)" fg:x="105537" fg:w="14"/><text x="93.5012%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_load (14 samples, 0.01%)</title><rect x="93.2512%" y="261" width="0.0124%" height="15" fill="rgb(233,207,14)" fg:x="105537" fg:w="14"/><text x="93.5012%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.01%)</title><rect x="93.2909%" y="341" width="0.0106%" height="15" fill="rgb(226,27,51)" fg:x="105582" fg:w="12"/><text x="93.5409%" y="351.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (12 samples, 0.01%)</title><rect x="93.2909%" y="325" width="0.0106%" height="15" fill="rgb(206,104,42)" fg:x="105582" fg:w="12"/><text x="93.5409%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (12 samples, 0.01%)</title><rect x="93.2909%" y="309" width="0.0106%" height="15" fill="rgb(212,225,4)" fg:x="105582" fg:w="12"/><text x="93.5409%" y="319.50"></text></g><g><title>async_executor::Sleepers::remove (73 samples, 0.06%)</title><rect x="93.2768%" y="357" width="0.0645%" height="15" fill="rgb(233,96,42)" fg:x="105566" fg:w="73"/><text x="93.5268%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,core::task::wake::Waker)&gt; (34 samples, 0.03%)</title><rect x="93.3112%" y="341" width="0.0300%" height="15" fill="rgb(229,21,32)" fg:x="105605" fg:w="34"/><text x="93.5612%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (34 samples, 0.03%)</title><rect x="93.3112%" y="325" width="0.0300%" height="15" fill="rgb(226,216,24)" fg:x="105605" fg:w="34"/><text x="93.5612%" y="335.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (34 samples, 0.03%)</title><rect x="93.3112%" y="309" width="0.0300%" height="15" fill="rgb(221,163,17)" fg:x="105605" fg:w="34"/><text x="93.5612%" y="319.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::drop_waker (34 samples, 0.03%)</title><rect x="93.3112%" y="293" width="0.0300%" height="15" fill="rgb(216,216,42)" fg:x="105605" fg:w="34"/><text x="93.5612%" y="303.50"></text></g><g><title>core::mem::drop (33 samples, 0.03%)</title><rect x="93.3121%" y="277" width="0.0292%" height="15" fill="rgb(240,118,7)" fg:x="105606" fg:w="33"/><text x="93.5621%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (33 samples, 0.03%)</title><rect x="93.3121%" y="261" width="0.0292%" height="15" fill="rgb(221,67,37)" fg:x="105606" fg:w="33"/><text x="93.5621%" y="271.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.03%)</title><rect x="93.3121%" y="245" width="0.0292%" height="15" fill="rgb(241,32,44)" fg:x="105606" fg:w="33"/><text x="93.5621%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (33 samples, 0.03%)</title><rect x="93.3121%" y="229" width="0.0292%" height="15" fill="rgb(235,204,43)" fg:x="105606" fg:w="33"/><text x="93.5621%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_sub (33 samples, 0.03%)</title><rect x="93.3121%" y="213" width="0.0292%" height="15" fill="rgb(213,116,10)" fg:x="105606" fg:w="33"/><text x="93.5621%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (19 samples, 0.02%)</title><rect x="93.3439%" y="293" width="0.0168%" height="15" fill="rgb(239,15,48)" fg:x="105642" fg:w="19"/><text x="93.5939%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_swap (19 samples, 0.02%)</title><rect x="93.3439%" y="277" width="0.0168%" height="15" fill="rgb(207,123,36)" fg:x="105642" fg:w="19"/><text x="93.5939%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (24 samples, 0.02%)</title><rect x="93.3413%" y="357" width="0.0212%" height="15" fill="rgb(209,103,30)" fg:x="105639" fg:w="24"/><text x="93.5913%" y="367.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.02%)</title><rect x="93.3413%" y="341" width="0.0212%" height="15" fill="rgb(238,100,19)" fg:x="105639" fg:w="24"/><text x="93.5913%" y="351.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (21 samples, 0.02%)</title><rect x="93.3439%" y="325" width="0.0186%" height="15" fill="rgb(244,30,14)" fg:x="105642" fg:w="21"/><text x="93.5939%" y="335.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (21 samples, 0.02%)</title><rect x="93.3439%" y="309" width="0.0186%" height="15" fill="rgb(249,174,6)" fg:x="105642" fg:w="21"/><text x="93.5939%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (36 samples, 0.03%)</title><rect x="93.3625%" y="357" width="0.0318%" height="15" fill="rgb(235,213,41)" fg:x="105663" fg:w="36"/><text x="93.6125%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_swap (36 samples, 0.03%)</title><rect x="93.3625%" y="341" width="0.0318%" height="15" fill="rgb(213,118,6)" fg:x="105663" fg:w="36"/><text x="93.6125%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (36 samples, 0.03%)</title><rect x="93.3943%" y="357" width="0.0318%" height="15" fill="rgb(235,44,51)" fg:x="105699" fg:w="36"/><text x="93.6443%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_swap (36 samples, 0.03%)</title><rect x="93.3943%" y="341" width="0.0318%" height="15" fill="rgb(217,9,53)" fg:x="105699" fg:w="36"/><text x="93.6443%" y="351.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (12 samples, 0.01%)</title><rect x="93.4261%" y="341" width="0.0106%" height="15" fill="rgb(237,172,34)" fg:x="105735" fg:w="12"/><text x="93.6761%" y="351.50"></text></g><g><title>std::sync::poison::Flag::borrow (12 samples, 0.01%)</title><rect x="93.4261%" y="325" width="0.0106%" height="15" fill="rgb(206,206,11)" fg:x="105735" fg:w="12"/><text x="93.6761%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (37 samples, 0.03%)</title><rect x="93.4376%" y="309" width="0.0327%" height="15" fill="rgb(214,149,29)" fg:x="105748" fg:w="37"/><text x="93.6876%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (37 samples, 0.03%)</title><rect x="93.4376%" y="293" width="0.0327%" height="15" fill="rgb(208,123,3)" fg:x="105748" fg:w="37"/><text x="93.6876%" y="303.50"></text></g><g><title>async_executor::Ticker::wake (266 samples, 0.24%)</title><rect x="93.2635%" y="373" width="0.2350%" height="15" fill="rgb(229,126,4)" fg:x="105551" fg:w="266"/><text x="93.5135%" y="383.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (82 samples, 0.07%)</title><rect x="93.4261%" y="357" width="0.0725%" height="15" fill="rgb(222,92,36)" fg:x="105735" fg:w="82"/><text x="93.6761%" y="367.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (70 samples, 0.06%)</title><rect x="93.4367%" y="341" width="0.0619%" height="15" fill="rgb(216,39,41)" fg:x="105747" fg:w="70"/><text x="93.6867%" y="351.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (70 samples, 0.06%)</title><rect x="93.4367%" y="325" width="0.0619%" height="15" fill="rgb(253,127,28)" fg:x="105747" fg:w="70"/><text x="93.6867%" y="335.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (32 samples, 0.03%)</title><rect x="93.4703%" y="309" width="0.0283%" height="15" fill="rgb(249,152,51)" fg:x="105785" fg:w="32"/><text x="93.7203%" y="319.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (22 samples, 0.02%)</title><rect x="93.4791%" y="293" width="0.0194%" height="15" fill="rgb(209,123,42)" fg:x="105795" fg:w="22"/><text x="93.7291%" y="303.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,823 samples, 5.15%)</title><rect x="88.3579%" y="437" width="5.1451%" height="15" fill="rgb(241,118,22)" fg:x="99999" fg:w="5823"/><text x="88.6079%" y="447.50">&lt;core:..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (5,823 samples, 5.15%)</title><rect x="88.3579%" y="421" width="5.1451%" height="15" fill="rgb(208,25,7)" fg:x="99999" fg:w="5823"/><text x="88.6079%" y="431.50">async_..</text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (5,811 samples, 5.13%)</title><rect x="88.3685%" y="405" width="5.1345%" height="15" fill="rgb(243,144,39)" fg:x="100011" fg:w="5811"/><text x="88.6185%" y="415.50">&lt;futur..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (5,807 samples, 5.13%)</title><rect x="88.3720%" y="389" width="5.1310%" height="15" fill="rgb(250,50,5)" fg:x="100015" fg:w="5807"/><text x="88.6220%" y="399.50">async_..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,893 samples, 5.21%)</title><rect x="88.3305%" y="469" width="5.2070%" height="15" fill="rgb(207,67,11)" fg:x="99968" fg:w="5893"/><text x="88.5805%" y="479.50">&lt;core:..</text></g><g><title>async_executor::Runner::runnable::{{closure}} (5,890 samples, 5.20%)</title><rect x="88.3331%" y="453" width="5.2043%" height="15" fill="rgb(245,204,40)" fg:x="99971" fg:w="5890"/><text x="88.5831%" y="463.50">async_..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (39 samples, 0.03%)</title><rect x="93.5030%" y="437" width="0.0345%" height="15" fill="rgb(238,228,24)" fg:x="105822" fg:w="39"/><text x="93.7530%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_add (39 samples, 0.03%)</title><rect x="93.5030%" y="421" width="0.0345%" height="15" fill="rgb(217,116,22)" fg:x="105822" fg:w="39"/><text x="93.7530%" y="431.50"></text></g><g><title>[libc-2.31.so] (28 samples, 0.02%)</title><rect x="93.6523%" y="325" width="0.0247%" height="15" fill="rgb(234,98,12)" fg:x="105991" fg:w="28"/><text x="93.9023%" y="335.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14 samples, 0.01%)</title><rect x="93.9209%" y="261" width="0.0124%" height="15" fill="rgb(242,170,50)" fg:x="106295" fg:w="14"/><text x="94.1709%" y="271.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (135 samples, 0.12%)</title><rect x="93.9333%" y="261" width="0.1193%" height="15" fill="rgb(235,7,5)" fg:x="106309" fg:w="135"/><text x="94.1833%" y="271.50"></text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (135 samples, 0.12%)</title><rect x="93.9333%" y="245" width="0.1193%" height="15" fill="rgb(241,114,28)" fg:x="106309" fg:w="135"/><text x="94.1833%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (22 samples, 0.02%)</title><rect x="94.0331%" y="229" width="0.0194%" height="15" fill="rgb(246,112,42)" fg:x="106422" fg:w="22"/><text x="94.2831%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (14 samples, 0.01%)</title><rect x="94.0402%" y="213" width="0.0124%" height="15" fill="rgb(248,228,14)" fg:x="106430" fg:w="14"/><text x="94.2902%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,simd_json::value::owned::Value&gt;&gt; (13 samples, 0.01%)</title><rect x="94.0411%" y="197" width="0.0115%" height="15" fill="rgb(208,133,18)" fg:x="106431" fg:w="13"/><text x="94.2911%" y="207.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (114 samples, 0.10%)</title><rect x="94.0561%" y="261" width="0.1007%" height="15" fill="rgb(207,35,49)" fg:x="106448" fg:w="114"/><text x="94.3061%" y="271.50"></text></g><g><title>[libc-2.31.so] (77 samples, 0.07%)</title><rect x="94.1595%" y="245" width="0.0680%" height="15" fill="rgb(205,68,36)" fg:x="106565" fg:w="77"/><text x="94.4095%" y="255.50"></text></g><g><title>[libc-2.31.so] (168 samples, 0.15%)</title><rect x="94.2319%" y="229" width="0.1484%" height="15" fill="rgb(245,62,40)" fg:x="106647" fg:w="168"/><text x="94.4819%" y="239.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (34 samples, 0.03%)</title><rect x="94.4431%" y="117" width="0.0300%" height="15" fill="rgb(228,27,24)" fg:x="106886" fg:w="34"/><text x="94.6931%" y="127.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (291 samples, 0.26%)</title><rect x="94.2275%" y="245" width="0.2571%" height="15" fill="rgb(253,19,12)" fg:x="106642" fg:w="291"/><text x="94.4775%" y="255.50"></text></g><g><title>alloc::alloc::exchange_malloc (118 samples, 0.10%)</title><rect x="94.3804%" y="229" width="0.1043%" height="15" fill="rgb(232,28,20)" fg:x="106815" fg:w="118"/><text x="94.6304%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (118 samples, 0.10%)</title><rect x="94.3804%" y="213" width="0.1043%" height="15" fill="rgb(218,35,51)" fg:x="106815" fg:w="118"/><text x="94.6304%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (118 samples, 0.10%)</title><rect x="94.3804%" y="197" width="0.1043%" height="15" fill="rgb(212,90,40)" fg:x="106815" fg:w="118"/><text x="94.6304%" y="207.50"></text></g><g><title>alloc::alloc::alloc (116 samples, 0.10%)</title><rect x="94.3822%" y="181" width="0.1025%" height="15" fill="rgb(220,172,12)" fg:x="106817" fg:w="116"/><text x="94.6322%" y="191.50"></text></g><g><title>__rg_alloc (116 samples, 0.10%)</title><rect x="94.3822%" y="165" width="0.1025%" height="15" fill="rgb(226,159,20)" fg:x="106817" fg:w="116"/><text x="94.6322%" y="175.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (116 samples, 0.10%)</title><rect x="94.3822%" y="149" width="0.1025%" height="15" fill="rgb(234,205,16)" fg:x="106817" fg:w="116"/><text x="94.6322%" y="159.50"></text></g><g><title>sn_rust_alloc (101 samples, 0.09%)</title><rect x="94.3954%" y="133" width="0.0892%" height="15" fill="rgb(207,9,39)" fg:x="106832" fg:w="101"/><text x="94.6454%" y="143.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (13 samples, 0.01%)</title><rect x="94.4732%" y="117" width="0.0115%" height="15" fill="rgb(249,143,15)" fg:x="106920" fg:w="13"/><text x="94.7232%" y="127.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::Sink&gt;::on_event (392 samples, 0.35%)</title><rect x="94.1568%" y="261" width="0.3464%" height="15" fill="rgb(253,133,29)" fg:x="106562" fg:w="392"/><text x="94.4068%" y="271.50"></text></g><g><title>core::future::from_generator (21 samples, 0.02%)</title><rect x="94.4846%" y="245" width="0.0186%" height="15" fill="rgb(221,187,0)" fg:x="106933" fg:w="21"/><text x="94.7346%" y="255.50"></text></g><g><title>&lt;tremor_pipeline::EventId as core::clone::Clone&gt;::clone (37 samples, 0.03%)</title><rect x="94.5262%" y="245" width="0.0327%" height="15" fill="rgb(205,204,26)" fg:x="106980" fg:w="37"/><text x="94.7762%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (21 samples, 0.02%)</title><rect x="94.5403%" y="229" width="0.0186%" height="15" fill="rgb(224,68,54)" fg:x="106996" fg:w="21"/><text x="94.7903%" y="239.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::ContraflowData as core::convert::From&lt;&amp;tremor_pipeline::event::Event&gt;&gt;::from (308 samples, 0.27%)</title><rect x="94.5032%" y="261" width="0.2721%" height="15" fill="rgb(209,67,4)" fg:x="106954" fg:w="308"/><text x="94.7532%" y="271.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (245 samples, 0.22%)</title><rect x="94.5589%" y="245" width="0.2165%" height="15" fill="rgb(228,229,18)" fg:x="107017" fg:w="245"/><text x="94.8089%" y="255.50"></text></g><g><title>[libc-2.31.so] (808 samples, 0.71%)</title><rect x="94.7753%" y="261" width="0.7139%" height="15" fill="rgb(231,89,13)" fg:x="107262" fg:w="808"/><text x="95.0253%" y="271.50"></text></g><g><title>sn_rust_dealloc (46 samples, 0.04%)</title><rect x="95.4990%" y="101" width="0.0406%" height="15" fill="rgb(210,182,18)" fg:x="108081" fg:w="46"/><text x="95.7490%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (58 samples, 0.05%)</title><rect x="95.4893%" y="261" width="0.0512%" height="15" fill="rgb(240,105,2)" fg:x="108070" fg:w="58"/><text x="95.7393%" y="271.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (58 samples, 0.05%)</title><rect x="95.4893%" y="245" width="0.0512%" height="15" fill="rgb(207,170,50)" fg:x="108070" fg:w="58"/><text x="95.7393%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (50 samples, 0.04%)</title><rect x="95.4964%" y="229" width="0.0442%" height="15" fill="rgb(232,133,24)" fg:x="108078" fg:w="50"/><text x="95.7464%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (50 samples, 0.04%)</title><rect x="95.4964%" y="213" width="0.0442%" height="15" fill="rgb(235,166,27)" fg:x="108078" fg:w="50"/><text x="95.7464%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (50 samples, 0.04%)</title><rect x="95.4964%" y="197" width="0.0442%" height="15" fill="rgb(209,19,13)" fg:x="108078" fg:w="50"/><text x="95.7464%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (50 samples, 0.04%)</title><rect x="95.4964%" y="181" width="0.0442%" height="15" fill="rgb(226,79,39)" fg:x="108078" fg:w="50"/><text x="95.7464%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (50 samples, 0.04%)</title><rect x="95.4964%" y="165" width="0.0442%" height="15" fill="rgb(222,163,10)" fg:x="108078" fg:w="50"/><text x="95.7464%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (50 samples, 0.04%)</title><rect x="95.4964%" y="149" width="0.0442%" height="15" fill="rgb(214,44,19)" fg:x="108078" fg:w="50"/><text x="95.7464%" y="159.50"></text></g><g><title>__rg_dealloc (50 samples, 0.04%)</title><rect x="95.4964%" y="133" width="0.0442%" height="15" fill="rgb(210,217,13)" fg:x="108078" fg:w="50"/><text x="95.7464%" y="143.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (50 samples, 0.04%)</title><rect x="95.4964%" y="117" width="0.0442%" height="15" fill="rgb(237,61,54)" fg:x="108078" fg:w="50"/><text x="95.7464%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt;&gt; (13 samples, 0.01%)</title><rect x="95.5405%" y="261" width="0.0115%" height="15" fill="rgb(226,184,24)" fg:x="108128" fg:w="13"/><text x="95.7905%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt; (13 samples, 0.01%)</title><rect x="95.5405%" y="245" width="0.0115%" height="15" fill="rgb(223,226,4)" fg:x="108128" fg:w="13"/><text x="95.7905%" y="255.50"></text></g><g><title>sn_rust_dealloc (31 samples, 0.03%)</title><rect x="95.5768%" y="149" width="0.0274%" height="15" fill="rgb(210,26,41)" fg:x="108169" fg:w="31"/><text x="95.8268%" y="159.50"></text></g><g><title>alloc::alloc::box_free (57 samples, 0.05%)</title><rect x="95.5564%" y="229" width="0.0504%" height="15" fill="rgb(220,221,6)" fg:x="108146" fg:w="57"/><text x="95.8064%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (57 samples, 0.05%)</title><rect x="95.5564%" y="213" width="0.0504%" height="15" fill="rgb(225,89,49)" fg:x="108146" fg:w="57"/><text x="95.8064%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (41 samples, 0.04%)</title><rect x="95.5706%" y="197" width="0.0362%" height="15" fill="rgb(218,70,45)" fg:x="108162" fg:w="41"/><text x="95.8206%" y="207.50"></text></g><g><title>__rg_dealloc (41 samples, 0.04%)</title><rect x="95.5706%" y="181" width="0.0362%" height="15" fill="rgb(238,166,21)" fg:x="108162" fg:w="41"/><text x="95.8206%" y="191.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (41 samples, 0.04%)</title><rect x="95.5706%" y="165" width="0.0362%" height="15" fill="rgb(224,141,44)" fg:x="108162" fg:w="41"/><text x="95.8206%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;tremor_runtime::connectors::sink::SinkReply,tremor_runtime::errors::Error&gt;+core::marker::Send&gt;&gt;&gt; (66 samples, 0.06%)</title><rect x="95.5520%" y="261" width="0.0583%" height="15" fill="rgb(230,12,49)" fg:x="108141" fg:w="66"/><text x="95.8020%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;tremor_runtime::connectors::sink::SinkReply,tremor_runtime::errors::Error&gt;+core::marker::Send&gt;&gt; (66 samples, 0.06%)</title><rect x="95.5520%" y="245" width="0.0583%" height="15" fill="rgb(212,174,12)" fg:x="108141" fg:w="66"/><text x="95.8020%" y="255.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (49 samples, 0.04%)</title><rect x="95.6483%" y="245" width="0.0433%" height="15" fill="rgb(246,67,9)" fg:x="108250" fg:w="49"/><text x="95.8983%" y="255.50"></text></g><g><title>core::time::Duration::as_nanos (44 samples, 0.04%)</title><rect x="95.6916%" y="245" width="0.0389%" height="15" fill="rgb(239,35,23)" fg:x="108299" fg:w="44"/><text x="95.9416%" y="255.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (177 samples, 0.16%)</title><rect x="95.7305%" y="229" width="0.1564%" height="15" fill="rgb(211,167,0)" fg:x="108343" fg:w="177"/><text x="95.9805%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (74 samples, 0.07%)</title><rect x="95.9417%" y="197" width="0.0654%" height="15" fill="rgb(225,119,45)" fg:x="108582" fg:w="74"/><text x="96.1917%" y="207.50"></text></g><g><title>core::cmp::PartialOrd::ge (74 samples, 0.07%)</title><rect x="95.9417%" y="181" width="0.0654%" height="15" fill="rgb(210,162,6)" fg:x="108582" fg:w="74"/><text x="96.1917%" y="191.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (73 samples, 0.06%)</title><rect x="95.9426%" y="165" width="0.0645%" height="15" fill="rgb(208,118,35)" fg:x="108583" fg:w="73"/><text x="96.1926%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (40 samples, 0.04%)</title><rect x="95.9717%" y="149" width="0.0353%" height="15" fill="rgb(239,4,53)" fg:x="108616" fg:w="40"/><text x="96.2217%" y="159.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (40 samples, 0.04%)</title><rect x="95.9717%" y="133" width="0.0353%" height="15" fill="rgb(213,130,21)" fg:x="108616" fg:w="40"/><text x="96.2217%" y="143.50"></text></g><g><title>std::time::SystemTime::duration_since (353 samples, 0.31%)</title><rect x="95.7305%" y="245" width="0.3119%" height="15" fill="rgb(235,148,0)" fg:x="108343" fg:w="353"/><text x="95.9805%" y="255.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (176 samples, 0.16%)</title><rect x="95.8869%" y="229" width="0.1555%" height="15" fill="rgb(244,224,18)" fg:x="108520" fg:w="176"/><text x="96.1369%" y="239.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (176 samples, 0.16%)</title><rect x="95.8869%" y="213" width="0.1555%" height="15" fill="rgb(211,214,4)" fg:x="108520" fg:w="176"/><text x="96.1369%" y="223.50"></text></g><g><title>core::time::Duration::new (40 samples, 0.04%)</title><rect x="96.0071%" y="197" width="0.0353%" height="15" fill="rgb(206,119,25)" fg:x="108656" fg:w="40"/><text x="96.2571%" y="207.50"></text></g><g><title>tremor_common::time::nanotime (1,332 samples, 1.18%)</title><rect x="95.6103%" y="261" width="1.1769%" height="15" fill="rgb(243,93,47)" fg:x="108207" fg:w="1332"/><text x="95.8603%" y="271.50"></text></g><g><title>std::time::SystemTime::now (843 samples, 0.74%)</title><rect x="96.0424%" y="245" width="0.7449%" height="15" fill="rgb(224,194,6)" fg:x="108696" fg:w="843"/><text x="96.2924%" y="255.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (843 samples, 0.74%)</title><rect x="96.0424%" y="229" width="0.7449%" height="15" fill="rgb(243,229,6)" fg:x="108696" fg:w="843"/><text x="96.2924%" y="239.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (843 samples, 0.74%)</title><rect x="96.0424%" y="213" width="0.7449%" height="15" fill="rgb(207,23,50)" fg:x="108696" fg:w="843"/><text x="96.2924%" y="223.50"></text></g><g><title>__clock_gettime (678 samples, 0.60%)</title><rect x="96.1882%" y="197" width="0.5991%" height="15" fill="rgb(253,192,32)" fg:x="108861" fg:w="678"/><text x="96.4382%" y="207.50"></text></g><g><title>__vdso_clock_gettime (623 samples, 0.55%)</title><rect x="96.2368%" y="181" width="0.5505%" height="15" fill="rgb(213,21,6)" fg:x="108916" fg:w="623"/><text x="96.4868%" y="191.50"></text></g><g><title>[[vdso]] (563 samples, 0.50%)</title><rect x="96.2898%" y="165" width="0.4975%" height="15" fill="rgb(243,151,13)" fg:x="108976" fg:w="563"/><text x="96.5398%" y="175.50"></text></g><g><title>core::mem::drop (20 samples, 0.02%)</title><rect x="96.8067%" y="197" width="0.0177%" height="15" fill="rgb(233,165,41)" fg:x="109561" fg:w="20"/><text x="97.0567%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,simd_json::value::owned::Value&gt;&gt; (20 samples, 0.02%)</title><rect x="96.8067%" y="181" width="0.0177%" height="15" fill="rgb(246,176,45)" fg:x="109561" fg:w="20"/><text x="97.0567%" y="191.50"></text></g><g><title>tremor_pipeline::OpMeta::merge (45 samples, 0.04%)</title><rect x="96.7873%" y="261" width="0.0398%" height="15" fill="rgb(217,170,52)" fg:x="109539" fg:w="45"/><text x="97.0373%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (30 samples, 0.03%)</title><rect x="96.8005%" y="245" width="0.0265%" height="15" fill="rgb(214,203,54)" fg:x="109554" fg:w="30"/><text x="97.0505%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,simd_json::value::owned::Value&gt;&gt; (30 samples, 0.03%)</title><rect x="96.8005%" y="229" width="0.0265%" height="15" fill="rgb(248,215,49)" fg:x="109554" fg:w="30"/><text x="97.0505%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.03%)</title><rect x="96.8005%" y="213" width="0.0265%" height="15" fill="rgb(208,46,10)" fg:x="109554" fg:w="30"/><text x="97.0505%" y="223.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (3,572 samples, 3.16%)</title><rect x="93.6832%" y="309" width="3.1562%" height="15" fill="rgb(254,5,31)" fg:x="106026" fg:w="3572"/><text x="93.9332%" y="319.50">&lt;as..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,572 samples, 3.16%)</title><rect x="93.6832%" y="293" width="3.1562%" height="15" fill="rgb(222,104,33)" fg:x="106026" fg:w="3572"/><text x="93.9332%" y="303.50">&lt;co..</text></g><g><title>tremor_runtime::connectors::sink::SinkManager&lt;S&gt;::run::{{closure}} (3,561 samples, 3.15%)</title><rect x="93.6930%" y="277" width="3.1465%" height="15" fill="rgb(248,49,16)" fg:x="106037" fg:w="3561"/><text x="93.9430%" y="287.50">tre..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,656 samples, 3.23%)</title><rect x="93.6152%" y="421" width="3.2304%" height="15" fill="rgb(232,198,41)" fg:x="105949" fg:w="3656"/><text x="93.8652%" y="431.50">&lt;co..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (3,649 samples, 3.22%)</title><rect x="93.6214%" y="405" width="3.2242%" height="15" fill="rgb(214,125,3)" fg:x="105956" fg:w="3649"/><text x="93.8714%" y="415.50">asy..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (3,621 samples, 3.20%)</title><rect x="93.6461%" y="389" width="3.1995%" height="15" fill="rgb(229,220,28)" fg:x="105984" fg:w="3621"/><text x="93.8961%" y="399.50">&lt;as..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (3,621 samples, 3.20%)</title><rect x="93.6461%" y="373" width="3.1995%" height="15" fill="rgb(222,64,37)" fg:x="105984" fg:w="3621"/><text x="93.8961%" y="383.50">asy..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3,618 samples, 3.20%)</title><rect x="93.6488%" y="357" width="3.1968%" height="15" fill="rgb(249,184,13)" fg:x="105987" fg:w="3618"/><text x="93.8988%" y="367.50">std..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3,616 samples, 3.20%)</title><rect x="93.6505%" y="341" width="3.1951%" height="15" fill="rgb(252,176,6)" fg:x="105989" fg:w="3616"/><text x="93.9005%" y="351.50">std..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (3,582 samples, 3.17%)</title><rect x="93.6806%" y="325" width="3.1650%" height="15" fill="rgb(228,153,7)" fg:x="106023" fg:w="3582"/><text x="93.9306%" y="335.50">asy..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (3,657 samples, 3.23%)</title><rect x="93.6152%" y="437" width="3.2313%" height="15" fill="rgb(242,193,5)" fg:x="105949" fg:w="3657"/><text x="93.8652%" y="447.50">&lt;co..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_ref (24 samples, 0.02%)</title><rect x="96.8465%" y="437" width="0.0212%" height="15" fill="rgb(232,140,9)" fg:x="109606" fg:w="24"/><text x="97.0965%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (22 samples, 0.02%)</title><rect x="96.8482%" y="421" width="0.0194%" height="15" fill="rgb(213,222,16)" fg:x="109608" fg:w="22"/><text x="97.0982%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_sub (22 samples, 0.02%)</title><rect x="96.8482%" y="405" width="0.0194%" height="15" fill="rgb(222,75,50)" fg:x="109608" fg:w="22"/><text x="97.0982%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (171 samples, 0.15%)</title><rect x="96.8730%" y="437" width="0.1511%" height="15" fill="rgb(205,180,2)" fg:x="109636" fg:w="171"/><text x="97.1230%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (171 samples, 0.15%)</title><rect x="96.8730%" y="421" width="0.1511%" height="15" fill="rgb(216,34,7)" fg:x="109636" fg:w="171"/><text x="97.1230%" y="431.50"></text></g><g><title>async_task::runnable::Runnable::run (3,950 samples, 3.49%)</title><rect x="93.5374%" y="469" width="3.4902%" height="15" fill="rgb(253,16,32)" fg:x="105861" fg:w="3950"/><text x="93.7874%" y="479.50">asy..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (3,907 samples, 3.45%)</title><rect x="93.5754%" y="453" width="3.4522%" height="15" fill="rgb(208,97,28)" fg:x="105904" fg:w="3907"/><text x="93.8254%" y="463.50">asy..</text></g><g><title>async_executor::Executor::run::{{closure}} (9,892 samples, 8.74%)</title><rect x="88.2969%" y="533" width="8.7404%" height="15" fill="rgb(225,92,11)" fg:x="99930" fg:w="9892"/><text x="88.5469%" y="543.50">async_execut..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (9,861 samples, 8.71%)</title><rect x="88.3243%" y="517" width="8.7131%" height="15" fill="rgb(243,38,12)" fg:x="99961" fg:w="9861"/><text x="88.5743%" y="527.50">&lt;futures_lit..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,861 samples, 8.71%)</title><rect x="88.3243%" y="501" width="8.7131%" height="15" fill="rgb(208,139,16)" fg:x="99961" fg:w="9861"/><text x="88.5743%" y="511.50">&lt;core::futur..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (9,861 samples, 8.71%)</title><rect x="88.3243%" y="485" width="8.7131%" height="15" fill="rgb(227,24,9)" fg:x="99961" fg:w="9861"/><text x="88.5743%" y="495.50">async_execut..</text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (41 samples, 0.04%)</title><rect x="97.0992%" y="277" width="0.0362%" height="15" fill="rgb(206,62,11)" fg:x="109892" fg:w="41"/><text x="97.3492%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (41 samples, 0.04%)</title><rect x="97.0992%" y="261" width="0.0362%" height="15" fill="rgb(228,134,27)" fg:x="109892" fg:w="41"/><text x="97.3492%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (41 samples, 0.04%)</title><rect x="97.0992%" y="245" width="0.0362%" height="15" fill="rgb(205,55,33)" fg:x="109892" fg:w="41"/><text x="97.3492%" y="255.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (37 samples, 0.03%)</title><rect x="97.1027%" y="229" width="0.0327%" height="15" fill="rgb(243,75,43)" fg:x="109896" fg:w="37"/><text x="97.3527%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (37 samples, 0.03%)</title><rect x="97.1027%" y="213" width="0.0327%" height="15" fill="rgb(223,27,42)" fg:x="109896" fg:w="37"/><text x="97.3527%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (36 samples, 0.03%)</title><rect x="97.1036%" y="197" width="0.0318%" height="15" fill="rgb(232,189,33)" fg:x="109897" fg:w="36"/><text x="97.3536%" y="207.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (36 samples, 0.03%)</title><rect x="97.1036%" y="181" width="0.0318%" height="15" fill="rgb(210,9,39)" fg:x="109897" fg:w="36"/><text x="97.3536%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (42 samples, 0.04%)</title><rect x="97.0992%" y="325" width="0.0371%" height="15" fill="rgb(242,85,26)" fg:x="109892" fg:w="42"/><text x="97.3492%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (42 samples, 0.04%)</title><rect x="97.0992%" y="309" width="0.0371%" height="15" fill="rgb(248,44,4)" fg:x="109892" fg:w="42"/><text x="97.3492%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (42 samples, 0.04%)</title><rect x="97.0992%" y="293" width="0.0371%" height="15" fill="rgb(250,96,46)" fg:x="109892" fg:w="42"/><text x="97.3492%" y="303.50"></text></g><g><title>concurrent_queue::full_fence (30 samples, 0.03%)</title><rect x="97.1822%" y="293" width="0.0265%" height="15" fill="rgb(229,116,26)" fg:x="109986" fg:w="30"/><text x="97.4322%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (30 samples, 0.03%)</title><rect x="97.1822%" y="277" width="0.0265%" height="15" fill="rgb(246,94,34)" fg:x="109986" fg:w="30"/><text x="97.4322%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (30 samples, 0.03%)</title><rect x="97.1822%" y="261" width="0.0265%" height="15" fill="rgb(251,73,21)" fg:x="109986" fg:w="30"/><text x="97.4322%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (30 samples, 0.03%)</title><rect x="97.1822%" y="245" width="0.0265%" height="15" fill="rgb(254,121,25)" fg:x="109986" fg:w="30"/><text x="97.4322%" y="255.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (100 samples, 0.09%)</title><rect x="97.1610%" y="309" width="0.0884%" height="15" fill="rgb(215,161,49)" fg:x="109962" fg:w="100"/><text x="97.4110%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (46 samples, 0.04%)</title><rect x="97.2087%" y="293" width="0.0406%" height="15" fill="rgb(221,43,13)" fg:x="110016" fg:w="46"/><text x="97.4587%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_load (46 samples, 0.04%)</title><rect x="97.2087%" y="277" width="0.0406%" height="15" fill="rgb(249,5,37)" fg:x="110016" fg:w="46"/><text x="97.4587%" y="287.50"></text></g><g><title>concurrent_queue::full_fence (23 samples, 0.02%)</title><rect x="97.2556%" y="293" width="0.0203%" height="15" fill="rgb(226,25,44)" fg:x="110069" fg:w="23"/><text x="97.5056%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (23 samples, 0.02%)</title><rect x="97.2556%" y="277" width="0.0203%" height="15" fill="rgb(238,189,16)" fg:x="110069" fg:w="23"/><text x="97.5056%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (23 samples, 0.02%)</title><rect x="97.2556%" y="261" width="0.0203%" height="15" fill="rgb(251,186,8)" fg:x="110069" fg:w="23"/><text x="97.5056%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (23 samples, 0.02%)</title><rect x="97.2556%" y="245" width="0.0203%" height="15" fill="rgb(254,34,31)" fg:x="110069" fg:w="23"/><text x="97.5056%" y="255.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (187 samples, 0.17%)</title><rect x="97.1363%" y="325" width="0.1652%" height="15" fill="rgb(225,215,27)" fg:x="109934" fg:w="187"/><text x="97.3863%" y="335.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (59 samples, 0.05%)</title><rect x="97.2494%" y="309" width="0.0521%" height="15" fill="rgb(221,192,48)" fg:x="110062" fg:w="59"/><text x="97.4994%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (26 samples, 0.02%)</title><rect x="97.2786%" y="293" width="0.0230%" height="15" fill="rgb(219,137,20)" fg:x="110095" fg:w="26"/><text x="97.5286%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_load (26 samples, 0.02%)</title><rect x="97.2786%" y="277" width="0.0230%" height="15" fill="rgb(219,84,11)" fg:x="110095" fg:w="26"/><text x="97.5286%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (60 samples, 0.05%)</title><rect x="97.3015%" y="325" width="0.0530%" height="15" fill="rgb(224,10,23)" fg:x="110121" fg:w="60"/><text x="97.5515%" y="335.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (60 samples, 0.05%)</title><rect x="97.3015%" y="309" width="0.0530%" height="15" fill="rgb(248,22,39)" fg:x="110121" fg:w="60"/><text x="97.5515%" y="319.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read_unlock (35 samples, 0.03%)</title><rect x="97.3236%" y="293" width="0.0309%" height="15" fill="rgb(212,154,20)" fg:x="110146" fg:w="35"/><text x="97.5736%" y="303.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_unlock (35 samples, 0.03%)</title><rect x="97.3236%" y="277" width="0.0309%" height="15" fill="rgb(236,199,50)" fg:x="110146" fg:w="35"/><text x="97.5736%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (32 samples, 0.03%)</title><rect x="97.3263%" y="261" width="0.0283%" height="15" fill="rgb(211,9,17)" fg:x="110149" fg:w="32"/><text x="97.5763%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_sub (32 samples, 0.03%)</title><rect x="97.3263%" y="245" width="0.0283%" height="15" fill="rgb(243,216,36)" fg:x="110149" fg:w="32"/><text x="97.5763%" y="255.50"></text></g><g><title>fastrand::usize (24 samples, 0.02%)</title><rect x="97.3545%" y="325" width="0.0212%" height="15" fill="rgb(250,2,10)" fg:x="110181" fg:w="24"/><text x="97.6045%" y="335.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (24 samples, 0.02%)</title><rect x="97.3545%" y="309" width="0.0212%" height="15" fill="rgb(226,50,48)" fg:x="110181" fg:w="24"/><text x="97.6045%" y="319.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (22 samples, 0.02%)</title><rect x="97.3563%" y="293" width="0.0194%" height="15" fill="rgb(243,81,16)" fg:x="110183" fg:w="22"/><text x="97.6063%" y="303.50"></text></g><g><title>fastrand::usize::{{closure}} (12 samples, 0.01%)</title><rect x="97.3651%" y="277" width="0.0106%" height="15" fill="rgb(250,14,2)" fg:x="110193" fg:w="12"/><text x="97.6151%" y="287.50"></text></g><g><title>fastrand::Rng::usize (12 samples, 0.01%)</title><rect x="97.3651%" y="261" width="0.0106%" height="15" fill="rgb(233,135,29)" fg:x="110193" fg:w="12"/><text x="97.6151%" y="271.50"></text></g><g><title>fastrand::Rng::gen_mod_u64 (12 samples, 0.01%)</title><rect x="97.3651%" y="245" width="0.0106%" height="15" fill="rgb(224,64,43)" fg:x="110193" fg:w="12"/><text x="97.6151%" y="255.50"></text></g><g><title>std::sync::rwlock::RwLockReadGuard&lt;T&gt;::new (13 samples, 0.01%)</title><rect x="97.3757%" y="309" width="0.0115%" height="15" fill="rgb(238,84,13)" fg:x="110205" fg:w="13"/><text x="97.6257%" y="319.50"></text></g><g><title>std::sync::poison::Flag::borrow (13 samples, 0.01%)</title><rect x="97.3757%" y="293" width="0.0115%" height="15" fill="rgb(253,48,26)" fg:x="110205" fg:w="13"/><text x="97.6257%" y="303.50"></text></g><g><title>std::thread::panicking (13 samples, 0.01%)</title><rect x="97.3757%" y="277" width="0.0115%" height="15" fill="rgb(205,223,31)" fg:x="110205" fg:w="13"/><text x="97.6257%" y="287.50"></text></g><g><title>std::panicking::panicking (13 samples, 0.01%)</title><rect x="97.3757%" y="261" width="0.0115%" height="15" fill="rgb(221,41,32)" fg:x="110205" fg:w="13"/><text x="97.6257%" y="271.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (13 samples, 0.01%)</title><rect x="97.3757%" y="245" width="0.0115%" height="15" fill="rgb(213,158,31)" fg:x="110205" fg:w="13"/><text x="97.6257%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (25 samples, 0.02%)</title><rect x="97.3881%" y="277" width="0.0221%" height="15" fill="rgb(245,126,43)" fg:x="110219" fg:w="25"/><text x="97.6381%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (25 samples, 0.02%)</title><rect x="97.3881%" y="261" width="0.0221%" height="15" fill="rgb(227,7,22)" fg:x="110219" fg:w="25"/><text x="97.6381%" y="271.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (362 samples, 0.32%)</title><rect x="97.0921%" y="341" width="0.3199%" height="15" fill="rgb(252,90,44)" fg:x="109884" fg:w="362"/><text x="97.3421%" y="351.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (41 samples, 0.04%)</title><rect x="97.3757%" y="325" width="0.0362%" height="15" fill="rgb(253,91,0)" fg:x="110205" fg:w="41"/><text x="97.6257%" y="335.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read (28 samples, 0.02%)</title><rect x="97.3872%" y="309" width="0.0247%" height="15" fill="rgb(252,175,49)" fg:x="110218" fg:w="28"/><text x="97.6372%" y="319.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (28 samples, 0.02%)</title><rect x="97.3872%" y="293" width="0.0247%" height="15" fill="rgb(246,150,1)" fg:x="110218" fg:w="28"/><text x="97.6372%" y="303.50"></text></g><g><title>async_executor::Sleepers::update (49 samples, 0.04%)</title><rect x="97.4217%" y="325" width="0.0433%" height="15" fill="rgb(241,192,25)" fg:x="110257" fg:w="49"/><text x="97.6717%" y="335.50"></text></g><g><title>core::task::wake::Waker::will_wake (16 samples, 0.01%)</title><rect x="97.4509%" y="309" width="0.0141%" height="15" fill="rgb(239,187,11)" fg:x="110290" fg:w="16"/><text x="97.7009%" y="319.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (16 samples, 0.01%)</title><rect x="97.4509%" y="293" width="0.0141%" height="15" fill="rgb(218,202,51)" fg:x="110290" fg:w="16"/><text x="97.7009%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (14 samples, 0.01%)</title><rect x="97.4526%" y="277" width="0.0124%" height="15" fill="rgb(225,176,8)" fg:x="110292" fg:w="14"/><text x="97.7026%" y="287.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (14 samples, 0.01%)</title><rect x="97.4526%" y="261" width="0.0124%" height="15" fill="rgb(219,122,41)" fg:x="110292" fg:w="14"/><text x="97.7026%" y="271.50"></text></g><g><title>std::sync::poison::Flag::done (32 samples, 0.03%)</title><rect x="97.4650%" y="293" width="0.0283%" height="15" fill="rgb(248,140,20)" fg:x="110306" fg:w="32"/><text x="97.7150%" y="303.50"></text></g><g><title>std::thread::panicking (21 samples, 0.02%)</title><rect x="97.4747%" y="277" width="0.0186%" height="15" fill="rgb(245,41,37)" fg:x="110317" fg:w="21"/><text x="97.7247%" y="287.50"></text></g><g><title>std::panicking::panicking (21 samples, 0.02%)</title><rect x="97.4747%" y="261" width="0.0186%" height="15" fill="rgb(235,82,39)" fg:x="110317" fg:w="21"/><text x="97.7247%" y="271.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (21 samples, 0.02%)</title><rect x="97.4747%" y="245" width="0.0186%" height="15" fill="rgb(230,108,42)" fg:x="110317" fg:w="21"/><text x="97.7247%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (56 samples, 0.05%)</title><rect x="97.4650%" y="325" width="0.0495%" height="15" fill="rgb(215,150,50)" fg:x="110306" fg:w="56"/><text x="97.7150%" y="335.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (56 samples, 0.05%)</title><rect x="97.4650%" y="309" width="0.0495%" height="15" fill="rgb(233,212,5)" fg:x="110306" fg:w="56"/><text x="97.7150%" y="319.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (24 samples, 0.02%)</title><rect x="97.4933%" y="293" width="0.0212%" height="15" fill="rgb(245,80,22)" fg:x="110338" fg:w="24"/><text x="97.7433%" y="303.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (24 samples, 0.02%)</title><rect x="97.4933%" y="277" width="0.0212%" height="15" fill="rgb(238,129,16)" fg:x="110338" fg:w="24"/><text x="97.7433%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (24 samples, 0.02%)</title><rect x="97.4933%" y="261" width="0.0212%" height="15" fill="rgb(240,19,0)" fg:x="110338" fg:w="24"/><text x="97.7433%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_swap (24 samples, 0.02%)</title><rect x="97.4933%" y="245" width="0.0212%" height="15" fill="rgb(232,42,35)" fg:x="110338" fg:w="24"/><text x="97.7433%" y="255.50"></text></g><g><title>async_executor::Ticker::sleep (151 samples, 0.13%)</title><rect x="97.4120%" y="341" width="0.1334%" height="15" fill="rgb(223,130,24)" fg:x="110246" fg:w="151"/><text x="97.6620%" y="351.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (35 samples, 0.03%)</title><rect x="97.5145%" y="325" width="0.0309%" height="15" fill="rgb(237,16,22)" fg:x="110362" fg:w="35"/><text x="97.7645%" y="335.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (30 samples, 0.03%)</title><rect x="97.5189%" y="309" width="0.0265%" height="15" fill="rgb(248,192,20)" fg:x="110367" fg:w="30"/><text x="97.7689%" y="319.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (30 samples, 0.03%)</title><rect x="97.5189%" y="293" width="0.0265%" height="15" fill="rgb(233,167,2)" fg:x="110367" fg:w="30"/><text x="97.7689%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (30 samples, 0.03%)</title><rect x="97.5189%" y="277" width="0.0265%" height="15" fill="rgb(252,71,44)" fg:x="110367" fg:w="30"/><text x="97.7689%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (30 samples, 0.03%)</title><rect x="97.5189%" y="261" width="0.0265%" height="15" fill="rgb(238,37,47)" fg:x="110367" fg:w="30"/><text x="97.7689%" y="271.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (544 samples, 0.48%)</title><rect x="97.0665%" y="453" width="0.4807%" height="15" fill="rgb(214,202,54)" fg:x="109855" fg:w="544"/><text x="97.3165%" y="463.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (531 samples, 0.47%)</title><rect x="97.0780%" y="437" width="0.4692%" height="15" fill="rgb(254,165,40)" fg:x="109868" fg:w="531"/><text x="97.3280%" y="447.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}} (531 samples, 0.47%)</title><rect x="97.0780%" y="421" width="0.4692%" height="15" fill="rgb(246,173,38)" fg:x="109868" fg:w="531"/><text x="97.3280%" y="431.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (526 samples, 0.46%)</title><rect x="97.0824%" y="405" width="0.4648%" height="15" fill="rgb(215,3,27)" fg:x="109873" fg:w="526"/><text x="97.3324%" y="415.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (526 samples, 0.46%)</title><rect x="97.0824%" y="389" width="0.4648%" height="15" fill="rgb(239,169,51)" fg:x="109873" fg:w="526"/><text x="97.3324%" y="399.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (516 samples, 0.46%)</title><rect x="97.0912%" y="373" width="0.4559%" height="15" fill="rgb(212,5,25)" fg:x="109883" fg:w="516"/><text x="97.3412%" y="383.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (516 samples, 0.46%)</title><rect x="97.0912%" y="357" width="0.4559%" height="15" fill="rgb(243,45,17)" fg:x="109883" fg:w="516"/><text x="97.3412%" y="367.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (20 samples, 0.02%)</title><rect x="97.5896%" y="389" width="0.0177%" height="15" fill="rgb(242,97,9)" fg:x="110447" fg:w="20"/><text x="97.8396%" y="399.50"></text></g><g><title>core::mem::replace (20 samples, 0.02%)</title><rect x="97.5896%" y="373" width="0.0177%" height="15" fill="rgb(228,71,31)" fg:x="110447" fg:w="20"/><text x="97.8396%" y="383.50"></text></g><g><title>core::ptr::read (20 samples, 0.02%)</title><rect x="97.5896%" y="357" width="0.0177%" height="15" fill="rgb(252,184,16)" fg:x="110447" fg:w="20"/><text x="97.8396%" y="367.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (35 samples, 0.03%)</title><rect x="97.5807%" y="405" width="0.0309%" height="15" fill="rgb(236,169,46)" fg:x="110437" fg:w="35"/><text x="97.8307%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (34 samples, 0.03%)</title><rect x="97.6117%" y="405" width="0.0300%" height="15" fill="rgb(207,17,47)" fg:x="110472" fg:w="34"/><text x="97.8617%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (30 samples, 0.03%)</title><rect x="97.6152%" y="389" width="0.0265%" height="15" fill="rgb(206,201,28)" fg:x="110476" fg:w="30"/><text x="97.8652%" y="399.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.03%)</title><rect x="97.6152%" y="373" width="0.0265%" height="15" fill="rgb(224,184,23)" fg:x="110476" fg:w="30"/><text x="97.8652%" y="383.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (28 samples, 0.02%)</title><rect x="97.6170%" y="357" width="0.0247%" height="15" fill="rgb(208,139,48)" fg:x="110478" fg:w="28"/><text x="97.8670%" y="367.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (28 samples, 0.02%)</title><rect x="97.6170%" y="341" width="0.0247%" height="15" fill="rgb(208,130,10)" fg:x="110478" fg:w="28"/><text x="97.8670%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (28 samples, 0.02%)</title><rect x="97.6170%" y="325" width="0.0247%" height="15" fill="rgb(211,213,45)" fg:x="110478" fg:w="28"/><text x="97.8670%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_swap (28 samples, 0.02%)</title><rect x="97.6170%" y="309" width="0.0247%" height="15" fill="rgb(235,100,30)" fg:x="110478" fg:w="28"/><text x="97.8670%" y="319.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (129 samples, 0.11%)</title><rect x="97.5710%" y="421" width="0.1140%" height="15" fill="rgb(206,144,31)" fg:x="110426" fg:w="129"/><text x="97.8210%" y="431.50"></text></g><g><title>event_listener::Inner::lock (38 samples, 0.03%)</title><rect x="97.6514%" y="405" width="0.0336%" height="15" fill="rgb(224,200,26)" fg:x="110517" fg:w="38"/><text x="97.9014%" y="415.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (37 samples, 0.03%)</title><rect x="97.6523%" y="389" width="0.0327%" height="15" fill="rgb(247,104,53)" fg:x="110518" fg:w="37"/><text x="97.9023%" y="399.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (31 samples, 0.03%)</title><rect x="97.6576%" y="373" width="0.0274%" height="15" fill="rgb(220,14,17)" fg:x="110524" fg:w="31"/><text x="97.9076%" y="383.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (31 samples, 0.03%)</title><rect x="97.6576%" y="357" width="0.0274%" height="15" fill="rgb(230,140,40)" fg:x="110524" fg:w="31"/><text x="97.9076%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (31 samples, 0.03%)</title><rect x="97.6576%" y="341" width="0.0274%" height="15" fill="rgb(229,2,41)" fg:x="110524" fg:w="31"/><text x="97.9076%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (31 samples, 0.03%)</title><rect x="97.6576%" y="325" width="0.0274%" height="15" fill="rgb(232,89,16)" fg:x="110524" fg:w="31"/><text x="97.9076%" y="335.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (57 samples, 0.05%)</title><rect x="97.6850%" y="421" width="0.0504%" height="15" fill="rgb(247,59,52)" fg:x="110555" fg:w="57"/><text x="97.9350%" y="431.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (57 samples, 0.05%)</title><rect x="97.6850%" y="405" width="0.0504%" height="15" fill="rgb(226,110,21)" fg:x="110555" fg:w="57"/><text x="97.9350%" y="415.50"></text></g><g><title>concurrent_queue::single::Single&lt;T&gt;::pop (40 samples, 0.04%)</title><rect x="97.7000%" y="389" width="0.0353%" height="15" fill="rgb(224,176,43)" fg:x="110572" fg:w="40"/><text x="97.9500%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (38 samples, 0.03%)</title><rect x="97.7018%" y="373" width="0.0336%" height="15" fill="rgb(221,73,6)" fg:x="110574" fg:w="38"/><text x="97.9518%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (38 samples, 0.03%)</title><rect x="97.7018%" y="357" width="0.0336%" height="15" fill="rgb(232,78,19)" fg:x="110574" fg:w="38"/><text x="97.9518%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (38 samples, 0.03%)</title><rect x="97.7018%" y="341" width="0.0336%" height="15" fill="rgb(233,112,48)" fg:x="110574" fg:w="38"/><text x="97.9518%" y="351.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (764 samples, 0.68%)</title><rect x="97.0621%" y="485" width="0.6751%" height="15" fill="rgb(243,131,47)" fg:x="109850" fg:w="764"/><text x="97.3121%" y="495.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (761 samples, 0.67%)</title><rect x="97.0647%" y="469" width="0.6724%" height="15" fill="rgb(226,51,1)" fg:x="109853" fg:w="761"/><text x="97.3147%" y="479.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}} (215 samples, 0.19%)</title><rect x="97.5472%" y="453" width="0.1900%" height="15" fill="rgb(247,58,7)" fg:x="110399" fg:w="215"/><text x="97.7972%" y="463.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (206 samples, 0.18%)</title><rect x="97.5551%" y="437" width="0.1820%" height="15" fill="rgb(209,7,32)" fg:x="110408" fg:w="206"/><text x="97.8051%" y="447.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (10,727 samples, 9.48%)</title><rect x="88.2660%" y="565" width="9.4782%" height="15" fill="rgb(209,39,41)" fg:x="99895" fg:w="10727"/><text x="88.5160%" y="575.50">&lt;futures_lite:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,695 samples, 9.45%)</title><rect x="88.2942%" y="549" width="9.4500%" height="15" fill="rgb(226,182,46)" fg:x="99927" fg:w="10695"/><text x="88.5442%" y="559.50">&lt;core::future:..</text></g><g><title>async_executor::LocalExecutor::run::{{closure}} (800 samples, 0.71%)</title><rect x="97.0373%" y="533" width="0.7069%" height="15" fill="rgb(230,219,10)" fg:x="109822" fg:w="800"/><text x="97.2873%" y="543.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (776 samples, 0.69%)</title><rect x="97.0585%" y="517" width="0.6857%" height="15" fill="rgb(227,175,30)" fg:x="109846" fg:w="776"/><text x="97.3085%" y="527.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (776 samples, 0.69%)</title><rect x="97.0585%" y="501" width="0.6857%" height="15" fill="rgb(217,2,50)" fg:x="109846" fg:w="776"/><text x="97.3085%" y="511.50"></text></g><g><title>async_io::reactor::Reactor::get (13 samples, 0.01%)</title><rect x="97.7495%" y="565" width="0.0115%" height="15" fill="rgb(229,160,0)" fg:x="110628" fg:w="13"/><text x="97.9995%" y="575.50"></text></g><g><title>&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (13 samples, 0.01%)</title><rect x="97.7495%" y="549" width="0.0115%" height="15" fill="rgb(207,78,37)" fg:x="110628" fg:w="13"/><text x="97.9995%" y="559.50"></text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (13 samples, 0.01%)</title><rect x="97.7495%" y="533" width="0.0115%" height="15" fill="rgb(225,57,0)" fg:x="110628" fg:w="13"/><text x="97.9995%" y="543.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (13 samples, 0.01%)</title><rect x="97.7495%" y="517" width="0.0115%" height="15" fill="rgb(232,154,2)" fg:x="110628" fg:w="13"/><text x="97.9995%" y="527.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (13 samples, 0.01%)</title><rect x="97.7495%" y="501" width="0.0115%" height="15" fill="rgb(241,212,25)" fg:x="110628" fg:w="13"/><text x="97.9995%" y="511.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (12 samples, 0.01%)</title><rect x="97.7610%" y="533" width="0.0106%" height="15" fill="rgb(226,69,20)" fg:x="110641" fg:w="12"/><text x="98.0110%" y="543.50"></text></g><g><title>std::sync::poison::Flag::borrow (12 samples, 0.01%)</title><rect x="97.7610%" y="517" width="0.0106%" height="15" fill="rgb(247,184,54)" fg:x="110641" fg:w="12"/><text x="98.0110%" y="527.50"></text></g><g><title>async_io::reactor::Reactor::try_lock (51 samples, 0.05%)</title><rect x="97.7610%" y="565" width="0.0451%" height="15" fill="rgb(210,145,0)" fg:x="110641" fg:w="51"/><text x="98.0110%" y="575.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (51 samples, 0.05%)</title><rect x="97.7610%" y="549" width="0.0451%" height="15" fill="rgb(253,82,12)" fg:x="110641" fg:w="51"/><text x="98.0110%" y="559.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (39 samples, 0.03%)</title><rect x="97.7716%" y="533" width="0.0345%" height="15" fill="rgb(245,42,11)" fg:x="110653" fg:w="39"/><text x="98.0216%" y="543.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::try_lock (39 samples, 0.03%)</title><rect x="97.7716%" y="517" width="0.0345%" height="15" fill="rgb(219,147,32)" fg:x="110653" fg:w="39"/><text x="98.0216%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (39 samples, 0.03%)</title><rect x="97.7716%" y="501" width="0.0345%" height="15" fill="rgb(246,12,7)" fg:x="110653" fg:w="39"/><text x="98.0216%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (39 samples, 0.03%)</title><rect x="97.7716%" y="485" width="0.0345%" height="15" fill="rgb(243,50,9)" fg:x="110653" fg:w="39"/><text x="98.0216%" y="495.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::ne (17 samples, 0.02%)</title><rect x="97.8370%" y="549" width="0.0150%" height="15" fill="rgb(219,149,6)" fg:x="110727" fg:w="17"/><text x="98.0870%" y="559.50"></text></g><g><title>sn_rust_dealloc (51 samples, 0.05%)</title><rect x="97.8617%" y="389" width="0.0451%" height="15" fill="rgb(241,51,42)" fg:x="110755" fg:w="51"/><text x="98.1117%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (60 samples, 0.05%)</title><rect x="97.8608%" y="453" width="0.0530%" height="15" fill="rgb(226,128,27)" fg:x="110754" fg:w="60"/><text x="98.1108%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (59 samples, 0.05%)</title><rect x="97.8617%" y="437" width="0.0521%" height="15" fill="rgb(244,144,4)" fg:x="110755" fg:w="59"/><text x="98.1117%" y="447.50"></text></g><g><title>__rg_dealloc (59 samples, 0.05%)</title><rect x="97.8617%" y="421" width="0.0521%" height="15" fill="rgb(221,4,13)" fg:x="110755" fg:w="59"/><text x="98.1117%" y="431.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (59 samples, 0.05%)</title><rect x="97.8617%" y="405" width="0.0521%" height="15" fill="rgb(208,170,28)" fg:x="110755" fg:w="59"/><text x="98.1117%" y="415.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (61 samples, 0.05%)</title><rect x="97.8608%" y="485" width="0.0539%" height="15" fill="rgb(226,131,13)" fg:x="110754" fg:w="61"/><text x="98.1108%" y="495.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (61 samples, 0.05%)</title><rect x="97.8608%" y="469" width="0.0539%" height="15" fill="rgb(215,72,41)" fg:x="110754" fg:w="61"/><text x="98.1108%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (67 samples, 0.06%)</title><rect x="97.8582%" y="533" width="0.0592%" height="15" fill="rgb(243,108,20)" fg:x="110751" fg:w="67"/><text x="98.1082%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V&gt;::dying_next (66 samples, 0.06%)</title><rect x="97.8591%" y="517" width="0.0583%" height="15" fill="rgb(230,189,17)" fg:x="110752" fg:w="66"/><text x="98.1091%" y="527.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (64 samples, 0.06%)</title><rect x="97.8608%" y="501" width="0.0565%" height="15" fill="rgb(220,50,17)" fg:x="110754" fg:w="64"/><text x="98.1108%" y="511.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::{{closure}} (12 samples, 0.01%)</title><rect x="97.9192%" y="453" width="0.0106%" height="15" fill="rgb(248,152,48)" fg:x="110820" fg:w="12"/><text x="98.1692%" y="463.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (13 samples, 0.01%)</title><rect x="97.9192%" y="485" width="0.0115%" height="15" fill="rgb(244,91,11)" fg:x="110820" fg:w="13"/><text x="98.1692%" y="495.50"></text></g><g><title>alloc::collections::btree::mem::replace (13 samples, 0.01%)</title><rect x="97.9192%" y="469" width="0.0115%" height="15" fill="rgb(220,157,5)" fg:x="110820" fg:w="13"/><text x="98.1692%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.02%)</title><rect x="97.9174%" y="533" width="0.0168%" height="15" fill="rgb(253,137,8)" fg:x="110818" fg:w="19"/><text x="98.1674%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.02%)</title><rect x="97.9174%" y="517" width="0.0168%" height="15" fill="rgb(217,137,51)" fg:x="110818" fg:w="19"/><text x="98.1674%" y="527.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Immut,K,V&gt;::next_unchecked (17 samples, 0.02%)</title><rect x="97.9192%" y="501" width="0.0150%" height="15" fill="rgb(218,209,53)" fg:x="110820" fg:w="17"/><text x="98.1692%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::Edge&gt;::move_suffix (28 samples, 0.02%)</title><rect x="97.9571%" y="501" width="0.0247%" height="15" fill="rgb(249,137,25)" fg:x="110863" fg:w="28"/><text x="98.2071%" y="511.50"></text></g><g><title>alloc::collections::btree::node::move_to_slice (21 samples, 0.02%)</title><rect x="97.9633%" y="485" width="0.0186%" height="15" fill="rgb(239,155,26)" fg:x="110870" fg:w="21"/><text x="98.2133%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (21 samples, 0.02%)</title><rect x="97.9633%" y="469" width="0.0186%" height="15" fill="rgb(227,85,46)" fg:x="110870" fg:w="21"/><text x="98.2133%" y="479.50"></text></g><g><title>[libc-2.31.so] (20 samples, 0.02%)</title><rect x="97.9642%" y="453" width="0.0177%" height="15" fill="rgb(251,107,43)" fg:x="110871" fg:w="20"/><text x="98.2142%" y="463.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (20 samples, 0.02%)</title><rect x="97.9890%" y="469" width="0.0177%" height="15" fill="rgb(234,170,33)" fg:x="110899" fg:w="20"/><text x="98.2390%" y="479.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (31 samples, 0.03%)</title><rect x="97.9845%" y="501" width="0.0274%" height="15" fill="rgb(206,29,35)" fg:x="110894" fg:w="31"/><text x="98.2345%" y="511.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (31 samples, 0.03%)</title><rect x="97.9845%" y="485" width="0.0274%" height="15" fill="rgb(227,138,25)" fg:x="110894" fg:w="31"/><text x="98.2345%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (15 samples, 0.01%)</title><rect x="98.0579%" y="293" width="0.0133%" height="15" fill="rgb(249,131,35)" fg:x="110977" fg:w="15"/><text x="98.3079%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::split_off (151 samples, 0.13%)</title><rect x="97.9395%" y="533" width="0.1334%" height="15" fill="rgb(239,6,40)" fg:x="110843" fg:w="151"/><text x="98.1895%" y="543.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::split_off (141 samples, 0.12%)</title><rect x="97.9483%" y="517" width="0.1246%" height="15" fill="rgb(246,136,47)" fg:x="110853" fg:w="141"/><text x="98.1983%" y="527.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::new_pillar (69 samples, 0.06%)</title><rect x="98.0119%" y="501" width="0.0610%" height="15" fill="rgb(253,58,26)" fg:x="110925" fg:w="69"/><text x="98.2619%" y="511.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (69 samples, 0.06%)</title><rect x="98.0119%" y="485" width="0.0610%" height="15" fill="rgb(237,141,10)" fg:x="110925" fg:w="69"/><text x="98.2619%" y="495.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (69 samples, 0.06%)</title><rect x="98.0119%" y="469" width="0.0610%" height="15" fill="rgb(234,156,12)" fg:x="110925" fg:w="69"/><text x="98.2619%" y="479.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (69 samples, 0.06%)</title><rect x="98.0119%" y="453" width="0.0610%" height="15" fill="rgb(243,224,36)" fg:x="110925" fg:w="69"/><text x="98.2619%" y="463.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new_uninit (69 samples, 0.06%)</title><rect x="98.0119%" y="437" width="0.0610%" height="15" fill="rgb(205,229,51)" fg:x="110925" fg:w="69"/><text x="98.2619%" y="447.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (69 samples, 0.06%)</title><rect x="98.0119%" y="421" width="0.0610%" height="15" fill="rgb(223,189,4)" fg:x="110925" fg:w="69"/><text x="98.2619%" y="431.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (69 samples, 0.06%)</title><rect x="98.0119%" y="405" width="0.0610%" height="15" fill="rgb(249,167,54)" fg:x="110925" fg:w="69"/><text x="98.2619%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (69 samples, 0.06%)</title><rect x="98.0119%" y="389" width="0.0610%" height="15" fill="rgb(218,34,28)" fg:x="110925" fg:w="69"/><text x="98.2619%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (69 samples, 0.06%)</title><rect x="98.0119%" y="373" width="0.0610%" height="15" fill="rgb(232,109,42)" fg:x="110925" fg:w="69"/><text x="98.2619%" y="383.50"></text></g><g><title>alloc::alloc::alloc (68 samples, 0.06%)</title><rect x="98.0128%" y="357" width="0.0601%" height="15" fill="rgb(248,214,46)" fg:x="110926" fg:w="68"/><text x="98.2628%" y="367.50"></text></g><g><title>__rg_alloc (68 samples, 0.06%)</title><rect x="98.0128%" y="341" width="0.0601%" height="15" fill="rgb(244,216,40)" fg:x="110926" fg:w="68"/><text x="98.2628%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (68 samples, 0.06%)</title><rect x="98.0128%" y="325" width="0.0601%" height="15" fill="rgb(231,226,31)" fg:x="110926" fg:w="68"/><text x="98.2628%" y="335.50"></text></g><g><title>sn_rust_alloc (68 samples, 0.06%)</title><rect x="98.0128%" y="309" width="0.0601%" height="15" fill="rgb(238,38,43)" fg:x="110926" fg:w="68"/><text x="98.2628%" y="319.50"></text></g><g><title>concurrent_queue::full_fence (31 samples, 0.03%)</title><rect x="98.0879%" y="485" width="0.0274%" height="15" fill="rgb(208,88,43)" fg:x="111011" fg:w="31"/><text x="98.3379%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (31 samples, 0.03%)</title><rect x="98.0879%" y="469" width="0.0274%" height="15" fill="rgb(205,136,37)" fg:x="111011" fg:w="31"/><text x="98.3379%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (31 samples, 0.03%)</title><rect x="98.0879%" y="453" width="0.0274%" height="15" fill="rgb(237,34,14)" fg:x="111011" fg:w="31"/><text x="98.3379%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (31 samples, 0.03%)</title><rect x="98.0879%" y="437" width="0.0274%" height="15" fill="rgb(236,193,44)" fg:x="111011" fg:w="31"/><text x="98.3379%" y="447.50"></text></g><g><title>async_io::reactor::Reactor::process_timer_ops (55 samples, 0.05%)</title><rect x="98.0729%" y="533" width="0.0486%" height="15" fill="rgb(231,48,10)" fg:x="110994" fg:w="55"/><text x="98.3229%" y="543.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (44 samples, 0.04%)</title><rect x="98.0826%" y="517" width="0.0389%" height="15" fill="rgb(213,141,34)" fg:x="111005" fg:w="44"/><text x="98.3326%" y="527.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (41 samples, 0.04%)</title><rect x="98.0853%" y="501" width="0.0362%" height="15" fill="rgb(249,130,34)" fg:x="111008" fg:w="41"/><text x="98.3353%" y="511.50"></text></g><g><title>core::mem::drop (64 samples, 0.06%)</title><rect x="98.1215%" y="533" width="0.0565%" height="15" fill="rgb(219,42,41)" fg:x="111049" fg:w="64"/><text x="98.3715%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::collections::btree::map::BTreeMap&lt;(std::time::Instant,usize),core::task::wake::Waker&gt;&gt;&gt; (64 samples, 0.06%)</title><rect x="98.1215%" y="517" width="0.0565%" height="15" fill="rgb(224,100,54)" fg:x="111049" fg:w="64"/><text x="98.3715%" y="527.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (64 samples, 0.06%)</title><rect x="98.1215%" y="501" width="0.0565%" height="15" fill="rgb(229,200,27)" fg:x="111049" fg:w="64"/><text x="98.3715%" y="511.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (63 samples, 0.06%)</title><rect x="98.1224%" y="485" width="0.0557%" height="15" fill="rgb(217,118,10)" fg:x="111050" fg:w="63"/><text x="98.3724%" y="495.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (63 samples, 0.06%)</title><rect x="98.1224%" y="469" width="0.0557%" height="15" fill="rgb(206,22,3)" fg:x="111050" fg:w="63"/><text x="98.3724%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (63 samples, 0.06%)</title><rect x="98.1224%" y="453" width="0.0557%" height="15" fill="rgb(232,163,46)" fg:x="111050" fg:w="63"/><text x="98.3724%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_swap (63 samples, 0.06%)</title><rect x="98.1224%" y="437" width="0.0557%" height="15" fill="rgb(206,95,13)" fg:x="111050" fg:w="63"/><text x="98.3724%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (20 samples, 0.02%)</title><rect x="98.1798%" y="533" width="0.0177%" height="15" fill="rgb(253,154,18)" fg:x="111115" fg:w="20"/><text x="98.4298%" y="543.50"></text></g><g><title>async_io::reactor::Reactor::process_timers::{{closure}} (14 samples, 0.01%)</title><rect x="98.1851%" y="517" width="0.0124%" height="15" fill="rgb(219,32,23)" fg:x="111121" fg:w="14"/><text x="98.4351%" y="527.50"></text></g><g><title>std::time::Instant::duration_since (14 samples, 0.01%)</title><rect x="98.1851%" y="501" width="0.0124%" height="15" fill="rgb(230,191,45)" fg:x="111121" fg:w="14"/><text x="98.4351%" y="511.50"></text></g><g><title>std::time::Instant::checked_duration_since (14 samples, 0.01%)</title><rect x="98.1851%" y="485" width="0.0124%" height="15" fill="rgb(229,64,36)" fg:x="111121" fg:w="14"/><text x="98.4351%" y="495.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (14 samples, 0.01%)</title><rect x="98.1851%" y="469" width="0.0124%" height="15" fill="rgb(205,129,25)" fg:x="111121" fg:w="14"/><text x="98.4351%" y="479.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (84 samples, 0.07%)</title><rect x="98.2001%" y="533" width="0.0742%" height="15" fill="rgb(254,112,7)" fg:x="111138" fg:w="84"/><text x="98.4501%" y="543.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (80 samples, 0.07%)</title><rect x="98.2037%" y="517" width="0.0707%" height="15" fill="rgb(226,53,48)" fg:x="111142" fg:w="80"/><text x="98.4537%" y="527.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (80 samples, 0.07%)</title><rect x="98.2037%" y="501" width="0.0707%" height="15" fill="rgb(214,153,38)" fg:x="111142" fg:w="80"/><text x="98.4537%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (80 samples, 0.07%)</title><rect x="98.2037%" y="485" width="0.0707%" height="15" fill="rgb(243,101,7)" fg:x="111142" fg:w="80"/><text x="98.4537%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (80 samples, 0.07%)</title><rect x="98.2037%" y="469" width="0.0707%" height="15" fill="rgb(240,140,22)" fg:x="111142" fg:w="80"/><text x="98.4537%" y="479.50"></text></g><g><title>async_io::reactor::Reactor::process_timers (546 samples, 0.48%)</title><rect x="97.8520%" y="549" width="0.4824%" height="15" fill="rgb(235,114,2)" fg:x="110744" fg:w="546"/><text x="98.1020%" y="559.50"></text></g><g><title>std::time::Instant::now (68 samples, 0.06%)</title><rect x="98.2744%" y="533" width="0.0601%" height="15" fill="rgb(242,59,12)" fg:x="111222" fg:w="68"/><text x="98.5244%" y="543.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (68 samples, 0.06%)</title><rect x="98.2744%" y="517" width="0.0601%" height="15" fill="rgb(252,134,9)" fg:x="111222" fg:w="68"/><text x="98.5244%" y="527.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (68 samples, 0.06%)</title><rect x="98.2744%" y="501" width="0.0601%" height="15" fill="rgb(236,4,44)" fg:x="111222" fg:w="68"/><text x="98.5244%" y="511.50"></text></g><g><title>__clock_gettime (67 samples, 0.06%)</title><rect x="98.2752%" y="485" width="0.0592%" height="15" fill="rgb(254,172,41)" fg:x="111223" fg:w="67"/><text x="98.5252%" y="495.50"></text></g><g><title>__vdso_clock_gettime (61 samples, 0.05%)</title><rect x="98.2805%" y="469" width="0.0539%" height="15" fill="rgb(244,63,20)" fg:x="111229" fg:w="61"/><text x="98.5305%" y="479.50"></text></g><g><title>[[vdso]] (56 samples, 0.05%)</title><rect x="98.2850%" y="453" width="0.0495%" height="15" fill="rgb(250,73,31)" fg:x="111234" fg:w="56"/><text x="98.5350%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (17 samples, 0.02%)</title><rect x="98.3362%" y="549" width="0.0150%" height="15" fill="rgb(241,38,36)" fg:x="111292" fg:w="17"/><text x="98.5862%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_add (17 samples, 0.02%)</title><rect x="98.3362%" y="533" width="0.0150%" height="15" fill="rgb(245,211,2)" fg:x="111292" fg:w="17"/><text x="98.5862%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;polling::epoll::Events&gt;&gt; (23 samples, 0.02%)</title><rect x="98.3936%" y="533" width="0.0203%" height="15" fill="rgb(206,120,28)" fg:x="111357" fg:w="23"/><text x="98.6436%" y="543.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="98.3936%" y="517" width="0.0203%" height="15" fill="rgb(211,59,34)" fg:x="111357" fg:w="23"/><text x="98.6436%" y="527.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (18 samples, 0.02%)</title><rect x="98.3981%" y="501" width="0.0159%" height="15" fill="rgb(233,168,5)" fg:x="111362" fg:w="18"/><text x="98.6481%" y="511.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (18 samples, 0.02%)</title><rect x="98.3981%" y="485" width="0.0159%" height="15" fill="rgb(234,33,13)" fg:x="111362" fg:w="18"/><text x="98.6481%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (18 samples, 0.02%)</title><rect x="98.3981%" y="469" width="0.0159%" height="15" fill="rgb(231,150,26)" fg:x="111362" fg:w="18"/><text x="98.6481%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_swap (18 samples, 0.02%)</title><rect x="98.3981%" y="453" width="0.0159%" height="15" fill="rgb(217,191,4)" fg:x="111362" fg:w="18"/><text x="98.6481%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (16 samples, 0.01%)</title><rect x="98.4140%" y="533" width="0.0141%" height="15" fill="rgb(246,198,38)" fg:x="111380" fg:w="16"/><text x="98.6640%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_swap (16 samples, 0.01%)</title><rect x="98.4140%" y="517" width="0.0141%" height="15" fill="rgb(245,64,37)" fg:x="111380" fg:w="16"/><text x="98.6640%" y="527.50"></text></g><g><title>__pthread_disable_asynccancel (18 samples, 0.02%)</title><rect x="98.5712%" y="501" width="0.0159%" height="15" fill="rgb(250,30,36)" fg:x="111558" fg:w="18"/><text x="98.8212%" y="511.50"></text></g><g><title>__libc_read (121 samples, 0.11%)</title><rect x="98.5279%" y="517" width="0.1069%" height="15" fill="rgb(217,86,53)" fg:x="111509" fg:w="121"/><text x="98.7779%" y="527.50"></text></g><g><title>__pthread_enable_asynccancel (54 samples, 0.05%)</title><rect x="98.5871%" y="501" width="0.0477%" height="15" fill="rgb(228,157,16)" fg:x="111576" fg:w="54"/><text x="98.8371%" y="511.50"></text></g><g><title>epoll_wait (193 samples, 0.17%)</title><rect x="98.6349%" y="517" width="0.1705%" height="15" fill="rgb(217,59,31)" fg:x="111630" fg:w="193"/><text x="98.8849%" y="527.50"></text></g><g><title>[libc-2.31.so] (44 samples, 0.04%)</title><rect x="98.7665%" y="501" width="0.0389%" height="15" fill="rgb(237,138,41)" fg:x="111779" fg:w="44"/><text x="99.0165%" y="511.50"></text></g><g><title>polling::epoll::Poller::modify (77 samples, 0.07%)</title><rect x="98.8107%" y="517" width="0.0680%" height="15" fill="rgb(227,91,49)" fg:x="111829" fg:w="77"/><text x="99.0607%" y="527.50"></text></g><g><title>polling::epoll::Poller::ctl (74 samples, 0.07%)</title><rect x="98.8133%" y="501" width="0.0654%" height="15" fill="rgb(247,21,44)" fg:x="111832" fg:w="74"/><text x="99.0633%" y="511.50"></text></g><g><title>epoll_ctl (64 samples, 0.06%)</title><rect x="98.8222%" y="485" width="0.0565%" height="15" fill="rgb(219,210,51)" fg:x="111842" fg:w="64"/><text x="99.0722%" y="495.50"></text></g><g><title>polling::epoll::Poller::wait (538 samples, 0.48%)</title><rect x="98.4299%" y="533" width="0.4754%" height="15" fill="rgb(209,140,6)" fg:x="111398" fg:w="538"/><text x="98.6799%" y="543.50"></text></g><g><title>syscall (30 samples, 0.03%)</title><rect x="98.8787%" y="517" width="0.0265%" height="15" fill="rgb(221,188,24)" fg:x="111906" fg:w="30"/><text x="99.1287%" y="527.50"></text></g><g><title>polling::Poller::wait (647 samples, 0.57%)</title><rect x="98.3565%" y="549" width="0.5717%" height="15" fill="rgb(232,154,20)" fg:x="111315" fg:w="647"/><text x="98.6065%" y="559.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (26 samples, 0.02%)</title><rect x="98.9052%" y="533" width="0.0230%" height="15" fill="rgb(244,137,50)" fg:x="111936" fg:w="26"/><text x="99.1552%" y="543.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (22 samples, 0.02%)</title><rect x="98.9088%" y="517" width="0.0194%" height="15" fill="rgb(225,185,43)" fg:x="111940" fg:w="22"/><text x="99.1588%" y="527.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::try_lock (22 samples, 0.02%)</title><rect x="98.9088%" y="501" width="0.0194%" height="15" fill="rgb(213,205,38)" fg:x="111940" fg:w="22"/><text x="99.1588%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (22 samples, 0.02%)</title><rect x="98.9088%" y="485" width="0.0194%" height="15" fill="rgb(236,73,12)" fg:x="111940" fg:w="22"/><text x="99.1588%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (22 samples, 0.02%)</title><rect x="98.9088%" y="469" width="0.0194%" height="15" fill="rgb(235,219,13)" fg:x="111940" fg:w="22"/><text x="99.1588%" y="479.50"></text></g><g><title>async_io::reactor::ReactorLock::react (1,271 samples, 1.12%)</title><rect x="97.8061%" y="565" width="1.1230%" height="15" fill="rgb(218,59,36)" fg:x="110692" fg:w="1271"/><text x="98.0561%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (21 samples, 0.02%)</title><rect x="98.9291%" y="517" width="0.0186%" height="15" fill="rgb(205,110,39)" fg:x="111963" fg:w="21"/><text x="99.1791%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_store (21 samples, 0.02%)</title><rect x="98.9291%" y="501" width="0.0186%" height="15" fill="rgb(218,206,42)" fg:x="111963" fg:w="21"/><text x="99.1791%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_io::driver::CallOnDrop&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (23 samples, 0.02%)</title><rect x="98.9291%" y="565" width="0.0203%" height="15" fill="rgb(248,125,24)" fg:x="111963" fg:w="23"/><text x="99.1791%" y="575.50"></text></g><g><title>&lt;async_io::driver::CallOnDrop&lt;F&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="98.9291%" y="549" width="0.0203%" height="15" fill="rgb(242,28,27)" fg:x="111963" fg:w="23"/><text x="99.1791%" y="559.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (23 samples, 0.02%)</title><rect x="98.9291%" y="533" width="0.0203%" height="15" fill="rgb(216,228,15)" fg:x="111963" fg:w="23"/><text x="99.1791%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (30 samples, 0.03%)</title><rect x="98.9848%" y="533" width="0.0265%" height="15" fill="rgb(235,116,46)" fg:x="112026" fg:w="30"/><text x="99.2348%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (30 samples, 0.03%)</title><rect x="98.9848%" y="517" width="0.0265%" height="15" fill="rgb(224,18,32)" fg:x="112026" fg:w="30"/><text x="99.2348%" y="527.50"></text></g><g><title>core::bool::&lt;impl bool&gt;::then (20 samples, 0.02%)</title><rect x="99.0157%" y="453" width="0.0177%" height="15" fill="rgb(252,5,12)" fg:x="112061" fg:w="20"/><text x="99.2657%" y="463.50"></text></g><g><title>std::sys::unix::futex::futex_wait (127 samples, 0.11%)</title><rect x="99.0130%" y="469" width="0.1122%" height="15" fill="rgb(251,36,5)" fg:x="112058" fg:w="127"/><text x="99.2630%" y="479.50"></text></g><g><title>syscall (99 samples, 0.09%)</title><rect x="99.0378%" y="453" width="0.0875%" height="15" fill="rgb(217,53,14)" fg:x="112086" fg:w="99"/><text x="99.2878%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (81 samples, 0.07%)</title><rect x="99.1252%" y="469" width="0.0716%" height="15" fill="rgb(215,86,45)" fg:x="112185" fg:w="81"/><text x="99.3752%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (81 samples, 0.07%)</title><rect x="99.1252%" y="453" width="0.0716%" height="15" fill="rgb(242,169,11)" fg:x="112185" fg:w="81"/><text x="99.3752%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (81 samples, 0.07%)</title><rect x="99.1252%" y="437" width="0.0716%" height="15" fill="rgb(211,213,45)" fg:x="112185" fg:w="81"/><text x="99.3752%" y="447.50"></text></g><g><title>std::sync::condvar::Condvar::wait (219 samples, 0.19%)</title><rect x="99.0113%" y="533" width="0.1935%" height="15" fill="rgb(205,88,11)" fg:x="112056" fg:w="219"/><text x="99.2613%" y="543.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (218 samples, 0.19%)</title><rect x="99.0121%" y="517" width="0.1926%" height="15" fill="rgb(252,69,26)" fg:x="112057" fg:w="218"/><text x="99.2621%" y="527.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait (218 samples, 0.19%)</title><rect x="99.0121%" y="501" width="0.1926%" height="15" fill="rgb(246,123,37)" fg:x="112057" fg:w="218"/><text x="99.2621%" y="511.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait_optional_timeout (218 samples, 0.19%)</title><rect x="99.0121%" y="485" width="0.1926%" height="15" fill="rgb(212,205,5)" fg:x="112057" fg:w="218"/><text x="99.2621%" y="495.50"></text></g><g><title>parking::Parker::park (281 samples, 0.25%)</title><rect x="98.9706%" y="565" width="0.2483%" height="15" fill="rgb(253,148,0)" fg:x="112010" fg:w="281"/><text x="99.2206%" y="575.50"></text></g><g><title>parking::Inner::park (278 samples, 0.25%)</title><rect x="98.9733%" y="549" width="0.2456%" height="15" fill="rgb(239,22,4)" fg:x="112013" fg:w="278"/><text x="99.2233%" y="559.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (16 samples, 0.01%)</title><rect x="99.2048%" y="533" width="0.0141%" height="15" fill="rgb(226,26,53)" fg:x="112275" fg:w="16"/><text x="99.4548%" y="543.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (15 samples, 0.01%)</title><rect x="99.2057%" y="517" width="0.0133%" height="15" fill="rgb(225,229,45)" fg:x="112276" fg:w="15"/><text x="99.4557%" y="527.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (15 samples, 0.01%)</title><rect x="99.2057%" y="501" width="0.0133%" height="15" fill="rgb(220,60,37)" fg:x="112276" fg:w="15"/><text x="99.4557%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (15 samples, 0.01%)</title><rect x="99.2057%" y="485" width="0.0133%" height="15" fill="rgb(217,180,35)" fg:x="112276" fg:w="15"/><text x="99.4557%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (15 samples, 0.01%)</title><rect x="99.2057%" y="469" width="0.0133%" height="15" fill="rgb(229,7,53)" fg:x="112276" fg:w="15"/><text x="99.4557%" y="479.50"></text></g><g><title>parking::Parker::park_timeout (243 samples, 0.21%)</title><rect x="99.2189%" y="565" width="0.2147%" height="15" fill="rgb(254,137,3)" fg:x="112291" fg:w="243"/><text x="99.4689%" y="575.50"></text></g><g><title>parking::Inner::park (216 samples, 0.19%)</title><rect x="99.2428%" y="549" width="0.1909%" height="15" fill="rgb(215,140,41)" fg:x="112318" fg:w="216"/><text x="99.4928%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (205 samples, 0.18%)</title><rect x="99.2525%" y="533" width="0.1811%" height="15" fill="rgb(250,80,15)" fg:x="112329" fg:w="205"/><text x="99.5025%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (205 samples, 0.18%)</title><rect x="99.2525%" y="517" width="0.1811%" height="15" fill="rgb(252,191,6)" fg:x="112329" fg:w="205"/><text x="99.5025%" y="527.50"></text></g><g><title>std::panic::catch_unwind (12,783 samples, 11.29%)</title><rect x="88.1803%" y="853" width="11.2949%" height="15" fill="rgb(246,217,18)" fg:x="99798" fg:w="12783"/><text x="88.4303%" y="863.50">std::panic::catch..</text></g><g><title>std::panicking::try (12,783 samples, 11.29%)</title><rect x="88.1803%" y="837" width="11.2949%" height="15" fill="rgb(223,93,7)" fg:x="99798" fg:w="12783"/><text x="88.4303%" y="847.50">std::panicking::t..</text></g><g><title>std::panicking::try::do_call (12,783 samples, 11.29%)</title><rect x="88.1803%" y="821" width="11.2949%" height="15" fill="rgb(225,55,52)" fg:x="99798" fg:w="12783"/><text x="88.4303%" y="831.50">std::panicking::t..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (12,783 samples, 11.29%)</title><rect x="88.1803%" y="805" width="11.2949%" height="15" fill="rgb(240,31,24)" fg:x="99798" fg:w="12783"/><text x="88.4303%" y="815.50">&lt;core::panic::unw..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (12,783 samples, 11.29%)</title><rect x="88.1803%" y="789" width="11.2949%" height="15" fill="rgb(205,56,52)" fg:x="99798" fg:w="12783"/><text x="88.4303%" y="799.50">std::thread::Buil..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (12,783 samples, 11.29%)</title><rect x="88.1803%" y="773" width="11.2949%" height="15" fill="rgb(246,146,12)" fg:x="99798" fg:w="12783"/><text x="88.4303%" y="783.50">std::sys_common::..</text></g><g><title>core::ops::function::FnOnce::call_once (12,783 samples, 11.29%)</title><rect x="88.1803%" y="757" width="11.2949%" height="15" fill="rgb(239,84,36)" fg:x="99798" fg:w="12783"/><text x="88.4303%" y="767.50">core::ops::functi..</text></g><g><title>async_global_executor::threading::thread_main_loop (12,783 samples, 11.29%)</title><rect x="88.1803%" y="741" width="11.2949%" height="15" fill="rgb(207,41,40)" fg:x="99798" fg:w="12783"/><text x="88.4303%" y="751.50">async_global_exec..</text></g><g><title>std::panic::catch_unwind (12,758 samples, 11.27%)</title><rect x="88.2023%" y="725" width="11.2728%" height="15" fill="rgb(241,179,25)" fg:x="99823" fg:w="12758"/><text x="88.4523%" y="735.50">std::panic::catch..</text></g><g><title>std::panicking::try (12,758 samples, 11.27%)</title><rect x="88.2023%" y="709" width="11.2728%" height="15" fill="rgb(210,0,34)" fg:x="99823" fg:w="12758"/><text x="88.4523%" y="719.50">std::panicking::t..</text></g><g><title>std::panicking::try::do_call (12,758 samples, 11.27%)</title><rect x="88.2023%" y="693" width="11.2728%" height="15" fill="rgb(225,217,29)" fg:x="99823" fg:w="12758"/><text x="88.4523%" y="703.50">std::panicking::t..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (12,758 samples, 11.27%)</title><rect x="88.2023%" y="677" width="11.2728%" height="15" fill="rgb(216,191,38)" fg:x="99823" fg:w="12758"/><text x="88.4523%" y="687.50">async_global_exec..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (12,758 samples, 11.27%)</title><rect x="88.2023%" y="661" width="11.2728%" height="15" fill="rgb(232,140,52)" fg:x="99823" fg:w="12758"/><text x="88.4523%" y="671.50">std::thread::loca..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (12,758 samples, 11.27%)</title><rect x="88.2023%" y="645" width="11.2728%" height="15" fill="rgb(223,158,51)" fg:x="99823" fg:w="12758"/><text x="88.4523%" y="655.50">std::thread::loca..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (12,758 samples, 11.27%)</title><rect x="88.2023%" y="629" width="11.2728%" height="15" fill="rgb(235,29,51)" fg:x="99823" fg:w="12758"/><text x="88.4523%" y="639.50">async_global_exec..</text></g><g><title>async_global_executor::reactor::block_on (12,758 samples, 11.27%)</title><rect x="88.2023%" y="613" width="11.2728%" height="15" fill="rgb(215,181,18)" fg:x="99823" fg:w="12758"/><text x="88.4523%" y="623.50">async_global_exec..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (12,758 samples, 11.27%)</title><rect x="88.2023%" y="597" width="11.2728%" height="15" fill="rgb(227,125,34)" fg:x="99823" fg:w="12758"/><text x="88.4523%" y="607.50">async_global_exec..</text></g><g><title>async_io::driver::block_on (12,758 samples, 11.27%)</title><rect x="88.2023%" y="581" width="11.2728%" height="15" fill="rgb(230,197,49)" fg:x="99823" fg:w="12758"/><text x="88.4523%" y="591.50">async_io::driver:..</text></g><g><title>std::time::Instant::now (40 samples, 0.04%)</title><rect x="99.4398%" y="565" width="0.0353%" height="15" fill="rgb(239,141,16)" fg:x="112541" fg:w="40"/><text x="99.6898%" y="575.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (40 samples, 0.04%)</title><rect x="99.4398%" y="549" width="0.0353%" height="15" fill="rgb(225,105,43)" fg:x="112541" fg:w="40"/><text x="99.6898%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (40 samples, 0.04%)</title><rect x="99.4398%" y="533" width="0.0353%" height="15" fill="rgb(214,131,14)" fg:x="112541" fg:w="40"/><text x="99.6898%" y="543.50"></text></g><g><title>__clock_gettime (33 samples, 0.03%)</title><rect x="99.4460%" y="517" width="0.0292%" height="15" fill="rgb(229,177,11)" fg:x="112548" fg:w="33"/><text x="99.6960%" y="527.50"></text></g><g><title>__vdso_clock_gettime (30 samples, 0.03%)</title><rect x="99.4486%" y="501" width="0.0265%" height="15" fill="rgb(231,180,14)" fg:x="112551" fg:w="30"/><text x="99.6986%" y="511.50"></text></g><g><title>[[vdso]] (27 samples, 0.02%)</title><rect x="99.4513%" y="485" width="0.0239%" height="15" fill="rgb(232,88,2)" fg:x="112554" fg:w="27"/><text x="99.7013%" y="495.50"></text></g><g><title>clone (12,794 samples, 11.30%)</title><rect x="88.1758%" y="965" width="11.3046%" height="15" fill="rgb(205,220,8)" fg:x="99793" fg:w="12794"/><text x="88.4258%" y="975.50">clone</text></g><g><title>start_thread (12,790 samples, 11.30%)</title><rect x="88.1794%" y="949" width="11.3011%" height="15" fill="rgb(225,23,53)" fg:x="99797" fg:w="12790"/><text x="88.4294%" y="959.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (12,789 samples, 11.30%)</title><rect x="88.1803%" y="933" width="11.3002%" height="15" fill="rgb(213,62,29)" fg:x="99798" fg:w="12789"/><text x="88.4303%" y="943.50">std::sys::unix::t..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (12,789 samples, 11.30%)</title><rect x="88.1803%" y="917" width="11.3002%" height="15" fill="rgb(227,75,7)" fg:x="99798" fg:w="12789"/><text x="88.4303%" y="927.50">&lt;alloc::boxed::Bo..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (12,789 samples, 11.30%)</title><rect x="88.1803%" y="901" width="11.3002%" height="15" fill="rgb(207,105,14)" fg:x="99798" fg:w="12789"/><text x="88.4303%" y="911.50">&lt;alloc::boxed::Bo..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (12,789 samples, 11.30%)</title><rect x="88.1803%" y="885" width="11.3002%" height="15" fill="rgb(245,62,29)" fg:x="99798" fg:w="12789"/><text x="88.4303%" y="895.50">core::ops::functi..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (12,789 samples, 11.30%)</title><rect x="88.1803%" y="869" width="11.3002%" height="15" fill="rgb(236,202,4)" fg:x="99798" fg:w="12789"/><text x="88.4303%" y="879.50">std::thread::Buil..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;tremor_runtime::connectors::sink::SinkMsgWrapper&gt;&gt; (19 samples, 0.02%)</title><rect x="99.4875%" y="965" width="0.0168%" height="15" fill="rgb(250,67,1)" fg:x="112595" fg:w="19"/><text x="99.7375%" y="975.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (157 samples, 0.14%)</title><rect x="99.5432%" y="965" width="0.1387%" height="15" fill="rgb(253,115,44)" fg:x="112658" fg:w="157"/><text x="99.7932%" y="975.50"></text></g><g><title>alloc::borrow::Cow&lt;B&gt;::into_owned (17 samples, 0.02%)</title><rect x="99.6669%" y="949" width="0.0150%" height="15" fill="rgb(251,139,18)" fg:x="112798" fg:w="17"/><text x="99.9169%" y="959.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (13 samples, 0.01%)</title><rect x="99.6819%" y="965" width="0.0115%" height="15" fill="rgb(218,22,32)" fg:x="112815" fg:w="13"/><text x="99.9319%" y="975.50"></text></g><g><title>async-std/runti (112,746 samples, 99.62%)</title><rect x="0.0751%" y="981" width="99.6209%" height="15" fill="rgb(243,53,5)" fg:x="85" fg:w="112746"/><text x="0.3251%" y="991.50">async-std/runti</text></g><g><title>[ld-2.31.so] (20 samples, 0.02%)</title><rect x="99.7208%" y="965" width="0.0177%" height="15" fill="rgb(227,56,16)" fg:x="112859" fg:w="20"/><text x="99.9708%" y="975.50"></text></g><g><title>_dl_allocate_tls_init (14 samples, 0.01%)</title><rect x="99.7517%" y="501" width="0.0124%" height="15" fill="rgb(245,53,0)" fg:x="112894" fg:w="14"/><text x="100.0017%" y="511.50"></text></g><g><title>[ld-2.31.so] (14 samples, 0.01%)</title><rect x="99.7517%" y="485" width="0.0124%" height="15" fill="rgb(216,170,35)" fg:x="112894" fg:w="14"/><text x="100.0017%" y="495.50"></text></g><g><title>__pthread_create_2_1 (19 samples, 0.02%)</title><rect x="99.7508%" y="517" width="0.0168%" height="15" fill="rgb(211,200,8)" fg:x="112893" fg:w="19"/><text x="100.0008%" y="527.50"></text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (20 samples, 0.02%)</title><rect x="99.7508%" y="677" width="0.0177%" height="15" fill="rgb(228,204,44)" fg:x="112893" fg:w="20"/><text x="100.0008%" y="687.50"></text></g><g><title>async_io::driver::block_on (20 samples, 0.02%)</title><rect x="99.7508%" y="661" width="0.0177%" height="15" fill="rgb(214,121,17)" fg:x="112893" fg:w="20"/><text x="100.0008%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (20 samples, 0.02%)</title><rect x="99.7508%" y="645" width="0.0177%" height="15" fill="rgb(233,64,38)" fg:x="112893" fg:w="20"/><text x="100.0008%" y="655.50"></text></g><g><title>async_global_executor::init::init::{{closure}} (20 samples, 0.02%)</title><rect x="99.7508%" y="629" width="0.0177%" height="15" fill="rgb(253,54,19)" fg:x="112893" fg:w="20"/><text x="100.0008%" y="639.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (20 samples, 0.02%)</title><rect x="99.7508%" y="613" width="0.0177%" height="15" fill="rgb(253,94,18)" fg:x="112893" fg:w="20"/><text x="100.0008%" y="623.50"></text></g><g><title>async_global_executor::threading::spawn_more_threads::{{closure}} (20 samples, 0.02%)</title><rect x="99.7508%" y="597" width="0.0177%" height="15" fill="rgb(227,57,52)" fg:x="112893" fg:w="20"/><text x="100.0008%" y="607.50"></text></g><g><title>std::thread::Builder::spawn (20 samples, 0.02%)</title><rect x="99.7508%" y="581" width="0.0177%" height="15" fill="rgb(230,228,50)" fg:x="112893" fg:w="20"/><text x="100.0008%" y="591.50"></text></g><g><title>std::thread::Builder::spawn_unchecked (20 samples, 0.02%)</title><rect x="99.7508%" y="565" width="0.0177%" height="15" fill="rgb(217,205,27)" fg:x="112893" fg:w="20"/><text x="100.0008%" y="575.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_ (20 samples, 0.02%)</title><rect x="99.7508%" y="549" width="0.0177%" height="15" fill="rgb(252,71,50)" fg:x="112893" fg:w="20"/><text x="100.0008%" y="559.50"></text></g><g><title>std::sys::unix::thread::Thread::new (20 samples, 0.02%)</title><rect x="99.7508%" y="533" width="0.0177%" height="15" fill="rgb(209,86,4)" fg:x="112893" fg:w="20"/><text x="100.0008%" y="543.50"></text></g><g><title>async_std::task::builder::Builder::blocking (22 samples, 0.02%)</title><rect x="99.7499%" y="949" width="0.0194%" height="15" fill="rgb(229,94,0)" fg:x="112892" fg:w="22"/><text x="99.9999%" y="959.50"></text></g><g><title>async_std::task::builder::Builder::build (22 samples, 0.02%)</title><rect x="99.7499%" y="933" width="0.0194%" height="15" fill="rgb(252,223,21)" fg:x="112892" fg:w="22"/><text x="99.9999%" y="943.50"></text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (22 samples, 0.02%)</title><rect x="99.7499%" y="917" width="0.0194%" height="15" fill="rgb(230,210,4)" fg:x="112892" fg:w="22"/><text x="99.9999%" y="927.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (22 samples, 0.02%)</title><rect x="99.7499%" y="901" width="0.0194%" height="15" fill="rgb(240,149,38)" fg:x="112892" fg:w="22"/><text x="99.9999%" y="911.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (22 samples, 0.02%)</title><rect x="99.7499%" y="885" width="0.0194%" height="15" fill="rgb(254,105,20)" fg:x="112892" fg:w="22"/><text x="99.9999%" y="895.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (22 samples, 0.02%)</title><rect x="99.7499%" y="869" width="0.0194%" height="15" fill="rgb(253,87,46)" fg:x="112892" fg:w="22"/><text x="99.9999%" y="879.50"></text></g><g><title>once_cell::imp::initialize_or_wait (22 samples, 0.02%)</title><rect x="99.7499%" y="853" width="0.0194%" height="15" fill="rgb(253,116,33)" fg:x="112892" fg:w="22"/><text x="99.9999%" y="863.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (22 samples, 0.02%)</title><rect x="99.7499%" y="837" width="0.0194%" height="15" fill="rgb(229,198,5)" fg:x="112892" fg:w="22"/><text x="99.9999%" y="847.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (22 samples, 0.02%)</title><rect x="99.7499%" y="821" width="0.0194%" height="15" fill="rgb(242,38,37)" fg:x="112892" fg:w="22"/><text x="99.9999%" y="831.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (22 samples, 0.02%)</title><rect x="99.7499%" y="805" width="0.0194%" height="15" fill="rgb(242,69,53)" fg:x="112892" fg:w="22"/><text x="99.9999%" y="815.50"></text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force::{{closure}} (22 samples, 0.02%)</title><rect x="99.7499%" y="789" width="0.0194%" height="15" fill="rgb(249,80,16)" fg:x="112892" fg:w="22"/><text x="99.9999%" y="799.50"></text></g><g><title>core::ops::function::FnOnce::call_once (22 samples, 0.02%)</title><rect x="99.7499%" y="773" width="0.0194%" height="15" fill="rgb(206,128,11)" fg:x="112892" fg:w="22"/><text x="99.9999%" y="783.50"></text></g><g><title>core::ops::function::FnOnce::call_once (22 samples, 0.02%)</title><rect x="99.7499%" y="757" width="0.0194%" height="15" fill="rgb(212,35,20)" fg:x="112892" fg:w="22"/><text x="99.9999%" y="767.50"></text></g><g><title>async_std::rt::RUNTIME::{{closure}} (22 samples, 0.02%)</title><rect x="99.7499%" y="741" width="0.0194%" height="15" fill="rgb(236,79,13)" fg:x="112892" fg:w="22"/><text x="99.9999%" y="751.50"></text></g><g><title>async_global_executor::init::init_with_config (22 samples, 0.02%)</title><rect x="99.7499%" y="725" width="0.0194%" height="15" fill="rgb(233,123,3)" fg:x="112892" fg:w="22"/><text x="99.9999%" y="735.50"></text></g><g><title>async_global_executor::init::init (21 samples, 0.02%)</title><rect x="99.7508%" y="709" width="0.0186%" height="15" fill="rgb(214,93,52)" fg:x="112893" fg:w="21"/><text x="100.0008%" y="719.50"></text></g><g><title>async_global_executor::reactor::block_on (21 samples, 0.02%)</title><rect x="99.7508%" y="693" width="0.0186%" height="15" fill="rgb(251,37,40)" fg:x="112893" fg:w="21"/><text x="100.0008%" y="703.50"></text></g><g><title>[unknown] (37 samples, 0.03%)</title><rect x="99.7393%" y="965" width="0.0327%" height="15" fill="rgb(227,80,54)" fg:x="112880" fg:w="37"/><text x="99.9893%" y="975.50"></text></g><g><title>__ctype_init (16 samples, 0.01%)</title><rect x="99.9037%" y="933" width="0.0141%" height="15" fill="rgb(254,48,11)" fg:x="113066" fg:w="16"/><text x="100.1537%" y="943.50"></text></g><g><title>main (241 samples, 0.21%)</title><rect x="99.7190%" y="981" width="0.2129%" height="15" fill="rgb(235,193,26)" fg:x="112857" fg:w="241"/><text x="99.9690%" y="991.50"></text></g><g><title>clone (179 samples, 0.16%)</title><rect x="99.7738%" y="965" width="0.1582%" height="15" fill="rgb(229,99,21)" fg:x="112919" fg:w="179"/><text x="100.0238%" y="975.50"></text></g><g><title>start_thread (40 samples, 0.04%)</title><rect x="99.8966%" y="949" width="0.0353%" height="15" fill="rgb(211,140,41)" fg:x="113058" fg:w="40"/><text x="100.1466%" y="959.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (16 samples, 0.01%)</title><rect x="99.9178%" y="933" width="0.0141%" height="15" fill="rgb(240,227,30)" fg:x="113082" fg:w="16"/><text x="100.1678%" y="943.50"></text></g><g><title>std::sys::unix::stack_overflow::Handler::new (15 samples, 0.01%)</title><rect x="99.9187%" y="917" width="0.0133%" height="15" fill="rgb(215,224,45)" fg:x="113083" fg:w="15"/><text x="100.1687%" y="927.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (15 samples, 0.01%)</title><rect x="99.9187%" y="901" width="0.0133%" height="15" fill="rgb(206,123,31)" fg:x="113083" fg:w="15"/><text x="100.1687%" y="911.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (15 samples, 0.01%)</title><rect x="99.9187%" y="885" width="0.0133%" height="15" fill="rgb(210,138,16)" fg:x="113083" fg:w="15"/><text x="100.1687%" y="895.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (15 samples, 0.01%)</title><rect x="99.9187%" y="869" width="0.0133%" height="15" fill="rgb(228,57,28)" fg:x="113083" fg:w="15"/><text x="100.1687%" y="879.50"></text></g><g><title>std::sys::unix::futex::futex_wait (55 samples, 0.05%)</title><rect x="99.9373%" y="645" width="0.0486%" height="15" fill="rgb(242,170,10)" fg:x="113104" fg:w="55"/><text x="100.1873%" y="655.50"></text></g><g><title>syscall (54 samples, 0.05%)</title><rect x="99.9381%" y="629" width="0.0477%" height="15" fill="rgb(228,214,39)" fg:x="113105" fg:w="54"/><text x="100.1881%" y="639.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (71 samples, 0.06%)</title><rect x="99.9337%" y="725" width="0.0627%" height="15" fill="rgb(218,179,33)" fg:x="113100" fg:w="71"/><text x="100.1837%" y="735.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (71 samples, 0.06%)</title><rect x="99.9337%" y="709" width="0.0627%" height="15" fill="rgb(235,193,39)" fg:x="113100" fg:w="71"/><text x="100.1837%" y="719.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (70 samples, 0.06%)</title><rect x="99.9346%" y="693" width="0.0619%" height="15" fill="rgb(219,221,36)" fg:x="113101" fg:w="70"/><text x="100.1846%" y="703.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (70 samples, 0.06%)</title><rect x="99.9346%" y="677" width="0.0619%" height="15" fill="rgb(248,218,19)" fg:x="113101" fg:w="70"/><text x="100.1846%" y="687.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (68 samples, 0.06%)</title><rect x="99.9364%" y="661" width="0.0601%" height="15" fill="rgb(205,50,9)" fg:x="113103" fg:w="68"/><text x="100.1864%" y="671.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (12 samples, 0.01%)</title><rect x="99.9859%" y="645" width="0.0106%" height="15" fill="rgb(238,81,28)" fg:x="113159" fg:w="12"/><text x="100.2359%" y="655.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (72 samples, 0.06%)</title><rect x="99.9337%" y="741" width="0.0636%" height="15" fill="rgb(235,110,19)" fg:x="113100" fg:w="72"/><text x="100.1837%" y="751.50"></text></g><g><title>std::panic::catch_unwind (73 samples, 0.06%)</title><rect x="99.9337%" y="853" width="0.0645%" height="15" fill="rgb(214,7,14)" fg:x="113100" fg:w="73"/><text x="100.1837%" y="863.50"></text></g><g><title>std::panicking::try (73 samples, 0.06%)</title><rect x="99.9337%" y="837" width="0.0645%" height="15" fill="rgb(211,77,3)" fg:x="113100" fg:w="73"/><text x="100.1837%" y="847.50"></text></g><g><title>std::panicking::try::do_call (73 samples, 0.06%)</title><rect x="99.9337%" y="821" width="0.0645%" height="15" fill="rgb(229,5,9)" fg:x="113100" fg:w="73"/><text x="100.1837%" y="831.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (73 samples, 0.06%)</title><rect x="99.9337%" y="805" width="0.0645%" height="15" fill="rgb(225,90,11)" fg:x="113100" fg:w="73"/><text x="100.1837%" y="815.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (73 samples, 0.06%)</title><rect x="99.9337%" y="789" width="0.0645%" height="15" fill="rgb(242,56,8)" fg:x="113100" fg:w="73"/><text x="100.1837%" y="799.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (73 samples, 0.06%)</title><rect x="99.9337%" y="773" width="0.0645%" height="15" fill="rgb(249,212,39)" fg:x="113100" fg:w="73"/><text x="100.1837%" y="783.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (73 samples, 0.06%)</title><rect x="99.9337%" y="757" width="0.0645%" height="15" fill="rgb(236,90,9)" fg:x="113100" fg:w="73"/><text x="100.1837%" y="767.50"></text></g><g><title>clone (74 samples, 0.07%)</title><rect x="99.9337%" y="965" width="0.0654%" height="15" fill="rgb(206,88,35)" fg:x="113100" fg:w="74"/><text x="100.1837%" y="975.50"></text></g><g><title>start_thread (74 samples, 0.07%)</title><rect x="99.9337%" y="949" width="0.0654%" height="15" fill="rgb(205,126,30)" fg:x="113100" fg:w="74"/><text x="100.1837%" y="959.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (74 samples, 0.07%)</title><rect x="99.9337%" y="933" width="0.0654%" height="15" fill="rgb(230,176,12)" fg:x="113100" fg:w="74"/><text x="100.1837%" y="943.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (74 samples, 0.07%)</title><rect x="99.9337%" y="917" width="0.0654%" height="15" fill="rgb(243,19,9)" fg:x="113100" fg:w="74"/><text x="100.1837%" y="927.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (74 samples, 0.07%)</title><rect x="99.9337%" y="901" width="0.0654%" height="15" fill="rgb(245,171,17)" fg:x="113100" fg:w="74"/><text x="100.1837%" y="911.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (74 samples, 0.07%)</title><rect x="99.9337%" y="885" width="0.0654%" height="15" fill="rgb(227,52,21)" fg:x="113100" fg:w="74"/><text x="100.1837%" y="895.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (74 samples, 0.07%)</title><rect x="99.9337%" y="869" width="0.0654%" height="15" fill="rgb(238,69,14)" fg:x="113100" fg:w="74"/><text x="100.1837%" y="879.50"></text></g><g><title>all (113,175 samples, 100%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(241,156,39)" fg:x="0" fg:w="113175"/><text x="0.2500%" y="1007.50"></text></g><g><title>tokio-runtime-w (77 samples, 0.07%)</title><rect x="99.9320%" y="981" width="0.0680%" height="15" fill="rgb(212,227,28)" fg:x="113098" fg:w="77"/><text x="100.1820%" y="991.50"></text></g></svg></svg>