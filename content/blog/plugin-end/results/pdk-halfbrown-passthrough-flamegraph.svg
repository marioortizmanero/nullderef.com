<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1190" onload="init(evt)" viewBox="0 0 1200 1190" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1190" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1173.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1173.00"> </text><svg id="frames" x="10" width="1180" total_samples="123751"><g><title>std::sys::unix::futex::futex_wait (35 samples, 0.03%)</title><rect x="0.0129%" y="773" width="0.0283%" height="15" fill="rgb(227,0,7)" fg:x="16" fg:w="35"/><text x="0.2629%" y="783.50"></text></g><g><title>syscall (28 samples, 0.02%)</title><rect x="0.0186%" y="757" width="0.0226%" height="15" fill="rgb(217,0,24)" fg:x="23" fg:w="28"/><text x="0.2686%" y="767.50"></text></g><g><title>std::panic::catch_unwind (45 samples, 0.04%)</title><rect x="0.0065%" y="997" width="0.0364%" height="15" fill="rgb(221,193,54)" fg:x="8" fg:w="45"/><text x="0.2565%" y="1007.50"></text></g><g><title>std::panicking::try (45 samples, 0.04%)</title><rect x="0.0065%" y="981" width="0.0364%" height="15" fill="rgb(248,212,6)" fg:x="8" fg:w="45"/><text x="0.2565%" y="991.50"></text></g><g><title>std::panicking::try::do_call (45 samples, 0.04%)</title><rect x="0.0065%" y="965" width="0.0364%" height="15" fill="rgb(208,68,35)" fg:x="8" fg:w="45"/><text x="0.2565%" y="975.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (45 samples, 0.04%)</title><rect x="0.0065%" y="949" width="0.0364%" height="15" fill="rgb(232,128,0)" fg:x="8" fg:w="45"/><text x="0.2565%" y="959.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (45 samples, 0.04%)</title><rect x="0.0065%" y="933" width="0.0364%" height="15" fill="rgb(207,160,47)" fg:x="8" fg:w="45"/><text x="0.2565%" y="943.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (45 samples, 0.04%)</title><rect x="0.0065%" y="917" width="0.0364%" height="15" fill="rgb(228,23,34)" fg:x="8" fg:w="45"/><text x="0.2565%" y="927.50"></text></g><g><title>async_io::driver::UNPARKER::{{closure}}::{{closure}} (45 samples, 0.04%)</title><rect x="0.0065%" y="901" width="0.0364%" height="15" fill="rgb(218,30,26)" fg:x="8" fg:w="45"/><text x="0.2565%" y="911.50"></text></g><g><title>async_io::driver::main_loop (45 samples, 0.04%)</title><rect x="0.0065%" y="885" width="0.0364%" height="15" fill="rgb(220,122,19)" fg:x="8" fg:w="45"/><text x="0.2565%" y="895.50"></text></g><g><title>parking::Parker::park_timeout (39 samples, 0.03%)</title><rect x="0.0113%" y="869" width="0.0315%" height="15" fill="rgb(250,228,42)" fg:x="14" fg:w="39"/><text x="0.2613%" y="879.50"></text></g><g><title>parking::Inner::park (38 samples, 0.03%)</title><rect x="0.0121%" y="853" width="0.0307%" height="15" fill="rgb(240,193,28)" fg:x="15" fg:w="38"/><text x="0.2621%" y="863.50"></text></g><g><title>std::sync::condvar::Condvar::wait_timeout (37 samples, 0.03%)</title><rect x="0.0129%" y="837" width="0.0299%" height="15" fill="rgb(216,20,37)" fg:x="16" fg:w="37"/><text x="0.2629%" y="847.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait_timeout (37 samples, 0.03%)</title><rect x="0.0129%" y="821" width="0.0299%" height="15" fill="rgb(206,188,39)" fg:x="16" fg:w="37"/><text x="0.2629%" y="831.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait_timeout (37 samples, 0.03%)</title><rect x="0.0129%" y="805" width="0.0299%" height="15" fill="rgb(217,207,13)" fg:x="16" fg:w="37"/><text x="0.2629%" y="815.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait_optional_timeout (37 samples, 0.03%)</title><rect x="0.0129%" y="789" width="0.0299%" height="15" fill="rgb(231,73,38)" fg:x="16" fg:w="37"/><text x="0.2629%" y="799.50"></text></g><g><title>async-io (52 samples, 0.04%)</title><rect x="0.0016%" y="1125" width="0.0420%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="52"/><text x="0.2516%" y="1135.50"></text></g><g><title>clone (46 samples, 0.04%)</title><rect x="0.0065%" y="1109" width="0.0372%" height="15" fill="rgb(210,31,41)" fg:x="8" fg:w="46"/><text x="0.2565%" y="1119.50"></text></g><g><title>start_thread (46 samples, 0.04%)</title><rect x="0.0065%" y="1093" width="0.0372%" height="15" fill="rgb(221,200,47)" fg:x="8" fg:w="46"/><text x="0.2565%" y="1103.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (46 samples, 0.04%)</title><rect x="0.0065%" y="1077" width="0.0372%" height="15" fill="rgb(226,26,5)" fg:x="8" fg:w="46"/><text x="0.2565%" y="1087.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (46 samples, 0.04%)</title><rect x="0.0065%" y="1061" width="0.0372%" height="15" fill="rgb(249,33,26)" fg:x="8" fg:w="46"/><text x="0.2565%" y="1071.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (46 samples, 0.04%)</title><rect x="0.0065%" y="1045" width="0.0372%" height="15" fill="rgb(235,183,28)" fg:x="8" fg:w="46"/><text x="0.2565%" y="1055.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (46 samples, 0.04%)</title><rect x="0.0065%" y="1029" width="0.0372%" height="15" fill="rgb(221,5,38)" fg:x="8" fg:w="46"/><text x="0.2565%" y="1039.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (46 samples, 0.04%)</title><rect x="0.0065%" y="1013" width="0.0372%" height="15" fill="rgb(247,18,42)" fg:x="8" fg:w="46"/><text x="0.2565%" y="1023.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (46 samples, 0.04%)</title><rect x="0.0477%" y="1109" width="0.0372%" height="15" fill="rgb(241,131,45)" fg:x="59" fg:w="46"/><text x="0.2977%" y="1119.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (21 samples, 0.02%)</title><rect x="0.0857%" y="1109" width="0.0170%" height="15" fill="rgb(249,31,29)" fg:x="106" fg:w="21"/><text x="0.3357%" y="1119.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (18 samples, 0.01%)</title><rect x="0.1026%" y="1109" width="0.0145%" height="15" fill="rgb(225,111,53)" fg:x="127" fg:w="18"/><text x="0.3526%" y="1119.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (27 samples, 0.02%)</title><rect x="0.1172%" y="1109" width="0.0218%" height="15" fill="rgb(238,160,17)" fg:x="145" fg:w="27"/><text x="0.3672%" y="1119.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (43 samples, 0.03%)</title><rect x="0.1390%" y="1109" width="0.0347%" height="15" fill="rgb(214,148,48)" fg:x="172" fg:w="43"/><text x="0.3890%" y="1119.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (15 samples, 0.01%)</title><rect x="0.1891%" y="1109" width="0.0121%" height="15" fill="rgb(232,36,49)" fg:x="234" fg:w="15"/><text x="0.4391%" y="1119.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (33 samples, 0.03%)</title><rect x="0.2311%" y="1077" width="0.0267%" height="15" fill="rgb(209,103,24)" fg:x="286" fg:w="33"/><text x="0.4811%" y="1087.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (20 samples, 0.02%)</title><rect x="0.2675%" y="1029" width="0.0162%" height="15" fill="rgb(229,88,8)" fg:x="331" fg:w="20"/><text x="0.5175%" y="1039.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (20 samples, 0.02%)</title><rect x="0.2675%" y="1013" width="0.0162%" height="15" fill="rgb(213,181,19)" fg:x="331" fg:w="20"/><text x="0.5175%" y="1023.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (23 samples, 0.02%)</title><rect x="0.2836%" y="1029" width="0.0186%" height="15" fill="rgb(254,191,54)" fg:x="351" fg:w="23"/><text x="0.5336%" y="1039.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (144 samples, 0.12%)</title><rect x="0.2012%" y="1093" width="0.1164%" height="15" fill="rgb(241,83,37)" fg:x="249" fg:w="144"/><text x="0.4512%" y="1103.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (74 samples, 0.06%)</title><rect x="0.2578%" y="1077" width="0.0598%" height="15" fill="rgb(233,36,39)" fg:x="319" fg:w="74"/><text x="0.5078%" y="1087.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (74 samples, 0.06%)</title><rect x="0.2578%" y="1061" width="0.0598%" height="15" fill="rgb(226,3,54)" fg:x="319" fg:w="74"/><text x="0.5078%" y="1071.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (74 samples, 0.06%)</title><rect x="0.2578%" y="1045" width="0.0598%" height="15" fill="rgb(245,192,40)" fg:x="319" fg:w="74"/><text x="0.5078%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (19 samples, 0.02%)</title><rect x="0.3022%" y="1029" width="0.0154%" height="15" fill="rgb(238,167,29)" fg:x="374" fg:w="19"/><text x="0.5522%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (19 samples, 0.02%)</title><rect x="0.3022%" y="1013" width="0.0154%" height="15" fill="rgb(232,182,51)" fg:x="374" fg:w="19"/><text x="0.5522%" y="1023.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.02%)</title><rect x="0.3022%" y="997" width="0.0154%" height="15" fill="rgb(231,60,39)" fg:x="374" fg:w="19"/><text x="0.5522%" y="1007.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (72 samples, 0.06%)</title><rect x="0.3176%" y="1093" width="0.0582%" height="15" fill="rgb(208,69,12)" fg:x="393" fg:w="72"/><text x="0.5676%" y="1103.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (35 samples, 0.03%)</title><rect x="0.3838%" y="1077" width="0.0283%" height="15" fill="rgb(235,93,37)" fg:x="475" fg:w="35"/><text x="0.6338%" y="1087.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::size_hint (35 samples, 0.03%)</title><rect x="0.3838%" y="1061" width="0.0283%" height="15" fill="rgb(213,116,39)" fg:x="475" fg:w="35"/><text x="0.6338%" y="1071.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (35 samples, 0.03%)</title><rect x="0.3838%" y="1045" width="0.0283%" height="15" fill="rgb(222,207,29)" fg:x="475" fg:w="35"/><text x="0.6338%" y="1055.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (35 samples, 0.03%)</title><rect x="0.3838%" y="1029" width="0.0283%" height="15" fill="rgb(206,96,30)" fg:x="475" fg:w="35"/><text x="0.6338%" y="1039.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (59 samples, 0.05%)</title><rect x="0.3758%" y="1093" width="0.0477%" height="15" fill="rgb(218,138,4)" fg:x="465" fg:w="59"/><text x="0.6258%" y="1103.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (14 samples, 0.01%)</title><rect x="0.4121%" y="1077" width="0.0113%" height="15" fill="rgb(250,191,14)" fg:x="510" fg:w="14"/><text x="0.6621%" y="1087.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.02%)</title><rect x="0.4291%" y="1093" width="0.0162%" height="15" fill="rgb(239,60,40)" fg:x="531" fg:w="20"/><text x="0.6791%" y="1103.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (220 samples, 0.18%)</title><rect x="0.4549%" y="1093" width="0.1778%" height="15" fill="rgb(206,27,48)" fg:x="563" fg:w="220"/><text x="0.7049%" y="1103.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (27 samples, 0.02%)</title><rect x="0.6109%" y="1077" width="0.0218%" height="15" fill="rgb(225,35,8)" fg:x="756" fg:w="27"/><text x="0.8609%" y="1087.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (55 samples, 0.04%)</title><rect x="0.6327%" y="1093" width="0.0444%" height="15" fill="rgb(250,213,24)" fg:x="783" fg:w="55"/><text x="0.8827%" y="1103.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (26 samples, 0.02%)</title><rect x="0.7313%" y="1077" width="0.0210%" height="15" fill="rgb(247,123,22)" fg:x="905" fg:w="26"/><text x="0.9813%" y="1087.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (15 samples, 0.01%)</title><rect x="0.7402%" y="1061" width="0.0121%" height="15" fill="rgb(231,138,38)" fg:x="916" fg:w="15"/><text x="0.9902%" y="1071.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (104 samples, 0.08%)</title><rect x="0.6772%" y="1093" width="0.0840%" height="15" fill="rgb(231,145,46)" fg:x="838" fg:w="104"/><text x="0.9272%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="1.0311%" y="1061" width="0.0105%" height="15" fill="rgb(251,118,11)" fg:x="1276" fg:w="13"/><text x="1.2811%" y="1071.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (13 samples, 0.01%)</title><rect x="1.0311%" y="1045" width="0.0105%" height="15" fill="rgb(217,147,25)" fg:x="1276" fg:w="13"/><text x="1.2811%" y="1055.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (74 samples, 0.06%)</title><rect x="0.9899%" y="1077" width="0.0598%" height="15" fill="rgb(247,81,37)" fg:x="1225" fg:w="74"/><text x="1.2399%" y="1087.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (22 samples, 0.02%)</title><rect x="1.0497%" y="1061" width="0.0178%" height="15" fill="rgb(209,12,38)" fg:x="1299" fg:w="22"/><text x="1.2997%" y="1071.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (16 samples, 0.01%)</title><rect x="1.0545%" y="1045" width="0.0129%" height="15" fill="rgb(227,1,9)" fg:x="1305" fg:w="16"/><text x="1.3045%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (16 samples, 0.01%)</title><rect x="1.0545%" y="1029" width="0.0129%" height="15" fill="rgb(248,47,43)" fg:x="1305" fg:w="16"/><text x="1.3045%" y="1039.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (16 samples, 0.01%)</title><rect x="1.0545%" y="1013" width="0.0129%" height="15" fill="rgb(221,10,30)" fg:x="1305" fg:w="16"/><text x="1.3045%" y="1023.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (16 samples, 0.01%)</title><rect x="1.0545%" y="997" width="0.0129%" height="15" fill="rgb(210,229,1)" fg:x="1305" fg:w="16"/><text x="1.3045%" y="1007.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (16 samples, 0.01%)</title><rect x="1.0545%" y="981" width="0.0129%" height="15" fill="rgb(222,148,37)" fg:x="1305" fg:w="16"/><text x="1.3045%" y="991.50"></text></g><g><title>alloc::slice::hack::to_vec (16 samples, 0.01%)</title><rect x="1.0545%" y="965" width="0.0129%" height="15" fill="rgb(234,67,33)" fg:x="1305" fg:w="16"/><text x="1.3045%" y="975.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (16 samples, 0.01%)</title><rect x="1.0545%" y="949" width="0.0129%" height="15" fill="rgb(247,98,35)" fg:x="1305" fg:w="16"/><text x="1.3045%" y="959.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (32 samples, 0.03%)</title><rect x="1.0497%" y="1077" width="0.0259%" height="15" fill="rgb(247,138,52)" fg:x="1299" fg:w="32"/><text x="1.2997%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (47 samples, 0.04%)</title><rect x="1.0836%" y="1045" width="0.0380%" height="15" fill="rgb(213,79,30)" fg:x="1341" fg:w="47"/><text x="1.3336%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (47 samples, 0.04%)</title><rect x="1.0836%" y="1029" width="0.0380%" height="15" fill="rgb(246,177,23)" fg:x="1341" fg:w="47"/><text x="1.3336%" y="1039.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (47 samples, 0.04%)</title><rect x="1.0836%" y="1013" width="0.0380%" height="15" fill="rgb(230,62,27)" fg:x="1341" fg:w="47"/><text x="1.3336%" y="1023.50"></text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (52 samples, 0.04%)</title><rect x="1.0836%" y="1077" width="0.0420%" height="15" fill="rgb(216,154,8)" fg:x="1341" fg:w="52"/><text x="1.3336%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (52 samples, 0.04%)</title><rect x="1.0836%" y="1061" width="0.0420%" height="15" fill="rgb(244,35,45)" fg:x="1341" fg:w="52"/><text x="1.3336%" y="1071.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (34 samples, 0.03%)</title><rect x="1.1256%" y="1077" width="0.0275%" height="15" fill="rgb(251,115,12)" fg:x="1393" fg:w="34"/><text x="1.3756%" y="1087.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (42 samples, 0.03%)</title><rect x="1.1531%" y="1077" width="0.0339%" height="15" fill="rgb(240,54,50)" fg:x="1427" fg:w="42"/><text x="1.4031%" y="1087.50"></text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (24 samples, 0.02%)</title><rect x="1.1903%" y="1077" width="0.0194%" height="15" fill="rgb(233,84,52)" fg:x="1473" fg:w="24"/><text x="1.4403%" y="1087.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (618 samples, 0.50%)</title><rect x="0.7612%" y="1093" width="0.4994%" height="15" fill="rgb(207,117,47)" fg:x="942" fg:w="618"/><text x="1.0112%" y="1103.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (63 samples, 0.05%)</title><rect x="1.2097%" y="1077" width="0.0509%" height="15" fill="rgb(249,43,39)" fg:x="1497" fg:w="63"/><text x="1.4597%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (14 samples, 0.01%)</title><rect x="1.2493%" y="1061" width="0.0113%" height="15" fill="rgb(209,38,44)" fg:x="1546" fg:w="14"/><text x="1.4993%" y="1071.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (85 samples, 0.07%)</title><rect x="1.2606%" y="1093" width="0.0687%" height="15" fill="rgb(236,212,23)" fg:x="1560" fg:w="85"/><text x="1.5106%" y="1103.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (30 samples, 0.02%)</title><rect x="1.3333%" y="1093" width="0.0242%" height="15" fill="rgb(242,79,21)" fg:x="1650" fg:w="30"/><text x="1.5833%" y="1103.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (24 samples, 0.02%)</title><rect x="1.3576%" y="1093" width="0.0194%" height="15" fill="rgb(211,96,35)" fg:x="1680" fg:w="24"/><text x="1.6076%" y="1103.50"></text></g><g><title>&lt;tremor_runtime::codec::binary::Binary as tremor_runtime::codec::Codec&gt;::encode (35 samples, 0.03%)</title><rect x="1.3786%" y="1093" width="0.0283%" height="15" fill="rgb(253,215,40)" fg:x="1706" fg:w="35"/><text x="1.6286%" y="1103.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (117 samples, 0.09%)</title><rect x="1.4069%" y="1093" width="0.0945%" height="15" fill="rgb(211,81,21)" fg:x="1741" fg:w="117"/><text x="1.6569%" y="1103.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (70 samples, 0.06%)</title><rect x="1.4448%" y="1077" width="0.0566%" height="15" fill="rgb(208,190,38)" fg:x="1788" fg:w="70"/><text x="1.6948%" y="1087.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (51 samples, 0.04%)</title><rect x="1.4602%" y="1061" width="0.0412%" height="15" fill="rgb(235,213,38)" fg:x="1807" fg:w="51"/><text x="1.7102%" y="1071.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (13 samples, 0.01%)</title><rect x="1.4909%" y="1045" width="0.0105%" height="15" fill="rgb(237,122,38)" fg:x="1845" fg:w="13"/><text x="1.7409%" y="1055.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (29 samples, 0.02%)</title><rect x="1.5014%" y="1093" width="0.0234%" height="15" fill="rgb(244,218,35)" fg:x="1858" fg:w="29"/><text x="1.7514%" y="1103.50"></text></g><g><title>value_trait::Builder::object (22 samples, 0.02%)</title><rect x="1.5071%" y="1077" width="0.0178%" height="15" fill="rgb(240,68,47)" fg:x="1865" fg:w="22"/><text x="1.7571%" y="1087.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (22 samples, 0.02%)</title><rect x="1.5071%" y="1061" width="0.0178%" height="15" fill="rgb(210,16,53)" fg:x="1865" fg:w="22"/><text x="1.7571%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (22 samples, 0.02%)</title><rect x="1.5071%" y="1045" width="0.0178%" height="15" fill="rgb(235,124,12)" fg:x="1865" fg:w="22"/><text x="1.7571%" y="1055.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (31 samples, 0.03%)</title><rect x="1.5248%" y="1093" width="0.0251%" height="15" fill="rgb(224,169,11)" fg:x="1887" fg:w="31"/><text x="1.7748%" y="1103.50"></text></g><g><title>[[vdso]] (21 samples, 0.02%)</title><rect x="1.5499%" y="1093" width="0.0170%" height="15" fill="rgb(250,166,2)" fg:x="1918" fg:w="21"/><text x="1.7999%" y="1103.50"></text></g><g><title>[libc-2.31.so] (78 samples, 0.06%)</title><rect x="1.5669%" y="1093" width="0.0630%" height="15" fill="rgb(242,216,29)" fg:x="1939" fg:w="78"/><text x="1.8169%" y="1103.50"></text></g><g><title>__clock_gettime (48 samples, 0.04%)</title><rect x="1.6299%" y="1093" width="0.0388%" height="15" fill="rgb(230,116,27)" fg:x="2017" fg:w="48"/><text x="1.8799%" y="1103.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (41 samples, 0.03%)</title><rect x="1.6759%" y="1093" width="0.0331%" height="15" fill="rgb(228,99,48)" fg:x="2074" fg:w="41"/><text x="1.9259%" y="1103.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (15 samples, 0.01%)</title><rect x="1.6970%" y="1077" width="0.0121%" height="15" fill="rgb(253,11,6)" fg:x="2100" fg:w="15"/><text x="1.9470%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="1.6970%" y="1061" width="0.0121%" height="15" fill="rgb(247,143,39)" fg:x="2100" fg:w="15"/><text x="1.9470%" y="1071.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (15 samples, 0.01%)</title><rect x="1.6970%" y="1045" width="0.0121%" height="15" fill="rgb(236,97,10)" fg:x="2100" fg:w="15"/><text x="1.9470%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (19 samples, 0.02%)</title><rect x="1.7810%" y="1077" width="0.0154%" height="15" fill="rgb(233,208,19)" fg:x="2204" fg:w="19"/><text x="2.0310%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (19 samples, 0.02%)</title><rect x="1.7810%" y="1061" width="0.0154%" height="15" fill="rgb(216,164,2)" fg:x="2204" fg:w="19"/><text x="2.0310%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (37 samples, 0.03%)</title><rect x="1.7963%" y="1077" width="0.0299%" height="15" fill="rgb(220,129,5)" fg:x="2223" fg:w="37"/><text x="2.0463%" y="1087.50"></text></g><g><title>alloc::alloc::box_free (37 samples, 0.03%)</title><rect x="1.7963%" y="1061" width="0.0299%" height="15" fill="rgb(242,17,10)" fg:x="2223" fg:w="37"/><text x="2.0463%" y="1071.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (37 samples, 0.03%)</title><rect x="1.7963%" y="1045" width="0.0299%" height="15" fill="rgb(242,107,0)" fg:x="2223" fg:w="37"/><text x="2.0463%" y="1055.50"></text></g><g><title>alloc::alloc::dealloc (37 samples, 0.03%)</title><rect x="1.7963%" y="1029" width="0.0299%" height="15" fill="rgb(251,28,31)" fg:x="2223" fg:w="37"/><text x="2.0463%" y="1039.50"></text></g><g><title>__rg_dealloc (37 samples, 0.03%)</title><rect x="1.7963%" y="1013" width="0.0299%" height="15" fill="rgb(233,223,10)" fg:x="2223" fg:w="37"/><text x="2.0463%" y="1023.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (37 samples, 0.03%)</title><rect x="1.7963%" y="997" width="0.0299%" height="15" fill="rgb(215,21,27)" fg:x="2223" fg:w="37"/><text x="2.0463%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (33 samples, 0.03%)</title><rect x="1.8262%" y="1077" width="0.0267%" height="15" fill="rgb(232,23,21)" fg:x="2260" fg:w="33"/><text x="2.0762%" y="1087.50"></text></g><g><title>alloc::alloc::box_free (33 samples, 0.03%)</title><rect x="1.8262%" y="1061" width="0.0267%" height="15" fill="rgb(244,5,23)" fg:x="2260" fg:w="33"/><text x="2.0762%" y="1071.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (33 samples, 0.03%)</title><rect x="1.8262%" y="1045" width="0.0267%" height="15" fill="rgb(226,81,46)" fg:x="2260" fg:w="33"/><text x="2.0762%" y="1055.50"></text></g><g><title>alloc::alloc::dealloc (33 samples, 0.03%)</title><rect x="1.8262%" y="1029" width="0.0267%" height="15" fill="rgb(247,70,30)" fg:x="2260" fg:w="33"/><text x="2.0762%" y="1039.50"></text></g><g><title>__rg_dealloc (33 samples, 0.03%)</title><rect x="1.8262%" y="1013" width="0.0267%" height="15" fill="rgb(212,68,19)" fg:x="2260" fg:w="33"/><text x="2.0762%" y="1023.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (33 samples, 0.03%)</title><rect x="1.8262%" y="997" width="0.0267%" height="15" fill="rgb(240,187,13)" fg:x="2260" fg:w="33"/><text x="2.0762%" y="1007.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (178 samples, 0.14%)</title><rect x="1.7188%" y="1093" width="0.1438%" height="15" fill="rgb(223,113,26)" fg:x="2127" fg:w="178"/><text x="1.9688%" y="1103.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (117 samples, 0.09%)</title><rect x="1.8626%" y="1093" width="0.0945%" height="15" fill="rgb(206,192,2)" fg:x="2305" fg:w="117"/><text x="2.1126%" y="1103.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (27 samples, 0.02%)</title><rect x="1.9353%" y="1077" width="0.0218%" height="15" fill="rgb(241,108,4)" fg:x="2395" fg:w="27"/><text x="2.1853%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (27 samples, 0.02%)</title><rect x="1.9353%" y="1061" width="0.0218%" height="15" fill="rgb(247,173,49)" fg:x="2395" fg:w="27"/><text x="2.1853%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (27 samples, 0.02%)</title><rect x="1.9353%" y="1045" width="0.0218%" height="15" fill="rgb(224,114,35)" fg:x="2395" fg:w="27"/><text x="2.1853%" y="1055.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (27 samples, 0.02%)</title><rect x="1.9353%" y="1029" width="0.0218%" height="15" fill="rgb(245,159,27)" fg:x="2395" fg:w="27"/><text x="2.1853%" y="1039.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (27 samples, 0.02%)</title><rect x="1.9353%" y="1013" width="0.0218%" height="15" fill="rgb(245,172,44)" fg:x="2395" fg:w="27"/><text x="2.1853%" y="1023.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (27 samples, 0.02%)</title><rect x="1.9353%" y="997" width="0.0218%" height="15" fill="rgb(236,23,11)" fg:x="2395" fg:w="27"/><text x="2.1853%" y="1007.50"></text></g><g><title>alloc::alloc::exchange_malloc (27 samples, 0.02%)</title><rect x="1.9353%" y="981" width="0.0218%" height="15" fill="rgb(205,117,38)" fg:x="2395" fg:w="27"/><text x="2.1853%" y="991.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (27 samples, 0.02%)</title><rect x="1.9353%" y="965" width="0.0218%" height="15" fill="rgb(237,72,25)" fg:x="2395" fg:w="27"/><text x="2.1853%" y="975.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (27 samples, 0.02%)</title><rect x="1.9353%" y="949" width="0.0218%" height="15" fill="rgb(244,70,9)" fg:x="2395" fg:w="27"/><text x="2.1853%" y="959.50"></text></g><g><title>alloc::alloc::alloc (27 samples, 0.02%)</title><rect x="1.9353%" y="933" width="0.0218%" height="15" fill="rgb(217,125,39)" fg:x="2395" fg:w="27"/><text x="2.1853%" y="943.50"></text></g><g><title>__rg_alloc (27 samples, 0.02%)</title><rect x="1.9353%" y="917" width="0.0218%" height="15" fill="rgb(235,36,10)" fg:x="2395" fg:w="27"/><text x="2.1853%" y="927.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (27 samples, 0.02%)</title><rect x="1.9353%" y="901" width="0.0218%" height="15" fill="rgb(251,123,47)" fg:x="2395" fg:w="27"/><text x="2.1853%" y="911.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (52 samples, 0.04%)</title><rect x="1.9572%" y="1093" width="0.0420%" height="15" fill="rgb(221,13,13)" fg:x="2422" fg:w="52"/><text x="2.2072%" y="1103.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val (20 samples, 0.02%)</title><rect x="1.9830%" y="1077" width="0.0162%" height="15" fill="rgb(238,131,9)" fg:x="2454" fg:w="20"/><text x="2.2330%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val::{{closure}} (20 samples, 0.02%)</title><rect x="1.9830%" y="1061" width="0.0162%" height="15" fill="rgb(211,50,8)" fg:x="2454" fg:w="20"/><text x="2.2330%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val::{{closure}} (20 samples, 0.02%)</title><rect x="1.9830%" y="1045" width="0.0162%" height="15" fill="rgb(245,182,24)" fg:x="2454" fg:w="20"/><text x="2.2330%" y="1055.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (18 samples, 0.01%)</title><rect x="1.9846%" y="1029" width="0.0145%" height="15" fill="rgb(242,14,37)" fg:x="2456" fg:w="18"/><text x="2.2346%" y="1039.50"></text></g><g><title>core::ops::function::FnOnce::call_once (18 samples, 0.01%)</title><rect x="1.9846%" y="1013" width="0.0145%" height="15" fill="rgb(246,228,12)" fg:x="2456" fg:w="18"/><text x="2.2346%" y="1023.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::into_inner (18 samples, 0.01%)</title><rect x="1.9846%" y="997" width="0.0145%" height="15" fill="rgb(213,55,15)" fg:x="2456" fg:w="18"/><text x="2.2346%" y="1007.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::pointer_trait::OwnedPointer for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop_allocation (18 samples, 0.01%)</title><rect x="1.9846%" y="981" width="0.0145%" height="15" fill="rgb(209,9,3)" fg:x="2456" fg:w="18"/><text x="2.2346%" y="991.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (58 samples, 0.05%)</title><rect x="1.9992%" y="1093" width="0.0469%" height="15" fill="rgb(230,59,30)" fg:x="2474" fg:w="58"/><text x="2.2492%" y="1103.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (34 samples, 0.03%)</title><rect x="2.0460%" y="1093" width="0.0275%" height="15" fill="rgb(209,121,21)" fg:x="2532" fg:w="34"/><text x="2.2960%" y="1103.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (114 samples, 0.09%)</title><rect x="2.1519%" y="1029" width="0.0921%" height="15" fill="rgb(220,109,13)" fg:x="2663" fg:w="114"/><text x="2.4019%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (114 samples, 0.09%)</title><rect x="2.1519%" y="1013" width="0.0921%" height="15" fill="rgb(232,18,1)" fg:x="2663" fg:w="114"/><text x="2.4019%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (114 samples, 0.09%)</title><rect x="2.1519%" y="997" width="0.0921%" height="15" fill="rgb(215,41,42)" fg:x="2663" fg:w="114"/><text x="2.4019%" y="1007.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (114 samples, 0.09%)</title><rect x="2.1519%" y="981" width="0.0921%" height="15" fill="rgb(224,123,36)" fg:x="2663" fg:w="114"/><text x="2.4019%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (125 samples, 0.10%)</title><rect x="2.1519%" y="1045" width="0.1010%" height="15" fill="rgb(240,125,3)" fg:x="2663" fg:w="125"/><text x="2.4019%" y="1055.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (66 samples, 0.05%)</title><rect x="2.2529%" y="1029" width="0.0533%" height="15" fill="rgb(205,98,50)" fg:x="2788" fg:w="66"/><text x="2.5029%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (66 samples, 0.05%)</title><rect x="2.2529%" y="1013" width="0.0533%" height="15" fill="rgb(205,185,37)" fg:x="2788" fg:w="66"/><text x="2.5029%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (66 samples, 0.05%)</title><rect x="2.2529%" y="997" width="0.0533%" height="15" fill="rgb(238,207,15)" fg:x="2788" fg:w="66"/><text x="2.5029%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (66 samples, 0.05%)</title><rect x="2.2529%" y="981" width="0.0533%" height="15" fill="rgb(213,199,42)" fg:x="2788" fg:w="66"/><text x="2.5029%" y="991.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (66 samples, 0.05%)</title><rect x="2.2529%" y="965" width="0.0533%" height="15" fill="rgb(235,201,11)" fg:x="2788" fg:w="66"/><text x="2.5029%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (83 samples, 0.07%)</title><rect x="2.2529%" y="1045" width="0.0671%" height="15" fill="rgb(207,46,11)" fg:x="2788" fg:w="83"/><text x="2.5029%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::string::RString&gt;&gt; (17 samples, 0.01%)</title><rect x="2.3062%" y="1029" width="0.0137%" height="15" fill="rgb(241,35,35)" fg:x="2854" fg:w="17"/><text x="2.5562%" y="1039.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.01%)</title><rect x="2.3062%" y="1013" width="0.0137%" height="15" fill="rgb(243,32,47)" fg:x="2854" fg:w="17"/><text x="2.5562%" y="1023.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (17 samples, 0.01%)</title><rect x="2.3062%" y="997" width="0.0137%" height="15" fill="rgb(247,202,23)" fg:x="2854" fg:w="17"/><text x="2.5562%" y="1007.50"></text></g><g><title>alloc::alloc::dealloc (17 samples, 0.01%)</title><rect x="2.3062%" y="981" width="0.0137%" height="15" fill="rgb(219,102,11)" fg:x="2854" fg:w="17"/><text x="2.5562%" y="991.50"></text></g><g><title>__rg_dealloc (17 samples, 0.01%)</title><rect x="2.3062%" y="965" width="0.0137%" height="15" fill="rgb(243,110,44)" fg:x="2854" fg:w="17"/><text x="2.5562%" y="975.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (17 samples, 0.01%)</title><rect x="2.3062%" y="949" width="0.0137%" height="15" fill="rgb(222,74,54)" fg:x="2854" fg:w="17"/><text x="2.5562%" y="959.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (297 samples, 0.24%)</title><rect x="2.0832%" y="1093" width="0.2400%" height="15" fill="rgb(216,99,12)" fg:x="2578" fg:w="297"/><text x="2.3332%" y="1103.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (212 samples, 0.17%)</title><rect x="2.1519%" y="1077" width="0.1713%" height="15" fill="rgb(226,22,26)" fg:x="2663" fg:w="212"/><text x="2.4019%" y="1087.50"></text></g><g><title>core::mem::drop (212 samples, 0.17%)</title><rect x="2.1519%" y="1061" width="0.1713%" height="15" fill="rgb(217,163,10)" fg:x="2663" fg:w="212"/><text x="2.4019%" y="1071.50"></text></g><g><title>async_executor::State::notify (17 samples, 0.01%)</title><rect x="2.3370%" y="1093" width="0.0137%" height="15" fill="rgb(213,25,53)" fg:x="2892" fg:w="17"/><text x="2.5870%" y="1103.50"></text></g><g><title>async_executor::Ticker::sleep (14 samples, 0.01%)</title><rect x="2.3507%" y="1093" width="0.0113%" height="15" fill="rgb(252,105,26)" fg:x="2909" fg:w="14"/><text x="2.6007%" y="1103.50"></text></g><g><title>async_executor::Ticker::wake (32 samples, 0.03%)</title><rect x="2.3620%" y="1093" width="0.0259%" height="15" fill="rgb(220,39,43)" fg:x="2923" fg:w="32"/><text x="2.6120%" y="1103.50"></text></g><g><title>async_executor::steal (216 samples, 0.17%)</title><rect x="2.3879%" y="1093" width="0.1745%" height="15" fill="rgb(229,68,48)" fg:x="2955" fg:w="216"/><text x="2.6379%" y="1103.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (33 samples, 0.03%)</title><rect x="2.5713%" y="1093" width="0.0267%" height="15" fill="rgb(252,8,32)" fg:x="3182" fg:w="33"/><text x="2.8213%" y="1103.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (398 samples, 0.32%)</title><rect x="2.6270%" y="1093" width="0.3216%" height="15" fill="rgb(223,20,43)" fg:x="3251" fg:w="398"/><text x="2.8770%" y="1103.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (17 samples, 0.01%)</title><rect x="2.9349%" y="1077" width="0.0137%" height="15" fill="rgb(229,81,49)" fg:x="3632" fg:w="17"/><text x="3.1849%" y="1087.50"></text></g><g><title>core::ptr::read (17 samples, 0.01%)</title><rect x="2.9349%" y="1061" width="0.0137%" height="15" fill="rgb(236,28,36)" fg:x="3632" fg:w="17"/><text x="3.1849%" y="1071.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (44 samples, 0.04%)</title><rect x="2.9487%" y="1093" width="0.0356%" height="15" fill="rgb(249,185,26)" fg:x="3649" fg:w="44"/><text x="3.1987%" y="1103.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (69 samples, 0.06%)</title><rect x="2.9842%" y="1093" width="0.0558%" height="15" fill="rgb(249,174,33)" fg:x="3693" fg:w="69"/><text x="3.2342%" y="1103.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (35 samples, 0.03%)</title><rect x="3.0472%" y="1093" width="0.0283%" height="15" fill="rgb(233,201,37)" fg:x="3771" fg:w="35"/><text x="3.2972%" y="1103.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (24 samples, 0.02%)</title><rect x="3.0561%" y="1077" width="0.0194%" height="15" fill="rgb(221,78,26)" fg:x="3782" fg:w="24"/><text x="3.3061%" y="1087.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (23 samples, 0.02%)</title><rect x="3.0569%" y="1061" width="0.0186%" height="15" fill="rgb(250,127,30)" fg:x="3783" fg:w="23"/><text x="3.3069%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}}&gt;&gt; (20 samples, 0.02%)</title><rect x="3.0852%" y="1093" width="0.0162%" height="15" fill="rgb(230,49,44)" fg:x="3818" fg:w="20"/><text x="3.3352%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::route_events::{{closure}}&gt;&gt; (23 samples, 0.02%)</title><rect x="3.1022%" y="1093" width="0.0186%" height="15" fill="rgb(229,67,23)" fg:x="3839" fg:w="23"/><text x="3.3522%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::OutputTarget::send_event::{{closure}}&gt;&gt; (24 samples, 0.02%)</title><rect x="3.1208%" y="1093" width="0.0194%" height="15" fill="rgb(249,83,47)" fg:x="3862" fg:w="24"/><text x="3.3708%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt;&gt; (27 samples, 0.02%)</title><rect x="3.1402%" y="1093" width="0.0218%" height="15" fill="rgb(215,43,3)" fg:x="3886" fg:w="27"/><text x="3.3902%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt; (27 samples, 0.02%)</title><rect x="3.1402%" y="1077" width="0.0218%" height="15" fill="rgb(238,154,13)" fg:x="3886" fg:w="27"/><text x="3.3902%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;tremor_runtime::connectors::sink::SinkMsgWrapper&gt;&gt; (15 samples, 0.01%)</title><rect x="3.1668%" y="1093" width="0.0121%" height="15" fill="rgb(219,56,2)" fg:x="3919" fg:w="15"/><text x="3.4168%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (34 samples, 0.03%)</title><rect x="3.1862%" y="1093" width="0.0275%" height="15" fill="rgb(233,0,4)" fg:x="3943" fg:w="34"/><text x="3.4362%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (21 samples, 0.02%)</title><rect x="3.2250%" y="1077" width="0.0170%" height="15" fill="rgb(235,30,7)" fg:x="3991" fg:w="21"/><text x="3.4750%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (21 samples, 0.02%)</title><rect x="3.2250%" y="1061" width="0.0170%" height="15" fill="rgb(250,79,13)" fg:x="3991" fg:w="21"/><text x="3.4750%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (76 samples, 0.06%)</title><rect x="3.2137%" y="1093" width="0.0614%" height="15" fill="rgb(211,146,34)" fg:x="3977" fg:w="76"/><text x="3.4637%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (24 samples, 0.02%)</title><rect x="3.2557%" y="1077" width="0.0194%" height="15" fill="rgb(228,22,38)" fg:x="4029" fg:w="24"/><text x="3.5057%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="3.2646%" y="1061" width="0.0105%" height="15" fill="rgb(235,168,5)" fg:x="4040" fg:w="13"/><text x="3.5146%" y="1071.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (13 samples, 0.01%)</title><rect x="3.2646%" y="1045" width="0.0105%" height="15" fill="rgb(221,155,16)" fg:x="4040" fg:w="13"/><text x="3.5146%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (15 samples, 0.01%)</title><rect x="3.2751%" y="1093" width="0.0121%" height="15" fill="rgb(215,215,53)" fg:x="4053" fg:w="15"/><text x="3.5251%" y="1103.50"></text></g><g><title>event_listener::Event::listen (13 samples, 0.01%)</title><rect x="3.2872%" y="1093" width="0.0105%" height="15" fill="rgb(223,4,10)" fg:x="4068" fg:w="13"/><text x="3.5372%" y="1103.50"></text></g><g><title>event_listener::Event::notify (167 samples, 0.13%)</title><rect x="3.2978%" y="1093" width="0.1349%" height="15" fill="rgb(234,103,6)" fg:x="4081" fg:w="167"/><text x="3.5478%" y="1103.50"></text></g><g><title>event_listener::full_fence (84 samples, 0.07%)</title><rect x="3.3648%" y="1077" width="0.0679%" height="15" fill="rgb(227,97,0)" fg:x="4164" fg:w="84"/><text x="3.6148%" y="1087.50"></text></g><g><title>event_listener::List::notify (13 samples, 0.01%)</title><rect x="3.4327%" y="1093" width="0.0105%" height="15" fill="rgb(234,150,53)" fg:x="4248" fg:w="13"/><text x="3.6827%" y="1103.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (31 samples, 0.03%)</title><rect x="3.4432%" y="1093" width="0.0251%" height="15" fill="rgb(228,201,54)" fg:x="4261" fg:w="31"/><text x="3.6932%" y="1103.50"></text></g><g><title>hashbrown::raw::inner::RawIter&lt;T&gt;::drop_elements (19 samples, 0.02%)</title><rect x="3.4683%" y="1093" width="0.0154%" height="15" fill="rgb(222,22,37)" fg:x="4292" fg:w="19"/><text x="3.7183%" y="1103.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (17 samples, 0.01%)</title><rect x="3.4836%" y="1093" width="0.0137%" height="15" fill="rgb(237,53,32)" fg:x="4311" fg:w="17"/><text x="3.7336%" y="1103.50"></text></g><g><title>parking::Unparker::unpark (33 samples, 0.03%)</title><rect x="3.4982%" y="1093" width="0.0267%" height="15" fill="rgb(233,25,53)" fg:x="4329" fg:w="33"/><text x="3.7482%" y="1103.50"></text></g><g><title>sn_rust_alloc (56 samples, 0.05%)</title><rect x="3.5297%" y="1093" width="0.0453%" height="15" fill="rgb(210,40,34)" fg:x="4368" fg:w="56"/><text x="3.7797%" y="1103.50"></text></g><g><title>sn_rust_dealloc (81 samples, 0.07%)</title><rect x="3.5749%" y="1093" width="0.0655%" height="15" fill="rgb(241,220,44)" fg:x="4424" fg:w="81"/><text x="3.8249%" y="1103.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (20 samples, 0.02%)</title><rect x="3.6404%" y="1093" width="0.0162%" height="15" fill="rgb(235,28,35)" fg:x="4505" fg:w="20"/><text x="3.8904%" y="1103.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (15 samples, 0.01%)</title><rect x="3.6565%" y="1093" width="0.0121%" height="15" fill="rgb(210,56,17)" fg:x="4525" fg:w="15"/><text x="3.9065%" y="1103.50"></text></g><g><title>std::sys::unix::futex::futex_wait (13 samples, 0.01%)</title><rect x="3.6695%" y="1093" width="0.0105%" height="15" fill="rgb(224,130,29)" fg:x="4541" fg:w="13"/><text x="3.9195%" y="1103.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (25 samples, 0.02%)</title><rect x="3.6800%" y="1093" width="0.0202%" height="15" fill="rgb(235,212,8)" fg:x="4554" fg:w="25"/><text x="3.9300%" y="1103.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (40 samples, 0.03%)</title><rect x="3.7010%" y="1093" width="0.0323%" height="15" fill="rgb(223,33,50)" fg:x="4580" fg:w="40"/><text x="3.9510%" y="1103.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (37 samples, 0.03%)</title><rect x="3.7333%" y="1093" width="0.0299%" height="15" fill="rgb(219,149,13)" fg:x="4620" fg:w="37"/><text x="3.9833%" y="1103.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (25 samples, 0.02%)</title><rect x="3.7430%" y="1077" width="0.0202%" height="15" fill="rgb(250,156,29)" fg:x="4632" fg:w="25"/><text x="3.9930%" y="1087.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (21 samples, 0.02%)</title><rect x="3.7462%" y="1061" width="0.0170%" height="15" fill="rgb(216,193,19)" fg:x="4636" fg:w="21"/><text x="3.9962%" y="1071.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (21 samples, 0.02%)</title><rect x="3.7462%" y="1045" width="0.0170%" height="15" fill="rgb(216,135,14)" fg:x="4636" fg:w="21"/><text x="3.9962%" y="1055.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (21 samples, 0.02%)</title><rect x="3.7462%" y="1029" width="0.0170%" height="15" fill="rgb(241,47,5)" fg:x="4636" fg:w="21"/><text x="3.9962%" y="1039.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (21 samples, 0.02%)</title><rect x="3.7462%" y="1013" width="0.0170%" height="15" fill="rgb(233,42,35)" fg:x="4636" fg:w="21"/><text x="3.9962%" y="1023.50"></text></g><g><title>syscall (30 samples, 0.02%)</title><rect x="3.7632%" y="1093" width="0.0242%" height="15" fill="rgb(231,13,6)" fg:x="4657" fg:w="30"/><text x="4.0132%" y="1103.50"></text></g><g><title>tremor_common::time::nanotime (32 samples, 0.03%)</title><rect x="3.7874%" y="1093" width="0.0259%" height="15" fill="rgb(207,181,40)" fg:x="4687" fg:w="32"/><text x="4.0374%" y="1103.50"></text></g><g><title>std::time::SystemTime::now (17 samples, 0.01%)</title><rect x="3.7996%" y="1077" width="0.0137%" height="15" fill="rgb(254,173,49)" fg:x="4702" fg:w="17"/><text x="4.0496%" y="1087.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (17 samples, 0.01%)</title><rect x="3.7996%" y="1061" width="0.0137%" height="15" fill="rgb(221,1,38)" fg:x="4702" fg:w="17"/><text x="4.0496%" y="1071.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (17 samples, 0.01%)</title><rect x="3.7996%" y="1045" width="0.0137%" height="15" fill="rgb(206,124,46)" fg:x="4702" fg:w="17"/><text x="4.0496%" y="1055.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (43 samples, 0.03%)</title><rect x="3.8214%" y="1093" width="0.0347%" height="15" fill="rgb(249,21,11)" fg:x="4729" fg:w="43"/><text x="4.0714%" y="1103.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event (20 samples, 0.02%)</title><rect x="3.8400%" y="1077" width="0.0162%" height="15" fill="rgb(222,201,40)" fg:x="4752" fg:w="20"/><text x="4.0900%" y="1087.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (20 samples, 0.02%)</title><rect x="3.8400%" y="1061" width="0.0162%" height="15" fill="rgb(235,61,29)" fg:x="4752" fg:w="20"/><text x="4.0900%" y="1071.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (20 samples, 0.02%)</title><rect x="3.8400%" y="1045" width="0.0162%" height="15" fill="rgb(219,207,3)" fg:x="4752" fg:w="20"/><text x="4.0900%" y="1055.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (20 samples, 0.02%)</title><rect x="3.8400%" y="1029" width="0.0162%" height="15" fill="rgb(222,56,46)" fg:x="4752" fg:w="20"/><text x="4.0900%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (15 samples, 0.01%)</title><rect x="3.9345%" y="1029" width="0.0121%" height="15" fill="rgb(239,76,54)" fg:x="4869" fg:w="15"/><text x="4.1845%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (15 samples, 0.01%)</title><rect x="3.9345%" y="1013" width="0.0121%" height="15" fill="rgb(231,124,27)" fg:x="4869" fg:w="15"/><text x="4.1845%" y="1023.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (15 samples, 0.01%)</title><rect x="3.9345%" y="997" width="0.0121%" height="15" fill="rgb(249,195,6)" fg:x="4869" fg:w="15"/><text x="4.1845%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (22 samples, 0.02%)</title><rect x="3.9345%" y="1045" width="0.0178%" height="15" fill="rgb(237,174,47)" fg:x="4869" fg:w="22"/><text x="4.1845%" y="1055.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (120 samples, 0.10%)</title><rect x="3.8610%" y="1093" width="0.0970%" height="15" fill="rgb(206,201,31)" fg:x="4778" fg:w="120"/><text x="4.1110%" y="1103.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (82 samples, 0.07%)</title><rect x="3.8917%" y="1077" width="0.0663%" height="15" fill="rgb(231,57,52)" fg:x="4816" fg:w="82"/><text x="4.1417%" y="1087.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (74 samples, 0.06%)</title><rect x="3.8982%" y="1061" width="0.0598%" height="15" fill="rgb(248,177,22)" fg:x="4824" fg:w="74"/><text x="4.1482%" y="1071.50"></text></g><g><title>tremor_runtime::connectors::source::Streams::get_or_create_stream (27 samples, 0.02%)</title><rect x="3.9579%" y="1093" width="0.0218%" height="15" fill="rgb(215,211,37)" fg:x="4898" fg:w="27"/><text x="4.2079%" y="1103.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (50 samples, 0.04%)</title><rect x="3.9798%" y="1093" width="0.0404%" height="15" fill="rgb(241,128,51)" fg:x="4925" fg:w="50"/><text x="4.2298%" y="1103.50"></text></g><g><title>tremor_runtime::connectors::utils::metrics::SourceReporter::periodic_flush (19 samples, 0.02%)</title><rect x="4.0202%" y="1093" width="0.0154%" height="15" fill="rgb(227,165,31)" fg:x="4975" fg:w="19"/><text x="4.2702%" y="1103.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (13 samples, 0.01%)</title><rect x="4.0517%" y="1093" width="0.0105%" height="15" fill="rgb(228,167,24)" fg:x="5014" fg:w="13"/><text x="4.3017%" y="1103.50"></text></g><g><title>tremor_script::srs::EventPayload::try_new (42 samples, 0.03%)</title><rect x="4.0622%" y="1093" width="0.0339%" height="15" fill="rgb(228,143,12)" fg:x="5027" fg:w="42"/><text x="4.3122%" y="1103.50"></text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (16 samples, 0.01%)</title><rect x="4.0832%" y="1077" width="0.0129%" height="15" fill="rgb(249,149,8)" fg:x="5053" fg:w="16"/><text x="4.3332%" y="1087.50"></text></g><g><title>[anon] (4,850 samples, 3.92%)</title><rect x="0.2012%" y="1109" width="3.9192%" height="15" fill="rgb(243,35,44)" fg:x="249" fg:w="4850"/><text x="0.4512%" y="1119.50">[ano..</text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (23 samples, 0.02%)</title><rect x="4.1907%" y="1093" width="0.0186%" height="15" fill="rgb(246,89,9)" fg:x="5186" fg:w="23"/><text x="4.4407%" y="1103.50"></text></g><g><title>event_listener::Event::listen (13 samples, 0.01%)</title><rect x="4.2093%" y="1093" width="0.0105%" height="15" fill="rgb(233,213,13)" fg:x="5209" fg:w="13"/><text x="4.4593%" y="1103.50"></text></g><g><title>event_listener::Event::inner (13 samples, 0.01%)</title><rect x="4.2093%" y="1077" width="0.0105%" height="15" fill="rgb(233,141,41)" fg:x="5209" fg:w="13"/><text x="4.4593%" y="1087.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (13 samples, 0.01%)</title><rect x="4.2093%" y="1061" width="0.0105%" height="15" fill="rgb(239,167,4)" fg:x="5209" fg:w="13"/><text x="4.4593%" y="1071.50"></text></g><g><title>core::sync::atomic::atomic_load (13 samples, 0.01%)</title><rect x="4.2093%" y="1045" width="0.0105%" height="15" fill="rgb(209,217,16)" fg:x="5209" fg:w="13"/><text x="4.4593%" y="1055.50"></text></g><g><title>event_listener::Event::notify (16 samples, 0.01%)</title><rect x="4.2198%" y="1093" width="0.0129%" height="15" fill="rgb(219,88,35)" fg:x="5222" fg:w="16"/><text x="4.4698%" y="1103.50"></text></g><g><title>event_listener::full_fence (16 samples, 0.01%)</title><rect x="4.2198%" y="1077" width="0.0129%" height="15" fill="rgb(220,193,23)" fg:x="5222" fg:w="16"/><text x="4.4698%" y="1087.50"></text></g><g><title>[libc-2.31.so] (141 samples, 0.11%)</title><rect x="4.1204%" y="1109" width="0.1139%" height="15" fill="rgb(230,90,52)" fg:x="5099" fg:w="141"/><text x="4.3704%" y="1119.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (16 samples, 0.01%)</title><rect x="4.2343%" y="1093" width="0.0129%" height="15" fill="rgb(252,106,19)" fg:x="5240" fg:w="16"/><text x="4.4843%" y="1103.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (39 samples, 0.03%)</title><rect x="4.2480%" y="1093" width="0.0315%" height="15" fill="rgb(206,74,20)" fg:x="5257" fg:w="39"/><text x="4.4980%" y="1103.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (27 samples, 0.02%)</title><rect x="4.2804%" y="1093" width="0.0218%" height="15" fill="rgb(230,138,44)" fg:x="5297" fg:w="27"/><text x="4.5304%" y="1103.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (25 samples, 0.02%)</title><rect x="4.3200%" y="1093" width="0.0202%" height="15" fill="rgb(235,182,43)" fg:x="5346" fg:w="25"/><text x="4.5700%" y="1103.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (21 samples, 0.02%)</title><rect x="4.3402%" y="1093" width="0.0170%" height="15" fill="rgb(242,16,51)" fg:x="5371" fg:w="21"/><text x="4.5902%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (27 samples, 0.02%)</title><rect x="4.3684%" y="1093" width="0.0218%" height="15" fill="rgb(248,9,4)" fg:x="5406" fg:w="27"/><text x="4.6184%" y="1103.50"></text></g><g><title>hashbrown::raw::inner::RawIter&lt;T&gt;::drop_elements (32 samples, 0.03%)</title><rect x="4.3903%" y="1093" width="0.0259%" height="15" fill="rgb(210,31,22)" fg:x="5433" fg:w="32"/><text x="4.6403%" y="1103.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (16 samples, 0.01%)</title><rect x="4.4161%" y="1093" width="0.0129%" height="15" fill="rgb(239,54,39)" fg:x="5465" fg:w="16"/><text x="4.6661%" y="1103.50"></text></g><g><title>[pdk-halfbrown] (252 samples, 0.20%)</title><rect x="4.2343%" y="1109" width="0.2036%" height="15" fill="rgb(230,99,41)" fg:x="5240" fg:w="252"/><text x="4.4843%" y="1119.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (66 samples, 0.05%)</title><rect x="4.4396%" y="1093" width="0.0533%" height="15" fill="rgb(253,106,12)" fg:x="5494" fg:w="66"/><text x="4.6896%" y="1103.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (18 samples, 0.01%)</title><rect x="4.4783%" y="1077" width="0.0145%" height="15" fill="rgb(213,46,41)" fg:x="5542" fg:w="18"/><text x="4.7283%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (18 samples, 0.01%)</title><rect x="4.4783%" y="1061" width="0.0145%" height="15" fill="rgb(215,133,35)" fg:x="5542" fg:w="18"/><text x="4.7283%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (18 samples, 0.01%)</title><rect x="4.4783%" y="1045" width="0.0145%" height="15" fill="rgb(213,28,5)" fg:x="5542" fg:w="18"/><text x="4.7283%" y="1055.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (18 samples, 0.01%)</title><rect x="4.4783%" y="1029" width="0.0145%" height="15" fill="rgb(215,77,49)" fg:x="5542" fg:w="18"/><text x="4.7283%" y="1039.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (18 samples, 0.01%)</title><rect x="4.4783%" y="1013" width="0.0145%" height="15" fill="rgb(248,100,22)" fg:x="5542" fg:w="18"/><text x="4.7283%" y="1023.50"></text></g><g><title>alloc::alloc::exchange_malloc (18 samples, 0.01%)</title><rect x="4.4783%" y="997" width="0.0145%" height="15" fill="rgb(208,67,9)" fg:x="5542" fg:w="18"/><text x="4.7283%" y="1007.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (18 samples, 0.01%)</title><rect x="4.4783%" y="981" width="0.0145%" height="15" fill="rgb(219,133,21)" fg:x="5542" fg:w="18"/><text x="4.7283%" y="991.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (18 samples, 0.01%)</title><rect x="4.4783%" y="965" width="0.0145%" height="15" fill="rgb(246,46,29)" fg:x="5542" fg:w="18"/><text x="4.7283%" y="975.50"></text></g><g><title>alloc::alloc::alloc (18 samples, 0.01%)</title><rect x="4.4783%" y="949" width="0.0145%" height="15" fill="rgb(246,185,52)" fg:x="5542" fg:w="18"/><text x="4.7283%" y="959.50"></text></g><g><title>__rg_alloc (18 samples, 0.01%)</title><rect x="4.4783%" y="933" width="0.0145%" height="15" fill="rgb(252,136,11)" fg:x="5542" fg:w="18"/><text x="4.7283%" y="943.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (18 samples, 0.01%)</title><rect x="4.4783%" y="917" width="0.0145%" height="15" fill="rgb(219,138,53)" fg:x="5542" fg:w="18"/><text x="4.7283%" y="927.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (51 samples, 0.04%)</title><rect x="4.4994%" y="1093" width="0.0412%" height="15" fill="rgb(211,51,23)" fg:x="5568" fg:w="51"/><text x="4.7494%" y="1103.50"></text></g><g><title>[libc-2.31.so] (168 samples, 0.14%)</title><rect x="4.6432%" y="837" width="0.1358%" height="15" fill="rgb(247,221,28)" fg:x="5746" fg:w="168"/><text x="4.8932%" y="847.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (23 samples, 0.02%)</title><rect x="4.9438%" y="821" width="0.0186%" height="15" fill="rgb(251,222,45)" fg:x="6118" fg:w="23"/><text x="5.1938%" y="831.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (14 samples, 0.01%)</title><rect x="4.9624%" y="821" width="0.0113%" height="15" fill="rgb(217,162,53)" fg:x="6141" fg:w="14"/><text x="5.2124%" y="831.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 0.03%)</title><rect x="4.9794%" y="805" width="0.0299%" height="15" fill="rgb(229,93,14)" fg:x="6162" fg:w="37"/><text x="5.2294%" y="815.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (297 samples, 0.24%)</title><rect x="4.9794%" y="821" width="0.2400%" height="15" fill="rgb(209,67,49)" fg:x="6162" fg:w="297"/><text x="5.2294%" y="831.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (260 samples, 0.21%)</title><rect x="5.0093%" y="805" width="0.2101%" height="15" fill="rgb(213,87,29)" fg:x="6199" fg:w="260"/><text x="5.2593%" y="815.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (257 samples, 0.21%)</title><rect x="5.0117%" y="789" width="0.2077%" height="15" fill="rgb(205,151,52)" fg:x="6202" fg:w="257"/><text x="5.2617%" y="799.50"></text></g><g><title>core::ptr::read (257 samples, 0.21%)</title><rect x="5.0117%" y="773" width="0.2077%" height="15" fill="rgb(253,215,39)" fg:x="6202" fg:w="257"/><text x="5.2617%" y="783.50"></text></g><g><title>[libc-2.31.so] (254 samples, 0.21%)</title><rect x="5.0141%" y="757" width="0.2053%" height="15" fill="rgb(221,220,41)" fg:x="6205" fg:w="254"/><text x="5.2641%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (31 samples, 0.03%)</title><rect x="5.2226%" y="693" width="0.0251%" height="15" fill="rgb(218,133,21)" fg:x="6463" fg:w="31"/><text x="5.4726%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (31 samples, 0.03%)</title><rect x="5.2226%" y="677" width="0.0251%" height="15" fill="rgb(221,193,43)" fg:x="6463" fg:w="31"/><text x="5.4726%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (31 samples, 0.03%)</title><rect x="5.2226%" y="661" width="0.0251%" height="15" fill="rgb(240,128,52)" fg:x="6463" fg:w="31"/><text x="5.4726%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (30 samples, 0.02%)</title><rect x="5.2234%" y="645" width="0.0242%" height="15" fill="rgb(253,114,12)" fg:x="6464" fg:w="30"/><text x="5.4734%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (30 samples, 0.02%)</title><rect x="5.2234%" y="629" width="0.0242%" height="15" fill="rgb(215,223,47)" fg:x="6464" fg:w="30"/><text x="5.4734%" y="639.50"></text></g><g><title>alloc::alloc::alloc (30 samples, 0.02%)</title><rect x="5.2234%" y="613" width="0.0242%" height="15" fill="rgb(248,225,23)" fg:x="6464" fg:w="30"/><text x="5.4734%" y="623.50"></text></g><g><title>__rg_alloc (30 samples, 0.02%)</title><rect x="5.2234%" y="597" width="0.0242%" height="15" fill="rgb(250,108,0)" fg:x="6464" fg:w="30"/><text x="5.4734%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (30 samples, 0.02%)</title><rect x="5.2234%" y="581" width="0.0242%" height="15" fill="rgb(228,208,7)" fg:x="6464" fg:w="30"/><text x="5.4734%" y="591.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (77 samples, 0.06%)</title><rect x="5.2226%" y="821" width="0.0622%" height="15" fill="rgb(244,45,10)" fg:x="6463" fg:w="77"/><text x="5.4726%" y="831.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (77 samples, 0.06%)</title><rect x="5.2226%" y="805" width="0.0622%" height="15" fill="rgb(207,125,25)" fg:x="6463" fg:w="77"/><text x="5.4726%" y="815.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (77 samples, 0.06%)</title><rect x="5.2226%" y="789" width="0.0622%" height="15" fill="rgb(210,195,18)" fg:x="6463" fg:w="77"/><text x="5.4726%" y="799.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (77 samples, 0.06%)</title><rect x="5.2226%" y="773" width="0.0622%" height="15" fill="rgb(249,80,12)" fg:x="6463" fg:w="77"/><text x="5.4726%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (77 samples, 0.06%)</title><rect x="5.2226%" y="757" width="0.0622%" height="15" fill="rgb(221,65,9)" fg:x="6463" fg:w="77"/><text x="5.4726%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (77 samples, 0.06%)</title><rect x="5.2226%" y="741" width="0.0622%" height="15" fill="rgb(235,49,36)" fg:x="6463" fg:w="77"/><text x="5.4726%" y="751.50"></text></g><g><title>alloc::slice::hack::to_vec (77 samples, 0.06%)</title><rect x="5.2226%" y="725" width="0.0622%" height="15" fill="rgb(225,32,20)" fg:x="6463" fg:w="77"/><text x="5.4726%" y="735.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (77 samples, 0.06%)</title><rect x="5.2226%" y="709" width="0.0622%" height="15" fill="rgb(215,141,46)" fg:x="6463" fg:w="77"/><text x="5.4726%" y="719.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (46 samples, 0.04%)</title><rect x="5.2476%" y="693" width="0.0372%" height="15" fill="rgb(250,160,47)" fg:x="6494" fg:w="46"/><text x="5.4976%" y="703.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (46 samples, 0.04%)</title><rect x="5.2476%" y="677" width="0.0372%" height="15" fill="rgb(216,222,40)" fg:x="6494" fg:w="46"/><text x="5.4976%" y="687.50"></text></g><g><title>[libc-2.31.so] (36 samples, 0.03%)</title><rect x="5.2557%" y="661" width="0.0291%" height="15" fill="rgb(234,217,39)" fg:x="6504" fg:w="36"/><text x="5.5057%" y="671.50"></text></g><g><title>[libc-2.31.so] (1,062 samples, 0.86%)</title><rect x="5.2848%" y="821" width="0.8582%" height="15" fill="rgb(207,178,40)" fg:x="6540" fg:w="1062"/><text x="5.5348%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::drain (13 samples, 0.01%)</title><rect x="6.1430%" y="821" width="0.0105%" height="15" fill="rgb(221,136,13)" fg:x="7602" fg:w="13"/><text x="6.3930%" y="831.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (1,956 samples, 1.58%)</title><rect x="4.6141%" y="1077" width="1.5806%" height="15" fill="rgb(249,199,10)" fg:x="5710" fg:w="1956"/><text x="4.8641%" y="1087.50"></text></g><g><title>async_task::runnable::Runnable::run (1,956 samples, 1.58%)</title><rect x="4.6141%" y="1061" width="1.5806%" height="15" fill="rgb(249,222,13)" fg:x="5710" fg:w="1956"/><text x="4.8641%" y="1071.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (1,956 samples, 1.58%)</title><rect x="4.6141%" y="1045" width="1.5806%" height="15" fill="rgb(244,185,38)" fg:x="5710" fg:w="1956"/><text x="4.8641%" y="1055.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,956 samples, 1.58%)</title><rect x="4.6141%" y="1029" width="1.5806%" height="15" fill="rgb(236,202,9)" fg:x="5710" fg:w="1956"/><text x="4.8641%" y="1039.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,956 samples, 1.58%)</title><rect x="4.6141%" y="1013" width="1.5806%" height="15" fill="rgb(250,229,37)" fg:x="5710" fg:w="1956"/><text x="4.8641%" y="1023.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (1,956 samples, 1.58%)</title><rect x="4.6141%" y="997" width="1.5806%" height="15" fill="rgb(206,174,23)" fg:x="5710" fg:w="1956"/><text x="4.8641%" y="1007.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (1,956 samples, 1.58%)</title><rect x="4.6141%" y="981" width="1.5806%" height="15" fill="rgb(211,33,43)" fg:x="5710" fg:w="1956"/><text x="4.8641%" y="991.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (1,956 samples, 1.58%)</title><rect x="4.6141%" y="965" width="1.5806%" height="15" fill="rgb(245,58,50)" fg:x="5710" fg:w="1956"/><text x="4.8641%" y="975.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,956 samples, 1.58%)</title><rect x="4.6141%" y="949" width="1.5806%" height="15" fill="rgb(244,68,36)" fg:x="5710" fg:w="1956"/><text x="4.8641%" y="959.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,956 samples, 1.58%)</title><rect x="4.6141%" y="933" width="1.5806%" height="15" fill="rgb(232,229,15)" fg:x="5710" fg:w="1956"/><text x="4.8641%" y="943.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (1,956 samples, 1.58%)</title><rect x="4.6141%" y="917" width="1.5806%" height="15" fill="rgb(254,30,23)" fg:x="5710" fg:w="1956"/><text x="4.8641%" y="927.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,956 samples, 1.58%)</title><rect x="4.6141%" y="901" width="1.5806%" height="15" fill="rgb(235,160,14)" fg:x="5710" fg:w="1956"/><text x="4.8641%" y="911.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,956 samples, 1.58%)</title><rect x="4.6141%" y="885" width="1.5806%" height="15" fill="rgb(212,155,44)" fg:x="5710" fg:w="1956"/><text x="4.8641%" y="895.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (1,953 samples, 1.58%)</title><rect x="4.6165%" y="869" width="1.5782%" height="15" fill="rgb(226,2,50)" fg:x="5713" fg:w="1953"/><text x="4.8665%" y="879.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,953 samples, 1.58%)</title><rect x="4.6165%" y="853" width="1.5782%" height="15" fill="rgb(234,177,6)" fg:x="5713" fg:w="1953"/><text x="4.8665%" y="863.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (1,752 samples, 1.42%)</title><rect x="4.7790%" y="837" width="1.4157%" height="15" fill="rgb(217,24,9)" fg:x="5914" fg:w="1752"/><text x="5.0290%" y="847.50"></text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (37 samples, 0.03%)</title><rect x="6.1648%" y="821" width="0.0299%" height="15" fill="rgb(220,13,46)" fg:x="7629" fg:w="37"/><text x="6.4148%" y="831.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (37 samples, 0.03%)</title><rect x="6.1648%" y="805" width="0.0299%" height="15" fill="rgb(239,221,27)" fg:x="7629" fg:w="37"/><text x="6.4148%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (37 samples, 0.03%)</title><rect x="6.1648%" y="789" width="0.0299%" height="15" fill="rgb(222,198,25)" fg:x="7629" fg:w="37"/><text x="6.4148%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (21 samples, 0.02%)</title><rect x="6.1777%" y="773" width="0.0170%" height="15" fill="rgb(211,99,13)" fg:x="7645" fg:w="21"/><text x="6.4277%" y="783.50"></text></g><g><title>[libc-2.31.so] (123 samples, 0.10%)</title><rect x="6.2020%" y="693" width="0.0994%" height="15" fill="rgb(232,111,31)" fg:x="7675" fg:w="123"/><text x="6.4520%" y="703.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (163 samples, 0.13%)</title><rect x="6.1947%" y="1077" width="0.1317%" height="15" fill="rgb(245,82,37)" fg:x="7666" fg:w="163"/><text x="6.4447%" y="1087.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (163 samples, 0.13%)</title><rect x="6.1947%" y="1061" width="0.1317%" height="15" fill="rgb(227,149,46)" fg:x="7666" fg:w="163"/><text x="6.4447%" y="1071.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (163 samples, 0.13%)</title><rect x="6.1947%" y="1045" width="0.1317%" height="15" fill="rgb(218,36,50)" fg:x="7666" fg:w="163"/><text x="6.4447%" y="1055.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (163 samples, 0.13%)</title><rect x="6.1947%" y="1029" width="0.1317%" height="15" fill="rgb(226,80,48)" fg:x="7666" fg:w="163"/><text x="6.4447%" y="1039.50"></text></g><g><title>async_task::runnable::Runnable::run (163 samples, 0.13%)</title><rect x="6.1947%" y="1013" width="0.1317%" height="15" fill="rgb(238,224,15)" fg:x="7666" fg:w="163"/><text x="6.4447%" y="1023.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (163 samples, 0.13%)</title><rect x="6.1947%" y="997" width="0.1317%" height="15" fill="rgb(241,136,10)" fg:x="7666" fg:w="163"/><text x="6.4447%" y="1007.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (163 samples, 0.13%)</title><rect x="6.1947%" y="981" width="0.1317%" height="15" fill="rgb(208,32,45)" fg:x="7666" fg:w="163"/><text x="6.4447%" y="991.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (163 samples, 0.13%)</title><rect x="6.1947%" y="965" width="0.1317%" height="15" fill="rgb(207,135,9)" fg:x="7666" fg:w="163"/><text x="6.4447%" y="975.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (163 samples, 0.13%)</title><rect x="6.1947%" y="949" width="0.1317%" height="15" fill="rgb(206,86,44)" fg:x="7666" fg:w="163"/><text x="6.4447%" y="959.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (163 samples, 0.13%)</title><rect x="6.1947%" y="933" width="0.1317%" height="15" fill="rgb(245,177,15)" fg:x="7666" fg:w="163"/><text x="6.4447%" y="943.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (163 samples, 0.13%)</title><rect x="6.1947%" y="917" width="0.1317%" height="15" fill="rgb(206,64,50)" fg:x="7666" fg:w="163"/><text x="6.4447%" y="927.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (163 samples, 0.13%)</title><rect x="6.1947%" y="901" width="0.1317%" height="15" fill="rgb(234,36,40)" fg:x="7666" fg:w="163"/><text x="6.4447%" y="911.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (163 samples, 0.13%)</title><rect x="6.1947%" y="885" width="0.1317%" height="15" fill="rgb(213,64,8)" fg:x="7666" fg:w="163"/><text x="6.4447%" y="895.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (163 samples, 0.13%)</title><rect x="6.1947%" y="869" width="0.1317%" height="15" fill="rgb(210,75,36)" fg:x="7666" fg:w="163"/><text x="6.4447%" y="879.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (163 samples, 0.13%)</title><rect x="6.1947%" y="853" width="0.1317%" height="15" fill="rgb(229,88,21)" fg:x="7666" fg:w="163"/><text x="6.4447%" y="863.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (163 samples, 0.13%)</title><rect x="6.1947%" y="837" width="0.1317%" height="15" fill="rgb(252,204,47)" fg:x="7666" fg:w="163"/><text x="6.4447%" y="847.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (163 samples, 0.13%)</title><rect x="6.1947%" y="821" width="0.1317%" height="15" fill="rgb(208,77,27)" fg:x="7666" fg:w="163"/><text x="6.4447%" y="831.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (163 samples, 0.13%)</title><rect x="6.1947%" y="805" width="0.1317%" height="15" fill="rgb(221,76,26)" fg:x="7666" fg:w="163"/><text x="6.4447%" y="815.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (163 samples, 0.13%)</title><rect x="6.1947%" y="789" width="0.1317%" height="15" fill="rgb(225,139,18)" fg:x="7666" fg:w="163"/><text x="6.4447%" y="799.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (163 samples, 0.13%)</title><rect x="6.1947%" y="773" width="0.1317%" height="15" fill="rgb(230,137,11)" fg:x="7666" fg:w="163"/><text x="6.4447%" y="783.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (163 samples, 0.13%)</title><rect x="6.1947%" y="757" width="0.1317%" height="15" fill="rgb(212,28,1)" fg:x="7666" fg:w="163"/><text x="6.4447%" y="767.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (163 samples, 0.13%)</title><rect x="6.1947%" y="741" width="0.1317%" height="15" fill="rgb(248,164,17)" fg:x="7666" fg:w="163"/><text x="6.4447%" y="751.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (163 samples, 0.13%)</title><rect x="6.1947%" y="725" width="0.1317%" height="15" fill="rgb(222,171,42)" fg:x="7666" fg:w="163"/><text x="6.4447%" y="735.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (163 samples, 0.13%)</title><rect x="6.1947%" y="709" width="0.1317%" height="15" fill="rgb(243,84,45)" fg:x="7666" fg:w="163"/><text x="6.4447%" y="719.50"></text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (31 samples, 0.03%)</title><rect x="6.3014%" y="693" width="0.0251%" height="15" fill="rgb(252,49,23)" fg:x="7798" fg:w="31"/><text x="6.5514%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (57 samples, 0.05%)</title><rect x="7.0658%" y="581" width="0.0461%" height="15" fill="rgb(215,19,7)" fg:x="8744" fg:w="57"/><text x="7.3158%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (57 samples, 0.05%)</title><rect x="7.0658%" y="565" width="0.0461%" height="15" fill="rgb(238,81,41)" fg:x="8744" fg:w="57"/><text x="7.3158%" y="575.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (57 samples, 0.05%)</title><rect x="7.0658%" y="549" width="0.0461%" height="15" fill="rgb(210,199,37)" fg:x="8744" fg:w="57"/><text x="7.3158%" y="559.50"></text></g><g><title>[libc-2.31.so] (1,499 samples, 1.21%)</title><rect x="7.1466%" y="565" width="1.2113%" height="15" fill="rgb(244,192,49)" fg:x="8844" fg:w="1499"/><text x="7.3966%" y="575.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (126 samples, 0.10%)</title><rect x="8.4896%" y="549" width="0.1018%" height="15" fill="rgb(226,211,11)" fg:x="10506" fg:w="126"/><text x="8.7396%" y="559.50"></text></g><g><title>&lt;tremor_runtime::codec::binary::Binary as tremor_runtime::codec::Codec&gt;::encode (1,865 samples, 1.51%)</title><rect x="7.1151%" y="581" width="1.5071%" height="15" fill="rgb(236,162,54)" fg:x="8805" fg:w="1865"/><text x="7.3651%" y="591.50"></text></g><g><title>sn_rust_alloc (327 samples, 0.26%)</title><rect x="8.3579%" y="565" width="0.2642%" height="15" fill="rgb(220,229,9)" fg:x="10343" fg:w="327"/><text x="8.6079%" y="575.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (38 samples, 0.03%)</title><rect x="8.5914%" y="549" width="0.0307%" height="15" fill="rgb(250,87,22)" fg:x="10632" fg:w="38"/><text x="8.8414%" y="559.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="8.8226%" y="405" width="0.0121%" height="15" fill="rgb(239,43,17)" fg:x="10918" fg:w="15"/><text x="9.0726%" y="415.50"></text></g><g><title>alloc::vec::into_iter::IntoIter&lt;T,A&gt;::as_raw_mut_slice (19 samples, 0.02%)</title><rect x="8.8460%" y="373" width="0.0154%" height="15" fill="rgb(231,177,25)" fg:x="10947" fg:w="19"/><text x="9.0960%" y="383.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (19 samples, 0.02%)</title><rect x="8.8460%" y="357" width="0.0154%" height="15" fill="rgb(219,179,1)" fg:x="10947" fg:w="19"/><text x="9.0960%" y="367.50"></text></g><g><title>core::iter::traits::exact_size::ExactSizeIterator::len (19 samples, 0.02%)</title><rect x="8.8460%" y="341" width="0.0154%" height="15" fill="rgb(238,219,53)" fg:x="10947" fg:w="19"/><text x="9.0960%" y="351.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (19 samples, 0.02%)</title><rect x="8.8460%" y="325" width="0.0154%" height="15" fill="rgb(232,167,36)" fg:x="10947" fg:w="19"/><text x="9.0960%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (19 samples, 0.02%)</title><rect x="8.8460%" y="309" width="0.0154%" height="15" fill="rgb(244,19,51)" fg:x="10947" fg:w="19"/><text x="9.0960%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (90 samples, 0.07%)</title><rect x="8.8613%" y="309" width="0.0727%" height="15" fill="rgb(224,6,22)" fg:x="10966" fg:w="90"/><text x="9.1113%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (90 samples, 0.07%)</title><rect x="8.8613%" y="293" width="0.0727%" height="15" fill="rgb(224,145,5)" fg:x="10966" fg:w="90"/><text x="9.1113%" y="303.50"></text></g><g><title>__rg_dealloc (90 samples, 0.07%)</title><rect x="8.8613%" y="277" width="0.0727%" height="15" fill="rgb(234,130,49)" fg:x="10966" fg:w="90"/><text x="9.1113%" y="287.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (90 samples, 0.07%)</title><rect x="8.8613%" y="261" width="0.0727%" height="15" fill="rgb(254,6,2)" fg:x="10966" fg:w="90"/><text x="9.1113%" y="271.50"></text></g><g><title>sn_rust_dealloc (74 samples, 0.06%)</title><rect x="8.8743%" y="245" width="0.0598%" height="15" fill="rgb(208,96,46)" fg:x="10982" fg:w="74"/><text x="9.1243%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (188 samples, 0.15%)</title><rect x="8.7910%" y="469" width="0.1519%" height="15" fill="rgb(239,3,39)" fg:x="10879" fg:w="188"/><text x="9.0410%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (171 samples, 0.14%)</title><rect x="8.8048%" y="453" width="0.1382%" height="15" fill="rgb(233,210,1)" fg:x="10896" fg:w="171"/><text x="9.0548%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (167 samples, 0.13%)</title><rect x="8.8080%" y="437" width="0.1349%" height="15" fill="rgb(244,137,37)" fg:x="10900" fg:w="167"/><text x="9.0580%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (167 samples, 0.13%)</title><rect x="8.8080%" y="421" width="0.1349%" height="15" fill="rgb(240,136,2)" fg:x="10900" fg:w="167"/><text x="9.0580%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (122 samples, 0.10%)</title><rect x="8.8444%" y="405" width="0.0986%" height="15" fill="rgb(239,18,37)" fg:x="10945" fg:w="122"/><text x="9.0944%" y="415.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (122 samples, 0.10%)</title><rect x="8.8444%" y="389" width="0.0986%" height="15" fill="rgb(218,185,22)" fg:x="10945" fg:w="122"/><text x="9.0944%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (101 samples, 0.08%)</title><rect x="8.8613%" y="373" width="0.0816%" height="15" fill="rgb(225,218,4)" fg:x="10966" fg:w="101"/><text x="9.1113%" y="383.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (101 samples, 0.08%)</title><rect x="8.8613%" y="357" width="0.0816%" height="15" fill="rgb(230,182,32)" fg:x="10966" fg:w="101"/><text x="9.1113%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (101 samples, 0.08%)</title><rect x="8.8613%" y="341" width="0.0816%" height="15" fill="rgb(242,56,43)" fg:x="10966" fg:w="101"/><text x="9.1113%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (101 samples, 0.08%)</title><rect x="8.8613%" y="325" width="0.0816%" height="15" fill="rgb(233,99,24)" fg:x="10966" fg:w="101"/><text x="9.1113%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (90 samples, 0.07%)</title><rect x="8.9430%" y="469" width="0.0727%" height="15" fill="rgb(234,209,42)" fg:x="11067" fg:w="90"/><text x="9.1930%" y="479.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (62 samples, 0.05%)</title><rect x="8.9656%" y="453" width="0.0501%" height="15" fill="rgb(227,7,12)" fg:x="11095" fg:w="62"/><text x="9.2156%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (62 samples, 0.05%)</title><rect x="8.9656%" y="437" width="0.0501%" height="15" fill="rgb(245,203,43)" fg:x="11095" fg:w="62"/><text x="9.2156%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (193 samples, 0.16%)</title><rect x="9.0230%" y="405" width="0.1560%" height="15" fill="rgb(238,205,33)" fg:x="11166" fg:w="193"/><text x="9.2730%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (193 samples, 0.16%)</title><rect x="9.0230%" y="389" width="0.1560%" height="15" fill="rgb(231,56,7)" fg:x="11166" fg:w="193"/><text x="9.2730%" y="399.50"></text></g><g><title>alloc::alloc::alloc (193 samples, 0.16%)</title><rect x="9.0230%" y="373" width="0.1560%" height="15" fill="rgb(244,186,29)" fg:x="11166" fg:w="193"/><text x="9.2730%" y="383.50"></text></g><g><title>__rg_alloc (193 samples, 0.16%)</title><rect x="9.0230%" y="357" width="0.1560%" height="15" fill="rgb(234,111,31)" fg:x="11166" fg:w="193"/><text x="9.2730%" y="367.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (193 samples, 0.16%)</title><rect x="9.0230%" y="341" width="0.1560%" height="15" fill="rgb(241,149,10)" fg:x="11166" fg:w="193"/><text x="9.2730%" y="351.50"></text></g><g><title>sn_rust_alloc (174 samples, 0.14%)</title><rect x="9.0383%" y="325" width="0.1406%" height="15" fill="rgb(249,206,44)" fg:x="11185" fg:w="174"/><text x="9.2883%" y="335.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (3,559 samples, 2.88%)</title><rect x="6.3272%" y="949" width="2.8759%" height="15" fill="rgb(251,153,30)" fg:x="7830" fg:w="3559"/><text x="6.5772%" y="959.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,559 samples, 2.88%)</title><rect x="6.3272%" y="933" width="2.8759%" height="15" fill="rgb(239,152,38)" fg:x="7830" fg:w="3559"/><text x="6.5772%" y="943.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (3,559 samples, 2.88%)</title><rect x="6.3272%" y="917" width="2.8759%" height="15" fill="rgb(249,139,47)" fg:x="7830" fg:w="3559"/><text x="6.5772%" y="927.50">tr..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,559 samples, 2.88%)</title><rect x="6.3272%" y="901" width="2.8759%" height="15" fill="rgb(244,64,35)" fg:x="7830" fg:w="3559"/><text x="6.5772%" y="911.50">&lt;a..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,559 samples, 2.88%)</title><rect x="6.3272%" y="885" width="2.8759%" height="15" fill="rgb(216,46,15)" fg:x="7830" fg:w="3559"/><text x="6.5772%" y="895.50">&lt;a..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (3,559 samples, 2.88%)</title><rect x="6.3272%" y="869" width="2.8759%" height="15" fill="rgb(250,74,19)" fg:x="7830" fg:w="3559"/><text x="6.5772%" y="879.50">&lt;c..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (3,559 samples, 2.88%)</title><rect x="6.3272%" y="853" width="2.8759%" height="15" fill="rgb(249,42,33)" fg:x="7830" fg:w="3559"/><text x="6.5772%" y="863.50">&lt;a..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (3,559 samples, 2.88%)</title><rect x="6.3272%" y="837" width="2.8759%" height="15" fill="rgb(242,149,17)" fg:x="7830" fg:w="3559"/><text x="6.5772%" y="847.50">as..</text></g><g><title>std::panic::catch_unwind (3,559 samples, 2.88%)</title><rect x="6.3272%" y="821" width="2.8759%" height="15" fill="rgb(244,29,21)" fg:x="7830" fg:w="3559"/><text x="6.5772%" y="831.50">st..</text></g><g><title>std::panicking::try (3,559 samples, 2.88%)</title><rect x="6.3272%" y="805" width="2.8759%" height="15" fill="rgb(220,130,37)" fg:x="7830" fg:w="3559"/><text x="6.5772%" y="815.50">st..</text></g><g><title>std::panicking::try::do_call (3,559 samples, 2.88%)</title><rect x="6.3272%" y="789" width="2.8759%" height="15" fill="rgb(211,67,2)" fg:x="7830" fg:w="3559"/><text x="6.5772%" y="799.50">st..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3,559 samples, 2.88%)</title><rect x="6.3272%" y="773" width="2.8759%" height="15" fill="rgb(235,68,52)" fg:x="7830" fg:w="3559"/><text x="6.5772%" y="783.50">&lt;c..</text></g><g><title>core::ops::function::FnOnce::call_once (3,559 samples, 2.88%)</title><rect x="6.3272%" y="757" width="2.8759%" height="15" fill="rgb(246,142,3)" fg:x="7830" fg:w="3559"/><text x="6.5772%" y="767.50">co..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (3,559 samples, 2.88%)</title><rect x="6.3272%" y="741" width="2.8759%" height="15" fill="rgb(241,25,7)" fg:x="7830" fg:w="3559"/><text x="6.5772%" y="751.50">as..</text></g><g><title>async_ffi::FfiContext::with_context (3,559 samples, 2.88%)</title><rect x="6.3272%" y="725" width="2.8759%" height="15" fill="rgb(242,119,39)" fg:x="7830" fg:w="3559"/><text x="6.5772%" y="735.50">as..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (3,559 samples, 2.88%)</title><rect x="6.3272%" y="709" width="2.8759%" height="15" fill="rgb(241,98,45)" fg:x="7830" fg:w="3559"/><text x="6.5772%" y="719.50">as..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,559 samples, 2.88%)</title><rect x="6.3272%" y="693" width="2.8759%" height="15" fill="rgb(254,28,30)" fg:x="7830" fg:w="3559"/><text x="6.5772%" y="703.50">&lt;c..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (3,559 samples, 2.88%)</title><rect x="6.3272%" y="677" width="2.8759%" height="15" fill="rgb(241,142,54)" fg:x="7830" fg:w="3559"/><text x="6.5772%" y="687.50">&lt;t..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (3,559 samples, 2.88%)</title><rect x="6.3272%" y="661" width="2.8759%" height="15" fill="rgb(222,85,15)" fg:x="7830" fg:w="3559"/><text x="6.5772%" y="671.50">tr..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (3,559 samples, 2.88%)</title><rect x="6.3272%" y="645" width="2.8759%" height="15" fill="rgb(210,85,47)" fg:x="7830" fg:w="3559"/><text x="6.5772%" y="655.50">tr..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (3,559 samples, 2.88%)</title><rect x="6.3272%" y="629" width="2.8759%" height="15" fill="rgb(224,206,25)" fg:x="7830" fg:w="3559"/><text x="6.5772%" y="639.50">tr..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (3,559 samples, 2.88%)</title><rect x="6.3272%" y="613" width="2.8759%" height="15" fill="rgb(243,201,19)" fg:x="7830" fg:w="3559"/><text x="6.5772%" y="623.50">tr..</text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (3,559 samples, 2.88%)</title><rect x="6.3272%" y="597" width="2.8759%" height="15" fill="rgb(236,59,4)" fg:x="7830" fg:w="3559"/><text x="6.5772%" y="607.50">&lt;t..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (719 samples, 0.58%)</title><rect x="8.6222%" y="581" width="0.5810%" height="15" fill="rgb(254,179,45)" fg:x="10670" fg:w="719"/><text x="8.8722%" y="591.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::iter::traits::collect::FromIterator&lt;T&gt; for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::from_iter (719 samples, 0.58%)</title><rect x="8.6222%" y="565" width="0.5810%" height="15" fill="rgb(226,14,10)" fg:x="10670" fg:w="719"/><text x="8.8722%" y="575.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (719 samples, 0.58%)</title><rect x="8.6222%" y="549" width="0.5810%" height="15" fill="rgb(244,27,41)" fg:x="10670" fg:w="719"/><text x="8.8722%" y="559.50"></text></g><g><title>core::ops::function::FnOnce::call_once (707 samples, 0.57%)</title><rect x="8.6318%" y="533" width="0.5713%" height="15" fill="rgb(235,35,32)" fg:x="10682" fg:w="707"/><text x="8.8818%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (707 samples, 0.57%)</title><rect x="8.6318%" y="517" width="0.5713%" height="15" fill="rgb(218,68,31)" fg:x="10682" fg:w="707"/><text x="8.8818%" y="527.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (696 samples, 0.56%)</title><rect x="8.6407%" y="501" width="0.5624%" height="15" fill="rgb(207,120,37)" fg:x="10693" fg:w="696"/><text x="8.8907%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (515 samples, 0.42%)</title><rect x="8.7870%" y="485" width="0.4162%" height="15" fill="rgb(227,98,0)" fg:x="10874" fg:w="515"/><text x="9.0370%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (232 samples, 0.19%)</title><rect x="9.0157%" y="469" width="0.1875%" height="15" fill="rgb(207,7,3)" fg:x="11157" fg:w="232"/><text x="9.2657%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (232 samples, 0.19%)</title><rect x="9.0157%" y="453" width="0.1875%" height="15" fill="rgb(206,98,19)" fg:x="11157" fg:w="232"/><text x="9.2657%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (231 samples, 0.19%)</title><rect x="9.0165%" y="437" width="0.1867%" height="15" fill="rgb(217,5,26)" fg:x="11158" fg:w="231"/><text x="9.2665%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (231 samples, 0.19%)</title><rect x="9.0165%" y="421" width="0.1867%" height="15" fill="rgb(235,190,38)" fg:x="11158" fg:w="231"/><text x="9.2665%" y="431.50"></text></g><g><title>core::alloc::layout::Layout::array (30 samples, 0.02%)</title><rect x="9.1789%" y="405" width="0.0242%" height="15" fill="rgb(247,86,24)" fg:x="11359" fg:w="30"/><text x="9.4289%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (30 samples, 0.02%)</title><rect x="9.1789%" y="389" width="0.0242%" height="15" fill="rgb(205,101,16)" fg:x="11359" fg:w="30"/><text x="9.4289%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (30 samples, 0.02%)</title><rect x="9.1789%" y="373" width="0.0242%" height="15" fill="rgb(246,168,33)" fg:x="11359" fg:w="30"/><text x="9.4289%" y="383.50"></text></g><g><title>&lt;tremor_pipeline::EventId as core::default::Default&gt;::default (13 samples, 0.01%)</title><rect x="9.4141%" y="821" width="0.0105%" height="15" fill="rgb(231,114,1)" fg:x="11650" fg:w="13"/><text x="9.6641%" y="831.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::default::Default&gt;::default (303 samples, 0.24%)</title><rect x="9.4246%" y="821" width="0.2448%" height="15" fill="rgb(207,184,53)" fg:x="11663" fg:w="303"/><text x="9.6746%" y="831.50"></text></g><g><title>&lt;tremor_pipeline::event::Event as core::default::Default&gt;::default (487 samples, 0.39%)</title><rect x="9.3931%" y="837" width="0.3935%" height="15" fill="rgb(224,95,51)" fg:x="11624" fg:w="487"/><text x="9.6431%" y="847.50"></text></g><g><title>&lt;tremor_script::srs::EventPayload as core::default::Default&gt;::default (145 samples, 0.12%)</title><rect x="9.6694%" y="821" width="0.1172%" height="15" fill="rgb(212,188,45)" fg:x="11966" fg:w="145"/><text x="9.9194%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (21 samples, 0.02%)</title><rect x="9.7922%" y="837" width="0.0170%" height="15" fill="rgb(223,154,38)" fg:x="12118" fg:w="21"/><text x="10.0422%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (21 samples, 0.02%)</title><rect x="9.7922%" y="821" width="0.0170%" height="15" fill="rgb(251,22,52)" fg:x="12118" fg:w="21"/><text x="10.0422%" y="831.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (21 samples, 0.02%)</title><rect x="9.7922%" y="805" width="0.0170%" height="15" fill="rgb(229,209,22)" fg:x="12118" fg:w="21"/><text x="10.0422%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (54 samples, 0.04%)</title><rect x="9.8092%" y="837" width="0.0436%" height="15" fill="rgb(234,138,34)" fg:x="12139" fg:w="54"/><text x="10.0592%" y="847.50"></text></g><g><title>sn_rust_dealloc (47 samples, 0.04%)</title><rect x="9.8149%" y="821" width="0.0380%" height="15" fill="rgb(212,95,11)" fg:x="12146" fg:w="47"/><text x="10.0649%" y="831.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (829 samples, 0.67%)</title><rect x="9.2032%" y="853" width="0.6699%" height="15" fill="rgb(240,179,47)" fg:x="11389" fg:w="829"/><text x="9.4532%" y="863.50"></text></g><g><title>tremor_pipeline::EventIdGenerator::next_with_pull_id (25 samples, 0.02%)</title><rect x="9.8528%" y="837" width="0.0202%" height="15" fill="rgb(240,163,11)" fg:x="12193" fg:w="25"/><text x="10.1028%" y="847.50"></text></g><g><title>tremor_pipeline::EventId::new (17 samples, 0.01%)</title><rect x="9.8593%" y="821" width="0.0137%" height="15" fill="rgb(236,37,12)" fg:x="12201" fg:w="17"/><text x="10.1093%" y="831.50"></text></g><g><title>alloc::alloc::exchange_malloc (39 samples, 0.03%)</title><rect x="9.9005%" y="837" width="0.0315%" height="15" fill="rgb(232,164,16)" fg:x="12252" fg:w="39"/><text x="10.1505%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (39 samples, 0.03%)</title><rect x="9.9005%" y="821" width="0.0315%" height="15" fill="rgb(244,205,15)" fg:x="12252" fg:w="39"/><text x="10.1505%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (39 samples, 0.03%)</title><rect x="9.9005%" y="805" width="0.0315%" height="15" fill="rgb(223,117,47)" fg:x="12252" fg:w="39"/><text x="10.1505%" y="815.50"></text></g><g><title>alloc::alloc::alloc (39 samples, 0.03%)</title><rect x="9.9005%" y="789" width="0.0315%" height="15" fill="rgb(244,107,35)" fg:x="12252" fg:w="39"/><text x="10.1505%" y="799.50"></text></g><g><title>__rg_alloc (39 samples, 0.03%)</title><rect x="9.9005%" y="773" width="0.0315%" height="15" fill="rgb(205,140,8)" fg:x="12252" fg:w="39"/><text x="10.1505%" y="783.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (39 samples, 0.03%)</title><rect x="9.9005%" y="757" width="0.0315%" height="15" fill="rgb(228,84,46)" fg:x="12252" fg:w="39"/><text x="10.1505%" y="767.50"></text></g><g><title>sn_rust_alloc (29 samples, 0.02%)</title><rect x="9.9086%" y="741" width="0.0234%" height="15" fill="rgb(254,188,9)" fg:x="12262" fg:w="29"/><text x="10.1586%" y="751.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (916 samples, 0.74%)</title><rect x="9.2032%" y="949" width="0.7402%" height="15" fill="rgb(206,112,54)" fg:x="11389" fg:w="916"/><text x="9.4532%" y="959.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (916 samples, 0.74%)</title><rect x="9.2032%" y="933" width="0.7402%" height="15" fill="rgb(216,84,49)" fg:x="11389" fg:w="916"/><text x="9.4532%" y="943.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (916 samples, 0.74%)</title><rect x="9.2032%" y="917" width="0.7402%" height="15" fill="rgb(214,194,35)" fg:x="11389" fg:w="916"/><text x="9.4532%" y="927.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (916 samples, 0.74%)</title><rect x="9.2032%" y="901" width="0.7402%" height="15" fill="rgb(249,28,3)" fg:x="11389" fg:w="916"/><text x="9.4532%" y="911.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (916 samples, 0.74%)</title><rect x="9.2032%" y="885" width="0.7402%" height="15" fill="rgb(222,56,52)" fg:x="11389" fg:w="916"/><text x="9.4532%" y="895.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (916 samples, 0.74%)</title><rect x="9.2032%" y="869" width="0.7402%" height="15" fill="rgb(245,217,50)" fg:x="11389" fg:w="916"/><text x="9.4532%" y="879.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (87 samples, 0.07%)</title><rect x="9.8731%" y="853" width="0.0703%" height="15" fill="rgb(213,201,24)" fg:x="12218" fg:w="87"/><text x="10.1231%" y="863.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (18 samples, 0.01%)</title><rect x="10.0007%" y="837" width="0.0145%" height="15" fill="rgb(248,116,28)" fg:x="12376" fg:w="18"/><text x="10.2507%" y="847.50"></text></g><g><title>core::mem::replace (18 samples, 0.01%)</title><rect x="10.0007%" y="821" width="0.0145%" height="15" fill="rgb(219,72,43)" fg:x="12376" fg:w="18"/><text x="10.2507%" y="831.50"></text></g><g><title>core::ptr::read (18 samples, 0.01%)</title><rect x="10.0007%" y="805" width="0.0145%" height="15" fill="rgb(209,138,14)" fg:x="12376" fg:w="18"/><text x="10.2507%" y="815.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (189 samples, 0.15%)</title><rect x="10.0783%" y="821" width="0.1527%" height="15" fill="rgb(222,18,33)" fg:x="12472" fg:w="189"/><text x="10.3283%" y="831.50"></text></g><g><title>core::mem::replace (189 samples, 0.15%)</title><rect x="10.0783%" y="805" width="0.1527%" height="15" fill="rgb(213,199,7)" fg:x="12472" fg:w="189"/><text x="10.3283%" y="815.50"></text></g><g><title>core::ptr::read (189 samples, 0.15%)</title><rect x="10.0783%" y="789" width="0.1527%" height="15" fill="rgb(250,110,10)" fg:x="12472" fg:w="189"/><text x="10.3283%" y="799.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (314 samples, 0.25%)</title><rect x="10.0153%" y="837" width="0.2537%" height="15" fill="rgb(248,123,6)" fg:x="12394" fg:w="314"/><text x="10.2653%" y="847.50"></text></g><g><title>core::mem::drop (47 samples, 0.04%)</title><rect x="10.2310%" y="821" width="0.0380%" height="15" fill="rgb(206,91,31)" fg:x="12661" fg:w="47"/><text x="10.4810%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (47 samples, 0.04%)</title><rect x="10.2310%" y="805" width="0.0380%" height="15" fill="rgb(211,154,13)" fg:x="12661" fg:w="47"/><text x="10.4810%" y="815.50"></text></g><g><title>std::sync::poison::Flag::done (13 samples, 0.01%)</title><rect x="10.2852%" y="789" width="0.0105%" height="15" fill="rgb(225,148,7)" fg:x="12728" fg:w="13"/><text x="10.5352%" y="799.50"></text></g><g><title>std::thread::panicking (13 samples, 0.01%)</title><rect x="10.2852%" y="773" width="0.0105%" height="15" fill="rgb(220,160,43)" fg:x="12728" fg:w="13"/><text x="10.5352%" y="783.50"></text></g><g><title>std::panicking::panicking (13 samples, 0.01%)</title><rect x="10.2852%" y="757" width="0.0105%" height="15" fill="rgb(213,52,39)" fg:x="12728" fg:w="13"/><text x="10.5352%" y="767.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (13 samples, 0.01%)</title><rect x="10.2852%" y="741" width="0.0105%" height="15" fill="rgb(243,137,7)" fg:x="12728" fg:w="13"/><text x="10.5352%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (260 samples, 0.21%)</title><rect x="10.2690%" y="837" width="0.2101%" height="15" fill="rgb(230,79,13)" fg:x="12708" fg:w="260"/><text x="10.5190%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (249 samples, 0.20%)</title><rect x="10.2779%" y="821" width="0.2012%" height="15" fill="rgb(247,105,23)" fg:x="12719" fg:w="249"/><text x="10.5279%" y="831.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (249 samples, 0.20%)</title><rect x="10.2779%" y="805" width="0.2012%" height="15" fill="rgb(223,179,41)" fg:x="12719" fg:w="249"/><text x="10.5279%" y="815.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (227 samples, 0.18%)</title><rect x="10.2957%" y="789" width="0.1834%" height="15" fill="rgb(218,9,34)" fg:x="12741" fg:w="227"/><text x="10.5457%" y="799.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (227 samples, 0.18%)</title><rect x="10.2957%" y="773" width="0.1834%" height="15" fill="rgb(222,106,8)" fg:x="12741" fg:w="227"/><text x="10.5457%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (227 samples, 0.18%)</title><rect x="10.2957%" y="757" width="0.1834%" height="15" fill="rgb(211,220,0)" fg:x="12741" fg:w="227"/><text x="10.5457%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_swap (227 samples, 0.18%)</title><rect x="10.2957%" y="741" width="0.1834%" height="15" fill="rgb(229,52,16)" fg:x="12741" fg:w="227"/><text x="10.5457%" y="751.50"></text></g><g><title>core::task::wake::Waker::will_wake (35 samples, 0.03%)</title><rect x="10.4880%" y="837" width="0.0283%" height="15" fill="rgb(212,155,18)" fg:x="12979" fg:w="35"/><text x="10.7380%" y="847.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (35 samples, 0.03%)</title><rect x="10.4880%" y="821" width="0.0283%" height="15" fill="rgb(242,21,14)" fg:x="12979" fg:w="35"/><text x="10.7380%" y="831.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (32 samples, 0.03%)</title><rect x="10.4904%" y="805" width="0.0259%" height="15" fill="rgb(222,19,48)" fg:x="12982" fg:w="32"/><text x="10.7404%" y="815.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (32 samples, 0.03%)</title><rect x="10.4904%" y="789" width="0.0259%" height="15" fill="rgb(232,45,27)" fg:x="12982" fg:w="32"/><text x="10.7404%" y="799.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (22 samples, 0.02%)</title><rect x="10.5276%" y="805" width="0.0178%" height="15" fill="rgb(249,103,42)" fg:x="13028" fg:w="22"/><text x="10.7776%" y="815.50"></text></g><g><title>std::sync::poison::Flag::borrow (22 samples, 0.02%)</title><rect x="10.5276%" y="789" width="0.0178%" height="15" fill="rgb(246,81,33)" fg:x="13028" fg:w="22"/><text x="10.7776%" y="799.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (6,731 samples, 5.44%)</title><rect x="6.3264%" y="1077" width="5.4391%" height="15" fill="rgb(252,33,42)" fg:x="7829" fg:w="6731"/><text x="6.5764%" y="1087.50">async_e..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (6,731 samples, 5.44%)</title><rect x="6.3264%" y="1061" width="5.4391%" height="15" fill="rgb(209,212,41)" fg:x="7829" fg:w="6731"/><text x="6.5764%" y="1071.50">&lt;async_..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (6,731 samples, 5.44%)</title><rect x="6.3264%" y="1045" width="5.4391%" height="15" fill="rgb(207,154,6)" fg:x="7829" fg:w="6731"/><text x="6.5764%" y="1055.50">async_s..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (6,731 samples, 5.44%)</title><rect x="6.3264%" y="1029" width="5.4391%" height="15" fill="rgb(223,64,47)" fg:x="7829" fg:w="6731"/><text x="6.5764%" y="1039.50">std::th..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (6,731 samples, 5.44%)</title><rect x="6.3264%" y="1013" width="5.4391%" height="15" fill="rgb(211,161,38)" fg:x="7829" fg:w="6731"/><text x="6.5764%" y="1023.50">std::th..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (6,731 samples, 5.44%)</title><rect x="6.3264%" y="997" width="5.4391%" height="15" fill="rgb(219,138,40)" fg:x="7829" fg:w="6731"/><text x="6.5764%" y="1007.50">async_s..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (6,731 samples, 5.44%)</title><rect x="6.3264%" y="981" width="5.4391%" height="15" fill="rgb(241,228,46)" fg:x="7829" fg:w="6731"/><text x="6.5764%" y="991.50">&lt;async_..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,731 samples, 5.44%)</title><rect x="6.3264%" y="965" width="5.4391%" height="15" fill="rgb(223,209,38)" fg:x="7829" fg:w="6731"/><text x="6.5764%" y="975.50">&lt;core::..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (2,255 samples, 1.82%)</title><rect x="9.9434%" y="949" width="1.8222%" height="15" fill="rgb(236,164,45)" fg:x="12305" fg:w="2255"/><text x="10.1934%" y="959.50">t..</text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,255 samples, 1.82%)</title><rect x="9.9434%" y="933" width="1.8222%" height="15" fill="rgb(231,15,5)" fg:x="12305" fg:w="2255"/><text x="10.1934%" y="943.50">&lt;..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (2,255 samples, 1.82%)</title><rect x="9.9434%" y="917" width="1.8222%" height="15" fill="rgb(252,35,15)" fg:x="12305" fg:w="2255"/><text x="10.1934%" y="927.50">&lt;..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (2,255 samples, 1.82%)</title><rect x="9.9434%" y="901" width="1.8222%" height="15" fill="rgb(248,181,18)" fg:x="12305" fg:w="2255"/><text x="10.1934%" y="911.50">&lt;..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (2,255 samples, 1.82%)</title><rect x="9.9434%" y="885" width="1.8222%" height="15" fill="rgb(233,39,42)" fg:x="12305" fg:w="2255"/><text x="10.1934%" y="895.50">&lt;..</text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (2,255 samples, 1.82%)</title><rect x="9.9434%" y="869" width="1.8222%" height="15" fill="rgb(238,110,33)" fg:x="12305" fg:w="2255"/><text x="10.1934%" y="879.50">&lt;..</text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (2,255 samples, 1.82%)</title><rect x="9.9434%" y="853" width="1.8222%" height="15" fill="rgb(233,195,10)" fg:x="12305" fg:w="2255"/><text x="10.1934%" y="863.50">&lt;..</text></g><g><title>event_listener::Inner::lock (1,546 samples, 1.25%)</title><rect x="10.5163%" y="837" width="1.2493%" height="15" fill="rgb(254,105,3)" fg:x="13014" fg:w="1546"/><text x="10.7663%" y="847.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (1,532 samples, 1.24%)</title><rect x="10.5276%" y="821" width="1.2380%" height="15" fill="rgb(221,225,9)" fg:x="13028" fg:w="1532"/><text x="10.7776%" y="831.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (1,510 samples, 1.22%)</title><rect x="10.5454%" y="805" width="1.2202%" height="15" fill="rgb(224,227,45)" fg:x="13050" fg:w="1510"/><text x="10.7954%" y="815.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (1,510 samples, 1.22%)</title><rect x="10.5454%" y="789" width="1.2202%" height="15" fill="rgb(229,198,43)" fg:x="13050" fg:w="1510"/><text x="10.7954%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1,510 samples, 1.22%)</title><rect x="10.5454%" y="773" width="1.2202%" height="15" fill="rgb(206,209,35)" fg:x="13050" fg:w="1510"/><text x="10.7954%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1,510 samples, 1.22%)</title><rect x="10.5454%" y="757" width="1.2202%" height="15" fill="rgb(245,195,53)" fg:x="13050" fg:w="1510"/><text x="10.7954%" y="767.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,945 samples, 7.23%)</title><rect x="4.5406%" y="1093" width="7.2282%" height="15" fill="rgb(240,92,26)" fg:x="5619" fg:w="8945"/><text x="4.7906%" y="1103.50">&lt;core::fut..</text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (25 samples, 0.02%)</title><rect x="11.7688%" y="1093" width="0.0202%" height="15" fill="rgb(207,40,23)" fg:x="14564" fg:w="25"/><text x="12.0188%" y="1103.50"></text></g><g><title>&lt;tremor_runtime::codec::binary::Binary as tremor_runtime::codec::Codec&gt;::encode (13 samples, 0.01%)</title><rect x="11.8092%" y="1093" width="0.0105%" height="15" fill="rgb(223,111,35)" fg:x="14614" fg:w="13"/><text x="12.0592%" y="1103.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (20 samples, 0.02%)</title><rect x="11.8197%" y="1093" width="0.0162%" height="15" fill="rgb(229,147,28)" fg:x="14627" fg:w="20"/><text x="12.0697%" y="1103.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (52 samples, 0.04%)</title><rect x="11.8359%" y="1093" width="0.0420%" height="15" fill="rgb(211,29,28)" fg:x="14647" fg:w="52"/><text x="12.0859%" y="1103.50"></text></g><g><title>[libc-2.31.so] (148 samples, 0.12%)</title><rect x="11.8779%" y="1093" width="0.1196%" height="15" fill="rgb(228,72,33)" fg:x="14699" fg:w="148"/><text x="12.1279%" y="1103.50"></text></g><g><title>__clock_gettime (83 samples, 0.07%)</title><rect x="11.9975%" y="1093" width="0.0671%" height="15" fill="rgb(205,214,31)" fg:x="14847" fg:w="83"/><text x="12.2475%" y="1103.50"></text></g><g><title>__vdso_clock_gettime (27 samples, 0.02%)</title><rect x="12.0645%" y="1093" width="0.0218%" height="15" fill="rgb(224,111,15)" fg:x="14930" fg:w="27"/><text x="12.3145%" y="1103.50"></text></g><g><title>abi_stable::std_types::arc::vtable_mod::destructor_arc (23 samples, 0.02%)</title><rect x="12.1041%" y="1093" width="0.0186%" height="15" fill="rgb(253,21,26)" fg:x="14979" fg:w="23"/><text x="12.3541%" y="1103.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (16 samples, 0.01%)</title><rect x="12.1227%" y="1093" width="0.0129%" height="15" fill="rgb(245,139,43)" fg:x="15002" fg:w="16"/><text x="12.3727%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="12.1227%" y="1077" width="0.0129%" height="15" fill="rgb(252,170,7)" fg:x="15002" fg:w="16"/><text x="12.3727%" y="1087.50"></text></g><g><title>alloc::alloc::box_free (16 samples, 0.01%)</title><rect x="12.1227%" y="1061" width="0.0129%" height="15" fill="rgb(231,118,14)" fg:x="15002" fg:w="16"/><text x="12.3727%" y="1071.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 0.01%)</title><rect x="12.1227%" y="1045" width="0.0129%" height="15" fill="rgb(238,83,0)" fg:x="15002" fg:w="16"/><text x="12.3727%" y="1055.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 0.01%)</title><rect x="12.1227%" y="1029" width="0.0129%" height="15" fill="rgb(221,39,39)" fg:x="15002" fg:w="16"/><text x="12.3727%" y="1039.50"></text></g><g><title>__rg_dealloc (16 samples, 0.01%)</title><rect x="12.1227%" y="1013" width="0.0129%" height="15" fill="rgb(222,119,46)" fg:x="15002" fg:w="16"/><text x="12.3727%" y="1023.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (16 samples, 0.01%)</title><rect x="12.1227%" y="997" width="0.0129%" height="15" fill="rgb(222,165,49)" fg:x="15002" fg:w="16"/><text x="12.3727%" y="1007.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (14 samples, 0.01%)</title><rect x="12.1357%" y="1093" width="0.0113%" height="15" fill="rgb(219,113,52)" fg:x="15018" fg:w="14"/><text x="12.3857%" y="1103.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (13 samples, 0.01%)</title><rect x="12.1478%" y="1093" width="0.0105%" height="15" fill="rgb(214,7,15)" fg:x="15033" fg:w="13"/><text x="12.3978%" y="1103.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (14 samples, 0.01%)</title><rect x="12.2027%" y="885" width="0.0113%" height="15" fill="rgb(235,32,4)" fg:x="15101" fg:w="14"/><text x="12.4527%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (14 samples, 0.01%)</title><rect x="12.2027%" y="869" width="0.0113%" height="15" fill="rgb(238,90,54)" fg:x="15101" fg:w="14"/><text x="12.4527%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (14 samples, 0.01%)</title><rect x="12.2027%" y="853" width="0.0113%" height="15" fill="rgb(213,208,19)" fg:x="15101" fg:w="14"/><text x="12.4527%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 0.01%)</title><rect x="12.2027%" y="837" width="0.0113%" height="15" fill="rgb(233,156,4)" fg:x="15101" fg:w="14"/><text x="12.4527%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.01%)</title><rect x="12.2027%" y="821" width="0.0113%" height="15" fill="rgb(207,194,5)" fg:x="15101" fg:w="14"/><text x="12.4527%" y="831.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.01%)</title><rect x="12.2027%" y="805" width="0.0113%" height="15" fill="rgb(206,111,30)" fg:x="15101" fg:w="14"/><text x="12.4527%" y="815.50"></text></g><g><title>__rg_alloc (14 samples, 0.01%)</title><rect x="12.2027%" y="789" width="0.0113%" height="15" fill="rgb(243,70,54)" fg:x="15101" fg:w="14"/><text x="12.4527%" y="799.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (14 samples, 0.01%)</title><rect x="12.2027%" y="773" width="0.0113%" height="15" fill="rgb(242,28,8)" fg:x="15101" fg:w="14"/><text x="12.4527%" y="783.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (27 samples, 0.02%)</title><rect x="12.2027%" y="997" width="0.0218%" height="15" fill="rgb(219,106,18)" fg:x="15101" fg:w="27"/><text x="12.4527%" y="1007.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (27 samples, 0.02%)</title><rect x="12.2027%" y="981" width="0.0218%" height="15" fill="rgb(244,222,10)" fg:x="15101" fg:w="27"/><text x="12.4527%" y="991.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (27 samples, 0.02%)</title><rect x="12.2027%" y="965" width="0.0218%" height="15" fill="rgb(236,179,52)" fg:x="15101" fg:w="27"/><text x="12.4527%" y="975.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (27 samples, 0.02%)</title><rect x="12.2027%" y="949" width="0.0218%" height="15" fill="rgb(213,23,39)" fg:x="15101" fg:w="27"/><text x="12.4527%" y="959.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (27 samples, 0.02%)</title><rect x="12.2027%" y="933" width="0.0218%" height="15" fill="rgb(238,48,10)" fg:x="15101" fg:w="27"/><text x="12.4527%" y="943.50"></text></g><g><title>alloc::slice::hack::to_vec (27 samples, 0.02%)</title><rect x="12.2027%" y="917" width="0.0218%" height="15" fill="rgb(251,196,23)" fg:x="15101" fg:w="27"/><text x="12.4527%" y="927.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (27 samples, 0.02%)</title><rect x="12.2027%" y="901" width="0.0218%" height="15" fill="rgb(250,152,24)" fg:x="15101" fg:w="27"/><text x="12.4527%" y="911.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (13 samples, 0.01%)</title><rect x="12.2140%" y="885" width="0.0105%" height="15" fill="rgb(209,150,17)" fg:x="15115" fg:w="13"/><text x="12.4640%" y="895.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13 samples, 0.01%)</title><rect x="12.2140%" y="869" width="0.0105%" height="15" fill="rgb(234,202,34)" fg:x="15115" fg:w="13"/><text x="12.4640%" y="879.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (89 samples, 0.07%)</title><rect x="12.1583%" y="1093" width="0.0719%" height="15" fill="rgb(253,148,53)" fg:x="15046" fg:w="89"/><text x="12.4083%" y="1103.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (34 samples, 0.03%)</title><rect x="12.2027%" y="1077" width="0.0275%" height="15" fill="rgb(218,129,16)" fg:x="15101" fg:w="34"/><text x="12.4527%" y="1087.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (34 samples, 0.03%)</title><rect x="12.2027%" y="1061" width="0.0275%" height="15" fill="rgb(216,85,19)" fg:x="15101" fg:w="34"/><text x="12.4527%" y="1071.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (34 samples, 0.03%)</title><rect x="12.2027%" y="1045" width="0.0275%" height="15" fill="rgb(235,228,7)" fg:x="15101" fg:w="34"/><text x="12.4527%" y="1055.50"></text></g><g><title>alloc::slice::hack::to_vec (34 samples, 0.03%)</title><rect x="12.2027%" y="1029" width="0.0275%" height="15" fill="rgb(245,175,0)" fg:x="15101" fg:w="34"/><text x="12.4527%" y="1039.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (34 samples, 0.03%)</title><rect x="12.2027%" y="1013" width="0.0275%" height="15" fill="rgb(208,168,36)" fg:x="15101" fg:w="34"/><text x="12.4527%" y="1023.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (48 samples, 0.04%)</title><rect x="12.2391%" y="1093" width="0.0388%" height="15" fill="rgb(246,171,24)" fg:x="15146" fg:w="48"/><text x="12.4891%" y="1103.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (36 samples, 0.03%)</title><rect x="12.2488%" y="1077" width="0.0291%" height="15" fill="rgb(215,142,24)" fg:x="15158" fg:w="36"/><text x="12.4988%" y="1087.50"></text></g><g><title>core::mem::drop (36 samples, 0.03%)</title><rect x="12.2488%" y="1061" width="0.0291%" height="15" fill="rgb(250,187,7)" fg:x="15158" fg:w="36"/><text x="12.4988%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (36 samples, 0.03%)</title><rect x="12.2488%" y="1045" width="0.0291%" height="15" fill="rgb(228,66,33)" fg:x="15158" fg:w="36"/><text x="12.4988%" y="1055.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (36 samples, 0.03%)</title><rect x="12.2488%" y="1029" width="0.0291%" height="15" fill="rgb(234,215,21)" fg:x="15158" fg:w="36"/><text x="12.4988%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::vec::private::RVec&lt;u8&gt;]&gt; (36 samples, 0.03%)</title><rect x="12.2488%" y="1013" width="0.0291%" height="15" fill="rgb(222,191,20)" fg:x="15158" fg:w="36"/><text x="12.4988%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (36 samples, 0.03%)</title><rect x="12.2488%" y="997" width="0.0291%" height="15" fill="rgb(245,79,54)" fg:x="15158" fg:w="36"/><text x="12.4988%" y="1007.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (36 samples, 0.03%)</title><rect x="12.2488%" y="981" width="0.0291%" height="15" fill="rgb(240,10,37)" fg:x="15158" fg:w="36"/><text x="12.4988%" y="991.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (29 samples, 0.02%)</title><rect x="12.2779%" y="1093" width="0.0234%" height="15" fill="rgb(214,192,32)" fg:x="15194" fg:w="29"/><text x="12.5279%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (27 samples, 0.02%)</title><rect x="12.2795%" y="1077" width="0.0218%" height="15" fill="rgb(209,36,54)" fg:x="15196" fg:w="27"/><text x="12.5295%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (27 samples, 0.02%)</title><rect x="12.2795%" y="1061" width="0.0218%" height="15" fill="rgb(220,10,11)" fg:x="15196" fg:w="27"/><text x="12.5295%" y="1071.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (27 samples, 0.02%)</title><rect x="12.2795%" y="1045" width="0.0218%" height="15" fill="rgb(221,106,17)" fg:x="15196" fg:w="27"/><text x="12.5295%" y="1055.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (13 samples, 0.01%)</title><rect x="12.3264%" y="1061" width="0.0105%" height="15" fill="rgb(251,142,44)" fg:x="15254" fg:w="13"/><text x="12.5764%" y="1071.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (13 samples, 0.01%)</title><rect x="12.3264%" y="1045" width="0.0105%" height="15" fill="rgb(238,13,15)" fg:x="15254" fg:w="13"/><text x="12.5764%" y="1055.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13 samples, 0.01%)</title><rect x="12.3264%" y="1029" width="0.0105%" height="15" fill="rgb(208,107,27)" fg:x="15254" fg:w="13"/><text x="12.5764%" y="1039.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (13 samples, 0.01%)</title><rect x="12.3264%" y="1013" width="0.0105%" height="15" fill="rgb(205,136,37)" fg:x="15254" fg:w="13"/><text x="12.5764%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="12.3264%" y="997" width="0.0105%" height="15" fill="rgb(250,205,27)" fg:x="15254" fg:w="13"/><text x="12.5764%" y="1007.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="12.3264%" y="981" width="0.0105%" height="15" fill="rgb(210,80,43)" fg:x="15254" fg:w="13"/><text x="12.5764%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (13 samples, 0.01%)</title><rect x="12.3264%" y="965" width="0.0105%" height="15" fill="rgb(247,160,36)" fg:x="15254" fg:w="13"/><text x="12.5764%" y="975.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="12.3264%" y="949" width="0.0105%" height="15" fill="rgb(234,13,49)" fg:x="15254" fg:w="13"/><text x="12.5764%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="12.3264%" y="933" width="0.0105%" height="15" fill="rgb(234,122,0)" fg:x="15254" fg:w="13"/><text x="12.5764%" y="943.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="12.3264%" y="917" width="0.0105%" height="15" fill="rgb(207,146,38)" fg:x="15254" fg:w="13"/><text x="12.5764%" y="927.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.01%)</title><rect x="12.3264%" y="901" width="0.0105%" height="15" fill="rgb(207,177,25)" fg:x="15254" fg:w="13"/><text x="12.5764%" y="911.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.01%)</title><rect x="12.3264%" y="885" width="0.0105%" height="15" fill="rgb(211,178,42)" fg:x="15254" fg:w="13"/><text x="12.5764%" y="895.50"></text></g><g><title>__rg_dealloc (13 samples, 0.01%)</title><rect x="12.3264%" y="869" width="0.0105%" height="15" fill="rgb(230,69,54)" fg:x="15254" fg:w="13"/><text x="12.5764%" y="879.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (13 samples, 0.01%)</title><rect x="12.3264%" y="853" width="0.0105%" height="15" fill="rgb(214,135,41)" fg:x="15254" fg:w="13"/><text x="12.5764%" y="863.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (48 samples, 0.04%)</title><rect x="12.3013%" y="1093" width="0.0388%" height="15" fill="rgb(237,67,25)" fg:x="15223" fg:w="48"/><text x="12.5513%" y="1103.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (17 samples, 0.01%)</title><rect x="12.3264%" y="1077" width="0.0137%" height="15" fill="rgb(222,189,50)" fg:x="15254" fg:w="17"/><text x="12.5764%" y="1087.50"></text></g><g><title>async_executor::Ticker::sleep (37 samples, 0.03%)</title><rect x="12.3450%" y="1093" width="0.0299%" height="15" fill="rgb(245,148,34)" fg:x="15277" fg:w="37"/><text x="12.5950%" y="1103.50"></text></g><g><title>async_executor::steal (176 samples, 0.14%)</title><rect x="12.3748%" y="1093" width="0.1422%" height="15" fill="rgb(222,29,6)" fg:x="15314" fg:w="176"/><text x="12.6248%" y="1103.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (741 samples, 0.60%)</title><rect x="12.9680%" y="741" width="0.5988%" height="15" fill="rgb(221,189,43)" fg:x="16048" fg:w="741"/><text x="13.2180%" y="751.50"></text></g><g><title>[libc-2.31.so] (628 samples, 0.51%)</title><rect x="13.0593%" y="725" width="0.5075%" height="15" fill="rgb(207,36,27)" fg:x="16161" fg:w="628"/><text x="13.3093%" y="735.50"></text></g><g><title>[libc-2.31.so] (254 samples, 0.21%)</title><rect x="13.6064%" y="725" width="0.2053%" height="15" fill="rgb(217,90,24)" fg:x="16838" fg:w="254"/><text x="13.8564%" y="735.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (879 samples, 0.71%)</title><rect x="14.0516%" y="709" width="0.7103%" height="15" fill="rgb(224,66,35)" fg:x="17389" fg:w="879"/><text x="14.3016%" y="719.50"></text></g><g><title>[libc-2.31.so] (252 samples, 0.20%)</title><rect x="14.7789%" y="693" width="0.2036%" height="15" fill="rgb(221,13,50)" fg:x="18289" fg:w="252"/><text x="15.0289%" y="703.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (496 samples, 0.40%)</title><rect x="14.7619%" y="709" width="0.4008%" height="15" fill="rgb(236,68,49)" fg:x="18268" fg:w="496"/><text x="15.0119%" y="719.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (223 samples, 0.18%)</title><rect x="14.9825%" y="693" width="0.1802%" height="15" fill="rgb(229,146,28)" fg:x="18541" fg:w="223"/><text x="15.2325%" y="703.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (230 samples, 0.19%)</title><rect x="15.1627%" y="677" width="0.1859%" height="15" fill="rgb(225,31,38)" fg:x="18764" fg:w="230"/><text x="15.4127%" y="687.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (217 samples, 0.18%)</title><rect x="15.1732%" y="661" width="0.1754%" height="15" fill="rgb(250,208,3)" fg:x="18777" fg:w="217"/><text x="15.4232%" y="671.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (217 samples, 0.18%)</title><rect x="15.1732%" y="645" width="0.1754%" height="15" fill="rgb(246,54,23)" fg:x="18777" fg:w="217"/><text x="15.4232%" y="655.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (47 samples, 0.04%)</title><rect x="15.3930%" y="629" width="0.0380%" height="15" fill="rgb(243,76,11)" fg:x="19049" fg:w="47"/><text x="15.6430%" y="639.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (47 samples, 0.04%)</title><rect x="15.3930%" y="613" width="0.0380%" height="15" fill="rgb(245,21,50)" fg:x="19049" fg:w="47"/><text x="15.6430%" y="623.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (47 samples, 0.04%)</title><rect x="15.3930%" y="597" width="0.0380%" height="15" fill="rgb(228,9,43)" fg:x="19049" fg:w="47"/><text x="15.6430%" y="607.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (5,058 samples, 4.09%)</title><rect x="15.3558%" y="661" width="4.0872%" height="15" fill="rgb(208,100,47)" fg:x="19003" fg:w="5058"/><text x="15.6058%" y="671.50">&lt;asy..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (5,037 samples, 4.07%)</title><rect x="15.3728%" y="645" width="4.0703%" height="15" fill="rgb(232,26,8)" fg:x="19024" fg:w="5037"/><text x="15.6228%" y="655.50">asyn..</text></g><g><title>std::panic::catch_unwind (4,965 samples, 4.01%)</title><rect x="15.4310%" y="629" width="4.0121%" height="15" fill="rgb(216,166,38)" fg:x="19096" fg:w="4965"/><text x="15.6810%" y="639.50">std:..</text></g><g><title>std::panicking::try (4,965 samples, 4.01%)</title><rect x="15.4310%" y="613" width="4.0121%" height="15" fill="rgb(251,202,51)" fg:x="19096" fg:w="4965"/><text x="15.6810%" y="623.50">std:..</text></g><g><title>std::panicking::try::do_call (4,965 samples, 4.01%)</title><rect x="15.4310%" y="597" width="4.0121%" height="15" fill="rgb(254,216,34)" fg:x="19096" fg:w="4965"/><text x="15.6810%" y="607.50">std:..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (18 samples, 0.01%)</title><rect x="19.4285%" y="581" width="0.0145%" height="15" fill="rgb(251,32,27)" fg:x="24043" fg:w="18"/><text x="19.6785%" y="591.50"></text></g><g><title>core::ops::function::FnOnce::call_once (18 samples, 0.01%)</title><rect x="19.4285%" y="565" width="0.0145%" height="15" fill="rgb(208,127,28)" fg:x="24043" fg:w="18"/><text x="19.6785%" y="575.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (18 samples, 0.01%)</title><rect x="19.4285%" y="549" width="0.0145%" height="15" fill="rgb(224,137,22)" fg:x="24043" fg:w="18"/><text x="19.6785%" y="559.50"></text></g><g><title>async_ffi::FfiContext::with_context (18 samples, 0.01%)</title><rect x="19.4285%" y="533" width="0.0145%" height="15" fill="rgb(254,70,32)" fg:x="24043" fg:w="18"/><text x="19.6785%" y="543.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (5,075 samples, 4.10%)</title><rect x="15.3486%" y="677" width="4.1010%" height="15" fill="rgb(229,75,37)" fg:x="18994" fg:w="5075"/><text x="15.5986%" y="687.50">&lt;cor..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,508 samples, 4.45%)</title><rect x="15.1627%" y="709" width="4.4509%" height="15" fill="rgb(252,64,23)" fg:x="18764" fg:w="5508"/><text x="15.4127%" y="719.50">&lt;asyn..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,508 samples, 4.45%)</title><rect x="15.1627%" y="693" width="4.4509%" height="15" fill="rgb(232,162,48)" fg:x="18764" fg:w="5508"/><text x="15.4127%" y="703.50">&lt;asyn..</text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (203 samples, 0.16%)</title><rect x="19.4495%" y="677" width="0.1640%" height="15" fill="rgb(246,160,12)" fg:x="24069" fg:w="203"/><text x="19.6995%" y="687.50"></text></g><g><title>[libc-2.31.so] (683 samples, 0.55%)</title><rect x="19.6136%" y="709" width="0.5519%" height="15" fill="rgb(247,166,0)" fg:x="24272" fg:w="683"/><text x="19.8636%" y="719.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (101 samples, 0.08%)</title><rect x="20.1655%" y="709" width="0.0816%" height="15" fill="rgb(249,219,21)" fg:x="24955" fg:w="101"/><text x="20.4155%" y="719.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn (16 samples, 0.01%)</title><rect x="20.2576%" y="661" width="0.0129%" height="15" fill="rgb(205,209,3)" fg:x="25069" fg:w="16"/><text x="20.5076%" y="671.50"></text></g><g><title>async_ffi::DropBomb::with (14 samples, 0.01%)</title><rect x="20.2592%" y="645" width="0.0113%" height="15" fill="rgb(243,44,1)" fg:x="25071" fg:w="14"/><text x="20.5092%" y="655.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn::{{closure}} (14 samples, 0.01%)</title><rect x="20.2592%" y="629" width="0.0113%" height="15" fill="rgb(206,159,16)" fg:x="25071" fg:w="14"/><text x="20.5092%" y="639.50"></text></g><g><title>core::mem::drop (14 samples, 0.01%)</title><rect x="20.2592%" y="613" width="0.0113%" height="15" fill="rgb(244,77,30)" fg:x="25071" fg:w="14"/><text x="20.5092%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}}&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="20.2592%" y="597" width="0.0113%" height="15" fill="rgb(218,69,12)" fg:x="25071" fg:w="14"/><text x="20.5092%" y="607.50"></text></g><g><title>sn_rust_dealloc (49 samples, 0.04%)</title><rect x="20.2705%" y="661" width="0.0396%" height="15" fill="rgb(212,87,7)" fg:x="25085" fg:w="49"/><text x="20.5205%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (83 samples, 0.07%)</title><rect x="20.2471%" y="709" width="0.0671%" height="15" fill="rgb(245,114,25)" fg:x="25056" fg:w="83"/><text x="20.4971%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (83 samples, 0.07%)</title><rect x="20.2471%" y="693" width="0.0671%" height="15" fill="rgb(210,61,42)" fg:x="25056" fg:w="83"/><text x="20.4971%" y="703.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (83 samples, 0.07%)</title><rect x="20.2471%" y="677" width="0.0671%" height="15" fill="rgb(211,52,33)" fg:x="25056" fg:w="83"/><text x="20.4971%" y="687.50"></text></g><g><title>[libc-2.31.so] (154 samples, 0.12%)</title><rect x="20.7425%" y="693" width="0.1244%" height="15" fill="rgb(234,58,33)" fg:x="25669" fg:w="154"/><text x="20.9925%" y="703.50"></text></g><g><title>[libc-2.31.so] (262 samples, 0.21%)</title><rect x="20.9113%" y="613" width="0.2117%" height="15" fill="rgb(220,115,36)" fg:x="25878" fg:w="262"/><text x="21.1613%" y="623.50"></text></g><g><title>[libc-2.31.so] (208 samples, 0.17%)</title><rect x="21.1400%" y="597" width="0.1681%" height="15" fill="rgb(243,153,54)" fg:x="26161" fg:w="208"/><text x="21.3900%" y="607.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (170 samples, 0.14%)</title><rect x="21.5336%" y="485" width="0.1374%" height="15" fill="rgb(251,47,18)" fg:x="26648" fg:w="170"/><text x="21.7836%" y="495.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (1,005 samples, 0.81%)</title><rect x="20.8685%" y="693" width="0.8121%" height="15" fill="rgb(242,102,42)" fg:x="25825" fg:w="1005"/><text x="21.1185%" y="703.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event (978 samples, 0.79%)</title><rect x="20.8903%" y="677" width="0.7903%" height="15" fill="rgb(234,31,38)" fg:x="25852" fg:w="978"/><text x="21.1403%" y="687.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (978 samples, 0.79%)</title><rect x="20.8903%" y="661" width="0.7903%" height="15" fill="rgb(221,117,51)" fg:x="25852" fg:w="978"/><text x="21.1403%" y="671.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (978 samples, 0.79%)</title><rect x="20.8903%" y="645" width="0.7903%" height="15" fill="rgb(212,20,18)" fg:x="25852" fg:w="978"/><text x="21.1403%" y="655.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (978 samples, 0.79%)</title><rect x="20.8903%" y="629" width="0.7903%" height="15" fill="rgb(245,133,36)" fg:x="25852" fg:w="978"/><text x="21.1403%" y="639.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (690 samples, 0.56%)</title><rect x="21.1231%" y="613" width="0.5576%" height="15" fill="rgb(212,6,19)" fg:x="26140" fg:w="690"/><text x="21.3731%" y="623.50"></text></g><g><title>alloc::alloc::exchange_malloc (461 samples, 0.37%)</title><rect x="21.3081%" y="597" width="0.3725%" height="15" fill="rgb(218,1,36)" fg:x="26369" fg:w="461"/><text x="21.5581%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (461 samples, 0.37%)</title><rect x="21.3081%" y="581" width="0.3725%" height="15" fill="rgb(246,84,54)" fg:x="26369" fg:w="461"/><text x="21.5581%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (461 samples, 0.37%)</title><rect x="21.3081%" y="565" width="0.3725%" height="15" fill="rgb(242,110,6)" fg:x="26369" fg:w="461"/><text x="21.5581%" y="575.50"></text></g><g><title>alloc::alloc::alloc (450 samples, 0.36%)</title><rect x="21.3170%" y="549" width="0.3636%" height="15" fill="rgb(214,47,5)" fg:x="26380" fg:w="450"/><text x="21.5670%" y="559.50"></text></g><g><title>__rg_alloc (450 samples, 0.36%)</title><rect x="21.3170%" y="533" width="0.3636%" height="15" fill="rgb(218,159,25)" fg:x="26380" fg:w="450"/><text x="21.5670%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (450 samples, 0.36%)</title><rect x="21.3170%" y="517" width="0.3636%" height="15" fill="rgb(215,211,28)" fg:x="26380" fg:w="450"/><text x="21.5670%" y="527.50"></text></g><g><title>sn_rust_alloc (440 samples, 0.36%)</title><rect x="21.3251%" y="501" width="0.3556%" height="15" fill="rgb(238,59,32)" fg:x="26390" fg:w="440"/><text x="21.5751%" y="511.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (9,765 samples, 7.89%)</title><rect x="13.8116%" y="725" width="7.8908%" height="15" fill="rgb(226,82,3)" fg:x="17092" fg:w="9765"/><text x="14.0616%" y="735.50">tremor_runt..</text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_TO&lt;_ErasedPtr&gt;::on_event (1,718 samples, 1.39%)</title><rect x="20.3142%" y="709" width="1.3883%" height="15" fill="rgb(240,164,32)" fg:x="25139" fg:w="1718"/><text x="20.5642%" y="719.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::_::&lt;impl tremor_runtime::connectors::sink::RawSink_trait::VTableInner_Ref&lt;_Self,_ErasedPtr&gt;&gt;::on_event (26 samples, 0.02%)</title><rect x="21.6814%" y="693" width="0.0210%" height="15" fill="rgb(232,46,7)" fg:x="26831" fg:w="26"/><text x="21.9314%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (33 samples, 0.03%)</title><rect x="22.0128%" y="693" width="0.0267%" height="15" fill="rgb(229,129,53)" fg:x="27241" fg:w="33"/><text x="22.2628%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (33 samples, 0.03%)</title><rect x="22.0128%" y="677" width="0.0267%" height="15" fill="rgb(234,188,29)" fg:x="27241" fg:w="33"/><text x="22.2628%" y="687.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (33 samples, 0.03%)</title><rect x="22.0128%" y="661" width="0.0267%" height="15" fill="rgb(246,141,4)" fg:x="27241" fg:w="33"/><text x="22.2628%" y="671.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (18 samples, 0.01%)</title><rect x="22.0249%" y="645" width="0.0145%" height="15" fill="rgb(229,23,39)" fg:x="27256" fg:w="18"/><text x="22.2749%" y="655.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (18 samples, 0.01%)</title><rect x="22.0249%" y="629" width="0.0145%" height="15" fill="rgb(206,12,3)" fg:x="27256" fg:w="18"/><text x="22.2749%" y="639.50"></text></g><g><title>sn_rust_dealloc (196 samples, 0.16%)</title><rect x="22.0499%" y="629" width="0.1584%" height="15" fill="rgb(252,226,20)" fg:x="27287" fg:w="196"/><text x="22.2999%" y="639.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,680 samples, 8.63%)</title><rect x="13.5797%" y="741" width="8.6302%" height="15" fill="rgb(216,123,35)" fg:x="16805" fg:w="10680"/><text x="13.8297%" y="751.50">&lt;core::futur..</text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (627 samples, 0.51%)</title><rect x="21.7033%" y="725" width="0.5067%" height="15" fill="rgb(212,68,40)" fg:x="26858" fg:w="627"/><text x="21.9533%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (244 samples, 0.20%)</title><rect x="22.0128%" y="709" width="0.1972%" height="15" fill="rgb(254,125,32)" fg:x="27241" fg:w="244"/><text x="22.2628%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (211 samples, 0.17%)</title><rect x="22.0394%" y="693" width="0.1705%" height="15" fill="rgb(253,97,22)" fg:x="27274" fg:w="211"/><text x="22.2894%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (211 samples, 0.17%)</title><rect x="22.0394%" y="677" width="0.1705%" height="15" fill="rgb(241,101,14)" fg:x="27274" fg:w="211"/><text x="22.2894%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (211 samples, 0.17%)</title><rect x="22.0394%" y="661" width="0.1705%" height="15" fill="rgb(238,103,29)" fg:x="27274" fg:w="211"/><text x="22.2894%" y="671.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (211 samples, 0.17%)</title><rect x="22.0394%" y="645" width="0.1705%" height="15" fill="rgb(233,195,47)" fg:x="27274" fg:w="211"/><text x="22.2894%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_ptr (15 samples, 0.01%)</title><rect x="22.2544%" y="613" width="0.0121%" height="15" fill="rgb(246,218,30)" fg:x="27540" fg:w="15"/><text x="22.5044%" y="623.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (19 samples, 0.02%)</title><rect x="22.3352%" y="469" width="0.0154%" height="15" fill="rgb(219,145,47)" fg:x="27640" fg:w="19"/><text x="22.5852%" y="479.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (125 samples, 0.10%)</title><rect x="22.2544%" y="629" width="0.1010%" height="15" fill="rgb(243,12,26)" fg:x="27540" fg:w="125"/><text x="22.5044%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (110 samples, 0.09%)</title><rect x="22.2665%" y="613" width="0.0889%" height="15" fill="rgb(214,87,16)" fg:x="27555" fg:w="110"/><text x="22.5165%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (110 samples, 0.09%)</title><rect x="22.2665%" y="597" width="0.0889%" height="15" fill="rgb(208,99,42)" fg:x="27555" fg:w="110"/><text x="22.5165%" y="607.50"></text></g><g><title>alloc::alloc::exchange_malloc (91 samples, 0.07%)</title><rect x="22.2818%" y="581" width="0.0735%" height="15" fill="rgb(253,99,2)" fg:x="27574" fg:w="91"/><text x="22.5318%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (91 samples, 0.07%)</title><rect x="22.2818%" y="565" width="0.0735%" height="15" fill="rgb(220,168,23)" fg:x="27574" fg:w="91"/><text x="22.5318%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (91 samples, 0.07%)</title><rect x="22.2818%" y="549" width="0.0735%" height="15" fill="rgb(242,38,24)" fg:x="27574" fg:w="91"/><text x="22.5318%" y="559.50"></text></g><g><title>alloc::alloc::alloc (88 samples, 0.07%)</title><rect x="22.2843%" y="533" width="0.0711%" height="15" fill="rgb(225,182,9)" fg:x="27577" fg:w="88"/><text x="22.5343%" y="543.50"></text></g><g><title>__rg_alloc (88 samples, 0.07%)</title><rect x="22.2843%" y="517" width="0.0711%" height="15" fill="rgb(243,178,37)" fg:x="27577" fg:w="88"/><text x="22.5343%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (88 samples, 0.07%)</title><rect x="22.2843%" y="501" width="0.0711%" height="15" fill="rgb(232,139,19)" fg:x="27577" fg:w="88"/><text x="22.5343%" y="511.50"></text></g><g><title>sn_rust_alloc (82 samples, 0.07%)</title><rect x="22.2891%" y="485" width="0.0663%" height="15" fill="rgb(225,201,24)" fg:x="27583" fg:w="82"/><text x="22.5391%" y="495.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (176 samples, 0.14%)</title><rect x="22.2366%" y="709" width="0.1422%" height="15" fill="rgb(221,47,46)" fg:x="27518" fg:w="176"/><text x="22.4866%" y="719.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (164 samples, 0.13%)</title><rect x="22.2463%" y="693" width="0.1325%" height="15" fill="rgb(249,23,13)" fg:x="27530" fg:w="164"/><text x="22.4963%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (164 samples, 0.13%)</title><rect x="22.2463%" y="677" width="0.1325%" height="15" fill="rgb(219,9,5)" fg:x="27530" fg:w="164"/><text x="22.4963%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (154 samples, 0.12%)</title><rect x="22.2544%" y="661" width="0.1244%" height="15" fill="rgb(254,171,16)" fg:x="27540" fg:w="154"/><text x="22.5044%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (154 samples, 0.12%)</title><rect x="22.2544%" y="645" width="0.1244%" height="15" fill="rgb(230,171,20)" fg:x="27540" fg:w="154"/><text x="22.5044%" y="655.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::iter (29 samples, 0.02%)</title><rect x="22.3554%" y="629" width="0.0234%" height="15" fill="rgb(210,71,41)" fg:x="27665" fg:w="29"/><text x="22.6054%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (27 samples, 0.02%)</title><rect x="22.3570%" y="613" width="0.0218%" height="15" fill="rgb(206,173,20)" fg:x="27667" fg:w="27"/><text x="22.6070%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (27 samples, 0.02%)</title><rect x="22.3570%" y="597" width="0.0218%" height="15" fill="rgb(233,88,34)" fg:x="27667" fg:w="27"/><text x="22.6070%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (15 samples, 0.01%)</title><rect x="22.3667%" y="581" width="0.0121%" height="15" fill="rgb(223,209,46)" fg:x="27679" fg:w="15"/><text x="22.6167%" y="591.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (97 samples, 0.08%)</title><rect x="22.7255%" y="629" width="0.0784%" height="15" fill="rgb(250,43,18)" fg:x="28123" fg:w="97"/><text x="22.9755%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (97 samples, 0.08%)</title><rect x="22.7255%" y="613" width="0.0784%" height="15" fill="rgb(208,13,10)" fg:x="28123" fg:w="97"/><text x="22.9755%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (79 samples, 0.06%)</title><rect x="22.7400%" y="597" width="0.0638%" height="15" fill="rgb(212,200,36)" fg:x="28141" fg:w="79"/><text x="22.9900%" y="607.50"></text></g><g><title>alloc::alloc::exchange_malloc (64 samples, 0.05%)</title><rect x="22.7521%" y="581" width="0.0517%" height="15" fill="rgb(225,90,30)" fg:x="28156" fg:w="64"/><text x="23.0021%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (64 samples, 0.05%)</title><rect x="22.7521%" y="565" width="0.0517%" height="15" fill="rgb(236,182,39)" fg:x="28156" fg:w="64"/><text x="23.0021%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (64 samples, 0.05%)</title><rect x="22.7521%" y="549" width="0.0517%" height="15" fill="rgb(212,144,35)" fg:x="28156" fg:w="64"/><text x="23.0021%" y="559.50"></text></g><g><title>alloc::alloc::alloc (64 samples, 0.05%)</title><rect x="22.7521%" y="533" width="0.0517%" height="15" fill="rgb(228,63,44)" fg:x="28156" fg:w="64"/><text x="23.0021%" y="543.50"></text></g><g><title>__rg_alloc (64 samples, 0.05%)</title><rect x="22.7521%" y="517" width="0.0517%" height="15" fill="rgb(228,109,6)" fg:x="28156" fg:w="64"/><text x="23.0021%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (64 samples, 0.05%)</title><rect x="22.7521%" y="501" width="0.0517%" height="15" fill="rgb(238,117,24)" fg:x="28156" fg:w="64"/><text x="23.0021%" y="511.50"></text></g><g><title>sn_rust_alloc (51 samples, 0.04%)</title><rect x="22.7626%" y="485" width="0.0412%" height="15" fill="rgb(242,26,26)" fg:x="28169" fg:w="51"/><text x="23.0126%" y="495.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (136 samples, 0.11%)</title><rect x="22.7028%" y="677" width="0.1099%" height="15" fill="rgb(221,92,48)" fg:x="28095" fg:w="136"/><text x="22.9528%" y="687.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (126 samples, 0.10%)</title><rect x="22.7109%" y="661" width="0.1018%" height="15" fill="rgb(209,209,32)" fg:x="28105" fg:w="126"/><text x="22.9609%" y="671.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (126 samples, 0.10%)</title><rect x="22.7109%" y="645" width="0.1018%" height="15" fill="rgb(221,70,22)" fg:x="28105" fg:w="126"/><text x="22.9609%" y="655.50"></text></g><g><title>abi_stable::erased_types::iterator::next (37 samples, 0.03%)</title><rect x="22.8435%" y="629" width="0.0299%" height="15" fill="rgb(248,145,5)" fg:x="28269" fg:w="37"/><text x="23.0935%" y="639.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (26 samples, 0.02%)</title><rect x="22.8523%" y="613" width="0.0210%" height="15" fill="rgb(226,116,26)" fg:x="28280" fg:w="26"/><text x="23.1023%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.01%)</title><rect x="22.8596%" y="597" width="0.0137%" height="15" fill="rgb(244,5,17)" fg:x="28289" fg:w="17"/><text x="23.1096%" y="607.50"></text></g><g><title>&lt;halfbrown::iter::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.01%)</title><rect x="22.8596%" y="581" width="0.0137%" height="15" fill="rgb(252,159,33)" fg:x="28289" fg:w="17"/><text x="23.1096%" y="591.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.01%)</title><rect x="22.8596%" y="565" width="0.0137%" height="15" fill="rgb(206,71,0)" fg:x="28289" fg:w="17"/><text x="23.1096%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.01%)</title><rect x="22.8596%" y="549" width="0.0137%" height="15" fill="rgb(233,118,54)" fg:x="28289" fg:w="17"/><text x="23.1096%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.01%)</title><rect x="22.8596%" y="533" width="0.0137%" height="15" fill="rgb(234,83,48)" fg:x="28289" fg:w="17"/><text x="23.1096%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (65 samples, 0.05%)</title><rect x="22.8362%" y="661" width="0.0525%" height="15" fill="rgb(228,3,54)" fg:x="28260" fg:w="65"/><text x="23.0862%" y="671.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (65 samples, 0.05%)</title><rect x="22.8362%" y="645" width="0.0525%" height="15" fill="rgb(226,155,13)" fg:x="28260" fg:w="65"/><text x="23.0862%" y="655.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (19 samples, 0.02%)</title><rect x="22.8734%" y="629" width="0.0154%" height="15" fill="rgb(241,28,37)" fg:x="28306" fg:w="19"/><text x="23.1234%" y="639.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (19 samples, 0.02%)</title><rect x="22.8734%" y="613" width="0.0154%" height="15" fill="rgb(233,93,10)" fg:x="28306" fg:w="19"/><text x="23.1234%" y="623.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (19 samples, 0.02%)</title><rect x="22.8734%" y="597" width="0.0154%" height="15" fill="rgb(225,113,19)" fg:x="28306" fg:w="19"/><text x="23.1234%" y="607.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (19 samples, 0.02%)</title><rect x="22.8734%" y="581" width="0.0154%" height="15" fill="rgb(241,2,18)" fg:x="28306" fg:w="19"/><text x="23.1234%" y="591.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint (27 samples, 0.02%)</title><rect x="22.8911%" y="629" width="0.0218%" height="15" fill="rgb(228,207,21)" fg:x="28328" fg:w="27"/><text x="23.1411%" y="639.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint::{{closure}} (27 samples, 0.02%)</title><rect x="22.8911%" y="613" width="0.0218%" height="15" fill="rgb(213,211,35)" fg:x="28328" fg:w="27"/><text x="23.1411%" y="623.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (14 samples, 0.01%)</title><rect x="22.9129%" y="597" width="0.0113%" height="15" fill="rgb(209,83,10)" fg:x="28355" fg:w="14"/><text x="23.1629%" y="607.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (14 samples, 0.01%)</title><rect x="22.9129%" y="581" width="0.0113%" height="15" fill="rgb(209,164,1)" fg:x="28355" fg:w="14"/><text x="23.1629%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (54 samples, 0.04%)</title><rect x="22.8887%" y="661" width="0.0436%" height="15" fill="rgb(213,184,43)" fg:x="28325" fg:w="54"/><text x="23.1387%" y="671.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (54 samples, 0.04%)</title><rect x="22.8887%" y="645" width="0.0436%" height="15" fill="rgb(231,61,34)" fg:x="28325" fg:w="54"/><text x="23.1387%" y="655.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (24 samples, 0.02%)</title><rect x="22.9129%" y="629" width="0.0194%" height="15" fill="rgb(235,75,3)" fg:x="28355" fg:w="24"/><text x="23.1629%" y="639.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (24 samples, 0.02%)</title><rect x="22.9129%" y="613" width="0.0194%" height="15" fill="rgb(220,106,47)" fg:x="28355" fg:w="24"/><text x="23.1629%" y="623.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (35 samples, 0.03%)</title><rect x="22.9323%" y="661" width="0.0283%" height="15" fill="rgb(210,196,33)" fg:x="28379" fg:w="35"/><text x="23.1823%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (31 samples, 0.03%)</title><rect x="22.9356%" y="645" width="0.0251%" height="15" fill="rgb(229,154,42)" fg:x="28383" fg:w="31"/><text x="23.1856%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (27 samples, 0.02%)</title><rect x="22.9388%" y="629" width="0.0218%" height="15" fill="rgb(228,114,26)" fg:x="28387" fg:w="27"/><text x="23.1888%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (27 samples, 0.02%)</title><rect x="22.9388%" y="613" width="0.0218%" height="15" fill="rgb(208,144,1)" fg:x="28387" fg:w="27"/><text x="23.1888%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (27 samples, 0.02%)</title><rect x="22.9388%" y="597" width="0.0218%" height="15" fill="rgb(239,112,37)" fg:x="28387" fg:w="27"/><text x="23.1888%" y="607.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (27 samples, 0.02%)</title><rect x="22.9388%" y="581" width="0.0218%" height="15" fill="rgb(210,96,50)" fg:x="28387" fg:w="27"/><text x="23.1888%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (13 samples, 0.01%)</title><rect x="22.9501%" y="565" width="0.0105%" height="15" fill="rgb(222,178,2)" fg:x="28401" fg:w="13"/><text x="23.2001%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (13 samples, 0.01%)</title><rect x="22.9501%" y="549" width="0.0105%" height="15" fill="rgb(226,74,18)" fg:x="28401" fg:w="13"/><text x="23.2001%" y="559.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (26 samples, 0.02%)</title><rect x="22.9824%" y="549" width="0.0210%" height="15" fill="rgb(225,67,54)" fg:x="28441" fg:w="26"/><text x="23.2324%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;core::iter::adapters::map::Map&lt;halfbrown::iter::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="22.9921%" y="533" width="0.0113%" height="15" fill="rgb(251,92,32)" fg:x="28453" fg:w="14"/><text x="23.2421%" y="543.50"></text></g><g><title>alloc::alloc::box_free (14 samples, 0.01%)</title><rect x="22.9921%" y="517" width="0.0113%" height="15" fill="rgb(228,149,22)" fg:x="28453" fg:w="14"/><text x="23.2421%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.01%)</title><rect x="22.9921%" y="501" width="0.0113%" height="15" fill="rgb(243,54,13)" fg:x="28453" fg:w="14"/><text x="23.2421%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.01%)</title><rect x="22.9921%" y="485" width="0.0113%" height="15" fill="rgb(243,180,28)" fg:x="28453" fg:w="14"/><text x="23.2421%" y="495.50"></text></g><g><title>__rg_dealloc (14 samples, 0.01%)</title><rect x="22.9921%" y="469" width="0.0113%" height="15" fill="rgb(208,167,24)" fg:x="28453" fg:w="14"/><text x="23.2421%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (14 samples, 0.01%)</title><rect x="22.9921%" y="453" width="0.0113%" height="15" fill="rgb(245,73,45)" fg:x="28453" fg:w="14"/><text x="23.2421%" y="463.50"></text></g><g><title>sn_rust_dealloc (58 samples, 0.05%)</title><rect x="23.0035%" y="549" width="0.0469%" height="15" fill="rgb(237,203,48)" fg:x="28467" fg:w="58"/><text x="23.2535%" y="559.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (1,043 samples, 0.84%)</title><rect x="22.2099%" y="741" width="0.8428%" height="15" fill="rgb(211,197,16)" fg:x="27485" fg:w="1043"/><text x="22.4599%" y="751.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (1,011 samples, 0.82%)</title><rect x="22.2358%" y="725" width="0.8170%" height="15" fill="rgb(243,99,51)" fg:x="27517" fg:w="1011"/><text x="22.4858%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (834 samples, 0.67%)</title><rect x="22.3788%" y="709" width="0.6739%" height="15" fill="rgb(215,123,29)" fg:x="27694" fg:w="834"/><text x="22.6288%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (439 samples, 0.35%)</title><rect x="22.6980%" y="693" width="0.3547%" height="15" fill="rgb(239,186,37)" fg:x="28089" fg:w="439"/><text x="22.9480%" y="703.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (297 samples, 0.24%)</title><rect x="22.8127%" y="677" width="0.2400%" height="15" fill="rgb(252,136,39)" fg:x="28231" fg:w="297"/><text x="23.0627%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (114 samples, 0.09%)</title><rect x="22.9606%" y="661" width="0.0921%" height="15" fill="rgb(223,213,32)" fg:x="28414" fg:w="114"/><text x="23.2106%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (114 samples, 0.09%)</title><rect x="22.9606%" y="645" width="0.0921%" height="15" fill="rgb(233,115,5)" fg:x="28414" fg:w="114"/><text x="23.2106%" y="655.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (114 samples, 0.09%)</title><rect x="22.9606%" y="629" width="0.0921%" height="15" fill="rgb(207,226,44)" fg:x="28414" fg:w="114"/><text x="23.2106%" y="639.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (104 samples, 0.08%)</title><rect x="22.9687%" y="613" width="0.0840%" height="15" fill="rgb(208,126,0)" fg:x="28424" fg:w="104"/><text x="23.2187%" y="623.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (103 samples, 0.08%)</title><rect x="22.9695%" y="597" width="0.0832%" height="15" fill="rgb(244,66,21)" fg:x="28425" fg:w="103"/><text x="23.2195%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (103 samples, 0.08%)</title><rect x="22.9695%" y="581" width="0.0832%" height="15" fill="rgb(222,97,12)" fg:x="28425" fg:w="103"/><text x="23.2195%" y="591.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (103 samples, 0.08%)</title><rect x="22.9695%" y="565" width="0.0832%" height="15" fill="rgb(219,213,19)" fg:x="28425" fg:w="103"/><text x="23.2195%" y="575.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (13 samples, 0.01%)</title><rect x="23.1125%" y="693" width="0.0105%" height="15" fill="rgb(252,169,30)" fg:x="28602" fg:w="13"/><text x="23.3625%" y="703.50"></text></g><g><title>&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt; as core::convert::From&lt;alloc::vec::Vec&lt;T&gt;&gt;&gt;::from (13 samples, 0.01%)</title><rect x="23.1125%" y="677" width="0.0105%" height="15" fill="rgb(206,32,51)" fg:x="28602" fg:w="13"/><text x="23.3625%" y="687.50"></text></g><g><title>&lt;tremor_pipeline::EventId as core::clone::Clone&gt;::clone (79 samples, 0.06%)</title><rect x="23.0657%" y="725" width="0.0638%" height="15" fill="rgb(250,172,42)" fg:x="28544" fg:w="79"/><text x="23.3157%" y="735.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (43 samples, 0.03%)</title><rect x="23.0948%" y="709" width="0.0347%" height="15" fill="rgb(209,34,43)" fg:x="28580" fg:w="43"/><text x="23.3448%" y="719.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_ptr (13 samples, 0.01%)</title><rect x="23.2362%" y="597" width="0.0105%" height="15" fill="rgb(223,11,35)" fg:x="28755" fg:w="13"/><text x="23.4862%" y="607.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (17 samples, 0.01%)</title><rect x="23.3057%" y="453" width="0.0137%" height="15" fill="rgb(251,219,26)" fg:x="28841" fg:w="17"/><text x="23.5557%" y="463.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (106 samples, 0.09%)</title><rect x="23.2362%" y="613" width="0.0857%" height="15" fill="rgb(231,119,3)" fg:x="28755" fg:w="106"/><text x="23.4862%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (93 samples, 0.08%)</title><rect x="23.2467%" y="597" width="0.0752%" height="15" fill="rgb(216,97,11)" fg:x="28768" fg:w="93"/><text x="23.4967%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (93 samples, 0.08%)</title><rect x="23.2467%" y="581" width="0.0752%" height="15" fill="rgb(223,59,9)" fg:x="28768" fg:w="93"/><text x="23.4967%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (73 samples, 0.06%)</title><rect x="23.2628%" y="565" width="0.0590%" height="15" fill="rgb(233,93,31)" fg:x="28788" fg:w="73"/><text x="23.5128%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (73 samples, 0.06%)</title><rect x="23.2628%" y="549" width="0.0590%" height="15" fill="rgb(239,81,33)" fg:x="28788" fg:w="73"/><text x="23.5128%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (73 samples, 0.06%)</title><rect x="23.2628%" y="533" width="0.0590%" height="15" fill="rgb(213,120,34)" fg:x="28788" fg:w="73"/><text x="23.5128%" y="543.50"></text></g><g><title>alloc::alloc::alloc (73 samples, 0.06%)</title><rect x="23.2628%" y="517" width="0.0590%" height="15" fill="rgb(243,49,53)" fg:x="28788" fg:w="73"/><text x="23.5128%" y="527.50"></text></g><g><title>__rg_alloc (73 samples, 0.06%)</title><rect x="23.2628%" y="501" width="0.0590%" height="15" fill="rgb(247,216,33)" fg:x="28788" fg:w="73"/><text x="23.5128%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (73 samples, 0.06%)</title><rect x="23.2628%" y="485" width="0.0590%" height="15" fill="rgb(226,26,14)" fg:x="28788" fg:w="73"/><text x="23.5128%" y="495.50"></text></g><g><title>sn_rust_alloc (67 samples, 0.05%)</title><rect x="23.2677%" y="469" width="0.0541%" height="15" fill="rgb(215,49,53)" fg:x="28794" fg:w="67"/><text x="23.5177%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (39 samples, 0.03%)</title><rect x="24.0548%" y="549" width="0.0315%" height="15" fill="rgb(245,162,40)" fg:x="29768" fg:w="39"/><text x="24.3048%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (39 samples, 0.03%)</title><rect x="24.0548%" y="533" width="0.0315%" height="15" fill="rgb(229,68,17)" fg:x="29768" fg:w="39"/><text x="24.3048%" y="543.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (84 samples, 0.07%)</title><rect x="24.0863%" y="549" width="0.0679%" height="15" fill="rgb(213,182,10)" fg:x="29807" fg:w="84"/><text x="24.3363%" y="559.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (84 samples, 0.07%)</title><rect x="24.0863%" y="533" width="0.0679%" height="15" fill="rgb(245,125,30)" fg:x="29807" fg:w="84"/><text x="24.3363%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (156 samples, 0.13%)</title><rect x="24.0548%" y="565" width="0.1261%" height="15" fill="rgb(232,202,2)" fg:x="29768" fg:w="156"/><text x="24.3048%" y="575.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_full (33 samples, 0.03%)</title><rect x="24.1541%" y="549" width="0.0267%" height="15" fill="rgb(237,140,51)" fg:x="29891" fg:w="33"/><text x="24.4041%" y="559.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (28 samples, 0.02%)</title><rect x="24.1582%" y="533" width="0.0226%" height="15" fill="rgb(236,157,25)" fg:x="29896" fg:w="28"/><text x="24.4082%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (28 samples, 0.02%)</title><rect x="24.1582%" y="517" width="0.0226%" height="15" fill="rgb(219,209,0)" fg:x="29896" fg:w="28"/><text x="24.4082%" y="527.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (1,205 samples, 0.97%)</title><rect x="23.2200%" y="693" width="0.9737%" height="15" fill="rgb(240,116,54)" fg:x="28735" fg:w="1205"/><text x="23.4700%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (1,196 samples, 0.97%)</title><rect x="23.2273%" y="677" width="0.9665%" height="15" fill="rgb(216,10,36)" fg:x="28744" fg:w="1196"/><text x="23.4773%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (1,185 samples, 0.96%)</title><rect x="23.2362%" y="661" width="0.9576%" height="15" fill="rgb(222,72,44)" fg:x="28755" fg:w="1185"/><text x="23.4862%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (1,185 samples, 0.96%)</title><rect x="23.2362%" y="645" width="0.9576%" height="15" fill="rgb(232,159,9)" fg:x="28755" fg:w="1185"/><text x="23.4862%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (1,185 samples, 0.96%)</title><rect x="23.2362%" y="629" width="0.9576%" height="15" fill="rgb(210,39,32)" fg:x="28755" fg:w="1185"/><text x="23.4862%" y="639.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::iter (1,079 samples, 0.87%)</title><rect x="23.3218%" y="613" width="0.8719%" height="15" fill="rgb(216,194,45)" fg:x="28861" fg:w="1079"/><text x="23.5718%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (210 samples, 0.17%)</title><rect x="24.0240%" y="597" width="0.1697%" height="15" fill="rgb(218,18,35)" fg:x="29730" fg:w="210"/><text x="24.2740%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (210 samples, 0.17%)</title><rect x="24.0240%" y="581" width="0.1697%" height="15" fill="rgb(207,83,51)" fg:x="29730" fg:w="210"/><text x="24.2740%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::buckets (16 samples, 0.01%)</title><rect x="24.1808%" y="565" width="0.0129%" height="15" fill="rgb(225,63,43)" fg:x="29924" fg:w="16"/><text x="24.4308%" y="575.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (95 samples, 0.08%)</title><rect x="24.4143%" y="613" width="0.0768%" height="15" fill="rgb(207,57,36)" fg:x="30213" fg:w="95"/><text x="24.6643%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (95 samples, 0.08%)</title><rect x="24.4143%" y="597" width="0.0768%" height="15" fill="rgb(216,99,33)" fg:x="30213" fg:w="95"/><text x="24.6643%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (73 samples, 0.06%)</title><rect x="24.4321%" y="581" width="0.0590%" height="15" fill="rgb(225,42,16)" fg:x="30235" fg:w="73"/><text x="24.6821%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (64 samples, 0.05%)</title><rect x="24.4394%" y="565" width="0.0517%" height="15" fill="rgb(220,201,45)" fg:x="30244" fg:w="64"/><text x="24.6894%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (64 samples, 0.05%)</title><rect x="24.4394%" y="549" width="0.0517%" height="15" fill="rgb(225,33,4)" fg:x="30244" fg:w="64"/><text x="24.6894%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (64 samples, 0.05%)</title><rect x="24.4394%" y="533" width="0.0517%" height="15" fill="rgb(224,33,50)" fg:x="30244" fg:w="64"/><text x="24.6894%" y="543.50"></text></g><g><title>alloc::alloc::alloc (63 samples, 0.05%)</title><rect x="24.4402%" y="517" width="0.0509%" height="15" fill="rgb(246,198,51)" fg:x="30245" fg:w="63"/><text x="24.6902%" y="527.50"></text></g><g><title>__rg_alloc (63 samples, 0.05%)</title><rect x="24.4402%" y="501" width="0.0509%" height="15" fill="rgb(205,22,4)" fg:x="30245" fg:w="63"/><text x="24.6902%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (63 samples, 0.05%)</title><rect x="24.4402%" y="485" width="0.0509%" height="15" fill="rgb(206,3,8)" fg:x="30245" fg:w="63"/><text x="24.6902%" y="495.50"></text></g><g><title>sn_rust_alloc (59 samples, 0.05%)</title><rect x="24.4434%" y="469" width="0.0477%" height="15" fill="rgb(251,23,15)" fg:x="30249" fg:w="59"/><text x="24.6934%" y="479.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (135 samples, 0.11%)</title><rect x="24.3893%" y="661" width="0.1091%" height="15" fill="rgb(252,88,28)" fg:x="30182" fg:w="135"/><text x="24.6393%" y="671.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (129 samples, 0.10%)</title><rect x="24.3941%" y="645" width="0.1042%" height="15" fill="rgb(212,127,14)" fg:x="30188" fg:w="129"/><text x="24.6441%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (129 samples, 0.10%)</title><rect x="24.3941%" y="629" width="0.1042%" height="15" fill="rgb(247,145,37)" fg:x="30188" fg:w="129"/><text x="24.6441%" y="639.50"></text></g><g><title>abi_stable::erased_types::iterator::next (56 samples, 0.05%)</title><rect x="24.5348%" y="613" width="0.0453%" height="15" fill="rgb(209,117,53)" fg:x="30362" fg:w="56"/><text x="24.7848%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (32 samples, 0.03%)</title><rect x="24.5541%" y="597" width="0.0259%" height="15" fill="rgb(212,90,42)" fg:x="30386" fg:w="32"/><text x="24.8041%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 0.02%)</title><rect x="24.5582%" y="581" width="0.0218%" height="15" fill="rgb(218,164,37)" fg:x="30391" fg:w="27"/><text x="24.8082%" y="591.50"></text></g><g><title>&lt;halfbrown::iter::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 0.02%)</title><rect x="24.5582%" y="565" width="0.0218%" height="15" fill="rgb(246,65,34)" fg:x="30391" fg:w="27"/><text x="24.8082%" y="575.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.02%)</title><rect x="24.5630%" y="549" width="0.0170%" height="15" fill="rgb(231,100,33)" fg:x="30397" fg:w="21"/><text x="24.8130%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.02%)</title><rect x="24.5630%" y="533" width="0.0170%" height="15" fill="rgb(228,126,14)" fg:x="30397" fg:w="21"/><text x="24.8130%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.02%)</title><rect x="24.5630%" y="517" width="0.0170%" height="15" fill="rgb(215,173,21)" fg:x="30397" fg:w="21"/><text x="24.8130%" y="527.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (17 samples, 0.01%)</title><rect x="24.5800%" y="581" width="0.0137%" height="15" fill="rgb(210,6,40)" fg:x="30418" fg:w="17"/><text x="24.8300%" y="591.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (17 samples, 0.01%)</title><rect x="24.5800%" y="565" width="0.0137%" height="15" fill="rgb(212,48,18)" fg:x="30418" fg:w="17"/><text x="24.8300%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (84 samples, 0.07%)</title><rect x="24.5275%" y="645" width="0.0679%" height="15" fill="rgb(230,214,11)" fg:x="30353" fg:w="84"/><text x="24.7775%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (84 samples, 0.07%)</title><rect x="24.5275%" y="629" width="0.0679%" height="15" fill="rgb(254,105,39)" fg:x="30353" fg:w="84"/><text x="24.7775%" y="639.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (19 samples, 0.02%)</title><rect x="24.5800%" y="613" width="0.0154%" height="15" fill="rgb(245,158,5)" fg:x="30418" fg:w="19"/><text x="24.8300%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (19 samples, 0.02%)</title><rect x="24.5800%" y="597" width="0.0154%" height="15" fill="rgb(249,208,11)" fg:x="30418" fg:w="19"/><text x="24.8300%" y="607.50"></text></g><g><title>&lt;abi_stable::std_types::tuple::Tuple2&lt;A,B&gt; as abi_stable::traits::IntoReprRust&gt;::into_rust (14 samples, 0.01%)</title><rect x="24.5954%" y="613" width="0.0113%" height="15" fill="rgb(210,39,28)" fg:x="30437" fg:w="14"/><text x="24.8454%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint (21 samples, 0.02%)</title><rect x="24.6115%" y="613" width="0.0170%" height="15" fill="rgb(211,56,53)" fg:x="30457" fg:w="21"/><text x="24.8615%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint::{{closure}} (16 samples, 0.01%)</title><rect x="24.6156%" y="597" width="0.0129%" height="15" fill="rgb(226,201,30)" fg:x="30462" fg:w="16"/><text x="24.8656%" y="607.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (14 samples, 0.01%)</title><rect x="24.6285%" y="581" width="0.0113%" height="15" fill="rgb(239,101,34)" fg:x="30478" fg:w="14"/><text x="24.8785%" y="591.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (14 samples, 0.01%)</title><rect x="24.6285%" y="565" width="0.0113%" height="15" fill="rgb(226,209,5)" fg:x="30478" fg:w="14"/><text x="24.8785%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (68 samples, 0.05%)</title><rect x="24.5954%" y="645" width="0.0549%" height="15" fill="rgb(250,105,47)" fg:x="30437" fg:w="68"/><text x="24.8454%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (68 samples, 0.05%)</title><rect x="24.5954%" y="629" width="0.0549%" height="15" fill="rgb(230,72,3)" fg:x="30437" fg:w="68"/><text x="24.8454%" y="639.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (27 samples, 0.02%)</title><rect x="24.6285%" y="613" width="0.0218%" height="15" fill="rgb(232,218,39)" fg:x="30478" fg:w="27"/><text x="24.8785%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (27 samples, 0.02%)</title><rect x="24.6285%" y="597" width="0.0218%" height="15" fill="rgb(248,166,6)" fg:x="30478" fg:w="27"/><text x="24.8785%" y="607.50"></text></g><g><title>abi_stable::erased_types::vtable::_::&lt;impl abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;&gt;::_iter (13 samples, 0.01%)</title><rect x="24.6398%" y="581" width="0.0105%" height="15" fill="rgb(247,89,20)" fg:x="30492" fg:w="13"/><text x="24.8898%" y="591.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (37 samples, 0.03%)</title><rect x="24.6503%" y="645" width="0.0299%" height="15" fill="rgb(248,130,54)" fg:x="30505" fg:w="37"/><text x="24.9003%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (33 samples, 0.03%)</title><rect x="24.6535%" y="629" width="0.0267%" height="15" fill="rgb(234,196,4)" fg:x="30509" fg:w="33"/><text x="24.9035%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (29 samples, 0.02%)</title><rect x="24.6568%" y="613" width="0.0234%" height="15" fill="rgb(250,143,31)" fg:x="30513" fg:w="29"/><text x="24.9068%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (28 samples, 0.02%)</title><rect x="24.6576%" y="597" width="0.0226%" height="15" fill="rgb(211,110,34)" fg:x="30514" fg:w="28"/><text x="24.9076%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (28 samples, 0.02%)</title><rect x="24.6576%" y="581" width="0.0226%" height="15" fill="rgb(215,124,48)" fg:x="30514" fg:w="28"/><text x="24.9076%" y="591.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (28 samples, 0.02%)</title><rect x="24.6576%" y="565" width="0.0226%" height="15" fill="rgb(216,46,13)" fg:x="30514" fg:w="28"/><text x="24.9076%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (16 samples, 0.01%)</title><rect x="24.6673%" y="549" width="0.0129%" height="15" fill="rgb(205,184,25)" fg:x="30526" fg:w="16"/><text x="24.9173%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (16 samples, 0.01%)</title><rect x="24.6673%" y="533" width="0.0129%" height="15" fill="rgb(228,1,10)" fg:x="30526" fg:w="16"/><text x="24.9173%" y="543.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (21 samples, 0.02%)</title><rect x="24.6980%" y="533" width="0.0170%" height="15" fill="rgb(213,116,27)" fg:x="30564" fg:w="21"/><text x="24.9480%" y="543.50"></text></g><g><title>sn_rust_dealloc (138 samples, 0.11%)</title><rect x="24.7150%" y="533" width="0.1115%" height="15" fill="rgb(241,95,50)" fg:x="30585" fg:w="138"/><text x="24.9650%" y="543.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::ContraflowData as core::convert::From&lt;&amp;tremor_pipeline::event::Event&gt;&gt;::from (2,197 samples, 1.78%)</title><rect x="23.0527%" y="741" width="1.7753%" height="15" fill="rgb(238,48,32)" fg:x="28528" fg:w="2197"/><text x="23.3027%" y="751.50">&lt;..</text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (2,102 samples, 1.70%)</title><rect x="23.1295%" y="725" width="1.6986%" height="15" fill="rgb(235,113,49)" fg:x="28623" fg:w="2102"/><text x="23.3795%" y="735.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (1,997 samples, 1.61%)</title><rect x="23.2144%" y="709" width="1.6137%" height="15" fill="rgb(205,127,43)" fg:x="28728" fg:w="1997"/><text x="23.4644%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (785 samples, 0.63%)</title><rect x="24.1937%" y="693" width="0.6343%" height="15" fill="rgb(250,162,2)" fg:x="29940" fg:w="785"/><text x="24.4437%" y="703.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (555 samples, 0.45%)</title><rect x="24.3796%" y="677" width="0.4485%" height="15" fill="rgb(220,13,41)" fg:x="30170" fg:w="555"/><text x="24.6296%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (408 samples, 0.33%)</title><rect x="24.4984%" y="661" width="0.3297%" height="15" fill="rgb(249,221,25)" fg:x="30317" fg:w="408"/><text x="24.7484%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (183 samples, 0.15%)</title><rect x="24.6802%" y="645" width="0.1479%" height="15" fill="rgb(215,208,19)" fg:x="30542" fg:w="183"/><text x="24.9302%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (183 samples, 0.15%)</title><rect x="24.6802%" y="629" width="0.1479%" height="15" fill="rgb(236,175,2)" fg:x="30542" fg:w="183"/><text x="24.9302%" y="639.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (183 samples, 0.15%)</title><rect x="24.6802%" y="613" width="0.1479%" height="15" fill="rgb(241,52,2)" fg:x="30542" fg:w="183"/><text x="24.9302%" y="623.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (179 samples, 0.14%)</title><rect x="24.6834%" y="597" width="0.1446%" height="15" fill="rgb(248,140,14)" fg:x="30546" fg:w="179"/><text x="24.9334%" y="607.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (179 samples, 0.14%)</title><rect x="24.6834%" y="581" width="0.1446%" height="15" fill="rgb(253,22,42)" fg:x="30546" fg:w="179"/><text x="24.9334%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (179 samples, 0.14%)</title><rect x="24.6834%" y="565" width="0.1446%" height="15" fill="rgb(234,61,47)" fg:x="30546" fg:w="179"/><text x="24.9334%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (179 samples, 0.14%)</title><rect x="24.6834%" y="549" width="0.1446%" height="15" fill="rgb(208,226,15)" fg:x="30546" fg:w="179"/><text x="24.9334%" y="559.50"></text></g><g><title>[libc-2.31.so] (1,786 samples, 1.44%)</title><rect x="24.8281%" y="741" width="1.4432%" height="15" fill="rgb(217,221,4)" fg:x="30725" fg:w="1786"/><text x="25.0781%" y="751.50"></text></g><g><title>sn_rust_dealloc (282 samples, 0.23%)</title><rect x="26.2883%" y="581" width="0.2279%" height="15" fill="rgb(212,174,34)" fg:x="32532" fg:w="282"/><text x="26.5383%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (305 samples, 0.25%)</title><rect x="26.2737%" y="741" width="0.2465%" height="15" fill="rgb(253,83,4)" fg:x="32514" fg:w="305"/><text x="26.5237%" y="751.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (305 samples, 0.25%)</title><rect x="26.2737%" y="725" width="0.2465%" height="15" fill="rgb(250,195,49)" fg:x="32514" fg:w="305"/><text x="26.5237%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (293 samples, 0.24%)</title><rect x="26.2834%" y="709" width="0.2368%" height="15" fill="rgb(241,192,25)" fg:x="32526" fg:w="293"/><text x="26.5334%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (293 samples, 0.24%)</title><rect x="26.2834%" y="693" width="0.2368%" height="15" fill="rgb(208,124,10)" fg:x="32526" fg:w="293"/><text x="26.5334%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (293 samples, 0.24%)</title><rect x="26.2834%" y="677" width="0.2368%" height="15" fill="rgb(222,33,0)" fg:x="32526" fg:w="293"/><text x="26.5334%" y="687.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (293 samples, 0.24%)</title><rect x="26.2834%" y="661" width="0.2368%" height="15" fill="rgb(234,209,28)" fg:x="32526" fg:w="293"/><text x="26.5334%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (293 samples, 0.24%)</title><rect x="26.2834%" y="645" width="0.2368%" height="15" fill="rgb(224,11,23)" fg:x="32526" fg:w="293"/><text x="26.5334%" y="655.50"></text></g><g><title>alloc::alloc::dealloc (293 samples, 0.24%)</title><rect x="26.2834%" y="629" width="0.2368%" height="15" fill="rgb(232,99,1)" fg:x="32526" fg:w="293"/><text x="26.5334%" y="639.50"></text></g><g><title>__rg_dealloc (293 samples, 0.24%)</title><rect x="26.2834%" y="613" width="0.2368%" height="15" fill="rgb(237,95,45)" fg:x="32526" fg:w="293"/><text x="26.5334%" y="623.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (293 samples, 0.24%)</title><rect x="26.2834%" y="597" width="0.2368%" height="15" fill="rgb(208,109,11)" fg:x="32526" fg:w="293"/><text x="26.5334%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt;&gt; (61 samples, 0.05%)</title><rect x="26.5202%" y="741" width="0.0493%" height="15" fill="rgb(216,190,48)" fg:x="32819" fg:w="61"/><text x="26.7702%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt; (61 samples, 0.05%)</title><rect x="26.5202%" y="725" width="0.0493%" height="15" fill="rgb(251,171,36)" fg:x="32819" fg:w="61"/><text x="26.7702%" y="735.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (86 samples, 0.07%)</title><rect x="26.6269%" y="725" width="0.0695%" height="15" fill="rgb(230,62,22)" fg:x="32951" fg:w="86"/><text x="26.8769%" y="735.50"></text></g><g><title>core::time::Duration::as_nanos (85 samples, 0.07%)</title><rect x="26.6963%" y="725" width="0.0687%" height="15" fill="rgb(225,114,35)" fg:x="33037" fg:w="85"/><text x="26.9463%" y="735.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (311 samples, 0.25%)</title><rect x="26.7650%" y="709" width="0.2513%" height="15" fill="rgb(215,118,42)" fg:x="33122" fg:w="311"/><text x="27.0150%" y="719.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (151 samples, 0.12%)</title><rect x="27.1246%" y="677" width="0.1220%" height="15" fill="rgb(243,119,21)" fg:x="33567" fg:w="151"/><text x="27.3746%" y="687.50"></text></g><g><title>core::cmp::PartialOrd::ge (151 samples, 0.12%)</title><rect x="27.1246%" y="661" width="0.1220%" height="15" fill="rgb(252,177,53)" fg:x="33567" fg:w="151"/><text x="27.3746%" y="671.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (150 samples, 0.12%)</title><rect x="27.1254%" y="645" width="0.1212%" height="15" fill="rgb(237,209,29)" fg:x="33568" fg:w="150"/><text x="27.3754%" y="655.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (72 samples, 0.06%)</title><rect x="27.1885%" y="629" width="0.0582%" height="15" fill="rgb(212,65,23)" fg:x="33646" fg:w="72"/><text x="27.4385%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (72 samples, 0.06%)</title><rect x="27.1885%" y="613" width="0.0582%" height="15" fill="rgb(230,222,46)" fg:x="33646" fg:w="72"/><text x="27.4385%" y="623.50"></text></g><g><title>std::time::SystemTime::duration_since (673 samples, 0.54%)</title><rect x="26.7650%" y="725" width="0.5438%" height="15" fill="rgb(215,135,32)" fg:x="33122" fg:w="673"/><text x="27.0150%" y="735.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (362 samples, 0.29%)</title><rect x="27.0163%" y="709" width="0.2925%" height="15" fill="rgb(246,101,22)" fg:x="33433" fg:w="362"/><text x="27.2663%" y="719.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (362 samples, 0.29%)</title><rect x="27.0163%" y="693" width="0.2925%" height="15" fill="rgb(206,107,13)" fg:x="33433" fg:w="362"/><text x="27.2663%" y="703.50"></text></g><g><title>core::time::Duration::new (77 samples, 0.06%)</title><rect x="27.2466%" y="677" width="0.0622%" height="15" fill="rgb(250,100,44)" fg:x="33718" fg:w="77"/><text x="27.4966%" y="687.50"></text></g><g><title>tremor_common::time::nanotime (2,401 samples, 1.94%)</title><rect x="26.5695%" y="741" width="1.9402%" height="15" fill="rgb(231,147,38)" fg:x="32880" fg:w="2401"/><text x="26.8195%" y="751.50">t..</text></g><g><title>std::time::SystemTime::now (1,486 samples, 1.20%)</title><rect x="27.3089%" y="725" width="1.2008%" height="15" fill="rgb(229,8,40)" fg:x="33795" fg:w="1486"/><text x="27.5589%" y="735.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (1,486 samples, 1.20%)</title><rect x="27.3089%" y="709" width="1.2008%" height="15" fill="rgb(221,135,30)" fg:x="33795" fg:w="1486"/><text x="27.5589%" y="719.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1,486 samples, 1.20%)</title><rect x="27.3089%" y="693" width="1.2008%" height="15" fill="rgb(249,193,18)" fg:x="33795" fg:w="1486"/><text x="27.5589%" y="703.50"></text></g><g><title>__clock_gettime (1,189 samples, 0.96%)</title><rect x="27.5489%" y="677" width="0.9608%" height="15" fill="rgb(209,133,39)" fg:x="34092" fg:w="1189"/><text x="27.7989%" y="687.50"></text></g><g><title>__vdso_clock_gettime (1,101 samples, 0.89%)</title><rect x="27.6200%" y="661" width="0.8897%" height="15" fill="rgb(232,100,14)" fg:x="34180" fg:w="1101"/><text x="27.8700%" y="671.50"></text></g><g><title>[[vdso]] (974 samples, 0.79%)</title><rect x="27.7226%" y="645" width="0.7871%" height="15" fill="rgb(224,185,1)" fg:x="34307" fg:w="974"/><text x="27.9726%" y="655.50"></text></g><g><title>abi_stable::erased_types::iterator::next (71 samples, 0.06%)</title><rect x="28.5420%" y="629" width="0.0574%" height="15" fill="rgb(223,139,8)" fg:x="35321" fg:w="71"/><text x="28.7920%" y="639.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (46 samples, 0.04%)</title><rect x="28.5622%" y="613" width="0.0372%" height="15" fill="rgb(232,213,38)" fg:x="35346" fg:w="46"/><text x="28.8122%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 0.04%)</title><rect x="28.5622%" y="597" width="0.0372%" height="15" fill="rgb(207,94,22)" fg:x="35346" fg:w="46"/><text x="28.8122%" y="607.50"></text></g><g><title>&lt;halfbrown::iter::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.03%)</title><rect x="28.5711%" y="581" width="0.0283%" height="15" fill="rgb(219,183,54)" fg:x="35357" fg:w="35"/><text x="28.8211%" y="591.50"></text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 0.03%)</title><rect x="28.5719%" y="565" width="0.0275%" height="15" fill="rgb(216,185,54)" fg:x="35358" fg:w="34"/><text x="28.8219%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 0.03%)</title><rect x="28.5719%" y="549" width="0.0275%" height="15" fill="rgb(254,217,39)" fg:x="35358" fg:w="34"/><text x="28.8219%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 0.03%)</title><rect x="28.5719%" y="533" width="0.0275%" height="15" fill="rgb(240,178,23)" fg:x="35358" fg:w="34"/><text x="28.8219%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.01%)</title><rect x="28.5856%" y="517" width="0.0137%" height="15" fill="rgb(218,11,47)" fg:x="35375" fg:w="17"/><text x="28.8356%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (102 samples, 0.08%)</title><rect x="28.5299%" y="693" width="0.0824%" height="15" fill="rgb(218,51,51)" fg:x="35306" fg:w="102"/><text x="28.7799%" y="703.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (102 samples, 0.08%)</title><rect x="28.5299%" y="677" width="0.0824%" height="15" fill="rgb(238,126,27)" fg:x="35306" fg:w="102"/><text x="28.7799%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (102 samples, 0.08%)</title><rect x="28.5299%" y="661" width="0.0824%" height="15" fill="rgb(249,202,22)" fg:x="35306" fg:w="102"/><text x="28.7799%" y="671.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (102 samples, 0.08%)</title><rect x="28.5299%" y="645" width="0.0824%" height="15" fill="rgb(254,195,49)" fg:x="35306" fg:w="102"/><text x="28.7799%" y="655.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (16 samples, 0.01%)</title><rect x="28.5994%" y="629" width="0.0129%" height="15" fill="rgb(208,123,14)" fg:x="35392" fg:w="16"/><text x="28.8494%" y="639.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (16 samples, 0.01%)</title><rect x="28.5994%" y="613" width="0.0129%" height="15" fill="rgb(224,200,8)" fg:x="35392" fg:w="16"/><text x="28.8494%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint (25 samples, 0.02%)</title><rect x="28.6268%" y="629" width="0.0202%" height="15" fill="rgb(217,61,36)" fg:x="35426" fg:w="25"/><text x="28.8768%" y="639.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint::{{closure}} (21 samples, 0.02%)</title><rect x="28.6301%" y="613" width="0.0170%" height="15" fill="rgb(206,35,45)" fg:x="35430" fg:w="21"/><text x="28.8801%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (13 samples, 0.01%)</title><rect x="28.6365%" y="597" width="0.0105%" height="15" fill="rgb(217,65,33)" fg:x="35438" fg:w="13"/><text x="28.8865%" y="607.50"></text></g><g><title>&lt;halfbrown::iter::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (13 samples, 0.01%)</title><rect x="28.6365%" y="581" width="0.0105%" height="15" fill="rgb(222,158,48)" fg:x="35438" fg:w="13"/><text x="28.8865%" y="591.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (15 samples, 0.01%)</title><rect x="28.6470%" y="597" width="0.0121%" height="15" fill="rgb(254,2,54)" fg:x="35451" fg:w="15"/><text x="28.8970%" y="607.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (15 samples, 0.01%)</title><rect x="28.6470%" y="581" width="0.0121%" height="15" fill="rgb(250,143,38)" fg:x="35451" fg:w="15"/><text x="28.8970%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (83 samples, 0.07%)</title><rect x="28.6123%" y="693" width="0.0671%" height="15" fill="rgb(248,25,0)" fg:x="35408" fg:w="83"/><text x="28.8623%" y="703.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::size_hint (83 samples, 0.07%)</title><rect x="28.6123%" y="677" width="0.0671%" height="15" fill="rgb(206,152,27)" fg:x="35408" fg:w="83"/><text x="28.8623%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (83 samples, 0.07%)</title><rect x="28.6123%" y="661" width="0.0671%" height="15" fill="rgb(240,77,30)" fg:x="35408" fg:w="83"/><text x="28.8623%" y="671.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (83 samples, 0.07%)</title><rect x="28.6123%" y="645" width="0.0671%" height="15" fill="rgb(231,5,3)" fg:x="35408" fg:w="83"/><text x="28.8623%" y="655.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (40 samples, 0.03%)</title><rect x="28.6470%" y="629" width="0.0323%" height="15" fill="rgb(207,226,32)" fg:x="35451" fg:w="40"/><text x="28.8970%" y="639.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (40 samples, 0.03%)</title><rect x="28.6470%" y="613" width="0.0323%" height="15" fill="rgb(222,207,47)" fg:x="35451" fg:w="40"/><text x="28.8970%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::_::&lt;impl abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;&gt;::_iter (25 samples, 0.02%)</title><rect x="28.6592%" y="597" width="0.0202%" height="15" fill="rgb(229,115,45)" fg:x="35466" fg:w="25"/><text x="28.9092%" y="607.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;abi_stable::std_types::tuple::Tuple2&lt;K,V&gt;&gt;&gt;::extend (271 samples, 0.22%)</title><rect x="28.5097%" y="725" width="0.2190%" height="15" fill="rgb(224,191,6)" fg:x="35281" fg:w="271"/><text x="28.7597%" y="735.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (270 samples, 0.22%)</title><rect x="28.5105%" y="709" width="0.2182%" height="15" fill="rgb(230,227,24)" fg:x="35282" fg:w="270"/><text x="28.7605%" y="719.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (61 samples, 0.05%)</title><rect x="28.6794%" y="693" width="0.0493%" height="15" fill="rgb(228,80,19)" fg:x="35491" fg:w="61"/><text x="28.9294%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (53 samples, 0.04%)</title><rect x="28.6858%" y="677" width="0.0428%" height="15" fill="rgb(247,229,0)" fg:x="35499" fg:w="53"/><text x="28.9358%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (50 samples, 0.04%)</title><rect x="28.6883%" y="661" width="0.0404%" height="15" fill="rgb(237,194,15)" fg:x="35502" fg:w="50"/><text x="28.9383%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (48 samples, 0.04%)</title><rect x="28.6899%" y="645" width="0.0388%" height="15" fill="rgb(219,203,20)" fg:x="35504" fg:w="48"/><text x="28.9399%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (48 samples, 0.04%)</title><rect x="28.6899%" y="629" width="0.0388%" height="15" fill="rgb(234,128,8)" fg:x="35504" fg:w="48"/><text x="28.9399%" y="639.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (48 samples, 0.04%)</title><rect x="28.6899%" y="613" width="0.0388%" height="15" fill="rgb(248,202,8)" fg:x="35504" fg:w="48"/><text x="28.9399%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (15 samples, 0.01%)</title><rect x="28.7165%" y="597" width="0.0121%" height="15" fill="rgb(206,104,37)" fg:x="35537" fg:w="15"/><text x="28.9665%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (15 samples, 0.01%)</title><rect x="28.7165%" y="581" width="0.0121%" height="15" fill="rgb(223,8,27)" fg:x="35537" fg:w="15"/><text x="28.9665%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (21 samples, 0.02%)</title><rect x="29.0228%" y="485" width="0.0170%" height="15" fill="rgb(216,217,28)" fg:x="35916" fg:w="21"/><text x="29.2728%" y="495.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (355 samples, 0.29%)</title><rect x="28.7594%" y="645" width="0.2869%" height="15" fill="rgb(249,199,1)" fg:x="35590" fg:w="355"/><text x="29.0094%" y="655.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (355 samples, 0.29%)</title><rect x="28.7594%" y="629" width="0.2869%" height="15" fill="rgb(240,85,17)" fg:x="35590" fg:w="355"/><text x="29.0094%" y="639.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (320 samples, 0.26%)</title><rect x="28.7876%" y="613" width="0.2586%" height="15" fill="rgb(206,108,45)" fg:x="35625" fg:w="320"/><text x="29.0376%" y="623.50"></text></g><g><title>alloc::alloc::exchange_malloc (272 samples, 0.22%)</title><rect x="28.8264%" y="597" width="0.2198%" height="15" fill="rgb(245,210,41)" fg:x="35673" fg:w="272"/><text x="29.0764%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (272 samples, 0.22%)</title><rect x="28.8264%" y="581" width="0.2198%" height="15" fill="rgb(206,13,37)" fg:x="35673" fg:w="272"/><text x="29.0764%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (272 samples, 0.22%)</title><rect x="28.8264%" y="565" width="0.2198%" height="15" fill="rgb(250,61,18)" fg:x="35673" fg:w="272"/><text x="29.0764%" y="575.50"></text></g><g><title>alloc::alloc::alloc (266 samples, 0.21%)</title><rect x="28.8313%" y="549" width="0.2149%" height="15" fill="rgb(235,172,48)" fg:x="35679" fg:w="266"/><text x="29.0813%" y="559.50"></text></g><g><title>__rg_alloc (266 samples, 0.21%)</title><rect x="28.8313%" y="533" width="0.2149%" height="15" fill="rgb(249,201,17)" fg:x="35679" fg:w="266"/><text x="29.0813%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (266 samples, 0.21%)</title><rect x="28.8313%" y="517" width="0.2149%" height="15" fill="rgb(219,208,6)" fg:x="35679" fg:w="266"/><text x="29.0813%" y="527.50"></text></g><g><title>sn_rust_alloc (255 samples, 0.21%)</title><rect x="28.8402%" y="501" width="0.2061%" height="15" fill="rgb(248,31,23)" fg:x="35690" fg:w="255"/><text x="29.0902%" y="511.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (45 samples, 0.04%)</title><rect x="29.0632%" y="581" width="0.0364%" height="15" fill="rgb(245,15,42)" fg:x="35966" fg:w="45"/><text x="29.3132%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="29.0882%" y="565" width="0.0113%" height="15" fill="rgb(222,217,39)" fg:x="35997" fg:w="14"/><text x="29.3382%" y="575.50"></text></g><g><title>alloc::alloc::box_free (14 samples, 0.01%)</title><rect x="29.0882%" y="549" width="0.0113%" height="15" fill="rgb(210,219,27)" fg:x="35997" fg:w="14"/><text x="29.3382%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.01%)</title><rect x="29.0882%" y="533" width="0.0113%" height="15" fill="rgb(252,166,36)" fg:x="35997" fg:w="14"/><text x="29.3382%" y="543.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.01%)</title><rect x="29.0882%" y="517" width="0.0113%" height="15" fill="rgb(245,132,34)" fg:x="35997" fg:w="14"/><text x="29.3382%" y="527.50"></text></g><g><title>__rg_dealloc (14 samples, 0.01%)</title><rect x="29.0882%" y="501" width="0.0113%" height="15" fill="rgb(236,54,3)" fg:x="35997" fg:w="14"/><text x="29.3382%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (14 samples, 0.01%)</title><rect x="29.0882%" y="485" width="0.0113%" height="15" fill="rgb(241,173,43)" fg:x="35997" fg:w="14"/><text x="29.3382%" y="495.50"></text></g><g><title>sn_rust_dealloc (89 samples, 0.07%)</title><rect x="29.0996%" y="581" width="0.0719%" height="15" fill="rgb(215,190,9)" fg:x="36011" fg:w="89"/><text x="29.3496%" y="591.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::pointer_trait::OwnedPointer for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop_allocation (154 samples, 0.12%)</title><rect x="29.0543%" y="597" width="0.1244%" height="15" fill="rgb(242,101,16)" fg:x="35955" fg:w="154"/><text x="29.3043%" y="607.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (247 samples, 0.20%)</title><rect x="29.0543%" y="645" width="0.1996%" height="15" fill="rgb(223,190,21)" fg:x="35955" fg:w="247"/><text x="29.3043%" y="655.50"></text></g><g><title>core::ops::function::FnOnce::call_once (247 samples, 0.20%)</title><rect x="29.0543%" y="629" width="0.1996%" height="15" fill="rgb(215,228,25)" fg:x="35955" fg:w="247"/><text x="29.3043%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::into_inner (247 samples, 0.20%)</title><rect x="29.0543%" y="613" width="0.1996%" height="15" fill="rgb(225,36,22)" fg:x="35955" fg:w="247"/><text x="29.3043%" y="623.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (93 samples, 0.08%)</title><rect x="29.1788%" y="597" width="0.0752%" height="15" fill="rgb(251,106,46)" fg:x="36109" fg:w="93"/><text x="29.4288%" y="607.50"></text></g><g><title>core::ptr::read (93 samples, 0.08%)</title><rect x="29.1788%" y="581" width="0.0752%" height="15" fill="rgb(208,90,1)" fg:x="36109" fg:w="93"/><text x="29.4288%" y="591.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (699 samples, 0.56%)</title><rect x="28.7287%" y="725" width="0.5648%" height="15" fill="rgb(243,10,4)" fg:x="35552" fg:w="699"/><text x="28.9787%" y="735.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (687 samples, 0.56%)</title><rect x="28.7384%" y="709" width="0.5551%" height="15" fill="rgb(212,137,27)" fg:x="35564" fg:w="687"/><text x="28.9884%" y="719.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val (674 samples, 0.54%)</title><rect x="28.7489%" y="693" width="0.5446%" height="15" fill="rgb(231,220,49)" fg:x="35577" fg:w="674"/><text x="28.9989%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val::{{closure}} (672 samples, 0.54%)</title><rect x="28.7505%" y="677" width="0.5430%" height="15" fill="rgb(237,96,20)" fg:x="35579" fg:w="672"/><text x="29.0005%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val::{{closure}} (672 samples, 0.54%)</title><rect x="28.7505%" y="661" width="0.5430%" height="15" fill="rgb(239,229,30)" fg:x="35579" fg:w="672"/><text x="29.0005%" y="671.50"></text></g><g><title>halfbrown::iter::&lt;impl core::iter::traits::collect::IntoIterator for halfbrown::HashMap&lt;K,V,S&gt;&gt;::into_iter (49 samples, 0.04%)</title><rect x="29.2539%" y="645" width="0.0396%" height="15" fill="rgb(219,65,33)" fg:x="36202" fg:w="49"/><text x="29.5039%" y="655.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (68 samples, 0.05%)</title><rect x="29.3194%" y="613" width="0.0549%" height="15" fill="rgb(243,134,7)" fg:x="36283" fg:w="68"/><text x="29.5694%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;halfbrown::iter::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (29 samples, 0.02%)</title><rect x="29.3509%" y="597" width="0.0234%" height="15" fill="rgb(216,177,54)" fg:x="36322" fg:w="29"/><text x="29.6009%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::iter::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (29 samples, 0.02%)</title><rect x="29.3509%" y="581" width="0.0234%" height="15" fill="rgb(211,160,20)" fg:x="36322" fg:w="29"/><text x="29.6009%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::iter::IntoIterInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (29 samples, 0.02%)</title><rect x="29.3509%" y="565" width="0.0234%" height="15" fill="rgb(239,85,39)" fg:x="36322" fg:w="29"/><text x="29.6009%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (27 samples, 0.02%)</title><rect x="29.3525%" y="549" width="0.0218%" height="15" fill="rgb(232,125,22)" fg:x="36324" fg:w="27"/><text x="29.6025%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawIntoIter&lt;(abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value)&gt;&gt; (27 samples, 0.02%)</title><rect x="29.3525%" y="533" width="0.0218%" height="15" fill="rgb(244,57,34)" fg:x="36324" fg:w="27"/><text x="29.6025%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.02%)</title><rect x="29.3525%" y="517" width="0.0218%" height="15" fill="rgb(214,203,32)" fg:x="36324" fg:w="27"/><text x="29.6025%" y="527.50"></text></g><g><title>sn_rust_dealloc (110 samples, 0.09%)</title><rect x="29.3743%" y="613" width="0.0889%" height="15" fill="rgb(207,58,43)" fg:x="36351" fg:w="110"/><text x="29.6243%" y="623.50"></text></g><g><title>tremor_pipeline::OpMeta::merge (1,185 samples, 0.96%)</title><rect x="28.5097%" y="741" width="0.9576%" height="15" fill="rgb(215,193,15)" fg:x="35281" fg:w="1185"/><text x="28.7597%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (215 samples, 0.17%)</title><rect x="29.2935%" y="725" width="0.1737%" height="15" fill="rgb(232,15,44)" fg:x="36251" fg:w="215"/><text x="29.5435%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::ValIterInterface&lt;u32,u32&gt;&gt;&gt; (215 samples, 0.17%)</title><rect x="29.2935%" y="709" width="0.1737%" height="15" fill="rgb(212,3,48)" fg:x="36251" fg:w="215"/><text x="29.5435%" y="719.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (215 samples, 0.17%)</title><rect x="29.2935%" y="693" width="0.1737%" height="15" fill="rgb(218,128,7)" fg:x="36251" fg:w="215"/><text x="29.5435%" y="703.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (202 samples, 0.16%)</title><rect x="29.3040%" y="677" width="0.1632%" height="15" fill="rgb(226,216,39)" fg:x="36264" fg:w="202"/><text x="29.5540%" y="687.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (202 samples, 0.16%)</title><rect x="29.3040%" y="661" width="0.1632%" height="15" fill="rgb(243,47,51)" fg:x="36264" fg:w="202"/><text x="29.5540%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (202 samples, 0.16%)</title><rect x="29.3040%" y="645" width="0.1632%" height="15" fill="rgb(241,183,40)" fg:x="36264" fg:w="202"/><text x="29.5540%" y="655.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (202 samples, 0.16%)</title><rect x="29.3040%" y="629" width="0.1632%" height="15" fill="rgb(231,217,32)" fg:x="36264" fg:w="202"/><text x="29.5540%" y="639.50"></text></g><g><title>tremor_runtime::connectors::sink::handle_replies (30 samples, 0.02%)</title><rect x="29.4672%" y="741" width="0.0242%" height="15" fill="rgb(229,61,38)" fg:x="36466" fg:w="30"/><text x="29.7172%" y="751.50"></text></g><g><title>tremor_runtime::connectors::utils::metrics::SinkReporter::increment_in (17 samples, 0.01%)</title><rect x="29.4915%" y="741" width="0.0137%" height="15" fill="rgb(225,210,5)" fg:x="36496" fg:w="17"/><text x="29.7415%" y="751.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (21,004 samples, 16.97%)</title><rect x="12.5332%" y="757" width="16.9728%" height="15" fill="rgb(231,79,45)" fg:x="15510" fg:w="21004"/><text x="12.7832%" y="767.50">tremor_runtime::connectors..</text></g><g><title>&lt;abi_stable::std_types::utypeid::UTypeId as core::cmp::PartialEq&gt;::eq (22 samples, 0.02%)</title><rect x="29.5125%" y="645" width="0.0178%" height="15" fill="rgb(224,100,7)" fg:x="36522" fg:w="22"/><text x="29.7625%" y="655.50"></text></g><g><title>&lt;abi_stable::sabi_types::constructor::Constructor&lt;T&gt; as core::cmp::PartialEq&gt;::eq (53 samples, 0.04%)</title><rect x="29.5125%" y="661" width="0.0428%" height="15" fill="rgb(241,198,18)" fg:x="36522" fg:w="53"/><text x="29.7625%" y="671.50"></text></g><g><title>abi_stable::sabi_types::constructor::Constructor&lt;T&gt;::get (31 samples, 0.03%)</title><rect x="29.5303%" y="645" width="0.0251%" height="15" fill="rgb(252,97,53)" fg:x="36544" fg:w="31"/><text x="29.7803%" y="655.50"></text></g><g><title>abi_stable::std_types::utypeid::new_utypeid (24 samples, 0.02%)</title><rect x="29.5359%" y="629" width="0.0194%" height="15" fill="rgb(220,88,7)" fg:x="36551" fg:w="24"/><text x="29.7859%" y="639.50"></text></g><g><title>abi_stable::std_types::utypeid::UTypeId::new (21 samples, 0.02%)</title><rect x="29.5383%" y="613" width="0.0170%" height="15" fill="rgb(213,176,14)" fg:x="36554" fg:w="21"/><text x="29.7883%" y="623.50"></text></g><g><title>abi_stable::std_types::utypeid::get_typeid (17 samples, 0.01%)</title><rect x="29.5416%" y="597" width="0.0137%" height="15" fill="rgb(246,73,7)" fg:x="36558" fg:w="17"/><text x="29.7916%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::from_raw_parts (118 samples, 0.10%)</title><rect x="29.5602%" y="661" width="0.0954%" height="15" fill="rgb(245,64,36)" fg:x="36581" fg:w="118"/><text x="29.8102%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (118 samples, 0.10%)</title><rect x="29.5602%" y="645" width="0.0954%" height="15" fill="rgb(245,80,10)" fg:x="36581" fg:w="118"/><text x="29.8102%" y="655.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (194 samples, 0.16%)</title><rect x="29.5060%" y="709" width="0.1568%" height="15" fill="rgb(232,107,50)" fg:x="36514" fg:w="194"/><text x="29.7560%" y="719.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::convert::From&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from (194 samples, 0.16%)</title><rect x="29.5060%" y="693" width="0.1568%" height="15" fill="rgb(253,3,0)" fg:x="36514" fg:w="194"/><text x="29.7560%" y="703.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::into_vec (194 samples, 0.16%)</title><rect x="29.5060%" y="677" width="0.1568%" height="15" fill="rgb(212,99,53)" fg:x="36514" fg:w="194"/><text x="29.7560%" y="687.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (311 samples, 0.25%)</title><rect x="29.7105%" y="389" width="0.2513%" height="15" fill="rgb(249,111,54)" fg:x="36767" fg:w="311"/><text x="29.9605%" y="399.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (365 samples, 0.29%)</title><rect x="29.6693%" y="549" width="0.2949%" height="15" fill="rgb(249,55,30)" fg:x="36716" fg:w="365"/><text x="29.9193%" y="559.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (365 samples, 0.29%)</title><rect x="29.6693%" y="533" width="0.2949%" height="15" fill="rgb(237,47,42)" fg:x="36716" fg:w="365"/><text x="29.9193%" y="543.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (357 samples, 0.29%)</title><rect x="29.6757%" y="517" width="0.2885%" height="15" fill="rgb(211,20,18)" fg:x="36724" fg:w="357"/><text x="29.9257%" y="527.50"></text></g><g><title>alloc::alloc::exchange_malloc (349 samples, 0.28%)</title><rect x="29.6822%" y="501" width="0.2820%" height="15" fill="rgb(231,203,46)" fg:x="36732" fg:w="349"/><text x="29.9322%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (349 samples, 0.28%)</title><rect x="29.6822%" y="485" width="0.2820%" height="15" fill="rgb(237,142,3)" fg:x="36732" fg:w="349"/><text x="29.9322%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (349 samples, 0.28%)</title><rect x="29.6822%" y="469" width="0.2820%" height="15" fill="rgb(241,107,1)" fg:x="36732" fg:w="349"/><text x="29.9322%" y="479.50"></text></g><g><title>alloc::alloc::alloc (348 samples, 0.28%)</title><rect x="29.6830%" y="453" width="0.2812%" height="15" fill="rgb(229,83,13)" fg:x="36733" fg:w="348"/><text x="29.9330%" y="463.50"></text></g><g><title>__rg_alloc (348 samples, 0.28%)</title><rect x="29.6830%" y="437" width="0.2812%" height="15" fill="rgb(241,91,40)" fg:x="36733" fg:w="348"/><text x="29.9330%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (348 samples, 0.28%)</title><rect x="29.6830%" y="421" width="0.2812%" height="15" fill="rgb(225,3,45)" fg:x="36733" fg:w="348"/><text x="29.9330%" y="431.50"></text></g><g><title>sn_rust_alloc (344 samples, 0.28%)</title><rect x="29.6862%" y="405" width="0.2780%" height="15" fill="rgb(244,223,14)" fg:x="36737" fg:w="344"/><text x="29.9362%" y="415.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (375 samples, 0.30%)</title><rect x="29.6628%" y="597" width="0.3030%" height="15" fill="rgb(224,124,37)" fg:x="36708" fg:w="375"/><text x="29.9128%" y="607.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (375 samples, 0.30%)</title><rect x="29.6628%" y="581" width="0.3030%" height="15" fill="rgb(251,171,30)" fg:x="36708" fg:w="375"/><text x="29.9128%" y="591.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (375 samples, 0.30%)</title><rect x="29.6628%" y="565" width="0.3030%" height="15" fill="rgb(236,46,54)" fg:x="36708" fg:w="375"/><text x="29.9128%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (387 samples, 0.31%)</title><rect x="29.6628%" y="677" width="0.3127%" height="15" fill="rgb(245,213,5)" fg:x="36708" fg:w="387"/><text x="29.9128%" y="687.50"></text></g><g><title>core::ops::function::FnOnce::call_once (387 samples, 0.31%)</title><rect x="29.6628%" y="661" width="0.3127%" height="15" fill="rgb(230,144,27)" fg:x="36708" fg:w="387"/><text x="29.9128%" y="671.50"></text></g><g><title>value_trait::Builder::object (387 samples, 0.31%)</title><rect x="29.6628%" y="645" width="0.3127%" height="15" fill="rgb(220,86,6)" fg:x="36708" fg:w="387"/><text x="29.9128%" y="655.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (387 samples, 0.31%)</title><rect x="29.6628%" y="629" width="0.3127%" height="15" fill="rgb(240,20,13)" fg:x="36708" fg:w="387"/><text x="29.9128%" y="639.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (387 samples, 0.31%)</title><rect x="29.6628%" y="613" width="0.3127%" height="15" fill="rgb(217,89,34)" fg:x="36708" fg:w="387"/><text x="29.9128%" y="623.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (17 samples, 0.01%)</title><rect x="30.0086%" y="485" width="0.0137%" height="15" fill="rgb(229,13,5)" fg:x="37136" fg:w="17"/><text x="30.2586%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (17 samples, 0.01%)</title><rect x="30.0086%" y="469" width="0.0137%" height="15" fill="rgb(244,67,35)" fg:x="37136" fg:w="17"/><text x="30.2586%" y="479.50"></text></g><g><title>core::mem::drop (14 samples, 0.01%)</title><rect x="30.0111%" y="453" width="0.0113%" height="15" fill="rgb(221,40,2)" fg:x="37139" fg:w="14"/><text x="30.2611%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (14 samples, 0.01%)</title><rect x="30.0111%" y="437" width="0.0113%" height="15" fill="rgb(237,157,21)" fg:x="37139" fg:w="14"/><text x="30.2611%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (14 samples, 0.01%)</title><rect x="30.0111%" y="421" width="0.0113%" height="15" fill="rgb(222,94,11)" fg:x="37139" fg:w="14"/><text x="30.2611%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="30.0111%" y="405" width="0.0113%" height="15" fill="rgb(249,113,6)" fg:x="37139" fg:w="14"/><text x="30.2611%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (99 samples, 0.08%)</title><rect x="29.9901%" y="565" width="0.0800%" height="15" fill="rgb(238,137,36)" fg:x="37113" fg:w="99"/><text x="30.2401%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (99 samples, 0.08%)</title><rect x="29.9901%" y="549" width="0.0800%" height="15" fill="rgb(210,102,26)" fg:x="37113" fg:w="99"/><text x="30.2401%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (83 samples, 0.07%)</title><rect x="30.0030%" y="533" width="0.0671%" height="15" fill="rgb(218,30,30)" fg:x="37129" fg:w="83"/><text x="30.2530%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (83 samples, 0.07%)</title><rect x="30.0030%" y="517" width="0.0671%" height="15" fill="rgb(214,67,26)" fg:x="37129" fg:w="83"/><text x="30.2530%" y="527.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (83 samples, 0.07%)</title><rect x="30.0030%" y="501" width="0.0671%" height="15" fill="rgb(251,9,53)" fg:x="37129" fg:w="83"/><text x="30.2530%" y="511.50"></text></g><g><title>sn_rust_dealloc (59 samples, 0.05%)</title><rect x="30.0224%" y="485" width="0.0477%" height="15" fill="rgb(228,204,25)" fg:x="37153" fg:w="59"/><text x="30.2724%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (127 samples, 0.10%)</title><rect x="29.9755%" y="677" width="0.1026%" height="15" fill="rgb(207,153,8)" fg:x="37095" fg:w="127"/><text x="30.2255%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (127 samples, 0.10%)</title><rect x="29.9755%" y="661" width="0.1026%" height="15" fill="rgb(242,9,16)" fg:x="37095" fg:w="127"/><text x="30.2255%" y="671.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (127 samples, 0.10%)</title><rect x="29.9755%" y="645" width="0.1026%" height="15" fill="rgb(217,211,10)" fg:x="37095" fg:w="127"/><text x="30.2255%" y="655.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (127 samples, 0.10%)</title><rect x="29.9755%" y="629" width="0.1026%" height="15" fill="rgb(219,228,52)" fg:x="37095" fg:w="127"/><text x="30.2255%" y="639.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (125 samples, 0.10%)</title><rect x="29.9771%" y="613" width="0.1010%" height="15" fill="rgb(231,92,29)" fg:x="37097" fg:w="125"/><text x="30.2271%" y="623.50"></text></g><g><title>core::mem::drop (109 samples, 0.09%)</title><rect x="29.9901%" y="597" width="0.0881%" height="15" fill="rgb(232,8,23)" fg:x="37113" fg:w="109"/><text x="30.2401%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (109 samples, 0.09%)</title><rect x="29.9901%" y="581" width="0.0881%" height="15" fill="rgb(216,211,34)" fg:x="37113" fg:w="109"/><text x="30.2401%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (17 samples, 0.01%)</title><rect x="30.0806%" y="597" width="0.0137%" height="15" fill="rgb(236,151,0)" fg:x="37225" fg:w="17"/><text x="30.3306%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (17 samples, 0.01%)</title><rect x="30.0806%" y="581" width="0.0137%" height="15" fill="rgb(209,168,3)" fg:x="37225" fg:w="17"/><text x="30.3306%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (17 samples, 0.01%)</title><rect x="30.0806%" y="565" width="0.0137%" height="15" fill="rgb(208,129,28)" fg:x="37225" fg:w="17"/><text x="30.3306%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (22 samples, 0.02%)</title><rect x="30.0781%" y="677" width="0.0178%" height="15" fill="rgb(229,78,22)" fg:x="37222" fg:w="22"/><text x="30.3281%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (22 samples, 0.02%)</title><rect x="30.0781%" y="661" width="0.0178%" height="15" fill="rgb(228,187,13)" fg:x="37222" fg:w="22"/><text x="30.3281%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (22 samples, 0.02%)</title><rect x="30.0781%" y="645" width="0.0178%" height="15" fill="rgb(240,119,24)" fg:x="37222" fg:w="22"/><text x="30.3281%" y="655.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (22 samples, 0.02%)</title><rect x="30.0781%" y="629" width="0.0178%" height="15" fill="rgb(209,194,42)" fg:x="37222" fg:w="22"/><text x="30.3281%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (22 samples, 0.02%)</title><rect x="30.0781%" y="613" width="0.0178%" height="15" fill="rgb(247,200,46)" fg:x="37222" fg:w="22"/><text x="30.3281%" y="623.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (27 samples, 0.02%)</title><rect x="30.1145%" y="661" width="0.0218%" height="15" fill="rgb(218,76,16)" fg:x="37267" fg:w="27"/><text x="30.3645%" y="671.50"></text></g><g><title>core::time::Duration::as_nanos (25 samples, 0.02%)</title><rect x="30.1363%" y="661" width="0.0202%" height="15" fill="rgb(225,21,48)" fg:x="37294" fg:w="25"/><text x="30.3863%" y="671.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (79 samples, 0.06%)</title><rect x="30.1565%" y="645" width="0.0638%" height="15" fill="rgb(239,223,50)" fg:x="37319" fg:w="79"/><text x="30.4065%" y="655.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (41 samples, 0.03%)</title><rect x="30.2527%" y="613" width="0.0331%" height="15" fill="rgb(244,45,21)" fg:x="37438" fg:w="41"/><text x="30.5027%" y="623.50"></text></g><g><title>core::cmp::PartialOrd::ge (41 samples, 0.03%)</title><rect x="30.2527%" y="597" width="0.0331%" height="15" fill="rgb(232,33,43)" fg:x="37438" fg:w="41"/><text x="30.5027%" y="607.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (41 samples, 0.03%)</title><rect x="30.2527%" y="581" width="0.0331%" height="15" fill="rgb(209,8,3)" fg:x="37438" fg:w="41"/><text x="30.5027%" y="591.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (23 samples, 0.02%)</title><rect x="30.2672%" y="565" width="0.0186%" height="15" fill="rgb(214,25,53)" fg:x="37456" fg:w="23"/><text x="30.5172%" y="575.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (23 samples, 0.02%)</title><rect x="30.2672%" y="549" width="0.0186%" height="15" fill="rgb(254,186,54)" fg:x="37456" fg:w="23"/><text x="30.5172%" y="559.50"></text></g><g><title>std::time::SystemTime::duration_since (195 samples, 0.16%)</title><rect x="30.1565%" y="661" width="0.1576%" height="15" fill="rgb(208,174,49)" fg:x="37319" fg:w="195"/><text x="30.4065%" y="671.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (116 samples, 0.09%)</title><rect x="30.2204%" y="645" width="0.0937%" height="15" fill="rgb(233,191,51)" fg:x="37398" fg:w="116"/><text x="30.4704%" y="655.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (116 samples, 0.09%)</title><rect x="30.2204%" y="629" width="0.0937%" height="15" fill="rgb(222,134,10)" fg:x="37398" fg:w="116"/><text x="30.4704%" y="639.50"></text></g><g><title>core::time::Duration::new (35 samples, 0.03%)</title><rect x="30.2858%" y="613" width="0.0283%" height="15" fill="rgb(230,226,20)" fg:x="37479" fg:w="35"/><text x="30.5358%" y="623.50"></text></g><g><title>tremor_common::time::nanotime (697 samples, 0.56%)</title><rect x="30.0959%" y="677" width="0.5632%" height="15" fill="rgb(251,111,25)" fg:x="37244" fg:w="697"/><text x="30.3459%" y="687.50"></text></g><g><title>std::time::SystemTime::now (427 samples, 0.35%)</title><rect x="30.3141%" y="661" width="0.3450%" height="15" fill="rgb(224,40,46)" fg:x="37514" fg:w="427"/><text x="30.5641%" y="671.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (427 samples, 0.35%)</title><rect x="30.3141%" y="645" width="0.3450%" height="15" fill="rgb(236,108,47)" fg:x="37514" fg:w="427"/><text x="30.5641%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (427 samples, 0.35%)</title><rect x="30.3141%" y="629" width="0.3450%" height="15" fill="rgb(234,93,0)" fg:x="37514" fg:w="427"/><text x="30.5641%" y="639.50"></text></g><g><title>__clock_gettime (347 samples, 0.28%)</title><rect x="30.3787%" y="613" width="0.2804%" height="15" fill="rgb(224,213,32)" fg:x="37594" fg:w="347"/><text x="30.6287%" y="623.50"></text></g><g><title>__vdso_clock_gettime (333 samples, 0.27%)</title><rect x="30.3901%" y="597" width="0.2691%" height="15" fill="rgb(251,11,48)" fg:x="37608" fg:w="333"/><text x="30.6401%" y="607.50"></text></g><g><title>[[vdso]] (289 samples, 0.23%)</title><rect x="30.4256%" y="581" width="0.2335%" height="15" fill="rgb(236,173,5)" fg:x="37652" fg:w="289"/><text x="30.6756%" y="591.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,475 samples, 1.19%)</title><rect x="29.5060%" y="741" width="1.1919%" height="15" fill="rgb(230,95,12)" fg:x="36514" fg:w="1475"/><text x="29.7560%" y="751.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (1,475 samples, 1.19%)</title><rect x="29.5060%" y="725" width="1.1919%" height="15" fill="rgb(232,209,1)" fg:x="36514" fg:w="1475"/><text x="29.7560%" y="735.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,281 samples, 1.04%)</title><rect x="29.6628%" y="709" width="1.0351%" height="15" fill="rgb(232,6,1)" fg:x="36708" fg:w="1281"/><text x="29.9128%" y="719.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (1,281 samples, 1.04%)</title><rect x="29.6628%" y="693" width="1.0351%" height="15" fill="rgb(210,224,50)" fg:x="36708" fg:w="1281"/><text x="29.9128%" y="703.50"></text></g><g><title>tremor_runtime::connectors::source::Streams::get_or_create_stream (48 samples, 0.04%)</title><rect x="30.6591%" y="677" width="0.0388%" height="15" fill="rgb(228,127,35)" fg:x="37941" fg:w="48"/><text x="30.9091%" y="687.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (38 samples, 0.03%)</title><rect x="30.6672%" y="661" width="0.0307%" height="15" fill="rgb(245,102,45)" fg:x="37951" fg:w="38"/><text x="30.9172%" y="671.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (34 samples, 0.03%)</title><rect x="30.6705%" y="645" width="0.0275%" height="15" fill="rgb(214,1,49)" fg:x="37955" fg:w="34"/><text x="30.9205%" y="655.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (34 samples, 0.03%)</title><rect x="30.6705%" y="629" width="0.0275%" height="15" fill="rgb(226,163,40)" fg:x="37955" fg:w="34"/><text x="30.9205%" y="639.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (34 samples, 0.03%)</title><rect x="30.6705%" y="613" width="0.0275%" height="15" fill="rgb(239,212,28)" fg:x="37955" fg:w="34"/><text x="30.9205%" y="623.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::as_slice (14 samples, 0.01%)</title><rect x="31.6345%" y="357" width="0.0113%" height="15" fill="rgb(220,20,13)" fg:x="39148" fg:w="14"/><text x="31.8845%" y="367.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (33 samples, 0.03%)</title><rect x="31.9262%" y="149" width="0.0267%" height="15" fill="rgb(210,164,35)" fg:x="39509" fg:w="33"/><text x="32.1762%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (382 samples, 0.31%)</title><rect x="31.6458%" y="293" width="0.3087%" height="15" fill="rgb(248,109,41)" fg:x="39162" fg:w="382"/><text x="31.8958%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (382 samples, 0.31%)</title><rect x="31.6458%" y="277" width="0.3087%" height="15" fill="rgb(238,23,50)" fg:x="39162" fg:w="382"/><text x="31.8958%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (382 samples, 0.31%)</title><rect x="31.6458%" y="261" width="0.3087%" height="15" fill="rgb(211,48,49)" fg:x="39162" fg:w="382"/><text x="31.8958%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (378 samples, 0.31%)</title><rect x="31.6490%" y="245" width="0.3055%" height="15" fill="rgb(223,36,21)" fg:x="39166" fg:w="378"/><text x="31.8990%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (378 samples, 0.31%)</title><rect x="31.6490%" y="229" width="0.3055%" height="15" fill="rgb(207,123,46)" fg:x="39166" fg:w="378"/><text x="31.8990%" y="239.50"></text></g><g><title>alloc::alloc::alloc (377 samples, 0.30%)</title><rect x="31.6498%" y="213" width="0.3046%" height="15" fill="rgb(240,218,32)" fg:x="39167" fg:w="377"/><text x="31.8998%" y="223.50"></text></g><g><title>__rg_alloc (377 samples, 0.30%)</title><rect x="31.6498%" y="197" width="0.3046%" height="15" fill="rgb(252,5,43)" fg:x="39167" fg:w="377"/><text x="31.8998%" y="207.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (377 samples, 0.30%)</title><rect x="31.6498%" y="181" width="0.3046%" height="15" fill="rgb(252,84,19)" fg:x="39167" fg:w="377"/><text x="31.8998%" y="191.50"></text></g><g><title>sn_rust_alloc (364 samples, 0.29%)</title><rect x="31.6604%" y="165" width="0.2941%" height="15" fill="rgb(243,152,39)" fg:x="39180" fg:w="364"/><text x="31.9104%" y="175.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (463 samples, 0.37%)</title><rect x="31.6256%" y="405" width="0.3741%" height="15" fill="rgb(234,160,15)" fg:x="39137" fg:w="463"/><text x="31.8756%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (459 samples, 0.37%)</title><rect x="31.6288%" y="389" width="0.3709%" height="15" fill="rgb(237,34,20)" fg:x="39141" fg:w="459"/><text x="31.8788%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (452 samples, 0.37%)</title><rect x="31.6345%" y="373" width="0.3652%" height="15" fill="rgb(229,97,13)" fg:x="39148" fg:w="452"/><text x="31.8845%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (438 samples, 0.35%)</title><rect x="31.6458%" y="357" width="0.3539%" height="15" fill="rgb(234,71,50)" fg:x="39162" fg:w="438"/><text x="31.8958%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (438 samples, 0.35%)</title><rect x="31.6458%" y="341" width="0.3539%" height="15" fill="rgb(253,155,4)" fg:x="39162" fg:w="438"/><text x="31.8958%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (438 samples, 0.35%)</title><rect x="31.6458%" y="325" width="0.3539%" height="15" fill="rgb(222,185,37)" fg:x="39162" fg:w="438"/><text x="31.8958%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (438 samples, 0.35%)</title><rect x="31.6458%" y="309" width="0.3539%" height="15" fill="rgb(251,177,13)" fg:x="39162" fg:w="438"/><text x="31.8958%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (56 samples, 0.05%)</title><rect x="31.9545%" y="293" width="0.0453%" height="15" fill="rgb(250,179,40)" fg:x="39544" fg:w="56"/><text x="32.2045%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (56 samples, 0.05%)</title><rect x="31.9545%" y="277" width="0.0453%" height="15" fill="rgb(242,44,2)" fg:x="39544" fg:w="56"/><text x="32.2045%" y="287.50"></text></g><g><title>[libc-2.31.so] (46 samples, 0.04%)</title><rect x="31.9626%" y="261" width="0.0372%" height="15" fill="rgb(216,177,13)" fg:x="39554" fg:w="46"/><text x="32.2126%" y="271.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (31 samples, 0.03%)</title><rect x="32.0062%" y="389" width="0.0251%" height="15" fill="rgb(216,106,43)" fg:x="39608" fg:w="31"/><text x="32.2562%" y="399.50"></text></g><g><title>&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt; as core::convert::From&lt;alloc::vec::Vec&lt;T&gt;&gt;&gt;::from (26 samples, 0.02%)</title><rect x="32.0102%" y="373" width="0.0210%" height="15" fill="rgb(216,183,2)" fg:x="39613" fg:w="26"/><text x="32.2602%" y="383.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (41 samples, 0.03%)</title><rect x="32.1113%" y="53" width="0.0331%" height="15" fill="rgb(249,75,3)" fg:x="39738" fg:w="41"/><text x="32.3613%" y="63.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (129 samples, 0.10%)</title><rect x="32.0410%" y="197" width="0.1042%" height="15" fill="rgb(219,67,39)" fg:x="39651" fg:w="129"/><text x="32.2910%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (129 samples, 0.10%)</title><rect x="32.0410%" y="181" width="0.1042%" height="15" fill="rgb(253,228,2)" fg:x="39651" fg:w="129"/><text x="32.2910%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (129 samples, 0.10%)</title><rect x="32.0410%" y="165" width="0.1042%" height="15" fill="rgb(235,138,27)" fg:x="39651" fg:w="129"/><text x="32.2910%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (129 samples, 0.10%)</title><rect x="32.0410%" y="149" width="0.1042%" height="15" fill="rgb(236,97,51)" fg:x="39651" fg:w="129"/><text x="32.2910%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (129 samples, 0.10%)</title><rect x="32.0410%" y="133" width="0.1042%" height="15" fill="rgb(240,80,30)" fg:x="39651" fg:w="129"/><text x="32.2910%" y="143.50"></text></g><g><title>alloc::alloc::alloc (125 samples, 0.10%)</title><rect x="32.0442%" y="117" width="0.1010%" height="15" fill="rgb(230,178,19)" fg:x="39655" fg:w="125"/><text x="32.2942%" y="127.50"></text></g><g><title>__rg_alloc (125 samples, 0.10%)</title><rect x="32.0442%" y="101" width="0.1010%" height="15" fill="rgb(210,190,27)" fg:x="39655" fg:w="125"/><text x="32.2942%" y="111.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (125 samples, 0.10%)</title><rect x="32.0442%" y="85" width="0.1010%" height="15" fill="rgb(222,107,31)" fg:x="39655" fg:w="125"/><text x="32.2942%" y="95.50"></text></g><g><title>sn_rust_alloc (120 samples, 0.10%)</title><rect x="32.0482%" y="69" width="0.0970%" height="15" fill="rgb(216,127,34)" fg:x="39660" fg:w="120"/><text x="32.2982%" y="79.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (176 samples, 0.14%)</title><rect x="32.0313%" y="309" width="0.1422%" height="15" fill="rgb(234,116,52)" fg:x="39639" fg:w="176"/><text x="32.2813%" y="319.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (176 samples, 0.14%)</title><rect x="32.0313%" y="293" width="0.1422%" height="15" fill="rgb(222,124,15)" fg:x="39639" fg:w="176"/><text x="32.2813%" y="303.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (176 samples, 0.14%)</title><rect x="32.0313%" y="277" width="0.1422%" height="15" fill="rgb(231,179,28)" fg:x="39639" fg:w="176"/><text x="32.2813%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (164 samples, 0.13%)</title><rect x="32.0410%" y="261" width="0.1325%" height="15" fill="rgb(226,93,45)" fg:x="39651" fg:w="164"/><text x="32.2910%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (164 samples, 0.13%)</title><rect x="32.0410%" y="245" width="0.1325%" height="15" fill="rgb(215,8,51)" fg:x="39651" fg:w="164"/><text x="32.2910%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (164 samples, 0.13%)</title><rect x="32.0410%" y="229" width="0.1325%" height="15" fill="rgb(223,106,5)" fg:x="39651" fg:w="164"/><text x="32.2910%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (164 samples, 0.13%)</title><rect x="32.0410%" y="213" width="0.1325%" height="15" fill="rgb(250,191,5)" fg:x="39651" fg:w="164"/><text x="32.2910%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (35 samples, 0.03%)</title><rect x="32.1452%" y="197" width="0.0283%" height="15" fill="rgb(242,132,44)" fg:x="39780" fg:w="35"/><text x="32.3952%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (35 samples, 0.03%)</title><rect x="32.1452%" y="181" width="0.0283%" height="15" fill="rgb(251,152,29)" fg:x="39780" fg:w="35"/><text x="32.3952%" y="191.50"></text></g><g><title>[libc-2.31.so] (33 samples, 0.03%)</title><rect x="32.1468%" y="165" width="0.0267%" height="15" fill="rgb(218,179,5)" fg:x="39782" fg:w="33"/><text x="32.3968%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="32.1735%" y="309" width="0.0121%" height="15" fill="rgb(227,67,19)" fg:x="39815" fg:w="15"/><text x="32.4235%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (21 samples, 0.02%)</title><rect x="32.1856%" y="309" width="0.0170%" height="15" fill="rgb(233,119,31)" fg:x="39830" fg:w="21"/><text x="32.4356%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (107 samples, 0.09%)</title><rect x="32.2106%" y="261" width="0.0865%" height="15" fill="rgb(241,120,22)" fg:x="39861" fg:w="107"/><text x="32.4606%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (107 samples, 0.09%)</title><rect x="32.2106%" y="245" width="0.0865%" height="15" fill="rgb(224,102,30)" fg:x="39861" fg:w="107"/><text x="32.4606%" y="255.50"></text></g><g><title>alloc::alloc::alloc (104 samples, 0.08%)</title><rect x="32.2131%" y="229" width="0.0840%" height="15" fill="rgb(210,164,37)" fg:x="39864" fg:w="104"/><text x="32.4631%" y="239.50"></text></g><g><title>__rg_alloc (104 samples, 0.08%)</title><rect x="32.2131%" y="213" width="0.0840%" height="15" fill="rgb(226,191,16)" fg:x="39864" fg:w="104"/><text x="32.4631%" y="223.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (104 samples, 0.08%)</title><rect x="32.2131%" y="197" width="0.0840%" height="15" fill="rgb(214,40,45)" fg:x="39864" fg:w="104"/><text x="32.4631%" y="207.50"></text></g><g><title>sn_rust_alloc (96 samples, 0.08%)</title><rect x="32.2195%" y="181" width="0.0776%" height="15" fill="rgb(244,29,26)" fg:x="39872" fg:w="96"/><text x="32.4695%" y="191.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (31 samples, 0.03%)</title><rect x="32.2721%" y="165" width="0.0251%" height="15" fill="rgb(216,16,5)" fg:x="39937" fg:w="31"/><text x="32.5221%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (125 samples, 0.10%)</title><rect x="32.2026%" y="309" width="0.1010%" height="15" fill="rgb(249,76,35)" fg:x="39851" fg:w="125"/><text x="32.4526%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (115 samples, 0.09%)</title><rect x="32.2106%" y="293" width="0.0929%" height="15" fill="rgb(207,11,44)" fg:x="39861" fg:w="115"/><text x="32.4606%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (115 samples, 0.09%)</title><rect x="32.2106%" y="277" width="0.0929%" height="15" fill="rgb(228,190,49)" fg:x="39861" fg:w="115"/><text x="32.4606%" y="287.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (1,596 samples, 1.29%)</title><rect x="31.0301%" y="421" width="1.2897%" height="15" fill="rgb(214,173,12)" fg:x="38400" fg:w="1596"/><text x="31.2801%" y="431.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (396 samples, 0.32%)</title><rect x="31.9997%" y="405" width="0.3200%" height="15" fill="rgb(218,26,35)" fg:x="39600" fg:w="396"/><text x="32.2497%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (357 samples, 0.29%)</title><rect x="32.0313%" y="389" width="0.2885%" height="15" fill="rgb(220,200,19)" fg:x="39639" fg:w="357"/><text x="32.2813%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (357 samples, 0.29%)</title><rect x="32.0313%" y="373" width="0.2885%" height="15" fill="rgb(239,95,49)" fg:x="39639" fg:w="357"/><text x="32.2813%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (357 samples, 0.29%)</title><rect x="32.0313%" y="357" width="0.2885%" height="15" fill="rgb(235,85,53)" fg:x="39639" fg:w="357"/><text x="32.2813%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (357 samples, 0.29%)</title><rect x="32.0313%" y="341" width="0.2885%" height="15" fill="rgb(233,133,31)" fg:x="39639" fg:w="357"/><text x="32.2813%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (357 samples, 0.29%)</title><rect x="32.0313%" y="325" width="0.2885%" height="15" fill="rgb(218,25,20)" fg:x="39639" fg:w="357"/><text x="32.2813%" y="335.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (27 samples, 0.02%)</title><rect x="32.3561%" y="341" width="0.0218%" height="15" fill="rgb(252,210,38)" fg:x="40041" fg:w="27"/><text x="32.6061%" y="351.50"></text></g><g><title>core::time::Duration::as_nanos (30 samples, 0.02%)</title><rect x="32.3779%" y="341" width="0.0242%" height="15" fill="rgb(242,134,21)" fg:x="40068" fg:w="30"/><text x="32.6279%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (90 samples, 0.07%)</title><rect x="32.4022%" y="325" width="0.0727%" height="15" fill="rgb(213,28,48)" fg:x="40098" fg:w="90"/><text x="32.6522%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (39 samples, 0.03%)</title><rect x="32.5056%" y="293" width="0.0315%" height="15" fill="rgb(250,196,2)" fg:x="40226" fg:w="39"/><text x="32.7556%" y="303.50"></text></g><g><title>core::cmp::PartialOrd::ge (39 samples, 0.03%)</title><rect x="32.5056%" y="277" width="0.0315%" height="15" fill="rgb(227,5,17)" fg:x="40226" fg:w="39"/><text x="32.7556%" y="287.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (39 samples, 0.03%)</title><rect x="32.5056%" y="261" width="0.0315%" height="15" fill="rgb(221,226,24)" fg:x="40226" fg:w="39"/><text x="32.7556%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (19 samples, 0.02%)</title><rect x="32.5218%" y="245" width="0.0154%" height="15" fill="rgb(211,5,48)" fg:x="40246" fg:w="19"/><text x="32.7718%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (19 samples, 0.02%)</title><rect x="32.5218%" y="229" width="0.0154%" height="15" fill="rgb(219,150,6)" fg:x="40246" fg:w="19"/><text x="32.7718%" y="239.50"></text></g><g><title>std::time::SystemTime::duration_since (185 samples, 0.15%)</title><rect x="32.4022%" y="341" width="0.1495%" height="15" fill="rgb(251,46,16)" fg:x="40098" fg:w="185"/><text x="32.6522%" y="351.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (95 samples, 0.08%)</title><rect x="32.4749%" y="325" width="0.0768%" height="15" fill="rgb(220,204,40)" fg:x="40188" fg:w="95"/><text x="32.7249%" y="335.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (95 samples, 0.08%)</title><rect x="32.4749%" y="309" width="0.0768%" height="15" fill="rgb(211,85,2)" fg:x="40188" fg:w="95"/><text x="32.7249%" y="319.50"></text></g><g><title>core::time::Duration::new (18 samples, 0.01%)</title><rect x="32.5371%" y="293" width="0.0145%" height="15" fill="rgb(229,17,7)" fg:x="40265" fg:w="18"/><text x="32.7871%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (685 samples, 0.55%)</title><rect x="32.3197%" y="421" width="0.5535%" height="15" fill="rgb(239,72,28)" fg:x="39996" fg:w="685"/><text x="32.5697%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (685 samples, 0.55%)</title><rect x="32.3197%" y="405" width="0.5535%" height="15" fill="rgb(230,47,54)" fg:x="39996" fg:w="685"/><text x="32.5697%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any::check::{{closure}} (659 samples, 0.53%)</title><rect x="32.3407%" y="389" width="0.5325%" height="15" fill="rgb(214,50,8)" fg:x="40022" fg:w="659"/><text x="32.5907%" y="399.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}}::{{closure}} (659 samples, 0.53%)</title><rect x="32.3407%" y="373" width="0.5325%" height="15" fill="rgb(216,198,43)" fg:x="40022" fg:w="659"/><text x="32.5907%" y="383.50"></text></g><g><title>tremor_common::time::nanotime (656 samples, 0.53%)</title><rect x="32.3432%" y="357" width="0.5301%" height="15" fill="rgb(234,20,35)" fg:x="40025" fg:w="656"/><text x="32.5932%" y="367.50"></text></g><g><title>std::time::SystemTime::now (398 samples, 0.32%)</title><rect x="32.5517%" y="341" width="0.3216%" height="15" fill="rgb(254,45,19)" fg:x="40283" fg:w="398"/><text x="32.8017%" y="351.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (398 samples, 0.32%)</title><rect x="32.5517%" y="325" width="0.3216%" height="15" fill="rgb(219,14,44)" fg:x="40283" fg:w="398"/><text x="32.8017%" y="335.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (398 samples, 0.32%)</title><rect x="32.5517%" y="309" width="0.3216%" height="15" fill="rgb(217,220,26)" fg:x="40283" fg:w="398"/><text x="32.8017%" y="319.50"></text></g><g><title>__clock_gettime (304 samples, 0.25%)</title><rect x="32.6276%" y="293" width="0.2457%" height="15" fill="rgb(213,158,28)" fg:x="40377" fg:w="304"/><text x="32.8776%" y="303.50"></text></g><g><title>__vdso_clock_gettime (284 samples, 0.23%)</title><rect x="32.6438%" y="277" width="0.2295%" height="15" fill="rgb(252,51,52)" fg:x="40397" fg:w="284"/><text x="32.8938%" y="287.50"></text></g><g><title>[[vdso]] (264 samples, 0.21%)</title><rect x="32.6599%" y="261" width="0.2133%" height="15" fill="rgb(246,89,16)" fg:x="40417" fg:w="264"/><text x="32.9099%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (73 samples, 0.06%)</title><rect x="32.8999%" y="389" width="0.0590%" height="15" fill="rgb(216,158,49)" fg:x="40714" fg:w="73"/><text x="33.1499%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (27 samples, 0.02%)</title><rect x="32.9371%" y="373" width="0.0218%" height="15" fill="rgb(236,107,19)" fg:x="40760" fg:w="27"/><text x="33.1871%" y="383.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (893 samples, 0.72%)</title><rect x="33.2272%" y="197" width="0.7216%" height="15" fill="rgb(228,185,30)" fg:x="41119" fg:w="893"/><text x="33.4772%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,244 samples, 1.01%)</title><rect x="32.9597%" y="341" width="1.0052%" height="15" fill="rgb(246,134,8)" fg:x="40788" fg:w="1244"/><text x="33.2097%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,239 samples, 1.00%)</title><rect x="32.9638%" y="325" width="1.0012%" height="15" fill="rgb(214,143,50)" fg:x="40793" fg:w="1239"/><text x="33.2138%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,239 samples, 1.00%)</title><rect x="32.9638%" y="309" width="1.0012%" height="15" fill="rgb(228,75,8)" fg:x="40793" fg:w="1239"/><text x="33.2138%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,237 samples, 1.00%)</title><rect x="32.9654%" y="293" width="0.9996%" height="15" fill="rgb(207,175,4)" fg:x="40795" fg:w="1237"/><text x="33.2154%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,237 samples, 1.00%)</title><rect x="32.9654%" y="277" width="0.9996%" height="15" fill="rgb(205,108,24)" fg:x="40795" fg:w="1237"/><text x="33.2154%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1,237 samples, 1.00%)</title><rect x="32.9654%" y="261" width="0.9996%" height="15" fill="rgb(244,120,49)" fg:x="40795" fg:w="1237"/><text x="33.2154%" y="271.50"></text></g><g><title>__rg_alloc (1,237 samples, 1.00%)</title><rect x="32.9654%" y="245" width="0.9996%" height="15" fill="rgb(223,47,38)" fg:x="40795" fg:w="1237"/><text x="33.2154%" y="255.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1,237 samples, 1.00%)</title><rect x="32.9654%" y="229" width="0.9996%" height="15" fill="rgb(229,179,11)" fg:x="40795" fg:w="1237"/><text x="33.2154%" y="239.50"></text></g><g><title>sn_rust_alloc (1,233 samples, 1.00%)</title><rect x="32.9686%" y="213" width="0.9964%" height="15" fill="rgb(231,122,1)" fg:x="40799" fg:w="1233"/><text x="33.2186%" y="223.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (20 samples, 0.02%)</title><rect x="33.9488%" y="197" width="0.0162%" height="15" fill="rgb(245,119,9)" fg:x="42012" fg:w="20"/><text x="34.1988%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,628 samples, 1.32%)</title><rect x="32.8999%" y="405" width="1.3155%" height="15" fill="rgb(241,163,25)" fg:x="40714" fg:w="1628"/><text x="33.1499%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,555 samples, 1.26%)</title><rect x="32.9589%" y="389" width="1.2566%" height="15" fill="rgb(217,214,3)" fg:x="40787" fg:w="1555"/><text x="33.2089%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1,555 samples, 1.26%)</title><rect x="32.9589%" y="373" width="1.2566%" height="15" fill="rgb(240,86,28)" fg:x="40787" fg:w="1555"/><text x="33.2089%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,555 samples, 1.26%)</title><rect x="32.9589%" y="357" width="1.2566%" height="15" fill="rgb(215,47,9)" fg:x="40787" fg:w="1555"/><text x="33.2089%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (310 samples, 0.25%)</title><rect x="33.9650%" y="341" width="0.2505%" height="15" fill="rgb(252,25,45)" fg:x="42032" fg:w="310"/><text x="34.2150%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (310 samples, 0.25%)</title><rect x="33.9650%" y="325" width="0.2505%" height="15" fill="rgb(251,164,9)" fg:x="42032" fg:w="310"/><text x="34.2150%" y="335.50"></text></g><g><title>[libc-2.31.so] (310 samples, 0.25%)</title><rect x="33.9650%" y="309" width="0.2505%" height="15" fill="rgb(233,194,0)" fg:x="42032" fg:w="310"/><text x="34.2150%" y="319.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (5,830 samples, 4.71%)</title><rect x="29.5060%" y="757" width="4.7111%" height="15" fill="rgb(249,111,24)" fg:x="36514" fg:w="5830"/><text x="29.7560%" y="767.50">tremo..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (4,355 samples, 3.52%)</title><rect x="30.6979%" y="741" width="3.5192%" height="15" fill="rgb(250,223,3)" fg:x="37989" fg:w="4355"/><text x="30.9479%" y="751.50">&lt;fu..</text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (4,355 samples, 3.52%)</title><rect x="30.6979%" y="725" width="3.5192%" height="15" fill="rgb(236,178,37)" fg:x="37989" fg:w="4355"/><text x="30.9479%" y="735.50">fut..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (4,355 samples, 3.52%)</title><rect x="30.6979%" y="709" width="3.5192%" height="15" fill="rgb(241,158,50)" fg:x="37989" fg:w="4355"/><text x="30.9479%" y="719.50">&lt;co..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,355 samples, 3.52%)</title><rect x="30.6979%" y="693" width="3.5192%" height="15" fill="rgb(213,121,41)" fg:x="37989" fg:w="4355"/><text x="30.9479%" y="703.50">&lt;co..</text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (4,355 samples, 3.52%)</title><rect x="30.6979%" y="677" width="3.5192%" height="15" fill="rgb(240,92,3)" fg:x="37989" fg:w="4355"/><text x="30.9479%" y="687.50">tre..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,355 samples, 3.52%)</title><rect x="30.6979%" y="661" width="3.5192%" height="15" fill="rgb(205,123,3)" fg:x="37989" fg:w="4355"/><text x="30.9479%" y="671.50">&lt;as..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,355 samples, 3.52%)</title><rect x="30.6979%" y="645" width="3.5192%" height="15" fill="rgb(205,97,47)" fg:x="37989" fg:w="4355"/><text x="30.9479%" y="655.50">&lt;as..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (4,355 samples, 3.52%)</title><rect x="30.6979%" y="629" width="3.5192%" height="15" fill="rgb(247,152,14)" fg:x="37989" fg:w="4355"/><text x="30.9479%" y="639.50">&lt;co..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (4,355 samples, 3.52%)</title><rect x="30.6979%" y="613" width="3.5192%" height="15" fill="rgb(248,195,53)" fg:x="37989" fg:w="4355"/><text x="30.9479%" y="623.50">&lt;as..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (4,355 samples, 3.52%)</title><rect x="30.6979%" y="597" width="3.5192%" height="15" fill="rgb(226,201,16)" fg:x="37989" fg:w="4355"/><text x="30.9479%" y="607.50">asy..</text></g><g><title>std::panic::catch_unwind (4,355 samples, 3.52%)</title><rect x="30.6979%" y="581" width="3.5192%" height="15" fill="rgb(205,98,0)" fg:x="37989" fg:w="4355"/><text x="30.9479%" y="591.50">std..</text></g><g><title>std::panicking::try (4,355 samples, 3.52%)</title><rect x="30.6979%" y="565" width="3.5192%" height="15" fill="rgb(214,191,48)" fg:x="37989" fg:w="4355"/><text x="30.9479%" y="575.50">std..</text></g><g><title>std::panicking::try::do_call (4,355 samples, 3.52%)</title><rect x="30.6979%" y="549" width="3.5192%" height="15" fill="rgb(237,112,39)" fg:x="37989" fg:w="4355"/><text x="30.9479%" y="559.50">std..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (4,355 samples, 3.52%)</title><rect x="30.6979%" y="533" width="3.5192%" height="15" fill="rgb(247,203,27)" fg:x="37989" fg:w="4355"/><text x="30.9479%" y="543.50">&lt;co..</text></g><g><title>core::ops::function::FnOnce::call_once (4,355 samples, 3.52%)</title><rect x="30.6979%" y="517" width="3.5192%" height="15" fill="rgb(235,124,28)" fg:x="37989" fg:w="4355"/><text x="30.9479%" y="527.50">cor..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (4,355 samples, 3.52%)</title><rect x="30.6979%" y="501" width="3.5192%" height="15" fill="rgb(208,207,46)" fg:x="37989" fg:w="4355"/><text x="30.9479%" y="511.50">asy..</text></g><g><title>async_ffi::FfiContext::with_context (4,355 samples, 3.52%)</title><rect x="30.6979%" y="485" width="3.5192%" height="15" fill="rgb(234,176,4)" fg:x="37989" fg:w="4355"/><text x="30.9479%" y="495.50">asy..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (4,355 samples, 3.52%)</title><rect x="30.6979%" y="469" width="3.5192%" height="15" fill="rgb(230,133,28)" fg:x="37989" fg:w="4355"/><text x="30.9479%" y="479.50">asy..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,355 samples, 3.52%)</title><rect x="30.6979%" y="453" width="3.5192%" height="15" fill="rgb(211,137,40)" fg:x="37989" fg:w="4355"/><text x="30.9479%" y="463.50">&lt;co..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (4,248 samples, 3.43%)</title><rect x="30.7844%" y="437" width="3.4327%" height="15" fill="rgb(254,35,13)" fg:x="38096" fg:w="4248"/><text x="31.0344%" y="447.50">&lt;tr..</text></g><g><title>tremor_runtime::connectors::impls::bench::Acc::next (1,655 samples, 1.34%)</title><rect x="32.8797%" y="421" width="1.3374%" height="15" fill="rgb(225,49,51)" fg:x="40689" fg:w="1655"/><text x="33.1297%" y="431.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17 samples, 0.01%)</title><rect x="34.7658%" y="741" width="0.0137%" height="15" fill="rgb(251,10,15)" fg:x="43023" fg:w="17"/><text x="35.0158%" y="751.50"></text></g><g><title>[libc-2.31.so] (518 samples, 0.42%)</title><rect x="34.8143%" y="725" width="0.4186%" height="15" fill="rgb(228,207,15)" fg:x="43083" fg:w="518"/><text x="35.0643%" y="735.50"></text></g><g><title>[libc-2.31.so] (832 samples, 0.67%)</title><rect x="35.3775%" y="709" width="0.6723%" height="15" fill="rgb(241,99,19)" fg:x="43780" fg:w="832"/><text x="35.6275%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (512 samples, 0.41%)</title><rect x="36.0498%" y="709" width="0.4137%" height="15" fill="rgb(207,104,49)" fg:x="44612" fg:w="512"/><text x="36.2998%" y="719.50"></text></g><g><title>core::ptr::write (496 samples, 0.40%)</title><rect x="36.0627%" y="693" width="0.4008%" height="15" fill="rgb(234,99,18)" fg:x="44628" fg:w="496"/><text x="36.3127%" y="703.50"></text></g><g><title>[libc-2.31.so] (489 samples, 0.40%)</title><rect x="36.0684%" y="677" width="0.3951%" height="15" fill="rgb(213,191,49)" fg:x="44635" fg:w="489"/><text x="36.3184%" y="687.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (23 samples, 0.02%)</title><rect x="36.4635%" y="709" width="0.0186%" height="15" fill="rgb(210,226,19)" fg:x="45124" fg:w="23"/><text x="36.7135%" y="719.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (1,013 samples, 0.82%)</title><rect x="36.4886%" y="709" width="0.8186%" height="15" fill="rgb(229,97,18)" fg:x="45155" fg:w="1013"/><text x="36.7386%" y="719.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (998 samples, 0.81%)</title><rect x="36.5007%" y="693" width="0.8065%" height="15" fill="rgb(211,167,15)" fg:x="45170" fg:w="998"/><text x="36.7507%" y="703.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (976 samples, 0.79%)</title><rect x="36.5185%" y="677" width="0.7887%" height="15" fill="rgb(210,169,34)" fg:x="45192" fg:w="976"/><text x="36.7685%" y="687.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (976 samples, 0.79%)</title><rect x="36.5185%" y="661" width="0.7887%" height="15" fill="rgb(241,121,31)" fg:x="45192" fg:w="976"/><text x="36.7685%" y="671.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (976 samples, 0.79%)</title><rect x="36.5185%" y="645" width="0.7887%" height="15" fill="rgb(232,40,11)" fg:x="45192" fg:w="976"/><text x="36.7685%" y="655.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (976 samples, 0.79%)</title><rect x="36.5185%" y="629" width="0.7887%" height="15" fill="rgb(205,86,26)" fg:x="45192" fg:w="976"/><text x="36.7685%" y="639.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (976 samples, 0.79%)</title><rect x="36.5185%" y="613" width="0.7887%" height="15" fill="rgb(231,126,28)" fg:x="45192" fg:w="976"/><text x="36.7685%" y="623.50"></text></g><g><title>[libc-2.31.so] (953 samples, 0.77%)</title><rect x="36.5371%" y="597" width="0.7701%" height="15" fill="rgb(219,221,18)" fg:x="45215" fg:w="953"/><text x="36.7871%" y="607.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::reverse (13 samples, 0.01%)</title><rect x="37.3144%" y="693" width="0.0105%" height="15" fill="rgb(211,40,0)" fg:x="46177" fg:w="13"/><text x="37.5644%" y="703.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::clone::Clone&gt;::clone (24 samples, 0.02%)</title><rect x="37.4033%" y="677" width="0.0194%" height="15" fill="rgb(239,85,43)" fg:x="46287" fg:w="24"/><text x="37.6533%" y="687.50"></text></g><g><title>[libc-2.31.so] (729 samples, 0.59%)</title><rect x="37.4227%" y="677" width="0.5891%" height="15" fill="rgb(231,55,21)" fg:x="46311" fg:w="729"/><text x="37.6727%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (363 samples, 0.29%)</title><rect x="38.0142%" y="677" width="0.2933%" height="15" fill="rgb(225,184,43)" fg:x="47043" fg:w="363"/><text x="38.2642%" y="687.50"></text></g><g><title>core::ptr::read (339 samples, 0.27%)</title><rect x="38.0336%" y="661" width="0.2739%" height="15" fill="rgb(251,158,41)" fg:x="47067" fg:w="339"/><text x="38.2836%" y="671.50"></text></g><g><title>[libc-2.31.so] (285 samples, 0.23%)</title><rect x="38.0773%" y="645" width="0.2303%" height="15" fill="rgb(234,159,37)" fg:x="47121" fg:w="285"/><text x="38.3273%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (376 samples, 0.30%)</title><rect x="38.3076%" y="677" width="0.3038%" height="15" fill="rgb(216,204,22)" fg:x="47406" fg:w="376"/><text x="38.5576%" y="687.50"></text></g><g><title>core::ptr::write (360 samples, 0.29%)</title><rect x="38.3205%" y="661" width="0.2909%" height="15" fill="rgb(214,17,3)" fg:x="47422" fg:w="360"/><text x="38.5705%" y="671.50"></text></g><g><title>[libc-2.31.so] (356 samples, 0.29%)</title><rect x="38.3237%" y="645" width="0.2877%" height="15" fill="rgb(212,111,17)" fg:x="47426" fg:w="356"/><text x="38.5737%" y="655.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (4,190 samples, 3.39%)</title><rect x="35.2328%" y="725" width="3.3858%" height="15" fill="rgb(221,157,24)" fg:x="43601" fg:w="4190"/><text x="35.4828%" y="735.50">tre..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (1,623 samples, 1.31%)</title><rect x="37.3072%" y="709" width="1.3115%" height="15" fill="rgb(252,16,13)" fg:x="46168" fg:w="1623"/><text x="37.5572%" y="719.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (1,601 samples, 1.29%)</title><rect x="37.3250%" y="693" width="1.2937%" height="15" fill="rgb(221,62,2)" fg:x="46190" fg:w="1601"/><text x="37.5750%" y="703.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,781 samples, 3.86%)</title><rect x="34.7844%" y="741" width="3.8634%" height="15" fill="rgb(247,87,22)" fg:x="43046" fg:w="4781"/><text x="35.0344%" y="751.50">&lt;cor..</text></g><g><title>tremor_runtime::pipeline::handle_insights::{{closure}} (36 samples, 0.03%)</title><rect x="38.6187%" y="725" width="0.0291%" height="15" fill="rgb(215,73,9)" fg:x="47791" fg:w="36"/><text x="38.8687%" y="735.50"></text></g><g><title>[libc-2.31.so] (1,663 samples, 1.34%)</title><rect x="38.6478%" y="741" width="1.3438%" height="15" fill="rgb(207,175,33)" fg:x="47827" fg:w="1663"/><text x="38.8978%" y="751.50"></text></g><g><title>sn_rust_dealloc (130 samples, 0.11%)</title><rect x="40.0053%" y="581" width="0.1050%" height="15" fill="rgb(243,129,54)" fg:x="49507" fg:w="130"/><text x="40.2553%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (163 samples, 0.13%)</title><rect x="39.9916%" y="741" width="0.1317%" height="15" fill="rgb(227,119,45)" fg:x="49490" fg:w="163"/><text x="40.2416%" y="751.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (163 samples, 0.13%)</title><rect x="39.9916%" y="725" width="0.1317%" height="15" fill="rgb(205,109,36)" fg:x="49490" fg:w="163"/><text x="40.2416%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (146 samples, 0.12%)</title><rect x="40.0053%" y="709" width="0.1180%" height="15" fill="rgb(205,6,39)" fg:x="49507" fg:w="146"/><text x="40.2553%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (146 samples, 0.12%)</title><rect x="40.0053%" y="693" width="0.1180%" height="15" fill="rgb(221,32,16)" fg:x="49507" fg:w="146"/><text x="40.2553%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (146 samples, 0.12%)</title><rect x="40.0053%" y="677" width="0.1180%" height="15" fill="rgb(228,144,50)" fg:x="49507" fg:w="146"/><text x="40.2553%" y="687.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (146 samples, 0.12%)</title><rect x="40.0053%" y="661" width="0.1180%" height="15" fill="rgb(229,201,53)" fg:x="49507" fg:w="146"/><text x="40.2553%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (146 samples, 0.12%)</title><rect x="40.0053%" y="645" width="0.1180%" height="15" fill="rgb(249,153,27)" fg:x="49507" fg:w="146"/><text x="40.2553%" y="655.50"></text></g><g><title>alloc::alloc::dealloc (146 samples, 0.12%)</title><rect x="40.0053%" y="629" width="0.1180%" height="15" fill="rgb(227,106,25)" fg:x="49507" fg:w="146"/><text x="40.2553%" y="639.50"></text></g><g><title>__rg_dealloc (146 samples, 0.12%)</title><rect x="40.0053%" y="613" width="0.1180%" height="15" fill="rgb(230,65,29)" fg:x="49507" fg:w="146"/><text x="40.2553%" y="623.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (146 samples, 0.12%)</title><rect x="40.0053%" y="597" width="0.1180%" height="15" fill="rgb(221,57,46)" fg:x="49507" fg:w="146"/><text x="40.2553%" y="607.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (16 samples, 0.01%)</title><rect x="40.1104%" y="581" width="0.0129%" height="15" fill="rgb(229,161,17)" fg:x="49637" fg:w="16"/><text x="40.3604%" y="591.50"></text></g><g><title>async_global_executor::reactor::block_on (34,152 samples, 27.60%)</title><rect x="12.5332%" y="1093" width="27.5974%" height="15" fill="rgb(222,213,11)" fg:x="15510" fg:w="34152"/><text x="12.7832%" y="1103.50">async_global_executor::reactor::block_on</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (34,152 samples, 27.60%)</title><rect x="12.5332%" y="1077" width="27.5974%" height="15" fill="rgb(235,35,13)" fg:x="15510" fg:w="34152"/><text x="12.7832%" y="1087.50">async_global_executor::reactor::block_on::{{..</text></g><g><title>async_io::driver::block_on (34,152 samples, 27.60%)</title><rect x="12.5332%" y="1061" width="27.5974%" height="15" fill="rgb(233,158,34)" fg:x="15510" fg:w="34152"/><text x="12.7832%" y="1071.50">async_io::driver::block_on</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (34,152 samples, 27.60%)</title><rect x="12.5332%" y="1045" width="27.5974%" height="15" fill="rgb(215,151,48)" fg:x="15510" fg:w="34152"/><text x="12.7832%" y="1055.50">&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::fu..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (34,152 samples, 27.60%)</title><rect x="12.5332%" y="1029" width="27.5974%" height="15" fill="rgb(229,84,14)" fg:x="15510" fg:w="34152"/><text x="12.7832%" y="1039.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; ..</text></g><g><title>async_executor::Executor::run::{{closure}} (34,152 samples, 27.60%)</title><rect x="12.5332%" y="1013" width="27.5974%" height="15" fill="rgb(229,68,14)" fg:x="15510" fg:w="34152"/><text x="12.7832%" y="1023.50">async_executor::Executor::run::{{closure}}</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (34,152 samples, 27.60%)</title><rect x="12.5332%" y="997" width="27.5974%" height="15" fill="rgb(243,106,26)" fg:x="15510" fg:w="34152"/><text x="12.7832%" y="1007.50">&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::fu..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (34,152 samples, 27.60%)</title><rect x="12.5332%" y="981" width="27.5974%" height="15" fill="rgb(206,45,38)" fg:x="15510" fg:w="34152"/><text x="12.7832%" y="991.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; ..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (34,152 samples, 27.60%)</title><rect x="12.5332%" y="965" width="27.5974%" height="15" fill="rgb(226,6,15)" fg:x="15510" fg:w="34152"/><text x="12.7832%" y="975.50">async_executor::Executor::run::{{closure}}::..</text></g><g><title>async_task::runnable::Runnable::run (34,152 samples, 27.60%)</title><rect x="12.5332%" y="949" width="27.5974%" height="15" fill="rgb(232,22,54)" fg:x="15510" fg:w="34152"/><text x="12.7832%" y="959.50">async_task::runnable::Runnable::run</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (34,152 samples, 27.60%)</title><rect x="12.5332%" y="933" width="27.5974%" height="15" fill="rgb(229,222,32)" fg:x="15510" fg:w="34152"/><text x="12.7832%" y="943.50">async_task::raw::RawTask&lt;F,T,S&gt;::run</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (34,152 samples, 27.60%)</title><rect x="12.5332%" y="917" width="27.5974%" height="15" fill="rgb(228,62,29)" fg:x="15510" fg:w="34152"/><text x="12.7832%" y="927.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (34,152 samples, 27.60%)</title><rect x="12.5332%" y="901" width="27.5974%" height="15" fill="rgb(251,103,34)" fg:x="15510" fg:w="34152"/><text x="12.7832%" y="911.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; ..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (34,152 samples, 27.60%)</title><rect x="12.5332%" y="885" width="27.5974%" height="15" fill="rgb(233,12,30)" fg:x="15510" fg:w="34152"/><text x="12.7832%" y="895.50">async_executor::Executor::spawn::{{closure}}</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (34,152 samples, 27.60%)</title><rect x="12.5332%" y="869" width="27.5974%" height="15" fill="rgb(238,52,0)" fg:x="15510" fg:w="34152"/><text x="12.7832%" y="879.50">&lt;async_std::task::builder::SupportTaskLocals..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (34,152 samples, 27.60%)</title><rect x="12.5332%" y="853" width="27.5974%" height="15" fill="rgb(223,98,5)" fg:x="15510" fg:w="34152"/><text x="12.7832%" y="863.50">async_std::task::task_locals_wrapper::TaskLo..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (34,152 samples, 27.60%)</title><rect x="12.5332%" y="837" width="27.5974%" height="15" fill="rgb(228,75,37)" fg:x="15510" fg:w="34152"/><text x="12.7832%" y="847.50">std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (34,152 samples, 27.60%)</title><rect x="12.5332%" y="821" width="27.5974%" height="15" fill="rgb(205,115,49)" fg:x="15510" fg:w="34152"/><text x="12.7832%" y="831.50">std::thread::local::LocalKey&lt;T&gt;::try_with</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (34,152 samples, 27.60%)</title><rect x="12.5332%" y="805" width="27.5974%" height="15" fill="rgb(250,154,43)" fg:x="15510" fg:w="34152"/><text x="12.7832%" y="815.50">async_std::task::task_locals_wrapper::TaskLo..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (34,152 samples, 27.60%)</title><rect x="12.5332%" y="789" width="27.5974%" height="15" fill="rgb(226,43,29)" fg:x="15510" fg:w="34152"/><text x="12.7832%" y="799.50">&lt;async_std::task::builder::SupportTaskLocals..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (34,152 samples, 27.60%)</title><rect x="12.5332%" y="773" width="27.5974%" height="15" fill="rgb(249,228,39)" fg:x="15510" fg:w="34152"/><text x="12.7832%" y="783.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; ..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (7,318 samples, 5.91%)</title><rect x="34.2171%" y="757" width="5.9135%" height="15" fill="rgb(216,79,43)" fg:x="42344" fg:w="7318"/><text x="34.4671%" y="767.50">tremor_r..</text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (116 samples, 0.09%)</title><rect x="40.5241%" y="581" width="0.0937%" height="15" fill="rgb(228,95,12)" fg:x="50149" fg:w="116"/><text x="40.7741%" y="591.50"></text></g><g><title>[libc-2.31.so] (99 samples, 0.08%)</title><rect x="40.5379%" y="565" width="0.0800%" height="15" fill="rgb(249,221,15)" fg:x="50166" fg:w="99"/><text x="40.7879%" y="575.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (37 samples, 0.03%)</title><rect x="40.6179%" y="581" width="0.0299%" height="15" fill="rgb(233,34,13)" fg:x="50265" fg:w="37"/><text x="40.8679%" y="591.50"></text></g><g><title>[libc-2.31.so] (310 samples, 0.25%)</title><rect x="40.6526%" y="565" width="0.2505%" height="15" fill="rgb(214,103,39)" fg:x="50308" fg:w="310"/><text x="40.9026%" y="575.50"></text></g><g><title>[libc-2.31.so] (98 samples, 0.08%)</title><rect x="41.0300%" y="549" width="0.0792%" height="15" fill="rgb(251,126,39)" fg:x="50775" fg:w="98"/><text x="41.2800%" y="559.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (366 samples, 0.30%)</title><rect x="41.1213%" y="549" width="0.2958%" height="15" fill="rgb(214,216,36)" fg:x="50888" fg:w="366"/><text x="41.3713%" y="559.50"></text></g><g><title>core::ops::function::FnOnce::call_once (359 samples, 0.29%)</title><rect x="41.1269%" y="533" width="0.2901%" height="15" fill="rgb(220,221,8)" fg:x="50895" fg:w="359"/><text x="41.3769%" y="543.50"></text></g><g><title>value_trait::Builder::object (359 samples, 0.29%)</title><rect x="41.1269%" y="517" width="0.2901%" height="15" fill="rgb(240,216,3)" fg:x="50895" fg:w="359"/><text x="41.3769%" y="527.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (357 samples, 0.29%)</title><rect x="41.1286%" y="501" width="0.2885%" height="15" fill="rgb(232,218,17)" fg:x="50897" fg:w="357"/><text x="41.3786%" y="511.50"></text></g><g><title>tremor_value::value::Value::Object (347 samples, 0.28%)</title><rect x="41.1366%" y="485" width="0.2804%" height="15" fill="rgb(229,163,45)" fg:x="50907" fg:w="347"/><text x="41.3866%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (17 samples, 0.01%)</title><rect x="41.4397%" y="485" width="0.0137%" height="15" fill="rgb(231,110,42)" fg:x="51282" fg:w="17"/><text x="41.6897%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (17 samples, 0.01%)</title><rect x="41.4397%" y="469" width="0.0137%" height="15" fill="rgb(208,170,48)" fg:x="51282" fg:w="17"/><text x="41.6897%" y="479.50"></text></g><g><title>core::mem::drop (14 samples, 0.01%)</title><rect x="41.4421%" y="453" width="0.0113%" height="15" fill="rgb(239,116,25)" fg:x="51285" fg:w="14"/><text x="41.6921%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (14 samples, 0.01%)</title><rect x="41.4421%" y="437" width="0.0113%" height="15" fill="rgb(219,200,50)" fg:x="51285" fg:w="14"/><text x="41.6921%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (14 samples, 0.01%)</title><rect x="41.4421%" y="421" width="0.0113%" height="15" fill="rgb(245,200,0)" fg:x="51285" fg:w="14"/><text x="41.6921%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="41.4421%" y="405" width="0.0113%" height="15" fill="rgb(245,119,33)" fg:x="51285" fg:w="14"/><text x="41.6921%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (113 samples, 0.09%)</title><rect x="41.4316%" y="533" width="0.0913%" height="15" fill="rgb(231,125,12)" fg:x="51272" fg:w="113"/><text x="41.6816%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (113 samples, 0.09%)</title><rect x="41.4316%" y="517" width="0.0913%" height="15" fill="rgb(216,96,41)" fg:x="51272" fg:w="113"/><text x="41.6816%" y="527.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (113 samples, 0.09%)</title><rect x="41.4316%" y="501" width="0.0913%" height="15" fill="rgb(248,43,45)" fg:x="51272" fg:w="113"/><text x="41.6816%" y="511.50"></text></g><g><title>sn_rust_dealloc (86 samples, 0.07%)</title><rect x="41.4534%" y="485" width="0.0695%" height="15" fill="rgb(217,222,7)" fg:x="51299" fg:w="86"/><text x="41.7034%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (155 samples, 0.13%)</title><rect x="41.4316%" y="549" width="0.1253%" height="15" fill="rgb(233,28,6)" fg:x="51272" fg:w="155"/><text x="41.6816%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (42 samples, 0.03%)</title><rect x="41.5229%" y="533" width="0.0339%" height="15" fill="rgb(231,218,15)" fg:x="51385" fg:w="42"/><text x="41.7729%" y="543.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (42 samples, 0.03%)</title><rect x="41.5229%" y="517" width="0.0339%" height="15" fill="rgb(226,171,48)" fg:x="51385" fg:w="42"/><text x="41.7729%" y="527.50"></text></g><g><title>sn_rust_dealloc (42 samples, 0.03%)</title><rect x="41.5229%" y="501" width="0.0339%" height="15" fill="rgb(235,201,9)" fg:x="51385" fg:w="42"/><text x="41.7729%" y="511.50"></text></g><g><title>sn_rust_dealloc (43 samples, 0.03%)</title><rect x="41.5827%" y="485" width="0.0347%" height="15" fill="rgb(217,80,15)" fg:x="51459" fg:w="43"/><text x="41.8327%" y="495.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,210 samples, 0.98%)</title><rect x="40.6478%" y="581" width="0.9778%" height="15" fill="rgb(219,152,8)" fg:x="50302" fg:w="1210"/><text x="40.8978%" y="591.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (894 samples, 0.72%)</title><rect x="40.9031%" y="565" width="0.7224%" height="15" fill="rgb(243,107,38)" fg:x="50618" fg:w="894"/><text x="41.1531%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (85 samples, 0.07%)</title><rect x="41.5568%" y="549" width="0.0687%" height="15" fill="rgb(231,17,5)" fg:x="51427" fg:w="85"/><text x="41.8068%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (69 samples, 0.06%)</title><rect x="41.5698%" y="533" width="0.0558%" height="15" fill="rgb(209,25,54)" fg:x="51443" fg:w="69"/><text x="41.8198%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (69 samples, 0.06%)</title><rect x="41.5698%" y="517" width="0.0558%" height="15" fill="rgb(219,0,2)" fg:x="51443" fg:w="69"/><text x="41.8198%" y="527.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (69 samples, 0.06%)</title><rect x="41.5698%" y="501" width="0.0558%" height="15" fill="rgb(246,9,5)" fg:x="51443" fg:w="69"/><text x="41.8198%" y="511.50"></text></g><g><title>[libc-2.31.so] (457 samples, 0.37%)</title><rect x="41.6255%" y="581" width="0.3693%" height="15" fill="rgb(226,159,4)" fg:x="51512" fg:w="457"/><text x="41.8755%" y="591.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,443 samples, 1.97%)</title><rect x="40.1322%" y="613" width="1.9741%" height="15" fill="rgb(219,175,34)" fg:x="49664" fg:w="2443"/><text x="40.3822%" y="623.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (2,442 samples, 1.97%)</title><rect x="40.1330%" y="597" width="1.9733%" height="15" fill="rgb(236,10,46)" fg:x="49665" fg:w="2442"/><text x="40.3830%" y="607.50">t..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data (118 samples, 0.10%)</title><rect x="42.0110%" y="581" width="0.0954%" height="15" fill="rgb(240,211,16)" fg:x="51989" fg:w="118"/><text x="42.2610%" y="591.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (206 samples, 0.17%)</title><rect x="42.1112%" y="453" width="0.1665%" height="15" fill="rgb(205,3,43)" fg:x="52113" fg:w="206"/><text x="42.3612%" y="463.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (206 samples, 0.17%)</title><rect x="42.1112%" y="437" width="0.1665%" height="15" fill="rgb(245,7,22)" fg:x="52113" fg:w="206"/><text x="42.3612%" y="447.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (206 samples, 0.17%)</title><rect x="42.1112%" y="421" width="0.1665%" height="15" fill="rgb(239,132,32)" fg:x="52113" fg:w="206"/><text x="42.3612%" y="431.50"></text></g><g><title>[libc-2.31.so] (180 samples, 0.15%)</title><rect x="42.1322%" y="405" width="0.1455%" height="15" fill="rgb(228,202,34)" fg:x="52139" fg:w="180"/><text x="42.3822%" y="415.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (24 samples, 0.02%)</title><rect x="42.3407%" y="405" width="0.0194%" height="15" fill="rgb(254,200,22)" fg:x="52397" fg:w="24"/><text x="42.5907%" y="415.50"></text></g><g><title>core::ops::function::FnOnce::call_once (24 samples, 0.02%)</title><rect x="42.3407%" y="389" width="0.0194%" height="15" fill="rgb(219,10,39)" fg:x="52397" fg:w="24"/><text x="42.5907%" y="399.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (24 samples, 0.02%)</title><rect x="42.3407%" y="373" width="0.0194%" height="15" fill="rgb(226,210,39)" fg:x="52397" fg:w="24"/><text x="42.5907%" y="383.50"></text></g><g><title>async_ffi::FfiContext::with_context (24 samples, 0.02%)</title><rect x="42.3407%" y="357" width="0.0194%" height="15" fill="rgb(208,219,16)" fg:x="52397" fg:w="24"/><text x="42.5907%" y="367.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (436 samples, 0.35%)</title><rect x="42.1063%" y="533" width="0.3523%" height="15" fill="rgb(216,158,51)" fg:x="52107" fg:w="436"/><text x="42.3563%" y="543.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (436 samples, 0.35%)</title><rect x="42.1063%" y="517" width="0.3523%" height="15" fill="rgb(233,14,44)" fg:x="52107" fg:w="436"/><text x="42.3563%" y="527.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (436 samples, 0.35%)</title><rect x="42.1063%" y="501" width="0.3523%" height="15" fill="rgb(237,97,39)" fg:x="52107" fg:w="436"/><text x="42.3563%" y="511.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (436 samples, 0.35%)</title><rect x="42.1063%" y="485" width="0.3523%" height="15" fill="rgb(218,198,43)" fg:x="52107" fg:w="436"/><text x="42.3563%" y="495.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (436 samples, 0.35%)</title><rect x="42.1063%" y="469" width="0.3523%" height="15" fill="rgb(231,104,20)" fg:x="52107" fg:w="436"/><text x="42.3563%" y="479.50"></text></g><g><title>std::panic::catch_unwind (224 samples, 0.18%)</title><rect x="42.2776%" y="453" width="0.1810%" height="15" fill="rgb(254,36,13)" fg:x="52319" fg:w="224"/><text x="42.5276%" y="463.50"></text></g><g><title>std::panicking::try (224 samples, 0.18%)</title><rect x="42.2776%" y="437" width="0.1810%" height="15" fill="rgb(248,14,50)" fg:x="52319" fg:w="224"/><text x="42.5276%" y="447.50"></text></g><g><title>std::panicking::try::do_call (224 samples, 0.18%)</title><rect x="42.2776%" y="421" width="0.1810%" height="15" fill="rgb(217,107,29)" fg:x="52319" fg:w="224"/><text x="42.5276%" y="431.50"></text></g><g><title>[libc-2.31.so] (122 samples, 0.10%)</title><rect x="42.3601%" y="405" width="0.0986%" height="15" fill="rgb(251,169,33)" fg:x="52421" fg:w="122"/><text x="42.6101%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (18 samples, 0.01%)</title><rect x="42.4586%" y="533" width="0.0145%" height="15" fill="rgb(217,108,32)" fg:x="52543" fg:w="18"/><text x="42.7086%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (18 samples, 0.01%)</title><rect x="42.4586%" y="517" width="0.0145%" height="15" fill="rgb(219,66,42)" fg:x="52543" fg:w="18"/><text x="42.7086%" y="527.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.01%)</title><rect x="42.4586%" y="501" width="0.0145%" height="15" fill="rgb(206,180,7)" fg:x="52543" fg:w="18"/><text x="42.7086%" y="511.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn (18 samples, 0.01%)</title><rect x="42.4586%" y="485" width="0.0145%" height="15" fill="rgb(208,226,31)" fg:x="52543" fg:w="18"/><text x="42.7086%" y="495.50"></text></g><g><title>async_ffi::DropBomb::with (18 samples, 0.01%)</title><rect x="42.4586%" y="469" width="0.0145%" height="15" fill="rgb(218,26,49)" fg:x="52543" fg:w="18"/><text x="42.7086%" y="479.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (77 samples, 0.06%)</title><rect x="42.5193%" y="309" width="0.0622%" height="15" fill="rgb(233,197,48)" fg:x="52618" fg:w="77"/><text x="42.7693%" y="319.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (3,033 samples, 2.45%)</title><rect x="40.1322%" y="629" width="2.4509%" height="15" fill="rgb(252,181,51)" fg:x="49664" fg:w="3033"/><text x="40.3822%" y="639.50">tr..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (590 samples, 0.48%)</title><rect x="42.1063%" y="613" width="0.4768%" height="15" fill="rgb(253,90,19)" fg:x="52107" fg:w="590"/><text x="42.3563%" y="623.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (590 samples, 0.48%)</title><rect x="42.1063%" y="597" width="0.4768%" height="15" fill="rgb(215,171,30)" fg:x="52107" fg:w="590"/><text x="42.3563%" y="607.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (590 samples, 0.48%)</title><rect x="42.1063%" y="581" width="0.4768%" height="15" fill="rgb(214,222,9)" fg:x="52107" fg:w="590"/><text x="42.3563%" y="591.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (590 samples, 0.48%)</title><rect x="42.1063%" y="565" width="0.4768%" height="15" fill="rgb(223,3,22)" fg:x="52107" fg:w="590"/><text x="42.3563%" y="575.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (590 samples, 0.48%)</title><rect x="42.1063%" y="549" width="0.4768%" height="15" fill="rgb(225,196,46)" fg:x="52107" fg:w="590"/><text x="42.3563%" y="559.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_TO&lt;_ErasedPtr&gt;::pull_data (136 samples, 0.11%)</title><rect x="42.4732%" y="533" width="0.1099%" height="15" fill="rgb(209,110,37)" fg:x="52561" fg:w="136"/><text x="42.7232%" y="543.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::pull_data (136 samples, 0.11%)</title><rect x="42.4732%" y="517" width="0.1099%" height="15" fill="rgb(249,89,12)" fg:x="52561" fg:w="136"/><text x="42.7232%" y="527.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data (121 samples, 0.10%)</title><rect x="42.4853%" y="501" width="0.0978%" height="15" fill="rgb(226,27,33)" fg:x="52576" fg:w="121"/><text x="42.7353%" y="511.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (121 samples, 0.10%)</title><rect x="42.4853%" y="485" width="0.0978%" height="15" fill="rgb(213,82,22)" fg:x="52576" fg:w="121"/><text x="42.7353%" y="495.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (121 samples, 0.10%)</title><rect x="42.4853%" y="469" width="0.0978%" height="15" fill="rgb(248,140,0)" fg:x="52576" fg:w="121"/><text x="42.7353%" y="479.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (121 samples, 0.10%)</title><rect x="42.4853%" y="453" width="0.0978%" height="15" fill="rgb(228,106,3)" fg:x="52576" fg:w="121"/><text x="42.7353%" y="463.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (114 samples, 0.09%)</title><rect x="42.4910%" y="437" width="0.0921%" height="15" fill="rgb(209,23,37)" fg:x="52583" fg:w="114"/><text x="42.7410%" y="447.50"></text></g><g><title>alloc::alloc::exchange_malloc (114 samples, 0.09%)</title><rect x="42.4910%" y="421" width="0.0921%" height="15" fill="rgb(241,93,50)" fg:x="52583" fg:w="114"/><text x="42.7410%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (114 samples, 0.09%)</title><rect x="42.4910%" y="405" width="0.0921%" height="15" fill="rgb(253,46,43)" fg:x="52583" fg:w="114"/><text x="42.7410%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (114 samples, 0.09%)</title><rect x="42.4910%" y="389" width="0.0921%" height="15" fill="rgb(226,206,43)" fg:x="52583" fg:w="114"/><text x="42.7410%" y="399.50"></text></g><g><title>alloc::alloc::alloc (114 samples, 0.09%)</title><rect x="42.4910%" y="373" width="0.0921%" height="15" fill="rgb(217,54,7)" fg:x="52583" fg:w="114"/><text x="42.7410%" y="383.50"></text></g><g><title>__rg_alloc (114 samples, 0.09%)</title><rect x="42.4910%" y="357" width="0.0921%" height="15" fill="rgb(223,5,52)" fg:x="52583" fg:w="114"/><text x="42.7410%" y="367.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (114 samples, 0.09%)</title><rect x="42.4910%" y="341" width="0.0921%" height="15" fill="rgb(206,52,46)" fg:x="52583" fg:w="114"/><text x="42.7410%" y="351.50"></text></g><g><title>sn_rust_alloc (114 samples, 0.09%)</title><rect x="42.4910%" y="325" width="0.0921%" height="15" fill="rgb(253,136,11)" fg:x="52583" fg:w="114"/><text x="42.7410%" y="335.50"></text></g><g><title>async_global_executor::threading::thread_main_loop (3,049 samples, 2.46%)</title><rect x="40.1306%" y="1093" width="2.4638%" height="15" fill="rgb(208,106,33)" fg:x="49662" fg:w="3049"/><text x="40.3806%" y="1103.50">as..</text></g><g><title>std::panic::catch_unwind (3,049 samples, 2.46%)</title><rect x="40.1306%" y="1077" width="2.4638%" height="15" fill="rgb(206,54,4)" fg:x="49662" fg:w="3049"/><text x="40.3806%" y="1087.50">st..</text></g><g><title>std::panicking::try (3,049 samples, 2.46%)</title><rect x="40.1306%" y="1061" width="2.4638%" height="15" fill="rgb(213,3,15)" fg:x="49662" fg:w="3049"/><text x="40.3806%" y="1071.50">st..</text></g><g><title>std::panicking::try::do_call (3,049 samples, 2.46%)</title><rect x="40.1306%" y="1045" width="2.4638%" height="15" fill="rgb(252,211,39)" fg:x="49662" fg:w="3049"/><text x="40.3806%" y="1055.50">st..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (3,049 samples, 2.46%)</title><rect x="40.1306%" y="1029" width="2.4638%" height="15" fill="rgb(223,6,36)" fg:x="49662" fg:w="3049"/><text x="40.3806%" y="1039.50">as..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3,049 samples, 2.46%)</title><rect x="40.1306%" y="1013" width="2.4638%" height="15" fill="rgb(252,169,45)" fg:x="49662" fg:w="3049"/><text x="40.3806%" y="1023.50">st..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3,049 samples, 2.46%)</title><rect x="40.1306%" y="997" width="2.4638%" height="15" fill="rgb(212,48,26)" fg:x="49662" fg:w="3049"/><text x="40.3806%" y="1007.50">st..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (3,049 samples, 2.46%)</title><rect x="40.1306%" y="981" width="2.4638%" height="15" fill="rgb(251,102,48)" fg:x="49662" fg:w="3049"/><text x="40.3806%" y="991.50">as..</text></g><g><title>async_global_executor::reactor::block_on (3,049 samples, 2.46%)</title><rect x="40.1306%" y="965" width="2.4638%" height="15" fill="rgb(243,208,16)" fg:x="49662" fg:w="3049"/><text x="40.3806%" y="975.50">as..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (3,049 samples, 2.46%)</title><rect x="40.1306%" y="949" width="2.4638%" height="15" fill="rgb(219,96,24)" fg:x="49662" fg:w="3049"/><text x="40.3806%" y="959.50">as..</text></g><g><title>async_io::driver::block_on (3,049 samples, 2.46%)</title><rect x="40.1306%" y="933" width="2.4638%" height="15" fill="rgb(219,33,29)" fg:x="49662" fg:w="3049"/><text x="40.3806%" y="943.50">as..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (3,049 samples, 2.46%)</title><rect x="40.1306%" y="917" width="2.4638%" height="15" fill="rgb(223,176,5)" fg:x="49662" fg:w="3049"/><text x="40.3806%" y="927.50">&lt;f..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,049 samples, 2.46%)</title><rect x="40.1306%" y="901" width="2.4638%" height="15" fill="rgb(228,140,14)" fg:x="49662" fg:w="3049"/><text x="40.3806%" y="911.50">&lt;c..</text></g><g><title>async_executor::Executor::run::{{closure}} (3,049 samples, 2.46%)</title><rect x="40.1306%" y="885" width="2.4638%" height="15" fill="rgb(217,179,31)" fg:x="49662" fg:w="3049"/><text x="40.3806%" y="895.50">as..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (3,049 samples, 2.46%)</title><rect x="40.1306%" y="869" width="2.4638%" height="15" fill="rgb(230,9,30)" fg:x="49662" fg:w="3049"/><text x="40.3806%" y="879.50">&lt;f..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,049 samples, 2.46%)</title><rect x="40.1306%" y="853" width="2.4638%" height="15" fill="rgb(230,136,20)" fg:x="49662" fg:w="3049"/><text x="40.3806%" y="863.50">&lt;c..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (3,049 samples, 2.46%)</title><rect x="40.1306%" y="837" width="2.4638%" height="15" fill="rgb(215,210,22)" fg:x="49662" fg:w="3049"/><text x="40.3806%" y="847.50">as..</text></g><g><title>async_task::runnable::Runnable::run (3,049 samples, 2.46%)</title><rect x="40.1306%" y="821" width="2.4638%" height="15" fill="rgb(218,43,5)" fg:x="49662" fg:w="3049"/><text x="40.3806%" y="831.50">as..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (3,049 samples, 2.46%)</title><rect x="40.1306%" y="805" width="2.4638%" height="15" fill="rgb(216,11,5)" fg:x="49662" fg:w="3049"/><text x="40.3806%" y="815.50">as..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (3,049 samples, 2.46%)</title><rect x="40.1306%" y="789" width="2.4638%" height="15" fill="rgb(209,82,29)" fg:x="49662" fg:w="3049"/><text x="40.3806%" y="799.50">&lt;c..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,049 samples, 2.46%)</title><rect x="40.1306%" y="773" width="2.4638%" height="15" fill="rgb(244,115,12)" fg:x="49662" fg:w="3049"/><text x="40.3806%" y="783.50">&lt;c..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (3,049 samples, 2.46%)</title><rect x="40.1306%" y="757" width="2.4638%" height="15" fill="rgb(222,82,18)" fg:x="49662" fg:w="3049"/><text x="40.3806%" y="767.50">as..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (3,049 samples, 2.46%)</title><rect x="40.1306%" y="741" width="2.4638%" height="15" fill="rgb(249,227,8)" fg:x="49662" fg:w="3049"/><text x="40.3806%" y="751.50">&lt;a..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (3,049 samples, 2.46%)</title><rect x="40.1306%" y="725" width="2.4638%" height="15" fill="rgb(253,141,45)" fg:x="49662" fg:w="3049"/><text x="40.3806%" y="735.50">as..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3,049 samples, 2.46%)</title><rect x="40.1306%" y="709" width="2.4638%" height="15" fill="rgb(234,184,4)" fg:x="49662" fg:w="3049"/><text x="40.3806%" y="719.50">st..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3,049 samples, 2.46%)</title><rect x="40.1306%" y="693" width="2.4638%" height="15" fill="rgb(218,194,23)" fg:x="49662" fg:w="3049"/><text x="40.3806%" y="703.50">st..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (3,049 samples, 2.46%)</title><rect x="40.1306%" y="677" width="2.4638%" height="15" fill="rgb(235,66,41)" fg:x="49662" fg:w="3049"/><text x="40.3806%" y="687.50">as..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (3,049 samples, 2.46%)</title><rect x="40.1306%" y="661" width="2.4638%" height="15" fill="rgb(245,217,1)" fg:x="49662" fg:w="3049"/><text x="40.3806%" y="671.50">&lt;a..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,049 samples, 2.46%)</title><rect x="40.1306%" y="645" width="2.4638%" height="15" fill="rgb(229,91,1)" fg:x="49662" fg:w="3049"/><text x="40.3806%" y="655.50">&lt;c..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (14 samples, 0.01%)</title><rect x="42.5831%" y="629" width="0.0113%" height="15" fill="rgb(207,101,30)" fg:x="52697" fg:w="14"/><text x="42.8331%" y="639.50"></text></g><g><title>__rust_probestack (14 samples, 0.01%)</title><rect x="42.5831%" y="613" width="0.0113%" height="15" fill="rgb(223,82,49)" fg:x="52697" fg:w="14"/><text x="42.8331%" y="623.50"></text></g><g><title>&lt;tremor_pipeline::event::ValueIter as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.02%)</title><rect x="42.9855%" y="501" width="0.0210%" height="15" fill="rgb(218,167,17)" fg:x="53195" fg:w="26"/><text x="43.2355%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (39 samples, 0.03%)</title><rect x="43.0138%" y="485" width="0.0315%" height="15" fill="rgb(208,103,14)" fg:x="53230" fg:w="39"/><text x="43.2638%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (39 samples, 0.03%)</title><rect x="43.0138%" y="469" width="0.0315%" height="15" fill="rgb(238,20,8)" fg:x="53230" fg:w="39"/><text x="43.2638%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (29 samples, 0.02%)</title><rect x="43.0219%" y="453" width="0.0234%" height="15" fill="rgb(218,80,54)" fg:x="53240" fg:w="29"/><text x="43.2719%" y="463.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (56 samples, 0.05%)</title><rect x="43.0065%" y="501" width="0.0453%" height="15" fill="rgb(240,144,17)" fg:x="53221" fg:w="56"/><text x="43.2565%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::deref::Deref for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::deref (17 samples, 0.01%)</title><rect x="43.0518%" y="501" width="0.0137%" height="15" fill="rgb(245,27,50)" fg:x="53277" fg:w="17"/><text x="43.3018%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::as_slice (17 samples, 0.01%)</title><rect x="43.0518%" y="485" width="0.0137%" height="15" fill="rgb(251,51,7)" fg:x="53277" fg:w="17"/><text x="43.3018%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (36 samples, 0.03%)</title><rect x="43.0679%" y="501" width="0.0291%" height="15" fill="rgb(245,217,29)" fg:x="53297" fg:w="36"/><text x="43.3179%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (36 samples, 0.03%)</title><rect x="43.0679%" y="485" width="0.0291%" height="15" fill="rgb(221,176,29)" fg:x="53297" fg:w="36"/><text x="43.3179%" y="495.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.02%)</title><rect x="43.0986%" y="437" width="0.0226%" height="15" fill="rgb(212,180,24)" fg:x="53335" fg:w="28"/><text x="43.3486%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (62 samples, 0.05%)</title><rect x="43.0970%" y="501" width="0.0501%" height="15" fill="rgb(254,24,2)" fg:x="53333" fg:w="62"/><text x="43.3470%" y="511.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (62 samples, 0.05%)</title><rect x="43.0970%" y="485" width="0.0501%" height="15" fill="rgb(230,100,2)" fg:x="53333" fg:w="62"/><text x="43.3470%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (62 samples, 0.05%)</title><rect x="43.0970%" y="469" width="0.0501%" height="15" fill="rgb(219,142,25)" fg:x="53333" fg:w="62"/><text x="43.3470%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (62 samples, 0.05%)</title><rect x="43.0970%" y="453" width="0.0501%" height="15" fill="rgb(240,73,43)" fg:x="53333" fg:w="62"/><text x="43.3470%" y="463.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (32 samples, 0.03%)</title><rect x="43.1213%" y="437" width="0.0259%" height="15" fill="rgb(214,114,15)" fg:x="53363" fg:w="32"/><text x="43.3713%" y="447.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (32 samples, 0.03%)</title><rect x="43.1213%" y="421" width="0.0259%" height="15" fill="rgb(207,130,4)" fg:x="53363" fg:w="32"/><text x="43.3713%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::iter (18 samples, 0.01%)</title><rect x="43.1471%" y="501" width="0.0145%" height="15" fill="rgb(221,25,40)" fg:x="53395" fg:w="18"/><text x="43.3971%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (18 samples, 0.01%)</title><rect x="43.1471%" y="485" width="0.0145%" height="15" fill="rgb(241,184,7)" fg:x="53395" fg:w="18"/><text x="43.3971%" y="495.50"></text></g><g><title>sn_rust_dealloc (160 samples, 0.13%)</title><rect x="43.2207%" y="341" width="0.1293%" height="15" fill="rgb(235,159,4)" fg:x="53486" fg:w="160"/><text x="43.4707%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (249 samples, 0.20%)</title><rect x="43.1851%" y="405" width="0.2012%" height="15" fill="rgb(214,87,48)" fg:x="53442" fg:w="249"/><text x="43.4351%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::vec::private::RVec&lt;u8&gt;]&gt; (249 samples, 0.20%)</title><rect x="43.1851%" y="389" width="0.2012%" height="15" fill="rgb(246,198,24)" fg:x="53442" fg:w="249"/><text x="43.4351%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (227 samples, 0.18%)</title><rect x="43.2029%" y="373" width="0.1834%" height="15" fill="rgb(209,66,40)" fg:x="53464" fg:w="227"/><text x="43.4529%" y="383.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (227 samples, 0.18%)</title><rect x="43.2029%" y="357" width="0.1834%" height="15" fill="rgb(233,147,39)" fg:x="53464" fg:w="227"/><text x="43.4529%" y="367.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (45 samples, 0.04%)</title><rect x="43.3500%" y="341" width="0.0364%" height="15" fill="rgb(231,145,52)" fg:x="53646" fg:w="45"/><text x="43.6000%" y="351.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (278 samples, 0.22%)</title><rect x="43.1706%" y="469" width="0.2246%" height="15" fill="rgb(206,20,26)" fg:x="53424" fg:w="278"/><text x="43.4206%" y="479.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (272 samples, 0.22%)</title><rect x="43.1754%" y="453" width="0.2198%" height="15" fill="rgb(238,220,4)" fg:x="53430" fg:w="272"/><text x="43.4254%" y="463.50"></text></g><g><title>core::mem::drop (260 samples, 0.21%)</title><rect x="43.1851%" y="437" width="0.2101%" height="15" fill="rgb(252,195,42)" fg:x="53442" fg:w="260"/><text x="43.4351%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (260 samples, 0.21%)</title><rect x="43.1851%" y="421" width="0.2101%" height="15" fill="rgb(209,10,6)" fg:x="53442" fg:w="260"/><text x="43.4351%" y="431.50"></text></g><g><title>sn_rust_dealloc (47 samples, 0.04%)</title><rect x="43.3952%" y="469" width="0.0380%" height="15" fill="rgb(229,3,52)" fg:x="53702" fg:w="47"/><text x="43.6452%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (337 samples, 0.27%)</title><rect x="43.1617%" y="501" width="0.2723%" height="15" fill="rgb(253,49,37)" fg:x="53413" fg:w="337"/><text x="43.4117%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (337 samples, 0.27%)</title><rect x="43.1617%" y="485" width="0.2723%" height="15" fill="rgb(240,103,49)" fg:x="53413" fg:w="337"/><text x="43.4117%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (42 samples, 0.03%)</title><rect x="43.4590%" y="405" width="0.0339%" height="15" fill="rgb(250,182,30)" fg:x="53781" fg:w="42"/><text x="43.7090%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (42 samples, 0.03%)</title><rect x="43.4590%" y="389" width="0.0339%" height="15" fill="rgb(248,8,30)" fg:x="53781" fg:w="42"/><text x="43.7090%" y="399.50"></text></g><g><title>core::mem::drop (16 samples, 0.01%)</title><rect x="43.4801%" y="373" width="0.0129%" height="15" fill="rgb(237,120,30)" fg:x="53807" fg:w="16"/><text x="43.7301%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (16 samples, 0.01%)</title><rect x="43.4801%" y="357" width="0.0129%" height="15" fill="rgb(221,146,34)" fg:x="53807" fg:w="16"/><text x="43.7301%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (16 samples, 0.01%)</title><rect x="43.4801%" y="341" width="0.0129%" height="15" fill="rgb(242,55,13)" fg:x="53807" fg:w="16"/><text x="43.7301%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="43.4801%" y="325" width="0.0129%" height="15" fill="rgb(242,112,31)" fg:x="53807" fg:w="16"/><text x="43.7301%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 0.01%)</title><rect x="43.4801%" y="309" width="0.0129%" height="15" fill="rgb(249,192,27)" fg:x="53807" fg:w="16"/><text x="43.7301%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 0.01%)</title><rect x="43.4801%" y="293" width="0.0129%" height="15" fill="rgb(208,204,44)" fg:x="53807" fg:w="16"/><text x="43.7301%" y="303.50"></text></g><g><title>__rg_dealloc (16 samples, 0.01%)</title><rect x="43.4801%" y="277" width="0.0129%" height="15" fill="rgb(208,93,54)" fg:x="53807" fg:w="16"/><text x="43.7301%" y="287.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (16 samples, 0.01%)</title><rect x="43.4801%" y="261" width="0.0129%" height="15" fill="rgb(242,1,31)" fg:x="53807" fg:w="16"/><text x="43.7301%" y="271.50"></text></g><g><title>sn_rust_dealloc (175 samples, 0.14%)</title><rect x="43.4930%" y="405" width="0.1414%" height="15" fill="rgb(241,83,25)" fg:x="53823" fg:w="175"/><text x="43.7430%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (265 samples, 0.21%)</title><rect x="43.4356%" y="453" width="0.2141%" height="15" fill="rgb(205,169,50)" fg:x="53752" fg:w="265"/><text x="43.6856%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (265 samples, 0.21%)</title><rect x="43.4356%" y="437" width="0.2141%" height="15" fill="rgb(239,186,37)" fg:x="53752" fg:w="265"/><text x="43.6856%" y="447.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (265 samples, 0.21%)</title><rect x="43.4356%" y="421" width="0.2141%" height="15" fill="rgb(205,221,10)" fg:x="53752" fg:w="265"/><text x="43.6856%" y="431.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (19 samples, 0.02%)</title><rect x="43.6344%" y="405" width="0.0154%" height="15" fill="rgb(218,196,15)" fg:x="53998" fg:w="19"/><text x="43.8844%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::private::RVec&lt;T&gt;::buffer_mut (13 samples, 0.01%)</title><rect x="43.6554%" y="389" width="0.0105%" height="15" fill="rgb(218,196,35)" fg:x="54024" fg:w="13"/><text x="43.9054%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (16 samples, 0.01%)</title><rect x="44.2809%" y="277" width="0.0129%" height="15" fill="rgb(233,63,24)" fg:x="54798" fg:w="16"/><text x="44.5309%" y="287.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (16 samples, 0.01%)</title><rect x="44.2809%" y="261" width="0.0129%" height="15" fill="rgb(225,8,4)" fg:x="54798" fg:w="16"/><text x="44.5309%" y="271.50"></text></g><g><title>sn_rust_dealloc (289 samples, 0.23%)</title><rect x="44.2938%" y="277" width="0.2335%" height="15" fill="rgb(234,105,35)" fg:x="54814" fg:w="289"/><text x="44.5438%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,078 samples, 0.87%)</title><rect x="43.6716%" y="357" width="0.8711%" height="15" fill="rgb(236,21,32)" fg:x="54044" fg:w="1078"/><text x="43.9216%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (1,078 samples, 0.87%)</title><rect x="43.6716%" y="341" width="0.8711%" height="15" fill="rgb(228,109,6)" fg:x="54044" fg:w="1078"/><text x="43.9216%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (1,054 samples, 0.85%)</title><rect x="43.6910%" y="325" width="0.8517%" height="15" fill="rgb(229,215,31)" fg:x="54068" fg:w="1054"/><text x="43.9410%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (1,054 samples, 0.85%)</title><rect x="43.6910%" y="309" width="0.8517%" height="15" fill="rgb(221,52,54)" fg:x="54068" fg:w="1054"/><text x="43.9410%" y="319.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (1,054 samples, 0.85%)</title><rect x="43.6910%" y="293" width="0.8517%" height="15" fill="rgb(252,129,43)" fg:x="54068" fg:w="1054"/><text x="43.9410%" y="303.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (19 samples, 0.02%)</title><rect x="44.5273%" y="277" width="0.0154%" height="15" fill="rgb(248,183,27)" fg:x="55103" fg:w="19"/><text x="44.7773%" y="287.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (1,115 samples, 0.90%)</title><rect x="43.6546%" y="421" width="0.9010%" height="15" fill="rgb(250,0,22)" fg:x="54023" fg:w="1115"/><text x="43.9046%" y="431.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (1,114 samples, 0.90%)</title><rect x="43.6554%" y="405" width="0.9002%" height="15" fill="rgb(213,166,10)" fg:x="54024" fg:w="1114"/><text x="43.9054%" y="415.50"></text></g><g><title>core::mem::drop (1,094 samples, 0.88%)</title><rect x="43.6716%" y="389" width="0.8840%" height="15" fill="rgb(207,163,36)" fg:x="54044" fg:w="1094"/><text x="43.9216%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (1,094 samples, 0.88%)</title><rect x="43.6716%" y="373" width="0.8840%" height="15" fill="rgb(208,122,22)" fg:x="54044" fg:w="1094"/><text x="43.9216%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::string::RString&gt;&gt; (16 samples, 0.01%)</title><rect x="44.5427%" y="357" width="0.0129%" height="15" fill="rgb(207,104,49)" fg:x="55122" fg:w="16"/><text x="44.7927%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="44.5427%" y="341" width="0.0129%" height="15" fill="rgb(248,211,50)" fg:x="55122" fg:w="16"/><text x="44.7927%" y="351.50"></text></g><g><title>sn_rust_dealloc (96 samples, 0.08%)</title><rect x="44.5556%" y="421" width="0.0776%" height="15" fill="rgb(217,13,45)" fg:x="55138" fg:w="96"/><text x="44.8056%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (1,529 samples, 1.24%)</title><rect x="43.4340%" y="485" width="1.2355%" height="15" fill="rgb(211,216,49)" fg:x="53750" fg:w="1529"/><text x="43.6840%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (1,527 samples, 1.23%)</title><rect x="43.4356%" y="469" width="1.2339%" height="15" fill="rgb(221,58,53)" fg:x="53752" fg:w="1527"/><text x="43.6856%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (1,262 samples, 1.02%)</title><rect x="43.6497%" y="453" width="1.0198%" height="15" fill="rgb(220,112,41)" fg:x="54017" fg:w="1262"/><text x="43.8997%" y="463.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (1,262 samples, 1.02%)</title><rect x="43.6497%" y="437" width="1.0198%" height="15" fill="rgb(236,38,28)" fg:x="54017" fg:w="1262"/><text x="43.8997%" y="447.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (45 samples, 0.04%)</title><rect x="44.6332%" y="421" width="0.0364%" height="15" fill="rgb(227,195,22)" fg:x="55234" fg:w="45"/><text x="44.8832%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (29 samples, 0.02%)</title><rect x="44.6695%" y="485" width="0.0234%" height="15" fill="rgb(214,55,33)" fg:x="55279" fg:w="29"/><text x="44.9195%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (29 samples, 0.02%)</title><rect x="44.6695%" y="469" width="0.0234%" height="15" fill="rgb(248,80,13)" fg:x="55279" fg:w="29"/><text x="44.9195%" y="479.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (29 samples, 0.02%)</title><rect x="44.6695%" y="453" width="0.0234%" height="15" fill="rgb(238,52,6)" fg:x="55279" fg:w="29"/><text x="44.9195%" y="463.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (19 samples, 0.02%)</title><rect x="44.6776%" y="437" width="0.0154%" height="15" fill="rgb(224,198,47)" fg:x="55289" fg:w="19"/><text x="44.9276%" y="447.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (19 samples, 0.02%)</title><rect x="44.6776%" y="421" width="0.0154%" height="15" fill="rgb(233,171,20)" fg:x="55289" fg:w="19"/><text x="44.9276%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (23 samples, 0.02%)</title><rect x="44.6930%" y="485" width="0.0186%" height="15" fill="rgb(241,30,25)" fg:x="55308" fg:w="23"/><text x="44.9430%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (23 samples, 0.02%)</title><rect x="44.6930%" y="469" width="0.0186%" height="15" fill="rgb(207,171,38)" fg:x="55308" fg:w="23"/><text x="44.9430%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (23 samples, 0.02%)</title><rect x="44.6930%" y="453" width="0.0186%" height="15" fill="rgb(234,70,1)" fg:x="55308" fg:w="23"/><text x="44.9430%" y="463.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (23 samples, 0.02%)</title><rect x="44.6930%" y="437" width="0.0186%" height="15" fill="rgb(232,178,18)" fg:x="55308" fg:w="23"/><text x="44.9430%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (85 samples, 0.07%)</title><rect x="44.7229%" y="453" width="0.0687%" height="15" fill="rgb(241,78,40)" fg:x="55345" fg:w="85"/><text x="44.9729%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (85 samples, 0.07%)</title><rect x="44.7229%" y="437" width="0.0687%" height="15" fill="rgb(222,35,25)" fg:x="55345" fg:w="85"/><text x="44.9729%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (85 samples, 0.07%)</title><rect x="44.7229%" y="421" width="0.0687%" height="15" fill="rgb(207,92,16)" fg:x="55345" fg:w="85"/><text x="44.9729%" y="431.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (112 samples, 0.09%)</title><rect x="44.7116%" y="469" width="0.0905%" height="15" fill="rgb(216,59,51)" fg:x="55331" fg:w="112"/><text x="44.9616%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="44.7916%" y="453" width="0.0105%" height="15" fill="rgb(213,80,28)" fg:x="55430" fg:w="13"/><text x="45.0416%" y="463.50"></text></g><g><title>alloc::alloc::box_free (13 samples, 0.01%)</title><rect x="44.7916%" y="437" width="0.0105%" height="15" fill="rgb(220,93,7)" fg:x="55430" fg:w="13"/><text x="45.0416%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.01%)</title><rect x="44.7916%" y="421" width="0.0105%" height="15" fill="rgb(225,24,44)" fg:x="55430" fg:w="13"/><text x="45.0416%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.01%)</title><rect x="44.7916%" y="405" width="0.0105%" height="15" fill="rgb(243,74,40)" fg:x="55430" fg:w="13"/><text x="45.0416%" y="415.50"></text></g><g><title>__rg_dealloc (13 samples, 0.01%)</title><rect x="44.7916%" y="389" width="0.0105%" height="15" fill="rgb(228,39,7)" fg:x="55430" fg:w="13"/><text x="45.0416%" y="399.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (13 samples, 0.01%)</title><rect x="44.7916%" y="373" width="0.0105%" height="15" fill="rgb(227,79,8)" fg:x="55430" fg:w="13"/><text x="45.0416%" y="383.50"></text></g><g><title>abi_stable::std_types::arc::private::RArc&lt;T&gt;::data (655 samples, 0.53%)</title><rect x="44.8732%" y="309" width="0.5293%" height="15" fill="rgb(236,58,11)" fg:x="55531" fg:w="655"/><text x="45.1232%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (15 samples, 0.01%)</title><rect x="45.4291%" y="181" width="0.0121%" height="15" fill="rgb(249,63,35)" fg:x="56219" fg:w="15"/><text x="45.6791%" y="191.50"></text></g><g><title>alloc::alloc::dealloc (15 samples, 0.01%)</title><rect x="45.4291%" y="165" width="0.0121%" height="15" fill="rgb(252,114,16)" fg:x="56219" fg:w="15"/><text x="45.6791%" y="175.50"></text></g><g><title>__rg_dealloc (15 samples, 0.01%)</title><rect x="45.4291%" y="149" width="0.0121%" height="15" fill="rgb(254,151,24)" fg:x="56219" fg:w="15"/><text x="45.6791%" y="159.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (15 samples, 0.01%)</title><rect x="45.4291%" y="133" width="0.0121%" height="15" fill="rgb(253,54,39)" fg:x="56219" fg:w="15"/><text x="45.6791%" y="143.50"></text></g><g><title>core::mem::drop (1,159 samples, 0.94%)</title><rect x="45.4283%" y="229" width="0.9366%" height="15" fill="rgb(243,25,45)" fg:x="56218" fg:w="1159"/><text x="45.6783%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (1,159 samples, 0.94%)</title><rect x="45.4283%" y="213" width="0.9366%" height="15" fill="rgb(234,134,9)" fg:x="56218" fg:w="1159"/><text x="45.6783%" y="223.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1,159 samples, 0.94%)</title><rect x="45.4283%" y="197" width="0.9366%" height="15" fill="rgb(227,166,31)" fg:x="56218" fg:w="1159"/><text x="45.6783%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1,142 samples, 0.92%)</title><rect x="45.4421%" y="181" width="0.9228%" height="15" fill="rgb(245,143,41)" fg:x="56235" fg:w="1142"/><text x="45.6921%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_sub (1,142 samples, 0.92%)</title><rect x="45.4421%" y="165" width="0.9228%" height="15" fill="rgb(238,181,32)" fg:x="56235" fg:w="1142"/><text x="45.6921%" y="175.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (35 samples, 0.03%)</title><rect x="46.3810%" y="181" width="0.0283%" height="15" fill="rgb(224,113,18)" fg:x="57397" fg:w="35"/><text x="46.6310%" y="191.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (35 samples, 0.03%)</title><rect x="46.3810%" y="165" width="0.0283%" height="15" fill="rgb(240,229,28)" fg:x="57397" fg:w="35"/><text x="46.6310%" y="175.50"></text></g><g><title>core::mem::drop (34 samples, 0.03%)</title><rect x="46.3818%" y="149" width="0.0275%" height="15" fill="rgb(250,185,3)" fg:x="57398" fg:w="34"/><text x="46.6318%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (34 samples, 0.03%)</title><rect x="46.3818%" y="133" width="0.0275%" height="15" fill="rgb(212,59,25)" fg:x="57398" fg:w="34"/><text x="46.6318%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (34 samples, 0.03%)</title><rect x="46.3818%" y="117" width="0.0275%" height="15" fill="rgb(221,87,20)" fg:x="57398" fg:w="34"/><text x="46.6318%" y="127.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 0.03%)</title><rect x="46.3818%" y="101" width="0.0275%" height="15" fill="rgb(213,74,28)" fg:x="57398" fg:w="34"/><text x="46.6318%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (34 samples, 0.03%)</title><rect x="46.3818%" y="85" width="0.0275%" height="15" fill="rgb(224,132,34)" fg:x="57398" fg:w="34"/><text x="46.6318%" y="95.50"></text></g><g><title>alloc::alloc::dealloc (34 samples, 0.03%)</title><rect x="46.3818%" y="69" width="0.0275%" height="15" fill="rgb(222,101,24)" fg:x="57398" fg:w="34"/><text x="46.6318%" y="79.50"></text></g><g><title>__rg_dealloc (34 samples, 0.03%)</title><rect x="46.3818%" y="53" width="0.0275%" height="15" fill="rgb(254,142,4)" fg:x="57398" fg:w="34"/><text x="46.6318%" y="63.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (34 samples, 0.03%)</title><rect x="46.3818%" y="37" width="0.0275%" height="15" fill="rgb(230,229,49)" fg:x="57398" fg:w="34"/><text x="46.6318%" y="47.50"></text></g><g><title>sn_rust_dealloc (152 samples, 0.12%)</title><rect x="46.4093%" y="181" width="0.1228%" height="15" fill="rgb(238,70,47)" fg:x="57432" fg:w="152"/><text x="46.6593%" y="191.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1,846 samples, 1.49%)</title><rect x="45.4202%" y="245" width="1.4917%" height="15" fill="rgb(231,160,17)" fg:x="56208" fg:w="1846"/><text x="45.6702%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (677 samples, 0.55%)</title><rect x="46.3649%" y="229" width="0.5471%" height="15" fill="rgb(218,68,53)" fg:x="57377" fg:w="677"/><text x="46.6149%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (677 samples, 0.55%)</title><rect x="46.3649%" y="213" width="0.5471%" height="15" fill="rgb(236,111,10)" fg:x="57377" fg:w="677"/><text x="46.6149%" y="223.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (677 samples, 0.55%)</title><rect x="46.3649%" y="197" width="0.5471%" height="15" fill="rgb(224,34,41)" fg:x="57377" fg:w="677"/><text x="46.6149%" y="207.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (470 samples, 0.38%)</title><rect x="46.5321%" y="181" width="0.3798%" height="15" fill="rgb(241,118,19)" fg:x="57584" fg:w="470"/><text x="46.7821%" y="191.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1,286 samples, 1.04%)</title><rect x="46.9119%" y="245" width="1.0392%" height="15" fill="rgb(238,129,25)" fg:x="58054" fg:w="1286"/><text x="47.1619%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_sub (1,286 samples, 1.04%)</title><rect x="46.9119%" y="229" width="1.0392%" height="15" fill="rgb(238,22,31)" fg:x="58054" fg:w="1286"/><text x="47.1619%" y="239.50"></text></g><g><title>sn_rust_dealloc (79 samples, 0.06%)</title><rect x="47.9511%" y="245" width="0.0638%" height="15" fill="rgb(222,174,48)" fg:x="59340" fg:w="79"/><text x="48.2011%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,984 samples, 3.22%)</title><rect x="44.8198%" y="373" width="3.2194%" height="15" fill="rgb(206,152,40)" fg:x="55465" fg:w="3984"/><text x="45.0698%" y="383.50">&lt;al..</text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (3,984 samples, 3.22%)</title><rect x="44.8198%" y="357" width="3.2194%" height="15" fill="rgb(218,99,54)" fg:x="55465" fg:w="3984"/><text x="45.0698%" y="367.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (3,952 samples, 3.19%)</title><rect x="44.8457%" y="341" width="3.1935%" height="15" fill="rgb(220,174,26)" fg:x="55497" fg:w="3952"/><text x="45.0957%" y="351.50">cor..</text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (3,952 samples, 3.19%)</title><rect x="44.8457%" y="325" width="3.1935%" height="15" fill="rgb(245,116,9)" fg:x="55497" fg:w="3952"/><text x="45.0957%" y="335.50">abi..</text></g><g><title>abi_stable::std_types::arc::vtable_mod::destructor_arc (3,263 samples, 2.64%)</title><rect x="45.4025%" y="309" width="2.6367%" height="15" fill="rgb(209,72,35)" fg:x="56186" fg:w="3263"/><text x="45.6525%" y="319.50">ab..</text></g><g><title>core::mem::drop (3,243 samples, 2.62%)</title><rect x="45.4186%" y="293" width="2.6206%" height="15" fill="rgb(226,126,21)" fg:x="56206" fg:w="3243"/><text x="45.6686%" y="303.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (3,243 samples, 2.62%)</title><rect x="45.4186%" y="277" width="2.6206%" height="15" fill="rgb(227,192,1)" fg:x="56206" fg:w="3243"/><text x="45.6686%" y="287.50">co..</text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3,243 samples, 2.62%)</title><rect x="45.4186%" y="261" width="2.6206%" height="15" fill="rgb(237,180,29)" fg:x="56206" fg:w="3243"/><text x="45.6686%" y="271.50">&lt;a..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (30 samples, 0.02%)</title><rect x="48.0150%" y="245" width="0.0242%" height="15" fill="rgb(230,197,35)" fg:x="59419" fg:w="30"/><text x="48.2650%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (24 samples, 0.02%)</title><rect x="48.0392%" y="341" width="0.0194%" height="15" fill="rgb(246,193,31)" fg:x="59449" fg:w="24"/><text x="48.2892%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (24 samples, 0.02%)</title><rect x="48.0392%" y="325" width="0.0194%" height="15" fill="rgb(241,36,4)" fg:x="59449" fg:w="24"/><text x="48.2892%" y="335.50"></text></g><g><title>__rg_dealloc (24 samples, 0.02%)</title><rect x="48.0392%" y="309" width="0.0194%" height="15" fill="rgb(241,130,17)" fg:x="59449" fg:w="24"/><text x="48.2892%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (24 samples, 0.02%)</title><rect x="48.0392%" y="293" width="0.0194%" height="15" fill="rgb(206,137,32)" fg:x="59449" fg:w="24"/><text x="48.2892%" y="303.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (4,035 samples, 3.26%)</title><rect x="44.8021%" y="437" width="3.2606%" height="15" fill="rgb(237,228,51)" fg:x="55443" fg:w="4035"/><text x="45.0521%" y="447.50">abi..</text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (4,024 samples, 3.25%)</title><rect x="44.8110%" y="421" width="3.2517%" height="15" fill="rgb(243,6,42)" fg:x="55454" fg:w="4024"/><text x="45.0610%" y="431.50">abi..</text></g><g><title>core::mem::drop (4,013 samples, 3.24%)</title><rect x="44.8198%" y="405" width="3.2428%" height="15" fill="rgb(251,74,28)" fg:x="55465" fg:w="4013"/><text x="45.0698%" y="415.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (4,013 samples, 3.24%)</title><rect x="44.8198%" y="389" width="3.2428%" height="15" fill="rgb(218,20,49)" fg:x="55465" fg:w="4013"/><text x="45.0698%" y="399.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (29 samples, 0.02%)</title><rect x="48.0392%" y="373" width="0.0234%" height="15" fill="rgb(238,28,14)" fg:x="59449" fg:w="29"/><text x="48.2892%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.02%)</title><rect x="48.0392%" y="357" width="0.0234%" height="15" fill="rgb(229,40,46)" fg:x="59449" fg:w="29"/><text x="48.2892%" y="367.50"></text></g><g><title>sn_rust_dealloc (77 samples, 0.06%)</title><rect x="48.0626%" y="437" width="0.0622%" height="15" fill="rgb(244,195,20)" fg:x="59478" fg:w="77"/><text x="48.3126%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (4,119 samples, 3.33%)</title><rect x="44.8021%" y="469" width="3.3285%" height="15" fill="rgb(253,56,35)" fg:x="55443" fg:w="4119"/><text x="45.0521%" y="479.50">cor..</text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (4,119 samples, 3.33%)</title><rect x="44.8021%" y="453" width="3.3285%" height="15" fill="rgb(210,149,44)" fg:x="55443" fg:w="4119"/><text x="45.0521%" y="463.50">abi..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::slices::private::RSlice&lt;u8&gt;,abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (21 samples, 0.02%)</title><rect x="48.1572%" y="437" width="0.0170%" height="15" fill="rgb(240,135,12)" fg:x="59595" fg:w="21"/><text x="48.4072%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (84 samples, 0.07%)</title><rect x="48.1305%" y="469" width="0.0679%" height="15" fill="rgb(251,24,50)" fg:x="59562" fg:w="84"/><text x="48.3805%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (73 samples, 0.06%)</title><rect x="48.1394%" y="453" width="0.0590%" height="15" fill="rgb(243,200,47)" fg:x="59573" fg:w="73"/><text x="48.3894%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (30 samples, 0.02%)</title><rect x="48.1742%" y="437" width="0.0242%" height="15" fill="rgb(224,166,26)" fg:x="59616" fg:w="30"/><text x="48.4242%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (30 samples, 0.02%)</title><rect x="48.1742%" y="421" width="0.0242%" height="15" fill="rgb(233,0,47)" fg:x="59616" fg:w="30"/><text x="48.4242%" y="431.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (30 samples, 0.02%)</title><rect x="48.1742%" y="405" width="0.0242%" height="15" fill="rgb(253,80,5)" fg:x="59616" fg:w="30"/><text x="48.4242%" y="415.50"></text></g><g><title>sn_rust_dealloc (71 samples, 0.06%)</title><rect x="48.1984%" y="469" width="0.0574%" height="15" fill="rgb(214,133,25)" fg:x="59646" fg:w="71"/><text x="48.4484%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (6,091 samples, 4.92%)</title><rect x="43.4340%" y="501" width="4.9220%" height="15" fill="rgb(209,27,14)" fg:x="53750" fg:w="6091"/><text x="43.6840%" y="511.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (4,510 samples, 3.64%)</title><rect x="44.7116%" y="485" width="3.6444%" height="15" fill="rgb(219,102,51)" fg:x="55331" fg:w="4510"/><text x="44.9616%" y="495.50">core..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (124 samples, 0.10%)</title><rect x="48.2558%" y="469" width="0.1002%" height="15" fill="rgb(237,18,16)" fg:x="59717" fg:w="124"/><text x="48.5058%" y="479.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (16 samples, 0.01%)</title><rect x="48.3560%" y="501" width="0.0129%" height="15" fill="rgb(241,85,17)" fg:x="59841" fg:w="16"/><text x="48.6060%" y="511.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::bucket_for (15 samples, 0.01%)</title><rect x="48.5386%" y="421" width="0.0121%" height="15" fill="rgb(236,90,42)" fg:x="60067" fg:w="15"/><text x="48.7886%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (15 samples, 0.01%)</title><rect x="48.5386%" y="405" width="0.0121%" height="15" fill="rgb(249,57,21)" fg:x="60067" fg:w="15"/><text x="48.7886%" y="415.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::mut_at (73 samples, 0.06%)</title><rect x="48.5006%" y="453" width="0.0590%" height="15" fill="rgb(243,12,36)" fg:x="60020" fg:w="73"/><text x="48.7506%" y="463.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::index_for (63 samples, 0.05%)</title><rect x="48.5087%" y="437" width="0.0509%" height="15" fill="rgb(253,128,47)" fg:x="60030" fg:w="63"/><text x="48.7587%" y="447.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (244 samples, 0.20%)</title><rect x="48.3746%" y="501" width="0.1972%" height="15" fill="rgb(207,33,20)" fg:x="59864" fg:w="244"/><text x="48.6246%" y="511.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n (243 samples, 0.20%)</title><rect x="48.3754%" y="485" width="0.1964%" height="15" fill="rgb(233,215,35)" fg:x="59865" fg:w="243"/><text x="48.6254%" y="495.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n_inner (243 samples, 0.20%)</title><rect x="48.3754%" y="469" width="0.1964%" height="15" fill="rgb(249,188,52)" fg:x="59865" fg:w="243"/><text x="48.6254%" y="479.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::update_min_max (15 samples, 0.01%)</title><rect x="48.5596%" y="453" width="0.0121%" height="15" fill="rgb(225,12,32)" fg:x="60093" fg:w="15"/><text x="48.8096%" y="463.50"></text></g><g><title>sn_rust_dealloc (106 samples, 0.09%)</title><rect x="48.5717%" y="501" width="0.0857%" height="15" fill="rgb(247,98,14)" fg:x="60108" fg:w="106"/><text x="48.8217%" y="511.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (125 samples, 0.10%)</title><rect x="48.6574%" y="501" width="0.1010%" height="15" fill="rgb(247,219,48)" fg:x="60214" fg:w="125"/><text x="48.9074%" y="511.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (45 samples, 0.04%)</title><rect x="48.7875%" y="485" width="0.0364%" height="15" fill="rgb(253,60,48)" fg:x="60375" fg:w="45"/><text x="49.0375%" y="495.50"></text></g><g><title>core::time::Duration::as_nanos (41 samples, 0.03%)</title><rect x="48.8238%" y="485" width="0.0331%" height="15" fill="rgb(245,15,52)" fg:x="60420" fg:w="41"/><text x="49.0738%" y="495.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (150 samples, 0.12%)</title><rect x="48.8570%" y="469" width="0.1212%" height="15" fill="rgb(220,133,28)" fg:x="60461" fg:w="150"/><text x="49.1070%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (59 samples, 0.05%)</title><rect x="49.0283%" y="437" width="0.0477%" height="15" fill="rgb(217,180,4)" fg:x="60673" fg:w="59"/><text x="49.2783%" y="447.50"></text></g><g><title>core::cmp::PartialOrd::ge (59 samples, 0.05%)</title><rect x="49.0283%" y="421" width="0.0477%" height="15" fill="rgb(251,24,1)" fg:x="60673" fg:w="59"/><text x="49.2783%" y="431.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (59 samples, 0.05%)</title><rect x="49.0283%" y="405" width="0.0477%" height="15" fill="rgb(212,185,49)" fg:x="60673" fg:w="59"/><text x="49.2783%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (28 samples, 0.02%)</title><rect x="49.0533%" y="389" width="0.0226%" height="15" fill="rgb(215,175,22)" fg:x="60704" fg:w="28"/><text x="49.3033%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (28 samples, 0.02%)</title><rect x="49.0533%" y="373" width="0.0226%" height="15" fill="rgb(250,205,14)" fg:x="60704" fg:w="28"/><text x="49.3033%" y="383.50"></text></g><g><title>std::time::SystemTime::duration_since (312 samples, 0.25%)</title><rect x="48.8570%" y="485" width="0.2521%" height="15" fill="rgb(225,211,22)" fg:x="60461" fg:w="312"/><text x="49.1070%" y="495.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (162 samples, 0.13%)</title><rect x="48.9782%" y="469" width="0.1309%" height="15" fill="rgb(251,179,42)" fg:x="60611" fg:w="162"/><text x="49.2282%" y="479.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (162 samples, 0.13%)</title><rect x="48.9782%" y="453" width="0.1309%" height="15" fill="rgb(208,216,51)" fg:x="60611" fg:w="162"/><text x="49.2282%" y="463.50"></text></g><g><title>core::time::Duration::new (41 samples, 0.03%)</title><rect x="49.0760%" y="437" width="0.0331%" height="15" fill="rgb(235,36,11)" fg:x="60732" fg:w="41"/><text x="49.3260%" y="447.50"></text></g><g><title>tremor_common::time::nanotime (1,128 samples, 0.91%)</title><rect x="48.7584%" y="501" width="0.9115%" height="15" fill="rgb(213,189,28)" fg:x="60339" fg:w="1128"/><text x="49.0084%" y="511.50"></text></g><g><title>std::time::SystemTime::now (694 samples, 0.56%)</title><rect x="49.1091%" y="485" width="0.5608%" height="15" fill="rgb(227,203,42)" fg:x="60773" fg:w="694"/><text x="49.3591%" y="495.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (694 samples, 0.56%)</title><rect x="49.1091%" y="469" width="0.5608%" height="15" fill="rgb(244,72,36)" fg:x="60773" fg:w="694"/><text x="49.3591%" y="479.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (694 samples, 0.56%)</title><rect x="49.1091%" y="453" width="0.5608%" height="15" fill="rgb(213,53,17)" fg:x="60773" fg:w="694"/><text x="49.3591%" y="463.50"></text></g><g><title>__clock_gettime (567 samples, 0.46%)</title><rect x="49.2117%" y="437" width="0.4582%" height="15" fill="rgb(207,167,3)" fg:x="60900" fg:w="567"/><text x="49.4617%" y="447.50"></text></g><g><title>__vdso_clock_gettime (543 samples, 0.44%)</title><rect x="49.2311%" y="421" width="0.4388%" height="15" fill="rgb(216,98,30)" fg:x="60924" fg:w="543"/><text x="49.4811%" y="431.50"></text></g><g><title>[[vdso]] (496 samples, 0.40%)</title><rect x="49.2691%" y="405" width="0.4008%" height="15" fill="rgb(236,123,15)" fg:x="60971" fg:w="496"/><text x="49.5191%" y="415.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (217 samples, 0.18%)</title><rect x="49.6836%" y="485" width="0.1754%" height="15" fill="rgb(248,81,50)" fg:x="61484" fg:w="217"/><text x="49.9336%" y="495.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (9,004 samples, 7.28%)</title><rect x="42.5944%" y="757" width="7.2759%" height="15" fill="rgb(214,120,4)" fg:x="52711" fg:w="9004"/><text x="42.8444%" y="767.50">tremor_run..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,004 samples, 7.28%)</title><rect x="42.5944%" y="741" width="7.2759%" height="15" fill="rgb(208,179,34)" fg:x="52711" fg:w="9004"/><text x="42.8444%" y="751.50">&lt;async_ffi..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,004 samples, 7.28%)</title><rect x="42.5944%" y="725" width="7.2759%" height="15" fill="rgb(227,140,7)" fg:x="52711" fg:w="9004"/><text x="42.8444%" y="735.50">&lt;async_ffi..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (9,004 samples, 7.28%)</title><rect x="42.5944%" y="709" width="7.2759%" height="15" fill="rgb(214,22,6)" fg:x="52711" fg:w="9004"/><text x="42.8444%" y="719.50">&lt;core::tas..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (9,004 samples, 7.28%)</title><rect x="42.5944%" y="693" width="7.2759%" height="15" fill="rgb(207,137,27)" fg:x="52711" fg:w="9004"/><text x="42.8444%" y="703.50">&lt;async_ffi..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (9,004 samples, 7.28%)</title><rect x="42.5944%" y="677" width="7.2759%" height="15" fill="rgb(210,8,46)" fg:x="52711" fg:w="9004"/><text x="42.8444%" y="687.50">async_ffi:..</text></g><g><title>std::panic::catch_unwind (9,004 samples, 7.28%)</title><rect x="42.5944%" y="661" width="7.2759%" height="15" fill="rgb(240,16,54)" fg:x="52711" fg:w="9004"/><text x="42.8444%" y="671.50">std::panic..</text></g><g><title>std::panicking::try (9,004 samples, 7.28%)</title><rect x="42.5944%" y="645" width="7.2759%" height="15" fill="rgb(211,209,29)" fg:x="52711" fg:w="9004"/><text x="42.8444%" y="655.50">std::panic..</text></g><g><title>std::panicking::try::do_call (9,004 samples, 7.28%)</title><rect x="42.5944%" y="629" width="7.2759%" height="15" fill="rgb(226,228,24)" fg:x="52711" fg:w="9004"/><text x="42.8444%" y="639.50">std::panic..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (9,004 samples, 7.28%)</title><rect x="42.5944%" y="613" width="7.2759%" height="15" fill="rgb(222,84,9)" fg:x="52711" fg:w="9004"/><text x="42.8444%" y="623.50">&lt;core::pan..</text></g><g><title>core::ops::function::FnOnce::call_once (9,004 samples, 7.28%)</title><rect x="42.5944%" y="597" width="7.2759%" height="15" fill="rgb(234,203,30)" fg:x="52711" fg:w="9004"/><text x="42.8444%" y="607.50">core::ops:..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (9,004 samples, 7.28%)</title><rect x="42.5944%" y="581" width="7.2759%" height="15" fill="rgb(238,109,14)" fg:x="52711" fg:w="9004"/><text x="42.8444%" y="591.50">async_ffi:..</text></g><g><title>async_ffi::FfiContext::with_context (9,004 samples, 7.28%)</title><rect x="42.5944%" y="565" width="7.2759%" height="15" fill="rgb(233,206,34)" fg:x="52711" fg:w="9004"/><text x="42.8444%" y="575.50">async_ffi:..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (9,004 samples, 7.28%)</title><rect x="42.5944%" y="549" width="7.2759%" height="15" fill="rgb(220,167,47)" fg:x="52711" fg:w="9004"/><text x="42.8444%" y="559.50">async_ffi:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,004 samples, 7.28%)</title><rect x="42.5944%" y="533" width="7.2759%" height="15" fill="rgb(238,105,10)" fg:x="52711" fg:w="9004"/><text x="42.8444%" y="543.50">&lt;core::fut..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (8,970 samples, 7.25%)</title><rect x="42.6219%" y="517" width="7.2484%" height="15" fill="rgb(213,227,17)" fg:x="52745" fg:w="8970"/><text x="42.8719%" y="527.50">&lt;tremor_ru..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (248 samples, 0.20%)</title><rect x="49.6699%" y="501" width="0.2004%" height="15" fill="rgb(217,132,38)" fg:x="61467" fg:w="248"/><text x="49.9199%" y="511.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::_::&lt;impl tremor_runtime::connectors::sink::EventSerializerOpaque_trait::VTableInner_Ref&lt;_Self,_ErasedPtr&gt;&gt;::serialize (14 samples, 0.01%)</title><rect x="49.8590%" y="485" width="0.0113%" height="15" fill="rgb(242,146,4)" fg:x="61701" fg:w="14"/><text x="50.1090%" y="495.50"></text></g><g><title>abi_stable::prefix_type::prefix_ref::PrefixRef&lt;P&gt;::metadata (14 samples, 0.01%)</title><rect x="49.8590%" y="469" width="0.0113%" height="15" fill="rgb(212,61,9)" fg:x="61701" fg:w="14"/><text x="50.1090%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (58 samples, 0.05%)</title><rect x="49.8897%" y="645" width="0.0469%" height="15" fill="rgb(247,126,22)" fg:x="61739" fg:w="58"/><text x="50.1397%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (58 samples, 0.05%)</title><rect x="49.8897%" y="629" width="0.0469%" height="15" fill="rgb(220,196,2)" fg:x="61739" fg:w="58"/><text x="50.1397%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (58 samples, 0.05%)</title><rect x="49.8897%" y="613" width="0.0469%" height="15" fill="rgb(208,46,4)" fg:x="61739" fg:w="58"/><text x="50.1397%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (24 samples, 0.02%)</title><rect x="49.9172%" y="597" width="0.0194%" height="15" fill="rgb(252,104,46)" fg:x="61773" fg:w="24"/><text x="50.1672%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value)&gt;&gt; (24 samples, 0.02%)</title><rect x="49.9172%" y="581" width="0.0194%" height="15" fill="rgb(237,152,48)" fg:x="61773" fg:w="24"/><text x="50.1672%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.02%)</title><rect x="49.9172%" y="565" width="0.0194%" height="15" fill="rgb(221,59,37)" fg:x="61773" fg:w="24"/><text x="50.1672%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::is_empty_singleton (14 samples, 0.01%)</title><rect x="49.9253%" y="549" width="0.0113%" height="15" fill="rgb(209,202,51)" fg:x="61783" fg:w="14"/><text x="50.1753%" y="559.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (91 samples, 0.07%)</title><rect x="49.8703%" y="661" width="0.0735%" height="15" fill="rgb(228,81,30)" fg:x="61715" fg:w="91"/><text x="50.1203%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,097 samples, 7.35%)</title><rect x="42.5944%" y="773" width="7.3511%" height="15" fill="rgb(227,42,39)" fg:x="52711" fg:w="9097"/><text x="42.8444%" y="783.50">&lt;core::fut..</text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (93 samples, 0.08%)</title><rect x="49.8703%" y="757" width="0.0752%" height="15" fill="rgb(221,26,2)" fg:x="61715" fg:w="93"/><text x="50.1203%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (93 samples, 0.08%)</title><rect x="49.8703%" y="741" width="0.0752%" height="15" fill="rgb(254,61,31)" fg:x="61715" fg:w="93"/><text x="50.1203%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (93 samples, 0.08%)</title><rect x="49.8703%" y="725" width="0.0752%" height="15" fill="rgb(222,173,38)" fg:x="61715" fg:w="93"/><text x="50.1203%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (93 samples, 0.08%)</title><rect x="49.8703%" y="709" width="0.0752%" height="15" fill="rgb(218,50,12)" fg:x="61715" fg:w="93"/><text x="50.1203%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (93 samples, 0.08%)</title><rect x="49.8703%" y="693" width="0.0752%" height="15" fill="rgb(223,88,40)" fg:x="61715" fg:w="93"/><text x="50.1203%" y="703.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (93 samples, 0.08%)</title><rect x="49.8703%" y="677" width="0.0752%" height="15" fill="rgb(237,54,19)" fg:x="61715" fg:w="93"/><text x="50.1203%" y="687.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (24 samples, 0.02%)</title><rect x="49.9455%" y="773" width="0.0194%" height="15" fill="rgb(251,129,25)" fg:x="61808" fg:w="24"/><text x="50.1955%" y="783.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (24 samples, 0.02%)</title><rect x="49.9455%" y="757" width="0.0194%" height="15" fill="rgb(238,97,19)" fg:x="61808" fg:w="24"/><text x="50.1955%" y="767.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (24 samples, 0.02%)</title><rect x="49.9455%" y="741" width="0.0194%" height="15" fill="rgb(240,169,18)" fg:x="61808" fg:w="24"/><text x="50.1955%" y="751.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (24 samples, 0.02%)</title><rect x="49.9455%" y="725" width="0.0194%" height="15" fill="rgb(230,187,49)" fg:x="61808" fg:w="24"/><text x="50.1955%" y="735.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (24 samples, 0.02%)</title><rect x="49.9455%" y="709" width="0.0194%" height="15" fill="rgb(209,44,26)" fg:x="61808" fg:w="24"/><text x="50.1955%" y="719.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (24 samples, 0.02%)</title><rect x="49.9455%" y="693" width="0.0194%" height="15" fill="rgb(244,0,6)" fg:x="61808" fg:w="24"/><text x="50.1955%" y="703.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (24 samples, 0.02%)</title><rect x="49.9455%" y="677" width="0.0194%" height="15" fill="rgb(248,18,21)" fg:x="61808" fg:w="24"/><text x="50.1955%" y="687.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (24 samples, 0.02%)</title><rect x="49.9455%" y="661" width="0.0194%" height="15" fill="rgb(245,180,19)" fg:x="61808" fg:w="24"/><text x="50.1955%" y="671.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (24 samples, 0.02%)</title><rect x="49.9455%" y="645" width="0.0194%" height="15" fill="rgb(252,118,36)" fg:x="61808" fg:w="24"/><text x="50.1955%" y="655.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (24 samples, 0.02%)</title><rect x="49.9455%" y="629" width="0.0194%" height="15" fill="rgb(210,224,19)" fg:x="61808" fg:w="24"/><text x="50.1955%" y="639.50"></text></g><g><title>alloc::alloc::exchange_malloc (24 samples, 0.02%)</title><rect x="49.9455%" y="613" width="0.0194%" height="15" fill="rgb(218,30,24)" fg:x="61808" fg:w="24"/><text x="50.1955%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (24 samples, 0.02%)</title><rect x="49.9455%" y="597" width="0.0194%" height="15" fill="rgb(219,75,50)" fg:x="61808" fg:w="24"/><text x="50.1955%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (24 samples, 0.02%)</title><rect x="49.9455%" y="581" width="0.0194%" height="15" fill="rgb(234,72,50)" fg:x="61808" fg:w="24"/><text x="50.1955%" y="591.50"></text></g><g><title>alloc::alloc::alloc (24 samples, 0.02%)</title><rect x="49.9455%" y="565" width="0.0194%" height="15" fill="rgb(219,100,48)" fg:x="61808" fg:w="24"/><text x="50.1955%" y="575.50"></text></g><g><title>__rg_alloc (24 samples, 0.02%)</title><rect x="49.9455%" y="549" width="0.0194%" height="15" fill="rgb(253,5,41)" fg:x="61808" fg:w="24"/><text x="50.1955%" y="559.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (24 samples, 0.02%)</title><rect x="49.9455%" y="533" width="0.0194%" height="15" fill="rgb(247,181,11)" fg:x="61808" fg:w="24"/><text x="50.1955%" y="543.50"></text></g><g><title>sn_rust_alloc (24 samples, 0.02%)</title><rect x="49.9455%" y="517" width="0.0194%" height="15" fill="rgb(222,223,25)" fg:x="61808" fg:w="24"/><text x="50.1955%" y="527.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (24 samples, 0.02%)</title><rect x="49.9455%" y="501" width="0.0194%" height="15" fill="rgb(214,198,28)" fg:x="61808" fg:w="24"/><text x="50.1955%" y="511.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (9,196 samples, 7.43%)</title><rect x="42.5944%" y="789" width="7.4311%" height="15" fill="rgb(230,46,43)" fg:x="52711" fg:w="9196"/><text x="42.8444%" y="799.50">tremor_run..</text></g><g><title>&lt;tremor_runtime::connectors::sink::ContraflowData as core::convert::From&lt;&amp;tremor_pipeline::event::Event&gt;&gt;::from (75 samples, 0.06%)</title><rect x="49.9648%" y="773" width="0.0606%" height="15" fill="rgb(233,65,53)" fg:x="61832" fg:w="75"/><text x="50.2148%" y="783.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (75 samples, 0.06%)</title><rect x="49.9648%" y="757" width="0.0606%" height="15" fill="rgb(221,121,27)" fg:x="61832" fg:w="75"/><text x="50.2148%" y="767.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (75 samples, 0.06%)</title><rect x="49.9648%" y="741" width="0.0606%" height="15" fill="rgb(247,70,47)" fg:x="61832" fg:w="75"/><text x="50.2148%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (75 samples, 0.06%)</title><rect x="49.9648%" y="725" width="0.0606%" height="15" fill="rgb(228,85,35)" fg:x="61832" fg:w="75"/><text x="50.2148%" y="735.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (75 samples, 0.06%)</title><rect x="49.9648%" y="709" width="0.0606%" height="15" fill="rgb(209,50,18)" fg:x="61832" fg:w="75"/><text x="50.2148%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (75 samples, 0.06%)</title><rect x="49.9648%" y="693" width="0.0606%" height="15" fill="rgb(250,19,35)" fg:x="61832" fg:w="75"/><text x="50.2148%" y="703.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (75 samples, 0.06%)</title><rect x="49.9648%" y="677" width="0.0606%" height="15" fill="rgb(253,107,29)" fg:x="61832" fg:w="75"/><text x="50.2148%" y="687.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (75 samples, 0.06%)</title><rect x="49.9648%" y="661" width="0.0606%" height="15" fill="rgb(252,179,29)" fg:x="61832" fg:w="75"/><text x="50.2148%" y="671.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (75 samples, 0.06%)</title><rect x="49.9648%" y="645" width="0.0606%" height="15" fill="rgb(238,194,6)" fg:x="61832" fg:w="75"/><text x="50.2148%" y="655.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (75 samples, 0.06%)</title><rect x="49.9648%" y="629" width="0.0606%" height="15" fill="rgb(238,164,29)" fg:x="61832" fg:w="75"/><text x="50.2148%" y="639.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (75 samples, 0.06%)</title><rect x="49.9648%" y="613" width="0.0606%" height="15" fill="rgb(224,25,9)" fg:x="61832" fg:w="75"/><text x="50.2148%" y="623.50"></text></g><g><title>alloc::alloc::exchange_malloc (75 samples, 0.06%)</title><rect x="49.9648%" y="597" width="0.0606%" height="15" fill="rgb(244,153,23)" fg:x="61832" fg:w="75"/><text x="50.2148%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (75 samples, 0.06%)</title><rect x="49.9648%" y="581" width="0.0606%" height="15" fill="rgb(212,203,14)" fg:x="61832" fg:w="75"/><text x="50.2148%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (75 samples, 0.06%)</title><rect x="49.9648%" y="565" width="0.0606%" height="15" fill="rgb(220,164,20)" fg:x="61832" fg:w="75"/><text x="50.2148%" y="575.50"></text></g><g><title>alloc::alloc::alloc (75 samples, 0.06%)</title><rect x="49.9648%" y="549" width="0.0606%" height="15" fill="rgb(222,203,48)" fg:x="61832" fg:w="75"/><text x="50.2148%" y="559.50"></text></g><g><title>__rg_alloc (75 samples, 0.06%)</title><rect x="49.9648%" y="533" width="0.0606%" height="15" fill="rgb(215,159,22)" fg:x="61832" fg:w="75"/><text x="50.2148%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (75 samples, 0.06%)</title><rect x="49.9648%" y="517" width="0.0606%" height="15" fill="rgb(216,183,47)" fg:x="61832" fg:w="75"/><text x="50.2148%" y="527.50"></text></g><g><title>sn_rust_alloc (75 samples, 0.06%)</title><rect x="49.9648%" y="501" width="0.0606%" height="15" fill="rgb(229,195,25)" fg:x="61832" fg:w="75"/><text x="50.2148%" y="511.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (75 samples, 0.06%)</title><rect x="49.9648%" y="485" width="0.0606%" height="15" fill="rgb(224,132,51)" fg:x="61832" fg:w="75"/><text x="50.2148%" y="495.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (13 samples, 0.01%)</title><rect x="50.1620%" y="677" width="0.0105%" height="15" fill="rgb(240,63,7)" fg:x="62076" fg:w="13"/><text x="50.4120%" y="687.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (390 samples, 0.32%)</title><rect x="50.1782%" y="677" width="0.3151%" height="15" fill="rgb(249,182,41)" fg:x="62096" fg:w="390"/><text x="50.4282%" y="687.50"></text></g><g><title>core::ptr::read (376 samples, 0.30%)</title><rect x="50.1895%" y="661" width="0.3038%" height="15" fill="rgb(243,47,26)" fg:x="62110" fg:w="376"/><text x="50.4395%" y="671.50"></text></g><g><title>[libc-2.31.so] (372 samples, 0.30%)</title><rect x="50.1927%" y="645" width="0.3006%" height="15" fill="rgb(233,48,2)" fg:x="62114" fg:w="372"/><text x="50.4427%" y="655.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (14 samples, 0.01%)</title><rect x="50.6525%" y="405" width="0.0113%" height="15" fill="rgb(244,165,34)" fg:x="62683" fg:w="14"/><text x="50.9025%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (207 samples, 0.17%)</title><rect x="50.4974%" y="549" width="0.1673%" height="15" fill="rgb(207,89,7)" fg:x="62491" fg:w="207"/><text x="50.7474%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (207 samples, 0.17%)</title><rect x="50.4974%" y="533" width="0.1673%" height="15" fill="rgb(244,117,36)" fg:x="62491" fg:w="207"/><text x="50.7474%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (207 samples, 0.17%)</title><rect x="50.4974%" y="517" width="0.1673%" height="15" fill="rgb(226,144,34)" fg:x="62491" fg:w="207"/><text x="50.7474%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (200 samples, 0.16%)</title><rect x="50.5030%" y="501" width="0.1616%" height="15" fill="rgb(213,23,19)" fg:x="62498" fg:w="200"/><text x="50.7530%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (200 samples, 0.16%)</title><rect x="50.5030%" y="485" width="0.1616%" height="15" fill="rgb(217,75,12)" fg:x="62498" fg:w="200"/><text x="50.7530%" y="495.50"></text></g><g><title>alloc::alloc::alloc (200 samples, 0.16%)</title><rect x="50.5030%" y="469" width="0.1616%" height="15" fill="rgb(224,159,17)" fg:x="62498" fg:w="200"/><text x="50.7530%" y="479.50"></text></g><g><title>__rg_alloc (200 samples, 0.16%)</title><rect x="50.5030%" y="453" width="0.1616%" height="15" fill="rgb(217,118,1)" fg:x="62498" fg:w="200"/><text x="50.7530%" y="463.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (200 samples, 0.16%)</title><rect x="50.5030%" y="437" width="0.1616%" height="15" fill="rgb(232,180,48)" fg:x="62498" fg:w="200"/><text x="50.7530%" y="447.50"></text></g><g><title>sn_rust_alloc (187 samples, 0.15%)</title><rect x="50.5135%" y="421" width="0.1511%" height="15" fill="rgb(230,27,33)" fg:x="62511" fg:w="187"/><text x="50.7635%" y="431.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (233 samples, 0.19%)</title><rect x="50.4974%" y="677" width="0.1883%" height="15" fill="rgb(205,31,21)" fg:x="62491" fg:w="233"/><text x="50.7474%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (233 samples, 0.19%)</title><rect x="50.4974%" y="661" width="0.1883%" height="15" fill="rgb(253,59,4)" fg:x="62491" fg:w="233"/><text x="50.7474%" y="671.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (233 samples, 0.19%)</title><rect x="50.4974%" y="645" width="0.1883%" height="15" fill="rgb(224,201,9)" fg:x="62491" fg:w="233"/><text x="50.7474%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (233 samples, 0.19%)</title><rect x="50.4974%" y="629" width="0.1883%" height="15" fill="rgb(229,206,30)" fg:x="62491" fg:w="233"/><text x="50.7474%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (233 samples, 0.19%)</title><rect x="50.4974%" y="613" width="0.1883%" height="15" fill="rgb(212,67,47)" fg:x="62491" fg:w="233"/><text x="50.7474%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (233 samples, 0.19%)</title><rect x="50.4974%" y="597" width="0.1883%" height="15" fill="rgb(211,96,50)" fg:x="62491" fg:w="233"/><text x="50.7474%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (233 samples, 0.19%)</title><rect x="50.4974%" y="581" width="0.1883%" height="15" fill="rgb(252,114,18)" fg:x="62491" fg:w="233"/><text x="50.7474%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (233 samples, 0.19%)</title><rect x="50.4974%" y="565" width="0.1883%" height="15" fill="rgb(223,58,37)" fg:x="62491" fg:w="233"/><text x="50.7474%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (26 samples, 0.02%)</title><rect x="50.6646%" y="549" width="0.0210%" height="15" fill="rgb(237,70,4)" fg:x="62698" fg:w="26"/><text x="50.9146%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (26 samples, 0.02%)</title><rect x="50.6646%" y="533" width="0.0210%" height="15" fill="rgb(244,85,46)" fg:x="62698" fg:w="26"/><text x="50.9146%" y="543.50"></text></g><g><title>[libc-2.31.so] (20 samples, 0.02%)</title><rect x="50.6695%" y="517" width="0.0162%" height="15" fill="rgb(223,39,52)" fg:x="62704" fg:w="20"/><text x="50.9195%" y="527.50"></text></g><g><title>[libc-2.31.so] (582 samples, 0.47%)</title><rect x="50.6857%" y="677" width="0.4703%" height="15" fill="rgb(218,200,14)" fg:x="62724" fg:w="582"/><text x="50.9357%" y="687.50"></text></g><g><title>[libc-2.31.so] (337 samples, 0.27%)</title><rect x="51.1608%" y="661" width="0.2723%" height="15" fill="rgb(208,171,16)" fg:x="63312" fg:w="337"/><text x="51.4108%" y="671.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (847 samples, 0.68%)</title><rect x="51.4735%" y="549" width="0.6844%" height="15" fill="rgb(234,200,18)" fg:x="63699" fg:w="847"/><text x="51.7235%" y="559.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (16 samples, 0.01%)</title><rect x="52.1580%" y="549" width="0.0129%" height="15" fill="rgb(228,45,11)" fg:x="64546" fg:w="16"/><text x="52.4080%" y="559.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1,257 samples, 1.02%)</title><rect x="51.1560%" y="677" width="1.0157%" height="15" fill="rgb(237,182,11)" fg:x="63306" fg:w="1257"/><text x="51.4060%" y="687.50"></text></g><g><title>alloc::alloc::exchange_malloc (914 samples, 0.74%)</title><rect x="51.4331%" y="661" width="0.7386%" height="15" fill="rgb(241,175,49)" fg:x="63649" fg:w="914"/><text x="51.6831%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (914 samples, 0.74%)</title><rect x="51.4331%" y="645" width="0.7386%" height="15" fill="rgb(247,38,35)" fg:x="63649" fg:w="914"/><text x="51.6831%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (914 samples, 0.74%)</title><rect x="51.4331%" y="629" width="0.7386%" height="15" fill="rgb(228,39,49)" fg:x="63649" fg:w="914"/><text x="51.6831%" y="639.50"></text></g><g><title>alloc::alloc::alloc (913 samples, 0.74%)</title><rect x="51.4339%" y="613" width="0.7378%" height="15" fill="rgb(226,101,26)" fg:x="63650" fg:w="913"/><text x="51.6839%" y="623.50"></text></g><g><title>__rg_alloc (913 samples, 0.74%)</title><rect x="51.4339%" y="597" width="0.7378%" height="15" fill="rgb(206,141,19)" fg:x="63650" fg:w="913"/><text x="51.6839%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (913 samples, 0.74%)</title><rect x="51.4339%" y="581" width="0.7378%" height="15" fill="rgb(211,200,13)" fg:x="63650" fg:w="913"/><text x="51.6839%" y="591.50"></text></g><g><title>sn_rust_alloc (912 samples, 0.74%)</title><rect x="51.4347%" y="565" width="0.7370%" height="15" fill="rgb(241,121,6)" fg:x="63651" fg:w="912"/><text x="51.6847%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event),alloc::alloc::Global&gt;&gt; (26 samples, 0.02%)</title><rect x="52.1838%" y="645" width="0.0210%" height="15" fill="rgb(234,221,29)" fg:x="64578" fg:w="26"/><text x="52.4338%" y="655.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (26 samples, 0.02%)</title><rect x="52.1838%" y="629" width="0.0210%" height="15" fill="rgb(229,136,5)" fg:x="64578" fg:w="26"/><text x="52.4338%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (20 samples, 0.02%)</title><rect x="52.1887%" y="613" width="0.0162%" height="15" fill="rgb(238,36,11)" fg:x="64584" fg:w="20"/><text x="52.4387%" y="623.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.02%)</title><rect x="52.1887%" y="597" width="0.0162%" height="15" fill="rgb(251,55,41)" fg:x="64584" fg:w="20"/><text x="52.4387%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (20 samples, 0.02%)</title><rect x="52.1887%" y="581" width="0.0162%" height="15" fill="rgb(242,34,40)" fg:x="64584" fg:w="20"/><text x="52.4387%" y="591.50"></text></g><g><title>alloc::alloc::dealloc (20 samples, 0.02%)</title><rect x="52.1887%" y="565" width="0.0162%" height="15" fill="rgb(215,42,17)" fg:x="64584" fg:w="20"/><text x="52.4387%" y="575.50"></text></g><g><title>__rg_dealloc (20 samples, 0.02%)</title><rect x="52.1887%" y="549" width="0.0162%" height="15" fill="rgb(207,44,46)" fg:x="64584" fg:w="20"/><text x="52.4387%" y="559.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (20 samples, 0.02%)</title><rect x="52.1887%" y="533" width="0.0162%" height="15" fill="rgb(211,206,28)" fg:x="64584" fg:w="20"/><text x="52.4387%" y="543.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (57 samples, 0.05%)</title><rect x="52.1717%" y="661" width="0.0461%" height="15" fill="rgb(237,167,16)" fg:x="64563" fg:w="57"/><text x="52.4217%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)]&gt; (16 samples, 0.01%)</title><rect x="52.2048%" y="645" width="0.0129%" height="15" fill="rgb(233,66,6)" fg:x="64604" fg:w="16"/><text x="52.4548%" y="655.50"></text></g><g><title>sn_rust_dealloc (47 samples, 0.04%)</title><rect x="52.2178%" y="661" width="0.0380%" height="15" fill="rgb(246,123,29)" fg:x="64620" fg:w="47"/><text x="52.4678%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (116 samples, 0.09%)</title><rect x="52.1717%" y="677" width="0.0937%" height="15" fill="rgb(209,62,40)" fg:x="64563" fg:w="116"/><text x="52.4217%" y="687.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_last_mut (16 samples, 0.01%)</title><rect x="52.2743%" y="677" width="0.0129%" height="15" fill="rgb(218,4,25)" fg:x="64690" fg:w="16"/><text x="52.5243%" y="687.50"></text></g><g><title>core::str::&lt;impl str&gt;::eq_ignore_ascii_case (49 samples, 0.04%)</title><rect x="52.2873%" y="677" width="0.0396%" height="15" fill="rgb(253,91,49)" fg:x="64706" fg:w="49"/><text x="52.5373%" y="687.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case (49 samples, 0.04%)</title><rect x="52.2873%" y="661" width="0.0396%" height="15" fill="rgb(228,155,29)" fg:x="64706" fg:w="49"/><text x="52.5373%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (46 samples, 0.04%)</title><rect x="52.2897%" y="645" width="0.0372%" height="15" fill="rgb(243,57,37)" fg:x="64709" fg:w="46"/><text x="52.5397%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (46 samples, 0.04%)</title><rect x="52.2897%" y="629" width="0.0372%" height="15" fill="rgb(244,167,17)" fg:x="64709" fg:w="46"/><text x="52.5397%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::{{closure}} (31 samples, 0.03%)</title><rect x="52.3018%" y="613" width="0.0251%" height="15" fill="rgb(207,181,38)" fg:x="64724" fg:w="31"/><text x="52.5518%" y="623.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case::{{closure}} (31 samples, 0.03%)</title><rect x="52.3018%" y="597" width="0.0251%" height="15" fill="rgb(211,8,23)" fg:x="64724" fg:w="31"/><text x="52.5518%" y="607.50"></text></g><g><title>core::num::&lt;impl u8&gt;::eq_ignore_ascii_case (31 samples, 0.03%)</title><rect x="52.3018%" y="581" width="0.0251%" height="15" fill="rgb(235,11,44)" fg:x="64724" fg:w="31"/><text x="52.5518%" y="591.50"></text></g><g><title>core::num::&lt;impl u8&gt;::to_ascii_lowercase (31 samples, 0.03%)</title><rect x="52.3018%" y="565" width="0.0251%" height="15" fill="rgb(248,18,52)" fg:x="64724" fg:w="31"/><text x="52.5518%" y="575.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_uppercase (14 samples, 0.01%)</title><rect x="52.3155%" y="549" width="0.0113%" height="15" fill="rgb(208,4,7)" fg:x="64741" fg:w="14"/><text x="52.5655%" y="559.50"></text></g><g><title>async_io::driver::block_on (12,108 samples, 9.78%)</title><rect x="42.5944%" y="1093" width="9.7842%" height="15" fill="rgb(240,17,39)" fg:x="52711" fg:w="12108"/><text x="42.8444%" y="1103.50">async_io::driv..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (12,108 samples, 9.78%)</title><rect x="42.5944%" y="1077" width="9.7842%" height="15" fill="rgb(207,170,3)" fg:x="52711" fg:w="12108"/><text x="42.8444%" y="1087.50">&lt;futures_lite:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,108 samples, 9.78%)</title><rect x="42.5944%" y="1061" width="9.7842%" height="15" fill="rgb(236,100,52)" fg:x="52711" fg:w="12108"/><text x="42.8444%" y="1071.50">&lt;core::future:..</text></g><g><title>async_executor::Executor::run::{{closure}} (12,108 samples, 9.78%)</title><rect x="42.5944%" y="1045" width="9.7842%" height="15" fill="rgb(246,78,51)" fg:x="52711" fg:w="12108"/><text x="42.8444%" y="1055.50">async_executor..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (12,108 samples, 9.78%)</title><rect x="42.5944%" y="1029" width="9.7842%" height="15" fill="rgb(211,17,15)" fg:x="52711" fg:w="12108"/><text x="42.8444%" y="1039.50">&lt;futures_lite:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,108 samples, 9.78%)</title><rect x="42.5944%" y="1013" width="9.7842%" height="15" fill="rgb(209,59,46)" fg:x="52711" fg:w="12108"/><text x="42.8444%" y="1023.50">&lt;core::future:..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (12,108 samples, 9.78%)</title><rect x="42.5944%" y="997" width="9.7842%" height="15" fill="rgb(210,92,25)" fg:x="52711" fg:w="12108"/><text x="42.8444%" y="1007.50">async_executor..</text></g><g><title>async_task::runnable::Runnable::run (12,108 samples, 9.78%)</title><rect x="42.5944%" y="981" width="9.7842%" height="15" fill="rgb(238,174,52)" fg:x="52711" fg:w="12108"/><text x="42.8444%" y="991.50">async_task::ru..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (12,108 samples, 9.78%)</title><rect x="42.5944%" y="965" width="9.7842%" height="15" fill="rgb(230,73,7)" fg:x="52711" fg:w="12108"/><text x="42.8444%" y="975.50">async_task::ra..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (12,108 samples, 9.78%)</title><rect x="42.5944%" y="949" width="9.7842%" height="15" fill="rgb(243,124,40)" fg:x="52711" fg:w="12108"/><text x="42.8444%" y="959.50">&lt;core::pin::Pi..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,108 samples, 9.78%)</title><rect x="42.5944%" y="933" width="9.7842%" height="15" fill="rgb(244,170,11)" fg:x="52711" fg:w="12108"/><text x="42.8444%" y="943.50">&lt;core::future:..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (12,108 samples, 9.78%)</title><rect x="42.5944%" y="917" width="9.7842%" height="15" fill="rgb(207,114,54)" fg:x="52711" fg:w="12108"/><text x="42.8444%" y="927.50">async_executor..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (12,108 samples, 9.78%)</title><rect x="42.5944%" y="901" width="9.7842%" height="15" fill="rgb(205,42,20)" fg:x="52711" fg:w="12108"/><text x="42.8444%" y="911.50">&lt;async_std::ta..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (12,108 samples, 9.78%)</title><rect x="42.5944%" y="885" width="9.7842%" height="15" fill="rgb(230,30,28)" fg:x="52711" fg:w="12108"/><text x="42.8444%" y="895.50">async_std::tas..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (12,108 samples, 9.78%)</title><rect x="42.5944%" y="869" width="9.7842%" height="15" fill="rgb(205,73,54)" fg:x="52711" fg:w="12108"/><text x="42.8444%" y="879.50">std::thread::l..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (12,108 samples, 9.78%)</title><rect x="42.5944%" y="853" width="9.7842%" height="15" fill="rgb(254,227,23)" fg:x="52711" fg:w="12108"/><text x="42.8444%" y="863.50">std::thread::l..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (12,108 samples, 9.78%)</title><rect x="42.5944%" y="837" width="9.7842%" height="15" fill="rgb(228,202,34)" fg:x="52711" fg:w="12108"/><text x="42.8444%" y="847.50">async_std::tas..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (12,108 samples, 9.78%)</title><rect x="42.5944%" y="821" width="9.7842%" height="15" fill="rgb(222,225,37)" fg:x="52711" fg:w="12108"/><text x="42.8444%" y="831.50">&lt;async_std::ta..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,108 samples, 9.78%)</title><rect x="42.5944%" y="805" width="9.7842%" height="15" fill="rgb(221,14,54)" fg:x="52711" fg:w="12108"/><text x="42.8444%" y="815.50">&lt;core::future:..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (2,912 samples, 2.35%)</title><rect x="50.0255%" y="789" width="2.3531%" height="15" fill="rgb(254,102,2)" fg:x="61907" fg:w="2912"/><text x="50.2755%" y="799.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,912 samples, 2.35%)</title><rect x="50.0255%" y="773" width="2.3531%" height="15" fill="rgb(232,104,17)" fg:x="61907" fg:w="2912"/><text x="50.2755%" y="783.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (2,912 samples, 2.35%)</title><rect x="50.0255%" y="757" width="2.3531%" height="15" fill="rgb(250,220,14)" fg:x="61907" fg:w="2912"/><text x="50.2755%" y="767.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,912 samples, 2.35%)</title><rect x="50.0255%" y="741" width="2.3531%" height="15" fill="rgb(241,158,9)" fg:x="61907" fg:w="2912"/><text x="50.2755%" y="751.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (2,912 samples, 2.35%)</title><rect x="50.0255%" y="725" width="2.3531%" height="15" fill="rgb(246,9,43)" fg:x="61907" fg:w="2912"/><text x="50.2755%" y="735.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,912 samples, 2.35%)</title><rect x="50.0255%" y="709" width="2.3531%" height="15" fill="rgb(206,73,33)" fg:x="61907" fg:w="2912"/><text x="50.2755%" y="719.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (2,912 samples, 2.35%)</title><rect x="50.0255%" y="693" width="2.3531%" height="15" fill="rgb(222,79,8)" fg:x="61907" fg:w="2912"/><text x="50.2755%" y="703.50">t..</text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (52 samples, 0.04%)</title><rect x="52.3365%" y="677" width="0.0420%" height="15" fill="rgb(234,8,54)" fg:x="64767" fg:w="52"/><text x="52.5865%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (52 samples, 0.04%)</title><rect x="52.3365%" y="661" width="0.0420%" height="15" fill="rgb(209,134,38)" fg:x="64767" fg:w="52"/><text x="52.5865%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (52 samples, 0.04%)</title><rect x="52.3365%" y="645" width="0.0420%" height="15" fill="rgb(230,127,29)" fg:x="64767" fg:w="52"/><text x="52.5865%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (29 samples, 0.02%)</title><rect x="52.3551%" y="629" width="0.0234%" height="15" fill="rgb(242,44,41)" fg:x="64790" fg:w="29"/><text x="52.6051%" y="639.50"></text></g><g><title>[libc-2.31.so] (689 samples, 0.56%)</title><rect x="52.5046%" y="837" width="0.5568%" height="15" fill="rgb(222,56,43)" fg:x="64975" fg:w="689"/><text x="52.7546%" y="847.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (732 samples, 0.59%)</title><rect x="52.4812%" y="853" width="0.5915%" height="15" fill="rgb(238,39,47)" fg:x="64946" fg:w="732"/><text x="52.7312%" y="863.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (14 samples, 0.01%)</title><rect x="53.0614%" y="837" width="0.0113%" height="15" fill="rgb(226,79,43)" fg:x="65664" fg:w="14"/><text x="53.3114%" y="847.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (1,188 samples, 0.96%)</title><rect x="52.4077%" y="869" width="0.9600%" height="15" fill="rgb(242,105,53)" fg:x="64855" fg:w="1188"/><text x="52.6577%" y="879.50"></text></g><g><title>[libc-2.31.so] (365 samples, 0.29%)</title><rect x="53.0727%" y="853" width="0.2949%" height="15" fill="rgb(251,132,46)" fg:x="65678" fg:w="365"/><text x="53.3227%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;tremor_runtime::connectors::sink::SinkMsgWrapper&gt;&gt; (15 samples, 0.01%)</title><rect x="53.3676%" y="869" width="0.0121%" height="15" fill="rgb(231,77,14)" fg:x="66043" fg:w="15"/><text x="53.6176%" y="879.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (1,218 samples, 0.98%)</title><rect x="52.3963%" y="917" width="0.9842%" height="15" fill="rgb(240,135,9)" fg:x="64841" fg:w="1218"/><text x="52.6463%" y="927.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,218 samples, 0.98%)</title><rect x="52.3963%" y="901" width="0.9842%" height="15" fill="rgb(248,109,14)" fg:x="64841" fg:w="1218"/><text x="52.6463%" y="911.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (1,218 samples, 0.98%)</title><rect x="52.3963%" y="885" width="0.9842%" height="15" fill="rgb(227,146,52)" fg:x="64841" fg:w="1218"/><text x="52.6463%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (310 samples, 0.25%)</title><rect x="53.5228%" y="709" width="0.2505%" height="15" fill="rgb(232,54,3)" fg:x="66235" fg:w="310"/><text x="53.7728%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (310 samples, 0.25%)</title><rect x="53.5228%" y="693" width="0.2505%" height="15" fill="rgb(229,201,43)" fg:x="66235" fg:w="310"/><text x="53.7728%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (562 samples, 0.45%)</title><rect x="53.7733%" y="709" width="0.4541%" height="15" fill="rgb(252,161,33)" fg:x="66545" fg:w="562"/><text x="54.0233%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_load (557 samples, 0.45%)</title><rect x="53.7773%" y="693" width="0.4501%" height="15" fill="rgb(226,146,40)" fg:x="66550" fg:w="557"/><text x="54.0273%" y="703.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (1,005 samples, 0.81%)</title><rect x="53.4178%" y="741" width="0.8121%" height="15" fill="rgb(219,47,25)" fg:x="66105" fg:w="1005"/><text x="53.6678%" y="751.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (957 samples, 0.77%)</title><rect x="53.4565%" y="725" width="0.7733%" height="15" fill="rgb(250,135,13)" fg:x="66153" fg:w="957"/><text x="53.7065%" y="735.50"></text></g><g><title>&lt;event_listener::ListGuard as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="54.2412%" y="709" width="0.0105%" height="15" fill="rgb(219,229,18)" fg:x="67124" fg:w="13"/><text x="54.4912%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (64 samples, 0.05%)</title><rect x="54.2541%" y="645" width="0.0517%" height="15" fill="rgb(217,152,27)" fg:x="67140" fg:w="64"/><text x="54.5041%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_swap (64 samples, 0.05%)</title><rect x="54.2541%" y="629" width="0.0517%" height="15" fill="rgb(225,71,47)" fg:x="67140" fg:w="64"/><text x="54.5041%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (81 samples, 0.07%)</title><rect x="54.2412%" y="725" width="0.0655%" height="15" fill="rgb(220,139,14)" fg:x="67124" fg:w="81"/><text x="54.4912%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (68 samples, 0.05%)</title><rect x="54.2517%" y="709" width="0.0549%" height="15" fill="rgb(247,54,32)" fg:x="67137" fg:w="68"/><text x="54.5017%" y="719.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (68 samples, 0.05%)</title><rect x="54.2517%" y="693" width="0.0549%" height="15" fill="rgb(252,131,39)" fg:x="67137" fg:w="68"/><text x="54.5017%" y="703.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (65 samples, 0.05%)</title><rect x="54.2541%" y="677" width="0.0525%" height="15" fill="rgb(210,108,39)" fg:x="67140" fg:w="65"/><text x="54.5041%" y="687.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (65 samples, 0.05%)</title><rect x="54.2541%" y="661" width="0.0525%" height="15" fill="rgb(205,23,29)" fg:x="67140" fg:w="65"/><text x="54.5041%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (38 samples, 0.03%)</title><rect x="54.3066%" y="725" width="0.0307%" height="15" fill="rgb(246,139,46)" fg:x="67205" fg:w="38"/><text x="54.5566%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_load (38 samples, 0.03%)</title><rect x="54.3066%" y="709" width="0.0307%" height="15" fill="rgb(250,81,26)" fg:x="67205" fg:w="38"/><text x="54.5566%" y="719.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (13 samples, 0.01%)</title><rect x="54.3462%" y="693" width="0.0105%" height="15" fill="rgb(214,104,7)" fg:x="67254" fg:w="13"/><text x="54.5962%" y="703.50"></text></g><g><title>std::sync::poison::Flag::borrow (13 samples, 0.01%)</title><rect x="54.3462%" y="677" width="0.0105%" height="15" fill="rgb(233,189,8)" fg:x="67254" fg:w="13"/><text x="54.5962%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (112 samples, 0.09%)</title><rect x="54.3575%" y="661" width="0.0905%" height="15" fill="rgb(228,141,17)" fg:x="67268" fg:w="112"/><text x="54.6075%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (112 samples, 0.09%)</title><rect x="54.3575%" y="645" width="0.0905%" height="15" fill="rgb(247,157,1)" fg:x="67268" fg:w="112"/><text x="54.6075%" y="655.50"></text></g><g><title>event_listener::Inner::lock (154 samples, 0.12%)</title><rect x="54.3390%" y="725" width="0.1244%" height="15" fill="rgb(249,225,5)" fg:x="67245" fg:w="154"/><text x="54.5890%" y="735.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (145 samples, 0.12%)</title><rect x="54.3462%" y="709" width="0.1172%" height="15" fill="rgb(242,55,13)" fg:x="67254" fg:w="145"/><text x="54.5962%" y="719.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (132 samples, 0.11%)</title><rect x="54.3567%" y="693" width="0.1067%" height="15" fill="rgb(230,49,50)" fg:x="67267" fg:w="132"/><text x="54.6067%" y="703.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (132 samples, 0.11%)</title><rect x="54.3567%" y="677" width="0.1067%" height="15" fill="rgb(241,111,38)" fg:x="67267" fg:w="132"/><text x="54.6067%" y="687.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (19 samples, 0.02%)</title><rect x="54.4480%" y="661" width="0.0154%" height="15" fill="rgb(252,155,4)" fg:x="67380" fg:w="19"/><text x="54.6980%" y="671.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (14 samples, 0.01%)</title><rect x="54.4521%" y="645" width="0.0113%" height="15" fill="rgb(212,69,32)" fg:x="67385" fg:w="14"/><text x="54.7021%" y="655.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_waker (43 samples, 0.03%)</title><rect x="54.4763%" y="677" width="0.0347%" height="15" fill="rgb(243,107,47)" fg:x="67415" fg:w="43"/><text x="54.7263%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (43 samples, 0.03%)</title><rect x="54.4763%" y="661" width="0.0347%" height="15" fill="rgb(247,130,12)" fg:x="67415" fg:w="43"/><text x="54.7263%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_sub (43 samples, 0.03%)</title><rect x="54.4763%" y="645" width="0.0347%" height="15" fill="rgb(233,74,16)" fg:x="67415" fg:w="43"/><text x="54.7263%" y="655.50"></text></g><g><title>async_executor::Sleepers::notify (29 samples, 0.02%)</title><rect x="54.5175%" y="629" width="0.0234%" height="15" fill="rgb(208,58,18)" fg:x="67466" fg:w="29"/><text x="54.7675%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (25 samples, 0.02%)</title><rect x="54.5208%" y="613" width="0.0202%" height="15" fill="rgb(242,225,1)" fg:x="67470" fg:w="25"/><text x="54.7708%" y="623.50"></text></g><g><title>core::ptr::read (20 samples, 0.02%)</title><rect x="54.5248%" y="597" width="0.0162%" height="15" fill="rgb(249,39,40)" fg:x="67475" fg:w="20"/><text x="54.7748%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (78 samples, 0.06%)</title><rect x="54.5442%" y="565" width="0.0630%" height="15" fill="rgb(207,72,44)" fg:x="67499" fg:w="78"/><text x="54.7942%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_swap (78 samples, 0.06%)</title><rect x="54.5442%" y="549" width="0.0630%" height="15" fill="rgb(215,193,12)" fg:x="67499" fg:w="78"/><text x="54.7942%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (84 samples, 0.07%)</title><rect x="54.5410%" y="629" width="0.0679%" height="15" fill="rgb(248,41,39)" fg:x="67495" fg:w="84"/><text x="54.7910%" y="639.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (84 samples, 0.07%)</title><rect x="54.5410%" y="613" width="0.0679%" height="15" fill="rgb(253,85,4)" fg:x="67495" fg:w="84"/><text x="54.7910%" y="623.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (81 samples, 0.07%)</title><rect x="54.5434%" y="597" width="0.0655%" height="15" fill="rgb(243,70,31)" fg:x="67498" fg:w="81"/><text x="54.7934%" y="607.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (81 samples, 0.07%)</title><rect x="54.5434%" y="581" width="0.0655%" height="15" fill="rgb(253,195,26)" fg:x="67498" fg:w="81"/><text x="54.7934%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (73 samples, 0.06%)</title><rect x="54.6089%" y="629" width="0.0590%" height="15" fill="rgb(243,42,11)" fg:x="67579" fg:w="73"/><text x="54.8589%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (73 samples, 0.06%)</title><rect x="54.6089%" y="613" width="0.0590%" height="15" fill="rgb(239,66,17)" fg:x="67579" fg:w="73"/><text x="54.8589%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (13 samples, 0.01%)</title><rect x="54.6792%" y="549" width="0.0105%" height="15" fill="rgb(217,132,21)" fg:x="67666" fg:w="13"/><text x="54.9292%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (13 samples, 0.01%)</title><rect x="54.6792%" y="533" width="0.0105%" height="15" fill="rgb(252,202,21)" fg:x="67666" fg:w="13"/><text x="54.9292%" y="543.50"></text></g><g><title>async_io::reactor::Reactor::notify (41 samples, 0.03%)</title><rect x="54.6735%" y="581" width="0.0331%" height="15" fill="rgb(233,98,36)" fg:x="67659" fg:w="41"/><text x="54.9235%" y="591.50"></text></g><g><title>polling::Poller::notify (34 samples, 0.03%)</title><rect x="54.6792%" y="565" width="0.0275%" height="15" fill="rgb(216,153,54)" fg:x="67666" fg:w="34"/><text x="54.9292%" y="575.50"></text></g><g><title>polling::epoll::Poller::notify (20 samples, 0.02%)</title><rect x="54.6905%" y="549" width="0.0162%" height="15" fill="rgb(250,99,7)" fg:x="67680" fg:w="20"/><text x="54.9405%" y="559.50"></text></g><g><title>__libc_write (17 samples, 0.01%)</title><rect x="54.6929%" y="533" width="0.0137%" height="15" fill="rgb(207,56,50)" fg:x="67683" fg:w="17"/><text x="54.9429%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (49 samples, 0.04%)</title><rect x="54.7236%" y="549" width="0.0396%" height="15" fill="rgb(244,61,34)" fg:x="67721" fg:w="49"/><text x="54.9736%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_swap (49 samples, 0.04%)</title><rect x="54.7236%" y="533" width="0.0396%" height="15" fill="rgb(241,50,38)" fg:x="67721" fg:w="49"/><text x="54.9736%" y="543.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (25 samples, 0.02%)</title><rect x="54.7632%" y="549" width="0.0202%" height="15" fill="rgb(212,166,30)" fg:x="67770" fg:w="25"/><text x="55.0132%" y="559.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (25 samples, 0.02%)</title><rect x="54.7632%" y="533" width="0.0202%" height="15" fill="rgb(249,127,32)" fg:x="67770" fg:w="25"/><text x="55.0132%" y="543.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::notify_one (25 samples, 0.02%)</title><rect x="54.7632%" y="517" width="0.0202%" height="15" fill="rgb(209,103,0)" fg:x="67770" fg:w="25"/><text x="55.0132%" y="527.50"></text></g><g><title>std::sys::unix::futex::futex_wake (17 samples, 0.01%)</title><rect x="54.7697%" y="501" width="0.0137%" height="15" fill="rgb(238,209,51)" fg:x="67778" fg:w="17"/><text x="55.0197%" y="511.50"></text></g><g><title>syscall (17 samples, 0.01%)</title><rect x="54.7697%" y="485" width="0.0137%" height="15" fill="rgb(237,56,23)" fg:x="67778" fg:w="17"/><text x="55.0197%" y="495.50"></text></g><g><title>parking::Unparker::unpark (103 samples, 0.08%)</title><rect x="54.7107%" y="581" width="0.0832%" height="15" fill="rgb(215,153,46)" fg:x="67705" fg:w="103"/><text x="54.9607%" y="591.50"></text></g><g><title>parking::Inner::unpark (95 samples, 0.08%)</title><rect x="54.7171%" y="565" width="0.0768%" height="15" fill="rgb(224,49,31)" fg:x="67713" fg:w="95"/><text x="54.9671%" y="575.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (13 samples, 0.01%)</title><rect x="54.7834%" y="549" width="0.0105%" height="15" fill="rgb(250,18,42)" fg:x="67795" fg:w="13"/><text x="55.0334%" y="559.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (165 samples, 0.13%)</title><rect x="54.6678%" y="597" width="0.1333%" height="15" fill="rgb(215,176,39)" fg:x="67652" fg:w="165"/><text x="54.9178%" y="607.50"></text></g><g><title>core::task::wake::Waker::wake (260 samples, 0.21%)</title><rect x="54.6678%" y="629" width="0.2101%" height="15" fill="rgb(223,77,29)" fg:x="67652" fg:w="260"/><text x="54.9178%" y="639.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (260 samples, 0.21%)</title><rect x="54.6678%" y="613" width="0.2101%" height="15" fill="rgb(234,94,52)" fg:x="67652" fg:w="260"/><text x="54.9178%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (95 samples, 0.08%)</title><rect x="54.8012%" y="597" width="0.0768%" height="15" fill="rgb(220,154,50)" fg:x="67817" fg:w="95"/><text x="55.0512%" y="607.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (95 samples, 0.08%)</title><rect x="54.8012%" y="581" width="0.0768%" height="15" fill="rgb(212,11,10)" fg:x="67817" fg:w="95"/><text x="55.0512%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (94 samples, 0.08%)</title><rect x="54.8020%" y="565" width="0.0760%" height="15" fill="rgb(205,166,19)" fg:x="67818" fg:w="94"/><text x="55.0520%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_sub (94 samples, 0.08%)</title><rect x="54.8020%" y="549" width="0.0760%" height="15" fill="rgb(244,198,16)" fg:x="67818" fg:w="94"/><text x="55.0520%" y="559.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (13 samples, 0.01%)</title><rect x="54.8779%" y="613" width="0.0105%" height="15" fill="rgb(219,69,12)" fg:x="67912" fg:w="13"/><text x="55.1279%" y="623.50"></text></g><g><title>std::sync::poison::Flag::borrow (13 samples, 0.01%)</title><rect x="54.8779%" y="597" width="0.0105%" height="15" fill="rgb(245,30,7)" fg:x="67912" fg:w="13"/><text x="55.1279%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (66 samples, 0.05%)</title><rect x="54.8893%" y="581" width="0.0533%" height="15" fill="rgb(218,221,48)" fg:x="67926" fg:w="66"/><text x="55.1393%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (66 samples, 0.05%)</title><rect x="54.8893%" y="565" width="0.0533%" height="15" fill="rgb(216,66,15)" fg:x="67926" fg:w="66"/><text x="55.1393%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (19 samples, 0.02%)</title><rect x="54.9434%" y="565" width="0.0154%" height="15" fill="rgb(226,122,50)" fg:x="67993" fg:w="19"/><text x="55.1934%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (19 samples, 0.02%)</title><rect x="54.9434%" y="549" width="0.0154%" height="15" fill="rgb(239,156,16)" fg:x="67993" fg:w="19"/><text x="55.1934%" y="559.50"></text></g><g><title>core::hint::spin_loop (22 samples, 0.02%)</title><rect x="54.9644%" y="549" width="0.0178%" height="15" fill="rgb(224,27,38)" fg:x="68019" fg:w="22"/><text x="55.2144%" y="559.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (22 samples, 0.02%)</title><rect x="54.9644%" y="533" width="0.0178%" height="15" fill="rgb(224,39,27)" fg:x="68019" fg:w="22"/><text x="55.2144%" y="543.50"></text></g><g><title>async_executor::State::notify (612 samples, 0.49%)</title><rect x="54.5135%" y="645" width="0.4945%" height="15" fill="rgb(215,92,29)" fg:x="67461" fg:w="612"/><text x="54.7635%" y="655.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (161 samples, 0.13%)</title><rect x="54.8779%" y="629" width="0.1301%" height="15" fill="rgb(207,159,16)" fg:x="67912" fg:w="161"/><text x="55.1279%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (148 samples, 0.12%)</title><rect x="54.8884%" y="613" width="0.1196%" height="15" fill="rgb(238,163,47)" fg:x="67925" fg:w="148"/><text x="55.1384%" y="623.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (148 samples, 0.12%)</title><rect x="54.8884%" y="597" width="0.1196%" height="15" fill="rgb(219,91,49)" fg:x="67925" fg:w="148"/><text x="55.1384%" y="607.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (81 samples, 0.07%)</title><rect x="54.9426%" y="581" width="0.0655%" height="15" fill="rgb(227,167,31)" fg:x="67992" fg:w="81"/><text x="55.1926%" y="591.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (54 samples, 0.04%)</title><rect x="54.9644%" y="565" width="0.0436%" height="15" fill="rgb(234,80,54)" fg:x="68019" fg:w="54"/><text x="55.2144%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (32 samples, 0.03%)</title><rect x="54.9822%" y="549" width="0.0259%" height="15" fill="rgb(212,114,2)" fg:x="68041" fg:w="32"/><text x="55.2322%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_load (32 samples, 0.03%)</title><rect x="54.9822%" y="533" width="0.0259%" height="15" fill="rgb(234,50,24)" fg:x="68041" fg:w="32"/><text x="55.2322%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (127 samples, 0.10%)</title><rect x="55.0226%" y="613" width="0.1026%" height="15" fill="rgb(221,68,8)" fg:x="68091" fg:w="127"/><text x="55.2726%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (127 samples, 0.10%)</title><rect x="55.0226%" y="597" width="0.1026%" height="15" fill="rgb(254,180,31)" fg:x="68091" fg:w="127"/><text x="55.2726%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (36 samples, 0.03%)</title><rect x="55.1276%" y="613" width="0.0291%" height="15" fill="rgb(247,130,50)" fg:x="68221" fg:w="36"/><text x="55.3776%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_or (36 samples, 0.03%)</title><rect x="55.1276%" y="597" width="0.0291%" height="15" fill="rgb(211,109,4)" fg:x="68221" fg:w="36"/><text x="55.3776%" y="607.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (798 samples, 0.64%)</title><rect x="54.5135%" y="661" width="0.6448%" height="15" fill="rgb(238,50,21)" fg:x="67461" fg:w="798"/><text x="54.7635%" y="671.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (186 samples, 0.15%)</title><rect x="55.0080%" y="645" width="0.1503%" height="15" fill="rgb(225,57,45)" fg:x="68073" fg:w="186"/><text x="55.2580%" y="655.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (183 samples, 0.15%)</title><rect x="55.0105%" y="629" width="0.1479%" height="15" fill="rgb(209,196,50)" fg:x="68076" fg:w="183"/><text x="55.2605%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (161 samples, 0.13%)</title><rect x="55.1583%" y="661" width="0.1301%" height="15" fill="rgb(242,140,13)" fg:x="68259" fg:w="161"/><text x="55.4083%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (161 samples, 0.13%)</title><rect x="55.1583%" y="645" width="0.1301%" height="15" fill="rgb(217,111,7)" fg:x="68259" fg:w="161"/><text x="55.4083%" y="655.50"></text></g><g><title>event_listener::List::notify (1,054 samples, 0.85%)</title><rect x="54.4634%" y="725" width="0.8517%" height="15" fill="rgb(253,193,51)" fg:x="67399" fg:w="1054"/><text x="54.7134%" y="735.50"></text></g><g><title>core::task::wake::Waker::wake (1,038 samples, 0.84%)</title><rect x="54.4763%" y="709" width="0.8388%" height="15" fill="rgb(252,70,29)" fg:x="67415" fg:w="1038"/><text x="54.7263%" y="719.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (1,038 samples, 0.84%)</title><rect x="54.4763%" y="693" width="0.8388%" height="15" fill="rgb(232,127,12)" fg:x="67415" fg:w="1038"/><text x="54.7263%" y="703.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (995 samples, 0.80%)</title><rect x="54.5111%" y="677" width="0.8040%" height="15" fill="rgb(211,180,21)" fg:x="67458" fg:w="995"/><text x="54.7611%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (33 samples, 0.03%)</title><rect x="55.2884%" y="661" width="0.0267%" height="15" fill="rgb(229,72,13)" fg:x="68420" fg:w="33"/><text x="55.5384%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_load (33 samples, 0.03%)</title><rect x="55.2884%" y="645" width="0.0267%" height="15" fill="rgb(240,211,49)" fg:x="68420" fg:w="33"/><text x="55.5384%" y="655.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (3,146 samples, 2.54%)</title><rect x="53.4016%" y="757" width="2.5422%" height="15" fill="rgb(219,149,40)" fg:x="66085" fg:w="3146"/><text x="53.6516%" y="767.50">as..</text></g><g><title>event_listener::Event::notify (2,121 samples, 1.71%)</title><rect x="54.2299%" y="741" width="1.7139%" height="15" fill="rgb(210,127,46)" fg:x="67110" fg:w="2121"/><text x="54.4799%" y="751.50"></text></g><g><title>event_listener::full_fence (778 samples, 0.63%)</title><rect x="55.3151%" y="725" width="0.6287%" height="15" fill="rgb(220,106,7)" fg:x="68453" fg:w="778"/><text x="55.5651%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (775 samples, 0.63%)</title><rect x="55.3175%" y="709" width="0.6263%" height="15" fill="rgb(249,31,22)" fg:x="68456" fg:w="775"/><text x="55.5675%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (775 samples, 0.63%)</title><rect x="55.3175%" y="693" width="0.6263%" height="15" fill="rgb(253,1,49)" fg:x="68456" fg:w="775"/><text x="55.5675%" y="703.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::capacity (16 samples, 0.01%)</title><rect x="55.9438%" y="757" width="0.0129%" height="15" fill="rgb(227,144,33)" fg:x="69231" fg:w="16"/><text x="56.1938%" y="767.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,317 samples, 2.68%)</title><rect x="53.3806%" y="837" width="2.6804%" height="15" fill="rgb(249,163,44)" fg:x="66059" fg:w="3317"/><text x="53.6306%" y="847.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (3,317 samples, 2.68%)</title><rect x="53.3806%" y="821" width="2.6804%" height="15" fill="rgb(234,15,39)" fg:x="66059" fg:w="3317"/><text x="53.6306%" y="831.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,317 samples, 2.68%)</title><rect x="53.3806%" y="805" width="2.6804%" height="15" fill="rgb(207,66,16)" fg:x="66059" fg:w="3317"/><text x="53.6306%" y="815.50">&lt;c..</text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (3,317 samples, 2.68%)</title><rect x="53.3806%" y="789" width="2.6804%" height="15" fill="rgb(233,112,24)" fg:x="66059" fg:w="3317"/><text x="53.6306%" y="799.50">tr..</text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (3,317 samples, 2.68%)</title><rect x="53.3806%" y="773" width="2.6804%" height="15" fill="rgb(230,90,22)" fg:x="66059" fg:w="3317"/><text x="53.6306%" y="783.50">&lt;a..</text></g><g><title>event_listener::Event::notify (118 samples, 0.10%)</title><rect x="55.9656%" y="757" width="0.0954%" height="15" fill="rgb(229,61,13)" fg:x="69258" fg:w="118"/><text x="56.2156%" y="767.50"></text></g><g><title>event_listener::full_fence (115 samples, 0.09%)</title><rect x="55.9680%" y="741" width="0.0929%" height="15" fill="rgb(225,57,24)" fg:x="69261" fg:w="115"/><text x="56.2180%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (115 samples, 0.09%)</title><rect x="55.9680%" y="725" width="0.0929%" height="15" fill="rgb(208,169,48)" fg:x="69261" fg:w="115"/><text x="56.2180%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (115 samples, 0.09%)</title><rect x="55.9680%" y="709" width="0.0929%" height="15" fill="rgb(244,218,51)" fg:x="69261" fg:w="115"/><text x="56.2180%" y="719.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (43 samples, 0.03%)</title><rect x="56.6751%" y="821" width="0.0347%" height="15" fill="rgb(214,148,10)" fg:x="70136" fg:w="43"/><text x="56.9251%" y="831.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::clone::Clone&gt;::clone (16 samples, 0.01%)</title><rect x="56.7098%" y="821" width="0.0129%" height="15" fill="rgb(225,174,27)" fg:x="70179" fg:w="16"/><text x="56.9598%" y="831.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (35 samples, 0.03%)</title><rect x="57.2812%" y="549" width="0.0283%" height="15" fill="rgb(230,96,26)" fg:x="70886" fg:w="35"/><text x="57.5312%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (162 samples, 0.13%)</title><rect x="57.1801%" y="693" width="0.1309%" height="15" fill="rgb(232,10,30)" fg:x="70761" fg:w="162"/><text x="57.4301%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (162 samples, 0.13%)</title><rect x="57.1801%" y="677" width="0.1309%" height="15" fill="rgb(222,8,50)" fg:x="70761" fg:w="162"/><text x="57.4301%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (162 samples, 0.13%)</title><rect x="57.1801%" y="661" width="0.1309%" height="15" fill="rgb(213,81,27)" fg:x="70761" fg:w="162"/><text x="57.4301%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (162 samples, 0.13%)</title><rect x="57.1801%" y="645" width="0.1309%" height="15" fill="rgb(245,50,10)" fg:x="70761" fg:w="162"/><text x="57.4301%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (162 samples, 0.13%)</title><rect x="57.1801%" y="629" width="0.1309%" height="15" fill="rgb(216,100,18)" fg:x="70761" fg:w="162"/><text x="57.4301%" y="639.50"></text></g><g><title>alloc::alloc::alloc (153 samples, 0.12%)</title><rect x="57.1874%" y="613" width="0.1236%" height="15" fill="rgb(236,147,54)" fg:x="70770" fg:w="153"/><text x="57.4374%" y="623.50"></text></g><g><title>__rg_alloc (153 samples, 0.12%)</title><rect x="57.1874%" y="597" width="0.1236%" height="15" fill="rgb(205,143,26)" fg:x="70770" fg:w="153"/><text x="57.4374%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (153 samples, 0.12%)</title><rect x="57.1874%" y="581" width="0.1236%" height="15" fill="rgb(236,26,9)" fg:x="70770" fg:w="153"/><text x="57.4374%" y="591.50"></text></g><g><title>sn_rust_alloc (132 samples, 0.11%)</title><rect x="57.2044%" y="565" width="0.1067%" height="15" fill="rgb(221,165,53)" fg:x="70791" fg:w="132"/><text x="57.4544%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (270 samples, 0.22%)</title><rect x="57.1486%" y="805" width="0.2182%" height="15" fill="rgb(214,110,17)" fg:x="70722" fg:w="270"/><text x="57.3986%" y="815.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (251 samples, 0.20%)</title><rect x="57.1640%" y="789" width="0.2028%" height="15" fill="rgb(237,197,12)" fg:x="70741" fg:w="251"/><text x="57.4140%" y="799.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (239 samples, 0.19%)</title><rect x="57.1737%" y="773" width="0.1931%" height="15" fill="rgb(205,84,17)" fg:x="70753" fg:w="239"/><text x="57.4237%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (231 samples, 0.19%)</title><rect x="57.1801%" y="757" width="0.1867%" height="15" fill="rgb(237,18,45)" fg:x="70761" fg:w="231"/><text x="57.4301%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (231 samples, 0.19%)</title><rect x="57.1801%" y="741" width="0.1867%" height="15" fill="rgb(221,87,14)" fg:x="70761" fg:w="231"/><text x="57.4301%" y="751.50"></text></g><g><title>alloc::slice::hack::to_vec (231 samples, 0.19%)</title><rect x="57.1801%" y="725" width="0.1867%" height="15" fill="rgb(238,186,15)" fg:x="70761" fg:w="231"/><text x="57.4301%" y="735.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (231 samples, 0.19%)</title><rect x="57.1801%" y="709" width="0.1867%" height="15" fill="rgb(208,115,11)" fg:x="70761" fg:w="231"/><text x="57.4301%" y="719.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (69 samples, 0.06%)</title><rect x="57.3111%" y="693" width="0.0558%" height="15" fill="rgb(254,175,0)" fg:x="70923" fg:w="69"/><text x="57.5611%" y="703.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (69 samples, 0.06%)</title><rect x="57.3111%" y="677" width="0.0558%" height="15" fill="rgb(227,24,42)" fg:x="70923" fg:w="69"/><text x="57.5611%" y="687.50"></text></g><g><title>[libc-2.31.so] (45 samples, 0.04%)</title><rect x="57.3304%" y="661" width="0.0364%" height="15" fill="rgb(223,211,37)" fg:x="70947" fg:w="45"/><text x="57.5804%" y="671.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (29 samples, 0.02%)</title><rect x="57.4331%" y="453" width="0.0234%" height="15" fill="rgb(235,49,27)" fg:x="71074" fg:w="29"/><text x="57.6831%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (82 samples, 0.07%)</title><rect x="57.3911%" y="597" width="0.0663%" height="15" fill="rgb(254,97,51)" fg:x="71022" fg:w="82"/><text x="57.6411%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (82 samples, 0.07%)</title><rect x="57.3911%" y="581" width="0.0663%" height="15" fill="rgb(249,51,40)" fg:x="71022" fg:w="82"/><text x="57.6411%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (82 samples, 0.07%)</title><rect x="57.3911%" y="565" width="0.0663%" height="15" fill="rgb(210,128,45)" fg:x="71022" fg:w="82"/><text x="57.6411%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (70 samples, 0.06%)</title><rect x="57.4007%" y="549" width="0.0566%" height="15" fill="rgb(224,137,50)" fg:x="71034" fg:w="70"/><text x="57.6507%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (70 samples, 0.06%)</title><rect x="57.4007%" y="533" width="0.0566%" height="15" fill="rgb(242,15,9)" fg:x="71034" fg:w="70"/><text x="57.6507%" y="543.50"></text></g><g><title>alloc::alloc::alloc (68 samples, 0.05%)</title><rect x="57.4024%" y="517" width="0.0549%" height="15" fill="rgb(233,187,41)" fg:x="71036" fg:w="68"/><text x="57.6524%" y="527.50"></text></g><g><title>__rg_alloc (68 samples, 0.05%)</title><rect x="57.4024%" y="501" width="0.0549%" height="15" fill="rgb(227,2,29)" fg:x="71036" fg:w="68"/><text x="57.6524%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (68 samples, 0.05%)</title><rect x="57.4024%" y="485" width="0.0549%" height="15" fill="rgb(222,70,3)" fg:x="71036" fg:w="68"/><text x="57.6524%" y="495.50"></text></g><g><title>sn_rust_alloc (66 samples, 0.05%)</title><rect x="57.4040%" y="469" width="0.0533%" height="15" fill="rgb(213,11,42)" fg:x="71038" fg:w="66"/><text x="57.6540%" y="479.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (116 samples, 0.09%)</title><rect x="57.3911%" y="709" width="0.0937%" height="15" fill="rgb(225,150,9)" fg:x="71022" fg:w="116"/><text x="57.6411%" y="719.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (116 samples, 0.09%)</title><rect x="57.3911%" y="693" width="0.0937%" height="15" fill="rgb(230,162,45)" fg:x="71022" fg:w="116"/><text x="57.6411%" y="703.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (116 samples, 0.09%)</title><rect x="57.3911%" y="677" width="0.0937%" height="15" fill="rgb(222,14,52)" fg:x="71022" fg:w="116"/><text x="57.6411%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (116 samples, 0.09%)</title><rect x="57.3911%" y="661" width="0.0937%" height="15" fill="rgb(254,198,14)" fg:x="71022" fg:w="116"/><text x="57.6411%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (116 samples, 0.09%)</title><rect x="57.3911%" y="645" width="0.0937%" height="15" fill="rgb(220,217,30)" fg:x="71022" fg:w="116"/><text x="57.6411%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (116 samples, 0.09%)</title><rect x="57.3911%" y="629" width="0.0937%" height="15" fill="rgb(215,146,41)" fg:x="71022" fg:w="116"/><text x="57.6411%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (116 samples, 0.09%)</title><rect x="57.3911%" y="613" width="0.0937%" height="15" fill="rgb(217,27,36)" fg:x="71022" fg:w="116"/><text x="57.6411%" y="623.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (34 samples, 0.03%)</title><rect x="57.4573%" y="597" width="0.0275%" height="15" fill="rgb(219,218,39)" fg:x="71104" fg:w="34"/><text x="57.7073%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (34 samples, 0.03%)</title><rect x="57.4573%" y="581" width="0.0275%" height="15" fill="rgb(219,4,42)" fg:x="71104" fg:w="34"/><text x="57.7073%" y="591.50"></text></g><g><title>[libc-2.31.so] (28 samples, 0.02%)</title><rect x="57.4622%" y="565" width="0.0226%" height="15" fill="rgb(249,119,36)" fg:x="71110" fg:w="28"/><text x="57.7122%" y="575.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (27 samples, 0.02%)</title><rect x="57.5268%" y="565" width="0.0218%" height="15" fill="rgb(209,23,33)" fg:x="71190" fg:w="27"/><text x="57.7768%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (59 samples, 0.05%)</title><rect x="57.5018%" y="661" width="0.0477%" height="15" fill="rgb(211,10,0)" fg:x="71159" fg:w="59"/><text x="57.7518%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (59 samples, 0.05%)</title><rect x="57.5018%" y="645" width="0.0477%" height="15" fill="rgb(208,99,37)" fg:x="71159" fg:w="59"/><text x="57.7518%" y="655.50"></text></g><g><title>alloc::alloc::alloc (59 samples, 0.05%)</title><rect x="57.5018%" y="629" width="0.0477%" height="15" fill="rgb(213,132,31)" fg:x="71159" fg:w="59"/><text x="57.7518%" y="639.50"></text></g><g><title>__rg_alloc (59 samples, 0.05%)</title><rect x="57.5018%" y="613" width="0.0477%" height="15" fill="rgb(243,129,40)" fg:x="71159" fg:w="59"/><text x="57.7518%" y="623.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (59 samples, 0.05%)</title><rect x="57.5018%" y="597" width="0.0477%" height="15" fill="rgb(210,66,33)" fg:x="71159" fg:w="59"/><text x="57.7518%" y="607.50"></text></g><g><title>sn_rust_alloc (59 samples, 0.05%)</title><rect x="57.5018%" y="581" width="0.0477%" height="15" fill="rgb(209,189,4)" fg:x="71159" fg:w="59"/><text x="57.7518%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (70 samples, 0.06%)</title><rect x="57.4969%" y="709" width="0.0566%" height="15" fill="rgb(214,107,37)" fg:x="71153" fg:w="70"/><text x="57.7469%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (64 samples, 0.05%)</title><rect x="57.5018%" y="693" width="0.0517%" height="15" fill="rgb(245,88,54)" fg:x="71159" fg:w="64"/><text x="57.7518%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (64 samples, 0.05%)</title><rect x="57.5018%" y="677" width="0.0517%" height="15" fill="rgb(205,146,20)" fg:x="71159" fg:w="64"/><text x="57.7518%" y="687.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (1,037 samples, 0.84%)</title><rect x="56.7228%" y="821" width="0.8380%" height="15" fill="rgb(220,161,25)" fg:x="70195" fg:w="1037"/><text x="56.9728%" y="831.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (240 samples, 0.19%)</title><rect x="57.3668%" y="805" width="0.1939%" height="15" fill="rgb(215,152,15)" fg:x="70992" fg:w="240"/><text x="57.6168%" y="815.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (218 samples, 0.18%)</title><rect x="57.3846%" y="789" width="0.1762%" height="15" fill="rgb(233,192,44)" fg:x="71014" fg:w="218"/><text x="57.6346%" y="799.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (218 samples, 0.18%)</title><rect x="57.3846%" y="773" width="0.1762%" height="15" fill="rgb(240,170,46)" fg:x="71014" fg:w="218"/><text x="57.6346%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (218 samples, 0.18%)</title><rect x="57.3846%" y="757" width="0.1762%" height="15" fill="rgb(207,104,33)" fg:x="71014" fg:w="218"/><text x="57.6346%" y="767.50"></text></g><g><title>alloc::slice::hack::to_vec (218 samples, 0.18%)</title><rect x="57.3846%" y="741" width="0.1762%" height="15" fill="rgb(219,21,39)" fg:x="71014" fg:w="218"/><text x="57.6346%" y="751.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (218 samples, 0.18%)</title><rect x="57.3846%" y="725" width="0.1762%" height="15" fill="rgb(214,133,29)" fg:x="71014" fg:w="218"/><text x="57.6346%" y="735.50"></text></g><g><title>[libc-2.31.so] (127 samples, 0.10%)</title><rect x="57.5607%" y="821" width="0.1026%" height="15" fill="rgb(226,93,6)" fg:x="71232" fg:w="127"/><text x="57.8107%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (268 samples, 0.22%)</title><rect x="57.6698%" y="821" width="0.2166%" height="15" fill="rgb(252,222,34)" fg:x="71367" fg:w="268"/><text x="57.9198%" y="831.50"></text></g><g><title>core::ptr::write (254 samples, 0.21%)</title><rect x="57.6812%" y="805" width="0.2053%" height="15" fill="rgb(252,92,48)" fg:x="71381" fg:w="254"/><text x="57.9312%" y="815.50"></text></g><g><title>[libc-2.31.so] (254 samples, 0.21%)</title><rect x="57.6812%" y="789" width="0.2053%" height="15" fill="rgb(245,223,24)" fg:x="71381" fg:w="254"/><text x="57.9312%" y="799.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (839 samples, 0.68%)</title><rect x="57.9519%" y="661" width="0.6780%" height="15" fill="rgb(205,176,3)" fg:x="71716" fg:w="839"/><text x="58.2019%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (927 samples, 0.75%)</title><rect x="57.8969%" y="757" width="0.7491%" height="15" fill="rgb(235,151,15)" fg:x="71648" fg:w="927"/><text x="58.1469%" y="767.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (927 samples, 0.75%)</title><rect x="57.8969%" y="741" width="0.7491%" height="15" fill="rgb(237,209,11)" fg:x="71648" fg:w="927"/><text x="58.1469%" y="751.50"></text></g><g><title>alloc::alloc::alloc (925 samples, 0.75%)</title><rect x="57.8985%" y="725" width="0.7475%" height="15" fill="rgb(243,227,24)" fg:x="71650" fg:w="925"/><text x="58.1485%" y="735.50"></text></g><g><title>__rg_alloc (925 samples, 0.75%)</title><rect x="57.8985%" y="709" width="0.7475%" height="15" fill="rgb(239,193,16)" fg:x="71650" fg:w="925"/><text x="58.1485%" y="719.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (925 samples, 0.75%)</title><rect x="57.8985%" y="693" width="0.7475%" height="15" fill="rgb(231,27,9)" fg:x="71650" fg:w="925"/><text x="58.1485%" y="703.50"></text></g><g><title>sn_rust_alloc (925 samples, 0.75%)</title><rect x="57.8985%" y="677" width="0.7475%" height="15" fill="rgb(219,169,10)" fg:x="71650" fg:w="925"/><text x="58.1485%" y="687.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (20 samples, 0.02%)</title><rect x="58.6298%" y="661" width="0.0162%" height="15" fill="rgb(244,229,43)" fg:x="72555" fg:w="20"/><text x="58.8798%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (946 samples, 0.76%)</title><rect x="57.8864%" y="821" width="0.7644%" height="15" fill="rgb(254,38,20)" fg:x="71635" fg:w="946"/><text x="58.1364%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (946 samples, 0.76%)</title><rect x="57.8864%" y="805" width="0.7644%" height="15" fill="rgb(250,47,30)" fg:x="71635" fg:w="946"/><text x="58.1364%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (938 samples, 0.76%)</title><rect x="57.8929%" y="789" width="0.7580%" height="15" fill="rgb(224,124,36)" fg:x="71643" fg:w="938"/><text x="58.1429%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (938 samples, 0.76%)</title><rect x="57.8929%" y="773" width="0.7580%" height="15" fill="rgb(246,68,51)" fg:x="71643" fg:w="938"/><text x="58.1429%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (56 samples, 0.05%)</title><rect x="58.6573%" y="789" width="0.0453%" height="15" fill="rgb(253,43,49)" fg:x="72589" fg:w="56"/><text x="58.9073%" y="799.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (56 samples, 0.05%)</title><rect x="58.6573%" y="773" width="0.0453%" height="15" fill="rgb(219,54,36)" fg:x="72589" fg:w="56"/><text x="58.9073%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (51 samples, 0.04%)</title><rect x="58.6613%" y="757" width="0.0412%" height="15" fill="rgb(227,133,34)" fg:x="72594" fg:w="51"/><text x="58.9113%" y="767.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (51 samples, 0.04%)</title><rect x="58.6613%" y="741" width="0.0412%" height="15" fill="rgb(247,227,15)" fg:x="72594" fg:w="51"/><text x="58.9113%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (51 samples, 0.04%)</title><rect x="58.6613%" y="725" width="0.0412%" height="15" fill="rgb(229,96,14)" fg:x="72594" fg:w="51"/><text x="58.9113%" y="735.50"></text></g><g><title>alloc::alloc::dealloc (51 samples, 0.04%)</title><rect x="58.6613%" y="709" width="0.0412%" height="15" fill="rgb(220,79,17)" fg:x="72594" fg:w="51"/><text x="58.9113%" y="719.50"></text></g><g><title>__rg_dealloc (51 samples, 0.04%)</title><rect x="58.6613%" y="693" width="0.0412%" height="15" fill="rgb(205,131,53)" fg:x="72594" fg:w="51"/><text x="58.9113%" y="703.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (51 samples, 0.04%)</title><rect x="58.6613%" y="677" width="0.0412%" height="15" fill="rgb(209,50,29)" fg:x="72594" fg:w="51"/><text x="58.9113%" y="687.50"></text></g><g><title>sn_rust_dealloc (41 samples, 0.03%)</title><rect x="58.6694%" y="661" width="0.0331%" height="15" fill="rgb(245,86,46)" fg:x="72604" fg:w="41"/><text x="58.9194%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (68 samples, 0.05%)</title><rect x="58.6508%" y="821" width="0.0549%" height="15" fill="rgb(235,66,46)" fg:x="72581" fg:w="68"/><text x="58.9008%" y="831.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (68 samples, 0.05%)</title><rect x="58.6508%" y="805" width="0.0549%" height="15" fill="rgb(232,148,31)" fg:x="72581" fg:w="68"/><text x="58.9008%" y="815.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (6,606 samples, 5.34%)</title><rect x="53.3806%" y="917" width="5.3381%" height="15" fill="rgb(217,149,8)" fg:x="66059" fg:w="6606"/><text x="53.6306%" y="927.50">tremor_..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,606 samples, 5.34%)</title><rect x="53.3806%" y="901" width="5.3381%" height="15" fill="rgb(209,183,11)" fg:x="66059" fg:w="6606"/><text x="53.6306%" y="911.50">&lt;core::..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (6,606 samples, 5.34%)</title><rect x="53.3806%" y="885" width="5.3381%" height="15" fill="rgb(208,55,20)" fg:x="66059" fg:w="6606"/><text x="53.6306%" y="895.50">tremor_..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,606 samples, 5.34%)</title><rect x="53.3806%" y="869" width="5.3381%" height="15" fill="rgb(218,39,14)" fg:x="66059" fg:w="6606"/><text x="53.6306%" y="879.50">&lt;core::..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (6,606 samples, 5.34%)</title><rect x="53.3806%" y="853" width="5.3381%" height="15" fill="rgb(216,169,33)" fg:x="66059" fg:w="6606"/><text x="53.6306%" y="863.50">tremor_..</text></g><g><title>tremor_runtime::connectors::source::build_events (3,289 samples, 2.66%)</title><rect x="56.0610%" y="837" width="2.6578%" height="15" fill="rgb(233,80,24)" fg:x="69376" fg:w="3289"/><text x="56.3110%" y="847.50">tr..</text></g><g><title>tremor_runtime::connectors::source::build_event (16 samples, 0.01%)</title><rect x="58.7058%" y="821" width="0.0129%" height="15" fill="rgb(213,179,31)" fg:x="72649" fg:w="16"/><text x="58.9558%" y="831.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (89 samples, 0.07%)</title><rect x="58.8545%" y="853" width="0.0719%" height="15" fill="rgb(209,19,5)" fg:x="72833" fg:w="89"/><text x="59.1045%" y="863.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (65 samples, 0.05%)</title><rect x="58.8739%" y="837" width="0.0525%" height="15" fill="rgb(219,18,35)" fg:x="72857" fg:w="65"/><text x="59.1239%" y="847.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (812 samples, 0.66%)</title><rect x="58.7413%" y="869" width="0.6562%" height="15" fill="rgb(209,169,16)" fg:x="72693" fg:w="812"/><text x="58.9913%" y="879.50"></text></g><g><title>[libc-2.31.so] (583 samples, 0.47%)</title><rect x="58.9264%" y="853" width="0.4711%" height="15" fill="rgb(245,90,51)" fg:x="72922" fg:w="583"/><text x="59.1764%" y="863.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,252 samples, 1.01%)</title><rect x="58.7187%" y="901" width="1.0117%" height="15" fill="rgb(220,99,45)" fg:x="72665" fg:w="1252"/><text x="58.9687%" y="911.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (1,252 samples, 1.01%)</title><rect x="58.7187%" y="885" width="1.0117%" height="15" fill="rgb(249,89,25)" fg:x="72665" fg:w="1252"/><text x="58.9687%" y="895.50"></text></g><g><title>[libc-2.31.so] (412 samples, 0.33%)</title><rect x="59.3975%" y="869" width="0.3329%" height="15" fill="rgb(239,193,0)" fg:x="73505" fg:w="412"/><text x="59.6475%" y="879.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (19 samples, 0.02%)</title><rect x="60.0577%" y="597" width="0.0154%" height="15" fill="rgb(231,126,1)" fg:x="74322" fg:w="19"/><text x="60.3077%" y="607.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (425 samples, 0.34%)</title><rect x="59.7304%" y="869" width="0.3434%" height="15" fill="rgb(243,166,3)" fg:x="73917" fg:w="425"/><text x="59.9804%" y="879.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (425 samples, 0.34%)</title><rect x="59.7304%" y="853" width="0.3434%" height="15" fill="rgb(223,22,34)" fg:x="73917" fg:w="425"/><text x="59.9804%" y="863.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (425 samples, 0.34%)</title><rect x="59.7304%" y="837" width="0.3434%" height="15" fill="rgb(251,52,51)" fg:x="73917" fg:w="425"/><text x="59.9804%" y="847.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (425 samples, 0.34%)</title><rect x="59.7304%" y="821" width="0.3434%" height="15" fill="rgb(221,165,28)" fg:x="73917" fg:w="425"/><text x="59.9804%" y="831.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (425 samples, 0.34%)</title><rect x="59.7304%" y="805" width="0.3434%" height="15" fill="rgb(218,121,47)" fg:x="73917" fg:w="425"/><text x="59.9804%" y="815.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (425 samples, 0.34%)</title><rect x="59.7304%" y="789" width="0.3434%" height="15" fill="rgb(209,120,9)" fg:x="73917" fg:w="425"/><text x="59.9804%" y="799.50"></text></g><g><title>alloc::slice::hack::to_vec (425 samples, 0.34%)</title><rect x="59.7304%" y="773" width="0.3434%" height="15" fill="rgb(236,68,12)" fg:x="73917" fg:w="425"/><text x="59.9804%" y="783.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (425 samples, 0.34%)</title><rect x="59.7304%" y="757" width="0.3434%" height="15" fill="rgb(225,194,26)" fg:x="73917" fg:w="425"/><text x="59.9804%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (425 samples, 0.34%)</title><rect x="59.7304%" y="741" width="0.3434%" height="15" fill="rgb(231,84,39)" fg:x="73917" fg:w="425"/><text x="59.9804%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (425 samples, 0.34%)</title><rect x="59.7304%" y="725" width="0.3434%" height="15" fill="rgb(210,11,45)" fg:x="73917" fg:w="425"/><text x="59.9804%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (425 samples, 0.34%)</title><rect x="59.7304%" y="709" width="0.3434%" height="15" fill="rgb(224,54,52)" fg:x="73917" fg:w="425"/><text x="59.9804%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (425 samples, 0.34%)</title><rect x="59.7304%" y="693" width="0.3434%" height="15" fill="rgb(238,102,14)" fg:x="73917" fg:w="425"/><text x="59.9804%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (425 samples, 0.34%)</title><rect x="59.7304%" y="677" width="0.3434%" height="15" fill="rgb(243,160,52)" fg:x="73917" fg:w="425"/><text x="59.9804%" y="687.50"></text></g><g><title>alloc::alloc::alloc (425 samples, 0.34%)</title><rect x="59.7304%" y="661" width="0.3434%" height="15" fill="rgb(216,114,19)" fg:x="73917" fg:w="425"/><text x="59.9804%" y="671.50"></text></g><g><title>__rg_alloc (425 samples, 0.34%)</title><rect x="59.7304%" y="645" width="0.3434%" height="15" fill="rgb(244,166,37)" fg:x="73917" fg:w="425"/><text x="59.9804%" y="655.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (425 samples, 0.34%)</title><rect x="59.7304%" y="629" width="0.3434%" height="15" fill="rgb(246,29,44)" fg:x="73917" fg:w="425"/><text x="59.9804%" y="639.50"></text></g><g><title>sn_rust_alloc (425 samples, 0.34%)</title><rect x="59.7304%" y="613" width="0.3434%" height="15" fill="rgb(215,56,53)" fg:x="73917" fg:w="425"/><text x="59.9804%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (39 samples, 0.03%)</title><rect x="60.0739%" y="869" width="0.0315%" height="15" fill="rgb(217,60,2)" fg:x="74342" fg:w="39"/><text x="60.3239%" y="879.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (39 samples, 0.03%)</title><rect x="60.0739%" y="853" width="0.0315%" height="15" fill="rgb(207,26,24)" fg:x="74342" fg:w="39"/><text x="60.3239%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::OutputTarget::send_event::{{closure}}&gt;&gt; (17 samples, 0.01%)</title><rect x="60.1054%" y="869" width="0.0137%" height="15" fill="rgb(252,210,15)" fg:x="74381" fg:w="17"/><text x="60.3554%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::pipeline::OutputTarget::send_event::{{closure}}&gt; (17 samples, 0.01%)</title><rect x="60.1054%" y="853" width="0.0137%" height="15" fill="rgb(253,209,26)" fg:x="74381" fg:w="17"/><text x="60.3554%" y="863.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (209 samples, 0.17%)</title><rect x="60.1377%" y="837" width="0.1689%" height="15" fill="rgb(238,170,14)" fg:x="74421" fg:w="209"/><text x="60.3877%" y="847.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (201 samples, 0.16%)</title><rect x="60.1442%" y="821" width="0.1624%" height="15" fill="rgb(216,178,15)" fg:x="74429" fg:w="201"/><text x="60.3942%" y="831.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (201 samples, 0.16%)</title><rect x="60.1442%" y="805" width="0.1624%" height="15" fill="rgb(250,197,2)" fg:x="74429" fg:w="201"/><text x="60.3942%" y="815.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (201 samples, 0.16%)</title><rect x="60.1442%" y="789" width="0.1624%" height="15" fill="rgb(212,70,42)" fg:x="74429" fg:w="201"/><text x="60.3942%" y="799.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (201 samples, 0.16%)</title><rect x="60.1442%" y="773" width="0.1624%" height="15" fill="rgb(227,213,9)" fg:x="74429" fg:w="201"/><text x="60.3942%" y="783.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (201 samples, 0.16%)</title><rect x="60.1442%" y="757" width="0.1624%" height="15" fill="rgb(245,99,25)" fg:x="74429" fg:w="201"/><text x="60.3942%" y="767.50"></text></g><g><title>[libc-2.31.so] (140 samples, 0.11%)</title><rect x="60.1935%" y="741" width="0.1131%" height="15" fill="rgb(250,82,29)" fg:x="74490" fg:w="140"/><text x="60.4435%" y="751.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (9,804 samples, 7.92%)</title><rect x="52.3955%" y="1093" width="7.9224%" height="15" fill="rgb(241,226,54)" fg:x="64840" fg:w="9804"/><text x="52.6455%" y="1103.50">async_task:..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (9,803 samples, 7.92%)</title><rect x="52.3963%" y="1077" width="7.9216%" height="15" fill="rgb(221,99,41)" fg:x="64841" fg:w="9803"/><text x="52.6463%" y="1087.50">&lt;core::pin:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,803 samples, 7.92%)</title><rect x="52.3963%" y="1061" width="7.9216%" height="15" fill="rgb(213,90,21)" fg:x="64841" fg:w="9803"/><text x="52.6463%" y="1071.50">&lt;core::futu..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (9,803 samples, 7.92%)</title><rect x="52.3963%" y="1045" width="7.9216%" height="15" fill="rgb(205,208,24)" fg:x="64841" fg:w="9803"/><text x="52.6463%" y="1055.50">async_execu..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (9,803 samples, 7.92%)</title><rect x="52.3963%" y="1029" width="7.9216%" height="15" fill="rgb(246,31,12)" fg:x="64841" fg:w="9803"/><text x="52.6463%" y="1039.50">&lt;async_std:..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (9,803 samples, 7.92%)</title><rect x="52.3963%" y="1013" width="7.9216%" height="15" fill="rgb(213,154,6)" fg:x="64841" fg:w="9803"/><text x="52.6463%" y="1023.50">async_std::..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (9,803 samples, 7.92%)</title><rect x="52.3963%" y="997" width="7.9216%" height="15" fill="rgb(222,163,29)" fg:x="64841" fg:w="9803"/><text x="52.6463%" y="1007.50">std::thread..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (9,803 samples, 7.92%)</title><rect x="52.3963%" y="981" width="7.9216%" height="15" fill="rgb(227,201,8)" fg:x="64841" fg:w="9803"/><text x="52.6463%" y="991.50">std::thread..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (9,803 samples, 7.92%)</title><rect x="52.3963%" y="965" width="7.9216%" height="15" fill="rgb(233,9,32)" fg:x="64841" fg:w="9803"/><text x="52.6463%" y="975.50">async_std::..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (9,803 samples, 7.92%)</title><rect x="52.3963%" y="949" width="7.9216%" height="15" fill="rgb(217,54,24)" fg:x="64841" fg:w="9803"/><text x="52.6463%" y="959.50">&lt;async_std:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,803 samples, 7.92%)</title><rect x="52.3963%" y="933" width="7.9216%" height="15" fill="rgb(235,192,0)" fg:x="64841" fg:w="9803"/><text x="52.6463%" y="943.50">&lt;core::futu..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (1,979 samples, 1.60%)</title><rect x="58.7187%" y="917" width="1.5992%" height="15" fill="rgb(235,45,9)" fg:x="72665" fg:w="1979"/><text x="58.9687%" y="927.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (727 samples, 0.59%)</title><rect x="59.7304%" y="901" width="0.5875%" height="15" fill="rgb(246,42,40)" fg:x="73917" fg:w="727"/><text x="59.9804%" y="911.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (727 samples, 0.59%)</title><rect x="59.7304%" y="885" width="0.5875%" height="15" fill="rgb(248,111,24)" fg:x="73917" fg:w="727"/><text x="59.9804%" y="895.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (246 samples, 0.20%)</title><rect x="60.1191%" y="869" width="0.1988%" height="15" fill="rgb(249,65,22)" fg:x="74398" fg:w="246"/><text x="60.3691%" y="879.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get_mut (226 samples, 0.18%)</title><rect x="60.1353%" y="853" width="0.1826%" height="15" fill="rgb(238,111,51)" fg:x="74418" fg:w="226"/><text x="60.3853%" y="863.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.01%)</title><rect x="60.3066%" y="837" width="0.0113%" height="15" fill="rgb(250,118,22)" fg:x="74630" fg:w="14"/><text x="60.5566%" y="847.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (24 samples, 0.02%)</title><rect x="60.3179%" y="1093" width="0.0194%" height="15" fill="rgb(234,84,26)" fg:x="74644" fg:w="24"/><text x="60.5679%" y="1103.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (19 samples, 0.02%)</title><rect x="60.3567%" y="1093" width="0.0154%" height="15" fill="rgb(243,172,12)" fg:x="74692" fg:w="19"/><text x="60.6067%" y="1103.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (27 samples, 0.02%)</title><rect x="60.3720%" y="1093" width="0.0218%" height="15" fill="rgb(236,150,49)" fg:x="74711" fg:w="27"/><text x="60.6220%" y="1103.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (13 samples, 0.01%)</title><rect x="60.3947%" y="1093" width="0.0105%" height="15" fill="rgb(225,197,26)" fg:x="74739" fg:w="13"/><text x="60.6447%" y="1103.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (143 samples, 0.12%)</title><rect x="60.4270%" y="389" width="0.1156%" height="15" fill="rgb(214,17,42)" fg:x="74779" fg:w="143"/><text x="60.6770%" y="399.50"></text></g><g><title>[libc-2.31.so] (214 samples, 0.17%)</title><rect x="60.5425%" y="373" width="0.1729%" height="15" fill="rgb(224,165,40)" fg:x="74922" fg:w="214"/><text x="60.7925%" y="383.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (412 samples, 0.33%)</title><rect x="60.5425%" y="389" width="0.3329%" height="15" fill="rgb(246,100,4)" fg:x="74922" fg:w="412"/><text x="60.7925%" y="399.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (198 samples, 0.16%)</title><rect x="60.7155%" y="373" width="0.1600%" height="15" fill="rgb(222,103,0)" fg:x="75136" fg:w="198"/><text x="60.9655%" y="383.50"></text></g><g><title>[libc-2.31.so] (191 samples, 0.15%)</title><rect x="60.7211%" y="357" width="0.1543%" height="15" fill="rgb(227,189,26)" fg:x="75143" fg:w="191"/><text x="60.9711%" y="367.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (161 samples, 0.13%)</title><rect x="60.8811%" y="357" width="0.1301%" height="15" fill="rgb(214,202,17)" fg:x="75341" fg:w="161"/><text x="61.1311%" y="367.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (158 samples, 0.13%)</title><rect x="60.8835%" y="341" width="0.1277%" height="15" fill="rgb(229,111,3)" fg:x="75344" fg:w="158"/><text x="61.1335%" y="351.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (158 samples, 0.13%)</title><rect x="60.8835%" y="325" width="0.1277%" height="15" fill="rgb(229,172,15)" fg:x="75344" fg:w="158"/><text x="61.1335%" y="335.50"></text></g><g><title>[libc-2.31.so] (148 samples, 0.12%)</title><rect x="60.8916%" y="309" width="0.1196%" height="15" fill="rgb(230,224,35)" fg:x="75354" fg:w="148"/><text x="61.1416%" y="319.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (18 samples, 0.01%)</title><rect x="61.0112%" y="357" width="0.0145%" height="15" fill="rgb(251,141,6)" fg:x="75502" fg:w="18"/><text x="61.2612%" y="367.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (375 samples, 0.30%)</title><rect x="60.8755%" y="389" width="0.3030%" height="15" fill="rgb(225,208,6)" fg:x="75334" fg:w="375"/><text x="61.1255%" y="399.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (375 samples, 0.30%)</title><rect x="60.8755%" y="373" width="0.3030%" height="15" fill="rgb(246,181,16)" fg:x="75334" fg:w="375"/><text x="61.1255%" y="383.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (189 samples, 0.15%)</title><rect x="61.0258%" y="357" width="0.1527%" height="15" fill="rgb(227,129,36)" fg:x="75520" fg:w="189"/><text x="61.2758%" y="367.50"></text></g><g><title>[libc-2.31.so] (187 samples, 0.15%)</title><rect x="61.0274%" y="341" width="0.1511%" height="15" fill="rgb(248,117,24)" fg:x="75522" fg:w="187"/><text x="61.2774%" y="351.50"></text></g><g><title>[libc-2.31.so] (288 samples, 0.23%)</title><rect x="61.1785%" y="389" width="0.2327%" height="15" fill="rgb(214,185,35)" fg:x="75709" fg:w="288"/><text x="61.4285%" y="399.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (124 samples, 0.10%)</title><rect x="61.4112%" y="389" width="0.1002%" height="15" fill="rgb(236,150,34)" fg:x="75997" fg:w="124"/><text x="61.6612%" y="399.50"></text></g><g><title>[libc-2.31.so] (114 samples, 0.09%)</title><rect x="61.4193%" y="373" width="0.0921%" height="15" fill="rgb(243,228,27)" fg:x="76007" fg:w="114"/><text x="61.6693%" y="383.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn (13 samples, 0.01%)</title><rect x="61.5114%" y="341" width="0.0105%" height="15" fill="rgb(245,77,44)" fg:x="76121" fg:w="13"/><text x="61.7614%" y="351.50"></text></g><g><title>async_ffi::DropBomb::with (13 samples, 0.01%)</title><rect x="61.5114%" y="325" width="0.0105%" height="15" fill="rgb(235,214,42)" fg:x="76121" fg:w="13"/><text x="61.7614%" y="335.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn::{{closure}} (13 samples, 0.01%)</title><rect x="61.5114%" y="309" width="0.0105%" height="15" fill="rgb(221,74,3)" fg:x="76121" fg:w="13"/><text x="61.7614%" y="319.50"></text></g><g><title>core::mem::drop (13 samples, 0.01%)</title><rect x="61.5114%" y="293" width="0.0105%" height="15" fill="rgb(206,121,29)" fg:x="76121" fg:w="13"/><text x="61.7614%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}}&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="61.5114%" y="277" width="0.0105%" height="15" fill="rgb(249,131,53)" fg:x="76121" fg:w="13"/><text x="61.7614%" y="287.50"></text></g><g><title>alloc::alloc::box_free (13 samples, 0.01%)</title><rect x="61.5114%" y="261" width="0.0105%" height="15" fill="rgb(236,170,29)" fg:x="76121" fg:w="13"/><text x="61.7614%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.01%)</title><rect x="61.5114%" y="245" width="0.0105%" height="15" fill="rgb(247,96,15)" fg:x="76121" fg:w="13"/><text x="61.7614%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.01%)</title><rect x="61.5114%" y="229" width="0.0105%" height="15" fill="rgb(211,210,7)" fg:x="76121" fg:w="13"/><text x="61.7614%" y="239.50"></text></g><g><title>__rg_dealloc (13 samples, 0.01%)</title><rect x="61.5114%" y="213" width="0.0105%" height="15" fill="rgb(240,88,50)" fg:x="76121" fg:w="13"/><text x="61.7614%" y="223.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (13 samples, 0.01%)</title><rect x="61.5114%" y="197" width="0.0105%" height="15" fill="rgb(209,229,26)" fg:x="76121" fg:w="13"/><text x="61.7614%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (113 samples, 0.09%)</title><rect x="61.5114%" y="389" width="0.0913%" height="15" fill="rgb(210,68,23)" fg:x="76121" fg:w="113"/><text x="61.7614%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (113 samples, 0.09%)</title><rect x="61.5114%" y="373" width="0.0913%" height="15" fill="rgb(229,180,13)" fg:x="76121" fg:w="113"/><text x="61.7614%" y="383.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (113 samples, 0.09%)</title><rect x="61.5114%" y="357" width="0.0913%" height="15" fill="rgb(236,53,44)" fg:x="76121" fg:w="113"/><text x="61.7614%" y="367.50"></text></g><g><title>sn_rust_dealloc (100 samples, 0.08%)</title><rect x="61.5219%" y="341" width="0.0808%" height="15" fill="rgb(244,214,29)" fg:x="76134" fg:w="100"/><text x="61.7719%" y="351.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (1,497 samples, 1.21%)</title><rect x="60.4052%" y="1093" width="1.2097%" height="15" fill="rgb(220,75,29)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="1103.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (1,497 samples, 1.21%)</title><rect x="60.4052%" y="1077" width="1.2097%" height="15" fill="rgb(214,183,37)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="1087.50"></text></g><g><title>std::panic::catch_unwind (1,497 samples, 1.21%)</title><rect x="60.4052%" y="1061" width="1.2097%" height="15" fill="rgb(239,117,29)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="1071.50"></text></g><g><title>std::panicking::try (1,497 samples, 1.21%)</title><rect x="60.4052%" y="1045" width="1.2097%" height="15" fill="rgb(237,171,35)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="1055.50"></text></g><g><title>std::panicking::try::do_call (1,497 samples, 1.21%)</title><rect x="60.4052%" y="1029" width="1.2097%" height="15" fill="rgb(229,178,53)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="1039.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,497 samples, 1.21%)</title><rect x="60.4052%" y="1013" width="1.2097%" height="15" fill="rgb(210,102,19)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="1023.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (1,497 samples, 1.21%)</title><rect x="60.4052%" y="997" width="1.2097%" height="15" fill="rgb(235,127,22)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="1007.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,497 samples, 1.21%)</title><rect x="60.4052%" y="981" width="1.2097%" height="15" fill="rgb(244,31,31)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="991.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1,497 samples, 1.21%)</title><rect x="60.4052%" y="965" width="1.2097%" height="15" fill="rgb(231,43,21)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="975.50"></text></g><g><title>async_global_executor::threading::thread_main_loop (1,497 samples, 1.21%)</title><rect x="60.4052%" y="949" width="1.2097%" height="15" fill="rgb(217,131,35)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="959.50"></text></g><g><title>std::panic::catch_unwind (1,497 samples, 1.21%)</title><rect x="60.4052%" y="933" width="1.2097%" height="15" fill="rgb(221,149,4)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="943.50"></text></g><g><title>std::panicking::try (1,497 samples, 1.21%)</title><rect x="60.4052%" y="917" width="1.2097%" height="15" fill="rgb(232,170,28)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="927.50"></text></g><g><title>std::panicking::try::do_call (1,497 samples, 1.21%)</title><rect x="60.4052%" y="901" width="1.2097%" height="15" fill="rgb(238,56,10)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="911.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (1,497 samples, 1.21%)</title><rect x="60.4052%" y="885" width="1.2097%" height="15" fill="rgb(235,196,14)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="895.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,497 samples, 1.21%)</title><rect x="60.4052%" y="869" width="1.2097%" height="15" fill="rgb(216,45,48)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="879.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,497 samples, 1.21%)</title><rect x="60.4052%" y="853" width="1.2097%" height="15" fill="rgb(238,213,17)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="863.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (1,497 samples, 1.21%)</title><rect x="60.4052%" y="837" width="1.2097%" height="15" fill="rgb(212,13,2)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="847.50"></text></g><g><title>async_global_executor::reactor::block_on (1,497 samples, 1.21%)</title><rect x="60.4052%" y="821" width="1.2097%" height="15" fill="rgb(240,114,20)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="831.50"></text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (1,497 samples, 1.21%)</title><rect x="60.4052%" y="805" width="1.2097%" height="15" fill="rgb(228,41,40)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="815.50"></text></g><g><title>async_io::driver::block_on (1,497 samples, 1.21%)</title><rect x="60.4052%" y="789" width="1.2097%" height="15" fill="rgb(244,132,35)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="799.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,497 samples, 1.21%)</title><rect x="60.4052%" y="773" width="1.2097%" height="15" fill="rgb(253,189,4)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="783.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,497 samples, 1.21%)</title><rect x="60.4052%" y="757" width="1.2097%" height="15" fill="rgb(224,37,19)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="767.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (1,497 samples, 1.21%)</title><rect x="60.4052%" y="741" width="1.2097%" height="15" fill="rgb(235,223,18)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="751.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,497 samples, 1.21%)</title><rect x="60.4052%" y="725" width="1.2097%" height="15" fill="rgb(235,163,25)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="735.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,497 samples, 1.21%)</title><rect x="60.4052%" y="709" width="1.2097%" height="15" fill="rgb(217,145,28)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="719.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (1,497 samples, 1.21%)</title><rect x="60.4052%" y="693" width="1.2097%" height="15" fill="rgb(223,223,32)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="703.50"></text></g><g><title>async_task::runnable::Runnable::run (1,497 samples, 1.21%)</title><rect x="60.4052%" y="677" width="1.2097%" height="15" fill="rgb(227,189,39)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="687.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (1,497 samples, 1.21%)</title><rect x="60.4052%" y="661" width="1.2097%" height="15" fill="rgb(248,10,22)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="671.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,497 samples, 1.21%)</title><rect x="60.4052%" y="645" width="1.2097%" height="15" fill="rgb(248,46,39)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="655.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,497 samples, 1.21%)</title><rect x="60.4052%" y="629" width="1.2097%" height="15" fill="rgb(248,113,48)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="639.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (1,497 samples, 1.21%)</title><rect x="60.4052%" y="613" width="1.2097%" height="15" fill="rgb(245,16,25)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="623.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (1,497 samples, 1.21%)</title><rect x="60.4052%" y="597" width="1.2097%" height="15" fill="rgb(249,152,16)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="607.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (1,497 samples, 1.21%)</title><rect x="60.4052%" y="581" width="1.2097%" height="15" fill="rgb(250,16,1)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="591.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,497 samples, 1.21%)</title><rect x="60.4052%" y="565" width="1.2097%" height="15" fill="rgb(249,138,3)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="575.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,497 samples, 1.21%)</title><rect x="60.4052%" y="549" width="1.2097%" height="15" fill="rgb(227,71,41)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="559.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (1,497 samples, 1.21%)</title><rect x="60.4052%" y="533" width="1.2097%" height="15" fill="rgb(209,184,23)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="543.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,497 samples, 1.21%)</title><rect x="60.4052%" y="517" width="1.2097%" height="15" fill="rgb(223,215,31)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="527.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,497 samples, 1.21%)</title><rect x="60.4052%" y="501" width="1.2097%" height="15" fill="rgb(210,146,28)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="511.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (1,497 samples, 1.21%)</title><rect x="60.4052%" y="485" width="1.2097%" height="15" fill="rgb(209,183,41)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="495.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1,497 samples, 1.21%)</title><rect x="60.4052%" y="469" width="1.2097%" height="15" fill="rgb(209,224,45)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="479.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (1,497 samples, 1.21%)</title><rect x="60.4052%" y="453" width="1.2097%" height="15" fill="rgb(224,209,51)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="463.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,497 samples, 1.21%)</title><rect x="60.4052%" y="437" width="1.2097%" height="15" fill="rgb(223,17,39)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="447.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,497 samples, 1.21%)</title><rect x="60.4052%" y="421" width="1.2097%" height="15" fill="rgb(234,204,37)" fg:x="74752" fg:w="1497"/><text x="60.6552%" y="431.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (1,486 samples, 1.20%)</title><rect x="60.4141%" y="405" width="1.2008%" height="15" fill="rgb(236,120,5)" fg:x="74763" fg:w="1486"/><text x="60.6641%" y="415.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_TO&lt;_ErasedPtr&gt;::pull_data (15 samples, 0.01%)</title><rect x="61.6027%" y="389" width="0.0121%" height="15" fill="rgb(248,97,27)" fg:x="76234" fg:w="15"/><text x="61.8527%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt;&gt; (18 samples, 0.01%)</title><rect x="61.6149%" y="1093" width="0.0145%" height="15" fill="rgb(240,66,17)" fg:x="76249" fg:w="18"/><text x="61.8649%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt; (18 samples, 0.01%)</title><rect x="61.6149%" y="1077" width="0.0145%" height="15" fill="rgb(210,79,3)" fg:x="76249" fg:w="18"/><text x="61.8649%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt;&gt; (24 samples, 0.02%)</title><rect x="61.6383%" y="1093" width="0.0194%" height="15" fill="rgb(214,176,27)" fg:x="76278" fg:w="24"/><text x="61.8883%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::send_events::{{closure}}&gt;&gt; (24 samples, 0.02%)</title><rect x="61.6577%" y="1093" width="0.0194%" height="15" fill="rgb(235,185,3)" fg:x="76302" fg:w="24"/><text x="61.9077%" y="1103.50"></text></g><g><title>event_listener::Event::notify (81 samples, 0.07%)</title><rect x="61.6957%" y="1093" width="0.0655%" height="15" fill="rgb(227,24,12)" fg:x="76349" fg:w="81"/><text x="61.9457%" y="1103.50"></text></g><g><title>event_listener::full_fence (35 samples, 0.03%)</title><rect x="61.7328%" y="1077" width="0.0283%" height="15" fill="rgb(252,169,48)" fg:x="76395" fg:w="35"/><text x="61.9828%" y="1087.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (20 samples, 0.02%)</title><rect x="61.7635%" y="1093" width="0.0162%" height="15" fill="rgb(212,65,1)" fg:x="76433" fg:w="20"/><text x="62.0135%" y="1103.50"></text></g><g><title>parking::Inner::park (22 samples, 0.02%)</title><rect x="61.7797%" y="1093" width="0.0178%" height="15" fill="rgb(242,39,24)" fg:x="76453" fg:w="22"/><text x="62.0297%" y="1103.50"></text></g><g><title>polling::epoll::Poller::wait (40 samples, 0.03%)</title><rect x="61.8023%" y="1093" width="0.0323%" height="15" fill="rgb(249,32,23)" fg:x="76481" fg:w="40"/><text x="62.0523%" y="1103.50"></text></g><g><title>sn_rust_alloc (100 samples, 0.08%)</title><rect x="61.8347%" y="1093" width="0.0808%" height="15" fill="rgb(251,195,23)" fg:x="76521" fg:w="100"/><text x="62.0847%" y="1103.50"></text></g><g><title>std::sys::unix::futex::futex_wait (25 samples, 0.02%)</title><rect x="61.9276%" y="1093" width="0.0202%" height="15" fill="rgb(236,174,8)" fg:x="76636" fg:w="25"/><text x="62.1776%" y="1103.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (66 samples, 0.05%)</title><rect x="61.9478%" y="1093" width="0.0533%" height="15" fill="rgb(220,197,8)" fg:x="76661" fg:w="66"/><text x="62.1978%" y="1103.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (156 samples, 0.13%)</title><rect x="62.0666%" y="661" width="0.1261%" height="15" fill="rgb(240,108,37)" fg:x="76808" fg:w="156"/><text x="62.3166%" y="671.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (226 samples, 0.18%)</title><rect x="62.0116%" y="821" width="0.1826%" height="15" fill="rgb(232,176,24)" fg:x="76740" fg:w="226"/><text x="62.2616%" y="831.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (226 samples, 0.18%)</title><rect x="62.0116%" y="805" width="0.1826%" height="15" fill="rgb(243,35,29)" fg:x="76740" fg:w="226"/><text x="62.2616%" y="815.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (213 samples, 0.17%)</title><rect x="62.0221%" y="789" width="0.1721%" height="15" fill="rgb(210,37,18)" fg:x="76753" fg:w="213"/><text x="62.2721%" y="799.50"></text></g><g><title>alloc::alloc::exchange_malloc (208 samples, 0.17%)</title><rect x="62.0262%" y="773" width="0.1681%" height="15" fill="rgb(224,184,40)" fg:x="76758" fg:w="208"/><text x="62.2762%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (208 samples, 0.17%)</title><rect x="62.0262%" y="757" width="0.1681%" height="15" fill="rgb(236,39,29)" fg:x="76758" fg:w="208"/><text x="62.2762%" y="767.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (208 samples, 0.17%)</title><rect x="62.0262%" y="741" width="0.1681%" height="15" fill="rgb(232,48,39)" fg:x="76758" fg:w="208"/><text x="62.2762%" y="751.50"></text></g><g><title>alloc::alloc::alloc (201 samples, 0.16%)</title><rect x="62.0318%" y="725" width="0.1624%" height="15" fill="rgb(236,34,42)" fg:x="76765" fg:w="201"/><text x="62.2818%" y="735.50"></text></g><g><title>__rg_alloc (201 samples, 0.16%)</title><rect x="62.0318%" y="709" width="0.1624%" height="15" fill="rgb(243,106,37)" fg:x="76765" fg:w="201"/><text x="62.2818%" y="719.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (201 samples, 0.16%)</title><rect x="62.0318%" y="693" width="0.1624%" height="15" fill="rgb(218,96,6)" fg:x="76765" fg:w="201"/><text x="62.2818%" y="703.50"></text></g><g><title>sn_rust_alloc (201 samples, 0.16%)</title><rect x="62.0318%" y="677" width="0.1624%" height="15" fill="rgb(235,130,12)" fg:x="76765" fg:w="201"/><text x="62.2818%" y="687.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::default::Default&gt;::default (237 samples, 0.19%)</title><rect x="62.0052%" y="885" width="0.1915%" height="15" fill="rgb(231,95,0)" fg:x="76732" fg:w="237"/><text x="62.2552%" y="895.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (237 samples, 0.19%)</title><rect x="62.0052%" y="869" width="0.1915%" height="15" fill="rgb(228,12,23)" fg:x="76732" fg:w="237"/><text x="62.2552%" y="879.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (237 samples, 0.19%)</title><rect x="62.0052%" y="853" width="0.1915%" height="15" fill="rgb(216,12,1)" fg:x="76732" fg:w="237"/><text x="62.2552%" y="863.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (237 samples, 0.19%)</title><rect x="62.0052%" y="837" width="0.1915%" height="15" fill="rgb(219,59,3)" fg:x="76732" fg:w="237"/><text x="62.2552%" y="847.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (609 samples, 0.49%)</title><rect x="62.8205%" y="597" width="0.4921%" height="15" fill="rgb(215,208,46)" fg:x="77741" fg:w="609"/><text x="63.0705%" y="607.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (1,262 samples, 1.02%)</title><rect x="62.2961%" y="757" width="1.0198%" height="15" fill="rgb(254,224,29)" fg:x="77092" fg:w="1262"/><text x="62.5461%" y="767.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (1,262 samples, 1.02%)</title><rect x="62.2961%" y="741" width="1.0198%" height="15" fill="rgb(232,14,29)" fg:x="77092" fg:w="1262"/><text x="62.5461%" y="751.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (703 samples, 0.57%)</title><rect x="62.7478%" y="725" width="0.5681%" height="15" fill="rgb(208,45,52)" fg:x="77651" fg:w="703"/><text x="62.9978%" y="735.50"></text></g><g><title>alloc::alloc::exchange_malloc (678 samples, 0.55%)</title><rect x="62.7680%" y="709" width="0.5479%" height="15" fill="rgb(234,191,28)" fg:x="77676" fg:w="678"/><text x="63.0180%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (678 samples, 0.55%)</title><rect x="62.7680%" y="693" width="0.5479%" height="15" fill="rgb(244,67,43)" fg:x="77676" fg:w="678"/><text x="63.0180%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (678 samples, 0.55%)</title><rect x="62.7680%" y="677" width="0.5479%" height="15" fill="rgb(236,189,24)" fg:x="77676" fg:w="678"/><text x="63.0180%" y="687.50"></text></g><g><title>alloc::alloc::alloc (677 samples, 0.55%)</title><rect x="62.7688%" y="661" width="0.5471%" height="15" fill="rgb(239,214,33)" fg:x="77677" fg:w="677"/><text x="63.0188%" y="671.50"></text></g><g><title>__rg_alloc (677 samples, 0.55%)</title><rect x="62.7688%" y="645" width="0.5471%" height="15" fill="rgb(226,176,41)" fg:x="77677" fg:w="677"/><text x="63.0188%" y="655.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (677 samples, 0.55%)</title><rect x="62.7688%" y="629" width="0.5471%" height="15" fill="rgb(248,47,8)" fg:x="77677" fg:w="677"/><text x="63.0188%" y="639.50"></text></g><g><title>sn_rust_alloc (665 samples, 0.54%)</title><rect x="62.7785%" y="613" width="0.5374%" height="15" fill="rgb(218,81,44)" fg:x="77689" fg:w="665"/><text x="63.0285%" y="623.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (1,324 samples, 1.07%)</title><rect x="62.2694%" y="805" width="1.0699%" height="15" fill="rgb(213,98,6)" fg:x="77059" fg:w="1324"/><text x="62.5194%" y="815.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (1,322 samples, 1.07%)</title><rect x="62.2710%" y="789" width="1.0683%" height="15" fill="rgb(222,85,22)" fg:x="77061" fg:w="1322"/><text x="62.5210%" y="799.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (1,322 samples, 1.07%)</title><rect x="62.2710%" y="773" width="1.0683%" height="15" fill="rgb(239,46,39)" fg:x="77061" fg:w="1322"/><text x="62.5210%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (29 samples, 0.02%)</title><rect x="63.3159%" y="757" width="0.0234%" height="15" fill="rgb(237,12,29)" fg:x="78354" fg:w="29"/><text x="63.5659%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (29 samples, 0.02%)</title><rect x="63.3159%" y="741" width="0.0234%" height="15" fill="rgb(214,77,8)" fg:x="78354" fg:w="29"/><text x="63.5659%" y="751.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (28 samples, 0.02%)</title><rect x="63.3167%" y="725" width="0.0226%" height="15" fill="rgb(217,168,37)" fg:x="78355" fg:w="28"/><text x="63.5667%" y="735.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (28 samples, 0.02%)</title><rect x="63.3167%" y="709" width="0.0226%" height="15" fill="rgb(221,217,23)" fg:x="78355" fg:w="28"/><text x="63.5667%" y="719.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (28 samples, 0.02%)</title><rect x="63.3167%" y="693" width="0.0226%" height="15" fill="rgb(243,229,36)" fg:x="78355" fg:w="28"/><text x="63.5667%" y="703.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (1,381 samples, 1.12%)</title><rect x="62.2694%" y="821" width="1.1160%" height="15" fill="rgb(251,163,40)" fg:x="77059" fg:w="1381"/><text x="62.5194%" y="831.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (57 samples, 0.05%)</title><rect x="63.3393%" y="805" width="0.0461%" height="15" fill="rgb(237,222,12)" fg:x="78383" fg:w="57"/><text x="63.5893%" y="815.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (41 samples, 0.03%)</title><rect x="63.3522%" y="789" width="0.0331%" height="15" fill="rgb(248,132,6)" fg:x="78399" fg:w="41"/><text x="63.6022%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (29 samples, 0.02%)</title><rect x="63.3619%" y="773" width="0.0234%" height="15" fill="rgb(227,167,50)" fg:x="78411" fg:w="29"/><text x="63.6119%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (27 samples, 0.02%)</title><rect x="63.3635%" y="757" width="0.0218%" height="15" fill="rgb(242,84,37)" fg:x="78413" fg:w="27"/><text x="63.6135%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (27 samples, 0.02%)</title><rect x="63.3635%" y="741" width="0.0218%" height="15" fill="rgb(212,4,50)" fg:x="78413" fg:w="27"/><text x="63.6135%" y="751.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (27 samples, 0.02%)</title><rect x="63.3635%" y="725" width="0.0218%" height="15" fill="rgb(230,228,32)" fg:x="78413" fg:w="27"/><text x="63.6135%" y="735.50"></text></g><g><title>&lt;tremor_pipeline::event::Event as core::default::Default&gt;::default (2,027 samples, 1.64%)</title><rect x="62.0052%" y="901" width="1.6380%" height="15" fill="rgb(248,217,23)" fg:x="76732" fg:w="2027"/><text x="62.2552%" y="911.50"></text></g><g><title>&lt;tremor_script::srs::EventPayload as core::default::Default&gt;::default (1,790 samples, 1.45%)</title><rect x="62.1967%" y="885" width="1.4465%" height="15" fill="rgb(238,197,32)" fg:x="76969" fg:w="1790"/><text x="62.4467%" y="895.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (1,790 samples, 1.45%)</title><rect x="62.1967%" y="869" width="1.4465%" height="15" fill="rgb(236,106,1)" fg:x="76969" fg:w="1790"/><text x="62.4467%" y="879.50"></text></g><g><title>value_trait::Builder::object (1,700 samples, 1.37%)</title><rect x="62.2694%" y="853" width="1.3737%" height="15" fill="rgb(219,228,13)" fg:x="77059" fg:w="1700"/><text x="62.5194%" y="863.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (1,700 samples, 1.37%)</title><rect x="62.2694%" y="837" width="1.3737%" height="15" fill="rgb(238,30,35)" fg:x="77059" fg:w="1700"/><text x="62.5194%" y="847.50"></text></g><g><title>tremor_value::value::Value::Object (319 samples, 0.26%)</title><rect x="63.3853%" y="821" width="0.2578%" height="15" fill="rgb(236,70,23)" fg:x="78440" fg:w="319"/><text x="63.6353%" y="831.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (19 samples, 0.02%)</title><rect x="63.6431%" y="885" width="0.0154%" height="15" fill="rgb(249,104,48)" fg:x="78759" fg:w="19"/><text x="63.8931%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (28 samples, 0.02%)</title><rect x="63.6585%" y="885" width="0.0226%" height="15" fill="rgb(254,117,50)" fg:x="78778" fg:w="28"/><text x="63.9085%" y="895.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (28 samples, 0.02%)</title><rect x="63.6585%" y="869" width="0.0226%" height="15" fill="rgb(223,152,4)" fg:x="78778" fg:w="28"/><text x="63.9085%" y="879.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (28 samples, 0.02%)</title><rect x="63.6585%" y="853" width="0.0226%" height="15" fill="rgb(245,6,2)" fg:x="78778" fg:w="28"/><text x="63.9085%" y="863.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (27 samples, 0.02%)</title><rect x="63.6593%" y="837" width="0.0218%" height="15" fill="rgb(249,150,24)" fg:x="78779" fg:w="27"/><text x="63.9093%" y="847.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (24 samples, 0.02%)</title><rect x="63.7255%" y="805" width="0.0194%" height="15" fill="rgb(228,185,42)" fg:x="78861" fg:w="24"/><text x="63.9755%" y="815.50"></text></g><g><title>sn_rust_dealloc (75 samples, 0.06%)</title><rect x="63.7449%" y="805" width="0.0606%" height="15" fill="rgb(226,39,33)" fg:x="78885" fg:w="75"/><text x="63.9949%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (155 samples, 0.13%)</title><rect x="63.6811%" y="885" width="0.1253%" height="15" fill="rgb(221,166,19)" fg:x="78806" fg:w="155"/><text x="63.9311%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (155 samples, 0.13%)</title><rect x="63.6811%" y="869" width="0.1253%" height="15" fill="rgb(209,109,2)" fg:x="78806" fg:w="155"/><text x="63.9311%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (109 samples, 0.09%)</title><rect x="63.7183%" y="853" width="0.0881%" height="15" fill="rgb(252,216,26)" fg:x="78852" fg:w="109"/><text x="63.9683%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (109 samples, 0.09%)</title><rect x="63.7183%" y="837" width="0.0881%" height="15" fill="rgb(227,173,36)" fg:x="78852" fg:w="109"/><text x="63.9683%" y="847.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (109 samples, 0.09%)</title><rect x="63.7183%" y="821" width="0.0881%" height="15" fill="rgb(209,90,7)" fg:x="78852" fg:w="109"/><text x="63.9683%" y="831.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (2,233 samples, 1.80%)</title><rect x="62.0052%" y="917" width="1.8044%" height="15" fill="rgb(250,194,11)" fg:x="76732" fg:w="2233"/><text x="62.2552%" y="927.50">t..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (206 samples, 0.17%)</title><rect x="63.6431%" y="901" width="0.1665%" height="15" fill="rgb(220,72,50)" fg:x="78759" fg:w="206"/><text x="63.8931%" y="911.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (31 samples, 0.03%)</title><rect x="63.8096%" y="917" width="0.0251%" height="15" fill="rgb(222,106,48)" fg:x="78965" fg:w="31"/><text x="64.0596%" y="927.50"></text></g><g><title>alloc::alloc::exchange_malloc (31 samples, 0.03%)</title><rect x="63.8096%" y="901" width="0.0251%" height="15" fill="rgb(216,220,45)" fg:x="78965" fg:w="31"/><text x="64.0596%" y="911.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (31 samples, 0.03%)</title><rect x="63.8096%" y="885" width="0.0251%" height="15" fill="rgb(234,112,18)" fg:x="78965" fg:w="31"/><text x="64.0596%" y="895.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (31 samples, 0.03%)</title><rect x="63.8096%" y="869" width="0.0251%" height="15" fill="rgb(206,179,9)" fg:x="78965" fg:w="31"/><text x="64.0596%" y="879.50"></text></g><g><title>alloc::alloc::alloc (31 samples, 0.03%)</title><rect x="63.8096%" y="853" width="0.0251%" height="15" fill="rgb(215,115,40)" fg:x="78965" fg:w="31"/><text x="64.0596%" y="863.50"></text></g><g><title>__rg_alloc (31 samples, 0.03%)</title><rect x="63.8096%" y="837" width="0.0251%" height="15" fill="rgb(222,69,34)" fg:x="78965" fg:w="31"/><text x="64.0596%" y="847.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (31 samples, 0.03%)</title><rect x="63.8096%" y="821" width="0.0251%" height="15" fill="rgb(209,161,10)" fg:x="78965" fg:w="31"/><text x="64.0596%" y="831.50"></text></g><g><title>sn_rust_alloc (31 samples, 0.03%)</title><rect x="63.8096%" y="805" width="0.0251%" height="15" fill="rgb(217,6,38)" fg:x="78965" fg:w="31"/><text x="64.0596%" y="815.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (31 samples, 0.03%)</title><rect x="63.8096%" y="789" width="0.0251%" height="15" fill="rgb(229,229,48)" fg:x="78965" fg:w="31"/><text x="64.0596%" y="799.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (106 samples, 0.09%)</title><rect x="64.0682%" y="901" width="0.0857%" height="15" fill="rgb(225,21,28)" fg:x="79285" fg:w="106"/><text x="64.3182%" y="911.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::new (114 samples, 0.09%)</title><rect x="64.1538%" y="901" width="0.0921%" height="15" fill="rgb(206,33,13)" fg:x="79391" fg:w="114"/><text x="64.4038%" y="911.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (113 samples, 0.09%)</title><rect x="64.1546%" y="885" width="0.0913%" height="15" fill="rgb(242,178,17)" fg:x="79392" fg:w="113"/><text x="64.4046%" y="895.50"></text></g><g><title>alloc::alloc::exchange_malloc (104 samples, 0.08%)</title><rect x="64.1619%" y="869" width="0.0840%" height="15" fill="rgb(220,162,5)" fg:x="79401" fg:w="104"/><text x="64.4119%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (104 samples, 0.08%)</title><rect x="64.1619%" y="853" width="0.0840%" height="15" fill="rgb(210,33,43)" fg:x="79401" fg:w="104"/><text x="64.4119%" y="863.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (104 samples, 0.08%)</title><rect x="64.1619%" y="837" width="0.0840%" height="15" fill="rgb(216,116,54)" fg:x="79401" fg:w="104"/><text x="64.4119%" y="847.50"></text></g><g><title>alloc::alloc::alloc (100 samples, 0.08%)</title><rect x="64.1651%" y="821" width="0.0808%" height="15" fill="rgb(249,92,24)" fg:x="79405" fg:w="100"/><text x="64.4151%" y="831.50"></text></g><g><title>__rg_alloc (100 samples, 0.08%)</title><rect x="64.1651%" y="805" width="0.0808%" height="15" fill="rgb(231,189,14)" fg:x="79405" fg:w="100"/><text x="64.4151%" y="815.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (100 samples, 0.08%)</title><rect x="64.1651%" y="789" width="0.0808%" height="15" fill="rgb(230,8,41)" fg:x="79405" fg:w="100"/><text x="64.4151%" y="799.50"></text></g><g><title>sn_rust_alloc (89 samples, 0.07%)</title><rect x="64.1740%" y="773" width="0.0719%" height="15" fill="rgb(249,7,27)" fg:x="79416" fg:w="89"/><text x="64.4240%" y="783.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (47 samples, 0.04%)</title><rect x="64.2080%" y="757" width="0.0380%" height="15" fill="rgb(232,86,5)" fg:x="79458" fg:w="47"/><text x="64.4580%" y="767.50"></text></g><g><title>alloc::alloc::exchange_malloc (61 samples, 0.05%)</title><rect x="64.2459%" y="901" width="0.0493%" height="15" fill="rgb(224,175,18)" fg:x="79505" fg:w="61"/><text x="64.4959%" y="911.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (61 samples, 0.05%)</title><rect x="64.2459%" y="885" width="0.0493%" height="15" fill="rgb(220,129,12)" fg:x="79505" fg:w="61"/><text x="64.4959%" y="895.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (61 samples, 0.05%)</title><rect x="64.2459%" y="869" width="0.0493%" height="15" fill="rgb(210,19,36)" fg:x="79505" fg:w="61"/><text x="64.4959%" y="879.50"></text></g><g><title>alloc::alloc::alloc (51 samples, 0.04%)</title><rect x="64.2540%" y="853" width="0.0412%" height="15" fill="rgb(219,96,14)" fg:x="79515" fg:w="51"/><text x="64.5040%" y="863.50"></text></g><g><title>__rg_alloc (51 samples, 0.04%)</title><rect x="64.2540%" y="837" width="0.0412%" height="15" fill="rgb(249,106,1)" fg:x="79515" fg:w="51"/><text x="64.5040%" y="847.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (51 samples, 0.04%)</title><rect x="64.2540%" y="821" width="0.0412%" height="15" fill="rgb(249,155,20)" fg:x="79515" fg:w="51"/><text x="64.5040%" y="831.50"></text></g><g><title>sn_rust_alloc (33 samples, 0.03%)</title><rect x="64.2686%" y="805" width="0.0267%" height="15" fill="rgb(244,168,9)" fg:x="79533" fg:w="33"/><text x="64.5186%" y="815.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (45 samples, 0.04%)</title><rect x="64.7680%" y="613" width="0.0364%" height="15" fill="rgb(216,23,50)" fg:x="80151" fg:w="45"/><text x="65.0180%" y="623.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (110 samples, 0.09%)</title><rect x="64.7179%" y="773" width="0.0889%" height="15" fill="rgb(224,219,20)" fg:x="80089" fg:w="110"/><text x="64.9679%" y="783.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (101 samples, 0.08%)</title><rect x="64.7251%" y="757" width="0.0816%" height="15" fill="rgb(222,156,15)" fg:x="80098" fg:w="101"/><text x="64.9751%" y="767.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (101 samples, 0.08%)</title><rect x="64.7251%" y="741" width="0.0816%" height="15" fill="rgb(231,97,17)" fg:x="80098" fg:w="101"/><text x="64.9751%" y="751.50"></text></g><g><title>alloc::alloc::exchange_malloc (89 samples, 0.07%)</title><rect x="64.7348%" y="725" width="0.0719%" height="15" fill="rgb(218,70,48)" fg:x="80110" fg:w="89"/><text x="64.9848%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (89 samples, 0.07%)</title><rect x="64.7348%" y="709" width="0.0719%" height="15" fill="rgb(212,196,52)" fg:x="80110" fg:w="89"/><text x="64.9848%" y="719.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (89 samples, 0.07%)</title><rect x="64.7348%" y="693" width="0.0719%" height="15" fill="rgb(243,203,18)" fg:x="80110" fg:w="89"/><text x="64.9848%" y="703.50"></text></g><g><title>alloc::alloc::alloc (80 samples, 0.06%)</title><rect x="64.7421%" y="677" width="0.0646%" height="15" fill="rgb(252,125,41)" fg:x="80119" fg:w="80"/><text x="64.9921%" y="687.50"></text></g><g><title>__rg_alloc (80 samples, 0.06%)</title><rect x="64.7421%" y="661" width="0.0646%" height="15" fill="rgb(223,180,33)" fg:x="80119" fg:w="80"/><text x="64.9921%" y="671.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (80 samples, 0.06%)</title><rect x="64.7421%" y="645" width="0.0646%" height="15" fill="rgb(254,159,46)" fg:x="80119" fg:w="80"/><text x="64.9921%" y="655.50"></text></g><g><title>sn_rust_alloc (80 samples, 0.06%)</title><rect x="64.7421%" y="629" width="0.0646%" height="15" fill="rgb(254,38,10)" fg:x="80119" fg:w="80"/><text x="64.9921%" y="639.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (150 samples, 0.12%)</title><rect x="64.7065%" y="853" width="0.1212%" height="15" fill="rgb(208,217,32)" fg:x="80075" fg:w="150"/><text x="64.9565%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (136 samples, 0.11%)</title><rect x="64.7179%" y="837" width="0.1099%" height="15" fill="rgb(221,120,13)" fg:x="80089" fg:w="136"/><text x="64.9679%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (136 samples, 0.11%)</title><rect x="64.7179%" y="821" width="0.1099%" height="15" fill="rgb(246,54,52)" fg:x="80089" fg:w="136"/><text x="64.9679%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (136 samples, 0.11%)</title><rect x="64.7179%" y="805" width="0.1099%" height="15" fill="rgb(242,34,25)" fg:x="80089" fg:w="136"/><text x="64.9679%" y="815.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (136 samples, 0.11%)</title><rect x="64.7179%" y="789" width="0.1099%" height="15" fill="rgb(247,209,9)" fg:x="80089" fg:w="136"/><text x="64.9679%" y="799.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::iter (26 samples, 0.02%)</title><rect x="64.8067%" y="773" width="0.0210%" height="15" fill="rgb(228,71,26)" fg:x="80199" fg:w="26"/><text x="65.0567%" y="783.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (15 samples, 0.01%)</title><rect x="64.8156%" y="757" width="0.0121%" height="15" fill="rgb(222,145,49)" fg:x="80210" fg:w="15"/><text x="65.0656%" y="767.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (15 samples, 0.01%)</title><rect x="64.8156%" y="741" width="0.0121%" height="15" fill="rgb(218,121,17)" fg:x="80210" fg:w="15"/><text x="65.0656%" y="751.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (283 samples, 0.23%)</title><rect x="65.0815%" y="613" width="0.2287%" height="15" fill="rgb(244,50,7)" fg:x="80539" fg:w="283"/><text x="65.3315%" y="623.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (361 samples, 0.29%)</title><rect x="65.0209%" y="773" width="0.2917%" height="15" fill="rgb(246,229,37)" fg:x="80464" fg:w="361"/><text x="65.2709%" y="783.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (361 samples, 0.29%)</title><rect x="65.0209%" y="757" width="0.2917%" height="15" fill="rgb(225,18,5)" fg:x="80464" fg:w="361"/><text x="65.2709%" y="767.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (342 samples, 0.28%)</title><rect x="65.0362%" y="741" width="0.2764%" height="15" fill="rgb(213,204,8)" fg:x="80483" fg:w="342"/><text x="65.2862%" y="751.50"></text></g><g><title>alloc::alloc::exchange_malloc (326 samples, 0.26%)</title><rect x="65.0492%" y="725" width="0.2634%" height="15" fill="rgb(238,103,6)" fg:x="80499" fg:w="326"/><text x="65.2992%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (326 samples, 0.26%)</title><rect x="65.0492%" y="709" width="0.2634%" height="15" fill="rgb(222,25,35)" fg:x="80499" fg:w="326"/><text x="65.2992%" y="719.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (326 samples, 0.26%)</title><rect x="65.0492%" y="693" width="0.2634%" height="15" fill="rgb(213,203,35)" fg:x="80499" fg:w="326"/><text x="65.2992%" y="703.50"></text></g><g><title>alloc::alloc::alloc (326 samples, 0.26%)</title><rect x="65.0492%" y="677" width="0.2634%" height="15" fill="rgb(221,79,53)" fg:x="80499" fg:w="326"/><text x="65.2992%" y="687.50"></text></g><g><title>__rg_alloc (326 samples, 0.26%)</title><rect x="65.0492%" y="661" width="0.2634%" height="15" fill="rgb(243,200,35)" fg:x="80499" fg:w="326"/><text x="65.2992%" y="671.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (326 samples, 0.26%)</title><rect x="65.0492%" y="645" width="0.2634%" height="15" fill="rgb(248,60,25)" fg:x="80499" fg:w="326"/><text x="65.2992%" y="655.50"></text></g><g><title>sn_rust_alloc (319 samples, 0.26%)</title><rect x="65.0548%" y="629" width="0.2578%" height="15" fill="rgb(227,53,46)" fg:x="80506" fg:w="319"/><text x="65.3048%" y="639.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (389 samples, 0.31%)</title><rect x="65.0063%" y="821" width="0.3143%" height="15" fill="rgb(216,120,32)" fg:x="80446" fg:w="389"/><text x="65.2563%" y="831.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (388 samples, 0.31%)</title><rect x="65.0072%" y="805" width="0.3135%" height="15" fill="rgb(220,134,1)" fg:x="80447" fg:w="388"/><text x="65.2572%" y="815.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (388 samples, 0.31%)</title><rect x="65.0072%" y="789" width="0.3135%" height="15" fill="rgb(237,168,5)" fg:x="80447" fg:w="388"/><text x="65.2572%" y="799.50"></text></g><g><title>abi_stable::erased_types::iterator::next (16 samples, 0.01%)</title><rect x="65.3393%" y="773" width="0.0129%" height="15" fill="rgb(231,100,33)" fg:x="80858" fg:w="16"/><text x="65.5893%" y="783.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (15 samples, 0.01%)</title><rect x="65.3401%" y="757" width="0.0121%" height="15" fill="rgb(236,177,47)" fg:x="80859" fg:w="15"/><text x="65.5901%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="65.3401%" y="741" width="0.0121%" height="15" fill="rgb(235,7,49)" fg:x="80859" fg:w="15"/><text x="65.5901%" y="751.50"></text></g><g><title>&lt;halfbrown::iter::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="65.3401%" y="725" width="0.0121%" height="15" fill="rgb(232,119,22)" fg:x="80859" fg:w="15"/><text x="65.5901%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.02%)</title><rect x="65.3368%" y="805" width="0.0234%" height="15" fill="rgb(254,73,53)" fg:x="80855" fg:w="29"/><text x="65.5868%" y="815.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (29 samples, 0.02%)</title><rect x="65.3368%" y="789" width="0.0234%" height="15" fill="rgb(251,35,20)" fg:x="80855" fg:w="29"/><text x="65.5868%" y="799.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (38 samples, 0.03%)</title><rect x="65.3603%" y="805" width="0.0307%" height="15" fill="rgb(241,119,20)" fg:x="80884" fg:w="38"/><text x="65.6103%" y="815.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (38 samples, 0.03%)</title><rect x="65.3603%" y="789" width="0.0307%" height="15" fill="rgb(207,102,14)" fg:x="80884" fg:w="38"/><text x="65.6103%" y="799.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (20 samples, 0.02%)</title><rect x="65.3748%" y="773" width="0.0162%" height="15" fill="rgb(248,201,50)" fg:x="80902" fg:w="20"/><text x="65.6248%" y="783.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (20 samples, 0.02%)</title><rect x="65.3748%" y="757" width="0.0162%" height="15" fill="rgb(222,185,44)" fg:x="80902" fg:w="20"/><text x="65.6248%" y="767.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (22 samples, 0.02%)</title><rect x="65.3910%" y="805" width="0.0178%" height="15" fill="rgb(218,107,18)" fg:x="80922" fg:w="22"/><text x="65.6410%" y="815.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (16 samples, 0.01%)</title><rect x="65.3958%" y="789" width="0.0129%" height="15" fill="rgb(237,177,39)" fg:x="80928" fg:w="16"/><text x="65.6458%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (16 samples, 0.01%)</title><rect x="65.3958%" y="773" width="0.0129%" height="15" fill="rgb(246,69,6)" fg:x="80928" fg:w="16"/><text x="65.6458%" y="783.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (1,039 samples, 0.84%)</title><rect x="64.6362%" y="885" width="0.8396%" height="15" fill="rgb(234,208,37)" fg:x="79988" fg:w="1039"/><text x="64.8862%" y="895.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (952 samples, 0.77%)</title><rect x="64.7065%" y="869" width="0.7693%" height="15" fill="rgb(225,4,6)" fg:x="80075" fg:w="952"/><text x="64.9565%" y="879.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (802 samples, 0.65%)</title><rect x="64.8278%" y="853" width="0.6481%" height="15" fill="rgb(233,45,0)" fg:x="80225" fg:w="802"/><text x="65.0778%" y="863.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (581 samples, 0.47%)</title><rect x="65.0063%" y="837" width="0.4695%" height="15" fill="rgb(226,136,5)" fg:x="80446" fg:w="581"/><text x="65.2563%" y="847.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (192 samples, 0.16%)</title><rect x="65.3207%" y="821" width="0.1552%" height="15" fill="rgb(211,91,47)" fg:x="80835" fg:w="192"/><text x="65.5707%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (83 samples, 0.07%)</title><rect x="65.4088%" y="805" width="0.0671%" height="15" fill="rgb(242,88,51)" fg:x="80944" fg:w="83"/><text x="65.6588%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt; (83 samples, 0.07%)</title><rect x="65.4088%" y="789" width="0.0671%" height="15" fill="rgb(230,91,28)" fg:x="80944" fg:w="83"/><text x="65.6588%" y="799.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (83 samples, 0.07%)</title><rect x="65.4088%" y="773" width="0.0671%" height="15" fill="rgb(254,186,29)" fg:x="80944" fg:w="83"/><text x="65.6588%" y="783.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (82 samples, 0.07%)</title><rect x="65.4096%" y="757" width="0.0663%" height="15" fill="rgb(238,6,4)" fg:x="80945" fg:w="82"/><text x="65.6596%" y="767.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (82 samples, 0.07%)</title><rect x="65.4096%" y="741" width="0.0663%" height="15" fill="rgb(221,151,16)" fg:x="80945" fg:w="82"/><text x="65.6596%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (82 samples, 0.07%)</title><rect x="65.4096%" y="725" width="0.0663%" height="15" fill="rgb(251,143,52)" fg:x="80945" fg:w="82"/><text x="65.6596%" y="735.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (82 samples, 0.07%)</title><rect x="65.4096%" y="709" width="0.0663%" height="15" fill="rgb(206,90,15)" fg:x="80945" fg:w="82"/><text x="65.6596%" y="719.50"></text></g><g><title>sn_rust_dealloc (76 samples, 0.06%)</title><rect x="65.4144%" y="693" width="0.0614%" height="15" fill="rgb(218,35,8)" fg:x="80951" fg:w="76"/><text x="65.6644%" y="703.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (4,522 samples, 3.65%)</title><rect x="62.0027%" y="1093" width="3.6541%" height="15" fill="rgb(239,215,6)" fg:x="76729" fg:w="4522"/><text x="62.2527%" y="1103.50">std:..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (4,521 samples, 3.65%)</title><rect x="62.0035%" y="1077" width="3.6533%" height="15" fill="rgb(245,116,39)" fg:x="76730" fg:w="4521"/><text x="62.2535%" y="1087.50">std:..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (4,521 samples, 3.65%)</title><rect x="62.0035%" y="1061" width="3.6533%" height="15" fill="rgb(242,65,28)" fg:x="76730" fg:w="4521"/><text x="62.2535%" y="1071.50">asyn..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (4,521 samples, 3.65%)</title><rect x="62.0035%" y="1045" width="3.6533%" height="15" fill="rgb(252,132,53)" fg:x="76730" fg:w="4521"/><text x="62.2535%" y="1055.50">&lt;asy..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,521 samples, 3.65%)</title><rect x="62.0035%" y="1029" width="3.6533%" height="15" fill="rgb(224,159,50)" fg:x="76730" fg:w="4521"/><text x="62.2535%" y="1039.50">&lt;cor..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (4,521 samples, 3.65%)</title><rect x="62.0035%" y="1013" width="3.6533%" height="15" fill="rgb(224,93,4)" fg:x="76730" fg:w="4521"/><text x="62.2535%" y="1023.50">trem..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,521 samples, 3.65%)</title><rect x="62.0035%" y="997" width="3.6533%" height="15" fill="rgb(208,81,34)" fg:x="76730" fg:w="4521"/><text x="62.2535%" y="1007.50">&lt;cor..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (4,521 samples, 3.65%)</title><rect x="62.0035%" y="981" width="3.6533%" height="15" fill="rgb(233,92,54)" fg:x="76730" fg:w="4521"/><text x="62.2535%" y="991.50">trem..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,521 samples, 3.65%)</title><rect x="62.0035%" y="965" width="3.6533%" height="15" fill="rgb(237,21,14)" fg:x="76730" fg:w="4521"/><text x="62.2535%" y="975.50">&lt;cor..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (4,521 samples, 3.65%)</title><rect x="62.0035%" y="949" width="3.6533%" height="15" fill="rgb(249,128,51)" fg:x="76730" fg:w="4521"/><text x="62.2535%" y="959.50">trem..</text></g><g><title>tremor_runtime::connectors::source::build_events (4,520 samples, 3.65%)</title><rect x="62.0043%" y="933" width="3.6525%" height="15" fill="rgb(223,129,24)" fg:x="76731" fg:w="4520"/><text x="62.2543%" y="943.50">trem..</text></g><g><title>tremor_script::srs::EventPayload::try_new (2,255 samples, 1.82%)</title><rect x="63.8346%" y="917" width="1.8222%" height="15" fill="rgb(231,168,25)" fg:x="78996" fg:w="2255"/><text x="64.0846%" y="927.50">t..</text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (1,682 samples, 1.36%)</title><rect x="64.2977%" y="901" width="1.3592%" height="15" fill="rgb(224,39,20)" fg:x="79569" fg:w="1682"/><text x="64.5477%" y="911.50"></text></g><g><title>tremor_script::srs::ValueAndMeta::from_parts (224 samples, 0.18%)</title><rect x="65.4758%" y="885" width="0.1810%" height="15" fill="rgb(225,152,53)" fg:x="81027" fg:w="224"/><text x="65.7258%" y="895.50"></text></g><g><title>tremor_common::time::nanotime (65 samples, 0.05%)</title><rect x="65.6577%" y="1093" width="0.0525%" height="15" fill="rgb(252,17,24)" fg:x="81252" fg:w="65"/><text x="65.9077%" y="1103.50"></text></g><g><title>std::time::SystemTime::now (23 samples, 0.02%)</title><rect x="65.6916%" y="1077" width="0.0186%" height="15" fill="rgb(250,114,30)" fg:x="81294" fg:w="23"/><text x="65.9416%" y="1087.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (23 samples, 0.02%)</title><rect x="65.6916%" y="1061" width="0.0186%" height="15" fill="rgb(229,5,4)" fg:x="81294" fg:w="23"/><text x="65.9416%" y="1071.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (23 samples, 0.02%)</title><rect x="65.6916%" y="1045" width="0.0186%" height="15" fill="rgb(225,176,49)" fg:x="81294" fg:w="23"/><text x="65.9416%" y="1055.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (25 samples, 0.02%)</title><rect x="65.7579%" y="981" width="0.0202%" height="15" fill="rgb(224,221,49)" fg:x="81376" fg:w="25"/><text x="66.0079%" y="991.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (17 samples, 0.01%)</title><rect x="65.7643%" y="965" width="0.0137%" height="15" fill="rgb(253,169,27)" fg:x="81384" fg:w="17"/><text x="66.0143%" y="975.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (16 samples, 0.01%)</title><rect x="65.7651%" y="949" width="0.0129%" height="15" fill="rgb(211,206,16)" fg:x="81385" fg:w="16"/><text x="66.0151%" y="959.50"></text></g><g><title>core::sync::atomic::atomic_add (16 samples, 0.01%)</title><rect x="65.7651%" y="933" width="0.0129%" height="15" fill="rgb(244,87,35)" fg:x="81385" fg:w="16"/><text x="66.0151%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (70 samples, 0.06%)</title><rect x="65.8047%" y="917" width="0.0566%" height="15" fill="rgb(246,28,10)" fg:x="81434" fg:w="70"/><text x="66.0547%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (70 samples, 0.06%)</title><rect x="65.8047%" y="901" width="0.0566%" height="15" fill="rgb(229,12,44)" fg:x="81434" fg:w="70"/><text x="66.0547%" y="911.50"></text></g><g><title>core::hint::spin_loop (31 samples, 0.03%)</title><rect x="65.8629%" y="885" width="0.0251%" height="15" fill="rgb(210,145,37)" fg:x="81506" fg:w="31"/><text x="66.1129%" y="895.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (31 samples, 0.03%)</title><rect x="65.8629%" y="869" width="0.0251%" height="15" fill="rgb(227,112,52)" fg:x="81506" fg:w="31"/><text x="66.1129%" y="879.50"></text></g><g><title>event_listener::Inner::lock (105 samples, 0.08%)</title><rect x="65.8039%" y="981" width="0.0848%" height="15" fill="rgb(238,155,34)" fg:x="81433" fg:w="105"/><text x="66.0539%" y="991.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (104 samples, 0.08%)</title><rect x="65.8047%" y="965" width="0.0840%" height="15" fill="rgb(239,226,36)" fg:x="81434" fg:w="104"/><text x="66.0547%" y="975.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (104 samples, 0.08%)</title><rect x="65.8047%" y="949" width="0.0840%" height="15" fill="rgb(230,16,23)" fg:x="81434" fg:w="104"/><text x="66.0547%" y="959.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (104 samples, 0.08%)</title><rect x="65.8047%" y="933" width="0.0840%" height="15" fill="rgb(236,171,36)" fg:x="81434" fg:w="104"/><text x="66.0547%" y="943.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (34 samples, 0.03%)</title><rect x="65.8613%" y="917" width="0.0275%" height="15" fill="rgb(221,22,14)" fg:x="81504" fg:w="34"/><text x="66.1113%" y="927.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (32 samples, 0.03%)</title><rect x="65.8629%" y="901" width="0.0259%" height="15" fill="rgb(242,43,11)" fg:x="81506" fg:w="32"/><text x="66.1129%" y="911.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (220 samples, 0.18%)</title><rect x="65.7482%" y="997" width="0.1778%" height="15" fill="rgb(232,69,23)" fg:x="81364" fg:w="220"/><text x="65.9982%" y="1007.50"></text></g><g><title>event_listener::List::remove (46 samples, 0.04%)</title><rect x="65.8888%" y="981" width="0.0372%" height="15" fill="rgb(216,180,54)" fg:x="81538" fg:w="46"/><text x="66.1388%" y="991.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (35 samples, 0.03%)</title><rect x="65.8976%" y="965" width="0.0283%" height="15" fill="rgb(216,5,24)" fg:x="81549" fg:w="35"/><text x="66.1476%" y="975.50"></text></g><g><title>core::mem::replace (35 samples, 0.03%)</title><rect x="65.8976%" y="949" width="0.0283%" height="15" fill="rgb(225,89,9)" fg:x="81549" fg:w="35"/><text x="66.1476%" y="959.50"></text></g><g><title>core::ptr::read (35 samples, 0.03%)</title><rect x="65.8976%" y="933" width="0.0283%" height="15" fill="rgb(243,75,33)" fg:x="81549" fg:w="35"/><text x="66.1476%" y="943.50"></text></g><g><title>[libc-2.31.so] (686 samples, 0.55%)</title><rect x="65.9259%" y="997" width="0.5543%" height="15" fill="rgb(247,141,45)" fg:x="81584" fg:w="686"/><text x="66.1759%" y="1007.50"></text></g><g><title>[libc-2.31.so] (903 samples, 0.73%)</title><rect x="66.5207%" y="981" width="0.7297%" height="15" fill="rgb(232,177,36)" fg:x="82320" fg:w="903"/><text x="66.7707%" y="991.50"></text></g><g><title>[libc-2.31.so] (317 samples, 0.26%)</title><rect x="67.4144%" y="949" width="0.2562%" height="15" fill="rgb(219,125,36)" fg:x="83426" fg:w="317"/><text x="67.6644%" y="959.50"></text></g><g><title>concurrent_queue::full_fence (75 samples, 0.06%)</title><rect x="67.6706%" y="949" width="0.0606%" height="15" fill="rgb(227,94,9)" fg:x="83743" fg:w="75"/><text x="67.9206%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (74 samples, 0.06%)</title><rect x="67.6714%" y="933" width="0.0598%" height="15" fill="rgb(240,34,52)" fg:x="83744" fg:w="74"/><text x="67.9214%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (74 samples, 0.06%)</title><rect x="67.6714%" y="917" width="0.0598%" height="15" fill="rgb(216,45,12)" fg:x="83744" fg:w="74"/><text x="67.9214%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (74 samples, 0.06%)</title><rect x="67.6714%" y="901" width="0.0598%" height="15" fill="rgb(246,21,19)" fg:x="83744" fg:w="74"/><text x="67.9214%" y="911.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (875 samples, 0.71%)</title><rect x="67.7312%" y="949" width="0.7071%" height="15" fill="rgb(213,98,42)" fg:x="83818" fg:w="875"/><text x="67.9812%" y="959.50"></text></g><g><title>core::ptr::read (875 samples, 0.71%)</title><rect x="67.7312%" y="933" width="0.7071%" height="15" fill="rgb(250,136,47)" fg:x="83818" fg:w="875"/><text x="67.9812%" y="943.50"></text></g><g><title>[libc-2.31.so] (875 samples, 0.71%)</title><rect x="67.7312%" y="917" width="0.7071%" height="15" fill="rgb(251,124,27)" fg:x="83818" fg:w="875"/><text x="67.9812%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (998 samples, 0.81%)</title><rect x="68.4382%" y="949" width="0.8065%" height="15" fill="rgb(229,180,14)" fg:x="84693" fg:w="998"/><text x="68.6882%" y="959.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (998 samples, 0.81%)</title><rect x="68.4382%" y="933" width="0.8065%" height="15" fill="rgb(245,216,25)" fg:x="84693" fg:w="998"/><text x="68.6882%" y="943.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (2,773 samples, 2.24%)</title><rect x="67.2504%" y="981" width="2.2408%" height="15" fill="rgb(251,43,5)" fg:x="83223" fg:w="2773"/><text x="67.5004%" y="991.50">c..</text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (2,744 samples, 2.22%)</title><rect x="67.2738%" y="965" width="2.2174%" height="15" fill="rgb(250,128,24)" fg:x="83252" fg:w="2744"/><text x="67.5238%" y="975.50">c..</text></g><g><title>core::sync::atomic::AtomicUsize::load (305 samples, 0.25%)</title><rect x="69.2447%" y="949" width="0.2465%" height="15" fill="rgb(217,117,27)" fg:x="85691" fg:w="305"/><text x="69.4947%" y="959.50"></text></g><g><title>core::sync::atomic::atomic_load (301 samples, 0.24%)</title><rect x="69.2479%" y="933" width="0.2432%" height="15" fill="rgb(245,147,4)" fg:x="85695" fg:w="301"/><text x="69.4979%" y="943.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (4,053 samples, 3.28%)</title><rect x="66.4803%" y="997" width="3.2751%" height="15" fill="rgb(242,201,35)" fg:x="82270" fg:w="4053"/><text x="66.7303%" y="1007.50">asy..</text></g><g><title>event_listener::Event::notify (327 samples, 0.26%)</title><rect x="69.4912%" y="981" width="0.2642%" height="15" fill="rgb(218,181,1)" fg:x="85996" fg:w="327"/><text x="69.7412%" y="991.50"></text></g><g><title>event_listener::full_fence (312 samples, 0.25%)</title><rect x="69.5033%" y="965" width="0.2521%" height="15" fill="rgb(222,6,29)" fg:x="86011" fg:w="312"/><text x="69.7533%" y="975.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (302 samples, 0.24%)</title><rect x="69.5114%" y="949" width="0.2440%" height="15" fill="rgb(208,186,3)" fg:x="86021" fg:w="302"/><text x="69.7614%" y="959.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (302 samples, 0.24%)</title><rect x="69.5114%" y="933" width="0.2440%" height="15" fill="rgb(216,36,26)" fg:x="86021" fg:w="302"/><text x="69.7614%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (74 samples, 0.06%)</title><rect x="69.7602%" y="997" width="0.0598%" height="15" fill="rgb(248,201,23)" fg:x="86329" fg:w="74"/><text x="70.0102%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (60 samples, 0.05%)</title><rect x="69.7716%" y="981" width="0.0485%" height="15" fill="rgb(251,170,31)" fg:x="86343" fg:w="60"/><text x="70.0216%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (55 samples, 0.04%)</title><rect x="69.7756%" y="965" width="0.0444%" height="15" fill="rgb(207,110,25)" fg:x="86348" fg:w="55"/><text x="70.0256%" y="975.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (55 samples, 0.04%)</title><rect x="69.7756%" y="949" width="0.0444%" height="15" fill="rgb(250,54,15)" fg:x="86348" fg:w="55"/><text x="70.0256%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (55 samples, 0.04%)</title><rect x="69.7756%" y="933" width="0.0444%" height="15" fill="rgb(227,68,33)" fg:x="86348" fg:w="55"/><text x="70.0256%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_sub (55 samples, 0.04%)</title><rect x="69.7756%" y="917" width="0.0444%" height="15" fill="rgb(238,34,41)" fg:x="86348" fg:w="55"/><text x="70.0256%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (32 samples, 0.03%)</title><rect x="69.8257%" y="981" width="0.0259%" height="15" fill="rgb(220,11,15)" fg:x="86410" fg:w="32"/><text x="70.0757%" y="991.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (32 samples, 0.03%)</title><rect x="69.8257%" y="965" width="0.0259%" height="15" fill="rgb(246,111,35)" fg:x="86410" fg:w="32"/><text x="70.0757%" y="975.50"></text></g><g><title>core::sync::atomic::atomic_add (32 samples, 0.03%)</title><rect x="69.8257%" y="949" width="0.0259%" height="15" fill="rgb(209,88,53)" fg:x="86410" fg:w="32"/><text x="70.0757%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (38 samples, 0.03%)</title><rect x="69.8516%" y="981" width="0.0307%" height="15" fill="rgb(231,185,47)" fg:x="86442" fg:w="38"/><text x="70.1016%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (37 samples, 0.03%)</title><rect x="69.8524%" y="965" width="0.0299%" height="15" fill="rgb(233,154,1)" fg:x="86443" fg:w="37"/><text x="70.1024%" y="975.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.03%)</title><rect x="69.8524%" y="949" width="0.0299%" height="15" fill="rgb(225,15,46)" fg:x="86443" fg:w="37"/><text x="70.1024%" y="959.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (36 samples, 0.03%)</title><rect x="69.8532%" y="933" width="0.0291%" height="15" fill="rgb(211,135,41)" fg:x="86444" fg:w="36"/><text x="70.1032%" y="943.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (36 samples, 0.03%)</title><rect x="69.8532%" y="917" width="0.0291%" height="15" fill="rgb(208,54,0)" fg:x="86444" fg:w="36"/><text x="70.1032%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (36 samples, 0.03%)</title><rect x="69.8532%" y="901" width="0.0291%" height="15" fill="rgb(244,136,14)" fg:x="86444" fg:w="36"/><text x="70.1032%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_swap (36 samples, 0.03%)</title><rect x="69.8532%" y="885" width="0.0291%" height="15" fill="rgb(241,56,14)" fg:x="86444" fg:w="36"/><text x="70.1032%" y="895.50"></text></g><g><title>event_listener::Inner::lock (13 samples, 0.01%)</title><rect x="69.8831%" y="981" width="0.0105%" height="15" fill="rgb(205,80,24)" fg:x="86481" fg:w="13"/><text x="70.1331%" y="991.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,185 samples, 4.19%)</title><rect x="65.7150%" y="1077" width="4.1899%" height="15" fill="rgb(220,57,4)" fg:x="81323" fg:w="5185"/><text x="65.9650%" y="1087.50">&lt;asyn..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (5,185 samples, 4.19%)</title><rect x="65.7150%" y="1061" width="4.1899%" height="15" fill="rgb(226,193,50)" fg:x="81323" fg:w="5185"/><text x="65.9650%" y="1071.50">&lt;trem..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (5,185 samples, 4.19%)</title><rect x="65.7150%" y="1045" width="4.1899%" height="15" fill="rgb(231,168,22)" fg:x="81323" fg:w="5185"/><text x="65.9650%" y="1055.50">&lt;asyn..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (5,185 samples, 4.19%)</title><rect x="65.7150%" y="1029" width="4.1899%" height="15" fill="rgb(254,215,14)" fg:x="81323" fg:w="5185"/><text x="65.9650%" y="1039.50">&lt;asyn..</text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (5,185 samples, 4.19%)</title><rect x="65.7150%" y="1013" width="4.1899%" height="15" fill="rgb(211,115,16)" fg:x="81323" fg:w="5185"/><text x="65.9650%" y="1023.50">&lt;asyn..</text></g><g><title>event_listener::Event::listen (105 samples, 0.08%)</title><rect x="69.8200%" y="997" width="0.0848%" height="15" fill="rgb(236,210,16)" fg:x="86403" fg:w="105"/><text x="70.0700%" y="1007.50"></text></g><g><title>alloc::alloc::exchange_malloc (45 samples, 0.04%)</title><rect x="69.9566%" y="709" width="0.0364%" height="15" fill="rgb(221,94,12)" fg:x="86572" fg:w="45"/><text x="70.2066%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (45 samples, 0.04%)</title><rect x="69.9566%" y="693" width="0.0364%" height="15" fill="rgb(235,218,49)" fg:x="86572" fg:w="45"/><text x="70.2066%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (45 samples, 0.04%)</title><rect x="69.9566%" y="677" width="0.0364%" height="15" fill="rgb(217,114,14)" fg:x="86572" fg:w="45"/><text x="70.2066%" y="687.50"></text></g><g><title>alloc::alloc::alloc (36 samples, 0.03%)</title><rect x="69.9639%" y="661" width="0.0291%" height="15" fill="rgb(216,145,22)" fg:x="86581" fg:w="36"/><text x="70.2139%" y="671.50"></text></g><g><title>__rg_alloc (36 samples, 0.03%)</title><rect x="69.9639%" y="645" width="0.0291%" height="15" fill="rgb(217,112,39)" fg:x="86581" fg:w="36"/><text x="70.2139%" y="655.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (36 samples, 0.03%)</title><rect x="69.9639%" y="629" width="0.0291%" height="15" fill="rgb(225,85,32)" fg:x="86581" fg:w="36"/><text x="70.2139%" y="639.50"></text></g><g><title>sn_rust_alloc (36 samples, 0.03%)</title><rect x="69.9639%" y="613" width="0.0291%" height="15" fill="rgb(245,209,47)" fg:x="86581" fg:w="36"/><text x="70.2139%" y="623.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (37 samples, 0.03%)</title><rect x="70.0382%" y="693" width="0.0299%" height="15" fill="rgb(218,220,15)" fg:x="86673" fg:w="37"/><text x="70.2882%" y="703.50"></text></g><g><title>core::time::Duration::as_nanos (24 samples, 0.02%)</title><rect x="70.0681%" y="693" width="0.0194%" height="15" fill="rgb(222,202,31)" fg:x="86710" fg:w="24"/><text x="70.3181%" y="703.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (136 samples, 0.11%)</title><rect x="70.0875%" y="677" width="0.1099%" height="15" fill="rgb(243,203,4)" fg:x="86734" fg:w="136"/><text x="70.3375%" y="687.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (66 samples, 0.05%)</title><rect x="70.2370%" y="645" width="0.0533%" height="15" fill="rgb(237,92,17)" fg:x="86919" fg:w="66"/><text x="70.4870%" y="655.50"></text></g><g><title>core::cmp::PartialOrd::ge (66 samples, 0.05%)</title><rect x="70.2370%" y="629" width="0.0533%" height="15" fill="rgb(231,119,7)" fg:x="86919" fg:w="66"/><text x="70.4870%" y="639.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (64 samples, 0.05%)</title><rect x="70.2386%" y="613" width="0.0517%" height="15" fill="rgb(237,82,41)" fg:x="86921" fg:w="64"/><text x="70.4886%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (40 samples, 0.03%)</title><rect x="70.2580%" y="597" width="0.0323%" height="15" fill="rgb(226,81,48)" fg:x="86945" fg:w="40"/><text x="70.5080%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (40 samples, 0.03%)</title><rect x="70.2580%" y="581" width="0.0323%" height="15" fill="rgb(234,70,51)" fg:x="86945" fg:w="40"/><text x="70.5080%" y="591.50"></text></g><g><title>std::time::SystemTime::duration_since (280 samples, 0.23%)</title><rect x="70.0875%" y="693" width="0.2263%" height="15" fill="rgb(251,86,4)" fg:x="86734" fg:w="280"/><text x="70.3375%" y="703.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (144 samples, 0.12%)</title><rect x="70.1974%" y="677" width="0.1164%" height="15" fill="rgb(244,144,28)" fg:x="86870" fg:w="144"/><text x="70.4474%" y="687.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (144 samples, 0.12%)</title><rect x="70.1974%" y="661" width="0.1164%" height="15" fill="rgb(232,161,39)" fg:x="86870" fg:w="144"/><text x="70.4474%" y="671.50"></text></g><g><title>core::time::Duration::new (29 samples, 0.02%)</title><rect x="70.2903%" y="645" width="0.0234%" height="15" fill="rgb(247,34,51)" fg:x="86985" fg:w="29"/><text x="70.5403%" y="655.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,062 samples, 0.86%)</title><rect x="69.9049%" y="1077" width="0.8582%" height="15" fill="rgb(225,132,2)" fg:x="86508" fg:w="1062"/><text x="70.1549%" y="1087.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (1,062 samples, 0.86%)</title><rect x="69.9049%" y="1061" width="0.8582%" height="15" fill="rgb(209,159,44)" fg:x="86508" fg:w="1062"/><text x="70.1549%" y="1071.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,062 samples, 0.86%)</title><rect x="69.9049%" y="1045" width="0.8582%" height="15" fill="rgb(251,214,1)" fg:x="86508" fg:w="1062"/><text x="70.1549%" y="1055.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,062 samples, 0.86%)</title><rect x="69.9049%" y="1029" width="0.8582%" height="15" fill="rgb(247,84,47)" fg:x="86508" fg:w="1062"/><text x="70.1549%" y="1039.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (1,062 samples, 0.86%)</title><rect x="69.9049%" y="1013" width="0.8582%" height="15" fill="rgb(240,111,43)" fg:x="86508" fg:w="1062"/><text x="70.1549%" y="1023.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,062 samples, 0.86%)</title><rect x="69.9049%" y="997" width="0.8582%" height="15" fill="rgb(215,214,35)" fg:x="86508" fg:w="1062"/><text x="70.1549%" y="1007.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (1,062 samples, 0.86%)</title><rect x="69.9049%" y="981" width="0.8582%" height="15" fill="rgb(248,207,23)" fg:x="86508" fg:w="1062"/><text x="70.1549%" y="991.50"></text></g><g><title>std::panic::catch_unwind (1,062 samples, 0.86%)</title><rect x="69.9049%" y="965" width="0.8582%" height="15" fill="rgb(214,186,4)" fg:x="86508" fg:w="1062"/><text x="70.1549%" y="975.50"></text></g><g><title>std::panicking::try (1,062 samples, 0.86%)</title><rect x="69.9049%" y="949" width="0.8582%" height="15" fill="rgb(220,133,22)" fg:x="86508" fg:w="1062"/><text x="70.1549%" y="959.50"></text></g><g><title>std::panicking::try::do_call (1,062 samples, 0.86%)</title><rect x="69.9049%" y="933" width="0.8582%" height="15" fill="rgb(239,134,19)" fg:x="86508" fg:w="1062"/><text x="70.1549%" y="943.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,062 samples, 0.86%)</title><rect x="69.9049%" y="917" width="0.8582%" height="15" fill="rgb(250,140,9)" fg:x="86508" fg:w="1062"/><text x="70.1549%" y="927.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1,062 samples, 0.86%)</title><rect x="69.9049%" y="901" width="0.8582%" height="15" fill="rgb(225,59,14)" fg:x="86508" fg:w="1062"/><text x="70.1549%" y="911.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (1,062 samples, 0.86%)</title><rect x="69.9049%" y="885" width="0.8582%" height="15" fill="rgb(214,152,51)" fg:x="86508" fg:w="1062"/><text x="70.1549%" y="895.50"></text></g><g><title>async_ffi::FfiContext::with_context (1,062 samples, 0.86%)</title><rect x="69.9049%" y="869" width="0.8582%" height="15" fill="rgb(251,227,43)" fg:x="86508" fg:w="1062"/><text x="70.1549%" y="879.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (1,062 samples, 0.86%)</title><rect x="69.9049%" y="853" width="0.8582%" height="15" fill="rgb(241,96,17)" fg:x="86508" fg:w="1062"/><text x="70.1549%" y="863.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,062 samples, 0.86%)</title><rect x="69.9049%" y="837" width="0.8582%" height="15" fill="rgb(234,198,43)" fg:x="86508" fg:w="1062"/><text x="70.1549%" y="847.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (1,062 samples, 0.86%)</title><rect x="69.9049%" y="821" width="0.8582%" height="15" fill="rgb(220,108,29)" fg:x="86508" fg:w="1062"/><text x="70.1549%" y="831.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (1,062 samples, 0.86%)</title><rect x="69.9049%" y="805" width="0.8582%" height="15" fill="rgb(226,163,33)" fg:x="86508" fg:w="1062"/><text x="70.1549%" y="815.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (1,062 samples, 0.86%)</title><rect x="69.9049%" y="789" width="0.8582%" height="15" fill="rgb(205,194,45)" fg:x="86508" fg:w="1062"/><text x="70.1549%" y="799.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (1,062 samples, 0.86%)</title><rect x="69.9049%" y="773" width="0.8582%" height="15" fill="rgb(206,143,44)" fg:x="86508" fg:w="1062"/><text x="70.1549%" y="783.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (1,062 samples, 0.86%)</title><rect x="69.9049%" y="757" width="0.8582%" height="15" fill="rgb(236,136,36)" fg:x="86508" fg:w="1062"/><text x="70.1549%" y="767.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (1,062 samples, 0.86%)</title><rect x="69.9049%" y="741" width="0.8582%" height="15" fill="rgb(249,172,42)" fg:x="86508" fg:w="1062"/><text x="70.1549%" y="751.50"></text></g><g><title>tremor_runtime::postprocessor::postprocess (1,062 samples, 0.86%)</title><rect x="69.9049%" y="725" width="0.8582%" height="15" fill="rgb(216,139,23)" fg:x="86508" fg:w="1062"/><text x="70.1549%" y="735.50"></text></g><g><title>tremor_common::time::nanotime (926 samples, 0.75%)</title><rect x="70.0148%" y="709" width="0.7483%" height="15" fill="rgb(207,166,20)" fg:x="86644" fg:w="926"/><text x="70.2648%" y="719.50"></text></g><g><title>std::time::SystemTime::now (556 samples, 0.45%)</title><rect x="70.3138%" y="693" width="0.4493%" height="15" fill="rgb(210,209,22)" fg:x="87014" fg:w="556"/><text x="70.5638%" y="703.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (556 samples, 0.45%)</title><rect x="70.3138%" y="677" width="0.4493%" height="15" fill="rgb(232,118,20)" fg:x="87014" fg:w="556"/><text x="70.5638%" y="687.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (556 samples, 0.45%)</title><rect x="70.3138%" y="661" width="0.4493%" height="15" fill="rgb(238,113,42)" fg:x="87014" fg:w="556"/><text x="70.5638%" y="671.50"></text></g><g><title>__clock_gettime (460 samples, 0.37%)</title><rect x="70.3914%" y="645" width="0.3717%" height="15" fill="rgb(231,42,5)" fg:x="87110" fg:w="460"/><text x="70.6414%" y="655.50"></text></g><g><title>__vdso_clock_gettime (446 samples, 0.36%)</title><rect x="70.4027%" y="629" width="0.3604%" height="15" fill="rgb(243,166,24)" fg:x="87124" fg:w="446"/><text x="70.6527%" y="639.50"></text></g><g><title>[[vdso]] (406 samples, 0.33%)</title><rect x="70.4350%" y="613" width="0.3281%" height="15" fill="rgb(237,226,12)" fg:x="87164" fg:w="406"/><text x="70.6850%" y="623.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (6,248 samples, 5.05%)</title><rect x="65.7150%" y="1093" width="5.0488%" height="15" fill="rgb(229,133,24)" fg:x="81323" fg:w="6248"/><text x="65.9650%" y="1103.50">tremor..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (14 samples, 0.01%)</title><rect x="70.7711%" y="1093" width="0.0113%" height="15" fill="rgb(238,33,43)" fg:x="87580" fg:w="14"/><text x="71.0211%" y="1103.50"></text></g><g><title>tremor_runtime::pipeline::maybe_send (25 samples, 0.02%)</title><rect x="70.8002%" y="1093" width="0.0202%" height="15" fill="rgb(227,59,38)" fg:x="87616" fg:w="25"/><text x="71.0502%" y="1103.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (54 samples, 0.04%)</title><rect x="71.0806%" y="917" width="0.0436%" height="15" fill="rgb(230,97,0)" fg:x="87963" fg:w="54"/><text x="71.3306%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_add (54 samples, 0.04%)</title><rect x="71.0806%" y="901" width="0.0436%" height="15" fill="rgb(250,173,50)" fg:x="87963" fg:w="54"/><text x="71.3306%" y="911.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (59 samples, 0.05%)</title><rect x="71.0782%" y="949" width="0.0477%" height="15" fill="rgb(240,15,50)" fg:x="87960" fg:w="59"/><text x="71.3282%" y="959.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (57 samples, 0.05%)</title><rect x="71.0798%" y="933" width="0.0461%" height="15" fill="rgb(221,93,22)" fg:x="87962" fg:w="57"/><text x="71.3298%" y="943.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (20 samples, 0.02%)</title><rect x="71.1259%" y="949" width="0.0162%" height="15" fill="rgb(245,180,53)" fg:x="88019" fg:w="20"/><text x="71.3759%" y="959.50"></text></g><g><title>core::mem::replace (20 samples, 0.02%)</title><rect x="71.1259%" y="933" width="0.0162%" height="15" fill="rgb(231,88,51)" fg:x="88019" fg:w="20"/><text x="71.3759%" y="943.50"></text></g><g><title>core::ptr::read (20 samples, 0.02%)</title><rect x="71.1259%" y="917" width="0.0162%" height="15" fill="rgb(240,58,21)" fg:x="88019" fg:w="20"/><text x="71.3759%" y="927.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (159 samples, 0.13%)</title><rect x="71.1994%" y="933" width="0.1285%" height="15" fill="rgb(237,21,10)" fg:x="88110" fg:w="159"/><text x="71.4494%" y="943.50"></text></g><g><title>core::mem::replace (159 samples, 0.13%)</title><rect x="71.1994%" y="917" width="0.1285%" height="15" fill="rgb(218,43,11)" fg:x="88110" fg:w="159"/><text x="71.4494%" y="927.50"></text></g><g><title>core::ptr::read (159 samples, 0.13%)</title><rect x="71.1994%" y="901" width="0.1285%" height="15" fill="rgb(218,221,29)" fg:x="88110" fg:w="159"/><text x="71.4494%" y="911.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (299 samples, 0.24%)</title><rect x="71.1421%" y="949" width="0.2416%" height="15" fill="rgb(214,118,42)" fg:x="88039" fg:w="299"/><text x="71.3921%" y="959.50"></text></g><g><title>core::mem::drop (69 samples, 0.06%)</title><rect x="71.3279%" y="933" width="0.0558%" height="15" fill="rgb(251,200,26)" fg:x="88269" fg:w="69"/><text x="71.5779%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (69 samples, 0.06%)</title><rect x="71.3279%" y="917" width="0.0558%" height="15" fill="rgb(237,101,39)" fg:x="88269" fg:w="69"/><text x="71.5779%" y="927.50"></text></g><g><title>core::mem::drop (59 samples, 0.05%)</title><rect x="71.3837%" y="949" width="0.0477%" height="15" fill="rgb(251,117,11)" fg:x="88338" fg:w="59"/><text x="71.6337%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (59 samples, 0.05%)</title><rect x="71.3837%" y="933" width="0.0477%" height="15" fill="rgb(216,223,23)" fg:x="88338" fg:w="59"/><text x="71.6337%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (49 samples, 0.04%)</title><rect x="71.3917%" y="917" width="0.0396%" height="15" fill="rgb(251,54,12)" fg:x="88348" fg:w="49"/><text x="71.6417%" y="927.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (49 samples, 0.04%)</title><rect x="71.3917%" y="901" width="0.0396%" height="15" fill="rgb(254,176,54)" fg:x="88348" fg:w="49"/><text x="71.6417%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (46 samples, 0.04%)</title><rect x="71.3942%" y="885" width="0.0372%" height="15" fill="rgb(210,32,8)" fg:x="88351" fg:w="46"/><text x="71.6442%" y="895.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (46 samples, 0.04%)</title><rect x="71.3942%" y="869" width="0.0372%" height="15" fill="rgb(235,52,38)" fg:x="88351" fg:w="46"/><text x="71.6442%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (46 samples, 0.04%)</title><rect x="71.3942%" y="853" width="0.0372%" height="15" fill="rgb(231,4,44)" fg:x="88351" fg:w="46"/><text x="71.6442%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_swap (46 samples, 0.04%)</title><rect x="71.3942%" y="837" width="0.0372%" height="15" fill="rgb(249,2,32)" fg:x="88351" fg:w="46"/><text x="71.6442%" y="847.50"></text></g><g><title>&lt;event_listener::ListGuard as core::ops::drop::Drop&gt;::drop (21 samples, 0.02%)</title><rect x="71.4313%" y="933" width="0.0170%" height="15" fill="rgb(224,65,26)" fg:x="88397" fg:w="21"/><text x="71.6813%" y="943.50"></text></g><g><title>std::sync::poison::Flag::done (14 samples, 0.01%)</title><rect x="71.4629%" y="901" width="0.0113%" height="15" fill="rgb(250,73,40)" fg:x="88436" fg:w="14"/><text x="71.7129%" y="911.50"></text></g><g><title>std::thread::panicking (14 samples, 0.01%)</title><rect x="71.4629%" y="885" width="0.0113%" height="15" fill="rgb(253,177,16)" fg:x="88436" fg:w="14"/><text x="71.7129%" y="895.50"></text></g><g><title>std::panicking::panicking (14 samples, 0.01%)</title><rect x="71.4629%" y="869" width="0.0113%" height="15" fill="rgb(217,32,34)" fg:x="88436" fg:w="14"/><text x="71.7129%" y="879.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (14 samples, 0.01%)</title><rect x="71.4629%" y="853" width="0.0113%" height="15" fill="rgb(212,7,10)" fg:x="88436" fg:w="14"/><text x="71.7129%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (396 samples, 0.32%)</title><rect x="71.4313%" y="949" width="0.3200%" height="15" fill="rgb(245,89,8)" fg:x="88397" fg:w="396"/><text x="71.6813%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (375 samples, 0.30%)</title><rect x="71.4483%" y="933" width="0.3030%" height="15" fill="rgb(237,16,53)" fg:x="88418" fg:w="375"/><text x="71.6983%" y="943.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (375 samples, 0.30%)</title><rect x="71.4483%" y="917" width="0.3030%" height="15" fill="rgb(250,204,30)" fg:x="88418" fg:w="375"/><text x="71.6983%" y="927.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (343 samples, 0.28%)</title><rect x="71.4742%" y="901" width="0.2772%" height="15" fill="rgb(208,77,27)" fg:x="88450" fg:w="343"/><text x="71.7242%" y="911.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (343 samples, 0.28%)</title><rect x="71.4742%" y="885" width="0.2772%" height="15" fill="rgb(250,204,28)" fg:x="88450" fg:w="343"/><text x="71.7242%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (343 samples, 0.28%)</title><rect x="71.4742%" y="869" width="0.2772%" height="15" fill="rgb(244,63,21)" fg:x="88450" fg:w="343"/><text x="71.7242%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_swap (343 samples, 0.28%)</title><rect x="71.4742%" y="853" width="0.2772%" height="15" fill="rgb(236,85,44)" fg:x="88450" fg:w="343"/><text x="71.7242%" y="863.50"></text></g><g><title>core::task::wake::Context::waker (13 samples, 0.01%)</title><rect x="71.7562%" y="949" width="0.0105%" height="15" fill="rgb(215,98,4)" fg:x="88799" fg:w="13"/><text x="72.0062%" y="959.50"></text></g><g><title>core::task::wake::Waker::will_wake (37 samples, 0.03%)</title><rect x="71.7667%" y="949" width="0.0299%" height="15" fill="rgb(235,38,11)" fg:x="88812" fg:w="37"/><text x="72.0167%" y="959.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (37 samples, 0.03%)</title><rect x="71.7667%" y="933" width="0.0299%" height="15" fill="rgb(254,186,25)" fg:x="88812" fg:w="37"/><text x="72.0167%" y="943.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (37 samples, 0.03%)</title><rect x="71.7667%" y="917" width="0.0299%" height="15" fill="rgb(225,55,31)" fg:x="88812" fg:w="37"/><text x="72.0167%" y="927.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (37 samples, 0.03%)</title><rect x="71.7667%" y="901" width="0.0299%" height="15" fill="rgb(211,15,21)" fg:x="88812" fg:w="37"/><text x="72.0167%" y="911.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (37 samples, 0.03%)</title><rect x="71.8184%" y="917" width="0.0299%" height="15" fill="rgb(215,187,41)" fg:x="88876" fg:w="37"/><text x="72.0684%" y="927.50"></text></g><g><title>std::sync::poison::Flag::borrow (37 samples, 0.03%)</title><rect x="71.8184%" y="901" width="0.0299%" height="15" fill="rgb(248,69,32)" fg:x="88876" fg:w="37"/><text x="72.0684%" y="911.50"></text></g><g><title>std::thread::panicking (25 samples, 0.02%)</title><rect x="71.8281%" y="885" width="0.0202%" height="15" fill="rgb(252,102,52)" fg:x="88888" fg:w="25"/><text x="72.0781%" y="895.50"></text></g><g><title>std::panicking::panicking (25 samples, 0.02%)</title><rect x="71.8281%" y="869" width="0.0202%" height="15" fill="rgb(253,140,32)" fg:x="88888" fg:w="25"/><text x="72.0781%" y="879.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (25 samples, 0.02%)</title><rect x="71.8281%" y="853" width="0.0202%" height="15" fill="rgb(216,56,42)" fg:x="88888" fg:w="25"/><text x="72.0781%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (25 samples, 0.02%)</title><rect x="71.8281%" y="837" width="0.0202%" height="15" fill="rgb(216,184,14)" fg:x="88888" fg:w="25"/><text x="72.0781%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_load (25 samples, 0.02%)</title><rect x="71.8281%" y="821" width="0.0202%" height="15" fill="rgb(237,187,27)" fg:x="88888" fg:w="25"/><text x="72.0781%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (665 samples, 0.54%)</title><rect x="71.8499%" y="885" width="0.5374%" height="15" fill="rgb(219,65,3)" fg:x="88915" fg:w="665"/><text x="72.0999%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (665 samples, 0.54%)</title><rect x="71.8499%" y="869" width="0.5374%" height="15" fill="rgb(245,83,25)" fg:x="88915" fg:w="665"/><text x="72.0999%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (48 samples, 0.04%)</title><rect x="72.3938%" y="869" width="0.0388%" height="15" fill="rgb(214,205,45)" fg:x="89588" fg:w="48"/><text x="72.6438%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (48 samples, 0.04%)</title><rect x="72.3938%" y="853" width="0.0388%" height="15" fill="rgb(241,20,18)" fg:x="89588" fg:w="48"/><text x="72.6438%" y="863.50"></text></g><g><title>core::hint::spin_loop (1,649 samples, 1.33%)</title><rect x="72.4471%" y="853" width="1.3325%" height="15" fill="rgb(232,163,23)" fg:x="89654" fg:w="1649"/><text x="72.6971%" y="863.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (1,649 samples, 1.33%)</title><rect x="72.4471%" y="837" width="1.3325%" height="15" fill="rgb(214,5,46)" fg:x="89654" fg:w="1649"/><text x="72.6971%" y="847.50"></text></g><g><title>event_listener::Inner::lock (2,524 samples, 2.04%)</title><rect x="71.7974%" y="949" width="2.0396%" height="15" fill="rgb(229,78,17)" fg:x="88850" fg:w="2524"/><text x="72.0474%" y="959.50">e..</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (2,498 samples, 2.02%)</title><rect x="71.8184%" y="933" width="2.0186%" height="15" fill="rgb(248,89,10)" fg:x="88876" fg:w="2498"/><text x="72.0684%" y="943.50">s..</text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (2,461 samples, 1.99%)</title><rect x="71.8483%" y="917" width="1.9887%" height="15" fill="rgb(248,54,15)" fg:x="88913" fg:w="2461"/><text x="72.0983%" y="927.50">s..</text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (2,461 samples, 1.99%)</title><rect x="71.8483%" y="901" width="1.9887%" height="15" fill="rgb(223,116,6)" fg:x="88913" fg:w="2461"/><text x="72.0983%" y="911.50">s..</text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (1,794 samples, 1.45%)</title><rect x="72.3873%" y="885" width="1.4497%" height="15" fill="rgb(205,125,38)" fg:x="89580" fg:w="1794"/><text x="72.6373%" y="895.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (1,738 samples, 1.40%)</title><rect x="72.4325%" y="869" width="1.4044%" height="15" fill="rgb(251,78,38)" fg:x="89636" fg:w="1738"/><text x="72.6825%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (71 samples, 0.06%)</title><rect x="73.7796%" y="853" width="0.0574%" height="15" fill="rgb(253,78,28)" fg:x="91303" fg:w="71"/><text x="74.0296%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_load (71 samples, 0.06%)</title><rect x="73.7796%" y="837" width="0.0574%" height="15" fill="rgb(209,120,3)" fg:x="91303" fg:w="71"/><text x="74.0296%" y="847.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (3,633 samples, 2.94%)</title><rect x="70.9950%" y="965" width="2.9357%" height="15" fill="rgb(238,229,9)" fg:x="87857" fg:w="3633"/><text x="71.2450%" y="975.50">&lt;e..</text></g><g><title>event_listener::List::remove (116 samples, 0.09%)</title><rect x="73.8370%" y="949" width="0.0937%" height="15" fill="rgb(253,159,18)" fg:x="91374" fg:w="116"/><text x="74.0870%" y="959.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (78 samples, 0.06%)</title><rect x="73.8677%" y="933" width="0.0630%" height="15" fill="rgb(244,42,34)" fg:x="91412" fg:w="78"/><text x="74.1177%" y="943.50"></text></g><g><title>core::mem::replace (78 samples, 0.06%)</title><rect x="73.8677%" y="917" width="0.0630%" height="15" fill="rgb(224,8,7)" fg:x="91412" fg:w="78"/><text x="74.1177%" y="927.50"></text></g><g><title>core::ptr::read (78 samples, 0.06%)</title><rect x="73.8677%" y="901" width="0.0630%" height="15" fill="rgb(210,201,45)" fg:x="91412" fg:w="78"/><text x="74.1177%" y="911.50"></text></g><g><title>concurrent_queue::full_fence (173 samples, 0.14%)</title><rect x="74.1287%" y="917" width="0.1398%" height="15" fill="rgb(252,185,21)" fg:x="91735" fg:w="173"/><text x="74.3787%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (165 samples, 0.13%)</title><rect x="74.1352%" y="901" width="0.1333%" height="15" fill="rgb(223,131,1)" fg:x="91743" fg:w="165"/><text x="74.3852%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (165 samples, 0.13%)</title><rect x="74.1352%" y="885" width="0.1333%" height="15" fill="rgb(245,141,16)" fg:x="91743" fg:w="165"/><text x="74.3852%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (165 samples, 0.13%)</title><rect x="74.1352%" y="869" width="0.1333%" height="15" fill="rgb(229,55,45)" fg:x="91743" fg:w="165"/><text x="74.3852%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (234 samples, 0.19%)</title><rect x="74.2733%" y="917" width="0.1891%" height="15" fill="rgb(208,92,15)" fg:x="91914" fg:w="234"/><text x="74.5233%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (234 samples, 0.19%)</title><rect x="74.2733%" y="901" width="0.1891%" height="15" fill="rgb(234,185,47)" fg:x="91914" fg:w="234"/><text x="74.5233%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (450 samples, 0.36%)</title><rect x="74.4624%" y="917" width="0.3636%" height="15" fill="rgb(253,104,50)" fg:x="92148" fg:w="450"/><text x="74.7124%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_load (450 samples, 0.36%)</title><rect x="74.4624%" y="901" width="0.3636%" height="15" fill="rgb(205,70,7)" fg:x="92148" fg:w="450"/><text x="74.7124%" y="911.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (1,078 samples, 0.87%)</title><rect x="73.9558%" y="949" width="0.8711%" height="15" fill="rgb(240,178,43)" fg:x="91521" fg:w="1078"/><text x="74.2058%" y="959.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (1,039 samples, 0.84%)</title><rect x="73.9873%" y="933" width="0.8396%" height="15" fill="rgb(214,112,2)" fg:x="91560" fg:w="1039"/><text x="74.2373%" y="943.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (2,154 samples, 1.74%)</title><rect x="73.9307%" y="965" width="1.7406%" height="15" fill="rgb(206,46,17)" fg:x="91490" fg:w="2154"/><text x="74.1807%" y="975.50"></text></g><g><title>event_listener::Event::notify (1,045 samples, 0.84%)</title><rect x="74.8269%" y="949" width="0.8444%" height="15" fill="rgb(225,220,16)" fg:x="92599" fg:w="1045"/><text x="75.0769%" y="959.50"></text></g><g><title>event_listener::full_fence (1,034 samples, 0.84%)</title><rect x="74.8358%" y="933" width="0.8355%" height="15" fill="rgb(238,65,40)" fg:x="92610" fg:w="1034"/><text x="75.0858%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1,032 samples, 0.83%)</title><rect x="74.8374%" y="917" width="0.8339%" height="15" fill="rgb(230,151,21)" fg:x="92612" fg:w="1032"/><text x="75.0874%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1,032 samples, 0.83%)</title><rect x="74.8374%" y="901" width="0.8339%" height="15" fill="rgb(218,58,49)" fg:x="92612" fg:w="1032"/><text x="75.0874%" y="911.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (13 samples, 0.01%)</title><rect x="75.6713%" y="965" width="0.0105%" height="15" fill="rgb(219,179,14)" fg:x="93644" fg:w="13"/><text x="75.9213%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (14 samples, 0.01%)</title><rect x="75.6859%" y="917" width="0.0113%" height="15" fill="rgb(223,72,1)" fg:x="93662" fg:w="14"/><text x="75.9359%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (13 samples, 0.01%)</title><rect x="75.6867%" y="901" width="0.0105%" height="15" fill="rgb(238,126,10)" fg:x="93663" fg:w="13"/><text x="75.9367%" y="911.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="75.6867%" y="885" width="0.0105%" height="15" fill="rgb(224,206,38)" fg:x="93663" fg:w="13"/><text x="75.9367%" y="895.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (13 samples, 0.01%)</title><rect x="75.6867%" y="869" width="0.0105%" height="15" fill="rgb(212,201,54)" fg:x="93663" fg:w="13"/><text x="75.9367%" y="879.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (13 samples, 0.01%)</title><rect x="75.6867%" y="853" width="0.0105%" height="15" fill="rgb(218,154,48)" fg:x="93663" fg:w="13"/><text x="75.9367%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (13 samples, 0.01%)</title><rect x="75.6867%" y="837" width="0.0105%" height="15" fill="rgb(232,93,24)" fg:x="93663" fg:w="13"/><text x="75.9367%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_swap (13 samples, 0.01%)</title><rect x="75.6867%" y="821" width="0.0105%" height="15" fill="rgb(245,30,21)" fg:x="93663" fg:w="13"/><text x="75.9367%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (33 samples, 0.03%)</title><rect x="75.7004%" y="853" width="0.0267%" height="15" fill="rgb(242,148,29)" fg:x="93680" fg:w="33"/><text x="75.9504%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (33 samples, 0.03%)</title><rect x="75.7004%" y="837" width="0.0267%" height="15" fill="rgb(244,153,54)" fg:x="93680" fg:w="33"/><text x="75.9504%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (16 samples, 0.01%)</title><rect x="75.7279%" y="837" width="0.0129%" height="15" fill="rgb(252,87,22)" fg:x="93714" fg:w="16"/><text x="75.9779%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (16 samples, 0.01%)</title><rect x="75.7279%" y="821" width="0.0129%" height="15" fill="rgb(210,51,29)" fg:x="93714" fg:w="16"/><text x="75.9779%" y="831.50"></text></g><g><title>core::hint::spin_loop (31 samples, 0.03%)</title><rect x="75.7408%" y="821" width="0.0251%" height="15" fill="rgb(242,136,47)" fg:x="93730" fg:w="31"/><text x="75.9908%" y="831.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (31 samples, 0.03%)</title><rect x="75.7408%" y="805" width="0.0251%" height="15" fill="rgb(238,68,4)" fg:x="93730" fg:w="31"/><text x="75.9908%" y="815.50"></text></g><g><title>event_listener::Inner::lock (106 samples, 0.09%)</title><rect x="75.6972%" y="917" width="0.0857%" height="15" fill="rgb(242,161,30)" fg:x="93676" fg:w="106"/><text x="75.9472%" y="927.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (105 samples, 0.08%)</title><rect x="75.6980%" y="901" width="0.0848%" height="15" fill="rgb(218,58,44)" fg:x="93677" fg:w="105"/><text x="75.9480%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (103 samples, 0.08%)</title><rect x="75.6996%" y="885" width="0.0832%" height="15" fill="rgb(252,125,32)" fg:x="93679" fg:w="103"/><text x="75.9496%" y="895.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (103 samples, 0.08%)</title><rect x="75.6996%" y="869" width="0.0832%" height="15" fill="rgb(219,178,0)" fg:x="93679" fg:w="103"/><text x="75.9496%" y="879.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (69 samples, 0.06%)</title><rect x="75.7271%" y="853" width="0.0558%" height="15" fill="rgb(213,152,7)" fg:x="93713" fg:w="69"/><text x="75.9771%" y="863.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (52 samples, 0.04%)</title><rect x="75.7408%" y="837" width="0.0420%" height="15" fill="rgb(249,109,34)" fg:x="93730" fg:w="52"/><text x="75.9908%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (21 samples, 0.02%)</title><rect x="75.7659%" y="821" width="0.0170%" height="15" fill="rgb(232,96,21)" fg:x="93761" fg:w="21"/><text x="76.0159%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_load (21 samples, 0.02%)</title><rect x="75.7659%" y="805" width="0.0170%" height="15" fill="rgb(228,27,39)" fg:x="93761" fg:w="21"/><text x="76.0159%" y="815.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (136 samples, 0.11%)</title><rect x="75.6850%" y="933" width="0.1099%" height="15" fill="rgb(211,182,52)" fg:x="93661" fg:w="136"/><text x="75.9350%" y="943.50"></text></g><g><title>event_listener::List::remove (14 samples, 0.01%)</title><rect x="75.7836%" y="917" width="0.0113%" height="15" fill="rgb(234,178,38)" fg:x="93783" fg:w="14"/><text x="76.0336%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (268 samples, 0.22%)</title><rect x="75.6818%" y="965" width="0.2166%" height="15" fill="rgb(221,111,3)" fg:x="93657" fg:w="268"/><text x="75.9318%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (265 samples, 0.21%)</title><rect x="75.6842%" y="949" width="0.2141%" height="15" fill="rgb(228,175,21)" fg:x="93660" fg:w="265"/><text x="75.9342%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (128 samples, 0.10%)</title><rect x="75.7949%" y="933" width="0.1034%" height="15" fill="rgb(228,174,43)" fg:x="93797" fg:w="128"/><text x="76.0449%" y="943.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (128 samples, 0.10%)</title><rect x="75.7949%" y="917" width="0.1034%" height="15" fill="rgb(211,191,0)" fg:x="93797" fg:w="128"/><text x="76.0449%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (126 samples, 0.10%)</title><rect x="75.7966%" y="901" width="0.1018%" height="15" fill="rgb(253,117,3)" fg:x="93799" fg:w="126"/><text x="76.0466%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_sub (126 samples, 0.10%)</title><rect x="75.7966%" y="885" width="0.1018%" height="15" fill="rgb(241,127,19)" fg:x="93799" fg:w="126"/><text x="76.0466%" y="895.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (102 samples, 0.08%)</title><rect x="75.9081%" y="949" width="0.0824%" height="15" fill="rgb(218,103,12)" fg:x="93937" fg:w="102"/><text x="76.1581%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (102 samples, 0.08%)</title><rect x="75.9081%" y="933" width="0.0824%" height="15" fill="rgb(236,214,43)" fg:x="93937" fg:w="102"/><text x="76.1581%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_add (102 samples, 0.08%)</title><rect x="75.9081%" y="917" width="0.0824%" height="15" fill="rgb(244,144,19)" fg:x="93937" fg:w="102"/><text x="76.1581%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (126 samples, 0.10%)</title><rect x="75.9905%" y="949" width="0.1018%" height="15" fill="rgb(246,188,10)" fg:x="94039" fg:w="126"/><text x="76.2405%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (123 samples, 0.10%)</title><rect x="75.9929%" y="933" width="0.0994%" height="15" fill="rgb(212,193,33)" fg:x="94042" fg:w="123"/><text x="76.2429%" y="943.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (123 samples, 0.10%)</title><rect x="75.9929%" y="917" width="0.0994%" height="15" fill="rgb(241,51,29)" fg:x="94042" fg:w="123"/><text x="76.2429%" y="927.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (123 samples, 0.10%)</title><rect x="75.9929%" y="901" width="0.0994%" height="15" fill="rgb(211,58,19)" fg:x="94042" fg:w="123"/><text x="76.2429%" y="911.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (123 samples, 0.10%)</title><rect x="75.9929%" y="885" width="0.0994%" height="15" fill="rgb(229,111,26)" fg:x="94042" fg:w="123"/><text x="76.2429%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (123 samples, 0.10%)</title><rect x="75.9929%" y="869" width="0.0994%" height="15" fill="rgb(213,115,40)" fg:x="94042" fg:w="123"/><text x="76.2429%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_swap (123 samples, 0.10%)</title><rect x="75.9929%" y="853" width="0.0994%" height="15" fill="rgb(209,56,44)" fg:x="94042" fg:w="123"/><text x="76.2429%" y="863.50"></text></g><g><title>event_listener::Inner::lock (63 samples, 0.05%)</title><rect x="76.0939%" y="949" width="0.0509%" height="15" fill="rgb(230,108,32)" fg:x="94167" fg:w="63"/><text x="76.3439%" y="959.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (59 samples, 0.05%)</title><rect x="76.0972%" y="933" width="0.0477%" height="15" fill="rgb(216,165,31)" fg:x="94171" fg:w="59"/><text x="76.3472%" y="943.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (52 samples, 0.04%)</title><rect x="76.1028%" y="917" width="0.0420%" height="15" fill="rgb(218,122,21)" fg:x="94178" fg:w="52"/><text x="76.3528%" y="927.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (52 samples, 0.04%)</title><rect x="76.1028%" y="901" width="0.0420%" height="15" fill="rgb(223,224,47)" fg:x="94178" fg:w="52"/><text x="76.3528%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (52 samples, 0.04%)</title><rect x="76.1028%" y="885" width="0.0420%" height="15" fill="rgb(238,102,44)" fg:x="94178" fg:w="52"/><text x="76.3528%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (52 samples, 0.04%)</title><rect x="76.1028%" y="869" width="0.0420%" height="15" fill="rgb(236,46,40)" fg:x="94178" fg:w="52"/><text x="76.3528%" y="879.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (6,551 samples, 5.29%)</title><rect x="70.9045%" y="981" width="5.2937%" height="15" fill="rgb(247,202,50)" fg:x="87745" fg:w="6551"/><text x="71.1545%" y="991.50">&lt;async..</text></g><g><title>event_listener::Event::listen (371 samples, 0.30%)</title><rect x="75.8984%" y="965" width="0.2998%" height="15" fill="rgb(209,99,20)" fg:x="93925" fg:w="371"/><text x="76.1484%" y="975.50"></text></g><g><title>event_listener::full_fence (54 samples, 0.04%)</title><rect x="76.1545%" y="949" width="0.0436%" height="15" fill="rgb(252,27,34)" fg:x="94242" fg:w="54"/><text x="76.4045%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (47 samples, 0.04%)</title><rect x="76.1602%" y="933" width="0.0380%" height="15" fill="rgb(215,206,23)" fg:x="94249" fg:w="47"/><text x="76.4102%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (47 samples, 0.04%)</title><rect x="76.1602%" y="917" width="0.0380%" height="15" fill="rgb(212,135,36)" fg:x="94249" fg:w="47"/><text x="76.4102%" y="927.50"></text></g><g><title>[libc-2.31.so] (194 samples, 0.16%)</title><rect x="76.2071%" y="965" width="0.1568%" height="15" fill="rgb(240,189,1)" fg:x="94307" fg:w="194"/><text x="76.4571%" y="975.50"></text></g><g><title>[libc-2.31.so] (1,458 samples, 1.18%)</title><rect x="76.3703%" y="933" width="1.1782%" height="15" fill="rgb(242,56,20)" fg:x="94509" fg:w="1458"/><text x="76.6203%" y="943.50"></text></g><g><title>sn_rust_dealloc (98 samples, 0.08%)</title><rect x="77.5533%" y="853" width="0.0792%" height="15" fill="rgb(247,132,33)" fg:x="95973" fg:w="98"/><text x="77.8033%" y="863.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (8,662 samples, 7.00%)</title><rect x="70.8600%" y="1013" width="6.9995%" height="15" fill="rgb(208,149,11)" fg:x="87690" fg:w="8662"/><text x="71.1100%" y="1023.50">&lt;async_st..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (8,633 samples, 6.98%)</title><rect x="70.8835%" y="997" width="6.9761%" height="15" fill="rgb(211,33,11)" fg:x="87719" fg:w="8633"/><text x="71.1335%" y="1007.50">&lt;async_st..</text></g><g><title>core::option::Option&lt;T&gt;::map (2,056 samples, 1.66%)</title><rect x="76.1982%" y="981" width="1.6614%" height="15" fill="rgb(221,29,38)" fg:x="94296" fg:w="2056"/><text x="76.4482%" y="991.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,851 samples, 1.50%)</title><rect x="76.3638%" y="965" width="1.4957%" height="15" fill="rgb(206,182,49)" fg:x="94501" fg:w="1851"/><text x="76.6138%" y="975.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}}::{{closure}} (1,851 samples, 1.50%)</title><rect x="76.3638%" y="949" width="1.4957%" height="15" fill="rgb(216,140,1)" fg:x="94501" fg:w="1851"/><text x="76.6138%" y="959.50"></text></g><g><title>alloc::alloc::box_free (385 samples, 0.31%)</title><rect x="77.5485%" y="933" width="0.3111%" height="15" fill="rgb(232,57,40)" fg:x="95967" fg:w="385"/><text x="77.7985%" y="943.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (385 samples, 0.31%)</title><rect x="77.5485%" y="917" width="0.3111%" height="15" fill="rgb(224,186,18)" fg:x="95967" fg:w="385"/><text x="77.7985%" y="927.50"></text></g><g><title>alloc::alloc::dealloc (385 samples, 0.31%)</title><rect x="77.5485%" y="901" width="0.3111%" height="15" fill="rgb(215,121,11)" fg:x="95967" fg:w="385"/><text x="77.7985%" y="911.50"></text></g><g><title>__rg_dealloc (385 samples, 0.31%)</title><rect x="77.5485%" y="885" width="0.3111%" height="15" fill="rgb(245,147,10)" fg:x="95967" fg:w="385"/><text x="77.7985%" y="895.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (385 samples, 0.31%)</title><rect x="77.5485%" y="869" width="0.3111%" height="15" fill="rgb(238,153,13)" fg:x="95967" fg:w="385"/><text x="77.7985%" y="879.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (281 samples, 0.23%)</title><rect x="77.6325%" y="853" width="0.2271%" height="15" fill="rgb(233,108,0)" fg:x="96071" fg:w="281"/><text x="77.8825%" y="863.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,999 samples, 8.08%)</title><rect x="70.8237%" y="1077" width="8.0799%" height="15" fill="rgb(212,157,17)" fg:x="87645" fg:w="9999"/><text x="71.0737%" y="1087.50">&lt;async_std:..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (9,994 samples, 8.08%)</title><rect x="70.8277%" y="1061" width="8.0759%" height="15" fill="rgb(225,213,38)" fg:x="87650" fg:w="9994"/><text x="71.0777%" y="1071.50">&lt;tremor_run..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (9,994 samples, 8.08%)</title><rect x="70.8277%" y="1045" width="8.0759%" height="15" fill="rgb(248,16,11)" fg:x="87650" fg:w="9994"/><text x="71.0777%" y="1055.50">&lt;async_std:..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (9,994 samples, 8.08%)</title><rect x="70.8277%" y="1029" width="8.0759%" height="15" fill="rgb(241,33,4)" fg:x="87650" fg:w="9994"/><text x="71.0777%" y="1039.50">&lt;tremor_run..</text></g><g><title>[libc-2.31.so] (1,292 samples, 1.04%)</title><rect x="77.8596%" y="1013" width="1.0440%" height="15" fill="rgb(222,26,43)" fg:x="96352" fg:w="1292"/><text x="78.1096%" y="1023.50"></text></g><g><title>[libc-2.31.so] (123 samples, 0.10%)</title><rect x="78.9052%" y="1029" width="0.0994%" height="15" fill="rgb(243,29,36)" fg:x="97646" fg:w="123"/><text x="79.1552%" y="1039.50"></text></g><g><title>[libc-2.31.so] (357 samples, 0.29%)</title><rect x="79.3505%" y="965" width="0.2885%" height="15" fill="rgb(241,9,27)" fg:x="98197" fg:w="357"/><text x="79.6005%" y="975.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (182 samples, 0.15%)</title><rect x="79.7109%" y="949" width="0.1471%" height="15" fill="rgb(205,117,26)" fg:x="98643" fg:w="182"/><text x="79.9609%" y="959.50"></text></g><g><title>core::ptr::write (182 samples, 0.15%)</title><rect x="79.7109%" y="933" width="0.1471%" height="15" fill="rgb(209,80,39)" fg:x="98643" fg:w="182"/><text x="79.9609%" y="943.50"></text></g><g><title>[libc-2.31.so] (174 samples, 0.14%)</title><rect x="79.7173%" y="917" width="0.1406%" height="15" fill="rgb(239,155,6)" fg:x="98651" fg:w="174"/><text x="79.9673%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (291 samples, 0.24%)</title><rect x="79.8579%" y="949" width="0.2351%" height="15" fill="rgb(212,104,12)" fg:x="98825" fg:w="291"/><text x="80.1079%" y="959.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (291 samples, 0.24%)</title><rect x="79.8579%" y="933" width="0.2351%" height="15" fill="rgb(234,204,3)" fg:x="98825" fg:w="291"/><text x="80.1079%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (152 samples, 0.12%)</title><rect x="80.0931%" y="949" width="0.1228%" height="15" fill="rgb(251,218,7)" fg:x="99116" fg:w="152"/><text x="80.3431%" y="959.50"></text></g><g><title>core::sync::atomic::atomic_load (152 samples, 0.12%)</title><rect x="80.0931%" y="933" width="0.1228%" height="15" fill="rgb(221,81,32)" fg:x="99116" fg:w="152"/><text x="80.3431%" y="943.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (1,281 samples, 1.04%)</title><rect x="79.1889%" y="981" width="1.0351%" height="15" fill="rgb(214,152,26)" fg:x="97997" fg:w="1281"/><text x="79.4389%" y="991.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (724 samples, 0.59%)</title><rect x="79.6390%" y="965" width="0.5850%" height="15" fill="rgb(223,22,3)" fg:x="98554" fg:w="724"/><text x="79.8890%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (13 samples, 0.01%)</title><rect x="80.2377%" y="965" width="0.0105%" height="15" fill="rgb(207,174,7)" fg:x="99295" fg:w="13"/><text x="80.4877%" y="975.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (15 samples, 0.01%)</title><rect x="80.2482%" y="965" width="0.0121%" height="15" fill="rgb(224,19,52)" fg:x="99308" fg:w="15"/><text x="80.4982%" y="975.50"></text></g><g><title>core::sync::atomic::atomic_load (15 samples, 0.01%)</title><rect x="80.2482%" y="949" width="0.0121%" height="15" fill="rgb(228,24,14)" fg:x="99308" fg:w="15"/><text x="80.4982%" y="959.50"></text></g><g><title>event_listener::Inner::lock (17 samples, 0.01%)</title><rect x="80.2604%" y="965" width="0.0137%" height="15" fill="rgb(230,153,43)" fg:x="99323" fg:w="17"/><text x="80.5104%" y="975.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (16 samples, 0.01%)</title><rect x="80.2612%" y="949" width="0.0129%" height="15" fill="rgb(231,106,12)" fg:x="99324" fg:w="16"/><text x="80.5112%" y="959.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (16 samples, 0.01%)</title><rect x="80.2612%" y="933" width="0.0129%" height="15" fill="rgb(215,92,2)" fg:x="99324" fg:w="16"/><text x="80.5112%" y="943.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (16 samples, 0.01%)</title><rect x="80.2612%" y="917" width="0.0129%" height="15" fill="rgb(249,143,25)" fg:x="99324" fg:w="16"/><text x="80.5112%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (16 samples, 0.01%)</title><rect x="80.2612%" y="901" width="0.0129%" height="15" fill="rgb(252,7,35)" fg:x="99324" fg:w="16"/><text x="80.5112%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (16 samples, 0.01%)</title><rect x="80.2612%" y="885" width="0.0129%" height="15" fill="rgb(216,69,40)" fg:x="99324" fg:w="16"/><text x="80.5112%" y="895.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (32 samples, 0.03%)</title><rect x="80.3153%" y="837" width="0.0259%" height="15" fill="rgb(240,36,33)" fg:x="99391" fg:w="32"/><text x="80.5653%" y="847.50"></text></g><g><title>parking::Unparker::unpark (29 samples, 0.02%)</title><rect x="80.3177%" y="821" width="0.0234%" height="15" fill="rgb(231,128,14)" fg:x="99394" fg:w="29"/><text x="80.5677%" y="831.50"></text></g><g><title>parking::Inner::unpark (18 samples, 0.01%)</title><rect x="80.3266%" y="805" width="0.0145%" height="15" fill="rgb(245,143,14)" fg:x="99405" fg:w="18"/><text x="80.5766%" y="815.50"></text></g><g><title>core::task::wake::Waker::wake (41 samples, 0.03%)</title><rect x="80.3153%" y="869" width="0.0331%" height="15" fill="rgb(222,130,28)" fg:x="99391" fg:w="41"/><text x="80.5653%" y="879.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (41 samples, 0.03%)</title><rect x="80.3153%" y="853" width="0.0331%" height="15" fill="rgb(212,10,48)" fg:x="99391" fg:w="41"/><text x="80.5653%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (13 samples, 0.01%)</title><rect x="80.3484%" y="821" width="0.0105%" height="15" fill="rgb(254,118,45)" fg:x="99432" fg:w="13"/><text x="80.5984%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (13 samples, 0.01%)</title><rect x="80.3484%" y="805" width="0.0105%" height="15" fill="rgb(228,6,45)" fg:x="99432" fg:w="13"/><text x="80.5984%" y="815.50"></text></g><g><title>async_executor::State::notify (93 samples, 0.08%)</title><rect x="80.2886%" y="885" width="0.0752%" height="15" fill="rgb(241,18,35)" fg:x="99358" fg:w="93"/><text x="80.5386%" y="895.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (19 samples, 0.02%)</title><rect x="80.3484%" y="869" width="0.0154%" height="15" fill="rgb(227,214,53)" fg:x="99432" fg:w="19"/><text x="80.5984%" y="879.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (19 samples, 0.02%)</title><rect x="80.3484%" y="853" width="0.0154%" height="15" fill="rgb(224,107,51)" fg:x="99432" fg:w="19"/><text x="80.5984%" y="863.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (19 samples, 0.02%)</title><rect x="80.3484%" y="837" width="0.0154%" height="15" fill="rgb(248,60,28)" fg:x="99432" fg:w="19"/><text x="80.5984%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (44 samples, 0.04%)</title><rect x="80.3767%" y="853" width="0.0356%" height="15" fill="rgb(249,101,23)" fg:x="99467" fg:w="44"/><text x="80.6267%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (44 samples, 0.04%)</title><rect x="80.3767%" y="837" width="0.0356%" height="15" fill="rgb(228,51,19)" fg:x="99467" fg:w="44"/><text x="80.6267%" y="847.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (168 samples, 0.14%)</title><rect x="80.2886%" y="901" width="0.1358%" height="15" fill="rgb(213,20,6)" fg:x="99358" fg:w="168"/><text x="80.5386%" y="911.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (75 samples, 0.06%)</title><rect x="80.3638%" y="885" width="0.0606%" height="15" fill="rgb(212,124,10)" fg:x="99451" fg:w="75"/><text x="80.6138%" y="895.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (70 samples, 0.06%)</title><rect x="80.3678%" y="869" width="0.0566%" height="15" fill="rgb(248,3,40)" fg:x="99456" fg:w="70"/><text x="80.6178%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (15 samples, 0.01%)</title><rect x="80.4123%" y="853" width="0.0121%" height="15" fill="rgb(223,178,23)" fg:x="99511" fg:w="15"/><text x="80.6623%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_or (15 samples, 0.01%)</title><rect x="80.4123%" y="837" width="0.0121%" height="15" fill="rgb(240,132,45)" fg:x="99511" fg:w="15"/><text x="80.6623%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (39 samples, 0.03%)</title><rect x="80.4244%" y="901" width="0.0315%" height="15" fill="rgb(245,164,36)" fg:x="99526" fg:w="39"/><text x="80.6744%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (39 samples, 0.03%)</title><rect x="80.4244%" y="885" width="0.0315%" height="15" fill="rgb(231,188,53)" fg:x="99526" fg:w="39"/><text x="80.6744%" y="895.50"></text></g><g><title>event_listener::List::notify (237 samples, 0.19%)</title><rect x="80.2741%" y="965" width="0.1915%" height="15" fill="rgb(237,198,39)" fg:x="99340" fg:w="237"/><text x="80.5241%" y="975.50"></text></g><g><title>core::task::wake::Waker::wake (228 samples, 0.18%)</title><rect x="80.2814%" y="949" width="0.1842%" height="15" fill="rgb(223,120,35)" fg:x="99349" fg:w="228"/><text x="80.5314%" y="959.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (228 samples, 0.18%)</title><rect x="80.2814%" y="933" width="0.1842%" height="15" fill="rgb(253,107,49)" fg:x="99349" fg:w="228"/><text x="80.5314%" y="943.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (220 samples, 0.18%)</title><rect x="80.2878%" y="917" width="0.1778%" height="15" fill="rgb(216,44,31)" fg:x="99357" fg:w="220"/><text x="80.5378%" y="927.50"></text></g><g><title>event_listener::full_fence (1,401 samples, 1.13%)</title><rect x="80.4656%" y="965" width="1.1321%" height="15" fill="rgb(253,87,21)" fg:x="99577" fg:w="1401"/><text x="80.7156%" y="975.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1,389 samples, 1.12%)</title><rect x="80.4753%" y="949" width="1.1224%" height="15" fill="rgb(226,18,2)" fg:x="99589" fg:w="1389"/><text x="80.7253%" y="959.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1,389 samples, 1.12%)</title><rect x="80.4753%" y="933" width="1.1224%" height="15" fill="rgb(216,8,46)" fg:x="99589" fg:w="1389"/><text x="80.7253%" y="943.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (3,000 samples, 2.42%)</title><rect x="79.1751%" y="997" width="2.4242%" height="15" fill="rgb(226,140,39)" fg:x="97980" fg:w="3000"/><text x="79.4251%" y="1007.50">as..</text></g><g><title>event_listener::Event::notify (1,702 samples, 1.38%)</title><rect x="80.2240%" y="981" width="1.3753%" height="15" fill="rgb(221,194,54)" fg:x="99278" fg:w="1702"/><text x="80.4740%" y="991.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::capacity (18 samples, 0.01%)</title><rect x="81.5993%" y="997" width="0.0145%" height="15" fill="rgb(213,92,11)" fg:x="100980" fg:w="18"/><text x="81.8493%" y="1007.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (3,336 samples, 2.70%)</title><rect x="79.1307%" y="1013" width="2.6957%" height="15" fill="rgb(229,162,46)" fg:x="97925" fg:w="3336"/><text x="79.3807%" y="1023.50">&lt;a..</text></g><g><title>event_listener::Event::notify (253 samples, 0.20%)</title><rect x="81.6220%" y="997" width="0.2044%" height="15" fill="rgb(214,111,36)" fg:x="101008" fg:w="253"/><text x="81.8720%" y="1007.50"></text></g><g><title>event_listener::full_fence (235 samples, 0.19%)</title><rect x="81.6365%" y="981" width="0.1899%" height="15" fill="rgb(207,6,21)" fg:x="101026" fg:w="235"/><text x="81.8865%" y="991.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (226 samples, 0.18%)</title><rect x="81.6438%" y="965" width="0.1826%" height="15" fill="rgb(213,127,38)" fg:x="101035" fg:w="226"/><text x="81.8938%" y="975.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (226 samples, 0.18%)</title><rect x="81.6438%" y="949" width="0.1826%" height="15" fill="rgb(238,118,32)" fg:x="101035" fg:w="226"/><text x="81.8938%" y="959.50"></text></g><g><title>[libc-2.31.so] (792 samples, 0.64%)</title><rect x="81.8321%" y="1013" width="0.6400%" height="15" fill="rgb(240,139,39)" fg:x="101268" fg:w="792"/><text x="82.0821%" y="1023.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (14,444 samples, 11.67%)</title><rect x="70.8204%" y="1093" width="11.6718%" height="15" fill="rgb(235,10,37)" fg:x="87641" fg:w="14444"/><text x="71.0704%" y="1103.50">tremor_runtime::p..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,441 samples, 3.59%)</title><rect x="78.9036%" y="1077" width="3.5887%" height="15" fill="rgb(249,171,38)" fg:x="97644" fg:w="4441"/><text x="79.1536%" y="1087.50">&lt;cor..</text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (4,441 samples, 3.59%)</title><rect x="78.9036%" y="1061" width="3.5887%" height="15" fill="rgb(242,144,32)" fg:x="97644" fg:w="4441"/><text x="79.1536%" y="1071.50">trem..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,441 samples, 3.59%)</title><rect x="78.9036%" y="1045" width="3.5887%" height="15" fill="rgb(217,117,21)" fg:x="97644" fg:w="4441"/><text x="79.1536%" y="1055.50">&lt;cor..</text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (4,316 samples, 3.49%)</title><rect x="79.0046%" y="1029" width="3.4876%" height="15" fill="rgb(249,87,1)" fg:x="97769" fg:w="4316"/><text x="79.2546%" y="1039.50">tre..</text></g><g><title>core::ptr::drop_in_place&lt;async_channel::Send&lt;tremor_runtime::connectors::sink::SinkMsg&gt;&gt; (25 samples, 0.02%)</title><rect x="82.4721%" y="1013" width="0.0202%" height="15" fill="rgb(248,196,48)" fg:x="102060" fg:w="25"/><text x="82.7221%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;tremor_runtime::connectors::sink::SinkMsg&gt;&gt; (16 samples, 0.01%)</title><rect x="82.4793%" y="997" width="0.0129%" height="15" fill="rgb(251,206,33)" fg:x="102069" fg:w="16"/><text x="82.7293%" y="1007.50"></text></g><g><title>tremor_runtime::postprocessor::postprocess (48 samples, 0.04%)</title><rect x="82.4923%" y="1093" width="0.0388%" height="15" fill="rgb(232,141,28)" fg:x="102085" fg:w="48"/><text x="82.7423%" y="1103.50"></text></g><g><title>tremor_script::srs::EventPayload::try_new (14 samples, 0.01%)</title><rect x="82.5359%" y="1093" width="0.0113%" height="15" fill="rgb(209,167,14)" fg:x="102139" fg:w="14"/><text x="82.7859%" y="1103.50"></text></g><g><title>[unknown] (96,672 samples, 78.12%)</title><rect x="4.4379%" y="1109" width="78.1182%" height="15" fill="rgb(225,11,50)" fg:x="5492" fg:w="96672"/><text x="4.6879%" y="1119.50">[unknown]</text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (25 samples, 0.02%)</title><rect x="82.5561%" y="1093" width="0.0202%" height="15" fill="rgb(209,50,20)" fg:x="102164" fg:w="25"/><text x="82.8061%" y="1103.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (15 samples, 0.01%)</title><rect x="82.5763%" y="1093" width="0.0121%" height="15" fill="rgb(212,17,46)" fg:x="102189" fg:w="15"/><text x="82.8263%" y="1103.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (18 samples, 0.01%)</title><rect x="82.5884%" y="1093" width="0.0145%" height="15" fill="rgb(216,101,39)" fg:x="102204" fg:w="18"/><text x="82.8384%" y="1103.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (39 samples, 0.03%)</title><rect x="82.6030%" y="1093" width="0.0315%" height="15" fill="rgb(212,228,48)" fg:x="102222" fg:w="39"/><text x="82.8530%" y="1103.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (37 samples, 0.03%)</title><rect x="82.6046%" y="1077" width="0.0299%" height="15" fill="rgb(250,6,50)" fg:x="102224" fg:w="37"/><text x="82.8546%" y="1087.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (36 samples, 0.03%)</title><rect x="82.6054%" y="1061" width="0.0291%" height="15" fill="rgb(250,160,48)" fg:x="102225" fg:w="36"/><text x="82.8554%" y="1071.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (17 samples, 0.01%)</title><rect x="82.6345%" y="1093" width="0.0137%" height="15" fill="rgb(244,216,33)" fg:x="102261" fg:w="17"/><text x="82.8845%" y="1103.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (48 samples, 0.04%)</title><rect x="82.6531%" y="1093" width="0.0388%" height="15" fill="rgb(207,157,5)" fg:x="102284" fg:w="48"/><text x="82.9031%" y="1103.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (47 samples, 0.04%)</title><rect x="82.8050%" y="1077" width="0.0380%" height="15" fill="rgb(228,199,8)" fg:x="102472" fg:w="47"/><text x="83.0550%" y="1087.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (41 samples, 0.03%)</title><rect x="82.8098%" y="1061" width="0.0331%" height="15" fill="rgb(227,80,20)" fg:x="102478" fg:w="41"/><text x="83.0598%" y="1071.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (28 samples, 0.02%)</title><rect x="82.8203%" y="1045" width="0.0226%" height="15" fill="rgb(222,9,33)" fg:x="102491" fg:w="28"/><text x="83.0703%" y="1055.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (28 samples, 0.02%)</title><rect x="82.8203%" y="1029" width="0.0226%" height="15" fill="rgb(239,44,28)" fg:x="102491" fg:w="28"/><text x="83.0703%" y="1039.50"></text></g><g><title>__dso_handle (365 samples, 0.29%)</title><rect x="82.5561%" y="1109" width="0.2949%" height="15" fill="rgb(249,187,43)" fg:x="102164" fg:w="365"/><text x="82.8061%" y="1119.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (168 samples, 0.14%)</title><rect x="82.7153%" y="1093" width="0.1358%" height="15" fill="rgb(216,141,28)" fg:x="102361" fg:w="168"/><text x="82.9653%" y="1103.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (16 samples, 0.01%)</title><rect x="82.8704%" y="1109" width="0.0129%" height="15" fill="rgb(230,154,53)" fg:x="102553" fg:w="16"/><text x="83.1204%" y="1119.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (22 samples, 0.02%)</title><rect x="82.8866%" y="1109" width="0.0178%" height="15" fill="rgb(227,82,4)" fg:x="102573" fg:w="22"/><text x="83.1366%" y="1119.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (15 samples, 0.01%)</title><rect x="82.9092%" y="1109" width="0.0121%" height="15" fill="rgb(220,107,16)" fg:x="102601" fg:w="15"/><text x="83.1592%" y="1119.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (23 samples, 0.02%)</title><rect x="82.9214%" y="1109" width="0.0186%" height="15" fill="rgb(207,187,2)" fg:x="102616" fg:w="23"/><text x="83.1714%" y="1119.50"></text></g><g><title>anon.07842ee8e079d9ed68873cd915a87b2c.9.llvm.16273340636564346165 (26 samples, 0.02%)</title><rect x="82.9561%" y="1109" width="0.0210%" height="15" fill="rgb(210,162,52)" fg:x="102659" fg:w="26"/><text x="83.2061%" y="1119.50"></text></g><g><title>anon.806c3673e558314b3649691fa743c51c.18.llvm.8581807618519199104 (19 samples, 0.02%)</title><rect x="83.0054%" y="1109" width="0.0154%" height="15" fill="rgb(217,216,49)" fg:x="102720" fg:w="19"/><text x="83.2554%" y="1119.50"></text></g><g><title>anon.8ce0b22ff3e27106f8f01c1937a05035.75.llvm.6479443255872754296 (17 samples, 0.01%)</title><rect x="83.0207%" y="1109" width="0.0137%" height="15" fill="rgb(218,146,49)" fg:x="102739" fg:w="17"/><text x="83.2707%" y="1119.50"></text></g><g><title>anon.9d5bffa143ece3cd04934c706b3d26f1.2787.llvm.17768046373175460591 (16 samples, 0.01%)</title><rect x="83.0426%" y="1109" width="0.0129%" height="15" fill="rgb(216,55,40)" fg:x="102766" fg:w="16"/><text x="83.2926%" y="1119.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (16 samples, 0.01%)</title><rect x="83.0426%" y="1093" width="0.0129%" height="15" fill="rgb(208,196,21)" fg:x="102766" fg:w="16"/><text x="83.2926%" y="1103.50"></text></g><g><title>async_executor::steal (14 samples, 0.01%)</title><rect x="83.0587%" y="1109" width="0.0113%" height="15" fill="rgb(242,117,42)" fg:x="102786" fg:w="14"/><text x="83.3087%" y="1119.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (50 samples, 0.04%)</title><rect x="83.1016%" y="1077" width="0.0404%" height="15" fill="rgb(210,11,23)" fg:x="102839" fg:w="50"/><text x="83.3516%" y="1087.50"></text></g><g><title>async_task::runnable::Runnable::run (50 samples, 0.04%)</title><rect x="83.1016%" y="1061" width="0.0404%" height="15" fill="rgb(217,110,2)" fg:x="102839" fg:w="50"/><text x="83.3516%" y="1071.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (80 samples, 0.06%)</title><rect x="83.0822%" y="1093" width="0.0646%" height="15" fill="rgb(229,77,54)" fg:x="102815" fg:w="80"/><text x="83.3322%" y="1103.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (33 samples, 0.03%)</title><rect x="83.1476%" y="1093" width="0.0267%" height="15" fill="rgb(218,53,16)" fg:x="102896" fg:w="33"/><text x="83.3976%" y="1103.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (30 samples, 0.02%)</title><rect x="83.1500%" y="1077" width="0.0242%" height="15" fill="rgb(215,38,13)" fg:x="102899" fg:w="30"/><text x="83.4000%" y="1087.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (26 samples, 0.02%)</title><rect x="83.1533%" y="1061" width="0.0210%" height="15" fill="rgb(235,42,18)" fg:x="102903" fg:w="26"/><text x="83.4033%" y="1071.50"></text></g><g><title>parking::Inner::park (17 samples, 0.01%)</title><rect x="83.1945%" y="1093" width="0.0137%" height="15" fill="rgb(219,66,54)" fg:x="102954" fg:w="17"/><text x="83.4445%" y="1103.50"></text></g><g><title>polling::epoll::Poller::modify (21 samples, 0.02%)</title><rect x="83.2098%" y="1093" width="0.0170%" height="15" fill="rgb(222,205,4)" fg:x="102973" fg:w="21"/><text x="83.4598%" y="1103.50"></text></g><g><title>async_io::reactor::Reactor::get::REACTOR (185 samples, 0.15%)</title><rect x="83.0781%" y="1109" width="0.1495%" height="15" fill="rgb(227,213,46)" fg:x="102810" fg:w="185"/><text x="83.3281%" y="1119.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (51 samples, 0.04%)</title><rect x="83.7359%" y="501" width="0.0412%" height="15" fill="rgb(250,145,42)" fg:x="103624" fg:w="51"/><text x="83.9859%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::nth (16 samples, 0.01%)</title><rect x="83.8555%" y="437" width="0.0129%" height="15" fill="rgb(219,15,2)" fg:x="103772" fg:w="16"/><text x="84.1055%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (53 samples, 0.04%)</title><rect x="84.0438%" y="405" width="0.0428%" height="15" fill="rgb(231,181,52)" fg:x="104005" fg:w="53"/><text x="84.2938%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (51 samples, 0.04%)</title><rect x="84.0454%" y="389" width="0.0412%" height="15" fill="rgb(235,1,42)" fg:x="104007" fg:w="51"/><text x="84.2954%" y="399.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (42 samples, 0.03%)</title><rect x="84.0527%" y="373" width="0.0339%" height="15" fill="rgb(249,88,27)" fg:x="104016" fg:w="42"/><text x="84.3027%" y="383.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (42 samples, 0.03%)</title><rect x="84.0527%" y="357" width="0.0339%" height="15" fill="rgb(235,145,16)" fg:x="104016" fg:w="42"/><text x="84.3027%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (42 samples, 0.03%)</title><rect x="84.0527%" y="341" width="0.0339%" height="15" fill="rgb(237,114,19)" fg:x="104016" fg:w="42"/><text x="84.3027%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (153 samples, 0.12%)</title><rect x="84.0866%" y="405" width="0.1236%" height="15" fill="rgb(238,51,50)" fg:x="104058" fg:w="153"/><text x="84.3366%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (623 samples, 0.50%)</title><rect x="83.7844%" y="453" width="0.5034%" height="15" fill="rgb(205,194,25)" fg:x="103684" fg:w="623"/><text x="84.0344%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (519 samples, 0.42%)</title><rect x="83.8684%" y="437" width="0.4194%" height="15" fill="rgb(215,203,17)" fg:x="103788" fg:w="519"/><text x="84.1184%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (418 samples, 0.34%)</title><rect x="83.9500%" y="421" width="0.3378%" height="15" fill="rgb(233,112,49)" fg:x="103889" fg:w="418"/><text x="84.2000%" y="431.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (96 samples, 0.08%)</title><rect x="84.2102%" y="405" width="0.0776%" height="15" fill="rgb(241,130,26)" fg:x="104211" fg:w="96"/><text x="84.4602%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (96 samples, 0.08%)</title><rect x="84.2102%" y="389" width="0.0776%" height="15" fill="rgb(252,223,19)" fg:x="104211" fg:w="96"/><text x="84.4602%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (49 samples, 0.04%)</title><rect x="84.2482%" y="373" width="0.0396%" height="15" fill="rgb(211,95,25)" fg:x="104258" fg:w="49"/><text x="84.4982%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (49 samples, 0.04%)</title><rect x="84.2482%" y="357" width="0.0396%" height="15" fill="rgb(251,182,27)" fg:x="104258" fg:w="49"/><text x="84.4982%" y="367.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (39 samples, 0.03%)</title><rect x="84.2563%" y="341" width="0.0315%" height="15" fill="rgb(238,24,4)" fg:x="104268" fg:w="39"/><text x="84.5063%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (39 samples, 0.03%)</title><rect x="84.2563%" y="325" width="0.0315%" height="15" fill="rgb(224,220,25)" fg:x="104268" fg:w="39"/><text x="84.5063%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (661 samples, 0.53%)</title><rect x="83.7771%" y="501" width="0.5341%" height="15" fill="rgb(239,133,26)" fg:x="103675" fg:w="661"/><text x="84.0271%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (661 samples, 0.53%)</title><rect x="83.7771%" y="485" width="0.5341%" height="15" fill="rgb(211,94,48)" fg:x="103675" fg:w="661"/><text x="84.0271%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (661 samples, 0.53%)</title><rect x="83.7771%" y="469" width="0.5341%" height="15" fill="rgb(239,87,6)" fg:x="103675" fg:w="661"/><text x="84.0271%" y="479.50"></text></g><g><title>core::ops::control_flow::ControlFlow&lt;R,&lt;R as core::ops::try_trait::Try&gt;::Output&gt;::into_try (29 samples, 0.02%)</title><rect x="84.2878%" y="453" width="0.0234%" height="15" fill="rgb(227,62,0)" fg:x="104307" fg:w="29"/><text x="84.5378%" y="463.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::len (1,586 samples, 1.28%)</title><rect x="84.7298%" y="469" width="1.2816%" height="15" fill="rgb(211,226,4)" fg:x="104854" fg:w="1586"/><text x="84.9798%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1,048 samples, 0.85%)</title><rect x="85.1646%" y="453" width="0.8469%" height="15" fill="rgb(253,38,52)" fg:x="105392" fg:w="1048"/><text x="85.4146%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_load (1,048 samples, 0.85%)</title><rect x="85.1646%" y="437" width="0.8469%" height="15" fill="rgb(229,126,40)" fg:x="105392" fg:w="1048"/><text x="85.4146%" y="447.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::len (1,971 samples, 1.59%)</title><rect x="84.4333%" y="485" width="1.5927%" height="15" fill="rgb(229,165,44)" fg:x="104487" fg:w="1971"/><text x="84.6833%" y="495.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::len (18 samples, 0.01%)</title><rect x="86.0114%" y="469" width="0.0145%" height="15" fill="rgb(247,95,47)" fg:x="106440" fg:w="18"/><text x="86.2614%" y="479.50"></text></g><g><title>async_executor::steal (2,128 samples, 1.72%)</title><rect x="84.3112%" y="501" width="1.7196%" height="15" fill="rgb(216,140,30)" fg:x="104336" fg:w="2128"/><text x="84.5612%" y="511.50"></text></g><g><title>concurrent_queue::full_fence (2,336 samples, 1.89%)</title><rect x="86.9536%" y="469" width="1.8877%" height="15" fill="rgb(246,214,8)" fg:x="107606" fg:w="2336"/><text x="87.2036%" y="479.50">c..</text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (2,300 samples, 1.86%)</title><rect x="86.9827%" y="453" width="1.8586%" height="15" fill="rgb(227,224,15)" fg:x="107642" fg:w="2300"/><text x="87.2327%" y="463.50">c..</text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (2,300 samples, 1.86%)</title><rect x="86.9827%" y="437" width="1.8586%" height="15" fill="rgb(233,175,4)" fg:x="107642" fg:w="2300"/><text x="87.2327%" y="447.50">c..</text></g><g><title>core::sync::atomic::atomic_compare_exchange (2,300 samples, 1.86%)</title><rect x="86.9827%" y="421" width="1.8586%" height="15" fill="rgb(221,66,45)" fg:x="107642" fg:w="2300"/><text x="87.2327%" y="431.50">c..</text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (3,288 samples, 2.66%)</title><rect x="86.3064%" y="485" width="2.6569%" height="15" fill="rgb(221,178,18)" fg:x="106805" fg:w="3288"/><text x="86.5564%" y="495.50">co..</text></g><g><title>core::sync::atomic::AtomicUsize::load (151 samples, 0.12%)</title><rect x="88.8413%" y="469" width="0.1220%" height="15" fill="rgb(213,81,29)" fg:x="109942" fg:w="151"/><text x="89.0913%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_load (93 samples, 0.08%)</title><rect x="88.8882%" y="453" width="0.0752%" height="15" fill="rgb(220,89,49)" fg:x="110000" fg:w="93"/><text x="89.1382%" y="463.50"></text></g><g><title>__rg_dealloc (14 samples, 0.01%)</title><rect x="89.0247%" y="469" width="0.0113%" height="15" fill="rgb(227,60,33)" fg:x="110169" fg:w="14"/><text x="89.2747%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (14 samples, 0.01%)</title><rect x="89.0247%" y="453" width="0.0113%" height="15" fill="rgb(205,113,12)" fg:x="110169" fg:w="14"/><text x="89.2747%" y="463.50"></text></g><g><title>concurrent_queue::full_fence (329 samples, 0.27%)</title><rect x="89.0360%" y="469" width="0.2659%" height="15" fill="rgb(211,32,1)" fg:x="110183" fg:w="329"/><text x="89.2860%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (329 samples, 0.27%)</title><rect x="89.0360%" y="453" width="0.2659%" height="15" fill="rgb(246,2,12)" fg:x="110183" fg:w="329"/><text x="89.2860%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (329 samples, 0.27%)</title><rect x="89.0360%" y="437" width="0.2659%" height="15" fill="rgb(243,37,27)" fg:x="110183" fg:w="329"/><text x="89.2860%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (329 samples, 0.27%)</title><rect x="89.0360%" y="421" width="0.2659%" height="15" fill="rgb(248,211,31)" fg:x="110183" fg:w="329"/><text x="89.2860%" y="431.50"></text></g><g><title>concurrent_queue::unbounded::Slot&lt;T&gt;::wait_write (58 samples, 0.05%)</title><rect x="89.3092%" y="469" width="0.0469%" height="15" fill="rgb(242,146,47)" fg:x="110521" fg:w="58"/><text x="89.5592%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (56 samples, 0.05%)</title><rect x="89.3108%" y="453" width="0.0453%" height="15" fill="rgb(206,70,20)" fg:x="110523" fg:w="56"/><text x="89.5608%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_load (56 samples, 0.05%)</title><rect x="89.3108%" y="437" width="0.0453%" height="15" fill="rgb(215,10,51)" fg:x="110523" fg:w="56"/><text x="89.5608%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (31 samples, 0.03%)</title><rect x="89.3698%" y="469" width="0.0251%" height="15" fill="rgb(243,178,53)" fg:x="110596" fg:w="31"/><text x="89.6198%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_load (31 samples, 0.03%)</title><rect x="89.3698%" y="453" width="0.0251%" height="15" fill="rgb(233,221,20)" fg:x="110596" fg:w="31"/><text x="89.6198%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (165 samples, 0.13%)</title><rect x="89.3948%" y="469" width="0.1333%" height="15" fill="rgb(218,95,35)" fg:x="110627" fg:w="165"/><text x="89.6448%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (165 samples, 0.13%)</title><rect x="89.3948%" y="453" width="0.1333%" height="15" fill="rgb(229,13,5)" fg:x="110627" fg:w="165"/><text x="89.6448%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (231 samples, 0.19%)</title><rect x="89.5282%" y="469" width="0.1867%" height="15" fill="rgb(252,164,30)" fg:x="110792" fg:w="231"/><text x="89.7782%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_or (231 samples, 0.19%)</title><rect x="89.5282%" y="453" width="0.1867%" height="15" fill="rgb(232,68,36)" fg:x="110792" fg:w="231"/><text x="89.7782%" y="463.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (4,800 samples, 3.88%)</title><rect x="86.0308%" y="501" width="3.8788%" height="15" fill="rgb(219,59,54)" fg:x="106464" fg:w="4800"/><text x="86.2808%" y="511.50">conc..</text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (1,171 samples, 0.95%)</title><rect x="88.9633%" y="485" width="0.9463%" height="15" fill="rgb(250,92,33)" fg:x="110093" fg:w="1171"/><text x="89.2133%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (241 samples, 0.19%)</title><rect x="89.7148%" y="469" width="0.1947%" height="15" fill="rgb(229,162,54)" fg:x="111023" fg:w="241"/><text x="89.9648%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_load (241 samples, 0.19%)</title><rect x="89.7148%" y="453" width="0.1947%" height="15" fill="rgb(244,114,52)" fg:x="111023" fg:w="241"/><text x="89.9648%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (267 samples, 0.22%)</title><rect x="89.9096%" y="501" width="0.2158%" height="15" fill="rgb(212,211,43)" fg:x="111264" fg:w="267"/><text x="90.1596%" y="511.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (267 samples, 0.22%)</title><rect x="89.9096%" y="485" width="0.2158%" height="15" fill="rgb(226,147,8)" fg:x="111264" fg:w="267"/><text x="90.1596%" y="495.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read_unlock (267 samples, 0.22%)</title><rect x="89.9096%" y="469" width="0.2158%" height="15" fill="rgb(226,23,13)" fg:x="111264" fg:w="267"/><text x="90.1596%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_unlock (267 samples, 0.22%)</title><rect x="89.9096%" y="453" width="0.2158%" height="15" fill="rgb(240,63,4)" fg:x="111264" fg:w="267"/><text x="90.1596%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (249 samples, 0.20%)</title><rect x="89.9241%" y="437" width="0.2012%" height="15" fill="rgb(221,1,32)" fg:x="111282" fg:w="249"/><text x="90.1741%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_sub (249 samples, 0.20%)</title><rect x="89.9241%" y="421" width="0.2012%" height="15" fill="rgb(242,117,10)" fg:x="111282" fg:w="249"/><text x="90.1741%" y="431.50"></text></g><g><title>fastrand::usize (41 samples, 0.03%)</title><rect x="90.1253%" y="501" width="0.0331%" height="15" fill="rgb(249,172,44)" fg:x="111531" fg:w="41"/><text x="90.3753%" y="511.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (37 samples, 0.03%)</title><rect x="90.1286%" y="485" width="0.0299%" height="15" fill="rgb(244,46,45)" fg:x="111535" fg:w="37"/><text x="90.3786%" y="495.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (37 samples, 0.03%)</title><rect x="90.1286%" y="469" width="0.0299%" height="15" fill="rgb(206,43,17)" fg:x="111535" fg:w="37"/><text x="90.3786%" y="479.50"></text></g><g><title>fastrand::usize::{{closure}} (19 samples, 0.02%)</title><rect x="90.1431%" y="453" width="0.0154%" height="15" fill="rgb(239,218,39)" fg:x="111553" fg:w="19"/><text x="90.3931%" y="463.50"></text></g><g><title>fastrand::Rng::usize (19 samples, 0.02%)</title><rect x="90.1431%" y="437" width="0.0154%" height="15" fill="rgb(208,169,54)" fg:x="111553" fg:w="19"/><text x="90.3931%" y="447.50"></text></g><g><title>fastrand::Rng::gen_mod_u64 (16 samples, 0.01%)</title><rect x="90.1455%" y="421" width="0.0129%" height="15" fill="rgb(247,25,42)" fg:x="111556" fg:w="16"/><text x="90.3955%" y="431.50"></text></g><g><title>std::sync::poison::Flag::get (37 samples, 0.03%)</title><rect x="90.1585%" y="453" width="0.0299%" height="15" fill="rgb(226,23,31)" fg:x="111572" fg:w="37"/><text x="90.4085%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (37 samples, 0.03%)</title><rect x="90.1585%" y="437" width="0.0299%" height="15" fill="rgb(247,16,28)" fg:x="111572" fg:w="37"/><text x="90.4085%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (37 samples, 0.03%)</title><rect x="90.1585%" y="421" width="0.0299%" height="15" fill="rgb(231,147,38)" fg:x="111572" fg:w="37"/><text x="90.4085%" y="431.50"></text></g><g><title>std::sync::rwlock::RwLockReadGuard&lt;T&gt;::new (45 samples, 0.04%)</title><rect x="90.1585%" y="485" width="0.0364%" height="15" fill="rgb(253,81,48)" fg:x="111572" fg:w="45"/><text x="90.4085%" y="495.50"></text></g><g><title>std::sync::poison::Flag::borrow (45 samples, 0.04%)</title><rect x="90.1585%" y="469" width="0.0364%" height="15" fill="rgb(249,222,43)" fg:x="111572" fg:w="45"/><text x="90.4085%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (383 samples, 0.31%)</title><rect x="90.1989%" y="453" width="0.3095%" height="15" fill="rgb(221,3,27)" fg:x="111622" fg:w="383"/><text x="90.4489%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (383 samples, 0.31%)</title><rect x="90.1989%" y="437" width="0.3095%" height="15" fill="rgb(228,180,5)" fg:x="111622" fg:w="383"/><text x="90.4489%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (92 samples, 0.07%)</title><rect x="90.5084%" y="453" width="0.0743%" height="15" fill="rgb(227,131,42)" fg:x="112005" fg:w="92"/><text x="90.7584%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_load (92 samples, 0.07%)</title><rect x="90.5084%" y="437" width="0.0743%" height="15" fill="rgb(212,3,39)" fg:x="112005" fg:w="92"/><text x="90.7584%" y="447.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (8,761 samples, 7.08%)</title><rect x="83.5153%" y="517" width="7.0795%" height="15" fill="rgb(226,45,5)" fg:x="103351" fg:w="8761"/><text x="83.7653%" y="527.50">async_exe..</text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (540 samples, 0.44%)</title><rect x="90.1585%" y="501" width="0.4364%" height="15" fill="rgb(215,167,45)" fg:x="111572" fg:w="540"/><text x="90.4085%" y="511.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read (495 samples, 0.40%)</title><rect x="90.1948%" y="485" width="0.4000%" height="15" fill="rgb(250,218,53)" fg:x="111617" fg:w="495"/><text x="90.4448%" y="495.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (495 samples, 0.40%)</title><rect x="90.1948%" y="469" width="0.4000%" height="15" fill="rgb(207,140,0)" fg:x="111617" fg:w="495"/><text x="90.4448%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (50 samples, 0.04%)</title><rect x="90.6110%" y="437" width="0.0404%" height="15" fill="rgb(238,133,51)" fg:x="112132" fg:w="50"/><text x="90.8610%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_swap (50 samples, 0.04%)</title><rect x="90.6110%" y="421" width="0.0404%" height="15" fill="rgb(218,203,53)" fg:x="112132" fg:w="50"/><text x="90.8610%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (55 samples, 0.04%)</title><rect x="90.6094%" y="501" width="0.0444%" height="15" fill="rgb(226,184,25)" fg:x="112130" fg:w="55"/><text x="90.8594%" y="511.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (55 samples, 0.04%)</title><rect x="90.6094%" y="485" width="0.0444%" height="15" fill="rgb(231,121,21)" fg:x="112130" fg:w="55"/><text x="90.8594%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (53 samples, 0.04%)</title><rect x="90.6110%" y="469" width="0.0428%" height="15" fill="rgb(251,14,34)" fg:x="112132" fg:w="53"/><text x="90.8610%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (53 samples, 0.04%)</title><rect x="90.6110%" y="453" width="0.0428%" height="15" fill="rgb(249,193,11)" fg:x="112132" fg:w="53"/><text x="90.8610%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (101 samples, 0.08%)</title><rect x="90.6538%" y="501" width="0.0816%" height="15" fill="rgb(220,172,37)" fg:x="112185" fg:w="101"/><text x="90.9038%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (101 samples, 0.08%)</title><rect x="90.6538%" y="485" width="0.0816%" height="15" fill="rgb(231,229,43)" fg:x="112185" fg:w="101"/><text x="90.9038%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (16 samples, 0.01%)</title><rect x="90.7475%" y="421" width="0.0129%" height="15" fill="rgb(250,161,5)" fg:x="112301" fg:w="16"/><text x="90.9975%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (16 samples, 0.01%)</title><rect x="90.7475%" y="405" width="0.0129%" height="15" fill="rgb(218,225,18)" fg:x="112301" fg:w="16"/><text x="90.9975%" y="415.50"></text></g><g><title>__libc_write (46 samples, 0.04%)</title><rect x="90.7621%" y="405" width="0.0372%" height="15" fill="rgb(245,45,42)" fg:x="112319" fg:w="46"/><text x="91.0121%" y="415.50"></text></g><g><title>async_io::reactor::Reactor::notify (72 samples, 0.06%)</title><rect x="90.7419%" y="453" width="0.0582%" height="15" fill="rgb(211,115,1)" fg:x="112294" fg:w="72"/><text x="90.9919%" y="463.50"></text></g><g><title>polling::Poller::notify (65 samples, 0.05%)</title><rect x="90.7475%" y="437" width="0.0525%" height="15" fill="rgb(248,133,52)" fg:x="112301" fg:w="65"/><text x="90.9975%" y="447.50"></text></g><g><title>polling::epoll::Poller::notify (48 samples, 0.04%)</title><rect x="90.7613%" y="421" width="0.0388%" height="15" fill="rgb(238,100,21)" fg:x="112318" fg:w="48"/><text x="91.0113%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (18 samples, 0.01%)</title><rect x="90.8001%" y="453" width="0.0145%" height="15" fill="rgb(247,144,11)" fg:x="112366" fg:w="18"/><text x="91.0501%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_load (18 samples, 0.01%)</title><rect x="90.8001%" y="437" width="0.0145%" height="15" fill="rgb(206,164,16)" fg:x="112366" fg:w="18"/><text x="91.0501%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (105 samples, 0.08%)</title><rect x="90.8720%" y="421" width="0.0848%" height="15" fill="rgb(222,34,3)" fg:x="112455" fg:w="105"/><text x="91.1220%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_swap (105 samples, 0.08%)</title><rect x="90.8720%" y="405" width="0.0848%" height="15" fill="rgb(248,82,4)" fg:x="112455" fg:w="105"/><text x="91.1220%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_add (17 samples, 0.01%)</title><rect x="90.9568%" y="373" width="0.0137%" height="15" fill="rgb(228,81,46)" fg:x="112560" fg:w="17"/><text x="91.2068%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_add (17 samples, 0.01%)</title><rect x="90.9568%" y="357" width="0.0137%" height="15" fill="rgb(227,67,47)" fg:x="112560" fg:w="17"/><text x="91.2068%" y="367.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (56 samples, 0.05%)</title><rect x="90.9568%" y="421" width="0.0453%" height="15" fill="rgb(215,93,53)" fg:x="112560" fg:w="56"/><text x="91.2068%" y="431.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (56 samples, 0.05%)</title><rect x="90.9568%" y="405" width="0.0453%" height="15" fill="rgb(248,194,39)" fg:x="112560" fg:w="56"/><text x="91.2068%" y="415.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::notify_one (56 samples, 0.05%)</title><rect x="90.9568%" y="389" width="0.0453%" height="15" fill="rgb(215,5,19)" fg:x="112560" fg:w="56"/><text x="91.2068%" y="399.50"></text></g><g><title>std::sys::unix::futex::futex_wake (39 samples, 0.03%)</title><rect x="90.9706%" y="373" width="0.0315%" height="15" fill="rgb(226,215,51)" fg:x="112577" fg:w="39"/><text x="91.2206%" y="383.50"></text></g><g><title>syscall (39 samples, 0.03%)</title><rect x="90.9706%" y="357" width="0.0315%" height="15" fill="rgb(225,56,26)" fg:x="112577" fg:w="39"/><text x="91.2206%" y="367.50"></text></g><g><title>parking::Unparker::unpark (249 samples, 0.20%)</title><rect x="90.8146%" y="453" width="0.2012%" height="15" fill="rgb(222,75,29)" fg:x="112384" fg:w="249"/><text x="91.0646%" y="463.50"></text></g><g><title>parking::Inner::unpark (198 samples, 0.16%)</title><rect x="90.8558%" y="437" width="0.1600%" height="15" fill="rgb(236,139,6)" fg:x="112435" fg:w="198"/><text x="91.1058%" y="447.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (17 samples, 0.01%)</title><rect x="91.0021%" y="421" width="0.0137%" height="15" fill="rgb(223,137,36)" fg:x="112616" fg:w="17"/><text x="91.2521%" y="431.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (16 samples, 0.01%)</title><rect x="91.0029%" y="405" width="0.0129%" height="15" fill="rgb(226,99,2)" fg:x="112617" fg:w="16"/><text x="91.2529%" y="415.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (16 samples, 0.01%)</title><rect x="91.0029%" y="389" width="0.0129%" height="15" fill="rgb(206,133,23)" fg:x="112617" fg:w="16"/><text x="91.2529%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (16 samples, 0.01%)</title><rect x="91.0029%" y="373" width="0.0129%" height="15" fill="rgb(243,173,15)" fg:x="112617" fg:w="16"/><text x="91.2529%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (16 samples, 0.01%)</title><rect x="91.0029%" y="357" width="0.0129%" height="15" fill="rgb(228,69,28)" fg:x="112617" fg:w="16"/><text x="91.2529%" y="367.50"></text></g><g><title>async_io::driver::block_on::IO_POLLING::__getit (23 samples, 0.02%)</title><rect x="91.0158%" y="421" width="0.0186%" height="15" fill="rgb(212,51,22)" fg:x="112633" fg:w="23"/><text x="91.2658%" y="431.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (23 samples, 0.02%)</title><rect x="91.0158%" y="405" width="0.0186%" height="15" fill="rgb(227,113,0)" fg:x="112633" fg:w="23"/><text x="91.2658%" y="415.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (23 samples, 0.02%)</title><rect x="91.0158%" y="389" width="0.0186%" height="15" fill="rgb(252,84,27)" fg:x="112633" fg:w="23"/><text x="91.2658%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (23 samples, 0.02%)</title><rect x="91.0158%" y="373" width="0.0186%" height="15" fill="rgb(223,145,39)" fg:x="112633" fg:w="23"/><text x="91.2658%" y="383.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (371 samples, 0.30%)</title><rect x="90.7354%" y="469" width="0.2998%" height="15" fill="rgb(239,219,30)" fg:x="112286" fg:w="371"/><text x="90.9854%" y="479.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (24 samples, 0.02%)</title><rect x="91.0158%" y="453" width="0.0194%" height="15" fill="rgb(224,196,39)" fg:x="112633" fg:w="24"/><text x="91.2658%" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (24 samples, 0.02%)</title><rect x="91.0158%" y="437" width="0.0194%" height="15" fill="rgb(205,35,43)" fg:x="112633" fg:w="24"/><text x="91.2658%" y="447.50"></text></g><g><title>core::task::wake::Waker::wake (510 samples, 0.41%)</title><rect x="90.7354%" y="501" width="0.4121%" height="15" fill="rgb(228,201,21)" fg:x="112286" fg:w="510"/><text x="90.9854%" y="511.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (510 samples, 0.41%)</title><rect x="90.7354%" y="485" width="0.4121%" height="15" fill="rgb(237,118,16)" fg:x="112286" fg:w="510"/><text x="90.9854%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (139 samples, 0.11%)</title><rect x="91.0352%" y="469" width="0.1123%" height="15" fill="rgb(241,17,19)" fg:x="112657" fg:w="139"/><text x="91.2852%" y="479.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (139 samples, 0.11%)</title><rect x="91.0352%" y="453" width="0.1123%" height="15" fill="rgb(214,10,25)" fg:x="112657" fg:w="139"/><text x="91.2852%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (135 samples, 0.11%)</title><rect x="91.0385%" y="437" width="0.1091%" height="15" fill="rgb(238,37,29)" fg:x="112661" fg:w="135"/><text x="91.2885%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_sub (135 samples, 0.11%)</title><rect x="91.0385%" y="421" width="0.1091%" height="15" fill="rgb(253,83,25)" fg:x="112661" fg:w="135"/><text x="91.2885%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (40 samples, 0.03%)</title><rect x="91.1492%" y="453" width="0.0323%" height="15" fill="rgb(234,192,12)" fg:x="112798" fg:w="40"/><text x="91.3992%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (40 samples, 0.03%)</title><rect x="91.1492%" y="437" width="0.0323%" height="15" fill="rgb(241,216,45)" fg:x="112798" fg:w="40"/><text x="91.3992%" y="447.50"></text></g><g><title>async_executor::State::notify (733 samples, 0.59%)</title><rect x="90.5948%" y="517" width="0.5923%" height="15" fill="rgb(242,22,33)" fg:x="112112" fg:w="733"/><text x="90.8448%" y="527.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (49 samples, 0.04%)</title><rect x="91.1475%" y="501" width="0.0396%" height="15" fill="rgb(231,105,49)" fg:x="112796" fg:w="49"/><text x="91.3975%" y="511.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (47 samples, 0.04%)</title><rect x="91.1492%" y="485" width="0.0380%" height="15" fill="rgb(218,204,15)" fg:x="112798" fg:w="47"/><text x="91.3992%" y="495.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (47 samples, 0.04%)</title><rect x="91.1492%" y="469" width="0.0380%" height="15" fill="rgb(235,138,41)" fg:x="112798" fg:w="47"/><text x="91.3992%" y="479.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (151 samples, 0.12%)</title><rect x="91.2170%" y="485" width="0.1220%" height="15" fill="rgb(246,0,9)" fg:x="112882" fg:w="151"/><text x="91.4670%" y="495.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (150 samples, 0.12%)</title><rect x="91.2178%" y="469" width="0.1212%" height="15" fill="rgb(210,74,4)" fg:x="112883" fg:w="150"/><text x="91.4678%" y="479.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (146 samples, 0.12%)</title><rect x="91.2211%" y="453" width="0.1180%" height="15" fill="rgb(250,60,41)" fg:x="112887" fg:w="146"/><text x="91.4711%" y="463.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (146 samples, 0.12%)</title><rect x="91.2211%" y="437" width="0.1180%" height="15" fill="rgb(220,115,12)" fg:x="112887" fg:w="146"/><text x="91.4711%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (146 samples, 0.12%)</title><rect x="91.2211%" y="421" width="0.1180%" height="15" fill="rgb(237,100,13)" fg:x="112887" fg:w="146"/><text x="91.4711%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_add (146 samples, 0.12%)</title><rect x="91.2211%" y="405" width="0.1180%" height="15" fill="rgb(213,55,26)" fg:x="112887" fg:w="146"/><text x="91.4711%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (32 samples, 0.03%)</title><rect x="91.3391%" y="485" width="0.0259%" height="15" fill="rgb(216,17,4)" fg:x="113033" fg:w="32"/><text x="91.5891%" y="495.50"></text></g><g><title>async_executor::Sleepers::insert (239 samples, 0.19%)</title><rect x="91.2098%" y="501" width="0.1931%" height="15" fill="rgb(220,153,47)" fg:x="112873" fg:w="239"/><text x="91.4598%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (47 samples, 0.04%)</title><rect x="91.3649%" y="485" width="0.0380%" height="15" fill="rgb(215,131,9)" fg:x="113065" fg:w="47"/><text x="91.6149%" y="495.50"></text></g><g><title>core::ptr::write (37 samples, 0.03%)</title><rect x="91.3730%" y="469" width="0.0299%" height="15" fill="rgb(233,46,42)" fg:x="113075" fg:w="37"/><text x="91.6230%" y="479.50"></text></g><g><title>async_executor::Sleepers::is_notified (24 samples, 0.02%)</title><rect x="91.4029%" y="501" width="0.0194%" height="15" fill="rgb(226,86,7)" fg:x="113112" fg:w="24"/><text x="91.6529%" y="511.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.02%)</title><rect x="91.5055%" y="485" width="0.0210%" height="15" fill="rgb(239,226,21)" fg:x="113239" fg:w="26"/><text x="91.7555%" y="495.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (137 samples, 0.11%)</title><rect x="91.5265%" y="485" width="0.1107%" height="15" fill="rgb(244,137,22)" fg:x="113265" fg:w="137"/><text x="91.7765%" y="495.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (134 samples, 0.11%)</title><rect x="91.5290%" y="469" width="0.1083%" height="15" fill="rgb(211,139,35)" fg:x="113268" fg:w="134"/><text x="91.7790%" y="479.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (133 samples, 0.11%)</title><rect x="91.5298%" y="453" width="0.1075%" height="15" fill="rgb(214,62,50)" fg:x="113269" fg:w="133"/><text x="91.7798%" y="463.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (133 samples, 0.11%)</title><rect x="91.5298%" y="437" width="0.1075%" height="15" fill="rgb(212,113,44)" fg:x="113269" fg:w="133"/><text x="91.7798%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (133 samples, 0.11%)</title><rect x="91.5298%" y="421" width="0.1075%" height="15" fill="rgb(226,150,43)" fg:x="113269" fg:w="133"/><text x="91.7798%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_add (133 samples, 0.11%)</title><rect x="91.5298%" y="405" width="0.1075%" height="15" fill="rgb(250,71,37)" fg:x="113269" fg:w="133"/><text x="91.7798%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (28 samples, 0.02%)</title><rect x="91.6372%" y="485" width="0.0226%" height="15" fill="rgb(219,76,19)" fg:x="113402" fg:w="28"/><text x="91.8872%" y="495.50"></text></g><g><title>core::ptr::write (24 samples, 0.02%)</title><rect x="91.6405%" y="469" width="0.0194%" height="15" fill="rgb(250,39,11)" fg:x="113406" fg:w="24"/><text x="91.8905%" y="479.50"></text></g><g><title>async_executor::Sleepers::update (309 samples, 0.25%)</title><rect x="91.4223%" y="501" width="0.2497%" height="15" fill="rgb(230,64,31)" fg:x="113136" fg:w="309"/><text x="91.6723%" y="511.50"></text></g><g><title>core::task::wake::Waker::will_wake (15 samples, 0.01%)</title><rect x="91.6599%" y="485" width="0.0121%" height="15" fill="rgb(208,222,23)" fg:x="113430" fg:w="15"/><text x="91.9099%" y="495.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (15 samples, 0.01%)</title><rect x="91.6599%" y="469" width="0.0121%" height="15" fill="rgb(227,125,18)" fg:x="113430" fg:w="15"/><text x="91.9099%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (236 samples, 0.19%)</title><rect x="91.6801%" y="437" width="0.1907%" height="15" fill="rgb(234,210,9)" fg:x="113455" fg:w="236"/><text x="91.9301%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_swap (236 samples, 0.19%)</title><rect x="91.6801%" y="421" width="0.1907%" height="15" fill="rgb(217,127,24)" fg:x="113455" fg:w="236"/><text x="91.9301%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (250 samples, 0.20%)</title><rect x="91.6720%" y="501" width="0.2020%" height="15" fill="rgb(239,141,48)" fg:x="113445" fg:w="250"/><text x="91.9220%" y="511.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (250 samples, 0.20%)</title><rect x="91.6720%" y="485" width="0.2020%" height="15" fill="rgb(227,109,8)" fg:x="113445" fg:w="250"/><text x="91.9220%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (240 samples, 0.19%)</title><rect x="91.6801%" y="469" width="0.1939%" height="15" fill="rgb(235,184,23)" fg:x="113455" fg:w="240"/><text x="91.9301%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (240 samples, 0.19%)</title><rect x="91.6801%" y="453" width="0.1939%" height="15" fill="rgb(227,226,48)" fg:x="113455" fg:w="240"/><text x="91.9301%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (308 samples, 0.25%)</title><rect x="91.8740%" y="501" width="0.2489%" height="15" fill="rgb(206,150,11)" fg:x="113695" fg:w="308"/><text x="92.1240%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_swap (308 samples, 0.25%)</title><rect x="91.8740%" y="485" width="0.2489%" height="15" fill="rgb(254,2,33)" fg:x="113695" fg:w="308"/><text x="92.1240%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (253 samples, 0.20%)</title><rect x="92.1229%" y="501" width="0.2044%" height="15" fill="rgb(243,160,20)" fg:x="114003" fg:w="253"/><text x="92.3729%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_store (253 samples, 0.20%)</title><rect x="92.1229%" y="485" width="0.2044%" height="15" fill="rgb(218,208,30)" fg:x="114003" fg:w="253"/><text x="92.3729%" y="495.50"></text></g><g><title>std::sync::poison::Flag::get (32 samples, 0.03%)</title><rect x="92.3338%" y="453" width="0.0259%" height="15" fill="rgb(224,120,49)" fg:x="114264" fg:w="32"/><text x="92.5838%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (32 samples, 0.03%)</title><rect x="92.3338%" y="437" width="0.0259%" height="15" fill="rgb(246,12,2)" fg:x="114264" fg:w="32"/><text x="92.5838%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (31 samples, 0.03%)</title><rect x="92.3346%" y="421" width="0.0251%" height="15" fill="rgb(236,117,3)" fg:x="114265" fg:w="31"/><text x="92.5846%" y="431.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (46 samples, 0.04%)</title><rect x="92.3273%" y="485" width="0.0372%" height="15" fill="rgb(216,128,52)" fg:x="114256" fg:w="46"/><text x="92.5773%" y="495.50"></text></g><g><title>std::sync::poison::Flag::borrow (46 samples, 0.04%)</title><rect x="92.3273%" y="469" width="0.0372%" height="15" fill="rgb(246,145,19)" fg:x="114256" fg:w="46"/><text x="92.5773%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (285 samples, 0.23%)</title><rect x="92.3718%" y="453" width="0.2303%" height="15" fill="rgb(222,11,46)" fg:x="114311" fg:w="285"/><text x="92.6218%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (285 samples, 0.23%)</title><rect x="92.3718%" y="437" width="0.2303%" height="15" fill="rgb(245,82,36)" fg:x="114311" fg:w="285"/><text x="92.6218%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (38 samples, 0.03%)</title><rect x="92.6085%" y="437" width="0.0307%" height="15" fill="rgb(250,73,51)" fg:x="114604" fg:w="38"/><text x="92.8585%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (38 samples, 0.03%)</title><rect x="92.6085%" y="421" width="0.0307%" height="15" fill="rgb(221,189,23)" fg:x="114604" fg:w="38"/><text x="92.8585%" y="431.50"></text></g><g><title>std::sys::unix::futex::futex_wait (17 samples, 0.01%)</title><rect x="92.6489%" y="437" width="0.0137%" height="15" fill="rgb(210,33,7)" fg:x="114654" fg:w="17"/><text x="92.8989%" y="447.50"></text></g><g><title>core::hint::spin_loop (39 samples, 0.03%)</title><rect x="92.6635%" y="421" width="0.0315%" height="15" fill="rgb(210,107,22)" fg:x="114672" fg:w="39"/><text x="92.9135%" y="431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (39 samples, 0.03%)</title><rect x="92.6635%" y="405" width="0.0315%" height="15" fill="rgb(222,116,37)" fg:x="114672" fg:w="39"/><text x="92.9135%" y="415.50"></text></g><g><title>async_executor::Ticker::sleep (1,897 samples, 1.53%)</title><rect x="91.1871%" y="517" width="1.5329%" height="15" fill="rgb(254,17,48)" fg:x="112845" fg:w="1897"/><text x="91.4371%" y="527.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (486 samples, 0.39%)</title><rect x="92.3273%" y="501" width="0.3927%" height="15" fill="rgb(224,36,32)" fg:x="114256" fg:w="486"/><text x="92.5773%" y="511.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (440 samples, 0.36%)</title><rect x="92.3645%" y="485" width="0.3556%" height="15" fill="rgb(232,90,46)" fg:x="114302" fg:w="440"/><text x="92.6145%" y="495.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (440 samples, 0.36%)</title><rect x="92.3645%" y="469" width="0.3556%" height="15" fill="rgb(241,66,40)" fg:x="114302" fg:w="440"/><text x="92.6145%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (146 samples, 0.12%)</title><rect x="92.6021%" y="453" width="0.1180%" height="15" fill="rgb(249,184,29)" fg:x="114596" fg:w="146"/><text x="92.8521%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (71 samples, 0.06%)</title><rect x="92.6627%" y="437" width="0.0574%" height="15" fill="rgb(231,181,1)" fg:x="114671" fg:w="71"/><text x="92.9127%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (31 samples, 0.03%)</title><rect x="92.6950%" y="421" width="0.0251%" height="15" fill="rgb(224,94,2)" fg:x="114711" fg:w="31"/><text x="92.9450%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (31 samples, 0.03%)</title><rect x="92.6950%" y="405" width="0.0251%" height="15" fill="rgb(229,170,15)" fg:x="114711" fg:w="31"/><text x="92.9450%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.02%)</title><rect x="92.7645%" y="485" width="0.0178%" height="15" fill="rgb(240,127,35)" fg:x="114797" fg:w="22"/><text x="93.0145%" y="495.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (22 samples, 0.02%)</title><rect x="92.7645%" y="469" width="0.0178%" height="15" fill="rgb(248,196,34)" fg:x="114797" fg:w="22"/><text x="93.0145%" y="479.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (22 samples, 0.02%)</title><rect x="92.7645%" y="453" width="0.0178%" height="15" fill="rgb(236,137,7)" fg:x="114797" fg:w="22"/><text x="93.0145%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (13 samples, 0.01%)</title><rect x="92.7823%" y="485" width="0.0105%" height="15" fill="rgb(235,127,16)" fg:x="114819" fg:w="13"/><text x="93.0323%" y="495.50"></text></g><g><title>core::intrinsics::copy (15 samples, 0.01%)</title><rect x="92.7928%" y="469" width="0.0121%" height="15" fill="rgb(250,192,54)" fg:x="114832" fg:w="15"/><text x="93.0428%" y="479.50"></text></g><g><title>[libc-2.31.so] (15 samples, 0.01%)</title><rect x="92.7928%" y="453" width="0.0121%" height="15" fill="rgb(218,98,20)" fg:x="114832" fg:w="15"/><text x="93.0428%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::remove (16 samples, 0.01%)</title><rect x="92.7928%" y="485" width="0.0129%" height="15" fill="rgb(230,176,47)" fg:x="114832" fg:w="16"/><text x="93.0428%" y="495.50"></text></g><g><title>async_executor::Sleepers::remove (199 samples, 0.16%)</title><rect x="92.7306%" y="501" width="0.1608%" height="15" fill="rgb(244,2,33)" fg:x="114755" fg:w="199"/><text x="92.9806%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,core::task::wake::Waker)&gt; (106 samples, 0.09%)</title><rect x="92.8057%" y="485" width="0.0857%" height="15" fill="rgb(231,100,17)" fg:x="114848" fg:w="106"/><text x="93.0557%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (106 samples, 0.09%)</title><rect x="92.8057%" y="469" width="0.0857%" height="15" fill="rgb(245,23,12)" fg:x="114848" fg:w="106"/><text x="93.0557%" y="479.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (106 samples, 0.09%)</title><rect x="92.8057%" y="453" width="0.0857%" height="15" fill="rgb(249,55,22)" fg:x="114848" fg:w="106"/><text x="93.0557%" y="463.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::drop_waker (105 samples, 0.08%)</title><rect x="92.8065%" y="437" width="0.0848%" height="15" fill="rgb(207,134,9)" fg:x="114849" fg:w="105"/><text x="93.0565%" y="447.50"></text></g><g><title>core::mem::drop (104 samples, 0.08%)</title><rect x="92.8073%" y="421" width="0.0840%" height="15" fill="rgb(218,134,0)" fg:x="114850" fg:w="104"/><text x="93.0573%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (104 samples, 0.08%)</title><rect x="92.8073%" y="405" width="0.0840%" height="15" fill="rgb(213,212,33)" fg:x="114850" fg:w="104"/><text x="93.0573%" y="415.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (104 samples, 0.08%)</title><rect x="92.8073%" y="389" width="0.0840%" height="15" fill="rgb(252,106,18)" fg:x="114850" fg:w="104"/><text x="93.0573%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (104 samples, 0.08%)</title><rect x="92.8073%" y="373" width="0.0840%" height="15" fill="rgb(208,126,42)" fg:x="114850" fg:w="104"/><text x="93.0573%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_sub (104 samples, 0.08%)</title><rect x="92.8073%" y="357" width="0.0840%" height="15" fill="rgb(246,175,29)" fg:x="114850" fg:w="104"/><text x="93.0573%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (68 samples, 0.05%)</title><rect x="92.8962%" y="437" width="0.0549%" height="15" fill="rgb(215,13,50)" fg:x="114960" fg:w="68"/><text x="93.1462%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_swap (68 samples, 0.05%)</title><rect x="92.8962%" y="421" width="0.0549%" height="15" fill="rgb(216,172,15)" fg:x="114960" fg:w="68"/><text x="93.1462%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (78 samples, 0.06%)</title><rect x="92.8914%" y="501" width="0.0630%" height="15" fill="rgb(212,103,13)" fg:x="114954" fg:w="78"/><text x="93.1414%" y="511.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (78 samples, 0.06%)</title><rect x="92.8914%" y="485" width="0.0630%" height="15" fill="rgb(231,171,36)" fg:x="114954" fg:w="78"/><text x="93.1414%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (72 samples, 0.06%)</title><rect x="92.8962%" y="469" width="0.0582%" height="15" fill="rgb(250,123,20)" fg:x="114960" fg:w="72"/><text x="93.1462%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (72 samples, 0.06%)</title><rect x="92.8962%" y="453" width="0.0582%" height="15" fill="rgb(212,53,50)" fg:x="114960" fg:w="72"/><text x="93.1462%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (139 samples, 0.11%)</title><rect x="92.9544%" y="501" width="0.1123%" height="15" fill="rgb(243,54,12)" fg:x="115032" fg:w="139"/><text x="93.2044%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_swap (139 samples, 0.11%)</title><rect x="92.9544%" y="485" width="0.1123%" height="15" fill="rgb(234,101,34)" fg:x="115032" fg:w="139"/><text x="93.2044%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (146 samples, 0.12%)</title><rect x="93.0667%" y="501" width="0.1180%" height="15" fill="rgb(254,67,22)" fg:x="115171" fg:w="146"/><text x="93.3167%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_swap (146 samples, 0.12%)</title><rect x="93.0667%" y="485" width="0.1180%" height="15" fill="rgb(250,35,47)" fg:x="115171" fg:w="146"/><text x="93.3167%" y="495.50"></text></g><g><title>std::sync::poison::Flag::get (21 samples, 0.02%)</title><rect x="93.1871%" y="453" width="0.0170%" height="15" fill="rgb(226,126,38)" fg:x="115320" fg:w="21"/><text x="93.4371%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (21 samples, 0.02%)</title><rect x="93.1871%" y="437" width="0.0170%" height="15" fill="rgb(216,138,53)" fg:x="115320" fg:w="21"/><text x="93.4371%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (21 samples, 0.02%)</title><rect x="93.1871%" y="421" width="0.0170%" height="15" fill="rgb(246,199,43)" fg:x="115320" fg:w="21"/><text x="93.4371%" y="431.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (32 samples, 0.03%)</title><rect x="93.1847%" y="485" width="0.0259%" height="15" fill="rgb(232,125,11)" fg:x="115317" fg:w="32"/><text x="93.4347%" y="495.50"></text></g><g><title>std::sync::poison::Flag::borrow (32 samples, 0.03%)</title><rect x="93.1847%" y="469" width="0.0259%" height="15" fill="rgb(218,219,45)" fg:x="115317" fg:w="32"/><text x="93.4347%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (120 samples, 0.10%)</title><rect x="93.2114%" y="453" width="0.0970%" height="15" fill="rgb(216,102,54)" fg:x="115350" fg:w="120"/><text x="93.4614%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (120 samples, 0.10%)</title><rect x="93.2114%" y="437" width="0.0970%" height="15" fill="rgb(250,228,7)" fg:x="115350" fg:w="120"/><text x="93.4614%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (25 samples, 0.02%)</title><rect x="93.3108%" y="437" width="0.0202%" height="15" fill="rgb(226,125,25)" fg:x="115473" fg:w="25"/><text x="93.5608%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (25 samples, 0.02%)</title><rect x="93.3108%" y="421" width="0.0202%" height="15" fill="rgb(224,165,27)" fg:x="115473" fg:w="25"/><text x="93.5608%" y="431.50"></text></g><g><title>core::hint::spin_loop (26 samples, 0.02%)</title><rect x="93.3326%" y="421" width="0.0210%" height="15" fill="rgb(233,86,3)" fg:x="115500" fg:w="26"/><text x="93.5826%" y="431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (26 samples, 0.02%)</title><rect x="93.3326%" y="405" width="0.0210%" height="15" fill="rgb(228,116,20)" fg:x="115500" fg:w="26"/><text x="93.5826%" y="415.50"></text></g><g><title>async_executor::Ticker::wake (816 samples, 0.66%)</title><rect x="92.7201%" y="517" width="0.6594%" height="15" fill="rgb(209,192,17)" fg:x="114742" fg:w="816"/><text x="92.9701%" y="527.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (241 samples, 0.19%)</title><rect x="93.1847%" y="501" width="0.1947%" height="15" fill="rgb(224,88,34)" fg:x="115317" fg:w="241"/><text x="93.4347%" y="511.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (209 samples, 0.17%)</title><rect x="93.2106%" y="485" width="0.1689%" height="15" fill="rgb(233,38,6)" fg:x="115349" fg:w="209"/><text x="93.4606%" y="495.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (209 samples, 0.17%)</title><rect x="93.2106%" y="469" width="0.1689%" height="15" fill="rgb(212,59,30)" fg:x="115349" fg:w="209"/><text x="93.4606%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (88 samples, 0.07%)</title><rect x="93.3083%" y="453" width="0.0711%" height="15" fill="rgb(213,80,3)" fg:x="115470" fg:w="88"/><text x="93.5583%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (59 samples, 0.05%)</title><rect x="93.3318%" y="437" width="0.0477%" height="15" fill="rgb(251,178,7)" fg:x="115499" fg:w="59"/><text x="93.5818%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (32 samples, 0.03%)</title><rect x="93.3536%" y="421" width="0.0259%" height="15" fill="rgb(213,154,26)" fg:x="115526" fg:w="32"/><text x="93.6036%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (32 samples, 0.03%)</title><rect x="93.3536%" y="405" width="0.0259%" height="15" fill="rgb(238,165,49)" fg:x="115526" fg:w="32"/><text x="93.6036%" y="415.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,272 samples, 9.92%)</title><rect x="83.4676%" y="581" width="9.9167%" height="15" fill="rgb(248,91,46)" fg:x="103292" fg:w="12272"/><text x="83.7176%" y="591.50">&lt;core::future:..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (12,272 samples, 9.92%)</title><rect x="83.4676%" y="565" width="9.9167%" height="15" fill="rgb(244,21,52)" fg:x="103292" fg:w="12272"/><text x="83.7176%" y="575.50">async_executor..</text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (12,237 samples, 9.89%)</title><rect x="83.4959%" y="549" width="9.8884%" height="15" fill="rgb(247,122,20)" fg:x="103327" fg:w="12237"/><text x="83.7459%" y="559.50">&lt;futures_lite:..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (12,230 samples, 9.88%)</title><rect x="83.5015%" y="533" width="9.8827%" height="15" fill="rgb(218,27,9)" fg:x="103334" fg:w="12230"/><text x="83.7515%" y="543.50">async_executor..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,413 samples, 10.03%)</title><rect x="83.4288%" y="613" width="10.0306%" height="15" fill="rgb(246,7,6)" fg:x="103244" fg:w="12413"/><text x="83.6788%" y="623.50">&lt;core::future::..</text></g><g><title>async_executor::Runner::runnable::{{closure}} (12,408 samples, 10.03%)</title><rect x="83.4329%" y="597" width="10.0266%" height="15" fill="rgb(227,135,54)" fg:x="103249" fg:w="12408"/><text x="83.6829%" y="607.50">async_executor..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (90 samples, 0.07%)</title><rect x="93.3867%" y="581" width="0.0727%" height="15" fill="rgb(247,14,11)" fg:x="115567" fg:w="90"/><text x="93.6367%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_add (90 samples, 0.07%)</title><rect x="93.3867%" y="565" width="0.0727%" height="15" fill="rgb(206,149,34)" fg:x="115567" fg:w="90"/><text x="93.6367%" y="575.50"></text></g><g><title>async_std::task::task_locals_wrapper::CURRENT::__getit (16 samples, 0.01%)</title><rect x="93.6744%" y="469" width="0.0129%" height="15" fill="rgb(227,228,4)" fg:x="115923" fg:w="16"/><text x="93.9244%" y="479.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (235 samples, 0.19%)</title><rect x="93.9847%" y="405" width="0.1899%" height="15" fill="rgb(238,218,28)" fg:x="116307" fg:w="235"/><text x="94.2347%" y="415.50"></text></g><g><title>[libc-2.31.so] (228 samples, 0.18%)</title><rect x="93.9904%" y="389" width="0.1842%" height="15" fill="rgb(252,86,40)" fg:x="116314" fg:w="228"/><text x="94.2404%" y="399.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (237 samples, 0.19%)</title><rect x="94.1746%" y="405" width="0.1915%" height="15" fill="rgb(251,225,11)" fg:x="116542" fg:w="237"/><text x="94.4246%" y="415.50"></text></g><g><title>[libc-2.31.so] (221 samples, 0.18%)</title><rect x="94.1875%" y="389" width="0.1786%" height="15" fill="rgb(206,46,49)" fg:x="116558" fg:w="221"/><text x="94.4375%" y="399.50"></text></g><g><title>[libc-2.31.so] (367 samples, 0.30%)</title><rect x="94.4712%" y="389" width="0.2966%" height="15" fill="rgb(245,128,24)" fg:x="116909" fg:w="367"/><text x="94.7212%" y="399.50"></text></g><g><title>sn_rust_dealloc (28 samples, 0.02%)</title><rect x="94.7758%" y="277" width="0.0226%" height="15" fill="rgb(219,177,34)" fg:x="117286" fg:w="28"/><text x="95.0258%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt;&gt; (35 samples, 0.03%)</title><rect x="94.7710%" y="389" width="0.0283%" height="15" fill="rgb(218,60,48)" fg:x="117280" fg:w="35"/><text x="95.0210%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt; (35 samples, 0.03%)</title><rect x="94.7710%" y="373" width="0.0283%" height="15" fill="rgb(221,11,5)" fg:x="117280" fg:w="35"/><text x="95.0210%" y="383.50"></text></g><g><title>alloc::alloc::box_free (35 samples, 0.03%)</title><rect x="94.7710%" y="357" width="0.0283%" height="15" fill="rgb(220,148,13)" fg:x="117280" fg:w="35"/><text x="95.0210%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (35 samples, 0.03%)</title><rect x="94.7710%" y="341" width="0.0283%" height="15" fill="rgb(210,16,3)" fg:x="117280" fg:w="35"/><text x="95.0210%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (35 samples, 0.03%)</title><rect x="94.7710%" y="325" width="0.0283%" height="15" fill="rgb(236,80,2)" fg:x="117280" fg:w="35"/><text x="95.0210%" y="335.50"></text></g><g><title>__rg_dealloc (35 samples, 0.03%)</title><rect x="94.7710%" y="309" width="0.0283%" height="15" fill="rgb(239,129,19)" fg:x="117280" fg:w="35"/><text x="95.0210%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (35 samples, 0.03%)</title><rect x="94.7710%" y="293" width="0.0283%" height="15" fill="rgb(220,106,35)" fg:x="117280" fg:w="35"/><text x="95.0210%" y="303.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (89 samples, 0.07%)</title><rect x="94.8978%" y="325" width="0.0719%" height="15" fill="rgb(252,139,45)" fg:x="117437" fg:w="89"/><text x="95.1478%" y="335.50"></text></g><g><title>core::mem::replace (89 samples, 0.07%)</title><rect x="94.8978%" y="309" width="0.0719%" height="15" fill="rgb(229,8,36)" fg:x="117437" fg:w="89"/><text x="95.1478%" y="319.50"></text></g><g><title>core::ptr::read (89 samples, 0.07%)</title><rect x="94.8978%" y="293" width="0.0719%" height="15" fill="rgb(230,126,33)" fg:x="117437" fg:w="89"/><text x="95.1478%" y="303.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (153 samples, 0.12%)</title><rect x="94.8679%" y="341" width="0.1236%" height="15" fill="rgb(239,140,21)" fg:x="117400" fg:w="153"/><text x="95.1179%" y="351.50"></text></g><g><title>core::mem::drop (27 samples, 0.02%)</title><rect x="94.9697%" y="325" width="0.0218%" height="15" fill="rgb(254,104,9)" fg:x="117526" fg:w="27"/><text x="95.2197%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (27 samples, 0.02%)</title><rect x="94.9697%" y="309" width="0.0218%" height="15" fill="rgb(239,52,14)" fg:x="117526" fg:w="27"/><text x="95.2197%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (138 samples, 0.11%)</title><rect x="94.9916%" y="341" width="0.1115%" height="15" fill="rgb(208,227,44)" fg:x="117553" fg:w="138"/><text x="95.2416%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (131 samples, 0.11%)</title><rect x="94.9972%" y="325" width="0.1059%" height="15" fill="rgb(246,18,19)" fg:x="117560" fg:w="131"/><text x="95.2472%" y="335.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (131 samples, 0.11%)</title><rect x="94.9972%" y="309" width="0.1059%" height="15" fill="rgb(235,228,25)" fg:x="117560" fg:w="131"/><text x="95.2472%" y="319.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (126 samples, 0.10%)</title><rect x="95.0013%" y="293" width="0.1018%" height="15" fill="rgb(240,156,20)" fg:x="117565" fg:w="126"/><text x="95.2513%" y="303.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (126 samples, 0.10%)</title><rect x="95.0013%" y="277" width="0.1018%" height="15" fill="rgb(224,8,20)" fg:x="117565" fg:w="126"/><text x="95.2513%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (126 samples, 0.10%)</title><rect x="95.0013%" y="261" width="0.1018%" height="15" fill="rgb(214,12,52)" fg:x="117565" fg:w="126"/><text x="95.2513%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_swap (126 samples, 0.10%)</title><rect x="95.0013%" y="245" width="0.1018%" height="15" fill="rgb(211,220,47)" fg:x="117565" fg:w="126"/><text x="95.2513%" y="255.50"></text></g><g><title>core::task::wake::Waker::will_wake (19 samples, 0.02%)</title><rect x="95.1095%" y="341" width="0.0154%" height="15" fill="rgb(250,173,5)" fg:x="117699" fg:w="19"/><text x="95.3595%" y="351.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (19 samples, 0.02%)</title><rect x="95.1095%" y="325" width="0.0154%" height="15" fill="rgb(250,125,52)" fg:x="117699" fg:w="19"/><text x="95.3595%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (18 samples, 0.01%)</title><rect x="95.1103%" y="309" width="0.0145%" height="15" fill="rgb(209,133,18)" fg:x="117700" fg:w="18"/><text x="95.3603%" y="319.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (18 samples, 0.01%)</title><rect x="95.1103%" y="293" width="0.0145%" height="15" fill="rgb(216,173,22)" fg:x="117700" fg:w="18"/><text x="95.3603%" y="303.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (512 samples, 0.41%)</title><rect x="94.8299%" y="357" width="0.4137%" height="15" fill="rgb(205,3,22)" fg:x="117353" fg:w="512"/><text x="95.0799%" y="367.50"></text></g><g><title>event_listener::Inner::lock (147 samples, 0.12%)</title><rect x="95.1249%" y="341" width="0.1188%" height="15" fill="rgb(248,22,20)" fg:x="117718" fg:w="147"/><text x="95.3749%" y="351.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (145 samples, 0.12%)</title><rect x="95.1265%" y="325" width="0.1172%" height="15" fill="rgb(233,6,29)" fg:x="117720" fg:w="145"/><text x="95.3765%" y="335.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (139 samples, 0.11%)</title><rect x="95.1314%" y="309" width="0.1123%" height="15" fill="rgb(240,22,54)" fg:x="117726" fg:w="139"/><text x="95.3814%" y="319.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (139 samples, 0.11%)</title><rect x="95.1314%" y="293" width="0.1123%" height="15" fill="rgb(231,133,32)" fg:x="117726" fg:w="139"/><text x="95.3814%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (138 samples, 0.11%)</title><rect x="95.1322%" y="277" width="0.1115%" height="15" fill="rgb(248,193,4)" fg:x="117727" fg:w="138"/><text x="95.3822%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (138 samples, 0.11%)</title><rect x="95.1322%" y="261" width="0.1115%" height="15" fill="rgb(211,178,46)" fg:x="117727" fg:w="138"/><text x="95.3822%" y="271.50"></text></g><g><title>concurrent_queue::full_fence (171 samples, 0.14%)</title><rect x="95.2873%" y="309" width="0.1382%" height="15" fill="rgb(224,5,42)" fg:x="117919" fg:w="171"/><text x="95.5373%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (163 samples, 0.13%)</title><rect x="95.2938%" y="293" width="0.1317%" height="15" fill="rgb(239,176,25)" fg:x="117927" fg:w="163"/><text x="95.5438%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (163 samples, 0.13%)</title><rect x="95.2938%" y="277" width="0.1317%" height="15" fill="rgb(245,187,50)" fg:x="117927" fg:w="163"/><text x="95.5438%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (163 samples, 0.13%)</title><rect x="95.2938%" y="261" width="0.1317%" height="15" fill="rgb(248,24,15)" fg:x="117927" fg:w="163"/><text x="95.5438%" y="271.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1,341 samples, 1.08%)</title><rect x="94.3661%" y="405" width="1.0836%" height="15" fill="rgb(205,166,13)" fg:x="116779" fg:w="1341"/><text x="94.6161%" y="415.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (805 samples, 0.65%)</title><rect x="94.7992%" y="389" width="0.6505%" height="15" fill="rgb(208,114,23)" fg:x="117315" fg:w="805"/><text x="95.0492%" y="399.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (805 samples, 0.65%)</title><rect x="94.7992%" y="373" width="0.6505%" height="15" fill="rgb(239,127,18)" fg:x="117315" fg:w="805"/><text x="95.0492%" y="383.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (255 samples, 0.21%)</title><rect x="95.2437%" y="357" width="0.2061%" height="15" fill="rgb(219,154,28)" fg:x="117865" fg:w="255"/><text x="95.4937%" y="367.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (233 samples, 0.19%)</title><rect x="95.2615%" y="341" width="0.1883%" height="15" fill="rgb(225,157,23)" fg:x="117887" fg:w="233"/><text x="95.5115%" y="351.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (228 samples, 0.18%)</title><rect x="95.2655%" y="325" width="0.1842%" height="15" fill="rgb(219,8,6)" fg:x="117892" fg:w="228"/><text x="95.5155%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (20 samples, 0.02%)</title><rect x="95.4336%" y="309" width="0.0162%" height="15" fill="rgb(212,47,6)" fg:x="118100" fg:w="20"/><text x="95.6836%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_load (20 samples, 0.02%)</title><rect x="95.4336%" y="293" width="0.0162%" height="15" fill="rgb(224,190,4)" fg:x="118100" fg:w="20"/><text x="95.6836%" y="303.50"></text></g><g><title>[libc-2.31.so] (100 samples, 0.08%)</title><rect x="95.4497%" y="405" width="0.0808%" height="15" fill="rgb(239,183,29)" fg:x="118120" fg:w="100"/><text x="95.6997%" y="415.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (45 samples, 0.04%)</title><rect x="95.6881%" y="277" width="0.0364%" height="15" fill="rgb(213,57,7)" fg:x="118415" fg:w="45"/><text x="95.9381%" y="287.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (246 samples, 0.20%)</title><rect x="95.5305%" y="405" width="0.1988%" height="15" fill="rgb(216,148,1)" fg:x="118220" fg:w="246"/><text x="95.7805%" y="415.50"></text></g><g><title>alloc::alloc::exchange_malloc (122 samples, 0.10%)</title><rect x="95.6307%" y="389" width="0.0986%" height="15" fill="rgb(236,182,29)" fg:x="118344" fg:w="122"/><text x="95.8807%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (122 samples, 0.10%)</title><rect x="95.6307%" y="373" width="0.0986%" height="15" fill="rgb(244,120,48)" fg:x="118344" fg:w="122"/><text x="95.8807%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (122 samples, 0.10%)</title><rect x="95.6307%" y="357" width="0.0986%" height="15" fill="rgb(206,71,34)" fg:x="118344" fg:w="122"/><text x="95.8807%" y="367.50"></text></g><g><title>alloc::alloc::alloc (119 samples, 0.10%)</title><rect x="95.6332%" y="341" width="0.0962%" height="15" fill="rgb(242,32,6)" fg:x="118347" fg:w="119"/><text x="95.8832%" y="351.50"></text></g><g><title>__rg_alloc (119 samples, 0.10%)</title><rect x="95.6332%" y="325" width="0.0962%" height="15" fill="rgb(241,35,3)" fg:x="118347" fg:w="119"/><text x="95.8832%" y="335.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (119 samples, 0.10%)</title><rect x="95.6332%" y="309" width="0.0962%" height="15" fill="rgb(222,62,19)" fg:x="118347" fg:w="119"/><text x="95.8832%" y="319.50"></text></g><g><title>sn_rust_alloc (111 samples, 0.09%)</title><rect x="95.6396%" y="293" width="0.0897%" height="15" fill="rgb(223,110,41)" fg:x="118355" fg:w="111"/><text x="95.8896%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}}&gt;&gt; (17 samples, 0.01%)</title><rect x="95.7374%" y="405" width="0.0137%" height="15" fill="rgb(208,224,4)" fg:x="118476" fg:w="17"/><text x="95.9874%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}}&gt; (17 samples, 0.01%)</title><rect x="95.7374%" y="389" width="0.0137%" height="15" fill="rgb(241,137,19)" fg:x="118476" fg:w="17"/><text x="95.9874%" y="399.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data (15 samples, 0.01%)</title><rect x="95.7511%" y="405" width="0.0121%" height="15" fill="rgb(244,24,17)" fg:x="118493" fg:w="15"/><text x="96.0011%" y="415.50"></text></g><g><title>core::future::from_generator (15 samples, 0.01%)</title><rect x="95.7511%" y="389" width="0.0121%" height="15" fill="rgb(245,178,49)" fg:x="118493" fg:w="15"/><text x="96.0011%" y="399.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (2,561 samples, 2.07%)</title><rect x="93.7019%" y="421" width="2.0695%" height="15" fill="rgb(219,160,38)" fg:x="115957" fg:w="2561"/><text x="93.9519%" y="431.50">t..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (2,581 samples, 2.09%)</title><rect x="93.6889%" y="453" width="2.0856%" height="15" fill="rgb(228,137,14)" fg:x="115941" fg:w="2581"/><text x="93.9389%" y="463.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,581 samples, 2.09%)</title><rect x="93.6889%" y="437" width="2.0856%" height="15" fill="rgb(237,134,11)" fg:x="115941" fg:w="2581"/><text x="93.9389%" y="447.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,717 samples, 2.20%)</title><rect x="93.5855%" y="565" width="2.1955%" height="15" fill="rgb(211,126,44)" fg:x="115813" fg:w="2717"/><text x="93.8355%" y="575.50">&lt;..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (2,715 samples, 2.19%)</title><rect x="93.5871%" y="549" width="2.1939%" height="15" fill="rgb(226,171,33)" fg:x="115815" fg:w="2715"/><text x="93.8371%" y="559.50">a..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (2,611 samples, 2.11%)</title><rect x="93.6712%" y="533" width="2.1099%" height="15" fill="rgb(253,99,13)" fg:x="115919" fg:w="2611"/><text x="93.9212%" y="543.50">&lt;..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (2,611 samples, 2.11%)</title><rect x="93.6712%" y="517" width="2.1099%" height="15" fill="rgb(244,48,7)" fg:x="115919" fg:w="2611"/><text x="93.9212%" y="527.50">a..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2,611 samples, 2.11%)</title><rect x="93.6712%" y="501" width="2.1099%" height="15" fill="rgb(244,217,54)" fg:x="115919" fg:w="2611"/><text x="93.9212%" y="511.50">s..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2,611 samples, 2.11%)</title><rect x="93.6712%" y="485" width="2.1099%" height="15" fill="rgb(224,15,18)" fg:x="115919" fg:w="2611"/><text x="93.9212%" y="495.50">s..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (2,591 samples, 2.09%)</title><rect x="93.6873%" y="469" width="2.0937%" height="15" fill="rgb(244,99,12)" fg:x="115939" fg:w="2591"/><text x="93.9373%" y="479.50">a..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (2,719 samples, 2.20%)</title><rect x="93.5855%" y="581" width="2.1972%" height="15" fill="rgb(233,226,8)" fg:x="115813" fg:w="2719"/><text x="93.8355%" y="591.50">&lt;..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_ref (47 samples, 0.04%)</title><rect x="95.7827%" y="581" width="0.0380%" height="15" fill="rgb(229,211,3)" fg:x="118532" fg:w="47"/><text x="96.0327%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (45 samples, 0.04%)</title><rect x="95.7843%" y="565" width="0.0364%" height="15" fill="rgb(216,140,21)" fg:x="118534" fg:w="45"/><text x="96.0343%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_sub (45 samples, 0.04%)</title><rect x="95.7843%" y="549" width="0.0364%" height="15" fill="rgb(234,122,30)" fg:x="118534" fg:w="45"/><text x="96.0343%" y="559.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (14 samples, 0.01%)</title><rect x="95.8206%" y="565" width="0.0113%" height="15" fill="rgb(236,25,46)" fg:x="118579" fg:w="14"/><text x="96.0706%" y="575.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::schedule (15 samples, 0.01%)</title><rect x="95.8206%" y="581" width="0.0121%" height="15" fill="rgb(217,52,54)" fg:x="118579" fg:w="15"/><text x="96.0706%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (355 samples, 0.29%)</title><rect x="95.8328%" y="581" width="0.2869%" height="15" fill="rgb(222,29,26)" fg:x="118594" fg:w="355"/><text x="96.0828%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (355 samples, 0.29%)</title><rect x="95.8328%" y="565" width="0.2869%" height="15" fill="rgb(216,177,29)" fg:x="118594" fg:w="355"/><text x="96.0828%" y="575.50"></text></g><g><title>async_task::runnable::Runnable::run (3,298 samples, 2.67%)</title><rect x="93.4619%" y="613" width="2.6650%" height="15" fill="rgb(247,136,51)" fg:x="115660" fg:w="3298"/><text x="93.7119%" y="623.50">as..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (3,217 samples, 2.60%)</title><rect x="93.5273%" y="597" width="2.5996%" height="15" fill="rgb(231,47,47)" fg:x="115741" fg:w="3217"/><text x="93.7773%" y="607.50">as..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (15,756 samples, 12.73%)</title><rect x="83.4038%" y="661" width="12.7320%" height="15" fill="rgb(211,192,36)" fg:x="103213" fg:w="15756"/><text x="83.6538%" y="671.50">&lt;futures_lite::futu..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (15,756 samples, 12.73%)</title><rect x="83.4038%" y="645" width="12.7320%" height="15" fill="rgb(229,156,32)" fg:x="103213" fg:w="15756"/><text x="83.6538%" y="655.50">&lt;core::future::from..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (15,755 samples, 12.73%)</title><rect x="83.4046%" y="629" width="12.7312%" height="15" fill="rgb(248,213,20)" fg:x="103214" fg:w="15755"/><text x="83.6546%" y="639.50">async_executor::Exe..</text></g><g><title>async_executor::Executor::run::{{closure}} (15,804 samples, 12.77%)</title><rect x="83.3658%" y="677" width="12.7708%" height="15" fill="rgb(217,64,7)" fg:x="103166" fg:w="15804"/><text x="83.6158%" y="687.50">async_executor::Exe..</text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (40 samples, 0.03%)</title><rect x="96.2505%" y="421" width="0.0323%" height="15" fill="rgb(232,142,8)" fg:x="119111" fg:w="40"/><text x="96.5005%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (39 samples, 0.03%)</title><rect x="96.2513%" y="405" width="0.0315%" height="15" fill="rgb(224,92,44)" fg:x="119112" fg:w="39"/><text x="96.5013%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (36 samples, 0.03%)</title><rect x="96.2538%" y="389" width="0.0291%" height="15" fill="rgb(214,169,17)" fg:x="119115" fg:w="36"/><text x="96.5038%" y="399.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (28 samples, 0.02%)</title><rect x="96.2602%" y="373" width="0.0226%" height="15" fill="rgb(210,59,37)" fg:x="119123" fg:w="28"/><text x="96.5102%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (28 samples, 0.02%)</title><rect x="96.2602%" y="357" width="0.0226%" height="15" fill="rgb(214,116,48)" fg:x="119123" fg:w="28"/><text x="96.5102%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (24 samples, 0.02%)</title><rect x="96.2635%" y="341" width="0.0194%" height="15" fill="rgb(244,191,6)" fg:x="119127" fg:w="24"/><text x="96.5135%" y="351.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (24 samples, 0.02%)</title><rect x="96.2635%" y="325" width="0.0194%" height="15" fill="rgb(241,50,52)" fg:x="119127" fg:w="24"/><text x="96.5135%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (43 samples, 0.03%)</title><rect x="96.2497%" y="469" width="0.0347%" height="15" fill="rgb(236,75,39)" fg:x="119110" fg:w="43"/><text x="96.4997%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (43 samples, 0.03%)</title><rect x="96.2497%" y="453" width="0.0347%" height="15" fill="rgb(236,99,0)" fg:x="119110" fg:w="43"/><text x="96.4997%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (43 samples, 0.03%)</title><rect x="96.2497%" y="437" width="0.0347%" height="15" fill="rgb(207,202,15)" fg:x="119110" fg:w="43"/><text x="96.4997%" y="447.50"></text></g><g><title>concurrent_queue::full_fence (61 samples, 0.05%)</title><rect x="96.3297%" y="437" width="0.0493%" height="15" fill="rgb(233,207,14)" fg:x="119209" fg:w="61"/><text x="96.5797%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (60 samples, 0.05%)</title><rect x="96.3305%" y="421" width="0.0485%" height="15" fill="rgb(226,27,51)" fg:x="119210" fg:w="60"/><text x="96.5805%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (60 samples, 0.05%)</title><rect x="96.3305%" y="405" width="0.0485%" height="15" fill="rgb(206,104,42)" fg:x="119210" fg:w="60"/><text x="96.5805%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (60 samples, 0.05%)</title><rect x="96.3305%" y="389" width="0.0485%" height="15" fill="rgb(212,225,4)" fg:x="119210" fg:w="60"/><text x="96.5805%" y="399.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (178 samples, 0.14%)</title><rect x="96.3055%" y="453" width="0.1438%" height="15" fill="rgb(233,96,42)" fg:x="119179" fg:w="178"/><text x="96.5555%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (87 samples, 0.07%)</title><rect x="96.3790%" y="437" width="0.0703%" height="15" fill="rgb(229,21,32)" fg:x="119270" fg:w="87"/><text x="96.6290%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (87 samples, 0.07%)</title><rect x="96.3790%" y="421" width="0.0703%" height="15" fill="rgb(226,216,24)" fg:x="119270" fg:w="87"/><text x="96.6290%" y="431.50"></text></g><g><title>concurrent_queue::full_fence (46 samples, 0.04%)</title><rect x="96.4598%" y="437" width="0.0372%" height="15" fill="rgb(221,163,17)" fg:x="119370" fg:w="46"/><text x="96.7098%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (46 samples, 0.04%)</title><rect x="96.4598%" y="421" width="0.0372%" height="15" fill="rgb(216,216,42)" fg:x="119370" fg:w="46"/><text x="96.7098%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (46 samples, 0.04%)</title><rect x="96.4598%" y="405" width="0.0372%" height="15" fill="rgb(240,118,7)" fg:x="119370" fg:w="46"/><text x="96.7098%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (46 samples, 0.04%)</title><rect x="96.4598%" y="389" width="0.0372%" height="15" fill="rgb(221,67,37)" fg:x="119370" fg:w="46"/><text x="96.7098%" y="399.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (288 samples, 0.23%)</title><rect x="96.2845%" y="469" width="0.2327%" height="15" fill="rgb(241,32,44)" fg:x="119153" fg:w="288"/><text x="96.5345%" y="479.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (84 samples, 0.07%)</title><rect x="96.4493%" y="453" width="0.0679%" height="15" fill="rgb(235,204,43)" fg:x="119357" fg:w="84"/><text x="96.6993%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (15 samples, 0.01%)</title><rect x="96.5051%" y="437" width="0.0121%" height="15" fill="rgb(213,116,10)" fg:x="119426" fg:w="15"/><text x="96.7551%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (15 samples, 0.01%)</title><rect x="96.5051%" y="421" width="0.0121%" height="15" fill="rgb(239,15,48)" fg:x="119426" fg:w="15"/><text x="96.7551%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (73 samples, 0.06%)</title><rect x="96.5172%" y="469" width="0.0590%" height="15" fill="rgb(207,123,36)" fg:x="119441" fg:w="73"/><text x="96.7672%" y="479.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (73 samples, 0.06%)</title><rect x="96.5172%" y="453" width="0.0590%" height="15" fill="rgb(209,103,30)" fg:x="119441" fg:w="73"/><text x="96.7672%" y="463.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read_unlock (71 samples, 0.06%)</title><rect x="96.5188%" y="437" width="0.0574%" height="15" fill="rgb(238,100,19)" fg:x="119443" fg:w="71"/><text x="96.7688%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_unlock (71 samples, 0.06%)</title><rect x="96.5188%" y="421" width="0.0574%" height="15" fill="rgb(244,30,14)" fg:x="119443" fg:w="71"/><text x="96.7688%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (56 samples, 0.05%)</title><rect x="96.5309%" y="405" width="0.0453%" height="15" fill="rgb(249,174,6)" fg:x="119458" fg:w="56"/><text x="96.7809%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_sub (56 samples, 0.05%)</title><rect x="96.5309%" y="389" width="0.0453%" height="15" fill="rgb(235,213,41)" fg:x="119458" fg:w="56"/><text x="96.7809%" y="399.50"></text></g><g><title>fastrand::usize (23 samples, 0.02%)</title><rect x="96.5762%" y="469" width="0.0186%" height="15" fill="rgb(213,118,6)" fg:x="119514" fg:w="23"/><text x="96.8262%" y="479.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (21 samples, 0.02%)</title><rect x="96.5778%" y="453" width="0.0170%" height="15" fill="rgb(235,44,51)" fg:x="119516" fg:w="21"/><text x="96.8278%" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (21 samples, 0.02%)</title><rect x="96.5778%" y="437" width="0.0170%" height="15" fill="rgb(217,9,53)" fg:x="119516" fg:w="21"/><text x="96.8278%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (67 samples, 0.05%)</title><rect x="96.6020%" y="421" width="0.0541%" height="15" fill="rgb(237,172,34)" fg:x="119546" fg:w="67"/><text x="96.8520%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (67 samples, 0.05%)</title><rect x="96.6020%" y="405" width="0.0541%" height="15" fill="rgb(206,206,11)" fg:x="119546" fg:w="67"/><text x="96.8520%" y="415.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (527 samples, 0.43%)</title><rect x="96.2336%" y="485" width="0.4259%" height="15" fill="rgb(214,149,29)" fg:x="119090" fg:w="527"/><text x="96.4836%" y="495.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (80 samples, 0.06%)</title><rect x="96.5948%" y="469" width="0.0646%" height="15" fill="rgb(208,123,3)" fg:x="119537" fg:w="80"/><text x="96.8448%" y="479.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read (74 samples, 0.06%)</title><rect x="96.5996%" y="453" width="0.0598%" height="15" fill="rgb(229,126,4)" fg:x="119543" fg:w="74"/><text x="96.8496%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (74 samples, 0.06%)</title><rect x="96.5996%" y="437" width="0.0598%" height="15" fill="rgb(222,92,36)" fg:x="119543" fg:w="74"/><text x="96.8496%" y="447.50"></text></g><g><title>async_executor::Sleepers::update (31 samples, 0.03%)</title><rect x="96.6724%" y="469" width="0.0251%" height="15" fill="rgb(216,39,41)" fg:x="119633" fg:w="31"/><text x="96.9224%" y="479.50"></text></g><g><title>core::task::wake::Waker::will_wake (13 samples, 0.01%)</title><rect x="96.6869%" y="453" width="0.0105%" height="15" fill="rgb(253,127,28)" fg:x="119651" fg:w="13"/><text x="96.9369%" y="463.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (13 samples, 0.01%)</title><rect x="96.6869%" y="437" width="0.0105%" height="15" fill="rgb(249,152,51)" fg:x="119651" fg:w="13"/><text x="96.9369%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (60 samples, 0.05%)</title><rect x="96.6974%" y="469" width="0.0485%" height="15" fill="rgb(209,123,42)" fg:x="119664" fg:w="60"/><text x="96.9474%" y="479.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (60 samples, 0.05%)</title><rect x="96.6974%" y="453" width="0.0485%" height="15" fill="rgb(241,118,22)" fg:x="119664" fg:w="60"/><text x="96.9474%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (58 samples, 0.05%)</title><rect x="96.6990%" y="437" width="0.0469%" height="15" fill="rgb(208,25,7)" fg:x="119666" fg:w="58"/><text x="96.9490%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (58 samples, 0.05%)</title><rect x="96.6990%" y="421" width="0.0469%" height="15" fill="rgb(243,144,39)" fg:x="119666" fg:w="58"/><text x="96.9490%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (58 samples, 0.05%)</title><rect x="96.6990%" y="405" width="0.0469%" height="15" fill="rgb(250,50,5)" fg:x="119666" fg:w="58"/><text x="96.9490%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_swap (58 samples, 0.05%)</title><rect x="96.6990%" y="389" width="0.0469%" height="15" fill="rgb(207,67,11)" fg:x="119666" fg:w="58"/><text x="96.9490%" y="399.50"></text></g><g><title>async_executor::Ticker::sleep (169 samples, 0.14%)</title><rect x="96.6594%" y="485" width="0.1366%" height="15" fill="rgb(245,204,40)" fg:x="119617" fg:w="169"/><text x="96.9094%" y="495.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (62 samples, 0.05%)</title><rect x="96.7459%" y="469" width="0.0501%" height="15" fill="rgb(238,228,24)" fg:x="119724" fg:w="62"/><text x="96.9959%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (56 samples, 0.05%)</title><rect x="96.7507%" y="453" width="0.0453%" height="15" fill="rgb(217,116,22)" fg:x="119730" fg:w="56"/><text x="97.0007%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (56 samples, 0.05%)</title><rect x="96.7507%" y="437" width="0.0453%" height="15" fill="rgb(234,98,12)" fg:x="119730" fg:w="56"/><text x="97.0007%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (56 samples, 0.05%)</title><rect x="96.7507%" y="421" width="0.0453%" height="15" fill="rgb(242,170,50)" fg:x="119730" fg:w="56"/><text x="97.0007%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (56 samples, 0.05%)</title><rect x="96.7507%" y="405" width="0.0453%" height="15" fill="rgb(235,7,5)" fg:x="119730" fg:w="56"/><text x="97.0007%" y="415.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (752 samples, 0.61%)</title><rect x="96.1891%" y="597" width="0.6077%" height="15" fill="rgb(241,114,28)" fg:x="119035" fg:w="752"/><text x="96.4391%" y="607.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (733 samples, 0.59%)</title><rect x="96.2045%" y="581" width="0.5923%" height="15" fill="rgb(246,112,42)" fg:x="119054" fg:w="733"/><text x="96.4545%" y="591.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}} (730 samples, 0.59%)</title><rect x="96.2069%" y="565" width="0.5899%" height="15" fill="rgb(248,228,14)" fg:x="119057" fg:w="730"/><text x="96.4569%" y="575.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (714 samples, 0.58%)</title><rect x="96.2198%" y="549" width="0.5770%" height="15" fill="rgb(208,133,18)" fg:x="119073" fg:w="714"/><text x="96.4698%" y="559.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (714 samples, 0.58%)</title><rect x="96.2198%" y="533" width="0.5770%" height="15" fill="rgb(207,35,49)" fg:x="119073" fg:w="714"/><text x="96.4698%" y="543.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (700 samples, 0.57%)</title><rect x="96.2311%" y="517" width="0.5657%" height="15" fill="rgb(205,68,36)" fg:x="119087" fg:w="700"/><text x="96.4811%" y="527.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (697 samples, 0.56%)</title><rect x="96.2336%" y="501" width="0.5632%" height="15" fill="rgb(245,62,40)" fg:x="119090" fg:w="697"/><text x="96.4836%" y="511.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (39 samples, 0.03%)</title><rect x="96.8784%" y="533" width="0.0315%" height="15" fill="rgb(228,27,24)" fg:x="119888" fg:w="39"/><text x="97.1284%" y="543.50"></text></g><g><title>core::mem::replace (39 samples, 0.03%)</title><rect x="96.8784%" y="517" width="0.0315%" height="15" fill="rgb(253,19,12)" fg:x="119888" fg:w="39"/><text x="97.1284%" y="527.50"></text></g><g><title>core::ptr::read (39 samples, 0.03%)</title><rect x="96.8784%" y="501" width="0.0315%" height="15" fill="rgb(232,28,20)" fg:x="119888" fg:w="39"/><text x="97.1284%" y="511.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (58 samples, 0.05%)</title><rect x="96.8695%" y="549" width="0.0469%" height="15" fill="rgb(218,35,51)" fg:x="119877" fg:w="58"/><text x="97.1195%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (58 samples, 0.05%)</title><rect x="96.9164%" y="549" width="0.0469%" height="15" fill="rgb(212,90,40)" fg:x="119935" fg:w="58"/><text x="97.1664%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (55 samples, 0.04%)</title><rect x="96.9188%" y="533" width="0.0444%" height="15" fill="rgb(220,172,12)" fg:x="119938" fg:w="55"/><text x="97.1688%" y="543.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (55 samples, 0.04%)</title><rect x="96.9188%" y="517" width="0.0444%" height="15" fill="rgb(226,159,20)" fg:x="119938" fg:w="55"/><text x="97.1688%" y="527.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (51 samples, 0.04%)</title><rect x="96.9220%" y="501" width="0.0412%" height="15" fill="rgb(234,205,16)" fg:x="119942" fg:w="51"/><text x="97.1720%" y="511.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (51 samples, 0.04%)</title><rect x="96.9220%" y="485" width="0.0412%" height="15" fill="rgb(207,9,39)" fg:x="119942" fg:w="51"/><text x="97.1720%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (51 samples, 0.04%)</title><rect x="96.9220%" y="469" width="0.0412%" height="15" fill="rgb(249,143,15)" fg:x="119942" fg:w="51"/><text x="97.1720%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_swap (51 samples, 0.04%)</title><rect x="96.9220%" y="453" width="0.0412%" height="15" fill="rgb(253,133,29)" fg:x="119942" fg:w="51"/><text x="97.1720%" y="463.50"></text></g><g><title>core::task::wake::Waker::will_wake (20 samples, 0.02%)</title><rect x="96.9641%" y="549" width="0.0162%" height="15" fill="rgb(221,187,0)" fg:x="119994" fg:w="20"/><text x="97.2141%" y="559.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (20 samples, 0.02%)</title><rect x="96.9641%" y="533" width="0.0162%" height="15" fill="rgb(205,204,26)" fg:x="119994" fg:w="20"/><text x="97.2141%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (17 samples, 0.01%)</title><rect x="96.9665%" y="517" width="0.0137%" height="15" fill="rgb(224,68,54)" fg:x="119997" fg:w="17"/><text x="97.2165%" y="527.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (17 samples, 0.01%)</title><rect x="96.9665%" y="501" width="0.0137%" height="15" fill="rgb(209,67,4)" fg:x="119997" fg:w="17"/><text x="97.2165%" y="511.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (263 samples, 0.21%)</title><rect x="96.8380%" y="565" width="0.2125%" height="15" fill="rgb(228,229,18)" fg:x="119838" fg:w="263"/><text x="97.0880%" y="575.50"></text></g><g><title>event_listener::Inner::lock (87 samples, 0.07%)</title><rect x="96.9802%" y="549" width="0.0703%" height="15" fill="rgb(231,89,13)" fg:x="120014" fg:w="87"/><text x="97.2302%" y="559.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (86 samples, 0.07%)</title><rect x="96.9810%" y="533" width="0.0695%" height="15" fill="rgb(210,182,18)" fg:x="120015" fg:w="86"/><text x="97.2310%" y="543.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (80 samples, 0.06%)</title><rect x="96.9859%" y="517" width="0.0646%" height="15" fill="rgb(240,105,2)" fg:x="120021" fg:w="80"/><text x="97.2359%" y="527.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (80 samples, 0.06%)</title><rect x="96.9859%" y="501" width="0.0646%" height="15" fill="rgb(207,170,50)" fg:x="120021" fg:w="80"/><text x="97.2359%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (80 samples, 0.06%)</title><rect x="96.9859%" y="485" width="0.0646%" height="15" fill="rgb(232,133,24)" fg:x="120021" fg:w="80"/><text x="97.2359%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (80 samples, 0.06%)</title><rect x="96.9859%" y="469" width="0.0646%" height="15" fill="rgb(235,166,27)" fg:x="120021" fg:w="80"/><text x="97.2359%" y="479.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (139 samples, 0.11%)</title><rect x="97.0505%" y="565" width="0.1123%" height="15" fill="rgb(209,19,13)" fg:x="120101" fg:w="139"/><text x="97.3005%" y="575.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (139 samples, 0.11%)</title><rect x="97.0505%" y="549" width="0.1123%" height="15" fill="rgb(226,79,39)" fg:x="120101" fg:w="139"/><text x="97.3005%" y="559.50"></text></g><g><title>concurrent_queue::single::Single&lt;T&gt;::pop (108 samples, 0.09%)</title><rect x="97.0756%" y="533" width="0.0873%" height="15" fill="rgb(222,163,10)" fg:x="120132" fg:w="108"/><text x="97.3256%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (104 samples, 0.08%)</title><rect x="97.0788%" y="517" width="0.0840%" height="15" fill="rgb(214,44,19)" fg:x="120136" fg:w="104"/><text x="97.3288%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (104 samples, 0.08%)</title><rect x="97.0788%" y="501" width="0.0840%" height="15" fill="rgb(210,217,13)" fg:x="120136" fg:w="104"/><text x="97.3288%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (104 samples, 0.08%)</title><rect x="97.0788%" y="485" width="0.0840%" height="15" fill="rgb(237,61,54)" fg:x="120136" fg:w="104"/><text x="97.3288%" y="495.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,226 samples, 0.99%)</title><rect x="96.1746%" y="629" width="0.9907%" height="15" fill="rgb(226,184,24)" fg:x="119017" fg:w="1226"/><text x="96.4246%" y="639.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,215 samples, 0.98%)</title><rect x="96.1835%" y="613" width="0.9818%" height="15" fill="rgb(223,226,4)" fg:x="119028" fg:w="1215"/><text x="96.4335%" y="623.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}} (456 samples, 0.37%)</title><rect x="96.7968%" y="597" width="0.3685%" height="15" fill="rgb(210,26,41)" fg:x="119787" fg:w="456"/><text x="97.0468%" y="607.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (432 samples, 0.35%)</title><rect x="96.8162%" y="581" width="0.3491%" height="15" fill="rgb(220,221,6)" fg:x="119811" fg:w="432"/><text x="97.0662%" y="591.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (17,113 samples, 13.83%)</title><rect x="83.3391%" y="709" width="13.8286%" height="15" fill="rgb(225,89,49)" fg:x="103133" fg:w="17113"/><text x="83.5891%" y="719.50">&lt;futures_lite::future..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17,082 samples, 13.80%)</title><rect x="83.3642%" y="693" width="13.8035%" height="15" fill="rgb(218,70,45)" fg:x="103164" fg:w="17082"/><text x="83.6142%" y="703.50">&lt;core::future::from_g..</text></g><g><title>async_executor::LocalExecutor::run::{{closure}} (1,276 samples, 1.03%)</title><rect x="96.1366%" y="677" width="1.0311%" height="15" fill="rgb(238,166,21)" fg:x="118970" fg:w="1276"/><text x="96.3866%" y="687.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,242 samples, 1.00%)</title><rect x="96.1641%" y="661" width="1.0036%" height="15" fill="rgb(224,141,44)" fg:x="119004" fg:w="1242"/><text x="96.4141%" y="671.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (1,242 samples, 1.00%)</title><rect x="96.1641%" y="645" width="1.0036%" height="15" fill="rgb(230,12,49)" fg:x="119004" fg:w="1242"/><text x="96.4141%" y="655.50"></text></g><g><title>async_io::reactor::Reactor::try_lock (92 samples, 0.07%)</title><rect x="97.1750%" y="709" width="0.0743%" height="15" fill="rgb(212,174,12)" fg:x="120255" fg:w="92"/><text x="97.4250%" y="719.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (92 samples, 0.07%)</title><rect x="97.1750%" y="693" width="0.0743%" height="15" fill="rgb(246,67,9)" fg:x="120255" fg:w="92"/><text x="97.4250%" y="703.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (83 samples, 0.07%)</title><rect x="97.1822%" y="677" width="0.0671%" height="15" fill="rgb(239,35,23)" fg:x="120264" fg:w="83"/><text x="97.4322%" y="687.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::try_lock (83 samples, 0.07%)</title><rect x="97.1822%" y="661" width="0.0671%" height="15" fill="rgb(211,167,0)" fg:x="120264" fg:w="83"/><text x="97.4322%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (83 samples, 0.07%)</title><rect x="97.1822%" y="645" width="0.0671%" height="15" fill="rgb(225,119,45)" fg:x="120264" fg:w="83"/><text x="97.4322%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (83 samples, 0.07%)</title><rect x="97.1822%" y="629" width="0.0671%" height="15" fill="rgb(210,162,6)" fg:x="120264" fg:w="83"/><text x="97.4322%" y="639.50"></text></g><g><title>sn_rust_dealloc (39 samples, 0.03%)</title><rect x="97.3067%" y="533" width="0.0315%" height="15" fill="rgb(208,118,35)" fg:x="120418" fg:w="39"/><text x="97.5567%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (56 samples, 0.05%)</title><rect x="97.3026%" y="597" width="0.0453%" height="15" fill="rgb(239,4,53)" fg:x="120413" fg:w="56"/><text x="97.5526%" y="607.50"></text></g><g><title>alloc::alloc::dealloc (54 samples, 0.04%)</title><rect x="97.3043%" y="581" width="0.0436%" height="15" fill="rgb(213,130,21)" fg:x="120415" fg:w="54"/><text x="97.5543%" y="591.50"></text></g><g><title>__rg_dealloc (54 samples, 0.04%)</title><rect x="97.3043%" y="565" width="0.0436%" height="15" fill="rgb(235,148,0)" fg:x="120415" fg:w="54"/><text x="97.5543%" y="575.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (54 samples, 0.04%)</title><rect x="97.3043%" y="549" width="0.0436%" height="15" fill="rgb(244,224,18)" fg:x="120415" fg:w="54"/><text x="97.5543%" y="559.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (57 samples, 0.05%)</title><rect x="97.3026%" y="629" width="0.0461%" height="15" fill="rgb(211,214,4)" fg:x="120413" fg:w="57"/><text x="97.5526%" y="639.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (57 samples, 0.05%)</title><rect x="97.3026%" y="613" width="0.0461%" height="15" fill="rgb(206,119,25)" fg:x="120413" fg:w="57"/><text x="97.5526%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (68 samples, 0.05%)</title><rect x="97.2962%" y="677" width="0.0549%" height="15" fill="rgb(243,93,47)" fg:x="120405" fg:w="68"/><text x="97.5462%" y="687.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V&gt;::dying_next (64 samples, 0.05%)</title><rect x="97.2994%" y="661" width="0.0517%" height="15" fill="rgb(224,194,6)" fg:x="120409" fg:w="64"/><text x="97.5494%" y="671.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (60 samples, 0.05%)</title><rect x="97.3026%" y="645" width="0.0485%" height="15" fill="rgb(243,229,6)" fg:x="120413" fg:w="60"/><text x="97.5526%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="97.3511%" y="661" width="0.0129%" height="15" fill="rgb(207,23,50)" fg:x="120473" fg:w="16"/><text x="97.6011%" y="671.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Immut,K,V&gt;::next_unchecked (16 samples, 0.01%)</title><rect x="97.3511%" y="645" width="0.0129%" height="15" fill="rgb(253,192,32)" fg:x="120473" fg:w="16"/><text x="97.6011%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.01%)</title><rect x="97.3511%" y="677" width="0.0137%" height="15" fill="rgb(213,21,6)" fg:x="120473" fg:w="17"/><text x="97.6011%" y="687.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::calc_split_length (15 samples, 0.01%)</title><rect x="97.3713%" y="661" width="0.0121%" height="15" fill="rgb(243,151,13)" fg:x="120498" fg:w="15"/><text x="97.6213%" y="671.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::Edge&gt;::move_suffix (33 samples, 0.03%)</title><rect x="97.3883%" y="645" width="0.0267%" height="15" fill="rgb(233,165,41)" fg:x="120519" fg:w="33"/><text x="97.6383%" y="655.50"></text></g><g><title>alloc::collections::btree::node::move_to_slice (26 samples, 0.02%)</title><rect x="97.3940%" y="629" width="0.0210%" height="15" fill="rgb(246,176,45)" fg:x="120526" fg:w="26"/><text x="97.6440%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (26 samples, 0.02%)</title><rect x="97.3940%" y="613" width="0.0210%" height="15" fill="rgb(217,170,52)" fg:x="120526" fg:w="26"/><text x="97.6440%" y="623.50"></text></g><g><title>[libc-2.31.so] (26 samples, 0.02%)</title><rect x="97.3940%" y="597" width="0.0210%" height="15" fill="rgb(214,203,54)" fg:x="120526" fg:w="26"/><text x="97.6440%" y="607.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (27 samples, 0.02%)</title><rect x="97.4174%" y="613" width="0.0218%" height="15" fill="rgb(248,215,49)" fg:x="120555" fg:w="27"/><text x="97.6674%" y="623.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (38 samples, 0.03%)</title><rect x="97.4150%" y="645" width="0.0307%" height="15" fill="rgb(208,46,10)" fg:x="120552" fg:w="38"/><text x="97.6650%" y="655.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (38 samples, 0.03%)</title><rect x="97.4150%" y="629" width="0.0307%" height="15" fill="rgb(254,5,31)" fg:x="120552" fg:w="38"/><text x="97.6650%" y="639.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (64 samples, 0.05%)</title><rect x="97.5063%" y="437" width="0.0517%" height="15" fill="rgb(222,104,33)" fg:x="120665" fg:w="64"/><text x="97.7563%" y="447.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new_uninit (142 samples, 0.11%)</title><rect x="97.4457%" y="581" width="0.1147%" height="15" fill="rgb(248,49,16)" fg:x="120590" fg:w="142"/><text x="97.6957%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (142 samples, 0.11%)</title><rect x="97.4457%" y="565" width="0.1147%" height="15" fill="rgb(232,198,41)" fg:x="120590" fg:w="142"/><text x="97.6957%" y="575.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (142 samples, 0.11%)</title><rect x="97.4457%" y="549" width="0.1147%" height="15" fill="rgb(214,125,3)" fg:x="120590" fg:w="142"/><text x="97.6957%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (142 samples, 0.11%)</title><rect x="97.4457%" y="533" width="0.1147%" height="15" fill="rgb(229,220,28)" fg:x="120590" fg:w="142"/><text x="97.6957%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (142 samples, 0.11%)</title><rect x="97.4457%" y="517" width="0.1147%" height="15" fill="rgb(222,64,37)" fg:x="120590" fg:w="142"/><text x="97.6957%" y="527.50"></text></g><g><title>alloc::alloc::alloc (141 samples, 0.11%)</title><rect x="97.4465%" y="501" width="0.1139%" height="15" fill="rgb(249,184,13)" fg:x="120591" fg:w="141"/><text x="97.6965%" y="511.50"></text></g><g><title>__rg_alloc (141 samples, 0.11%)</title><rect x="97.4465%" y="485" width="0.1139%" height="15" fill="rgb(252,176,6)" fg:x="120591" fg:w="141"/><text x="97.6965%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (141 samples, 0.11%)</title><rect x="97.4465%" y="469" width="0.1139%" height="15" fill="rgb(228,153,7)" fg:x="120591" fg:w="141"/><text x="97.6965%" y="479.50"></text></g><g><title>sn_rust_alloc (139 samples, 0.11%)</title><rect x="97.4481%" y="453" width="0.1123%" height="15" fill="rgb(242,193,5)" fg:x="120593" fg:w="139"/><text x="97.6981%" y="463.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (143 samples, 0.12%)</title><rect x="97.4457%" y="629" width="0.1156%" height="15" fill="rgb(232,140,9)" fg:x="120590" fg:w="143"/><text x="97.6957%" y="639.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (143 samples, 0.12%)</title><rect x="97.4457%" y="613" width="0.1156%" height="15" fill="rgb(213,222,16)" fg:x="120590" fg:w="143"/><text x="97.6957%" y="623.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (143 samples, 0.12%)</title><rect x="97.4457%" y="597" width="0.1156%" height="15" fill="rgb(222,75,50)" fg:x="120590" fg:w="143"/><text x="97.6957%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::split_off (238 samples, 0.19%)</title><rect x="97.3697%" y="677" width="0.1923%" height="15" fill="rgb(205,180,2)" fg:x="120496" fg:w="238"/><text x="97.6197%" y="687.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::split_off (221 samples, 0.18%)</title><rect x="97.3835%" y="661" width="0.1786%" height="15" fill="rgb(216,34,7)" fg:x="120513" fg:w="221"/><text x="97.6335%" y="671.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::new_pillar (144 samples, 0.12%)</title><rect x="97.4457%" y="645" width="0.1164%" height="15" fill="rgb(253,16,32)" fg:x="120590" fg:w="144"/><text x="97.6957%" y="655.50"></text></g><g><title>concurrent_queue::full_fence (26 samples, 0.02%)</title><rect x="97.5871%" y="629" width="0.0210%" height="15" fill="rgb(208,97,28)" fg:x="120765" fg:w="26"/><text x="97.8371%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (25 samples, 0.02%)</title><rect x="97.5879%" y="613" width="0.0202%" height="15" fill="rgb(225,92,11)" fg:x="120766" fg:w="25"/><text x="97.8379%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (25 samples, 0.02%)</title><rect x="97.5879%" y="597" width="0.0202%" height="15" fill="rgb(243,38,12)" fg:x="120766" fg:w="25"/><text x="97.8379%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (25 samples, 0.02%)</title><rect x="97.5879%" y="581" width="0.0202%" height="15" fill="rgb(208,139,16)" fg:x="120766" fg:w="25"/><text x="97.8379%" y="591.50"></text></g><g><title>async_io::reactor::Reactor::process_timer_ops (83 samples, 0.07%)</title><rect x="97.5620%" y="677" width="0.0671%" height="15" fill="rgb(227,24,9)" fg:x="120734" fg:w="83"/><text x="97.8120%" y="687.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (66 samples, 0.05%)</title><rect x="97.5758%" y="661" width="0.0533%" height="15" fill="rgb(206,62,11)" fg:x="120751" fg:w="66"/><text x="97.8258%" y="671.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (63 samples, 0.05%)</title><rect x="97.5782%" y="645" width="0.0509%" height="15" fill="rgb(228,134,27)" fg:x="120754" fg:w="63"/><text x="97.8282%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (26 samples, 0.02%)</title><rect x="97.6081%" y="629" width="0.0210%" height="15" fill="rgb(205,55,33)" fg:x="120791" fg:w="26"/><text x="97.8581%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_load (26 samples, 0.02%)</title><rect x="97.6081%" y="613" width="0.0210%" height="15" fill="rgb(243,75,43)" fg:x="120791" fg:w="26"/><text x="97.8581%" y="623.50"></text></g><g><title>core::mem::drop (115 samples, 0.09%)</title><rect x="97.6291%" y="677" width="0.0929%" height="15" fill="rgb(223,27,42)" fg:x="120817" fg:w="115"/><text x="97.8791%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::collections::btree::map::BTreeMap&lt;(std::time::Instant,usize),core::task::wake::Waker&gt;&gt;&gt; (115 samples, 0.09%)</title><rect x="97.6291%" y="661" width="0.0929%" height="15" fill="rgb(232,189,33)" fg:x="120817" fg:w="115"/><text x="97.8791%" y="671.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (115 samples, 0.09%)</title><rect x="97.6291%" y="645" width="0.0929%" height="15" fill="rgb(210,9,39)" fg:x="120817" fg:w="115"/><text x="97.8791%" y="655.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (112 samples, 0.09%)</title><rect x="97.6315%" y="629" width="0.0905%" height="15" fill="rgb(242,85,26)" fg:x="120820" fg:w="112"/><text x="97.8815%" y="639.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (112 samples, 0.09%)</title><rect x="97.6315%" y="613" width="0.0905%" height="15" fill="rgb(248,44,4)" fg:x="120820" fg:w="112"/><text x="97.8815%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (112 samples, 0.09%)</title><rect x="97.6315%" y="597" width="0.0905%" height="15" fill="rgb(250,96,46)" fg:x="120820" fg:w="112"/><text x="97.8815%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_swap (112 samples, 0.09%)</title><rect x="97.6315%" y="581" width="0.0905%" height="15" fill="rgb(229,116,26)" fg:x="120820" fg:w="112"/><text x="97.8815%" y="591.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (21 samples, 0.02%)</title><rect x="97.7245%" y="677" width="0.0170%" height="15" fill="rgb(246,94,34)" fg:x="120935" fg:w="21"/><text x="97.9745%" y="687.50"></text></g><g><title>async_io::reactor::Reactor::process_timers::{{closure}} (17 samples, 0.01%)</title><rect x="97.7277%" y="661" width="0.0137%" height="15" fill="rgb(251,73,21)" fg:x="120939" fg:w="17"/><text x="97.9777%" y="671.50"></text></g><g><title>std::time::Instant::duration_since (17 samples, 0.01%)</title><rect x="97.7277%" y="645" width="0.0137%" height="15" fill="rgb(254,121,25)" fg:x="120939" fg:w="17"/><text x="97.9777%" y="655.50"></text></g><g><title>std::time::Instant::checked_duration_since (17 samples, 0.01%)</title><rect x="97.7277%" y="629" width="0.0137%" height="15" fill="rgb(215,161,49)" fg:x="120939" fg:w="17"/><text x="97.9777%" y="639.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (17 samples, 0.01%)</title><rect x="97.7277%" y="613" width="0.0137%" height="15" fill="rgb(221,43,13)" fg:x="120939" fg:w="17"/><text x="97.9777%" y="623.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (13 samples, 0.01%)</title><rect x="97.7309%" y="597" width="0.0105%" height="15" fill="rgb(249,5,37)" fg:x="120943" fg:w="13"/><text x="97.9809%" y="607.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (64 samples, 0.05%)</title><rect x="97.7439%" y="677" width="0.0517%" height="15" fill="rgb(226,25,44)" fg:x="120959" fg:w="64"/><text x="97.9939%" y="687.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (59 samples, 0.05%)</title><rect x="97.7479%" y="661" width="0.0477%" height="15" fill="rgb(238,189,16)" fg:x="120964" fg:w="59"/><text x="97.9979%" y="671.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (59 samples, 0.05%)</title><rect x="97.7479%" y="645" width="0.0477%" height="15" fill="rgb(251,186,8)" fg:x="120964" fg:w="59"/><text x="97.9979%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (59 samples, 0.05%)</title><rect x="97.7479%" y="629" width="0.0477%" height="15" fill="rgb(254,34,31)" fg:x="120964" fg:w="59"/><text x="97.9979%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (59 samples, 0.05%)</title><rect x="97.7479%" y="613" width="0.0477%" height="15" fill="rgb(225,215,27)" fg:x="120964" fg:w="59"/><text x="97.9979%" y="623.50"></text></g><g><title>async_io::reactor::Reactor::process_timers (740 samples, 0.60%)</title><rect x="97.2784%" y="693" width="0.5980%" height="15" fill="rgb(221,192,48)" fg:x="120383" fg:w="740"/><text x="97.5284%" y="703.50"></text></g><g><title>std::time::Instant::now (100 samples, 0.08%)</title><rect x="97.7956%" y="677" width="0.0808%" height="15" fill="rgb(219,137,20)" fg:x="121023" fg:w="100"/><text x="98.0456%" y="687.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (100 samples, 0.08%)</title><rect x="97.7956%" y="661" width="0.0808%" height="15" fill="rgb(219,84,11)" fg:x="121023" fg:w="100"/><text x="98.0456%" y="671.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (100 samples, 0.08%)</title><rect x="97.7956%" y="645" width="0.0808%" height="15" fill="rgb(224,10,23)" fg:x="121023" fg:w="100"/><text x="98.0456%" y="655.50"></text></g><g><title>__clock_gettime (99 samples, 0.08%)</title><rect x="97.7964%" y="629" width="0.0800%" height="15" fill="rgb(248,22,39)" fg:x="121024" fg:w="99"/><text x="98.0464%" y="639.50"></text></g><g><title>__vdso_clock_gettime (78 samples, 0.06%)</title><rect x="97.8134%" y="613" width="0.0630%" height="15" fill="rgb(212,154,20)" fg:x="121045" fg:w="78"/><text x="98.0634%" y="623.50"></text></g><g><title>[[vdso]] (70 samples, 0.06%)</title><rect x="97.8198%" y="597" width="0.0566%" height="15" fill="rgb(236,199,50)" fg:x="121053" fg:w="70"/><text x="98.0698%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (29 samples, 0.02%)</title><rect x="97.8812%" y="693" width="0.0234%" height="15" fill="rgb(211,9,17)" fg:x="121129" fg:w="29"/><text x="98.1312%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_add (29 samples, 0.02%)</title><rect x="97.8812%" y="677" width="0.0234%" height="15" fill="rgb(243,216,36)" fg:x="121129" fg:w="29"/><text x="98.1312%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;polling::epoll::Events&gt;&gt; (22 samples, 0.02%)</title><rect x="97.9451%" y="677" width="0.0178%" height="15" fill="rgb(250,2,10)" fg:x="121208" fg:w="22"/><text x="98.1951%" y="687.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.02%)</title><rect x="97.9451%" y="661" width="0.0178%" height="15" fill="rgb(226,50,48)" fg:x="121208" fg:w="22"/><text x="98.1951%" y="671.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (20 samples, 0.02%)</title><rect x="97.9467%" y="645" width="0.0162%" height="15" fill="rgb(243,81,16)" fg:x="121210" fg:w="20"/><text x="98.1967%" y="655.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (20 samples, 0.02%)</title><rect x="97.9467%" y="629" width="0.0162%" height="15" fill="rgb(250,14,2)" fg:x="121210" fg:w="20"/><text x="98.1967%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (20 samples, 0.02%)</title><rect x="97.9467%" y="613" width="0.0162%" height="15" fill="rgb(233,135,29)" fg:x="121210" fg:w="20"/><text x="98.1967%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_swap (20 samples, 0.02%)</title><rect x="97.9467%" y="597" width="0.0162%" height="15" fill="rgb(224,64,43)" fg:x="121210" fg:w="20"/><text x="98.1967%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (19 samples, 0.02%)</title><rect x="97.9628%" y="677" width="0.0154%" height="15" fill="rgb(238,84,13)" fg:x="121230" fg:w="19"/><text x="98.2128%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_swap (19 samples, 0.02%)</title><rect x="97.9628%" y="661" width="0.0154%" height="15" fill="rgb(253,48,26)" fg:x="121230" fg:w="19"/><text x="98.2128%" y="671.50"></text></g><g><title>__pthread_disable_asynccancel (14 samples, 0.01%)</title><rect x="98.1026%" y="645" width="0.0113%" height="15" fill="rgb(205,223,31)" fg:x="121403" fg:w="14"/><text x="98.3526%" y="655.50"></text></g><g><title>__libc_read (126 samples, 0.10%)</title><rect x="98.0574%" y="661" width="0.1018%" height="15" fill="rgb(221,41,32)" fg:x="121347" fg:w="126"/><text x="98.3074%" y="671.50"></text></g><g><title>__pthread_enable_asynccancel (56 samples, 0.05%)</title><rect x="98.1140%" y="645" width="0.0453%" height="15" fill="rgb(213,158,31)" fg:x="121417" fg:w="56"/><text x="98.3640%" y="655.50"></text></g><g><title>epoll_wait (160 samples, 0.13%)</title><rect x="98.1592%" y="661" width="0.1293%" height="15" fill="rgb(245,126,43)" fg:x="121473" fg:w="160"/><text x="98.4092%" y="671.50"></text></g><g><title>[libc-2.31.so] (53 samples, 0.04%)</title><rect x="98.2457%" y="645" width="0.0428%" height="15" fill="rgb(227,7,22)" fg:x="121580" fg:w="53"/><text x="98.4957%" y="655.50"></text></g><g><title>polling::epoll::Poller::modify (87 samples, 0.07%)</title><rect x="98.2925%" y="661" width="0.0703%" height="15" fill="rgb(252,90,44)" fg:x="121638" fg:w="87"/><text x="98.5425%" y="671.50"></text></g><g><title>polling::epoll::Poller::ctl (70 samples, 0.06%)</title><rect x="98.3063%" y="645" width="0.0566%" height="15" fill="rgb(253,91,0)" fg:x="121655" fg:w="70"/><text x="98.5563%" y="655.50"></text></g><g><title>epoll_ctl (64 samples, 0.05%)</title><rect x="98.3111%" y="629" width="0.0517%" height="15" fill="rgb(252,175,49)" fg:x="121661" fg:w="64"/><text x="98.5611%" y="639.50"></text></g><g><title>polling::epoll::Poller::wait (507 samples, 0.41%)</title><rect x="97.9782%" y="677" width="0.4097%" height="15" fill="rgb(246,150,1)" fg:x="121249" fg:w="507"/><text x="98.2282%" y="687.50"></text></g><g><title>syscall (31 samples, 0.03%)</title><rect x="98.3628%" y="661" width="0.0251%" height="15" fill="rgb(241,192,25)" fg:x="121725" fg:w="31"/><text x="98.6128%" y="671.50"></text></g><g><title>polling::Poller::wait (610 samples, 0.49%)</title><rect x="97.9063%" y="693" width="0.4929%" height="15" fill="rgb(239,187,11)" fg:x="121160" fg:w="610"/><text x="98.1563%" y="703.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (14 samples, 0.01%)</title><rect x="98.3879%" y="677" width="0.0113%" height="15" fill="rgb(218,202,51)" fg:x="121756" fg:w="14"/><text x="98.6379%" y="687.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (13 samples, 0.01%)</title><rect x="98.3887%" y="661" width="0.0105%" height="15" fill="rgb(225,176,8)" fg:x="121757" fg:w="13"/><text x="98.6387%" y="671.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::try_lock (13 samples, 0.01%)</title><rect x="98.3887%" y="645" width="0.0105%" height="15" fill="rgb(219,122,41)" fg:x="121757" fg:w="13"/><text x="98.6387%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (13 samples, 0.01%)</title><rect x="98.3887%" y="629" width="0.0105%" height="15" fill="rgb(248,140,20)" fg:x="121757" fg:w="13"/><text x="98.6387%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (13 samples, 0.01%)</title><rect x="98.3887%" y="613" width="0.0105%" height="15" fill="rgb(245,41,37)" fg:x="121757" fg:w="13"/><text x="98.6387%" y="623.50"></text></g><g><title>async_io::reactor::ReactorLock::react (1,424 samples, 1.15%)</title><rect x="97.2493%" y="709" width="1.1507%" height="15" fill="rgb(235,82,39)" fg:x="120347" fg:w="1424"/><text x="97.4993%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (29 samples, 0.02%)</title><rect x="98.4008%" y="661" width="0.0234%" height="15" fill="rgb(230,108,42)" fg:x="121772" fg:w="29"/><text x="98.6508%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_store (29 samples, 0.02%)</title><rect x="98.4008%" y="645" width="0.0234%" height="15" fill="rgb(215,150,50)" fg:x="121772" fg:w="29"/><text x="98.6508%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_io::driver::CallOnDrop&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (39 samples, 0.03%)</title><rect x="98.4000%" y="709" width="0.0315%" height="15" fill="rgb(233,212,5)" fg:x="121771" fg:w="39"/><text x="98.6500%" y="719.50"></text></g><g><title>&lt;async_io::driver::CallOnDrop&lt;F&gt; as core::ops::drop::Drop&gt;::drop (39 samples, 0.03%)</title><rect x="98.4000%" y="693" width="0.0315%" height="15" fill="rgb(245,80,22)" fg:x="121771" fg:w="39"/><text x="98.6500%" y="703.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (39 samples, 0.03%)</title><rect x="98.4000%" y="677" width="0.0315%" height="15" fill="rgb(238,129,16)" fg:x="121771" fg:w="39"/><text x="98.6500%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (14 samples, 0.01%)</title><rect x="98.4364%" y="709" width="0.0113%" height="15" fill="rgb(240,19,0)" fg:x="121816" fg:w="14"/><text x="98.6864%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_store (14 samples, 0.01%)</title><rect x="98.4364%" y="693" width="0.0113%" height="15" fill="rgb(232,42,35)" fg:x="121816" fg:w="14"/><text x="98.6864%" y="703.50"></text></g><g><title>log::max_level (24 samples, 0.02%)</title><rect x="98.4477%" y="709" width="0.0194%" height="15" fill="rgb(223,130,24)" fg:x="121830" fg:w="24"/><text x="98.6977%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (24 samples, 0.02%)</title><rect x="98.4477%" y="693" width="0.0194%" height="15" fill="rgb(237,16,22)" fg:x="121830" fg:w="24"/><text x="98.6977%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_load (24 samples, 0.02%)</title><rect x="98.4477%" y="677" width="0.0194%" height="15" fill="rgb(248,192,20)" fg:x="121830" fg:w="24"/><text x="98.6977%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;()&gt;&gt; (42 samples, 0.03%)</title><rect x="98.4832%" y="677" width="0.0339%" height="15" fill="rgb(233,167,2)" fg:x="121874" fg:w="42"/><text x="98.7332%" y="687.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (42 samples, 0.03%)</title><rect x="98.4832%" y="661" width="0.0339%" height="15" fill="rgb(252,71,44)" fg:x="121874" fg:w="42"/><text x="98.7332%" y="671.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (39 samples, 0.03%)</title><rect x="98.4857%" y="645" width="0.0315%" height="15" fill="rgb(238,37,47)" fg:x="121877" fg:w="39"/><text x="98.7357%" y="655.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (39 samples, 0.03%)</title><rect x="98.4857%" y="629" width="0.0315%" height="15" fill="rgb(214,202,54)" fg:x="121877" fg:w="39"/><text x="98.7357%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (39 samples, 0.03%)</title><rect x="98.4857%" y="613" width="0.0315%" height="15" fill="rgb(254,165,40)" fg:x="121877" fg:w="39"/><text x="98.7357%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_swap (39 samples, 0.03%)</title><rect x="98.4857%" y="597" width="0.0315%" height="15" fill="rgb(246,173,38)" fg:x="121877" fg:w="39"/><text x="98.7357%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (108 samples, 0.09%)</title><rect x="98.5172%" y="677" width="0.0873%" height="15" fill="rgb(215,3,27)" fg:x="121916" fg:w="108"/><text x="98.7672%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (108 samples, 0.09%)</title><rect x="98.5172%" y="661" width="0.0873%" height="15" fill="rgb(239,169,51)" fg:x="121916" fg:w="108"/><text x="98.7672%" y="671.50"></text></g><g><title>core::bool::&lt;impl bool&gt;::then (71 samples, 0.06%)</title><rect x="98.6158%" y="597" width="0.0574%" height="15" fill="rgb(212,5,25)" fg:x="122038" fg:w="71"/><text x="98.8658%" y="607.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (14 samples, 0.01%)</title><rect x="98.6731%" y="597" width="0.0113%" height="15" fill="rgb(243,45,17)" fg:x="122109" fg:w="14"/><text x="98.9231%" y="607.50"></text></g><g><title>std::sys::unix::futex::futex_wait (322 samples, 0.26%)</title><rect x="98.6101%" y="613" width="0.2602%" height="15" fill="rgb(242,97,9)" fg:x="122031" fg:w="322"/><text x="98.8601%" y="623.50"></text></g><g><title>syscall (224 samples, 0.18%)</title><rect x="98.6893%" y="597" width="0.1810%" height="15" fill="rgb(228,71,31)" fg:x="122129" fg:w="224"/><text x="98.9393%" y="607.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (351 samples, 0.28%)</title><rect x="98.8703%" y="613" width="0.2836%" height="15" fill="rgb(252,184,16)" fg:x="122353" fg:w="351"/><text x="99.1203%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (350 samples, 0.28%)</title><rect x="98.8711%" y="597" width="0.2828%" height="15" fill="rgb(236,169,46)" fg:x="122354" fg:w="350"/><text x="99.1211%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (350 samples, 0.28%)</title><rect x="98.8711%" y="581" width="0.2828%" height="15" fill="rgb(207,17,47)" fg:x="122354" fg:w="350"/><text x="99.1211%" y="591.50"></text></g><g><title>std::sync::condvar::Condvar::wait (708 samples, 0.57%)</title><rect x="98.6045%" y="677" width="0.5721%" height="15" fill="rgb(206,201,28)" fg:x="122024" fg:w="708"/><text x="98.8545%" y="687.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (703 samples, 0.57%)</title><rect x="98.6085%" y="661" width="0.5681%" height="15" fill="rgb(224,184,23)" fg:x="122029" fg:w="703"/><text x="98.8585%" y="671.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait (703 samples, 0.57%)</title><rect x="98.6085%" y="645" width="0.5681%" height="15" fill="rgb(208,139,48)" fg:x="122029" fg:w="703"/><text x="98.8585%" y="655.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait_optional_timeout (703 samples, 0.57%)</title><rect x="98.6085%" y="629" width="0.5681%" height="15" fill="rgb(208,130,10)" fg:x="122029" fg:w="703"/><text x="98.8585%" y="639.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (28 samples, 0.02%)</title><rect x="99.1539%" y="613" width="0.0226%" height="15" fill="rgb(211,213,45)" fg:x="122704" fg:w="28"/><text x="99.4039%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (28 samples, 0.02%)</title><rect x="99.1539%" y="597" width="0.0226%" height="15" fill="rgb(235,100,30)" fg:x="122704" fg:w="28"/><text x="99.4039%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_swap (28 samples, 0.02%)</title><rect x="99.1539%" y="581" width="0.0226%" height="15" fill="rgb(206,144,31)" fg:x="122704" fg:w="28"/><text x="99.4039%" y="591.50"></text></g><g><title>parking::Parker::park (919 samples, 0.74%)</title><rect x="98.4671%" y="709" width="0.7426%" height="15" fill="rgb(224,200,26)" fg:x="121854" fg:w="919"/><text x="98.7171%" y="719.50"></text></g><g><title>parking::Inner::park (913 samples, 0.74%)</title><rect x="98.4719%" y="693" width="0.7378%" height="15" fill="rgb(247,104,53)" fg:x="121860" fg:w="913"/><text x="98.7219%" y="703.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (41 samples, 0.03%)</title><rect x="99.1766%" y="677" width="0.0331%" height="15" fill="rgb(220,14,17)" fg:x="122732" fg:w="41"/><text x="99.4266%" y="687.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (38 samples, 0.03%)</title><rect x="99.1790%" y="661" width="0.0307%" height="15" fill="rgb(230,140,40)" fg:x="122735" fg:w="38"/><text x="99.4290%" y="671.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (38 samples, 0.03%)</title><rect x="99.1790%" y="645" width="0.0307%" height="15" fill="rgb(229,2,41)" fg:x="122735" fg:w="38"/><text x="99.4290%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (38 samples, 0.03%)</title><rect x="99.1790%" y="629" width="0.0307%" height="15" fill="rgb(232,89,16)" fg:x="122735" fg:w="38"/><text x="99.4290%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (38 samples, 0.03%)</title><rect x="99.1790%" y="613" width="0.0307%" height="15" fill="rgb(247,59,52)" fg:x="122735" fg:w="38"/><text x="99.4290%" y="623.50"></text></g><g><title>parking::Parker::park_timeout (345 samples, 0.28%)</title><rect x="99.2097%" y="709" width="0.2788%" height="15" fill="rgb(226,110,21)" fg:x="122773" fg:w="345"/><text x="99.4597%" y="719.50"></text></g><g><title>parking::Inner::park (309 samples, 0.25%)</title><rect x="99.2388%" y="693" width="0.2497%" height="15" fill="rgb(224,176,43)" fg:x="122809" fg:w="309"/><text x="99.4888%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (289 samples, 0.23%)</title><rect x="99.2550%" y="677" width="0.2335%" height="15" fill="rgb(221,73,6)" fg:x="122829" fg:w="289"/><text x="99.5050%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (289 samples, 0.23%)</title><rect x="99.2550%" y="661" width="0.2335%" height="15" fill="rgb(232,78,19)" fg:x="122829" fg:w="289"/><text x="99.5050%" y="671.50"></text></g><g><title>std::panic::catch_unwind (20,164 samples, 16.29%)</title><rect x="83.2389%" y="997" width="16.2940%" height="15" fill="rgb(233,112,48)" fg:x="103009" fg:w="20164"/><text x="83.4889%" y="1007.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (20,164 samples, 16.29%)</title><rect x="83.2389%" y="981" width="16.2940%" height="15" fill="rgb(243,131,47)" fg:x="103009" fg:w="20164"/><text x="83.4889%" y="991.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (20,164 samples, 16.29%)</title><rect x="83.2389%" y="965" width="16.2940%" height="15" fill="rgb(226,51,1)" fg:x="103009" fg:w="20164"/><text x="83.4889%" y="975.50">std::panicking::try::do_c..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (20,164 samples, 16.29%)</title><rect x="83.2389%" y="949" width="16.2940%" height="15" fill="rgb(247,58,7)" fg:x="103009" fg:w="20164"/><text x="83.4889%" y="959.50">&lt;core::panic::unwind_safe..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (20,164 samples, 16.29%)</title><rect x="83.2389%" y="933" width="16.2940%" height="15" fill="rgb(209,7,32)" fg:x="103009" fg:w="20164"/><text x="83.4889%" y="943.50">std::thread::Builder::spa..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (20,164 samples, 16.29%)</title><rect x="83.2389%" y="917" width="16.2940%" height="15" fill="rgb(209,39,41)" fg:x="103009" fg:w="20164"/><text x="83.4889%" y="927.50">std::sys_common::backtrac..</text></g><g><title>core::ops::function::FnOnce::call_once (20,164 samples, 16.29%)</title><rect x="83.2389%" y="901" width="16.2940%" height="15" fill="rgb(226,182,46)" fg:x="103009" fg:w="20164"/><text x="83.4889%" y="911.50">core::ops::function::FnOn..</text></g><g><title>async_global_executor::threading::thread_main_loop (20,164 samples, 16.29%)</title><rect x="83.2389%" y="885" width="16.2940%" height="15" fill="rgb(230,219,10)" fg:x="103009" fg:w="20164"/><text x="83.4889%" y="895.50">async_global_executor::th..</text></g><g><title>std::panic::catch_unwind (20,154 samples, 16.29%)</title><rect x="83.2470%" y="869" width="16.2859%" height="15" fill="rgb(227,175,30)" fg:x="103019" fg:w="20154"/><text x="83.4970%" y="879.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (20,154 samples, 16.29%)</title><rect x="83.2470%" y="853" width="16.2859%" height="15" fill="rgb(217,2,50)" fg:x="103019" fg:w="20154"/><text x="83.4970%" y="863.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (20,154 samples, 16.29%)</title><rect x="83.2470%" y="837" width="16.2859%" height="15" fill="rgb(229,160,0)" fg:x="103019" fg:w="20154"/><text x="83.4970%" y="847.50">std::panicking::try::do_c..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (20,154 samples, 16.29%)</title><rect x="83.2470%" y="821" width="16.2859%" height="15" fill="rgb(207,78,37)" fg:x="103019" fg:w="20154"/><text x="83.4970%" y="831.50">async_global_executor::th..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (20,154 samples, 16.29%)</title><rect x="83.2470%" y="805" width="16.2859%" height="15" fill="rgb(225,57,0)" fg:x="103019" fg:w="20154"/><text x="83.4970%" y="815.50">std::thread::local::Local..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (20,154 samples, 16.29%)</title><rect x="83.2470%" y="789" width="16.2859%" height="15" fill="rgb(232,154,2)" fg:x="103019" fg:w="20154"/><text x="83.4970%" y="799.50">std::thread::local::Local..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (20,153 samples, 16.29%)</title><rect x="83.2478%" y="773" width="16.2851%" height="15" fill="rgb(241,212,25)" fg:x="103020" fg:w="20153"/><text x="83.4978%" y="783.50">async_global_executor::th..</text></g><g><title>async_global_executor::reactor::block_on (20,153 samples, 16.29%)</title><rect x="83.2478%" y="757" width="16.2851%" height="15" fill="rgb(226,69,20)" fg:x="103020" fg:w="20153"/><text x="83.4978%" y="767.50">async_global_executor::re..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (20,153 samples, 16.29%)</title><rect x="83.2478%" y="741" width="16.2851%" height="15" fill="rgb(247,184,54)" fg:x="103020" fg:w="20153"/><text x="83.4978%" y="751.50">async_global_executor::re..</text></g><g><title>async_io::driver::block_on (20,153 samples, 16.29%)</title><rect x="83.2478%" y="725" width="16.2851%" height="15" fill="rgb(210,145,0)" fg:x="103020" fg:w="20153"/><text x="83.4978%" y="735.50">async_io::driver::block_on</text></g><g><title>std::time::Instant::now (49 samples, 0.04%)</title><rect x="99.4933%" y="709" width="0.0396%" height="15" fill="rgb(253,82,12)" fg:x="123124" fg:w="49"/><text x="99.7433%" y="719.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (49 samples, 0.04%)</title><rect x="99.4933%" y="693" width="0.0396%" height="15" fill="rgb(245,42,11)" fg:x="123124" fg:w="49"/><text x="99.7433%" y="703.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (49 samples, 0.04%)</title><rect x="99.4933%" y="677" width="0.0396%" height="15" fill="rgb(219,147,32)" fg:x="123124" fg:w="49"/><text x="99.7433%" y="687.50"></text></g><g><title>__clock_gettime (41 samples, 0.03%)</title><rect x="99.4998%" y="661" width="0.0331%" height="15" fill="rgb(246,12,7)" fg:x="123132" fg:w="41"/><text x="99.7498%" y="671.50"></text></g><g><title>__vdso_clock_gettime (33 samples, 0.03%)</title><rect x="99.5063%" y="645" width="0.0267%" height="15" fill="rgb(243,50,9)" fg:x="123140" fg:w="33"/><text x="99.7563%" y="655.50"></text></g><g><title>[[vdso]] (31 samples, 0.03%)</title><rect x="99.5079%" y="629" width="0.0251%" height="15" fill="rgb(219,149,6)" fg:x="123142" fg:w="31"/><text x="99.7579%" y="639.50"></text></g><g><title>std::sys::unix::thread::guard::current (16 samples, 0.01%)</title><rect x="99.5329%" y="997" width="0.0129%" height="15" fill="rgb(241,51,42)" fg:x="123173" fg:w="16"/><text x="99.7829%" y="1007.50"></text></g><g><title>pthread_getattr_np (16 samples, 0.01%)</title><rect x="99.5329%" y="981" width="0.0129%" height="15" fill="rgb(226,128,27)" fg:x="123173" fg:w="16"/><text x="99.7829%" y="991.50"></text></g><g><title>clone (20,192 samples, 16.32%)</title><rect x="83.2300%" y="1109" width="16.3166%" height="15" fill="rgb(244,144,4)" fg:x="102998" fg:w="20192"/><text x="83.4800%" y="1119.50">clone</text></g><g><title>start_thread (20,183 samples, 16.31%)</title><rect x="83.2373%" y="1093" width="16.3094%" height="15" fill="rgb(221,4,13)" fg:x="103007" fg:w="20183"/><text x="83.4873%" y="1103.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (20,181 samples, 16.31%)</title><rect x="83.2389%" y="1077" width="16.3077%" height="15" fill="rgb(208,170,28)" fg:x="103009" fg:w="20181"/><text x="83.4889%" y="1087.50">std::sys::unix::thread::T..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (20,181 samples, 16.31%)</title><rect x="83.2389%" y="1061" width="16.3077%" height="15" fill="rgb(226,131,13)" fg:x="103009" fg:w="20181"/><text x="83.4889%" y="1071.50">&lt;alloc::boxed::Box&lt;F,A&gt; a..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (20,181 samples, 16.31%)</title><rect x="83.2389%" y="1045" width="16.3077%" height="15" fill="rgb(215,72,41)" fg:x="103009" fg:w="20181"/><text x="83.4889%" y="1055.50">&lt;alloc::boxed::Box&lt;F,A&gt; a..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (20,181 samples, 16.31%)</title><rect x="83.2389%" y="1029" width="16.3077%" height="15" fill="rgb(243,108,20)" fg:x="103009" fg:w="20181"/><text x="83.4889%" y="1039.50">core::ops::function::FnOn..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (20,181 samples, 16.31%)</title><rect x="83.2389%" y="1013" width="16.3077%" height="15" fill="rgb(230,189,17)" fg:x="103009" fg:w="20181"/><text x="83.4889%" y="1023.50">std::thread::Builder::spa..</text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (34 samples, 0.03%)</title><rect x="99.5467%" y="1109" width="0.0275%" height="15" fill="rgb(220,50,17)" fg:x="123190" fg:w="34"/><text x="99.7967%" y="1119.50"></text></g><g><title>event_listener::Event::notify (19 samples, 0.02%)</title><rect x="99.5968%" y="1109" width="0.0154%" height="15" fill="rgb(248,152,48)" fg:x="123252" fg:w="19"/><text x="99.8468%" y="1119.50"></text></g><g><title>signal_hook_registry::GLOBAL_DATA (19 samples, 0.02%)</title><rect x="99.6129%" y="1109" width="0.0154%" height="15" fill="rgb(244,91,11)" fg:x="123272" fg:w="19"/><text x="99.8629%" y="1119.50"></text></g><g><title>sn_rust_alloc (13 samples, 0.01%)</title><rect x="99.6283%" y="1109" width="0.0105%" height="15" fill="rgb(220,157,5)" fg:x="123291" fg:w="13"/><text x="99.8783%" y="1119.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (18 samples, 0.01%)</title><rect x="99.6420%" y="1109" width="0.0145%" height="15" fill="rgb(253,137,8)" fg:x="123308" fg:w="18"/><text x="99.8920%" y="1119.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (13 samples, 0.01%)</title><rect x="99.6566%" y="1093" width="0.0105%" height="15" fill="rgb(217,137,51)" fg:x="123326" fg:w="13"/><text x="99.9066%" y="1103.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;abi_stable::std_types::tuple::Tuple2&lt;K,V&gt;&gt;&gt;::extend (15 samples, 0.01%)</title><rect x="99.6671%" y="1077" width="0.0121%" height="15" fill="rgb(218,209,53)" fg:x="123339" fg:w="15"/><text x="99.9171%" y="1087.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (15 samples, 0.01%)</title><rect x="99.6671%" y="1061" width="0.0121%" height="15" fill="rgb(249,137,25)" fg:x="123339" fg:w="15"/><text x="99.9171%" y="1071.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (39 samples, 0.03%)</title><rect x="99.6566%" y="1109" width="0.0315%" height="15" fill="rgb(239,155,26)" fg:x="123326" fg:w="39"/><text x="99.9066%" y="1119.50"></text></g><g><title>tremor_pipeline::OpMeta::merge (26 samples, 0.02%)</title><rect x="99.6671%" y="1093" width="0.0210%" height="15" fill="rgb(227,85,46)" fg:x="123339" fg:w="26"/><text x="99.9171%" y="1103.50"></text></g><g><title>async-std/runti (123,316 samples, 99.65%)</title><rect x="0.0477%" y="1125" width="99.6485%" height="15" fill="rgb(251,107,43)" fg:x="59" fg:w="123316"/><text x="0.2977%" y="1135.50">async-std/runti</text></g><g><title>blocking-3 (16 samples, 0.01%)</title><rect x="99.7010%" y="1125" width="0.0129%" height="15" fill="rgb(234,170,33)" fg:x="123381" fg:w="16"/><text x="99.9510%" y="1135.50"></text></g><g><title>clone (16 samples, 0.01%)</title><rect x="99.7010%" y="1109" width="0.0129%" height="15" fill="rgb(206,29,35)" fg:x="123381" fg:w="16"/><text x="99.9510%" y="1119.50"></text></g><g><title>[ld-2.31.so] (16 samples, 0.01%)</title><rect x="99.7164%" y="1109" width="0.0129%" height="15" fill="rgb(227,138,25)" fg:x="123400" fg:w="16"/><text x="99.9664%" y="1119.50"></text></g><g><title>pdk-halfbrown (275 samples, 0.22%)</title><rect x="99.7156%" y="1125" width="0.2222%" height="15" fill="rgb(249,131,35)" fg:x="123399" fg:w="275"/><text x="99.9656%" y="1135.50"></text></g><g><title>clone (248 samples, 0.20%)</title><rect x="99.7374%" y="1109" width="0.2004%" height="15" fill="rgb(239,6,40)" fg:x="123426" fg:w="248"/><text x="99.9874%" y="1119.50"></text></g><g><title>start_thread (26 samples, 0.02%)</title><rect x="99.9168%" y="1093" width="0.0210%" height="15" fill="rgb(246,136,47)" fg:x="123648" fg:w="26"/><text x="100.1668%" y="1103.50"></text></g><g><title>std::sys::unix::futex::futex_wait (46 samples, 0.04%)</title><rect x="99.9418%" y="789" width="0.0372%" height="15" fill="rgb(253,58,26)" fg:x="123679" fg:w="46"/><text x="100.1918%" y="799.50"></text></g><g><title>syscall (46 samples, 0.04%)</title><rect x="99.9418%" y="773" width="0.0372%" height="15" fill="rgb(237,141,10)" fg:x="123679" fg:w="46"/><text x="100.1918%" y="783.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (50 samples, 0.04%)</title><rect x="99.9418%" y="869" width="0.0404%" height="15" fill="rgb(234,156,12)" fg:x="123679" fg:w="50"/><text x="100.1918%" y="879.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (50 samples, 0.04%)</title><rect x="99.9418%" y="853" width="0.0404%" height="15" fill="rgb(243,224,36)" fg:x="123679" fg:w="50"/><text x="100.1918%" y="863.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (50 samples, 0.04%)</title><rect x="99.9418%" y="837" width="0.0404%" height="15" fill="rgb(205,229,51)" fg:x="123679" fg:w="50"/><text x="100.1918%" y="847.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (50 samples, 0.04%)</title><rect x="99.9418%" y="821" width="0.0404%" height="15" fill="rgb(223,189,4)" fg:x="123679" fg:w="50"/><text x="100.1918%" y="831.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (50 samples, 0.04%)</title><rect x="99.9418%" y="805" width="0.0404%" height="15" fill="rgb(249,167,54)" fg:x="123679" fg:w="50"/><text x="100.1918%" y="815.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (56 samples, 0.05%)</title><rect x="99.9418%" y="885" width="0.0453%" height="15" fill="rgb(218,34,28)" fg:x="123679" fg:w="56"/><text x="100.1918%" y="895.50"></text></g><g><title>std::panic::catch_unwind (58 samples, 0.05%)</title><rect x="99.9418%" y="997" width="0.0469%" height="15" fill="rgb(232,109,42)" fg:x="123679" fg:w="58"/><text x="100.1918%" y="1007.50"></text></g><g><title>std::panicking::try (58 samples, 0.05%)</title><rect x="99.9418%" y="981" width="0.0469%" height="15" fill="rgb(248,214,46)" fg:x="123679" fg:w="58"/><text x="100.1918%" y="991.50"></text></g><g><title>std::panicking::try::do_call (58 samples, 0.05%)</title><rect x="99.9418%" y="965" width="0.0469%" height="15" fill="rgb(244,216,40)" fg:x="123679" fg:w="58"/><text x="100.1918%" y="975.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (58 samples, 0.05%)</title><rect x="99.9418%" y="949" width="0.0469%" height="15" fill="rgb(231,226,31)" fg:x="123679" fg:w="58"/><text x="100.1918%" y="959.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (58 samples, 0.05%)</title><rect x="99.9418%" y="933" width="0.0469%" height="15" fill="rgb(238,38,43)" fg:x="123679" fg:w="58"/><text x="100.1918%" y="943.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (58 samples, 0.05%)</title><rect x="99.9418%" y="917" width="0.0469%" height="15" fill="rgb(208,88,43)" fg:x="123679" fg:w="58"/><text x="100.1918%" y="927.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (58 samples, 0.05%)</title><rect x="99.9418%" y="901" width="0.0469%" height="15" fill="rgb(205,136,37)" fg:x="123679" fg:w="58"/><text x="100.1918%" y="911.50"></text></g><g><title>all (123,751 samples, 100%)</title><rect x="0.0000%" y="1141" width="100.0000%" height="15" fill="rgb(237,34,14)" fg:x="0" fg:w="123751"/><text x="0.2500%" y="1151.50"></text></g><g><title>tokio-runtime-w (77 samples, 0.06%)</title><rect x="99.9378%" y="1125" width="0.0622%" height="15" fill="rgb(236,193,44)" fg:x="123674" fg:w="77"/><text x="100.1878%" y="1135.50"></text></g><g><title>clone (73 samples, 0.06%)</title><rect x="99.9410%" y="1109" width="0.0590%" height="15" fill="rgb(231,48,10)" fg:x="123678" fg:w="73"/><text x="100.1910%" y="1119.50"></text></g><g><title>start_thread (73 samples, 0.06%)</title><rect x="99.9410%" y="1093" width="0.0590%" height="15" fill="rgb(213,141,34)" fg:x="123678" fg:w="73"/><text x="100.1910%" y="1103.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (73 samples, 0.06%)</title><rect x="99.9410%" y="1077" width="0.0590%" height="15" fill="rgb(249,130,34)" fg:x="123678" fg:w="73"/><text x="100.1910%" y="1087.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (73 samples, 0.06%)</title><rect x="99.9410%" y="1061" width="0.0590%" height="15" fill="rgb(219,42,41)" fg:x="123678" fg:w="73"/><text x="100.1910%" y="1071.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (73 samples, 0.06%)</title><rect x="99.9410%" y="1045" width="0.0590%" height="15" fill="rgb(224,100,54)" fg:x="123678" fg:w="73"/><text x="100.1910%" y="1055.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (73 samples, 0.06%)</title><rect x="99.9410%" y="1029" width="0.0590%" height="15" fill="rgb(229,200,27)" fg:x="123678" fg:w="73"/><text x="100.1910%" y="1039.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (73 samples, 0.06%)</title><rect x="99.9410%" y="1013" width="0.0590%" height="15" fill="rgb(217,118,10)" fg:x="123678" fg:w="73"/><text x="100.1910%" y="1023.50"></text></g></svg></svg>