<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1125.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1125.00"> </text><svg id="frames" x="10" width="1180" total_samples="150105"><g><title>async-io (97 samples, 0.06%)</title><rect x="0.0007%" y="1077" width="0.0646%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="97"/><text x="0.2507%" y="1087.50"></text></g><g><title>clone (94 samples, 0.06%)</title><rect x="0.0027%" y="1061" width="0.0626%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="94"/><text x="0.2527%" y="1071.50"></text></g><g><title>start_thread (94 samples, 0.06%)</title><rect x="0.0027%" y="1045" width="0.0626%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="94"/><text x="0.2527%" y="1055.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (94 samples, 0.06%)</title><rect x="0.0027%" y="1029" width="0.0626%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="94"/><text x="0.2527%" y="1039.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (94 samples, 0.06%)</title><rect x="0.0027%" y="1013" width="0.0626%" height="15" fill="rgb(208,68,35)" fg:x="4" fg:w="94"/><text x="0.2527%" y="1023.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (94 samples, 0.06%)</title><rect x="0.0027%" y="997" width="0.0626%" height="15" fill="rgb(232,128,0)" fg:x="4" fg:w="94"/><text x="0.2527%" y="1007.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (94 samples, 0.06%)</title><rect x="0.0027%" y="981" width="0.0626%" height="15" fill="rgb(207,160,47)" fg:x="4" fg:w="94"/><text x="0.2527%" y="991.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (94 samples, 0.06%)</title><rect x="0.0027%" y="965" width="0.0626%" height="15" fill="rgb(228,23,34)" fg:x="4" fg:w="94"/><text x="0.2527%" y="975.50"></text></g><g><title>std::panic::catch_unwind (94 samples, 0.06%)</title><rect x="0.0027%" y="949" width="0.0626%" height="15" fill="rgb(218,30,26)" fg:x="4" fg:w="94"/><text x="0.2527%" y="959.50"></text></g><g><title>std::panicking::try (94 samples, 0.06%)</title><rect x="0.0027%" y="933" width="0.0626%" height="15" fill="rgb(220,122,19)" fg:x="4" fg:w="94"/><text x="0.2527%" y="943.50"></text></g><g><title>std::panicking::try::do_call (94 samples, 0.06%)</title><rect x="0.0027%" y="917" width="0.0626%" height="15" fill="rgb(250,228,42)" fg:x="4" fg:w="94"/><text x="0.2527%" y="927.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (94 samples, 0.06%)</title><rect x="0.0027%" y="901" width="0.0626%" height="15" fill="rgb(240,193,28)" fg:x="4" fg:w="94"/><text x="0.2527%" y="911.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (94 samples, 0.06%)</title><rect x="0.0027%" y="885" width="0.0626%" height="15" fill="rgb(216,20,37)" fg:x="4" fg:w="94"/><text x="0.2527%" y="895.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (94 samples, 0.06%)</title><rect x="0.0027%" y="869" width="0.0626%" height="15" fill="rgb(206,188,39)" fg:x="4" fg:w="94"/><text x="0.2527%" y="879.50"></text></g><g><title>async_io::driver::UNPARKER::{{closure}}::{{closure}} (94 samples, 0.06%)</title><rect x="0.0027%" y="853" width="0.0626%" height="15" fill="rgb(217,207,13)" fg:x="4" fg:w="94"/><text x="0.2527%" y="863.50"></text></g><g><title>async_io::driver::main_loop (94 samples, 0.06%)</title><rect x="0.0027%" y="837" width="0.0626%" height="15" fill="rgb(231,73,38)" fg:x="4" fg:w="94"/><text x="0.2527%" y="847.50"></text></g><g><title>parking::Parker::park_timeout (82 samples, 0.05%)</title><rect x="0.0107%" y="821" width="0.0546%" height="15" fill="rgb(225,20,46)" fg:x="16" fg:w="82"/><text x="0.2607%" y="831.50"></text></g><g><title>parking::Inner::park (82 samples, 0.05%)</title><rect x="0.0107%" y="805" width="0.0546%" height="15" fill="rgb(210,31,41)" fg:x="16" fg:w="82"/><text x="0.2607%" y="815.50"></text></g><g><title>std::sync::condvar::Condvar::wait_timeout (81 samples, 0.05%)</title><rect x="0.0113%" y="789" width="0.0540%" height="15" fill="rgb(221,200,47)" fg:x="17" fg:w="81"/><text x="0.2613%" y="799.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait_timeout (79 samples, 0.05%)</title><rect x="0.0127%" y="773" width="0.0526%" height="15" fill="rgb(226,26,5)" fg:x="19" fg:w="79"/><text x="0.2627%" y="783.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::wait_timeout (79 samples, 0.05%)</title><rect x="0.0127%" y="757" width="0.0526%" height="15" fill="rgb(249,33,26)" fg:x="19" fg:w="79"/><text x="0.2627%" y="767.50"></text></g><g><title>__pthread_cond_timedwait (78 samples, 0.05%)</title><rect x="0.0133%" y="741" width="0.0520%" height="15" fill="rgb(235,183,28)" fg:x="20" fg:w="78"/><text x="0.2633%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (59 samples, 0.04%)</title><rect x="0.0766%" y="1061" width="0.0393%" height="15" fill="rgb(221,5,38)" fg:x="115" fg:w="59"/><text x="0.3266%" y="1071.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (23 samples, 0.02%)</title><rect x="0.1266%" y="1061" width="0.0153%" height="15" fill="rgb(247,18,42)" fg:x="190" fg:w="23"/><text x="0.3766%" y="1071.50"></text></g><g><title>&lt;tremor_script::ast::module::MODULES as core::ops::deref::Deref&gt;::deref::__stability::LAZY (26 samples, 0.02%)</title><rect x="0.1446%" y="1061" width="0.0173%" height="15" fill="rgb(241,131,45)" fg:x="217" fg:w="26"/><text x="0.3946%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (18 samples, 0.01%)</title><rect x="0.1732%" y="1029" width="0.0120%" height="15" fill="rgb(249,31,29)" fg:x="260" fg:w="18"/><text x="0.4232%" y="1039.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (16 samples, 0.01%)</title><rect x="0.1919%" y="981" width="0.0107%" height="15" fill="rgb(225,111,53)" fg:x="288" fg:w="16"/><text x="0.4419%" y="991.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (66 samples, 0.04%)</title><rect x="0.1646%" y="1045" width="0.0440%" height="15" fill="rgb(238,160,17)" fg:x="247" fg:w="66"/><text x="0.4146%" y="1055.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (35 samples, 0.02%)</title><rect x="0.1852%" y="1029" width="0.0233%" height="15" fill="rgb(214,148,48)" fg:x="278" fg:w="35"/><text x="0.4352%" y="1039.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (35 samples, 0.02%)</title><rect x="0.1852%" y="1013" width="0.0233%" height="15" fill="rgb(232,36,49)" fg:x="278" fg:w="35"/><text x="0.4352%" y="1023.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (35 samples, 0.02%)</title><rect x="0.1852%" y="997" width="0.0233%" height="15" fill="rgb(209,103,24)" fg:x="278" fg:w="35"/><text x="0.4352%" y="1007.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (167 samples, 0.11%)</title><rect x="0.2085%" y="1045" width="0.1113%" height="15" fill="rgb(229,88,8)" fg:x="313" fg:w="167"/><text x="0.4585%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (72 samples, 0.05%)</title><rect x="0.2718%" y="1029" width="0.0480%" height="15" fill="rgb(213,181,19)" fg:x="408" fg:w="72"/><text x="0.5218%" y="1039.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (72 samples, 0.05%)</title><rect x="0.2718%" y="1013" width="0.0480%" height="15" fill="rgb(254,191,54)" fg:x="408" fg:w="72"/><text x="0.5218%" y="1023.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (47 samples, 0.03%)</title><rect x="0.2885%" y="997" width="0.0313%" height="15" fill="rgb(241,83,37)" fg:x="433" fg:w="47"/><text x="0.5385%" y="1007.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (47 samples, 0.03%)</title><rect x="0.2885%" y="981" width="0.0313%" height="15" fill="rgb(233,36,39)" fg:x="433" fg:w="47"/><text x="0.5385%" y="991.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (47 samples, 0.03%)</title><rect x="0.2885%" y="965" width="0.0313%" height="15" fill="rgb(226,3,54)" fg:x="433" fg:w="47"/><text x="0.5385%" y="975.50"></text></g><g><title>alloc::alloc::exchange_malloc (47 samples, 0.03%)</title><rect x="0.2885%" y="949" width="0.0313%" height="15" fill="rgb(245,192,40)" fg:x="433" fg:w="47"/><text x="0.5385%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (47 samples, 0.03%)</title><rect x="0.2885%" y="933" width="0.0313%" height="15" fill="rgb(238,167,29)" fg:x="433" fg:w="47"/><text x="0.5385%" y="943.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (47 samples, 0.03%)</title><rect x="0.2885%" y="917" width="0.0313%" height="15" fill="rgb(232,182,51)" fg:x="433" fg:w="47"/><text x="0.5385%" y="927.50"></text></g><g><title>alloc::alloc::alloc (47 samples, 0.03%)</title><rect x="0.2885%" y="901" width="0.0313%" height="15" fill="rgb(231,60,39)" fg:x="433" fg:w="47"/><text x="0.5385%" y="911.50"></text></g><g><title>__rg_alloc (47 samples, 0.03%)</title><rect x="0.2885%" y="885" width="0.0313%" height="15" fill="rgb(208,69,12)" fg:x="433" fg:w="47"/><text x="0.5385%" y="895.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (47 samples, 0.03%)</title><rect x="0.2885%" y="869" width="0.0313%" height="15" fill="rgb(235,93,37)" fg:x="433" fg:w="47"/><text x="0.5385%" y="879.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (28 samples, 0.02%)</title><rect x="0.3198%" y="1045" width="0.0187%" height="15" fill="rgb(213,116,39)" fg:x="480" fg:w="28"/><text x="0.5698%" y="1055.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.01%)</title><rect x="0.3524%" y="1045" width="0.0113%" height="15" fill="rgb(222,207,29)" fg:x="529" fg:w="17"/><text x="0.6024%" y="1055.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (137 samples, 0.09%)</title><rect x="0.3637%" y="1045" width="0.0913%" height="15" fill="rgb(206,96,30)" fg:x="546" fg:w="137"/><text x="0.6137%" y="1055.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (61 samples, 0.04%)</title><rect x="0.4550%" y="1045" width="0.0406%" height="15" fill="rgb(218,138,4)" fg:x="683" fg:w="61"/><text x="0.7050%" y="1055.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (60 samples, 0.04%)</title><rect x="0.4957%" y="1045" width="0.0400%" height="15" fill="rgb(250,191,14)" fg:x="744" fg:w="60"/><text x="0.7457%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (22 samples, 0.01%)</title><rect x="0.7168%" y="1013" width="0.0147%" height="15" fill="rgb(239,60,40)" fg:x="1076" fg:w="22"/><text x="0.9668%" y="1023.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (22 samples, 0.01%)</title><rect x="0.7168%" y="997" width="0.0147%" height="15" fill="rgb(206,27,48)" fg:x="1076" fg:w="22"/><text x="0.9668%" y="1007.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (49 samples, 0.03%)</title><rect x="0.7028%" y="1029" width="0.0326%" height="15" fill="rgb(225,35,8)" fg:x="1055" fg:w="49"/><text x="0.9528%" y="1039.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (28 samples, 0.02%)</title><rect x="0.7355%" y="1013" width="0.0187%" height="15" fill="rgb(250,213,24)" fg:x="1104" fg:w="28"/><text x="0.9855%" y="1023.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (23 samples, 0.02%)</title><rect x="0.7388%" y="997" width="0.0153%" height="15" fill="rgb(247,123,22)" fg:x="1109" fg:w="23"/><text x="0.9888%" y="1007.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (23 samples, 0.02%)</title><rect x="0.7388%" y="981" width="0.0153%" height="15" fill="rgb(231,138,38)" fg:x="1109" fg:w="23"/><text x="0.9888%" y="991.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (23 samples, 0.02%)</title><rect x="0.7388%" y="965" width="0.0153%" height="15" fill="rgb(231,145,46)" fg:x="1109" fg:w="23"/><text x="0.9888%" y="975.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (23 samples, 0.02%)</title><rect x="0.7388%" y="949" width="0.0153%" height="15" fill="rgb(251,118,11)" fg:x="1109" fg:w="23"/><text x="0.9888%" y="959.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (23 samples, 0.02%)</title><rect x="0.7388%" y="933" width="0.0153%" height="15" fill="rgb(217,147,25)" fg:x="1109" fg:w="23"/><text x="0.9888%" y="943.50"></text></g><g><title>alloc::slice::hack::to_vec (23 samples, 0.02%)</title><rect x="0.7388%" y="917" width="0.0153%" height="15" fill="rgb(247,81,37)" fg:x="1109" fg:w="23"/><text x="0.9888%" y="927.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (23 samples, 0.02%)</title><rect x="0.7388%" y="901" width="0.0153%" height="15" fill="rgb(209,12,38)" fg:x="1109" fg:w="23"/><text x="0.9888%" y="911.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (46 samples, 0.03%)</title><rect x="0.7355%" y="1029" width="0.0306%" height="15" fill="rgb(227,1,9)" fg:x="1104" fg:w="46"/><text x="0.9855%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (28 samples, 0.02%)</title><rect x="0.7695%" y="997" width="0.0187%" height="15" fill="rgb(248,47,43)" fg:x="1155" fg:w="28"/><text x="1.0195%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (28 samples, 0.02%)</title><rect x="0.7695%" y="981" width="0.0187%" height="15" fill="rgb(221,10,30)" fg:x="1155" fg:w="28"/><text x="1.0195%" y="991.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (28 samples, 0.02%)</title><rect x="0.7695%" y="965" width="0.0187%" height="15" fill="rgb(210,229,1)" fg:x="1155" fg:w="28"/><text x="1.0195%" y="975.50"></text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (45 samples, 0.03%)</title><rect x="0.7695%" y="1029" width="0.0300%" height="15" fill="rgb(222,148,37)" fg:x="1155" fg:w="45"/><text x="1.0195%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (45 samples, 0.03%)</title><rect x="0.7695%" y="1013" width="0.0300%" height="15" fill="rgb(234,67,33)" fg:x="1155" fg:w="45"/><text x="1.0195%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (17 samples, 0.01%)</title><rect x="0.7881%" y="997" width="0.0113%" height="15" fill="rgb(247,98,35)" fg:x="1183" fg:w="17"/><text x="1.0381%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (17 samples, 0.01%)</title><rect x="0.7881%" y="981" width="0.0113%" height="15" fill="rgb(247,138,52)" fg:x="1183" fg:w="17"/><text x="1.0381%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (17 samples, 0.01%)</title><rect x="0.7881%" y="965" width="0.0113%" height="15" fill="rgb(213,79,30)" fg:x="1183" fg:w="17"/><text x="1.0381%" y="975.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (17 samples, 0.01%)</title><rect x="0.7881%" y="949" width="0.0113%" height="15" fill="rgb(246,177,23)" fg:x="1183" fg:w="17"/><text x="1.0381%" y="959.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (19 samples, 0.01%)</title><rect x="0.8121%" y="1013" width="0.0127%" height="15" fill="rgb(230,62,27)" fg:x="1219" fg:w="19"/><text x="1.0621%" y="1023.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (19 samples, 0.01%)</title><rect x="0.8121%" y="997" width="0.0127%" height="15" fill="rgb(216,154,8)" fg:x="1219" fg:w="19"/><text x="1.0621%" y="1007.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (47 samples, 0.03%)</title><rect x="0.7994%" y="1029" width="0.0313%" height="15" fill="rgb(244,35,45)" fg:x="1200" fg:w="47"/><text x="1.0494%" y="1039.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (136 samples, 0.09%)</title><rect x="0.8308%" y="1029" width="0.0906%" height="15" fill="rgb(251,115,12)" fg:x="1247" fg:w="136"/><text x="1.0808%" y="1039.50"></text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (22 samples, 0.01%)</title><rect x="0.9254%" y="1029" width="0.0147%" height="15" fill="rgb(240,54,50)" fg:x="1389" fg:w="22"/><text x="1.1754%" y="1039.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (652 samples, 0.43%)</title><rect x="0.5356%" y="1045" width="0.4344%" height="15" fill="rgb(233,84,52)" fg:x="804" fg:w="652"/><text x="0.7856%" y="1055.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (45 samples, 0.03%)</title><rect x="0.9400%" y="1029" width="0.0300%" height="15" fill="rgb(207,117,47)" fg:x="1411" fg:w="45"/><text x="1.1900%" y="1039.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (78 samples, 0.05%)</title><rect x="0.9700%" y="1045" width="0.0520%" height="15" fill="rgb(249,43,39)" fg:x="1456" fg:w="78"/><text x="1.2200%" y="1055.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (40 samples, 0.03%)</title><rect x="1.0299%" y="1045" width="0.0266%" height="15" fill="rgb(209,38,44)" fg:x="1546" fg:w="40"/><text x="1.2799%" y="1055.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (28 samples, 0.02%)</title><rect x="1.0566%" y="1045" width="0.0187%" height="15" fill="rgb(236,212,23)" fg:x="1586" fg:w="28"/><text x="1.3066%" y="1055.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::decode (91 samples, 0.06%)</title><rect x="1.0752%" y="1045" width="0.0606%" height="15" fill="rgb(242,79,21)" fg:x="1614" fg:w="91"/><text x="1.3252%" y="1055.50"></text></g><g><title>tremor_value::value::parse_to_value_with_buffers (21 samples, 0.01%)</title><rect x="1.1219%" y="1029" width="0.0140%" height="15" fill="rgb(211,96,35)" fg:x="1684" fg:w="21"/><text x="1.3719%" y="1039.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode (18 samples, 0.01%)</title><rect x="1.1359%" y="1045" width="0.0120%" height="15" fill="rgb(253,215,40)" fg:x="1705" fg:w="18"/><text x="1.3859%" y="1055.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (82 samples, 0.05%)</title><rect x="1.1499%" y="1045" width="0.0546%" height="15" fill="rgb(211,81,21)" fg:x="1726" fg:w="82"/><text x="1.3999%" y="1055.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (41 samples, 0.03%)</title><rect x="1.1772%" y="1029" width="0.0273%" height="15" fill="rgb(208,190,38)" fg:x="1767" fg:w="41"/><text x="1.4272%" y="1039.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (26 samples, 0.02%)</title><rect x="1.1872%" y="1013" width="0.0173%" height="15" fill="rgb(235,213,38)" fg:x="1782" fg:w="26"/><text x="1.4372%" y="1023.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (46 samples, 0.03%)</title><rect x="1.2045%" y="1045" width="0.0306%" height="15" fill="rgb(237,122,38)" fg:x="1808" fg:w="46"/><text x="1.4545%" y="1055.50"></text></g><g><title>value_trait::Builder::object (34 samples, 0.02%)</title><rect x="1.2125%" y="1029" width="0.0227%" height="15" fill="rgb(244,218,35)" fg:x="1820" fg:w="34"/><text x="1.4625%" y="1039.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (34 samples, 0.02%)</title><rect x="1.2125%" y="1013" width="0.0227%" height="15" fill="rgb(240,68,47)" fg:x="1820" fg:w="34"/><text x="1.4625%" y="1023.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (34 samples, 0.02%)</title><rect x="1.2125%" y="997" width="0.0227%" height="15" fill="rgb(210,16,53)" fg:x="1820" fg:w="34"/><text x="1.4625%" y="1007.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (23 samples, 0.02%)</title><rect x="1.2198%" y="981" width="0.0153%" height="15" fill="rgb(235,124,12)" fg:x="1831" fg:w="23"/><text x="1.4698%" y="991.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (25 samples, 0.02%)</title><rect x="1.2351%" y="1045" width="0.0167%" height="15" fill="rgb(224,169,11)" fg:x="1854" fg:w="25"/><text x="1.4851%" y="1055.50"></text></g><g><title>[libc-2.31.so] (130 samples, 0.09%)</title><rect x="1.2571%" y="1045" width="0.0866%" height="15" fill="rgb(250,166,2)" fg:x="1887" fg:w="130"/><text x="1.5071%" y="1055.50"></text></g><g><title>[tremor-pdk-halfbrown] (85 samples, 0.06%)</title><rect x="1.3437%" y="1045" width="0.0566%" height="15" fill="rgb(242,216,29)" fg:x="2017" fg:w="85"/><text x="1.5937%" y="1055.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (85 samples, 0.06%)</title><rect x="1.3437%" y="1029" width="0.0566%" height="15" fill="rgb(230,116,27)" fg:x="2017" fg:w="85"/><text x="1.5937%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (85 samples, 0.06%)</title><rect x="1.3437%" y="1013" width="0.0566%" height="15" fill="rgb(228,99,48)" fg:x="2017" fg:w="85"/><text x="1.5937%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (85 samples, 0.06%)</title><rect x="1.3437%" y="997" width="0.0566%" height="15" fill="rgb(253,11,6)" fg:x="2017" fg:w="85"/><text x="1.5937%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (85 samples, 0.06%)</title><rect x="1.3437%" y="981" width="0.0566%" height="15" fill="rgb(247,143,39)" fg:x="2017" fg:w="85"/><text x="1.5937%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (74 samples, 0.05%)</title><rect x="1.3511%" y="965" width="0.0493%" height="15" fill="rgb(236,97,10)" fg:x="2028" fg:w="74"/><text x="1.6011%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (74 samples, 0.05%)</title><rect x="1.3511%" y="949" width="0.0493%" height="15" fill="rgb(233,208,19)" fg:x="2028" fg:w="74"/><text x="1.6011%" y="959.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (74 samples, 0.05%)</title><rect x="1.3511%" y="933" width="0.0493%" height="15" fill="rgb(216,164,2)" fg:x="2028" fg:w="74"/><text x="1.6011%" y="943.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (74 samples, 0.05%)</title><rect x="1.3511%" y="917" width="0.0493%" height="15" fill="rgb(220,129,5)" fg:x="2028" fg:w="74"/><text x="1.6011%" y="927.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::drop (74 samples, 0.05%)</title><rect x="1.3511%" y="901" width="0.0493%" height="15" fill="rgb(242,17,10)" fg:x="2028" fg:w="74"/><text x="1.6011%" y="911.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (74 samples, 0.05%)</title><rect x="1.3511%" y="885" width="0.0493%" height="15" fill="rgb(242,107,0)" fg:x="2028" fg:w="74"/><text x="1.6011%" y="895.50"></text></g><g><title>__GI___pthread_mutex_lock (51 samples, 0.03%)</title><rect x="1.4004%" y="1045" width="0.0340%" height="15" fill="rgb(251,28,31)" fg:x="2102" fg:w="51"/><text x="1.6504%" y="1055.50"></text></g><g><title>__GI___pthread_rwlock_rdlock (17 samples, 0.01%)</title><rect x="1.4403%" y="1045" width="0.0113%" height="15" fill="rgb(233,223,10)" fg:x="2162" fg:w="17"/><text x="1.6903%" y="1055.50"></text></g><g><title>__GI___pthread_rwlock_unlock (27 samples, 0.02%)</title><rect x="1.4517%" y="1045" width="0.0180%" height="15" fill="rgb(215,21,27)" fg:x="2179" fg:w="27"/><text x="1.7017%" y="1055.50"></text></g><g><title>__clock_gettime (38 samples, 0.03%)</title><rect x="1.4696%" y="1045" width="0.0253%" height="15" fill="rgb(232,23,21)" fg:x="2206" fg:w="38"/><text x="1.7196%" y="1055.50"></text></g><g><title>__pthread_cond_signal (22 samples, 0.01%)</title><rect x="1.4983%" y="1045" width="0.0147%" height="15" fill="rgb(244,5,23)" fg:x="2249" fg:w="22"/><text x="1.7483%" y="1055.50"></text></g><g><title>__pthread_cond_wait (23 samples, 0.02%)</title><rect x="1.5129%" y="1045" width="0.0153%" height="15" fill="rgb(226,81,46)" fg:x="2271" fg:w="23"/><text x="1.7629%" y="1055.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (37 samples, 0.02%)</title><rect x="1.5296%" y="1045" width="0.0246%" height="15" fill="rgb(247,70,30)" fg:x="2296" fg:w="37"/><text x="1.7796%" y="1055.50"></text></g><g><title>abi_stable::erased_types::iterator::next (79 samples, 0.05%)</title><rect x="1.5542%" y="1045" width="0.0526%" height="15" fill="rgb(212,68,19)" fg:x="2333" fg:w="79"/><text x="1.8042%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (33 samples, 0.02%)</title><rect x="1.6588%" y="1029" width="0.0220%" height="15" fill="rgb(240,187,13)" fg:x="2490" fg:w="33"/><text x="1.9088%" y="1039.50"></text></g><g><title>alloc::alloc::box_free (33 samples, 0.02%)</title><rect x="1.6588%" y="1013" width="0.0220%" height="15" fill="rgb(223,113,26)" fg:x="2490" fg:w="33"/><text x="1.9088%" y="1023.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (33 samples, 0.02%)</title><rect x="1.6588%" y="997" width="0.0220%" height="15" fill="rgb(206,192,2)" fg:x="2490" fg:w="33"/><text x="1.9088%" y="1007.50"></text></g><g><title>alloc::alloc::dealloc (33 samples, 0.02%)</title><rect x="1.6588%" y="981" width="0.0220%" height="15" fill="rgb(241,108,4)" fg:x="2490" fg:w="33"/><text x="1.9088%" y="991.50"></text></g><g><title>__rg_dealloc (33 samples, 0.02%)</title><rect x="1.6588%" y="965" width="0.0220%" height="15" fill="rgb(247,173,49)" fg:x="2490" fg:w="33"/><text x="1.9088%" y="975.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (33 samples, 0.02%)</title><rect x="1.6588%" y="949" width="0.0220%" height="15" fill="rgb(224,114,35)" fg:x="2490" fg:w="33"/><text x="1.9088%" y="959.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (114 samples, 0.08%)</title><rect x="1.6115%" y="1045" width="0.0759%" height="15" fill="rgb(245,159,27)" fg:x="2419" fg:w="114"/><text x="1.8615%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (91 samples, 0.06%)</title><rect x="1.6875%" y="1045" width="0.0606%" height="15" fill="rgb(245,172,44)" fg:x="2533" fg:w="91"/><text x="1.9375%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (39 samples, 0.03%)</title><rect x="1.7481%" y="1045" width="0.0260%" height="15" fill="rgb(236,23,11)" fg:x="2624" fg:w="39"/><text x="1.9981%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (105 samples, 0.07%)</title><rect x="1.7768%" y="1045" width="0.0700%" height="15" fill="rgb(205,117,38)" fg:x="2667" fg:w="105"/><text x="2.0268%" y="1055.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (101 samples, 0.07%)</title><rect x="1.8860%" y="981" width="0.0673%" height="15" fill="rgb(237,72,25)" fg:x="2831" fg:w="101"/><text x="2.1360%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (101 samples, 0.07%)</title><rect x="1.8860%" y="965" width="0.0673%" height="15" fill="rgb(244,70,9)" fg:x="2831" fg:w="101"/><text x="2.1360%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (101 samples, 0.07%)</title><rect x="1.8860%" y="949" width="0.0673%" height="15" fill="rgb(217,125,39)" fg:x="2831" fg:w="101"/><text x="2.1360%" y="959.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (101 samples, 0.07%)</title><rect x="1.8860%" y="933" width="0.0673%" height="15" fill="rgb(235,36,10)" fg:x="2831" fg:w="101"/><text x="2.1360%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (108 samples, 0.07%)</title><rect x="1.8860%" y="997" width="0.0719%" height="15" fill="rgb(251,123,47)" fg:x="2831" fg:w="108"/><text x="2.1360%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.02%)</title><rect x="1.9580%" y="981" width="0.0193%" height="15" fill="rgb(221,13,13)" fg:x="2939" fg:w="29"/><text x="2.2080%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (29 samples, 0.02%)</title><rect x="1.9580%" y="965" width="0.0193%" height="15" fill="rgb(238,131,9)" fg:x="2939" fg:w="29"/><text x="2.2080%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (29 samples, 0.02%)</title><rect x="1.9580%" y="949" width="0.0193%" height="15" fill="rgb(211,50,8)" fg:x="2939" fg:w="29"/><text x="2.2080%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (29 samples, 0.02%)</title><rect x="1.9580%" y="933" width="0.0193%" height="15" fill="rgb(245,182,24)" fg:x="2939" fg:w="29"/><text x="2.2080%" y="943.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (29 samples, 0.02%)</title><rect x="1.9580%" y="917" width="0.0193%" height="15" fill="rgb(242,14,37)" fg:x="2939" fg:w="29"/><text x="2.2080%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (43 samples, 0.03%)</title><rect x="1.9580%" y="997" width="0.0286%" height="15" fill="rgb(246,228,12)" fg:x="2939" fg:w="43"/><text x="2.2080%" y="1007.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (198 samples, 0.13%)</title><rect x="1.8554%" y="1045" width="0.1319%" height="15" fill="rgb(213,55,15)" fg:x="2785" fg:w="198"/><text x="2.1054%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (152 samples, 0.10%)</title><rect x="1.8860%" y="1029" width="0.1013%" height="15" fill="rgb(209,9,3)" fg:x="2831" fg:w="152"/><text x="2.1360%" y="1039.50"></text></g><g><title>core::mem::drop (152 samples, 0.10%)</title><rect x="1.8860%" y="1013" width="0.1013%" height="15" fill="rgb(230,59,30)" fg:x="2831" fg:w="152"/><text x="2.1360%" y="1023.50"></text></g><g><title>async_executor::State::notify (21 samples, 0.01%)</title><rect x="1.9966%" y="1045" width="0.0140%" height="15" fill="rgb(209,121,21)" fg:x="2997" fg:w="21"/><text x="2.2466%" y="1055.50"></text></g><g><title>async_executor::Ticker::sleep (77 samples, 0.05%)</title><rect x="2.0106%" y="1045" width="0.0513%" height="15" fill="rgb(220,109,13)" fg:x="3018" fg:w="77"/><text x="2.2606%" y="1055.50"></text></g><g><title>async_executor::Ticker::wake (22 samples, 0.01%)</title><rect x="2.0619%" y="1045" width="0.0147%" height="15" fill="rgb(232,18,1)" fg:x="3095" fg:w="22"/><text x="2.3119%" y="1055.50"></text></g><g><title>async_executor::steal (393 samples, 0.26%)</title><rect x="2.0765%" y="1045" width="0.2618%" height="15" fill="rgb(215,41,42)" fg:x="3117" fg:w="393"/><text x="2.3265%" y="1055.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (17 samples, 0.01%)</title><rect x="2.3410%" y="1045" width="0.0113%" height="15" fill="rgb(224,123,36)" fg:x="3514" fg:w="17"/><text x="2.5910%" y="1055.50"></text></g><g><title>async_io::driver::block_on (18 samples, 0.01%)</title><rect x="2.3524%" y="1045" width="0.0120%" height="15" fill="rgb(240,125,3)" fg:x="3531" fg:w="18"/><text x="2.6024%" y="1055.50"></text></g><g><title>async_io::reactor::Reactor::process_timers (22 samples, 0.01%)</title><rect x="2.3650%" y="1045" width="0.0147%" height="15" fill="rgb(205,98,50)" fg:x="3550" fg:w="22"/><text x="2.6150%" y="1055.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (394 samples, 0.26%)</title><rect x="2.3870%" y="1045" width="0.2625%" height="15" fill="rgb(205,185,37)" fg:x="3583" fg:w="394"/><text x="2.6370%" y="1055.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (31 samples, 0.02%)</title><rect x="2.6495%" y="1045" width="0.0207%" height="15" fill="rgb(238,207,15)" fg:x="3977" fg:w="31"/><text x="2.8995%" y="1055.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (53 samples, 0.04%)</title><rect x="2.6701%" y="1045" width="0.0353%" height="15" fill="rgb(213,199,42)" fg:x="4008" fg:w="53"/><text x="2.9201%" y="1055.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (40 samples, 0.03%)</title><rect x="2.7094%" y="1045" width="0.0266%" height="15" fill="rgb(235,201,11)" fg:x="4067" fg:w="40"/><text x="2.9594%" y="1055.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (17 samples, 0.01%)</title><rect x="2.7248%" y="1029" width="0.0113%" height="15" fill="rgb(207,46,11)" fg:x="4090" fg:w="17"/><text x="2.9748%" y="1039.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (17 samples, 0.01%)</title><rect x="2.7248%" y="1013" width="0.0113%" height="15" fill="rgb(241,35,35)" fg:x="4090" fg:w="17"/><text x="2.9748%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (73 samples, 0.05%)</title><rect x="2.7361%" y="1045" width="0.0486%" height="15" fill="rgb(243,32,47)" fg:x="4107" fg:w="73"/><text x="2.9861%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}}&gt;&gt; (54 samples, 0.04%)</title><rect x="2.7874%" y="1045" width="0.0360%" height="15" fill="rgb(247,202,23)" fg:x="4184" fg:w="54"/><text x="3.0374%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}}&gt; (42 samples, 0.03%)</title><rect x="2.7954%" y="1029" width="0.0280%" height="15" fill="rgb(219,102,11)" fg:x="4196" fg:w="42"/><text x="3.0454%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::route_events::{{closure}}&gt;&gt; (39 samples, 0.03%)</title><rect x="2.8240%" y="1045" width="0.0260%" height="15" fill="rgb(243,110,44)" fg:x="4239" fg:w="39"/><text x="3.0740%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (19 samples, 0.01%)</title><rect x="2.8866%" y="997" width="0.0127%" height="15" fill="rgb(222,74,54)" fg:x="4333" fg:w="19"/><text x="3.1366%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (19 samples, 0.01%)</title><rect x="2.8866%" y="981" width="0.0127%" height="15" fill="rgb(216,99,12)" fg:x="4333" fg:w="19"/><text x="3.1366%" y="991.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (19 samples, 0.01%)</title><rect x="2.8866%" y="965" width="0.0127%" height="15" fill="rgb(226,22,26)" fg:x="4333" fg:w="19"/><text x="3.1366%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (23 samples, 0.02%)</title><rect x="2.8866%" y="1029" width="0.0153%" height="15" fill="rgb(217,163,10)" fg:x="4333" fg:w="23"/><text x="3.1366%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (23 samples, 0.02%)</title><rect x="2.8866%" y="1013" width="0.0153%" height="15" fill="rgb(213,25,53)" fg:x="4333" fg:w="23"/><text x="3.1366%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (55 samples, 0.04%)</title><rect x="2.8826%" y="1045" width="0.0366%" height="15" fill="rgb(252,105,26)" fg:x="4327" fg:w="55"/><text x="3.1326%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (17 samples, 0.01%)</title><rect x="2.9080%" y="1029" width="0.0113%" height="15" fill="rgb(220,39,43)" fg:x="4365" fg:w="17"/><text x="3.1580%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (16 samples, 0.01%)</title><rect x="2.9193%" y="1045" width="0.0107%" height="15" fill="rgb(229,68,48)" fg:x="4382" fg:w="16"/><text x="3.1693%" y="1055.50"></text></g><g><title>event_listener::Event::notify (91 samples, 0.06%)</title><rect x="2.9319%" y="1045" width="0.0606%" height="15" fill="rgb(252,8,32)" fg:x="4401" fg:w="91"/><text x="3.1819%" y="1055.50"></text></g><g><title>event_listener::full_fence (38 samples, 0.03%)</title><rect x="2.9673%" y="1029" width="0.0253%" height="15" fill="rgb(223,20,43)" fg:x="4454" fg:w="38"/><text x="3.2173%" y="1039.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (21 samples, 0.01%)</title><rect x="2.9979%" y="1045" width="0.0140%" height="15" fill="rgb(229,81,49)" fg:x="4500" fg:w="21"/><text x="3.2479%" y="1055.50"></text></g><g><title>parking::Unparker::unpark (21 samples, 0.01%)</title><rect x="3.0232%" y="1045" width="0.0140%" height="15" fill="rgb(236,28,36)" fg:x="4538" fg:w="21"/><text x="3.2732%" y="1055.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from (17 samples, 0.01%)</title><rect x="3.0765%" y="1013" width="0.0113%" height="15" fill="rgb(249,185,26)" fg:x="4618" fg:w="17"/><text x="3.3265%" y="1023.50"></text></g><g><title>core::intrinsics::copy (17 samples, 0.01%)</title><rect x="3.0765%" y="997" width="0.0113%" height="15" fill="rgb(249,174,33)" fg:x="4618" fg:w="17"/><text x="3.3265%" y="1007.50"></text></g><g><title>simd_json::Deserializer::from_slice_with_buffers (88 samples, 0.06%)</title><rect x="3.0432%" y="1045" width="0.0586%" height="15" fill="rgb(233,201,37)" fg:x="4568" fg:w="88"/><text x="3.2932%" y="1055.50"></text></g><g><title>simd_json::Deserializer::find_structural_bits (45 samples, 0.03%)</title><rect x="3.0718%" y="1029" width="0.0300%" height="15" fill="rgb(221,78,26)" fg:x="4611" fg:w="45"/><text x="3.3218%" y="1039.50"></text></g><g><title>simd_json::Stage1Parse::find_quote_mask_and_bits (21 samples, 0.01%)</title><rect x="3.0878%" y="1013" width="0.0140%" height="15" fill="rgb(250,127,30)" fg:x="4635" fg:w="21"/><text x="3.3378%" y="1023.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::compute_quote_mask (21 samples, 0.01%)</title><rect x="3.0878%" y="997" width="0.0140%" height="15" fill="rgb(230,49,44)" fg:x="4635" fg:w="21"/><text x="3.3378%" y="1007.50"></text></g><g><title>sn_rust_alloc (54 samples, 0.04%)</title><rect x="3.1018%" y="1045" width="0.0360%" height="15" fill="rgb(229,67,23)" fg:x="4656" fg:w="54"/><text x="3.3518%" y="1055.50"></text></g><g><title>sn_rust_dealloc (21 samples, 0.01%)</title><rect x="3.1378%" y="1045" width="0.0140%" height="15" fill="rgb(249,83,47)" fg:x="4710" fg:w="21"/><text x="3.3878%" y="1055.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (18 samples, 0.01%)</title><rect x="3.1611%" y="1045" width="0.0120%" height="15" fill="rgb(215,43,3)" fg:x="4745" fg:w="18"/><text x="3.4111%" y="1055.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (30 samples, 0.02%)</title><rect x="3.1924%" y="1045" width="0.0200%" height="15" fill="rgb(238,154,13)" fg:x="4792" fg:w="30"/><text x="3.4424%" y="1055.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (28 samples, 0.02%)</title><rect x="3.2124%" y="1045" width="0.0187%" height="15" fill="rgb(219,56,2)" fg:x="4822" fg:w="28"/><text x="3.4624%" y="1055.50"></text></g><g><title>tremor_common::time::nanotime (25 samples, 0.02%)</title><rect x="3.2311%" y="1045" width="0.0167%" height="15" fill="rgb(233,0,4)" fg:x="4850" fg:w="25"/><text x="3.4811%" y="1055.50"></text></g><g><title>std::time::SystemTime::now (25 samples, 0.02%)</title><rect x="3.2311%" y="1029" width="0.0167%" height="15" fill="rgb(235,30,7)" fg:x="4850" fg:w="25"/><text x="3.4811%" y="1039.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (25 samples, 0.02%)</title><rect x="3.2311%" y="1013" width="0.0167%" height="15" fill="rgb(250,79,13)" fg:x="4850" fg:w="25"/><text x="3.4811%" y="1023.50"></text></g><g><title>std::sys::unix::time::inner::now (25 samples, 0.02%)</title><rect x="3.2311%" y="997" width="0.0167%" height="15" fill="rgb(211,146,34)" fg:x="4850" fg:w="25"/><text x="3.4811%" y="1007.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (47 samples, 0.03%)</title><rect x="3.2477%" y="1045" width="0.0313%" height="15" fill="rgb(228,22,38)" fg:x="4875" fg:w="47"/><text x="3.4977%" y="1055.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event (16 samples, 0.01%)</title><rect x="3.2684%" y="1029" width="0.0107%" height="15" fill="rgb(235,168,5)" fg:x="4906" fg:w="16"/><text x="3.5184%" y="1039.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (16 samples, 0.01%)</title><rect x="3.2684%" y="1013" width="0.0107%" height="15" fill="rgb(221,155,16)" fg:x="4906" fg:w="16"/><text x="3.5184%" y="1023.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (16 samples, 0.01%)</title><rect x="3.2684%" y="997" width="0.0107%" height="15" fill="rgb(215,215,53)" fg:x="4906" fg:w="16"/><text x="3.5184%" y="1007.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (16 samples, 0.01%)</title><rect x="3.2684%" y="981" width="0.0107%" height="15" fill="rgb(223,4,10)" fg:x="4906" fg:w="16"/><text x="3.5184%" y="991.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::pull_data (32 samples, 0.02%)</title><rect x="3.2790%" y="1045" width="0.0213%" height="15" fill="rgb(234,103,6)" fg:x="4922" fg:w="32"/><text x="3.5290%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (27 samples, 0.02%)</title><rect x="3.3490%" y="981" width="0.0180%" height="15" fill="rgb(227,97,0)" fg:x="5027" fg:w="27"/><text x="3.5990%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (27 samples, 0.02%)</title><rect x="3.3490%" y="965" width="0.0180%" height="15" fill="rgb(234,150,53)" fg:x="5027" fg:w="27"/><text x="3.5990%" y="975.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (27 samples, 0.02%)</title><rect x="3.3490%" y="949" width="0.0180%" height="15" fill="rgb(228,201,54)" fg:x="5027" fg:w="27"/><text x="3.5990%" y="959.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (111 samples, 0.07%)</title><rect x="3.3004%" y="1045" width="0.0739%" height="15" fill="rgb(222,22,37)" fg:x="4954" fg:w="111"/><text x="3.5504%" y="1055.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (85 samples, 0.06%)</title><rect x="3.3177%" y="1029" width="0.0566%" height="15" fill="rgb(237,53,32)" fg:x="4980" fg:w="85"/><text x="3.5677%" y="1039.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (82 samples, 0.05%)</title><rect x="3.3197%" y="1013" width="0.0546%" height="15" fill="rgb(233,25,53)" fg:x="4983" fg:w="82"/><text x="3.5697%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (38 samples, 0.03%)</title><rect x="3.3490%" y="997" width="0.0253%" height="15" fill="rgb(210,40,34)" fg:x="5027" fg:w="38"/><text x="3.5990%" y="1007.50"></text></g><g><title>tremor_runtime::connectors::source::Streams::get_or_create_stream (20 samples, 0.01%)</title><rect x="3.3743%" y="1045" width="0.0133%" height="15" fill="rgb(241,220,44)" fg:x="5065" fg:w="20"/><text x="3.6243%" y="1055.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (22 samples, 0.01%)</title><rect x="3.4089%" y="1029" width="0.0147%" height="15" fill="rgb(235,28,35)" fg:x="5117" fg:w="22"/><text x="3.6589%" y="1039.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (21 samples, 0.01%)</title><rect x="3.4096%" y="1013" width="0.0140%" height="15" fill="rgb(210,56,17)" fg:x="5118" fg:w="21"/><text x="3.6596%" y="1023.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (21 samples, 0.01%)</title><rect x="3.4096%" y="997" width="0.0140%" height="15" fill="rgb(224,130,29)" fg:x="5118" fg:w="21"/><text x="3.6596%" y="1007.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (21 samples, 0.01%)</title><rect x="3.4096%" y="981" width="0.0140%" height="15" fill="rgb(235,212,8)" fg:x="5118" fg:w="21"/><text x="3.6596%" y="991.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (21 samples, 0.01%)</title><rect x="3.4096%" y="965" width="0.0140%" height="15" fill="rgb(223,33,50)" fg:x="5118" fg:w="21"/><text x="3.6596%" y="975.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (21 samples, 0.01%)</title><rect x="3.4096%" y="949" width="0.0140%" height="15" fill="rgb(219,149,13)" fg:x="5118" fg:w="21"/><text x="3.6596%" y="959.50"></text></g><g><title>alloc::slice::hack::to_vec (21 samples, 0.01%)</title><rect x="3.4096%" y="933" width="0.0140%" height="15" fill="rgb(250,156,29)" fg:x="5118" fg:w="21"/><text x="3.6596%" y="943.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (21 samples, 0.01%)</title><rect x="3.4096%" y="917" width="0.0140%" height="15" fill="rgb(216,193,19)" fg:x="5118" fg:w="21"/><text x="3.6596%" y="927.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (76 samples, 0.05%)</title><rect x="3.3876%" y="1045" width="0.0506%" height="15" fill="rgb(216,135,14)" fg:x="5085" fg:w="76"/><text x="3.6376%" y="1055.50"></text></g><g><title>tremor_runtime::connectors::utils::metrics::SourceReporter::periodic_flush (17 samples, 0.01%)</title><rect x="3.4383%" y="1045" width="0.0113%" height="15" fill="rgb(241,47,5)" fg:x="5161" fg:w="17"/><text x="3.6883%" y="1055.50"></text></g><g><title>tremor_runtime::pipeline::maybe_send (24 samples, 0.02%)</title><rect x="3.4496%" y="1045" width="0.0160%" height="15" fill="rgb(233,42,35)" fg:x="5178" fg:w="24"/><text x="3.6996%" y="1055.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (21 samples, 0.01%)</title><rect x="3.4696%" y="1045" width="0.0140%" height="15" fill="rgb(231,13,6)" fg:x="5208" fg:w="21"/><text x="3.7196%" y="1055.50"></text></g><g><title>tremor_script::srs::EventPayload::try_new (35 samples, 0.02%)</title><rect x="3.4836%" y="1045" width="0.0233%" height="15" fill="rgb(207,181,40)" fg:x="5229" fg:w="35"/><text x="3.7336%" y="1055.50"></text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (17 samples, 0.01%)</title><rect x="3.4956%" y="1029" width="0.0113%" height="15" fill="rgb(254,173,49)" fg:x="5247" fg:w="17"/><text x="3.7456%" y="1039.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::insert_nocheck (59 samples, 0.04%)</title><rect x="3.5595%" y="1013" width="0.0393%" height="15" fill="rgb(221,1,38)" fg:x="5343" fg:w="59"/><text x="3.8095%" y="1023.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (169 samples, 0.11%)</title><rect x="3.5069%" y="1045" width="0.1126%" height="15" fill="rgb(206,124,46)" fg:x="5264" fg:w="169"/><text x="3.7569%" y="1055.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse_map (93 samples, 0.06%)</title><rect x="3.5575%" y="1029" width="0.0620%" height="15" fill="rgb(249,21,11)" fg:x="5340" fg:w="93"/><text x="3.8075%" y="1039.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (31 samples, 0.02%)</title><rect x="3.5988%" y="1013" width="0.0207%" height="15" fill="rgb(222,201,40)" fg:x="5402" fg:w="31"/><text x="3.8488%" y="1023.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (23 samples, 0.02%)</title><rect x="3.6041%" y="997" width="0.0153%" height="15" fill="rgb(235,61,29)" fg:x="5410" fg:w="23"/><text x="3.8541%" y="1007.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (53 samples, 0.04%)</title><rect x="3.8167%" y="997" width="0.0353%" height="15" fill="rgb(219,207,3)" fg:x="5729" fg:w="53"/><text x="4.0667%" y="1007.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (53 samples, 0.04%)</title><rect x="3.8167%" y="981" width="0.0353%" height="15" fill="rgb(222,56,46)" fg:x="5729" fg:w="53"/><text x="4.0667%" y="991.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (53 samples, 0.04%)</title><rect x="3.8167%" y="965" width="0.0353%" height="15" fill="rgb(239,76,54)" fg:x="5729" fg:w="53"/><text x="4.0667%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (53 samples, 0.04%)</title><rect x="3.8167%" y="949" width="0.0353%" height="15" fill="rgb(231,124,27)" fg:x="5729" fg:w="53"/><text x="4.0667%" y="959.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (53 samples, 0.04%)</title><rect x="3.8167%" y="933" width="0.0353%" height="15" fill="rgb(249,195,6)" fg:x="5729" fg:w="53"/><text x="4.0667%" y="943.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (53 samples, 0.04%)</title><rect x="3.8167%" y="917" width="0.0353%" height="15" fill="rgb(237,174,47)" fg:x="5729" fg:w="53"/><text x="4.0667%" y="927.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (395 samples, 0.26%)</title><rect x="3.6195%" y="1045" width="0.2631%" height="15" fill="rgb(206,201,31)" fg:x="5433" fg:w="395"/><text x="3.8695%" y="1055.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string (99 samples, 0.07%)</title><rect x="3.8167%" y="1029" width="0.0660%" height="15" fill="rgb(231,57,52)" fg:x="5729" fg:w="99"/><text x="4.0667%" y="1039.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (99 samples, 0.07%)</title><rect x="3.8167%" y="1013" width="0.0660%" height="15" fill="rgb(248,177,22)" fg:x="5729" fg:w="99"/><text x="4.0667%" y="1023.50"></text></g><g><title>value_trait::generator::write_str_simd (46 samples, 0.03%)</title><rect x="3.8520%" y="997" width="0.0306%" height="15" fill="rgb(215,211,37)" fg:x="5782" fg:w="46"/><text x="4.1020%" y="1007.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (46 samples, 0.03%)</title><rect x="3.8520%" y="981" width="0.0306%" height="15" fill="rgb(241,128,51)" fg:x="5782" fg:w="46"/><text x="4.1020%" y="991.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (46 samples, 0.03%)</title><rect x="3.8520%" y="965" width="0.0306%" height="15" fill="rgb(227,165,31)" fg:x="5782" fg:w="46"/><text x="4.1020%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (46 samples, 0.03%)</title><rect x="3.8520%" y="949" width="0.0306%" height="15" fill="rgb(228,167,24)" fg:x="5782" fg:w="46"/><text x="4.1020%" y="959.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (46 samples, 0.03%)</title><rect x="3.8520%" y="933" width="0.0306%" height="15" fill="rgb(228,143,12)" fg:x="5782" fg:w="46"/><text x="4.1020%" y="943.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (46 samples, 0.03%)</title><rect x="3.8520%" y="917" width="0.0306%" height="15" fill="rgb(249,149,8)" fg:x="5782" fg:w="46"/><text x="4.1020%" y="927.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (22 samples, 0.01%)</title><rect x="3.8933%" y="1045" width="0.0147%" height="15" fill="rgb(243,35,44)" fg:x="5844" fg:w="22"/><text x="4.1433%" y="1055.50"></text></g><g><title>[anon] (5,626 samples, 3.75%)</title><rect x="0.1619%" y="1061" width="3.7480%" height="15" fill="rgb(246,89,9)" fg:x="243" fg:w="5626"/><text x="0.4119%" y="1071.50">[ano..</text></g><g><title>__GI___pthread_rwlock_rdlock (17 samples, 0.01%)</title><rect x="3.9439%" y="1045" width="0.0113%" height="15" fill="rgb(233,213,13)" fg:x="5920" fg:w="17"/><text x="4.1939%" y="1055.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (19 samples, 0.01%)</title><rect x="3.9592%" y="1045" width="0.0127%" height="15" fill="rgb(233,141,41)" fg:x="5943" fg:w="19"/><text x="4.2092%" y="1055.50"></text></g><g><title>[libc-2.31.so] (111 samples, 0.07%)</title><rect x="3.9099%" y="1061" width="0.0739%" height="15" fill="rgb(239,167,4)" fg:x="5869" fg:w="111"/><text x="4.1599%" y="1071.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (20 samples, 0.01%)</title><rect x="3.9859%" y="1045" width="0.0133%" height="15" fill="rgb(209,217,16)" fg:x="5983" fg:w="20"/><text x="4.2359%" y="1055.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (24 samples, 0.02%)</title><rect x="3.9992%" y="1045" width="0.0160%" height="15" fill="rgb(219,88,35)" fg:x="6003" fg:w="24"/><text x="4.2492%" y="1055.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (29 samples, 0.02%)</title><rect x="4.0152%" y="1045" width="0.0193%" height="15" fill="rgb(220,193,23)" fg:x="6027" fg:w="29"/><text x="4.2652%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (93 samples, 0.06%)</title><rect x="4.0585%" y="1045" width="0.0620%" height="15" fill="rgb(230,90,52)" fg:x="6092" fg:w="93"/><text x="4.3085%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (16 samples, 0.01%)</title><rect x="4.1098%" y="1029" width="0.0107%" height="15" fill="rgb(252,106,19)" fg:x="6169" fg:w="16"/><text x="4.3598%" y="1039.50"></text></g><g><title>[tremor-pdk-halfbrown] (278 samples, 0.19%)</title><rect x="3.9839%" y="1061" width="0.1852%" height="15" fill="rgb(206,74,20)" fg:x="5980" fg:w="278"/><text x="4.2339%" y="1071.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (46 samples, 0.03%)</title><rect x="4.1384%" y="1045" width="0.0306%" height="15" fill="rgb(230,138,44)" fg:x="6212" fg:w="46"/><text x="4.3884%" y="1055.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (51 samples, 0.03%)</title><rect x="4.1784%" y="1045" width="0.0340%" height="15" fill="rgb(235,182,43)" fg:x="6272" fg:w="51"/><text x="4.4284%" y="1055.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (52 samples, 0.03%)</title><rect x="4.2297%" y="1045" width="0.0346%" height="15" fill="rgb(242,16,51)" fg:x="6349" fg:w="52"/><text x="4.4797%" y="1055.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (52 samples, 0.03%)</title><rect x="4.3150%" y="1029" width="0.0346%" height="15" fill="rgb(248,9,4)" fg:x="6477" fg:w="52"/><text x="4.5650%" y="1039.50"></text></g><g><title>async_task::runnable::Runnable::run (52 samples, 0.03%)</title><rect x="4.3150%" y="1013" width="0.0346%" height="15" fill="rgb(210,31,22)" fg:x="6477" fg:w="52"/><text x="4.5650%" y="1023.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (52 samples, 0.03%)</title><rect x="4.3150%" y="997" width="0.0346%" height="15" fill="rgb(239,54,39)" fg:x="6477" fg:w="52"/><text x="4.5650%" y="1007.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (52 samples, 0.03%)</title><rect x="4.3150%" y="981" width="0.0346%" height="15" fill="rgb(230,99,41)" fg:x="6477" fg:w="52"/><text x="4.5650%" y="991.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (52 samples, 0.03%)</title><rect x="4.3150%" y="965" width="0.0346%" height="15" fill="rgb(253,106,12)" fg:x="6477" fg:w="52"/><text x="4.5650%" y="975.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (52 samples, 0.03%)</title><rect x="4.3150%" y="949" width="0.0346%" height="15" fill="rgb(213,46,41)" fg:x="6477" fg:w="52"/><text x="4.5650%" y="959.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (52 samples, 0.03%)</title><rect x="4.3150%" y="933" width="0.0346%" height="15" fill="rgb(215,133,35)" fg:x="6477" fg:w="52"/><text x="4.5650%" y="943.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (52 samples, 0.03%)</title><rect x="4.3150%" y="917" width="0.0346%" height="15" fill="rgb(213,28,5)" fg:x="6477" fg:w="52"/><text x="4.5650%" y="927.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (52 samples, 0.03%)</title><rect x="4.3150%" y="901" width="0.0346%" height="15" fill="rgb(215,77,49)" fg:x="6477" fg:w="52"/><text x="4.5650%" y="911.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (52 samples, 0.03%)</title><rect x="4.3150%" y="885" width="0.0346%" height="15" fill="rgb(248,100,22)" fg:x="6477" fg:w="52"/><text x="4.5650%" y="895.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (52 samples, 0.03%)</title><rect x="4.3150%" y="869" width="0.0346%" height="15" fill="rgb(208,67,9)" fg:x="6477" fg:w="52"/><text x="4.5650%" y="879.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (52 samples, 0.03%)</title><rect x="4.3150%" y="853" width="0.0346%" height="15" fill="rgb(219,133,21)" fg:x="6477" fg:w="52"/><text x="4.5650%" y="863.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (52 samples, 0.03%)</title><rect x="4.3150%" y="837" width="0.0346%" height="15" fill="rgb(246,46,29)" fg:x="6477" fg:w="52"/><text x="4.5650%" y="847.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (52 samples, 0.03%)</title><rect x="4.3150%" y="821" width="0.0346%" height="15" fill="rgb(246,185,52)" fg:x="6477" fg:w="52"/><text x="4.5650%" y="831.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (52 samples, 0.03%)</title><rect x="4.3150%" y="805" width="0.0346%" height="15" fill="rgb(252,136,11)" fg:x="6477" fg:w="52"/><text x="4.5650%" y="815.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (52 samples, 0.03%)</title><rect x="4.3150%" y="789" width="0.0346%" height="15" fill="rgb(219,138,53)" fg:x="6477" fg:w="52"/><text x="4.5650%" y="799.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (52 samples, 0.03%)</title><rect x="4.3150%" y="773" width="0.0346%" height="15" fill="rgb(211,51,23)" fg:x="6477" fg:w="52"/><text x="4.5650%" y="783.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (52 samples, 0.03%)</title><rect x="4.3150%" y="757" width="0.0346%" height="15" fill="rgb(247,221,28)" fg:x="6477" fg:w="52"/><text x="4.5650%" y="767.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (52 samples, 0.03%)</title><rect x="4.3150%" y="741" width="0.0346%" height="15" fill="rgb(251,222,45)" fg:x="6477" fg:w="52"/><text x="4.5650%" y="751.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (52 samples, 0.03%)</title><rect x="4.3150%" y="725" width="0.0346%" height="15" fill="rgb(217,162,53)" fg:x="6477" fg:w="52"/><text x="4.5650%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (44 samples, 0.03%)</title><rect x="4.3203%" y="709" width="0.0293%" height="15" fill="rgb(229,93,14)" fg:x="6485" fg:w="44"/><text x="4.5703%" y="719.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (44 samples, 0.03%)</title><rect x="4.3203%" y="693" width="0.0293%" height="15" fill="rgb(209,67,49)" fg:x="6485" fg:w="44"/><text x="4.5703%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)]&gt; (19 samples, 0.01%)</title><rect x="4.3370%" y="677" width="0.0127%" height="15" fill="rgb(213,87,29)" fg:x="6510" fg:w="19"/><text x="4.5870%" y="687.50"></text></g><g><title>[libc-2.31.so] (400 samples, 0.27%)</title><rect x="4.4069%" y="821" width="0.2665%" height="15" fill="rgb(205,151,52)" fg:x="6615" fg:w="400"/><text x="4.6569%" y="831.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (429 samples, 0.29%)</title><rect x="4.3916%" y="837" width="0.2858%" height="15" fill="rgb(253,215,39)" fg:x="6592" fg:w="429"/><text x="4.6416%" y="847.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (665 samples, 0.44%)</title><rect x="4.3669%" y="853" width="0.4430%" height="15" fill="rgb(221,220,41)" fg:x="6555" fg:w="665"/><text x="4.6169%" y="863.50"></text></g><g><title>[libc-2.31.so] (199 samples, 0.13%)</title><rect x="4.6774%" y="837" width="0.1326%" height="15" fill="rgb(218,133,21)" fg:x="7021" fg:w="199"/><text x="4.9274%" y="847.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (691 samples, 0.46%)</title><rect x="4.3556%" y="885" width="0.4603%" height="15" fill="rgb(221,193,43)" fg:x="6538" fg:w="691"/><text x="4.6056%" y="895.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (691 samples, 0.46%)</title><rect x="4.3556%" y="869" width="0.4603%" height="15" fill="rgb(240,128,52)" fg:x="6538" fg:w="691"/><text x="4.6056%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (32 samples, 0.02%)</title><rect x="4.9059%" y="533" width="0.0213%" height="15" fill="rgb(253,114,12)" fg:x="7364" fg:w="32"/><text x="5.1559%" y="543.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (32 samples, 0.02%)</title><rect x="4.9059%" y="517" width="0.0213%" height="15" fill="rgb(215,223,47)" fg:x="7364" fg:w="32"/><text x="5.1559%" y="527.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (32 samples, 0.02%)</title><rect x="4.9059%" y="501" width="0.0213%" height="15" fill="rgb(248,225,23)" fg:x="7364" fg:w="32"/><text x="5.1559%" y="511.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (873 samples, 0.58%)</title><rect x="4.3556%" y="901" width="0.5816%" height="15" fill="rgb(250,108,0)" fg:x="6538" fg:w="873"/><text x="4.6056%" y="911.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (182 samples, 0.12%)</title><rect x="4.8160%" y="885" width="0.1212%" height="15" fill="rgb(228,208,7)" fg:x="7229" fg:w="182"/><text x="5.0660%" y="895.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (182 samples, 0.12%)</title><rect x="4.8160%" y="869" width="0.1212%" height="15" fill="rgb(244,45,10)" fg:x="7229" fg:w="182"/><text x="5.0660%" y="879.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (182 samples, 0.12%)</title><rect x="4.8160%" y="853" width="0.1212%" height="15" fill="rgb(207,125,25)" fg:x="7229" fg:w="182"/><text x="5.0660%" y="863.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (182 samples, 0.12%)</title><rect x="4.8160%" y="837" width="0.1212%" height="15" fill="rgb(210,195,18)" fg:x="7229" fg:w="182"/><text x="5.0660%" y="847.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (182 samples, 0.12%)</title><rect x="4.8160%" y="821" width="0.1212%" height="15" fill="rgb(249,80,12)" fg:x="7229" fg:w="182"/><text x="5.0660%" y="831.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (182 samples, 0.12%)</title><rect x="4.8160%" y="805" width="0.1212%" height="15" fill="rgb(221,65,9)" fg:x="7229" fg:w="182"/><text x="5.0660%" y="815.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (182 samples, 0.12%)</title><rect x="4.8160%" y="789" width="0.1212%" height="15" fill="rgb(235,49,36)" fg:x="7229" fg:w="182"/><text x="5.0660%" y="799.50"></text></g><g><title>std::panic::catch_unwind (182 samples, 0.12%)</title><rect x="4.8160%" y="773" width="0.1212%" height="15" fill="rgb(225,32,20)" fg:x="7229" fg:w="182"/><text x="5.0660%" y="783.50"></text></g><g><title>std::panicking::try (182 samples, 0.12%)</title><rect x="4.8160%" y="757" width="0.1212%" height="15" fill="rgb(215,141,46)" fg:x="7229" fg:w="182"/><text x="5.0660%" y="767.50"></text></g><g><title>std::panicking::try::do_call (182 samples, 0.12%)</title><rect x="4.8160%" y="741" width="0.1212%" height="15" fill="rgb(250,160,47)" fg:x="7229" fg:w="182"/><text x="5.0660%" y="751.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (182 samples, 0.12%)</title><rect x="4.8160%" y="725" width="0.1212%" height="15" fill="rgb(216,222,40)" fg:x="7229" fg:w="182"/><text x="5.0660%" y="735.50"></text></g><g><title>core::ops::function::FnOnce::call_once (182 samples, 0.12%)</title><rect x="4.8160%" y="709" width="0.1212%" height="15" fill="rgb(234,217,39)" fg:x="7229" fg:w="182"/><text x="5.0660%" y="719.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (182 samples, 0.12%)</title><rect x="4.8160%" y="693" width="0.1212%" height="15" fill="rgb(207,178,40)" fg:x="7229" fg:w="182"/><text x="5.0660%" y="703.50"></text></g><g><title>async_ffi::FfiContext::with_context (182 samples, 0.12%)</title><rect x="4.8160%" y="677" width="0.1212%" height="15" fill="rgb(221,136,13)" fg:x="7229" fg:w="182"/><text x="5.0660%" y="687.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (182 samples, 0.12%)</title><rect x="4.8160%" y="661" width="0.1212%" height="15" fill="rgb(249,199,10)" fg:x="7229" fg:w="182"/><text x="5.0660%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (182 samples, 0.12%)</title><rect x="4.8160%" y="645" width="0.1212%" height="15" fill="rgb(249,222,13)" fg:x="7229" fg:w="182"/><text x="5.0660%" y="655.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (182 samples, 0.12%)</title><rect x="4.8160%" y="629" width="0.1212%" height="15" fill="rgb(244,185,38)" fg:x="7229" fg:w="182"/><text x="5.0660%" y="639.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (182 samples, 0.12%)</title><rect x="4.8160%" y="613" width="0.1212%" height="15" fill="rgb(236,202,9)" fg:x="7229" fg:w="182"/><text x="5.0660%" y="623.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (182 samples, 0.12%)</title><rect x="4.8160%" y="597" width="0.1212%" height="15" fill="rgb(250,229,37)" fg:x="7229" fg:w="182"/><text x="5.0660%" y="607.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (182 samples, 0.12%)</title><rect x="4.8160%" y="581" width="0.1212%" height="15" fill="rgb(206,174,23)" fg:x="7229" fg:w="182"/><text x="5.0660%" y="591.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (182 samples, 0.12%)</title><rect x="4.8160%" y="565" width="0.1212%" height="15" fill="rgb(211,33,43)" fg:x="7229" fg:w="182"/><text x="5.0660%" y="575.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (182 samples, 0.12%)</title><rect x="4.8160%" y="549" width="0.1212%" height="15" fill="rgb(245,58,50)" fg:x="7229" fg:w="182"/><text x="5.0660%" y="559.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (43 samples, 0.03%)</title><rect x="4.9372%" y="741" width="0.0286%" height="15" fill="rgb(244,68,36)" fg:x="7411" fg:w="43"/><text x="5.1872%" y="751.50"></text></g><g><title>event_listener::Inner::lock (130 samples, 0.09%)</title><rect x="4.9659%" y="709" width="0.0866%" height="15" fill="rgb(232,229,15)" fg:x="7454" fg:w="130"/><text x="5.2159%" y="719.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (130 samples, 0.09%)</title><rect x="4.9659%" y="693" width="0.0866%" height="15" fill="rgb(254,30,23)" fg:x="7454" fg:w="130"/><text x="5.2159%" y="703.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (130 samples, 0.09%)</title><rect x="4.9659%" y="677" width="0.0866%" height="15" fill="rgb(235,160,14)" fg:x="7454" fg:w="130"/><text x="5.2159%" y="687.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (130 samples, 0.09%)</title><rect x="4.9659%" y="661" width="0.0866%" height="15" fill="rgb(212,155,44)" fg:x="7454" fg:w="130"/><text x="5.2159%" y="671.50"></text></g><g><title>__GI___pthread_mutex_lock (130 samples, 0.09%)</title><rect x="4.9659%" y="645" width="0.0866%" height="15" fill="rgb(226,2,50)" fg:x="7454" fg:w="130"/><text x="5.2159%" y="655.50"></text></g><g><title>__lll_lock_wait (62 samples, 0.04%)</title><rect x="5.0112%" y="629" width="0.0413%" height="15" fill="rgb(234,177,6)" fg:x="7522" fg:w="62"/><text x="5.2612%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (64 samples, 0.04%)</title><rect x="5.0705%" y="613" width="0.0426%" height="15" fill="rgb(217,24,9)" fg:x="7611" fg:w="64"/><text x="5.3205%" y="623.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (64 samples, 0.04%)</title><rect x="5.0705%" y="597" width="0.0426%" height="15" fill="rgb(220,13,46)" fg:x="7611" fg:w="64"/><text x="5.3205%" y="607.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (62 samples, 0.04%)</title><rect x="5.0718%" y="581" width="0.0413%" height="15" fill="rgb(239,221,27)" fg:x="7613" fg:w="62"/><text x="5.3218%" y="591.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (62 samples, 0.04%)</title><rect x="5.0718%" y="565" width="0.0413%" height="15" fill="rgb(222,198,25)" fg:x="7613" fg:w="62"/><text x="5.3218%" y="575.50"></text></g><g><title>__GI___pthread_mutex_unlock (62 samples, 0.04%)</title><rect x="5.0718%" y="549" width="0.0413%" height="15" fill="rgb(211,99,13)" fg:x="7613" fg:w="62"/><text x="5.3218%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (25 samples, 0.02%)</title><rect x="5.1131%" y="613" width="0.0167%" height="15" fill="rgb(232,111,31)" fg:x="7675" fg:w="25"/><text x="5.3631%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (25 samples, 0.02%)</title><rect x="5.1131%" y="597" width="0.0167%" height="15" fill="rgb(245,82,37)" fg:x="7675" fg:w="25"/><text x="5.3631%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (18 samples, 0.01%)</title><rect x="5.1511%" y="533" width="0.0120%" height="15" fill="rgb(227,149,46)" fg:x="7732" fg:w="18"/><text x="5.4011%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_swap (18 samples, 0.01%)</title><rect x="5.1511%" y="517" width="0.0120%" height="15" fill="rgb(218,36,50)" fg:x="7732" fg:w="18"/><text x="5.4011%" y="527.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (59 samples, 0.04%)</title><rect x="5.1631%" y="533" width="0.0393%" height="15" fill="rgb(226,80,48)" fg:x="7750" fg:w="59"/><text x="5.4131%" y="543.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (59 samples, 0.04%)</title><rect x="5.1631%" y="517" width="0.0393%" height="15" fill="rgb(238,224,15)" fg:x="7750" fg:w="59"/><text x="5.4131%" y="527.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (59 samples, 0.04%)</title><rect x="5.1631%" y="501" width="0.0393%" height="15" fill="rgb(241,136,10)" fg:x="7750" fg:w="59"/><text x="5.4131%" y="511.50"></text></g><g><title>__pthread_cond_signal (59 samples, 0.04%)</title><rect x="5.1631%" y="485" width="0.0393%" height="15" fill="rgb(208,32,45)" fg:x="7750" fg:w="59"/><text x="5.4131%" y="495.50"></text></g><g><title>parking::Unparker::unpark (123 samples, 0.08%)</title><rect x="5.1424%" y="565" width="0.0819%" height="15" fill="rgb(207,135,9)" fg:x="7719" fg:w="123"/><text x="5.3924%" y="575.50"></text></g><g><title>parking::Inner::unpark (118 samples, 0.08%)</title><rect x="5.1457%" y="549" width="0.0786%" height="15" fill="rgb(206,86,44)" fg:x="7724" fg:w="118"/><text x="5.3957%" y="559.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (33 samples, 0.02%)</title><rect x="5.2024%" y="533" width="0.0220%" height="15" fill="rgb(245,177,15)" fg:x="7809" fg:w="33"/><text x="5.4524%" y="543.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (33 samples, 0.02%)</title><rect x="5.2024%" y="517" width="0.0220%" height="15" fill="rgb(206,64,50)" fg:x="7809" fg:w="33"/><text x="5.4524%" y="527.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (33 samples, 0.02%)</title><rect x="5.2024%" y="501" width="0.0220%" height="15" fill="rgb(234,36,40)" fg:x="7809" fg:w="33"/><text x="5.4524%" y="511.50"></text></g><g><title>__GI___pthread_mutex_lock (33 samples, 0.02%)</title><rect x="5.2024%" y="485" width="0.0220%" height="15" fill="rgb(213,64,8)" fg:x="7809" fg:w="33"/><text x="5.4524%" y="495.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (147 samples, 0.10%)</title><rect x="5.1304%" y="581" width="0.0979%" height="15" fill="rgb(210,75,36)" fg:x="7701" fg:w="147"/><text x="5.3804%" y="591.50"></text></g><g><title>core::task::wake::Waker::wake (172 samples, 0.11%)</title><rect x="5.1297%" y="613" width="0.1146%" height="15" fill="rgb(229,88,21)" fg:x="7700" fg:w="172"/><text x="5.3797%" y="623.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (172 samples, 0.11%)</title><rect x="5.1297%" y="597" width="0.1146%" height="15" fill="rgb(252,204,47)" fg:x="7700" fg:w="172"/><text x="5.3797%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (24 samples, 0.02%)</title><rect x="5.2283%" y="581" width="0.0160%" height="15" fill="rgb(208,77,27)" fg:x="7848" fg:w="24"/><text x="5.4783%" y="591.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.02%)</title><rect x="5.2283%" y="565" width="0.0160%" height="15" fill="rgb(221,76,26)" fg:x="7848" fg:w="24"/><text x="5.4783%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (24 samples, 0.02%)</title><rect x="5.2283%" y="549" width="0.0160%" height="15" fill="rgb(225,139,18)" fg:x="7848" fg:w="24"/><text x="5.4783%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_sub (24 samples, 0.02%)</title><rect x="5.2283%" y="533" width="0.0160%" height="15" fill="rgb(230,137,11)" fg:x="7848" fg:w="24"/><text x="5.4783%" y="543.50"></text></g><g><title>async_executor::State::notify (346 samples, 0.23%)</title><rect x="5.0691%" y="629" width="0.2305%" height="15" fill="rgb(212,28,1)" fg:x="7609" fg:w="346"/><text x="5.3191%" y="639.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (83 samples, 0.06%)</title><rect x="5.2443%" y="613" width="0.0553%" height="15" fill="rgb(248,164,17)" fg:x="7872" fg:w="83"/><text x="5.4943%" y="623.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (81 samples, 0.05%)</title><rect x="5.2457%" y="597" width="0.0540%" height="15" fill="rgb(222,171,42)" fg:x="7874" fg:w="81"/><text x="5.4957%" y="607.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (72 samples, 0.05%)</title><rect x="5.2517%" y="581" width="0.0480%" height="15" fill="rgb(243,84,45)" fg:x="7883" fg:w="72"/><text x="5.5017%" y="591.50"></text></g><g><title>__GI___pthread_mutex_lock (72 samples, 0.05%)</title><rect x="5.2517%" y="565" width="0.0480%" height="15" fill="rgb(252,49,23)" fg:x="7883" fg:w="72"/><text x="5.5017%" y="575.50"></text></g><g><title>__lll_lock_wait (17 samples, 0.01%)</title><rect x="5.2883%" y="549" width="0.0113%" height="15" fill="rgb(215,19,7)" fg:x="7938" fg:w="17"/><text x="5.5383%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (98 samples, 0.07%)</title><rect x="5.3056%" y="597" width="0.0653%" height="15" fill="rgb(238,81,41)" fg:x="7964" fg:w="98"/><text x="5.5556%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (98 samples, 0.07%)</title><rect x="5.3056%" y="581" width="0.0653%" height="15" fill="rgb(210,199,37)" fg:x="7964" fg:w="98"/><text x="5.5556%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (27 samples, 0.02%)</title><rect x="5.3709%" y="597" width="0.0180%" height="15" fill="rgb(244,192,49)" fg:x="8062" fg:w="27"/><text x="5.6209%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_or (27 samples, 0.02%)</title><rect x="5.3709%" y="581" width="0.0180%" height="15" fill="rgb(226,211,11)" fg:x="8062" fg:w="27"/><text x="5.6209%" y="591.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (490 samples, 0.33%)</title><rect x="5.0691%" y="645" width="0.3264%" height="15" fill="rgb(236,162,54)" fg:x="7609" fg:w="490"/><text x="5.3191%" y="655.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (144 samples, 0.10%)</title><rect x="5.2996%" y="629" width="0.0959%" height="15" fill="rgb(220,229,9)" fg:x="7955" fg:w="144"/><text x="5.5496%" y="639.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (143 samples, 0.10%)</title><rect x="5.3003%" y="613" width="0.0953%" height="15" fill="rgb(250,87,22)" fg:x="7956" fg:w="143"/><text x="5.5503%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (74 samples, 0.05%)</title><rect x="5.3956%" y="645" width="0.0493%" height="15" fill="rgb(239,43,17)" fg:x="8099" fg:w="74"/><text x="5.6456%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (74 samples, 0.05%)</title><rect x="5.3956%" y="629" width="0.0493%" height="15" fill="rgb(231,177,25)" fg:x="8099" fg:w="74"/><text x="5.6456%" y="639.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (729 samples, 0.49%)</title><rect x="4.9659%" y="741" width="0.4857%" height="15" fill="rgb(219,179,1)" fg:x="7454" fg:w="729"/><text x="5.2159%" y="751.50"></text></g><g><title>event_listener::Event::notify (729 samples, 0.49%)</title><rect x="4.9659%" y="725" width="0.4857%" height="15" fill="rgb(238,219,53)" fg:x="7454" fg:w="729"/><text x="5.2159%" y="735.50"></text></g><g><title>event_listener::List::notify (599 samples, 0.40%)</title><rect x="5.0525%" y="709" width="0.3991%" height="15" fill="rgb(232,167,36)" fg:x="7584" fg:w="599"/><text x="5.3025%" y="719.50"></text></g><g><title>core::task::wake::Waker::wake (588 samples, 0.39%)</title><rect x="5.0598%" y="693" width="0.3917%" height="15" fill="rgb(244,19,51)" fg:x="7595" fg:w="588"/><text x="5.3098%" y="703.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (588 samples, 0.39%)</title><rect x="5.0598%" y="677" width="0.3917%" height="15" fill="rgb(224,6,22)" fg:x="7595" fg:w="588"/><text x="5.3098%" y="687.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (574 samples, 0.38%)</title><rect x="5.0691%" y="661" width="0.3824%" height="15" fill="rgb(224,145,5)" fg:x="7609" fg:w="574"/><text x="5.3191%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (21 samples, 0.01%)</title><rect x="5.4628%" y="725" width="0.0140%" height="15" fill="rgb(234,130,49)" fg:x="8200" fg:w="21"/><text x="5.7128%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (21 samples, 0.01%)</title><rect x="5.4628%" y="709" width="0.0140%" height="15" fill="rgb(254,6,2)" fg:x="8200" fg:w="21"/><text x="5.7128%" y="719.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.01%)</title><rect x="5.4628%" y="693" width="0.0140%" height="15" fill="rgb(208,96,46)" fg:x="8200" fg:w="21"/><text x="5.7128%" y="703.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (21 samples, 0.01%)</title><rect x="5.4628%" y="677" width="0.0140%" height="15" fill="rgb(239,3,39)" fg:x="8200" fg:w="21"/><text x="5.7128%" y="687.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (21 samples, 0.01%)</title><rect x="5.4628%" y="661" width="0.0140%" height="15" fill="rgb(233,210,1)" fg:x="8200" fg:w="21"/><text x="5.7128%" y="671.50"></text></g><g><title>__GI___pthread_mutex_unlock (21 samples, 0.01%)</title><rect x="5.4628%" y="645" width="0.0140%" height="15" fill="rgb(244,137,37)" fg:x="8200" fg:w="21"/><text x="5.7128%" y="655.50"></text></g><g><title>event_listener::Inner::lock (35 samples, 0.02%)</title><rect x="5.4775%" y="725" width="0.0233%" height="15" fill="rgb(240,136,2)" fg:x="8222" fg:w="35"/><text x="5.7275%" y="735.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (34 samples, 0.02%)</title><rect x="5.4782%" y="709" width="0.0227%" height="15" fill="rgb(239,18,37)" fg:x="8223" fg:w="34"/><text x="5.7282%" y="719.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (34 samples, 0.02%)</title><rect x="5.4782%" y="693" width="0.0227%" height="15" fill="rgb(218,185,22)" fg:x="8223" fg:w="34"/><text x="5.7282%" y="703.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (34 samples, 0.02%)</title><rect x="5.4782%" y="677" width="0.0227%" height="15" fill="rgb(225,218,4)" fg:x="8223" fg:w="34"/><text x="5.7282%" y="687.50"></text></g><g><title>__GI___pthread_mutex_lock (34 samples, 0.02%)</title><rect x="5.4782%" y="661" width="0.0227%" height="15" fill="rgb(230,182,32)" fg:x="8223" fg:w="34"/><text x="5.7282%" y="671.50"></text></g><g><title>event_listener::Event::listen (80 samples, 0.05%)</title><rect x="5.4515%" y="741" width="0.0533%" height="15" fill="rgb(242,56,43)" fg:x="8183" fg:w="80"/><text x="5.7015%" y="751.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (867 samples, 0.58%)</title><rect x="4.9372%" y="757" width="0.5776%" height="15" fill="rgb(233,99,24)" fg:x="7411" fg:w="867"/><text x="5.1872%" y="767.50"></text></g><g><title>event_listener::Inner::lock (23 samples, 0.02%)</title><rect x="5.5148%" y="693" width="0.0153%" height="15" fill="rgb(234,209,42)" fg:x="8278" fg:w="23"/><text x="5.7648%" y="703.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (23 samples, 0.02%)</title><rect x="5.5148%" y="677" width="0.0153%" height="15" fill="rgb(227,7,12)" fg:x="8278" fg:w="23"/><text x="5.7648%" y="687.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (23 samples, 0.02%)</title><rect x="5.5148%" y="661" width="0.0153%" height="15" fill="rgb(245,203,43)" fg:x="8278" fg:w="23"/><text x="5.7648%" y="671.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (23 samples, 0.02%)</title><rect x="5.5148%" y="645" width="0.0153%" height="15" fill="rgb(238,205,33)" fg:x="8278" fg:w="23"/><text x="5.7648%" y="655.50"></text></g><g><title>__GI___pthread_mutex_lock (23 samples, 0.02%)</title><rect x="5.5148%" y="629" width="0.0153%" height="15" fill="rgb(231,56,7)" fg:x="8278" fg:w="23"/><text x="5.7648%" y="639.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (23 samples, 0.02%)</title><rect x="5.5315%" y="629" width="0.0153%" height="15" fill="rgb(244,186,29)" fg:x="8303" fg:w="23"/><text x="5.7815%" y="639.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (923 samples, 0.61%)</title><rect x="4.9372%" y="821" width="0.6149%" height="15" fill="rgb(234,111,31)" fg:x="7411" fg:w="923"/><text x="5.1872%" y="831.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (923 samples, 0.61%)</title><rect x="4.9372%" y="805" width="0.6149%" height="15" fill="rgb(241,149,10)" fg:x="7411" fg:w="923"/><text x="5.1872%" y="815.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (923 samples, 0.61%)</title><rect x="4.9372%" y="789" width="0.6149%" height="15" fill="rgb(249,206,44)" fg:x="7411" fg:w="923"/><text x="5.1872%" y="799.50"></text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (923 samples, 0.61%)</title><rect x="4.9372%" y="773" width="0.6149%" height="15" fill="rgb(251,153,30)" fg:x="7411" fg:w="923"/><text x="5.1872%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_channel::Send&lt;alloc::boxed::Box&lt;tremor_runtime::pipeline::Msg&gt;&gt;&gt; (56 samples, 0.04%)</title><rect x="5.5148%" y="757" width="0.0373%" height="15" fill="rgb(239,152,38)" fg:x="8278" fg:w="56"/><text x="5.7648%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (56 samples, 0.04%)</title><rect x="5.5148%" y="741" width="0.0373%" height="15" fill="rgb(249,139,47)" fg:x="8278" fg:w="56"/><text x="5.7648%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (56 samples, 0.04%)</title><rect x="5.5148%" y="725" width="0.0373%" height="15" fill="rgb(244,64,35)" fg:x="8278" fg:w="56"/><text x="5.7648%" y="735.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (56 samples, 0.04%)</title><rect x="5.5148%" y="709" width="0.0373%" height="15" fill="rgb(216,46,15)" fg:x="8278" fg:w="56"/><text x="5.7648%" y="719.50"></text></g><g><title>event_listener::List::notify (33 samples, 0.02%)</title><rect x="5.5301%" y="693" width="0.0220%" height="15" fill="rgb(250,74,19)" fg:x="8301" fg:w="33"/><text x="5.7801%" y="703.50"></text></g><g><title>core::task::wake::Waker::wake (32 samples, 0.02%)</title><rect x="5.5308%" y="677" width="0.0213%" height="15" fill="rgb(249,42,33)" fg:x="8302" fg:w="32"/><text x="5.7808%" y="687.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (32 samples, 0.02%)</title><rect x="5.5308%" y="661" width="0.0213%" height="15" fill="rgb(242,149,17)" fg:x="8302" fg:w="32"/><text x="5.7808%" y="671.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (31 samples, 0.02%)</title><rect x="5.5315%" y="645" width="0.0207%" height="15" fill="rgb(244,29,21)" fg:x="8303" fg:w="31"/><text x="5.7815%" y="655.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (40 samples, 0.03%)</title><rect x="5.9971%" y="805" width="0.0266%" height="15" fill="rgb(220,130,37)" fg:x="9002" fg:w="40"/><text x="6.2471%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (84 samples, 0.06%)</title><rect x="6.3076%" y="677" width="0.0560%" height="15" fill="rgb(211,67,2)" fg:x="9468" fg:w="84"/><text x="6.5576%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (84 samples, 0.06%)</title><rect x="6.3076%" y="661" width="0.0560%" height="15" fill="rgb(235,68,52)" fg:x="9468" fg:w="84"/><text x="6.5576%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (84 samples, 0.06%)</title><rect x="6.3076%" y="645" width="0.0560%" height="15" fill="rgb(246,142,3)" fg:x="9468" fg:w="84"/><text x="6.5576%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (84 samples, 0.06%)</title><rect x="6.3076%" y="629" width="0.0560%" height="15" fill="rgb(241,25,7)" fg:x="9468" fg:w="84"/><text x="6.5576%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (84 samples, 0.06%)</title><rect x="6.3076%" y="613" width="0.0560%" height="15" fill="rgb(242,119,39)" fg:x="9468" fg:w="84"/><text x="6.5576%" y="623.50"></text></g><g><title>alloc::alloc::alloc (67 samples, 0.04%)</title><rect x="6.3189%" y="597" width="0.0446%" height="15" fill="rgb(241,98,45)" fg:x="9485" fg:w="67"/><text x="6.5689%" y="607.50"></text></g><g><title>__rg_alloc (67 samples, 0.04%)</title><rect x="6.3189%" y="581" width="0.0446%" height="15" fill="rgb(254,28,30)" fg:x="9485" fg:w="67"/><text x="6.5689%" y="591.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (67 samples, 0.04%)</title><rect x="6.3189%" y="565" width="0.0446%" height="15" fill="rgb(241,142,54)" fg:x="9485" fg:w="67"/><text x="6.5689%" y="575.50"></text></g><g><title>sn_rust_alloc (51 samples, 0.03%)</title><rect x="6.3296%" y="549" width="0.0340%" height="15" fill="rgb(222,85,15)" fg:x="9501" fg:w="51"/><text x="6.5796%" y="559.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (148 samples, 0.10%)</title><rect x="6.2936%" y="789" width="0.0986%" height="15" fill="rgb(210,85,47)" fg:x="9447" fg:w="148"/><text x="6.5436%" y="799.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (140 samples, 0.09%)</title><rect x="6.2989%" y="773" width="0.0933%" height="15" fill="rgb(224,206,25)" fg:x="9455" fg:w="140"/><text x="6.5489%" y="783.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (132 samples, 0.09%)</title><rect x="6.3043%" y="757" width="0.0879%" height="15" fill="rgb(243,201,19)" fg:x="9463" fg:w="132"/><text x="6.5543%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (127 samples, 0.08%)</title><rect x="6.3076%" y="741" width="0.0846%" height="15" fill="rgb(236,59,4)" fg:x="9468" fg:w="127"/><text x="6.5576%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (127 samples, 0.08%)</title><rect x="6.3076%" y="725" width="0.0846%" height="15" fill="rgb(254,179,45)" fg:x="9468" fg:w="127"/><text x="6.5576%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (127 samples, 0.08%)</title><rect x="6.3076%" y="709" width="0.0846%" height="15" fill="rgb(226,14,10)" fg:x="9468" fg:w="127"/><text x="6.5576%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (127 samples, 0.08%)</title><rect x="6.3076%" y="693" width="0.0846%" height="15" fill="rgb(244,27,41)" fg:x="9468" fg:w="127"/><text x="6.5576%" y="703.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (43 samples, 0.03%)</title><rect x="6.3635%" y="677" width="0.0286%" height="15" fill="rgb(235,35,32)" fg:x="9552" fg:w="43"/><text x="6.6135%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (43 samples, 0.03%)</title><rect x="6.3635%" y="661" width="0.0286%" height="15" fill="rgb(218,68,31)" fg:x="9552" fg:w="43"/><text x="6.6135%" y="671.50"></text></g><g><title>[libc-2.31.so] (39 samples, 0.03%)</title><rect x="6.3662%" y="645" width="0.0260%" height="15" fill="rgb(207,120,37)" fg:x="9556" fg:w="39"/><text x="6.6162%" y="655.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (19 samples, 0.01%)</title><rect x="6.3975%" y="773" width="0.0127%" height="15" fill="rgb(227,98,0)" fg:x="9603" fg:w="19"/><text x="6.6475%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (79 samples, 0.05%)</title><rect x="6.4195%" y="581" width="0.0526%" height="15" fill="rgb(207,7,3)" fg:x="9636" fg:w="79"/><text x="6.6695%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (79 samples, 0.05%)</title><rect x="6.4195%" y="565" width="0.0526%" height="15" fill="rgb(206,98,19)" fg:x="9636" fg:w="79"/><text x="6.6695%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (79 samples, 0.05%)</title><rect x="6.4195%" y="549" width="0.0526%" height="15" fill="rgb(217,5,26)" fg:x="9636" fg:w="79"/><text x="6.6695%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (74 samples, 0.05%)</title><rect x="6.4228%" y="533" width="0.0493%" height="15" fill="rgb(235,190,38)" fg:x="9641" fg:w="74"/><text x="6.6728%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (74 samples, 0.05%)</title><rect x="6.4228%" y="517" width="0.0493%" height="15" fill="rgb(247,86,24)" fg:x="9641" fg:w="74"/><text x="6.6728%" y="527.50"></text></g><g><title>alloc::alloc::alloc (74 samples, 0.05%)</title><rect x="6.4228%" y="501" width="0.0493%" height="15" fill="rgb(205,101,16)" fg:x="9641" fg:w="74"/><text x="6.6728%" y="511.50"></text></g><g><title>__rg_alloc (74 samples, 0.05%)</title><rect x="6.4228%" y="485" width="0.0493%" height="15" fill="rgb(246,168,33)" fg:x="9641" fg:w="74"/><text x="6.6728%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (74 samples, 0.05%)</title><rect x="6.4228%" y="469" width="0.0493%" height="15" fill="rgb(231,114,1)" fg:x="9641" fg:w="74"/><text x="6.6728%" y="479.50"></text></g><g><title>sn_rust_alloc (67 samples, 0.04%)</title><rect x="6.4275%" y="453" width="0.0446%" height="15" fill="rgb(207,184,53)" fg:x="9648" fg:w="67"/><text x="6.6775%" y="463.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (36 samples, 0.02%)</title><rect x="6.4482%" y="437" width="0.0240%" height="15" fill="rgb(224,95,51)" fg:x="9679" fg:w="36"/><text x="6.6982%" y="447.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (119 samples, 0.08%)</title><rect x="6.4182%" y="693" width="0.0793%" height="15" fill="rgb(212,188,45)" fg:x="9634" fg:w="119"/><text x="6.6682%" y="703.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (119 samples, 0.08%)</title><rect x="6.4182%" y="677" width="0.0793%" height="15" fill="rgb(223,154,38)" fg:x="9634" fg:w="119"/><text x="6.6682%" y="687.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (119 samples, 0.08%)</title><rect x="6.4182%" y="661" width="0.0793%" height="15" fill="rgb(251,22,52)" fg:x="9634" fg:w="119"/><text x="6.6682%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (117 samples, 0.08%)</title><rect x="6.4195%" y="645" width="0.0779%" height="15" fill="rgb(229,209,22)" fg:x="9636" fg:w="117"/><text x="6.6695%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (117 samples, 0.08%)</title><rect x="6.4195%" y="629" width="0.0779%" height="15" fill="rgb(234,138,34)" fg:x="9636" fg:w="117"/><text x="6.6695%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (117 samples, 0.08%)</title><rect x="6.4195%" y="613" width="0.0779%" height="15" fill="rgb(212,95,11)" fg:x="9636" fg:w="117"/><text x="6.6695%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (117 samples, 0.08%)</title><rect x="6.4195%" y="597" width="0.0779%" height="15" fill="rgb(240,179,47)" fg:x="9636" fg:w="117"/><text x="6.6695%" y="607.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (38 samples, 0.03%)</title><rect x="6.4721%" y="581" width="0.0253%" height="15" fill="rgb(240,163,11)" fg:x="9715" fg:w="38"/><text x="6.7221%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (38 samples, 0.03%)</title><rect x="6.4721%" y="565" width="0.0253%" height="15" fill="rgb(236,37,12)" fg:x="9715" fg:w="38"/><text x="6.7221%" y="575.50"></text></g><g><title>[libc-2.31.so] (34 samples, 0.02%)</title><rect x="6.4748%" y="549" width="0.0227%" height="15" fill="rgb(232,164,16)" fg:x="9719" fg:w="34"/><text x="6.7248%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (51 samples, 0.03%)</title><rect x="6.5074%" y="645" width="0.0340%" height="15" fill="rgb(244,205,15)" fg:x="9768" fg:w="51"/><text x="6.7574%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (51 samples, 0.03%)</title><rect x="6.5074%" y="629" width="0.0340%" height="15" fill="rgb(223,117,47)" fg:x="9768" fg:w="51"/><text x="6.7574%" y="639.50"></text></g><g><title>alloc::alloc::alloc (45 samples, 0.03%)</title><rect x="6.5114%" y="613" width="0.0300%" height="15" fill="rgb(244,107,35)" fg:x="9774" fg:w="45"/><text x="6.7614%" y="623.50"></text></g><g><title>__rg_alloc (45 samples, 0.03%)</title><rect x="6.5114%" y="597" width="0.0300%" height="15" fill="rgb(205,140,8)" fg:x="9774" fg:w="45"/><text x="6.7614%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (45 samples, 0.03%)</title><rect x="6.5114%" y="581" width="0.0300%" height="15" fill="rgb(228,84,46)" fg:x="9774" fg:w="45"/><text x="6.7614%" y="591.50"></text></g><g><title>sn_rust_alloc (45 samples, 0.03%)</title><rect x="6.5114%" y="565" width="0.0300%" height="15" fill="rgb(254,188,9)" fg:x="9774" fg:w="45"/><text x="6.7614%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (59 samples, 0.04%)</title><rect x="6.5041%" y="693" width="0.0393%" height="15" fill="rgb(206,112,54)" fg:x="9763" fg:w="59"/><text x="6.7541%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (54 samples, 0.04%)</title><rect x="6.5074%" y="677" width="0.0360%" height="15" fill="rgb(216,84,49)" fg:x="9768" fg:w="54"/><text x="6.7574%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (54 samples, 0.04%)</title><rect x="6.5074%" y="661" width="0.0360%" height="15" fill="rgb(214,194,35)" fg:x="9768" fg:w="54"/><text x="6.7574%" y="671.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (775 samples, 0.52%)</title><rect x="6.0304%" y="805" width="0.5163%" height="15" fill="rgb(249,28,3)" fg:x="9052" fg:w="775"/><text x="6.2804%" y="815.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (232 samples, 0.15%)</title><rect x="6.3922%" y="789" width="0.1546%" height="15" fill="rgb(222,56,52)" fg:x="9595" fg:w="232"/><text x="6.6422%" y="799.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (205 samples, 0.14%)</title><rect x="6.4102%" y="773" width="0.1366%" height="15" fill="rgb(245,217,50)" fg:x="9622" fg:w="205"/><text x="6.6602%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (205 samples, 0.14%)</title><rect x="6.4102%" y="757" width="0.1366%" height="15" fill="rgb(213,201,24)" fg:x="9622" fg:w="205"/><text x="6.6602%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (205 samples, 0.14%)</title><rect x="6.4102%" y="741" width="0.1366%" height="15" fill="rgb(248,116,28)" fg:x="9622" fg:w="205"/><text x="6.6602%" y="751.50"></text></g><g><title>alloc::slice::hack::to_vec (205 samples, 0.14%)</title><rect x="6.4102%" y="725" width="0.1366%" height="15" fill="rgb(219,72,43)" fg:x="9622" fg:w="205"/><text x="6.6602%" y="735.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (205 samples, 0.14%)</title><rect x="6.4102%" y="709" width="0.1366%" height="15" fill="rgb(209,138,14)" fg:x="9622" fg:w="205"/><text x="6.6602%" y="719.50"></text></g><g><title>[libc-2.31.so] (115 samples, 0.08%)</title><rect x="6.5468%" y="805" width="0.0766%" height="15" fill="rgb(222,18,33)" fg:x="9827" fg:w="115"/><text x="6.7968%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (362 samples, 0.24%)</title><rect x="6.6300%" y="805" width="0.2412%" height="15" fill="rgb(213,199,7)" fg:x="9952" fg:w="362"/><text x="6.8800%" y="815.50"></text></g><g><title>core::ptr::write (348 samples, 0.23%)</title><rect x="6.6394%" y="789" width="0.2318%" height="15" fill="rgb(250,110,10)" fg:x="9966" fg:w="348"/><text x="6.8894%" y="799.50"></text></g><g><title>[libc-2.31.so] (346 samples, 0.23%)</title><rect x="6.6407%" y="773" width="0.2305%" height="15" fill="rgb(248,123,6)" fg:x="9968" fg:w="346"/><text x="6.8907%" y="783.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (424 samples, 0.28%)</title><rect x="6.9125%" y="645" width="0.2825%" height="15" fill="rgb(206,91,31)" fg:x="10376" fg:w="424"/><text x="7.1625%" y="655.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (18 samples, 0.01%)</title><rect x="7.1950%" y="645" width="0.0120%" height="15" fill="rgb(211,154,13)" fg:x="10800" fg:w="18"/><text x="7.4450%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (505 samples, 0.34%)</title><rect x="6.8759%" y="741" width="0.3364%" height="15" fill="rgb(225,148,7)" fg:x="10321" fg:w="505"/><text x="7.1259%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (505 samples, 0.34%)</title><rect x="6.8759%" y="725" width="0.3364%" height="15" fill="rgb(220,160,43)" fg:x="10321" fg:w="505"/><text x="7.1259%" y="735.50"></text></g><g><title>alloc::alloc::alloc (498 samples, 0.33%)</title><rect x="6.8805%" y="709" width="0.3318%" height="15" fill="rgb(213,52,39)" fg:x="10328" fg:w="498"/><text x="7.1305%" y="719.50"></text></g><g><title>__rg_alloc (498 samples, 0.33%)</title><rect x="6.8805%" y="693" width="0.3318%" height="15" fill="rgb(243,137,7)" fg:x="10328" fg:w="498"/><text x="7.1305%" y="703.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (498 samples, 0.33%)</title><rect x="6.8805%" y="677" width="0.3318%" height="15" fill="rgb(230,79,13)" fg:x="10328" fg:w="498"/><text x="7.1305%" y="687.50"></text></g><g><title>sn_rust_alloc (498 samples, 0.33%)</title><rect x="6.8805%" y="661" width="0.3318%" height="15" fill="rgb(247,105,23)" fg:x="10328" fg:w="498"/><text x="7.1305%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (516 samples, 0.34%)</title><rect x="6.8712%" y="805" width="0.3438%" height="15" fill="rgb(223,179,41)" fg:x="10314" fg:w="516"/><text x="7.1212%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (516 samples, 0.34%)</title><rect x="6.8712%" y="789" width="0.3438%" height="15" fill="rgb(218,9,34)" fg:x="10314" fg:w="516"/><text x="7.1212%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (514 samples, 0.34%)</title><rect x="6.8725%" y="773" width="0.3424%" height="15" fill="rgb(222,106,8)" fg:x="10316" fg:w="514"/><text x="7.1225%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (514 samples, 0.34%)</title><rect x="6.8725%" y="757" width="0.3424%" height="15" fill="rgb(211,220,0)" fg:x="10316" fg:w="514"/><text x="7.1225%" y="767.50"></text></g><g><title>alloc::vec::into_iter::IntoIter&lt;T,A&gt;::as_raw_mut_slice (18 samples, 0.01%)</title><rect x="7.2149%" y="773" width="0.0120%" height="15" fill="rgb(229,52,16)" fg:x="10830" fg:w="18"/><text x="7.4649%" y="783.50"></text></g><g><title>sn_rust_dealloc (54 samples, 0.04%)</title><rect x="7.2309%" y="645" width="0.0360%" height="15" fill="rgb(212,155,18)" fg:x="10854" fg:w="54"/><text x="7.4809%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (55 samples, 0.04%)</title><rect x="7.2309%" y="709" width="0.0366%" height="15" fill="rgb(242,21,14)" fg:x="10854" fg:w="55"/><text x="7.4809%" y="719.50"></text></g><g><title>alloc::alloc::dealloc (55 samples, 0.04%)</title><rect x="7.2309%" y="693" width="0.0366%" height="15" fill="rgb(222,19,48)" fg:x="10854" fg:w="55"/><text x="7.4809%" y="703.50"></text></g><g><title>__rg_dealloc (55 samples, 0.04%)</title><rect x="7.2309%" y="677" width="0.0366%" height="15" fill="rgb(232,45,27)" fg:x="10854" fg:w="55"/><text x="7.4809%" y="687.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (55 samples, 0.04%)</title><rect x="7.2309%" y="661" width="0.0366%" height="15" fill="rgb(249,103,42)" fg:x="10854" fg:w="55"/><text x="7.4809%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (83 samples, 0.06%)</title><rect x="7.2149%" y="805" width="0.0553%" height="15" fill="rgb(246,81,33)" fg:x="10830" fg:w="83"/><text x="7.4649%" y="815.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (83 samples, 0.06%)</title><rect x="7.2149%" y="789" width="0.0553%" height="15" fill="rgb(252,33,42)" fg:x="10830" fg:w="83"/><text x="7.4649%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (65 samples, 0.04%)</title><rect x="7.2269%" y="773" width="0.0433%" height="15" fill="rgb(209,212,41)" fg:x="10848" fg:w="65"/><text x="7.4769%" y="783.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (65 samples, 0.04%)</title><rect x="7.2269%" y="757" width="0.0433%" height="15" fill="rgb(207,154,6)" fg:x="10848" fg:w="65"/><text x="7.4769%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (59 samples, 0.04%)</title><rect x="7.2309%" y="741" width="0.0393%" height="15" fill="rgb(223,64,47)" fg:x="10854" fg:w="59"/><text x="7.4809%" y="751.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (59 samples, 0.04%)</title><rect x="7.2309%" y="725" width="0.0393%" height="15" fill="rgb(211,161,38)" fg:x="10854" fg:w="59"/><text x="7.4809%" y="735.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (3,512 samples, 2.34%)</title><rect x="4.9372%" y="901" width="2.3397%" height="15" fill="rgb(219,138,40)" fg:x="7411" fg:w="3512"/><text x="5.1872%" y="911.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,512 samples, 2.34%)</title><rect x="4.9372%" y="885" width="2.3397%" height="15" fill="rgb(241,228,46)" fg:x="7411" fg:w="3512"/><text x="5.1872%" y="895.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (3,512 samples, 2.34%)</title><rect x="4.9372%" y="869" width="2.3397%" height="15" fill="rgb(223,209,38)" fg:x="7411" fg:w="3512"/><text x="5.1872%" y="879.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,512 samples, 2.34%)</title><rect x="4.9372%" y="853" width="2.3397%" height="15" fill="rgb(236,164,45)" fg:x="7411" fg:w="3512"/><text x="5.1872%" y="863.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (3,512 samples, 2.34%)</title><rect x="4.9372%" y="837" width="2.3397%" height="15" fill="rgb(231,15,5)" fg:x="7411" fg:w="3512"/><text x="5.1872%" y="847.50">t..</text></g><g><title>tremor_runtime::connectors::source::build_events (2,585 samples, 1.72%)</title><rect x="5.5548%" y="821" width="1.7221%" height="15" fill="rgb(252,35,15)" fg:x="8338" fg:w="2585"/><text x="5.8048%" y="831.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (52 samples, 0.03%)</title><rect x="7.3362%" y="837" width="0.0346%" height="15" fill="rgb(248,181,18)" fg:x="11012" fg:w="52"/><text x="7.5862%" y="847.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (39 samples, 0.03%)</title><rect x="7.3449%" y="821" width="0.0260%" height="15" fill="rgb(233,39,42)" fg:x="11025" fg:w="39"/><text x="7.5949%" y="831.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (511 samples, 0.34%)</title><rect x="7.2856%" y="853" width="0.3404%" height="15" fill="rgb(238,110,33)" fg:x="10936" fg:w="511"/><text x="7.5356%" y="863.50"></text></g><g><title>[libc-2.31.so] (383 samples, 0.26%)</title><rect x="7.3708%" y="837" width="0.2552%" height="15" fill="rgb(233,195,10)" fg:x="11064" fg:w="383"/><text x="7.6208%" y="847.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (741 samples, 0.49%)</title><rect x="7.2769%" y="885" width="0.4937%" height="15" fill="rgb(254,105,3)" fg:x="10923" fg:w="741"/><text x="7.5269%" y="895.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (741 samples, 0.49%)</title><rect x="7.2769%" y="869" width="0.4937%" height="15" fill="rgb(221,225,9)" fg:x="10923" fg:w="741"/><text x="7.5269%" y="879.50"></text></g><g><title>[libc-2.31.so] (217 samples, 0.14%)</title><rect x="7.6260%" y="853" width="0.1446%" height="15" fill="rgb(224,227,45)" fg:x="11447" fg:w="217"/><text x="7.8760%" y="863.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (75 samples, 0.05%)</title><rect x="7.7706%" y="853" width="0.0500%" height="15" fill="rgb(229,198,43)" fg:x="11664" fg:w="75"/><text x="8.0206%" y="863.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (75 samples, 0.05%)</title><rect x="7.7706%" y="837" width="0.0500%" height="15" fill="rgb(206,209,35)" fg:x="11664" fg:w="75"/><text x="8.0206%" y="847.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (75 samples, 0.05%)</title><rect x="7.7706%" y="821" width="0.0500%" height="15" fill="rgb(245,195,53)" fg:x="11664" fg:w="75"/><text x="8.0206%" y="831.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (75 samples, 0.05%)</title><rect x="7.7706%" y="805" width="0.0500%" height="15" fill="rgb(240,92,26)" fg:x="11664" fg:w="75"/><text x="8.0206%" y="815.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (75 samples, 0.05%)</title><rect x="7.7706%" y="789" width="0.0500%" height="15" fill="rgb(207,40,23)" fg:x="11664" fg:w="75"/><text x="8.0206%" y="799.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (75 samples, 0.05%)</title><rect x="7.7706%" y="773" width="0.0500%" height="15" fill="rgb(223,111,35)" fg:x="11664" fg:w="75"/><text x="8.0206%" y="783.50"></text></g><g><title>alloc::slice::hack::to_vec (75 samples, 0.05%)</title><rect x="7.7706%" y="757" width="0.0500%" height="15" fill="rgb(229,147,28)" fg:x="11664" fg:w="75"/><text x="8.0206%" y="767.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (75 samples, 0.05%)</title><rect x="7.7706%" y="741" width="0.0500%" height="15" fill="rgb(211,29,28)" fg:x="11664" fg:w="75"/><text x="8.0206%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (75 samples, 0.05%)</title><rect x="7.7706%" y="725" width="0.0500%" height="15" fill="rgb(228,72,33)" fg:x="11664" fg:w="75"/><text x="8.0206%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (75 samples, 0.05%)</title><rect x="7.7706%" y="709" width="0.0500%" height="15" fill="rgb(205,214,31)" fg:x="11664" fg:w="75"/><text x="8.0206%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (75 samples, 0.05%)</title><rect x="7.7706%" y="693" width="0.0500%" height="15" fill="rgb(224,111,15)" fg:x="11664" fg:w="75"/><text x="8.0206%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (75 samples, 0.05%)</title><rect x="7.7706%" y="677" width="0.0500%" height="15" fill="rgb(253,21,26)" fg:x="11664" fg:w="75"/><text x="8.0206%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (75 samples, 0.05%)</title><rect x="7.7706%" y="661" width="0.0500%" height="15" fill="rgb(245,139,43)" fg:x="11664" fg:w="75"/><text x="8.0206%" y="671.50"></text></g><g><title>alloc::alloc::alloc (75 samples, 0.05%)</title><rect x="7.7706%" y="645" width="0.0500%" height="15" fill="rgb(252,170,7)" fg:x="11664" fg:w="75"/><text x="8.0206%" y="655.50"></text></g><g><title>__rg_alloc (75 samples, 0.05%)</title><rect x="7.7706%" y="629" width="0.0500%" height="15" fill="rgb(231,118,14)" fg:x="11664" fg:w="75"/><text x="8.0206%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (75 samples, 0.05%)</title><rect x="7.7706%" y="613" width="0.0500%" height="15" fill="rgb(238,83,0)" fg:x="11664" fg:w="75"/><text x="8.0206%" y="623.50"></text></g><g><title>sn_rust_alloc (75 samples, 0.05%)</title><rect x="7.7706%" y="597" width="0.0500%" height="15" fill="rgb(221,39,39)" fg:x="11664" fg:w="75"/><text x="8.0206%" y="607.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (75 samples, 0.05%)</title><rect x="7.7706%" y="581" width="0.0500%" height="15" fill="rgb(222,119,46)" fg:x="11664" fg:w="75"/><text x="8.0206%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (22 samples, 0.01%)</title><rect x="7.8205%" y="853" width="0.0147%" height="15" fill="rgb(222,165,49)" fg:x="11739" fg:w="22"/><text x="8.0705%" y="863.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.01%)</title><rect x="7.8205%" y="837" width="0.0147%" height="15" fill="rgb(219,113,52)" fg:x="11739" fg:w="22"/><text x="8.0705%" y="847.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (193 samples, 0.13%)</title><rect x="7.8432%" y="821" width="0.1286%" height="15" fill="rgb(214,7,15)" fg:x="11773" fg:w="193"/><text x="8.0932%" y="831.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (186 samples, 0.12%)</title><rect x="7.8478%" y="805" width="0.1239%" height="15" fill="rgb(235,32,4)" fg:x="11780" fg:w="186"/><text x="8.0978%" y="815.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (186 samples, 0.12%)</title><rect x="7.8478%" y="789" width="0.1239%" height="15" fill="rgb(238,90,54)" fg:x="11780" fg:w="186"/><text x="8.0978%" y="799.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (186 samples, 0.12%)</title><rect x="7.8478%" y="773" width="0.1239%" height="15" fill="rgb(213,208,19)" fg:x="11780" fg:w="186"/><text x="8.0978%" y="783.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (186 samples, 0.12%)</title><rect x="7.8478%" y="757" width="0.1239%" height="15" fill="rgb(233,156,4)" fg:x="11780" fg:w="186"/><text x="8.0978%" y="767.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (186 samples, 0.12%)</title><rect x="7.8478%" y="741" width="0.1239%" height="15" fill="rgb(207,194,5)" fg:x="11780" fg:w="186"/><text x="8.0978%" y="751.50"></text></g><g><title>[libc-2.31.so] (109 samples, 0.07%)</title><rect x="7.8991%" y="725" width="0.0726%" height="15" fill="rgb(206,111,30)" fg:x="11857" fg:w="109"/><text x="8.1491%" y="735.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (5,437 samples, 3.62%)</title><rect x="4.3556%" y="1029" width="3.6221%" height="15" fill="rgb(243,70,54)" fg:x="6538" fg:w="5437"/><text x="4.6056%" y="1039.50">asyn..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (5,437 samples, 3.62%)</title><rect x="4.3556%" y="1013" width="3.6221%" height="15" fill="rgb(242,28,8)" fg:x="6538" fg:w="5437"/><text x="4.6056%" y="1023.50">&lt;asy..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (5,437 samples, 3.62%)</title><rect x="4.3556%" y="997" width="3.6221%" height="15" fill="rgb(219,106,18)" fg:x="6538" fg:w="5437"/><text x="4.6056%" y="1007.50">asyn..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (5,437 samples, 3.62%)</title><rect x="4.3556%" y="981" width="3.6221%" height="15" fill="rgb(244,222,10)" fg:x="6538" fg:w="5437"/><text x="4.6056%" y="991.50">std:..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (5,437 samples, 3.62%)</title><rect x="4.3556%" y="965" width="3.6221%" height="15" fill="rgb(236,179,52)" fg:x="6538" fg:w="5437"/><text x="4.6056%" y="975.50">std:..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (5,437 samples, 3.62%)</title><rect x="4.3556%" y="949" width="3.6221%" height="15" fill="rgb(213,23,39)" fg:x="6538" fg:w="5437"/><text x="4.6056%" y="959.50">asyn..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (5,437 samples, 3.62%)</title><rect x="4.3556%" y="933" width="3.6221%" height="15" fill="rgb(238,48,10)" fg:x="6538" fg:w="5437"/><text x="4.6056%" y="943.50">&lt;asy..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,437 samples, 3.62%)</title><rect x="4.3556%" y="917" width="3.6221%" height="15" fill="rgb(251,196,23)" fg:x="6538" fg:w="5437"/><text x="4.6056%" y="927.50">&lt;cor..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (1,052 samples, 0.70%)</title><rect x="7.2769%" y="901" width="0.7008%" height="15" fill="rgb(250,152,24)" fg:x="10923" fg:w="1052"/><text x="7.5269%" y="911.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (311 samples, 0.21%)</title><rect x="7.7706%" y="885" width="0.2072%" height="15" fill="rgb(209,150,17)" fg:x="11664" fg:w="311"/><text x="8.0206%" y="895.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (311 samples, 0.21%)</title><rect x="7.7706%" y="869" width="0.2072%" height="15" fill="rgb(234,202,34)" fg:x="11664" fg:w="311"/><text x="8.0206%" y="879.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (214 samples, 0.14%)</title><rect x="7.8352%" y="853" width="0.1426%" height="15" fill="rgb(253,148,53)" fg:x="11761" fg:w="214"/><text x="8.0852%" y="863.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get_mut (203 samples, 0.14%)</title><rect x="7.8425%" y="837" width="0.1352%" height="15" fill="rgb(218,129,16)" fg:x="11772" fg:w="203"/><text x="8.0925%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (21 samples, 0.01%)</title><rect x="7.9937%" y="933" width="0.0140%" height="15" fill="rgb(216,85,19)" fg:x="11999" fg:w="21"/><text x="8.2437%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (21 samples, 0.01%)</title><rect x="7.9937%" y="917" width="0.0140%" height="15" fill="rgb(235,228,7)" fg:x="11999" fg:w="21"/><text x="8.2437%" y="927.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (21 samples, 0.01%)</title><rect x="7.9937%" y="901" width="0.0140%" height="15" fill="rgb(245,175,0)" fg:x="11999" fg:w="21"/><text x="8.2437%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (21 samples, 0.01%)</title><rect x="7.9937%" y="885" width="0.0140%" height="15" fill="rgb(208,168,36)" fg:x="11999" fg:w="21"/><text x="8.2437%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (21 samples, 0.01%)</title><rect x="7.9937%" y="869" width="0.0140%" height="15" fill="rgb(246,171,24)" fg:x="11999" fg:w="21"/><text x="8.2437%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (21 samples, 0.01%)</title><rect x="7.9937%" y="853" width="0.0140%" height="15" fill="rgb(215,142,24)" fg:x="11999" fg:w="21"/><text x="8.2437%" y="863.50"></text></g><g><title>alloc::alloc::alloc (21 samples, 0.01%)</title><rect x="7.9937%" y="837" width="0.0140%" height="15" fill="rgb(250,187,7)" fg:x="11999" fg:w="21"/><text x="8.2437%" y="847.50"></text></g><g><title>__rg_alloc (21 samples, 0.01%)</title><rect x="7.9937%" y="821" width="0.0140%" height="15" fill="rgb(228,66,33)" fg:x="11999" fg:w="21"/><text x="8.2437%" y="831.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (21 samples, 0.01%)</title><rect x="7.9937%" y="805" width="0.0140%" height="15" fill="rgb(234,215,21)" fg:x="11999" fg:w="21"/><text x="8.2437%" y="815.50"></text></g><g><title>sn_rust_alloc (21 samples, 0.01%)</title><rect x="7.9937%" y="789" width="0.0140%" height="15" fill="rgb(222,191,20)" fg:x="11999" fg:w="21"/><text x="8.2437%" y="799.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (51 samples, 0.03%)</title><rect x="8.0564%" y="677" width="0.0340%" height="15" fill="rgb(245,79,54)" fg:x="12093" fg:w="51"/><text x="8.3064%" y="687.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (124 samples, 0.08%)</title><rect x="8.0097%" y="837" width="0.0826%" height="15" fill="rgb(240,10,37)" fg:x="12023" fg:w="124"/><text x="8.2597%" y="847.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (124 samples, 0.08%)</title><rect x="8.0097%" y="821" width="0.0826%" height="15" fill="rgb(214,192,32)" fg:x="12023" fg:w="124"/><text x="8.2597%" y="831.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (107 samples, 0.07%)</title><rect x="8.0211%" y="805" width="0.0713%" height="15" fill="rgb(209,36,54)" fg:x="12040" fg:w="107"/><text x="8.2711%" y="815.50"></text></g><g><title>alloc::alloc::exchange_malloc (89 samples, 0.06%)</title><rect x="8.0330%" y="789" width="0.0593%" height="15" fill="rgb(220,10,11)" fg:x="12058" fg:w="89"/><text x="8.2830%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (89 samples, 0.06%)</title><rect x="8.0330%" y="773" width="0.0593%" height="15" fill="rgb(221,106,17)" fg:x="12058" fg:w="89"/><text x="8.2830%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (89 samples, 0.06%)</title><rect x="8.0330%" y="757" width="0.0593%" height="15" fill="rgb(251,142,44)" fg:x="12058" fg:w="89"/><text x="8.2830%" y="767.50"></text></g><g><title>alloc::alloc::alloc (89 samples, 0.06%)</title><rect x="8.0330%" y="741" width="0.0593%" height="15" fill="rgb(238,13,15)" fg:x="12058" fg:w="89"/><text x="8.2830%" y="751.50"></text></g><g><title>__rg_alloc (89 samples, 0.06%)</title><rect x="8.0330%" y="725" width="0.0593%" height="15" fill="rgb(208,107,27)" fg:x="12058" fg:w="89"/><text x="8.2830%" y="735.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (89 samples, 0.06%)</title><rect x="8.0330%" y="709" width="0.0593%" height="15" fill="rgb(205,136,37)" fg:x="12058" fg:w="89"/><text x="8.2830%" y="719.50"></text></g><g><title>sn_rust_alloc (89 samples, 0.06%)</title><rect x="8.0330%" y="693" width="0.0593%" height="15" fill="rgb(250,205,27)" fg:x="12058" fg:w="89"/><text x="8.2830%" y="703.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::default::Default&gt;::default (152 samples, 0.10%)</title><rect x="8.0077%" y="901" width="0.1013%" height="15" fill="rgb(210,80,43)" fg:x="12020" fg:w="152"/><text x="8.2577%" y="911.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (152 samples, 0.10%)</title><rect x="8.0077%" y="885" width="0.1013%" height="15" fill="rgb(247,160,36)" fg:x="12020" fg:w="152"/><text x="8.2577%" y="895.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (152 samples, 0.10%)</title><rect x="8.0077%" y="869" width="0.1013%" height="15" fill="rgb(234,13,49)" fg:x="12020" fg:w="152"/><text x="8.2577%" y="879.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (152 samples, 0.10%)</title><rect x="8.0077%" y="853" width="0.1013%" height="15" fill="rgb(234,122,0)" fg:x="12020" fg:w="152"/><text x="8.2577%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (25 samples, 0.02%)</title><rect x="8.0923%" y="837" width="0.0167%" height="15" fill="rgb(207,146,38)" fg:x="12147" fg:w="25"/><text x="8.3423%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (16 samples, 0.01%)</title><rect x="8.0983%" y="821" width="0.0107%" height="15" fill="rgb(207,177,25)" fg:x="12156" fg:w="16"/><text x="8.3483%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (16 samples, 0.01%)</title><rect x="8.0983%" y="805" width="0.0107%" height="15" fill="rgb(211,178,42)" fg:x="12156" fg:w="16"/><text x="8.3483%" y="815.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (16 samples, 0.01%)</title><rect x="8.0983%" y="789" width="0.0107%" height="15" fill="rgb(230,69,54)" fg:x="12156" fg:w="16"/><text x="8.3483%" y="799.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (16 samples, 0.01%)</title><rect x="8.0983%" y="773" width="0.0107%" height="15" fill="rgb(214,135,41)" fg:x="12156" fg:w="16"/><text x="8.3483%" y="783.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (208 samples, 0.14%)</title><rect x="8.2496%" y="613" width="0.1386%" height="15" fill="rgb(237,67,25)" fg:x="12383" fg:w="208"/><text x="8.4996%" y="623.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (329 samples, 0.22%)</title><rect x="8.1816%" y="773" width="0.2192%" height="15" fill="rgb(222,189,50)" fg:x="12281" fg:w="329"/><text x="8.4316%" y="783.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (329 samples, 0.22%)</title><rect x="8.1816%" y="757" width="0.2192%" height="15" fill="rgb(245,148,34)" fg:x="12281" fg:w="329"/><text x="8.4316%" y="767.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (308 samples, 0.21%)</title><rect x="8.1956%" y="741" width="0.2052%" height="15" fill="rgb(222,29,6)" fg:x="12302" fg:w="308"/><text x="8.4456%" y="751.50"></text></g><g><title>alloc::alloc::exchange_malloc (292 samples, 0.19%)</title><rect x="8.2063%" y="725" width="0.1945%" height="15" fill="rgb(221,189,43)" fg:x="12318" fg:w="292"/><text x="8.4563%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (292 samples, 0.19%)</title><rect x="8.2063%" y="709" width="0.1945%" height="15" fill="rgb(207,36,27)" fg:x="12318" fg:w="292"/><text x="8.4563%" y="719.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (292 samples, 0.19%)</title><rect x="8.2063%" y="693" width="0.1945%" height="15" fill="rgb(217,90,24)" fg:x="12318" fg:w="292"/><text x="8.4563%" y="703.50"></text></g><g><title>alloc::alloc::alloc (291 samples, 0.19%)</title><rect x="8.2069%" y="677" width="0.1939%" height="15" fill="rgb(224,66,35)" fg:x="12319" fg:w="291"/><text x="8.4569%" y="687.50"></text></g><g><title>__rg_alloc (291 samples, 0.19%)</title><rect x="8.2069%" y="661" width="0.1939%" height="15" fill="rgb(221,13,50)" fg:x="12319" fg:w="291"/><text x="8.4569%" y="671.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (291 samples, 0.19%)</title><rect x="8.2069%" y="645" width="0.1939%" height="15" fill="rgb(236,68,49)" fg:x="12319" fg:w="291"/><text x="8.4569%" y="655.50"></text></g><g><title>sn_rust_alloc (291 samples, 0.19%)</title><rect x="8.2069%" y="629" width="0.1939%" height="15" fill="rgb(229,146,28)" fg:x="12319" fg:w="291"/><text x="8.4569%" y="639.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (392 samples, 0.26%)</title><rect x="8.1663%" y="821" width="0.2612%" height="15" fill="rgb(225,31,38)" fg:x="12258" fg:w="392"/><text x="8.4163%" y="831.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (392 samples, 0.26%)</title><rect x="8.1663%" y="805" width="0.2612%" height="15" fill="rgb(250,208,3)" fg:x="12258" fg:w="392"/><text x="8.4163%" y="815.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (392 samples, 0.26%)</title><rect x="8.1663%" y="789" width="0.2612%" height="15" fill="rgb(246,54,23)" fg:x="12258" fg:w="392"/><text x="8.4163%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (40 samples, 0.03%)</title><rect x="8.4008%" y="773" width="0.0266%" height="15" fill="rgb(243,76,11)" fg:x="12610" fg:w="40"/><text x="8.6508%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (28 samples, 0.02%)</title><rect x="8.4088%" y="757" width="0.0187%" height="15" fill="rgb(245,21,50)" fg:x="12622" fg:w="28"/><text x="8.6588%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (28 samples, 0.02%)</title><rect x="8.4088%" y="741" width="0.0187%" height="15" fill="rgb(228,9,43)" fg:x="12622" fg:w="28"/><text x="8.6588%" y="751.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (28 samples, 0.02%)</title><rect x="8.4088%" y="725" width="0.0187%" height="15" fill="rgb(208,100,47)" fg:x="12622" fg:w="28"/><text x="8.6588%" y="735.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (28 samples, 0.02%)</title><rect x="8.4088%" y="709" width="0.0187%" height="15" fill="rgb(232,26,8)" fg:x="12622" fg:w="28"/><text x="8.6588%" y="719.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (428 samples, 0.29%)</title><rect x="8.1663%" y="837" width="0.2851%" height="15" fill="rgb(216,166,38)" fg:x="12258" fg:w="428"/><text x="8.4163%" y="847.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (36 samples, 0.02%)</title><rect x="8.4274%" y="821" width="0.0240%" height="15" fill="rgb(251,202,51)" fg:x="12650" fg:w="36"/><text x="8.6774%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (23 samples, 0.02%)</title><rect x="8.4361%" y="805" width="0.0153%" height="15" fill="rgb(254,216,34)" fg:x="12663" fg:w="23"/><text x="8.6861%" y="815.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (23 samples, 0.02%)</title><rect x="8.4361%" y="789" width="0.0153%" height="15" fill="rgb(251,32,27)" fg:x="12663" fg:w="23"/><text x="8.6861%" y="799.50"></text></g><g><title>&lt;tremor_pipeline::event::Event as core::default::Default&gt;::default (1,335 samples, 0.89%)</title><rect x="8.0077%" y="917" width="0.8894%" height="15" fill="rgb(208,127,28)" fg:x="12020" fg:w="1335"/><text x="8.2577%" y="927.50"></text></g><g><title>&lt;tremor_script::srs::EventPayload as core::default::Default&gt;::default (1,183 samples, 0.79%)</title><rect x="8.1090%" y="901" width="0.7881%" height="15" fill="rgb(224,137,22)" fg:x="12172" fg:w="1183"/><text x="8.3590%" y="911.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (1,183 samples, 0.79%)</title><rect x="8.1090%" y="885" width="0.7881%" height="15" fill="rgb(254,70,32)" fg:x="12172" fg:w="1183"/><text x="8.3590%" y="895.50"></text></g><g><title>value_trait::Builder::object (1,097 samples, 0.73%)</title><rect x="8.1663%" y="869" width="0.7308%" height="15" fill="rgb(229,75,37)" fg:x="12258" fg:w="1097"/><text x="8.4163%" y="879.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (1,097 samples, 0.73%)</title><rect x="8.1663%" y="853" width="0.7308%" height="15" fill="rgb(252,64,23)" fg:x="12258" fg:w="1097"/><text x="8.4163%" y="863.50"></text></g><g><title>tremor_value::value::Value::Object (669 samples, 0.45%)</title><rect x="8.4514%" y="837" width="0.4457%" height="15" fill="rgb(232,162,48)" fg:x="12686" fg:w="669"/><text x="8.7014%" y="847.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (19 samples, 0.01%)</title><rect x="8.8971%" y="901" width="0.0127%" height="15" fill="rgb(246,160,12)" fg:x="13355" fg:w="19"/><text x="9.1471%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (21 samples, 0.01%)</title><rect x="8.9098%" y="901" width="0.0140%" height="15" fill="rgb(247,166,0)" fg:x="13374" fg:w="21"/><text x="9.1598%" y="911.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (21 samples, 0.01%)</title><rect x="8.9098%" y="885" width="0.0140%" height="15" fill="rgb(249,219,21)" fg:x="13374" fg:w="21"/><text x="9.1598%" y="895.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (21 samples, 0.01%)</title><rect x="8.9098%" y="869" width="0.0140%" height="15" fill="rgb(205,209,3)" fg:x="13374" fg:w="21"/><text x="9.1598%" y="879.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (18 samples, 0.01%)</title><rect x="8.9118%" y="853" width="0.0120%" height="15" fill="rgb(243,44,1)" fg:x="13377" fg:w="18"/><text x="9.1618%" y="863.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (1,394 samples, 0.93%)</title><rect x="8.0077%" y="933" width="0.9287%" height="15" fill="rgb(206,159,16)" fg:x="12020" fg:w="1394"/><text x="8.2577%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (59 samples, 0.04%)</title><rect x="8.8971%" y="917" width="0.0393%" height="15" fill="rgb(244,77,30)" fg:x="13355" fg:w="59"/><text x="9.1471%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (19 samples, 0.01%)</title><rect x="8.9238%" y="901" width="0.0127%" height="15" fill="rgb(218,69,12)" fg:x="13395" fg:w="19"/><text x="9.1738%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (19 samples, 0.01%)</title><rect x="8.9238%" y="885" width="0.0127%" height="15" fill="rgb(212,87,7)" fg:x="13395" fg:w="19"/><text x="9.1738%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (19 samples, 0.01%)</title><rect x="8.9238%" y="869" width="0.0127%" height="15" fill="rgb(245,114,25)" fg:x="13395" fg:w="19"/><text x="9.1738%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (19 samples, 0.01%)</title><rect x="8.9238%" y="853" width="0.0127%" height="15" fill="rgb(210,61,42)" fg:x="13395" fg:w="19"/><text x="9.1738%" y="863.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (19 samples, 0.01%)</title><rect x="8.9238%" y="837" width="0.0127%" height="15" fill="rgb(211,52,33)" fg:x="13395" fg:w="19"/><text x="9.1738%" y="847.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (19 samples, 0.01%)</title><rect x="8.9238%" y="821" width="0.0127%" height="15" fill="rgb(234,58,33)" fg:x="13395" fg:w="19"/><text x="9.1738%" y="831.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (110 samples, 0.07%)</title><rect x="9.0956%" y="917" width="0.0733%" height="15" fill="rgb(220,115,36)" fg:x="13653" fg:w="110"/><text x="9.3456%" y="927.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (31 samples, 0.02%)</title><rect x="9.1922%" y="773" width="0.0207%" height="15" fill="rgb(243,153,54)" fg:x="13798" fg:w="31"/><text x="9.4422%" y="783.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::new (67 samples, 0.04%)</title><rect x="9.1689%" y="917" width="0.0446%" height="15" fill="rgb(251,47,18)" fg:x="13763" fg:w="67"/><text x="9.4189%" y="927.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (66 samples, 0.04%)</title><rect x="9.1696%" y="901" width="0.0440%" height="15" fill="rgb(242,102,42)" fg:x="13764" fg:w="66"/><text x="9.4196%" y="911.50"></text></g><g><title>alloc::alloc::exchange_malloc (58 samples, 0.04%)</title><rect x="9.1749%" y="885" width="0.0386%" height="15" fill="rgb(234,31,38)" fg:x="13772" fg:w="58"/><text x="9.4249%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (58 samples, 0.04%)</title><rect x="9.1749%" y="869" width="0.0386%" height="15" fill="rgb(221,117,51)" fg:x="13772" fg:w="58"/><text x="9.4249%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (58 samples, 0.04%)</title><rect x="9.1749%" y="853" width="0.0386%" height="15" fill="rgb(212,20,18)" fg:x="13772" fg:w="58"/><text x="9.4249%" y="863.50"></text></g><g><title>alloc::alloc::alloc (58 samples, 0.04%)</title><rect x="9.1749%" y="837" width="0.0386%" height="15" fill="rgb(245,133,36)" fg:x="13772" fg:w="58"/><text x="9.4249%" y="847.50"></text></g><g><title>__rg_alloc (58 samples, 0.04%)</title><rect x="9.1749%" y="821" width="0.0386%" height="15" fill="rgb(212,6,19)" fg:x="13772" fg:w="58"/><text x="9.4249%" y="831.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (58 samples, 0.04%)</title><rect x="9.1749%" y="805" width="0.0386%" height="15" fill="rgb(218,1,36)" fg:x="13772" fg:w="58"/><text x="9.4249%" y="815.50"></text></g><g><title>sn_rust_alloc (48 samples, 0.03%)</title><rect x="9.1816%" y="789" width="0.0320%" height="15" fill="rgb(246,84,54)" fg:x="13782" fg:w="48"/><text x="9.4316%" y="799.50"></text></g><g><title>alloc::alloc::exchange_malloc (33 samples, 0.02%)</title><rect x="9.2136%" y="917" width="0.0220%" height="15" fill="rgb(242,110,6)" fg:x="13830" fg:w="33"/><text x="9.4636%" y="927.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (33 samples, 0.02%)</title><rect x="9.2136%" y="901" width="0.0220%" height="15" fill="rgb(214,47,5)" fg:x="13830" fg:w="33"/><text x="9.4636%" y="911.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (33 samples, 0.02%)</title><rect x="9.2136%" y="885" width="0.0220%" height="15" fill="rgb(218,159,25)" fg:x="13830" fg:w="33"/><text x="9.4636%" y="895.50"></text></g><g><title>alloc::alloc::alloc (27 samples, 0.02%)</title><rect x="9.2175%" y="869" width="0.0180%" height="15" fill="rgb(215,211,28)" fg:x="13836" fg:w="27"/><text x="9.4675%" y="879.50"></text></g><g><title>__rg_alloc (27 samples, 0.02%)</title><rect x="9.2175%" y="853" width="0.0180%" height="15" fill="rgb(238,59,32)" fg:x="13836" fg:w="27"/><text x="9.4675%" y="863.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (27 samples, 0.02%)</title><rect x="9.2175%" y="837" width="0.0180%" height="15" fill="rgb(226,82,3)" fg:x="13836" fg:w="27"/><text x="9.4675%" y="847.50"></text></g><g><title>sn_rust_alloc (18 samples, 0.01%)</title><rect x="9.2235%" y="821" width="0.0120%" height="15" fill="rgb(240,164,32)" fg:x="13845" fg:w="18"/><text x="9.4735%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::capacity (65 samples, 0.04%)</title><rect x="9.4087%" y="885" width="0.0433%" height="15" fill="rgb(232,46,7)" fg:x="14123" fg:w="65"/><text x="9.6587%" y="895.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (22 samples, 0.01%)</title><rect x="9.4560%" y="885" width="0.0147%" height="15" fill="rgb(229,129,53)" fg:x="14194" fg:w="22"/><text x="9.7060%" y="895.50"></text></g><g><title>sn_rust_dealloc (27 samples, 0.02%)</title><rect x="9.7012%" y="725" width="0.0180%" height="15" fill="rgb(234,188,29)" fg:x="14562" fg:w="27"/><text x="9.9512%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (69 samples, 0.05%)</title><rect x="9.6979%" y="789" width="0.0460%" height="15" fill="rgb(246,141,4)" fg:x="14557" fg:w="69"/><text x="9.9479%" y="799.50"></text></g><g><title>alloc::alloc::dealloc (69 samples, 0.05%)</title><rect x="9.6979%" y="773" width="0.0460%" height="15" fill="rgb(229,23,39)" fg:x="14557" fg:w="69"/><text x="9.9479%" y="783.50"></text></g><g><title>__rg_dealloc (69 samples, 0.05%)</title><rect x="9.6979%" y="757" width="0.0460%" height="15" fill="rgb(206,12,3)" fg:x="14557" fg:w="69"/><text x="9.9479%" y="767.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (69 samples, 0.05%)</title><rect x="9.6979%" y="741" width="0.0460%" height="15" fill="rgb(252,226,20)" fg:x="14557" fg:w="69"/><text x="9.9479%" y="751.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (37 samples, 0.02%)</title><rect x="9.7192%" y="725" width="0.0246%" height="15" fill="rgb(216,123,35)" fg:x="14589" fg:w="37"/><text x="9.9692%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::ValueDeserializer&gt; (82 samples, 0.05%)</title><rect x="9.6952%" y="869" width="0.0546%" height="15" fill="rgb(212,68,40)" fg:x="14553" fg:w="82"/><text x="9.9452%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;simd_json::Deserializer&gt; (82 samples, 0.05%)</title><rect x="9.6952%" y="853" width="0.0546%" height="15" fill="rgb(254,125,32)" fg:x="14553" fg:w="82"/><text x="9.9452%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;simd_json::value::tape::Node&gt;&gt; (82 samples, 0.05%)</title><rect x="9.6952%" y="837" width="0.0546%" height="15" fill="rgb(253,97,22)" fg:x="14553" fg:w="82"/><text x="9.9452%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simd_json::value::tape::Node&gt;&gt; (82 samples, 0.05%)</title><rect x="9.6952%" y="821" width="0.0546%" height="15" fill="rgb(241,101,14)" fg:x="14553" fg:w="82"/><text x="9.9452%" y="831.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (82 samples, 0.05%)</title><rect x="9.6952%" y="805" width="0.0546%" height="15" fill="rgb(238,103,29)" fg:x="14553" fg:w="82"/><text x="9.9452%" y="815.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::clone_from_slice (257 samples, 0.17%)</title><rect x="9.8151%" y="853" width="0.1712%" height="15" fill="rgb(233,195,47)" fg:x="14733" fg:w="257"/><text x="10.0651%" y="863.50"></text></g><g><title>&lt;[T] as core::slice::CloneFromSpec&lt;T&gt;&gt;::spec_clone_from (257 samples, 0.17%)</title><rect x="9.8151%" y="837" width="0.1712%" height="15" fill="rgb(246,218,30)" fg:x="14733" fg:w="257"/><text x="10.0651%" y="847.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (257 samples, 0.17%)</title><rect x="9.8151%" y="821" width="0.1712%" height="15" fill="rgb(219,145,47)" fg:x="14733" fg:w="257"/><text x="10.0651%" y="831.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (257 samples, 0.17%)</title><rect x="9.8151%" y="805" width="0.1712%" height="15" fill="rgb(243,12,26)" fg:x="14733" fg:w="257"/><text x="10.0651%" y="815.50"></text></g><g><title>[libc-2.31.so] (246 samples, 0.16%)</title><rect x="9.8225%" y="789" width="0.1639%" height="15" fill="rgb(214,87,16)" fg:x="14744" fg:w="246"/><text x="10.0725%" y="799.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_and_si256 (48 samples, 0.03%)</title><rect x="10.3661%" y="821" width="0.0320%" height="15" fill="rgb(208,99,42)" fg:x="15560" fg:w="48"/><text x="10.6161%" y="831.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_cmpeq_epi8 (42 samples, 0.03%)</title><rect x="10.3981%" y="821" width="0.0280%" height="15" fill="rgb(253,99,2)" fg:x="15608" fg:w="42"/><text x="10.6481%" y="831.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (107 samples, 0.07%)</title><rect x="10.4260%" y="821" width="0.0713%" height="15" fill="rgb(220,168,23)" fg:x="15650" fg:w="107"/><text x="10.6760%" y="831.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (135 samples, 0.09%)</title><rect x="10.4973%" y="821" width="0.0899%" height="15" fill="rgb(242,38,24)" fg:x="15757" fg:w="135"/><text x="10.7473%" y="831.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::find_whitespace_and_structurals (477 samples, 0.32%)</title><rect x="10.2881%" y="837" width="0.3178%" height="15" fill="rgb(225,182,9)" fg:x="15443" fg:w="477"/><text x="10.5381%" y="847.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_srli_epi32 (28 samples, 0.02%)</title><rect x="10.5873%" y="821" width="0.0187%" height="15" fill="rgb(243,178,37)" fg:x="15892" fg:w="28"/><text x="10.8373%" y="831.50"></text></g><g><title>alloc::raw_vec::finish_grow (38 samples, 0.03%)</title><rect x="11.3327%" y="757" width="0.0253%" height="15" fill="rgb(232,139,19)" fg:x="17011" fg:w="38"/><text x="11.5827%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (151 samples, 0.10%)</title><rect x="11.2741%" y="821" width="0.1006%" height="15" fill="rgb(225,201,24)" fg:x="16923" fg:w="151"/><text x="11.5241%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (151 samples, 0.10%)</title><rect x="11.2741%" y="805" width="0.1006%" height="15" fill="rgb(221,47,46)" fg:x="16923" fg:w="151"/><text x="11.5241%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (92 samples, 0.06%)</title><rect x="11.3134%" y="789" width="0.0613%" height="15" fill="rgb(249,23,13)" fg:x="16982" fg:w="92"/><text x="11.5634%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (92 samples, 0.06%)</title><rect x="11.3134%" y="773" width="0.0613%" height="15" fill="rgb(219,9,5)" fg:x="16982" fg:w="92"/><text x="11.5634%" y="783.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (36 samples, 0.02%)</title><rect x="11.3780%" y="821" width="0.0240%" height="15" fill="rgb(254,171,16)" fg:x="17079" fg:w="36"/><text x="11.6280%" y="831.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_set_epi32 (499 samples, 0.33%)</title><rect x="11.4020%" y="821" width="0.3324%" height="15" fill="rgb(230,171,20)" fg:x="17115" fg:w="499"/><text x="11.6520%" y="831.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_setr_epi32 (499 samples, 0.33%)</title><rect x="11.4020%" y="805" width="0.3324%" height="15" fill="rgb(210,71,41)" fg:x="17115" fg:w="499"/><text x="11.6520%" y="815.50"></text></g><g><title>core::core_arch::simd::i32x8::new (499 samples, 0.33%)</title><rect x="11.4020%" y="789" width="0.3324%" height="15" fill="rgb(206,173,20)" fg:x="17115" fg:w="499"/><text x="11.6520%" y="799.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_storeu_si256 (43 samples, 0.03%)</title><rect x="11.7345%" y="821" width="0.0286%" height="15" fill="rgb(233,88,34)" fg:x="17614" fg:w="43"/><text x="11.9845%" y="831.50"></text></g><g><title>core::num::&lt;impl u64&gt;::count_ones (296 samples, 0.20%)</title><rect x="11.7631%" y="821" width="0.1972%" height="15" fill="rgb(223,209,46)" fg:x="17657" fg:w="296"/><text x="12.0131%" y="831.50"></text></g><g><title>core::num::&lt;impl u64&gt;::trailing_zeros (284 samples, 0.19%)</title><rect x="11.9603%" y="821" width="0.1892%" height="15" fill="rgb(250,43,18)" fg:x="17953" fg:w="284"/><text x="12.2103%" y="831.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::flatten_bits (2,509 samples, 1.67%)</title><rect x="10.6059%" y="837" width="1.6715%" height="15" fill="rgb(208,13,10)" fg:x="15920" fg:w="2509"/><text x="10.8559%" y="847.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_sub (192 samples, 0.13%)</title><rect x="12.1495%" y="821" width="0.1279%" height="15" fill="rgb(212,200,36)" fg:x="18237" fg:w="192"/><text x="12.3995%" y="831.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::Utf8CheckAlgorithm&lt;simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;&gt;::check_incomplete_pending (21 samples, 0.01%)</title><rect x="12.3001%" y="805" width="0.0140%" height="15" fill="rgb(225,90,30)" fg:x="18463" fg:w="21"/><text x="12.5501%" y="815.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::or (21 samples, 0.01%)</title><rect x="12.3001%" y="789" width="0.0140%" height="15" fill="rgb(236,182,39)" fg:x="18463" fg:w="21"/><text x="12.5501%" y="799.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (21 samples, 0.01%)</title><rect x="12.3001%" y="773" width="0.0140%" height="15" fill="rgb(212,144,35)" fg:x="18463" fg:w="21"/><text x="12.5501%" y="783.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::is_ascii (89 samples, 0.06%)</title><rect x="12.3140%" y="789" width="0.0593%" height="15" fill="rgb(228,63,44)" fg:x="18484" fg:w="89"/><text x="12.5640%" y="799.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::Utf8CheckAlgorithm&lt;simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;&gt;::check_utf8 (181 samples, 0.12%)</title><rect x="12.2821%" y="821" width="0.1206%" height="15" fill="rgb(228,109,6)" fg:x="18436" fg:w="181"/><text x="12.5321%" y="831.50"></text></g><g><title>simdutf8::implementation::x86::avx2::SimdInput::is_ascii (133 samples, 0.09%)</title><rect x="12.3140%" y="805" width="0.0886%" height="15" fill="rgb(238,117,24)" fg:x="18484" fg:w="133"/><text x="12.5640%" y="815.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::or (44 samples, 0.03%)</title><rect x="12.3733%" y="789" width="0.0293%" height="15" fill="rgb(242,26,26)" fg:x="18573" fg:w="44"/><text x="12.6233%" y="799.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (44 samples, 0.03%)</title><rect x="12.3733%" y="773" width="0.0293%" height="15" fill="rgb(221,92,48)" fg:x="18573" fg:w="44"/><text x="12.6233%" y="783.50"></text></g><g><title>&lt;simdutf8::implementation::x86::avx2::ChunkedUtf8ValidatorImp as simdutf8::basic::imp::ChunkedUtf8Validator&gt;::update_from_chunks (339 samples, 0.23%)</title><rect x="12.2821%" y="837" width="0.2258%" height="15" fill="rgb(209,209,32)" fg:x="18436" fg:w="339"/><text x="12.5321%" y="847.50"></text></g><g><title>simdutf8::implementation::x86::avx2::SimdInput::new (158 samples, 0.11%)</title><rect x="12.4027%" y="821" width="0.1053%" height="15" fill="rgb(221,70,22)" fg:x="18617" fg:w="158"/><text x="12.6527%" y="831.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::load_from (158 samples, 0.11%)</title><rect x="12.4027%" y="805" width="0.1053%" height="15" fill="rgb(248,145,5)" fg:x="18617" fg:w="158"/><text x="12.6527%" y="815.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_loadu_si256 (158 samples, 0.11%)</title><rect x="12.4027%" y="789" width="0.1053%" height="15" fill="rgb(226,116,26)" fg:x="18617" fg:w="158"/><text x="12.6527%" y="799.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (158 samples, 0.11%)</title><rect x="12.4027%" y="773" width="0.1053%" height="15" fill="rgb(244,5,17)" fg:x="18617" fg:w="158"/><text x="12.6527%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (18 samples, 0.01%)</title><rect x="12.5079%" y="837" width="0.0120%" height="15" fill="rgb(252,159,33)" fg:x="18775" fg:w="18"/><text x="12.7579%" y="847.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (277 samples, 0.18%)</title><rect x="12.6791%" y="677" width="0.1845%" height="15" fill="rgb(206,71,0)" fg:x="19032" fg:w="277"/><text x="12.9291%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (534 samples, 0.36%)</title><rect x="12.5199%" y="837" width="0.3558%" height="15" fill="rgb(233,118,54)" fg:x="18793" fg:w="534"/><text x="12.7699%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (534 samples, 0.36%)</title><rect x="12.5199%" y="821" width="0.3558%" height="15" fill="rgb(234,83,48)" fg:x="18793" fg:w="534"/><text x="12.7699%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (523 samples, 0.35%)</title><rect x="12.5272%" y="805" width="0.3484%" height="15" fill="rgb(228,3,54)" fg:x="18804" fg:w="523"/><text x="12.7772%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (523 samples, 0.35%)</title><rect x="12.5272%" y="789" width="0.3484%" height="15" fill="rgb(226,155,13)" fg:x="18804" fg:w="523"/><text x="12.7772%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (523 samples, 0.35%)</title><rect x="12.5272%" y="773" width="0.3484%" height="15" fill="rgb(241,28,37)" fg:x="18804" fg:w="523"/><text x="12.7772%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (523 samples, 0.35%)</title><rect x="12.5272%" y="757" width="0.3484%" height="15" fill="rgb(233,93,10)" fg:x="18804" fg:w="523"/><text x="12.7772%" y="767.50"></text></g><g><title>alloc::alloc::alloc (521 samples, 0.35%)</title><rect x="12.5286%" y="741" width="0.3471%" height="15" fill="rgb(225,113,19)" fg:x="18806" fg:w="521"/><text x="12.7786%" y="751.50"></text></g><g><title>__rg_alloc (521 samples, 0.35%)</title><rect x="12.5286%" y="725" width="0.3471%" height="15" fill="rgb(241,2,18)" fg:x="18806" fg:w="521"/><text x="12.7786%" y="735.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (521 samples, 0.35%)</title><rect x="12.5286%" y="709" width="0.3471%" height="15" fill="rgb(228,207,21)" fg:x="18806" fg:w="521"/><text x="12.7786%" y="719.50"></text></g><g><title>sn_rust_alloc (520 samples, 0.35%)</title><rect x="12.5292%" y="693" width="0.3464%" height="15" fill="rgb(213,211,35)" fg:x="18807" fg:w="520"/><text x="12.7792%" y="703.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from (119 samples, 0.08%)</title><rect x="12.8783%" y="837" width="0.0793%" height="15" fill="rgb(209,83,10)" fg:x="19331" fg:w="119"/><text x="13.1283%" y="847.50"></text></g><g><title>core::intrinsics::copy (119 samples, 0.08%)</title><rect x="12.8783%" y="821" width="0.0793%" height="15" fill="rgb(209,164,1)" fg:x="19331" fg:w="119"/><text x="13.1283%" y="831.50"></text></g><g><title>[libc-2.31.so] (99 samples, 0.07%)</title><rect x="12.8916%" y="805" width="0.0660%" height="15" fill="rgb(213,184,43)" fg:x="19351" fg:w="99"/><text x="13.1416%" y="815.50"></text></g><g><title>simd_json::Stage1Parse::finalize_structurals (302 samples, 0.20%)</title><rect x="12.9576%" y="837" width="0.2012%" height="15" fill="rgb(231,61,34)" fg:x="19450" fg:w="302"/><text x="13.2076%" y="847.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::cmp_mask_against_input (110 samples, 0.07%)</title><rect x="13.3547%" y="821" width="0.0733%" height="15" fill="rgb(235,75,3)" fg:x="20046" fg:w="110"/><text x="13.6047%" y="831.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (80 samples, 0.05%)</title><rect x="13.3746%" y="805" width="0.0533%" height="15" fill="rgb(220,106,47)" fg:x="20076" fg:w="80"/><text x="13.6246%" y="815.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (19 samples, 0.01%)</title><rect x="13.4279%" y="821" width="0.0127%" height="15" fill="rgb(210,196,33)" fg:x="20156" fg:w="19"/><text x="13.6779%" y="831.50"></text></g><g><title>simd_json::Stage1Parse::find_odd_backslash_sequences (447 samples, 0.30%)</title><rect x="13.1588%" y="837" width="0.2978%" height="15" fill="rgb(229,154,42)" fg:x="19752" fg:w="447"/><text x="13.4088%" y="847.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (24 samples, 0.02%)</title><rect x="13.4406%" y="821" width="0.0160%" height="15" fill="rgb(228,114,26)" fg:x="20175" fg:w="24"/><text x="13.6906%" y="831.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::cmp_mask_against_input (104 samples, 0.07%)</title><rect x="13.6458%" y="821" width="0.0693%" height="15" fill="rgb(208,144,1)" fg:x="20483" fg:w="104"/><text x="13.8958%" y="831.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (80 samples, 0.05%)</title><rect x="13.6618%" y="805" width="0.0533%" height="15" fill="rgb(239,112,37)" fg:x="20507" fg:w="80"/><text x="13.9118%" y="815.50"></text></g><g><title>core::core_arch::x86::pclmulqdq::_mm_clmulepi64_si128 (276 samples, 0.18%)</title><rect x="13.8117%" y="805" width="0.1839%" height="15" fill="rgb(210,96,50)" fg:x="20732" fg:w="276"/><text x="14.0617%" y="815.50"></text></g><g><title>simd_json::Deserializer::find_structural_bits (6,030 samples, 4.02%)</title><rect x="9.9917%" y="853" width="4.0172%" height="15" fill="rgb(222,178,2)" fg:x="14998" fg:w="6030"/><text x="10.2417%" y="863.50">simd..</text></g><g><title>simd_json::Stage1Parse::find_quote_mask_and_bits (829 samples, 0.55%)</title><rect x="13.4566%" y="837" width="0.5523%" height="15" fill="rgb(226,74,18)" fg:x="20199" fg:w="829"/><text x="13.7066%" y="847.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::compute_quote_mask (441 samples, 0.29%)</title><rect x="13.7151%" y="821" width="0.2938%" height="15" fill="rgb(225,67,54)" fg:x="20587" fg:w="441"/><text x="13.9651%" y="831.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi64x (20 samples, 0.01%)</title><rect x="13.9955%" y="805" width="0.0133%" height="15" fill="rgb(251,92,32)" fg:x="21008" fg:w="20"/><text x="14.2455%" y="815.50"></text></g><g><title>core::core_arch::simd::i64x2::new (20 samples, 0.01%)</title><rect x="13.9955%" y="789" width="0.0133%" height="15" fill="rgb(228,149,22)" fg:x="21008" fg:w="20"/><text x="14.2455%" y="799.50"></text></g><g><title>sn_rust_dealloc (111 samples, 0.07%)</title><rect x="14.0142%" y="853" width="0.0739%" height="15" fill="rgb(243,54,13)" fg:x="21036" fg:w="111"/><text x="14.2642%" y="863.50"></text></g><g><title>simd_json::Deserializer::from_slice_with_buffers (6,532 samples, 4.35%)</title><rect x="9.7498%" y="869" width="4.3516%" height="15" fill="rgb(243,180,28)" fg:x="14635" fg:w="6532"/><text x="9.9998%" y="879.50">simd_..</text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (20 samples, 0.01%)</title><rect x="14.0881%" y="853" width="0.0133%" height="15" fill="rgb(208,167,24)" fg:x="21147" fg:w="20"/><text x="14.3381%" y="863.50"></text></g><g><title>simd_json::Deserializer::next_ (117 samples, 0.08%)</title><rect x="14.1068%" y="853" width="0.0779%" height="15" fill="rgb(245,73,45)" fg:x="21175" fg:w="117"/><text x="14.3568%" y="863.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (81 samples, 0.05%)</title><rect x="14.2400%" y="837" width="0.0540%" height="15" fill="rgb(237,203,48)" fg:x="21375" fg:w="81"/><text x="14.4900%" y="847.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt; as core::convert::From&lt;&amp;str&gt;&gt;::from (81 samples, 0.05%)</title><rect x="14.2400%" y="821" width="0.0540%" height="15" fill="rgb(211,197,16)" fg:x="21375" fg:w="81"/><text x="14.4900%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (80 samples, 0.05%)</title><rect x="19.3651%" y="805" width="0.0533%" height="15" fill="rgb(243,99,51)" fg:x="29068" fg:w="80"/><text x="19.6151%" y="815.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::insert_nocheck (7,763 samples, 5.17%)</title><rect x="14.2940%" y="837" width="5.1717%" height="15" fill="rgb(215,123,29)" fg:x="21456" fg:w="7763"/><text x="14.5440%" y="847.50">abi_st..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_nocheck_elem (2,942 samples, 1.96%)</title><rect x="17.5057%" y="821" width="1.9600%" height="15" fill="rgb(239,186,37)" fg:x="26277" fg:w="2942"/><text x="17.7557%" y="831.50">a..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_value::value::Value&gt;&gt; (71 samples, 0.05%)</title><rect x="19.4184%" y="805" width="0.0473%" height="15" fill="rgb(252,136,39)" fg:x="29148" fg:w="71"/><text x="19.6684%" y="815.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (112 samples, 0.07%)</title><rect x="19.5423%" y="613" width="0.0746%" height="15" fill="rgb(223,213,32)" fg:x="29334" fg:w="112"/><text x="19.7923%" y="623.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (238 samples, 0.16%)</title><rect x="19.4790%" y="773" width="0.1586%" height="15" fill="rgb(233,115,5)" fg:x="29239" fg:w="238"/><text x="19.7290%" y="783.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (238 samples, 0.16%)</title><rect x="19.4790%" y="757" width="0.1586%" height="15" fill="rgb(207,226,44)" fg:x="29239" fg:w="238"/><text x="19.7290%" y="767.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (227 samples, 0.15%)</title><rect x="19.4864%" y="741" width="0.1512%" height="15" fill="rgb(208,126,0)" fg:x="29250" fg:w="227"/><text x="19.7364%" y="751.50"></text></g><g><title>alloc::alloc::exchange_malloc (214 samples, 0.14%)</title><rect x="19.4950%" y="725" width="0.1426%" height="15" fill="rgb(244,66,21)" fg:x="29263" fg:w="214"/><text x="19.7450%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (214 samples, 0.14%)</title><rect x="19.4950%" y="709" width="0.1426%" height="15" fill="rgb(222,97,12)" fg:x="29263" fg:w="214"/><text x="19.7450%" y="719.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (214 samples, 0.14%)</title><rect x="19.4950%" y="693" width="0.1426%" height="15" fill="rgb(219,213,19)" fg:x="29263" fg:w="214"/><text x="19.7450%" y="703.50"></text></g><g><title>alloc::alloc::alloc (212 samples, 0.14%)</title><rect x="19.4964%" y="677" width="0.1412%" height="15" fill="rgb(252,169,30)" fg:x="29265" fg:w="212"/><text x="19.7464%" y="687.50"></text></g><g><title>__rg_alloc (212 samples, 0.14%)</title><rect x="19.4964%" y="661" width="0.1412%" height="15" fill="rgb(206,32,51)" fg:x="29265" fg:w="212"/><text x="19.7464%" y="671.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (212 samples, 0.14%)</title><rect x="19.4964%" y="645" width="0.1412%" height="15" fill="rgb(250,172,42)" fg:x="29265" fg:w="212"/><text x="19.7464%" y="655.50"></text></g><g><title>sn_rust_alloc (210 samples, 0.14%)</title><rect x="19.4977%" y="629" width="0.1399%" height="15" fill="rgb(209,34,43)" fg:x="29267" fg:w="210"/><text x="19.7477%" y="639.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (21 samples, 0.01%)</title><rect x="19.6236%" y="613" width="0.0140%" height="15" fill="rgb(223,11,35)" fg:x="29456" fg:w="21"/><text x="19.8736%" y="623.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (280 samples, 0.19%)</title><rect x="19.4657%" y="821" width="0.1865%" height="15" fill="rgb(251,219,26)" fg:x="29219" fg:w="280"/><text x="19.7157%" y="831.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (280 samples, 0.19%)</title><rect x="19.4657%" y="805" width="0.1865%" height="15" fill="rgb(231,119,3)" fg:x="29219" fg:w="280"/><text x="19.7157%" y="815.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (280 samples, 0.19%)</title><rect x="19.4657%" y="789" width="0.1865%" height="15" fill="rgb(216,97,11)" fg:x="29219" fg:w="280"/><text x="19.7157%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (22 samples, 0.01%)</title><rect x="19.6376%" y="773" width="0.0147%" height="15" fill="rgb(223,59,9)" fg:x="29477" fg:w="22"/><text x="19.8876%" y="783.50"></text></g><g><title>core::mem::swap (660 samples, 0.44%)</title><rect x="19.7229%" y="645" width="0.4397%" height="15" fill="rgb(233,93,31)" fg:x="29605" fg:w="660"/><text x="19.9729%" y="655.50"></text></g><g><title>core::mem::swap_simple (660 samples, 0.44%)</title><rect x="19.7229%" y="629" width="0.4397%" height="15" fill="rgb(239,81,33)" fg:x="29605" fg:w="660"/><text x="19.9729%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (721 samples, 0.48%)</title><rect x="19.6922%" y="661" width="0.4803%" height="15" fill="rgb(213,120,34)" fg:x="29559" fg:w="721"/><text x="19.9422%" y="671.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (1,075 samples, 0.72%)</title><rect x="19.4657%" y="837" width="0.7162%" height="15" fill="rgb(243,49,53)" fg:x="29219" fg:w="1075"/><text x="19.7157%" y="847.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (795 samples, 0.53%)</title><rect x="19.6522%" y="821" width="0.5296%" height="15" fill="rgb(247,216,33)" fg:x="29499" fg:w="795"/><text x="19.9022%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (784 samples, 0.52%)</title><rect x="19.6596%" y="805" width="0.5223%" height="15" fill="rgb(226,26,14)" fg:x="29510" fg:w="784"/><text x="19.9096%" y="815.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (784 samples, 0.52%)</title><rect x="19.6596%" y="789" width="0.5223%" height="15" fill="rgb(215,49,53)" fg:x="29510" fg:w="784"/><text x="19.9096%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (783 samples, 0.52%)</title><rect x="19.6602%" y="773" width="0.5216%" height="15" fill="rgb(245,162,40)" fg:x="29511" fg:w="783"/><text x="19.9102%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (783 samples, 0.52%)</title><rect x="19.6602%" y="757" width="0.5216%" height="15" fill="rgb(229,68,17)" fg:x="29511" fg:w="783"/><text x="19.9102%" y="767.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (783 samples, 0.52%)</title><rect x="19.6602%" y="741" width="0.5216%" height="15" fill="rgb(213,182,10)" fg:x="29511" fg:w="783"/><text x="19.9102%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (776 samples, 0.52%)</title><rect x="19.6649%" y="725" width="0.5170%" height="15" fill="rgb(245,125,30)" fg:x="29518" fg:w="776"/><text x="19.9149%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (776 samples, 0.52%)</title><rect x="19.6649%" y="709" width="0.5170%" height="15" fill="rgb(232,202,2)" fg:x="29518" fg:w="776"/><text x="19.9149%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (770 samples, 0.51%)</title><rect x="19.6689%" y="693" width="0.5130%" height="15" fill="rgb(237,140,51)" fg:x="29524" fg:w="770"/><text x="19.9189%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (760 samples, 0.51%)</title><rect x="19.6756%" y="677" width="0.5063%" height="15" fill="rgb(236,157,25)" fg:x="29534" fg:w="760"/><text x="19.9256%" y="687.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (81 samples, 0.05%)</title><rect x="20.1819%" y="837" width="0.0540%" height="15" fill="rgb(219,209,0)" fg:x="30294" fg:w="81"/><text x="20.4319%" y="847.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (81 samples, 0.05%)</title><rect x="20.1819%" y="821" width="0.0540%" height="15" fill="rgb(240,116,54)" fg:x="30294" fg:w="81"/><text x="20.4319%" y="831.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (73 samples, 0.05%)</title><rect x="20.1872%" y="805" width="0.0486%" height="15" fill="rgb(216,10,36)" fg:x="30302" fg:w="73"/><text x="20.4372%" y="815.50"></text></g><g><title>simd_json::Deserializer::next_ (221 samples, 0.15%)</title><rect x="20.2358%" y="837" width="0.1472%" height="15" fill="rgb(222,72,44)" fg:x="30375" fg:w="221"/><text x="20.4858%" y="847.50"></text></g><g><title>simd_json::Deserializer::next_ (213 samples, 0.14%)</title><rect x="20.4937%" y="821" width="0.1419%" height="15" fill="rgb(232,159,9)" fg:x="30762" fg:w="213"/><text x="20.7437%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (18 samples, 0.01%)</title><rect x="20.7548%" y="725" width="0.0120%" height="15" fill="rgb(210,39,32)" fg:x="31154" fg:w="18"/><text x="21.0048%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (18 samples, 0.01%)</title><rect x="20.7548%" y="709" width="0.0120%" height="15" fill="rgb(216,194,45)" fg:x="31154" fg:w="18"/><text x="21.0048%" y="719.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::with_capacity (40 samples, 0.03%)</title><rect x="20.7475%" y="805" width="0.0266%" height="15" fill="rgb(218,18,35)" fg:x="31143" fg:w="40"/><text x="20.9975%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (36 samples, 0.02%)</title><rect x="20.7501%" y="789" width="0.0240%" height="15" fill="rgb(207,83,51)" fg:x="31147" fg:w="36"/><text x="21.0001%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (36 samples, 0.02%)</title><rect x="20.7501%" y="773" width="0.0240%" height="15" fill="rgb(225,63,43)" fg:x="31147" fg:w="36"/><text x="21.0001%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (36 samples, 0.02%)</title><rect x="20.7501%" y="757" width="0.0240%" height="15" fill="rgb(207,57,36)" fg:x="31147" fg:w="36"/><text x="21.0001%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (36 samples, 0.02%)</title><rect x="20.7501%" y="741" width="0.0240%" height="15" fill="rgb(216,99,33)" fg:x="31147" fg:w="36"/><text x="21.0001%" y="751.50"></text></g><g><title>core::ptr::write (3,015 samples, 2.01%)</title><rect x="20.7815%" y="805" width="2.0086%" height="15" fill="rgb(225,42,16)" fg:x="31194" fg:w="3015"/><text x="21.0315%" y="815.50">c..</text></g><g><title>tremor_value::value::ValueDeserializer::parse_array (3,321 samples, 2.21%)</title><rect x="20.6356%" y="821" width="2.2125%" height="15" fill="rgb(220,201,45)" fg:x="30975" fg:w="3321"/><text x="20.8856%" y="831.50">t..</text></g><g><title>tremor_value::value::ValueDeserializer::parse (87 samples, 0.06%)</title><rect x="22.7900%" y="805" width="0.0580%" height="15" fill="rgb(225,33,4)" fg:x="34209" fg:w="87"/><text x="23.0400%" y="815.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (3,768 samples, 2.51%)</title><rect x="20.3831%" y="837" width="2.5102%" height="15" fill="rgb(224,33,50)" fg:x="30596" fg:w="3768"/><text x="20.6331%" y="847.50">tr..</text></g><g><title>tremor_value::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for tremor_value::value::Value&gt;::from (68 samples, 0.05%)</title><rect x="22.8480%" y="821" width="0.0453%" height="15" fill="rgb(246,198,51)" fg:x="34296" fg:w="68"/><text x="23.0980%" y="831.50"></text></g><g><title>tremor_value::value::Value::String (68 samples, 0.05%)</title><rect x="22.8480%" y="805" width="0.0453%" height="15" fill="rgb(205,22,4)" fg:x="34296" fg:w="68"/><text x="23.0980%" y="815.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::decode (20,267 samples, 13.50%)</title><rect x="9.3921%" y="901" width="13.5019%" height="15" fill="rgb(206,3,8)" fg:x="14098" fg:w="20267"/><text x="9.6421%" y="911.50">&lt;tremor_runtime::cod..</text></g><g><title>tremor_value::value::parse_to_value_with_buffers (20,149 samples, 13.42%)</title><rect x="9.4707%" y="885" width="13.4233%" height="15" fill="rgb(251,23,15)" fg:x="14216" fg:w="20149"/><text x="9.7207%" y="895.50">tremor_value::value:..</text></g><g><title>tremor_value::value::ValueDeserializer::parse (13,198 samples, 8.79%)</title><rect x="14.1015%" y="869" width="8.7925%" height="15" fill="rgb(252,88,28)" fg:x="21167" fg:w="13198"/><text x="14.3515%" y="879.50">tremor_value..</text></g><g><title>tremor_value::value::ValueDeserializer::parse_map (13,073 samples, 8.71%)</title><rect x="14.1847%" y="853" width="8.7092%" height="15" fill="rgb(212,127,14)" fg:x="21292" fg:w="13073"/><text x="14.4347%" y="863.50">tremor_value..</text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (31 samples, 0.02%)</title><rect x="23.0345%" y="629" width="0.0207%" height="15" fill="rgb(247,145,37)" fg:x="34576" fg:w="31"/><text x="23.2845%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (118 samples, 0.08%)</title><rect x="22.9792%" y="789" width="0.0786%" height="15" fill="rgb(209,117,53)" fg:x="34493" fg:w="118"/><text x="23.2292%" y="799.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (117 samples, 0.08%)</title><rect x="22.9799%" y="773" width="0.0779%" height="15" fill="rgb(212,90,42)" fg:x="34494" fg:w="117"/><text x="23.2299%" y="783.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (117 samples, 0.08%)</title><rect x="22.9799%" y="757" width="0.0779%" height="15" fill="rgb(218,164,37)" fg:x="34494" fg:w="117"/><text x="23.2299%" y="767.50"></text></g><g><title>alloc::alloc::exchange_malloc (106 samples, 0.07%)</title><rect x="22.9872%" y="741" width="0.0706%" height="15" fill="rgb(246,65,34)" fg:x="34505" fg:w="106"/><text x="23.2372%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (100 samples, 0.07%)</title><rect x="22.9912%" y="725" width="0.0666%" height="15" fill="rgb(231,100,33)" fg:x="34511" fg:w="100"/><text x="23.2412%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (100 samples, 0.07%)</title><rect x="22.9912%" y="709" width="0.0666%" height="15" fill="rgb(228,126,14)" fg:x="34511" fg:w="100"/><text x="23.2412%" y="719.50"></text></g><g><title>alloc::alloc::alloc (100 samples, 0.07%)</title><rect x="22.9912%" y="693" width="0.0666%" height="15" fill="rgb(215,173,21)" fg:x="34511" fg:w="100"/><text x="23.2412%" y="703.50"></text></g><g><title>__rg_alloc (100 samples, 0.07%)</title><rect x="22.9912%" y="677" width="0.0666%" height="15" fill="rgb(210,6,40)" fg:x="34511" fg:w="100"/><text x="23.2412%" y="687.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (100 samples, 0.07%)</title><rect x="22.9912%" y="661" width="0.0666%" height="15" fill="rgb(212,48,18)" fg:x="34511" fg:w="100"/><text x="23.2412%" y="671.50"></text></g><g><title>sn_rust_alloc (100 samples, 0.07%)</title><rect x="22.9912%" y="645" width="0.0666%" height="15" fill="rgb(230,214,11)" fg:x="34511" fg:w="100"/><text x="23.2412%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (156 samples, 0.10%)</title><rect x="22.9719%" y="869" width="0.1039%" height="15" fill="rgb(254,105,39)" fg:x="34482" fg:w="156"/><text x="23.2219%" y="879.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (145 samples, 0.10%)</title><rect x="22.9792%" y="853" width="0.0966%" height="15" fill="rgb(245,158,5)" fg:x="34493" fg:w="145"/><text x="23.2292%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (145 samples, 0.10%)</title><rect x="22.9792%" y="837" width="0.0966%" height="15" fill="rgb(249,208,11)" fg:x="34493" fg:w="145"/><text x="23.2292%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (145 samples, 0.10%)</title><rect x="22.9792%" y="821" width="0.0966%" height="15" fill="rgb(210,39,28)" fg:x="34493" fg:w="145"/><text x="23.2292%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (145 samples, 0.10%)</title><rect x="22.9792%" y="805" width="0.0966%" height="15" fill="rgb(211,56,53)" fg:x="34493" fg:w="145"/><text x="23.2292%" y="815.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::iter (27 samples, 0.02%)</title><rect x="23.0579%" y="789" width="0.0180%" height="15" fill="rgb(226,201,30)" fg:x="34611" fg:w="27"/><text x="23.3079%" y="799.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (21 samples, 0.01%)</title><rect x="23.0619%" y="773" width="0.0140%" height="15" fill="rgb(239,101,34)" fg:x="34617" fg:w="21"/><text x="23.3119%" y="783.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (21 samples, 0.01%)</title><rect x="23.0619%" y="757" width="0.0140%" height="15" fill="rgb(226,209,5)" fg:x="34617" fg:w="21"/><text x="23.3119%" y="767.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (150 samples, 0.10%)</title><rect x="23.2404%" y="629" width="0.0999%" height="15" fill="rgb(250,105,47)" fg:x="34885" fg:w="150"/><text x="23.4904%" y="639.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (218 samples, 0.15%)</title><rect x="23.2104%" y="789" width="0.1452%" height="15" fill="rgb(230,72,3)" fg:x="34840" fg:w="218"/><text x="23.4604%" y="799.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (218 samples, 0.15%)</title><rect x="23.2104%" y="773" width="0.1452%" height="15" fill="rgb(232,218,39)" fg:x="34840" fg:w="218"/><text x="23.4604%" y="783.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (208 samples, 0.14%)</title><rect x="23.2171%" y="757" width="0.1386%" height="15" fill="rgb(248,166,6)" fg:x="34850" fg:w="208"/><text x="23.4671%" y="767.50"></text></g><g><title>alloc::alloc::exchange_malloc (199 samples, 0.13%)</title><rect x="23.2231%" y="741" width="0.1326%" height="15" fill="rgb(247,89,20)" fg:x="34859" fg:w="199"/><text x="23.4731%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (199 samples, 0.13%)</title><rect x="23.2231%" y="725" width="0.1326%" height="15" fill="rgb(248,130,54)" fg:x="34859" fg:w="199"/><text x="23.4731%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (199 samples, 0.13%)</title><rect x="23.2231%" y="709" width="0.1326%" height="15" fill="rgb(234,196,4)" fg:x="34859" fg:w="199"/><text x="23.4731%" y="719.50"></text></g><g><title>alloc::alloc::alloc (199 samples, 0.13%)</title><rect x="23.2231%" y="693" width="0.1326%" height="15" fill="rgb(250,143,31)" fg:x="34859" fg:w="199"/><text x="23.4731%" y="703.50"></text></g><g><title>__rg_alloc (199 samples, 0.13%)</title><rect x="23.2231%" y="677" width="0.1326%" height="15" fill="rgb(211,110,34)" fg:x="34859" fg:w="199"/><text x="23.4731%" y="687.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (199 samples, 0.13%)</title><rect x="23.2231%" y="661" width="0.1326%" height="15" fill="rgb(215,124,48)" fg:x="34859" fg:w="199"/><text x="23.4731%" y="671.50"></text></g><g><title>sn_rust_alloc (198 samples, 0.13%)</title><rect x="23.2237%" y="645" width="0.1319%" height="15" fill="rgb(216,46,13)" fg:x="34860" fg:w="198"/><text x="23.4737%" y="655.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (252 samples, 0.17%)</title><rect x="23.1958%" y="837" width="0.1679%" height="15" fill="rgb(205,184,25)" fg:x="34818" fg:w="252"/><text x="23.4458%" y="847.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (247 samples, 0.16%)</title><rect x="23.1991%" y="821" width="0.1646%" height="15" fill="rgb(228,1,10)" fg:x="34823" fg:w="247"/><text x="23.4491%" y="831.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (247 samples, 0.16%)</title><rect x="23.1991%" y="805" width="0.1646%" height="15" fill="rgb(213,116,27)" fg:x="34823" fg:w="247"/><text x="23.4491%" y="815.50"></text></g><g><title>abi_stable::erased_types::iterator::next (18 samples, 0.01%)</title><rect x="23.3750%" y="789" width="0.0120%" height="15" fill="rgb(241,95,50)" fg:x="35087" fg:w="18"/><text x="23.6250%" y="799.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (18 samples, 0.01%)</title><rect x="23.3750%" y="773" width="0.0120%" height="15" fill="rgb(238,48,32)" fg:x="35087" fg:w="18"/><text x="23.6250%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.01%)</title><rect x="23.3750%" y="757" width="0.0120%" height="15" fill="rgb(235,113,49)" fg:x="35087" fg:w="18"/><text x="23.6250%" y="767.50"></text></g><g><title>&lt;halfbrown::iter::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.01%)</title><rect x="23.3750%" y="741" width="0.0120%" height="15" fill="rgb(205,127,43)" fg:x="35087" fg:w="18"/><text x="23.6250%" y="751.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.02%)</title><rect x="23.3730%" y="821" width="0.0173%" height="15" fill="rgb(250,162,2)" fg:x="35084" fg:w="26"/><text x="23.6230%" y="831.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (26 samples, 0.02%)</title><rect x="23.3730%" y="805" width="0.0173%" height="15" fill="rgb(220,13,41)" fg:x="35084" fg:w="26"/><text x="23.6230%" y="815.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (44 samples, 0.03%)</title><rect x="23.3903%" y="821" width="0.0293%" height="15" fill="rgb(249,221,25)" fg:x="35110" fg:w="44"/><text x="23.6403%" y="831.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (44 samples, 0.03%)</title><rect x="23.3903%" y="805" width="0.0293%" height="15" fill="rgb(215,208,19)" fg:x="35110" fg:w="44"/><text x="23.6403%" y="815.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (27 samples, 0.02%)</title><rect x="23.4016%" y="789" width="0.0180%" height="15" fill="rgb(236,175,2)" fg:x="35127" fg:w="27"/><text x="23.6516%" y="799.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (27 samples, 0.02%)</title><rect x="23.4016%" y="773" width="0.0180%" height="15" fill="rgb(241,52,2)" fg:x="35127" fg:w="27"/><text x="23.6516%" y="783.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (21 samples, 0.01%)</title><rect x="23.4196%" y="821" width="0.0140%" height="15" fill="rgb(248,140,14)" fg:x="35154" fg:w="21"/><text x="23.6696%" y="831.50"></text></g><g><title>sn_rust_dealloc (93 samples, 0.06%)</title><rect x="23.4476%" y="709" width="0.0620%" height="15" fill="rgb(253,22,42)" fg:x="35196" fg:w="93"/><text x="23.6976%" y="719.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (925 samples, 0.62%)</title><rect x="22.8940%" y="901" width="0.6162%" height="15" fill="rgb(234,61,47)" fg:x="34365" fg:w="925"/><text x="23.1440%" y="911.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (808 samples, 0.54%)</title><rect x="22.9719%" y="885" width="0.5383%" height="15" fill="rgb(208,226,15)" fg:x="34482" fg:w="808"/><text x="23.2219%" y="895.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (652 samples, 0.43%)</title><rect x="23.0758%" y="869" width="0.4344%" height="15" fill="rgb(217,221,4)" fg:x="34638" fg:w="652"/><text x="23.3258%" y="879.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (472 samples, 0.31%)</title><rect x="23.1958%" y="853" width="0.3144%" height="15" fill="rgb(212,174,34)" fg:x="34818" fg:w="472"/><text x="23.4458%" y="863.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (220 samples, 0.15%)</title><rect x="23.3636%" y="837" width="0.1466%" height="15" fill="rgb(253,83,4)" fg:x="35070" fg:w="220"/><text x="23.6136%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (115 samples, 0.08%)</title><rect x="23.4336%" y="821" width="0.0766%" height="15" fill="rgb(250,195,49)" fg:x="35175" fg:w="115"/><text x="23.6836%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt; (115 samples, 0.08%)</title><rect x="23.4336%" y="805" width="0.0766%" height="15" fill="rgb(241,192,25)" fg:x="35175" fg:w="115"/><text x="23.6836%" y="815.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (115 samples, 0.08%)</title><rect x="23.4336%" y="789" width="0.0766%" height="15" fill="rgb(208,124,10)" fg:x="35175" fg:w="115"/><text x="23.6836%" y="799.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (110 samples, 0.07%)</title><rect x="23.4369%" y="773" width="0.0733%" height="15" fill="rgb(222,33,0)" fg:x="35180" fg:w="110"/><text x="23.6869%" y="783.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (110 samples, 0.07%)</title><rect x="23.4369%" y="757" width="0.0733%" height="15" fill="rgb(234,209,28)" fg:x="35180" fg:w="110"/><text x="23.6869%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (110 samples, 0.07%)</title><rect x="23.4369%" y="741" width="0.0733%" height="15" fill="rgb(224,11,23)" fg:x="35180" fg:w="110"/><text x="23.6869%" y="751.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (110 samples, 0.07%)</title><rect x="23.4369%" y="725" width="0.0733%" height="15" fill="rgb(232,99,1)" fg:x="35180" fg:w="110"/><text x="23.6869%" y="735.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (23,656 samples, 15.76%)</title><rect x="7.9844%" y="1013" width="15.7596%" height="15" fill="rgb(237,95,45)" fg:x="11985" fg:w="23656"/><text x="8.2344%" y="1023.50">&lt;core::future::from_gene..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (23,656 samples, 15.76%)</title><rect x="7.9844%" y="997" width="15.7596%" height="15" fill="rgb(208,109,11)" fg:x="11985" fg:w="23656"/><text x="8.2344%" y="1007.50">tremor_runtime::connecto..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (23,656 samples, 15.76%)</title><rect x="7.9844%" y="981" width="15.7596%" height="15" fill="rgb(216,190,48)" fg:x="11985" fg:w="23656"/><text x="8.2344%" y="991.50">&lt;core::future::from_gene..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (23,656 samples, 15.76%)</title><rect x="7.9844%" y="965" width="15.7596%" height="15" fill="rgb(251,171,36)" fg:x="11985" fg:w="23656"/><text x="8.2344%" y="975.50">tremor_runtime::connecto..</text></g><g><title>tremor_runtime::connectors::source::build_events (23,643 samples, 15.75%)</title><rect x="7.9931%" y="949" width="15.7510%" height="15" fill="rgb(230,62,22)" fg:x="11998" fg:w="23643"/><text x="8.2431%" y="959.50">tremor_runtime::connecto..</text></g><g><title>tremor_script::srs::EventPayload::try_new (22,227 samples, 14.81%)</title><rect x="8.9364%" y="933" width="14.8076%" height="15" fill="rgb(225,114,35)" fg:x="13414" fg:w="22227"/><text x="9.1864%" y="943.50">tremor_script::srs::Eve..</text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (21,769 samples, 14.50%)</title><rect x="9.2415%" y="917" width="14.5025%" height="15" fill="rgb(215,118,42)" fg:x="13872" fg:w="21769"/><text x="9.4915%" y="927.50">tremor_runtime::connec..</text></g><g><title>tremor_script::srs::ValueAndMeta::from_parts (351 samples, 0.23%)</title><rect x="23.5102%" y="901" width="0.2338%" height="15" fill="rgb(243,119,21)" fg:x="35290" fg:w="351"/><text x="23.7602%" y="911.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (23,657 samples, 15.76%)</title><rect x="7.9844%" y="1029" width="15.7603%" height="15" fill="rgb(252,177,53)" fg:x="11985" fg:w="23657"/><text x="8.2344%" y="1039.50">tremor_runtime::connecto..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (29,229 samples, 19.47%)</title><rect x="4.2737%" y="1045" width="19.4724%" height="15" fill="rgb(237,209,29)" fg:x="6415" fg:w="29229"/><text x="4.5237%" y="1055.50">&lt;core::future::from_generator::..</text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (18 samples, 0.01%)</title><rect x="23.7460%" y="1045" width="0.0120%" height="15" fill="rgb(212,65,23)" fg:x="35644" fg:w="18"/><text x="23.9960%" y="1055.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (21 samples, 0.01%)</title><rect x="23.7600%" y="1045" width="0.0140%" height="15" fill="rgb(230,222,46)" fg:x="35665" fg:w="21"/><text x="24.0100%" y="1055.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (29 samples, 0.02%)</title><rect x="23.7940%" y="1045" width="0.0193%" height="15" fill="rgb(215,135,32)" fg:x="35716" fg:w="29"/><text x="24.0440%" y="1055.50"></text></g><g><title>[libc-2.31.so] (180 samples, 0.12%)</title><rect x="23.8173%" y="1045" width="0.1199%" height="15" fill="rgb(246,101,22)" fg:x="35751" fg:w="180"/><text x="24.0673%" y="1055.50"></text></g><g><title>__GI___pthread_mutex_lock (22 samples, 0.01%)</title><rect x="23.9372%" y="1045" width="0.0147%" height="15" fill="rgb(206,107,13)" fg:x="35931" fg:w="22"/><text x="24.1872%" y="1055.50"></text></g><g><title>__clock_gettime (51 samples, 0.03%)</title><rect x="23.9579%" y="1045" width="0.0340%" height="15" fill="rgb(250,100,44)" fg:x="35962" fg:w="51"/><text x="24.2079%" y="1055.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (27 samples, 0.02%)</title><rect x="24.0052%" y="1045" width="0.0180%" height="15" fill="rgb(231,147,38)" fg:x="36033" fg:w="27"/><text x="24.2552%" y="1055.50"></text></g><g><title>abi_stable::erased_types::iterator::next (41 samples, 0.03%)</title><rect x="24.0232%" y="1045" width="0.0273%" height="15" fill="rgb(229,8,40)" fg:x="36060" fg:w="41"/><text x="24.2732%" y="1055.50"></text></g><g><title>abi_stable::std_types::arc::vtable_mod::destructor_arc (17 samples, 0.01%)</title><rect x="24.0505%" y="1045" width="0.0113%" height="15" fill="rgb(221,135,30)" fg:x="36101" fg:w="17"/><text x="24.3005%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (265 samples, 0.18%)</title><rect x="24.0712%" y="1045" width="0.1765%" height="15" fill="rgb(249,193,18)" fg:x="36132" fg:w="265"/><text x="24.3212%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_nocheck_elem (82 samples, 0.05%)</title><rect x="24.2477%" y="1045" width="0.0546%" height="15" fill="rgb(209,133,39)" fg:x="36397" fg:w="82"/><text x="24.4977%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (32 samples, 0.02%)</title><rect x="24.3150%" y="1045" width="0.0213%" height="15" fill="rgb(232,100,14)" fg:x="36498" fg:w="32"/><text x="24.5650%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::into_vec (19 samples, 0.01%)</title><rect x="24.3363%" y="1045" width="0.0127%" height="15" fill="rgb(224,185,1)" fg:x="36530" fg:w="19"/><text x="24.5863%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (72 samples, 0.05%)</title><rect x="24.3490%" y="1045" width="0.0480%" height="15" fill="rgb(223,139,8)" fg:x="36549" fg:w="72"/><text x="24.5990%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (16 samples, 0.01%)</title><rect x="24.3863%" y="1029" width="0.0107%" height="15" fill="rgb(232,213,38)" fg:x="36605" fg:w="16"/><text x="24.6363%" y="1039.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (16 samples, 0.01%)</title><rect x="24.3863%" y="1013" width="0.0107%" height="15" fill="rgb(207,94,22)" fg:x="36605" fg:w="16"/><text x="24.6363%" y="1023.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (16 samples, 0.01%)</title><rect x="24.3863%" y="997" width="0.0107%" height="15" fill="rgb(219,183,54)" fg:x="36605" fg:w="16"/><text x="24.6363%" y="1007.50"></text></g><g><title>alloc::slice::hack::to_vec (16 samples, 0.01%)</title><rect x="24.3863%" y="981" width="0.0107%" height="15" fill="rgb(216,185,54)" fg:x="36605" fg:w="16"/><text x="24.6363%" y="991.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (16 samples, 0.01%)</title><rect x="24.3863%" y="965" width="0.0107%" height="15" fill="rgb(254,217,39)" fg:x="36605" fg:w="16"/><text x="24.6363%" y="975.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (43 samples, 0.03%)</title><rect x="24.3969%" y="1045" width="0.0286%" height="15" fill="rgb(240,178,23)" fg:x="36621" fg:w="43"/><text x="24.6469%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (24 samples, 0.02%)</title><rect x="24.4096%" y="1029" width="0.0160%" height="15" fill="rgb(218,11,47)" fg:x="36640" fg:w="24"/><text x="24.6596%" y="1039.50"></text></g><g><title>core::mem::drop (24 samples, 0.02%)</title><rect x="24.4096%" y="1013" width="0.0160%" height="15" fill="rgb(218,51,51)" fg:x="36640" fg:w="24"/><text x="24.6596%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (23 samples, 0.02%)</title><rect x="24.4102%" y="997" width="0.0153%" height="15" fill="rgb(238,126,27)" fg:x="36641" fg:w="23"/><text x="24.6602%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="24.4102%" y="981" width="0.0153%" height="15" fill="rgb(249,202,22)" fg:x="36641" fg:w="23"/><text x="24.6602%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::vec::private::RVec&lt;u8&gt;]&gt; (23 samples, 0.02%)</title><rect x="24.4102%" y="965" width="0.0153%" height="15" fill="rgb(254,195,49)" fg:x="36641" fg:w="23"/><text x="24.6602%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (23 samples, 0.02%)</title><rect x="24.4102%" y="949" width="0.0153%" height="15" fill="rgb(208,123,14)" fg:x="36641" fg:w="23"/><text x="24.6602%" y="959.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (23 samples, 0.02%)</title><rect x="24.4102%" y="933" width="0.0153%" height="15" fill="rgb(224,200,8)" fg:x="36641" fg:w="23"/><text x="24.6602%" y="943.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (27 samples, 0.02%)</title><rect x="24.4262%" y="1045" width="0.0180%" height="15" fill="rgb(217,61,36)" fg:x="36665" fg:w="27"/><text x="24.6762%" y="1055.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (16 samples, 0.01%)</title><rect x="24.4542%" y="1045" width="0.0107%" height="15" fill="rgb(206,35,45)" fg:x="36707" fg:w="16"/><text x="24.7042%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="24.4542%" y="1029" width="0.0107%" height="15" fill="rgb(217,65,33)" fg:x="36707" fg:w="16"/><text x="24.7042%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (16 samples, 0.01%)</title><rect x="24.4542%" y="1013" width="0.0107%" height="15" fill="rgb(222,158,48)" fg:x="36707" fg:w="16"/><text x="24.7042%" y="1023.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (16 samples, 0.01%)</title><rect x="24.4542%" y="997" width="0.0107%" height="15" fill="rgb(254,2,54)" fg:x="36707" fg:w="16"/><text x="24.7042%" y="1007.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (35 samples, 0.02%)</title><rect x="24.4649%" y="1045" width="0.0233%" height="15" fill="rgb(250,143,38)" fg:x="36723" fg:w="35"/><text x="24.7149%" y="1055.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (40 samples, 0.03%)</title><rect x="24.4882%" y="1045" width="0.0266%" height="15" fill="rgb(248,25,0)" fg:x="36758" fg:w="40"/><text x="24.7382%" y="1055.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn (19 samples, 0.01%)</title><rect x="24.5208%" y="1045" width="0.0127%" height="15" fill="rgb(206,152,27)" fg:x="36807" fg:w="19"/><text x="24.7708%" y="1055.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (89 samples, 0.06%)</title><rect x="24.7986%" y="661" width="0.0593%" height="15" fill="rgb(240,77,30)" fg:x="37224" fg:w="89"/><text x="25.0486%" y="671.50"></text></g><g><title>[libc-2.31.so] (65 samples, 0.04%)</title><rect x="24.8146%" y="645" width="0.0433%" height="15" fill="rgb(231,5,3)" fg:x="37248" fg:w="65"/><text x="25.0646%" y="655.50"></text></g><g><title>&lt;abi_stable::sabi_types::constructor::Constructor&lt;T&gt; as core::cmp::PartialEq&gt;::eq (40 samples, 0.03%)</title><rect x="24.8726%" y="613" width="0.0266%" height="15" fill="rgb(207,226,32)" fg:x="37335" fg:w="40"/><text x="25.1226%" y="623.50"></text></g><g><title>abi_stable::sabi_types::constructor::Constructor&lt;T&gt;::get (27 samples, 0.02%)</title><rect x="24.8812%" y="597" width="0.0180%" height="15" fill="rgb(222,207,47)" fg:x="37348" fg:w="27"/><text x="25.1312%" y="607.50"></text></g><g><title>abi_stable::std_types::utypeid::new_utypeid (21 samples, 0.01%)</title><rect x="24.8852%" y="581" width="0.0140%" height="15" fill="rgb(229,115,45)" fg:x="37354" fg:w="21"/><text x="25.1352%" y="591.50"></text></g><g><title>abi_stable::std_types::utypeid::UTypeId::new (17 samples, 0.01%)</title><rect x="24.8879%" y="565" width="0.0113%" height="15" fill="rgb(224,191,6)" fg:x="37358" fg:w="17"/><text x="25.1379%" y="575.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (147 samples, 0.10%)</title><rect x="24.8579%" y="661" width="0.0979%" height="15" fill="rgb(230,227,24)" fg:x="37313" fg:w="147"/><text x="25.1079%" y="671.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::convert::From&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from (143 samples, 0.10%)</title><rect x="24.8606%" y="645" width="0.0953%" height="15" fill="rgb(228,80,19)" fg:x="37317" fg:w="143"/><text x="25.1106%" y="655.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::into_vec (132 samples, 0.09%)</title><rect x="24.8679%" y="629" width="0.0879%" height="15" fill="rgb(247,229,0)" fg:x="37328" fg:w="132"/><text x="25.1179%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::from_raw_parts (84 samples, 0.06%)</title><rect x="24.8999%" y="613" width="0.0560%" height="15" fill="rgb(237,194,15)" fg:x="37376" fg:w="84"/><text x="25.1499%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (84 samples, 0.06%)</title><rect x="24.8999%" y="597" width="0.0560%" height="15" fill="rgb(219,203,20)" fg:x="37376" fg:w="84"/><text x="25.1499%" y="607.50"></text></g><g><title>[libc-2.31.so] (350 samples, 0.23%)</title><rect x="24.9605%" y="645" width="0.2332%" height="15" fill="rgb(234,128,8)" fg:x="37467" fg:w="350"/><text x="25.2105%" y="655.50"></text></g><g><title>[libc-2.31.so] (116 samples, 0.08%)</title><rect x="25.3189%" y="629" width="0.0773%" height="15" fill="rgb(248,202,8)" fg:x="38005" fg:w="116"/><text x="25.5689%" y="639.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (140 samples, 0.09%)</title><rect x="25.4642%" y="341" width="0.0933%" height="15" fill="rgb(206,104,37)" fg:x="38223" fg:w="140"/><text x="25.7142%" y="351.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (211 samples, 0.14%)</title><rect x="25.4235%" y="501" width="0.1406%" height="15" fill="rgb(223,8,27)" fg:x="38162" fg:w="211"/><text x="25.6735%" y="511.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (211 samples, 0.14%)</title><rect x="25.4235%" y="485" width="0.1406%" height="15" fill="rgb(216,217,28)" fg:x="38162" fg:w="211"/><text x="25.6735%" y="495.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (199 samples, 0.13%)</title><rect x="25.4315%" y="469" width="0.1326%" height="15" fill="rgb(249,199,1)" fg:x="38174" fg:w="199"/><text x="25.6815%" y="479.50"></text></g><g><title>alloc::alloc::exchange_malloc (195 samples, 0.13%)</title><rect x="25.4342%" y="453" width="0.1299%" height="15" fill="rgb(240,85,17)" fg:x="38178" fg:w="195"/><text x="25.6842%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (195 samples, 0.13%)</title><rect x="25.4342%" y="437" width="0.1299%" height="15" fill="rgb(206,108,45)" fg:x="38178" fg:w="195"/><text x="25.6842%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (195 samples, 0.13%)</title><rect x="25.4342%" y="421" width="0.1299%" height="15" fill="rgb(245,210,41)" fg:x="38178" fg:w="195"/><text x="25.6842%" y="431.50"></text></g><g><title>alloc::alloc::alloc (195 samples, 0.13%)</title><rect x="25.4342%" y="405" width="0.1299%" height="15" fill="rgb(206,13,37)" fg:x="38178" fg:w="195"/><text x="25.6842%" y="415.50"></text></g><g><title>__rg_alloc (195 samples, 0.13%)</title><rect x="25.4342%" y="389" width="0.1299%" height="15" fill="rgb(250,61,18)" fg:x="38178" fg:w="195"/><text x="25.6842%" y="399.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (195 samples, 0.13%)</title><rect x="25.4342%" y="373" width="0.1299%" height="15" fill="rgb(235,172,48)" fg:x="38178" fg:w="195"/><text x="25.6842%" y="383.50"></text></g><g><title>sn_rust_alloc (189 samples, 0.13%)</title><rect x="25.4382%" y="357" width="0.1259%" height="15" fill="rgb(249,201,17)" fg:x="38184" fg:w="189"/><text x="25.6882%" y="367.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (242 samples, 0.16%)</title><rect x="25.4135%" y="549" width="0.1612%" height="15" fill="rgb(219,208,6)" fg:x="38147" fg:w="242"/><text x="25.6635%" y="559.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (236 samples, 0.16%)</title><rect x="25.4175%" y="533" width="0.1572%" height="15" fill="rgb(248,31,23)" fg:x="38153" fg:w="236"/><text x="25.6675%" y="543.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (236 samples, 0.16%)</title><rect x="25.4175%" y="517" width="0.1572%" height="15" fill="rgb(245,15,42)" fg:x="38153" fg:w="236"/><text x="25.6675%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (16 samples, 0.01%)</title><rect x="25.5641%" y="501" width="0.0107%" height="15" fill="rgb(222,217,39)" fg:x="38373" fg:w="16"/><text x="25.8141%" y="511.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (256 samples, 0.17%)</title><rect x="25.4135%" y="565" width="0.1705%" height="15" fill="rgb(210,219,27)" fg:x="38147" fg:w="256"/><text x="25.6635%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (570 samples, 0.38%)</title><rect x="25.4049%" y="629" width="0.3797%" height="15" fill="rgb(252,166,36)" fg:x="38134" fg:w="570"/><text x="25.6549%" y="639.50"></text></g><g><title>core::ops::function::FnOnce::call_once (566 samples, 0.38%)</title><rect x="25.4075%" y="613" width="0.3771%" height="15" fill="rgb(245,132,34)" fg:x="38138" fg:w="566"/><text x="25.6575%" y="623.50"></text></g><g><title>value_trait::Builder::object (563 samples, 0.38%)</title><rect x="25.4095%" y="597" width="0.3751%" height="15" fill="rgb(236,54,3)" fg:x="38141" fg:w="563"/><text x="25.6595%" y="607.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (557 samples, 0.37%)</title><rect x="25.4135%" y="581" width="0.3711%" height="15" fill="rgb(241,173,43)" fg:x="38147" fg:w="557"/><text x="25.6635%" y="591.50"></text></g><g><title>tremor_value::value::Value::Object (301 samples, 0.20%)</title><rect x="25.5841%" y="565" width="0.2005%" height="15" fill="rgb(215,190,9)" fg:x="38403" fg:w="301"/><text x="25.8341%" y="575.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (16 samples, 0.01%)</title><rect x="25.8026%" y="565" width="0.0107%" height="15" fill="rgb(242,101,16)" fg:x="38731" fg:w="16"/><text x="26.0526%" y="575.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (16 samples, 0.01%)</title><rect x="25.8026%" y="549" width="0.0107%" height="15" fill="rgb(223,190,21)" fg:x="38731" fg:w="16"/><text x="26.0526%" y="559.50"></text></g><g><title>sn_rust_dealloc (121 samples, 0.08%)</title><rect x="25.8133%" y="565" width="0.0806%" height="15" fill="rgb(215,228,25)" fg:x="38747" fg:w="121"/><text x="26.0633%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (150 samples, 0.10%)</title><rect x="25.7946%" y="613" width="0.0999%" height="15" fill="rgb(225,36,22)" fg:x="38719" fg:w="150"/><text x="26.0446%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (150 samples, 0.10%)</title><rect x="25.7946%" y="597" width="0.0999%" height="15" fill="rgb(251,106,46)" fg:x="38719" fg:w="150"/><text x="26.0446%" y="607.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (150 samples, 0.10%)</title><rect x="25.7946%" y="581" width="0.0999%" height="15" fill="rgb(208,90,1)" fg:x="38719" fg:w="150"/><text x="26.0446%" y="591.50"></text></g><g><title>sn_rust_dealloc (55 samples, 0.04%)</title><rect x="25.9338%" y="437" width="0.0366%" height="15" fill="rgb(243,10,4)" fg:x="38928" fg:w="55"/><text x="26.1838%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (104 samples, 0.07%)</title><rect x="25.9019%" y="517" width="0.0693%" height="15" fill="rgb(212,137,27)" fg:x="38880" fg:w="104"/><text x="26.1519%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (104 samples, 0.07%)</title><rect x="25.9019%" y="501" width="0.0693%" height="15" fill="rgb(231,220,49)" fg:x="38880" fg:w="104"/><text x="26.1519%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (89 samples, 0.06%)</title><rect x="25.9119%" y="485" width="0.0593%" height="15" fill="rgb(237,96,20)" fg:x="38895" fg:w="89"/><text x="26.1619%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (89 samples, 0.06%)</title><rect x="25.9119%" y="469" width="0.0593%" height="15" fill="rgb(239,229,30)" fg:x="38895" fg:w="89"/><text x="26.1619%" y="479.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (89 samples, 0.06%)</title><rect x="25.9119%" y="453" width="0.0593%" height="15" fill="rgb(219,65,33)" fg:x="38895" fg:w="89"/><text x="26.1619%" y="463.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (126 samples, 0.08%)</title><rect x="25.8945%" y="581" width="0.0839%" height="15" fill="rgb(243,134,7)" fg:x="38869" fg:w="126"/><text x="26.1445%" y="591.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (124 samples, 0.08%)</title><rect x="25.8959%" y="565" width="0.0826%" height="15" fill="rgb(216,177,54)" fg:x="38871" fg:w="124"/><text x="26.1459%" y="575.50"></text></g><g><title>core::mem::drop (115 samples, 0.08%)</title><rect x="25.9019%" y="549" width="0.0766%" height="15" fill="rgb(211,160,20)" fg:x="38880" fg:w="115"/><text x="26.1519%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (115 samples, 0.08%)</title><rect x="25.9019%" y="533" width="0.0766%" height="15" fill="rgb(239,85,39)" fg:x="38880" fg:w="115"/><text x="26.1519%" y="543.50"></text></g><g><title>sn_rust_dealloc (26 samples, 0.02%)</title><rect x="25.9785%" y="581" width="0.0173%" height="15" fill="rgb(232,125,22)" fg:x="38995" fg:w="26"/><text x="26.2285%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (304 samples, 0.20%)</title><rect x="25.7939%" y="629" width="0.2025%" height="15" fill="rgb(244,57,34)" fg:x="38718" fg:w="304"/><text x="26.0439%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (153 samples, 0.10%)</title><rect x="25.8945%" y="613" width="0.1019%" height="15" fill="rgb(214,203,32)" fg:x="38869" fg:w="153"/><text x="26.1445%" y="623.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (153 samples, 0.10%)</title><rect x="25.8945%" y="597" width="0.1019%" height="15" fill="rgb(207,58,43)" fg:x="38869" fg:w="153"/><text x="26.1445%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (17 samples, 0.01%)</title><rect x="26.0165%" y="565" width="0.0113%" height="15" fill="rgb(215,193,15)" fg:x="39052" fg:w="17"/><text x="26.2665%" y="575.50"></text></g><g><title>sn_rust_dealloc (41 samples, 0.03%)</title><rect x="26.0278%" y="565" width="0.0273%" height="15" fill="rgb(232,15,44)" fg:x="39069" fg:w="41"/><text x="26.2778%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (90 samples, 0.06%)</title><rect x="25.9965%" y="629" width="0.0600%" height="15" fill="rgb(212,3,48)" fg:x="39022" fg:w="90"/><text x="26.2465%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (70 samples, 0.05%)</title><rect x="26.0098%" y="613" width="0.0466%" height="15" fill="rgb(218,128,7)" fg:x="39042" fg:w="70"/><text x="26.2598%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (70 samples, 0.05%)</title><rect x="26.0098%" y="597" width="0.0466%" height="15" fill="rgb(226,216,39)" fg:x="39042" fg:w="70"/><text x="26.2598%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (70 samples, 0.05%)</title><rect x="26.0098%" y="581" width="0.0466%" height="15" fill="rgb(243,47,51)" fg:x="39042" fg:w="70"/><text x="26.2598%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (71 samples, 0.05%)</title><rect x="26.0857%" y="597" width="0.0473%" height="15" fill="rgb(241,183,40)" fg:x="39156" fg:w="71"/><text x="26.3357%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (34 samples, 0.02%)</title><rect x="26.1550%" y="565" width="0.0227%" height="15" fill="rgb(231,217,32)" fg:x="39260" fg:w="34"/><text x="26.4050%" y="575.50"></text></g><g><title>core::cmp::PartialOrd::ge (34 samples, 0.02%)</title><rect x="26.1550%" y="549" width="0.0227%" height="15" fill="rgb(229,61,38)" fg:x="39260" fg:w="34"/><text x="26.4050%" y="559.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (34 samples, 0.02%)</title><rect x="26.1550%" y="533" width="0.0227%" height="15" fill="rgb(225,210,5)" fg:x="39260" fg:w="34"/><text x="26.4050%" y="543.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (34 samples, 0.02%)</title><rect x="26.1550%" y="517" width="0.0227%" height="15" fill="rgb(231,79,45)" fg:x="39260" fg:w="34"/><text x="26.4050%" y="527.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (34 samples, 0.02%)</title><rect x="26.1550%" y="501" width="0.0227%" height="15" fill="rgb(224,100,7)" fg:x="39260" fg:w="34"/><text x="26.4050%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (22 samples, 0.01%)</title><rect x="26.1630%" y="485" width="0.0147%" height="15" fill="rgb(241,198,18)" fg:x="39272" fg:w="22"/><text x="26.4130%" y="495.50"></text></g><g><title>std::time::SystemTime::duration_since (161 samples, 0.11%)</title><rect x="26.0857%" y="613" width="0.1073%" height="15" fill="rgb(252,97,53)" fg:x="39156" fg:w="161"/><text x="26.3357%" y="623.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (90 samples, 0.06%)</title><rect x="26.1330%" y="597" width="0.0600%" height="15" fill="rgb(220,88,7)" fg:x="39227" fg:w="90"/><text x="26.3830%" y="607.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (90 samples, 0.06%)</title><rect x="26.1330%" y="581" width="0.0600%" height="15" fill="rgb(213,176,14)" fg:x="39227" fg:w="90"/><text x="26.3830%" y="591.50"></text></g><g><title>core::time::Duration::new (23 samples, 0.02%)</title><rect x="26.1777%" y="565" width="0.0153%" height="15" fill="rgb(246,73,7)" fg:x="39294" fg:w="23"/><text x="26.4277%" y="575.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,223 samples, 1.48%)</title><rect x="24.9559%" y="661" width="1.4810%" height="15" fill="rgb(245,64,36)" fg:x="37460" fg:w="2223"/><text x="25.2059%" y="671.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (1,866 samples, 1.24%)</title><rect x="25.1937%" y="645" width="1.2431%" height="15" fill="rgb(245,80,10)" fg:x="37817" fg:w="1866"/><text x="25.4437%" y="655.50"></text></g><g><title>tremor_common::time::nanotime (571 samples, 0.38%)</title><rect x="26.0564%" y="629" width="0.3804%" height="15" fill="rgb(232,107,50)" fg:x="39112" fg:w="571"/><text x="26.3064%" y="639.50"></text></g><g><title>std::time::SystemTime::now (366 samples, 0.24%)</title><rect x="26.1930%" y="613" width="0.2438%" height="15" fill="rgb(253,3,0)" fg:x="39317" fg:w="366"/><text x="26.4430%" y="623.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (366 samples, 0.24%)</title><rect x="26.1930%" y="597" width="0.2438%" height="15" fill="rgb(212,99,53)" fg:x="39317" fg:w="366"/><text x="26.4430%" y="607.50"></text></g><g><title>std::sys::unix::time::inner::now (366 samples, 0.24%)</title><rect x="26.1930%" y="581" width="0.2438%" height="15" fill="rgb(249,111,54)" fg:x="39317" fg:w="366"/><text x="26.4430%" y="591.50"></text></g><g><title>__clock_gettime (289 samples, 0.19%)</title><rect x="26.2443%" y="565" width="0.1925%" height="15" fill="rgb(249,55,30)" fg:x="39394" fg:w="289"/><text x="26.4943%" y="575.50"></text></g><g><title>__vdso_clock_gettime (274 samples, 0.18%)</title><rect x="26.2543%" y="549" width="0.1825%" height="15" fill="rgb(237,47,42)" fg:x="39409" fg:w="274"/><text x="26.5043%" y="559.50"></text></g><g><title>[[vdso]] (241 samples, 0.16%)</title><rect x="26.2763%" y="533" width="0.1606%" height="15" fill="rgb(211,20,18)" fg:x="39442" fg:w="241"/><text x="26.5263%" y="543.50"></text></g><g><title>[libc-2.31.so] (498 samples, 0.33%)</title><rect x="26.4368%" y="661" width="0.3318%" height="15" fill="rgb(231,203,46)" fg:x="39683" fg:w="498"/><text x="26.6868%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}}&gt;&gt; (21 samples, 0.01%)</title><rect x="26.7686%" y="661" width="0.0140%" height="15" fill="rgb(237,142,3)" fg:x="40181" fg:w="21"/><text x="27.0186%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}}&gt; (21 samples, 0.01%)</title><rect x="26.7686%" y="645" width="0.0140%" height="15" fill="rgb(241,107,1)" fg:x="40181" fg:w="21"/><text x="27.0186%" y="655.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,465 samples, 2.31%)</title><rect x="24.5362%" y="693" width="2.3084%" height="15" fill="rgb(229,83,13)" fg:x="36830" fg:w="3465"/><text x="24.7862%" y="703.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (3,464 samples, 2.31%)</title><rect x="24.5368%" y="677" width="2.3077%" height="15" fill="rgb(241,91,40)" fg:x="36831" fg:w="3464"/><text x="24.7868%" y="687.50">t..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data (93 samples, 0.06%)</title><rect x="26.7826%" y="661" width="0.0620%" height="15" fill="rgb(225,3,45)" fg:x="40202" fg:w="93"/><text x="27.0326%" y="671.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (310 samples, 0.21%)</title><rect x="26.8532%" y="533" width="0.2065%" height="15" fill="rgb(244,223,14)" fg:x="40308" fg:w="310"/><text x="27.1032%" y="543.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (310 samples, 0.21%)</title><rect x="26.8532%" y="517" width="0.2065%" height="15" fill="rgb(224,124,37)" fg:x="40308" fg:w="310"/><text x="27.1032%" y="527.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (310 samples, 0.21%)</title><rect x="26.8532%" y="501" width="0.2065%" height="15" fill="rgb(251,171,30)" fg:x="40308" fg:w="310"/><text x="27.1032%" y="511.50"></text></g><g><title>[libc-2.31.so] (302 samples, 0.20%)</title><rect x="26.8585%" y="485" width="0.2012%" height="15" fill="rgb(236,46,54)" fg:x="40316" fg:w="302"/><text x="27.1085%" y="495.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (500 samples, 0.33%)</title><rect x="26.8445%" y="613" width="0.3331%" height="15" fill="rgb(245,213,5)" fg:x="40295" fg:w="500"/><text x="27.0945%" y="623.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (500 samples, 0.33%)</title><rect x="26.8445%" y="597" width="0.3331%" height="15" fill="rgb(230,144,27)" fg:x="40295" fg:w="500"/><text x="27.0945%" y="607.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (500 samples, 0.33%)</title><rect x="26.8445%" y="581" width="0.3331%" height="15" fill="rgb(220,86,6)" fg:x="40295" fg:w="500"/><text x="27.0945%" y="591.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (500 samples, 0.33%)</title><rect x="26.8445%" y="565" width="0.3331%" height="15" fill="rgb(240,20,13)" fg:x="40295" fg:w="500"/><text x="27.0945%" y="575.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (500 samples, 0.33%)</title><rect x="26.8445%" y="549" width="0.3331%" height="15" fill="rgb(217,89,34)" fg:x="40295" fg:w="500"/><text x="27.0945%" y="559.50"></text></g><g><title>std::panic::catch_unwind (177 samples, 0.12%)</title><rect x="27.0597%" y="533" width="0.1179%" height="15" fill="rgb(229,13,5)" fg:x="40618" fg:w="177"/><text x="27.3097%" y="543.50"></text></g><g><title>std::panicking::try (177 samples, 0.12%)</title><rect x="27.0597%" y="517" width="0.1179%" height="15" fill="rgb(244,67,35)" fg:x="40618" fg:w="177"/><text x="27.3097%" y="527.50"></text></g><g><title>std::panicking::try::do_call (177 samples, 0.12%)</title><rect x="27.0597%" y="501" width="0.1179%" height="15" fill="rgb(221,40,2)" fg:x="40618" fg:w="177"/><text x="27.3097%" y="511.50"></text></g><g><title>[libc-2.31.so] (92 samples, 0.06%)</title><rect x="27.1164%" y="485" width="0.0613%" height="15" fill="rgb(237,157,21)" fg:x="40703" fg:w="92"/><text x="27.3664%" y="495.50"></text></g><g><title>async_global_executor::reactor::block_on (4,019 samples, 2.68%)</title><rect x="24.5355%" y="1045" width="2.6775%" height="15" fill="rgb(222,94,11)" fg:x="36829" fg:w="4019"/><text x="24.7855%" y="1055.50">as..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (4,019 samples, 2.68%)</title><rect x="24.5355%" y="1029" width="2.6775%" height="15" fill="rgb(249,113,6)" fg:x="36829" fg:w="4019"/><text x="24.7855%" y="1039.50">as..</text></g><g><title>async_io::driver::block_on (4,019 samples, 2.68%)</title><rect x="24.5355%" y="1013" width="2.6775%" height="15" fill="rgb(238,137,36)" fg:x="36829" fg:w="4019"/><text x="24.7855%" y="1023.50">as..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (4,019 samples, 2.68%)</title><rect x="24.5355%" y="997" width="2.6775%" height="15" fill="rgb(210,102,26)" fg:x="36829" fg:w="4019"/><text x="24.7855%" y="1007.50">&lt;f..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,019 samples, 2.68%)</title><rect x="24.5355%" y="981" width="2.6775%" height="15" fill="rgb(218,30,30)" fg:x="36829" fg:w="4019"/><text x="24.7855%" y="991.50">&lt;c..</text></g><g><title>async_executor::Executor::run::{{closure}} (4,019 samples, 2.68%)</title><rect x="24.5355%" y="965" width="2.6775%" height="15" fill="rgb(214,67,26)" fg:x="36829" fg:w="4019"/><text x="24.7855%" y="975.50">as..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (4,019 samples, 2.68%)</title><rect x="24.5355%" y="949" width="2.6775%" height="15" fill="rgb(251,9,53)" fg:x="36829" fg:w="4019"/><text x="24.7855%" y="959.50">&lt;f..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,019 samples, 2.68%)</title><rect x="24.5355%" y="933" width="2.6775%" height="15" fill="rgb(228,204,25)" fg:x="36829" fg:w="4019"/><text x="24.7855%" y="943.50">&lt;c..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (4,019 samples, 2.68%)</title><rect x="24.5355%" y="917" width="2.6775%" height="15" fill="rgb(207,153,8)" fg:x="36829" fg:w="4019"/><text x="24.7855%" y="927.50">as..</text></g><g><title>async_task::runnable::Runnable::run (4,019 samples, 2.68%)</title><rect x="24.5355%" y="901" width="2.6775%" height="15" fill="rgb(242,9,16)" fg:x="36829" fg:w="4019"/><text x="24.7855%" y="911.50">as..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (4,019 samples, 2.68%)</title><rect x="24.5355%" y="885" width="2.6775%" height="15" fill="rgb(217,211,10)" fg:x="36829" fg:w="4019"/><text x="24.7855%" y="895.50">as..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (4,018 samples, 2.68%)</title><rect x="24.5362%" y="869" width="2.6768%" height="15" fill="rgb(219,228,52)" fg:x="36830" fg:w="4018"/><text x="24.7862%" y="879.50">&lt;c..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,018 samples, 2.68%)</title><rect x="24.5362%" y="853" width="2.6768%" height="15" fill="rgb(231,92,29)" fg:x="36830" fg:w="4018"/><text x="24.7862%" y="863.50">&lt;c..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (4,018 samples, 2.68%)</title><rect x="24.5362%" y="837" width="2.6768%" height="15" fill="rgb(232,8,23)" fg:x="36830" fg:w="4018"/><text x="24.7862%" y="847.50">as..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (4,018 samples, 2.68%)</title><rect x="24.5362%" y="821" width="2.6768%" height="15" fill="rgb(216,211,34)" fg:x="36830" fg:w="4018"/><text x="24.7862%" y="831.50">&lt;a..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (4,018 samples, 2.68%)</title><rect x="24.5362%" y="805" width="2.6768%" height="15" fill="rgb(236,151,0)" fg:x="36830" fg:w="4018"/><text x="24.7862%" y="815.50">as..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (4,018 samples, 2.68%)</title><rect x="24.5362%" y="789" width="2.6768%" height="15" fill="rgb(209,168,3)" fg:x="36830" fg:w="4018"/><text x="24.7862%" y="799.50">st..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (4,018 samples, 2.68%)</title><rect x="24.5362%" y="773" width="2.6768%" height="15" fill="rgb(208,129,28)" fg:x="36830" fg:w="4018"/><text x="24.7862%" y="783.50">st..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (4,018 samples, 2.68%)</title><rect x="24.5362%" y="757" width="2.6768%" height="15" fill="rgb(229,78,22)" fg:x="36830" fg:w="4018"/><text x="24.7862%" y="767.50">as..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (4,018 samples, 2.68%)</title><rect x="24.5362%" y="741" width="2.6768%" height="15" fill="rgb(228,187,13)" fg:x="36830" fg:w="4018"/><text x="24.7862%" y="751.50">&lt;a..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,018 samples, 2.68%)</title><rect x="24.5362%" y="725" width="2.6768%" height="15" fill="rgb(240,119,24)" fg:x="36830" fg:w="4018"/><text x="24.7862%" y="735.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (4,018 samples, 2.68%)</title><rect x="24.5362%" y="709" width="2.6768%" height="15" fill="rgb(209,194,42)" fg:x="36830" fg:w="4018"/><text x="24.7862%" y="719.50">tr..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (553 samples, 0.37%)</title><rect x="26.8445%" y="693" width="0.3684%" height="15" fill="rgb(247,200,46)" fg:x="40295" fg:w="553"/><text x="27.0945%" y="703.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (553 samples, 0.37%)</title><rect x="26.8445%" y="677" width="0.3684%" height="15" fill="rgb(218,76,16)" fg:x="40295" fg:w="553"/><text x="27.0945%" y="687.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (553 samples, 0.37%)</title><rect x="26.8445%" y="661" width="0.3684%" height="15" fill="rgb(225,21,48)" fg:x="40295" fg:w="553"/><text x="27.0945%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (553 samples, 0.37%)</title><rect x="26.8445%" y="645" width="0.3684%" height="15" fill="rgb(239,223,50)" fg:x="40295" fg:w="553"/><text x="27.0945%" y="655.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (553 samples, 0.37%)</title><rect x="26.8445%" y="629" width="0.3684%" height="15" fill="rgb(244,45,21)" fg:x="40295" fg:w="553"/><text x="27.0945%" y="639.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_TO&lt;_ErasedPtr&gt;::pull_data (53 samples, 0.04%)</title><rect x="27.1776%" y="613" width="0.0353%" height="15" fill="rgb(232,33,43)" fg:x="40795" fg:w="53"/><text x="27.4276%" y="623.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::pull_data (53 samples, 0.04%)</title><rect x="27.1776%" y="597" width="0.0353%" height="15" fill="rgb(209,8,3)" fg:x="40795" fg:w="53"/><text x="27.4276%" y="607.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data (53 samples, 0.04%)</title><rect x="27.1776%" y="581" width="0.0353%" height="15" fill="rgb(214,25,53)" fg:x="40795" fg:w="53"/><text x="27.4276%" y="591.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (53 samples, 0.04%)</title><rect x="27.1776%" y="565" width="0.0353%" height="15" fill="rgb(254,186,54)" fg:x="40795" fg:w="53"/><text x="27.4276%" y="575.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (53 samples, 0.04%)</title><rect x="27.1776%" y="549" width="0.0353%" height="15" fill="rgb(208,174,49)" fg:x="40795" fg:w="53"/><text x="27.4276%" y="559.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (53 samples, 0.04%)</title><rect x="27.1776%" y="533" width="0.0353%" height="15" fill="rgb(233,191,51)" fg:x="40795" fg:w="53"/><text x="27.4276%" y="543.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (53 samples, 0.04%)</title><rect x="27.1776%" y="517" width="0.0353%" height="15" fill="rgb(222,134,10)" fg:x="40795" fg:w="53"/><text x="27.4276%" y="527.50"></text></g><g><title>alloc::alloc::exchange_malloc (53 samples, 0.04%)</title><rect x="27.1776%" y="501" width="0.0353%" height="15" fill="rgb(230,226,20)" fg:x="40795" fg:w="53"/><text x="27.4276%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (53 samples, 0.04%)</title><rect x="27.1776%" y="485" width="0.0353%" height="15" fill="rgb(251,111,25)" fg:x="40795" fg:w="53"/><text x="27.4276%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (53 samples, 0.04%)</title><rect x="27.1776%" y="469" width="0.0353%" height="15" fill="rgb(224,40,46)" fg:x="40795" fg:w="53"/><text x="27.4276%" y="479.50"></text></g><g><title>alloc::alloc::alloc (53 samples, 0.04%)</title><rect x="27.1776%" y="453" width="0.0353%" height="15" fill="rgb(236,108,47)" fg:x="40795" fg:w="53"/><text x="27.4276%" y="463.50"></text></g><g><title>__rg_alloc (53 samples, 0.04%)</title><rect x="27.1776%" y="437" width="0.0353%" height="15" fill="rgb(234,93,0)" fg:x="40795" fg:w="53"/><text x="27.4276%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (53 samples, 0.04%)</title><rect x="27.1776%" y="421" width="0.0353%" height="15" fill="rgb(224,213,32)" fg:x="40795" fg:w="53"/><text x="27.4276%" y="431.50"></text></g><g><title>sn_rust_alloc (53 samples, 0.04%)</title><rect x="27.1776%" y="405" width="0.0353%" height="15" fill="rgb(251,11,48)" fg:x="40795" fg:w="53"/><text x="27.4276%" y="415.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (53 samples, 0.04%)</title><rect x="27.1776%" y="389" width="0.0353%" height="15" fill="rgb(236,173,5)" fg:x="40795" fg:w="53"/><text x="27.4276%" y="399.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (164 samples, 0.11%)</title><rect x="27.2742%" y="485" width="0.1093%" height="15" fill="rgb(230,95,12)" fg:x="40940" fg:w="164"/><text x="27.5242%" y="495.50"></text></g><g><title>[libc-2.31.so] (163 samples, 0.11%)</title><rect x="27.3835%" y="469" width="0.1086%" height="15" fill="rgb(232,209,1)" fg:x="41104" fg:w="163"/><text x="27.6335%" y="479.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (324 samples, 0.22%)</title><rect x="27.3835%" y="485" width="0.2158%" height="15" fill="rgb(232,6,1)" fg:x="41104" fg:w="324"/><text x="27.6335%" y="495.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (161 samples, 0.11%)</title><rect x="27.4921%" y="469" width="0.1073%" height="15" fill="rgb(210,224,50)" fg:x="41267" fg:w="161"/><text x="27.7421%" y="479.50"></text></g><g><title>[libc-2.31.so] (151 samples, 0.10%)</title><rect x="27.4988%" y="453" width="0.1006%" height="15" fill="rgb(228,127,35)" fg:x="41277" fg:w="151"/><text x="27.7488%" y="463.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (119 samples, 0.08%)</title><rect x="27.6033%" y="453" width="0.0793%" height="15" fill="rgb(245,102,45)" fg:x="41434" fg:w="119"/><text x="27.8533%" y="463.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (116 samples, 0.08%)</title><rect x="27.6053%" y="437" width="0.0773%" height="15" fill="rgb(214,1,49)" fg:x="41437" fg:w="116"/><text x="27.8553%" y="447.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (116 samples, 0.08%)</title><rect x="27.6053%" y="421" width="0.0773%" height="15" fill="rgb(226,163,40)" fg:x="41437" fg:w="116"/><text x="27.8553%" y="431.50"></text></g><g><title>[libc-2.31.so] (108 samples, 0.07%)</title><rect x="27.6107%" y="405" width="0.0719%" height="15" fill="rgb(239,212,28)" fg:x="41445" fg:w="108"/><text x="27.8607%" y="415.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (23 samples, 0.02%)</title><rect x="27.6826%" y="453" width="0.0153%" height="15" fill="rgb(220,20,13)" fg:x="41553" fg:w="23"/><text x="27.9326%" y="463.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (307 samples, 0.20%)</title><rect x="27.5993%" y="485" width="0.2045%" height="15" fill="rgb(210,164,35)" fg:x="41428" fg:w="307"/><text x="27.8493%" y="495.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (307 samples, 0.20%)</title><rect x="27.5993%" y="469" width="0.2045%" height="15" fill="rgb(248,109,41)" fg:x="41428" fg:w="307"/><text x="27.8493%" y="479.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (159 samples, 0.11%)</title><rect x="27.6979%" y="453" width="0.1059%" height="15" fill="rgb(238,23,50)" fg:x="41576" fg:w="159"/><text x="27.9479%" y="463.50"></text></g><g><title>[libc-2.31.so] (158 samples, 0.11%)</title><rect x="27.6986%" y="437" width="0.1053%" height="15" fill="rgb(211,48,49)" fg:x="41577" fg:w="158"/><text x="27.9486%" y="447.50"></text></g><g><title>[libc-2.31.so] (246 samples, 0.16%)</title><rect x="27.8039%" y="485" width="0.1639%" height="15" fill="rgb(223,36,21)" fg:x="41735" fg:w="246"/><text x="28.0539%" y="495.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (101 samples, 0.07%)</title><rect x="27.9678%" y="485" width="0.0673%" height="15" fill="rgb(207,123,46)" fg:x="41981" fg:w="101"/><text x="28.2178%" y="495.50"></text></g><g><title>[libc-2.31.so] (88 samples, 0.06%)</title><rect x="27.9764%" y="469" width="0.0586%" height="15" fill="rgb(240,218,32)" fg:x="41994" fg:w="88"/><text x="28.2264%" y="479.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn (16 samples, 0.01%)</title><rect x="28.0357%" y="437" width="0.0107%" height="15" fill="rgb(252,5,43)" fg:x="42083" fg:w="16"/><text x="28.2857%" y="447.50"></text></g><g><title>sn_rust_dealloc (122 samples, 0.08%)</title><rect x="28.0464%" y="437" width="0.0813%" height="15" fill="rgb(252,84,19)" fg:x="42099" fg:w="122"/><text x="28.2964%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (142 samples, 0.09%)</title><rect x="28.0350%" y="485" width="0.0946%" height="15" fill="rgb(243,152,39)" fg:x="42082" fg:w="142"/><text x="28.2850%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (142 samples, 0.09%)</title><rect x="28.0350%" y="469" width="0.0946%" height="15" fill="rgb(234,160,15)" fg:x="42082" fg:w="142"/><text x="28.2850%" y="479.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (142 samples, 0.09%)</title><rect x="28.0350%" y="453" width="0.0946%" height="15" fill="rgb(237,34,20)" fg:x="42082" fg:w="142"/><text x="28.2850%" y="463.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::pull_data (77 samples, 0.05%)</title><rect x="28.1323%" y="469" width="0.0513%" height="15" fill="rgb(229,97,13)" fg:x="42228" fg:w="77"/><text x="28.3823%" y="479.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data (57 samples, 0.04%)</title><rect x="28.1456%" y="453" width="0.0380%" height="15" fill="rgb(234,71,50)" fg:x="42248" fg:w="57"/><text x="28.3956%" y="463.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (57 samples, 0.04%)</title><rect x="28.1456%" y="437" width="0.0380%" height="15" fill="rgb(253,155,4)" fg:x="42248" fg:w="57"/><text x="28.3956%" y="447.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (57 samples, 0.04%)</title><rect x="28.1456%" y="421" width="0.0380%" height="15" fill="rgb(222,185,37)" fg:x="42248" fg:w="57"/><text x="28.3956%" y="431.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (57 samples, 0.04%)</title><rect x="28.1456%" y="405" width="0.0380%" height="15" fill="rgb(251,177,13)" fg:x="42248" fg:w="57"/><text x="28.3956%" y="415.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (52 samples, 0.03%)</title><rect x="28.1490%" y="389" width="0.0346%" height="15" fill="rgb(250,179,40)" fg:x="42253" fg:w="52"/><text x="28.3990%" y="399.50"></text></g><g><title>alloc::alloc::exchange_malloc (50 samples, 0.03%)</title><rect x="28.1503%" y="373" width="0.0333%" height="15" fill="rgb(242,44,2)" fg:x="42255" fg:w="50"/><text x="28.4003%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (50 samples, 0.03%)</title><rect x="28.1503%" y="357" width="0.0333%" height="15" fill="rgb(216,177,13)" fg:x="42255" fg:w="50"/><text x="28.4003%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (50 samples, 0.03%)</title><rect x="28.1503%" y="341" width="0.0333%" height="15" fill="rgb(216,106,43)" fg:x="42255" fg:w="50"/><text x="28.4003%" y="351.50"></text></g><g><title>alloc::alloc::alloc (49 samples, 0.03%)</title><rect x="28.1510%" y="325" width="0.0326%" height="15" fill="rgb(216,183,2)" fg:x="42256" fg:w="49"/><text x="28.4010%" y="335.50"></text></g><g><title>__rg_alloc (49 samples, 0.03%)</title><rect x="28.1510%" y="309" width="0.0326%" height="15" fill="rgb(249,75,3)" fg:x="42256" fg:w="49"/><text x="28.4010%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (49 samples, 0.03%)</title><rect x="28.1510%" y="293" width="0.0326%" height="15" fill="rgb(219,67,39)" fg:x="42256" fg:w="49"/><text x="28.4010%" y="303.50"></text></g><g><title>sn_rust_alloc (49 samples, 0.03%)</title><rect x="28.1510%" y="277" width="0.0326%" height="15" fill="rgb(253,228,2)" fg:x="42256" fg:w="49"/><text x="28.4010%" y="287.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1,477 samples, 0.98%)</title><rect x="27.2136%" y="565" width="0.9840%" height="15" fill="rgb(235,138,27)" fg:x="40849" fg:w="1477"/><text x="27.4636%" y="575.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (1,477 samples, 0.98%)</title><rect x="27.2136%" y="549" width="0.9840%" height="15" fill="rgb(236,97,51)" fg:x="40849" fg:w="1477"/><text x="27.4636%" y="559.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,477 samples, 0.98%)</title><rect x="27.2136%" y="533" width="0.9840%" height="15" fill="rgb(240,80,30)" fg:x="40849" fg:w="1477"/><text x="27.4636%" y="543.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,477 samples, 0.98%)</title><rect x="27.2136%" y="517" width="0.9840%" height="15" fill="rgb(230,178,19)" fg:x="40849" fg:w="1477"/><text x="27.4636%" y="527.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (1,463 samples, 0.97%)</title><rect x="27.2229%" y="501" width="0.9747%" height="15" fill="rgb(210,190,27)" fg:x="40863" fg:w="1463"/><text x="27.4729%" y="511.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_TO&lt;_ErasedPtr&gt;::pull_data (102 samples, 0.07%)</title><rect x="28.1296%" y="485" width="0.0680%" height="15" fill="rgb(222,107,31)" fg:x="42224" fg:w="102"/><text x="28.3796%" y="495.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::_::&lt;impl tremor_runtime::connectors::source::RawSource_trait::VTableInner_Ref&lt;_Self,_ErasedPtr&gt;&gt;::pull_data (19 samples, 0.01%)</title><rect x="28.1849%" y="469" width="0.0127%" height="15" fill="rgb(216,127,34)" fg:x="42307" fg:w="19"/><text x="28.4349%" y="479.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (1,478 samples, 0.98%)</title><rect x="27.2136%" y="581" width="0.9846%" height="15" fill="rgb(234,116,52)" fg:x="40849" fg:w="1478"/><text x="27.4636%" y="591.50"></text></g><g><title>async_global_executor::threading::thread_main_loop (1,490 samples, 0.99%)</title><rect x="27.2130%" y="1045" width="0.9926%" height="15" fill="rgb(222,124,15)" fg:x="40848" fg:w="1490"/><text x="27.4630%" y="1055.50"></text></g><g><title>std::panic::catch_unwind (1,490 samples, 0.99%)</title><rect x="27.2130%" y="1029" width="0.9926%" height="15" fill="rgb(231,179,28)" fg:x="40848" fg:w="1490"/><text x="27.4630%" y="1039.50"></text></g><g><title>std::panicking::try (1,490 samples, 0.99%)</title><rect x="27.2130%" y="1013" width="0.9926%" height="15" fill="rgb(226,93,45)" fg:x="40848" fg:w="1490"/><text x="27.4630%" y="1023.50"></text></g><g><title>std::panicking::try::do_call (1,490 samples, 0.99%)</title><rect x="27.2130%" y="997" width="0.9926%" height="15" fill="rgb(215,8,51)" fg:x="40848" fg:w="1490"/><text x="27.4630%" y="1007.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (1,490 samples, 0.99%)</title><rect x="27.2130%" y="981" width="0.9926%" height="15" fill="rgb(223,106,5)" fg:x="40848" fg:w="1490"/><text x="27.4630%" y="991.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,490 samples, 0.99%)</title><rect x="27.2130%" y="965" width="0.9926%" height="15" fill="rgb(250,191,5)" fg:x="40848" fg:w="1490"/><text x="27.4630%" y="975.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,490 samples, 0.99%)</title><rect x="27.2130%" y="949" width="0.9926%" height="15" fill="rgb(242,132,44)" fg:x="40848" fg:w="1490"/><text x="27.4630%" y="959.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (1,490 samples, 0.99%)</title><rect x="27.2130%" y="933" width="0.9926%" height="15" fill="rgb(251,152,29)" fg:x="40848" fg:w="1490"/><text x="27.4630%" y="943.50"></text></g><g><title>async_global_executor::reactor::block_on (1,490 samples, 0.99%)</title><rect x="27.2130%" y="917" width="0.9926%" height="15" fill="rgb(218,179,5)" fg:x="40848" fg:w="1490"/><text x="27.4630%" y="927.50"></text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (1,490 samples, 0.99%)</title><rect x="27.2130%" y="901" width="0.9926%" height="15" fill="rgb(227,67,19)" fg:x="40848" fg:w="1490"/><text x="27.4630%" y="911.50"></text></g><g><title>async_io::driver::block_on (1,490 samples, 0.99%)</title><rect x="27.2130%" y="885" width="0.9926%" height="15" fill="rgb(233,119,31)" fg:x="40848" fg:w="1490"/><text x="27.4630%" y="895.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,490 samples, 0.99%)</title><rect x="27.2130%" y="869" width="0.9926%" height="15" fill="rgb(241,120,22)" fg:x="40848" fg:w="1490"/><text x="27.4630%" y="879.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,490 samples, 0.99%)</title><rect x="27.2130%" y="853" width="0.9926%" height="15" fill="rgb(224,102,30)" fg:x="40848" fg:w="1490"/><text x="27.4630%" y="863.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (1,490 samples, 0.99%)</title><rect x="27.2130%" y="837" width="0.9926%" height="15" fill="rgb(210,164,37)" fg:x="40848" fg:w="1490"/><text x="27.4630%" y="847.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,490 samples, 0.99%)</title><rect x="27.2130%" y="821" width="0.9926%" height="15" fill="rgb(226,191,16)" fg:x="40848" fg:w="1490"/><text x="27.4630%" y="831.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,490 samples, 0.99%)</title><rect x="27.2130%" y="805" width="0.9926%" height="15" fill="rgb(214,40,45)" fg:x="40848" fg:w="1490"/><text x="27.4630%" y="815.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (1,490 samples, 0.99%)</title><rect x="27.2130%" y="789" width="0.9926%" height="15" fill="rgb(244,29,26)" fg:x="40848" fg:w="1490"/><text x="27.4630%" y="799.50"></text></g><g><title>async_task::runnable::Runnable::run (1,490 samples, 0.99%)</title><rect x="27.2130%" y="773" width="0.9926%" height="15" fill="rgb(216,16,5)" fg:x="40848" fg:w="1490"/><text x="27.4630%" y="783.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (1,490 samples, 0.99%)</title><rect x="27.2130%" y="757" width="0.9926%" height="15" fill="rgb(249,76,35)" fg:x="40848" fg:w="1490"/><text x="27.4630%" y="767.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,490 samples, 0.99%)</title><rect x="27.2130%" y="741" width="0.9926%" height="15" fill="rgb(207,11,44)" fg:x="40848" fg:w="1490"/><text x="27.4630%" y="751.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,490 samples, 0.99%)</title><rect x="27.2130%" y="725" width="0.9926%" height="15" fill="rgb(228,190,49)" fg:x="40848" fg:w="1490"/><text x="27.4630%" y="735.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (1,490 samples, 0.99%)</title><rect x="27.2130%" y="709" width="0.9926%" height="15" fill="rgb(214,173,12)" fg:x="40848" fg:w="1490"/><text x="27.4630%" y="719.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (1,490 samples, 0.99%)</title><rect x="27.2130%" y="693" width="0.9926%" height="15" fill="rgb(218,26,35)" fg:x="40848" fg:w="1490"/><text x="27.4630%" y="703.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (1,490 samples, 0.99%)</title><rect x="27.2130%" y="677" width="0.9926%" height="15" fill="rgb(220,200,19)" fg:x="40848" fg:w="1490"/><text x="27.4630%" y="687.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,490 samples, 0.99%)</title><rect x="27.2130%" y="661" width="0.9926%" height="15" fill="rgb(239,95,49)" fg:x="40848" fg:w="1490"/><text x="27.4630%" y="671.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,490 samples, 0.99%)</title><rect x="27.2130%" y="645" width="0.9926%" height="15" fill="rgb(235,85,53)" fg:x="40848" fg:w="1490"/><text x="27.4630%" y="655.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (1,490 samples, 0.99%)</title><rect x="27.2130%" y="629" width="0.9926%" height="15" fill="rgb(233,133,31)" fg:x="40848" fg:w="1490"/><text x="27.4630%" y="639.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,490 samples, 0.99%)</title><rect x="27.2130%" y="613" width="0.9926%" height="15" fill="rgb(218,25,20)" fg:x="40848" fg:w="1490"/><text x="27.4630%" y="623.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,490 samples, 0.99%)</title><rect x="27.2130%" y="597" width="0.9926%" height="15" fill="rgb(252,210,38)" fg:x="40848" fg:w="1490"/><text x="27.4630%" y="607.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (375 samples, 0.25%)</title><rect x="28.4334%" y="725" width="0.2498%" height="15" fill="rgb(242,134,21)" fg:x="42680" fg:w="375"/><text x="28.6834%" y="735.50"></text></g><g><title>[libc-2.31.so] (318 samples, 0.21%)</title><rect x="28.4714%" y="709" width="0.2119%" height="15" fill="rgb(213,28,48)" fg:x="42737" fg:w="318"/><text x="28.7214%" y="719.50"></text></g><g><title>[libc-2.31.so] (159 samples, 0.11%)</title><rect x="28.7072%" y="709" width="0.1059%" height="15" fill="rgb(250,196,2)" fg:x="43091" fg:w="159"/><text x="28.9572%" y="719.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (432 samples, 0.29%)</title><rect x="28.9164%" y="693" width="0.2878%" height="15" fill="rgb(227,5,17)" fg:x="43405" fg:w="432"/><text x="29.1664%" y="703.50"></text></g><g><title>[libc-2.31.so] (130 samples, 0.09%)</title><rect x="29.2109%" y="677" width="0.0866%" height="15" fill="rgb(221,226,24)" fg:x="43847" fg:w="130"/><text x="29.4609%" y="687.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (270 samples, 0.18%)</title><rect x="29.2042%" y="693" width="0.1799%" height="15" fill="rgb(211,5,48)" fg:x="43837" fg:w="270"/><text x="29.4542%" y="703.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (130 samples, 0.09%)</title><rect x="29.2975%" y="677" width="0.0866%" height="15" fill="rgb(219,150,6)" fg:x="43977" fg:w="130"/><text x="29.5475%" y="687.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (105 samples, 0.07%)</title><rect x="29.3841%" y="661" width="0.0700%" height="15" fill="rgb(251,46,16)" fg:x="44107" fg:w="105"/><text x="29.6341%" y="671.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (100 samples, 0.07%)</title><rect x="29.3874%" y="645" width="0.0666%" height="15" fill="rgb(220,204,40)" fg:x="44112" fg:w="100"/><text x="29.6374%" y="655.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (100 samples, 0.07%)</title><rect x="29.3874%" y="629" width="0.0666%" height="15" fill="rgb(211,85,2)" fg:x="44112" fg:w="100"/><text x="29.6374%" y="639.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (21 samples, 0.01%)</title><rect x="29.4820%" y="613" width="0.0140%" height="15" fill="rgb(229,17,7)" fg:x="44254" fg:w="21"/><text x="29.7320%" y="623.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (21 samples, 0.01%)</title><rect x="29.4820%" y="597" width="0.0140%" height="15" fill="rgb(239,72,28)" fg:x="44254" fg:w="21"/><text x="29.7320%" y="607.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (21 samples, 0.01%)</title><rect x="29.4820%" y="581" width="0.0140%" height="15" fill="rgb(230,47,54)" fg:x="44254" fg:w="21"/><text x="29.7320%" y="591.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (2,091 samples, 1.39%)</title><rect x="29.4574%" y="645" width="1.3930%" height="15" fill="rgb(214,50,8)" fg:x="44217" fg:w="2091"/><text x="29.7074%" y="655.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (2,072 samples, 1.38%)</title><rect x="29.4700%" y="629" width="1.3804%" height="15" fill="rgb(216,198,43)" fg:x="44236" fg:w="2072"/><text x="29.7200%" y="639.50"></text></g><g><title>std::panic::catch_unwind (2,033 samples, 1.35%)</title><rect x="29.4960%" y="613" width="1.3544%" height="15" fill="rgb(234,20,35)" fg:x="44275" fg:w="2033"/><text x="29.7460%" y="623.50"></text></g><g><title>std::panicking::try (2,033 samples, 1.35%)</title><rect x="29.4960%" y="597" width="1.3544%" height="15" fill="rgb(254,45,19)" fg:x="44275" fg:w="2033"/><text x="29.7460%" y="607.50"></text></g><g><title>std::panicking::try::do_call (2,033 samples, 1.35%)</title><rect x="29.4960%" y="581" width="1.3544%" height="15" fill="rgb(219,14,44)" fg:x="44275" fg:w="2033"/><text x="29.7460%" y="591.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (2,104 samples, 1.40%)</title><rect x="29.4540%" y="661" width="1.4017%" height="15" fill="rgb(217,220,26)" fg:x="44212" fg:w="2104"/><text x="29.7040%" y="671.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,300 samples, 1.53%)</title><rect x="29.3841%" y="693" width="1.5323%" height="15" fill="rgb(213,158,28)" fg:x="44107" fg:w="2300"/><text x="29.6341%" y="703.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,300 samples, 1.53%)</title><rect x="29.3841%" y="677" width="1.5323%" height="15" fill="rgb(252,51,52)" fg:x="44107" fg:w="2300"/><text x="29.6341%" y="687.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (91 samples, 0.06%)</title><rect x="30.8557%" y="661" width="0.0606%" height="15" fill="rgb(246,89,16)" fg:x="46316" fg:w="91"/><text x="31.1057%" y="671.50"></text></g><g><title>[libc-2.31.so] (427 samples, 0.28%)</title><rect x="30.9164%" y="693" width="0.2845%" height="15" fill="rgb(216,158,49)" fg:x="46407" fg:w="427"/><text x="31.1664%" y="703.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (49 samples, 0.03%)</title><rect x="31.2008%" y="693" width="0.0326%" height="15" fill="rgb(236,107,19)" fg:x="46834" fg:w="49"/><text x="31.4508%" y="703.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn (26 samples, 0.02%)</title><rect x="31.2375%" y="645" width="0.0173%" height="15" fill="rgb(228,185,30)" fg:x="46889" fg:w="26"/><text x="31.4875%" y="655.50"></text></g><g><title>async_ffi::DropBomb::with (20 samples, 0.01%)</title><rect x="31.2415%" y="629" width="0.0133%" height="15" fill="rgb(246,134,8)" fg:x="46895" fg:w="20"/><text x="31.4915%" y="639.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn::{{closure}} (20 samples, 0.01%)</title><rect x="31.2415%" y="613" width="0.0133%" height="15" fill="rgb(214,143,50)" fg:x="46895" fg:w="20"/><text x="31.4915%" y="623.50"></text></g><g><title>core::mem::drop (20 samples, 0.01%)</title><rect x="31.2415%" y="597" width="0.0133%" height="15" fill="rgb(228,75,8)" fg:x="46895" fg:w="20"/><text x="31.4915%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}}&gt;&gt;&gt; (20 samples, 0.01%)</title><rect x="31.2415%" y="581" width="0.0133%" height="15" fill="rgb(207,175,4)" fg:x="46895" fg:w="20"/><text x="31.4915%" y="591.50"></text></g><g><title>sn_rust_dealloc (33 samples, 0.02%)</title><rect x="31.2548%" y="645" width="0.0220%" height="15" fill="rgb(205,108,24)" fg:x="46915" fg:w="33"/><text x="31.5048%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (69 samples, 0.05%)</title><rect x="31.2335%" y="693" width="0.0460%" height="15" fill="rgb(244,120,49)" fg:x="46883" fg:w="69"/><text x="31.4835%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (69 samples, 0.05%)</title><rect x="31.2335%" y="677" width="0.0460%" height="15" fill="rgb(223,47,38)" fg:x="46883" fg:w="69"/><text x="31.4835%" y="687.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (69 samples, 0.05%)</title><rect x="31.2335%" y="661" width="0.0460%" height="15" fill="rgb(229,179,11)" fg:x="46883" fg:w="69"/><text x="31.4835%" y="671.50"></text></g><g><title>[libc-2.31.so] (95 samples, 0.06%)</title><rect x="31.4726%" y="677" width="0.0633%" height="15" fill="rgb(231,122,1)" fg:x="47242" fg:w="95"/><text x="31.7226%" y="687.50"></text></g><g><title>[libc-2.31.so] (140 samples, 0.09%)</title><rect x="31.5646%" y="597" width="0.0933%" height="15" fill="rgb(245,119,9)" fg:x="47380" fg:w="140"/><text x="31.8146%" y="607.50"></text></g><g><title>[libc-2.31.so] (107 samples, 0.07%)</title><rect x="31.6685%" y="581" width="0.0713%" height="15" fill="rgb(241,163,25)" fg:x="47536" fg:w="107"/><text x="31.9185%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (44 samples, 0.03%)</title><rect x="31.8517%" y="469" width="0.0293%" height="15" fill="rgb(217,214,3)" fg:x="47811" fg:w="44"/><text x="32.1017%" y="479.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (529 samples, 0.35%)</title><rect x="31.5359%" y="677" width="0.3524%" height="15" fill="rgb(240,86,28)" fg:x="47337" fg:w="529"/><text x="31.7859%" y="687.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event (508 samples, 0.34%)</title><rect x="31.5499%" y="661" width="0.3384%" height="15" fill="rgb(215,47,9)" fg:x="47358" fg:w="508"/><text x="31.7999%" y="671.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (506 samples, 0.34%)</title><rect x="31.5512%" y="645" width="0.3371%" height="15" fill="rgb(252,25,45)" fg:x="47360" fg:w="506"/><text x="31.8012%" y="655.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (506 samples, 0.34%)</title><rect x="31.5512%" y="629" width="0.3371%" height="15" fill="rgb(251,164,9)" fg:x="47360" fg:w="506"/><text x="31.8012%" y="639.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (506 samples, 0.34%)</title><rect x="31.5512%" y="613" width="0.3371%" height="15" fill="rgb(233,194,0)" fg:x="47360" fg:w="506"/><text x="31.8012%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (346 samples, 0.23%)</title><rect x="31.6578%" y="597" width="0.2305%" height="15" fill="rgb(249,111,24)" fg:x="47520" fg:w="346"/><text x="31.9078%" y="607.50"></text></g><g><title>alloc::alloc::exchange_malloc (223 samples, 0.15%)</title><rect x="31.7398%" y="581" width="0.1486%" height="15" fill="rgb(250,223,3)" fg:x="47643" fg:w="223"/><text x="31.9898%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (223 samples, 0.15%)</title><rect x="31.7398%" y="565" width="0.1486%" height="15" fill="rgb(236,178,37)" fg:x="47643" fg:w="223"/><text x="31.9898%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (223 samples, 0.15%)</title><rect x="31.7398%" y="549" width="0.1486%" height="15" fill="rgb(241,158,50)" fg:x="47643" fg:w="223"/><text x="31.9898%" y="559.50"></text></g><g><title>alloc::alloc::alloc (218 samples, 0.15%)</title><rect x="31.7431%" y="533" width="0.1452%" height="15" fill="rgb(213,121,41)" fg:x="47648" fg:w="218"/><text x="31.9931%" y="543.50"></text></g><g><title>__rg_alloc (218 samples, 0.15%)</title><rect x="31.7431%" y="517" width="0.1452%" height="15" fill="rgb(240,92,3)" fg:x="47648" fg:w="218"/><text x="31.9931%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (218 samples, 0.15%)</title><rect x="31.7431%" y="501" width="0.1452%" height="15" fill="rgb(205,123,3)" fg:x="47648" fg:w="218"/><text x="31.9931%" y="511.50"></text></g><g><title>sn_rust_alloc (214 samples, 0.14%)</title><rect x="31.7458%" y="485" width="0.1426%" height="15" fill="rgb(205,97,47)" fg:x="47652" fg:w="214"/><text x="31.9958%" y="495.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (4,620 samples, 3.08%)</title><rect x="28.8132%" y="709" width="3.0778%" height="15" fill="rgb(247,152,14)" fg:x="43250" fg:w="4620"/><text x="29.0632%" y="719.50">tre..</text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_TO&lt;_ErasedPtr&gt;::on_event (918 samples, 0.61%)</title><rect x="31.2794%" y="693" width="0.6116%" height="15" fill="rgb(248,195,53)" fg:x="46952" fg:w="918"/><text x="31.5294%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (24 samples, 0.02%)</title><rect x="32.0069%" y="677" width="0.0160%" height="15" fill="rgb(226,201,16)" fg:x="48044" fg:w="24"/><text x="32.2569%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (24 samples, 0.02%)</title><rect x="32.0069%" y="661" width="0.0160%" height="15" fill="rgb(205,98,0)" fg:x="48044" fg:w="24"/><text x="32.2569%" y="671.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (24 samples, 0.02%)</title><rect x="32.0069%" y="645" width="0.0160%" height="15" fill="rgb(214,191,48)" fg:x="48044" fg:w="24"/><text x="32.2569%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (30 samples, 0.02%)</title><rect x="32.0376%" y="597" width="0.0200%" height="15" fill="rgb(237,112,39)" fg:x="48090" fg:w="30"/><text x="32.2876%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (30 samples, 0.02%)</title><rect x="32.0376%" y="581" width="0.0200%" height="15" fill="rgb(247,203,27)" fg:x="48090" fg:w="30"/><text x="32.2876%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (30 samples, 0.02%)</title><rect x="32.0376%" y="565" width="0.0200%" height="15" fill="rgb(235,124,28)" fg:x="48090" fg:w="30"/><text x="32.2876%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (59 samples, 0.04%)</title><rect x="32.0256%" y="613" width="0.0393%" height="15" fill="rgb(208,207,46)" fg:x="48072" fg:w="59"/><text x="32.2756%" y="623.50"></text></g><g><title>sn_rust_dealloc (129 samples, 0.09%)</title><rect x="32.0649%" y="613" width="0.0859%" height="15" fill="rgb(234,176,4)" fg:x="48131" fg:w="129"/><text x="32.3149%" y="623.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,197 samples, 3.46%)</title><rect x="28.6899%" y="725" width="3.4622%" height="15" fill="rgb(230,133,28)" fg:x="43065" fg:w="5197"/><text x="28.9399%" y="735.50">&lt;co..</text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (392 samples, 0.26%)</title><rect x="31.8910%" y="709" width="0.2612%" height="15" fill="rgb(211,137,40)" fg:x="47870" fg:w="392"/><text x="32.1410%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (218 samples, 0.15%)</title><rect x="32.0069%" y="693" width="0.1452%" height="15" fill="rgb(254,35,13)" fg:x="48044" fg:w="218"/><text x="32.2569%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (194 samples, 0.13%)</title><rect x="32.0229%" y="677" width="0.1292%" height="15" fill="rgb(225,49,51)" fg:x="48068" fg:w="194"/><text x="32.2729%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (194 samples, 0.13%)</title><rect x="32.0229%" y="661" width="0.1292%" height="15" fill="rgb(251,10,15)" fg:x="48068" fg:w="194"/><text x="32.2729%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (194 samples, 0.13%)</title><rect x="32.0229%" y="645" width="0.1292%" height="15" fill="rgb(228,207,15)" fg:x="48068" fg:w="194"/><text x="32.2729%" y="655.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (194 samples, 0.13%)</title><rect x="32.0229%" y="629" width="0.1292%" height="15" fill="rgb(241,99,19)" fg:x="48068" fg:w="194"/><text x="32.2729%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (75 samples, 0.05%)</title><rect x="32.1768%" y="613" width="0.0500%" height="15" fill="rgb(207,104,49)" fg:x="48299" fg:w="75"/><text x="32.4268%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (62 samples, 0.04%)</title><rect x="32.1855%" y="597" width="0.0413%" height="15" fill="rgb(234,99,18)" fg:x="48312" fg:w="62"/><text x="32.4355%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (62 samples, 0.04%)</title><rect x="32.1855%" y="581" width="0.0413%" height="15" fill="rgb(213,191,49)" fg:x="48312" fg:w="62"/><text x="32.4355%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (48 samples, 0.03%)</title><rect x="32.1948%" y="565" width="0.0320%" height="15" fill="rgb(210,226,19)" fg:x="48326" fg:w="48"/><text x="32.4448%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (48 samples, 0.03%)</title><rect x="32.1948%" y="549" width="0.0320%" height="15" fill="rgb(229,97,18)" fg:x="48326" fg:w="48"/><text x="32.4448%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (48 samples, 0.03%)</title><rect x="32.1948%" y="533" width="0.0320%" height="15" fill="rgb(211,167,15)" fg:x="48326" fg:w="48"/><text x="32.4448%" y="543.50"></text></g><g><title>alloc::alloc::alloc (48 samples, 0.03%)</title><rect x="32.1948%" y="517" width="0.0320%" height="15" fill="rgb(210,169,34)" fg:x="48326" fg:w="48"/><text x="32.4448%" y="527.50"></text></g><g><title>__rg_alloc (48 samples, 0.03%)</title><rect x="32.1948%" y="501" width="0.0320%" height="15" fill="rgb(241,121,31)" fg:x="48326" fg:w="48"/><text x="32.4448%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (48 samples, 0.03%)</title><rect x="32.1948%" y="485" width="0.0320%" height="15" fill="rgb(232,40,11)" fg:x="48326" fg:w="48"/><text x="32.4448%" y="495.50"></text></g><g><title>sn_rust_alloc (47 samples, 0.03%)</title><rect x="32.1955%" y="469" width="0.0313%" height="15" fill="rgb(205,86,26)" fg:x="48327" fg:w="47"/><text x="32.4455%" y="479.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (102 samples, 0.07%)</title><rect x="32.1688%" y="693" width="0.0680%" height="15" fill="rgb(231,126,28)" fg:x="48287" fg:w="102"/><text x="32.4188%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (98 samples, 0.07%)</title><rect x="32.1715%" y="677" width="0.0653%" height="15" fill="rgb(219,221,18)" fg:x="48291" fg:w="98"/><text x="32.4215%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (95 samples, 0.06%)</title><rect x="32.1735%" y="661" width="0.0633%" height="15" fill="rgb(211,40,0)" fg:x="48294" fg:w="95"/><text x="32.4235%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (90 samples, 0.06%)</title><rect x="32.1768%" y="645" width="0.0600%" height="15" fill="rgb(239,85,43)" fg:x="48299" fg:w="90"/><text x="32.4268%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (90 samples, 0.06%)</title><rect x="32.1768%" y="629" width="0.0600%" height="15" fill="rgb(231,55,21)" fg:x="48299" fg:w="90"/><text x="32.4268%" y="639.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (62 samples, 0.04%)</title><rect x="32.3860%" y="613" width="0.0413%" height="15" fill="rgb(225,184,43)" fg:x="48613" fg:w="62"/><text x="32.6360%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (62 samples, 0.04%)</title><rect x="32.3860%" y="597" width="0.0413%" height="15" fill="rgb(251,158,41)" fg:x="48613" fg:w="62"/><text x="32.6360%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (52 samples, 0.03%)</title><rect x="32.3927%" y="581" width="0.0346%" height="15" fill="rgb(234,159,37)" fg:x="48623" fg:w="52"/><text x="32.6427%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (45 samples, 0.03%)</title><rect x="32.3973%" y="565" width="0.0300%" height="15" fill="rgb(216,204,22)" fg:x="48630" fg:w="45"/><text x="32.6473%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (38 samples, 0.03%)</title><rect x="32.4020%" y="549" width="0.0253%" height="15" fill="rgb(214,17,3)" fg:x="48637" fg:w="38"/><text x="32.6520%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (38 samples, 0.03%)</title><rect x="32.4020%" y="533" width="0.0253%" height="15" fill="rgb(212,111,17)" fg:x="48637" fg:w="38"/><text x="32.6520%" y="543.50"></text></g><g><title>alloc::alloc::alloc (38 samples, 0.03%)</title><rect x="32.4020%" y="517" width="0.0253%" height="15" fill="rgb(221,157,24)" fg:x="48637" fg:w="38"/><text x="32.6520%" y="527.50"></text></g><g><title>__rg_alloc (38 samples, 0.03%)</title><rect x="32.4020%" y="501" width="0.0253%" height="15" fill="rgb(252,16,13)" fg:x="48637" fg:w="38"/><text x="32.6520%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (38 samples, 0.03%)</title><rect x="32.4020%" y="485" width="0.0253%" height="15" fill="rgb(221,62,2)" fg:x="48637" fg:w="38"/><text x="32.6520%" y="495.50"></text></g><g><title>sn_rust_alloc (38 samples, 0.03%)</title><rect x="32.4020%" y="469" width="0.0253%" height="15" fill="rgb(247,87,22)" fg:x="48637" fg:w="38"/><text x="32.6520%" y="479.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (106 samples, 0.07%)</title><rect x="32.3760%" y="661" width="0.0706%" height="15" fill="rgb(215,73,9)" fg:x="48598" fg:w="106"/><text x="32.6260%" y="671.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (106 samples, 0.07%)</title><rect x="32.3760%" y="645" width="0.0706%" height="15" fill="rgb(207,175,33)" fg:x="48598" fg:w="106"/><text x="32.6260%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (106 samples, 0.07%)</title><rect x="32.3760%" y="629" width="0.0706%" height="15" fill="rgb(243,129,54)" fg:x="48598" fg:w="106"/><text x="32.6260%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (29 samples, 0.02%)</title><rect x="32.4273%" y="613" width="0.0193%" height="15" fill="rgb(227,119,45)" fg:x="48675" fg:w="29"/><text x="32.6773%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (24 samples, 0.02%)</title><rect x="32.4306%" y="597" width="0.0160%" height="15" fill="rgb(205,109,36)" fg:x="48680" fg:w="24"/><text x="32.6806%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (24 samples, 0.02%)</title><rect x="32.4306%" y="581" width="0.0160%" height="15" fill="rgb(205,6,39)" fg:x="48680" fg:w="24"/><text x="32.6806%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (24 samples, 0.02%)</title><rect x="32.4306%" y="565" width="0.0160%" height="15" fill="rgb(221,32,16)" fg:x="48680" fg:w="24"/><text x="32.6806%" y="575.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (24 samples, 0.02%)</title><rect x="32.4306%" y="549" width="0.0160%" height="15" fill="rgb(228,144,50)" fg:x="48680" fg:w="24"/><text x="32.6806%" y="559.50"></text></g><g><title>abi_stable::erased_types::iterator::next (23 samples, 0.02%)</title><rect x="32.4619%" y="613" width="0.0153%" height="15" fill="rgb(229,201,53)" fg:x="48727" fg:w="23"/><text x="32.7119%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (38 samples, 0.03%)</title><rect x="32.4546%" y="645" width="0.0253%" height="15" fill="rgb(249,153,27)" fg:x="48716" fg:w="38"/><text x="32.7046%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (38 samples, 0.03%)</title><rect x="32.4546%" y="629" width="0.0253%" height="15" fill="rgb(227,106,25)" fg:x="48716" fg:w="38"/><text x="32.7046%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (47 samples, 0.03%)</title><rect x="32.4799%" y="645" width="0.0313%" height="15" fill="rgb(230,65,29)" fg:x="48754" fg:w="47"/><text x="32.7299%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (47 samples, 0.03%)</title><rect x="32.4799%" y="629" width="0.0313%" height="15" fill="rgb(221,57,46)" fg:x="48754" fg:w="47"/><text x="32.7299%" y="639.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (19 samples, 0.01%)</title><rect x="32.4986%" y="613" width="0.0127%" height="15" fill="rgb(229,161,17)" fg:x="48782" fg:w="19"/><text x="32.7486%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (19 samples, 0.01%)</title><rect x="32.4986%" y="597" width="0.0127%" height="15" fill="rgb(222,213,11)" fg:x="48782" fg:w="19"/><text x="32.7486%" y="607.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (17 samples, 0.01%)</title><rect x="32.5112%" y="645" width="0.0113%" height="15" fill="rgb(235,35,13)" fg:x="48801" fg:w="17"/><text x="32.7612%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (16 samples, 0.01%)</title><rect x="32.5119%" y="629" width="0.0107%" height="15" fill="rgb(233,158,34)" fg:x="48802" fg:w="16"/><text x="32.7619%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (16 samples, 0.01%)</title><rect x="32.5119%" y="613" width="0.0107%" height="15" fill="rgb(215,151,48)" fg:x="48802" fg:w="16"/><text x="32.7619%" y="623.50"></text></g><g><title>sn_rust_dealloc (33 samples, 0.02%)</title><rect x="32.5419%" y="533" width="0.0220%" height="15" fill="rgb(229,84,14)" fg:x="48847" fg:w="33"/><text x="32.7919%" y="543.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (619 samples, 0.41%)</title><rect x="32.1522%" y="725" width="0.4124%" height="15" fill="rgb(229,68,14)" fg:x="48262" fg:w="619"/><text x="32.4022%" y="735.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (596 samples, 0.40%)</title><rect x="32.1675%" y="709" width="0.3971%" height="15" fill="rgb(243,106,26)" fg:x="48285" fg:w="596"/><text x="32.4175%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (492 samples, 0.33%)</title><rect x="32.2368%" y="693" width="0.3278%" height="15" fill="rgb(206,45,38)" fg:x="48389" fg:w="492"/><text x="32.4868%" y="703.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (286 samples, 0.19%)</title><rect x="32.3740%" y="677" width="0.1905%" height="15" fill="rgb(226,6,15)" fg:x="48595" fg:w="286"/><text x="32.6240%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (177 samples, 0.12%)</title><rect x="32.4466%" y="661" width="0.1179%" height="15" fill="rgb(232,22,54)" fg:x="48704" fg:w="177"/><text x="32.6966%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (63 samples, 0.04%)</title><rect x="32.5226%" y="645" width="0.0420%" height="15" fill="rgb(229,222,32)" fg:x="48818" fg:w="63"/><text x="32.7726%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (63 samples, 0.04%)</title><rect x="32.5226%" y="629" width="0.0420%" height="15" fill="rgb(228,62,29)" fg:x="48818" fg:w="63"/><text x="32.7726%" y="639.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (63 samples, 0.04%)</title><rect x="32.5226%" y="613" width="0.0420%" height="15" fill="rgb(251,103,34)" fg:x="48818" fg:w="63"/><text x="32.7726%" y="623.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (53 samples, 0.04%)</title><rect x="32.5292%" y="597" width="0.0353%" height="15" fill="rgb(233,12,30)" fg:x="48828" fg:w="53"/><text x="32.7792%" y="607.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (52 samples, 0.03%)</title><rect x="32.5299%" y="581" width="0.0346%" height="15" fill="rgb(238,52,0)" fg:x="48829" fg:w="52"/><text x="32.7799%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (52 samples, 0.03%)</title><rect x="32.5299%" y="565" width="0.0346%" height="15" fill="rgb(223,98,5)" fg:x="48829" fg:w="52"/><text x="32.7799%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (52 samples, 0.03%)</title><rect x="32.5299%" y="549" width="0.0346%" height="15" fill="rgb(228,75,37)" fg:x="48829" fg:w="52"/><text x="32.7799%" y="559.50"></text></g><g><title>&lt;tremor_pipeline::EventId as core::clone::Clone&gt;::clone (54 samples, 0.04%)</title><rect x="32.5685%" y="709" width="0.0360%" height="15" fill="rgb(205,115,49)" fg:x="48887" fg:w="54"/><text x="32.8185%" y="719.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (42 samples, 0.03%)</title><rect x="32.5765%" y="693" width="0.0280%" height="15" fill="rgb(250,154,43)" fg:x="48899" fg:w="42"/><text x="32.8265%" y="703.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (17 samples, 0.01%)</title><rect x="32.5932%" y="677" width="0.0113%" height="15" fill="rgb(226,43,29)" fg:x="48924" fg:w="17"/><text x="32.8432%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (17 samples, 0.01%)</title><rect x="32.5932%" y="661" width="0.0113%" height="15" fill="rgb(249,228,39)" fg:x="48924" fg:w="17"/><text x="32.8432%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (17 samples, 0.01%)</title><rect x="32.5932%" y="645" width="0.0113%" height="15" fill="rgb(216,79,43)" fg:x="48924" fg:w="17"/><text x="32.8432%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (17 samples, 0.01%)</title><rect x="32.5932%" y="629" width="0.0113%" height="15" fill="rgb(228,95,12)" fg:x="48924" fg:w="17"/><text x="32.8432%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (17 samples, 0.01%)</title><rect x="32.5932%" y="613" width="0.0113%" height="15" fill="rgb(249,221,15)" fg:x="48924" fg:w="17"/><text x="32.8432%" y="623.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (59 samples, 0.04%)</title><rect x="32.6445%" y="597" width="0.0393%" height="15" fill="rgb(233,34,13)" fg:x="49001" fg:w="59"/><text x="32.8945%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (44 samples, 0.03%)</title><rect x="32.6545%" y="581" width="0.0293%" height="15" fill="rgb(214,103,39)" fg:x="49016" fg:w="44"/><text x="32.9045%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (44 samples, 0.03%)</title><rect x="32.6545%" y="565" width="0.0293%" height="15" fill="rgb(251,126,39)" fg:x="49016" fg:w="44"/><text x="32.9045%" y="575.50"></text></g><g><title>alloc::alloc::exchange_malloc (32 samples, 0.02%)</title><rect x="32.6625%" y="549" width="0.0213%" height="15" fill="rgb(214,216,36)" fg:x="49028" fg:w="32"/><text x="32.9125%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (32 samples, 0.02%)</title><rect x="32.6625%" y="533" width="0.0213%" height="15" fill="rgb(220,221,8)" fg:x="49028" fg:w="32"/><text x="32.9125%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (32 samples, 0.02%)</title><rect x="32.6625%" y="517" width="0.0213%" height="15" fill="rgb(240,216,3)" fg:x="49028" fg:w="32"/><text x="32.9125%" y="527.50"></text></g><g><title>alloc::alloc::alloc (32 samples, 0.02%)</title><rect x="32.6625%" y="501" width="0.0213%" height="15" fill="rgb(232,218,17)" fg:x="49028" fg:w="32"/><text x="32.9125%" y="511.50"></text></g><g><title>__rg_alloc (32 samples, 0.02%)</title><rect x="32.6625%" y="485" width="0.0213%" height="15" fill="rgb(229,163,45)" fg:x="49028" fg:w="32"/><text x="32.9125%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (32 samples, 0.02%)</title><rect x="32.6625%" y="469" width="0.0213%" height="15" fill="rgb(231,110,42)" fg:x="49028" fg:w="32"/><text x="32.9125%" y="479.50"></text></g><g><title>sn_rust_alloc (29 samples, 0.02%)</title><rect x="32.6645%" y="453" width="0.0193%" height="15" fill="rgb(208,170,48)" fg:x="49031" fg:w="29"/><text x="32.9145%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (25 samples, 0.02%)</title><rect x="32.9223%" y="533" width="0.0167%" height="15" fill="rgb(239,116,25)" fg:x="49418" fg:w="25"/><text x="33.1723%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (25 samples, 0.02%)</title><rect x="32.9223%" y="517" width="0.0167%" height="15" fill="rgb(219,200,50)" fg:x="49418" fg:w="25"/><text x="33.1723%" y="527.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (95 samples, 0.06%)</title><rect x="32.9389%" y="533" width="0.0633%" height="15" fill="rgb(245,200,0)" fg:x="49443" fg:w="95"/><text x="33.1889%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (95 samples, 0.06%)</title><rect x="32.9389%" y="517" width="0.0633%" height="15" fill="rgb(245,119,33)" fg:x="49443" fg:w="95"/><text x="33.1889%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (140 samples, 0.09%)</title><rect x="32.9223%" y="549" width="0.0933%" height="15" fill="rgb(231,125,12)" fg:x="49418" fg:w="140"/><text x="33.1723%" y="559.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_full (20 samples, 0.01%)</title><rect x="33.0022%" y="533" width="0.0133%" height="15" fill="rgb(216,96,41)" fg:x="49538" fg:w="20"/><text x="33.2522%" y="543.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (573 samples, 0.38%)</title><rect x="32.6398%" y="677" width="0.3817%" height="15" fill="rgb(248,43,45)" fg:x="48994" fg:w="573"/><text x="32.8898%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (566 samples, 0.38%)</title><rect x="32.6445%" y="661" width="0.3771%" height="15" fill="rgb(217,222,7)" fg:x="49001" fg:w="566"/><text x="32.8945%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (566 samples, 0.38%)</title><rect x="32.6445%" y="645" width="0.3771%" height="15" fill="rgb(233,28,6)" fg:x="49001" fg:w="566"/><text x="32.8945%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (566 samples, 0.38%)</title><rect x="32.6445%" y="629" width="0.3771%" height="15" fill="rgb(231,218,15)" fg:x="49001" fg:w="566"/><text x="32.8945%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (566 samples, 0.38%)</title><rect x="32.6445%" y="613" width="0.3771%" height="15" fill="rgb(226,171,48)" fg:x="49001" fg:w="566"/><text x="32.8945%" y="623.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::iter (507 samples, 0.34%)</title><rect x="32.6838%" y="597" width="0.3378%" height="15" fill="rgb(235,201,9)" fg:x="49060" fg:w="507"/><text x="32.9338%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (154 samples, 0.10%)</title><rect x="32.9190%" y="581" width="0.1026%" height="15" fill="rgb(217,80,15)" fg:x="49413" fg:w="154"/><text x="33.1690%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (154 samples, 0.10%)</title><rect x="32.9190%" y="565" width="0.1026%" height="15" fill="rgb(219,152,8)" fg:x="49413" fg:w="154"/><text x="33.1690%" y="575.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (68 samples, 0.05%)</title><rect x="33.1335%" y="597" width="0.0453%" height="15" fill="rgb(243,107,38)" fg:x="49735" fg:w="68"/><text x="33.3835%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (68 samples, 0.05%)</title><rect x="33.1335%" y="581" width="0.0453%" height="15" fill="rgb(231,17,5)" fg:x="49735" fg:w="68"/><text x="33.3835%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (59 samples, 0.04%)</title><rect x="33.1395%" y="565" width="0.0393%" height="15" fill="rgb(209,25,54)" fg:x="49744" fg:w="59"/><text x="33.3895%" y="575.50"></text></g><g><title>alloc::alloc::exchange_malloc (49 samples, 0.03%)</title><rect x="33.1461%" y="549" width="0.0326%" height="15" fill="rgb(219,0,2)" fg:x="49754" fg:w="49"/><text x="33.3961%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (43 samples, 0.03%)</title><rect x="33.1501%" y="533" width="0.0286%" height="15" fill="rgb(246,9,5)" fg:x="49760" fg:w="43"/><text x="33.4001%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (43 samples, 0.03%)</title><rect x="33.1501%" y="517" width="0.0286%" height="15" fill="rgb(226,159,4)" fg:x="49760" fg:w="43"/><text x="33.4001%" y="527.50"></text></g><g><title>alloc::alloc::alloc (43 samples, 0.03%)</title><rect x="33.1501%" y="501" width="0.0286%" height="15" fill="rgb(219,175,34)" fg:x="49760" fg:w="43"/><text x="33.4001%" y="511.50"></text></g><g><title>__rg_alloc (43 samples, 0.03%)</title><rect x="33.1501%" y="485" width="0.0286%" height="15" fill="rgb(236,10,46)" fg:x="49760" fg:w="43"/><text x="33.4001%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (43 samples, 0.03%)</title><rect x="33.1501%" y="469" width="0.0286%" height="15" fill="rgb(240,211,16)" fg:x="49760" fg:w="43"/><text x="33.4001%" y="479.50"></text></g><g><title>sn_rust_alloc (43 samples, 0.03%)</title><rect x="33.1501%" y="453" width="0.0286%" height="15" fill="rgb(205,3,43)" fg:x="49760" fg:w="43"/><text x="33.4001%" y="463.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (137 samples, 0.09%)</title><rect x="33.1215%" y="645" width="0.0913%" height="15" fill="rgb(245,7,22)" fg:x="49717" fg:w="137"/><text x="33.3715%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (137 samples, 0.09%)</title><rect x="33.1215%" y="629" width="0.0913%" height="15" fill="rgb(239,132,32)" fg:x="49717" fg:w="137"/><text x="33.3715%" y="639.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (137 samples, 0.09%)</title><rect x="33.1215%" y="613" width="0.0913%" height="15" fill="rgb(228,202,34)" fg:x="49717" fg:w="137"/><text x="33.3715%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (51 samples, 0.03%)</title><rect x="33.1788%" y="597" width="0.0340%" height="15" fill="rgb(254,200,22)" fg:x="49803" fg:w="51"/><text x="33.4288%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (45 samples, 0.03%)</title><rect x="33.1828%" y="581" width="0.0300%" height="15" fill="rgb(219,10,39)" fg:x="49809" fg:w="45"/><text x="33.4328%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (45 samples, 0.03%)</title><rect x="33.1828%" y="565" width="0.0300%" height="15" fill="rgb(226,210,39)" fg:x="49809" fg:w="45"/><text x="33.4328%" y="575.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (45 samples, 0.03%)</title><rect x="33.1828%" y="549" width="0.0300%" height="15" fill="rgb(208,219,16)" fg:x="49809" fg:w="45"/><text x="33.4328%" y="559.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (45 samples, 0.03%)</title><rect x="33.1828%" y="533" width="0.0300%" height="15" fill="rgb(216,158,51)" fg:x="49809" fg:w="45"/><text x="33.4328%" y="543.50"></text></g><g><title>abi_stable::erased_types::iterator::next (25 samples, 0.02%)</title><rect x="33.2307%" y="597" width="0.0167%" height="15" fill="rgb(233,14,44)" fg:x="49881" fg:w="25"/><text x="33.4807%" y="607.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (21 samples, 0.01%)</title><rect x="33.2334%" y="581" width="0.0140%" height="15" fill="rgb(237,97,39)" fg:x="49885" fg:w="21"/><text x="33.4834%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.01%)</title><rect x="33.2361%" y="565" width="0.0113%" height="15" fill="rgb(218,198,43)" fg:x="49889" fg:w="17"/><text x="33.4861%" y="575.50"></text></g><g><title>&lt;halfbrown::iter::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.01%)</title><rect x="33.2361%" y="549" width="0.0113%" height="15" fill="rgb(231,104,20)" fg:x="49889" fg:w="17"/><text x="33.4861%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (41 samples, 0.03%)</title><rect x="33.2241%" y="629" width="0.0273%" height="15" fill="rgb(254,36,13)" fg:x="49871" fg:w="41"/><text x="33.4741%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (41 samples, 0.03%)</title><rect x="33.2241%" y="613" width="0.0273%" height="15" fill="rgb(248,14,50)" fg:x="49871" fg:w="41"/><text x="33.4741%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (43 samples, 0.03%)</title><rect x="33.2514%" y="629" width="0.0286%" height="15" fill="rgb(217,107,29)" fg:x="49912" fg:w="43"/><text x="33.5014%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (43 samples, 0.03%)</title><rect x="33.2514%" y="613" width="0.0286%" height="15" fill="rgb(251,169,33)" fg:x="49912" fg:w="43"/><text x="33.5014%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (20 samples, 0.01%)</title><rect x="33.2667%" y="597" width="0.0133%" height="15" fill="rgb(217,108,32)" fg:x="49935" fg:w="20"/><text x="33.5167%" y="607.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (20 samples, 0.01%)</title><rect x="33.2667%" y="581" width="0.0133%" height="15" fill="rgb(219,66,42)" fg:x="49935" fg:w="20"/><text x="33.5167%" y="591.50"></text></g><g><title>sn_rust_dealloc (96 samples, 0.06%)</title><rect x="33.3080%" y="517" width="0.0640%" height="15" fill="rgb(206,180,7)" fg:x="49997" fg:w="96"/><text x="33.5580%" y="527.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::ContraflowData as core::convert::From&lt;&amp;tremor_pipeline::event::Event&gt;&gt;::from (1,214 samples, 0.81%)</title><rect x="32.5645%" y="725" width="0.8088%" height="15" fill="rgb(208,226,31)" fg:x="48881" fg:w="1214"/><text x="32.8145%" y="735.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (1,154 samples, 0.77%)</title><rect x="32.6045%" y="709" width="0.7688%" height="15" fill="rgb(218,26,49)" fg:x="48941" fg:w="1154"/><text x="32.8545%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (1,104 samples, 0.74%)</title><rect x="32.6378%" y="693" width="0.7355%" height="15" fill="rgb(233,197,48)" fg:x="48991" fg:w="1104"/><text x="32.8878%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (528 samples, 0.35%)</title><rect x="33.0216%" y="677" width="0.3518%" height="15" fill="rgb(252,181,51)" fg:x="49567" fg:w="528"/><text x="33.2716%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (391 samples, 0.26%)</title><rect x="33.1128%" y="661" width="0.2605%" height="15" fill="rgb(253,90,19)" fg:x="49704" fg:w="391"/><text x="33.3628%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (241 samples, 0.16%)</title><rect x="33.2128%" y="645" width="0.1606%" height="15" fill="rgb(215,171,30)" fg:x="49854" fg:w="241"/><text x="33.4628%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (127 samples, 0.08%)</title><rect x="33.2887%" y="629" width="0.0846%" height="15" fill="rgb(214,222,9)" fg:x="49968" fg:w="127"/><text x="33.5387%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (127 samples, 0.08%)</title><rect x="33.2887%" y="613" width="0.0846%" height="15" fill="rgb(223,3,22)" fg:x="49968" fg:w="127"/><text x="33.5387%" y="623.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (127 samples, 0.08%)</title><rect x="33.2887%" y="597" width="0.0846%" height="15" fill="rgb(225,196,46)" fg:x="49968" fg:w="127"/><text x="33.5387%" y="607.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (114 samples, 0.08%)</title><rect x="33.2974%" y="581" width="0.0759%" height="15" fill="rgb(209,110,37)" fg:x="49981" fg:w="114"/><text x="33.5474%" y="591.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (113 samples, 0.08%)</title><rect x="33.2980%" y="565" width="0.0753%" height="15" fill="rgb(249,89,12)" fg:x="49982" fg:w="113"/><text x="33.5480%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (113 samples, 0.08%)</title><rect x="33.2980%" y="549" width="0.0753%" height="15" fill="rgb(226,27,33)" fg:x="49982" fg:w="113"/><text x="33.5480%" y="559.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (113 samples, 0.08%)</title><rect x="33.2980%" y="533" width="0.0753%" height="15" fill="rgb(213,82,22)" fg:x="49982" fg:w="113"/><text x="33.5480%" y="543.50"></text></g><g><title>[libc-2.31.so] (945 samples, 0.63%)</title><rect x="33.3733%" y="725" width="0.6296%" height="15" fill="rgb(248,140,0)" fg:x="50095" fg:w="945"/><text x="33.6233%" y="735.50"></text></g><g><title>sn_rust_dealloc (178 samples, 0.12%)</title><rect x="34.0122%" y="565" width="0.1186%" height="15" fill="rgb(228,106,3)" fg:x="51054" fg:w="178"/><text x="34.2622%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (194 samples, 0.13%)</title><rect x="34.0029%" y="725" width="0.1292%" height="15" fill="rgb(209,23,37)" fg:x="51040" fg:w="194"/><text x="34.2529%" y="735.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (194 samples, 0.13%)</title><rect x="34.0029%" y="709" width="0.1292%" height="15" fill="rgb(241,93,50)" fg:x="51040" fg:w="194"/><text x="34.2529%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (184 samples, 0.12%)</title><rect x="34.0095%" y="693" width="0.1226%" height="15" fill="rgb(253,46,43)" fg:x="51050" fg:w="184"/><text x="34.2595%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (184 samples, 0.12%)</title><rect x="34.0095%" y="677" width="0.1226%" height="15" fill="rgb(226,206,43)" fg:x="51050" fg:w="184"/><text x="34.2595%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (184 samples, 0.12%)</title><rect x="34.0095%" y="661" width="0.1226%" height="15" fill="rgb(217,54,7)" fg:x="51050" fg:w="184"/><text x="34.2595%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (184 samples, 0.12%)</title><rect x="34.0095%" y="645" width="0.1226%" height="15" fill="rgb(223,5,52)" fg:x="51050" fg:w="184"/><text x="34.2595%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (184 samples, 0.12%)</title><rect x="34.0095%" y="629" width="0.1226%" height="15" fill="rgb(206,52,46)" fg:x="51050" fg:w="184"/><text x="34.2595%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (184 samples, 0.12%)</title><rect x="34.0095%" y="613" width="0.1226%" height="15" fill="rgb(253,136,11)" fg:x="51050" fg:w="184"/><text x="34.2595%" y="623.50"></text></g><g><title>__rg_dealloc (184 samples, 0.12%)</title><rect x="34.0095%" y="597" width="0.1226%" height="15" fill="rgb(208,106,33)" fg:x="51050" fg:w="184"/><text x="34.2595%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (184 samples, 0.12%)</title><rect x="34.0095%" y="581" width="0.1226%" height="15" fill="rgb(206,54,4)" fg:x="51050" fg:w="184"/><text x="34.2595%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt;&gt; (20 samples, 0.01%)</title><rect x="34.1321%" y="725" width="0.0133%" height="15" fill="rgb(213,3,15)" fg:x="51234" fg:w="20"/><text x="34.3821%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt; (20 samples, 0.01%)</title><rect x="34.1321%" y="709" width="0.0133%" height="15" fill="rgb(252,211,39)" fg:x="51234" fg:w="20"/><text x="34.3821%" y="719.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (33 samples, 0.02%)</title><rect x="34.1741%" y="709" width="0.0220%" height="15" fill="rgb(223,6,36)" fg:x="51297" fg:w="33"/><text x="34.4241%" y="719.50"></text></g><g><title>core::time::Duration::as_nanos (59 samples, 0.04%)</title><rect x="34.1961%" y="709" width="0.0393%" height="15" fill="rgb(252,169,45)" fg:x="51330" fg:w="59"/><text x="34.4461%" y="719.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (176 samples, 0.12%)</title><rect x="34.2354%" y="693" width="0.1173%" height="15" fill="rgb(212,48,26)" fg:x="51389" fg:w="176"/><text x="34.4854%" y="703.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (74 samples, 0.05%)</title><rect x="34.4046%" y="661" width="0.0493%" height="15" fill="rgb(251,102,48)" fg:x="51643" fg:w="74"/><text x="34.6546%" y="671.50"></text></g><g><title>core::cmp::PartialOrd::ge (74 samples, 0.05%)</title><rect x="34.4046%" y="645" width="0.0493%" height="15" fill="rgb(243,208,16)" fg:x="51643" fg:w="74"/><text x="34.6546%" y="655.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (72 samples, 0.05%)</title><rect x="34.4059%" y="629" width="0.0480%" height="15" fill="rgb(219,96,24)" fg:x="51645" fg:w="72"/><text x="34.6559%" y="639.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (72 samples, 0.05%)</title><rect x="34.4059%" y="613" width="0.0480%" height="15" fill="rgb(219,33,29)" fg:x="51645" fg:w="72"/><text x="34.6559%" y="623.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (72 samples, 0.05%)</title><rect x="34.4059%" y="597" width="0.0480%" height="15" fill="rgb(223,176,5)" fg:x="51645" fg:w="72"/><text x="34.6559%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (30 samples, 0.02%)</title><rect x="34.4339%" y="581" width="0.0200%" height="15" fill="rgb(228,140,14)" fg:x="51687" fg:w="30"/><text x="34.6839%" y="591.50"></text></g><g><title>std::time::SystemTime::duration_since (370 samples, 0.25%)</title><rect x="34.2354%" y="709" width="0.2465%" height="15" fill="rgb(217,179,31)" fg:x="51389" fg:w="370"/><text x="34.4854%" y="719.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (194 samples, 0.13%)</title><rect x="34.3526%" y="693" width="0.1292%" height="15" fill="rgb(230,9,30)" fg:x="51565" fg:w="194"/><text x="34.6026%" y="703.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (194 samples, 0.13%)</title><rect x="34.3526%" y="677" width="0.1292%" height="15" fill="rgb(230,136,20)" fg:x="51565" fg:w="194"/><text x="34.6026%" y="687.50"></text></g><g><title>core::time::Duration::new (42 samples, 0.03%)</title><rect x="34.4539%" y="661" width="0.0280%" height="15" fill="rgb(215,210,22)" fg:x="51717" fg:w="42"/><text x="34.7039%" y="671.50"></text></g><g><title>tremor_common::time::nanotime (1,283 samples, 0.85%)</title><rect x="34.1454%" y="725" width="0.8547%" height="15" fill="rgb(218,43,5)" fg:x="51254" fg:w="1283"/><text x="34.3954%" y="735.50"></text></g><g><title>std::time::SystemTime::now (778 samples, 0.52%)</title><rect x="34.4819%" y="709" width="0.5183%" height="15" fill="rgb(216,11,5)" fg:x="51759" fg:w="778"/><text x="34.7319%" y="719.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (778 samples, 0.52%)</title><rect x="34.4819%" y="693" width="0.5183%" height="15" fill="rgb(209,82,29)" fg:x="51759" fg:w="778"/><text x="34.7319%" y="703.50"></text></g><g><title>std::sys::unix::time::inner::now (778 samples, 0.52%)</title><rect x="34.4819%" y="677" width="0.5183%" height="15" fill="rgb(244,115,12)" fg:x="51759" fg:w="778"/><text x="34.7319%" y="687.50"></text></g><g><title>__clock_gettime (637 samples, 0.42%)</title><rect x="34.5758%" y="661" width="0.4244%" height="15" fill="rgb(222,82,18)" fg:x="51900" fg:w="637"/><text x="34.8258%" y="671.50"></text></g><g><title>__vdso_clock_gettime (608 samples, 0.41%)</title><rect x="34.5951%" y="645" width="0.4050%" height="15" fill="rgb(249,227,8)" fg:x="51929" fg:w="608"/><text x="34.8451%" y="655.50"></text></g><g><title>[[vdso]] (551 samples, 0.37%)</title><rect x="34.6331%" y="629" width="0.3671%" height="15" fill="rgb(253,141,45)" fg:x="51986" fg:w="551"/><text x="34.8831%" y="639.50"></text></g><g><title>abi_stable::erased_types::iterator::next (46 samples, 0.03%)</title><rect x="35.0115%" y="613" width="0.0306%" height="15" fill="rgb(234,184,4)" fg:x="52554" fg:w="46"/><text x="35.2615%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (30 samples, 0.02%)</title><rect x="35.0222%" y="597" width="0.0200%" height="15" fill="rgb(218,194,23)" fg:x="52570" fg:w="30"/><text x="35.2722%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (30 samples, 0.02%)</title><rect x="35.0222%" y="581" width="0.0200%" height="15" fill="rgb(235,66,41)" fg:x="52570" fg:w="30"/><text x="35.2722%" y="591.50"></text></g><g><title>&lt;halfbrown::iter::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.01%)</title><rect x="35.0281%" y="565" width="0.0140%" height="15" fill="rgb(245,217,1)" fg:x="52579" fg:w="21"/><text x="35.2781%" y="575.50"></text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.01%)</title><rect x="35.0288%" y="549" width="0.0133%" height="15" fill="rgb(229,91,1)" fg:x="52580" fg:w="20"/><text x="35.2788%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.01%)</title><rect x="35.0288%" y="533" width="0.0133%" height="15" fill="rgb(207,101,30)" fg:x="52580" fg:w="20"/><text x="35.2788%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.01%)</title><rect x="35.0288%" y="517" width="0.0133%" height="15" fill="rgb(223,82,49)" fg:x="52580" fg:w="20"/><text x="35.2788%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (59 samples, 0.04%)</title><rect x="35.0075%" y="677" width="0.0393%" height="15" fill="rgb(218,167,17)" fg:x="52548" fg:w="59"/><text x="35.2575%" y="687.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (59 samples, 0.04%)</title><rect x="35.0075%" y="661" width="0.0393%" height="15" fill="rgb(208,103,14)" fg:x="52548" fg:w="59"/><text x="35.2575%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (59 samples, 0.04%)</title><rect x="35.0075%" y="645" width="0.0393%" height="15" fill="rgb(238,20,8)" fg:x="52548" fg:w="59"/><text x="35.2575%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (59 samples, 0.04%)</title><rect x="35.0075%" y="629" width="0.0393%" height="15" fill="rgb(218,80,54)" fg:x="52548" fg:w="59"/><text x="35.2575%" y="639.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint (26 samples, 0.02%)</title><rect x="35.0568%" y="613" width="0.0173%" height="15" fill="rgb(240,144,17)" fg:x="52622" fg:w="26"/><text x="35.3068%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (58 samples, 0.04%)</title><rect x="35.0468%" y="677" width="0.0386%" height="15" fill="rgb(245,27,50)" fg:x="52607" fg:w="58"/><text x="35.2968%" y="687.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::size_hint (58 samples, 0.04%)</title><rect x="35.0468%" y="661" width="0.0386%" height="15" fill="rgb(251,51,7)" fg:x="52607" fg:w="58"/><text x="35.2968%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (58 samples, 0.04%)</title><rect x="35.0468%" y="645" width="0.0386%" height="15" fill="rgb(245,217,29)" fg:x="52607" fg:w="58"/><text x="35.2968%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (58 samples, 0.04%)</title><rect x="35.0468%" y="629" width="0.0386%" height="15" fill="rgb(221,176,29)" fg:x="52607" fg:w="58"/><text x="35.2968%" y="639.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (17 samples, 0.01%)</title><rect x="35.0741%" y="613" width="0.0113%" height="15" fill="rgb(212,180,24)" fg:x="52648" fg:w="17"/><text x="35.3241%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (17 samples, 0.01%)</title><rect x="35.0741%" y="597" width="0.0113%" height="15" fill="rgb(254,24,2)" fg:x="52648" fg:w="17"/><text x="35.3241%" y="607.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;abi_stable::std_types::tuple::Tuple2&lt;K,V&gt;&gt;&gt;::extend (162 samples, 0.11%)</title><rect x="35.0002%" y="709" width="0.1079%" height="15" fill="rgb(230,100,2)" fg:x="52537" fg:w="162"/><text x="35.2502%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (159 samples, 0.11%)</title><rect x="35.0022%" y="693" width="0.1059%" height="15" fill="rgb(219,142,25)" fg:x="52540" fg:w="159"/><text x="35.2522%" y="703.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (34 samples, 0.02%)</title><rect x="35.0854%" y="677" width="0.0227%" height="15" fill="rgb(240,73,43)" fg:x="52665" fg:w="34"/><text x="35.3354%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (33 samples, 0.02%)</title><rect x="35.0861%" y="661" width="0.0220%" height="15" fill="rgb(214,114,15)" fg:x="52666" fg:w="33"/><text x="35.3361%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (28 samples, 0.02%)</title><rect x="35.0894%" y="645" width="0.0187%" height="15" fill="rgb(207,130,4)" fg:x="52671" fg:w="28"/><text x="35.3394%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (25 samples, 0.02%)</title><rect x="35.0914%" y="629" width="0.0167%" height="15" fill="rgb(221,25,40)" fg:x="52674" fg:w="25"/><text x="35.3414%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (25 samples, 0.02%)</title><rect x="35.0914%" y="613" width="0.0167%" height="15" fill="rgb(241,184,7)" fg:x="52674" fg:w="25"/><text x="35.3414%" y="623.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (25 samples, 0.02%)</title><rect x="35.0914%" y="597" width="0.0167%" height="15" fill="rgb(235,159,4)" fg:x="52674" fg:w="25"/><text x="35.3414%" y="607.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (197 samples, 0.13%)</title><rect x="35.1261%" y="629" width="0.1312%" height="15" fill="rgb(214,87,48)" fg:x="52726" fg:w="197"/><text x="35.3761%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (197 samples, 0.13%)</title><rect x="35.1261%" y="613" width="0.1312%" height="15" fill="rgb(246,198,24)" fg:x="52726" fg:w="197"/><text x="35.3761%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (180 samples, 0.12%)</title><rect x="35.1374%" y="597" width="0.1199%" height="15" fill="rgb(209,66,40)" fg:x="52743" fg:w="180"/><text x="35.3874%" y="607.50"></text></g><g><title>alloc::alloc::exchange_malloc (150 samples, 0.10%)</title><rect x="35.1574%" y="581" width="0.0999%" height="15" fill="rgb(233,147,39)" fg:x="52773" fg:w="150"/><text x="35.4074%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (147 samples, 0.10%)</title><rect x="35.1594%" y="565" width="0.0979%" height="15" fill="rgb(231,145,52)" fg:x="52776" fg:w="147"/><text x="35.4094%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (147 samples, 0.10%)</title><rect x="35.1594%" y="549" width="0.0979%" height="15" fill="rgb(206,20,26)" fg:x="52776" fg:w="147"/><text x="35.4094%" y="559.50"></text></g><g><title>alloc::alloc::alloc (147 samples, 0.10%)</title><rect x="35.1594%" y="533" width="0.0979%" height="15" fill="rgb(238,220,4)" fg:x="52776" fg:w="147"/><text x="35.4094%" y="543.50"></text></g><g><title>__rg_alloc (147 samples, 0.10%)</title><rect x="35.1594%" y="517" width="0.0979%" height="15" fill="rgb(252,195,42)" fg:x="52776" fg:w="147"/><text x="35.4094%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (147 samples, 0.10%)</title><rect x="35.1594%" y="501" width="0.0979%" height="15" fill="rgb(209,10,6)" fg:x="52776" fg:w="147"/><text x="35.4094%" y="511.50"></text></g><g><title>sn_rust_alloc (147 samples, 0.10%)</title><rect x="35.1594%" y="485" width="0.0979%" height="15" fill="rgb(229,3,52)" fg:x="52776" fg:w="147"/><text x="35.4094%" y="495.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (19 samples, 0.01%)</title><rect x="35.2666%" y="565" width="0.0127%" height="15" fill="rgb(253,49,37)" fg:x="52937" fg:w="19"/><text x="35.5166%" y="575.50"></text></g><g><title>sn_rust_dealloc (62 samples, 0.04%)</title><rect x="35.2793%" y="565" width="0.0413%" height="15" fill="rgb(240,103,49)" fg:x="52956" fg:w="62"/><text x="35.5293%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::pointer_trait::OwnedPointer for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop_allocation (97 samples, 0.06%)</title><rect x="35.2600%" y="581" width="0.0646%" height="15" fill="rgb(250,182,30)" fg:x="52927" fg:w="97"/><text x="35.5100%" y="591.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (138 samples, 0.09%)</title><rect x="35.2600%" y="629" width="0.0919%" height="15" fill="rgb(248,8,30)" fg:x="52927" fg:w="138"/><text x="35.5100%" y="639.50"></text></g><g><title>core::ops::function::FnOnce::call_once (138 samples, 0.09%)</title><rect x="35.2600%" y="613" width="0.0919%" height="15" fill="rgb(237,120,30)" fg:x="52927" fg:w="138"/><text x="35.5100%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::into_inner (138 samples, 0.09%)</title><rect x="35.2600%" y="597" width="0.0919%" height="15" fill="rgb(221,146,34)" fg:x="52927" fg:w="138"/><text x="35.5100%" y="607.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (41 samples, 0.03%)</title><rect x="35.3246%" y="581" width="0.0273%" height="15" fill="rgb(242,55,13)" fg:x="53024" fg:w="41"/><text x="35.5746%" y="591.50"></text></g><g><title>core::ptr::read (41 samples, 0.03%)</title><rect x="35.3246%" y="565" width="0.0273%" height="15" fill="rgb(242,112,31)" fg:x="53024" fg:w="41"/><text x="35.5746%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (386 samples, 0.26%)</title><rect x="35.1081%" y="709" width="0.2572%" height="15" fill="rgb(249,192,27)" fg:x="52699" fg:w="386"/><text x="35.3581%" y="719.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (374 samples, 0.25%)</title><rect x="35.1161%" y="693" width="0.2492%" height="15" fill="rgb(208,204,44)" fg:x="52711" fg:w="374"/><text x="35.3661%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val (373 samples, 0.25%)</title><rect x="35.1168%" y="677" width="0.2485%" height="15" fill="rgb(208,93,54)" fg:x="52712" fg:w="373"/><text x="35.3668%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val::{{closure}} (368 samples, 0.25%)</title><rect x="35.1201%" y="661" width="0.2452%" height="15" fill="rgb(242,1,31)" fg:x="52717" fg:w="368"/><text x="35.3701%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val::{{closure}} (368 samples, 0.25%)</title><rect x="35.1201%" y="645" width="0.2452%" height="15" fill="rgb(241,83,25)" fg:x="52717" fg:w="368"/><text x="35.3701%" y="655.50"></text></g><g><title>halfbrown::iter::&lt;impl core::iter::traits::collect::IntoIterator for halfbrown::HashMap&lt;K,V,S&gt;&gt;::into_iter (20 samples, 0.01%)</title><rect x="35.3519%" y="629" width="0.0133%" height="15" fill="rgb(205,169,50)" fg:x="53065" fg:w="20"/><text x="35.6019%" y="639.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (19 samples, 0.01%)</title><rect x="35.3526%" y="613" width="0.0127%" height="15" fill="rgb(239,186,37)" fg:x="53066" fg:w="19"/><text x="35.6026%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (19 samples, 0.01%)</title><rect x="35.3526%" y="597" width="0.0127%" height="15" fill="rgb(205,221,10)" fg:x="53066" fg:w="19"/><text x="35.6026%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (31 samples, 0.02%)</title><rect x="35.3779%" y="597" width="0.0207%" height="15" fill="rgb(218,196,15)" fg:x="53104" fg:w="31"/><text x="35.6279%" y="607.50"></text></g><g><title>sn_rust_dealloc (71 samples, 0.05%)</title><rect x="35.3986%" y="597" width="0.0473%" height="15" fill="rgb(218,196,35)" fg:x="53135" fg:w="71"/><text x="35.6486%" y="607.50"></text></g><g><title>tremor_pipeline::OpMeta::merge (671 samples, 0.45%)</title><rect x="35.0002%" y="725" width="0.4470%" height="15" fill="rgb(233,63,24)" fg:x="52537" fg:w="671"/><text x="35.2502%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (123 samples, 0.08%)</title><rect x="35.3652%" y="709" width="0.0819%" height="15" fill="rgb(225,8,4)" fg:x="53085" fg:w="123"/><text x="35.6152%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::ValIterInterface&lt;u32,u32&gt;&gt;&gt; (123 samples, 0.08%)</title><rect x="35.3652%" y="693" width="0.0819%" height="15" fill="rgb(234,105,35)" fg:x="53085" fg:w="123"/><text x="35.6152%" y="703.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (123 samples, 0.08%)</title><rect x="35.3652%" y="677" width="0.0819%" height="15" fill="rgb(236,21,32)" fg:x="53085" fg:w="123"/><text x="35.6152%" y="687.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (119 samples, 0.08%)</title><rect x="35.3679%" y="661" width="0.0793%" height="15" fill="rgb(228,109,6)" fg:x="53089" fg:w="119"/><text x="35.6179%" y="671.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (118 samples, 0.08%)</title><rect x="35.3686%" y="645" width="0.0786%" height="15" fill="rgb(229,215,31)" fg:x="53090" fg:w="118"/><text x="35.6186%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (118 samples, 0.08%)</title><rect x="35.3686%" y="629" width="0.0786%" height="15" fill="rgb(221,52,54)" fg:x="53090" fg:w="118"/><text x="35.6186%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (118 samples, 0.08%)</title><rect x="35.3686%" y="613" width="0.0786%" height="15" fill="rgb(252,129,43)" fg:x="53090" fg:w="118"/><text x="35.6186%" y="623.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (10,894 samples, 7.26%)</title><rect x="28.2056%" y="741" width="7.2576%" height="15" fill="rgb(248,183,27)" fg:x="42338" fg:w="10894"/><text x="28.4556%" y="751.50">tremor_run..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (343 samples, 0.23%)</title><rect x="35.5744%" y="629" width="0.2285%" height="15" fill="rgb(250,0,22)" fg:x="53399" fg:w="343"/><text x="35.8244%" y="639.50"></text></g><g><title>core::ptr::read (326 samples, 0.22%)</title><rect x="35.5858%" y="613" width="0.2172%" height="15" fill="rgb(213,166,10)" fg:x="53416" fg:w="326"/><text x="35.8358%" y="623.50"></text></g><g><title>[libc-2.31.so] (318 samples, 0.21%)</title><rect x="35.5911%" y="597" width="0.2119%" height="15" fill="rgb(207,163,36)" fg:x="53424" fg:w="318"/><text x="35.8411%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (110 samples, 0.07%)</title><rect x="35.8089%" y="501" width="0.0733%" height="15" fill="rgb(208,122,22)" fg:x="53751" fg:w="110"/><text x="36.0589%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (110 samples, 0.07%)</title><rect x="35.8089%" y="485" width="0.0733%" height="15" fill="rgb(207,104,49)" fg:x="53751" fg:w="110"/><text x="36.0589%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (110 samples, 0.07%)</title><rect x="35.8089%" y="469" width="0.0733%" height="15" fill="rgb(248,211,50)" fg:x="53751" fg:w="110"/><text x="36.0589%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (109 samples, 0.07%)</title><rect x="35.8096%" y="453" width="0.0726%" height="15" fill="rgb(217,13,45)" fg:x="53752" fg:w="109"/><text x="36.0596%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (109 samples, 0.07%)</title><rect x="35.8096%" y="437" width="0.0726%" height="15" fill="rgb(211,216,49)" fg:x="53752" fg:w="109"/><text x="36.0596%" y="447.50"></text></g><g><title>alloc::alloc::alloc (109 samples, 0.07%)</title><rect x="35.8096%" y="421" width="0.0726%" height="15" fill="rgb(221,58,53)" fg:x="53752" fg:w="109"/><text x="36.0596%" y="431.50"></text></g><g><title>__rg_alloc (109 samples, 0.07%)</title><rect x="35.8096%" y="405" width="0.0726%" height="15" fill="rgb(220,112,41)" fg:x="53752" fg:w="109"/><text x="36.0596%" y="415.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (109 samples, 0.07%)</title><rect x="35.8096%" y="389" width="0.0726%" height="15" fill="rgb(236,38,28)" fg:x="53752" fg:w="109"/><text x="36.0596%" y="399.50"></text></g><g><title>sn_rust_alloc (107 samples, 0.07%)</title><rect x="35.8109%" y="373" width="0.0713%" height="15" fill="rgb(227,195,22)" fg:x="53754" fg:w="107"/><text x="36.0609%" y="383.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (141 samples, 0.09%)</title><rect x="35.8089%" y="629" width="0.0939%" height="15" fill="rgb(214,55,33)" fg:x="53751" fg:w="141"/><text x="36.0589%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (141 samples, 0.09%)</title><rect x="35.8089%" y="613" width="0.0939%" height="15" fill="rgb(248,80,13)" fg:x="53751" fg:w="141"/><text x="36.0589%" y="623.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (141 samples, 0.09%)</title><rect x="35.8089%" y="597" width="0.0939%" height="15" fill="rgb(238,52,6)" fg:x="53751" fg:w="141"/><text x="36.0589%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (141 samples, 0.09%)</title><rect x="35.8089%" y="581" width="0.0939%" height="15" fill="rgb(224,198,47)" fg:x="53751" fg:w="141"/><text x="36.0589%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (141 samples, 0.09%)</title><rect x="35.8089%" y="565" width="0.0939%" height="15" fill="rgb(233,171,20)" fg:x="53751" fg:w="141"/><text x="36.0589%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (141 samples, 0.09%)</title><rect x="35.8089%" y="549" width="0.0939%" height="15" fill="rgb(241,30,25)" fg:x="53751" fg:w="141"/><text x="36.0589%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (141 samples, 0.09%)</title><rect x="35.8089%" y="533" width="0.0939%" height="15" fill="rgb(207,171,38)" fg:x="53751" fg:w="141"/><text x="36.0589%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (141 samples, 0.09%)</title><rect x="35.8089%" y="517" width="0.0939%" height="15" fill="rgb(234,70,1)" fg:x="53751" fg:w="141"/><text x="36.0589%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (31 samples, 0.02%)</title><rect x="35.8822%" y="501" width="0.0207%" height="15" fill="rgb(232,178,18)" fg:x="53861" fg:w="31"/><text x="36.1322%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (31 samples, 0.02%)</title><rect x="35.8822%" y="485" width="0.0207%" height="15" fill="rgb(241,78,40)" fg:x="53861" fg:w="31"/><text x="36.1322%" y="495.50"></text></g><g><title>[libc-2.31.so] (27 samples, 0.02%)</title><rect x="35.8849%" y="469" width="0.0180%" height="15" fill="rgb(222,35,25)" fg:x="53865" fg:w="27"/><text x="36.1349%" y="479.50"></text></g><g><title>[libc-2.31.so] (554 samples, 0.37%)</title><rect x="35.9029%" y="629" width="0.3691%" height="15" fill="rgb(207,92,16)" fg:x="53892" fg:w="554"/><text x="36.1529%" y="639.50"></text></g><g><title>[libc-2.31.so] (253 samples, 0.17%)</title><rect x="36.2733%" y="613" width="0.1685%" height="15" fill="rgb(216,59,51)" fg:x="54448" fg:w="253"/><text x="36.5233%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (332 samples, 0.22%)</title><rect x="36.2719%" y="629" width="0.2212%" height="15" fill="rgb(213,80,28)" fg:x="54446" fg:w="332"/><text x="36.5219%" y="639.50"></text></g><g><title>alloc::alloc::exchange_malloc (77 samples, 0.05%)</title><rect x="36.4418%" y="613" width="0.0513%" height="15" fill="rgb(220,93,7)" fg:x="54701" fg:w="77"/><text x="36.6918%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (77 samples, 0.05%)</title><rect x="36.4418%" y="597" width="0.0513%" height="15" fill="rgb(225,24,44)" fg:x="54701" fg:w="77"/><text x="36.6918%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (77 samples, 0.05%)</title><rect x="36.4418%" y="581" width="0.0513%" height="15" fill="rgb(243,74,40)" fg:x="54701" fg:w="77"/><text x="36.6918%" y="591.50"></text></g><g><title>alloc::alloc::alloc (74 samples, 0.05%)</title><rect x="36.4438%" y="565" width="0.0493%" height="15" fill="rgb(228,39,7)" fg:x="54704" fg:w="74"/><text x="36.6938%" y="575.50"></text></g><g><title>__rg_alloc (74 samples, 0.05%)</title><rect x="36.4438%" y="549" width="0.0493%" height="15" fill="rgb(227,79,8)" fg:x="54704" fg:w="74"/><text x="36.6938%" y="559.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (74 samples, 0.05%)</title><rect x="36.4438%" y="533" width="0.0493%" height="15" fill="rgb(236,58,11)" fg:x="54704" fg:w="74"/><text x="36.6938%" y="543.50"></text></g><g><title>sn_rust_alloc (71 samples, 0.05%)</title><rect x="36.4458%" y="517" width="0.0473%" height="15" fill="rgb(249,63,35)" fg:x="54707" fg:w="71"/><text x="36.6958%" y="527.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (16 samples, 0.01%)</title><rect x="36.4825%" y="501" width="0.0107%" height="15" fill="rgb(252,114,16)" fg:x="54762" fg:w="16"/><text x="36.7325%" y="511.50"></text></g><g><title>sn_rust_dealloc (76 samples, 0.05%)</title><rect x="36.4985%" y="613" width="0.0506%" height="15" fill="rgb(254,151,24)" fg:x="54786" fg:w="76"/><text x="36.7485%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (85 samples, 0.06%)</title><rect x="36.4931%" y="629" width="0.0566%" height="15" fill="rgb(253,54,39)" fg:x="54778" fg:w="85"/><text x="36.7431%" y="639.50"></text></g><g><title>core::str::&lt;impl str&gt;::eq_ignore_ascii_case (31 samples, 0.02%)</title><rect x="36.5637%" y="629" width="0.0207%" height="15" fill="rgb(243,25,45)" fg:x="54884" fg:w="31"/><text x="36.8137%" y="639.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case (31 samples, 0.02%)</title><rect x="36.5637%" y="613" width="0.0207%" height="15" fill="rgb(234,134,9)" fg:x="54884" fg:w="31"/><text x="36.8137%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (30 samples, 0.02%)</title><rect x="36.5644%" y="597" width="0.0200%" height="15" fill="rgb(227,166,31)" fg:x="54885" fg:w="30"/><text x="36.8144%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (30 samples, 0.02%)</title><rect x="36.5644%" y="581" width="0.0200%" height="15" fill="rgb(245,143,41)" fg:x="54885" fg:w="30"/><text x="36.8144%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::{{closure}} (25 samples, 0.02%)</title><rect x="36.5677%" y="565" width="0.0167%" height="15" fill="rgb(238,181,32)" fg:x="54890" fg:w="25"/><text x="36.8177%" y="575.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case::{{closure}} (25 samples, 0.02%)</title><rect x="36.5677%" y="549" width="0.0167%" height="15" fill="rgb(224,113,18)" fg:x="54890" fg:w="25"/><text x="36.8177%" y="559.50"></text></g><g><title>core::num::&lt;impl u8&gt;::eq_ignore_ascii_case (25 samples, 0.02%)</title><rect x="36.5677%" y="533" width="0.0167%" height="15" fill="rgb(240,229,28)" fg:x="54890" fg:w="25"/><text x="36.8177%" y="543.50"></text></g><g><title>core::num::&lt;impl u8&gt;::to_ascii_lowercase (24 samples, 0.02%)</title><rect x="36.5684%" y="517" width="0.0160%" height="15" fill="rgb(250,185,3)" fg:x="54891" fg:w="24"/><text x="36.8184%" y="527.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,711 samples, 1.14%)</title><rect x="35.4632%" y="661" width="1.1399%" height="15" fill="rgb(212,59,25)" fg:x="53232" fg:w="1711"/><text x="35.7132%" y="671.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (1,711 samples, 1.14%)</title><rect x="35.4632%" y="645" width="1.1399%" height="15" fill="rgb(221,87,20)" fg:x="53232" fg:w="1711"/><text x="35.7132%" y="655.50"></text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (24 samples, 0.02%)</title><rect x="36.5871%" y="629" width="0.0160%" height="15" fill="rgb(213,74,28)" fg:x="54919" fg:w="24"/><text x="36.8371%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (24 samples, 0.02%)</title><rect x="36.5871%" y="613" width="0.0160%" height="15" fill="rgb(224,132,34)" fg:x="54919" fg:w="24"/><text x="36.8371%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (24 samples, 0.02%)</title><rect x="36.5871%" y="597" width="0.0160%" height="15" fill="rgb(222,101,24)" fg:x="54919" fg:w="24"/><text x="36.8371%" y="607.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,754 samples, 1.17%)</title><rect x="35.4632%" y="725" width="1.1685%" height="15" fill="rgb(254,142,4)" fg:x="53232" fg:w="1754"/><text x="35.7132%" y="735.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (1,754 samples, 1.17%)</title><rect x="35.4632%" y="709" width="1.1685%" height="15" fill="rgb(230,229,49)" fg:x="53232" fg:w="1754"/><text x="35.7132%" y="719.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,754 samples, 1.17%)</title><rect x="35.4632%" y="693" width="1.1685%" height="15" fill="rgb(238,70,47)" fg:x="53232" fg:w="1754"/><text x="35.7132%" y="703.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (1,754 samples, 1.17%)</title><rect x="35.4632%" y="677" width="1.1685%" height="15" fill="rgb(231,160,17)" fg:x="53232" fg:w="1754"/><text x="35.7132%" y="687.50"></text></g><g><title>tremor_runtime::connectors::source::Streams::get_or_create_stream (42 samples, 0.03%)</title><rect x="36.6037%" y="661" width="0.0280%" height="15" fill="rgb(218,68,53)" fg:x="54944" fg:w="42"/><text x="36.8537%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (39 samples, 0.03%)</title><rect x="36.6057%" y="645" width="0.0260%" height="15" fill="rgb(236,111,10)" fg:x="54947" fg:w="39"/><text x="36.8557%" y="655.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (29 samples, 0.02%)</title><rect x="36.6124%" y="629" width="0.0193%" height="15" fill="rgb(224,34,41)" fg:x="54957" fg:w="29"/><text x="36.8624%" y="639.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (29 samples, 0.02%)</title><rect x="36.6124%" y="613" width="0.0193%" height="15" fill="rgb(241,118,19)" fg:x="54957" fg:w="29"/><text x="36.8624%" y="623.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (29 samples, 0.02%)</title><rect x="36.6124%" y="597" width="0.0193%" height="15" fill="rgb(238,129,25)" fg:x="54957" fg:w="29"/><text x="36.8624%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u64&gt;::cmp (18 samples, 0.01%)</title><rect x="36.6197%" y="581" width="0.0120%" height="15" fill="rgb(238,22,31)" fg:x="54968" fg:w="18"/><text x="36.8697%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (17 samples, 0.01%)</title><rect x="37.4185%" y="133" width="0.0113%" height="15" fill="rgb(222,174,48)" fg:x="56167" fg:w="17"/><text x="37.6685%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (265 samples, 0.18%)</title><rect x="37.2539%" y="277" width="0.1765%" height="15" fill="rgb(206,152,40)" fg:x="55920" fg:w="265"/><text x="37.5039%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (265 samples, 0.18%)</title><rect x="37.2539%" y="261" width="0.1765%" height="15" fill="rgb(218,99,54)" fg:x="55920" fg:w="265"/><text x="37.5039%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (265 samples, 0.18%)</title><rect x="37.2539%" y="245" width="0.1765%" height="15" fill="rgb(220,174,26)" fg:x="55920" fg:w="265"/><text x="37.5039%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (262 samples, 0.17%)</title><rect x="37.2559%" y="229" width="0.1745%" height="15" fill="rgb(245,116,9)" fg:x="55923" fg:w="262"/><text x="37.5059%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (262 samples, 0.17%)</title><rect x="37.2559%" y="213" width="0.1745%" height="15" fill="rgb(209,72,35)" fg:x="55923" fg:w="262"/><text x="37.5059%" y="223.50"></text></g><g><title>alloc::alloc::alloc (256 samples, 0.17%)</title><rect x="37.2599%" y="197" width="0.1705%" height="15" fill="rgb(226,126,21)" fg:x="55929" fg:w="256"/><text x="37.5099%" y="207.50"></text></g><g><title>__rg_alloc (256 samples, 0.17%)</title><rect x="37.2599%" y="181" width="0.1705%" height="15" fill="rgb(227,192,1)" fg:x="55929" fg:w="256"/><text x="37.5099%" y="191.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (256 samples, 0.17%)</title><rect x="37.2599%" y="165" width="0.1705%" height="15" fill="rgb(237,180,29)" fg:x="55929" fg:w="256"/><text x="37.5099%" y="175.50"></text></g><g><title>sn_rust_alloc (244 samples, 0.16%)</title><rect x="37.2679%" y="149" width="0.1626%" height="15" fill="rgb(230,197,35)" fg:x="55941" fg:w="244"/><text x="37.5179%" y="159.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (342 samples, 0.23%)</title><rect x="37.2359%" y="389" width="0.2278%" height="15" fill="rgb(246,193,31)" fg:x="55893" fg:w="342"/><text x="37.4859%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (328 samples, 0.22%)</title><rect x="37.2453%" y="373" width="0.2185%" height="15" fill="rgb(241,36,4)" fg:x="55907" fg:w="328"/><text x="37.4953%" y="383.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (322 samples, 0.21%)</title><rect x="37.2493%" y="357" width="0.2145%" height="15" fill="rgb(241,130,17)" fg:x="55913" fg:w="322"/><text x="37.4993%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (315 samples, 0.21%)</title><rect x="37.2539%" y="341" width="0.2099%" height="15" fill="rgb(206,137,32)" fg:x="55920" fg:w="315"/><text x="37.5039%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (315 samples, 0.21%)</title><rect x="37.2539%" y="325" width="0.2099%" height="15" fill="rgb(237,228,51)" fg:x="55920" fg:w="315"/><text x="37.5039%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (315 samples, 0.21%)</title><rect x="37.2539%" y="309" width="0.2099%" height="15" fill="rgb(243,6,42)" fg:x="55920" fg:w="315"/><text x="37.5039%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (315 samples, 0.21%)</title><rect x="37.2539%" y="293" width="0.2099%" height="15" fill="rgb(251,74,28)" fg:x="55920" fg:w="315"/><text x="37.5039%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (50 samples, 0.03%)</title><rect x="37.4305%" y="277" width="0.0333%" height="15" fill="rgb(218,20,49)" fg:x="56185" fg:w="50"/><text x="37.6805%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (50 samples, 0.03%)</title><rect x="37.4305%" y="261" width="0.0333%" height="15" fill="rgb(238,28,14)" fg:x="56185" fg:w="50"/><text x="37.6805%" y="271.50"></text></g><g><title>[libc-2.31.so] (43 samples, 0.03%)</title><rect x="37.4351%" y="245" width="0.0286%" height="15" fill="rgb(229,40,46)" fg:x="56192" fg:w="43"/><text x="37.6851%" y="255.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (23 samples, 0.02%)</title><rect x="37.4678%" y="373" width="0.0153%" height="15" fill="rgb(244,195,20)" fg:x="56241" fg:w="23"/><text x="37.7178%" y="383.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (35 samples, 0.02%)</title><rect x="37.5697%" y="37" width="0.0233%" height="15" fill="rgb(253,56,35)" fg:x="56394" fg:w="35"/><text x="37.8197%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (142 samples, 0.09%)</title><rect x="37.4991%" y="181" width="0.0946%" height="15" fill="rgb(210,149,44)" fg:x="56288" fg:w="142"/><text x="37.7491%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (142 samples, 0.09%)</title><rect x="37.4991%" y="165" width="0.0946%" height="15" fill="rgb(240,135,12)" fg:x="56288" fg:w="142"/><text x="37.7491%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (142 samples, 0.09%)</title><rect x="37.4991%" y="149" width="0.0946%" height="15" fill="rgb(251,24,50)" fg:x="56288" fg:w="142"/><text x="37.7491%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (135 samples, 0.09%)</title><rect x="37.5037%" y="133" width="0.0899%" height="15" fill="rgb(243,200,47)" fg:x="56295" fg:w="135"/><text x="37.7537%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (135 samples, 0.09%)</title><rect x="37.5037%" y="117" width="0.0899%" height="15" fill="rgb(224,166,26)" fg:x="56295" fg:w="135"/><text x="37.7537%" y="127.50"></text></g><g><title>alloc::alloc::alloc (135 samples, 0.09%)</title><rect x="37.5037%" y="101" width="0.0899%" height="15" fill="rgb(233,0,47)" fg:x="56295" fg:w="135"/><text x="37.7537%" y="111.50"></text></g><g><title>__rg_alloc (135 samples, 0.09%)</title><rect x="37.5037%" y="85" width="0.0899%" height="15" fill="rgb(253,80,5)" fg:x="56295" fg:w="135"/><text x="37.7537%" y="95.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (135 samples, 0.09%)</title><rect x="37.5037%" y="69" width="0.0899%" height="15" fill="rgb(214,133,25)" fg:x="56295" fg:w="135"/><text x="37.7537%" y="79.50"></text></g><g><title>sn_rust_alloc (130 samples, 0.09%)</title><rect x="37.5071%" y="53" width="0.0866%" height="15" fill="rgb(209,27,14)" fg:x="56300" fg:w="130"/><text x="37.7571%" y="63.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (185 samples, 0.12%)</title><rect x="37.4898%" y="293" width="0.1232%" height="15" fill="rgb(219,102,51)" fg:x="56274" fg:w="185"/><text x="37.7398%" y="303.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (185 samples, 0.12%)</title><rect x="37.4898%" y="277" width="0.1232%" height="15" fill="rgb(237,18,16)" fg:x="56274" fg:w="185"/><text x="37.7398%" y="287.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (185 samples, 0.12%)</title><rect x="37.4898%" y="261" width="0.1232%" height="15" fill="rgb(241,85,17)" fg:x="56274" fg:w="185"/><text x="37.7398%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (171 samples, 0.11%)</title><rect x="37.4991%" y="245" width="0.1139%" height="15" fill="rgb(236,90,42)" fg:x="56288" fg:w="171"/><text x="37.7491%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (171 samples, 0.11%)</title><rect x="37.4991%" y="229" width="0.1139%" height="15" fill="rgb(249,57,21)" fg:x="56288" fg:w="171"/><text x="37.7491%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (171 samples, 0.11%)</title><rect x="37.4991%" y="213" width="0.1139%" height="15" fill="rgb(243,12,36)" fg:x="56288" fg:w="171"/><text x="37.7491%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (171 samples, 0.11%)</title><rect x="37.4991%" y="197" width="0.1139%" height="15" fill="rgb(253,128,47)" fg:x="56288" fg:w="171"/><text x="37.7491%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (29 samples, 0.02%)</title><rect x="37.5937%" y="181" width="0.0193%" height="15" fill="rgb(207,33,20)" fg:x="56430" fg:w="29"/><text x="37.8437%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (29 samples, 0.02%)</title><rect x="37.5937%" y="165" width="0.0193%" height="15" fill="rgb(233,215,35)" fg:x="56430" fg:w="29"/><text x="37.8437%" y="175.50"></text></g><g><title>[libc-2.31.so] (26 samples, 0.02%)</title><rect x="37.5957%" y="149" width="0.0173%" height="15" fill="rgb(249,188,52)" fg:x="56433" fg:w="26"/><text x="37.8457%" y="159.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (16 samples, 0.01%)</title><rect x="37.6663%" y="149" width="0.0107%" height="15" fill="rgb(225,12,32)" fg:x="56539" fg:w="16"/><text x="37.9163%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (81 samples, 0.05%)</title><rect x="37.6250%" y="245" width="0.0540%" height="15" fill="rgb(247,98,14)" fg:x="56477" fg:w="81"/><text x="37.8750%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (81 samples, 0.05%)</title><rect x="37.6250%" y="229" width="0.0540%" height="15" fill="rgb(247,219,48)" fg:x="56477" fg:w="81"/><text x="37.8750%" y="239.50"></text></g><g><title>alloc::alloc::alloc (76 samples, 0.05%)</title><rect x="37.6283%" y="213" width="0.0506%" height="15" fill="rgb(253,60,48)" fg:x="56482" fg:w="76"/><text x="37.8783%" y="223.50"></text></g><g><title>__rg_alloc (76 samples, 0.05%)</title><rect x="37.6283%" y="197" width="0.0506%" height="15" fill="rgb(245,15,52)" fg:x="56482" fg:w="76"/><text x="37.8783%" y="207.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (76 samples, 0.05%)</title><rect x="37.6283%" y="181" width="0.0506%" height="15" fill="rgb(220,133,28)" fg:x="56482" fg:w="76"/><text x="37.8783%" y="191.50"></text></g><g><title>sn_rust_alloc (63 samples, 0.04%)</title><rect x="37.6370%" y="165" width="0.0420%" height="15" fill="rgb(217,180,4)" fg:x="56495" fg:w="63"/><text x="37.8870%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (89 samples, 0.06%)</title><rect x="37.6217%" y="293" width="0.0593%" height="15" fill="rgb(251,24,1)" fg:x="56472" fg:w="89"/><text x="37.8717%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (84 samples, 0.06%)</title><rect x="37.6250%" y="277" width="0.0560%" height="15" fill="rgb(212,185,49)" fg:x="56477" fg:w="84"/><text x="37.8750%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (84 samples, 0.06%)</title><rect x="37.6250%" y="261" width="0.0560%" height="15" fill="rgb(215,175,22)" fg:x="56477" fg:w="84"/><text x="37.8750%" y="271.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (1,239 samples, 0.83%)</title><rect x="36.8609%" y="405" width="0.8254%" height="15" fill="rgb(250,205,14)" fg:x="55330" fg:w="1239"/><text x="37.1109%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (334 samples, 0.22%)</title><rect x="37.4638%" y="389" width="0.2225%" height="15" fill="rgb(225,211,22)" fg:x="56235" fg:w="334"/><text x="37.7138%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (305 samples, 0.20%)</title><rect x="37.4831%" y="373" width="0.2032%" height="15" fill="rgb(251,179,42)" fg:x="56264" fg:w="305"/><text x="37.7331%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (305 samples, 0.20%)</title><rect x="37.4831%" y="357" width="0.2032%" height="15" fill="rgb(208,216,51)" fg:x="56264" fg:w="305"/><text x="37.7331%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (305 samples, 0.20%)</title><rect x="37.4831%" y="341" width="0.2032%" height="15" fill="rgb(235,36,11)" fg:x="56264" fg:w="305"/><text x="37.7331%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (305 samples, 0.20%)</title><rect x="37.4831%" y="325" width="0.2032%" height="15" fill="rgb(213,189,28)" fg:x="56264" fg:w="305"/><text x="37.7331%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (305 samples, 0.20%)</title><rect x="37.4831%" y="309" width="0.2032%" height="15" fill="rgb(227,203,42)" fg:x="56264" fg:w="305"/><text x="37.7331%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (21 samples, 0.01%)</title><rect x="37.7243%" y="325" width="0.0140%" height="15" fill="rgb(244,72,36)" fg:x="56626" fg:w="21"/><text x="37.9743%" y="335.50"></text></g><g><title>core::time::Duration::as_nanos (30 samples, 0.02%)</title><rect x="37.7382%" y="325" width="0.0200%" height="15" fill="rgb(213,53,17)" fg:x="56647" fg:w="30"/><text x="37.9882%" y="335.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (82 samples, 0.05%)</title><rect x="37.7582%" y="309" width="0.0546%" height="15" fill="rgb(207,167,3)" fg:x="56677" fg:w="82"/><text x="38.0082%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (37 samples, 0.02%)</title><rect x="37.8355%" y="277" width="0.0246%" height="15" fill="rgb(216,98,30)" fg:x="56793" fg:w="37"/><text x="38.0855%" y="287.50"></text></g><g><title>core::cmp::PartialOrd::ge (37 samples, 0.02%)</title><rect x="37.8355%" y="261" width="0.0246%" height="15" fill="rgb(236,123,15)" fg:x="56793" fg:w="37"/><text x="38.0855%" y="271.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (37 samples, 0.02%)</title><rect x="37.8355%" y="245" width="0.0246%" height="15" fill="rgb(248,81,50)" fg:x="56793" fg:w="37"/><text x="38.0855%" y="255.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (37 samples, 0.02%)</title><rect x="37.8355%" y="229" width="0.0246%" height="15" fill="rgb(214,120,4)" fg:x="56793" fg:w="37"/><text x="38.0855%" y="239.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (37 samples, 0.02%)</title><rect x="37.8355%" y="213" width="0.0246%" height="15" fill="rgb(208,179,34)" fg:x="56793" fg:w="37"/><text x="38.0855%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (16 samples, 0.01%)</title><rect x="37.8495%" y="197" width="0.0107%" height="15" fill="rgb(227,140,7)" fg:x="56814" fg:w="16"/><text x="38.0995%" y="207.50"></text></g><g><title>std::time::SystemTime::duration_since (177 samples, 0.12%)</title><rect x="37.7582%" y="325" width="0.1179%" height="15" fill="rgb(214,22,6)" fg:x="56677" fg:w="177"/><text x="38.0082%" y="335.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (95 samples, 0.06%)</title><rect x="37.8129%" y="309" width="0.0633%" height="15" fill="rgb(207,137,27)" fg:x="56759" fg:w="95"/><text x="38.0629%" y="319.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (95 samples, 0.06%)</title><rect x="37.8129%" y="293" width="0.0633%" height="15" fill="rgb(210,8,46)" fg:x="56759" fg:w="95"/><text x="38.0629%" y="303.50"></text></g><g><title>core::time::Duration::new (24 samples, 0.02%)</title><rect x="37.8602%" y="277" width="0.0160%" height="15" fill="rgb(240,16,54)" fg:x="56830" fg:w="24"/><text x="38.1102%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (629 samples, 0.42%)</title><rect x="37.6863%" y="405" width="0.4190%" height="15" fill="rgb(211,209,29)" fg:x="56569" fg:w="629"/><text x="37.9363%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (629 samples, 0.42%)</title><rect x="37.6863%" y="389" width="0.4190%" height="15" fill="rgb(226,228,24)" fg:x="56569" fg:w="629"/><text x="37.9363%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any::check::{{closure}} (597 samples, 0.40%)</title><rect x="37.7076%" y="373" width="0.3977%" height="15" fill="rgb(222,84,9)" fg:x="56601" fg:w="597"/><text x="37.9576%" y="383.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}}::{{closure}} (597 samples, 0.40%)</title><rect x="37.7076%" y="357" width="0.3977%" height="15" fill="rgb(234,203,30)" fg:x="56601" fg:w="597"/><text x="37.9576%" y="367.50"></text></g><g><title>tremor_common::time::nanotime (592 samples, 0.39%)</title><rect x="37.7109%" y="341" width="0.3944%" height="15" fill="rgb(238,109,14)" fg:x="56606" fg:w="592"/><text x="37.9609%" y="351.50"></text></g><g><title>std::time::SystemTime::now (344 samples, 0.23%)</title><rect x="37.8762%" y="325" width="0.2292%" height="15" fill="rgb(233,206,34)" fg:x="56854" fg:w="344"/><text x="38.1262%" y="335.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (344 samples, 0.23%)</title><rect x="37.8762%" y="309" width="0.2292%" height="15" fill="rgb(220,167,47)" fg:x="56854" fg:w="344"/><text x="38.1262%" y="319.50"></text></g><g><title>std::sys::unix::time::inner::now (344 samples, 0.23%)</title><rect x="37.8762%" y="293" width="0.2292%" height="15" fill="rgb(238,105,10)" fg:x="56854" fg:w="344"/><text x="38.1262%" y="303.50"></text></g><g><title>__clock_gettime (289 samples, 0.19%)</title><rect x="37.9128%" y="277" width="0.1925%" height="15" fill="rgb(213,227,17)" fg:x="56909" fg:w="289"/><text x="38.1628%" y="287.50"></text></g><g><title>__vdso_clock_gettime (261 samples, 0.17%)</title><rect x="37.9314%" y="261" width="0.1739%" height="15" fill="rgb(217,132,38)" fg:x="56937" fg:w="261"/><text x="38.1814%" y="271.50"></text></g><g><title>[[vdso]] (233 samples, 0.16%)</title><rect x="37.9501%" y="245" width="0.1552%" height="15" fill="rgb(242,146,4)" fg:x="56965" fg:w="233"/><text x="38.2001%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (139 samples, 0.09%)</title><rect x="38.1440%" y="373" width="0.0926%" height="15" fill="rgb(212,61,9)" fg:x="57256" fg:w="139"/><text x="38.3940%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (82 samples, 0.05%)</title><rect x="38.1819%" y="357" width="0.0546%" height="15" fill="rgb(247,126,22)" fg:x="57313" fg:w="82"/><text x="38.4319%" y="367.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (504 samples, 0.34%)</title><rect x="38.4571%" y="181" width="0.3358%" height="15" fill="rgb(220,196,2)" fg:x="57726" fg:w="504"/><text x="38.7071%" y="191.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (39 samples, 0.03%)</title><rect x="38.7928%" y="181" width="0.0260%" height="15" fill="rgb(208,46,4)" fg:x="58230" fg:w="39"/><text x="39.0428%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (876 samples, 0.58%)</title><rect x="38.2366%" y="325" width="0.5836%" height="15" fill="rgb(252,104,46)" fg:x="57395" fg:w="876"/><text x="38.4866%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (869 samples, 0.58%)</title><rect x="38.2412%" y="309" width="0.5789%" height="15" fill="rgb(237,152,48)" fg:x="57402" fg:w="869"/><text x="38.4912%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (869 samples, 0.58%)</title><rect x="38.2412%" y="293" width="0.5789%" height="15" fill="rgb(221,59,37)" fg:x="57402" fg:w="869"/><text x="38.4912%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (866 samples, 0.58%)</title><rect x="38.2432%" y="277" width="0.5769%" height="15" fill="rgb(209,202,51)" fg:x="57405" fg:w="866"/><text x="38.4932%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (866 samples, 0.58%)</title><rect x="38.2432%" y="261" width="0.5769%" height="15" fill="rgb(228,81,30)" fg:x="57405" fg:w="866"/><text x="38.4932%" y="271.50"></text></g><g><title>alloc::alloc::alloc (866 samples, 0.58%)</title><rect x="38.2432%" y="245" width="0.5769%" height="15" fill="rgb(227,42,39)" fg:x="57405" fg:w="866"/><text x="38.4932%" y="255.50"></text></g><g><title>__rg_alloc (866 samples, 0.58%)</title><rect x="38.2432%" y="229" width="0.5769%" height="15" fill="rgb(221,26,2)" fg:x="57405" fg:w="866"/><text x="38.4932%" y="239.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (866 samples, 0.58%)</title><rect x="38.2432%" y="213" width="0.5769%" height="15" fill="rgb(254,61,31)" fg:x="57405" fg:w="866"/><text x="38.4932%" y="223.50"></text></g><g><title>sn_rust_alloc (859 samples, 0.57%)</title><rect x="38.2479%" y="197" width="0.5723%" height="15" fill="rgb(222,173,38)" fg:x="57412" fg:w="859"/><text x="38.4979%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,336 samples, 0.89%)</title><rect x="38.1440%" y="389" width="0.8900%" height="15" fill="rgb(218,50,12)" fg:x="57256" fg:w="1336"/><text x="38.3940%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,197 samples, 0.80%)</title><rect x="38.2366%" y="373" width="0.7974%" height="15" fill="rgb(223,88,40)" fg:x="57395" fg:w="1197"/><text x="38.4866%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1,197 samples, 0.80%)</title><rect x="38.2366%" y="357" width="0.7974%" height="15" fill="rgb(237,54,19)" fg:x="57395" fg:w="1197"/><text x="38.4866%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,197 samples, 0.80%)</title><rect x="38.2366%" y="341" width="0.7974%" height="15" fill="rgb(251,129,25)" fg:x="57395" fg:w="1197"/><text x="38.4866%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (321 samples, 0.21%)</title><rect x="38.8202%" y="325" width="0.2139%" height="15" fill="rgb(238,97,19)" fg:x="58271" fg:w="321"/><text x="39.0702%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (321 samples, 0.21%)</title><rect x="38.8202%" y="309" width="0.2139%" height="15" fill="rgb(240,169,18)" fg:x="58271" fg:w="321"/><text x="39.0702%" y="319.50"></text></g><g><title>[libc-2.31.so] (320 samples, 0.21%)</title><rect x="38.8208%" y="293" width="0.2132%" height="15" fill="rgb(230,187,49)" fg:x="58272" fg:w="320"/><text x="39.0708%" y="303.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (3,615 samples, 2.41%)</title><rect x="36.6317%" y="725" width="2.4083%" height="15" fill="rgb(209,44,26)" fg:x="54986" fg:w="3615"/><text x="36.8817%" y="735.50">&lt;f..</text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (3,615 samples, 2.41%)</title><rect x="36.6317%" y="709" width="2.4083%" height="15" fill="rgb(244,0,6)" fg:x="54986" fg:w="3615"/><text x="36.8817%" y="719.50">fu..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (3,615 samples, 2.41%)</title><rect x="36.6317%" y="693" width="2.4083%" height="15" fill="rgb(248,18,21)" fg:x="54986" fg:w="3615"/><text x="36.8817%" y="703.50">&lt;c..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,615 samples, 2.41%)</title><rect x="36.6317%" y="677" width="2.4083%" height="15" fill="rgb(245,180,19)" fg:x="54986" fg:w="3615"/><text x="36.8817%" y="687.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (3,615 samples, 2.41%)</title><rect x="36.6317%" y="661" width="2.4083%" height="15" fill="rgb(252,118,36)" fg:x="54986" fg:w="3615"/><text x="36.8817%" y="671.50">tr..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,615 samples, 2.41%)</title><rect x="36.6317%" y="645" width="2.4083%" height="15" fill="rgb(210,224,19)" fg:x="54986" fg:w="3615"/><text x="36.8817%" y="655.50">&lt;a..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,615 samples, 2.41%)</title><rect x="36.6317%" y="629" width="2.4083%" height="15" fill="rgb(218,30,24)" fg:x="54986" fg:w="3615"/><text x="36.8817%" y="639.50">&lt;a..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (3,615 samples, 2.41%)</title><rect x="36.6317%" y="613" width="2.4083%" height="15" fill="rgb(219,75,50)" fg:x="54986" fg:w="3615"/><text x="36.8817%" y="623.50">&lt;c..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (3,615 samples, 2.41%)</title><rect x="36.6317%" y="597" width="2.4083%" height="15" fill="rgb(234,72,50)" fg:x="54986" fg:w="3615"/><text x="36.8817%" y="607.50">&lt;a..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (3,615 samples, 2.41%)</title><rect x="36.6317%" y="581" width="2.4083%" height="15" fill="rgb(219,100,48)" fg:x="54986" fg:w="3615"/><text x="36.8817%" y="591.50">as..</text></g><g><title>std::panic::catch_unwind (3,615 samples, 2.41%)</title><rect x="36.6317%" y="565" width="2.4083%" height="15" fill="rgb(253,5,41)" fg:x="54986" fg:w="3615"/><text x="36.8817%" y="575.50">st..</text></g><g><title>std::panicking::try (3,615 samples, 2.41%)</title><rect x="36.6317%" y="549" width="2.4083%" height="15" fill="rgb(247,181,11)" fg:x="54986" fg:w="3615"/><text x="36.8817%" y="559.50">st..</text></g><g><title>std::panicking::try::do_call (3,615 samples, 2.41%)</title><rect x="36.6317%" y="533" width="2.4083%" height="15" fill="rgb(222,223,25)" fg:x="54986" fg:w="3615"/><text x="36.8817%" y="543.50">st..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3,615 samples, 2.41%)</title><rect x="36.6317%" y="517" width="2.4083%" height="15" fill="rgb(214,198,28)" fg:x="54986" fg:w="3615"/><text x="36.8817%" y="527.50">&lt;c..</text></g><g><title>core::ops::function::FnOnce::call_once (3,615 samples, 2.41%)</title><rect x="36.6317%" y="501" width="2.4083%" height="15" fill="rgb(230,46,43)" fg:x="54986" fg:w="3615"/><text x="36.8817%" y="511.50">co..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (3,615 samples, 2.41%)</title><rect x="36.6317%" y="485" width="2.4083%" height="15" fill="rgb(233,65,53)" fg:x="54986" fg:w="3615"/><text x="36.8817%" y="495.50">as..</text></g><g><title>async_ffi::FfiContext::with_context (3,615 samples, 2.41%)</title><rect x="36.6317%" y="469" width="2.4083%" height="15" fill="rgb(221,121,27)" fg:x="54986" fg:w="3615"/><text x="36.8817%" y="479.50">as..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (3,615 samples, 2.41%)</title><rect x="36.6317%" y="453" width="2.4083%" height="15" fill="rgb(247,70,47)" fg:x="54986" fg:w="3615"/><text x="36.8817%" y="463.50">as..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,615 samples, 2.41%)</title><rect x="36.6317%" y="437" width="2.4083%" height="15" fill="rgb(228,85,35)" fg:x="54986" fg:w="3615"/><text x="36.8817%" y="447.50">&lt;c..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (3,528 samples, 2.35%)</title><rect x="36.6897%" y="421" width="2.3504%" height="15" fill="rgb(209,50,18)" fg:x="55073" fg:w="3528"/><text x="36.9397%" y="431.50">&lt;..</text></g><g><title>tremor_runtime::connectors::impls::bench::Acc::next (1,388 samples, 0.92%)</title><rect x="38.1153%" y="405" width="0.9247%" height="15" fill="rgb(250,19,35)" fg:x="57213" fg:w="1388"/><text x="38.3653%" y="415.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (5,370 samples, 3.58%)</title><rect x="35.4632%" y="741" width="3.5775%" height="15" fill="rgb(253,107,29)" fg:x="53232" fg:w="5370"/><text x="35.7132%" y="751.50">trem..</text></g><g><title>[libc-2.31.so] (371 samples, 0.25%)</title><rect x="39.3784%" y="709" width="0.2472%" height="15" fill="rgb(252,179,29)" fg:x="59109" fg:w="371"/><text x="39.6284%" y="719.50"></text></g><g><title>[libc-2.31.so] (557 samples, 0.37%)</title><rect x="39.7015%" y="693" width="0.3711%" height="15" fill="rgb(238,194,6)" fg:x="59594" fg:w="557"/><text x="39.9515%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (338 samples, 0.23%)</title><rect x="40.0726%" y="693" width="0.2252%" height="15" fill="rgb(238,164,29)" fg:x="60151" fg:w="338"/><text x="40.3226%" y="703.50"></text></g><g><title>core::ptr::write (327 samples, 0.22%)</title><rect x="40.0799%" y="677" width="0.2178%" height="15" fill="rgb(224,25,9)" fg:x="60162" fg:w="327"/><text x="40.3299%" y="687.50"></text></g><g><title>[libc-2.31.so] (324 samples, 0.22%)</title><rect x="40.0819%" y="661" width="0.2158%" height="15" fill="rgb(244,153,23)" fg:x="60165" fg:w="324"/><text x="40.3319%" y="671.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (20 samples, 0.01%)</title><rect x="40.2978%" y="693" width="0.0133%" height="15" fill="rgb(212,203,14)" fg:x="60489" fg:w="20"/><text x="40.5478%" y="703.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (470 samples, 0.31%)</title><rect x="40.3178%" y="693" width="0.3131%" height="15" fill="rgb(220,164,20)" fg:x="60519" fg:w="470"/><text x="40.5678%" y="703.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (466 samples, 0.31%)</title><rect x="40.3204%" y="677" width="0.3104%" height="15" fill="rgb(222,203,48)" fg:x="60523" fg:w="466"/><text x="40.5704%" y="687.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (452 samples, 0.30%)</title><rect x="40.3298%" y="661" width="0.3011%" height="15" fill="rgb(215,159,22)" fg:x="60537" fg:w="452"/><text x="40.5798%" y="671.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (452 samples, 0.30%)</title><rect x="40.3298%" y="645" width="0.3011%" height="15" fill="rgb(216,183,47)" fg:x="60537" fg:w="452"/><text x="40.5798%" y="655.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (452 samples, 0.30%)</title><rect x="40.3298%" y="629" width="0.3011%" height="15" fill="rgb(229,195,25)" fg:x="60537" fg:w="452"/><text x="40.5798%" y="639.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (452 samples, 0.30%)</title><rect x="40.3298%" y="613" width="0.3011%" height="15" fill="rgb(224,132,51)" fg:x="60537" fg:w="452"/><text x="40.5798%" y="623.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (452 samples, 0.30%)</title><rect x="40.3298%" y="597" width="0.3011%" height="15" fill="rgb(240,63,7)" fg:x="60537" fg:w="452"/><text x="40.5798%" y="607.50"></text></g><g><title>[libc-2.31.so] (421 samples, 0.28%)</title><rect x="40.3504%" y="581" width="0.2805%" height="15" fill="rgb(249,182,41)" fg:x="60568" fg:w="421"/><text x="40.6004%" y="591.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::clone::Clone&gt;::clone (22 samples, 0.01%)</title><rect x="40.6802%" y="661" width="0.0147%" height="15" fill="rgb(243,47,26)" fg:x="61063" fg:w="22"/><text x="40.9302%" y="671.50"></text></g><g><title>[libc-2.31.so] (441 samples, 0.29%)</title><rect x="40.6948%" y="661" width="0.2938%" height="15" fill="rgb(233,48,2)" fg:x="61085" fg:w="441"/><text x="40.9448%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (298 samples, 0.20%)</title><rect x="40.9933%" y="661" width="0.1985%" height="15" fill="rgb(244,165,34)" fg:x="61533" fg:w="298"/><text x="41.2433%" y="671.50"></text></g><g><title>core::ptr::read (283 samples, 0.19%)</title><rect x="41.0033%" y="645" width="0.1885%" height="15" fill="rgb(207,89,7)" fg:x="61548" fg:w="283"/><text x="41.2533%" y="655.50"></text></g><g><title>[libc-2.31.so] (260 samples, 0.17%)</title><rect x="41.0186%" y="629" width="0.1732%" height="15" fill="rgb(244,117,36)" fg:x="61571" fg:w="260"/><text x="41.2686%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (249 samples, 0.17%)</title><rect x="41.1918%" y="661" width="0.1659%" height="15" fill="rgb(226,144,34)" fg:x="61831" fg:w="249"/><text x="41.4418%" y="671.50"></text></g><g><title>core::ptr::write (240 samples, 0.16%)</title><rect x="41.1978%" y="645" width="0.1599%" height="15" fill="rgb(213,23,19)" fg:x="61840" fg:w="240"/><text x="41.4478%" y="655.50"></text></g><g><title>[libc-2.31.so] (235 samples, 0.16%)</title><rect x="41.2012%" y="629" width="0.1566%" height="15" fill="rgb(217,75,12)" fg:x="61845" fg:w="235"/><text x="41.4512%" y="639.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (2,607 samples, 1.74%)</title><rect x="39.6256%" y="709" width="1.7368%" height="15" fill="rgb(224,159,17)" fg:x="59480" fg:w="2607"/><text x="39.8756%" y="719.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (1,098 samples, 0.73%)</title><rect x="40.6309%" y="693" width="0.7315%" height="15" fill="rgb(217,118,1)" fg:x="60989" fg:w="1098"/><text x="40.8809%" y="703.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (1,078 samples, 0.72%)</title><rect x="40.6442%" y="677" width="0.7182%" height="15" fill="rgb(232,180,48)" fg:x="61009" fg:w="1078"/><text x="40.8942%" y="687.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,031 samples, 2.02%)</title><rect x="39.3644%" y="725" width="2.0193%" height="15" fill="rgb(230,27,33)" fg:x="59088" fg:w="3031"/><text x="39.6144%" y="735.50">&lt;..</text></g><g><title>tremor_runtime::pipeline::handle_insights::{{closure}} (32 samples, 0.02%)</title><rect x="41.3624%" y="709" width="0.0213%" height="15" fill="rgb(205,31,21)" fg:x="62087" fg:w="32"/><text x="41.6124%" y="719.50"></text></g><g><title>[libc-2.31.so] (1,206 samples, 0.80%)</title><rect x="41.3837%" y="725" width="0.8034%" height="15" fill="rgb(253,59,4)" fg:x="62119" fg:w="1206"/><text x="41.6337%" y="735.50"></text></g><g><title>sn_rust_dealloc (156 samples, 0.10%)</title><rect x="42.1958%" y="565" width="0.1039%" height="15" fill="rgb(224,201,9)" fg:x="63338" fg:w="156"/><text x="42.4458%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (170 samples, 0.11%)</title><rect x="42.1891%" y="725" width="0.1133%" height="15" fill="rgb(229,206,30)" fg:x="63328" fg:w="170"/><text x="42.4391%" y="735.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (170 samples, 0.11%)</title><rect x="42.1891%" y="709" width="0.1133%" height="15" fill="rgb(212,67,47)" fg:x="63328" fg:w="170"/><text x="42.4391%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (160 samples, 0.11%)</title><rect x="42.1958%" y="693" width="0.1066%" height="15" fill="rgb(211,96,50)" fg:x="63338" fg:w="160"/><text x="42.4458%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (160 samples, 0.11%)</title><rect x="42.1958%" y="677" width="0.1066%" height="15" fill="rgb(252,114,18)" fg:x="63338" fg:w="160"/><text x="42.4458%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (160 samples, 0.11%)</title><rect x="42.1958%" y="661" width="0.1066%" height="15" fill="rgb(223,58,37)" fg:x="63338" fg:w="160"/><text x="42.4458%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (160 samples, 0.11%)</title><rect x="42.1958%" y="645" width="0.1066%" height="15" fill="rgb(237,70,4)" fg:x="63338" fg:w="160"/><text x="42.4458%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (160 samples, 0.11%)</title><rect x="42.1958%" y="629" width="0.1066%" height="15" fill="rgb(244,85,46)" fg:x="63338" fg:w="160"/><text x="42.4458%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (160 samples, 0.11%)</title><rect x="42.1958%" y="613" width="0.1066%" height="15" fill="rgb(223,39,52)" fg:x="63338" fg:w="160"/><text x="42.4458%" y="623.50"></text></g><g><title>__rg_dealloc (160 samples, 0.11%)</title><rect x="42.1958%" y="597" width="0.1066%" height="15" fill="rgb(218,200,14)" fg:x="63338" fg:w="160"/><text x="42.4458%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (160 samples, 0.11%)</title><rect x="42.1958%" y="581" width="0.1066%" height="15" fill="rgb(208,171,16)" fg:x="63338" fg:w="160"/><text x="42.4458%" y="591.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (21,176 samples, 14.11%)</title><rect x="28.2056%" y="1029" width="14.1075%" height="15" fill="rgb(234,200,18)" fg:x="42338" fg:w="21176"/><text x="28.4556%" y="1039.50">&lt;futures_lite::future..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (21,176 samples, 14.11%)</title><rect x="28.2056%" y="1013" width="14.1075%" height="15" fill="rgb(228,45,11)" fg:x="42338" fg:w="21176"/><text x="28.4556%" y="1023.50">&lt;core::future::from_g..</text></g><g><title>async_executor::Executor::run::{{closure}} (21,176 samples, 14.11%)</title><rect x="28.2056%" y="997" width="14.1075%" height="15" fill="rgb(237,182,11)" fg:x="42338" fg:w="21176"/><text x="28.4556%" y="1007.50">async_executor::Execu..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (21,176 samples, 14.11%)</title><rect x="28.2056%" y="981" width="14.1075%" height="15" fill="rgb(241,175,49)" fg:x="42338" fg:w="21176"/><text x="28.4556%" y="991.50">&lt;futures_lite::future..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (21,176 samples, 14.11%)</title><rect x="28.2056%" y="965" width="14.1075%" height="15" fill="rgb(247,38,35)" fg:x="42338" fg:w="21176"/><text x="28.4556%" y="975.50">&lt;core::future::from_g..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (21,176 samples, 14.11%)</title><rect x="28.2056%" y="949" width="14.1075%" height="15" fill="rgb(228,39,49)" fg:x="42338" fg:w="21176"/><text x="28.4556%" y="959.50">async_executor::Execu..</text></g><g><title>async_task::runnable::Runnable::run (21,176 samples, 14.11%)</title><rect x="28.2056%" y="933" width="14.1075%" height="15" fill="rgb(226,101,26)" fg:x="42338" fg:w="21176"/><text x="28.4556%" y="943.50">async_task::runnable:..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (21,176 samples, 14.11%)</title><rect x="28.2056%" y="917" width="14.1075%" height="15" fill="rgb(206,141,19)" fg:x="42338" fg:w="21176"/><text x="28.4556%" y="927.50">async_task::raw::RawT..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (21,176 samples, 14.11%)</title><rect x="28.2056%" y="901" width="14.1075%" height="15" fill="rgb(211,200,13)" fg:x="42338" fg:w="21176"/><text x="28.4556%" y="911.50">&lt;core::pin::Pin&lt;P&gt; as..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (21,176 samples, 14.11%)</title><rect x="28.2056%" y="885" width="14.1075%" height="15" fill="rgb(241,121,6)" fg:x="42338" fg:w="21176"/><text x="28.4556%" y="895.50">&lt;core::future::from_g..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (21,176 samples, 14.11%)</title><rect x="28.2056%" y="869" width="14.1075%" height="15" fill="rgb(234,221,29)" fg:x="42338" fg:w="21176"/><text x="28.4556%" y="879.50">async_executor::Execu..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (21,176 samples, 14.11%)</title><rect x="28.2056%" y="853" width="14.1075%" height="15" fill="rgb(229,136,5)" fg:x="42338" fg:w="21176"/><text x="28.4556%" y="863.50">&lt;async_std::task::bui..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (21,176 samples, 14.11%)</title><rect x="28.2056%" y="837" width="14.1075%" height="15" fill="rgb(238,36,11)" fg:x="42338" fg:w="21176"/><text x="28.4556%" y="847.50">async_std::task::task..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (21,176 samples, 14.11%)</title><rect x="28.2056%" y="821" width="14.1075%" height="15" fill="rgb(251,55,41)" fg:x="42338" fg:w="21176"/><text x="28.4556%" y="831.50">std::thread::local::L..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (21,176 samples, 14.11%)</title><rect x="28.2056%" y="805" width="14.1075%" height="15" fill="rgb(242,34,40)" fg:x="42338" fg:w="21176"/><text x="28.4556%" y="815.50">std::thread::local::L..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (21,176 samples, 14.11%)</title><rect x="28.2056%" y="789" width="14.1075%" height="15" fill="rgb(215,42,17)" fg:x="42338" fg:w="21176"/><text x="28.4556%" y="799.50">async_std::task::task..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (21,176 samples, 14.11%)</title><rect x="28.2056%" y="773" width="14.1075%" height="15" fill="rgb(207,44,46)" fg:x="42338" fg:w="21176"/><text x="28.4556%" y="783.50">&lt;async_std::task::bui..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (21,176 samples, 14.11%)</title><rect x="28.2056%" y="757" width="14.1075%" height="15" fill="rgb(211,206,28)" fg:x="42338" fg:w="21176"/><text x="28.4556%" y="767.50">&lt;core::future::from_g..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (4,912 samples, 3.27%)</title><rect x="39.0407%" y="741" width="3.2724%" height="15" fill="rgb(237,167,16)" fg:x="58602" fg:w="4912"/><text x="39.2907%" y="751.50">tre..</text></g><g><title>async_io::driver::block_on (21,179 samples, 14.11%)</title><rect x="28.2056%" y="1045" width="14.1095%" height="15" fill="rgb(233,66,6)" fg:x="42338" fg:w="21179"/><text x="28.4556%" y="1055.50">async_io::driver::blo..</text></g><g><title>abi_stable::std_types::boxed::destroy_box (36 samples, 0.02%)</title><rect x="42.4989%" y="581" width="0.0240%" height="15" fill="rgb(246,123,29)" fg:x="63793" fg:w="36"/><text x="42.7489%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (25 samples, 0.02%)</title><rect x="42.5376%" y="581" width="0.0167%" height="15" fill="rgb(209,62,40)" fg:x="63851" fg:w="25"/><text x="42.7876%" y="591.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (25 samples, 0.02%)</title><rect x="42.5376%" y="565" width="0.0167%" height="15" fill="rgb(218,4,25)" fg:x="63851" fg:w="25"/><text x="42.7876%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (25 samples, 0.02%)</title><rect x="42.5376%" y="549" width="0.0167%" height="15" fill="rgb(253,91,49)" fg:x="63851" fg:w="25"/><text x="42.7876%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (25 samples, 0.02%)</title><rect x="42.5376%" y="533" width="0.0167%" height="15" fill="rgb(228,155,29)" fg:x="63851" fg:w="25"/><text x="42.7876%" y="543.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (61 samples, 0.04%)</title><rect x="42.5829%" y="421" width="0.0406%" height="15" fill="rgb(243,57,37)" fg:x="63919" fg:w="61"/><text x="42.8329%" y="431.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (61 samples, 0.04%)</title><rect x="42.5829%" y="405" width="0.0406%" height="15" fill="rgb(244,167,17)" fg:x="63919" fg:w="61"/><text x="42.8329%" y="415.50"></text></g><g><title>sn_rust_dealloc (156 samples, 0.10%)</title><rect x="42.6235%" y="421" width="0.1039%" height="15" fill="rgb(207,181,38)" fg:x="63980" fg:w="156"/><text x="42.8735%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (267 samples, 0.18%)</title><rect x="42.5715%" y="485" width="0.1779%" height="15" fill="rgb(211,8,23)" fg:x="63902" fg:w="267"/><text x="42.8215%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::vec::private::RVec&lt;u8&gt;]&gt; (267 samples, 0.18%)</title><rect x="42.5715%" y="469" width="0.1779%" height="15" fill="rgb(235,11,44)" fg:x="63902" fg:w="267"/><text x="42.8215%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (258 samples, 0.17%)</title><rect x="42.5775%" y="453" width="0.1719%" height="15" fill="rgb(248,18,52)" fg:x="63911" fg:w="258"/><text x="42.8275%" y="463.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (258 samples, 0.17%)</title><rect x="42.5775%" y="437" width="0.1719%" height="15" fill="rgb(208,4,7)" fg:x="63911" fg:w="258"/><text x="42.8275%" y="447.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (33 samples, 0.02%)</title><rect x="42.7274%" y="421" width="0.0220%" height="15" fill="rgb(240,17,39)" fg:x="64136" fg:w="33"/><text x="42.9774%" y="431.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (293 samples, 0.20%)</title><rect x="42.5669%" y="549" width="0.1952%" height="15" fill="rgb(207,170,3)" fg:x="63895" fg:w="293"/><text x="42.8169%" y="559.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (290 samples, 0.19%)</title><rect x="42.5689%" y="533" width="0.1932%" height="15" fill="rgb(236,100,52)" fg:x="63898" fg:w="290"/><text x="42.8189%" y="543.50"></text></g><g><title>core::mem::drop (286 samples, 0.19%)</title><rect x="42.5715%" y="517" width="0.1905%" height="15" fill="rgb(246,78,51)" fg:x="63902" fg:w="286"/><text x="42.8215%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (286 samples, 0.19%)</title><rect x="42.5715%" y="501" width="0.1905%" height="15" fill="rgb(211,17,15)" fg:x="63902" fg:w="286"/><text x="42.8215%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (19 samples, 0.01%)</title><rect x="42.7494%" y="485" width="0.0127%" height="15" fill="rgb(209,59,46)" fg:x="64169" fg:w="19"/><text x="42.9994%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.01%)</title><rect x="42.7494%" y="469" width="0.0127%" height="15" fill="rgb(210,92,25)" fg:x="64169" fg:w="19"/><text x="42.9994%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (321 samples, 0.21%)</title><rect x="42.5622%" y="581" width="0.2139%" height="15" fill="rgb(238,174,52)" fg:x="63888" fg:w="321"/><text x="42.8122%" y="591.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (321 samples, 0.21%)</title><rect x="42.5622%" y="565" width="0.2139%" height="15" fill="rgb(230,73,7)" fg:x="63888" fg:w="321"/><text x="42.8122%" y="575.50"></text></g><g><title>sn_rust_dealloc (21 samples, 0.01%)</title><rect x="42.7621%" y="549" width="0.0140%" height="15" fill="rgb(243,124,40)" fg:x="64188" fg:w="21"/><text x="43.0121%" y="559.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (18 samples, 0.01%)</title><rect x="42.7807%" y="485" width="0.0120%" height="15" fill="rgb(244,170,11)" fg:x="64216" fg:w="18"/><text x="43.0307%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (18 samples, 0.01%)</title><rect x="42.7807%" y="469" width="0.0120%" height="15" fill="rgb(207,114,54)" fg:x="64216" fg:w="18"/><text x="43.0307%" y="479.50"></text></g><g><title>sn_rust_dealloc (72 samples, 0.05%)</title><rect x="42.7927%" y="485" width="0.0480%" height="15" fill="rgb(205,42,20)" fg:x="64234" fg:w="72"/><text x="43.0427%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (95 samples, 0.06%)</title><rect x="42.7794%" y="533" width="0.0633%" height="15" fill="rgb(230,30,28)" fg:x="64214" fg:w="95"/><text x="43.0294%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (95 samples, 0.06%)</title><rect x="42.7794%" y="517" width="0.0633%" height="15" fill="rgb(205,73,54)" fg:x="64214" fg:w="95"/><text x="43.0294%" y="527.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (95 samples, 0.06%)</title><rect x="42.7794%" y="501" width="0.0633%" height="15" fill="rgb(254,227,23)" fg:x="64214" fg:w="95"/><text x="43.0294%" y="511.50"></text></g><g><title>sn_rust_dealloc (147 samples, 0.10%)</title><rect x="42.9979%" y="357" width="0.0979%" height="15" fill="rgb(228,202,34)" fg:x="64542" fg:w="147"/><text x="43.2479%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (381 samples, 0.25%)</title><rect x="42.8513%" y="437" width="0.2538%" height="15" fill="rgb(222,225,37)" fg:x="64322" fg:w="381"/><text x="43.1013%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (381 samples, 0.25%)</title><rect x="42.8513%" y="421" width="0.2538%" height="15" fill="rgb(221,14,54)" fg:x="64322" fg:w="381"/><text x="43.1013%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (362 samples, 0.24%)</title><rect x="42.8640%" y="405" width="0.2412%" height="15" fill="rgb(254,102,2)" fg:x="64341" fg:w="362"/><text x="43.1140%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (362 samples, 0.24%)</title><rect x="42.8640%" y="389" width="0.2412%" height="15" fill="rgb(232,104,17)" fg:x="64341" fg:w="362"/><text x="43.1140%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (362 samples, 0.24%)</title><rect x="42.8640%" y="373" width="0.2412%" height="15" fill="rgb(250,220,14)" fg:x="64341" fg:w="362"/><text x="43.1140%" y="383.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (409 samples, 0.27%)</title><rect x="42.8433%" y="501" width="0.2725%" height="15" fill="rgb(241,158,9)" fg:x="64310" fg:w="409"/><text x="43.0933%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (404 samples, 0.27%)</title><rect x="42.8467%" y="485" width="0.2691%" height="15" fill="rgb(246,9,43)" fg:x="64315" fg:w="404"/><text x="43.0967%" y="495.50"></text></g><g><title>core::mem::drop (397 samples, 0.26%)</title><rect x="42.8513%" y="469" width="0.2645%" height="15" fill="rgb(206,73,33)" fg:x="64322" fg:w="397"/><text x="43.1013%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (397 samples, 0.26%)</title><rect x="42.8513%" y="453" width="0.2645%" height="15" fill="rgb(222,79,8)" fg:x="64322" fg:w="397"/><text x="43.1013%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::string::RString&gt;&gt; (16 samples, 0.01%)</title><rect x="43.1052%" y="437" width="0.0107%" height="15" fill="rgb(234,8,54)" fg:x="64703" fg:w="16"/><text x="43.3552%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="43.1052%" y="421" width="0.0107%" height="15" fill="rgb(209,134,38)" fg:x="64703" fg:w="16"/><text x="43.3552%" y="431.50"></text></g><g><title>sn_rust_dealloc (68 samples, 0.05%)</title><rect x="43.1158%" y="501" width="0.0453%" height="15" fill="rgb(230,127,29)" fg:x="64719" fg:w="68"/><text x="43.3658%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (579 samples, 0.39%)</title><rect x="42.7761%" y="565" width="0.3857%" height="15" fill="rgb(242,44,41)" fg:x="64209" fg:w="579"/><text x="43.0261%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (574 samples, 0.38%)</title><rect x="42.7794%" y="549" width="0.3824%" height="15" fill="rgb(222,56,43)" fg:x="64214" fg:w="574"/><text x="43.0294%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (479 samples, 0.32%)</title><rect x="42.8427%" y="533" width="0.3191%" height="15" fill="rgb(238,39,47)" fg:x="64309" fg:w="479"/><text x="43.0927%" y="543.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (479 samples, 0.32%)</title><rect x="42.8427%" y="517" width="0.3191%" height="15" fill="rgb(226,79,43)" fg:x="64309" fg:w="479"/><text x="43.0927%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (304 samples, 0.20%)</title><rect x="43.1804%" y="533" width="0.2025%" height="15" fill="rgb(242,105,53)" fg:x="64816" fg:w="304"/><text x="43.4304%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (304 samples, 0.20%)</title><rect x="43.1804%" y="517" width="0.2025%" height="15" fill="rgb(251,132,46)" fg:x="64816" fg:w="304"/><text x="43.4304%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (304 samples, 0.20%)</title><rect x="43.1804%" y="501" width="0.2025%" height="15" fill="rgb(231,77,14)" fg:x="64816" fg:w="304"/><text x="43.4304%" y="511.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (315 samples, 0.21%)</title><rect x="43.1764%" y="549" width="0.2099%" height="15" fill="rgb(240,135,9)" fg:x="64810" fg:w="315"/><text x="43.4264%" y="559.50"></text></g><g><title>abi_stable::std_types::arc::private::RArc&lt;T&gt;::data (330 samples, 0.22%)</title><rect x="43.4203%" y="389" width="0.2198%" height="15" fill="rgb(248,109,14)" fg:x="65176" fg:w="330"/><text x="43.6703%" y="399.50"></text></g><g><title>core::mem::drop (366 samples, 0.24%)</title><rect x="43.6514%" y="309" width="0.2438%" height="15" fill="rgb(227,146,52)" fg:x="65523" fg:w="366"/><text x="43.9014%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (366 samples, 0.24%)</title><rect x="43.6514%" y="293" width="0.2438%" height="15" fill="rgb(232,54,3)" fg:x="65523" fg:w="366"/><text x="43.9014%" y="303.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (366 samples, 0.24%)</title><rect x="43.6514%" y="277" width="0.2438%" height="15" fill="rgb(229,201,43)" fg:x="65523" fg:w="366"/><text x="43.9014%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (354 samples, 0.24%)</title><rect x="43.6594%" y="261" width="0.2358%" height="15" fill="rgb(252,161,33)" fg:x="65535" fg:w="354"/><text x="43.9094%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_sub (354 samples, 0.24%)</title><rect x="43.6594%" y="245" width="0.2358%" height="15" fill="rgb(226,146,40)" fg:x="65535" fg:w="354"/><text x="43.9094%" y="255.50"></text></g><g><title>sn_rust_dealloc (141 samples, 0.09%)</title><rect x="43.9053%" y="261" width="0.0939%" height="15" fill="rgb(219,47,25)" fg:x="65904" fg:w="141"/><text x="44.1553%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (846 samples, 0.56%)</title><rect x="43.6461%" y="325" width="0.5636%" height="15" fill="rgb(250,135,13)" fg:x="65515" fg:w="846"/><text x="43.8961%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (472 samples, 0.31%)</title><rect x="43.8953%" y="309" width="0.3144%" height="15" fill="rgb(219,229,18)" fg:x="65889" fg:w="472"/><text x="44.1453%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (472 samples, 0.31%)</title><rect x="43.8953%" y="293" width="0.3144%" height="15" fill="rgb(217,152,27)" fg:x="65889" fg:w="472"/><text x="44.1453%" y="303.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (472 samples, 0.31%)</title><rect x="43.8953%" y="277" width="0.3144%" height="15" fill="rgb(225,71,47)" fg:x="65889" fg:w="472"/><text x="44.1453%" y="287.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (316 samples, 0.21%)</title><rect x="43.9992%" y="261" width="0.2105%" height="15" fill="rgb(220,139,14)" fg:x="66045" fg:w="316"/><text x="44.2492%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (608 samples, 0.41%)</title><rect x="44.2097%" y="325" width="0.4050%" height="15" fill="rgb(247,54,32)" fg:x="66361" fg:w="608"/><text x="44.4597%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_sub (608 samples, 0.41%)</title><rect x="44.2097%" y="309" width="0.4050%" height="15" fill="rgb(252,131,39)" fg:x="66361" fg:w="608"/><text x="44.4597%" y="319.50"></text></g><g><title>sn_rust_dealloc (53 samples, 0.04%)</title><rect x="44.6148%" y="325" width="0.0353%" height="15" fill="rgb(210,108,39)" fg:x="66969" fg:w="53"/><text x="44.8648%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,892 samples, 1.26%)</title><rect x="43.3936%" y="453" width="1.2605%" height="15" fill="rgb(205,23,29)" fg:x="65136" fg:w="1892"/><text x="43.6436%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (1,892 samples, 1.26%)</title><rect x="43.3936%" y="437" width="1.2605%" height="15" fill="rgb(246,139,46)" fg:x="65136" fg:w="1892"/><text x="43.6436%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (1,875 samples, 1.25%)</title><rect x="43.4049%" y="421" width="1.2491%" height="15" fill="rgb(250,81,26)" fg:x="65153" fg:w="1875"/><text x="43.6549%" y="431.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (1,875 samples, 1.25%)</title><rect x="43.4049%" y="405" width="1.2491%" height="15" fill="rgb(214,104,7)" fg:x="65153" fg:w="1875"/><text x="43.6549%" y="415.50"></text></g><g><title>abi_stable::std_types::arc::vtable_mod::destructor_arc (1,522 samples, 1.01%)</title><rect x="43.6401%" y="389" width="1.0140%" height="15" fill="rgb(233,189,8)" fg:x="65506" fg:w="1522"/><text x="43.8901%" y="399.50"></text></g><g><title>core::mem::drop (1,513 samples, 1.01%)</title><rect x="43.6461%" y="373" width="1.0080%" height="15" fill="rgb(228,141,17)" fg:x="65515" fg:w="1513"/><text x="43.8961%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (1,513 samples, 1.01%)</title><rect x="43.6461%" y="357" width="1.0080%" height="15" fill="rgb(247,157,1)" fg:x="65515" fg:w="1513"/><text x="43.8961%" y="367.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1,513 samples, 1.01%)</title><rect x="43.6461%" y="341" width="1.0080%" height="15" fill="rgb(249,225,5)" fg:x="65515" fg:w="1513"/><text x="43.8961%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 0.01%)</title><rect x="44.6541%" y="421" width="0.0107%" height="15" fill="rgb(242,55,13)" fg:x="67028" fg:w="16"/><text x="44.9041%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 0.01%)</title><rect x="44.6541%" y="405" width="0.0107%" height="15" fill="rgb(230,49,50)" fg:x="67028" fg:w="16"/><text x="44.9041%" y="415.50"></text></g><g><title>__rg_dealloc (16 samples, 0.01%)</title><rect x="44.6541%" y="389" width="0.0107%" height="15" fill="rgb(241,111,38)" fg:x="67028" fg:w="16"/><text x="44.9041%" y="399.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (16 samples, 0.01%)</title><rect x="44.6541%" y="373" width="0.0107%" height="15" fill="rgb(252,155,4)" fg:x="67028" fg:w="16"/><text x="44.9041%" y="383.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (1,922 samples, 1.28%)</title><rect x="43.3863%" y="517" width="1.2804%" height="15" fill="rgb(212,69,32)" fg:x="65125" fg:w="1922"/><text x="43.6363%" y="527.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (1,916 samples, 1.28%)</title><rect x="43.3903%" y="501" width="1.2764%" height="15" fill="rgb(243,107,47)" fg:x="65131" fg:w="1916"/><text x="43.6403%" y="511.50"></text></g><g><title>core::mem::drop (1,911 samples, 1.27%)</title><rect x="43.3936%" y="485" width="1.2731%" height="15" fill="rgb(247,130,12)" fg:x="65136" fg:w="1911"/><text x="43.6436%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (1,911 samples, 1.27%)</title><rect x="43.3936%" y="469" width="1.2731%" height="15" fill="rgb(233,74,16)" fg:x="65136" fg:w="1911"/><text x="43.6436%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (19 samples, 0.01%)</title><rect x="44.6541%" y="453" width="0.0127%" height="15" fill="rgb(208,58,18)" fg:x="67028" fg:w="19"/><text x="44.9041%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.01%)</title><rect x="44.6541%" y="437" width="0.0127%" height="15" fill="rgb(242,225,1)" fg:x="67028" fg:w="19"/><text x="44.9041%" y="447.50"></text></g><g><title>sn_rust_dealloc (52 samples, 0.03%)</title><rect x="44.6667%" y="517" width="0.0346%" height="15" fill="rgb(249,39,40)" fg:x="67047" fg:w="52"/><text x="44.9167%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (1,975 samples, 1.32%)</title><rect x="43.3863%" y="549" width="1.3157%" height="15" fill="rgb(207,72,44)" fg:x="65125" fg:w="1975"/><text x="43.6363%" y="559.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (1,975 samples, 1.32%)</title><rect x="43.3863%" y="533" width="1.3157%" height="15" fill="rgb(215,193,12)" fg:x="65125" fg:w="1975"/><text x="43.6363%" y="543.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::next_n (77 samples, 0.05%)</title><rect x="44.7513%" y="309" width="0.0513%" height="15" fill="rgb(248,41,39)" fg:x="67174" fg:w="77"/><text x="45.0013%" y="319.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (67 samples, 0.04%)</title><rect x="44.7580%" y="293" width="0.0446%" height="15" fill="rgb(253,85,4)" fg:x="67184" fg:w="67"/><text x="45.0080%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (163 samples, 0.11%)</title><rect x="44.7453%" y="341" width="0.1086%" height="15" fill="rgb(243,70,31)" fg:x="67165" fg:w="163"/><text x="44.9953%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (163 samples, 0.11%)</title><rect x="44.7453%" y="325" width="0.1086%" height="15" fill="rgb(253,195,26)" fg:x="67165" fg:w="163"/><text x="44.9953%" y="335.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (66 samples, 0.04%)</title><rect x="44.8100%" y="309" width="0.0440%" height="15" fill="rgb(243,42,11)" fg:x="67262" fg:w="66"/><text x="45.0600%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (612 samples, 0.41%)</title><rect x="44.9279%" y="245" width="0.4077%" height="15" fill="rgb(239,66,17)" fg:x="67439" fg:w="612"/><text x="45.1779%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tremor_value::value::Value]&gt; (602 samples, 0.40%)</title><rect x="44.9345%" y="229" width="0.4011%" height="15" fill="rgb(217,132,21)" fg:x="67449" fg:w="602"/><text x="45.1845%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (544 samples, 0.36%)</title><rect x="44.9732%" y="213" width="0.3624%" height="15" fill="rgb(252,202,21)" fg:x="67507" fg:w="544"/><text x="45.2232%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt; (39 samples, 0.03%)</title><rect x="45.3096%" y="197" width="0.0260%" height="15" fill="rgb(233,98,36)" fg:x="68012" fg:w="39"/><text x="45.5596%" y="207.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (673 samples, 0.45%)</title><rect x="44.9019%" y="309" width="0.4484%" height="15" fill="rgb(216,153,54)" fg:x="67400" fg:w="673"/><text x="45.1519%" y="319.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (661 samples, 0.44%)</title><rect x="44.9099%" y="293" width="0.4404%" height="15" fill="rgb(250,99,7)" fg:x="67412" fg:w="661"/><text x="45.1599%" y="303.50"></text></g><g><title>core::mem::drop (634 samples, 0.42%)</title><rect x="44.9279%" y="277" width="0.4224%" height="15" fill="rgb(207,56,50)" fg:x="67439" fg:w="634"/><text x="45.1779%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;tremor_value::value::Value&gt;&gt; (634 samples, 0.42%)</title><rect x="44.9279%" y="261" width="0.4224%" height="15" fill="rgb(244,61,34)" fg:x="67439" fg:w="634"/><text x="45.1779%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;tremor_value::value::Value&gt;&gt; (22 samples, 0.01%)</title><rect x="45.3356%" y="245" width="0.0147%" height="15" fill="rgb(241,50,38)" fg:x="68051" fg:w="22"/><text x="45.5856%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.01%)</title><rect x="45.3356%" y="229" width="0.0147%" height="15" fill="rgb(212,166,30)" fg:x="68051" fg:w="22"/><text x="45.5856%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;&gt; (243 samples, 0.16%)</title><rect x="45.3509%" y="293" width="0.1619%" height="15" fill="rgb(249,127,32)" fg:x="68074" fg:w="243"/><text x="45.6009%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt; (66 samples, 0.04%)</title><rect x="45.4688%" y="277" width="0.0440%" height="15" fill="rgb(209,103,0)" fg:x="68251" fg:w="66"/><text x="45.7188%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (497 samples, 0.33%)</title><rect x="45.3503%" y="309" width="0.3311%" height="15" fill="rgb(238,209,51)" fg:x="68073" fg:w="497"/><text x="45.6003%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (253 samples, 0.17%)</title><rect x="45.5128%" y="293" width="0.1685%" height="15" fill="rgb(237,56,23)" fg:x="68317" fg:w="253"/><text x="45.7628%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_value::value::Value&gt;&gt; (17 samples, 0.01%)</title><rect x="45.6700%" y="277" width="0.0113%" height="15" fill="rgb(215,153,46)" fg:x="68553" fg:w="17"/><text x="45.9200%" y="287.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (17 samples, 0.01%)</title><rect x="45.6700%" y="261" width="0.0113%" height="15" fill="rgb(224,49,31)" fg:x="68553" fg:w="17"/><text x="45.9200%" y="271.50"></text></g><g><title>sn_rust_dealloc (201 samples, 0.13%)</title><rect x="45.6814%" y="309" width="0.1339%" height="15" fill="rgb(250,18,42)" fg:x="68570" fg:w="201"/><text x="45.9314%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1,802 samples, 1.20%)</title><rect x="44.8539%" y="325" width="1.2005%" height="15" fill="rgb(215,176,39)" fg:x="67328" fg:w="1802"/><text x="45.1039%" y="335.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (359 samples, 0.24%)</title><rect x="45.8153%" y="309" width="0.2392%" height="15" fill="rgb(223,77,29)" fg:x="68771" fg:w="359"/><text x="46.0653%" y="319.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::drop (1,809 samples, 1.21%)</title><rect x="44.8539%" y="341" width="1.2052%" height="15" fill="rgb(234,94,52)" fg:x="67328" fg:w="1809"/><text x="45.1039%" y="351.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (35 samples, 0.02%)</title><rect x="46.0631%" y="309" width="0.0233%" height="15" fill="rgb(220,154,50)" fg:x="69143" fg:w="35"/><text x="46.3131%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (35 samples, 0.02%)</title><rect x="46.0631%" y="293" width="0.0233%" height="15" fill="rgb(212,11,10)" fg:x="69143" fg:w="35"/><text x="46.3131%" y="303.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (2,018 samples, 1.34%)</title><rect x="44.7453%" y="357" width="1.3444%" height="15" fill="rgb(205,166,19)" fg:x="67165" fg:w="2018"/><text x="44.9953%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (45 samples, 0.03%)</title><rect x="46.0598%" y="341" width="0.0300%" height="15" fill="rgb(244,198,16)" fg:x="69138" fg:w="45"/><text x="46.3098%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (45 samples, 0.03%)</title><rect x="46.0598%" y="325" width="0.0300%" height="15" fill="rgb(219,69,12)" fg:x="69138" fg:w="45"/><text x="46.3098%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (2,035 samples, 1.36%)</title><rect x="44.7453%" y="405" width="1.3557%" height="15" fill="rgb(245,30,7)" fg:x="67165" fg:w="2035"/><text x="44.9953%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (2,035 samples, 1.36%)</title><rect x="44.7453%" y="389" width="1.3557%" height="15" fill="rgb(218,221,48)" fg:x="67165" fg:w="2035"/><text x="44.9953%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,035 samples, 1.36%)</title><rect x="44.7453%" y="373" width="1.3557%" height="15" fill="rgb(216,66,15)" fg:x="67165" fg:w="2035"/><text x="44.9953%" y="383.50"></text></g><g><title>sn_rust_dealloc (127 samples, 0.08%)</title><rect x="46.1011%" y="405" width="0.0846%" height="15" fill="rgb(226,122,50)" fg:x="69200" fg:w="127"/><text x="46.3511%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (2,568 samples, 1.71%)</title><rect x="44.7334%" y="453" width="1.7108%" height="15" fill="rgb(239,156,16)" fg:x="67147" fg:w="2568"/><text x="44.9834%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (2,568 samples, 1.71%)</title><rect x="44.7334%" y="437" width="1.7108%" height="15" fill="rgb(224,27,38)" fg:x="67147" fg:w="2568"/><text x="44.9834%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (2,568 samples, 1.71%)</title><rect x="44.7334%" y="421" width="1.7108%" height="15" fill="rgb(224,39,27)" fg:x="67147" fg:w="2568"/><text x="44.9834%" y="431.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (388 samples, 0.26%)</title><rect x="46.1857%" y="405" width="0.2585%" height="15" fill="rgb(215,92,29)" fg:x="69327" fg:w="388"/><text x="46.4357%" y="415.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (2,586 samples, 1.72%)</title><rect x="44.7287%" y="469" width="1.7228%" height="15" fill="rgb(207,159,16)" fg:x="67140" fg:w="2586"/><text x="44.9787%" y="479.50"></text></g><g><title>sn_rust_dealloc (80 samples, 0.05%)</title><rect x="46.4515%" y="469" width="0.0533%" height="15" fill="rgb(238,163,47)" fg:x="69726" fg:w="80"/><text x="46.7015%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (2,738 samples, 1.82%)</title><rect x="44.7020%" y="549" width="1.8241%" height="15" fill="rgb(219,91,49)" fg:x="67100" fg:w="2738"/><text x="44.9520%" y="559.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (2,738 samples, 1.82%)</title><rect x="44.7020%" y="533" width="1.8241%" height="15" fill="rgb(227,167,31)" fg:x="67100" fg:w="2738"/><text x="44.9520%" y="543.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (2,721 samples, 1.81%)</title><rect x="44.7134%" y="517" width="1.8127%" height="15" fill="rgb(234,80,54)" fg:x="67117" fg:w="2721"/><text x="44.9634%" y="527.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (2,721 samples, 1.81%)</title><rect x="44.7134%" y="501" width="1.8127%" height="15" fill="rgb(212,114,2)" fg:x="67117" fg:w="2721"/><text x="44.9634%" y="511.50">c..</text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (2,721 samples, 1.81%)</title><rect x="44.7134%" y="485" width="1.8127%" height="15" fill="rgb(234,50,24)" fg:x="67117" fg:w="2721"/><text x="44.9634%" y="495.50">a..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (32 samples, 0.02%)</title><rect x="46.5048%" y="469" width="0.0213%" height="15" fill="rgb(221,68,8)" fg:x="69806" fg:w="32"/><text x="46.7548%" y="479.50"></text></g><g><title>sn_rust_dealloc (48 samples, 0.03%)</title><rect x="46.5261%" y="549" width="0.0320%" height="15" fill="rgb(254,180,31)" fg:x="69838" fg:w="48"/><text x="46.7761%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (5,815 samples, 3.87%)</title><rect x="42.7761%" y="581" width="3.8740%" height="15" fill="rgb(247,130,50)" fg:x="64209" fg:w="5815"/><text x="43.0261%" y="591.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (5,214 samples, 3.47%)</title><rect x="43.1764%" y="565" width="3.4736%" height="15" fill="rgb(211,109,4)" fg:x="64810" fg:w="5214"/><text x="43.4264%" y="575.50">cor..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (138 samples, 0.09%)</title><rect x="46.5581%" y="549" width="0.0919%" height="15" fill="rgb(238,50,21)" fg:x="69886" fg:w="138"/><text x="46.8081%" y="559.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::bucket_for (19 samples, 0.01%)</title><rect x="46.7220%" y="501" width="0.0127%" height="15" fill="rgb(225,57,45)" fg:x="70132" fg:w="19"/><text x="46.9720%" y="511.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::mut_at (41 samples, 0.03%)</title><rect x="46.7100%" y="533" width="0.0273%" height="15" fill="rgb(209,196,50)" fg:x="70114" fg:w="41"/><text x="46.9600%" y="543.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::index_for (33 samples, 0.02%)</title><rect x="46.7153%" y="517" width="0.0220%" height="15" fill="rgb(242,140,13)" fg:x="70122" fg:w="33"/><text x="46.9653%" y="527.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (132 samples, 0.09%)</title><rect x="46.6540%" y="581" width="0.0879%" height="15" fill="rgb(217,111,7)" fg:x="70030" fg:w="132"/><text x="46.9040%" y="591.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n (128 samples, 0.09%)</title><rect x="46.6567%" y="565" width="0.0853%" height="15" fill="rgb(253,193,51)" fg:x="70034" fg:w="128"/><text x="46.9067%" y="575.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n_inner (128 samples, 0.09%)</title><rect x="46.6567%" y="549" width="0.0853%" height="15" fill="rgb(252,70,29)" fg:x="70034" fg:w="128"/><text x="46.9067%" y="559.50"></text></g><g><title>sn_rust_dealloc (64 samples, 0.04%)</title><rect x="46.7419%" y="581" width="0.0426%" height="15" fill="rgb(232,127,12)" fg:x="70162" fg:w="64"/><text x="46.9919%" y="591.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (210 samples, 0.14%)</title><rect x="46.7846%" y="581" width="0.1399%" height="15" fill="rgb(211,180,21)" fg:x="70226" fg:w="210"/><text x="47.0346%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (17 samples, 0.01%)</title><rect x="46.9305%" y="565" width="0.0113%" height="15" fill="rgb(229,72,13)" fg:x="70445" fg:w="17"/><text x="47.1805%" y="575.50"></text></g><g><title>core::time::Duration::as_nanos (21 samples, 0.01%)</title><rect x="46.9418%" y="565" width="0.0140%" height="15" fill="rgb(240,211,49)" fg:x="70462" fg:w="21"/><text x="47.1918%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (98 samples, 0.07%)</title><rect x="46.9558%" y="549" width="0.0653%" height="15" fill="rgb(219,149,40)" fg:x="70483" fg:w="98"/><text x="47.2058%" y="559.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (37 samples, 0.02%)</title><rect x="47.0391%" y="517" width="0.0246%" height="15" fill="rgb(210,127,46)" fg:x="70608" fg:w="37"/><text x="47.2891%" y="527.50"></text></g><g><title>core::cmp::PartialOrd::ge (37 samples, 0.02%)</title><rect x="47.0391%" y="501" width="0.0246%" height="15" fill="rgb(220,106,7)" fg:x="70608" fg:w="37"/><text x="47.2891%" y="511.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (37 samples, 0.02%)</title><rect x="47.0391%" y="485" width="0.0246%" height="15" fill="rgb(249,31,22)" fg:x="70608" fg:w="37"/><text x="47.2891%" y="495.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (37 samples, 0.02%)</title><rect x="47.0391%" y="469" width="0.0246%" height="15" fill="rgb(253,1,49)" fg:x="70608" fg:w="37"/><text x="47.2891%" y="479.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (37 samples, 0.02%)</title><rect x="47.0391%" y="453" width="0.0246%" height="15" fill="rgb(227,144,33)" fg:x="70608" fg:w="37"/><text x="47.2891%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (20 samples, 0.01%)</title><rect x="47.0504%" y="437" width="0.0133%" height="15" fill="rgb(249,163,44)" fg:x="70625" fg:w="20"/><text x="47.3004%" y="447.50"></text></g><g><title>std::time::SystemTime::duration_since (179 samples, 0.12%)</title><rect x="46.9558%" y="565" width="0.1192%" height="15" fill="rgb(234,15,39)" fg:x="70483" fg:w="179"/><text x="47.2058%" y="575.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (81 samples, 0.05%)</title><rect x="47.0211%" y="549" width="0.0540%" height="15" fill="rgb(207,66,16)" fg:x="70581" fg:w="81"/><text x="47.2711%" y="559.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (81 samples, 0.05%)</title><rect x="47.0211%" y="533" width="0.0540%" height="15" fill="rgb(233,112,24)" fg:x="70581" fg:w="81"/><text x="47.2711%" y="543.50"></text></g><g><title>core::time::Duration::new (17 samples, 0.01%)</title><rect x="47.0637%" y="517" width="0.0113%" height="15" fill="rgb(230,90,22)" fg:x="70645" fg:w="17"/><text x="47.3137%" y="527.50"></text></g><g><title>tremor_common::time::nanotime (609 samples, 0.41%)</title><rect x="46.9245%" y="581" width="0.4057%" height="15" fill="rgb(229,61,13)" fg:x="70436" fg:w="609"/><text x="47.1745%" y="591.50"></text></g><g><title>std::time::SystemTime::now (383 samples, 0.26%)</title><rect x="47.0750%" y="565" width="0.2552%" height="15" fill="rgb(225,57,24)" fg:x="70662" fg:w="383"/><text x="47.3250%" y="575.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (383 samples, 0.26%)</title><rect x="47.0750%" y="549" width="0.2552%" height="15" fill="rgb(208,169,48)" fg:x="70662" fg:w="383"/><text x="47.3250%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::now (383 samples, 0.26%)</title><rect x="47.0750%" y="533" width="0.2552%" height="15" fill="rgb(244,218,51)" fg:x="70662" fg:w="383"/><text x="47.3250%" y="543.50"></text></g><g><title>__clock_gettime (308 samples, 0.21%)</title><rect x="47.1250%" y="517" width="0.2052%" height="15" fill="rgb(214,148,10)" fg:x="70737" fg:w="308"/><text x="47.3750%" y="527.50"></text></g><g><title>__vdso_clock_gettime (299 samples, 0.20%)</title><rect x="47.1310%" y="501" width="0.1992%" height="15" fill="rgb(225,174,27)" fg:x="70746" fg:w="299"/><text x="47.3810%" y="511.50"></text></g><g><title>[[vdso]] (253 samples, 0.17%)</title><rect x="47.1617%" y="485" width="0.1685%" height="15" fill="rgb(230,96,26)" fg:x="70792" fg:w="253"/><text x="47.4117%" y="495.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (128 samples, 0.09%)</title><rect x="47.3389%" y="565" width="0.0853%" height="15" fill="rgb(232,10,30)" fg:x="71058" fg:w="128"/><text x="47.5889%" y="575.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (7,669 samples, 5.11%)</title><rect x="42.3184%" y="869" width="5.1091%" height="15" fill="rgb(222,8,50)" fg:x="63522" fg:w="7669"/><text x="42.5684%" y="879.50">tremor..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,669 samples, 5.11%)</title><rect x="42.3184%" y="853" width="5.1091%" height="15" fill="rgb(213,81,27)" fg:x="63522" fg:w="7669"/><text x="42.5684%" y="863.50">&lt;core:..</text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (7,669 samples, 5.11%)</title><rect x="42.3184%" y="837" width="5.1091%" height="15" fill="rgb(245,50,10)" fg:x="63522" fg:w="7669"/><text x="42.5684%" y="847.50">tremor..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,669 samples, 5.11%)</title><rect x="42.3184%" y="821" width="5.1091%" height="15" fill="rgb(216,100,18)" fg:x="63522" fg:w="7669"/><text x="42.5684%" y="831.50">&lt;async..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,669 samples, 5.11%)</title><rect x="42.3184%" y="805" width="5.1091%" height="15" fill="rgb(236,147,54)" fg:x="63522" fg:w="7669"/><text x="42.5684%" y="815.50">&lt;async..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (7,669 samples, 5.11%)</title><rect x="42.3184%" y="789" width="5.1091%" height="15" fill="rgb(205,143,26)" fg:x="63522" fg:w="7669"/><text x="42.5684%" y="799.50">&lt;core:..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (7,669 samples, 5.11%)</title><rect x="42.3184%" y="773" width="5.1091%" height="15" fill="rgb(236,26,9)" fg:x="63522" fg:w="7669"/><text x="42.5684%" y="783.50">&lt;async..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (7,669 samples, 5.11%)</title><rect x="42.3184%" y="757" width="5.1091%" height="15" fill="rgb(221,165,53)" fg:x="63522" fg:w="7669"/><text x="42.5684%" y="767.50">async_..</text></g><g><title>std::panic::catch_unwind (7,669 samples, 5.11%)</title><rect x="42.3184%" y="741" width="5.1091%" height="15" fill="rgb(214,110,17)" fg:x="63522" fg:w="7669"/><text x="42.5684%" y="751.50">std::p..</text></g><g><title>std::panicking::try (7,669 samples, 5.11%)</title><rect x="42.3184%" y="725" width="5.1091%" height="15" fill="rgb(237,197,12)" fg:x="63522" fg:w="7669"/><text x="42.5684%" y="735.50">std::p..</text></g><g><title>std::panicking::try::do_call (7,669 samples, 5.11%)</title><rect x="42.3184%" y="709" width="5.1091%" height="15" fill="rgb(205,84,17)" fg:x="63522" fg:w="7669"/><text x="42.5684%" y="719.50">std::p..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (7,669 samples, 5.11%)</title><rect x="42.3184%" y="693" width="5.1091%" height="15" fill="rgb(237,18,45)" fg:x="63522" fg:w="7669"/><text x="42.5684%" y="703.50">&lt;core:..</text></g><g><title>core::ops::function::FnOnce::call_once (7,669 samples, 5.11%)</title><rect x="42.3184%" y="677" width="5.1091%" height="15" fill="rgb(221,87,14)" fg:x="63522" fg:w="7669"/><text x="42.5684%" y="687.50">core::..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (7,669 samples, 5.11%)</title><rect x="42.3184%" y="661" width="5.1091%" height="15" fill="rgb(238,186,15)" fg:x="63522" fg:w="7669"/><text x="42.5684%" y="671.50">async_..</text></g><g><title>async_ffi::FfiContext::with_context (7,669 samples, 5.11%)</title><rect x="42.3184%" y="645" width="5.1091%" height="15" fill="rgb(208,115,11)" fg:x="63522" fg:w="7669"/><text x="42.5684%" y="655.50">async_..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (7,669 samples, 5.11%)</title><rect x="42.3184%" y="629" width="5.1091%" height="15" fill="rgb(254,175,0)" fg:x="63522" fg:w="7669"/><text x="42.5684%" y="639.50">async_..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,669 samples, 5.11%)</title><rect x="42.3184%" y="613" width="5.1091%" height="15" fill="rgb(227,24,42)" fg:x="63522" fg:w="7669"/><text x="42.5684%" y="623.50">&lt;core:..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (7,660 samples, 5.10%)</title><rect x="42.3244%" y="597" width="5.1031%" height="15" fill="rgb(223,211,37)" fg:x="63531" fg:w="7660"/><text x="42.5744%" y="607.50">&lt;tremo..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (146 samples, 0.10%)</title><rect x="47.3302%" y="581" width="0.0973%" height="15" fill="rgb(235,49,27)" fg:x="71045" fg:w="146"/><text x="47.5802%" y="591.50"></text></g><g><title>[libc-2.31.so] (184 samples, 0.12%)</title><rect x="47.4355%" y="741" width="0.1226%" height="15" fill="rgb(254,97,51)" fg:x="71203" fg:w="184"/><text x="47.6855%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (208 samples, 0.14%)</title><rect x="47.6973%" y="661" width="0.1386%" height="15" fill="rgb(249,51,40)" fg:x="71596" fg:w="208"/><text x="47.9473%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (208 samples, 0.14%)</title><rect x="47.6973%" y="645" width="0.1386%" height="15" fill="rgb(210,128,45)" fg:x="71596" fg:w="208"/><text x="47.9473%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1,147 samples, 0.76%)</title><rect x="47.8358%" y="661" width="0.7641%" height="15" fill="rgb(224,137,50)" fg:x="71804" fg:w="1147"/><text x="48.0858%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_load (1,144 samples, 0.76%)</title><rect x="47.8378%" y="645" width="0.7621%" height="15" fill="rgb(242,15,9)" fg:x="71807" fg:w="1144"/><text x="48.0878%" y="655.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (1,468 samples, 0.98%)</title><rect x="47.6253%" y="693" width="0.9780%" height="15" fill="rgb(233,187,41)" fg:x="71488" fg:w="1468"/><text x="47.8753%" y="703.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (1,430 samples, 0.95%)</title><rect x="47.6506%" y="677" width="0.9527%" height="15" fill="rgb(227,2,29)" fg:x="71526" fg:w="1430"/><text x="47.9006%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (121 samples, 0.08%)</title><rect x="48.6080%" y="677" width="0.0806%" height="15" fill="rgb(222,70,3)" fg:x="72963" fg:w="121"/><text x="48.8580%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (116 samples, 0.08%)</title><rect x="48.6113%" y="661" width="0.0773%" height="15" fill="rgb(213,11,42)" fg:x="72968" fg:w="116"/><text x="48.8613%" y="671.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (116 samples, 0.08%)</title><rect x="48.6113%" y="645" width="0.0773%" height="15" fill="rgb(225,150,9)" fg:x="72968" fg:w="116"/><text x="48.8613%" y="655.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (115 samples, 0.08%)</title><rect x="48.6120%" y="629" width="0.0766%" height="15" fill="rgb(230,162,45)" fg:x="72969" fg:w="115"/><text x="48.8620%" y="639.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (115 samples, 0.08%)</title><rect x="48.6120%" y="613" width="0.0766%" height="15" fill="rgb(222,14,52)" fg:x="72969" fg:w="115"/><text x="48.8620%" y="623.50"></text></g><g><title>__GI___pthread_mutex_unlock (115 samples, 0.08%)</title><rect x="48.6120%" y="597" width="0.0766%" height="15" fill="rgb(254,198,14)" fg:x="72969" fg:w="115"/><text x="48.8620%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (22 samples, 0.01%)</title><rect x="48.6886%" y="677" width="0.0147%" height="15" fill="rgb(220,217,30)" fg:x="73084" fg:w="22"/><text x="48.9386%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_load (22 samples, 0.01%)</title><rect x="48.6886%" y="661" width="0.0147%" height="15" fill="rgb(215,146,41)" fg:x="73084" fg:w="22"/><text x="48.9386%" y="671.50"></text></g><g><title>std::sync::poison::Flag::get (17 samples, 0.01%)</title><rect x="48.7039%" y="613" width="0.0113%" height="15" fill="rgb(217,27,36)" fg:x="73107" fg:w="17"/><text x="48.9539%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (17 samples, 0.01%)</title><rect x="48.7039%" y="597" width="0.0113%" height="15" fill="rgb(219,218,39)" fg:x="73107" fg:w="17"/><text x="48.9539%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_load (17 samples, 0.01%)</title><rect x="48.7039%" y="581" width="0.0113%" height="15" fill="rgb(219,4,42)" fg:x="73107" fg:w="17"/><text x="48.9539%" y="591.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (24 samples, 0.02%)</title><rect x="48.7039%" y="645" width="0.0160%" height="15" fill="rgb(249,119,36)" fg:x="73107" fg:w="24"/><text x="48.9539%" y="655.50"></text></g><g><title>std::sync::poison::Flag::borrow (24 samples, 0.02%)</title><rect x="48.7039%" y="629" width="0.0160%" height="15" fill="rgb(209,23,33)" fg:x="73107" fg:w="24"/><text x="48.9539%" y="639.50"></text></g><g><title>event_listener::Inner::lock (38 samples, 0.03%)</title><rect x="48.7032%" y="677" width="0.0253%" height="15" fill="rgb(211,10,0)" fg:x="73106" fg:w="38"/><text x="48.9532%" y="687.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (37 samples, 0.02%)</title><rect x="48.7039%" y="661" width="0.0246%" height="15" fill="rgb(208,99,37)" fg:x="73107" fg:w="37"/><text x="48.9539%" y="671.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (2,414 samples, 1.61%)</title><rect x="47.6160%" y="709" width="1.6082%" height="15" fill="rgb(213,132,31)" fg:x="71474" fg:w="2414"/><text x="47.8660%" y="719.50"></text></g><g><title>event_listener::Event::notify (932 samples, 0.62%)</title><rect x="48.6033%" y="693" width="0.6209%" height="15" fill="rgb(243,129,40)" fg:x="72956" fg:w="932"/><text x="48.8533%" y="703.50"></text></g><g><title>event_listener::full_fence (744 samples, 0.50%)</title><rect x="48.7286%" y="677" width="0.4957%" height="15" fill="rgb(210,66,33)" fg:x="73144" fg:w="744"/><text x="48.9786%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (738 samples, 0.49%)</title><rect x="48.7326%" y="661" width="0.4917%" height="15" fill="rgb(209,189,4)" fg:x="73150" fg:w="738"/><text x="48.9826%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (738 samples, 0.49%)</title><rect x="48.7326%" y="645" width="0.4917%" height="15" fill="rgb(214,107,37)" fg:x="73150" fg:w="738"/><text x="48.9826%" y="655.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::capacity (31 samples, 0.02%)</title><rect x="49.2242%" y="709" width="0.0207%" height="15" fill="rgb(245,88,54)" fg:x="73888" fg:w="31"/><text x="49.4742%" y="719.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (2,637 samples, 1.76%)</title><rect x="47.5834%" y="725" width="1.7568%" height="15" fill="rgb(205,146,20)" fg:x="71425" fg:w="2637"/><text x="47.8334%" y="735.50"></text></g><g><title>event_listener::Event::notify (135 samples, 0.09%)</title><rect x="49.2502%" y="709" width="0.0899%" height="15" fill="rgb(220,161,25)" fg:x="73927" fg:w="135"/><text x="49.5002%" y="719.50"></text></g><g><title>event_listener::full_fence (118 samples, 0.08%)</title><rect x="49.2615%" y="693" width="0.0786%" height="15" fill="rgb(215,152,15)" fg:x="73944" fg:w="118"/><text x="49.5115%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (112 samples, 0.07%)</title><rect x="49.2655%" y="677" width="0.0746%" height="15" fill="rgb(233,192,44)" fg:x="73950" fg:w="112"/><text x="49.5155%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (112 samples, 0.07%)</title><rect x="49.2655%" y="661" width="0.0746%" height="15" fill="rgb(240,170,46)" fg:x="73950" fg:w="112"/><text x="49.5155%" y="671.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="49.3448%" y="677" width="0.0153%" height="15" fill="rgb(207,104,33)" fg:x="74069" fg:w="23"/><text x="49.5948%" y="687.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,904 samples, 1.93%)</title><rect x="47.4275%" y="757" width="1.9346%" height="15" fill="rgb(219,21,39)" fg:x="71191" fg:w="2904"/><text x="47.6775%" y="767.50">&lt;..</text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (2,708 samples, 1.80%)</title><rect x="47.5580%" y="741" width="1.8041%" height="15" fill="rgb(214,133,29)" fg:x="71387" fg:w="2708"/><text x="47.8080%" y="751.50">t..</text></g><g><title>core::ptr::drop_in_place&lt;async_channel::Send&lt;alloc::boxed::Box&lt;tremor_runtime::pipeline::Msg&gt;&gt;&gt; (33 samples, 0.02%)</title><rect x="49.3401%" y="725" width="0.0220%" height="15" fill="rgb(226,93,6)" fg:x="74062" fg:w="33"/><text x="49.5901%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (26 samples, 0.02%)</title><rect x="49.3448%" y="709" width="0.0173%" height="15" fill="rgb(252,222,34)" fg:x="74069" fg:w="26"/><text x="49.5948%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (26 samples, 0.02%)</title><rect x="49.3448%" y="693" width="0.0173%" height="15" fill="rgb(252,92,48)" fg:x="74069" fg:w="26"/><text x="49.5948%" y="703.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (286 samples, 0.19%)</title><rect x="49.3681%" y="629" width="0.1905%" height="15" fill="rgb(245,223,24)" fg:x="74104" fg:w="286"/><text x="49.6181%" y="639.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (287 samples, 0.19%)</title><rect x="49.3681%" y="757" width="0.1912%" height="15" fill="rgb(205,176,3)" fg:x="74104" fg:w="287"/><text x="49.6181%" y="767.50"></text></g><g><title>alloc::alloc::exchange_malloc (287 samples, 0.19%)</title><rect x="49.3681%" y="741" width="0.1912%" height="15" fill="rgb(235,151,15)" fg:x="74104" fg:w="287"/><text x="49.6181%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (287 samples, 0.19%)</title><rect x="49.3681%" y="725" width="0.1912%" height="15" fill="rgb(237,209,11)" fg:x="74104" fg:w="287"/><text x="49.6181%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (287 samples, 0.19%)</title><rect x="49.3681%" y="709" width="0.1912%" height="15" fill="rgb(243,227,24)" fg:x="74104" fg:w="287"/><text x="49.6181%" y="719.50"></text></g><g><title>alloc::alloc::alloc (287 samples, 0.19%)</title><rect x="49.3681%" y="693" width="0.1912%" height="15" fill="rgb(239,193,16)" fg:x="74104" fg:w="287"/><text x="49.6181%" y="703.50"></text></g><g><title>__rg_alloc (287 samples, 0.19%)</title><rect x="49.3681%" y="677" width="0.1912%" height="15" fill="rgb(231,27,9)" fg:x="74104" fg:w="287"/><text x="49.6181%" y="687.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (287 samples, 0.19%)</title><rect x="49.3681%" y="661" width="0.1912%" height="15" fill="rgb(219,169,10)" fg:x="74104" fg:w="287"/><text x="49.6181%" y="671.50"></text></g><g><title>sn_rust_alloc (287 samples, 0.19%)</title><rect x="49.3681%" y="645" width="0.1912%" height="15" fill="rgb(244,229,43)" fg:x="74104" fg:w="287"/><text x="49.6181%" y="655.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,209 samples, 2.14%)</title><rect x="47.4275%" y="853" width="2.1378%" height="15" fill="rgb(254,38,20)" fg:x="71191" fg:w="3209"/><text x="47.6775%" y="863.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (3,209 samples, 2.14%)</title><rect x="47.4275%" y="837" width="2.1378%" height="15" fill="rgb(250,47,30)" fg:x="71191" fg:w="3209"/><text x="47.6775%" y="847.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,209 samples, 2.14%)</title><rect x="47.4275%" y="821" width="2.1378%" height="15" fill="rgb(224,124,36)" fg:x="71191" fg:w="3209"/><text x="47.6775%" y="831.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (3,209 samples, 2.14%)</title><rect x="47.4275%" y="805" width="2.1378%" height="15" fill="rgb(246,68,51)" fg:x="71191" fg:w="3209"/><text x="47.6775%" y="815.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,209 samples, 2.14%)</title><rect x="47.4275%" y="789" width="2.1378%" height="15" fill="rgb(253,43,49)" fg:x="71191" fg:w="3209"/><text x="47.6775%" y="799.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (3,209 samples, 2.14%)</title><rect x="47.4275%" y="773" width="2.1378%" height="15" fill="rgb(219,54,36)" fg:x="71191" fg:w="3209"/><text x="47.6775%" y="783.50">t..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (3,210 samples, 2.14%)</title><rect x="47.4275%" y="869" width="2.1385%" height="15" fill="rgb(227,133,34)" fg:x="71191" fg:w="3210"/><text x="47.6775%" y="879.50">t..</text></g><g><title>[libc-2.31.so] (86 samples, 0.06%)</title><rect x="49.5746%" y="837" width="0.0573%" height="15" fill="rgb(247,227,15)" fg:x="74414" fg:w="86"/><text x="49.8246%" y="847.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (18 samples, 0.01%)</title><rect x="49.7232%" y="821" width="0.0120%" height="15" fill="rgb(229,96,14)" fg:x="74637" fg:w="18"/><text x="49.9732%" y="831.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="49.7432%" y="805" width="0.0107%" height="15" fill="rgb(220,79,17)" fg:x="74667" fg:w="16"/><text x="49.9932%" y="815.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (300 samples, 0.20%)</title><rect x="49.7432%" y="821" width="0.1999%" height="15" fill="rgb(205,131,53)" fg:x="74667" fg:w="300"/><text x="49.9932%" y="831.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (284 samples, 0.19%)</title><rect x="49.7538%" y="805" width="0.1892%" height="15" fill="rgb(209,50,29)" fg:x="74683" fg:w="284"/><text x="50.0038%" y="815.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (282 samples, 0.19%)</title><rect x="49.7552%" y="789" width="0.1879%" height="15" fill="rgb(245,86,46)" fg:x="74685" fg:w="282"/><text x="50.0052%" y="799.50"></text></g><g><title>core::ptr::read (282 samples, 0.19%)</title><rect x="49.7552%" y="773" width="0.1879%" height="15" fill="rgb(235,66,46)" fg:x="74685" fg:w="282"/><text x="50.0052%" y="783.50"></text></g><g><title>[libc-2.31.so] (280 samples, 0.19%)</title><rect x="49.7565%" y="757" width="0.1865%" height="15" fill="rgb(232,148,31)" fg:x="74687" fg:w="280"/><text x="50.0065%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (248 samples, 0.17%)</title><rect x="49.9450%" y="693" width="0.1652%" height="15" fill="rgb(217,149,8)" fg:x="74970" fg:w="248"/><text x="50.1950%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (248 samples, 0.17%)</title><rect x="49.9450%" y="677" width="0.1652%" height="15" fill="rgb(209,183,11)" fg:x="74970" fg:w="248"/><text x="50.1950%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (248 samples, 0.17%)</title><rect x="49.9450%" y="661" width="0.1652%" height="15" fill="rgb(208,55,20)" fg:x="74970" fg:w="248"/><text x="50.1950%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (248 samples, 0.17%)</title><rect x="49.9450%" y="645" width="0.1652%" height="15" fill="rgb(218,39,14)" fg:x="74970" fg:w="248"/><text x="50.1950%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (248 samples, 0.17%)</title><rect x="49.9450%" y="629" width="0.1652%" height="15" fill="rgb(216,169,33)" fg:x="74970" fg:w="248"/><text x="50.1950%" y="639.50"></text></g><g><title>alloc::alloc::alloc (248 samples, 0.17%)</title><rect x="49.9450%" y="613" width="0.1652%" height="15" fill="rgb(233,80,24)" fg:x="74970" fg:w="248"/><text x="50.1950%" y="623.50"></text></g><g><title>__rg_alloc (248 samples, 0.17%)</title><rect x="49.9450%" y="597" width="0.1652%" height="15" fill="rgb(213,179,31)" fg:x="74970" fg:w="248"/><text x="50.1950%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (248 samples, 0.17%)</title><rect x="49.9450%" y="581" width="0.1652%" height="15" fill="rgb(209,19,5)" fg:x="74970" fg:w="248"/><text x="50.1950%" y="591.50"></text></g><g><title>sn_rust_alloc (238 samples, 0.16%)</title><rect x="49.9517%" y="565" width="0.1586%" height="15" fill="rgb(219,18,35)" fg:x="74980" fg:w="238"/><text x="50.2017%" y="575.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (269 samples, 0.18%)</title><rect x="49.9450%" y="821" width="0.1792%" height="15" fill="rgb(209,169,16)" fg:x="74970" fg:w="269"/><text x="50.1950%" y="831.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (269 samples, 0.18%)</title><rect x="49.9450%" y="805" width="0.1792%" height="15" fill="rgb(245,90,51)" fg:x="74970" fg:w="269"/><text x="50.1950%" y="815.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (269 samples, 0.18%)</title><rect x="49.9450%" y="789" width="0.1792%" height="15" fill="rgb(220,99,45)" fg:x="74970" fg:w="269"/><text x="50.1950%" y="799.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (269 samples, 0.18%)</title><rect x="49.9450%" y="773" width="0.1792%" height="15" fill="rgb(249,89,25)" fg:x="74970" fg:w="269"/><text x="50.1950%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (269 samples, 0.18%)</title><rect x="49.9450%" y="757" width="0.1792%" height="15" fill="rgb(239,193,0)" fg:x="74970" fg:w="269"/><text x="50.1950%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (269 samples, 0.18%)</title><rect x="49.9450%" y="741" width="0.1792%" height="15" fill="rgb(231,126,1)" fg:x="74970" fg:w="269"/><text x="50.1950%" y="751.50"></text></g><g><title>alloc::slice::hack::to_vec (269 samples, 0.18%)</title><rect x="49.9450%" y="725" width="0.1792%" height="15" fill="rgb(243,166,3)" fg:x="74970" fg:w="269"/><text x="50.1950%" y="735.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (269 samples, 0.18%)</title><rect x="49.9450%" y="709" width="0.1792%" height="15" fill="rgb(223,22,34)" fg:x="74970" fg:w="269"/><text x="50.1950%" y="719.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (21 samples, 0.01%)</title><rect x="50.1103%" y="693" width="0.0140%" height="15" fill="rgb(251,52,51)" fg:x="75218" fg:w="21"/><text x="50.3603%" y="703.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (21 samples, 0.01%)</title><rect x="50.1103%" y="677" width="0.0140%" height="15" fill="rgb(221,165,28)" fg:x="75218" fg:w="21"/><text x="50.3603%" y="687.50"></text></g><g><title>[libc-2.31.so] (992 samples, 0.66%)</title><rect x="50.1242%" y="821" width="0.6609%" height="15" fill="rgb(218,121,47)" fg:x="75239" fg:w="992"/><text x="50.3742%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::drain (16 samples, 0.01%)</title><rect x="50.7851%" y="821" width="0.0107%" height="15" fill="rgb(209,120,9)" fg:x="76231" fg:w="16"/><text x="51.0351%" y="831.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,893 samples, 1.26%)</title><rect x="49.5660%" y="853" width="1.2611%" height="15" fill="rgb(236,68,12)" fg:x="74401" fg:w="1893"/><text x="49.8160%" y="863.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (1,794 samples, 1.20%)</title><rect x="49.6319%" y="837" width="1.1952%" height="15" fill="rgb(225,194,26)" fg:x="74500" fg:w="1794"/><text x="49.8819%" y="847.50"></text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (24 samples, 0.02%)</title><rect x="50.8111%" y="821" width="0.0160%" height="15" fill="rgb(231,84,39)" fg:x="76270" fg:w="24"/><text x="51.0611%" y="831.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (24 samples, 0.02%)</title><rect x="50.8111%" y="805" width="0.0160%" height="15" fill="rgb(210,11,45)" fg:x="76270" fg:w="24"/><text x="51.0611%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (24 samples, 0.02%)</title><rect x="50.8111%" y="789" width="0.0160%" height="15" fill="rgb(224,54,52)" fg:x="76270" fg:w="24"/><text x="51.0611%" y="799.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (12,774 samples, 8.51%)</title><rect x="42.3177%" y="1045" width="8.5100%" height="15" fill="rgb(238,102,14)" fg:x="63521" fg:w="12774"/><text x="42.5677%" y="1055.50">async_task::..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (12,773 samples, 8.51%)</title><rect x="42.3184%" y="1029" width="8.5094%" height="15" fill="rgb(243,160,52)" fg:x="63522" fg:w="12773"/><text x="42.5684%" y="1039.50">&lt;core::pin::..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,773 samples, 8.51%)</title><rect x="42.3184%" y="1013" width="8.5094%" height="15" fill="rgb(216,114,19)" fg:x="63522" fg:w="12773"/><text x="42.5684%" y="1023.50">&lt;core::futur..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (12,773 samples, 8.51%)</title><rect x="42.3184%" y="997" width="8.5094%" height="15" fill="rgb(244,166,37)" fg:x="63522" fg:w="12773"/><text x="42.5684%" y="1007.50">async_execut..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (12,773 samples, 8.51%)</title><rect x="42.3184%" y="981" width="8.5094%" height="15" fill="rgb(246,29,44)" fg:x="63522" fg:w="12773"/><text x="42.5684%" y="991.50">&lt;async_std::..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (12,773 samples, 8.51%)</title><rect x="42.3184%" y="965" width="8.5094%" height="15" fill="rgb(215,56,53)" fg:x="63522" fg:w="12773"/><text x="42.5684%" y="975.50">async_std::t..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (12,773 samples, 8.51%)</title><rect x="42.3184%" y="949" width="8.5094%" height="15" fill="rgb(217,60,2)" fg:x="63522" fg:w="12773"/><text x="42.5684%" y="959.50">std::thread:..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (12,773 samples, 8.51%)</title><rect x="42.3184%" y="933" width="8.5094%" height="15" fill="rgb(207,26,24)" fg:x="63522" fg:w="12773"/><text x="42.5684%" y="943.50">std::thread:..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (12,773 samples, 8.51%)</title><rect x="42.3184%" y="917" width="8.5094%" height="15" fill="rgb(252,210,15)" fg:x="63522" fg:w="12773"/><text x="42.5684%" y="927.50">async_std::t..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (12,773 samples, 8.51%)</title><rect x="42.3184%" y="901" width="8.5094%" height="15" fill="rgb(253,209,26)" fg:x="63522" fg:w="12773"/><text x="42.5684%" y="911.50">&lt;async_std::..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,773 samples, 8.51%)</title><rect x="42.3184%" y="885" width="8.5094%" height="15" fill="rgb(238,170,14)" fg:x="63522" fg:w="12773"/><text x="42.5684%" y="895.50">&lt;core::futur..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (1,894 samples, 1.26%)</title><rect x="49.5660%" y="869" width="1.2618%" height="15" fill="rgb(216,178,15)" fg:x="74401" fg:w="1894"/><text x="49.8160%" y="879.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (24 samples, 0.02%)</title><rect x="50.8371%" y="1045" width="0.0160%" height="15" fill="rgb(250,197,2)" fg:x="76309" fg:w="24"/><text x="51.0871%" y="1055.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (16 samples, 0.01%)</title><rect x="50.8531%" y="1045" width="0.0107%" height="15" fill="rgb(212,70,42)" fg:x="76333" fg:w="16"/><text x="51.1031%" y="1055.50"></text></g><g><title>event_listener::Event::notify (54 samples, 0.04%)</title><rect x="50.9417%" y="1045" width="0.0360%" height="15" fill="rgb(227,213,9)" fg:x="76466" fg:w="54"/><text x="51.1917%" y="1055.50"></text></g><g><title>event_listener::full_fence (29 samples, 0.02%)</title><rect x="50.9583%" y="1029" width="0.0193%" height="15" fill="rgb(245,99,25)" fg:x="76491" fg:w="29"/><text x="51.2083%" y="1039.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (298 samples, 0.20%)</title><rect x="50.9883%" y="1045" width="0.1985%" height="15" fill="rgb(250,82,29)" fg:x="76536" fg:w="298"/><text x="51.2383%" y="1055.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (24 samples, 0.02%)</title><rect x="51.1868%" y="1045" width="0.0160%" height="15" fill="rgb(241,226,54)" fg:x="76834" fg:w="24"/><text x="51.4368%" y="1055.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (24 samples, 0.02%)</title><rect x="51.2028%" y="1045" width="0.0160%" height="15" fill="rgb(221,99,41)" fg:x="76858" fg:w="24"/><text x="51.4528%" y="1055.50"></text></g><g><title>parking::Inner::park (41 samples, 0.03%)</title><rect x="51.2188%" y="1045" width="0.0273%" height="15" fill="rgb(213,90,21)" fg:x="76882" fg:w="41"/><text x="51.4688%" y="1055.50"></text></g><g><title>polling::epoll::Poller::wait (34 samples, 0.02%)</title><rect x="51.2548%" y="1045" width="0.0227%" height="15" fill="rgb(205,208,24)" fg:x="76936" fg:w="34"/><text x="51.5048%" y="1055.50"></text></g><g><title>simd_json::stage2::&lt;impl simd_json::Deserializer&gt;::build_tape (46 samples, 0.03%)</title><rect x="51.2841%" y="1045" width="0.0306%" height="15" fill="rgb(246,31,12)" fg:x="76980" fg:w="46"/><text x="51.5341%" y="1055.50"></text></g><g><title>sn_rust_alloc (87 samples, 0.06%)</title><rect x="51.3147%" y="1045" width="0.0580%" height="15" fill="rgb(213,154,6)" fg:x="77026" fg:w="87"/><text x="51.5647%" y="1055.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (25 samples, 0.02%)</title><rect x="51.3967%" y="1045" width="0.0167%" height="15" fill="rgb(222,163,29)" fg:x="77149" fg:w="25"/><text x="51.6467%" y="1055.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (38 samples, 0.03%)</title><rect x="51.4253%" y="1045" width="0.0253%" height="15" fill="rgb(227,201,8)" fg:x="77192" fg:w="38"/><text x="51.6753%" y="1055.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode (75 samples, 0.05%)</title><rect x="51.4813%" y="597" width="0.0500%" height="15" fill="rgb(233,9,32)" fg:x="77276" fg:w="75"/><text x="51.7313%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (51 samples, 0.03%)</title><rect x="51.4973%" y="581" width="0.0340%" height="15" fill="rgb(217,54,24)" fg:x="77300" fg:w="51"/><text x="51.7473%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (51 samples, 0.03%)</title><rect x="51.4973%" y="565" width="0.0340%" height="15" fill="rgb(235,192,0)" fg:x="77300" fg:w="51"/><text x="51.7473%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (46 samples, 0.03%)</title><rect x="51.5006%" y="549" width="0.0306%" height="15" fill="rgb(235,45,9)" fg:x="77305" fg:w="46"/><text x="51.7506%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (46 samples, 0.03%)</title><rect x="51.5006%" y="533" width="0.0306%" height="15" fill="rgb(246,42,40)" fg:x="77305" fg:w="46"/><text x="51.7506%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (46 samples, 0.03%)</title><rect x="51.5006%" y="517" width="0.0306%" height="15" fill="rgb(248,111,24)" fg:x="77305" fg:w="46"/><text x="51.7506%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (46 samples, 0.03%)</title><rect x="51.5006%" y="501" width="0.0306%" height="15" fill="rgb(249,65,22)" fg:x="77305" fg:w="46"/><text x="51.7506%" y="511.50"></text></g><g><title>alloc::alloc::alloc (43 samples, 0.03%)</title><rect x="51.5026%" y="485" width="0.0286%" height="15" fill="rgb(238,111,51)" fg:x="77308" fg:w="43"/><text x="51.7526%" y="495.50"></text></g><g><title>__rg_alloc (43 samples, 0.03%)</title><rect x="51.5026%" y="469" width="0.0286%" height="15" fill="rgb(250,118,22)" fg:x="77308" fg:w="43"/><text x="51.7526%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (43 samples, 0.03%)</title><rect x="51.5026%" y="453" width="0.0286%" height="15" fill="rgb(234,84,26)" fg:x="77308" fg:w="43"/><text x="51.7526%" y="463.50"></text></g><g><title>sn_rust_alloc (43 samples, 0.03%)</title><rect x="51.5026%" y="437" width="0.0286%" height="15" fill="rgb(243,172,12)" fg:x="77308" fg:w="43"/><text x="51.7526%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (68 samples, 0.05%)</title><rect x="51.6312%" y="325" width="0.0453%" height="15" fill="rgb(236,150,49)" fg:x="77501" fg:w="68"/><text x="51.8812%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (68 samples, 0.05%)</title><rect x="51.6312%" y="309" width="0.0453%" height="15" fill="rgb(225,197,26)" fg:x="77501" fg:w="68"/><text x="51.8812%" y="319.50"></text></g><g><title>__rg_dealloc (68 samples, 0.05%)</title><rect x="51.6312%" y="293" width="0.0453%" height="15" fill="rgb(214,17,42)" fg:x="77501" fg:w="68"/><text x="51.8812%" y="303.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (68 samples, 0.05%)</title><rect x="51.6312%" y="277" width="0.0453%" height="15" fill="rgb(224,165,40)" fg:x="77501" fg:w="68"/><text x="51.8812%" y="287.50"></text></g><g><title>sn_rust_dealloc (59 samples, 0.04%)</title><rect x="51.6372%" y="261" width="0.0393%" height="15" fill="rgb(246,100,4)" fg:x="77510" fg:w="59"/><text x="51.8872%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (87 samples, 0.06%)</title><rect x="51.6252%" y="421" width="0.0580%" height="15" fill="rgb(222,103,0)" fg:x="77492" fg:w="87"/><text x="51.8752%" y="431.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (87 samples, 0.06%)</title><rect x="51.6252%" y="405" width="0.0580%" height="15" fill="rgb(227,189,26)" fg:x="77492" fg:w="87"/><text x="51.8752%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (78 samples, 0.05%)</title><rect x="51.6312%" y="389" width="0.0520%" height="15" fill="rgb(214,202,17)" fg:x="77501" fg:w="78"/><text x="51.8812%" y="399.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (78 samples, 0.05%)</title><rect x="51.6312%" y="373" width="0.0520%" height="15" fill="rgb(229,111,3)" fg:x="77501" fg:w="78"/><text x="51.8812%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (78 samples, 0.05%)</title><rect x="51.6312%" y="357" width="0.0520%" height="15" fill="rgb(229,172,15)" fg:x="77501" fg:w="78"/><text x="51.8812%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (78 samples, 0.05%)</title><rect x="51.6312%" y="341" width="0.0520%" height="15" fill="rgb(230,224,35)" fg:x="77501" fg:w="78"/><text x="51.8812%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (107 samples, 0.07%)</title><rect x="51.6139%" y="469" width="0.0713%" height="15" fill="rgb(251,141,6)" fg:x="77475" fg:w="107"/><text x="51.8639%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (102 samples, 0.07%)</title><rect x="51.6172%" y="453" width="0.0680%" height="15" fill="rgb(225,208,6)" fg:x="77480" fg:w="102"/><text x="51.8672%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (102 samples, 0.07%)</title><rect x="51.6172%" y="437" width="0.0680%" height="15" fill="rgb(246,181,16)" fg:x="77480" fg:w="102"/><text x="51.8672%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (125 samples, 0.08%)</title><rect x="51.6039%" y="485" width="0.0833%" height="15" fill="rgb(227,129,36)" fg:x="77460" fg:w="125"/><text x="51.8539%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (50 samples, 0.03%)</title><rect x="51.6872%" y="485" width="0.0333%" height="15" fill="rgb(248,117,24)" fg:x="77585" fg:w="50"/><text x="51.9372%" y="495.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (29 samples, 0.02%)</title><rect x="51.7011%" y="469" width="0.0193%" height="15" fill="rgb(214,185,35)" fg:x="77606" fg:w="29"/><text x="51.9511%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (29 samples, 0.02%)</title><rect x="51.7011%" y="453" width="0.0193%" height="15" fill="rgb(236,150,34)" fg:x="77606" fg:w="29"/><text x="51.9511%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (101 samples, 0.07%)</title><rect x="51.7218%" y="421" width="0.0673%" height="15" fill="rgb(243,228,27)" fg:x="77637" fg:w="101"/><text x="51.9718%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (101 samples, 0.07%)</title><rect x="51.7218%" y="405" width="0.0673%" height="15" fill="rgb(245,77,44)" fg:x="77637" fg:w="101"/><text x="51.9718%" y="415.50"></text></g><g><title>alloc::alloc::alloc (96 samples, 0.06%)</title><rect x="51.7251%" y="389" width="0.0640%" height="15" fill="rgb(235,214,42)" fg:x="77642" fg:w="96"/><text x="51.9751%" y="399.50"></text></g><g><title>__rg_alloc (96 samples, 0.06%)</title><rect x="51.7251%" y="373" width="0.0640%" height="15" fill="rgb(221,74,3)" fg:x="77642" fg:w="96"/><text x="51.9751%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (96 samples, 0.06%)</title><rect x="51.7251%" y="357" width="0.0640%" height="15" fill="rgb(206,121,29)" fg:x="77642" fg:w="96"/><text x="51.9751%" y="367.50"></text></g><g><title>sn_rust_alloc (90 samples, 0.06%)</title><rect x="51.7291%" y="341" width="0.0600%" height="15" fill="rgb(249,131,53)" fg:x="77648" fg:w="90"/><text x="51.9791%" y="351.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (470 samples, 0.31%)</title><rect x="51.4813%" y="965" width="0.3131%" height="15" fill="rgb(236,170,29)" fg:x="77276" fg:w="470"/><text x="51.7313%" y="975.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (470 samples, 0.31%)</title><rect x="51.4813%" y="949" width="0.3131%" height="15" fill="rgb(247,96,15)" fg:x="77276" fg:w="470"/><text x="51.7313%" y="959.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (470 samples, 0.31%)</title><rect x="51.4813%" y="933" width="0.3131%" height="15" fill="rgb(211,210,7)" fg:x="77276" fg:w="470"/><text x="51.7313%" y="943.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (470 samples, 0.31%)</title><rect x="51.4813%" y="917" width="0.3131%" height="15" fill="rgb(240,88,50)" fg:x="77276" fg:w="470"/><text x="51.7313%" y="927.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (470 samples, 0.31%)</title><rect x="51.4813%" y="901" width="0.3131%" height="15" fill="rgb(209,229,26)" fg:x="77276" fg:w="470"/><text x="51.7313%" y="911.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (470 samples, 0.31%)</title><rect x="51.4813%" y="885" width="0.3131%" height="15" fill="rgb(210,68,23)" fg:x="77276" fg:w="470"/><text x="51.7313%" y="895.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (470 samples, 0.31%)</title><rect x="51.4813%" y="869" width="0.3131%" height="15" fill="rgb(229,180,13)" fg:x="77276" fg:w="470"/><text x="51.7313%" y="879.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (470 samples, 0.31%)</title><rect x="51.4813%" y="853" width="0.3131%" height="15" fill="rgb(236,53,44)" fg:x="77276" fg:w="470"/><text x="51.7313%" y="863.50"></text></g><g><title>std::panic::catch_unwind (470 samples, 0.31%)</title><rect x="51.4813%" y="837" width="0.3131%" height="15" fill="rgb(244,214,29)" fg:x="77276" fg:w="470"/><text x="51.7313%" y="847.50"></text></g><g><title>std::panicking::try (470 samples, 0.31%)</title><rect x="51.4813%" y="821" width="0.3131%" height="15" fill="rgb(220,75,29)" fg:x="77276" fg:w="470"/><text x="51.7313%" y="831.50"></text></g><g><title>std::panicking::try::do_call (470 samples, 0.31%)</title><rect x="51.4813%" y="805" width="0.3131%" height="15" fill="rgb(214,183,37)" fg:x="77276" fg:w="470"/><text x="51.7313%" y="815.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (470 samples, 0.31%)</title><rect x="51.4813%" y="789" width="0.3131%" height="15" fill="rgb(239,117,29)" fg:x="77276" fg:w="470"/><text x="51.7313%" y="799.50"></text></g><g><title>core::ops::function::FnOnce::call_once (470 samples, 0.31%)</title><rect x="51.4813%" y="773" width="0.3131%" height="15" fill="rgb(237,171,35)" fg:x="77276" fg:w="470"/><text x="51.7313%" y="783.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (470 samples, 0.31%)</title><rect x="51.4813%" y="757" width="0.3131%" height="15" fill="rgb(229,178,53)" fg:x="77276" fg:w="470"/><text x="51.7313%" y="767.50"></text></g><g><title>async_ffi::FfiContext::with_context (470 samples, 0.31%)</title><rect x="51.4813%" y="741" width="0.3131%" height="15" fill="rgb(210,102,19)" fg:x="77276" fg:w="470"/><text x="51.7313%" y="751.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (470 samples, 0.31%)</title><rect x="51.4813%" y="725" width="0.3131%" height="15" fill="rgb(235,127,22)" fg:x="77276" fg:w="470"/><text x="51.7313%" y="735.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (470 samples, 0.31%)</title><rect x="51.4813%" y="709" width="0.3131%" height="15" fill="rgb(244,31,31)" fg:x="77276" fg:w="470"/><text x="51.7313%" y="719.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (470 samples, 0.31%)</title><rect x="51.4813%" y="693" width="0.3131%" height="15" fill="rgb(231,43,21)" fg:x="77276" fg:w="470"/><text x="51.7313%" y="703.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (470 samples, 0.31%)</title><rect x="51.4813%" y="677" width="0.3131%" height="15" fill="rgb(217,131,35)" fg:x="77276" fg:w="470"/><text x="51.7313%" y="687.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (470 samples, 0.31%)</title><rect x="51.4813%" y="661" width="0.3131%" height="15" fill="rgb(221,149,4)" fg:x="77276" fg:w="470"/><text x="51.7313%" y="671.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (470 samples, 0.31%)</title><rect x="51.4813%" y="645" width="0.3131%" height="15" fill="rgb(232,170,28)" fg:x="77276" fg:w="470"/><text x="51.7313%" y="655.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (470 samples, 0.31%)</title><rect x="51.4813%" y="629" width="0.3131%" height="15" fill="rgb(238,56,10)" fg:x="77276" fg:w="470"/><text x="51.7313%" y="639.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (470 samples, 0.31%)</title><rect x="51.4813%" y="613" width="0.3131%" height="15" fill="rgb(235,196,14)" fg:x="77276" fg:w="470"/><text x="51.7313%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (395 samples, 0.26%)</title><rect x="51.5313%" y="597" width="0.2631%" height="15" fill="rgb(216,45,48)" fg:x="77351" fg:w="395"/><text x="51.7813%" y="607.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::iter::traits::collect::FromIterator&lt;T&gt; for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::from_iter (395 samples, 0.26%)</title><rect x="51.5313%" y="581" width="0.2631%" height="15" fill="rgb(238,213,17)" fg:x="77351" fg:w="395"/><text x="51.7813%" y="591.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (395 samples, 0.26%)</title><rect x="51.5313%" y="565" width="0.2631%" height="15" fill="rgb(212,13,2)" fg:x="77351" fg:w="395"/><text x="51.7813%" y="575.50"></text></g><g><title>core::ops::function::FnOnce::call_once (395 samples, 0.26%)</title><rect x="51.5313%" y="549" width="0.2631%" height="15" fill="rgb(240,114,20)" fg:x="77351" fg:w="395"/><text x="51.7813%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (395 samples, 0.26%)</title><rect x="51.5313%" y="533" width="0.2631%" height="15" fill="rgb(228,41,40)" fg:x="77351" fg:w="395"/><text x="51.7813%" y="543.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (395 samples, 0.26%)</title><rect x="51.5313%" y="517" width="0.2631%" height="15" fill="rgb(244,132,35)" fg:x="77351" fg:w="395"/><text x="51.7813%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (290 samples, 0.19%)</title><rect x="51.6012%" y="501" width="0.1932%" height="15" fill="rgb(253,189,4)" fg:x="77456" fg:w="290"/><text x="51.8512%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (111 samples, 0.07%)</title><rect x="51.7205%" y="485" width="0.0739%" height="15" fill="rgb(224,37,19)" fg:x="77635" fg:w="111"/><text x="51.9705%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (111 samples, 0.07%)</title><rect x="51.7205%" y="469" width="0.0739%" height="15" fill="rgb(235,223,18)" fg:x="77635" fg:w="111"/><text x="51.9705%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (111 samples, 0.07%)</title><rect x="51.7205%" y="453" width="0.0739%" height="15" fill="rgb(235,163,25)" fg:x="77635" fg:w="111"/><text x="51.9705%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (111 samples, 0.07%)</title><rect x="51.7205%" y="437" width="0.0739%" height="15" fill="rgb(217,145,28)" fg:x="77635" fg:w="111"/><text x="51.9705%" y="447.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::default::Default&gt;::default (355 samples, 0.24%)</title><rect x="51.9730%" y="837" width="0.2365%" height="15" fill="rgb(223,223,32)" fg:x="78014" fg:w="355"/><text x="52.2230%" y="847.50"></text></g><g><title>&lt;tremor_pipeline::event::Event as core::default::Default&gt;::default (527 samples, 0.35%)</title><rect x="51.9516%" y="853" width="0.3511%" height="15" fill="rgb(227,189,39)" fg:x="77982" fg:w="527"/><text x="52.2016%" y="863.50"></text></g><g><title>&lt;tremor_script::srs::EventPayload as core::default::Default&gt;::default (140 samples, 0.09%)</title><rect x="52.2095%" y="837" width="0.0933%" height="15" fill="rgb(248,10,22)" fg:x="78369" fg:w="140"/><text x="52.4595%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (25 samples, 0.02%)</title><rect x="52.3067%" y="853" width="0.0167%" height="15" fill="rgb(248,46,39)" fg:x="78515" fg:w="25"/><text x="52.5567%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (25 samples, 0.02%)</title><rect x="52.3067%" y="837" width="0.0167%" height="15" fill="rgb(248,113,48)" fg:x="78515" fg:w="25"/><text x="52.5567%" y="847.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (25 samples, 0.02%)</title><rect x="52.3067%" y="821" width="0.0167%" height="15" fill="rgb(245,16,25)" fg:x="78515" fg:w="25"/><text x="52.5567%" y="831.50"></text></g><g><title>sn_rust_dealloc (67 samples, 0.04%)</title><rect x="52.3560%" y="757" width="0.0446%" height="15" fill="rgb(249,152,16)" fg:x="78589" fg:w="67"/><text x="52.6060%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (105 samples, 0.07%)</title><rect x="52.3327%" y="837" width="0.0700%" height="15" fill="rgb(250,16,1)" fg:x="78554" fg:w="105"/><text x="52.5827%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (105 samples, 0.07%)</title><rect x="52.3327%" y="821" width="0.0700%" height="15" fill="rgb(249,138,3)" fg:x="78554" fg:w="105"/><text x="52.5827%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (86 samples, 0.06%)</title><rect x="52.3454%" y="805" width="0.0573%" height="15" fill="rgb(227,71,41)" fg:x="78573" fg:w="86"/><text x="52.5954%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (86 samples, 0.06%)</title><rect x="52.3454%" y="789" width="0.0573%" height="15" fill="rgb(209,184,23)" fg:x="78573" fg:w="86"/><text x="52.5954%" y="799.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (86 samples, 0.06%)</title><rect x="52.3454%" y="773" width="0.0573%" height="15" fill="rgb(223,215,31)" fg:x="78573" fg:w="86"/><text x="52.5954%" y="783.50"></text></g><g><title>sn_rust_dealloc (28 samples, 0.02%)</title><rect x="52.4027%" y="837" width="0.0187%" height="15" fill="rgb(210,146,28)" fg:x="78659" fg:w="28"/><text x="52.6527%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (148 samples, 0.10%)</title><rect x="52.3234%" y="853" width="0.0986%" height="15" fill="rgb(209,183,41)" fg:x="78540" fg:w="148"/><text x="52.5734%" y="863.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (966 samples, 0.64%)</title><rect x="51.7944%" y="869" width="0.6435%" height="15" fill="rgb(209,224,45)" fg:x="77746" fg:w="966"/><text x="52.0444%" y="879.50"></text></g><g><title>tremor_pipeline::EventIdGenerator::next_with_pull_id (24 samples, 0.02%)</title><rect x="52.4220%" y="853" width="0.0160%" height="15" fill="rgb(224,209,51)" fg:x="78688" fg:w="24"/><text x="52.6720%" y="863.50"></text></g><g><title>alloc::alloc::exchange_malloc (52 samples, 0.03%)</title><rect x="52.4633%" y="853" width="0.0346%" height="15" fill="rgb(223,17,39)" fg:x="78750" fg:w="52"/><text x="52.7133%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (52 samples, 0.03%)</title><rect x="52.4633%" y="837" width="0.0346%" height="15" fill="rgb(234,204,37)" fg:x="78750" fg:w="52"/><text x="52.7133%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (52 samples, 0.03%)</title><rect x="52.4633%" y="821" width="0.0346%" height="15" fill="rgb(236,120,5)" fg:x="78750" fg:w="52"/><text x="52.7133%" y="831.50"></text></g><g><title>alloc::alloc::alloc (52 samples, 0.03%)</title><rect x="52.4633%" y="805" width="0.0346%" height="15" fill="rgb(248,97,27)" fg:x="78750" fg:w="52"/><text x="52.7133%" y="815.50"></text></g><g><title>__rg_alloc (52 samples, 0.03%)</title><rect x="52.4633%" y="789" width="0.0346%" height="15" fill="rgb(240,66,17)" fg:x="78750" fg:w="52"/><text x="52.7133%" y="799.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (52 samples, 0.03%)</title><rect x="52.4633%" y="773" width="0.0346%" height="15" fill="rgb(210,79,3)" fg:x="78750" fg:w="52"/><text x="52.7133%" y="783.50"></text></g><g><title>sn_rust_alloc (48 samples, 0.03%)</title><rect x="52.4659%" y="757" width="0.0320%" height="15" fill="rgb(214,176,27)" fg:x="78754" fg:w="48"/><text x="52.7159%" y="767.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,073 samples, 0.71%)</title><rect x="51.7944%" y="949" width="0.7148%" height="15" fill="rgb(235,185,3)" fg:x="77746" fg:w="1073"/><text x="52.0444%" y="959.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (1,073 samples, 0.71%)</title><rect x="51.7944%" y="933" width="0.7148%" height="15" fill="rgb(227,24,12)" fg:x="77746" fg:w="1073"/><text x="52.0444%" y="943.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,073 samples, 0.71%)</title><rect x="51.7944%" y="917" width="0.7148%" height="15" fill="rgb(252,169,48)" fg:x="77746" fg:w="1073"/><text x="52.0444%" y="927.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (1,073 samples, 0.71%)</title><rect x="51.7944%" y="901" width="0.7148%" height="15" fill="rgb(212,65,1)" fg:x="77746" fg:w="1073"/><text x="52.0444%" y="911.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (1,073 samples, 0.71%)</title><rect x="51.7944%" y="885" width="0.7148%" height="15" fill="rgb(242,39,24)" fg:x="77746" fg:w="1073"/><text x="52.0444%" y="895.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (107 samples, 0.07%)</title><rect x="52.4380%" y="869" width="0.0713%" height="15" fill="rgb(249,32,23)" fg:x="78712" fg:w="107"/><text x="52.6880%" y="879.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (1,098 samples, 0.73%)</title><rect x="51.7944%" y="965" width="0.7315%" height="15" fill="rgb(251,195,23)" fg:x="77746" fg:w="1098"/><text x="52.0444%" y="975.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (25 samples, 0.02%)</title><rect x="52.5092%" y="949" width="0.0167%" height="15" fill="rgb(236,174,8)" fg:x="78819" fg:w="25"/><text x="52.7592%" y="959.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (25 samples, 0.02%)</title><rect x="52.5092%" y="933" width="0.0167%" height="15" fill="rgb(220,197,8)" fg:x="78819" fg:w="25"/><text x="52.7592%" y="943.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (25 samples, 0.02%)</title><rect x="52.5092%" y="917" width="0.0167%" height="15" fill="rgb(240,108,37)" fg:x="78819" fg:w="25"/><text x="52.7592%" y="927.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (25 samples, 0.02%)</title><rect x="52.5092%" y="901" width="0.0167%" height="15" fill="rgb(232,176,24)" fg:x="78819" fg:w="25"/><text x="52.7592%" y="911.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (25 samples, 0.02%)</title><rect x="52.5092%" y="885" width="0.0167%" height="15" fill="rgb(243,35,29)" fg:x="78819" fg:w="25"/><text x="52.7592%" y="895.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (25 samples, 0.02%)</title><rect x="52.5092%" y="869" width="0.0167%" height="15" fill="rgb(210,37,18)" fg:x="78819" fg:w="25"/><text x="52.7592%" y="879.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (25 samples, 0.02%)</title><rect x="52.5092%" y="853" width="0.0167%" height="15" fill="rgb(224,184,40)" fg:x="78819" fg:w="25"/><text x="52.7592%" y="863.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (25 samples, 0.02%)</title><rect x="52.5092%" y="837" width="0.0167%" height="15" fill="rgb(236,39,29)" fg:x="78819" fg:w="25"/><text x="52.7592%" y="847.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (25 samples, 0.02%)</title><rect x="52.5092%" y="821" width="0.0167%" height="15" fill="rgb(232,48,39)" fg:x="78819" fg:w="25"/><text x="52.7592%" y="831.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (25 samples, 0.02%)</title><rect x="52.5092%" y="805" width="0.0167%" height="15" fill="rgb(236,34,42)" fg:x="78819" fg:w="25"/><text x="52.7592%" y="815.50"></text></g><g><title>std::panic::catch_unwind (25 samples, 0.02%)</title><rect x="52.5092%" y="789" width="0.0167%" height="15" fill="rgb(243,106,37)" fg:x="78819" fg:w="25"/><text x="52.7592%" y="799.50"></text></g><g><title>std::panicking::try (25 samples, 0.02%)</title><rect x="52.5092%" y="773" width="0.0167%" height="15" fill="rgb(218,96,6)" fg:x="78819" fg:w="25"/><text x="52.7592%" y="783.50"></text></g><g><title>std::panicking::try::do_call (25 samples, 0.02%)</title><rect x="52.5092%" y="757" width="0.0167%" height="15" fill="rgb(235,130,12)" fg:x="78819" fg:w="25"/><text x="52.7592%" y="767.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (25 samples, 0.02%)</title><rect x="52.5092%" y="741" width="0.0167%" height="15" fill="rgb(231,95,0)" fg:x="78819" fg:w="25"/><text x="52.7592%" y="751.50"></text></g><g><title>core::ops::function::FnOnce::call_once (25 samples, 0.02%)</title><rect x="52.5092%" y="725" width="0.0167%" height="15" fill="rgb(228,12,23)" fg:x="78819" fg:w="25"/><text x="52.7592%" y="735.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (25 samples, 0.02%)</title><rect x="52.5092%" y="709" width="0.0167%" height="15" fill="rgb(216,12,1)" fg:x="78819" fg:w="25"/><text x="52.7592%" y="719.50"></text></g><g><title>async_ffi::FfiContext::with_context (25 samples, 0.02%)</title><rect x="52.5092%" y="693" width="0.0167%" height="15" fill="rgb(219,59,3)" fg:x="78819" fg:w="25"/><text x="52.7592%" y="703.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (25 samples, 0.02%)</title><rect x="52.5092%" y="677" width="0.0167%" height="15" fill="rgb(215,208,46)" fg:x="78819" fg:w="25"/><text x="52.7592%" y="687.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (25 samples, 0.02%)</title><rect x="52.5092%" y="661" width="0.0167%" height="15" fill="rgb(254,224,29)" fg:x="78819" fg:w="25"/><text x="52.7592%" y="671.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (25 samples, 0.02%)</title><rect x="52.5092%" y="645" width="0.0167%" height="15" fill="rgb(232,14,29)" fg:x="78819" fg:w="25"/><text x="52.7592%" y="655.50"></text></g><g><title>tremor_runtime::connectors::impls::bench::Acc::next (25 samples, 0.02%)</title><rect x="52.5092%" y="629" width="0.0167%" height="15" fill="rgb(208,45,52)" fg:x="78819" fg:w="25"/><text x="52.7592%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (25 samples, 0.02%)</title><rect x="52.5092%" y="613" width="0.0167%" height="15" fill="rgb(234,191,28)" fg:x="78819" fg:w="25"/><text x="52.7592%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (25 samples, 0.02%)</title><rect x="52.5092%" y="597" width="0.0167%" height="15" fill="rgb(244,67,43)" fg:x="78819" fg:w="25"/><text x="52.7592%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (25 samples, 0.02%)</title><rect x="52.5092%" y="581" width="0.0167%" height="15" fill="rgb(236,189,24)" fg:x="78819" fg:w="25"/><text x="52.7592%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (25 samples, 0.02%)</title><rect x="52.5092%" y="565" width="0.0167%" height="15" fill="rgb(239,214,33)" fg:x="78819" fg:w="25"/><text x="52.7592%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (25 samples, 0.02%)</title><rect x="52.5092%" y="549" width="0.0167%" height="15" fill="rgb(226,176,41)" fg:x="78819" fg:w="25"/><text x="52.7592%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (25 samples, 0.02%)</title><rect x="52.5092%" y="533" width="0.0167%" height="15" fill="rgb(248,47,8)" fg:x="78819" fg:w="25"/><text x="52.7592%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (25 samples, 0.02%)</title><rect x="52.5092%" y="517" width="0.0167%" height="15" fill="rgb(218,81,44)" fg:x="78819" fg:w="25"/><text x="52.7592%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (25 samples, 0.02%)</title><rect x="52.5092%" y="501" width="0.0167%" height="15" fill="rgb(213,98,6)" fg:x="78819" fg:w="25"/><text x="52.7592%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (25 samples, 0.02%)</title><rect x="52.5092%" y="485" width="0.0167%" height="15" fill="rgb(222,85,22)" fg:x="78819" fg:w="25"/><text x="52.7592%" y="495.50"></text></g><g><title>alloc::alloc::alloc (25 samples, 0.02%)</title><rect x="52.5092%" y="469" width="0.0167%" height="15" fill="rgb(239,46,39)" fg:x="78819" fg:w="25"/><text x="52.7592%" y="479.50"></text></g><g><title>__rg_alloc (25 samples, 0.02%)</title><rect x="52.5092%" y="453" width="0.0167%" height="15" fill="rgb(237,12,29)" fg:x="78819" fg:w="25"/><text x="52.7592%" y="463.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (25 samples, 0.02%)</title><rect x="52.5092%" y="437" width="0.0167%" height="15" fill="rgb(214,77,8)" fg:x="78819" fg:w="25"/><text x="52.7592%" y="447.50"></text></g><g><title>sn_rust_alloc (25 samples, 0.02%)</title><rect x="52.5092%" y="421" width="0.0167%" height="15" fill="rgb(217,168,37)" fg:x="78819" fg:w="25"/><text x="52.7592%" y="431.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (170 samples, 0.11%)</title><rect x="52.5865%" y="837" width="0.1133%" height="15" fill="rgb(221,217,23)" fg:x="78935" fg:w="170"/><text x="52.8365%" y="847.50"></text></g><g><title>core::mem::replace (170 samples, 0.11%)</title><rect x="52.5865%" y="821" width="0.1133%" height="15" fill="rgb(243,229,36)" fg:x="78935" fg:w="170"/><text x="52.8365%" y="831.50"></text></g><g><title>core::ptr::read (170 samples, 0.11%)</title><rect x="52.5865%" y="805" width="0.1133%" height="15" fill="rgb(251,163,40)" fg:x="78935" fg:w="170"/><text x="52.8365%" y="815.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (231 samples, 0.15%)</title><rect x="52.5605%" y="853" width="0.1539%" height="15" fill="rgb(237,222,12)" fg:x="78896" fg:w="231"/><text x="52.8105%" y="863.50"></text></g><g><title>core::mem::drop (22 samples, 0.01%)</title><rect x="52.6998%" y="837" width="0.0147%" height="15" fill="rgb(248,132,6)" fg:x="79105" fg:w="22"/><text x="52.9498%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (22 samples, 0.01%)</title><rect x="52.6998%" y="821" width="0.0147%" height="15" fill="rgb(227,167,50)" fg:x="79105" fg:w="22"/><text x="52.9498%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (210 samples, 0.14%)</title><rect x="52.7144%" y="853" width="0.1399%" height="15" fill="rgb(242,84,37)" fg:x="79127" fg:w="210"/><text x="52.9644%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (203 samples, 0.14%)</title><rect x="52.7191%" y="837" width="0.1352%" height="15" fill="rgb(212,4,50)" fg:x="79134" fg:w="203"/><text x="52.9691%" y="847.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (203 samples, 0.14%)</title><rect x="52.7191%" y="821" width="0.1352%" height="15" fill="rgb(230,228,32)" fg:x="79134" fg:w="203"/><text x="52.9691%" y="831.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (186 samples, 0.12%)</title><rect x="52.7304%" y="805" width="0.1239%" height="15" fill="rgb(248,217,23)" fg:x="79151" fg:w="186"/><text x="52.9804%" y="815.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (186 samples, 0.12%)</title><rect x="52.7304%" y="789" width="0.1239%" height="15" fill="rgb(238,197,32)" fg:x="79151" fg:w="186"/><text x="52.9804%" y="799.50"></text></g><g><title>__GI___pthread_mutex_unlock (178 samples, 0.12%)</title><rect x="52.7358%" y="773" width="0.1186%" height="15" fill="rgb(236,106,1)" fg:x="79159" fg:w="178"/><text x="52.9858%" y="783.50"></text></g><g><title>core::task::wake::Waker::will_wake (36 samples, 0.02%)</title><rect x="52.8543%" y="853" width="0.0240%" height="15" fill="rgb(219,228,13)" fg:x="79337" fg:w="36"/><text x="53.1043%" y="863.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (36 samples, 0.02%)</title><rect x="52.8543%" y="837" width="0.0240%" height="15" fill="rgb(238,30,35)" fg:x="79337" fg:w="36"/><text x="53.1043%" y="847.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (27 samples, 0.02%)</title><rect x="52.8603%" y="821" width="0.0180%" height="15" fill="rgb(236,70,23)" fg:x="79346" fg:w="27"/><text x="53.1103%" y="831.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (27 samples, 0.02%)</title><rect x="52.8603%" y="805" width="0.0180%" height="15" fill="rgb(249,104,48)" fg:x="79346" fg:w="27"/><text x="53.1103%" y="815.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3,142 samples, 2.09%)</title><rect x="51.4507%" y="1045" width="2.0932%" height="15" fill="rgb(254,117,50)" fg:x="77230" fg:w="3142"/><text x="51.7007%" y="1055.50">s..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3,121 samples, 2.08%)</title><rect x="51.4646%" y="1029" width="2.0792%" height="15" fill="rgb(223,152,4)" fg:x="77251" fg:w="3121"/><text x="51.7146%" y="1039.50">s..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (3,100 samples, 2.07%)</title><rect x="51.4786%" y="1013" width="2.0652%" height="15" fill="rgb(245,6,2)" fg:x="77272" fg:w="3100"/><text x="51.7286%" y="1023.50">a..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (3,100 samples, 2.07%)</title><rect x="51.4786%" y="997" width="2.0652%" height="15" fill="rgb(249,150,24)" fg:x="77272" fg:w="3100"/><text x="51.7286%" y="1007.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,100 samples, 2.07%)</title><rect x="51.4786%" y="981" width="2.0652%" height="15" fill="rgb(228,185,42)" fg:x="77272" fg:w="3100"/><text x="51.7286%" y="991.50">&lt;..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (1,528 samples, 1.02%)</title><rect x="52.5259%" y="965" width="1.0180%" height="15" fill="rgb(226,39,33)" fg:x="78844" fg:w="1528"/><text x="52.7759%" y="975.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,528 samples, 1.02%)</title><rect x="52.5259%" y="949" width="1.0180%" height="15" fill="rgb(221,166,19)" fg:x="78844" fg:w="1528"/><text x="52.7759%" y="959.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (1,528 samples, 1.02%)</title><rect x="52.5259%" y="933" width="1.0180%" height="15" fill="rgb(209,109,2)" fg:x="78844" fg:w="1528"/><text x="52.7759%" y="943.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (1,528 samples, 1.02%)</title><rect x="52.5259%" y="917" width="1.0180%" height="15" fill="rgb(252,216,26)" fg:x="78844" fg:w="1528"/><text x="52.7759%" y="927.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (1,528 samples, 1.02%)</title><rect x="52.5259%" y="901" width="1.0180%" height="15" fill="rgb(227,173,36)" fg:x="78844" fg:w="1528"/><text x="52.7759%" y="911.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (1,528 samples, 1.02%)</title><rect x="52.5259%" y="885" width="1.0180%" height="15" fill="rgb(209,90,7)" fg:x="78844" fg:w="1528"/><text x="52.7759%" y="895.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (1,528 samples, 1.02%)</title><rect x="52.5259%" y="869" width="1.0180%" height="15" fill="rgb(250,194,11)" fg:x="78844" fg:w="1528"/><text x="52.7759%" y="879.50"></text></g><g><title>event_listener::Inner::lock (999 samples, 0.67%)</title><rect x="52.8783%" y="853" width="0.6655%" height="15" fill="rgb(220,72,50)" fg:x="79373" fg:w="999"/><text x="53.1283%" y="863.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (988 samples, 0.66%)</title><rect x="52.8856%" y="837" width="0.6582%" height="15" fill="rgb(222,106,48)" fg:x="79384" fg:w="988"/><text x="53.1356%" y="847.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (974 samples, 0.65%)</title><rect x="52.8950%" y="821" width="0.6489%" height="15" fill="rgb(216,220,45)" fg:x="79398" fg:w="974"/><text x="53.1450%" y="831.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (899 samples, 0.60%)</title><rect x="52.9449%" y="805" width="0.5989%" height="15" fill="rgb(234,112,18)" fg:x="79473" fg:w="899"/><text x="53.1949%" y="815.50"></text></g><g><title>__GI___pthread_mutex_lock (899 samples, 0.60%)</title><rect x="52.9449%" y="789" width="0.5989%" height="15" fill="rgb(206,179,9)" fg:x="79473" fg:w="899"/><text x="53.1949%" y="799.50"></text></g><g><title>tremor_common::time::nanotime (36 samples, 0.02%)</title><rect x="53.5452%" y="1045" width="0.0240%" height="15" fill="rgb(215,115,40)" fg:x="80374" fg:w="36"/><text x="53.7952%" y="1055.50"></text></g><g><title>std::time::SystemTime::now (36 samples, 0.02%)</title><rect x="53.5452%" y="1029" width="0.0240%" height="15" fill="rgb(222,69,34)" fg:x="80374" fg:w="36"/><text x="53.7952%" y="1039.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (36 samples, 0.02%)</title><rect x="53.5452%" y="1013" width="0.0240%" height="15" fill="rgb(209,161,10)" fg:x="80374" fg:w="36"/><text x="53.7952%" y="1023.50"></text></g><g><title>std::sys::unix::time::inner::now (36 samples, 0.02%)</title><rect x="53.5452%" y="997" width="0.0240%" height="15" fill="rgb(217,6,38)" fg:x="80374" fg:w="36"/><text x="53.7952%" y="1007.50"></text></g><g><title>event_listener::Inner::lock (55 samples, 0.04%)</title><rect x="53.6205%" y="933" width="0.0366%" height="15" fill="rgb(229,229,48)" fg:x="80487" fg:w="55"/><text x="53.8705%" y="943.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (55 samples, 0.04%)</title><rect x="53.6205%" y="917" width="0.0366%" height="15" fill="rgb(225,21,28)" fg:x="80487" fg:w="55"/><text x="53.8705%" y="927.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (54 samples, 0.04%)</title><rect x="53.6211%" y="901" width="0.0360%" height="15" fill="rgb(206,33,13)" fg:x="80488" fg:w="54"/><text x="53.8711%" y="911.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (38 samples, 0.03%)</title><rect x="53.6318%" y="885" width="0.0253%" height="15" fill="rgb(242,178,17)" fg:x="80504" fg:w="38"/><text x="53.8818%" y="895.50"></text></g><g><title>__GI___pthread_mutex_lock (38 samples, 0.03%)</title><rect x="53.6318%" y="869" width="0.0253%" height="15" fill="rgb(220,162,5)" fg:x="80504" fg:w="38"/><text x="53.8818%" y="879.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (112 samples, 0.07%)</title><rect x="53.5905%" y="949" width="0.0746%" height="15" fill="rgb(210,33,43)" fg:x="80442" fg:w="112"/><text x="53.8405%" y="959.50"></text></g><g><title>[libc-2.31.so] (368 samples, 0.25%)</title><rect x="53.6651%" y="949" width="0.2452%" height="15" fill="rgb(216,116,54)" fg:x="80554" fg:w="368"/><text x="53.9151%" y="959.50"></text></g><g><title>[libc-2.31.so] (634 samples, 0.42%)</title><rect x="53.9349%" y="933" width="0.4224%" height="15" fill="rgb(249,92,24)" fg:x="80959" fg:w="634"/><text x="54.1849%" y="943.50"></text></g><g><title>[libc-2.31.so] (132 samples, 0.09%)</title><rect x="54.4272%" y="901" width="0.0879%" height="15" fill="rgb(231,189,14)" fg:x="81698" fg:w="132"/><text x="54.6772%" y="911.50"></text></g><g><title>concurrent_queue::full_fence (41 samples, 0.03%)</title><rect x="54.5152%" y="901" width="0.0273%" height="15" fill="rgb(230,8,41)" fg:x="81830" fg:w="41"/><text x="54.7652%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (39 samples, 0.03%)</title><rect x="54.5165%" y="885" width="0.0260%" height="15" fill="rgb(249,7,27)" fg:x="81832" fg:w="39"/><text x="54.7665%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (39 samples, 0.03%)</title><rect x="54.5165%" y="869" width="0.0260%" height="15" fill="rgb(232,86,5)" fg:x="81832" fg:w="39"/><text x="54.7665%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (39 samples, 0.03%)</title><rect x="54.5165%" y="853" width="0.0260%" height="15" fill="rgb(224,175,18)" fg:x="81832" fg:w="39"/><text x="54.7665%" y="863.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (298 samples, 0.20%)</title><rect x="54.5452%" y="901" width="0.1985%" height="15" fill="rgb(220,129,12)" fg:x="81875" fg:w="298"/><text x="54.7952%" y="911.50"></text></g><g><title>core::ptr::read (298 samples, 0.20%)</title><rect x="54.5452%" y="885" width="0.1985%" height="15" fill="rgb(210,19,36)" fg:x="81875" fg:w="298"/><text x="54.7952%" y="895.50"></text></g><g><title>[libc-2.31.so] (298 samples, 0.20%)</title><rect x="54.5452%" y="869" width="0.1985%" height="15" fill="rgb(219,96,14)" fg:x="81875" fg:w="298"/><text x="54.7952%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (364 samples, 0.24%)</title><rect x="54.7437%" y="901" width="0.2425%" height="15" fill="rgb(249,106,1)" fg:x="82173" fg:w="364"/><text x="54.9937%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (364 samples, 0.24%)</title><rect x="54.7437%" y="885" width="0.2425%" height="15" fill="rgb(249,155,20)" fg:x="82173" fg:w="364"/><text x="54.9937%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (346 samples, 0.23%)</title><rect x="54.9862%" y="901" width="0.2305%" height="15" fill="rgb(244,168,9)" fg:x="82537" fg:w="346"/><text x="55.2362%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_load (346 samples, 0.23%)</title><rect x="54.9862%" y="885" width="0.2305%" height="15" fill="rgb(216,23,50)" fg:x="82537" fg:w="346"/><text x="55.2362%" y="895.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (1,291 samples, 0.86%)</title><rect x="54.3573%" y="933" width="0.8601%" height="15" fill="rgb(224,219,20)" fg:x="81593" fg:w="1291"/><text x="54.6073%" y="943.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (1,261 samples, 0.84%)</title><rect x="54.3773%" y="917" width="0.8401%" height="15" fill="rgb(222,156,15)" fg:x="81623" fg:w="1261"/><text x="54.6273%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (58 samples, 0.04%)</title><rect x="55.2213%" y="917" width="0.0386%" height="15" fill="rgb(231,97,17)" fg:x="82890" fg:w="58"/><text x="55.4713%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (56 samples, 0.04%)</title><rect x="55.2227%" y="901" width="0.0373%" height="15" fill="rgb(218,70,48)" fg:x="82892" fg:w="56"/><text x="55.4727%" y="911.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (56 samples, 0.04%)</title><rect x="55.2227%" y="885" width="0.0373%" height="15" fill="rgb(212,196,52)" fg:x="82892" fg:w="56"/><text x="55.4727%" y="895.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (53 samples, 0.04%)</title><rect x="55.2247%" y="869" width="0.0353%" height="15" fill="rgb(243,203,18)" fg:x="82895" fg:w="53"/><text x="55.4747%" y="879.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (52 samples, 0.03%)</title><rect x="55.2253%" y="853" width="0.0346%" height="15" fill="rgb(252,125,41)" fg:x="82896" fg:w="52"/><text x="55.4753%" y="863.50"></text></g><g><title>__GI___pthread_mutex_unlock (52 samples, 0.03%)</title><rect x="55.2253%" y="837" width="0.0346%" height="15" fill="rgb(223,180,33)" fg:x="82896" fg:w="52"/><text x="55.4753%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (16 samples, 0.01%)</title><rect x="55.2600%" y="917" width="0.0107%" height="15" fill="rgb(254,159,46)" fg:x="82948" fg:w="16"/><text x="55.5100%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_load (16 samples, 0.01%)</title><rect x="55.2600%" y="901" width="0.0107%" height="15" fill="rgb(254,38,10)" fg:x="82948" fg:w="16"/><text x="55.5100%" y="911.50"></text></g><g><title>event_listener::Inner::lock (219 samples, 0.15%)</title><rect x="55.2706%" y="917" width="0.1459%" height="15" fill="rgb(208,217,32)" fg:x="82964" fg:w="219"/><text x="55.5206%" y="927.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (217 samples, 0.14%)</title><rect x="55.2720%" y="901" width="0.1446%" height="15" fill="rgb(221,120,13)" fg:x="82966" fg:w="217"/><text x="55.5220%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (215 samples, 0.14%)</title><rect x="55.2733%" y="885" width="0.1432%" height="15" fill="rgb(246,54,52)" fg:x="82968" fg:w="215"/><text x="55.5233%" y="895.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (214 samples, 0.14%)</title><rect x="55.2740%" y="869" width="0.1426%" height="15" fill="rgb(242,34,25)" fg:x="82969" fg:w="214"/><text x="55.5240%" y="879.50"></text></g><g><title>__GI___pthread_mutex_lock (214 samples, 0.14%)</title><rect x="55.2740%" y="853" width="0.1426%" height="15" fill="rgb(247,209,9)" fg:x="82969" fg:w="214"/><text x="55.5240%" y="863.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_waker (21 samples, 0.01%)</title><rect x="55.4192%" y="869" width="0.0140%" height="15" fill="rgb(228,71,26)" fg:x="83187" fg:w="21"/><text x="55.6692%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (21 samples, 0.01%)</title><rect x="55.4192%" y="853" width="0.0140%" height="15" fill="rgb(222,145,49)" fg:x="83187" fg:w="21"/><text x="55.6692%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_sub (21 samples, 0.01%)</title><rect x="55.4192%" y="837" width="0.0140%" height="15" fill="rgb(218,121,17)" fg:x="83187" fg:w="21"/><text x="55.6692%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (81 samples, 0.05%)</title><rect x="55.4399%" y="821" width="0.0540%" height="15" fill="rgb(244,50,7)" fg:x="83218" fg:w="81"/><text x="55.6899%" y="831.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (81 samples, 0.05%)</title><rect x="55.4399%" y="805" width="0.0540%" height="15" fill="rgb(246,229,37)" fg:x="83218" fg:w="81"/><text x="55.6899%" y="815.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (80 samples, 0.05%)</title><rect x="55.4405%" y="789" width="0.0533%" height="15" fill="rgb(225,18,5)" fg:x="83219" fg:w="80"/><text x="55.6905%" y="799.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (80 samples, 0.05%)</title><rect x="55.4405%" y="773" width="0.0533%" height="15" fill="rgb(213,204,8)" fg:x="83219" fg:w="80"/><text x="55.6905%" y="783.50"></text></g><g><title>__GI___pthread_mutex_unlock (80 samples, 0.05%)</title><rect x="55.4405%" y="757" width="0.0533%" height="15" fill="rgb(238,103,6)" fg:x="83219" fg:w="80"/><text x="55.6905%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (37 samples, 0.02%)</title><rect x="55.4938%" y="821" width="0.0246%" height="15" fill="rgb(222,25,35)" fg:x="83299" fg:w="37"/><text x="55.7438%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (37 samples, 0.02%)</title><rect x="55.4938%" y="805" width="0.0246%" height="15" fill="rgb(213,203,35)" fg:x="83299" fg:w="37"/><text x="55.7438%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (26 samples, 0.02%)</title><rect x="55.5378%" y="741" width="0.0173%" height="15" fill="rgb(221,79,53)" fg:x="83365" fg:w="26"/><text x="55.7878%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_swap (26 samples, 0.02%)</title><rect x="55.5378%" y="725" width="0.0173%" height="15" fill="rgb(243,200,35)" fg:x="83365" fg:w="26"/><text x="55.7878%" y="735.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (27 samples, 0.02%)</title><rect x="55.5551%" y="741" width="0.0180%" height="15" fill="rgb(248,60,25)" fg:x="83391" fg:w="27"/><text x="55.8051%" y="751.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (26 samples, 0.02%)</title><rect x="55.5558%" y="725" width="0.0173%" height="15" fill="rgb(227,53,46)" fg:x="83392" fg:w="26"/><text x="55.8058%" y="735.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (26 samples, 0.02%)</title><rect x="55.5558%" y="709" width="0.0173%" height="15" fill="rgb(216,120,32)" fg:x="83392" fg:w="26"/><text x="55.8058%" y="719.50"></text></g><g><title>__pthread_cond_signal (26 samples, 0.02%)</title><rect x="55.5558%" y="693" width="0.0173%" height="15" fill="rgb(220,134,1)" fg:x="83392" fg:w="26"/><text x="55.8058%" y="703.50"></text></g><g><title>parking::Unparker::unpark (84 samples, 0.06%)</title><rect x="55.5278%" y="773" width="0.0560%" height="15" fill="rgb(237,168,5)" fg:x="83350" fg:w="84"/><text x="55.7778%" y="783.50"></text></g><g><title>parking::Inner::unpark (73 samples, 0.05%)</title><rect x="55.5351%" y="757" width="0.0486%" height="15" fill="rgb(231,100,33)" fg:x="83361" fg:w="73"/><text x="55.7851%" y="767.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (16 samples, 0.01%)</title><rect x="55.5731%" y="741" width="0.0107%" height="15" fill="rgb(236,177,47)" fg:x="83418" fg:w="16"/><text x="55.8231%" y="751.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (16 samples, 0.01%)</title><rect x="55.5731%" y="725" width="0.0107%" height="15" fill="rgb(235,7,49)" fg:x="83418" fg:w="16"/><text x="55.8231%" y="735.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (100 samples, 0.07%)</title><rect x="55.5191%" y="789" width="0.0666%" height="15" fill="rgb(232,119,22)" fg:x="83337" fg:w="100"/><text x="55.7691%" y="799.50"></text></g><g><title>core::task::wake::Waker::wake (124 samples, 0.08%)</title><rect x="55.5185%" y="821" width="0.0826%" height="15" fill="rgb(254,73,53)" fg:x="83336" fg:w="124"/><text x="55.7685%" y="831.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (124 samples, 0.08%)</title><rect x="55.5185%" y="805" width="0.0826%" height="15" fill="rgb(251,35,20)" fg:x="83336" fg:w="124"/><text x="55.7685%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (23 samples, 0.02%)</title><rect x="55.5858%" y="789" width="0.0153%" height="15" fill="rgb(241,119,20)" fg:x="83437" fg:w="23"/><text x="55.8358%" y="799.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="55.5858%" y="773" width="0.0153%" height="15" fill="rgb(207,102,14)" fg:x="83437" fg:w="23"/><text x="55.8358%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (22 samples, 0.01%)</title><rect x="55.5864%" y="757" width="0.0147%" height="15" fill="rgb(248,201,50)" fg:x="83438" fg:w="22"/><text x="55.8364%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_sub (22 samples, 0.01%)</title><rect x="55.5864%" y="741" width="0.0147%" height="15" fill="rgb(222,185,44)" fg:x="83438" fg:w="22"/><text x="55.8364%" y="751.50"></text></g><g><title>async_executor::State::notify (358 samples, 0.24%)</title><rect x="55.4332%" y="837" width="0.2385%" height="15" fill="rgb(218,107,18)" fg:x="83208" fg:w="358"/><text x="55.6832%" y="847.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (106 samples, 0.07%)</title><rect x="55.6011%" y="821" width="0.0706%" height="15" fill="rgb(237,177,39)" fg:x="83460" fg:w="106"/><text x="55.8511%" y="831.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (102 samples, 0.07%)</title><rect x="55.6037%" y="805" width="0.0680%" height="15" fill="rgb(246,69,6)" fg:x="83464" fg:w="102"/><text x="55.8537%" y="815.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (92 samples, 0.06%)</title><rect x="55.6104%" y="789" width="0.0613%" height="15" fill="rgb(234,208,37)" fg:x="83474" fg:w="92"/><text x="55.8604%" y="799.50"></text></g><g><title>__GI___pthread_mutex_lock (92 samples, 0.06%)</title><rect x="55.6104%" y="773" width="0.0613%" height="15" fill="rgb(225,4,6)" fg:x="83474" fg:w="92"/><text x="55.8604%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (86 samples, 0.06%)</title><rect x="55.6777%" y="805" width="0.0573%" height="15" fill="rgb(233,45,0)" fg:x="83575" fg:w="86"/><text x="55.9277%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (86 samples, 0.06%)</title><rect x="55.6777%" y="789" width="0.0573%" height="15" fill="rgb(226,136,5)" fg:x="83575" fg:w="86"/><text x="55.9277%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (27 samples, 0.02%)</title><rect x="55.7350%" y="805" width="0.0180%" height="15" fill="rgb(211,91,47)" fg:x="83661" fg:w="27"/><text x="55.9850%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_or (27 samples, 0.02%)</title><rect x="55.7350%" y="789" width="0.0180%" height="15" fill="rgb(242,88,51)" fg:x="83661" fg:w="27"/><text x="55.9850%" y="799.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (486 samples, 0.32%)</title><rect x="55.4332%" y="853" width="0.3238%" height="15" fill="rgb(230,91,28)" fg:x="83208" fg:w="486"/><text x="55.6832%" y="863.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (128 samples, 0.09%)</title><rect x="55.6717%" y="837" width="0.0853%" height="15" fill="rgb(254,186,29)" fg:x="83566" fg:w="128"/><text x="55.9217%" y="847.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (125 samples, 0.08%)</title><rect x="55.6737%" y="821" width="0.0833%" height="15" fill="rgb(238,6,4)" fg:x="83569" fg:w="125"/><text x="55.9237%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (68 samples, 0.05%)</title><rect x="55.7570%" y="853" width="0.0453%" height="15" fill="rgb(221,151,16)" fg:x="83694" fg:w="68"/><text x="56.0070%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (68 samples, 0.05%)</title><rect x="55.7570%" y="837" width="0.0453%" height="15" fill="rgb(251,143,52)" fg:x="83694" fg:w="68"/><text x="56.0070%" y="847.50"></text></g><g><title>event_listener::List::notify (583 samples, 0.39%)</title><rect x="55.4165%" y="917" width="0.3884%" height="15" fill="rgb(206,90,15)" fg:x="83183" fg:w="583"/><text x="55.6665%" y="927.50"></text></g><g><title>core::task::wake::Waker::wake (581 samples, 0.39%)</title><rect x="55.4179%" y="901" width="0.3871%" height="15" fill="rgb(218,35,8)" fg:x="83185" fg:w="581"/><text x="55.6679%" y="911.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (581 samples, 0.39%)</title><rect x="55.4179%" y="885" width="0.3871%" height="15" fill="rgb(239,215,6)" fg:x="83185" fg:w="581"/><text x="55.6679%" y="895.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (558 samples, 0.37%)</title><rect x="55.4332%" y="869" width="0.3717%" height="15" fill="rgb(245,116,39)" fg:x="83208" fg:w="558"/><text x="55.6832%" y="879.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (3,031 samples, 2.02%)</title><rect x="53.9103%" y="949" width="2.0193%" height="15" fill="rgb(242,65,28)" fg:x="80922" fg:w="3031"/><text x="54.1603%" y="959.50">a..</text></g><g><title>event_listener::Event::notify (1,069 samples, 0.71%)</title><rect x="55.2173%" y="933" width="0.7122%" height="15" fill="rgb(252,132,53)" fg:x="82884" fg:w="1069"/><text x="55.4673%" y="943.50"></text></g><g><title>event_listener::full_fence (187 samples, 0.12%)</title><rect x="55.8049%" y="917" width="0.1246%" height="15" fill="rgb(224,159,50)" fg:x="83766" fg:w="187"/><text x="56.0549%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (187 samples, 0.12%)</title><rect x="55.8049%" y="901" width="0.1246%" height="15" fill="rgb(224,93,4)" fg:x="83766" fg:w="187"/><text x="56.0549%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (187 samples, 0.12%)</title><rect x="55.8049%" y="885" width="0.1246%" height="15" fill="rgb(208,81,34)" fg:x="83766" fg:w="187"/><text x="56.0549%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (44 samples, 0.03%)</title><rect x="55.9355%" y="949" width="0.0293%" height="15" fill="rgb(233,92,54)" fg:x="83962" fg:w="44"/><text x="56.1855%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (24 samples, 0.02%)</title><rect x="55.9488%" y="933" width="0.0160%" height="15" fill="rgb(237,21,14)" fg:x="83982" fg:w="24"/><text x="56.1988%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (22 samples, 0.01%)</title><rect x="55.9502%" y="917" width="0.0147%" height="15" fill="rgb(249,128,51)" fg:x="83984" fg:w="22"/><text x="56.2002%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.01%)</title><rect x="55.9502%" y="901" width="0.0147%" height="15" fill="rgb(223,129,24)" fg:x="83984" fg:w="22"/><text x="56.2002%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (22 samples, 0.01%)</title><rect x="55.9502%" y="885" width="0.0147%" height="15" fill="rgb(231,168,25)" fg:x="83984" fg:w="22"/><text x="56.2002%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_sub (22 samples, 0.01%)</title><rect x="55.9502%" y="869" width="0.0147%" height="15" fill="rgb(224,39,20)" fg:x="83984" fg:w="22"/><text x="56.2002%" y="879.50"></text></g><g><title>event_listener::Inner::lock (27 samples, 0.02%)</title><rect x="55.9848%" y="933" width="0.0180%" height="15" fill="rgb(225,152,53)" fg:x="84036" fg:w="27"/><text x="56.2348%" y="943.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (26 samples, 0.02%)</title><rect x="55.9855%" y="917" width="0.0173%" height="15" fill="rgb(252,17,24)" fg:x="84037" fg:w="26"/><text x="56.2355%" y="927.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (25 samples, 0.02%)</title><rect x="55.9861%" y="901" width="0.0167%" height="15" fill="rgb(250,114,30)" fg:x="84038" fg:w="25"/><text x="56.2361%" y="911.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (25 samples, 0.02%)</title><rect x="55.9861%" y="885" width="0.0167%" height="15" fill="rgb(229,5,4)" fg:x="84038" fg:w="25"/><text x="56.2361%" y="895.50"></text></g><g><title>__GI___pthread_mutex_lock (25 samples, 0.02%)</title><rect x="55.9861%" y="869" width="0.0167%" height="15" fill="rgb(225,176,49)" fg:x="84038" fg:w="25"/><text x="56.2361%" y="879.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,650 samples, 2.43%)</title><rect x="53.5738%" y="1029" width="2.4316%" height="15" fill="rgb(224,221,49)" fg:x="80417" fg:w="3650"/><text x="53.8238%" y="1039.50">&lt;a..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (3,650 samples, 2.43%)</title><rect x="53.5738%" y="1013" width="2.4316%" height="15" fill="rgb(253,169,27)" fg:x="80417" fg:w="3650"/><text x="53.8238%" y="1023.50">&lt;t..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (3,650 samples, 2.43%)</title><rect x="53.5738%" y="997" width="2.4316%" height="15" fill="rgb(211,206,16)" fg:x="80417" fg:w="3650"/><text x="53.8238%" y="1007.50">&lt;a..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (3,650 samples, 2.43%)</title><rect x="53.5738%" y="981" width="2.4316%" height="15" fill="rgb(244,87,35)" fg:x="80417" fg:w="3650"/><text x="53.8238%" y="991.50">&lt;a..</text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (3,650 samples, 2.43%)</title><rect x="53.5738%" y="965" width="2.4316%" height="15" fill="rgb(246,28,10)" fg:x="80417" fg:w="3650"/><text x="53.8238%" y="975.50">&lt;a..</text></g><g><title>event_listener::Event::listen (61 samples, 0.04%)</title><rect x="55.9648%" y="949" width="0.0406%" height="15" fill="rgb(229,12,44)" fg:x="84006" fg:w="61"/><text x="56.2148%" y="959.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (32 samples, 0.02%)</title><rect x="56.0148%" y="613" width="0.0213%" height="15" fill="rgb(210,145,37)" fg:x="84081" fg:w="32"/><text x="56.2648%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (30 samples, 0.02%)</title><rect x="56.0161%" y="597" width="0.0200%" height="15" fill="rgb(227,112,52)" fg:x="84083" fg:w="30"/><text x="56.2661%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (30 samples, 0.02%)</title><rect x="56.0161%" y="581" width="0.0200%" height="15" fill="rgb(238,155,34)" fg:x="84083" fg:w="30"/><text x="56.2661%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (22 samples, 0.01%)</title><rect x="56.0215%" y="565" width="0.0147%" height="15" fill="rgb(239,226,36)" fg:x="84091" fg:w="22"/><text x="56.2715%" y="575.50"></text></g><g><title>[libc-2.31.so] (17 samples, 0.01%)</title><rect x="56.0248%" y="549" width="0.0113%" height="15" fill="rgb(230,16,23)" fg:x="84096" fg:w="17"/><text x="56.2748%" y="559.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (20 samples, 0.01%)</title><rect x="56.1560%" y="597" width="0.0133%" height="15" fill="rgb(236,171,36)" fg:x="84293" fg:w="20"/><text x="56.4060%" y="607.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as abi_stable::traits::IntoReprRust&gt;::into_rust (61 samples, 0.04%)</title><rect x="56.1767%" y="581" width="0.0406%" height="15" fill="rgb(221,22,14)" fg:x="84324" fg:w="61"/><text x="56.4267%" y="591.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (61 samples, 0.04%)</title><rect x="56.1767%" y="565" width="0.0406%" height="15" fill="rgb(242,43,11)" fg:x="84324" fg:w="61"/><text x="56.4267%" y="575.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (61 samples, 0.04%)</title><rect x="56.1767%" y="549" width="0.0406%" height="15" fill="rgb(232,69,23)" fg:x="84324" fg:w="61"/><text x="56.4267%" y="559.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::next_n (46 samples, 0.03%)</title><rect x="56.3566%" y="469" width="0.0306%" height="15" fill="rgb(216,180,54)" fg:x="84594" fg:w="46"/><text x="56.6066%" y="479.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (32 samples, 0.02%)</title><rect x="56.3659%" y="453" width="0.0213%" height="15" fill="rgb(216,5,24)" fg:x="84608" fg:w="32"/><text x="56.6159%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (157 samples, 0.10%)</title><rect x="56.3093%" y="501" width="0.1046%" height="15" fill="rgb(225,89,9)" fg:x="84523" fg:w="157"/><text x="56.5593%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (103 samples, 0.07%)</title><rect x="56.3452%" y="485" width="0.0686%" height="15" fill="rgb(243,75,33)" fg:x="84577" fg:w="103"/><text x="56.5952%" y="495.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (27 samples, 0.02%)</title><rect x="56.3959%" y="469" width="0.0180%" height="15" fill="rgb(247,141,45)" fg:x="84653" fg:w="27"/><text x="56.6459%" y="479.50"></text></g><g><title>&lt;halfbrown::iter::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (267 samples, 0.18%)</title><rect x="56.2659%" y="533" width="0.1779%" height="15" fill="rgb(232,177,36)" fg:x="84458" fg:w="267"/><text x="56.5159%" y="543.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (248 samples, 0.17%)</title><rect x="56.2786%" y="517" width="0.1652%" height="15" fill="rgb(219,125,36)" fg:x="84477" fg:w="248"/><text x="56.5286%" y="527.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::as_ref (45 samples, 0.03%)</title><rect x="56.4138%" y="501" width="0.0300%" height="15" fill="rgb(227,94,9)" fg:x="84680" fg:w="45"/><text x="56.6638%" y="511.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::as_ptr (45 samples, 0.03%)</title><rect x="56.4138%" y="485" width="0.0300%" height="15" fill="rgb(240,34,52)" fg:x="84680" fg:w="45"/><text x="56.6638%" y="495.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (45 samples, 0.03%)</title><rect x="56.4138%" y="469" width="0.0300%" height="15" fill="rgb(216,45,12)" fg:x="84680" fg:w="45"/><text x="56.6638%" y="479.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (45 samples, 0.03%)</title><rect x="56.4138%" y="453" width="0.0300%" height="15" fill="rgb(246,21,19)" fg:x="84680" fg:w="45"/><text x="56.6638%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,076 samples, 0.72%)</title><rect x="56.2659%" y="549" width="0.7168%" height="15" fill="rgb(213,98,42)" fg:x="84458" fg:w="1076"/><text x="56.5159%" y="559.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (809 samples, 0.54%)</title><rect x="56.4438%" y="533" width="0.5390%" height="15" fill="rgb(250,136,47)" fg:x="84725" fg:w="809"/><text x="56.6938%" y="543.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (809 samples, 0.54%)</title><rect x="56.4438%" y="517" width="0.5390%" height="15" fill="rgb(251,124,27)" fg:x="84725" fg:w="809"/><text x="56.6938%" y="527.50"></text></g><g><title>core::ops::function::FnMut::call_mut (809 samples, 0.54%)</title><rect x="56.4438%" y="501" width="0.5390%" height="15" fill="rgb(229,180,14)" fg:x="84725" fg:w="809"/><text x="56.6938%" y="511.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::map_iter_ref (809 samples, 0.54%)</title><rect x="56.4438%" y="485" width="0.5390%" height="15" fill="rgb(245,216,25)" fg:x="84725" fg:w="809"/><text x="56.6938%" y="495.50"></text></g><g><title>abi_stable::std_types::map::map_key::MapKey&lt;K&gt;::as_ref (809 samples, 0.54%)</title><rect x="56.4438%" y="469" width="0.5390%" height="15" fill="rgb(251,43,5)" fg:x="84725" fg:w="809"/><text x="56.6938%" y="479.50"></text></g><g><title>abi_stable::erased_types::iterator::next (1,198 samples, 0.80%)</title><rect x="56.2226%" y="581" width="0.7981%" height="15" fill="rgb(250,128,24)" fg:x="84393" fg:w="1198"/><text x="56.4726%" y="591.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (1,155 samples, 0.77%)</title><rect x="56.2513%" y="565" width="0.7695%" height="15" fill="rgb(217,117,27)" fg:x="84436" fg:w="1155"/><text x="56.5013%" y="575.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl abi_stable::traits::IntoReprC for core::option::Option&lt;T&gt;&gt;::into_c (57 samples, 0.04%)</title><rect x="56.9828%" y="549" width="0.0380%" height="15" fill="rgb(245,147,4)" fg:x="85534" fg:w="57"/><text x="57.2328%" y="559.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (57 samples, 0.04%)</title><rect x="56.9828%" y="533" width="0.0380%" height="15" fill="rgb(242,201,35)" fg:x="85534" fg:w="57"/><text x="57.2328%" y="543.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as core::convert::From&lt;core::option::Option&lt;T&gt;&gt;&gt;::from (57 samples, 0.04%)</title><rect x="56.9828%" y="517" width="0.0380%" height="15" fill="rgb(218,181,1)" fg:x="85534" fg:w="57"/><text x="57.2328%" y="527.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (48 samples, 0.03%)</title><rect x="57.0361%" y="549" width="0.0320%" height="15" fill="rgb(222,6,29)" fg:x="85614" fg:w="48"/><text x="57.2861%" y="559.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (48 samples, 0.03%)</title><rect x="57.0361%" y="533" width="0.0320%" height="15" fill="rgb(208,186,3)" fg:x="85614" fg:w="48"/><text x="57.2861%" y="543.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (1,445 samples, 0.96%)</title><rect x="56.1693%" y="597" width="0.9627%" height="15" fill="rgb(216,36,26)" fg:x="84313" fg:w="1445"/><text x="56.4193%" y="607.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (167 samples, 0.11%)</title><rect x="57.0208%" y="581" width="0.1113%" height="15" fill="rgb(248,201,23)" fg:x="85591" fg:w="167"/><text x="57.2708%" y="591.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (167 samples, 0.11%)</title><rect x="57.0208%" y="565" width="0.1113%" height="15" fill="rgb(251,170,31)" fg:x="85591" fg:w="167"/><text x="57.2708%" y="575.50"></text></g><g><title>abi_stable::erased_types::vtable::_::&lt;impl abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;&gt;::_iter (96 samples, 0.06%)</title><rect x="57.0681%" y="549" width="0.0640%" height="15" fill="rgb(207,110,25)" fg:x="85662" fg:w="96"/><text x="57.3181%" y="559.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::is_empty (175 samples, 0.12%)</title><rect x="57.1320%" y="597" width="0.1166%" height="15" fill="rgb(250,54,15)" fg:x="85758" fg:w="175"/><text x="57.3820%" y="607.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::len (171 samples, 0.11%)</title><rect x="57.1347%" y="581" width="0.1139%" height="15" fill="rgb(227,68,33)" fg:x="85762" fg:w="171"/><text x="57.3847%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::len (166 samples, 0.11%)</title><rect x="57.1380%" y="565" width="0.1106%" height="15" fill="rgb(238,34,41)" fg:x="85767" fg:w="166"/><text x="57.3880%" y="575.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (166 samples, 0.11%)</title><rect x="57.1380%" y="549" width="0.1106%" height="15" fill="rgb(220,11,15)" fg:x="85767" fg:w="166"/><text x="57.3880%" y="559.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (161 samples, 0.11%)</title><rect x="57.1413%" y="533" width="0.1073%" height="15" fill="rgb(246,111,35)" fg:x="85772" fg:w="161"/><text x="57.3913%" y="543.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::len::{{closure}} (161 samples, 0.11%)</title><rect x="57.1413%" y="517" width="0.1073%" height="15" fill="rgb(209,88,53)" fg:x="85772" fg:w="161"/><text x="57.3913%" y="527.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::len (161 samples, 0.11%)</title><rect x="57.1413%" y="501" width="0.1073%" height="15" fill="rgb(231,185,47)" fg:x="85772" fg:w="161"/><text x="57.3913%" y="511.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (35 samples, 0.02%)</title><rect x="57.2513%" y="517" width="0.0233%" height="15" fill="rgb(233,154,1)" fg:x="85937" fg:w="35"/><text x="57.5013%" y="527.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (26 samples, 0.02%)</title><rect x="57.2573%" y="501" width="0.0173%" height="15" fill="rgb(225,15,46)" fg:x="85946" fg:w="26"/><text x="57.5073%" y="511.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (26 samples, 0.02%)</title><rect x="57.2573%" y="485" width="0.0173%" height="15" fill="rgb(211,135,41)" fg:x="85946" fg:w="26"/><text x="57.5073%" y="495.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (251 samples, 0.17%)</title><rect x="57.2799%" y="453" width="0.1672%" height="15" fill="rgb(208,54,0)" fg:x="85980" fg:w="251"/><text x="57.5299%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (251 samples, 0.17%)</title><rect x="57.2799%" y="437" width="0.1672%" height="15" fill="rgb(244,136,14)" fg:x="85980" fg:w="251"/><text x="57.5299%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (281 samples, 0.19%)</title><rect x="57.2752%" y="469" width="0.1872%" height="15" fill="rgb(241,56,14)" fg:x="85973" fg:w="281"/><text x="57.5252%" y="479.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_full (23 samples, 0.02%)</title><rect x="57.4471%" y="453" width="0.0153%" height="15" fill="rgb(205,80,24)" fg:x="86231" fg:w="23"/><text x="57.6971%" y="463.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (16 samples, 0.01%)</title><rect x="57.4518%" y="437" width="0.0107%" height="15" fill="rgb(220,57,4)" fg:x="86238" fg:w="16"/><text x="57.7018%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (16 samples, 0.01%)</title><rect x="57.4518%" y="421" width="0.0107%" height="15" fill="rgb(226,193,50)" fg:x="86238" fg:w="16"/><text x="57.7018%" y="431.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (324 samples, 0.22%)</title><rect x="57.2486%" y="597" width="0.2158%" height="15" fill="rgb(231,168,22)" fg:x="85933" fg:w="324"/><text x="57.4986%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (323 samples, 0.22%)</title><rect x="57.2493%" y="581" width="0.2152%" height="15" fill="rgb(254,215,14)" fg:x="85934" fg:w="323"/><text x="57.4993%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (322 samples, 0.21%)</title><rect x="57.2499%" y="565" width="0.2145%" height="15" fill="rgb(211,115,16)" fg:x="85935" fg:w="322"/><text x="57.4999%" y="575.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (320 samples, 0.21%)</title><rect x="57.2513%" y="549" width="0.2132%" height="15" fill="rgb(236,210,16)" fg:x="85937" fg:w="320"/><text x="57.5013%" y="559.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (320 samples, 0.21%)</title><rect x="57.2513%" y="533" width="0.2132%" height="15" fill="rgb(221,94,12)" fg:x="85937" fg:w="320"/><text x="57.5013%" y="543.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::iter (285 samples, 0.19%)</title><rect x="57.2746%" y="517" width="0.1899%" height="15" fill="rgb(235,218,49)" fg:x="85972" fg:w="285"/><text x="57.5246%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (284 samples, 0.19%)</title><rect x="57.2752%" y="501" width="0.1892%" height="15" fill="rgb(217,114,14)" fg:x="85973" fg:w="284"/><text x="57.5252%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (284 samples, 0.19%)</title><rect x="57.2752%" y="485" width="0.1892%" height="15" fill="rgb(216,145,22)" fg:x="85973" fg:w="284"/><text x="57.5252%" y="495.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (18 samples, 0.01%)</title><rect x="57.4678%" y="501" width="0.0120%" height="15" fill="rgb(217,112,39)" fg:x="86262" fg:w="18"/><text x="57.7178%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt; (117 samples, 0.08%)</title><rect x="57.4644%" y="597" width="0.0779%" height="15" fill="rgb(225,85,32)" fg:x="86257" fg:w="117"/><text x="57.7144%" y="607.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (117 samples, 0.08%)</title><rect x="57.4644%" y="581" width="0.0779%" height="15" fill="rgb(245,209,47)" fg:x="86257" fg:w="117"/><text x="57.7144%" y="591.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (117 samples, 0.08%)</title><rect x="57.4644%" y="565" width="0.0779%" height="15" fill="rgb(218,220,15)" fg:x="86257" fg:w="117"/><text x="57.7144%" y="575.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (113 samples, 0.08%)</title><rect x="57.4671%" y="549" width="0.0753%" height="15" fill="rgb(222,202,31)" fg:x="86261" fg:w="113"/><text x="57.7171%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::iter::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (113 samples, 0.08%)</title><rect x="57.4671%" y="533" width="0.0753%" height="15" fill="rgb(243,203,4)" fg:x="86261" fg:w="113"/><text x="57.7171%" y="543.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (113 samples, 0.08%)</title><rect x="57.4671%" y="517" width="0.0753%" height="15" fill="rgb(237,92,17)" fg:x="86261" fg:w="113"/><text x="57.7171%" y="527.50"></text></g><g><title>sn_rust_dealloc (94 samples, 0.06%)</title><rect x="57.4798%" y="501" width="0.0626%" height="15" fill="rgb(231,119,7)" fg:x="86280" fg:w="94"/><text x="57.7298%" y="511.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (38 samples, 0.03%)</title><rect x="57.8568%" y="581" width="0.0253%" height="15" fill="rgb(237,82,41)" fg:x="86846" fg:w="38"/><text x="58.1068%" y="591.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (53 samples, 0.04%)</title><rect x="57.8821%" y="581" width="0.0353%" height="15" fill="rgb(226,81,48)" fg:x="86884" fg:w="53"/><text x="58.1321%" y="591.50"></text></g><g><title>[libc-2.31.so] (20 samples, 0.01%)</title><rect x="57.9175%" y="581" width="0.0133%" height="15" fill="rgb(234,70,51)" fg:x="86937" fg:w="20"/><text x="58.1675%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (55 samples, 0.04%)</title><rect x="57.9441%" y="581" width="0.0366%" height="15" fill="rgb(251,86,4)" fg:x="86977" fg:w="55"/><text x="58.1941%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (53 samples, 0.04%)</title><rect x="57.9454%" y="565" width="0.0353%" height="15" fill="rgb(244,144,28)" fg:x="86979" fg:w="53"/><text x="58.1954%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (53 samples, 0.04%)</title><rect x="57.9454%" y="549" width="0.0353%" height="15" fill="rgb(232,161,39)" fg:x="86979" fg:w="53"/><text x="58.1954%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (48 samples, 0.03%)</title><rect x="57.9488%" y="533" width="0.0320%" height="15" fill="rgb(247,34,51)" fg:x="86984" fg:w="48"/><text x="58.1988%" y="543.50"></text></g><g><title>[libc-2.31.so] (47 samples, 0.03%)</title><rect x="57.9494%" y="517" width="0.0313%" height="15" fill="rgb(225,132,2)" fg:x="86985" fg:w="47"/><text x="58.1994%" y="527.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (43 samples, 0.03%)</title><rect x="58.6889%" y="565" width="0.0286%" height="15" fill="rgb(209,159,44)" fg:x="88095" fg:w="43"/><text x="58.9389%" y="575.50"></text></g><g><title>[libc-2.31.so] (135 samples, 0.09%)</title><rect x="58.7176%" y="565" width="0.0899%" height="15" fill="rgb(251,214,1)" fg:x="88138" fg:w="135"/><text x="58.9676%" y="575.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_int (108 samples, 0.07%)</title><rect x="58.8075%" y="565" width="0.0719%" height="15" fill="rgb(247,84,47)" fg:x="88273" fg:w="108"/><text x="59.0575%" y="575.50"></text></g><g><title>itoa::write (108 samples, 0.07%)</title><rect x="58.8075%" y="549" width="0.0719%" height="15" fill="rgb(240,111,43)" fg:x="88273" fg:w="108"/><text x="59.0575%" y="559.50"></text></g><g><title>itoa::Buffer::format (108 samples, 0.07%)</title><rect x="58.8075%" y="533" width="0.0719%" height="15" fill="rgb(215,214,35)" fg:x="88273" fg:w="108"/><text x="59.0575%" y="543.50"></text></g><g><title>&lt;u64 as itoa::Integer&gt;::write (108 samples, 0.07%)</title><rect x="58.8075%" y="517" width="0.0719%" height="15" fill="rgb(248,207,23)" fg:x="88273" fg:w="108"/><text x="59.0575%" y="527.50"></text></g><g><title>&lt;u64 as itoa::IntegerPrivate&lt;[u8: _]&gt;&gt;::write_to (108 samples, 0.07%)</title><rect x="58.8075%" y="501" width="0.0719%" height="15" fill="rgb(214,186,4)" fg:x="88273" fg:w="108"/><text x="59.0575%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (29 samples, 0.02%)</title><rect x="58.9021%" y="469" width="0.0193%" height="15" fill="rgb(220,133,22)" fg:x="88415" fg:w="29"/><text x="59.1521%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (24 samples, 0.02%)</title><rect x="58.9054%" y="453" width="0.0160%" height="15" fill="rgb(239,134,19)" fg:x="88420" fg:w="24"/><text x="59.1554%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (24 samples, 0.02%)</title><rect x="58.9054%" y="437" width="0.0160%" height="15" fill="rgb(250,140,9)" fg:x="88420" fg:w="24"/><text x="59.1554%" y="447.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_char (83 samples, 0.06%)</title><rect x="58.8795%" y="549" width="0.0553%" height="15" fill="rgb(225,59,14)" fg:x="88381" fg:w="83"/><text x="59.1295%" y="559.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (82 samples, 0.05%)</title><rect x="58.8801%" y="533" width="0.0546%" height="15" fill="rgb(214,152,51)" fg:x="88382" fg:w="82"/><text x="59.1301%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (82 samples, 0.05%)</title><rect x="58.8801%" y="517" width="0.0546%" height="15" fill="rgb(251,227,43)" fg:x="88382" fg:w="82"/><text x="59.1301%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (82 samples, 0.05%)</title><rect x="58.8801%" y="501" width="0.0546%" height="15" fill="rgb(241,96,17)" fg:x="88382" fg:w="82"/><text x="59.1301%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (82 samples, 0.05%)</title><rect x="58.8801%" y="485" width="0.0546%" height="15" fill="rgb(234,198,43)" fg:x="88382" fg:w="82"/><text x="59.1301%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (20 samples, 0.01%)</title><rect x="58.9214%" y="469" width="0.0133%" height="15" fill="rgb(220,108,29)" fg:x="88444" fg:w="20"/><text x="59.1714%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (92 samples, 0.06%)</title><rect x="59.0094%" y="533" width="0.0613%" height="15" fill="rgb(226,163,33)" fg:x="88576" fg:w="92"/><text x="59.2594%" y="543.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (92 samples, 0.06%)</title><rect x="59.0094%" y="517" width="0.0613%" height="15" fill="rgb(205,194,45)" fg:x="88576" fg:w="92"/><text x="59.2594%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (99 samples, 0.07%)</title><rect x="59.0860%" y="453" width="0.0660%" height="15" fill="rgb(206,143,44)" fg:x="88691" fg:w="99"/><text x="59.3360%" y="463.50"></text></g><g><title>[libc-2.31.so] (99 samples, 0.07%)</title><rect x="59.0860%" y="437" width="0.0660%" height="15" fill="rgb(236,136,36)" fg:x="88691" fg:w="99"/><text x="59.3360%" y="447.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (123 samples, 0.08%)</title><rect x="59.0707%" y="533" width="0.0819%" height="15" fill="rgb(249,172,42)" fg:x="88668" fg:w="123"/><text x="59.3207%" y="543.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (123 samples, 0.08%)</title><rect x="59.0707%" y="517" width="0.0819%" height="15" fill="rgb(216,139,23)" fg:x="88668" fg:w="123"/><text x="59.3207%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (123 samples, 0.08%)</title><rect x="59.0707%" y="501" width="0.0819%" height="15" fill="rgb(207,166,20)" fg:x="88668" fg:w="123"/><text x="59.3207%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (123 samples, 0.08%)</title><rect x="59.0707%" y="485" width="0.0819%" height="15" fill="rgb(210,209,22)" fg:x="88668" fg:w="123"/><text x="59.3207%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (123 samples, 0.08%)</title><rect x="59.0707%" y="469" width="0.0819%" height="15" fill="rgb(232,118,20)" fg:x="88668" fg:w="123"/><text x="59.3207%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (73 samples, 0.05%)</title><rect x="59.1679%" y="453" width="0.0486%" height="15" fill="rgb(238,113,42)" fg:x="88814" fg:w="73"/><text x="59.4179%" y="463.50"></text></g><g><title>[libc-2.31.so] (39 samples, 0.03%)</title><rect x="59.1906%" y="437" width="0.0260%" height="15" fill="rgb(231,42,5)" fg:x="88848" fg:w="39"/><text x="59.4406%" y="447.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (1,861 samples, 1.24%)</title><rect x="57.9807%" y="581" width="1.2398%" height="15" fill="rgb(243,166,24)" fg:x="87032" fg:w="1861"/><text x="58.2307%" y="591.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string (512 samples, 0.34%)</title><rect x="58.8795%" y="565" width="0.3411%" height="15" fill="rgb(237,226,12)" fg:x="88381" fg:w="512"/><text x="59.1295%" y="575.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (429 samples, 0.29%)</title><rect x="58.9347%" y="549" width="0.2858%" height="15" fill="rgb(229,133,24)" fg:x="88464" fg:w="429"/><text x="59.1847%" y="559.50"></text></g><g><title>value_trait::generator::write_str_simd (102 samples, 0.07%)</title><rect x="59.1526%" y="533" width="0.0680%" height="15" fill="rgb(238,33,43)" fg:x="88791" fg:w="102"/><text x="59.4026%" y="543.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (82 samples, 0.05%)</title><rect x="59.1659%" y="517" width="0.0546%" height="15" fill="rgb(227,59,38)" fg:x="88811" fg:w="82"/><text x="59.4159%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (82 samples, 0.05%)</title><rect x="59.1659%" y="501" width="0.0546%" height="15" fill="rgb(230,97,0)" fg:x="88811" fg:w="82"/><text x="59.4159%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (82 samples, 0.05%)</title><rect x="59.1659%" y="485" width="0.0546%" height="15" fill="rgb(250,173,50)" fg:x="88811" fg:w="82"/><text x="59.4159%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (82 samples, 0.05%)</title><rect x="59.1659%" y="469" width="0.0546%" height="15" fill="rgb(240,15,50)" fg:x="88811" fg:w="82"/><text x="59.4159%" y="479.50"></text></g><g><title>&lt;value_trait::generator::WriterGenerator&lt;W,V&gt; as value_trait::generator::BaseGenerator&gt;::get_writer (92 samples, 0.06%)</title><rect x="59.2205%" y="565" width="0.0613%" height="15" fill="rgb(221,93,22)" fg:x="88893" fg:w="92"/><text x="59.4705%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (28 samples, 0.02%)</title><rect x="59.2965%" y="501" width="0.0187%" height="15" fill="rgb(245,180,53)" fg:x="89007" fg:w="28"/><text x="59.5465%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (125 samples, 0.08%)</title><rect x="59.3151%" y="501" width="0.0833%" height="15" fill="rgb(231,88,51)" fg:x="89035" fg:w="125"/><text x="59.5651%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (42 samples, 0.03%)</title><rect x="59.3704%" y="485" width="0.0280%" height="15" fill="rgb(240,58,21)" fg:x="89118" fg:w="42"/><text x="59.6204%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (41 samples, 0.03%)</title><rect x="59.3711%" y="469" width="0.0273%" height="15" fill="rgb(237,21,10)" fg:x="89119" fg:w="41"/><text x="59.6211%" y="479.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (496 samples, 0.33%)</title><rect x="59.2205%" y="581" width="0.3304%" height="15" fill="rgb(218,43,11)" fg:x="88893" fg:w="496"/><text x="59.4705%" y="591.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (404 samples, 0.27%)</title><rect x="59.2818%" y="565" width="0.2691%" height="15" fill="rgb(218,221,29)" fg:x="88985" fg:w="404"/><text x="59.5318%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (404 samples, 0.27%)</title><rect x="59.2818%" y="549" width="0.2691%" height="15" fill="rgb(214,118,42)" fg:x="88985" fg:w="404"/><text x="59.5318%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (404 samples, 0.27%)</title><rect x="59.2818%" y="533" width="0.2691%" height="15" fill="rgb(251,200,26)" fg:x="88985" fg:w="404"/><text x="59.5318%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (404 samples, 0.27%)</title><rect x="59.2818%" y="517" width="0.2691%" height="15" fill="rgb(237,101,39)" fg:x="88985" fg:w="404"/><text x="59.5318%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (229 samples, 0.15%)</title><rect x="59.3984%" y="501" width="0.1526%" height="15" fill="rgb(251,117,11)" fg:x="89160" fg:w="229"/><text x="59.6484%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (19 samples, 0.01%)</title><rect x="59.5563%" y="501" width="0.0127%" height="15" fill="rgb(216,223,23)" fg:x="89397" fg:w="19"/><text x="59.8063%" y="511.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_int (28 samples, 0.02%)</title><rect x="59.5510%" y="581" width="0.0187%" height="15" fill="rgb(251,54,12)" fg:x="89389" fg:w="28"/><text x="59.8010%" y="591.50"></text></g><g><title>itoa::write (28 samples, 0.02%)</title><rect x="59.5510%" y="565" width="0.0187%" height="15" fill="rgb(254,176,54)" fg:x="89389" fg:w="28"/><text x="59.8010%" y="575.50"></text></g><g><title>itoa::Buffer::format (28 samples, 0.02%)</title><rect x="59.5510%" y="549" width="0.0187%" height="15" fill="rgb(210,32,8)" fg:x="89389" fg:w="28"/><text x="59.8010%" y="559.50"></text></g><g><title>&lt;u64 as itoa::Integer&gt;::write (28 samples, 0.02%)</title><rect x="59.5510%" y="533" width="0.0187%" height="15" fill="rgb(235,52,38)" fg:x="89389" fg:w="28"/><text x="59.8010%" y="543.50"></text></g><g><title>&lt;u64 as itoa::IntegerPrivate&lt;[u8: _]&gt;&gt;::write_to (28 samples, 0.02%)</title><rect x="59.5510%" y="517" width="0.0187%" height="15" fill="rgb(231,4,44)" fg:x="89389" fg:w="28"/><text x="59.8010%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (58 samples, 0.04%)</title><rect x="59.6096%" y="485" width="0.0386%" height="15" fill="rgb(249,2,32)" fg:x="89477" fg:w="58"/><text x="59.8596%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (41 samples, 0.03%)</title><rect x="59.6209%" y="469" width="0.0273%" height="15" fill="rgb(224,65,26)" fg:x="89494" fg:w="41"/><text x="59.8709%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (41 samples, 0.03%)</title><rect x="59.6209%" y="453" width="0.0273%" height="15" fill="rgb(250,73,40)" fg:x="89494" fg:w="41"/><text x="59.8709%" y="463.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_char (152 samples, 0.10%)</title><rect x="59.5696%" y="565" width="0.1013%" height="15" fill="rgb(253,177,16)" fg:x="89417" fg:w="152"/><text x="59.8196%" y="575.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (151 samples, 0.10%)</title><rect x="59.5703%" y="549" width="0.1006%" height="15" fill="rgb(217,32,34)" fg:x="89418" fg:w="151"/><text x="59.8203%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (151 samples, 0.10%)</title><rect x="59.5703%" y="533" width="0.1006%" height="15" fill="rgb(212,7,10)" fg:x="89418" fg:w="151"/><text x="59.8203%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (151 samples, 0.10%)</title><rect x="59.5703%" y="517" width="0.1006%" height="15" fill="rgb(245,89,8)" fg:x="89418" fg:w="151"/><text x="59.8203%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (151 samples, 0.10%)</title><rect x="59.5703%" y="501" width="0.1006%" height="15" fill="rgb(237,16,53)" fg:x="89418" fg:w="151"/><text x="59.8203%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (34 samples, 0.02%)</title><rect x="59.6482%" y="485" width="0.0227%" height="15" fill="rgb(250,204,30)" fg:x="89535" fg:w="34"/><text x="59.8982%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (202 samples, 0.13%)</title><rect x="59.9354%" y="549" width="0.1346%" height="15" fill="rgb(208,77,27)" fg:x="89966" fg:w="202"/><text x="60.1854%" y="559.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (202 samples, 0.13%)</title><rect x="59.9354%" y="533" width="0.1346%" height="15" fill="rgb(250,204,28)" fg:x="89966" fg:w="202"/><text x="60.1854%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (47 samples, 0.03%)</title><rect x="60.0973%" y="469" width="0.0313%" height="15" fill="rgb(244,63,21)" fg:x="90209" fg:w="47"/><text x="60.3473%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (47 samples, 0.03%)</title><rect x="60.0973%" y="453" width="0.0313%" height="15" fill="rgb(236,85,44)" fg:x="90209" fg:w="47"/><text x="60.3473%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (47 samples, 0.03%)</title><rect x="60.0973%" y="437" width="0.0313%" height="15" fill="rgb(215,98,4)" fg:x="90209" fg:w="47"/><text x="60.3473%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (156 samples, 0.10%)</title><rect x="60.1286%" y="469" width="0.1039%" height="15" fill="rgb(235,38,11)" fg:x="90256" fg:w="156"/><text x="60.3786%" y="479.50"></text></g><g><title>[libc-2.31.so] (152 samples, 0.10%)</title><rect x="60.1312%" y="453" width="0.1013%" height="15" fill="rgb(254,186,25)" fg:x="90260" fg:w="152"/><text x="60.3812%" y="463.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (247 samples, 0.16%)</title><rect x="60.0700%" y="549" width="0.1646%" height="15" fill="rgb(225,55,31)" fg:x="90168" fg:w="247"/><text x="60.3200%" y="559.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (247 samples, 0.16%)</title><rect x="60.0700%" y="533" width="0.1646%" height="15" fill="rgb(211,15,21)" fg:x="90168" fg:w="247"/><text x="60.3200%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (247 samples, 0.16%)</title><rect x="60.0700%" y="517" width="0.1646%" height="15" fill="rgb(215,187,41)" fg:x="90168" fg:w="247"/><text x="60.3200%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (247 samples, 0.16%)</title><rect x="60.0700%" y="501" width="0.1646%" height="15" fill="rgb(248,69,32)" fg:x="90168" fg:w="247"/><text x="60.3200%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (247 samples, 0.16%)</title><rect x="60.0700%" y="485" width="0.1646%" height="15" fill="rgb(252,102,52)" fg:x="90168" fg:w="247"/><text x="60.3200%" y="495.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_cmpeq_epi8 (89 samples, 0.06%)</title><rect x="60.2891%" y="533" width="0.0593%" height="15" fill="rgb(253,140,32)" fg:x="90497" fg:w="89"/><text x="60.5391%" y="543.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (18 samples, 0.01%)</title><rect x="60.3484%" y="533" width="0.0120%" height="15" fill="rgb(216,56,42)" fg:x="90586" fg:w="18"/><text x="60.5984%" y="543.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (20 samples, 0.01%)</title><rect x="60.3604%" y="533" width="0.0133%" height="15" fill="rgb(216,184,14)" fg:x="90604" fg:w="20"/><text x="60.6104%" y="543.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_loadu_si256 (64 samples, 0.04%)</title><rect x="60.3737%" y="533" width="0.0426%" height="15" fill="rgb(237,187,27)" fg:x="90624" fg:w="64"/><text x="60.6237%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (64 samples, 0.04%)</title><rect x="60.3737%" y="517" width="0.0426%" height="15" fill="rgb(219,65,3)" fg:x="90624" fg:w="64"/><text x="60.6237%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (273 samples, 0.18%)</title><rect x="60.4484%" y="469" width="0.1819%" height="15" fill="rgb(245,83,25)" fg:x="90736" fg:w="273"/><text x="60.6984%" y="479.50"></text></g><g><title>[libc-2.31.so] (212 samples, 0.14%)</title><rect x="60.4890%" y="453" width="0.1412%" height="15" fill="rgb(214,205,45)" fg:x="90797" fg:w="212"/><text x="60.7390%" y="463.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (4,648 samples, 3.10%)</title><rect x="57.5424%" y="597" width="3.0965%" height="15" fill="rgb(241,20,18)" fg:x="86374" fg:w="4648"/><text x="57.7924%" y="607.50">tre..</text></g><g><title>value_trait::generator::BaseGenerator::write_string (1,605 samples, 1.07%)</title><rect x="59.5696%" y="581" width="1.0693%" height="15" fill="rgb(232,163,23)" fg:x="89417" fg:w="1605"/><text x="59.8196%" y="591.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (1,453 samples, 0.97%)</title><rect x="59.6709%" y="565" width="0.9680%" height="15" fill="rgb(214,5,46)" fg:x="89569" fg:w="1453"/><text x="59.9209%" y="575.50"></text></g><g><title>value_trait::generator::write_str_simd (607 samples, 0.40%)</title><rect x="60.2345%" y="549" width="0.4044%" height="15" fill="rgb(229,78,17)" fg:x="90415" fg:w="607"/><text x="60.4845%" y="559.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (326 samples, 0.22%)</title><rect x="60.4217%" y="533" width="0.2172%" height="15" fill="rgb(248,89,10)" fg:x="90696" fg:w="326"/><text x="60.6717%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (326 samples, 0.22%)</title><rect x="60.4217%" y="517" width="0.2172%" height="15" fill="rgb(248,54,15)" fg:x="90696" fg:w="326"/><text x="60.6717%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (326 samples, 0.22%)</title><rect x="60.4217%" y="501" width="0.2172%" height="15" fill="rgb(223,116,6)" fg:x="90696" fg:w="326"/><text x="60.6717%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (326 samples, 0.22%)</title><rect x="60.4217%" y="485" width="0.2172%" height="15" fill="rgb(205,125,38)" fg:x="90696" fg:w="326"/><text x="60.6717%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (137 samples, 0.09%)</title><rect x="60.6895%" y="517" width="0.0913%" height="15" fill="rgb(251,78,38)" fg:x="91098" fg:w="137"/><text x="60.9395%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (87 samples, 0.06%)</title><rect x="60.7228%" y="501" width="0.0580%" height="15" fill="rgb(253,78,28)" fg:x="91148" fg:w="87"/><text x="60.9728%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (70 samples, 0.05%)</title><rect x="60.7342%" y="485" width="0.0466%" height="15" fill="rgb(209,120,3)" fg:x="91165" fg:w="70"/><text x="60.9842%" y="495.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (52 samples, 0.03%)</title><rect x="60.7461%" y="469" width="0.0346%" height="15" fill="rgb(238,229,9)" fg:x="91183" fg:w="52"/><text x="60.9961%" y="479.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (397 samples, 0.26%)</title><rect x="60.6389%" y="597" width="0.2645%" height="15" fill="rgb(253,159,18)" fg:x="91022" fg:w="397"/><text x="60.8889%" y="607.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (385 samples, 0.26%)</title><rect x="60.6469%" y="581" width="0.2565%" height="15" fill="rgb(244,42,34)" fg:x="91034" fg:w="385"/><text x="60.8969%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (383 samples, 0.26%)</title><rect x="60.6482%" y="565" width="0.2552%" height="15" fill="rgb(224,8,7)" fg:x="91036" fg:w="383"/><text x="60.8982%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (383 samples, 0.26%)</title><rect x="60.6482%" y="549" width="0.2552%" height="15" fill="rgb(210,201,45)" fg:x="91036" fg:w="383"/><text x="60.8982%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (383 samples, 0.26%)</title><rect x="60.6482%" y="533" width="0.2552%" height="15" fill="rgb(252,185,21)" fg:x="91036" fg:w="383"/><text x="60.8982%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (184 samples, 0.12%)</title><rect x="60.7808%" y="517" width="0.1226%" height="15" fill="rgb(223,131,1)" fg:x="91235" fg:w="184"/><text x="61.0308%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (298 samples, 0.20%)</title><rect x="62.1225%" y="581" width="0.1985%" height="15" fill="rgb(245,141,16)" fg:x="93249" fg:w="298"/><text x="62.3725%" y="591.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (298 samples, 0.20%)</title><rect x="62.1225%" y="565" width="0.1985%" height="15" fill="rgb(229,55,45)" fg:x="93249" fg:w="298"/><text x="62.3725%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (59 samples, 0.04%)</title><rect x="62.3397%" y="501" width="0.0393%" height="15" fill="rgb(208,92,15)" fg:x="93575" fg:w="59"/><text x="62.5897%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (218 samples, 0.15%)</title><rect x="62.3790%" y="501" width="0.1452%" height="15" fill="rgb(234,185,47)" fg:x="93634" fg:w="218"/><text x="62.6290%" y="511.50"></text></g><g><title>[libc-2.31.so] (216 samples, 0.14%)</title><rect x="62.3803%" y="485" width="0.1439%" height="15" fill="rgb(253,104,50)" fg:x="93636" fg:w="216"/><text x="62.6303%" y="495.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode_into (9,825 samples, 6.55%)</title><rect x="56.0055%" y="661" width="6.5454%" height="15" fill="rgb(205,70,7)" fg:x="84067" fg:w="9825"/><text x="56.2555%" y="671.50">&lt;tremor_r..</text></g><g><title>tremor_value::value::serialize::&lt;impl value_trait::Writable for tremor_value::value::Value&gt;::write (9,825 samples, 6.55%)</title><rect x="56.0055%" y="645" width="6.5454%" height="15" fill="rgb(240,178,43)" fg:x="84067" fg:w="9825"/><text x="56.2555%" y="655.50">tremor_va..</text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (9,825 samples, 6.55%)</title><rect x="56.0055%" y="629" width="6.5454%" height="15" fill="rgb(214,112,2)" fg:x="84067" fg:w="9825"/><text x="56.2555%" y="639.50">tremor_va..</text></g><g><title>tremor_value::value::serialize::FastGenerator::write_object (9,779 samples, 6.51%)</title><rect x="56.0361%" y="613" width="6.5148%" height="15" fill="rgb(206,46,17)" fg:x="84113" fg:w="9779"/><text x="56.2861%" y="623.50">tremor_va..</text></g><g><title>value_trait::generator::BaseGenerator::write_simple_str_content (2,473 samples, 1.65%)</title><rect x="60.9034%" y="597" width="1.6475%" height="15" fill="rgb(225,220,16)" fg:x="91419" fg:w="2473"/><text x="61.1534%" y="607.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (345 samples, 0.23%)</title><rect x="62.3210%" y="581" width="0.2298%" height="15" fill="rgb(238,65,40)" fg:x="93547" fg:w="345"/><text x="62.5710%" y="591.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (343 samples, 0.23%)</title><rect x="62.3224%" y="565" width="0.2285%" height="15" fill="rgb(230,151,21)" fg:x="93549" fg:w="343"/><text x="62.5724%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (343 samples, 0.23%)</title><rect x="62.3224%" y="549" width="0.2285%" height="15" fill="rgb(218,58,49)" fg:x="93549" fg:w="343"/><text x="62.5724%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (343 samples, 0.23%)</title><rect x="62.3224%" y="533" width="0.2285%" height="15" fill="rgb(219,179,14)" fg:x="93549" fg:w="343"/><text x="62.5724%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (343 samples, 0.23%)</title><rect x="62.3224%" y="517" width="0.2285%" height="15" fill="rgb(223,72,1)" fg:x="93549" fg:w="343"/><text x="62.5724%" y="527.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (40 samples, 0.03%)</title><rect x="62.5242%" y="501" width="0.0266%" height="15" fill="rgb(238,126,10)" fg:x="93852" fg:w="40"/><text x="62.7742%" y="511.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (40 samples, 0.03%)</title><rect x="62.5242%" y="485" width="0.0266%" height="15" fill="rgb(224,206,38)" fg:x="93852" fg:w="40"/><text x="62.7742%" y="495.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode (9,874 samples, 6.58%)</title><rect x="56.0055%" y="677" width="6.5781%" height="15" fill="rgb(212,201,54)" fg:x="84067" fg:w="9874"/><text x="56.2555%" y="687.50">&lt;tremor_r..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (49 samples, 0.03%)</title><rect x="62.5509%" y="661" width="0.0326%" height="15" fill="rgb(218,154,48)" fg:x="93892" fg:w="49"/><text x="62.8009%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (49 samples, 0.03%)</title><rect x="62.5509%" y="645" width="0.0326%" height="15" fill="rgb(232,93,24)" fg:x="93892" fg:w="49"/><text x="62.8009%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (49 samples, 0.03%)</title><rect x="62.5509%" y="629" width="0.0326%" height="15" fill="rgb(245,30,21)" fg:x="93892" fg:w="49"/><text x="62.8009%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (49 samples, 0.03%)</title><rect x="62.5509%" y="613" width="0.0326%" height="15" fill="rgb(242,148,29)" fg:x="93892" fg:w="49"/><text x="62.8009%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (49 samples, 0.03%)</title><rect x="62.5509%" y="597" width="0.0326%" height="15" fill="rgb(244,153,54)" fg:x="93892" fg:w="49"/><text x="62.8009%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (49 samples, 0.03%)</title><rect x="62.5509%" y="581" width="0.0326%" height="15" fill="rgb(252,87,22)" fg:x="93892" fg:w="49"/><text x="62.8009%" y="591.50"></text></g><g><title>alloc::alloc::alloc (49 samples, 0.03%)</title><rect x="62.5509%" y="565" width="0.0326%" height="15" fill="rgb(210,51,29)" fg:x="93892" fg:w="49"/><text x="62.8009%" y="575.50"></text></g><g><title>__rg_alloc (49 samples, 0.03%)</title><rect x="62.5509%" y="549" width="0.0326%" height="15" fill="rgb(242,136,47)" fg:x="93892" fg:w="49"/><text x="62.8009%" y="559.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (49 samples, 0.03%)</title><rect x="62.5509%" y="533" width="0.0326%" height="15" fill="rgb(238,68,4)" fg:x="93892" fg:w="49"/><text x="62.8009%" y="543.50"></text></g><g><title>sn_rust_alloc (49 samples, 0.03%)</title><rect x="62.5509%" y="517" width="0.0326%" height="15" fill="rgb(242,161,30)" fg:x="93892" fg:w="49"/><text x="62.8009%" y="527.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (49 samples, 0.03%)</title><rect x="62.5509%" y="501" width="0.0326%" height="15" fill="rgb(218,58,44)" fg:x="93892" fg:w="49"/><text x="62.8009%" y="511.50"></text></g><g><title>alloc::alloc::exchange_malloc (34 samples, 0.02%)</title><rect x="62.6095%" y="661" width="0.0227%" height="15" fill="rgb(252,125,32)" fg:x="93980" fg:w="34"/><text x="62.8595%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (34 samples, 0.02%)</title><rect x="62.6095%" y="645" width="0.0227%" height="15" fill="rgb(219,178,0)" fg:x="93980" fg:w="34"/><text x="62.8595%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (34 samples, 0.02%)</title><rect x="62.6095%" y="629" width="0.0227%" height="15" fill="rgb(213,152,7)" fg:x="93980" fg:w="34"/><text x="62.8595%" y="639.50"></text></g><g><title>alloc::alloc::alloc (28 samples, 0.02%)</title><rect x="62.6135%" y="613" width="0.0187%" height="15" fill="rgb(249,109,34)" fg:x="93986" fg:w="28"/><text x="62.8635%" y="623.50"></text></g><g><title>__rg_alloc (28 samples, 0.02%)</title><rect x="62.6135%" y="597" width="0.0187%" height="15" fill="rgb(232,96,21)" fg:x="93986" fg:w="28"/><text x="62.8635%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (28 samples, 0.02%)</title><rect x="62.6135%" y="581" width="0.0187%" height="15" fill="rgb(228,27,39)" fg:x="93986" fg:w="28"/><text x="62.8635%" y="591.50"></text></g><g><title>sn_rust_alloc (28 samples, 0.02%)</title><rect x="62.6135%" y="565" width="0.0187%" height="15" fill="rgb(211,182,52)" fg:x="93986" fg:w="28"/><text x="62.8635%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (21 samples, 0.01%)</title><rect x="62.6568%" y="645" width="0.0140%" height="15" fill="rgb(234,178,38)" fg:x="94051" fg:w="21"/><text x="62.9068%" y="655.50"></text></g><g><title>core::time::Duration::as_nanos (25 samples, 0.02%)</title><rect x="62.6708%" y="645" width="0.0167%" height="15" fill="rgb(221,111,3)" fg:x="94072" fg:w="25"/><text x="62.9208%" y="655.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (71 samples, 0.05%)</title><rect x="62.6875%" y="629" width="0.0473%" height="15" fill="rgb(228,175,21)" fg:x="94097" fg:w="71"/><text x="62.9375%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (31 samples, 0.02%)</title><rect x="62.7554%" y="597" width="0.0207%" height="15" fill="rgb(228,174,43)" fg:x="94199" fg:w="31"/><text x="63.0054%" y="607.50"></text></g><g><title>core::cmp::PartialOrd::ge (31 samples, 0.02%)</title><rect x="62.7554%" y="581" width="0.0207%" height="15" fill="rgb(211,191,0)" fg:x="94199" fg:w="31"/><text x="63.0054%" y="591.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (30 samples, 0.02%)</title><rect x="62.7561%" y="565" width="0.0200%" height="15" fill="rgb(253,117,3)" fg:x="94200" fg:w="30"/><text x="63.0061%" y="575.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (30 samples, 0.02%)</title><rect x="62.7561%" y="549" width="0.0200%" height="15" fill="rgb(241,127,19)" fg:x="94200" fg:w="30"/><text x="63.0061%" y="559.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (30 samples, 0.02%)</title><rect x="62.7561%" y="533" width="0.0200%" height="15" fill="rgb(218,103,12)" fg:x="94200" fg:w="30"/><text x="63.0061%" y="543.50"></text></g><g><title>std::time::SystemTime::duration_since (149 samples, 0.10%)</title><rect x="62.6875%" y="645" width="0.0993%" height="15" fill="rgb(236,214,43)" fg:x="94097" fg:w="149"/><text x="62.9375%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (78 samples, 0.05%)</title><rect x="62.7348%" y="629" width="0.0520%" height="15" fill="rgb(244,144,19)" fg:x="94168" fg:w="78"/><text x="62.9848%" y="639.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (78 samples, 0.05%)</title><rect x="62.7348%" y="613" width="0.0520%" height="15" fill="rgb(246,188,10)" fg:x="94168" fg:w="78"/><text x="62.9848%" y="623.50"></text></g><g><title>core::time::Duration::new (16 samples, 0.01%)</title><rect x="62.7761%" y="597" width="0.0107%" height="15" fill="rgb(212,193,33)" fg:x="94230" fg:w="16"/><text x="63.0261%" y="607.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (14,140 samples, 9.42%)</title><rect x="53.5738%" y="1045" width="9.4201%" height="15" fill="rgb(241,51,29)" fg:x="80417" fg:w="14140"/><text x="53.8238%" y="1055.50">tremor_runtim..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,490 samples, 6.99%)</title><rect x="56.0055%" y="1029" width="6.9884%" height="15" fill="rgb(211,58,19)" fg:x="84067" fg:w="10490"/><text x="56.2555%" y="1039.50">&lt;core::fu..</text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (10,490 samples, 6.99%)</title><rect x="56.0055%" y="1013" width="6.9884%" height="15" fill="rgb(229,111,26)" fg:x="84067" fg:w="10490"/><text x="56.2555%" y="1023.50">tremor_ru..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,490 samples, 6.99%)</title><rect x="56.0055%" y="997" width="6.9884%" height="15" fill="rgb(213,115,40)" fg:x="84067" fg:w="10490"/><text x="56.2555%" y="1007.50">&lt;async_ff..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,490 samples, 6.99%)</title><rect x="56.0055%" y="981" width="6.9884%" height="15" fill="rgb(209,56,44)" fg:x="84067" fg:w="10490"/><text x="56.2555%" y="991.50">&lt;async_ff..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (10,490 samples, 6.99%)</title><rect x="56.0055%" y="965" width="6.9884%" height="15" fill="rgb(230,108,32)" fg:x="84067" fg:w="10490"/><text x="56.2555%" y="975.50">&lt;core::ta..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (10,490 samples, 6.99%)</title><rect x="56.0055%" y="949" width="6.9884%" height="15" fill="rgb(216,165,31)" fg:x="84067" fg:w="10490"/><text x="56.2555%" y="959.50">&lt;async_ff..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (10,490 samples, 6.99%)</title><rect x="56.0055%" y="933" width="6.9884%" height="15" fill="rgb(218,122,21)" fg:x="84067" fg:w="10490"/><text x="56.2555%" y="943.50">async_ffi..</text></g><g><title>std::panic::catch_unwind (10,490 samples, 6.99%)</title><rect x="56.0055%" y="917" width="6.9884%" height="15" fill="rgb(223,224,47)" fg:x="84067" fg:w="10490"/><text x="56.2555%" y="927.50">std::pani..</text></g><g><title>std::panicking::try (10,490 samples, 6.99%)</title><rect x="56.0055%" y="901" width="6.9884%" height="15" fill="rgb(238,102,44)" fg:x="84067" fg:w="10490"/><text x="56.2555%" y="911.50">std::pani..</text></g><g><title>std::panicking::try::do_call (10,490 samples, 6.99%)</title><rect x="56.0055%" y="885" width="6.9884%" height="15" fill="rgb(236,46,40)" fg:x="84067" fg:w="10490"/><text x="56.2555%" y="895.50">std::pani..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (10,490 samples, 6.99%)</title><rect x="56.0055%" y="869" width="6.9884%" height="15" fill="rgb(247,202,50)" fg:x="84067" fg:w="10490"/><text x="56.2555%" y="879.50">&lt;core::pa..</text></g><g><title>core::ops::function::FnOnce::call_once (10,490 samples, 6.99%)</title><rect x="56.0055%" y="853" width="6.9884%" height="15" fill="rgb(209,99,20)" fg:x="84067" fg:w="10490"/><text x="56.2555%" y="863.50">core::ops..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (10,490 samples, 6.99%)</title><rect x="56.0055%" y="837" width="6.9884%" height="15" fill="rgb(252,27,34)" fg:x="84067" fg:w="10490"/><text x="56.2555%" y="847.50">async_ffi..</text></g><g><title>async_ffi::FfiContext::with_context (10,490 samples, 6.99%)</title><rect x="56.0055%" y="821" width="6.9884%" height="15" fill="rgb(215,206,23)" fg:x="84067" fg:w="10490"/><text x="56.2555%" y="831.50">async_ffi..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (10,490 samples, 6.99%)</title><rect x="56.0055%" y="805" width="6.9884%" height="15" fill="rgb(212,135,36)" fg:x="84067" fg:w="10490"/><text x="56.2555%" y="815.50">async_ffi..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,490 samples, 6.99%)</title><rect x="56.0055%" y="789" width="6.9884%" height="15" fill="rgb(240,189,1)" fg:x="84067" fg:w="10490"/><text x="56.2555%" y="799.50">&lt;core::fu..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (10,490 samples, 6.99%)</title><rect x="56.0055%" y="773" width="6.9884%" height="15" fill="rgb(242,56,20)" fg:x="84067" fg:w="10490"/><text x="56.2555%" y="783.50">&lt;tremor_r..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (10,490 samples, 6.99%)</title><rect x="56.0055%" y="757" width="6.9884%" height="15" fill="rgb(247,132,33)" fg:x="84067" fg:w="10490"/><text x="56.2555%" y="767.50">tremor_ru..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (10,490 samples, 6.99%)</title><rect x="56.0055%" y="741" width="6.9884%" height="15" fill="rgb(208,149,11)" fg:x="84067" fg:w="10490"/><text x="56.2555%" y="751.50">tremor_ru..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (10,490 samples, 6.99%)</title><rect x="56.0055%" y="725" width="6.9884%" height="15" fill="rgb(211,33,11)" fg:x="84067" fg:w="10490"/><text x="56.2555%" y="735.50">tremor_ru..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (10,490 samples, 6.99%)</title><rect x="56.0055%" y="709" width="6.9884%" height="15" fill="rgb(221,29,38)" fg:x="84067" fg:w="10490"/><text x="56.2555%" y="719.50">tremor_ru..</text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (10,490 samples, 6.99%)</title><rect x="56.0055%" y="693" width="6.9884%" height="15" fill="rgb(206,182,49)" fg:x="84067" fg:w="10490"/><text x="56.2555%" y="703.50">&lt;tremor_r..</text></g><g><title>tremor_runtime::postprocessor::postprocess (616 samples, 0.41%)</title><rect x="62.5835%" y="677" width="0.4104%" height="15" fill="rgb(216,140,1)" fg:x="93941" fg:w="616"/><text x="62.8335%" y="687.50"></text></g><g><title>tremor_common::time::nanotime (523 samples, 0.35%)</title><rect x="62.6455%" y="661" width="0.3484%" height="15" fill="rgb(232,57,40)" fg:x="94034" fg:w="523"/><text x="62.8955%" y="671.50"></text></g><g><title>std::time::SystemTime::now (311 samples, 0.21%)</title><rect x="62.7867%" y="645" width="0.2072%" height="15" fill="rgb(224,186,18)" fg:x="94246" fg:w="311"/><text x="63.0367%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (311 samples, 0.21%)</title><rect x="62.7867%" y="629" width="0.2072%" height="15" fill="rgb(215,121,11)" fg:x="94246" fg:w="311"/><text x="63.0367%" y="639.50"></text></g><g><title>std::sys::unix::time::inner::now (311 samples, 0.21%)</title><rect x="62.7867%" y="613" width="0.2072%" height="15" fill="rgb(245,147,10)" fg:x="94246" fg:w="311"/><text x="63.0367%" y="623.50"></text></g><g><title>__clock_gettime (253 samples, 0.17%)</title><rect x="62.8254%" y="597" width="0.1685%" height="15" fill="rgb(238,153,13)" fg:x="94304" fg:w="253"/><text x="63.0754%" y="607.50"></text></g><g><title>__vdso_clock_gettime (228 samples, 0.15%)</title><rect x="62.8420%" y="581" width="0.1519%" height="15" fill="rgb(233,108,0)" fg:x="94329" fg:w="228"/><text x="63.0920%" y="591.50"></text></g><g><title>[[vdso]] (189 samples, 0.13%)</title><rect x="62.8680%" y="565" width="0.1259%" height="15" fill="rgb(212,157,17)" fg:x="94368" fg:w="189"/><text x="63.1180%" y="575.50"></text></g><g><title>[libc-2.31.so] (119 samples, 0.08%)</title><rect x="63.2850%" y="693" width="0.0793%" height="15" fill="rgb(225,213,38)" fg:x="94994" fg:w="119"/><text x="63.5350%" y="703.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (507 samples, 0.34%)</title><rect x="63.3730%" y="693" width="0.3378%" height="15" fill="rgb(248,16,11)" fg:x="95126" fg:w="507"/><text x="63.6230%" y="703.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (30 samples, 0.02%)</title><rect x="63.7107%" y="693" width="0.0200%" height="15" fill="rgb(241,33,4)" fg:x="95633" fg:w="30"/><text x="63.9607%" y="703.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::flatten_bits (1,079 samples, 0.72%)</title><rect x="63.0152%" y="885" width="0.7188%" height="15" fill="rgb(222,26,43)" fg:x="94589" fg:w="1079"/><text x="63.2652%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1,079 samples, 0.72%)</title><rect x="63.0152%" y="869" width="0.7188%" height="15" fill="rgb(243,29,36)" fg:x="94589" fg:w="1079"/><text x="63.2652%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1,079 samples, 0.72%)</title><rect x="63.0152%" y="853" width="0.7188%" height="15" fill="rgb(241,9,27)" fg:x="94589" fg:w="1079"/><text x="63.2652%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1,079 samples, 0.72%)</title><rect x="63.0152%" y="837" width="0.7188%" height="15" fill="rgb(205,117,26)" fg:x="94589" fg:w="1079"/><text x="63.2652%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1,079 samples, 0.72%)</title><rect x="63.0152%" y="821" width="0.7188%" height="15" fill="rgb(209,80,39)" fg:x="94589" fg:w="1079"/><text x="63.2652%" y="831.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,079 samples, 0.72%)</title><rect x="63.0152%" y="805" width="0.7188%" height="15" fill="rgb(239,155,6)" fg:x="94589" fg:w="1079"/><text x="63.2652%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1,079 samples, 0.72%)</title><rect x="63.0152%" y="789" width="0.7188%" height="15" fill="rgb(212,104,12)" fg:x="94589" fg:w="1079"/><text x="63.2652%" y="799.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1,079 samples, 0.72%)</title><rect x="63.0152%" y="773" width="0.7188%" height="15" fill="rgb(234,204,3)" fg:x="94589" fg:w="1079"/><text x="63.2652%" y="783.50"></text></g><g><title>alloc::alloc::realloc (1,079 samples, 0.72%)</title><rect x="63.0152%" y="757" width="0.7188%" height="15" fill="rgb(251,218,7)" fg:x="94589" fg:w="1079"/><text x="63.2652%" y="767.50"></text></g><g><title>__rg_realloc (1,079 samples, 0.72%)</title><rect x="63.0152%" y="741" width="0.7188%" height="15" fill="rgb(221,81,32)" fg:x="94589" fg:w="1079"/><text x="63.2652%" y="751.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (1,079 samples, 0.72%)</title><rect x="63.0152%" y="725" width="0.7188%" height="15" fill="rgb(214,152,26)" fg:x="94589" fg:w="1079"/><text x="63.2652%" y="735.50"></text></g><g><title>sn_rust_realloc (1,079 samples, 0.72%)</title><rect x="63.0152%" y="709" width="0.7188%" height="15" fill="rgb(223,22,3)" fg:x="94589" fg:w="1079"/><text x="63.2652%" y="719.50"></text></g><g><title>simd_json::Deserializer::find_structural_bits (1,098 samples, 0.73%)</title><rect x="63.0152%" y="901" width="0.7315%" height="15" fill="rgb(207,174,7)" fg:x="94589" fg:w="1098"/><text x="63.2652%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (19 samples, 0.01%)</title><rect x="63.7341%" y="885" width="0.0127%" height="15" fill="rgb(224,19,52)" fg:x="95668" fg:w="19"/><text x="63.9841%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (19 samples, 0.01%)</title><rect x="63.7341%" y="869" width="0.0127%" height="15" fill="rgb(228,24,14)" fg:x="95668" fg:w="19"/><text x="63.9841%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (19 samples, 0.01%)</title><rect x="63.7341%" y="853" width="0.0127%" height="15" fill="rgb(230,153,43)" fg:x="95668" fg:w="19"/><text x="63.9841%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (19 samples, 0.01%)</title><rect x="63.7341%" y="837" width="0.0127%" height="15" fill="rgb(231,106,12)" fg:x="95668" fg:w="19"/><text x="63.9841%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (19 samples, 0.01%)</title><rect x="63.7341%" y="821" width="0.0127%" height="15" fill="rgb(215,92,2)" fg:x="95668" fg:w="19"/><text x="63.9841%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (19 samples, 0.01%)</title><rect x="63.7341%" y="805" width="0.0127%" height="15" fill="rgb(249,143,25)" fg:x="95668" fg:w="19"/><text x="63.9841%" y="815.50"></text></g><g><title>alloc::alloc::alloc (19 samples, 0.01%)</title><rect x="63.7341%" y="789" width="0.0127%" height="15" fill="rgb(252,7,35)" fg:x="95668" fg:w="19"/><text x="63.9841%" y="799.50"></text></g><g><title>__rg_alloc (19 samples, 0.01%)</title><rect x="63.7341%" y="773" width="0.0127%" height="15" fill="rgb(216,69,40)" fg:x="95668" fg:w="19"/><text x="63.9841%" y="783.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (19 samples, 0.01%)</title><rect x="63.7341%" y="757" width="0.0127%" height="15" fill="rgb(240,36,33)" fg:x="95668" fg:w="19"/><text x="63.9841%" y="767.50"></text></g><g><title>sn_rust_alloc (19 samples, 0.01%)</title><rect x="63.7341%" y="741" width="0.0127%" height="15" fill="rgb(231,128,14)" fg:x="95668" fg:w="19"/><text x="63.9841%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (223 samples, 0.15%)</title><rect x="65.0298%" y="885" width="0.1486%" height="15" fill="rgb(245,143,14)" fg:x="97613" fg:w="223"/><text x="65.2798%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (223 samples, 0.15%)</title><rect x="65.0298%" y="869" width="0.1486%" height="15" fill="rgb(222,130,28)" fg:x="97613" fg:w="223"/><text x="65.2798%" y="879.50"></text></g><g><title>snmalloc::Buddy&lt;snmalloc::BuddyChunkRep&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt; &gt;, 14ul, 21ul&gt;::add_block (23 samples, 0.02%)</title><rect x="66.8639%" y="677" width="0.0153%" height="15" fill="rgb(212,10,48)" fg:x="100366" fg:w="23"/><text x="67.1139%" y="687.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (2,096 samples, 1.40%)</title><rect x="65.4995%" y="725" width="1.3964%" height="15" fill="rgb(254,118,45)" fg:x="98318" fg:w="2096"/><text x="65.7495%" y="735.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (65 samples, 0.04%)</title><rect x="66.8525%" y="709" width="0.0433%" height="15" fill="rgb(228,6,45)" fg:x="100349" fg:w="65"/><text x="67.1025%" y="719.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_slabs&lt;false&gt; (52 samples, 0.03%)</title><rect x="66.8612%" y="693" width="0.0346%" height="15" fill="rgb(241,18,35)" fg:x="100362" fg:w="52"/><text x="67.1112%" y="703.50"></text></g><g><title>snmalloc::range_to_pow_2_blocks&lt;4ul, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::SmallBuddyRange::Type&lt;snmalloc::LargeBuddyRange&lt;21ul, 21ul, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, 12ul&gt;::Type&lt;snmalloc::StatsRange::Type&lt;snmalloc::CommitRange&lt;snmalloc::PALLinux&gt;::Type&lt;snmalloc::GlobalRange::Type&lt;snmalloc::LogRange&lt;2ul&gt;::Type&lt;snmalloc::LargeBuddyRange&lt;24ul, 63ul, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, 14ul&gt;::Type&lt;snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::add_range(snmalloc::CapPtr&lt;void, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt; &gt;, unsigned long)::{lambda(snmalloc::CapPtr&lt;void, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt; &gt;, unsigned long, bool)#1}&gt; (25 samples, 0.02%)</title><rect x="66.8792%" y="677" width="0.0167%" height="15" fill="rgb(227,214,53)" fg:x="100389" fg:w="25"/><text x="67.1292%" y="687.50"></text></g><g><title>snmalloc::Buddy&lt;snmalloc::BuddyInplaceRep&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt; &gt;, 4ul, 14ul&gt;::add_block (24 samples, 0.02%)</title><rect x="66.8799%" y="661" width="0.0160%" height="15" fill="rgb(224,107,51)" fg:x="100390" fg:w="24"/><text x="67.1299%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,636 samples, 1.76%)</title><rect x="65.1924%" y="821" width="1.7561%" height="15" fill="rgb(248,60,28)" fg:x="97857" fg:w="2636"/><text x="65.4424%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,636 samples, 1.76%)</title><rect x="65.1924%" y="805" width="1.7561%" height="15" fill="rgb(249,101,23)" fg:x="97857" fg:w="2636"/><text x="65.4424%" y="815.50"></text></g><g><title>alloc::alloc::alloc (2,636 samples, 1.76%)</title><rect x="65.1924%" y="789" width="1.7561%" height="15" fill="rgb(228,51,19)" fg:x="97857" fg:w="2636"/><text x="65.4424%" y="799.50"></text></g><g><title>__rg_alloc (2,636 samples, 1.76%)</title><rect x="65.1924%" y="773" width="1.7561%" height="15" fill="rgb(213,20,6)" fg:x="97857" fg:w="2636"/><text x="65.4424%" y="783.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (2,636 samples, 1.76%)</title><rect x="65.1924%" y="757" width="1.7561%" height="15" fill="rgb(212,124,10)" fg:x="97857" fg:w="2636"/><text x="65.4424%" y="767.50"></text></g><g><title>sn_rust_alloc (2,617 samples, 1.74%)</title><rect x="65.2050%" y="741" width="1.7434%" height="15" fill="rgb(248,3,40)" fg:x="97876" fg:w="2617"/><text x="65.4550%" y="751.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (79 samples, 0.05%)</title><rect x="66.8958%" y="725" width="0.0526%" height="15" fill="rgb(223,178,23)" fg:x="100414" fg:w="79"/><text x="67.1458%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2,659 samples, 1.77%)</title><rect x="65.1784%" y="885" width="1.7714%" height="15" fill="rgb(240,132,45)" fg:x="97836" fg:w="2659"/><text x="65.4284%" y="895.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,659 samples, 1.77%)</title><rect x="65.1784%" y="869" width="1.7714%" height="15" fill="rgb(245,164,36)" fg:x="97836" fg:w="2659"/><text x="65.4284%" y="879.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,653 samples, 1.77%)</title><rect x="65.1824%" y="853" width="1.7674%" height="15" fill="rgb(231,188,53)" fg:x="97842" fg:w="2653"/><text x="65.4324%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2,653 samples, 1.77%)</title><rect x="65.1824%" y="837" width="1.7674%" height="15" fill="rgb(237,198,39)" fg:x="97842" fg:w="2653"/><text x="65.4324%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (162 samples, 0.11%)</title><rect x="66.9558%" y="837" width="0.1079%" height="15" fill="rgb(223,120,35)" fg:x="100504" fg:w="162"/><text x="67.2058%" y="847.50"></text></g><g><title>alloc::alloc::dealloc (161 samples, 0.11%)</title><rect x="66.9565%" y="821" width="0.1073%" height="15" fill="rgb(253,107,49)" fg:x="100505" fg:w="161"/><text x="67.2065%" y="831.50"></text></g><g><title>__rg_dealloc (161 samples, 0.11%)</title><rect x="66.9565%" y="805" width="0.1073%" height="15" fill="rgb(216,44,31)" fg:x="100505" fg:w="161"/><text x="67.2065%" y="815.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (161 samples, 0.11%)</title><rect x="66.9565%" y="789" width="0.1073%" height="15" fill="rgb(253,87,21)" fg:x="100505" fg:w="161"/><text x="67.2065%" y="799.50"></text></g><g><title>sn_rust_dealloc (158 samples, 0.11%)</title><rect x="66.9585%" y="773" width="0.1053%" height="15" fill="rgb(226,18,2)" fg:x="100508" fg:w="158"/><text x="67.2085%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(simd_json::stage2::StackState,usize,usize)&gt;&gt; (180 samples, 0.12%)</title><rect x="66.9498%" y="885" width="0.1199%" height="15" fill="rgb(216,8,46)" fg:x="100495" fg:w="180"/><text x="67.1998%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(simd_json::stage2::StackState,usize,usize)&gt;&gt; (180 samples, 0.12%)</title><rect x="66.9498%" y="869" width="0.1199%" height="15" fill="rgb(226,140,39)" fg:x="100495" fg:w="180"/><text x="67.1998%" y="879.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (180 samples, 0.12%)</title><rect x="66.9498%" y="853" width="0.1199%" height="15" fill="rgb(221,194,54)" fg:x="100495" fg:w="180"/><text x="67.1998%" y="863.50"></text></g><g><title>core::ptr::write (1,273 samples, 0.85%)</title><rect x="67.0697%" y="885" width="0.8481%" height="15" fill="rgb(213,92,11)" fg:x="100675" fg:w="1273"/><text x="67.3197%" y="895.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (40 samples, 0.03%)</title><rect x="67.9178%" y="885" width="0.0266%" height="15" fill="rgb(229,162,46)" fg:x="101948" fg:w="40"/><text x="68.1678%" y="895.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (40 samples, 0.03%)</title><rect x="67.9178%" y="869" width="0.0266%" height="15" fill="rgb(214,111,36)" fg:x="101948" fg:w="40"/><text x="68.1678%" y="879.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (40 samples, 0.03%)</title><rect x="67.9178%" y="853" width="0.0266%" height="15" fill="rgb(207,6,21)" fg:x="101948" fg:w="40"/><text x="68.1678%" y="863.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (40 samples, 0.03%)</title><rect x="67.9178%" y="837" width="0.0266%" height="15" fill="rgb(213,127,38)" fg:x="101948" fg:w="40"/><text x="68.1678%" y="847.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (549 samples, 0.37%)</title><rect x="68.1037%" y="869" width="0.3657%" height="15" fill="rgb(238,118,32)" fg:x="102227" fg:w="549"/><text x="68.3537%" y="879.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_loadu_si256 (158 samples, 0.11%)</title><rect x="68.4694%" y="869" width="0.1053%" height="15" fill="rgb(240,139,39)" fg:x="102776" fg:w="158"/><text x="68.7194%" y="879.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (158 samples, 0.11%)</title><rect x="68.4694%" y="853" width="0.1053%" height="15" fill="rgb(235,10,37)" fg:x="102776" fg:w="158"/><text x="68.7194%" y="863.50"></text></g><g><title>core::num::&lt;impl u32&gt;::trailing_zeros (158 samples, 0.11%)</title><rect x="68.5747%" y="869" width="0.1053%" height="15" fill="rgb(249,171,38)" fg:x="102934" fg:w="158"/><text x="68.8247%" y="879.50"></text></g><g><title>simd_json::avx2::deser::&lt;impl simd_json::Deserializer&gt;::parse_str_ (1,214 samples, 0.81%)</title><rect x="67.9444%" y="885" width="0.8088%" height="15" fill="rgb(242,144,32)" fg:x="101988" fg:w="1214"/><text x="68.1944%" y="895.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (110 samples, 0.07%)</title><rect x="68.6799%" y="869" width="0.0733%" height="15" fill="rgb(217,117,21)" fg:x="103092" fg:w="110"/><text x="68.9299%" y="879.50"></text></g><g><title>simd_json::numberparse::is_integer (66 samples, 0.04%)</title><rect x="69.1123%" y="869" width="0.0440%" height="15" fill="rgb(249,87,1)" fg:x="103741" fg:w="66"/><text x="69.3623%" y="879.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::contains (66 samples, 0.04%)</title><rect x="69.1123%" y="853" width="0.0440%" height="15" fill="rgb(248,196,48)" fg:x="103741" fg:w="66"/><text x="69.3623%" y="863.50"></text></g><g><title>core::ops::range::RangeBounds::contains (66 samples, 0.04%)</title><rect x="69.1123%" y="837" width="0.0440%" height="15" fill="rgb(251,206,33)" fg:x="103741" fg:w="66"/><text x="69.3623%" y="847.50"></text></g><g><title>simd_json::numberparse::&lt;impl simd_json::Deserializer&gt;::parse_number_int (637 samples, 0.42%)</title><rect x="68.7532%" y="885" width="0.4244%" height="15" fill="rgb(232,141,28)" fg:x="103202" fg:w="637"/><text x="69.0032%" y="895.50"></text></g><g><title>simd_json::numberparse::is_not_structural_or_whitespace_or_exponent_or_decimal (32 samples, 0.02%)</title><rect x="69.1563%" y="869" width="0.0213%" height="15" fill="rgb(209,167,14)" fg:x="103807" fg:w="32"/><text x="69.4063%" y="879.50"></text></g><g><title>simd_json::stage2::is_valid_false_atom (31 samples, 0.02%)</title><rect x="69.1776%" y="885" width="0.0207%" height="15" fill="rgb(225,11,50)" fg:x="103839" fg:w="31"/><text x="69.4276%" y="895.50"></text></g><g><title>simd_json::charutils::is_not_structural_or_whitespace (24 samples, 0.02%)</title><rect x="69.1822%" y="869" width="0.0160%" height="15" fill="rgb(209,50,20)" fg:x="103846" fg:w="24"/><text x="69.4322%" y="879.50"></text></g><g><title>simd_json::stage2::&lt;impl simd_json::Deserializer&gt;::build_tape (8,201 samples, 5.46%)</title><rect x="63.7467%" y="901" width="5.4635%" height="15" fill="rgb(212,17,46)" fg:x="95687" fg:w="8201"/><text x="63.9967%" y="911.50">simd_js..</text></g><g><title>simd_json::stage2::is_valid_true_atom (18 samples, 0.01%)</title><rect x="69.1982%" y="885" width="0.0120%" height="15" fill="rgb(216,101,39)" fg:x="103870" fg:w="18"/><text x="69.4482%" y="895.50"></text></g><g><title>simd_json::Deserializer::from_slice_with_buffers (9,301 samples, 6.20%)</title><rect x="63.0152%" y="917" width="6.1963%" height="15" fill="rgb(212,228,48)" fg:x="94589" fg:w="9301"/><text x="63.2652%" y="927.50">simd_jso..</text></g><g><title>abi_stable::std_types::option::&lt;impl abi_stable::traits::IntoReprC for core::option::Option&lt;T&gt;&gt;::into_c (72 samples, 0.05%)</title><rect x="70.6972%" y="789" width="0.0480%" height="15" fill="rgb(250,6,50)" fg:x="106120" fg:w="72"/><text x="70.9472%" y="799.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (70 samples, 0.05%)</title><rect x="70.6985%" y="773" width="0.0466%" height="15" fill="rgb(250,160,48)" fg:x="106122" fg:w="70"/><text x="70.9485%" y="783.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as core::convert::From&lt;core::option::Option&lt;T&gt;&gt;&gt;::from (70 samples, 0.05%)</title><rect x="70.6985%" y="757" width="0.0466%" height="15" fill="rgb(244,216,33)" fg:x="106122" fg:w="70"/><text x="70.9485%" y="767.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (19 samples, 0.01%)</title><rect x="71.6658%" y="709" width="0.0127%" height="15" fill="rgb(207,157,5)" fg:x="107574" fg:w="19"/><text x="71.9158%" y="719.50"></text></g><g><title>&lt;byteorder::LittleEndian as byteorder::ByteOrder&gt;::read_u32 (34 samples, 0.02%)</title><rect x="71.8124%" y="645" width="0.0227%" height="15" fill="rgb(228,199,8)" fg:x="107794" fg:w="34"/><text x="72.0624%" y="655.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (34 samples, 0.02%)</title><rect x="71.8124%" y="629" width="0.0227%" height="15" fill="rgb(227,80,20)" fg:x="107794" fg:w="34"/><text x="72.0624%" y="639.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (34 samples, 0.02%)</title><rect x="71.8124%" y="613" width="0.0227%" height="15" fill="rgb(222,9,33)" fg:x="107794" fg:w="34"/><text x="72.0624%" y="623.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (34 samples, 0.02%)</title><rect x="71.8124%" y="597" width="0.0227%" height="15" fill="rgb(239,44,28)" fg:x="107794" fg:w="34"/><text x="72.0624%" y="607.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (34 samples, 0.02%)</title><rect x="71.8124%" y="581" width="0.0227%" height="15" fill="rgb(249,187,43)" fg:x="107794" fg:w="34"/><text x="72.0624%" y="591.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (180 samples, 0.12%)</title><rect x="71.8350%" y="645" width="0.1199%" height="15" fill="rgb(216,141,28)" fg:x="107828" fg:w="180"/><text x="72.0850%" y="655.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitXor&gt;::bitxor (60 samples, 0.04%)</title><rect x="71.9550%" y="629" width="0.0400%" height="15" fill="rgb(230,154,53)" fg:x="108008" fg:w="60"/><text x="72.2050%" y="639.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (62 samples, 0.04%)</title><rect x="71.9949%" y="629" width="0.0413%" height="15" fill="rgb(227,82,4)" fg:x="108068" fg:w="62"/><text x="72.2449%" y="639.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (849 samples, 0.57%)</title><rect x="71.6785%" y="693" width="0.5656%" height="15" fill="rgb(220,107,16)" fg:x="107593" fg:w="849"/><text x="71.9285%" y="703.50"></text></g><g><title>fxhash::write (849 samples, 0.57%)</title><rect x="71.6785%" y="677" width="0.5656%" height="15" fill="rgb(207,187,2)" fg:x="107593" fg:w="849"/><text x="71.9285%" y="687.50"></text></g><g><title>fxhash::write64 (849 samples, 0.57%)</title><rect x="71.6785%" y="661" width="0.5656%" height="15" fill="rgb(210,162,52)" fg:x="107593" fg:w="849"/><text x="71.9285%" y="671.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (434 samples, 0.29%)</title><rect x="71.9550%" y="645" width="0.2891%" height="15" fill="rgb(217,216,49)" fg:x="108008" fg:w="434"/><text x="72.2050%" y="655.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (312 samples, 0.21%)</title><rect x="72.0362%" y="629" width="0.2079%" height="15" fill="rgb(218,146,49)" fg:x="108130" fg:w="312"/><text x="72.2862%" y="639.50"></text></g><g><title>&lt;usize as core::ops::bit::BitXor&gt;::bitxor (31 samples, 0.02%)</title><rect x="72.3300%" y="661" width="0.0207%" height="15" fill="rgb(216,55,40)" fg:x="108571" fg:w="31"/><text x="72.5800%" y="671.50"></text></g><g><title>hashbrown::map::make_insert_hash (1,313 samples, 0.87%)</title><rect x="71.5639%" y="757" width="0.8747%" height="15" fill="rgb(208,196,21)" fg:x="107421" fg:w="1313"/><text x="71.8139%" y="767.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (1,211 samples, 0.81%)</title><rect x="71.6319%" y="741" width="0.8068%" height="15" fill="rgb(242,117,42)" fg:x="107523" fg:w="1211"/><text x="71.8819%" y="751.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::hash::Hash&gt;::hash (1,160 samples, 0.77%)</title><rect x="71.6658%" y="725" width="0.7728%" height="15" fill="rgb(210,11,23)" fg:x="107574" fg:w="1160"/><text x="71.9158%" y="735.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1,141 samples, 0.76%)</title><rect x="71.6785%" y="709" width="0.7601%" height="15" fill="rgb(217,110,2)" fg:x="107593" fg:w="1141"/><text x="71.9285%" y="719.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (292 samples, 0.19%)</title><rect x="72.2441%" y="693" width="0.1945%" height="15" fill="rgb(229,77,54)" fg:x="108442" fg:w="292"/><text x="72.4941%" y="703.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (292 samples, 0.19%)</title><rect x="72.2441%" y="677" width="0.1945%" height="15" fill="rgb(218,53,16)" fg:x="108442" fg:w="292"/><text x="72.4941%" y="687.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (128 samples, 0.09%)</title><rect x="72.3534%" y="661" width="0.0853%" height="15" fill="rgb(215,38,13)" fg:x="108606" fg:w="128"/><text x="72.6034%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 0.02%)</title><rect x="72.4480%" y="709" width="0.0207%" height="15" fill="rgb(235,42,18)" fg:x="108748" fg:w="31"/><text x="72.6980%" y="719.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (31 samples, 0.02%)</title><rect x="72.4480%" y="693" width="0.0207%" height="15" fill="rgb(219,66,54)" fg:x="108748" fg:w="31"/><text x="72.6980%" y="703.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (30 samples, 0.02%)</title><rect x="72.4686%" y="693" width="0.0200%" height="15" fill="rgb(222,205,4)" fg:x="108779" fg:w="30"/><text x="72.7186%" y="703.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (30 samples, 0.02%)</title><rect x="72.4686%" y="677" width="0.0200%" height="15" fill="rgb(227,213,46)" fg:x="108779" fg:w="30"/><text x="72.7186%" y="687.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (46 samples, 0.03%)</title><rect x="72.4686%" y="709" width="0.0306%" height="15" fill="rgb(250,145,42)" fg:x="108779" fg:w="46"/><text x="72.7186%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (325 samples, 0.22%)</title><rect x="72.4993%" y="709" width="0.2165%" height="15" fill="rgb(219,15,2)" fg:x="108825" fg:w="325"/><text x="72.7493%" y="719.50"></text></g><g><title>hashbrown::raw::inner::h2 (57 samples, 0.04%)</title><rect x="72.7158%" y="709" width="0.0380%" height="15" fill="rgb(231,181,52)" fg:x="109150" fg:w="57"/><text x="72.9658%" y="719.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (144 samples, 0.10%)</title><rect x="72.7537%" y="709" width="0.0959%" height="15" fill="rgb(235,1,42)" fg:x="109207" fg:w="144"/><text x="73.0037%" y="719.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (144 samples, 0.10%)</title><rect x="72.7537%" y="693" width="0.0959%" height="15" fill="rgb(249,88,27)" fg:x="109207" fg:w="144"/><text x="73.0037%" y="703.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (144 samples, 0.10%)</title><rect x="72.7537%" y="677" width="0.0959%" height="15" fill="rgb(235,145,16)" fg:x="109207" fg:w="144"/><text x="73.0037%" y="687.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (288 samples, 0.19%)</title><rect x="72.8497%" y="709" width="0.1919%" height="15" fill="rgb(237,114,19)" fg:x="109351" fg:w="288"/><text x="73.0997%" y="719.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (288 samples, 0.19%)</title><rect x="72.8497%" y="693" width="0.1919%" height="15" fill="rgb(238,51,50)" fg:x="109351" fg:w="288"/><text x="73.0997%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get_mut (1,057 samples, 0.70%)</title><rect x="72.4386%" y="757" width="0.7042%" height="15" fill="rgb(205,194,25)" fg:x="108734" fg:w="1057"/><text x="72.6886%" y="767.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (1,057 samples, 0.70%)</title><rect x="72.4386%" y="741" width="0.7042%" height="15" fill="rgb(215,203,17)" fg:x="108734" fg:w="1057"/><text x="72.6886%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (1,057 samples, 0.70%)</title><rect x="72.4386%" y="725" width="0.7042%" height="15" fill="rgb(233,112,49)" fg:x="108734" fg:w="1057"/><text x="72.6886%" y="735.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty (152 samples, 0.10%)</title><rect x="73.0415%" y="709" width="0.1013%" height="15" fill="rgb(241,130,26)" fg:x="109639" fg:w="152"/><text x="73.2915%" y="719.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (152 samples, 0.10%)</title><rect x="73.0415%" y="693" width="0.1013%" height="15" fill="rgb(252,223,19)" fg:x="109639" fg:w="152"/><text x="73.2915%" y="703.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (152 samples, 0.10%)</title><rect x="73.0415%" y="677" width="0.1013%" height="15" fill="rgb(211,95,25)" fg:x="109639" fg:w="152"/><text x="73.2915%" y="687.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::write (449 samples, 0.30%)</title><rect x="73.2214%" y="741" width="0.2991%" height="15" fill="rgb(251,182,27)" fg:x="109909" fg:w="449"/><text x="73.4714%" y="751.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (449 samples, 0.30%)</title><rect x="73.2214%" y="725" width="0.2991%" height="15" fill="rgb(238,24,4)" fg:x="109909" fg:w="449"/><text x="73.4714%" y="735.50"></text></g><g><title>core::ptr::write (449 samples, 0.30%)</title><rect x="73.2214%" y="709" width="0.2991%" height="15" fill="rgb(224,220,25)" fg:x="109909" fg:w="449"/><text x="73.4714%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::bucket (31 samples, 0.02%)</title><rect x="73.5205%" y="741" width="0.0207%" height="15" fill="rgb(239,133,26)" fg:x="110358" fg:w="31"/><text x="73.7705%" y="751.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::from_base_index (31 samples, 0.02%)</title><rect x="73.5205%" y="725" width="0.0207%" height="15" fill="rgb(211,94,48)" fg:x="110358" fg:w="31"/><text x="73.7705%" y="735.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (31 samples, 0.02%)</title><rect x="73.5205%" y="709" width="0.0207%" height="15" fill="rgb(239,87,6)" fg:x="110358" fg:w="31"/><text x="73.7705%" y="719.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (31 samples, 0.02%)</title><rect x="73.5205%" y="693" width="0.0207%" height="15" fill="rgb(227,62,0)" fg:x="110358" fg:w="31"/><text x="73.7705%" y="703.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (31 samples, 0.02%)</title><rect x="73.5205%" y="677" width="0.0207%" height="15" fill="rgb(211,226,4)" fg:x="110358" fg:w="31"/><text x="73.7705%" y="687.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (92 samples, 0.06%)</title><rect x="73.8816%" y="725" width="0.0613%" height="15" fill="rgb(253,38,52)" fg:x="110900" fg:w="92"/><text x="74.1316%" y="735.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (37 samples, 0.02%)</title><rect x="73.9429%" y="725" width="0.0246%" height="15" fill="rgb(229,126,40)" fg:x="110992" fg:w="37"/><text x="74.1929%" y="735.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (37 samples, 0.02%)</title><rect x="73.9429%" y="709" width="0.0246%" height="15" fill="rgb(229,165,44)" fg:x="110992" fg:w="37"/><text x="74.1929%" y="719.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (37 samples, 0.02%)</title><rect x="73.9429%" y="693" width="0.0246%" height="15" fill="rgb(247,95,47)" fg:x="110992" fg:w="37"/><text x="74.1929%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_insert_slot (664 samples, 0.44%)</title><rect x="73.5412%" y="741" width="0.4424%" height="15" fill="rgb(216,140,30)" fg:x="110389" fg:w="664"/><text x="73.7912%" y="751.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (24 samples, 0.02%)</title><rect x="73.9676%" y="725" width="0.0160%" height="15" fill="rgb(246,214,8)" fg:x="111029" fg:w="24"/><text x="74.2176%" y="735.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (24 samples, 0.02%)</title><rect x="73.9676%" y="709" width="0.0160%" height="15" fill="rgb(227,224,15)" fg:x="111029" fg:w="24"/><text x="74.2176%" y="719.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::insert_nocheck (7,405 samples, 4.93%)</title><rect x="69.2116%" y="885" width="4.9332%" height="15" fill="rgb(233,175,4)" fg:x="103890" fg:w="7405"/><text x="69.4616%" y="895.50">abi_st..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_nocheck_elem (7,405 samples, 4.93%)</title><rect x="69.2116%" y="869" width="4.9332%" height="15" fill="rgb(221,66,45)" fg:x="103890" fg:w="7405"/><text x="69.4616%" y="879.50">abi_st..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (7,405 samples, 4.93%)</title><rect x="69.2116%" y="853" width="4.9332%" height="15" fill="rgb(221,178,18)" fg:x="103890" fg:w="7405"/><text x="69.4616%" y="863.50">abi_st..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (6,544 samples, 4.36%)</title><rect x="69.7852%" y="837" width="4.3596%" height="15" fill="rgb(213,81,29)" fg:x="104751" fg:w="6544"/><text x="70.0352%" y="847.50">abi_s..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (6,544 samples, 4.36%)</title><rect x="69.7852%" y="821" width="4.3596%" height="15" fill="rgb(220,89,49)" fg:x="104751" fg:w="6544"/><text x="70.0352%" y="831.50">abi_s..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem::{{closure}} (6,250 samples, 4.16%)</title><rect x="69.9810%" y="805" width="4.1638%" height="15" fill="rgb(227,60,33)" fg:x="105045" fg:w="6250"/><text x="70.2310%" y="815.50">abi_s..</text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::insert (5,103 samples, 3.40%)</title><rect x="70.7451%" y="789" width="3.3996%" height="15" fill="rgb(205,113,12)" fg:x="106192" fg:w="5103"/><text x="70.9951%" y="799.50">hal..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4,204 samples, 2.80%)</title><rect x="71.3441%" y="773" width="2.8007%" height="15" fill="rgb(211,32,1)" fg:x="107091" fg:w="4204"/><text x="71.5941%" y="783.50">ha..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (1,504 samples, 1.00%)</title><rect x="73.1428%" y="757" width="1.0020%" height="15" fill="rgb(246,2,12)" fg:x="109791" fg:w="1504"/><text x="73.3928%" y="767.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::record_item_insert_at (242 samples, 0.16%)</title><rect x="73.9835%" y="741" width="0.1612%" height="15" fill="rgb(243,37,27)" fg:x="111053" fg:w="242"/><text x="74.2335%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl_h2 (101 samples, 0.07%)</title><rect x="74.0775%" y="725" width="0.0673%" height="15" fill="rgb(248,211,31)" fg:x="111194" fg:w="101"/><text x="74.3275%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl (101 samples, 0.07%)</title><rect x="74.0775%" y="709" width="0.0673%" height="15" fill="rgb(242,146,47)" fg:x="111194" fg:w="101"/><text x="74.3275%" y="719.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (29 samples, 0.02%)</title><rect x="74.1634%" y="661" width="0.0193%" height="15" fill="rgb(206,70,20)" fg:x="111323" fg:w="29"/><text x="74.4134%" y="671.50"></text></g><g><title>core::intrinsics::write_bytes (29 samples, 0.02%)</title><rect x="74.1634%" y="645" width="0.0193%" height="15" fill="rgb(215,10,51)" fg:x="111323" fg:w="29"/><text x="74.4134%" y="655.50"></text></g><g><title>[libc-2.31.so] (16 samples, 0.01%)</title><rect x="74.1721%" y="629" width="0.0107%" height="15" fill="rgb(243,178,53)" fg:x="111336" fg:w="16"/><text x="74.4221%" y="639.50"></text></g><g><title>hashbrown::raw::inner::TableLayout::calculate_layout_for (17 samples, 0.01%)</title><rect x="74.1847%" y="645" width="0.0113%" height="15" fill="rgb(233,221,20)" fg:x="111355" fg:w="17"/><text x="74.4347%" y="655.50"></text></g><g><title>snmalloc::Buddy&lt;snmalloc::BuddyChunkRep&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt; &gt;, 14ul, 21ul&gt;::add_block (17 samples, 0.01%)</title><rect x="75.1541%" y="501" width="0.0113%" height="15" fill="rgb(218,95,35)" fg:x="112810" fg:w="17"/><text x="75.4041%" y="511.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (1,192 samples, 0.79%)</title><rect x="74.3779%" y="549" width="0.7941%" height="15" fill="rgb(229,13,5)" fg:x="111645" fg:w="1192"/><text x="74.6279%" y="559.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (36 samples, 0.02%)</title><rect x="75.1481%" y="533" width="0.0240%" height="15" fill="rgb(252,164,30)" fg:x="112801" fg:w="36"/><text x="75.3981%" y="543.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_slabs&lt;false&gt; (28 samples, 0.02%)</title><rect x="75.1534%" y="517" width="0.0187%" height="15" fill="rgb(232,68,36)" fg:x="112809" fg:w="28"/><text x="75.4034%" y="527.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (44 samples, 0.03%)</title><rect x="75.1720%" y="549" width="0.0293%" height="15" fill="rgb(219,59,54)" fg:x="112837" fg:w="44"/><text x="75.4220%" y="559.50"></text></g><g><title>snmalloc::Buddy&lt;snmalloc::BuddyChunkRep&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt; &gt;, 14ul, 21ul&gt;::add_block (19 samples, 0.01%)</title><rect x="75.2140%" y="517" width="0.0127%" height="15" fill="rgb(250,92,33)" fg:x="112900" fg:w="19"/><text x="75.4640%" y="527.50"></text></g><g><title>snmalloc::RBTree&lt;snmalloc::BuddyChunkRep&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt; &gt;, false, false&gt;::remove_min (95 samples, 0.06%)</title><rect x="75.2267%" y="517" width="0.0633%" height="15" fill="rgb(229,162,54)" fg:x="112919" fg:w="95"/><text x="75.4767%" y="527.50"></text></g><g><title>snmalloc::RBTree&lt;snmalloc::BuddyChunkRep&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt; &gt;, false, false&gt;::remove_path (41 samples, 0.03%)</title><rect x="75.2626%" y="501" width="0.0273%" height="15" fill="rgb(244,114,52)" fg:x="112973" fg:w="41"/><text x="75.5126%" y="511.50"></text></g><g><title>snmalloc::BackendAllocator&lt;snmalloc::PALLinux, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::StandardLocalState&lt;snmalloc::PALLinux, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt;, 14ul&gt; &gt;::alloc_chunk (217 samples, 0.14%)</title><rect x="75.2127%" y="533" width="0.1446%" height="15" fill="rgb(212,211,43)" fg:x="112898" fg:w="217"/><text x="75.4627%" y="543.50"></text></g><g><title>snmalloc::SmallBuddyRange::Type&lt;snmalloc::LargeBuddyRange&lt;21ul, 21ul, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, 12ul&gt;::Type&lt;snmalloc::StatsRange::Type&lt;snmalloc::CommitRange&lt;snmalloc::PALLinux&gt;::Type&lt;snmalloc::GlobalRange::Type&lt;snmalloc::LogRange&lt;2ul&gt;::Type&lt;snmalloc::LargeBuddyRange&lt;24ul, 63ul, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, 14ul&gt;::Type&lt;snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::alloc_range (101 samples, 0.07%)</title><rect x="75.2900%" y="517" width="0.0673%" height="15" fill="rgb(226,147,8)" fg:x="113014" fg:w="101"/><text x="75.5400%" y="527.50"></text></g><g><title>snmalloc::RBTree&lt;snmalloc::BuddyInplaceRep&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt; &gt;, false, false&gt;::remove_min (82 samples, 0.05%)</title><rect x="75.3026%" y="501" width="0.0546%" height="15" fill="rgb(226,23,13)" fg:x="113033" fg:w="82"/><text x="75.5526%" y="511.50"></text></g><g><title>snmalloc::RBTree&lt;snmalloc::BuddyInplaceRep&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt; &gt;, false, false&gt;::remove_path (23 samples, 0.02%)</title><rect x="75.3419%" y="485" width="0.0153%" height="15" fill="rgb(240,63,4)" fg:x="113092" fg:w="23"/><text x="75.5919%" y="495.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (1,744 samples, 1.16%)</title><rect x="74.1961%" y="645" width="1.1619%" height="15" fill="rgb(221,1,32)" fg:x="111372" fg:w="1744"/><text x="74.4461%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (1,744 samples, 1.16%)</title><rect x="74.1961%" y="629" width="1.1619%" height="15" fill="rgb(242,117,10)" fg:x="111372" fg:w="1744"/><text x="74.4461%" y="639.50"></text></g><g><title>alloc::alloc::alloc (1,744 samples, 1.16%)</title><rect x="74.1961%" y="613" width="1.1619%" height="15" fill="rgb(249,172,44)" fg:x="111372" fg:w="1744"/><text x="74.4461%" y="623.50"></text></g><g><title>__rg_alloc (1,744 samples, 1.16%)</title><rect x="74.1961%" y="597" width="1.1619%" height="15" fill="rgb(244,46,45)" fg:x="111372" fg:w="1744"/><text x="74.4461%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1,744 samples, 1.16%)</title><rect x="74.1961%" y="581" width="1.1619%" height="15" fill="rgb(206,43,17)" fg:x="111372" fg:w="1744"/><text x="74.4461%" y="591.50"></text></g><g><title>sn_rust_alloc (1,739 samples, 1.16%)</title><rect x="74.1994%" y="565" width="1.1585%" height="15" fill="rgb(239,218,39)" fg:x="111377" fg:w="1739"/><text x="74.4494%" y="575.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (235 samples, 0.16%)</title><rect x="75.2014%" y="549" width="0.1566%" height="15" fill="rgb(208,169,54)" fg:x="112881" fg:w="235"/><text x="75.4514%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (1,772 samples, 1.18%)</title><rect x="74.1827%" y="661" width="1.1805%" height="15" fill="rgb(247,25,42)" fg:x="111352" fg:w="1772"/><text x="74.4327%" y="671.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (1,867 samples, 1.24%)</title><rect x="74.1448%" y="885" width="1.2438%" height="15" fill="rgb(226,23,31)" fg:x="111295" fg:w="1867"/><text x="74.3948%" y="895.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (1,862 samples, 1.24%)</title><rect x="74.1481%" y="869" width="1.2405%" height="15" fill="rgb(247,16,28)" fg:x="111300" fg:w="1862"/><text x="74.3981%" y="879.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (1,862 samples, 1.24%)</title><rect x="74.1481%" y="853" width="1.2405%" height="15" fill="rgb(231,147,38)" fg:x="111300" fg:w="1862"/><text x="74.3981%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (1,862 samples, 1.24%)</title><rect x="74.1481%" y="837" width="1.2405%" height="15" fill="rgb(253,81,48)" fg:x="111300" fg:w="1862"/><text x="74.3981%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (1,862 samples, 1.24%)</title><rect x="74.1481%" y="821" width="1.2405%" height="15" fill="rgb(249,222,43)" fg:x="111300" fg:w="1862"/><text x="74.3981%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (1,862 samples, 1.24%)</title><rect x="74.1481%" y="805" width="1.2405%" height="15" fill="rgb(221,3,27)" fg:x="111300" fg:w="1862"/><text x="74.3981%" y="815.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (1,862 samples, 1.24%)</title><rect x="74.1481%" y="789" width="1.2405%" height="15" fill="rgb(228,180,5)" fg:x="111300" fg:w="1862"/><text x="74.3981%" y="799.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (1,862 samples, 1.24%)</title><rect x="74.1481%" y="773" width="1.2405%" height="15" fill="rgb(227,131,42)" fg:x="111300" fg:w="1862"/><text x="74.3981%" y="783.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (1,862 samples, 1.24%)</title><rect x="74.1481%" y="757" width="1.2405%" height="15" fill="rgb(212,3,39)" fg:x="111300" fg:w="1862"/><text x="74.3981%" y="767.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (1,862 samples, 1.24%)</title><rect x="74.1481%" y="741" width="1.2405%" height="15" fill="rgb(226,45,5)" fg:x="111300" fg:w="1862"/><text x="74.3981%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (1,862 samples, 1.24%)</title><rect x="74.1481%" y="725" width="1.2405%" height="15" fill="rgb(215,167,45)" fg:x="111300" fg:w="1862"/><text x="74.3981%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (1,862 samples, 1.24%)</title><rect x="74.1481%" y="709" width="1.2405%" height="15" fill="rgb(250,218,53)" fg:x="111300" fg:w="1862"/><text x="74.3981%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (1,862 samples, 1.24%)</title><rect x="74.1481%" y="693" width="1.2405%" height="15" fill="rgb(207,140,0)" fg:x="111300" fg:w="1862"/><text x="74.3981%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (1,862 samples, 1.24%)</title><rect x="74.1481%" y="677" width="1.2405%" height="15" fill="rgb(238,133,51)" fg:x="111300" fg:w="1862"/><text x="74.3981%" y="687.50"></text></g><g><title>hashbrown::raw::inner::capacity_to_buckets (38 samples, 0.03%)</title><rect x="75.3632%" y="661" width="0.0253%" height="15" fill="rgb(218,203,53)" fg:x="113124" fg:w="38"/><text x="75.6132%" y="671.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (333 samples, 0.22%)</title><rect x="75.5278%" y="677" width="0.2218%" height="15" fill="rgb(226,184,25)" fg:x="113371" fg:w="333"/><text x="75.7778%" y="687.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (29 samples, 0.02%)</title><rect x="75.7496%" y="677" width="0.0193%" height="15" fill="rgb(231,121,21)" fg:x="113704" fg:w="29"/><text x="75.9996%" y="687.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::with_capacity (600 samples, 0.40%)</title><rect x="75.3886%" y="853" width="0.3997%" height="15" fill="rgb(251,14,34)" fg:x="113162" fg:w="600"/><text x="75.6386%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (600 samples, 0.40%)</title><rect x="75.3886%" y="837" width="0.3997%" height="15" fill="rgb(249,193,11)" fg:x="113162" fg:w="600"/><text x="75.6386%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (600 samples, 0.40%)</title><rect x="75.3886%" y="821" width="0.3997%" height="15" fill="rgb(220,172,37)" fg:x="113162" fg:w="600"/><text x="75.6386%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (600 samples, 0.40%)</title><rect x="75.3886%" y="805" width="0.3997%" height="15" fill="rgb(231,229,43)" fg:x="113162" fg:w="600"/><text x="75.6386%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (600 samples, 0.40%)</title><rect x="75.3886%" y="789" width="0.3997%" height="15" fill="rgb(250,161,5)" fg:x="113162" fg:w="600"/><text x="75.6386%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (600 samples, 0.40%)</title><rect x="75.3886%" y="773" width="0.3997%" height="15" fill="rgb(218,225,18)" fg:x="113162" fg:w="600"/><text x="75.6386%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (600 samples, 0.40%)</title><rect x="75.3886%" y="757" width="0.3997%" height="15" fill="rgb(245,45,42)" fg:x="113162" fg:w="600"/><text x="75.6386%" y="767.50"></text></g><g><title>alloc::alloc::alloc (600 samples, 0.40%)</title><rect x="75.3886%" y="741" width="0.3997%" height="15" fill="rgb(211,115,1)" fg:x="113162" fg:w="600"/><text x="75.6386%" y="751.50"></text></g><g><title>__rg_alloc (600 samples, 0.40%)</title><rect x="75.3886%" y="725" width="0.3997%" height="15" fill="rgb(248,133,52)" fg:x="113162" fg:w="600"/><text x="75.6386%" y="735.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (600 samples, 0.40%)</title><rect x="75.3886%" y="709" width="0.3997%" height="15" fill="rgb(238,100,21)" fg:x="113162" fg:w="600"/><text x="75.6386%" y="719.50"></text></g><g><title>sn_rust_alloc (600 samples, 0.40%)</title><rect x="75.3886%" y="693" width="0.3997%" height="15" fill="rgb(247,144,11)" fg:x="113162" fg:w="600"/><text x="75.6386%" y="703.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (29 samples, 0.02%)</title><rect x="75.7690%" y="677" width="0.0193%" height="15" fill="rgb(206,164,16)" fg:x="113733" fg:w="29"/><text x="76.0190%" y="687.50"></text></g><g><title>snmalloc::BackendAllocator&lt;snmalloc::PALLinux, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::StandardLocalState&lt;snmalloc::PALLinux, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt;, 14ul&gt; &gt;::alloc_chunk (22 samples, 0.01%)</title><rect x="75.7736%" y="661" width="0.0147%" height="15" fill="rgb(222,34,3)" fg:x="113740" fg:w="22"/><text x="76.0236%" y="671.50"></text></g><g><title>simd_json::Deserializer::next_ (239 samples, 0.16%)</title><rect x="75.8196%" y="837" width="0.1592%" height="15" fill="rgb(248,82,4)" fg:x="113809" fg:w="239"/><text x="76.0696%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (61 samples, 0.04%)</title><rect x="75.9382%" y="821" width="0.0406%" height="15" fill="rgb(228,81,46)" fg:x="113987" fg:w="61"/><text x="76.1882%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (61 samples, 0.04%)</title><rect x="75.9382%" y="805" width="0.0406%" height="15" fill="rgb(227,67,47)" fg:x="113987" fg:w="61"/><text x="76.1882%" y="815.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::decode (19,511 samples, 13.00%)</title><rect x="63.0152%" y="949" width="12.9982%" height="15" fill="rgb(215,93,53)" fg:x="94589" fg:w="19511"/><text x="63.2652%" y="959.50">&lt;tremor_runtime::cod..</text></g><g><title>tremor_value::value::parse_to_value_with_buffers (19,511 samples, 13.00%)</title><rect x="63.0152%" y="933" width="12.9982%" height="15" fill="rgb(248,194,39)" fg:x="94589" fg:w="19511"/><text x="63.2652%" y="943.50">tremor_value::value:..</text></g><g><title>tremor_value::value::ValueDeserializer::parse (10,210 samples, 6.80%)</title><rect x="69.2116%" y="917" width="6.8019%" height="15" fill="rgb(215,5,19)" fg:x="103890" fg:w="10210"/><text x="69.4616%" y="927.50">tremor_va..</text></g><g><title>tremor_value::value::ValueDeserializer::parse_map (10,210 samples, 6.80%)</title><rect x="69.2116%" y="901" width="6.8019%" height="15" fill="rgb(226,215,51)" fg:x="103890" fg:w="10210"/><text x="69.4616%" y="911.50">tremor_va..</text></g><g><title>tremor_value::value::ValueDeserializer::parse (938 samples, 0.62%)</title><rect x="75.3886%" y="885" width="0.6249%" height="15" fill="rgb(225,56,26)" fg:x="113162" fg:w="938"/><text x="75.6386%" y="895.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse_array (938 samples, 0.62%)</title><rect x="75.3886%" y="869" width="0.6249%" height="15" fill="rgb(222,75,29)" fg:x="113162" fg:w="938"/><text x="75.6386%" y="879.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (338 samples, 0.23%)</title><rect x="75.7883%" y="853" width="0.2252%" height="15" fill="rgb(236,139,6)" fg:x="113762" fg:w="338"/><text x="76.0383%" y="863.50"></text></g><g><title>tremor_value::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for tremor_value::value::Value&gt;::from (52 samples, 0.03%)</title><rect x="75.9788%" y="837" width="0.0346%" height="15" fill="rgb(223,137,36)" fg:x="114048" fg:w="52"/><text x="76.2288%" y="847.50"></text></g><g><title>tremor_value::value::Value::String (52 samples, 0.03%)</title><rect x="75.9788%" y="821" width="0.0346%" height="15" fill="rgb(226,99,2)" fg:x="114048" fg:w="52"/><text x="76.2288%" y="831.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (19,543 samples, 13.02%)</title><rect x="62.9979%" y="1045" width="13.0196%" height="15" fill="rgb(206,133,23)" fg:x="94563" fg:w="19543"/><text x="63.2479%" y="1055.50">tremor_runtime::conn..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (19,536 samples, 13.01%)</title><rect x="63.0026%" y="1029" width="13.0149%" height="15" fill="rgb(243,173,15)" fg:x="94570" fg:w="19536"/><text x="63.2526%" y="1039.50">&lt;core::future::from_..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (19,536 samples, 13.01%)</title><rect x="63.0026%" y="1013" width="13.0149%" height="15" fill="rgb(228,69,28)" fg:x="94570" fg:w="19536"/><text x="63.2526%" y="1023.50">tremor_runtime::conn..</text></g><g><title>tremor_runtime::connectors::source::build_events (19,536 samples, 13.01%)</title><rect x="63.0026%" y="997" width="13.0149%" height="15" fill="rgb(212,51,22)" fg:x="94570" fg:w="19536"/><text x="63.2526%" y="1007.50">tremor_runtime::conn..</text></g><g><title>tremor_script::srs::EventPayload::try_new (19,519 samples, 13.00%)</title><rect x="63.0139%" y="981" width="13.0036%" height="15" fill="rgb(227,113,0)" fg:x="94587" fg:w="19519"/><text x="63.2639%" y="991.50">tremor_script::srs::..</text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (19,517 samples, 13.00%)</title><rect x="63.0152%" y="965" width="13.0022%" height="15" fill="rgb(252,84,27)" fg:x="94589" fg:w="19517"/><text x="63.2652%" y="975.50">tremor_runtime::conn..</text></g><g><title>tremor_runtime::connectors::source::build_events (19 samples, 0.01%)</title><rect x="76.0241%" y="1045" width="0.0127%" height="15" fill="rgb(223,145,39)" fg:x="114116" fg:w="19"/><text x="76.2741%" y="1055.50"></text></g><g><title>tremor_script::srs::EventPayload::try_new (17 samples, 0.01%)</title><rect x="76.0254%" y="1029" width="0.0113%" height="15" fill="rgb(239,219,30)" fg:x="114118" fg:w="17"/><text x="76.2754%" y="1039.50"></text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (17 samples, 0.01%)</title><rect x="76.0254%" y="1013" width="0.0113%" height="15" fill="rgb(224,196,39)" fg:x="114118" fg:w="17"/><text x="76.2754%" y="1023.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::decode (17 samples, 0.01%)</title><rect x="76.0254%" y="997" width="0.0113%" height="15" fill="rgb(205,35,43)" fg:x="114118" fg:w="17"/><text x="76.2754%" y="1007.50"></text></g><g><title>tremor_value::value::parse_to_value_with_buffers (17 samples, 0.01%)</title><rect x="76.0254%" y="981" width="0.0113%" height="15" fill="rgb(228,201,21)" fg:x="114118" fg:w="17"/><text x="76.2754%" y="991.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (18 samples, 0.01%)</title><rect x="76.1907%" y="901" width="0.0120%" height="15" fill="rgb(237,118,16)" fg:x="114366" fg:w="18"/><text x="76.4407%" y="911.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (17 samples, 0.01%)</title><rect x="76.1913%" y="885" width="0.0113%" height="15" fill="rgb(241,17,19)" fg:x="114367" fg:w="17"/><text x="76.4413%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (17 samples, 0.01%)</title><rect x="76.1913%" y="869" width="0.0113%" height="15" fill="rgb(214,10,25)" fg:x="114367" fg:w="17"/><text x="76.4413%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_add (17 samples, 0.01%)</title><rect x="76.1913%" y="853" width="0.0113%" height="15" fill="rgb(238,37,29)" fg:x="114367" fg:w="17"/><text x="76.4413%" y="863.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (179 samples, 0.12%)</title><rect x="76.2373%" y="885" width="0.1192%" height="15" fill="rgb(253,83,25)" fg:x="114436" fg:w="179"/><text x="76.4873%" y="895.50"></text></g><g><title>core::mem::replace (179 samples, 0.12%)</title><rect x="76.2373%" y="869" width="0.1192%" height="15" fill="rgb(234,192,12)" fg:x="114436" fg:w="179"/><text x="76.4873%" y="879.50"></text></g><g><title>core::ptr::read (179 samples, 0.12%)</title><rect x="76.2373%" y="853" width="0.1192%" height="15" fill="rgb(241,216,45)" fg:x="114436" fg:w="179"/><text x="76.4873%" y="863.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (267 samples, 0.18%)</title><rect x="76.2093%" y="901" width="0.1779%" height="15" fill="rgb(242,22,33)" fg:x="114394" fg:w="267"/><text x="76.4593%" y="911.50"></text></g><g><title>core::mem::drop (46 samples, 0.03%)</title><rect x="76.3566%" y="885" width="0.0306%" height="15" fill="rgb(231,105,49)" fg:x="114615" fg:w="46"/><text x="76.6066%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (46 samples, 0.03%)</title><rect x="76.3566%" y="869" width="0.0306%" height="15" fill="rgb(218,204,15)" fg:x="114615" fg:w="46"/><text x="76.6066%" y="879.50"></text></g><g><title>core::mem::drop (40 samples, 0.03%)</title><rect x="76.3872%" y="901" width="0.0266%" height="15" fill="rgb(235,138,41)" fg:x="114661" fg:w="40"/><text x="76.6372%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (40 samples, 0.03%)</title><rect x="76.3872%" y="885" width="0.0266%" height="15" fill="rgb(246,0,9)" fg:x="114661" fg:w="40"/><text x="76.6372%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (39 samples, 0.03%)</title><rect x="76.3879%" y="869" width="0.0260%" height="15" fill="rgb(210,74,4)" fg:x="114662" fg:w="39"/><text x="76.6379%" y="879.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (39 samples, 0.03%)</title><rect x="76.3879%" y="853" width="0.0260%" height="15" fill="rgb(250,60,41)" fg:x="114662" fg:w="39"/><text x="76.6379%" y="863.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (37 samples, 0.02%)</title><rect x="76.3892%" y="837" width="0.0246%" height="15" fill="rgb(220,115,12)" fg:x="114664" fg:w="37"/><text x="76.6392%" y="847.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (36 samples, 0.02%)</title><rect x="76.3899%" y="821" width="0.0240%" height="15" fill="rgb(237,100,13)" fg:x="114665" fg:w="36"/><text x="76.6399%" y="831.50"></text></g><g><title>__GI___pthread_mutex_unlock (36 samples, 0.02%)</title><rect x="76.3899%" y="805" width="0.0240%" height="15" fill="rgb(213,55,26)" fg:x="114665" fg:w="36"/><text x="76.6399%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (316 samples, 0.21%)</title><rect x="76.4138%" y="901" width="0.2105%" height="15" fill="rgb(216,17,4)" fg:x="114701" fg:w="316"/><text x="76.6638%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (301 samples, 0.20%)</title><rect x="76.4238%" y="885" width="0.2005%" height="15" fill="rgb(220,153,47)" fg:x="114716" fg:w="301"/><text x="76.6738%" y="895.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (301 samples, 0.20%)</title><rect x="76.4238%" y="869" width="0.2005%" height="15" fill="rgb(215,131,9)" fg:x="114716" fg:w="301"/><text x="76.6738%" y="879.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (286 samples, 0.19%)</title><rect x="76.4338%" y="853" width="0.1905%" height="15" fill="rgb(233,46,42)" fg:x="114731" fg:w="286"/><text x="76.6838%" y="863.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (286 samples, 0.19%)</title><rect x="76.4338%" y="837" width="0.1905%" height="15" fill="rgb(226,86,7)" fg:x="114731" fg:w="286"/><text x="76.6838%" y="847.50"></text></g><g><title>__GI___pthread_mutex_unlock (277 samples, 0.18%)</title><rect x="76.4398%" y="821" width="0.1845%" height="15" fill="rgb(239,226,21)" fg:x="114740" fg:w="277"/><text x="76.6898%" y="831.50"></text></g><g><title>core::task::wake::Waker::will_wake (21 samples, 0.01%)</title><rect x="76.6250%" y="901" width="0.0140%" height="15" fill="rgb(244,137,22)" fg:x="115018" fg:w="21"/><text x="76.8750%" y="911.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (21 samples, 0.01%)</title><rect x="76.6250%" y="885" width="0.0140%" height="15" fill="rgb(211,139,35)" fg:x="115018" fg:w="21"/><text x="76.8750%" y="895.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (19 samples, 0.01%)</title><rect x="76.6483%" y="869" width="0.0127%" height="15" fill="rgb(214,62,50)" fg:x="115053" fg:w="19"/><text x="76.8983%" y="879.50"></text></g><g><title>std::sync::poison::Flag::borrow (19 samples, 0.01%)</title><rect x="76.6483%" y="853" width="0.0127%" height="15" fill="rgb(212,113,44)" fg:x="115053" fg:w="19"/><text x="76.8983%" y="863.50"></text></g><g><title>event_listener::Inner::lock (512 samples, 0.34%)</title><rect x="76.6390%" y="901" width="0.3411%" height="15" fill="rgb(226,150,43)" fg:x="115039" fg:w="512"/><text x="76.8890%" y="911.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (498 samples, 0.33%)</title><rect x="76.6483%" y="885" width="0.3318%" height="15" fill="rgb(250,71,37)" fg:x="115053" fg:w="498"/><text x="76.8983%" y="895.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (479 samples, 0.32%)</title><rect x="76.6610%" y="869" width="0.3191%" height="15" fill="rgb(219,76,19)" fg:x="115072" fg:w="479"/><text x="76.9110%" y="879.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (466 samples, 0.31%)</title><rect x="76.6697%" y="853" width="0.3104%" height="15" fill="rgb(250,39,11)" fg:x="115085" fg:w="466"/><text x="76.9197%" y="863.50"></text></g><g><title>__GI___pthread_mutex_lock (466 samples, 0.31%)</title><rect x="76.6697%" y="837" width="0.3104%" height="15" fill="rgb(230,64,31)" fg:x="115085" fg:w="466"/><text x="76.9197%" y="847.50"></text></g><g><title>__lll_lock_wait (24 samples, 0.02%)</title><rect x="76.9641%" y="821" width="0.0160%" height="15" fill="rgb(208,222,23)" fg:x="115527" fg:w="24"/><text x="77.2141%" y="831.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (1,322 samples, 0.88%)</title><rect x="76.1394%" y="917" width="0.8807%" height="15" fill="rgb(227,125,18)" fg:x="114289" fg:w="1322"/><text x="76.3894%" y="927.50"></text></g><g><title>event_listener::List::remove (60 samples, 0.04%)</title><rect x="76.9801%" y="901" width="0.0400%" height="15" fill="rgb(234,210,9)" fg:x="115551" fg:w="60"/><text x="77.2301%" y="911.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (37 samples, 0.02%)</title><rect x="76.9954%" y="885" width="0.0246%" height="15" fill="rgb(217,127,24)" fg:x="115574" fg:w="37"/><text x="77.2454%" y="895.50"></text></g><g><title>core::mem::replace (37 samples, 0.02%)</title><rect x="76.9954%" y="869" width="0.0246%" height="15" fill="rgb(239,141,48)" fg:x="115574" fg:w="37"/><text x="77.2454%" y="879.50"></text></g><g><title>core::ptr::read (37 samples, 0.02%)</title><rect x="76.9954%" y="853" width="0.0246%" height="15" fill="rgb(227,109,8)" fg:x="115574" fg:w="37"/><text x="77.2454%" y="863.50"></text></g><g><title>concurrent_queue::full_fence (61 samples, 0.04%)</title><rect x="77.1107%" y="869" width="0.0406%" height="15" fill="rgb(235,184,23)" fg:x="115747" fg:w="61"/><text x="77.3607%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (59 samples, 0.04%)</title><rect x="77.1120%" y="853" width="0.0393%" height="15" fill="rgb(227,226,48)" fg:x="115749" fg:w="59"/><text x="77.3620%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (59 samples, 0.04%)</title><rect x="77.1120%" y="837" width="0.0393%" height="15" fill="rgb(206,150,11)" fg:x="115749" fg:w="59"/><text x="77.3620%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (59 samples, 0.04%)</title><rect x="77.1120%" y="821" width="0.0393%" height="15" fill="rgb(254,2,33)" fg:x="115749" fg:w="59"/><text x="77.3620%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (142 samples, 0.09%)</title><rect x="77.1527%" y="869" width="0.0946%" height="15" fill="rgb(243,160,20)" fg:x="115810" fg:w="142"/><text x="77.4027%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (142 samples, 0.09%)</title><rect x="77.1527%" y="853" width="0.0946%" height="15" fill="rgb(218,208,30)" fg:x="115810" fg:w="142"/><text x="77.4027%" y="863.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (514 samples, 0.34%)</title><rect x="77.0407%" y="901" width="0.3424%" height="15" fill="rgb(224,120,49)" fg:x="115642" fg:w="514"/><text x="77.2907%" y="911.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (491 samples, 0.33%)</title><rect x="77.0561%" y="885" width="0.3271%" height="15" fill="rgb(246,12,2)" fg:x="115665" fg:w="491"/><text x="77.3061%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (204 samples, 0.14%)</title><rect x="77.2473%" y="869" width="0.1359%" height="15" fill="rgb(236,117,3)" fg:x="115952" fg:w="204"/><text x="77.4973%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_load (204 samples, 0.14%)</title><rect x="77.2473%" y="853" width="0.1359%" height="15" fill="rgb(216,128,52)" fg:x="115952" fg:w="204"/><text x="77.4973%" y="863.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (16 samples, 0.01%)</title><rect x="77.4125%" y="757" width="0.0107%" height="15" fill="rgb(246,145,19)" fg:x="116200" fg:w="16"/><text x="77.6625%" y="767.50"></text></g><g><title>core::task::wake::Waker::wake (20 samples, 0.01%)</title><rect x="77.4118%" y="789" width="0.0133%" height="15" fill="rgb(222,11,46)" fg:x="116199" fg:w="20"/><text x="77.6618%" y="799.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (19 samples, 0.01%)</title><rect x="77.4125%" y="773" width="0.0127%" height="15" fill="rgb(245,82,36)" fg:x="116200" fg:w="19"/><text x="77.6625%" y="783.50"></text></g><g><title>async_executor::State::notify (41 samples, 0.03%)</title><rect x="77.4038%" y="805" width="0.0273%" height="15" fill="rgb(250,73,51)" fg:x="116187" fg:w="41"/><text x="77.6538%" y="815.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (49 samples, 0.03%)</title><rect x="77.4038%" y="821" width="0.0326%" height="15" fill="rgb(221,189,23)" fg:x="116187" fg:w="49"/><text x="77.6538%" y="831.50"></text></g><g><title>event_listener::List::notify (68 samples, 0.05%)</title><rect x="77.4018%" y="885" width="0.0453%" height="15" fill="rgb(210,33,7)" fg:x="116184" fg:w="68"/><text x="77.6518%" y="895.50"></text></g><g><title>core::task::wake::Waker::wake (68 samples, 0.05%)</title><rect x="77.4018%" y="869" width="0.0453%" height="15" fill="rgb(210,107,22)" fg:x="116184" fg:w="68"/><text x="77.6518%" y="879.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (68 samples, 0.05%)</title><rect x="77.4018%" y="853" width="0.0453%" height="15" fill="rgb(222,116,37)" fg:x="116184" fg:w="68"/><text x="77.6518%" y="863.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (65 samples, 0.04%)</title><rect x="77.4038%" y="837" width="0.0433%" height="15" fill="rgb(254,17,48)" fg:x="116187" fg:w="65"/><text x="77.6538%" y="847.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (1,169 samples, 0.78%)</title><rect x="77.0201%" y="917" width="0.7788%" height="15" fill="rgb(224,36,32)" fg:x="115611" fg:w="1169"/><text x="77.2701%" y="927.50"></text></g><g><title>event_listener::Event::notify (624 samples, 0.42%)</title><rect x="77.3832%" y="901" width="0.4157%" height="15" fill="rgb(232,90,46)" fg:x="116156" fg:w="624"/><text x="77.6332%" y="911.50"></text></g><g><title>event_listener::full_fence (528 samples, 0.35%)</title><rect x="77.4471%" y="885" width="0.3518%" height="15" fill="rgb(241,66,40)" fg:x="116252" fg:w="528"/><text x="77.6971%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (528 samples, 0.35%)</title><rect x="77.4471%" y="869" width="0.3518%" height="15" fill="rgb(249,184,29)" fg:x="116252" fg:w="528"/><text x="77.6971%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (528 samples, 0.35%)</title><rect x="77.4471%" y="853" width="0.3518%" height="15" fill="rgb(231,181,1)" fg:x="116252" fg:w="528"/><text x="77.6971%" y="863.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (29 samples, 0.02%)</title><rect x="77.8102%" y="885" width="0.0193%" height="15" fill="rgb(224,94,2)" fg:x="116797" fg:w="29"/><text x="78.0602%" y="895.50"></text></g><g><title>event_listener::Inner::lock (21 samples, 0.01%)</title><rect x="77.8155%" y="869" width="0.0140%" height="15" fill="rgb(229,170,15)" fg:x="116805" fg:w="21"/><text x="78.0655%" y="879.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (21 samples, 0.01%)</title><rect x="77.8155%" y="853" width="0.0140%" height="15" fill="rgb(240,127,35)" fg:x="116805" fg:w="21"/><text x="78.0655%" y="863.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (21 samples, 0.01%)</title><rect x="77.8155%" y="837" width="0.0140%" height="15" fill="rgb(248,196,34)" fg:x="116805" fg:w="21"/><text x="78.0655%" y="847.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (20 samples, 0.01%)</title><rect x="77.8162%" y="821" width="0.0133%" height="15" fill="rgb(236,137,7)" fg:x="116806" fg:w="20"/><text x="78.0662%" y="831.50"></text></g><g><title>__GI___pthread_mutex_lock (20 samples, 0.01%)</title><rect x="77.8162%" y="805" width="0.0133%" height="15" fill="rgb(235,127,16)" fg:x="116806" fg:w="20"/><text x="78.0662%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (92 samples, 0.06%)</title><rect x="77.8035%" y="917" width="0.0613%" height="15" fill="rgb(250,192,54)" fg:x="116787" fg:w="92"/><text x="78.0535%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (82 samples, 0.05%)</title><rect x="77.8102%" y="901" width="0.0546%" height="15" fill="rgb(218,98,20)" fg:x="116797" fg:w="82"/><text x="78.0602%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (53 samples, 0.04%)</title><rect x="77.8295%" y="885" width="0.0353%" height="15" fill="rgb(230,176,47)" fg:x="116826" fg:w="53"/><text x="78.0795%" y="895.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (53 samples, 0.04%)</title><rect x="77.8295%" y="869" width="0.0353%" height="15" fill="rgb(244,2,33)" fg:x="116826" fg:w="53"/><text x="78.0795%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (51 samples, 0.03%)</title><rect x="77.8309%" y="853" width="0.0340%" height="15" fill="rgb(231,100,17)" fg:x="116828" fg:w="51"/><text x="78.0809%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_sub (51 samples, 0.03%)</title><rect x="77.8309%" y="837" width="0.0340%" height="15" fill="rgb(245,23,12)" fg:x="116828" fg:w="51"/><text x="78.0809%" y="847.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (38 samples, 0.03%)</title><rect x="77.8682%" y="901" width="0.0253%" height="15" fill="rgb(249,55,22)" fg:x="116884" fg:w="38"/><text x="78.1182%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (38 samples, 0.03%)</title><rect x="77.8682%" y="885" width="0.0253%" height="15" fill="rgb(207,134,9)" fg:x="116884" fg:w="38"/><text x="78.1182%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_add (38 samples, 0.03%)</title><rect x="77.8682%" y="869" width="0.0253%" height="15" fill="rgb(218,134,0)" fg:x="116884" fg:w="38"/><text x="78.1182%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (31 samples, 0.02%)</title><rect x="77.8935%" y="901" width="0.0207%" height="15" fill="rgb(213,212,33)" fg:x="116922" fg:w="31"/><text x="78.1435%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (31 samples, 0.02%)</title><rect x="77.8935%" y="885" width="0.0207%" height="15" fill="rgb(252,106,18)" fg:x="116922" fg:w="31"/><text x="78.1435%" y="895.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.02%)</title><rect x="77.8935%" y="869" width="0.0207%" height="15" fill="rgb(208,126,42)" fg:x="116922" fg:w="31"/><text x="78.1435%" y="879.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (30 samples, 0.02%)</title><rect x="77.8941%" y="853" width="0.0200%" height="15" fill="rgb(246,175,29)" fg:x="116923" fg:w="30"/><text x="78.1441%" y="863.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (30 samples, 0.02%)</title><rect x="77.8941%" y="837" width="0.0200%" height="15" fill="rgb(215,13,50)" fg:x="116923" fg:w="30"/><text x="78.1441%" y="847.50"></text></g><g><title>__GI___pthread_mutex_unlock (27 samples, 0.02%)</title><rect x="77.8961%" y="821" width="0.0180%" height="15" fill="rgb(216,172,15)" fg:x="116926" fg:w="27"/><text x="78.1461%" y="831.50"></text></g><g><title>event_listener::Inner::lock (42 samples, 0.03%)</title><rect x="77.9155%" y="901" width="0.0280%" height="15" fill="rgb(212,103,13)" fg:x="116955" fg:w="42"/><text x="78.1655%" y="911.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (42 samples, 0.03%)</title><rect x="77.9155%" y="885" width="0.0280%" height="15" fill="rgb(231,171,36)" fg:x="116955" fg:w="42"/><text x="78.1655%" y="895.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (41 samples, 0.03%)</title><rect x="77.9161%" y="869" width="0.0273%" height="15" fill="rgb(250,123,20)" fg:x="116956" fg:w="41"/><text x="78.1661%" y="879.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (41 samples, 0.03%)</title><rect x="77.9161%" y="853" width="0.0273%" height="15" fill="rgb(212,53,50)" fg:x="116956" fg:w="41"/><text x="78.1661%" y="863.50"></text></g><g><title>__GI___pthread_mutex_lock (41 samples, 0.03%)</title><rect x="77.9161%" y="837" width="0.0273%" height="15" fill="rgb(243,54,12)" fg:x="116956" fg:w="41"/><text x="78.1661%" y="847.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (2,784 samples, 1.85%)</title><rect x="76.1101%" y="933" width="1.8547%" height="15" fill="rgb(234,101,34)" fg:x="114245" fg:w="2784"/><text x="76.3601%" y="943.50">&lt;..</text></g><g><title>event_listener::Event::listen (150 samples, 0.10%)</title><rect x="77.8648%" y="917" width="0.0999%" height="15" fill="rgb(254,67,22)" fg:x="116879" fg:w="150"/><text x="78.1148%" y="927.50"></text></g><g><title>event_listener::full_fence (26 samples, 0.02%)</title><rect x="77.9474%" y="901" width="0.0173%" height="15" fill="rgb(250,35,47)" fg:x="117003" fg:w="26"/><text x="78.1974%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (23 samples, 0.02%)</title><rect x="77.9494%" y="885" width="0.0153%" height="15" fill="rgb(226,126,38)" fg:x="117006" fg:w="23"/><text x="78.1994%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (23 samples, 0.02%)</title><rect x="77.9494%" y="869" width="0.0153%" height="15" fill="rgb(216,138,53)" fg:x="117006" fg:w="23"/><text x="78.1994%" y="879.50"></text></g><g><title>[libc-2.31.so] (139 samples, 0.09%)</title><rect x="77.9694%" y="917" width="0.0926%" height="15" fill="rgb(246,199,43)" fg:x="117036" fg:w="139"/><text x="78.2194%" y="927.50"></text></g><g><title>[libc-2.31.so] (680 samples, 0.45%)</title><rect x="78.0654%" y="885" width="0.4530%" height="15" fill="rgb(232,125,11)" fg:x="117180" fg:w="680"/><text x="78.3154%" y="895.50"></text></g><g><title>sn_rust_dealloc (86 samples, 0.06%)</title><rect x="78.5217%" y="805" width="0.0573%" height="15" fill="rgb(218,219,45)" fg:x="117865" fg:w="86"/><text x="78.7717%" y="815.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (4,006 samples, 2.67%)</title><rect x="76.0801%" y="965" width="2.6688%" height="15" fill="rgb(216,102,54)" fg:x="114200" fg:w="4006"/><text x="76.3301%" y="975.50">&lt;a..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (3,995 samples, 2.66%)</title><rect x="76.0874%" y="949" width="2.6615%" height="15" fill="rgb(250,228,7)" fg:x="114211" fg:w="3995"/><text x="76.3374%" y="959.50">&lt;a..</text></g><g><title>core::option::Option&lt;T&gt;::map (1,177 samples, 0.78%)</title><rect x="77.9648%" y="933" width="0.7841%" height="15" fill="rgb(226,125,25)" fg:x="117029" fg:w="1177"/><text x="78.2148%" y="943.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,031 samples, 0.69%)</title><rect x="78.0620%" y="917" width="0.6869%" height="15" fill="rgb(224,165,27)" fg:x="117175" fg:w="1031"/><text x="78.3120%" y="927.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}}::{{closure}} (1,031 samples, 0.69%)</title><rect x="78.0620%" y="901" width="0.6869%" height="15" fill="rgb(233,86,3)" fg:x="117175" fg:w="1031"/><text x="78.3120%" y="911.50"></text></g><g><title>alloc::alloc::box_free (346 samples, 0.23%)</title><rect x="78.5184%" y="885" width="0.2305%" height="15" fill="rgb(228,116,20)" fg:x="117860" fg:w="346"/><text x="78.7684%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (346 samples, 0.23%)</title><rect x="78.5184%" y="869" width="0.2305%" height="15" fill="rgb(209,192,17)" fg:x="117860" fg:w="346"/><text x="78.7684%" y="879.50"></text></g><g><title>alloc::alloc::dealloc (346 samples, 0.23%)</title><rect x="78.5184%" y="853" width="0.2305%" height="15" fill="rgb(224,88,34)" fg:x="117860" fg:w="346"/><text x="78.7684%" y="863.50"></text></g><g><title>__rg_dealloc (346 samples, 0.23%)</title><rect x="78.5184%" y="837" width="0.2305%" height="15" fill="rgb(233,38,6)" fg:x="117860" fg:w="346"/><text x="78.7684%" y="847.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (346 samples, 0.23%)</title><rect x="78.5184%" y="821" width="0.2305%" height="15" fill="rgb(212,59,30)" fg:x="117860" fg:w="346"/><text x="78.7684%" y="831.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (249 samples, 0.17%)</title><rect x="78.5830%" y="805" width="0.1659%" height="15" fill="rgb(213,80,3)" fg:x="117957" fg:w="249"/><text x="78.8330%" y="815.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,773 samples, 3.18%)</title><rect x="76.0481%" y="1029" width="3.1798%" height="15" fill="rgb(251,178,7)" fg:x="114152" fg:w="4773"/><text x="76.2981%" y="1039.50">&lt;as..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (4,758 samples, 3.17%)</title><rect x="76.0581%" y="1013" width="3.1698%" height="15" fill="rgb(213,154,26)" fg:x="114167" fg:w="4758"/><text x="76.3081%" y="1023.50">&lt;tr..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (4,758 samples, 3.17%)</title><rect x="76.0581%" y="997" width="3.1698%" height="15" fill="rgb(238,165,49)" fg:x="114167" fg:w="4758"/><text x="76.3081%" y="1007.50">&lt;as..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (4,758 samples, 3.17%)</title><rect x="76.0581%" y="981" width="3.1698%" height="15" fill="rgb(248,91,46)" fg:x="114167" fg:w="4758"/><text x="76.3081%" y="991.50">&lt;tr..</text></g><g><title>[libc-2.31.so] (719 samples, 0.48%)</title><rect x="78.7489%" y="965" width="0.4790%" height="15" fill="rgb(244,21,52)" fg:x="118206" fg:w="719"/><text x="78.9989%" y="975.50"></text></g><g><title>[libc-2.31.so] (93 samples, 0.06%)</title><rect x="79.2319%" y="981" width="0.0620%" height="15" fill="rgb(247,122,20)" fg:x="118931" fg:w="93"/><text x="79.4819%" y="991.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (26 samples, 0.02%)</title><rect x="79.4084%" y="933" width="0.0173%" height="15" fill="rgb(218,27,9)" fg:x="119196" fg:w="26"/><text x="79.6584%" y="943.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (25 samples, 0.02%)</title><rect x="79.4091%" y="917" width="0.0167%" height="15" fill="rgb(246,7,6)" fg:x="119197" fg:w="25"/><text x="79.6591%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (25 samples, 0.02%)</title><rect x="79.4091%" y="901" width="0.0167%" height="15" fill="rgb(227,135,54)" fg:x="119197" fg:w="25"/><text x="79.6591%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_add (25 samples, 0.02%)</title><rect x="79.4091%" y="885" width="0.0167%" height="15" fill="rgb(247,14,11)" fg:x="119197" fg:w="25"/><text x="79.6591%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (38 samples, 0.03%)</title><rect x="79.4317%" y="933" width="0.0253%" height="15" fill="rgb(206,149,34)" fg:x="119231" fg:w="38"/><text x="79.6817%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (35 samples, 0.02%)</title><rect x="79.4337%" y="917" width="0.0233%" height="15" fill="rgb(227,228,4)" fg:x="119234" fg:w="35"/><text x="79.6837%" y="927.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.02%)</title><rect x="79.4337%" y="901" width="0.0233%" height="15" fill="rgb(238,218,28)" fg:x="119234" fg:w="35"/><text x="79.6837%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (33 samples, 0.02%)</title><rect x="79.4351%" y="885" width="0.0220%" height="15" fill="rgb(252,86,40)" fg:x="119236" fg:w="33"/><text x="79.6851%" y="895.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (33 samples, 0.02%)</title><rect x="79.4351%" y="869" width="0.0220%" height="15" fill="rgb(251,225,11)" fg:x="119236" fg:w="33"/><text x="79.6851%" y="879.50"></text></g><g><title>__GI___pthread_mutex_unlock (32 samples, 0.02%)</title><rect x="79.4357%" y="853" width="0.0213%" height="15" fill="rgb(206,46,49)" fg:x="119237" fg:w="32"/><text x="79.6857%" y="863.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (129 samples, 0.09%)</title><rect x="79.4064%" y="949" width="0.0859%" height="15" fill="rgb(245,128,24)" fg:x="119193" fg:w="129"/><text x="79.6564%" y="959.50"></text></g><g><title>event_listener::Inner::lock (53 samples, 0.04%)</title><rect x="79.4570%" y="933" width="0.0353%" height="15" fill="rgb(219,177,34)" fg:x="119269" fg:w="53"/><text x="79.7070%" y="943.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (45 samples, 0.03%)</title><rect x="79.4624%" y="917" width="0.0300%" height="15" fill="rgb(218,60,48)" fg:x="119277" fg:w="45"/><text x="79.7124%" y="927.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (43 samples, 0.03%)</title><rect x="79.4637%" y="901" width="0.0286%" height="15" fill="rgb(221,11,5)" fg:x="119279" fg:w="43"/><text x="79.7137%" y="911.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (43 samples, 0.03%)</title><rect x="79.4637%" y="885" width="0.0286%" height="15" fill="rgb(220,148,13)" fg:x="119279" fg:w="43"/><text x="79.7137%" y="895.50"></text></g><g><title>__GI___pthread_mutex_lock (43 samples, 0.03%)</title><rect x="79.4637%" y="869" width="0.0286%" height="15" fill="rgb(210,16,3)" fg:x="119279" fg:w="43"/><text x="79.7137%" y="879.50"></text></g><g><title>[libc-2.31.so] (51 samples, 0.03%)</title><rect x="79.4924%" y="949" width="0.0340%" height="15" fill="rgb(236,80,2)" fg:x="119322" fg:w="51"/><text x="79.7424%" y="959.50"></text></g><g><title>[libc-2.31.so] (73 samples, 0.05%)</title><rect x="79.5370%" y="933" width="0.0486%" height="15" fill="rgb(239,129,19)" fg:x="119389" fg:w="73"/><text x="79.7870%" y="943.50"></text></g><g><title>[libc-2.31.so] (496 samples, 0.33%)</title><rect x="79.6163%" y="917" width="0.3304%" height="15" fill="rgb(220,106,35)" fg:x="119508" fg:w="496"/><text x="79.8663%" y="927.50"></text></g><g><title>[libc-2.31.so] (31 samples, 0.02%)</title><rect x="80.0060%" y="901" width="0.0207%" height="15" fill="rgb(252,139,45)" fg:x="120093" fg:w="31"/><text x="80.2560%" y="911.50"></text></g><g><title>concurrent_queue::full_fence (53 samples, 0.04%)</title><rect x="80.0266%" y="901" width="0.0353%" height="15" fill="rgb(229,8,36)" fg:x="120124" fg:w="53"/><text x="80.2766%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (48 samples, 0.03%)</title><rect x="80.0300%" y="885" width="0.0320%" height="15" fill="rgb(230,126,33)" fg:x="120129" fg:w="48"/><text x="80.2800%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (48 samples, 0.03%)</title><rect x="80.0300%" y="869" width="0.0320%" height="15" fill="rgb(239,140,21)" fg:x="120129" fg:w="48"/><text x="80.2800%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (48 samples, 0.03%)</title><rect x="80.0300%" y="853" width="0.0320%" height="15" fill="rgb(254,104,9)" fg:x="120129" fg:w="48"/><text x="80.2800%" y="863.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (19 samples, 0.01%)</title><rect x="80.0620%" y="901" width="0.0127%" height="15" fill="rgb(239,52,14)" fg:x="120177" fg:w="19"/><text x="80.3120%" y="911.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (155 samples, 0.10%)</title><rect x="80.0746%" y="901" width="0.1033%" height="15" fill="rgb(208,227,44)" fg:x="120196" fg:w="155"/><text x="80.3246%" y="911.50"></text></g><g><title>core::ptr::write (155 samples, 0.10%)</title><rect x="80.0746%" y="885" width="0.1033%" height="15" fill="rgb(246,18,19)" fg:x="120196" fg:w="155"/><text x="80.3246%" y="895.50"></text></g><g><title>[libc-2.31.so] (144 samples, 0.10%)</title><rect x="80.0819%" y="869" width="0.0959%" height="15" fill="rgb(235,228,25)" fg:x="120207" fg:w="144"/><text x="80.3319%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (168 samples, 0.11%)</title><rect x="80.1779%" y="901" width="0.1119%" height="15" fill="rgb(240,156,20)" fg:x="120351" fg:w="168"/><text x="80.4279%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (168 samples, 0.11%)</title><rect x="80.1779%" y="885" width="0.1119%" height="15" fill="rgb(224,8,20)" fg:x="120351" fg:w="168"/><text x="80.4279%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (294 samples, 0.20%)</title><rect x="80.2898%" y="901" width="0.1959%" height="15" fill="rgb(214,12,52)" fg:x="120519" fg:w="294"/><text x="80.5398%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_load (292 samples, 0.19%)</title><rect x="80.2911%" y="885" width="0.1945%" height="15" fill="rgb(211,220,47)" fg:x="120521" fg:w="292"/><text x="80.5411%" y="895.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (1,358 samples, 0.90%)</title><rect x="79.5856%" y="933" width="0.9047%" height="15" fill="rgb(250,173,5)" fg:x="119462" fg:w="1358"/><text x="79.8356%" y="943.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (816 samples, 0.54%)</title><rect x="79.9467%" y="917" width="0.5436%" height="15" fill="rgb(250,125,52)" fg:x="120004" fg:w="816"/><text x="80.1967%" y="927.50"></text></g><g><title>event_listener::Inner::lock (26 samples, 0.02%)</title><rect x="80.5110%" y="917" width="0.0173%" height="15" fill="rgb(209,133,18)" fg:x="120851" fg:w="26"/><text x="80.7610%" y="927.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (26 samples, 0.02%)</title><rect x="80.5110%" y="901" width="0.0173%" height="15" fill="rgb(216,173,22)" fg:x="120851" fg:w="26"/><text x="80.7610%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (26 samples, 0.02%)</title><rect x="80.5110%" y="885" width="0.0173%" height="15" fill="rgb(205,3,22)" fg:x="120851" fg:w="26"/><text x="80.7610%" y="895.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (25 samples, 0.02%)</title><rect x="80.5116%" y="869" width="0.0167%" height="15" fill="rgb(248,22,20)" fg:x="120852" fg:w="25"/><text x="80.7616%" y="879.50"></text></g><g><title>__GI___pthread_mutex_lock (25 samples, 0.02%)</title><rect x="80.5116%" y="853" width="0.0167%" height="15" fill="rgb(233,6,29)" fg:x="120852" fg:w="25"/><text x="80.7616%" y="863.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (35 samples, 0.02%)</title><rect x="80.5436%" y="789" width="0.0233%" height="15" fill="rgb(240,22,54)" fg:x="120900" fg:w="35"/><text x="80.7936%" y="799.50"></text></g><g><title>parking::Unparker::unpark (33 samples, 0.02%)</title><rect x="80.5450%" y="773" width="0.0220%" height="15" fill="rgb(231,133,32)" fg:x="120902" fg:w="33"/><text x="80.7950%" y="783.50"></text></g><g><title>parking::Inner::unpark (32 samples, 0.02%)</title><rect x="80.5456%" y="757" width="0.0213%" height="15" fill="rgb(248,193,4)" fg:x="120903" fg:w="32"/><text x="80.7956%" y="767.50"></text></g><g><title>core::task::wake::Waker::wake (39 samples, 0.03%)</title><rect x="80.5436%" y="821" width="0.0260%" height="15" fill="rgb(211,178,46)" fg:x="120900" fg:w="39"/><text x="80.7936%" y="831.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (39 samples, 0.03%)</title><rect x="80.5436%" y="805" width="0.0260%" height="15" fill="rgb(224,5,42)" fg:x="120900" fg:w="39"/><text x="80.7936%" y="815.50"></text></g><g><title>async_executor::State::notify (83 samples, 0.06%)</title><rect x="80.5296%" y="837" width="0.0553%" height="15" fill="rgb(239,176,25)" fg:x="120879" fg:w="83"/><text x="80.7796%" y="847.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (23 samples, 0.02%)</title><rect x="80.5696%" y="821" width="0.0153%" height="15" fill="rgb(245,187,50)" fg:x="120939" fg:w="23"/><text x="80.8196%" y="831.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (23 samples, 0.02%)</title><rect x="80.5696%" y="805" width="0.0153%" height="15" fill="rgb(248,24,15)" fg:x="120939" fg:w="23"/><text x="80.8196%" y="815.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (106 samples, 0.07%)</title><rect x="80.5296%" y="853" width="0.0706%" height="15" fill="rgb(205,166,13)" fg:x="120879" fg:w="106"/><text x="80.7796%" y="863.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (23 samples, 0.02%)</title><rect x="80.5849%" y="837" width="0.0153%" height="15" fill="rgb(208,114,23)" fg:x="120962" fg:w="23"/><text x="80.8349%" y="847.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (22 samples, 0.01%)</title><rect x="80.5856%" y="821" width="0.0147%" height="15" fill="rgb(239,127,18)" fg:x="120963" fg:w="22"/><text x="80.8356%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (31 samples, 0.02%)</title><rect x="80.6002%" y="853" width="0.0207%" height="15" fill="rgb(219,154,28)" fg:x="120985" fg:w="31"/><text x="80.8502%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (31 samples, 0.02%)</title><rect x="80.6002%" y="837" width="0.0207%" height="15" fill="rgb(225,157,23)" fg:x="120985" fg:w="31"/><text x="80.8502%" y="847.50"></text></g><g><title>event_listener::List::notify (141 samples, 0.09%)</title><rect x="80.5283%" y="917" width="0.0939%" height="15" fill="rgb(219,8,6)" fg:x="120877" fg:w="141"/><text x="80.7783%" y="927.50"></text></g><g><title>core::task::wake::Waker::wake (141 samples, 0.09%)</title><rect x="80.5283%" y="901" width="0.0939%" height="15" fill="rgb(212,47,6)" fg:x="120877" fg:w="141"/><text x="80.7783%" y="911.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (141 samples, 0.09%)</title><rect x="80.5283%" y="885" width="0.0939%" height="15" fill="rgb(224,190,4)" fg:x="120877" fg:w="141"/><text x="80.7783%" y="895.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (139 samples, 0.09%)</title><rect x="80.5296%" y="869" width="0.0926%" height="15" fill="rgb(239,183,29)" fg:x="120879" fg:w="139"/><text x="80.7796%" y="879.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (2,680 samples, 1.79%)</title><rect x="79.5263%" y="949" width="1.7854%" height="15" fill="rgb(213,57,7)" fg:x="119373" fg:w="2680"/><text x="79.7763%" y="959.50">a..</text></g><g><title>event_listener::Event::notify (1,233 samples, 0.82%)</title><rect x="80.4903%" y="933" width="0.8214%" height="15" fill="rgb(216,148,1)" fg:x="120820" fg:w="1233"/><text x="80.7403%" y="943.50"></text></g><g><title>event_listener::full_fence (1,035 samples, 0.69%)</title><rect x="80.6222%" y="917" width="0.6895%" height="15" fill="rgb(236,182,29)" fg:x="121018" fg:w="1035"/><text x="80.8722%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1,027 samples, 0.68%)</title><rect x="80.6276%" y="901" width="0.6842%" height="15" fill="rgb(244,120,48)" fg:x="121026" fg:w="1027"/><text x="80.8776%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1,027 samples, 0.68%)</title><rect x="80.6276%" y="885" width="0.6842%" height="15" fill="rgb(206,71,34)" fg:x="121026" fg:w="1027"/><text x="80.8776%" y="895.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (63 samples, 0.04%)</title><rect x="81.3291%" y="933" width="0.0420%" height="15" fill="rgb(242,32,6)" fg:x="122079" fg:w="63"/><text x="81.5791%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (63 samples, 0.04%)</title><rect x="81.3291%" y="917" width="0.0420%" height="15" fill="rgb(241,35,3)" fg:x="122079" fg:w="63"/><text x="81.5791%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_add (63 samples, 0.04%)</title><rect x="81.3291%" y="901" width="0.0420%" height="15" fill="rgb(222,62,19)" fg:x="122079" fg:w="63"/><text x="81.5791%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (35 samples, 0.02%)</title><rect x="81.3710%" y="933" width="0.0233%" height="15" fill="rgb(223,110,41)" fg:x="122142" fg:w="35"/><text x="81.6210%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (35 samples, 0.02%)</title><rect x="81.3710%" y="917" width="0.0233%" height="15" fill="rgb(208,224,4)" fg:x="122142" fg:w="35"/><text x="81.6210%" y="927.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.02%)</title><rect x="81.3710%" y="901" width="0.0233%" height="15" fill="rgb(241,137,19)" fg:x="122142" fg:w="35"/><text x="81.6210%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (31 samples, 0.02%)</title><rect x="81.3737%" y="885" width="0.0207%" height="15" fill="rgb(244,24,17)" fg:x="122146" fg:w="31"/><text x="81.6237%" y="895.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (30 samples, 0.02%)</title><rect x="81.3744%" y="869" width="0.0200%" height="15" fill="rgb(245,178,49)" fg:x="122147" fg:w="30"/><text x="81.6244%" y="879.50"></text></g><g><title>__GI___pthread_mutex_unlock (30 samples, 0.02%)</title><rect x="81.3744%" y="853" width="0.0200%" height="15" fill="rgb(219,160,38)" fg:x="122147" fg:w="30"/><text x="81.6244%" y="863.50"></text></g><g><title>event_listener::Inner::lock (29 samples, 0.02%)</title><rect x="81.3964%" y="933" width="0.0193%" height="15" fill="rgb(228,137,14)" fg:x="122180" fg:w="29"/><text x="81.6464%" y="943.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (27 samples, 0.02%)</title><rect x="81.3977%" y="917" width="0.0180%" height="15" fill="rgb(237,134,11)" fg:x="122182" fg:w="27"/><text x="81.6477%" y="927.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (27 samples, 0.02%)</title><rect x="81.3977%" y="901" width="0.0180%" height="15" fill="rgb(211,126,44)" fg:x="122182" fg:w="27"/><text x="81.6477%" y="911.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (27 samples, 0.02%)</title><rect x="81.3977%" y="885" width="0.0180%" height="15" fill="rgb(226,171,33)" fg:x="122182" fg:w="27"/><text x="81.6477%" y="895.50"></text></g><g><title>__GI___pthread_mutex_lock (26 samples, 0.02%)</title><rect x="81.3984%" y="869" width="0.0173%" height="15" fill="rgb(253,99,13)" fg:x="122183" fg:w="26"/><text x="81.6484%" y="879.50"></text></g><g><title>event_listener::Event::listen (157 samples, 0.10%)</title><rect x="81.3257%" y="949" width="0.1046%" height="15" fill="rgb(244,48,7)" fg:x="122074" fg:w="157"/><text x="81.5757%" y="959.50"></text></g><g><title>event_listener::full_fence (18 samples, 0.01%)</title><rect x="81.4183%" y="933" width="0.0120%" height="15" fill="rgb(244,217,54)" fg:x="122213" fg:w="18"/><text x="81.6683%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (18 samples, 0.01%)</title><rect x="81.4183%" y="917" width="0.0120%" height="15" fill="rgb(224,15,18)" fg:x="122213" fg:w="18"/><text x="81.6683%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (18 samples, 0.01%)</title><rect x="81.4183%" y="901" width="0.0120%" height="15" fill="rgb(244,99,12)" fg:x="122213" fg:w="18"/><text x="81.6683%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (24 samples, 0.02%)</title><rect x="81.4330%" y="933" width="0.0160%" height="15" fill="rgb(233,226,8)" fg:x="122235" fg:w="24"/><text x="81.6830%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (24 samples, 0.02%)</title><rect x="81.4330%" y="917" width="0.0160%" height="15" fill="rgb(229,211,3)" fg:x="122235" fg:w="24"/><text x="81.6830%" y="927.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.02%)</title><rect x="81.4330%" y="901" width="0.0160%" height="15" fill="rgb(216,140,21)" fg:x="122235" fg:w="24"/><text x="81.6830%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (24 samples, 0.02%)</title><rect x="81.4330%" y="885" width="0.0160%" height="15" fill="rgb(234,122,30)" fg:x="122235" fg:w="24"/><text x="81.6830%" y="895.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (24 samples, 0.02%)</title><rect x="81.4330%" y="869" width="0.0160%" height="15" fill="rgb(236,25,46)" fg:x="122235" fg:w="24"/><text x="81.6830%" y="879.50"></text></g><g><title>__GI___pthread_mutex_unlock (24 samples, 0.02%)</title><rect x="81.4330%" y="853" width="0.0160%" height="15" fill="rgb(217,52,54)" fg:x="122235" fg:w="24"/><text x="81.6830%" y="863.50"></text></g><g><title>event_listener::Inner::lock (80 samples, 0.05%)</title><rect x="81.4550%" y="933" width="0.0533%" height="15" fill="rgb(222,29,26)" fg:x="122268" fg:w="80"/><text x="81.7050%" y="943.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (79 samples, 0.05%)</title><rect x="81.4556%" y="917" width="0.0526%" height="15" fill="rgb(216,177,29)" fg:x="122269" fg:w="79"/><text x="81.7056%" y="927.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (64 samples, 0.04%)</title><rect x="81.4656%" y="901" width="0.0426%" height="15" fill="rgb(247,136,51)" fg:x="122284" fg:w="64"/><text x="81.7156%" y="911.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (64 samples, 0.04%)</title><rect x="81.4656%" y="885" width="0.0426%" height="15" fill="rgb(231,47,47)" fg:x="122284" fg:w="64"/><text x="81.7156%" y="895.50"></text></g><g><title>__GI___pthread_mutex_lock (64 samples, 0.04%)</title><rect x="81.4656%" y="869" width="0.0426%" height="15" fill="rgb(211,192,36)" fg:x="122284" fg:w="64"/><text x="81.7156%" y="879.50"></text></g><g><title>__lll_lock_wait (49 samples, 0.03%)</title><rect x="81.4756%" y="853" width="0.0326%" height="15" fill="rgb(229,156,32)" fg:x="122299" fg:w="49"/><text x="81.7256%" y="863.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (3,385 samples, 2.26%)</title><rect x="79.3571%" y="965" width="2.2551%" height="15" fill="rgb(248,213,20)" fg:x="119119" fg:w="3385"/><text x="79.6071%" y="975.50">&lt;..</text></g><g><title>event_listener::Event::notify (273 samples, 0.18%)</title><rect x="81.4303%" y="949" width="0.1819%" height="15" fill="rgb(217,64,7)" fg:x="122231" fg:w="273"/><text x="81.6803%" y="959.50"></text></g><g><title>event_listener::full_fence (156 samples, 0.10%)</title><rect x="81.5083%" y="933" width="0.1039%" height="15" fill="rgb(232,142,8)" fg:x="122348" fg:w="156"/><text x="81.7583%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (156 samples, 0.10%)</title><rect x="81.5083%" y="917" width="0.1039%" height="15" fill="rgb(224,92,44)" fg:x="122348" fg:w="156"/><text x="81.7583%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (156 samples, 0.10%)</title><rect x="81.5083%" y="901" width="0.1039%" height="15" fill="rgb(214,169,17)" fg:x="122348" fg:w="156"/><text x="81.7583%" y="911.50"></text></g><g><title>[libc-2.31.so] (348 samples, 0.23%)</title><rect x="81.6175%" y="965" width="0.2318%" height="15" fill="rgb(210,59,37)" fg:x="122512" fg:w="348"/><text x="81.8675%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (47 samples, 0.03%)</title><rect x="81.8560%" y="901" width="0.0313%" height="15" fill="rgb(214,116,48)" fg:x="122870" fg:w="47"/><text x="82.1060%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (43 samples, 0.03%)</title><rect x="81.8587%" y="885" width="0.0286%" height="15" fill="rgb(244,191,6)" fg:x="122874" fg:w="43"/><text x="82.1087%" y="895.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (43 samples, 0.03%)</title><rect x="81.8587%" y="869" width="0.0286%" height="15" fill="rgb(241,50,52)" fg:x="122874" fg:w="43"/><text x="82.1087%" y="879.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (39 samples, 0.03%)</title><rect x="81.8614%" y="853" width="0.0260%" height="15" fill="rgb(236,75,39)" fg:x="122878" fg:w="39"/><text x="82.1114%" y="863.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (39 samples, 0.03%)</title><rect x="81.8614%" y="837" width="0.0260%" height="15" fill="rgb(236,99,0)" fg:x="122878" fg:w="39"/><text x="82.1114%" y="847.50"></text></g><g><title>__GI___pthread_mutex_unlock (39 samples, 0.03%)</title><rect x="81.8614%" y="821" width="0.0260%" height="15" fill="rgb(207,202,15)" fg:x="122878" fg:w="39"/><text x="82.1114%" y="831.50"></text></g><g><title>event_listener::Inner::lock (113 samples, 0.08%)</title><rect x="81.8880%" y="901" width="0.0753%" height="15" fill="rgb(233,207,14)" fg:x="122918" fg:w="113"/><text x="82.1380%" y="911.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (109 samples, 0.07%)</title><rect x="81.8907%" y="885" width="0.0726%" height="15" fill="rgb(226,27,51)" fg:x="122922" fg:w="109"/><text x="82.1407%" y="895.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (107 samples, 0.07%)</title><rect x="81.8920%" y="869" width="0.0713%" height="15" fill="rgb(206,104,42)" fg:x="122924" fg:w="107"/><text x="82.1420%" y="879.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (106 samples, 0.07%)</title><rect x="81.8927%" y="853" width="0.0706%" height="15" fill="rgb(212,225,4)" fg:x="122925" fg:w="106"/><text x="82.1427%" y="863.50"></text></g><g><title>__GI___pthread_mutex_lock (106 samples, 0.07%)</title><rect x="81.8927%" y="837" width="0.0706%" height="15" fill="rgb(233,96,42)" fg:x="122925" fg:w="106"/><text x="82.1427%" y="847.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (176 samples, 0.12%)</title><rect x="81.8534%" y="917" width="0.1173%" height="15" fill="rgb(229,21,32)" fg:x="122866" fg:w="176"/><text x="82.1034%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (192 samples, 0.13%)</title><rect x="81.8534%" y="949" width="0.1279%" height="15" fill="rgb(226,216,24)" fg:x="122866" fg:w="192"/><text x="82.1034%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (192 samples, 0.13%)</title><rect x="81.8534%" y="933" width="0.1279%" height="15" fill="rgb(221,163,17)" fg:x="122866" fg:w="192"/><text x="82.1034%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (16 samples, 0.01%)</title><rect x="81.9706%" y="917" width="0.0107%" height="15" fill="rgb(216,216,42)" fg:x="123042" fg:w="16"/><text x="82.2206%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="81.9706%" y="901" width="0.0107%" height="15" fill="rgb(240,118,7)" fg:x="123042" fg:w="16"/><text x="82.2206%" y="911.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,141 samples, 2.76%)</title><rect x="79.2279%" y="997" width="2.7587%" height="15" fill="rgb(221,67,37)" fg:x="118925" fg:w="4141"/><text x="79.4779%" y="1007.50">&lt;c..</text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (4,042 samples, 2.69%)</title><rect x="79.2938%" y="981" width="2.6928%" height="15" fill="rgb(241,32,44)" fg:x="119024" fg:w="4042"/><text x="79.5438%" y="991.50">tr..</text></g><g><title>core::ptr::drop_in_place&lt;async_channel::Send&lt;tremor_runtime::connectors::sink::SinkMsg&gt;&gt; (206 samples, 0.14%)</title><rect x="81.8494%" y="965" width="0.1372%" height="15" fill="rgb(235,204,43)" fg:x="122860" fg:w="206"/><text x="82.0994%" y="975.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (8,930 samples, 5.95%)</title><rect x="76.0468%" y="1045" width="5.9492%" height="15" fill="rgb(213,116,10)" fg:x="114150" fg:w="8930"/><text x="76.2968%" y="1055.50">tremor_r..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,155 samples, 2.77%)</title><rect x="79.2279%" y="1029" width="2.7681%" height="15" fill="rgb(239,15,48)" fg:x="118925" fg:w="4155"/><text x="79.4779%" y="1039.50">&lt;c..</text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (4,155 samples, 2.77%)</title><rect x="79.2279%" y="1013" width="2.7681%" height="15" fill="rgb(207,123,36)" fg:x="118925" fg:w="4155"/><text x="79.4779%" y="1023.50">tr..</text></g><g><title>tremor_runtime::postprocessor::postprocess (22 samples, 0.01%)</title><rect x="81.9959%" y="1045" width="0.0147%" height="15" fill="rgb(209,103,30)" fg:x="123080" fg:w="22"/><text x="82.2459%" y="1055.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (507 samples, 0.34%)</title><rect x="82.0266%" y="1045" width="0.3378%" height="15" fill="rgb(238,100,19)" fg:x="123126" fg:w="507"/><text x="82.2766%" y="1055.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse_array (16 samples, 0.01%)</title><rect x="82.3537%" y="1029" width="0.0107%" height="15" fill="rgb(244,30,14)" fg:x="123617" fg:w="16"/><text x="82.6037%" y="1039.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (40 samples, 0.03%)</title><rect x="82.4943%" y="1013" width="0.0266%" height="15" fill="rgb(249,174,6)" fg:x="123828" fg:w="40"/><text x="82.7443%" y="1023.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_object (114 samples, 0.08%)</title><rect x="82.4876%" y="1029" width="0.0759%" height="15" fill="rgb(235,213,41)" fg:x="123818" fg:w="114"/><text x="82.7376%" y="1039.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_simple_str_content (53 samples, 0.04%)</title><rect x="82.5282%" y="1013" width="0.0353%" height="15" fill="rgb(213,118,6)" fg:x="123879" fg:w="53"/><text x="82.7782%" y="1023.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (53 samples, 0.04%)</title><rect x="82.5282%" y="997" width="0.0353%" height="15" fill="rgb(235,44,51)" fg:x="123879" fg:w="53"/><text x="82.7782%" y="1007.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (53 samples, 0.04%)</title><rect x="82.5282%" y="981" width="0.0353%" height="15" fill="rgb(217,9,53)" fg:x="123879" fg:w="53"/><text x="82.7782%" y="991.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (53 samples, 0.04%)</title><rect x="82.5282%" y="965" width="0.0353%" height="15" fill="rgb(237,172,34)" fg:x="123879" fg:w="53"/><text x="82.7782%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (53 samples, 0.04%)</title><rect x="82.5282%" y="949" width="0.0353%" height="15" fill="rgb(206,206,11)" fg:x="123879" fg:w="53"/><text x="82.7782%" y="959.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (53 samples, 0.04%)</title><rect x="82.5282%" y="933" width="0.0353%" height="15" fill="rgb(214,149,29)" fg:x="123879" fg:w="53"/><text x="82.7782%" y="943.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (53 samples, 0.04%)</title><rect x="82.5282%" y="917" width="0.0353%" height="15" fill="rgb(208,123,3)" fg:x="123879" fg:w="53"/><text x="82.7782%" y="927.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (310 samples, 0.21%)</title><rect x="82.3643%" y="1045" width="0.2065%" height="15" fill="rgb(229,126,4)" fg:x="123633" fg:w="310"/><text x="82.6143%" y="1055.50"></text></g><g><title>value_trait::Builder::object (22 samples, 0.01%)</title><rect x="82.5709%" y="1045" width="0.0147%" height="15" fill="rgb(222,92,36)" fg:x="123943" fg:w="22"/><text x="82.8209%" y="1055.50"></text></g><g><title>[unknown] (117,708 samples, 78.42%)</title><rect x="4.1691%" y="1061" width="78.4171%" height="15" fill="rgb(216,39,41)" fg:x="6258" fg:w="117708"/><text x="4.4191%" y="1071.50">[unknown]</text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (34 samples, 0.02%)</title><rect x="82.6575%" y="1045" width="0.0227%" height="15" fill="rgb(253,127,28)" fg:x="124073" fg:w="34"/><text x="82.9075%" y="1055.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (30 samples, 0.02%)</title><rect x="82.6601%" y="1029" width="0.0200%" height="15" fill="rgb(249,152,51)" fg:x="124077" fg:w="30"/><text x="82.9101%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (30 samples, 0.02%)</title><rect x="82.6601%" y="1013" width="0.0200%" height="15" fill="rgb(209,123,42)" fg:x="124077" fg:w="30"/><text x="82.9101%" y="1023.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (30 samples, 0.02%)</title><rect x="82.6601%" y="997" width="0.0200%" height="15" fill="rgb(241,118,22)" fg:x="124077" fg:w="30"/><text x="82.9101%" y="1007.50"></text></g><g><title>anon.2df61c595d7e03cc178280752e6f613c.34.llvm.3319559067924046615 (35 samples, 0.02%)</title><rect x="82.6575%" y="1061" width="0.0233%" height="15" fill="rgb(208,25,7)" fg:x="124073" fg:w="35"/><text x="82.9075%" y="1071.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="82.7114%" y="1045" width="0.0107%" height="15" fill="rgb(243,144,39)" fg:x="124154" fg:w="16"/><text x="82.9614%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (16 samples, 0.01%)</title><rect x="82.7314%" y="1045" width="0.0107%" height="15" fill="rgb(250,50,5)" fg:x="124184" fg:w="16"/><text x="82.9814%" y="1055.50"></text></g><g><title>anon.8e44a1a3939ac65e12d6f6b11f5adf69.13.llvm.17348626053875357348 (80 samples, 0.05%)</title><rect x="82.6954%" y="1061" width="0.0533%" height="15" fill="rgb(207,67,11)" fg:x="124130" fg:w="80"/><text x="82.9454%" y="1071.50"></text></g><g><title>anon.bad05d1a978d454772d4e6b7cf31350e.43.llvm.1074922121173280541 (43 samples, 0.03%)</title><rect x="82.7634%" y="1061" width="0.0286%" height="15" fill="rgb(245,204,40)" fg:x="124232" fg:w="43"/><text x="83.0134%" y="1071.50"></text></g><g><title>anon.c6676277d9159002154b1ad830e38ffe.16.llvm.16537282876649417011 (35 samples, 0.02%)</title><rect x="82.7920%" y="1061" width="0.0233%" height="15" fill="rgb(238,228,24)" fg:x="124275" fg:w="35"/><text x="83.0420%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (16 samples, 0.01%)</title><rect x="82.8187%" y="1045" width="0.0107%" height="15" fill="rgb(217,116,22)" fg:x="124315" fg:w="16"/><text x="83.0687%" y="1055.50"></text></g><g><title>anon.cf4dd758f2e13be28a7115c3485d0d26.57.llvm.1330737179729929477 (25 samples, 0.02%)</title><rect x="82.8154%" y="1061" width="0.0167%" height="15" fill="rgb(234,98,12)" fg:x="124310" fg:w="25"/><text x="83.0654%" y="1071.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (36 samples, 0.02%)</title><rect x="82.8760%" y="1029" width="0.0240%" height="15" fill="rgb(242,170,50)" fg:x="124401" fg:w="36"/><text x="83.1260%" y="1039.50"></text></g><g><title>async_task::runnable::Runnable::run (35 samples, 0.02%)</title><rect x="82.8767%" y="1013" width="0.0233%" height="15" fill="rgb(235,7,5)" fg:x="124402" fg:w="35"/><text x="83.1267%" y="1023.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (27 samples, 0.02%)</title><rect x="82.9026%" y="1029" width="0.0180%" height="15" fill="rgb(241,114,28)" fg:x="124441" fg:w="27"/><text x="83.1526%" y="1039.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (110 samples, 0.07%)</title><rect x="82.8487%" y="1045" width="0.0733%" height="15" fill="rgb(246,112,42)" fg:x="124360" fg:w="110"/><text x="83.0987%" y="1055.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (39 samples, 0.03%)</title><rect x="82.9719%" y="997" width="0.0260%" height="15" fill="rgb(248,228,14)" fg:x="124545" fg:w="39"/><text x="83.2219%" y="1007.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (112 samples, 0.07%)</title><rect x="82.9306%" y="1045" width="0.0746%" height="15" fill="rgb(208,133,18)" fg:x="124483" fg:w="112"/><text x="83.1806%" y="1055.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (98 samples, 0.07%)</title><rect x="82.9399%" y="1029" width="0.0653%" height="15" fill="rgb(207,35,49)" fg:x="124497" fg:w="98"/><text x="83.1899%" y="1039.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (90 samples, 0.06%)</title><rect x="82.9453%" y="1013" width="0.0600%" height="15" fill="rgb(205,68,36)" fg:x="124505" fg:w="90"/><text x="83.1953%" y="1023.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (36 samples, 0.02%)</title><rect x="83.0365%" y="1045" width="0.0240%" height="15" fill="rgb(245,62,40)" fg:x="124642" fg:w="36"/><text x="83.2865%" y="1055.50"></text></g><g><title>parking::Inner::park (17 samples, 0.01%)</title><rect x="83.0672%" y="1045" width="0.0113%" height="15" fill="rgb(228,27,24)" fg:x="124688" fg:w="17"/><text x="83.3172%" y="1055.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (33 samples, 0.02%)</title><rect x="83.1331%" y="1029" width="0.0220%" height="15" fill="rgb(253,19,12)" fg:x="124787" fg:w="33"/><text x="83.3831%" y="1039.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (26 samples, 0.02%)</title><rect x="83.1378%" y="1013" width="0.0173%" height="15" fill="rgb(232,28,20)" fg:x="124794" fg:w="26"/><text x="83.3878%" y="1023.50"></text></g><g><title>async_io::reactor::Reactor::get::REACTOR (489 samples, 0.33%)</title><rect x="82.8347%" y="1061" width="0.3258%" height="15" fill="rgb(218,35,51)" fg:x="124339" fg:w="489"/><text x="83.0847%" y="1071.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (102 samples, 0.07%)</title><rect x="83.0925%" y="1045" width="0.0680%" height="15" fill="rgb(212,90,40)" fg:x="124726" fg:w="102"/><text x="83.3425%" y="1055.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (24 samples, 0.02%)</title><rect x="83.1731%" y="661" width="0.0160%" height="15" fill="rgb(220,172,12)" fg:x="124847" fg:w="24"/><text x="83.4231%" y="671.50"></text></g><g><title>snmalloc::BackendAllocator&lt;snmalloc::PALLinux, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::StandardLocalState&lt;snmalloc::PALLinux, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt;, 14ul&gt; &gt;::alloc_chunk (19 samples, 0.01%)</title><rect x="83.1764%" y="645" width="0.0127%" height="15" fill="rgb(226,159,20)" fg:x="124852" fg:w="19"/><text x="83.4264%" y="655.50"></text></g><g><title>async_channel::bounded (28 samples, 0.02%)</title><rect x="83.1724%" y="821" width="0.0187%" height="15" fill="rgb(234,205,16)" fg:x="124846" fg:w="28"/><text x="83.4224%" y="831.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (28 samples, 0.02%)</title><rect x="83.1724%" y="805" width="0.0187%" height="15" fill="rgb(207,9,39)" fg:x="124846" fg:w="28"/><text x="83.4224%" y="815.50"></text></g><g><title>alloc::alloc::exchange_malloc (28 samples, 0.02%)</title><rect x="83.1724%" y="789" width="0.0187%" height="15" fill="rgb(249,143,15)" fg:x="124846" fg:w="28"/><text x="83.4224%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (28 samples, 0.02%)</title><rect x="83.1724%" y="773" width="0.0187%" height="15" fill="rgb(253,133,29)" fg:x="124846" fg:w="28"/><text x="83.4224%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (28 samples, 0.02%)</title><rect x="83.1724%" y="757" width="0.0187%" height="15" fill="rgb(221,187,0)" fg:x="124846" fg:w="28"/><text x="83.4224%" y="767.50"></text></g><g><title>alloc::alloc::alloc (28 samples, 0.02%)</title><rect x="83.1724%" y="741" width="0.0187%" height="15" fill="rgb(205,204,26)" fg:x="124846" fg:w="28"/><text x="83.4224%" y="751.50"></text></g><g><title>__rg_alloc (28 samples, 0.02%)</title><rect x="83.1724%" y="725" width="0.0187%" height="15" fill="rgb(224,68,54)" fg:x="124846" fg:w="28"/><text x="83.4224%" y="735.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (28 samples, 0.02%)</title><rect x="83.1724%" y="709" width="0.0187%" height="15" fill="rgb(209,67,4)" fg:x="124846" fg:w="28"/><text x="83.4224%" y="719.50"></text></g><g><title>sn_rust_alloc (28 samples, 0.02%)</title><rect x="83.1724%" y="693" width="0.0187%" height="15" fill="rgb(228,229,18)" fg:x="124846" fg:w="28"/><text x="83.4224%" y="703.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::lazy_init&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long)#2}, unsigned long&gt; (28 samples, 0.02%)</title><rect x="83.1724%" y="677" width="0.0187%" height="15" fill="rgb(231,89,13)" fg:x="124846" fg:w="28"/><text x="83.4224%" y="687.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (60 samples, 0.04%)</title><rect x="83.6568%" y="453" width="0.0400%" height="15" fill="rgb(210,182,18)" fg:x="125573" fg:w="60"/><text x="83.9068%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::nth (20 samples, 0.01%)</title><rect x="83.7700%" y="389" width="0.0133%" height="15" fill="rgb(240,105,2)" fg:x="125743" fg:w="20"/><text x="84.0200%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (61 samples, 0.04%)</title><rect x="83.9059%" y="357" width="0.0406%" height="15" fill="rgb(207,170,50)" fg:x="125947" fg:w="61"/><text x="84.1559%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (61 samples, 0.04%)</title><rect x="83.9059%" y="341" width="0.0406%" height="15" fill="rgb(232,133,24)" fg:x="125947" fg:w="61"/><text x="84.1559%" y="351.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (52 samples, 0.03%)</title><rect x="83.9119%" y="325" width="0.0346%" height="15" fill="rgb(235,166,27)" fg:x="125956" fg:w="52"/><text x="84.1619%" y="335.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (52 samples, 0.03%)</title><rect x="83.9119%" y="309" width="0.0346%" height="15" fill="rgb(209,19,13)" fg:x="125956" fg:w="52"/><text x="84.1619%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (52 samples, 0.03%)</title><rect x="83.9119%" y="293" width="0.0346%" height="15" fill="rgb(226,79,39)" fg:x="125956" fg:w="52"/><text x="84.1619%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (157 samples, 0.10%)</title><rect x="83.9466%" y="357" width="0.1046%" height="15" fill="rgb(222,163,10)" fg:x="126008" fg:w="157"/><text x="84.1966%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (672 samples, 0.45%)</title><rect x="83.6967%" y="405" width="0.4477%" height="15" fill="rgb(214,44,19)" fg:x="125633" fg:w="672"/><text x="83.9467%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (542 samples, 0.36%)</title><rect x="83.7834%" y="389" width="0.3611%" height="15" fill="rgb(210,217,13)" fg:x="125763" fg:w="542"/><text x="84.0334%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (451 samples, 0.30%)</title><rect x="83.8440%" y="373" width="0.3005%" height="15" fill="rgb(237,61,54)" fg:x="125854" fg:w="451"/><text x="84.0940%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (140 samples, 0.09%)</title><rect x="84.0512%" y="357" width="0.0933%" height="15" fill="rgb(226,184,24)" fg:x="126165" fg:w="140"/><text x="84.3012%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (140 samples, 0.09%)</title><rect x="84.0512%" y="341" width="0.0933%" height="15" fill="rgb(223,226,4)" fg:x="126165" fg:w="140"/><text x="84.3012%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (68 samples, 0.05%)</title><rect x="84.0991%" y="325" width="0.0453%" height="15" fill="rgb(210,26,41)" fg:x="126237" fg:w="68"/><text x="84.3491%" y="335.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (68 samples, 0.05%)</title><rect x="84.0991%" y="309" width="0.0453%" height="15" fill="rgb(220,221,6)" fg:x="126237" fg:w="68"/><text x="84.3491%" y="319.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (32 samples, 0.02%)</title><rect x="84.1231%" y="293" width="0.0213%" height="15" fill="rgb(225,89,49)" fg:x="126273" fg:w="32"/><text x="84.3731%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (32 samples, 0.02%)</title><rect x="84.1231%" y="277" width="0.0213%" height="15" fill="rgb(218,70,45)" fg:x="126273" fg:w="32"/><text x="84.3731%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (709 samples, 0.47%)</title><rect x="83.6967%" y="453" width="0.4723%" height="15" fill="rgb(238,166,21)" fg:x="125633" fg:w="709"/><text x="83.9467%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (709 samples, 0.47%)</title><rect x="83.6967%" y="437" width="0.4723%" height="15" fill="rgb(224,141,44)" fg:x="125633" fg:w="709"/><text x="83.9467%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (709 samples, 0.47%)</title><rect x="83.6967%" y="421" width="0.4723%" height="15" fill="rgb(230,12,49)" fg:x="125633" fg:w="709"/><text x="83.9467%" y="431.50"></text></g><g><title>core::ops::control_flow::ControlFlow&lt;R,&lt;R as core::ops::try_trait::Try&gt;::Output&gt;::into_try (37 samples, 0.02%)</title><rect x="84.1444%" y="405" width="0.0246%" height="15" fill="rgb(212,174,12)" fg:x="126305" fg:w="37"/><text x="84.3944%" y="415.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::len (1,720 samples, 1.15%)</title><rect x="84.5915%" y="421" width="1.1459%" height="15" fill="rgb(246,67,9)" fg:x="126976" fg:w="1720"/><text x="84.8415%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1,230 samples, 0.82%)</title><rect x="84.9179%" y="405" width="0.8194%" height="15" fill="rgb(239,35,23)" fg:x="127466" fg:w="1230"/><text x="85.1679%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (1,230 samples, 0.82%)</title><rect x="84.9179%" y="389" width="0.8194%" height="15" fill="rgb(211,167,0)" fg:x="127466" fg:w="1230"/><text x="85.1679%" y="399.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::len (2,217 samples, 1.48%)</title><rect x="84.2777%" y="437" width="1.4770%" height="15" fill="rgb(225,119,45)" fg:x="126505" fg:w="2217"/><text x="84.5277%" y="447.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::len (26 samples, 0.02%)</title><rect x="85.7373%" y="421" width="0.0173%" height="15" fill="rgb(210,162,6)" fg:x="128696" fg:w="26"/><text x="85.9873%" y="431.50"></text></g><g><title>async_executor::steal (2,386 samples, 1.59%)</title><rect x="84.1691%" y="453" width="1.5896%" height="15" fill="rgb(208,118,35)" fg:x="126342" fg:w="2386"/><text x="84.4191%" y="463.50"></text></g><g><title>concurrent_queue::full_fence (2,428 samples, 1.62%)</title><rect x="86.4668%" y="421" width="1.6175%" height="15" fill="rgb(239,4,53)" fg:x="129791" fg:w="2428"/><text x="86.7168%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (2,342 samples, 1.56%)</title><rect x="86.5241%" y="405" width="1.5602%" height="15" fill="rgb(213,130,21)" fg:x="129877" fg:w="2342"/><text x="86.7741%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (2,342 samples, 1.56%)</title><rect x="86.5241%" y="389" width="1.5602%" height="15" fill="rgb(235,148,0)" fg:x="129877" fg:w="2342"/><text x="86.7741%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (2,342 samples, 1.56%)</title><rect x="86.5241%" y="373" width="1.5602%" height="15" fill="rgb(244,224,18)" fg:x="129877" fg:w="2342"/><text x="86.7741%" y="383.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (3,388 samples, 2.26%)</title><rect x="85.9239%" y="437" width="2.2571%" height="15" fill="rgb(211,214,4)" fg:x="128976" fg:w="3388"/><text x="86.1739%" y="447.50">c..</text></g><g><title>core::sync::atomic::AtomicUsize::load (144 samples, 0.10%)</title><rect x="88.0850%" y="421" width="0.0959%" height="15" fill="rgb(206,119,25)" fg:x="132220" fg:w="144"/><text x="88.3350%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (135 samples, 0.09%)</title><rect x="88.0910%" y="405" width="0.0899%" height="15" fill="rgb(243,93,47)" fg:x="132229" fg:w="135"/><text x="88.3410%" y="415.50"></text></g><g><title>concurrent_queue::full_fence (351 samples, 0.23%)</title><rect x="88.2362%" y="421" width="0.2338%" height="15" fill="rgb(224,194,6)" fg:x="132447" fg:w="351"/><text x="88.4862%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (347 samples, 0.23%)</title><rect x="88.2389%" y="405" width="0.2312%" height="15" fill="rgb(243,229,6)" fg:x="132451" fg:w="347"/><text x="88.4889%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (347 samples, 0.23%)</title><rect x="88.2389%" y="389" width="0.2312%" height="15" fill="rgb(207,23,50)" fg:x="132451" fg:w="347"/><text x="88.4889%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (347 samples, 0.23%)</title><rect x="88.2389%" y="373" width="0.2312%" height="15" fill="rgb(253,192,32)" fg:x="132451" fg:w="347"/><text x="88.4889%" y="383.50"></text></g><g><title>concurrent_queue::unbounded::Slot&lt;T&gt;::wait_write (47 samples, 0.03%)</title><rect x="88.4741%" y="421" width="0.0313%" height="15" fill="rgb(213,21,6)" fg:x="132804" fg:w="47"/><text x="88.7241%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (47 samples, 0.03%)</title><rect x="88.4741%" y="405" width="0.0313%" height="15" fill="rgb(243,151,13)" fg:x="132804" fg:w="47"/><text x="88.7241%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (47 samples, 0.03%)</title><rect x="88.4741%" y="389" width="0.0313%" height="15" fill="rgb(233,165,41)" fg:x="132804" fg:w="47"/><text x="88.7241%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (26 samples, 0.02%)</title><rect x="88.5174%" y="421" width="0.0173%" height="15" fill="rgb(246,176,45)" fg:x="132869" fg:w="26"/><text x="88.7674%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (26 samples, 0.02%)</title><rect x="88.5174%" y="405" width="0.0173%" height="15" fill="rgb(217,170,52)" fg:x="132869" fg:w="26"/><text x="88.7674%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (144 samples, 0.10%)</title><rect x="88.5347%" y="421" width="0.0959%" height="15" fill="rgb(214,203,54)" fg:x="132895" fg:w="144"/><text x="88.7847%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (144 samples, 0.10%)</title><rect x="88.5347%" y="405" width="0.0959%" height="15" fill="rgb(248,215,49)" fg:x="132895" fg:w="144"/><text x="88.7847%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (230 samples, 0.15%)</title><rect x="88.6306%" y="421" width="0.1532%" height="15" fill="rgb(208,46,10)" fg:x="133039" fg:w="230"/><text x="88.8806%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_or (230 samples, 0.15%)</title><rect x="88.6306%" y="405" width="0.1532%" height="15" fill="rgb(254,5,31)" fg:x="133039" fg:w="230"/><text x="88.8806%" y="415.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (4,795 samples, 3.19%)</title><rect x="85.7586%" y="453" width="3.1944%" height="15" fill="rgb(222,104,33)" fg:x="128728" fg:w="4795"/><text x="86.0086%" y="463.50">con..</text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (1,159 samples, 0.77%)</title><rect x="88.1809%" y="437" width="0.7721%" height="15" fill="rgb(248,49,16)" fg:x="132364" fg:w="1159"/><text x="88.4309%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (254 samples, 0.17%)</title><rect x="88.7839%" y="421" width="0.1692%" height="15" fill="rgb(232,198,41)" fg:x="133269" fg:w="254"/><text x="89.0339%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (254 samples, 0.17%)</title><rect x="88.7839%" y="405" width="0.1692%" height="15" fill="rgb(214,125,3)" fg:x="133269" fg:w="254"/><text x="89.0339%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (390 samples, 0.26%)</title><rect x="88.9837%" y="389" width="0.2598%" height="15" fill="rgb(229,220,28)" fg:x="133569" fg:w="390"/><text x="89.2337%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_sub (390 samples, 0.26%)</title><rect x="88.9837%" y="373" width="0.2598%" height="15" fill="rgb(222,64,37)" fg:x="133569" fg:w="390"/><text x="89.2337%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (780 samples, 0.52%)</title><rect x="88.9531%" y="453" width="0.5196%" height="15" fill="rgb(249,184,13)" fg:x="133523" fg:w="780"/><text x="89.2031%" y="463.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (780 samples, 0.52%)</title><rect x="88.9531%" y="437" width="0.5196%" height="15" fill="rgb(252,176,6)" fg:x="133523" fg:w="780"/><text x="89.2031%" y="447.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read_unlock (773 samples, 0.51%)</title><rect x="88.9577%" y="421" width="0.5150%" height="15" fill="rgb(228,153,7)" fg:x="133530" fg:w="773"/><text x="89.2077%" y="431.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read_unlock (734 samples, 0.49%)</title><rect x="88.9837%" y="405" width="0.4890%" height="15" fill="rgb(242,193,5)" fg:x="133569" fg:w="734"/><text x="89.2337%" y="415.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::raw_unlock (344 samples, 0.23%)</title><rect x="89.2435%" y="389" width="0.2292%" height="15" fill="rgb(232,140,9)" fg:x="133959" fg:w="344"/><text x="89.4935%" y="399.50"></text></g><g><title>__GI___pthread_rwlock_unlock (344 samples, 0.23%)</title><rect x="89.2435%" y="373" width="0.2292%" height="15" fill="rgb(213,222,16)" fg:x="133959" fg:w="344"/><text x="89.4935%" y="383.50"></text></g><g><title>fastrand::usize (65 samples, 0.04%)</title><rect x="89.4727%" y="453" width="0.0433%" height="15" fill="rgb(222,75,50)" fg:x="134303" fg:w="65"/><text x="89.7227%" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (60 samples, 0.04%)</title><rect x="89.4760%" y="437" width="0.0400%" height="15" fill="rgb(205,180,2)" fg:x="134308" fg:w="60"/><text x="89.7260%" y="447.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (50 samples, 0.03%)</title><rect x="89.4827%" y="421" width="0.0333%" height="15" fill="rgb(216,34,7)" fg:x="134318" fg:w="50"/><text x="89.7327%" y="431.50"></text></g><g><title>fastrand::usize::{{closure}} (28 samples, 0.02%)</title><rect x="89.4974%" y="405" width="0.0187%" height="15" fill="rgb(253,16,32)" fg:x="134340" fg:w="28"/><text x="89.7474%" y="415.50"></text></g><g><title>fastrand::Rng::usize (28 samples, 0.02%)</title><rect x="89.4974%" y="389" width="0.0187%" height="15" fill="rgb(208,97,28)" fg:x="134340" fg:w="28"/><text x="89.7474%" y="399.50"></text></g><g><title>fastrand::Rng::gen_mod_u64 (19 samples, 0.01%)</title><rect x="89.5033%" y="373" width="0.0127%" height="15" fill="rgb(225,92,11)" fg:x="134349" fg:w="19"/><text x="89.7533%" y="383.50"></text></g><g><title>std::sync::poison::Flag::get (22 samples, 0.01%)</title><rect x="89.5160%" y="405" width="0.0147%" height="15" fill="rgb(243,38,12)" fg:x="134368" fg:w="22"/><text x="89.7660%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (22 samples, 0.01%)</title><rect x="89.5160%" y="389" width="0.0147%" height="15" fill="rgb(208,139,16)" fg:x="134368" fg:w="22"/><text x="89.7660%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_load (18 samples, 0.01%)</title><rect x="89.5187%" y="373" width="0.0120%" height="15" fill="rgb(227,24,9)" fg:x="134372" fg:w="18"/><text x="89.7687%" y="383.50"></text></g><g><title>std::sync::rwlock::RwLockReadGuard&lt;T&gt;::new (32 samples, 0.02%)</title><rect x="89.5160%" y="437" width="0.0213%" height="15" fill="rgb(206,62,11)" fg:x="134368" fg:w="32"/><text x="89.7660%" y="447.50"></text></g><g><title>std::sync::poison::Flag::borrow (32 samples, 0.02%)</title><rect x="89.5160%" y="421" width="0.0213%" height="15" fill="rgb(228,134,27)" fg:x="134368" fg:w="32"/><text x="89.7660%" y="431.50"></text></g><g><title>__GI___pthread_rwlock_rdlock (574 samples, 0.38%)</title><rect x="89.5786%" y="405" width="0.3824%" height="15" fill="rgb(205,55,33)" fg:x="134462" fg:w="574"/><text x="89.8286%" y="415.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (10,063 samples, 6.70%)</title><rect x="83.3870%" y="469" width="6.7040%" height="15" fill="rgb(243,75,43)" fg:x="125168" fg:w="10063"/><text x="83.6370%" y="479.50">async_exe..</text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (863 samples, 0.57%)</title><rect x="89.5160%" y="453" width="0.5749%" height="15" fill="rgb(223,27,42)" fg:x="134368" fg:w="863"/><text x="89.7660%" y="463.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read (831 samples, 0.55%)</title><rect x="89.5373%" y="437" width="0.5536%" height="15" fill="rgb(232,189,33)" fg:x="134400" fg:w="831"/><text x="89.7873%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read (796 samples, 0.53%)</title><rect x="89.5606%" y="421" width="0.5303%" height="15" fill="rgb(210,9,39)" fg:x="134435" fg:w="796"/><text x="89.8106%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (195 samples, 0.13%)</title><rect x="89.9610%" y="405" width="0.1299%" height="15" fill="rgb(242,85,26)" fg:x="135036" fg:w="195"/><text x="90.2110%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_add (195 samples, 0.13%)</title><rect x="89.9610%" y="389" width="0.1299%" height="15" fill="rgb(248,44,4)" fg:x="135036" fg:w="195"/><text x="90.2110%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (63 samples, 0.04%)</title><rect x="90.1043%" y="453" width="0.0420%" height="15" fill="rgb(250,96,46)" fg:x="135251" fg:w="63"/><text x="90.3543%" y="463.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (63 samples, 0.04%)</title><rect x="90.1043%" y="437" width="0.0420%" height="15" fill="rgb(229,116,26)" fg:x="135251" fg:w="63"/><text x="90.3543%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (63 samples, 0.04%)</title><rect x="90.1043%" y="421" width="0.0420%" height="15" fill="rgb(246,94,34)" fg:x="135251" fg:w="63"/><text x="90.3543%" y="431.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (62 samples, 0.04%)</title><rect x="90.1049%" y="405" width="0.0413%" height="15" fill="rgb(251,73,21)" fg:x="135252" fg:w="62"/><text x="90.3549%" y="415.50"></text></g><g><title>__GI___pthread_mutex_unlock (62 samples, 0.04%)</title><rect x="90.1049%" y="389" width="0.0413%" height="15" fill="rgb(254,121,25)" fg:x="135252" fg:w="62"/><text x="90.3549%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (76 samples, 0.05%)</title><rect x="90.1462%" y="453" width="0.0506%" height="15" fill="rgb(215,161,49)" fg:x="135314" fg:w="76"/><text x="90.3962%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (76 samples, 0.05%)</title><rect x="90.1462%" y="437" width="0.0506%" height="15" fill="rgb(221,43,13)" fg:x="135314" fg:w="76"/><text x="90.3962%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (31 samples, 0.02%)</title><rect x="90.2122%" y="373" width="0.0207%" height="15" fill="rgb(249,5,37)" fg:x="135413" fg:w="31"/><text x="90.4622%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (31 samples, 0.02%)</title><rect x="90.2122%" y="357" width="0.0207%" height="15" fill="rgb(226,25,44)" fg:x="135413" fg:w="31"/><text x="90.4622%" y="367.50"></text></g><g><title>async_io::reactor::Reactor::notify (91 samples, 0.06%)</title><rect x="90.2035%" y="405" width="0.0606%" height="15" fill="rgb(238,189,16)" fg:x="135400" fg:w="91"/><text x="90.4535%" y="415.50"></text></g><g><title>polling::Poller::notify (83 samples, 0.06%)</title><rect x="90.2089%" y="389" width="0.0553%" height="15" fill="rgb(251,186,8)" fg:x="135408" fg:w="83"/><text x="90.4589%" y="399.50"></text></g><g><title>polling::epoll::Poller::notify (46 samples, 0.03%)</title><rect x="90.2335%" y="373" width="0.0306%" height="15" fill="rgb(254,34,31)" fg:x="135445" fg:w="46"/><text x="90.4835%" y="383.50"></text></g><g><title>__libc_write (38 samples, 0.03%)</title><rect x="90.2388%" y="357" width="0.0253%" height="15" fill="rgb(225,215,27)" fg:x="135453" fg:w="38"/><text x="90.4888%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (22 samples, 0.01%)</title><rect x="90.2641%" y="405" width="0.0147%" height="15" fill="rgb(221,192,48)" fg:x="135491" fg:w="22"/><text x="90.5141%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (22 samples, 0.01%)</title><rect x="90.2641%" y="389" width="0.0147%" height="15" fill="rgb(219,137,20)" fg:x="135491" fg:w="22"/><text x="90.5141%" y="399.50"></text></g><g><title>core::mem::drop (18 samples, 0.01%)</title><rect x="90.3228%" y="373" width="0.0120%" height="15" fill="rgb(219,84,11)" fg:x="135579" fg:w="18"/><text x="90.5728%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;()&gt;&gt; (18 samples, 0.01%)</title><rect x="90.3228%" y="357" width="0.0120%" height="15" fill="rgb(224,10,23)" fg:x="135579" fg:w="18"/><text x="90.5728%" y="367.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.01%)</title><rect x="90.3228%" y="341" width="0.0120%" height="15" fill="rgb(248,22,39)" fg:x="135579" fg:w="18"/><text x="90.5728%" y="351.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (18 samples, 0.01%)</title><rect x="90.3228%" y="325" width="0.0120%" height="15" fill="rgb(212,154,20)" fg:x="135579" fg:w="18"/><text x="90.5728%" y="335.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (17 samples, 0.01%)</title><rect x="90.3234%" y="309" width="0.0113%" height="15" fill="rgb(236,199,50)" fg:x="135580" fg:w="17"/><text x="90.5734%" y="319.50"></text></g><g><title>__GI___pthread_mutex_unlock (17 samples, 0.01%)</title><rect x="90.3234%" y="293" width="0.0113%" height="15" fill="rgb(211,9,17)" fg:x="135580" fg:w="17"/><text x="90.5734%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (179 samples, 0.12%)</title><rect x="90.3348%" y="373" width="0.1192%" height="15" fill="rgb(243,216,36)" fg:x="135597" fg:w="179"/><text x="90.5848%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_swap (179 samples, 0.12%)</title><rect x="90.3348%" y="357" width="0.1192%" height="15" fill="rgb(250,2,10)" fg:x="135597" fg:w="179"/><text x="90.5848%" y="367.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (183 samples, 0.12%)</title><rect x="90.4540%" y="373" width="0.1219%" height="15" fill="rgb(226,50,48)" fg:x="135776" fg:w="183"/><text x="90.7040%" y="383.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (183 samples, 0.12%)</title><rect x="90.4540%" y="357" width="0.1219%" height="15" fill="rgb(243,81,16)" fg:x="135776" fg:w="183"/><text x="90.7040%" y="367.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (183 samples, 0.12%)</title><rect x="90.4540%" y="341" width="0.1219%" height="15" fill="rgb(250,14,2)" fg:x="135776" fg:w="183"/><text x="90.7040%" y="351.50"></text></g><g><title>__pthread_cond_signal (183 samples, 0.12%)</title><rect x="90.4540%" y="325" width="0.1219%" height="15" fill="rgb(233,135,29)" fg:x="135776" fg:w="183"/><text x="90.7040%" y="335.50"></text></g><g><title>parking::Unparker::unpark (597 samples, 0.40%)</title><rect x="90.2788%" y="405" width="0.3977%" height="15" fill="rgb(224,64,43)" fg:x="135513" fg:w="597"/><text x="90.5288%" y="415.50"></text></g><g><title>parking::Inner::unpark (540 samples, 0.36%)</title><rect x="90.3168%" y="389" width="0.3597%" height="15" fill="rgb(238,84,13)" fg:x="135570" fg:w="540"/><text x="90.5668%" y="399.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (151 samples, 0.10%)</title><rect x="90.5759%" y="373" width="0.1006%" height="15" fill="rgb(253,48,26)" fg:x="135959" fg:w="151"/><text x="90.8259%" y="383.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (149 samples, 0.10%)</title><rect x="90.5773%" y="357" width="0.0993%" height="15" fill="rgb(205,223,31)" fg:x="135961" fg:w="149"/><text x="90.8273%" y="367.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (140 samples, 0.09%)</title><rect x="90.5833%" y="341" width="0.0933%" height="15" fill="rgb(221,41,32)" fg:x="135970" fg:w="140"/><text x="90.8333%" y="351.50"></text></g><g><title>__GI___pthread_mutex_lock (140 samples, 0.09%)</title><rect x="90.5833%" y="325" width="0.0933%" height="15" fill="rgb(213,158,31)" fg:x="135970" fg:w="140"/><text x="90.8333%" y="335.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (744 samples, 0.50%)</title><rect x="90.1975%" y="421" width="0.4957%" height="15" fill="rgb(245,126,43)" fg:x="135391" fg:w="744"/><text x="90.4475%" y="431.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (25 samples, 0.02%)</title><rect x="90.6765%" y="405" width="0.0167%" height="15" fill="rgb(227,7,22)" fg:x="136110" fg:w="25"/><text x="90.9265%" y="415.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (25 samples, 0.02%)</title><rect x="90.6765%" y="389" width="0.0167%" height="15" fill="rgb(252,90,44)" fg:x="136110" fg:w="25"/><text x="90.9265%" y="399.50"></text></g><g><title>async_io::driver::block_on::IO_POLLING::__getit (25 samples, 0.02%)</title><rect x="90.6765%" y="373" width="0.0167%" height="15" fill="rgb(253,91,0)" fg:x="136110" fg:w="25"/><text x="90.9265%" y="383.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (25 samples, 0.02%)</title><rect x="90.6765%" y="357" width="0.0167%" height="15" fill="rgb(252,175,49)" fg:x="136110" fg:w="25"/><text x="90.9265%" y="367.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (25 samples, 0.02%)</title><rect x="90.6765%" y="341" width="0.0167%" height="15" fill="rgb(246,150,1)" fg:x="136110" fg:w="25"/><text x="90.9265%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (25 samples, 0.02%)</title><rect x="90.6765%" y="325" width="0.0167%" height="15" fill="rgb(241,192,25)" fg:x="136110" fg:w="25"/><text x="90.9265%" y="335.50"></text></g><g><title>core::task::wake::Waker::wake (869 samples, 0.58%)</title><rect x="90.1969%" y="453" width="0.5789%" height="15" fill="rgb(239,187,11)" fg:x="135390" fg:w="869"/><text x="90.4469%" y="463.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (868 samples, 0.58%)</title><rect x="90.1975%" y="437" width="0.5783%" height="15" fill="rgb(218,202,51)" fg:x="135391" fg:w="868"/><text x="90.4475%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (124 samples, 0.08%)</title><rect x="90.6932%" y="421" width="0.0826%" height="15" fill="rgb(225,176,8)" fg:x="136135" fg:w="124"/><text x="90.9432%" y="431.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (124 samples, 0.08%)</title><rect x="90.6932%" y="405" width="0.0826%" height="15" fill="rgb(219,122,41)" fg:x="136135" fg:w="124"/><text x="90.9432%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (117 samples, 0.08%)</title><rect x="90.6978%" y="389" width="0.0779%" height="15" fill="rgb(248,140,20)" fg:x="136142" fg:w="117"/><text x="90.9478%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_sub (117 samples, 0.08%)</title><rect x="90.6978%" y="373" width="0.0779%" height="15" fill="rgb(245,41,37)" fg:x="136142" fg:w="117"/><text x="90.9478%" y="383.50"></text></g><g><title>async_executor::State::notify (1,096 samples, 0.73%)</title><rect x="90.0909%" y="469" width="0.7302%" height="15" fill="rgb(235,82,39)" fg:x="135231" fg:w="1096"/><text x="90.3409%" y="479.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (68 samples, 0.05%)</title><rect x="90.7758%" y="453" width="0.0453%" height="15" fill="rgb(230,108,42)" fg:x="136259" fg:w="68"/><text x="91.0258%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (67 samples, 0.04%)</title><rect x="90.7765%" y="437" width="0.0446%" height="15" fill="rgb(215,150,50)" fg:x="136260" fg:w="67"/><text x="91.0265%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (65 samples, 0.04%)</title><rect x="90.7778%" y="421" width="0.0433%" height="15" fill="rgb(233,212,5)" fg:x="136262" fg:w="65"/><text x="91.0278%" y="431.50"></text></g><g><title>__GI___pthread_mutex_lock (65 samples, 0.04%)</title><rect x="90.7778%" y="405" width="0.0433%" height="15" fill="rgb(245,80,22)" fg:x="136262" fg:w="65"/><text x="91.0278%" y="415.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (245 samples, 0.16%)</title><rect x="90.8417%" y="437" width="0.1632%" height="15" fill="rgb(238,129,16)" fg:x="136358" fg:w="245"/><text x="91.0917%" y="447.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (243 samples, 0.16%)</title><rect x="90.8431%" y="421" width="0.1619%" height="15" fill="rgb(240,19,0)" fg:x="136360" fg:w="243"/><text x="91.0931%" y="431.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (242 samples, 0.16%)</title><rect x="90.8437%" y="405" width="0.1612%" height="15" fill="rgb(232,42,35)" fg:x="136361" fg:w="242"/><text x="91.0937%" y="415.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (242 samples, 0.16%)</title><rect x="90.8437%" y="389" width="0.1612%" height="15" fill="rgb(223,130,24)" fg:x="136361" fg:w="242"/><text x="91.0937%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (242 samples, 0.16%)</title><rect x="90.8437%" y="373" width="0.1612%" height="15" fill="rgb(237,16,22)" fg:x="136361" fg:w="242"/><text x="91.0937%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_add (242 samples, 0.16%)</title><rect x="90.8437%" y="357" width="0.1612%" height="15" fill="rgb(248,192,20)" fg:x="136361" fg:w="242"/><text x="91.0937%" y="367.50"></text></g><g><title>async_executor::Sleepers::insert (305 samples, 0.20%)</title><rect x="90.8391%" y="453" width="0.2032%" height="15" fill="rgb(233,167,2)" fg:x="136354" fg:w="305"/><text x="91.0891%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (44 samples, 0.03%)</title><rect x="91.0130%" y="437" width="0.0293%" height="15" fill="rgb(252,71,44)" fg:x="136615" fg:w="44"/><text x="91.2630%" y="447.50"></text></g><g><title>core::ptr::write (38 samples, 0.03%)</title><rect x="91.0170%" y="421" width="0.0253%" height="15" fill="rgb(238,37,47)" fg:x="136621" fg:w="38"/><text x="91.2670%" y="431.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 0.02%)</title><rect x="91.1016%" y="437" width="0.0207%" height="15" fill="rgb(214,202,54)" fg:x="136748" fg:w="31"/><text x="91.3516%" y="447.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (98 samples, 0.07%)</title><rect x="91.1222%" y="437" width="0.0653%" height="15" fill="rgb(254,165,40)" fg:x="136779" fg:w="98"/><text x="91.3722%" y="447.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (95 samples, 0.06%)</title><rect x="91.1242%" y="421" width="0.0633%" height="15" fill="rgb(246,173,38)" fg:x="136782" fg:w="95"/><text x="91.3742%" y="431.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (94 samples, 0.06%)</title><rect x="91.1249%" y="405" width="0.0626%" height="15" fill="rgb(215,3,27)" fg:x="136783" fg:w="94"/><text x="91.3749%" y="415.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (94 samples, 0.06%)</title><rect x="91.1249%" y="389" width="0.0626%" height="15" fill="rgb(239,169,51)" fg:x="136783" fg:w="94"/><text x="91.3749%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (94 samples, 0.06%)</title><rect x="91.1249%" y="373" width="0.0626%" height="15" fill="rgb(212,5,25)" fg:x="136783" fg:w="94"/><text x="91.3749%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_add (94 samples, 0.06%)</title><rect x="91.1249%" y="357" width="0.0626%" height="15" fill="rgb(243,45,17)" fg:x="136783" fg:w="94"/><text x="91.3749%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (34 samples, 0.02%)</title><rect x="91.1875%" y="437" width="0.0227%" height="15" fill="rgb(242,97,9)" fg:x="136877" fg:w="34"/><text x="91.4375%" y="447.50"></text></g><g><title>core::ptr::write (29 samples, 0.02%)</title><rect x="91.1908%" y="421" width="0.0193%" height="15" fill="rgb(228,71,31)" fg:x="136882" fg:w="29"/><text x="91.4408%" y="431.50"></text></g><g><title>async_executor::Sleepers::update (252 samples, 0.17%)</title><rect x="91.0509%" y="453" width="0.1679%" height="15" fill="rgb(252,184,16)" fg:x="136672" fg:w="252"/><text x="91.3009%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (449 samples, 0.30%)</title><rect x="91.2188%" y="453" width="0.2991%" height="15" fill="rgb(236,169,46)" fg:x="136924" fg:w="449"/><text x="91.4688%" y="463.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (449 samples, 0.30%)</title><rect x="91.2188%" y="437" width="0.2991%" height="15" fill="rgb(207,17,47)" fg:x="136924" fg:w="449"/><text x="91.4688%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (436 samples, 0.29%)</title><rect x="91.2275%" y="421" width="0.2905%" height="15" fill="rgb(206,201,28)" fg:x="136937" fg:w="436"/><text x="91.4775%" y="431.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (433 samples, 0.29%)</title><rect x="91.2295%" y="405" width="0.2885%" height="15" fill="rgb(224,184,23)" fg:x="136940" fg:w="433"/><text x="91.4795%" y="415.50"></text></g><g><title>__GI___pthread_mutex_unlock (429 samples, 0.29%)</title><rect x="91.2321%" y="389" width="0.2858%" height="15" fill="rgb(208,139,48)" fg:x="136944" fg:w="429"/><text x="91.4821%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (275 samples, 0.18%)</title><rect x="91.5179%" y="453" width="0.1832%" height="15" fill="rgb(208,130,10)" fg:x="137373" fg:w="275"/><text x="91.7679%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_swap (275 samples, 0.18%)</title><rect x="91.5179%" y="437" width="0.1832%" height="15" fill="rgb(211,213,45)" fg:x="137373" fg:w="275"/><text x="91.7679%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (203 samples, 0.14%)</title><rect x="91.7011%" y="453" width="0.1352%" height="15" fill="rgb(235,100,30)" fg:x="137648" fg:w="203"/><text x="91.9511%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_store (203 samples, 0.14%)</title><rect x="91.7011%" y="437" width="0.1352%" height="15" fill="rgb(206,144,31)" fg:x="137648" fg:w="203"/><text x="91.9511%" y="447.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (22 samples, 0.01%)</title><rect x="91.8364%" y="437" width="0.0147%" height="15" fill="rgb(224,200,26)" fg:x="137851" fg:w="22"/><text x="92.0864%" y="447.50"></text></g><g><title>std::sync::poison::Flag::borrow (22 samples, 0.01%)</title><rect x="91.8364%" y="421" width="0.0147%" height="15" fill="rgb(247,104,53)" fg:x="137851" fg:w="22"/><text x="92.0864%" y="431.50"></text></g><g><title>async_executor::Ticker::sleep (2,383 samples, 1.59%)</title><rect x="90.8211%" y="469" width="1.5876%" height="15" fill="rgb(220,14,17)" fg:x="136327" fg:w="2383"/><text x="91.0711%" y="479.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (859 samples, 0.57%)</title><rect x="91.8364%" y="453" width="0.5723%" height="15" fill="rgb(230,140,40)" fg:x="137851" fg:w="859"/><text x="92.0864%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (837 samples, 0.56%)</title><rect x="91.8510%" y="437" width="0.5576%" height="15" fill="rgb(229,2,41)" fg:x="137873" fg:w="837"/><text x="92.1010%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (825 samples, 0.55%)</title><rect x="91.8590%" y="421" width="0.5496%" height="15" fill="rgb(232,89,16)" fg:x="137885" fg:w="825"/><text x="92.1090%" y="431.50"></text></g><g><title>__GI___pthread_mutex_lock (825 samples, 0.55%)</title><rect x="91.8590%" y="405" width="0.5496%" height="15" fill="rgb(247,59,52)" fg:x="137885" fg:w="825"/><text x="92.1090%" y="415.50"></text></g><g><title>__lll_lock_wait (75 samples, 0.05%)</title><rect x="92.3587%" y="389" width="0.0500%" height="15" fill="rgb(226,110,21)" fg:x="138635" fg:w="75"/><text x="92.6087%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.01%)</title><rect x="92.4406%" y="437" width="0.0147%" height="15" fill="rgb(224,176,43)" fg:x="138758" fg:w="22"/><text x="92.6906%" y="447.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (22 samples, 0.01%)</title><rect x="92.4406%" y="421" width="0.0147%" height="15" fill="rgb(221,73,6)" fg:x="138758" fg:w="22"/><text x="92.6906%" y="431.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (22 samples, 0.01%)</title><rect x="92.4406%" y="405" width="0.0147%" height="15" fill="rgb(232,78,19)" fg:x="138758" fg:w="22"/><text x="92.6906%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::remove (18 samples, 0.01%)</title><rect x="92.4593%" y="437" width="0.0120%" height="15" fill="rgb(233,112,48)" fg:x="138786" fg:w="18"/><text x="92.7093%" y="447.50"></text></g><g><title>async_executor::Sleepers::remove (173 samples, 0.12%)</title><rect x="92.4133%" y="453" width="0.1153%" height="15" fill="rgb(243,131,47)" fg:x="138717" fg:w="173"/><text x="92.6633%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,core::task::wake::Waker)&gt; (86 samples, 0.06%)</title><rect x="92.4713%" y="437" width="0.0573%" height="15" fill="rgb(226,51,1)" fg:x="138804" fg:w="86"/><text x="92.7213%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (86 samples, 0.06%)</title><rect x="92.4713%" y="421" width="0.0573%" height="15" fill="rgb(247,58,7)" fg:x="138804" fg:w="86"/><text x="92.7213%" y="431.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (86 samples, 0.06%)</title><rect x="92.4713%" y="405" width="0.0573%" height="15" fill="rgb(209,7,32)" fg:x="138804" fg:w="86"/><text x="92.7213%" y="415.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::drop_waker (86 samples, 0.06%)</title><rect x="92.4713%" y="389" width="0.0573%" height="15" fill="rgb(209,39,41)" fg:x="138804" fg:w="86"/><text x="92.7213%" y="399.50"></text></g><g><title>core::mem::drop (86 samples, 0.06%)</title><rect x="92.4713%" y="373" width="0.0573%" height="15" fill="rgb(226,182,46)" fg:x="138804" fg:w="86"/><text x="92.7213%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (86 samples, 0.06%)</title><rect x="92.4713%" y="357" width="0.0573%" height="15" fill="rgb(230,219,10)" fg:x="138804" fg:w="86"/><text x="92.7213%" y="367.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (86 samples, 0.06%)</title><rect x="92.4713%" y="341" width="0.0573%" height="15" fill="rgb(227,175,30)" fg:x="138804" fg:w="86"/><text x="92.7213%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (86 samples, 0.06%)</title><rect x="92.4713%" y="325" width="0.0573%" height="15" fill="rgb(217,2,50)" fg:x="138804" fg:w="86"/><text x="92.7213%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_sub (86 samples, 0.06%)</title><rect x="92.4713%" y="309" width="0.0573%" height="15" fill="rgb(229,160,0)" fg:x="138804" fg:w="86"/><text x="92.7213%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (104 samples, 0.07%)</title><rect x="92.5286%" y="453" width="0.0693%" height="15" fill="rgb(207,78,37)" fg:x="138890" fg:w="104"/><text x="92.7786%" y="463.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (104 samples, 0.07%)</title><rect x="92.5286%" y="437" width="0.0693%" height="15" fill="rgb(225,57,0)" fg:x="138890" fg:w="104"/><text x="92.7786%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (102 samples, 0.07%)</title><rect x="92.5299%" y="421" width="0.0680%" height="15" fill="rgb(232,154,2)" fg:x="138892" fg:w="102"/><text x="92.7799%" y="431.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (102 samples, 0.07%)</title><rect x="92.5299%" y="405" width="0.0680%" height="15" fill="rgb(241,212,25)" fg:x="138892" fg:w="102"/><text x="92.7799%" y="415.50"></text></g><g><title>__GI___pthread_mutex_unlock (100 samples, 0.07%)</title><rect x="92.5312%" y="389" width="0.0666%" height="15" fill="rgb(226,69,20)" fg:x="138894" fg:w="100"/><text x="92.7812%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (126 samples, 0.08%)</title><rect x="92.5978%" y="453" width="0.0839%" height="15" fill="rgb(247,184,54)" fg:x="138994" fg:w="126"/><text x="92.8478%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_swap (126 samples, 0.08%)</title><rect x="92.5978%" y="437" width="0.0839%" height="15" fill="rgb(210,145,0)" fg:x="138994" fg:w="126"/><text x="92.8478%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (182 samples, 0.12%)</title><rect x="92.6818%" y="453" width="0.1212%" height="15" fill="rgb(253,82,12)" fg:x="139120" fg:w="182"/><text x="92.9318%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_swap (182 samples, 0.12%)</title><rect x="92.6818%" y="437" width="0.1212%" height="15" fill="rgb(245,42,11)" fg:x="139120" fg:w="182"/><text x="92.9318%" y="447.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14,422 samples, 9.61%)</title><rect x="83.3450%" y="533" width="9.6079%" height="15" fill="rgb(219,147,32)" fg:x="125105" fg:w="14422"/><text x="83.5950%" y="543.50">&lt;core::future:..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (14,422 samples, 9.61%)</title><rect x="83.3450%" y="517" width="9.6079%" height="15" fill="rgb(246,12,7)" fg:x="125105" fg:w="14422"/><text x="83.5950%" y="527.50">async_executor..</text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (14,390 samples, 9.59%)</title><rect x="83.3663%" y="501" width="9.5866%" height="15" fill="rgb(243,50,9)" fg:x="125137" fg:w="14390"/><text x="83.6163%" y="511.50">&lt;futures_lite:..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (14,374 samples, 9.58%)</title><rect x="83.3770%" y="485" width="9.5760%" height="15" fill="rgb(219,149,6)" fg:x="125153" fg:w="14374"/><text x="83.6270%" y="495.50">async_executor..</text></g><g><title>async_executor::Ticker::wake (817 samples, 0.54%)</title><rect x="92.4086%" y="469" width="0.5443%" height="15" fill="rgb(241,51,42)" fg:x="138710" fg:w="817"/><text x="92.6586%" y="479.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (225 samples, 0.15%)</title><rect x="92.8030%" y="453" width="0.1499%" height="15" fill="rgb(226,128,27)" fg:x="139302" fg:w="225"/><text x="93.0530%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (221 samples, 0.15%)</title><rect x="92.8057%" y="437" width="0.1472%" height="15" fill="rgb(244,144,4)" fg:x="139306" fg:w="221"/><text x="93.0557%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (215 samples, 0.14%)</title><rect x="92.8097%" y="421" width="0.1432%" height="15" fill="rgb(221,4,13)" fg:x="139312" fg:w="215"/><text x="93.0597%" y="431.50"></text></g><g><title>__GI___pthread_mutex_lock (215 samples, 0.14%)</title><rect x="92.8097%" y="405" width="0.1432%" height="15" fill="rgb(208,170,28)" fg:x="139312" fg:w="215"/><text x="93.0597%" y="415.50"></text></g><g><title>__lll_lock_wait (29 samples, 0.02%)</title><rect x="92.9336%" y="389" width="0.0193%" height="15" fill="rgb(226,131,13)" fg:x="139498" fg:w="29"/><text x="93.1836%" y="399.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14,534 samples, 9.68%)</title><rect x="83.3117%" y="565" width="9.6826%" height="15" fill="rgb(215,72,41)" fg:x="125055" fg:w="14534"/><text x="83.5617%" y="575.50">&lt;core::future:..</text></g><g><title>async_executor::Runner::runnable::{{closure}} (14,530 samples, 9.68%)</title><rect x="83.3143%" y="549" width="9.6799%" height="15" fill="rgb(243,108,20)" fg:x="125059" fg:w="14530"/><text x="83.5643%" y="559.50">async_executor..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (60 samples, 0.04%)</title><rect x="92.9543%" y="533" width="0.0400%" height="15" fill="rgb(230,189,17)" fg:x="139529" fg:w="60"/><text x="93.2043%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_add (60 samples, 0.04%)</title><rect x="92.9543%" y="517" width="0.0400%" height="15" fill="rgb(220,50,17)" fg:x="139529" fg:w="60"/><text x="93.2043%" y="527.50"></text></g><g><title>[libc-2.31.so] (101 samples, 0.07%)</title><rect x="93.1714%" y="421" width="0.0673%" height="15" fill="rgb(248,152,48)" fg:x="139855" fg:w="101"/><text x="93.4214%" y="431.50"></text></g><g><title>async_std::task::task_locals_wrapper::CURRENT::__getit (17 samples, 0.01%)</title><rect x="93.2387%" y="421" width="0.0113%" height="15" fill="rgb(244,91,11)" fg:x="139956" fg:w="17"/><text x="93.4887%" y="431.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (341 samples, 0.23%)</title><rect x="93.4966%" y="357" width="0.2272%" height="15" fill="rgb(220,157,5)" fg:x="140343" fg:w="341"/><text x="93.7466%" y="367.50"></text></g><g><title>[libc-2.31.so] (320 samples, 0.21%)</title><rect x="93.5105%" y="341" width="0.2132%" height="15" fill="rgb(253,137,8)" fg:x="140364" fg:w="320"/><text x="93.7605%" y="351.50"></text></g><g><title>[libc-2.31.so] (334 samples, 0.22%)</title><rect x="93.8190%" y="341" width="0.2225%" height="15" fill="rgb(217,137,51)" fg:x="140827" fg:w="334"/><text x="94.0690%" y="351.50"></text></g><g><title>sn_rust_dealloc (32 samples, 0.02%)</title><rect x="94.0435%" y="229" width="0.0213%" height="15" fill="rgb(218,209,53)" fg:x="141164" fg:w="32"/><text x="94.2935%" y="239.50"></text></g><g><title>alloc::alloc::box_free (33 samples, 0.02%)</title><rect x="94.0435%" y="309" width="0.0220%" height="15" fill="rgb(249,137,25)" fg:x="141164" fg:w="33"/><text x="94.2935%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (33 samples, 0.02%)</title><rect x="94.0435%" y="293" width="0.0220%" height="15" fill="rgb(239,155,26)" fg:x="141164" fg:w="33"/><text x="94.2935%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (33 samples, 0.02%)</title><rect x="94.0435%" y="277" width="0.0220%" height="15" fill="rgb(227,85,46)" fg:x="141164" fg:w="33"/><text x="94.2935%" y="287.50"></text></g><g><title>__rg_dealloc (33 samples, 0.02%)</title><rect x="94.0435%" y="261" width="0.0220%" height="15" fill="rgb(251,107,43)" fg:x="141164" fg:w="33"/><text x="94.2935%" y="271.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (33 samples, 0.02%)</title><rect x="94.0435%" y="245" width="0.0220%" height="15" fill="rgb(234,170,33)" fg:x="141164" fg:w="33"/><text x="94.2935%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt;&gt; (40 samples, 0.03%)</title><rect x="94.0435%" y="341" width="0.0266%" height="15" fill="rgb(206,29,35)" fg:x="141164" fg:w="40"/><text x="94.2935%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt; (40 samples, 0.03%)</title><rect x="94.0435%" y="325" width="0.0266%" height="15" fill="rgb(227,138,25)" fg:x="141164" fg:w="40"/><text x="94.2935%" y="335.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (91 samples, 0.06%)</title><rect x="94.1494%" y="277" width="0.0606%" height="15" fill="rgb(249,131,35)" fg:x="141323" fg:w="91"/><text x="94.3994%" y="287.50"></text></g><g><title>core::mem::replace (91 samples, 0.06%)</title><rect x="94.1494%" y="261" width="0.0606%" height="15" fill="rgb(239,6,40)" fg:x="141323" fg:w="91"/><text x="94.3994%" y="271.50"></text></g><g><title>core::ptr::read (91 samples, 0.06%)</title><rect x="94.1494%" y="245" width="0.0606%" height="15" fill="rgb(246,136,47)" fg:x="141323" fg:w="91"/><text x="94.3994%" y="255.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (146 samples, 0.10%)</title><rect x="94.1268%" y="293" width="0.0973%" height="15" fill="rgb(253,58,26)" fg:x="141289" fg:w="146"/><text x="94.3768%" y="303.50"></text></g><g><title>core::mem::drop (21 samples, 0.01%)</title><rect x="94.2101%" y="277" width="0.0140%" height="15" fill="rgb(237,141,10)" fg:x="141414" fg:w="21"/><text x="94.4601%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (21 samples, 0.01%)</title><rect x="94.2101%" y="261" width="0.0140%" height="15" fill="rgb(234,156,12)" fg:x="141414" fg:w="21"/><text x="94.4601%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (161 samples, 0.11%)</title><rect x="94.2240%" y="293" width="0.1073%" height="15" fill="rgb(243,224,36)" fg:x="141435" fg:w="161"/><text x="94.4740%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (157 samples, 0.10%)</title><rect x="94.2267%" y="277" width="0.1046%" height="15" fill="rgb(205,229,51)" fg:x="141439" fg:w="157"/><text x="94.4767%" y="287.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (157 samples, 0.10%)</title><rect x="94.2267%" y="261" width="0.1046%" height="15" fill="rgb(223,189,4)" fg:x="141439" fg:w="157"/><text x="94.4767%" y="271.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (146 samples, 0.10%)</title><rect x="94.2340%" y="245" width="0.0973%" height="15" fill="rgb(249,167,54)" fg:x="141450" fg:w="146"/><text x="94.4840%" y="255.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (146 samples, 0.10%)</title><rect x="94.2340%" y="229" width="0.0973%" height="15" fill="rgb(218,34,28)" fg:x="141450" fg:w="146"/><text x="94.4840%" y="239.50"></text></g><g><title>__GI___pthread_mutex_unlock (143 samples, 0.10%)</title><rect x="94.2360%" y="213" width="0.0953%" height="15" fill="rgb(232,109,42)" fg:x="141453" fg:w="143"/><text x="94.4860%" y="223.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (759 samples, 0.51%)</title><rect x="94.0921%" y="309" width="0.5056%" height="15" fill="rgb(248,214,46)" fg:x="141237" fg:w="759"/><text x="94.3421%" y="319.50"></text></g><g><title>event_listener::Inner::lock (391 samples, 0.26%)</title><rect x="94.3373%" y="293" width="0.2605%" height="15" fill="rgb(244,216,40)" fg:x="141605" fg:w="391"/><text x="94.5873%" y="303.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (383 samples, 0.26%)</title><rect x="94.3426%" y="277" width="0.2552%" height="15" fill="rgb(231,226,31)" fg:x="141613" fg:w="383"/><text x="94.5926%" y="287.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (375 samples, 0.25%)</title><rect x="94.3480%" y="261" width="0.2498%" height="15" fill="rgb(238,38,43)" fg:x="141621" fg:w="375"/><text x="94.5980%" y="271.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (366 samples, 0.24%)</title><rect x="94.3540%" y="245" width="0.2438%" height="15" fill="rgb(208,88,43)" fg:x="141630" fg:w="366"/><text x="94.6040%" y="255.50"></text></g><g><title>__GI___pthread_mutex_lock (366 samples, 0.24%)</title><rect x="94.3540%" y="229" width="0.2438%" height="15" fill="rgb(205,136,37)" fg:x="141630" fg:w="366"/><text x="94.6040%" y="239.50"></text></g><g><title>concurrent_queue::full_fence (174 samples, 0.12%)</title><rect x="94.6364%" y="261" width="0.1159%" height="15" fill="rgb(237,34,14)" fg:x="142054" fg:w="174"/><text x="94.8864%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (171 samples, 0.11%)</title><rect x="94.6384%" y="245" width="0.1139%" height="15" fill="rgb(236,193,44)" fg:x="142057" fg:w="171"/><text x="94.8884%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (171 samples, 0.11%)</title><rect x="94.6384%" y="229" width="0.1139%" height="15" fill="rgb(231,48,10)" fg:x="142057" fg:w="171"/><text x="94.8884%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (171 samples, 0.11%)</title><rect x="94.6384%" y="213" width="0.1139%" height="15" fill="rgb(213,141,34)" fg:x="142057" fg:w="171"/><text x="94.8884%" y="223.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1,573 samples, 1.05%)</title><rect x="93.7237%" y="357" width="1.0479%" height="15" fill="rgb(249,130,34)" fg:x="140684" fg:w="1573"/><text x="93.9737%" y="367.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (1,053 samples, 0.70%)</title><rect x="94.0702%" y="341" width="0.7015%" height="15" fill="rgb(219,42,41)" fg:x="141204" fg:w="1053"/><text x="94.3202%" y="351.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (1,053 samples, 0.70%)</title><rect x="94.0702%" y="325" width="0.7015%" height="15" fill="rgb(224,100,54)" fg:x="141204" fg:w="1053"/><text x="94.3202%" y="335.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (261 samples, 0.17%)</title><rect x="94.5978%" y="309" width="0.1739%" height="15" fill="rgb(229,200,27)" fg:x="141996" fg:w="261"/><text x="94.8478%" y="319.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (250 samples, 0.17%)</title><rect x="94.6051%" y="293" width="0.1666%" height="15" fill="rgb(217,118,10)" fg:x="142007" fg:w="250"/><text x="94.8551%" y="303.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (220 samples, 0.15%)</title><rect x="94.6251%" y="277" width="0.1466%" height="15" fill="rgb(206,22,3)" fg:x="142037" fg:w="220"/><text x="94.8751%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (20 samples, 0.01%)</title><rect x="94.7583%" y="261" width="0.0133%" height="15" fill="rgb(232,163,46)" fg:x="142237" fg:w="20"/><text x="95.0083%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_load (20 samples, 0.01%)</title><rect x="94.7583%" y="245" width="0.0133%" height="15" fill="rgb(206,95,13)" fg:x="142237" fg:w="20"/><text x="95.0083%" y="255.50"></text></g><g><title>[libc-2.31.so] (312 samples, 0.21%)</title><rect x="94.7717%" y="357" width="0.2079%" height="15" fill="rgb(253,154,18)" fg:x="142257" fg:w="312"/><text x="95.0217%" y="367.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (30 samples, 0.02%)</title><rect x="95.1827%" y="229" width="0.0200%" height="15" fill="rgb(219,32,23)" fg:x="142874" fg:w="30"/><text x="95.4327%" y="239.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (338 samples, 0.23%)</title><rect x="94.9795%" y="357" width="0.2252%" height="15" fill="rgb(230,191,45)" fg:x="142569" fg:w="338"/><text x="95.2295%" y="367.50"></text></g><g><title>alloc::alloc::exchange_malloc (123 samples, 0.08%)</title><rect x="95.1227%" y="341" width="0.0819%" height="15" fill="rgb(229,64,36)" fg:x="142784" fg:w="123"/><text x="95.3727%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (123 samples, 0.08%)</title><rect x="95.1227%" y="325" width="0.0819%" height="15" fill="rgb(205,129,25)" fg:x="142784" fg:w="123"/><text x="95.3727%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (123 samples, 0.08%)</title><rect x="95.1227%" y="309" width="0.0819%" height="15" fill="rgb(254,112,7)" fg:x="142784" fg:w="123"/><text x="95.3727%" y="319.50"></text></g><g><title>alloc::alloc::alloc (122 samples, 0.08%)</title><rect x="95.1234%" y="293" width="0.0813%" height="15" fill="rgb(226,53,48)" fg:x="142785" fg:w="122"/><text x="95.3734%" y="303.50"></text></g><g><title>__rg_alloc (122 samples, 0.08%)</title><rect x="95.1234%" y="277" width="0.0813%" height="15" fill="rgb(214,153,38)" fg:x="142785" fg:w="122"/><text x="95.3734%" y="287.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (122 samples, 0.08%)</title><rect x="95.1234%" y="261" width="0.0813%" height="15" fill="rgb(243,101,7)" fg:x="142785" fg:w="122"/><text x="95.3734%" y="271.50"></text></g><g><title>sn_rust_alloc (117 samples, 0.08%)</title><rect x="95.1267%" y="245" width="0.0779%" height="15" fill="rgb(240,140,22)" fg:x="142790" fg:w="117"/><text x="95.3767%" y="255.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (2,956 samples, 1.97%)</title><rect x="93.2594%" y="373" width="1.9693%" height="15" fill="rgb(235,114,2)" fg:x="139987" fg:w="2956"/><text x="93.5094%" y="383.50">t..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (2,970 samples, 1.98%)</title><rect x="93.2514%" y="405" width="1.9786%" height="15" fill="rgb(242,59,12)" fg:x="139975" fg:w="2970"/><text x="93.5014%" y="415.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,970 samples, 1.98%)</title><rect x="93.2514%" y="389" width="1.9786%" height="15" fill="rgb(252,134,9)" fg:x="139975" fg:w="2970"/><text x="93.5014%" y="399.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,221 samples, 2.15%)</title><rect x="93.0948%" y="517" width="2.1458%" height="15" fill="rgb(236,4,44)" fg:x="139740" fg:w="3221"/><text x="93.3448%" y="527.50">&lt;..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (3,214 samples, 2.14%)</title><rect x="93.0995%" y="501" width="2.1412%" height="15" fill="rgb(254,172,41)" fg:x="139747" fg:w="3214"/><text x="93.3495%" y="511.50">a..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (3,121 samples, 2.08%)</title><rect x="93.1615%" y="485" width="2.0792%" height="15" fill="rgb(244,63,20)" fg:x="139840" fg:w="3121"/><text x="93.4115%" y="495.50">&lt;..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (3,121 samples, 2.08%)</title><rect x="93.1615%" y="469" width="2.0792%" height="15" fill="rgb(250,73,31)" fg:x="139840" fg:w="3121"/><text x="93.4115%" y="479.50">a..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3,117 samples, 2.08%)</title><rect x="93.1641%" y="453" width="2.0765%" height="15" fill="rgb(241,38,36)" fg:x="139844" fg:w="3117"/><text x="93.4141%" y="463.50">s..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3,112 samples, 2.07%)</title><rect x="93.1674%" y="437" width="2.0732%" height="15" fill="rgb(245,211,2)" fg:x="139849" fg:w="3112"/><text x="93.4174%" y="447.50">s..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (2,988 samples, 1.99%)</title><rect x="93.2501%" y="421" width="1.9906%" height="15" fill="rgb(206,120,28)" fg:x="139973" fg:w="2988"/><text x="93.5001%" y="431.50">a..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (3,224 samples, 2.15%)</title><rect x="93.0948%" y="533" width="2.1478%" height="15" fill="rgb(211,59,34)" fg:x="139740" fg:w="3224"/><text x="93.3448%" y="543.50">&lt;..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_ref (59 samples, 0.04%)</title><rect x="95.2427%" y="533" width="0.0393%" height="15" fill="rgb(233,168,5)" fg:x="142964" fg:w="59"/><text x="95.4927%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (55 samples, 0.04%)</title><rect x="95.2453%" y="517" width="0.0366%" height="15" fill="rgb(234,33,13)" fg:x="142968" fg:w="55"/><text x="95.4953%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_sub (55 samples, 0.04%)</title><rect x="95.2453%" y="501" width="0.0366%" height="15" fill="rgb(231,150,26)" fg:x="142968" fg:w="55"/><text x="95.4953%" y="511.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (16 samples, 0.01%)</title><rect x="95.2820%" y="517" width="0.0107%" height="15" fill="rgb(217,191,4)" fg:x="143023" fg:w="16"/><text x="95.5320%" y="527.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::schedule (17 samples, 0.01%)</title><rect x="95.2820%" y="533" width="0.0113%" height="15" fill="rgb(246,198,38)" fg:x="143023" fg:w="17"/><text x="95.5320%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (439 samples, 0.29%)</title><rect x="95.2933%" y="533" width="0.2925%" height="15" fill="rgb(245,64,37)" fg:x="143040" fg:w="439"/><text x="95.5433%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (439 samples, 0.29%)</title><rect x="95.2933%" y="517" width="0.2925%" height="15" fill="rgb(250,30,36)" fg:x="143040" fg:w="439"/><text x="95.5433%" y="527.50"></text></g><g><title>async_task::runnable::Runnable::run (3,901 samples, 2.60%)</title><rect x="92.9942%" y="565" width="2.5988%" height="15" fill="rgb(217,86,53)" fg:x="139589" fg:w="3901"/><text x="93.2442%" y="575.50">as..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (3,828 samples, 2.55%)</title><rect x="93.0429%" y="549" width="2.5502%" height="15" fill="rgb(228,157,16)" fg:x="139662" fg:w="3828"/><text x="93.2929%" y="559.50">as..</text></g><g><title>async_executor::Executor::run::{{closure}} (18,516 samples, 12.34%)</title><rect x="83.2777%" y="629" width="12.3354%" height="15" fill="rgb(217,59,31)" fg:x="125004" fg:w="18516"/><text x="83.5277%" y="639.50">async_executor::Ex..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (18,480 samples, 12.31%)</title><rect x="83.3017%" y="613" width="12.3114%" height="15" fill="rgb(237,138,41)" fg:x="125040" fg:w="18480"/><text x="83.5517%" y="623.50">&lt;futures_lite::fut..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,480 samples, 12.31%)</title><rect x="83.3017%" y="597" width="12.3114%" height="15" fill="rgb(227,91,49)" fg:x="125040" fg:w="18480"/><text x="83.5517%" y="607.50">&lt;core::future::fro..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (18,478 samples, 12.31%)</title><rect x="83.3030%" y="581" width="12.3100%" height="15" fill="rgb(247,21,44)" fg:x="125042" fg:w="18478"/><text x="83.5530%" y="591.50">async_executor::Ex..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (30 samples, 0.02%)</title><rect x="95.5931%" y="565" width="0.0200%" height="15" fill="rgb(219,210,51)" fg:x="143490" fg:w="30"/><text x="95.8431%" y="575.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (30 samples, 0.02%)</title><rect x="95.5931%" y="549" width="0.0200%" height="15" fill="rgb(209,140,6)" fg:x="143490" fg:w="30"/><text x="95.8431%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (20 samples, 0.01%)</title><rect x="95.7177%" y="373" width="0.0133%" height="15" fill="rgb(221,188,24)" fg:x="143677" fg:w="20"/><text x="95.9677%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (20 samples, 0.01%)</title><rect x="95.7177%" y="357" width="0.0133%" height="15" fill="rgb(232,154,20)" fg:x="143677" fg:w="20"/><text x="95.9677%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (17 samples, 0.01%)</title><rect x="95.7197%" y="341" width="0.0113%" height="15" fill="rgb(244,137,50)" fg:x="143680" fg:w="17"/><text x="95.9697%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.02%)</title><rect x="95.7177%" y="421" width="0.0160%" height="15" fill="rgb(225,185,43)" fg:x="143677" fg:w="24"/><text x="95.9677%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (24 samples, 0.02%)</title><rect x="95.7177%" y="405" width="0.0160%" height="15" fill="rgb(213,205,38)" fg:x="143677" fg:w="24"/><text x="95.9677%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (24 samples, 0.02%)</title><rect x="95.7177%" y="389" width="0.0160%" height="15" fill="rgb(236,73,12)" fg:x="143677" fg:w="24"/><text x="95.9677%" y="399.50"></text></g><g><title>concurrent_queue::full_fence (55 samples, 0.04%)</title><rect x="95.7610%" y="389" width="0.0366%" height="15" fill="rgb(235,219,13)" fg:x="143742" fg:w="55"/><text x="96.0110%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (54 samples, 0.04%)</title><rect x="95.7616%" y="373" width="0.0360%" height="15" fill="rgb(218,59,36)" fg:x="143743" fg:w="54"/><text x="96.0116%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (54 samples, 0.04%)</title><rect x="95.7616%" y="357" width="0.0360%" height="15" fill="rgb(205,110,39)" fg:x="143743" fg:w="54"/><text x="96.0116%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (54 samples, 0.04%)</title><rect x="95.7616%" y="341" width="0.0360%" height="15" fill="rgb(218,206,42)" fg:x="143743" fg:w="54"/><text x="96.0116%" y="351.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (164 samples, 0.11%)</title><rect x="95.7463%" y="405" width="0.1093%" height="15" fill="rgb(248,125,24)" fg:x="143720" fg:w="164"/><text x="95.9963%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (87 samples, 0.06%)</title><rect x="95.7976%" y="389" width="0.0580%" height="15" fill="rgb(242,28,27)" fg:x="143797" fg:w="87"/><text x="96.0476%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_load (87 samples, 0.06%)</title><rect x="95.7976%" y="373" width="0.0580%" height="15" fill="rgb(216,228,15)" fg:x="143797" fg:w="87"/><text x="96.0476%" y="383.50"></text></g><g><title>concurrent_queue::full_fence (61 samples, 0.04%)</title><rect x="95.8622%" y="389" width="0.0406%" height="15" fill="rgb(235,116,46)" fg:x="143894" fg:w="61"/><text x="96.1122%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (59 samples, 0.04%)</title><rect x="95.8636%" y="373" width="0.0393%" height="15" fill="rgb(224,18,32)" fg:x="143896" fg:w="59"/><text x="96.1136%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (59 samples, 0.04%)</title><rect x="95.8636%" y="357" width="0.0393%" height="15" fill="rgb(252,5,12)" fg:x="143896" fg:w="59"/><text x="96.1136%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (59 samples, 0.04%)</title><rect x="95.8636%" y="341" width="0.0393%" height="15" fill="rgb(251,36,5)" fg:x="143896" fg:w="59"/><text x="96.1136%" y="351.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (289 samples, 0.19%)</title><rect x="95.7337%" y="421" width="0.1925%" height="15" fill="rgb(217,53,14)" fg:x="143701" fg:w="289"/><text x="95.9837%" y="431.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (106 samples, 0.07%)</title><rect x="95.8556%" y="405" width="0.0706%" height="15" fill="rgb(215,86,45)" fg:x="143884" fg:w="106"/><text x="96.1056%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (29 samples, 0.02%)</title><rect x="95.9069%" y="389" width="0.0193%" height="15" fill="rgb(242,169,11)" fg:x="143961" fg:w="29"/><text x="96.1569%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_load (29 samples, 0.02%)</title><rect x="95.9069%" y="373" width="0.0193%" height="15" fill="rgb(211,213,45)" fg:x="143961" fg:w="29"/><text x="96.1569%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (43 samples, 0.03%)</title><rect x="95.9308%" y="357" width="0.0286%" height="15" fill="rgb(205,88,11)" fg:x="143997" fg:w="43"/><text x="96.1808%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_sub (43 samples, 0.03%)</title><rect x="95.9308%" y="341" width="0.0286%" height="15" fill="rgb(252,69,26)" fg:x="143997" fg:w="43"/><text x="96.1808%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (128 samples, 0.09%)</title><rect x="95.9262%" y="421" width="0.0853%" height="15" fill="rgb(246,123,37)" fg:x="143990" fg:w="128"/><text x="96.1762%" y="431.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (128 samples, 0.09%)</title><rect x="95.9262%" y="405" width="0.0853%" height="15" fill="rgb(212,205,5)" fg:x="143990" fg:w="128"/><text x="96.1762%" y="415.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read_unlock (121 samples, 0.08%)</title><rect x="95.9308%" y="389" width="0.0806%" height="15" fill="rgb(253,148,0)" fg:x="143997" fg:w="121"/><text x="96.1808%" y="399.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read_unlock (121 samples, 0.08%)</title><rect x="95.9308%" y="373" width="0.0806%" height="15" fill="rgb(239,22,4)" fg:x="143997" fg:w="121"/><text x="96.1808%" y="383.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::raw_unlock (78 samples, 0.05%)</title><rect x="95.9595%" y="357" width="0.0520%" height="15" fill="rgb(226,26,53)" fg:x="144040" fg:w="78"/><text x="96.2095%" y="367.50"></text></g><g><title>__GI___pthread_rwlock_unlock (78 samples, 0.05%)</title><rect x="95.9595%" y="341" width="0.0520%" height="15" fill="rgb(225,229,45)" fg:x="144040" fg:w="78"/><text x="96.2095%" y="351.50"></text></g><g><title>fastrand::usize (35 samples, 0.02%)</title><rect x="96.0115%" y="421" width="0.0233%" height="15" fill="rgb(220,60,37)" fg:x="144118" fg:w="35"/><text x="96.2615%" y="431.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (30 samples, 0.02%)</title><rect x="96.0148%" y="405" width="0.0200%" height="15" fill="rgb(217,180,35)" fg:x="144123" fg:w="30"/><text x="96.2648%" y="415.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (26 samples, 0.02%)</title><rect x="96.0175%" y="389" width="0.0173%" height="15" fill="rgb(229,7,53)" fg:x="144127" fg:w="26"/><text x="96.2675%" y="399.50"></text></g><g><title>fastrand::usize::{{closure}} (16 samples, 0.01%)</title><rect x="96.0241%" y="373" width="0.0107%" height="15" fill="rgb(254,137,3)" fg:x="144137" fg:w="16"/><text x="96.2741%" y="383.50"></text></g><g><title>fastrand::Rng::usize (16 samples, 0.01%)</title><rect x="96.0241%" y="357" width="0.0107%" height="15" fill="rgb(215,140,41)" fg:x="144137" fg:w="16"/><text x="96.2741%" y="367.50"></text></g><g><title>__GI___pthread_rwlock_rdlock (69 samples, 0.05%)</title><rect x="96.0428%" y="373" width="0.0460%" height="15" fill="rgb(250,80,15)" fg:x="144165" fg:w="69"/><text x="96.2928%" y="383.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (638 samples, 0.43%)</title><rect x="95.7077%" y="437" width="0.4250%" height="15" fill="rgb(252,191,6)" fg:x="143662" fg:w="638"/><text x="95.9577%" y="447.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (147 samples, 0.10%)</title><rect x="96.0348%" y="421" width="0.0979%" height="15" fill="rgb(246,217,18)" fg:x="144153" fg:w="147"/><text x="96.2848%" y="431.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read (138 samples, 0.09%)</title><rect x="96.0408%" y="405" width="0.0919%" height="15" fill="rgb(223,93,7)" fg:x="144162" fg:w="138"/><text x="96.2908%" y="415.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read (138 samples, 0.09%)</title><rect x="96.0408%" y="389" width="0.0919%" height="15" fill="rgb(225,55,52)" fg:x="144162" fg:w="138"/><text x="96.2908%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (66 samples, 0.04%)</title><rect x="96.0887%" y="373" width="0.0440%" height="15" fill="rgb(240,31,24)" fg:x="144234" fg:w="66"/><text x="96.3387%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_add (66 samples, 0.04%)</title><rect x="96.0887%" y="357" width="0.0440%" height="15" fill="rgb(205,56,52)" fg:x="144234" fg:w="66"/><text x="96.3387%" y="367.50"></text></g><g><title>async_executor::Sleepers::update (41 samples, 0.03%)</title><rect x="96.1400%" y="421" width="0.0273%" height="15" fill="rgb(246,146,12)" fg:x="144311" fg:w="41"/><text x="96.3900%" y="431.50"></text></g><g><title>core::task::wake::Waker::will_wake (25 samples, 0.02%)</title><rect x="96.1507%" y="405" width="0.0167%" height="15" fill="rgb(239,84,36)" fg:x="144327" fg:w="25"/><text x="96.4007%" y="415.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (25 samples, 0.02%)</title><rect x="96.1507%" y="389" width="0.0167%" height="15" fill="rgb(207,41,40)" fg:x="144327" fg:w="25"/><text x="96.4007%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (80 samples, 0.05%)</title><rect x="96.1673%" y="421" width="0.0533%" height="15" fill="rgb(241,179,25)" fg:x="144352" fg:w="80"/><text x="96.4173%" y="431.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (80 samples, 0.05%)</title><rect x="96.1673%" y="405" width="0.0533%" height="15" fill="rgb(210,0,34)" fg:x="144352" fg:w="80"/><text x="96.4173%" y="415.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (75 samples, 0.05%)</title><rect x="96.1707%" y="389" width="0.0500%" height="15" fill="rgb(225,217,29)" fg:x="144357" fg:w="75"/><text x="96.4207%" y="399.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (69 samples, 0.05%)</title><rect x="96.1747%" y="373" width="0.0460%" height="15" fill="rgb(216,191,38)" fg:x="144363" fg:w="69"/><text x="96.4247%" y="383.50"></text></g><g><title>__GI___pthread_mutex_unlock (65 samples, 0.04%)</title><rect x="96.1773%" y="357" width="0.0433%" height="15" fill="rgb(232,140,52)" fg:x="144367" fg:w="65"/><text x="96.4273%" y="367.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (901 samples, 0.60%)</title><rect x="95.6870%" y="549" width="0.6002%" height="15" fill="rgb(223,158,51)" fg:x="143631" fg:w="901"/><text x="95.9370%" y="559.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (889 samples, 0.59%)</title><rect x="95.6950%" y="533" width="0.5923%" height="15" fill="rgb(235,29,51)" fg:x="143643" fg:w="889"/><text x="95.9450%" y="543.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}} (885 samples, 0.59%)</title><rect x="95.6977%" y="517" width="0.5896%" height="15" fill="rgb(215,181,18)" fg:x="143647" fg:w="885"/><text x="95.9477%" y="527.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (880 samples, 0.59%)</title><rect x="95.7010%" y="501" width="0.5863%" height="15" fill="rgb(227,125,34)" fg:x="143652" fg:w="880"/><text x="95.9510%" y="511.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (880 samples, 0.59%)</title><rect x="95.7010%" y="485" width="0.5863%" height="15" fill="rgb(230,197,49)" fg:x="143652" fg:w="880"/><text x="95.9510%" y="495.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (874 samples, 0.58%)</title><rect x="95.7050%" y="469" width="0.5823%" height="15" fill="rgb(239,141,16)" fg:x="143658" fg:w="874"/><text x="95.9550%" y="479.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (871 samples, 0.58%)</title><rect x="95.7070%" y="453" width="0.5803%" height="15" fill="rgb(225,105,43)" fg:x="143661" fg:w="871"/><text x="95.9570%" y="463.50"></text></g><g><title>async_executor::Ticker::sleep (232 samples, 0.15%)</title><rect x="96.1327%" y="437" width="0.1546%" height="15" fill="rgb(214,131,14)" fg:x="144300" fg:w="232"/><text x="96.3827%" y="447.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (100 samples, 0.07%)</title><rect x="96.2206%" y="421" width="0.0666%" height="15" fill="rgb(229,177,11)" fg:x="144432" fg:w="100"/><text x="96.4706%" y="431.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (93 samples, 0.06%)</title><rect x="96.2253%" y="405" width="0.0620%" height="15" fill="rgb(231,180,14)" fg:x="144439" fg:w="93"/><text x="96.4753%" y="415.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (93 samples, 0.06%)</title><rect x="96.2253%" y="389" width="0.0620%" height="15" fill="rgb(232,88,2)" fg:x="144439" fg:w="93"/><text x="96.4753%" y="399.50"></text></g><g><title>__GI___pthread_mutex_lock (93 samples, 0.06%)</title><rect x="96.2253%" y="373" width="0.0620%" height="15" fill="rgb(205,220,8)" fg:x="144439" fg:w="93"/><text x="96.4753%" y="383.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (37 samples, 0.02%)</title><rect x="96.3612%" y="485" width="0.0246%" height="15" fill="rgb(225,23,53)" fg:x="144643" fg:w="37"/><text x="96.6112%" y="495.50"></text></g><g><title>core::mem::replace (37 samples, 0.02%)</title><rect x="96.3612%" y="469" width="0.0246%" height="15" fill="rgb(213,62,29)" fg:x="144643" fg:w="37"/><text x="96.6112%" y="479.50"></text></g><g><title>core::ptr::read (37 samples, 0.02%)</title><rect x="96.3612%" y="453" width="0.0246%" height="15" fill="rgb(227,75,7)" fg:x="144643" fg:w="37"/><text x="96.6112%" y="463.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (64 samples, 0.04%)</title><rect x="96.3519%" y="501" width="0.0426%" height="15" fill="rgb(207,105,14)" fg:x="144629" fg:w="64"/><text x="96.6019%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (72 samples, 0.05%)</title><rect x="96.3945%" y="501" width="0.0480%" height="15" fill="rgb(245,62,29)" fg:x="144693" fg:w="72"/><text x="96.6445%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (69 samples, 0.05%)</title><rect x="96.3965%" y="485" width="0.0460%" height="15" fill="rgb(236,202,4)" fg:x="144696" fg:w="69"/><text x="96.6465%" y="495.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (69 samples, 0.05%)</title><rect x="96.3965%" y="469" width="0.0460%" height="15" fill="rgb(250,67,1)" fg:x="144696" fg:w="69"/><text x="96.6465%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (67 samples, 0.04%)</title><rect x="96.3979%" y="453" width="0.0446%" height="15" fill="rgb(253,115,44)" fg:x="144698" fg:w="67"/><text x="96.6479%" y="463.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (67 samples, 0.04%)</title><rect x="96.3979%" y="437" width="0.0446%" height="15" fill="rgb(251,139,18)" fg:x="144698" fg:w="67"/><text x="96.6479%" y="447.50"></text></g><g><title>__GI___pthread_mutex_unlock (66 samples, 0.04%)</title><rect x="96.3985%" y="421" width="0.0440%" height="15" fill="rgb(218,22,32)" fg:x="144699" fg:w="66"/><text x="96.6485%" y="431.50"></text></g><g><title>core::task::wake::Waker::will_wake (18 samples, 0.01%)</title><rect x="96.4432%" y="501" width="0.0120%" height="15" fill="rgb(243,53,5)" fg:x="144766" fg:w="18"/><text x="96.6932%" y="511.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (18 samples, 0.01%)</title><rect x="96.4432%" y="485" width="0.0120%" height="15" fill="rgb(227,56,16)" fg:x="144766" fg:w="18"/><text x="96.6932%" y="495.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (413 samples, 0.28%)</title><rect x="96.3252%" y="517" width="0.2751%" height="15" fill="rgb(245,53,0)" fg:x="144589" fg:w="413"/><text x="96.5752%" y="527.50"></text></g><g><title>event_listener::Inner::lock (218 samples, 0.15%)</title><rect x="96.4551%" y="501" width="0.1452%" height="15" fill="rgb(216,170,35)" fg:x="144784" fg:w="218"/><text x="96.7051%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (212 samples, 0.14%)</title><rect x="96.4591%" y="485" width="0.1412%" height="15" fill="rgb(211,200,8)" fg:x="144790" fg:w="212"/><text x="96.7091%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (208 samples, 0.14%)</title><rect x="96.4618%" y="469" width="0.1386%" height="15" fill="rgb(228,204,44)" fg:x="144794" fg:w="208"/><text x="96.7118%" y="479.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (177 samples, 0.12%)</title><rect x="96.4825%" y="453" width="0.1179%" height="15" fill="rgb(214,121,17)" fg:x="144825" fg:w="177"/><text x="96.7325%" y="463.50"></text></g><g><title>__GI___pthread_mutex_lock (177 samples, 0.12%)</title><rect x="96.4825%" y="437" width="0.1179%" height="15" fill="rgb(233,64,38)" fg:x="144825" fg:w="177"/><text x="96.7325%" y="447.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,501 samples, 1.00%)</title><rect x="95.6837%" y="581" width="1.0000%" height="15" fill="rgb(253,54,19)" fg:x="143626" fg:w="1501"/><text x="95.9337%" y="591.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,496 samples, 1.00%)</title><rect x="95.6870%" y="565" width="0.9966%" height="15" fill="rgb(253,94,18)" fg:x="143631" fg:w="1496"/><text x="95.9370%" y="575.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}} (595 samples, 0.40%)</title><rect x="96.2873%" y="549" width="0.3964%" height="15" fill="rgb(227,57,52)" fg:x="144532" fg:w="595"/><text x="96.5373%" y="559.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (571 samples, 0.38%)</title><rect x="96.3033%" y="533" width="0.3804%" height="15" fill="rgb(230,228,50)" fg:x="144556" fg:w="571"/><text x="96.5533%" y="543.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (125 samples, 0.08%)</title><rect x="96.6004%" y="517" width="0.0833%" height="15" fill="rgb(217,205,27)" fg:x="145002" fg:w="125"/><text x="96.8504%" y="527.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (125 samples, 0.08%)</title><rect x="96.6004%" y="501" width="0.0833%" height="15" fill="rgb(252,71,50)" fg:x="145002" fg:w="125"/><text x="96.8504%" y="511.50"></text></g><g><title>concurrent_queue::single::Single&lt;T&gt;::pop (94 samples, 0.06%)</title><rect x="96.6210%" y="485" width="0.0626%" height="15" fill="rgb(209,86,4)" fg:x="145033" fg:w="94"/><text x="96.8710%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (83 samples, 0.06%)</title><rect x="96.6284%" y="469" width="0.0553%" height="15" fill="rgb(229,94,0)" fg:x="145044" fg:w="83"/><text x="96.8784%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (83 samples, 0.06%)</title><rect x="96.6284%" y="453" width="0.0553%" height="15" fill="rgb(252,223,21)" fg:x="145044" fg:w="83"/><text x="96.8784%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (83 samples, 0.06%)</title><rect x="96.6284%" y="437" width="0.0553%" height="15" fill="rgb(230,210,4)" fg:x="145044" fg:w="83"/><text x="96.8784%" y="447.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (20,212 samples, 13.47%)</title><rect x="83.2337%" y="661" width="13.4652%" height="15" fill="rgb(240,149,38)" fg:x="124938" fg:w="20212"/><text x="83.4837%" y="671.50">&lt;futures_lite::futur..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (20,148 samples, 13.42%)</title><rect x="83.2764%" y="645" width="13.4226%" height="15" fill="rgb(254,105,20)" fg:x="125002" fg:w="20148"/><text x="83.5264%" y="655.50">&lt;core::future::from_..</text></g><g><title>async_executor::LocalExecutor::run::{{closure}} (1,630 samples, 1.09%)</title><rect x="95.6131%" y="629" width="1.0859%" height="15" fill="rgb(253,87,46)" fg:x="143520" fg:w="1630"/><text x="95.8631%" y="639.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,531 samples, 1.02%)</title><rect x="95.6790%" y="613" width="1.0200%" height="15" fill="rgb(253,116,33)" fg:x="143619" fg:w="1531"/><text x="95.9290%" y="623.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (1,531 samples, 1.02%)</title><rect x="95.6790%" y="597" width="1.0200%" height="15" fill="rgb(229,198,5)" fg:x="143619" fg:w="1531"/><text x="95.9290%" y="607.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (20 samples, 0.01%)</title><rect x="96.7003%" y="581" width="0.0133%" height="15" fill="rgb(242,38,37)" fg:x="145152" fg:w="20"/><text x="96.9503%" y="591.50"></text></g><g><title>once_cell::imp::initialize_or_wait (20 samples, 0.01%)</title><rect x="96.7003%" y="565" width="0.0133%" height="15" fill="rgb(242,69,53)" fg:x="145152" fg:w="20"/><text x="96.9503%" y="575.50"></text></g><g><title>once_cell::imp::wait (20 samples, 0.01%)</title><rect x="96.7003%" y="549" width="0.0133%" height="15" fill="rgb(249,80,16)" fg:x="145152" fg:w="20"/><text x="96.9503%" y="559.50"></text></g><g><title>std::thread::park (20 samples, 0.01%)</title><rect x="96.7003%" y="533" width="0.0133%" height="15" fill="rgb(206,128,11)" fg:x="145152" fg:w="20"/><text x="96.9503%" y="543.50"></text></g><g><title>std::sys_common::thread_parker::futex::Parker::park (20 samples, 0.01%)</title><rect x="96.7003%" y="517" width="0.0133%" height="15" fill="rgb(212,35,20)" fg:x="145152" fg:w="20"/><text x="96.9503%" y="527.50"></text></g><g><title>std::sys::unix::futex::futex_wait (20 samples, 0.01%)</title><rect x="96.7003%" y="501" width="0.0133%" height="15" fill="rgb(236,79,13)" fg:x="145152" fg:w="20"/><text x="96.9503%" y="511.50"></text></g><g><title>syscall (20 samples, 0.01%)</title><rect x="96.7003%" y="485" width="0.0133%" height="15" fill="rgb(233,123,3)" fg:x="145152" fg:w="20"/><text x="96.9503%" y="495.50"></text></g><g><title>async_io::reactor::Reactor::get (29 samples, 0.02%)</title><rect x="96.7003%" y="661" width="0.0193%" height="15" fill="rgb(214,93,52)" fg:x="145152" fg:w="29"/><text x="96.9503%" y="671.50"></text></g><g><title>&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (29 samples, 0.02%)</title><rect x="96.7003%" y="645" width="0.0193%" height="15" fill="rgb(251,37,40)" fg:x="145152" fg:w="29"/><text x="96.9503%" y="655.50"></text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (29 samples, 0.02%)</title><rect x="96.7003%" y="629" width="0.0193%" height="15" fill="rgb(227,80,54)" fg:x="145152" fg:w="29"/><text x="96.9503%" y="639.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (29 samples, 0.02%)</title><rect x="96.7003%" y="613" width="0.0193%" height="15" fill="rgb(254,48,11)" fg:x="145152" fg:w="29"/><text x="96.9503%" y="623.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (29 samples, 0.02%)</title><rect x="96.7003%" y="597" width="0.0193%" height="15" fill="rgb(235,193,26)" fg:x="145152" fg:w="29"/><text x="96.9503%" y="607.50"></text></g><g><title>async_io::reactor::Reactor::try_lock (349 samples, 0.23%)</title><rect x="96.7196%" y="661" width="0.2325%" height="15" fill="rgb(229,99,21)" fg:x="145181" fg:w="349"/><text x="96.9696%" y="671.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (349 samples, 0.23%)</title><rect x="96.7196%" y="645" width="0.2325%" height="15" fill="rgb(211,140,41)" fg:x="145181" fg:w="349"/><text x="96.9696%" y="655.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (341 samples, 0.23%)</title><rect x="96.7250%" y="629" width="0.2272%" height="15" fill="rgb(240,227,30)" fg:x="145189" fg:w="341"/><text x="96.9750%" y="639.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::try_lock (309 samples, 0.21%)</title><rect x="96.7463%" y="613" width="0.2059%" height="15" fill="rgb(215,224,45)" fg:x="145221" fg:w="309"/><text x="96.9963%" y="623.50"></text></g><g><title>__GI___pthread_mutex_trylock (309 samples, 0.21%)</title><rect x="96.7463%" y="597" width="0.2059%" height="15" fill="rgb(206,123,31)" fg:x="145221" fg:w="309"/><text x="96.9963%" y="607.50"></text></g><g><title>sn_rust_dealloc (25 samples, 0.02%)</title><rect x="96.9868%" y="485" width="0.0167%" height="15" fill="rgb(210,138,16)" fg:x="145582" fg:w="25"/><text x="97.2368%" y="495.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (51 samples, 0.03%)</title><rect x="96.9854%" y="581" width="0.0340%" height="15" fill="rgb(228,57,28)" fg:x="145580" fg:w="51"/><text x="97.2354%" y="591.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (51 samples, 0.03%)</title><rect x="96.9854%" y="565" width="0.0340%" height="15" fill="rgb(242,170,10)" fg:x="145580" fg:w="51"/><text x="97.2354%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (51 samples, 0.03%)</title><rect x="96.9854%" y="549" width="0.0340%" height="15" fill="rgb(228,214,39)" fg:x="145580" fg:w="51"/><text x="97.2354%" y="559.50"></text></g><g><title>alloc::alloc::dealloc (51 samples, 0.03%)</title><rect x="96.9854%" y="533" width="0.0340%" height="15" fill="rgb(218,179,33)" fg:x="145580" fg:w="51"/><text x="97.2354%" y="543.50"></text></g><g><title>__rg_dealloc (51 samples, 0.03%)</title><rect x="96.9854%" y="517" width="0.0340%" height="15" fill="rgb(235,193,39)" fg:x="145580" fg:w="51"/><text x="97.2354%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (51 samples, 0.03%)</title><rect x="96.9854%" y="501" width="0.0340%" height="15" fill="rgb(219,221,36)" fg:x="145580" fg:w="51"/><text x="97.2354%" y="511.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (20 samples, 0.01%)</title><rect x="97.0061%" y="485" width="0.0133%" height="15" fill="rgb(248,218,19)" fg:x="145611" fg:w="20"/><text x="97.2561%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (56 samples, 0.04%)</title><rect x="96.9848%" y="629" width="0.0373%" height="15" fill="rgb(205,50,9)" fg:x="145579" fg:w="56"/><text x="97.2348%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V&gt;::dying_next (55 samples, 0.04%)</title><rect x="96.9854%" y="613" width="0.0366%" height="15" fill="rgb(238,81,28)" fg:x="145580" fg:w="55"/><text x="97.2354%" y="623.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (55 samples, 0.04%)</title><rect x="96.9854%" y="597" width="0.0366%" height="15" fill="rgb(235,110,19)" fg:x="145580" fg:w="55"/><text x="97.2354%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::Edge&gt;::move_suffix (35 samples, 0.02%)</title><rect x="97.0447%" y="597" width="0.0233%" height="15" fill="rgb(214,7,14)" fg:x="145669" fg:w="35"/><text x="97.2947%" y="607.50"></text></g><g><title>alloc::collections::btree::node::move_to_slice (25 samples, 0.02%)</title><rect x="97.0514%" y="581" width="0.0167%" height="15" fill="rgb(211,77,3)" fg:x="145679" fg:w="25"/><text x="97.3014%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (25 samples, 0.02%)</title><rect x="97.0514%" y="565" width="0.0167%" height="15" fill="rgb(229,5,9)" fg:x="145679" fg:w="25"/><text x="97.3014%" y="575.50"></text></g><g><title>[libc-2.31.so] (24 samples, 0.02%)</title><rect x="97.0521%" y="549" width="0.0160%" height="15" fill="rgb(225,90,11)" fg:x="145680" fg:w="24"/><text x="97.3021%" y="559.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (24 samples, 0.02%)</title><rect x="97.0714%" y="565" width="0.0160%" height="15" fill="rgb(242,56,8)" fg:x="145709" fg:w="24"/><text x="97.3214%" y="575.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (33 samples, 0.02%)</title><rect x="97.0687%" y="597" width="0.0220%" height="15" fill="rgb(249,212,39)" fg:x="145705" fg:w="33"/><text x="97.3187%" y="607.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (33 samples, 0.02%)</title><rect x="97.0687%" y="581" width="0.0220%" height="15" fill="rgb(236,90,9)" fg:x="145705" fg:w="33"/><text x="97.3187%" y="591.50"></text></g><g><title>snmalloc::Buddy&lt;snmalloc::BuddyChunkRep&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt; &gt;, 14ul, 21ul&gt;::add_block (37 samples, 0.02%)</title><rect x="97.4844%" y="341" width="0.0246%" height="15" fill="rgb(206,88,35)" fg:x="146329" fg:w="37"/><text x="97.7344%" y="351.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (576 samples, 0.38%)</title><rect x="97.1420%" y="389" width="0.3837%" height="15" fill="rgb(205,126,30)" fg:x="145815" fg:w="576"/><text x="97.3920%" y="399.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (74 samples, 0.05%)</title><rect x="97.4764%" y="373" width="0.0493%" height="15" fill="rgb(230,176,12)" fg:x="146317" fg:w="74"/><text x="97.7264%" y="383.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_slabs&lt;false&gt; (66 samples, 0.04%)</title><rect x="97.4818%" y="357" width="0.0440%" height="15" fill="rgb(243,19,9)" fg:x="146325" fg:w="66"/><text x="97.7318%" y="367.50"></text></g><g><title>snmalloc::range_to_pow_2_blocks&lt;4ul, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::SmallBuddyRange::Type&lt;snmalloc::LargeBuddyRange&lt;21ul, 21ul, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, 12ul&gt;::Type&lt;snmalloc::StatsRange::Type&lt;snmalloc::CommitRange&lt;snmalloc::PALLinux&gt;::Type&lt;snmalloc::GlobalRange::Type&lt;snmalloc::LogRange&lt;2ul&gt;::Type&lt;snmalloc::LargeBuddyRange&lt;24ul, 63ul, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, 14ul&gt;::Type&lt;snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::add_range(snmalloc::CapPtr&lt;void, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt; &gt;, unsigned long)::{lambda(snmalloc::CapPtr&lt;void, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt; &gt;, unsigned long, bool)#1}&gt; (25 samples, 0.02%)</title><rect x="97.5091%" y="341" width="0.0167%" height="15" fill="rgb(245,171,17)" fg:x="146366" fg:w="25"/><text x="97.7591%" y="351.50"></text></g><g><title>snmalloc::Buddy&lt;snmalloc::BuddyInplaceRep&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt; &gt;, 4ul, 14ul&gt;::add_block (25 samples, 0.02%)</title><rect x="97.5091%" y="325" width="0.0167%" height="15" fill="rgb(227,52,21)" fg:x="146366" fg:w="25"/><text x="97.7591%" y="335.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::split_off (736 samples, 0.49%)</title><rect x="97.0414%" y="613" width="0.4903%" height="15" fill="rgb(238,69,14)" fg:x="145664" fg:w="736"/><text x="97.2914%" y="623.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::new_pillar (662 samples, 0.44%)</title><rect x="97.0907%" y="597" width="0.4410%" height="15" fill="rgb(241,156,39)" fg:x="145738" fg:w="662"/><text x="97.3407%" y="607.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (662 samples, 0.44%)</title><rect x="97.0907%" y="581" width="0.4410%" height="15" fill="rgb(212,227,28)" fg:x="145738" fg:w="662"/><text x="97.3407%" y="591.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (662 samples, 0.44%)</title><rect x="97.0907%" y="565" width="0.4410%" height="15" fill="rgb(209,118,27)" fg:x="145738" fg:w="662"/><text x="97.3407%" y="575.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (662 samples, 0.44%)</title><rect x="97.0907%" y="549" width="0.4410%" height="15" fill="rgb(226,102,5)" fg:x="145738" fg:w="662"/><text x="97.3407%" y="559.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new_uninit (662 samples, 0.44%)</title><rect x="97.0907%" y="533" width="0.4410%" height="15" fill="rgb(223,34,3)" fg:x="145738" fg:w="662"/><text x="97.3407%" y="543.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (662 samples, 0.44%)</title><rect x="97.0907%" y="517" width="0.4410%" height="15" fill="rgb(221,81,38)" fg:x="145738" fg:w="662"/><text x="97.3407%" y="527.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (662 samples, 0.44%)</title><rect x="97.0907%" y="501" width="0.4410%" height="15" fill="rgb(236,219,28)" fg:x="145738" fg:w="662"/><text x="97.3407%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (662 samples, 0.44%)</title><rect x="97.0907%" y="485" width="0.4410%" height="15" fill="rgb(213,200,14)" fg:x="145738" fg:w="662"/><text x="97.3407%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (662 samples, 0.44%)</title><rect x="97.0907%" y="469" width="0.4410%" height="15" fill="rgb(240,33,19)" fg:x="145738" fg:w="662"/><text x="97.3407%" y="479.50"></text></g><g><title>alloc::alloc::alloc (662 samples, 0.44%)</title><rect x="97.0907%" y="453" width="0.4410%" height="15" fill="rgb(233,113,27)" fg:x="145738" fg:w="662"/><text x="97.3407%" y="463.50"></text></g><g><title>__rg_alloc (662 samples, 0.44%)</title><rect x="97.0907%" y="437" width="0.4410%" height="15" fill="rgb(220,221,18)" fg:x="145738" fg:w="662"/><text x="97.3407%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (662 samples, 0.44%)</title><rect x="97.0907%" y="421" width="0.4410%" height="15" fill="rgb(238,92,8)" fg:x="145738" fg:w="662"/><text x="97.3407%" y="431.50"></text></g><g><title>sn_rust_alloc (662 samples, 0.44%)</title><rect x="97.0907%" y="405" width="0.4410%" height="15" fill="rgb(222,164,16)" fg:x="145738" fg:w="662"/><text x="97.3407%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::split_off (749 samples, 0.50%)</title><rect x="97.0334%" y="629" width="0.4990%" height="15" fill="rgb(241,119,3)" fg:x="145652" fg:w="749"/><text x="97.2834%" y="639.50"></text></g><g><title>concurrent_queue::full_fence (29 samples, 0.02%)</title><rect x="97.5530%" y="581" width="0.0193%" height="15" fill="rgb(241,44,8)" fg:x="146432" fg:w="29"/><text x="97.8030%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (29 samples, 0.02%)</title><rect x="97.5530%" y="565" width="0.0193%" height="15" fill="rgb(230,36,40)" fg:x="146432" fg:w="29"/><text x="97.8030%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (29 samples, 0.02%)</title><rect x="97.5530%" y="549" width="0.0193%" height="15" fill="rgb(243,16,36)" fg:x="146432" fg:w="29"/><text x="97.8030%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (29 samples, 0.02%)</title><rect x="97.5530%" y="533" width="0.0193%" height="15" fill="rgb(231,4,26)" fg:x="146432" fg:w="29"/><text x="97.8030%" y="543.50"></text></g><g><title>async_io::reactor::Reactor::process_timer_ops (86 samples, 0.06%)</title><rect x="97.5324%" y="629" width="0.0573%" height="15" fill="rgb(240,9,31)" fg:x="146401" fg:w="86"/><text x="97.7824%" y="639.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (68 samples, 0.05%)</title><rect x="97.5444%" y="613" width="0.0453%" height="15" fill="rgb(207,173,15)" fg:x="146419" fg:w="68"/><text x="97.7944%" y="623.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (64 samples, 0.04%)</title><rect x="97.5471%" y="597" width="0.0426%" height="15" fill="rgb(224,192,53)" fg:x="146423" fg:w="64"/><text x="97.7971%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (26 samples, 0.02%)</title><rect x="97.5724%" y="581" width="0.0173%" height="15" fill="rgb(223,67,28)" fg:x="146461" fg:w="26"/><text x="97.8224%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_load (25 samples, 0.02%)</title><rect x="97.5730%" y="565" width="0.0167%" height="15" fill="rgb(211,20,47)" fg:x="146462" fg:w="25"/><text x="97.8230%" y="575.50"></text></g><g><title>core::mem::drop (250 samples, 0.17%)</title><rect x="97.5897%" y="629" width="0.1666%" height="15" fill="rgb(240,228,2)" fg:x="146487" fg:w="250"/><text x="97.8397%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::collections::btree::map::BTreeMap&lt;(std::time::Instant,usize),core::task::wake::Waker&gt;&gt;&gt; (250 samples, 0.17%)</title><rect x="97.5897%" y="613" width="0.1666%" height="15" fill="rgb(248,151,12)" fg:x="146487" fg:w="250"/><text x="97.8397%" y="623.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (250 samples, 0.17%)</title><rect x="97.5897%" y="597" width="0.1666%" height="15" fill="rgb(244,8,39)" fg:x="146487" fg:w="250"/><text x="97.8397%" y="607.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (248 samples, 0.17%)</title><rect x="97.5910%" y="581" width="0.1652%" height="15" fill="rgb(222,26,8)" fg:x="146489" fg:w="248"/><text x="97.8410%" y="591.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (240 samples, 0.16%)</title><rect x="97.5963%" y="565" width="0.1599%" height="15" fill="rgb(213,106,44)" fg:x="146497" fg:w="240"/><text x="97.8463%" y="575.50"></text></g><g><title>__GI___pthread_mutex_unlock (240 samples, 0.16%)</title><rect x="97.5963%" y="549" width="0.1599%" height="15" fill="rgb(214,129,20)" fg:x="146497" fg:w="240"/><text x="97.8463%" y="559.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (19 samples, 0.01%)</title><rect x="97.7576%" y="629" width="0.0127%" height="15" fill="rgb(212,32,13)" fg:x="146739" fg:w="19"/><text x="98.0076%" y="639.50"></text></g><g><title>async_io::reactor::Reactor::process_timers::{{closure}} (18 samples, 0.01%)</title><rect x="97.7582%" y="613" width="0.0120%" height="15" fill="rgb(208,168,33)" fg:x="146740" fg:w="18"/><text x="98.0082%" y="623.50"></text></g><g><title>std::time::Instant::duration_since (18 samples, 0.01%)</title><rect x="97.7582%" y="597" width="0.0120%" height="15" fill="rgb(231,207,8)" fg:x="146740" fg:w="18"/><text x="98.0082%" y="607.50"></text></g><g><title>std::time::Instant::checked_duration_since (18 samples, 0.01%)</title><rect x="97.7582%" y="581" width="0.0120%" height="15" fill="rgb(235,219,23)" fg:x="146740" fg:w="18"/><text x="98.0082%" y="591.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (18 samples, 0.01%)</title><rect x="97.7582%" y="565" width="0.0120%" height="15" fill="rgb(226,216,26)" fg:x="146740" fg:w="18"/><text x="98.0082%" y="575.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (16 samples, 0.01%)</title><rect x="97.7596%" y="549" width="0.0107%" height="15" fill="rgb(239,137,16)" fg:x="146742" fg:w="16"/><text x="98.0096%" y="559.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (102 samples, 0.07%)</title><rect x="97.7722%" y="629" width="0.0680%" height="15" fill="rgb(207,12,36)" fg:x="146761" fg:w="102"/><text x="98.0222%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (100 samples, 0.07%)</title><rect x="97.7736%" y="613" width="0.0666%" height="15" fill="rgb(210,214,24)" fg:x="146763" fg:w="100"/><text x="98.0236%" y="623.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (99 samples, 0.07%)</title><rect x="97.7742%" y="597" width="0.0660%" height="15" fill="rgb(206,56,30)" fg:x="146764" fg:w="99"/><text x="98.0242%" y="607.50"></text></g><g><title>__GI___pthread_mutex_lock (99 samples, 0.07%)</title><rect x="97.7742%" y="581" width="0.0660%" height="15" fill="rgb(228,143,26)" fg:x="146764" fg:w="99"/><text x="98.0242%" y="591.50"></text></g><g><title>__clock_gettime (66 samples, 0.04%)</title><rect x="97.8415%" y="581" width="0.0440%" height="15" fill="rgb(216,218,46)" fg:x="146865" fg:w="66"/><text x="98.0915%" y="591.50"></text></g><g><title>__vdso_clock_gettime (53 samples, 0.04%)</title><rect x="97.8502%" y="565" width="0.0353%" height="15" fill="rgb(206,6,19)" fg:x="146878" fg:w="53"/><text x="98.1002%" y="575.50"></text></g><g><title>[[vdso]] (50 samples, 0.03%)</title><rect x="97.8522%" y="549" width="0.0333%" height="15" fill="rgb(239,177,51)" fg:x="146881" fg:w="50"/><text x="98.1022%" y="559.50"></text></g><g><title>async_io::reactor::Reactor::process_timers (1,370 samples, 0.91%)</title><rect x="96.9735%" y="645" width="0.9127%" height="15" fill="rgb(216,55,25)" fg:x="145562" fg:w="1370"/><text x="97.2235%" y="655.50"></text></g><g><title>std::time::Instant::now (69 samples, 0.05%)</title><rect x="97.8402%" y="629" width="0.0460%" height="15" fill="rgb(231,163,29)" fg:x="146863" fg:w="69"/><text x="98.0902%" y="639.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (69 samples, 0.05%)</title><rect x="97.8402%" y="613" width="0.0460%" height="15" fill="rgb(232,149,50)" fg:x="146863" fg:w="69"/><text x="98.0902%" y="623.50"></text></g><g><title>std::sys::unix::time::inner::now (69 samples, 0.05%)</title><rect x="97.8402%" y="597" width="0.0460%" height="15" fill="rgb(223,142,48)" fg:x="146863" fg:w="69"/><text x="98.0902%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (41 samples, 0.03%)</title><rect x="97.8881%" y="645" width="0.0273%" height="15" fill="rgb(245,83,23)" fg:x="146935" fg:w="41"/><text x="98.1381%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_add (41 samples, 0.03%)</title><rect x="97.8881%" y="629" width="0.0273%" height="15" fill="rgb(224,63,2)" fg:x="146935" fg:w="41"/><text x="98.1381%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;polling::epoll::Events&gt;&gt; (134 samples, 0.09%)</title><rect x="97.9554%" y="629" width="0.0893%" height="15" fill="rgb(218,65,53)" fg:x="147036" fg:w="134"/><text x="98.2054%" y="639.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (134 samples, 0.09%)</title><rect x="97.9554%" y="613" width="0.0893%" height="15" fill="rgb(221,84,29)" fg:x="147036" fg:w="134"/><text x="98.2054%" y="623.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (128 samples, 0.09%)</title><rect x="97.9594%" y="597" width="0.0853%" height="15" fill="rgb(234,0,32)" fg:x="147042" fg:w="128"/><text x="98.2094%" y="607.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (127 samples, 0.08%)</title><rect x="97.9601%" y="581" width="0.0846%" height="15" fill="rgb(206,20,16)" fg:x="147043" fg:w="127"/><text x="98.2101%" y="591.50"></text></g><g><title>__GI___pthread_mutex_unlock (127 samples, 0.08%)</title><rect x="97.9601%" y="565" width="0.0846%" height="15" fill="rgb(244,172,18)" fg:x="147043" fg:w="127"/><text x="98.2101%" y="575.50"></text></g><g><title>__pthread_disable_asynccancel (23 samples, 0.02%)</title><rect x="98.1846%" y="597" width="0.0153%" height="15" fill="rgb(254,133,1)" fg:x="147380" fg:w="23"/><text x="98.4346%" y="607.50"></text></g><g><title>__libc_read (167 samples, 0.11%)</title><rect x="98.1373%" y="613" width="0.1113%" height="15" fill="rgb(222,206,41)" fg:x="147309" fg:w="167"/><text x="98.3873%" y="623.50"></text></g><g><title>__pthread_enable_asynccancel (73 samples, 0.05%)</title><rect x="98.1999%" y="597" width="0.0486%" height="15" fill="rgb(212,3,42)" fg:x="147403" fg:w="73"/><text x="98.4499%" y="607.50"></text></g><g><title>epoll_wait (184 samples, 0.12%)</title><rect x="98.2492%" y="613" width="0.1226%" height="15" fill="rgb(241,11,4)" fg:x="147477" fg:w="184"/><text x="98.4992%" y="623.50"></text></g><g><title>[libc-2.31.so] (55 samples, 0.04%)</title><rect x="98.3352%" y="597" width="0.0366%" height="15" fill="rgb(205,19,26)" fg:x="147606" fg:w="55"/><text x="98.5852%" y="607.50"></text></g><g><title>polling::epoll::Poller::modify (104 samples, 0.07%)</title><rect x="98.3751%" y="613" width="0.0693%" height="15" fill="rgb(210,179,32)" fg:x="147666" fg:w="104"/><text x="98.6251%" y="623.50"></text></g><g><title>polling::epoll::Poller::ctl (87 samples, 0.06%)</title><rect x="98.3865%" y="597" width="0.0580%" height="15" fill="rgb(227,116,49)" fg:x="147683" fg:w="87"/><text x="98.6365%" y="607.50"></text></g><g><title>epoll_ctl (80 samples, 0.05%)</title><rect x="98.3911%" y="581" width="0.0533%" height="15" fill="rgb(211,146,6)" fg:x="147690" fg:w="80"/><text x="98.6411%" y="591.50"></text></g><g><title>polling::epoll::Poller::wait (640 samples, 0.43%)</title><rect x="98.0507%" y="629" width="0.4264%" height="15" fill="rgb(219,44,39)" fg:x="147179" fg:w="640"/><text x="98.3007%" y="639.50"></text></g><g><title>syscall (48 samples, 0.03%)</title><rect x="98.4451%" y="613" width="0.0320%" height="15" fill="rgb(234,128,11)" fg:x="147771" fg:w="48"/><text x="98.6951%" y="623.50"></text></g><g><title>polling::Poller::wait (885 samples, 0.59%)</title><rect x="97.9168%" y="645" width="0.5896%" height="15" fill="rgb(220,183,53)" fg:x="146978" fg:w="885"/><text x="98.1668%" y="655.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (44 samples, 0.03%)</title><rect x="98.4771%" y="629" width="0.0293%" height="15" fill="rgb(213,219,32)" fg:x="147819" fg:w="44"/><text x="98.7271%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (41 samples, 0.03%)</title><rect x="98.4791%" y="613" width="0.0273%" height="15" fill="rgb(232,156,16)" fg:x="147822" fg:w="41"/><text x="98.7291%" y="623.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::try_lock (39 samples, 0.03%)</title><rect x="98.4804%" y="597" width="0.0260%" height="15" fill="rgb(246,135,34)" fg:x="147824" fg:w="39"/><text x="98.7304%" y="607.50"></text></g><g><title>__GI___pthread_mutex_trylock (39 samples, 0.03%)</title><rect x="98.4804%" y="581" width="0.0260%" height="15" fill="rgb(241,99,0)" fg:x="147824" fg:w="39"/><text x="98.7304%" y="591.50"></text></g><g><title>async_io::reactor::ReactorLock::react (2,334 samples, 1.55%)</title><rect x="96.9521%" y="661" width="1.5549%" height="15" fill="rgb(222,103,45)" fg:x="145530" fg:w="2334"/><text x="97.2021%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (36 samples, 0.02%)</title><rect x="98.5077%" y="613" width="0.0240%" height="15" fill="rgb(212,57,4)" fg:x="147865" fg:w="36"/><text x="98.7577%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_store (36 samples, 0.02%)</title><rect x="98.5077%" y="597" width="0.0240%" height="15" fill="rgb(215,68,47)" fg:x="147865" fg:w="36"/><text x="98.7577%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_io::driver::CallOnDrop&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (46 samples, 0.03%)</title><rect x="98.5070%" y="661" width="0.0306%" height="15" fill="rgb(230,84,2)" fg:x="147864" fg:w="46"/><text x="98.7570%" y="671.50"></text></g><g><title>&lt;async_io::driver::CallOnDrop&lt;F&gt; as core::ops::drop::Drop&gt;::drop (46 samples, 0.03%)</title><rect x="98.5070%" y="645" width="0.0306%" height="15" fill="rgb(220,102,14)" fg:x="147864" fg:w="46"/><text x="98.7570%" y="655.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (46 samples, 0.03%)</title><rect x="98.5070%" y="629" width="0.0306%" height="15" fill="rgb(240,10,32)" fg:x="147864" fg:w="46"/><text x="98.7570%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_io::reactor::ReactorLock&gt; (52 samples, 0.03%)</title><rect x="98.5377%" y="661" width="0.0346%" height="15" fill="rgb(215,47,27)" fg:x="147910" fg:w="52"/><text x="98.7877%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::vec::Vec&lt;polling::Event&gt;&gt;&gt; (52 samples, 0.03%)</title><rect x="98.5377%" y="645" width="0.0346%" height="15" fill="rgb(233,188,43)" fg:x="147910" fg:w="52"/><text x="98.7877%" y="655.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (52 samples, 0.03%)</title><rect x="98.5377%" y="629" width="0.0346%" height="15" fill="rgb(253,190,1)" fg:x="147910" fg:w="52"/><text x="98.7877%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (50 samples, 0.03%)</title><rect x="98.5390%" y="613" width="0.0333%" height="15" fill="rgb(206,114,52)" fg:x="147912" fg:w="50"/><text x="98.7890%" y="623.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (49 samples, 0.03%)</title><rect x="98.5397%" y="597" width="0.0326%" height="15" fill="rgb(233,120,37)" fg:x="147913" fg:w="49"/><text x="98.7897%" y="607.50"></text></g><g><title>__GI___pthread_mutex_unlock (48 samples, 0.03%)</title><rect x="98.5404%" y="581" width="0.0320%" height="15" fill="rgb(214,52,39)" fg:x="147914" fg:w="48"/><text x="98.7904%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (23 samples, 0.02%)</title><rect x="98.5730%" y="661" width="0.0153%" height="15" fill="rgb(223,80,29)" fg:x="147963" fg:w="23"/><text x="98.8230%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_store (23 samples, 0.02%)</title><rect x="98.5730%" y="645" width="0.0153%" height="15" fill="rgb(230,101,40)" fg:x="147963" fg:w="23"/><text x="98.8230%" y="655.50"></text></g><g><title>__GI___pthread_mutex_unlock (104 samples, 0.07%)</title><rect x="98.6076%" y="629" width="0.0693%" height="15" fill="rgb(219,211,8)" fg:x="148015" fg:w="104"/><text x="98.8576%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (125 samples, 0.08%)</title><rect x="98.6796%" y="629" width="0.0833%" height="15" fill="rgb(252,126,28)" fg:x="148123" fg:w="125"/><text x="98.9296%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (125 samples, 0.08%)</title><rect x="98.6796%" y="613" width="0.0833%" height="15" fill="rgb(215,56,38)" fg:x="148123" fg:w="125"/><text x="98.9296%" y="623.50"></text></g><g><title>std::sync::poison::Flag::get (48 samples, 0.03%)</title><rect x="98.7635%" y="613" width="0.0320%" height="15" fill="rgb(249,55,44)" fg:x="148249" fg:w="48"/><text x="99.0135%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (48 samples, 0.03%)</title><rect x="98.7635%" y="597" width="0.0320%" height="15" fill="rgb(220,221,32)" fg:x="148249" fg:w="48"/><text x="99.0135%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_load (48 samples, 0.03%)</title><rect x="98.7635%" y="581" width="0.0320%" height="15" fill="rgb(212,216,41)" fg:x="148249" fg:w="48"/><text x="99.0135%" y="591.50"></text></g><g><title>__pthread_disable_asynccancel (62 samples, 0.04%)</title><rect x="99.2992%" y="565" width="0.0413%" height="15" fill="rgb(228,213,43)" fg:x="149053" fg:w="62"/><text x="99.5492%" y="575.50"></text></g><g><title>__pthread_enable_asynccancel (28 samples, 0.02%)</title><rect x="99.3405%" y="565" width="0.0187%" height="15" fill="rgb(211,31,26)" fg:x="149115" fg:w="28"/><text x="99.5905%" y="575.50"></text></g><g><title>__pthread_mutex_cond_lock (62 samples, 0.04%)</title><rect x="99.3591%" y="565" width="0.0413%" height="15" fill="rgb(229,202,19)" fg:x="149143" fg:w="62"/><text x="99.6091%" y="575.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::wait (931 samples, 0.62%)</title><rect x="98.7968%" y="597" width="0.6202%" height="15" fill="rgb(229,105,46)" fg:x="148299" fg:w="931"/><text x="99.0468%" y="607.50"></text></g><g><title>__pthread_cond_wait (931 samples, 0.62%)</title><rect x="98.7968%" y="581" width="0.6202%" height="15" fill="rgb(235,108,1)" fg:x="148299" fg:w="931"/><text x="99.0468%" y="591.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (25 samples, 0.02%)</title><rect x="99.4004%" y="565" width="0.0167%" height="15" fill="rgb(245,111,35)" fg:x="149205" fg:w="25"/><text x="99.6504%" y="575.50"></text></g><g><title>std::sync::condvar::Condvar::wait (1,008 samples, 0.67%)</title><rect x="98.7635%" y="629" width="0.6715%" height="15" fill="rgb(219,185,31)" fg:x="148249" fg:w="1008"/><text x="99.0135%" y="639.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (960 samples, 0.64%)</title><rect x="98.7955%" y="613" width="0.6396%" height="15" fill="rgb(214,4,43)" fg:x="148297" fg:w="960"/><text x="99.0455%" y="623.50"></text></g><g><title>std::sys_common::condvar::check::SameMutexCheck::verify (27 samples, 0.02%)</title><rect x="99.4171%" y="597" width="0.0180%" height="15" fill="rgb(235,227,40)" fg:x="149230" fg:w="27"/><text x="99.6671%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::compare_exchange (24 samples, 0.02%)</title><rect x="99.4191%" y="581" width="0.0160%" height="15" fill="rgb(230,88,30)" fg:x="149233" fg:w="24"/><text x="99.6691%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (24 samples, 0.02%)</title><rect x="99.4191%" y="565" width="0.0160%" height="15" fill="rgb(216,217,1)" fg:x="149233" fg:w="24"/><text x="99.6691%" y="575.50"></text></g><g><title>parking::Parker::park (1,304 samples, 0.87%)</title><rect x="98.5963%" y="661" width="0.8687%" height="15" fill="rgb(248,139,50)" fg:x="147998" fg:w="1304"/><text x="98.8463%" y="671.50"></text></g><g><title>parking::Inner::park (1,301 samples, 0.87%)</title><rect x="98.5983%" y="645" width="0.8667%" height="15" fill="rgb(233,1,21)" fg:x="148001" fg:w="1301"/><text x="98.8483%" y="655.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (45 samples, 0.03%)</title><rect x="99.4351%" y="629" width="0.0300%" height="15" fill="rgb(215,183,12)" fg:x="149257" fg:w="45"/><text x="99.6851%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (45 samples, 0.03%)</title><rect x="99.4351%" y="613" width="0.0300%" height="15" fill="rgb(229,104,42)" fg:x="149257" fg:w="45"/><text x="99.6851%" y="623.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (43 samples, 0.03%)</title><rect x="99.4364%" y="597" width="0.0286%" height="15" fill="rgb(243,34,48)" fg:x="149259" fg:w="43"/><text x="99.6864%" y="607.50"></text></g><g><title>__GI___pthread_mutex_lock (43 samples, 0.03%)</title><rect x="99.4364%" y="581" width="0.0286%" height="15" fill="rgb(239,11,44)" fg:x="149259" fg:w="43"/><text x="99.6864%" y="591.50"></text></g><g><title>parking::Parker::park_timeout (329 samples, 0.22%)</title><rect x="99.4650%" y="661" width="0.2192%" height="15" fill="rgb(231,98,35)" fg:x="149302" fg:w="329"/><text x="99.7150%" y="671.50"></text></g><g><title>parking::Inner::park (280 samples, 0.19%)</title><rect x="99.4977%" y="645" width="0.1865%" height="15" fill="rgb(233,28,25)" fg:x="149351" fg:w="280"/><text x="99.7477%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (258 samples, 0.17%)</title><rect x="99.5123%" y="629" width="0.1719%" height="15" fill="rgb(234,123,11)" fg:x="149373" fg:w="258"/><text x="99.7623%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (258 samples, 0.17%)</title><rect x="99.5123%" y="613" width="0.1719%" height="15" fill="rgb(220,69,3)" fg:x="149373" fg:w="258"/><text x="99.7623%" y="623.50"></text></g><g><title>std::panic::catch_unwind (24,839 samples, 16.55%)</title><rect x="83.1724%" y="949" width="16.5477%" height="15" fill="rgb(214,64,36)" fg:x="124846" fg:w="24839"/><text x="83.4224%" y="959.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (24,839 samples, 16.55%)</title><rect x="83.1724%" y="933" width="16.5477%" height="15" fill="rgb(211,138,32)" fg:x="124846" fg:w="24839"/><text x="83.4224%" y="943.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (24,839 samples, 16.55%)</title><rect x="83.1724%" y="917" width="16.5477%" height="15" fill="rgb(213,118,47)" fg:x="124846" fg:w="24839"/><text x="83.4224%" y="927.50">std::panicking::try::do_ca..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (24,839 samples, 16.55%)</title><rect x="83.1724%" y="901" width="16.5477%" height="15" fill="rgb(243,124,49)" fg:x="124846" fg:w="24839"/><text x="83.4224%" y="911.50">&lt;core::panic::unwind_safe:..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (24,839 samples, 16.55%)</title><rect x="83.1724%" y="885" width="16.5477%" height="15" fill="rgb(221,30,28)" fg:x="124846" fg:w="24839"/><text x="83.4224%" y="895.50">std::thread::Builder::spaw..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (24,839 samples, 16.55%)</title><rect x="83.1724%" y="869" width="16.5477%" height="15" fill="rgb(246,37,13)" fg:x="124846" fg:w="24839"/><text x="83.4224%" y="879.50">std::sys_common::backtrace..</text></g><g><title>core::ops::function::FnOnce::call_once (24,839 samples, 16.55%)</title><rect x="83.1724%" y="853" width="16.5477%" height="15" fill="rgb(249,66,14)" fg:x="124846" fg:w="24839"/><text x="83.4224%" y="863.50">core::ops::function::FnOnc..</text></g><g><title>async_global_executor::threading::thread_main_loop (24,839 samples, 16.55%)</title><rect x="83.1724%" y="837" width="16.5477%" height="15" fill="rgb(213,166,5)" fg:x="124846" fg:w="24839"/><text x="83.4224%" y="847.50">async_global_executor::thr..</text></g><g><title>std::panic::catch_unwind (24,811 samples, 16.53%)</title><rect x="83.1911%" y="821" width="16.5291%" height="15" fill="rgb(221,66,24)" fg:x="124874" fg:w="24811"/><text x="83.4411%" y="831.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (24,811 samples, 16.53%)</title><rect x="83.1911%" y="805" width="16.5291%" height="15" fill="rgb(210,132,17)" fg:x="124874" fg:w="24811"/><text x="83.4411%" y="815.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (24,811 samples, 16.53%)</title><rect x="83.1911%" y="789" width="16.5291%" height="15" fill="rgb(243,202,5)" fg:x="124874" fg:w="24811"/><text x="83.4411%" y="799.50">std::panicking::try::do_ca..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (24,811 samples, 16.53%)</title><rect x="83.1911%" y="773" width="16.5291%" height="15" fill="rgb(233,70,48)" fg:x="124874" fg:w="24811"/><text x="83.4411%" y="783.50">async_global_executor::thr..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (24,811 samples, 16.53%)</title><rect x="83.1911%" y="757" width="16.5291%" height="15" fill="rgb(238,41,26)" fg:x="124874" fg:w="24811"/><text x="83.4411%" y="767.50">std::thread::local::LocalK..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (24,811 samples, 16.53%)</title><rect x="83.1911%" y="741" width="16.5291%" height="15" fill="rgb(241,19,31)" fg:x="124874" fg:w="24811"/><text x="83.4411%" y="751.50">std::thread::local::LocalK..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (24,811 samples, 16.53%)</title><rect x="83.1911%" y="725" width="16.5291%" height="15" fill="rgb(214,76,10)" fg:x="124874" fg:w="24811"/><text x="83.4411%" y="735.50">async_global_executor::thr..</text></g><g><title>async_global_executor::reactor::block_on (24,811 samples, 16.53%)</title><rect x="83.1911%" y="709" width="16.5291%" height="15" fill="rgb(254,202,22)" fg:x="124874" fg:w="24811"/><text x="83.4411%" y="719.50">async_global_executor::rea..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (24,811 samples, 16.53%)</title><rect x="83.1911%" y="693" width="16.5291%" height="15" fill="rgb(214,72,24)" fg:x="124874" fg:w="24811"/><text x="83.4411%" y="703.50">async_global_executor::rea..</text></g><g><title>async_io::driver::block_on (24,811 samples, 16.53%)</title><rect x="83.1911%" y="677" width="16.5291%" height="15" fill="rgb(221,92,46)" fg:x="124874" fg:w="24811"/><text x="83.4411%" y="687.50">async_io::driver::block_on</text></g><g><title>std::time::Instant::now (44 samples, 0.03%)</title><rect x="99.6909%" y="661" width="0.0293%" height="15" fill="rgb(246,13,50)" fg:x="149641" fg:w="44"/><text x="99.9409%" y="671.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (44 samples, 0.03%)</title><rect x="99.6909%" y="645" width="0.0293%" height="15" fill="rgb(240,165,38)" fg:x="149641" fg:w="44"/><text x="99.9409%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::now (44 samples, 0.03%)</title><rect x="99.6909%" y="629" width="0.0293%" height="15" fill="rgb(241,24,51)" fg:x="149641" fg:w="44"/><text x="99.9409%" y="639.50"></text></g><g><title>__clock_gettime (33 samples, 0.02%)</title><rect x="99.6982%" y="613" width="0.0220%" height="15" fill="rgb(227,51,44)" fg:x="149652" fg:w="33"/><text x="99.9482%" y="623.50"></text></g><g><title>__vdso_clock_gettime (32 samples, 0.02%)</title><rect x="99.6989%" y="597" width="0.0213%" height="15" fill="rgb(231,121,3)" fg:x="149653" fg:w="32"/><text x="99.9489%" y="607.50"></text></g><g><title>[[vdso]] (29 samples, 0.02%)</title><rect x="99.7009%" y="581" width="0.0193%" height="15" fill="rgb(245,3,41)" fg:x="149656" fg:w="29"/><text x="99.9509%" y="591.50"></text></g><g><title>clone (24,860 samples, 16.56%)</title><rect x="83.1625%" y="1061" width="16.5617%" height="15" fill="rgb(214,13,26)" fg:x="124831" fg:w="24860"/><text x="83.4125%" y="1071.50">clone</text></g><g><title>start_thread (24,845 samples, 16.55%)</title><rect x="83.1724%" y="1045" width="16.5517%" height="15" fill="rgb(252,75,11)" fg:x="124846" fg:w="24845"/><text x="83.4224%" y="1055.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (24,845 samples, 16.55%)</title><rect x="83.1724%" y="1029" width="16.5517%" height="15" fill="rgb(218,226,17)" fg:x="124846" fg:w="24845"/><text x="83.4224%" y="1039.50">std::sys::unix::thread::Th..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (24,845 samples, 16.55%)</title><rect x="83.1724%" y="1013" width="16.5517%" height="15" fill="rgb(248,89,38)" fg:x="124846" fg:w="24845"/><text x="83.4224%" y="1023.50">&lt;alloc::boxed::Box&lt;F,A&gt; as..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (24,845 samples, 16.55%)</title><rect x="83.1724%" y="997" width="16.5517%" height="15" fill="rgb(237,73,46)" fg:x="124846" fg:w="24845"/><text x="83.4224%" y="1007.50">&lt;alloc::boxed::Box&lt;F,A&gt; as..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (24,845 samples, 16.55%)</title><rect x="83.1724%" y="981" width="16.5517%" height="15" fill="rgb(242,78,33)" fg:x="124846" fg:w="24845"/><text x="83.4224%" y="991.50">core::ops::function::FnOnc..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (24,845 samples, 16.55%)</title><rect x="83.1724%" y="965" width="16.5517%" height="15" fill="rgb(235,60,3)" fg:x="124846" fg:w="24845"/><text x="83.4224%" y="975.50">std::thread::Builder::spaw..</text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (17 samples, 0.01%)</title><rect x="99.7622%" y="1061" width="0.0113%" height="15" fill="rgb(216,172,19)" fg:x="149748" fg:w="17"/><text x="100.0122%" y="1071.50"></text></g><g><title>async-std/runti (149,701 samples, 99.73%)</title><rect x="0.0660%" y="1077" width="99.7309%" height="15" fill="rgb(227,6,42)" fg:x="99" fg:w="149701"/><text x="0.3160%" y="1087.50">async-std/runti</text></g><g><title>tremor_value::value::ValueDeserializer::parse (29 samples, 0.02%)</title><rect x="99.7775%" y="1061" width="0.0193%" height="15" fill="rgb(223,207,42)" fg:x="149771" fg:w="29"/><text x="100.0275%" y="1071.50"></text></g><g><title>blocking-2 (18 samples, 0.01%)</title><rect x="99.8041%" y="1077" width="0.0120%" height="15" fill="rgb(246,138,30)" fg:x="149811" fg:w="18"/><text x="100.0541%" y="1087.50"></text></g><g><title>clone (18 samples, 0.01%)</title><rect x="99.8041%" y="1061" width="0.0120%" height="15" fill="rgb(251,199,47)" fg:x="149811" fg:w="18"/><text x="100.0541%" y="1071.50"></text></g><g><title>start_thread (18 samples, 0.01%)</title><rect x="99.8041%" y="1045" width="0.0120%" height="15" fill="rgb(228,218,44)" fg:x="149811" fg:w="18"/><text x="100.0541%" y="1055.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (18 samples, 0.01%)</title><rect x="99.8041%" y="1029" width="0.0120%" height="15" fill="rgb(220,68,6)" fg:x="149811" fg:w="18"/><text x="100.0541%" y="1039.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (18 samples, 0.01%)</title><rect x="99.8041%" y="1013" width="0.0120%" height="15" fill="rgb(240,60,26)" fg:x="149811" fg:w="18"/><text x="100.0541%" y="1023.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (18 samples, 0.01%)</title><rect x="99.8041%" y="997" width="0.0120%" height="15" fill="rgb(211,200,19)" fg:x="149811" fg:w="18"/><text x="100.0541%" y="1007.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (18 samples, 0.01%)</title><rect x="99.8041%" y="981" width="0.0120%" height="15" fill="rgb(242,145,30)" fg:x="149811" fg:w="18"/><text x="100.0541%" y="991.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (18 samples, 0.01%)</title><rect x="99.8041%" y="965" width="0.0120%" height="15" fill="rgb(225,64,13)" fg:x="149811" fg:w="18"/><text x="100.0541%" y="975.50"></text></g><g><title>std::panic::catch_unwind (18 samples, 0.01%)</title><rect x="99.8041%" y="949" width="0.0120%" height="15" fill="rgb(218,103,35)" fg:x="149811" fg:w="18"/><text x="100.0541%" y="959.50"></text></g><g><title>std::panicking::try (18 samples, 0.01%)</title><rect x="99.8041%" y="933" width="0.0120%" height="15" fill="rgb(216,93,46)" fg:x="149811" fg:w="18"/><text x="100.0541%" y="943.50"></text></g><g><title>std::panicking::try::do_call (18 samples, 0.01%)</title><rect x="99.8041%" y="917" width="0.0120%" height="15" fill="rgb(225,159,27)" fg:x="149811" fg:w="18"/><text x="100.0541%" y="927.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (18 samples, 0.01%)</title><rect x="99.8041%" y="901" width="0.0120%" height="15" fill="rgb(225,204,11)" fg:x="149811" fg:w="18"/><text x="100.0541%" y="911.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (18 samples, 0.01%)</title><rect x="99.8041%" y="885" width="0.0120%" height="15" fill="rgb(205,56,4)" fg:x="149811" fg:w="18"/><text x="100.0541%" y="895.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (18 samples, 0.01%)</title><rect x="99.8041%" y="869" width="0.0120%" height="15" fill="rgb(206,6,35)" fg:x="149811" fg:w="18"/><text x="100.0541%" y="879.50"></text></g><g><title>blocking::Executor::grow_pool::{{closure}} (18 samples, 0.01%)</title><rect x="99.8041%" y="853" width="0.0120%" height="15" fill="rgb(247,73,52)" fg:x="149811" fg:w="18"/><text x="100.0541%" y="863.50"></text></g><g><title>blocking::Executor::main_loop (18 samples, 0.01%)</title><rect x="99.8041%" y="837" width="0.0120%" height="15" fill="rgb(246,97,4)" fg:x="149811" fg:w="18"/><text x="100.0541%" y="847.50"></text></g><g><title>std::sync::condvar::Condvar::wait_timeout (16 samples, 0.01%)</title><rect x="99.8055%" y="821" width="0.0107%" height="15" fill="rgb(212,37,15)" fg:x="149813" fg:w="16"/><text x="100.0555%" y="831.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait_timeout (16 samples, 0.01%)</title><rect x="99.8055%" y="805" width="0.0107%" height="15" fill="rgb(208,130,40)" fg:x="149813" fg:w="16"/><text x="100.0555%" y="815.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::wait_timeout (16 samples, 0.01%)</title><rect x="99.8055%" y="789" width="0.0107%" height="15" fill="rgb(236,55,29)" fg:x="149813" fg:w="16"/><text x="100.0555%" y="799.50"></text></g><g><title>__pthread_cond_timedwait (16 samples, 0.01%)</title><rect x="99.8055%" y="773" width="0.0107%" height="15" fill="rgb(209,156,45)" fg:x="149813" fg:w="16"/><text x="100.0555%" y="783.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (80 samples, 0.05%)</title><rect x="99.8255%" y="837" width="0.0533%" height="15" fill="rgb(249,107,4)" fg:x="149843" fg:w="80"/><text x="100.0755%" y="847.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (79 samples, 0.05%)</title><rect x="99.8261%" y="821" width="0.0526%" height="15" fill="rgb(227,7,13)" fg:x="149844" fg:w="79"/><text x="100.0761%" y="831.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (79 samples, 0.05%)</title><rect x="99.8261%" y="805" width="0.0526%" height="15" fill="rgb(250,129,14)" fg:x="149844" fg:w="79"/><text x="100.0761%" y="815.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (79 samples, 0.05%)</title><rect x="99.8261%" y="789" width="0.0526%" height="15" fill="rgb(229,92,13)" fg:x="149844" fg:w="79"/><text x="100.0761%" y="799.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (79 samples, 0.05%)</title><rect x="99.8261%" y="773" width="0.0526%" height="15" fill="rgb(245,98,39)" fg:x="149844" fg:w="79"/><text x="100.0761%" y="783.50"></text></g><g><title>__GI___pthread_mutex_lock (79 samples, 0.05%)</title><rect x="99.8261%" y="757" width="0.0526%" height="15" fill="rgb(234,135,48)" fg:x="149844" fg:w="79"/><text x="100.0761%" y="767.50"></text></g><g><title>__lll_lock_wait (79 samples, 0.05%)</title><rect x="99.8261%" y="741" width="0.0526%" height="15" fill="rgb(230,98,28)" fg:x="149844" fg:w="79"/><text x="100.0761%" y="751.50"></text></g><g><title>std::panic::catch_unwind (81 samples, 0.05%)</title><rect x="99.8255%" y="949" width="0.0540%" height="15" fill="rgb(223,121,0)" fg:x="149843" fg:w="81"/><text x="100.0755%" y="959.50"></text></g><g><title>std::panicking::try (81 samples, 0.05%)</title><rect x="99.8255%" y="933" width="0.0540%" height="15" fill="rgb(234,173,33)" fg:x="149843" fg:w="81"/><text x="100.0755%" y="943.50"></text></g><g><title>std::panicking::try::do_call (81 samples, 0.05%)</title><rect x="99.8255%" y="917" width="0.0540%" height="15" fill="rgb(245,47,8)" fg:x="149843" fg:w="81"/><text x="100.0755%" y="927.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (81 samples, 0.05%)</title><rect x="99.8255%" y="901" width="0.0540%" height="15" fill="rgb(205,17,20)" fg:x="149843" fg:w="81"/><text x="100.0755%" y="911.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (81 samples, 0.05%)</title><rect x="99.8255%" y="885" width="0.0540%" height="15" fill="rgb(232,151,16)" fg:x="149843" fg:w="81"/><text x="100.0755%" y="895.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (81 samples, 0.05%)</title><rect x="99.8255%" y="869" width="0.0540%" height="15" fill="rgb(208,30,32)" fg:x="149843" fg:w="81"/><text x="100.0755%" y="879.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (81 samples, 0.05%)</title><rect x="99.8255%" y="853" width="0.0540%" height="15" fill="rgb(254,26,3)" fg:x="149843" fg:w="81"/><text x="100.0755%" y="863.50"></text></g><g><title>tokio-runtime-w (85 samples, 0.06%)</title><rect x="99.8248%" y="1077" width="0.0566%" height="15" fill="rgb(240,177,30)" fg:x="149842" fg:w="85"/><text x="100.0748%" y="1087.50"></text></g><g><title>clone (85 samples, 0.06%)</title><rect x="99.8248%" y="1061" width="0.0566%" height="15" fill="rgb(248,76,44)" fg:x="149842" fg:w="85"/><text x="100.0748%" y="1071.50"></text></g><g><title>start_thread (85 samples, 0.06%)</title><rect x="99.8248%" y="1045" width="0.0566%" height="15" fill="rgb(241,186,54)" fg:x="149842" fg:w="85"/><text x="100.0748%" y="1055.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (85 samples, 0.06%)</title><rect x="99.8248%" y="1029" width="0.0566%" height="15" fill="rgb(249,171,29)" fg:x="149842" fg:w="85"/><text x="100.0748%" y="1039.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (85 samples, 0.06%)</title><rect x="99.8248%" y="1013" width="0.0566%" height="15" fill="rgb(237,151,44)" fg:x="149842" fg:w="85"/><text x="100.0748%" y="1023.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (85 samples, 0.06%)</title><rect x="99.8248%" y="997" width="0.0566%" height="15" fill="rgb(228,174,30)" fg:x="149842" fg:w="85"/><text x="100.0748%" y="1007.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (85 samples, 0.06%)</title><rect x="99.8248%" y="981" width="0.0566%" height="15" fill="rgb(252,14,37)" fg:x="149842" fg:w="85"/><text x="100.0748%" y="991.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (85 samples, 0.06%)</title><rect x="99.8248%" y="965" width="0.0566%" height="15" fill="rgb(207,111,40)" fg:x="149842" fg:w="85"/><text x="100.0748%" y="975.50"></text></g><g><title>all (150,105 samples, 100%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(248,171,54)" fg:x="0" fg:w="150105"/><text x="0.2500%" y="1103.50"></text></g><g><title>tremor-pdk-half (178 samples, 0.12%)</title><rect x="99.8814%" y="1077" width="0.1186%" height="15" fill="rgb(211,127,2)" fg:x="149927" fg:w="178"/><text x="100.1314%" y="1087.50"></text></g><g><title>clone (164 samples, 0.11%)</title><rect x="99.8907%" y="1061" width="0.1093%" height="15" fill="rgb(236,87,47)" fg:x="149941" fg:w="164"/><text x="100.1407%" y="1071.50"></text></g></svg></svg>