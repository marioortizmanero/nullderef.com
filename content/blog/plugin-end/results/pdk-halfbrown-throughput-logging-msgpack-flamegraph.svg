<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1174" onload="init(evt)" viewBox="0 0 1200 1174" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1174" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1157.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1157.00"> </text><svg id="frames" x="10" width="1180" total_samples="117789"><g><title>std::sys::unix::futex::futex_wait (32 samples, 0.03%)</title><rect x="0.0059%" y="757" width="0.0272%" height="15" fill="rgb(227,0,7)" fg:x="7" fg:w="32"/><text x="0.2559%" y="767.50"></text></g><g><title>syscall (29 samples, 0.02%)</title><rect x="0.0085%" y="741" width="0.0246%" height="15" fill="rgb(217,0,24)" fg:x="10" fg:w="29"/><text x="0.2585%" y="751.50"></text></g><g><title>std::sync::condvar::Condvar::wait_timeout (33 samples, 0.03%)</title><rect x="0.0059%" y="821" width="0.0280%" height="15" fill="rgb(221,193,54)" fg:x="7" fg:w="33"/><text x="0.2559%" y="831.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait_timeout (33 samples, 0.03%)</title><rect x="0.0059%" y="805" width="0.0280%" height="15" fill="rgb(248,212,6)" fg:x="7" fg:w="33"/><text x="0.2559%" y="815.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait_timeout (33 samples, 0.03%)</title><rect x="0.0059%" y="789" width="0.0280%" height="15" fill="rgb(208,68,35)" fg:x="7" fg:w="33"/><text x="0.2559%" y="799.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait_optional_timeout (33 samples, 0.03%)</title><rect x="0.0059%" y="773" width="0.0280%" height="15" fill="rgb(232,128,0)" fg:x="7" fg:w="33"/><text x="0.2559%" y="783.50"></text></g><g><title>async-io (40 samples, 0.03%)</title><rect x="0.0008%" y="1109" width="0.0340%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="40"/><text x="0.2508%" y="1119.50"></text></g><g><title>clone (36 samples, 0.03%)</title><rect x="0.0042%" y="1093" width="0.0306%" height="15" fill="rgb(228,23,34)" fg:x="5" fg:w="36"/><text x="0.2542%" y="1103.50"></text></g><g><title>start_thread (36 samples, 0.03%)</title><rect x="0.0042%" y="1077" width="0.0306%" height="15" fill="rgb(218,30,26)" fg:x="5" fg:w="36"/><text x="0.2542%" y="1087.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (36 samples, 0.03%)</title><rect x="0.0042%" y="1061" width="0.0306%" height="15" fill="rgb(220,122,19)" fg:x="5" fg:w="36"/><text x="0.2542%" y="1071.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (36 samples, 0.03%)</title><rect x="0.0042%" y="1045" width="0.0306%" height="15" fill="rgb(250,228,42)" fg:x="5" fg:w="36"/><text x="0.2542%" y="1055.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (36 samples, 0.03%)</title><rect x="0.0042%" y="1029" width="0.0306%" height="15" fill="rgb(240,193,28)" fg:x="5" fg:w="36"/><text x="0.2542%" y="1039.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (36 samples, 0.03%)</title><rect x="0.0042%" y="1013" width="0.0306%" height="15" fill="rgb(216,20,37)" fg:x="5" fg:w="36"/><text x="0.2542%" y="1023.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (36 samples, 0.03%)</title><rect x="0.0042%" y="997" width="0.0306%" height="15" fill="rgb(206,188,39)" fg:x="5" fg:w="36"/><text x="0.2542%" y="1007.50"></text></g><g><title>std::panic::catch_unwind (36 samples, 0.03%)</title><rect x="0.0042%" y="981" width="0.0306%" height="15" fill="rgb(217,207,13)" fg:x="5" fg:w="36"/><text x="0.2542%" y="991.50"></text></g><g><title>std::panicking::try (36 samples, 0.03%)</title><rect x="0.0042%" y="965" width="0.0306%" height="15" fill="rgb(231,73,38)" fg:x="5" fg:w="36"/><text x="0.2542%" y="975.50"></text></g><g><title>std::panicking::try::do_call (36 samples, 0.03%)</title><rect x="0.0042%" y="949" width="0.0306%" height="15" fill="rgb(225,20,46)" fg:x="5" fg:w="36"/><text x="0.2542%" y="959.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (36 samples, 0.03%)</title><rect x="0.0042%" y="933" width="0.0306%" height="15" fill="rgb(210,31,41)" fg:x="5" fg:w="36"/><text x="0.2542%" y="943.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (36 samples, 0.03%)</title><rect x="0.0042%" y="917" width="0.0306%" height="15" fill="rgb(221,200,47)" fg:x="5" fg:w="36"/><text x="0.2542%" y="927.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (36 samples, 0.03%)</title><rect x="0.0042%" y="901" width="0.0306%" height="15" fill="rgb(226,26,5)" fg:x="5" fg:w="36"/><text x="0.2542%" y="911.50"></text></g><g><title>async_io::driver::UNPARKER::{{closure}}::{{closure}} (36 samples, 0.03%)</title><rect x="0.0042%" y="885" width="0.0306%" height="15" fill="rgb(249,33,26)" fg:x="5" fg:w="36"/><text x="0.2542%" y="895.50"></text></g><g><title>async_io::driver::main_loop (36 samples, 0.03%)</title><rect x="0.0042%" y="869" width="0.0306%" height="15" fill="rgb(235,183,28)" fg:x="5" fg:w="36"/><text x="0.2542%" y="879.50"></text></g><g><title>parking::Parker::park_timeout (34 samples, 0.03%)</title><rect x="0.0059%" y="853" width="0.0289%" height="15" fill="rgb(221,5,38)" fg:x="7" fg:w="34"/><text x="0.2559%" y="863.50"></text></g><g><title>parking::Inner::park (34 samples, 0.03%)</title><rect x="0.0059%" y="837" width="0.0289%" height="15" fill="rgb(247,18,42)" fg:x="7" fg:w="34"/><text x="0.2559%" y="847.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12 samples, 0.01%)</title><rect x="0.0603%" y="1093" width="0.0102%" height="15" fill="rgb(241,131,45)" fg:x="71" fg:w="12"/><text x="0.3103%" y="1103.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_key (39 samples, 0.03%)</title><rect x="0.2504%" y="1045" width="0.0331%" height="15" fill="rgb(249,31,29)" fg:x="295" fg:w="39"/><text x="0.5004%" y="1055.50"></text></g><g><title>serde::de::MapAccess::next_key (39 samples, 0.03%)</title><rect x="0.2504%" y="1029" width="0.0331%" height="15" fill="rgb(225,111,53)" fg:x="295" fg:w="39"/><text x="0.5004%" y="1039.50"></text></g><g><title>&lt;rmp_serde::decode::MapAccess&lt;R,C&gt; as serde::de::MapAccess&gt;::next_key_seed (39 samples, 0.03%)</title><rect x="0.2504%" y="1013" width="0.0331%" height="15" fill="rgb(238,160,17)" fg:x="295" fg:w="39"/><text x="0.5004%" y="1023.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (39 samples, 0.03%)</title><rect x="0.2504%" y="997" width="0.0331%" height="15" fill="rgb(214,148,48)" fg:x="295" fg:w="39"/><text x="0.5004%" y="1007.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for &amp;str&gt;::deserialize (39 samples, 0.03%)</title><rect x="0.2504%" y="981" width="0.0331%" height="15" fill="rgb(232,36,49)" fg:x="295" fg:w="39"/><text x="0.5004%" y="991.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_str (39 samples, 0.03%)</title><rect x="0.2504%" y="965" width="0.0331%" height="15" fill="rgb(209,103,24)" fg:x="295" fg:w="39"/><text x="0.5004%" y="975.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_map (71 samples, 0.06%)</title><rect x="0.2504%" y="1061" width="0.0603%" height="15" fill="rgb(229,88,8)" fg:x="295" fg:w="71"/><text x="0.5004%" y="1071.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_value (32 samples, 0.03%)</title><rect x="0.2836%" y="1045" width="0.0272%" height="15" fill="rgb(213,181,19)" fg:x="334" fg:w="32"/><text x="0.5336%" y="1055.50"></text></g><g><title>serde::de::MapAccess::next_value (32 samples, 0.03%)</title><rect x="0.2836%" y="1029" width="0.0272%" height="15" fill="rgb(254,191,54)" fg:x="334" fg:w="32"/><text x="0.5336%" y="1039.50"></text></g><g><title>&lt;rmp_serde::decode::MapAccess&lt;R,C&gt; as serde::de::MapAccess&gt;::next_value_seed (32 samples, 0.03%)</title><rect x="0.2836%" y="1013" width="0.0272%" height="15" fill="rgb(241,83,37)" fg:x="334" fg:w="32"/><text x="0.5336%" y="1023.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (32 samples, 0.03%)</title><rect x="0.2836%" y="997" width="0.0272%" height="15" fill="rgb(233,36,39)" fg:x="334" fg:w="32"/><text x="0.5336%" y="1007.50"></text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (32 samples, 0.03%)</title><rect x="0.2836%" y="981" width="0.0272%" height="15" fill="rgb(226,3,54)" fg:x="334" fg:w="32"/><text x="0.5336%" y="991.50"></text></g><g><title>&lt;&amp;mut A as serde::de::SeqAccess&gt;::next_element (45 samples, 0.04%)</title><rect x="0.3107%" y="1045" width="0.0382%" height="15" fill="rgb(245,192,40)" fg:x="366" fg:w="45"/><text x="0.5607%" y="1055.50"></text></g><g><title>serde::de::SeqAccess::next_element (45 samples, 0.04%)</title><rect x="0.3107%" y="1029" width="0.0382%" height="15" fill="rgb(238,167,29)" fg:x="366" fg:w="45"/><text x="0.5607%" y="1039.50"></text></g><g><title>&lt;rmp_serde::decode::SeqAccess&lt;R,C&gt; as serde::de::SeqAccess&gt;::next_element_seed (45 samples, 0.04%)</title><rect x="0.3107%" y="1013" width="0.0382%" height="15" fill="rgb(232,182,51)" fg:x="366" fg:w="45"/><text x="0.5607%" y="1023.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (45 samples, 0.04%)</title><rect x="0.3107%" y="997" width="0.0382%" height="15" fill="rgb(231,60,39)" fg:x="366" fg:w="45"/><text x="0.5607%" y="1007.50"></text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (45 samples, 0.04%)</title><rect x="0.3107%" y="981" width="0.0382%" height="15" fill="rgb(208,69,12)" fg:x="366" fg:w="45"/><text x="0.5607%" y="991.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_seq (49 samples, 0.04%)</title><rect x="0.3107%" y="1061" width="0.0416%" height="15" fill="rgb(235,93,37)" fg:x="366" fg:w="49"/><text x="0.5607%" y="1071.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (364 samples, 0.31%)</title><rect x="0.0917%" y="1077" width="0.3090%" height="15" fill="rgb(213,116,39)" fg:x="108" fg:w="364"/><text x="0.3417%" y="1087.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::read_str_data (57 samples, 0.05%)</title><rect x="0.3523%" y="1061" width="0.0484%" height="15" fill="rgb(222,207,29)" fg:x="415" fg:w="57"/><text x="0.6023%" y="1071.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (75 samples, 0.06%)</title><rect x="0.6749%" y="1045" width="0.0637%" height="15" fill="rgb(206,96,30)" fg:x="795" fg:w="75"/><text x="0.9249%" y="1055.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (75 samples, 0.06%)</title><rect x="0.6749%" y="1029" width="0.0637%" height="15" fill="rgb(218,138,4)" fg:x="795" fg:w="75"/><text x="0.9249%" y="1039.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (75 samples, 0.06%)</title><rect x="0.6749%" y="1013" width="0.0637%" height="15" fill="rgb(250,191,14)" fg:x="795" fg:w="75"/><text x="0.9249%" y="1023.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (75 samples, 0.06%)</title><rect x="0.6749%" y="997" width="0.0637%" height="15" fill="rgb(239,60,40)" fg:x="795" fg:w="75"/><text x="0.9249%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (75 samples, 0.06%)</title><rect x="0.6749%" y="981" width="0.0637%" height="15" fill="rgb(206,27,48)" fg:x="795" fg:w="75"/><text x="0.9249%" y="991.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (75 samples, 0.06%)</title><rect x="0.6749%" y="965" width="0.0637%" height="15" fill="rgb(225,35,8)" fg:x="795" fg:w="75"/><text x="0.9249%" y="975.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (73 samples, 0.06%)</title><rect x="0.6766%" y="949" width="0.0620%" height="15" fill="rgb(250,213,24)" fg:x="797" fg:w="73"/><text x="0.9266%" y="959.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_str (451 samples, 0.38%)</title><rect x="0.4007%" y="1077" width="0.3829%" height="15" fill="rgb(247,123,22)" fg:x="472" fg:w="451"/><text x="0.6507%" y="1087.50"></text></g><g><title>rmp::encode::str::write_str (128 samples, 0.11%)</title><rect x="0.6749%" y="1061" width="0.1087%" height="15" fill="rgb(231,138,38)" fg:x="795" fg:w="128"/><text x="0.9249%" y="1071.50"></text></g><g><title>rmp::encode::str::write_str_len (53 samples, 0.04%)</title><rect x="0.7386%" y="1045" width="0.0450%" height="15" fill="rgb(231,145,46)" fg:x="870" fg:w="53"/><text x="0.9886%" y="1055.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (17 samples, 0.01%)</title><rect x="0.7836%" y="1077" width="0.0144%" height="15" fill="rgb(251,118,11)" fg:x="923" fg:w="17"/><text x="1.0336%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (17 samples, 0.01%)</title><rect x="0.8159%" y="1061" width="0.0144%" height="15" fill="rgb(217,147,25)" fg:x="961" fg:w="17"/><text x="1.0659%" y="1071.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (56 samples, 0.05%)</title><rect x="0.8057%" y="1077" width="0.0475%" height="15" fill="rgb(247,81,37)" fg:x="949" fg:w="56"/><text x="1.0557%" y="1087.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (27 samples, 0.02%)</title><rect x="0.8303%" y="1061" width="0.0229%" height="15" fill="rgb(209,12,38)" fg:x="978" fg:w="27"/><text x="1.0803%" y="1071.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (27 samples, 0.02%)</title><rect x="0.8303%" y="1045" width="0.0229%" height="15" fill="rgb(227,1,9)" fg:x="978" fg:w="27"/><text x="1.0803%" y="1055.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (27 samples, 0.02%)</title><rect x="0.8303%" y="1029" width="0.0229%" height="15" fill="rgb(248,47,43)" fg:x="978" fg:w="27"/><text x="1.0803%" y="1039.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (69 samples, 0.06%)</title><rect x="0.8532%" y="1077" width="0.0586%" height="15" fill="rgb(221,10,30)" fg:x="1005" fg:w="69"/><text x="1.1032%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (17 samples, 0.01%)</title><rect x="0.8974%" y="1061" width="0.0144%" height="15" fill="rgb(210,229,1)" fg:x="1057" fg:w="17"/><text x="1.1474%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (17 samples, 0.01%)</title><rect x="0.8974%" y="1045" width="0.0144%" height="15" fill="rgb(222,148,37)" fg:x="1057" fg:w="17"/><text x="1.1474%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (17 samples, 0.01%)</title><rect x="0.8974%" y="1029" width="0.0144%" height="15" fill="rgb(234,67,33)" fg:x="1057" fg:w="17"/><text x="1.1474%" y="1039.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (17 samples, 0.01%)</title><rect x="0.8974%" y="1013" width="0.0144%" height="15" fill="rgb(247,98,35)" fg:x="1057" fg:w="17"/><text x="1.1474%" y="1023.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (17 samples, 0.01%)</title><rect x="0.8974%" y="997" width="0.0144%" height="15" fill="rgb(247,138,52)" fg:x="1057" fg:w="17"/><text x="1.1474%" y="1007.50"></text></g><g><title>alloc::alloc::exchange_malloc (17 samples, 0.01%)</title><rect x="0.8974%" y="981" width="0.0144%" height="15" fill="rgb(213,79,30)" fg:x="1057" fg:w="17"/><text x="1.1474%" y="991.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.01%)</title><rect x="0.8974%" y="965" width="0.0144%" height="15" fill="rgb(246,177,23)" fg:x="1057" fg:w="17"/><text x="1.1474%" y="975.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.01%)</title><rect x="0.8974%" y="949" width="0.0144%" height="15" fill="rgb(230,62,27)" fg:x="1057" fg:w="17"/><text x="1.1474%" y="959.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.01%)</title><rect x="0.8974%" y="933" width="0.0144%" height="15" fill="rgb(216,154,8)" fg:x="1057" fg:w="17"/><text x="1.1474%" y="943.50"></text></g><g><title>__rg_alloc (17 samples, 0.01%)</title><rect x="0.8974%" y="917" width="0.0144%" height="15" fill="rgb(244,35,45)" fg:x="1057" fg:w="17"/><text x="1.1474%" y="927.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (17 samples, 0.01%)</title><rect x="0.8974%" y="901" width="0.0144%" height="15" fill="rgb(251,115,12)" fg:x="1057" fg:w="17"/><text x="1.1474%" y="911.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (18 samples, 0.02%)</title><rect x="0.9169%" y="1061" width="0.0153%" height="15" fill="rgb(240,54,50)" fg:x="1080" fg:w="18"/><text x="1.1669%" y="1071.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::size_hint (18 samples, 0.02%)</title><rect x="0.9169%" y="1045" width="0.0153%" height="15" fill="rgb(233,84,52)" fg:x="1080" fg:w="18"/><text x="1.1669%" y="1055.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (18 samples, 0.02%)</title><rect x="0.9169%" y="1029" width="0.0153%" height="15" fill="rgb(207,117,47)" fg:x="1080" fg:w="18"/><text x="1.1669%" y="1039.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (18 samples, 0.02%)</title><rect x="0.9169%" y="1013" width="0.0153%" height="15" fill="rgb(249,43,39)" fg:x="1080" fg:w="18"/><text x="1.1669%" y="1023.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (33 samples, 0.03%)</title><rect x="0.9118%" y="1077" width="0.0280%" height="15" fill="rgb(209,38,44)" fg:x="1074" fg:w="33"/><text x="1.1618%" y="1087.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (16 samples, 0.01%)</title><rect x="0.9441%" y="1077" width="0.0136%" height="15" fill="rgb(236,212,23)" fg:x="1112" fg:w="16"/><text x="1.1941%" y="1087.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (13 samples, 0.01%)</title><rect x="0.9466%" y="1061" width="0.0110%" height="15" fill="rgb(242,79,21)" fg:x="1115" fg:w="13"/><text x="1.1966%" y="1071.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (13 samples, 0.01%)</title><rect x="0.9466%" y="1045" width="0.0110%" height="15" fill="rgb(211,96,35)" fg:x="1115" fg:w="13"/><text x="1.1966%" y="1055.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (13 samples, 0.01%)</title><rect x="0.9466%" y="1029" width="0.0110%" height="15" fill="rgb(253,215,40)" fg:x="1115" fg:w="13"/><text x="1.1966%" y="1039.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (73 samples, 0.06%)</title><rect x="0.9746%" y="1077" width="0.0620%" height="15" fill="rgb(211,81,21)" fg:x="1148" fg:w="73"/><text x="1.2246%" y="1087.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (14 samples, 0.01%)</title><rect x="1.1071%" y="1061" width="0.0119%" height="15" fill="rgb(208,190,38)" fg:x="1304" fg:w="14"/><text x="1.3571%" y="1071.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (98 samples, 0.08%)</title><rect x="1.0366%" y="1077" width="0.0832%" height="15" fill="rgb(235,213,38)" fg:x="1221" fg:w="98"/><text x="1.2866%" y="1087.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (32 samples, 0.03%)</title><rect x="1.1198%" y="1077" width="0.0272%" height="15" fill="rgb(237,122,38)" fg:x="1319" fg:w="32"/><text x="1.3698%" y="1087.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (23 samples, 0.02%)</title><rect x="1.1470%" y="1077" width="0.0195%" height="15" fill="rgb(244,218,35)" fg:x="1351" fg:w="23"/><text x="1.3970%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (30 samples, 0.03%)</title><rect x="1.4195%" y="1045" width="0.0255%" height="15" fill="rgb(240,68,47)" fg:x="1672" fg:w="30"/><text x="1.6695%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (30 samples, 0.03%)</title><rect x="1.4195%" y="1029" width="0.0255%" height="15" fill="rgb(210,16,53)" fg:x="1672" fg:w="30"/><text x="1.6695%" y="1039.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (57 samples, 0.05%)</title><rect x="1.4000%" y="1061" width="0.0484%" height="15" fill="rgb(235,124,12)" fg:x="1649" fg:w="57"/><text x="1.6500%" y="1071.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (14 samples, 0.01%)</title><rect x="1.4484%" y="1045" width="0.0119%" height="15" fill="rgb(224,169,11)" fg:x="1706" fg:w="14"/><text x="1.6984%" y="1055.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (21 samples, 0.02%)</title><rect x="1.4484%" y="1061" width="0.0178%" height="15" fill="rgb(250,166,2)" fg:x="1706" fg:w="21"/><text x="1.6984%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (27 samples, 0.02%)</title><rect x="1.4704%" y="1029" width="0.0229%" height="15" fill="rgb(242,216,29)" fg:x="1732" fg:w="27"/><text x="1.7204%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (27 samples, 0.02%)</title><rect x="1.4704%" y="1013" width="0.0229%" height="15" fill="rgb(230,116,27)" fg:x="1732" fg:w="27"/><text x="1.7204%" y="1023.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (27 samples, 0.02%)</title><rect x="1.4704%" y="997" width="0.0229%" height="15" fill="rgb(228,99,48)" fg:x="1732" fg:w="27"/><text x="1.7204%" y="1007.50"></text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (31 samples, 0.03%)</title><rect x="1.4704%" y="1061" width="0.0263%" height="15" fill="rgb(253,11,6)" fg:x="1732" fg:w="31"/><text x="1.7204%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (31 samples, 0.03%)</title><rect x="1.4704%" y="1045" width="0.0263%" height="15" fill="rgb(247,143,39)" fg:x="1732" fg:w="31"/><text x="1.7204%" y="1055.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (19 samples, 0.02%)</title><rect x="1.4967%" y="1061" width="0.0161%" height="15" fill="rgb(236,97,10)" fg:x="1763" fg:w="19"/><text x="1.7467%" y="1071.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (25 samples, 0.02%)</title><rect x="1.5129%" y="1061" width="0.0212%" height="15" fill="rgb(233,208,19)" fg:x="1782" fg:w="25"/><text x="1.7629%" y="1071.50"></text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (12 samples, 0.01%)</title><rect x="1.5341%" y="1061" width="0.0102%" height="15" fill="rgb(216,164,2)" fg:x="1807" fg:w="12"/><text x="1.7841%" y="1071.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (475 samples, 0.40%)</title><rect x="1.1665%" y="1077" width="0.4033%" height="15" fill="rgb(220,129,5)" fg:x="1374" fg:w="475"/><text x="1.4165%" y="1087.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (30 samples, 0.03%)</title><rect x="1.5443%" y="1061" width="0.0255%" height="15" fill="rgb(242,17,10)" fg:x="1819" fg:w="30"/><text x="1.7943%" y="1071.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (39 samples, 0.03%)</title><rect x="1.5698%" y="1077" width="0.0331%" height="15" fill="rgb(242,107,0)" fg:x="1849" fg:w="39"/><text x="1.8198%" y="1087.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (17 samples, 0.01%)</title><rect x="1.6063%" y="1077" width="0.0144%" height="15" fill="rgb(251,28,31)" fg:x="1892" fg:w="17"/><text x="1.8563%" y="1087.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (30 samples, 0.03%)</title><rect x="1.6300%" y="1077" width="0.0255%" height="15" fill="rgb(233,223,10)" fg:x="1920" fg:w="30"/><text x="1.8800%" y="1087.50"></text></g><g><title>&lt;tremor_pipeline::op::grouper::bucket::Grouper as tremor_pipeline::op::Operator&gt;::on_event (59 samples, 0.05%)</title><rect x="1.6555%" y="1077" width="0.0501%" height="15" fill="rgb(215,21,27)" fg:x="1950" fg:w="59"/><text x="1.9055%" y="1087.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (79 samples, 0.07%)</title><rect x="1.7277%" y="1077" width="0.0671%" height="15" fill="rgb(232,23,21)" fg:x="2035" fg:w="79"/><text x="1.9777%" y="1087.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (27 samples, 0.02%)</title><rect x="1.7718%" y="1061" width="0.0229%" height="15" fill="rgb(244,5,23)" fg:x="2087" fg:w="27"/><text x="2.0218%" y="1071.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (25 samples, 0.02%)</title><rect x="1.7735%" y="1045" width="0.0212%" height="15" fill="rgb(226,81,46)" fg:x="2089" fg:w="25"/><text x="2.0235%" y="1055.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (55 samples, 0.05%)</title><rect x="1.7947%" y="1077" width="0.0467%" height="15" fill="rgb(247,70,30)" fg:x="2114" fg:w="55"/><text x="2.0447%" y="1087.50"></text></g><g><title>value_trait::Builder::object (12 samples, 0.01%)</title><rect x="1.8312%" y="1061" width="0.0102%" height="15" fill="rgb(212,68,19)" fg:x="2157" fg:w="12"/><text x="2.0812%" y="1071.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (12 samples, 0.01%)</title><rect x="1.8312%" y="1045" width="0.0102%" height="15" fill="rgb(240,187,13)" fg:x="2157" fg:w="12"/><text x="2.0812%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (12 samples, 0.01%)</title><rect x="1.8312%" y="1029" width="0.0102%" height="15" fill="rgb(223,113,26)" fg:x="2157" fg:w="12"/><text x="2.0812%" y="1039.50"></text></g><g><title>[libc-2.31.so] (103 samples, 0.09%)</title><rect x="1.8550%" y="1077" width="0.0874%" height="15" fill="rgb(206,192,2)" fg:x="2185" fg:w="103"/><text x="2.1050%" y="1087.50"></text></g><g><title>[pdk-halfbrown] (51 samples, 0.04%)</title><rect x="1.9425%" y="1077" width="0.0433%" height="15" fill="rgb(241,108,4)" fg:x="2288" fg:w="51"/><text x="2.1925%" y="1087.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (51 samples, 0.04%)</title><rect x="1.9425%" y="1061" width="0.0433%" height="15" fill="rgb(247,173,49)" fg:x="2288" fg:w="51"/><text x="2.1925%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (51 samples, 0.04%)</title><rect x="1.9425%" y="1045" width="0.0433%" height="15" fill="rgb(224,114,35)" fg:x="2288" fg:w="51"/><text x="2.1925%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (51 samples, 0.04%)</title><rect x="1.9425%" y="1029" width="0.0433%" height="15" fill="rgb(245,159,27)" fg:x="2288" fg:w="51"/><text x="2.1925%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (51 samples, 0.04%)</title><rect x="1.9425%" y="1013" width="0.0433%" height="15" fill="rgb(245,172,44)" fg:x="2288" fg:w="51"/><text x="2.1925%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (51 samples, 0.04%)</title><rect x="1.9425%" y="997" width="0.0433%" height="15" fill="rgb(236,23,11)" fg:x="2288" fg:w="51"/><text x="2.1925%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (51 samples, 0.04%)</title><rect x="1.9425%" y="981" width="0.0433%" height="15" fill="rgb(205,117,38)" fg:x="2288" fg:w="51"/><text x="2.1925%" y="991.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (51 samples, 0.04%)</title><rect x="1.9425%" y="965" width="0.0433%" height="15" fill="rgb(237,72,25)" fg:x="2288" fg:w="51"/><text x="2.1925%" y="975.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (51 samples, 0.04%)</title><rect x="1.9425%" y="949" width="0.0433%" height="15" fill="rgb(244,70,9)" fg:x="2288" fg:w="51"/><text x="2.1925%" y="959.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::drop (51 samples, 0.04%)</title><rect x="1.9425%" y="933" width="0.0433%" height="15" fill="rgb(217,125,39)" fg:x="2288" fg:w="51"/><text x="2.1925%" y="943.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (51 samples, 0.04%)</title><rect x="1.9425%" y="917" width="0.0433%" height="15" fill="rgb(235,36,10)" fg:x="2288" fg:w="51"/><text x="2.1925%" y="927.50"></text></g><g><title>__clock_gettime (19 samples, 0.02%)</title><rect x="1.9858%" y="1077" width="0.0161%" height="15" fill="rgb(251,123,47)" fg:x="2339" fg:w="19"/><text x="2.2358%" y="1087.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (37 samples, 0.03%)</title><rect x="2.0087%" y="1077" width="0.0314%" height="15" fill="rgb(221,13,13)" fg:x="2366" fg:w="37"/><text x="2.2587%" y="1087.50"></text></g><g><title>abi_stable::erased_types::iterator::next (56 samples, 0.05%)</title><rect x="2.0401%" y="1077" width="0.0475%" height="15" fill="rgb(238,131,9)" fg:x="2403" fg:w="56"/><text x="2.2901%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (17 samples, 0.01%)</title><rect x="2.1793%" y="1061" width="0.0144%" height="15" fill="rgb(211,50,8)" fg:x="2567" fg:w="17"/><text x="2.4293%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (17 samples, 0.01%)</title><rect x="2.1793%" y="1045" width="0.0144%" height="15" fill="rgb(245,182,24)" fg:x="2567" fg:w="17"/><text x="2.4293%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (17 samples, 0.01%)</title><rect x="2.1793%" y="1029" width="0.0144%" height="15" fill="rgb(242,14,37)" fg:x="2567" fg:w="17"/><text x="2.4293%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (49 samples, 0.04%)</title><rect x="2.1971%" y="1061" width="0.0416%" height="15" fill="rgb(246,228,12)" fg:x="2588" fg:w="49"/><text x="2.4471%" y="1071.50"></text></g><g><title>alloc::alloc::box_free (49 samples, 0.04%)</title><rect x="2.1971%" y="1045" width="0.0416%" height="15" fill="rgb(213,55,15)" fg:x="2588" fg:w="49"/><text x="2.4471%" y="1055.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (49 samples, 0.04%)</title><rect x="2.1971%" y="1029" width="0.0416%" height="15" fill="rgb(209,9,3)" fg:x="2588" fg:w="49"/><text x="2.4471%" y="1039.50"></text></g><g><title>alloc::alloc::dealloc (49 samples, 0.04%)</title><rect x="2.1971%" y="1013" width="0.0416%" height="15" fill="rgb(230,59,30)" fg:x="2588" fg:w="49"/><text x="2.4471%" y="1023.50"></text></g><g><title>__rg_dealloc (49 samples, 0.04%)</title><rect x="2.1971%" y="997" width="0.0416%" height="15" fill="rgb(209,121,21)" fg:x="2588" fg:w="49"/><text x="2.4471%" y="1007.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (49 samples, 0.04%)</title><rect x="2.1971%" y="981" width="0.0416%" height="15" fill="rgb(220,109,13)" fg:x="2588" fg:w="49"/><text x="2.4471%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="2.2387%" y="1061" width="0.0127%" height="15" fill="rgb(232,18,1)" fg:x="2637" fg:w="15"/><text x="2.4887%" y="1071.50"></text></g><g><title>alloc::alloc::box_free (15 samples, 0.01%)</title><rect x="2.2387%" y="1045" width="0.0127%" height="15" fill="rgb(215,41,42)" fg:x="2637" fg:w="15"/><text x="2.4887%" y="1055.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (15 samples, 0.01%)</title><rect x="2.2387%" y="1029" width="0.0127%" height="15" fill="rgb(224,123,36)" fg:x="2637" fg:w="15"/><text x="2.4887%" y="1039.50"></text></g><g><title>alloc::alloc::dealloc (15 samples, 0.01%)</title><rect x="2.2387%" y="1013" width="0.0127%" height="15" fill="rgb(240,125,3)" fg:x="2637" fg:w="15"/><text x="2.4887%" y="1023.50"></text></g><g><title>__rg_dealloc (15 samples, 0.01%)</title><rect x="2.2387%" y="997" width="0.0127%" height="15" fill="rgb(205,98,50)" fg:x="2637" fg:w="15"/><text x="2.4887%" y="1007.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (15 samples, 0.01%)</title><rect x="2.2387%" y="981" width="0.0127%" height="15" fill="rgb(205,185,37)" fg:x="2637" fg:w="15"/><text x="2.4887%" y="991.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (200 samples, 0.17%)</title><rect x="2.0927%" y="1077" width="0.1698%" height="15" fill="rgb(238,207,15)" fg:x="2465" fg:w="200"/><text x="2.3427%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;halfbrown::iter::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="2.2515%" y="1061" width="0.0110%" height="15" fill="rgb(213,199,42)" fg:x="2652" fg:w="13"/><text x="2.5015%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::iter::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (13 samples, 0.01%)</title><rect x="2.2515%" y="1045" width="0.0110%" height="15" fill="rgb(235,201,11)" fg:x="2652" fg:w="13"/><text x="2.5015%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::iter::IntoIterInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (13 samples, 0.01%)</title><rect x="2.2515%" y="1029" width="0.0110%" height="15" fill="rgb(207,46,11)" fg:x="2652" fg:w="13"/><text x="2.5015%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (13 samples, 0.01%)</title><rect x="2.2515%" y="1013" width="0.0110%" height="15" fill="rgb(241,35,35)" fg:x="2652" fg:w="13"/><text x="2.5015%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawIntoIter&lt;(abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value)&gt;&gt; (13 samples, 0.01%)</title><rect x="2.2515%" y="997" width="0.0110%" height="15" fill="rgb(243,32,47)" fg:x="2652" fg:w="13"/><text x="2.5015%" y="1007.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="2.2515%" y="981" width="0.0110%" height="15" fill="rgb(247,202,23)" fg:x="2652" fg:w="13"/><text x="2.5015%" y="991.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (55 samples, 0.05%)</title><rect x="2.2625%" y="1077" width="0.0467%" height="15" fill="rgb(219,102,11)" fg:x="2665" fg:w="55"/><text x="2.5125%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (73 samples, 0.06%)</title><rect x="2.3092%" y="1077" width="0.0620%" height="15" fill="rgb(243,110,44)" fg:x="2720" fg:w="73"/><text x="2.5592%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (25 samples, 0.02%)</title><rect x="2.3712%" y="1077" width="0.0212%" height="15" fill="rgb(222,74,54)" fg:x="2793" fg:w="25"/><text x="2.6212%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (34 samples, 0.03%)</title><rect x="2.4009%" y="1077" width="0.0289%" height="15" fill="rgb(216,99,12)" fg:x="2828" fg:w="34"/><text x="2.6509%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck (24 samples, 0.02%)</title><rect x="2.4298%" y="1077" width="0.0204%" height="15" fill="rgb(226,22,26)" fg:x="2862" fg:w="24"/><text x="2.6798%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (13 samples, 0.01%)</title><rect x="2.4391%" y="1061" width="0.0110%" height="15" fill="rgb(217,163,10)" fg:x="2873" fg:w="13"/><text x="2.6891%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (83 samples, 0.07%)</title><rect x="2.4501%" y="1077" width="0.0705%" height="15" fill="rgb(213,25,53)" fg:x="2886" fg:w="83"/><text x="2.7001%" y="1087.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write (118 samples, 0.10%)</title><rect x="2.5350%" y="997" width="0.1002%" height="15" fill="rgb(252,105,26)" fg:x="2986" fg:w="118"/><text x="2.7850%" y="1007.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash (151 samples, 0.13%)</title><rect x="2.5206%" y="1077" width="0.1282%" height="15" fill="rgb(220,39,43)" fg:x="2969" fg:w="151"/><text x="2.7706%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash::{{closure}} (134 samples, 0.11%)</title><rect x="2.5350%" y="1061" width="0.1138%" height="15" fill="rgb(229,68,48)" fg:x="2986" fg:w="134"/><text x="2.7850%" y="1071.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (134 samples, 0.11%)</title><rect x="2.5350%" y="1045" width="0.1138%" height="15" fill="rgb(252,8,32)" fg:x="2986" fg:w="134"/><text x="2.7850%" y="1055.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (134 samples, 0.11%)</title><rect x="2.5350%" y="1029" width="0.1138%" height="15" fill="rgb(223,20,43)" fg:x="2986" fg:w="134"/><text x="2.7850%" y="1039.50"></text></g><g><title>core::hash::Hasher::write_str (134 samples, 0.11%)</title><rect x="2.5350%" y="1013" width="0.1138%" height="15" fill="rgb(229,81,49)" fg:x="2986" fg:w="134"/><text x="2.7850%" y="1023.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write_u8 (16 samples, 0.01%)</title><rect x="2.6352%" y="997" width="0.0136%" height="15" fill="rgb(236,28,36)" fg:x="3104" fg:w="16"/><text x="2.8852%" y="1007.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (30 samples, 0.03%)</title><rect x="2.6488%" y="1077" width="0.0255%" height="15" fill="rgb(249,185,26)" fg:x="3120" fg:w="30"/><text x="2.8988%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (13 samples, 0.01%)</title><rect x="2.6632%" y="1061" width="0.0110%" height="15" fill="rgb(249,174,33)" fg:x="3137" fg:w="13"/><text x="2.9132%" y="1071.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (13 samples, 0.01%)</title><rect x="2.6632%" y="1045" width="0.0110%" height="15" fill="rgb(233,201,37)" fg:x="3137" fg:w="13"/><text x="2.9132%" y="1055.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (13 samples, 0.01%)</title><rect x="2.6632%" y="1029" width="0.0110%" height="15" fill="rgb(221,78,26)" fg:x="3137" fg:w="13"/><text x="2.9132%" y="1039.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (13 samples, 0.01%)</title><rect x="2.6632%" y="1013" width="0.0110%" height="15" fill="rgb(250,127,30)" fg:x="3137" fg:w="13"/><text x="2.9132%" y="1023.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (13 samples, 0.01%)</title><rect x="2.6632%" y="997" width="0.0110%" height="15" fill="rgb(230,49,44)" fg:x="3137" fg:w="13"/><text x="2.9132%" y="1007.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (13 samples, 0.01%)</title><rect x="2.6632%" y="981" width="0.0110%" height="15" fill="rgb(229,67,23)" fg:x="3137" fg:w="13"/><text x="2.9132%" y="991.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (20 samples, 0.02%)</title><rect x="2.6743%" y="1077" width="0.0170%" height="15" fill="rgb(249,83,47)" fg:x="3150" fg:w="20"/><text x="2.9243%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (80 samples, 0.07%)</title><rect x="2.6913%" y="1077" width="0.0679%" height="15" fill="rgb(215,43,3)" fg:x="3170" fg:w="80"/><text x="2.9413%" y="1087.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut::{{closure}} (22 samples, 0.02%)</title><rect x="2.7405%" y="1061" width="0.0187%" height="15" fill="rgb(238,154,13)" fg:x="3228" fg:w="22"/><text x="2.9905%" y="1071.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (22 samples, 0.02%)</title><rect x="2.7405%" y="1045" width="0.0187%" height="15" fill="rgb(219,56,2)" fg:x="3228" fg:w="22"/><text x="2.9905%" y="1055.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (22 samples, 0.02%)</title><rect x="2.7405%" y="1029" width="0.0187%" height="15" fill="rgb(233,0,4)" fg:x="3228" fg:w="22"/><text x="2.9905%" y="1039.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (22 samples, 0.02%)</title><rect x="2.7405%" y="1013" width="0.0187%" height="15" fill="rgb(235,30,7)" fg:x="3228" fg:w="22"/><text x="2.9905%" y="1023.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (12 samples, 0.01%)</title><rect x="2.7490%" y="997" width="0.0102%" height="15" fill="rgb(250,79,13)" fg:x="3238" fg:w="12"/><text x="2.9990%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (64 samples, 0.05%)</title><rect x="2.8110%" y="1013" width="0.0543%" height="15" fill="rgb(211,146,34)" fg:x="3311" fg:w="64"/><text x="3.0610%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (64 samples, 0.05%)</title><rect x="2.8110%" y="997" width="0.0543%" height="15" fill="rgb(228,22,38)" fg:x="3311" fg:w="64"/><text x="3.0610%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (64 samples, 0.05%)</title><rect x="2.8110%" y="981" width="0.0543%" height="15" fill="rgb(235,168,5)" fg:x="3311" fg:w="64"/><text x="3.0610%" y="991.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (64 samples, 0.05%)</title><rect x="2.8110%" y="965" width="0.0543%" height="15" fill="rgb(221,155,16)" fg:x="3311" fg:w="64"/><text x="3.0610%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (66 samples, 0.06%)</title><rect x="2.8110%" y="1029" width="0.0560%" height="15" fill="rgb(215,215,53)" fg:x="3311" fg:w="66"/><text x="3.0610%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.03%)</title><rect x="2.8670%" y="1013" width="0.0280%" height="15" fill="rgb(223,4,10)" fg:x="3377" fg:w="33"/><text x="3.1170%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (33 samples, 0.03%)</title><rect x="2.8670%" y="997" width="0.0280%" height="15" fill="rgb(234,103,6)" fg:x="3377" fg:w="33"/><text x="3.1170%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (33 samples, 0.03%)</title><rect x="2.8670%" y="981" width="0.0280%" height="15" fill="rgb(227,97,0)" fg:x="3377" fg:w="33"/><text x="3.1170%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (33 samples, 0.03%)</title><rect x="2.8670%" y="965" width="0.0280%" height="15" fill="rgb(234,150,53)" fg:x="3377" fg:w="33"/><text x="3.1170%" y="975.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (33 samples, 0.03%)</title><rect x="2.8670%" y="949" width="0.0280%" height="15" fill="rgb(228,201,54)" fg:x="3377" fg:w="33"/><text x="3.1170%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (44 samples, 0.04%)</title><rect x="2.8670%" y="1029" width="0.0374%" height="15" fill="rgb(222,22,37)" fg:x="3377" fg:w="44"/><text x="3.1170%" y="1039.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (220 samples, 0.19%)</title><rect x="2.7677%" y="1077" width="0.1868%" height="15" fill="rgb(237,53,32)" fg:x="3260" fg:w="220"/><text x="3.0177%" y="1087.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (169 samples, 0.14%)</title><rect x="2.8110%" y="1061" width="0.1435%" height="15" fill="rgb(233,25,53)" fg:x="3311" fg:w="169"/><text x="3.0610%" y="1071.50"></text></g><g><title>core::mem::drop (169 samples, 0.14%)</title><rect x="2.8110%" y="1045" width="0.1435%" height="15" fill="rgb(210,40,34)" fg:x="3311" fg:w="169"/><text x="3.0610%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;tremor_value::value::Value&gt;&gt; (58 samples, 0.05%)</title><rect x="2.9052%" y="1029" width="0.0492%" height="15" fill="rgb(241,220,44)" fg:x="3422" fg:w="58"/><text x="3.1552%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (58 samples, 0.05%)</title><rect x="2.9052%" y="1013" width="0.0492%" height="15" fill="rgb(235,28,35)" fg:x="3422" fg:w="58"/><text x="3.1552%" y="1023.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (30 samples, 0.03%)</title><rect x="2.9561%" y="1077" width="0.0255%" height="15" fill="rgb(210,56,17)" fg:x="3482" fg:w="30"/><text x="3.2061%" y="1087.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (22 samples, 0.02%)</title><rect x="2.9629%" y="1061" width="0.0187%" height="15" fill="rgb(224,130,29)" fg:x="3490" fg:w="22"/><text x="3.2129%" y="1071.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (21 samples, 0.02%)</title><rect x="2.9638%" y="1045" width="0.0178%" height="15" fill="rgb(235,212,8)" fg:x="3491" fg:w="21"/><text x="3.2138%" y="1055.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (21 samples, 0.02%)</title><rect x="2.9638%" y="1029" width="0.0178%" height="15" fill="rgb(223,33,50)" fg:x="3491" fg:w="21"/><text x="3.2138%" y="1039.50"></text></g><g><title>alloc::raw_vec::finish_grow (43 samples, 0.04%)</title><rect x="2.9816%" y="1077" width="0.0365%" height="15" fill="rgb(219,149,13)" fg:x="3512" fg:w="43"/><text x="3.2316%" y="1087.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (17 samples, 0.01%)</title><rect x="3.0037%" y="1061" width="0.0144%" height="15" fill="rgb(250,156,29)" fg:x="3538" fg:w="17"/><text x="3.2537%" y="1071.50"></text></g><g><title>alloc::alloc::Global::grow_impl (17 samples, 0.01%)</title><rect x="3.0037%" y="1045" width="0.0144%" height="15" fill="rgb(216,193,19)" fg:x="3538" fg:w="17"/><text x="3.2537%" y="1055.50"></text></g><g><title>alloc::alloc::realloc (17 samples, 0.01%)</title><rect x="3.0037%" y="1029" width="0.0144%" height="15" fill="rgb(216,135,14)" fg:x="3538" fg:w="17"/><text x="3.2537%" y="1039.50"></text></g><g><title>__rg_realloc (17 samples, 0.01%)</title><rect x="3.0037%" y="1013" width="0.0144%" height="15" fill="rgb(241,47,5)" fg:x="3538" fg:w="17"/><text x="3.2537%" y="1023.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (17 samples, 0.01%)</title><rect x="3.0037%" y="997" width="0.0144%" height="15" fill="rgb(233,42,35)" fg:x="3538" fg:w="17"/><text x="3.2537%" y="1007.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (23 samples, 0.02%)</title><rect x="3.0274%" y="1077" width="0.0195%" height="15" fill="rgb(231,13,6)" fg:x="3566" fg:w="23"/><text x="3.2774%" y="1087.50"></text></g><g><title>async_executor::State::notify (13 samples, 0.01%)</title><rect x="3.0470%" y="1077" width="0.0110%" height="15" fill="rgb(207,181,40)" fg:x="3589" fg:w="13"/><text x="3.2970%" y="1087.50"></text></g><g><title>async_executor::Ticker::sleep (14 samples, 0.01%)</title><rect x="3.0580%" y="1077" width="0.0119%" height="15" fill="rgb(254,173,49)" fg:x="3602" fg:w="14"/><text x="3.3080%" y="1087.50"></text></g><g><title>async_executor::Ticker::wake (21 samples, 0.02%)</title><rect x="3.0699%" y="1077" width="0.0178%" height="15" fill="rgb(221,1,38)" fg:x="3616" fg:w="21"/><text x="3.3199%" y="1087.50"></text></g><g><title>async_executor::steal (150 samples, 0.13%)</title><rect x="3.0877%" y="1077" width="0.1273%" height="15" fill="rgb(206,124,46)" fg:x="3637" fg:w="150"/><text x="3.3377%" y="1087.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (17 samples, 0.01%)</title><rect x="3.2185%" y="1077" width="0.0144%" height="15" fill="rgb(249,21,11)" fg:x="3791" fg:w="17"/><text x="3.4685%" y="1087.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (14 samples, 0.01%)</title><rect x="3.2414%" y="1077" width="0.0119%" height="15" fill="rgb(222,201,40)" fg:x="3818" fg:w="14"/><text x="3.4914%" y="1087.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (252 samples, 0.21%)</title><rect x="3.2575%" y="1077" width="0.2139%" height="15" fill="rgb(235,61,29)" fg:x="3837" fg:w="252"/><text x="3.5075%" y="1087.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (14 samples, 0.01%)</title><rect x="3.4715%" y="1077" width="0.0119%" height="15" fill="rgb(219,207,3)" fg:x="4089" fg:w="14"/><text x="3.7215%" y="1087.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (40 samples, 0.03%)</title><rect x="3.4833%" y="1077" width="0.0340%" height="15" fill="rgb(222,56,46)" fg:x="4103" fg:w="40"/><text x="3.7333%" y="1087.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (12 samples, 0.01%)</title><rect x="3.5266%" y="1077" width="0.0102%" height="15" fill="rgb(239,76,54)" fg:x="4154" fg:w="12"/><text x="3.7766%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (79 samples, 0.07%)</title><rect x="3.5368%" y="1077" width="0.0671%" height="15" fill="rgb(231,124,27)" fg:x="4166" fg:w="79"/><text x="3.7868%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tremor_value::value::Value]&gt; (41 samples, 0.03%)</title><rect x="3.6039%" y="1077" width="0.0348%" height="15" fill="rgb(249,195,6)" fg:x="4245" fg:w="41"/><text x="3.8539%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::route_events::{{closure}}&gt;&gt; (12 samples, 0.01%)</title><rect x="3.6489%" y="1077" width="0.0102%" height="15" fill="rgb(237,174,47)" fg:x="4298" fg:w="12"/><text x="3.8989%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt;&gt; (23 samples, 0.02%)</title><rect x="3.6642%" y="1077" width="0.0195%" height="15" fill="rgb(206,201,31)" fg:x="4316" fg:w="23"/><text x="3.9142%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt; (13 samples, 0.01%)</title><rect x="3.6727%" y="1061" width="0.0110%" height="15" fill="rgb(231,57,52)" fg:x="4326" fg:w="13"/><text x="3.9227%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::send_events::{{closure}}&gt;&gt; (18 samples, 0.02%)</title><rect x="3.6837%" y="1077" width="0.0153%" height="15" fill="rgb(248,177,22)" fg:x="4339" fg:w="18"/><text x="3.9337%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (19 samples, 0.02%)</title><rect x="3.7134%" y="1077" width="0.0161%" height="15" fill="rgb(215,211,37)" fg:x="4374" fg:w="19"/><text x="3.9634%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (18 samples, 0.02%)</title><rect x="3.7355%" y="1061" width="0.0153%" height="15" fill="rgb(241,128,51)" fg:x="4400" fg:w="18"/><text x="3.9855%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (18 samples, 0.02%)</title><rect x="3.7355%" y="1045" width="0.0153%" height="15" fill="rgb(227,165,31)" fg:x="4400" fg:w="18"/><text x="3.9855%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (54 samples, 0.05%)</title><rect x="3.7296%" y="1077" width="0.0458%" height="15" fill="rgb(228,167,24)" fg:x="4393" fg:w="54"/><text x="3.9796%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (17 samples, 0.01%)</title><rect x="3.7610%" y="1061" width="0.0144%" height="15" fill="rgb(228,143,12)" fg:x="4430" fg:w="17"/><text x="4.0110%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (28 samples, 0.02%)</title><rect x="3.7754%" y="1077" width="0.0238%" height="15" fill="rgb(249,149,8)" fg:x="4447" fg:w="28"/><text x="4.0254%" y="1087.50"></text></g><g><title>core::str::converts::from_utf8 (23 samples, 0.02%)</title><rect x="3.7992%" y="1077" width="0.0195%" height="15" fill="rgb(243,35,44)" fg:x="4475" fg:w="23"/><text x="4.0492%" y="1087.50"></text></g><g><title>event_listener::Event::notify (63 samples, 0.05%)</title><rect x="3.8255%" y="1077" width="0.0535%" height="15" fill="rgb(246,89,9)" fg:x="4506" fg:w="63"/><text x="4.0755%" y="1087.50"></text></g><g><title>event_listener::full_fence (39 samples, 0.03%)</title><rect x="3.8459%" y="1061" width="0.0331%" height="15" fill="rgb(233,213,13)" fg:x="4530" fg:w="39"/><text x="4.0959%" y="1071.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (17 samples, 0.01%)</title><rect x="3.8883%" y="1077" width="0.0144%" height="15" fill="rgb(233,141,41)" fg:x="4580" fg:w="17"/><text x="4.1383%" y="1087.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (24 samples, 0.02%)</title><rect x="3.9027%" y="1077" width="0.0204%" height="15" fill="rgb(239,167,4)" fg:x="4597" fg:w="24"/><text x="4.1527%" y="1087.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (27 samples, 0.02%)</title><rect x="3.9231%" y="1077" width="0.0229%" height="15" fill="rgb(209,217,16)" fg:x="4621" fg:w="27"/><text x="4.1731%" y="1087.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert_hashed_nocheck (33 samples, 0.03%)</title><rect x="3.9460%" y="1077" width="0.0280%" height="15" fill="rgb(219,88,35)" fg:x="4648" fg:w="33"/><text x="4.1960%" y="1087.50"></text></g><g><title>hashbrown::raw::inner::RawIter&lt;T&gt;::drop_elements (13 samples, 0.01%)</title><rect x="3.9741%" y="1077" width="0.0110%" height="15" fill="rgb(220,193,23)" fg:x="4681" fg:w="13"/><text x="4.2241%" y="1087.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (65 samples, 0.06%)</title><rect x="3.9851%" y="1077" width="0.0552%" height="15" fill="rgb(230,90,52)" fg:x="4694" fg:w="65"/><text x="4.2351%" y="1087.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (63 samples, 0.05%)</title><rect x="3.9868%" y="1061" width="0.0535%" height="15" fill="rgb(252,106,19)" fg:x="4696" fg:w="63"/><text x="4.2368%" y="1071.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (24 samples, 0.02%)</title><rect x="4.0403%" y="1077" width="0.0204%" height="15" fill="rgb(206,74,20)" fg:x="4759" fg:w="24"/><text x="4.2903%" y="1087.50"></text></g><g><title>parking::Unparker::unpark (18 samples, 0.02%)</title><rect x="4.0691%" y="1077" width="0.0153%" height="15" fill="rgb(230,138,44)" fg:x="4793" fg:w="18"/><text x="4.3191%" y="1087.50"></text></g><g><title>rmp::encode::uint::write_uint (84 samples, 0.07%)</title><rect x="4.0878%" y="1077" width="0.0713%" height="15" fill="rgb(235,182,43)" fg:x="4815" fg:w="84"/><text x="4.3378%" y="1087.50"></text></g><g><title>rmp::encode::write_array_len (15 samples, 0.01%)</title><rect x="4.1591%" y="1077" width="0.0127%" height="15" fill="rgb(242,16,51)" fg:x="4899" fg:w="15"/><text x="4.4091%" y="1087.50"></text></g><g><title>rmp::encode::write_marker (178 samples, 0.15%)</title><rect x="4.1736%" y="1077" width="0.1511%" height="15" fill="rgb(248,9,4)" fg:x="4916" fg:w="178"/><text x="4.4236%" y="1087.50"></text></g><g><title>sn_rust_alloc (43 samples, 0.04%)</title><rect x="4.3247%" y="1077" width="0.0365%" height="15" fill="rgb(210,31,22)" fg:x="5094" fg:w="43"/><text x="4.5747%" y="1087.50"></text></g><g><title>sn_rust_dealloc (42 samples, 0.04%)</title><rect x="4.3612%" y="1077" width="0.0357%" height="15" fill="rgb(239,54,39)" fg:x="5137" fg:w="42"/><text x="4.6112%" y="1087.50"></text></g><g><title>sn_rust_realloc (18 samples, 0.02%)</title><rect x="4.3968%" y="1077" width="0.0153%" height="15" fill="rgb(230,99,41)" fg:x="5179" fg:w="18"/><text x="4.6468%" y="1087.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (20 samples, 0.02%)</title><rect x="4.4130%" y="1077" width="0.0170%" height="15" fill="rgb(253,106,12)" fg:x="5198" fg:w="20"/><text x="4.6630%" y="1087.50"></text></g><g><title>std::sys::unix::futex::futex_wait (14 samples, 0.01%)</title><rect x="4.4350%" y="1077" width="0.0119%" height="15" fill="rgb(213,46,41)" fg:x="5224" fg:w="14"/><text x="4.6850%" y="1087.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (12 samples, 0.01%)</title><rect x="4.4469%" y="1077" width="0.0102%" height="15" fill="rgb(215,133,35)" fg:x="5238" fg:w="12"/><text x="4.6969%" y="1087.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (26 samples, 0.02%)</title><rect x="4.4673%" y="1077" width="0.0221%" height="15" fill="rgb(213,28,5)" fg:x="5262" fg:w="26"/><text x="4.7173%" y="1087.50"></text></g><g><title>syscall (24 samples, 0.02%)</title><rect x="4.4894%" y="1077" width="0.0204%" height="15" fill="rgb(215,77,49)" fg:x="5288" fg:w="24"/><text x="4.7394%" y="1087.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_input (13 samples, 0.01%)</title><rect x="4.5166%" y="1077" width="0.0110%" height="15" fill="rgb(248,100,22)" fg:x="5320" fg:w="13"/><text x="4.7666%" y="1087.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (28 samples, 0.02%)</title><rect x="4.5386%" y="1077" width="0.0238%" height="15" fill="rgb(208,67,9)" fg:x="5346" fg:w="28"/><text x="4.7886%" y="1087.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (42 samples, 0.04%)</title><rect x="4.5658%" y="1077" width="0.0357%" height="15" fill="rgb(219,133,21)" fg:x="5378" fg:w="42"/><text x="4.8158%" y="1087.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (29 samples, 0.02%)</title><rect x="4.5768%" y="1061" width="0.0246%" height="15" fill="rgb(246,46,29)" fg:x="5391" fg:w="29"/><text x="4.8268%" y="1071.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (28 samples, 0.02%)</title><rect x="4.5777%" y="1045" width="0.0238%" height="15" fill="rgb(246,185,52)" fg:x="5392" fg:w="28"/><text x="4.8277%" y="1055.50"></text></g><g><title>tremor_runtime::connectors::source::Streams::get_or_create_stream (14 samples, 0.01%)</title><rect x="4.6014%" y="1077" width="0.0119%" height="15" fill="rgb(252,136,11)" fg:x="5420" fg:w="14"/><text x="4.8514%" y="1087.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (26 samples, 0.02%)</title><rect x="4.6133%" y="1077" width="0.0221%" height="15" fill="rgb(219,138,53)" fg:x="5434" fg:w="26"/><text x="4.8633%" y="1087.50"></text></g><g><title>tremor_script::ast::Script::run (18 samples, 0.02%)</title><rect x="4.6626%" y="1077" width="0.0153%" height="15" fill="rgb(211,51,23)" fg:x="5492" fg:w="18"/><text x="4.9126%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (51 samples, 0.04%)</title><rect x="4.7203%" y="1061" width="0.0433%" height="15" fill="rgb(247,221,28)" fg:x="5560" fg:w="51"/><text x="4.9703%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (51 samples, 0.04%)</title><rect x="4.7203%" y="1045" width="0.0433%" height="15" fill="rgb(251,222,45)" fg:x="5560" fg:w="51"/><text x="4.9703%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (51 samples, 0.04%)</title><rect x="4.7203%" y="1029" width="0.0433%" height="15" fill="rgb(217,162,53)" fg:x="5560" fg:w="51"/><text x="4.9703%" y="1039.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (51 samples, 0.04%)</title><rect x="4.7203%" y="1013" width="0.0433%" height="15" fill="rgb(229,93,14)" fg:x="5560" fg:w="51"/><text x="4.9703%" y="1023.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (114 samples, 0.10%)</title><rect x="4.6838%" y="1077" width="0.0968%" height="15" fill="rgb(209,67,49)" fg:x="5517" fg:w="114"/><text x="4.9338%" y="1087.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (20 samples, 0.02%)</title><rect x="4.7636%" y="1061" width="0.0170%" height="15" fill="rgb(213,87,29)" fg:x="5611" fg:w="20"/><text x="5.0136%" y="1071.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (20 samples, 0.02%)</title><rect x="4.7636%" y="1045" width="0.0170%" height="15" fill="rgb(205,151,52)" fg:x="5611" fg:w="20"/><text x="5.0136%" y="1055.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (69 samples, 0.06%)</title><rect x="4.7806%" y="1077" width="0.0586%" height="15" fill="rgb(253,215,39)" fg:x="5631" fg:w="69"/><text x="5.0306%" y="1087.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (20 samples, 0.02%)</title><rect x="4.8392%" y="1077" width="0.0170%" height="15" fill="rgb(221,220,41)" fg:x="5700" fg:w="20"/><text x="5.0892%" y="1087.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (213 samples, 0.18%)</title><rect x="4.8561%" y="1077" width="0.1808%" height="15" fill="rgb(218,133,21)" fg:x="5720" fg:w="213"/><text x="5.1061%" y="1087.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (113 samples, 0.10%)</title><rect x="5.0370%" y="1077" width="0.0959%" height="15" fill="rgb(221,193,43)" fg:x="5933" fg:w="113"/><text x="5.2870%" y="1087.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::invoke2 (30 samples, 0.03%)</title><rect x="5.1329%" y="1077" width="0.0255%" height="15" fill="rgb(240,128,52)" fg:x="6046" fg:w="30"/><text x="5.3829%" y="1087.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (173 samples, 0.15%)</title><rect x="5.1584%" y="1077" width="0.1469%" height="15" fill="rgb(253,114,12)" fg:x="6076" fg:w="173"/><text x="5.4084%" y="1087.50"></text></g><g><title>tremor_script::interpreter::resolve (107 samples, 0.09%)</title><rect x="5.3052%" y="1077" width="0.0908%" height="15" fill="rgb(215,223,47)" fg:x="6249" fg:w="107"/><text x="5.5552%" y="1087.50"></text></g><g><title>tremor_script::interpreter::resolve_value (56 samples, 0.05%)</title><rect x="5.3961%" y="1077" width="0.0475%" height="15" fill="rgb(248,225,23)" fg:x="6356" fg:w="56"/><text x="5.6461%" y="1087.50"></text></g><g><title>tremor_script::interpreter::test_guard (57 samples, 0.05%)</title><rect x="5.4436%" y="1077" width="0.0484%" height="15" fill="rgb(250,108,0)" fg:x="6412" fg:w="57"/><text x="5.6936%" y="1087.50"></text></g><g><title>tremor_script::interpreter::test_predicate_expr (135 samples, 0.11%)</title><rect x="5.4920%" y="1077" width="0.1146%" height="15" fill="rgb(228,208,7)" fg:x="6469" fg:w="135"/><text x="5.7420%" y="1087.50"></text></g><g><title>tremor_script::interpreter::val_eq (25 samples, 0.02%)</title><rect x="5.6066%" y="1077" width="0.0212%" height="15" fill="rgb(244,45,10)" fg:x="6604" fg:w="25"/><text x="5.8566%" y="1087.50"></text></g><g><title>tremor_script::srs::EventPayload::rent_mut (12 samples, 0.01%)</title><rect x="5.6279%" y="1077" width="0.0102%" height="15" fill="rgb(207,125,25)" fg:x="6629" fg:w="12"/><text x="5.8779%" y="1087.50"></text></g><g><title>tremor_script::srs::EventPayload::try_new (55 samples, 0.05%)</title><rect x="5.6380%" y="1077" width="0.0467%" height="15" fill="rgb(210,195,18)" fg:x="6641" fg:w="55"/><text x="5.8880%" y="1087.50"></text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (17 samples, 0.01%)</title><rect x="5.6703%" y="1061" width="0.0144%" height="15" fill="rgb(249,80,12)" fg:x="6679" fg:w="17"/><text x="5.9203%" y="1071.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_bool (50 samples, 0.04%)</title><rect x="5.9759%" y="1061" width="0.0424%" height="15" fill="rgb(221,65,9)" fg:x="7039" fg:w="50"/><text x="6.2259%" y="1071.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (50 samples, 0.04%)</title><rect x="5.9759%" y="1045" width="0.0424%" height="15" fill="rgb(235,49,36)" fg:x="7039" fg:w="50"/><text x="6.2259%" y="1055.50"></text></g><g><title>rmp::encode::write_marker (50 samples, 0.04%)</title><rect x="5.9759%" y="1029" width="0.0424%" height="15" fill="rgb(225,32,20)" fg:x="7039" fg:w="50"/><text x="6.2259%" y="1039.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeSeq&gt;::serialize_element (15 samples, 0.01%)</title><rect x="6.0243%" y="1061" width="0.0127%" height="15" fill="rgb(215,141,46)" fg:x="7096" fg:w="15"/><text x="6.2743%" y="1071.50"></text></g><g><title>rmp::encode::write_marker (32 samples, 0.03%)</title><rect x="6.0422%" y="1061" width="0.0272%" height="15" fill="rgb(250,160,47)" fg:x="7117" fg:w="32"/><text x="6.2922%" y="1071.50"></text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (489 samples, 0.42%)</title><rect x="5.6864%" y="1077" width="0.4151%" height="15" fill="rgb(216,222,40)" fg:x="6698" fg:w="489"/><text x="5.9364%" y="1087.50"></text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (38 samples, 0.03%)</title><rect x="6.0693%" y="1061" width="0.0323%" height="15" fill="rgb(234,217,39)" fg:x="7149" fg:w="38"/><text x="6.3193%" y="1071.50"></text></g><g><title>rmp::encode::write_marker (38 samples, 0.03%)</title><rect x="6.0693%" y="1045" width="0.0323%" height="15" fill="rgb(207,178,40)" fg:x="7149" fg:w="38"/><text x="6.3193%" y="1055.50"></text></g><g><title>tremor_value::value::cmp::&lt;impl core::cmp::PartialEq for tremor_value::value::Value&gt;::eq (12 samples, 0.01%)</title><rect x="6.1016%" y="1077" width="0.0102%" height="15" fill="rgb(221,136,13)" fg:x="7187" fg:w="12"/><text x="6.3516%" y="1087.50"></text></g><g><title>[anon] (7,115 samples, 6.04%)</title><rect x="0.0917%" y="1093" width="6.0405%" height="15" fill="rgb(249,199,10)" fg:x="108" fg:w="7115"/><text x="0.3417%" y="1103.50">[anon]</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (37 samples, 0.03%)</title><rect x="6.1610%" y="1077" width="0.0314%" height="15" fill="rgb(249,222,13)" fg:x="7257" fg:w="37"/><text x="6.4110%" y="1087.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (17 samples, 0.01%)</title><rect x="6.1780%" y="1061" width="0.0144%" height="15" fill="rgb(244,185,38)" fg:x="7277" fg:w="17"/><text x="6.4280%" y="1071.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (14 samples, 0.01%)</title><rect x="6.1805%" y="1045" width="0.0119%" height="15" fill="rgb(236,202,9)" fg:x="7280" fg:w="14"/><text x="6.4305%" y="1055.50"></text></g><g><title>[libc-2.31.so] (110 samples, 0.09%)</title><rect x="6.1322%" y="1093" width="0.0934%" height="15" fill="rgb(250,229,37)" fg:x="7223" fg:w="110"/><text x="6.3822%" y="1103.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_output (15 samples, 0.01%)</title><rect x="6.2128%" y="1077" width="0.0127%" height="15" fill="rgb(206,174,23)" fg:x="7318" fg:w="15"/><text x="6.4628%" y="1087.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (25 samples, 0.02%)</title><rect x="6.2255%" y="1077" width="0.0212%" height="15" fill="rgb(211,33,43)" fg:x="7333" fg:w="25"/><text x="6.4755%" y="1087.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (35 samples, 0.03%)</title><rect x="6.2570%" y="1077" width="0.0297%" height="15" fill="rgb(245,58,50)" fg:x="7370" fg:w="35"/><text x="6.5070%" y="1087.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (32 samples, 0.03%)</title><rect x="6.2867%" y="1077" width="0.0272%" height="15" fill="rgb(244,68,36)" fg:x="7405" fg:w="32"/><text x="6.5367%" y="1087.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (17 samples, 0.01%)</title><rect x="6.3393%" y="1077" width="0.0144%" height="15" fill="rgb(232,229,15)" fg:x="7467" fg:w="17"/><text x="6.5893%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (15 samples, 0.01%)</title><rect x="6.3537%" y="1077" width="0.0127%" height="15" fill="rgb(254,30,23)" fg:x="7484" fg:w="15"/><text x="6.6037%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (25 samples, 0.02%)</title><rect x="6.3665%" y="1077" width="0.0212%" height="15" fill="rgb(235,160,14)" fg:x="7499" fg:w="25"/><text x="6.6165%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (15 samples, 0.01%)</title><rect x="6.4081%" y="1077" width="0.0127%" height="15" fill="rgb(212,155,44)" fg:x="7548" fg:w="15"/><text x="6.6581%" y="1087.50"></text></g><g><title>hashbrown::raw::inner::RawIter&lt;T&gt;::drop_elements (12 samples, 0.01%)</title><rect x="6.4267%" y="1077" width="0.0102%" height="15" fill="rgb(226,2,50)" fg:x="7570" fg:w="12"/><text x="6.6767%" y="1087.50"></text></g><g><title>sn_rust_alloc (15 samples, 0.01%)</title><rect x="6.4556%" y="1077" width="0.0127%" height="15" fill="rgb(234,177,6)" fg:x="7604" fg:w="15"/><text x="6.7056%" y="1087.50"></text></g><g><title>tremor_script::ast::Script::run (25 samples, 0.02%)</title><rect x="6.4734%" y="1077" width="0.0212%" height="15" fill="rgb(217,24,9)" fg:x="7625" fg:w="25"/><text x="6.7234%" y="1087.50"></text></g><g><title>[pdk-halfbrown] (342 samples, 0.29%)</title><rect x="6.2255%" y="1093" width="0.2903%" height="15" fill="rgb(220,13,46)" fg:x="7333" fg:w="342"/><text x="6.4755%" y="1103.50"></text></g><g><title>window::TimeWindow::add_t (12 samples, 0.01%)</title><rect x="6.5057%" y="1077" width="0.0102%" height="15" fill="rgb(239,221,27)" fg:x="7663" fg:w="12"/><text x="6.7557%" y="1087.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (169 samples, 0.14%)</title><rect x="6.5159%" y="1077" width="0.1435%" height="15" fill="rgb(222,198,25)" fg:x="7675" fg:w="169"/><text x="6.7659%" y="1087.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::read_str_data (14 samples, 0.01%)</title><rect x="6.6475%" y="1061" width="0.0119%" height="15" fill="rgb(211,99,13)" fg:x="7830" fg:w="14"/><text x="6.8975%" y="1071.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_str (59 samples, 0.05%)</title><rect x="6.6594%" y="1077" width="0.0501%" height="15" fill="rgb(232,111,31)" fg:x="7844" fg:w="59"/><text x="6.9094%" y="1087.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (15 samples, 0.01%)</title><rect x="6.7095%" y="1077" width="0.0127%" height="15" fill="rgb(245,82,37)" fg:x="7903" fg:w="15"/><text x="6.9595%" y="1087.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (47 samples, 0.04%)</title><rect x="6.7307%" y="1077" width="0.0399%" height="15" fill="rgb(227,149,46)" fg:x="7928" fg:w="47"/><text x="6.9807%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (12 samples, 0.01%)</title><rect x="6.7604%" y="1061" width="0.0102%" height="15" fill="rgb(218,36,50)" fg:x="7963" fg:w="12"/><text x="7.0104%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (12 samples, 0.01%)</title><rect x="6.7604%" y="1045" width="0.0102%" height="15" fill="rgb(226,80,48)" fg:x="7963" fg:w="12"/><text x="7.0104%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (12 samples, 0.01%)</title><rect x="6.7604%" y="1029" width="0.0102%" height="15" fill="rgb(238,224,15)" fg:x="7963" fg:w="12"/><text x="7.0104%" y="1039.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (12 samples, 0.01%)</title><rect x="6.7604%" y="1013" width="0.0102%" height="15" fill="rgb(241,136,10)" fg:x="7963" fg:w="12"/><text x="7.0104%" y="1023.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (12 samples, 0.01%)</title><rect x="6.7604%" y="997" width="0.0102%" height="15" fill="rgb(208,32,45)" fg:x="7963" fg:w="12"/><text x="7.0104%" y="1007.50"></text></g><g><title>alloc::alloc::exchange_malloc (12 samples, 0.01%)</title><rect x="6.7604%" y="981" width="0.0102%" height="15" fill="rgb(207,135,9)" fg:x="7963" fg:w="12"/><text x="7.0104%" y="991.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.01%)</title><rect x="6.7604%" y="965" width="0.0102%" height="15" fill="rgb(206,86,44)" fg:x="7963" fg:w="12"/><text x="7.0104%" y="975.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.01%)</title><rect x="6.7604%" y="949" width="0.0102%" height="15" fill="rgb(245,177,15)" fg:x="7963" fg:w="12"/><text x="7.0104%" y="959.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.01%)</title><rect x="6.7604%" y="933" width="0.0102%" height="15" fill="rgb(206,64,50)" fg:x="7963" fg:w="12"/><text x="7.0104%" y="943.50"></text></g><g><title>__rg_alloc (12 samples, 0.01%)</title><rect x="6.7604%" y="917" width="0.0102%" height="15" fill="rgb(234,36,40)" fg:x="7963" fg:w="12"/><text x="7.0104%" y="927.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (12 samples, 0.01%)</title><rect x="6.7604%" y="901" width="0.0102%" height="15" fill="rgb(213,64,8)" fg:x="7963" fg:w="12"/><text x="7.0104%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="6.7714%" y="1077" width="0.0110%" height="15" fill="rgb(210,75,36)" fg:x="7976" fg:w="13"/><text x="7.0214%" y="1087.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (24 samples, 0.02%)</title><rect x="6.7876%" y="1077" width="0.0204%" height="15" fill="rgb(229,88,21)" fg:x="7995" fg:w="24"/><text x="7.0376%" y="1087.50"></text></g><g><title>[libc-2.31.so] (75 samples, 0.06%)</title><rect x="6.8589%" y="821" width="0.0637%" height="15" fill="rgb(252,204,47)" fg:x="8079" fg:w="75"/><text x="7.1089%" y="831.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (406 samples, 0.34%)</title><rect x="6.9225%" y="709" width="0.3447%" height="15" fill="rgb(208,77,27)" fg:x="8154" fg:w="406"/><text x="7.1725%" y="719.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (406 samples, 0.34%)</title><rect x="6.9225%" y="693" width="0.3447%" height="15" fill="rgb(221,76,26)" fg:x="8154" fg:w="406"/><text x="7.1725%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (13 samples, 0.01%)</title><rect x="7.2562%" y="677" width="0.0110%" height="15" fill="rgb(225,139,18)" fg:x="8547" fg:w="13"/><text x="7.5062%" y="687.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (418 samples, 0.35%)</title><rect x="6.9225%" y="821" width="0.3549%" height="15" fill="rgb(230,137,11)" fg:x="8154" fg:w="418"/><text x="7.1725%" y="831.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (418 samples, 0.35%)</title><rect x="6.9225%" y="805" width="0.3549%" height="15" fill="rgb(212,28,1)" fg:x="8154" fg:w="418"/><text x="7.1725%" y="815.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (418 samples, 0.35%)</title><rect x="6.9225%" y="789" width="0.3549%" height="15" fill="rgb(248,164,17)" fg:x="8154" fg:w="418"/><text x="7.1725%" y="799.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (418 samples, 0.35%)</title><rect x="6.9225%" y="773" width="0.3549%" height="15" fill="rgb(222,171,42)" fg:x="8154" fg:w="418"/><text x="7.1725%" y="783.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (418 samples, 0.35%)</title><rect x="6.9225%" y="757" width="0.3549%" height="15" fill="rgb(243,84,45)" fg:x="8154" fg:w="418"/><text x="7.1725%" y="767.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (418 samples, 0.35%)</title><rect x="6.9225%" y="741" width="0.3549%" height="15" fill="rgb(252,49,23)" fg:x="8154" fg:w="418"/><text x="7.1725%" y="751.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (418 samples, 0.35%)</title><rect x="6.9225%" y="725" width="0.3549%" height="15" fill="rgb(215,19,7)" fg:x="8154" fg:w="418"/><text x="7.1725%" y="735.50"></text></g><g><title>alloc::alloc::exchange_malloc (12 samples, 0.01%)</title><rect x="7.2672%" y="709" width="0.0102%" height="15" fill="rgb(238,81,41)" fg:x="8560" fg:w="12"/><text x="7.5172%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.01%)</title><rect x="7.2672%" y="693" width="0.0102%" height="15" fill="rgb(210,199,37)" fg:x="8560" fg:w="12"/><text x="7.5172%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.01%)</title><rect x="7.2672%" y="677" width="0.0102%" height="15" fill="rgb(244,192,49)" fg:x="8560" fg:w="12"/><text x="7.5172%" y="687.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.01%)</title><rect x="7.2672%" y="661" width="0.0102%" height="15" fill="rgb(226,211,11)" fg:x="8560" fg:w="12"/><text x="7.5172%" y="671.50"></text></g><g><title>__rg_alloc (12 samples, 0.01%)</title><rect x="7.2672%" y="645" width="0.0102%" height="15" fill="rgb(236,162,54)" fg:x="8560" fg:w="12"/><text x="7.5172%" y="655.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (12 samples, 0.01%)</title><rect x="7.2672%" y="629" width="0.0102%" height="15" fill="rgb(220,229,9)" fg:x="8560" fg:w="12"/><text x="7.5172%" y="639.50"></text></g><g><title>sn_rust_alloc (12 samples, 0.01%)</title><rect x="7.2672%" y="613" width="0.0102%" height="15" fill="rgb(250,87,22)" fg:x="8560" fg:w="12"/><text x="7.5172%" y="623.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (12 samples, 0.01%)</title><rect x="7.2672%" y="597" width="0.0102%" height="15" fill="rgb(239,43,17)" fg:x="8560" fg:w="12"/><text x="7.5172%" y="607.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.02%)</title><rect x="7.3920%" y="789" width="0.0153%" height="15" fill="rgb(231,177,25)" fg:x="8707" fg:w="18"/><text x="7.6420%" y="799.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (126 samples, 0.11%)</title><rect x="7.3920%" y="805" width="0.1070%" height="15" fill="rgb(219,179,1)" fg:x="8707" fg:w="126"/><text x="7.6420%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (108 samples, 0.09%)</title><rect x="7.4073%" y="789" width="0.0917%" height="15" fill="rgb(238,219,53)" fg:x="8725" fg:w="108"/><text x="7.6573%" y="799.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (107 samples, 0.09%)</title><rect x="7.4082%" y="773" width="0.0908%" height="15" fill="rgb(232,167,36)" fg:x="8726" fg:w="107"/><text x="7.6582%" y="783.50"></text></g><g><title>core::ptr::read (107 samples, 0.09%)</title><rect x="7.4082%" y="757" width="0.0908%" height="15" fill="rgb(244,19,51)" fg:x="8726" fg:w="107"/><text x="7.6582%" y="767.50"></text></g><g><title>[libc-2.31.so] (107 samples, 0.09%)</title><rect x="7.4082%" y="741" width="0.0908%" height="15" fill="rgb(224,6,22)" fg:x="8726" fg:w="107"/><text x="7.6582%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (12 samples, 0.01%)</title><rect x="7.4999%" y="677" width="0.0102%" height="15" fill="rgb(224,145,5)" fg:x="8834" fg:w="12"/><text x="7.7499%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (12 samples, 0.01%)</title><rect x="7.4999%" y="661" width="0.0102%" height="15" fill="rgb(234,130,49)" fg:x="8834" fg:w="12"/><text x="7.7499%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (12 samples, 0.01%)</title><rect x="7.4999%" y="645" width="0.0102%" height="15" fill="rgb(254,6,2)" fg:x="8834" fg:w="12"/><text x="7.7499%" y="655.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (36 samples, 0.03%)</title><rect x="7.4990%" y="805" width="0.0306%" height="15" fill="rgb(208,96,46)" fg:x="8833" fg:w="36"/><text x="7.7490%" y="815.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (36 samples, 0.03%)</title><rect x="7.4990%" y="789" width="0.0306%" height="15" fill="rgb(239,3,39)" fg:x="8833" fg:w="36"/><text x="7.7490%" y="799.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (36 samples, 0.03%)</title><rect x="7.4990%" y="773" width="0.0306%" height="15" fill="rgb(233,210,1)" fg:x="8833" fg:w="36"/><text x="7.7490%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (36 samples, 0.03%)</title><rect x="7.4990%" y="757" width="0.0306%" height="15" fill="rgb(244,137,37)" fg:x="8833" fg:w="36"/><text x="7.7490%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (36 samples, 0.03%)</title><rect x="7.4990%" y="741" width="0.0306%" height="15" fill="rgb(240,136,2)" fg:x="8833" fg:w="36"/><text x="7.7490%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (36 samples, 0.03%)</title><rect x="7.4990%" y="725" width="0.0306%" height="15" fill="rgb(239,18,37)" fg:x="8833" fg:w="36"/><text x="7.7490%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (36 samples, 0.03%)</title><rect x="7.4990%" y="709" width="0.0306%" height="15" fill="rgb(218,185,22)" fg:x="8833" fg:w="36"/><text x="7.7490%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (36 samples, 0.03%)</title><rect x="7.4990%" y="693" width="0.0306%" height="15" fill="rgb(225,218,4)" fg:x="8833" fg:w="36"/><text x="7.7490%" y="703.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (23 samples, 0.02%)</title><rect x="7.5100%" y="677" width="0.0195%" height="15" fill="rgb(230,182,32)" fg:x="8846" fg:w="23"/><text x="7.7600%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (23 samples, 0.02%)</title><rect x="7.5100%" y="661" width="0.0195%" height="15" fill="rgb(242,56,43)" fg:x="8846" fg:w="23"/><text x="7.7600%" y="671.50"></text></g><g><title>[libc-2.31.so] (20 samples, 0.02%)</title><rect x="7.5126%" y="645" width="0.0170%" height="15" fill="rgb(233,99,24)" fg:x="8849" fg:w="20"/><text x="7.7626%" y="655.50"></text></g><g><title>[libc-2.31.so] (471 samples, 0.40%)</title><rect x="7.5296%" y="805" width="0.3999%" height="15" fill="rgb(234,209,42)" fg:x="8869" fg:w="471"/><text x="7.7796%" y="815.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (1,347 samples, 1.14%)</title><rect x="6.8360%" y="1061" width="1.1436%" height="15" fill="rgb(227,7,12)" fg:x="8052" fg:w="1347"/><text x="7.0860%" y="1071.50"></text></g><g><title>async_task::runnable::Runnable::run (1,347 samples, 1.14%)</title><rect x="6.8360%" y="1045" width="1.1436%" height="15" fill="rgb(245,203,43)" fg:x="8052" fg:w="1347"/><text x="7.0860%" y="1055.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (1,347 samples, 1.14%)</title><rect x="6.8360%" y="1029" width="1.1436%" height="15" fill="rgb(238,205,33)" fg:x="8052" fg:w="1347"/><text x="7.0860%" y="1039.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,347 samples, 1.14%)</title><rect x="6.8360%" y="1013" width="1.1436%" height="15" fill="rgb(231,56,7)" fg:x="8052" fg:w="1347"/><text x="7.0860%" y="1023.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,347 samples, 1.14%)</title><rect x="6.8360%" y="997" width="1.1436%" height="15" fill="rgb(244,186,29)" fg:x="8052" fg:w="1347"/><text x="7.0860%" y="1007.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (1,347 samples, 1.14%)</title><rect x="6.8360%" y="981" width="1.1436%" height="15" fill="rgb(234,111,31)" fg:x="8052" fg:w="1347"/><text x="7.0860%" y="991.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (1,347 samples, 1.14%)</title><rect x="6.8360%" y="965" width="1.1436%" height="15" fill="rgb(241,149,10)" fg:x="8052" fg:w="1347"/><text x="7.0860%" y="975.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (1,347 samples, 1.14%)</title><rect x="6.8360%" y="949" width="1.1436%" height="15" fill="rgb(249,206,44)" fg:x="8052" fg:w="1347"/><text x="7.0860%" y="959.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,347 samples, 1.14%)</title><rect x="6.8360%" y="933" width="1.1436%" height="15" fill="rgb(251,153,30)" fg:x="8052" fg:w="1347"/><text x="7.0860%" y="943.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,347 samples, 1.14%)</title><rect x="6.8360%" y="917" width="1.1436%" height="15" fill="rgb(239,152,38)" fg:x="8052" fg:w="1347"/><text x="7.0860%" y="927.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (1,347 samples, 1.14%)</title><rect x="6.8360%" y="901" width="1.1436%" height="15" fill="rgb(249,139,47)" fg:x="8052" fg:w="1347"/><text x="7.0860%" y="911.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,347 samples, 1.14%)</title><rect x="6.8360%" y="885" width="1.1436%" height="15" fill="rgb(244,64,35)" fg:x="8052" fg:w="1347"/><text x="7.0860%" y="895.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,347 samples, 1.14%)</title><rect x="6.8360%" y="869" width="1.1436%" height="15" fill="rgb(216,46,15)" fg:x="8052" fg:w="1347"/><text x="7.0860%" y="879.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (1,343 samples, 1.14%)</title><rect x="6.8393%" y="853" width="1.1402%" height="15" fill="rgb(250,74,19)" fg:x="8056" fg:w="1343"/><text x="7.0893%" y="863.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,343 samples, 1.14%)</title><rect x="6.8393%" y="837" width="1.1402%" height="15" fill="rgb(249,42,33)" fg:x="8056" fg:w="1343"/><text x="7.0893%" y="847.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (827 samples, 0.70%)</title><rect x="7.2774%" y="821" width="0.7021%" height="15" fill="rgb(242,149,17)" fg:x="8572" fg:w="827"/><text x="7.5274%" y="831.50"></text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (38 samples, 0.03%)</title><rect x="7.9473%" y="805" width="0.0323%" height="15" fill="rgb(244,29,21)" fg:x="9361" fg:w="38"/><text x="8.1973%" y="815.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (38 samples, 0.03%)</title><rect x="7.9473%" y="789" width="0.0323%" height="15" fill="rgb(220,130,37)" fg:x="9361" fg:w="38"/><text x="8.1973%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (38 samples, 0.03%)</title><rect x="7.9473%" y="773" width="0.0323%" height="15" fill="rgb(211,67,2)" fg:x="9361" fg:w="38"/><text x="8.1973%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (28 samples, 0.02%)</title><rect x="7.9558%" y="757" width="0.0238%" height="15" fill="rgb(235,68,52)" fg:x="9371" fg:w="28"/><text x="8.2058%" y="767.50"></text></g><g><title>[libc-2.31.so] (54 samples, 0.05%)</title><rect x="7.9846%" y="677" width="0.0458%" height="15" fill="rgb(246,142,3)" fg:x="9405" fg:w="54"/><text x="8.2346%" y="687.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (82 samples, 0.07%)</title><rect x="7.9795%" y="1061" width="0.0696%" height="15" fill="rgb(241,25,7)" fg:x="9399" fg:w="82"/><text x="8.2295%" y="1071.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (82 samples, 0.07%)</title><rect x="7.9795%" y="1045" width="0.0696%" height="15" fill="rgb(242,119,39)" fg:x="9399" fg:w="82"/><text x="8.2295%" y="1055.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (82 samples, 0.07%)</title><rect x="7.9795%" y="1029" width="0.0696%" height="15" fill="rgb(241,98,45)" fg:x="9399" fg:w="82"/><text x="8.2295%" y="1039.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (82 samples, 0.07%)</title><rect x="7.9795%" y="1013" width="0.0696%" height="15" fill="rgb(254,28,30)" fg:x="9399" fg:w="82"/><text x="8.2295%" y="1023.50"></text></g><g><title>async_task::runnable::Runnable::run (82 samples, 0.07%)</title><rect x="7.9795%" y="997" width="0.0696%" height="15" fill="rgb(241,142,54)" fg:x="9399" fg:w="82"/><text x="8.2295%" y="1007.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (82 samples, 0.07%)</title><rect x="7.9795%" y="981" width="0.0696%" height="15" fill="rgb(222,85,15)" fg:x="9399" fg:w="82"/><text x="8.2295%" y="991.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (82 samples, 0.07%)</title><rect x="7.9795%" y="965" width="0.0696%" height="15" fill="rgb(210,85,47)" fg:x="9399" fg:w="82"/><text x="8.2295%" y="975.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (82 samples, 0.07%)</title><rect x="7.9795%" y="949" width="0.0696%" height="15" fill="rgb(224,206,25)" fg:x="9399" fg:w="82"/><text x="8.2295%" y="959.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (82 samples, 0.07%)</title><rect x="7.9795%" y="933" width="0.0696%" height="15" fill="rgb(243,201,19)" fg:x="9399" fg:w="82"/><text x="8.2295%" y="943.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (82 samples, 0.07%)</title><rect x="7.9795%" y="917" width="0.0696%" height="15" fill="rgb(236,59,4)" fg:x="9399" fg:w="82"/><text x="8.2295%" y="927.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (82 samples, 0.07%)</title><rect x="7.9795%" y="901" width="0.0696%" height="15" fill="rgb(254,179,45)" fg:x="9399" fg:w="82"/><text x="8.2295%" y="911.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (82 samples, 0.07%)</title><rect x="7.9795%" y="885" width="0.0696%" height="15" fill="rgb(226,14,10)" fg:x="9399" fg:w="82"/><text x="8.2295%" y="895.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (82 samples, 0.07%)</title><rect x="7.9795%" y="869" width="0.0696%" height="15" fill="rgb(244,27,41)" fg:x="9399" fg:w="82"/><text x="8.2295%" y="879.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (82 samples, 0.07%)</title><rect x="7.9795%" y="853" width="0.0696%" height="15" fill="rgb(235,35,32)" fg:x="9399" fg:w="82"/><text x="8.2295%" y="863.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (82 samples, 0.07%)</title><rect x="7.9795%" y="837" width="0.0696%" height="15" fill="rgb(218,68,31)" fg:x="9399" fg:w="82"/><text x="8.2295%" y="847.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (82 samples, 0.07%)</title><rect x="7.9795%" y="821" width="0.0696%" height="15" fill="rgb(207,120,37)" fg:x="9399" fg:w="82"/><text x="8.2295%" y="831.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (82 samples, 0.07%)</title><rect x="7.9795%" y="805" width="0.0696%" height="15" fill="rgb(227,98,0)" fg:x="9399" fg:w="82"/><text x="8.2295%" y="815.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (82 samples, 0.07%)</title><rect x="7.9795%" y="789" width="0.0696%" height="15" fill="rgb(207,7,3)" fg:x="9399" fg:w="82"/><text x="8.2295%" y="799.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (82 samples, 0.07%)</title><rect x="7.9795%" y="773" width="0.0696%" height="15" fill="rgb(206,98,19)" fg:x="9399" fg:w="82"/><text x="8.2295%" y="783.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (82 samples, 0.07%)</title><rect x="7.9795%" y="757" width="0.0696%" height="15" fill="rgb(217,5,26)" fg:x="9399" fg:w="82"/><text x="8.2295%" y="767.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (82 samples, 0.07%)</title><rect x="7.9795%" y="741" width="0.0696%" height="15" fill="rgb(235,190,38)" fg:x="9399" fg:w="82"/><text x="8.2295%" y="751.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (82 samples, 0.07%)</title><rect x="7.9795%" y="725" width="0.0696%" height="15" fill="rgb(247,86,24)" fg:x="9399" fg:w="82"/><text x="8.2295%" y="735.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (82 samples, 0.07%)</title><rect x="7.9795%" y="709" width="0.0696%" height="15" fill="rgb(205,101,16)" fg:x="9399" fg:w="82"/><text x="8.2295%" y="719.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (82 samples, 0.07%)</title><rect x="7.9795%" y="693" width="0.0696%" height="15" fill="rgb(246,168,33)" fg:x="9399" fg:w="82"/><text x="8.2295%" y="703.50"></text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (22 samples, 0.02%)</title><rect x="8.0305%" y="677" width="0.0187%" height="15" fill="rgb(231,114,1)" fg:x="9459" fg:w="22"/><text x="8.2805%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (24 samples, 0.02%)</title><rect x="8.2104%" y="565" width="0.0204%" height="15" fill="rgb(207,184,53)" fg:x="9671" fg:w="24"/><text x="8.4604%" y="575.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (24 samples, 0.02%)</title><rect x="8.2104%" y="549" width="0.0204%" height="15" fill="rgb(224,95,51)" fg:x="9671" fg:w="24"/><text x="8.4604%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (24 samples, 0.02%)</title><rect x="8.2104%" y="533" width="0.0204%" height="15" fill="rgb(212,188,45)" fg:x="9671" fg:w="24"/><text x="8.4604%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (41 samples, 0.03%)</title><rect x="8.2495%" y="533" width="0.0348%" height="15" fill="rgb(223,154,38)" fg:x="9717" fg:w="41"/><text x="8.4995%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (41 samples, 0.03%)</title><rect x="8.2495%" y="517" width="0.0348%" height="15" fill="rgb(251,22,52)" fg:x="9717" fg:w="41"/><text x="8.4995%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (38 samples, 0.03%)</title><rect x="8.2520%" y="501" width="0.0323%" height="15" fill="rgb(229,209,22)" fg:x="9720" fg:w="38"/><text x="8.5020%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (38 samples, 0.03%)</title><rect x="8.2520%" y="485" width="0.0323%" height="15" fill="rgb(234,138,34)" fg:x="9720" fg:w="38"/><text x="8.5020%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (38 samples, 0.03%)</title><rect x="8.2520%" y="469" width="0.0323%" height="15" fill="rgb(212,95,11)" fg:x="9720" fg:w="38"/><text x="8.5020%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (38 samples, 0.03%)</title><rect x="8.2520%" y="453" width="0.0323%" height="15" fill="rgb(240,179,47)" fg:x="9720" fg:w="38"/><text x="8.5020%" y="463.50"></text></g><g><title>alloc::alloc::alloc (38 samples, 0.03%)</title><rect x="8.2520%" y="437" width="0.0323%" height="15" fill="rgb(240,163,11)" fg:x="9720" fg:w="38"/><text x="8.5020%" y="447.50"></text></g><g><title>__rg_alloc (38 samples, 0.03%)</title><rect x="8.2520%" y="421" width="0.0323%" height="15" fill="rgb(236,37,12)" fg:x="9720" fg:w="38"/><text x="8.5020%" y="431.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (38 samples, 0.03%)</title><rect x="8.2520%" y="405" width="0.0323%" height="15" fill="rgb(232,164,16)" fg:x="9720" fg:w="38"/><text x="8.5020%" y="415.50"></text></g><g><title>sn_rust_alloc (34 samples, 0.03%)</title><rect x="8.2554%" y="389" width="0.0289%" height="15" fill="rgb(244,205,15)" fg:x="9724" fg:w="34"/><text x="8.5054%" y="399.50"></text></g><g><title>&lt;tremor_runtime::codec::msgpack::MsgPack as tremor_runtime::codec::Codec&gt;::encode (67 samples, 0.06%)</title><rect x="8.2308%" y="565" width="0.0569%" height="15" fill="rgb(223,117,47)" fg:x="9695" fg:w="67"/><text x="8.4808%" y="575.50"></text></g><g><title>rmp_serde::encode::to_vec (58 samples, 0.05%)</title><rect x="8.2385%" y="549" width="0.0492%" height="15" fill="rgb(244,107,35)" fg:x="9704" fg:w="58"/><text x="8.4885%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (35 samples, 0.03%)</title><rect x="8.3964%" y="293" width="0.0297%" height="15" fill="rgb(205,140,8)" fg:x="9890" fg:w="35"/><text x="8.6464%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (35 samples, 0.03%)</title><rect x="8.3964%" y="277" width="0.0297%" height="15" fill="rgb(228,84,46)" fg:x="9890" fg:w="35"/><text x="8.6464%" y="287.50"></text></g><g><title>__rg_dealloc (35 samples, 0.03%)</title><rect x="8.3964%" y="261" width="0.0297%" height="15" fill="rgb(254,188,9)" fg:x="9890" fg:w="35"/><text x="8.6464%" y="271.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (35 samples, 0.03%)</title><rect x="8.3964%" y="245" width="0.0297%" height="15" fill="rgb(206,112,54)" fg:x="9890" fg:w="35"/><text x="8.6464%" y="255.50"></text></g><g><title>sn_rust_dealloc (30 samples, 0.03%)</title><rect x="8.4006%" y="229" width="0.0255%" height="15" fill="rgb(216,84,49)" fg:x="9895" fg:w="30"/><text x="8.6506%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (78 samples, 0.07%)</title><rect x="8.3624%" y="453" width="0.0662%" height="15" fill="rgb(214,194,35)" fg:x="9850" fg:w="78"/><text x="8.6124%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (71 samples, 0.06%)</title><rect x="8.3684%" y="437" width="0.0603%" height="15" fill="rgb(249,28,3)" fg:x="9857" fg:w="71"/><text x="8.6184%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (67 samples, 0.06%)</title><rect x="8.3717%" y="421" width="0.0569%" height="15" fill="rgb(222,56,52)" fg:x="9861" fg:w="67"/><text x="8.6217%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (67 samples, 0.06%)</title><rect x="8.3717%" y="405" width="0.0569%" height="15" fill="rgb(245,217,50)" fg:x="9861" fg:w="67"/><text x="8.6217%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (44 samples, 0.04%)</title><rect x="8.3913%" y="389" width="0.0374%" height="15" fill="rgb(213,201,24)" fg:x="9884" fg:w="44"/><text x="8.6413%" y="399.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (44 samples, 0.04%)</title><rect x="8.3913%" y="373" width="0.0374%" height="15" fill="rgb(248,116,28)" fg:x="9884" fg:w="44"/><text x="8.6413%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (38 samples, 0.03%)</title><rect x="8.3964%" y="357" width="0.0323%" height="15" fill="rgb(219,72,43)" fg:x="9890" fg:w="38"/><text x="8.6464%" y="367.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 0.03%)</title><rect x="8.3964%" y="341" width="0.0323%" height="15" fill="rgb(209,138,14)" fg:x="9890" fg:w="38"/><text x="8.6464%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (38 samples, 0.03%)</title><rect x="8.3964%" y="325" width="0.0323%" height="15" fill="rgb(222,18,33)" fg:x="9890" fg:w="38"/><text x="8.6464%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 0.03%)</title><rect x="8.3964%" y="309" width="0.0323%" height="15" fill="rgb(213,199,7)" fg:x="9890" fg:w="38"/><text x="8.6464%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (35 samples, 0.03%)</title><rect x="8.4286%" y="453" width="0.0297%" height="15" fill="rgb(250,110,10)" fg:x="9928" fg:w="35"/><text x="8.6786%" y="463.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (24 samples, 0.02%)</title><rect x="8.4380%" y="437" width="0.0204%" height="15" fill="rgb(248,123,6)" fg:x="9939" fg:w="24"/><text x="8.6880%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (24 samples, 0.02%)</title><rect x="8.4380%" y="421" width="0.0204%" height="15" fill="rgb(206,91,31)" fg:x="9939" fg:w="24"/><text x="8.6880%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (83 samples, 0.07%)</title><rect x="8.4617%" y="389" width="0.0705%" height="15" fill="rgb(211,154,13)" fg:x="9967" fg:w="83"/><text x="8.7117%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (83 samples, 0.07%)</title><rect x="8.4617%" y="373" width="0.0705%" height="15" fill="rgb(225,148,7)" fg:x="9967" fg:w="83"/><text x="8.7117%" y="383.50"></text></g><g><title>alloc::alloc::alloc (81 samples, 0.07%)</title><rect x="8.4634%" y="357" width="0.0688%" height="15" fill="rgb(220,160,43)" fg:x="9969" fg:w="81"/><text x="8.7134%" y="367.50"></text></g><g><title>__rg_alloc (81 samples, 0.07%)</title><rect x="8.4634%" y="341" width="0.0688%" height="15" fill="rgb(213,52,39)" fg:x="9969" fg:w="81"/><text x="8.7134%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (81 samples, 0.07%)</title><rect x="8.4634%" y="325" width="0.0688%" height="15" fill="rgb(243,137,7)" fg:x="9969" fg:w="81"/><text x="8.7134%" y="335.50"></text></g><g><title>sn_rust_alloc (74 samples, 0.06%)</title><rect x="8.4694%" y="309" width="0.0628%" height="15" fill="rgb(230,79,13)" fg:x="9976" fg:w="74"/><text x="8.7194%" y="319.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (577 samples, 0.49%)</title><rect x="8.0508%" y="933" width="0.4899%" height="15" fill="rgb(247,105,23)" fg:x="9483" fg:w="577"/><text x="8.3008%" y="943.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (577 samples, 0.49%)</title><rect x="8.0508%" y="917" width="0.4899%" height="15" fill="rgb(223,179,41)" fg:x="9483" fg:w="577"/><text x="8.3008%" y="927.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (577 samples, 0.49%)</title><rect x="8.0508%" y="901" width="0.4899%" height="15" fill="rgb(218,9,34)" fg:x="9483" fg:w="577"/><text x="8.3008%" y="911.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (577 samples, 0.49%)</title><rect x="8.0508%" y="885" width="0.4899%" height="15" fill="rgb(222,106,8)" fg:x="9483" fg:w="577"/><text x="8.3008%" y="895.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (577 samples, 0.49%)</title><rect x="8.0508%" y="869" width="0.4899%" height="15" fill="rgb(211,220,0)" fg:x="9483" fg:w="577"/><text x="8.3008%" y="879.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (577 samples, 0.49%)</title><rect x="8.0508%" y="853" width="0.4899%" height="15" fill="rgb(229,52,16)" fg:x="9483" fg:w="577"/><text x="8.3008%" y="863.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (577 samples, 0.49%)</title><rect x="8.0508%" y="837" width="0.4899%" height="15" fill="rgb(212,155,18)" fg:x="9483" fg:w="577"/><text x="8.3008%" y="847.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (577 samples, 0.49%)</title><rect x="8.0508%" y="821" width="0.4899%" height="15" fill="rgb(242,21,14)" fg:x="9483" fg:w="577"/><text x="8.3008%" y="831.50"></text></g><g><title>std::panic::catch_unwind (577 samples, 0.49%)</title><rect x="8.0508%" y="805" width="0.4899%" height="15" fill="rgb(222,19,48)" fg:x="9483" fg:w="577"/><text x="8.3008%" y="815.50"></text></g><g><title>std::panicking::try (577 samples, 0.49%)</title><rect x="8.0508%" y="789" width="0.4899%" height="15" fill="rgb(232,45,27)" fg:x="9483" fg:w="577"/><text x="8.3008%" y="799.50"></text></g><g><title>std::panicking::try::do_call (577 samples, 0.49%)</title><rect x="8.0508%" y="773" width="0.4899%" height="15" fill="rgb(249,103,42)" fg:x="9483" fg:w="577"/><text x="8.3008%" y="783.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (577 samples, 0.49%)</title><rect x="8.0508%" y="757" width="0.4899%" height="15" fill="rgb(246,81,33)" fg:x="9483" fg:w="577"/><text x="8.3008%" y="767.50"></text></g><g><title>core::ops::function::FnOnce::call_once (577 samples, 0.49%)</title><rect x="8.0508%" y="741" width="0.4899%" height="15" fill="rgb(252,33,42)" fg:x="9483" fg:w="577"/><text x="8.3008%" y="751.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (577 samples, 0.49%)</title><rect x="8.0508%" y="725" width="0.4899%" height="15" fill="rgb(209,212,41)" fg:x="9483" fg:w="577"/><text x="8.3008%" y="735.50"></text></g><g><title>async_ffi::FfiContext::with_context (577 samples, 0.49%)</title><rect x="8.0508%" y="709" width="0.4899%" height="15" fill="rgb(207,154,6)" fg:x="9483" fg:w="577"/><text x="8.3008%" y="719.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (577 samples, 0.49%)</title><rect x="8.0508%" y="693" width="0.4899%" height="15" fill="rgb(223,64,47)" fg:x="9483" fg:w="577"/><text x="8.3008%" y="703.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (577 samples, 0.49%)</title><rect x="8.0508%" y="677" width="0.4899%" height="15" fill="rgb(211,161,38)" fg:x="9483" fg:w="577"/><text x="8.3008%" y="687.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (577 samples, 0.49%)</title><rect x="8.0508%" y="661" width="0.4899%" height="15" fill="rgb(219,138,40)" fg:x="9483" fg:w="577"/><text x="8.3008%" y="671.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (577 samples, 0.49%)</title><rect x="8.0508%" y="645" width="0.4899%" height="15" fill="rgb(241,228,46)" fg:x="9483" fg:w="577"/><text x="8.3008%" y="655.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (577 samples, 0.49%)</title><rect x="8.0508%" y="629" width="0.4899%" height="15" fill="rgb(223,209,38)" fg:x="9483" fg:w="577"/><text x="8.3008%" y="639.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (577 samples, 0.49%)</title><rect x="8.0508%" y="613" width="0.4899%" height="15" fill="rgb(236,164,45)" fg:x="9483" fg:w="577"/><text x="8.3008%" y="623.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (577 samples, 0.49%)</title><rect x="8.0508%" y="597" width="0.4899%" height="15" fill="rgb(231,15,5)" fg:x="9483" fg:w="577"/><text x="8.3008%" y="607.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (577 samples, 0.49%)</title><rect x="8.0508%" y="581" width="0.4899%" height="15" fill="rgb(252,35,15)" fg:x="9483" fg:w="577"/><text x="8.3008%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (298 samples, 0.25%)</title><rect x="8.2877%" y="565" width="0.2530%" height="15" fill="rgb(248,181,18)" fg:x="9762" fg:w="298"/><text x="8.5377%" y="575.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::iter::traits::collect::FromIterator&lt;T&gt; for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::from_iter (298 samples, 0.25%)</title><rect x="8.2877%" y="549" width="0.2530%" height="15" fill="rgb(233,39,42)" fg:x="9762" fg:w="298"/><text x="8.5377%" y="559.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (298 samples, 0.25%)</title><rect x="8.2877%" y="533" width="0.2530%" height="15" fill="rgb(238,110,33)" fg:x="9762" fg:w="298"/><text x="8.5377%" y="543.50"></text></g><g><title>core::ops::function::FnOnce::call_once (291 samples, 0.25%)</title><rect x="8.2936%" y="517" width="0.2471%" height="15" fill="rgb(233,195,10)" fg:x="9769" fg:w="291"/><text x="8.5436%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (291 samples, 0.25%)</title><rect x="8.2936%" y="501" width="0.2471%" height="15" fill="rgb(254,105,3)" fg:x="9769" fg:w="291"/><text x="8.5436%" y="511.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (286 samples, 0.24%)</title><rect x="8.2979%" y="485" width="0.2428%" height="15" fill="rgb(221,225,9)" fg:x="9774" fg:w="286"/><text x="8.5479%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (212 samples, 0.18%)</title><rect x="8.3607%" y="469" width="0.1800%" height="15" fill="rgb(224,227,45)" fg:x="9848" fg:w="212"/><text x="8.6107%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (97 samples, 0.08%)</title><rect x="8.4583%" y="453" width="0.0824%" height="15" fill="rgb(229,198,43)" fg:x="9963" fg:w="97"/><text x="8.7083%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (97 samples, 0.08%)</title><rect x="8.4583%" y="437" width="0.0824%" height="15" fill="rgb(206,209,35)" fg:x="9963" fg:w="97"/><text x="8.7083%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (95 samples, 0.08%)</title><rect x="8.4600%" y="421" width="0.0807%" height="15" fill="rgb(245,195,53)" fg:x="9965" fg:w="95"/><text x="8.7100%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (95 samples, 0.08%)</title><rect x="8.4600%" y="405" width="0.0807%" height="15" fill="rgb(240,92,26)" fg:x="9965" fg:w="95"/><text x="8.7100%" y="415.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::default::Default&gt;::default (145 samples, 0.12%)</title><rect x="8.6443%" y="805" width="0.1231%" height="15" fill="rgb(207,40,23)" fg:x="10182" fg:w="145"/><text x="8.8943%" y="815.50"></text></g><g><title>&lt;tremor_pipeline::event::Event as core::default::Default&gt;::default (220 samples, 0.19%)</title><rect x="8.6222%" y="821" width="0.1868%" height="15" fill="rgb(223,111,35)" fg:x="10156" fg:w="220"/><text x="8.8722%" y="831.50"></text></g><g><title>&lt;tremor_script::srs::EventPayload as core::default::Default&gt;::default (49 samples, 0.04%)</title><rect x="8.7674%" y="805" width="0.0416%" height="15" fill="rgb(229,147,28)" fg:x="10327" fg:w="49"/><text x="9.0174%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (14 samples, 0.01%)</title><rect x="8.8115%" y="821" width="0.0119%" height="15" fill="rgb(211,29,28)" fg:x="10379" fg:w="14"/><text x="9.0615%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (14 samples, 0.01%)</title><rect x="8.8115%" y="805" width="0.0119%" height="15" fill="rgb(228,72,33)" fg:x="10379" fg:w="14"/><text x="9.0615%" y="815.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (14 samples, 0.01%)</title><rect x="8.8115%" y="789" width="0.0119%" height="15" fill="rgb(205,214,31)" fg:x="10379" fg:w="14"/><text x="9.0615%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (23 samples, 0.02%)</title><rect x="8.8234%" y="821" width="0.0195%" height="15" fill="rgb(224,111,15)" fg:x="10393" fg:w="23"/><text x="9.0734%" y="831.50"></text></g><g><title>sn_rust_dealloc (16 samples, 0.01%)</title><rect x="8.8293%" y="805" width="0.0136%" height="15" fill="rgb(253,21,26)" fg:x="10400" fg:w="16"/><text x="9.0793%" y="815.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (362 samples, 0.31%)</title><rect x="8.5407%" y="837" width="0.3073%" height="15" fill="rgb(245,139,43)" fg:x="10060" fg:w="362"/><text x="8.7907%" y="847.50"></text></g><g><title>alloc::alloc::exchange_malloc (12 samples, 0.01%)</title><rect x="8.8659%" y="821" width="0.0102%" height="15" fill="rgb(252,170,7)" fg:x="10443" fg:w="12"/><text x="9.1159%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.01%)</title><rect x="8.8659%" y="805" width="0.0102%" height="15" fill="rgb(231,118,14)" fg:x="10443" fg:w="12"/><text x="9.1159%" y="815.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.01%)</title><rect x="8.8659%" y="789" width="0.0102%" height="15" fill="rgb(238,83,0)" fg:x="10443" fg:w="12"/><text x="9.1159%" y="799.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.01%)</title><rect x="8.8659%" y="773" width="0.0102%" height="15" fill="rgb(221,39,39)" fg:x="10443" fg:w="12"/><text x="9.1159%" y="783.50"></text></g><g><title>__rg_alloc (12 samples, 0.01%)</title><rect x="8.8659%" y="757" width="0.0102%" height="15" fill="rgb(222,119,46)" fg:x="10443" fg:w="12"/><text x="9.1159%" y="767.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (12 samples, 0.01%)</title><rect x="8.8659%" y="741" width="0.0102%" height="15" fill="rgb(222,165,49)" fg:x="10443" fg:w="12"/><text x="9.1159%" y="751.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (402 samples, 0.34%)</title><rect x="8.5407%" y="917" width="0.3413%" height="15" fill="rgb(219,113,52)" fg:x="10060" fg:w="402"/><text x="8.7907%" y="927.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (402 samples, 0.34%)</title><rect x="8.5407%" y="901" width="0.3413%" height="15" fill="rgb(214,7,15)" fg:x="10060" fg:w="402"/><text x="8.7907%" y="911.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (402 samples, 0.34%)</title><rect x="8.5407%" y="885" width="0.3413%" height="15" fill="rgb(235,32,4)" fg:x="10060" fg:w="402"/><text x="8.7907%" y="895.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (402 samples, 0.34%)</title><rect x="8.5407%" y="869" width="0.3413%" height="15" fill="rgb(238,90,54)" fg:x="10060" fg:w="402"/><text x="8.7907%" y="879.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (402 samples, 0.34%)</title><rect x="8.5407%" y="853" width="0.3413%" height="15" fill="rgb(213,208,19)" fg:x="10060" fg:w="402"/><text x="8.7907%" y="863.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (40 samples, 0.03%)</title><rect x="8.8480%" y="837" width="0.0340%" height="15" fill="rgb(233,156,4)" fg:x="10422" fg:w="40"/><text x="9.0980%" y="847.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (403 samples, 0.34%)</title><rect x="8.5407%" y="933" width="0.3421%" height="15" fill="rgb(207,194,5)" fg:x="10060" fg:w="403"/><text x="8.7907%" y="943.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (72 samples, 0.06%)</title><rect x="8.9423%" y="805" width="0.0611%" height="15" fill="rgb(206,111,30)" fg:x="10533" fg:w="72"/><text x="9.1923%" y="815.50"></text></g><g><title>core::mem::replace (72 samples, 0.06%)</title><rect x="8.9423%" y="789" width="0.0611%" height="15" fill="rgb(243,70,54)" fg:x="10533" fg:w="72"/><text x="9.1923%" y="799.50"></text></g><g><title>core::ptr::read (72 samples, 0.06%)</title><rect x="8.9423%" y="773" width="0.0611%" height="15" fill="rgb(242,28,8)" fg:x="10533" fg:w="72"/><text x="9.1923%" y="783.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (119 samples, 0.10%)</title><rect x="8.9210%" y="821" width="0.1010%" height="15" fill="rgb(219,106,18)" fg:x="10508" fg:w="119"/><text x="9.1710%" y="831.50"></text></g><g><title>core::mem::drop (22 samples, 0.02%)</title><rect x="9.0034%" y="805" width="0.0187%" height="15" fill="rgb(244,222,10)" fg:x="10605" fg:w="22"/><text x="9.2534%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (22 samples, 0.02%)</title><rect x="9.0034%" y="789" width="0.0187%" height="15" fill="rgb(236,179,52)" fg:x="10605" fg:w="22"/><text x="9.2534%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (115 samples, 0.10%)</title><rect x="9.0221%" y="821" width="0.0976%" height="15" fill="rgb(213,23,39)" fg:x="10627" fg:w="115"/><text x="9.2721%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (107 samples, 0.09%)</title><rect x="9.0289%" y="805" width="0.0908%" height="15" fill="rgb(238,48,10)" fg:x="10635" fg:w="107"/><text x="9.2789%" y="815.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (107 samples, 0.09%)</title><rect x="9.0289%" y="789" width="0.0908%" height="15" fill="rgb(251,196,23)" fg:x="10635" fg:w="107"/><text x="9.2789%" y="799.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (98 samples, 0.08%)</title><rect x="9.0365%" y="773" width="0.0832%" height="15" fill="rgb(250,152,24)" fg:x="10644" fg:w="98"/><text x="9.2865%" y="783.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (98 samples, 0.08%)</title><rect x="9.0365%" y="757" width="0.0832%" height="15" fill="rgb(209,150,17)" fg:x="10644" fg:w="98"/><text x="9.2865%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (98 samples, 0.08%)</title><rect x="9.0365%" y="741" width="0.0832%" height="15" fill="rgb(234,202,34)" fg:x="10644" fg:w="98"/><text x="9.2865%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_swap (98 samples, 0.08%)</title><rect x="9.0365%" y="725" width="0.0832%" height="15" fill="rgb(253,148,53)" fg:x="10644" fg:w="98"/><text x="9.2865%" y="735.50"></text></g><g><title>core::task::wake::Waker::will_wake (35 samples, 0.03%)</title><rect x="9.1248%" y="821" width="0.0297%" height="15" fill="rgb(218,129,16)" fg:x="10748" fg:w="35"/><text x="9.3748%" y="831.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (35 samples, 0.03%)</title><rect x="9.1248%" y="805" width="0.0297%" height="15" fill="rgb(216,85,19)" fg:x="10748" fg:w="35"/><text x="9.3748%" y="815.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (24 samples, 0.02%)</title><rect x="9.1341%" y="789" width="0.0204%" height="15" fill="rgb(235,228,7)" fg:x="10759" fg:w="24"/><text x="9.3841%" y="799.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (24 samples, 0.02%)</title><rect x="9.1341%" y="773" width="0.0204%" height="15" fill="rgb(245,175,0)" fg:x="10759" fg:w="24"/><text x="9.3841%" y="783.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (948 samples, 0.80%)</title><rect x="8.8828%" y="917" width="0.8048%" height="15" fill="rgb(208,168,36)" fg:x="10463" fg:w="948"/><text x="9.1328%" y="927.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (948 samples, 0.80%)</title><rect x="8.8828%" y="901" width="0.8048%" height="15" fill="rgb(246,171,24)" fg:x="10463" fg:w="948"/><text x="9.1328%" y="911.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (948 samples, 0.80%)</title><rect x="8.8828%" y="885" width="0.8048%" height="15" fill="rgb(215,142,24)" fg:x="10463" fg:w="948"/><text x="9.1328%" y="895.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (948 samples, 0.80%)</title><rect x="8.8828%" y="869" width="0.8048%" height="15" fill="rgb(250,187,7)" fg:x="10463" fg:w="948"/><text x="9.1328%" y="879.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (948 samples, 0.80%)</title><rect x="8.8828%" y="853" width="0.8048%" height="15" fill="rgb(228,66,33)" fg:x="10463" fg:w="948"/><text x="9.1328%" y="863.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (948 samples, 0.80%)</title><rect x="8.8828%" y="837" width="0.8048%" height="15" fill="rgb(234,215,21)" fg:x="10463" fg:w="948"/><text x="9.1328%" y="847.50"></text></g><g><title>event_listener::Inner::lock (628 samples, 0.53%)</title><rect x="9.1545%" y="821" width="0.5332%" height="15" fill="rgb(222,191,20)" fg:x="10783" fg:w="628"/><text x="9.4045%" y="831.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (624 samples, 0.53%)</title><rect x="9.1579%" y="805" width="0.5298%" height="15" fill="rgb(245,79,54)" fg:x="10787" fg:w="624"/><text x="9.4079%" y="815.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (617 samples, 0.52%)</title><rect x="9.1638%" y="789" width="0.5238%" height="15" fill="rgb(240,10,37)" fg:x="10794" fg:w="617"/><text x="9.4138%" y="799.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (617 samples, 0.52%)</title><rect x="9.1638%" y="773" width="0.5238%" height="15" fill="rgb(214,192,32)" fg:x="10794" fg:w="617"/><text x="9.4138%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (617 samples, 0.52%)</title><rect x="9.1638%" y="757" width="0.5238%" height="15" fill="rgb(209,36,54)" fg:x="10794" fg:w="617"/><text x="9.4138%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (617 samples, 0.52%)</title><rect x="9.1638%" y="741" width="0.5238%" height="15" fill="rgb(220,10,11)" fg:x="10794" fg:w="617"/><text x="9.4138%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.01%)</title><rect x="10.0196%" y="757" width="0.0102%" height="15" fill="rgb(221,106,17)" fg:x="11802" fg:w="12"/><text x="10.2696%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)]&gt; (12 samples, 0.01%)</title><rect x="10.0196%" y="741" width="0.0102%" height="15" fill="rgb(251,142,44)" fg:x="11802" fg:w="12"/><text x="10.2696%" y="751.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (286 samples, 0.24%)</title><rect x="9.7904%" y="789" width="0.2428%" height="15" fill="rgb(238,13,15)" fg:x="11532" fg:w="286"/><text x="10.0404%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (16 samples, 0.01%)</title><rect x="10.0196%" y="773" width="0.0136%" height="15" fill="rgb(208,107,27)" fg:x="11802" fg:w="16"/><text x="10.2696%" y="783.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (18 samples, 0.02%)</title><rect x="10.0357%" y="773" width="0.0153%" height="15" fill="rgb(205,136,37)" fg:x="11821" fg:w="18"/><text x="10.2857%" y="783.50"></text></g><g><title>[libc-2.31.so] (22 samples, 0.02%)</title><rect x="10.0510%" y="773" width="0.0187%" height="15" fill="rgb(250,205,27)" fg:x="11839" fg:w="22"/><text x="10.3010%" y="783.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;tremor_pipeline::event::Event&gt;&gt;::from (46 samples, 0.04%)</title><rect x="10.0332%" y="789" width="0.0391%" height="15" fill="rgb(210,80,43)" fg:x="11818" fg:w="46"/><text x="10.2832%" y="799.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (340 samples, 0.29%)</title><rect x="9.7844%" y="805" width="0.2887%" height="15" fill="rgb(247,160,36)" fg:x="11525" fg:w="340"/><text x="10.0344%" y="815.50"></text></g><g><title>[libc-2.31.so] (294 samples, 0.25%)</title><rect x="10.0731%" y="805" width="0.2496%" height="15" fill="rgb(234,13,49)" fg:x="11865" fg:w="294"/><text x="10.3231%" y="815.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (16 samples, 0.01%)</title><rect x="10.3422%" y="693" width="0.0136%" height="15" fill="rgb(234,122,0)" fg:x="12182" fg:w="16"/><text x="10.5922%" y="703.50"></text></g><g><title>alloc::alloc::exchange_malloc (44 samples, 0.04%)</title><rect x="10.3227%" y="805" width="0.0374%" height="15" fill="rgb(207,146,38)" fg:x="12159" fg:w="44"/><text x="10.5727%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (44 samples, 0.04%)</title><rect x="10.3227%" y="789" width="0.0374%" height="15" fill="rgb(207,177,25)" fg:x="12159" fg:w="44"/><text x="10.5727%" y="799.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (44 samples, 0.04%)</title><rect x="10.3227%" y="773" width="0.0374%" height="15" fill="rgb(211,178,42)" fg:x="12159" fg:w="44"/><text x="10.5727%" y="783.50"></text></g><g><title>alloc::alloc::alloc (44 samples, 0.04%)</title><rect x="10.3227%" y="757" width="0.0374%" height="15" fill="rgb(230,69,54)" fg:x="12159" fg:w="44"/><text x="10.5727%" y="767.50"></text></g><g><title>__rg_alloc (44 samples, 0.04%)</title><rect x="10.3227%" y="741" width="0.0374%" height="15" fill="rgb(214,135,41)" fg:x="12159" fg:w="44"/><text x="10.5727%" y="751.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (44 samples, 0.04%)</title><rect x="10.3227%" y="725" width="0.0374%" height="15" fill="rgb(237,67,25)" fg:x="12159" fg:w="44"/><text x="10.5727%" y="735.50"></text></g><g><title>sn_rust_alloc (42 samples, 0.04%)</title><rect x="10.3244%" y="709" width="0.0357%" height="15" fill="rgb(222,189,50)" fg:x="12161" fg:w="42"/><text x="10.5744%" y="719.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (31 samples, 0.03%)</title><rect x="10.3617%" y="805" width="0.0263%" height="15" fill="rgb(245,148,34)" fg:x="12205" fg:w="31"/><text x="10.6117%" y="815.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.02%)</title><rect x="10.3940%" y="725" width="0.0153%" height="15" fill="rgb(222,29,6)" fg:x="12243" fg:w="18"/><text x="10.6440%" y="735.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.02%)</title><rect x="10.3940%" y="709" width="0.0153%" height="15" fill="rgb(221,189,43)" fg:x="12243" fg:w="18"/><text x="10.6440%" y="719.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (239 samples, 0.20%)</title><rect x="10.3881%" y="805" width="0.2029%" height="15" fill="rgb(207,36,27)" fg:x="12236" fg:w="239"/><text x="10.6381%" y="815.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (232 samples, 0.20%)</title><rect x="10.3940%" y="789" width="0.1970%" height="15" fill="rgb(217,90,24)" fg:x="12243" fg:w="232"/><text x="10.6440%" y="799.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (232 samples, 0.20%)</title><rect x="10.3940%" y="773" width="0.1970%" height="15" fill="rgb(224,66,35)" fg:x="12243" fg:w="232"/><text x="10.6440%" y="783.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_hash (232 samples, 0.20%)</title><rect x="10.3940%" y="757" width="0.1970%" height="15" fill="rgb(221,13,50)" fg:x="12243" fg:w="232"/><text x="10.6440%" y="767.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::search (232 samples, 0.20%)</title><rect x="10.3940%" y="741" width="0.1970%" height="15" fill="rgb(236,68,49)" fg:x="12243" fg:w="232"/><text x="10.6440%" y="751.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (214 samples, 0.18%)</title><rect x="10.4093%" y="725" width="0.1817%" height="15" fill="rgb(229,146,28)" fg:x="12261" fg:w="214"/><text x="10.6593%" y="735.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (207 samples, 0.18%)</title><rect x="10.4152%" y="709" width="0.1757%" height="15" fill="rgb(225,31,38)" fg:x="12268" fg:w="207"/><text x="10.6652%" y="719.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (207 samples, 0.18%)</title><rect x="10.4152%" y="693" width="0.1757%" height="15" fill="rgb(250,208,3)" fg:x="12268" fg:w="207"/><text x="10.6652%" y="703.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (207 samples, 0.18%)</title><rect x="10.4152%" y="677" width="0.1757%" height="15" fill="rgb(246,54,23)" fg:x="12268" fg:w="207"/><text x="10.6652%" y="687.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (207 samples, 0.18%)</title><rect x="10.4152%" y="661" width="0.1757%" height="15" fill="rgb(243,76,11)" fg:x="12268" fg:w="207"/><text x="10.6652%" y="671.50"></text></g><g><title>[libc-2.31.so] (152 samples, 0.13%)</title><rect x="10.4619%" y="645" width="0.1290%" height="15" fill="rgb(245,21,50)" fg:x="12323" fg:w="152"/><text x="10.7119%" y="655.50"></text></g><g><title>ahash::operations::folded_multiply (23 samples, 0.02%)</title><rect x="10.5986%" y="725" width="0.0195%" height="15" fill="rgb(228,9,43)" fg:x="12484" fg:w="23"/><text x="10.8486%" y="735.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (16 samples, 0.01%)</title><rect x="10.6046%" y="709" width="0.0136%" height="15" fill="rgb(208,100,47)" fg:x="12491" fg:w="16"/><text x="10.8546%" y="719.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (33 samples, 0.03%)</title><rect x="10.5986%" y="741" width="0.0280%" height="15" fill="rgb(232,26,8)" fg:x="12484" fg:w="33"/><text x="10.8486%" y="751.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (32 samples, 0.03%)</title><rect x="10.6462%" y="677" width="0.0272%" height="15" fill="rgb(216,166,38)" fg:x="12540" fg:w="32"/><text x="10.8962%" y="687.50"></text></g><g><title>ahash::operations::folded_multiply (23 samples, 0.02%)</title><rect x="10.6538%" y="661" width="0.0195%" height="15" fill="rgb(251,202,51)" fg:x="12549" fg:w="23"/><text x="10.9038%" y="671.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (15 samples, 0.01%)</title><rect x="10.6606%" y="645" width="0.0127%" height="15" fill="rgb(254,216,34)" fg:x="12557" fg:w="15"/><text x="10.9106%" y="655.50"></text></g><g><title>ahash::operations::read_small (15 samples, 0.01%)</title><rect x="10.6733%" y="677" width="0.0127%" height="15" fill="rgb(251,32,27)" fg:x="12572" fg:w="15"/><text x="10.9233%" y="687.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (70 samples, 0.06%)</title><rect x="10.6317%" y="693" width="0.0594%" height="15" fill="rgb(208,127,28)" fg:x="12523" fg:w="70"/><text x="10.8817%" y="703.50"></text></g><g><title>hashbrown::map::make_hash (145 samples, 0.12%)</title><rect x="10.5935%" y="757" width="0.1231%" height="15" fill="rgb(224,137,22)" fg:x="12478" fg:w="145"/><text x="10.8435%" y="767.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (101 samples, 0.09%)</title><rect x="10.6309%" y="741" width="0.0857%" height="15" fill="rgb(254,70,32)" fg:x="12522" fg:w="101"/><text x="10.8809%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (100 samples, 0.08%)</title><rect x="10.6317%" y="725" width="0.0849%" height="15" fill="rgb(229,75,37)" fg:x="12523" fg:w="100"/><text x="10.8817%" y="735.50"></text></g><g><title>core::hash::Hasher::write_str (100 samples, 0.08%)</title><rect x="10.6317%" y="709" width="0.0849%" height="15" fill="rgb(252,64,23)" fg:x="12523" fg:w="100"/><text x="10.8817%" y="719.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u8 (30 samples, 0.03%)</title><rect x="10.6912%" y="693" width="0.0255%" height="15" fill="rgb(232,162,48)" fg:x="12593" fg:w="30"/><text x="10.9412%" y="703.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (30 samples, 0.03%)</title><rect x="10.6912%" y="677" width="0.0255%" height="15" fill="rgb(246,160,12)" fg:x="12593" fg:w="30"/><text x="10.9412%" y="687.50"></text></g><g><title>ahash::operations::folded_multiply (20 samples, 0.02%)</title><rect x="10.6996%" y="661" width="0.0170%" height="15" fill="rgb(247,166,0)" fg:x="12603" fg:w="20"/><text x="10.9496%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.02%)</title><rect x="10.7412%" y="709" width="0.0204%" height="15" fill="rgb(249,219,21)" fg:x="12652" fg:w="24"/><text x="10.9912%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="10.7506%" y="693" width="0.0110%" height="15" fill="rgb(205,209,3)" fg:x="12663" fg:w="13"/><text x="11.0006%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 0.03%)</title><rect x="10.7412%" y="725" width="0.0272%" height="15" fill="rgb(243,44,1)" fg:x="12652" fg:w="32"/><text x="10.9912%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;core::ops::range::RangeFull&gt;&gt;::index (20 samples, 0.02%)</title><rect x="10.7684%" y="693" width="0.0170%" height="15" fill="rgb(206,159,16)" fg:x="12684" fg:w="20"/><text x="11.0184%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (20 samples, 0.02%)</title><rect x="10.7684%" y="677" width="0.0170%" height="15" fill="rgb(244,77,30)" fg:x="12684" fg:w="20"/><text x="11.0184%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (20 samples, 0.02%)</title><rect x="10.7684%" y="661" width="0.0170%" height="15" fill="rgb(218,69,12)" fg:x="12684" fg:w="20"/><text x="11.0184%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (184 samples, 0.16%)</title><rect x="10.7684%" y="709" width="0.1562%" height="15" fill="rgb(212,87,7)" fg:x="12684" fg:w="184"/><text x="11.0184%" y="719.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (164 samples, 0.14%)</title><rect x="10.7854%" y="693" width="0.1392%" height="15" fill="rgb(245,114,25)" fg:x="12704" fg:w="164"/><text x="11.0354%" y="703.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (164 samples, 0.14%)</title><rect x="10.7854%" y="677" width="0.1392%" height="15" fill="rgb(210,61,42)" fg:x="12704" fg:w="164"/><text x="11.0354%" y="687.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (164 samples, 0.14%)</title><rect x="10.7854%" y="661" width="0.1392%" height="15" fill="rgb(211,52,33)" fg:x="12704" fg:w="164"/><text x="11.0354%" y="671.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (164 samples, 0.14%)</title><rect x="10.7854%" y="645" width="0.1392%" height="15" fill="rgb(234,58,33)" fg:x="12704" fg:w="164"/><text x="11.0354%" y="655.50"></text></g><g><title>[libc-2.31.so] (84 samples, 0.07%)</title><rect x="10.8533%" y="629" width="0.0713%" height="15" fill="rgb(220,115,36)" fg:x="12784" fg:w="84"/><text x="11.1033%" y="639.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (306 samples, 0.26%)</title><rect x="10.7684%" y="725" width="0.2598%" height="15" fill="rgb(243,153,54)" fg:x="12684" fg:w="306"/><text x="11.0184%" y="735.50"></text></g><g><title>&lt;lru::KeyRef&lt;K&gt; as core::borrow::Borrow&lt;K&gt;&gt;::borrow (122 samples, 0.10%)</title><rect x="10.9246%" y="709" width="0.1036%" height="15" fill="rgb(251,47,18)" fg:x="12868" fg:w="122"/><text x="11.1746%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (622 samples, 0.53%)</title><rect x="10.5935%" y="789" width="0.5281%" height="15" fill="rgb(242,102,42)" fg:x="12478" fg:w="622"/><text x="10.8435%" y="799.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (622 samples, 0.53%)</title><rect x="10.5935%" y="773" width="0.5281%" height="15" fill="rgb(234,31,38)" fg:x="12478" fg:w="622"/><text x="10.8435%" y="783.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (477 samples, 0.40%)</title><rect x="10.7166%" y="757" width="0.4050%" height="15" fill="rgb(221,117,51)" fg:x="12623" fg:w="477"/><text x="10.9666%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (477 samples, 0.40%)</title><rect x="10.7166%" y="741" width="0.4050%" height="15" fill="rgb(212,20,18)" fg:x="12623" fg:w="477"/><text x="10.9666%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (110 samples, 0.09%)</title><rect x="11.0282%" y="725" width="0.0934%" height="15" fill="rgb(245,133,36)" fg:x="12990" fg:w="110"/><text x="11.2782%" y="735.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (110 samples, 0.09%)</title><rect x="11.0282%" y="709" width="0.0934%" height="15" fill="rgb(212,6,19)" fg:x="12990" fg:w="110"/><text x="11.2782%" y="719.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (110 samples, 0.09%)</title><rect x="11.0282%" y="693" width="0.0934%" height="15" fill="rgb(218,1,36)" fg:x="12990" fg:w="110"/><text x="11.2782%" y="703.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (103 samples, 0.09%)</title><rect x="11.0341%" y="677" width="0.0874%" height="15" fill="rgb(246,84,54)" fg:x="12997" fg:w="103"/><text x="11.2841%" y="687.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (103 samples, 0.09%)</title><rect x="11.0341%" y="661" width="0.0874%" height="15" fill="rgb(242,110,6)" fg:x="12997" fg:w="103"/><text x="11.2841%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (103 samples, 0.09%)</title><rect x="11.0341%" y="645" width="0.0874%" height="15" fill="rgb(214,47,5)" fg:x="12997" fg:w="103"/><text x="11.2841%" y="655.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::attach (25 samples, 0.02%)</title><rect x="11.1216%" y="789" width="0.0212%" height="15" fill="rgb(218,159,25)" fg:x="13100" fg:w="25"/><text x="11.3716%" y="799.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::get_mut (673 samples, 0.57%)</title><rect x="10.5910%" y="805" width="0.5714%" height="15" fill="rgb(215,211,28)" fg:x="12475" fg:w="673"/><text x="10.8410%" y="815.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::detach (23 samples, 0.02%)</title><rect x="11.1428%" y="789" width="0.0195%" height="15" fill="rgb(238,59,32)" fg:x="13125" fg:w="23"/><text x="11.3928%" y="799.50"></text></g><g><title>sn_rust_dealloc (27 samples, 0.02%)</title><rect x="11.1623%" y="805" width="0.0229%" height="15" fill="rgb(226,82,3)" fg:x="13148" fg:w="27"/><text x="11.4123%" y="815.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (39 samples, 0.03%)</title><rect x="11.2685%" y="597" width="0.0331%" height="15" fill="rgb(240,164,32)" fg:x="13273" fg:w="39"/><text x="11.5185%" y="607.50"></text></g><g><title>tremor_value::value::serialize::&lt;impl value_trait::Writable for tremor_value::value::Value&gt;::encode (145 samples, 0.12%)</title><rect x="11.1903%" y="805" width="0.1231%" height="15" fill="rgb(232,46,7)" fg:x="13181" fg:w="145"/><text x="11.4403%" y="815.50"></text></g><g><title>value_trait::generator::DumpGenerator&lt;VT&gt;::new (115 samples, 0.10%)</title><rect x="11.2158%" y="789" width="0.0976%" height="15" fill="rgb(229,129,53)" fg:x="13211" fg:w="115"/><text x="11.4658%" y="799.50"></text></g><g><title>&lt;value_trait::generator::DumpGenerator&lt;VT&gt; as core::default::Default&gt;::default (115 samples, 0.10%)</title><rect x="11.2158%" y="773" width="0.0976%" height="15" fill="rgb(234,188,29)" fg:x="13211" fg:w="115"/><text x="11.4658%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (109 samples, 0.09%)</title><rect x="11.2209%" y="757" width="0.0925%" height="15" fill="rgb(246,141,4)" fg:x="13217" fg:w="109"/><text x="11.4709%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (109 samples, 0.09%)</title><rect x="11.2209%" y="741" width="0.0925%" height="15" fill="rgb(229,23,39)" fg:x="13217" fg:w="109"/><text x="11.4709%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (109 samples, 0.09%)</title><rect x="11.2209%" y="725" width="0.0925%" height="15" fill="rgb(206,12,3)" fg:x="13217" fg:w="109"/><text x="11.4709%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (109 samples, 0.09%)</title><rect x="11.2209%" y="709" width="0.0925%" height="15" fill="rgb(252,226,20)" fg:x="13217" fg:w="109"/><text x="11.4709%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (109 samples, 0.09%)</title><rect x="11.2209%" y="693" width="0.0925%" height="15" fill="rgb(216,123,35)" fg:x="13217" fg:w="109"/><text x="11.4709%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (109 samples, 0.09%)</title><rect x="11.2209%" y="677" width="0.0925%" height="15" fill="rgb(212,68,40)" fg:x="13217" fg:w="109"/><text x="11.4709%" y="687.50"></text></g><g><title>alloc::alloc::alloc (107 samples, 0.09%)</title><rect x="11.2226%" y="661" width="0.0908%" height="15" fill="rgb(254,125,32)" fg:x="13219" fg:w="107"/><text x="11.4726%" y="671.50"></text></g><g><title>__rg_alloc (107 samples, 0.09%)</title><rect x="11.2226%" y="645" width="0.0908%" height="15" fill="rgb(253,97,22)" fg:x="13219" fg:w="107"/><text x="11.4726%" y="655.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (107 samples, 0.09%)</title><rect x="11.2226%" y="629" width="0.0908%" height="15" fill="rgb(241,101,14)" fg:x="13219" fg:w="107"/><text x="11.4726%" y="639.50"></text></g><g><title>sn_rust_alloc (101 samples, 0.09%)</title><rect x="11.2277%" y="613" width="0.0857%" height="15" fill="rgb(238,103,29)" fg:x="13225" fg:w="101"/><text x="11.4777%" y="623.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (14 samples, 0.01%)</title><rect x="11.3016%" y="597" width="0.0119%" height="15" fill="rgb(233,195,47)" fg:x="13312" fg:w="14"/><text x="11.5516%" y="607.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (12 samples, 0.01%)</title><rect x="11.5495%" y="373" width="0.0102%" height="15" fill="rgb(246,218,30)" fg:x="13604" fg:w="12"/><text x="11.7995%" y="383.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write (75 samples, 0.06%)</title><rect x="11.5147%" y="485" width="0.0637%" height="15" fill="rgb(219,145,47)" fg:x="13563" fg:w="75"/><text x="11.7647%" y="495.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher (73 samples, 0.06%)</title><rect x="11.5164%" y="469" width="0.0620%" height="15" fill="rgb(243,12,26)" fg:x="13565" fg:w="73"/><text x="11.7664%" y="479.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher::{{closure}} (70 samples, 0.06%)</title><rect x="11.5189%" y="453" width="0.0594%" height="15" fill="rgb(214,87,16)" fg:x="13568" fg:w="70"/><text x="11.7689%" y="463.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (70 samples, 0.06%)</title><rect x="11.5189%" y="437" width="0.0594%" height="15" fill="rgb(208,99,42)" fg:x="13568" fg:w="70"/><text x="11.7689%" y="447.50"></text></g><g><title>fxhash::write (64 samples, 0.05%)</title><rect x="11.5240%" y="421" width="0.0543%" height="15" fill="rgb(253,99,2)" fg:x="13574" fg:w="64"/><text x="11.7740%" y="431.50"></text></g><g><title>fxhash::write64 (64 samples, 0.05%)</title><rect x="11.5240%" y="405" width="0.0543%" height="15" fill="rgb(220,168,23)" fg:x="13574" fg:w="64"/><text x="11.7740%" y="415.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (37 samples, 0.03%)</title><rect x="11.5469%" y="389" width="0.0314%" height="15" fill="rgb(242,38,24)" fg:x="13601" fg:w="37"/><text x="11.7969%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (22 samples, 0.02%)</title><rect x="11.5597%" y="373" width="0.0187%" height="15" fill="rgb(225,182,9)" fg:x="13616" fg:w="22"/><text x="11.8097%" y="383.50"></text></g><g><title>hashbrown::map::make_hash (261 samples, 0.22%)</title><rect x="11.3831%" y="613" width="0.2216%" height="15" fill="rgb(243,178,37)" fg:x="13408" fg:w="261"/><text x="11.6331%" y="623.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (255 samples, 0.22%)</title><rect x="11.3882%" y="597" width="0.2165%" height="15" fill="rgb(232,139,19)" fg:x="13414" fg:w="255"/><text x="11.6382%" y="607.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_query::MapQuery&lt;K&gt; as core::hash::Hash&gt;::hash (251 samples, 0.21%)</title><rect x="11.3916%" y="581" width="0.2131%" height="15" fill="rgb(225,201,24)" fg:x="13418" fg:w="251"/><text x="11.6416%" y="591.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash (112 samples, 0.10%)</title><rect x="11.5096%" y="565" width="0.0951%" height="15" fill="rgb(221,47,46)" fg:x="13557" fg:w="112"/><text x="11.7596%" y="575.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash::{{closure}} (106 samples, 0.09%)</title><rect x="11.5147%" y="549" width="0.0900%" height="15" fill="rgb(249,23,13)" fg:x="13563" fg:w="106"/><text x="11.7647%" y="559.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (106 samples, 0.09%)</title><rect x="11.5147%" y="533" width="0.0900%" height="15" fill="rgb(219,9,5)" fg:x="13563" fg:w="106"/><text x="11.7647%" y="543.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (106 samples, 0.09%)</title><rect x="11.5147%" y="517" width="0.0900%" height="15" fill="rgb(254,171,16)" fg:x="13563" fg:w="106"/><text x="11.7647%" y="527.50"></text></g><g><title>core::hash::Hasher::write_str (106 samples, 0.09%)</title><rect x="11.5147%" y="501" width="0.0900%" height="15" fill="rgb(230,171,20)" fg:x="13563" fg:w="106"/><text x="11.7647%" y="511.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write_u8 (31 samples, 0.03%)</title><rect x="11.5783%" y="485" width="0.0263%" height="15" fill="rgb(210,71,41)" fg:x="13638" fg:w="31"/><text x="11.8283%" y="495.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_u8_Hasher (31 samples, 0.03%)</title><rect x="11.5783%" y="469" width="0.0263%" height="15" fill="rgb(206,173,20)" fg:x="13638" fg:w="31"/><text x="11.8283%" y="479.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_u8_Hasher::{{closure}} (31 samples, 0.03%)</title><rect x="11.5783%" y="453" width="0.0263%" height="15" fill="rgb(233,88,34)" fg:x="13638" fg:w="31"/><text x="11.8283%" y="463.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (31 samples, 0.03%)</title><rect x="11.5783%" y="437" width="0.0263%" height="15" fill="rgb(223,209,46)" fg:x="13638" fg:w="31"/><text x="11.8283%" y="447.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (31 samples, 0.03%)</title><rect x="11.5783%" y="421" width="0.0263%" height="15" fill="rgb(250,43,18)" fg:x="13638" fg:w="31"/><text x="11.8283%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (14 samples, 0.01%)</title><rect x="11.5928%" y="405" width="0.0119%" height="15" fill="rgb(208,13,10)" fg:x="13655" fg:w="14"/><text x="11.8428%" y="415.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (12 samples, 0.01%)</title><rect x="11.6191%" y="549" width="0.0102%" height="15" fill="rgb(212,200,36)" fg:x="13686" fg:w="12"/><text x="11.8691%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (16 samples, 0.01%)</title><rect x="11.6191%" y="565" width="0.0136%" height="15" fill="rgb(225,90,30)" fg:x="13686" fg:w="16"/><text x="11.8691%" y="575.50"></text></g><g><title>hashbrown::raw::inner::h2 (16 samples, 0.01%)</title><rect x="11.6361%" y="565" width="0.0136%" height="15" fill="rgb(236,182,39)" fg:x="13706" fg:w="16"/><text x="11.8861%" y="575.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (18 samples, 0.02%)</title><rect x="11.6590%" y="565" width="0.0153%" height="15" fill="rgb(212,144,35)" fg:x="13733" fg:w="18"/><text x="11.9090%" y="575.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (18 samples, 0.02%)</title><rect x="11.6590%" y="549" width="0.0153%" height="15" fill="rgb(228,63,44)" fg:x="13733" fg:w="18"/><text x="11.9090%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (96 samples, 0.08%)</title><rect x="11.6046%" y="613" width="0.0815%" height="15" fill="rgb(228,109,6)" fg:x="13669" fg:w="96"/><text x="11.8546%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (96 samples, 0.08%)</title><rect x="11.6046%" y="597" width="0.0815%" height="15" fill="rgb(238,117,24)" fg:x="13669" fg:w="96"/><text x="11.8546%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (96 samples, 0.08%)</title><rect x="11.6046%" y="581" width="0.0815%" height="15" fill="rgb(242,26,26)" fg:x="13669" fg:w="96"/><text x="11.8546%" y="591.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty (14 samples, 0.01%)</title><rect x="11.6743%" y="565" width="0.0119%" height="15" fill="rgb(221,92,48)" fg:x="13751" fg:w="14"/><text x="11.9243%" y="575.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (14 samples, 0.01%)</title><rect x="11.6743%" y="549" width="0.0119%" height="15" fill="rgb(209,209,32)" fg:x="13751" fg:w="14"/><text x="11.9243%" y="559.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (14 samples, 0.01%)</title><rect x="11.6743%" y="533" width="0.0119%" height="15" fill="rgb(221,70,22)" fg:x="13751" fg:w="14"/><text x="11.9243%" y="543.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (378 samples, 0.32%)</title><rect x="11.3712%" y="725" width="0.3209%" height="15" fill="rgb(248,145,5)" fg:x="13394" fg:w="378"/><text x="11.6212%" y="735.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (375 samples, 0.32%)</title><rect x="11.3737%" y="709" width="0.3184%" height="15" fill="rgb(226,116,26)" fg:x="13397" fg:w="375"/><text x="11.6237%" y="719.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (375 samples, 0.32%)</title><rect x="11.3737%" y="693" width="0.3184%" height="15" fill="rgb(244,5,17)" fg:x="13397" fg:w="375"/><text x="11.6237%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem::{{closure}} (375 samples, 0.32%)</title><rect x="11.3737%" y="677" width="0.3184%" height="15" fill="rgb(252,159,33)" fg:x="13397" fg:w="375"/><text x="11.6237%" y="687.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (369 samples, 0.31%)</title><rect x="11.3788%" y="661" width="0.3133%" height="15" fill="rgb(206,71,0)" fg:x="13403" fg:w="369"/><text x="11.6288%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (368 samples, 0.31%)</title><rect x="11.3797%" y="645" width="0.3124%" height="15" fill="rgb(233,118,54)" fg:x="13404" fg:w="368"/><text x="11.6297%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (364 samples, 0.31%)</title><rect x="11.3831%" y="629" width="0.3090%" height="15" fill="rgb(234,83,48)" fg:x="13408" fg:w="364"/><text x="11.6331%" y="639.50"></text></g><g><title>value_trait::ValueAccess::get (449 samples, 0.38%)</title><rect x="11.3135%" y="805" width="0.3812%" height="15" fill="rgb(228,3,54)" fg:x="13326" fg:w="449"/><text x="11.5635%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (449 samples, 0.38%)</title><rect x="11.3135%" y="789" width="0.3812%" height="15" fill="rgb(226,155,13)" fg:x="13326" fg:w="449"/><text x="11.5635%" y="799.50"></text></g><g><title>value_trait::ValueAccess::get::{{closure}} (449 samples, 0.38%)</title><rect x="11.3135%" y="773" width="0.3812%" height="15" fill="rgb(241,28,37)" fg:x="13326" fg:w="449"/><text x="11.5635%" y="783.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;MapK,MapE,S&gt; as value_trait::object::Object&gt;::get (449 samples, 0.38%)</title><rect x="11.3135%" y="757" width="0.3812%" height="15" fill="rgb(233,93,10)" fg:x="13326" fg:w="449"/><text x="11.5635%" y="767.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::get (449 samples, 0.38%)</title><rect x="11.3135%" y="741" width="0.3812%" height="15" fill="rgb(225,113,19)" fg:x="13326" fg:w="449"/><text x="11.5635%" y="751.50"></text></g><g><title>abi_stable::std_types::map::_::&lt;impl abi_stable::std_types::map::VTable_Ref&lt;K,V,S&gt;&gt;::get_elem (14 samples, 0.01%)</title><rect x="11.8025%" y="709" width="0.0119%" height="15" fill="rgb(241,2,18)" fg:x="13902" fg:w="14"/><text x="12.0525%" y="719.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.01%)</title><rect x="11.9697%" y="373" width="0.0119%" height="15" fill="rgb(228,207,21)" fg:x="14099" fg:w="14"/><text x="12.2197%" y="383.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write (48 samples, 0.04%)</title><rect x="11.9451%" y="469" width="0.0408%" height="15" fill="rgb(213,211,35)" fg:x="14070" fg:w="48"/><text x="12.1951%" y="479.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher (43 samples, 0.04%)</title><rect x="11.9493%" y="453" width="0.0365%" height="15" fill="rgb(209,83,10)" fg:x="14075" fg:w="43"/><text x="12.1993%" y="463.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher::{{closure}} (35 samples, 0.03%)</title><rect x="11.9561%" y="437" width="0.0297%" height="15" fill="rgb(209,164,1)" fg:x="14083" fg:w="35"/><text x="12.2061%" y="447.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (35 samples, 0.03%)</title><rect x="11.9561%" y="421" width="0.0297%" height="15" fill="rgb(213,184,43)" fg:x="14083" fg:w="35"/><text x="12.2061%" y="431.50"></text></g><g><title>fxhash::write (35 samples, 0.03%)</title><rect x="11.9561%" y="405" width="0.0297%" height="15" fill="rgb(231,61,34)" fg:x="14083" fg:w="35"/><text x="12.2061%" y="415.50"></text></g><g><title>fxhash::write64 (35 samples, 0.03%)</title><rect x="11.9561%" y="389" width="0.0297%" height="15" fill="rgb(235,75,3)" fg:x="14083" fg:w="35"/><text x="12.2061%" y="399.50"></text></g><g><title>hashbrown::map::make_hash (195 samples, 0.17%)</title><rect x="11.8339%" y="597" width="0.1656%" height="15" fill="rgb(220,106,47)" fg:x="13939" fg:w="195"/><text x="12.0839%" y="607.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (181 samples, 0.15%)</title><rect x="11.8458%" y="581" width="0.1537%" height="15" fill="rgb(210,196,33)" fg:x="13953" fg:w="181"/><text x="12.0958%" y="591.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_query::MapQuery&lt;K&gt; as core::hash::Hash&gt;::hash (176 samples, 0.15%)</title><rect x="11.8500%" y="565" width="0.1494%" height="15" fill="rgb(229,154,42)" fg:x="13958" fg:w="176"/><text x="12.1000%" y="575.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash (75 samples, 0.06%)</title><rect x="11.9357%" y="549" width="0.0637%" height="15" fill="rgb(228,114,26)" fg:x="14059" fg:w="75"/><text x="12.1857%" y="559.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash::{{closure}} (64 samples, 0.05%)</title><rect x="11.9451%" y="533" width="0.0543%" height="15" fill="rgb(208,144,1)" fg:x="14070" fg:w="64"/><text x="12.1951%" y="543.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (64 samples, 0.05%)</title><rect x="11.9451%" y="517" width="0.0543%" height="15" fill="rgb(239,112,37)" fg:x="14070" fg:w="64"/><text x="12.1951%" y="527.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (64 samples, 0.05%)</title><rect x="11.9451%" y="501" width="0.0543%" height="15" fill="rgb(210,96,50)" fg:x="14070" fg:w="64"/><text x="12.1951%" y="511.50"></text></g><g><title>core::hash::Hasher::write_str (64 samples, 0.05%)</title><rect x="11.9451%" y="485" width="0.0543%" height="15" fill="rgb(222,178,2)" fg:x="14070" fg:w="64"/><text x="12.1951%" y="495.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write_u8 (16 samples, 0.01%)</title><rect x="11.9858%" y="469" width="0.0136%" height="15" fill="rgb(226,74,18)" fg:x="14118" fg:w="16"/><text x="12.2358%" y="479.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_u8_Hasher (16 samples, 0.01%)</title><rect x="11.9858%" y="453" width="0.0136%" height="15" fill="rgb(225,67,54)" fg:x="14118" fg:w="16"/><text x="12.2358%" y="463.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_u8_Hasher::{{closure}} (16 samples, 0.01%)</title><rect x="11.9858%" y="437" width="0.0136%" height="15" fill="rgb(251,92,32)" fg:x="14118" fg:w="16"/><text x="12.2358%" y="447.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (16 samples, 0.01%)</title><rect x="11.9858%" y="421" width="0.0136%" height="15" fill="rgb(228,149,22)" fg:x="14118" fg:w="16"/><text x="12.2358%" y="431.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (14 samples, 0.01%)</title><rect x="11.9875%" y="405" width="0.0119%" height="15" fill="rgb(243,54,13)" fg:x="14120" fg:w="14"/><text x="12.2375%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.02%)</title><rect x="12.0122%" y="549" width="0.0161%" height="15" fill="rgb(243,180,28)" fg:x="14149" fg:w="19"/><text x="12.2622%" y="559.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (19 samples, 0.02%)</title><rect x="12.0122%" y="533" width="0.0161%" height="15" fill="rgb(208,167,24)" fg:x="14149" fg:w="19"/><text x="12.2622%" y="543.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (117 samples, 0.10%)</title><rect x="12.0283%" y="533" width="0.0993%" height="15" fill="rgb(245,73,45)" fg:x="14168" fg:w="117"/><text x="12.2783%" y="543.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (115 samples, 0.10%)</title><rect x="12.0300%" y="517" width="0.0976%" height="15" fill="rgb(237,203,48)" fg:x="14170" fg:w="115"/><text x="12.2800%" y="527.50"></text></g><g><title>abi_stable::std_types::map::map_query::MapQuery&lt;K&gt;::is_equal (92 samples, 0.08%)</title><rect x="12.0495%" y="501" width="0.0781%" height="15" fill="rgb(211,197,16)" fg:x="14193" fg:w="92"/><text x="12.2995%" y="511.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (91 samples, 0.08%)</title><rect x="12.0504%" y="485" width="0.0773%" height="15" fill="rgb(243,99,51)" fg:x="14194" fg:w="91"/><text x="12.3004%" y="495.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (91 samples, 0.08%)</title><rect x="12.0504%" y="469" width="0.0773%" height="15" fill="rgb(215,123,29)" fg:x="14194" fg:w="91"/><text x="12.3004%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (89 samples, 0.08%)</title><rect x="12.0521%" y="453" width="0.0756%" height="15" fill="rgb(239,186,37)" fg:x="14196" fg:w="89"/><text x="12.3021%" y="463.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (89 samples, 0.08%)</title><rect x="12.0521%" y="437" width="0.0756%" height="15" fill="rgb(252,136,39)" fg:x="14196" fg:w="89"/><text x="12.3021%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (89 samples, 0.08%)</title><rect x="12.0521%" y="421" width="0.0756%" height="15" fill="rgb(223,213,32)" fg:x="14196" fg:w="89"/><text x="12.3021%" y="431.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (89 samples, 0.08%)</title><rect x="12.0521%" y="405" width="0.0756%" height="15" fill="rgb(233,115,5)" fg:x="14196" fg:w="89"/><text x="12.3021%" y="415.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (89 samples, 0.08%)</title><rect x="12.0521%" y="389" width="0.0756%" height="15" fill="rgb(207,226,44)" fg:x="14196" fg:w="89"/><text x="12.3021%" y="399.50"></text></g><g><title>[libc-2.31.so] (83 samples, 0.07%)</title><rect x="12.0572%" y="373" width="0.0705%" height="15" fill="rgb(208,126,0)" fg:x="14202" fg:w="83"/><text x="12.3072%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (132 samples, 0.11%)</title><rect x="12.0283%" y="549" width="0.1121%" height="15" fill="rgb(244,66,21)" fg:x="14168" fg:w="132"/><text x="12.2783%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (211 samples, 0.18%)</title><rect x="11.9994%" y="597" width="0.1791%" height="15" fill="rgb(222,97,12)" fg:x="14134" fg:w="211"/><text x="12.2494%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (211 samples, 0.18%)</title><rect x="11.9994%" y="581" width="0.1791%" height="15" fill="rgb(219,213,19)" fg:x="14134" fg:w="211"/><text x="12.2494%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (211 samples, 0.18%)</title><rect x="11.9994%" y="565" width="0.1791%" height="15" fill="rgb(252,169,30)" fg:x="14134" fg:w="211"/><text x="12.2494%" y="575.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (21 samples, 0.02%)</title><rect x="12.1607%" y="549" width="0.0178%" height="15" fill="rgb(206,32,51)" fg:x="14324" fg:w="21"/><text x="12.4107%" y="559.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (21 samples, 0.02%)</title><rect x="12.1607%" y="533" width="0.0178%" height="15" fill="rgb(250,172,42)" fg:x="14324" fg:w="21"/><text x="12.4107%" y="543.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (431 samples, 0.37%)</title><rect x="11.8143%" y="709" width="0.3659%" height="15" fill="rgb(209,34,43)" fg:x="13916" fg:w="431"/><text x="12.0643%" y="719.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (424 samples, 0.36%)</title><rect x="11.8203%" y="693" width="0.3600%" height="15" fill="rgb(223,11,35)" fg:x="13923" fg:w="424"/><text x="12.0703%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (423 samples, 0.36%)</title><rect x="11.8211%" y="677" width="0.3591%" height="15" fill="rgb(251,219,26)" fg:x="13924" fg:w="423"/><text x="12.0711%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem::{{closure}} (423 samples, 0.36%)</title><rect x="11.8211%" y="661" width="0.3591%" height="15" fill="rgb(231,119,3)" fg:x="13924" fg:w="423"/><text x="12.0711%" y="671.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (420 samples, 0.36%)</title><rect x="11.8237%" y="645" width="0.3566%" height="15" fill="rgb(216,97,11)" fg:x="13927" fg:w="420"/><text x="12.0737%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (408 samples, 0.35%)</title><rect x="11.8339%" y="629" width="0.3464%" height="15" fill="rgb(223,59,9)" fg:x="13939" fg:w="408"/><text x="12.0839%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (408 samples, 0.35%)</title><rect x="11.8339%" y="613" width="0.3464%" height="15" fill="rgb(233,93,31)" fg:x="13939" fg:w="408"/><text x="12.0839%" y="623.50"></text></g><g><title>value_trait::ValueAccess::get_str (575 samples, 0.49%)</title><rect x="11.6946%" y="805" width="0.4882%" height="15" fill="rgb(239,81,33)" fg:x="13775" fg:w="575"/><text x="11.9446%" y="815.50"></text></g><g><title>value_trait::ValueAccess::get (569 samples, 0.48%)</title><rect x="11.6997%" y="789" width="0.4831%" height="15" fill="rgb(213,120,34)" fg:x="13781" fg:w="569"/><text x="11.9497%" y="799.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (568 samples, 0.48%)</title><rect x="11.7006%" y="773" width="0.4822%" height="15" fill="rgb(243,49,53)" fg:x="13782" fg:w="568"/><text x="11.9506%" y="783.50"></text></g><g><title>value_trait::ValueAccess::get::{{closure}} (563 samples, 0.48%)</title><rect x="11.7048%" y="757" width="0.4780%" height="15" fill="rgb(247,216,33)" fg:x="13787" fg:w="563"/><text x="11.9548%" y="767.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;MapK,MapE,S&gt; as value_trait::object::Object&gt;::get (563 samples, 0.48%)</title><rect x="11.7048%" y="741" width="0.4780%" height="15" fill="rgb(226,26,14)" fg:x="13787" fg:w="563"/><text x="11.9548%" y="751.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::get (563 samples, 0.48%)</title><rect x="11.7048%" y="725" width="0.4780%" height="15" fill="rgb(215,49,53)" fg:x="13787" fg:w="563"/><text x="11.9548%" y="735.50"></text></g><g><title>&lt;u64 as core::ops::arith::Add&gt;::add (48 samples, 0.04%)</title><rect x="12.2151%" y="757" width="0.0408%" height="15" fill="rgb(245,162,40)" fg:x="14388" fg:w="48"/><text x="12.4651%" y="767.50"></text></g><g><title>window::SlidingWindow&lt;T&gt;::add (56 samples, 0.05%)</title><rect x="12.2100%" y="773" width="0.0475%" height="15" fill="rgb(229,68,17)" fg:x="14382" fg:w="56"/><text x="12.4600%" y="783.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (3,029 samples, 2.57%)</title><rect x="9.6877%" y="837" width="2.5715%" height="15" fill="rgb(213,182,10)" fg:x="11411" fg:w="3029"/><text x="9.9377%" y="847.50">&lt;t..</text></g><g><title>&lt;tremor_pipeline::op::grouper::bucket::Grouper as tremor_pipeline::op::Operator&gt;::on_event (3,029 samples, 2.57%)</title><rect x="9.6877%" y="821" width="2.5715%" height="15" fill="rgb(245,125,30)" fg:x="11411" fg:w="3029"/><text x="9.9377%" y="831.50">&lt;t..</text></g><g><title>window::TimeWindow::inc_t (90 samples, 0.08%)</title><rect x="12.1828%" y="805" width="0.0764%" height="15" fill="rgb(232,202,2)" fg:x="14350" fg:w="90"/><text x="12.4328%" y="815.50"></text></g><g><title>window::TimeWindow::add_t (87 samples, 0.07%)</title><rect x="12.1853%" y="789" width="0.0739%" height="15" fill="rgb(237,140,51)" fg:x="14353" fg:w="87"/><text x="12.4353%" y="799.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (71 samples, 0.06%)</title><rect x="12.2872%" y="789" width="0.0603%" height="15" fill="rgb(236,157,25)" fg:x="14473" fg:w="71"/><text x="12.5372%" y="799.50"></text></g><g><title>&lt;tremor_script::interpreter::Env as core::default::Default&gt;::default (14 samples, 0.01%)</title><rect x="12.4664%" y="757" width="0.0119%" height="15" fill="rgb(219,209,0)" fg:x="14684" fg:w="14"/><text x="12.7164%" y="767.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (5,235 samples, 4.44%)</title><rect x="8.0491%" y="1061" width="4.4444%" height="15" fill="rgb(240,116,54)" fg:x="9481" fg:w="5235"/><text x="8.2991%" y="1071.50">async..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (5,235 samples, 4.44%)</title><rect x="8.0491%" y="1045" width="4.4444%" height="15" fill="rgb(216,10,36)" fg:x="9481" fg:w="5235"/><text x="8.2991%" y="1055.50">&lt;asyn..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (5,235 samples, 4.44%)</title><rect x="8.0491%" y="1029" width="4.4444%" height="15" fill="rgb(222,72,44)" fg:x="9481" fg:w="5235"/><text x="8.2991%" y="1039.50">async..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (5,235 samples, 4.44%)</title><rect x="8.0491%" y="1013" width="4.4444%" height="15" fill="rgb(232,159,9)" fg:x="9481" fg:w="5235"/><text x="8.2991%" y="1023.50">std::..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (5,235 samples, 4.44%)</title><rect x="8.0491%" y="997" width="4.4444%" height="15" fill="rgb(210,39,32)" fg:x="9481" fg:w="5235"/><text x="8.2991%" y="1007.50">std::..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (5,235 samples, 4.44%)</title><rect x="8.0491%" y="981" width="4.4444%" height="15" fill="rgb(216,194,45)" fg:x="9481" fg:w="5235"/><text x="8.2991%" y="991.50">async..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (5,235 samples, 4.44%)</title><rect x="8.0491%" y="965" width="4.4444%" height="15" fill="rgb(218,18,35)" fg:x="9481" fg:w="5235"/><text x="8.2991%" y="975.50">&lt;asyn..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,235 samples, 4.44%)</title><rect x="8.0491%" y="949" width="4.4444%" height="15" fill="rgb(207,83,51)" fg:x="9481" fg:w="5235"/><text x="8.2991%" y="959.50">&lt;core..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (4,253 samples, 3.61%)</title><rect x="8.8828%" y="933" width="3.6107%" height="15" fill="rgb(225,63,43)" fg:x="10463" fg:w="4253"/><text x="9.1328%" y="943.50">trem..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,305 samples, 2.81%)</title><rect x="9.6877%" y="917" width="2.8059%" height="15" fill="rgb(207,57,36)" fg:x="11411" fg:w="3305"/><text x="9.9377%" y="927.50">&lt;c..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (3,305 samples, 2.81%)</title><rect x="9.6877%" y="901" width="2.8059%" height="15" fill="rgb(216,99,33)" fg:x="11411" fg:w="3305"/><text x="9.9377%" y="911.50">tr..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (3,305 samples, 2.81%)</title><rect x="9.6877%" y="885" width="2.8059%" height="15" fill="rgb(225,42,16)" fg:x="11411" fg:w="3305"/><text x="9.9377%" y="895.50">tr..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (3,305 samples, 2.81%)</title><rect x="9.6877%" y="869" width="2.8059%" height="15" fill="rgb(220,201,45)" fg:x="11411" fg:w="3305"/><text x="9.9377%" y="879.50">tr..</text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (3,305 samples, 2.81%)</title><rect x="9.6877%" y="853" width="2.8059%" height="15" fill="rgb(225,33,4)" fg:x="11411" fg:w="3305"/><text x="9.9377%" y="863.50">&lt;t..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (276 samples, 0.23%)</title><rect x="12.2592%" y="837" width="0.2343%" height="15" fill="rgb(224,33,50)" fg:x="14440" fg:w="276"/><text x="12.5092%" y="847.50"></text></g><g><title>tremor_script::srs::EventPayload::rent_mut (276 samples, 0.23%)</title><rect x="12.2592%" y="821" width="0.2343%" height="15" fill="rgb(246,198,51)" fg:x="14440" fg:w="276"/><text x="12.5092%" y="831.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (263 samples, 0.22%)</title><rect x="12.2702%" y="805" width="0.2233%" height="15" fill="rgb(205,22,4)" fg:x="14453" fg:w="263"/><text x="12.5202%" y="815.50"></text></g><g><title>tremor_script::script::Script::run (172 samples, 0.15%)</title><rect x="12.3475%" y="789" width="0.1460%" height="15" fill="rgb(206,3,8)" fg:x="14544" fg:w="172"/><text x="12.5975%" y="799.50"></text></g><g><title>tremor_script::ast::Script::run (167 samples, 0.14%)</title><rect x="12.3517%" y="773" width="0.1418%" height="15" fill="rgb(251,23,15)" fg:x="14549" fg:w="167"/><text x="12.6017%" y="783.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,703 samples, 5.69%)</title><rect x="6.8079%" y="1077" width="5.6907%" height="15" fill="rgb(252,88,28)" fg:x="8019" fg:w="6703"/><text x="7.0579%" y="1087.50">&lt;core::..</text></g><g><title>sn_rust_dealloc (25 samples, 0.02%)</title><rect x="12.5623%" y="773" width="0.0212%" height="15" fill="rgb(212,127,14)" fg:x="14797" fg:w="25"/><text x="12.8123%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (46 samples, 0.04%)</title><rect x="12.5597%" y="821" width="0.0391%" height="15" fill="rgb(247,145,37)" fg:x="14794" fg:w="46"/><text x="12.8097%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (46 samples, 0.04%)</title><rect x="12.5597%" y="805" width="0.0391%" height="15" fill="rgb(209,117,53)" fg:x="14794" fg:w="46"/><text x="12.8097%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (46 samples, 0.04%)</title><rect x="12.5597%" y="789" width="0.0391%" height="15" fill="rgb(212,90,42)" fg:x="14794" fg:w="46"/><text x="12.8097%" y="799.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (18 samples, 0.02%)</title><rect x="12.5835%" y="773" width="0.0153%" height="15" fill="rgb(218,164,37)" fg:x="14822" fg:w="18"/><text x="12.8335%" y="783.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (50 samples, 0.04%)</title><rect x="12.5580%" y="837" width="0.0424%" height="15" fill="rgb(246,65,34)" fg:x="14792" fg:w="50"/><text x="12.8080%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (67 samples, 0.06%)</title><rect x="12.5538%" y="901" width="0.0569%" height="15" fill="rgb(231,100,33)" fg:x="14787" fg:w="67"/><text x="12.8038%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (65 samples, 0.06%)</title><rect x="12.5555%" y="885" width="0.0552%" height="15" fill="rgb(228,126,14)" fg:x="14789" fg:w="65"/><text x="12.8055%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (65 samples, 0.06%)</title><rect x="12.5555%" y="869" width="0.0552%" height="15" fill="rgb(215,173,21)" fg:x="14789" fg:w="65"/><text x="12.8055%" y="879.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (65 samples, 0.06%)</title><rect x="12.5555%" y="853" width="0.0552%" height="15" fill="rgb(210,6,40)" fg:x="14789" fg:w="65"/><text x="12.8055%" y="863.50"></text></g><g><title>sn_rust_dealloc (12 samples, 0.01%)</title><rect x="12.6005%" y="837" width="0.0102%" height="15" fill="rgb(212,48,18)" fg:x="14842" fg:w="12"/><text x="12.8505%" y="847.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (16 samples, 0.01%)</title><rect x="12.6192%" y="757" width="0.0136%" height="15" fill="rgb(230,214,11)" fg:x="14864" fg:w="16"/><text x="12.8692%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck::{{closure}}::{{closure}} (22 samples, 0.02%)</title><rect x="12.6192%" y="773" width="0.0187%" height="15" fill="rgb(254,105,39)" fg:x="14864" fg:w="22"/><text x="12.8692%" y="783.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_mut_key_hashed_nocheck (32 samples, 0.03%)</title><rect x="12.6141%" y="869" width="0.0272%" height="15" fill="rgb(245,158,5)" fg:x="14858" fg:w="32"/><text x="12.8641%" y="879.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck (31 samples, 0.03%)</title><rect x="12.6149%" y="853" width="0.0263%" height="15" fill="rgb(249,208,11)" fg:x="14859" fg:w="31"/><text x="12.8649%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (26 samples, 0.02%)</title><rect x="12.6192%" y="837" width="0.0221%" height="15" fill="rgb(210,39,28)" fg:x="14864" fg:w="26"/><text x="12.8692%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (26 samples, 0.02%)</title><rect x="12.6192%" y="821" width="0.0221%" height="15" fill="rgb(211,56,53)" fg:x="14864" fg:w="26"/><text x="12.8692%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck::{{closure}} (26 samples, 0.02%)</title><rect x="12.6192%" y="805" width="0.0221%" height="15" fill="rgb(226,201,30)" fg:x="14864" fg:w="26"/><text x="12.8692%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (26 samples, 0.02%)</title><rect x="12.6192%" y="789" width="0.0221%" height="15" fill="rgb(239,101,34)" fg:x="14864" fg:w="26"/><text x="12.8692%" y="799.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (114 samples, 0.10%)</title><rect x="12.6727%" y="853" width="0.0968%" height="15" fill="rgb(226,209,5)" fg:x="14927" fg:w="114"/><text x="12.9227%" y="863.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (64 samples, 0.05%)</title><rect x="12.7151%" y="837" width="0.0543%" height="15" fill="rgb(250,105,47)" fg:x="14977" fg:w="64"/><text x="12.9651%" y="847.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}} (63 samples, 0.05%)</title><rect x="12.7160%" y="821" width="0.0535%" height="15" fill="rgb(230,72,3)" fg:x="14978" fg:w="63"/><text x="12.9660%" y="831.50"></text></g><g><title>abi_stable::traits::ErasedType::run_downcast_as_mut (48 samples, 0.04%)</title><rect x="12.7287%" y="805" width="0.0408%" height="15" fill="rgb(232,218,39)" fg:x="14993" fg:w="48"/><text x="12.9787%" y="815.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}}::{{closure}} (35 samples, 0.03%)</title><rect x="12.7397%" y="789" width="0.0297%" height="15" fill="rgb(248,166,6)" fg:x="15006" fg:w="35"/><text x="12.9897%" y="799.50"></text></g><g><title>halfbrown::raw_entry::RawVacantEntryMut&lt;K,V,S&gt;::insert (32 samples, 0.03%)</title><rect x="12.7423%" y="773" width="0.0272%" height="15" fill="rgb(247,89,20)" fg:x="15009" fg:w="32"/><text x="12.9923%" y="783.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert (17 samples, 0.01%)</title><rect x="12.7550%" y="757" width="0.0144%" height="15" fill="rgb(248,130,54)" fg:x="15024" fg:w="17"/><text x="13.0050%" y="767.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (12 samples, 0.01%)</title><rect x="12.7873%" y="741" width="0.0102%" height="15" fill="rgb(234,196,4)" fg:x="15062" fg:w="12"/><text x="13.0373%" y="751.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (12 samples, 0.01%)</title><rect x="12.7873%" y="725" width="0.0102%" height="15" fill="rgb(250,143,31)" fg:x="15062" fg:w="12"/><text x="13.0373%" y="735.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (15 samples, 0.01%)</title><rect x="12.7856%" y="789" width="0.0127%" height="15" fill="rgb(211,110,34)" fg:x="15060" fg:w="15"/><text x="13.0356%" y="799.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (15 samples, 0.01%)</title><rect x="12.7856%" y="773" width="0.0127%" height="15" fill="rgb(215,124,48)" fg:x="15060" fg:w="15"/><text x="13.0356%" y="783.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (15 samples, 0.01%)</title><rect x="12.7856%" y="757" width="0.0127%" height="15" fill="rgb(216,46,13)" fg:x="15060" fg:w="15"/><text x="13.0356%" y="767.50"></text></g><g><title>core::mem::swap (46 samples, 0.04%)</title><rect x="12.8102%" y="613" width="0.0391%" height="15" fill="rgb(205,184,25)" fg:x="15089" fg:w="46"/><text x="13.0602%" y="623.50"></text></g><g><title>core::mem::swap_simple (46 samples, 0.04%)</title><rect x="12.8102%" y="597" width="0.0391%" height="15" fill="rgb(228,1,10)" fg:x="15089" fg:w="46"/><text x="13.0602%" y="607.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (95 samples, 0.08%)</title><rect x="12.9112%" y="469" width="0.0807%" height="15" fill="rgb(213,116,27)" fg:x="15208" fg:w="95"/><text x="13.1612%" y="479.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (162 samples, 0.14%)</title><rect x="12.8645%" y="565" width="0.1375%" height="15" fill="rgb(241,95,50)" fg:x="15153" fg:w="162"/><text x="13.1145%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (162 samples, 0.14%)</title><rect x="12.8645%" y="549" width="0.1375%" height="15" fill="rgb(238,48,32)" fg:x="15153" fg:w="162"/><text x="13.1145%" y="559.50"></text></g><g><title>alloc::alloc::alloc (162 samples, 0.14%)</title><rect x="12.8645%" y="533" width="0.1375%" height="15" fill="rgb(235,113,49)" fg:x="15153" fg:w="162"/><text x="13.1145%" y="543.50"></text></g><g><title>__rg_alloc (162 samples, 0.14%)</title><rect x="12.8645%" y="517" width="0.1375%" height="15" fill="rgb(205,127,43)" fg:x="15153" fg:w="162"/><text x="13.1145%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (162 samples, 0.14%)</title><rect x="12.8645%" y="501" width="0.1375%" height="15" fill="rgb(250,162,2)" fg:x="15153" fg:w="162"/><text x="13.1145%" y="511.50"></text></g><g><title>sn_rust_alloc (160 samples, 0.14%)</title><rect x="12.8662%" y="485" width="0.1358%" height="15" fill="rgb(220,13,41)" fg:x="15155" fg:w="160"/><text x="13.1162%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (12 samples, 0.01%)</title><rect x="12.9919%" y="469" width="0.0102%" height="15" fill="rgb(249,221,25)" fg:x="15303" fg:w="12"/><text x="13.2419%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (173 samples, 0.15%)</title><rect x="12.8586%" y="581" width="0.1469%" height="15" fill="rgb(215,208,19)" fg:x="15146" fg:w="173"/><text x="13.1086%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (192 samples, 0.16%)</title><rect x="12.8509%" y="613" width="0.1630%" height="15" fill="rgb(236,175,2)" fg:x="15137" fg:w="192"/><text x="13.1009%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (190 samples, 0.16%)</title><rect x="12.8526%" y="597" width="0.1613%" height="15" fill="rgb(241,52,2)" fg:x="15139" fg:w="190"/><text x="13.1026%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (248 samples, 0.21%)</title><rect x="12.8051%" y="629" width="0.2105%" height="15" fill="rgb(248,140,14)" fg:x="15083" fg:w="248"/><text x="13.0551%" y="639.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (273 samples, 0.23%)</title><rect x="12.7856%" y="805" width="0.2318%" height="15" fill="rgb(253,22,42)" fg:x="15060" fg:w="273"/><text x="13.0356%" y="815.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (258 samples, 0.22%)</title><rect x="12.7983%" y="789" width="0.2190%" height="15" fill="rgb(234,61,47)" fg:x="15075" fg:w="258"/><text x="13.0483%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (257 samples, 0.22%)</title><rect x="12.7992%" y="773" width="0.2182%" height="15" fill="rgb(208,226,15)" fg:x="15076" fg:w="257"/><text x="13.0492%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (256 samples, 0.22%)</title><rect x="12.8000%" y="757" width="0.2173%" height="15" fill="rgb(217,221,4)" fg:x="15077" fg:w="256"/><text x="13.0500%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (254 samples, 0.22%)</title><rect x="12.8017%" y="741" width="0.2156%" height="15" fill="rgb(212,174,34)" fg:x="15079" fg:w="254"/><text x="13.0517%" y="751.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (254 samples, 0.22%)</title><rect x="12.8017%" y="725" width="0.2156%" height="15" fill="rgb(253,83,4)" fg:x="15079" fg:w="254"/><text x="13.0517%" y="735.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (254 samples, 0.22%)</title><rect x="12.8017%" y="709" width="0.2156%" height="15" fill="rgb(250,195,49)" fg:x="15079" fg:w="254"/><text x="13.0517%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (254 samples, 0.22%)</title><rect x="12.8017%" y="693" width="0.2156%" height="15" fill="rgb(241,192,25)" fg:x="15079" fg:w="254"/><text x="13.0517%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (254 samples, 0.22%)</title><rect x="12.8017%" y="677" width="0.2156%" height="15" fill="rgb(208,124,10)" fg:x="15079" fg:w="254"/><text x="13.0517%" y="687.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (254 samples, 0.22%)</title><rect x="12.8017%" y="661" width="0.2156%" height="15" fill="rgb(222,33,0)" fg:x="15079" fg:w="254"/><text x="13.0517%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (253 samples, 0.21%)</title><rect x="12.8026%" y="645" width="0.2148%" height="15" fill="rgb(234,209,28)" fg:x="15080" fg:w="253"/><text x="13.0526%" y="655.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (586 samples, 0.50%)</title><rect x="12.5249%" y="933" width="0.4975%" height="15" fill="rgb(224,11,23)" fg:x="14753" fg:w="586"/><text x="12.7749%" y="943.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (586 samples, 0.50%)</title><rect x="12.5249%" y="917" width="0.4975%" height="15" fill="rgb(232,99,1)" fg:x="14753" fg:w="586"/><text x="12.7749%" y="927.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (484 samples, 0.41%)</title><rect x="12.6115%" y="901" width="0.4109%" height="15" fill="rgb(237,95,45)" fg:x="14855" fg:w="484"/><text x="12.8615%" y="911.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (482 samples, 0.41%)</title><rect x="12.6132%" y="885" width="0.4092%" height="15" fill="rgb(208,109,11)" fg:x="14857" fg:w="482"/><text x="12.8632%" y="895.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (449 samples, 0.38%)</title><rect x="12.6412%" y="869" width="0.3812%" height="15" fill="rgb(216,190,48)" fg:x="14890" fg:w="449"/><text x="12.8912%" y="879.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut::{{closure}} (298 samples, 0.25%)</title><rect x="12.7694%" y="853" width="0.2530%" height="15" fill="rgb(251,171,36)" fg:x="15041" fg:w="298"/><text x="13.0194%" y="863.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (279 samples, 0.24%)</title><rect x="12.7856%" y="837" width="0.2369%" height="15" fill="rgb(230,62,22)" fg:x="15060" fg:w="279"/><text x="13.0356%" y="847.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (279 samples, 0.24%)</title><rect x="12.7856%" y="821" width="0.2369%" height="15" fill="rgb(225,114,35)" fg:x="15060" fg:w="279"/><text x="13.0356%" y="831.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (647 samples, 0.55%)</title><rect x="12.5249%" y="965" width="0.5493%" height="15" fill="rgb(215,118,42)" fg:x="14753" fg:w="647"/><text x="12.7749%" y="975.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (647 samples, 0.55%)</title><rect x="12.5249%" y="949" width="0.5493%" height="15" fill="rgb(243,119,21)" fg:x="14753" fg:w="647"/><text x="12.7749%" y="959.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (61 samples, 0.05%)</title><rect x="13.0224%" y="933" width="0.0518%" height="15" fill="rgb(252,177,53)" fg:x="15339" fg:w="61"/><text x="13.2724%" y="943.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (652 samples, 0.55%)</title><rect x="12.5249%" y="981" width="0.5535%" height="15" fill="rgb(237,209,29)" fg:x="14753" fg:w="652"/><text x="12.7749%" y="991.50"></text></g><g><title>abi_stable::std_types::map::map_key::MapKey&lt;K&gt;::as_mut (16 samples, 0.01%)</title><rect x="13.2992%" y="773" width="0.0136%" height="15" fill="rgb(212,65,23)" fg:x="15665" fg:w="16"/><text x="13.5492%" y="783.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::take_manuallydrop (14 samples, 0.01%)</title><rect x="13.3128%" y="773" width="0.0119%" height="15" fill="rgb(230,222,46)" fg:x="15681" fg:w="14"/><text x="13.5628%" y="783.50"></text></g><g><title>core::ptr::read (14 samples, 0.01%)</title><rect x="13.3128%" y="757" width="0.0119%" height="15" fill="rgb(215,135,32)" fg:x="15681" fg:w="14"/><text x="13.5628%" y="767.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (23 samples, 0.02%)</title><rect x="13.8875%" y="677" width="0.0195%" height="15" fill="rgb(246,101,22)" fg:x="16358" fg:w="23"/><text x="14.1375%" y="687.50"></text></g><g><title>core::ptr::write (23 samples, 0.02%)</title><rect x="13.8875%" y="661" width="0.0195%" height="15" fill="rgb(206,107,13)" fg:x="16358" fg:w="23"/><text x="14.1375%" y="671.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::write (27 samples, 0.02%)</title><rect x="13.8875%" y="693" width="0.0229%" height="15" fill="rgb(250,100,44)" fg:x="16358" fg:w="27"/><text x="14.1375%" y="703.50"></text></g><g><title>core::mem::swap (197 samples, 0.17%)</title><rect x="13.9648%" y="629" width="0.1672%" height="15" fill="rgb(231,147,38)" fg:x="16449" fg:w="197"/><text x="14.2148%" y="639.50"></text></g><g><title>core::mem::swap_simple (197 samples, 0.17%)</title><rect x="13.9648%" y="613" width="0.1672%" height="15" fill="rgb(229,8,40)" fg:x="16449" fg:w="197"/><text x="14.2148%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::inner::RawTableInner&lt;hashbrown::raw::inner::alloc::inner::Global&gt;,hashbrown::raw::inner::RawTableInner&lt;hashbrown::raw::inner::alloc::inner::Global&gt;::prepare_resize::{{closure}}&gt;&gt; (32 samples, 0.03%)</title><rect x="14.1320%" y="629" width="0.0272%" height="15" fill="rgb(221,135,30)" fg:x="16646" fg:w="32"/><text x="14.3820%" y="639.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.03%)</title><rect x="14.1320%" y="613" width="0.0272%" height="15" fill="rgb(249,193,18)" fg:x="16646" fg:w="32"/><text x="14.3820%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize::{{closure}} (32 samples, 0.03%)</title><rect x="14.1320%" y="597" width="0.0272%" height="15" fill="rgb(209,133,39)" fg:x="16646" fg:w="32"/><text x="14.3820%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::is_empty_singleton (24 samples, 0.02%)</title><rect x="14.1388%" y="581" width="0.0204%" height="15" fill="rgb(232,100,14)" fg:x="16654" fg:w="24"/><text x="14.3888%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (28 samples, 0.02%)</title><rect x="14.1796%" y="597" width="0.0238%" height="15" fill="rgb(224,185,1)" fg:x="16702" fg:w="28"/><text x="14.4296%" y="607.50"></text></g><g><title>core::intrinsics::write_bytes (28 samples, 0.02%)</title><rect x="14.1796%" y="581" width="0.0238%" height="15" fill="rgb(223,139,8)" fg:x="16702" fg:w="28"/><text x="14.4296%" y="591.50"></text></g><g><title>[libc-2.31.so] (23 samples, 0.02%)</title><rect x="14.1838%" y="565" width="0.0195%" height="15" fill="rgb(232,213,38)" fg:x="16707" fg:w="23"/><text x="14.4338%" y="575.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (40 samples, 0.03%)</title><rect x="14.2144%" y="581" width="0.0340%" height="15" fill="rgb(207,94,22)" fg:x="16743" fg:w="40"/><text x="14.4644%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (40 samples, 0.03%)</title><rect x="14.2144%" y="565" width="0.0340%" height="15" fill="rgb(219,183,54)" fg:x="16743" fg:w="40"/><text x="14.4644%" y="575.50"></text></g><g><title>alloc::alloc::alloc (40 samples, 0.03%)</title><rect x="14.2144%" y="549" width="0.0340%" height="15" fill="rgb(216,185,54)" fg:x="16743" fg:w="40"/><text x="14.4644%" y="559.50"></text></g><g><title>__rg_alloc (40 samples, 0.03%)</title><rect x="14.2144%" y="533" width="0.0340%" height="15" fill="rgb(254,217,39)" fg:x="16743" fg:w="40"/><text x="14.4644%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (40 samples, 0.03%)</title><rect x="14.2144%" y="517" width="0.0340%" height="15" fill="rgb(240,178,23)" fg:x="16743" fg:w="40"/><text x="14.4644%" y="527.50"></text></g><g><title>sn_rust_alloc (37 samples, 0.03%)</title><rect x="14.2169%" y="501" width="0.0314%" height="15" fill="rgb(218,11,47)" fg:x="16746" fg:w="37"/><text x="14.4669%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (54 samples, 0.05%)</title><rect x="14.2034%" y="597" width="0.0458%" height="15" fill="rgb(218,51,51)" fg:x="16730" fg:w="54"/><text x="14.4534%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (371 samples, 0.31%)</title><rect x="13.9368%" y="645" width="0.3150%" height="15" fill="rgb(238,126,27)" fg:x="16416" fg:w="371"/><text x="14.1868%" y="655.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (109 samples, 0.09%)</title><rect x="14.1592%" y="629" width="0.0925%" height="15" fill="rgb(249,202,22)" fg:x="16678" fg:w="109"/><text x="14.4092%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (103 samples, 0.09%)</title><rect x="14.1643%" y="613" width="0.0874%" height="15" fill="rgb(254,195,49)" fg:x="16684" fg:w="103"/><text x="14.4143%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (398 samples, 0.34%)</title><rect x="13.9198%" y="693" width="0.3379%" height="15" fill="rgb(208,123,14)" fg:x="16396" fg:w="398"/><text x="14.1698%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (387 samples, 0.33%)</title><rect x="13.9291%" y="677" width="0.3286%" height="15" fill="rgb(224,200,8)" fg:x="16407" fg:w="387"/><text x="14.1791%" y="687.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (383 samples, 0.33%)</title><rect x="13.9325%" y="661" width="0.3252%" height="15" fill="rgb(217,61,36)" fg:x="16411" fg:w="383"/><text x="14.1825%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (17 samples, 0.01%)</title><rect x="14.2798%" y="677" width="0.0144%" height="15" fill="rgb(206,35,45)" fg:x="16820" fg:w="17"/><text x="14.5298%" y="687.50"></text></g><g><title>hashbrown::raw::inner::is_full (16 samples, 0.01%)</title><rect x="14.3035%" y="677" width="0.0136%" height="15" fill="rgb(217,65,33)" fg:x="16848" fg:w="16"/><text x="14.5535%" y="687.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (12 samples, 0.01%)</title><rect x="14.3171%" y="677" width="0.0102%" height="15" fill="rgb(222,158,48)" fg:x="16864" fg:w="12"/><text x="14.5671%" y="687.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (12 samples, 0.01%)</title><rect x="14.3171%" y="661" width="0.0102%" height="15" fill="rgb(254,2,54)" fg:x="16864" fg:w="12"/><text x="14.5671%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.01%)</title><rect x="14.3171%" y="645" width="0.0102%" height="15" fill="rgb(250,143,38)" fg:x="16864" fg:w="12"/><text x="14.5671%" y="655.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_insert_slot (99 samples, 0.08%)</title><rect x="14.2577%" y="693" width="0.0840%" height="15" fill="rgb(248,25,0)" fg:x="16794" fg:w="99"/><text x="14.5077%" y="703.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (17 samples, 0.01%)</title><rect x="14.3273%" y="677" width="0.0144%" height="15" fill="rgb(206,152,27)" fg:x="16876" fg:w="17"/><text x="14.5773%" y="687.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (17 samples, 0.01%)</title><rect x="14.3273%" y="661" width="0.0144%" height="15" fill="rgb(240,77,30)" fg:x="16876" fg:w="17"/><text x="14.5773%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl (12 samples, 0.01%)</title><rect x="14.3570%" y="661" width="0.0102%" height="15" fill="rgb(231,5,3)" fg:x="16911" fg:w="12"/><text x="14.6070%" y="671.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert_hashed_nocheck (936 samples, 0.79%)</title><rect x="13.5760%" y="741" width="0.7946%" height="15" fill="rgb(207,226,32)" fg:x="15991" fg:w="936"/><text x="13.8260%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_entry (756 samples, 0.64%)</title><rect x="13.7288%" y="725" width="0.6418%" height="15" fill="rgb(222,207,47)" fg:x="16171" fg:w="756"/><text x="13.9788%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (577 samples, 0.49%)</title><rect x="13.8808%" y="709" width="0.4899%" height="15" fill="rgb(229,115,45)" fg:x="16350" fg:w="577"/><text x="14.1308%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::record_item_insert_at (34 samples, 0.03%)</title><rect x="14.3417%" y="693" width="0.0289%" height="15" fill="rgb(224,191,6)" fg:x="16893" fg:w="34"/><text x="14.5917%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl_h2 (16 samples, 0.01%)</title><rect x="14.3570%" y="677" width="0.0136%" height="15" fill="rgb(230,227,24)" fg:x="16911" fg:w="16"/><text x="14.6070%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (14 samples, 0.01%)</title><rect x="14.3876%" y="693" width="0.0119%" height="15" fill="rgb(228,80,19)" fg:x="16947" fg:w="14"/><text x="14.6376%" y="703.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (16 samples, 0.01%)</title><rect x="14.4419%" y="613" width="0.0136%" height="15" fill="rgb(247,229,0)" fg:x="17011" fg:w="16"/><text x="14.6919%" y="623.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (64 samples, 0.05%)</title><rect x="14.4054%" y="661" width="0.0543%" height="15" fill="rgb(237,194,15)" fg:x="16968" fg:w="64"/><text x="14.6554%" y="671.50"></text></g><g><title>fxhash::write (54 samples, 0.05%)</title><rect x="14.4139%" y="645" width="0.0458%" height="15" fill="rgb(219,203,20)" fg:x="16978" fg:w="54"/><text x="14.6639%" y="655.50"></text></g><g><title>fxhash::write64 (54 samples, 0.05%)</title><rect x="14.4139%" y="629" width="0.0458%" height="15" fill="rgb(234,128,8)" fg:x="16978" fg:w="54"/><text x="14.6639%" y="639.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (1,644 samples, 1.40%)</title><rect x="13.0785%" y="853" width="1.3957%" height="15" fill="rgb(248,202,8)" fg:x="15405" fg:w="1644"/><text x="13.3285%" y="863.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (1,644 samples, 1.40%)</title><rect x="13.0785%" y="837" width="1.3957%" height="15" fill="rgb(206,104,37)" fg:x="15405" fg:w="1644"/><text x="13.3285%" y="847.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}} (1,634 samples, 1.39%)</title><rect x="13.0870%" y="821" width="1.3872%" height="15" fill="rgb(223,8,27)" fg:x="15415" fg:w="1634"/><text x="13.3370%" y="831.50"></text></g><g><title>abi_stable::traits::ErasedType::run_downcast_as_mut (1,470 samples, 1.25%)</title><rect x="13.2262%" y="805" width="1.2480%" height="15" fill="rgb(216,217,28)" fg:x="15579" fg:w="1470"/><text x="13.4762%" y="815.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}}::{{closure}} (1,397 samples, 1.19%)</title><rect x="13.2882%" y="789" width="1.1860%" height="15" fill="rgb(249,199,1)" fg:x="15652" fg:w="1397"/><text x="13.5382%" y="799.50"></text></g><g><title>halfbrown::raw_entry::RawVacantEntryMut&lt;K,V,S&gt;::insert (1,354 samples, 1.15%)</title><rect x="13.3247%" y="773" width="1.1495%" height="15" fill="rgb(240,85,17)" fg:x="15695" fg:w="1354"/><text x="13.5747%" y="783.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert (1,154 samples, 0.98%)</title><rect x="13.4945%" y="757" width="0.9797%" height="15" fill="rgb(206,108,45)" fg:x="15895" fg:w="1154"/><text x="13.7445%" y="767.50"></text></g><g><title>hashbrown::map::make_insert_hash (122 samples, 0.10%)</title><rect x="14.3706%" y="741" width="0.1036%" height="15" fill="rgb(245,210,41)" fg:x="16927" fg:w="122"/><text x="14.6206%" y="751.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (112 samples, 0.10%)</title><rect x="14.3791%" y="725" width="0.0951%" height="15" fill="rgb(206,13,37)" fg:x="16937" fg:w="112"/><text x="14.6291%" y="735.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::hash::Hash&gt;::hash (112 samples, 0.10%)</title><rect x="14.3791%" y="709" width="0.0951%" height="15" fill="rgb(250,61,18)" fg:x="16937" fg:w="112"/><text x="14.6291%" y="719.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (88 samples, 0.07%)</title><rect x="14.3995%" y="693" width="0.0747%" height="15" fill="rgb(235,172,48)" fg:x="16961" fg:w="88"/><text x="14.6495%" y="703.50"></text></g><g><title>core::hash::Hasher::write_str (81 samples, 0.07%)</title><rect x="14.4054%" y="677" width="0.0688%" height="15" fill="rgb(249,201,17)" fg:x="16968" fg:w="81"/><text x="14.6554%" y="687.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (17 samples, 0.01%)</title><rect x="14.4598%" y="661" width="0.0144%" height="15" fill="rgb(219,208,6)" fg:x="17032" fg:w="17"/><text x="14.7098%" y="671.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (17 samples, 0.01%)</title><rect x="14.4598%" y="645" width="0.0144%" height="15" fill="rgb(248,31,23)" fg:x="17032" fg:w="17"/><text x="14.7098%" y="655.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (38 samples, 0.03%)</title><rect x="14.6652%" y="581" width="0.0323%" height="15" fill="rgb(245,15,42)" fg:x="17274" fg:w="38"/><text x="14.9152%" y="591.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (237 samples, 0.20%)</title><rect x="14.5081%" y="741" width="0.2012%" height="15" fill="rgb(222,217,39)" fg:x="17089" fg:w="237"/><text x="14.7581%" y="751.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (237 samples, 0.20%)</title><rect x="14.5081%" y="725" width="0.2012%" height="15" fill="rgb(210,219,27)" fg:x="17089" fg:w="237"/><text x="14.7581%" y="735.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (214 samples, 0.18%)</title><rect x="14.5277%" y="709" width="0.1817%" height="15" fill="rgb(252,166,36)" fg:x="17112" fg:w="214"/><text x="14.7777%" y="719.50"></text></g><g><title>alloc::alloc::exchange_malloc (204 samples, 0.17%)</title><rect x="14.5362%" y="693" width="0.1732%" height="15" fill="rgb(245,132,34)" fg:x="17122" fg:w="204"/><text x="14.7862%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (204 samples, 0.17%)</title><rect x="14.5362%" y="677" width="0.1732%" height="15" fill="rgb(236,54,3)" fg:x="17122" fg:w="204"/><text x="14.7862%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (204 samples, 0.17%)</title><rect x="14.5362%" y="661" width="0.1732%" height="15" fill="rgb(241,173,43)" fg:x="17122" fg:w="204"/><text x="14.7862%" y="671.50"></text></g><g><title>alloc::alloc::alloc (197 samples, 0.17%)</title><rect x="14.5421%" y="645" width="0.1672%" height="15" fill="rgb(215,190,9)" fg:x="17129" fg:w="197"/><text x="14.7921%" y="655.50"></text></g><g><title>__rg_alloc (197 samples, 0.17%)</title><rect x="14.5421%" y="629" width="0.1672%" height="15" fill="rgb(242,101,16)" fg:x="17129" fg:w="197"/><text x="14.7921%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (197 samples, 0.17%)</title><rect x="14.5421%" y="613" width="0.1672%" height="15" fill="rgb(223,190,21)" fg:x="17129" fg:w="197"/><text x="14.7921%" y="623.50"></text></g><g><title>sn_rust_alloc (196 samples, 0.17%)</title><rect x="14.5430%" y="597" width="0.1664%" height="15" fill="rgb(215,228,25)" fg:x="17130" fg:w="196"/><text x="14.7930%" y="607.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (14 samples, 0.01%)</title><rect x="14.6975%" y="581" width="0.0119%" height="15" fill="rgb(225,36,22)" fg:x="17312" fg:w="14"/><text x="14.9475%" y="591.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (292 samples, 0.25%)</title><rect x="14.4742%" y="789" width="0.2479%" height="15" fill="rgb(251,106,46)" fg:x="17049" fg:w="292"/><text x="14.7242%" y="799.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (287 samples, 0.24%)</title><rect x="14.4784%" y="773" width="0.2437%" height="15" fill="rgb(208,90,1)" fg:x="17054" fg:w="287"/><text x="14.7284%" y="783.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (287 samples, 0.24%)</title><rect x="14.4784%" y="757" width="0.2437%" height="15" fill="rgb(243,10,4)" fg:x="17054" fg:w="287"/><text x="14.7284%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (15 samples, 0.01%)</title><rect x="14.7094%" y="741" width="0.0127%" height="15" fill="rgb(212,137,27)" fg:x="17326" fg:w="15"/><text x="14.9594%" y="751.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (15 samples, 0.01%)</title><rect x="14.7094%" y="725" width="0.0127%" height="15" fill="rgb(231,220,49)" fg:x="17326" fg:w="15"/><text x="14.9594%" y="735.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (21 samples, 0.02%)</title><rect x="14.7993%" y="613" width="0.0178%" height="15" fill="rgb(237,96,20)" fg:x="17432" fg:w="21"/><text x="15.0493%" y="623.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (21 samples, 0.02%)</title><rect x="14.7993%" y="597" width="0.0178%" height="15" fill="rgb(239,229,30)" fg:x="17432" fg:w="21"/><text x="15.0493%" y="607.50"></text></g><g><title>core::mem::swap (608 samples, 0.52%)</title><rect x="14.8172%" y="613" width="0.5162%" height="15" fill="rgb(219,65,33)" fg:x="17453" fg:w="608"/><text x="15.0672%" y="623.50"></text></g><g><title>core::mem::swap_simple (608 samples, 0.52%)</title><rect x="14.8172%" y="597" width="0.5162%" height="15" fill="rgb(243,134,7)" fg:x="17453" fg:w="608"/><text x="15.0672%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::inner::RawTableInner&lt;hashbrown::raw::inner::alloc::inner::Global&gt;,hashbrown::raw::inner::RawTableInner&lt;hashbrown::raw::inner::alloc::inner::Global&gt;::prepare_resize::{{closure}}&gt;&gt; (17 samples, 0.01%)</title><rect x="15.3334%" y="613" width="0.0144%" height="15" fill="rgb(216,177,54)" fg:x="18061" fg:w="17"/><text x="15.5834%" y="623.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.01%)</title><rect x="15.3334%" y="597" width="0.0144%" height="15" fill="rgb(211,160,20)" fg:x="18061" fg:w="17"/><text x="15.5834%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize::{{closure}} (17 samples, 0.01%)</title><rect x="15.3334%" y="581" width="0.0144%" height="15" fill="rgb(239,85,39)" fg:x="18061" fg:w="17"/><text x="15.5834%" y="591.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (18 samples, 0.02%)</title><rect x="15.3690%" y="597" width="0.0153%" height="15" fill="rgb(232,125,22)" fg:x="18103" fg:w="18"/><text x="15.6190%" y="607.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (84 samples, 0.07%)</title><rect x="15.4191%" y="581" width="0.0713%" height="15" fill="rgb(244,57,34)" fg:x="18162" fg:w="84"/><text x="15.6691%" y="591.50"></text></g><g><title>core::intrinsics::write_bytes (84 samples, 0.07%)</title><rect x="15.4191%" y="565" width="0.0713%" height="15" fill="rgb(214,203,32)" fg:x="18162" fg:w="84"/><text x="15.6691%" y="575.50"></text></g><g><title>[libc-2.31.so] (62 samples, 0.05%)</title><rect x="15.4378%" y="549" width="0.0526%" height="15" fill="rgb(207,58,43)" fg:x="18184" fg:w="62"/><text x="15.6878%" y="559.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (27 samples, 0.02%)</title><rect x="15.5099%" y="549" width="0.0229%" height="15" fill="rgb(215,193,15)" fg:x="18269" fg:w="27"/><text x="15.7599%" y="559.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (27 samples, 0.02%)</title><rect x="15.5099%" y="533" width="0.0229%" height="15" fill="rgb(232,15,44)" fg:x="18269" fg:w="27"/><text x="15.7599%" y="543.50"></text></g><g><title>hashbrown::raw::inner::TableLayout::calculate_layout_for (54 samples, 0.05%)</title><rect x="15.4989%" y="565" width="0.0458%" height="15" fill="rgb(212,3,48)" fg:x="18256" fg:w="54"/><text x="15.7489%" y="575.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (14 samples, 0.01%)</title><rect x="15.5329%" y="549" width="0.0119%" height="15" fill="rgb(218,128,7)" fg:x="18296" fg:w="14"/><text x="15.7829%" y="559.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (14 samples, 0.01%)</title><rect x="15.5329%" y="533" width="0.0119%" height="15" fill="rgb(226,216,39)" fg:x="18296" fg:w="14"/><text x="15.7829%" y="543.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (699 samples, 0.59%)</title><rect x="16.0057%" y="469" width="0.5934%" height="15" fill="rgb(243,47,51)" fg:x="18853" fg:w="699"/><text x="16.2557%" y="479.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (1,367 samples, 1.16%)</title><rect x="15.5447%" y="565" width="1.1605%" height="15" fill="rgb(241,183,40)" fg:x="18310" fg:w="1367"/><text x="15.7947%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (1,367 samples, 1.16%)</title><rect x="15.5447%" y="549" width="1.1605%" height="15" fill="rgb(231,217,32)" fg:x="18310" fg:w="1367"/><text x="15.7947%" y="559.50"></text></g><g><title>alloc::alloc::alloc (1,367 samples, 1.16%)</title><rect x="15.5447%" y="533" width="1.1605%" height="15" fill="rgb(229,61,38)" fg:x="18310" fg:w="1367"/><text x="15.7947%" y="543.50"></text></g><g><title>__rg_alloc (1,367 samples, 1.16%)</title><rect x="15.5447%" y="517" width="1.1605%" height="15" fill="rgb(225,210,5)" fg:x="18310" fg:w="1367"/><text x="15.7947%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1,367 samples, 1.16%)</title><rect x="15.5447%" y="501" width="1.1605%" height="15" fill="rgb(231,79,45)" fg:x="18310" fg:w="1367"/><text x="15.7947%" y="511.50"></text></g><g><title>sn_rust_alloc (1,356 samples, 1.15%)</title><rect x="15.5541%" y="485" width="1.1512%" height="15" fill="rgb(224,100,7)" fg:x="18321" fg:w="1356"/><text x="15.8041%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (125 samples, 0.11%)</title><rect x="16.5992%" y="469" width="0.1061%" height="15" fill="rgb(241,198,18)" fg:x="19552" fg:w="125"/><text x="16.8492%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (1,448 samples, 1.23%)</title><rect x="15.4904%" y="581" width="1.2293%" height="15" fill="rgb(252,97,53)" fg:x="18246" fg:w="1448"/><text x="15.7404%" y="591.50"></text></g><g><title>hashbrown::raw::inner::bucket_mask_to_capacity (17 samples, 0.01%)</title><rect x="16.7053%" y="565" width="0.0144%" height="15" fill="rgb(220,88,7)" fg:x="19677" fg:w="17"/><text x="16.9553%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (1,713 samples, 1.45%)</title><rect x="15.3478%" y="613" width="1.4543%" height="15" fill="rgb(213,176,14)" fg:x="18078" fg:w="1713"/><text x="15.5978%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (1,670 samples, 1.42%)</title><rect x="15.3843%" y="597" width="1.4178%" height="15" fill="rgb(246,73,7)" fg:x="18121" fg:w="1670"/><text x="15.6343%" y="607.50"></text></g><g><title>hashbrown::raw::inner::capacity_to_buckets (97 samples, 0.08%)</title><rect x="16.7197%" y="581" width="0.0824%" height="15" fill="rgb(245,64,36)" fg:x="19694" fg:w="97"/><text x="16.9697%" y="591.50"></text></g><g><title>core::num::&lt;impl usize&gt;::next_power_of_two (44 samples, 0.04%)</title><rect x="16.7647%" y="565" width="0.0374%" height="15" fill="rgb(245,80,10)" fg:x="19747" fg:w="44"/><text x="17.0147%" y="575.50"></text></g><g><title>core::num::&lt;impl usize&gt;::one_less_than_next_power_of_two (44 samples, 0.04%)</title><rect x="16.7647%" y="549" width="0.0374%" height="15" fill="rgb(232,107,50)" fg:x="19747" fg:w="44"/><text x="17.0147%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (2,425 samples, 2.06%)</title><rect x="14.7527%" y="629" width="2.0588%" height="15" fill="rgb(253,3,0)" fg:x="17377" fg:w="2425"/><text x="15.0027%" y="639.50">h..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (4,417 samples, 3.75%)</title><rect x="13.0785%" y="933" width="3.7499%" height="15" fill="rgb(212,99,53)" fg:x="15405" fg:w="4417"/><text x="13.3285%" y="943.50">trem..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (4,417 samples, 3.75%)</title><rect x="13.0785%" y="917" width="3.7499%" height="15" fill="rgb(249,111,54)" fg:x="15405" fg:w="4417"/><text x="13.3285%" y="927.50">trem..</text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (4,417 samples, 3.75%)</title><rect x="13.0785%" y="901" width="3.7499%" height="15" fill="rgb(249,55,30)" fg:x="15405" fg:w="4417"/><text x="13.3285%" y="911.50">trem..</text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (4,417 samples, 3.75%)</title><rect x="13.0785%" y="885" width="3.7499%" height="15" fill="rgb(237,47,42)" fg:x="15405" fg:w="4417"/><text x="13.3285%" y="895.50">trem..</text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (4,417 samples, 3.75%)</title><rect x="13.0785%" y="869" width="3.7499%" height="15" fill="rgb(211,20,18)" fg:x="15405" fg:w="4417"/><text x="13.3285%" y="879.50">abi_..</text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut::{{closure}} (2,773 samples, 2.35%)</title><rect x="14.4742%" y="853" width="2.3542%" height="15" fill="rgb(231,203,46)" fg:x="17049" fg:w="2773"/><text x="14.7242%" y="863.50">t..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (2,773 samples, 2.35%)</title><rect x="14.4742%" y="837" width="2.3542%" height="15" fill="rgb(237,142,3)" fg:x="17049" fg:w="2773"/><text x="14.7242%" y="847.50">t..</text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (2,773 samples, 2.35%)</title><rect x="14.4742%" y="821" width="2.3542%" height="15" fill="rgb(241,107,1)" fg:x="17049" fg:w="2773"/><text x="14.7242%" y="831.50">&lt;..</text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (2,773 samples, 2.35%)</title><rect x="14.4742%" y="805" width="2.3542%" height="15" fill="rgb(229,83,13)" fg:x="17049" fg:w="2773"/><text x="14.7242%" y="815.50">a..</text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (2,481 samples, 2.11%)</title><rect x="14.7221%" y="789" width="2.1063%" height="15" fill="rgb(241,91,40)" fg:x="17341" fg:w="2481"/><text x="14.9721%" y="799.50">a..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (2,481 samples, 2.11%)</title><rect x="14.7221%" y="773" width="2.1063%" height="15" fill="rgb(225,3,45)" fg:x="17341" fg:w="2481"/><text x="14.9721%" y="783.50">a..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (2,481 samples, 2.11%)</title><rect x="14.7221%" y="757" width="2.1063%" height="15" fill="rgb(244,223,14)" fg:x="17341" fg:w="2481"/><text x="14.9721%" y="767.50">a..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (2,481 samples, 2.11%)</title><rect x="14.7221%" y="741" width="2.1063%" height="15" fill="rgb(224,124,37)" fg:x="17341" fg:w="2481"/><text x="14.9721%" y="751.50">a..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (2,481 samples, 2.11%)</title><rect x="14.7221%" y="725" width="2.1063%" height="15" fill="rgb(251,171,30)" fg:x="17341" fg:w="2481"/><text x="14.9721%" y="735.50">a..</text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (2,481 samples, 2.11%)</title><rect x="14.7221%" y="709" width="2.1063%" height="15" fill="rgb(236,46,54)" fg:x="17341" fg:w="2481"/><text x="14.9721%" y="719.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (2,481 samples, 2.11%)</title><rect x="14.7221%" y="693" width="2.1063%" height="15" fill="rgb(245,213,5)" fg:x="17341" fg:w="2481"/><text x="14.9721%" y="703.50">h..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (2,481 samples, 2.11%)</title><rect x="14.7221%" y="677" width="2.1063%" height="15" fill="rgb(230,144,27)" fg:x="17341" fg:w="2481"/><text x="14.9721%" y="687.50">h..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (2,481 samples, 2.11%)</title><rect x="14.7221%" y="661" width="2.1063%" height="15" fill="rgb(220,86,6)" fg:x="17341" fg:w="2481"/><text x="14.9721%" y="671.50">h..</text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (2,480 samples, 2.11%)</title><rect x="14.7229%" y="645" width="2.1055%" height="15" fill="rgb(240,20,13)" fg:x="17342" fg:w="2480"/><text x="14.9729%" y="655.50">h..</text></g><g><title>hashbrown::raw::inner::bucket_mask_to_capacity (20 samples, 0.02%)</title><rect x="16.8114%" y="629" width="0.0170%" height="15" fill="rgb(217,89,34)" fg:x="19802" fg:w="20"/><text x="17.0614%" y="639.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (5,139 samples, 4.36%)</title><rect x="12.5249%" y="1077" width="4.3629%" height="15" fill="rgb(229,13,5)" fg:x="14753" fg:w="5139"/><text x="12.7749%" y="1087.50">&lt;trem..</text></g><g><title>tremor_script::srs::EventPayload::rent_mut (5,139 samples, 4.36%)</title><rect x="12.5249%" y="1061" width="4.3629%" height="15" fill="rgb(244,67,35)" fg:x="14753" fg:w="5139"/><text x="12.7749%" y="1071.50">tremo..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (5,139 samples, 4.36%)</title><rect x="12.5249%" y="1045" width="4.3629%" height="15" fill="rgb(221,40,2)" fg:x="14753" fg:w="5139"/><text x="12.7749%" y="1055.50">&lt;trem..</text></g><g><title>tremor_script::script::Script::run (5,139 samples, 4.36%)</title><rect x="12.5249%" y="1029" width="4.3629%" height="15" fill="rgb(237,157,21)" fg:x="14753" fg:w="5139"/><text x="12.7749%" y="1039.50">tremo..</text></g><g><title>tremor_script::ast::Script::run (5,139 samples, 4.36%)</title><rect x="12.5249%" y="1013" width="4.3629%" height="15" fill="rgb(222,94,11)" fg:x="14753" fg:w="5139"/><text x="12.7749%" y="1023.50">tremo..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (5,139 samples, 4.36%)</title><rect x="12.5249%" y="997" width="4.3629%" height="15" fill="rgb(249,113,6)" fg:x="14753" fg:w="5139"/><text x="12.7749%" y="1007.50">tremo..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (4,487 samples, 3.81%)</title><rect x="13.0785%" y="981" width="3.8094%" height="15" fill="rgb(238,137,36)" fg:x="15405" fg:w="4487"/><text x="13.3285%" y="991.50">trem..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (4,487 samples, 3.81%)</title><rect x="13.0785%" y="965" width="3.8094%" height="15" fill="rgb(210,102,26)" fg:x="15405" fg:w="4487"/><text x="13.3285%" y="975.50">trem..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (4,487 samples, 3.81%)</title><rect x="13.0785%" y="949" width="3.8094%" height="15" fill="rgb(218,30,30)" fg:x="15405" fg:w="4487"/><text x="13.3285%" y="959.50">trem..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (70 samples, 0.06%)</title><rect x="16.8284%" y="933" width="0.0594%" height="15" fill="rgb(214,67,26)" fg:x="19822" fg:w="70"/><text x="17.0784%" y="943.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (70 samples, 0.06%)</title><rect x="16.8284%" y="917" width="0.0594%" height="15" fill="rgb(251,9,53)" fg:x="19822" fg:w="70"/><text x="17.0784%" y="927.50"></text></g><g><title>&lt;tremor_runtime::codec::msgpack::MsgPack as tremor_runtime::codec::Codec&gt;::encode (14 samples, 0.01%)</title><rect x="16.8895%" y="1077" width="0.0119%" height="15" fill="rgb(228,204,25)" fg:x="19894" fg:w="14"/><text x="17.1395%" y="1087.50"></text></g><g><title>[libc-2.31.so] (138 samples, 0.12%)</title><rect x="16.9158%" y="1077" width="0.1172%" height="15" fill="rgb(207,153,8)" fg:x="19925" fg:w="138"/><text x="17.1658%" y="1087.50"></text></g><g><title>__clock_gettime (37 samples, 0.03%)</title><rect x="17.0347%" y="1077" width="0.0314%" height="15" fill="rgb(242,9,16)" fg:x="20065" fg:w="37"/><text x="17.2847%" y="1087.50"></text></g><g><title>__vdso_clock_gettime (25 samples, 0.02%)</title><rect x="17.0670%" y="1077" width="0.0212%" height="15" fill="rgb(217,211,10)" fg:x="20103" fg:w="25"/><text x="17.3170%" y="1087.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (12 samples, 0.01%)</title><rect x="17.0882%" y="1077" width="0.0102%" height="15" fill="rgb(219,228,52)" fg:x="20128" fg:w="12"/><text x="17.3382%" y="1087.50"></text></g><g><title>abi_stable::erased_types::iterator::next (48 samples, 0.04%)</title><rect x="17.0984%" y="1077" width="0.0408%" height="15" fill="rgb(231,92,29)" fg:x="20140" fg:w="48"/><text x="17.3484%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (13 samples, 0.01%)</title><rect x="17.1536%" y="1077" width="0.0110%" height="15" fill="rgb(232,8,23)" fg:x="20205" fg:w="13"/><text x="17.4036%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (70 samples, 0.06%)</title><rect x="17.1646%" y="1077" width="0.0594%" height="15" fill="rgb(216,211,34)" fg:x="20218" fg:w="70"/><text x="17.4146%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (16 samples, 0.01%)</title><rect x="17.2274%" y="1077" width="0.0136%" height="15" fill="rgb(236,151,0)" fg:x="20292" fg:w="16"/><text x="17.4774%" y="1087.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (47 samples, 0.04%)</title><rect x="17.2427%" y="1077" width="0.0399%" height="15" fill="rgb(209,168,3)" fg:x="20310" fg:w="47"/><text x="17.4927%" y="1087.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (15 samples, 0.01%)</title><rect x="17.2699%" y="1061" width="0.0127%" height="15" fill="rgb(208,129,28)" fg:x="20342" fg:w="15"/><text x="17.5199%" y="1071.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (15 samples, 0.01%)</title><rect x="17.2699%" y="1045" width="0.0127%" height="15" fill="rgb(229,78,22)" fg:x="20342" fg:w="15"/><text x="17.5199%" y="1055.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (15 samples, 0.01%)</title><rect x="17.2699%" y="1029" width="0.0127%" height="15" fill="rgb(228,187,13)" fg:x="20342" fg:w="15"/><text x="17.5199%" y="1039.50"></text></g><g><title>alloc::slice::hack::to_vec (15 samples, 0.01%)</title><rect x="17.2699%" y="1013" width="0.0127%" height="15" fill="rgb(240,119,24)" fg:x="20342" fg:w="15"/><text x="17.5199%" y="1023.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (15 samples, 0.01%)</title><rect x="17.2699%" y="997" width="0.0127%" height="15" fill="rgb(209,194,42)" fg:x="20342" fg:w="15"/><text x="17.5199%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (26 samples, 0.02%)</title><rect x="17.2987%" y="1029" width="0.0221%" height="15" fill="rgb(247,200,46)" fg:x="20376" fg:w="26"/><text x="17.5487%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (26 samples, 0.02%)</title><rect x="17.2987%" y="1013" width="0.0221%" height="15" fill="rgb(218,76,16)" fg:x="20376" fg:w="26"/><text x="17.5487%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::vec::private::RVec&lt;u8&gt;]&gt; (26 samples, 0.02%)</title><rect x="17.2987%" y="997" width="0.0221%" height="15" fill="rgb(225,21,48)" fg:x="20376" fg:w="26"/><text x="17.5487%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (26 samples, 0.02%)</title><rect x="17.2987%" y="981" width="0.0221%" height="15" fill="rgb(239,223,50)" fg:x="20376" fg:w="26"/><text x="17.5487%" y="991.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (26 samples, 0.02%)</title><rect x="17.2987%" y="965" width="0.0221%" height="15" fill="rgb(244,45,21)" fg:x="20376" fg:w="26"/><text x="17.5487%" y="975.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (38 samples, 0.03%)</title><rect x="17.2919%" y="1077" width="0.0323%" height="15" fill="rgb(232,33,43)" fg:x="20368" fg:w="38"/><text x="17.5419%" y="1087.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (30 samples, 0.03%)</title><rect x="17.2987%" y="1061" width="0.0255%" height="15" fill="rgb(209,8,3)" fg:x="20376" fg:w="30"/><text x="17.5487%" y="1071.50"></text></g><g><title>core::mem::drop (30 samples, 0.03%)</title><rect x="17.2987%" y="1045" width="0.0255%" height="15" fill="rgb(214,25,53)" fg:x="20376" fg:w="30"/><text x="17.5487%" y="1055.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (14 samples, 0.01%)</title><rect x="17.3267%" y="1077" width="0.0119%" height="15" fill="rgb(254,186,54)" fg:x="20409" fg:w="14"/><text x="17.5767%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="17.3267%" y="1061" width="0.0119%" height="15" fill="rgb(208,174,49)" fg:x="20409" fg:w="14"/><text x="17.5767%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (14 samples, 0.01%)</title><rect x="17.3267%" y="1045" width="0.0119%" height="15" fill="rgb(233,191,51)" fg:x="20409" fg:w="14"/><text x="17.5767%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (14 samples, 0.01%)</title><rect x="17.3267%" y="1029" width="0.0119%" height="15" fill="rgb(222,134,10)" fg:x="20409" fg:w="14"/><text x="17.5767%" y="1039.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (25 samples, 0.02%)</title><rect x="17.3454%" y="1077" width="0.0212%" height="15" fill="rgb(230,226,20)" fg:x="20431" fg:w="25"/><text x="17.5954%" y="1087.50"></text></g><g><title>async_executor::Ticker::sleep (33 samples, 0.03%)</title><rect x="17.3666%" y="1077" width="0.0280%" height="15" fill="rgb(251,111,25)" fg:x="20456" fg:w="33"/><text x="17.6166%" y="1087.50"></text></g><g><title>async_executor::steal (97 samples, 0.08%)</title><rect x="17.3947%" y="1077" width="0.0824%" height="15" fill="rgb(224,40,46)" fg:x="20489" fg:w="97"/><text x="17.6447%" y="1087.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (359 samples, 0.30%)</title><rect x="17.7190%" y="725" width="0.3048%" height="15" fill="rgb(236,108,47)" fg:x="20871" fg:w="359"/><text x="17.9690%" y="735.50"></text></g><g><title>[libc-2.31.so] (301 samples, 0.26%)</title><rect x="17.7682%" y="709" width="0.2555%" height="15" fill="rgb(234,93,0)" fg:x="20929" fg:w="301"/><text x="18.0182%" y="719.50"></text></g><g><title>[libc-2.31.so] (123 samples, 0.10%)</title><rect x="18.0458%" y="709" width="0.1044%" height="15" fill="rgb(224,213,32)" fg:x="21256" fg:w="123"/><text x="18.2958%" y="719.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (492 samples, 0.42%)</title><rect x="18.2402%" y="693" width="0.4177%" height="15" fill="rgb(251,11,48)" fg:x="21485" fg:w="492"/><text x="18.4902%" y="703.50"></text></g><g><title>[libc-2.31.so] (121 samples, 0.10%)</title><rect x="18.6698%" y="677" width="0.1027%" height="15" fill="rgb(236,173,5)" fg:x="21991" fg:w="121"/><text x="18.9198%" y="687.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (226 samples, 0.19%)</title><rect x="18.6579%" y="693" width="0.1919%" height="15" fill="rgb(230,95,12)" fg:x="21977" fg:w="226"/><text x="18.9079%" y="703.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (91 samples, 0.08%)</title><rect x="18.7726%" y="677" width="0.0773%" height="15" fill="rgb(232,209,1)" fg:x="22112" fg:w="91"/><text x="19.0226%" y="687.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (90 samples, 0.08%)</title><rect x="18.8498%" y="661" width="0.0764%" height="15" fill="rgb(232,6,1)" fg:x="22203" fg:w="90"/><text x="19.0998%" y="671.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (86 samples, 0.07%)</title><rect x="18.8532%" y="645" width="0.0730%" height="15" fill="rgb(210,224,50)" fg:x="22207" fg:w="86"/><text x="19.1032%" y="655.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (86 samples, 0.07%)</title><rect x="18.8532%" y="629" width="0.0730%" height="15" fill="rgb(228,127,35)" fg:x="22207" fg:w="86"/><text x="19.1032%" y="639.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (22 samples, 0.02%)</title><rect x="18.9525%" y="613" width="0.0187%" height="15" fill="rgb(245,102,45)" fg:x="22324" fg:w="22"/><text x="19.2025%" y="623.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (22 samples, 0.02%)</title><rect x="18.9525%" y="597" width="0.0187%" height="15" fill="rgb(214,1,49)" fg:x="22324" fg:w="22"/><text x="19.2025%" y="607.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (22 samples, 0.02%)</title><rect x="18.9525%" y="581" width="0.0187%" height="15" fill="rgb(226,163,40)" fg:x="22324" fg:w="22"/><text x="19.2025%" y="591.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (2,454 samples, 2.08%)</title><rect x="18.9288%" y="645" width="2.0834%" height="15" fill="rgb(239,212,28)" fg:x="22296" fg:w="2454"/><text x="19.1788%" y="655.50">&lt;..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (2,439 samples, 2.07%)</title><rect x="18.9415%" y="629" width="2.0707%" height="15" fill="rgb(220,20,13)" fg:x="22311" fg:w="2439"/><text x="19.1915%" y="639.50">a..</text></g><g><title>std::panic::catch_unwind (2,404 samples, 2.04%)</title><rect x="18.9712%" y="613" width="2.0409%" height="15" fill="rgb(210,164,35)" fg:x="22346" fg:w="2404"/><text x="19.2212%" y="623.50">s..</text></g><g><title>std::panicking::try (2,404 samples, 2.04%)</title><rect x="18.9712%" y="597" width="2.0409%" height="15" fill="rgb(248,109,41)" fg:x="22346" fg:w="2404"/><text x="19.2212%" y="607.50">s..</text></g><g><title>std::panicking::try::do_call (2,404 samples, 2.04%)</title><rect x="18.9712%" y="581" width="2.0409%" height="15" fill="rgb(238,23,50)" fg:x="22346" fg:w="2404"/><text x="19.2212%" y="591.50">s..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (2,459 samples, 2.09%)</title><rect x="18.9262%" y="661" width="2.0876%" height="15" fill="rgb(211,48,49)" fg:x="22293" fg:w="2459"/><text x="19.1762%" y="671.50">&lt;..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,635 samples, 2.24%)</title><rect x="18.8498%" y="693" width="2.2371%" height="15" fill="rgb(223,36,21)" fg:x="22203" fg:w="2635"/><text x="19.0998%" y="703.50">&lt;..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,635 samples, 2.24%)</title><rect x="18.8498%" y="677" width="2.2371%" height="15" fill="rgb(207,123,46)" fg:x="22203" fg:w="2635"/><text x="19.0998%" y="687.50">&lt;..</text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (86 samples, 0.07%)</title><rect x="21.0138%" y="661" width="0.0730%" height="15" fill="rgb(240,218,32)" fg:x="24752" fg:w="86"/><text x="21.2638%" y="671.50"></text></g><g><title>[libc-2.31.so] (377 samples, 0.32%)</title><rect x="21.0869%" y="693" width="0.3201%" height="15" fill="rgb(252,5,43)" fg:x="24838" fg:w="377"/><text x="21.3369%" y="703.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (43 samples, 0.04%)</title><rect x="21.4069%" y="693" width="0.0365%" height="15" fill="rgb(252,84,19)" fg:x="25215" fg:w="43"/><text x="21.6569%" y="703.50"></text></g><g><title>alloc::alloc::box_free (12 samples, 0.01%)</title><rect x="21.4545%" y="565" width="0.0102%" height="15" fill="rgb(243,152,39)" fg:x="25271" fg:w="12"/><text x="21.7045%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (12 samples, 0.01%)</title><rect x="21.4545%" y="549" width="0.0102%" height="15" fill="rgb(234,160,15)" fg:x="25271" fg:w="12"/><text x="21.7045%" y="559.50"></text></g><g><title>alloc::alloc::dealloc (12 samples, 0.01%)</title><rect x="21.4545%" y="533" width="0.0102%" height="15" fill="rgb(237,34,20)" fg:x="25271" fg:w="12"/><text x="21.7045%" y="543.50"></text></g><g><title>__rg_dealloc (12 samples, 0.01%)</title><rect x="21.4545%" y="517" width="0.0102%" height="15" fill="rgb(229,97,13)" fg:x="25271" fg:w="12"/><text x="21.7045%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (12 samples, 0.01%)</title><rect x="21.4545%" y="501" width="0.0102%" height="15" fill="rgb(234,71,50)" fg:x="25271" fg:w="12"/><text x="21.7045%" y="511.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn (17 samples, 0.01%)</title><rect x="21.4519%" y="645" width="0.0144%" height="15" fill="rgb(253,155,4)" fg:x="25268" fg:w="17"/><text x="21.7019%" y="655.50"></text></g><g><title>async_ffi::DropBomb::with (14 samples, 0.01%)</title><rect x="21.4545%" y="629" width="0.0119%" height="15" fill="rgb(222,185,37)" fg:x="25271" fg:w="14"/><text x="21.7045%" y="639.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn::{{closure}} (14 samples, 0.01%)</title><rect x="21.4545%" y="613" width="0.0119%" height="15" fill="rgb(251,177,13)" fg:x="25271" fg:w="14"/><text x="21.7045%" y="623.50"></text></g><g><title>core::mem::drop (14 samples, 0.01%)</title><rect x="21.4545%" y="597" width="0.0119%" height="15" fill="rgb(250,179,40)" fg:x="25271" fg:w="14"/><text x="21.7045%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}}&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="21.4545%" y="581" width="0.0119%" height="15" fill="rgb(242,44,2)" fg:x="25271" fg:w="14"/><text x="21.7045%" y="591.50"></text></g><g><title>sn_rust_dealloc (26 samples, 0.02%)</title><rect x="21.4664%" y="645" width="0.0221%" height="15" fill="rgb(216,177,13)" fg:x="25285" fg:w="26"/><text x="21.7164%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (57 samples, 0.05%)</title><rect x="21.4434%" y="693" width="0.0484%" height="15" fill="rgb(216,106,43)" fg:x="25258" fg:w="57"/><text x="21.6934%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (57 samples, 0.05%)</title><rect x="21.4434%" y="677" width="0.0484%" height="15" fill="rgb(216,183,2)" fg:x="25258" fg:w="57"/><text x="21.6934%" y="687.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (57 samples, 0.05%)</title><rect x="21.4434%" y="661" width="0.0484%" height="15" fill="rgb(249,75,3)" fg:x="25258" fg:w="57"/><text x="21.6934%" y="671.50"></text></g><g><title>[libc-2.31.so] (67 samples, 0.06%)</title><rect x="21.6811%" y="677" width="0.0569%" height="15" fill="rgb(219,67,39)" fg:x="25538" fg:w="67"/><text x="21.9311%" y="687.50"></text></g><g><title>[libc-2.31.so] (119 samples, 0.10%)</title><rect x="21.7592%" y="597" width="0.1010%" height="15" fill="rgb(253,228,2)" fg:x="25630" fg:w="119"/><text x="22.0092%" y="607.50"></text></g><g><title>[libc-2.31.so] (81 samples, 0.07%)</title><rect x="21.8662%" y="581" width="0.0688%" height="15" fill="rgb(235,138,27)" fg:x="25756" fg:w="81"/><text x="22.1162%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (50 samples, 0.04%)</title><rect x="22.0471%" y="469" width="0.0424%" height="15" fill="rgb(236,97,51)" fg:x="25969" fg:w="50"/><text x="22.2971%" y="479.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (420 samples, 0.36%)</title><rect x="21.7380%" y="677" width="0.3566%" height="15" fill="rgb(240,80,30)" fg:x="25605" fg:w="420"/><text x="21.9880%" y="687.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event (406 samples, 0.34%)</title><rect x="21.7499%" y="661" width="0.3447%" height="15" fill="rgb(230,178,19)" fg:x="25619" fg:w="406"/><text x="21.9999%" y="671.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (405 samples, 0.34%)</title><rect x="21.7508%" y="645" width="0.3438%" height="15" fill="rgb(210,190,27)" fg:x="25620" fg:w="405"/><text x="22.0008%" y="655.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (405 samples, 0.34%)</title><rect x="21.7508%" y="629" width="0.3438%" height="15" fill="rgb(222,107,31)" fg:x="25620" fg:w="405"/><text x="22.0008%" y="639.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (405 samples, 0.34%)</title><rect x="21.7508%" y="613" width="0.3438%" height="15" fill="rgb(216,127,34)" fg:x="25620" fg:w="405"/><text x="22.0008%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (276 samples, 0.23%)</title><rect x="21.8603%" y="597" width="0.2343%" height="15" fill="rgb(234,116,52)" fg:x="25749" fg:w="276"/><text x="22.1103%" y="607.50"></text></g><g><title>alloc::alloc::exchange_malloc (188 samples, 0.16%)</title><rect x="21.9350%" y="581" width="0.1596%" height="15" fill="rgb(222,124,15)" fg:x="25837" fg:w="188"/><text x="22.1850%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (188 samples, 0.16%)</title><rect x="21.9350%" y="565" width="0.1596%" height="15" fill="rgb(231,179,28)" fg:x="25837" fg:w="188"/><text x="22.1850%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (188 samples, 0.16%)</title><rect x="21.9350%" y="549" width="0.1596%" height="15" fill="rgb(226,93,45)" fg:x="25837" fg:w="188"/><text x="22.1850%" y="559.50"></text></g><g><title>alloc::alloc::alloc (187 samples, 0.16%)</title><rect x="21.9358%" y="533" width="0.1588%" height="15" fill="rgb(215,8,51)" fg:x="25838" fg:w="187"/><text x="22.1858%" y="543.50"></text></g><g><title>__rg_alloc (187 samples, 0.16%)</title><rect x="21.9358%" y="517" width="0.1588%" height="15" fill="rgb(223,106,5)" fg:x="25838" fg:w="187"/><text x="22.1858%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (187 samples, 0.16%)</title><rect x="21.9358%" y="501" width="0.1588%" height="15" fill="rgb(250,191,5)" fg:x="25838" fg:w="187"/><text x="22.1858%" y="511.50"></text></g><g><title>sn_rust_alloc (182 samples, 0.15%)</title><rect x="21.9401%" y="485" width="0.1545%" height="15" fill="rgb(242,132,44)" fg:x="25843" fg:w="182"/><text x="22.1901%" y="495.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (4,660 samples, 3.96%)</title><rect x="18.1503%" y="709" width="3.9562%" height="15" fill="rgb(251,152,29)" fg:x="21379" fg:w="4660"/><text x="18.4003%" y="719.50">trem..</text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_TO&lt;_ErasedPtr&gt;::on_event (724 samples, 0.61%)</title><rect x="21.4918%" y="693" width="0.6147%" height="15" fill="rgb(218,179,5)" fg:x="25315" fg:w="724"/><text x="21.7418%" y="703.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::_::&lt;impl tremor_runtime::connectors::sink::RawSink_trait::VTableInner_Ref&lt;_Self,_ErasedPtr&gt;&gt;::on_event (12 samples, 0.01%)</title><rect x="22.0963%" y="677" width="0.0102%" height="15" fill="rgb(227,67,19)" fg:x="26027" fg:w="12"/><text x="22.3463%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (15 samples, 0.01%)</title><rect x="22.2822%" y="677" width="0.0127%" height="15" fill="rgb(233,119,31)" fg:x="26246" fg:w="15"/><text x="22.5322%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (15 samples, 0.01%)</title><rect x="22.2822%" y="661" width="0.0127%" height="15" fill="rgb(241,120,22)" fg:x="26246" fg:w="15"/><text x="22.5322%" y="671.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (15 samples, 0.01%)</title><rect x="22.2822%" y="645" width="0.0127%" height="15" fill="rgb(224,102,30)" fg:x="26246" fg:w="15"/><text x="22.5322%" y="655.50"></text></g><g><title>sn_rust_dealloc (103 samples, 0.09%)</title><rect x="22.2992%" y="613" width="0.0874%" height="15" fill="rgb(210,164,37)" fg:x="26266" fg:w="103"/><text x="22.5492%" y="623.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,131 samples, 4.36%)</title><rect x="18.0339%" y="725" width="4.3561%" height="15" fill="rgb(226,191,16)" fg:x="21242" fg:w="5131"/><text x="18.2839%" y="735.50">&lt;core..</text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (334 samples, 0.28%)</title><rect x="22.1065%" y="709" width="0.2836%" height="15" fill="rgb(214,40,45)" fg:x="26039" fg:w="334"/><text x="22.3565%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (127 samples, 0.11%)</title><rect x="22.2822%" y="693" width="0.1078%" height="15" fill="rgb(244,29,26)" fg:x="26246" fg:w="127"/><text x="22.5322%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (112 samples, 0.10%)</title><rect x="22.2950%" y="677" width="0.0951%" height="15" fill="rgb(216,16,5)" fg:x="26261" fg:w="112"/><text x="22.5450%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (112 samples, 0.10%)</title><rect x="22.2950%" y="661" width="0.0951%" height="15" fill="rgb(249,76,35)" fg:x="26261" fg:w="112"/><text x="22.5450%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (112 samples, 0.10%)</title><rect x="22.2950%" y="645" width="0.0951%" height="15" fill="rgb(207,11,44)" fg:x="26261" fg:w="112"/><text x="22.5450%" y="655.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (112 samples, 0.10%)</title><rect x="22.2950%" y="629" width="0.0951%" height="15" fill="rgb(228,190,49)" fg:x="26261" fg:w="112"/><text x="22.5450%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (45 samples, 0.04%)</title><rect x="22.4130%" y="613" width="0.0382%" height="15" fill="rgb(214,173,12)" fg:x="26400" fg:w="45"/><text x="22.6630%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (34 samples, 0.03%)</title><rect x="22.4223%" y="597" width="0.0289%" height="15" fill="rgb(218,26,35)" fg:x="26411" fg:w="34"/><text x="22.6723%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (34 samples, 0.03%)</title><rect x="22.4223%" y="581" width="0.0289%" height="15" fill="rgb(220,200,19)" fg:x="26411" fg:w="34"/><text x="22.6723%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (27 samples, 0.02%)</title><rect x="22.4282%" y="565" width="0.0229%" height="15" fill="rgb(239,95,49)" fg:x="26418" fg:w="27"/><text x="22.6782%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (27 samples, 0.02%)</title><rect x="22.4282%" y="549" width="0.0229%" height="15" fill="rgb(235,85,53)" fg:x="26418" fg:w="27"/><text x="22.6782%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (27 samples, 0.02%)</title><rect x="22.4282%" y="533" width="0.0229%" height="15" fill="rgb(233,133,31)" fg:x="26418" fg:w="27"/><text x="22.6782%" y="543.50"></text></g><g><title>alloc::alloc::alloc (25 samples, 0.02%)</title><rect x="22.4299%" y="517" width="0.0212%" height="15" fill="rgb(218,25,20)" fg:x="26420" fg:w="25"/><text x="22.6799%" y="527.50"></text></g><g><title>__rg_alloc (25 samples, 0.02%)</title><rect x="22.4299%" y="501" width="0.0212%" height="15" fill="rgb(252,210,38)" fg:x="26420" fg:w="25"/><text x="22.6799%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (25 samples, 0.02%)</title><rect x="22.4299%" y="485" width="0.0212%" height="15" fill="rgb(242,134,21)" fg:x="26420" fg:w="25"/><text x="22.6799%" y="495.50"></text></g><g><title>sn_rust_alloc (24 samples, 0.02%)</title><rect x="22.4308%" y="469" width="0.0204%" height="15" fill="rgb(213,28,48)" fg:x="26421" fg:w="24"/><text x="22.6808%" y="479.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (65 samples, 0.06%)</title><rect x="22.4028%" y="693" width="0.0552%" height="15" fill="rgb(250,196,2)" fg:x="26388" fg:w="65"/><text x="22.6528%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (58 samples, 0.05%)</title><rect x="22.4087%" y="677" width="0.0492%" height="15" fill="rgb(227,5,17)" fg:x="26395" fg:w="58"/><text x="22.6587%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (57 samples, 0.05%)</title><rect x="22.4096%" y="661" width="0.0484%" height="15" fill="rgb(221,226,24)" fg:x="26396" fg:w="57"/><text x="22.6596%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (53 samples, 0.04%)</title><rect x="22.4130%" y="645" width="0.0450%" height="15" fill="rgb(211,5,48)" fg:x="26400" fg:w="53"/><text x="22.6630%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (53 samples, 0.04%)</title><rect x="22.4130%" y="629" width="0.0450%" height="15" fill="rgb(219,150,6)" fg:x="26400" fg:w="53"/><text x="22.6630%" y="639.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (36 samples, 0.03%)</title><rect x="22.6685%" y="613" width="0.0306%" height="15" fill="rgb(251,46,16)" fg:x="26701" fg:w="36"/><text x="22.9185%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (36 samples, 0.03%)</title><rect x="22.6685%" y="597" width="0.0306%" height="15" fill="rgb(220,204,40)" fg:x="26701" fg:w="36"/><text x="22.9185%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (26 samples, 0.02%)</title><rect x="22.6770%" y="581" width="0.0221%" height="15" fill="rgb(211,85,2)" fg:x="26711" fg:w="26"/><text x="22.9270%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (20 samples, 0.02%)</title><rect x="22.6821%" y="565" width="0.0170%" height="15" fill="rgb(229,17,7)" fg:x="26717" fg:w="20"/><text x="22.9321%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (20 samples, 0.02%)</title><rect x="22.6821%" y="549" width="0.0170%" height="15" fill="rgb(239,72,28)" fg:x="26717" fg:w="20"/><text x="22.9321%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (20 samples, 0.02%)</title><rect x="22.6821%" y="533" width="0.0170%" height="15" fill="rgb(230,47,54)" fg:x="26717" fg:w="20"/><text x="22.9321%" y="543.50"></text></g><g><title>alloc::alloc::alloc (20 samples, 0.02%)</title><rect x="22.6821%" y="517" width="0.0170%" height="15" fill="rgb(214,50,8)" fg:x="26717" fg:w="20"/><text x="22.9321%" y="527.50"></text></g><g><title>__rg_alloc (20 samples, 0.02%)</title><rect x="22.6821%" y="501" width="0.0170%" height="15" fill="rgb(216,198,43)" fg:x="26717" fg:w="20"/><text x="22.9321%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (20 samples, 0.02%)</title><rect x="22.6821%" y="485" width="0.0170%" height="15" fill="rgb(234,20,35)" fg:x="26717" fg:w="20"/><text x="22.9321%" y="495.50"></text></g><g><title>sn_rust_alloc (15 samples, 0.01%)</title><rect x="22.6863%" y="469" width="0.0127%" height="15" fill="rgb(254,45,19)" fg:x="26722" fg:w="15"/><text x="22.9363%" y="479.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (57 samples, 0.05%)</title><rect x="22.6558%" y="661" width="0.0484%" height="15" fill="rgb(219,14,44)" fg:x="26686" fg:w="57"/><text x="22.9058%" y="671.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (55 samples, 0.05%)</title><rect x="22.6575%" y="645" width="0.0467%" height="15" fill="rgb(217,220,26)" fg:x="26688" fg:w="55"/><text x="22.9075%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (55 samples, 0.05%)</title><rect x="22.6575%" y="629" width="0.0467%" height="15" fill="rgb(213,158,28)" fg:x="26688" fg:w="55"/><text x="22.9075%" y="639.50"></text></g><g><title>abi_stable::erased_types::iterator::next (19 samples, 0.02%)</title><rect x="22.7169%" y="613" width="0.0161%" height="15" fill="rgb(252,51,52)" fg:x="26758" fg:w="19"/><text x="22.9669%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (14 samples, 0.01%)</title><rect x="22.7211%" y="597" width="0.0119%" height="15" fill="rgb(246,89,16)" fg:x="26763" fg:w="14"/><text x="22.9711%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.03%)</title><rect x="22.7118%" y="645" width="0.0297%" height="15" fill="rgb(216,158,49)" fg:x="26752" fg:w="35"/><text x="22.9618%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (35 samples, 0.03%)</title><rect x="22.7118%" y="629" width="0.0297%" height="15" fill="rgb(236,107,19)" fg:x="26752" fg:w="35"/><text x="22.9618%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (18 samples, 0.02%)</title><rect x="22.7415%" y="645" width="0.0153%" height="15" fill="rgb(228,185,30)" fg:x="26787" fg:w="18"/><text x="22.9915%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (18 samples, 0.02%)</title><rect x="22.7415%" y="629" width="0.0153%" height="15" fill="rgb(246,134,8)" fg:x="26787" fg:w="18"/><text x="22.9915%" y="639.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (12 samples, 0.01%)</title><rect x="22.7568%" y="645" width="0.0102%" height="15" fill="rgb(214,143,50)" fg:x="26805" fg:w="12"/><text x="23.0068%" y="655.50"></text></g><g><title>sn_rust_dealloc (16 samples, 0.01%)</title><rect x="22.7840%" y="533" width="0.0136%" height="15" fill="rgb(228,75,8)" fg:x="26837" fg:w="16"/><text x="23.0340%" y="543.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (483 samples, 0.41%)</title><rect x="22.3900%" y="725" width="0.4101%" height="15" fill="rgb(207,175,4)" fg:x="26373" fg:w="483"/><text x="22.6400%" y="735.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (468 samples, 0.40%)</title><rect x="22.4028%" y="709" width="0.3973%" height="15" fill="rgb(205,108,24)" fg:x="26388" fg:w="468"/><text x="22.6528%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (403 samples, 0.34%)</title><rect x="22.4580%" y="693" width="0.3421%" height="15" fill="rgb(244,120,49)" fg:x="26453" fg:w="403"/><text x="22.7080%" y="703.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (177 samples, 0.15%)</title><rect x="22.6498%" y="677" width="0.1503%" height="15" fill="rgb(223,47,38)" fg:x="26679" fg:w="177"/><text x="22.8998%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (113 samples, 0.10%)</title><rect x="22.7042%" y="661" width="0.0959%" height="15" fill="rgb(229,179,11)" fg:x="26743" fg:w="113"/><text x="22.9542%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (39 samples, 0.03%)</title><rect x="22.7670%" y="645" width="0.0331%" height="15" fill="rgb(231,122,1)" fg:x="26817" fg:w="39"/><text x="23.0170%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (39 samples, 0.03%)</title><rect x="22.7670%" y="629" width="0.0331%" height="15" fill="rgb(245,119,9)" fg:x="26817" fg:w="39"/><text x="23.0170%" y="639.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (39 samples, 0.03%)</title><rect x="22.7670%" y="613" width="0.0331%" height="15" fill="rgb(241,163,25)" fg:x="26817" fg:w="39"/><text x="23.0170%" y="623.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (37 samples, 0.03%)</title><rect x="22.7687%" y="597" width="0.0314%" height="15" fill="rgb(217,214,3)" fg:x="26819" fg:w="37"/><text x="23.0187%" y="607.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (37 samples, 0.03%)</title><rect x="22.7687%" y="581" width="0.0314%" height="15" fill="rgb(240,86,28)" fg:x="26819" fg:w="37"/><text x="23.0187%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (37 samples, 0.03%)</title><rect x="22.7687%" y="565" width="0.0314%" height="15" fill="rgb(215,47,9)" fg:x="26819" fg:w="37"/><text x="23.0187%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (37 samples, 0.03%)</title><rect x="22.7687%" y="549" width="0.0314%" height="15" fill="rgb(252,25,45)" fg:x="26819" fg:w="37"/><text x="23.0187%" y="559.50"></text></g><g><title>&lt;tremor_pipeline::EventId as core::clone::Clone&gt;::clone (50 samples, 0.04%)</title><rect x="22.8077%" y="709" width="0.0424%" height="15" fill="rgb(251,164,9)" fg:x="26865" fg:w="50"/><text x="23.0577%" y="719.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (35 samples, 0.03%)</title><rect x="22.8205%" y="693" width="0.0297%" height="15" fill="rgb(233,194,0)" fg:x="26880" fg:w="35"/><text x="23.0705%" y="703.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (49 samples, 0.04%)</title><rect x="22.9062%" y="597" width="0.0416%" height="15" fill="rgb(249,111,24)" fg:x="26981" fg:w="49"/><text x="23.1562%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (41 samples, 0.03%)</title><rect x="22.9130%" y="581" width="0.0348%" height="15" fill="rgb(250,223,3)" fg:x="26989" fg:w="41"/><text x="23.1630%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (41 samples, 0.03%)</title><rect x="22.9130%" y="565" width="0.0348%" height="15" fill="rgb(236,178,37)" fg:x="26989" fg:w="41"/><text x="23.1630%" y="575.50"></text></g><g><title>alloc::alloc::exchange_malloc (32 samples, 0.03%)</title><rect x="22.9206%" y="549" width="0.0272%" height="15" fill="rgb(241,158,50)" fg:x="26998" fg:w="32"/><text x="23.1706%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (32 samples, 0.03%)</title><rect x="22.9206%" y="533" width="0.0272%" height="15" fill="rgb(213,121,41)" fg:x="26998" fg:w="32"/><text x="23.1706%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (32 samples, 0.03%)</title><rect x="22.9206%" y="517" width="0.0272%" height="15" fill="rgb(240,92,3)" fg:x="26998" fg:w="32"/><text x="23.1706%" y="527.50"></text></g><g><title>alloc::alloc::alloc (32 samples, 0.03%)</title><rect x="22.9206%" y="501" width="0.0272%" height="15" fill="rgb(205,123,3)" fg:x="26998" fg:w="32"/><text x="23.1706%" y="511.50"></text></g><g><title>__rg_alloc (32 samples, 0.03%)</title><rect x="22.9206%" y="485" width="0.0272%" height="15" fill="rgb(205,97,47)" fg:x="26998" fg:w="32"/><text x="23.1706%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (32 samples, 0.03%)</title><rect x="22.9206%" y="469" width="0.0272%" height="15" fill="rgb(247,152,14)" fg:x="26998" fg:w="32"/><text x="23.1706%" y="479.50"></text></g><g><title>sn_rust_alloc (28 samples, 0.02%)</title><rect x="22.9240%" y="453" width="0.0238%" height="15" fill="rgb(248,195,53)" fg:x="27002" fg:w="28"/><text x="23.1740%" y="463.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (58 samples, 0.05%)</title><rect x="23.2925%" y="533" width="0.0492%" height="15" fill="rgb(226,201,16)" fg:x="27436" fg:w="58"/><text x="23.5425%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (58 samples, 0.05%)</title><rect x="23.2925%" y="517" width="0.0492%" height="15" fill="rgb(205,98,0)" fg:x="27436" fg:w="58"/><text x="23.5425%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (80 samples, 0.07%)</title><rect x="23.2840%" y="549" width="0.0679%" height="15" fill="rgb(214,191,48)" fg:x="27426" fg:w="80"/><text x="23.5340%" y="559.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_full (12 samples, 0.01%)</title><rect x="23.3417%" y="533" width="0.0102%" height="15" fill="rgb(237,112,39)" fg:x="27494" fg:w="12"/><text x="23.5917%" y="543.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (535 samples, 0.45%)</title><rect x="22.9020%" y="677" width="0.4542%" height="15" fill="rgb(247,203,27)" fg:x="26976" fg:w="535"/><text x="23.1520%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (532 samples, 0.45%)</title><rect x="22.9045%" y="661" width="0.4517%" height="15" fill="rgb(235,124,28)" fg:x="26979" fg:w="532"/><text x="23.1545%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (530 samples, 0.45%)</title><rect x="22.9062%" y="645" width="0.4500%" height="15" fill="rgb(208,207,46)" fg:x="26981" fg:w="530"/><text x="23.1562%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (530 samples, 0.45%)</title><rect x="22.9062%" y="629" width="0.4500%" height="15" fill="rgb(234,176,4)" fg:x="26981" fg:w="530"/><text x="23.1562%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (530 samples, 0.45%)</title><rect x="22.9062%" y="613" width="0.4500%" height="15" fill="rgb(230,133,28)" fg:x="26981" fg:w="530"/><text x="23.1562%" y="623.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::iter (481 samples, 0.41%)</title><rect x="22.9478%" y="597" width="0.4084%" height="15" fill="rgb(211,137,40)" fg:x="27030" fg:w="481"/><text x="23.1978%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (97 samples, 0.08%)</title><rect x="23.2738%" y="581" width="0.0824%" height="15" fill="rgb(254,35,13)" fg:x="27414" fg:w="97"/><text x="23.5238%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (97 samples, 0.08%)</title><rect x="23.2738%" y="565" width="0.0824%" height="15" fill="rgb(225,49,51)" fg:x="27414" fg:w="97"/><text x="23.5238%" y="575.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (39 samples, 0.03%)</title><rect x="23.4708%" y="597" width="0.0331%" height="15" fill="rgb(251,10,15)" fg:x="27646" fg:w="39"/><text x="23.7208%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (39 samples, 0.03%)</title><rect x="23.4708%" y="581" width="0.0331%" height="15" fill="rgb(228,207,15)" fg:x="27646" fg:w="39"/><text x="23.7208%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (31 samples, 0.03%)</title><rect x="23.4776%" y="565" width="0.0263%" height="15" fill="rgb(241,99,19)" fg:x="27654" fg:w="31"/><text x="23.7276%" y="575.50"></text></g><g><title>alloc::alloc::exchange_malloc (23 samples, 0.02%)</title><rect x="23.4844%" y="549" width="0.0195%" height="15" fill="rgb(207,104,49)" fg:x="27662" fg:w="23"/><text x="23.7344%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (23 samples, 0.02%)</title><rect x="23.4844%" y="533" width="0.0195%" height="15" fill="rgb(234,99,18)" fg:x="27662" fg:w="23"/><text x="23.7344%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (23 samples, 0.02%)</title><rect x="23.4844%" y="517" width="0.0195%" height="15" fill="rgb(213,191,49)" fg:x="27662" fg:w="23"/><text x="23.7344%" y="527.50"></text></g><g><title>alloc::alloc::alloc (23 samples, 0.02%)</title><rect x="23.4844%" y="501" width="0.0195%" height="15" fill="rgb(210,226,19)" fg:x="27662" fg:w="23"/><text x="23.7344%" y="511.50"></text></g><g><title>__rg_alloc (23 samples, 0.02%)</title><rect x="23.4844%" y="485" width="0.0195%" height="15" fill="rgb(229,97,18)" fg:x="27662" fg:w="23"/><text x="23.7344%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (23 samples, 0.02%)</title><rect x="23.4844%" y="469" width="0.0195%" height="15" fill="rgb(211,167,15)" fg:x="27662" fg:w="23"/><text x="23.7344%" y="479.50"></text></g><g><title>sn_rust_alloc (20 samples, 0.02%)</title><rect x="23.4869%" y="453" width="0.0170%" height="15" fill="rgb(210,169,34)" fg:x="27665" fg:w="20"/><text x="23.7369%" y="463.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (63 samples, 0.05%)</title><rect x="23.4580%" y="645" width="0.0535%" height="15" fill="rgb(241,121,31)" fg:x="27631" fg:w="63"/><text x="23.7080%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (61 samples, 0.05%)</title><rect x="23.4597%" y="629" width="0.0518%" height="15" fill="rgb(232,40,11)" fg:x="27633" fg:w="61"/><text x="23.7097%" y="639.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (61 samples, 0.05%)</title><rect x="23.4597%" y="613" width="0.0518%" height="15" fill="rgb(205,86,26)" fg:x="27633" fg:w="61"/><text x="23.7097%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::next (15 samples, 0.01%)</title><rect x="23.5294%" y="597" width="0.0127%" height="15" fill="rgb(231,126,28)" fg:x="27715" fg:w="15"/><text x="23.7794%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.02%)</title><rect x="23.5251%" y="629" width="0.0212%" height="15" fill="rgb(219,221,18)" fg:x="27710" fg:w="25"/><text x="23.7751%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (25 samples, 0.02%)</title><rect x="23.5251%" y="613" width="0.0212%" height="15" fill="rgb(211,40,0)" fg:x="27710" fg:w="25"/><text x="23.7751%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint (16 samples, 0.01%)</title><rect x="23.5591%" y="597" width="0.0136%" height="15" fill="rgb(239,85,43)" fg:x="27750" fg:w="16"/><text x="23.8091%" y="607.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint::{{closure}} (13 samples, 0.01%)</title><rect x="23.5616%" y="581" width="0.0110%" height="15" fill="rgb(231,55,21)" fg:x="27753" fg:w="13"/><text x="23.8116%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (43 samples, 0.04%)</title><rect x="23.5463%" y="629" width="0.0365%" height="15" fill="rgb(225,184,43)" fg:x="27735" fg:w="43"/><text x="23.7963%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (43 samples, 0.04%)</title><rect x="23.5463%" y="613" width="0.0365%" height="15" fill="rgb(251,158,41)" fg:x="27735" fg:w="43"/><text x="23.7963%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (12 samples, 0.01%)</title><rect x="23.5727%" y="597" width="0.0102%" height="15" fill="rgb(234,159,37)" fg:x="27766" fg:w="12"/><text x="23.8227%" y="607.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (12 samples, 0.01%)</title><rect x="23.5727%" y="581" width="0.0102%" height="15" fill="rgb(216,204,22)" fg:x="27766" fg:w="12"/><text x="23.8227%" y="591.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (17 samples, 0.01%)</title><rect x="23.5828%" y="629" width="0.0144%" height="15" fill="rgb(214,17,3)" fg:x="27778" fg:w="17"/><text x="23.8328%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (17 samples, 0.01%)</title><rect x="23.5828%" y="613" width="0.0144%" height="15" fill="rgb(212,111,17)" fg:x="27778" fg:w="17"/><text x="23.8328%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (15 samples, 0.01%)</title><rect x="23.5845%" y="597" width="0.0127%" height="15" fill="rgb(221,157,24)" fg:x="27780" fg:w="15"/><text x="23.8345%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (15 samples, 0.01%)</title><rect x="23.5845%" y="581" width="0.0127%" height="15" fill="rgb(252,16,13)" fg:x="27780" fg:w="15"/><text x="23.8345%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (15 samples, 0.01%)</title><rect x="23.5845%" y="565" width="0.0127%" height="15" fill="rgb(221,62,2)" fg:x="27780" fg:w="15"/><text x="23.8345%" y="575.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (15 samples, 0.01%)</title><rect x="23.5845%" y="549" width="0.0127%" height="15" fill="rgb(247,87,22)" fg:x="27780" fg:w="15"/><text x="23.8345%" y="559.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::ContraflowData as core::convert::From&lt;&amp;tremor_pipeline::event::Event&gt;&gt;::from (1,056 samples, 0.90%)</title><rect x="22.8001%" y="725" width="0.8965%" height="15" fill="rgb(215,73,9)" fg:x="26856" fg:w="1056"/><text x="23.0501%" y="735.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (997 samples, 0.85%)</title><rect x="22.8502%" y="709" width="0.8464%" height="15" fill="rgb(207,175,33)" fg:x="26915" fg:w="997"/><text x="23.1002%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (940 samples, 0.80%)</title><rect x="22.8986%" y="693" width="0.7980%" height="15" fill="rgb(243,129,54)" fg:x="26972" fg:w="940"/><text x="23.1486%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (401 samples, 0.34%)</title><rect x="23.3562%" y="677" width="0.3404%" height="15" fill="rgb(227,119,45)" fg:x="27511" fg:w="401"/><text x="23.6062%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (285 samples, 0.24%)</title><rect x="23.4547%" y="661" width="0.2420%" height="15" fill="rgb(205,109,36)" fg:x="27627" fg:w="285"/><text x="23.7047%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (218 samples, 0.19%)</title><rect x="23.5115%" y="645" width="0.1851%" height="15" fill="rgb(205,6,39)" fg:x="27694" fg:w="218"/><text x="23.7615%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (117 samples, 0.10%)</title><rect x="23.5973%" y="629" width="0.0993%" height="15" fill="rgb(221,32,16)" fg:x="27795" fg:w="117"/><text x="23.8473%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (117 samples, 0.10%)</title><rect x="23.5973%" y="613" width="0.0993%" height="15" fill="rgb(228,144,50)" fg:x="27795" fg:w="117"/><text x="23.8473%" y="623.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (117 samples, 0.10%)</title><rect x="23.5973%" y="597" width="0.0993%" height="15" fill="rgb(229,201,53)" fg:x="27795" fg:w="117"/><text x="23.8473%" y="607.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (113 samples, 0.10%)</title><rect x="23.6007%" y="581" width="0.0959%" height="15" fill="rgb(249,153,27)" fg:x="27799" fg:w="113"/><text x="23.8507%" y="591.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (113 samples, 0.10%)</title><rect x="23.6007%" y="565" width="0.0959%" height="15" fill="rgb(227,106,25)" fg:x="27799" fg:w="113"/><text x="23.8507%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (113 samples, 0.10%)</title><rect x="23.6007%" y="549" width="0.0959%" height="15" fill="rgb(230,65,29)" fg:x="27799" fg:w="113"/><text x="23.8507%" y="559.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (113 samples, 0.10%)</title><rect x="23.6007%" y="533" width="0.0959%" height="15" fill="rgb(221,57,46)" fg:x="27799" fg:w="113"/><text x="23.8507%" y="543.50"></text></g><g><title>sn_rust_dealloc (102 samples, 0.09%)</title><rect x="23.6100%" y="517" width="0.0866%" height="15" fill="rgb(229,161,17)" fg:x="27810" fg:w="102"/><text x="23.8600%" y="527.50"></text></g><g><title>[libc-2.31.so] (859 samples, 0.73%)</title><rect x="23.6966%" y="725" width="0.7293%" height="15" fill="rgb(222,213,11)" fg:x="27912" fg:w="859"/><text x="23.9466%" y="735.50"></text></g><g><title>sn_rust_dealloc (80 samples, 0.07%)</title><rect x="24.4344%" y="565" width="0.0679%" height="15" fill="rgb(235,35,13)" fg:x="28781" fg:w="80"/><text x="24.6844%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (92 samples, 0.08%)</title><rect x="24.4276%" y="725" width="0.0781%" height="15" fill="rgb(233,158,34)" fg:x="28773" fg:w="92"/><text x="24.6776%" y="735.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (92 samples, 0.08%)</title><rect x="24.4276%" y="709" width="0.0781%" height="15" fill="rgb(215,151,48)" fg:x="28773" fg:w="92"/><text x="24.6776%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (87 samples, 0.07%)</title><rect x="24.4318%" y="693" width="0.0739%" height="15" fill="rgb(229,84,14)" fg:x="28778" fg:w="87"/><text x="24.6818%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (87 samples, 0.07%)</title><rect x="24.4318%" y="677" width="0.0739%" height="15" fill="rgb(229,68,14)" fg:x="28778" fg:w="87"/><text x="24.6818%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (87 samples, 0.07%)</title><rect x="24.4318%" y="661" width="0.0739%" height="15" fill="rgb(243,106,26)" fg:x="28778" fg:w="87"/><text x="24.6818%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (87 samples, 0.07%)</title><rect x="24.4318%" y="645" width="0.0739%" height="15" fill="rgb(206,45,38)" fg:x="28778" fg:w="87"/><text x="24.6818%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (87 samples, 0.07%)</title><rect x="24.4318%" y="629" width="0.0739%" height="15" fill="rgb(226,6,15)" fg:x="28778" fg:w="87"/><text x="24.6818%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (87 samples, 0.07%)</title><rect x="24.4318%" y="613" width="0.0739%" height="15" fill="rgb(232,22,54)" fg:x="28778" fg:w="87"/><text x="24.6818%" y="623.50"></text></g><g><title>__rg_dealloc (87 samples, 0.07%)</title><rect x="24.4318%" y="597" width="0.0739%" height="15" fill="rgb(229,222,32)" fg:x="28778" fg:w="87"/><text x="24.6818%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (87 samples, 0.07%)</title><rect x="24.4318%" y="581" width="0.0739%" height="15" fill="rgb(228,62,29)" fg:x="28778" fg:w="87"/><text x="24.6818%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt;&gt; (44 samples, 0.04%)</title><rect x="24.5057%" y="725" width="0.0374%" height="15" fill="rgb(251,103,34)" fg:x="28865" fg:w="44"/><text x="24.7557%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt; (44 samples, 0.04%)</title><rect x="24.5057%" y="709" width="0.0374%" height="15" fill="rgb(233,12,30)" fg:x="28865" fg:w="44"/><text x="24.7557%" y="719.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (30 samples, 0.03%)</title><rect x="24.5685%" y="709" width="0.0255%" height="15" fill="rgb(238,52,0)" fg:x="28939" fg:w="30"/><text x="24.8185%" y="719.50"></text></g><g><title>core::time::Duration::as_nanos (39 samples, 0.03%)</title><rect x="24.5940%" y="709" width="0.0331%" height="15" fill="rgb(223,98,5)" fg:x="28969" fg:w="39"/><text x="24.8440%" y="719.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (114 samples, 0.10%)</title><rect x="24.6271%" y="693" width="0.0968%" height="15" fill="rgb(228,75,37)" fg:x="29008" fg:w="114"/><text x="24.8771%" y="703.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (50 samples, 0.04%)</title><rect x="24.7765%" y="661" width="0.0424%" height="15" fill="rgb(205,115,49)" fg:x="29184" fg:w="50"/><text x="25.0265%" y="671.50"></text></g><g><title>core::cmp::PartialOrd::ge (50 samples, 0.04%)</title><rect x="24.7765%" y="645" width="0.0424%" height="15" fill="rgb(250,154,43)" fg:x="29184" fg:w="50"/><text x="25.0265%" y="655.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (49 samples, 0.04%)</title><rect x="24.7774%" y="629" width="0.0416%" height="15" fill="rgb(226,43,29)" fg:x="29185" fg:w="49"/><text x="25.0274%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (23 samples, 0.02%)</title><rect x="24.7994%" y="613" width="0.0195%" height="15" fill="rgb(249,228,39)" fg:x="29211" fg:w="23"/><text x="25.0494%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (23 samples, 0.02%)</title><rect x="24.7994%" y="597" width="0.0195%" height="15" fill="rgb(216,79,43)" fg:x="29211" fg:w="23"/><text x="25.0494%" y="607.50"></text></g><g><title>std::time::SystemTime::duration_since (252 samples, 0.21%)</title><rect x="24.6271%" y="709" width="0.2139%" height="15" fill="rgb(228,95,12)" fg:x="29008" fg:w="252"/><text x="24.8771%" y="719.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (138 samples, 0.12%)</title><rect x="24.7239%" y="693" width="0.1172%" height="15" fill="rgb(249,221,15)" fg:x="29122" fg:w="138"/><text x="24.9739%" y="703.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (138 samples, 0.12%)</title><rect x="24.7239%" y="677" width="0.1172%" height="15" fill="rgb(233,34,13)" fg:x="29122" fg:w="138"/><text x="24.9739%" y="687.50"></text></g><g><title>core::time::Duration::new (26 samples, 0.02%)</title><rect x="24.8190%" y="661" width="0.0221%" height="15" fill="rgb(214,103,39)" fg:x="29234" fg:w="26"/><text x="25.0690%" y="671.50"></text></g><g><title>tremor_common::time::nanotime (956 samples, 0.81%)</title><rect x="24.5430%" y="725" width="0.8116%" height="15" fill="rgb(251,126,39)" fg:x="28909" fg:w="956"/><text x="24.7930%" y="735.50"></text></g><g><title>std::time::SystemTime::now (605 samples, 0.51%)</title><rect x="24.8410%" y="709" width="0.5136%" height="15" fill="rgb(214,216,36)" fg:x="29260" fg:w="605"/><text x="25.0910%" y="719.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (605 samples, 0.51%)</title><rect x="24.8410%" y="693" width="0.5136%" height="15" fill="rgb(220,221,8)" fg:x="29260" fg:w="605"/><text x="25.0910%" y="703.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (605 samples, 0.51%)</title><rect x="24.8410%" y="677" width="0.5136%" height="15" fill="rgb(240,216,3)" fg:x="29260" fg:w="605"/><text x="25.0910%" y="687.50"></text></g><g><title>__clock_gettime (479 samples, 0.41%)</title><rect x="24.9480%" y="661" width="0.4067%" height="15" fill="rgb(232,218,17)" fg:x="29386" fg:w="479"/><text x="25.1980%" y="671.50"></text></g><g><title>__vdso_clock_gettime (425 samples, 0.36%)</title><rect x="24.9938%" y="645" width="0.3608%" height="15" fill="rgb(229,163,45)" fg:x="29440" fg:w="425"/><text x="25.2438%" y="655.50"></text></g><g><title>[[vdso]] (384 samples, 0.33%)</title><rect x="25.0287%" y="629" width="0.3260%" height="15" fill="rgb(231,110,42)" fg:x="29481" fg:w="384"/><text x="25.2787%" y="639.50"></text></g><g><title>abi_stable::erased_types::iterator::next (35 samples, 0.03%)</title><rect x="25.3699%" y="613" width="0.0297%" height="15" fill="rgb(208,170,48)" fg:x="29883" fg:w="35"/><text x="25.6199%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (22 samples, 0.02%)</title><rect x="25.3810%" y="597" width="0.0187%" height="15" fill="rgb(239,116,25)" fg:x="29896" fg:w="22"/><text x="25.6310%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.02%)</title><rect x="25.3810%" y="581" width="0.0187%" height="15" fill="rgb(219,200,50)" fg:x="29896" fg:w="22"/><text x="25.6310%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 0.04%)</title><rect x="25.3631%" y="677" width="0.0391%" height="15" fill="rgb(245,200,0)" fg:x="29875" fg:w="46"/><text x="25.6131%" y="687.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 0.04%)</title><rect x="25.3631%" y="661" width="0.0391%" height="15" fill="rgb(245,119,33)" fg:x="29875" fg:w="46"/><text x="25.6131%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 0.04%)</title><rect x="25.3631%" y="645" width="0.0391%" height="15" fill="rgb(231,125,12)" fg:x="29875" fg:w="46"/><text x="25.6131%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (46 samples, 0.04%)</title><rect x="25.3631%" y="629" width="0.0391%" height="15" fill="rgb(216,96,41)" fg:x="29875" fg:w="46"/><text x="25.6131%" y="639.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint (15 samples, 0.01%)</title><rect x="25.4149%" y="613" width="0.0127%" height="15" fill="rgb(248,43,45)" fg:x="29936" fg:w="15"/><text x="25.6649%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint::{{closure}} (12 samples, 0.01%)</title><rect x="25.4175%" y="597" width="0.0102%" height="15" fill="rgb(217,222,7)" fg:x="29939" fg:w="12"/><text x="25.6675%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (49 samples, 0.04%)</title><rect x="25.4022%" y="677" width="0.0416%" height="15" fill="rgb(233,28,6)" fg:x="29921" fg:w="49"/><text x="25.6522%" y="687.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::size_hint (49 samples, 0.04%)</title><rect x="25.4022%" y="661" width="0.0416%" height="15" fill="rgb(231,218,15)" fg:x="29921" fg:w="49"/><text x="25.6522%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (49 samples, 0.04%)</title><rect x="25.4022%" y="645" width="0.0416%" height="15" fill="rgb(226,171,48)" fg:x="29921" fg:w="49"/><text x="25.6522%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (49 samples, 0.04%)</title><rect x="25.4022%" y="629" width="0.0416%" height="15" fill="rgb(235,201,9)" fg:x="29921" fg:w="49"/><text x="25.6522%" y="639.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (19 samples, 0.02%)</title><rect x="25.4277%" y="613" width="0.0161%" height="15" fill="rgb(217,80,15)" fg:x="29951" fg:w="19"/><text x="25.6777%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (19 samples, 0.02%)</title><rect x="25.4277%" y="597" width="0.0161%" height="15" fill="rgb(219,152,8)" fg:x="29951" fg:w="19"/><text x="25.6777%" y="607.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;abi_stable::std_types::tuple::Tuple2&lt;K,V&gt;&gt;&gt;::extend (141 samples, 0.12%)</title><rect x="25.3547%" y="709" width="0.1197%" height="15" fill="rgb(243,107,38)" fg:x="29865" fg:w="141"/><text x="25.6047%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (139 samples, 0.12%)</title><rect x="25.3564%" y="693" width="0.1180%" height="15" fill="rgb(231,17,5)" fg:x="29867" fg:w="139"/><text x="25.6064%" y="703.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (36 samples, 0.03%)</title><rect x="25.4438%" y="677" width="0.0306%" height="15" fill="rgb(209,25,54)" fg:x="29970" fg:w="36"/><text x="25.6938%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (30 samples, 0.03%)</title><rect x="25.4489%" y="661" width="0.0255%" height="15" fill="rgb(219,0,2)" fg:x="29976" fg:w="30"/><text x="25.6989%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (29 samples, 0.02%)</title><rect x="25.4497%" y="645" width="0.0246%" height="15" fill="rgb(246,9,5)" fg:x="29977" fg:w="29"/><text x="25.6997%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (27 samples, 0.02%)</title><rect x="25.4514%" y="629" width="0.0229%" height="15" fill="rgb(226,159,4)" fg:x="29979" fg:w="27"/><text x="25.7014%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (27 samples, 0.02%)</title><rect x="25.4514%" y="613" width="0.0229%" height="15" fill="rgb(219,175,34)" fg:x="29979" fg:w="27"/><text x="25.7014%" y="623.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (27 samples, 0.02%)</title><rect x="25.4514%" y="597" width="0.0229%" height="15" fill="rgb(236,10,46)" fg:x="29979" fg:w="27"/><text x="25.7014%" y="607.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (152 samples, 0.13%)</title><rect x="25.4947%" y="629" width="0.1290%" height="15" fill="rgb(240,211,16)" fg:x="30030" fg:w="152"/><text x="25.7447%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (152 samples, 0.13%)</title><rect x="25.4947%" y="613" width="0.1290%" height="15" fill="rgb(205,3,43)" fg:x="30030" fg:w="152"/><text x="25.7447%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (136 samples, 0.12%)</title><rect x="25.5083%" y="597" width="0.1155%" height="15" fill="rgb(245,7,22)" fg:x="30046" fg:w="136"/><text x="25.7583%" y="607.50"></text></g><g><title>alloc::alloc::exchange_malloc (122 samples, 0.10%)</title><rect x="25.5202%" y="581" width="0.1036%" height="15" fill="rgb(239,132,32)" fg:x="30060" fg:w="122"/><text x="25.7702%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (122 samples, 0.10%)</title><rect x="25.5202%" y="565" width="0.1036%" height="15" fill="rgb(228,202,34)" fg:x="30060" fg:w="122"/><text x="25.7702%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (122 samples, 0.10%)</title><rect x="25.5202%" y="549" width="0.1036%" height="15" fill="rgb(254,200,22)" fg:x="30060" fg:w="122"/><text x="25.7702%" y="559.50"></text></g><g><title>alloc::alloc::alloc (120 samples, 0.10%)</title><rect x="25.5219%" y="533" width="0.1019%" height="15" fill="rgb(219,10,39)" fg:x="30062" fg:w="120"/><text x="25.7719%" y="543.50"></text></g><g><title>__rg_alloc (120 samples, 0.10%)</title><rect x="25.5219%" y="517" width="0.1019%" height="15" fill="rgb(226,210,39)" fg:x="30062" fg:w="120"/><text x="25.7719%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (120 samples, 0.10%)</title><rect x="25.5219%" y="501" width="0.1019%" height="15" fill="rgb(208,219,16)" fg:x="30062" fg:w="120"/><text x="25.7719%" y="511.50"></text></g><g><title>sn_rust_alloc (115 samples, 0.10%)</title><rect x="25.5262%" y="485" width="0.0976%" height="15" fill="rgb(216,158,51)" fg:x="30067" fg:w="115"/><text x="25.7762%" y="495.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (12 samples, 0.01%)</title><rect x="25.6399%" y="565" width="0.0102%" height="15" fill="rgb(233,14,44)" fg:x="30201" fg:w="12"/><text x="25.8899%" y="575.50"></text></g><g><title>sn_rust_dealloc (54 samples, 0.05%)</title><rect x="25.6501%" y="565" width="0.0458%" height="15" fill="rgb(237,97,39)" fg:x="30213" fg:w="54"/><text x="25.9001%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::pointer_trait::OwnedPointer for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop_allocation (86 samples, 0.07%)</title><rect x="25.6306%" y="581" width="0.0730%" height="15" fill="rgb(218,198,43)" fg:x="30190" fg:w="86"/><text x="25.8806%" y="591.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (141 samples, 0.12%)</title><rect x="25.6306%" y="629" width="0.1197%" height="15" fill="rgb(231,104,20)" fg:x="30190" fg:w="141"/><text x="25.8806%" y="639.50"></text></g><g><title>core::ops::function::FnOnce::call_once (141 samples, 0.12%)</title><rect x="25.6306%" y="613" width="0.1197%" height="15" fill="rgb(254,36,13)" fg:x="30190" fg:w="141"/><text x="25.8806%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::into_inner (141 samples, 0.12%)</title><rect x="25.6306%" y="597" width="0.1197%" height="15" fill="rgb(248,14,50)" fg:x="30190" fg:w="141"/><text x="25.8806%" y="607.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (55 samples, 0.05%)</title><rect x="25.7036%" y="581" width="0.0467%" height="15" fill="rgb(217,107,29)" fg:x="30276" fg:w="55"/><text x="25.9536%" y="591.50"></text></g><g><title>core::ptr::read (55 samples, 0.05%)</title><rect x="25.7036%" y="565" width="0.0467%" height="15" fill="rgb(251,169,33)" fg:x="30276" fg:w="55"/><text x="25.9536%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (348 samples, 0.30%)</title><rect x="25.4744%" y="709" width="0.2954%" height="15" fill="rgb(217,108,32)" fg:x="30006" fg:w="348"/><text x="25.7244%" y="719.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (343 samples, 0.29%)</title><rect x="25.4786%" y="693" width="0.2912%" height="15" fill="rgb(219,66,42)" fg:x="30011" fg:w="343"/><text x="25.7286%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val (337 samples, 0.29%)</title><rect x="25.4837%" y="677" width="0.2861%" height="15" fill="rgb(206,180,7)" fg:x="30017" fg:w="337"/><text x="25.7337%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val::{{closure}} (333 samples, 0.28%)</title><rect x="25.4871%" y="661" width="0.2827%" height="15" fill="rgb(208,226,31)" fg:x="30021" fg:w="333"/><text x="25.7371%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val::{{closure}} (333 samples, 0.28%)</title><rect x="25.4871%" y="645" width="0.2827%" height="15" fill="rgb(218,26,49)" fg:x="30021" fg:w="333"/><text x="25.7371%" y="655.50"></text></g><g><title>halfbrown::iter::&lt;impl core::iter::traits::collect::IntoIterator for halfbrown::HashMap&lt;K,V,S&gt;&gt;::into_iter (23 samples, 0.02%)</title><rect x="25.7503%" y="629" width="0.0195%" height="15" fill="rgb(233,197,48)" fg:x="30331" fg:w="23"/><text x="26.0003%" y="639.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (12 samples, 0.01%)</title><rect x="25.7596%" y="613" width="0.0102%" height="15" fill="rgb(252,181,51)" fg:x="30342" fg:w="12"/><text x="26.0096%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (12 samples, 0.01%)</title><rect x="25.7596%" y="597" width="0.0102%" height="15" fill="rgb(253,90,19)" fg:x="30342" fg:w="12"/><text x="26.0096%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (28 samples, 0.02%)</title><rect x="25.7800%" y="597" width="0.0238%" height="15" fill="rgb(215,171,30)" fg:x="30366" fg:w="28"/><text x="26.0300%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;halfbrown::iter::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="25.7927%" y="581" width="0.0110%" height="15" fill="rgb(214,222,9)" fg:x="30381" fg:w="13"/><text x="26.0427%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::iter::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (13 samples, 0.01%)</title><rect x="25.7927%" y="565" width="0.0110%" height="15" fill="rgb(223,3,22)" fg:x="30381" fg:w="13"/><text x="26.0427%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::iter::IntoIterInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (13 samples, 0.01%)</title><rect x="25.7927%" y="549" width="0.0110%" height="15" fill="rgb(225,196,46)" fg:x="30381" fg:w="13"/><text x="26.0427%" y="559.50"></text></g><g><title>tremor_pipeline::OpMeta::merge (610 samples, 0.52%)</title><rect x="25.3547%" y="725" width="0.5179%" height="15" fill="rgb(209,110,37)" fg:x="29865" fg:w="610"/><text x="25.6047%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (121 samples, 0.10%)</title><rect x="25.7698%" y="709" width="0.1027%" height="15" fill="rgb(249,89,12)" fg:x="30354" fg:w="121"/><text x="26.0198%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::ValIterInterface&lt;u32,u32&gt;&gt;&gt; (121 samples, 0.10%)</title><rect x="25.7698%" y="693" width="0.1027%" height="15" fill="rgb(226,27,33)" fg:x="30354" fg:w="121"/><text x="26.0198%" y="703.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (121 samples, 0.10%)</title><rect x="25.7698%" y="677" width="0.1027%" height="15" fill="rgb(213,82,22)" fg:x="30354" fg:w="121"/><text x="26.0198%" y="687.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (114 samples, 0.10%)</title><rect x="25.7758%" y="661" width="0.0968%" height="15" fill="rgb(248,140,0)" fg:x="30361" fg:w="114"/><text x="26.0258%" y="671.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (113 samples, 0.10%)</title><rect x="25.7766%" y="645" width="0.0959%" height="15" fill="rgb(228,106,3)" fg:x="30362" fg:w="113"/><text x="26.0266%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (113 samples, 0.10%)</title><rect x="25.7766%" y="629" width="0.0959%" height="15" fill="rgb(209,23,37)" fg:x="30362" fg:w="113"/><text x="26.0266%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (113 samples, 0.10%)</title><rect x="25.7766%" y="613" width="0.0959%" height="15" fill="rgb(241,93,50)" fg:x="30362" fg:w="113"/><text x="26.0266%" y="623.50"></text></g><g><title>sn_rust_dealloc (81 samples, 0.07%)</title><rect x="25.8038%" y="597" width="0.0688%" height="15" fill="rgb(253,46,43)" fg:x="30394" fg:w="81"/><text x="26.0538%" y="607.50"></text></g><g><title>tremor_runtime::connectors::utils::metrics::SinkReporter::increment_in (12 samples, 0.01%)</title><rect x="25.8819%" y="725" width="0.0102%" height="15" fill="rgb(226,206,43)" fg:x="30486" fg:w="12"/><text x="26.1319%" y="735.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (9,905 samples, 8.41%)</title><rect x="17.4847%" y="741" width="8.4091%" height="15" fill="rgb(217,54,7)" fg:x="20595" fg:w="9905"/><text x="17.7347%" y="751.50">tremor_runti..</text></g><g><title>&lt;abi_stable::sabi_types::constructor::Constructor&lt;T&gt; as core::cmp::PartialEq&gt;::eq (21 samples, 0.02%)</title><rect x="25.8955%" y="645" width="0.0178%" height="15" fill="rgb(223,5,52)" fg:x="30502" fg:w="21"/><text x="26.1455%" y="655.50"></text></g><g><title>abi_stable::sabi_types::constructor::Constructor&lt;T&gt;::get (18 samples, 0.02%)</title><rect x="25.8980%" y="629" width="0.0153%" height="15" fill="rgb(206,52,46)" fg:x="30505" fg:w="18"/><text x="26.1480%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::from_raw_parts (46 samples, 0.04%)</title><rect x="25.9141%" y="645" width="0.0391%" height="15" fill="rgb(253,136,11)" fg:x="30524" fg:w="46"/><text x="26.1641%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (46 samples, 0.04%)</title><rect x="25.9141%" y="629" width="0.0391%" height="15" fill="rgb(208,106,33)" fg:x="30524" fg:w="46"/><text x="26.1641%" y="639.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (72 samples, 0.06%)</title><rect x="25.8938%" y="693" width="0.0611%" height="15" fill="rgb(206,54,4)" fg:x="30500" fg:w="72"/><text x="26.1438%" y="703.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::convert::From&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from (72 samples, 0.06%)</title><rect x="25.8938%" y="677" width="0.0611%" height="15" fill="rgb(213,3,15)" fg:x="30500" fg:w="72"/><text x="26.1438%" y="687.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::into_vec (72 samples, 0.06%)</title><rect x="25.8938%" y="661" width="0.0611%" height="15" fill="rgb(252,211,39)" fg:x="30500" fg:w="72"/><text x="26.1438%" y="671.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (108 samples, 0.09%)</title><rect x="25.9838%" y="373" width="0.0917%" height="15" fill="rgb(223,6,36)" fg:x="30606" fg:w="108"/><text x="26.2338%" y="383.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (138 samples, 0.12%)</title><rect x="25.9591%" y="533" width="0.1172%" height="15" fill="rgb(252,169,45)" fg:x="30577" fg:w="138"/><text x="26.2091%" y="543.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (138 samples, 0.12%)</title><rect x="25.9591%" y="517" width="0.1172%" height="15" fill="rgb(212,48,26)" fg:x="30577" fg:w="138"/><text x="26.2091%" y="527.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (134 samples, 0.11%)</title><rect x="25.9625%" y="501" width="0.1138%" height="15" fill="rgb(251,102,48)" fg:x="30581" fg:w="134"/><text x="26.2125%" y="511.50"></text></g><g><title>alloc::alloc::exchange_malloc (132 samples, 0.11%)</title><rect x="25.9642%" y="485" width="0.1121%" height="15" fill="rgb(243,208,16)" fg:x="30583" fg:w="132"/><text x="26.2142%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (132 samples, 0.11%)</title><rect x="25.9642%" y="469" width="0.1121%" height="15" fill="rgb(219,96,24)" fg:x="30583" fg:w="132"/><text x="26.2142%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (132 samples, 0.11%)</title><rect x="25.9642%" y="453" width="0.1121%" height="15" fill="rgb(219,33,29)" fg:x="30583" fg:w="132"/><text x="26.2142%" y="463.50"></text></g><g><title>alloc::alloc::alloc (132 samples, 0.11%)</title><rect x="25.9642%" y="437" width="0.1121%" height="15" fill="rgb(223,176,5)" fg:x="30583" fg:w="132"/><text x="26.2142%" y="447.50"></text></g><g><title>__rg_alloc (132 samples, 0.11%)</title><rect x="25.9642%" y="421" width="0.1121%" height="15" fill="rgb(228,140,14)" fg:x="30583" fg:w="132"/><text x="26.2142%" y="431.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (132 samples, 0.11%)</title><rect x="25.9642%" y="405" width="0.1121%" height="15" fill="rgb(217,179,31)" fg:x="30583" fg:w="132"/><text x="26.2142%" y="415.50"></text></g><g><title>sn_rust_alloc (130 samples, 0.11%)</title><rect x="25.9659%" y="389" width="0.1104%" height="15" fill="rgb(230,9,30)" fg:x="30585" fg:w="130"/><text x="26.2159%" y="399.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (146 samples, 0.12%)</title><rect x="25.9549%" y="581" width="0.1240%" height="15" fill="rgb(230,136,20)" fg:x="30572" fg:w="146"/><text x="26.2049%" y="591.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (145 samples, 0.12%)</title><rect x="25.9557%" y="565" width="0.1231%" height="15" fill="rgb(215,210,22)" fg:x="30573" fg:w="145"/><text x="26.2057%" y="575.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (145 samples, 0.12%)</title><rect x="25.9557%" y="549" width="0.1231%" height="15" fill="rgb(218,43,5)" fg:x="30573" fg:w="145"/><text x="26.2057%" y="559.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (154 samples, 0.13%)</title><rect x="25.9549%" y="661" width="0.1307%" height="15" fill="rgb(216,11,5)" fg:x="30572" fg:w="154"/><text x="26.2049%" y="671.50"></text></g><g><title>core::ops::function::FnOnce::call_once (154 samples, 0.13%)</title><rect x="25.9549%" y="645" width="0.1307%" height="15" fill="rgb(209,82,29)" fg:x="30572" fg:w="154"/><text x="26.2049%" y="655.50"></text></g><g><title>value_trait::Builder::object (154 samples, 0.13%)</title><rect x="25.9549%" y="629" width="0.1307%" height="15" fill="rgb(244,115,12)" fg:x="30572" fg:w="154"/><text x="26.2049%" y="639.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (154 samples, 0.13%)</title><rect x="25.9549%" y="613" width="0.1307%" height="15" fill="rgb(222,82,18)" fg:x="30572" fg:w="154"/><text x="26.2049%" y="623.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (154 samples, 0.13%)</title><rect x="25.9549%" y="597" width="0.1307%" height="15" fill="rgb(249,227,8)" fg:x="30572" fg:w="154"/><text x="26.2049%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.03%)</title><rect x="26.0873%" y="549" width="0.0314%" height="15" fill="rgb(253,141,45)" fg:x="30728" fg:w="37"/><text x="26.3373%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (37 samples, 0.03%)</title><rect x="26.0873%" y="533" width="0.0314%" height="15" fill="rgb(234,184,4)" fg:x="30728" fg:w="37"/><text x="26.3373%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (32 samples, 0.03%)</title><rect x="26.0916%" y="517" width="0.0272%" height="15" fill="rgb(218,194,23)" fg:x="30733" fg:w="32"/><text x="26.3416%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (32 samples, 0.03%)</title><rect x="26.0916%" y="501" width="0.0272%" height="15" fill="rgb(235,66,41)" fg:x="30733" fg:w="32"/><text x="26.3416%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (32 samples, 0.03%)</title><rect x="26.0916%" y="485" width="0.0272%" height="15" fill="rgb(245,217,1)" fg:x="30733" fg:w="32"/><text x="26.3416%" y="495.50"></text></g><g><title>sn_rust_dealloc (17 samples, 0.01%)</title><rect x="26.1043%" y="469" width="0.0144%" height="15" fill="rgb(229,91,1)" fg:x="30748" fg:w="17"/><text x="26.3543%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (45 samples, 0.04%)</title><rect x="26.0856%" y="661" width="0.0382%" height="15" fill="rgb(207,101,30)" fg:x="30726" fg:w="45"/><text x="26.3356%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (45 samples, 0.04%)</title><rect x="26.0856%" y="645" width="0.0382%" height="15" fill="rgb(223,82,49)" fg:x="30726" fg:w="45"/><text x="26.3356%" y="655.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (45 samples, 0.04%)</title><rect x="26.0856%" y="629" width="0.0382%" height="15" fill="rgb(218,167,17)" fg:x="30726" fg:w="45"/><text x="26.3356%" y="639.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (45 samples, 0.04%)</title><rect x="26.0856%" y="613" width="0.0382%" height="15" fill="rgb(208,103,14)" fg:x="30726" fg:w="45"/><text x="26.3356%" y="623.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (44 samples, 0.04%)</title><rect x="26.0865%" y="597" width="0.0374%" height="15" fill="rgb(238,20,8)" fg:x="30727" fg:w="44"/><text x="26.3365%" y="607.50"></text></g><g><title>core::mem::drop (43 samples, 0.04%)</title><rect x="26.0873%" y="581" width="0.0365%" height="15" fill="rgb(218,80,54)" fg:x="30728" fg:w="43"/><text x="26.3373%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (43 samples, 0.04%)</title><rect x="26.0873%" y="565" width="0.0365%" height="15" fill="rgb(240,144,17)" fg:x="30728" fg:w="43"/><text x="26.3373%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (12 samples, 0.01%)</title><rect x="26.1238%" y="661" width="0.0102%" height="15" fill="rgb(245,27,50)" fg:x="30771" fg:w="12"/><text x="26.3738%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (12 samples, 0.01%)</title><rect x="26.1238%" y="645" width="0.0102%" height="15" fill="rgb(251,51,7)" fg:x="30771" fg:w="12"/><text x="26.3738%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (12 samples, 0.01%)</title><rect x="26.1238%" y="629" width="0.0102%" height="15" fill="rgb(245,217,29)" fg:x="30771" fg:w="12"/><text x="26.3738%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (12 samples, 0.01%)</title><rect x="26.1238%" y="613" width="0.0102%" height="15" fill="rgb(221,176,29)" fg:x="30771" fg:w="12"/><text x="26.3738%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (12 samples, 0.01%)</title><rect x="26.1238%" y="597" width="0.0102%" height="15" fill="rgb(212,180,24)" fg:x="30771" fg:w="12"/><text x="26.3738%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (12 samples, 0.01%)</title><rect x="26.1493%" y="645" width="0.0102%" height="15" fill="rgb(254,24,2)" fg:x="30801" fg:w="12"/><text x="26.3993%" y="655.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (38 samples, 0.03%)</title><rect x="26.1671%" y="629" width="0.0323%" height="15" fill="rgb(230,100,2)" fg:x="30822" fg:w="38"/><text x="26.4171%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (21 samples, 0.02%)</title><rect x="26.2104%" y="597" width="0.0178%" height="15" fill="rgb(219,142,25)" fg:x="30873" fg:w="21"/><text x="26.4604%" y="607.50"></text></g><g><title>core::cmp::PartialOrd::ge (21 samples, 0.02%)</title><rect x="26.2104%" y="581" width="0.0178%" height="15" fill="rgb(240,73,43)" fg:x="30873" fg:w="21"/><text x="26.4604%" y="591.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (21 samples, 0.02%)</title><rect x="26.2104%" y="565" width="0.0178%" height="15" fill="rgb(214,114,15)" fg:x="30873" fg:w="21"/><text x="26.4604%" y="575.50"></text></g><g><title>std::time::SystemTime::duration_since (86 samples, 0.07%)</title><rect x="26.1671%" y="645" width="0.0730%" height="15" fill="rgb(207,130,4)" fg:x="30822" fg:w="86"/><text x="26.4171%" y="655.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (48 samples, 0.04%)</title><rect x="26.1994%" y="629" width="0.0408%" height="15" fill="rgb(221,25,40)" fg:x="30860" fg:w="48"/><text x="26.4494%" y="639.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (48 samples, 0.04%)</title><rect x="26.1994%" y="613" width="0.0408%" height="15" fill="rgb(241,184,7)" fg:x="30860" fg:w="48"/><text x="26.4494%" y="623.50"></text></g><g><title>core::time::Duration::new (14 samples, 0.01%)</title><rect x="26.2283%" y="597" width="0.0119%" height="15" fill="rgb(235,159,4)" fg:x="30894" fg:w="14"/><text x="26.4783%" y="607.50"></text></g><g><title>tremor_common::time::nanotime (290 samples, 0.25%)</title><rect x="26.1340%" y="661" width="0.2462%" height="15" fill="rgb(214,87,48)" fg:x="30783" fg:w="290"/><text x="26.3840%" y="671.50"></text></g><g><title>std::time::SystemTime::now (165 samples, 0.14%)</title><rect x="26.2401%" y="645" width="0.1401%" height="15" fill="rgb(246,198,24)" fg:x="30908" fg:w="165"/><text x="26.4901%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (165 samples, 0.14%)</title><rect x="26.2401%" y="629" width="0.1401%" height="15" fill="rgb(209,66,40)" fg:x="30908" fg:w="165"/><text x="26.4901%" y="639.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (165 samples, 0.14%)</title><rect x="26.2401%" y="613" width="0.1401%" height="15" fill="rgb(233,147,39)" fg:x="30908" fg:w="165"/><text x="26.4901%" y="623.50"></text></g><g><title>__clock_gettime (137 samples, 0.12%)</title><rect x="26.2639%" y="597" width="0.1163%" height="15" fill="rgb(231,145,52)" fg:x="30936" fg:w="137"/><text x="26.5139%" y="607.50"></text></g><g><title>__vdso_clock_gettime (135 samples, 0.11%)</title><rect x="26.2656%" y="581" width="0.1146%" height="15" fill="rgb(206,20,26)" fg:x="30938" fg:w="135"/><text x="26.5156%" y="591.50"></text></g><g><title>[[vdso]] (118 samples, 0.10%)</title><rect x="26.2800%" y="565" width="0.1002%" height="15" fill="rgb(238,220,4)" fg:x="30955" fg:w="118"/><text x="26.5300%" y="575.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (601 samples, 0.51%)</title><rect x="25.8938%" y="725" width="0.5102%" height="15" fill="rgb(252,195,42)" fg:x="30500" fg:w="601"/><text x="26.1438%" y="735.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (601 samples, 0.51%)</title><rect x="25.8938%" y="709" width="0.5102%" height="15" fill="rgb(209,10,6)" fg:x="30500" fg:w="601"/><text x="26.1438%" y="719.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (529 samples, 0.45%)</title><rect x="25.9549%" y="693" width="0.4491%" height="15" fill="rgb(229,3,52)" fg:x="30572" fg:w="529"/><text x="26.2049%" y="703.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (529 samples, 0.45%)</title><rect x="25.9549%" y="677" width="0.4491%" height="15" fill="rgb(253,49,37)" fg:x="30572" fg:w="529"/><text x="26.2049%" y="687.50"></text></g><g><title>tremor_runtime::connectors::source::Streams::get_or_create_stream (28 samples, 0.02%)</title><rect x="26.3802%" y="661" width="0.0238%" height="15" fill="rgb(240,103,49)" fg:x="31073" fg:w="28"/><text x="26.6302%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (17 samples, 0.01%)</title><rect x="26.3896%" y="645" width="0.0144%" height="15" fill="rgb(250,182,30)" fg:x="31084" fg:w="17"/><text x="26.6396%" y="655.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (12 samples, 0.01%)</title><rect x="26.3938%" y="629" width="0.0102%" height="15" fill="rgb(248,8,30)" fg:x="31089" fg:w="12"/><text x="26.6438%" y="639.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (12 samples, 0.01%)</title><rect x="26.3938%" y="613" width="0.0102%" height="15" fill="rgb(237,120,30)" fg:x="31089" fg:w="12"/><text x="26.6438%" y="623.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (12 samples, 0.01%)</title><rect x="26.3938%" y="597" width="0.0102%" height="15" fill="rgb(221,146,34)" fg:x="31089" fg:w="12"/><text x="26.6438%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (129 samples, 0.11%)</title><rect x="26.8022%" y="277" width="0.1095%" height="15" fill="rgb(242,55,13)" fg:x="31570" fg:w="129"/><text x="27.0522%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (129 samples, 0.11%)</title><rect x="26.8022%" y="261" width="0.1095%" height="15" fill="rgb(242,112,31)" fg:x="31570" fg:w="129"/><text x="27.0522%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (129 samples, 0.11%)</title><rect x="26.8022%" y="245" width="0.1095%" height="15" fill="rgb(249,192,27)" fg:x="31570" fg:w="129"/><text x="27.0522%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (127 samples, 0.11%)</title><rect x="26.8039%" y="229" width="0.1078%" height="15" fill="rgb(208,204,44)" fg:x="31572" fg:w="127"/><text x="27.0539%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (127 samples, 0.11%)</title><rect x="26.8039%" y="213" width="0.1078%" height="15" fill="rgb(208,93,54)" fg:x="31572" fg:w="127"/><text x="27.0539%" y="223.50"></text></g><g><title>alloc::alloc::alloc (125 samples, 0.11%)</title><rect x="26.8056%" y="197" width="0.1061%" height="15" fill="rgb(242,1,31)" fg:x="31574" fg:w="125"/><text x="27.0556%" y="207.50"></text></g><g><title>__rg_alloc (125 samples, 0.11%)</title><rect x="26.8056%" y="181" width="0.1061%" height="15" fill="rgb(241,83,25)" fg:x="31574" fg:w="125"/><text x="27.0556%" y="191.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (125 samples, 0.11%)</title><rect x="26.8056%" y="165" width="0.1061%" height="15" fill="rgb(205,169,50)" fg:x="31574" fg:w="125"/><text x="27.0556%" y="175.50"></text></g><g><title>sn_rust_alloc (115 samples, 0.10%)</title><rect x="26.8140%" y="149" width="0.0976%" height="15" fill="rgb(239,186,37)" fg:x="31584" fg:w="115"/><text x="27.0640%" y="159.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (171 samples, 0.15%)</title><rect x="26.7903%" y="389" width="0.1452%" height="15" fill="rgb(205,221,10)" fg:x="31556" fg:w="171"/><text x="27.0403%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (164 samples, 0.14%)</title><rect x="26.7962%" y="373" width="0.1392%" height="15" fill="rgb(218,196,15)" fg:x="31563" fg:w="164"/><text x="27.0462%" y="383.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (162 samples, 0.14%)</title><rect x="26.7979%" y="357" width="0.1375%" height="15" fill="rgb(218,196,35)" fg:x="31565" fg:w="162"/><text x="27.0479%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (157 samples, 0.13%)</title><rect x="26.8022%" y="341" width="0.1333%" height="15" fill="rgb(233,63,24)" fg:x="31570" fg:w="157"/><text x="27.0522%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (157 samples, 0.13%)</title><rect x="26.8022%" y="325" width="0.1333%" height="15" fill="rgb(225,8,4)" fg:x="31570" fg:w="157"/><text x="27.0522%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (157 samples, 0.13%)</title><rect x="26.8022%" y="309" width="0.1333%" height="15" fill="rgb(234,105,35)" fg:x="31570" fg:w="157"/><text x="27.0522%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (157 samples, 0.13%)</title><rect x="26.8022%" y="293" width="0.1333%" height="15" fill="rgb(236,21,32)" fg:x="31570" fg:w="157"/><text x="27.0522%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (28 samples, 0.02%)</title><rect x="26.9117%" y="277" width="0.0238%" height="15" fill="rgb(228,109,6)" fg:x="31699" fg:w="28"/><text x="27.1617%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (28 samples, 0.02%)</title><rect x="26.9117%" y="261" width="0.0238%" height="15" fill="rgb(229,215,31)" fg:x="31699" fg:w="28"/><text x="27.1617%" y="271.50"></text></g><g><title>[libc-2.31.so] (25 samples, 0.02%)</title><rect x="26.9142%" y="245" width="0.0212%" height="15" fill="rgb(221,52,54)" fg:x="31702" fg:w="25"/><text x="27.1642%" y="255.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (15 samples, 0.01%)</title><rect x="26.9355%" y="373" width="0.0127%" height="15" fill="rgb(252,129,43)" fg:x="31727" fg:w="15"/><text x="27.1855%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (66 samples, 0.06%)</title><rect x="26.9490%" y="181" width="0.0560%" height="15" fill="rgb(248,183,27)" fg:x="31743" fg:w="66"/><text x="27.1990%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (66 samples, 0.06%)</title><rect x="26.9490%" y="165" width="0.0560%" height="15" fill="rgb(250,0,22)" fg:x="31743" fg:w="66"/><text x="27.1990%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (66 samples, 0.06%)</title><rect x="26.9490%" y="149" width="0.0560%" height="15" fill="rgb(213,166,10)" fg:x="31743" fg:w="66"/><text x="27.1990%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (63 samples, 0.05%)</title><rect x="26.9516%" y="133" width="0.0535%" height="15" fill="rgb(207,163,36)" fg:x="31746" fg:w="63"/><text x="27.2016%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (63 samples, 0.05%)</title><rect x="26.9516%" y="117" width="0.0535%" height="15" fill="rgb(208,122,22)" fg:x="31746" fg:w="63"/><text x="27.2016%" y="127.50"></text></g><g><title>alloc::alloc::alloc (62 samples, 0.05%)</title><rect x="26.9524%" y="101" width="0.0526%" height="15" fill="rgb(207,104,49)" fg:x="31747" fg:w="62"/><text x="27.2024%" y="111.50"></text></g><g><title>__rg_alloc (62 samples, 0.05%)</title><rect x="26.9524%" y="85" width="0.0526%" height="15" fill="rgb(248,211,50)" fg:x="31747" fg:w="62"/><text x="27.2024%" y="95.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (62 samples, 0.05%)</title><rect x="26.9524%" y="69" width="0.0526%" height="15" fill="rgb(217,13,45)" fg:x="31747" fg:w="62"/><text x="27.2024%" y="79.50"></text></g><g><title>sn_rust_alloc (61 samples, 0.05%)</title><rect x="26.9533%" y="53" width="0.0518%" height="15" fill="rgb(211,216,49)" fg:x="31748" fg:w="61"/><text x="27.2033%" y="63.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (26 samples, 0.02%)</title><rect x="26.9830%" y="37" width="0.0221%" height="15" fill="rgb(221,58,53)" fg:x="31783" fg:w="26"/><text x="27.2330%" y="47.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (95 samples, 0.08%)</title><rect x="26.9482%" y="293" width="0.0807%" height="15" fill="rgb(220,112,41)" fg:x="31742" fg:w="95"/><text x="27.1982%" y="303.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (95 samples, 0.08%)</title><rect x="26.9482%" y="277" width="0.0807%" height="15" fill="rgb(236,38,28)" fg:x="31742" fg:w="95"/><text x="27.1982%" y="287.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (95 samples, 0.08%)</title><rect x="26.9482%" y="261" width="0.0807%" height="15" fill="rgb(227,195,22)" fg:x="31742" fg:w="95"/><text x="27.1982%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (94 samples, 0.08%)</title><rect x="26.9490%" y="245" width="0.0798%" height="15" fill="rgb(214,55,33)" fg:x="31743" fg:w="94"/><text x="27.1990%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (94 samples, 0.08%)</title><rect x="26.9490%" y="229" width="0.0798%" height="15" fill="rgb(248,80,13)" fg:x="31743" fg:w="94"/><text x="27.1990%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (94 samples, 0.08%)</title><rect x="26.9490%" y="213" width="0.0798%" height="15" fill="rgb(238,52,6)" fg:x="31743" fg:w="94"/><text x="27.1990%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (94 samples, 0.08%)</title><rect x="26.9490%" y="197" width="0.0798%" height="15" fill="rgb(224,198,47)" fg:x="31743" fg:w="94"/><text x="27.1990%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (28 samples, 0.02%)</title><rect x="27.0051%" y="181" width="0.0238%" height="15" fill="rgb(233,171,20)" fg:x="31809" fg:w="28"/><text x="27.2551%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (28 samples, 0.02%)</title><rect x="27.0051%" y="165" width="0.0238%" height="15" fill="rgb(241,30,25)" fg:x="31809" fg:w="28"/><text x="27.2551%" y="175.50"></text></g><g><title>[libc-2.31.so] (25 samples, 0.02%)</title><rect x="27.0076%" y="149" width="0.0212%" height="15" fill="rgb(207,171,38)" fg:x="31812" fg:w="25"/><text x="27.2576%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (39 samples, 0.03%)</title><rect x="27.0416%" y="293" width="0.0331%" height="15" fill="rgb(234,70,1)" fg:x="31852" fg:w="39"/><text x="27.2916%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (37 samples, 0.03%)</title><rect x="27.0433%" y="277" width="0.0314%" height="15" fill="rgb(232,178,18)" fg:x="31854" fg:w="37"/><text x="27.2933%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (37 samples, 0.03%)</title><rect x="27.0433%" y="261" width="0.0314%" height="15" fill="rgb(241,78,40)" fg:x="31854" fg:w="37"/><text x="27.2933%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (37 samples, 0.03%)</title><rect x="27.0433%" y="245" width="0.0314%" height="15" fill="rgb(222,35,25)" fg:x="31854" fg:w="37"/><text x="27.2933%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (37 samples, 0.03%)</title><rect x="27.0433%" y="229" width="0.0314%" height="15" fill="rgb(207,92,16)" fg:x="31854" fg:w="37"/><text x="27.2933%" y="239.50"></text></g><g><title>alloc::alloc::alloc (36 samples, 0.03%)</title><rect x="27.0441%" y="213" width="0.0306%" height="15" fill="rgb(216,59,51)" fg:x="31855" fg:w="36"/><text x="27.2941%" y="223.50"></text></g><g><title>__rg_alloc (36 samples, 0.03%)</title><rect x="27.0441%" y="197" width="0.0306%" height="15" fill="rgb(213,80,28)" fg:x="31855" fg:w="36"/><text x="27.2941%" y="207.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (36 samples, 0.03%)</title><rect x="27.0441%" y="181" width="0.0306%" height="15" fill="rgb(220,93,7)" fg:x="31855" fg:w="36"/><text x="27.2941%" y="191.50"></text></g><g><title>sn_rust_alloc (33 samples, 0.03%)</title><rect x="27.0467%" y="165" width="0.0280%" height="15" fill="rgb(225,24,44)" fg:x="31858" fg:w="33"/><text x="27.2967%" y="175.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (610 samples, 0.52%)</title><rect x="26.5636%" y="405" width="0.5179%" height="15" fill="rgb(243,74,40)" fg:x="31289" fg:w="610"/><text x="26.8136%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (172 samples, 0.15%)</title><rect x="26.9355%" y="389" width="0.1460%" height="15" fill="rgb(228,39,7)" fg:x="31727" fg:w="172"/><text x="27.1855%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (157 samples, 0.13%)</title><rect x="26.9482%" y="373" width="0.1333%" height="15" fill="rgb(227,79,8)" fg:x="31742" fg:w="157"/><text x="27.1982%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (157 samples, 0.13%)</title><rect x="26.9482%" y="357" width="0.1333%" height="15" fill="rgb(236,58,11)" fg:x="31742" fg:w="157"/><text x="27.1982%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (157 samples, 0.13%)</title><rect x="26.9482%" y="341" width="0.1333%" height="15" fill="rgb(249,63,35)" fg:x="31742" fg:w="157"/><text x="27.1982%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (157 samples, 0.13%)</title><rect x="26.9482%" y="325" width="0.1333%" height="15" fill="rgb(252,114,16)" fg:x="31742" fg:w="157"/><text x="27.1982%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (157 samples, 0.13%)</title><rect x="26.9482%" y="309" width="0.1333%" height="15" fill="rgb(254,151,24)" fg:x="31742" fg:w="157"/><text x="27.1982%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (16 samples, 0.01%)</title><rect x="27.0959%" y="325" width="0.0136%" height="15" fill="rgb(253,54,39)" fg:x="31916" fg:w="16"/><text x="27.3459%" y="335.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (42 samples, 0.04%)</title><rect x="27.1129%" y="309" width="0.0357%" height="15" fill="rgb(243,25,45)" fg:x="31936" fg:w="42"/><text x="27.3629%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (16 samples, 0.01%)</title><rect x="27.1570%" y="277" width="0.0136%" height="15" fill="rgb(234,134,9)" fg:x="31988" fg:w="16"/><text x="27.4070%" y="287.50"></text></g><g><title>core::cmp::PartialOrd::ge (16 samples, 0.01%)</title><rect x="27.1570%" y="261" width="0.0136%" height="15" fill="rgb(227,166,31)" fg:x="31988" fg:w="16"/><text x="27.4070%" y="271.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (13 samples, 0.01%)</title><rect x="27.1596%" y="245" width="0.0110%" height="15" fill="rgb(245,143,41)" fg:x="31991" fg:w="13"/><text x="27.4096%" y="255.50"></text></g><g><title>std::time::SystemTime::duration_since (73 samples, 0.06%)</title><rect x="27.1129%" y="325" width="0.0620%" height="15" fill="rgb(238,181,32)" fg:x="31936" fg:w="73"/><text x="27.3629%" y="335.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (31 samples, 0.03%)</title><rect x="27.1485%" y="309" width="0.0263%" height="15" fill="rgb(224,113,18)" fg:x="31978" fg:w="31"/><text x="27.3985%" y="319.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (31 samples, 0.03%)</title><rect x="27.1485%" y="293" width="0.0263%" height="15" fill="rgb(240,229,28)" fg:x="31978" fg:w="31"/><text x="27.3985%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (285 samples, 0.24%)</title><rect x="27.0815%" y="405" width="0.2420%" height="15" fill="rgb(250,185,3)" fg:x="31899" fg:w="285"/><text x="27.3315%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (285 samples, 0.24%)</title><rect x="27.0815%" y="389" width="0.2420%" height="15" fill="rgb(212,59,25)" fg:x="31899" fg:w="285"/><text x="27.3315%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any::check::{{closure}} (276 samples, 0.23%)</title><rect x="27.0891%" y="373" width="0.2343%" height="15" fill="rgb(221,87,20)" fg:x="31908" fg:w="276"/><text x="27.3391%" y="383.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}}::{{closure}} (276 samples, 0.23%)</title><rect x="27.0891%" y="357" width="0.2343%" height="15" fill="rgb(213,74,28)" fg:x="31908" fg:w="276"/><text x="27.3391%" y="367.50"></text></g><g><title>tremor_common::time::nanotime (274 samples, 0.23%)</title><rect x="27.0908%" y="341" width="0.2326%" height="15" fill="rgb(224,132,34)" fg:x="31910" fg:w="274"/><text x="27.3408%" y="351.50"></text></g><g><title>std::time::SystemTime::now (175 samples, 0.15%)</title><rect x="27.1749%" y="325" width="0.1486%" height="15" fill="rgb(222,101,24)" fg:x="32009" fg:w="175"/><text x="27.4249%" y="335.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (175 samples, 0.15%)</title><rect x="27.1749%" y="309" width="0.1486%" height="15" fill="rgb(254,142,4)" fg:x="32009" fg:w="175"/><text x="27.4249%" y="319.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (175 samples, 0.15%)</title><rect x="27.1749%" y="293" width="0.1486%" height="15" fill="rgb(230,229,49)" fg:x="32009" fg:w="175"/><text x="27.4249%" y="303.50"></text></g><g><title>__clock_gettime (152 samples, 0.13%)</title><rect x="27.1944%" y="277" width="0.1290%" height="15" fill="rgb(238,70,47)" fg:x="32032" fg:w="152"/><text x="27.4444%" y="287.50"></text></g><g><title>__vdso_clock_gettime (138 samples, 0.12%)</title><rect x="27.2063%" y="261" width="0.1172%" height="15" fill="rgb(231,160,17)" fg:x="32046" fg:w="138"/><text x="27.4563%" y="271.50"></text></g><g><title>[[vdso]] (124 samples, 0.11%)</title><rect x="27.2182%" y="245" width="0.1053%" height="15" fill="rgb(218,68,53)" fg:x="32060" fg:w="124"/><text x="27.4682%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (65 samples, 0.06%)</title><rect x="27.3319%" y="373" width="0.0552%" height="15" fill="rgb(236,111,10)" fg:x="32194" fg:w="65"/><text x="27.5819%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (28 samples, 0.02%)</title><rect x="27.3633%" y="357" width="0.0238%" height="15" fill="rgb(224,34,41)" fg:x="32231" fg:w="28"/><text x="27.6133%" y="367.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (319 samples, 0.27%)</title><rect x="27.5145%" y="181" width="0.2708%" height="15" fill="rgb(241,118,19)" fg:x="32409" fg:w="319"/><text x="27.7645%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (481 samples, 0.41%)</title><rect x="27.3871%" y="325" width="0.4084%" height="15" fill="rgb(238,129,25)" fg:x="32259" fg:w="481"/><text x="27.6371%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (481 samples, 0.41%)</title><rect x="27.3871%" y="309" width="0.4084%" height="15" fill="rgb(238,22,31)" fg:x="32259" fg:w="481"/><text x="27.6371%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (481 samples, 0.41%)</title><rect x="27.3871%" y="293" width="0.4084%" height="15" fill="rgb(222,174,48)" fg:x="32259" fg:w="481"/><text x="27.6371%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (477 samples, 0.40%)</title><rect x="27.3905%" y="277" width="0.4050%" height="15" fill="rgb(206,152,40)" fg:x="32263" fg:w="477"/><text x="27.6405%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (477 samples, 0.40%)</title><rect x="27.3905%" y="261" width="0.4050%" height="15" fill="rgb(218,99,54)" fg:x="32263" fg:w="477"/><text x="27.6405%" y="271.50"></text></g><g><title>alloc::alloc::alloc (477 samples, 0.40%)</title><rect x="27.3905%" y="245" width="0.4050%" height="15" fill="rgb(220,174,26)" fg:x="32263" fg:w="477"/><text x="27.6405%" y="255.50"></text></g><g><title>__rg_alloc (477 samples, 0.40%)</title><rect x="27.3905%" y="229" width="0.4050%" height="15" fill="rgb(245,116,9)" fg:x="32263" fg:w="477"/><text x="27.6405%" y="239.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (477 samples, 0.40%)</title><rect x="27.3905%" y="213" width="0.4050%" height="15" fill="rgb(209,72,35)" fg:x="32263" fg:w="477"/><text x="27.6405%" y="223.50"></text></g><g><title>sn_rust_alloc (476 samples, 0.40%)</title><rect x="27.3914%" y="197" width="0.4041%" height="15" fill="rgb(226,126,21)" fg:x="32264" fg:w="476"/><text x="27.6414%" y="207.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (12 samples, 0.01%)</title><rect x="27.7853%" y="181" width="0.0102%" height="15" fill="rgb(227,192,1)" fg:x="32728" fg:w="12"/><text x="28.0353%" y="191.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (2,371 samples, 2.01%)</title><rect x="25.8938%" y="741" width="2.0129%" height="15" fill="rgb(237,180,29)" fg:x="30500" fg:w="2371"/><text x="26.1438%" y="751.50">t..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1,770 samples, 1.50%)</title><rect x="26.4040%" y="725" width="1.5027%" height="15" fill="rgb(230,197,35)" fg:x="31101" fg:w="1770"/><text x="26.6540%" y="735.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (1,770 samples, 1.50%)</title><rect x="26.4040%" y="709" width="1.5027%" height="15" fill="rgb(246,193,31)" fg:x="31101" fg:w="1770"/><text x="26.6540%" y="719.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,770 samples, 1.50%)</title><rect x="26.4040%" y="693" width="1.5027%" height="15" fill="rgb(241,36,4)" fg:x="31101" fg:w="1770"/><text x="26.6540%" y="703.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,770 samples, 1.50%)</title><rect x="26.4040%" y="677" width="1.5027%" height="15" fill="rgb(241,130,17)" fg:x="31101" fg:w="1770"/><text x="26.6540%" y="687.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (1,770 samples, 1.50%)</title><rect x="26.4040%" y="661" width="1.5027%" height="15" fill="rgb(206,137,32)" fg:x="31101" fg:w="1770"/><text x="26.6540%" y="671.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,770 samples, 1.50%)</title><rect x="26.4040%" y="645" width="1.5027%" height="15" fill="rgb(237,228,51)" fg:x="31101" fg:w="1770"/><text x="26.6540%" y="655.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,770 samples, 1.50%)</title><rect x="26.4040%" y="629" width="1.5027%" height="15" fill="rgb(243,6,42)" fg:x="31101" fg:w="1770"/><text x="26.6540%" y="639.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (1,770 samples, 1.50%)</title><rect x="26.4040%" y="613" width="1.5027%" height="15" fill="rgb(251,74,28)" fg:x="31101" fg:w="1770"/><text x="26.6540%" y="623.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,770 samples, 1.50%)</title><rect x="26.4040%" y="597" width="1.5027%" height="15" fill="rgb(218,20,49)" fg:x="31101" fg:w="1770"/><text x="26.6540%" y="607.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (1,770 samples, 1.50%)</title><rect x="26.4040%" y="581" width="1.5027%" height="15" fill="rgb(238,28,14)" fg:x="31101" fg:w="1770"/><text x="26.6540%" y="591.50"></text></g><g><title>std::panic::catch_unwind (1,770 samples, 1.50%)</title><rect x="26.4040%" y="565" width="1.5027%" height="15" fill="rgb(229,40,46)" fg:x="31101" fg:w="1770"/><text x="26.6540%" y="575.50"></text></g><g><title>std::panicking::try (1,770 samples, 1.50%)</title><rect x="26.4040%" y="549" width="1.5027%" height="15" fill="rgb(244,195,20)" fg:x="31101" fg:w="1770"/><text x="26.6540%" y="559.50"></text></g><g><title>std::panicking::try::do_call (1,770 samples, 1.50%)</title><rect x="26.4040%" y="533" width="1.5027%" height="15" fill="rgb(253,56,35)" fg:x="31101" fg:w="1770"/><text x="26.6540%" y="543.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,770 samples, 1.50%)</title><rect x="26.4040%" y="517" width="1.5027%" height="15" fill="rgb(210,149,44)" fg:x="31101" fg:w="1770"/><text x="26.6540%" y="527.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1,770 samples, 1.50%)</title><rect x="26.4040%" y="501" width="1.5027%" height="15" fill="rgb(240,135,12)" fg:x="31101" fg:w="1770"/><text x="26.6540%" y="511.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (1,770 samples, 1.50%)</title><rect x="26.4040%" y="485" width="1.5027%" height="15" fill="rgb(251,24,50)" fg:x="31101" fg:w="1770"/><text x="26.6540%" y="495.50"></text></g><g><title>async_ffi::FfiContext::with_context (1,770 samples, 1.50%)</title><rect x="26.4040%" y="469" width="1.5027%" height="15" fill="rgb(243,200,47)" fg:x="31101" fg:w="1770"/><text x="26.6540%" y="479.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (1,770 samples, 1.50%)</title><rect x="26.4040%" y="453" width="1.5027%" height="15" fill="rgb(224,166,26)" fg:x="31101" fg:w="1770"/><text x="26.6540%" y="463.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,770 samples, 1.50%)</title><rect x="26.4040%" y="437" width="1.5027%" height="15" fill="rgb(233,0,47)" fg:x="31101" fg:w="1770"/><text x="26.6540%" y="447.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (1,716 samples, 1.46%)</title><rect x="26.4498%" y="421" width="1.4568%" height="15" fill="rgb(253,80,5)" fg:x="31155" fg:w="1716"/><text x="26.6998%" y="431.50"></text></g><g><title>tremor_runtime::connectors::impls::bench::Acc::next (685 samples, 0.58%)</title><rect x="27.3251%" y="405" width="0.5815%" height="15" fill="rgb(214,133,25)" fg:x="32186" fg:w="685"/><text x="27.5751%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (677 samples, 0.57%)</title><rect x="27.3319%" y="389" width="0.5748%" height="15" fill="rgb(209,27,14)" fg:x="32194" fg:w="677"/><text x="27.5819%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (612 samples, 0.52%)</title><rect x="27.3871%" y="373" width="0.5196%" height="15" fill="rgb(219,102,51)" fg:x="32259" fg:w="612"/><text x="27.6371%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (612 samples, 0.52%)</title><rect x="27.3871%" y="357" width="0.5196%" height="15" fill="rgb(237,18,16)" fg:x="32259" fg:w="612"/><text x="27.6371%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (612 samples, 0.52%)</title><rect x="27.3871%" y="341" width="0.5196%" height="15" fill="rgb(241,85,17)" fg:x="32259" fg:w="612"/><text x="27.6371%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (131 samples, 0.11%)</title><rect x="27.7955%" y="325" width="0.1112%" height="15" fill="rgb(236,90,42)" fg:x="32740" fg:w="131"/><text x="28.0455%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (131 samples, 0.11%)</title><rect x="27.7955%" y="309" width="0.1112%" height="15" fill="rgb(249,57,21)" fg:x="32740" fg:w="131"/><text x="28.0455%" y="319.50"></text></g><g><title>[libc-2.31.so] (130 samples, 0.11%)</title><rect x="27.7963%" y="293" width="0.1104%" height="15" fill="rgb(243,12,36)" fg:x="32741" fg:w="130"/><text x="28.0463%" y="303.50"></text></g><g><title>[libc-2.31.so] (248 samples, 0.21%)</title><rect x="28.1970%" y="709" width="0.2105%" height="15" fill="rgb(253,128,47)" fg:x="33213" fg:w="248"/><text x="28.4470%" y="719.50"></text></g><g><title>[libc-2.31.so] (401 samples, 0.34%)</title><rect x="28.4729%" y="693" width="0.3404%" height="15" fill="rgb(207,33,20)" fg:x="33538" fg:w="401"/><text x="28.7229%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (190 samples, 0.16%)</title><rect x="28.8134%" y="693" width="0.1613%" height="15" fill="rgb(233,215,35)" fg:x="33939" fg:w="190"/><text x="29.0634%" y="703.50"></text></g><g><title>core::ptr::write (182 samples, 0.15%)</title><rect x="28.8202%" y="677" width="0.1545%" height="15" fill="rgb(249,188,52)" fg:x="33947" fg:w="182"/><text x="29.0702%" y="687.50"></text></g><g><title>[libc-2.31.so] (181 samples, 0.15%)</title><rect x="28.8210%" y="661" width="0.1537%" height="15" fill="rgb(225,12,32)" fg:x="33948" fg:w="181"/><text x="29.0710%" y="671.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (315 samples, 0.27%)</title><rect x="28.9840%" y="693" width="0.2674%" height="15" fill="rgb(247,98,14)" fg:x="34140" fg:w="315"/><text x="29.2340%" y="703.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (312 samples, 0.26%)</title><rect x="28.9866%" y="677" width="0.2649%" height="15" fill="rgb(247,219,48)" fg:x="34143" fg:w="312"/><text x="29.2366%" y="687.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (301 samples, 0.26%)</title><rect x="28.9959%" y="661" width="0.2555%" height="15" fill="rgb(253,60,48)" fg:x="34154" fg:w="301"/><text x="29.2459%" y="671.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (301 samples, 0.26%)</title><rect x="28.9959%" y="645" width="0.2555%" height="15" fill="rgb(245,15,52)" fg:x="34154" fg:w="301"/><text x="29.2459%" y="655.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (301 samples, 0.26%)</title><rect x="28.9959%" y="629" width="0.2555%" height="15" fill="rgb(220,133,28)" fg:x="34154" fg:w="301"/><text x="29.2459%" y="639.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (301 samples, 0.26%)</title><rect x="28.9959%" y="613" width="0.2555%" height="15" fill="rgb(217,180,4)" fg:x="34154" fg:w="301"/><text x="29.2459%" y="623.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (301 samples, 0.26%)</title><rect x="28.9959%" y="597" width="0.2555%" height="15" fill="rgb(251,24,1)" fg:x="34154" fg:w="301"/><text x="29.2459%" y="607.50"></text></g><g><title>[libc-2.31.so] (281 samples, 0.24%)</title><rect x="29.0129%" y="581" width="0.2386%" height="15" fill="rgb(212,185,49)" fg:x="34174" fg:w="281"/><text x="29.2629%" y="591.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.01%)</title><rect x="29.6513%" y="661" width="0.0119%" height="15" fill="rgb(215,175,22)" fg:x="34926" fg:w="14"/><text x="29.9013%" y="671.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (268 samples, 0.23%)</title><rect x="29.6632%" y="661" width="0.2275%" height="15" fill="rgb(250,205,14)" fg:x="34940" fg:w="268"/><text x="29.9132%" y="671.50"></text></g><g><title>[libc-2.31.so] (218 samples, 0.19%)</title><rect x="29.7057%" y="645" width="0.1851%" height="15" fill="rgb(225,211,22)" fg:x="34990" fg:w="218"/><text x="29.9557%" y="655.50"></text></g><g><title>[libc-2.31.so] (580 samples, 0.49%)</title><rect x="29.8907%" y="661" width="0.4924%" height="15" fill="rgb(251,179,42)" fg:x="35208" fg:w="580"/><text x="30.1407%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (364 samples, 0.31%)</title><rect x="30.3899%" y="661" width="0.3090%" height="15" fill="rgb(208,216,51)" fg:x="35796" fg:w="364"/><text x="30.6399%" y="671.50"></text></g><g><title>core::ptr::read (342 samples, 0.29%)</title><rect x="30.4086%" y="645" width="0.2903%" height="15" fill="rgb(235,36,11)" fg:x="35818" fg:w="342"/><text x="30.6586%" y="655.50"></text></g><g><title>[libc-2.31.so] (285 samples, 0.24%)</title><rect x="30.4570%" y="629" width="0.2420%" height="15" fill="rgb(213,189,28)" fg:x="35875" fg:w="285"/><text x="30.7070%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (171 samples, 0.15%)</title><rect x="30.6990%" y="661" width="0.1452%" height="15" fill="rgb(227,203,42)" fg:x="36160" fg:w="171"/><text x="30.9490%" y="671.50"></text></g><g><title>core::ptr::write (156 samples, 0.13%)</title><rect x="30.7117%" y="645" width="0.1324%" height="15" fill="rgb(244,72,36)" fg:x="36175" fg:w="156"/><text x="30.9617%" y="655.50"></text></g><g><title>[libc-2.31.so] (152 samples, 0.13%)</title><rect x="30.7151%" y="629" width="0.1290%" height="15" fill="rgb(213,53,17)" fg:x="36179" fg:w="152"/><text x="30.9651%" y="639.50"></text></g><g><title>alloc::vec::into_iter::IntoIter&lt;T,A&gt;::as_raw_mut_slice (18 samples, 0.02%)</title><rect x="30.8509%" y="629" width="0.0153%" height="15" fill="rgb(207,167,3)" fg:x="36339" fg:w="18"/><text x="31.1009%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;tremor_pipeline::event::Event&gt;&gt; (43 samples, 0.04%)</title><rect x="30.8441%" y="661" width="0.0365%" height="15" fill="rgb(216,98,30)" fg:x="36331" fg:w="43"/><text x="31.0941%" y="671.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (36 samples, 0.03%)</title><rect x="30.8501%" y="645" width="0.0306%" height="15" fill="rgb(236,123,15)" fg:x="36338" fg:w="36"/><text x="31.1001%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tremor_pipeline::event::Event]&gt; (14 samples, 0.01%)</title><rect x="30.8688%" y="629" width="0.0119%" height="15" fill="rgb(248,81,50)" fg:x="36360" fg:w="14"/><text x="31.1188%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (17 samples, 0.01%)</title><rect x="30.8806%" y="661" width="0.0144%" height="15" fill="rgb(214,120,4)" fg:x="36374" fg:w="17"/><text x="31.1306%" y="671.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.01%)</title><rect x="30.8806%" y="645" width="0.0144%" height="15" fill="rgb(208,179,34)" fg:x="36374" fg:w="17"/><text x="31.1306%" y="655.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (27 samples, 0.02%)</title><rect x="30.8951%" y="661" width="0.0229%" height="15" fill="rgb(227,140,7)" fg:x="36391" fg:w="27"/><text x="31.1451%" y="671.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (27 samples, 0.02%)</title><rect x="30.8951%" y="645" width="0.0229%" height="15" fill="rgb(214,22,6)" fg:x="36391" fg:w="27"/><text x="31.1451%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (27 samples, 0.02%)</title><rect x="30.8951%" y="629" width="0.0229%" height="15" fill="rgb(207,137,27)" fg:x="36391" fg:w="27"/><text x="31.1451%" y="639.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (27 samples, 0.02%)</title><rect x="30.8951%" y="613" width="0.0229%" height="15" fill="rgb(210,8,46)" fg:x="36391" fg:w="27"/><text x="31.1451%" y="623.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (202 samples, 0.17%)</title><rect x="31.1404%" y="645" width="0.1715%" height="15" fill="rgb(240,16,54)" fg:x="36680" fg:w="202"/><text x="31.3904%" y="655.50"></text></g><g><title>core::ptr::read (167 samples, 0.14%)</title><rect x="31.1701%" y="629" width="0.1418%" height="15" fill="rgb(211,209,29)" fg:x="36715" fg:w="167"/><text x="31.4201%" y="639.50"></text></g><g><title>[libc-2.31.so] (122 samples, 0.10%)</title><rect x="31.2083%" y="613" width="0.1036%" height="15" fill="rgb(226,228,24)" fg:x="36760" fg:w="122"/><text x="31.4583%" y="623.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::clone::Clone&gt;::clone (21 samples, 0.02%)</title><rect x="31.3119%" y="645" width="0.0178%" height="15" fill="rgb(222,84,9)" fg:x="36882" fg:w="21"/><text x="31.5619%" y="655.50"></text></g><g><title>[libc-2.31.so] (331 samples, 0.28%)</title><rect x="31.3298%" y="645" width="0.2810%" height="15" fill="rgb(234,203,30)" fg:x="36903" fg:w="331"/><text x="31.5798%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (333 samples, 0.28%)</title><rect x="31.6108%" y="645" width="0.2827%" height="15" fill="rgb(238,109,14)" fg:x="37234" fg:w="333"/><text x="31.8608%" y="655.50"></text></g><g><title>core::ptr::write (321 samples, 0.27%)</title><rect x="31.6209%" y="629" width="0.2725%" height="15" fill="rgb(233,206,34)" fg:x="37246" fg:w="321"/><text x="31.8709%" y="639.50"></text></g><g><title>[libc-2.31.so] (317 samples, 0.27%)</title><rect x="31.6243%" y="613" width="0.2691%" height="15" fill="rgb(220,167,47)" fg:x="37250" fg:w="317"/><text x="31.8743%" y="623.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (13 samples, 0.01%)</title><rect x="31.8935%" y="645" width="0.0110%" height="15" fill="rgb(238,105,10)" fg:x="37567" fg:w="13"/><text x="32.1435%" y="655.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue_events::{{closure}} (13 samples, 0.01%)</title><rect x="31.8935%" y="629" width="0.0110%" height="15" fill="rgb(213,227,17)" fg:x="37567" fg:w="13"/><text x="32.1435%" y="639.50"></text></g><g><title>alloc::vec::into_iter::IntoIter&lt;T,A&gt;::as_raw_mut_slice (12 samples, 0.01%)</title><rect x="31.9359%" y="613" width="0.0102%" height="15" fill="rgb(217,132,38)" fg:x="37617" fg:w="12"/><text x="32.1859%" y="623.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (12 samples, 0.01%)</title><rect x="31.9359%" y="597" width="0.0102%" height="15" fill="rgb(242,146,4)" fg:x="37617" fg:w="12"/><text x="32.1859%" y="607.50"></text></g><g><title>core::iter::traits::exact_size::ExactSizeIterator::len (12 samples, 0.01%)</title><rect x="31.9359%" y="581" width="0.0102%" height="15" fill="rgb(212,61,9)" fg:x="37617" fg:w="12"/><text x="32.1859%" y="591.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (12 samples, 0.01%)</title><rect x="31.9359%" y="565" width="0.0102%" height="15" fill="rgb(247,126,22)" fg:x="37617" fg:w="12"/><text x="32.1859%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (12 samples, 0.01%)</title><rect x="31.9359%" y="549" width="0.0102%" height="15" fill="rgb(220,196,2)" fg:x="37617" fg:w="12"/><text x="32.1859%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event),alloc::alloc::Global&gt;&gt; (28 samples, 0.02%)</title><rect x="31.9461%" y="613" width="0.0238%" height="15" fill="rgb(208,46,4)" fg:x="37629" fg:w="28"/><text x="32.1961%" y="623.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.02%)</title><rect x="31.9461%" y="597" width="0.0238%" height="15" fill="rgb(252,104,46)" fg:x="37629" fg:w="28"/><text x="32.1961%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (17 samples, 0.01%)</title><rect x="31.9554%" y="581" width="0.0144%" height="15" fill="rgb(237,152,48)" fg:x="37640" fg:w="17"/><text x="32.2054%" y="591.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.01%)</title><rect x="31.9554%" y="565" width="0.0144%" height="15" fill="rgb(221,59,37)" fg:x="37640" fg:w="17"/><text x="32.2054%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (17 samples, 0.01%)</title><rect x="31.9554%" y="549" width="0.0144%" height="15" fill="rgb(209,202,51)" fg:x="37640" fg:w="17"/><text x="32.2054%" y="559.50"></text></g><g><title>alloc::alloc::dealloc (17 samples, 0.01%)</title><rect x="31.9554%" y="533" width="0.0144%" height="15" fill="rgb(228,81,30)" fg:x="37640" fg:w="17"/><text x="32.2054%" y="543.50"></text></g><g><title>__rg_dealloc (17 samples, 0.01%)</title><rect x="31.9554%" y="517" width="0.0144%" height="15" fill="rgb(227,42,39)" fg:x="37640" fg:w="17"/><text x="32.2054%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (17 samples, 0.01%)</title><rect x="31.9554%" y="501" width="0.0144%" height="15" fill="rgb(221,26,2)" fg:x="37640" fg:w="17"/><text x="32.2054%" y="511.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (80 samples, 0.07%)</title><rect x="31.9130%" y="629" width="0.0679%" height="15" fill="rgb(254,61,31)" fg:x="37590" fg:w="80"/><text x="32.1630%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)]&gt; (13 samples, 0.01%)</title><rect x="31.9699%" y="613" width="0.0110%" height="15" fill="rgb(222,173,38)" fg:x="37657" fg:w="13"/><text x="32.2199%" y="623.50"></text></g><g><title>sn_rust_dealloc (104 samples, 0.09%)</title><rect x="31.9809%" y="629" width="0.0883%" height="15" fill="rgb(218,50,12)" fg:x="37670" fg:w="104"/><text x="32.2309%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (193 samples, 0.16%)</title><rect x="31.9121%" y="645" width="0.1639%" height="15" fill="rgb(223,88,40)" fg:x="37589" fg:w="193"/><text x="32.1621%" y="655.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (12 samples, 0.01%)</title><rect x="32.0760%" y="645" width="0.0102%" height="15" fill="rgb(237,54,19)" fg:x="37782" fg:w="12"/><text x="32.3260%" y="655.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (12 samples, 0.01%)</title><rect x="32.0760%" y="629" width="0.0102%" height="15" fill="rgb(251,129,25)" fg:x="37782" fg:w="12"/><text x="32.3260%" y="639.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (12 samples, 0.01%)</title><rect x="32.0760%" y="613" width="0.0102%" height="15" fill="rgb(238,97,19)" fg:x="37782" fg:w="12"/><text x="32.3260%" y="623.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (12 samples, 0.01%)</title><rect x="32.0760%" y="597" width="0.0102%" height="15" fill="rgb(240,169,18)" fg:x="37782" fg:w="12"/><text x="32.3260%" y="607.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (53 samples, 0.04%)</title><rect x="32.1100%" y="613" width="0.0450%" height="15" fill="rgb(230,187,49)" fg:x="37822" fg:w="53"/><text x="32.3600%" y="623.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (34 samples, 0.03%)</title><rect x="32.1261%" y="597" width="0.0289%" height="15" fill="rgb(209,44,26)" fg:x="37841" fg:w="34"/><text x="32.3761%" y="607.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (34 samples, 0.03%)</title><rect x="32.1261%" y="581" width="0.0289%" height="15" fill="rgb(244,0,6)" fg:x="37841" fg:w="34"/><text x="32.3761%" y="591.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (161 samples, 0.14%)</title><rect x="32.1855%" y="581" width="0.1367%" height="15" fill="rgb(248,18,21)" fg:x="37911" fg:w="161"/><text x="32.4355%" y="591.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (151 samples, 0.13%)</title><rect x="32.1940%" y="565" width="0.1282%" height="15" fill="rgb(245,180,19)" fg:x="37921" fg:w="151"/><text x="32.4440%" y="575.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (151 samples, 0.13%)</title><rect x="32.1940%" y="549" width="0.1282%" height="15" fill="rgb(252,118,36)" fg:x="37921" fg:w="151"/><text x="32.4440%" y="559.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (151 samples, 0.13%)</title><rect x="32.1940%" y="533" width="0.1282%" height="15" fill="rgb(210,224,19)" fg:x="37921" fg:w="151"/><text x="32.4440%" y="543.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (151 samples, 0.13%)</title><rect x="32.1940%" y="517" width="0.1282%" height="15" fill="rgb(218,30,24)" fg:x="37921" fg:w="151"/><text x="32.4440%" y="527.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (151 samples, 0.13%)</title><rect x="32.1940%" y="501" width="0.1282%" height="15" fill="rgb(219,75,50)" fg:x="37921" fg:w="151"/><text x="32.4440%" y="511.50"></text></g><g><title>[libc-2.31.so] (119 samples, 0.10%)</title><rect x="32.2212%" y="485" width="0.1010%" height="15" fill="rgb(234,72,50)" fg:x="37953" fg:w="119"/><text x="32.4712%" y="495.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (276 samples, 0.23%)</title><rect x="32.0930%" y="645" width="0.2343%" height="15" fill="rgb(219,100,48)" fg:x="37802" fg:w="276"/><text x="32.3430%" y="655.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (269 samples, 0.23%)</title><rect x="32.0989%" y="629" width="0.2284%" height="15" fill="rgb(253,5,41)" fg:x="37809" fg:w="269"/><text x="32.3489%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (203 samples, 0.17%)</title><rect x="32.1550%" y="613" width="0.1723%" height="15" fill="rgb(247,181,11)" fg:x="37875" fg:w="203"/><text x="32.4050%" y="623.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (K,L)&gt;::eq (203 samples, 0.17%)</title><rect x="32.1550%" y="597" width="0.1723%" height="15" fill="rgb(222,223,25)" fg:x="37875" fg:w="203"/><text x="32.4050%" y="607.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (79 samples, 0.07%)</title><rect x="32.3400%" y="613" width="0.0671%" height="15" fill="rgb(214,198,28)" fg:x="38093" fg:w="79"/><text x="32.5900%" y="623.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (13 samples, 0.01%)</title><rect x="32.4207%" y="597" width="0.0110%" height="15" fill="rgb(230,46,43)" fg:x="38188" fg:w="13"/><text x="32.6707%" y="607.50"></text></g><g><title>&lt;halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt; as core::convert::From&lt;halfbrown::vecmap::raw_entry::RawEntryMut&lt;K,V,S&gt;&gt;&gt;::from (13 samples, 0.01%)</title><rect x="32.4207%" y="581" width="0.0110%" height="15" fill="rgb(233,65,53)" fg:x="38188" fg:w="13"/><text x="32.6707%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="32.4411%" y="533" width="0.0127%" height="15" fill="rgb(221,121,27)" fg:x="38212" fg:w="15"/><text x="32.6911%" y="543.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="32.4411%" y="517" width="0.0127%" height="15" fill="rgb(247,70,47)" fg:x="38212" fg:w="15"/><text x="32.6911%" y="527.50"></text></g><g><title>beef::generic::Cow&lt;T,U&gt;::borrow (19 samples, 0.02%)</title><rect x="32.4538%" y="501" width="0.0161%" height="15" fill="rgb(228,85,35)" fg:x="38227" fg:w="19"/><text x="32.7038%" y="511.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (218 samples, 0.19%)</title><rect x="32.4071%" y="613" width="0.1851%" height="15" fill="rgb(209,50,18)" fg:x="38172" fg:w="218"/><text x="32.6571%" y="623.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (189 samples, 0.16%)</title><rect x="32.4317%" y="597" width="0.1605%" height="15" fill="rgb(250,19,35)" fg:x="38201" fg:w="189"/><text x="32.6817%" y="607.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (189 samples, 0.16%)</title><rect x="32.4317%" y="581" width="0.1605%" height="15" fill="rgb(253,107,29)" fg:x="38201" fg:w="189"/><text x="32.6817%" y="591.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_hash (189 samples, 0.16%)</title><rect x="32.4317%" y="565" width="0.1605%" height="15" fill="rgb(252,179,29)" fg:x="38201" fg:w="189"/><text x="32.6817%" y="575.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::search (189 samples, 0.16%)</title><rect x="32.4317%" y="549" width="0.1605%" height="15" fill="rgb(238,194,6)" fg:x="38201" fg:w="189"/><text x="32.6817%" y="559.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (163 samples, 0.14%)</title><rect x="32.4538%" y="533" width="0.1384%" height="15" fill="rgb(238,164,29)" fg:x="38227" fg:w="163"/><text x="32.7038%" y="543.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (163 samples, 0.14%)</title><rect x="32.4538%" y="517" width="0.1384%" height="15" fill="rgb(224,25,9)" fg:x="38227" fg:w="163"/><text x="32.7038%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (144 samples, 0.12%)</title><rect x="32.4699%" y="501" width="0.1223%" height="15" fill="rgb(244,153,23)" fg:x="38246" fg:w="144"/><text x="32.7199%" y="511.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (144 samples, 0.12%)</title><rect x="32.4699%" y="485" width="0.1223%" height="15" fill="rgb(212,203,14)" fg:x="38246" fg:w="144"/><text x="32.7199%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (144 samples, 0.12%)</title><rect x="32.4699%" y="469" width="0.1223%" height="15" fill="rgb(220,164,20)" fg:x="38246" fg:w="144"/><text x="32.7199%" y="479.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (144 samples, 0.12%)</title><rect x="32.4699%" y="453" width="0.1223%" height="15" fill="rgb(222,203,48)" fg:x="38246" fg:w="144"/><text x="32.7199%" y="463.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (144 samples, 0.12%)</title><rect x="32.4699%" y="437" width="0.1223%" height="15" fill="rgb(215,159,22)" fg:x="38246" fg:w="144"/><text x="32.7199%" y="447.50"></text></g><g><title>[libc-2.31.so] (57 samples, 0.05%)</title><rect x="32.5438%" y="421" width="0.0484%" height="15" fill="rgb(216,183,47)" fg:x="38333" fg:w="57"/><text x="32.7938%" y="431.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue_events (2,023 samples, 1.72%)</title><rect x="30.9180%" y="661" width="1.7175%" height="15" fill="rgb(229,195,25)" fg:x="36418" fg:w="2023"/><text x="31.1680%" y="671.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_input (363 samples, 0.31%)</title><rect x="32.3273%" y="645" width="0.3082%" height="15" fill="rgb(224,132,51)" fg:x="38078" fg:w="363"/><text x="32.5773%" y="655.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_input_n (357 samples, 0.30%)</title><rect x="32.3324%" y="629" width="0.3031%" height="15" fill="rgb(240,63,7)" fg:x="38084" fg:w="357"/><text x="32.5824%" y="639.50"></text></g><g><title>halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt;::or_insert_with (51 samples, 0.04%)</title><rect x="32.5922%" y="613" width="0.0433%" height="15" fill="rgb(249,182,41)" fg:x="38390" fg:w="51"/><text x="32.8422%" y="623.50"></text></g><g><title>halfbrown::raw_entry::RawOccupiedEntryMut&lt;K,V,S&gt;::into_key_value (27 samples, 0.02%)</title><rect x="32.6126%" y="597" width="0.0229%" height="15" fill="rgb(243,47,26)" fg:x="38414" fg:w="27"/><text x="32.8626%" y="607.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawOccupiedEntryMut&lt;K,V,S&gt;::into_key_value (12 samples, 0.01%)</title><rect x="32.6253%" y="581" width="0.0102%" height="15" fill="rgb(233,48,2)" fg:x="38429" fg:w="12"/><text x="32.8753%" y="591.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get_mut_idx (12 samples, 0.01%)</title><rect x="32.6253%" y="565" width="0.0102%" height="15" fill="rgb(244,165,34)" fg:x="38429" fg:w="12"/><text x="32.8753%" y="575.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (29 samples, 0.02%)</title><rect x="32.6499%" y="629" width="0.0246%" height="15" fill="rgb(207,89,7)" fg:x="38458" fg:w="29"/><text x="32.8999%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (19 samples, 0.02%)</title><rect x="32.7042%" y="549" width="0.0161%" height="15" fill="rgb(244,117,36)" fg:x="38522" fg:w="19"/><text x="32.9542%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (19 samples, 0.02%)</title><rect x="32.7042%" y="533" width="0.0161%" height="15" fill="rgb(226,144,34)" fg:x="38522" fg:w="19"/><text x="32.9542%" y="543.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (181 samples, 0.15%)</title><rect x="32.6745%" y="629" width="0.1537%" height="15" fill="rgb(213,23,19)" fg:x="38487" fg:w="181"/><text x="32.9245%" y="639.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (151 samples, 0.13%)</title><rect x="32.7000%" y="613" width="0.1282%" height="15" fill="rgb(217,75,12)" fg:x="38517" fg:w="151"/><text x="32.9500%" y="623.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (151 samples, 0.13%)</title><rect x="32.7000%" y="597" width="0.1282%" height="15" fill="rgb(224,159,17)" fg:x="38517" fg:w="151"/><text x="32.9500%" y="607.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_hash (151 samples, 0.13%)</title><rect x="32.7000%" y="581" width="0.1282%" height="15" fill="rgb(217,118,1)" fg:x="38517" fg:w="151"/><text x="32.9500%" y="591.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::search (151 samples, 0.13%)</title><rect x="32.7000%" y="565" width="0.1282%" height="15" fill="rgb(232,180,48)" fg:x="38517" fg:w="151"/><text x="32.9500%" y="575.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (120 samples, 0.10%)</title><rect x="32.7263%" y="549" width="0.1019%" height="15" fill="rgb(230,27,33)" fg:x="38548" fg:w="120"/><text x="32.9763%" y="559.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (120 samples, 0.10%)</title><rect x="32.7263%" y="533" width="0.1019%" height="15" fill="rgb(205,31,21)" fg:x="38548" fg:w="120"/><text x="32.9763%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (112 samples, 0.10%)</title><rect x="32.7331%" y="517" width="0.0951%" height="15" fill="rgb(253,59,4)" fg:x="38556" fg:w="112"/><text x="32.9831%" y="527.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (112 samples, 0.10%)</title><rect x="32.7331%" y="501" width="0.0951%" height="15" fill="rgb(224,201,9)" fg:x="38556" fg:w="112"/><text x="32.9831%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (112 samples, 0.10%)</title><rect x="32.7331%" y="485" width="0.0951%" height="15" fill="rgb(229,206,30)" fg:x="38556" fg:w="112"/><text x="32.9831%" y="495.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (112 samples, 0.10%)</title><rect x="32.7331%" y="469" width="0.0951%" height="15" fill="rgb(212,67,47)" fg:x="38556" fg:w="112"/><text x="32.9831%" y="479.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (112 samples, 0.10%)</title><rect x="32.7331%" y="453" width="0.0951%" height="15" fill="rgb(211,96,50)" fg:x="38556" fg:w="112"/><text x="32.9831%" y="463.50"></text></g><g><title>[libc-2.31.so] (55 samples, 0.05%)</title><rect x="32.7815%" y="437" width="0.0467%" height="15" fill="rgb(252,114,18)" fg:x="38613" fg:w="55"/><text x="33.0315%" y="447.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (5,245 samples, 4.45%)</title><rect x="28.4076%" y="709" width="4.4529%" height="15" fill="rgb(223,58,37)" fg:x="33461" fg:w="5245"/><text x="28.6576%" y="719.50">tremo..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (4,251 samples, 3.61%)</title><rect x="29.2515%" y="693" width="3.6090%" height="15" fill="rgb(237,70,4)" fg:x="34455" fg:w="4251"/><text x="29.5015%" y="703.50">trem..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (4,241 samples, 3.60%)</title><rect x="29.2599%" y="677" width="3.6005%" height="15" fill="rgb(244,85,46)" fg:x="34465" fg:w="4241"/><text x="29.5099%" y="687.50">trem..</text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_output (265 samples, 0.22%)</title><rect x="32.6355%" y="661" width="0.2250%" height="15" fill="rgb(223,39,52)" fg:x="38441" fg:w="265"/><text x="32.8855%" y="671.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_output_n (264 samples, 0.22%)</title><rect x="32.6363%" y="645" width="0.2241%" height="15" fill="rgb(218,200,14)" fg:x="38442" fg:w="264"/><text x="32.8863%" y="655.50"></text></g><g><title>halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt;::or_insert_with (38 samples, 0.03%)</title><rect x="32.8282%" y="629" width="0.0323%" height="15" fill="rgb(208,171,16)" fg:x="38668" fg:w="38"/><text x="33.0782%" y="639.50"></text></g><g><title>halfbrown::raw_entry::RawOccupiedEntryMut&lt;K,V,S&gt;::into_key_value (24 samples, 0.02%)</title><rect x="32.8401%" y="613" width="0.0204%" height="15" fill="rgb(234,200,18)" fg:x="38682" fg:w="24"/><text x="33.0901%" y="623.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawOccupiedEntryMut&lt;K,V,S&gt;::into_key_value (12 samples, 0.01%)</title><rect x="32.8503%" y="597" width="0.0102%" height="15" fill="rgb(228,45,11)" fg:x="38694" fg:w="12"/><text x="33.1003%" y="607.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get_mut_idx (12 samples, 0.01%)</title><rect x="32.8503%" y="581" width="0.0102%" height="15" fill="rgb(237,182,11)" fg:x="38694" fg:w="12"/><text x="33.1003%" y="591.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,573 samples, 4.73%)</title><rect x="28.1834%" y="725" width="4.7313%" height="15" fill="rgb(241,175,49)" fg:x="33197" fg:w="5573"/><text x="28.4334%" y="735.50">&lt;core:..</text></g><g><title>tremor_runtime::pipeline::handle_insights::{{closure}} (64 samples, 0.05%)</title><rect x="32.8605%" y="709" width="0.0543%" height="15" fill="rgb(247,38,35)" fg:x="38706" fg:w="64"/><text x="33.1105%" y="719.50"></text></g><g><title>[libc-2.31.so] (691 samples, 0.59%)</title><rect x="32.9148%" y="725" width="0.5866%" height="15" fill="rgb(228,39,49)" fg:x="38770" fg:w="691"/><text x="33.1648%" y="735.50"></text></g><g><title>sn_rust_dealloc (116 samples, 0.10%)</title><rect x="33.5108%" y="565" width="0.0985%" height="15" fill="rgb(226,101,26)" fg:x="39472" fg:w="116"/><text x="33.7608%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (128 samples, 0.11%)</title><rect x="33.5023%" y="725" width="0.1087%" height="15" fill="rgb(206,141,19)" fg:x="39462" fg:w="128"/><text x="33.7523%" y="735.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (128 samples, 0.11%)</title><rect x="33.5023%" y="709" width="0.1087%" height="15" fill="rgb(211,200,13)" fg:x="39462" fg:w="128"/><text x="33.7523%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (118 samples, 0.10%)</title><rect x="33.5108%" y="693" width="0.1002%" height="15" fill="rgb(241,121,6)" fg:x="39472" fg:w="118"/><text x="33.7608%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (118 samples, 0.10%)</title><rect x="33.5108%" y="677" width="0.1002%" height="15" fill="rgb(234,221,29)" fg:x="39472" fg:w="118"/><text x="33.7608%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (118 samples, 0.10%)</title><rect x="33.5108%" y="661" width="0.1002%" height="15" fill="rgb(229,136,5)" fg:x="39472" fg:w="118"/><text x="33.7608%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (118 samples, 0.10%)</title><rect x="33.5108%" y="645" width="0.1002%" height="15" fill="rgb(238,36,11)" fg:x="39472" fg:w="118"/><text x="33.7608%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (118 samples, 0.10%)</title><rect x="33.5108%" y="629" width="0.1002%" height="15" fill="rgb(251,55,41)" fg:x="39472" fg:w="118"/><text x="33.7608%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (118 samples, 0.10%)</title><rect x="33.5108%" y="613" width="0.1002%" height="15" fill="rgb(242,34,40)" fg:x="39472" fg:w="118"/><text x="33.7608%" y="623.50"></text></g><g><title>__rg_dealloc (118 samples, 0.10%)</title><rect x="33.5108%" y="597" width="0.1002%" height="15" fill="rgb(215,42,17)" fg:x="39472" fg:w="118"/><text x="33.7608%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (118 samples, 0.10%)</title><rect x="33.5108%" y="581" width="0.1002%" height="15" fill="rgb(207,44,46)" fg:x="39472" fg:w="118"/><text x="33.7608%" y="591.50"></text></g><g><title>async_global_executor::reactor::block_on (18,999 samples, 16.13%)</title><rect x="17.4847%" y="1077" width="16.1297%" height="15" fill="rgb(211,206,28)" fg:x="20595" fg:w="18999"/><text x="17.7347%" y="1087.50">async_global_executor::re..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (18,999 samples, 16.13%)</title><rect x="17.4847%" y="1061" width="16.1297%" height="15" fill="rgb(237,167,16)" fg:x="20595" fg:w="18999"/><text x="17.7347%" y="1071.50">async_global_executor::re..</text></g><g><title>async_io::driver::block_on (18,999 samples, 16.13%)</title><rect x="17.4847%" y="1045" width="16.1297%" height="15" fill="rgb(233,66,6)" fg:x="20595" fg:w="18999"/><text x="17.7347%" y="1055.50">async_io::driver::block_on</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (18,999 samples, 16.13%)</title><rect x="17.4847%" y="1029" width="16.1297%" height="15" fill="rgb(246,123,29)" fg:x="20595" fg:w="18999"/><text x="17.7347%" y="1039.50">&lt;futures_lite::future::Or..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,999 samples, 16.13%)</title><rect x="17.4847%" y="1013" width="16.1297%" height="15" fill="rgb(209,62,40)" fg:x="20595" fg:w="18999"/><text x="17.7347%" y="1023.50">&lt;core::future::from_gener..</text></g><g><title>async_executor::Executor::run::{{closure}} (18,999 samples, 16.13%)</title><rect x="17.4847%" y="997" width="16.1297%" height="15" fill="rgb(218,4,25)" fg:x="20595" fg:w="18999"/><text x="17.7347%" y="1007.50">async_executor::Executor:..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (18,999 samples, 16.13%)</title><rect x="17.4847%" y="981" width="16.1297%" height="15" fill="rgb(253,91,49)" fg:x="20595" fg:w="18999"/><text x="17.7347%" y="991.50">&lt;futures_lite::future::Or..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,999 samples, 16.13%)</title><rect x="17.4847%" y="965" width="16.1297%" height="15" fill="rgb(228,155,29)" fg:x="20595" fg:w="18999"/><text x="17.7347%" y="975.50">&lt;core::future::from_gener..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (18,999 samples, 16.13%)</title><rect x="17.4847%" y="949" width="16.1297%" height="15" fill="rgb(243,57,37)" fg:x="20595" fg:w="18999"/><text x="17.7347%" y="959.50">async_executor::Executor:..</text></g><g><title>async_task::runnable::Runnable::run (18,999 samples, 16.13%)</title><rect x="17.4847%" y="933" width="16.1297%" height="15" fill="rgb(244,167,17)" fg:x="20595" fg:w="18999"/><text x="17.7347%" y="943.50">async_task::runnable::Run..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (18,999 samples, 16.13%)</title><rect x="17.4847%" y="917" width="16.1297%" height="15" fill="rgb(207,181,38)" fg:x="20595" fg:w="18999"/><text x="17.7347%" y="927.50">async_task::raw::RawTask&lt;..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (18,999 samples, 16.13%)</title><rect x="17.4847%" y="901" width="16.1297%" height="15" fill="rgb(211,8,23)" fg:x="20595" fg:w="18999"/><text x="17.7347%" y="911.50">&lt;core::pin::Pin&lt;P&gt; as cor..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,999 samples, 16.13%)</title><rect x="17.4847%" y="885" width="16.1297%" height="15" fill="rgb(235,11,44)" fg:x="20595" fg:w="18999"/><text x="17.7347%" y="895.50">&lt;core::future::from_gener..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (18,999 samples, 16.13%)</title><rect x="17.4847%" y="869" width="16.1297%" height="15" fill="rgb(248,18,52)" fg:x="20595" fg:w="18999"/><text x="17.7347%" y="879.50">async_executor::Executor:..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (18,999 samples, 16.13%)</title><rect x="17.4847%" y="853" width="16.1297%" height="15" fill="rgb(208,4,7)" fg:x="20595" fg:w="18999"/><text x="17.7347%" y="863.50">&lt;async_std::task::builder..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (18,999 samples, 16.13%)</title><rect x="17.4847%" y="837" width="16.1297%" height="15" fill="rgb(240,17,39)" fg:x="20595" fg:w="18999"/><text x="17.7347%" y="847.50">async_std::task::task_loc..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (18,999 samples, 16.13%)</title><rect x="17.4847%" y="821" width="16.1297%" height="15" fill="rgb(207,170,3)" fg:x="20595" fg:w="18999"/><text x="17.7347%" y="831.50">std::thread::local::Local..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (18,999 samples, 16.13%)</title><rect x="17.4847%" y="805" width="16.1297%" height="15" fill="rgb(236,100,52)" fg:x="20595" fg:w="18999"/><text x="17.7347%" y="815.50">std::thread::local::Local..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (18,999 samples, 16.13%)</title><rect x="17.4847%" y="789" width="16.1297%" height="15" fill="rgb(246,78,51)" fg:x="20595" fg:w="18999"/><text x="17.7347%" y="799.50">async_std::task::task_loc..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (18,999 samples, 16.13%)</title><rect x="17.4847%" y="773" width="16.1297%" height="15" fill="rgb(211,17,15)" fg:x="20595" fg:w="18999"/><text x="17.7347%" y="783.50">&lt;async_std::task::builder..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,999 samples, 16.13%)</title><rect x="17.4847%" y="757" width="16.1297%" height="15" fill="rgb(209,59,46)" fg:x="20595" fg:w="18999"/><text x="17.7347%" y="767.50">&lt;core::future::from_gener..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (6,723 samples, 5.71%)</title><rect x="27.9067%" y="741" width="5.7077%" height="15" fill="rgb(210,92,25)" fg:x="32871" fg:w="6723"/><text x="28.1567%" y="751.50">tremor_..</text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (46 samples, 0.04%)</title><rect x="33.8003%" y="565" width="0.0391%" height="15" fill="rgb(238,174,52)" fg:x="39813" fg:w="46"/><text x="34.0503%" y="575.50"></text></g><g><title>[libc-2.31.so] (37 samples, 0.03%)</title><rect x="33.8079%" y="549" width="0.0314%" height="15" fill="rgb(230,73,7)" fg:x="39822" fg:w="37"/><text x="34.0579%" y="559.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (18 samples, 0.02%)</title><rect x="33.8393%" y="565" width="0.0153%" height="15" fill="rgb(243,124,40)" fg:x="39859" fg:w="18"/><text x="34.0893%" y="575.50"></text></g><g><title>[libc-2.31.so] (132 samples, 0.11%)</title><rect x="33.8580%" y="549" width="0.1121%" height="15" fill="rgb(244,170,11)" fg:x="39881" fg:w="132"/><text x="34.1080%" y="559.50"></text></g><g><title>[libc-2.31.so] (47 samples, 0.04%)</title><rect x="34.0533%" y="533" width="0.0399%" height="15" fill="rgb(207,114,54)" fg:x="40111" fg:w="47"/><text x="34.3033%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (175 samples, 0.15%)</title><rect x="34.0991%" y="533" width="0.1486%" height="15" fill="rgb(205,42,20)" fg:x="40165" fg:w="175"/><text x="34.3491%" y="543.50"></text></g><g><title>core::ops::function::FnOnce::call_once (172 samples, 0.15%)</title><rect x="34.1017%" y="517" width="0.1460%" height="15" fill="rgb(230,30,28)" fg:x="40168" fg:w="172"/><text x="34.3517%" y="527.50"></text></g><g><title>value_trait::Builder::object (172 samples, 0.15%)</title><rect x="34.1017%" y="501" width="0.1460%" height="15" fill="rgb(205,73,54)" fg:x="40168" fg:w="172"/><text x="34.3517%" y="511.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (170 samples, 0.14%)</title><rect x="34.1034%" y="485" width="0.1443%" height="15" fill="rgb(254,227,23)" fg:x="40170" fg:w="170"/><text x="34.3534%" y="495.50"></text></g><g><title>tremor_value::value::Value::Object (167 samples, 0.14%)</title><rect x="34.1059%" y="469" width="0.1418%" height="15" fill="rgb(228,202,34)" fg:x="40173" fg:w="167"/><text x="34.3559%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (80 samples, 0.07%)</title><rect x="34.2536%" y="517" width="0.0679%" height="15" fill="rgb(222,225,37)" fg:x="40347" fg:w="80"/><text x="34.5036%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (80 samples, 0.07%)</title><rect x="34.2536%" y="501" width="0.0679%" height="15" fill="rgb(221,14,54)" fg:x="40347" fg:w="80"/><text x="34.5036%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (80 samples, 0.07%)</title><rect x="34.2536%" y="485" width="0.0679%" height="15" fill="rgb(254,102,2)" fg:x="40347" fg:w="80"/><text x="34.5036%" y="495.50"></text></g><g><title>sn_rust_dealloc (63 samples, 0.05%)</title><rect x="34.2681%" y="469" width="0.0535%" height="15" fill="rgb(232,104,17)" fg:x="40364" fg:w="63"/><text x="34.5181%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (103 samples, 0.09%)</title><rect x="34.2536%" y="533" width="0.0874%" height="15" fill="rgb(250,220,14)" fg:x="40347" fg:w="103"/><text x="34.5036%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (23 samples, 0.02%)</title><rect x="34.3215%" y="517" width="0.0195%" height="15" fill="rgb(241,158,9)" fg:x="40427" fg:w="23"/><text x="34.5715%" y="527.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (23 samples, 0.02%)</title><rect x="34.3215%" y="501" width="0.0195%" height="15" fill="rgb(246,9,43)" fg:x="40427" fg:w="23"/><text x="34.5715%" y="511.50"></text></g><g><title>sn_rust_dealloc (23 samples, 0.02%)</title><rect x="34.3215%" y="485" width="0.0195%" height="15" fill="rgb(206,73,33)" fg:x="40427" fg:w="23"/><text x="34.5715%" y="495.50"></text></g><g><title>sn_rust_dealloc (16 samples, 0.01%)</title><rect x="34.3606%" y="469" width="0.0136%" height="15" fill="rgb(222,79,8)" fg:x="40473" fg:w="16"/><text x="34.6106%" y="479.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (613 samples, 0.52%)</title><rect x="33.8546%" y="565" width="0.5204%" height="15" fill="rgb(234,8,54)" fg:x="39877" fg:w="613"/><text x="34.1046%" y="575.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (477 samples, 0.40%)</title><rect x="33.9701%" y="549" width="0.4050%" height="15" fill="rgb(209,134,38)" fg:x="40013" fg:w="477"/><text x="34.2201%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (40 samples, 0.03%)</title><rect x="34.3411%" y="533" width="0.0340%" height="15" fill="rgb(230,127,29)" fg:x="40450" fg:w="40"/><text x="34.5911%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (26 samples, 0.02%)</title><rect x="34.3530%" y="517" width="0.0221%" height="15" fill="rgb(242,44,41)" fg:x="40464" fg:w="26"/><text x="34.6030%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (26 samples, 0.02%)</title><rect x="34.3530%" y="501" width="0.0221%" height="15" fill="rgb(222,56,43)" fg:x="40464" fg:w="26"/><text x="34.6030%" y="511.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (26 samples, 0.02%)</title><rect x="34.3530%" y="485" width="0.0221%" height="15" fill="rgb(238,39,47)" fg:x="40464" fg:w="26"/><text x="34.6030%" y="495.50"></text></g><g><title>[libc-2.31.so] (203 samples, 0.17%)</title><rect x="34.3750%" y="565" width="0.1723%" height="15" fill="rgb(226,79,43)" fg:x="40490" fg:w="203"/><text x="34.6250%" y="575.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,157 samples, 0.98%)</title><rect x="33.6211%" y="597" width="0.9823%" height="15" fill="rgb(242,105,53)" fg:x="39602" fg:w="1157"/><text x="33.8711%" y="607.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (1,157 samples, 0.98%)</title><rect x="33.6211%" y="581" width="0.9823%" height="15" fill="rgb(251,132,46)" fg:x="39602" fg:w="1157"/><text x="33.8711%" y="591.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data (56 samples, 0.05%)</title><rect x="34.5559%" y="565" width="0.0475%" height="15" fill="rgb(231,77,14)" fg:x="40703" fg:w="56"/><text x="34.8059%" y="575.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (89 samples, 0.08%)</title><rect x="34.6042%" y="437" width="0.0756%" height="15" fill="rgb(240,135,9)" fg:x="40760" fg:w="89"/><text x="34.8542%" y="447.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (89 samples, 0.08%)</title><rect x="34.6042%" y="421" width="0.0756%" height="15" fill="rgb(248,109,14)" fg:x="40760" fg:w="89"/><text x="34.8542%" y="431.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (89 samples, 0.08%)</title><rect x="34.6042%" y="405" width="0.0756%" height="15" fill="rgb(227,146,52)" fg:x="40760" fg:w="89"/><text x="34.8542%" y="415.50"></text></g><g><title>[libc-2.31.so] (80 samples, 0.07%)</title><rect x="34.6119%" y="389" width="0.0679%" height="15" fill="rgb(232,54,3)" fg:x="40769" fg:w="80"/><text x="34.8619%" y="399.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (169 samples, 0.14%)</title><rect x="34.6034%" y="517" width="0.1435%" height="15" fill="rgb(229,201,43)" fg:x="40759" fg:w="169"/><text x="34.8534%" y="527.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (169 samples, 0.14%)</title><rect x="34.6034%" y="501" width="0.1435%" height="15" fill="rgb(252,161,33)" fg:x="40759" fg:w="169"/><text x="34.8534%" y="511.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (169 samples, 0.14%)</title><rect x="34.6034%" y="485" width="0.1435%" height="15" fill="rgb(226,146,40)" fg:x="40759" fg:w="169"/><text x="34.8534%" y="495.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (169 samples, 0.14%)</title><rect x="34.6034%" y="469" width="0.1435%" height="15" fill="rgb(219,47,25)" fg:x="40759" fg:w="169"/><text x="34.8534%" y="479.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (169 samples, 0.14%)</title><rect x="34.6034%" y="453" width="0.1435%" height="15" fill="rgb(250,135,13)" fg:x="40759" fg:w="169"/><text x="34.8534%" y="463.50"></text></g><g><title>std::panic::catch_unwind (79 samples, 0.07%)</title><rect x="34.6798%" y="437" width="0.0671%" height="15" fill="rgb(219,229,18)" fg:x="40849" fg:w="79"/><text x="34.9298%" y="447.50"></text></g><g><title>std::panicking::try (79 samples, 0.07%)</title><rect x="34.6798%" y="421" width="0.0671%" height="15" fill="rgb(217,152,27)" fg:x="40849" fg:w="79"/><text x="34.9298%" y="431.50"></text></g><g><title>std::panicking::try::do_call (79 samples, 0.07%)</title><rect x="34.6798%" y="405" width="0.0671%" height="15" fill="rgb(225,71,47)" fg:x="40849" fg:w="79"/><text x="34.9298%" y="415.50"></text></g><g><title>[libc-2.31.so] (40 samples, 0.03%)</title><rect x="34.7129%" y="389" width="0.0340%" height="15" fill="rgb(220,139,14)" fg:x="40888" fg:w="40"/><text x="34.9629%" y="399.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (48 samples, 0.04%)</title><rect x="34.7817%" y="293" width="0.0408%" height="15" fill="rgb(247,54,32)" fg:x="40969" fg:w="48"/><text x="35.0317%" y="303.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (1,419 samples, 1.20%)</title><rect x="33.6211%" y="613" width="1.2047%" height="15" fill="rgb(252,131,39)" fg:x="39602" fg:w="1419"/><text x="33.8711%" y="623.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (262 samples, 0.22%)</title><rect x="34.6034%" y="597" width="0.2224%" height="15" fill="rgb(210,108,39)" fg:x="40759" fg:w="262"/><text x="34.8534%" y="607.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (262 samples, 0.22%)</title><rect x="34.6034%" y="581" width="0.2224%" height="15" fill="rgb(205,23,29)" fg:x="40759" fg:w="262"/><text x="34.8534%" y="591.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (262 samples, 0.22%)</title><rect x="34.6034%" y="565" width="0.2224%" height="15" fill="rgb(246,139,46)" fg:x="40759" fg:w="262"/><text x="34.8534%" y="575.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (262 samples, 0.22%)</title><rect x="34.6034%" y="549" width="0.2224%" height="15" fill="rgb(250,81,26)" fg:x="40759" fg:w="262"/><text x="34.8534%" y="559.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (262 samples, 0.22%)</title><rect x="34.6034%" y="533" width="0.2224%" height="15" fill="rgb(214,104,7)" fg:x="40759" fg:w="262"/><text x="34.8534%" y="543.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_TO&lt;_ErasedPtr&gt;::pull_data (86 samples, 0.07%)</title><rect x="34.7528%" y="517" width="0.0730%" height="15" fill="rgb(233,189,8)" fg:x="40935" fg:w="86"/><text x="35.0028%" y="527.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::pull_data (86 samples, 0.07%)</title><rect x="34.7528%" y="501" width="0.0730%" height="15" fill="rgb(228,141,17)" fg:x="40935" fg:w="86"/><text x="35.0028%" y="511.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data (83 samples, 0.07%)</title><rect x="34.7554%" y="485" width="0.0705%" height="15" fill="rgb(247,157,1)" fg:x="40938" fg:w="83"/><text x="35.0054%" y="495.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (83 samples, 0.07%)</title><rect x="34.7554%" y="469" width="0.0705%" height="15" fill="rgb(249,225,5)" fg:x="40938" fg:w="83"/><text x="35.0054%" y="479.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (83 samples, 0.07%)</title><rect x="34.7554%" y="453" width="0.0705%" height="15" fill="rgb(242,55,13)" fg:x="40938" fg:w="83"/><text x="35.0054%" y="463.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (83 samples, 0.07%)</title><rect x="34.7554%" y="437" width="0.0705%" height="15" fill="rgb(230,49,50)" fg:x="40938" fg:w="83"/><text x="35.0054%" y="447.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (81 samples, 0.07%)</title><rect x="34.7571%" y="421" width="0.0688%" height="15" fill="rgb(241,111,38)" fg:x="40940" fg:w="81"/><text x="35.0071%" y="431.50"></text></g><g><title>alloc::alloc::exchange_malloc (81 samples, 0.07%)</title><rect x="34.7571%" y="405" width="0.0688%" height="15" fill="rgb(252,155,4)" fg:x="40940" fg:w="81"/><text x="35.0071%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (81 samples, 0.07%)</title><rect x="34.7571%" y="389" width="0.0688%" height="15" fill="rgb(212,69,32)" fg:x="40940" fg:w="81"/><text x="35.0071%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (81 samples, 0.07%)</title><rect x="34.7571%" y="373" width="0.0688%" height="15" fill="rgb(243,107,47)" fg:x="40940" fg:w="81"/><text x="35.0071%" y="383.50"></text></g><g><title>alloc::alloc::alloc (81 samples, 0.07%)</title><rect x="34.7571%" y="357" width="0.0688%" height="15" fill="rgb(247,130,12)" fg:x="40940" fg:w="81"/><text x="35.0071%" y="367.50"></text></g><g><title>__rg_alloc (81 samples, 0.07%)</title><rect x="34.7571%" y="341" width="0.0688%" height="15" fill="rgb(233,74,16)" fg:x="40940" fg:w="81"/><text x="35.0071%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (81 samples, 0.07%)</title><rect x="34.7571%" y="325" width="0.0688%" height="15" fill="rgb(208,58,18)" fg:x="40940" fg:w="81"/><text x="35.0071%" y="335.50"></text></g><g><title>sn_rust_alloc (79 samples, 0.07%)</title><rect x="34.7588%" y="309" width="0.0671%" height="15" fill="rgb(242,225,1)" fg:x="40942" fg:w="79"/><text x="35.0088%" y="319.50"></text></g><g><title>async_global_executor::threading::thread_main_loop (1,430 samples, 1.21%)</title><rect x="33.6143%" y="1077" width="1.2140%" height="15" fill="rgb(249,39,40)" fg:x="39594" fg:w="1430"/><text x="33.8643%" y="1087.50"></text></g><g><title>std::panic::catch_unwind (1,430 samples, 1.21%)</title><rect x="33.6143%" y="1061" width="1.2140%" height="15" fill="rgb(207,72,44)" fg:x="39594" fg:w="1430"/><text x="33.8643%" y="1071.50"></text></g><g><title>std::panicking::try (1,430 samples, 1.21%)</title><rect x="33.6143%" y="1045" width="1.2140%" height="15" fill="rgb(215,193,12)" fg:x="39594" fg:w="1430"/><text x="33.8643%" y="1055.50"></text></g><g><title>std::panicking::try::do_call (1,430 samples, 1.21%)</title><rect x="33.6143%" y="1029" width="1.2140%" height="15" fill="rgb(248,41,39)" fg:x="39594" fg:w="1430"/><text x="33.8643%" y="1039.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (1,430 samples, 1.21%)</title><rect x="33.6143%" y="1013" width="1.2140%" height="15" fill="rgb(253,85,4)" fg:x="39594" fg:w="1430"/><text x="33.8643%" y="1023.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,430 samples, 1.21%)</title><rect x="33.6143%" y="997" width="1.2140%" height="15" fill="rgb(243,70,31)" fg:x="39594" fg:w="1430"/><text x="33.8643%" y="1007.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,430 samples, 1.21%)</title><rect x="33.6143%" y="981" width="1.2140%" height="15" fill="rgb(253,195,26)" fg:x="39594" fg:w="1430"/><text x="33.8643%" y="991.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (1,430 samples, 1.21%)</title><rect x="33.6143%" y="965" width="1.2140%" height="15" fill="rgb(243,42,11)" fg:x="39594" fg:w="1430"/><text x="33.8643%" y="975.50"></text></g><g><title>async_global_executor::reactor::block_on (1,430 samples, 1.21%)</title><rect x="33.6143%" y="949" width="1.2140%" height="15" fill="rgb(239,66,17)" fg:x="39594" fg:w="1430"/><text x="33.8643%" y="959.50"></text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (1,430 samples, 1.21%)</title><rect x="33.6143%" y="933" width="1.2140%" height="15" fill="rgb(217,132,21)" fg:x="39594" fg:w="1430"/><text x="33.8643%" y="943.50"></text></g><g><title>async_io::driver::block_on (1,430 samples, 1.21%)</title><rect x="33.6143%" y="917" width="1.2140%" height="15" fill="rgb(252,202,21)" fg:x="39594" fg:w="1430"/><text x="33.8643%" y="927.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,430 samples, 1.21%)</title><rect x="33.6143%" y="901" width="1.2140%" height="15" fill="rgb(233,98,36)" fg:x="39594" fg:w="1430"/><text x="33.8643%" y="911.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,430 samples, 1.21%)</title><rect x="33.6143%" y="885" width="1.2140%" height="15" fill="rgb(216,153,54)" fg:x="39594" fg:w="1430"/><text x="33.8643%" y="895.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (1,430 samples, 1.21%)</title><rect x="33.6143%" y="869" width="1.2140%" height="15" fill="rgb(250,99,7)" fg:x="39594" fg:w="1430"/><text x="33.8643%" y="879.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,430 samples, 1.21%)</title><rect x="33.6143%" y="853" width="1.2140%" height="15" fill="rgb(207,56,50)" fg:x="39594" fg:w="1430"/><text x="33.8643%" y="863.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,430 samples, 1.21%)</title><rect x="33.6143%" y="837" width="1.2140%" height="15" fill="rgb(244,61,34)" fg:x="39594" fg:w="1430"/><text x="33.8643%" y="847.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (1,430 samples, 1.21%)</title><rect x="33.6143%" y="821" width="1.2140%" height="15" fill="rgb(241,50,38)" fg:x="39594" fg:w="1430"/><text x="33.8643%" y="831.50"></text></g><g><title>async_task::runnable::Runnable::run (1,430 samples, 1.21%)</title><rect x="33.6143%" y="805" width="1.2140%" height="15" fill="rgb(212,166,30)" fg:x="39594" fg:w="1430"/><text x="33.8643%" y="815.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (1,430 samples, 1.21%)</title><rect x="33.6143%" y="789" width="1.2140%" height="15" fill="rgb(249,127,32)" fg:x="39594" fg:w="1430"/><text x="33.8643%" y="799.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,430 samples, 1.21%)</title><rect x="33.6143%" y="773" width="1.2140%" height="15" fill="rgb(209,103,0)" fg:x="39594" fg:w="1430"/><text x="33.8643%" y="783.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,430 samples, 1.21%)</title><rect x="33.6143%" y="757" width="1.2140%" height="15" fill="rgb(238,209,51)" fg:x="39594" fg:w="1430"/><text x="33.8643%" y="767.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (1,430 samples, 1.21%)</title><rect x="33.6143%" y="741" width="1.2140%" height="15" fill="rgb(237,56,23)" fg:x="39594" fg:w="1430"/><text x="33.8643%" y="751.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (1,430 samples, 1.21%)</title><rect x="33.6143%" y="725" width="1.2140%" height="15" fill="rgb(215,153,46)" fg:x="39594" fg:w="1430"/><text x="33.8643%" y="735.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (1,430 samples, 1.21%)</title><rect x="33.6143%" y="709" width="1.2140%" height="15" fill="rgb(224,49,31)" fg:x="39594" fg:w="1430"/><text x="33.8643%" y="719.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,430 samples, 1.21%)</title><rect x="33.6143%" y="693" width="1.2140%" height="15" fill="rgb(250,18,42)" fg:x="39594" fg:w="1430"/><text x="33.8643%" y="703.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,430 samples, 1.21%)</title><rect x="33.6143%" y="677" width="1.2140%" height="15" fill="rgb(215,176,39)" fg:x="39594" fg:w="1430"/><text x="33.8643%" y="687.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (1,430 samples, 1.21%)</title><rect x="33.6143%" y="661" width="1.2140%" height="15" fill="rgb(223,77,29)" fg:x="39594" fg:w="1430"/><text x="33.8643%" y="671.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,430 samples, 1.21%)</title><rect x="33.6143%" y="645" width="1.2140%" height="15" fill="rgb(234,94,52)" fg:x="39594" fg:w="1430"/><text x="33.8643%" y="655.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,430 samples, 1.21%)</title><rect x="33.6143%" y="629" width="1.2140%" height="15" fill="rgb(220,154,50)" fg:x="39594" fg:w="1430"/><text x="33.8643%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="35.0652%" y="469" width="0.0136%" height="15" fill="rgb(212,11,10)" fg:x="41303" fg:w="16"/><text x="35.3152%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (16 samples, 0.01%)</title><rect x="35.0652%" y="453" width="0.0136%" height="15" fill="rgb(205,166,19)" fg:x="41303" fg:w="16"/><text x="35.3152%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (12 samples, 0.01%)</title><rect x="35.0686%" y="437" width="0.0102%" height="15" fill="rgb(244,198,16)" fg:x="41307" fg:w="12"/><text x="35.3186%" y="447.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (22 samples, 0.02%)</title><rect x="35.0618%" y="485" width="0.0187%" height="15" fill="rgb(219,69,12)" fg:x="41299" fg:w="22"/><text x="35.3118%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::deref::Deref for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::deref (12 samples, 0.01%)</title><rect x="35.0805%" y="485" width="0.0102%" height="15" fill="rgb(245,30,7)" fg:x="41321" fg:w="12"/><text x="35.3305%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::as_slice (12 samples, 0.01%)</title><rect x="35.0805%" y="469" width="0.0102%" height="15" fill="rgb(218,221,48)" fg:x="41321" fg:w="12"/><text x="35.3305%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (20 samples, 0.02%)</title><rect x="35.1009%" y="485" width="0.0170%" height="15" fill="rgb(216,66,15)" fg:x="41345" fg:w="20"/><text x="35.3509%" y="495.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (20 samples, 0.02%)</title><rect x="35.1009%" y="469" width="0.0170%" height="15" fill="rgb(226,122,50)" fg:x="41345" fg:w="20"/><text x="35.3509%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (20 samples, 0.02%)</title><rect x="35.1009%" y="453" width="0.0170%" height="15" fill="rgb(239,156,16)" fg:x="41345" fg:w="20"/><text x="35.3509%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (20 samples, 0.02%)</title><rect x="35.1009%" y="437" width="0.0170%" height="15" fill="rgb(224,27,38)" fg:x="41345" fg:w="20"/><text x="35.3509%" y="447.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (12 samples, 0.01%)</title><rect x="35.1077%" y="421" width="0.0102%" height="15" fill="rgb(224,39,27)" fg:x="41353" fg:w="12"/><text x="35.3577%" y="431.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (12 samples, 0.01%)</title><rect x="35.1077%" y="405" width="0.0102%" height="15" fill="rgb(215,92,29)" fg:x="41353" fg:w="12"/><text x="35.3577%" y="415.50"></text></g><g><title>sn_rust_dealloc (132 samples, 0.11%)</title><rect x="35.1501%" y="325" width="0.1121%" height="15" fill="rgb(207,159,16)" fg:x="41403" fg:w="132"/><text x="35.4001%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (187 samples, 0.16%)</title><rect x="35.1272%" y="389" width="0.1588%" height="15" fill="rgb(238,163,47)" fg:x="41376" fg:w="187"/><text x="35.3772%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::vec::private::RVec&lt;u8&gt;]&gt; (187 samples, 0.16%)</title><rect x="35.1272%" y="373" width="0.1588%" height="15" fill="rgb(219,91,49)" fg:x="41376" fg:w="187"/><text x="35.3772%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (176 samples, 0.15%)</title><rect x="35.1366%" y="357" width="0.1494%" height="15" fill="rgb(227,167,31)" fg:x="41387" fg:w="176"/><text x="35.3866%" y="367.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (176 samples, 0.15%)</title><rect x="35.1366%" y="341" width="0.1494%" height="15" fill="rgb(234,80,54)" fg:x="41387" fg:w="176"/><text x="35.3866%" y="351.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (28 samples, 0.02%)</title><rect x="35.2622%" y="325" width="0.0238%" height="15" fill="rgb(212,114,2)" fg:x="41535" fg:w="28"/><text x="35.5122%" y="335.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (204 samples, 0.17%)</title><rect x="35.1238%" y="453" width="0.1732%" height="15" fill="rgb(234,50,24)" fg:x="41372" fg:w="204"/><text x="35.3738%" y="463.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (201 samples, 0.17%)</title><rect x="35.1264%" y="437" width="0.1706%" height="15" fill="rgb(221,68,8)" fg:x="41375" fg:w="201"/><text x="35.3764%" y="447.50"></text></g><g><title>core::mem::drop (200 samples, 0.17%)</title><rect x="35.1272%" y="421" width="0.1698%" height="15" fill="rgb(254,180,31)" fg:x="41376" fg:w="200"/><text x="35.3772%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (200 samples, 0.17%)</title><rect x="35.1272%" y="405" width="0.1698%" height="15" fill="rgb(247,130,50)" fg:x="41376" fg:w="200"/><text x="35.3772%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="35.2860%" y="389" width="0.0110%" height="15" fill="rgb(211,109,4)" fg:x="41563" fg:w="13"/><text x="35.5360%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="35.2860%" y="373" width="0.0110%" height="15" fill="rgb(238,50,21)" fg:x="41563" fg:w="13"/><text x="35.5360%" y="383.50"></text></g><g><title>sn_rust_dealloc (31 samples, 0.03%)</title><rect x="35.2970%" y="453" width="0.0263%" height="15" fill="rgb(225,57,45)" fg:x="41576" fg:w="31"/><text x="35.5470%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (237 samples, 0.20%)</title><rect x="35.1230%" y="485" width="0.2012%" height="15" fill="rgb(209,196,50)" fg:x="41371" fg:w="237"/><text x="35.3730%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (237 samples, 0.20%)</title><rect x="35.1230%" y="469" width="0.2012%" height="15" fill="rgb(242,140,13)" fg:x="41371" fg:w="237"/><text x="35.3730%" y="479.50"></text></g><g><title>sn_rust_dealloc (100 samples, 0.08%)</title><rect x="35.3369%" y="389" width="0.0849%" height="15" fill="rgb(217,111,7)" fg:x="41623" fg:w="100"/><text x="35.5869%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (119 samples, 0.10%)</title><rect x="35.3267%" y="437" width="0.1010%" height="15" fill="rgb(253,193,51)" fg:x="41611" fg:w="119"/><text x="35.5767%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (119 samples, 0.10%)</title><rect x="35.3267%" y="421" width="0.1010%" height="15" fill="rgb(252,70,29)" fg:x="41611" fg:w="119"/><text x="35.5767%" y="431.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (119 samples, 0.10%)</title><rect x="35.3267%" y="405" width="0.1010%" height="15" fill="rgb(232,127,12)" fg:x="41611" fg:w="119"/><text x="35.5767%" y="415.50"></text></g><g><title>sn_rust_dealloc (109 samples, 0.09%)</title><rect x="35.7054%" y="261" width="0.0925%" height="15" fill="rgb(211,180,21)" fg:x="42057" fg:w="109"/><text x="35.9554%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (427 samples, 0.36%)</title><rect x="35.4371%" y="341" width="0.3625%" height="15" fill="rgb(229,72,13)" fg:x="41741" fg:w="427"/><text x="35.6871%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (427 samples, 0.36%)</title><rect x="35.4371%" y="325" width="0.3625%" height="15" fill="rgb(240,211,49)" fg:x="41741" fg:w="427"/><text x="35.6871%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (418 samples, 0.35%)</title><rect x="35.4447%" y="309" width="0.3549%" height="15" fill="rgb(219,149,40)" fg:x="41750" fg:w="418"/><text x="35.6947%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (418 samples, 0.35%)</title><rect x="35.4447%" y="293" width="0.3549%" height="15" fill="rgb(210,127,46)" fg:x="41750" fg:w="418"/><text x="35.6947%" y="303.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (418 samples, 0.35%)</title><rect x="35.4447%" y="277" width="0.3549%" height="15" fill="rgb(220,106,7)" fg:x="41750" fg:w="418"/><text x="35.6947%" y="287.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (441 samples, 0.37%)</title><rect x="35.4312%" y="405" width="0.3744%" height="15" fill="rgb(249,31,22)" fg:x="41734" fg:w="441"/><text x="35.6812%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (438 samples, 0.37%)</title><rect x="35.4337%" y="389" width="0.3719%" height="15" fill="rgb(253,1,49)" fg:x="41737" fg:w="438"/><text x="35.6837%" y="399.50"></text></g><g><title>core::mem::drop (434 samples, 0.37%)</title><rect x="35.4371%" y="373" width="0.3685%" height="15" fill="rgb(227,144,33)" fg:x="41741" fg:w="434"/><text x="35.6871%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (434 samples, 0.37%)</title><rect x="35.4371%" y="357" width="0.3685%" height="15" fill="rgb(249,163,44)" fg:x="41741" fg:w="434"/><text x="35.6871%" y="367.50"></text></g><g><title>sn_rust_dealloc (50 samples, 0.04%)</title><rect x="35.8056%" y="405" width="0.0424%" height="15" fill="rgb(234,15,39)" fg:x="42175" fg:w="50"/><text x="36.0556%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (619 samples, 0.53%)</title><rect x="35.3242%" y="469" width="0.5255%" height="15" fill="rgb(207,66,16)" fg:x="41608" fg:w="619"/><text x="35.5742%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (616 samples, 0.52%)</title><rect x="35.3267%" y="453" width="0.5230%" height="15" fill="rgb(233,112,24)" fg:x="41611" fg:w="616"/><text x="35.5767%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (497 samples, 0.42%)</title><rect x="35.4278%" y="437" width="0.4219%" height="15" fill="rgb(230,90,22)" fg:x="41730" fg:w="497"/><text x="35.6778%" y="447.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (497 samples, 0.42%)</title><rect x="35.4278%" y="421" width="0.4219%" height="15" fill="rgb(229,61,13)" fg:x="41730" fg:w="497"/><text x="35.6778%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (12 samples, 0.01%)</title><rect x="35.8497%" y="469" width="0.0102%" height="15" fill="rgb(225,57,24)" fg:x="42227" fg:w="12"/><text x="36.0997%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (12 samples, 0.01%)</title><rect x="35.8497%" y="453" width="0.0102%" height="15" fill="rgb(208,169,48)" fg:x="42227" fg:w="12"/><text x="36.0997%" y="463.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (12 samples, 0.01%)</title><rect x="35.8497%" y="437" width="0.0102%" height="15" fill="rgb(244,218,51)" fg:x="42227" fg:w="12"/><text x="36.0997%" y="447.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::next_n (22 samples, 0.02%)</title><rect x="36.1545%" y="293" width="0.0187%" height="15" fill="rgb(214,148,10)" fg:x="42586" fg:w="22"/><text x="36.4045%" y="303.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (16 samples, 0.01%)</title><rect x="36.1596%" y="277" width="0.0136%" height="15" fill="rgb(225,174,27)" fg:x="42592" fg:w="16"/><text x="36.4096%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (56 samples, 0.05%)</title><rect x="36.1502%" y="325" width="0.0475%" height="15" fill="rgb(230,96,26)" fg:x="42581" fg:w="56"/><text x="36.4002%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (56 samples, 0.05%)</title><rect x="36.1502%" y="309" width="0.0475%" height="15" fill="rgb(232,10,30)" fg:x="42581" fg:w="56"/><text x="36.4002%" y="319.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (18 samples, 0.02%)</title><rect x="36.1825%" y="293" width="0.0153%" height="15" fill="rgb(222,8,50)" fg:x="42619" fg:w="18"/><text x="36.4325%" y="303.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (15 samples, 0.01%)</title><rect x="36.2097%" y="293" width="0.0127%" height="15" fill="rgb(213,81,27)" fg:x="42651" fg:w="15"/><text x="36.4597%" y="303.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (15 samples, 0.01%)</title><rect x="36.2097%" y="277" width="0.0127%" height="15" fill="rgb(245,50,10)" fg:x="42651" fg:w="15"/><text x="36.4597%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;&gt; (504 samples, 0.43%)</title><rect x="36.2224%" y="277" width="0.4279%" height="15" fill="rgb(216,100,18)" fg:x="42666" fg:w="504"/><text x="36.4724%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt; (18 samples, 0.02%)</title><rect x="36.6350%" y="261" width="0.0153%" height="15" fill="rgb(236,147,54)" fg:x="43152" fg:w="18"/><text x="36.8850%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (590 samples, 0.50%)</title><rect x="36.2224%" y="293" width="0.5009%" height="15" fill="rgb(205,143,26)" fg:x="42666" fg:w="590"/><text x="36.4724%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (86 samples, 0.07%)</title><rect x="36.6503%" y="277" width="0.0730%" height="15" fill="rgb(236,26,9)" fg:x="43170" fg:w="86"/><text x="36.9003%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (693 samples, 0.59%)</title><rect x="36.1978%" y="309" width="0.5883%" height="15" fill="rgb(221,165,53)" fg:x="42637" fg:w="693"/><text x="36.4478%" y="319.50"></text></g><g><title>sn_rust_dealloc (74 samples, 0.06%)</title><rect x="36.7233%" y="293" width="0.0628%" height="15" fill="rgb(214,110,17)" fg:x="43256" fg:w="74"/><text x="36.9733%" y="303.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::drop (704 samples, 0.60%)</title><rect x="36.1978%" y="325" width="0.5977%" height="15" fill="rgb(237,197,12)" fg:x="42637" fg:w="704"/><text x="36.4478%" y="335.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (471 samples, 0.40%)</title><rect x="36.8056%" y="293" width="0.3999%" height="15" fill="rgb(205,84,17)" fg:x="43353" fg:w="471"/><text x="37.0556%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (471 samples, 0.40%)</title><rect x="36.8056%" y="277" width="0.3999%" height="15" fill="rgb(237,18,45)" fg:x="43353" fg:w="471"/><text x="37.0556%" y="287.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (497 samples, 0.42%)</title><rect x="36.8048%" y="309" width="0.4219%" height="15" fill="rgb(221,87,14)" fg:x="43352" fg:w="497"/><text x="37.0548%" y="319.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_full (25 samples, 0.02%)</title><rect x="37.2055%" y="293" width="0.0212%" height="15" fill="rgb(238,186,15)" fg:x="43824" fg:w="25"/><text x="37.4555%" y="303.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (19 samples, 0.02%)</title><rect x="37.2106%" y="277" width="0.0161%" height="15" fill="rgb(208,115,11)" fg:x="43830" fg:w="19"/><text x="37.4606%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (19 samples, 0.02%)</title><rect x="37.2106%" y="261" width="0.0161%" height="15" fill="rgb(254,175,0)" fg:x="43830" fg:w="19"/><text x="37.4606%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (1,274 samples, 1.08%)</title><rect x="36.1468%" y="341" width="1.0816%" height="15" fill="rgb(227,24,42)" fg:x="42577" fg:w="1274"/><text x="36.3968%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (499 samples, 0.42%)</title><rect x="36.8048%" y="325" width="0.4236%" height="15" fill="rgb(223,211,37)" fg:x="43352" fg:w="499"/><text x="37.0548%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (1,295 samples, 1.10%)</title><rect x="36.1468%" y="389" width="1.0994%" height="15" fill="rgb(235,49,27)" fg:x="42577" fg:w="1295"/><text x="36.3968%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (1,295 samples, 1.10%)</title><rect x="36.1468%" y="373" width="1.0994%" height="15" fill="rgb(254,97,51)" fg:x="42577" fg:w="1295"/><text x="36.3968%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,295 samples, 1.10%)</title><rect x="36.1468%" y="357" width="1.0994%" height="15" fill="rgb(249,51,40)" fg:x="42577" fg:w="1295"/><text x="36.3968%" y="367.50"></text></g><g><title>sn_rust_dealloc (75 samples, 0.06%)</title><rect x="37.2463%" y="389" width="0.0637%" height="15" fill="rgb(210,128,45)" fg:x="43872" fg:w="75"/><text x="37.4963%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (1,741 samples, 1.48%)</title><rect x="35.8743%" y="437" width="1.4781%" height="15" fill="rgb(224,137,50)" fg:x="42256" fg:w="1741"/><text x="36.1243%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (1,741 samples, 1.48%)</title><rect x="35.8743%" y="421" width="1.4781%" height="15" fill="rgb(242,15,9)" fg:x="42256" fg:w="1741"/><text x="36.1243%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (1,741 samples, 1.48%)</title><rect x="35.8743%" y="405" width="1.4781%" height="15" fill="rgb(233,187,41)" fg:x="42256" fg:w="1741"/><text x="36.1243%" y="415.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (49 samples, 0.04%)</title><rect x="37.3108%" y="389" width="0.0416%" height="15" fill="rgb(227,2,29)" fg:x="43948" fg:w="49"/><text x="37.5608%" y="399.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (1,755 samples, 1.49%)</title><rect x="35.8692%" y="453" width="1.4900%" height="15" fill="rgb(222,70,3)" fg:x="42250" fg:w="1755"/><text x="36.1192%" y="463.50"></text></g><g><title>abi_stable::std_types::arc::private::RArc&lt;T&gt;::data (206 samples, 0.17%)</title><rect x="37.3880%" y="293" width="0.1749%" height="15" fill="rgb(213,11,42)" fg:x="44039" fg:w="206"/><text x="37.6380%" y="303.50"></text></g><g><title>core::mem::drop (467 samples, 0.40%)</title><rect x="37.5740%" y="213" width="0.3965%" height="15" fill="rgb(225,150,9)" fg:x="44258" fg:w="467"/><text x="37.8240%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (467 samples, 0.40%)</title><rect x="37.5740%" y="197" width="0.3965%" height="15" fill="rgb(230,162,45)" fg:x="44258" fg:w="467"/><text x="37.8240%" y="207.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (467 samples, 0.40%)</title><rect x="37.5740%" y="181" width="0.3965%" height="15" fill="rgb(222,14,52)" fg:x="44258" fg:w="467"/><text x="37.8240%" y="191.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (458 samples, 0.39%)</title><rect x="37.5816%" y="165" width="0.3888%" height="15" fill="rgb(254,198,14)" fg:x="44267" fg:w="458"/><text x="37.8316%" y="175.50"></text></g><g><title>core::sync::atomic::atomic_sub (458 samples, 0.39%)</title><rect x="37.5816%" y="149" width="0.3888%" height="15" fill="rgb(220,217,30)" fg:x="44267" fg:w="458"/><text x="37.8316%" y="159.50"></text></g><g><title>sn_rust_dealloc (86 samples, 0.07%)</title><rect x="37.9849%" y="165" width="0.0730%" height="15" fill="rgb(215,146,41)" fg:x="44742" fg:w="86"/><text x="38.2349%" y="175.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (646 samples, 0.55%)</title><rect x="37.5697%" y="229" width="0.5484%" height="15" fill="rgb(217,27,36)" fg:x="44253" fg:w="646"/><text x="37.8197%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (174 samples, 0.15%)</title><rect x="37.9704%" y="213" width="0.1477%" height="15" fill="rgb(219,218,39)" fg:x="44725" fg:w="174"/><text x="38.2204%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (174 samples, 0.15%)</title><rect x="37.9704%" y="197" width="0.1477%" height="15" fill="rgb(219,4,42)" fg:x="44725" fg:w="174"/><text x="38.2204%" y="207.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (174 samples, 0.15%)</title><rect x="37.9704%" y="181" width="0.1477%" height="15" fill="rgb(249,119,36)" fg:x="44725" fg:w="174"/><text x="38.2204%" y="191.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (71 samples, 0.06%)</title><rect x="38.0579%" y="165" width="0.0603%" height="15" fill="rgb(209,23,33)" fg:x="44828" fg:w="71"/><text x="38.3079%" y="175.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (501 samples, 0.43%)</title><rect x="38.1182%" y="229" width="0.4253%" height="15" fill="rgb(211,10,0)" fg:x="44899" fg:w="501"/><text x="38.3682%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_sub (501 samples, 0.43%)</title><rect x="38.1182%" y="213" width="0.4253%" height="15" fill="rgb(208,99,37)" fg:x="44899" fg:w="501"/><text x="38.3682%" y="223.50"></text></g><g><title>sn_rust_dealloc (39 samples, 0.03%)</title><rect x="38.5435%" y="229" width="0.0331%" height="15" fill="rgb(213,132,31)" fg:x="45400" fg:w="39"/><text x="38.7935%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,430 samples, 1.21%)</title><rect x="37.3643%" y="357" width="1.2140%" height="15" fill="rgb(243,129,40)" fg:x="44011" fg:w="1430"/><text x="37.6143%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (1,430 samples, 1.21%)</title><rect x="37.3643%" y="341" width="1.2140%" height="15" fill="rgb(210,66,33)" fg:x="44011" fg:w="1430"/><text x="37.6143%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (1,414 samples, 1.20%)</title><rect x="37.3779%" y="325" width="1.2005%" height="15" fill="rgb(209,189,4)" fg:x="44027" fg:w="1414"/><text x="37.6279%" y="335.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (1,414 samples, 1.20%)</title><rect x="37.3779%" y="309" width="1.2005%" height="15" fill="rgb(214,107,37)" fg:x="44027" fg:w="1414"/><text x="37.6279%" y="319.50"></text></g><g><title>abi_stable::std_types::arc::vtable_mod::destructor_arc (1,196 samples, 1.02%)</title><rect x="37.5629%" y="293" width="1.0154%" height="15" fill="rgb(245,88,54)" fg:x="44245" fg:w="1196"/><text x="37.8129%" y="303.50"></text></g><g><title>core::mem::drop (1,188 samples, 1.01%)</title><rect x="37.5697%" y="277" width="1.0086%" height="15" fill="rgb(205,146,20)" fg:x="44253" fg:w="1188"/><text x="37.8197%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (1,188 samples, 1.01%)</title><rect x="37.5697%" y="261" width="1.0086%" height="15" fill="rgb(220,161,25)" fg:x="44253" fg:w="1188"/><text x="37.8197%" y="271.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1,188 samples, 1.01%)</title><rect x="37.5697%" y="245" width="1.0086%" height="15" fill="rgb(215,152,15)" fg:x="44253" fg:w="1188"/><text x="37.8197%" y="255.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (1,448 samples, 1.23%)</title><rect x="37.3592%" y="421" width="1.2293%" height="15" fill="rgb(233,192,44)" fg:x="44005" fg:w="1448"/><text x="37.6092%" y="431.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (1,447 samples, 1.23%)</title><rect x="37.3600%" y="405" width="1.2285%" height="15" fill="rgb(240,170,46)" fg:x="44006" fg:w="1447"/><text x="37.6100%" y="415.50"></text></g><g><title>core::mem::drop (1,442 samples, 1.22%)</title><rect x="37.3643%" y="389" width="1.2242%" height="15" fill="rgb(207,104,33)" fg:x="44011" fg:w="1442"/><text x="37.6143%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (1,442 samples, 1.22%)</title><rect x="37.3643%" y="373" width="1.2242%" height="15" fill="rgb(219,21,39)" fg:x="44011" fg:w="1442"/><text x="37.6143%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (12 samples, 0.01%)</title><rect x="38.5783%" y="357" width="0.0102%" height="15" fill="rgb(214,133,29)" fg:x="45441" fg:w="12"/><text x="38.8283%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.01%)</title><rect x="38.5783%" y="341" width="0.0102%" height="15" fill="rgb(226,93,6)" fg:x="45441" fg:w="12"/><text x="38.8283%" y="351.50"></text></g><g><title>sn_rust_dealloc (41 samples, 0.03%)</title><rect x="38.5885%" y="421" width="0.0348%" height="15" fill="rgb(252,222,34)" fg:x="45453" fg:w="41"/><text x="38.8385%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (1,491 samples, 1.27%)</title><rect x="37.3592%" y="453" width="1.2658%" height="15" fill="rgb(252,92,48)" fg:x="44005" fg:w="1491"/><text x="37.6092%" y="463.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (1,491 samples, 1.27%)</title><rect x="37.3592%" y="437" width="1.2658%" height="15" fill="rgb(245,223,24)" fg:x="44005" fg:w="1491"/><text x="37.6092%" y="447.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::next_n (59 samples, 0.05%)</title><rect x="38.6861%" y="213" width="0.0501%" height="15" fill="rgb(205,176,3)" fg:x="45568" fg:w="59"/><text x="38.9361%" y="223.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (56 samples, 0.05%)</title><rect x="38.6887%" y="197" width="0.0475%" height="15" fill="rgb(235,151,15)" fg:x="45571" fg:w="56"/><text x="38.9387%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (135 samples, 0.11%)</title><rect x="38.6802%" y="245" width="0.1146%" height="15" fill="rgb(237,209,11)" fg:x="45561" fg:w="135"/><text x="38.9302%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (135 samples, 0.11%)</title><rect x="38.6802%" y="229" width="0.1146%" height="15" fill="rgb(243,227,24)" fg:x="45561" fg:w="135"/><text x="38.9302%" y="239.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (63 samples, 0.05%)</title><rect x="38.7413%" y="213" width="0.0535%" height="15" fill="rgb(239,193,16)" fg:x="45633" fg:w="63"/><text x="38.9913%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::from_raw_parts (12 samples, 0.01%)</title><rect x="38.8483%" y="181" width="0.0102%" height="15" fill="rgb(231,27,9)" fg:x="45759" fg:w="12"/><text x="39.0983%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (12 samples, 0.01%)</title><rect x="38.8483%" y="165" width="0.0102%" height="15" fill="rgb(219,169,10)" fg:x="45759" fg:w="12"/><text x="39.0983%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (455 samples, 0.39%)</title><rect x="38.8585%" y="149" width="0.3863%" height="15" fill="rgb(244,229,43)" fg:x="45771" fg:w="455"/><text x="39.1085%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tremor_value::value::Value]&gt; (451 samples, 0.38%)</title><rect x="38.8619%" y="133" width="0.3829%" height="15" fill="rgb(254,38,20)" fg:x="45775" fg:w="451"/><text x="39.1119%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (420 samples, 0.36%)</title><rect x="38.8882%" y="117" width="0.3566%" height="15" fill="rgb(250,47,30)" fg:x="45806" fg:w="420"/><text x="39.1382%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt; (27 samples, 0.02%)</title><rect x="39.2218%" y="101" width="0.0229%" height="15" fill="rgb(224,124,36)" fg:x="46199" fg:w="27"/><text x="39.4718%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (12 samples, 0.01%)</title><rect x="39.2448%" y="117" width="0.0102%" height="15" fill="rgb(246,68,51)" fg:x="46226" fg:w="12"/><text x="39.4948%" y="127.50"></text></g><g><title>alloc::alloc::dealloc (12 samples, 0.01%)</title><rect x="39.2448%" y="101" width="0.0102%" height="15" fill="rgb(253,43,49)" fg:x="46226" fg:w="12"/><text x="39.4948%" y="111.50"></text></g><g><title>__rg_dealloc (12 samples, 0.01%)</title><rect x="39.2448%" y="85" width="0.0102%" height="15" fill="rgb(219,54,36)" fg:x="46226" fg:w="12"/><text x="39.4948%" y="95.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (12 samples, 0.01%)</title><rect x="39.2448%" y="69" width="0.0102%" height="15" fill="rgb(227,133,34)" fg:x="46226" fg:w="12"/><text x="39.4948%" y="79.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (515 samples, 0.44%)</title><rect x="38.8313%" y="213" width="0.4372%" height="15" fill="rgb(247,227,15)" fg:x="45739" fg:w="515"/><text x="39.0813%" y="223.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (498 samples, 0.42%)</title><rect x="38.8457%" y="197" width="0.4228%" height="15" fill="rgb(229,96,14)" fg:x="45756" fg:w="498"/><text x="39.0957%" y="207.50"></text></g><g><title>core::mem::drop (483 samples, 0.41%)</title><rect x="38.8585%" y="181" width="0.4101%" height="15" fill="rgb(220,79,17)" fg:x="45771" fg:w="483"/><text x="39.1085%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;tremor_value::value::Value&gt;&gt; (483 samples, 0.41%)</title><rect x="38.8585%" y="165" width="0.4101%" height="15" fill="rgb(205,131,53)" fg:x="45771" fg:w="483"/><text x="39.1085%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;tremor_value::value::Value&gt;&gt; (28 samples, 0.02%)</title><rect x="39.2448%" y="149" width="0.0238%" height="15" fill="rgb(209,50,29)" fg:x="46226" fg:w="28"/><text x="39.4948%" y="159.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.02%)</title><rect x="39.2448%" y="133" width="0.0238%" height="15" fill="rgb(245,86,46)" fg:x="46226" fg:w="28"/><text x="39.4948%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (16 samples, 0.01%)</title><rect x="39.2549%" y="117" width="0.0136%" height="15" fill="rgb(235,66,46)" fg:x="46238" fg:w="16"/><text x="39.5049%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;&gt; (195 samples, 0.17%)</title><rect x="39.2685%" y="197" width="0.1656%" height="15" fill="rgb(232,148,31)" fg:x="46254" fg:w="195"/><text x="39.5185%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt; (68 samples, 0.06%)</title><rect x="39.3763%" y="181" width="0.0577%" height="15" fill="rgb(217,149,8)" fg:x="46381" fg:w="68"/><text x="39.6263%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (473 samples, 0.40%)</title><rect x="39.2685%" y="213" width="0.4016%" height="15" fill="rgb(209,183,11)" fg:x="46254" fg:w="473"/><text x="39.5185%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (278 samples, 0.24%)</title><rect x="39.4341%" y="197" width="0.2360%" height="15" fill="rgb(208,55,20)" fg:x="46449" fg:w="278"/><text x="39.6841%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_value::value::Value&gt;&gt; (44 samples, 0.04%)</title><rect x="39.6327%" y="181" width="0.0374%" height="15" fill="rgb(218,39,14)" fg:x="46683" fg:w="44"/><text x="39.8827%" y="191.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (44 samples, 0.04%)</title><rect x="39.6327%" y="165" width="0.0374%" height="15" fill="rgb(216,169,33)" fg:x="46683" fg:w="44"/><text x="39.8827%" y="175.50"></text></g><g><title>sn_rust_dealloc (178 samples, 0.15%)</title><rect x="39.6701%" y="213" width="0.1511%" height="15" fill="rgb(233,80,24)" fg:x="46727" fg:w="178"/><text x="39.9201%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1,273 samples, 1.08%)</title><rect x="38.7948%" y="229" width="1.0807%" height="15" fill="rgb(213,179,31)" fg:x="45696" fg:w="1273"/><text x="39.0448%" y="239.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (64 samples, 0.05%)</title><rect x="39.8212%" y="213" width="0.0543%" height="15" fill="rgb(209,19,5)" fg:x="46905" fg:w="64"/><text x="40.0712%" y="223.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::drop (1,282 samples, 1.09%)</title><rect x="38.7948%" y="245" width="1.0884%" height="15" fill="rgb(219,18,35)" fg:x="45696" fg:w="1282"/><text x="39.0448%" y="255.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (12 samples, 0.01%)</title><rect x="39.8900%" y="213" width="0.0102%" height="15" fill="rgb(209,169,16)" fg:x="46986" fg:w="12"/><text x="40.1400%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (12 samples, 0.01%)</title><rect x="39.8900%" y="197" width="0.0102%" height="15" fill="rgb(245,90,51)" fg:x="46986" fg:w="12"/><text x="40.1400%" y="207.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (18 samples, 0.02%)</title><rect x="39.8857%" y="229" width="0.0153%" height="15" fill="rgb(220,99,45)" fg:x="46981" fg:w="18"/><text x="40.1357%" y="239.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (1,442 samples, 1.22%)</title><rect x="38.6802%" y="261" width="1.2242%" height="15" fill="rgb(249,89,25)" fg:x="45561" fg:w="1442"/><text x="38.9302%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (23 samples, 0.02%)</title><rect x="39.8849%" y="245" width="0.0195%" height="15" fill="rgb(239,193,0)" fg:x="46980" fg:w="23"/><text x="40.1349%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (1,451 samples, 1.23%)</title><rect x="38.6802%" y="309" width="1.2319%" height="15" fill="rgb(231,126,1)" fg:x="45561" fg:w="1451"/><text x="38.9302%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (1,451 samples, 1.23%)</title><rect x="38.6802%" y="293" width="1.2319%" height="15" fill="rgb(243,166,3)" fg:x="45561" fg:w="1451"/><text x="38.9302%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,451 samples, 1.23%)</title><rect x="38.6802%" y="277" width="1.2319%" height="15" fill="rgb(223,22,34)" fg:x="45561" fg:w="1451"/><text x="38.9302%" y="287.50"></text></g><g><title>sn_rust_dealloc (111 samples, 0.09%)</title><rect x="39.9120%" y="309" width="0.0942%" height="15" fill="rgb(251,52,51)" fg:x="47012" fg:w="111"/><text x="40.1620%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (2,445 samples, 2.08%)</title><rect x="38.6615%" y="357" width="2.0757%" height="15" fill="rgb(221,165,28)" fg:x="45539" fg:w="2445"/><text x="38.9115%" y="367.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (2,445 samples, 2.08%)</title><rect x="38.6615%" y="341" width="2.0757%" height="15" fill="rgb(218,121,47)" fg:x="45539" fg:w="2445"/><text x="38.9115%" y="351.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (2,445 samples, 2.08%)</title><rect x="38.6615%" y="325" width="2.0757%" height="15" fill="rgb(209,120,9)" fg:x="45539" fg:w="2445"/><text x="38.9115%" y="335.50">c..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (861 samples, 0.73%)</title><rect x="40.0063%" y="309" width="0.7310%" height="15" fill="rgb(236,68,12)" fg:x="47123" fg:w="861"/><text x="40.2563%" y="319.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (2,452 samples, 2.08%)</title><rect x="38.6598%" y="373" width="2.0817%" height="15" fill="rgb(225,194,26)" fg:x="45537" fg:w="2452"/><text x="38.9098%" y="383.50">a..</text></g><g><title>sn_rust_dealloc (58 samples, 0.05%)</title><rect x="40.7415%" y="373" width="0.0492%" height="15" fill="rgb(231,84,39)" fg:x="47989" fg:w="58"/><text x="40.9915%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (2,563 samples, 2.18%)</title><rect x="38.6250%" y="453" width="2.1759%" height="15" fill="rgb(210,11,45)" fg:x="45496" fg:w="2563"/><text x="38.8750%" y="463.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (2,559 samples, 2.17%)</title><rect x="38.6284%" y="437" width="2.1725%" height="15" fill="rgb(224,54,52)" fg:x="45500" fg:w="2559"/><text x="38.8784%" y="447.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (2,536 samples, 2.15%)</title><rect x="38.6479%" y="421" width="2.1530%" height="15" fill="rgb(238,102,14)" fg:x="45523" fg:w="2536"/><text x="38.8979%" y="431.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (2,536 samples, 2.15%)</title><rect x="38.6479%" y="405" width="2.1530%" height="15" fill="rgb(243,160,52)" fg:x="45523" fg:w="2536"/><text x="38.8979%" y="415.50">c..</text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (2,536 samples, 2.15%)</title><rect x="38.6479%" y="389" width="2.1530%" height="15" fill="rgb(216,114,19)" fg:x="45523" fg:w="2536"/><text x="38.8979%" y="399.50">a..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (12 samples, 0.01%)</title><rect x="40.7907%" y="373" width="0.0102%" height="15" fill="rgb(244,166,37)" fg:x="48047" fg:w="12"/><text x="41.0407%" y="383.50"></text></g><g><title>sn_rust_dealloc (40 samples, 0.03%)</title><rect x="40.8009%" y="453" width="0.0340%" height="15" fill="rgb(246,29,44)" fg:x="48059" fg:w="40"/><text x="41.0509%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (6,510 samples, 5.53%)</title><rect x="35.3242%" y="485" width="5.5268%" height="15" fill="rgb(215,56,53)" fg:x="41608" fg:w="6510"/><text x="35.5742%" y="495.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (5,869 samples, 4.98%)</title><rect x="35.8684%" y="469" width="4.9826%" height="15" fill="rgb(217,60,2)" fg:x="42249" fg:w="5869"/><text x="36.1184%" y="479.50">core::..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (19 samples, 0.02%)</title><rect x="40.8349%" y="453" width="0.0161%" height="15" fill="rgb(207,26,24)" fg:x="48099" fg:w="19"/><text x="41.0849%" y="463.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::mut_at (29 samples, 0.02%)</title><rect x="40.9699%" y="437" width="0.0246%" height="15" fill="rgb(252,210,15)" fg:x="48258" fg:w="29"/><text x="41.2199%" y="447.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::index_for (27 samples, 0.02%)</title><rect x="40.9716%" y="421" width="0.0229%" height="15" fill="rgb(253,209,26)" fg:x="48260" fg:w="27"/><text x="41.2216%" y="431.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (168 samples, 0.14%)</title><rect x="40.8544%" y="485" width="0.1426%" height="15" fill="rgb(238,170,14)" fg:x="48122" fg:w="168"/><text x="41.1044%" y="495.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n (168 samples, 0.14%)</title><rect x="40.8544%" y="469" width="0.1426%" height="15" fill="rgb(216,178,15)" fg:x="48122" fg:w="168"/><text x="41.1044%" y="479.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n_inner (168 samples, 0.14%)</title><rect x="40.8544%" y="453" width="0.1426%" height="15" fill="rgb(250,197,2)" fg:x="48122" fg:w="168"/><text x="41.1044%" y="463.50"></text></g><g><title>sn_rust_dealloc (55 samples, 0.05%)</title><rect x="40.9970%" y="485" width="0.0467%" height="15" fill="rgb(212,70,42)" fg:x="48290" fg:w="55"/><text x="41.2470%" y="495.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (14 samples, 0.01%)</title><rect x="41.0437%" y="485" width="0.0119%" height="15" fill="rgb(227,213,9)" fg:x="48345" fg:w="14"/><text x="41.2937%" y="495.50"></text></g><g><title>core::time::Duration::as_nanos (25 samples, 0.02%)</title><rect x="41.0794%" y="469" width="0.0212%" height="15" fill="rgb(245,99,25)" fg:x="48387" fg:w="25"/><text x="41.3294%" y="479.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (58 samples, 0.05%)</title><rect x="41.1006%" y="453" width="0.0492%" height="15" fill="rgb(250,82,29)" fg:x="48412" fg:w="58"/><text x="41.3506%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (27 samples, 0.02%)</title><rect x="41.1728%" y="421" width="0.0229%" height="15" fill="rgb(241,226,54)" fg:x="48497" fg:w="27"/><text x="41.4228%" y="431.50"></text></g><g><title>core::cmp::PartialOrd::ge (27 samples, 0.02%)</title><rect x="41.1728%" y="405" width="0.0229%" height="15" fill="rgb(221,99,41)" fg:x="48497" fg:w="27"/><text x="41.4228%" y="415.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (27 samples, 0.02%)</title><rect x="41.1728%" y="389" width="0.0229%" height="15" fill="rgb(213,90,21)" fg:x="48497" fg:w="27"/><text x="41.4228%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (12 samples, 0.01%)</title><rect x="41.1855%" y="373" width="0.0102%" height="15" fill="rgb(205,208,24)" fg:x="48512" fg:w="12"/><text x="41.4355%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (12 samples, 0.01%)</title><rect x="41.1855%" y="357" width="0.0102%" height="15" fill="rgb(246,31,12)" fg:x="48512" fg:w="12"/><text x="41.4355%" y="367.50"></text></g><g><title>std::time::SystemTime::duration_since (130 samples, 0.11%)</title><rect x="41.1006%" y="469" width="0.1104%" height="15" fill="rgb(213,154,6)" fg:x="48412" fg:w="130"/><text x="41.3506%" y="479.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (72 samples, 0.06%)</title><rect x="41.1499%" y="453" width="0.0611%" height="15" fill="rgb(222,163,29)" fg:x="48470" fg:w="72"/><text x="41.3999%" y="463.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (72 samples, 0.06%)</title><rect x="41.1499%" y="437" width="0.0611%" height="15" fill="rgb(227,201,8)" fg:x="48470" fg:w="72"/><text x="41.3999%" y="447.50"></text></g><g><title>core::time::Duration::new (18 samples, 0.02%)</title><rect x="41.1957%" y="421" width="0.0153%" height="15" fill="rgb(233,9,32)" fg:x="48524" fg:w="18"/><text x="41.4457%" y="431.50"></text></g><g><title>tremor_common::time::nanotime (462 samples, 0.39%)</title><rect x="41.0556%" y="485" width="0.3922%" height="15" fill="rgb(217,54,24)" fg:x="48359" fg:w="462"/><text x="41.3056%" y="495.50"></text></g><g><title>std::time::SystemTime::now (279 samples, 0.24%)</title><rect x="41.2110%" y="469" width="0.2369%" height="15" fill="rgb(235,192,0)" fg:x="48542" fg:w="279"/><text x="41.4610%" y="479.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (279 samples, 0.24%)</title><rect x="41.2110%" y="453" width="0.2369%" height="15" fill="rgb(235,45,9)" fg:x="48542" fg:w="279"/><text x="41.4610%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (279 samples, 0.24%)</title><rect x="41.2110%" y="437" width="0.2369%" height="15" fill="rgb(246,42,40)" fg:x="48542" fg:w="279"/><text x="41.4610%" y="447.50"></text></g><g><title>__clock_gettime (235 samples, 0.20%)</title><rect x="41.2483%" y="421" width="0.1995%" height="15" fill="rgb(248,111,24)" fg:x="48586" fg:w="235"/><text x="41.4983%" y="431.50"></text></g><g><title>__vdso_clock_gettime (231 samples, 0.20%)</title><rect x="41.2517%" y="405" width="0.1961%" height="15" fill="rgb(249,65,22)" fg:x="48590" fg:w="231"/><text x="41.5017%" y="415.50"></text></g><g><title>[[vdso]] (204 samples, 0.17%)</title><rect x="41.2747%" y="389" width="0.1732%" height="15" fill="rgb(238,111,51)" fg:x="48617" fg:w="204"/><text x="41.5247%" y="399.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (83 samples, 0.07%)</title><rect x="41.4546%" y="469" width="0.0705%" height="15" fill="rgb(250,118,22)" fg:x="48829" fg:w="83"/><text x="41.7046%" y="479.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (7,894 samples, 6.70%)</title><rect x="34.8284%" y="741" width="6.7018%" height="15" fill="rgb(234,84,26)" fg:x="41024" fg:w="7894"/><text x="35.0784%" y="751.50">tremor_ru..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,894 samples, 6.70%)</title><rect x="34.8284%" y="725" width="6.7018%" height="15" fill="rgb(243,172,12)" fg:x="41024" fg:w="7894"/><text x="35.0784%" y="735.50">&lt;async_ff..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,894 samples, 6.70%)</title><rect x="34.8284%" y="709" width="6.7018%" height="15" fill="rgb(236,150,49)" fg:x="41024" fg:w="7894"/><text x="35.0784%" y="719.50">&lt;async_ff..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (7,894 samples, 6.70%)</title><rect x="34.8284%" y="693" width="6.7018%" height="15" fill="rgb(225,197,26)" fg:x="41024" fg:w="7894"/><text x="35.0784%" y="703.50">&lt;core::ta..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (7,894 samples, 6.70%)</title><rect x="34.8284%" y="677" width="6.7018%" height="15" fill="rgb(214,17,42)" fg:x="41024" fg:w="7894"/><text x="35.0784%" y="687.50">&lt;async_ff..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (7,894 samples, 6.70%)</title><rect x="34.8284%" y="661" width="6.7018%" height="15" fill="rgb(224,165,40)" fg:x="41024" fg:w="7894"/><text x="35.0784%" y="671.50">async_ffi..</text></g><g><title>std::panic::catch_unwind (7,894 samples, 6.70%)</title><rect x="34.8284%" y="645" width="6.7018%" height="15" fill="rgb(246,100,4)" fg:x="41024" fg:w="7894"/><text x="35.0784%" y="655.50">std::pani..</text></g><g><title>std::panicking::try (7,894 samples, 6.70%)</title><rect x="34.8284%" y="629" width="6.7018%" height="15" fill="rgb(222,103,0)" fg:x="41024" fg:w="7894"/><text x="35.0784%" y="639.50">std::pani..</text></g><g><title>std::panicking::try::do_call (7,894 samples, 6.70%)</title><rect x="34.8284%" y="613" width="6.7018%" height="15" fill="rgb(227,189,26)" fg:x="41024" fg:w="7894"/><text x="35.0784%" y="623.50">std::pani..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (7,894 samples, 6.70%)</title><rect x="34.8284%" y="597" width="6.7018%" height="15" fill="rgb(214,202,17)" fg:x="41024" fg:w="7894"/><text x="35.0784%" y="607.50">&lt;core::pa..</text></g><g><title>core::ops::function::FnOnce::call_once (7,894 samples, 6.70%)</title><rect x="34.8284%" y="581" width="6.7018%" height="15" fill="rgb(229,111,3)" fg:x="41024" fg:w="7894"/><text x="35.0784%" y="591.50">core::ops..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (7,894 samples, 6.70%)</title><rect x="34.8284%" y="565" width="6.7018%" height="15" fill="rgb(229,172,15)" fg:x="41024" fg:w="7894"/><text x="35.0784%" y="575.50">async_ffi..</text></g><g><title>async_ffi::FfiContext::with_context (7,894 samples, 6.70%)</title><rect x="34.8284%" y="549" width="6.7018%" height="15" fill="rgb(230,224,35)" fg:x="41024" fg:w="7894"/><text x="35.0784%" y="559.50">async_ffi..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (7,894 samples, 6.70%)</title><rect x="34.8284%" y="533" width="6.7018%" height="15" fill="rgb(251,141,6)" fg:x="41024" fg:w="7894"/><text x="35.0784%" y="543.50">async_ffi..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,894 samples, 6.70%)</title><rect x="34.8284%" y="517" width="6.7018%" height="15" fill="rgb(225,208,6)" fg:x="41024" fg:w="7894"/><text x="35.0784%" y="527.50">&lt;core::fu..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (7,880 samples, 6.69%)</title><rect x="34.8403%" y="501" width="6.6899%" height="15" fill="rgb(246,181,16)" fg:x="41038" fg:w="7880"/><text x="35.0903%" y="511.50">&lt;tremor_r..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (97 samples, 0.08%)</title><rect x="41.4478%" y="485" width="0.0824%" height="15" fill="rgb(227,129,36)" fg:x="48821" fg:w="97"/><text x="41.6978%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (31 samples, 0.03%)</title><rect x="41.5412%" y="629" width="0.0263%" height="15" fill="rgb(248,117,24)" fg:x="48931" fg:w="31"/><text x="41.7912%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (31 samples, 0.03%)</title><rect x="41.5412%" y="613" width="0.0263%" height="15" fill="rgb(214,185,35)" fg:x="48931" fg:w="31"/><text x="41.7912%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (31 samples, 0.03%)</title><rect x="41.5412%" y="597" width="0.0263%" height="15" fill="rgb(236,150,34)" fg:x="48931" fg:w="31"/><text x="41.7912%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (49 samples, 0.04%)</title><rect x="41.5302%" y="645" width="0.0416%" height="15" fill="rgb(243,228,27)" fg:x="48918" fg:w="49"/><text x="41.7802%" y="655.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,947 samples, 6.75%)</title><rect x="34.8284%" y="757" width="6.7468%" height="15" fill="rgb(245,77,44)" fg:x="41024" fg:w="7947"/><text x="35.0784%" y="767.50">&lt;core::fu..</text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (53 samples, 0.04%)</title><rect x="41.5302%" y="741" width="0.0450%" height="15" fill="rgb(235,214,42)" fg:x="48918" fg:w="53"/><text x="41.7802%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (53 samples, 0.04%)</title><rect x="41.5302%" y="725" width="0.0450%" height="15" fill="rgb(221,74,3)" fg:x="48918" fg:w="53"/><text x="41.7802%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (53 samples, 0.04%)</title><rect x="41.5302%" y="709" width="0.0450%" height="15" fill="rgb(206,121,29)" fg:x="48918" fg:w="53"/><text x="41.7802%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (53 samples, 0.04%)</title><rect x="41.5302%" y="693" width="0.0450%" height="15" fill="rgb(249,131,53)" fg:x="48918" fg:w="53"/><text x="41.7802%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (53 samples, 0.04%)</title><rect x="41.5302%" y="677" width="0.0450%" height="15" fill="rgb(236,170,29)" fg:x="48918" fg:w="53"/><text x="41.7802%" y="687.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (53 samples, 0.04%)</title><rect x="41.5302%" y="661" width="0.0450%" height="15" fill="rgb(247,96,15)" fg:x="48918" fg:w="53"/><text x="41.7802%" y="671.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (15 samples, 0.01%)</title><rect x="41.5837%" y="469" width="0.0127%" height="15" fill="rgb(211,210,7)" fg:x="48981" fg:w="15"/><text x="41.8337%" y="479.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (7,973 samples, 6.77%)</title><rect x="34.8284%" y="773" width="6.7689%" height="15" fill="rgb(240,88,50)" fg:x="41024" fg:w="7973"/><text x="35.0784%" y="783.50">tremor_ru..</text></g><g><title>&lt;tremor_runtime::connectors::sink::ContraflowData as core::convert::From&lt;&amp;tremor_pipeline::event::Event&gt;&gt;::from (16 samples, 0.01%)</title><rect x="41.5837%" y="757" width="0.0136%" height="15" fill="rgb(209,229,26)" fg:x="48981" fg:w="16"/><text x="41.8337%" y="767.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (16 samples, 0.01%)</title><rect x="41.5837%" y="741" width="0.0136%" height="15" fill="rgb(210,68,23)" fg:x="48981" fg:w="16"/><text x="41.8337%" y="751.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (16 samples, 0.01%)</title><rect x="41.5837%" y="725" width="0.0136%" height="15" fill="rgb(229,180,13)" fg:x="48981" fg:w="16"/><text x="41.8337%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (16 samples, 0.01%)</title><rect x="41.5837%" y="709" width="0.0136%" height="15" fill="rgb(236,53,44)" fg:x="48981" fg:w="16"/><text x="41.8337%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (16 samples, 0.01%)</title><rect x="41.5837%" y="693" width="0.0136%" height="15" fill="rgb(244,214,29)" fg:x="48981" fg:w="16"/><text x="41.8337%" y="703.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (16 samples, 0.01%)</title><rect x="41.5837%" y="677" width="0.0136%" height="15" fill="rgb(220,75,29)" fg:x="48981" fg:w="16"/><text x="41.8337%" y="687.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (16 samples, 0.01%)</title><rect x="41.5837%" y="661" width="0.0136%" height="15" fill="rgb(214,183,37)" fg:x="48981" fg:w="16"/><text x="41.8337%" y="671.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (16 samples, 0.01%)</title><rect x="41.5837%" y="645" width="0.0136%" height="15" fill="rgb(239,117,29)" fg:x="48981" fg:w="16"/><text x="41.8337%" y="655.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (16 samples, 0.01%)</title><rect x="41.5837%" y="629" width="0.0136%" height="15" fill="rgb(237,171,35)" fg:x="48981" fg:w="16"/><text x="41.8337%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (16 samples, 0.01%)</title><rect x="41.5837%" y="613" width="0.0136%" height="15" fill="rgb(229,178,53)" fg:x="48981" fg:w="16"/><text x="41.8337%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (16 samples, 0.01%)</title><rect x="41.5837%" y="597" width="0.0136%" height="15" fill="rgb(210,102,19)" fg:x="48981" fg:w="16"/><text x="41.8337%" y="607.50"></text></g><g><title>alloc::alloc::exchange_malloc (16 samples, 0.01%)</title><rect x="41.5837%" y="581" width="0.0136%" height="15" fill="rgb(235,127,22)" fg:x="48981" fg:w="16"/><text x="41.8337%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16 samples, 0.01%)</title><rect x="41.5837%" y="565" width="0.0136%" height="15" fill="rgb(244,31,31)" fg:x="48981" fg:w="16"/><text x="41.8337%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 0.01%)</title><rect x="41.5837%" y="549" width="0.0136%" height="15" fill="rgb(231,43,21)" fg:x="48981" fg:w="16"/><text x="41.8337%" y="559.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.01%)</title><rect x="41.5837%" y="533" width="0.0136%" height="15" fill="rgb(217,131,35)" fg:x="48981" fg:w="16"/><text x="41.8337%" y="543.50"></text></g><g><title>__rg_alloc (16 samples, 0.01%)</title><rect x="41.5837%" y="517" width="0.0136%" height="15" fill="rgb(221,149,4)" fg:x="48981" fg:w="16"/><text x="41.8337%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (16 samples, 0.01%)</title><rect x="41.5837%" y="501" width="0.0136%" height="15" fill="rgb(232,170,28)" fg:x="48981" fg:w="16"/><text x="41.8337%" y="511.50"></text></g><g><title>sn_rust_alloc (16 samples, 0.01%)</title><rect x="41.5837%" y="485" width="0.0136%" height="15" fill="rgb(238,56,10)" fg:x="48981" fg:w="16"/><text x="41.8337%" y="495.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (174 samples, 0.15%)</title><rect x="41.6635%" y="661" width="0.1477%" height="15" fill="rgb(235,196,14)" fg:x="49075" fg:w="174"/><text x="41.9135%" y="671.50"></text></g><g><title>core::ptr::read (162 samples, 0.14%)</title><rect x="41.6737%" y="645" width="0.1375%" height="15" fill="rgb(216,45,48)" fg:x="49087" fg:w="162"/><text x="41.9237%" y="655.50"></text></g><g><title>[libc-2.31.so] (161 samples, 0.14%)</title><rect x="41.6745%" y="629" width="0.1367%" height="15" fill="rgb(238,213,17)" fg:x="49088" fg:w="161"/><text x="41.9245%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (57 samples, 0.05%)</title><rect x="41.8138%" y="533" width="0.0484%" height="15" fill="rgb(212,13,2)" fg:x="49252" fg:w="57"/><text x="42.0638%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (57 samples, 0.05%)</title><rect x="41.8138%" y="517" width="0.0484%" height="15" fill="rgb(240,114,20)" fg:x="49252" fg:w="57"/><text x="42.0638%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (57 samples, 0.05%)</title><rect x="41.8138%" y="501" width="0.0484%" height="15" fill="rgb(228,41,40)" fg:x="49252" fg:w="57"/><text x="42.0638%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (55 samples, 0.05%)</title><rect x="41.8154%" y="485" width="0.0467%" height="15" fill="rgb(244,132,35)" fg:x="49254" fg:w="55"/><text x="42.0654%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (55 samples, 0.05%)</title><rect x="41.8154%" y="469" width="0.0467%" height="15" fill="rgb(253,189,4)" fg:x="49254" fg:w="55"/><text x="42.0654%" y="479.50"></text></g><g><title>alloc::alloc::alloc (55 samples, 0.05%)</title><rect x="41.8154%" y="453" width="0.0467%" height="15" fill="rgb(224,37,19)" fg:x="49254" fg:w="55"/><text x="42.0654%" y="463.50"></text></g><g><title>__rg_alloc (55 samples, 0.05%)</title><rect x="41.8154%" y="437" width="0.0467%" height="15" fill="rgb(235,223,18)" fg:x="49254" fg:w="55"/><text x="42.0654%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (55 samples, 0.05%)</title><rect x="41.8154%" y="421" width="0.0467%" height="15" fill="rgb(235,163,25)" fg:x="49254" fg:w="55"/><text x="42.0654%" y="431.50"></text></g><g><title>sn_rust_alloc (55 samples, 0.05%)</title><rect x="41.8154%" y="405" width="0.0467%" height="15" fill="rgb(217,145,28)" fg:x="49254" fg:w="55"/><text x="42.0654%" y="415.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (84 samples, 0.07%)</title><rect x="41.8138%" y="661" width="0.0713%" height="15" fill="rgb(223,223,32)" fg:x="49252" fg:w="84"/><text x="42.0638%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (84 samples, 0.07%)</title><rect x="41.8138%" y="645" width="0.0713%" height="15" fill="rgb(227,189,39)" fg:x="49252" fg:w="84"/><text x="42.0638%" y="655.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (84 samples, 0.07%)</title><rect x="41.8138%" y="629" width="0.0713%" height="15" fill="rgb(248,10,22)" fg:x="49252" fg:w="84"/><text x="42.0638%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (84 samples, 0.07%)</title><rect x="41.8138%" y="613" width="0.0713%" height="15" fill="rgb(248,46,39)" fg:x="49252" fg:w="84"/><text x="42.0638%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (84 samples, 0.07%)</title><rect x="41.8138%" y="597" width="0.0713%" height="15" fill="rgb(248,113,48)" fg:x="49252" fg:w="84"/><text x="42.0638%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (84 samples, 0.07%)</title><rect x="41.8138%" y="581" width="0.0713%" height="15" fill="rgb(245,16,25)" fg:x="49252" fg:w="84"/><text x="42.0638%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (84 samples, 0.07%)</title><rect x="41.8138%" y="565" width="0.0713%" height="15" fill="rgb(249,152,16)" fg:x="49252" fg:w="84"/><text x="42.0638%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (84 samples, 0.07%)</title><rect x="41.8138%" y="549" width="0.0713%" height="15" fill="rgb(250,16,1)" fg:x="49252" fg:w="84"/><text x="42.0638%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (27 samples, 0.02%)</title><rect x="41.8621%" y="533" width="0.0229%" height="15" fill="rgb(249,138,3)" fg:x="49309" fg:w="27"/><text x="42.1121%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (27 samples, 0.02%)</title><rect x="41.8621%" y="517" width="0.0229%" height="15" fill="rgb(227,71,41)" fg:x="49309" fg:w="27"/><text x="42.1121%" y="527.50"></text></g><g><title>[libc-2.31.so] (20 samples, 0.02%)</title><rect x="41.8681%" y="501" width="0.0170%" height="15" fill="rgb(209,184,23)" fg:x="49316" fg:w="20"/><text x="42.1181%" y="511.50"></text></g><g><title>[libc-2.31.so] (252 samples, 0.21%)</title><rect x="41.8851%" y="661" width="0.2139%" height="15" fill="rgb(223,215,31)" fg:x="49336" fg:w="252"/><text x="42.1351%" y="671.50"></text></g><g><title>[libc-2.31.so] (135 samples, 0.11%)</title><rect x="42.1007%" y="645" width="0.1146%" height="15" fill="rgb(210,146,28)" fg:x="49590" fg:w="135"/><text x="42.3507%" y="655.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (291 samples, 0.25%)</title><rect x="42.2399%" y="533" width="0.2471%" height="15" fill="rgb(209,183,41)" fg:x="49754" fg:w="291"/><text x="42.4899%" y="543.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (465 samples, 0.39%)</title><rect x="42.0990%" y="661" width="0.3948%" height="15" fill="rgb(209,224,45)" fg:x="49588" fg:w="465"/><text x="42.3490%" y="671.50"></text></g><g><title>alloc::alloc::exchange_malloc (328 samples, 0.28%)</title><rect x="42.2153%" y="645" width="0.2785%" height="15" fill="rgb(224,209,51)" fg:x="49725" fg:w="328"/><text x="42.4653%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (328 samples, 0.28%)</title><rect x="42.2153%" y="629" width="0.2785%" height="15" fill="rgb(223,17,39)" fg:x="49725" fg:w="328"/><text x="42.4653%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (328 samples, 0.28%)</title><rect x="42.2153%" y="613" width="0.2785%" height="15" fill="rgb(234,204,37)" fg:x="49725" fg:w="328"/><text x="42.4653%" y="623.50"></text></g><g><title>alloc::alloc::alloc (328 samples, 0.28%)</title><rect x="42.2153%" y="597" width="0.2785%" height="15" fill="rgb(236,120,5)" fg:x="49725" fg:w="328"/><text x="42.4653%" y="607.50"></text></g><g><title>__rg_alloc (328 samples, 0.28%)</title><rect x="42.2153%" y="581" width="0.2785%" height="15" fill="rgb(248,97,27)" fg:x="49725" fg:w="328"/><text x="42.4653%" y="591.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (328 samples, 0.28%)</title><rect x="42.2153%" y="565" width="0.2785%" height="15" fill="rgb(240,66,17)" fg:x="49725" fg:w="328"/><text x="42.4653%" y="575.50"></text></g><g><title>sn_rust_alloc (328 samples, 0.28%)</title><rect x="42.2153%" y="549" width="0.2785%" height="15" fill="rgb(210,79,3)" fg:x="49725" fg:w="328"/><text x="42.4653%" y="559.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.02%)</title><rect x="42.4938%" y="645" width="0.0161%" height="15" fill="rgb(214,176,27)" fg:x="50053" fg:w="19"/><text x="42.7438%" y="655.50"></text></g><g><title>sn_rust_dealloc (20 samples, 0.02%)</title><rect x="42.5099%" y="645" width="0.0170%" height="15" fill="rgb(235,185,3)" fg:x="50072" fg:w="20"/><text x="42.7599%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (49 samples, 0.04%)</title><rect x="42.4938%" y="661" width="0.0416%" height="15" fill="rgb(227,24,12)" fg:x="50053" fg:w="49"/><text x="42.7438%" y="671.50"></text></g><g><title>core::str::&lt;impl str&gt;::eq_ignore_ascii_case (17 samples, 0.01%)</title><rect x="42.5473%" y="661" width="0.0144%" height="15" fill="rgb(252,169,48)" fg:x="50116" fg:w="17"/><text x="42.7973%" y="671.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case (17 samples, 0.01%)</title><rect x="42.5473%" y="645" width="0.0144%" height="15" fill="rgb(212,65,1)" fg:x="50116" fg:w="17"/><text x="42.7973%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (17 samples, 0.01%)</title><rect x="42.5473%" y="629" width="0.0144%" height="15" fill="rgb(242,39,24)" fg:x="50116" fg:w="17"/><text x="42.7973%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (17 samples, 0.01%)</title><rect x="42.5473%" y="613" width="0.0144%" height="15" fill="rgb(249,32,23)" fg:x="50116" fg:w="17"/><text x="42.7973%" y="623.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (1,158 samples, 0.98%)</title><rect x="41.5973%" y="773" width="0.9831%" height="15" fill="rgb(251,195,23)" fg:x="48997" fg:w="1158"/><text x="41.8473%" y="783.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,158 samples, 0.98%)</title><rect x="41.5973%" y="757" width="0.9831%" height="15" fill="rgb(236,174,8)" fg:x="48997" fg:w="1158"/><text x="41.8473%" y="767.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (1,158 samples, 0.98%)</title><rect x="41.5973%" y="741" width="0.9831%" height="15" fill="rgb(220,197,8)" fg:x="48997" fg:w="1158"/><text x="41.8473%" y="751.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,158 samples, 0.98%)</title><rect x="41.5973%" y="725" width="0.9831%" height="15" fill="rgb(240,108,37)" fg:x="48997" fg:w="1158"/><text x="41.8473%" y="735.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (1,158 samples, 0.98%)</title><rect x="41.5973%" y="709" width="0.9831%" height="15" fill="rgb(232,176,24)" fg:x="48997" fg:w="1158"/><text x="41.8473%" y="719.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,158 samples, 0.98%)</title><rect x="41.5973%" y="693" width="0.9831%" height="15" fill="rgb(243,35,29)" fg:x="48997" fg:w="1158"/><text x="41.8473%" y="703.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (1,158 samples, 0.98%)</title><rect x="41.5973%" y="677" width="0.9831%" height="15" fill="rgb(210,37,18)" fg:x="48997" fg:w="1158"/><text x="41.8473%" y="687.50"></text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (13 samples, 0.01%)</title><rect x="42.5693%" y="661" width="0.0110%" height="15" fill="rgb(224,184,40)" fg:x="50142" fg:w="13"/><text x="42.8193%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (13 samples, 0.01%)</title><rect x="42.5693%" y="645" width="0.0110%" height="15" fill="rgb(236,39,29)" fg:x="50142" fg:w="13"/><text x="42.8193%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (13 samples, 0.01%)</title><rect x="42.5693%" y="629" width="0.0110%" height="15" fill="rgb(232,48,39)" fg:x="50142" fg:w="13"/><text x="42.8193%" y="639.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (142 samples, 0.12%)</title><rect x="42.5804%" y="677" width="0.1206%" height="15" fill="rgb(236,34,42)" fg:x="50155" fg:w="142"/><text x="42.8304%" y="687.50"></text></g><g><title>[libc-2.31.so] (91 samples, 0.08%)</title><rect x="42.6237%" y="661" width="0.0773%" height="15" fill="rgb(243,106,37)" fg:x="50206" fg:w="91"/><text x="42.8737%" y="671.50"></text></g><g><title>[libc-2.31.so] (58 samples, 0.05%)</title><rect x="42.7858%" y="661" width="0.0492%" height="15" fill="rgb(218,96,6)" fg:x="50397" fg:w="58"/><text x="43.0358%" y="671.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (12 samples, 0.01%)</title><rect x="42.8529%" y="629" width="0.0102%" height="15" fill="rgb(235,130,12)" fg:x="50476" fg:w="12"/><text x="43.1029%" y="639.50"></text></g><g><title>[libc-2.31.so] (98 samples, 0.08%)</title><rect x="42.8631%" y="629" width="0.0832%" height="15" fill="rgb(231,95,0)" fg:x="50488" fg:w="98"/><text x="43.1131%" y="639.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (183 samples, 0.16%)</title><rect x="42.8444%" y="645" width="0.1554%" height="15" fill="rgb(228,12,23)" fg:x="50466" fg:w="183"/><text x="43.0944%" y="655.50"></text></g><g><title>alloc::alloc::exchange_malloc (63 samples, 0.05%)</title><rect x="42.9463%" y="629" width="0.0535%" height="15" fill="rgb(216,12,1)" fg:x="50586" fg:w="63"/><text x="43.1963%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (63 samples, 0.05%)</title><rect x="42.9463%" y="613" width="0.0535%" height="15" fill="rgb(219,59,3)" fg:x="50586" fg:w="63"/><text x="43.1963%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (63 samples, 0.05%)</title><rect x="42.9463%" y="597" width="0.0535%" height="15" fill="rgb(215,208,46)" fg:x="50586" fg:w="63"/><text x="43.1963%" y="607.50"></text></g><g><title>alloc::alloc::alloc (59 samples, 0.05%)</title><rect x="42.9497%" y="581" width="0.0501%" height="15" fill="rgb(254,224,29)" fg:x="50590" fg:w="59"/><text x="43.1997%" y="591.50"></text></g><g><title>__rg_alloc (59 samples, 0.05%)</title><rect x="42.9497%" y="565" width="0.0501%" height="15" fill="rgb(232,14,29)" fg:x="50590" fg:w="59"/><text x="43.1997%" y="575.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (59 samples, 0.05%)</title><rect x="42.9497%" y="549" width="0.0501%" height="15" fill="rgb(208,45,52)" fg:x="50590" fg:w="59"/><text x="43.1997%" y="559.50"></text></g><g><title>sn_rust_alloc (57 samples, 0.05%)</title><rect x="42.9514%" y="533" width="0.0484%" height="15" fill="rgb(234,191,28)" fg:x="50592" fg:w="57"/><text x="43.2014%" y="543.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (15 samples, 0.01%)</title><rect x="42.9870%" y="517" width="0.0127%" height="15" fill="rgb(244,67,43)" fg:x="50634" fg:w="15"/><text x="43.2370%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (263 samples, 0.22%)</title><rect x="42.8368%" y="661" width="0.2233%" height="15" fill="rgb(236,189,24)" fg:x="50457" fg:w="263"/><text x="43.0868%" y="671.50"></text></g><g><title>[libc-2.31.so] (71 samples, 0.06%)</title><rect x="42.9998%" y="645" width="0.0603%" height="15" fill="rgb(239,214,33)" fg:x="50649" fg:w="71"/><text x="43.2498%" y="655.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (433 samples, 0.37%)</title><rect x="42.7009%" y="677" width="0.3676%" height="15" fill="rgb(226,176,41)" fg:x="50297" fg:w="433"/><text x="42.9509%" y="687.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (576 samples, 0.49%)</title><rect x="42.5804%" y="757" width="0.4890%" height="15" fill="rgb(248,47,8)" fg:x="50155" fg:w="576"/><text x="42.8304%" y="767.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (576 samples, 0.49%)</title><rect x="42.5804%" y="741" width="0.4890%" height="15" fill="rgb(218,81,44)" fg:x="50155" fg:w="576"/><text x="42.8304%" y="751.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (576 samples, 0.49%)</title><rect x="42.5804%" y="725" width="0.4890%" height="15" fill="rgb(213,98,6)" fg:x="50155" fg:w="576"/><text x="42.8304%" y="735.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (576 samples, 0.49%)</title><rect x="42.5804%" y="709" width="0.4890%" height="15" fill="rgb(222,85,22)" fg:x="50155" fg:w="576"/><text x="42.8304%" y="719.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (576 samples, 0.49%)</title><rect x="42.5804%" y="693" width="0.4890%" height="15" fill="rgb(239,46,39)" fg:x="50155" fg:w="576"/><text x="42.8304%" y="703.50"></text></g><g><title>async_io::driver::block_on (9,709 samples, 8.24%)</title><rect x="34.8284%" y="1077" width="8.2427%" height="15" fill="rgb(237,12,29)" fg:x="41024" fg:w="9709"/><text x="35.0784%" y="1087.50">async_io::d..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (9,709 samples, 8.24%)</title><rect x="34.8284%" y="1061" width="8.2427%" height="15" fill="rgb(214,77,8)" fg:x="41024" fg:w="9709"/><text x="35.0784%" y="1071.50">&lt;futures_li..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,709 samples, 8.24%)</title><rect x="34.8284%" y="1045" width="8.2427%" height="15" fill="rgb(217,168,37)" fg:x="41024" fg:w="9709"/><text x="35.0784%" y="1055.50">&lt;core::futu..</text></g><g><title>async_executor::Executor::run::{{closure}} (9,709 samples, 8.24%)</title><rect x="34.8284%" y="1029" width="8.2427%" height="15" fill="rgb(221,217,23)" fg:x="41024" fg:w="9709"/><text x="35.0784%" y="1039.50">async_execu..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (9,709 samples, 8.24%)</title><rect x="34.8284%" y="1013" width="8.2427%" height="15" fill="rgb(243,229,36)" fg:x="41024" fg:w="9709"/><text x="35.0784%" y="1023.50">&lt;futures_li..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,709 samples, 8.24%)</title><rect x="34.8284%" y="997" width="8.2427%" height="15" fill="rgb(251,163,40)" fg:x="41024" fg:w="9709"/><text x="35.0784%" y="1007.50">&lt;core::futu..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (9,709 samples, 8.24%)</title><rect x="34.8284%" y="981" width="8.2427%" height="15" fill="rgb(237,222,12)" fg:x="41024" fg:w="9709"/><text x="35.0784%" y="991.50">async_execu..</text></g><g><title>async_task::runnable::Runnable::run (9,709 samples, 8.24%)</title><rect x="34.8284%" y="965" width="8.2427%" height="15" fill="rgb(248,132,6)" fg:x="41024" fg:w="9709"/><text x="35.0784%" y="975.50">async_task:..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (9,709 samples, 8.24%)</title><rect x="34.8284%" y="949" width="8.2427%" height="15" fill="rgb(227,167,50)" fg:x="41024" fg:w="9709"/><text x="35.0784%" y="959.50">async_task:..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (9,709 samples, 8.24%)</title><rect x="34.8284%" y="933" width="8.2427%" height="15" fill="rgb(242,84,37)" fg:x="41024" fg:w="9709"/><text x="35.0784%" y="943.50">&lt;core::pin:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,709 samples, 8.24%)</title><rect x="34.8284%" y="917" width="8.2427%" height="15" fill="rgb(212,4,50)" fg:x="41024" fg:w="9709"/><text x="35.0784%" y="927.50">&lt;core::futu..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (9,709 samples, 8.24%)</title><rect x="34.8284%" y="901" width="8.2427%" height="15" fill="rgb(230,228,32)" fg:x="41024" fg:w="9709"/><text x="35.0784%" y="911.50">async_execu..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (9,709 samples, 8.24%)</title><rect x="34.8284%" y="885" width="8.2427%" height="15" fill="rgb(248,217,23)" fg:x="41024" fg:w="9709"/><text x="35.0784%" y="895.50">&lt;async_std:..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (9,709 samples, 8.24%)</title><rect x="34.8284%" y="869" width="8.2427%" height="15" fill="rgb(238,197,32)" fg:x="41024" fg:w="9709"/><text x="35.0784%" y="879.50">async_std::..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (9,709 samples, 8.24%)</title><rect x="34.8284%" y="853" width="8.2427%" height="15" fill="rgb(236,106,1)" fg:x="41024" fg:w="9709"/><text x="35.0784%" y="863.50">std::thread..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (9,709 samples, 8.24%)</title><rect x="34.8284%" y="837" width="8.2427%" height="15" fill="rgb(219,228,13)" fg:x="41024" fg:w="9709"/><text x="35.0784%" y="847.50">std::thread..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (9,709 samples, 8.24%)</title><rect x="34.8284%" y="821" width="8.2427%" height="15" fill="rgb(238,30,35)" fg:x="41024" fg:w="9709"/><text x="35.0784%" y="831.50">async_std::..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (9,709 samples, 8.24%)</title><rect x="34.8284%" y="805" width="8.2427%" height="15" fill="rgb(236,70,23)" fg:x="41024" fg:w="9709"/><text x="35.0784%" y="815.50">&lt;async_std:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,709 samples, 8.24%)</title><rect x="34.8284%" y="789" width="8.2427%" height="15" fill="rgb(249,104,48)" fg:x="41024" fg:w="9709"/><text x="35.0784%" y="799.50">&lt;core::futu..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (578 samples, 0.49%)</title><rect x="42.5804%" y="773" width="0.4907%" height="15" fill="rgb(254,117,50)" fg:x="50155" fg:w="578"/><text x="42.8304%" y="783.50"></text></g><g><title>[libc-2.31.so] (308 samples, 0.26%)</title><rect x="43.1662%" y="821" width="0.2615%" height="15" fill="rgb(223,152,4)" fg:x="50845" fg:w="308"/><text x="43.4162%" y="831.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (334 samples, 0.28%)</title><rect x="43.1534%" y="837" width="0.2836%" height="15" fill="rgb(245,6,2)" fg:x="50830" fg:w="334"/><text x="43.4034%" y="847.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (558 samples, 0.47%)</title><rect x="43.0983%" y="853" width="0.4737%" height="15" fill="rgb(249,150,24)" fg:x="50765" fg:w="558"/><text x="43.3483%" y="863.50"></text></g><g><title>[libc-2.31.so] (159 samples, 0.13%)</title><rect x="43.4370%" y="837" width="0.1350%" height="15" fill="rgb(228,185,42)" fg:x="51164" fg:w="159"/><text x="43.6870%" y="847.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (582 samples, 0.49%)</title><rect x="43.0830%" y="901" width="0.4941%" height="15" fill="rgb(226,39,33)" fg:x="50747" fg:w="582"/><text x="43.3330%" y="911.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (582 samples, 0.49%)</title><rect x="43.0830%" y="885" width="0.4941%" height="15" fill="rgb(221,166,19)" fg:x="50747" fg:w="582"/><text x="43.3330%" y="895.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (582 samples, 0.49%)</title><rect x="43.0830%" y="869" width="0.4941%" height="15" fill="rgb(209,109,2)" fg:x="50747" fg:w="582"/><text x="43.3330%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (105 samples, 0.09%)</title><rect x="43.6340%" y="693" width="0.0891%" height="15" fill="rgb(252,216,26)" fg:x="51396" fg:w="105"/><text x="43.8840%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (105 samples, 0.09%)</title><rect x="43.6340%" y="677" width="0.0891%" height="15" fill="rgb(227,173,36)" fg:x="51396" fg:w="105"/><text x="43.8840%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (280 samples, 0.24%)</title><rect x="43.7231%" y="693" width="0.2377%" height="15" fill="rgb(209,90,7)" fg:x="51501" fg:w="280"/><text x="43.9731%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_load (277 samples, 0.24%)</title><rect x="43.7256%" y="677" width="0.2352%" height="15" fill="rgb(250,194,11)" fg:x="51504" fg:w="277"/><text x="43.9756%" y="687.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (437 samples, 0.37%)</title><rect x="43.5924%" y="725" width="0.3710%" height="15" fill="rgb(220,72,50)" fg:x="51347" fg:w="437"/><text x="43.8424%" y="735.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (419 samples, 0.36%)</title><rect x="43.6076%" y="709" width="0.3557%" height="15" fill="rgb(222,106,48)" fg:x="51365" fg:w="419"/><text x="43.8576%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (31 samples, 0.03%)</title><rect x="43.9685%" y="709" width="0.0263%" height="15" fill="rgb(216,220,45)" fg:x="51790" fg:w="31"/><text x="44.2185%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (27 samples, 0.02%)</title><rect x="43.9718%" y="693" width="0.0229%" height="15" fill="rgb(234,112,18)" fg:x="51794" fg:w="27"/><text x="44.2218%" y="703.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.02%)</title><rect x="43.9718%" y="677" width="0.0229%" height="15" fill="rgb(206,179,9)" fg:x="51794" fg:w="27"/><text x="44.2218%" y="687.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (26 samples, 0.02%)</title><rect x="43.9727%" y="661" width="0.0221%" height="15" fill="rgb(215,115,40)" fg:x="51795" fg:w="26"/><text x="44.2227%" y="671.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (26 samples, 0.02%)</title><rect x="43.9727%" y="645" width="0.0221%" height="15" fill="rgb(222,69,34)" fg:x="51795" fg:w="26"/><text x="44.2227%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (26 samples, 0.02%)</title><rect x="43.9727%" y="629" width="0.0221%" height="15" fill="rgb(209,161,10)" fg:x="51795" fg:w="26"/><text x="44.2227%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_swap (26 samples, 0.02%)</title><rect x="43.9727%" y="613" width="0.0221%" height="15" fill="rgb(217,6,38)" fg:x="51795" fg:w="26"/><text x="44.2227%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (24 samples, 0.02%)</title><rect x="44.0016%" y="645" width="0.0204%" height="15" fill="rgb(229,229,48)" fg:x="51829" fg:w="24"/><text x="44.2516%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (24 samples, 0.02%)</title><rect x="44.0016%" y="629" width="0.0204%" height="15" fill="rgb(225,21,28)" fg:x="51829" fg:w="24"/><text x="44.2516%" y="639.50"></text></g><g><title>event_listener::Inner::lock (26 samples, 0.02%)</title><rect x="44.0007%" y="709" width="0.0221%" height="15" fill="rgb(206,33,13)" fg:x="51828" fg:w="26"/><text x="44.2507%" y="719.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (26 samples, 0.02%)</title><rect x="44.0007%" y="693" width="0.0221%" height="15" fill="rgb(242,178,17)" fg:x="51828" fg:w="26"/><text x="44.2507%" y="703.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (26 samples, 0.02%)</title><rect x="44.0007%" y="677" width="0.0221%" height="15" fill="rgb(220,162,5)" fg:x="51828" fg:w="26"/><text x="44.2507%" y="687.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (26 samples, 0.02%)</title><rect x="44.0007%" y="661" width="0.0221%" height="15" fill="rgb(210,33,43)" fg:x="51828" fg:w="26"/><text x="44.2507%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (22 samples, 0.02%)</title><rect x="44.0466%" y="613" width="0.0187%" height="15" fill="rgb(216,116,54)" fg:x="51882" fg:w="22"/><text x="44.2966%" y="623.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.02%)</title><rect x="44.0466%" y="597" width="0.0187%" height="15" fill="rgb(249,92,24)" fg:x="51882" fg:w="22"/><text x="44.2966%" y="607.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (22 samples, 0.02%)</title><rect x="44.0466%" y="581" width="0.0187%" height="15" fill="rgb(231,189,14)" fg:x="51882" fg:w="22"/><text x="44.2966%" y="591.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (22 samples, 0.02%)</title><rect x="44.0466%" y="565" width="0.0187%" height="15" fill="rgb(230,8,41)" fg:x="51882" fg:w="22"/><text x="44.2966%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (22 samples, 0.02%)</title><rect x="44.0466%" y="549" width="0.0187%" height="15" fill="rgb(249,7,27)" fg:x="51882" fg:w="22"/><text x="44.2966%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_swap (22 samples, 0.02%)</title><rect x="44.0466%" y="533" width="0.0187%" height="15" fill="rgb(232,86,5)" fg:x="51882" fg:w="22"/><text x="44.2966%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (13 samples, 0.01%)</title><rect x="44.0652%" y="613" width="0.0110%" height="15" fill="rgb(224,175,18)" fg:x="51904" fg:w="13"/><text x="44.3152%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (13 samples, 0.01%)</title><rect x="44.0652%" y="597" width="0.0110%" height="15" fill="rgb(220,129,12)" fg:x="51904" fg:w="13"/><text x="44.3152%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (16 samples, 0.01%)</title><rect x="44.0890%" y="533" width="0.0136%" height="15" fill="rgb(210,19,36)" fg:x="51932" fg:w="16"/><text x="44.3390%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_swap (16 samples, 0.01%)</title><rect x="44.0890%" y="517" width="0.0136%" height="15" fill="rgb(219,96,14)" fg:x="51932" fg:w="16"/><text x="44.3390%" y="527.50"></text></g><g><title>parking::Unparker::unpark (28 samples, 0.02%)</title><rect x="44.0848%" y="565" width="0.0238%" height="15" fill="rgb(249,106,1)" fg:x="51927" fg:w="28"/><text x="44.3348%" y="575.50"></text></g><g><title>parking::Inner::unpark (25 samples, 0.02%)</title><rect x="44.0873%" y="549" width="0.0212%" height="15" fill="rgb(249,155,20)" fg:x="51930" fg:w="25"/><text x="44.3373%" y="559.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (41 samples, 0.03%)</title><rect x="44.0763%" y="581" width="0.0348%" height="15" fill="rgb(244,168,9)" fg:x="51917" fg:w="41"/><text x="44.3263%" y="591.50"></text></g><g><title>core::task::wake::Waker::wake (66 samples, 0.06%)</title><rect x="44.0763%" y="613" width="0.0560%" height="15" fill="rgb(216,23,50)" fg:x="51917" fg:w="66"/><text x="44.3263%" y="623.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (66 samples, 0.06%)</title><rect x="44.0763%" y="597" width="0.0560%" height="15" fill="rgb(224,219,20)" fg:x="51917" fg:w="66"/><text x="44.3263%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (25 samples, 0.02%)</title><rect x="44.1111%" y="581" width="0.0212%" height="15" fill="rgb(222,156,15)" fg:x="51958" fg:w="25"/><text x="44.3611%" y="591.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.02%)</title><rect x="44.1111%" y="565" width="0.0212%" height="15" fill="rgb(231,97,17)" fg:x="51958" fg:w="25"/><text x="44.3611%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (24 samples, 0.02%)</title><rect x="44.1119%" y="549" width="0.0204%" height="15" fill="rgb(218,70,48)" fg:x="51959" fg:w="24"/><text x="44.3619%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_sub (24 samples, 0.02%)</title><rect x="44.1119%" y="533" width="0.0204%" height="15" fill="rgb(212,196,52)" fg:x="51959" fg:w="24"/><text x="44.3619%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (20 samples, 0.02%)</title><rect x="44.1349%" y="565" width="0.0170%" height="15" fill="rgb(243,203,18)" fg:x="51986" fg:w="20"/><text x="44.3849%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (20 samples, 0.02%)</title><rect x="44.1349%" y="549" width="0.0170%" height="15" fill="rgb(252,125,41)" fg:x="51986" fg:w="20"/><text x="44.3849%" y="559.50"></text></g><g><title>async_executor::State::notify (151 samples, 0.13%)</title><rect x="44.0381%" y="629" width="0.1282%" height="15" fill="rgb(223,180,33)" fg:x="51872" fg:w="151"/><text x="44.2881%" y="639.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (40 samples, 0.03%)</title><rect x="44.1323%" y="613" width="0.0340%" height="15" fill="rgb(254,159,46)" fg:x="51983" fg:w="40"/><text x="44.3823%" y="623.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (38 samples, 0.03%)</title><rect x="44.1340%" y="597" width="0.0323%" height="15" fill="rgb(254,38,10)" fg:x="51985" fg:w="38"/><text x="44.3840%" y="607.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (38 samples, 0.03%)</title><rect x="44.1340%" y="581" width="0.0323%" height="15" fill="rgb(208,217,32)" fg:x="51985" fg:w="38"/><text x="44.3840%" y="591.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (17 samples, 0.01%)</title><rect x="44.1518%" y="565" width="0.0144%" height="15" fill="rgb(221,120,13)" fg:x="52006" fg:w="17"/><text x="44.4018%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (39 samples, 0.03%)</title><rect x="44.1680%" y="597" width="0.0331%" height="15" fill="rgb(246,54,52)" fg:x="52025" fg:w="39"/><text x="44.4180%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (39 samples, 0.03%)</title><rect x="44.1680%" y="581" width="0.0331%" height="15" fill="rgb(242,34,25)" fg:x="52025" fg:w="39"/><text x="44.4180%" y="591.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (202 samples, 0.17%)</title><rect x="44.0381%" y="645" width="0.1715%" height="15" fill="rgb(247,209,9)" fg:x="51872" fg:w="202"/><text x="44.2881%" y="655.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (51 samples, 0.04%)</title><rect x="44.1663%" y="629" width="0.0433%" height="15" fill="rgb(228,71,26)" fg:x="52023" fg:w="51"/><text x="44.4163%" y="639.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (50 samples, 0.04%)</title><rect x="44.1671%" y="613" width="0.0424%" height="15" fill="rgb(222,145,49)" fg:x="52024" fg:w="50"/><text x="44.4171%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (33 samples, 0.03%)</title><rect x="44.2096%" y="645" width="0.0280%" height="15" fill="rgb(218,121,17)" fg:x="52074" fg:w="33"/><text x="44.4596%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (33 samples, 0.03%)</title><rect x="44.2096%" y="629" width="0.0280%" height="15" fill="rgb(244,50,7)" fg:x="52074" fg:w="33"/><text x="44.4596%" y="639.50"></text></g><g><title>event_listener::List::notify (261 samples, 0.22%)</title><rect x="44.0228%" y="709" width="0.2216%" height="15" fill="rgb(246,229,37)" fg:x="51854" fg:w="261"/><text x="44.2728%" y="719.50"></text></g><g><title>core::task::wake::Waker::wake (252 samples, 0.21%)</title><rect x="44.0304%" y="693" width="0.2139%" height="15" fill="rgb(225,18,5)" fg:x="51863" fg:w="252"/><text x="44.2804%" y="703.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (252 samples, 0.21%)</title><rect x="44.0304%" y="677" width="0.2139%" height="15" fill="rgb(213,204,8)" fg:x="51863" fg:w="252"/><text x="44.2804%" y="687.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (243 samples, 0.21%)</title><rect x="44.0381%" y="661" width="0.2063%" height="15" fill="rgb(238,103,6)" fg:x="51872" fg:w="243"/><text x="44.2881%" y="671.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (1,124 samples, 0.95%)</title><rect x="43.5881%" y="741" width="0.9542%" height="15" fill="rgb(222,25,35)" fg:x="51342" fg:w="1124"/><text x="43.8381%" y="751.50"></text></g><g><title>event_listener::Event::notify (682 samples, 0.58%)</title><rect x="43.9634%" y="725" width="0.5790%" height="15" fill="rgb(213,203,35)" fg:x="51784" fg:w="682"/><text x="44.2134%" y="735.50"></text></g><g><title>event_listener::full_fence (351 samples, 0.30%)</title><rect x="44.2444%" y="709" width="0.2980%" height="15" fill="rgb(221,79,53)" fg:x="52115" fg:w="351"/><text x="44.4944%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (349 samples, 0.30%)</title><rect x="44.2461%" y="693" width="0.2963%" height="15" fill="rgb(243,200,35)" fg:x="52117" fg:w="349"/><text x="44.4961%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (349 samples, 0.30%)</title><rect x="44.2461%" y="677" width="0.2963%" height="15" fill="rgb(248,60,25)" fg:x="52117" fg:w="349"/><text x="44.4961%" y="687.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,212 samples, 1.03%)</title><rect x="43.5771%" y="821" width="1.0290%" height="15" fill="rgb(227,53,46)" fg:x="51329" fg:w="1212"/><text x="43.8271%" y="831.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (1,212 samples, 1.03%)</title><rect x="43.5771%" y="805" width="1.0290%" height="15" fill="rgb(216,120,32)" fg:x="51329" fg:w="1212"/><text x="43.8271%" y="815.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,212 samples, 1.03%)</title><rect x="43.5771%" y="789" width="1.0290%" height="15" fill="rgb(220,134,1)" fg:x="51329" fg:w="1212"/><text x="43.8271%" y="799.50"></text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (1,212 samples, 1.03%)</title><rect x="43.5771%" y="773" width="1.0290%" height="15" fill="rgb(237,168,5)" fg:x="51329" fg:w="1212"/><text x="43.8271%" y="783.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (1,212 samples, 1.03%)</title><rect x="43.5771%" y="757" width="1.0290%" height="15" fill="rgb(231,100,33)" fg:x="51329" fg:w="1212"/><text x="43.8271%" y="767.50"></text></g><g><title>event_listener::Event::notify (65 samples, 0.06%)</title><rect x="44.5508%" y="741" width="0.0552%" height="15" fill="rgb(236,177,47)" fg:x="52476" fg:w="65"/><text x="44.8008%" y="751.50"></text></g><g><title>event_listener::full_fence (60 samples, 0.05%)</title><rect x="44.5551%" y="725" width="0.0509%" height="15" fill="rgb(235,7,49)" fg:x="52481" fg:w="60"/><text x="44.8051%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (60 samples, 0.05%)</title><rect x="44.5551%" y="709" width="0.0509%" height="15" fill="rgb(232,119,22)" fg:x="52481" fg:w="60"/><text x="44.8051%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (60 samples, 0.05%)</title><rect x="44.5551%" y="693" width="0.0509%" height="15" fill="rgb(254,73,53)" fg:x="52481" fg:w="60"/><text x="44.8051%" y="703.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.01%)</title><rect x="44.8387%" y="805" width="0.0102%" height="15" fill="rgb(251,35,20)" fg:x="52815" fg:w="12"/><text x="45.0887%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (47 samples, 0.04%)</title><rect x="45.0178%" y="677" width="0.0399%" height="15" fill="rgb(241,119,20)" fg:x="53026" fg:w="47"/><text x="45.2678%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (47 samples, 0.04%)</title><rect x="45.0178%" y="661" width="0.0399%" height="15" fill="rgb(207,102,14)" fg:x="53026" fg:w="47"/><text x="45.2678%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (47 samples, 0.04%)</title><rect x="45.0178%" y="645" width="0.0399%" height="15" fill="rgb(248,201,50)" fg:x="53026" fg:w="47"/><text x="45.2678%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (47 samples, 0.04%)</title><rect x="45.0178%" y="629" width="0.0399%" height="15" fill="rgb(222,185,44)" fg:x="53026" fg:w="47"/><text x="45.2678%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (47 samples, 0.04%)</title><rect x="45.0178%" y="613" width="0.0399%" height="15" fill="rgb(218,107,18)" fg:x="53026" fg:w="47"/><text x="45.2678%" y="623.50"></text></g><g><title>alloc::alloc::alloc (43 samples, 0.04%)</title><rect x="45.0212%" y="597" width="0.0365%" height="15" fill="rgb(237,177,39)" fg:x="53030" fg:w="43"/><text x="45.2712%" y="607.50"></text></g><g><title>__rg_alloc (43 samples, 0.04%)</title><rect x="45.0212%" y="581" width="0.0365%" height="15" fill="rgb(246,69,6)" fg:x="53030" fg:w="43"/><text x="45.2712%" y="591.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (43 samples, 0.04%)</title><rect x="45.0212%" y="565" width="0.0365%" height="15" fill="rgb(234,208,37)" fg:x="53030" fg:w="43"/><text x="45.2712%" y="575.50"></text></g><g><title>sn_rust_alloc (38 samples, 0.03%)</title><rect x="45.0254%" y="549" width="0.0323%" height="15" fill="rgb(225,4,6)" fg:x="53035" fg:w="38"/><text x="45.2754%" y="559.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (12 samples, 0.01%)</title><rect x="45.0475%" y="533" width="0.0102%" height="15" fill="rgb(233,45,0)" fg:x="53061" fg:w="12"/><text x="45.2975%" y="543.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (78 samples, 0.07%)</title><rect x="45.0127%" y="789" width="0.0662%" height="15" fill="rgb(226,136,5)" fg:x="53020" fg:w="78"/><text x="45.2627%" y="799.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (72 samples, 0.06%)</title><rect x="45.0178%" y="773" width="0.0611%" height="15" fill="rgb(211,91,47)" fg:x="53026" fg:w="72"/><text x="45.2678%" y="783.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (72 samples, 0.06%)</title><rect x="45.0178%" y="757" width="0.0611%" height="15" fill="rgb(242,88,51)" fg:x="53026" fg:w="72"/><text x="45.2678%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (72 samples, 0.06%)</title><rect x="45.0178%" y="741" width="0.0611%" height="15" fill="rgb(230,91,28)" fg:x="53026" fg:w="72"/><text x="45.2678%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (72 samples, 0.06%)</title><rect x="45.0178%" y="725" width="0.0611%" height="15" fill="rgb(254,186,29)" fg:x="53026" fg:w="72"/><text x="45.2678%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (72 samples, 0.06%)</title><rect x="45.0178%" y="709" width="0.0611%" height="15" fill="rgb(238,6,4)" fg:x="53026" fg:w="72"/><text x="45.2678%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (72 samples, 0.06%)</title><rect x="45.0178%" y="693" width="0.0611%" height="15" fill="rgb(221,151,16)" fg:x="53026" fg:w="72"/><text x="45.2678%" y="703.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (25 samples, 0.02%)</title><rect x="45.0577%" y="677" width="0.0212%" height="15" fill="rgb(251,143,52)" fg:x="53073" fg:w="25"/><text x="45.3077%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (25 samples, 0.02%)</title><rect x="45.0577%" y="661" width="0.0212%" height="15" fill="rgb(206,90,15)" fg:x="53073" fg:w="25"/><text x="45.3077%" y="671.50"></text></g><g><title>[libc-2.31.so] (19 samples, 0.02%)</title><rect x="45.0628%" y="645" width="0.0161%" height="15" fill="rgb(218,35,8)" fg:x="53079" fg:w="19"/><text x="45.3128%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (44 samples, 0.04%)</title><rect x="45.0899%" y="581" width="0.0374%" height="15" fill="rgb(239,215,6)" fg:x="53111" fg:w="44"/><text x="45.3399%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (44 samples, 0.04%)</title><rect x="45.0899%" y="565" width="0.0374%" height="15" fill="rgb(245,116,39)" fg:x="53111" fg:w="44"/><text x="45.3399%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (44 samples, 0.04%)</title><rect x="45.0899%" y="549" width="0.0374%" height="15" fill="rgb(242,65,28)" fg:x="53111" fg:w="44"/><text x="45.3399%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (43 samples, 0.04%)</title><rect x="45.0908%" y="533" width="0.0365%" height="15" fill="rgb(252,132,53)" fg:x="53112" fg:w="43"/><text x="45.3408%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (43 samples, 0.04%)</title><rect x="45.0908%" y="517" width="0.0365%" height="15" fill="rgb(224,159,50)" fg:x="53112" fg:w="43"/><text x="45.3408%" y="527.50"></text></g><g><title>alloc::alloc::alloc (43 samples, 0.04%)</title><rect x="45.0908%" y="501" width="0.0365%" height="15" fill="rgb(224,93,4)" fg:x="53112" fg:w="43"/><text x="45.3408%" y="511.50"></text></g><g><title>__rg_alloc (43 samples, 0.04%)</title><rect x="45.0908%" y="485" width="0.0365%" height="15" fill="rgb(208,81,34)" fg:x="53112" fg:w="43"/><text x="45.3408%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (43 samples, 0.04%)</title><rect x="45.0908%" y="469" width="0.0365%" height="15" fill="rgb(233,92,54)" fg:x="53112" fg:w="43"/><text x="45.3408%" y="479.50"></text></g><g><title>sn_rust_alloc (41 samples, 0.03%)</title><rect x="45.0925%" y="453" width="0.0348%" height="15" fill="rgb(237,21,14)" fg:x="53114" fg:w="41"/><text x="45.3425%" y="463.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (17 samples, 0.01%)</title><rect x="45.1129%" y="437" width="0.0144%" height="15" fill="rgb(249,128,51)" fg:x="53138" fg:w="17"/><text x="45.3629%" y="447.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (57 samples, 0.05%)</title><rect x="45.0899%" y="693" width="0.0484%" height="15" fill="rgb(223,129,24)" fg:x="53111" fg:w="57"/><text x="45.3399%" y="703.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (57 samples, 0.05%)</title><rect x="45.0899%" y="677" width="0.0484%" height="15" fill="rgb(231,168,25)" fg:x="53111" fg:w="57"/><text x="45.3399%" y="687.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (57 samples, 0.05%)</title><rect x="45.0899%" y="661" width="0.0484%" height="15" fill="rgb(224,39,20)" fg:x="53111" fg:w="57"/><text x="45.3399%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (57 samples, 0.05%)</title><rect x="45.0899%" y="645" width="0.0484%" height="15" fill="rgb(225,152,53)" fg:x="53111" fg:w="57"/><text x="45.3399%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (57 samples, 0.05%)</title><rect x="45.0899%" y="629" width="0.0484%" height="15" fill="rgb(252,17,24)" fg:x="53111" fg:w="57"/><text x="45.3399%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (57 samples, 0.05%)</title><rect x="45.0899%" y="613" width="0.0484%" height="15" fill="rgb(250,114,30)" fg:x="53111" fg:w="57"/><text x="45.3399%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (57 samples, 0.05%)</title><rect x="45.0899%" y="597" width="0.0484%" height="15" fill="rgb(229,5,4)" fg:x="53111" fg:w="57"/><text x="45.3399%" y="607.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (13 samples, 0.01%)</title><rect x="45.1273%" y="581" width="0.0110%" height="15" fill="rgb(225,176,49)" fg:x="53155" fg:w="13"/><text x="45.3773%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13 samples, 0.01%)</title><rect x="45.1273%" y="565" width="0.0110%" height="15" fill="rgb(224,221,49)" fg:x="53155" fg:w="13"/><text x="45.3773%" y="575.50"></text></g><g><title>[libc-2.31.so] (12 samples, 0.01%)</title><rect x="45.1282%" y="549" width="0.0102%" height="15" fill="rgb(253,169,27)" fg:x="53156" fg:w="12"/><text x="45.3782%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (20 samples, 0.02%)</title><rect x="45.1562%" y="645" width="0.0170%" height="15" fill="rgb(211,206,16)" fg:x="53189" fg:w="20"/><text x="45.4062%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (20 samples, 0.02%)</title><rect x="45.1562%" y="629" width="0.0170%" height="15" fill="rgb(244,87,35)" fg:x="53189" fg:w="20"/><text x="45.4062%" y="639.50"></text></g><g><title>alloc::alloc::alloc (20 samples, 0.02%)</title><rect x="45.1562%" y="613" width="0.0170%" height="15" fill="rgb(246,28,10)" fg:x="53189" fg:w="20"/><text x="45.4062%" y="623.50"></text></g><g><title>__rg_alloc (20 samples, 0.02%)</title><rect x="45.1562%" y="597" width="0.0170%" height="15" fill="rgb(229,12,44)" fg:x="53189" fg:w="20"/><text x="45.4062%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (20 samples, 0.02%)</title><rect x="45.1562%" y="581" width="0.0170%" height="15" fill="rgb(210,145,37)" fg:x="53189" fg:w="20"/><text x="45.4062%" y="591.50"></text></g><g><title>sn_rust_alloc (20 samples, 0.02%)</title><rect x="45.1562%" y="565" width="0.0170%" height="15" fill="rgb(227,112,52)" fg:x="53189" fg:w="20"/><text x="45.4062%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (28 samples, 0.02%)</title><rect x="45.1519%" y="693" width="0.0238%" height="15" fill="rgb(238,155,34)" fg:x="53184" fg:w="28"/><text x="45.4019%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (25 samples, 0.02%)</title><rect x="45.1545%" y="677" width="0.0212%" height="15" fill="rgb(239,226,36)" fg:x="53187" fg:w="25"/><text x="45.4045%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (25 samples, 0.02%)</title><rect x="45.1545%" y="661" width="0.0212%" height="15" fill="rgb(230,16,23)" fg:x="53187" fg:w="25"/><text x="45.4045%" y="671.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (389 samples, 0.33%)</title><rect x="44.8505%" y="805" width="0.3303%" height="15" fill="rgb(236,171,36)" fg:x="52829" fg:w="389"/><text x="45.1005%" y="815.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (120 samples, 0.10%)</title><rect x="45.0789%" y="789" width="0.1019%" height="15" fill="rgb(221,22,14)" fg:x="53098" fg:w="120"/><text x="45.3289%" y="799.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (108 samples, 0.09%)</title><rect x="45.0891%" y="773" width="0.0917%" height="15" fill="rgb(242,43,11)" fg:x="53110" fg:w="108"/><text x="45.3391%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (108 samples, 0.09%)</title><rect x="45.0891%" y="757" width="0.0917%" height="15" fill="rgb(232,69,23)" fg:x="53110" fg:w="108"/><text x="45.3391%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (108 samples, 0.09%)</title><rect x="45.0891%" y="741" width="0.0917%" height="15" fill="rgb(216,180,54)" fg:x="53110" fg:w="108"/><text x="45.3391%" y="751.50"></text></g><g><title>alloc::slice::hack::to_vec (108 samples, 0.09%)</title><rect x="45.0891%" y="725" width="0.0917%" height="15" fill="rgb(216,5,24)" fg:x="53110" fg:w="108"/><text x="45.3391%" y="735.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (108 samples, 0.09%)</title><rect x="45.0891%" y="709" width="0.0917%" height="15" fill="rgb(225,89,9)" fg:x="53110" fg:w="108"/><text x="45.3391%" y="719.50"></text></g><g><title>[libc-2.31.so] (56 samples, 0.05%)</title><rect x="45.1808%" y="805" width="0.0475%" height="15" fill="rgb(243,75,33)" fg:x="53218" fg:w="56"/><text x="45.4308%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (155 samples, 0.13%)</title><rect x="45.2309%" y="805" width="0.1316%" height="15" fill="rgb(247,141,45)" fg:x="53277" fg:w="155"/><text x="45.4809%" y="815.50"></text></g><g><title>core::ptr::write (142 samples, 0.12%)</title><rect x="45.2419%" y="789" width="0.1206%" height="15" fill="rgb(232,177,36)" fg:x="53290" fg:w="142"/><text x="45.4919%" y="799.50"></text></g><g><title>[libc-2.31.so] (141 samples, 0.12%)</title><rect x="45.2428%" y="773" width="0.1197%" height="15" fill="rgb(219,125,36)" fg:x="53291" fg:w="141"/><text x="45.4928%" y="783.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (319 samples, 0.27%)</title><rect x="45.3939%" y="645" width="0.2708%" height="15" fill="rgb(227,94,9)" fg:x="53469" fg:w="319"/><text x="45.6439%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (355 samples, 0.30%)</title><rect x="45.3693%" y="741" width="0.3014%" height="15" fill="rgb(240,34,52)" fg:x="53440" fg:w="355"/><text x="45.6193%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (355 samples, 0.30%)</title><rect x="45.3693%" y="725" width="0.3014%" height="15" fill="rgb(216,45,12)" fg:x="53440" fg:w="355"/><text x="45.6193%" y="735.50"></text></g><g><title>alloc::alloc::alloc (353 samples, 0.30%)</title><rect x="45.3710%" y="709" width="0.2997%" height="15" fill="rgb(246,21,19)" fg:x="53442" fg:w="353"/><text x="45.6210%" y="719.50"></text></g><g><title>__rg_alloc (353 samples, 0.30%)</title><rect x="45.3710%" y="693" width="0.2997%" height="15" fill="rgb(213,98,42)" fg:x="53442" fg:w="353"/><text x="45.6210%" y="703.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (353 samples, 0.30%)</title><rect x="45.3710%" y="677" width="0.2997%" height="15" fill="rgb(250,136,47)" fg:x="53442" fg:w="353"/><text x="45.6210%" y="687.50"></text></g><g><title>sn_rust_alloc (353 samples, 0.30%)</title><rect x="45.3710%" y="661" width="0.2997%" height="15" fill="rgb(251,124,27)" fg:x="53442" fg:w="353"/><text x="45.6210%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (364 samples, 0.31%)</title><rect x="45.3625%" y="805" width="0.3090%" height="15" fill="rgb(229,180,14)" fg:x="53432" fg:w="364"/><text x="45.6125%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (364 samples, 0.31%)</title><rect x="45.3625%" y="789" width="0.3090%" height="15" fill="rgb(245,216,25)" fg:x="53432" fg:w="364"/><text x="45.6125%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (360 samples, 0.31%)</title><rect x="45.3659%" y="773" width="0.3056%" height="15" fill="rgb(251,43,5)" fg:x="53436" fg:w="360"/><text x="45.6159%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (360 samples, 0.31%)</title><rect x="45.3659%" y="757" width="0.3056%" height="15" fill="rgb(250,128,24)" fg:x="53436" fg:w="360"/><text x="45.6159%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (36 samples, 0.03%)</title><rect x="45.6715%" y="805" width="0.0306%" height="15" fill="rgb(217,117,27)" fg:x="53796" fg:w="36"/><text x="45.9215%" y="815.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (36 samples, 0.03%)</title><rect x="45.6715%" y="789" width="0.0306%" height="15" fill="rgb(245,147,4)" fg:x="53796" fg:w="36"/><text x="45.9215%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (32 samples, 0.03%)</title><rect x="45.6749%" y="773" width="0.0272%" height="15" fill="rgb(242,201,35)" fg:x="53800" fg:w="32"/><text x="45.9249%" y="783.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.03%)</title><rect x="45.6749%" y="757" width="0.0272%" height="15" fill="rgb(218,181,1)" fg:x="53800" fg:w="32"/><text x="45.9249%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (27 samples, 0.02%)</title><rect x="45.6791%" y="741" width="0.0229%" height="15" fill="rgb(222,6,29)" fg:x="53805" fg:w="27"/><text x="45.9291%" y="751.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.02%)</title><rect x="45.6791%" y="725" width="0.0229%" height="15" fill="rgb(208,186,3)" fg:x="53805" fg:w="27"/><text x="45.9291%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (27 samples, 0.02%)</title><rect x="45.6791%" y="709" width="0.0229%" height="15" fill="rgb(216,36,26)" fg:x="53805" fg:w="27"/><text x="45.9291%" y="719.50"></text></g><g><title>alloc::alloc::dealloc (27 samples, 0.02%)</title><rect x="45.6791%" y="693" width="0.0229%" height="15" fill="rgb(248,201,23)" fg:x="53805" fg:w="27"/><text x="45.9291%" y="703.50"></text></g><g><title>__rg_dealloc (27 samples, 0.02%)</title><rect x="45.6791%" y="677" width="0.0229%" height="15" fill="rgb(251,170,31)" fg:x="53805" fg:w="27"/><text x="45.9291%" y="687.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (27 samples, 0.02%)</title><rect x="45.6791%" y="661" width="0.0229%" height="15" fill="rgb(207,110,25)" fg:x="53805" fg:w="27"/><text x="45.9291%" y="671.50"></text></g><g><title>sn_rust_dealloc (24 samples, 0.02%)</title><rect x="45.6817%" y="645" width="0.0204%" height="15" fill="rgb(250,54,15)" fg:x="53808" fg:w="24"/><text x="45.9317%" y="655.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (2,506 samples, 2.13%)</title><rect x="43.5771%" y="901" width="2.1275%" height="15" fill="rgb(227,68,33)" fg:x="51329" fg:w="2506"/><text x="43.8271%" y="911.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,506 samples, 2.13%)</title><rect x="43.5771%" y="885" width="2.1275%" height="15" fill="rgb(238,34,41)" fg:x="51329" fg:w="2506"/><text x="43.8271%" y="895.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (2,506 samples, 2.13%)</title><rect x="43.5771%" y="869" width="2.1275%" height="15" fill="rgb(220,11,15)" fg:x="51329" fg:w="2506"/><text x="43.8271%" y="879.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,506 samples, 2.13%)</title><rect x="43.5771%" y="853" width="2.1275%" height="15" fill="rgb(246,111,35)" fg:x="51329" fg:w="2506"/><text x="43.8271%" y="863.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (2,506 samples, 2.13%)</title><rect x="43.5771%" y="837" width="2.1275%" height="15" fill="rgb(209,88,53)" fg:x="51329" fg:w="2506"/><text x="43.8271%" y="847.50">t..</text></g><g><title>tremor_runtime::connectors::source::build_events (1,294 samples, 1.10%)</title><rect x="44.6060%" y="821" width="1.0986%" height="15" fill="rgb(231,185,47)" fg:x="52541" fg:w="1294"/><text x="44.8560%" y="831.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (34 samples, 0.03%)</title><rect x="45.7564%" y="837" width="0.0289%" height="15" fill="rgb(233,154,1)" fg:x="53896" fg:w="34"/><text x="46.0064%" y="847.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (28 samples, 0.02%)</title><rect x="45.7615%" y="821" width="0.0238%" height="15" fill="rgb(225,15,46)" fg:x="53902" fg:w="28"/><text x="46.0115%" y="831.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (295 samples, 0.25%)</title><rect x="45.7173%" y="853" width="0.2504%" height="15" fill="rgb(211,135,41)" fg:x="53850" fg:w="295"/><text x="45.9673%" y="863.50"></text></g><g><title>[libc-2.31.so] (215 samples, 0.18%)</title><rect x="45.7853%" y="837" width="0.1825%" height="15" fill="rgb(208,54,0)" fg:x="53930" fg:w="215"/><text x="46.0353%" y="847.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (453 samples, 0.38%)</title><rect x="45.7046%" y="885" width="0.3846%" height="15" fill="rgb(244,136,14)" fg:x="53835" fg:w="453"/><text x="45.9546%" y="895.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (453 samples, 0.38%)</title><rect x="45.7046%" y="869" width="0.3846%" height="15" fill="rgb(241,56,14)" fg:x="53835" fg:w="453"/><text x="45.9546%" y="879.50"></text></g><g><title>[libc-2.31.so] (143 samples, 0.12%)</title><rect x="45.9678%" y="853" width="0.1214%" height="15" fill="rgb(205,80,24)" fg:x="54145" fg:w="143"/><text x="46.2178%" y="863.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (147 samples, 0.12%)</title><rect x="46.0892%" y="853" width="0.1248%" height="15" fill="rgb(220,57,4)" fg:x="54288" fg:w="147"/><text x="46.3392%" y="863.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (147 samples, 0.12%)</title><rect x="46.0892%" y="837" width="0.1248%" height="15" fill="rgb(226,193,50)" fg:x="54288" fg:w="147"/><text x="46.3392%" y="847.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (147 samples, 0.12%)</title><rect x="46.0892%" y="821" width="0.1248%" height="15" fill="rgb(231,168,22)" fg:x="54288" fg:w="147"/><text x="46.3392%" y="831.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (147 samples, 0.12%)</title><rect x="46.0892%" y="805" width="0.1248%" height="15" fill="rgb(254,215,14)" fg:x="54288" fg:w="147"/><text x="46.3392%" y="815.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (147 samples, 0.12%)</title><rect x="46.0892%" y="789" width="0.1248%" height="15" fill="rgb(211,115,16)" fg:x="54288" fg:w="147"/><text x="46.3392%" y="799.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (147 samples, 0.12%)</title><rect x="46.0892%" y="773" width="0.1248%" height="15" fill="rgb(236,210,16)" fg:x="54288" fg:w="147"/><text x="46.3392%" y="783.50"></text></g><g><title>alloc::slice::hack::to_vec (147 samples, 0.12%)</title><rect x="46.0892%" y="757" width="0.1248%" height="15" fill="rgb(221,94,12)" fg:x="54288" fg:w="147"/><text x="46.3392%" y="767.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (147 samples, 0.12%)</title><rect x="46.0892%" y="741" width="0.1248%" height="15" fill="rgb(235,218,49)" fg:x="54288" fg:w="147"/><text x="46.3392%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (147 samples, 0.12%)</title><rect x="46.0892%" y="725" width="0.1248%" height="15" fill="rgb(217,114,14)" fg:x="54288" fg:w="147"/><text x="46.3392%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (147 samples, 0.12%)</title><rect x="46.0892%" y="709" width="0.1248%" height="15" fill="rgb(216,145,22)" fg:x="54288" fg:w="147"/><text x="46.3392%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (147 samples, 0.12%)</title><rect x="46.0892%" y="693" width="0.1248%" height="15" fill="rgb(217,112,39)" fg:x="54288" fg:w="147"/><text x="46.3392%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (147 samples, 0.12%)</title><rect x="46.0892%" y="677" width="0.1248%" height="15" fill="rgb(225,85,32)" fg:x="54288" fg:w="147"/><text x="46.3392%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (147 samples, 0.12%)</title><rect x="46.0892%" y="661" width="0.1248%" height="15" fill="rgb(245,209,47)" fg:x="54288" fg:w="147"/><text x="46.3392%" y="671.50"></text></g><g><title>alloc::alloc::alloc (147 samples, 0.12%)</title><rect x="46.0892%" y="645" width="0.1248%" height="15" fill="rgb(218,220,15)" fg:x="54288" fg:w="147"/><text x="46.3392%" y="655.50"></text></g><g><title>__rg_alloc (147 samples, 0.12%)</title><rect x="46.0892%" y="629" width="0.1248%" height="15" fill="rgb(222,202,31)" fg:x="54288" fg:w="147"/><text x="46.3392%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (147 samples, 0.12%)</title><rect x="46.0892%" y="613" width="0.1248%" height="15" fill="rgb(243,203,4)" fg:x="54288" fg:w="147"/><text x="46.3392%" y="623.50"></text></g><g><title>sn_rust_alloc (147 samples, 0.12%)</title><rect x="46.0892%" y="597" width="0.1248%" height="15" fill="rgb(237,92,17)" fg:x="54288" fg:w="147"/><text x="46.3392%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (28 samples, 0.02%)</title><rect x="46.2140%" y="853" width="0.0238%" height="15" fill="rgb(231,119,7)" fg:x="54435" fg:w="28"/><text x="46.4640%" y="863.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.02%)</title><rect x="46.2140%" y="837" width="0.0238%" height="15" fill="rgb(237,82,41)" fg:x="54435" fg:w="28"/><text x="46.4640%" y="847.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (133 samples, 0.11%)</title><rect x="46.2573%" y="821" width="0.1129%" height="15" fill="rgb(226,81,48)" fg:x="54486" fg:w="133"/><text x="46.5073%" y="831.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (129 samples, 0.11%)</title><rect x="46.2607%" y="805" width="0.1095%" height="15" fill="rgb(234,70,51)" fg:x="54490" fg:w="129"/><text x="46.5107%" y="815.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (129 samples, 0.11%)</title><rect x="46.2607%" y="789" width="0.1095%" height="15" fill="rgb(251,86,4)" fg:x="54490" fg:w="129"/><text x="46.5107%" y="799.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (129 samples, 0.11%)</title><rect x="46.2607%" y="773" width="0.1095%" height="15" fill="rgb(244,144,28)" fg:x="54490" fg:w="129"/><text x="46.5107%" y="783.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (129 samples, 0.11%)</title><rect x="46.2607%" y="757" width="0.1095%" height="15" fill="rgb(232,161,39)" fg:x="54490" fg:w="129"/><text x="46.5107%" y="767.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (129 samples, 0.11%)</title><rect x="46.2607%" y="741" width="0.1095%" height="15" fill="rgb(247,34,51)" fg:x="54490" fg:w="129"/><text x="46.5107%" y="751.50"></text></g><g><title>[libc-2.31.so] (97 samples, 0.08%)</title><rect x="46.2879%" y="725" width="0.0824%" height="15" fill="rgb(225,132,2)" fg:x="54522" fg:w="97"/><text x="46.5379%" y="735.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (3,875 samples, 3.29%)</title><rect x="43.0830%" y="1077" width="3.2898%" height="15" fill="rgb(209,159,44)" fg:x="50747" fg:w="3875"/><text x="43.3330%" y="1087.50">asy..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (3,875 samples, 3.29%)</title><rect x="43.0830%" y="1061" width="3.2898%" height="15" fill="rgb(251,214,1)" fg:x="50747" fg:w="3875"/><text x="43.3330%" y="1071.50">&lt;co..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,875 samples, 3.29%)</title><rect x="43.0830%" y="1045" width="3.2898%" height="15" fill="rgb(247,84,47)" fg:x="50747" fg:w="3875"/><text x="43.3330%" y="1055.50">&lt;co..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (3,875 samples, 3.29%)</title><rect x="43.0830%" y="1029" width="3.2898%" height="15" fill="rgb(240,111,43)" fg:x="50747" fg:w="3875"/><text x="43.3330%" y="1039.50">asy..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (3,875 samples, 3.29%)</title><rect x="43.0830%" y="1013" width="3.2898%" height="15" fill="rgb(215,214,35)" fg:x="50747" fg:w="3875"/><text x="43.3330%" y="1023.50">&lt;as..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (3,875 samples, 3.29%)</title><rect x="43.0830%" y="997" width="3.2898%" height="15" fill="rgb(248,207,23)" fg:x="50747" fg:w="3875"/><text x="43.3330%" y="1007.50">asy..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3,875 samples, 3.29%)</title><rect x="43.0830%" y="981" width="3.2898%" height="15" fill="rgb(214,186,4)" fg:x="50747" fg:w="3875"/><text x="43.3330%" y="991.50">std..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3,875 samples, 3.29%)</title><rect x="43.0830%" y="965" width="3.2898%" height="15" fill="rgb(220,133,22)" fg:x="50747" fg:w="3875"/><text x="43.3330%" y="975.50">std..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (3,875 samples, 3.29%)</title><rect x="43.0830%" y="949" width="3.2898%" height="15" fill="rgb(239,134,19)" fg:x="50747" fg:w="3875"/><text x="43.3330%" y="959.50">asy..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (3,875 samples, 3.29%)</title><rect x="43.0830%" y="933" width="3.2898%" height="15" fill="rgb(250,140,9)" fg:x="50747" fg:w="3875"/><text x="43.3330%" y="943.50">&lt;as..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,875 samples, 3.29%)</title><rect x="43.0830%" y="917" width="3.2898%" height="15" fill="rgb(225,59,14)" fg:x="50747" fg:w="3875"/><text x="43.3330%" y="927.50">&lt;co..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (787 samples, 0.67%)</title><rect x="45.7046%" y="901" width="0.6681%" height="15" fill="rgb(214,152,51)" fg:x="53835" fg:w="787"/><text x="45.9546%" y="911.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (334 samples, 0.28%)</title><rect x="46.0892%" y="885" width="0.2836%" height="15" fill="rgb(251,227,43)" fg:x="54288" fg:w="334"/><text x="46.3392%" y="895.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (334 samples, 0.28%)</title><rect x="46.0892%" y="869" width="0.2836%" height="15" fill="rgb(241,96,17)" fg:x="54288" fg:w="334"/><text x="46.3392%" y="879.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (155 samples, 0.13%)</title><rect x="46.2412%" y="853" width="0.1316%" height="15" fill="rgb(234,198,43)" fg:x="54467" fg:w="155"/><text x="46.4912%" y="863.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get_mut (147 samples, 0.12%)</title><rect x="46.2480%" y="837" width="0.1248%" height="15" fill="rgb(220,108,29)" fg:x="54475" fg:w="147"/><text x="46.4980%" y="847.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (18 samples, 0.02%)</title><rect x="46.3889%" y="1077" width="0.0153%" height="15" fill="rgb(226,163,33)" fg:x="54641" fg:w="18"/><text x="46.6389%" y="1087.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (62 samples, 0.05%)</title><rect x="46.4373%" y="373" width="0.0526%" height="15" fill="rgb(205,194,45)" fg:x="54698" fg:w="62"/><text x="46.6873%" y="383.50"></text></g><g><title>[libc-2.31.so] (80 samples, 0.07%)</title><rect x="46.4925%" y="357" width="0.0679%" height="15" fill="rgb(206,143,44)" fg:x="54763" fg:w="80"/><text x="46.7425%" y="367.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (166 samples, 0.14%)</title><rect x="46.4899%" y="373" width="0.1409%" height="15" fill="rgb(236,136,36)" fg:x="54760" fg:w="166"/><text x="46.7399%" y="383.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (83 samples, 0.07%)</title><rect x="46.5604%" y="357" width="0.0705%" height="15" fill="rgb(249,172,42)" fg:x="54843" fg:w="83"/><text x="46.8104%" y="367.50"></text></g><g><title>[libc-2.31.so] (82 samples, 0.07%)</title><rect x="46.5612%" y="341" width="0.0696%" height="15" fill="rgb(216,139,23)" fg:x="54844" fg:w="82"/><text x="46.8112%" y="351.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (64 samples, 0.05%)</title><rect x="46.6334%" y="341" width="0.0543%" height="15" fill="rgb(207,166,20)" fg:x="54929" fg:w="64"/><text x="46.8834%" y="351.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (63 samples, 0.05%)</title><rect x="46.6342%" y="325" width="0.0535%" height="15" fill="rgb(210,209,22)" fg:x="54930" fg:w="63"/><text x="46.8842%" y="335.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (63 samples, 0.05%)</title><rect x="46.6342%" y="309" width="0.0535%" height="15" fill="rgb(232,118,20)" fg:x="54930" fg:w="63"/><text x="46.8842%" y="319.50"></text></g><g><title>[libc-2.31.so] (60 samples, 0.05%)</title><rect x="46.6368%" y="293" width="0.0509%" height="15" fill="rgb(238,113,42)" fg:x="54933" fg:w="60"/><text x="46.8868%" y="303.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (147 samples, 0.12%)</title><rect x="46.6308%" y="373" width="0.1248%" height="15" fill="rgb(231,42,5)" fg:x="54926" fg:w="147"/><text x="46.8808%" y="383.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (147 samples, 0.12%)</title><rect x="46.6308%" y="357" width="0.1248%" height="15" fill="rgb(243,166,24)" fg:x="54926" fg:w="147"/><text x="46.8808%" y="367.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (73 samples, 0.06%)</title><rect x="46.6937%" y="341" width="0.0620%" height="15" fill="rgb(237,226,12)" fg:x="55000" fg:w="73"/><text x="46.9437%" y="351.50"></text></g><g><title>[libc-2.31.so] (73 samples, 0.06%)</title><rect x="46.6937%" y="325" width="0.0620%" height="15" fill="rgb(229,133,24)" fg:x="55000" fg:w="73"/><text x="46.9437%" y="335.50"></text></g><g><title>[libc-2.31.so] (114 samples, 0.10%)</title><rect x="46.7556%" y="373" width="0.0968%" height="15" fill="rgb(238,33,43)" fg:x="55073" fg:w="114"/><text x="47.0056%" y="383.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (46 samples, 0.04%)</title><rect x="46.8524%" y="373" width="0.0391%" height="15" fill="rgb(227,59,38)" fg:x="55187" fg:w="46"/><text x="47.1024%" y="383.50"></text></g><g><title>[libc-2.31.so] (37 samples, 0.03%)</title><rect x="46.8601%" y="357" width="0.0314%" height="15" fill="rgb(230,97,0)" fg:x="55196" fg:w="37"/><text x="47.1101%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (47 samples, 0.04%)</title><rect x="46.8915%" y="373" width="0.0399%" height="15" fill="rgb(250,173,50)" fg:x="55233" fg:w="47"/><text x="47.1415%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (47 samples, 0.04%)</title><rect x="46.8915%" y="357" width="0.0399%" height="15" fill="rgb(240,15,50)" fg:x="55233" fg:w="47"/><text x="47.1415%" y="367.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (47 samples, 0.04%)</title><rect x="46.8915%" y="341" width="0.0399%" height="15" fill="rgb(221,93,22)" fg:x="55233" fg:w="47"/><text x="47.1415%" y="351.50"></text></g><g><title>sn_rust_dealloc (46 samples, 0.04%)</title><rect x="46.8923%" y="325" width="0.0391%" height="15" fill="rgb(245,180,53)" fg:x="55234" fg:w="46"/><text x="47.1423%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (619 samples, 0.53%)</title><rect x="46.4186%" y="1077" width="0.5255%" height="15" fill="rgb(231,88,51)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="1087.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (619 samples, 0.53%)</title><rect x="46.4186%" y="1061" width="0.5255%" height="15" fill="rgb(240,58,21)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="1071.50"></text></g><g><title>std::panic::catch_unwind (619 samples, 0.53%)</title><rect x="46.4186%" y="1045" width="0.5255%" height="15" fill="rgb(237,21,10)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="1055.50"></text></g><g><title>std::panicking::try (619 samples, 0.53%)</title><rect x="46.4186%" y="1029" width="0.5255%" height="15" fill="rgb(218,43,11)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="1039.50"></text></g><g><title>std::panicking::try::do_call (619 samples, 0.53%)</title><rect x="46.4186%" y="1013" width="0.5255%" height="15" fill="rgb(218,221,29)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="1023.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (619 samples, 0.53%)</title><rect x="46.4186%" y="997" width="0.5255%" height="15" fill="rgb(214,118,42)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="1007.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (619 samples, 0.53%)</title><rect x="46.4186%" y="981" width="0.5255%" height="15" fill="rgb(251,200,26)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="991.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (619 samples, 0.53%)</title><rect x="46.4186%" y="965" width="0.5255%" height="15" fill="rgb(237,101,39)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="975.50"></text></g><g><title>core::ops::function::FnOnce::call_once (619 samples, 0.53%)</title><rect x="46.4186%" y="949" width="0.5255%" height="15" fill="rgb(251,117,11)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="959.50"></text></g><g><title>async_global_executor::threading::thread_main_loop (619 samples, 0.53%)</title><rect x="46.4186%" y="933" width="0.5255%" height="15" fill="rgb(216,223,23)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="943.50"></text></g><g><title>std::panic::catch_unwind (619 samples, 0.53%)</title><rect x="46.4186%" y="917" width="0.5255%" height="15" fill="rgb(251,54,12)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="927.50"></text></g><g><title>std::panicking::try (619 samples, 0.53%)</title><rect x="46.4186%" y="901" width="0.5255%" height="15" fill="rgb(254,176,54)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="911.50"></text></g><g><title>std::panicking::try::do_call (619 samples, 0.53%)</title><rect x="46.4186%" y="885" width="0.5255%" height="15" fill="rgb(210,32,8)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="895.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (619 samples, 0.53%)</title><rect x="46.4186%" y="869" width="0.5255%" height="15" fill="rgb(235,52,38)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="879.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (619 samples, 0.53%)</title><rect x="46.4186%" y="853" width="0.5255%" height="15" fill="rgb(231,4,44)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="863.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (619 samples, 0.53%)</title><rect x="46.4186%" y="837" width="0.5255%" height="15" fill="rgb(249,2,32)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="847.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (619 samples, 0.53%)</title><rect x="46.4186%" y="821" width="0.5255%" height="15" fill="rgb(224,65,26)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="831.50"></text></g><g><title>async_global_executor::reactor::block_on (619 samples, 0.53%)</title><rect x="46.4186%" y="805" width="0.5255%" height="15" fill="rgb(250,73,40)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="815.50"></text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (619 samples, 0.53%)</title><rect x="46.4186%" y="789" width="0.5255%" height="15" fill="rgb(253,177,16)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="799.50"></text></g><g><title>async_io::driver::block_on (619 samples, 0.53%)</title><rect x="46.4186%" y="773" width="0.5255%" height="15" fill="rgb(217,32,34)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="783.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (619 samples, 0.53%)</title><rect x="46.4186%" y="757" width="0.5255%" height="15" fill="rgb(212,7,10)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="767.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (619 samples, 0.53%)</title><rect x="46.4186%" y="741" width="0.5255%" height="15" fill="rgb(245,89,8)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="751.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (619 samples, 0.53%)</title><rect x="46.4186%" y="725" width="0.5255%" height="15" fill="rgb(237,16,53)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="735.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (619 samples, 0.53%)</title><rect x="46.4186%" y="709" width="0.5255%" height="15" fill="rgb(250,204,30)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="719.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (619 samples, 0.53%)</title><rect x="46.4186%" y="693" width="0.5255%" height="15" fill="rgb(208,77,27)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="703.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (619 samples, 0.53%)</title><rect x="46.4186%" y="677" width="0.5255%" height="15" fill="rgb(250,204,28)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="687.50"></text></g><g><title>async_task::runnable::Runnable::run (619 samples, 0.53%)</title><rect x="46.4186%" y="661" width="0.5255%" height="15" fill="rgb(244,63,21)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="671.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (619 samples, 0.53%)</title><rect x="46.4186%" y="645" width="0.5255%" height="15" fill="rgb(236,85,44)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="655.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (619 samples, 0.53%)</title><rect x="46.4186%" y="629" width="0.5255%" height="15" fill="rgb(215,98,4)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="639.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (619 samples, 0.53%)</title><rect x="46.4186%" y="613" width="0.5255%" height="15" fill="rgb(235,38,11)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="623.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (619 samples, 0.53%)</title><rect x="46.4186%" y="597" width="0.5255%" height="15" fill="rgb(254,186,25)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="607.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (619 samples, 0.53%)</title><rect x="46.4186%" y="581" width="0.5255%" height="15" fill="rgb(225,55,31)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="591.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (619 samples, 0.53%)</title><rect x="46.4186%" y="565" width="0.5255%" height="15" fill="rgb(211,15,21)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="575.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (619 samples, 0.53%)</title><rect x="46.4186%" y="549" width="0.5255%" height="15" fill="rgb(215,187,41)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="559.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (619 samples, 0.53%)</title><rect x="46.4186%" y="533" width="0.5255%" height="15" fill="rgb(248,69,32)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="543.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (619 samples, 0.53%)</title><rect x="46.4186%" y="517" width="0.5255%" height="15" fill="rgb(252,102,52)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="527.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (619 samples, 0.53%)</title><rect x="46.4186%" y="501" width="0.5255%" height="15" fill="rgb(253,140,32)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="511.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (619 samples, 0.53%)</title><rect x="46.4186%" y="485" width="0.5255%" height="15" fill="rgb(216,56,42)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="495.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (619 samples, 0.53%)</title><rect x="46.4186%" y="469" width="0.5255%" height="15" fill="rgb(216,184,14)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="479.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (619 samples, 0.53%)</title><rect x="46.4186%" y="453" width="0.5255%" height="15" fill="rgb(237,187,27)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="463.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (619 samples, 0.53%)</title><rect x="46.4186%" y="437" width="0.5255%" height="15" fill="rgb(219,65,3)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="447.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (619 samples, 0.53%)</title><rect x="46.4186%" y="421" width="0.5255%" height="15" fill="rgb(245,83,25)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="431.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (619 samples, 0.53%)</title><rect x="46.4186%" y="405" width="0.5255%" height="15" fill="rgb(214,205,45)" fg:x="54676" fg:w="619"/><text x="46.6686%" y="415.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (613 samples, 0.52%)</title><rect x="46.4237%" y="389" width="0.5204%" height="15" fill="rgb(241,20,18)" fg:x="54682" fg:w="613"/><text x="46.6737%" y="399.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_TO&lt;_ErasedPtr&gt;::pull_data (15 samples, 0.01%)</title><rect x="46.9314%" y="373" width="0.0127%" height="15" fill="rgb(232,163,23)" fg:x="55280" fg:w="15"/><text x="47.1814%" y="383.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::_::&lt;impl tremor_runtime::connectors::source::RawSource_trait::VTableInner_Ref&lt;_Self,_ErasedPtr&gt;&gt;::pull_data (13 samples, 0.01%)</title><rect x="46.9331%" y="357" width="0.0110%" height="15" fill="rgb(214,5,46)" fg:x="55282" fg:w="13"/><text x="47.1831%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (83 samples, 0.07%)</title><rect x="46.9441%" y="1077" width="0.0705%" height="15" fill="rgb(229,78,17)" fg:x="55295" fg:w="83"/><text x="47.1941%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (20 samples, 0.02%)</title><rect x="46.9976%" y="1061" width="0.0170%" height="15" fill="rgb(248,89,10)" fg:x="55358" fg:w="20"/><text x="47.2476%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tremor_value::value::Value]&gt; (13 samples, 0.01%)</title><rect x="47.0146%" y="1077" width="0.0110%" height="15" fill="rgb(248,54,15)" fg:x="55378" fg:w="13"/><text x="47.2646%" y="1087.50"></text></g><g><title>core::str::converts::from_utf8 (109 samples, 0.09%)</title><rect x="47.0519%" y="1077" width="0.0925%" height="15" fill="rgb(223,116,6)" fg:x="55422" fg:w="109"/><text x="47.3019%" y="1087.50"></text></g><g><title>event_listener::Event::notify (27 samples, 0.02%)</title><rect x="47.1462%" y="1077" width="0.0229%" height="15" fill="rgb(205,125,38)" fg:x="55533" fg:w="27"/><text x="47.3962%" y="1087.50"></text></g><g><title>event_listener::full_fence (13 samples, 0.01%)</title><rect x="47.1581%" y="1061" width="0.0110%" height="15" fill="rgb(251,78,38)" fg:x="55547" fg:w="13"/><text x="47.4081%" y="1071.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (12 samples, 0.01%)</title><rect x="47.1750%" y="1077" width="0.0102%" height="15" fill="rgb(253,78,28)" fg:x="55567" fg:w="12"/><text x="47.4250%" y="1087.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (109 samples, 0.09%)</title><rect x="47.1852%" y="1077" width="0.0925%" height="15" fill="rgb(209,120,3)" fg:x="55579" fg:w="109"/><text x="47.4352%" y="1087.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (123 samples, 0.10%)</title><rect x="47.2778%" y="1077" width="0.1044%" height="15" fill="rgb(238,229,9)" fg:x="55688" fg:w="123"/><text x="47.5278%" y="1087.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert_hashed_nocheck (17 samples, 0.01%)</title><rect x="47.3822%" y="1077" width="0.0144%" height="15" fill="rgb(253,159,18)" fg:x="55811" fg:w="17"/><text x="47.6322%" y="1087.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (36 samples, 0.03%)</title><rect x="47.3966%" y="1077" width="0.0306%" height="15" fill="rgb(244,42,34)" fg:x="55828" fg:w="36"/><text x="47.6466%" y="1087.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (280 samples, 0.24%)</title><rect x="47.4272%" y="1077" width="0.2377%" height="15" fill="rgb(224,8,7)" fg:x="55864" fg:w="280"/><text x="47.6772%" y="1087.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::get_mut (42 samples, 0.04%)</title><rect x="47.6649%" y="1077" width="0.0357%" height="15" fill="rgb(210,201,45)" fg:x="56144" fg:w="42"/><text x="47.9149%" y="1087.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (12 samples, 0.01%)</title><rect x="47.6904%" y="1061" width="0.0102%" height="15" fill="rgb(252,185,21)" fg:x="56174" fg:w="12"/><text x="47.9404%" y="1071.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (12 samples, 0.01%)</title><rect x="47.6904%" y="1045" width="0.0102%" height="15" fill="rgb(223,131,1)" fg:x="56174" fg:w="12"/><text x="47.9404%" y="1055.50"></text></g><g><title>parking::Inner::park (15 samples, 0.01%)</title><rect x="47.7005%" y="1077" width="0.0127%" height="15" fill="rgb(245,141,16)" fg:x="56186" fg:w="15"/><text x="47.9505%" y="1087.50"></text></g><g><title>polling::epoll::Poller::wait (25 samples, 0.02%)</title><rect x="47.7235%" y="1077" width="0.0212%" height="15" fill="rgb(229,55,45)" fg:x="56213" fg:w="25"/><text x="47.9735%" y="1087.50"></text></g><g><title>rmp::encode::uint::write_uint (34 samples, 0.03%)</title><rect x="47.7447%" y="1077" width="0.0289%" height="15" fill="rgb(208,92,15)" fg:x="56238" fg:w="34"/><text x="47.9947%" y="1087.50"></text></g><g><title>sn_rust_alloc (107 samples, 0.09%)</title><rect x="47.7804%" y="1077" width="0.0908%" height="15" fill="rgb(234,185,47)" fg:x="56280" fg:w="107"/><text x="48.0304%" y="1087.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (45 samples, 0.04%)</title><rect x="47.8330%" y="1061" width="0.0382%" height="15" fill="rgb(253,104,50)" fg:x="56342" fg:w="45"/><text x="48.0830%" y="1071.50"></text></g><g><title>sn_rust_dealloc (26 samples, 0.02%)</title><rect x="47.8712%" y="1077" width="0.0221%" height="15" fill="rgb(205,70,7)" fg:x="56387" fg:w="26"/><text x="48.1212%" y="1087.50"></text></g><g><title>sn_rust_realloc (13 samples, 0.01%)</title><rect x="47.8933%" y="1077" width="0.0110%" height="15" fill="rgb(240,178,43)" fg:x="56413" fg:w="13"/><text x="48.1433%" y="1087.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (24 samples, 0.02%)</title><rect x="47.9238%" y="1077" width="0.0204%" height="15" fill="rgb(214,112,2)" fg:x="56449" fg:w="24"/><text x="48.1738%" y="1087.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (57 samples, 0.05%)</title><rect x="47.9765%" y="645" width="0.0484%" height="15" fill="rgb(206,46,17)" fg:x="56511" fg:w="57"/><text x="48.2265%" y="655.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (83 samples, 0.07%)</title><rect x="47.9569%" y="805" width="0.0705%" height="15" fill="rgb(225,220,16)" fg:x="56488" fg:w="83"/><text x="48.2069%" y="815.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (83 samples, 0.07%)</title><rect x="47.9569%" y="789" width="0.0705%" height="15" fill="rgb(238,65,40)" fg:x="56488" fg:w="83"/><text x="48.2069%" y="799.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (80 samples, 0.07%)</title><rect x="47.9595%" y="773" width="0.0679%" height="15" fill="rgb(230,151,21)" fg:x="56491" fg:w="80"/><text x="48.2095%" y="783.50"></text></g><g><title>alloc::alloc::exchange_malloc (78 samples, 0.07%)</title><rect x="47.9612%" y="757" width="0.0662%" height="15" fill="rgb(218,58,49)" fg:x="56493" fg:w="78"/><text x="48.2112%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (78 samples, 0.07%)</title><rect x="47.9612%" y="741" width="0.0662%" height="15" fill="rgb(219,179,14)" fg:x="56493" fg:w="78"/><text x="48.2112%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (78 samples, 0.07%)</title><rect x="47.9612%" y="725" width="0.0662%" height="15" fill="rgb(223,72,1)" fg:x="56493" fg:w="78"/><text x="48.2112%" y="735.50"></text></g><g><title>alloc::alloc::alloc (74 samples, 0.06%)</title><rect x="47.9646%" y="709" width="0.0628%" height="15" fill="rgb(238,126,10)" fg:x="56497" fg:w="74"/><text x="48.2146%" y="719.50"></text></g><g><title>__rg_alloc (74 samples, 0.06%)</title><rect x="47.9646%" y="693" width="0.0628%" height="15" fill="rgb(224,206,38)" fg:x="56497" fg:w="74"/><text x="48.2146%" y="703.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (74 samples, 0.06%)</title><rect x="47.9646%" y="677" width="0.0628%" height="15" fill="rgb(212,201,54)" fg:x="56497" fg:w="74"/><text x="48.2146%" y="687.50"></text></g><g><title>sn_rust_alloc (74 samples, 0.06%)</title><rect x="47.9646%" y="661" width="0.0628%" height="15" fill="rgb(218,154,48)" fg:x="56497" fg:w="74"/><text x="48.2146%" y="671.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::default::Default&gt;::default (93 samples, 0.08%)</title><rect x="47.9493%" y="869" width="0.0790%" height="15" fill="rgb(232,93,24)" fg:x="56479" fg:w="93"/><text x="48.1993%" y="879.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (93 samples, 0.08%)</title><rect x="47.9493%" y="853" width="0.0790%" height="15" fill="rgb(245,30,21)" fg:x="56479" fg:w="93"/><text x="48.1993%" y="863.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (93 samples, 0.08%)</title><rect x="47.9493%" y="837" width="0.0790%" height="15" fill="rgb(242,148,29)" fg:x="56479" fg:w="93"/><text x="48.1993%" y="847.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (93 samples, 0.08%)</title><rect x="47.9493%" y="821" width="0.0790%" height="15" fill="rgb(244,153,54)" fg:x="56479" fg:w="93"/><text x="48.1993%" y="831.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (226 samples, 0.19%)</title><rect x="48.2889%" y="581" width="0.1919%" height="15" fill="rgb(252,87,22)" fg:x="56879" fg:w="226"/><text x="48.5389%" y="591.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (484 samples, 0.41%)</title><rect x="48.0716%" y="741" width="0.4109%" height="15" fill="rgb(210,51,29)" fg:x="56623" fg:w="484"/><text x="48.3216%" y="751.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (484 samples, 0.41%)</title><rect x="48.0716%" y="725" width="0.4109%" height="15" fill="rgb(242,136,47)" fg:x="56623" fg:w="484"/><text x="48.3216%" y="735.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (277 samples, 0.24%)</title><rect x="48.2473%" y="709" width="0.2352%" height="15" fill="rgb(238,68,4)" fg:x="56830" fg:w="277"/><text x="48.4973%" y="719.50"></text></g><g><title>alloc::alloc::exchange_malloc (259 samples, 0.22%)</title><rect x="48.2626%" y="693" width="0.2199%" height="15" fill="rgb(242,161,30)" fg:x="56848" fg:w="259"/><text x="48.5126%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (259 samples, 0.22%)</title><rect x="48.2626%" y="677" width="0.2199%" height="15" fill="rgb(218,58,44)" fg:x="56848" fg:w="259"/><text x="48.5126%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (259 samples, 0.22%)</title><rect x="48.2626%" y="661" width="0.2199%" height="15" fill="rgb(252,125,32)" fg:x="56848" fg:w="259"/><text x="48.5126%" y="671.50"></text></g><g><title>alloc::alloc::alloc (259 samples, 0.22%)</title><rect x="48.2626%" y="645" width="0.2199%" height="15" fill="rgb(219,178,0)" fg:x="56848" fg:w="259"/><text x="48.5126%" y="655.50"></text></g><g><title>__rg_alloc (259 samples, 0.22%)</title><rect x="48.2626%" y="629" width="0.2199%" height="15" fill="rgb(213,152,7)" fg:x="56848" fg:w="259"/><text x="48.5126%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (259 samples, 0.22%)</title><rect x="48.2626%" y="613" width="0.2199%" height="15" fill="rgb(249,109,34)" fg:x="56848" fg:w="259"/><text x="48.5126%" y="623.50"></text></g><g><title>sn_rust_alloc (254 samples, 0.22%)</title><rect x="48.2668%" y="597" width="0.2156%" height="15" fill="rgb(232,96,21)" fg:x="56853" fg:w="254"/><text x="48.5168%" y="607.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (503 samples, 0.43%)</title><rect x="48.0656%" y="789" width="0.4270%" height="15" fill="rgb(228,27,39)" fg:x="56616" fg:w="503"/><text x="48.3156%" y="799.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (503 samples, 0.43%)</title><rect x="48.0656%" y="773" width="0.4270%" height="15" fill="rgb(211,182,52)" fg:x="56616" fg:w="503"/><text x="48.3156%" y="783.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (503 samples, 0.43%)</title><rect x="48.0656%" y="757" width="0.4270%" height="15" fill="rgb(234,178,38)" fg:x="56616" fg:w="503"/><text x="48.3156%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (12 samples, 0.01%)</title><rect x="48.4825%" y="741" width="0.0102%" height="15" fill="rgb(221,111,3)" fg:x="57107" fg:w="12"/><text x="48.7325%" y="751.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (12 samples, 0.01%)</title><rect x="48.4825%" y="725" width="0.0102%" height="15" fill="rgb(228,175,21)" fg:x="57107" fg:w="12"/><text x="48.7325%" y="735.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (12 samples, 0.01%)</title><rect x="48.4825%" y="709" width="0.0102%" height="15" fill="rgb(228,174,43)" fg:x="57107" fg:w="12"/><text x="48.7325%" y="719.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (12 samples, 0.01%)</title><rect x="48.4825%" y="693" width="0.0102%" height="15" fill="rgb(211,191,0)" fg:x="57107" fg:w="12"/><text x="48.7325%" y="703.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (12 samples, 0.01%)</title><rect x="48.4825%" y="677" width="0.0102%" height="15" fill="rgb(253,117,3)" fg:x="57107" fg:w="12"/><text x="48.7325%" y="687.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (524 samples, 0.44%)</title><rect x="48.0656%" y="805" width="0.4449%" height="15" fill="rgb(241,127,19)" fg:x="56616" fg:w="524"/><text x="48.3156%" y="815.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (21 samples, 0.02%)</title><rect x="48.4926%" y="789" width="0.0178%" height="15" fill="rgb(218,103,12)" fg:x="57119" fg:w="21"/><text x="48.7426%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (18 samples, 0.02%)</title><rect x="48.4952%" y="773" width="0.0153%" height="15" fill="rgb(236,214,43)" fg:x="57122" fg:w="18"/><text x="48.7452%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (14 samples, 0.01%)</title><rect x="48.4986%" y="757" width="0.0119%" height="15" fill="rgb(244,144,19)" fg:x="57126" fg:w="14"/><text x="48.7486%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (13 samples, 0.01%)</title><rect x="48.4994%" y="741" width="0.0110%" height="15" fill="rgb(246,188,10)" fg:x="57127" fg:w="13"/><text x="48.7494%" y="751.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (13 samples, 0.01%)</title><rect x="48.4994%" y="725" width="0.0110%" height="15" fill="rgb(212,193,33)" fg:x="57127" fg:w="13"/><text x="48.7494%" y="735.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (13 samples, 0.01%)</title><rect x="48.4994%" y="709" width="0.0110%" height="15" fill="rgb(241,51,29)" fg:x="57127" fg:w="13"/><text x="48.7494%" y="719.50"></text></g><g><title>&lt;tremor_pipeline::event::Event as core::default::Default&gt;::default (855 samples, 0.73%)</title><rect x="47.9493%" y="885" width="0.7259%" height="15" fill="rgb(211,58,19)" fg:x="56479" fg:w="855"/><text x="48.1993%" y="895.50"></text></g><g><title>&lt;tremor_script::srs::EventPayload as core::default::Default&gt;::default (762 samples, 0.65%)</title><rect x="48.0283%" y="869" width="0.6469%" height="15" fill="rgb(229,111,26)" fg:x="56572" fg:w="762"/><text x="48.2783%" y="879.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (762 samples, 0.65%)</title><rect x="48.0283%" y="853" width="0.6469%" height="15" fill="rgb(213,115,40)" fg:x="56572" fg:w="762"/><text x="48.2783%" y="863.50"></text></g><g><title>value_trait::Builder::object (718 samples, 0.61%)</title><rect x="48.0656%" y="837" width="0.6096%" height="15" fill="rgb(209,56,44)" fg:x="56616" fg:w="718"/><text x="48.3156%" y="847.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (718 samples, 0.61%)</title><rect x="48.0656%" y="821" width="0.6096%" height="15" fill="rgb(230,108,32)" fg:x="56616" fg:w="718"/><text x="48.3156%" y="831.50"></text></g><g><title>tremor_value::value::Value::Object (194 samples, 0.16%)</title><rect x="48.5105%" y="805" width="0.1647%" height="15" fill="rgb(216,165,31)" fg:x="57140" fg:w="194"/><text x="48.7605%" y="815.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (12 samples, 0.01%)</title><rect x="48.7185%" y="789" width="0.0102%" height="15" fill="rgb(218,122,21)" fg:x="57385" fg:w="12"/><text x="48.9685%" y="799.50"></text></g><g><title>sn_rust_dealloc (53 samples, 0.04%)</title><rect x="48.7287%" y="789" width="0.0450%" height="15" fill="rgb(223,224,47)" fg:x="57397" fg:w="53"/><text x="48.9787%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (103 samples, 0.09%)</title><rect x="48.6871%" y="869" width="0.0874%" height="15" fill="rgb(238,102,44)" fg:x="57348" fg:w="103"/><text x="48.9371%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (103 samples, 0.09%)</title><rect x="48.6871%" y="853" width="0.0874%" height="15" fill="rgb(236,46,40)" fg:x="57348" fg:w="103"/><text x="48.9371%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (76 samples, 0.06%)</title><rect x="48.7100%" y="837" width="0.0645%" height="15" fill="rgb(247,202,50)" fg:x="57375" fg:w="76"/><text x="48.9600%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (76 samples, 0.06%)</title><rect x="48.7100%" y="821" width="0.0645%" height="15" fill="rgb(209,99,20)" fg:x="57375" fg:w="76"/><text x="48.9600%" y="831.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (76 samples, 0.06%)</title><rect x="48.7100%" y="805" width="0.0645%" height="15" fill="rgb(252,27,34)" fg:x="57375" fg:w="76"/><text x="48.9600%" y="815.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (973 samples, 0.83%)</title><rect x="47.9493%" y="901" width="0.8261%" height="15" fill="rgb(215,206,23)" fg:x="56479" fg:w="973"/><text x="48.1993%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (118 samples, 0.10%)</title><rect x="48.6752%" y="885" width="0.1002%" height="15" fill="rgb(212,135,36)" fg:x="57334" fg:w="118"/><text x="48.9252%" y="895.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (15 samples, 0.01%)</title><rect x="48.7754%" y="901" width="0.0127%" height="15" fill="rgb(240,189,1)" fg:x="57452" fg:w="15"/><text x="49.0254%" y="911.50"></text></g><g><title>alloc::alloc::exchange_malloc (15 samples, 0.01%)</title><rect x="48.7754%" y="885" width="0.0127%" height="15" fill="rgb(242,56,20)" fg:x="57452" fg:w="15"/><text x="49.0254%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (15 samples, 0.01%)</title><rect x="48.7754%" y="869" width="0.0127%" height="15" fill="rgb(247,132,33)" fg:x="57452" fg:w="15"/><text x="49.0254%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (15 samples, 0.01%)</title><rect x="48.7754%" y="853" width="0.0127%" height="15" fill="rgb(208,149,11)" fg:x="57452" fg:w="15"/><text x="49.0254%" y="863.50"></text></g><g><title>alloc::alloc::alloc (15 samples, 0.01%)</title><rect x="48.7754%" y="837" width="0.0127%" height="15" fill="rgb(211,33,11)" fg:x="57452" fg:w="15"/><text x="49.0254%" y="847.50"></text></g><g><title>__rg_alloc (15 samples, 0.01%)</title><rect x="48.7754%" y="821" width="0.0127%" height="15" fill="rgb(221,29,38)" fg:x="57452" fg:w="15"/><text x="49.0254%" y="831.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (15 samples, 0.01%)</title><rect x="48.7754%" y="805" width="0.0127%" height="15" fill="rgb(206,182,49)" fg:x="57452" fg:w="15"/><text x="49.0254%" y="815.50"></text></g><g><title>sn_rust_alloc (15 samples, 0.01%)</title><rect x="48.7754%" y="789" width="0.0127%" height="15" fill="rgb(216,140,1)" fg:x="57452" fg:w="15"/><text x="49.0254%" y="799.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (15 samples, 0.01%)</title><rect x="48.7754%" y="773" width="0.0127%" height="15" fill="rgb(232,57,40)" fg:x="57452" fg:w="15"/><text x="49.0254%" y="783.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (41 samples, 0.03%)</title><rect x="48.8815%" y="885" width="0.0348%" height="15" fill="rgb(224,186,18)" fg:x="57577" fg:w="41"/><text x="49.1315%" y="895.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (24 samples, 0.02%)</title><rect x="48.9333%" y="741" width="0.0204%" height="15" fill="rgb(215,121,11)" fg:x="57638" fg:w="24"/><text x="49.1833%" y="751.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::new (46 samples, 0.04%)</title><rect x="48.9163%" y="885" width="0.0391%" height="15" fill="rgb(245,147,10)" fg:x="57618" fg:w="46"/><text x="49.1663%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (46 samples, 0.04%)</title><rect x="48.9163%" y="869" width="0.0391%" height="15" fill="rgb(238,153,13)" fg:x="57618" fg:w="46"/><text x="49.1663%" y="879.50"></text></g><g><title>alloc::alloc::exchange_malloc (39 samples, 0.03%)</title><rect x="48.9222%" y="853" width="0.0331%" height="15" fill="rgb(233,108,0)" fg:x="57625" fg:w="39"/><text x="49.1722%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (39 samples, 0.03%)</title><rect x="48.9222%" y="837" width="0.0331%" height="15" fill="rgb(212,157,17)" fg:x="57625" fg:w="39"/><text x="49.1722%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (39 samples, 0.03%)</title><rect x="48.9222%" y="821" width="0.0331%" height="15" fill="rgb(225,213,38)" fg:x="57625" fg:w="39"/><text x="49.1722%" y="831.50"></text></g><g><title>alloc::alloc::alloc (39 samples, 0.03%)</title><rect x="48.9222%" y="805" width="0.0331%" height="15" fill="rgb(248,16,11)" fg:x="57625" fg:w="39"/><text x="49.1722%" y="815.50"></text></g><g><title>__rg_alloc (39 samples, 0.03%)</title><rect x="48.9222%" y="789" width="0.0331%" height="15" fill="rgb(241,33,4)" fg:x="57625" fg:w="39"/><text x="49.1722%" y="799.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (39 samples, 0.03%)</title><rect x="48.9222%" y="773" width="0.0331%" height="15" fill="rgb(222,26,43)" fg:x="57625" fg:w="39"/><text x="49.1722%" y="783.50"></text></g><g><title>sn_rust_alloc (35 samples, 0.03%)</title><rect x="48.9256%" y="757" width="0.0297%" height="15" fill="rgb(243,29,36)" fg:x="57629" fg:w="35"/><text x="49.1756%" y="767.50"></text></g><g><title>alloc::alloc::exchange_malloc (28 samples, 0.02%)</title><rect x="48.9553%" y="885" width="0.0238%" height="15" fill="rgb(241,9,27)" fg:x="57664" fg:w="28"/><text x="49.2053%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (28 samples, 0.02%)</title><rect x="48.9553%" y="869" width="0.0238%" height="15" fill="rgb(205,117,26)" fg:x="57664" fg:w="28"/><text x="49.2053%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (28 samples, 0.02%)</title><rect x="48.9553%" y="853" width="0.0238%" height="15" fill="rgb(209,80,39)" fg:x="57664" fg:w="28"/><text x="49.2053%" y="863.50"></text></g><g><title>alloc::alloc::alloc (24 samples, 0.02%)</title><rect x="48.9587%" y="837" width="0.0204%" height="15" fill="rgb(239,155,6)" fg:x="57668" fg:w="24"/><text x="49.2087%" y="847.50"></text></g><g><title>__rg_alloc (24 samples, 0.02%)</title><rect x="48.9587%" y="821" width="0.0204%" height="15" fill="rgb(212,104,12)" fg:x="57668" fg:w="24"/><text x="49.2087%" y="831.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (24 samples, 0.02%)</title><rect x="48.9587%" y="805" width="0.0204%" height="15" fill="rgb(234,204,3)" fg:x="57668" fg:w="24"/><text x="49.2087%" y="815.50"></text></g><g><title>sn_rust_alloc (16 samples, 0.01%)</title><rect x="48.9655%" y="789" width="0.0136%" height="15" fill="rgb(251,218,7)" fg:x="57676" fg:w="16"/><text x="49.2155%" y="799.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (74 samples, 0.06%)</title><rect x="49.0895%" y="853" width="0.0628%" height="15" fill="rgb(221,81,32)" fg:x="57822" fg:w="74"/><text x="49.3395%" y="863.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (49 samples, 0.04%)</title><rect x="49.1523%" y="853" width="0.0416%" height="15" fill="rgb(214,152,26)" fg:x="57896" fg:w="49"/><text x="49.4023%" y="863.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::read_str_data (1,615 samples, 1.37%)</title><rect x="49.5021%" y="661" width="1.3711%" height="15" fill="rgb(223,22,3)" fg:x="58308" fg:w="1615"/><text x="49.7521%" y="671.50"></text></g><g><title>rmp_serde::decode::read_bin_data (104 samples, 0.09%)</title><rect x="50.7849%" y="645" width="0.0883%" height="15" fill="rgb(207,174,7)" fg:x="59819" fg:w="104"/><text x="51.0349%" y="655.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as rmp_serde::decode::ReadSlice&gt;::read_slice (104 samples, 0.09%)</title><rect x="50.7849%" y="629" width="0.0883%" height="15" fill="rgb(224,19,52)" fg:x="59819" fg:w="104"/><text x="51.0349%" y="639.50"></text></g><g><title>rmp::decode::RmpRead::read_u8 (84 samples, 0.07%)</title><rect x="50.8732%" y="597" width="0.0713%" height="15" fill="rgb(228,24,14)" fg:x="59923" fg:w="84"/><text x="51.1232%" y="607.50"></text></g><g><title>&lt;T as rmp::decode::RmpRead&gt;::read_exact_buf (84 samples, 0.07%)</title><rect x="50.8732%" y="581" width="0.0713%" height="15" fill="rgb(230,153,43)" fg:x="59923" fg:w="84"/><text x="51.1232%" y="591.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as std::io::Read&gt;::read_exact (84 samples, 0.07%)</title><rect x="50.8732%" y="565" width="0.0713%" height="15" fill="rgb(231,106,12)" fg:x="59923" fg:w="84"/><text x="51.1232%" y="575.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_exact (84 samples, 0.07%)</title><rect x="50.8732%" y="549" width="0.0713%" height="15" fill="rgb(215,92,2)" fg:x="59923" fg:w="84"/><text x="51.1232%" y="559.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (203 samples, 0.17%)</title><rect x="50.8732%" y="645" width="0.1723%" height="15" fill="rgb(249,143,25)" fg:x="59923" fg:w="203"/><text x="51.1232%" y="655.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker::{{closure}} (203 samples, 0.17%)</title><rect x="50.8732%" y="629" width="0.1723%" height="15" fill="rgb(252,7,35)" fg:x="59923" fg:w="203"/><text x="51.1232%" y="639.50"></text></g><g><title>rmp::decode::read_marker (203 samples, 0.17%)</title><rect x="50.8732%" y="613" width="0.1723%" height="15" fill="rgb(216,69,40)" fg:x="59923" fg:w="203"/><text x="51.1232%" y="623.50"></text></g><g><title>rmp::marker::Marker::from_u8 (119 samples, 0.10%)</title><rect x="50.9445%" y="597" width="0.1010%" height="15" fill="rgb(240,36,33)" fg:x="60007" fg:w="119"/><text x="51.1945%" y="607.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1,970 samples, 1.67%)</title><rect x="49.3756%" y="725" width="1.6725%" height="15" fill="rgb(231,128,14)" fg:x="58159" fg:w="1970"/><text x="49.6256%" y="735.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for &amp;str&gt;::deserialize (1,970 samples, 1.67%)</title><rect x="49.3756%" y="709" width="1.6725%" height="15" fill="rgb(245,143,14)" fg:x="58159" fg:w="1970"/><text x="49.6256%" y="719.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_str (1,970 samples, 1.67%)</title><rect x="49.3756%" y="693" width="1.6725%" height="15" fill="rgb(222,130,28)" fg:x="58159" fg:w="1970"/><text x="49.6256%" y="703.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (1,970 samples, 1.67%)</title><rect x="49.3756%" y="677" width="1.6725%" height="15" fill="rgb(212,10,48)" fg:x="58159" fg:w="1970"/><text x="49.6256%" y="687.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker (206 samples, 0.17%)</title><rect x="50.8732%" y="661" width="0.1749%" height="15" fill="rgb(254,118,45)" fg:x="59923" fg:w="206"/><text x="51.1232%" y="671.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_key (2,059 samples, 1.75%)</title><rect x="49.3705%" y="773" width="1.7480%" height="15" fill="rgb(228,6,45)" fg:x="58153" fg:w="2059"/><text x="49.6205%" y="783.50"></text></g><g><title>serde::de::MapAccess::next_key (2,059 samples, 1.75%)</title><rect x="49.3705%" y="757" width="1.7480%" height="15" fill="rgb(241,18,35)" fg:x="58153" fg:w="2059"/><text x="49.6205%" y="767.50"></text></g><g><title>&lt;rmp_serde::decode::MapAccess&lt;R,C&gt; as serde::de::MapAccess&gt;::next_key_seed (2,059 samples, 1.75%)</title><rect x="49.3705%" y="741" width="1.7480%" height="15" fill="rgb(227,214,53)" fg:x="58153" fg:w="2059"/><text x="49.6205%" y="751.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (83 samples, 0.07%)</title><rect x="51.0481%" y="725" width="0.0705%" height="15" fill="rgb(224,107,51)" fg:x="60129" fg:w="83"/><text x="51.2981%" y="735.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_value (28 samples, 0.02%)</title><rect x="51.1185%" y="773" width="0.0238%" height="15" fill="rgb(248,60,28)" fg:x="60212" fg:w="28"/><text x="51.3685%" y="783.50"></text></g><g><title>serde::de::MapAccess::next_value (28 samples, 0.02%)</title><rect x="51.1185%" y="757" width="0.0238%" height="15" fill="rgb(249,101,23)" fg:x="60212" fg:w="28"/><text x="51.3685%" y="767.50"></text></g><g><title>&lt;rmp_serde::decode::MapAccess&lt;R,C&gt; as serde::de::MapAccess&gt;::next_value_seed (28 samples, 0.02%)</title><rect x="51.1185%" y="741" width="0.0238%" height="15" fill="rgb(228,51,19)" fg:x="60212" fg:w="28"/><text x="51.3685%" y="751.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (28 samples, 0.02%)</title><rect x="51.1185%" y="725" width="0.0238%" height="15" fill="rgb(213,20,6)" fg:x="60212" fg:w="28"/><text x="51.3685%" y="735.50"></text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (28 samples, 0.02%)</title><rect x="51.1185%" y="709" width="0.0238%" height="15" fill="rgb(212,124,10)" fg:x="60212" fg:w="28"/><text x="51.3685%" y="719.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (28 samples, 0.02%)</title><rect x="51.1185%" y="693" width="0.0238%" height="15" fill="rgb(248,3,40)" fg:x="60212" fg:w="28"/><text x="51.3685%" y="703.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (473 samples, 0.40%)</title><rect x="51.1440%" y="773" width="0.4016%" height="15" fill="rgb(223,178,23)" fg:x="60242" fg:w="473"/><text x="51.3940%" y="783.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::insert (1,051 samples, 0.89%)</title><rect x="51.5456%" y="773" width="0.8923%" height="15" fill="rgb(240,132,45)" fg:x="60715" fg:w="1051"/><text x="51.7956%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (41 samples, 0.03%)</title><rect x="52.4030%" y="757" width="0.0348%" height="15" fill="rgb(245,164,36)" fg:x="61725" fg:w="41"/><text x="52.6530%" y="767.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (19 samples, 0.02%)</title><rect x="52.4378%" y="773" width="0.0161%" height="15" fill="rgb(231,188,53)" fg:x="61766" fg:w="19"/><text x="52.6878%" y="783.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (19 samples, 0.02%)</title><rect x="52.4378%" y="757" width="0.0161%" height="15" fill="rgb(237,198,39)" fg:x="61766" fg:w="19"/><text x="52.6878%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (12 samples, 0.01%)</title><rect x="52.4438%" y="741" width="0.0102%" height="15" fill="rgb(223,120,35)" fg:x="61773" fg:w="12"/><text x="52.6938%" y="751.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_map (3,810 samples, 3.23%)</title><rect x="49.2279%" y="789" width="3.2346%" height="15" fill="rgb(253,107,49)" fg:x="57985" fg:w="3810"/><text x="49.4779%" y="799.50">&lt;tr..</text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (19 samples, 0.02%)</title><rect x="52.4625%" y="773" width="0.0161%" height="15" fill="rgb(216,44,31)" fg:x="61795" fg:w="19"/><text x="52.7125%" y="783.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker::{{closure}} (18 samples, 0.02%)</title><rect x="52.4633%" y="757" width="0.0153%" height="15" fill="rgb(253,87,21)" fg:x="61796" fg:w="18"/><text x="52.7133%" y="767.50"></text></g><g><title>rmp::decode::read_marker (18 samples, 0.02%)</title><rect x="52.4633%" y="741" width="0.0153%" height="15" fill="rgb(226,18,2)" fg:x="61796" fg:w="18"/><text x="52.7133%" y="751.50"></text></g><g><title>core::ptr::read (62 samples, 0.05%)</title><rect x="52.4786%" y="741" width="0.0526%" height="15" fill="rgb(216,8,46)" fg:x="61814" fg:w="62"/><text x="52.7286%" y="751.50"></text></g><g><title>&lt;tremor_runtime::codec::msgpack::MsgPack as tremor_runtime::codec::Codec&gt;::decode (4,059 samples, 3.45%)</title><rect x="49.0861%" y="869" width="3.4460%" height="15" fill="rgb(226,140,39)" fg:x="57818" fg:w="4059"/><text x="49.3361%" y="879.50">&lt;tr..</text></g><g><title>rmp_serde::decode::from_slice (3,932 samples, 3.34%)</title><rect x="49.1939%" y="853" width="3.3382%" height="15" fill="rgb(221,194,54)" fg:x="57945" fg:w="3932"/><text x="49.4439%" y="863.50">rmp..</text></g><g><title>rmp_serde::decode::from_read_ref (3,932 samples, 3.34%)</title><rect x="49.1939%" y="837" width="3.3382%" height="15" fill="rgb(213,92,11)" fg:x="57945" fg:w="3932"/><text x="49.4439%" y="847.50">rmp..</text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (3,922 samples, 3.33%)</title><rect x="49.2024%" y="821" width="3.3297%" height="15" fill="rgb(229,162,46)" fg:x="57955" fg:w="3922"/><text x="49.4524%" y="831.50">tre..</text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (3,922 samples, 3.33%)</title><rect x="49.2024%" y="805" width="3.3297%" height="15" fill="rgb(214,111,36)" fg:x="57955" fg:w="3922"/><text x="49.4524%" y="815.50">&lt;&amp;m..</text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker (82 samples, 0.07%)</title><rect x="52.4625%" y="789" width="0.0696%" height="15" fill="rgb(207,6,21)" fg:x="61795" fg:w="82"/><text x="52.7125%" y="799.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (63 samples, 0.05%)</title><rect x="52.4786%" y="773" width="0.0535%" height="15" fill="rgb(213,127,38)" fg:x="61814" fg:w="63"/><text x="52.7286%" y="783.50"></text></g><g><title>core::mem::replace (63 samples, 0.05%)</title><rect x="52.4786%" y="757" width="0.0535%" height="15" fill="rgb(238,118,32)" fg:x="61814" fg:w="63"/><text x="52.7286%" y="767.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (25 samples, 0.02%)</title><rect x="52.5771%" y="597" width="0.0212%" height="15" fill="rgb(240,139,39)" fg:x="61930" fg:w="25"/><text x="52.8271%" y="607.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (44 samples, 0.04%)</title><rect x="52.5618%" y="757" width="0.0374%" height="15" fill="rgb(235,10,37)" fg:x="61912" fg:w="44"/><text x="52.8118%" y="767.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (43 samples, 0.04%)</title><rect x="52.5626%" y="741" width="0.0365%" height="15" fill="rgb(249,171,38)" fg:x="61913" fg:w="43"/><text x="52.8126%" y="751.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (43 samples, 0.04%)</title><rect x="52.5626%" y="725" width="0.0365%" height="15" fill="rgb(242,144,32)" fg:x="61913" fg:w="43"/><text x="52.8126%" y="735.50"></text></g><g><title>alloc::alloc::exchange_malloc (41 samples, 0.03%)</title><rect x="52.5643%" y="709" width="0.0348%" height="15" fill="rgb(217,117,21)" fg:x="61915" fg:w="41"/><text x="52.8143%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (41 samples, 0.03%)</title><rect x="52.5643%" y="693" width="0.0348%" height="15" fill="rgb(249,87,1)" fg:x="61915" fg:w="41"/><text x="52.8143%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (41 samples, 0.03%)</title><rect x="52.5643%" y="677" width="0.0348%" height="15" fill="rgb(248,196,48)" fg:x="61915" fg:w="41"/><text x="52.8143%" y="687.50"></text></g><g><title>alloc::alloc::alloc (41 samples, 0.03%)</title><rect x="52.5643%" y="661" width="0.0348%" height="15" fill="rgb(251,206,33)" fg:x="61915" fg:w="41"/><text x="52.8143%" y="671.50"></text></g><g><title>__rg_alloc (41 samples, 0.03%)</title><rect x="52.5643%" y="645" width="0.0348%" height="15" fill="rgb(232,141,28)" fg:x="61915" fg:w="41"/><text x="52.8143%" y="655.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (41 samples, 0.03%)</title><rect x="52.5643%" y="629" width="0.0348%" height="15" fill="rgb(209,167,14)" fg:x="61915" fg:w="41"/><text x="52.8143%" y="639.50"></text></g><g><title>sn_rust_alloc (41 samples, 0.03%)</title><rect x="52.5643%" y="613" width="0.0348%" height="15" fill="rgb(225,11,50)" fg:x="61915" fg:w="41"/><text x="52.8143%" y="623.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (57 samples, 0.05%)</title><rect x="52.5550%" y="837" width="0.0484%" height="15" fill="rgb(209,50,20)" fg:x="61904" fg:w="57"/><text x="52.8050%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (52 samples, 0.04%)</title><rect x="52.5592%" y="821" width="0.0441%" height="15" fill="rgb(212,17,46)" fg:x="61909" fg:w="52"/><text x="52.8092%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (52 samples, 0.04%)</title><rect x="52.5592%" y="805" width="0.0441%" height="15" fill="rgb(216,101,39)" fg:x="61909" fg:w="52"/><text x="52.8092%" y="815.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (49 samples, 0.04%)</title><rect x="52.5618%" y="789" width="0.0416%" height="15" fill="rgb(212,228,48)" fg:x="61912" fg:w="49"/><text x="52.8118%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (49 samples, 0.04%)</title><rect x="52.5618%" y="773" width="0.0416%" height="15" fill="rgb(250,6,50)" fg:x="61912" fg:w="49"/><text x="52.8118%" y="783.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (119 samples, 0.10%)</title><rect x="52.6874%" y="597" width="0.1010%" height="15" fill="rgb(250,160,48)" fg:x="62060" fg:w="119"/><text x="52.9374%" y="607.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (138 samples, 0.12%)</title><rect x="52.6722%" y="757" width="0.1172%" height="15" fill="rgb(244,216,33)" fg:x="62042" fg:w="138"/><text x="52.9222%" y="767.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (138 samples, 0.12%)</title><rect x="52.6722%" y="741" width="0.1172%" height="15" fill="rgb(207,157,5)" fg:x="62042" fg:w="138"/><text x="52.9222%" y="751.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (135 samples, 0.11%)</title><rect x="52.6747%" y="725" width="0.1146%" height="15" fill="rgb(228,199,8)" fg:x="62045" fg:w="135"/><text x="52.9247%" y="735.50"></text></g><g><title>alloc::alloc::exchange_malloc (128 samples, 0.11%)</title><rect x="52.6806%" y="709" width="0.1087%" height="15" fill="rgb(227,80,20)" fg:x="62052" fg:w="128"/><text x="52.9306%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (128 samples, 0.11%)</title><rect x="52.6806%" y="693" width="0.1087%" height="15" fill="rgb(222,9,33)" fg:x="62052" fg:w="128"/><text x="52.9306%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (128 samples, 0.11%)</title><rect x="52.6806%" y="677" width="0.1087%" height="15" fill="rgb(239,44,28)" fg:x="62052" fg:w="128"/><text x="52.9306%" y="687.50"></text></g><g><title>alloc::alloc::alloc (128 samples, 0.11%)</title><rect x="52.6806%" y="661" width="0.1087%" height="15" fill="rgb(249,187,43)" fg:x="62052" fg:w="128"/><text x="52.9306%" y="671.50"></text></g><g><title>__rg_alloc (128 samples, 0.11%)</title><rect x="52.6806%" y="645" width="0.1087%" height="15" fill="rgb(216,141,28)" fg:x="62052" fg:w="128"/><text x="52.9306%" y="655.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (128 samples, 0.11%)</title><rect x="52.6806%" y="629" width="0.1087%" height="15" fill="rgb(230,154,53)" fg:x="62052" fg:w="128"/><text x="52.9306%" y="639.50"></text></g><g><title>sn_rust_alloc (126 samples, 0.11%)</title><rect x="52.6823%" y="613" width="0.1070%" height="15" fill="rgb(227,82,4)" fg:x="62054" fg:w="126"/><text x="52.9323%" y="623.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (154 samples, 0.13%)</title><rect x="52.6671%" y="805" width="0.1307%" height="15" fill="rgb(220,107,16)" fg:x="62036" fg:w="154"/><text x="52.9171%" y="815.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (154 samples, 0.13%)</title><rect x="52.6671%" y="789" width="0.1307%" height="15" fill="rgb(207,187,2)" fg:x="62036" fg:w="154"/><text x="52.9171%" y="799.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (154 samples, 0.13%)</title><rect x="52.6671%" y="773" width="0.1307%" height="15" fill="rgb(210,162,52)" fg:x="62036" fg:w="154"/><text x="52.9171%" y="783.50"></text></g><g><title>abi_stable::erased_types::iterator::next (13 samples, 0.01%)</title><rect x="52.8063%" y="757" width="0.0110%" height="15" fill="rgb(217,216,49)" fg:x="62200" fg:w="13"/><text x="53.0563%" y="767.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (13 samples, 0.01%)</title><rect x="52.8063%" y="741" width="0.0110%" height="15" fill="rgb(218,146,49)" fg:x="62200" fg:w="13"/><text x="53.0563%" y="751.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="52.8063%" y="725" width="0.0110%" height="15" fill="rgb(216,55,40)" fg:x="62200" fg:w="13"/><text x="53.0563%" y="735.50"></text></g><g><title>&lt;halfbrown::iter::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="52.8063%" y="709" width="0.0110%" height="15" fill="rgb(208,196,21)" fg:x="62200" fg:w="13"/><text x="53.0563%" y="719.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.01%)</title><rect x="52.8071%" y="693" width="0.0102%" height="15" fill="rgb(242,117,42)" fg:x="62201" fg:w="12"/><text x="53.0571%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.01%)</title><rect x="52.8071%" y="677" width="0.0102%" height="15" fill="rgb(210,11,23)" fg:x="62201" fg:w="12"/><text x="53.0571%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.01%)</title><rect x="52.8071%" y="661" width="0.0102%" height="15" fill="rgb(217,110,2)" fg:x="62201" fg:w="12"/><text x="53.0571%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.01%)</title><rect x="52.8037%" y="789" width="0.0144%" height="15" fill="rgb(229,77,54)" fg:x="62197" fg:w="17"/><text x="53.0537%" y="799.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (17 samples, 0.01%)</title><rect x="52.8037%" y="773" width="0.0144%" height="15" fill="rgb(218,53,16)" fg:x="62197" fg:w="17"/><text x="53.0537%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (13 samples, 0.01%)</title><rect x="52.8182%" y="789" width="0.0110%" height="15" fill="rgb(215,38,13)" fg:x="62214" fg:w="13"/><text x="53.0682%" y="799.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (13 samples, 0.01%)</title><rect x="52.8182%" y="773" width="0.0110%" height="15" fill="rgb(235,42,18)" fg:x="62214" fg:w="13"/><text x="53.0682%" y="783.50"></text></g><g><title>sn_rust_dealloc (51 samples, 0.04%)</title><rect x="52.8402%" y="677" width="0.0433%" height="15" fill="rgb(219,66,54)" fg:x="62240" fg:w="51"/><text x="53.0902%" y="687.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (415 samples, 0.35%)</title><rect x="52.5321%" y="869" width="0.3523%" height="15" fill="rgb(222,205,4)" fg:x="61877" fg:w="415"/><text x="52.7821%" y="879.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (388 samples, 0.33%)</title><rect x="52.5550%" y="853" width="0.3294%" height="15" fill="rgb(227,213,46)" fg:x="61904" fg:w="388"/><text x="52.8050%" y="863.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (331 samples, 0.28%)</title><rect x="52.6034%" y="837" width="0.2810%" height="15" fill="rgb(250,145,42)" fg:x="61961" fg:w="331"/><text x="52.8534%" y="847.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (256 samples, 0.22%)</title><rect x="52.6671%" y="821" width="0.2173%" height="15" fill="rgb(219,15,2)" fg:x="62036" fg:w="256"/><text x="52.9171%" y="831.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (102 samples, 0.09%)</title><rect x="52.7978%" y="805" width="0.0866%" height="15" fill="rgb(231,181,52)" fg:x="62190" fg:w="102"/><text x="53.0478%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (58 samples, 0.05%)</title><rect x="52.8352%" y="789" width="0.0492%" height="15" fill="rgb(235,1,42)" fg:x="62234" fg:w="58"/><text x="53.0852%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt; (58 samples, 0.05%)</title><rect x="52.8352%" y="773" width="0.0492%" height="15" fill="rgb(249,88,27)" fg:x="62234" fg:w="58"/><text x="53.0852%" y="783.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (58 samples, 0.05%)</title><rect x="52.8352%" y="757" width="0.0492%" height="15" fill="rgb(235,145,16)" fg:x="62234" fg:w="58"/><text x="53.0852%" y="767.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (58 samples, 0.05%)</title><rect x="52.8352%" y="741" width="0.0492%" height="15" fill="rgb(237,114,19)" fg:x="62234" fg:w="58"/><text x="53.0852%" y="751.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (58 samples, 0.05%)</title><rect x="52.8352%" y="725" width="0.0492%" height="15" fill="rgb(238,51,50)" fg:x="62234" fg:w="58"/><text x="53.0852%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (58 samples, 0.05%)</title><rect x="52.8352%" y="709" width="0.0492%" height="15" fill="rgb(205,194,25)" fg:x="62234" fg:w="58"/><text x="53.0852%" y="719.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (58 samples, 0.05%)</title><rect x="52.8352%" y="693" width="0.0492%" height="15" fill="rgb(215,203,17)" fg:x="62234" fg:w="58"/><text x="53.0852%" y="703.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (5,932 samples, 5.04%)</title><rect x="47.9459%" y="1077" width="5.0361%" height="15" fill="rgb(233,112,49)" fg:x="56475" fg:w="5932"/><text x="48.1959%" y="1087.50">std::t..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (5,930 samples, 5.03%)</title><rect x="47.9476%" y="1061" width="5.0344%" height="15" fill="rgb(241,130,26)" fg:x="56477" fg:w="5930"/><text x="48.1976%" y="1071.50">std::t..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (5,930 samples, 5.03%)</title><rect x="47.9476%" y="1045" width="5.0344%" height="15" fill="rgb(252,223,19)" fg:x="56477" fg:w="5930"/><text x="48.1976%" y="1055.50">async_..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (5,930 samples, 5.03%)</title><rect x="47.9476%" y="1029" width="5.0344%" height="15" fill="rgb(211,95,25)" fg:x="56477" fg:w="5930"/><text x="48.1976%" y="1039.50">&lt;async..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,930 samples, 5.03%)</title><rect x="47.9476%" y="1013" width="5.0344%" height="15" fill="rgb(251,182,27)" fg:x="56477" fg:w="5930"/><text x="48.1976%" y="1023.50">&lt;core:..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (5,930 samples, 5.03%)</title><rect x="47.9476%" y="997" width="5.0344%" height="15" fill="rgb(238,24,4)" fg:x="56477" fg:w="5930"/><text x="48.1976%" y="1007.50">tremor..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,930 samples, 5.03%)</title><rect x="47.9476%" y="981" width="5.0344%" height="15" fill="rgb(224,220,25)" fg:x="56477" fg:w="5930"/><text x="48.1976%" y="991.50">&lt;core:..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (5,930 samples, 5.03%)</title><rect x="47.9476%" y="965" width="5.0344%" height="15" fill="rgb(239,133,26)" fg:x="56477" fg:w="5930"/><text x="48.1976%" y="975.50">tremor..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,930 samples, 5.03%)</title><rect x="47.9476%" y="949" width="5.0344%" height="15" fill="rgb(211,94,48)" fg:x="56477" fg:w="5930"/><text x="48.1976%" y="959.50">&lt;core:..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (5,930 samples, 5.03%)</title><rect x="47.9476%" y="933" width="5.0344%" height="15" fill="rgb(239,87,6)" fg:x="56477" fg:w="5930"/><text x="48.1976%" y="943.50">tremor..</text></g><g><title>tremor_runtime::connectors::source::build_events (5,929 samples, 5.03%)</title><rect x="47.9485%" y="917" width="5.0336%" height="15" fill="rgb(227,62,0)" fg:x="56478" fg:w="5929"/><text x="48.1985%" y="927.50">tremor..</text></g><g><title>tremor_script::srs::EventPayload::try_new (4,940 samples, 4.19%)</title><rect x="48.7881%" y="901" width="4.1939%" height="15" fill="rgb(211,226,4)" fg:x="57467" fg:w="4940"/><text x="49.0381%" y="911.50">tremo..</text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (4,711 samples, 4.00%)</title><rect x="48.9825%" y="885" width="3.9995%" height="15" fill="rgb(253,38,52)" fg:x="57696" fg:w="4711"/><text x="49.2325%" y="895.50">trem..</text></g><g><title>tremor_script::srs::ValueAndMeta::from_parts (115 samples, 0.10%)</title><rect x="52.8844%" y="869" width="0.0976%" height="15" fill="rgb(229,126,40)" fg:x="62292" fg:w="115"/><text x="53.1344%" y="879.50"></text></g><g><title>tremor_common::time::nanotime (24 samples, 0.02%)</title><rect x="52.9837%" y="1077" width="0.0204%" height="15" fill="rgb(229,165,44)" fg:x="62409" fg:w="24"/><text x="53.2337%" y="1087.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (27 samples, 0.02%)</title><rect x="53.0550%" y="933" width="0.0229%" height="15" fill="rgb(247,95,47)" fg:x="62493" fg:w="27"/><text x="53.3050%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_add (27 samples, 0.02%)</title><rect x="53.0550%" y="917" width="0.0229%" height="15" fill="rgb(216,140,30)" fg:x="62493" fg:w="27"/><text x="53.3050%" y="927.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (32 samples, 0.03%)</title><rect x="53.0516%" y="965" width="0.0272%" height="15" fill="rgb(246,214,8)" fg:x="62489" fg:w="32"/><text x="53.3016%" y="975.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (29 samples, 0.02%)</title><rect x="53.0542%" y="949" width="0.0246%" height="15" fill="rgb(227,224,15)" fg:x="62492" fg:w="29"/><text x="53.3042%" y="959.50"></text></g><g><title>core::mem::drop (17 samples, 0.01%)</title><rect x="53.0848%" y="965" width="0.0144%" height="15" fill="rgb(233,175,4)" fg:x="62528" fg:w="17"/><text x="53.3348%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (17 samples, 0.01%)</title><rect x="53.0848%" y="949" width="0.0144%" height="15" fill="rgb(221,66,45)" fg:x="62528" fg:w="17"/><text x="53.3348%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (16 samples, 0.01%)</title><rect x="53.0856%" y="933" width="0.0136%" height="15" fill="rgb(221,178,18)" fg:x="62529" fg:w="16"/><text x="53.3356%" y="943.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="53.0856%" y="917" width="0.0136%" height="15" fill="rgb(213,81,29)" fg:x="62529" fg:w="16"/><text x="53.3356%" y="927.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (14 samples, 0.01%)</title><rect x="53.0873%" y="901" width="0.0119%" height="15" fill="rgb(220,89,49)" fg:x="62531" fg:w="14"/><text x="53.3373%" y="911.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (14 samples, 0.01%)</title><rect x="53.0873%" y="885" width="0.0119%" height="15" fill="rgb(227,60,33)" fg:x="62531" fg:w="14"/><text x="53.3373%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (14 samples, 0.01%)</title><rect x="53.0873%" y="869" width="0.0119%" height="15" fill="rgb(205,113,12)" fg:x="62531" fg:w="14"/><text x="53.3373%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_swap (14 samples, 0.01%)</title><rect x="53.0873%" y="853" width="0.0119%" height="15" fill="rgb(211,32,1)" fg:x="62531" fg:w="14"/><text x="53.3373%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (24 samples, 0.02%)</title><rect x="53.0992%" y="965" width="0.0204%" height="15" fill="rgb(246,2,12)" fg:x="62545" fg:w="24"/><text x="53.3492%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (21 samples, 0.02%)</title><rect x="53.1017%" y="949" width="0.0178%" height="15" fill="rgb(243,37,27)" fg:x="62548" fg:w="21"/><text x="53.3517%" y="959.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.02%)</title><rect x="53.1017%" y="933" width="0.0178%" height="15" fill="rgb(248,211,31)" fg:x="62548" fg:w="21"/><text x="53.3517%" y="943.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (21 samples, 0.02%)</title><rect x="53.1017%" y="917" width="0.0178%" height="15" fill="rgb(242,146,47)" fg:x="62548" fg:w="21"/><text x="53.3517%" y="927.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (21 samples, 0.02%)</title><rect x="53.1017%" y="901" width="0.0178%" height="15" fill="rgb(206,70,20)" fg:x="62548" fg:w="21"/><text x="53.3517%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (21 samples, 0.02%)</title><rect x="53.1017%" y="885" width="0.0178%" height="15" fill="rgb(215,10,51)" fg:x="62548" fg:w="21"/><text x="53.3517%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_swap (21 samples, 0.02%)</title><rect x="53.1017%" y="869" width="0.0178%" height="15" fill="rgb(243,178,53)" fg:x="62548" fg:w="21"/><text x="53.3517%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (92 samples, 0.08%)</title><rect x="53.1264%" y="901" width="0.0781%" height="15" fill="rgb(233,221,20)" fg:x="62577" fg:w="92"/><text x="53.3764%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (92 samples, 0.08%)</title><rect x="53.1264%" y="885" width="0.0781%" height="15" fill="rgb(218,95,35)" fg:x="62577" fg:w="92"/><text x="53.3764%" y="895.50"></text></g><g><title>core::hint::spin_loop (375 samples, 0.32%)</title><rect x="53.2146%" y="869" width="0.3184%" height="15" fill="rgb(229,13,5)" fg:x="62681" fg:w="375"/><text x="53.4646%" y="879.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (375 samples, 0.32%)</title><rect x="53.2146%" y="853" width="0.3184%" height="15" fill="rgb(252,164,30)" fg:x="62681" fg:w="375"/><text x="53.4646%" y="863.50"></text></g><g><title>event_listener::Inner::lock (501 samples, 0.43%)</title><rect x="53.1221%" y="965" width="0.4253%" height="15" fill="rgb(232,68,36)" fg:x="62572" fg:w="501"/><text x="53.3721%" y="975.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (499 samples, 0.42%)</title><rect x="53.1238%" y="949" width="0.4236%" height="15" fill="rgb(219,59,54)" fg:x="62574" fg:w="499"/><text x="53.3738%" y="959.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (498 samples, 0.42%)</title><rect x="53.1247%" y="933" width="0.4228%" height="15" fill="rgb(250,92,33)" fg:x="62575" fg:w="498"/><text x="53.3747%" y="943.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (498 samples, 0.42%)</title><rect x="53.1247%" y="917" width="0.4228%" height="15" fill="rgb(229,162,54)" fg:x="62575" fg:w="498"/><text x="53.3747%" y="927.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (404 samples, 0.34%)</title><rect x="53.2045%" y="901" width="0.3430%" height="15" fill="rgb(244,114,52)" fg:x="62669" fg:w="404"/><text x="53.4545%" y="911.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (393 samples, 0.33%)</title><rect x="53.2138%" y="885" width="0.3336%" height="15" fill="rgb(212,211,43)" fg:x="62680" fg:w="393"/><text x="53.4638%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (17 samples, 0.01%)</title><rect x="53.5330%" y="869" width="0.0144%" height="15" fill="rgb(226,147,8)" fg:x="63056" fg:w="17"/><text x="53.7830%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_load (17 samples, 0.01%)</title><rect x="53.5330%" y="853" width="0.0144%" height="15" fill="rgb(226,23,13)" fg:x="63056" fg:w="17"/><text x="53.7830%" y="863.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (681 samples, 0.58%)</title><rect x="53.0338%" y="981" width="0.5782%" height="15" fill="rgb(240,63,4)" fg:x="62468" fg:w="681"/><text x="53.2838%" y="991.50"></text></g><g><title>event_listener::List::remove (76 samples, 0.06%)</title><rect x="53.5474%" y="965" width="0.0645%" height="15" fill="rgb(221,1,32)" fg:x="63073" fg:w="76"/><text x="53.7974%" y="975.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (58 samples, 0.05%)</title><rect x="53.5627%" y="949" width="0.0492%" height="15" fill="rgb(242,117,10)" fg:x="63091" fg:w="58"/><text x="53.8127%" y="959.50"></text></g><g><title>core::mem::replace (58 samples, 0.05%)</title><rect x="53.5627%" y="933" width="0.0492%" height="15" fill="rgb(249,172,44)" fg:x="63091" fg:w="58"/><text x="53.8127%" y="943.50"></text></g><g><title>core::ptr::read (58 samples, 0.05%)</title><rect x="53.5627%" y="917" width="0.0492%" height="15" fill="rgb(244,46,45)" fg:x="63091" fg:w="58"/><text x="53.8127%" y="927.50"></text></g><g><title>[libc-2.31.so] (299 samples, 0.25%)</title><rect x="53.6120%" y="981" width="0.2538%" height="15" fill="rgb(206,43,17)" fg:x="63149" fg:w="299"/><text x="53.8620%" y="991.50"></text></g><g><title>[libc-2.31.so] (501 samples, 0.43%)</title><rect x="53.8862%" y="965" width="0.4253%" height="15" fill="rgb(239,218,39)" fg:x="63472" fg:w="501"/><text x="54.1362%" y="975.50"></text></g><g><title>[libc-2.31.so] (124 samples, 0.11%)</title><rect x="54.4508%" y="933" width="0.1053%" height="15" fill="rgb(208,169,54)" fg:x="64137" fg:w="124"/><text x="54.7008%" y="943.50"></text></g><g><title>concurrent_queue::full_fence (107 samples, 0.09%)</title><rect x="54.5560%" y="933" width="0.0908%" height="15" fill="rgb(247,25,42)" fg:x="64261" fg:w="107"/><text x="54.8060%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (105 samples, 0.09%)</title><rect x="54.5577%" y="917" width="0.0891%" height="15" fill="rgb(226,23,31)" fg:x="64263" fg:w="105"/><text x="54.8077%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (105 samples, 0.09%)</title><rect x="54.5577%" y="901" width="0.0891%" height="15" fill="rgb(247,16,28)" fg:x="64263" fg:w="105"/><text x="54.8077%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (105 samples, 0.09%)</title><rect x="54.5577%" y="885" width="0.0891%" height="15" fill="rgb(231,147,38)" fg:x="64263" fg:w="105"/><text x="54.8077%" y="895.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (588 samples, 0.50%)</title><rect x="54.6469%" y="933" width="0.4992%" height="15" fill="rgb(253,81,48)" fg:x="64368" fg:w="588"/><text x="54.8969%" y="943.50"></text></g><g><title>core::ptr::read (588 samples, 0.50%)</title><rect x="54.6469%" y="917" width="0.4992%" height="15" fill="rgb(249,222,43)" fg:x="64368" fg:w="588"/><text x="54.8969%" y="927.50"></text></g><g><title>[libc-2.31.so] (588 samples, 0.50%)</title><rect x="54.6469%" y="901" width="0.4992%" height="15" fill="rgb(221,3,27)" fg:x="64368" fg:w="588"/><text x="54.8969%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (236 samples, 0.20%)</title><rect x="55.1461%" y="933" width="0.2004%" height="15" fill="rgb(228,180,5)" fg:x="64956" fg:w="236"/><text x="55.3961%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (236 samples, 0.20%)</title><rect x="55.1461%" y="917" width="0.2004%" height="15" fill="rgb(227,131,42)" fg:x="64956" fg:w="236"/><text x="55.3961%" y="927.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (1,568 samples, 1.33%)</title><rect x="54.3115%" y="965" width="1.3312%" height="15" fill="rgb(212,3,39)" fg:x="63973" fg:w="1568"/><text x="54.5615%" y="975.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (1,526 samples, 1.30%)</title><rect x="54.3472%" y="949" width="1.2955%" height="15" fill="rgb(226,45,5)" fg:x="64015" fg:w="1526"/><text x="54.5972%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (349 samples, 0.30%)</title><rect x="55.3464%" y="933" width="0.2963%" height="15" fill="rgb(215,167,45)" fg:x="65192" fg:w="349"/><text x="55.5964%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_load (349 samples, 0.30%)</title><rect x="55.3464%" y="917" width="0.2963%" height="15" fill="rgb(250,218,53)" fg:x="65192" fg:w="349"/><text x="55.5964%" y="927.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (2,234 samples, 1.90%)</title><rect x="53.8658%" y="981" width="1.8966%" height="15" fill="rgb(207,140,0)" fg:x="63448" fg:w="2234"/><text x="54.1158%" y="991.50">a..</text></g><g><title>event_listener::Event::notify (141 samples, 0.12%)</title><rect x="55.6427%" y="965" width="0.1197%" height="15" fill="rgb(238,133,51)" fg:x="65541" fg:w="141"/><text x="55.8927%" y="975.50"></text></g><g><title>event_listener::full_fence (131 samples, 0.11%)</title><rect x="55.6512%" y="949" width="0.1112%" height="15" fill="rgb(218,203,53)" fg:x="65551" fg:w="131"/><text x="55.9012%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (127 samples, 0.11%)</title><rect x="55.6546%" y="933" width="0.1078%" height="15" fill="rgb(226,184,25)" fg:x="65555" fg:w="127"/><text x="55.9046%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (127 samples, 0.11%)</title><rect x="55.6546%" y="917" width="0.1078%" height="15" fill="rgb(231,121,21)" fg:x="65555" fg:w="127"/><text x="55.9046%" y="927.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (15 samples, 0.01%)</title><rect x="55.7624%" y="981" width="0.0127%" height="15" fill="rgb(251,14,34)" fg:x="65682" fg:w="15"/><text x="56.0124%" y="991.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="55.7794%" y="949" width="0.0127%" height="15" fill="rgb(249,193,11)" fg:x="65702" fg:w="15"/><text x="56.0294%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (75 samples, 0.06%)</title><rect x="55.7752%" y="981" width="0.0637%" height="15" fill="rgb(220,172,37)" fg:x="65697" fg:w="75"/><text x="56.0252%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (70 samples, 0.06%)</title><rect x="55.7794%" y="965" width="0.0594%" height="15" fill="rgb(231,229,43)" fg:x="65702" fg:w="70"/><text x="56.0294%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (55 samples, 0.05%)</title><rect x="55.7921%" y="949" width="0.0467%" height="15" fill="rgb(250,161,5)" fg:x="65717" fg:w="55"/><text x="56.0421%" y="959.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (55 samples, 0.05%)</title><rect x="55.7921%" y="933" width="0.0467%" height="15" fill="rgb(218,225,18)" fg:x="65717" fg:w="55"/><text x="56.0421%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (55 samples, 0.05%)</title><rect x="55.7921%" y="917" width="0.0467%" height="15" fill="rgb(245,45,42)" fg:x="65717" fg:w="55"/><text x="56.0421%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_sub (55 samples, 0.05%)</title><rect x="55.7921%" y="901" width="0.0467%" height="15" fill="rgb(211,115,1)" fg:x="65717" fg:w="55"/><text x="56.0421%" y="911.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (43 samples, 0.04%)</title><rect x="55.8456%" y="965" width="0.0365%" height="15" fill="rgb(248,133,52)" fg:x="65780" fg:w="43"/><text x="56.0956%" y="975.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (43 samples, 0.04%)</title><rect x="55.8456%" y="949" width="0.0365%" height="15" fill="rgb(238,100,21)" fg:x="65780" fg:w="43"/><text x="56.0956%" y="959.50"></text></g><g><title>core::sync::atomic::atomic_add (43 samples, 0.04%)</title><rect x="55.8456%" y="933" width="0.0365%" height="15" fill="rgb(247,144,11)" fg:x="65780" fg:w="43"/><text x="56.0956%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (47 samples, 0.04%)</title><rect x="55.8821%" y="965" width="0.0399%" height="15" fill="rgb(206,164,16)" fg:x="65823" fg:w="47"/><text x="56.1321%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (46 samples, 0.04%)</title><rect x="55.8830%" y="949" width="0.0391%" height="15" fill="rgb(222,34,3)" fg:x="65824" fg:w="46"/><text x="56.1330%" y="959.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (46 samples, 0.04%)</title><rect x="55.8830%" y="933" width="0.0391%" height="15" fill="rgb(248,82,4)" fg:x="65824" fg:w="46"/><text x="56.1330%" y="943.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (45 samples, 0.04%)</title><rect x="55.8838%" y="917" width="0.0382%" height="15" fill="rgb(228,81,46)" fg:x="65825" fg:w="45"/><text x="56.1338%" y="927.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (45 samples, 0.04%)</title><rect x="55.8838%" y="901" width="0.0382%" height="15" fill="rgb(227,67,47)" fg:x="65825" fg:w="45"/><text x="56.1338%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (45 samples, 0.04%)</title><rect x="55.8838%" y="885" width="0.0382%" height="15" fill="rgb(215,93,53)" fg:x="65825" fg:w="45"/><text x="56.1338%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_swap (45 samples, 0.04%)</title><rect x="55.8838%" y="869" width="0.0382%" height="15" fill="rgb(248,194,39)" fg:x="65825" fg:w="45"/><text x="56.1338%" y="879.50"></text></g><g><title>event_listener::Inner::lock (27 samples, 0.02%)</title><rect x="55.9246%" y="965" width="0.0229%" height="15" fill="rgb(215,5,19)" fg:x="65873" fg:w="27"/><text x="56.1746%" y="975.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (27 samples, 0.02%)</title><rect x="55.9246%" y="949" width="0.0229%" height="15" fill="rgb(226,215,51)" fg:x="65873" fg:w="27"/><text x="56.1746%" y="959.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (25 samples, 0.02%)</title><rect x="55.9263%" y="933" width="0.0212%" height="15" fill="rgb(225,56,26)" fg:x="65875" fg:w="25"/><text x="56.1763%" y="943.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (25 samples, 0.02%)</title><rect x="55.9263%" y="917" width="0.0212%" height="15" fill="rgb(222,75,29)" fg:x="65875" fg:w="25"/><text x="56.1763%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (25 samples, 0.02%)</title><rect x="55.9263%" y="901" width="0.0212%" height="15" fill="rgb(236,139,6)" fg:x="65875" fg:w="25"/><text x="56.1763%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (25 samples, 0.02%)</title><rect x="55.9263%" y="885" width="0.0212%" height="15" fill="rgb(223,137,36)" fg:x="65875" fg:w="25"/><text x="56.1763%" y="895.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,476 samples, 2.95%)</title><rect x="53.0168%" y="1061" width="2.9510%" height="15" fill="rgb(226,99,2)" fg:x="62448" fg:w="3476"/><text x="53.2668%" y="1071.50">&lt;as..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (3,476 samples, 2.95%)</title><rect x="53.0168%" y="1045" width="2.9510%" height="15" fill="rgb(206,133,23)" fg:x="62448" fg:w="3476"/><text x="53.2668%" y="1055.50">&lt;tr..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (3,476 samples, 2.95%)</title><rect x="53.0168%" y="1029" width="2.9510%" height="15" fill="rgb(243,173,15)" fg:x="62448" fg:w="3476"/><text x="53.2668%" y="1039.50">&lt;as..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (3,476 samples, 2.95%)</title><rect x="53.0168%" y="1013" width="2.9510%" height="15" fill="rgb(228,69,28)" fg:x="62448" fg:w="3476"/><text x="53.2668%" y="1023.50">&lt;as..</text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (3,476 samples, 2.95%)</title><rect x="53.0168%" y="997" width="2.9510%" height="15" fill="rgb(212,51,22)" fg:x="62448" fg:w="3476"/><text x="53.2668%" y="1007.50">&lt;as..</text></g><g><title>event_listener::Event::listen (152 samples, 0.13%)</title><rect x="55.8388%" y="981" width="0.1290%" height="15" fill="rgb(227,113,0)" fg:x="65772" fg:w="152"/><text x="56.0888%" y="991.50"></text></g><g><title>event_listener::full_fence (18 samples, 0.02%)</title><rect x="55.9526%" y="965" width="0.0153%" height="15" fill="rgb(252,84,27)" fg:x="65906" fg:w="18"/><text x="56.2026%" y="975.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (16 samples, 0.01%)</title><rect x="55.9543%" y="949" width="0.0136%" height="15" fill="rgb(223,145,39)" fg:x="65908" fg:w="16"/><text x="56.2043%" y="959.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (16 samples, 0.01%)</title><rect x="55.9543%" y="933" width="0.0136%" height="15" fill="rgb(239,219,30)" fg:x="65908" fg:w="16"/><text x="56.2043%" y="943.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_map::{{closure}} (22 samples, 0.02%)</title><rect x="55.9950%" y="597" width="0.0187%" height="15" fill="rgb(224,196,39)" fg:x="65956" fg:w="22"/><text x="56.2450%" y="607.50"></text></g><g><title>rmp::encode::write_map_len (20 samples, 0.02%)</title><rect x="55.9967%" y="581" width="0.0170%" height="15" fill="rgb(205,35,43)" fg:x="65958" fg:w="20"/><text x="56.2467%" y="591.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_map (24 samples, 0.02%)</title><rect x="55.9950%" y="629" width="0.0204%" height="15" fill="rgb(228,201,21)" fg:x="65956" fg:w="24"/><text x="56.2450%" y="639.50"></text></g><g><title>rmp_serde::encode::Serializer&lt;W,C&gt;::maybe_unknown_len_compound (24 samples, 0.02%)</title><rect x="55.9950%" y="613" width="0.0204%" height="15" fill="rgb(237,118,16)" fg:x="65956" fg:w="24"/><text x="56.2450%" y="623.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (129 samples, 0.11%)</title><rect x="56.0154%" y="629" width="0.1095%" height="15" fill="rgb(241,17,19)" fg:x="65980" fg:w="129"/><text x="56.2654%" y="639.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (75 samples, 0.06%)</title><rect x="56.1249%" y="629" width="0.0637%" height="15" fill="rgb(214,10,25)" fg:x="66109" fg:w="75"/><text x="56.3749%" y="639.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (28 samples, 0.02%)</title><rect x="56.1886%" y="629" width="0.0238%" height="15" fill="rgb(238,37,29)" fg:x="66184" fg:w="28"/><text x="56.4386%" y="639.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as abi_stable::traits::IntoReprRust&gt;::into_rust (42 samples, 0.04%)</title><rect x="56.2141%" y="613" width="0.0357%" height="15" fill="rgb(253,83,25)" fg:x="66214" fg:w="42"/><text x="56.4641%" y="623.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (42 samples, 0.04%)</title><rect x="56.2141%" y="597" width="0.0357%" height="15" fill="rgb(234,192,12)" fg:x="66214" fg:w="42"/><text x="56.4641%" y="607.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (42 samples, 0.04%)</title><rect x="56.2141%" y="581" width="0.0357%" height="15" fill="rgb(241,216,45)" fg:x="66214" fg:w="42"/><text x="56.4641%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (35 samples, 0.03%)</title><rect x="56.3864%" y="485" width="0.0297%" height="15" fill="rgb(242,22,33)" fg:x="66417" fg:w="35"/><text x="56.6364%" y="495.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (35 samples, 0.03%)</title><rect x="56.3864%" y="469" width="0.0297%" height="15" fill="rgb(231,105,49)" fg:x="66417" fg:w="35"/><text x="56.6364%" y="479.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (35 samples, 0.03%)</title><rect x="56.3864%" y="453" width="0.0297%" height="15" fill="rgb(218,204,15)" fg:x="66417" fg:w="35"/><text x="56.6364%" y="463.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::next_n (58 samples, 0.05%)</title><rect x="56.3864%" y="501" width="0.0492%" height="15" fill="rgb(235,138,41)" fg:x="66417" fg:w="58"/><text x="56.6364%" y="511.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (23 samples, 0.02%)</title><rect x="56.4161%" y="485" width="0.0195%" height="15" fill="rgb(246,0,9)" fg:x="66452" fg:w="23"/><text x="56.6661%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (185 samples, 0.16%)</title><rect x="56.3236%" y="533" width="0.1571%" height="15" fill="rgb(210,74,4)" fg:x="66343" fg:w="185"/><text x="56.5736%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (128 samples, 0.11%)</title><rect x="56.3720%" y="517" width="0.1087%" height="15" fill="rgb(250,60,41)" fg:x="66400" fg:w="128"/><text x="56.6220%" y="527.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (49 samples, 0.04%)</title><rect x="56.4391%" y="501" width="0.0416%" height="15" fill="rgb(220,115,12)" fg:x="66479" fg:w="49"/><text x="56.6891%" y="511.50"></text></g><g><title>&lt;halfbrown::iter::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (324 samples, 0.28%)</title><rect x="56.2650%" y="565" width="0.2751%" height="15" fill="rgb(237,100,13)" fg:x="66274" fg:w="324"/><text x="56.5150%" y="575.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (264 samples, 0.22%)</title><rect x="56.3160%" y="549" width="0.2241%" height="15" fill="rgb(213,55,26)" fg:x="66334" fg:w="264"/><text x="56.5660%" y="559.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::as_ref (70 samples, 0.06%)</title><rect x="56.4807%" y="533" width="0.0594%" height="15" fill="rgb(216,17,4)" fg:x="66528" fg:w="70"/><text x="56.7307%" y="543.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::as_ptr (70 samples, 0.06%)</title><rect x="56.4807%" y="517" width="0.0594%" height="15" fill="rgb(220,153,47)" fg:x="66528" fg:w="70"/><text x="56.7307%" y="527.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (70 samples, 0.06%)</title><rect x="56.4807%" y="501" width="0.0594%" height="15" fill="rgb(215,131,9)" fg:x="66528" fg:w="70"/><text x="56.7307%" y="511.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (70 samples, 0.06%)</title><rect x="56.4807%" y="485" width="0.0594%" height="15" fill="rgb(233,46,42)" fg:x="66528" fg:w="70"/><text x="56.7307%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,202 samples, 1.02%)</title><rect x="56.2650%" y="581" width="1.0205%" height="15" fill="rgb(226,86,7)" fg:x="66274" fg:w="1202"/><text x="56.5150%" y="591.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (878 samples, 0.75%)</title><rect x="56.5401%" y="565" width="0.7454%" height="15" fill="rgb(239,226,21)" fg:x="66598" fg:w="878"/><text x="56.7901%" y="575.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (878 samples, 0.75%)</title><rect x="56.5401%" y="549" width="0.7454%" height="15" fill="rgb(244,137,22)" fg:x="66598" fg:w="878"/><text x="56.7901%" y="559.50"></text></g><g><title>core::ops::function::FnMut::call_mut (878 samples, 0.75%)</title><rect x="56.5401%" y="533" width="0.7454%" height="15" fill="rgb(211,139,35)" fg:x="66598" fg:w="878"/><text x="56.7901%" y="543.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::map_iter_ref (878 samples, 0.75%)</title><rect x="56.5401%" y="517" width="0.7454%" height="15" fill="rgb(214,62,50)" fg:x="66598" fg:w="878"/><text x="56.7901%" y="527.50"></text></g><g><title>abi_stable::std_types::map::map_key::MapKey&lt;K&gt;::as_ref (878 samples, 0.75%)</title><rect x="56.5401%" y="501" width="0.7454%" height="15" fill="rgb(212,113,44)" fg:x="66598" fg:w="878"/><text x="56.7901%" y="511.50"></text></g><g><title>abi_stable::erased_types::iterator::next (1,263 samples, 1.07%)</title><rect x="56.2531%" y="613" width="1.0723%" height="15" fill="rgb(226,150,43)" fg:x="66260" fg:w="1263"/><text x="56.5031%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (1,253 samples, 1.06%)</title><rect x="56.2616%" y="597" width="1.0638%" height="15" fill="rgb(250,71,37)" fg:x="66270" fg:w="1253"/><text x="56.5116%" y="607.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl abi_stable::traits::IntoReprC for core::option::Option&lt;T&gt;&gt;::into_c (47 samples, 0.04%)</title><rect x="57.2855%" y="581" width="0.0399%" height="15" fill="rgb(219,76,19)" fg:x="67476" fg:w="47"/><text x="57.5355%" y="591.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (47 samples, 0.04%)</title><rect x="57.2855%" y="565" width="0.0399%" height="15" fill="rgb(250,39,11)" fg:x="67476" fg:w="47"/><text x="57.5355%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as core::convert::From&lt;core::option::Option&lt;T&gt;&gt;&gt;::from (47 samples, 0.04%)</title><rect x="57.2855%" y="549" width="0.0399%" height="15" fill="rgb(230,64,31)" fg:x="67476" fg:w="47"/><text x="57.5355%" y="559.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (1,413 samples, 1.20%)</title><rect x="56.2132%" y="629" width="1.1996%" height="15" fill="rgb(208,222,23)" fg:x="66213" fg:w="1413"/><text x="56.4632%" y="639.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (103 samples, 0.09%)</title><rect x="57.3254%" y="613" width="0.0874%" height="15" fill="rgb(227,125,18)" fg:x="67523" fg:w="103"/><text x="57.5754%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (103 samples, 0.09%)</title><rect x="57.3254%" y="597" width="0.0874%" height="15" fill="rgb(234,210,9)" fg:x="67523" fg:w="103"/><text x="57.5754%" y="607.50"></text></g><g><title>abi_stable::erased_types::vtable::_::&lt;impl abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;&gt;::_iter (49 samples, 0.04%)</title><rect x="57.3712%" y="581" width="0.0416%" height="15" fill="rgb(217,127,24)" fg:x="67577" fg:w="49"/><text x="57.6212%" y="591.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (36 samples, 0.03%)</title><rect x="57.4154%" y="549" width="0.0306%" height="15" fill="rgb(239,141,48)" fg:x="67629" fg:w="36"/><text x="57.6654%" y="559.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (27 samples, 0.02%)</title><rect x="57.4230%" y="533" width="0.0229%" height="15" fill="rgb(227,109,8)" fg:x="67638" fg:w="27"/><text x="57.6730%" y="543.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (27 samples, 0.02%)</title><rect x="57.4230%" y="517" width="0.0229%" height="15" fill="rgb(235,184,23)" fg:x="67638" fg:w="27"/><text x="57.6730%" y="527.50"></text></g><g><title>alloc::alloc::exchange_malloc (18 samples, 0.02%)</title><rect x="57.4307%" y="501" width="0.0153%" height="15" fill="rgb(227,226,48)" fg:x="67647" fg:w="18"/><text x="57.6807%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (18 samples, 0.02%)</title><rect x="57.4307%" y="485" width="0.0153%" height="15" fill="rgb(206,150,11)" fg:x="67647" fg:w="18"/><text x="57.6807%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (18 samples, 0.02%)</title><rect x="57.4307%" y="469" width="0.0153%" height="15" fill="rgb(254,2,33)" fg:x="67647" fg:w="18"/><text x="57.6807%" y="479.50"></text></g><g><title>alloc::alloc::alloc (18 samples, 0.02%)</title><rect x="57.4307%" y="453" width="0.0153%" height="15" fill="rgb(243,160,20)" fg:x="67647" fg:w="18"/><text x="57.6807%" y="463.50"></text></g><g><title>__rg_alloc (18 samples, 0.02%)</title><rect x="57.4307%" y="437" width="0.0153%" height="15" fill="rgb(218,208,30)" fg:x="67647" fg:w="18"/><text x="57.6807%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (18 samples, 0.02%)</title><rect x="57.4307%" y="421" width="0.0153%" height="15" fill="rgb(224,120,49)" fg:x="67647" fg:w="18"/><text x="57.6807%" y="431.50"></text></g><g><title>sn_rust_alloc (17 samples, 0.01%)</title><rect x="57.4315%" y="405" width="0.0144%" height="15" fill="rgb(246,12,2)" fg:x="67648" fg:w="17"/><text x="57.6815%" y="415.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (151 samples, 0.13%)</title><rect x="57.4476%" y="485" width="0.1282%" height="15" fill="rgb(236,117,3)" fg:x="67667" fg:w="151"/><text x="57.6976%" y="495.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (151 samples, 0.13%)</title><rect x="57.4476%" y="469" width="0.1282%" height="15" fill="rgb(216,128,52)" fg:x="67667" fg:w="151"/><text x="57.6976%" y="479.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (207 samples, 0.18%)</title><rect x="57.4128%" y="629" width="0.1757%" height="15" fill="rgb(246,145,19)" fg:x="67626" fg:w="207"/><text x="57.6628%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (207 samples, 0.18%)</title><rect x="57.4128%" y="613" width="0.1757%" height="15" fill="rgb(222,11,46)" fg:x="67626" fg:w="207"/><text x="57.6628%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (205 samples, 0.17%)</title><rect x="57.4145%" y="597" width="0.1740%" height="15" fill="rgb(245,82,36)" fg:x="67628" fg:w="205"/><text x="57.6645%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (204 samples, 0.17%)</title><rect x="57.4154%" y="581" width="0.1732%" height="15" fill="rgb(250,73,51)" fg:x="67629" fg:w="204"/><text x="57.6654%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (204 samples, 0.17%)</title><rect x="57.4154%" y="565" width="0.1732%" height="15" fill="rgb(221,189,23)" fg:x="67629" fg:w="204"/><text x="57.6654%" y="575.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::iter (168 samples, 0.14%)</title><rect x="57.4459%" y="549" width="0.1426%" height="15" fill="rgb(210,33,7)" fg:x="67665" fg:w="168"/><text x="57.6959%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (167 samples, 0.14%)</title><rect x="57.4468%" y="533" width="0.1418%" height="15" fill="rgb(210,107,22)" fg:x="67666" fg:w="167"/><text x="57.6968%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (167 samples, 0.14%)</title><rect x="57.4468%" y="517" width="0.1418%" height="15" fill="rgb(222,116,37)" fg:x="67666" fg:w="167"/><text x="57.6968%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (166 samples, 0.14%)</title><rect x="57.4476%" y="501" width="0.1409%" height="15" fill="rgb(254,17,48)" fg:x="67667" fg:w="166"/><text x="57.6976%" y="511.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_full (15 samples, 0.01%)</title><rect x="57.5758%" y="485" width="0.0127%" height="15" fill="rgb(224,36,32)" fg:x="67818" fg:w="15"/><text x="57.8258%" y="495.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::len (101 samples, 0.09%)</title><rect x="57.5886%" y="629" width="0.0857%" height="15" fill="rgb(232,90,46)" fg:x="67833" fg:w="101"/><text x="57.8386%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::len (91 samples, 0.08%)</title><rect x="57.5971%" y="613" width="0.0773%" height="15" fill="rgb(241,66,40)" fg:x="67843" fg:w="91"/><text x="57.8471%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (91 samples, 0.08%)</title><rect x="57.5971%" y="597" width="0.0773%" height="15" fill="rgb(249,184,29)" fg:x="67843" fg:w="91"/><text x="57.8471%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (91 samples, 0.08%)</title><rect x="57.5971%" y="581" width="0.0773%" height="15" fill="rgb(231,181,1)" fg:x="67843" fg:w="91"/><text x="57.8471%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::len::{{closure}} (91 samples, 0.08%)</title><rect x="57.5971%" y="565" width="0.0773%" height="15" fill="rgb(224,94,2)" fg:x="67843" fg:w="91"/><text x="57.8471%" y="575.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::len (91 samples, 0.08%)</title><rect x="57.5971%" y="549" width="0.0773%" height="15" fill="rgb(229,170,15)" fg:x="67843" fg:w="91"/><text x="57.8471%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt; (58 samples, 0.05%)</title><rect x="57.6743%" y="629" width="0.0492%" height="15" fill="rgb(240,127,35)" fg:x="67934" fg:w="58"/><text x="57.9243%" y="639.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (58 samples, 0.05%)</title><rect x="57.6743%" y="613" width="0.0492%" height="15" fill="rgb(248,196,34)" fg:x="67934" fg:w="58"/><text x="57.9243%" y="623.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (58 samples, 0.05%)</title><rect x="57.6743%" y="597" width="0.0492%" height="15" fill="rgb(236,137,7)" fg:x="67934" fg:w="58"/><text x="57.9243%" y="607.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (57 samples, 0.05%)</title><rect x="57.6752%" y="581" width="0.0484%" height="15" fill="rgb(235,127,16)" fg:x="67935" fg:w="57"/><text x="57.9252%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (57 samples, 0.05%)</title><rect x="57.6752%" y="565" width="0.0484%" height="15" fill="rgb(250,192,54)" fg:x="67935" fg:w="57"/><text x="57.9252%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (57 samples, 0.05%)</title><rect x="57.6752%" y="549" width="0.0484%" height="15" fill="rgb(218,98,20)" fg:x="67935" fg:w="57"/><text x="57.9252%" y="559.50"></text></g><g><title>sn_rust_dealloc (51 samples, 0.04%)</title><rect x="57.6803%" y="533" width="0.0433%" height="15" fill="rgb(230,176,47)" fg:x="67941" fg:w="51"/><text x="57.9303%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (46 samples, 0.04%)</title><rect x="57.8976%" y="405" width="0.0391%" height="15" fill="rgb(244,2,33)" fg:x="68197" fg:w="46"/><text x="58.1476%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (46 samples, 0.04%)</title><rect x="57.8976%" y="389" width="0.0391%" height="15" fill="rgb(231,100,17)" fg:x="68197" fg:w="46"/><text x="58.1476%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (60 samples, 0.05%)</title><rect x="57.8934%" y="437" width="0.0509%" height="15" fill="rgb(245,23,12)" fg:x="68192" fg:w="60"/><text x="58.1434%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (56 samples, 0.05%)</title><rect x="57.8967%" y="421" width="0.0475%" height="15" fill="rgb(249,55,22)" fg:x="68196" fg:w="56"/><text x="58.1467%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (896 samples, 0.76%)</title><rect x="57.9443%" y="437" width="0.7607%" height="15" fill="rgb(207,134,9)" fg:x="68252" fg:w="896"/><text x="58.1943%" y="447.50"></text></g><g><title>[libc-2.31.so] (856 samples, 0.73%)</title><rect x="57.9782%" y="421" width="0.7267%" height="15" fill="rgb(218,134,0)" fg:x="68292" fg:w="856"/><text x="58.2282%" y="431.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (965 samples, 0.82%)</title><rect x="57.8883%" y="533" width="0.8193%" height="15" fill="rgb(213,212,33)" fg:x="68186" fg:w="965"/><text x="58.1383%" y="543.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (965 samples, 0.82%)</title><rect x="57.8883%" y="517" width="0.8193%" height="15" fill="rgb(252,106,18)" fg:x="68186" fg:w="965"/><text x="58.1383%" y="527.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (965 samples, 0.82%)</title><rect x="57.8883%" y="501" width="0.8193%" height="15" fill="rgb(208,126,42)" fg:x="68186" fg:w="965"/><text x="58.1383%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (965 samples, 0.82%)</title><rect x="57.8883%" y="485" width="0.8193%" height="15" fill="rgb(246,175,29)" fg:x="68186" fg:w="965"/><text x="58.1383%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (965 samples, 0.82%)</title><rect x="57.8883%" y="469" width="0.8193%" height="15" fill="rgb(215,13,50)" fg:x="68186" fg:w="965"/><text x="58.1383%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (965 samples, 0.82%)</title><rect x="57.8883%" y="453" width="0.8193%" height="15" fill="rgb(216,172,15)" fg:x="68186" fg:w="965"/><text x="58.1383%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (25 samples, 0.02%)</title><rect x="58.8476%" y="389" width="0.0212%" height="15" fill="rgb(212,103,13)" fg:x="69316" fg:w="25"/><text x="59.0976%" y="399.50"></text></g><g><title>[libc-2.31.so] (90 samples, 0.08%)</title><rect x="59.1201%" y="213" width="0.0764%" height="15" fill="rgb(231,171,36)" fg:x="69637" fg:w="90"/><text x="59.3701%" y="223.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (26 samples, 0.02%)</title><rect x="59.2033%" y="213" width="0.0221%" height="15" fill="rgb(250,123,20)" fg:x="69735" fg:w="26"/><text x="59.4533%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (383 samples, 0.33%)</title><rect x="58.9172%" y="309" width="0.3252%" height="15" fill="rgb(212,53,50)" fg:x="69398" fg:w="383"/><text x="59.1672%" y="319.50"></text></g><g><title>alloc::alloc::Global::grow_impl (383 samples, 0.33%)</title><rect x="58.9172%" y="293" width="0.3252%" height="15" fill="rgb(243,54,12)" fg:x="69398" fg:w="383"/><text x="59.1672%" y="303.50"></text></g><g><title>alloc::alloc::realloc (383 samples, 0.33%)</title><rect x="58.9172%" y="277" width="0.3252%" height="15" fill="rgb(234,101,34)" fg:x="69398" fg:w="383"/><text x="59.1672%" y="287.50"></text></g><g><title>__rg_realloc (383 samples, 0.33%)</title><rect x="58.9172%" y="261" width="0.3252%" height="15" fill="rgb(254,67,22)" fg:x="69398" fg:w="383"/><text x="59.1672%" y="271.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (383 samples, 0.33%)</title><rect x="58.9172%" y="245" width="0.3252%" height="15" fill="rgb(250,35,47)" fg:x="69398" fg:w="383"/><text x="59.1672%" y="255.50"></text></g><g><title>sn_rust_realloc (383 samples, 0.33%)</title><rect x="58.9172%" y="229" width="0.3252%" height="15" fill="rgb(226,126,38)" fg:x="69398" fg:w="383"/><text x="59.1672%" y="239.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (20 samples, 0.02%)</title><rect x="59.2254%" y="213" width="0.0170%" height="15" fill="rgb(216,138,53)" fg:x="69761" fg:w="20"/><text x="59.4754%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (398 samples, 0.34%)</title><rect x="58.9053%" y="325" width="0.3379%" height="15" fill="rgb(246,199,43)" fg:x="69384" fg:w="398"/><text x="59.1553%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (443 samples, 0.38%)</title><rect x="58.8688%" y="389" width="0.3761%" height="15" fill="rgb(232,125,11)" fg:x="69341" fg:w="443"/><text x="59.1188%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (435 samples, 0.37%)</title><rect x="58.8756%" y="373" width="0.3693%" height="15" fill="rgb(218,219,45)" fg:x="69349" fg:w="435"/><text x="59.1256%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (424 samples, 0.36%)</title><rect x="58.8850%" y="357" width="0.3600%" height="15" fill="rgb(216,102,54)" fg:x="69360" fg:w="424"/><text x="59.1350%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (424 samples, 0.36%)</title><rect x="58.8850%" y="341" width="0.3600%" height="15" fill="rgb(250,228,7)" fg:x="69360" fg:w="424"/><text x="59.1350%" y="351.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (490 samples, 0.42%)</title><rect x="58.8442%" y="501" width="0.4160%" height="15" fill="rgb(226,125,25)" fg:x="69312" fg:w="490"/><text x="59.0942%" y="511.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (490 samples, 0.42%)</title><rect x="58.8442%" y="485" width="0.4160%" height="15" fill="rgb(224,165,27)" fg:x="69312" fg:w="490"/><text x="59.0942%" y="495.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (490 samples, 0.42%)</title><rect x="58.8442%" y="469" width="0.4160%" height="15" fill="rgb(233,86,3)" fg:x="69312" fg:w="490"/><text x="59.0942%" y="479.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (490 samples, 0.42%)</title><rect x="58.8442%" y="453" width="0.4160%" height="15" fill="rgb(228,116,20)" fg:x="69312" fg:w="490"/><text x="59.0942%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (490 samples, 0.42%)</title><rect x="58.8442%" y="437" width="0.4160%" height="15" fill="rgb(209,192,17)" fg:x="69312" fg:w="490"/><text x="59.0942%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (490 samples, 0.42%)</title><rect x="58.8442%" y="421" width="0.4160%" height="15" fill="rgb(224,88,34)" fg:x="69312" fg:w="490"/><text x="59.0942%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (490 samples, 0.42%)</title><rect x="58.8442%" y="405" width="0.4160%" height="15" fill="rgb(233,38,6)" fg:x="69312" fg:w="490"/><text x="59.0942%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (18 samples, 0.02%)</title><rect x="59.2449%" y="389" width="0.0153%" height="15" fill="rgb(212,59,30)" fg:x="69784" fg:w="18"/><text x="59.4949%" y="399.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeMap&gt;::serialize_key (1,973 samples, 1.68%)</title><rect x="57.7669%" y="613" width="1.6750%" height="15" fill="rgb(213,80,3)" fg:x="68043" fg:w="1973"/><text x="58.0169%" y="623.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeSeq&gt;::serialize_element (1,973 samples, 1.68%)</title><rect x="57.7669%" y="597" width="1.6750%" height="15" fill="rgb(251,178,7)" fg:x="68043" fg:w="1973"/><text x="58.0169%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for str&gt;::serialize (1,918 samples, 1.63%)</title><rect x="57.8135%" y="581" width="1.6283%" height="15" fill="rgb(213,154,26)" fg:x="68098" fg:w="1918"/><text x="58.0635%" y="591.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_str (1,917 samples, 1.63%)</title><rect x="57.8144%" y="565" width="1.6275%" height="15" fill="rgb(238,165,49)" fg:x="68099" fg:w="1917"/><text x="58.0644%" y="575.50"></text></g><g><title>rmp::encode::str::write_str (1,831 samples, 1.55%)</title><rect x="57.8874%" y="549" width="1.5545%" height="15" fill="rgb(248,91,46)" fg:x="68185" fg:w="1831"/><text x="58.1374%" y="559.50"></text></g><g><title>rmp::encode::str::write_str_len (865 samples, 0.73%)</title><rect x="58.7075%" y="533" width="0.7344%" height="15" fill="rgb(244,21,52)" fg:x="69151" fg:w="865"/><text x="58.9575%" y="543.50"></text></g><g><title>rmp::encode::write_marker (756 samples, 0.64%)</title><rect x="58.8001%" y="517" width="0.6418%" height="15" fill="rgb(247,122,20)" fg:x="69260" fg:w="756"/><text x="59.0501%" y="527.50"></text></g><g><title>rmp::marker::Marker::to_u8 (214 samples, 0.18%)</title><rect x="59.2602%" y="501" width="0.1817%" height="15" fill="rgb(218,27,9)" fg:x="69802" fg:w="214"/><text x="59.5102%" y="511.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (12 samples, 0.01%)</title><rect x="59.7212%" y="517" width="0.0102%" height="15" fill="rgb(246,7,6)" fg:x="70345" fg:w="12"/><text x="59.9712%" y="527.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (12 samples, 0.01%)</title><rect x="59.7212%" y="501" width="0.0102%" height="15" fill="rgb(227,135,54)" fg:x="70345" fg:w="12"/><text x="59.9712%" y="511.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (12 samples, 0.01%)</title><rect x="59.7212%" y="485" width="0.0102%" height="15" fill="rgb(247,14,11)" fg:x="70345" fg:w="12"/><text x="59.9712%" y="495.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (12 samples, 0.01%)</title><rect x="59.7212%" y="469" width="0.0102%" height="15" fill="rgb(206,149,34)" fg:x="70345" fg:w="12"/><text x="59.9712%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (12 samples, 0.01%)</title><rect x="59.7212%" y="453" width="0.0102%" height="15" fill="rgb(227,228,4)" fg:x="70345" fg:w="12"/><text x="59.9712%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (12 samples, 0.01%)</title><rect x="59.7212%" y="437" width="0.0102%" height="15" fill="rgb(238,218,28)" fg:x="70345" fg:w="12"/><text x="59.9712%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (12 samples, 0.01%)</title><rect x="59.7212%" y="421" width="0.0102%" height="15" fill="rgb(252,86,40)" fg:x="70345" fg:w="12"/><text x="59.9712%" y="431.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_bool (44 samples, 0.04%)</title><rect x="59.7042%" y="565" width="0.0374%" height="15" fill="rgb(251,225,11)" fg:x="70325" fg:w="44"/><text x="59.9542%" y="575.50"></text></g><g><title>rmp::encode::write_bool (39 samples, 0.03%)</title><rect x="59.7085%" y="549" width="0.0331%" height="15" fill="rgb(206,46,49)" fg:x="70330" fg:w="39"/><text x="59.9585%" y="559.50"></text></g><g><title>rmp::encode::write_marker (33 samples, 0.03%)</title><rect x="59.7136%" y="533" width="0.0280%" height="15" fill="rgb(245,128,24)" fg:x="70336" fg:w="33"/><text x="59.9636%" y="543.50"></text></g><g><title>rmp::marker::Marker::to_u8 (12 samples, 0.01%)</title><rect x="59.7314%" y="517" width="0.0102%" height="15" fill="rgb(219,177,34)" fg:x="70357" fg:w="12"/><text x="59.9814%" y="527.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (17 samples, 0.01%)</title><rect x="59.7662%" y="485" width="0.0144%" height="15" fill="rgb(218,60,48)" fg:x="70398" fg:w="17"/><text x="60.0162%" y="495.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (17 samples, 0.01%)</title><rect x="59.7662%" y="469" width="0.0144%" height="15" fill="rgb(221,11,5)" fg:x="70398" fg:w="17"/><text x="60.0162%" y="479.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (17 samples, 0.01%)</title><rect x="59.7662%" y="453" width="0.0144%" height="15" fill="rgb(220,148,13)" fg:x="70398" fg:w="17"/><text x="60.0162%" y="463.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (17 samples, 0.01%)</title><rect x="59.7662%" y="437" width="0.0144%" height="15" fill="rgb(210,16,3)" fg:x="70398" fg:w="17"/><text x="60.0162%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (17 samples, 0.01%)</title><rect x="59.7662%" y="421" width="0.0144%" height="15" fill="rgb(236,80,2)" fg:x="70398" fg:w="17"/><text x="60.0162%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (17 samples, 0.01%)</title><rect x="59.7662%" y="405" width="0.0144%" height="15" fill="rgb(239,129,19)" fg:x="70398" fg:w="17"/><text x="60.0162%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (17 samples, 0.01%)</title><rect x="59.7662%" y="389" width="0.0144%" height="15" fill="rgb(220,106,35)" fg:x="70398" fg:w="17"/><text x="60.0162%" y="399.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_seq::{{closure}} (47 samples, 0.04%)</title><rect x="59.7416%" y="533" width="0.0399%" height="15" fill="rgb(252,139,45)" fg:x="70369" fg:w="47"/><text x="59.9916%" y="543.50"></text></g><g><title>rmp::encode::write_array_len (41 samples, 0.03%)</title><rect x="59.7467%" y="517" width="0.0348%" height="15" fill="rgb(229,8,36)" fg:x="70375" fg:w="41"/><text x="59.9967%" y="527.50"></text></g><g><title>rmp::encode::write_marker (22 samples, 0.02%)</title><rect x="59.7628%" y="501" width="0.0187%" height="15" fill="rgb(230,126,33)" fg:x="70394" fg:w="22"/><text x="60.0128%" y="511.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_seq (52 samples, 0.04%)</title><rect x="59.7416%" y="565" width="0.0441%" height="15" fill="rgb(239,140,21)" fg:x="70369" fg:w="52"/><text x="59.9916%" y="575.50"></text></g><g><title>rmp_serde::encode::Serializer&lt;W,C&gt;::maybe_unknown_len_compound (52 samples, 0.04%)</title><rect x="59.7416%" y="549" width="0.0441%" height="15" fill="rgb(254,104,9)" fg:x="70369" fg:w="52"/><text x="59.9916%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (42 samples, 0.04%)</title><rect x="59.8681%" y="405" width="0.0357%" height="15" fill="rgb(239,52,14)" fg:x="70518" fg:w="42"/><text x="60.1181%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (39 samples, 0.03%)</title><rect x="59.8706%" y="389" width="0.0331%" height="15" fill="rgb(208,227,44)" fg:x="70521" fg:w="39"/><text x="60.1206%" y="399.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (15 samples, 0.01%)</title><rect x="59.9114%" y="373" width="0.0127%" height="15" fill="rgb(246,18,19)" fg:x="70569" fg:w="15"/><text x="60.1614%" y="383.50"></text></g><g><title>[libc-2.31.so] (35 samples, 0.03%)</title><rect x="60.1448%" y="261" width="0.0297%" height="15" fill="rgb(235,228,25)" fg:x="70844" fg:w="35"/><text x="60.3948%" y="271.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (21 samples, 0.02%)</title><rect x="60.1762%" y="261" width="0.0178%" height="15" fill="rgb(240,156,20)" fg:x="70881" fg:w="21"/><text x="60.4262%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (307 samples, 0.26%)</title><rect x="59.9402%" y="357" width="0.2606%" height="15" fill="rgb(224,8,20)" fg:x="70603" fg:w="307"/><text x="60.1902%" y="367.50"></text></g><g><title>alloc::alloc::Global::grow_impl (307 samples, 0.26%)</title><rect x="59.9402%" y="341" width="0.2606%" height="15" fill="rgb(214,12,52)" fg:x="70603" fg:w="307"/><text x="60.1902%" y="351.50"></text></g><g><title>alloc::alloc::realloc (306 samples, 0.26%)</title><rect x="59.9411%" y="325" width="0.2598%" height="15" fill="rgb(211,220,47)" fg:x="70604" fg:w="306"/><text x="60.1911%" y="335.50"></text></g><g><title>__rg_realloc (306 samples, 0.26%)</title><rect x="59.9411%" y="309" width="0.2598%" height="15" fill="rgb(250,173,5)" fg:x="70604" fg:w="306"/><text x="60.1911%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (306 samples, 0.26%)</title><rect x="59.9411%" y="293" width="0.2598%" height="15" fill="rgb(250,125,52)" fg:x="70604" fg:w="306"/><text x="60.1911%" y="303.50"></text></g><g><title>sn_rust_realloc (306 samples, 0.26%)</title><rect x="59.9411%" y="277" width="0.2598%" height="15" fill="rgb(209,133,18)" fg:x="70604" fg:w="306"/><text x="60.1911%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (323 samples, 0.27%)</title><rect x="59.9292%" y="373" width="0.2742%" height="15" fill="rgb(216,173,22)" fg:x="70590" fg:w="323"/><text x="60.1792%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (412 samples, 0.35%)</title><rect x="59.8596%" y="437" width="0.3498%" height="15" fill="rgb(205,3,22)" fg:x="70508" fg:w="412"/><text x="60.1096%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (410 samples, 0.35%)</title><rect x="59.8613%" y="421" width="0.3481%" height="15" fill="rgb(248,22,20)" fg:x="70510" fg:w="410"/><text x="60.1113%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (360 samples, 0.31%)</title><rect x="59.9037%" y="405" width="0.3056%" height="15" fill="rgb(233,6,29)" fg:x="70560" fg:w="360"/><text x="60.1537%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (360 samples, 0.31%)</title><rect x="59.9037%" y="389" width="0.3056%" height="15" fill="rgb(240,22,54)" fg:x="70560" fg:w="360"/><text x="60.1537%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (475 samples, 0.40%)</title><rect x="60.2094%" y="437" width="0.4033%" height="15" fill="rgb(231,133,32)" fg:x="70920" fg:w="475"/><text x="60.4594%" y="447.50"></text></g><g><title>[libc-2.31.so] (452 samples, 0.38%)</title><rect x="60.2289%" y="421" width="0.3837%" height="15" fill="rgb(248,193,4)" fg:x="70943" fg:w="452"/><text x="60.4789%" y="431.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (916 samples, 0.78%)</title><rect x="59.8367%" y="533" width="0.7777%" height="15" fill="rgb(211,178,46)" fg:x="70481" fg:w="916"/><text x="60.0867%" y="543.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (916 samples, 0.78%)</title><rect x="59.8367%" y="517" width="0.7777%" height="15" fill="rgb(224,5,42)" fg:x="70481" fg:w="916"/><text x="60.0867%" y="527.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (916 samples, 0.78%)</title><rect x="59.8367%" y="501" width="0.7777%" height="15" fill="rgb(239,176,25)" fg:x="70481" fg:w="916"/><text x="60.0867%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (916 samples, 0.78%)</title><rect x="59.8367%" y="485" width="0.7777%" height="15" fill="rgb(245,187,50)" fg:x="70481" fg:w="916"/><text x="60.0867%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (916 samples, 0.78%)</title><rect x="59.8367%" y="469" width="0.7777%" height="15" fill="rgb(248,24,15)" fg:x="70481" fg:w="916"/><text x="60.0867%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (916 samples, 0.78%)</title><rect x="59.8367%" y="453" width="0.7777%" height="15" fill="rgb(205,166,13)" fg:x="70481" fg:w="916"/><text x="60.0867%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (30 samples, 0.03%)</title><rect x="60.7213%" y="389" width="0.0255%" height="15" fill="rgb(208,114,23)" fg:x="71523" fg:w="30"/><text x="60.9713%" y="399.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (77 samples, 0.07%)</title><rect x="60.7060%" y="501" width="0.0654%" height="15" fill="rgb(239,127,18)" fg:x="71505" fg:w="77"/><text x="60.9560%" y="511.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (77 samples, 0.07%)</title><rect x="60.7060%" y="485" width="0.0654%" height="15" fill="rgb(219,154,28)" fg:x="71505" fg:w="77"/><text x="60.9560%" y="495.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (77 samples, 0.07%)</title><rect x="60.7060%" y="469" width="0.0654%" height="15" fill="rgb(225,157,23)" fg:x="71505" fg:w="77"/><text x="60.9560%" y="479.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (77 samples, 0.07%)</title><rect x="60.7060%" y="453" width="0.0654%" height="15" fill="rgb(219,8,6)" fg:x="71505" fg:w="77"/><text x="60.9560%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (77 samples, 0.07%)</title><rect x="60.7060%" y="437" width="0.0654%" height="15" fill="rgb(212,47,6)" fg:x="71505" fg:w="77"/><text x="60.9560%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (77 samples, 0.07%)</title><rect x="60.7060%" y="421" width="0.0654%" height="15" fill="rgb(224,190,4)" fg:x="71505" fg:w="77"/><text x="60.9560%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (77 samples, 0.07%)</title><rect x="60.7060%" y="405" width="0.0654%" height="15" fill="rgb(239,183,29)" fg:x="71505" fg:w="77"/><text x="60.9560%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (29 samples, 0.02%)</title><rect x="60.7468%" y="389" width="0.0246%" height="15" fill="rgb(213,57,7)" fg:x="71553" fg:w="29"/><text x="60.9968%" y="399.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_str (1,226 samples, 1.04%)</title><rect x="59.7857%" y="565" width="1.0408%" height="15" fill="rgb(216,148,1)" fg:x="70421" fg:w="1226"/><text x="60.0357%" y="575.50"></text></g><g><title>rmp::encode::str::write_str (1,166 samples, 0.99%)</title><rect x="59.8367%" y="549" width="0.9899%" height="15" fill="rgb(236,182,29)" fg:x="70481" fg:w="1166"/><text x="60.0867%" y="559.50"></text></g><g><title>rmp::encode::str::write_str_len (250 samples, 0.21%)</title><rect x="60.6143%" y="533" width="0.2122%" height="15" fill="rgb(244,120,48)" fg:x="71397" fg:w="250"/><text x="60.8643%" y="543.50"></text></g><g><title>rmp::encode::write_marker (169 samples, 0.14%)</title><rect x="60.6831%" y="517" width="0.1435%" height="15" fill="rgb(206,71,34)" fg:x="71478" fg:w="169"/><text x="60.9331%" y="527.50"></text></g><g><title>rmp::marker::Marker::to_u8 (65 samples, 0.06%)</title><rect x="60.7714%" y="501" width="0.0552%" height="15" fill="rgb(242,32,6)" fg:x="71582" fg:w="65"/><text x="61.0214%" y="511.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_u64 (44 samples, 0.04%)</title><rect x="60.8266%" y="565" width="0.0374%" height="15" fill="rgb(241,35,3)" fg:x="71647" fg:w="44"/><text x="61.0766%" y="575.50"></text></g><g><title>rmp::encode::uint::write_uint (36 samples, 0.03%)</title><rect x="60.8334%" y="549" width="0.0306%" height="15" fill="rgb(222,62,19)" fg:x="71655" fg:w="36"/><text x="61.0834%" y="559.50"></text></g><g><title>rmp::encode::uint::write_pfix (31 samples, 0.03%)</title><rect x="60.8376%" y="533" width="0.0263%" height="15" fill="rgb(223,110,41)" fg:x="71660" fg:w="31"/><text x="61.0876%" y="543.50"></text></g><g><title>rmp::encode::write_marker (23 samples, 0.02%)</title><rect x="60.8444%" y="517" width="0.0195%" height="15" fill="rgb(208,224,4)" fg:x="71668" fg:w="23"/><text x="61.0944%" y="527.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (35 samples, 0.03%)</title><rect x="60.8639%" y="565" width="0.0297%" height="15" fill="rgb(241,137,19)" fg:x="71691" fg:w="35"/><text x="61.1139%" y="575.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (108 samples, 0.09%)</title><rect x="60.8936%" y="565" width="0.0917%" height="15" fill="rgb(244,24,17)" fg:x="71726" fg:w="108"/><text x="61.1436%" y="575.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (43 samples, 0.04%)</title><rect x="60.9853%" y="565" width="0.0365%" height="15" fill="rgb(245,178,49)" fg:x="71834" fg:w="43"/><text x="61.2353%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (32 samples, 0.03%)</title><rect x="62.0245%" y="405" width="0.0272%" height="15" fill="rgb(219,160,38)" fg:x="73058" fg:w="32"/><text x="62.2745%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (23 samples, 0.02%)</title><rect x="62.0321%" y="389" width="0.0195%" height="15" fill="rgb(228,137,14)" fg:x="73067" fg:w="23"/><text x="62.2821%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (18 samples, 0.02%)</title><rect x="62.0364%" y="373" width="0.0153%" height="15" fill="rgb(237,134,11)" fg:x="73072" fg:w="18"/><text x="62.2864%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (15 samples, 0.01%)</title><rect x="62.0389%" y="357" width="0.0127%" height="15" fill="rgb(211,126,44)" fg:x="73075" fg:w="15"/><text x="62.2889%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (137 samples, 0.12%)</title><rect x="62.0516%" y="405" width="0.1163%" height="15" fill="rgb(226,171,33)" fg:x="73090" fg:w="137"/><text x="62.3016%" y="415.50"></text></g><g><title>[libc-2.31.so] (124 samples, 0.11%)</title><rect x="62.0627%" y="389" width="0.1053%" height="15" fill="rgb(253,99,13)" fg:x="73103" fg:w="124"/><text x="62.3127%" y="399.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (181 samples, 0.15%)</title><rect x="62.0160%" y="501" width="0.1537%" height="15" fill="rgb(244,48,7)" fg:x="73048" fg:w="181"/><text x="62.2660%" y="511.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (181 samples, 0.15%)</title><rect x="62.0160%" y="485" width="0.1537%" height="15" fill="rgb(244,217,54)" fg:x="73048" fg:w="181"/><text x="62.2660%" y="495.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (181 samples, 0.15%)</title><rect x="62.0160%" y="469" width="0.1537%" height="15" fill="rgb(224,15,18)" fg:x="73048" fg:w="181"/><text x="62.2660%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (181 samples, 0.15%)</title><rect x="62.0160%" y="453" width="0.1537%" height="15" fill="rgb(244,99,12)" fg:x="73048" fg:w="181"/><text x="62.2660%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (181 samples, 0.15%)</title><rect x="62.0160%" y="437" width="0.1537%" height="15" fill="rgb(233,226,8)" fg:x="73048" fg:w="181"/><text x="62.2660%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (181 samples, 0.15%)</title><rect x="62.0160%" y="421" width="0.1537%" height="15" fill="rgb(229,211,3)" fg:x="73048" fg:w="181"/><text x="62.2660%" y="431.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (48 samples, 0.04%)</title><rect x="62.2087%" y="469" width="0.0408%" height="15" fill="rgb(216,140,21)" fg:x="73275" fg:w="48"/><text x="62.4587%" y="479.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (48 samples, 0.04%)</title><rect x="62.2087%" y="453" width="0.0408%" height="15" fill="rgb(234,122,30)" fg:x="73275" fg:w="48"/><text x="62.4587%" y="463.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (48 samples, 0.04%)</title><rect x="62.2087%" y="437" width="0.0408%" height="15" fill="rgb(236,25,46)" fg:x="73275" fg:w="48"/><text x="62.4587%" y="447.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (48 samples, 0.04%)</title><rect x="62.2087%" y="421" width="0.0408%" height="15" fill="rgb(217,52,54)" fg:x="73275" fg:w="48"/><text x="62.4587%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (48 samples, 0.04%)</title><rect x="62.2087%" y="405" width="0.0408%" height="15" fill="rgb(222,29,26)" fg:x="73275" fg:w="48"/><text x="62.4587%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (48 samples, 0.04%)</title><rect x="62.2087%" y="389" width="0.0408%" height="15" fill="rgb(216,177,29)" fg:x="73275" fg:w="48"/><text x="62.4587%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (48 samples, 0.04%)</title><rect x="62.2087%" y="373" width="0.0408%" height="15" fill="rgb(247,136,51)" fg:x="73275" fg:w="48"/><text x="62.4587%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (38 samples, 0.03%)</title><rect x="62.2172%" y="357" width="0.0323%" height="15" fill="rgb(231,47,47)" fg:x="73285" fg:w="38"/><text x="62.4672%" y="367.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_str (344 samples, 0.29%)</title><rect x="61.9981%" y="533" width="0.2920%" height="15" fill="rgb(211,192,36)" fg:x="73027" fg:w="344"/><text x="62.2481%" y="543.50"></text></g><g><title>rmp::encode::str::write_str (323 samples, 0.27%)</title><rect x="62.0160%" y="517" width="0.2742%" height="15" fill="rgb(229,156,32)" fg:x="73048" fg:w="323"/><text x="62.2660%" y="527.50"></text></g><g><title>rmp::encode::str::write_str_len (142 samples, 0.12%)</title><rect x="62.1696%" y="501" width="0.1206%" height="15" fill="rgb(248,213,20)" fg:x="73229" fg:w="142"/><text x="62.4196%" y="511.50"></text></g><g><title>rmp::encode::write_marker (110 samples, 0.09%)</title><rect x="62.1968%" y="485" width="0.0934%" height="15" fill="rgb(217,64,7)" fg:x="73261" fg:w="110"/><text x="62.4468%" y="495.50"></text></g><g><title>rmp::marker::Marker::to_u8 (48 samples, 0.04%)</title><rect x="62.2494%" y="469" width="0.0408%" height="15" fill="rgb(232,142,8)" fg:x="73323" fg:w="48"/><text x="62.4994%" y="479.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (34 samples, 0.03%)</title><rect x="62.2944%" y="517" width="0.0289%" height="15" fill="rgb(224,92,44)" fg:x="73376" fg:w="34"/><text x="62.5444%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (27 samples, 0.02%)</title><rect x="62.4591%" y="357" width="0.0229%" height="15" fill="rgb(214,169,17)" fg:x="73570" fg:w="27"/><text x="62.7091%" y="367.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (45 samples, 0.04%)</title><rect x="62.4591%" y="469" width="0.0382%" height="15" fill="rgb(210,59,37)" fg:x="73570" fg:w="45"/><text x="62.7091%" y="479.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (45 samples, 0.04%)</title><rect x="62.4591%" y="453" width="0.0382%" height="15" fill="rgb(214,116,48)" fg:x="73570" fg:w="45"/><text x="62.7091%" y="463.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (45 samples, 0.04%)</title><rect x="62.4591%" y="437" width="0.0382%" height="15" fill="rgb(244,191,6)" fg:x="73570" fg:w="45"/><text x="62.7091%" y="447.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (45 samples, 0.04%)</title><rect x="62.4591%" y="421" width="0.0382%" height="15" fill="rgb(241,50,52)" fg:x="73570" fg:w="45"/><text x="62.7091%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (45 samples, 0.04%)</title><rect x="62.4591%" y="405" width="0.0382%" height="15" fill="rgb(236,75,39)" fg:x="73570" fg:w="45"/><text x="62.7091%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (45 samples, 0.04%)</title><rect x="62.4591%" y="389" width="0.0382%" height="15" fill="rgb(236,99,0)" fg:x="73570" fg:w="45"/><text x="62.7091%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (45 samples, 0.04%)</title><rect x="62.4591%" y="373" width="0.0382%" height="15" fill="rgb(207,202,15)" fg:x="73570" fg:w="45"/><text x="62.7091%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.01%)</title><rect x="62.4855%" y="357" width="0.0119%" height="15" fill="rgb(233,207,14)" fg:x="73601" fg:w="14"/><text x="62.7355%" y="367.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_u64 (353 samples, 0.30%)</title><rect x="62.2902%" y="533" width="0.2997%" height="15" fill="rgb(226,27,51)" fg:x="73371" fg:w="353"/><text x="62.5402%" y="543.50"></text></g><g><title>rmp::encode::uint::write_uint (314 samples, 0.27%)</title><rect x="62.3233%" y="517" width="0.2666%" height="15" fill="rgb(206,104,42)" fg:x="73410" fg:w="314"/><text x="62.5733%" y="527.50"></text></g><g><title>rmp::encode::uint::write_pfix (256 samples, 0.22%)</title><rect x="62.3725%" y="501" width="0.2173%" height="15" fill="rgb(212,225,4)" fg:x="73468" fg:w="256"/><text x="62.6225%" y="511.50"></text></g><g><title>rmp::encode::write_marker (192 samples, 0.16%)</title><rect x="62.4269%" y="485" width="0.1630%" height="15" fill="rgb(233,96,42)" fg:x="73532" fg:w="192"/><text x="62.6769%" y="495.50"></text></g><g><title>rmp::marker::Marker::to_u8 (109 samples, 0.09%)</title><rect x="62.4973%" y="469" width="0.0925%" height="15" fill="rgb(229,21,32)" fg:x="73615" fg:w="109"/><text x="62.7473%" y="479.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeSeq&gt;::serialize_element (1,924 samples, 1.63%)</title><rect x="61.0286%" y="565" width="1.6334%" height="15" fill="rgb(226,216,24)" fg:x="71885" fg:w="1924"/><text x="61.2786%" y="575.50"></text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (1,868 samples, 1.59%)</title><rect x="61.0762%" y="549" width="1.5859%" height="15" fill="rgb(221,163,17)" fg:x="71941" fg:w="1868"/><text x="61.3262%" y="559.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (85 samples, 0.07%)</title><rect x="62.5899%" y="533" width="0.0722%" height="15" fill="rgb(216,216,42)" fg:x="73724" fg:w="85"/><text x="62.8399%" y="543.50"></text></g><g><title>&lt;tremor_runtime::codec::msgpack::MsgPack as tremor_runtime::codec::Codec&gt;::encode (7,886 samples, 6.70%)</title><rect x="55.9679%" y="709" width="6.6950%" height="15" fill="rgb(240,118,7)" fg:x="65924" fg:w="7886"/><text x="56.2179%" y="719.50">&lt;tremor_r..</text></g><g><title>rmp_serde::encode::to_vec (7,886 samples, 6.70%)</title><rect x="55.9679%" y="693" width="6.6950%" height="15" fill="rgb(221,67,37)" fg:x="65924" fg:w="7886"/><text x="56.2179%" y="703.50">rmp_serde..</text></g><g><title>rmp_serde::encode::write (7,886 samples, 6.70%)</title><rect x="55.9679%" y="677" width="6.6950%" height="15" fill="rgb(241,32,44)" fg:x="65924" fg:w="7886"/><text x="56.2179%" y="687.50">rmp_serde..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (7,886 samples, 6.70%)</title><rect x="55.9679%" y="661" width="6.6950%" height="15" fill="rgb(235,204,43)" fg:x="65924" fg:w="7886"/><text x="56.2179%" y="671.50">serde::se..</text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (7,886 samples, 6.70%)</title><rect x="55.9679%" y="645" width="6.6950%" height="15" fill="rgb(213,116,10)" fg:x="65924" fg:w="7886"/><text x="56.2179%" y="655.50">tremor_va..</text></g><g><title>serde::ser::SerializeMap::serialize_entry (5,818 samples, 4.94%)</title><rect x="57.7236%" y="629" width="4.9393%" height="15" fill="rgb(239,15,48)" fg:x="67992" fg:w="5818"/><text x="57.9736%" y="639.50">serde:..</text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeMap&gt;::serialize_value (3,794 samples, 3.22%)</title><rect x="59.4419%" y="613" width="3.2210%" height="15" fill="rgb(207,123,36)" fg:x="70016" fg:w="3794"/><text x="59.6919%" y="623.50">&lt;rm..</text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeSeq&gt;::serialize_element (3,794 samples, 3.22%)</title><rect x="59.4419%" y="597" width="3.2210%" height="15" fill="rgb(209,103,30)" fg:x="70016" fg:w="3794"/><text x="59.6919%" y="607.50">&lt;rm..</text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (3,710 samples, 3.15%)</title><rect x="59.5132%" y="581" width="3.1497%" height="15" fill="rgb(238,100,19)" fg:x="70100" fg:w="3710"/><text x="59.7632%" y="591.50">tre..</text></g><g><title>alloc::alloc::exchange_malloc (34 samples, 0.03%)</title><rect x="62.6943%" y="693" width="0.0289%" height="15" fill="rgb(244,30,14)" fg:x="73847" fg:w="34"/><text x="62.9443%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (34 samples, 0.03%)</title><rect x="62.6943%" y="677" width="0.0289%" height="15" fill="rgb(249,174,6)" fg:x="73847" fg:w="34"/><text x="62.9443%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (34 samples, 0.03%)</title><rect x="62.6943%" y="661" width="0.0289%" height="15" fill="rgb(235,213,41)" fg:x="73847" fg:w="34"/><text x="62.9443%" y="671.50"></text></g><g><title>alloc::alloc::alloc (31 samples, 0.03%)</title><rect x="62.6969%" y="645" width="0.0263%" height="15" fill="rgb(213,118,6)" fg:x="73850" fg:w="31"/><text x="62.9469%" y="655.50"></text></g><g><title>__rg_alloc (31 samples, 0.03%)</title><rect x="62.6969%" y="629" width="0.0263%" height="15" fill="rgb(235,44,51)" fg:x="73850" fg:w="31"/><text x="62.9469%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (31 samples, 0.03%)</title><rect x="62.6969%" y="613" width="0.0263%" height="15" fill="rgb(217,9,53)" fg:x="73850" fg:w="31"/><text x="62.9469%" y="623.50"></text></g><g><title>sn_rust_alloc (31 samples, 0.03%)</title><rect x="62.6969%" y="597" width="0.0263%" height="15" fill="rgb(237,172,34)" fg:x="73850" fg:w="31"/><text x="62.9469%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (17 samples, 0.01%)</title><rect x="62.7402%" y="677" width="0.0144%" height="15" fill="rgb(206,206,11)" fg:x="73901" fg:w="17"/><text x="62.9902%" y="687.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (52 samples, 0.04%)</title><rect x="62.7639%" y="661" width="0.0441%" height="15" fill="rgb(214,149,29)" fg:x="73929" fg:w="52"/><text x="63.0139%" y="671.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (16 samples, 0.01%)</title><rect x="62.8259%" y="629" width="0.0136%" height="15" fill="rgb(208,123,3)" fg:x="74002" fg:w="16"/><text x="63.0759%" y="639.50"></text></g><g><title>core::cmp::PartialOrd::ge (16 samples, 0.01%)</title><rect x="62.8259%" y="613" width="0.0136%" height="15" fill="rgb(229,126,4)" fg:x="74002" fg:w="16"/><text x="63.0759%" y="623.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (16 samples, 0.01%)</title><rect x="62.8259%" y="597" width="0.0136%" height="15" fill="rgb(222,92,36)" fg:x="74002" fg:w="16"/><text x="63.0759%" y="607.50"></text></g><g><title>std::time::SystemTime::duration_since (96 samples, 0.08%)</title><rect x="62.7639%" y="677" width="0.0815%" height="15" fill="rgb(216,39,41)" fg:x="73929" fg:w="96"/><text x="63.0139%" y="687.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (44 samples, 0.04%)</title><rect x="62.8081%" y="661" width="0.0374%" height="15" fill="rgb(253,127,28)" fg:x="73981" fg:w="44"/><text x="63.0581%" y="671.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (44 samples, 0.04%)</title><rect x="62.8081%" y="645" width="0.0374%" height="15" fill="rgb(249,152,51)" fg:x="73981" fg:w="44"/><text x="63.0581%" y="655.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (11,825 samples, 10.04%)</title><rect x="53.0168%" y="1077" width="10.0391%" height="15" fill="rgb(209,123,42)" fg:x="62448" fg:w="11825"/><text x="53.2668%" y="1087.50">tremor_runtime:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,349 samples, 7.09%)</title><rect x="55.9679%" y="1061" width="7.0881%" height="15" fill="rgb(241,118,22)" fg:x="65924" fg:w="8349"/><text x="56.2179%" y="1071.50">&lt;core::fut..</text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (8,349 samples, 7.09%)</title><rect x="55.9679%" y="1045" width="7.0881%" height="15" fill="rgb(208,25,7)" fg:x="65924" fg:w="8349"/><text x="56.2179%" y="1055.50">tremor_run..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,349 samples, 7.09%)</title><rect x="55.9679%" y="1029" width="7.0881%" height="15" fill="rgb(243,144,39)" fg:x="65924" fg:w="8349"/><text x="56.2179%" y="1039.50">&lt;async_ffi..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,349 samples, 7.09%)</title><rect x="55.9679%" y="1013" width="7.0881%" height="15" fill="rgb(250,50,5)" fg:x="65924" fg:w="8349"/><text x="56.2179%" y="1023.50">&lt;async_ffi..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (8,349 samples, 7.09%)</title><rect x="55.9679%" y="997" width="7.0881%" height="15" fill="rgb(207,67,11)" fg:x="65924" fg:w="8349"/><text x="56.2179%" y="1007.50">&lt;core::tas..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (8,349 samples, 7.09%)</title><rect x="55.9679%" y="981" width="7.0881%" height="15" fill="rgb(245,204,40)" fg:x="65924" fg:w="8349"/><text x="56.2179%" y="991.50">&lt;async_ffi..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (8,349 samples, 7.09%)</title><rect x="55.9679%" y="965" width="7.0881%" height="15" fill="rgb(238,228,24)" fg:x="65924" fg:w="8349"/><text x="56.2179%" y="975.50">async_ffi:..</text></g><g><title>std::panic::catch_unwind (8,349 samples, 7.09%)</title><rect x="55.9679%" y="949" width="7.0881%" height="15" fill="rgb(217,116,22)" fg:x="65924" fg:w="8349"/><text x="56.2179%" y="959.50">std::panic..</text></g><g><title>std::panicking::try (8,349 samples, 7.09%)</title><rect x="55.9679%" y="933" width="7.0881%" height="15" fill="rgb(234,98,12)" fg:x="65924" fg:w="8349"/><text x="56.2179%" y="943.50">std::panic..</text></g><g><title>std::panicking::try::do_call (8,349 samples, 7.09%)</title><rect x="55.9679%" y="917" width="7.0881%" height="15" fill="rgb(242,170,50)" fg:x="65924" fg:w="8349"/><text x="56.2179%" y="927.50">std::panic..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (8,349 samples, 7.09%)</title><rect x="55.9679%" y="901" width="7.0881%" height="15" fill="rgb(235,7,5)" fg:x="65924" fg:w="8349"/><text x="56.2179%" y="911.50">&lt;core::pan..</text></g><g><title>core::ops::function::FnOnce::call_once (8,349 samples, 7.09%)</title><rect x="55.9679%" y="885" width="7.0881%" height="15" fill="rgb(241,114,28)" fg:x="65924" fg:w="8349"/><text x="56.2179%" y="895.50">core::ops:..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (8,349 samples, 7.09%)</title><rect x="55.9679%" y="869" width="7.0881%" height="15" fill="rgb(246,112,42)" fg:x="65924" fg:w="8349"/><text x="56.2179%" y="879.50">async_ffi:..</text></g><g><title>async_ffi::FfiContext::with_context (8,349 samples, 7.09%)</title><rect x="55.9679%" y="853" width="7.0881%" height="15" fill="rgb(248,228,14)" fg:x="65924" fg:w="8349"/><text x="56.2179%" y="863.50">async_ffi:..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (8,349 samples, 7.09%)</title><rect x="55.9679%" y="837" width="7.0881%" height="15" fill="rgb(208,133,18)" fg:x="65924" fg:w="8349"/><text x="56.2179%" y="847.50">async_ffi:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,349 samples, 7.09%)</title><rect x="55.9679%" y="821" width="7.0881%" height="15" fill="rgb(207,35,49)" fg:x="65924" fg:w="8349"/><text x="56.2179%" y="831.50">&lt;core::fut..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (8,349 samples, 7.09%)</title><rect x="55.9679%" y="805" width="7.0881%" height="15" fill="rgb(205,68,36)" fg:x="65924" fg:w="8349"/><text x="56.2179%" y="815.50">&lt;tremor_ru..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (8,349 samples, 7.09%)</title><rect x="55.9679%" y="789" width="7.0881%" height="15" fill="rgb(245,62,40)" fg:x="65924" fg:w="8349"/><text x="56.2179%" y="799.50">tremor_run..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (8,349 samples, 7.09%)</title><rect x="55.9679%" y="773" width="7.0881%" height="15" fill="rgb(228,27,24)" fg:x="65924" fg:w="8349"/><text x="56.2179%" y="783.50">tremor_run..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (8,349 samples, 7.09%)</title><rect x="55.9679%" y="757" width="7.0881%" height="15" fill="rgb(253,19,12)" fg:x="65924" fg:w="8349"/><text x="56.2179%" y="767.50">tremor_run..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (8,349 samples, 7.09%)</title><rect x="55.9679%" y="741" width="7.0881%" height="15" fill="rgb(232,28,20)" fg:x="65924" fg:w="8349"/><text x="56.2179%" y="751.50">tremor_run..</text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (8,349 samples, 7.09%)</title><rect x="55.9679%" y="725" width="7.0881%" height="15" fill="rgb(218,35,51)" fg:x="65924" fg:w="8349"/><text x="56.2179%" y="735.50">&lt;tremor_ru..</text></g><g><title>tremor_runtime::postprocessor::postprocess (463 samples, 0.39%)</title><rect x="62.6629%" y="709" width="0.3931%" height="15" fill="rgb(212,90,40)" fg:x="73810" fg:w="463"/><text x="62.9129%" y="719.50"></text></g><g><title>tremor_common::time::nanotime (386 samples, 0.33%)</title><rect x="62.7283%" y="693" width="0.3277%" height="15" fill="rgb(220,172,12)" fg:x="73887" fg:w="386"/><text x="62.9783%" y="703.50"></text></g><g><title>std::time::SystemTime::now (248 samples, 0.21%)</title><rect x="62.8454%" y="677" width="0.2105%" height="15" fill="rgb(226,159,20)" fg:x="74025" fg:w="248"/><text x="63.0954%" y="687.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (248 samples, 0.21%)</title><rect x="62.8454%" y="661" width="0.2105%" height="15" fill="rgb(234,205,16)" fg:x="74025" fg:w="248"/><text x="63.0954%" y="671.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (248 samples, 0.21%)</title><rect x="62.8454%" y="645" width="0.2105%" height="15" fill="rgb(207,9,39)" fg:x="74025" fg:w="248"/><text x="63.0954%" y="655.50"></text></g><g><title>__clock_gettime (195 samples, 0.17%)</title><rect x="62.8904%" y="629" width="0.1656%" height="15" fill="rgb(249,143,15)" fg:x="74078" fg:w="195"/><text x="63.1404%" y="639.50"></text></g><g><title>__vdso_clock_gettime (190 samples, 0.16%)</title><rect x="62.8947%" y="613" width="0.1613%" height="15" fill="rgb(253,133,29)" fg:x="74083" fg:w="190"/><text x="63.1447%" y="623.50"></text></g><g><title>[[vdso]] (169 samples, 0.14%)</title><rect x="62.9125%" y="597" width="0.1435%" height="15" fill="rgb(221,187,0)" fg:x="74104" fg:w="169"/><text x="63.1625%" y="607.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_key (670 samples, 0.57%)</title><rect x="63.0679%" y="885" width="0.5688%" height="15" fill="rgb(205,204,26)" fg:x="74287" fg:w="670"/><text x="63.3179%" y="895.50"></text></g><g><title>serde::de::MapAccess::next_key (670 samples, 0.57%)</title><rect x="63.0679%" y="869" width="0.5688%" height="15" fill="rgb(224,68,54)" fg:x="74287" fg:w="670"/><text x="63.3179%" y="879.50"></text></g><g><title>&lt;rmp_serde::decode::MapAccess&lt;R,C&gt; as serde::de::MapAccess&gt;::next_key_seed (670 samples, 0.57%)</title><rect x="63.0679%" y="853" width="0.5688%" height="15" fill="rgb(209,67,4)" fg:x="74287" fg:w="670"/><text x="63.3179%" y="863.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (670 samples, 0.57%)</title><rect x="63.0679%" y="837" width="0.5688%" height="15" fill="rgb(228,229,18)" fg:x="74287" fg:w="670"/><text x="63.3179%" y="847.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for &amp;str&gt;::deserialize (670 samples, 0.57%)</title><rect x="63.0679%" y="821" width="0.5688%" height="15" fill="rgb(231,89,13)" fg:x="74287" fg:w="670"/><text x="63.3179%" y="831.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_str (670 samples, 0.57%)</title><rect x="63.0679%" y="805" width="0.5688%" height="15" fill="rgb(210,182,18)" fg:x="74287" fg:w="670"/><text x="63.3179%" y="815.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (670 samples, 0.57%)</title><rect x="63.0679%" y="789" width="0.5688%" height="15" fill="rgb(240,105,2)" fg:x="74287" fg:w="670"/><text x="63.3179%" y="799.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::read_str_data (670 samples, 0.57%)</title><rect x="63.0679%" y="773" width="0.5688%" height="15" fill="rgb(207,170,50)" fg:x="74287" fg:w="670"/><text x="63.3179%" y="783.50"></text></g><g><title>core::str::converts::from_utf8 (670 samples, 0.57%)</title><rect x="63.0679%" y="757" width="0.5688%" height="15" fill="rgb(232,133,24)" fg:x="74287" fg:w="670"/><text x="63.3179%" y="767.50"></text></g><g><title>core::str::validations::run_utf8_validation (626 samples, 0.53%)</title><rect x="63.1052%" y="741" width="0.5315%" height="15" fill="rgb(235,166,27)" fg:x="74331" fg:w="626"/><text x="63.3552%" y="751.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_u8 (25 samples, 0.02%)</title><rect x="65.2327%" y="677" width="0.0212%" height="15" fill="rgb(209,19,13)" fg:x="76837" fg:w="25"/><text x="65.4827%" y="687.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;u8&gt; for u64&gt;::from (25 samples, 0.02%)</title><rect x="65.2327%" y="661" width="0.0212%" height="15" fill="rgb(226,79,39)" fg:x="76837" fg:w="25"/><text x="65.4827%" y="671.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_borrowed_str (12 samples, 0.01%)</title><rect x="65.2845%" y="661" width="0.0102%" height="15" fill="rgb(222,163,10)" fg:x="76898" fg:w="12"/><text x="65.5345%" y="671.50"></text></g><g><title>core::str::converts::from_utf8 (167 samples, 0.14%)</title><rect x="65.2947%" y="661" width="0.1418%" height="15" fill="rgb(214,44,19)" fg:x="76910" fg:w="167"/><text x="65.5447%" y="671.50"></text></g><g><title>core::str::validations::run_utf8_validation (157 samples, 0.13%)</title><rect x="65.3032%" y="645" width="0.1333%" height="15" fill="rgb(210,217,13)" fg:x="76920" fg:w="157"/><text x="65.5532%" y="655.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::read_str_data (259 samples, 0.22%)</title><rect x="65.2540%" y="677" width="0.2199%" height="15" fill="rgb(237,61,54)" fg:x="76862" fg:w="259"/><text x="65.5040%" y="687.50"></text></g><g><title>rmp_serde::decode::read_bin_data (44 samples, 0.04%)</title><rect x="65.4365%" y="661" width="0.0374%" height="15" fill="rgb(226,184,24)" fg:x="77077" fg:w="44"/><text x="65.6865%" y="671.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as rmp_serde::decode::ReadSlice&gt;::read_slice (44 samples, 0.04%)</title><rect x="65.4365%" y="645" width="0.0374%" height="15" fill="rgb(223,226,4)" fg:x="77077" fg:w="44"/><text x="65.6865%" y="655.50"></text></g><g><title>rmp::decode::RmpRead::read_u8 (50 samples, 0.04%)</title><rect x="65.4747%" y="613" width="0.0424%" height="15" fill="rgb(210,26,41)" fg:x="77122" fg:w="50"/><text x="65.7247%" y="623.50"></text></g><g><title>&lt;T as rmp::decode::RmpRead&gt;::read_exact_buf (50 samples, 0.04%)</title><rect x="65.4747%" y="597" width="0.0424%" height="15" fill="rgb(220,221,6)" fg:x="77122" fg:w="50"/><text x="65.7247%" y="607.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as std::io::Read&gt;::read_exact (50 samples, 0.04%)</title><rect x="65.4747%" y="581" width="0.0424%" height="15" fill="rgb(225,89,49)" fg:x="77122" fg:w="50"/><text x="65.7247%" y="591.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_exact (50 samples, 0.04%)</title><rect x="65.4747%" y="565" width="0.0424%" height="15" fill="rgb(218,70,45)" fg:x="77122" fg:w="50"/><text x="65.7247%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (93 samples, 0.08%)</title><rect x="65.4739%" y="661" width="0.0790%" height="15" fill="rgb(238,166,21)" fg:x="77121" fg:w="93"/><text x="65.7239%" y="671.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker::{{closure}} (92 samples, 0.08%)</title><rect x="65.4747%" y="645" width="0.0781%" height="15" fill="rgb(224,141,44)" fg:x="77122" fg:w="92"/><text x="65.7247%" y="655.50"></text></g><g><title>rmp::decode::read_marker (92 samples, 0.08%)</title><rect x="65.4747%" y="629" width="0.0781%" height="15" fill="rgb(230,12,49)" fg:x="77122" fg:w="92"/><text x="65.7247%" y="639.50"></text></g><g><title>rmp::marker::Marker::from_u8 (42 samples, 0.04%)</title><rect x="65.5172%" y="613" width="0.0357%" height="15" fill="rgb(212,174,12)" fg:x="77172" fg:w="42"/><text x="65.7672%" y="623.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (626 samples, 0.53%)</title><rect x="65.0273%" y="725" width="0.5315%" height="15" fill="rgb(246,67,9)" fg:x="76595" fg:w="626"/><text x="65.2773%" y="735.50"></text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (626 samples, 0.53%)</title><rect x="65.0273%" y="709" width="0.5315%" height="15" fill="rgb(239,35,23)" fg:x="76595" fg:w="626"/><text x="65.2773%" y="719.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (591 samples, 0.50%)</title><rect x="65.0570%" y="693" width="0.5017%" height="15" fill="rgb(211,167,0)" fg:x="76630" fg:w="591"/><text x="65.3070%" y="703.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker (100 samples, 0.08%)</title><rect x="65.4739%" y="677" width="0.0849%" height="15" fill="rgb(225,119,45)" fg:x="77121" fg:w="100"/><text x="65.7239%" y="687.50"></text></g><g><title>&lt;&amp;mut A as serde::de::SeqAccess&gt;::next_element (1,997 samples, 1.70%)</title><rect x="64.4347%" y="773" width="1.6954%" height="15" fill="rgb(210,162,6)" fg:x="75897" fg:w="1997"/><text x="64.6847%" y="783.50"></text></g><g><title>serde::de::SeqAccess::next_element (1,997 samples, 1.70%)</title><rect x="64.4347%" y="757" width="1.6954%" height="15" fill="rgb(208,118,35)" fg:x="75897" fg:w="1997"/><text x="64.6847%" y="767.50"></text></g><g><title>&lt;rmp_serde::decode::SeqAccess&lt;R,C&gt; as serde::de::SeqAccess&gt;::next_element_seed (1,997 samples, 1.70%)</title><rect x="64.4347%" y="741" width="1.6954%" height="15" fill="rgb(239,4,53)" fg:x="75897" fg:w="1997"/><text x="64.6847%" y="751.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (673 samples, 0.57%)</title><rect x="65.5588%" y="725" width="0.5714%" height="15" fill="rgb(213,130,21)" fg:x="77221" fg:w="673"/><text x="65.8088%" y="735.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (777 samples, 0.66%)</title><rect x="66.1335%" y="773" width="0.6597%" height="15" fill="rgb(235,148,0)" fg:x="77898" fg:w="777"/><text x="66.3835%" y="783.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (49 samples, 0.04%)</title><rect x="66.7932%" y="757" width="0.0416%" height="15" fill="rgb(244,224,18)" fg:x="78675" fg:w="49"/><text x="67.0432%" y="767.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::push (708 samples, 0.60%)</title><rect x="66.7932%" y="773" width="0.6011%" height="15" fill="rgb(211,214,4)" fg:x="78675" fg:w="708"/><text x="67.0432%" y="783.50"></text></g><g><title>core::ptr::write (659 samples, 0.56%)</title><rect x="66.8348%" y="757" width="0.5595%" height="15" fill="rgb(206,119,25)" fg:x="78724" fg:w="659"/><text x="67.0848%" y="767.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (14 samples, 0.01%)</title><rect x="67.3942%" y="757" width="0.0119%" height="15" fill="rgb(243,93,47)" fg:x="79383" fg:w="14"/><text x="67.6442%" y="767.50"></text></g><g><title>&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt; as core::convert::From&lt;alloc::vec::Vec&lt;T&gt;&gt;&gt;::from (14 samples, 0.01%)</title><rect x="67.3942%" y="741" width="0.0119%" height="15" fill="rgb(224,194,6)" fg:x="79383" fg:w="14"/><text x="67.6442%" y="751.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (323 samples, 0.27%)</title><rect x="67.4656%" y="597" width="0.2742%" height="15" fill="rgb(243,229,6)" fg:x="79467" fg:w="323"/><text x="67.7156%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (405 samples, 0.34%)</title><rect x="67.4061%" y="693" width="0.3438%" height="15" fill="rgb(207,23,50)" fg:x="79397" fg:w="405"/><text x="67.6561%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (405 samples, 0.34%)</title><rect x="67.4061%" y="677" width="0.3438%" height="15" fill="rgb(253,192,32)" fg:x="79397" fg:w="405"/><text x="67.6561%" y="687.50"></text></g><g><title>alloc::alloc::alloc (398 samples, 0.34%)</title><rect x="67.4121%" y="661" width="0.3379%" height="15" fill="rgb(213,21,6)" fg:x="79404" fg:w="398"/><text x="67.6621%" y="671.50"></text></g><g><title>__rg_alloc (398 samples, 0.34%)</title><rect x="67.4121%" y="645" width="0.3379%" height="15" fill="rgb(243,151,13)" fg:x="79404" fg:w="398"/><text x="67.6621%" y="655.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (398 samples, 0.34%)</title><rect x="67.4121%" y="629" width="0.3379%" height="15" fill="rgb(233,165,41)" fg:x="79404" fg:w="398"/><text x="67.6621%" y="639.50"></text></g><g><title>sn_rust_alloc (398 samples, 0.34%)</title><rect x="67.4121%" y="613" width="0.3379%" height="15" fill="rgb(246,176,45)" fg:x="79404" fg:w="398"/><text x="67.6621%" y="623.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (12 samples, 0.01%)</title><rect x="67.7398%" y="597" width="0.0102%" height="15" fill="rgb(217,170,52)" fg:x="79790" fg:w="12"/><text x="67.9898%" y="607.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_seq (4,581 samples, 3.89%)</title><rect x="63.8667%" y="789" width="3.8892%" height="15" fill="rgb(214,203,54)" fg:x="75228" fg:w="4581"/><text x="64.1167%" y="799.50">&lt;tre..</text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::with_capacity (426 samples, 0.36%)</title><rect x="67.3942%" y="773" width="0.3617%" height="15" fill="rgb(248,215,49)" fg:x="79383" fg:w="426"/><text x="67.6442%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (412 samples, 0.35%)</title><rect x="67.4061%" y="757" width="0.3498%" height="15" fill="rgb(208,46,10)" fg:x="79397" fg:w="412"/><text x="67.6561%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (412 samples, 0.35%)</title><rect x="67.4061%" y="741" width="0.3498%" height="15" fill="rgb(254,5,31)" fg:x="79397" fg:w="412"/><text x="67.6561%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (412 samples, 0.35%)</title><rect x="67.4061%" y="725" width="0.3498%" height="15" fill="rgb(222,104,33)" fg:x="79397" fg:w="412"/><text x="67.6561%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (412 samples, 0.35%)</title><rect x="67.4061%" y="709" width="0.3498%" height="15" fill="rgb(248,49,16)" fg:x="79397" fg:w="412"/><text x="67.6561%" y="719.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_borrowed_str (29 samples, 0.02%)</title><rect x="67.8170%" y="773" width="0.0246%" height="15" fill="rgb(232,198,41)" fg:x="79881" fg:w="29"/><text x="68.0670%" y="783.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (12 samples, 0.01%)</title><rect x="68.3315%" y="741" width="0.0102%" height="15" fill="rgb(214,125,3)" fg:x="80487" fg:w="12"/><text x="68.5815%" y="751.50"></text></g><g><title>core::str::converts::from_utf8 (609 samples, 0.52%)</title><rect x="67.8416%" y="773" width="0.5170%" height="15" fill="rgb(229,220,28)" fg:x="79910" fg:w="609"/><text x="68.0916%" y="783.50"></text></g><g><title>core::str::validations::run_utf8_validation (554 samples, 0.47%)</title><rect x="67.8883%" y="757" width="0.4703%" height="15" fill="rgb(222,64,37)" fg:x="79965" fg:w="554"/><text x="68.1383%" y="767.50"></text></g><g><title>core::str::validations::contains_nonascii (20 samples, 0.02%)</title><rect x="68.3417%" y="741" width="0.0170%" height="15" fill="rgb(249,184,13)" fg:x="80499" fg:w="20"/><text x="68.5917%" y="751.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::read_str_data (770 samples, 0.65%)</title><rect x="67.7576%" y="789" width="0.6537%" height="15" fill="rgb(252,176,6)" fg:x="79811" fg:w="770"/><text x="68.0076%" y="799.50"></text></g><g><title>rmp_serde::decode::read_bin_data (62 samples, 0.05%)</title><rect x="68.3587%" y="773" width="0.0526%" height="15" fill="rgb(228,153,7)" fg:x="80519" fg:w="62"/><text x="68.6087%" y="783.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as rmp_serde::decode::ReadSlice&gt;::read_slice (59 samples, 0.05%)</title><rect x="68.3612%" y="757" width="0.0501%" height="15" fill="rgb(242,193,5)" fg:x="80522" fg:w="59"/><text x="68.6112%" y="767.50"></text></g><g><title>rmp::decode::RmpRead::read_u8 (68 samples, 0.06%)</title><rect x="68.4113%" y="725" width="0.0577%" height="15" fill="rgb(232,140,9)" fg:x="80581" fg:w="68"/><text x="68.6613%" y="735.50"></text></g><g><title>&lt;T as rmp::decode::RmpRead&gt;::read_exact_buf (68 samples, 0.06%)</title><rect x="68.4113%" y="709" width="0.0577%" height="15" fill="rgb(213,222,16)" fg:x="80581" fg:w="68"/><text x="68.6613%" y="719.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as std::io::Read&gt;::read_exact (68 samples, 0.06%)</title><rect x="68.4113%" y="693" width="0.0577%" height="15" fill="rgb(222,75,50)" fg:x="80581" fg:w="68"/><text x="68.6613%" y="703.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_exact (68 samples, 0.06%)</title><rect x="68.4113%" y="677" width="0.0577%" height="15" fill="rgb(205,180,2)" fg:x="80581" fg:w="68"/><text x="68.6613%" y="687.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (199 samples, 0.17%)</title><rect x="68.4113%" y="773" width="0.1689%" height="15" fill="rgb(216,34,7)" fg:x="80581" fg:w="199"/><text x="68.6613%" y="783.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker::{{closure}} (199 samples, 0.17%)</title><rect x="68.4113%" y="757" width="0.1689%" height="15" fill="rgb(253,16,32)" fg:x="80581" fg:w="199"/><text x="68.6613%" y="767.50"></text></g><g><title>rmp::decode::read_marker (199 samples, 0.17%)</title><rect x="68.4113%" y="741" width="0.1689%" height="15" fill="rgb(208,97,28)" fg:x="80581" fg:w="199"/><text x="68.6613%" y="751.50"></text></g><g><title>rmp::marker::Marker::from_u8 (131 samples, 0.11%)</title><rect x="68.4690%" y="725" width="0.1112%" height="15" fill="rgb(225,92,11)" fg:x="80649" fg:w="131"/><text x="68.7190%" y="735.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker (233 samples, 0.20%)</title><rect x="68.4113%" y="789" width="0.1978%" height="15" fill="rgb(243,38,12)" fg:x="80581" fg:w="233"/><text x="68.6613%" y="799.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (34 samples, 0.03%)</title><rect x="68.5803%" y="773" width="0.0289%" height="15" fill="rgb(208,139,16)" fg:x="80780" fg:w="34"/><text x="68.8303%" y="783.50"></text></g><g><title>core::mem::replace (34 samples, 0.03%)</title><rect x="68.5803%" y="757" width="0.0289%" height="15" fill="rgb(227,24,9)" fg:x="80780" fg:w="34"/><text x="68.8303%" y="767.50"></text></g><g><title>core::ptr::write (33 samples, 0.03%)</title><rect x="68.5811%" y="741" width="0.0280%" height="15" fill="rgb(206,62,11)" fg:x="80781" fg:w="33"/><text x="68.8311%" y="751.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_value (5,867 samples, 4.98%)</title><rect x="63.6367%" y="885" width="4.9809%" height="15" fill="rgb(228,134,27)" fg:x="74957" fg:w="5867"/><text x="63.8867%" y="895.50">&lt;&amp;mut ..</text></g><g><title>serde::de::MapAccess::next_value (5,867 samples, 4.98%)</title><rect x="63.6367%" y="869" width="4.9809%" height="15" fill="rgb(205,55,33)" fg:x="74957" fg:w="5867"/><text x="63.8867%" y="879.50">serde:..</text></g><g><title>&lt;rmp_serde::decode::MapAccess&lt;R,C&gt; as serde::de::MapAccess&gt;::next_value_seed (5,867 samples, 4.98%)</title><rect x="63.6367%" y="853" width="4.9809%" height="15" fill="rgb(243,75,43)" fg:x="74957" fg:w="5867"/><text x="63.8867%" y="863.50">&lt;rmp_s..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (5,867 samples, 4.98%)</title><rect x="63.6367%" y="837" width="4.9809%" height="15" fill="rgb(223,27,42)" fg:x="74957" fg:w="5867"/><text x="63.8867%" y="847.50">&lt;core:..</text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (5,867 samples, 4.98%)</title><rect x="63.6367%" y="821" width="4.9809%" height="15" fill="rgb(232,189,33)" fg:x="74957" fg:w="5867"/><text x="63.8867%" y="831.50">tremor..</text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (5,867 samples, 4.98%)</title><rect x="63.6367%" y="805" width="4.9809%" height="15" fill="rgb(210,9,39)" fg:x="74957" fg:w="5867"/><text x="63.8867%" y="815.50">&lt;&amp;mut ..</text></g><g><title>abi_stable::std_types::option::&lt;impl abi_stable::traits::IntoReprC for core::option::Option&lt;T&gt;&gt;::into_c (32 samples, 0.03%)</title><rect x="69.5905%" y="805" width="0.0272%" height="15" fill="rgb(242,85,26)" fg:x="81970" fg:w="32"/><text x="69.8405%" y="815.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (32 samples, 0.03%)</title><rect x="69.5905%" y="789" width="0.0272%" height="15" fill="rgb(248,44,4)" fg:x="81970" fg:w="32"/><text x="69.8405%" y="799.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as core::convert::From&lt;core::option::Option&lt;T&gt;&gt;&gt;::from (32 samples, 0.03%)</title><rect x="69.5905%" y="773" width="0.0272%" height="15" fill="rgb(250,96,46)" fg:x="81970" fg:w="32"/><text x="69.8405%" y="783.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (37 samples, 0.03%)</title><rect x="70.1526%" y="725" width="0.0314%" height="15" fill="rgb(229,116,26)" fg:x="82632" fg:w="37"/><text x="70.4026%" y="735.50"></text></g><g><title>&lt;byteorder::LittleEndian as byteorder::ByteOrder&gt;::read_u32 (22 samples, 0.02%)</title><rect x="70.2629%" y="645" width="0.0187%" height="15" fill="rgb(246,94,34)" fg:x="82762" fg:w="22"/><text x="70.5129%" y="655.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (22 samples, 0.02%)</title><rect x="70.2629%" y="629" width="0.0187%" height="15" fill="rgb(251,73,21)" fg:x="82762" fg:w="22"/><text x="70.5129%" y="639.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (22 samples, 0.02%)</title><rect x="70.2629%" y="613" width="0.0187%" height="15" fill="rgb(254,121,25)" fg:x="82762" fg:w="22"/><text x="70.5129%" y="623.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (22 samples, 0.02%)</title><rect x="70.2629%" y="597" width="0.0187%" height="15" fill="rgb(215,161,49)" fg:x="82762" fg:w="22"/><text x="70.5129%" y="607.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (22 samples, 0.02%)</title><rect x="70.2629%" y="581" width="0.0187%" height="15" fill="rgb(221,43,13)" fg:x="82762" fg:w="22"/><text x="70.5129%" y="591.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 0.04%)</title><rect x="70.2816%" y="645" width="0.0441%" height="15" fill="rgb(249,5,37)" fg:x="82784" fg:w="52"/><text x="70.5316%" y="655.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitXor&gt;::bitxor (34 samples, 0.03%)</title><rect x="70.3258%" y="629" width="0.0289%" height="15" fill="rgb(226,25,44)" fg:x="82836" fg:w="34"/><text x="70.5758%" y="639.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (12 samples, 0.01%)</title><rect x="70.3546%" y="629" width="0.0102%" height="15" fill="rgb(238,189,16)" fg:x="82870" fg:w="12"/><text x="70.6046%" y="639.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (352 samples, 0.30%)</title><rect x="70.2035%" y="693" width="0.2988%" height="15" fill="rgb(251,186,8)" fg:x="82692" fg:w="352"/><text x="70.4535%" y="703.50"></text></g><g><title>fxhash::write (349 samples, 0.30%)</title><rect x="70.2060%" y="677" width="0.2963%" height="15" fill="rgb(254,34,31)" fg:x="82695" fg:w="349"/><text x="70.4560%" y="687.50"></text></g><g><title>fxhash::write64 (349 samples, 0.30%)</title><rect x="70.2060%" y="661" width="0.2963%" height="15" fill="rgb(225,215,27)" fg:x="82695" fg:w="349"/><text x="70.4560%" y="671.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (208 samples, 0.18%)</title><rect x="70.3258%" y="645" width="0.1766%" height="15" fill="rgb(221,192,48)" fg:x="82836" fg:w="208"/><text x="70.5758%" y="655.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (162 samples, 0.14%)</title><rect x="70.3648%" y="629" width="0.1375%" height="15" fill="rgb(219,137,20)" fg:x="82882" fg:w="162"/><text x="70.6148%" y="639.50"></text></g><g><title>&lt;usize as core::ops::bit::BitXor&gt;::bitxor (16 samples, 0.01%)</title><rect x="70.5592%" y="661" width="0.0136%" height="15" fill="rgb(219,84,11)" fg:x="83111" fg:w="16"/><text x="70.8092%" y="671.50"></text></g><g><title>core::num::&lt;impl usize&gt;::rotate_left (14 samples, 0.01%)</title><rect x="70.5728%" y="661" width="0.0119%" height="15" fill="rgb(224,10,23)" fg:x="83127" fg:w="14"/><text x="70.8228%" y="671.50"></text></g><g><title>hashbrown::map::make_insert_hash (668 samples, 0.57%)</title><rect x="70.0880%" y="773" width="0.5671%" height="15" fill="rgb(248,22,39)" fg:x="82556" fg:w="668"/><text x="70.3380%" y="783.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (593 samples, 0.50%)</title><rect x="70.1517%" y="757" width="0.5034%" height="15" fill="rgb(212,154,20)" fg:x="82631" fg:w="593"/><text x="70.4017%" y="767.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::hash::Hash&gt;::hash (592 samples, 0.50%)</title><rect x="70.1526%" y="741" width="0.5026%" height="15" fill="rgb(236,199,50)" fg:x="82632" fg:w="592"/><text x="70.4026%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (555 samples, 0.47%)</title><rect x="70.1840%" y="725" width="0.4712%" height="15" fill="rgb(211,9,17)" fg:x="82669" fg:w="555"/><text x="70.4340%" y="735.50"></text></g><g><title>core::hash::Hasher::write_str (532 samples, 0.45%)</title><rect x="70.2035%" y="709" width="0.4517%" height="15" fill="rgb(243,216,36)" fg:x="82692" fg:w="532"/><text x="70.4535%" y="719.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (180 samples, 0.15%)</title><rect x="70.5023%" y="693" width="0.1528%" height="15" fill="rgb(250,2,10)" fg:x="83044" fg:w="180"/><text x="70.7523%" y="703.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (180 samples, 0.15%)</title><rect x="70.5023%" y="677" width="0.1528%" height="15" fill="rgb(226,50,48)" fg:x="83044" fg:w="180"/><text x="70.7523%" y="687.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (83 samples, 0.07%)</title><rect x="70.5847%" y="661" width="0.0705%" height="15" fill="rgb(243,81,16)" fg:x="83141" fg:w="83"/><text x="70.8347%" y="671.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (15 samples, 0.01%)</title><rect x="70.6704%" y="709" width="0.0127%" height="15" fill="rgb(250,14,2)" fg:x="83242" fg:w="15"/><text x="70.9204%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (15 samples, 0.01%)</title><rect x="70.6704%" y="693" width="0.0127%" height="15" fill="rgb(233,135,29)" fg:x="83242" fg:w="15"/><text x="70.9204%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (34 samples, 0.03%)</title><rect x="70.6704%" y="725" width="0.0289%" height="15" fill="rgb(224,64,43)" fg:x="83242" fg:w="34"/><text x="70.9204%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::bucket (14 samples, 0.01%)</title><rect x="70.6874%" y="709" width="0.0119%" height="15" fill="rgb(238,84,13)" fg:x="83262" fg:w="14"/><text x="70.9374%" y="719.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::from_base_index (14 samples, 0.01%)</title><rect x="70.6874%" y="693" width="0.0119%" height="15" fill="rgb(253,48,26)" fg:x="83262" fg:w="14"/><text x="70.9374%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (151 samples, 0.13%)</title><rect x="70.6993%" y="725" width="0.1282%" height="15" fill="rgb(205,223,31)" fg:x="83276" fg:w="151"/><text x="70.9493%" y="735.50"></text></g><g><title>hashbrown::raw::inner::h2 (24 samples, 0.02%)</title><rect x="70.8275%" y="725" width="0.0204%" height="15" fill="rgb(221,41,32)" fg:x="83427" fg:w="24"/><text x="71.0775%" y="735.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (72 samples, 0.06%)</title><rect x="70.8479%" y="725" width="0.0611%" height="15" fill="rgb(213,158,31)" fg:x="83451" fg:w="72"/><text x="71.0979%" y="735.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (72 samples, 0.06%)</title><rect x="70.8479%" y="709" width="0.0611%" height="15" fill="rgb(245,126,43)" fg:x="83451" fg:w="72"/><text x="71.0979%" y="719.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (72 samples, 0.06%)</title><rect x="70.8479%" y="693" width="0.0611%" height="15" fill="rgb(227,7,22)" fg:x="83451" fg:w="72"/><text x="71.0979%" y="703.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (165 samples, 0.14%)</title><rect x="70.9090%" y="725" width="0.1401%" height="15" fill="rgb(252,90,44)" fg:x="83523" fg:w="165"/><text x="71.1590%" y="735.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (165 samples, 0.14%)</title><rect x="70.9090%" y="709" width="0.1401%" height="15" fill="rgb(253,91,0)" fg:x="83523" fg:w="165"/><text x="71.1590%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get_mut (563 samples, 0.48%)</title><rect x="70.6552%" y="773" width="0.4780%" height="15" fill="rgb(252,175,49)" fg:x="83224" fg:w="563"/><text x="70.9052%" y="783.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (563 samples, 0.48%)</title><rect x="70.6552%" y="757" width="0.4780%" height="15" fill="rgb(246,150,1)" fg:x="83224" fg:w="563"/><text x="70.9052%" y="767.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (563 samples, 0.48%)</title><rect x="70.6552%" y="741" width="0.4780%" height="15" fill="rgb(241,192,25)" fg:x="83224" fg:w="563"/><text x="70.9052%" y="751.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty (99 samples, 0.08%)</title><rect x="71.0491%" y="725" width="0.0840%" height="15" fill="rgb(239,187,11)" fg:x="83688" fg:w="99"/><text x="71.2991%" y="735.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (99 samples, 0.08%)</title><rect x="71.0491%" y="709" width="0.0840%" height="15" fill="rgb(218,202,51)" fg:x="83688" fg:w="99"/><text x="71.2991%" y="719.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (99 samples, 0.08%)</title><rect x="71.0491%" y="693" width="0.0840%" height="15" fill="rgb(225,176,8)" fg:x="83688" fg:w="99"/><text x="71.2991%" y="703.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::write (315 samples, 0.27%)</title><rect x="71.1934%" y="757" width="0.2674%" height="15" fill="rgb(219,122,41)" fg:x="83858" fg:w="315"/><text x="71.4434%" y="767.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (315 samples, 0.27%)</title><rect x="71.1934%" y="741" width="0.2674%" height="15" fill="rgb(248,140,20)" fg:x="83858" fg:w="315"/><text x="71.4434%" y="751.50"></text></g><g><title>core::ptr::write (315 samples, 0.27%)</title><rect x="71.1934%" y="725" width="0.2674%" height="15" fill="rgb(245,41,37)" fg:x="83858" fg:w="315"/><text x="71.4434%" y="735.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (32 samples, 0.03%)</title><rect x="71.6569%" y="741" width="0.0272%" height="15" fill="rgb(235,82,39)" fg:x="84404" fg:w="32"/><text x="71.9069%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_insert_slot (255 samples, 0.22%)</title><rect x="71.4693%" y="757" width="0.2165%" height="15" fill="rgb(230,108,42)" fg:x="84183" fg:w="255"/><text x="71.7193%" y="767.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::insert (3,738 samples, 3.17%)</title><rect x="68.6176%" y="885" width="3.1735%" height="15" fill="rgb(215,150,50)" fg:x="80824" fg:w="3738"/><text x="68.8676%" y="895.50">abi..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (3,738 samples, 3.17%)</title><rect x="68.6176%" y="869" width="3.1735%" height="15" fill="rgb(233,212,5)" fg:x="80824" fg:w="3738"/><text x="68.8676%" y="879.50">abi..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (3,352 samples, 2.85%)</title><rect x="68.9453%" y="853" width="2.8458%" height="15" fill="rgb(245,80,22)" fg:x="81210" fg:w="3352"/><text x="69.1953%" y="863.50">ab..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (3,352 samples, 2.85%)</title><rect x="68.9453%" y="837" width="2.8458%" height="15" fill="rgb(238,129,16)" fg:x="81210" fg:w="3352"/><text x="69.1953%" y="847.50">ab..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem::{{closure}} (3,132 samples, 2.66%)</title><rect x="69.1321%" y="821" width="2.6590%" height="15" fill="rgb(240,19,0)" fg:x="81430" fg:w="3132"/><text x="69.3821%" y="831.50">ab..</text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::insert (2,560 samples, 2.17%)</title><rect x="69.6177%" y="805" width="2.1734%" height="15" fill="rgb(232,42,35)" fg:x="82002" fg:w="2560"/><text x="69.8677%" y="815.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,172 samples, 1.84%)</title><rect x="69.9471%" y="789" width="1.8440%" height="15" fill="rgb(223,130,24)" fg:x="82390" fg:w="2172"/><text x="70.1971%" y="799.50">h..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (775 samples, 0.66%)</title><rect x="71.1331%" y="773" width="0.6580%" height="15" fill="rgb(237,16,22)" fg:x="83787" fg:w="775"/><text x="71.3831%" y="783.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::record_item_insert_at (124 samples, 0.11%)</title><rect x="71.6858%" y="757" width="0.1053%" height="15" fill="rgb(248,192,20)" fg:x="84438" fg:w="124"/><text x="71.9358%" y="767.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl_h2 (39 samples, 0.03%)</title><rect x="71.7580%" y="741" width="0.0331%" height="15" fill="rgb(233,167,2)" fg:x="84523" fg:w="39"/><text x="72.0080%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl (39 samples, 0.03%)</title><rect x="71.7580%" y="725" width="0.0331%" height="15" fill="rgb(252,71,44)" fg:x="84523" fg:w="39"/><text x="72.0080%" y="735.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (110 samples, 0.09%)</title><rect x="71.8267%" y="661" width="0.0934%" height="15" fill="rgb(238,37,47)" fg:x="84604" fg:w="110"/><text x="72.0767%" y="671.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (144 samples, 0.12%)</title><rect x="71.8004%" y="821" width="0.1223%" height="15" fill="rgb(214,202,54)" fg:x="84573" fg:w="144"/><text x="72.0504%" y="831.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (144 samples, 0.12%)</title><rect x="71.8004%" y="805" width="0.1223%" height="15" fill="rgb(254,165,40)" fg:x="84573" fg:w="144"/><text x="72.0504%" y="815.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (141 samples, 0.12%)</title><rect x="71.8030%" y="789" width="0.1197%" height="15" fill="rgb(246,173,38)" fg:x="84576" fg:w="141"/><text x="72.0530%" y="799.50"></text></g><g><title>alloc::alloc::exchange_malloc (139 samples, 0.12%)</title><rect x="71.8047%" y="773" width="0.1180%" height="15" fill="rgb(215,3,27)" fg:x="84578" fg:w="139"/><text x="72.0547%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (139 samples, 0.12%)</title><rect x="71.8047%" y="757" width="0.1180%" height="15" fill="rgb(239,169,51)" fg:x="84578" fg:w="139"/><text x="72.0547%" y="767.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (139 samples, 0.12%)</title><rect x="71.8047%" y="741" width="0.1180%" height="15" fill="rgb(212,5,25)" fg:x="84578" fg:w="139"/><text x="72.0547%" y="751.50"></text></g><g><title>alloc::alloc::alloc (138 samples, 0.12%)</title><rect x="71.8055%" y="725" width="0.1172%" height="15" fill="rgb(243,45,17)" fg:x="84579" fg:w="138"/><text x="72.0555%" y="735.50"></text></g><g><title>__rg_alloc (138 samples, 0.12%)</title><rect x="71.8055%" y="709" width="0.1172%" height="15" fill="rgb(242,97,9)" fg:x="84579" fg:w="138"/><text x="72.0555%" y="719.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (138 samples, 0.12%)</title><rect x="71.8055%" y="693" width="0.1172%" height="15" fill="rgb(228,71,31)" fg:x="84579" fg:w="138"/><text x="72.0555%" y="703.50"></text></g><g><title>sn_rust_alloc (138 samples, 0.12%)</title><rect x="71.8055%" y="677" width="0.1172%" height="15" fill="rgb(252,184,16)" fg:x="84579" fg:w="138"/><text x="72.0555%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (157 samples, 0.13%)</title><rect x="71.7911%" y="869" width="0.1333%" height="15" fill="rgb(236,169,46)" fg:x="84562" fg:w="157"/><text x="72.0411%" y="879.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (156 samples, 0.13%)</title><rect x="71.7919%" y="853" width="0.1324%" height="15" fill="rgb(207,17,47)" fg:x="84563" fg:w="156"/><text x="72.0419%" y="863.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (156 samples, 0.13%)</title><rect x="71.7919%" y="837" width="0.1324%" height="15" fill="rgb(206,201,28)" fg:x="84563" fg:w="156"/><text x="72.0419%" y="847.50"></text></g><g><title>core::mem::swap (260 samples, 0.22%)</title><rect x="71.9397%" y="693" width="0.2207%" height="15" fill="rgb(224,184,23)" fg:x="84737" fg:w="260"/><text x="72.1897%" y="703.50"></text></g><g><title>core::mem::swap_simple (260 samples, 0.22%)</title><rect x="71.9397%" y="677" width="0.2207%" height="15" fill="rgb(208,139,48)" fg:x="84737" fg:w="260"/><text x="72.1897%" y="687.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (44 samples, 0.04%)</title><rect x="72.1782%" y="661" width="0.0374%" height="15" fill="rgb(208,130,10)" fg:x="85018" fg:w="44"/><text x="72.4282%" y="671.50"></text></g><g><title>core::intrinsics::write_bytes (44 samples, 0.04%)</title><rect x="72.1782%" y="645" width="0.0374%" height="15" fill="rgb(211,213,45)" fg:x="85018" fg:w="44"/><text x="72.4282%" y="655.50"></text></g><g><title>[libc-2.31.so] (37 samples, 0.03%)</title><rect x="72.1842%" y="629" width="0.0314%" height="15" fill="rgb(235,100,30)" fg:x="85025" fg:w="37"/><text x="72.4342%" y="639.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (1,156 samples, 0.98%)</title><rect x="72.3395%" y="549" width="0.9814%" height="15" fill="rgb(206,144,31)" fg:x="85208" fg:w="1156"/><text x="72.5895%" y="559.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (12 samples, 0.01%)</title><rect x="73.3108%" y="533" width="0.0102%" height="15" fill="rgb(224,200,26)" fg:x="86352" fg:w="12"/><text x="73.5608%" y="543.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (20 samples, 0.02%)</title><rect x="73.3209%" y="549" width="0.0170%" height="15" fill="rgb(247,104,53)" fg:x="86364" fg:w="20"/><text x="73.5709%" y="559.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (1,319 samples, 1.12%)</title><rect x="72.2258%" y="645" width="1.1198%" height="15" fill="rgb(220,14,17)" fg:x="85074" fg:w="1319"/><text x="72.4758%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (1,319 samples, 1.12%)</title><rect x="72.2258%" y="629" width="1.1198%" height="15" fill="rgb(230,140,40)" fg:x="85074" fg:w="1319"/><text x="72.4758%" y="639.50"></text></g><g><title>alloc::alloc::alloc (1,319 samples, 1.12%)</title><rect x="72.2258%" y="613" width="1.1198%" height="15" fill="rgb(229,2,41)" fg:x="85074" fg:w="1319"/><text x="72.4758%" y="623.50"></text></g><g><title>__rg_alloc (1,319 samples, 1.12%)</title><rect x="72.2258%" y="597" width="1.1198%" height="15" fill="rgb(232,89,16)" fg:x="85074" fg:w="1319"/><text x="72.4758%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1,319 samples, 1.12%)</title><rect x="72.2258%" y="581" width="1.1198%" height="15" fill="rgb(247,59,52)" fg:x="85074" fg:w="1319"/><text x="72.4758%" y="591.50"></text></g><g><title>sn_rust_alloc (1,317 samples, 1.12%)</title><rect x="72.2275%" y="565" width="1.1181%" height="15" fill="rgb(226,110,21)" fg:x="85076" fg:w="1317"/><text x="72.4775%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (1,333 samples, 1.13%)</title><rect x="72.2156%" y="661" width="1.1317%" height="15" fill="rgb(224,176,43)" fg:x="85062" fg:w="1333"/><text x="72.4656%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (1,414 samples, 1.20%)</title><rect x="72.1655%" y="693" width="1.2005%" height="15" fill="rgb(221,73,6)" fg:x="85003" fg:w="1414"/><text x="72.4155%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (1,410 samples, 1.20%)</title><rect x="72.1689%" y="677" width="1.1971%" height="15" fill="rgb(232,78,19)" fg:x="85007" fg:w="1410"/><text x="72.4189%" y="687.50"></text></g><g><title>hashbrown::raw::inner::capacity_to_buckets (22 samples, 0.02%)</title><rect x="73.3473%" y="661" width="0.0187%" height="15" fill="rgb(233,112,48)" fg:x="86395" fg:w="22"/><text x="73.5973%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (1,694 samples, 1.44%)</title><rect x="71.9286%" y="709" width="1.4382%" height="15" fill="rgb(243,131,47)" fg:x="84724" fg:w="1694"/><text x="72.1786%" y="719.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (12,147 samples, 10.31%)</title><rect x="63.0585%" y="1077" width="10.3125%" height="15" fill="rgb(226,51,1)" fg:x="74276" fg:w="12147"/><text x="63.3085%" y="1087.50">tremor_runtime:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,137 samples, 10.30%)</title><rect x="63.0670%" y="1061" width="10.3040%" height="15" fill="rgb(247,58,7)" fg:x="74286" fg:w="12137"/><text x="63.3170%" y="1071.50">&lt;core::future::..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (12,137 samples, 10.30%)</title><rect x="63.0670%" y="1045" width="10.3040%" height="15" fill="rgb(209,7,32)" fg:x="74286" fg:w="12137"/><text x="63.3170%" y="1055.50">tremor_runtime:..</text></g><g><title>tremor_runtime::connectors::source::build_events (12,137 samples, 10.30%)</title><rect x="63.0670%" y="1029" width="10.3040%" height="15" fill="rgb(209,39,41)" fg:x="74286" fg:w="12137"/><text x="63.3170%" y="1039.50">tremor_runtime:..</text></g><g><title>tremor_script::srs::EventPayload::try_new (12,136 samples, 10.30%)</title><rect x="63.0679%" y="1013" width="10.3032%" height="15" fill="rgb(226,182,46)" fg:x="74287" fg:w="12136"/><text x="63.3179%" y="1023.50">tremor_script::..</text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (12,136 samples, 10.30%)</title><rect x="63.0679%" y="997" width="10.3032%" height="15" fill="rgb(230,219,10)" fg:x="74287" fg:w="12136"/><text x="63.3179%" y="1007.50">tremor_runtime:..</text></g><g><title>&lt;tremor_runtime::codec::msgpack::MsgPack as tremor_runtime::codec::Codec&gt;::decode (12,136 samples, 10.30%)</title><rect x="63.0679%" y="981" width="10.3032%" height="15" fill="rgb(227,175,30)" fg:x="74287" fg:w="12136"/><text x="63.3179%" y="991.50">&lt;tremor_runtime..</text></g><g><title>rmp_serde::decode::from_slice (12,136 samples, 10.30%)</title><rect x="63.0679%" y="965" width="10.3032%" height="15" fill="rgb(217,2,50)" fg:x="74287" fg:w="12136"/><text x="63.3179%" y="975.50">rmp_serde::deco..</text></g><g><title>rmp_serde::decode::from_read_ref (12,136 samples, 10.30%)</title><rect x="63.0679%" y="949" width="10.3032%" height="15" fill="rgb(229,160,0)" fg:x="74287" fg:w="12136"/><text x="63.3179%" y="959.50">rmp_serde::deco..</text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (12,136 samples, 10.30%)</title><rect x="63.0679%" y="933" width="10.3032%" height="15" fill="rgb(207,78,37)" fg:x="74287" fg:w="12136"/><text x="63.3179%" y="943.50">tremor_value::s..</text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (12,136 samples, 10.30%)</title><rect x="63.0679%" y="917" width="10.3032%" height="15" fill="rgb(225,57,0)" fg:x="74287" fg:w="12136"/><text x="63.3179%" y="927.50">&lt;&amp;mut rmp_serde..</text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_map (12,136 samples, 10.30%)</title><rect x="63.0679%" y="901" width="10.3032%" height="15" fill="rgb(232,154,2)" fg:x="74287" fg:w="12136"/><text x="63.3179%" y="911.50">&lt;tremor_value::..</text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (1,861 samples, 1.58%)</title><rect x="71.7911%" y="885" width="1.5799%" height="15" fill="rgb(241,212,25)" fg:x="84562" fg:w="1861"/><text x="72.0411%" y="895.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (1,704 samples, 1.45%)</title><rect x="71.9244%" y="869" width="1.4467%" height="15" fill="rgb(226,69,20)" fg:x="84719" fg:w="1704"/><text x="72.1744%" y="879.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (1,704 samples, 1.45%)</title><rect x="71.9244%" y="853" width="1.4467%" height="15" fill="rgb(247,184,54)" fg:x="84719" fg:w="1704"/><text x="72.1744%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (1,704 samples, 1.45%)</title><rect x="71.9244%" y="837" width="1.4467%" height="15" fill="rgb(210,145,0)" fg:x="84719" fg:w="1704"/><text x="72.1744%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (1,704 samples, 1.45%)</title><rect x="71.9244%" y="821" width="1.4467%" height="15" fill="rgb(253,82,12)" fg:x="84719" fg:w="1704"/><text x="72.1744%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (1,704 samples, 1.45%)</title><rect x="71.9244%" y="805" width="1.4467%" height="15" fill="rgb(245,42,11)" fg:x="84719" fg:w="1704"/><text x="72.1744%" y="815.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (1,704 samples, 1.45%)</title><rect x="71.9244%" y="789" width="1.4467%" height="15" fill="rgb(219,147,32)" fg:x="84719" fg:w="1704"/><text x="72.1744%" y="799.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (1,704 samples, 1.45%)</title><rect x="71.9244%" y="773" width="1.4467%" height="15" fill="rgb(246,12,7)" fg:x="84719" fg:w="1704"/><text x="72.1744%" y="783.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (1,704 samples, 1.45%)</title><rect x="71.9244%" y="757" width="1.4467%" height="15" fill="rgb(243,50,9)" fg:x="84719" fg:w="1704"/><text x="72.1744%" y="767.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (1,704 samples, 1.45%)</title><rect x="71.9244%" y="741" width="1.4467%" height="15" fill="rgb(219,149,6)" fg:x="84719" fg:w="1704"/><text x="72.1744%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (1,704 samples, 1.45%)</title><rect x="71.9244%" y="725" width="1.4467%" height="15" fill="rgb(241,51,42)" fg:x="84719" fg:w="1704"/><text x="72.1744%" y="735.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (16 samples, 0.01%)</title><rect x="73.4771%" y="933" width="0.0136%" height="15" fill="rgb(226,128,27)" fg:x="86548" fg:w="16"/><text x="73.7271%" y="943.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (16 samples, 0.01%)</title><rect x="73.4771%" y="917" width="0.0136%" height="15" fill="rgb(244,144,4)" fg:x="86548" fg:w="16"/><text x="73.7271%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (16 samples, 0.01%)</title><rect x="73.4771%" y="901" width="0.0136%" height="15" fill="rgb(221,4,13)" fg:x="86548" fg:w="16"/><text x="73.7271%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_add (16 samples, 0.01%)</title><rect x="73.4771%" y="885" width="0.0136%" height="15" fill="rgb(208,170,28)" fg:x="86548" fg:w="16"/><text x="73.7271%" y="895.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (55 samples, 0.05%)</title><rect x="73.5154%" y="917" width="0.0467%" height="15" fill="rgb(226,131,13)" fg:x="86593" fg:w="55"/><text x="73.7654%" y="927.50"></text></g><g><title>core::mem::replace (55 samples, 0.05%)</title><rect x="73.5154%" y="901" width="0.0467%" height="15" fill="rgb(215,72,41)" fg:x="86593" fg:w="55"/><text x="73.7654%" y="911.50"></text></g><g><title>core::ptr::read (55 samples, 0.05%)</title><rect x="73.5154%" y="885" width="0.0467%" height="15" fill="rgb(243,108,20)" fg:x="86593" fg:w="55"/><text x="73.7654%" y="895.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (104 samples, 0.09%)</title><rect x="73.4950%" y="933" width="0.0883%" height="15" fill="rgb(230,189,17)" fg:x="86569" fg:w="104"/><text x="73.7450%" y="943.50"></text></g><g><title>core::mem::drop (25 samples, 0.02%)</title><rect x="73.5620%" y="917" width="0.0212%" height="15" fill="rgb(220,50,17)" fg:x="86648" fg:w="25"/><text x="73.8120%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (25 samples, 0.02%)</title><rect x="73.5620%" y="901" width="0.0212%" height="15" fill="rgb(248,152,48)" fg:x="86648" fg:w="25"/><text x="73.8120%" y="911.50"></text></g><g><title>core::mem::drop (16 samples, 0.01%)</title><rect x="73.5833%" y="933" width="0.0136%" height="15" fill="rgb(244,91,11)" fg:x="86673" fg:w="16"/><text x="73.8333%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (16 samples, 0.01%)</title><rect x="73.5833%" y="917" width="0.0136%" height="15" fill="rgb(220,157,5)" fg:x="86673" fg:w="16"/><text x="73.8333%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (14 samples, 0.01%)</title><rect x="73.5850%" y="901" width="0.0119%" height="15" fill="rgb(253,137,8)" fg:x="86675" fg:w="14"/><text x="73.8350%" y="911.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="73.5850%" y="885" width="0.0119%" height="15" fill="rgb(217,137,51)" fg:x="86675" fg:w="14"/><text x="73.8350%" y="895.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (14 samples, 0.01%)</title><rect x="73.5850%" y="869" width="0.0119%" height="15" fill="rgb(218,209,53)" fg:x="86675" fg:w="14"/><text x="73.8350%" y="879.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (14 samples, 0.01%)</title><rect x="73.5850%" y="853" width="0.0119%" height="15" fill="rgb(249,137,25)" fg:x="86675" fg:w="14"/><text x="73.8350%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (14 samples, 0.01%)</title><rect x="73.5850%" y="837" width="0.0119%" height="15" fill="rgb(239,155,26)" fg:x="86675" fg:w="14"/><text x="73.8350%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_swap (14 samples, 0.01%)</title><rect x="73.5850%" y="821" width="0.0119%" height="15" fill="rgb(227,85,46)" fg:x="86675" fg:w="14"/><text x="73.8350%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (144 samples, 0.12%)</title><rect x="73.5969%" y="933" width="0.1223%" height="15" fill="rgb(251,107,43)" fg:x="86689" fg:w="144"/><text x="73.8469%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (133 samples, 0.11%)</title><rect x="73.6062%" y="917" width="0.1129%" height="15" fill="rgb(234,170,33)" fg:x="86700" fg:w="133"/><text x="73.8562%" y="927.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (133 samples, 0.11%)</title><rect x="73.6062%" y="901" width="0.1129%" height="15" fill="rgb(206,29,35)" fg:x="86700" fg:w="133"/><text x="73.8562%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (126 samples, 0.11%)</title><rect x="73.6121%" y="885" width="0.1070%" height="15" fill="rgb(227,138,25)" fg:x="86707" fg:w="126"/><text x="73.8621%" y="895.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (126 samples, 0.11%)</title><rect x="73.6121%" y="869" width="0.1070%" height="15" fill="rgb(249,131,35)" fg:x="86707" fg:w="126"/><text x="73.8621%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (126 samples, 0.11%)</title><rect x="73.6121%" y="853" width="0.1070%" height="15" fill="rgb(239,6,40)" fg:x="86707" fg:w="126"/><text x="73.8621%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_swap (126 samples, 0.11%)</title><rect x="73.6121%" y="837" width="0.1070%" height="15" fill="rgb(246,136,47)" fg:x="86707" fg:w="126"/><text x="73.8621%" y="847.50"></text></g><g><title>core::task::wake::Waker::will_wake (21 samples, 0.02%)</title><rect x="73.7225%" y="933" width="0.0178%" height="15" fill="rgb(253,58,26)" fg:x="86837" fg:w="21"/><text x="73.9725%" y="943.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (21 samples, 0.02%)</title><rect x="73.7225%" y="917" width="0.0178%" height="15" fill="rgb(237,141,10)" fg:x="86837" fg:w="21"/><text x="73.9725%" y="927.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (20 samples, 0.02%)</title><rect x="73.7234%" y="901" width="0.0170%" height="15" fill="rgb(234,156,12)" fg:x="86838" fg:w="20"/><text x="73.9734%" y="911.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (20 samples, 0.02%)</title><rect x="73.7234%" y="885" width="0.0170%" height="15" fill="rgb(243,224,36)" fg:x="86838" fg:w="20"/><text x="73.9734%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (188 samples, 0.16%)</title><rect x="73.7548%" y="869" width="0.1596%" height="15" fill="rgb(205,229,51)" fg:x="86875" fg:w="188"/><text x="74.0048%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (188 samples, 0.16%)</title><rect x="73.7548%" y="853" width="0.1596%" height="15" fill="rgb(223,189,4)" fg:x="86875" fg:w="188"/><text x="74.0048%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (24 samples, 0.02%)</title><rect x="73.9144%" y="853" width="0.0204%" height="15" fill="rgb(249,167,54)" fg:x="87063" fg:w="24"/><text x="74.1644%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (24 samples, 0.02%)</title><rect x="73.9144%" y="837" width="0.0204%" height="15" fill="rgb(218,34,28)" fg:x="87063" fg:w="24"/><text x="74.1644%" y="847.50"></text></g><g><title>core::hint::spin_loop (569 samples, 0.48%)</title><rect x="73.9373%" y="837" width="0.4831%" height="15" fill="rgb(232,109,42)" fg:x="87090" fg:w="569"/><text x="74.1873%" y="847.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (569 samples, 0.48%)</title><rect x="73.9373%" y="821" width="0.4831%" height="15" fill="rgb(248,214,46)" fg:x="87090" fg:w="569"/><text x="74.1873%" y="831.50"></text></g><g><title>event_listener::Inner::lock (828 samples, 0.70%)</title><rect x="73.7403%" y="933" width="0.7030%" height="15" fill="rgb(244,216,40)" fg:x="86858" fg:w="828"/><text x="73.9903%" y="943.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (820 samples, 0.70%)</title><rect x="73.7471%" y="917" width="0.6962%" height="15" fill="rgb(231,226,31)" fg:x="86866" fg:w="820"/><text x="73.9971%" y="927.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (813 samples, 0.69%)</title><rect x="73.7531%" y="901" width="0.6902%" height="15" fill="rgb(238,38,43)" fg:x="86873" fg:w="813"/><text x="74.0031%" y="911.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (813 samples, 0.69%)</title><rect x="73.7531%" y="885" width="0.6902%" height="15" fill="rgb(208,88,43)" fg:x="86873" fg:w="813"/><text x="74.0031%" y="895.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (623 samples, 0.53%)</title><rect x="73.9144%" y="869" width="0.5289%" height="15" fill="rgb(205,136,37)" fg:x="87063" fg:w="623"/><text x="74.1644%" y="879.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (599 samples, 0.51%)</title><rect x="73.9347%" y="853" width="0.5085%" height="15" fill="rgb(237,34,14)" fg:x="87087" fg:w="599"/><text x="74.1847%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (27 samples, 0.02%)</title><rect x="74.4204%" y="837" width="0.0229%" height="15" fill="rgb(236,193,44)" fg:x="87659" fg:w="27"/><text x="74.6704%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_load (27 samples, 0.02%)</title><rect x="74.4204%" y="821" width="0.0229%" height="15" fill="rgb(231,48,10)" fg:x="87659" fg:w="27"/><text x="74.6704%" y="831.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (1,190 samples, 1.01%)</title><rect x="73.4466%" y="949" width="1.0103%" height="15" fill="rgb(213,141,34)" fg:x="86512" fg:w="1190"/><text x="73.6966%" y="959.50"></text></g><g><title>event_listener::List::remove (16 samples, 0.01%)</title><rect x="74.4433%" y="933" width="0.0136%" height="15" fill="rgb(249,130,34)" fg:x="87686" fg:w="16"/><text x="74.6933%" y="943.50"></text></g><g><title>concurrent_queue::full_fence (44 samples, 0.04%)</title><rect x="74.5214%" y="901" width="0.0374%" height="15" fill="rgb(219,42,41)" fg:x="87778" fg:w="44"/><text x="74.7714%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (41 samples, 0.03%)</title><rect x="74.5239%" y="885" width="0.0348%" height="15" fill="rgb(224,100,54)" fg:x="87781" fg:w="41"/><text x="74.7739%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (41 samples, 0.03%)</title><rect x="74.5239%" y="869" width="0.0348%" height="15" fill="rgb(229,200,27)" fg:x="87781" fg:w="41"/><text x="74.7739%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (41 samples, 0.03%)</title><rect x="74.5239%" y="853" width="0.0348%" height="15" fill="rgb(217,118,10)" fg:x="87781" fg:w="41"/><text x="74.7739%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (82 samples, 0.07%)</title><rect x="74.5587%" y="901" width="0.0696%" height="15" fill="rgb(206,22,3)" fg:x="87822" fg:w="82"/><text x="74.8087%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (82 samples, 0.07%)</title><rect x="74.5587%" y="885" width="0.0696%" height="15" fill="rgb(232,163,46)" fg:x="87822" fg:w="82"/><text x="74.8087%" y="895.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (453 samples, 0.38%)</title><rect x="74.4671%" y="933" width="0.3846%" height="15" fill="rgb(206,95,13)" fg:x="87714" fg:w="453"/><text x="74.7171%" y="943.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (435 samples, 0.37%)</title><rect x="74.4823%" y="917" width="0.3693%" height="15" fill="rgb(253,154,18)" fg:x="87732" fg:w="435"/><text x="74.7323%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (263 samples, 0.22%)</title><rect x="74.6284%" y="901" width="0.2233%" height="15" fill="rgb(219,32,23)" fg:x="87904" fg:w="263"/><text x="74.8784%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_load (263 samples, 0.22%)</title><rect x="74.6284%" y="885" width="0.2233%" height="15" fill="rgb(230,191,45)" fg:x="87904" fg:w="263"/><text x="74.8784%" y="895.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (966 samples, 0.82%)</title><rect x="74.4569%" y="949" width="0.8201%" height="15" fill="rgb(229,64,36)" fg:x="87702" fg:w="966"/><text x="74.7069%" y="959.50"></text></g><g><title>event_listener::Event::notify (501 samples, 0.43%)</title><rect x="74.8516%" y="933" width="0.4253%" height="15" fill="rgb(205,129,25)" fg:x="88167" fg:w="501"/><text x="75.1016%" y="943.50"></text></g><g><title>event_listener::full_fence (498 samples, 0.42%)</title><rect x="74.8542%" y="917" width="0.4228%" height="15" fill="rgb(254,112,7)" fg:x="88170" fg:w="498"/><text x="75.1042%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (498 samples, 0.42%)</title><rect x="74.8542%" y="901" width="0.4228%" height="15" fill="rgb(226,53,48)" fg:x="88170" fg:w="498"/><text x="75.1042%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (498 samples, 0.42%)</title><rect x="74.8542%" y="885" width="0.4228%" height="15" fill="rgb(214,153,38)" fg:x="88170" fg:w="498"/><text x="75.1042%" y="895.50"></text></g><g><title>event_listener::Inner::lock (16 samples, 0.01%)</title><rect x="75.2906%" y="901" width="0.0136%" height="15" fill="rgb(243,101,7)" fg:x="88684" fg:w="16"/><text x="75.5406%" y="911.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (16 samples, 0.01%)</title><rect x="75.2906%" y="885" width="0.0136%" height="15" fill="rgb(240,140,22)" fg:x="88684" fg:w="16"/><text x="75.5406%" y="895.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (16 samples, 0.01%)</title><rect x="75.2906%" y="869" width="0.0136%" height="15" fill="rgb(235,114,2)" fg:x="88684" fg:w="16"/><text x="75.5406%" y="879.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (16 samples, 0.01%)</title><rect x="75.2906%" y="853" width="0.0136%" height="15" fill="rgb(242,59,12)" fg:x="88684" fg:w="16"/><text x="75.5406%" y="863.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (24 samples, 0.02%)</title><rect x="75.2872%" y="917" width="0.0204%" height="15" fill="rgb(252,134,9)" fg:x="88680" fg:w="24"/><text x="75.5372%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (55 samples, 0.05%)</title><rect x="75.2821%" y="949" width="0.0467%" height="15" fill="rgb(236,4,44)" fg:x="88674" fg:w="55"/><text x="75.5321%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (51 samples, 0.04%)</title><rect x="75.2855%" y="933" width="0.0433%" height="15" fill="rgb(254,172,41)" fg:x="88678" fg:w="51"/><text x="75.5355%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (25 samples, 0.02%)</title><rect x="75.3075%" y="917" width="0.0212%" height="15" fill="rgb(244,63,20)" fg:x="88704" fg:w="25"/><text x="75.5575%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.02%)</title><rect x="75.3075%" y="901" width="0.0212%" height="15" fill="rgb(250,73,31)" fg:x="88704" fg:w="25"/><text x="75.5575%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (25 samples, 0.02%)</title><rect x="75.3075%" y="885" width="0.0212%" height="15" fill="rgb(241,38,36)" fg:x="88704" fg:w="25"/><text x="75.5575%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_sub (25 samples, 0.02%)</title><rect x="75.3075%" y="869" width="0.0212%" height="15" fill="rgb(245,211,2)" fg:x="88704" fg:w="25"/><text x="75.5575%" y="879.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (30 samples, 0.03%)</title><rect x="75.3347%" y="933" width="0.0255%" height="15" fill="rgb(206,120,28)" fg:x="88736" fg:w="30"/><text x="75.5847%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (30 samples, 0.03%)</title><rect x="75.3347%" y="917" width="0.0255%" height="15" fill="rgb(211,59,34)" fg:x="88736" fg:w="30"/><text x="75.5847%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_add (30 samples, 0.03%)</title><rect x="75.3347%" y="901" width="0.0255%" height="15" fill="rgb(233,168,5)" fg:x="88736" fg:w="30"/><text x="75.5847%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (20 samples, 0.02%)</title><rect x="75.3602%" y="933" width="0.0170%" height="15" fill="rgb(234,33,13)" fg:x="88766" fg:w="20"/><text x="75.6102%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (19 samples, 0.02%)</title><rect x="75.3610%" y="917" width="0.0161%" height="15" fill="rgb(231,150,26)" fg:x="88767" fg:w="19"/><text x="75.6110%" y="927.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.02%)</title><rect x="75.3610%" y="901" width="0.0161%" height="15" fill="rgb(217,191,4)" fg:x="88767" fg:w="19"/><text x="75.6110%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (19 samples, 0.02%)</title><rect x="75.3610%" y="885" width="0.0161%" height="15" fill="rgb(246,198,38)" fg:x="88767" fg:w="19"/><text x="75.6110%" y="895.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (19 samples, 0.02%)</title><rect x="75.3610%" y="869" width="0.0161%" height="15" fill="rgb(245,64,37)" fg:x="88767" fg:w="19"/><text x="75.6110%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (19 samples, 0.02%)</title><rect x="75.3610%" y="853" width="0.0161%" height="15" fill="rgb(250,30,36)" fg:x="88767" fg:w="19"/><text x="75.6110%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_swap (19 samples, 0.02%)</title><rect x="75.3610%" y="837" width="0.0161%" height="15" fill="rgb(217,86,53)" fg:x="88767" fg:w="19"/><text x="75.6110%" y="847.50"></text></g><g><title>event_listener::Inner::lock (22 samples, 0.02%)</title><rect x="75.3780%" y="933" width="0.0187%" height="15" fill="rgb(228,157,16)" fg:x="88787" fg:w="22"/><text x="75.6280%" y="943.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (22 samples, 0.02%)</title><rect x="75.3780%" y="917" width="0.0187%" height="15" fill="rgb(217,59,31)" fg:x="88787" fg:w="22"/><text x="75.6280%" y="927.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (20 samples, 0.02%)</title><rect x="75.3797%" y="901" width="0.0170%" height="15" fill="rgb(237,138,41)" fg:x="88789" fg:w="20"/><text x="75.6297%" y="911.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (20 samples, 0.02%)</title><rect x="75.3797%" y="885" width="0.0170%" height="15" fill="rgb(227,91,49)" fg:x="88789" fg:w="20"/><text x="75.6297%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (20 samples, 0.02%)</title><rect x="75.3797%" y="869" width="0.0170%" height="15" fill="rgb(247,21,44)" fg:x="88789" fg:w="20"/><text x="75.6297%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (20 samples, 0.02%)</title><rect x="75.3797%" y="853" width="0.0170%" height="15" fill="rgb(219,210,51)" fg:x="88789" fg:w="20"/><text x="75.6297%" y="863.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (2,356 samples, 2.00%)</title><rect x="73.4135%" y="965" width="2.0002%" height="15" fill="rgb(209,140,6)" fg:x="86473" fg:w="2356"/><text x="73.6635%" y="975.50">&lt;..</text></g><g><title>event_listener::Event::listen (100 samples, 0.08%)</title><rect x="75.3288%" y="949" width="0.0849%" height="15" fill="rgb(221,188,24)" fg:x="88729" fg:w="100"/><text x="75.5788%" y="959.50"></text></g><g><title>event_listener::full_fence (18 samples, 0.02%)</title><rect x="75.3984%" y="933" width="0.0153%" height="15" fill="rgb(232,154,20)" fg:x="88811" fg:w="18"/><text x="75.6484%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (17 samples, 0.01%)</title><rect x="75.3992%" y="917" width="0.0144%" height="15" fill="rgb(244,137,50)" fg:x="88812" fg:w="17"/><text x="75.6492%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (17 samples, 0.01%)</title><rect x="75.3992%" y="901" width="0.0144%" height="15" fill="rgb(225,185,43)" fg:x="88812" fg:w="17"/><text x="75.6492%" y="911.50"></text></g><g><title>[libc-2.31.so] (81 samples, 0.07%)</title><rect x="75.4145%" y="949" width="0.0688%" height="15" fill="rgb(213,205,38)" fg:x="88830" fg:w="81"/><text x="75.6645%" y="959.50"></text></g><g><title>[libc-2.31.so] (542 samples, 0.46%)</title><rect x="75.4858%" y="917" width="0.4601%" height="15" fill="rgb(236,73,12)" fg:x="88914" fg:w="542"/><text x="75.7358%" y="927.50"></text></g><g><title>sn_rust_dealloc (44 samples, 0.04%)</title><rect x="75.9477%" y="837" width="0.0374%" height="15" fill="rgb(235,219,13)" fg:x="89458" fg:w="44"/><text x="76.1977%" y="847.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (3,160 samples, 2.68%)</title><rect x="73.3990%" y="997" width="2.6828%" height="15" fill="rgb(218,59,36)" fg:x="86456" fg:w="3160"/><text x="73.6490%" y="1007.50">&lt;a..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (3,154 samples, 2.68%)</title><rect x="73.4041%" y="981" width="2.6777%" height="15" fill="rgb(205,110,39)" fg:x="86462" fg:w="3154"/><text x="73.6541%" y="991.50">&lt;a..</text></g><g><title>core::option::Option&lt;T&gt;::map (787 samples, 0.67%)</title><rect x="75.4137%" y="965" width="0.6681%" height="15" fill="rgb(218,206,42)" fg:x="88829" fg:w="787"/><text x="75.6637%" y="975.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (705 samples, 0.60%)</title><rect x="75.4833%" y="949" width="0.5985%" height="15" fill="rgb(248,125,24)" fg:x="88911" fg:w="705"/><text x="75.7333%" y="959.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}}::{{closure}} (705 samples, 0.60%)</title><rect x="75.4833%" y="933" width="0.5985%" height="15" fill="rgb(242,28,27)" fg:x="88911" fg:w="705"/><text x="75.7333%" y="943.50"></text></g><g><title>alloc::alloc::box_free (160 samples, 0.14%)</title><rect x="75.9460%" y="917" width="0.1358%" height="15" fill="rgb(216,228,15)" fg:x="89456" fg:w="160"/><text x="76.1960%" y="927.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (160 samples, 0.14%)</title><rect x="75.9460%" y="901" width="0.1358%" height="15" fill="rgb(235,116,46)" fg:x="89456" fg:w="160"/><text x="76.1960%" y="911.50"></text></g><g><title>alloc::alloc::dealloc (160 samples, 0.14%)</title><rect x="75.9460%" y="885" width="0.1358%" height="15" fill="rgb(224,18,32)" fg:x="89456" fg:w="160"/><text x="76.1960%" y="895.50"></text></g><g><title>__rg_dealloc (160 samples, 0.14%)</title><rect x="75.9460%" y="869" width="0.1358%" height="15" fill="rgb(252,5,12)" fg:x="89456" fg:w="160"/><text x="76.1960%" y="879.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (160 samples, 0.14%)</title><rect x="75.9460%" y="853" width="0.1358%" height="15" fill="rgb(251,36,5)" fg:x="89456" fg:w="160"/><text x="76.1960%" y="863.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (114 samples, 0.10%)</title><rect x="75.9850%" y="837" width="0.0968%" height="15" fill="rgb(217,53,14)" fg:x="89502" fg:w="114"/><text x="76.2350%" y="847.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,709 samples, 3.15%)</title><rect x="73.3821%" y="1061" width="3.1489%" height="15" fill="rgb(215,86,45)" fg:x="86436" fg:w="3709"/><text x="73.6321%" y="1071.50">&lt;as..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (3,702 samples, 3.14%)</title><rect x="73.3880%" y="1045" width="3.1429%" height="15" fill="rgb(242,169,11)" fg:x="86443" fg:w="3702"/><text x="73.6380%" y="1055.50">&lt;tr..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (3,702 samples, 3.14%)</title><rect x="73.3880%" y="1029" width="3.1429%" height="15" fill="rgb(211,213,45)" fg:x="86443" fg:w="3702"/><text x="73.6380%" y="1039.50">&lt;as..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (3,702 samples, 3.14%)</title><rect x="73.3880%" y="1013" width="3.1429%" height="15" fill="rgb(205,88,11)" fg:x="86443" fg:w="3702"/><text x="73.6380%" y="1023.50">&lt;tr..</text></g><g><title>[libc-2.31.so] (529 samples, 0.45%)</title><rect x="76.0818%" y="997" width="0.4491%" height="15" fill="rgb(252,69,26)" fg:x="89616" fg:w="529"/><text x="76.3318%" y="1007.50"></text></g><g><title>&lt;value_trait::generator::DumpGenerator&lt;VT&gt; as value_trait::generator::BaseGenerator&gt;::write (12 samples, 0.01%)</title><rect x="76.5530%" y="917" width="0.0102%" height="15" fill="rgb(246,123,37)" fg:x="90171" fg:w="12"/><text x="76.8030%" y="927.50"></text></g><g><title>value_trait::generator::extend_from_slice (12 samples, 0.01%)</title><rect x="76.5530%" y="901" width="0.0102%" height="15" fill="rgb(212,205,5)" fg:x="90171" fg:w="12"/><text x="76.8030%" y="911.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (83 samples, 0.07%)</title><rect x="76.5309%" y="981" width="0.0705%" height="15" fill="rgb(253,148,0)" fg:x="90145" fg:w="83"/><text x="76.7809%" y="991.50"></text></g><g><title>&lt;tremor_pipeline::op::grouper::bucket::Grouper as tremor_pipeline::op::Operator&gt;::on_event (83 samples, 0.07%)</title><rect x="76.5309%" y="965" width="0.0705%" height="15" fill="rgb(239,22,4)" fg:x="90145" fg:w="83"/><text x="76.7809%" y="975.50"></text></g><g><title>tremor_value::value::serialize::&lt;impl value_trait::Writable for tremor_value::value::Value&gt;::encode (83 samples, 0.07%)</title><rect x="76.5309%" y="949" width="0.0705%" height="15" fill="rgb(226,26,53)" fg:x="90145" fg:w="83"/><text x="76.7809%" y="959.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (83 samples, 0.07%)</title><rect x="76.5309%" y="933" width="0.0705%" height="15" fill="rgb(225,229,45)" fg:x="90145" fg:w="83"/><text x="76.7809%" y="943.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string (45 samples, 0.04%)</title><rect x="76.5632%" y="917" width="0.0382%" height="15" fill="rgb(220,60,37)" fg:x="90183" fg:w="45"/><text x="76.8132%" y="927.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (39 samples, 0.03%)</title><rect x="76.5683%" y="901" width="0.0331%" height="15" fill="rgb(217,180,35)" fg:x="90189" fg:w="39"/><text x="76.8183%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (23 samples, 0.02%)</title><rect x="76.7117%" y="853" width="0.0195%" height="15" fill="rgb(229,7,53)" fg:x="90358" fg:w="23"/><text x="76.9617%" y="863.50"></text></g><g><title>tremor_script::interpreter::LocalStack::with_size (145 samples, 0.12%)</title><rect x="76.6116%" y="901" width="0.1231%" height="15" fill="rgb(254,137,3)" fg:x="90240" fg:w="145"/><text x="76.8616%" y="911.50"></text></g><g><title>alloc::vec::from_elem (145 samples, 0.12%)</title><rect x="76.6116%" y="885" width="0.1231%" height="15" fill="rgb(215,140,41)" fg:x="90240" fg:w="145"/><text x="76.8616%" y="895.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (145 samples, 0.12%)</title><rect x="76.6116%" y="869" width="0.1231%" height="15" fill="rgb(250,80,15)" fg:x="90240" fg:w="145"/><text x="76.8616%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (15 samples, 0.01%)</title><rect x="76.9274%" y="661" width="0.0127%" height="15" fill="rgb(252,191,6)" fg:x="90612" fg:w="15"/><text x="77.1774%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (15 samples, 0.01%)</title><rect x="76.9274%" y="645" width="0.0127%" height="15" fill="rgb(246,217,18)" fg:x="90612" fg:w="15"/><text x="77.1774%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (15 samples, 0.01%)</title><rect x="76.9274%" y="629" width="0.0127%" height="15" fill="rgb(223,93,7)" fg:x="90612" fg:w="15"/><text x="77.1774%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (15 samples, 0.01%)</title><rect x="76.9274%" y="613" width="0.0127%" height="15" fill="rgb(225,55,52)" fg:x="90612" fg:w="15"/><text x="77.1774%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (15 samples, 0.01%)</title><rect x="76.9274%" y="597" width="0.0127%" height="15" fill="rgb(240,31,24)" fg:x="90612" fg:w="15"/><text x="77.1774%" y="607.50"></text></g><g><title>alloc::alloc::alloc (15 samples, 0.01%)</title><rect x="76.9274%" y="581" width="0.0127%" height="15" fill="rgb(205,56,52)" fg:x="90612" fg:w="15"/><text x="77.1774%" y="591.50"></text></g><g><title>__rg_alloc (15 samples, 0.01%)</title><rect x="76.9274%" y="565" width="0.0127%" height="15" fill="rgb(246,146,12)" fg:x="90612" fg:w="15"/><text x="77.1774%" y="575.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (15 samples, 0.01%)</title><rect x="76.9274%" y="549" width="0.0127%" height="15" fill="rgb(239,84,36)" fg:x="90612" fg:w="15"/><text x="77.1774%" y="559.50"></text></g><g><title>sn_rust_alloc (15 samples, 0.01%)</title><rect x="76.9274%" y="533" width="0.0127%" height="15" fill="rgb(207,41,40)" fg:x="90612" fg:w="15"/><text x="77.1774%" y="543.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::clone::Clone&gt;::clone (19 samples, 0.02%)</title><rect x="76.9265%" y="789" width="0.0161%" height="15" fill="rgb(241,179,25)" fg:x="90611" fg:w="19"/><text x="77.1765%" y="799.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (18 samples, 0.02%)</title><rect x="76.9274%" y="773" width="0.0153%" height="15" fill="rgb(210,0,34)" fg:x="90612" fg:w="18"/><text x="77.1774%" y="783.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (18 samples, 0.02%)</title><rect x="76.9274%" y="757" width="0.0153%" height="15" fill="rgb(225,217,29)" fg:x="90612" fg:w="18"/><text x="77.1774%" y="767.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (18 samples, 0.02%)</title><rect x="76.9274%" y="741" width="0.0153%" height="15" fill="rgb(216,191,38)" fg:x="90612" fg:w="18"/><text x="77.1774%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (18 samples, 0.02%)</title><rect x="76.9274%" y="725" width="0.0153%" height="15" fill="rgb(232,140,52)" fg:x="90612" fg:w="18"/><text x="77.1774%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (18 samples, 0.02%)</title><rect x="76.9274%" y="709" width="0.0153%" height="15" fill="rgb(223,158,51)" fg:x="90612" fg:w="18"/><text x="77.1774%" y="719.50"></text></g><g><title>alloc::slice::hack::to_vec (18 samples, 0.02%)</title><rect x="76.9274%" y="693" width="0.0153%" height="15" fill="rgb(235,29,51)" fg:x="90612" fg:w="18"/><text x="77.1774%" y="703.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (18 samples, 0.02%)</title><rect x="76.9274%" y="677" width="0.0153%" height="15" fill="rgb(215,181,18)" fg:x="90612" fg:w="18"/><text x="77.1774%" y="687.50"></text></g><g><title>alloc::borrow::Cow&lt;B&gt;::into_owned (24 samples, 0.02%)</title><rect x="76.9231%" y="837" width="0.0204%" height="15" fill="rgb(227,125,34)" fg:x="90607" fg:w="24"/><text x="77.1731%" y="847.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (23 samples, 0.02%)</title><rect x="76.9240%" y="821" width="0.0195%" height="15" fill="rgb(230,197,49)" fg:x="90608" fg:w="23"/><text x="77.1740%" y="831.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (23 samples, 0.02%)</title><rect x="76.9240%" y="805" width="0.0195%" height="15" fill="rgb(239,141,16)" fg:x="90608" fg:w="23"/><text x="77.1740%" y="815.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (28 samples, 0.02%)</title><rect x="76.9435%" y="837" width="0.0238%" height="15" fill="rgb(225,105,43)" fg:x="90631" fg:w="28"/><text x="77.1935%" y="847.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (152 samples, 0.13%)</title><rect x="76.8552%" y="869" width="0.1290%" height="15" fill="rgb(214,131,14)" fg:x="90527" fg:w="152"/><text x="77.1052%" y="879.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (128 samples, 0.11%)</title><rect x="76.8756%" y="853" width="0.1087%" height="15" fill="rgb(229,177,11)" fg:x="90551" fg:w="128"/><text x="77.1256%" y="863.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (20 samples, 0.02%)</title><rect x="76.9673%" y="837" width="0.0170%" height="15" fill="rgb(231,180,14)" fg:x="90659" fg:w="20"/><text x="77.2173%" y="847.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (12 samples, 0.01%)</title><rect x="77.0386%" y="837" width="0.0102%" height="15" fill="rgb(232,88,2)" fg:x="90743" fg:w="12"/><text x="77.2886%" y="847.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (99 samples, 0.08%)</title><rect x="77.0547%" y="709" width="0.0840%" height="15" fill="rgb(205,220,8)" fg:x="90762" fg:w="99"/><text x="77.3047%" y="719.50"></text></g><g><title>tremor_value::value::cmp::&lt;impl core::cmp::PartialEq for tremor_value::value::Value&gt;::eq (99 samples, 0.08%)</title><rect x="77.0547%" y="693" width="0.0840%" height="15" fill="rgb(225,23,53)" fg:x="90762" fg:w="99"/><text x="77.3047%" y="703.50"></text></g><g><title>[libc-2.31.so] (27 samples, 0.02%)</title><rect x="77.1159%" y="677" width="0.0229%" height="15" fill="rgb(213,62,29)" fg:x="90834" fg:w="27"/><text x="77.3659%" y="687.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (107 samples, 0.09%)</title><rect x="77.0505%" y="789" width="0.0908%" height="15" fill="rgb(227,75,7)" fg:x="90757" fg:w="107"/><text x="77.3005%" y="799.50"></text></g><g><title>tremor_script::std_lib::array::load::&lt;impl tremor_script::registry::TremorFn for tremor_script::std_lib::array::load::contains::Func&gt;::invoke::{{closure}} (107 samples, 0.09%)</title><rect x="77.0505%" y="773" width="0.0908%" height="15" fill="rgb(207,105,14)" fg:x="90757" fg:w="107"/><text x="77.3005%" y="783.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (103 samples, 0.09%)</title><rect x="77.0539%" y="757" width="0.0874%" height="15" fill="rgb(245,62,29)" fg:x="90761" fg:w="103"/><text x="77.3039%" y="767.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (103 samples, 0.09%)</title><rect x="77.0539%" y="741" width="0.0874%" height="15" fill="rgb(236,202,4)" fg:x="90761" fg:w="103"/><text x="77.3039%" y="751.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (103 samples, 0.09%)</title><rect x="77.0539%" y="725" width="0.0874%" height="15" fill="rgb(250,67,1)" fg:x="90761" fg:w="103"/><text x="77.3039%" y="735.50"></text></g><g><title>tremor_script::ast::Invocable::invoke (117 samples, 0.10%)</title><rect x="77.0488%" y="837" width="0.0993%" height="15" fill="rgb(253,115,44)" fg:x="90755" fg:w="117"/><text x="77.2988%" y="847.50"></text></g><g><title>tremor_script::registry::TremorFnWrapper::invoke (116 samples, 0.10%)</title><rect x="77.0496%" y="821" width="0.0985%" height="15" fill="rgb(251,139,18)" fg:x="90756" fg:w="116"/><text x="77.2996%" y="831.50"></text></g><g><title>tremor_script::std_lib::array::load::&lt;impl tremor_script::registry::TremorFn for tremor_script::std_lib::array::load::contains::Func&gt;::invoke (116 samples, 0.10%)</title><rect x="77.0496%" y="805" width="0.0985%" height="15" fill="rgb(218,22,32)" fg:x="90756" fg:w="116"/><text x="77.2996%" y="815.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (219 samples, 0.19%)</title><rect x="76.9843%" y="869" width="0.1859%" height="15" fill="rgb(243,53,5)" fg:x="90679" fg:w="219"/><text x="77.2343%" y="879.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::invoke2 (204 samples, 0.17%)</title><rect x="76.9970%" y="853" width="0.1732%" height="15" fill="rgb(227,56,16)" fg:x="90694" fg:w="204"/><text x="77.2470%" y="863.50"></text></g><g><title>tremor_script::interpreter::imut_expr::eval_for_fn_arg (26 samples, 0.02%)</title><rect x="77.1481%" y="837" width="0.0221%" height="15" fill="rgb(245,53,0)" fg:x="90872" fg:w="26"/><text x="77.3981%" y="847.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (452 samples, 0.38%)</title><rect x="76.8230%" y="885" width="0.3837%" height="15" fill="rgb(216,170,35)" fg:x="90489" fg:w="452"/><text x="77.0730%" y="895.50"></text></g><g><title>tremor_script::interpreter::test_predicate_expr (43 samples, 0.04%)</title><rect x="77.1702%" y="869" width="0.0365%" height="15" fill="rgb(211,200,8)" fg:x="90898" fg:w="43"/><text x="77.4202%" y="879.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="77.3918%" y="869" width="0.0136%" height="15" fill="rgb(228,204,44)" fg:x="91159" fg:w="16"/><text x="77.6418%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::borrow::Cow&lt;tremor_value::value::Value&gt;&gt;&gt; (21 samples, 0.02%)</title><rect x="77.4088%" y="869" width="0.0178%" height="15" fill="rgb(214,121,17)" fg:x="91179" fg:w="21"/><text x="77.6588%" y="879.50"></text></g><g><title>tremor_script::ast::ClauseGroup&lt;Ex&gt;::precondition (43 samples, 0.04%)</title><rect x="77.4266%" y="869" width="0.0365%" height="15" fill="rgb(233,64,38)" fg:x="91200" fg:w="43"/><text x="77.6766%" y="879.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (43 samples, 0.04%)</title><rect x="77.4266%" y="853" width="0.0365%" height="15" fill="rgb(253,54,19)" fg:x="91200" fg:w="43"/><text x="77.6766%" y="863.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.02%)</title><rect x="77.7373%" y="853" width="0.0195%" height="15" fill="rgb(253,94,18)" fg:x="91566" fg:w="23"/><text x="77.9873%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::borrow::Cow&lt;tremor_value::value::Value&gt;&gt; (13 samples, 0.01%)</title><rect x="77.7568%" y="853" width="0.0110%" height="15" fill="rgb(227,57,52)" fg:x="91589" fg:w="13"/><text x="78.0068%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (109 samples, 0.09%)</title><rect x="78.4173%" y="661" width="0.0925%" height="15" fill="rgb(230,228,50)" fg:x="92367" fg:w="109"/><text x="78.6673%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (109 samples, 0.09%)</title><rect x="78.4173%" y="645" width="0.0925%" height="15" fill="rgb(217,205,27)" fg:x="92367" fg:w="109"/><text x="78.6673%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (109 samples, 0.09%)</title><rect x="78.4173%" y="629" width="0.0925%" height="15" fill="rgb(252,71,50)" fg:x="92367" fg:w="109"/><text x="78.6673%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (109 samples, 0.09%)</title><rect x="78.4173%" y="613" width="0.0925%" height="15" fill="rgb(209,86,4)" fg:x="92367" fg:w="109"/><text x="78.6673%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (109 samples, 0.09%)</title><rect x="78.4173%" y="597" width="0.0925%" height="15" fill="rgb(229,94,0)" fg:x="92367" fg:w="109"/><text x="78.6673%" y="607.50"></text></g><g><title>alloc::alloc::alloc (108 samples, 0.09%)</title><rect x="78.4182%" y="581" width="0.0917%" height="15" fill="rgb(252,223,21)" fg:x="92368" fg:w="108"/><text x="78.6682%" y="591.50"></text></g><g><title>__rg_alloc (108 samples, 0.09%)</title><rect x="78.4182%" y="565" width="0.0917%" height="15" fill="rgb(230,210,4)" fg:x="92368" fg:w="108"/><text x="78.6682%" y="575.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (108 samples, 0.09%)</title><rect x="78.4182%" y="549" width="0.0917%" height="15" fill="rgb(240,149,38)" fg:x="92368" fg:w="108"/><text x="78.6682%" y="559.50"></text></g><g><title>sn_rust_alloc (103 samples, 0.09%)</title><rect x="78.4224%" y="533" width="0.0874%" height="15" fill="rgb(254,105,20)" fg:x="92373" fg:w="103"/><text x="78.6724%" y="543.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::clone::Clone&gt;::clone (148 samples, 0.13%)</title><rect x="78.4055%" y="789" width="0.1256%" height="15" fill="rgb(253,87,46)" fg:x="92353" fg:w="148"/><text x="78.6555%" y="799.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (140 samples, 0.12%)</title><rect x="78.4122%" y="773" width="0.1189%" height="15" fill="rgb(253,116,33)" fg:x="92361" fg:w="140"/><text x="78.6622%" y="783.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (140 samples, 0.12%)</title><rect x="78.4122%" y="757" width="0.1189%" height="15" fill="rgb(229,198,5)" fg:x="92361" fg:w="140"/><text x="78.6622%" y="767.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (140 samples, 0.12%)</title><rect x="78.4122%" y="741" width="0.1189%" height="15" fill="rgb(242,38,37)" fg:x="92361" fg:w="140"/><text x="78.6622%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (134 samples, 0.11%)</title><rect x="78.4173%" y="725" width="0.1138%" height="15" fill="rgb(242,69,53)" fg:x="92367" fg:w="134"/><text x="78.6673%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (134 samples, 0.11%)</title><rect x="78.4173%" y="709" width="0.1138%" height="15" fill="rgb(249,80,16)" fg:x="92367" fg:w="134"/><text x="78.6673%" y="719.50"></text></g><g><title>alloc::slice::hack::to_vec (134 samples, 0.11%)</title><rect x="78.4173%" y="693" width="0.1138%" height="15" fill="rgb(206,128,11)" fg:x="92367" fg:w="134"/><text x="78.6673%" y="703.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (134 samples, 0.11%)</title><rect x="78.4173%" y="677" width="0.1138%" height="15" fill="rgb(212,35,20)" fg:x="92367" fg:w="134"/><text x="78.6673%" y="687.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (25 samples, 0.02%)</title><rect x="78.5099%" y="661" width="0.0212%" height="15" fill="rgb(236,79,13)" fg:x="92476" fg:w="25"/><text x="78.7599%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (25 samples, 0.02%)</title><rect x="78.5099%" y="645" width="0.0212%" height="15" fill="rgb(233,123,3)" fg:x="92476" fg:w="25"/><text x="78.7599%" y="655.50"></text></g><g><title>[libc-2.31.so] (24 samples, 0.02%)</title><rect x="78.5107%" y="629" width="0.0204%" height="15" fill="rgb(214,93,52)" fg:x="92477" fg:w="24"/><text x="78.7607%" y="639.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (204 samples, 0.17%)</title><rect x="78.3596%" y="821" width="0.1732%" height="15" fill="rgb(251,37,40)" fg:x="92299" fg:w="204"/><text x="78.6096%" y="831.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (191 samples, 0.16%)</title><rect x="78.3706%" y="805" width="0.1622%" height="15" fill="rgb(227,80,54)" fg:x="92312" fg:w="191"/><text x="78.6206%" y="815.50"></text></g><g><title>alloc::borrow::Cow&lt;B&gt;::into_owned (227 samples, 0.19%)</title><rect x="78.3520%" y="837" width="0.1927%" height="15" fill="rgb(254,48,11)" fg:x="92290" fg:w="227"/><text x="78.6020%" y="847.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (272 samples, 0.23%)</title><rect x="78.5566%" y="837" width="0.2309%" height="15" fill="rgb(235,193,26)" fg:x="92531" fg:w="272"/><text x="78.8066%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::is_empty (15 samples, 0.01%)</title><rect x="78.9131%" y="821" width="0.0127%" height="15" fill="rgb(229,99,21)" fg:x="92951" fg:w="15"/><text x="79.1631%" y="831.50"></text></g><g><title>tremor_script::ast::Path::segments (41 samples, 0.03%)</title><rect x="78.9259%" y="821" width="0.0348%" height="15" fill="rgb(211,140,41)" fg:x="92966" fg:w="41"/><text x="79.1759%" y="831.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (30 samples, 0.03%)</title><rect x="79.2493%" y="805" width="0.0255%" height="15" fill="rgb(240,227,30)" fg:x="93347" fg:w="30"/><text x="79.4993%" y="815.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::free_buckets (26 samples, 0.02%)</title><rect x="79.3419%" y="629" width="0.0221%" height="15" fill="rgb(215,224,45)" fg:x="93456" fg:w="26"/><text x="79.5919%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::free_buckets (26 samples, 0.02%)</title><rect x="79.3419%" y="613" width="0.0221%" height="15" fill="rgb(206,123,31)" fg:x="93456" fg:w="26"/><text x="79.5919%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (40 samples, 0.03%)</title><rect x="79.3402%" y="677" width="0.0340%" height="15" fill="rgb(210,138,16)" fg:x="93454" fg:w="40"/><text x="79.5902%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (40 samples, 0.03%)</title><rect x="79.3402%" y="661" width="0.0340%" height="15" fill="rgb(228,57,28)" fg:x="93454" fg:w="40"/><text x="79.5902%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 0.03%)</title><rect x="79.3402%" y="645" width="0.0340%" height="15" fill="rgb(242,170,10)" fg:x="93454" fg:w="40"/><text x="79.5902%" y="655.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::is_empty_singleton (12 samples, 0.01%)</title><rect x="79.3639%" y="629" width="0.0102%" height="15" fill="rgb(228,214,39)" fg:x="93482" fg:w="12"/><text x="79.6139%" y="639.50"></text></g><g><title>sn_rust_dealloc (267 samples, 0.23%)</title><rect x="79.3741%" y="677" width="0.2267%" height="15" fill="rgb(218,179,33)" fg:x="93494" fg:w="267"/><text x="79.6241%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (414 samples, 0.35%)</title><rect x="79.3300%" y="725" width="0.3515%" height="15" fill="rgb(235,193,39)" fg:x="93442" fg:w="414"/><text x="79.5800%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (414 samples, 0.35%)</title><rect x="79.3300%" y="709" width="0.3515%" height="15" fill="rgb(219,221,36)" fg:x="93442" fg:w="414"/><text x="79.5800%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (414 samples, 0.35%)</title><rect x="79.3300%" y="693" width="0.3515%" height="15" fill="rgb(248,218,19)" fg:x="93442" fg:w="414"/><text x="79.5800%" y="703.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (95 samples, 0.08%)</title><rect x="79.6008%" y="677" width="0.0807%" height="15" fill="rgb(205,50,9)" fg:x="93761" fg:w="95"/><text x="79.8508%" y="687.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (446 samples, 0.38%)</title><rect x="79.3173%" y="741" width="0.3786%" height="15" fill="rgb(238,81,28)" fg:x="93427" fg:w="446"/><text x="79.5673%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (17 samples, 0.01%)</title><rect x="79.6815%" y="725" width="0.0144%" height="15" fill="rgb(235,110,19)" fg:x="93856" fg:w="17"/><text x="79.9315%" y="735.50"></text></g><g><title>alloc::alloc::box_free (17 samples, 0.01%)</title><rect x="79.6815%" y="709" width="0.0144%" height="15" fill="rgb(214,7,14)" fg:x="93856" fg:w="17"/><text x="79.9315%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (17 samples, 0.01%)</title><rect x="79.6815%" y="693" width="0.0144%" height="15" fill="rgb(211,77,3)" fg:x="93856" fg:w="17"/><text x="79.9315%" y="703.50"></text></g><g><title>alloc::alloc::dealloc (17 samples, 0.01%)</title><rect x="79.6815%" y="677" width="0.0144%" height="15" fill="rgb(229,5,9)" fg:x="93856" fg:w="17"/><text x="79.9315%" y="687.50"></text></g><g><title>__rg_dealloc (17 samples, 0.01%)</title><rect x="79.6815%" y="661" width="0.0144%" height="15" fill="rgb(225,90,11)" fg:x="93856" fg:w="17"/><text x="79.9315%" y="671.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (17 samples, 0.01%)</title><rect x="79.6815%" y="645" width="0.0144%" height="15" fill="rgb(242,56,8)" fg:x="93856" fg:w="17"/><text x="79.9315%" y="655.50"></text></g><g><title>sn_rust_dealloc (141 samples, 0.12%)</title><rect x="79.6959%" y="741" width="0.1197%" height="15" fill="rgb(249,212,39)" fg:x="93873" fg:w="141"/><text x="79.9459%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (644 samples, 0.55%)</title><rect x="79.2748%" y="805" width="0.5467%" height="15" fill="rgb(236,90,9)" fg:x="93377" fg:w="644"/><text x="79.5248%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (626 samples, 0.53%)</title><rect x="79.2901%" y="789" width="0.5315%" height="15" fill="rgb(206,88,35)" fg:x="93395" fg:w="626"/><text x="79.5401%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (626 samples, 0.53%)</title><rect x="79.2901%" y="773" width="0.5315%" height="15" fill="rgb(205,126,30)" fg:x="93395" fg:w="626"/><text x="79.5401%" y="783.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (626 samples, 0.53%)</title><rect x="79.2901%" y="757" width="0.5315%" height="15" fill="rgb(230,176,12)" fg:x="93395" fg:w="626"/><text x="79.5401%" y="767.50"></text></g><g><title>tremor_script::ast::Path::segments (14 samples, 0.01%)</title><rect x="79.8215%" y="805" width="0.0119%" height="15" fill="rgb(243,19,9)" fg:x="94021" fg:w="14"/><text x="80.0715%" y="815.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::new (14 samples, 0.01%)</title><rect x="79.8954%" y="693" width="0.0119%" height="15" fill="rgb(245,171,17)" fg:x="94108" fg:w="14"/><text x="80.1454%" y="703.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (148 samples, 0.13%)</title><rect x="79.9090%" y="661" width="0.1256%" height="15" fill="rgb(227,52,21)" fg:x="94124" fg:w="148"/><text x="80.1590%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (26 samples, 0.02%)</title><rect x="80.0457%" y="565" width="0.0221%" height="15" fill="rgb(238,69,14)" fg:x="94285" fg:w="26"/><text x="80.2957%" y="575.50"></text></g><g><title>hashbrown::raw::inner::h2 (29 samples, 0.02%)</title><rect x="80.0677%" y="565" width="0.0246%" height="15" fill="rgb(241,156,39)" fg:x="94311" fg:w="29"/><text x="80.3177%" y="575.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (18 samples, 0.02%)</title><rect x="80.0924%" y="565" width="0.0153%" height="15" fill="rgb(212,227,28)" fg:x="94340" fg:w="18"/><text x="80.3424%" y="575.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (18 samples, 0.02%)</title><rect x="80.0924%" y="549" width="0.0153%" height="15" fill="rgb(209,118,27)" fg:x="94340" fg:w="18"/><text x="80.3424%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (18 samples, 0.02%)</title><rect x="80.0924%" y="533" width="0.0153%" height="15" fill="rgb(226,102,5)" fg:x="94340" fg:w="18"/><text x="80.3424%" y="543.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (26 samples, 0.02%)</title><rect x="80.1077%" y="565" width="0.0221%" height="15" fill="rgb(223,34,3)" fg:x="94358" fg:w="26"/><text x="80.3577%" y="575.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (26 samples, 0.02%)</title><rect x="80.1077%" y="549" width="0.0221%" height="15" fill="rgb(221,81,38)" fg:x="94358" fg:w="26"/><text x="80.3577%" y="559.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck::{{closure}}::{{closure}} (296 samples, 0.25%)</title><rect x="79.9073%" y="677" width="0.2513%" height="15" fill="rgb(236,219,28)" fg:x="94122" fg:w="296"/><text x="80.1573%" y="687.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (146 samples, 0.12%)</title><rect x="80.0346%" y="661" width="0.1240%" height="15" fill="rgb(213,200,14)" fg:x="94272" fg:w="146"/><text x="80.2846%" y="671.50"></text></g><g><title>hashbrown::map::RawEntryBuilderMut&lt;K,V,S,A&gt;::from_key_hashed_nocheck (141 samples, 0.12%)</title><rect x="80.0389%" y="645" width="0.1197%" height="15" fill="rgb(240,33,19)" fg:x="94277" fg:w="141"/><text x="80.2889%" y="655.50"></text></g><g><title>hashbrown::map::RawEntryBuilderMut&lt;K,V,S,A&gt;::from_hash (141 samples, 0.12%)</title><rect x="80.0389%" y="629" width="0.1197%" height="15" fill="rgb(233,113,27)" fg:x="94277" fg:w="141"/><text x="80.2889%" y="639.50"></text></g><g><title>hashbrown::map::RawEntryBuilderMut&lt;K,V,S,A&gt;::search (141 samples, 0.12%)</title><rect x="80.0389%" y="613" width="0.1197%" height="15" fill="rgb(220,221,18)" fg:x="94277" fg:w="141"/><text x="80.2889%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (141 samples, 0.12%)</title><rect x="80.0389%" y="597" width="0.1197%" height="15" fill="rgb(238,92,8)" fg:x="94277" fg:w="141"/><text x="80.2889%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (141 samples, 0.12%)</title><rect x="80.0389%" y="581" width="0.1197%" height="15" fill="rgb(222,164,16)" fg:x="94277" fg:w="141"/><text x="80.2889%" y="591.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty (34 samples, 0.03%)</title><rect x="80.1297%" y="565" width="0.0289%" height="15" fill="rgb(241,119,3)" fg:x="94384" fg:w="34"/><text x="80.3797%" y="575.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (34 samples, 0.03%)</title><rect x="80.1297%" y="549" width="0.0289%" height="15" fill="rgb(241,44,8)" fg:x="94384" fg:w="34"/><text x="80.3797%" y="559.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (34 samples, 0.03%)</title><rect x="80.1297%" y="533" width="0.0289%" height="15" fill="rgb(230,36,40)" fg:x="94384" fg:w="34"/><text x="80.3797%" y="543.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_mut_key_hashed_nocheck (388 samples, 0.33%)</title><rect x="79.8504%" y="773" width="0.3294%" height="15" fill="rgb(243,16,36)" fg:x="94055" fg:w="388"/><text x="80.1004%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck (369 samples, 0.31%)</title><rect x="79.8665%" y="757" width="0.3133%" height="15" fill="rgb(231,4,26)" fg:x="94074" fg:w="369"/><text x="80.1165%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (346 samples, 0.29%)</title><rect x="79.8861%" y="741" width="0.2937%" height="15" fill="rgb(240,9,31)" fg:x="94097" fg:w="346"/><text x="80.1361%" y="751.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (344 samples, 0.29%)</title><rect x="79.8878%" y="725" width="0.2920%" height="15" fill="rgb(207,173,15)" fg:x="94099" fg:w="344"/><text x="80.1378%" y="735.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck::{{closure}} (344 samples, 0.29%)</title><rect x="79.8878%" y="709" width="0.2920%" height="15" fill="rgb(224,192,53)" fg:x="94099" fg:w="344"/><text x="80.1378%" y="719.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (321 samples, 0.27%)</title><rect x="79.9073%" y="693" width="0.2725%" height="15" fill="rgb(223,67,28)" fg:x="94122" fg:w="321"/><text x="80.1573%" y="703.50"></text></g><g><title>core::mem::replace (25 samples, 0.02%)</title><rect x="80.1586%" y="677" width="0.0212%" height="15" fill="rgb(211,20,47)" fg:x="94418" fg:w="25"/><text x="80.4086%" y="687.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (454 samples, 0.39%)</title><rect x="80.5449%" y="757" width="0.3854%" height="15" fill="rgb(240,228,2)" fg:x="94873" fg:w="454"/><text x="80.7949%" y="767.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::clone::Clone&gt;::clone (19 samples, 0.02%)</title><rect x="81.0942%" y="741" width="0.0161%" height="15" fill="rgb(248,151,12)" fg:x="95520" fg:w="19"/><text x="81.3442%" y="751.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (43 samples, 0.04%)</title><rect x="81.1103%" y="709" width="0.0365%" height="15" fill="rgb(244,8,39)" fg:x="95539" fg:w="43"/><text x="81.3603%" y="719.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (43 samples, 0.04%)</title><rect x="81.1103%" y="693" width="0.0365%" height="15" fill="rgb(222,26,8)" fg:x="95539" fg:w="43"/><text x="81.3603%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (32 samples, 0.03%)</title><rect x="81.1196%" y="677" width="0.0272%" height="15" fill="rgb(213,106,44)" fg:x="95550" fg:w="32"/><text x="81.3696%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (31 samples, 0.03%)</title><rect x="81.1205%" y="661" width="0.0263%" height="15" fill="rgb(214,129,20)" fg:x="95551" fg:w="31"/><text x="81.3705%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (19 samples, 0.02%)</title><rect x="81.1307%" y="645" width="0.0161%" height="15" fill="rgb(212,32,13)" fg:x="95563" fg:w="19"/><text x="81.3807%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (19 samples, 0.02%)</title><rect x="81.1307%" y="629" width="0.0161%" height="15" fill="rgb(208,168,33)" fg:x="95563" fg:w="19"/><text x="81.3807%" y="639.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (19 samples, 0.02%)</title><rect x="81.1307%" y="613" width="0.0161%" height="15" fill="rgb(231,207,8)" fg:x="95563" fg:w="19"/><text x="81.3807%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (13 samples, 0.01%)</title><rect x="81.1358%" y="597" width="0.0110%" height="15" fill="rgb(235,219,23)" fg:x="95569" fg:w="13"/><text x="81.3858%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (13 samples, 0.01%)</title><rect x="81.1358%" y="581" width="0.0110%" height="15" fill="rgb(226,216,26)" fg:x="95569" fg:w="13"/><text x="81.3858%" y="591.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (2,794 samples, 2.37%)</title><rect x="78.7875%" y="837" width="2.3720%" height="15" fill="rgb(239,137,16)" fg:x="92803" fg:w="2794"/><text x="79.0375%" y="847.50">tr..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (2,590 samples, 2.20%)</title><rect x="78.9607%" y="821" width="2.1988%" height="15" fill="rgb(207,12,36)" fg:x="93007" fg:w="2590"/><text x="79.2107%" y="831.50">t..</text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (1,562 samples, 1.33%)</title><rect x="79.8334%" y="805" width="1.3261%" height="15" fill="rgb(210,214,24)" fg:x="94035" fg:w="1562"/><text x="80.0834%" y="815.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (1,553 samples, 1.32%)</title><rect x="79.8411%" y="789" width="1.3185%" height="15" fill="rgb(206,56,30)" fg:x="94044" fg:w="1553"/><text x="80.0911%" y="799.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (1,154 samples, 0.98%)</title><rect x="80.1798%" y="773" width="0.9797%" height="15" fill="rgb(228,143,26)" fg:x="94443" fg:w="1154"/><text x="80.4298%" y="783.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut::{{closure}} (270 samples, 0.23%)</title><rect x="80.9303%" y="757" width="0.2292%" height="15" fill="rgb(216,218,46)" fg:x="95327" fg:w="270"/><text x="81.1803%" y="767.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (58 samples, 0.05%)</title><rect x="81.1103%" y="741" width="0.0492%" height="15" fill="rgb(206,6,19)" fg:x="95539" fg:w="58"/><text x="81.3603%" y="751.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (58 samples, 0.05%)</title><rect x="81.1103%" y="725" width="0.0492%" height="15" fill="rgb(239,177,51)" fg:x="95539" fg:w="58"/><text x="81.3603%" y="735.50"></text></g><g><title>tremor_value::value::Value::Object (15 samples, 0.01%)</title><rect x="81.1468%" y="709" width="0.0127%" height="15" fill="rgb(216,55,25)" fg:x="95582" fg:w="15"/><text x="81.3968%" y="719.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (5,046 samples, 4.28%)</title><rect x="77.4631%" y="869" width="4.2839%" height="15" fill="rgb(231,163,29)" fg:x="91243" fg:w="5046"/><text x="77.7131%" y="879.50">tremo..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (4,687 samples, 3.98%)</title><rect x="77.7679%" y="853" width="3.9791%" height="15" fill="rgb(232,149,50)" fg:x="91602" fg:w="4687"/><text x="78.0179%" y="863.50">trem..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (692 samples, 0.59%)</title><rect x="81.1595%" y="837" width="0.5875%" height="15" fill="rgb(223,142,48)" fg:x="95597" fg:w="692"/><text x="81.4095%" y="847.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::ValueAccess&gt;::as_str (69 samples, 0.06%)</title><rect x="81.6884%" y="821" width="0.0586%" height="15" fill="rgb(245,83,23)" fg:x="96220" fg:w="69"/><text x="81.9384%" y="831.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.02%)</title><rect x="82.0077%" y="821" width="0.0204%" height="15" fill="rgb(224,63,2)" fg:x="96596" fg:w="24"/><text x="82.2577%" y="831.50"></text></g><g><title>tremor_script::ast::Path::segments (18 samples, 0.02%)</title><rect x="82.0340%" y="821" width="0.0153%" height="15" fill="rgb(218,65,53)" fg:x="96627" fg:w="18"/><text x="82.2840%" y="831.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry (154 samples, 0.13%)</title><rect x="82.3090%" y="677" width="0.1307%" height="15" fill="rgb(221,84,29)" fg:x="96951" fg:w="154"/><text x="82.5590%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="82.4491%" y="565" width="0.0110%" height="15" fill="rgb(234,0,32)" fg:x="97116" fg:w="13"/><text x="82.6991%" y="575.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (13 samples, 0.01%)</title><rect x="82.4491%" y="549" width="0.0110%" height="15" fill="rgb(206,20,16)" fg:x="97116" fg:w="13"/><text x="82.6991%" y="559.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search::{{closure}} (1,138 samples, 0.97%)</title><rect x="82.4602%" y="549" width="0.9661%" height="15" fill="rgb(244,172,18)" fg:x="97129" fg:w="1138"/><text x="82.7102%" y="559.50"></text></g><g><title>hashbrown::map::equivalent::{{closure}} (1,130 samples, 0.96%)</title><rect x="82.4670%" y="533" width="0.9593%" height="15" fill="rgb(254,133,1)" fg:x="97137" fg:w="1130"/><text x="82.7170%" y="543.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (1,130 samples, 0.96%)</title><rect x="82.4670%" y="517" width="0.9593%" height="15" fill="rgb(222,206,41)" fg:x="97137" fg:w="1130"/><text x="82.7170%" y="527.50"></text></g><g><title>abi_stable::std_types::map::map_query::MapQuery&lt;K&gt;::is_equal (603 samples, 0.51%)</title><rect x="82.9144%" y="501" width="0.5119%" height="15" fill="rgb(212,3,42)" fg:x="97664" fg:w="603"/><text x="83.1644%" y="511.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (602 samples, 0.51%)</title><rect x="82.9152%" y="485" width="0.5111%" height="15" fill="rgb(241,11,4)" fg:x="97665" fg:w="602"/><text x="83.1652%" y="495.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (602 samples, 0.51%)</title><rect x="82.9152%" y="469" width="0.5111%" height="15" fill="rgb(205,19,26)" fg:x="97665" fg:w="602"/><text x="83.1652%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (595 samples, 0.51%)</title><rect x="82.9212%" y="453" width="0.5051%" height="15" fill="rgb(210,179,32)" fg:x="97672" fg:w="595"/><text x="83.1712%" y="463.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (595 samples, 0.51%)</title><rect x="82.9212%" y="437" width="0.5051%" height="15" fill="rgb(227,116,49)" fg:x="97672" fg:w="595"/><text x="83.1712%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (595 samples, 0.51%)</title><rect x="82.9212%" y="421" width="0.5051%" height="15" fill="rgb(211,146,6)" fg:x="97672" fg:w="595"/><text x="83.1712%" y="431.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (595 samples, 0.51%)</title><rect x="82.9212%" y="405" width="0.5051%" height="15" fill="rgb(219,44,39)" fg:x="97672" fg:w="595"/><text x="83.1712%" y="415.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (595 samples, 0.51%)</title><rect x="82.9212%" y="389" width="0.5051%" height="15" fill="rgb(234,128,11)" fg:x="97672" fg:w="595"/><text x="83.1712%" y="399.50"></text></g><g><title>[libc-2.31.so] (582 samples, 0.49%)</title><rect x="82.9322%" y="373" width="0.4941%" height="15" fill="rgb(220,183,53)" fg:x="97685" fg:w="582"/><text x="83.1822%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (1,152 samples, 0.98%)</title><rect x="82.4602%" y="565" width="0.9780%" height="15" fill="rgb(213,219,32)" fg:x="97129" fg:w="1152"/><text x="82.7102%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::bucket (14 samples, 0.01%)</title><rect x="83.4263%" y="549" width="0.0119%" height="15" fill="rgb(232,156,16)" fg:x="98267" fg:w="14"/><text x="83.6763%" y="559.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::from_base_index (14 samples, 0.01%)</title><rect x="83.4263%" y="533" width="0.0119%" height="15" fill="rgb(246,135,34)" fg:x="98267" fg:w="14"/><text x="83.6763%" y="543.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (435 samples, 0.37%)</title><rect x="83.4518%" y="565" width="0.3693%" height="15" fill="rgb(241,99,0)" fg:x="98297" fg:w="435"/><text x="83.7018%" y="575.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (435 samples, 0.37%)</title><rect x="83.4518%" y="549" width="0.3693%" height="15" fill="rgb(222,103,45)" fg:x="98297" fg:w="435"/><text x="83.7018%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (435 samples, 0.37%)</title><rect x="83.4518%" y="533" width="0.3693%" height="15" fill="rgb(212,57,4)" fg:x="98297" fg:w="435"/><text x="83.7018%" y="543.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (1,823 samples, 1.55%)</title><rect x="82.2870%" y="741" width="1.5477%" height="15" fill="rgb(215,68,47)" fg:x="96925" fg:w="1823"/><text x="82.5370%" y="751.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (1,819 samples, 1.54%)</title><rect x="82.2904%" y="725" width="1.5443%" height="15" fill="rgb(230,84,2)" fg:x="96929" fg:w="1819"/><text x="82.5404%" y="735.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (1,819 samples, 1.54%)</title><rect x="82.2904%" y="709" width="1.5443%" height="15" fill="rgb(220,102,14)" fg:x="96929" fg:w="1819"/><text x="82.5404%" y="719.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck::{{closure}} (1,819 samples, 1.54%)</title><rect x="82.2904%" y="693" width="1.5443%" height="15" fill="rgb(240,10,32)" fg:x="96929" fg:w="1819"/><text x="82.5404%" y="703.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_key_hashed_nocheck (1,643 samples, 1.39%)</title><rect x="82.4398%" y="677" width="1.3949%" height="15" fill="rgb(215,47,27)" fg:x="97105" fg:w="1643"/><text x="82.6898%" y="687.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_key_hashed_nocheck (1,640 samples, 1.39%)</title><rect x="82.4423%" y="661" width="1.3923%" height="15" fill="rgb(233,188,43)" fg:x="97108" fg:w="1640"/><text x="82.6923%" y="671.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_hash (1,640 samples, 1.39%)</title><rect x="82.4423%" y="645" width="1.3923%" height="15" fill="rgb(253,190,1)" fg:x="97108" fg:w="1640"/><text x="82.6923%" y="655.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search (1,640 samples, 1.39%)</title><rect x="82.4423%" y="629" width="1.3923%" height="15" fill="rgb(206,114,52)" fg:x="97108" fg:w="1640"/><text x="82.6923%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (1,635 samples, 1.39%)</title><rect x="82.4466%" y="613" width="1.3881%" height="15" fill="rgb(233,120,37)" fg:x="97113" fg:w="1635"/><text x="82.6966%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (1,635 samples, 1.39%)</title><rect x="82.4466%" y="597" width="1.3881%" height="15" fill="rgb(214,52,39)" fg:x="97113" fg:w="1635"/><text x="82.6966%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (1,635 samples, 1.39%)</title><rect x="82.4466%" y="581" width="1.3881%" height="15" fill="rgb(223,80,29)" fg:x="97113" fg:w="1635"/><text x="82.6966%" y="591.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (16 samples, 0.01%)</title><rect x="83.8211%" y="565" width="0.0136%" height="15" fill="rgb(230,101,40)" fg:x="98732" fg:w="16"/><text x="84.0711%" y="575.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (16 samples, 0.01%)</title><rect x="83.8211%" y="549" width="0.0136%" height="15" fill="rgb(219,211,8)" fg:x="98732" fg:w="16"/><text x="84.0711%" y="559.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_key_hashed_nocheck (2,104 samples, 1.79%)</title><rect x="82.0527%" y="757" width="1.7862%" height="15" fill="rgb(252,126,28)" fg:x="96649" fg:w="2104"/><text x="82.3027%" y="767.50">a..</text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (2,477 samples, 2.10%)</title><rect x="81.7470%" y="869" width="2.1029%" height="15" fill="rgb(215,56,38)" fg:x="96289" fg:w="2477"/><text x="81.9970%" y="879.50">t..</text></g><g><title>tremor_script::interpreter::resolve (2,392 samples, 2.03%)</title><rect x="81.8192%" y="853" width="2.0307%" height="15" fill="rgb(249,55,44)" fg:x="96374" fg:w="2392"/><text x="82.0692%" y="863.50">t..</text></g><g><title>tremor_script::interpreter::resolve_value (2,339 samples, 1.99%)</title><rect x="81.8642%" y="837" width="1.9858%" height="15" fill="rgb(220,221,32)" fg:x="96427" fg:w="2339"/><text x="82.1142%" y="847.50">t..</text></g><g><title>tremor_value::known_key::KnownKey::lookup (2,121 samples, 1.80%)</title><rect x="82.0493%" y="821" width="1.8007%" height="15" fill="rgb(212,216,41)" fg:x="96645" fg:w="2121"/><text x="82.2993%" y="831.50">t..</text></g><g><title>core::option::Option&lt;T&gt;::and_then (2,121 samples, 1.80%)</title><rect x="82.0493%" y="805" width="1.8007%" height="15" fill="rgb(228,213,43)" fg:x="96645" fg:w="2121"/><text x="82.2993%" y="815.50">c..</text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (2,121 samples, 1.80%)</title><rect x="82.0493%" y="789" width="1.8007%" height="15" fill="rgb(211,31,26)" fg:x="96645" fg:w="2121"/><text x="82.2993%" y="799.50">t..</text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (2,121 samples, 1.80%)</title><rect x="82.0493%" y="773" width="1.8007%" height="15" fill="rgb(229,202,19)" fg:x="96645" fg:w="2121"/><text x="82.2993%" y="783.50">t..</text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::borrow::Borrow&lt;B&gt;&gt;::borrow (89 samples, 0.08%)</title><rect x="84.3619%" y="853" width="0.0756%" height="15" fill="rgb(229,105,46)" fg:x="99369" fg:w="89"/><text x="84.6119%" y="863.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::ops::deref::Deref&gt;::deref (89 samples, 0.08%)</title><rect x="84.3619%" y="837" width="0.0756%" height="15" fill="rgb(235,108,1)" fg:x="99369" fg:w="89"/><text x="84.6119%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::borrow::Cow&lt;tremor_value::value::Value&gt;&gt; (17 samples, 0.01%)</title><rect x="84.4374%" y="853" width="0.0144%" height="15" fill="rgb(245,111,35)" fg:x="99458" fg:w="17"/><text x="84.6874%" y="863.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (73 samples, 0.06%)</title><rect x="84.4519%" y="853" width="0.0620%" height="15" fill="rgb(219,185,31)" fg:x="99475" fg:w="73"/><text x="84.7019%" y="863.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (43 samples, 0.04%)</title><rect x="84.5249%" y="837" width="0.0365%" height="15" fill="rgb(214,4,43)" fg:x="99561" fg:w="43"/><text x="84.7749%" y="847.50"></text></g><g><title>tremor_script::interpreter::test_guard (59 samples, 0.05%)</title><rect x="84.5138%" y="853" width="0.0501%" height="15" fill="rgb(235,227,40)" fg:x="99548" fg:w="59"/><text x="84.7638%" y="863.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (9,931 samples, 8.43%)</title><rect x="76.5309%" y="1045" width="8.4312%" height="15" fill="rgb(230,88,30)" fg:x="90145" fg:w="9931"/><text x="76.7809%" y="1055.50">tremor_pipel..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (9,931 samples, 8.43%)</title><rect x="76.5309%" y="1029" width="8.4312%" height="15" fill="rgb(216,217,1)" fg:x="90145" fg:w="9931"/><text x="76.7809%" y="1039.50">tremor_pipel..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (9,931 samples, 8.43%)</title><rect x="76.5309%" y="1013" width="8.4312%" height="15" fill="rgb(248,139,50)" fg:x="90145" fg:w="9931"/><text x="76.7809%" y="1023.50">tremor_pipel..</text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (9,931 samples, 8.43%)</title><rect x="76.5309%" y="997" width="8.4312%" height="15" fill="rgb(233,1,21)" fg:x="90145" fg:w="9931"/><text x="76.7809%" y="1007.50">&lt;tremor_pipe..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (9,848 samples, 8.36%)</title><rect x="76.6014%" y="981" width="8.3607%" height="15" fill="rgb(215,183,12)" fg:x="90228" fg:w="9848"/><text x="76.8514%" y="991.50">&lt;tremor_pipe..</text></g><g><title>tremor_script::srs::EventPayload::rent_mut (9,848 samples, 8.36%)</title><rect x="76.6014%" y="965" width="8.3607%" height="15" fill="rgb(229,104,42)" fg:x="90228" fg:w="9848"/><text x="76.8514%" y="975.50">tremor_scrip..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (9,848 samples, 8.36%)</title><rect x="76.6014%" y="949" width="8.3607%" height="15" fill="rgb(243,34,48)" fg:x="90228" fg:w="9848"/><text x="76.8514%" y="959.50">&lt;tremor_pipe..</text></g><g><title>tremor_script::script::Script::run (9,848 samples, 8.36%)</title><rect x="76.6014%" y="933" width="8.3607%" height="15" fill="rgb(239,11,44)" fg:x="90228" fg:w="9848"/><text x="76.8514%" y="943.50">tremor_scrip..</text></g><g><title>tremor_script::ast::Script::run (9,848 samples, 8.36%)</title><rect x="76.6014%" y="917" width="8.3607%" height="15" fill="rgb(231,98,35)" fg:x="90228" fg:w="9848"/><text x="76.8514%" y="927.50">tremor_scrip..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (9,691 samples, 8.23%)</title><rect x="76.7347%" y="901" width="8.2274%" height="15" fill="rgb(233,28,25)" fg:x="90385" fg:w="9691"/><text x="76.9847%" y="911.50">tremor_scri..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (9,135 samples, 7.76%)</title><rect x="77.2067%" y="885" width="7.7554%" height="15" fill="rgb(234,123,11)" fg:x="90941" fg:w="9135"/><text x="77.4567%" y="895.50">tremor_scri..</text></g><g><title>tremor_script::interpreter::test_predicate_expr (1,310 samples, 1.11%)</title><rect x="83.8499%" y="869" width="1.1122%" height="15" fill="rgb(220,69,3)" fg:x="98766" fg:w="1310"/><text x="84.0999%" y="879.50"></text></g><g><title>tremor_script::interpreter::val_eq (469 samples, 0.40%)</title><rect x="84.5639%" y="853" width="0.3982%" height="15" fill="rgb(214,64,36)" fg:x="99607" fg:w="469"/><text x="84.8139%" y="863.50"></text></g><g><title>[libc-2.31.so] (304 samples, 0.26%)</title><rect x="84.7040%" y="837" width="0.2581%" height="15" fill="rgb(211,138,32)" fg:x="99772" fg:w="304"/><text x="84.9540%" y="847.50"></text></g><g><title>[libc-2.31.so] (73 samples, 0.06%)</title><rect x="84.9621%" y="1013" width="0.0620%" height="15" fill="rgb(213,118,47)" fg:x="100076" fg:w="73"/><text x="85.2121%" y="1023.50"></text></g><g><title>[libc-2.31.so] (196 samples, 0.17%)</title><rect x="85.1718%" y="949" width="0.1664%" height="15" fill="rgb(243,124,49)" fg:x="100323" fg:w="196"/><text x="85.4218%" y="959.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (86 samples, 0.07%)</title><rect x="85.3662%" y="933" width="0.0730%" height="15" fill="rgb(221,30,28)" fg:x="100552" fg:w="86"/><text x="85.6162%" y="943.50"></text></g><g><title>core::ptr::write (86 samples, 0.07%)</title><rect x="85.3662%" y="917" width="0.0730%" height="15" fill="rgb(246,37,13)" fg:x="100552" fg:w="86"/><text x="85.6162%" y="927.50"></text></g><g><title>[libc-2.31.so] (84 samples, 0.07%)</title><rect x="85.3679%" y="901" width="0.0713%" height="15" fill="rgb(249,66,14)" fg:x="100554" fg:w="84"/><text x="85.6179%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (196 samples, 0.17%)</title><rect x="85.4392%" y="933" width="0.1664%" height="15" fill="rgb(213,166,5)" fg:x="100638" fg:w="196"/><text x="85.6892%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (196 samples, 0.17%)</title><rect x="85.4392%" y="917" width="0.1664%" height="15" fill="rgb(221,66,24)" fg:x="100638" fg:w="196"/><text x="85.6892%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (111 samples, 0.09%)</title><rect x="85.6056%" y="933" width="0.0942%" height="15" fill="rgb(210,132,17)" fg:x="100834" fg:w="111"/><text x="85.8556%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_load (111 samples, 0.09%)</title><rect x="85.6056%" y="917" width="0.0942%" height="15" fill="rgb(243,202,5)" fg:x="100834" fg:w="111"/><text x="85.8556%" y="927.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (700 samples, 0.59%)</title><rect x="85.1090%" y="965" width="0.5943%" height="15" fill="rgb(233,70,48)" fg:x="100249" fg:w="700"/><text x="85.3590%" y="975.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (430 samples, 0.37%)</title><rect x="85.3382%" y="949" width="0.3651%" height="15" fill="rgb(238,41,26)" fg:x="100519" fg:w="430"/><text x="85.5882%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (35 samples, 0.03%)</title><rect x="85.7083%" y="949" width="0.0297%" height="15" fill="rgb(241,19,31)" fg:x="100955" fg:w="35"/><text x="85.9583%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (32 samples, 0.03%)</title><rect x="85.7109%" y="933" width="0.0272%" height="15" fill="rgb(214,76,10)" fg:x="100958" fg:w="32"/><text x="85.9609%" y="943.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.03%)</title><rect x="85.7109%" y="917" width="0.0272%" height="15" fill="rgb(254,202,22)" fg:x="100958" fg:w="32"/><text x="85.9609%" y="927.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (32 samples, 0.03%)</title><rect x="85.7109%" y="901" width="0.0272%" height="15" fill="rgb(214,72,24)" fg:x="100958" fg:w="32"/><text x="85.9609%" y="911.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (32 samples, 0.03%)</title><rect x="85.7109%" y="885" width="0.0272%" height="15" fill="rgb(221,92,46)" fg:x="100958" fg:w="32"/><text x="85.9609%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (32 samples, 0.03%)</title><rect x="85.7109%" y="869" width="0.0272%" height="15" fill="rgb(246,13,50)" fg:x="100958" fg:w="32"/><text x="85.9609%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_swap (32 samples, 0.03%)</title><rect x="85.7109%" y="853" width="0.0272%" height="15" fill="rgb(240,165,38)" fg:x="100958" fg:w="32"/><text x="85.9609%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (16 samples, 0.01%)</title><rect x="85.7381%" y="949" width="0.0136%" height="15" fill="rgb(241,24,51)" fg:x="100990" fg:w="16"/><text x="85.9881%" y="959.50"></text></g><g><title>core::sync::atomic::atomic_load (16 samples, 0.01%)</title><rect x="85.7381%" y="933" width="0.0136%" height="15" fill="rgb(227,51,44)" fg:x="100990" fg:w="16"/><text x="85.9881%" y="943.50"></text></g><g><title>event_listener::Inner::lock (43 samples, 0.04%)</title><rect x="85.7516%" y="949" width="0.0365%" height="15" fill="rgb(231,121,3)" fg:x="101006" fg:w="43"/><text x="86.0016%" y="959.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (43 samples, 0.04%)</title><rect x="85.7516%" y="933" width="0.0365%" height="15" fill="rgb(245,3,41)" fg:x="101006" fg:w="43"/><text x="86.0016%" y="943.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (42 samples, 0.04%)</title><rect x="85.7525%" y="917" width="0.0357%" height="15" fill="rgb(214,13,26)" fg:x="101007" fg:w="42"/><text x="86.0025%" y="927.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (42 samples, 0.04%)</title><rect x="85.7525%" y="901" width="0.0357%" height="15" fill="rgb(252,75,11)" fg:x="101007" fg:w="42"/><text x="86.0025%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (42 samples, 0.04%)</title><rect x="85.7525%" y="885" width="0.0357%" height="15" fill="rgb(218,226,17)" fg:x="101007" fg:w="42"/><text x="86.0025%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (42 samples, 0.04%)</title><rect x="85.7525%" y="869" width="0.0357%" height="15" fill="rgb(248,89,38)" fg:x="101007" fg:w="42"/><text x="86.0025%" y="879.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_waker (17 samples, 0.01%)</title><rect x="85.7983%" y="901" width="0.0144%" height="15" fill="rgb(237,73,46)" fg:x="101061" fg:w="17"/><text x="86.0483%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (17 samples, 0.01%)</title><rect x="85.7983%" y="885" width="0.0144%" height="15" fill="rgb(242,78,33)" fg:x="101061" fg:w="17"/><text x="86.0483%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_sub (17 samples, 0.01%)</title><rect x="85.7983%" y="869" width="0.0144%" height="15" fill="rgb(235,60,3)" fg:x="101061" fg:w="17"/><text x="86.0483%" y="879.50"></text></g><g><title>async_executor::Sleepers::notify (27 samples, 0.02%)</title><rect x="85.8170%" y="853" width="0.0229%" height="15" fill="rgb(216,172,19)" fg:x="101083" fg:w="27"/><text x="86.0670%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (22 samples, 0.02%)</title><rect x="85.8213%" y="837" width="0.0187%" height="15" fill="rgb(227,6,42)" fg:x="101088" fg:w="22"/><text x="86.0713%" y="847.50"></text></g><g><title>core::ptr::read (20 samples, 0.02%)</title><rect x="85.8230%" y="821" width="0.0170%" height="15" fill="rgb(223,207,42)" fg:x="101090" fg:w="20"/><text x="86.0730%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (47 samples, 0.04%)</title><rect x="85.8399%" y="853" width="0.0399%" height="15" fill="rgb(246,138,30)" fg:x="101110" fg:w="47"/><text x="86.0899%" y="863.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (47 samples, 0.04%)</title><rect x="85.8399%" y="837" width="0.0399%" height="15" fill="rgb(251,199,47)" fg:x="101110" fg:w="47"/><text x="86.0899%" y="847.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (47 samples, 0.04%)</title><rect x="85.8399%" y="821" width="0.0399%" height="15" fill="rgb(228,218,44)" fg:x="101110" fg:w="47"/><text x="86.0899%" y="831.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (47 samples, 0.04%)</title><rect x="85.8399%" y="805" width="0.0399%" height="15" fill="rgb(220,68,6)" fg:x="101110" fg:w="47"/><text x="86.0899%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (47 samples, 0.04%)</title><rect x="85.8399%" y="789" width="0.0399%" height="15" fill="rgb(240,60,26)" fg:x="101110" fg:w="47"/><text x="86.0899%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_swap (47 samples, 0.04%)</title><rect x="85.8399%" y="773" width="0.0399%" height="15" fill="rgb(211,200,19)" fg:x="101110" fg:w="47"/><text x="86.0899%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (22 samples, 0.02%)</title><rect x="85.8798%" y="853" width="0.0187%" height="15" fill="rgb(242,145,30)" fg:x="101157" fg:w="22"/><text x="86.1298%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (22 samples, 0.02%)</title><rect x="85.8798%" y="837" width="0.0187%" height="15" fill="rgb(225,64,13)" fg:x="101157" fg:w="22"/><text x="86.1298%" y="847.50"></text></g><g><title>async_io::reactor::Reactor::notify (15 samples, 0.01%)</title><rect x="85.9045%" y="805" width="0.0127%" height="15" fill="rgb(218,103,35)" fg:x="101186" fg:w="15"/><text x="86.1545%" y="815.50"></text></g><g><title>polling::Poller::notify (14 samples, 0.01%)</title><rect x="85.9053%" y="789" width="0.0119%" height="15" fill="rgb(216,93,46)" fg:x="101187" fg:w="14"/><text x="86.1553%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (53 samples, 0.04%)</title><rect x="85.9562%" y="773" width="0.0450%" height="15" fill="rgb(225,159,27)" fg:x="101247" fg:w="53"/><text x="86.2062%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_swap (53 samples, 0.04%)</title><rect x="85.9562%" y="757" width="0.0450%" height="15" fill="rgb(225,204,11)" fg:x="101247" fg:w="53"/><text x="86.2062%" y="767.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (13 samples, 0.01%)</title><rect x="86.0012%" y="773" width="0.0110%" height="15" fill="rgb(205,56,4)" fg:x="101300" fg:w="13"/><text x="86.2512%" y="783.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (13 samples, 0.01%)</title><rect x="86.0012%" y="757" width="0.0110%" height="15" fill="rgb(206,6,35)" fg:x="101300" fg:w="13"/><text x="86.2512%" y="767.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::notify_one (13 samples, 0.01%)</title><rect x="86.0012%" y="741" width="0.0110%" height="15" fill="rgb(247,73,52)" fg:x="101300" fg:w="13"/><text x="86.2512%" y="751.50"></text></g><g><title>parking::Unparker::unpark (113 samples, 0.10%)</title><rect x="85.9257%" y="805" width="0.0959%" height="15" fill="rgb(246,97,4)" fg:x="101211" fg:w="113"/><text x="86.1757%" y="815.50"></text></g><g><title>parking::Inner::unpark (88 samples, 0.07%)</title><rect x="85.9469%" y="789" width="0.0747%" height="15" fill="rgb(212,37,15)" fg:x="101236" fg:w="88"/><text x="86.1969%" y="799.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (152 samples, 0.13%)</title><rect x="85.8985%" y="821" width="0.1290%" height="15" fill="rgb(208,130,40)" fg:x="101179" fg:w="152"/><text x="86.1485%" y="831.50"></text></g><g><title>core::task::wake::Waker::wake (198 samples, 0.17%)</title><rect x="85.8985%" y="853" width="0.1681%" height="15" fill="rgb(236,55,29)" fg:x="101179" fg:w="198"/><text x="86.1485%" y="863.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (198 samples, 0.17%)</title><rect x="85.8985%" y="837" width="0.1681%" height="15" fill="rgb(209,156,45)" fg:x="101179" fg:w="198"/><text x="86.1485%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (46 samples, 0.04%)</title><rect x="86.0276%" y="821" width="0.0391%" height="15" fill="rgb(249,107,4)" fg:x="101331" fg:w="46"/><text x="86.2776%" y="831.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (46 samples, 0.04%)</title><rect x="86.0276%" y="805" width="0.0391%" height="15" fill="rgb(227,7,13)" fg:x="101331" fg:w="46"/><text x="86.2776%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (45 samples, 0.04%)</title><rect x="86.0284%" y="789" width="0.0382%" height="15" fill="rgb(250,129,14)" fg:x="101332" fg:w="45"/><text x="86.2784%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_sub (45 samples, 0.04%)</title><rect x="86.0284%" y="773" width="0.0382%" height="15" fill="rgb(229,92,13)" fg:x="101332" fg:w="45"/><text x="86.2784%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (46 samples, 0.04%)</title><rect x="86.0793%" y="805" width="0.0391%" height="15" fill="rgb(245,98,39)" fg:x="101392" fg:w="46"/><text x="86.3293%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (46 samples, 0.04%)</title><rect x="86.0793%" y="789" width="0.0391%" height="15" fill="rgb(234,135,48)" fg:x="101392" fg:w="46"/><text x="86.3293%" y="799.50"></text></g><g><title>core::hint::spin_loop (13 samples, 0.01%)</title><rect x="86.1311%" y="773" width="0.0110%" height="15" fill="rgb(230,98,28)" fg:x="101453" fg:w="13"/><text x="86.3811%" y="783.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (13 samples, 0.01%)</title><rect x="86.1311%" y="757" width="0.0110%" height="15" fill="rgb(223,121,0)" fg:x="101453" fg:w="13"/><text x="86.3811%" y="767.50"></text></g><g><title>async_executor::State::notify (393 samples, 0.33%)</title><rect x="85.8145%" y="869" width="0.3336%" height="15" fill="rgb(234,173,33)" fg:x="101080" fg:w="393"/><text x="86.0645%" y="879.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (96 samples, 0.08%)</title><rect x="86.0666%" y="853" width="0.0815%" height="15" fill="rgb(245,47,8)" fg:x="101377" fg:w="96"/><text x="86.3166%" y="863.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (85 samples, 0.07%)</title><rect x="86.0759%" y="837" width="0.0722%" height="15" fill="rgb(205,17,20)" fg:x="101388" fg:w="85"/><text x="86.3259%" y="847.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (85 samples, 0.07%)</title><rect x="86.0759%" y="821" width="0.0722%" height="15" fill="rgb(232,151,16)" fg:x="101388" fg:w="85"/><text x="86.3259%" y="831.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (35 samples, 0.03%)</title><rect x="86.1184%" y="805" width="0.0297%" height="15" fill="rgb(208,30,32)" fg:x="101438" fg:w="35"/><text x="86.3684%" y="815.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (20 samples, 0.02%)</title><rect x="86.1311%" y="789" width="0.0170%" height="15" fill="rgb(254,26,3)" fg:x="101453" fg:w="20"/><text x="86.3811%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (67 samples, 0.06%)</title><rect x="86.1600%" y="837" width="0.0569%" height="15" fill="rgb(240,177,30)" fg:x="101487" fg:w="67"/><text x="86.4100%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (67 samples, 0.06%)</title><rect x="86.1600%" y="821" width="0.0569%" height="15" fill="rgb(248,76,44)" fg:x="101487" fg:w="67"/><text x="86.4100%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (43 samples, 0.04%)</title><rect x="86.2169%" y="837" width="0.0365%" height="15" fill="rgb(241,186,54)" fg:x="101554" fg:w="43"/><text x="86.4669%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_or (43 samples, 0.04%)</title><rect x="86.2169%" y="821" width="0.0365%" height="15" fill="rgb(249,171,29)" fg:x="101554" fg:w="43"/><text x="86.4669%" y="831.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (518 samples, 0.44%)</title><rect x="85.8145%" y="885" width="0.4398%" height="15" fill="rgb(237,151,44)" fg:x="101080" fg:w="518"/><text x="86.0645%" y="895.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (125 samples, 0.11%)</title><rect x="86.1481%" y="869" width="0.1061%" height="15" fill="rgb(228,174,30)" fg:x="101473" fg:w="125"/><text x="86.3981%" y="879.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (120 samples, 0.10%)</title><rect x="86.1524%" y="853" width="0.1019%" height="15" fill="rgb(252,14,37)" fg:x="101478" fg:w="120"/><text x="86.4024%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (94 samples, 0.08%)</title><rect x="86.2542%" y="885" width="0.0798%" height="15" fill="rgb(207,111,40)" fg:x="101598" fg:w="94"/><text x="86.5042%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (94 samples, 0.08%)</title><rect x="86.2542%" y="869" width="0.0798%" height="15" fill="rgb(248,171,54)" fg:x="101598" fg:w="94"/><text x="86.5042%" y="879.50"></text></g><g><title>event_listener::List::notify (659 samples, 0.56%)</title><rect x="85.7881%" y="949" width="0.5595%" height="15" fill="rgb(211,127,2)" fg:x="101049" fg:w="659"/><text x="86.0381%" y="959.50"></text></g><g><title>core::task::wake::Waker::wake (649 samples, 0.55%)</title><rect x="85.7966%" y="933" width="0.5510%" height="15" fill="rgb(236,87,47)" fg:x="101059" fg:w="649"/><text x="86.0466%" y="943.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (648 samples, 0.55%)</title><rect x="85.7975%" y="917" width="0.5501%" height="15" fill="rgb(223,190,45)" fg:x="101060" fg:w="648"/><text x="86.0475%" y="927.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (630 samples, 0.53%)</title><rect x="85.8128%" y="901" width="0.5349%" height="15" fill="rgb(215,5,16)" fg:x="101078" fg:w="630"/><text x="86.0628%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (16 samples, 0.01%)</title><rect x="86.3340%" y="885" width="0.0136%" height="15" fill="rgb(252,82,33)" fg:x="101692" fg:w="16"/><text x="86.5840%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_load (16 samples, 0.01%)</title><rect x="86.3340%" y="869" width="0.0136%" height="15" fill="rgb(247,213,44)" fg:x="101692" fg:w="16"/><text x="86.5840%" y="879.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (2,179 samples, 1.85%)</title><rect x="85.0996%" y="981" width="1.8499%" height="15" fill="rgb(205,196,44)" fg:x="100238" fg:w="2179"/><text x="85.3496%" y="991.50">a..</text></g><g><title>event_listener::Event::notify (1,468 samples, 1.25%)</title><rect x="85.7032%" y="965" width="1.2463%" height="15" fill="rgb(237,96,54)" fg:x="100949" fg:w="1468"/><text x="85.9532%" y="975.50"></text></g><g><title>event_listener::full_fence (709 samples, 0.60%)</title><rect x="86.3476%" y="949" width="0.6019%" height="15" fill="rgb(230,113,34)" fg:x="101708" fg:w="709"/><text x="86.5976%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (707 samples, 0.60%)</title><rect x="86.3493%" y="933" width="0.6002%" height="15" fill="rgb(221,224,12)" fg:x="101710" fg:w="707"/><text x="86.5993%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (707 samples, 0.60%)</title><rect x="86.3493%" y="917" width="0.6002%" height="15" fill="rgb(219,112,44)" fg:x="101710" fg:w="707"/><text x="86.5993%" y="927.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (2,314 samples, 1.96%)</title><rect x="85.0767%" y="997" width="1.9645%" height="15" fill="rgb(210,31,13)" fg:x="100211" fg:w="2314"/><text x="85.3267%" y="1007.50">&lt;..</text></g><g><title>event_listener::Event::notify (96 samples, 0.08%)</title><rect x="86.9597%" y="981" width="0.0815%" height="15" fill="rgb(230,25,16)" fg:x="102429" fg:w="96"/><text x="87.2097%" y="991.50"></text></g><g><title>event_listener::full_fence (90 samples, 0.08%)</title><rect x="86.9648%" y="965" width="0.0764%" height="15" fill="rgb(246,108,53)" fg:x="102435" fg:w="90"/><text x="87.2148%" y="975.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (87 samples, 0.07%)</title><rect x="86.9674%" y="949" width="0.0739%" height="15" fill="rgb(241,172,50)" fg:x="102438" fg:w="87"/><text x="87.2174%" y="959.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (87 samples, 0.07%)</title><rect x="86.9674%" y="933" width="0.0739%" height="15" fill="rgb(235,141,10)" fg:x="102438" fg:w="87"/><text x="87.2174%" y="943.50"></text></g><g><title>[libc-2.31.so] (321 samples, 0.27%)</title><rect x="87.0446%" y="997" width="0.2725%" height="15" fill="rgb(220,174,43)" fg:x="102529" fg:w="321"/><text x="87.2946%" y="1007.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (16,421 samples, 13.94%)</title><rect x="73.3812%" y="1077" width="13.9410%" height="15" fill="rgb(215,181,40)" fg:x="86435" fg:w="16421"/><text x="73.6312%" y="1087.50">tremor_runtime::pipel..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,711 samples, 10.79%)</title><rect x="76.5309%" y="1061" width="10.7913%" height="15" fill="rgb(230,97,2)" fg:x="90145" fg:w="12711"/><text x="76.7809%" y="1071.50">&lt;core::future::f..</text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (2,780 samples, 2.36%)</title><rect x="84.9621%" y="1045" width="2.3602%" height="15" fill="rgb(211,25,27)" fg:x="100076" fg:w="2780"/><text x="85.2121%" y="1055.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,780 samples, 2.36%)</title><rect x="84.9621%" y="1029" width="2.3602%" height="15" fill="rgb(230,87,26)" fg:x="100076" fg:w="2780"/><text x="85.2121%" y="1039.50">&lt;c..</text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (2,707 samples, 2.30%)</title><rect x="85.0241%" y="1013" width="2.2982%" height="15" fill="rgb(227,160,17)" fg:x="100149" fg:w="2707"/><text x="85.2741%" y="1023.50">t..</text></g><g><title>tremor_runtime::postprocessor::postprocess (39 samples, 0.03%)</title><rect x="87.3231%" y="1077" width="0.0331%" height="15" fill="rgb(244,85,34)" fg:x="102857" fg:w="39"/><text x="87.5731%" y="1087.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.02%)</title><rect x="87.4394%" y="933" width="0.0161%" height="15" fill="rgb(207,70,0)" fg:x="102994" fg:w="19"/><text x="87.6894%" y="943.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search::{{closure}} (65 samples, 0.06%)</title><rect x="87.6720%" y="661" width="0.0552%" height="15" fill="rgb(223,129,7)" fg:x="103268" fg:w="65"/><text x="87.9220%" y="671.50"></text></g><g><title>hashbrown::map::equivalent::{{closure}} (58 samples, 0.05%)</title><rect x="87.6780%" y="645" width="0.0492%" height="15" fill="rgb(246,105,7)" fg:x="103275" fg:w="58"/><text x="87.9280%" y="655.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (58 samples, 0.05%)</title><rect x="87.6780%" y="629" width="0.0492%" height="15" fill="rgb(215,154,42)" fg:x="103275" fg:w="58"/><text x="87.9280%" y="639.50"></text></g><g><title>abi_stable::std_types::map::map_query::MapQuery&lt;K&gt;::is_equal (44 samples, 0.04%)</title><rect x="87.6899%" y="613" width="0.0374%" height="15" fill="rgb(220,215,30)" fg:x="103289" fg:w="44"/><text x="87.9399%" y="623.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (40 samples, 0.03%)</title><rect x="87.6932%" y="597" width="0.0340%" height="15" fill="rgb(228,81,51)" fg:x="103293" fg:w="40"/><text x="87.9432%" y="607.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (40 samples, 0.03%)</title><rect x="87.6932%" y="581" width="0.0340%" height="15" fill="rgb(247,71,54)" fg:x="103293" fg:w="40"/><text x="87.9432%" y="591.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (36 samples, 0.03%)</title><rect x="87.6966%" y="565" width="0.0306%" height="15" fill="rgb(234,176,34)" fg:x="103297" fg:w="36"/><text x="87.9466%" y="575.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (36 samples, 0.03%)</title><rect x="87.6966%" y="549" width="0.0306%" height="15" fill="rgb(241,103,54)" fg:x="103297" fg:w="36"/><text x="87.9466%" y="559.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (36 samples, 0.03%)</title><rect x="87.6966%" y="533" width="0.0306%" height="15" fill="rgb(228,22,34)" fg:x="103297" fg:w="36"/><text x="87.9466%" y="543.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (36 samples, 0.03%)</title><rect x="87.6966%" y="517" width="0.0306%" height="15" fill="rgb(241,179,48)" fg:x="103297" fg:w="36"/><text x="87.9466%" y="527.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (36 samples, 0.03%)</title><rect x="87.6966%" y="501" width="0.0306%" height="15" fill="rgb(235,167,37)" fg:x="103297" fg:w="36"/><text x="87.9466%" y="511.50"></text></g><g><title>[libc-2.31.so] (34 samples, 0.03%)</title><rect x="87.6983%" y="485" width="0.0289%" height="15" fill="rgb(213,109,30)" fg:x="103299" fg:w="34"/><text x="87.9483%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (69 samples, 0.06%)</title><rect x="87.6720%" y="677" width="0.0586%" height="15" fill="rgb(222,172,16)" fg:x="103268" fg:w="69"/><text x="87.9220%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (138 samples, 0.12%)</title><rect x="87.6338%" y="853" width="0.1172%" height="15" fill="rgb(233,192,5)" fg:x="103223" fg:w="138"/><text x="87.8838%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (133 samples, 0.11%)</title><rect x="87.6381%" y="837" width="0.1129%" height="15" fill="rgb(247,189,41)" fg:x="103228" fg:w="133"/><text x="87.8881%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (133 samples, 0.11%)</title><rect x="87.6381%" y="821" width="0.1129%" height="15" fill="rgb(218,134,47)" fg:x="103228" fg:w="133"/><text x="87.8881%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck::{{closure}} (133 samples, 0.11%)</title><rect x="87.6381%" y="805" width="0.1129%" height="15" fill="rgb(216,29,3)" fg:x="103228" fg:w="133"/><text x="87.8881%" y="815.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_key_hashed_nocheck (113 samples, 0.10%)</title><rect x="87.6550%" y="789" width="0.0959%" height="15" fill="rgb(246,140,12)" fg:x="103248" fg:w="113"/><text x="87.9050%" y="799.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_key_hashed_nocheck (112 samples, 0.10%)</title><rect x="87.6559%" y="773" width="0.0951%" height="15" fill="rgb(230,136,11)" fg:x="103249" fg:w="112"/><text x="87.9059%" y="783.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_hash (112 samples, 0.10%)</title><rect x="87.6559%" y="757" width="0.0951%" height="15" fill="rgb(247,22,47)" fg:x="103249" fg:w="112"/><text x="87.9059%" y="767.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search (112 samples, 0.10%)</title><rect x="87.6559%" y="741" width="0.0951%" height="15" fill="rgb(218,84,22)" fg:x="103249" fg:w="112"/><text x="87.9059%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (105 samples, 0.09%)</title><rect x="87.6618%" y="725" width="0.0891%" height="15" fill="rgb(216,87,39)" fg:x="103256" fg:w="105"/><text x="87.9118%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (105 samples, 0.09%)</title><rect x="87.6618%" y="709" width="0.0891%" height="15" fill="rgb(221,178,8)" fg:x="103256" fg:w="105"/><text x="87.9118%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (105 samples, 0.09%)</title><rect x="87.6618%" y="693" width="0.0891%" height="15" fill="rgb(230,42,11)" fg:x="103256" fg:w="105"/><text x="87.9118%" y="703.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_key_hashed_nocheck (341 samples, 0.29%)</title><rect x="87.4649%" y="869" width="0.2895%" height="15" fill="rgb(237,229,4)" fg:x="103024" fg:w="341"/><text x="87.7149%" y="879.50"></text></g><g><title>tremor_script::ast::Script::run (470 samples, 0.40%)</title><rect x="87.3613%" y="1077" width="0.3990%" height="15" fill="rgb(222,31,33)" fg:x="102902" fg:w="470"/><text x="87.6113%" y="1087.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (465 samples, 0.39%)</title><rect x="87.3655%" y="1061" width="0.3948%" height="15" fill="rgb(210,17,39)" fg:x="102907" fg:w="465"/><text x="87.6155%" y="1071.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (465 samples, 0.39%)</title><rect x="87.3655%" y="1045" width="0.3948%" height="15" fill="rgb(244,93,20)" fg:x="102907" fg:w="465"/><text x="87.6155%" y="1055.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (465 samples, 0.39%)</title><rect x="87.3655%" y="1029" width="0.3948%" height="15" fill="rgb(210,40,47)" fg:x="102907" fg:w="465"/><text x="87.6155%" y="1039.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (465 samples, 0.39%)</title><rect x="87.3655%" y="1013" width="0.3948%" height="15" fill="rgb(239,211,47)" fg:x="102907" fg:w="465"/><text x="87.6155%" y="1023.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (465 samples, 0.39%)</title><rect x="87.3655%" y="997" width="0.3948%" height="15" fill="rgb(251,223,49)" fg:x="102907" fg:w="465"/><text x="87.6155%" y="1007.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (465 samples, 0.39%)</title><rect x="87.3655%" y="981" width="0.3948%" height="15" fill="rgb(221,149,5)" fg:x="102907" fg:w="465"/><text x="87.6155%" y="991.50"></text></g><g><title>tremor_script::interpreter::resolve (465 samples, 0.39%)</title><rect x="87.3655%" y="965" width="0.3948%" height="15" fill="rgb(219,224,51)" fg:x="102907" fg:w="465"/><text x="87.6155%" y="975.50"></text></g><g><title>tremor_script::interpreter::resolve_value (465 samples, 0.39%)</title><rect x="87.3655%" y="949" width="0.3948%" height="15" fill="rgb(223,7,8)" fg:x="102907" fg:w="465"/><text x="87.6155%" y="959.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup (349 samples, 0.30%)</title><rect x="87.4640%" y="933" width="0.2963%" height="15" fill="rgb(241,217,22)" fg:x="103023" fg:w="349"/><text x="87.7140%" y="943.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (348 samples, 0.30%)</title><rect x="87.4649%" y="917" width="0.2954%" height="15" fill="rgb(248,209,0)" fg:x="103024" fg:w="348"/><text x="87.7149%" y="927.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (348 samples, 0.30%)</title><rect x="87.4649%" y="901" width="0.2954%" height="15" fill="rgb(217,205,4)" fg:x="103024" fg:w="348"/><text x="87.7149%" y="911.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (348 samples, 0.30%)</title><rect x="87.4649%" y="885" width="0.2954%" height="15" fill="rgb(228,124,39)" fg:x="103024" fg:w="348"/><text x="87.7149%" y="895.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (41 samples, 0.03%)</title><rect x="87.7603%" y="1077" width="0.0348%" height="15" fill="rgb(250,116,42)" fg:x="103372" fg:w="41"/><text x="88.0103%" y="1087.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (12 samples, 0.01%)</title><rect x="87.8333%" y="693" width="0.0102%" height="15" fill="rgb(223,202,9)" fg:x="103458" fg:w="12"/><text x="88.0833%" y="703.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search::{{closure}} (12 samples, 0.01%)</title><rect x="87.8333%" y="677" width="0.0102%" height="15" fill="rgb(242,222,40)" fg:x="103458" fg:w="12"/><text x="88.0833%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (16 samples, 0.01%)</title><rect x="87.8308%" y="869" width="0.0136%" height="15" fill="rgb(229,99,46)" fg:x="103455" fg:w="16"/><text x="88.0808%" y="879.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (16 samples, 0.01%)</title><rect x="87.8308%" y="853" width="0.0136%" height="15" fill="rgb(225,56,46)" fg:x="103455" fg:w="16"/><text x="88.0808%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (16 samples, 0.01%)</title><rect x="87.8308%" y="837" width="0.0136%" height="15" fill="rgb(227,94,5)" fg:x="103455" fg:w="16"/><text x="88.0808%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck::{{closure}} (16 samples, 0.01%)</title><rect x="87.8308%" y="821" width="0.0136%" height="15" fill="rgb(205,112,38)" fg:x="103455" fg:w="16"/><text x="88.0808%" y="831.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_key_hashed_nocheck (15 samples, 0.01%)</title><rect x="87.8316%" y="805" width="0.0127%" height="15" fill="rgb(231,133,46)" fg:x="103456" fg:w="15"/><text x="88.0816%" y="815.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_key_hashed_nocheck (15 samples, 0.01%)</title><rect x="87.8316%" y="789" width="0.0127%" height="15" fill="rgb(217,16,9)" fg:x="103456" fg:w="15"/><text x="88.0816%" y="799.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_hash (15 samples, 0.01%)</title><rect x="87.8316%" y="773" width="0.0127%" height="15" fill="rgb(249,173,9)" fg:x="103456" fg:w="15"/><text x="88.0816%" y="783.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search (15 samples, 0.01%)</title><rect x="87.8316%" y="757" width="0.0127%" height="15" fill="rgb(205,163,53)" fg:x="103456" fg:w="15"/><text x="88.0816%" y="767.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (14 samples, 0.01%)</title><rect x="87.8325%" y="741" width="0.0119%" height="15" fill="rgb(217,54,41)" fg:x="103457" fg:w="14"/><text x="88.0825%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (14 samples, 0.01%)</title><rect x="87.8325%" y="725" width="0.0119%" height="15" fill="rgb(228,216,12)" fg:x="103457" fg:w="14"/><text x="88.0825%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (14 samples, 0.01%)</title><rect x="87.8325%" y="709" width="0.0119%" height="15" fill="rgb(244,228,15)" fg:x="103457" fg:w="14"/><text x="88.0825%" y="719.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (47 samples, 0.04%)</title><rect x="87.8053%" y="1077" width="0.0399%" height="15" fill="rgb(221,176,53)" fg:x="103425" fg:w="47"/><text x="88.0553%" y="1087.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (34 samples, 0.03%)</title><rect x="87.8163%" y="1061" width="0.0289%" height="15" fill="rgb(205,94,34)" fg:x="103438" fg:w="34"/><text x="88.0663%" y="1071.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (34 samples, 0.03%)</title><rect x="87.8163%" y="1045" width="0.0289%" height="15" fill="rgb(213,110,48)" fg:x="103438" fg:w="34"/><text x="88.0663%" y="1055.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (34 samples, 0.03%)</title><rect x="87.8163%" y="1029" width="0.0289%" height="15" fill="rgb(236,142,28)" fg:x="103438" fg:w="34"/><text x="88.0663%" y="1039.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (34 samples, 0.03%)</title><rect x="87.8163%" y="1013" width="0.0289%" height="15" fill="rgb(225,135,29)" fg:x="103438" fg:w="34"/><text x="88.0663%" y="1023.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (34 samples, 0.03%)</title><rect x="87.8163%" y="997" width="0.0289%" height="15" fill="rgb(252,45,31)" fg:x="103438" fg:w="34"/><text x="88.0663%" y="1007.50"></text></g><g><title>tremor_script::interpreter::resolve (34 samples, 0.03%)</title><rect x="87.8163%" y="981" width="0.0289%" height="15" fill="rgb(211,187,50)" fg:x="103438" fg:w="34"/><text x="88.0663%" y="991.50"></text></g><g><title>tremor_script::interpreter::resolve_value (34 samples, 0.03%)</title><rect x="87.8163%" y="965" width="0.0289%" height="15" fill="rgb(229,109,7)" fg:x="103438" fg:w="34"/><text x="88.0663%" y="975.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup (31 samples, 0.03%)</title><rect x="87.8189%" y="949" width="0.0263%" height="15" fill="rgb(251,131,51)" fg:x="103441" fg:w="31"/><text x="88.0689%" y="959.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (31 samples, 0.03%)</title><rect x="87.8189%" y="933" width="0.0263%" height="15" fill="rgb(251,180,35)" fg:x="103441" fg:w="31"/><text x="88.0689%" y="943.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (31 samples, 0.03%)</title><rect x="87.8189%" y="917" width="0.0263%" height="15" fill="rgb(211,46,32)" fg:x="103441" fg:w="31"/><text x="88.0689%" y="927.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (31 samples, 0.03%)</title><rect x="87.8189%" y="901" width="0.0263%" height="15" fill="rgb(248,123,17)" fg:x="103441" fg:w="31"/><text x="88.0689%" y="911.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_key_hashed_nocheck (31 samples, 0.03%)</title><rect x="87.8189%" y="885" width="0.0263%" height="15" fill="rgb(227,141,18)" fg:x="103441" fg:w="31"/><text x="88.0689%" y="895.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (16 samples, 0.01%)</title><rect x="87.8452%" y="1077" width="0.0136%" height="15" fill="rgb(216,102,9)" fg:x="103472" fg:w="16"/><text x="88.0952%" y="1087.50"></text></g><g><title>tremor_script::interpreter::val_eq (67 samples, 0.06%)</title><rect x="87.8639%" y="1077" width="0.0569%" height="15" fill="rgb(253,47,13)" fg:x="103494" fg:w="67"/><text x="88.1139%" y="1087.50"></text></g><g><title>core::mem::swap (26 samples, 0.02%)</title><rect x="87.9666%" y="645" width="0.0221%" height="15" fill="rgb(226,93,23)" fg:x="103615" fg:w="26"/><text x="88.2166%" y="655.50"></text></g><g><title>core::mem::swap_simple (26 samples, 0.02%)</title><rect x="87.9666%" y="629" width="0.0221%" height="15" fill="rgb(247,104,17)" fg:x="103615" fg:w="26"/><text x="88.2166%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (44 samples, 0.04%)</title><rect x="87.9641%" y="709" width="0.0374%" height="15" fill="rgb(233,203,26)" fg:x="103612" fg:w="44"/><text x="88.2141%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (44 samples, 0.04%)</title><rect x="87.9641%" y="693" width="0.0374%" height="15" fill="rgb(244,98,49)" fg:x="103612" fg:w="44"/><text x="88.2141%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (44 samples, 0.04%)</title><rect x="87.9641%" y="677" width="0.0374%" height="15" fill="rgb(235,134,22)" fg:x="103612" fg:w="44"/><text x="88.2141%" y="687.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (44 samples, 0.04%)</title><rect x="87.9641%" y="661" width="0.0374%" height="15" fill="rgb(221,70,32)" fg:x="103612" fg:w="44"/><text x="88.2141%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (13 samples, 0.01%)</title><rect x="87.9904%" y="645" width="0.0110%" height="15" fill="rgb(238,15,50)" fg:x="103643" fg:w="13"/><text x="88.2404%" y="655.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (100 samples, 0.08%)</title><rect x="87.9250%" y="949" width="0.0849%" height="15" fill="rgb(215,221,48)" fg:x="103566" fg:w="100"/><text x="88.1750%" y="959.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (100 samples, 0.08%)</title><rect x="87.9250%" y="933" width="0.0849%" height="15" fill="rgb(236,73,3)" fg:x="103566" fg:w="100"/><text x="88.1750%" y="943.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (100 samples, 0.08%)</title><rect x="87.9250%" y="917" width="0.0849%" height="15" fill="rgb(250,107,11)" fg:x="103566" fg:w="100"/><text x="88.1750%" y="927.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (100 samples, 0.08%)</title><rect x="87.9250%" y="901" width="0.0849%" height="15" fill="rgb(242,39,14)" fg:x="103566" fg:w="100"/><text x="88.1750%" y="911.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (100 samples, 0.08%)</title><rect x="87.9250%" y="885" width="0.0849%" height="15" fill="rgb(248,164,37)" fg:x="103566" fg:w="100"/><text x="88.1750%" y="895.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (100 samples, 0.08%)</title><rect x="87.9250%" y="869" width="0.0849%" height="15" fill="rgb(217,60,12)" fg:x="103566" fg:w="100"/><text x="88.1750%" y="879.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (100 samples, 0.08%)</title><rect x="87.9250%" y="853" width="0.0849%" height="15" fill="rgb(240,125,29)" fg:x="103566" fg:w="100"/><text x="88.1750%" y="863.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}} (100 samples, 0.08%)</title><rect x="87.9250%" y="837" width="0.0849%" height="15" fill="rgb(208,207,28)" fg:x="103566" fg:w="100"/><text x="88.1750%" y="847.50"></text></g><g><title>abi_stable::traits::ErasedType::run_downcast_as_mut (100 samples, 0.08%)</title><rect x="87.9250%" y="821" width="0.0849%" height="15" fill="rgb(209,159,27)" fg:x="103566" fg:w="100"/><text x="88.1750%" y="831.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}}::{{closure}} (100 samples, 0.08%)</title><rect x="87.9250%" y="805" width="0.0849%" height="15" fill="rgb(251,176,53)" fg:x="103566" fg:w="100"/><text x="88.1750%" y="815.50"></text></g><g><title>halfbrown::raw_entry::RawVacantEntryMut&lt;K,V,S&gt;::insert (100 samples, 0.08%)</title><rect x="87.9250%" y="789" width="0.0849%" height="15" fill="rgb(211,85,7)" fg:x="103566" fg:w="100"/><text x="88.1750%" y="799.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert (100 samples, 0.08%)</title><rect x="87.9250%" y="773" width="0.0849%" height="15" fill="rgb(216,64,54)" fg:x="103566" fg:w="100"/><text x="88.1750%" y="783.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert_hashed_nocheck (100 samples, 0.08%)</title><rect x="87.9250%" y="757" width="0.0849%" height="15" fill="rgb(217,54,24)" fg:x="103566" fg:w="100"/><text x="88.1750%" y="767.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_entry (77 samples, 0.07%)</title><rect x="87.9445%" y="741" width="0.0654%" height="15" fill="rgb(208,206,53)" fg:x="103589" fg:w="77"/><text x="88.1945%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (63 samples, 0.05%)</title><rect x="87.9564%" y="725" width="0.0535%" height="15" fill="rgb(251,74,39)" fg:x="103603" fg:w="63"/><text x="88.2064%" y="735.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (117 samples, 0.10%)</title><rect x="87.9250%" y="981" width="0.0993%" height="15" fill="rgb(226,47,5)" fg:x="103566" fg:w="117"/><text x="88.1750%" y="991.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (117 samples, 0.10%)</title><rect x="87.9250%" y="965" width="0.0993%" height="15" fill="rgb(234,111,33)" fg:x="103566" fg:w="117"/><text x="88.1750%" y="975.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (17 samples, 0.01%)</title><rect x="88.0099%" y="949" width="0.0144%" height="15" fill="rgb(251,14,10)" fg:x="103666" fg:w="17"/><text x="88.2599%" y="959.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (17 samples, 0.01%)</title><rect x="88.0099%" y="933" width="0.0144%" height="15" fill="rgb(232,43,0)" fg:x="103666" fg:w="17"/><text x="88.2599%" y="943.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search::{{closure}} (22 samples, 0.02%)</title><rect x="88.0753%" y="613" width="0.0187%" height="15" fill="rgb(222,68,43)" fg:x="103743" fg:w="22"/><text x="88.3253%" y="623.50"></text></g><g><title>hashbrown::map::equivalent::{{closure}} (21 samples, 0.02%)</title><rect x="88.0761%" y="597" width="0.0178%" height="15" fill="rgb(217,24,23)" fg:x="103744" fg:w="21"/><text x="88.3261%" y="607.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (21 samples, 0.02%)</title><rect x="88.0761%" y="581" width="0.0178%" height="15" fill="rgb(229,209,14)" fg:x="103744" fg:w="21"/><text x="88.3261%" y="591.50"></text></g><g><title>abi_stable::std_types::map::map_query::MapQuery&lt;K&gt;::is_equal (12 samples, 0.01%)</title><rect x="88.0838%" y="565" width="0.0102%" height="15" fill="rgb(250,149,48)" fg:x="103753" fg:w="12"/><text x="88.3338%" y="575.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (12 samples, 0.01%)</title><rect x="88.0838%" y="549" width="0.0102%" height="15" fill="rgb(210,120,37)" fg:x="103753" fg:w="12"/><text x="88.3338%" y="559.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (12 samples, 0.01%)</title><rect x="88.0838%" y="533" width="0.0102%" height="15" fill="rgb(210,21,8)" fg:x="103753" fg:w="12"/><text x="88.3338%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (12 samples, 0.01%)</title><rect x="88.0838%" y="517" width="0.0102%" height="15" fill="rgb(243,145,7)" fg:x="103753" fg:w="12"/><text x="88.3338%" y="527.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (12 samples, 0.01%)</title><rect x="88.0838%" y="501" width="0.0102%" height="15" fill="rgb(238,178,32)" fg:x="103753" fg:w="12"/><text x="88.3338%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (12 samples, 0.01%)</title><rect x="88.0838%" y="485" width="0.0102%" height="15" fill="rgb(222,4,10)" fg:x="103753" fg:w="12"/><text x="88.3338%" y="495.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (12 samples, 0.01%)</title><rect x="88.0838%" y="469" width="0.0102%" height="15" fill="rgb(239,7,37)" fg:x="103753" fg:w="12"/><text x="88.3338%" y="479.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (12 samples, 0.01%)</title><rect x="88.0838%" y="453" width="0.0102%" height="15" fill="rgb(215,31,37)" fg:x="103753" fg:w="12"/><text x="88.3338%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (23 samples, 0.02%)</title><rect x="88.0753%" y="629" width="0.0195%" height="15" fill="rgb(224,83,33)" fg:x="103743" fg:w="23"/><text x="88.3253%" y="639.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_key_hashed_nocheck (72 samples, 0.06%)</title><rect x="88.0345%" y="821" width="0.0611%" height="15" fill="rgb(239,55,3)" fg:x="103695" fg:w="72"/><text x="88.2845%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (29 samples, 0.02%)</title><rect x="88.0710%" y="805" width="0.0246%" height="15" fill="rgb(247,92,11)" fg:x="103738" fg:w="29"/><text x="88.3210%" y="815.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (29 samples, 0.02%)</title><rect x="88.0710%" y="789" width="0.0246%" height="15" fill="rgb(239,200,7)" fg:x="103738" fg:w="29"/><text x="88.3210%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (29 samples, 0.02%)</title><rect x="88.0710%" y="773" width="0.0246%" height="15" fill="rgb(227,115,8)" fg:x="103738" fg:w="29"/><text x="88.3210%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck::{{closure}} (29 samples, 0.02%)</title><rect x="88.0710%" y="757" width="0.0246%" height="15" fill="rgb(215,189,27)" fg:x="103738" fg:w="29"/><text x="88.3210%" y="767.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_key_hashed_nocheck (27 samples, 0.02%)</title><rect x="88.0727%" y="741" width="0.0229%" height="15" fill="rgb(251,216,39)" fg:x="103740" fg:w="27"/><text x="88.3227%" y="751.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_key_hashed_nocheck (27 samples, 0.02%)</title><rect x="88.0727%" y="725" width="0.0229%" height="15" fill="rgb(207,29,47)" fg:x="103740" fg:w="27"/><text x="88.3227%" y="735.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_hash (27 samples, 0.02%)</title><rect x="88.0727%" y="709" width="0.0229%" height="15" fill="rgb(210,71,34)" fg:x="103740" fg:w="27"/><text x="88.3227%" y="719.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search (27 samples, 0.02%)</title><rect x="88.0727%" y="693" width="0.0229%" height="15" fill="rgb(253,217,51)" fg:x="103740" fg:w="27"/><text x="88.3227%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (25 samples, 0.02%)</title><rect x="88.0744%" y="677" width="0.0212%" height="15" fill="rgb(222,117,46)" fg:x="103742" fg:w="25"/><text x="88.3244%" y="687.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (25 samples, 0.02%)</title><rect x="88.0744%" y="661" width="0.0212%" height="15" fill="rgb(226,132,6)" fg:x="103742" fg:w="25"/><text x="88.3244%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (25 samples, 0.02%)</title><rect x="88.0744%" y="645" width="0.0212%" height="15" fill="rgb(254,145,51)" fg:x="103742" fg:w="25"/><text x="88.3244%" y="655.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (202 samples, 0.17%)</title><rect x="87.9250%" y="997" width="0.1715%" height="15" fill="rgb(231,199,27)" fg:x="103566" fg:w="202"/><text x="88.1750%" y="1007.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (85 samples, 0.07%)</title><rect x="88.0243%" y="981" width="0.0722%" height="15" fill="rgb(245,158,14)" fg:x="103683" fg:w="85"/><text x="88.2743%" y="991.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::invoke2 (85 samples, 0.07%)</title><rect x="88.0243%" y="965" width="0.0722%" height="15" fill="rgb(240,113,14)" fg:x="103683" fg:w="85"/><text x="88.2743%" y="975.50"></text></g><g><title>tremor_script::interpreter::imut_expr::eval_for_fn_arg (85 samples, 0.07%)</title><rect x="88.0243%" y="949" width="0.0722%" height="15" fill="rgb(210,20,13)" fg:x="103683" fg:w="85"/><text x="88.2743%" y="959.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (85 samples, 0.07%)</title><rect x="88.0243%" y="933" width="0.0722%" height="15" fill="rgb(241,144,13)" fg:x="103683" fg:w="85"/><text x="88.2743%" y="943.50"></text></g><g><title>tremor_script::interpreter::resolve (85 samples, 0.07%)</title><rect x="88.0243%" y="917" width="0.0722%" height="15" fill="rgb(235,43,34)" fg:x="103683" fg:w="85"/><text x="88.2743%" y="927.50"></text></g><g><title>tremor_script::interpreter::resolve_value (85 samples, 0.07%)</title><rect x="88.0243%" y="901" width="0.0722%" height="15" fill="rgb(208,36,20)" fg:x="103683" fg:w="85"/><text x="88.2743%" y="911.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup (73 samples, 0.06%)</title><rect x="88.0345%" y="885" width="0.0620%" height="15" fill="rgb(239,204,10)" fg:x="103695" fg:w="73"/><text x="88.2845%" y="895.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (73 samples, 0.06%)</title><rect x="88.0345%" y="869" width="0.0620%" height="15" fill="rgb(217,84,43)" fg:x="103695" fg:w="73"/><text x="88.2845%" y="879.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (73 samples, 0.06%)</title><rect x="88.0345%" y="853" width="0.0620%" height="15" fill="rgb(241,170,50)" fg:x="103695" fg:w="73"/><text x="88.2845%" y="863.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (73 samples, 0.06%)</title><rect x="88.0345%" y="837" width="0.0620%" height="15" fill="rgb(226,205,29)" fg:x="103695" fg:w="73"/><text x="88.2845%" y="847.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (24 samples, 0.02%)</title><rect x="88.0965%" y="949" width="0.0204%" height="15" fill="rgb(233,113,1)" fg:x="103768" fg:w="24"/><text x="88.3465%" y="959.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (24 samples, 0.02%)</title><rect x="88.0965%" y="933" width="0.0204%" height="15" fill="rgb(253,98,13)" fg:x="103768" fg:w="24"/><text x="88.3465%" y="943.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (24 samples, 0.02%)</title><rect x="88.0965%" y="917" width="0.0204%" height="15" fill="rgb(211,115,12)" fg:x="103768" fg:w="24"/><text x="88.3465%" y="927.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (24 samples, 0.02%)</title><rect x="88.0965%" y="901" width="0.0204%" height="15" fill="rgb(208,12,16)" fg:x="103768" fg:w="24"/><text x="88.3465%" y="911.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (24 samples, 0.02%)</title><rect x="88.0965%" y="885" width="0.0204%" height="15" fill="rgb(237,193,54)" fg:x="103768" fg:w="24"/><text x="88.3465%" y="895.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (24 samples, 0.02%)</title><rect x="88.0965%" y="869" width="0.0204%" height="15" fill="rgb(243,22,42)" fg:x="103768" fg:w="24"/><text x="88.3465%" y="879.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (24 samples, 0.02%)</title><rect x="88.0965%" y="853" width="0.0204%" height="15" fill="rgb(233,151,36)" fg:x="103768" fg:w="24"/><text x="88.3465%" y="863.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}} (24 samples, 0.02%)</title><rect x="88.0965%" y="837" width="0.0204%" height="15" fill="rgb(237,57,45)" fg:x="103768" fg:w="24"/><text x="88.3465%" y="847.50"></text></g><g><title>abi_stable::traits::ErasedType::run_downcast_as_mut (24 samples, 0.02%)</title><rect x="88.0965%" y="821" width="0.0204%" height="15" fill="rgb(221,88,17)" fg:x="103768" fg:w="24"/><text x="88.3465%" y="831.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}}::{{closure}} (24 samples, 0.02%)</title><rect x="88.0965%" y="805" width="0.0204%" height="15" fill="rgb(230,79,15)" fg:x="103768" fg:w="24"/><text x="88.3465%" y="815.50"></text></g><g><title>halfbrown::raw_entry::RawVacantEntryMut&lt;K,V,S&gt;::insert (24 samples, 0.02%)</title><rect x="88.0965%" y="789" width="0.0204%" height="15" fill="rgb(213,57,13)" fg:x="103768" fg:w="24"/><text x="88.3465%" y="799.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert (24 samples, 0.02%)</title><rect x="88.0965%" y="773" width="0.0204%" height="15" fill="rgb(222,116,39)" fg:x="103768" fg:w="24"/><text x="88.3465%" y="783.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert_hashed_nocheck (24 samples, 0.02%)</title><rect x="88.0965%" y="757" width="0.0204%" height="15" fill="rgb(245,107,2)" fg:x="103768" fg:w="24"/><text x="88.3465%" y="767.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_entry (24 samples, 0.02%)</title><rect x="88.0965%" y="741" width="0.0204%" height="15" fill="rgb(238,1,10)" fg:x="103768" fg:w="24"/><text x="88.3465%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (24 samples, 0.02%)</title><rect x="88.0965%" y="725" width="0.0204%" height="15" fill="rgb(249,4,48)" fg:x="103768" fg:w="24"/><text x="88.3465%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (24 samples, 0.02%)</title><rect x="88.0965%" y="709" width="0.0204%" height="15" fill="rgb(223,151,18)" fg:x="103768" fg:w="24"/><text x="88.3465%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (24 samples, 0.02%)</title><rect x="88.0965%" y="693" width="0.0204%" height="15" fill="rgb(227,65,43)" fg:x="103768" fg:w="24"/><text x="88.3465%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (24 samples, 0.02%)</title><rect x="88.0965%" y="677" width="0.0204%" height="15" fill="rgb(218,40,45)" fg:x="103768" fg:w="24"/><text x="88.3465%" y="687.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (24 samples, 0.02%)</title><rect x="88.0965%" y="661" width="0.0204%" height="15" fill="rgb(252,121,31)" fg:x="103768" fg:w="24"/><text x="88.3465%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (24 samples, 0.02%)</title><rect x="88.0965%" y="645" width="0.0204%" height="15" fill="rgb(219,158,43)" fg:x="103768" fg:w="24"/><text x="88.3465%" y="655.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (24 samples, 0.02%)</title><rect x="88.0965%" y="629" width="0.0204%" height="15" fill="rgb(231,162,42)" fg:x="103768" fg:w="24"/><text x="88.3465%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (24 samples, 0.02%)</title><rect x="88.0965%" y="613" width="0.0204%" height="15" fill="rgb(217,179,25)" fg:x="103768" fg:w="24"/><text x="88.3465%" y="623.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (24 samples, 0.02%)</title><rect x="88.0965%" y="597" width="0.0204%" height="15" fill="rgb(206,212,31)" fg:x="103768" fg:w="24"/><text x="88.3465%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (24 samples, 0.02%)</title><rect x="88.0965%" y="581" width="0.0204%" height="15" fill="rgb(235,144,12)" fg:x="103768" fg:w="24"/><text x="88.3465%" y="591.50"></text></g><g><title>alloc::alloc::alloc (24 samples, 0.02%)</title><rect x="88.0965%" y="565" width="0.0204%" height="15" fill="rgb(213,51,10)" fg:x="103768" fg:w="24"/><text x="88.3465%" y="575.50"></text></g><g><title>__rg_alloc (24 samples, 0.02%)</title><rect x="88.0965%" y="549" width="0.0204%" height="15" fill="rgb(231,145,14)" fg:x="103768" fg:w="24"/><text x="88.3465%" y="559.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (24 samples, 0.02%)</title><rect x="88.0965%" y="533" width="0.0204%" height="15" fill="rgb(235,15,28)" fg:x="103768" fg:w="24"/><text x="88.3465%" y="543.50"></text></g><g><title>sn_rust_alloc (24 samples, 0.02%)</title><rect x="88.0965%" y="517" width="0.0204%" height="15" fill="rgb(237,206,10)" fg:x="103768" fg:w="24"/><text x="88.3465%" y="527.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (24 samples, 0.02%)</title><rect x="88.0965%" y="501" width="0.0204%" height="15" fill="rgb(236,227,27)" fg:x="103768" fg:w="24"/><text x="88.3465%" y="511.50"></text></g><g><title>tremor_script::srs::EventPayload::rent_mut (265 samples, 0.22%)</title><rect x="87.9208%" y="1077" width="0.2250%" height="15" fill="rgb(246,83,35)" fg:x="103561" fg:w="265"/><text x="88.1708%" y="1087.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (260 samples, 0.22%)</title><rect x="87.9250%" y="1061" width="0.2207%" height="15" fill="rgb(220,136,24)" fg:x="103566" fg:w="260"/><text x="88.1750%" y="1071.50"></text></g><g><title>tremor_script::script::Script::run (260 samples, 0.22%)</title><rect x="87.9250%" y="1045" width="0.2207%" height="15" fill="rgb(217,3,25)" fg:x="103566" fg:w="260"/><text x="88.1750%" y="1055.50"></text></g><g><title>tremor_script::ast::Script::run (260 samples, 0.22%)</title><rect x="87.9250%" y="1029" width="0.2207%" height="15" fill="rgb(239,24,14)" fg:x="103566" fg:w="260"/><text x="88.1750%" y="1039.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (260 samples, 0.22%)</title><rect x="87.9250%" y="1013" width="0.2207%" height="15" fill="rgb(244,16,53)" fg:x="103566" fg:w="260"/><text x="88.1750%" y="1023.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (58 samples, 0.05%)</title><rect x="88.0965%" y="997" width="0.0492%" height="15" fill="rgb(208,175,44)" fg:x="103768" fg:w="58"/><text x="88.3465%" y="1007.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (58 samples, 0.05%)</title><rect x="88.0965%" y="981" width="0.0492%" height="15" fill="rgb(252,18,48)" fg:x="103768" fg:w="58"/><text x="88.3465%" y="991.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (58 samples, 0.05%)</title><rect x="88.0965%" y="965" width="0.0492%" height="15" fill="rgb(234,199,32)" fg:x="103768" fg:w="58"/><text x="88.3465%" y="975.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (34 samples, 0.03%)</title><rect x="88.1169%" y="949" width="0.0289%" height="15" fill="rgb(225,77,54)" fg:x="103792" fg:w="34"/><text x="88.3669%" y="959.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (34 samples, 0.03%)</title><rect x="88.1169%" y="933" width="0.0289%" height="15" fill="rgb(225,42,25)" fg:x="103792" fg:w="34"/><text x="88.3669%" y="943.50"></text></g><g><title>tremor_script::interpreter::resolve (34 samples, 0.03%)</title><rect x="88.1169%" y="917" width="0.0289%" height="15" fill="rgb(242,227,46)" fg:x="103792" fg:w="34"/><text x="88.3669%" y="927.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_u64 (34 samples, 0.03%)</title><rect x="88.2756%" y="1061" width="0.0289%" height="15" fill="rgb(246,197,35)" fg:x="103979" fg:w="34"/><text x="88.5256%" y="1071.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (42 samples, 0.04%)</title><rect x="88.3062%" y="1061" width="0.0357%" height="15" fill="rgb(215,159,26)" fg:x="104015" fg:w="42"/><text x="88.5562%" y="1071.50"></text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (233 samples, 0.20%)</title><rect x="88.1602%" y="1077" width="0.1978%" height="15" fill="rgb(212,194,50)" fg:x="103843" fg:w="233"/><text x="88.4102%" y="1087.50"></text></g><g><title>[unknown] (96,442 samples, 81.88%)</title><rect x="6.5159%" y="1093" width="81.8769%" height="15" fill="rgb(246,132,1)" fg:x="7675" fg:w="96442"/><text x="6.7659%" y="1103.50">[unknown]</text></g><g><title>window::TimeWindow::add_t (22 samples, 0.02%)</title><rect x="88.3741%" y="1077" width="0.0187%" height="15" fill="rgb(217,71,7)" fg:x="104095" fg:w="22"/><text x="88.6241%" y="1087.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (27 samples, 0.02%)</title><rect x="88.4123%" y="1077" width="0.0229%" height="15" fill="rgb(252,59,32)" fg:x="104140" fg:w="27"/><text x="88.6623%" y="1087.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (26 samples, 0.02%)</title><rect x="88.4132%" y="1061" width="0.0221%" height="15" fill="rgb(253,204,25)" fg:x="104141" fg:w="26"/><text x="88.6632%" y="1071.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (24 samples, 0.02%)</title><rect x="88.4149%" y="1045" width="0.0204%" height="15" fill="rgb(232,21,16)" fg:x="104143" fg:w="24"/><text x="88.6649%" y="1055.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (39 samples, 0.03%)</title><rect x="88.4429%" y="1077" width="0.0331%" height="15" fill="rgb(248,90,29)" fg:x="104176" fg:w="39"/><text x="88.6929%" y="1087.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (15 samples, 0.01%)</title><rect x="88.4802%" y="1077" width="0.0127%" height="15" fill="rgb(249,223,7)" fg:x="104220" fg:w="15"/><text x="88.7302%" y="1087.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (15 samples, 0.01%)</title><rect x="88.4802%" y="1061" width="0.0127%" height="15" fill="rgb(231,119,42)" fg:x="104220" fg:w="15"/><text x="88.7302%" y="1071.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (15 samples, 0.01%)</title><rect x="88.4802%" y="1045" width="0.0127%" height="15" fill="rgb(215,41,35)" fg:x="104220" fg:w="15"/><text x="88.7302%" y="1055.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (15 samples, 0.01%)</title><rect x="88.4802%" y="1029" width="0.0127%" height="15" fill="rgb(220,44,45)" fg:x="104220" fg:w="15"/><text x="88.7302%" y="1039.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (15 samples, 0.01%)</title><rect x="88.4802%" y="1013" width="0.0127%" height="15" fill="rgb(253,197,36)" fg:x="104220" fg:w="15"/><text x="88.7302%" y="1023.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (15 samples, 0.01%)</title><rect x="88.4802%" y="997" width="0.0127%" height="15" fill="rgb(245,225,54)" fg:x="104220" fg:w="15"/><text x="88.7302%" y="1007.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (16 samples, 0.01%)</title><rect x="88.5668%" y="997" width="0.0136%" height="15" fill="rgb(239,94,37)" fg:x="104322" fg:w="16"/><text x="88.8168%" y="1007.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (73 samples, 0.06%)</title><rect x="88.5490%" y="1061" width="0.0620%" height="15" fill="rgb(242,217,10)" fg:x="104301" fg:w="73"/><text x="88.7990%" y="1071.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (68 samples, 0.06%)</title><rect x="88.5533%" y="1045" width="0.0577%" height="15" fill="rgb(250,193,7)" fg:x="104306" fg:w="68"/><text x="88.8033%" y="1055.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (59 samples, 0.05%)</title><rect x="88.5609%" y="1029" width="0.0501%" height="15" fill="rgb(230,104,19)" fg:x="104315" fg:w="59"/><text x="88.8109%" y="1039.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (59 samples, 0.05%)</title><rect x="88.5609%" y="1013" width="0.0501%" height="15" fill="rgb(230,181,4)" fg:x="104315" fg:w="59"/><text x="88.8109%" y="1023.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue_events (24 samples, 0.02%)</title><rect x="88.5906%" y="997" width="0.0204%" height="15" fill="rgb(216,219,49)" fg:x="104350" fg:w="24"/><text x="88.8406%" y="1007.50"></text></g><g><title>__dso_handle (265 samples, 0.22%)</title><rect x="88.3928%" y="1093" width="0.2250%" height="15" fill="rgb(254,144,0)" fg:x="104117" fg:w="265"/><text x="88.6428%" y="1103.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (141 samples, 0.12%)</title><rect x="88.4981%" y="1077" width="0.1197%" height="15" fill="rgb(205,209,38)" fg:x="104241" fg:w="141"/><text x="88.7481%" y="1087.50"></text></g><g><title>anon.07842ee8e079d9ed68873cd915a87b2c.9.llvm.16273340636564346165 (16 samples, 0.01%)</title><rect x="88.6679%" y="1093" width="0.0136%" height="15" fill="rgb(240,21,42)" fg:x="104441" fg:w="16"/><text x="88.9179%" y="1103.50"></text></g><g><title>sn_rust_alloc (20 samples, 0.02%)</title><rect x="88.6840%" y="1077" width="0.0170%" height="15" fill="rgb(241,132,3)" fg:x="104460" fg:w="20"/><text x="88.9340%" y="1087.50"></text></g><g><title>anon.2611daeea0eae3f2aad2726f7abf2889.45.llvm.1042579990759039638 (26 samples, 0.02%)</title><rect x="88.6815%" y="1093" width="0.0221%" height="15" fill="rgb(225,14,2)" fg:x="104457" fg:w="26"/><text x="88.9315%" y="1103.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (12 samples, 0.01%)</title><rect x="88.7035%" y="1077" width="0.0102%" height="15" fill="rgb(210,141,35)" fg:x="104483" fg:w="12"/><text x="88.9535%" y="1087.50"></text></g><g><title>anon.4e27793df7385fd523f730927e4d887f.28.llvm.5595657005201026778 (32 samples, 0.03%)</title><rect x="88.7035%" y="1093" width="0.0272%" height="15" fill="rgb(251,14,44)" fg:x="104483" fg:w="32"/><text x="88.9535%" y="1103.50"></text></g><g><title>anon.67e22ede2447fcc1f5fb247d6a3f94fb.18.llvm.3312757031615986649 (23 samples, 0.02%)</title><rect x="88.7468%" y="1093" width="0.0195%" height="15" fill="rgb(247,48,18)" fg:x="104534" fg:w="23"/><text x="88.9968%" y="1103.50"></text></g><g><title>anon.8ce0b22ff3e27106f8f01c1937a05035.89.llvm.6479443255872754296 (18 samples, 0.02%)</title><rect x="88.7918%" y="1093" width="0.0153%" height="15" fill="rgb(225,0,40)" fg:x="104587" fg:w="18"/><text x="89.0418%" y="1103.50"></text></g><g><title>anon.9d5bffa143ece3cd04934c706b3d26f1.2787.llvm.17768046373175460591 (12 samples, 0.01%)</title><rect x="88.8071%" y="1093" width="0.0102%" height="15" fill="rgb(221,31,33)" fg:x="104605" fg:w="12"/><text x="89.0571%" y="1103.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (12 samples, 0.01%)</title><rect x="88.8071%" y="1077" width="0.0102%" height="15" fill="rgb(237,42,40)" fg:x="104605" fg:w="12"/><text x="89.0571%" y="1087.50"></text></g><g><title>anon.ff31cb8ca33487f561eade7f4db5437a.18.llvm.2277477389115695660 (54 samples, 0.05%)</title><rect x="88.8190%" y="1093" width="0.0458%" height="15" fill="rgb(233,51,29)" fg:x="104619" fg:w="54"/><text x="89.0690%" y="1103.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (54 samples, 0.05%)</title><rect x="88.8190%" y="1077" width="0.0458%" height="15" fill="rgb(226,58,20)" fg:x="104619" fg:w="54"/><text x="89.0690%" y="1087.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (29 samples, 0.02%)</title><rect x="88.8971%" y="1061" width="0.0246%" height="15" fill="rgb(208,98,7)" fg:x="104711" fg:w="29"/><text x="89.1471%" y="1071.50"></text></g><g><title>async_task::runnable::Runnable::run (27 samples, 0.02%)</title><rect x="88.8988%" y="1045" width="0.0229%" height="15" fill="rgb(228,143,44)" fg:x="104713" fg:w="27"/><text x="89.1488%" y="1055.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (54 samples, 0.05%)</title><rect x="88.8801%" y="1077" width="0.0458%" height="15" fill="rgb(246,55,38)" fg:x="104691" fg:w="54"/><text x="89.1301%" y="1087.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (27 samples, 0.02%)</title><rect x="88.9260%" y="1077" width="0.0229%" height="15" fill="rgb(247,87,16)" fg:x="104745" fg:w="27"/><text x="89.1760%" y="1087.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (26 samples, 0.02%)</title><rect x="88.9268%" y="1061" width="0.0221%" height="15" fill="rgb(234,129,42)" fg:x="104746" fg:w="26"/><text x="89.1768%" y="1071.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (23 samples, 0.02%)</title><rect x="88.9294%" y="1045" width="0.0195%" height="15" fill="rgb(220,82,16)" fg:x="104749" fg:w="23"/><text x="89.1794%" y="1055.50"></text></g><g><title>parking::Inner::park (12 samples, 0.01%)</title><rect x="88.9659%" y="1077" width="0.0102%" height="15" fill="rgb(211,88,4)" fg:x="104792" fg:w="12"/><text x="89.2159%" y="1087.50"></text></g><g><title>async_io::reactor::Reactor::get::REACTOR (128 samples, 0.11%)</title><rect x="88.8793%" y="1093" width="0.1087%" height="15" fill="rgb(248,151,21)" fg:x="104690" fg:w="128"/><text x="89.1293%" y="1103.50"></text></g><g><title>polling::epoll::Poller::modify (14 samples, 0.01%)</title><rect x="88.9761%" y="1077" width="0.0119%" height="15" fill="rgb(238,163,6)" fg:x="104804" fg:w="14"/><text x="89.2261%" y="1087.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (14 samples, 0.01%)</title><rect x="88.9998%" y="693" width="0.0119%" height="15" fill="rgb(209,183,11)" fg:x="104832" fg:w="14"/><text x="89.2498%" y="703.50"></text></g><g><title>async_channel::bounded (19 samples, 0.02%)</title><rect x="88.9981%" y="853" width="0.0161%" height="15" fill="rgb(219,37,20)" fg:x="104830" fg:w="19"/><text x="89.2481%" y="863.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (19 samples, 0.02%)</title><rect x="88.9981%" y="837" width="0.0161%" height="15" fill="rgb(210,158,4)" fg:x="104830" fg:w="19"/><text x="89.2481%" y="847.50"></text></g><g><title>alloc::alloc::exchange_malloc (19 samples, 0.02%)</title><rect x="88.9981%" y="821" width="0.0161%" height="15" fill="rgb(221,167,53)" fg:x="104830" fg:w="19"/><text x="89.2481%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (19 samples, 0.02%)</title><rect x="88.9981%" y="805" width="0.0161%" height="15" fill="rgb(237,151,45)" fg:x="104830" fg:w="19"/><text x="89.2481%" y="815.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (19 samples, 0.02%)</title><rect x="88.9981%" y="789" width="0.0161%" height="15" fill="rgb(231,39,3)" fg:x="104830" fg:w="19"/><text x="89.2481%" y="799.50"></text></g><g><title>alloc::alloc::alloc (19 samples, 0.02%)</title><rect x="88.9981%" y="773" width="0.0161%" height="15" fill="rgb(212,167,28)" fg:x="104830" fg:w="19"/><text x="89.2481%" y="783.50"></text></g><g><title>__rg_alloc (19 samples, 0.02%)</title><rect x="88.9981%" y="757" width="0.0161%" height="15" fill="rgb(232,178,8)" fg:x="104830" fg:w="19"/><text x="89.2481%" y="767.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (19 samples, 0.02%)</title><rect x="88.9981%" y="741" width="0.0161%" height="15" fill="rgb(225,151,20)" fg:x="104830" fg:w="19"/><text x="89.2481%" y="751.50"></text></g><g><title>sn_rust_alloc (19 samples, 0.02%)</title><rect x="88.9981%" y="725" width="0.0161%" height="15" fill="rgb(238,3,37)" fg:x="104830" fg:w="19"/><text x="89.2481%" y="735.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::lazy_init&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long)#2}, unsigned long&gt; (18 samples, 0.02%)</title><rect x="88.9990%" y="709" width="0.0153%" height="15" fill="rgb(251,147,42)" fg:x="104831" fg:w="18"/><text x="89.2490%" y="719.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (34 samples, 0.03%)</title><rect x="89.3751%" y="485" width="0.0289%" height="15" fill="rgb(208,173,10)" fg:x="105274" fg:w="34"/><text x="89.6251%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (36 samples, 0.03%)</title><rect x="89.5805%" y="389" width="0.0306%" height="15" fill="rgb(246,225,4)" fg:x="105516" fg:w="36"/><text x="89.8305%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (35 samples, 0.03%)</title><rect x="89.5814%" y="373" width="0.0297%" height="15" fill="rgb(248,102,6)" fg:x="105517" fg:w="35"/><text x="89.8314%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (29 samples, 0.02%)</title><rect x="89.5865%" y="357" width="0.0246%" height="15" fill="rgb(232,6,21)" fg:x="105523" fg:w="29"/><text x="89.8365%" y="367.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (27 samples, 0.02%)</title><rect x="89.5882%" y="341" width="0.0229%" height="15" fill="rgb(221,179,22)" fg:x="105525" fg:w="27"/><text x="89.8382%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (27 samples, 0.02%)</title><rect x="89.5882%" y="325" width="0.0229%" height="15" fill="rgb(252,50,20)" fg:x="105525" fg:w="27"/><text x="89.8382%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (84 samples, 0.07%)</title><rect x="89.6111%" y="389" width="0.0713%" height="15" fill="rgb(222,56,38)" fg:x="105552" fg:w="84"/><text x="89.8611%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (388 samples, 0.33%)</title><rect x="89.4082%" y="437" width="0.3294%" height="15" fill="rgb(206,193,29)" fg:x="105313" fg:w="388"/><text x="89.6582%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (317 samples, 0.27%)</title><rect x="89.4685%" y="421" width="0.2691%" height="15" fill="rgb(239,192,45)" fg:x="105384" fg:w="317"/><text x="89.7185%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (258 samples, 0.22%)</title><rect x="89.5185%" y="405" width="0.2190%" height="15" fill="rgb(254,18,36)" fg:x="105443" fg:w="258"/><text x="89.7685%" y="415.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (65 samples, 0.06%)</title><rect x="89.6824%" y="389" width="0.0552%" height="15" fill="rgb(221,127,11)" fg:x="105636" fg:w="65"/><text x="89.9324%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (65 samples, 0.06%)</title><rect x="89.6824%" y="373" width="0.0552%" height="15" fill="rgb(234,146,35)" fg:x="105636" fg:w="65"/><text x="89.9324%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (22 samples, 0.02%)</title><rect x="89.7189%" y="357" width="0.0187%" height="15" fill="rgb(254,201,37)" fg:x="105679" fg:w="22"/><text x="89.9689%" y="367.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (22 samples, 0.02%)</title><rect x="89.7189%" y="341" width="0.0187%" height="15" fill="rgb(211,202,23)" fg:x="105679" fg:w="22"/><text x="89.9689%" y="351.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (15 samples, 0.01%)</title><rect x="89.7248%" y="325" width="0.0127%" height="15" fill="rgb(237,91,2)" fg:x="105686" fg:w="15"/><text x="89.9748%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (15 samples, 0.01%)</title><rect x="89.7248%" y="309" width="0.0127%" height="15" fill="rgb(226,228,36)" fg:x="105686" fg:w="15"/><text x="89.9748%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (424 samples, 0.36%)</title><rect x="89.4039%" y="485" width="0.3600%" height="15" fill="rgb(213,63,50)" fg:x="105308" fg:w="424"/><text x="89.6539%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (424 samples, 0.36%)</title><rect x="89.4039%" y="469" width="0.3600%" height="15" fill="rgb(235,194,19)" fg:x="105308" fg:w="424"/><text x="89.6539%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (424 samples, 0.36%)</title><rect x="89.4039%" y="453" width="0.3600%" height="15" fill="rgb(207,204,18)" fg:x="105308" fg:w="424"/><text x="89.6539%" y="463.50"></text></g><g><title>core::ops::control_flow::ControlFlow&lt;R,&lt;R as core::ops::try_trait::Try&gt;::Output&gt;::into_try (31 samples, 0.03%)</title><rect x="89.7376%" y="437" width="0.0263%" height="15" fill="rgb(248,8,7)" fg:x="105701" fg:w="31"/><text x="89.9876%" y="447.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::len (973 samples, 0.83%)</title><rect x="90.0025%" y="453" width="0.8261%" height="15" fill="rgb(223,145,47)" fg:x="106013" fg:w="973"/><text x="90.2525%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (706 samples, 0.60%)</title><rect x="90.2291%" y="437" width="0.5994%" height="15" fill="rgb(228,84,11)" fg:x="106280" fg:w="706"/><text x="90.4791%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (706 samples, 0.60%)</title><rect x="90.2291%" y="421" width="0.5994%" height="15" fill="rgb(218,76,45)" fg:x="106280" fg:w="706"/><text x="90.4791%" y="431.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::len (1,172 samples, 0.99%)</title><rect x="89.8463%" y="469" width="0.9950%" height="15" fill="rgb(223,80,15)" fg:x="105829" fg:w="1172"/><text x="90.0963%" y="479.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::len (15 samples, 0.01%)</title><rect x="90.8285%" y="453" width="0.0127%" height="15" fill="rgb(219,218,33)" fg:x="106986" fg:w="15"/><text x="91.0785%" y="463.50"></text></g><g><title>async_executor::steal (1,274 samples, 1.08%)</title><rect x="89.7639%" y="485" width="1.0816%" height="15" fill="rgb(208,51,11)" fg:x="105732" fg:w="1274"/><text x="90.0139%" y="495.50"></text></g><g><title>concurrent_queue::full_fence (1,418 samples, 1.20%)</title><rect x="91.4822%" y="453" width="1.2038%" height="15" fill="rgb(229,165,39)" fg:x="107756" fg:w="1418"/><text x="91.7322%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (1,390 samples, 1.18%)</title><rect x="91.5060%" y="437" width="1.1801%" height="15" fill="rgb(241,100,24)" fg:x="107784" fg:w="1390"/><text x="91.7560%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1,390 samples, 1.18%)</title><rect x="91.5060%" y="421" width="1.1801%" height="15" fill="rgb(228,14,23)" fg:x="107784" fg:w="1390"/><text x="91.7560%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1,390 samples, 1.18%)</title><rect x="91.5060%" y="405" width="1.1801%" height="15" fill="rgb(247,116,52)" fg:x="107784" fg:w="1390"/><text x="91.7560%" y="415.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (2,047 samples, 1.74%)</title><rect x="91.0628%" y="469" width="1.7379%" height="15" fill="rgb(216,149,33)" fg:x="107262" fg:w="2047"/><text x="91.3128%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (134 samples, 0.11%)</title><rect x="92.6869%" y="453" width="0.1138%" height="15" fill="rgb(238,142,29)" fg:x="109175" fg:w="134"/><text x="92.9369%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_load (86 samples, 0.07%)</title><rect x="92.7277%" y="437" width="0.0730%" height="15" fill="rgb(224,83,40)" fg:x="109223" fg:w="86"/><text x="92.9777%" y="447.50"></text></g><g><title>concurrent_queue::full_fence (183 samples, 0.16%)</title><rect x="92.8542%" y="453" width="0.1554%" height="15" fill="rgb(234,165,11)" fg:x="109372" fg:w="183"/><text x="93.1042%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (183 samples, 0.16%)</title><rect x="92.8542%" y="437" width="0.1554%" height="15" fill="rgb(215,96,23)" fg:x="109372" fg:w="183"/><text x="93.1042%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (183 samples, 0.16%)</title><rect x="92.8542%" y="421" width="0.1554%" height="15" fill="rgb(233,179,26)" fg:x="109372" fg:w="183"/><text x="93.1042%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (183 samples, 0.16%)</title><rect x="92.8542%" y="405" width="0.1554%" height="15" fill="rgb(225,129,33)" fg:x="109372" fg:w="183"/><text x="93.1042%" y="415.50"></text></g><g><title>concurrent_queue::unbounded::Slot&lt;T&gt;::wait_write (37 samples, 0.03%)</title><rect x="93.0138%" y="453" width="0.0314%" height="15" fill="rgb(237,49,13)" fg:x="109560" fg:w="37"/><text x="93.2638%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (36 samples, 0.03%)</title><rect x="93.0146%" y="437" width="0.0306%" height="15" fill="rgb(211,3,31)" fg:x="109561" fg:w="36"/><text x="93.2646%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (36 samples, 0.03%)</title><rect x="93.0146%" y="421" width="0.0306%" height="15" fill="rgb(216,152,19)" fg:x="109561" fg:w="36"/><text x="93.2646%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (13 samples, 0.01%)</title><rect x="93.0562%" y="453" width="0.0110%" height="15" fill="rgb(251,121,35)" fg:x="109610" fg:w="13"/><text x="93.3062%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_load (13 samples, 0.01%)</title><rect x="93.0562%" y="437" width="0.0110%" height="15" fill="rgb(210,217,47)" fg:x="109610" fg:w="13"/><text x="93.3062%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (97 samples, 0.08%)</title><rect x="93.0673%" y="453" width="0.0824%" height="15" fill="rgb(244,116,22)" fg:x="109623" fg:w="97"/><text x="93.3173%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (97 samples, 0.08%)</title><rect x="93.0673%" y="437" width="0.0824%" height="15" fill="rgb(228,17,21)" fg:x="109623" fg:w="97"/><text x="93.3173%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (122 samples, 0.10%)</title><rect x="93.1496%" y="453" width="0.1036%" height="15" fill="rgb(240,149,34)" fg:x="109720" fg:w="122"/><text x="93.3996%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_or (122 samples, 0.10%)</title><rect x="93.1496%" y="437" width="0.1036%" height="15" fill="rgb(208,125,47)" fg:x="109720" fg:w="122"/><text x="93.3996%" y="447.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (2,986 samples, 2.54%)</title><rect x="90.8455%" y="485" width="2.5350%" height="15" fill="rgb(249,186,39)" fg:x="107006" fg:w="2986"/><text x="91.0955%" y="495.50">co..</text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (683 samples, 0.58%)</title><rect x="92.8007%" y="469" width="0.5799%" height="15" fill="rgb(240,220,33)" fg:x="109309" fg:w="683"/><text x="93.0507%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (150 samples, 0.13%)</title><rect x="93.2532%" y="453" width="0.1273%" height="15" fill="rgb(243,110,23)" fg:x="109842" fg:w="150"/><text x="93.5032%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_load (150 samples, 0.13%)</title><rect x="93.2532%" y="437" width="0.1273%" height="15" fill="rgb(219,163,46)" fg:x="109842" fg:w="150"/><text x="93.5032%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (138 samples, 0.12%)</title><rect x="93.3805%" y="485" width="0.1172%" height="15" fill="rgb(216,126,30)" fg:x="109992" fg:w="138"/><text x="93.6305%" y="495.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (138 samples, 0.12%)</title><rect x="93.3805%" y="469" width="0.1172%" height="15" fill="rgb(208,139,11)" fg:x="109992" fg:w="138"/><text x="93.6305%" y="479.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read_unlock (137 samples, 0.12%)</title><rect x="93.3814%" y="453" width="0.1163%" height="15" fill="rgb(213,118,36)" fg:x="109993" fg:w="137"/><text x="93.6314%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_unlock (137 samples, 0.12%)</title><rect x="93.3814%" y="437" width="0.1163%" height="15" fill="rgb(226,43,17)" fg:x="109993" fg:w="137"/><text x="93.6314%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (136 samples, 0.12%)</title><rect x="93.3822%" y="421" width="0.1155%" height="15" fill="rgb(254,217,4)" fg:x="109994" fg:w="136"/><text x="93.6322%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_sub (136 samples, 0.12%)</title><rect x="93.3822%" y="405" width="0.1155%" height="15" fill="rgb(210,134,47)" fg:x="109994" fg:w="136"/><text x="93.6322%" y="415.50"></text></g><g><title>fastrand::usize (25 samples, 0.02%)</title><rect x="93.4977%" y="485" width="0.0212%" height="15" fill="rgb(237,24,49)" fg:x="110130" fg:w="25"/><text x="93.7477%" y="495.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (21 samples, 0.02%)</title><rect x="93.5011%" y="469" width="0.0178%" height="15" fill="rgb(251,39,46)" fg:x="110134" fg:w="21"/><text x="93.7511%" y="479.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (21 samples, 0.02%)</title><rect x="93.5011%" y="453" width="0.0178%" height="15" fill="rgb(251,220,3)" fg:x="110134" fg:w="21"/><text x="93.7511%" y="463.50"></text></g><g><title>fastrand::usize::{{closure}} (13 samples, 0.01%)</title><rect x="93.5079%" y="437" width="0.0110%" height="15" fill="rgb(228,105,12)" fg:x="110142" fg:w="13"/><text x="93.7579%" y="447.50"></text></g><g><title>fastrand::Rng::usize (13 samples, 0.01%)</title><rect x="93.5079%" y="421" width="0.0110%" height="15" fill="rgb(215,196,1)" fg:x="110142" fg:w="13"/><text x="93.7579%" y="431.50"></text></g><g><title>std::sync::poison::Flag::get (21 samples, 0.02%)</title><rect x="93.5189%" y="437" width="0.0178%" height="15" fill="rgb(214,33,39)" fg:x="110155" fg:w="21"/><text x="93.7689%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (21 samples, 0.02%)</title><rect x="93.5189%" y="421" width="0.0178%" height="15" fill="rgb(220,19,52)" fg:x="110155" fg:w="21"/><text x="93.7689%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (20 samples, 0.02%)</title><rect x="93.5198%" y="405" width="0.0170%" height="15" fill="rgb(221,78,38)" fg:x="110156" fg:w="20"/><text x="93.7698%" y="415.50"></text></g><g><title>std::sync::rwlock::RwLockReadGuard&lt;T&gt;::new (28 samples, 0.02%)</title><rect x="93.5189%" y="469" width="0.0238%" height="15" fill="rgb(253,30,16)" fg:x="110155" fg:w="28"/><text x="93.7689%" y="479.50"></text></g><g><title>std::sync::poison::Flag::borrow (28 samples, 0.02%)</title><rect x="93.5189%" y="453" width="0.0238%" height="15" fill="rgb(242,65,0)" fg:x="110155" fg:w="28"/><text x="93.7689%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (217 samples, 0.18%)</title><rect x="93.5452%" y="437" width="0.1842%" height="15" fill="rgb(235,201,12)" fg:x="110186" fg:w="217"/><text x="93.7952%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (217 samples, 0.18%)</title><rect x="93.5452%" y="421" width="0.1842%" height="15" fill="rgb(233,161,9)" fg:x="110186" fg:w="217"/><text x="93.7952%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (53 samples, 0.04%)</title><rect x="93.7295%" y="437" width="0.0450%" height="15" fill="rgb(241,207,41)" fg:x="110403" fg:w="53"/><text x="93.9795%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (53 samples, 0.04%)</title><rect x="93.7295%" y="421" width="0.0450%" height="15" fill="rgb(212,69,46)" fg:x="110403" fg:w="53"/><text x="93.9795%" y="431.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (5,370 samples, 4.56%)</title><rect x="89.2231%" y="501" width="4.5590%" height="15" fill="rgb(239,69,45)" fg:x="105095" fg:w="5370"/><text x="89.4731%" y="511.50">async..</text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (310 samples, 0.26%)</title><rect x="93.5189%" y="485" width="0.2632%" height="15" fill="rgb(242,117,48)" fg:x="110155" fg:w="310"/><text x="93.7689%" y="495.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read (282 samples, 0.24%)</title><rect x="93.5427%" y="469" width="0.2394%" height="15" fill="rgb(228,41,36)" fg:x="110183" fg:w="282"/><text x="93.7927%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (282 samples, 0.24%)</title><rect x="93.5427%" y="453" width="0.2394%" height="15" fill="rgb(212,3,32)" fg:x="110183" fg:w="282"/><text x="93.7927%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (32 samples, 0.03%)</title><rect x="93.7906%" y="485" width="0.0272%" height="15" fill="rgb(233,41,49)" fg:x="110475" fg:w="32"/><text x="94.0406%" y="495.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.03%)</title><rect x="93.7906%" y="469" width="0.0272%" height="15" fill="rgb(252,170,49)" fg:x="110475" fg:w="32"/><text x="94.0406%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (32 samples, 0.03%)</title><rect x="93.7906%" y="453" width="0.0272%" height="15" fill="rgb(229,53,26)" fg:x="110475" fg:w="32"/><text x="94.0406%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (32 samples, 0.03%)</title><rect x="93.7906%" y="437" width="0.0272%" height="15" fill="rgb(217,157,12)" fg:x="110475" fg:w="32"/><text x="94.0406%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (32 samples, 0.03%)</title><rect x="93.7906%" y="421" width="0.0272%" height="15" fill="rgb(227,17,9)" fg:x="110475" fg:w="32"/><text x="94.0406%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_swap (32 samples, 0.03%)</title><rect x="93.7906%" y="405" width="0.0272%" height="15" fill="rgb(218,84,12)" fg:x="110475" fg:w="32"/><text x="94.0406%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (59 samples, 0.05%)</title><rect x="93.8178%" y="485" width="0.0501%" height="15" fill="rgb(212,79,24)" fg:x="110507" fg:w="59"/><text x="94.0678%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (59 samples, 0.05%)</title><rect x="93.8178%" y="469" width="0.0501%" height="15" fill="rgb(217,222,37)" fg:x="110507" fg:w="59"/><text x="94.0678%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (15 samples, 0.01%)</title><rect x="93.8772%" y="405" width="0.0127%" height="15" fill="rgb(246,208,8)" fg:x="110577" fg:w="15"/><text x="94.1272%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (15 samples, 0.01%)</title><rect x="93.8772%" y="389" width="0.0127%" height="15" fill="rgb(244,133,10)" fg:x="110577" fg:w="15"/><text x="94.1272%" y="399.50"></text></g><g><title>async_io::reactor::Reactor::notify (51 samples, 0.04%)</title><rect x="93.8729%" y="437" width="0.0433%" height="15" fill="rgb(209,219,41)" fg:x="110572" fg:w="51"/><text x="94.1229%" y="447.50"></text></g><g><title>polling::Poller::notify (46 samples, 0.04%)</title><rect x="93.8772%" y="421" width="0.0391%" height="15" fill="rgb(253,175,45)" fg:x="110577" fg:w="46"/><text x="94.1272%" y="431.50"></text></g><g><title>polling::epoll::Poller::notify (29 samples, 0.02%)</title><rect x="93.8916%" y="405" width="0.0246%" height="15" fill="rgb(235,100,37)" fg:x="110594" fg:w="29"/><text x="94.1416%" y="415.50"></text></g><g><title>__libc_write (24 samples, 0.02%)</title><rect x="93.8959%" y="389" width="0.0204%" height="15" fill="rgb(225,87,19)" fg:x="110599" fg:w="24"/><text x="94.1459%" y="399.50"></text></g><g><title>core::mem::drop (13 samples, 0.01%)</title><rect x="93.9494%" y="405" width="0.0110%" height="15" fill="rgb(217,152,17)" fg:x="110662" fg:w="13"/><text x="94.1994%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;()&gt;&gt; (13 samples, 0.01%)</title><rect x="93.9494%" y="389" width="0.0110%" height="15" fill="rgb(235,72,13)" fg:x="110662" fg:w="13"/><text x="94.1994%" y="399.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="93.9494%" y="373" width="0.0110%" height="15" fill="rgb(233,140,18)" fg:x="110662" fg:w="13"/><text x="94.1994%" y="383.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (12 samples, 0.01%)</title><rect x="93.9502%" y="357" width="0.0102%" height="15" fill="rgb(207,212,28)" fg:x="110663" fg:w="12"/><text x="94.2002%" y="367.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (12 samples, 0.01%)</title><rect x="93.9502%" y="341" width="0.0102%" height="15" fill="rgb(220,130,25)" fg:x="110663" fg:w="12"/><text x="94.2002%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (12 samples, 0.01%)</title><rect x="93.9502%" y="325" width="0.0102%" height="15" fill="rgb(205,55,34)" fg:x="110663" fg:w="12"/><text x="94.2002%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_swap (12 samples, 0.01%)</title><rect x="93.9502%" y="309" width="0.0102%" height="15" fill="rgb(237,54,35)" fg:x="110663" fg:w="12"/><text x="94.2002%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (57 samples, 0.05%)</title><rect x="93.9604%" y="405" width="0.0484%" height="15" fill="rgb(208,67,23)" fg:x="110675" fg:w="57"/><text x="94.2104%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_swap (57 samples, 0.05%)</title><rect x="93.9604%" y="389" width="0.0484%" height="15" fill="rgb(206,207,50)" fg:x="110675" fg:w="57"/><text x="94.2104%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_add (12 samples, 0.01%)</title><rect x="94.0088%" y="357" width="0.0102%" height="15" fill="rgb(213,211,42)" fg:x="110732" fg:w="12"/><text x="94.2588%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_add (12 samples, 0.01%)</title><rect x="94.0088%" y="341" width="0.0102%" height="15" fill="rgb(252,197,50)" fg:x="110732" fg:w="12"/><text x="94.2588%" y="351.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (35 samples, 0.03%)</title><rect x="94.0088%" y="405" width="0.0297%" height="15" fill="rgb(251,211,41)" fg:x="110732" fg:w="35"/><text x="94.2588%" y="415.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (35 samples, 0.03%)</title><rect x="94.0088%" y="389" width="0.0297%" height="15" fill="rgb(229,211,5)" fg:x="110732" fg:w="35"/><text x="94.2588%" y="399.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::notify_one (35 samples, 0.03%)</title><rect x="94.0088%" y="373" width="0.0297%" height="15" fill="rgb(239,36,31)" fg:x="110732" fg:w="35"/><text x="94.2588%" y="383.50"></text></g><g><title>std::sys::unix::futex::futex_wake (23 samples, 0.02%)</title><rect x="94.0190%" y="357" width="0.0195%" height="15" fill="rgb(248,67,31)" fg:x="110744" fg:w="23"/><text x="94.2690%" y="367.50"></text></g><g><title>syscall (23 samples, 0.02%)</title><rect x="94.0190%" y="341" width="0.0195%" height="15" fill="rgb(249,55,44)" fg:x="110744" fg:w="23"/><text x="94.2690%" y="351.50"></text></g><g><title>parking::Unparker::unpark (144 samples, 0.12%)</title><rect x="93.9256%" y="437" width="0.1223%" height="15" fill="rgb(216,82,12)" fg:x="110634" fg:w="144"/><text x="94.1756%" y="447.50"></text></g><g><title>parking::Inner::unpark (122 samples, 0.10%)</title><rect x="93.9443%" y="421" width="0.1036%" height="15" fill="rgb(242,174,1)" fg:x="110656" fg:w="122"/><text x="94.1943%" y="431.50"></text></g><g><title>async_io::driver::block_on::IO_POLLING::__getit (17 samples, 0.01%)</title><rect x="94.0478%" y="405" width="0.0144%" height="15" fill="rgb(208,120,29)" fg:x="110778" fg:w="17"/><text x="94.2978%" y="415.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (17 samples, 0.01%)</title><rect x="94.0478%" y="389" width="0.0144%" height="15" fill="rgb(221,105,43)" fg:x="110778" fg:w="17"/><text x="94.2978%" y="399.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (17 samples, 0.01%)</title><rect x="94.0478%" y="373" width="0.0144%" height="15" fill="rgb(234,124,22)" fg:x="110778" fg:w="17"/><text x="94.2978%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (17 samples, 0.01%)</title><rect x="94.0478%" y="357" width="0.0144%" height="15" fill="rgb(212,23,30)" fg:x="110778" fg:w="17"/><text x="94.2978%" y="367.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (228 samples, 0.19%)</title><rect x="93.8695%" y="453" width="0.1936%" height="15" fill="rgb(219,122,53)" fg:x="110568" fg:w="228"/><text x="94.1195%" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (18 samples, 0.02%)</title><rect x="94.0478%" y="437" width="0.0153%" height="15" fill="rgb(248,84,24)" fg:x="110778" fg:w="18"/><text x="94.2978%" y="447.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (18 samples, 0.02%)</title><rect x="94.0478%" y="421" width="0.0153%" height="15" fill="rgb(245,115,18)" fg:x="110778" fg:w="18"/><text x="94.2978%" y="431.50"></text></g><g><title>core::task::wake::Waker::wake (299 samples, 0.25%)</title><rect x="93.8678%" y="485" width="0.2538%" height="15" fill="rgb(227,176,51)" fg:x="110566" fg:w="299"/><text x="94.1178%" y="495.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (299 samples, 0.25%)</title><rect x="93.8678%" y="469" width="0.2538%" height="15" fill="rgb(229,63,42)" fg:x="110566" fg:w="299"/><text x="94.1178%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (69 samples, 0.06%)</title><rect x="94.0631%" y="453" width="0.0586%" height="15" fill="rgb(247,202,24)" fg:x="110796" fg:w="69"/><text x="94.3131%" y="463.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (69 samples, 0.06%)</title><rect x="94.0631%" y="437" width="0.0586%" height="15" fill="rgb(244,173,20)" fg:x="110796" fg:w="69"/><text x="94.3131%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (64 samples, 0.05%)</title><rect x="94.0674%" y="421" width="0.0543%" height="15" fill="rgb(242,81,47)" fg:x="110801" fg:w="64"/><text x="94.3174%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_sub (64 samples, 0.05%)</title><rect x="94.0674%" y="405" width="0.0543%" height="15" fill="rgb(231,185,54)" fg:x="110801" fg:w="64"/><text x="94.3174%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (18 samples, 0.02%)</title><rect x="94.1225%" y="437" width="0.0153%" height="15" fill="rgb(243,55,32)" fg:x="110866" fg:w="18"/><text x="94.3725%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (18 samples, 0.02%)</title><rect x="94.1225%" y="421" width="0.0153%" height="15" fill="rgb(208,167,19)" fg:x="110866" fg:w="18"/><text x="94.3725%" y="431.50"></text></g><g><title>async_executor::State::notify (421 samples, 0.36%)</title><rect x="93.7821%" y="501" width="0.3574%" height="15" fill="rgb(231,72,35)" fg:x="110465" fg:w="421"/><text x="94.0321%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (21 samples, 0.02%)</title><rect x="94.1217%" y="485" width="0.0178%" height="15" fill="rgb(250,173,51)" fg:x="110865" fg:w="21"/><text x="94.3717%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (20 samples, 0.02%)</title><rect x="94.1225%" y="469" width="0.0170%" height="15" fill="rgb(209,5,22)" fg:x="110866" fg:w="20"/><text x="94.3725%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (20 samples, 0.02%)</title><rect x="94.1225%" y="453" width="0.0170%" height="15" fill="rgb(250,174,19)" fg:x="110866" fg:w="20"/><text x="94.3725%" y="463.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (103 samples, 0.09%)</title><rect x="94.1599%" y="469" width="0.0874%" height="15" fill="rgb(217,3,49)" fg:x="110910" fg:w="103"/><text x="94.4099%" y="479.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (102 samples, 0.09%)</title><rect x="94.1607%" y="453" width="0.0866%" height="15" fill="rgb(218,225,5)" fg:x="110911" fg:w="102"/><text x="94.4107%" y="463.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (102 samples, 0.09%)</title><rect x="94.1607%" y="437" width="0.0866%" height="15" fill="rgb(236,89,11)" fg:x="110911" fg:w="102"/><text x="94.4107%" y="447.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (102 samples, 0.09%)</title><rect x="94.1607%" y="421" width="0.0866%" height="15" fill="rgb(206,33,28)" fg:x="110911" fg:w="102"/><text x="94.4107%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (102 samples, 0.09%)</title><rect x="94.1607%" y="405" width="0.0866%" height="15" fill="rgb(241,56,42)" fg:x="110911" fg:w="102"/><text x="94.4107%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_add (102 samples, 0.09%)</title><rect x="94.1607%" y="389" width="0.0866%" height="15" fill="rgb(222,44,11)" fg:x="110911" fg:w="102"/><text x="94.4107%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (37 samples, 0.03%)</title><rect x="94.2473%" y="469" width="0.0314%" height="15" fill="rgb(234,111,20)" fg:x="111013" fg:w="37"/><text x="94.4973%" y="479.50"></text></g><g><title>async_executor::Sleepers::insert (169 samples, 0.14%)</title><rect x="94.1565%" y="485" width="0.1435%" height="15" fill="rgb(237,77,6)" fg:x="110906" fg:w="169"/><text x="94.4065%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (25 samples, 0.02%)</title><rect x="94.2788%" y="469" width="0.0212%" height="15" fill="rgb(235,111,23)" fg:x="111050" fg:w="25"/><text x="94.5288%" y="479.50"></text></g><g><title>core::ptr::write (20 samples, 0.02%)</title><rect x="94.2830%" y="453" width="0.0170%" height="15" fill="rgb(251,135,29)" fg:x="111055" fg:w="20"/><text x="94.5330%" y="463.50"></text></g><g><title>async_executor::Sleepers::is_notified (14 samples, 0.01%)</title><rect x="94.3000%" y="485" width="0.0119%" height="15" fill="rgb(217,57,1)" fg:x="111075" fg:w="14"/><text x="94.5500%" y="495.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="94.3611%" y="469" width="0.0127%" height="15" fill="rgb(249,119,31)" fg:x="111147" fg:w="15"/><text x="94.6111%" y="479.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (112 samples, 0.10%)</title><rect x="94.3738%" y="469" width="0.0951%" height="15" fill="rgb(233,164,33)" fg:x="111162" fg:w="112"/><text x="94.6238%" y="479.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (110 samples, 0.09%)</title><rect x="94.3755%" y="453" width="0.0934%" height="15" fill="rgb(250,217,43)" fg:x="111164" fg:w="110"/><text x="94.6255%" y="463.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (106 samples, 0.09%)</title><rect x="94.3789%" y="437" width="0.0900%" height="15" fill="rgb(232,154,50)" fg:x="111168" fg:w="106"/><text x="94.6289%" y="447.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (106 samples, 0.09%)</title><rect x="94.3789%" y="421" width="0.0900%" height="15" fill="rgb(227,190,8)" fg:x="111168" fg:w="106"/><text x="94.6289%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (106 samples, 0.09%)</title><rect x="94.3789%" y="405" width="0.0900%" height="15" fill="rgb(209,217,32)" fg:x="111168" fg:w="106"/><text x="94.6289%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_add (106 samples, 0.09%)</title><rect x="94.3789%" y="389" width="0.0900%" height="15" fill="rgb(243,203,50)" fg:x="111168" fg:w="106"/><text x="94.6289%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (23 samples, 0.02%)</title><rect x="94.4689%" y="469" width="0.0195%" height="15" fill="rgb(232,152,27)" fg:x="111274" fg:w="23"/><text x="94.7189%" y="479.50"></text></g><g><title>core::ptr::write (18 samples, 0.02%)</title><rect x="94.4732%" y="453" width="0.0153%" height="15" fill="rgb(240,34,29)" fg:x="111279" fg:w="18"/><text x="94.7232%" y="463.50"></text></g><g><title>async_executor::Sleepers::update (223 samples, 0.19%)</title><rect x="94.3119%" y="485" width="0.1893%" height="15" fill="rgb(215,185,52)" fg:x="111089" fg:w="223"/><text x="94.5619%" y="495.50"></text></g><g><title>core::task::wake::Waker::will_wake (15 samples, 0.01%)</title><rect x="94.4884%" y="469" width="0.0127%" height="15" fill="rgb(240,89,49)" fg:x="111297" fg:w="15"/><text x="94.7384%" y="479.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (15 samples, 0.01%)</title><rect x="94.4884%" y="453" width="0.0127%" height="15" fill="rgb(225,12,52)" fg:x="111297" fg:w="15"/><text x="94.7384%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (13 samples, 0.01%)</title><rect x="94.4901%" y="437" width="0.0110%" height="15" fill="rgb(239,128,45)" fg:x="111299" fg:w="13"/><text x="94.7401%" y="447.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (13 samples, 0.01%)</title><rect x="94.4901%" y="421" width="0.0110%" height="15" fill="rgb(211,78,47)" fg:x="111299" fg:w="13"/><text x="94.7401%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (118 samples, 0.10%)</title><rect x="94.5046%" y="421" width="0.1002%" height="15" fill="rgb(232,31,21)" fg:x="111316" fg:w="118"/><text x="94.7546%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_swap (118 samples, 0.10%)</title><rect x="94.5046%" y="405" width="0.1002%" height="15" fill="rgb(222,168,14)" fg:x="111316" fg:w="118"/><text x="94.7546%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (124 samples, 0.11%)</title><rect x="94.5012%" y="485" width="0.1053%" height="15" fill="rgb(209,128,24)" fg:x="111312" fg:w="124"/><text x="94.7512%" y="495.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (124 samples, 0.11%)</title><rect x="94.5012%" y="469" width="0.1053%" height="15" fill="rgb(249,35,13)" fg:x="111312" fg:w="124"/><text x="94.7512%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (120 samples, 0.10%)</title><rect x="94.5046%" y="453" width="0.1019%" height="15" fill="rgb(218,7,2)" fg:x="111316" fg:w="120"/><text x="94.7546%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (120 samples, 0.10%)</title><rect x="94.5046%" y="437" width="0.1019%" height="15" fill="rgb(238,107,27)" fg:x="111316" fg:w="120"/><text x="94.7546%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (189 samples, 0.16%)</title><rect x="94.6065%" y="485" width="0.1605%" height="15" fill="rgb(217,88,38)" fg:x="111436" fg:w="189"/><text x="94.8565%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_swap (189 samples, 0.16%)</title><rect x="94.6065%" y="469" width="0.1605%" height="15" fill="rgb(230,207,0)" fg:x="111436" fg:w="189"/><text x="94.8565%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (135 samples, 0.11%)</title><rect x="94.7669%" y="485" width="0.1146%" height="15" fill="rgb(249,64,54)" fg:x="111625" fg:w="135"/><text x="95.0169%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_store (135 samples, 0.11%)</title><rect x="94.7669%" y="469" width="0.1146%" height="15" fill="rgb(231,7,11)" fg:x="111625" fg:w="135"/><text x="95.0169%" y="479.50"></text></g><g><title>std::sync::poison::Flag::get (15 samples, 0.01%)</title><rect x="94.8858%" y="437" width="0.0127%" height="15" fill="rgb(205,149,21)" fg:x="111765" fg:w="15"/><text x="95.1358%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (15 samples, 0.01%)</title><rect x="94.8858%" y="421" width="0.0127%" height="15" fill="rgb(215,126,34)" fg:x="111765" fg:w="15"/><text x="95.1358%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (15 samples, 0.01%)</title><rect x="94.8858%" y="405" width="0.0127%" height="15" fill="rgb(241,132,45)" fg:x="111765" fg:w="15"/><text x="95.1358%" y="415.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (23 samples, 0.02%)</title><rect x="94.8815%" y="469" width="0.0195%" height="15" fill="rgb(252,69,32)" fg:x="111760" fg:w="23"/><text x="95.1315%" y="479.50"></text></g><g><title>std::sync::poison::Flag::borrow (23 samples, 0.02%)</title><rect x="94.8815%" y="453" width="0.0195%" height="15" fill="rgb(232,204,19)" fg:x="111760" fg:w="23"/><text x="95.1315%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (160 samples, 0.14%)</title><rect x="94.9129%" y="437" width="0.1358%" height="15" fill="rgb(249,15,47)" fg:x="111797" fg:w="160"/><text x="95.1629%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (160 samples, 0.14%)</title><rect x="94.9129%" y="421" width="0.1358%" height="15" fill="rgb(209,227,23)" fg:x="111797" fg:w="160"/><text x="95.1629%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (17 samples, 0.01%)</title><rect x="95.0505%" y="421" width="0.0144%" height="15" fill="rgb(248,92,24)" fg:x="111959" fg:w="17"/><text x="95.3005%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (17 samples, 0.01%)</title><rect x="95.0505%" y="405" width="0.0144%" height="15" fill="rgb(247,59,2)" fg:x="111959" fg:w="17"/><text x="95.3005%" y="415.50"></text></g><g><title>core::hint::spin_loop (15 samples, 0.01%)</title><rect x="95.0691%" y="405" width="0.0127%" height="15" fill="rgb(221,30,5)" fg:x="111981" fg:w="15"/><text x="95.3191%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (15 samples, 0.01%)</title><rect x="95.0691%" y="389" width="0.0127%" height="15" fill="rgb(208,108,53)" fg:x="111981" fg:w="15"/><text x="95.3191%" y="399.50"></text></g><g><title>async_executor::Ticker::sleep (1,126 samples, 0.96%)</title><rect x="94.1395%" y="501" width="0.9559%" height="15" fill="rgb(211,183,26)" fg:x="110886" fg:w="1126"/><text x="94.3895%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (252 samples, 0.21%)</title><rect x="94.8815%" y="485" width="0.2139%" height="15" fill="rgb(232,132,4)" fg:x="111760" fg:w="252"/><text x="95.1315%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (229 samples, 0.19%)</title><rect x="94.9011%" y="469" width="0.1944%" height="15" fill="rgb(253,128,37)" fg:x="111783" fg:w="229"/><text x="95.1511%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (229 samples, 0.19%)</title><rect x="94.9011%" y="453" width="0.1944%" height="15" fill="rgb(221,58,24)" fg:x="111783" fg:w="229"/><text x="95.1511%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (55 samples, 0.05%)</title><rect x="95.0488%" y="437" width="0.0467%" height="15" fill="rgb(230,54,45)" fg:x="111957" fg:w="55"/><text x="95.2988%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (32 samples, 0.03%)</title><rect x="95.0683%" y="421" width="0.0272%" height="15" fill="rgb(254,21,18)" fg:x="111980" fg:w="32"/><text x="95.3183%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (16 samples, 0.01%)</title><rect x="95.0819%" y="405" width="0.0136%" height="15" fill="rgb(221,108,0)" fg:x="111996" fg:w="16"/><text x="95.3319%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (16 samples, 0.01%)</title><rect x="95.0819%" y="389" width="0.0136%" height="15" fill="rgb(206,95,1)" fg:x="111996" fg:w="16"/><text x="95.3319%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (12 samples, 0.01%)</title><rect x="95.1371%" y="469" width="0.0102%" height="15" fill="rgb(237,52,5)" fg:x="112061" fg:w="12"/><text x="95.3871%" y="479.50"></text></g><g><title>async_executor::Sleepers::remove (111 samples, 0.09%)</title><rect x="95.1048%" y="485" width="0.0942%" height="15" fill="rgb(218,150,34)" fg:x="112023" fg:w="111"/><text x="95.3548%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,core::task::wake::Waker)&gt; (51 samples, 0.04%)</title><rect x="95.1557%" y="469" width="0.0433%" height="15" fill="rgb(235,194,28)" fg:x="112083" fg:w="51"/><text x="95.4057%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (51 samples, 0.04%)</title><rect x="95.1557%" y="453" width="0.0433%" height="15" fill="rgb(245,92,18)" fg:x="112083" fg:w="51"/><text x="95.4057%" y="463.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (51 samples, 0.04%)</title><rect x="95.1557%" y="437" width="0.0433%" height="15" fill="rgb(253,203,53)" fg:x="112083" fg:w="51"/><text x="95.4057%" y="447.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::drop_waker (51 samples, 0.04%)</title><rect x="95.1557%" y="421" width="0.0433%" height="15" fill="rgb(249,185,47)" fg:x="112083" fg:w="51"/><text x="95.4057%" y="431.50"></text></g><g><title>core::mem::drop (51 samples, 0.04%)</title><rect x="95.1557%" y="405" width="0.0433%" height="15" fill="rgb(252,194,52)" fg:x="112083" fg:w="51"/><text x="95.4057%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (51 samples, 0.04%)</title><rect x="95.1557%" y="389" width="0.0433%" height="15" fill="rgb(210,53,36)" fg:x="112083" fg:w="51"/><text x="95.4057%" y="399.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (51 samples, 0.04%)</title><rect x="95.1557%" y="373" width="0.0433%" height="15" fill="rgb(237,37,25)" fg:x="112083" fg:w="51"/><text x="95.4057%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (51 samples, 0.04%)</title><rect x="95.1557%" y="357" width="0.0433%" height="15" fill="rgb(242,116,27)" fg:x="112083" fg:w="51"/><text x="95.4057%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_sub (51 samples, 0.04%)</title><rect x="95.1557%" y="341" width="0.0433%" height="15" fill="rgb(213,185,26)" fg:x="112083" fg:w="51"/><text x="95.4057%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (34 samples, 0.03%)</title><rect x="95.2016%" y="421" width="0.0289%" height="15" fill="rgb(225,204,8)" fg:x="112137" fg:w="34"/><text x="95.4516%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_swap (34 samples, 0.03%)</title><rect x="95.2016%" y="405" width="0.0289%" height="15" fill="rgb(254,111,37)" fg:x="112137" fg:w="34"/><text x="95.4516%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (42 samples, 0.04%)</title><rect x="95.1990%" y="485" width="0.0357%" height="15" fill="rgb(242,35,9)" fg:x="112134" fg:w="42"/><text x="95.4490%" y="495.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (42 samples, 0.04%)</title><rect x="95.1990%" y="469" width="0.0357%" height="15" fill="rgb(232,138,49)" fg:x="112134" fg:w="42"/><text x="95.4490%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (39 samples, 0.03%)</title><rect x="95.2016%" y="453" width="0.0331%" height="15" fill="rgb(247,56,4)" fg:x="112137" fg:w="39"/><text x="95.4516%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (39 samples, 0.03%)</title><rect x="95.2016%" y="437" width="0.0331%" height="15" fill="rgb(226,179,17)" fg:x="112137" fg:w="39"/><text x="95.4516%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (61 samples, 0.05%)</title><rect x="95.2347%" y="485" width="0.0518%" height="15" fill="rgb(216,163,45)" fg:x="112176" fg:w="61"/><text x="95.4847%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_swap (61 samples, 0.05%)</title><rect x="95.2347%" y="469" width="0.0518%" height="15" fill="rgb(211,157,3)" fg:x="112176" fg:w="61"/><text x="95.4847%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (65 samples, 0.06%)</title><rect x="95.2865%" y="485" width="0.0552%" height="15" fill="rgb(234,44,20)" fg:x="112237" fg:w="65"/><text x="95.5365%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_swap (65 samples, 0.06%)</title><rect x="95.2865%" y="469" width="0.0552%" height="15" fill="rgb(254,138,23)" fg:x="112237" fg:w="65"/><text x="95.5365%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (49 samples, 0.04%)</title><rect x="95.3476%" y="437" width="0.0416%" height="15" fill="rgb(206,119,39)" fg:x="112309" fg:w="49"/><text x="95.5976%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (49 samples, 0.04%)</title><rect x="95.3476%" y="421" width="0.0416%" height="15" fill="rgb(231,105,52)" fg:x="112309" fg:w="49"/><text x="95.5976%" y="431.50"></text></g><g><title>async_executor::Ticker::wake (374 samples, 0.32%)</title><rect x="95.0955%" y="501" width="0.3175%" height="15" fill="rgb(250,20,5)" fg:x="112012" fg:w="374"/><text x="95.3455%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (84 samples, 0.07%)</title><rect x="95.3417%" y="485" width="0.0713%" height="15" fill="rgb(215,198,30)" fg:x="112302" fg:w="84"/><text x="95.5917%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (77 samples, 0.07%)</title><rect x="95.3476%" y="469" width="0.0654%" height="15" fill="rgb(246,142,8)" fg:x="112309" fg:w="77"/><text x="95.5976%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (77 samples, 0.07%)</title><rect x="95.3476%" y="453" width="0.0654%" height="15" fill="rgb(243,26,38)" fg:x="112309" fg:w="77"/><text x="95.5976%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (28 samples, 0.02%)</title><rect x="95.3892%" y="437" width="0.0238%" height="15" fill="rgb(205,133,28)" fg:x="112358" fg:w="28"/><text x="95.6392%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (14 samples, 0.01%)</title><rect x="95.4011%" y="421" width="0.0119%" height="15" fill="rgb(212,34,0)" fg:x="112372" fg:w="14"/><text x="95.6511%" y="431.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,338 samples, 6.23%)</title><rect x="89.1874%" y="565" width="6.2298%" height="15" fill="rgb(251,226,22)" fg:x="105053" fg:w="7338"/><text x="89.4374%" y="575.50">&lt;core::f..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (7,338 samples, 6.23%)</title><rect x="89.1874%" y="549" width="6.2298%" height="15" fill="rgb(252,119,9)" fg:x="105053" fg:w="7338"/><text x="89.4374%" y="559.50">async_ex..</text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (7,318 samples, 6.21%)</title><rect x="89.2044%" y="533" width="6.2128%" height="15" fill="rgb(213,150,50)" fg:x="105073" fg:w="7318"/><text x="89.4544%" y="543.50">&lt;futures..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (7,312 samples, 6.21%)</title><rect x="89.2095%" y="517" width="6.2077%" height="15" fill="rgb(212,24,39)" fg:x="105079" fg:w="7312"/><text x="89.4595%" y="527.50">async_ex..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,424 samples, 6.30%)</title><rect x="89.1450%" y="597" width="6.3028%" height="15" fill="rgb(213,46,39)" fg:x="105003" fg:w="7424"/><text x="89.3950%" y="607.50">&lt;core::f..</text></g><g><title>async_executor::Runner::runnable::{{closure}} (7,422 samples, 6.30%)</title><rect x="89.1467%" y="581" width="6.3011%" height="15" fill="rgb(239,106,12)" fg:x="105005" fg:w="7422"/><text x="89.3967%" y="591.50">async_ex..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (32 samples, 0.03%)</title><rect x="95.4206%" y="565" width="0.0272%" height="15" fill="rgb(249,229,21)" fg:x="112395" fg:w="32"/><text x="95.6706%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_add (32 samples, 0.03%)</title><rect x="95.4206%" y="549" width="0.0272%" height="15" fill="rgb(212,158,3)" fg:x="112395" fg:w="32"/><text x="95.6706%" y="559.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (16 samples, 0.01%)</title><rect x="95.7101%" y="405" width="0.0136%" height="15" fill="rgb(253,26,48)" fg:x="112736" fg:w="16"/><text x="95.9601%" y="415.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (104 samples, 0.09%)</title><rect x="95.8629%" y="389" width="0.0883%" height="15" fill="rgb(238,178,20)" fg:x="112916" fg:w="104"/><text x="96.1129%" y="399.50"></text></g><g><title>[libc-2.31.so] (100 samples, 0.08%)</title><rect x="95.8663%" y="373" width="0.0849%" height="15" fill="rgb(208,86,15)" fg:x="112920" fg:w="100"/><text x="96.1163%" y="383.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (131 samples, 0.11%)</title><rect x="95.9512%" y="389" width="0.1112%" height="15" fill="rgb(239,42,53)" fg:x="113020" fg:w="131"/><text x="96.2012%" y="399.50"></text></g><g><title>[libc-2.31.so] (120 samples, 0.10%)</title><rect x="95.9606%" y="373" width="0.1019%" height="15" fill="rgb(245,226,8)" fg:x="113031" fg:w="120"/><text x="96.2106%" y="383.50"></text></g><g><title>[libc-2.31.so] (167 samples, 0.14%)</title><rect x="96.1117%" y="373" width="0.1418%" height="15" fill="rgb(216,176,32)" fg:x="113209" fg:w="167"/><text x="96.3617%" y="383.50"></text></g><g><title>sn_rust_dealloc (24 samples, 0.02%)</title><rect x="96.2586%" y="261" width="0.0204%" height="15" fill="rgb(231,186,21)" fg:x="113382" fg:w="24"/><text x="96.5086%" y="271.50"></text></g><g><title>alloc::alloc::box_free (30 samples, 0.03%)</title><rect x="96.2543%" y="341" width="0.0255%" height="15" fill="rgb(205,95,49)" fg:x="113377" fg:w="30"/><text x="96.5043%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (30 samples, 0.03%)</title><rect x="96.2543%" y="325" width="0.0255%" height="15" fill="rgb(217,145,8)" fg:x="113377" fg:w="30"/><text x="96.5043%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (30 samples, 0.03%)</title><rect x="96.2543%" y="309" width="0.0255%" height="15" fill="rgb(239,144,48)" fg:x="113377" fg:w="30"/><text x="96.5043%" y="319.50"></text></g><g><title>__rg_dealloc (30 samples, 0.03%)</title><rect x="96.2543%" y="293" width="0.0255%" height="15" fill="rgb(214,189,23)" fg:x="113377" fg:w="30"/><text x="96.5043%" y="303.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (30 samples, 0.03%)</title><rect x="96.2543%" y="277" width="0.0255%" height="15" fill="rgb(229,157,17)" fg:x="113377" fg:w="30"/><text x="96.5043%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt;&gt; (31 samples, 0.03%)</title><rect x="96.2543%" y="373" width="0.0263%" height="15" fill="rgb(230,5,48)" fg:x="113377" fg:w="31"/><text x="96.5043%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt; (31 samples, 0.03%)</title><rect x="96.2543%" y="357" width="0.0263%" height="15" fill="rgb(224,156,48)" fg:x="113377" fg:w="31"/><text x="96.5043%" y="367.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (46 samples, 0.04%)</title><rect x="96.3333%" y="309" width="0.0391%" height="15" fill="rgb(223,14,29)" fg:x="113470" fg:w="46"/><text x="96.5833%" y="319.50"></text></g><g><title>core::mem::replace (46 samples, 0.04%)</title><rect x="96.3333%" y="293" width="0.0391%" height="15" fill="rgb(229,96,36)" fg:x="113470" fg:w="46"/><text x="96.5833%" y="303.50"></text></g><g><title>core::ptr::read (46 samples, 0.04%)</title><rect x="96.3333%" y="277" width="0.0391%" height="15" fill="rgb(231,102,53)" fg:x="113470" fg:w="46"/><text x="96.5833%" y="287.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (70 samples, 0.06%)</title><rect x="96.3205%" y="325" width="0.0594%" height="15" fill="rgb(210,77,38)" fg:x="113455" fg:w="70"/><text x="96.5705%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (52 samples, 0.04%)</title><rect x="96.3800%" y="325" width="0.0441%" height="15" fill="rgb(235,131,6)" fg:x="113525" fg:w="52"/><text x="96.6300%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (48 samples, 0.04%)</title><rect x="96.3834%" y="309" width="0.0408%" height="15" fill="rgb(252,55,38)" fg:x="113529" fg:w="48"/><text x="96.6334%" y="319.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (48 samples, 0.04%)</title><rect x="96.3834%" y="293" width="0.0408%" height="15" fill="rgb(246,38,14)" fg:x="113529" fg:w="48"/><text x="96.6334%" y="303.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (47 samples, 0.04%)</title><rect x="96.3842%" y="277" width="0.0399%" height="15" fill="rgb(242,27,5)" fg:x="113530" fg:w="47"/><text x="96.6342%" y="287.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (47 samples, 0.04%)</title><rect x="96.3842%" y="261" width="0.0399%" height="15" fill="rgb(228,65,35)" fg:x="113530" fg:w="47"/><text x="96.6342%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (47 samples, 0.04%)</title><rect x="96.3842%" y="245" width="0.0399%" height="15" fill="rgb(245,93,11)" fg:x="113530" fg:w="47"/><text x="96.6342%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_swap (47 samples, 0.04%)</title><rect x="96.3842%" y="229" width="0.0399%" height="15" fill="rgb(213,1,31)" fg:x="113530" fg:w="47"/><text x="96.6342%" y="239.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (238 samples, 0.20%)</title><rect x="96.2942%" y="341" width="0.2021%" height="15" fill="rgb(237,205,14)" fg:x="113424" fg:w="238"/><text x="96.5442%" y="351.50"></text></g><g><title>event_listener::Inner::lock (76 samples, 0.06%)</title><rect x="96.4318%" y="325" width="0.0645%" height="15" fill="rgb(232,118,45)" fg:x="113586" fg:w="76"/><text x="96.6818%" y="335.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (71 samples, 0.06%)</title><rect x="96.4360%" y="309" width="0.0603%" height="15" fill="rgb(218,5,6)" fg:x="113591" fg:w="71"/><text x="96.6860%" y="319.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (68 samples, 0.06%)</title><rect x="96.4385%" y="293" width="0.0577%" height="15" fill="rgb(251,87,51)" fg:x="113594" fg:w="68"/><text x="96.6885%" y="303.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (68 samples, 0.06%)</title><rect x="96.4385%" y="277" width="0.0577%" height="15" fill="rgb(207,225,20)" fg:x="113594" fg:w="68"/><text x="96.6885%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (68 samples, 0.06%)</title><rect x="96.4385%" y="261" width="0.0577%" height="15" fill="rgb(222,78,54)" fg:x="113594" fg:w="68"/><text x="96.6885%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (68 samples, 0.06%)</title><rect x="96.4385%" y="245" width="0.0577%" height="15" fill="rgb(232,85,16)" fg:x="113594" fg:w="68"/><text x="96.6885%" y="255.50"></text></g><g><title>concurrent_queue::full_fence (98 samples, 0.08%)</title><rect x="96.5150%" y="293" width="0.0832%" height="15" fill="rgb(244,25,33)" fg:x="113684" fg:w="98"/><text x="96.7650%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (94 samples, 0.08%)</title><rect x="96.5184%" y="277" width="0.0798%" height="15" fill="rgb(233,24,36)" fg:x="113688" fg:w="94"/><text x="96.7684%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (94 samples, 0.08%)</title><rect x="96.5184%" y="261" width="0.0798%" height="15" fill="rgb(253,49,54)" fg:x="113688" fg:w="94"/><text x="96.7684%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (94 samples, 0.08%)</title><rect x="96.5184%" y="245" width="0.0798%" height="15" fill="rgb(245,12,22)" fg:x="113688" fg:w="94"/><text x="96.7684%" y="255.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (647 samples, 0.55%)</title><rect x="96.0625%" y="389" width="0.5493%" height="15" fill="rgb(253,141,28)" fg:x="113151" fg:w="647"/><text x="96.3125%" y="399.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (390 samples, 0.33%)</title><rect x="96.2806%" y="373" width="0.3311%" height="15" fill="rgb(225,207,27)" fg:x="113408" fg:w="390"/><text x="96.5306%" y="383.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (390 samples, 0.33%)</title><rect x="96.2806%" y="357" width="0.3311%" height="15" fill="rgb(220,84,2)" fg:x="113408" fg:w="390"/><text x="96.5306%" y="367.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (136 samples, 0.12%)</title><rect x="96.4963%" y="341" width="0.1155%" height="15" fill="rgb(224,37,37)" fg:x="113662" fg:w="136"/><text x="96.7463%" y="351.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (128 samples, 0.11%)</title><rect x="96.5031%" y="325" width="0.1087%" height="15" fill="rgb(220,143,18)" fg:x="113670" fg:w="128"/><text x="96.7531%" y="335.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (121 samples, 0.10%)</title><rect x="96.5090%" y="309" width="0.1027%" height="15" fill="rgb(210,88,33)" fg:x="113677" fg:w="121"/><text x="96.7590%" y="319.50"></text></g><g><title>[libc-2.31.so] (46 samples, 0.04%)</title><rect x="96.6117%" y="389" width="0.0391%" height="15" fill="rgb(219,87,51)" fg:x="113798" fg:w="46"/><text x="96.8617%" y="399.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (136 samples, 0.12%)</title><rect x="96.6508%" y="389" width="0.1155%" height="15" fill="rgb(211,7,35)" fg:x="113844" fg:w="136"/><text x="96.9008%" y="399.50"></text></g><g><title>alloc::alloc::exchange_malloc (41 samples, 0.03%)</title><rect x="96.7314%" y="373" width="0.0348%" height="15" fill="rgb(232,77,2)" fg:x="113939" fg:w="41"/><text x="96.9814%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (41 samples, 0.03%)</title><rect x="96.7314%" y="357" width="0.0348%" height="15" fill="rgb(249,94,25)" fg:x="113939" fg:w="41"/><text x="96.9814%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (41 samples, 0.03%)</title><rect x="96.7314%" y="341" width="0.0348%" height="15" fill="rgb(215,112,2)" fg:x="113939" fg:w="41"/><text x="96.9814%" y="351.50"></text></g><g><title>alloc::alloc::alloc (39 samples, 0.03%)</title><rect x="96.7331%" y="325" width="0.0331%" height="15" fill="rgb(226,115,48)" fg:x="113941" fg:w="39"/><text x="96.9831%" y="335.50"></text></g><g><title>__rg_alloc (39 samples, 0.03%)</title><rect x="96.7331%" y="309" width="0.0331%" height="15" fill="rgb(249,196,10)" fg:x="113941" fg:w="39"/><text x="96.9831%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (39 samples, 0.03%)</title><rect x="96.7331%" y="293" width="0.0331%" height="15" fill="rgb(237,109,14)" fg:x="113941" fg:w="39"/><text x="96.9831%" y="303.50"></text></g><g><title>sn_rust_alloc (36 samples, 0.03%)</title><rect x="96.7357%" y="277" width="0.0306%" height="15" fill="rgb(217,103,53)" fg:x="113944" fg:w="36"/><text x="96.9857%" y="287.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (18 samples, 0.02%)</title><rect x="96.7510%" y="261" width="0.0153%" height="15" fill="rgb(244,137,9)" fg:x="113962" fg:w="18"/><text x="97.0010%" y="271.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (1,249 samples, 1.06%)</title><rect x="95.7237%" y="405" width="1.0604%" height="15" fill="rgb(227,201,3)" fg:x="112752" fg:w="1249"/><text x="95.9737%" y="415.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,303 samples, 1.11%)</title><rect x="95.6787%" y="437" width="1.1062%" height="15" fill="rgb(243,94,6)" fg:x="112699" fg:w="1303"/><text x="95.9287%" y="447.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,303 samples, 1.11%)</title><rect x="95.6787%" y="421" width="1.1062%" height="15" fill="rgb(235,118,5)" fg:x="112699" fg:w="1303"/><text x="95.9287%" y="431.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,413 samples, 1.20%)</title><rect x="95.5904%" y="565" width="1.1996%" height="15" fill="rgb(247,10,30)" fg:x="112595" fg:w="1413"/><text x="95.8404%" y="575.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,413 samples, 1.20%)</title><rect x="95.5904%" y="549" width="1.1996%" height="15" fill="rgb(205,26,28)" fg:x="112595" fg:w="1413"/><text x="95.8404%" y="559.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (1,412 samples, 1.20%)</title><rect x="95.5913%" y="533" width="1.1988%" height="15" fill="rgb(206,99,35)" fg:x="112596" fg:w="1412"/><text x="95.8413%" y="543.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (1,321 samples, 1.12%)</title><rect x="95.6685%" y="517" width="1.1215%" height="15" fill="rgb(238,130,40)" fg:x="112687" fg:w="1321"/><text x="95.9185%" y="527.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (1,321 samples, 1.12%)</title><rect x="95.6685%" y="501" width="1.1215%" height="15" fill="rgb(224,126,31)" fg:x="112687" fg:w="1321"/><text x="95.9185%" y="511.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,321 samples, 1.12%)</title><rect x="95.6685%" y="485" width="1.1215%" height="15" fill="rgb(254,105,17)" fg:x="112687" fg:w="1321"/><text x="95.9185%" y="495.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,321 samples, 1.12%)</title><rect x="95.6685%" y="469" width="1.1215%" height="15" fill="rgb(216,87,36)" fg:x="112687" fg:w="1321"/><text x="95.9185%" y="479.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (1,311 samples, 1.11%)</title><rect x="95.6770%" y="453" width="1.1130%" height="15" fill="rgb(240,21,12)" fg:x="112697" fg:w="1311"/><text x="95.9270%" y="463.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_ref (33 samples, 0.03%)</title><rect x="96.7900%" y="565" width="0.0280%" height="15" fill="rgb(245,192,34)" fg:x="114008" fg:w="33"/><text x="97.0400%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (33 samples, 0.03%)</title><rect x="96.7900%" y="549" width="0.0280%" height="15" fill="rgb(226,100,49)" fg:x="114008" fg:w="33"/><text x="97.0400%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_sub (33 samples, 0.03%)</title><rect x="96.7900%" y="533" width="0.0280%" height="15" fill="rgb(245,188,27)" fg:x="114008" fg:w="33"/><text x="97.0400%" y="543.50"></text></g><g><title>async_executor::State::notify (13 samples, 0.01%)</title><rect x="96.8189%" y="533" width="0.0110%" height="15" fill="rgb(212,170,8)" fg:x="114042" fg:w="13"/><text x="97.0689%" y="543.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (21 samples, 0.02%)</title><rect x="96.8189%" y="549" width="0.0178%" height="15" fill="rgb(217,113,29)" fg:x="114042" fg:w="21"/><text x="97.0689%" y="559.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::schedule (23 samples, 0.02%)</title><rect x="96.8189%" y="565" width="0.0195%" height="15" fill="rgb(237,30,3)" fg:x="114042" fg:w="23"/><text x="97.0689%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (167 samples, 0.14%)</title><rect x="96.8393%" y="565" width="0.1418%" height="15" fill="rgb(227,19,28)" fg:x="114066" fg:w="167"/><text x="97.0893%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (167 samples, 0.14%)</title><rect x="96.8393%" y="549" width="0.1418%" height="15" fill="rgb(239,172,45)" fg:x="114066" fg:w="167"/><text x="97.0893%" y="559.50"></text></g><g><title>async_task::runnable::Runnable::run (1,808 samples, 1.53%)</title><rect x="95.4503%" y="597" width="1.5349%" height="15" fill="rgb(254,55,39)" fg:x="112430" fg:w="1808"/><text x="95.7003%" y="607.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (1,743 samples, 1.48%)</title><rect x="95.5055%" y="581" width="1.4798%" height="15" fill="rgb(249,208,12)" fg:x="112495" fg:w="1743"/><text x="95.7555%" y="591.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (9,297 samples, 7.89%)</title><rect x="89.1272%" y="645" width="7.8929%" height="15" fill="rgb(240,52,13)" fg:x="104982" fg:w="9297"/><text x="89.3772%" y="655.50">&lt;futures_li..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,297 samples, 7.89%)</title><rect x="89.1272%" y="629" width="7.8929%" height="15" fill="rgb(252,149,13)" fg:x="104982" fg:w="9297"/><text x="89.3772%" y="639.50">&lt;core::futu..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (9,295 samples, 7.89%)</title><rect x="89.1289%" y="613" width="7.8912%" height="15" fill="rgb(232,81,48)" fg:x="104984" fg:w="9295"/><text x="89.3789%" y="623.50">async_execu..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (41 samples, 0.03%)</title><rect x="96.9853%" y="597" width="0.0348%" height="15" fill="rgb(222,144,2)" fg:x="114238" fg:w="41"/><text x="97.2353%" y="607.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (41 samples, 0.03%)</title><rect x="96.9853%" y="581" width="0.0348%" height="15" fill="rgb(216,81,32)" fg:x="114238" fg:w="41"/><text x="97.2353%" y="591.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (9,335 samples, 7.93%)</title><rect x="89.0958%" y="661" width="7.9252%" height="15" fill="rgb(244,78,51)" fg:x="104945" fg:w="9335"/><text x="89.3458%" y="671.50">async_execu..</text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (32 samples, 0.03%)</title><rect x="97.1016%" y="405" width="0.0272%" height="15" fill="rgb(217,66,21)" fg:x="114375" fg:w="32"/><text x="97.3516%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (32 samples, 0.03%)</title><rect x="97.1016%" y="389" width="0.0272%" height="15" fill="rgb(247,101,42)" fg:x="114375" fg:w="32"/><text x="97.3516%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (32 samples, 0.03%)</title><rect x="97.1016%" y="373" width="0.0272%" height="15" fill="rgb(227,81,39)" fg:x="114375" fg:w="32"/><text x="97.3516%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (24 samples, 0.02%)</title><rect x="97.1084%" y="357" width="0.0204%" height="15" fill="rgb(220,223,44)" fg:x="114383" fg:w="24"/><text x="97.3584%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (24 samples, 0.02%)</title><rect x="97.1084%" y="341" width="0.0204%" height="15" fill="rgb(205,218,2)" fg:x="114383" fg:w="24"/><text x="97.3584%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (22 samples, 0.02%)</title><rect x="97.1101%" y="325" width="0.0187%" height="15" fill="rgb(212,207,28)" fg:x="114385" fg:w="22"/><text x="97.3601%" y="335.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (22 samples, 0.02%)</title><rect x="97.1101%" y="309" width="0.0187%" height="15" fill="rgb(224,12,41)" fg:x="114385" fg:w="22"/><text x="97.3601%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 0.03%)</title><rect x="97.1016%" y="453" width="0.0280%" height="15" fill="rgb(216,118,12)" fg:x="114375" fg:w="33"/><text x="97.3516%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (33 samples, 0.03%)</title><rect x="97.1016%" y="437" width="0.0280%" height="15" fill="rgb(252,97,46)" fg:x="114375" fg:w="33"/><text x="97.3516%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (33 samples, 0.03%)</title><rect x="97.1016%" y="421" width="0.0280%" height="15" fill="rgb(244,206,19)" fg:x="114375" fg:w="33"/><text x="97.3516%" y="431.50"></text></g><g><title>concurrent_queue::full_fence (43 samples, 0.04%)</title><rect x="97.1602%" y="421" width="0.0365%" height="15" fill="rgb(231,84,31)" fg:x="114444" fg:w="43"/><text x="97.4102%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (42 samples, 0.04%)</title><rect x="97.1610%" y="405" width="0.0357%" height="15" fill="rgb(244,133,0)" fg:x="114445" fg:w="42"/><text x="97.4110%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (42 samples, 0.04%)</title><rect x="97.1610%" y="389" width="0.0357%" height="15" fill="rgb(223,15,50)" fg:x="114445" fg:w="42"/><text x="97.4110%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (42 samples, 0.04%)</title><rect x="97.1610%" y="373" width="0.0357%" height="15" fill="rgb(250,118,49)" fg:x="114445" fg:w="42"/><text x="97.4110%" y="383.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (154 samples, 0.13%)</title><rect x="97.1466%" y="437" width="0.1307%" height="15" fill="rgb(248,25,38)" fg:x="114428" fg:w="154"/><text x="97.3966%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (95 samples, 0.08%)</title><rect x="97.1967%" y="421" width="0.0807%" height="15" fill="rgb(215,70,14)" fg:x="114487" fg:w="95"/><text x="97.4467%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (95 samples, 0.08%)</title><rect x="97.1967%" y="405" width="0.0807%" height="15" fill="rgb(215,28,15)" fg:x="114487" fg:w="95"/><text x="97.4467%" y="415.50"></text></g><g><title>concurrent_queue::full_fence (33 samples, 0.03%)</title><rect x="97.2841%" y="421" width="0.0280%" height="15" fill="rgb(243,6,28)" fg:x="114590" fg:w="33"/><text x="97.5341%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (33 samples, 0.03%)</title><rect x="97.2841%" y="405" width="0.0280%" height="15" fill="rgb(222,130,1)" fg:x="114590" fg:w="33"/><text x="97.5341%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (33 samples, 0.03%)</title><rect x="97.2841%" y="389" width="0.0280%" height="15" fill="rgb(236,166,44)" fg:x="114590" fg:w="33"/><text x="97.5341%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (33 samples, 0.03%)</title><rect x="97.2841%" y="373" width="0.0280%" height="15" fill="rgb(221,108,14)" fg:x="114590" fg:w="33"/><text x="97.5341%" y="383.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (232 samples, 0.20%)</title><rect x="97.1296%" y="453" width="0.1970%" height="15" fill="rgb(252,3,45)" fg:x="114408" fg:w="232"/><text x="97.3796%" y="463.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (58 samples, 0.05%)</title><rect x="97.2773%" y="437" width="0.0492%" height="15" fill="rgb(237,68,30)" fg:x="114582" fg:w="58"/><text x="97.5273%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (16 samples, 0.01%)</title><rect x="97.3130%" y="421" width="0.0136%" height="15" fill="rgb(211,79,22)" fg:x="114624" fg:w="16"/><text x="97.5630%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (16 samples, 0.01%)</title><rect x="97.3130%" y="405" width="0.0136%" height="15" fill="rgb(252,185,21)" fg:x="114624" fg:w="16"/><text x="97.5630%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (37 samples, 0.03%)</title><rect x="97.3266%" y="453" width="0.0314%" height="15" fill="rgb(225,189,26)" fg:x="114640" fg:w="37"/><text x="97.5766%" y="463.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.03%)</title><rect x="97.3266%" y="437" width="0.0314%" height="15" fill="rgb(241,30,40)" fg:x="114640" fg:w="37"/><text x="97.5766%" y="447.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read_unlock (33 samples, 0.03%)</title><rect x="97.3300%" y="421" width="0.0280%" height="15" fill="rgb(235,215,44)" fg:x="114644" fg:w="33"/><text x="97.5800%" y="431.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_unlock (33 samples, 0.03%)</title><rect x="97.3300%" y="405" width="0.0280%" height="15" fill="rgb(205,8,29)" fg:x="114644" fg:w="33"/><text x="97.5800%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (31 samples, 0.03%)</title><rect x="97.3317%" y="389" width="0.0263%" height="15" fill="rgb(241,137,42)" fg:x="114646" fg:w="31"/><text x="97.5817%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_sub (31 samples, 0.03%)</title><rect x="97.3317%" y="373" width="0.0263%" height="15" fill="rgb(237,155,2)" fg:x="114646" fg:w="31"/><text x="97.5817%" y="383.50"></text></g><g><title>fastrand::usize (15 samples, 0.01%)</title><rect x="97.3580%" y="453" width="0.0127%" height="15" fill="rgb(245,29,42)" fg:x="114677" fg:w="15"/><text x="97.6080%" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (14 samples, 0.01%)</title><rect x="97.3588%" y="437" width="0.0119%" height="15" fill="rgb(234,101,35)" fg:x="114678" fg:w="14"/><text x="97.6088%" y="447.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (14 samples, 0.01%)</title><rect x="97.3588%" y="421" width="0.0119%" height="15" fill="rgb(228,64,37)" fg:x="114678" fg:w="14"/><text x="97.6088%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (32 samples, 0.03%)</title><rect x="97.3750%" y="405" width="0.0272%" height="15" fill="rgb(217,214,36)" fg:x="114697" fg:w="32"/><text x="97.6250%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (32 samples, 0.03%)</title><rect x="97.3750%" y="389" width="0.0272%" height="15" fill="rgb(243,70,3)" fg:x="114697" fg:w="32"/><text x="97.6250%" y="399.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (374 samples, 0.32%)</title><rect x="97.0880%" y="469" width="0.3175%" height="15" fill="rgb(253,158,52)" fg:x="114359" fg:w="374"/><text x="97.3380%" y="479.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (41 samples, 0.03%)</title><rect x="97.3707%" y="453" width="0.0348%" height="15" fill="rgb(234,111,54)" fg:x="114692" fg:w="41"/><text x="97.6207%" y="463.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read (38 samples, 0.03%)</title><rect x="97.3733%" y="437" width="0.0323%" height="15" fill="rgb(217,70,32)" fg:x="114695" fg:w="38"/><text x="97.6233%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (38 samples, 0.03%)</title><rect x="97.3733%" y="421" width="0.0323%" height="15" fill="rgb(234,18,33)" fg:x="114695" fg:w="38"/><text x="97.6233%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (45 samples, 0.04%)</title><rect x="97.4225%" y="453" width="0.0382%" height="15" fill="rgb(234,12,49)" fg:x="114753" fg:w="45"/><text x="97.6725%" y="463.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (45 samples, 0.04%)</title><rect x="97.4225%" y="437" width="0.0382%" height="15" fill="rgb(236,10,21)" fg:x="114753" fg:w="45"/><text x="97.6725%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (39 samples, 0.03%)</title><rect x="97.4276%" y="421" width="0.0331%" height="15" fill="rgb(248,182,45)" fg:x="114759" fg:w="39"/><text x="97.6776%" y="431.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (39 samples, 0.03%)</title><rect x="97.4276%" y="405" width="0.0331%" height="15" fill="rgb(217,95,36)" fg:x="114759" fg:w="39"/><text x="97.6776%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (39 samples, 0.03%)</title><rect x="97.4276%" y="389" width="0.0331%" height="15" fill="rgb(212,110,31)" fg:x="114759" fg:w="39"/><text x="97.6776%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_swap (39 samples, 0.03%)</title><rect x="97.4276%" y="373" width="0.0331%" height="15" fill="rgb(206,32,53)" fg:x="114759" fg:w="39"/><text x="97.6776%" y="383.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (526 samples, 0.45%)</title><rect x="97.0515%" y="581" width="0.4466%" height="15" fill="rgb(246,141,37)" fg:x="114316" fg:w="526"/><text x="97.3015%" y="591.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (515 samples, 0.44%)</title><rect x="97.0608%" y="565" width="0.4372%" height="15" fill="rgb(219,16,7)" fg:x="114327" fg:w="515"/><text x="97.3108%" y="575.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}} (515 samples, 0.44%)</title><rect x="97.0608%" y="549" width="0.4372%" height="15" fill="rgb(230,205,45)" fg:x="114327" fg:w="515"/><text x="97.3108%" y="559.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (500 samples, 0.42%)</title><rect x="97.0736%" y="533" width="0.4245%" height="15" fill="rgb(231,43,49)" fg:x="114342" fg:w="500"/><text x="97.3236%" y="543.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (500 samples, 0.42%)</title><rect x="97.0736%" y="517" width="0.4245%" height="15" fill="rgb(212,106,34)" fg:x="114342" fg:w="500"/><text x="97.3236%" y="527.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (486 samples, 0.41%)</title><rect x="97.0855%" y="501" width="0.4126%" height="15" fill="rgb(206,83,17)" fg:x="114356" fg:w="486"/><text x="97.3355%" y="511.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (484 samples, 0.41%)</title><rect x="97.0872%" y="485" width="0.4109%" height="15" fill="rgb(244,154,49)" fg:x="114358" fg:w="484"/><text x="97.3372%" y="495.50"></text></g><g><title>async_executor::Ticker::sleep (109 samples, 0.09%)</title><rect x="97.4055%" y="469" width="0.0925%" height="15" fill="rgb(244,149,49)" fg:x="114733" fg:w="109"/><text x="97.6555%" y="479.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (44 samples, 0.04%)</title><rect x="97.4607%" y="453" width="0.0374%" height="15" fill="rgb(227,134,18)" fg:x="114798" fg:w="44"/><text x="97.7107%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (42 samples, 0.04%)</title><rect x="97.4624%" y="437" width="0.0357%" height="15" fill="rgb(237,116,36)" fg:x="114800" fg:w="42"/><text x="97.7124%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (42 samples, 0.04%)</title><rect x="97.4624%" y="421" width="0.0357%" height="15" fill="rgb(205,129,40)" fg:x="114800" fg:w="42"/><text x="97.7124%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (42 samples, 0.04%)</title><rect x="97.4624%" y="405" width="0.0357%" height="15" fill="rgb(236,178,4)" fg:x="114800" fg:w="42"/><text x="97.7124%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (42 samples, 0.04%)</title><rect x="97.4624%" y="389" width="0.0357%" height="15" fill="rgb(251,76,53)" fg:x="114800" fg:w="42"/><text x="97.7124%" y="399.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (19 samples, 0.02%)</title><rect x="97.5575%" y="517" width="0.0161%" height="15" fill="rgb(242,92,40)" fg:x="114912" fg:w="19"/><text x="97.8075%" y="527.50"></text></g><g><title>core::mem::replace (19 samples, 0.02%)</title><rect x="97.5575%" y="501" width="0.0161%" height="15" fill="rgb(209,45,30)" fg:x="114912" fg:w="19"/><text x="97.8075%" y="511.50"></text></g><g><title>core::ptr::read (19 samples, 0.02%)</title><rect x="97.5575%" y="485" width="0.0161%" height="15" fill="rgb(218,157,36)" fg:x="114912" fg:w="19"/><text x="97.8075%" y="495.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (36 samples, 0.03%)</title><rect x="97.5490%" y="533" width="0.0306%" height="15" fill="rgb(222,186,16)" fg:x="114902" fg:w="36"/><text x="97.7990%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (36 samples, 0.03%)</title><rect x="97.5796%" y="533" width="0.0306%" height="15" fill="rgb(254,72,35)" fg:x="114938" fg:w="36"/><text x="97.8296%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (33 samples, 0.03%)</title><rect x="97.5821%" y="517" width="0.0280%" height="15" fill="rgb(224,25,35)" fg:x="114941" fg:w="33"/><text x="97.8321%" y="527.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.03%)</title><rect x="97.5821%" y="501" width="0.0280%" height="15" fill="rgb(206,135,52)" fg:x="114941" fg:w="33"/><text x="97.8321%" y="511.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (31 samples, 0.03%)</title><rect x="97.5838%" y="485" width="0.0263%" height="15" fill="rgb(229,174,47)" fg:x="114943" fg:w="31"/><text x="97.8338%" y="495.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (31 samples, 0.03%)</title><rect x="97.5838%" y="469" width="0.0263%" height="15" fill="rgb(242,184,21)" fg:x="114943" fg:w="31"/><text x="97.8338%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (31 samples, 0.03%)</title><rect x="97.5838%" y="453" width="0.0263%" height="15" fill="rgb(213,22,45)" fg:x="114943" fg:w="31"/><text x="97.8338%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_swap (31 samples, 0.03%)</title><rect x="97.5838%" y="437" width="0.0263%" height="15" fill="rgb(237,81,54)" fg:x="114943" fg:w="31"/><text x="97.8338%" y="447.50"></text></g><g><title>core::task::wake::Waker::will_wake (17 samples, 0.01%)</title><rect x="97.6110%" y="533" width="0.0144%" height="15" fill="rgb(248,177,18)" fg:x="114975" fg:w="17"/><text x="97.8610%" y="543.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (17 samples, 0.01%)</title><rect x="97.6110%" y="517" width="0.0144%" height="15" fill="rgb(254,31,16)" fg:x="114975" fg:w="17"/><text x="97.8610%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (14 samples, 0.01%)</title><rect x="97.6135%" y="501" width="0.0119%" height="15" fill="rgb(235,20,31)" fg:x="114978" fg:w="14"/><text x="97.8635%" y="511.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (14 samples, 0.01%)</title><rect x="97.6135%" y="485" width="0.0119%" height="15" fill="rgb(240,56,43)" fg:x="114978" fg:w="14"/><text x="97.8635%" y="495.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (190 samples, 0.16%)</title><rect x="97.5218%" y="549" width="0.1613%" height="15" fill="rgb(237,197,51)" fg:x="114870" fg:w="190"/><text x="97.7718%" y="559.50"></text></g><g><title>event_listener::Inner::lock (68 samples, 0.06%)</title><rect x="97.6254%" y="533" width="0.0577%" height="15" fill="rgb(241,162,44)" fg:x="114992" fg:w="68"/><text x="97.8754%" y="543.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (68 samples, 0.06%)</title><rect x="97.6254%" y="517" width="0.0577%" height="15" fill="rgb(224,23,20)" fg:x="114992" fg:w="68"/><text x="97.8754%" y="527.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (63 samples, 0.05%)</title><rect x="97.6297%" y="501" width="0.0535%" height="15" fill="rgb(250,109,34)" fg:x="114997" fg:w="63"/><text x="97.8797%" y="511.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (63 samples, 0.05%)</title><rect x="97.6297%" y="485" width="0.0535%" height="15" fill="rgb(214,175,50)" fg:x="114997" fg:w="63"/><text x="97.8797%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (63 samples, 0.05%)</title><rect x="97.6297%" y="469" width="0.0535%" height="15" fill="rgb(213,182,5)" fg:x="114997" fg:w="63"/><text x="97.8797%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (63 samples, 0.05%)</title><rect x="97.6297%" y="453" width="0.0535%" height="15" fill="rgb(209,199,19)" fg:x="114997" fg:w="63"/><text x="97.8797%" y="463.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (89 samples, 0.08%)</title><rect x="97.6831%" y="549" width="0.0756%" height="15" fill="rgb(236,224,42)" fg:x="115060" fg:w="89"/><text x="97.9331%" y="559.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (89 samples, 0.08%)</title><rect x="97.6831%" y="533" width="0.0756%" height="15" fill="rgb(246,226,29)" fg:x="115060" fg:w="89"/><text x="97.9331%" y="543.50"></text></g><g><title>concurrent_queue::single::Single&lt;T&gt;::pop (62 samples, 0.05%)</title><rect x="97.7061%" y="517" width="0.0526%" height="15" fill="rgb(227,223,11)" fg:x="115087" fg:w="62"/><text x="97.9561%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (57 samples, 0.05%)</title><rect x="97.7103%" y="501" width="0.0484%" height="15" fill="rgb(219,7,51)" fg:x="115092" fg:w="57"/><text x="97.9603%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (57 samples, 0.05%)</title><rect x="97.7103%" y="485" width="0.0484%" height="15" fill="rgb(245,167,10)" fg:x="115092" fg:w="57"/><text x="97.9603%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (57 samples, 0.05%)</title><rect x="97.7103%" y="469" width="0.0484%" height="15" fill="rgb(237,224,16)" fg:x="115092" fg:w="57"/><text x="97.9603%" y="479.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (837 samples, 0.71%)</title><rect x="97.0490%" y="613" width="0.7106%" height="15" fill="rgb(226,132,13)" fg:x="114313" fg:w="837"/><text x="97.2990%" y="623.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (835 samples, 0.71%)</title><rect x="97.0507%" y="597" width="0.7089%" height="15" fill="rgb(214,140,3)" fg:x="114315" fg:w="835"/><text x="97.3007%" y="607.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}} (308 samples, 0.26%)</title><rect x="97.4981%" y="581" width="0.2615%" height="15" fill="rgb(221,177,4)" fg:x="114842" fg:w="308"/><text x="97.7481%" y="591.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (292 samples, 0.25%)</title><rect x="97.5117%" y="565" width="0.2479%" height="15" fill="rgb(238,139,3)" fg:x="114858" fg:w="292"/><text x="97.7617%" y="575.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (10,243 samples, 8.70%)</title><rect x="89.0643%" y="693" width="8.6961%" height="15" fill="rgb(216,17,39)" fg:x="104908" fg:w="10243"/><text x="89.3143%" y="703.50">&lt;futures_lit..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,209 samples, 8.67%)</title><rect x="89.0932%" y="677" width="8.6672%" height="15" fill="rgb(238,120,9)" fg:x="104942" fg:w="10209"/><text x="89.3432%" y="687.50">&lt;core::futur..</text></g><g><title>async_executor::LocalExecutor::run::{{closure}} (871 samples, 0.74%)</title><rect x="97.0209%" y="661" width="0.7395%" height="15" fill="rgb(244,92,53)" fg:x="114280" fg:w="871"/><text x="97.2709%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (838 samples, 0.71%)</title><rect x="97.0490%" y="645" width="0.7114%" height="15" fill="rgb(224,148,33)" fg:x="114313" fg:w="838"/><text x="97.2990%" y="655.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (838 samples, 0.71%)</title><rect x="97.0490%" y="629" width="0.7114%" height="15" fill="rgb(243,6,36)" fg:x="114313" fg:w="838"/><text x="97.2990%" y="639.50"></text></g><g><title>async_io::reactor::Reactor::get (14 samples, 0.01%)</title><rect x="97.7604%" y="693" width="0.0119%" height="15" fill="rgb(230,102,11)" fg:x="115151" fg:w="14"/><text x="98.0104%" y="703.50"></text></g><g><title>&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (14 samples, 0.01%)</title><rect x="97.7604%" y="677" width="0.0119%" height="15" fill="rgb(234,148,36)" fg:x="115151" fg:w="14"/><text x="98.0104%" y="687.50"></text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (14 samples, 0.01%)</title><rect x="97.7604%" y="661" width="0.0119%" height="15" fill="rgb(251,153,25)" fg:x="115151" fg:w="14"/><text x="98.0104%" y="671.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (14 samples, 0.01%)</title><rect x="97.7604%" y="645" width="0.0119%" height="15" fill="rgb(215,129,8)" fg:x="115151" fg:w="14"/><text x="98.0104%" y="655.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (14 samples, 0.01%)</title><rect x="97.7604%" y="629" width="0.0119%" height="15" fill="rgb(224,128,35)" fg:x="115151" fg:w="14"/><text x="98.0104%" y="639.50"></text></g><g><title>async_io::reactor::Reactor::try_lock (72 samples, 0.06%)</title><rect x="97.7723%" y="693" width="0.0611%" height="15" fill="rgb(237,56,52)" fg:x="115165" fg:w="72"/><text x="98.0223%" y="703.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (72 samples, 0.06%)</title><rect x="97.7723%" y="677" width="0.0611%" height="15" fill="rgb(234,213,19)" fg:x="115165" fg:w="72"/><text x="98.0223%" y="687.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (65 samples, 0.06%)</title><rect x="97.7782%" y="661" width="0.0552%" height="15" fill="rgb(252,82,23)" fg:x="115172" fg:w="65"/><text x="98.0282%" y="671.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::try_lock (65 samples, 0.06%)</title><rect x="97.7782%" y="645" width="0.0552%" height="15" fill="rgb(254,201,21)" fg:x="115172" fg:w="65"/><text x="98.0282%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (65 samples, 0.06%)</title><rect x="97.7782%" y="629" width="0.0552%" height="15" fill="rgb(250,186,11)" fg:x="115172" fg:w="65"/><text x="98.0282%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (65 samples, 0.06%)</title><rect x="97.7782%" y="613" width="0.0552%" height="15" fill="rgb(211,174,5)" fg:x="115172" fg:w="65"/><text x="98.0282%" y="623.50"></text></g><g><title>sn_rust_dealloc (33 samples, 0.03%)</title><rect x="97.8691%" y="517" width="0.0280%" height="15" fill="rgb(214,121,10)" fg:x="115279" fg:w="33"/><text x="98.1191%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (37 samples, 0.03%)</title><rect x="97.8691%" y="581" width="0.0314%" height="15" fill="rgb(241,66,2)" fg:x="115279" fg:w="37"/><text x="98.1191%" y="591.50"></text></g><g><title>alloc::alloc::dealloc (37 samples, 0.03%)</title><rect x="97.8691%" y="565" width="0.0314%" height="15" fill="rgb(220,167,19)" fg:x="115279" fg:w="37"/><text x="98.1191%" y="575.50"></text></g><g><title>__rg_dealloc (37 samples, 0.03%)</title><rect x="97.8691%" y="549" width="0.0314%" height="15" fill="rgb(231,54,50)" fg:x="115279" fg:w="37"/><text x="98.1191%" y="559.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (37 samples, 0.03%)</title><rect x="97.8691%" y="533" width="0.0314%" height="15" fill="rgb(239,217,53)" fg:x="115279" fg:w="37"/><text x="98.1191%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (42 samples, 0.04%)</title><rect x="97.8657%" y="661" width="0.0357%" height="15" fill="rgb(248,8,0)" fg:x="115275" fg:w="42"/><text x="98.1157%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V&gt;::dying_next (39 samples, 0.03%)</title><rect x="97.8682%" y="645" width="0.0331%" height="15" fill="rgb(229,118,37)" fg:x="115278" fg:w="39"/><text x="98.1182%" y="655.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (38 samples, 0.03%)</title><rect x="97.8691%" y="629" width="0.0323%" height="15" fill="rgb(253,223,43)" fg:x="115279" fg:w="38"/><text x="98.1191%" y="639.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (38 samples, 0.03%)</title><rect x="97.8691%" y="613" width="0.0323%" height="15" fill="rgb(211,77,36)" fg:x="115279" fg:w="38"/><text x="98.1191%" y="623.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (38 samples, 0.03%)</title><rect x="97.8691%" y="597" width="0.0323%" height="15" fill="rgb(219,3,53)" fg:x="115279" fg:w="38"/><text x="98.1191%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::Edge&gt;::move_suffix (19 samples, 0.02%)</title><rect x="97.9158%" y="629" width="0.0161%" height="15" fill="rgb(244,45,42)" fg:x="115334" fg:w="19"/><text x="98.1658%" y="639.50"></text></g><g><title>alloc::collections::btree::node::move_to_slice (17 samples, 0.01%)</title><rect x="97.9175%" y="613" width="0.0144%" height="15" fill="rgb(225,95,27)" fg:x="115336" fg:w="17"/><text x="98.1675%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (17 samples, 0.01%)</title><rect x="97.9175%" y="597" width="0.0144%" height="15" fill="rgb(207,74,8)" fg:x="115336" fg:w="17"/><text x="98.1675%" y="607.50"></text></g><g><title>[libc-2.31.so] (17 samples, 0.01%)</title><rect x="97.9175%" y="581" width="0.0144%" height="15" fill="rgb(243,63,36)" fg:x="115336" fg:w="17"/><text x="98.1675%" y="591.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (14 samples, 0.01%)</title><rect x="97.9370%" y="597" width="0.0119%" height="15" fill="rgb(211,180,12)" fg:x="115359" fg:w="14"/><text x="98.1870%" y="607.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (21 samples, 0.02%)</title><rect x="97.9327%" y="629" width="0.0178%" height="15" fill="rgb(254,166,49)" fg:x="115354" fg:w="21"/><text x="98.1827%" y="639.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (21 samples, 0.02%)</title><rect x="97.9327%" y="613" width="0.0178%" height="15" fill="rgb(205,19,0)" fg:x="115354" fg:w="21"/><text x="98.1827%" y="623.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (19 samples, 0.02%)</title><rect x="97.9845%" y="421" width="0.0161%" height="15" fill="rgb(224,172,32)" fg:x="115415" fg:w="19"/><text x="98.2345%" y="431.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (62 samples, 0.05%)</title><rect x="97.9506%" y="613" width="0.0526%" height="15" fill="rgb(254,136,30)" fg:x="115375" fg:w="62"/><text x="98.2006%" y="623.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (62 samples, 0.05%)</title><rect x="97.9506%" y="597" width="0.0526%" height="15" fill="rgb(246,19,35)" fg:x="115375" fg:w="62"/><text x="98.2006%" y="607.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (62 samples, 0.05%)</title><rect x="97.9506%" y="581" width="0.0526%" height="15" fill="rgb(219,24,36)" fg:x="115375" fg:w="62"/><text x="98.2006%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new_uninit (62 samples, 0.05%)</title><rect x="97.9506%" y="565" width="0.0526%" height="15" fill="rgb(251,55,1)" fg:x="115375" fg:w="62"/><text x="98.2006%" y="575.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (62 samples, 0.05%)</title><rect x="97.9506%" y="549" width="0.0526%" height="15" fill="rgb(218,117,39)" fg:x="115375" fg:w="62"/><text x="98.2006%" y="559.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (62 samples, 0.05%)</title><rect x="97.9506%" y="533" width="0.0526%" height="15" fill="rgb(248,169,11)" fg:x="115375" fg:w="62"/><text x="98.2006%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (62 samples, 0.05%)</title><rect x="97.9506%" y="517" width="0.0526%" height="15" fill="rgb(244,40,44)" fg:x="115375" fg:w="62"/><text x="98.2006%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (62 samples, 0.05%)</title><rect x="97.9506%" y="501" width="0.0526%" height="15" fill="rgb(234,62,37)" fg:x="115375" fg:w="62"/><text x="98.2006%" y="511.50"></text></g><g><title>alloc::alloc::alloc (62 samples, 0.05%)</title><rect x="97.9506%" y="485" width="0.0526%" height="15" fill="rgb(207,117,42)" fg:x="115375" fg:w="62"/><text x="98.2006%" y="495.50"></text></g><g><title>__rg_alloc (62 samples, 0.05%)</title><rect x="97.9506%" y="469" width="0.0526%" height="15" fill="rgb(213,43,2)" fg:x="115375" fg:w="62"/><text x="98.2006%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (62 samples, 0.05%)</title><rect x="97.9506%" y="453" width="0.0526%" height="15" fill="rgb(244,202,51)" fg:x="115375" fg:w="62"/><text x="98.2006%" y="463.50"></text></g><g><title>sn_rust_alloc (62 samples, 0.05%)</title><rect x="97.9506%" y="437" width="0.0526%" height="15" fill="rgb(253,174,46)" fg:x="115375" fg:w="62"/><text x="98.2006%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::split_off (112 samples, 0.10%)</title><rect x="97.9098%" y="661" width="0.0951%" height="15" fill="rgb(251,23,1)" fg:x="115327" fg:w="112"/><text x="98.1598%" y="671.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::split_off (109 samples, 0.09%)</title><rect x="97.9124%" y="645" width="0.0925%" height="15" fill="rgb(253,26,1)" fg:x="115330" fg:w="109"/><text x="98.1624%" y="655.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::new_pillar (64 samples, 0.05%)</title><rect x="97.9506%" y="629" width="0.0543%" height="15" fill="rgb(216,89,31)" fg:x="115375" fg:w="64"/><text x="98.2006%" y="639.50"></text></g><g><title>concurrent_queue::full_fence (17 samples, 0.01%)</title><rect x="98.0227%" y="613" width="0.0144%" height="15" fill="rgb(209,109,5)" fg:x="115460" fg:w="17"/><text x="98.2727%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (17 samples, 0.01%)</title><rect x="98.0227%" y="597" width="0.0144%" height="15" fill="rgb(229,63,13)" fg:x="115460" fg:w="17"/><text x="98.2727%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (17 samples, 0.01%)</title><rect x="98.0227%" y="581" width="0.0144%" height="15" fill="rgb(238,137,54)" fg:x="115460" fg:w="17"/><text x="98.2727%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (17 samples, 0.01%)</title><rect x="98.0227%" y="565" width="0.0144%" height="15" fill="rgb(228,1,9)" fg:x="115460" fg:w="17"/><text x="98.2727%" y="575.50"></text></g><g><title>async_io::reactor::Reactor::process_timer_ops (53 samples, 0.04%)</title><rect x="98.0049%" y="661" width="0.0450%" height="15" fill="rgb(249,120,48)" fg:x="115439" fg:w="53"/><text x="98.2549%" y="671.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (38 samples, 0.03%)</title><rect x="98.0176%" y="645" width="0.0323%" height="15" fill="rgb(209,72,36)" fg:x="115454" fg:w="38"/><text x="98.2676%" y="655.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (38 samples, 0.03%)</title><rect x="98.0176%" y="629" width="0.0323%" height="15" fill="rgb(247,98,49)" fg:x="115454" fg:w="38"/><text x="98.2676%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (15 samples, 0.01%)</title><rect x="98.0372%" y="613" width="0.0127%" height="15" fill="rgb(233,75,36)" fg:x="115477" fg:w="15"/><text x="98.2872%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_load (15 samples, 0.01%)</title><rect x="98.0372%" y="597" width="0.0127%" height="15" fill="rgb(225,14,24)" fg:x="115477" fg:w="15"/><text x="98.2872%" y="607.50"></text></g><g><title>core::mem::drop (52 samples, 0.04%)</title><rect x="98.0499%" y="661" width="0.0441%" height="15" fill="rgb(237,193,20)" fg:x="115492" fg:w="52"/><text x="98.2999%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::collections::btree::map::BTreeMap&lt;(std::time::Instant,usize),core::task::wake::Waker&gt;&gt;&gt; (52 samples, 0.04%)</title><rect x="98.0499%" y="645" width="0.0441%" height="15" fill="rgb(239,122,19)" fg:x="115492" fg:w="52"/><text x="98.2999%" y="655.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (52 samples, 0.04%)</title><rect x="98.0499%" y="629" width="0.0441%" height="15" fill="rgb(231,220,10)" fg:x="115492" fg:w="52"/><text x="98.2999%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (52 samples, 0.04%)</title><rect x="98.0499%" y="613" width="0.0441%" height="15" fill="rgb(220,66,15)" fg:x="115492" fg:w="52"/><text x="98.2999%" y="623.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (52 samples, 0.04%)</title><rect x="98.0499%" y="597" width="0.0441%" height="15" fill="rgb(215,171,52)" fg:x="115492" fg:w="52"/><text x="98.2999%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (52 samples, 0.04%)</title><rect x="98.0499%" y="581" width="0.0441%" height="15" fill="rgb(241,169,50)" fg:x="115492" fg:w="52"/><text x="98.2999%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_swap (52 samples, 0.04%)</title><rect x="98.0499%" y="565" width="0.0441%" height="15" fill="rgb(236,189,0)" fg:x="115492" fg:w="52"/><text x="98.2999%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (15 samples, 0.01%)</title><rect x="98.0940%" y="661" width="0.0127%" height="15" fill="rgb(217,147,20)" fg:x="115544" fg:w="15"/><text x="98.3440%" y="671.50"></text></g><g><title>async_io::reactor::Reactor::process_timers::{{closure}} (12 samples, 0.01%)</title><rect x="98.0966%" y="645" width="0.0102%" height="15" fill="rgb(206,188,39)" fg:x="115547" fg:w="12"/><text x="98.3466%" y="655.50"></text></g><g><title>std::time::Instant::duration_since (12 samples, 0.01%)</title><rect x="98.0966%" y="629" width="0.0102%" height="15" fill="rgb(227,118,25)" fg:x="115547" fg:w="12"/><text x="98.3466%" y="639.50"></text></g><g><title>std::time::Instant::checked_duration_since (12 samples, 0.01%)</title><rect x="98.0966%" y="613" width="0.0102%" height="15" fill="rgb(248,171,40)" fg:x="115547" fg:w="12"/><text x="98.3466%" y="623.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (12 samples, 0.01%)</title><rect x="98.0966%" y="597" width="0.0102%" height="15" fill="rgb(251,90,54)" fg:x="115547" fg:w="12"/><text x="98.3466%" y="607.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (44 samples, 0.04%)</title><rect x="98.1068%" y="661" width="0.0374%" height="15" fill="rgb(234,11,46)" fg:x="115559" fg:w="44"/><text x="98.3568%" y="671.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (44 samples, 0.04%)</title><rect x="98.1068%" y="645" width="0.0374%" height="15" fill="rgb(229,134,13)" fg:x="115559" fg:w="44"/><text x="98.3568%" y="655.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (44 samples, 0.04%)</title><rect x="98.1068%" y="629" width="0.0374%" height="15" fill="rgb(223,129,3)" fg:x="115559" fg:w="44"/><text x="98.3568%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (44 samples, 0.04%)</title><rect x="98.1068%" y="613" width="0.0374%" height="15" fill="rgb(221,124,13)" fg:x="115559" fg:w="44"/><text x="98.3568%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (44 samples, 0.04%)</title><rect x="98.1068%" y="597" width="0.0374%" height="15" fill="rgb(234,3,18)" fg:x="115559" fg:w="44"/><text x="98.3568%" y="607.50"></text></g><g><title>async_io::reactor::Reactor::process_timers (395 samples, 0.34%)</title><rect x="97.8563%" y="677" width="0.3353%" height="15" fill="rgb(249,199,20)" fg:x="115264" fg:w="395"/><text x="98.1063%" y="687.50"></text></g><g><title>std::time::Instant::now (56 samples, 0.05%)</title><rect x="98.1441%" y="661" width="0.0475%" height="15" fill="rgb(224,134,6)" fg:x="115603" fg:w="56"/><text x="98.3941%" y="671.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (56 samples, 0.05%)</title><rect x="98.1441%" y="645" width="0.0475%" height="15" fill="rgb(254,83,26)" fg:x="115603" fg:w="56"/><text x="98.3941%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (56 samples, 0.05%)</title><rect x="98.1441%" y="629" width="0.0475%" height="15" fill="rgb(217,88,9)" fg:x="115603" fg:w="56"/><text x="98.3941%" y="639.50"></text></g><g><title>__clock_gettime (56 samples, 0.05%)</title><rect x="98.1441%" y="613" width="0.0475%" height="15" fill="rgb(225,73,2)" fg:x="115603" fg:w="56"/><text x="98.3941%" y="623.50"></text></g><g><title>__vdso_clock_gettime (50 samples, 0.04%)</title><rect x="98.1492%" y="597" width="0.0424%" height="15" fill="rgb(226,44,39)" fg:x="115609" fg:w="50"/><text x="98.3992%" y="607.50"></text></g><g><title>[[vdso]] (43 samples, 0.04%)</title><rect x="98.1552%" y="581" width="0.0365%" height="15" fill="rgb(228,53,17)" fg:x="115616" fg:w="43"/><text x="98.4052%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (17 samples, 0.01%)</title><rect x="98.1951%" y="677" width="0.0144%" height="15" fill="rgb(212,27,27)" fg:x="115663" fg:w="17"/><text x="98.4451%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_add (17 samples, 0.01%)</title><rect x="98.1951%" y="661" width="0.0144%" height="15" fill="rgb(241,50,6)" fg:x="115663" fg:w="17"/><text x="98.4451%" y="671.50"></text></g><g><title>__libc_read (84 samples, 0.07%)</title><rect x="98.3386%" y="645" width="0.0713%" height="15" fill="rgb(225,28,51)" fg:x="115832" fg:w="84"/><text x="98.5886%" y="655.50"></text></g><g><title>__pthread_enable_asynccancel (48 samples, 0.04%)</title><rect x="98.3691%" y="629" width="0.0408%" height="15" fill="rgb(215,33,16)" fg:x="115868" fg:w="48"/><text x="98.6191%" y="639.50"></text></g><g><title>epoll_wait (158 samples, 0.13%)</title><rect x="98.4099%" y="645" width="0.1341%" height="15" fill="rgb(243,40,39)" fg:x="115916" fg:w="158"/><text x="98.6599%" y="655.50"></text></g><g><title>[libc-2.31.so] (46 samples, 0.04%)</title><rect x="98.5050%" y="629" width="0.0391%" height="15" fill="rgb(225,11,42)" fg:x="116028" fg:w="46"/><text x="98.7550%" y="639.50"></text></g><g><title>polling::epoll::Poller::modify (63 samples, 0.05%)</title><rect x="98.5474%" y="645" width="0.0535%" height="15" fill="rgb(241,220,38)" fg:x="116078" fg:w="63"/><text x="98.7974%" y="655.50"></text></g><g><title>polling::epoll::Poller::ctl (56 samples, 0.05%)</title><rect x="98.5533%" y="629" width="0.0475%" height="15" fill="rgb(244,52,35)" fg:x="116085" fg:w="56"/><text x="98.8033%" y="639.50"></text></g><g><title>epoll_ctl (50 samples, 0.04%)</title><rect x="98.5584%" y="613" width="0.0424%" height="15" fill="rgb(246,42,46)" fg:x="116091" fg:w="50"/><text x="98.8084%" y="623.50"></text></g><g><title>polling::epoll::Poller::wait (434 samples, 0.37%)</title><rect x="98.2528%" y="661" width="0.3685%" height="15" fill="rgb(205,184,13)" fg:x="115731" fg:w="434"/><text x="98.5028%" y="671.50"></text></g><g><title>syscall (22 samples, 0.02%)</title><rect x="98.6026%" y="645" width="0.0187%" height="15" fill="rgb(209,48,36)" fg:x="116143" fg:w="22"/><text x="98.8526%" y="655.50"></text></g><g><title>async_io::reactor::ReactorLock::react (937 samples, 0.80%)</title><rect x="97.8334%" y="693" width="0.7955%" height="15" fill="rgb(244,34,51)" fg:x="115237" fg:w="937"/><text x="98.0834%" y="703.50"></text></g><g><title>polling::Poller::wait (493 samples, 0.42%)</title><rect x="98.2104%" y="677" width="0.4185%" height="15" fill="rgb(221,107,33)" fg:x="115681" fg:w="493"/><text x="98.4604%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (19 samples, 0.02%)</title><rect x="98.6289%" y="645" width="0.0161%" height="15" fill="rgb(224,203,12)" fg:x="116174" fg:w="19"/><text x="98.8789%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_store (19 samples, 0.02%)</title><rect x="98.6289%" y="629" width="0.0161%" height="15" fill="rgb(230,215,18)" fg:x="116174" fg:w="19"/><text x="98.8789%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_io::driver::CallOnDrop&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (22 samples, 0.02%)</title><rect x="98.6289%" y="693" width="0.0187%" height="15" fill="rgb(206,185,35)" fg:x="116174" fg:w="22"/><text x="98.8789%" y="703.50"></text></g><g><title>&lt;async_io::driver::CallOnDrop&lt;F&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.02%)</title><rect x="98.6289%" y="677" width="0.0187%" height="15" fill="rgb(228,140,34)" fg:x="116174" fg:w="22"/><text x="98.8789%" y="687.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (22 samples, 0.02%)</title><rect x="98.6289%" y="661" width="0.0187%" height="15" fill="rgb(208,93,13)" fg:x="116174" fg:w="22"/><text x="98.8789%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (14 samples, 0.01%)</title><rect x="98.6484%" y="693" width="0.0119%" height="15" fill="rgb(221,193,39)" fg:x="116197" fg:w="14"/><text x="98.8984%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_store (14 samples, 0.01%)</title><rect x="98.6484%" y="677" width="0.0119%" height="15" fill="rgb(241,132,34)" fg:x="116197" fg:w="14"/><text x="98.8984%" y="687.50"></text></g><g><title>log::max_level (12 samples, 0.01%)</title><rect x="98.6603%" y="693" width="0.0102%" height="15" fill="rgb(221,141,10)" fg:x="116211" fg:w="12"/><text x="98.9103%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (12 samples, 0.01%)</title><rect x="98.6603%" y="677" width="0.0102%" height="15" fill="rgb(226,90,31)" fg:x="116211" fg:w="12"/><text x="98.9103%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_load (12 samples, 0.01%)</title><rect x="98.6603%" y="661" width="0.0102%" height="15" fill="rgb(243,75,5)" fg:x="116211" fg:w="12"/><text x="98.9103%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;()&gt;&gt; (34 samples, 0.03%)</title><rect x="98.6815%" y="661" width="0.0289%" height="15" fill="rgb(227,156,21)" fg:x="116236" fg:w="34"/><text x="98.9315%" y="671.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 0.03%)</title><rect x="98.6815%" y="645" width="0.0289%" height="15" fill="rgb(250,195,8)" fg:x="116236" fg:w="34"/><text x="98.9315%" y="655.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (30 samples, 0.03%)</title><rect x="98.6849%" y="629" width="0.0255%" height="15" fill="rgb(220,134,5)" fg:x="116240" fg:w="30"/><text x="98.9349%" y="639.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (30 samples, 0.03%)</title><rect x="98.6849%" y="613" width="0.0255%" height="15" fill="rgb(246,106,34)" fg:x="116240" fg:w="30"/><text x="98.9349%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (29 samples, 0.02%)</title><rect x="98.6858%" y="597" width="0.0246%" height="15" fill="rgb(205,1,4)" fg:x="116241" fg:w="29"/><text x="98.9358%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_swap (29 samples, 0.02%)</title><rect x="98.6858%" y="581" width="0.0246%" height="15" fill="rgb(224,151,29)" fg:x="116241" fg:w="29"/><text x="98.9358%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (81 samples, 0.07%)</title><rect x="98.7104%" y="661" width="0.0688%" height="15" fill="rgb(251,196,0)" fg:x="116270" fg:w="81"/><text x="98.9604%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (81 samples, 0.07%)</title><rect x="98.7104%" y="645" width="0.0688%" height="15" fill="rgb(212,127,0)" fg:x="116270" fg:w="81"/><text x="98.9604%" y="655.50"></text></g><g><title>core::bool::&lt;impl bool&gt;::then (66 samples, 0.06%)</title><rect x="98.7894%" y="581" width="0.0560%" height="15" fill="rgb(236,71,53)" fg:x="116363" fg:w="66"/><text x="99.0394%" y="591.50"></text></g><g><title>std::sys::unix::futex::futex_wait (280 samples, 0.24%)</title><rect x="98.7868%" y="597" width="0.2377%" height="15" fill="rgb(227,99,0)" fg:x="116360" fg:w="280"/><text x="99.0368%" y="607.50"></text></g><g><title>syscall (205 samples, 0.17%)</title><rect x="98.8505%" y="581" width="0.1740%" height="15" fill="rgb(239,89,21)" fg:x="116435" fg:w="205"/><text x="99.1005%" y="591.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (229 samples, 0.19%)</title><rect x="99.0245%" y="597" width="0.1944%" height="15" fill="rgb(243,122,19)" fg:x="116640" fg:w="229"/><text x="99.2745%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (229 samples, 0.19%)</title><rect x="99.0245%" y="581" width="0.1944%" height="15" fill="rgb(229,192,45)" fg:x="116640" fg:w="229"/><text x="99.2745%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (229 samples, 0.19%)</title><rect x="99.0245%" y="565" width="0.1944%" height="15" fill="rgb(235,165,35)" fg:x="116640" fg:w="229"/><text x="99.2745%" y="575.50"></text></g><g><title>std::sync::condvar::Condvar::wait (541 samples, 0.46%)</title><rect x="98.7792%" y="661" width="0.4593%" height="15" fill="rgb(253,202,0)" fg:x="116351" fg:w="541"/><text x="99.0292%" y="671.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (537 samples, 0.46%)</title><rect x="98.7826%" y="645" width="0.4559%" height="15" fill="rgb(235,51,20)" fg:x="116355" fg:w="537"/><text x="99.0326%" y="655.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait (537 samples, 0.46%)</title><rect x="98.7826%" y="629" width="0.4559%" height="15" fill="rgb(218,95,46)" fg:x="116355" fg:w="537"/><text x="99.0326%" y="639.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait_optional_timeout (537 samples, 0.46%)</title><rect x="98.7826%" y="613" width="0.4559%" height="15" fill="rgb(212,81,10)" fg:x="116355" fg:w="537"/><text x="99.0326%" y="623.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (23 samples, 0.02%)</title><rect x="99.2189%" y="597" width="0.0195%" height="15" fill="rgb(240,59,0)" fg:x="116869" fg:w="23"/><text x="99.4689%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (23 samples, 0.02%)</title><rect x="99.2189%" y="581" width="0.0195%" height="15" fill="rgb(212,191,42)" fg:x="116869" fg:w="23"/><text x="99.4689%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_swap (23 samples, 0.02%)</title><rect x="99.2189%" y="565" width="0.0195%" height="15" fill="rgb(233,140,3)" fg:x="116869" fg:w="23"/><text x="99.4689%" y="575.50"></text></g><g><title>parking::Parker::park (694 samples, 0.59%)</title><rect x="98.6705%" y="693" width="0.5892%" height="15" fill="rgb(215,69,23)" fg:x="116223" fg:w="694"/><text x="98.9205%" y="703.50"></text></g><g><title>parking::Inner::park (691 samples, 0.59%)</title><rect x="98.6731%" y="677" width="0.5866%" height="15" fill="rgb(240,202,20)" fg:x="116226" fg:w="691"/><text x="98.9231%" y="687.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (25 samples, 0.02%)</title><rect x="99.2385%" y="661" width="0.0212%" height="15" fill="rgb(209,146,50)" fg:x="116892" fg:w="25"/><text x="99.4885%" y="671.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (19 samples, 0.02%)</title><rect x="99.2436%" y="645" width="0.0161%" height="15" fill="rgb(253,102,54)" fg:x="116898" fg:w="19"/><text x="99.4936%" y="655.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (19 samples, 0.02%)</title><rect x="99.2436%" y="629" width="0.0161%" height="15" fill="rgb(250,173,47)" fg:x="116898" fg:w="19"/><text x="99.4936%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (19 samples, 0.02%)</title><rect x="99.2436%" y="613" width="0.0161%" height="15" fill="rgb(232,142,7)" fg:x="116898" fg:w="19"/><text x="99.4936%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (19 samples, 0.02%)</title><rect x="99.2436%" y="597" width="0.0161%" height="15" fill="rgb(230,157,47)" fg:x="116898" fg:w="19"/><text x="99.4936%" y="607.50"></text></g><g><title>parking::Parker::park_timeout (242 samples, 0.21%)</title><rect x="99.2597%" y="693" width="0.2055%" height="15" fill="rgb(214,177,35)" fg:x="116917" fg:w="242"/><text x="99.5097%" y="703.50"></text></g><g><title>parking::Inner::park (202 samples, 0.17%)</title><rect x="99.2937%" y="677" width="0.1715%" height="15" fill="rgb(234,119,46)" fg:x="116957" fg:w="202"/><text x="99.5437%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (191 samples, 0.16%)</title><rect x="99.3030%" y="661" width="0.1622%" height="15" fill="rgb(241,180,50)" fg:x="116968" fg:w="191"/><text x="99.5530%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (191 samples, 0.16%)</title><rect x="99.3030%" y="645" width="0.1622%" height="15" fill="rgb(221,54,25)" fg:x="116968" fg:w="191"/><text x="99.5530%" y="655.50"></text></g><g><title>std::panic::catch_unwind (12,365 samples, 10.50%)</title><rect x="88.9981%" y="981" width="10.4976%" height="15" fill="rgb(209,157,44)" fg:x="104830" fg:w="12365"/><text x="89.2481%" y="991.50">std::panic::cat..</text></g><g><title>std::panicking::try (12,365 samples, 10.50%)</title><rect x="88.9981%" y="965" width="10.4976%" height="15" fill="rgb(246,115,41)" fg:x="104830" fg:w="12365"/><text x="89.2481%" y="975.50">std::panicking:..</text></g><g><title>std::panicking::try::do_call (12,365 samples, 10.50%)</title><rect x="88.9981%" y="949" width="10.4976%" height="15" fill="rgb(229,86,1)" fg:x="104830" fg:w="12365"/><text x="89.2481%" y="959.50">std::panicking:..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (12,365 samples, 10.50%)</title><rect x="88.9981%" y="933" width="10.4976%" height="15" fill="rgb(240,108,53)" fg:x="104830" fg:w="12365"/><text x="89.2481%" y="943.50">&lt;core::panic::u..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (12,365 samples, 10.50%)</title><rect x="88.9981%" y="917" width="10.4976%" height="15" fill="rgb(227,134,2)" fg:x="104830" fg:w="12365"/><text x="89.2481%" y="927.50">std::thread::Bu..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (12,365 samples, 10.50%)</title><rect x="88.9981%" y="901" width="10.4976%" height="15" fill="rgb(213,129,25)" fg:x="104830" fg:w="12365"/><text x="89.2481%" y="911.50">std::sys_common..</text></g><g><title>core::ops::function::FnOnce::call_once (12,365 samples, 10.50%)</title><rect x="88.9981%" y="885" width="10.4976%" height="15" fill="rgb(226,35,21)" fg:x="104830" fg:w="12365"/><text x="89.2481%" y="895.50">core::ops::func..</text></g><g><title>async_global_executor::threading::thread_main_loop (12,365 samples, 10.50%)</title><rect x="88.9981%" y="869" width="10.4976%" height="15" fill="rgb(208,129,26)" fg:x="104830" fg:w="12365"/><text x="89.2481%" y="879.50">async_global_ex..</text></g><g><title>std::panic::catch_unwind (12,346 samples, 10.48%)</title><rect x="89.0143%" y="853" width="10.4815%" height="15" fill="rgb(224,83,6)" fg:x="104849" fg:w="12346"/><text x="89.2643%" y="863.50">std::panic::cat..</text></g><g><title>std::panicking::try (12,346 samples, 10.48%)</title><rect x="89.0143%" y="837" width="10.4815%" height="15" fill="rgb(227,52,39)" fg:x="104849" fg:w="12346"/><text x="89.2643%" y="847.50">std::panicking:..</text></g><g><title>std::panicking::try::do_call (12,346 samples, 10.48%)</title><rect x="89.0143%" y="821" width="10.4815%" height="15" fill="rgb(241,30,17)" fg:x="104849" fg:w="12346"/><text x="89.2643%" y="831.50">std::panicking:..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (12,346 samples, 10.48%)</title><rect x="89.0143%" y="805" width="10.4815%" height="15" fill="rgb(246,186,42)" fg:x="104849" fg:w="12346"/><text x="89.2643%" y="815.50">async_global_ex..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (12,346 samples, 10.48%)</title><rect x="89.0143%" y="789" width="10.4815%" height="15" fill="rgb(221,169,15)" fg:x="104849" fg:w="12346"/><text x="89.2643%" y="799.50">std::thread::lo..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (12,346 samples, 10.48%)</title><rect x="89.0143%" y="773" width="10.4815%" height="15" fill="rgb(235,108,21)" fg:x="104849" fg:w="12346"/><text x="89.2643%" y="783.50">std::thread::lo..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (12,346 samples, 10.48%)</title><rect x="89.0143%" y="757" width="10.4815%" height="15" fill="rgb(219,148,30)" fg:x="104849" fg:w="12346"/><text x="89.2643%" y="767.50">async_global_ex..</text></g><g><title>async_global_executor::reactor::block_on (12,346 samples, 10.48%)</title><rect x="89.0143%" y="741" width="10.4815%" height="15" fill="rgb(220,109,5)" fg:x="104849" fg:w="12346"/><text x="89.2643%" y="751.50">async_global_ex..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (12,346 samples, 10.48%)</title><rect x="89.0143%" y="725" width="10.4815%" height="15" fill="rgb(213,203,48)" fg:x="104849" fg:w="12346"/><text x="89.2643%" y="735.50">async_global_ex..</text></g><g><title>async_io::driver::block_on (12,346 samples, 10.48%)</title><rect x="89.0143%" y="709" width="10.4815%" height="15" fill="rgb(244,71,33)" fg:x="104849" fg:w="12346"/><text x="89.2643%" y="719.50">async_io::drive..</text></g><g><title>std::time::Instant::now (31 samples, 0.03%)</title><rect x="99.4694%" y="693" width="0.0263%" height="15" fill="rgb(209,23,2)" fg:x="117164" fg:w="31"/><text x="99.7194%" y="703.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (31 samples, 0.03%)</title><rect x="99.4694%" y="677" width="0.0263%" height="15" fill="rgb(219,97,7)" fg:x="117164" fg:w="31"/><text x="99.7194%" y="687.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (31 samples, 0.03%)</title><rect x="99.4694%" y="661" width="0.0263%" height="15" fill="rgb(216,161,23)" fg:x="117164" fg:w="31"/><text x="99.7194%" y="671.50"></text></g><g><title>__clock_gettime (24 samples, 0.02%)</title><rect x="99.4753%" y="645" width="0.0204%" height="15" fill="rgb(207,45,42)" fg:x="117171" fg:w="24"/><text x="99.7253%" y="655.50"></text></g><g><title>__vdso_clock_gettime (17 samples, 0.01%)</title><rect x="99.4813%" y="629" width="0.0144%" height="15" fill="rgb(241,61,4)" fg:x="117178" fg:w="17"/><text x="99.7313%" y="639.50"></text></g><g><title>[[vdso]] (16 samples, 0.01%)</title><rect x="99.4821%" y="613" width="0.0136%" height="15" fill="rgb(236,170,1)" fg:x="117179" fg:w="16"/><text x="99.7321%" y="623.50"></text></g><g><title>clone (12,380 samples, 10.51%)</title><rect x="88.9896%" y="1093" width="10.5103%" height="15" fill="rgb(239,72,5)" fg:x="104820" fg:w="12380"/><text x="89.2396%" y="1103.50">clone</text></g><g><title>start_thread (12,371 samples, 10.50%)</title><rect x="88.9973%" y="1077" width="10.5027%" height="15" fill="rgb(214,13,50)" fg:x="104829" fg:w="12371"/><text x="89.2473%" y="1087.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (12,370 samples, 10.50%)</title><rect x="88.9981%" y="1061" width="10.5018%" height="15" fill="rgb(224,88,9)" fg:x="104830" fg:w="12370"/><text x="89.2481%" y="1071.50">std::sys::unix:..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (12,370 samples, 10.50%)</title><rect x="88.9981%" y="1045" width="10.5018%" height="15" fill="rgb(238,192,34)" fg:x="104830" fg:w="12370"/><text x="89.2481%" y="1055.50">&lt;alloc::boxed::..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (12,370 samples, 10.50%)</title><rect x="88.9981%" y="1029" width="10.5018%" height="15" fill="rgb(217,203,50)" fg:x="104830" fg:w="12370"/><text x="89.2481%" y="1039.50">&lt;alloc::boxed::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (12,370 samples, 10.50%)</title><rect x="88.9981%" y="1013" width="10.5018%" height="15" fill="rgb(241,123,32)" fg:x="104830" fg:w="12370"/><text x="89.2481%" y="1023.50">core::ops::func..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (12,370 samples, 10.50%)</title><rect x="88.9981%" y="997" width="10.5018%" height="15" fill="rgb(248,151,39)" fg:x="104830" fg:w="12370"/><text x="89.2481%" y="1007.50">std::thread::Bu..</text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (12 samples, 0.01%)</title><rect x="99.5000%" y="1093" width="0.0102%" height="15" fill="rgb(208,89,6)" fg:x="117200" fg:w="12"/><text x="99.7500%" y="1103.50"></text></g><g><title>signal_hook_registry::GLOBAL_DATA (12 samples, 0.01%)</title><rect x="99.5246%" y="1093" width="0.0102%" height="15" fill="rgb(254,43,26)" fg:x="117229" fg:w="12"/><text x="99.7746%" y="1103.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (13 samples, 0.01%)</title><rect x="99.5390%" y="1093" width="0.0110%" height="15" fill="rgb(216,158,13)" fg:x="117246" fg:w="13"/><text x="99.7890%" y="1103.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (13 samples, 0.01%)</title><rect x="99.5500%" y="1093" width="0.0110%" height="15" fill="rgb(212,47,37)" fg:x="117259" fg:w="13"/><text x="99.8000%" y="1103.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (12 samples, 0.01%)</title><rect x="99.5619%" y="1093" width="0.0102%" height="15" fill="rgb(254,16,10)" fg:x="117273" fg:w="12"/><text x="99.8119%" y="1103.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (132 samples, 0.11%)</title><rect x="99.5806%" y="1093" width="0.1121%" height="15" fill="rgb(223,228,16)" fg:x="117295" fg:w="132"/><text x="99.8306%" y="1103.50"></text></g><g><title>alloc::borrow::Cow&lt;B&gt;::into_owned (13 samples, 0.01%)</title><rect x="99.6816%" y="1077" width="0.0110%" height="15" fill="rgb(249,108,50)" fg:x="117414" fg:w="13"/><text x="99.9316%" y="1087.50"></text></g><g><title>async-std/runti (117,397 samples, 99.67%)</title><rect x="0.0357%" y="1109" width="99.6672%" height="15" fill="rgb(208,220,5)" fg:x="42" fg:w="117397"/><text x="0.2857%" y="1119.50">async-std/runti</text></g><g><title>blocking-3 (17 samples, 0.01%)</title><rect x="99.7139%" y="1109" width="0.0144%" height="15" fill="rgb(217,89,48)" fg:x="117452" fg:w="17"/><text x="99.9639%" y="1119.50"></text></g><g><title>clone (17 samples, 0.01%)</title><rect x="99.7139%" y="1093" width="0.0144%" height="15" fill="rgb(212,113,41)" fg:x="117452" fg:w="17"/><text x="99.9639%" y="1103.50"></text></g><g><title>start_thread (13 samples, 0.01%)</title><rect x="99.7173%" y="1077" width="0.0110%" height="15" fill="rgb(231,127,5)" fg:x="117456" fg:w="13"/><text x="99.9673%" y="1087.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (12 samples, 0.01%)</title><rect x="99.7181%" y="1061" width="0.0102%" height="15" fill="rgb(217,141,17)" fg:x="117457" fg:w="12"/><text x="99.9681%" y="1071.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (12 samples, 0.01%)</title><rect x="99.7181%" y="1045" width="0.0102%" height="15" fill="rgb(245,125,54)" fg:x="117457" fg:w="12"/><text x="99.9681%" y="1055.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (12 samples, 0.01%)</title><rect x="99.7181%" y="1029" width="0.0102%" height="15" fill="rgb(248,125,3)" fg:x="117457" fg:w="12"/><text x="99.9681%" y="1039.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (12 samples, 0.01%)</title><rect x="99.7181%" y="1013" width="0.0102%" height="15" fill="rgb(236,119,51)" fg:x="117457" fg:w="12"/><text x="99.9681%" y="1023.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (12 samples, 0.01%)</title><rect x="99.7181%" y="997" width="0.0102%" height="15" fill="rgb(239,99,8)" fg:x="117457" fg:w="12"/><text x="99.9681%" y="1007.50"></text></g><g><title>std::panic::catch_unwind (12 samples, 0.01%)</title><rect x="99.7181%" y="981" width="0.0102%" height="15" fill="rgb(224,228,4)" fg:x="117457" fg:w="12"/><text x="99.9681%" y="991.50"></text></g><g><title>std::panicking::try (12 samples, 0.01%)</title><rect x="99.7181%" y="965" width="0.0102%" height="15" fill="rgb(220,131,45)" fg:x="117457" fg:w="12"/><text x="99.9681%" y="975.50"></text></g><g><title>std::panicking::try::do_call (12 samples, 0.01%)</title><rect x="99.7181%" y="949" width="0.0102%" height="15" fill="rgb(215,62,5)" fg:x="117457" fg:w="12"/><text x="99.9681%" y="959.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (12 samples, 0.01%)</title><rect x="99.7181%" y="933" width="0.0102%" height="15" fill="rgb(253,12,24)" fg:x="117457" fg:w="12"/><text x="99.9681%" y="943.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (12 samples, 0.01%)</title><rect x="99.7181%" y="917" width="0.0102%" height="15" fill="rgb(248,120,50)" fg:x="117457" fg:w="12"/><text x="99.9681%" y="927.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (12 samples, 0.01%)</title><rect x="99.7181%" y="901" width="0.0102%" height="15" fill="rgb(245,194,10)" fg:x="117457" fg:w="12"/><text x="99.9681%" y="911.50"></text></g><g><title>blocking::Executor::grow_pool::{{closure}} (12 samples, 0.01%)</title><rect x="99.7181%" y="885" width="0.0102%" height="15" fill="rgb(241,149,38)" fg:x="117457" fg:w="12"/><text x="99.9681%" y="895.50"></text></g><g><title>blocking::Executor::main_loop (12 samples, 0.01%)</title><rect x="99.7181%" y="869" width="0.0102%" height="15" fill="rgb(219,215,7)" fg:x="117457" fg:w="12"/><text x="99.9681%" y="879.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="99.7394%" y="1093" width="0.0144%" height="15" fill="rgb(208,120,31)" fg:x="117482" fg:w="17"/><text x="99.9894%" y="1103.50"></text></g><g><title>pdk-halfbrown (260 samples, 0.22%)</title><rect x="99.7334%" y="1109" width="0.2207%" height="15" fill="rgb(244,30,8)" fg:x="117475" fg:w="260"/><text x="99.9834%" y="1119.50"></text></g><g><title>clone (236 samples, 0.20%)</title><rect x="99.7538%" y="1093" width="0.2004%" height="15" fill="rgb(238,35,44)" fg:x="117499" fg:w="236"/><text x="100.0038%" y="1103.50"></text></g><g><title>std::sys::unix::futex::futex_wait (29 samples, 0.02%)</title><rect x="99.9567%" y="773" width="0.0246%" height="15" fill="rgb(243,218,37)" fg:x="117738" fg:w="29"/><text x="100.2067%" y="783.50"></text></g><g><title>syscall (27 samples, 0.02%)</title><rect x="99.9584%" y="757" width="0.0229%" height="15" fill="rgb(218,169,10)" fg:x="117740" fg:w="27"/><text x="100.2084%" y="767.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (42 samples, 0.04%)</title><rect x="99.9559%" y="853" width="0.0357%" height="15" fill="rgb(221,144,10)" fg:x="117737" fg:w="42"/><text x="100.2059%" y="863.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (42 samples, 0.04%)</title><rect x="99.9559%" y="837" width="0.0357%" height="15" fill="rgb(226,41,38)" fg:x="117737" fg:w="42"/><text x="100.2059%" y="847.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (42 samples, 0.04%)</title><rect x="99.9559%" y="821" width="0.0357%" height="15" fill="rgb(228,3,1)" fg:x="117737" fg:w="42"/><text x="100.2059%" y="831.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (42 samples, 0.04%)</title><rect x="99.9559%" y="805" width="0.0357%" height="15" fill="rgb(209,129,12)" fg:x="117737" fg:w="42"/><text x="100.2059%" y="815.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (41 samples, 0.03%)</title><rect x="99.9567%" y="789" width="0.0348%" height="15" fill="rgb(213,136,33)" fg:x="117738" fg:w="41"/><text x="100.2067%" y="799.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (12 samples, 0.01%)</title><rect x="99.9813%" y="773" width="0.0102%" height="15" fill="rgb(209,181,29)" fg:x="117767" fg:w="12"/><text x="100.2313%" y="783.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (44 samples, 0.04%)</title><rect x="99.9559%" y="869" width="0.0374%" height="15" fill="rgb(234,173,18)" fg:x="117737" fg:w="44"/><text x="100.2059%" y="879.50"></text></g><g><title>std::panic::catch_unwind (47 samples, 0.04%)</title><rect x="99.9550%" y="981" width="0.0399%" height="15" fill="rgb(227,73,47)" fg:x="117736" fg:w="47"/><text x="100.2050%" y="991.50"></text></g><g><title>std::panicking::try (47 samples, 0.04%)</title><rect x="99.9550%" y="965" width="0.0399%" height="15" fill="rgb(234,9,34)" fg:x="117736" fg:w="47"/><text x="100.2050%" y="975.50"></text></g><g><title>std::panicking::try::do_call (47 samples, 0.04%)</title><rect x="99.9550%" y="949" width="0.0399%" height="15" fill="rgb(235,172,15)" fg:x="117736" fg:w="47"/><text x="100.2050%" y="959.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (47 samples, 0.04%)</title><rect x="99.9550%" y="933" width="0.0399%" height="15" fill="rgb(245,61,2)" fg:x="117736" fg:w="47"/><text x="100.2050%" y="943.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (47 samples, 0.04%)</title><rect x="99.9550%" y="917" width="0.0399%" height="15" fill="rgb(238,39,47)" fg:x="117736" fg:w="47"/><text x="100.2050%" y="927.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (47 samples, 0.04%)</title><rect x="99.9550%" y="901" width="0.0399%" height="15" fill="rgb(234,37,24)" fg:x="117736" fg:w="47"/><text x="100.2050%" y="911.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (46 samples, 0.04%)</title><rect x="99.9559%" y="885" width="0.0391%" height="15" fill="rgb(248,223,24)" fg:x="117737" fg:w="46"/><text x="100.2059%" y="895.50"></text></g><g><title>all (117,789 samples, 100%)</title><rect x="0.0000%" y="1125" width="100.0000%" height="15" fill="rgb(223,12,15)" fg:x="0" fg:w="117789"/><text x="0.2500%" y="1135.50"></text></g><g><title>tokio-runtime-w (54 samples, 0.05%)</title><rect x="99.9542%" y="1109" width="0.0458%" height="15" fill="rgb(249,6,3)" fg:x="117735" fg:w="54"/><text x="100.2042%" y="1119.50"></text></g><g><title>clone (53 samples, 0.04%)</title><rect x="99.9550%" y="1093" width="0.0450%" height="15" fill="rgb(237,105,33)" fg:x="117736" fg:w="53"/><text x="100.2050%" y="1103.50"></text></g><g><title>start_thread (53 samples, 0.04%)</title><rect x="99.9550%" y="1077" width="0.0450%" height="15" fill="rgb(252,208,35)" fg:x="117736" fg:w="53"/><text x="100.2050%" y="1087.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (53 samples, 0.04%)</title><rect x="99.9550%" y="1061" width="0.0450%" height="15" fill="rgb(215,181,35)" fg:x="117736" fg:w="53"/><text x="100.2050%" y="1071.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (53 samples, 0.04%)</title><rect x="99.9550%" y="1045" width="0.0450%" height="15" fill="rgb(246,212,3)" fg:x="117736" fg:w="53"/><text x="100.2050%" y="1055.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (53 samples, 0.04%)</title><rect x="99.9550%" y="1029" width="0.0450%" height="15" fill="rgb(247,156,24)" fg:x="117736" fg:w="53"/><text x="100.2050%" y="1039.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (53 samples, 0.04%)</title><rect x="99.9550%" y="1013" width="0.0450%" height="15" fill="rgb(248,9,31)" fg:x="117736" fg:w="53"/><text x="100.2050%" y="1023.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (53 samples, 0.04%)</title><rect x="99.9550%" y="997" width="0.0450%" height="15" fill="rgb(234,26,45)" fg:x="117736" fg:w="53"/><text x="100.2050%" y="1007.50"></text></g></svg></svg>